#
# PROJECT DESCRIPTION
#

TARGET = ecc

SRCS += configure.c
#changer sources

################################################################
# USERS INSERT LIB/TARGET SPECIFIC DIRECTIVES HERE
################################################################
INCLUDES += -I./board
# config clock 
INCLUDES += -I./board/core_board
# config compteur de performance + dans l'archive
INCLUDES += -I./wolfssl
# c_compiled

VPATH += ./board:./core
#d'autres chemins .c
SRCS += ./board/startup_stm32f407xx.s 
#a trouver dans l'archive
SRCS += test_wolfssl.c

LDFLAGS += -L./wolfssl/IDE/GCC-ARM/Build -l:libwolfssl.a 

LINKER_SCRIPT = ./board/stm32f407.ld
# a changer
################################################################

# ONE SOURCE FILE YIELDS ONE OBJECT FILE
OBJDIR = objdir
OBJS := $(addprefix $(OBJDIR)/,$(notdir $(SRCS:.c=.o)))
OBJS := $(addprefix $(OBJDIR)/,$(notdir $(OBJS:.s=.o)))

#
# CONFIG
#

CROSS_COMPILE = arm-none-eabi-

CC = $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)ld

# TARGET BOARD
CDEFS = -DSTM32F407xx

# SPECIFIC TO CC
CFLAGS += $(CDEFS)
CFLAGS += -mcpu=cortex-m4 -mthumb 
CFLAGS += -Os# A BIT LIKE -O2, WITH MORE FLAGS TO REDUCE THE SIZE
CFLAGS += -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -mgeneral-regs-only
CFLAGS += -std=c99
CFLAGS += -fno-common# UNINITIALIZED VARIABLES GO TO .bss
CFLAGS += -Wall -Wextra -Werror
CFLAGS += -pedantic
CFLAGS += -Wmissing-include-dirs
CFLAGS += -fomit-frame-pointer
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -g
CFLAGS += -Wno-unused-parameter

# SPECIFIC TO LD
LDFLAGS += -mcpu=cortex-m4 -mthumb
LDFLAGS += -mfloat-abi=softfp -mfpu=fpv4-sp-d16
LDFLAGS += --specs=nosys.specs
LDFLAGS += --specs=nano.specs
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -T$(LINKER_SCRIPT)

# Defines
DEF += -DHAVE_CURVE25519 -DECC_TIMING_RESISTANT -DNO_RSA -DWOLFSSL_NO_OS -DNO_FILESYSTEM
DEF += -DNO_WRITEV -DNO_WOLFSSL_DIR -DNO_WOLFSSL_SERVER -DNO_WOLFSSL_CLIENT -DSINGLE_THREADED

#
# TARGETS
#

.PHONY : all build clean

all: clean build

clean:
	rm -rf $(OBJDIR)

build: $(TARGET).elf

#
# RULES
#

$(TARGET).elf: $(OBJS) | $(OBJDIR)
	$(CC) $(OBJS) $(LDFLAGS) $(DEF) -o $(OBJDIR)/$@

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	$(CC) $(CFLAGS) $(INCLUDES) $(DEF) -c $< -o $@

$(OBJDIR)/%.o: %.s | $(OBJDIR)
	$(CC) $(CFLAGS) $(DEF) -c $< -o $@

$(OBJDIR):
	@mkdir -p $(OBJDIR)
