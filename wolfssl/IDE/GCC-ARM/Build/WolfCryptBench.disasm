
Build/WolfCryptBench.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <main>:

static func_args args = { 0 } ;
#endif

int main(void)
{
 8000000:	b510      	push	{r4, lr}
    int ret;
#ifndef NO_CRYPT_BENCHMARK
	wolfCrypt_Init();

	printf("\nBenchmark Test\n");
	benchmark_test(&args);
 8000002:	4c09      	ldr	r4, [pc, #36]	; (8000028 <main+0x28>)
	wolfCrypt_Init();
 8000004:	f012 f8b4 	bl	8012170 <wolfCrypt_Init>
	printf("\nBenchmark Test\n");
 8000008:	4808      	ldr	r0, [pc, #32]	; (800002c <main+0x2c>)
 800000a:	f013 f9e7 	bl	80133dc <iprintf>
	benchmark_test(&args);
 800000e:	4620      	mov	r0, r4
 8000010:	f001 fd60 	bl	8001ad4 <benchmark_test>
    ret = args.return_code;
 8000014:	68a4      	ldr	r4, [r4, #8]
	printf("Benchmark Test: Return code %d\n", ret);
 8000016:	4806      	ldr	r0, [pc, #24]	; (8000030 <main+0x30>)
 8000018:	4621      	mov	r1, r4
 800001a:	f013 f9df 	bl	80133dc <iprintf>

	wolfCrypt_Cleanup();
 800001e:	f012 f8b1 	bl	8012184 <wolfCrypt_Cleanup>
#else
    ret = NOT_COMPILED_IN;
#endif
	return ret;
}
 8000022:	4620      	mov	r0, r4
 8000024:	bd10      	pop	{r4, pc}
 8000026:	bf00      	nop
 8000028:	20000140 	.word	0x20000140
 800002c:	08014288 	.word	0x08014288
 8000030:	08014299 	.word	0x08014299

08000034 <current_time>:
#ifndef NO_CRYPT_BENCHMARK
/* This is used by wolfCrypt benchmark tool only */
double current_time(int reset)
{
    double timeNow;
    int timeMs = gTimeMs;
 8000034:	4b0d      	ldr	r3, [pc, #52]	; (800006c <current_time+0x38>)
{
 8000036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int timeMs = gTimeMs;
 800003a:	f8d3 8000 	ldr.w	r8, [r3]
    (void)reset;
    timeNow = (timeMs / 1000); // sec
 800003e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8000042:	fb98 f6f7 	sdiv	r6, r8, r7
 8000046:	4630      	mov	r0, r6
 8000048:	f012 fa6e 	bl	8012528 <__aeabi_i2d>
 800004c:	4604      	mov	r4, r0
    timeNow += (double)(timeMs % 1000) / 1000; // ms
 800004e:	fb07 8016 	mls	r0, r7, r6, r8
    timeNow = (timeMs / 1000); // sec
 8000052:	460d      	mov	r5, r1
    timeNow += (double)(timeMs % 1000) / 1000; // ms
 8000054:	f012 fa68 	bl	8012528 <__aeabi_i2d>
 8000058:	4b05      	ldr	r3, [pc, #20]	; (8000070 <current_time+0x3c>)
 800005a:	2200      	movs	r2, #0
 800005c:	f012 fbf8 	bl	8012850 <__aeabi_ddiv>
 8000060:	4622      	mov	r2, r4
 8000062:	462b      	mov	r3, r5
 8000064:	f012 f914 	bl	8012290 <__adddf3>
    return timeNow;
}
 8000068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800006c:	20000150 	.word	0x20000150
 8000070:	408f4000 	.word	0x408f4000

08000074 <hw_rand>:
static unsigned int gCounter;
unsigned int hw_rand(void)
{
    #warning Must implement your own random source

    return ++gCounter;
 8000074:	4b02      	ldr	r3, [pc, #8]	; (8000080 <hw_rand+0xc>)
 8000076:	6818      	ldr	r0, [r3, #0]
 8000078:	3001      	adds	r0, #1
 800007a:	6018      	str	r0, [r3, #0]
}
 800007c:	4770      	bx	lr
 800007e:	bf00      	nop
 8000080:	2000014c 	.word	0x2000014c

08000084 <my_rng_gen_block>:
{
    return hw_rand();
}

int my_rng_gen_block(unsigned char* output, unsigned int sz)
{
 8000084:	b570      	push	{r4, r5, r6, lr}
    uint32_t i = 0;
 8000086:	2200      	movs	r2, #0
{
 8000088:	4604      	mov	r4, r0

    while (i < sz)
 800008a:	428a      	cmp	r2, r1
 800008c:	d301      	bcc.n	8000092 <my_rng_gen_block+0xe>
            i += sizeof(CUSTOM_RAND_TYPE);
        }
    }

    return 0;
}
 800008e:	2000      	movs	r0, #0
 8000090:	bd70      	pop	{r4, r5, r6, pc}
        if( (i + sizeof(CUSTOM_RAND_TYPE)) > sz ||
 8000092:	1d15      	adds	r5, r2, #4
 8000094:	428d      	cmp	r5, r1
            ((uint32_t)&output[i] % sizeof(CUSTOM_RAND_TYPE)) != 0
 8000096:	eb04 0602 	add.w	r6, r4, r2
        if( (i + sizeof(CUSTOM_RAND_TYPE)) > sz ||
 800009a:	d801      	bhi.n	80000a0 <my_rng_gen_block+0x1c>
 800009c:	07b3      	lsls	r3, r6, #30
 800009e:	d005      	beq.n	80000ac <my_rng_gen_block+0x28>
    return hw_rand();
 80000a0:	f7ff ffe8 	bl	8000074 <hw_rand>
            output[i++] = (unsigned char)my_rng_seed_gen();
 80000a4:	1c55      	adds	r5, r2, #1
 80000a6:	7030      	strb	r0, [r6, #0]
{
 80000a8:	462a      	mov	r2, r5
 80000aa:	e7ee      	b.n	800008a <my_rng_gen_block+0x6>
    return hw_rand();
 80000ac:	f7ff ffe2 	bl	8000074 <hw_rand>
            *((CUSTOM_RAND_TYPE*)&output[i]) = my_rng_seed_gen();
 80000b0:	6030      	str	r0, [r6, #0]
            i += sizeof(CUSTOM_RAND_TYPE);
 80000b2:	e7f9      	b.n	80000a8 <my_rng_gen_block+0x24>

080000b4 <memcpy32>:
extern uint32_t __heap_end__[];

/* Copy memory: src=Source, dst_beg=Destination Begin, dst_end=Destination End */
void memcpy32(uint32_t* src, uint32_t* dst_beg, uint32_t* dst_end)
{
    while (dst_beg < dst_end) {
 80000b4:	428a      	cmp	r2, r1
 80000b6:	d800      	bhi.n	80000ba <memcpy32+0x6>
        *dst_beg++ = *src++;
    }
}
 80000b8:	4770      	bx	lr
        *dst_beg++ = *src++;
 80000ba:	f850 3b04 	ldr.w	r3, [r0], #4
 80000be:	f841 3b04 	str.w	r3, [r1], #4
 80000c2:	e7f7      	b.n	80000b4 <memcpy32>

080000c4 <meminit32>:
/* Zero address in range */
void meminit32(uint32_t* start, uint32_t* end)
{
    while (start < end) {
        *start++ = 0;
 80000c4:	2300      	movs	r3, #0
    while (start < end) {
 80000c6:	4288      	cmp	r0, r1
 80000c8:	d300      	bcc.n	80000cc <meminit32+0x8>
    }
}
 80000ca:	4770      	bx	lr
        *start++ = 0;
 80000cc:	f840 3b04 	str.w	r3, [r0], #4
 80000d0:	e7f9      	b.n	80000c6 <meminit32+0x2>
	...

080000d4 <reset_handler>:
#endif /* USE_WOLF_ARM_STARTUP */

/* Entry Point */
void reset_handler(void)
{
 80000d4:	b508      	push	{r3, lr}
#ifdef USE_WOLF_ARM_STARTUP
    /* Init sections */
    memcpy32(__data_load_start__, __data_start__, __data_end__);
 80000d6:	4a09      	ldr	r2, [pc, #36]	; (80000fc <reset_handler+0x28>)
 80000d8:	4909      	ldr	r1, [pc, #36]	; (8000100 <reset_handler+0x2c>)
 80000da:	480a      	ldr	r0, [pc, #40]	; (8000104 <reset_handler+0x30>)
 80000dc:	f7ff ffea 	bl	80000b4 <memcpy32>
    meminit32(__bss_start__, __bss_end__);
 80000e0:	4909      	ldr	r1, [pc, #36]	; (8000108 <reset_handler+0x34>)
 80000e2:	480a      	ldr	r0, [pc, #40]	; (800010c <reset_handler+0x38>)
 80000e4:	f7ff ffee 	bl	80000c4 <meminit32>

    /* Init heap */
    __heap_start__[0] = 0;
 80000e8:	4b09      	ldr	r3, [pc, #36]	; (8000110 <reset_handler+0x3c>)
 80000ea:	2200      	movs	r2, #0
 80000ec:	601a      	str	r2, [r3, #0]
    __heap_start__[1] = ((uintptr_t)__heap_end__ - (uintptr_t)__heap_start__);
 80000ee:	4a09      	ldr	r2, [pc, #36]	; (8000114 <reset_handler+0x40>)
 80000f0:	1ad2      	subs	r2, r2, r3
 80000f2:	605a      	str	r2, [r3, #4]
#endif /* USE_WOLF_ARM_STARTUP */

    /* Start main */
    extern int main(void);
    main();
 80000f4:	f7ff ff84 	bl	8000000 <main>

    /* Application has ended, so busy wait */
    while(1);
 80000f8:	e7fe      	b.n	80000f8 <reset_handler+0x24>
 80000fa:	bf00      	nop
 80000fc:	080143c8 	.word	0x080143c8
 8000100:	08014288 	.word	0x08014288
 8000104:	08014288 	.word	0x08014288
 8000108:	200001ac 	.word	0x200001ac
 800010c:	20000140 	.word	0x20000140
 8000110:	200001ac 	.word	0x200001ac
 8000114:	200001ac 	.word	0x200001ac

08000118 <bench_stats_start>:
#endif
    INIT_CYCLE_COUNTER
}

static WC_INLINE void bench_stats_start(int* count, double* start)
{
 8000118:	b510      	push	{r4, lr}
    *count = 0;
 800011a:	2300      	movs	r3, #0
 800011c:	6003      	str	r3, [r0, #0]
    *start = current_time(1);
 800011e:	2001      	movs	r0, #1
{
 8000120:	460c      	mov	r4, r1
    *start = current_time(1);
 8000122:	f7ff ff87 	bl	8000034 <current_time>
 8000126:	e9c4 0100 	strd	r0, r1, [r4]

    BEGIN_ESP_CYCLES
#else
    BEGIN_INTEL_CYCLES
#endif
}
 800012a:	bd10      	pop	{r4, pc}

0800012c <bench_stats_check>:
        bench_stats_start(count, start);                                       \
    } while (0)
#endif

static WC_INLINE int bench_stats_check(double start)
{
 800012c:	b538      	push	{r3, r4, r5, lr}
 800012e:	4604      	mov	r4, r0
 8000130:	460d      	mov	r5, r1
    return ((current_time(0) - start) < BENCH_MIN_RUNTIME_SEC);
 8000132:	2000      	movs	r0, #0
 8000134:	f7ff ff7e 	bl	8000034 <current_time>
 8000138:	4622      	mov	r2, r4
 800013a:	462b      	mov	r3, r5
 800013c:	f012 f8a6 	bl	801228c <__aeabi_dsub>
 8000140:	4b03      	ldr	r3, [pc, #12]	; (8000150 <bench_stats_check+0x24>)
 8000142:	2200      	movs	r2, #0
 8000144:	f012 fccc 	bl	8012ae0 <__aeabi_dcmplt>
}
 8000148:	3800      	subs	r0, #0
 800014a:	bf18      	it	ne
 800014c:	2001      	movne	r0, #1
 800014e:	bd38      	pop	{r3, r4, r5, pc}
 8000150:	3ff00000 	.word	0x3ff00000

08000154 <bench_stats_asym_finish_ex.constprop.0>:
#ifdef BENCH_ASYM
#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DH) || \
    defined(HAVE_CURVE25519) || defined(HAVE_ED25519) || \
    defined(HAVE_CURVE448) || defined(HAVE_ED448) || \
    defined(WOLFSSL_HAVE_KYBER)
static void bench_stats_asym_finish_ex(const char* algo, int strength,
 8000154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000158:	b0db      	sub	sp, #364	; 0x16c
 800015a:	4605      	mov	r5, r0
 800015c:	460f      	mov	r7, r1
 800015e:	4616      	mov	r6, r2
    const char* kOpsSec = "Ops/Sec";
#endif
    char msg[256];
    static int asym_header_printed = 0;

    XMEMSET(msg, 0, sizeof(msg));
 8000160:	2100      	movs	r1, #0
 8000162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000166:	a81a      	add	r0, sp, #104	; 0x68
static void bench_stats_asym_finish_ex(const char* algo, int strength,
 8000168:	461c      	mov	r4, r3
    XMEMSET(msg, 0, sizeof(msg));
 800016a:	f013 f851 	bl	8013210 <memset>

    total = current_time(0) - start;
 800016e:	2000      	movs	r0, #0
 8000170:	f7ff ff60 	bl	8000034 <current_time>
 8000174:	e9dd 2364 	ldrd	r2, r3, [sp, #400]	; 0x190
 8000178:	f012 f888 	bl	801228c <__aeabi_dsub>
        END_INTEL_CYCLES
    #endif
#endif

    /* some sanity checks on the final numbers */
    if (count > 0) {
 800017c:	2c00      	cmp	r4, #0
    total = current_time(0) - start;
 800017e:	4680      	mov	r8, r0
 8000180:	4689      	mov	r9, r1
    if (count > 0) {
 8000182:	dd5b      	ble.n	800023c <bench_stats_asym_finish_ex.constprop.0+0xe8>
        each  = total / count; /* per second  */
 8000184:	4620      	mov	r0, r4
 8000186:	f012 f9cf 	bl	8012528 <__aeabi_i2d>
 800018a:	4602      	mov	r2, r0
 800018c:	460b      	mov	r3, r1
 800018e:	4640      	mov	r0, r8
 8000190:	4649      	mov	r1, r9
 8000192:	f012 fb5d 	bl	8012850 <__aeabi_ddiv>
 8000196:	4682      	mov	sl, r0
 8000198:	468b      	mov	fp, r1
    else {
        count = 0;
        each = 0;
    }

    if (total > 0) {
 800019a:	2200      	movs	r2, #0
 800019c:	2300      	movs	r3, #0
 800019e:	4640      	mov	r0, r8
 80001a0:	4649      	mov	r1, r9
 80001a2:	f012 fcbb 	bl	8012b1c <__aeabi_dcmpgt>
 80001a6:	2800      	cmp	r0, #0
 80001a8:	d04e      	beq.n	8000248 <bench_stats_asym_finish_ex.constprop.0+0xf4>
        opsSec = count / total;    /* ops second */
 80001aa:	4620      	mov	r0, r4
 80001ac:	f012 f9bc 	bl	8012528 <__aeabi_i2d>
 80001b0:	4642      	mov	r2, r8
 80001b2:	464b      	mov	r3, r9
 80001b4:	f012 fb4c 	bl	8012850 <__aeabi_ddiv>
 80001b8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    }
    else {
        opsSec = 0;
    }

    milliEach = each * 1000;   /* milliseconds */
 80001bc:	4b38      	ldr	r3, [pc, #224]	; (80002a0 <bench_stats_asym_finish_ex.constprop.0+0x14c>)
 80001be:	4650      	mov	r0, sl
 80001c0:	4659      	mov	r1, fp
 80001c2:	2200      	movs	r2, #0
 80001c4:	f012 fa1a 	bl	80125fc <__aeabi_dmul>

    SLEEP_ON_ERROR(ret);
    /* format and print to terminal */
    if (csv_format == 1) {
 80001c8:	4b36      	ldr	r3, [pc, #216]	; (80002a4 <bench_stats_asym_finish_ex.constprop.0+0x150>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
    milliEach = each * 1000;   /* milliseconds */
 80001ce:	4682      	mov	sl, r0
 80001d0:	468b      	mov	fp, r1
    if (csv_format == 1) {
 80001d2:	d13e      	bne.n	8000252 <bench_stats_asym_finish_ex.constprop.0+0xfe>
        /* only print out header once */
        if (asym_header_printed == 0) {
 80001d4:	4c34      	ldr	r4, [pc, #208]	; (80002a8 <bench_stats_asym_finish_ex.constprop.0+0x154>)
 80001d6:	6822      	ldr	r2, [r4, #0]
 80001d8:	b952      	cbnz	r2, 80001f0 <bench_stats_asym_finish_ex.constprop.0+0x9c>
    #else
            printf("%s", "\"asym\",Algorithm,key size,operation,avg ms,ops/sec,"
                   "ops,secs\n");
    #endif
#else
            printf("\n%sAsymmetric Ciphers:\n\n", info_prefix);
 80001da:	4934      	ldr	r1, [pc, #208]	; (80002ac <bench_stats_asym_finish_ex.constprop.0+0x158>)
 80001dc:	4834      	ldr	r0, [pc, #208]	; (80002b0 <bench_stats_asym_finish_ex.constprop.0+0x15c>)
 80001de:	9319      	str	r3, [sp, #100]	; 0x64
 80001e0:	f013 f8fc 	bl	80133dc <iprintf>
            printf("%sAlgorithm,key size,operation,avg ms,ops/sec,\n",
 80001e4:	4931      	ldr	r1, [pc, #196]	; (80002ac <bench_stats_asym_finish_ex.constprop.0+0x158>)
 80001e6:	4833      	ldr	r0, [pc, #204]	; (80002b4 <bench_stats_asym_finish_ex.constprop.0+0x160>)
 80001e8:	f013 f8f8 	bl	80133dc <iprintf>
                   info_prefix);
#endif
            asym_header_printed = 1;
 80001ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80001ee:	6023      	str	r3, [r4, #0]
                        FLT_FMT_PREC_ARGS(3, milliEach),
                        FLT_FMT_PREC_ARGS(3, opsSec),
                        count, FLT_FMT_ARGS(total));
    #endif
#else
        (void)XSNPRINTF(msg, sizeof(msg), "%s,%d,%s%s," FLT_FMT_PREC ","
 80001f0:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
 80001f4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80001f8:	2303      	movs	r3, #3
 80001fa:	9306      	str	r3, [sp, #24]
 80001fc:	9303      	str	r3, [sp, #12]
 80001fe:	4b2e      	ldr	r3, [pc, #184]	; (80002b8 <bench_stats_asym_finish_ex.constprop.0+0x164>)
 8000200:	4a2e      	ldr	r2, [pc, #184]	; (80002bc <bench_stats_asym_finish_ex.constprop.0+0x168>)
 8000202:	9700      	str	r7, [sp, #0]
 8000204:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8000208:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800020c:	462b      	mov	r3, r5
 800020e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000212:	a81a      	add	r0, sp, #104	; 0x68
 8000214:	f013 f90a 	bl	801342c <sniprintf>
                        FLT_FMT_PREC2_ARGS(5, 3, total), word[1], word[2],
                        FLT_FMT_PREC2_ARGS(5, 3, milliEach),
                        FLT_FMT_PREC_ARGS(3, opsSec), word[3]);
#endif
    }
    printf("%s", msg);
 8000218:	4829      	ldr	r0, [pc, #164]	; (80002c0 <bench_stats_asym_finish_ex.constprop.0+0x16c>)
 800021a:	a91a      	add	r1, sp, #104	; 0x68
 800021c:	f013 f8de 	bl	80133dc <iprintf>

    /* show errors */
    if (ret < 0) {
 8000220:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8000222:	2b00      	cmp	r3, #0
 8000224:	da07      	bge.n	8000236 <bench_stats_asym_finish_ex.constprop.0+0xe2>
        printf("%sBenchmark %s %s %d failed: %d\n",
 8000226:	e9cd 7300 	strd	r7, r3, [sp]
 800022a:	4926      	ldr	r1, [pc, #152]	; (80002c4 <bench_stats_asym_finish_ex.constprop.0+0x170>)
 800022c:	4826      	ldr	r0, [pc, #152]	; (80002c8 <bench_stats_asym_finish_ex.constprop.0+0x174>)
 800022e:	4633      	mov	r3, r6
 8000230:	462a      	mov	r2, r5
 8000232:	f013 f8d3 	bl	80133dc <iprintf>
    (void)ret;

    RESTORE_VECTOR_REGISTERS();

    TEST_SLEEP();
} /* bench_stats_asym_finish_ex */
 8000236:	b05b      	add	sp, #364	; 0x16c
 8000238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        each = 0;
 800023c:	f04f 0a00 	mov.w	sl, #0
 8000240:	f04f 0b00 	mov.w	fp, #0
        count = 0;
 8000244:	2400      	movs	r4, #0
 8000246:	e7a8      	b.n	800019a <bench_stats_asym_finish_ex.constprop.0+0x46>
        opsSec = 0;
 8000248:	2200      	movs	r2, #0
 800024a:	2300      	movs	r3, #0
 800024c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000250:	e7b4      	b.n	80001bc <bench_stats_asym_finish_ex.constprop.0+0x68>
        (void)XSNPRINTF(msg, sizeof(msg),
 8000252:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <bench_stats_asym_finish_ex.constprop.0+0x178>)
 8000254:	68da      	ldr	r2, [r3, #12]
 8000256:	9214      	str	r2, [sp, #80]	; 0x50
 8000258:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
 800025c:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8000260:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 8000264:	2203      	movs	r2, #3
 8000266:	2105      	movs	r1, #5
 8000268:	9210      	str	r2, [sp, #64]	; 0x40
 800026a:	920d      	str	r2, [sp, #52]	; 0x34
 800026c:	910c      	str	r1, [sp, #48]	; 0x30
 800026e:	6898      	ldr	r0, [r3, #8]
 8000270:	900b      	str	r0, [sp, #44]	; 0x2c
 8000272:	6858      	ldr	r0, [r3, #4]
 8000274:	900a      	str	r0, [sp, #40]	; 0x28
 8000276:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800027a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <bench_stats_asym_finish_ex.constprop.0+0x17c>)
 8000282:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <bench_stats_asym_finish_ex.constprop.0+0x164>)
 8000288:	e9cd 7600 	strd	r7, r6, [sp]
 800028c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	462b      	mov	r3, r5
 8000296:	a81a      	add	r0, sp, #104	; 0x68
 8000298:	f013 f8c8 	bl	801342c <sniprintf>
 800029c:	e7bc      	b.n	8000218 <bench_stats_asym_finish_ex.constprop.0+0xc4>
 800029e:	bf00      	nop
 80002a0:	408f4000 	.word	0x408f4000
 80002a4:	20000180 	.word	0x20000180
 80002a8:	20000158 	.word	0x20000158
 80002ac:	08014d89 	.word	0x08014d89
 80002b0:	080142b9 	.word	0x080142b9
 80002b4:	080142d2 	.word	0x080142d2
 80002b8:	080142d1 	.word	0x080142d1
 80002bc:	08014302 	.word	0x08014302
 80002c0:	08014354 	.word	0x08014354
 80002c4:	08014d88 	.word	0x08014d88
 80002c8:	08014357 	.word	0x08014357
 80002cc:	200000a8 	.word	0x200000a8
 80002d0:	08014319 	.word	0x08014319
 80002d4:	00000000 	.word	0x00000000

080002d8 <bench_stats_sym_finish.constprop.0>:
static void bench_stats_sym_finish(const char* desc, int useDeviceID,
 80002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002dc:	b0bb      	sub	sp, #236	; 0xec
 80002de:	460c      	mov	r4, r1
 80002e0:	4692      	mov	sl, r2
    XMEMSET(msg, 0, sizeof(msg));
 80002e2:	2100      	movs	r1, #0
 80002e4:	2296      	movs	r2, #150	; 0x96
static void bench_stats_sym_finish(const char* desc, int useDeviceID,
 80002e6:	4606      	mov	r6, r0
    XMEMSET(msg, 0, sizeof(msg));
 80002e8:	a814      	add	r0, sp, #80	; 0x50
 80002ea:	f012 ff91 	bl	8013210 <memset>
    total = current_time(0) - start;
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff fea0 	bl	8000034 <current_time>
 80002f4:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 80002f8:	f011 ffc8 	bl	801228c <__aeabi_dsub>
 80002fc:	4680      	mov	r8, r0
    double total, persec = 0, blocks = (double)count;
 80002fe:	4620      	mov	r0, r4
    total = current_time(0) - start;
 8000300:	4689      	mov	r9, r1
    double total, persec = 0, blocks = (double)count;
 8000302:	f012 f911 	bl	8012528 <__aeabi_i2d>
 8000306:	4604      	mov	r4, r0
    blocks *= countSz;
 8000308:	4650      	mov	r0, sl
    double total, persec = 0, blocks = (double)count;
 800030a:	460d      	mov	r5, r1
    blocks *= countSz;
 800030c:	f012 f8fc 	bl	8012508 <__aeabi_ui2d>
    if (csv_format == 1) {
 8000310:	f8df b194 	ldr.w	fp, [pc, #404]	; 80004a8 <bench_stats_sym_finish.constprop.0+0x1d0>
    blocks *= countSz;
 8000314:	4602      	mov	r2, r0
 8000316:	460b      	mov	r3, r1
 8000318:	4620      	mov	r0, r4
 800031a:	4629      	mov	r1, r5
 800031c:	f012 f96e 	bl	80125fc <__aeabi_dmul>
    if (csv_format == 1) {
 8000320:	f8db 7000 	ldr.w	r7, [fp]
 8000324:	2f01      	cmp	r7, #1
    blocks *= countSz;
 8000326:	4604      	mov	r4, r0
 8000328:	460d      	mov	r5, r1
    if (csv_format == 1) {
 800032a:	d10c      	bne.n	8000346 <bench_stats_sym_finish.constprop.0+0x6e>
        if (sym_header_printed == 0) {
 800032c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80004ac <bench_stats_sym_finish.constprop.0+0x1d4>
 8000330:	f8da 2000 	ldr.w	r2, [sl]
 8000334:	b93a      	cbnz	r2, 8000346 <bench_stats_sym_finish.constprop.0+0x6e>
            printf("\n\nSymmetric Ciphers:\n\n");
 8000336:	485e      	ldr	r0, [pc, #376]	; (80004b0 <bench_stats_sym_finish.constprop.0+0x1d8>)
 8000338:	f013 f850 	bl	80133dc <iprintf>
            printf("Algorithm,"
 800033c:	485d      	ldr	r0, [pc, #372]	; (80004b4 <bench_stats_sym_finish.constprop.0+0x1dc>)
 800033e:	f013 f84d 	bl	80133dc <iprintf>
            sym_header_printed = 1;
 8000342:	f8ca 7000 	str.w	r7, [sl]
    if (base2) {
 8000346:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <bench_stats_sym_finish.constprop.0+0x1e0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d059      	beq.n	8000402 <bench_stats_sym_finish.constprop.0+0x12a>
    if (*blocks > (1024UL * 1024UL)) {
 800034e:	2200      	movs	r2, #0
 8000350:	4b5a      	ldr	r3, [pc, #360]	; (80004bc <bench_stats_sym_finish.constprop.0+0x1e4>)
 8000352:	4620      	mov	r0, r4
 8000354:	4629      	mov	r1, r5
 8000356:	f012 fbe1 	bl	8012b1c <__aeabi_dcmpgt>
        *blocks /= (1024UL * 1024UL);
 800035a:	2200      	movs	r2, #0
    if (*blocks > (1024UL * 1024UL)) {
 800035c:	2800      	cmp	r0, #0
 800035e:	d03f      	beq.n	80003e0 <bench_stats_sym_finish.constprop.0+0x108>
        *blocks /= (1024UL * 1024UL);
 8000360:	4620      	mov	r0, r4
 8000362:	4629      	mov	r1, r5
 8000364:	4b56      	ldr	r3, [pc, #344]	; (80004c0 <bench_stats_sym_finish.constprop.0+0x1e8>)
        rt = "MiB";
 8000366:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80004c4 <bench_stats_sym_finish.constprop.0+0x1ec>
        *blocks /= (1024UL * 1024UL);
 800036a:	f012 f947 	bl	80125fc <__aeabi_dmul>
 800036e:	4604      	mov	r4, r0
 8000370:	460d      	mov	r5, r1
    if (total > 0) {
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	4640      	mov	r0, r8
 8000378:	4649      	mov	r1, r9
 800037a:	f012 fbcf 	bl	8012b1c <__aeabi_dcmpgt>
 800037e:	2800      	cmp	r0, #0
 8000380:	d068      	beq.n	8000454 <bench_stats_sym_finish.constprop.0+0x17c>
        persec = (1 / total) * blocks;
 8000382:	4642      	mov	r2, r8
 8000384:	464b      	mov	r3, r9
 8000386:	4950      	ldr	r1, [pc, #320]	; (80004c8 <bench_stats_sym_finish.constprop.0+0x1f0>)
 8000388:	2000      	movs	r0, #0
 800038a:	f012 fa61 	bl	8012850 <__aeabi_ddiv>
 800038e:	4622      	mov	r2, r4
 8000390:	462b      	mov	r3, r5
 8000392:	f012 f933 	bl	80125fc <__aeabi_dmul>
    if (csv_format == 1) {
 8000396:	f8db 3000 	ldr.w	r3, [fp]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d15d      	bne.n	800045a <bench_stats_sym_finish.constprop.0+0x182>
        (void)XSNPRINTF(msg, sizeof(msg), "%s," FLT_FMT ",", desc,
 800039e:	e9cd 0100 	strd	r0, r1, [sp]
 80003a2:	4a4a      	ldr	r2, [pc, #296]	; (80004cc <bench_stats_sym_finish.constprop.0+0x1f4>)
 80003a4:	4633      	mov	r3, r6
 80003a6:	2196      	movs	r1, #150	; 0x96
 80003a8:	a814      	add	r0, sp, #80	; 0x50
 80003aa:	f013 f83f 	bl	801342c <sniprintf>
        SHOW_INTEL_CYCLES(msg, sizeof(msg), (unsigned)countSz);
 80003ae:	a814      	add	r0, sp, #80	; 0x50
 80003b0:	f013 f8b3 	bl	801351a <strlen>
 80003b4:	f100 03e8 	add.w	r3, r0, #232	; 0xe8
 80003b8:	eb0d 0003 	add.w	r0, sp, r3
 80003bc:	230a      	movs	r3, #10
 80003be:	f800 3c98 	strb.w	r3, [r0, #-152]
    printf("%s", msg);
 80003c2:	a914      	add	r1, sp, #80	; 0x50
 80003c4:	4842      	ldr	r0, [pc, #264]	; (80004d0 <bench_stats_sym_finish.constprop.0+0x1f8>)
 80003c6:	f013 f809 	bl	80133dc <iprintf>
    if (ret < 0) {
 80003ca:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	da04      	bge.n	80003da <bench_stats_sym_finish.constprop.0+0x102>
        printf("%sBenchmark %s failed: %d\n", err_prefix, desc, ret);
 80003d0:	4940      	ldr	r1, [pc, #256]	; (80004d4 <bench_stats_sym_finish.constprop.0+0x1fc>)
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <bench_stats_sym_finish.constprop.0+0x200>)
 80003d4:	4632      	mov	r2, r6
 80003d6:	f013 f801 	bl	80133dc <iprintf>
} /* bench_stats_sym_finish */
 80003da:	b03b      	add	sp, #236	; 0xec
 80003dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (*blocks > 1024) {
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <bench_stats_sym_finish.constprop.0+0x204>)
 80003e2:	4620      	mov	r0, r4
 80003e4:	4629      	mov	r1, r5
 80003e6:	f012 fb99 	bl	8012b1c <__aeabi_dcmpgt>
 80003ea:	b380      	cbz	r0, 800044e <bench_stats_sym_finish.constprop.0+0x176>
        *blocks /= 1024;
 80003ec:	4620      	mov	r0, r4
 80003ee:	4629      	mov	r1, r5
 80003f0:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <bench_stats_sym_finish.constprop.0+0x208>)
        rt = "KiB";
 80003f2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 80004e4 <bench_stats_sym_finish.constprop.0+0x20c>
        *blocks /= 1024;
 80003f6:	2200      	movs	r2, #0
 80003f8:	f012 f900 	bl	80125fc <__aeabi_dmul>
 80003fc:	4604      	mov	r4, r0
 80003fe:	460d      	mov	r5, r1
        rt = "KiB";
 8000400:	e7b7      	b.n	8000372 <bench_stats_sym_finish.constprop.0+0x9a>
    if (*blocks > (1000UL * 1000UL)) {
 8000402:	a327      	add	r3, pc, #156	; (adr r3, 80004a0 <bench_stats_sym_finish.constprop.0+0x1c8>)
 8000404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000408:	4620      	mov	r0, r4
 800040a:	4629      	mov	r1, r5
 800040c:	f012 fb86 	bl	8012b1c <__aeabi_dcmpgt>
 8000410:	b158      	cbz	r0, 800042a <bench_stats_sym_finish.constprop.0+0x152>
        *blocks /= (1000UL * 1000UL);
 8000412:	4620      	mov	r0, r4
 8000414:	4629      	mov	r1, r5
 8000416:	a322      	add	r3, pc, #136	; (adr r3, 80004a0 <bench_stats_sym_finish.constprop.0+0x1c8>)
 8000418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800041c:	f012 fa18 	bl	8012850 <__aeabi_ddiv>
        rt = "MB";
 8000420:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80004e8 <bench_stats_sym_finish.constprop.0+0x210>
        *blocks /= (1000UL * 1000UL);
 8000424:	4604      	mov	r4, r0
 8000426:	460d      	mov	r5, r1
        rt = "MB";
 8000428:	e7a3      	b.n	8000372 <bench_stats_sym_finish.constprop.0+0x9a>
    else if (*blocks > 1000) {
 800042a:	4b30      	ldr	r3, [pc, #192]	; (80004ec <bench_stats_sym_finish.constprop.0+0x214>)
 800042c:	2200      	movs	r2, #0
 800042e:	4620      	mov	r0, r4
 8000430:	4629      	mov	r1, r5
 8000432:	f012 fb73 	bl	8012b1c <__aeabi_dcmpgt>
 8000436:	b150      	cbz	r0, 800044e <bench_stats_sym_finish.constprop.0+0x176>
        *blocks /= 1000; /* make KB */
 8000438:	4620      	mov	r0, r4
 800043a:	4629      	mov	r1, r5
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <bench_stats_sym_finish.constprop.0+0x214>)
        rt = "KB";
 800043e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80004f0 <bench_stats_sym_finish.constprop.0+0x218>
        *blocks /= 1000; /* make KB */
 8000442:	2200      	movs	r2, #0
 8000444:	f012 fa04 	bl	8012850 <__aeabi_ddiv>
 8000448:	4604      	mov	r4, r0
 800044a:	460d      	mov	r5, r1
        rt = "KB";
 800044c:	e791      	b.n	8000372 <bench_stats_sym_finish.constprop.0+0x9a>
        rt = "bytes";
 800044e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80004f4 <bench_stats_sym_finish.constprop.0+0x21c>
 8000452:	e78e      	b.n	8000372 <bench_stats_sym_finish.constprop.0+0x9a>
    double total, persec = 0, blocks = (double)count;
 8000454:	2000      	movs	r0, #0
 8000456:	2100      	movs	r1, #0
 8000458:	e79d      	b.n	8000396 <bench_stats_sym_finish.constprop.0+0xbe>
        (void)XSNPRINTF(msg, sizeof(msg),
 800045a:	2303      	movs	r3, #3
 800045c:	2208      	movs	r2, #8
 800045e:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
 8000462:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000466:	4a24      	ldr	r2, [pc, #144]	; (80004f8 <bench_stats_sym_finish.constprop.0+0x220>)
 8000468:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800046c:	6851      	ldr	r1, [r2, #4]
 800046e:	9309      	str	r3, [sp, #36]	; 0x24
 8000470:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8000474:	2305      	movs	r3, #5
 8000476:	910c      	str	r1, [sp, #48]	; 0x30
 8000478:	9308      	str	r3, [sp, #32]
 800047a:	6812      	ldr	r2, [r2, #0]
 800047c:	e9cd a206 	strd	sl, r2, [sp, #24]
 8000480:	2200      	movs	r2, #0
 8000482:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <bench_stats_sym_finish.constprop.0+0x224>)
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800048e:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <bench_stats_sym_finish.constprop.0+0x228>)
 8000490:	4633      	mov	r3, r6
 8000492:	2196      	movs	r1, #150	; 0x96
 8000494:	a814      	add	r0, sp, #80	; 0x50
 8000496:	f012 ffc9 	bl	801342c <sniprintf>
 800049a:	e788      	b.n	80003ae <bench_stats_sym_finish.constprop.0+0xd6>
 800049c:	f3af 8000 	nop.w
 80004a0:	00000000 	.word	0x00000000
 80004a4:	412e8480 	.word	0x412e8480
 80004a8:	20000180 	.word	0x20000180
 80004ac:	20000190 	.word	0x20000190
 80004b0:	0801438c 	.word	0x0801438c
 80004b4:	080143a3 	.word	0x080143a3
 80004b8:	20000008 	.word	0x20000008
 80004bc:	41300000 	.word	0x41300000
 80004c0:	3eb00000 	.word	0x3eb00000
 80004c4:	08014388 	.word	0x08014388
 80004c8:	3ff00000 	.word	0x3ff00000
 80004cc:	080143b5 	.word	0x080143b5
 80004d0:	08014354 	.word	0x08014354
 80004d4:	08014d88 	.word	0x08014d88
 80004d8:	080143e5 	.word	0x080143e5
 80004dc:	40900000 	.word	0x40900000
 80004e0:	3f500000 	.word	0x3f500000
 80004e4:	08014378 	.word	0x08014378
 80004e8:	08014382 	.word	0x08014382
 80004ec:	408f4000 	.word	0x408f4000
 80004f0:	08014385 	.word	0x08014385
 80004f4:	0801437c 	.word	0x0801437c
 80004f8:	20000088 	.word	0x20000088
 80004fc:	080142d1 	.word	0x080142d1
 8000500:	080143bc 	.word	0x080143bc

08000504 <bench_hmac.constprop.0>:

#endif /* HAVE_SCRYPT */

#ifndef NO_HMAC

static void bench_hmac(int useDeviceID, int type, int digestSz,
 8000504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
                       const byte* key, word32 keySz, const char* label)
{
    Hmac   hmac[BENCH_MAX_PENDING];
    double start;
    int    ret = 0, i, count = 0, times, pending = 0;
 8000508:	f04f 0800 	mov.w	r8, #0
static void bench_hmac(int useDeviceID, int type, int digestSz,
 800050c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8000510:	460c      	mov	r4, r1
 8000512:	4615      	mov	r5, r2
#endif

    (void)digestSz;

    /* clear for done cleanup */
    XMEMSET(hmac, 0, sizeof(hmac));
 8000514:	4641      	mov	r1, r8
 8000516:	f44f 720a 	mov.w	r2, #552	; 0x228
 800051a:	a818      	add	r0, sp, #96	; 0x60
static void bench_hmac(int useDeviceID, int type, int digestSz,
 800051c:	461f      	mov	r7, r3
 800051e:	9eaa      	ldr	r6, [sp, #680]	; 0x2a8
    int    ret = 0, i, count = 0, times, pending = 0;
 8000520:	f8cd 8014 	str.w	r8, [sp, #20]
    XMEMSET(hmac, 0, sizeof(hmac));
 8000524:	f012 fe74 	bl	8013210 <memset>

    /* init keys */
    for (i = 0; i < BENCH_MAX_PENDING; i++) {
        ret = wc_HmacInit(&hmac[i], HEAP_HINT,
 8000528:	f06f 0201 	mvn.w	r2, #1
 800052c:	4641      	mov	r1, r8
 800052e:	a818      	add	r0, sp, #96	; 0x60
 8000530:	f006 fd4e 	bl	8006fd0 <wc_HmacInit>
                useDeviceID ? devId : INVALID_DEVID);
        if (ret != 0) {
 8000534:	4602      	mov	r2, r0
 8000536:	b150      	cbz	r0, 800054e <bench_hmac.constprop.0+0x4a>
            printf("wc_HmacInit failed for %s, ret = %d\n", label, ret);
 8000538:	4824      	ldr	r0, [pc, #144]	; (80005cc <bench_hmac.constprop.0+0xc8>)
 800053a:	4631      	mov	r1, r6
            goto exit;
        }

        ret = wc_HmacSetKey(&hmac[i], type, key, keySz);
        if (ret != 0) {
            printf("wc_HmacSetKey failed for %s, ret = %d\n", label, ret);
 800053c:	f012 ff4e 	bl	80133dc <iprintf>
    bench_stats_sym_finish(label, useDeviceID, count, bench_size, start, ret);

exit:

    for (i = 0; i < BENCH_MAX_PENDING; i++) {
        wc_HmacFree(&hmac[i]);
 8000540:	a818      	add	r0, sp, #96	; 0x60
 8000542:	f006 fd57 	bl	8006ff4 <wc_HmacFree>
    }

#ifdef WOLFSSL_ASYNC_CRYPT
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
#endif
}
 8000546:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800054a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = wc_HmacSetKey(&hmac[i], type, key, keySz);
 800054e:	462a      	mov	r2, r5
 8000550:	463b      	mov	r3, r7
 8000552:	4621      	mov	r1, r4
 8000554:	a818      	add	r0, sp, #96	; 0x60
 8000556:	f006 fd69 	bl	800702c <wc_HmacSetKey>
        if (ret != 0) {
 800055a:	4602      	mov	r2, r0
 800055c:	b110      	cbz	r0, 8000564 <bench_hmac.constprop.0+0x60>
            printf("wc_HmacSetKey failed for %s, ret = %d\n", label, ret);
 800055e:	481c      	ldr	r0, [pc, #112]	; (80005d0 <bench_hmac.constprop.0+0xcc>)
 8000560:	4631      	mov	r1, r6
 8000562:	e7eb      	b.n	800053c <bench_hmac.constprop.0+0x38>
    bench_stats_start(&count, &start);
 8000564:	a906      	add	r1, sp, #24
 8000566:	a805      	add	r0, sp, #20
 8000568:	f7ff fdd6 	bl	8000118 <bench_stats_start>
        for (times = 0; times < numBlocks || pending > 0; ) {
 800056c:	4f19      	ldr	r7, [pc, #100]	; (80005d4 <bench_hmac.constprop.0+0xd0>)
                    ret = wc_HmacUpdate(&hmac[i], bench_plain, bench_size);
 800056e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80005d8 <bench_hmac.constprop.0+0xd4>
 8000572:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80005dc <bench_hmac.constprop.0+0xd8>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000576:	2500      	movs	r5, #0
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	42ab      	cmp	r3, r5
 800057c:	dc1a      	bgt.n	80005b4 <bench_hmac.constprop.0+0xb0>
        count += times;
 800057e:	9b05      	ldr	r3, [sp, #20]
                    ret = wc_HmacFinal(&hmac[i], digest[i]);
 8000580:	a908      	add	r1, sp, #32
        count += times;
 8000582:	442b      	add	r3, r5
                    ret = wc_HmacFinal(&hmac[i], digest[i]);
 8000584:	a818      	add	r0, sp, #96	; 0x60
        count += times;
 8000586:	9305      	str	r3, [sp, #20]
                    ret = wc_HmacFinal(&hmac[i], digest[i]);
 8000588:	f006 fcb2 	bl	8006ef0 <wc_HmacFinal>
        if (*ret >= 0) {
 800058c:	1e04      	subs	r4, r0, #0
 800058e:	db05      	blt.n	800059c <bench_hmac.constprop.0+0x98>
    } while (bench_stats_check(start));
 8000590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000594:	f7ff fdca 	bl	800012c <bench_stats_check>
 8000598:	2800      	cmp	r0, #0
 800059a:	d1ea      	bne.n	8000572 <bench_hmac.constprop.0+0x6e>
    bench_stats_sym_finish(label, useDeviceID, count, bench_size, start, ret);
 800059c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80005a0:	e9cd 2300 	strd	r2, r3, [sp]
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <bench_hmac.constprop.0+0xd4>)
 80005a6:	9402      	str	r4, [sp, #8]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	9905      	ldr	r1, [sp, #20]
 80005ac:	4630      	mov	r0, r6
 80005ae:	f7ff fe93 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 80005b2:	e7c5      	b.n	8000540 <bench_hmac.constprop.0+0x3c>
                    ret = wc_HmacUpdate(&hmac[i], bench_plain, bench_size);
 80005b4:	f8d8 2000 	ldr.w	r2, [r8]
 80005b8:	f8d9 1000 	ldr.w	r1, [r9]
 80005bc:	a818      	add	r0, sp, #96	; 0x60
 80005be:	f006 fc65 	bl	8006e8c <wc_HmacUpdate>
        if (*ret >= 0) {
 80005c2:	1e04      	subs	r4, r0, #0
 80005c4:	dbea      	blt.n	800059c <bench_hmac.constprop.0+0x98>
            (*times)++;
 80005c6:	3501      	adds	r5, #1
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
 80005c8:	e7d6      	b.n	8000578 <bench_hmac.constprop.0+0x74>
 80005ca:	bf00      	nop
 80005cc:	08014400 	.word	0x08014400
 80005d0:	08014425 	.word	0x08014425
 80005d4:	200000d8 	.word	0x200000d8
 80005d8:	200000d0 	.word	0x200000d0
 80005dc:	2000017c 	.word	0x2000017c

080005e0 <bench_aesgcm_internal.constprop.0>:
static void bench_aesgcm_internal(int useDeviceID,
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
    int    ret = 0, i, count = 0, times, pending = 0;
 80005e8:	2600      	movs	r6, #0
    WC_DECLARE_VAR(bench_additional, byte, AES_AUTH_ADD_SZ, HEAP_HINT);
 80005ea:	200d      	movs	r0, #13
static void bench_aesgcm_internal(int useDeviceID,
 80005ec:	460f      	mov	r7, r1
 80005ee:	4690      	mov	r8, r2
 80005f0:	4699      	mov	r9, r3
    int    ret = 0, i, count = 0, times, pending = 0;
 80005f2:	9609      	str	r6, [sp, #36]	; 0x24
    WC_DECLARE_VAR(bench_additional, byte, AES_AUTH_ADD_SZ, HEAP_HINT);
 80005f4:	f012 fdd4 	bl	80131a0 <malloc>
 80005f8:	4604      	mov	r4, r0
    WC_DECLARE_VAR(bench_tag, byte, AES_AUTH_TAG_SZ, HEAP_HINT);
 80005fa:	2010      	movs	r0, #16
 80005fc:	f012 fdd0 	bl	80131a0 <malloc>
 8000600:	4605      	mov	r5, r0
    if (bench_additional == NULL || bench_tag == NULL) {
 8000602:	b104      	cbz	r4, 8000606 <bench_aesgcm_internal.constprop.0+0x26>
 8000604:	b9a0      	cbnz	r0, 8000630 <bench_aesgcm_internal.constprop.0+0x50>
        printf("bench_aesgcm_internal malloc failed\n");
 8000606:	486b      	ldr	r0, [pc, #428]	; (80007b4 <bench_aesgcm_internal.constprop.0+0x1d4>)
 8000608:	f012 fee8 	bl	80133dc <iprintf>
        wc_AesFree(&dec[i]);
 800060c:	a85a      	add	r0, sp, #360	; 0x168
 800060e:	f003 ffaa 	bl	8004566 <wc_AesFree>
        wc_AesFree(&enc[i]);
 8000612:	a80c      	add	r0, sp, #48	; 0x30
 8000614:	f003 ffa7 	bl	8004566 <wc_AesFree>
    WC_FREE_VAR(bench_additional, HEAP_HINT);
 8000618:	b114      	cbz	r4, 8000620 <bench_aesgcm_internal.constprop.0+0x40>
 800061a:	4620      	mov	r0, r4
 800061c:	f012 fdc8 	bl	80131b0 <free>
    WC_FREE_VAR(bench_tag, HEAP_HINT);
 8000620:	b115      	cbz	r5, 8000628 <bench_aesgcm_internal.constprop.0+0x48>
 8000622:	4628      	mov	r0, r5
 8000624:	f012 fdc4 	bl	80131b0 <free>
}
 8000628:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
 800062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    XMEMSET(enc, 0, sizeof(enc));
 8000630:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000634:	4631      	mov	r1, r6
 8000636:	a80c      	add	r0, sp, #48	; 0x30
 8000638:	f012 fdea 	bl	8013210 <memset>
        XMEMSET(bench_additional, 0, AES_AUTH_ADD_SZ);
 800063c:	220d      	movs	r2, #13
 800063e:	4631      	mov	r1, r6
 8000640:	4620      	mov	r0, r4
 8000642:	f012 fde5 	bl	8013210 <memset>
        XMEMSET(bench_tag, 0, AES_AUTH_TAG_SZ);
 8000646:	2210      	movs	r2, #16
 8000648:	4631      	mov	r1, r6
 800064a:	4628      	mov	r0, r5
 800064c:	f012 fde0 	bl	8013210 <memset>
        if ((ret = wc_AesInit(&enc[i], HEAP_HINT,
 8000650:	f06f 0201 	mvn.w	r2, #1
 8000654:	4631      	mov	r1, r6
 8000656:	a80c      	add	r0, sp, #48	; 0x30
 8000658:	f003 ff7d 	bl	8004556 <wc_AesInit>
 800065c:	4683      	mov	fp, r0
 800065e:	b110      	cbz	r0, 8000666 <bench_aesgcm_internal.constprop.0+0x86>
            printf("AesInit failed, ret = %d\n", ret);
 8000660:	4855      	ldr	r0, [pc, #340]	; (80007b8 <bench_aesgcm_internal.constprop.0+0x1d8>)
 8000662:	4659      	mov	r1, fp
 8000664:	e008      	b.n	8000678 <bench_aesgcm_internal.constprop.0+0x98>
        ret = wc_AesGcmSetKey(&enc[i], key, keySz);
 8000666:	4642      	mov	r2, r8
 8000668:	4639      	mov	r1, r7
 800066a:	a80c      	add	r0, sp, #48	; 0x30
 800066c:	f003 fd64 	bl	8004138 <wc_AesGcmSetKey>
        if (ret != 0) {
 8000670:	4683      	mov	fp, r0
 8000672:	b158      	cbz	r0, 800068c <bench_aesgcm_internal.constprop.0+0xac>
            printf("AesGcmSetKey failed, ret = %d\n", ret);
 8000674:	4601      	mov	r1, r0
 8000676:	4851      	ldr	r0, [pc, #324]	; (80007bc <bench_aesgcm_internal.constprop.0+0x1dc>)
 8000678:	f012 feb0 	bl	80133dc <iprintf>
    if (ret < 0) {
 800067c:	f1bb 0f00 	cmp.w	fp, #0
 8000680:	dac4      	bge.n	800060c <bench_aesgcm_internal.constprop.0+0x2c>
        printf("bench_aesgcm failed: %d\n", ret);
 8000682:	4659      	mov	r1, fp
 8000684:	484e      	ldr	r0, [pc, #312]	; (80007c0 <bench_aesgcm_internal.constprop.0+0x1e0>)
 8000686:	f012 fea9 	bl	80133dc <iprintf>
 800068a:	e7bf      	b.n	800060c <bench_aesgcm_internal.constprop.0+0x2c>
    bench_stats_start(&count, &start);
 800068c:	a90a      	add	r1, sp, #40	; 0x28
 800068e:	a809      	add	r0, sp, #36	; 0x24
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000690:	f8df a130 	ldr.w	sl, [pc, #304]	; 80007c4 <bench_aesgcm_internal.constprop.0+0x1e4>
    bench_stats_start(&count, &start);
 8000694:	f7ff fd40 	bl	8000118 <bench_stats_start>
 8000698:	465b      	mov	r3, fp
                    ret = wc_AesGcmEncrypt(&enc[i], bench_cipher,
 800069a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80007c8 <bench_aesgcm_internal.constprop.0+0x1e8>
        for (times = 0; times < numBlocks || pending > 0; ) {
 800069e:	2600      	movs	r6, #0
 80006a0:	f8da 2000 	ldr.w	r2, [sl]
 80006a4:	42b2      	cmp	r2, r6
 80006a6:	dc6e      	bgt.n	8000786 <bench_aesgcm_internal.constprop.0+0x1a6>
        count += times;
 80006a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80006aa:	9307      	str	r3, [sp, #28]
 80006ac:	4432      	add	r2, r6
    } while (bench_stats_check(start));
 80006ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
        count += times;
 80006b2:	9209      	str	r2, [sp, #36]	; 0x24
    } while (bench_stats_check(start));
 80006b4:	f7ff fd3a 	bl	800012c <bench_stats_check>
 80006b8:	9b07      	ldr	r3, [sp, #28]
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d1ed      	bne.n	800069a <bench_aesgcm_internal.constprop.0+0xba>
    bench_stats_sym_finish(encLabel, useDeviceID, count, bench_size,
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80006c4:	e9cd 2300 	strd	r2, r3, [sp]
 80006c8:	f8df a100 	ldr.w	sl, [pc, #256]	; 80007cc <bench_aesgcm_internal.constprop.0+0x1ec>
 80006cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80006ce:	f8da 2000 	ldr.w	r2, [sl]
 80006d2:	f8dd 0400 	ldr.w	r0, [sp, #1024]	; 0x400
 80006d6:	f7ff fdff 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
    XMEMSET(dec, 0, sizeof(dec));
 80006da:	f44f 721c 	mov.w	r2, #624	; 0x270
 80006de:	2100      	movs	r1, #0
 80006e0:	a85a      	add	r0, sp, #360	; 0x168
 80006e2:	f012 fd95 	bl	8013210 <memset>
        if ((ret = wc_AesInit(&dec[i], HEAP_HINT,
 80006e6:	f06f 0201 	mvn.w	r2, #1
 80006ea:	2100      	movs	r1, #0
 80006ec:	a85a      	add	r0, sp, #360	; 0x168
 80006ee:	f003 ff32 	bl	8004556 <wc_AesInit>
 80006f2:	4683      	mov	fp, r0
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d1b3      	bne.n	8000660 <bench_aesgcm_internal.constprop.0+0x80>
        ret = wc_AesGcmSetKey(&dec[i], key, keySz);
 80006f8:	4642      	mov	r2, r8
 80006fa:	4639      	mov	r1, r7
 80006fc:	a85a      	add	r0, sp, #360	; 0x168
 80006fe:	f003 fd1b 	bl	8004138 <wc_AesGcmSetKey>
        if (ret != 0) {
 8000702:	4606      	mov	r6, r0
 8000704:	b128      	cbz	r0, 8000712 <bench_aesgcm_internal.constprop.0+0x132>
            printf("AesGcmSetKey failed, ret = %d\n", ret);
 8000706:	4601      	mov	r1, r0
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <bench_aesgcm_internal.constprop.0+0x1dc>)
 800070a:	f012 fe67 	bl	80133dc <iprintf>
            goto exit;
 800070e:	46b3      	mov	fp, r6
 8000710:	e7b4      	b.n	800067c <bench_aesgcm_internal.constprop.0+0x9c>
    bench_stats_start(&count, &start);
 8000712:	a90a      	add	r1, sp, #40	; 0x28
 8000714:	a809      	add	r0, sp, #36	; 0x24
 8000716:	f7ff fcff 	bl	8000118 <bench_stats_start>
        for (times = 0; times < numBlocks || pending > 0; ) {
 800071a:	4f2a      	ldr	r7, [pc, #168]	; (80007c4 <bench_aesgcm_internal.constprop.0+0x1e4>)
                    ret = wc_AesGcmDecrypt(&dec[i], bench_plain,
 800071c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80007d0 <bench_aesgcm_internal.constprop.0+0x1f0>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000720:	2600      	movs	r6, #0
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	42b2      	cmp	r2, r6
 8000726:	dc16      	bgt.n	8000756 <bench_aesgcm_internal.constprop.0+0x176>
        count += times;
 8000728:	9a09      	ldr	r2, [sp, #36]	; 0x24
    } while (bench_stats_check(start));
 800072a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
        count += times;
 800072e:	4432      	add	r2, r6
 8000730:	9209      	str	r2, [sp, #36]	; 0x24
    } while (bench_stats_check(start));
 8000732:	f7ff fcfb 	bl	800012c <bench_stats_check>
 8000736:	2800      	cmp	r0, #0
 8000738:	d1f2      	bne.n	8000720 <bench_aesgcm_internal.constprop.0+0x140>
    bench_stats_sym_finish(decLabel, useDeviceID, count, bench_size,
 800073a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800073e:	e9cd 0100 	strd	r0, r1, [sp]
 8000742:	f8cd b008 	str.w	fp, [sp, #8]
 8000746:	f8da 2000 	ldr.w	r2, [sl]
 800074a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800074c:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
 8000750:	f7ff fdc2 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 8000754:	e792      	b.n	800067c <bench_aesgcm_internal.constprop.0+0x9c>
                    ret = wc_AesGcmDecrypt(&dec[i], bench_plain,
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <bench_aesgcm_internal.constprop.0+0x1f4>)
 8000758:	491b      	ldr	r1, [pc, #108]	; (80007c8 <bench_aesgcm_internal.constprop.0+0x1e8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000760:	2310      	movs	r3, #16
 8000762:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8000766:	230c      	movs	r3, #12
 8000768:	e9cd 9300 	strd	r9, r3, [sp]
 800076c:	a85a      	add	r0, sp, #360	; 0x168
 800076e:	f8da 3000 	ldr.w	r3, [sl]
 8000772:	f8d8 2000 	ldr.w	r2, [r8]
 8000776:	6809      	ldr	r1, [r1, #0]
 8000778:	f003 fe36 	bl	80043e8 <wc_AesGcmDecrypt>
        if (*ret >= 0) {
 800077c:	f1b0 0b00 	subs.w	fp, r0, #0
 8000780:	dbdb      	blt.n	800073a <bench_aesgcm_internal.constprop.0+0x15a>
            (*times)++;
 8000782:	3601      	adds	r6, #1
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
 8000784:	e7cd      	b.n	8000722 <bench_aesgcm_internal.constprop.0+0x142>
                    ret = wc_AesGcmEncrypt(&enc[i], bench_cipher,
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <bench_aesgcm_internal.constprop.0+0x1f4>)
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <bench_aesgcm_internal.constprop.0+0x1f0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000790:	2310      	movs	r3, #16
 8000792:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8000796:	230c      	movs	r3, #12
 8000798:	e9cd 9300 	strd	r9, r3, [sp]
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <bench_aesgcm_internal.constprop.0+0x1ec>)
 800079e:	f8db 2000 	ldr.w	r2, [fp]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6809      	ldr	r1, [r1, #0]
 80007a6:	a80c      	add	r0, sp, #48	; 0x30
 80007a8:	f003 fd96 	bl	80042d8 <wc_AesGcmEncrypt>
        if (*ret >= 0) {
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	db86      	blt.n	80006be <bench_aesgcm_internal.constprop.0+0xde>
            (*times)++;
 80007b0:	3601      	adds	r6, #1
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
 80007b2:	e775      	b.n	80006a0 <bench_aesgcm_internal.constprop.0+0xc0>
 80007b4:	0801444c 	.word	0x0801444c
 80007b8:	08014471 	.word	0x08014471
 80007bc:	0801448b 	.word	0x0801448b
 80007c0:	080144aa 	.word	0x080144aa
 80007c4:	200000d8 	.word	0x200000d8
 80007c8:	2000017c 	.word	0x2000017c
 80007cc:	200000d0 	.word	0x200000d0
 80007d0:	20000160 	.word	0x20000160
 80007d4:	20000000 	.word	0x20000000

080007d8 <bench_aesgcm>:
{
 80007d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                          AES_GCM_STRING(128, enc), AES_GCM_STRING(128, dec));
 80007da:	4d25      	ldr	r5, [pc, #148]	; (8000870 <bench_aesgcm+0x98>)
    bench_aesgcm_internal(useDeviceID, bench_key, 16, bench_iv, 12,
 80007dc:	4f25      	ldr	r7, [pc, #148]	; (8000874 <bench_aesgcm+0x9c>)
 80007de:	4e26      	ldr	r6, [pc, #152]	; (8000878 <bench_aesgcm+0xa0>)
                          AES_GCM_STRING(128, enc), AES_GCM_STRING(128, dec));
 80007e0:	682a      	ldr	r2, [r5, #0]
    bench_aesgcm_internal(useDeviceID, bench_key, 16, bench_iv, 12,
 80007e2:	6839      	ldr	r1, [r7, #0]
 80007e4:	6833      	ldr	r3, [r6, #0]
{
 80007e6:	4604      	mov	r4, r0
    bench_aesgcm_internal(useDeviceID, bench_key, 16, bench_iv, 12,
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	d038      	beq.n	800085e <bench_aesgcm+0x86>
                          AES_GCM_STRING(128, enc), AES_GCM_STRING(128, dec));
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <bench_aesgcm+0xa4>)
 80007ee:	f8df c090 	ldr.w	ip, [pc, #144]	; 8000880 <bench_aesgcm+0xa8>
 80007f2:	2a0d      	cmp	r2, #13
 80007f4:	4a23      	ldr	r2, [pc, #140]	; (8000884 <bench_aesgcm+0xac>)
 80007f6:	bf18      	it	ne
 80007f8:	4602      	movne	r2, r0
 80007fa:	4823      	ldr	r0, [pc, #140]	; (8000888 <bench_aesgcm+0xb0>)
 80007fc:	bf18      	it	ne
 80007fe:	4660      	movne	r0, ip
    bench_aesgcm_internal(useDeviceID, bench_key, 16, bench_iv, 12,
 8000800:	e9cd 2000 	strd	r2, r0, [sp]
 8000804:	2210      	movs	r2, #16
 8000806:	4620      	mov	r0, r4
 8000808:	f7ff feea 	bl	80005e0 <bench_aesgcm_internal.constprop.0>
                          AES_GCM_STRING(192, enc), AES_GCM_STRING(192, dec));
 800080c:	682a      	ldr	r2, [r5, #0]
    bench_aesgcm_internal(useDeviceID, bench_key, 24, bench_iv, 12,
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	6833      	ldr	r3, [r6, #0]
 8000812:	b33a      	cbz	r2, 8000864 <bench_aesgcm+0x8c>
                          AES_GCM_STRING(192, enc), AES_GCM_STRING(192, dec));
 8000814:	481d      	ldr	r0, [pc, #116]	; (800088c <bench_aesgcm+0xb4>)
 8000816:	f8df c078 	ldr.w	ip, [pc, #120]	; 8000890 <bench_aesgcm+0xb8>
 800081a:	2a0d      	cmp	r2, #13
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <bench_aesgcm+0xbc>)
 800081e:	bf08      	it	eq
 8000820:	4602      	moveq	r2, r0
 8000822:	481d      	ldr	r0, [pc, #116]	; (8000898 <bench_aesgcm+0xc0>)
 8000824:	bf08      	it	eq
 8000826:	4660      	moveq	r0, ip
    bench_aesgcm_internal(useDeviceID, bench_key, 24, bench_iv, 12,
 8000828:	e9cd 2000 	strd	r2, r0, [sp]
 800082c:	2218      	movs	r2, #24
 800082e:	4620      	mov	r0, r4
 8000830:	f7ff fed6 	bl	80005e0 <bench_aesgcm_internal.constprop.0>
                          AES_GCM_STRING(256, enc), AES_GCM_STRING(256, dec));
 8000834:	682a      	ldr	r2, [r5, #0]
    bench_aesgcm_internal(useDeviceID, bench_key, 32, bench_iv, 12,
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	6833      	ldr	r3, [r6, #0]
 800083a:	b1b2      	cbz	r2, 800086a <bench_aesgcm+0x92>
                          AES_GCM_STRING(256, enc), AES_GCM_STRING(256, dec));
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <bench_aesgcm+0xc4>)
 800083e:	4d18      	ldr	r5, [pc, #96]	; (80008a0 <bench_aesgcm+0xc8>)
 8000840:	2a0d      	cmp	r2, #13
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <bench_aesgcm+0xcc>)
 8000844:	bf08      	it	eq
 8000846:	4602      	moveq	r2, r0
 8000848:	4817      	ldr	r0, [pc, #92]	; (80008a8 <bench_aesgcm+0xd0>)
 800084a:	bf08      	it	eq
 800084c:	4628      	moveq	r0, r5
    bench_aesgcm_internal(useDeviceID, bench_key, 32, bench_iv, 12,
 800084e:	e9cd 2000 	strd	r2, r0, [sp]
 8000852:	2220      	movs	r2, #32
 8000854:	4620      	mov	r0, r4
 8000856:	f7ff fec3 	bl	80005e0 <bench_aesgcm_internal.constprop.0>
}
 800085a:	b003      	add	sp, #12
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bench_aesgcm_internal(useDeviceID, bench_key, 16, bench_iv, 12,
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <bench_aesgcm+0xd4>)
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <bench_aesgcm+0xd8>)
 8000862:	e7cd      	b.n	8000800 <bench_aesgcm+0x28>
    bench_aesgcm_internal(useDeviceID, bench_key, 24, bench_iv, 12,
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <bench_aesgcm+0xdc>)
 8000866:	4814      	ldr	r0, [pc, #80]	; (80008b8 <bench_aesgcm+0xe0>)
 8000868:	e7de      	b.n	8000828 <bench_aesgcm+0x50>
    bench_aesgcm_internal(useDeviceID, bench_key, 32, bench_iv, 12,
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <bench_aesgcm+0xe4>)
 800086c:	4814      	ldr	r0, [pc, #80]	; (80008c0 <bench_aesgcm+0xe8>)
 800086e:	e7ee      	b.n	800084e <bench_aesgcm+0x76>
 8000870:	20000000 	.word	0x20000000
 8000874:	20000170 	.word	0x20000170
 8000878:	2000016c 	.word	0x2000016c
 800087c:	08014511 	.word	0x08014511
 8000880:	08014528 	.word	0x08014528
 8000884:	080144f1 	.word	0x080144f1
 8000888:	08014501 	.word	0x08014501
 800088c:	0801459b 	.word	0x0801459b
 8000890:	080145ab 	.word	0x080145ab
 8000894:	0801456d 	.word	0x0801456d
 8000898:	08014584 	.word	0x08014584
 800089c:	08014617 	.word	0x08014617
 80008a0:	08014627 	.word	0x08014627
 80008a4:	080145e9 	.word	0x080145e9
 80008a8:	08014600 	.word	0x08014600
 80008ac:	080144c3 	.word	0x080144c3
 80008b0:	080144da 	.word	0x080144da
 80008b4:	0801453f 	.word	0x0801453f
 80008b8:	08014556 	.word	0x08014556
 80008bc:	080145bb 	.word	0x080145bb
 80008c0:	080145d2 	.word	0x080145d2

080008c4 <bench_aescbc_internal>:
{
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int    ret = 0, i, count = 0, times, pending = 0;
 80008c8:	2400      	movs	r4, #0
{
 80008ca:	b0d6      	sub	sp, #344	; 0x158
 80008cc:	460d      	mov	r5, r1
 80008ce:	4690      	mov	r8, r2
    XMEMSET(enc, 0, sizeof(enc));
 80008d0:	4621      	mov	r1, r4
 80008d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80008d6:	a808      	add	r0, sp, #32
{
 80008d8:	4699      	mov	r9, r3
    int    ret = 0, i, count = 0, times, pending = 0;
 80008da:	9405      	str	r4, [sp, #20]
    XMEMSET(enc, 0, sizeof(enc));
 80008dc:	f012 fc98 	bl	8013210 <memset>
        if ((ret = wc_AesInit(&enc[i], HEAP_HINT,
 80008e0:	4621      	mov	r1, r4
 80008e2:	f06f 0201 	mvn.w	r2, #1
 80008e6:	a808      	add	r0, sp, #32
 80008e8:	f003 fe35 	bl	8004556 <wc_AesInit>
 80008ec:	4601      	mov	r1, r0
 80008ee:	b140      	cbz	r0, 8000902 <bench_aescbc_internal+0x3e>
            printf("AesInit failed, ret = %d\n", ret);
 80008f0:	483c      	ldr	r0, [pc, #240]	; (80009e4 <bench_aescbc_internal+0x120>)
            printf("AesSetKey failed, ret = %d\n", ret);
 80008f2:	f012 fd73 	bl	80133dc <iprintf>
        wc_AesFree(&enc[i]);
 80008f6:	a808      	add	r0, sp, #32
 80008f8:	f003 fe35 	bl	8004566 <wc_AesFree>
}
 80008fc:	b056      	add	sp, #344	; 0x158
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = wc_AesSetKey(&enc[i], key, keySz, iv, AES_ENCRYPTION);
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	464b      	mov	r3, r9
 8000906:	4642      	mov	r2, r8
 8000908:	4629      	mov	r1, r5
 800090a:	a808      	add	r0, sp, #32
 800090c:	f002 fa88 	bl	8002e20 <wc_AesSetKey>
        if (ret != 0) {
 8000910:	4604      	mov	r4, r0
 8000912:	b110      	cbz	r0, 800091a <bench_aescbc_internal+0x56>
            printf("AesSetKey failed, ret = %d\n", ret);
 8000914:	4834      	ldr	r0, [pc, #208]	; (80009e8 <bench_aescbc_internal+0x124>)
 8000916:	4621      	mov	r1, r4
 8000918:	e7eb      	b.n	80008f2 <bench_aescbc_internal+0x2e>
    bench_stats_start(&count, &start);
 800091a:	a906      	add	r1, sp, #24
 800091c:	a805      	add	r0, sp, #20
 800091e:	f7ff fbfb 	bl	8000118 <bench_stats_start>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000922:	4f32      	ldr	r7, [pc, #200]	; (80009ec <bench_aescbc_internal+0x128>)
                    ret = wc_AesCbcEncrypt(&enc[i], bench_plain, bench_cipher,
 8000924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80009f0 <bench_aescbc_internal+0x12c>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000928:	2600      	movs	r6, #0
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	42b3      	cmp	r3, r6
 800092e:	dc4c      	bgt.n	80009ca <bench_aescbc_internal+0x106>
        count += times;
 8000930:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += times;
 8000936:	4433      	add	r3, r6
 8000938:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 800093a:	f7ff fbf7 	bl	800012c <bench_stats_check>
 800093e:	2800      	cmp	r0, #0
 8000940:	d1f2      	bne.n	8000928 <bench_aescbc_internal+0x64>
    bench_stats_sym_finish(encLabel, useDeviceID, count,
 8000942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000946:	e9cd 2300 	strd	r2, r3, [sp]
 800094a:	4e29      	ldr	r6, [pc, #164]	; (80009f0 <bench_aescbc_internal+0x12c>)
 800094c:	9402      	str	r4, [sp, #8]
 800094e:	6832      	ldr	r2, [r6, #0]
 8000950:	9905      	ldr	r1, [sp, #20]
 8000952:	985e      	ldr	r0, [sp, #376]	; 0x178
 8000954:	f7ff fcc0 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
    if (ret < 0) {
 8000958:	2c00      	cmp	r4, #0
 800095a:	dbcc      	blt.n	80008f6 <bench_aescbc_internal+0x32>
        ret = wc_AesSetKey(&enc[i], key, keySz, iv, AES_DECRYPTION);
 800095c:	2301      	movs	r3, #1
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	4642      	mov	r2, r8
 8000962:	464b      	mov	r3, r9
 8000964:	4629      	mov	r1, r5
 8000966:	a808      	add	r0, sp, #32
 8000968:	f002 fa5a 	bl	8002e20 <wc_AesSetKey>
        if (ret != 0) {
 800096c:	4604      	mov	r4, r0
 800096e:	2800      	cmp	r0, #0
 8000970:	d1d0      	bne.n	8000914 <bench_aescbc_internal+0x50>
    bench_stats_start(&count, &start);
 8000972:	a906      	add	r1, sp, #24
 8000974:	a805      	add	r0, sp, #20
 8000976:	f7ff fbcf 	bl	8000118 <bench_stats_start>
                    ret = wc_AesCbcDecrypt(&enc[i], bench_cipher, bench_plain,
 800097a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80009f4 <bench_aescbc_internal+0x130>
 800097e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80009f8 <bench_aescbc_internal+0x134>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000982:	2500      	movs	r5, #0
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	42ab      	cmp	r3, r5
 8000988:	dc13      	bgt.n	80009b2 <bench_aescbc_internal+0xee>
        count += times;
 800098a:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 800098c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += times;
 8000990:	442b      	add	r3, r5
 8000992:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000994:	f7ff fbca 	bl	800012c <bench_stats_check>
 8000998:	2800      	cmp	r0, #0
 800099a:	d1f2      	bne.n	8000982 <bench_aescbc_internal+0xbe>
    bench_stats_sym_finish(decLabel, useDeviceID, count, bench_size,
 800099c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80009a0:	e9cd 2300 	strd	r2, r3, [sp]
 80009a4:	9402      	str	r4, [sp, #8]
 80009a6:	6832      	ldr	r2, [r6, #0]
 80009a8:	9905      	ldr	r1, [sp, #20]
 80009aa:	985f      	ldr	r0, [sp, #380]	; 0x17c
 80009ac:	f7ff fc94 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 80009b0:	e7a1      	b.n	80008f6 <bench_aescbc_internal+0x32>
                    ret = wc_AesCbcDecrypt(&enc[i], bench_cipher, bench_plain,
 80009b2:	6833      	ldr	r3, [r6, #0]
 80009b4:	f8d8 2000 	ldr.w	r2, [r8]
 80009b8:	f8d9 1000 	ldr.w	r1, [r9]
 80009bc:	a808      	add	r0, sp, #32
 80009be:	f002 fc89 	bl	80032d4 <wc_AesCbcDecrypt>
        if (*ret >= 0) {
 80009c2:	1e04      	subs	r4, r0, #0
 80009c4:	dbea      	blt.n	800099c <bench_aescbc_internal+0xd8>
            (*times)++;
 80009c6:	3501      	adds	r5, #1
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
 80009c8:	e7dc      	b.n	8000984 <bench_aescbc_internal+0xc0>
                    ret = wc_AesCbcEncrypt(&enc[i], bench_plain, bench_cipher,
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <bench_aescbc_internal+0x134>)
 80009cc:	4909      	ldr	r1, [pc, #36]	; (80009f4 <bench_aescbc_internal+0x130>)
 80009ce:	f8da 3000 	ldr.w	r3, [sl]
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	6809      	ldr	r1, [r1, #0]
 80009d6:	a808      	add	r0, sp, #32
 80009d8:	f002 fc52 	bl	8003280 <wc_AesCbcEncrypt>
        if (*ret >= 0) {
 80009dc:	1e04      	subs	r4, r0, #0
 80009de:	dbb0      	blt.n	8000942 <bench_aescbc_internal+0x7e>
            (*times)++;
 80009e0:	3601      	adds	r6, #1
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
 80009e2:	e7a2      	b.n	800092a <bench_aescbc_internal+0x66>
 80009e4:	08014471 	.word	0x08014471
 80009e8:	08014637 	.word	0x08014637
 80009ec:	200000d8 	.word	0x200000d8
 80009f0:	200000d0 	.word	0x200000d0
 80009f4:	2000017c 	.word	0x2000017c
 80009f8:	20000160 	.word	0x20000160

080009fc <benchmark_init>:
{
 80009fc:	b513      	push	{r0, r1, r4, lr}
    if (gBenchStaticInit == 0 || force) {
 80009fe:	4923      	ldr	r1, [pc, #140]	; (8000a8c <benchmark_init+0x90>)
 8000a00:	680b      	ldr	r3, [r1, #0]
 8000a02:	bb13      	cbnz	r3, 8000a4a <benchmark_init+0x4e>
        gBenchStaticInit = 1;
 8000a04:	2201      	movs	r2, #1
 8000a06:	600a      	str	r2, [r1, #0]
        numBlocks  = NUM_BLOCKS;
 8000a08:	4921      	ldr	r1, [pc, #132]	; (8000a90 <benchmark_init+0x94>)
 8000a0a:	2019      	movs	r0, #25
 8000a0c:	6008      	str	r0, [r1, #0]
        bench_size = BENCH_SIZE;
 8000a0e:	4921      	ldr	r1, [pc, #132]	; (8000a94 <benchmark_init+0x98>)
 8000a10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a14:	6008      	str	r0, [r1, #0]
        aesAuthAddSz    = AES_AUTH_ADD_SZ;
 8000a16:	4920      	ldr	r1, [pc, #128]	; (8000a98 <benchmark_init+0x9c>)
 8000a18:	200d      	movs	r0, #13
 8000a1a:	6008      	str	r0, [r1, #0]
        aes_aad_options = AES_AAD_OPTIONS_DEFAULT;
 8000a1c:	491f      	ldr	r1, [pc, #124]	; (8000a9c <benchmark_init+0xa0>)
 8000a1e:	2003      	movs	r0, #3
 8000a20:	6008      	str	r0, [r1, #0]
        aes_aad_size    = 0;
 8000a22:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <benchmark_init+0xa4>)
 8000a24:	600b      	str	r3, [r1, #0]
        base2 = 1;
 8000a26:	491f      	ldr	r1, [pc, #124]	; (8000aa4 <benchmark_init+0xa8>)
 8000a28:	600a      	str	r2, [r1, #0]
        digest_stream = 1;
 8000a2a:	491f      	ldr	r1, [pc, #124]	; (8000aa8 <benchmark_init+0xac>)
 8000a2c:	600a      	str	r2, [r1, #0]
        bench_all = 1;
 8000a2e:	491f      	ldr	r1, [pc, #124]	; (8000aac <benchmark_init+0xb0>)
 8000a30:	600a      	str	r2, [r1, #0]
        bench_cipher_algs = 0;
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <benchmark_init+0xb4>)
 8000a34:	6013      	str	r3, [r2, #0]
        bench_digest_algs = 0;
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <benchmark_init+0xb8>)
 8000a38:	6013      	str	r3, [r2, #0]
        bench_mac_algs = 0;
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <benchmark_init+0xbc>)
 8000a3c:	6013      	str	r3, [r2, #0]
        bench_asym_algs = 0;
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <benchmark_init+0xc0>)
 8000a40:	6013      	str	r3, [r2, #0]
        bench_other_algs = 0;
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <benchmark_init+0xc4>)
 8000a44:	6013      	str	r3, [r2, #0]
        csv_format = 0;
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <benchmark_init+0xc8>)
 8000a48:	6013      	str	r3, [r2, #0]
    if ((ret = wolfCrypt_Init()) != 0) {
 8000a4a:	f011 fb91 	bl	8012170 <wolfCrypt_Init>
 8000a4e:	4604      	mov	r4, r0
 8000a50:	b140      	cbz	r0, 8000a64 <benchmark_init+0x68>
        printf("%swolfCrypt_Init failed %d\n", err_prefix, ret);
 8000a52:	4602      	mov	r2, r0
 8000a54:	491c      	ldr	r1, [pc, #112]	; (8000ac8 <benchmark_init+0xcc>)
 8000a56:	481d      	ldr	r0, [pc, #116]	; (8000acc <benchmark_init+0xd0>)
 8000a58:	f012 fcc0 	bl	80133dc <iprintf>
        return EXIT_FAILURE;
 8000a5c:	2401      	movs	r4, #1
}
 8000a5e:	4620      	mov	r0, r4
 8000a60:	b002      	add	sp, #8
 8000a62:	bd10      	pop	{r4, pc}
    printf("%swolfCrypt Benchmark (block bytes %d, min " FLT_FMT_PREC " sec each)\n",
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <benchmark_init+0xd4>)
 8000a66:	491b      	ldr	r1, [pc, #108]	; (8000ad4 <benchmark_init+0xd8>)
 8000a68:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <benchmark_init+0xdc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	e9cd 2300 	strd	r2, r3, [sp]
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <benchmark_init+0x98>)
 8000a72:	2301      	movs	r3, #1
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	f012 fcb1 	bl	80133dc <iprintf>
    if (csv_format == 1) {
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <benchmark_init+0xc8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1ed      	bne.n	8000a5e <benchmark_init+0x62>
        printf("This format allows you to easily copy "
 8000a82:	4816      	ldr	r0, [pc, #88]	; (8000adc <benchmark_init+0xe0>)
 8000a84:	f012 fcaa 	bl	80133dc <iprintf>
 8000a88:	e7e9      	b.n	8000a5e <benchmark_init+0x62>
 8000a8a:	bf00      	nop
 8000a8c:	20000184 	.word	0x20000184
 8000a90:	200000d8 	.word	0x200000d8
 8000a94:	200000d0 	.word	0x200000d0
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	20000154 	.word	0x20000154
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200000d4 	.word	0x200000d4
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000164 	.word	0x20000164
 8000ab4:	20000168 	.word	0x20000168
 8000ab8:	20000174 	.word	0x20000174
 8000abc:	2000015c 	.word	0x2000015c
 8000ac0:	20000178 	.word	0x20000178
 8000ac4:	20000180 	.word	0x20000180
 8000ac8:	08014d88 	.word	0x08014d88
 8000acc:	08014653 	.word	0x08014653
 8000ad0:	3ff00000 	.word	0x3ff00000
 8000ad4:	08014d89 	.word	0x08014d89
 8000ad8:	0801466f 	.word	0x0801466f
 8000adc:	080146aa 	.word	0x080146aa

08000ae0 <benchmark_free>:
{
 8000ae0:	b510      	push	{r4, lr}
    if ((ret = wolfCrypt_Cleanup()) != 0) {
 8000ae2:	f011 fb4f 	bl	8012184 <wolfCrypt_Cleanup>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	b120      	cbz	r0, 8000af4 <benchmark_free+0x14>
        printf("%serror %d with wolfCrypt_Cleanup\n", err_prefix, ret);
 8000aea:	4602      	mov	r2, r0
 8000aec:	4902      	ldr	r1, [pc, #8]	; (8000af8 <benchmark_free+0x18>)
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <benchmark_free+0x1c>)
 8000af0:	f012 fc74 	bl	80133dc <iprintf>
}
 8000af4:	4620      	mov	r0, r4
 8000af6:	bd10      	pop	{r4, pc}
 8000af8:	08014d88 	.word	0x08014d88
 8000afc:	080146ea 	.word	0x080146ea

08000b00 <bench_rng>:
{
 8000b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b04:	b08a      	sub	sp, #40	; 0x28
    ret = wc_InitRng_ex(&myrng, HEAP_HINT, devId);
 8000b06:	f06f 0201 	mvn.w	r2, #1
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	a808      	add	r0, sp, #32
 8000b0e:	f006 fb17 	bl	8007140 <wc_InitRng_ex>
    if (ret < 0) {
 8000b12:	1e04      	subs	r4, r0, #0
 8000b14:	da06      	bge.n	8000b24 <bench_rng+0x24>
        printf("InitRNG failed %d\n", ret);
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <bench_rng+0xa4>)
 8000b18:	4621      	mov	r1, r4
 8000b1a:	f012 fc5f 	bl	80133dc <iprintf>
}
 8000b1e:	b00a      	add	sp, #40	; 0x28
 8000b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bench_stats_start(&count, &start);
 8000b24:	a906      	add	r1, sp, #24
 8000b26:	a805      	add	r0, sp, #20
 8000b28:	f7ff faf6 	bl	8000118 <bench_stats_start>
        for (i = 0; i < numBlocks; i++) {
 8000b2c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8000ba8 <bench_rng+0xa8>
                ret = wc_RNG_GenerateBlock(&myrng, &bench_plain[pos],
 8000b30:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000bac <bench_rng+0xac>
        for (i = 0; i < numBlocks; i++) {
 8000b34:	2500      	movs	r5, #0
 8000b36:	f8d8 3000 	ldr.w	r3, [r8]
 8000b3a:	42ab      	cmp	r3, r5
 8000b3c:	dc17      	bgt.n	8000b6e <bench_rng+0x6e>
        count += i;
 8000b3e:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += i;
 8000b44:	442b      	add	r3, r5
 8000b46:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000b48:	f7ff faf0 	bl	800012c <bench_stats_check>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f1      	bne.n	8000b34 <bench_rng+0x34>
    bench_stats_sym_finish("RNG", 0, count, bench_size, start, ret);
 8000b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000b54:	e9cd 2300 	strd	r2, r3, [sp]
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <bench_rng+0xb0>)
 8000b5a:	9402      	str	r4, [sp, #8]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	9905      	ldr	r1, [sp, #20]
 8000b60:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <bench_rng+0xb4>)
 8000b62:	f7ff fbb9 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
    wc_FreeRng(&myrng);
 8000b66:	a808      	add	r0, sp, #32
 8000b68:	f006 fb06 	bl	8007178 <wc_FreeRng>
 8000b6c:	e7d7      	b.n	8000b1e <bench_rng+0x1e>
            remain = (int)bench_size;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <bench_rng+0xb0>)
 8000b70:	681e      	ldr	r6, [r3, #0]
            pos = 0;
 8000b72:	2700      	movs	r7, #0
            while (remain > 0) {
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	dc01      	bgt.n	8000b7c <bench_rng+0x7c>
        for (i = 0; i < numBlocks; i++) {
 8000b78:	3501      	adds	r5, #1
 8000b7a:	e7dc      	b.n	8000b36 <bench_rng+0x36>
                if (len > RNG_MAX_BLOCK_LEN)
 8000b7c:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
                ret = wc_RNG_GenerateBlock(&myrng, &bench_plain[pos],
 8000b80:	f8d9 1000 	ldr.w	r1, [r9]
 8000b84:	46b2      	mov	sl, r6
 8000b86:	bfa8      	it	ge
 8000b88:	f44f 3a80 	movge.w	sl, #65536	; 0x10000
 8000b8c:	4652      	mov	r2, sl
 8000b8e:	4439      	add	r1, r7
 8000b90:	a808      	add	r0, sp, #32
 8000b92:	f006 fadc 	bl	800714e <wc_RNG_GenerateBlock>
                if (ret < 0)
 8000b96:	1e04      	subs	r4, r0, #0
 8000b98:	dbda      	blt.n	8000b50 <bench_rng+0x50>
                remain -= len;
 8000b9a:	eba6 060a 	sub.w	r6, r6, sl
                pos += len;
 8000b9e:	4457      	add	r7, sl
 8000ba0:	e7e8      	b.n	8000b74 <bench_rng+0x74>
 8000ba2:	bf00      	nop
 8000ba4:	0801470d 	.word	0x0801470d
 8000ba8:	200000d8 	.word	0x200000d8
 8000bac:	2000017c 	.word	0x2000017c
 8000bb0:	200000d0 	.word	0x200000d0
 8000bb4:	08014720 	.word	0x08014720

08000bb8 <bench_aescbc>:
{
 8000bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bench_aescbc_internal(useDeviceID, bench_key, 16, bench_iv,
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <bench_aescbc+0x48>)
 8000bbc:	4e11      	ldr	r6, [pc, #68]	; (8000c04 <bench_aescbc+0x4c>)
 8000bbe:	4d12      	ldr	r5, [pc, #72]	; (8000c08 <bench_aescbc+0x50>)
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <bench_aescbc+0x54>)
 8000bc4:	6829      	ldr	r1, [r5, #0]
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2210      	movs	r2, #16
 8000bca:	6833      	ldr	r3, [r6, #0]
{
 8000bcc:	4604      	mov	r4, r0
    bench_aescbc_internal(useDeviceID, bench_key, 16, bench_iv,
 8000bce:	f7ff fe79 	bl	80008c4 <bench_aescbc_internal>
    bench_aescbc_internal(useDeviceID, bench_key, 24, bench_iv,
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <bench_aescbc+0x58>)
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <bench_aescbc+0x5c>)
 8000bd8:	6829      	ldr	r1, [r5, #0]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4620      	mov	r0, r4
 8000bde:	6833      	ldr	r3, [r6, #0]
 8000be0:	2218      	movs	r2, #24
 8000be2:	f7ff fe6f 	bl	80008c4 <bench_aescbc_internal>
    bench_aescbc_internal(useDeviceID, bench_key, 32, bench_iv,
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <bench_aescbc+0x60>)
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <bench_aescbc+0x64>)
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	6829      	ldr	r1, [r5, #0]
 8000bf0:	6833      	ldr	r3, [r6, #0]
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff fe65 	bl	80008c4 <bench_aescbc_internal>
}
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	bf00      	nop
 8000c00:	08014724 	.word	0x08014724
 8000c04:	2000016c 	.word	0x2000016c
 8000c08:	20000170 	.word	0x20000170
 8000c0c:	08014734 	.word	0x08014734
 8000c10:	08014744 	.word	0x08014744
 8000c14:	08014754 	.word	0x08014754
 8000c18:	08014764 	.word	0x08014764
 8000c1c:	08014774 	.word	0x08014774

08000c20 <bench_gmac>:
{
 8000c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    XMEMSET(bench_plain, 0, bench_size);
 8000c24:	4d27      	ldr	r5, [pc, #156]	; (8000cc4 <bench_gmac+0xa4>)
 8000c26:	4e28      	ldr	r6, [pc, #160]	; (8000cc8 <bench_gmac+0xa8>)
 8000c28:	682a      	ldr	r2, [r5, #0]
 8000c2a:	6830      	ldr	r0, [r6, #0]
        ret = wc_GmacUpdate(&gmac, bench_iv, 12, bench_plain, bench_size,
 8000c2c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8000ccc <bench_gmac+0xac>
{
 8000c30:	b0db      	sub	sp, #364	; 0x16c
    int ret, count = 0;
 8000c32:	2400      	movs	r4, #0
    XMEMSET(bench_plain, 0, bench_size);
 8000c34:	4621      	mov	r1, r4
    XMEMSET(tag, 0, sizeof(tag));
 8000c36:	af08      	add	r7, sp, #32
    int ret, count = 0;
 8000c38:	9405      	str	r4, [sp, #20]
    XMEMSET(bench_plain, 0, bench_size);
 8000c3a:	f012 fae9 	bl	8013210 <memset>
    XMEMSET(tag, 0, sizeof(tag));
 8000c3e:	2210      	movs	r2, #16
 8000c40:	4621      	mov	r1, r4
 8000c42:	4638      	mov	r0, r7
 8000c44:	f012 fae4 	bl	8013210 <memset>
    XMEMSET(&gmac, 0, sizeof(Gmac)); /* clear context */
 8000c48:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	a80c      	add	r0, sp, #48	; 0x30
 8000c50:	f012 fade 	bl	8013210 <memset>
    (void)wc_AesInit((Aes*)&gmac, HEAP_HINT,
 8000c54:	f06f 0201 	mvn.w	r2, #1
 8000c58:	4621      	mov	r1, r4
 8000c5a:	a80c      	add	r0, sp, #48	; 0x30
 8000c5c:	f003 fc7b 	bl	8004556 <wc_AesInit>
    wc_GmacSetKey(&gmac, bench_key, 16);
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <bench_gmac+0xb0>)
 8000c62:	2210      	movs	r2, #16
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	a80c      	add	r0, sp, #48	; 0x30
 8000c68:	f003 fc58 	bl	800451c <wc_GmacSetKey>
    bench_stats_start(&count, &start);
 8000c6c:	a906      	add	r1, sp, #24
 8000c6e:	a805      	add	r0, sp, #20
 8000c70:	f7ff fa52 	bl	8000118 <bench_stats_start>
        ret = wc_GmacUpdate(&gmac, bench_iv, 12, bench_plain, bench_size,
 8000c74:	f04f 0910 	mov.w	r9, #16
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	f8d8 1000 	ldr.w	r1, [r8]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8000c84:	6833      	ldr	r3, [r6, #0]
 8000c86:	220c      	movs	r2, #12
 8000c88:	a80c      	add	r0, sp, #48	; 0x30
 8000c8a:	f003 fc4e 	bl	800452a <wc_GmacUpdate>
        count++;
 8000c8e:	9b05      	ldr	r3, [sp, #20]
        ret = wc_GmacUpdate(&gmac, bench_iv, 12, bench_plain, bench_size,
 8000c90:	4604      	mov	r4, r0
        count++;
 8000c92:	3301      	adds	r3, #1
    } while (bench_stats_check(start));
 8000c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count++;
 8000c98:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000c9a:	f7ff fa47 	bl	800012c <bench_stats_check>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d1ea      	bne.n	8000c78 <bench_gmac+0x58>
    wc_AesFree((Aes*)&gmac);
 8000ca2:	a80c      	add	r0, sp, #48	; 0x30
 8000ca4:	f003 fc5f 	bl	8004566 <wc_AesFree>
    bench_stats_sym_finish(gmacStr, 0, count, bench_size, start, ret);
 8000ca8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000cac:	9905      	ldr	r1, [sp, #20]
 8000cae:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <bench_gmac+0xb4>)
 8000cb0:	9402      	str	r4, [sp, #8]
 8000cb2:	e9cd 2300 	strd	r2, r3, [sp]
 8000cb6:	682a      	ldr	r2, [r5, #0]
 8000cb8:	f7ff fb0e 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
}
 8000cbc:	b05b      	add	sp, #364	; 0x16c
 8000cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000d0 	.word	0x200000d0
 8000cc8:	2000017c 	.word	0x2000017c
 8000ccc:	2000016c 	.word	0x2000016c
 8000cd0:	20000170 	.word	0x20000170
 8000cd4:	08014784 	.word	0x08014784

08000cd8 <bench_des>:
{
 8000cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int    ret = 0, i, count = 0, times, pending = 0;
 8000cdc:	2400      	movs	r4, #0
{
 8000cde:	b0ee      	sub	sp, #440	; 0x1b8
    XMEMSET(enc, 0, sizeof(enc));
 8000ce0:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	a809      	add	r0, sp, #36	; 0x24
    int    ret = 0, i, count = 0, times, pending = 0;
 8000ce8:	9405      	str	r4, [sp, #20]
    XMEMSET(enc, 0, sizeof(enc));
 8000cea:	f012 fa91 	bl	8013210 <memset>
        if ((ret = wc_Des3Init(&enc[i], HEAP_HINT,
 8000cee:	f06f 0201 	mvn.w	r2, #1
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	a809      	add	r0, sp, #36	; 0x24
 8000cf6:	f003 fee0 	bl	8004aba <wc_Des3Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b148      	cbz	r0, 8000d12 <bench_des+0x3a>
            printf("Des3Init failed, ret = %d\n", ret);
 8000cfe:	4601      	mov	r1, r0
 8000d00:	4820      	ldr	r0, [pc, #128]	; (8000d84 <bench_des+0xac>)
            printf("Des3_SetKey failed, ret = %d\n", ret);
 8000d02:	f012 fb6b 	bl	80133dc <iprintf>
        wc_Des3Free(&enc[i]);
 8000d06:	a809      	add	r0, sp, #36	; 0x24
 8000d08:	f003 fedf 	bl	8004aca <wc_Des3Free>
}
 8000d0c:	b06e      	add	sp, #440	; 0x1b8
 8000d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = wc_Des3_SetKey(&enc[i], bench_key, bench_iv, DES_ENCRYPTION);
 8000d12:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <bench_des+0xb0>)
 8000d14:	491d      	ldr	r1, [pc, #116]	; (8000d8c <bench_des+0xb4>)
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	6809      	ldr	r1, [r1, #0]
 8000d1a:	a809      	add	r0, sp, #36	; 0x24
 8000d1c:	f003 fe8c 	bl	8004a38 <wc_Des3_SetKey>
        if (ret != 0) {
 8000d20:	4604      	mov	r4, r0
 8000d22:	b110      	cbz	r0, 8000d2a <bench_des+0x52>
            printf("Des3_SetKey failed, ret = %d\n", ret);
 8000d24:	4601      	mov	r1, r0
 8000d26:	481a      	ldr	r0, [pc, #104]	; (8000d90 <bench_des+0xb8>)
 8000d28:	e7eb      	b.n	8000d02 <bench_des+0x2a>
    bench_stats_start(&count, &start);
 8000d2a:	a906      	add	r1, sp, #24
 8000d2c:	a805      	add	r0, sp, #20
 8000d2e:	f7ff f9f3 	bl	8000118 <bench_stats_start>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000d32:	4e18      	ldr	r6, [pc, #96]	; (8000d94 <bench_des+0xbc>)
                    ret = wc_Des3_CbcEncrypt(&enc[i],
 8000d34:	4f18      	ldr	r7, [pc, #96]	; (8000d98 <bench_des+0xc0>)
 8000d36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8000d9c <bench_des+0xc4>
        for (times = 0; times < numBlocks || pending > 0; ) {
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	dc14      	bgt.n	8000d6c <bench_des+0x94>
        count += times;
 8000d42:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000d44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += times;
 8000d48:	442b      	add	r3, r5
 8000d4a:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 8000d4c:	f7ff f9ee 	bl	800012c <bench_stats_check>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1f0      	bne.n	8000d36 <bench_des+0x5e>
    bench_stats_sym_finish("3DES", useDeviceID, count, bench_size, start, ret);
 8000d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000d58:	e9cd 2300 	strd	r2, r3, [sp]
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <bench_des+0xc0>)
 8000d5e:	9402      	str	r4, [sp, #8]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	9905      	ldr	r1, [sp, #20]
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <bench_des+0xc8>)
 8000d66:	f7ff fab7 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 8000d6a:	e7cc      	b.n	8000d06 <bench_des+0x2e>
                    ret = wc_Des3_CbcEncrypt(&enc[i],
 8000d6c:	490d      	ldr	r1, [pc, #52]	; (8000da4 <bench_des+0xcc>)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f8d8 2000 	ldr.w	r2, [r8]
 8000d74:	6809      	ldr	r1, [r1, #0]
 8000d76:	a809      	add	r0, sp, #36	; 0x24
 8000d78:	f003 fe28 	bl	80049cc <wc_Des3_CbcEncrypt>
        if (*ret >= 0) {
 8000d7c:	1e04      	subs	r4, r0, #0
 8000d7e:	dbe9      	blt.n	8000d54 <bench_des+0x7c>
            (*times)++;
 8000d80:	3501      	adds	r5, #1
            for (i = 0; i < BENCH_MAX_PENDING; i++) {
 8000d82:	e7db      	b.n	8000d3c <bench_des+0x64>
 8000d84:	0801478f 	.word	0x0801478f
 8000d88:	2000016c 	.word	0x2000016c
 8000d8c:	20000170 	.word	0x20000170
 8000d90:	080147aa 	.word	0x080147aa
 8000d94:	200000d8 	.word	0x200000d8
 8000d98:	200000d0 	.word	0x200000d0
 8000d9c:	2000017c 	.word	0x2000017c
 8000da0:	080147c8 	.word	0x080147c8
 8000da4:	20000160 	.word	0x20000160

08000da8 <bench_sha>:
{
 8000da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dac:	b0a3      	sub	sp, #140	; 0x8c
    int    ret = 0, i, count = 0, times, pending = 0;
 8000dae:	2400      	movs	r4, #0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8000db0:	2014      	movs	r0, #20
    int    ret = 0, i, count = 0, times, pending = 0;
 8000db2:	9405      	str	r4, [sp, #20]
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8000db4:	f012 f9f4 	bl	80131a0 <malloc>
    XMEMSET(hash, 0, sizeof(hash));
 8000db8:	2264      	movs	r2, #100	; 0x64
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8000dba:	4605      	mov	r5, r0
    XMEMSET(hash, 0, sizeof(hash));
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	a809      	add	r0, sp, #36	; 0x24
 8000dc0:	f012 fa26 	bl	8013210 <memset>
    if (digest_stream) {
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <bench_sha+0x11c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	bb23      	cbnz	r3, 8000e14 <bench_sha+0x6c>
        bench_stats_start(&count, &start);
 8000dca:	a906      	add	r1, sp, #24
 8000dcc:	a805      	add	r0, sp, #20
 8000dce:	f7ff f9a3 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks; times++) {
 8000dd2:	4e3d      	ldr	r6, [pc, #244]	; (8000ec8 <bench_sha+0x120>)
                    ret = wc_ShaUpdate(hash, bench_plain, bench_size);
 8000dd4:	4f3d      	ldr	r7, [pc, #244]	; (8000ecc <bench_sha+0x124>)
 8000dd6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8000ed0 <bench_sha+0x128>
            for (times = 0; times < numBlocks; times++) {
 8000dda:	f04f 0800 	mov.w	r8, #0
 8000dde:	6833      	ldr	r3, [r6, #0]
 8000de0:	4543      	cmp	r3, r8
 8000de2:	dc48      	bgt.n	8000e76 <bench_sha+0xce>
            count += times;
 8000de4:	9b05      	ldr	r3, [sp, #20]
        } while (bench_stats_check(start));
 8000de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
            count += times;
 8000dea:	4443      	add	r3, r8
 8000dec:	9305      	str	r3, [sp, #20]
        } while (bench_stats_check(start));
 8000dee:	f7ff f99d 	bl	800012c <bench_stats_check>
 8000df2:	4604      	mov	r4, r0
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1ee      	bne.n	8000dd6 <bench_sha+0x2e>
exit_sha:
 8000df8:	e031      	b.n	8000e5e <bench_sha+0xb6>
                printf("InitSha failed, ret = %d\n", ret);
 8000dfa:	4836      	ldr	r0, [pc, #216]	; (8000ed4 <bench_sha+0x12c>)
 8000dfc:	f012 faee 	bl	80133dc <iprintf>
        wc_ShaFree(&hash[i]);
 8000e00:	a809      	add	r0, sp, #36	; 0x24
 8000e02:	f007 f9b9 	bl	8008178 <wc_ShaFree>
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
 8000e06:	b115      	cbz	r5, 8000e0e <bench_sha+0x66>
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f012 f9d1 	bl	80131b0 <free>
}
 8000e0e:	b023      	add	sp, #140	; 0x8c
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = wc_InitSha_ex(&hash[i], HEAP_HINT,
 8000e14:	4621      	mov	r1, r4
 8000e16:	f06f 0201 	mvn.w	r2, #1
 8000e1a:	a809      	add	r0, sp, #36	; 0x24
 8000e1c:	f007 f8ac 	bl	8007f78 <wc_InitSha_ex>
            if (ret != 0) {
 8000e20:	4601      	mov	r1, r0
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d1e9      	bne.n	8000dfa <bench_sha+0x52>
        bench_stats_start(&count, &start);
 8000e26:	a906      	add	r1, sp, #24
 8000e28:	a805      	add	r0, sp, #20
 8000e2a:	f7ff f975 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks || pending > 0; ) {
 8000e2e:	4f26      	ldr	r7, [pc, #152]	; (8000ec8 <bench_sha+0x120>)
                        ret = wc_ShaUpdate(&hash[i], bench_plain,
 8000e30:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000ecc <bench_sha+0x124>
 8000e34:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8000ed0 <bench_sha+0x128>
            for (times = 0; times < numBlocks || pending > 0; ) {
 8000e38:	2600      	movs	r6, #0
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	42b3      	cmp	r3, r6
 8000e3e:	dc36      	bgt.n	8000eae <bench_sha+0x106>
            count += times;
 8000e40:	9b05      	ldr	r3, [sp, #20]
                        ret = wc_ShaFinal(&hash[i], digest[i]);
 8000e42:	4629      	mov	r1, r5
            count += times;
 8000e44:	4433      	add	r3, r6
                        ret = wc_ShaFinal(&hash[i], digest[i]);
 8000e46:	a809      	add	r0, sp, #36	; 0x24
            count += times;
 8000e48:	9305      	str	r3, [sp, #20]
                        ret = wc_ShaFinal(&hash[i], digest[i]);
 8000e4a:	f007 f91d 	bl	8008088 <wc_ShaFinal>
        if (*ret >= 0) {
 8000e4e:	1e04      	subs	r4, r0, #0
 8000e50:	db05      	blt.n	8000e5e <bench_sha+0xb6>
        } while (bench_stats_check(start));
 8000e52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000e56:	f7ff f969 	bl	800012c <bench_stats_check>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d1ea      	bne.n	8000e34 <bench_sha+0x8c>
    bench_stats_sym_finish("SHA", useDeviceID, count, bench_size, start, ret);
 8000e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000e62:	e9cd 2300 	strd	r2, r3, [sp]
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <bench_sha+0x124>)
 8000e68:	9402      	str	r4, [sp, #8]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	9905      	ldr	r1, [sp, #20]
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <bench_sha+0x130>)
 8000e70:	f7ff fa32 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 8000e74:	e7c4      	b.n	8000e00 <bench_sha+0x58>
                ret = wc_InitSha_ex(hash, HEAP_HINT,
 8000e76:	f06f 0201 	mvn.w	r2, #1
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	a809      	add	r0, sp, #36	; 0x24
 8000e7e:	f007 f87b 	bl	8007f78 <wc_InitSha_ex>
                if (ret == 0)
 8000e82:	4604      	mov	r4, r0
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d1ea      	bne.n	8000e5e <bench_sha+0xb6>
                    ret = wc_ShaUpdate(hash, bench_plain, bench_size);
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	f8d9 1000 	ldr.w	r1, [r9]
 8000e8e:	a809      	add	r0, sp, #36	; 0x24
 8000e90:	f007 f892 	bl	8007fb8 <wc_ShaUpdate>
                if (ret == 0)
 8000e94:	4604      	mov	r4, r0
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d1e1      	bne.n	8000e5e <bench_sha+0xb6>
                    ret = wc_ShaFinal(hash, digest[0]);
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	a809      	add	r0, sp, #36	; 0x24
 8000e9e:	f007 f8f3 	bl	8008088 <wc_ShaFinal>
                if (ret != 0)
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d1da      	bne.n	8000e5e <bench_sha+0xb6>
            for (times = 0; times < numBlocks; times++) {
 8000ea8:	f108 0801 	add.w	r8, r8, #1
 8000eac:	e797      	b.n	8000dde <bench_sha+0x36>
                        ret = wc_ShaUpdate(&hash[i], bench_plain,
 8000eae:	f8d8 2000 	ldr.w	r2, [r8]
 8000eb2:	f8d9 1000 	ldr.w	r1, [r9]
 8000eb6:	a809      	add	r0, sp, #36	; 0x24
 8000eb8:	f007 f87e 	bl	8007fb8 <wc_ShaUpdate>
        if (*ret >= 0) {
 8000ebc:	1e04      	subs	r4, r0, #0
 8000ebe:	dbce      	blt.n	8000e5e <bench_sha+0xb6>
            (*times)++;
 8000ec0:	3601      	adds	r6, #1
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
 8000ec2:	e7ba      	b.n	8000e3a <bench_sha+0x92>
 8000ec4:	200000d4 	.word	0x200000d4
 8000ec8:	200000d8 	.word	0x200000d8
 8000ecc:	200000d0 	.word	0x200000d0
 8000ed0:	2000017c 	.word	0x2000017c
 8000ed4:	080147cd 	.word	0x080147cd
 8000ed8:	080147e7 	.word	0x080147e7

08000edc <bench_sha256>:
{
 8000edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ee0:	b0a5      	sub	sp, #148	; 0x94
    int    ret = 0, i, count = 0, times, pending = 0;
 8000ee2:	2400      	movs	r4, #0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8000ee4:	2020      	movs	r0, #32
    int    ret = 0, i, count = 0, times, pending = 0;
 8000ee6:	9405      	str	r4, [sp, #20]
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8000ee8:	f012 f95a 	bl	80131a0 <malloc>
    XMEMSET(hash, 0, sizeof(hash));
 8000eec:	2270      	movs	r2, #112	; 0x70
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8000eee:	4605      	mov	r5, r0
    XMEMSET(hash, 0, sizeof(hash));
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	a808      	add	r0, sp, #32
 8000ef4:	f012 f98c 	bl	8013210 <memset>
    if (digest_stream) {
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <bench_sha256+0x11c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	bb23      	cbnz	r3, 8000f48 <bench_sha256+0x6c>
        bench_stats_start(&count, &start);
 8000efe:	a906      	add	r1, sp, #24
 8000f00:	a805      	add	r0, sp, #20
 8000f02:	f7ff f909 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks; times++) {
 8000f06:	4e3d      	ldr	r6, [pc, #244]	; (8000ffc <bench_sha256+0x120>)
                    ret = wc_Sha256Update(hash, bench_plain, bench_size);
 8000f08:	4f3d      	ldr	r7, [pc, #244]	; (8001000 <bench_sha256+0x124>)
 8000f0a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001004 <bench_sha256+0x128>
            for (times = 0; times < numBlocks; times++) {
 8000f0e:	f04f 0800 	mov.w	r8, #0
 8000f12:	6833      	ldr	r3, [r6, #0]
 8000f14:	4543      	cmp	r3, r8
 8000f16:	dc48      	bgt.n	8000faa <bench_sha256+0xce>
            count += times;
 8000f18:	9b05      	ldr	r3, [sp, #20]
        } while (bench_stats_check(start));
 8000f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
            count += times;
 8000f1e:	4443      	add	r3, r8
 8000f20:	9305      	str	r3, [sp, #20]
        } while (bench_stats_check(start));
 8000f22:	f7ff f903 	bl	800012c <bench_stats_check>
 8000f26:	4604      	mov	r4, r0
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d1ee      	bne.n	8000f0a <bench_sha256+0x2e>
exit_sha256:
 8000f2c:	e031      	b.n	8000f92 <bench_sha256+0xb6>
                printf("InitSha256_ex failed, ret = %d\n", ret);
 8000f2e:	4836      	ldr	r0, [pc, #216]	; (8001008 <bench_sha256+0x12c>)
 8000f30:	f012 fa54 	bl	80133dc <iprintf>
        wc_Sha256Free(&hash[i]);
 8000f34:	a808      	add	r0, sp, #32
 8000f36:	f007 fbe3 	bl	8008700 <wc_Sha256Free>
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
 8000f3a:	b115      	cbz	r5, 8000f42 <bench_sha256+0x66>
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f012 f937 	bl	80131b0 <free>
}
 8000f42:	b025      	add	sp, #148	; 0x94
 8000f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = wc_InitSha256_ex(&hash[i], HEAP_HINT,
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f06f 0201 	mvn.w	r2, #1
 8000f4e:	a808      	add	r0, sp, #32
 8000f50:	f007 fac0 	bl	80084d4 <wc_InitSha256_ex>
            if (ret != 0) {
 8000f54:	4601      	mov	r1, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d1e9      	bne.n	8000f2e <bench_sha256+0x52>
        bench_stats_start(&count, &start);
 8000f5a:	a906      	add	r1, sp, #24
 8000f5c:	a805      	add	r0, sp, #20
 8000f5e:	f7ff f8db 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks || pending > 0; ) {
 8000f62:	4f26      	ldr	r7, [pc, #152]	; (8000ffc <bench_sha256+0x120>)
                        ret = wc_Sha256Update(&hash[i], bench_plain,
 8000f64:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001000 <bench_sha256+0x124>
 8000f68:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001004 <bench_sha256+0x128>
            for (times = 0; times < numBlocks || pending > 0; ) {
 8000f6c:	2600      	movs	r6, #0
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	42b3      	cmp	r3, r6
 8000f72:	dc36      	bgt.n	8000fe2 <bench_sha256+0x106>
            count += times;
 8000f74:	9b05      	ldr	r3, [sp, #20]
                        ret = wc_Sha256Final(&hash[i], digest[i]);
 8000f76:	4629      	mov	r1, r5
            count += times;
 8000f78:	4433      	add	r3, r6
                        ret = wc_Sha256Final(&hash[i], digest[i]);
 8000f7a:	a808      	add	r0, sp, #32
            count += times;
 8000f7c:	9305      	str	r3, [sp, #20]
                        ret = wc_Sha256Final(&hash[i], digest[i]);
 8000f7e:	f007 fb35 	bl	80085ec <wc_Sha256Final>
        if (*ret >= 0) {
 8000f82:	1e04      	subs	r4, r0, #0
 8000f84:	db05      	blt.n	8000f92 <bench_sha256+0xb6>
        } while (bench_stats_check(start));
 8000f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000f8a:	f7ff f8cf 	bl	800012c <bench_stats_check>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d1ea      	bne.n	8000f68 <bench_sha256+0x8c>
    bench_stats_sym_finish("SHA-256", useDeviceID, count, bench_size,
 8000f92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000f96:	e9cd 2300 	strd	r2, r3, [sp]
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <bench_sha256+0x124>)
 8000f9c:	9402      	str	r4, [sp, #8]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	9905      	ldr	r1, [sp, #20]
 8000fa2:	481a      	ldr	r0, [pc, #104]	; (800100c <bench_sha256+0x130>)
 8000fa4:	f7ff f998 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 8000fa8:	e7c4      	b.n	8000f34 <bench_sha256+0x58>
                ret = wc_InitSha256_ex(hash, HEAP_HINT,
 8000faa:	f06f 0201 	mvn.w	r2, #1
 8000fae:	2100      	movs	r1, #0
 8000fb0:	a808      	add	r0, sp, #32
 8000fb2:	f007 fa8f 	bl	80084d4 <wc_InitSha256_ex>
                if (ret == 0)
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d1ea      	bne.n	8000f92 <bench_sha256+0xb6>
                    ret = wc_Sha256Update(hash, bench_plain, bench_size);
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	f8d9 1000 	ldr.w	r1, [r9]
 8000fc2:	a808      	add	r0, sp, #32
 8000fc4:	f007 faba 	bl	800853c <wc_Sha256Update>
                if (ret == 0)
 8000fc8:	4604      	mov	r4, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d1e1      	bne.n	8000f92 <bench_sha256+0xb6>
                    ret = wc_Sha256Final(hash, digest[0]);
 8000fce:	4629      	mov	r1, r5
 8000fd0:	a808      	add	r0, sp, #32
 8000fd2:	f007 fb0b 	bl	80085ec <wc_Sha256Final>
                if (ret != 0)
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d1da      	bne.n	8000f92 <bench_sha256+0xb6>
            for (times = 0; times < numBlocks; times++) {
 8000fdc:	f108 0801 	add.w	r8, r8, #1
 8000fe0:	e797      	b.n	8000f12 <bench_sha256+0x36>
                        ret = wc_Sha256Update(&hash[i], bench_plain,
 8000fe2:	f8d8 2000 	ldr.w	r2, [r8]
 8000fe6:	f8d9 1000 	ldr.w	r1, [r9]
 8000fea:	a808      	add	r0, sp, #32
 8000fec:	f007 faa6 	bl	800853c <wc_Sha256Update>
        if (*ret >= 0) {
 8000ff0:	1e04      	subs	r4, r0, #0
 8000ff2:	dbce      	blt.n	8000f92 <bench_sha256+0xb6>
            (*times)++;
 8000ff4:	3601      	adds	r6, #1
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
 8000ff6:	e7ba      	b.n	8000f6e <bench_sha256+0x92>
 8000ff8:	200000d4 	.word	0x200000d4
 8000ffc:	200000d8 	.word	0x200000d8
 8001000:	200000d0 	.word	0x200000d0
 8001004:	2000017c 	.word	0x2000017c
 8001008:	080147eb 	.word	0x080147eb
 800100c:	0801480b 	.word	0x0801480b

08001010 <bench_sha512>:
{
 8001010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001014:	b0c1      	sub	sp, #260	; 0x104
    int    ret = 0, i, count = 0, times, pending = 0;
 8001016:	2400      	movs	r4, #0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8001018:	2040      	movs	r0, #64	; 0x40
    int    ret = 0, i, count = 0, times, pending = 0;
 800101a:	9405      	str	r4, [sp, #20]
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 800101c:	f012 f8c0 	bl	80131a0 <malloc>
    XMEMSET(hash, 0, sizeof(hash));
 8001020:	22e0      	movs	r2, #224	; 0xe0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8001022:	4605      	mov	r5, r0
    XMEMSET(hash, 0, sizeof(hash));
 8001024:	4621      	mov	r1, r4
 8001026:	a808      	add	r0, sp, #32
 8001028:	f012 f8f2 	bl	8013210 <memset>
    if (digest_stream) {
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <bench_sha512+0x11c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	bb23      	cbnz	r3, 800107c <bench_sha512+0x6c>
        bench_stats_start(&count, &start);
 8001032:	a906      	add	r1, sp, #24
 8001034:	a805      	add	r0, sp, #20
 8001036:	f7ff f86f 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks; times++) {
 800103a:	4e3d      	ldr	r6, [pc, #244]	; (8001130 <bench_sha512+0x120>)
                    ret = wc_Sha512Update(hash, bench_plain, bench_size);
 800103c:	4f3d      	ldr	r7, [pc, #244]	; (8001134 <bench_sha512+0x124>)
 800103e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001138 <bench_sha512+0x128>
            for (times = 0; times < numBlocks; times++) {
 8001042:	f04f 0800 	mov.w	r8, #0
 8001046:	6833      	ldr	r3, [r6, #0]
 8001048:	4543      	cmp	r3, r8
 800104a:	dc48      	bgt.n	80010de <bench_sha512+0xce>
            count += times;
 800104c:	9b05      	ldr	r3, [sp, #20]
        } while (bench_stats_check(start));
 800104e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
            count += times;
 8001052:	4443      	add	r3, r8
 8001054:	9305      	str	r3, [sp, #20]
        } while (bench_stats_check(start));
 8001056:	f7ff f869 	bl	800012c <bench_stats_check>
 800105a:	4604      	mov	r4, r0
 800105c:	2800      	cmp	r0, #0
 800105e:	d1ee      	bne.n	800103e <bench_sha512+0x2e>
exit_sha512:
 8001060:	e031      	b.n	80010c6 <bench_sha512+0xb6>
                printf("InitSha512_ex failed, ret = %d\n", ret);
 8001062:	4836      	ldr	r0, [pc, #216]	; (800113c <bench_sha512+0x12c>)
 8001064:	f012 f9ba 	bl	80133dc <iprintf>
        wc_Sha512Free(&hash[i]);
 8001068:	a808      	add	r0, sp, #32
 800106a:	f009 fd6f 	bl	800ab4c <wc_Sha512Free>
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
 800106e:	b115      	cbz	r5, 8001076 <bench_sha512+0x66>
 8001070:	4628      	mov	r0, r5
 8001072:	f012 f89d 	bl	80131b0 <free>
}
 8001076:	b041      	add	sp, #260	; 0x104
 8001078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = wc_InitSha512_ex(&hash[i], HEAP_HINT,
 800107c:	4621      	mov	r1, r4
 800107e:	f06f 0201 	mvn.w	r2, #1
 8001082:	a808      	add	r0, sp, #32
 8001084:	f009 fce0 	bl	800aa48 <wc_InitSha512_ex>
            if (ret != 0) {
 8001088:	4601      	mov	r1, r0
 800108a:	2800      	cmp	r0, #0
 800108c:	d1e9      	bne.n	8001062 <bench_sha512+0x52>
        bench_stats_start(&count, &start);
 800108e:	a906      	add	r1, sp, #24
 8001090:	a805      	add	r0, sp, #20
 8001092:	f7ff f841 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks || pending > 0; ) {
 8001096:	4f26      	ldr	r7, [pc, #152]	; (8001130 <bench_sha512+0x120>)
                        ret = wc_Sha512Update(&hash[i], bench_plain,
 8001098:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001134 <bench_sha512+0x124>
 800109c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001138 <bench_sha512+0x128>
            for (times = 0; times < numBlocks || pending > 0; ) {
 80010a0:	2600      	movs	r6, #0
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	42b3      	cmp	r3, r6
 80010a6:	dc36      	bgt.n	8001116 <bench_sha512+0x106>
            count += times;
 80010a8:	9b05      	ldr	r3, [sp, #20]
                        ret = wc_Sha512Final(&hash[i], digest[i]);
 80010aa:	4629      	mov	r1, r5
            count += times;
 80010ac:	4433      	add	r3, r6
                        ret = wc_Sha512Final(&hash[i], digest[i]);
 80010ae:	a808      	add	r0, sp, #32
            count += times;
 80010b0:	9305      	str	r3, [sp, #20]
                        ret = wc_Sha512Final(&hash[i], digest[i]);
 80010b2:	f009 fcb7 	bl	800aa24 <wc_Sha512Final>
        if (*ret >= 0) {
 80010b6:	1e04      	subs	r4, r0, #0
 80010b8:	db05      	blt.n	80010c6 <bench_sha512+0xb6>
        } while (bench_stats_check(start));
 80010ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80010be:	f7ff f835 	bl	800012c <bench_stats_check>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d1ea      	bne.n	800109c <bench_sha512+0x8c>
    bench_stats_sym_finish("SHA-512", useDeviceID, count, bench_size,
 80010c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80010ca:	e9cd 2300 	strd	r2, r3, [sp]
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <bench_sha512+0x124>)
 80010d0:	9402      	str	r4, [sp, #8]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	9905      	ldr	r1, [sp, #20]
 80010d6:	481a      	ldr	r0, [pc, #104]	; (8001140 <bench_sha512+0x130>)
 80010d8:	f7ff f8fe 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 80010dc:	e7c4      	b.n	8001068 <bench_sha512+0x58>
                ret = wc_InitSha512_ex(hash, HEAP_HINT,
 80010de:	f06f 0201 	mvn.w	r2, #1
 80010e2:	2100      	movs	r1, #0
 80010e4:	a808      	add	r0, sp, #32
 80010e6:	f009 fcaf 	bl	800aa48 <wc_InitSha512_ex>
                if (ret == 0)
 80010ea:	4604      	mov	r4, r0
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d1ea      	bne.n	80010c6 <bench_sha512+0xb6>
                    ret = wc_Sha512Update(hash, bench_plain, bench_size);
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	f8d9 1000 	ldr.w	r1, [r9]
 80010f6:	a808      	add	r0, sp, #32
 80010f8:	f009 fcbe 	bl	800aa78 <wc_Sha512Update>
                if (ret == 0)
 80010fc:	4604      	mov	r4, r0
 80010fe:	2800      	cmp	r0, #0
 8001100:	d1e1      	bne.n	80010c6 <bench_sha512+0xb6>
                    ret = wc_Sha512Final(hash, digest[0]);
 8001102:	4629      	mov	r1, r5
 8001104:	a808      	add	r0, sp, #32
 8001106:	f009 fc8d 	bl	800aa24 <wc_Sha512Final>
                if (ret != 0)
 800110a:	4604      	mov	r4, r0
 800110c:	2800      	cmp	r0, #0
 800110e:	d1da      	bne.n	80010c6 <bench_sha512+0xb6>
            for (times = 0; times < numBlocks; times++) {
 8001110:	f108 0801 	add.w	r8, r8, #1
 8001114:	e797      	b.n	8001046 <bench_sha512+0x36>
                        ret = wc_Sha512Update(&hash[i], bench_plain,
 8001116:	f8d8 2000 	ldr.w	r2, [r8]
 800111a:	f8d9 1000 	ldr.w	r1, [r9]
 800111e:	a808      	add	r0, sp, #32
 8001120:	f009 fcaa 	bl	800aa78 <wc_Sha512Update>
        if (*ret >= 0) {
 8001124:	1e04      	subs	r4, r0, #0
 8001126:	dbce      	blt.n	80010c6 <bench_sha512+0xb6>
            (*times)++;
 8001128:	3601      	adds	r6, #1
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
 800112a:	e7ba      	b.n	80010a2 <bench_sha512+0x92>
 800112c:	200000d4 	.word	0x200000d4
 8001130:	200000d8 	.word	0x200000d8
 8001134:	200000d0 	.word	0x200000d0
 8001138:	2000017c 	.word	0x2000017c
 800113c:	08014813 	.word	0x08014813
 8001140:	08014833 	.word	0x08014833

08001144 <bench_sha512_224>:
{
 8001144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001148:	b0c1      	sub	sp, #260	; 0x104
    int    ret = 0, i, count = 0, times, pending = 0;
 800114a:	2400      	movs	r4, #0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 800114c:	201c      	movs	r0, #28
    int    ret = 0, i, count = 0, times, pending = 0;
 800114e:	9405      	str	r4, [sp, #20]
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8001150:	f012 f826 	bl	80131a0 <malloc>
    XMEMSET(hash, 0, sizeof(hash));
 8001154:	22e0      	movs	r2, #224	; 0xe0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8001156:	4605      	mov	r5, r0
    XMEMSET(hash, 0, sizeof(hash));
 8001158:	4621      	mov	r1, r4
 800115a:	a808      	add	r0, sp, #32
 800115c:	f012 f858 	bl	8013210 <memset>
    if (digest_stream) {
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <bench_sha512_224+0x11c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	bb23      	cbnz	r3, 80011b0 <bench_sha512_224+0x6c>
        bench_stats_start(&count, &start);
 8001166:	a906      	add	r1, sp, #24
 8001168:	a805      	add	r0, sp, #20
 800116a:	f7fe ffd5 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks; times++) {
 800116e:	4e3d      	ldr	r6, [pc, #244]	; (8001264 <bench_sha512_224+0x120>)
                    ret = wc_Sha512_224Update(hash, bench_plain, bench_size);
 8001170:	4f3d      	ldr	r7, [pc, #244]	; (8001268 <bench_sha512_224+0x124>)
 8001172:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800126c <bench_sha512_224+0x128>
            for (times = 0; times < numBlocks; times++) {
 8001176:	f04f 0800 	mov.w	r8, #0
 800117a:	6833      	ldr	r3, [r6, #0]
 800117c:	4543      	cmp	r3, r8
 800117e:	dc48      	bgt.n	8001212 <bench_sha512_224+0xce>
            count += times;
 8001180:	9b05      	ldr	r3, [sp, #20]
        } while (bench_stats_check(start));
 8001182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
            count += times;
 8001186:	4443      	add	r3, r8
 8001188:	9305      	str	r3, [sp, #20]
        } while (bench_stats_check(start));
 800118a:	f7fe ffcf 	bl	800012c <bench_stats_check>
 800118e:	4604      	mov	r4, r0
 8001190:	2800      	cmp	r0, #0
 8001192:	d1ee      	bne.n	8001172 <bench_sha512_224+0x2e>
exit_sha512_224:
 8001194:	e031      	b.n	80011fa <bench_sha512_224+0xb6>
                printf("InitSha512_224_ex failed, ret = %d\n", ret);
 8001196:	4836      	ldr	r0, [pc, #216]	; (8001270 <bench_sha512_224+0x12c>)
 8001198:	f012 f920 	bl	80133dc <iprintf>
        wc_Sha512_224Free(&hash[i]);
 800119c:	a808      	add	r0, sp, #32
 800119e:	f009 fce1 	bl	800ab64 <wc_Sha512_224Free>
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
 80011a2:	b115      	cbz	r5, 80011aa <bench_sha512_224+0x66>
 80011a4:	4628      	mov	r0, r5
 80011a6:	f012 f803 	bl	80131b0 <free>
}
 80011aa:	b041      	add	sp, #260	; 0x104
 80011ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = wc_InitSha512_224_ex(&hash[i], HEAP_HINT,
 80011b0:	4621      	mov	r1, r4
 80011b2:	f06f 0201 	mvn.w	r2, #1
 80011b6:	a808      	add	r0, sp, #32
 80011b8:	f009 fc4e 	bl	800aa58 <wc_InitSha512_224_ex>
            if (ret != 0) {
 80011bc:	4601      	mov	r1, r0
 80011be:	2800      	cmp	r0, #0
 80011c0:	d1e9      	bne.n	8001196 <bench_sha512_224+0x52>
        bench_stats_start(&count, &start);
 80011c2:	a906      	add	r1, sp, #24
 80011c4:	a805      	add	r0, sp, #20
 80011c6:	f7fe ffa7 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks || pending > 0; ) {
 80011ca:	4f26      	ldr	r7, [pc, #152]	; (8001264 <bench_sha512_224+0x120>)
                        ret = wc_Sha512_224Update(&hash[i], bench_plain,
 80011cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001268 <bench_sha512_224+0x124>
 80011d0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800126c <bench_sha512_224+0x128>
            for (times = 0; times < numBlocks || pending > 0; ) {
 80011d4:	2600      	movs	r6, #0
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	42b3      	cmp	r3, r6
 80011da:	dc36      	bgt.n	800124a <bench_sha512_224+0x106>
            count += times;
 80011dc:	9b05      	ldr	r3, [sp, #20]
                        ret = wc_Sha512_224Final(&hash[i], digest[i]);
 80011de:	4629      	mov	r1, r5
            count += times;
 80011e0:	4433      	add	r3, r6
                        ret = wc_Sha512_224Final(&hash[i], digest[i]);
 80011e2:	a808      	add	r0, sp, #32
            count += times;
 80011e4:	9305      	str	r3, [sp, #20]
                        ret = wc_Sha512_224Final(&hash[i], digest[i]);
 80011e6:	f009 fc23 	bl	800aa30 <wc_Sha512_224Final>
        if (*ret >= 0) {
 80011ea:	1e04      	subs	r4, r0, #0
 80011ec:	db05      	blt.n	80011fa <bench_sha512_224+0xb6>
        } while (bench_stats_check(start));
 80011ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80011f2:	f7fe ff9b 	bl	800012c <bench_stats_check>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d1ea      	bne.n	80011d0 <bench_sha512_224+0x8c>
    bench_stats_sym_finish("SHA-512/224", useDeviceID, count, bench_size,
 80011fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80011fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <bench_sha512_224+0x124>)
 8001204:	9402      	str	r4, [sp, #8]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	9905      	ldr	r1, [sp, #20]
 800120a:	481a      	ldr	r0, [pc, #104]	; (8001274 <bench_sha512_224+0x130>)
 800120c:	f7ff f864 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 8001210:	e7c4      	b.n	800119c <bench_sha512_224+0x58>
                ret = wc_InitSha512_224_ex(hash, HEAP_HINT,
 8001212:	f06f 0201 	mvn.w	r2, #1
 8001216:	2100      	movs	r1, #0
 8001218:	a808      	add	r0, sp, #32
 800121a:	f009 fc1d 	bl	800aa58 <wc_InitSha512_224_ex>
                if (ret == 0)
 800121e:	4604      	mov	r4, r0
 8001220:	2800      	cmp	r0, #0
 8001222:	d1ea      	bne.n	80011fa <bench_sha512_224+0xb6>
                    ret = wc_Sha512_224Update(hash, bench_plain, bench_size);
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	f8d9 1000 	ldr.w	r1, [r9]
 800122a:	a808      	add	r0, sp, #32
 800122c:	f009 fc98 	bl	800ab60 <wc_Sha512_224Update>
                if (ret == 0)
 8001230:	4604      	mov	r4, r0
 8001232:	2800      	cmp	r0, #0
 8001234:	d1e1      	bne.n	80011fa <bench_sha512_224+0xb6>
                    ret = wc_Sha512_224Final(hash, digest[0]);
 8001236:	4629      	mov	r1, r5
 8001238:	a808      	add	r0, sp, #32
 800123a:	f009 fbf9 	bl	800aa30 <wc_Sha512_224Final>
                if (ret != 0)
 800123e:	4604      	mov	r4, r0
 8001240:	2800      	cmp	r0, #0
 8001242:	d1da      	bne.n	80011fa <bench_sha512_224+0xb6>
            for (times = 0; times < numBlocks; times++) {
 8001244:	f108 0801 	add.w	r8, r8, #1
 8001248:	e797      	b.n	800117a <bench_sha512_224+0x36>
                        ret = wc_Sha512_224Update(&hash[i], bench_plain,
 800124a:	f8d8 2000 	ldr.w	r2, [r8]
 800124e:	f8d9 1000 	ldr.w	r1, [r9]
 8001252:	a808      	add	r0, sp, #32
 8001254:	f009 fc84 	bl	800ab60 <wc_Sha512_224Update>
        if (*ret >= 0) {
 8001258:	1e04      	subs	r4, r0, #0
 800125a:	dbce      	blt.n	80011fa <bench_sha512_224+0xb6>
            (*times)++;
 800125c:	3601      	adds	r6, #1
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
 800125e:	e7ba      	b.n	80011d6 <bench_sha512_224+0x92>
 8001260:	200000d4 	.word	0x200000d4
 8001264:	200000d8 	.word	0x200000d8
 8001268:	200000d0 	.word	0x200000d0
 800126c:	2000017c 	.word	0x2000017c
 8001270:	0801483b 	.word	0x0801483b
 8001274:	0801485f 	.word	0x0801485f

08001278 <bench_sha512_256>:
{
 8001278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800127c:	b0c1      	sub	sp, #260	; 0x104
    int    ret = 0, i, count = 0, times, pending = 0;
 800127e:	2400      	movs	r4, #0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8001280:	2020      	movs	r0, #32
    int    ret = 0, i, count = 0, times, pending = 0;
 8001282:	9405      	str	r4, [sp, #20]
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 8001284:	f011 ff8c 	bl	80131a0 <malloc>
    XMEMSET(hash, 0, sizeof(hash));
 8001288:	22e0      	movs	r2, #224	; 0xe0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING,
 800128a:	4605      	mov	r5, r0
    XMEMSET(hash, 0, sizeof(hash));
 800128c:	4621      	mov	r1, r4
 800128e:	a808      	add	r0, sp, #32
 8001290:	f011 ffbe 	bl	8013210 <memset>
    if (digest_stream) {
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <bench_sha512_256+0x11c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	bb23      	cbnz	r3, 80012e4 <bench_sha512_256+0x6c>
        bench_stats_start(&count, &start);
 800129a:	a906      	add	r1, sp, #24
 800129c:	a805      	add	r0, sp, #20
 800129e:	f7fe ff3b 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks; times++) {
 80012a2:	4e3d      	ldr	r6, [pc, #244]	; (8001398 <bench_sha512_256+0x120>)
                    ret = wc_Sha512_256Update(hash, bench_plain, bench_size);
 80012a4:	4f3d      	ldr	r7, [pc, #244]	; (800139c <bench_sha512_256+0x124>)
 80012a6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80013a0 <bench_sha512_256+0x128>
            for (times = 0; times < numBlocks; times++) {
 80012aa:	f04f 0800 	mov.w	r8, #0
 80012ae:	6833      	ldr	r3, [r6, #0]
 80012b0:	4543      	cmp	r3, r8
 80012b2:	dc48      	bgt.n	8001346 <bench_sha512_256+0xce>
            count += times;
 80012b4:	9b05      	ldr	r3, [sp, #20]
        } while (bench_stats_check(start));
 80012b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
            count += times;
 80012ba:	4443      	add	r3, r8
 80012bc:	9305      	str	r3, [sp, #20]
        } while (bench_stats_check(start));
 80012be:	f7fe ff35 	bl	800012c <bench_stats_check>
 80012c2:	4604      	mov	r4, r0
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d1ee      	bne.n	80012a6 <bench_sha512_256+0x2e>
exit_sha512_256:
 80012c8:	e031      	b.n	800132e <bench_sha512_256+0xb6>
                printf("InitSha512_256_ex failed, ret = %d\n", ret);
 80012ca:	4836      	ldr	r0, [pc, #216]	; (80013a4 <bench_sha512_256+0x12c>)
 80012cc:	f012 f886 	bl	80133dc <iprintf>
        wc_Sha512_256Free(&hash[i]);
 80012d0:	a808      	add	r0, sp, #32
 80012d2:	f009 fc4b 	bl	800ab6c <wc_Sha512_256Free>
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
 80012d6:	b115      	cbz	r5, 80012de <bench_sha512_256+0x66>
 80012d8:	4628      	mov	r0, r5
 80012da:	f011 ff69 	bl	80131b0 <free>
}
 80012de:	b041      	add	sp, #260	; 0x104
 80012e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = wc_InitSha512_256_ex(&hash[i], HEAP_HINT,
 80012e4:	4621      	mov	r1, r4
 80012e6:	f06f 0201 	mvn.w	r2, #1
 80012ea:	a808      	add	r0, sp, #32
 80012ec:	f009 fbbc 	bl	800aa68 <wc_InitSha512_256_ex>
            if (ret != 0) {
 80012f0:	4601      	mov	r1, r0
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d1e9      	bne.n	80012ca <bench_sha512_256+0x52>
        bench_stats_start(&count, &start);
 80012f6:	a906      	add	r1, sp, #24
 80012f8:	a805      	add	r0, sp, #20
 80012fa:	f7fe ff0d 	bl	8000118 <bench_stats_start>
            for (times = 0; times < numBlocks || pending > 0; ) {
 80012fe:	4f26      	ldr	r7, [pc, #152]	; (8001398 <bench_sha512_256+0x120>)
                        ret = wc_Sha512_256Update(&hash[i], bench_plain,
 8001300:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800139c <bench_sha512_256+0x124>
 8001304:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80013a0 <bench_sha512_256+0x128>
            for (times = 0; times < numBlocks || pending > 0; ) {
 8001308:	2600      	movs	r6, #0
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	42b3      	cmp	r3, r6
 800130e:	dc36      	bgt.n	800137e <bench_sha512_256+0x106>
            count += times;
 8001310:	9b05      	ldr	r3, [sp, #20]
                        ret = wc_Sha512_256Final(&hash[i], digest[i]);
 8001312:	4629      	mov	r1, r5
            count += times;
 8001314:	4433      	add	r3, r6
                        ret = wc_Sha512_256Final(&hash[i], digest[i]);
 8001316:	a808      	add	r0, sp, #32
            count += times;
 8001318:	9305      	str	r3, [sp, #20]
                        ret = wc_Sha512_256Final(&hash[i], digest[i]);
 800131a:	f009 fb8f 	bl	800aa3c <wc_Sha512_256Final>
        if (*ret >= 0) {
 800131e:	1e04      	subs	r4, r0, #0
 8001320:	db05      	blt.n	800132e <bench_sha512_256+0xb6>
        } while (bench_stats_check(start));
 8001322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001326:	f7fe ff01 	bl	800012c <bench_stats_check>
 800132a:	2800      	cmp	r0, #0
 800132c:	d1ea      	bne.n	8001304 <bench_sha512_256+0x8c>
    bench_stats_sym_finish("SHA-512/256", useDeviceID, count, bench_size,
 800132e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001332:	e9cd 2300 	strd	r2, r3, [sp]
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <bench_sha512_256+0x124>)
 8001338:	9402      	str	r4, [sp, #8]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	9905      	ldr	r1, [sp, #20]
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <bench_sha512_256+0x130>)
 8001340:	f7fe ffca 	bl	80002d8 <bench_stats_sym_finish.constprop.0>
 8001344:	e7c4      	b.n	80012d0 <bench_sha512_256+0x58>
                ret = wc_InitSha512_256_ex(hash, HEAP_HINT,
 8001346:	f06f 0201 	mvn.w	r2, #1
 800134a:	2100      	movs	r1, #0
 800134c:	a808      	add	r0, sp, #32
 800134e:	f009 fb8b 	bl	800aa68 <wc_InitSha512_256_ex>
                if (ret == 0)
 8001352:	4604      	mov	r4, r0
 8001354:	2800      	cmp	r0, #0
 8001356:	d1ea      	bne.n	800132e <bench_sha512_256+0xb6>
                    ret = wc_Sha512_256Update(hash, bench_plain, bench_size);
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	f8d9 1000 	ldr.w	r1, [r9]
 800135e:	a808      	add	r0, sp, #32
 8001360:	f009 fc02 	bl	800ab68 <wc_Sha512_256Update>
                if (ret == 0)
 8001364:	4604      	mov	r4, r0
 8001366:	2800      	cmp	r0, #0
 8001368:	d1e1      	bne.n	800132e <bench_sha512_256+0xb6>
                    ret = wc_Sha512_256Final(hash, digest[0]);
 800136a:	4629      	mov	r1, r5
 800136c:	a808      	add	r0, sp, #32
 800136e:	f009 fb65 	bl	800aa3c <wc_Sha512_256Final>
                if (ret != 0)
 8001372:	4604      	mov	r4, r0
 8001374:	2800      	cmp	r0, #0
 8001376:	d1da      	bne.n	800132e <bench_sha512_256+0xb6>
            for (times = 0; times < numBlocks; times++) {
 8001378:	f108 0801 	add.w	r8, r8, #1
 800137c:	e797      	b.n	80012ae <bench_sha512_256+0x36>
                        ret = wc_Sha512_256Update(&hash[i], bench_plain,
 800137e:	f8d8 2000 	ldr.w	r2, [r8]
 8001382:	f8d9 1000 	ldr.w	r1, [r9]
 8001386:	a808      	add	r0, sp, #32
 8001388:	f009 fbee 	bl	800ab68 <wc_Sha512_256Update>
        if (*ret >= 0) {
 800138c:	1e04      	subs	r4, r0, #0
 800138e:	dbce      	blt.n	800132e <bench_sha512_256+0xb6>
            (*times)++;
 8001390:	3601      	adds	r6, #1
                for (i = 0; i < BENCH_MAX_PENDING; i++) {
 8001392:	e7ba      	b.n	800130a <bench_sha512_256+0x92>
 8001394:	200000d4 	.word	0x200000d4
 8001398:	200000d8 	.word	0x200000d8
 800139c:	200000d0 	.word	0x200000d0
 80013a0:	2000017c 	.word	0x2000017c
 80013a4:	0801486b 	.word	0x0801486b
 80013a8:	0801488f 	.word	0x0801488f

080013ac <bench_hmac_sha>:
#endif /* NO_MD5 */

#ifndef NO_SHA

void bench_hmac_sha(int useDeviceID)
{
 80013ac:	b507      	push	{r0, r1, r2, lr}
    WOLFSSL_SMALL_STACK_STATIC const byte key[] = {
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b };

    bench_hmac(useDeviceID, WC_SHA, WC_SHA_DIGEST_SIZE, key, sizeof(key),
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <bench_hmac_sha+0x18>)
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <bench_hmac_sha+0x1c>)
 80013b4:	2314      	movs	r3, #20
 80013b6:	2104      	movs	r1, #4
 80013b8:	f7ff f8a4 	bl	8000504 <bench_hmac.constprop.0>
               "HMAC-SHA");
}
 80013bc:	b003      	add	sp, #12
 80013be:	f85d fb04 	ldr.w	pc, [sp], #4
 80013c2:	bf00      	nop
 80013c4:	0801489b 	.word	0x0801489b
 80013c8:	08014dea 	.word	0x08014dea

080013cc <bench_hmac_sha256>:
#endif /* WOLFSSL_SHA224 */

#ifndef NO_SHA256

void bench_hmac_sha256(int useDeviceID)
{
 80013cc:	b507      	push	{r0, r1, r2, lr}
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b };

    bench_hmac(useDeviceID, WC_SHA256, WC_SHA256_DIGEST_SIZE, key, sizeof(key),
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <bench_hmac_sha256+0x18>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <bench_hmac_sha256+0x1c>)
 80013d4:	2320      	movs	r3, #32
 80013d6:	2106      	movs	r1, #6
 80013d8:	f7ff f894 	bl	8000504 <bench_hmac.constprop.0>
               "HMAC-SHA256");
}
 80013dc:	b003      	add	sp, #12
 80013de:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e2:	bf00      	nop
 80013e4:	080148a4 	.word	0x080148a4
 80013e8:	08014dca 	.word	0x08014dca

080013ec <bench_hmac_sha512>:
#endif /* WOLFSSL_SHA384 */

#ifdef WOLFSSL_SHA512

void bench_hmac_sha512(int useDeviceID)
{
 80013ec:	b507      	push	{r0, r1, r2, lr}
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
                   0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b };

    bench_hmac(useDeviceID, WC_SHA512, WC_SHA512_DIGEST_SIZE, key, sizeof(key),
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <bench_hmac_sha512+0x18>)
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <bench_hmac_sha512+0x1c>)
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	2108      	movs	r1, #8
 80013f8:	f7ff f884 	bl	8000504 <bench_hmac.constprop.0>
               "HMAC-SHA512");
}
 80013fc:	b003      	add	sp, #12
 80013fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001402:	bf00      	nop
 8001404:	080148b0 	.word	0x080148b0
 8001408:	08014d8a 	.word	0x08014d8a

0800140c <bench_eccMakeKey>:
    #endif
}


void bench_eccMakeKey(int useDeviceID, int curveId)
{
 800140c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    char name[BENCH_ECC_NAME_SZ];
    double start;
    const char**desc = bench_desc_words[lng_index];

#ifdef WOLFSSL_SMALL_STACK
    genKey = (ecc_key *)XMALLOC(sizeof(*genKey) * BENCH_MAX_PENDING,
 8001410:	f44f 70de 	mov.w	r0, #444	; 0x1bc
{
 8001414:	b08f      	sub	sp, #60	; 0x3c
 8001416:	460e      	mov	r6, r1
    genKey = (ecc_key *)XMALLOC(sizeof(*genKey) * BENCH_MAX_PENDING,
 8001418:	f011 fec2 	bl	80131a0 <malloc>
                                HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
    if (genKey == NULL) {
 800141c:	4604      	mov	r4, r0
 800141e:	b928      	cbnz	r0, 800142c <bench_eccMakeKey+0x20>
        printf("bench_eccMakeKey malloc failed\n");
 8001420:	482c      	ldr	r0, [pc, #176]	; (80014d4 <bench_eccMakeKey+0xc8>)
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(genKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
#endif
}
 8001422:	b00f      	add	sp, #60	; 0x3c
 8001424:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        printf("bench_eccMakeKey malloc failed\n");
 8001428:	f011 bfd8 	b.w	80133dc <iprintf>
    keySize = wc_ecc_get_curve_size_from_id(curveId);
 800142c:	4630      	mov	r0, r6
 800142e:	f004 f92b 	bl	8005688 <wc_ecc_get_curve_size_from_id>
    XMEMSET(genKey, 0, sizeof(*genKey) * BENCH_MAX_PENDING);
 8001432:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8001436:	2100      	movs	r1, #0
    keySize = wc_ecc_get_curve_size_from_id(curveId);
 8001438:	4607      	mov	r7, r0
    XMEMSET(genKey, 0, sizeof(*genKey) * BENCH_MAX_PENDING);
 800143a:	4620      	mov	r0, r4
 800143c:	f011 fee8 	bl	8013210 <memset>
    bench_stats_start(&count, &start);
 8001440:	a906      	add	r1, sp, #24
 8001442:	a805      	add	r0, sp, #20
 8001444:	f7fe fe68 	bl	8000118 <bench_stats_start>
                    ret = wc_ecc_make_key_ex(&gRng, keySize, &genKey[i],
 8001448:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80014d8 <bench_eccMakeKey+0xcc>
        for (times = 0; times < agreeTimes || pending > 0; ) {
 800144c:	f04f 0900 	mov.w	r9, #0
                    wc_ecc_free(&genKey[i]);
 8001450:	4620      	mov	r0, r4
 8001452:	f004 f9e7 	bl	8005824 <wc_ecc_free>
                    ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT, deviceID);
 8001456:	f06f 0201 	mvn.w	r2, #1
 800145a:	2100      	movs	r1, #0
 800145c:	4620      	mov	r0, r4
 800145e:	f004 f9c0 	bl	80057e2 <wc_ecc_init_ex>
                    if (ret < 0) {
 8001462:	1e05      	subs	r5, r0, #0
 8001464:	da1d      	bge.n	80014a2 <bench_eccMakeKey+0x96>
    (void)XSNPRINTF(name, BENCH_ECC_NAME_SZ, "ECC   [%15s]",
 8001466:	4630      	mov	r0, r6
 8001468:	f004 f8fe 	bl	8005668 <wc_ecc_get_name>
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <bench_eccMakeKey+0xd0>)
 800146e:	4603      	mov	r3, r0
 8001470:	2118      	movs	r1, #24
 8001472:	a808      	add	r0, sp, #32
 8001474:	f011 ffda 	bl	801342c <sniprintf>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001478:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800147c:	e9cd 2300 	strd	r2, r3, [sp]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <bench_eccMakeKey+0xd4>)
 8001482:	9502      	str	r5, [sp, #8]
 8001484:	9b05      	ldr	r3, [sp, #20]
 8001486:	6892      	ldr	r2, [r2, #8]
 8001488:	00f9      	lsls	r1, r7, #3
 800148a:	a808      	add	r0, sp, #32
 800148c:	f7fe fe62 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
        wc_ecc_free(&genKey[i]);
 8001490:	4620      	mov	r0, r4
 8001492:	f004 f9c7 	bl	8005824 <wc_ecc_free>
    XFREE(genKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8001496:	4620      	mov	r0, r4
 8001498:	f011 fe8a 	bl	80131b0 <free>
}
 800149c:	b00f      	add	sp, #60	; 0x3c
 800149e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    ret = wc_ecc_make_key_ex(&gRng, keySize, &genKey[i],
 80014a2:	4633      	mov	r3, r6
 80014a4:	4622      	mov	r2, r4
 80014a6:	4639      	mov	r1, r7
 80014a8:	4640      	mov	r0, r8
 80014aa:	f004 fece 	bl	800624a <wc_ecc_make_key_ex>
        if (*ret >= 0) {
 80014ae:	1e05      	subs	r5, r0, #0
 80014b0:	dbd9      	blt.n	8001466 <bench_eccMakeKey+0x5a>
        for (times = 0; times < agreeTimes || pending > 0; ) {
 80014b2:	f1b9 0f00 	cmp.w	r9, #0
 80014b6:	d102      	bne.n	80014be <bench_eccMakeKey+0xb2>
 80014b8:	f04f 0901 	mov.w	r9, #1
 80014bc:	e7c8      	b.n	8001450 <bench_eccMakeKey+0x44>
        count += times;
 80014be:	9a05      	ldr	r2, [sp, #20]
    } while (bench_stats_check(start));
 80014c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += times;
 80014c4:	3202      	adds	r2, #2
 80014c6:	9205      	str	r2, [sp, #20]
    } while (bench_stats_check(start));
 80014c8:	f7fe fe30 	bl	800012c <bench_stats_check>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d1bd      	bne.n	800144c <bench_eccMakeKey+0x40>
exit:
 80014d0:	e7c9      	b.n	8001466 <bench_eccMakeKey+0x5a>
 80014d2:	bf00      	nop
 80014d4:	080148bc 	.word	0x080148bc
 80014d8:	20000188 	.word	0x20000188
 80014dc:	080148dc 	.word	0x080148dc
 80014e0:	20000010 	.word	0x20000010

080014e4 <bench_ecc>:


void bench_ecc(int useDeviceID, int curveId)
{
 80014e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int    verify[BENCH_MAX_PENDING];
    #endif
#endif

    word32 x[BENCH_MAX_PENDING];
    double start = 0;
 80014e8:	2200      	movs	r2, #0
{
 80014ea:	b093      	sub	sp, #76	; 0x4c
    double start = 0;
 80014ec:	2300      	movs	r3, #0
    WC_DECLARE_ARRAY(digest, byte,
                     BENCH_MAX_PENDING, MAX_ECC_BYTES, HEAP_HINT);
#endif

#ifdef WOLFSSL_SMALL_STACK
    genKey = (ecc_key *)XMALLOC(sizeof(*genKey) * BENCH_MAX_PENDING,
 80014ee:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    double start = 0;
 80014f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
{
 80014f6:	4689      	mov	r9, r1
    genKey = (ecc_key *)XMALLOC(sizeof(*genKey) * BENCH_MAX_PENDING,
 80014f8:	f011 fe52 	bl	80131a0 <malloc>
                                HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
    if (genKey == NULL) {
 80014fc:	4604      	mov	r4, r0
 80014fe:	b928      	cbnz	r0, 800150c <bench_ecc+0x28>
#ifdef HAVE_ECC_DHE
    genKey2 = (ecc_key *)XMALLOC(sizeof(*genKey2) * BENCH_MAX_PENDING,
                                 HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
    if (genKey2 == NULL) {
        XFREE(genKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
        printf("bench_eccMakeKey malloc failed\n");
 8001500:	4899      	ldr	r0, [pc, #612]	; (8001768 <bench_ecc+0x284>)
 8001502:	f011 ff6b 	bl	80133dc <iprintf>
    (void)count;
    (void)times;
    (void)desc;
    (void)start;
    (void)name;
}
 8001506:	b013      	add	sp, #76	; 0x4c
 8001508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    genKey2 = (ecc_key *)XMALLOC(sizeof(*genKey2) * BENCH_MAX_PENDING,
 800150c:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8001510:	f011 fe46 	bl	80131a0 <malloc>
    if (genKey2 == NULL) {
 8001514:	4606      	mov	r6, r0
 8001516:	b918      	cbnz	r0, 8001520 <bench_ecc+0x3c>
        XFREE(genKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8001518:	4620      	mov	r0, r4
 800151a:	f011 fe49 	bl	80131b0 <free>
 800151e:	e7ef      	b.n	8001500 <bench_ecc+0x1c>
    WC_INIT_ARRAY(shared, byte,
 8001520:	2020      	movs	r0, #32
 8001522:	f011 fe3d 	bl	80131a0 <malloc>
 8001526:	9004      	str	r0, [sp, #16]
    WC_INIT_ARRAY(sig, byte, BENCH_MAX_PENDING, ECC_MAX_SIG_SIZE, HEAP_HINT);
 8001528:	2049      	movs	r0, #73	; 0x49
 800152a:	f011 fe39 	bl	80131a0 <malloc>
 800152e:	4682      	mov	sl, r0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING, MAX_ECC_BYTES, HEAP_HINT);
 8001530:	2020      	movs	r0, #32
 8001532:	f011 fe35 	bl	80131a0 <malloc>
    XMEMSET(genKey, 0, sizeof(*genKey) * BENCH_MAX_PENDING);
 8001536:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800153a:	2100      	movs	r1, #0
    WC_INIT_ARRAY(digest, byte, BENCH_MAX_PENDING, MAX_ECC_BYTES, HEAP_HINT);
 800153c:	4680      	mov	r8, r0
    XMEMSET(genKey, 0, sizeof(*genKey) * BENCH_MAX_PENDING);
 800153e:	4620      	mov	r0, r4
 8001540:	f011 fe66 	bl	8013210 <memset>
    XMEMSET(genKey2, 0, sizeof(*genKey2) * BENCH_MAX_PENDING);
 8001544:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8001548:	2100      	movs	r1, #0
 800154a:	4630      	mov	r0, r6
 800154c:	f011 fe60 	bl	8013210 <memset>
    keySize = wc_ecc_get_curve_size_from_id(curveId);
 8001550:	4648      	mov	r0, r9
 8001552:	f004 f899 	bl	8005688 <wc_ecc_get_curve_size_from_id>
        if ((ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT, deviceID)) < 0) {
 8001556:	f06f 0201 	mvn.w	r2, #1
    keySize = wc_ecc_get_curve_size_from_id(curveId);
 800155a:	4605      	mov	r5, r0
        if ((ret = wc_ecc_init_ex(&genKey[i], HEAP_HINT, deviceID)) < 0) {
 800155c:	2100      	movs	r1, #0
 800155e:	4620      	mov	r0, r4
 8001560:	f004 f93f 	bl	80057e2 <wc_ecc_init_ex>
 8001564:	2800      	cmp	r0, #0
 8001566:	db4d      	blt.n	8001604 <bench_ecc+0x120>
        ret = wc_ecc_make_key_ex(&gRng, keySize, &genKey[i], curveId);
 8001568:	4880      	ldr	r0, [pc, #512]	; (800176c <bench_ecc+0x288>)
 800156a:	f8df b200 	ldr.w	fp, [pc, #512]	; 800176c <bench_ecc+0x288>
 800156e:	464b      	mov	r3, r9
 8001570:	4622      	mov	r2, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f004 fe69 	bl	800624a <wc_ecc_make_key_ex>
        if (ret < 0) {
 8001578:	2800      	cmp	r0, #0
 800157a:	db43      	blt.n	8001604 <bench_ecc+0x120>
        if ((ret = wc_ecc_init_ex(&genKey2[i], HEAP_HINT, deviceID)) < 0) {
 800157c:	f06f 0201 	mvn.w	r2, #1
 8001580:	2100      	movs	r1, #0
 8001582:	4630      	mov	r0, r6
 8001584:	f004 f92d 	bl	80057e2 <wc_ecc_init_ex>
 8001588:	2800      	cmp	r0, #0
 800158a:	db3b      	blt.n	8001604 <bench_ecc+0x120>
        if ((ret = wc_ecc_make_key_ex(&gRng, keySize, &genKey2[i],
 800158c:	464b      	mov	r3, r9
 800158e:	4632      	mov	r2, r6
 8001590:	4629      	mov	r1, r5
 8001592:	4658      	mov	r0, fp
 8001594:	f004 fe59 	bl	800624a <wc_ecc_make_key_ex>
 8001598:	2800      	cmp	r0, #0
 800159a:	dc33      	bgt.n	8001604 <bench_ecc+0x120>
        (void)wc_ecc_set_rng(&genKey[i], &gRng);
 800159c:	4659      	mov	r1, fp
 800159e:	4620      	mov	r0, r4
 80015a0:	f005 fc2b 	bl	8006dfa <wc_ecc_set_rng>
    bench_stats_start(&count, &start);
 80015a4:	a90a      	add	r1, sp, #40	; 0x28
 80015a6:	a807      	add	r0, sp, #28
 80015a8:	f7fe fdb6 	bl	8000118 <bench_stats_start>
                    ret = wc_ecc_shared_secret(&genKey[i], &genKey2[i],
 80015ac:	9a04      	ldr	r2, [sp, #16]
                    x[i] = (word32)keySize;
 80015ae:	9509      	str	r5, [sp, #36]	; 0x24
                    ret = wc_ecc_shared_secret(&genKey[i], &genKey2[i],
 80015b0:	ab09      	add	r3, sp, #36	; 0x24
 80015b2:	4631      	mov	r1, r6
 80015b4:	4620      	mov	r0, r4
 80015b6:	f004 fd30 	bl	800601a <wc_ecc_shared_secret>
        if (*ret >= 0) {
 80015ba:	1e07      	subs	r7, r0, #0
 80015bc:	db08      	blt.n	80015d0 <bench_ecc+0xec>
                    ret = wc_ecc_shared_secret(&genKey[i], &genKey2[i],
 80015be:	9a04      	ldr	r2, [sp, #16]
                    x[i] = (word32)keySize;
 80015c0:	9509      	str	r5, [sp, #36]	; 0x24
                    ret = wc_ecc_shared_secret(&genKey[i], &genKey2[i],
 80015c2:	ab09      	add	r3, sp, #36	; 0x24
 80015c4:	4631      	mov	r1, r6
 80015c6:	4620      	mov	r0, r4
 80015c8:	f004 fd27 	bl	800601a <wc_ecc_shared_secret>
        if (*ret >= 0) {
 80015cc:	1e07      	subs	r7, r0, #0
 80015ce:	da38      	bge.n	8001642 <bench_ecc+0x15e>
    (void)XSNPRINTF(name, BENCH_ECC_NAME_SZ, "ECDHE [%15s]",
 80015d0:	4648      	mov	r0, r9
 80015d2:	f004 f849 	bl	8005668 <wc_ecc_get_name>
 80015d6:	4a66      	ldr	r2, [pc, #408]	; (8001770 <bench_ecc+0x28c>)
 80015d8:	4603      	mov	r3, r0
 80015da:	2118      	movs	r1, #24
 80015dc:	a80c      	add	r0, sp, #48	; 0x30
 80015de:	f011 ff25 	bl	801342c <sniprintf>
    bench_stats_asym_finish(name, keySize * 8, desc[3],
 80015e2:	00eb      	lsls	r3, r5, #3
 80015e4:	9305      	str	r3, [sp, #20]
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 80015e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80015ea:	e9cd 2300 	strd	r2, r3, [sp]
 80015ee:	4a61      	ldr	r2, [pc, #388]	; (8001774 <bench_ecc+0x290>)
 80015f0:	9702      	str	r7, [sp, #8]
 80015f2:	9b07      	ldr	r3, [sp, #28]
 80015f4:	68d2      	ldr	r2, [r2, #12]
 80015f6:	00e9      	lsls	r1, r5, #3
 80015f8:	a80c      	add	r0, sp, #48	; 0x30
 80015fa:	f7fe fdab 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    if (ret < 0) {
 80015fe:	2f00      	cmp	r7, #0
 8001600:	f280 8094 	bge.w	800172c <bench_ecc+0x248>
        wc_ecc_free(&genKey[i]);
 8001604:	4620      	mov	r0, r4
 8001606:	f004 f90d 	bl	8005824 <wc_ecc_free>
        wc_ecc_free(&genKey2[i]);
 800160a:	4630      	mov	r0, r6
 800160c:	f004 f90a 	bl	8005824 <wc_ecc_free>
    XFREE(genKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8001610:	4620      	mov	r0, r4
 8001612:	f011 fdcd 	bl	80131b0 <free>
    XFREE(genKey2, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8001616:	4630      	mov	r0, r6
 8001618:	f011 fdca 	bl	80131b0 <free>
    WC_FREE_ARRAY(shared, BENCH_MAX_PENDING, HEAP_HINT);
 800161c:	9b04      	ldr	r3, [sp, #16]
 800161e:	b113      	cbz	r3, 8001626 <bench_ecc+0x142>
 8001620:	9804      	ldr	r0, [sp, #16]
 8001622:	f011 fdc5 	bl	80131b0 <free>
    WC_FREE_ARRAY(sig, BENCH_MAX_PENDING, HEAP_HINT);
 8001626:	f1ba 0f00 	cmp.w	sl, #0
 800162a:	d002      	beq.n	8001632 <bench_ecc+0x14e>
 800162c:	4650      	mov	r0, sl
 800162e:	f011 fdbf 	bl	80131b0 <free>
    WC_FREE_ARRAY(digest, BENCH_MAX_PENDING, HEAP_HINT);
 8001632:	f1b8 0f00 	cmp.w	r8, #0
 8001636:	f43f af66 	beq.w	8001506 <bench_ecc+0x22>
 800163a:	4640      	mov	r0, r8
 800163c:	f011 fdb8 	bl	80131b0 <free>
    (void)name;
 8001640:	e761      	b.n	8001506 <bench_ecc+0x22>
        count += times;
 8001642:	9b07      	ldr	r3, [sp, #28]
    } while (bench_stats_check(start));
 8001644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
        count += times;
 8001648:	3302      	adds	r3, #2
 800164a:	9307      	str	r3, [sp, #28]
    } while (bench_stats_check(start));
 800164c:	f7fe fd6e 	bl	800012c <bench_stats_check>
 8001650:	2800      	cmp	r0, #0
 8001652:	d1ab      	bne.n	80015ac <bench_ecc+0xc8>
 8001654:	e7bc      	b.n	80015d0 <bench_ecc+0xec>
            digest[i][count] = (byte)count;
 8001656:	f808 3003 	strb.w	r3, [r8, r3]
 800165a:	2201      	movs	r2, #1
 800165c:	3301      	adds	r3, #1
        for (count = 0; count < keySize; count++) {
 800165e:	42ab      	cmp	r3, r5
 8001660:	dbf9      	blt.n	8001656 <bench_ecc+0x172>
 8001662:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8001666:	b102      	cbz	r2, 800166a <bench_ecc+0x186>
 8001668:	9307      	str	r3, [sp, #28]
    bench_stats_start(&count, &start);
 800166a:	a90a      	add	r1, sp, #40	; 0x28
 800166c:	a807      	add	r0, sp, #28
 800166e:	f7fe fd53 	bl	8000118 <bench_stats_start>
                    if (genKey[i].state == 0) {
 8001672:	68a3      	ldr	r3, [r4, #8]
 8001674:	b90b      	cbnz	r3, 800167a <bench_ecc+0x196>
                        x[i] = ECC_MAX_SIG_SIZE;
 8001676:	2349      	movs	r3, #73	; 0x49
 8001678:	9309      	str	r3, [sp, #36]	; 0x24
                    ret = wc_ecc_sign_hash(digest[i], (word32)keySize, sig[i],
 800167a:	e9cd b400 	strd	fp, r4, [sp]
 800167e:	ab09      	add	r3, sp, #36	; 0x24
 8001680:	4652      	mov	r2, sl
 8001682:	4629      	mov	r1, r5
 8001684:	4640      	mov	r0, r8
 8001686:	f004 ff43 	bl	8006510 <wc_ecc_sign_hash>
        if (*ret >= 0) {
 800168a:	1e07      	subs	r7, r0, #0
 800168c:	db0d      	blt.n	80016aa <bench_ecc+0x1c6>
                    if (genKey[i].state == 0) {
 800168e:	68a3      	ldr	r3, [r4, #8]
 8001690:	b90b      	cbnz	r3, 8001696 <bench_ecc+0x1b2>
                        x[i] = ECC_MAX_SIG_SIZE;
 8001692:	2349      	movs	r3, #73	; 0x49
 8001694:	9309      	str	r3, [sp, #36]	; 0x24
                    ret = wc_ecc_sign_hash(digest[i], (word32)keySize, sig[i],
 8001696:	e9cd b400 	strd	fp, r4, [sp]
 800169a:	ab09      	add	r3, sp, #36	; 0x24
 800169c:	4652      	mov	r2, sl
 800169e:	4629      	mov	r1, r5
 80016a0:	4640      	mov	r0, r8
 80016a2:	f004 ff35 	bl	8006510 <wc_ecc_sign_hash>
        if (*ret >= 0) {
 80016a6:	1e07      	subs	r7, r0, #0
 80016a8:	da44      	bge.n	8001734 <bench_ecc+0x250>
    (void)XSNPRINTF(name, BENCH_ECC_NAME_SZ, "ECDSA [%15s]",
 80016aa:	4648      	mov	r0, r9
 80016ac:	f003 ffdc 	bl	8005668 <wc_ecc_get_name>
 80016b0:	4a31      	ldr	r2, [pc, #196]	; (8001778 <bench_ecc+0x294>)
 80016b2:	4603      	mov	r3, r0
 80016b4:	2118      	movs	r1, #24
 80016b6:	a80c      	add	r0, sp, #48	; 0x30
 80016b8:	f011 feb8 	bl	801342c <sniprintf>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 80016bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <bench_ecc+0x290>)
 80016c6:	9702      	str	r7, [sp, #8]
 80016c8:	9b07      	ldr	r3, [sp, #28]
 80016ca:	6912      	ldr	r2, [r2, #16]
 80016cc:	9905      	ldr	r1, [sp, #20]
 80016ce:	a80c      	add	r0, sp, #48	; 0x30
 80016d0:	f7fe fd40 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    if (ret < 0) {
 80016d4:	2f00      	cmp	r7, #0
 80016d6:	db95      	blt.n	8001604 <bench_ecc+0x120>
    bench_stats_start(&count, &start);
 80016d8:	a90a      	add	r1, sp, #40	; 0x28
 80016da:	a807      	add	r0, sp, #28
 80016dc:	f7fe fd1c 	bl	8000118 <bench_stats_start>
        for (times = 0; times < agreeTimes || pending > 0; ) {
 80016e0:	f04f 0b00 	mov.w	fp, #0
                    if (genKey[i].state == 0) {
 80016e4:	68a3      	ldr	r3, [r4, #8]
 80016e6:	b903      	cbnz	r3, 80016ea <bench_ecc+0x206>
                        verify[i] = 0;
 80016e8:	9308      	str	r3, [sp, #32]
                    ret = wc_ecc_verify_hash(sig[i], x[i], digest[i],
 80016ea:	ab08      	add	r3, sp, #32
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80016f0:	9401      	str	r4, [sp, #4]
 80016f2:	462b      	mov	r3, r5
 80016f4:	4642      	mov	r2, r8
 80016f6:	4650      	mov	r0, sl
 80016f8:	f005 faf4 	bl	8006ce4 <wc_ecc_verify_hash>
        if (*ret >= 0) {
 80016fc:	1e07      	subs	r7, r0, #0
 80016fe:	da23      	bge.n	8001748 <bench_ecc+0x264>
    (void)XSNPRINTF(name, BENCH_ECC_NAME_SZ, "ECDSA [%15s]",
 8001700:	4648      	mov	r0, r9
 8001702:	f003 ffb1 	bl	8005668 <wc_ecc_get_name>
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <bench_ecc+0x294>)
 8001708:	4603      	mov	r3, r0
 800170a:	2118      	movs	r1, #24
 800170c:	a80c      	add	r0, sp, #48	; 0x30
 800170e:	f011 fe8d 	bl	801342c <sniprintf>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001716:	e9cd 2300 	strd	r2, r3, [sp]
 800171a:	4a16      	ldr	r2, [pc, #88]	; (8001774 <bench_ecc+0x290>)
 800171c:	9702      	str	r7, [sp, #8]
 800171e:	9b07      	ldr	r3, [sp, #28]
 8001720:	6952      	ldr	r2, [r2, #20]
 8001722:	9905      	ldr	r1, [sp, #20]
 8001724:	a80c      	add	r0, sp, #48	; 0x30
 8001726:	f7fe fd15 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
}
 800172a:	e76b      	b.n	8001604 <bench_ecc+0x120>
        for (count = 0; count < keySize; count++) {
 800172c:	2300      	movs	r3, #0
 800172e:	9307      	str	r3, [sp, #28]
 8001730:	461a      	mov	r2, r3
 8001732:	e794      	b.n	800165e <bench_ecc+0x17a>
        count += times;
 8001734:	9b07      	ldr	r3, [sp, #28]
    } while (bench_stats_check(start));
 8001736:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
        count += times;
 800173a:	3302      	adds	r3, #2
 800173c:	9307      	str	r3, [sp, #28]
    } while (bench_stats_check(start));
 800173e:	f7fe fcf5 	bl	800012c <bench_stats_check>
 8001742:	2800      	cmp	r0, #0
 8001744:	d195      	bne.n	8001672 <bench_ecc+0x18e>
 8001746:	e7b0      	b.n	80016aa <bench_ecc+0x1c6>
        for (times = 0; times < agreeTimes || pending > 0; ) {
 8001748:	f1bb 0f00 	cmp.w	fp, #0
 800174c:	d102      	bne.n	8001754 <bench_ecc+0x270>
 800174e:	f04f 0b01 	mov.w	fp, #1
 8001752:	e7c7      	b.n	80016e4 <bench_ecc+0x200>
        count += times;
 8001754:	9b07      	ldr	r3, [sp, #28]
    } while (bench_stats_check(start));
 8001756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
        count += times;
 800175a:	3302      	adds	r3, #2
 800175c:	9307      	str	r3, [sp, #28]
    } while (bench_stats_check(start));
 800175e:	f7fe fce5 	bl	800012c <bench_stats_check>
 8001762:	2800      	cmp	r0, #0
 8001764:	d1bc      	bne.n	80016e0 <bench_ecc+0x1fc>
 8001766:	e7cb      	b.n	8001700 <bench_ecc+0x21c>
 8001768:	080148bc 	.word	0x080148bc
 800176c:	20000188 	.word	0x20000188
 8001770:	080148e9 	.word	0x080148e9
 8001774:	20000010 	.word	0x20000010
 8001778:	080148f6 	.word	0x080148f6

0800177c <bench_ecc_curve>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
    if (bench_all || (bench_asym_algs & BENCH_ECC_MAKEKEY)) {
 800177e:	4e0d      	ldr	r6, [pc, #52]	; (80017b4 <bench_ecc_curve+0x38>)
 8001780:	4d0d      	ldr	r5, [pc, #52]	; (80017b8 <bench_ecc_curve+0x3c>)
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	682a      	ldr	r2, [r5, #0]
 8001786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178a:	4313      	orrs	r3, r2
{
 800178c:	4604      	mov	r4, r0
    if (bench_all || (bench_asym_algs & BENCH_ECC_MAKEKEY)) {
 800178e:	d103      	bne.n	8001798 <bench_ecc_curve+0x1c>
    if (bench_all || (bench_asym_algs & BENCH_ECC)) {
 8001790:	6833      	ldr	r3, [r6, #0]
 8001792:	049b      	lsls	r3, r3, #18
 8001794:	d407      	bmi.n	80017a6 <bench_ecc_curve+0x2a>
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
        bench_eccMakeKey(0, curveId);
 8001798:	4601      	mov	r1, r0
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fe36 	bl	800140c <bench_eccMakeKey>
    if (bench_all || (bench_asym_algs & BENCH_ECC)) {
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f4      	beq.n	8001790 <bench_ecc_curve+0x14>
        bench_ecc(0, curveId);
 80017a6:	4621      	mov	r1, r4
 80017a8:	2000      	movs	r0, #0
}
 80017aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bench_ecc(0, curveId);
 80017ae:	f7ff be99 	b.w	80014e4 <bench_ecc>
 80017b2:	bf00      	nop
 80017b4:	2000015c 	.word	0x2000015c
 80017b8:	2000000c 	.word	0x2000000c

080017bc <bench_curve25519KeyGen>:
#endif /* WOLFSSL_SM2 */
#endif /* HAVE_ECC */

#ifdef HAVE_CURVE25519
void bench_curve25519KeyGen(int useDeviceID)
{
 80017bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c0:	b09c      	sub	sp, #112	; 0x70
    double start;
    int    ret = 0, i, count;
    const char**desc = bench_desc_words[lng_index];

    /* Key Gen */
    bench_stats_start(&count, &start);
 80017c2:	a906      	add	r1, sp, #24
 80017c4:	a805      	add	r0, sp, #20
 80017c6:	f7fe fca7 	bl	8000118 <bench_stats_start>
            if (ret != 0) {
                printf("wc_curve25519_init_ex failed: %d\n", ret);
                break;
            }

            ret = wc_curve25519_make_key(&gRng, 32, &genKey);
 80017ca:	4e1e      	ldr	r6, [pc, #120]	; (8001844 <bench_curve25519KeyGen+0x88>)
            wc_curve25519_free(&genKey);
            if (ret != 0) {
                printf("wc_curve25519_make_key failed: %d\n", ret);
 80017cc:	4f1e      	ldr	r7, [pc, #120]	; (8001848 <bench_curve25519KeyGen+0x8c>)
                printf("wc_curve25519_init_ex failed: %d\n", ret);
 80017ce:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800184c <bench_curve25519KeyGen+0x90>
            ret = wc_curve25519_init_ex(&genKey, HEAP_HINT,
 80017d2:	f06f 0201 	mvn.w	r2, #1
 80017d6:	2100      	movs	r1, #0
 80017d8:	a809      	add	r0, sp, #36	; 0x24
 80017da:	f009 fc6b 	bl	800b0b4 <wc_curve25519_init_ex>
            if (ret != 0) {
 80017de:	4604      	mov	r4, r0
 80017e0:	b1f0      	cbz	r0, 8001820 <bench_curve25519KeyGen+0x64>
                printf("wc_curve25519_init_ex failed: %d\n", ret);
 80017e2:	4601      	mov	r1, r0
 80017e4:	4640      	mov	r0, r8
 80017e6:	f011 fdf9 	bl	80133dc <iprintf>
                break;
 80017ea:	4625      	mov	r5, r4
 80017ec:	2400      	movs	r4, #0
                break;
            }
        }
        count += i;
 80017ee:	9805      	ldr	r0, [sp, #20]
 80017f0:	4420      	add	r0, r4
 80017f2:	9005      	str	r0, [sp, #20]
    } while (bench_stats_check(start));
 80017f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80017f8:	f7fe fc98 	bl	800012c <bench_stats_check>
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d1e8      	bne.n	80017d2 <bench_curve25519KeyGen+0x16>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001804:	e9cd 2300 	strd	r2, r3, [sp]
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <bench_curve25519KeyGen+0x94>)
 800180a:	9502      	str	r5, [sp, #8]
 800180c:	9b05      	ldr	r3, [sp, #20]
 800180e:	6892      	ldr	r2, [r2, #8]
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <bench_curve25519KeyGen+0x98>)
 8001812:	f246 31af 	movw	r1, #25519	; 0x63af
 8001816:	f7fe fc9d 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    bench_stats_asym_finish("CURVE", 25519, desc[2], useDeviceID, count, start,
        ret);
}
 800181a:	b01c      	add	sp, #112	; 0x70
 800181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = wc_curve25519_make_key(&gRng, 32, &genKey);
 8001820:	aa09      	add	r2, sp, #36	; 0x24
 8001822:	2120      	movs	r1, #32
 8001824:	4630      	mov	r0, r6
 8001826:	f009 fbd9 	bl	800afdc <wc_curve25519_make_key>
 800182a:	4605      	mov	r5, r0
            wc_curve25519_free(&genKey);
 800182c:	a809      	add	r0, sp, #36	; 0x24
 800182e:	f009 fc53 	bl	800b0d8 <wc_curve25519_free>
            if (ret != 0) {
 8001832:	b125      	cbz	r5, 800183e <bench_curve25519KeyGen+0x82>
                printf("wc_curve25519_make_key failed: %d\n", ret);
 8001834:	4629      	mov	r1, r5
 8001836:	4638      	mov	r0, r7
 8001838:	f011 fdd0 	bl	80133dc <iprintf>
                break;
 800183c:	e7d7      	b.n	80017ee <bench_curve25519KeyGen+0x32>
        for (i = 0; i < genTimes; i++) {
 800183e:	2401      	movs	r4, #1
 8001840:	e7d5      	b.n	80017ee <bench_curve25519KeyGen+0x32>
 8001842:	bf00      	nop
 8001844:	20000188 	.word	0x20000188
 8001848:	08014925 	.word	0x08014925
 800184c:	08014903 	.word	0x08014903
 8001850:	20000010 	.word	0x20000010
 8001854:	08014948 	.word	0x08014948

08001858 <bench_curve25519KeyAgree>:

#ifdef HAVE_CURVE25519_SHARED_SECRET
void bench_curve25519KeyAgree(int useDeviceID)
{
 8001858:	b530      	push	{r4, r5, lr}
    curve25519_key genKey, genKey2;
    double start;
    int    ret, i, count;
    byte   shared[32];
    const char**desc = bench_desc_words[lng_index];
    word32 x = 0;
 800185a:	2400      	movs	r4, #0
{
 800185c:	b0b7      	sub	sp, #220	; 0xdc

    wc_curve25519_init_ex(&genKey,  HEAP_HINT,
 800185e:	f06f 0201 	mvn.w	r2, #1
 8001862:	4621      	mov	r1, r4
 8001864:	a810      	add	r0, sp, #64	; 0x40
    word32 x = 0;
 8001866:	9405      	str	r4, [sp, #20]
    wc_curve25519_init_ex(&genKey,  HEAP_HINT,
 8001868:	f009 fc24 	bl	800b0b4 <wc_curve25519_init_ex>
        useDeviceID ? devId : INVALID_DEVID);
    wc_curve25519_init_ex(&genKey2, HEAP_HINT,
 800186c:	f06f 0201 	mvn.w	r2, #1
 8001870:	4621      	mov	r1, r4
 8001872:	a823      	add	r0, sp, #140	; 0x8c
 8001874:	f009 fc1e 	bl	800b0b4 <wc_curve25519_init_ex>
        useDeviceID ? devId : INVALID_DEVID);

    ret = wc_curve25519_make_key(&gRng, 32, &genKey);
 8001878:	4827      	ldr	r0, [pc, #156]	; (8001918 <bench_curve25519KeyAgree+0xc0>)
 800187a:	aa10      	add	r2, sp, #64	; 0x40
 800187c:	2120      	movs	r1, #32
 800187e:	f009 fbad 	bl	800afdc <wc_curve25519_make_key>
    if (ret != 0) {
 8001882:	b120      	cbz	r0, 800188e <bench_curve25519KeyAgree+0x36>
        printf("curve25519_make_key failed\n");
 8001884:	4825      	ldr	r0, [pc, #148]	; (800191c <bench_curve25519KeyAgree+0xc4>)
 8001886:	f011 fda9 	bl	80133dc <iprintf>
    bench_stats_asym_finish("CURVE", 25519, desc[3], useDeviceID, count, start,
        ret);

    wc_curve25519_free(&genKey2);
    wc_curve25519_free(&genKey);
}
 800188a:	b037      	add	sp, #220	; 0xdc
 800188c:	bd30      	pop	{r4, r5, pc}
    ret = wc_curve25519_make_key(&gRng, 32, &genKey2);
 800188e:	2120      	movs	r1, #32
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <bench_curve25519KeyAgree+0xc0>)
 8001892:	aa23      	add	r2, sp, #140	; 0x8c
 8001894:	f009 fba2 	bl	800afdc <wc_curve25519_make_key>
    if (ret != 0) {
 8001898:	4601      	mov	r1, r0
 800189a:	b130      	cbz	r0, 80018aa <bench_curve25519KeyAgree+0x52>
        printf("curve25519_make_key failed: %d\n", ret);
 800189c:	4820      	ldr	r0, [pc, #128]	; (8001920 <bench_curve25519KeyAgree+0xc8>)
 800189e:	f011 fd9d 	bl	80133dc <iprintf>
    wc_curve25519_free(&genKey);
 80018a2:	a810      	add	r0, sp, #64	; 0x40
 80018a4:	f009 fc18 	bl	800b0d8 <wc_curve25519_free>
 80018a8:	e7ef      	b.n	800188a <bench_curve25519KeyAgree+0x32>
    bench_stats_start(&count, &start);
 80018aa:	a906      	add	r1, sp, #24
 80018ac:	a804      	add	r0, sp, #16
 80018ae:	f7fe fc33 	bl	8000118 <bench_stats_start>
            x = sizeof(shared);
 80018b2:	2520      	movs	r5, #32
            ret = wc_curve25519_shared_secret(&genKey, &genKey2, shared, &x);
 80018b4:	ab05      	add	r3, sp, #20
 80018b6:	aa08      	add	r2, sp, #32
 80018b8:	a923      	add	r1, sp, #140	; 0x8c
 80018ba:	a810      	add	r0, sp, #64	; 0x40
            x = sizeof(shared);
 80018bc:	9505      	str	r5, [sp, #20]
            ret = wc_curve25519_shared_secret(&genKey, &genKey2, shared, &x);
 80018be:	f009 fbf1 	bl	800b0a4 <wc_curve25519_shared_secret>
            if (ret != 0) {
 80018c2:	4604      	mov	r4, r0
 80018c4:	b940      	cbnz	r0, 80018d8 <bench_curve25519KeyAgree+0x80>
            ret = wc_curve25519_shared_secret(&genKey, &genKey2, shared, &x);
 80018c6:	ab05      	add	r3, sp, #20
 80018c8:	aa08      	add	r2, sp, #32
 80018ca:	a923      	add	r1, sp, #140	; 0x8c
 80018cc:	a810      	add	r0, sp, #64	; 0x40
            x = sizeof(shared);
 80018ce:	9505      	str	r5, [sp, #20]
            ret = wc_curve25519_shared_secret(&genKey, &genKey2, shared, &x);
 80018d0:	f009 fbe8 	bl	800b0a4 <wc_curve25519_shared_secret>
            if (ret != 0) {
 80018d4:	4604      	mov	r4, r0
 80018d6:	b1a0      	cbz	r0, 8001902 <bench_curve25519KeyAgree+0xaa>
                printf("curve25519_shared_secret failed: %d\n", ret);
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <bench_curve25519KeyAgree+0xcc>)
 80018da:	4621      	mov	r1, r4
 80018dc:	f011 fd7e 	bl	80133dc <iprintf>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 80018e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80018e4:	e9cd 2300 	strd	r2, r3, [sp]
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <bench_curve25519KeyAgree+0xd0>)
 80018ea:	9402      	str	r4, [sp, #8]
 80018ec:	9b04      	ldr	r3, [sp, #16]
 80018ee:	68d2      	ldr	r2, [r2, #12]
 80018f0:	480e      	ldr	r0, [pc, #56]	; (800192c <bench_curve25519KeyAgree+0xd4>)
 80018f2:	f246 31af 	movw	r1, #25519	; 0x63af
 80018f6:	f7fe fc2d 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    wc_curve25519_free(&genKey2);
 80018fa:	a823      	add	r0, sp, #140	; 0x8c
 80018fc:	f009 fbec 	bl	800b0d8 <wc_curve25519_free>
 8001900:	e7cf      	b.n	80018a2 <bench_curve25519KeyAgree+0x4a>
        count += i;
 8001902:	9b04      	ldr	r3, [sp, #16]
    } while (bench_stats_check(start));
 8001904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += i;
 8001908:	3302      	adds	r3, #2
 800190a:	9304      	str	r3, [sp, #16]
    } while (bench_stats_check(start));
 800190c:	f7fe fc0e 	bl	800012c <bench_stats_check>
 8001910:	4604      	mov	r4, r0
 8001912:	2800      	cmp	r0, #0
 8001914:	d1ce      	bne.n	80018b4 <bench_curve25519KeyAgree+0x5c>
exit:
 8001916:	e7e3      	b.n	80018e0 <bench_curve25519KeyAgree+0x88>
 8001918:	20000188 	.word	0x20000188
 800191c:	0801494e 	.word	0x0801494e
 8001920:	0801496a 	.word	0x0801496a
 8001924:	0801498a 	.word	0x0801498a
 8001928:	20000010 	.word	0x20000010
 800192c:	08014948 	.word	0x08014948

08001930 <bench_ed25519KeyGen>:
#endif /* HAVE_CURVE25519_SHARED_SECRET */
#endif /* HAVE_CURVE25519 */

#ifdef HAVE_ED25519
void bench_ed25519KeyGen(void)
{
 8001930:	b510      	push	{r4, lr}
 8001932:	b0a2      	sub	sp, #136	; 0x88
    double start;
    int    i, count;
    const char**desc = bench_desc_words[lng_index];

    /* Key Gen */
    bench_stats_start(&count, &start);
 8001934:	a906      	add	r1, sp, #24
 8001936:	a805      	add	r0, sp, #20
 8001938:	f7fe fbee 	bl	8000118 <bench_stats_start>
    do {
        for (i = 0; i < genTimes; i++) {
            wc_ed25519_init(&genKey);
            (void)wc_ed25519_make_key(&gRng, 32, &genKey);
 800193c:	4c11      	ldr	r4, [pc, #68]	; (8001984 <bench_ed25519KeyGen+0x54>)
            wc_ed25519_init(&genKey);
 800193e:	a808      	add	r0, sp, #32
 8001940:	f009 fe89 	bl	800b656 <wc_ed25519_init>
            (void)wc_ed25519_make_key(&gRng, 32, &genKey);
 8001944:	2120      	movs	r1, #32
 8001946:	aa08      	add	r2, sp, #32
 8001948:	4620      	mov	r0, r4
 800194a:	f009 fc4a 	bl	800b1e2 <wc_ed25519_make_key>
            wc_ed25519_free(&genKey);
 800194e:	a808      	add	r0, sp, #32
 8001950:	f009 fe86 	bl	800b660 <wc_ed25519_free>
        }
        count += i;
 8001954:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 8001956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        count += i;
 800195a:	3301      	adds	r3, #1
 800195c:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 800195e:	f7fe fbe5 	bl	800012c <bench_stats_check>
 8001962:	2800      	cmp	r0, #0
 8001964:	d1eb      	bne.n	800193e <bench_ed25519KeyGen+0xe>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800196a:	e9cd 2300 	strd	r2, r3, [sp]
 800196e:	4a06      	ldr	r2, [pc, #24]	; (8001988 <bench_ed25519KeyGen+0x58>)
 8001970:	9002      	str	r0, [sp, #8]
 8001972:	9b05      	ldr	r3, [sp, #20]
 8001974:	6892      	ldr	r2, [r2, #8]
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <bench_ed25519KeyGen+0x5c>)
 8001978:	f246 31af 	movw	r1, #25519	; 0x63af
 800197c:	f7fe fbea 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    bench_stats_asym_finish("ED", 25519, desc[2], 0, count, start, 0);
#endif /* HAVE_ED25519_MAKE_KEY */
}
 8001980:	b022      	add	sp, #136	; 0x88
 8001982:	bd10      	pop	{r4, pc}
 8001984:	20000188 	.word	0x20000188
 8001988:	20000010 	.word	0x20000010
 800198c:	080149af 	.word	0x080149af

08001990 <bench_ed25519KeySign>:


void bench_ed25519KeySign(void)
{
 8001990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001994:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
    byte   msg[512];
    word32 x = 0;
    const char**desc = bench_desc_words[lng_index];
#endif

    wc_ed25519_init(&genKey);
 8001998:	ad1a      	add	r5, sp, #104	; 0x68
    word32 x = 0;
 800199a:	2300      	movs	r3, #0
    wc_ed25519_init(&genKey);
 800199c:	4628      	mov	r0, r5
    word32 x = 0;
 800199e:	9306      	str	r3, [sp, #24]
    wc_ed25519_init(&genKey);
 80019a0:	f009 fe59 	bl	800b656 <wc_ed25519_init>

#ifdef HAVE_ED25519_MAKE_KEY
    ret = wc_ed25519_make_key(&gRng, ED25519_KEY_SIZE, &genKey);
 80019a4:	4845      	ldr	r0, [pc, #276]	; (8001abc <bench_ed25519KeySign+0x12c>)
 80019a6:	462a      	mov	r2, r5
 80019a8:	2120      	movs	r1, #32
 80019aa:	f009 fc1a 	bl	800b1e2 <wc_ed25519_make_key>
    if (ret != 0) {
 80019ae:	b130      	cbz	r0, 80019be <bench_ed25519KeySign+0x2e>
        printf("ed25519_make_key failed\n");
 80019b0:	4843      	ldr	r0, [pc, #268]	; (8001ac0 <bench_ed25519KeySign+0x130>)
 80019b2:	f011 fd13 	bl	80133dc <iprintf>
    bench_stats_asym_finish("ED", 25519, desc[5], 0, count, start, ret);
#endif /* HAVE_ED25519_VERIFY */
#endif /* HAVE_ED25519_SIGN */

    wc_ed25519_free(&genKey);
}
 80019b6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80019ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019be:	ab34      	add	r3, sp, #208	; 0xd0
 80019c0:	461e      	mov	r6, r3
        msg[i] = (byte)i;
 80019c2:	f803 0b01 	strb.w	r0, [r3], #1
    for (i = 0; i < (int)sizeof(msg); i++)
 80019c6:	3001      	adds	r0, #1
 80019c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80019cc:	d1f9      	bne.n	80019c2 <bench_ed25519KeySign+0x32>
    bench_stats_start(&count, &start);
 80019ce:	a908      	add	r1, sp, #32
 80019d0:	a805      	add	r0, sp, #20
 80019d2:	f7fe fba1 	bl	8000118 <bench_stats_start>
            x = sizeof(sig);
 80019d6:	2740      	movs	r7, #64	; 0x40
            ret = wc_ed25519_sign_msg(msg, sizeof(msg), sig, &x, &genKey);
 80019d8:	9500      	str	r5, [sp, #0]
 80019da:	ab06      	add	r3, sp, #24
 80019dc:	aa0a      	add	r2, sp, #40	; 0x28
 80019de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e2:	4630      	mov	r0, r6
            x = sizeof(sig);
 80019e4:	9706      	str	r7, [sp, #24]
            ret = wc_ed25519_sign_msg(msg, sizeof(msg), sig, &x, &genKey);
 80019e6:	f009 fd33 	bl	800b450 <wc_ed25519_sign_msg>
            if (ret != 0) {
 80019ea:	4604      	mov	r4, r0
 80019ec:	b958      	cbnz	r0, 8001a06 <bench_ed25519KeySign+0x76>
            ret = wc_ed25519_sign_msg(msg, sizeof(msg), sig, &x, &genKey);
 80019ee:	9500      	str	r5, [sp, #0]
 80019f0:	ab06      	add	r3, sp, #24
 80019f2:	aa0a      	add	r2, sp, #40	; 0x28
 80019f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f8:	4630      	mov	r0, r6
            x = sizeof(sig);
 80019fa:	9706      	str	r7, [sp, #24]
            ret = wc_ed25519_sign_msg(msg, sizeof(msg), sig, &x, &genKey);
 80019fc:	f009 fd28 	bl	800b450 <wc_ed25519_sign_msg>
            if (ret != 0) {
 8001a00:	4604      	mov	r4, r0
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d03e      	beq.n	8001a84 <bench_ed25519KeySign+0xf4>
                printf("ed25519_sign_msg failed\n");
 8001a06:	482f      	ldr	r0, [pc, #188]	; (8001ac4 <bench_ed25519KeySign+0x134>)
 8001a08:	f011 fce8 	bl	80133dc <iprintf>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001a0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    bench_stats_asym_finish("ED", 25519, desc[4], 0, count, start, ret);
 8001a10:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001ac8 <bench_ed25519KeySign+0x138>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001a14:	482d      	ldr	r0, [pc, #180]	; (8001acc <bench_ed25519KeySign+0x13c>)
 8001a16:	9402      	str	r4, [sp, #8]
 8001a18:	e9cd 2300 	strd	r2, r3, [sp]
 8001a1c:	f246 31af 	movw	r1, #25519	; 0x63af
 8001a20:	9b05      	ldr	r3, [sp, #20]
 8001a22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8001a26:	f7fe fb95 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    bench_stats_start(&count, &start);
 8001a2a:	a908      	add	r1, sp, #32
 8001a2c:	a805      	add	r0, sp, #20
 8001a2e:	f7fe fb73 	bl	8000118 <bench_stats_start>
            int verify = 0;
 8001a32:	af07      	add	r7, sp, #28
 8001a34:	f04f 0900 	mov.w	r9, #0
{
 8001a38:	f04f 0a02 	mov.w	sl, #2
            int verify = 0;
 8001a3c:	f8c7 9000 	str.w	r9, [r7]
            ret = wc_ed25519_verify_msg(sig, x, msg, sizeof(msg), &verify,
 8001a40:	9906      	ldr	r1, [sp, #24]
 8001a42:	e9cd 7500 	strd	r7, r5, [sp]
 8001a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4a:	4632      	mov	r2, r6
 8001a4c:	a80a      	add	r0, sp, #40	; 0x28
 8001a4e:	f009 fde3 	bl	800b618 <wc_ed25519_verify_msg>
            if (ret != 0 || verify != 1) {
 8001a52:	4604      	mov	r4, r0
 8001a54:	b910      	cbnz	r0, 8001a5c <bench_ed25519KeySign+0xcc>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d020      	beq.n	8001a9e <bench_ed25519KeySign+0x10e>
                printf("ed25519_verify_msg failed\n");
 8001a5c:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <bench_ed25519KeySign+0x140>)
 8001a5e:	f011 fcbd 	bl	80133dc <iprintf>
    bench_stats_asym_finish_ex(algo, strength, desc, "", useDeviceID, count,
 8001a62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001a66:	4819      	ldr	r0, [pc, #100]	; (8001acc <bench_ed25519KeySign+0x13c>)
 8001a68:	9402      	str	r4, [sp, #8]
 8001a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a6e:	f246 31af 	movw	r1, #25519	; 0x63af
 8001a72:	9b05      	ldr	r3, [sp, #20]
 8001a74:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8001a78:	f7fe fb6c 	bl	8000154 <bench_stats_asym_finish_ex.constprop.0>
    wc_ed25519_free(&genKey);
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f009 fdef 	bl	800b660 <wc_ed25519_free>
 8001a82:	e798      	b.n	80019b6 <bench_ed25519KeySign+0x26>
        count += i;
 8001a84:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 8001a86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
        count += i;
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 8001a8e:	f7fe fb4d 	bl	800012c <bench_stats_check>
 8001a92:	4604      	mov	r4, r0
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d19f      	bne.n	80019d8 <bench_ed25519KeySign+0x48>
exit_ed_sign:
 8001a98:	e7b8      	b.n	8001a0c <bench_ed25519KeySign+0x7c>
 8001a9a:	469a      	mov	sl, r3
 8001a9c:	e7ce      	b.n	8001a3c <bench_ed25519KeySign+0xac>
        for (i = 0; i < agreeTimes; i++) {
 8001a9e:	f1ba 0f01 	cmp.w	sl, #1
 8001aa2:	d1fa      	bne.n	8001a9a <bench_ed25519KeySign+0x10a>
        count += i;
 8001aa4:	9b05      	ldr	r3, [sp, #20]
    } while (bench_stats_check(start));
 8001aa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
        count += i;
 8001aaa:	3302      	adds	r3, #2
 8001aac:	9305      	str	r3, [sp, #20]
    } while (bench_stats_check(start));
 8001aae:	f7fe fb3d 	bl	800012c <bench_stats_check>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1bf      	bne.n	8001a38 <bench_ed25519KeySign+0xa8>
exit_ed_verify:
 8001ab8:	e7d3      	b.n	8001a62 <bench_ed25519KeySign+0xd2>
 8001aba:	bf00      	nop
 8001abc:	20000188 	.word	0x20000188
 8001ac0:	080149b2 	.word	0x080149b2
 8001ac4:	080149cb 	.word	0x080149cb
 8001ac8:	20000010 	.word	0x20000010
 8001acc:	080149af 	.word	0x080149af
 8001ad0:	080149e4 	.word	0x080149e4

08001ad4 <benchmark_test>:
{
 8001ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ret = benchmark_init();
 8001ad8:	f7fe ff90 	bl	80009fc <benchmark_init>
 8001adc:	4601      	mov	r1, r0
    if (ret != 0)
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	f040 8192 	bne.w	8001e08 <benchmark_test+0x334>
        rngRet = wc_InitRng_ex(&gRng, HEAP_HINT, devId);
 8001ae4:	488f      	ldr	r0, [pc, #572]	; (8001d24 <benchmark_test+0x250>)
 8001ae6:	f06f 0201 	mvn.w	r2, #1
 8001aea:	f005 fb29 	bl	8007140 <wc_InitRng_ex>
        if (rngRet < 0) {
 8001aee:	2800      	cmp	r0, #0
 8001af0:	da0b      	bge.n	8001b0a <benchmark_test+0x36>
            printf("%sInitRNG failed\n", err_prefix);
 8001af2:	498d      	ldr	r1, [pc, #564]	; (8001d28 <benchmark_test+0x254>)
 8001af4:	488d      	ldr	r0, [pc, #564]	; (8001d2c <benchmark_test+0x258>)
 8001af6:	f011 fc71 	bl	80133dc <iprintf>
    printf("%sBenchmark complete\n", info_prefix);
 8001afa:	498d      	ldr	r1, [pc, #564]	; (8001d30 <benchmark_test+0x25c>)
 8001afc:	488d      	ldr	r0, [pc, #564]	; (8001d34 <benchmark_test+0x260>)
 8001afe:	f011 fc6d 	bl	80133dc <iprintf>
}
 8001b02:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ret = benchmark_free();
 8001b06:	f7fe bfeb 	b.w	8000ae0 <benchmark_free>
    bench_buf_size = (int)bench_size + BENCH_CIPHER_ADD;
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <benchmark_test+0x264>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f103 0410 	add.w	r4, r3, #16
    if (bench_buf_size % 16)
 8001b12:	f013 030f 	ands.w	r3, r3, #15
 8001b16:	d007      	beq.n	8001b28 <benchmark_test+0x54>
        bench_buf_size += 16 - (bench_buf_size % 16);
 8001b18:	4262      	negs	r2, r4
 8001b1a:	f002 020f 	and.w	r2, r2, #15
 8001b1e:	bf58      	it	pl
 8001b20:	4253      	negpl	r3, r2
 8001b22:	f1c3 0310 	rsb	r3, r3, #16
 8001b26:	441c      	add	r4, r3
    bench_plain = (byte*)XMALLOC((size_t)bench_buf_size + 16,
 8001b28:	f104 0510 	add.w	r5, r4, #16
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f011 fb37 	bl	80131a0 <malloc>
 8001b32:	4f82      	ldr	r7, [pc, #520]	; (8001d3c <benchmark_test+0x268>)
    bench_cipher = (byte*)XMALLOC((size_t)bench_buf_size + 16,
 8001b34:	4e82      	ldr	r6, [pc, #520]	; (8001d40 <benchmark_test+0x26c>)
    bench_plain = (byte*)XMALLOC((size_t)bench_buf_size + 16,
 8001b36:	6038      	str	r0, [r7, #0]
    bench_cipher = (byte*)XMALLOC((size_t)bench_buf_size + 16,
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f011 fb31 	bl	80131a0 <malloc>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6030      	str	r0, [r6, #0]
    if (bench_plain == NULL || bench_cipher == NULL) {
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	b110      	cbz	r0, 8001b4c <benchmark_test+0x78>
 8001b46:	b9c3      	cbnz	r3, 8001b7a <benchmark_test+0xa6>
        XFREE(bench_plain, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
 8001b48:	f011 fb32 	bl	80131b0 <free>
        XFREE(bench_cipher, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
 8001b4c:	6830      	ldr	r0, [r6, #0]
 8001b4e:	b108      	cbz	r0, 8001b54 <benchmark_test+0x80>
 8001b50:	f011 fb2e 	bl	80131b0 <free>
        bench_plain = bench_cipher = NULL;
 8001b54:	2300      	movs	r3, #0
        printf("%sBenchmark block buffer alloc failed!\n", err_prefix);
 8001b56:	4974      	ldr	r1, [pc, #464]	; (8001d28 <benchmark_test+0x254>)
 8001b58:	487a      	ldr	r0, [pc, #488]	; (8001d44 <benchmark_test+0x270>)
        bench_plain = bench_cipher = NULL;
 8001b5a:	6033      	str	r3, [r6, #0]
 8001b5c:	603b      	str	r3, [r7, #0]
        printf("%sBenchmark block buffer alloc failed!\n", err_prefix);
 8001b5e:	f011 fc3d 	bl	80133dc <iprintf>
    XFREE(bench_plain, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	b108      	cbz	r0, 8001b6a <benchmark_test+0x96>
 8001b66:	f011 fb23 	bl	80131b0 <free>
    XFREE(bench_cipher, HEAP_HINT, DYNAMIC_TYPE_WOLF_BIGINT);
 8001b6a:	6830      	ldr	r0, [r6, #0]
 8001b6c:	b108      	cbz	r0, 8001b72 <benchmark_test+0x9e>
 8001b6e:	f011 fb1f 	bl	80131b0 <free>
    wc_FreeRng(&gRng);
 8001b72:	486c      	ldr	r0, [pc, #432]	; (8001d24 <benchmark_test+0x250>)
 8001b74:	f005 fb00 	bl	8007178 <wc_FreeRng>
    return NULL;
 8001b78:	e7bf      	b.n	8001afa <benchmark_test+0x26>
    XMEMSET(bench_plain, 0, (size_t)bench_buf_size);
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f011 fb47 	bl	8013210 <memset>
    XMEMSET(bench_cipher, 0, (size_t)bench_buf_size);
 8001b82:	4622      	mov	r2, r4
 8001b84:	6830      	ldr	r0, [r6, #0]
    if (bench_all || (bench_other_algs & BENCH_RNG))
 8001b86:	4c70      	ldr	r4, [pc, #448]	; (8001d48 <benchmark_test+0x274>)
    XMEMSET(bench_cipher, 0, (size_t)bench_buf_size);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f011 fb41 	bl	8013210 <memset>
    bench_key = (byte*)bench_key_buf;
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <benchmark_test+0x278>)
 8001b90:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <benchmark_test+0x27c>)
 8001b92:	601a      	str	r2, [r3, #0]
    bench_iv = (byte*)bench_iv_buf;
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <benchmark_test+0x280>)
 8001b96:	4a70      	ldr	r2, [pc, #448]	; (8001d58 <benchmark_test+0x284>)
 8001b98:	601a      	str	r2, [r3, #0]
    if (bench_all || (bench_other_algs & BENCH_RNG))
 8001b9a:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <benchmark_test+0x288>)
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	d13c      	bne.n	8001c22 <benchmark_test+0x14e>
    if (bench_all || (bench_cipher_algs & BENCH_AES_CBC)) {
 8001ba8:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <benchmark_test+0x28c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	07da      	lsls	r2, r3, #31
 8001bae:	d43d      	bmi.n	8001c2c <benchmark_test+0x158>
    if (bench_all || (bench_cipher_algs & BENCH_AES_GCM)) {
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <benchmark_test+0x28c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	079b      	lsls	r3, r3, #30
 8001bb6:	d43f      	bmi.n	8001c38 <benchmark_test+0x164>
    if (bench_all || (bench_cipher_algs & BENCH_DES)) {
 8001bb8:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <benchmark_test+0x28c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	045d      	lsls	r5, r3, #17
 8001bbe:	d44d      	bmi.n	8001c5c <benchmark_test+0x188>
    if (bench_all || (bench_digest_algs & BENCH_SHA)) {
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <benchmark_test+0x290>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	075a      	lsls	r2, r3, #29
 8001bc6:	d44f      	bmi.n	8001c68 <benchmark_test+0x194>
    if (bench_all || (bench_digest_algs & BENCH_SHA256)) {
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <benchmark_test+0x290>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	069b      	lsls	r3, r3, #26
 8001bce:	d451      	bmi.n	8001c74 <benchmark_test+0x1a0>
    if (bench_all || (bench_digest_algs & BENCH_SHA512)) {
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <benchmark_test+0x290>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	061d      	lsls	r5, r3, #24
 8001bd6:	d453      	bmi.n	8001c80 <benchmark_test+0x1ac>
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA)) {
 8001bd8:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <benchmark_test+0x294>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	075a      	lsls	r2, r3, #29
 8001bde:	d467      	bmi.n	8001cb0 <benchmark_test+0x1dc>
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA256)) {
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <benchmark_test+0x294>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	069b      	lsls	r3, r3, #26
 8001be6:	d469      	bmi.n	8001cbc <benchmark_test+0x1e8>
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA512)) {
 8001be8:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <benchmark_test+0x294>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	061d      	lsls	r5, r3, #24
 8001bee:	d46b      	bmi.n	8001cc8 <benchmark_test+0x1f4>
            (bench_asym_algs & BENCH_ECC_ALL) ||
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <benchmark_test+0x298>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f413 4f70 	tst.w	r3, #61440	; 0xf000
 8001bf8:	d16c      	bne.n	8001cd4 <benchmark_test+0x200>
    if (bench_all || (bench_asym_algs & BENCH_CURVE25519_KEYGEN)) {
 8001bfa:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <benchmark_test+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	03d9      	lsls	r1, r3, #15
 8001c00:	f100 80e2 	bmi.w	8001dc8 <benchmark_test+0x2f4>
    if (bench_all || (bench_asym_algs & BENCH_CURVE25519_KA)) {
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <benchmark_test+0x298>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0399      	lsls	r1, r3, #14
 8001c0a:	f100 80e4 	bmi.w	8001dd6 <benchmark_test+0x302>
    if (bench_all || (bench_asym_algs & BENCH_ED25519_KEYGEN))
 8001c0e:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <benchmark_test+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	035a      	lsls	r2, r3, #13
 8001c14:	f100 80e6 	bmi.w	8001de4 <benchmark_test+0x310>
    if (bench_all || (bench_asym_algs & BENCH_ED25519_SIGN))
 8001c18:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <benchmark_test+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	031b      	lsls	r3, r3, #12
 8001c1e:	d5a0      	bpl.n	8001b62 <benchmark_test+0x8e>
 8001c20:	e0e6      	b.n	8001df0 <benchmark_test+0x31c>
        bench_rng();
 8001c22:	f7fe ff6d 	bl	8000b00 <bench_rng>
    if (bench_all || (bench_cipher_algs & BENCH_AES_CBC)) {
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0bd      	beq.n	8001ba8 <benchmark_test+0xd4>
        bench_aescbc(0);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7fe ffc3 	bl	8000bb8 <bench_aescbc>
    if (bench_all || (bench_cipher_algs & BENCH_AES_GCM)) {
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0bb      	beq.n	8001bb0 <benchmark_test+0xdc>
        word32 aesAuthAddSz_orig = aesAuthAddSz;
 8001c38:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8001d70 <benchmark_test+0x29c>
        word32 options = aes_aad_options;
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <benchmark_test+0x2a0>)
        word32 aesAuthAddSz_orig = aesAuthAddSz;
 8001c3e:	f8d8 9000 	ldr.w	r9, [r8]
        word32 options = aes_aad_options;
 8001c42:	681d      	ldr	r5, [r3, #0]
                aesAuthAddSz = aes_aad_size;
 8001c44:	f8df a130 	ldr.w	sl, [pc, #304]	; 8001d78 <benchmark_test+0x2a4>
                aesAuthAddSz = AES_AUTH_ADD_SZ;
 8001c48:	f04f 0b0d 	mov.w	fp, #13
        while(options) {
 8001c4c:	2d00      	cmp	r5, #0
 8001c4e:	d14c      	bne.n	8001cea <benchmark_test+0x216>
        bench_gmac(0);
 8001c50:	4628      	mov	r0, r5
 8001c52:	f7fe ffe5 	bl	8000c20 <bench_gmac>
    if (bench_all || (bench_cipher_algs & BENCH_DES)) {
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ad      	beq.n	8001bb8 <benchmark_test+0xe4>
        bench_des(0);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff f83b 	bl	8000cd8 <bench_des>
    if (bench_all || (bench_digest_algs & BENCH_SHA)) {
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ab      	beq.n	8001bc0 <benchmark_test+0xec>
        bench_sha(0);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff f89d 	bl	8000da8 <bench_sha>
    if (bench_all || (bench_digest_algs & BENCH_SHA256)) {
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0a9      	beq.n	8001bc8 <benchmark_test+0xf4>
        bench_sha256(0);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff f931 	bl	8000edc <bench_sha256>
    if (bench_all || (bench_digest_algs & BENCH_SHA512)) {
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0a7      	beq.n	8001bd0 <benchmark_test+0xfc>
        bench_sha512(0);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff f9c5 	bl	8001010 <bench_sha512>
    if (bench_all || (bench_digest_algs & BENCH_SHA512)) {
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	b91b      	cbnz	r3, 8001c92 <benchmark_test+0x1be>
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <benchmark_test+0x290>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0618      	lsls	r0, r3, #24
 8001c90:	d5a2      	bpl.n	8001bd8 <benchmark_test+0x104>
        bench_sha512_224(0);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fa56 	bl	8001144 <bench_sha512_224>
    if (bench_all || (bench_digest_algs & BENCH_SHA512)) {
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	b91b      	cbnz	r3, 8001ca4 <benchmark_test+0x1d0>
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <benchmark_test+0x290>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0619      	lsls	r1, r3, #24
 8001ca2:	d599      	bpl.n	8001bd8 <benchmark_test+0x104>
        bench_sha512_256(0);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fae7 	bl	8001278 <bench_sha512_256>
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA)) {
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d093      	beq.n	8001bd8 <benchmark_test+0x104>
            bench_hmac_sha(0);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fb7b 	bl	80013ac <bench_hmac_sha>
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA256)) {
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d091      	beq.n	8001be0 <benchmark_test+0x10c>
            bench_hmac_sha256(0);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fb85 	bl	80013cc <bench_hmac_sha256>
        if (bench_all || (bench_mac_algs & BENCH_HMAC_SHA512)) {
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d08f      	beq.n	8001be8 <benchmark_test+0x114>
            bench_hmac_sha512(0);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fb8f 	bl	80013ec <bench_hmac_sha512>
    if (bench_all || (bench_asym_algs & BENCH_ECC_MAKEKEY) ||
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d08d      	beq.n	8001bf0 <benchmark_test+0x11c>
        if (bench_asym_algs & BENCH_ECC_ALL) {
 8001cd4:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <benchmark_test+0x298>)
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	0418      	lsls	r0, r3, #16
 8001cda:	d44f      	bmi.n	8001d7c <benchmark_test+0x2a8>
        else if (bench_asym_algs & BENCH_ECC_P256) {
 8001cdc:	01da      	lsls	r2, r3, #7
 8001cde:	f140 808a 	bpl.w	8001df6 <benchmark_test+0x322>
            bench_ecc_curve((int)ECC_SECP256R1);
 8001ce2:	2007      	movs	r0, #7
            bench_ecc_curve((int)ECC_SECP521R1);
 8001ce4:	f7ff fd4a 	bl	800177c <bench_ecc_curve>
 8001ce8:	e06a      	b.n	8001dc0 <benchmark_test+0x2ec>
            if (options & AAD_SIZE_DEFAULT) {
 8001cea:	f015 0301 	ands.w	r3, r5, #1
 8001cee:	d009      	beq.n	8001d04 <benchmark_test+0x230>
                aesAuthAddSz = AES_AUTH_ADD_SZ;
 8001cf0:	f8c8 b000 	str.w	fp, [r8]
                options &= ~(word32)AAD_SIZE_DEFAULT;
 8001cf4:	f025 0501 	bic.w	r5, r5, #1
            fn(i);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe fd6d 	bl	80007d8 <bench_aesgcm>
            aesAuthAddSz = aesAuthAddSz_orig;
 8001cfe:	f8c8 9000 	str.w	r9, [r8]
 8001d02:	e7a3      	b.n	8001c4c <benchmark_test+0x178>
            else if (options & AAD_SIZE_ZERO) {
 8001d04:	07a8      	lsls	r0, r5, #30
 8001d06:	d504      	bpl.n	8001d12 <benchmark_test+0x23e>
                aesAuthAddSz = 0;
 8001d08:	f8c8 3000 	str.w	r3, [r8]
                options &= ~(word32)AAD_SIZE_ZERO;
 8001d0c:	f025 0502 	bic.w	r5, r5, #2
 8001d10:	e7f2      	b.n	8001cf8 <benchmark_test+0x224>
            else if (options & AAD_SIZE_CUSTOM) {
 8001d12:	0769      	lsls	r1, r5, #29
                aesAuthAddSz = aes_aad_size;
 8001d14:	bf42      	ittt	mi
 8001d16:	f8da 3000 	ldrmi.w	r3, [sl]
 8001d1a:	f8c8 3000 	strmi.w	r3, [r8]
                options &= ~(word32)AAD_SIZE_CUSTOM;
 8001d1e:	f025 0504 	bicmi.w	r5, r5, #4
 8001d22:	e7e9      	b.n	8001cf8 <benchmark_test+0x224>
 8001d24:	20000188 	.word	0x20000188
 8001d28:	08014d88 	.word	0x08014d88
 8001d2c:	080149ff 	.word	0x080149ff
 8001d30:	08014d89 	.word	0x08014d89
 8001d34:	08014a4d 	.word	0x08014a4d
 8001d38:	200000d0 	.word	0x200000d0
 8001d3c:	2000017c 	.word	0x2000017c
 8001d40:	20000160 	.word	0x20000160
 8001d44:	08014a11 	.word	0x08014a11
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000170 	.word	0x20000170
 8001d50:	08014d48 	.word	0x08014d48
 8001d54:	2000016c 	.word	0x2000016c
 8001d58:	08014d30 	.word	0x08014d30
 8001d5c:	20000178 	.word	0x20000178
 8001d60:	20000164 	.word	0x20000164
 8001d64:	20000168 	.word	0x20000168
 8001d68:	20000174 	.word	0x20000174
 8001d6c:	2000015c 	.word	0x2000015c
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20000154 	.word	0x20000154
            if (csv_format != 1) {
 8001d7c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001e0c <benchmark_test+0x338>
            bench_asym_algs |= BENCH_ECC_MAKEKEY | BENCH_ECC |
 8001d80:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001d84:	6013      	str	r3, [r2, #0]
            if (csv_format != 1) {
 8001d86:	f8d8 3000 	ldr.w	r3, [r8]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d003      	beq.n	8001d96 <benchmark_test+0x2c2>
                printf("\n%sECC Benchmarks:\n", info_prefix);
 8001d8e:	4920      	ldr	r1, [pc, #128]	; (8001e10 <benchmark_test+0x33c>)
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <benchmark_test+0x340>)
 8001d92:	f011 fb23 	bl	80133dc <iprintf>
                        printf("\n");
 8001d96:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001e18 <benchmark_test+0x344>
{
 8001d9a:	2501      	movs	r5, #1
                if (wc_ecc_get_curve_size_from_id(curveId) !=
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f003 fc73 	bl	8005688 <wc_ecc_get_curve_size_from_id>
 8001da2:	30aa      	adds	r0, #170	; 0xaa
 8001da4:	d009      	beq.n	8001dba <benchmark_test+0x2e6>
                    bench_ecc_curve(curveId);
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fce8 	bl	800177c <bench_ecc_curve>
                    if (csv_format != 1) {
 8001dac:	f8d8 3000 	ldr.w	r3, [r8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d002      	beq.n	8001dba <benchmark_test+0x2e6>
                        printf("\n");
 8001db4:	4648      	mov	r0, r9
 8001db6:	f011 fb11 	bl	80133dc <iprintf>
                curveId++;
 8001dba:	3501      	adds	r5, #1
            } while (curveId != (int)ECC_CURVE_MAX);
 8001dbc:	2d1e      	cmp	r5, #30
 8001dbe:	d1ed      	bne.n	8001d9c <benchmark_test+0x2c8>
    if (bench_all || (bench_asym_algs & BENCH_CURVE25519_KEYGEN)) {
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f43f af19 	beq.w	8001bfa <benchmark_test+0x126>
        bench_curve25519KeyGen(0);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff fcf7 	bl	80017bc <bench_curve25519KeyGen>
    if (bench_all || (bench_asym_algs & BENCH_CURVE25519_KA)) {
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f43f af17 	beq.w	8001c04 <benchmark_test+0x130>
        bench_curve25519KeyAgree(0);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff fd3e 	bl	8001858 <bench_curve25519KeyAgree>
    if (bench_all || (bench_asym_algs & BENCH_ED25519_KEYGEN))
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f43f af15 	beq.w	8001c0e <benchmark_test+0x13a>
        bench_ed25519KeyGen();
 8001de4:	f7ff fda4 	bl	8001930 <bench_ed25519KeyGen>
    if (bench_all || (bench_asym_algs & BENCH_ED25519_SIGN))
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f43f af14 	beq.w	8001c18 <benchmark_test+0x144>
        bench_ed25519KeySign();
 8001df0:	f7ff fdce 	bl	8001990 <bench_ed25519KeySign>
 8001df4:	e6b5      	b.n	8001b62 <benchmark_test+0x8e>
        else if (bench_asym_algs & BENCH_ECC_P384) {
 8001df6:	019d      	lsls	r5, r3, #6
 8001df8:	d501      	bpl.n	8001dfe <benchmark_test+0x32a>
            bench_ecc_curve((int)ECC_SECP384R1);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	e772      	b.n	8001ce4 <benchmark_test+0x210>
        else if (bench_asym_algs & BENCH_ECC_P521) {
 8001dfe:	0158      	lsls	r0, r3, #5
 8001e00:	f57f af6f 	bpl.w	8001ce2 <benchmark_test+0x20e>
            bench_ecc_curve((int)ECC_SECP521R1);
 8001e04:	2010      	movs	r0, #16
 8001e06:	e76d      	b.n	8001ce4 <benchmark_test+0x210>
}
 8001e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e0c:	20000180 	.word	0x20000180
 8001e10:	08014d89 	.word	0x08014d89
 8001e14:	08014a39 	.word	0x08014a39
 8001e18:	08014a37 	.word	0x08014a37

08001e1c <ByteReverseWord32>:
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    return rotlFixed(value, 16U);
#endif
}
 8001e1c:	ba00      	rev	r0, r0
 8001e1e:	4770      	bx	lr

08001e20 <xorbufout>:
/* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
counts, placing the result in <*buf>. */

WC_MISC_STATIC WC_INLINE void xorbufout(void* out, const void* buf,
                                        const void* mask, word32 count)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = (byte*)out;
    b = (const byte*)buf;
    m = (const byte*)mask;


    if (((wc_ptr_t)o) % WOLFSSL_WORD_SIZE ==
 8001e22:	ea80 0401 	eor.w	r4, r0, r1
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE &&
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8001e26:	ea82 0501 	eor.w	r5, r2, r1
 8001e2a:	432c      	orrs	r4, r5
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE &&
 8001e2c:	f014 0403 	ands.w	r4, r4, #3
 8001e30:	d10d      	bne.n	8001e4e <xorbufout+0x2e>
            const wolfssl_word* wp;
        } tpb, tpm;
        /* Alignment checks out. Possible to XOR words. */
        /* Move alignment so that it lines up with a
         * WOLFSSL_WORD_SIZE boundary */
        while (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8001e32:	078d      	lsls	r5, r1, #30
 8001e34:	d000      	beq.n	8001e38 <xorbufout+0x18>
 8001e36:	b973      	cbnz	r3, 8001e56 <xorbufout+0x36>
            count--;
        }
        tpo.bp = o;
        tpb.bp = b;
        tpm.bp = m;
        XorWordsOut( &tpo.wp, &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
 8001e38:	089d      	lsrs	r5, r3, #2
    for (i = 0; i < n; i++)
 8001e3a:	42a5      	cmp	r5, r4
 8001e3c:	d114      	bne.n	8001e68 <xorbufout+0x48>
 8001e3e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8001e42:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8001e46:	eb02 0285 	add.w	r2, r2, r5, lsl #2
        o = tpo.bp;
        b = tpb.bp;
        m = tpm.bp;
        count %= WOLFSSL_WORD_SIZE;
 8001e4a:	f003 0303 	and.w	r3, r3, #3
    }

    for (i = 0; i < count; i++)
 8001e4e:	2400      	movs	r4, #0
 8001e50:	42a3      	cmp	r3, r4
 8001e52:	d112      	bne.n	8001e7a <xorbufout+0x5a>
        o[i] = (byte)(b[i] ^ m[i]);
}
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(o++) = (byte)(*(b++) ^ *(m++));
 8001e56:	f811 5b01 	ldrb.w	r5, [r1], #1
 8001e5a:	f812 6b01 	ldrb.w	r6, [r2], #1
 8001e5e:	4075      	eors	r5, r6
 8001e60:	f800 5b01 	strb.w	r5, [r0], #1
            count--;
 8001e64:	3b01      	subs	r3, #1
 8001e66:	e7e4      	b.n	8001e32 <xorbufout+0x12>
        *((*r)++) = *((*a)++) ^ *((*b)++);
 8001e68:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 8001e6c:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001e70:	407e      	eors	r6, r7
 8001e72:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
    for (i = 0; i < n; i++)
 8001e76:	3401      	adds	r4, #1
 8001e78:	e7df      	b.n	8001e3a <xorbufout+0x1a>
        o[i] = (byte)(b[i] ^ m[i]);
 8001e7a:	5d0d      	ldrb	r5, [r1, r4]
 8001e7c:	5d16      	ldrb	r6, [r2, r4]
 8001e7e:	4075      	eors	r5, r6
 8001e80:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < count; i++)
 8001e82:	3401      	adds	r4, #1
 8001e84:	e7e4      	b.n	8001e50 <xorbufout+0x30>

08001e86 <xorbuf>:
    const byte* m;

    b = (byte*)buf;
    m = (const byte*)mask;

    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8001e86:	ea81 0300 	eor.w	r3, r1, r0
 8001e8a:	079b      	lsls	r3, r3, #30
{
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8001e8e:	d10c      	bne.n	8001eaa <xorbuf+0x24>
            const wolfssl_word* wp;
        } tpm;
        /* Alignment checks out. Possible to XOR words. */
        /* Move alignment so that it lines up with a
         * WOLFSSL_WORD_SIZE boundary */
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8001e90:	f000 0403 	and.w	r4, r0, #3
 8001e94:	b104      	cbz	r4, 8001e98 <xorbuf+0x12>
 8001e96:	b96a      	cbnz	r2, 8001eb4 <xorbuf+0x2e>
    for (i = 0; i < n; i++)
 8001e98:	f022 0503 	bic.w	r5, r2, #3
 8001e9c:	194e      	adds	r6, r1, r5
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	42b1      	cmp	r1, r6
 8001ea2:	d110      	bne.n	8001ec6 <xorbuf+0x40>
 8001ea4:	4428      	add	r0, r5
        tpb.bp = b;
        tpm.bp = m;
        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
        b = tpb.bp;
        m = tpm.bp;
        count %= WOLFSSL_WORD_SIZE;
 8001ea6:	f002 0203 	and.w	r2, r2, #3
    }

    for (i = 0; i < count; i++)
 8001eaa:	3901      	subs	r1, #1
 8001eac:	4402      	add	r2, r0
 8001eae:	4290      	cmp	r0, r2
 8001eb0:	d111      	bne.n	8001ed6 <xorbuf+0x50>
        b[i] ^= m[i];
}
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(b++) ^= *(m++);
 8001eb4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001eb8:	f811 5b01 	ldrb.w	r5, [r1], #1
 8001ebc:	406b      	eors	r3, r5
 8001ebe:	f800 3c01 	strb.w	r3, [r0, #-1]
            count--;
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	e7e6      	b.n	8001e94 <xorbuf+0xe>
        *((*r)++) ^= *((*a)++);
 8001ec6:	f853 4b04 	ldr.w	r4, [r3], #4
 8001eca:	f851 7b04 	ldr.w	r7, [r1], #4
 8001ece:	407c      	eors	r4, r7
 8001ed0:	f843 4c04 	str.w	r4, [r3, #-4]
    for (i = 0; i < n; i++)
 8001ed4:	e7e4      	b.n	8001ea0 <xorbuf+0x1a>
        b[i] ^= m[i];
 8001ed6:	7803      	ldrb	r3, [r0, #0]
 8001ed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001edc:	4063      	eors	r3, r4
 8001ede:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; i < count; i++)
 8001ee2:	e7e4      	b.n	8001eae <xorbuf+0x28>

08001ee4 <IncrementGcmCounter>:
static WC_INLINE void IncrementGcmCounter(byte* inOutCtr)
{
    int i;

    /* in network byte order so start at end and work back */
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 8001ee4:	f100 0210 	add.w	r2, r0, #16
 8001ee8:	300c      	adds	r0, #12
        if (++inOutCtr[i])  /* we're done unless we overflow */
 8001eea:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	7013      	strb	r3, [r2, #0]
 8001ef4:	b90b      	cbnz	r3, 8001efa <IncrementGcmCounter+0x16>
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 8001ef6:	4282      	cmp	r2, r0
 8001ef8:	d1f7      	bne.n	8001eea <IncrementGcmCounter+0x6>
            return;
    }
}
 8001efa:	4770      	bx	lr

08001efc <wc_AesEncrypt>:
{
 8001efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f00:	460d      	mov	r5, r1
 8001f02:	4690      	mov	r8, r2
    if (aes == NULL) {
 8001f04:	4604      	mov	r4, r0
 8001f06:	2800      	cmp	r0, #0
 8001f08:	f000 872d 	beq.w	8002d66 <wc_AesEncrypt+0xe6a>
    r = aes->rounds >> 1;
 8001f0c:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
 8001f10:	087f      	lsrs	r7, r7, #1
    if (r > 7 || r == 0) {
 8001f12:	1e7b      	subs	r3, r7, #1
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	f200 8729 	bhi.w	8002d6c <wc_AesEncrypt+0xe70>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4668      	mov	r0, sp
 8001f1e:	f011 f94f 	bl	80131c0 <memcpy>
    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
 8001f22:	2204      	movs	r2, #4
 8001f24:	18a9      	adds	r1, r5, r2
 8001f26:	eb0d 0002 	add.w	r0, sp, r2
 8001f2a:	f011 f949 	bl	80131c0 <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 8001f2e:	f105 0108 	add.w	r1, r5, #8
 8001f32:	2204      	movs	r2, #4
 8001f34:	a802      	add	r0, sp, #8
 8001f36:	f011 f943 	bl	80131c0 <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 8001f3a:	f105 010c 	add.w	r1, r5, #12
 8001f3e:	2204      	movs	r2, #4
 8001f40:	a803      	add	r0, sp, #12
 8001f42:	f011 f93d 	bl	80131c0 <memcpy>
    s0 = ByteReverseWord32(s0);
 8001f46:	9800      	ldr	r0, [sp, #0]
 8001f48:	f7ff ff68 	bl	8001e1c <ByteReverseWord32>
 8001f4c:	4602      	mov	r2, r0
    s1 = ByteReverseWord32(s1);
 8001f4e:	9801      	ldr	r0, [sp, #4]
 8001f50:	f7ff ff64 	bl	8001e1c <ByteReverseWord32>
 8001f54:	4603      	mov	r3, r0
    s2 = ByteReverseWord32(s2);
 8001f56:	9802      	ldr	r0, [sp, #8]
 8001f58:	f7ff ff60 	bl	8001e1c <ByteReverseWord32>
 8001f5c:	4681      	mov	r9, r0
    s3 = ByteReverseWord32(s3);
 8001f5e:	9803      	ldr	r0, [sp, #12]
 8001f60:	f7ff ff5c 	bl	8001e1c <ByteReverseWord32>
    s0 ^= rk[0];
 8001f64:	6821      	ldr	r1, [r4, #0]
 8001f66:	ea82 0e01 	eor.w	lr, r2, r1
    s1 ^= rk[1];
 8001f6a:	6862      	ldr	r2, [r4, #4]
 8001f6c:	ea83 0c02 	eor.w	ip, r3, r2
    s2 ^= rk[2];
 8001f70:	68a3      	ldr	r3, [r4, #8]
 8001f72:	ea89 0903 	eor.w	r9, r9, r3
    s3 ^= rk[3];
 8001f76:	68e3      	ldr	r3, [r4, #12]
 8001f78:	4058      	eors	r0, r3
                       ENC_ROUND_T_S( 0);
 8001f7a:	b2c2      	uxtb	r2, r0
 8001f7c:	4bf2      	ldr	r3, [pc, #968]	; (8002348 <wc_AesEncrypt+0x44c>)
 8001f7e:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8001f82:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001f86:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8001f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f8e:	4055      	eors	r5, r2
 8001f90:	6922      	ldr	r2, [r4, #16]
 8001f92:	4055      	eors	r5, r2
 8001f94:	f3cc 4207 	ubfx	r2, ip, #16, #8
 8001f98:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001f9c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8001fa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fa4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001fa8:	4055      	eors	r5, r2
 8001faa:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8001fae:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001fb2:	ea4f 6619 	mov.w	r6, r9, lsr #24
 8001fb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fba:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001fbe:	4055      	eors	r5, r2
 8001fc0:	fa5f f28e 	uxtb.w	r2, lr
 8001fc4:	f502 7240 	add.w	r2, r2, #768	; 0x300
    if (r > 5) {
 8001fc8:	2f05      	cmp	r7, #5
                       ENC_ROUND_T_S( 0);
 8001fca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fce:	ea81 0102 	eor.w	r1, r1, r2
 8001fd2:	6962      	ldr	r2, [r4, #20]
 8001fd4:	ea81 0102 	eor.w	r1, r1, r2
 8001fd8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8001fdc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001fe0:	fa5f f989 	uxtb.w	r9, r9
 8001fe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fe8:	ea81 0102 	eor.w	r1, r1, r2
 8001fec:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8001ff0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001ff4:	f509 7940 	add.w	r9, r9, #768	; 0x300
 8001ff8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ffc:	ea81 0102 	eor.w	r1, r1, r2
 8002000:	fa5f f28c 	uxtb.w	r2, ip
 8002004:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002008:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800200c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002010:	ea86 0602 	eor.w	r6, r6, r2
 8002014:	69a2      	ldr	r2, [r4, #24]
 8002016:	ea86 0602 	eor.w	r6, r6, r2
 800201a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800201e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002022:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8002026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800202a:	ea86 0602 	eor.w	r6, r6, r2
 800202e:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8002032:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002036:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 800203a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800203e:	ea86 0602 	eor.w	r6, r6, r2
 8002042:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002046:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800204a:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 800204e:	ea82 0900 	eor.w	r9, r2, r0
 8002052:	69e2      	ldr	r2, [r4, #28]
 8002054:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8002058:	ea89 0902 	eor.w	r9, r9, r2
 800205c:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8002060:	ea89 0902 	eor.w	r9, r9, r2
 8002064:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8002068:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
 800206c:	fa5f f089 	uxtb.w	r0, r9
 8002070:	ea4f 6215 	mov.w	r2, r5, lsr #24
 8002074:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002078:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800207c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002080:	ea82 0c00 	eor.w	ip, r2, r0
 8002084:	6a22      	ldr	r2, [r4, #32]
 8002086:	ea8c 0c02 	eor.w	ip, ip, r2
 800208a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800208e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002092:	ea4f 6011 	mov.w	r0, r1, lsr #24
 8002096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800209a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800209e:	ea8c 0c02 	eor.w	ip, ip, r2
 80020a2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80020a6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80020aa:	fa5f fe81 	uxtb.w	lr, r1
 80020ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020b2:	ea8c 0c02 	eor.w	ip, ip, r2
 80020b6:	b2ea      	uxtb	r2, r5
 80020b8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80020bc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80020c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020c4:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80020c8:	ea80 0002 	eor.w	r0, r0, r2
 80020cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020ce:	ea80 0002 	eor.w	r0, r0, r2
 80020d2:	f3c6 4207 	ubfx	r2, r6, #16, #8
 80020d6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80020da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80020de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020e2:	ea80 0002 	eor.w	r0, r0, r2
 80020e6:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80020ea:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80020ee:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80020f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020f6:	ea80 0002 	eor.w	r0, r0, r2
 80020fa:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80020fe:	b2f6      	uxtb	r6, r6
 8002100:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002104:	ea82 0e0e 	eor.w	lr, r2, lr
 8002108:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800210a:	ea8e 0e02 	eor.w	lr, lr, r2
 800210e:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8002112:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002116:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800211a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800211e:	ea8e 0e02 	eor.w	lr, lr, r2
 8002122:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002126:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800212a:	f506 7640 	add.w	r6, r6, #768	; 0x300
 800212e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002132:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002136:	ea8e 0e02 	eor.w	lr, lr, r2
 800213a:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 800213e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8002142:	ea82 0906 	eor.w	r9, r2, r6
 8002146:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800214a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800214c:	ea89 0902 	eor.w	r9, r9, r2
 8002150:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8002154:	ea89 0902 	eor.w	r9, r9, r2
 8002158:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800215c:	ea89 0902 	eor.w	r9, r9, r2
 8002160:	fa5f f289 	uxtb.w	r2, r9
 8002164:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8002168:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800216c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8002170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002174:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8002178:	ea85 0501 	eor.w	r5, r5, r1
 800217c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002180:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002182:	ea85 0501 	eor.w	r5, r5, r1
 8002186:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800218a:	f3ce 2207 	ubfx	r2, lr, #8, #8
 800218e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002192:	ea85 0501 	eor.w	r5, r5, r1
 8002196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800219a:	ea85 0502 	eor.w	r5, r5, r2
 800219e:	fa5f f28c 	uxtb.w	r2, ip
 80021a2:	ea4f 6110 	mov.w	r1, r0, lsr #24
 80021a6:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80021aa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80021ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021b2:	ea81 0102 	eor.w	r1, r1, r2
 80021b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80021b8:	ea81 0102 	eor.w	r1, r1, r2
 80021bc:	f3ce 4207 	ubfx	r2, lr, #16, #8
 80021c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80021c4:	ea4f 661e 	mov.w	r6, lr, lsr #24
 80021c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021cc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80021d0:	ea81 0102 	eor.w	r1, r1, r2
 80021d4:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80021d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80021dc:	fa5f fe8e 	uxtb.w	lr, lr
 80021e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021e4:	ea81 0102 	eor.w	r1, r1, r2
 80021e8:	b2c2      	uxtb	r2, r0
 80021ea:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80021ee:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80021f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021f6:	ea86 0602 	eor.w	r6, r6, r2
 80021fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021fc:	ea86 0602 	eor.w	r6, r6, r2
 8002200:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8002204:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002208:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800220c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002210:	ea86 0602 	eor.w	r6, r6, r2
 8002214:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8002218:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800221c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8002220:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002224:	ea86 0602 	eor.w	r6, r6, r2
 8002228:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 800222c:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 8002230:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8002234:	ea82 0909 	eor.w	r9, r2, r9
 8002238:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800223a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800223e:	ea89 0902 	eor.w	r9, r9, r2
 8002242:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002246:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800224a:	ea89 0902 	eor.w	r9, r9, r2
 800224e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002252:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
 8002256:	fa5f f289 	uxtb.w	r2, r9
 800225a:	ea4f 6015 	mov.w	r0, r5, lsr #24
 800225e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002262:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800226a:	ea80 0c02 	eor.w	ip, r0, r2
 800226e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8002272:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002274:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002278:	ea8c 0c00 	eor.w	ip, ip, r0
 800227c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002280:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002284:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002288:	ea8c 0c00 	eor.w	ip, ip, r0
 800228c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002290:	ea8c 0c02 	eor.w	ip, ip, r2
 8002294:	b2ea      	uxtb	r2, r5
 8002296:	ea4f 6011 	mov.w	r0, r1, lsr #24
 800229a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800229e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80022a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022a6:	ea80 0002 	eor.w	r0, r0, r2
 80022aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022ac:	ea80 0002 	eor.w	r0, r0, r2
 80022b0:	f3c6 4207 	ubfx	r2, r6, #16, #8
 80022b4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80022b8:	fa5f fe81 	uxtb.w	lr, r1
 80022bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022c0:	ea80 0002 	eor.w	r0, r0, r2
 80022c4:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80022c8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80022cc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80022d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022d4:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80022d8:	ea80 0002 	eor.w	r0, r0, r2
 80022dc:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80022e0:	b2f6      	uxtb	r6, r6
 80022e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022e6:	ea82 0e0e 	eor.w	lr, r2, lr
 80022ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80022ec:	ea8e 0e02 	eor.w	lr, lr, r2
 80022f0:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80022f4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80022f8:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80022fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002300:	ea8e 0e02 	eor.w	lr, lr, r2
 8002304:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002308:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800230c:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8002310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002314:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002318:	ea8e 0e02 	eor.w	lr, lr, r2
 800231c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002320:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8002324:	ea82 0906 	eor.w	r9, r2, r6
 8002328:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800232c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800232e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8002332:	ea89 0902 	eor.w	r9, r9, r2
 8002336:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800233a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800233e:	ea89 0902 	eor.w	r9, r9, r2
 8002342:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002346:	e001      	b.n	800234c <wc_AesEncrypt+0x450>
 8002348:	08015f00 	.word	0x08015f00
 800234c:	ea89 0902 	eor.w	r9, r9, r2
 8002350:	fa5f f289 	uxtb.w	r2, r9
 8002354:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8002358:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800235c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8002360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002364:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8002368:	ea85 0501 	eor.w	r5, r5, r1
 800236c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002370:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002372:	ea85 0501 	eor.w	r5, r5, r1
 8002376:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800237a:	f3ce 2207 	ubfx	r2, lr, #8, #8
 800237e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002382:	ea85 0501 	eor.w	r5, r5, r1
 8002386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800238a:	ea85 0502 	eor.w	r5, r5, r2
 800238e:	fa5f f28c 	uxtb.w	r2, ip
 8002392:	ea4f 6110 	mov.w	r1, r0, lsr #24
 8002396:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800239a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800239e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023a2:	ea81 0102 	eor.w	r1, r1, r2
 80023a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80023a8:	ea81 0102 	eor.w	r1, r1, r2
 80023ac:	f3ce 4207 	ubfx	r2, lr, #16, #8
 80023b0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80023b4:	ea4f 661e 	mov.w	r6, lr, lsr #24
 80023b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023bc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80023c0:	ea81 0102 	eor.w	r1, r1, r2
 80023c4:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80023c8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80023cc:	fa5f fe8e 	uxtb.w	lr, lr
 80023d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023d4:	ea81 0102 	eor.w	r1, r1, r2
 80023d8:	b2c2      	uxtb	r2, r0
 80023da:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80023de:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80023e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023e6:	ea86 0602 	eor.w	r6, r6, r2
 80023ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80023ec:	ea86 0602 	eor.w	r6, r6, r2
 80023f0:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80023f4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80023f8:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80023fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002400:	ea86 0602 	eor.w	r6, r6, r2
 8002404:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8002408:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800240c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8002410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002414:	ea86 0602 	eor.w	r6, r6, r2
 8002418:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 800241c:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 8002420:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8002424:	ea82 0909 	eor.w	r9, r2, r9
 8002428:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800242a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800242e:	ea89 0902 	eor.w	r9, r9, r2
 8002432:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002436:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800243a:	ea89 0902 	eor.w	r9, r9, r2
 800243e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002442:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
 8002446:	fa5f f289 	uxtb.w	r2, r9
 800244a:	ea4f 6015 	mov.w	r0, r5, lsr #24
 800244e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002452:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800245a:	ea80 0c02 	eor.w	ip, r0, r2
 800245e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8002462:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002464:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002468:	ea8c 0c00 	eor.w	ip, ip, r0
 800246c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002470:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002474:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002478:	ea8c 0c00 	eor.w	ip, ip, r0
 800247c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002480:	ea8c 0c02 	eor.w	ip, ip, r2
 8002484:	b2ea      	uxtb	r2, r5
 8002486:	ea4f 6011 	mov.w	r0, r1, lsr #24
 800248a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800248e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002496:	ea80 0002 	eor.w	r0, r0, r2
 800249a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800249c:	ea80 0002 	eor.w	r0, r0, r2
 80024a0:	f3c6 4207 	ubfx	r2, r6, #16, #8
 80024a4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80024a8:	fa5f fe81 	uxtb.w	lr, r1
 80024ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024b0:	ea80 0002 	eor.w	r0, r0, r2
 80024b4:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80024b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80024bc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80024c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024c4:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80024c8:	ea80 0002 	eor.w	r0, r0, r2
 80024cc:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80024d0:	b2f6      	uxtb	r6, r6
 80024d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024d6:	ea82 0e0e 	eor.w	lr, r2, lr
 80024da:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80024dc:	ea8e 0e02 	eor.w	lr, lr, r2
 80024e0:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80024e4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80024e8:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80024ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024f0:	ea8e 0e02 	eor.w	lr, lr, r2
 80024f4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80024f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80024fc:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8002500:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002504:	ea8e 0e02 	eor.w	lr, lr, r2
 8002508:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 800250c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002510:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8002514:	ea82 0906 	eor.w	r9, r2, r6
 8002518:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800251c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800251e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8002522:	ea89 0902 	eor.w	r9, r9, r2
 8002526:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800252a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800252e:	ea89 0902 	eor.w	r9, r9, r2
 8002532:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002536:	ea89 0902 	eor.w	r9, r9, r2
 800253a:	fa5f f289 	uxtb.w	r2, r9
 800253e:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8002542:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002546:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 800254a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800254e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8002552:	ea85 0501 	eor.w	r5, r5, r1
 8002556:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800255a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800255c:	ea85 0501 	eor.w	r5, r5, r1
 8002560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002564:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8002568:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800256c:	ea85 0501 	eor.w	r5, r5, r1
 8002570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002574:	ea85 0502 	eor.w	r5, r5, r2
 8002578:	fa5f f28c 	uxtb.w	r2, ip
 800257c:	ea4f 6110 	mov.w	r1, r0, lsr #24
 8002580:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002584:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800258c:	ea81 0102 	eor.w	r1, r1, r2
 8002590:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002592:	ea81 0102 	eor.w	r1, r1, r2
 8002596:	f3ce 4207 	ubfx	r2, lr, #16, #8
 800259a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800259e:	ea4f 661e 	mov.w	r6, lr, lsr #24
 80025a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025a6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80025aa:	ea81 0102 	eor.w	r1, r1, r2
 80025ae:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80025b2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80025b6:	fa5f fe8e 	uxtb.w	lr, lr
 80025ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025be:	ea81 0102 	eor.w	r1, r1, r2
 80025c2:	b2c2      	uxtb	r2, r0
 80025c4:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80025c8:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80025cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025d0:	ea86 0602 	eor.w	r6, r6, r2
 80025d4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80025d6:	ea86 0602 	eor.w	r6, r6, r2
 80025da:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80025de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80025e2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80025e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025ea:	ea86 0602 	eor.w	r6, r6, r2
 80025ee:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80025f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80025f6:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80025fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025fe:	ea86 0602 	eor.w	r6, r6, r2
 8002602:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002606:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 800260a:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800260e:	ea82 0909 	eor.w	r9, r2, r9
 8002612:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002614:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002618:	ea89 0902 	eor.w	r9, r9, r2
 800261c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002620:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8002624:	ea89 0902 	eor.w	r9, r9, r2
 8002628:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800262c:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
 8002630:	fa5f f289 	uxtb.w	r2, r9
 8002634:	ea4f 6015 	mov.w	r0, r5, lsr #24
 8002638:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800263c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002640:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002644:	ea80 0e02 	eor.w	lr, r0, r2
 8002648:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800264c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002650:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002654:	ea8e 0e00 	eor.w	lr, lr, r0
 8002658:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800265c:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002660:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002664:	ea8e 0e00 	eor.w	lr, lr, r0
 8002668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800266c:	ea8e 0e02 	eor.w	lr, lr, r2
 8002670:	b2ea      	uxtb	r2, r5
 8002672:	ea4f 6011 	mov.w	r0, r1, lsr #24
 8002676:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800267a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800267e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002682:	ea80 0002 	eor.w	r0, r0, r2
 8002686:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800268a:	ea80 0002 	eor.w	r0, r0, r2
 800268e:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8002692:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002696:	fa5f fc81 	uxtb.w	ip, r1
 800269a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800269e:	ea80 0002 	eor.w	r0, r0, r2
 80026a2:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80026a6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80026aa:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 80026ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026b2:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80026b6:	ea80 0002 	eor.w	r0, r0, r2
 80026ba:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80026be:	b2f6      	uxtb	r6, r6
 80026c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026c4:	ea82 0c0c 	eor.w	ip, r2, ip
 80026c8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80026cc:	ea8c 0c02 	eor.w	ip, ip, r2
 80026d0:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80026d4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80026d8:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80026dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026e0:	ea8c 0c02 	eor.w	ip, ip, r2
 80026e4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80026e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80026ec:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80026f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026f4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80026f8:	ea8c 0c02 	eor.w	ip, ip, r2
 80026fc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002700:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8002704:	ea82 0906 	eor.w	r9, r2, r6
 8002708:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800270c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002710:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8002714:	ea89 0902 	eor.w	r9, r9, r2
 8002718:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800271c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8002720:	ea89 0902 	eor.w	r9, r9, r2
 8002724:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002728:	ea89 0902 	eor.w	r9, r9, r2
 800272c:	fa5f f289 	uxtb.w	r2, r9
 8002730:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8002734:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002738:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800273c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002740:	ea82 0201 	eor.w	r2, r2, r1
 8002744:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002748:	ea81 0102 	eor.w	r1, r1, r2
 800274c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8002750:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002754:	ea4f 6510 	mov.w	r5, r0, lsr #24
 8002758:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800275c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8002760:	ea81 0102 	eor.w	r1, r1, r2
 8002764:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8002768:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800276c:	ea4f 661c 	mov.w	r6, ip, lsr #24
 8002770:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002774:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002778:	ea81 0102 	eor.w	r1, r1, r2
 800277c:	fa5f f28e 	uxtb.w	r2, lr
 8002780:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002788:	ea85 0502 	eor.w	r5, r5, r2
 800278c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8002790:	ea85 0502 	eor.w	r5, r5, r2
 8002794:	f3cc 4207 	ubfx	r2, ip, #16, #8
 8002798:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800279c:	fa5f fc8c 	uxtb.w	ip, ip
 80027a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027a4:	ea85 0502 	eor.w	r5, r5, r2
 80027a8:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80027ac:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80027b0:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 80027b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027b8:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80027bc:	ea85 0502 	eor.w	r5, r5, r2
 80027c0:	b2c2      	uxtb	r2, r0
 80027c2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80027c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80027ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027ce:	ea86 0602 	eor.w	r6, r6, r2
 80027d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80027d6:	ea86 0602 	eor.w	r6, r6, r2
 80027da:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80027de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80027e2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80027e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027ea:	ea86 0602 	eor.w	r6, r6, r2
 80027ee:	f3ce 2207 	ubfx	r2, lr, #8, #8
 80027f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80027f6:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 80027fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027fe:	ea86 0602 	eor.w	r6, r6, r2
 8002802:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002806:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 800280a:	ea82 0c0c 	eor.w	ip, r2, ip
 800280e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8002812:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002816:	ea8c 0c02 	eor.w	ip, ip, r2
 800281a:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 800281e:	ea8c 0c02 	eor.w	ip, ip, r2
 8002822:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002826:	ea8c 0c02 	eor.w	ip, ip, r2
    if (r > 5) {
 800282a:	f240 81e5 	bls.w	8002bf8 <wc_AesEncrypt+0xcfc>
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 800282e:	fa5f f08c 	uxtb.w	r0, ip
 8002832:	0e0a      	lsrs	r2, r1, #24
 8002834:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800283c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002840:	ea82 0e00 	eor.w	lr, r2, r0
 8002844:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8002848:	ea8e 0e02 	eor.w	lr, lr, r2
 800284c:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002850:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002854:	b2c8      	uxtb	r0, r1
 8002856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800285a:	ea8e 0e02 	eor.w	lr, lr, r2
 800285e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002862:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002866:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800286a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800286e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002872:	ea8e 0e02 	eor.w	lr, lr, r2
 8002876:	0e2a      	lsrs	r2, r5, #24
        if (r > 6) {
 8002878:	2f07      	cmp	r7, #7
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 800287a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800287e:	ea82 0900 	eor.w	r9, r2, r0
 8002882:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8002886:	ea89 0902 	eor.w	r9, r9, r2
 800288a:	f3c6 4207 	ubfx	r2, r6, #16, #8
 800288e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002892:	b2e8      	uxtb	r0, r5
 8002894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002898:	ea89 0902 	eor.w	r9, r9, r2
 800289c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80028a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80028a4:	f500 7040 	add.w	r0, r0, #768	; 0x300
 80028a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80028b0:	ea89 0902 	eor.w	r9, r9, r2
 80028b4:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80028b8:	b2f6      	uxtb	r6, r6
 80028ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028be:	ea80 0002 	eor.w	r0, r0, r2
 80028c2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80028c6:	ea82 0200 	eor.w	r2, r2, r0
 80028ca:	f3cc 4007 	ubfx	r0, ip, #16, #8
 80028ce:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80028d2:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 80028d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80028da:	ea82 0200 	eor.w	r2, r2, r0
 80028de:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80028e2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80028e6:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80028ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80028ee:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80028f2:	ea82 0200 	eor.w	r2, r2, r0
 80028f6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80028fa:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80028fe:	ea80 0c06 	eor.w	ip, r0, r6
 8002902:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002906:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800290a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800290e:	ea8c 0c00 	eor.w	ip, ip, r0
 8002912:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8002916:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800291a:	ea8c 0c00 	eor.w	ip, ip, r0
 800291e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002922:	ea8c 0c00 	eor.w	ip, ip, r0
 8002926:	fa5f f08c 	uxtb.w	r0, ip
 800292a:	ea4f 611e 	mov.w	r1, lr, lsr #24
 800292e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002932:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002936:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800293a:	ea80 0001 	eor.w	r0, r0, r1
 800293e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8002942:	ea81 0100 	eor.w	r1, r1, r0
 8002946:	f3c9 4007 	ubfx	r0, r9, #16, #8
 800294a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800294e:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8002952:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002956:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800295a:	ea81 0100 	eor.w	r1, r1, r0
 800295e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8002962:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002966:	ea4f 6612 	mov.w	r6, r2, lsr #24
 800296a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800296e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002972:	ea81 0100 	eor.w	r1, r1, r0
 8002976:	fa5f f08e 	uxtb.w	r0, lr
 800297a:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800297e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002982:	ea80 0005 	eor.w	r0, r0, r5
 8002986:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800298a:	ea85 0500 	eor.w	r5, r5, r0
 800298e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8002992:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800299c:	ea85 0500 	eor.w	r5, r5, r0
 80029a0:	f3cc 2007 	ubfx	r0, ip, #8, #8
 80029a4:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80029a8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80029ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80029b0:	ea85 0500 	eor.w	r5, r5, r0
 80029b4:	fa5f f089 	uxtb.w	r0, r9
 80029b8:	f500 7040 	add.w	r0, r0, #768	; 0x300
 80029bc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80029c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80029c4:	ea86 0600 	eor.w	r6, r6, r0
 80029c8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80029cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029d0:	ea86 0600 	eor.w	r6, r6, r0
 80029d4:	f3cc 4007 	ubfx	r0, ip, #16, #8
 80029d8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80029dc:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 80029e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80029e4:	ea86 0600 	eor.w	r6, r6, r0
 80029e8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80029ec:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80029f0:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 80029f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80029f8:	ea86 0600 	eor.w	r6, r6, r0
 80029fc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002a00:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8002a04:	ea80 0c02 	eor.w	ip, r0, r2
 8002a08:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8002a0c:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8002a10:	ea8c 0c00 	eor.w	ip, ip, r0
 8002a14:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8002a18:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002a1c:	ea8c 0c00 	eor.w	ip, ip, r0
 8002a20:	ea8c 0c02 	eor.w	ip, ip, r2
        if (r > 6) {
 8002a24:	f040 80e8 	bne.w	8002bf8 <wc_AesEncrypt+0xcfc>
            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
 8002a28:	fa5f f08c 	uxtb.w	r0, ip
 8002a2c:	0e0a      	lsrs	r2, r1, #24
 8002a2e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002a32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002a3a:	ea82 0e00 	eor.w	lr, r2, r0
 8002a3e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8002a42:	ea8e 0e02 	eor.w	lr, lr, r2
 8002a46:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002a4a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002a4e:	b2c8      	uxtb	r0, r1
 8002a50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a54:	ea8e 0e02 	eor.w	lr, lr, r2
 8002a58:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8002a5c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002a60:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002a64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002a6c:	ea8e 0e02 	eor.w	lr, lr, r2
 8002a70:	0e2a      	lsrs	r2, r5, #24
 8002a72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a76:	ea82 0900 	eor.w	r9, r2, r0
 8002a7a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002a7e:	ea89 0902 	eor.w	r9, r9, r2
 8002a82:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8002a86:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002a8a:	b2e8      	uxtb	r0, r5
 8002a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a90:	ea89 0902 	eor.w	r9, r9, r2
 8002a94:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8002a98:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002a9c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002aa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002aa4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002aa8:	ea89 0902 	eor.w	r9, r9, r2
 8002aac:	0e32      	lsrs	r2, r6, #24
 8002aae:	b2f6      	uxtb	r6, r6
 8002ab0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ab4:	4050      	eors	r0, r2
 8002ab6:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8002aba:	4042      	eors	r2, r0
 8002abc:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8002ac0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002ac4:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8002ac8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002acc:	4042      	eors	r2, r0
 8002ace:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8002ad2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002ad6:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8002ada:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002ade:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002ae2:	4042      	eors	r2, r0
 8002ae4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002ae8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8002aec:	ea80 0c06 	eor.w	ip, r0, r6
 8002af0:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002af4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8002af8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8002afc:	ea8c 0c00 	eor.w	ip, ip, r0
 8002b00:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8002b04:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002b08:	ea8c 0c00 	eor.w	ip, ip, r0
 8002b0c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002b10:	ea8c 0c00 	eor.w	ip, ip, r0
 8002b14:	fa5f f08c 	uxtb.w	r0, ip
 8002b18:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8002b1c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002b20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002b24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b28:	4048      	eors	r0, r1
 8002b2a:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8002b2e:	4041      	eors	r1, r0
 8002b30:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8002b34:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002b38:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8002b3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b40:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8002b44:	4041      	eors	r1, r0
 8002b46:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8002b4a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002b4e:	0e16      	lsrs	r6, r2, #24
 8002b50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b54:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002b58:	4041      	eors	r1, r0
 8002b5a:	fa5f f08e 	uxtb.w	r0, lr
 8002b5e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002b62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b66:	4068      	eors	r0, r5
 8002b68:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
 8002b6c:	4045      	eors	r5, r0
 8002b6e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8002b72:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b7c:	4045      	eors	r5, r0
 8002b7e:	f3cc 2007 	ubfx	r0, ip, #8, #8
 8002b82:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002b86:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002b8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b8e:	4045      	eors	r5, r0
 8002b90:	fa5f f089 	uxtb.w	r0, r9
 8002b94:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002b98:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8002b9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002ba0:	4046      	eors	r6, r0
 8002ba2:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8002ba6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002baa:	4046      	eors	r6, r0
 8002bac:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8002bb0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002bb4:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8002bb8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002bbc:	4046      	eors	r6, r0
 8002bbe:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8002bc2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002bc6:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8002bca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002bce:	4046      	eors	r6, r0
 8002bd0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002bd4:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8002bd8:	ea80 0c02 	eor.w	ip, r0, r2
 8002bdc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8002be0:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8002be4:	ea8c 0c00 	eor.w	ip, ip, r0
 8002be8:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8002bec:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002bf0:	ea8c 0c00 	eor.w	ip, ip, r0
 8002bf4:	ea8c 0c02 	eor.w	ip, ip, r2
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002bf8:	b2ca      	uxtb	r2, r1
    rk += r * 8;
 8002bfa:	0178      	lsls	r0, r7, #5
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002bfc:	f502 7280 	add.w	r2, r2, #256	; 0x100
    rk += r * 8;
 8002c00:	eb04 1747 	add.w	r7, r4, r7, lsl #5
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002c04:	f813 9022 	ldrb.w	r9, [r3, r2, lsl #2]
 8002c08:	687a      	ldr	r2, [r7, #4]
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002c0a:	5824      	ldr	r4, [r4, r0]
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002c0c:	ea89 0902 	eor.w	r9, r9, r2
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
 8002c10:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8002c14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c18:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002c1c:	ea89 020e 	eor.w	r2, r9, lr
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8002c20:	f3c6 4e07 	ubfx	lr, r6, #16, #8
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8002c24:	ea4f 6915 	mov.w	r9, r5, lsr #24
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8002c28:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8002c2c:	f509 7900 	add.w	r9, r9, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8002c30:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8002c34:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8002c38:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8002c3c:	f009 497f 	and.w	r9, r9, #4278190080	; 0xff000000
 8002c40:	ea4e 0e09 	orr.w	lr, lr, r9
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002c44:	ea82 090e 	eor.w	r9, r2, lr
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8002c48:	b2ea      	uxtb	r2, r5
 8002c4a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002c4e:	f813 a022 	ldrb.w	sl, [r3, r2, lsl #2]
 8002c52:	68ba      	ldr	r2, [r7, #8]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8002c54:	68ff      	ldr	r7, [r7, #12]
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8002c56:	ea8a 0a02 	eor.w	sl, sl, r2
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
 8002c5a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c62:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8002c66:	ea8a 020e 	eor.w	r2, sl, lr
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8002c6a:	f3cc 4e07 	ubfx	lr, ip, #16, #8
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8002c6e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8002c72:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8002c76:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8002c7a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8002c7e:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8002c82:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8002c86:	f00a 4a7f 	and.w	sl, sl, #4278190080	; 0xff000000
 8002c8a:	ea4e 0e0a 	orr.w	lr, lr, sl
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8002c8e:	ea82 0a0e 	eor.w	sl, r2, lr
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8002c92:	b2f2      	uxtb	r2, r6
 8002c94:	f502 7280 	add.w	r2, r2, #256	; 0x100
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8002c98:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8002c9c:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8002ca0:	407a      	eors	r2, r7
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 8002ca2:	f3c5 2707 	ubfx	r7, r5, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8002ca6:	f50e 7e00 	add.w	lr, lr, #512	; 0x200
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 8002caa:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8002cae:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 8002cb2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8002cb6:	4057      	eors	r7, r2
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8002cb8:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8002cbc:	f502 7240 	add.w	r2, r2, #768	; 0x300
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002cc0:	fa5f fc8c 	uxtb.w	ip, ip
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8002cc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8002cc8:	f00e 4e7f 	and.w	lr, lr, #4278190080	; 0xff000000
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002ccc:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8002cd0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8002cd4:	f3c6 2607 	ubfx	r6, r6, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8002cd8:	ea42 020e 	orr.w	r2, r2, lr
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8002cdc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8002ce0:	407a      	eors	r2, r7
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8002ce2:	f3c5 4507 	ubfx	r5, r5, #16, #8
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002ce6:	f813 702c 	ldrb.w	r7, [r3, ip, lsl #2]
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8002cea:	0e09      	lsrs	r1, r1, #24
 8002cec:	f501 7100 	add.w	r1, r1, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8002cf0:	f505 7540 	add.w	r5, r5, #768	; 0x300
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002cf4:	407c      	eors	r4, r7
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8002cf6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002cfa:	4060      	eors	r0, r4
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8002cfc:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8002d00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8002d04:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8002d08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002d0c:	4323      	orrs	r3, r4
    s0 = ByteReverseWord32(s0);
 8002d0e:	4058      	eors	r0, r3
 8002d10:	f7ff f884 	bl	8001e1c <ByteReverseWord32>
 8002d14:	9000      	str	r0, [sp, #0]
    s1 = ByteReverseWord32(s1);
 8002d16:	4648      	mov	r0, r9
 8002d18:	f7ff f880 	bl	8001e1c <ByteReverseWord32>
 8002d1c:	9001      	str	r0, [sp, #4]
    s2 = ByteReverseWord32(s2);
 8002d1e:	4650      	mov	r0, sl
 8002d20:	f7ff f87c 	bl	8001e1c <ByteReverseWord32>
 8002d24:	9002      	str	r0, [sp, #8]
    s3 = ByteReverseWord32(s3);
 8002d26:	4610      	mov	r0, r2
 8002d28:	f7ff f878 	bl	8001e1c <ByteReverseWord32>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8002d2c:	2204      	movs	r2, #4
    s3 = ByteReverseWord32(s3);
 8002d2e:	9003      	str	r0, [sp, #12]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8002d30:	4669      	mov	r1, sp
 8002d32:	4640      	mov	r0, r8
 8002d34:	f010 fa44 	bl	80131c0 <memcpy>
    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
 8002d38:	2204      	movs	r2, #4
 8002d3a:	eb0d 0102 	add.w	r1, sp, r2
 8002d3e:	eb08 0002 	add.w	r0, r8, r2
 8002d42:	f010 fa3d 	bl	80131c0 <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 8002d46:	2204      	movs	r2, #4
 8002d48:	a902      	add	r1, sp, #8
 8002d4a:	f108 0008 	add.w	r0, r8, #8
 8002d4e:	f010 fa37 	bl	80131c0 <memcpy>
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 8002d52:	2204      	movs	r2, #4
 8002d54:	a903      	add	r1, sp, #12
 8002d56:	f108 000c 	add.w	r0, r8, #12
 8002d5a:	f010 fa31 	bl	80131c0 <memcpy>
    return 0;
 8002d5e:	2000      	movs	r0, #0
} /* wc_AesEncrypt */
 8002d60:	b004      	add	sp, #16
 8002d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_FUNC_ARG;
 8002d66:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8002d6a:	e7f9      	b.n	8002d60 <wc_AesEncrypt+0xe64>
        return KEYUSAGE_E;
 8002d6c:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 8002d70:	e7f6      	b.n	8002d60 <wc_AesEncrypt+0xe64>
 8002d72:	bf00      	nop

08002d74 <GMULT>:

#endif /* WOLFSSL_AESNI */

#if defined(GCM_SMALL)
static void GMULT(byte* X, byte* Y)
{
 8002d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d78:	b088      	sub	sp, #32
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4606      	mov	r6, r0
    byte Z[AES_BLOCK_SIZE];
    byte V[AES_BLOCK_SIZE];
    int i, j;

    XMEMSET(Z, 0, AES_BLOCK_SIZE);
 8002d7e:	2210      	movs	r2, #16
 8002d80:	2100      	movs	r1, #0
 8002d82:	4668      	mov	r0, sp
 8002d84:	f010 fa44 	bl	8013210 <memset>
    XMEMCPY(V, X, AES_BLOCK_SIZE);
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4631      	mov	r1, r6
 8002d8c:	eb0d 0002 	add.w	r0, sp, r2
 8002d90:	f010 fa16 	bl	80131c0 <memcpy>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
 8002d94:	1e67      	subs	r7, r4, #1
 8002d96:	340f      	adds	r4, #15
    {
        byte y = Y[i];
 8002d98:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002d9c:	f04f 0808 	mov.w	r8, #8
        for (j = 0; j < 8; j++)
        {
            if (y & 0x80) {
 8002da0:	062b      	lsls	r3, r5, #24
 8002da2:	d505      	bpl.n	8002db0 <GMULT+0x3c>
                xorbuf(Z, V, AES_BLOCK_SIZE);
 8002da4:	2210      	movs	r2, #16
 8002da6:	eb0d 0102 	add.w	r1, sp, r2
 8002daa:	4668      	mov	r0, sp
 8002dac:	f7ff f86b 	bl	8001e86 <xorbuf>
    byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
 8002db0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    int carryIn = 0;
 8002db4:	2100      	movs	r1, #0
    byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
 8002db6:	f343 0300 	sbfx	r3, r3, #0, #1
 8002dba:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 8002dbe:	a804      	add	r0, sp, #16
 8002dc0:	460a      	mov	r2, r1
        int carryOut = (x[i] & 0x01) << 7;
 8002dc2:	f890 e000 	ldrb.w	lr, [r0]
 8002dc6:	468c      	mov	ip, r1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 8002dc8:	3201      	adds	r2, #1
        int carryOut = (x[i] & 0x01) << 7;
 8002dca:	ea4f 11ce 	mov.w	r1, lr, lsl #7
        x[i] = (byte) ((x[i] >> 1) | carryIn);
 8002dce:	ea4c 0c5e 	orr.w	ip, ip, lr, lsr #1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 8002dd2:	2a10      	cmp	r2, #16
        x[i] = (byte) ((x[i] >> 1) | carryIn);
 8002dd4:	f800 cb01 	strb.w	ip, [r0], #1
        int carryOut = (x[i] & 0x01) << 7;
 8002dd8:	b2c9      	uxtb	r1, r1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 8002dda:	d1f2      	bne.n	8002dc2 <GMULT+0x4e>
    x[0] ^= borrow;
 8002ddc:	f89d 1010 	ldrb.w	r1, [sp, #16]
            }

            RIGHTSHIFTX(V);
            y = y << 1;
 8002de0:	006d      	lsls	r5, r5, #1
    x[0] ^= borrow;
 8002de2:	404b      	eors	r3, r1
        for (j = 0; j < 8; j++)
 8002de4:	f1b8 0801 	subs.w	r8, r8, #1
    x[0] ^= borrow;
 8002de8:	f88d 3010 	strb.w	r3, [sp, #16]
            y = y << 1;
 8002dec:	b2ed      	uxtb	r5, r5
        for (j = 0; j < 8; j++)
 8002dee:	d1d7      	bne.n	8002da0 <GMULT+0x2c>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
 8002df0:	42bc      	cmp	r4, r7
 8002df2:	d1d1      	bne.n	8002d98 <GMULT+0x24>
        }
    }
    XMEMCPY(X, Z, AES_BLOCK_SIZE);
 8002df4:	4669      	mov	r1, sp
 8002df6:	4630      	mov	r0, r6
 8002df8:	f010 f9e2 	bl	80131c0 <memcpy>
}
 8002dfc:	b008      	add	sp, #32
 8002dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e02 <wc_AesSetIV>:
{
 8002e02:	b510      	push	{r4, lr}
    if (aes == NULL)
 8002e04:	b148      	cbz	r0, 8002e1a <wc_AesSetIV+0x18>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 8002e06:	30f8      	adds	r0, #248	; 0xf8
 8002e08:	2210      	movs	r2, #16
    if (iv)
 8002e0a:	b119      	cbz	r1, 8002e14 <wc_AesSetIV+0x12>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 8002e0c:	f010 f9d8 	bl	80131c0 <memcpy>
    return 0;
 8002e10:	2000      	movs	r0, #0
}
 8002e12:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
 8002e14:	f010 f9fc 	bl	8013210 <memset>
 8002e18:	e7fa      	b.n	8002e10 <wc_AesSetIV+0xe>
        return BAD_FUNC_ARG;
 8002e1a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8002e1e:	e7f8      	b.n	8002e12 <wc_AesSetIV+0x10>

08002e20 <wc_AesSetKey>:
    {
 8002e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002e28:	4691      	mov	r9, r2
 8002e2a:	469b      	mov	fp, r3
        if (aes == NULL) {
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	f000 821d 	beq.w	800326e <wc_AesSetKey+0x44e>
        if (keylen > sizeof(aes->key)) {
 8002e34:	2af0      	cmp	r2, #240	; 0xf0
 8002e36:	f200 821a 	bhi.w	800326e <wc_AesSetKey+0x44e>
            if (keylen != 16 && keylen != 24 && keylen != 32) {
 8002e3a:	f022 0308 	bic.w	r3, r2, #8
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d002      	beq.n	8002e48 <wc_AesSetKey+0x28>
 8002e42:	2a20      	cmp	r2, #32
 8002e44:	f040 8213 	bne.w	800326e <wc_AesSetKey+0x44e>
        aes->rounds = (keylen/4) + 6;
 8002e48:	ea4f 0a99 	mov.w	sl, r9, lsr #2
 8002e4c:	f10a 0306 	add.w	r3, sl, #6
 8002e50:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
        aes->keylen = (int)keylen;
 8002e54:	f8c5 90f4 	str.w	r9, [r5, #244]	; 0xf4
        XMEMCPY(rk, userKey, keylen);
 8002e58:	464a      	mov	r2, r9
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f010 f9b0 	bl	80131c0 <memcpy>
        rk = aes->key;
 8002e60:	462c      	mov	r4, r5
        for (i = 0; i < count; i++)
 8002e62:	462e      	mov	r6, r5
 8002e64:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
 8002e68:	462b      	mov	r3, r5
 8002e6a:	459a      	cmp	sl, r3
 8002e6c:	d149      	bne.n	8002f02 <wc_AesSetKey+0xe2>
        switch (keylen) {
 8002e6e:	f1b9 0f18 	cmp.w	r9, #24
 8002e72:	f000 80bb 	beq.w	8002fec <wc_AesSetKey+0x1cc>
 8002e76:	f1b9 0f20 	cmp.w	r9, #32
 8002e7a:	d048      	beq.n	8002f0e <wc_AesSetKey+0xee>
 8002e7c:	f1b9 0f10 	cmp.w	r9, #16
 8002e80:	f040 81f5 	bne.w	800326e <wc_AesSetKey+0x44e>
 8002e84:	f8df c210 	ldr.w	ip, [pc, #528]	; 8003098 <wc_AesSetKey+0x278>
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002e88:	4884      	ldr	r0, [pc, #528]	; (800309c <wc_AesSetKey+0x27c>)
 8002e8a:	f105 0e90 	add.w	lr, r5, #144	; 0x90
                temp  = rk[3];
 8002e8e:	68e2      	ldr	r2, [r4, #12]
                    rcon[i];
 8002e90:	f85c 9b04 	ldr.w	r9, [ip], #4
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002e94:	b2d3      	uxtb	r3, r2
                if (++i == 10)
 8002e96:	4574      	cmp	r4, lr
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002e98:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002e9c:	6823      	ldr	r3, [r4, #0]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002e9e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002ea2:	ea89 0303 	eor.w	r3, r9, r3
 8002ea6:	ea83 0301 	eor.w	r3, r3, r1
 8002eaa:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8002eae:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002eb2:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 8002eb6:	ea83 0301 	eor.w	r3, r3, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 8002eba:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8002ebe:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8002ec2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002ec6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002eca:	ea83 0301 	eor.w	r3, r3, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8002ece:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002ed2:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8002ed6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002eda:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002ede:	ea83 0301 	eor.w	r3, r3, r1
                rk[5] = rk[1] ^ rk[4];
 8002ee2:	6861      	ldr	r1, [r4, #4]
                rk[4] = rk[0] ^
 8002ee4:	6123      	str	r3, [r4, #16]
                rk[5] = rk[1] ^ rk[4];
 8002ee6:	ea83 0301 	eor.w	r3, r3, r1
                rk[6] = rk[2] ^ rk[5];
 8002eea:	68a1      	ldr	r1, [r4, #8]
                rk[5] = rk[1] ^ rk[4];
 8002eec:	6163      	str	r3, [r4, #20]
                rk[6] = rk[2] ^ rk[5];
 8002eee:	ea83 0301 	eor.w	r3, r3, r1
 8002ef2:	61a3      	str	r3, [r4, #24]
                rk[7] = rk[3] ^ rk[6];
 8002ef4:	ea83 0302 	eor.w	r3, r3, r2
 8002ef8:	61e3      	str	r3, [r4, #28]
                if (++i == 10)
 8002efa:	f000 80ba 	beq.w	8003072 <wc_AesSetKey+0x252>
                rk += 4;
 8002efe:	3410      	adds	r4, #16
                temp  = rk[3];
 8002f00:	e7c5      	b.n	8002e8e <wc_AesSetKey+0x6e>
            out[i] = ByteReverseWord32(in[i]);
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	f7fe ff8a 	bl	8001e1c <ByteReverseWord32>
 8002f08:	f843 0b04 	str.w	r0, [r3], #4
        for (i = 0; i < count; i++)
 8002f0c:	e7ad      	b.n	8002e6a <wc_AesSetKey+0x4a>
 8002f0e:	4b62      	ldr	r3, [pc, #392]	; (8003098 <wc_AesSetKey+0x278>)
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002f10:	4a62      	ldr	r2, [pc, #392]	; (800309c <wc_AesSetKey+0x27c>)
 8002f12:	f105 0cc0 	add.w	ip, r5, #192	; 0xc0
                temp = rk[ 7];
 8002f16:	69e0      	ldr	r0, [r4, #28]
                    rcon[i];
 8002f18:	f853 9b04 	ldr.w	r9, [r3], #4
                rk[ 9] = rk[ 1] ^ rk[ 8];
 8002f1c:	6867      	ldr	r7, [r4, #4]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002f1e:	b2c1      	uxtb	r1, r0
                if (++i == 7)
 8002f20:	4564      	cmp	r4, ip
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002f22:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002f26:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002f2a:	6821      	ldr	r1, [r4, #0]
 8002f2c:	ea89 0101 	eor.w	r1, r9, r1
 8002f30:	ea8e 0e01 	eor.w	lr, lr, r1
 8002f34:	ea4f 6110 	mov.w	r1, r0, lsr #24
 8002f38:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002f3c:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 8002f40:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 8002f44:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8002f48:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8002f4c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002f50:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002f54:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8002f58:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8002f5c:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8002f60:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002f64:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8002f68:	ea8e 0101 	eor.w	r1, lr, r1
                rk[ 8] = rk[ 0] ^
 8002f6c:	6221      	str	r1, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 8002f6e:	ea81 0107 	eor.w	r1, r1, r7
                rk[10] = rk[ 2] ^ rk[ 9];
 8002f72:	68a7      	ldr	r7, [r4, #8]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 8002f74:	6261      	str	r1, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
 8002f76:	ea81 0107 	eor.w	r1, r1, r7
                rk[11] = rk[ 3] ^ rk[10];
 8002f7a:	68e7      	ldr	r7, [r4, #12]
                rk[10] = rk[ 2] ^ rk[ 9];
 8002f7c:	62a1      	str	r1, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
 8002f7e:	ea81 0e07 	eor.w	lr, r1, r7
 8002f82:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
                if (++i == 7)
 8002f86:	d074      	beq.n	8003072 <wc_AesSetKey+0x252>
                    (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 8002f88:	f3ce 4107 	ubfx	r1, lr, #16, #8
 8002f8c:	f501 7140 	add.w	r1, r1, #768	; 0x300
                rk[13] = rk[ 5] ^ rk[12];
 8002f90:	6967      	ldr	r7, [r4, #20]
                    (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 8002f92:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002f96:	f401 097f 	and.w	r9, r1, #16711680	; 0xff0000
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 8002f9a:	f3ce 2107 	ubfx	r1, lr, #8, #8
                rk += 8;
 8002f9e:	3420      	adds	r4, #32
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 8002fa0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002fa4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8002fa8:	ea49 0901 	orr.w	r9, r9, r1
 8002fac:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8002fb0:	ea89 0901 	eor.w	r9, r9, r1
                    (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
 8002fb4:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8002fb8:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8002fbc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002fc0:	f001 4a7f 	and.w	sl, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
 8002fc4:	fa5f f18e 	uxtb.w	r1, lr
 8002fc8:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002fcc:	f812 e021 	ldrb.w	lr, [r2, r1, lsl #2]
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 8002fd0:	ea4a 0e0e 	orr.w	lr, sl, lr
 8002fd4:	ea89 010e 	eor.w	r1, r9, lr
                rk[12] = rk[ 4] ^
 8002fd8:	6121      	str	r1, [r4, #16]
                rk[13] = rk[ 5] ^ rk[12];
 8002fda:	4079      	eors	r1, r7
                rk[14] = rk[ 6] ^ rk[13];
 8002fdc:	f854 7c08 	ldr.w	r7, [r4, #-8]
                rk[13] = rk[ 5] ^ rk[12];
 8002fe0:	6161      	str	r1, [r4, #20]
                rk[14] = rk[ 6] ^ rk[13];
 8002fe2:	4079      	eors	r1, r7
 8002fe4:	61a1      	str	r1, [r4, #24]
                rk[15] = rk[ 7] ^ rk[14];
 8002fe6:	4041      	eors	r1, r0
 8002fe8:	61e1      	str	r1, [r4, #28]
                temp = rk[ 7];
 8002fea:	e794      	b.n	8002f16 <wc_AesSetKey+0xf6>
 8002fec:	482a      	ldr	r0, [pc, #168]	; (8003098 <wc_AesSetKey+0x278>)
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002fee:	4a2b      	ldr	r2, [pc, #172]	; (800309c <wc_AesSetKey+0x27c>)
 8002ff0:	f105 0ca8 	add.w	ip, r5, #168	; 0xa8
                temp = rk[ 5];
 8002ff4:	6963      	ldr	r3, [r4, #20]
                    rcon[i];
 8002ff6:	f850 9b04 	ldr.w	r9, [r0], #4
                rk[ 7] = rk[ 1] ^ rk[ 6];
 8002ffa:	6867      	ldr	r7, [r4, #4]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8002ffc:	b2d9      	uxtb	r1, r3
                if (++i == 8)
 8002ffe:	4564      	cmp	r4, ip
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8003000:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003004:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8003008:	6821      	ldr	r1, [r4, #0]
 800300a:	ea89 0101 	eor.w	r1, r9, r1
 800300e:	ea8e 0e01 	eor.w	lr, lr, r1
 8003012:	ea4f 6113 	mov.w	r1, r3, lsr #24
 8003016:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800301a:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 800301e:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 8003022:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8003026:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800302a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800302e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8003032:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8003036:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800303a:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800303e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003042:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8003046:	ea8e 0101 	eor.w	r1, lr, r1
                rk[ 6] = rk[ 0] ^
 800304a:	61a1      	str	r1, [r4, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 800304c:	ea81 0107 	eor.w	r1, r1, r7
                rk[ 8] = rk[ 2] ^ rk[ 7];
 8003050:	68a7      	ldr	r7, [r4, #8]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 8003052:	61e1      	str	r1, [r4, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 8003054:	ea81 0107 	eor.w	r1, r1, r7
                rk[ 9] = rk[ 3] ^ rk[ 8];
 8003058:	68e7      	ldr	r7, [r4, #12]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 800305a:	6221      	str	r1, [r4, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
 800305c:	ea81 0107 	eor.w	r1, r1, r7
 8003060:	6261      	str	r1, [r4, #36]	; 0x24
                if (++i == 8)
 8003062:	d006      	beq.n	8003072 <wc_AesSetKey+0x252>
                rk[10] = rk[ 4] ^ rk[ 9];
 8003064:	6927      	ldr	r7, [r4, #16]
 8003066:	4079      	eors	r1, r7
 8003068:	62a1      	str	r1, [r4, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
 800306a:	4059      	eors	r1, r3
 800306c:	62e1      	str	r1, [r4, #44]	; 0x2c
                rk += 6;
 800306e:	3418      	adds	r4, #24
                temp = rk[ 5];
 8003070:	e7c0      	b.n	8002ff4 <wc_AesSetKey+0x1d4>
            *w++ = 0;
        }
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 8003072:	2200      	movs	r2, #0
        if (dir == AES_DECRYPTION) {
 8003074:	f1b8 0f01 	cmp.w	r8, #1
 8003078:	f88d 2004 	strb.w	r2, [sp, #4]
 800307c:	f88d 2005 	strb.w	r2, [sp, #5]
 8003080:	f88d 2006 	strb.w	r2, [sp, #6]
 8003084:	f88d 2007 	strb.w	r2, [sp, #7]
 8003088:	d00a      	beq.n	80030a0 <wc_AesSetKey+0x280>
        ret = wc_AesSetIV(aes, iv);
 800308a:	4659      	mov	r1, fp
 800308c:	4628      	mov	r0, r5
    } /* wc_AesSetKey() */
 800308e:	b003      	add	sp, #12
 8003090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = wc_AesSetIV(aes, iv);
 8003094:	f7ff beb5 	b.w	8002e02 <wc_AesSetIV>
 8003098:	08016f00 	.word	0x08016f00
 800309c:	08015f00 	.word	0x08015f00
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 80030a0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80030a4:	4629      	mov	r1, r5
 80030a6:	009c      	lsls	r4, r3, #2
 80030a8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80030ac:	1aa0      	subs	r0, r4, r2
 80030ae:	4282      	cmp	r2, r0
 80030b0:	f101 0110 	add.w	r1, r1, #16
 80030b4:	f1a3 0310 	sub.w	r3, r3, #16
 80030b8:	f0c0 80bf 	bcc.w	800323a <wc_AesSetKey+0x41a>
 80030bc:	2300      	movs	r3, #0
 80030be:	f88d 3004 	strb.w	r3, [sp, #4]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 80030c2:	4a6d      	ldr	r2, [pc, #436]	; (8003278 <wc_AesSetKey+0x458>)
 80030c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80030c8:	f88d 3006 	strb.w	r3, [sp, #6]
 80030cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80030d0:	4b6a      	ldr	r3, [pc, #424]	; (800327c <wc_AesSetKey+0x45c>)
            for (i = 1; i < aes->rounds; i++) {
 80030d2:	2001      	movs	r0, #1
 80030d4:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 80030d8:	4288      	cmp	r0, r1
 80030da:	d2d6      	bcs.n	800308a <wc_AesSetKey+0x26a>
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 80030dc:	6931      	ldr	r1, [r6, #16]
 80030de:	0e0c      	lsrs	r4, r1, #24
 80030e0:	f504 7480 	add.w	r4, r4, #256	; 0x100
            for (i = 1; i < aes->rounds; i++) {
 80030e4:	3001      	adds	r0, #1
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 80030e6:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 80030ea:	b2cc      	uxtb	r4, r1
 80030ec:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80030f0:	3610      	adds	r6, #16
 80030f2:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 80030f6:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 80030fa:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 80030fe:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8003102:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 8003106:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800310a:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800310e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8003112:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 8003116:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800311a:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800311e:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 8003122:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003126:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800312a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800312e:	ea84 040c 	eor.w	r4, r4, ip
 8003132:	4061      	eors	r1, r4
                rk[0] =
 8003134:	6031      	str	r1, [r6, #0]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
 8003136:	6871      	ldr	r1, [r6, #4]
 8003138:	0e0c      	lsrs	r4, r1, #24
 800313a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800313e:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 8003142:	b2cc      	uxtb	r4, r1
 8003144:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8003148:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800314c:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 8003150:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 8003154:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8003158:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800315c:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 8003160:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 8003164:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8003168:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800316c:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 8003170:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 8003174:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 8003178:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800317c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8003180:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003184:	ea84 040c 	eor.w	r4, r4, ip
 8003188:	4061      	eors	r1, r4
                rk[1] =
 800318a:	6071      	str	r1, [r6, #4]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
 800318c:	68b1      	ldr	r1, [r6, #8]
 800318e:	0e0c      	lsrs	r4, r1, #24
 8003190:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8003194:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 8003198:	b2cc      	uxtb	r4, r1
 800319a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800319e:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 80031a2:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 80031a6:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 80031aa:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80031ae:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 80031b2:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 80031b6:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 80031ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80031be:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 80031c2:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 80031c6:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 80031ca:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 80031ce:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80031d2:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80031d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80031da:	ea84 040c 	eor.w	r4, r4, ip
 80031de:	4061      	eors	r1, r4
                rk[2] =
 80031e0:	60b1      	str	r1, [r6, #8]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
 80031e2:	68f1      	ldr	r1, [r6, #12]
 80031e4:	0e0c      	lsrs	r4, r1, #24
 80031e6:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80031ea:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 80031ee:	b2cc      	uxtb	r4, r1
 80031f0:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80031f4:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 80031f8:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 80031fc:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8003200:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8003204:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 8003208:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800320c:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8003210:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8003214:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 8003218:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800321c:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 8003220:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8003224:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8003228:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800322c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003230:	ea84 040c 	eor.w	r4, r4, ip
 8003234:	4061      	eors	r1, r4
                rk[3] =
 8003236:	60f1      	str	r1, [r6, #12]
            for (i = 1; i < aes->rounds; i++) {
 8003238:	e74c      	b.n	80030d4 <wc_AesSetKey+0x2b4>
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 800323a:	f851 0c10 	ldr.w	r0, [r1, #-16]
 800323e:	691f      	ldr	r7, [r3, #16]
 8003240:	f841 7c10 	str.w	r7, [r1, #-16]
 8003244:	6118      	str	r0, [r3, #16]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 8003246:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800324a:	695f      	ldr	r7, [r3, #20]
 800324c:	f841 7c0c 	str.w	r7, [r1, #-12]
 8003250:	6158      	str	r0, [r3, #20]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 8003252:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8003256:	699f      	ldr	r7, [r3, #24]
 8003258:	f841 7c08 	str.w	r7, [r1, #-8]
 800325c:	6198      	str	r0, [r3, #24]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800325e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003262:	69df      	ldr	r7, [r3, #28]
 8003264:	f841 7c04 	str.w	r7, [r1, #-4]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 8003268:	3204      	adds	r2, #4
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800326a:	61d8      	str	r0, [r3, #28]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800326c:	e71e      	b.n	80030ac <wc_AesSetKey+0x28c>
    } /* wc_AesSetKey() */
 800326e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8003272:	b003      	add	sp, #12
 8003274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003278:	08015f00 	.word	0x08015f00
 800327c:	08014e00 	.word	0x08014e00

08003280 <wc_AesCbcEncrypt>:
    {
 8003280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003284:	460d      	mov	r5, r1
 8003286:	4616      	mov	r6, r2
        if (aes == NULL || out == NULL || in == NULL) {
 8003288:	4607      	mov	r7, r0
 800328a:	b300      	cbz	r0, 80032ce <wc_AesCbcEncrypt+0x4e>
 800328c:	b1f9      	cbz	r1, 80032ce <wc_AesCbcEncrypt+0x4e>
 800328e:	b1f2      	cbz	r2, 80032ce <wc_AesCbcEncrypt+0x4e>
        if (sz == 0) {
 8003290:	b913      	cbnz	r3, 8003298 <wc_AesCbcEncrypt+0x18>
            return 0;
 8003292:	2000      	movs	r0, #0
    } /* wc_AesCbcEncrypt */
 8003294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (blocks--) {
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	18cc      	adds	r4, r1, r3
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 800329e:	f100 08f8 	add.w	r8, r0, #248	; 0xf8
        while (blocks--) {
 80032a2:	42a5      	cmp	r5, r4
 80032a4:	d0f5      	beq.n	8003292 <wc_AesCbcEncrypt+0x12>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 80032a6:	2210      	movs	r2, #16
 80032a8:	4631      	mov	r1, r6
 80032aa:	4640      	mov	r0, r8
 80032ac:	f7fe fdeb 	bl	8001e86 <xorbuf>
            ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
 80032b0:	4642      	mov	r2, r8
 80032b2:	4641      	mov	r1, r8
 80032b4:	4638      	mov	r0, r7
 80032b6:	f7fe fe21 	bl	8001efc <wc_AesEncrypt>
            if (ret != 0)
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d1ea      	bne.n	8003294 <wc_AesCbcEncrypt+0x14>
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
 80032be:	4628      	mov	r0, r5
 80032c0:	2210      	movs	r2, #16
 80032c2:	4641      	mov	r1, r8
 80032c4:	f00f ff7c 	bl	80131c0 <memcpy>
            out += AES_BLOCK_SIZE;
 80032c8:	3510      	adds	r5, #16
            in  += AES_BLOCK_SIZE;
 80032ca:	3610      	adds	r6, #16
 80032cc:	e7e9      	b.n	80032a2 <wc_AesCbcEncrypt+0x22>
            return BAD_FUNC_ARG;
 80032ce:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80032d2:	e7df      	b.n	8003294 <wc_AesCbcEncrypt+0x14>

080032d4 <wc_AesCbcDecrypt>:
    {
 80032d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d8:	b089      	sub	sp, #36	; 0x24
 80032da:	4688      	mov	r8, r1
 80032dc:	9201      	str	r2, [sp, #4]
        if (aes == NULL || out == NULL || in == NULL) {
 80032de:	4605      	mov	r5, r0
 80032e0:	2800      	cmp	r0, #0
 80032e2:	f000 8724 	beq.w	800412e <wc_AesCbcDecrypt+0xe5a>
 80032e6:	2900      	cmp	r1, #0
 80032e8:	f000 8721 	beq.w	800412e <wc_AesCbcDecrypt+0xe5a>
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	f000 871e 	beq.w	800412e <wc_AesCbcDecrypt+0xe5a>
        if (sz == 0) {
 80032f2:	b91b      	cbnz	r3, 80032fc <wc_AesCbcDecrypt+0x28>
            return 0;
 80032f4:	2000      	movs	r0, #0
    }
 80032f6:	b009      	add	sp, #36	; 0x24
 80032f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blocks = sz / AES_BLOCK_SIZE;
 80032fc:	091a      	lsrs	r2, r3, #4
        if (sz % AES_BLOCK_SIZE) {
 80032fe:	071b      	lsls	r3, r3, #28
 8003300:	f040 8715 	bne.w	800412e <wc_AesCbcDecrypt+0xe5a>
 8003304:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 8003308:	9303      	str	r3, [sp, #12]
                       DEC_ROUND_T_S( 0);
 800330a:	4c03      	ldr	r4, [pc, #12]	; (8003318 <wc_AesCbcDecrypt+0x44>)
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 800330c:	4f03      	ldr	r7, [pc, #12]	; (800331c <wc_AesCbcDecrypt+0x48>)
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 800330e:	f500 7384 	add.w	r3, r0, #264	; 0x108
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	e004      	b.n	8003320 <wc_AesCbcDecrypt+0x4c>
 8003316:	bf00      	nop
 8003318:	08014e00 	.word	0x08014e00
 800331c:	08015e00 	.word	0x08015e00
        while (blocks--) {
 8003320:	9b03      	ldr	r3, [sp, #12]
 8003322:	4598      	cmp	r8, r3
 8003324:	d0e6      	beq.n	80032f4 <wc_AesCbcDecrypt+0x20>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 8003326:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800332a:	2210      	movs	r2, #16
 800332c:	f00f ff48 	bl	80131c0 <memcpy>
    r = aes->rounds >> 1;
 8003330:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8003334:	ea4f 0a53 	mov.w	sl, r3, lsr #1
    if (r > 7 || r == 0) {
 8003338:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800333c:	2b06      	cmp	r3, #6
 800333e:	f200 86f2 	bhi.w	8004126 <wc_AesCbcDecrypt+0xe52>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 8003342:	9902      	ldr	r1, [sp, #8]
 8003344:	2204      	movs	r2, #4
 8003346:	a804      	add	r0, sp, #16
 8003348:	f00f ff3a 	bl	80131c0 <memcpy>
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
 800334c:	2204      	movs	r2, #4
 800334e:	f505 7186 	add.w	r1, r5, #268	; 0x10c
 8003352:	a805      	add	r0, sp, #20
 8003354:	f00f ff34 	bl	80131c0 <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 8003358:	2204      	movs	r2, #4
 800335a:	f505 7188 	add.w	r1, r5, #272	; 0x110
 800335e:	a806      	add	r0, sp, #24
 8003360:	f00f ff2e 	bl	80131c0 <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 8003364:	2204      	movs	r2, #4
 8003366:	f505 718a 	add.w	r1, r5, #276	; 0x114
 800336a:	a807      	add	r0, sp, #28
 800336c:	f00f ff28 	bl	80131c0 <memcpy>
    s0 = ByteReverseWord32(s0);
 8003370:	9804      	ldr	r0, [sp, #16]
 8003372:	f7fe fd53 	bl	8001e1c <ByteReverseWord32>
 8003376:	4681      	mov	r9, r0
    s1 = ByteReverseWord32(s1);
 8003378:	9805      	ldr	r0, [sp, #20]
 800337a:	f7fe fd4f 	bl	8001e1c <ByteReverseWord32>
 800337e:	4601      	mov	r1, r0
    s2 = ByteReverseWord32(s2);
 8003380:	9806      	ldr	r0, [sp, #24]
 8003382:	f7fe fd4b 	bl	8001e1c <ByteReverseWord32>
 8003386:	4602      	mov	r2, r0
    s3 = ByteReverseWord32(s3);
 8003388:	9807      	ldr	r0, [sp, #28]
 800338a:	f7fe fd47 	bl	8001e1c <ByteReverseWord32>
    s0 ^= rk[0];
 800338e:	682b      	ldr	r3, [r5, #0]
 8003390:	ea89 0903 	eor.w	r9, r9, r3
    s1 ^= rk[1];
 8003394:	686b      	ldr	r3, [r5, #4]
 8003396:	ea81 0c03 	eor.w	ip, r1, r3
    s2 ^= rk[2];
 800339a:	68ab      	ldr	r3, [r5, #8]
 800339c:	ea82 0e03 	eor.w	lr, r2, r3
    s3 ^= rk[3];
 80033a0:	68eb      	ldr	r3, [r5, #12]
 80033a2:	4058      	eors	r0, r3
                       DEC_ROUND_T_S( 0);
 80033a4:	fa5f f38c 	uxtb.w	r3, ip
 80033a8:	ea4f 6219 	mov.w	r2, r9, lsr #24
 80033ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033b0:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 80033b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80033b8:	405e      	eors	r6, r3
 80033ba:	692b      	ldr	r3, [r5, #16]
 80033bc:	405e      	eors	r6, r3
 80033be:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80033c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033c6:	fa5f f28e 	uxtb.w	r2, lr
 80033ca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80033ce:	405e      	eors	r6, r3
 80033d0:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80033d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033d8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80033dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80033e0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80033e4:	405e      	eors	r6, r3
 80033e6:	ea4f 631c 	mov.w	r3, ip, lsr #24
 80033ea:	b2c1      	uxtb	r1, r0
 80033ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80033f0:	405a      	eors	r2, r3
 80033f2:	696b      	ldr	r3, [r5, #20]
 80033f4:	405a      	eors	r2, r3
 80033f6:	f3c9 4307 	ubfx	r3, r9, #16, #8
 80033fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033fe:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8003402:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003406:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800340a:	405a      	eors	r2, r3
 800340c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003410:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003414:	0e00      	lsrs	r0, r0, #24
 8003416:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800341a:	405a      	eors	r2, r3
 800341c:	ea4f 631e 	mov.w	r3, lr, lsr #24
 8003420:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8003424:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003428:	4059      	eors	r1, r3
 800342a:	69ab      	ldr	r3, [r5, #24]
 800342c:	4059      	eors	r1, r3
 800342e:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8003432:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003436:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 800343a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800343e:	4059      	eors	r1, r3
 8003440:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8003444:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003448:	fa5f f989 	uxtb.w	r9, r9
 800344c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003450:	f509 7940 	add.w	r9, r9, #768	; 0x300
 8003454:	4059      	eors	r1, r3
 8003456:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800345a:	f854 0029 	ldr.w	r0, [r4, r9, lsl #2]
 800345e:	ea83 0900 	eor.w	r9, r3, r0
 8003462:	69eb      	ldr	r3, [r5, #28]
 8003464:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8003468:	ea89 0903 	eor.w	r9, r9, r3
 800346c:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8003470:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 8003474:	ea89 0903 	eor.w	r9, r9, r3
 8003478:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 800347c:	b2d0      	uxtb	r0, r2
                       DEC_ROUND_T_S( 0);
 800347e:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 8003482:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003486:	0e33      	lsrs	r3, r6, #24
 8003488:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 800348c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003490:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003494:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8003498:	ea83 0e00 	eor.w	lr, r3, r0
 800349c:	6a2b      	ldr	r3, [r5, #32]
 800349e:	ea8e 0e03 	eor.w	lr, lr, r3
 80034a2:	f3c9 4307 	ubfx	r3, r9, #16, #8
 80034a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034aa:	b2c8      	uxtb	r0, r1
 80034ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80034b0:	ea8e 0e03 	eor.w	lr, lr, r3
 80034b4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80034b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034bc:	f500 7040 	add.w	r0, r0, #768	; 0x300
 80034c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80034c4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80034c8:	ea8e 0e03 	eor.w	lr, lr, r3
 80034cc:	0e13      	lsrs	r3, r2, #24
 80034ce:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80034d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80034d6:	4058      	eors	r0, r3
 80034d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034da:	4058      	eors	r0, r3
 80034dc:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80034e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034e4:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80034e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80034ec:	4058      	eors	r0, r3
 80034ee:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80034f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if (r > 5) {
 80034f6:	f1ba 0f05 	cmp.w	sl, #5
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 80034fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80034fe:	ea80 0003 	eor.w	r0, r0, r3
 8003502:	fa5f f389 	uxtb.w	r3, r9
 8003506:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800350a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800350e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003512:	ea8c 0c03 	eor.w	ip, ip, r3
 8003516:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003518:	ea8c 0c03 	eor.w	ip, ip, r3
 800351c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8003520:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003524:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003528:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800352c:	ea8c 0c03 	eor.w	ip, ip, r3
 8003530:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003534:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003538:	b2f6      	uxtb	r6, r6
 800353a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800353e:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8003542:	ea8c 0c03 	eor.w	ip, ip, r3
 8003546:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800354a:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800354e:	ea83 0906 	eor.w	r9, r3, r6
 8003552:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003554:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003558:	ea89 0903 	eor.w	r9, r9, r3
 800355c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8003560:	ea89 0903 	eor.w	r9, r9, r3
 8003564:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8003568:	ea89 0903 	eor.w	r9, r9, r3
 800356c:	b2c3      	uxtb	r3, r0
 800356e:	ea4f 621e 	mov.w	r2, lr, lsr #24
 8003572:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003576:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 800357a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800357e:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8003582:	ea86 0602 	eor.w	r6, r6, r2
 8003586:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800358a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800358c:	ea86 0602 	eor.w	r6, r6, r2
 8003590:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003594:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8003598:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800359c:	ea86 0602 	eor.w	r6, r6, r2
 80035a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80035a4:	fa5f f28c 	uxtb.w	r2, ip
 80035a8:	ea86 0603 	eor.w	r6, r6, r3
 80035ac:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80035b0:	ea4f 6310 	mov.w	r3, r0, lsr #24
 80035b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80035b8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80035bc:	ea82 0203 	eor.w	r2, r2, r3
 80035c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80035c2:	ea82 0203 	eor.w	r2, r2, r3
 80035c6:	f3ce 4307 	ubfx	r3, lr, #16, #8
 80035ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80035ce:	fa5f f189 	uxtb.w	r1, r9
 80035d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80035d6:	ea82 0203 	eor.w	r2, r2, r3
 80035da:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80035de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035e2:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80035e6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80035ea:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80035ee:	ea82 0203 	eor.w	r2, r2, r3
 80035f2:	ea4f 631c 	mov.w	r3, ip, lsr #24
 80035f6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80035fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80035fe:	ea81 0103 	eor.w	r1, r1, r3
 8003602:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003604:	ea81 0103 	eor.w	r1, r1, r3
 8003608:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800360c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003610:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8003614:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003618:	ea81 0103 	eor.w	r1, r1, r3
 800361c:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8003620:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003624:	fa5f fe8e 	uxtb.w	lr, lr
 8003628:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800362c:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8003630:	ea81 0103 	eor.w	r1, r1, r3
 8003634:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8003638:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800363c:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8003640:	ea83 0909 	eor.w	r9, r3, r9
 8003644:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003646:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800364a:	ea89 0903 	eor.w	r9, r9, r3
 800364e:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003652:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 8003656:	ea89 0903 	eor.w	r9, r9, r3
 800365a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800365e:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
 8003662:	b2d3      	uxtb	r3, r2
 8003664:	ea4f 6016 	mov.w	r0, r6, lsr #24
 8003668:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800366c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003670:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003674:	ea80 0e03 	eor.w	lr, r0, r3
 8003678:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800367c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800367e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003682:	ea8e 0e00 	eor.w	lr, lr, r0
 8003686:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800368a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800368e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003692:	ea8e 0e00 	eor.w	lr, lr, r0
 8003696:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800369a:	b2c8      	uxtb	r0, r1
 800369c:	ea8e 0e03 	eor.w	lr, lr, r3
 80036a0:	f500 7040 	add.w	r0, r0, #768	; 0x300
 80036a4:	ea4f 6312 	mov.w	r3, r2, lsr #24
 80036a8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80036ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80036b0:	ea80 0003 	eor.w	r0, r0, r3
 80036b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80036b6:	ea80 0003 	eor.w	r0, r0, r3
 80036ba:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80036be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80036c2:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 80036c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80036ca:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 80036ce:	ea80 0003 	eor.w	r0, r0, r3
 80036d2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80036d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80036da:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80036de:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80036e2:	ea80 0003 	eor.w	r0, r0, r3
 80036e6:	fa5f f389 	uxtb.w	r3, r9
 80036ea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80036ee:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80036f2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80036f6:	ea8c 0c03 	eor.w	ip, ip, r3
 80036fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80036fc:	ea8c 0c03 	eor.w	ip, ip, r3
 8003700:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8003704:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003708:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800370c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003710:	ea8c 0c03 	eor.w	ip, ip, r3
 8003714:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003718:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800371c:	b2f6      	uxtb	r6, r6
 800371e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003722:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8003726:	ea8c 0c03 	eor.w	ip, ip, r3
 800372a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800372e:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8003732:	ea83 0906 	eor.w	r9, r3, r6
 8003736:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003738:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800373c:	ea89 0903 	eor.w	r9, r9, r3
 8003740:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003744:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8003748:	ea89 0903 	eor.w	r9, r9, r3
 800374c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8003750:	ea89 0903 	eor.w	r9, r9, r3
 8003754:	b2c3      	uxtb	r3, r0
 8003756:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800375a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800375e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 8003762:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003766:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800376a:	ea86 0602 	eor.w	r6, r6, r2
 800376e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003772:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003774:	ea86 0602 	eor.w	r6, r6, r2
 8003778:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800377c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8003780:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003784:	ea86 0602 	eor.w	r6, r6, r2
 8003788:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800378c:	fa5f f28c 	uxtb.w	r2, ip
 8003790:	ea86 0603 	eor.w	r6, r6, r3
 8003794:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003798:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800379c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80037a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037a4:	ea82 0203 	eor.w	r2, r2, r3
 80037a8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80037aa:	ea82 0203 	eor.w	r2, r2, r3
 80037ae:	f3ce 4307 	ubfx	r3, lr, #16, #8
 80037b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037b6:	fa5f f189 	uxtb.w	r1, r9
 80037ba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037be:	ea82 0203 	eor.w	r2, r2, r3
 80037c2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80037c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037ca:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80037ce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037d2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80037d6:	ea82 0203 	eor.w	r2, r2, r3
 80037da:	ea4f 631c 	mov.w	r3, ip, lsr #24
 80037de:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80037e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037e6:	ea81 0103 	eor.w	r1, r1, r3
 80037ea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80037ec:	ea81 0103 	eor.w	r1, r1, r3
 80037f0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80037f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037f8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80037fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003800:	ea81 0103 	eor.w	r1, r1, r3
 8003804:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8003808:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800380c:	fa5f fe8e 	uxtb.w	lr, lr
 8003810:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003814:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8003818:	ea81 0103 	eor.w	r1, r1, r3
 800381c:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8003820:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8003824:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8003828:	ea83 0909 	eor.w	r9, r3, r9
 800382c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800382e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003832:	ea89 0903 	eor.w	r9, r9, r3
 8003836:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800383a:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 800383e:	ea89 0903 	eor.w	r9, r9, r3
 8003842:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8003846:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
 800384a:	b2d3      	uxtb	r3, r2
 800384c:	ea4f 6016 	mov.w	r0, r6, lsr #24
 8003850:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003854:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003858:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800385c:	ea80 0e03 	eor.w	lr, r0, r3
 8003860:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8003864:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8003866:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800386a:	ea8e 0e00 	eor.w	lr, lr, r0
 800386e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003872:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003876:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800387a:	ea8e 0e00 	eor.w	lr, lr, r0
 800387e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003882:	b2c8      	uxtb	r0, r1
 8003884:	ea8e 0e03 	eor.w	lr, lr, r3
 8003888:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800388c:	ea4f 6312 	mov.w	r3, r2, lsr #24
 8003890:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003894:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003898:	ea80 0003 	eor.w	r0, r0, r3
 800389c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800389e:	ea80 0003 	eor.w	r0, r0, r3
 80038a2:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80038a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038aa:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 80038ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038b2:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 80038b6:	ea80 0003 	eor.w	r0, r0, r3
 80038ba:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80038be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80038c2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80038c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038ca:	ea80 0003 	eor.w	r0, r0, r3
 80038ce:	fa5f f389 	uxtb.w	r3, r9
 80038d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038d6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80038da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038de:	ea8c 0c03 	eor.w	ip, ip, r3
 80038e2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80038e4:	ea8c 0c03 	eor.w	ip, ip, r3
 80038e8:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80038ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038f0:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80038f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80038f8:	ea8c 0c03 	eor.w	ip, ip, r3
 80038fc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003900:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003904:	b2f6      	uxtb	r6, r6
 8003906:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800390a:	f506 7640 	add.w	r6, r6, #768	; 0x300
 800390e:	ea8c 0c03 	eor.w	ip, ip, r3
 8003912:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8003916:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800391a:	ea83 0906 	eor.w	r9, r3, r6
 800391e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8003920:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003924:	ea89 0903 	eor.w	r9, r9, r3
 8003928:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800392c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8003930:	ea89 0903 	eor.w	r9, r9, r3
 8003934:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8003938:	ea89 0903 	eor.w	r9, r9, r3
 800393c:	b2c3      	uxtb	r3, r0
 800393e:	ea4f 621e 	mov.w	r2, lr, lsr #24
 8003942:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003946:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 800394a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800394e:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8003952:	ea86 0602 	eor.w	r6, r6, r2
 8003956:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800395a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800395c:	ea86 0602 	eor.w	r6, r6, r2
 8003960:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003964:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8003968:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800396c:	ea86 0602 	eor.w	r6, r6, r2
 8003970:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003974:	fa5f f28c 	uxtb.w	r2, ip
 8003978:	ea86 0603 	eor.w	r6, r6, r3
 800397c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003980:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8003984:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003988:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800398c:	ea82 0203 	eor.w	r2, r2, r3
 8003990:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003992:	ea82 0203 	eor.w	r2, r2, r3
 8003996:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800399a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800399e:	fa5f f189 	uxtb.w	r1, r9
 80039a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80039a6:	ea82 0203 	eor.w	r2, r2, r3
 80039aa:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80039ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80039b2:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80039b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80039ba:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80039be:	ea82 0203 	eor.w	r2, r2, r3
 80039c2:	ea4f 631c 	mov.w	r3, ip, lsr #24
 80039c6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80039ca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80039ce:	ea81 0103 	eor.w	r1, r1, r3
 80039d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80039d4:	ea81 0103 	eor.w	r1, r1, r3
 80039d8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80039dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80039e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80039e8:	ea81 0103 	eor.w	r1, r1, r3
 80039ec:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80039f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80039f4:	fa5f fe8e 	uxtb.w	lr, lr
 80039f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80039fc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8003a00:	ea81 0103 	eor.w	r1, r1, r3
 8003a04:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8003a08:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8003a0c:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8003a10:	ea83 0909 	eor.w	r9, r3, r9
 8003a14:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003a16:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003a1a:	ea89 0903 	eor.w	r9, r9, r3
 8003a1e:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003a22:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 8003a26:	ea89 0903 	eor.w	r9, r9, r3
 8003a2a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8003a2e:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
 8003a32:	b2d3      	uxtb	r3, r2
 8003a34:	ea4f 6016 	mov.w	r0, r6, lsr #24
 8003a38:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a3c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003a40:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a44:	ea83 0300 	eor.w	r3, r3, r0
 8003a48:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8003a4c:	ea80 0003 	eor.w	r0, r0, r3
 8003a50:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8003a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a58:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8003a5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a60:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8003a64:	ea80 0003 	eor.w	r0, r0, r3
 8003a68:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003a6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a70:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8003a74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a78:	ea80 0003 	eor.w	r0, r0, r3
 8003a7c:	b2cb      	uxtb	r3, r1
 8003a7e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003a82:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8003a86:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a8a:	ea8c 0c03 	eor.w	ip, ip, r3
 8003a8e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8003a92:	ea8c 0c03 	eor.w	ip, ip, r3
 8003a96:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8003a9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003a9e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8003aa2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003aa6:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8003aaa:	ea8c 0c03 	eor.w	ip, ip, r3
 8003aae:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8003ab2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ab6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003aba:	ea8c 0c03 	eor.w	ip, ip, r3
 8003abe:	fa5f f389 	uxtb.w	r3, r9
 8003ac2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003ac6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8003aca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003ace:	ea8e 0e03 	eor.w	lr, lr, r3
 8003ad2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003ad6:	ea8e 0e03 	eor.w	lr, lr, r3
 8003ada:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8003ade:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ae2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ae6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003aea:	ea8e 0e03 	eor.w	lr, lr, r3
 8003aee:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003af2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003af6:	b2f6      	uxtb	r6, r6
 8003af8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003afc:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8003b00:	ea8e 0e03 	eor.w	lr, lr, r3
 8003b04:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8003b08:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8003b0c:	ea86 0603 	eor.w	r6, r6, r3
 8003b10:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003b14:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003b18:	ea86 0603 	eor.w	r6, r6, r3
 8003b1c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8003b20:	ea86 0603 	eor.w	r6, r6, r3
 8003b24:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8003b28:	ea86 0603 	eor.w	r6, r6, r3
 8003b2c:	fa5f f38c 	uxtb.w	r3, ip
 8003b30:	ea4f 6210 	mov.w	r2, r0, lsr #24
 8003b34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003b38:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8003b3c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003b40:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8003b44:	ea81 0102 	eor.w	r1, r1, r2
 8003b48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b4c:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8003b50:	ea81 0102 	eor.w	r1, r1, r2
 8003b54:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003b58:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8003b5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b60:	ea81 0102 	eor.w	r1, r1, r2
 8003b64:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003b68:	fa5f f28e 	uxtb.w	r2, lr
 8003b6c:	ea81 0103 	eor.w	r1, r1, r3
 8003b70:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003b74:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8003b78:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003b7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003b80:	ea82 0203 	eor.w	r2, r2, r3
 8003b84:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003b88:	ea82 0203 	eor.w	r2, r2, r3
 8003b8c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003b90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b94:	ea4f 691e 	mov.w	r9, lr, lsr #24
 8003b98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003b9c:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003ba0:	ea82 0203 	eor.w	r2, r2, r3
 8003ba4:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003ba8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003bac:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8003bb0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003bb4:	ea82 0203 	eor.w	r2, r2, r3
 8003bb8:	b2f3      	uxtb	r3, r6
 8003bba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003bbe:	ea4f 6616 	mov.w	r6, r6, lsr #24
 8003bc2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003bc6:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8003bca:	ea89 0903 	eor.w	r9, r9, r3
 8003bce:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003bd2:	ea89 0303 	eor.w	r3, r9, r3
 8003bd6:	f3cc 4907 	ubfx	r9, ip, #16, #8
 8003bda:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8003bde:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8003be2:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003be6:	ea83 0309 	eor.w	r3, r3, r9
 8003bea:	f3c0 2907 	ubfx	r9, r0, #8, #8
 8003bee:	b2c0      	uxtb	r0, r0
 8003bf0:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003bf4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8003bf8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003bfc:	ea86 0600 	eor.w	r6, r6, r0
 8003c00:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8003c04:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8003c08:	ea86 0600 	eor.w	r6, r6, r0
 8003c0c:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8003c10:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
 8003c14:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003c18:	ea86 0600 	eor.w	r6, r6, r0
 8003c1c:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 8003c20:	ea83 0309 	eor.w	r3, r3, r9
 8003c24:	ea86 0600 	eor.w	r6, r6, r0
    if (r > 5) {
 8003c28:	f240 81e8 	bls.w	8003ffc <wc_AesCbcDecrypt+0xd28>
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 8003c2c:	fa5f fc82 	uxtb.w	ip, r2
 8003c30:	0e08      	lsrs	r0, r1, #24
 8003c32:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8003c36:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003c3a:	f854 e02c 	ldr.w	lr, [r4, ip, lsl #2]
 8003c3e:	ea80 0e0e 	eor.w	lr, r0, lr
 8003c42:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 8003c46:	ea8e 0e00 	eor.w	lr, lr, r0
 8003c4a:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8003c4e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003c52:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8003c56:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003c5a:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8003c5e:	ea8e 0e00 	eor.w	lr, lr, r0
 8003c62:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8003c66:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003c6a:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8003c6e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003c72:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003c76:	ea8e 0e00 	eor.w	lr, lr, r0
 8003c7a:	b2d8      	uxtb	r0, r3
 8003c7c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003c80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003c84:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003c88:	ea8c 0c00 	eor.w	ip, ip, r0
 8003c8c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8003c90:	ea8c 0c00 	eor.w	ip, ip, r0
 8003c94:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8003c98:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003c9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ca0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003ca4:	ea8c 0c00 	eor.w	ip, ip, r0
 8003ca8:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8003cac:	f500 7000 	add.w	r0, r0, #512	; 0x200
        if (r > 6) {
 8003cb0:	f1ba 0f07 	cmp.w	sl, #7
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 8003cb4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003cb8:	ea8c 0c00 	eor.w	ip, ip, r0
 8003cbc:	b2f0      	uxtb	r0, r6
 8003cbe:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003cc2:	ea4f 6616 	mov.w	r6, r6, lsr #24
 8003cc6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003cca:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8003cce:	ea89 0900 	eor.w	r9, r9, r0
 8003cd2:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 8003cd6:	ea89 0000 	eor.w	r0, r9, r0
 8003cda:	f3c2 4907 	ubfx	r9, r2, #16, #8
 8003cde:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8003ce2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ce6:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003cea:	ea80 0009 	eor.w	r0, r0, r9
 8003cee:	f3c1 2907 	ubfx	r9, r1, #8, #8
 8003cf2:	b2c9      	uxtb	r1, r1
 8003cf4:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8003cf8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003cfc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8003d00:	ea86 0601 	eor.w	r6, r6, r1
 8003d04:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8003d08:	ea86 0601 	eor.w	r6, r6, r1
 8003d0c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003d10:	fa5f f38c 	uxtb.w	r3, ip
 8003d14:	ea86 0601 	eor.w	r6, r6, r1
 8003d18:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d1c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8003d20:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003d24:	ea4f 621e 	mov.w	r2, lr, lsr #24
 8003d28:	ea86 0601 	eor.w	r6, r6, r1
 8003d2c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8003d30:	ea81 0103 	eor.w	r1, r1, r3
 8003d34:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8003d38:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8003d3c:	ea81 0103 	eor.w	r1, r1, r3
 8003d40:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8003d44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003d48:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003d4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003d50:	ea80 0009 	eor.w	r0, r0, r9
 8003d54:	ea81 0103 	eor.w	r1, r1, r3
 8003d58:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003d5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d60:	b2c2      	uxtb	r2, r0
 8003d62:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003d66:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003d6a:	ea81 0103 	eor.w	r1, r1, r3
 8003d6e:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8003d72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003d76:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003d7a:	ea82 0203 	eor.w	r2, r2, r3
 8003d7e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8003d82:	ea82 0203 	eor.w	r2, r2, r3
 8003d86:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8003d8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003d8e:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8003d92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003d96:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003d9a:	ea82 0203 	eor.w	r2, r2, r3
 8003d9e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003da2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003da6:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8003daa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003dae:	ea82 0203 	eor.w	r2, r2, r3
 8003db2:	b2f3      	uxtb	r3, r6
 8003db4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003db8:	ea4f 6616 	mov.w	r6, r6, lsr #24
 8003dbc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003dc0:	ea89 0903 	eor.w	r9, r9, r3
 8003dc4:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8003dc8:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8003dcc:	ea89 0303 	eor.w	r3, r9, r3
 8003dd0:	f3cc 4907 	ubfx	r9, ip, #16, #8
 8003dd4:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8003dd8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003ddc:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003de0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003de4:	ea83 0309 	eor.w	r3, r3, r9
 8003de8:	f3ce 2907 	ubfx	r9, lr, #8, #8
 8003dec:	fa5f fe8e 	uxtb.w	lr, lr
 8003df0:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8003df4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8003df8:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8003dfc:	ea86 0e0e 	eor.w	lr, r6, lr
 8003e00:	f8d5 60bc 	ldr.w	r6, [r5, #188]	; 0xbc
 8003e04:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8003e08:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8003e0c:	ea8e 0606 	eor.w	r6, lr, r6
 8003e10:	ea86 0600 	eor.w	r6, r6, r0
 8003e14:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003e18:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 8003e1c:	ea83 0309 	eor.w	r3, r3, r9
 8003e20:	ea86 0600 	eor.w	r6, r6, r0
        if (r > 6) {
 8003e24:	f040 80ea 	bne.w	8003ffc <wc_AesCbcDecrypt+0xd28>
            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
 8003e28:	fa5f fc82 	uxtb.w	ip, r2
 8003e2c:	0e08      	lsrs	r0, r1, #24
 8003e2e:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8003e32:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003e36:	f854 e02c 	ldr.w	lr, [r4, ip, lsl #2]
 8003e3a:	ea80 0e0e 	eor.w	lr, r0, lr
 8003e3e:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 8003e42:	ea8e 0e00 	eor.w	lr, lr, r0
 8003e46:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8003e4a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003e4e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8003e52:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003e56:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8003e5a:	ea8e 0e00 	eor.w	lr, lr, r0
 8003e5e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8003e62:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003e66:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8003e6a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003e6e:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003e72:	ea8e 0e00 	eor.w	lr, lr, r0
 8003e76:	b2d8      	uxtb	r0, r3
 8003e78:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003e7c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003e80:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003e84:	ea8c 0c00 	eor.w	ip, ip, r0
 8003e88:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8003e8c:	ea8c 0c00 	eor.w	ip, ip, r0
 8003e90:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8003e94:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003e98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e9c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003ea0:	ea8c 0c00 	eor.w	ip, ip, r0
 8003ea4:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8003ea8:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8003eac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003eb0:	ea8c 0c00 	eor.w	ip, ip, r0
 8003eb4:	b2f0      	uxtb	r0, r6
 8003eb6:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003eba:	0e36      	lsrs	r6, r6, #24
 8003ebc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003ec0:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8003ec4:	ea89 0900 	eor.w	r9, r9, r0
 8003ec8:	f8d5 00c8 	ldr.w	r0, [r5, #200]	; 0xc8
 8003ecc:	ea89 0000 	eor.w	r0, r9, r0
 8003ed0:	f3c2 4907 	ubfx	r9, r2, #16, #8
 8003ed4:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8003ed8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003edc:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003ee0:	ea80 0009 	eor.w	r0, r0, r9
 8003ee4:	f3c1 2907 	ubfx	r9, r1, #8, #8
 8003ee8:	b2c9      	uxtb	r1, r1
 8003eea:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8003eee:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003ef2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8003ef6:	404e      	eors	r6, r1
 8003ef8:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 8003efc:	404e      	eors	r6, r1
 8003efe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003f02:	fa5f f38c 	uxtb.w	r3, ip
 8003f06:	404e      	eors	r6, r1
 8003f08:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f0c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8003f10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f14:	ea4f 621e 	mov.w	r2, lr, lsr #24
 8003f18:	404e      	eors	r6, r1
 8003f1a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8003f1e:	4059      	eors	r1, r3
 8003f20:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8003f24:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8003f28:	4059      	eors	r1, r3
 8003f2a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8003f2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f32:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003f36:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f3a:	ea80 0009 	eor.w	r0, r0, r9
 8003f3e:	4059      	eors	r1, r3
 8003f40:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003f44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f48:	b2c2      	uxtb	r2, r0
 8003f4a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f4e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003f52:	4059      	eors	r1, r3
 8003f54:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8003f58:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003f5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f60:	405a      	eors	r2, r3
 8003f62:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 8003f66:	405a      	eors	r2, r3
 8003f68:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8003f6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f70:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8003f74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f78:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003f7c:	405a      	eors	r2, r3
 8003f7e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003f82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f86:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8003f8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f8e:	405a      	eors	r2, r3
 8003f90:	b2f3      	uxtb	r3, r6
 8003f92:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f96:	0e36      	lsrs	r6, r6, #24
 8003f98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003f9c:	ea89 0903 	eor.w	r9, r9, r3
 8003fa0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8003fa4:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8003fa8:	ea89 0303 	eor.w	r3, r9, r3
 8003fac:	f3cc 4907 	ubfx	r9, ip, #16, #8
 8003fb0:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8003fb4:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003fb8:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003fbc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003fc0:	ea83 0309 	eor.w	r3, r3, r9
 8003fc4:	f3ce 2907 	ubfx	r9, lr, #8, #8
 8003fc8:	fa5f fe8e 	uxtb.w	lr, lr
 8003fcc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8003fd0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8003fd4:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8003fd8:	ea86 0e0e 	eor.w	lr, r6, lr
 8003fdc:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
 8003fe0:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8003fe4:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8003fe8:	ea8e 0606 	eor.w	r6, lr, r6
 8003fec:	4046      	eors	r6, r0
 8003fee:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8003ff2:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 8003ff6:	ea83 0309 	eor.w	r3, r3, r9
 8003ffa:	4046      	eors	r6, r0
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 8003ffc:	0e10      	lsrs	r0, r2, #24
    rk += r * 8;
 8003ffe:	eb05 1e4a 	add.w	lr, r5, sl, lsl #5
 8004002:	ea4f 1c4a 	mov.w	ip, sl, lsl #5
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 8004006:	f817 a000 	ldrb.w	sl, [r7, r0]
 800400a:	b2d8      	uxtb	r0, r3
 800400c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8004010:	5c38      	ldrb	r0, [r7, r0]
 8004012:	ea40 600a 	orr.w	r0, r0, sl, lsl #24
 8004016:	f817 a009 	ldrb.w	sl, [r7, r9]
 800401a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 800401e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8004022:	f817 a009 	ldrb.w	sl, [r7, r9]
 8004026:	ea40 2a0a 	orr.w	sl, r0, sl, lsl #8
                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
 800402a:	f8de 0004 	ldr.w	r0, [lr, #4]
 800402e:	ea8a 0a00 	eor.w	sl, sl, r0
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
 8004032:	0e18      	lsrs	r0, r3, #24
 8004034:	f3c2 4907 	ubfx	r9, r2, #16, #8
 8004038:	f817 b000 	ldrb.w	fp, [r7, r0]
 800403c:	b2f0      	uxtb	r0, r6
 800403e:	5c38      	ldrb	r0, [r7, r0]
 8004040:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 8004044:	f817 b009 	ldrb.w	fp, [r7, r9]
 8004048:	f3c1 2907 	ubfx	r9, r1, #8, #8
 800404c:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 8004050:	f817 b009 	ldrb.w	fp, [r7, r9]
 8004054:	ea40 2b0b 	orr.w	fp, r0, fp, lsl #8
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
 8004058:	f8de 0008 	ldr.w	r0, [lr, #8]
 800405c:	ea8b 0b00 	eor.w	fp, fp, r0
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 8004060:	0e30      	lsrs	r0, r6, #24
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8004062:	f3c6 4607 	ubfx	r6, r6, #16, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 8004066:	f817 9000 	ldrb.w	r9, [r7, r0]
 800406a:	b2c8      	uxtb	r0, r1
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800406c:	0e09      	lsrs	r1, r1, #24
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800406e:	5c38      	ldrb	r0, [r7, r0]
 8004070:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
 8004074:	f3c3 4907 	ubfx	r9, r3, #16, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8004078:	f3c3 2307 	ubfx	r3, r3, #8, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800407c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8004080:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004084:	f3c2 2907 	ubfx	r9, r2, #8, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8004088:	b2d2      	uxtb	r2, r2
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800408a:	f817 9009 	ldrb.w	r9, [r7, r9]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800408e:	5cba      	ldrb	r2, [r7, r2]
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 8004090:	ea40 2909 	orr.w	r9, r0, r9, lsl #8
                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
 8004094:	f8de 000c 	ldr.w	r0, [lr, #12]
 8004098:	ea89 0900 	eor.w	r9, r9, r0
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800409c:	5c78      	ldrb	r0, [r7, r1]
 800409e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80040a2:	5dba      	ldrb	r2, [r7, r6]
 80040a4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80040a8:	5cfa      	ldrb	r2, [r7, r3]
                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
 80040aa:	f855 300c 	ldr.w	r3, [r5, ip]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 80040ae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    s0 = ByteReverseWord32(s0);
 80040b2:	4058      	eors	r0, r3
 80040b4:	f7fd feb2 	bl	8001e1c <ByteReverseWord32>
 80040b8:	9004      	str	r0, [sp, #16]
    s1 = ByteReverseWord32(s1);
 80040ba:	4650      	mov	r0, sl
 80040bc:	f7fd feae 	bl	8001e1c <ByteReverseWord32>
 80040c0:	9005      	str	r0, [sp, #20]
    s2 = ByteReverseWord32(s2);
 80040c2:	4658      	mov	r0, fp
 80040c4:	f7fd feaa 	bl	8001e1c <ByteReverseWord32>
 80040c8:	9006      	str	r0, [sp, #24]
    s3 = ByteReverseWord32(s3);
 80040ca:	4648      	mov	r0, r9
 80040cc:	f7fd fea6 	bl	8001e1c <ByteReverseWord32>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 80040d0:	2204      	movs	r2, #4
    s3 = ByteReverseWord32(s3);
 80040d2:	9007      	str	r0, [sp, #28]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 80040d4:	a904      	add	r1, sp, #16
 80040d6:	4640      	mov	r0, r8
 80040d8:	f00f f872 	bl	80131c0 <memcpy>
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
 80040dc:	2204      	movs	r2, #4
 80040de:	eb08 0002 	add.w	r0, r8, r2
 80040e2:	a905      	add	r1, sp, #20
 80040e4:	f00f f86c 	bl	80131c0 <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 80040e8:	2204      	movs	r2, #4
 80040ea:	a906      	add	r1, sp, #24
 80040ec:	f108 0008 	add.w	r0, r8, #8
 80040f0:	f00f f866 	bl	80131c0 <memcpy>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 80040f4:	f105 06f8 	add.w	r6, r5, #248	; 0xf8
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 80040f8:	2204      	movs	r2, #4
 80040fa:	a907      	add	r1, sp, #28
 80040fc:	f108 000c 	add.w	r0, r8, #12
 8004100:	f00f f85e 	bl	80131c0 <memcpy>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 8004104:	4640      	mov	r0, r8
 8004106:	2210      	movs	r2, #16
 8004108:	4631      	mov	r1, r6
 800410a:	f7fd febc 	bl	8001e86 <xorbuf>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
 800410e:	9902      	ldr	r1, [sp, #8]
 8004110:	2210      	movs	r2, #16
 8004112:	4630      	mov	r0, r6
 8004114:	f00f f854 	bl	80131c0 <memcpy>
            in  += AES_BLOCK_SIZE;
 8004118:	9b01      	ldr	r3, [sp, #4]
 800411a:	3310      	adds	r3, #16
            out += AES_BLOCK_SIZE;
 800411c:	f108 0810 	add.w	r8, r8, #16
            in  += AES_BLOCK_SIZE;
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f7ff b8fd 	b.w	8003320 <wc_AesCbcDecrypt+0x4c>
        return KEYUSAGE_E;
 8004126:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 800412a:	f7ff b8e4 	b.w	80032f6 <wc_AesCbcDecrypt+0x22>
            return BAD_FUNC_ARG;
 800412e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004132:	f7ff b8e0 	b.w	80032f6 <wc_AesCbcDecrypt+0x22>
 8004136:	bf00      	nop

08004138 <wc_AesGcmSetKey>:
{
 8004138:	b570      	push	{r4, r5, r6, lr}
    if (!((len == 16) || (len == 24) || (len == 32)))
 800413a:	f022 0308 	bic.w	r3, r2, #8
 800413e:	2b10      	cmp	r3, #16
{
 8004140:	b086      	sub	sp, #24
 8004142:	4604      	mov	r4, r0
 8004144:	460e      	mov	r6, r1
 8004146:	4615      	mov	r5, r2
    if (!((len == 16) || (len == 24) || (len == 32)))
 8004148:	d001      	beq.n	800414e <wc_AesGcmSetKey+0x16>
 800414a:	2a20      	cmp	r2, #32
 800414c:	d116      	bne.n	800417c <wc_AesGcmSetKey+0x44>
    if (aes == NULL) {
 800414e:	b1ac      	cbz	r4, 800417c <wc_AesGcmSetKey+0x44>
    XMEMSET(iv, 0, AES_BLOCK_SIZE);
 8004150:	2210      	movs	r2, #16
 8004152:	2100      	movs	r1, #0
 8004154:	a802      	add	r0, sp, #8
 8004156:	f00f f85b 	bl	8013210 <memset>
    ret = wc_AesSetKey(aes, key, len, iv, AES_ENCRYPTION);
 800415a:	2300      	movs	r3, #0
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	462a      	mov	r2, r5
 8004160:	ab02      	add	r3, sp, #8
 8004162:	4631      	mov	r1, r6
 8004164:	4620      	mov	r0, r4
 8004166:	f7fe fe5b 	bl	8002e20 <wc_AesSetKey>
    if (ret == 0)
 800416a:	b928      	cbnz	r0, 8004178 <wc_AesGcmSetKey+0x40>
        ret = wc_AesEncrypt(aes, iv, aes->gcm.H);
 800416c:	f504 7292 	add.w	r2, r4, #292	; 0x124
 8004170:	a902      	add	r1, sp, #8
 8004172:	4620      	mov	r0, r4
 8004174:	f7fd fec2 	bl	8001efc <wc_AesEncrypt>
}
 8004178:	b006      	add	sp, #24
 800417a:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 800417c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004180:	e7fa      	b.n	8004178 <wc_AesGcmSetKey+0x40>

08004182 <GHASH>:


void GHASH(Gcm* gcm, const byte* a, word32 aSz, const byte* c,
    word32 cSz, byte* s, word32 sSz)
{
 8004182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	460f      	mov	r7, r1
 800418a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800418c:	4614      	mov	r4, r2
 800418e:	461e      	mov	r6, r3
    byte x[AES_BLOCK_SIZE];
    byte scratch[AES_BLOCK_SIZE];
    word32 blocks, partial;
    byte* h;

    if (gcm == NULL) {
 8004190:	4680      	mov	r8, r0
 8004192:	2800      	cmp	r0, #0
 8004194:	f000 8087 	beq.w	80042a6 <GHASH+0x124>
        return;
    }

    h = gcm->H;
    XMEMSET(x, 0, AES_BLOCK_SIZE);
 8004198:	2210      	movs	r2, #16
 800419a:	2100      	movs	r1, #0
 800419c:	4668      	mov	r0, sp
 800419e:	f00f f837 	bl	8013210 <memset>

    /* Hash in A, the Additional Authentication Data */
    if (aSz != 0 && a != NULL) {
 80041a2:	b1fc      	cbz	r4, 80041e4 <GHASH+0x62>
 80041a4:	b1f7      	cbz	r7, 80041e4 <GHASH+0x62>
        blocks = aSz / AES_BLOCK_SIZE;
        partial = aSz % AES_BLOCK_SIZE;
 80041a6:	f024 090f 	bic.w	r9, r4, #15
 80041aa:	f004 0a0f 	and.w	sl, r4, #15
        while (blocks--) {
 80041ae:	44b9      	add	r9, r7
 80041b0:	454f      	cmp	r7, r9
 80041b2:	d17b      	bne.n	80042ac <GHASH+0x12a>
            xorbuf(x, a, AES_BLOCK_SIZE);
            GMULT(x, h);
            a += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
 80041b4:	f1ba 0f00 	cmp.w	sl, #0
 80041b8:	d014      	beq.n	80041e4 <GHASH+0x62>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
 80041ba:	2210      	movs	r2, #16
 80041bc:	2100      	movs	r1, #0
 80041be:	eb0d 0002 	add.w	r0, sp, r2
 80041c2:	f00f f825 	bl	8013210 <memset>
            XMEMCPY(scratch, a, partial);
 80041c6:	4652      	mov	r2, sl
 80041c8:	4639      	mov	r1, r7
 80041ca:	a804      	add	r0, sp, #16
 80041cc:	f00e fff8 	bl	80131c0 <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
 80041d0:	2210      	movs	r2, #16
 80041d2:	eb0d 0102 	add.w	r1, sp, r2
 80041d6:	4668      	mov	r0, sp
 80041d8:	f7fd fe55 	bl	8001e86 <xorbuf>
            GMULT(x, h);
 80041dc:	4641      	mov	r1, r8
 80041de:	4668      	mov	r0, sp
 80041e0:	f7fe fdc8 	bl	8002d74 <GMULT>
        }
    }

    /* Hash in C, the Ciphertext */
    if (cSz != 0 && c != NULL) {
 80041e4:	b1fd      	cbz	r5, 8004226 <GHASH+0xa4>
 80041e6:	b1f6      	cbz	r6, 8004226 <GHASH+0xa4>
        blocks = cSz / AES_BLOCK_SIZE;
        partial = cSz % AES_BLOCK_SIZE;
 80041e8:	f025 070f 	bic.w	r7, r5, #15
 80041ec:	f005 090f 	and.w	r9, r5, #15
        while (blocks--) {
 80041f0:	4437      	add	r7, r6
 80041f2:	42be      	cmp	r6, r7
 80041f4:	d165      	bne.n	80042c2 <GHASH+0x140>
            xorbuf(x, c, AES_BLOCK_SIZE);
            GMULT(x, h);
            c += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
 80041f6:	f1b9 0f00 	cmp.w	r9, #0
 80041fa:	d014      	beq.n	8004226 <GHASH+0xa4>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
 80041fc:	2210      	movs	r2, #16
 80041fe:	2100      	movs	r1, #0
 8004200:	eb0d 0002 	add.w	r0, sp, r2
 8004204:	f00f f804 	bl	8013210 <memset>
            XMEMCPY(scratch, c, partial);
 8004208:	464a      	mov	r2, r9
 800420a:	4631      	mov	r1, r6
 800420c:	a804      	add	r0, sp, #16
 800420e:	f00e ffd7 	bl	80131c0 <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
 8004212:	2210      	movs	r2, #16
 8004214:	eb0d 0102 	add.w	r1, sp, r2
 8004218:	4668      	mov	r0, sp
 800421a:	f7fd fe34 	bl	8001e86 <xorbuf>
            GMULT(x, h);
 800421e:	4641      	mov	r1, r8
 8004220:	4668      	mov	r0, sp
 8004222:	f7fe fda7 	bl	8002d74 <GMULT>
    buf[0] = (byte)(szHi >> 24);
 8004226:	2300      	movs	r3, #0
    sz <<= 3;
 8004228:	00e2      	lsls	r2, r4, #3
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
 800422a:	0f61      	lsrs	r1, r4, #29
    buf[0] = (byte)(szHi >> 24);
 800422c:	f88d 3010 	strb.w	r3, [sp, #16]
    buf[1] = (byte)(szHi >> 16);
 8004230:	f88d 3011 	strb.w	r3, [sp, #17]
    buf[2] = (byte)(szHi >>  8);
 8004234:	f88d 3012 	strb.w	r3, [sp, #18]
    buf[0] = (byte)(szHi >> 24);
 8004238:	f88d 3018 	strb.w	r3, [sp, #24]
    buf[1] = (byte)(szHi >> 16);
 800423c:	f88d 3019 	strb.w	r3, [sp, #25]
    buf[2] = (byte)(szHi >>  8);
 8004240:	f88d 301a 	strb.w	r3, [sp, #26]
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
 8004244:	0f6b      	lsrs	r3, r5, #29
    buf[3] = (byte)szHi;
 8004246:	f88d 1013 	strb.w	r1, [sp, #19]
    buf[7] = (byte)sz;
 800424a:	f88d 2017 	strb.w	r2, [sp, #23]
    buf[4] = (byte)(sz >> 24);
 800424e:	f3c4 5147 	ubfx	r1, r4, #21, #8
    sz <<= 3;
 8004252:	00ea      	lsls	r2, r5, #3
    buf[3] = (byte)szHi;
 8004254:	f88d 301b 	strb.w	r3, [sp, #27]
    buf[4] = (byte)(sz >> 24);
 8004258:	f3c5 5347 	ubfx	r3, r5, #21, #8
 800425c:	f88d 1014 	strb.w	r1, [sp, #20]
 8004260:	f88d 301c 	strb.w	r3, [sp, #28]
    buf[5] = (byte)(sz >> 16);
 8004264:	f3c4 314f 	ubfx	r1, r4, #13, #16
 8004268:	f3c5 334f 	ubfx	r3, r5, #13, #16
    buf[7] = (byte)sz;
 800426c:	f88d 201f 	strb.w	r2, [sp, #31]
    }

    /* Hash in the lengths of A and C in bits */
    FlattenSzInBits(&scratch[0], aSz);
    FlattenSzInBits(&scratch[8], cSz);
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 8004270:	2210      	movs	r2, #16
    buf[5] = (byte)(sz >> 16);
 8004272:	f88d 1015 	strb.w	r1, [sp, #21]
 8004276:	f88d 301d 	strb.w	r3, [sp, #29]
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 800427a:	eb0d 0102 	add.w	r1, sp, r2
    buf[6] = (byte)(sz >>  8);
 800427e:	f3c5 1357 	ubfx	r3, r5, #5, #24
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 8004282:	4668      	mov	r0, sp
    buf[6] = (byte)(sz >>  8);
 8004284:	f3c4 1457 	ubfx	r4, r4, #5, #24
 8004288:	f88d 301e 	strb.w	r3, [sp, #30]
 800428c:	f88d 4016 	strb.w	r4, [sp, #22]
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 8004290:	f7fd fdf9 	bl	8001e86 <xorbuf>
    GMULT(x, h);
 8004294:	4641      	mov	r1, r8
 8004296:	4668      	mov	r0, sp
 8004298:	f7fe fd6c 	bl	8002d74 <GMULT>

    /* Copy the result into s. */
    XMEMCPY(s, x, sSz);
 800429c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800429e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80042a0:	4669      	mov	r1, sp
 80042a2:	f00e ff8d 	bl	80131c0 <memcpy>
}
 80042a6:	b008      	add	sp, #32
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            xorbuf(x, a, AES_BLOCK_SIZE);
 80042ac:	4639      	mov	r1, r7
 80042ae:	2210      	movs	r2, #16
 80042b0:	4668      	mov	r0, sp
 80042b2:	f7fd fde8 	bl	8001e86 <xorbuf>
            GMULT(x, h);
 80042b6:	4641      	mov	r1, r8
 80042b8:	4668      	mov	r0, sp
 80042ba:	f7fe fd5b 	bl	8002d74 <GMULT>
            a += AES_BLOCK_SIZE;
 80042be:	3710      	adds	r7, #16
 80042c0:	e776      	b.n	80041b0 <GHASH+0x2e>
            xorbuf(x, c, AES_BLOCK_SIZE);
 80042c2:	4631      	mov	r1, r6
 80042c4:	2210      	movs	r2, #16
 80042c6:	4668      	mov	r0, sp
 80042c8:	f7fd fddd 	bl	8001e86 <xorbuf>
            GMULT(x, h);
 80042cc:	4641      	mov	r1, r8
 80042ce:	4668      	mov	r0, sp
 80042d0:	f7fe fd50 	bl	8002d74 <GMULT>
            c += AES_BLOCK_SIZE;
 80042d4:	3610      	adds	r6, #16
 80042d6:	e78c      	b.n	80041f2 <GHASH+0x70>

080042d8 <wc_AesGcmEncrypt>:
/* Software AES - GCM Encrypt */
int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                   const byte* iv, word32 ivSz,
                   byte* authTag, word32 authTagSz,
                   const byte* authIn, word32 authInSz)
{
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	b093      	sub	sp, #76	; 0x4c
 80042de:	4690      	mov	r8, r2
 80042e0:	461f      	mov	r7, r3
 80042e2:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80042e6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80042ea:	4689      	mov	r9, r1
    /* argument checks */
    if (aes == NULL || authTagSz > AES_BLOCK_SIZE || ivSz == 0) {
 80042ec:	4605      	mov	r5, r0
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d077      	beq.n	80043e2 <wc_AesGcmEncrypt+0x10a>
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	d075      	beq.n	80043e2 <wc_AesGcmEncrypt+0x10a>
        return BAD_FUNC_ARG;
    }

    if (authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
 80042f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80042f8:	390c      	subs	r1, #12
 80042fa:	2904      	cmp	r1, #4
 80042fc:	d871      	bhi.n	80043e2 <wc_AesGcmEncrypt+0x10a>
    if (ivSz == GCM_NONCE_MID_SZ) {
 80042fe:	2a0c      	cmp	r2, #12
    word32 blocks = sz / AES_BLOCK_SIZE;
 8004300:	ea4f 1417 	mov.w	r4, r7, lsr #4
    if (ivSz == GCM_NONCE_MID_SZ) {
 8004304:	ae06      	add	r6, sp, #24
 8004306:	d149      	bne.n	800439c <wc_AesGcmEncrypt+0xc4>
        XMEMCPY(counter, iv, ivSz);
 8004308:	4619      	mov	r1, r3
 800430a:	4630      	mov	r0, r6
 800430c:	f00e ff58 	bl	80131c0 <memcpy>
        XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 8004310:	2203      	movs	r2, #3
 8004312:	2100      	movs	r1, #0
 8004314:	a809      	add	r0, sp, #36	; 0x24
 8004316:	f00e ff7b 	bl	8013210 <memset>
        counter[AES_BLOCK_SIZE - 1] = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    XMEMCPY(initialCounter, counter, AES_BLOCK_SIZE);
 8004320:	2210      	movs	r2, #16
 8004322:	4631      	mov	r1, r6
 8004324:	a80a      	add	r0, sp, #40	; 0x28
 8004326:	f00e ff4b 	bl	80131c0 <memcpy>
        while (blocks--) {
 800432a:	eb09 1304 	add.w	r3, r9, r4, lsl #4
 800432e:	9305      	str	r3, [sp, #20]
    byte* c = out;
 8004330:	46ca      	mov	sl, r9
        while (blocks--) {
 8004332:	9b05      	ldr	r3, [sp, #20]
 8004334:	459a      	cmp	sl, r3
 8004336:	d13c      	bne.n	80043b2 <wc_AesGcmEncrypt+0xda>
    if (partial != 0) {
 8004338:	f017 030f 	ands.w	r3, r7, #15
 800433c:	d010      	beq.n	8004360 <wc_AesGcmEncrypt+0x88>
        IncrementGcmCounter(counter);
 800433e:	4630      	mov	r0, r6
 8004340:	9305      	str	r3, [sp, #20]
        ret = wc_AesEncrypt(aes, counter, scratch);
 8004342:	4631      	mov	r1, r6
        IncrementGcmCounter(counter);
 8004344:	f7fd fdce 	bl	8001ee4 <IncrementGcmCounter>
        ret = wc_AesEncrypt(aes, counter, scratch);
 8004348:	aa0e      	add	r2, sp, #56	; 0x38
 800434a:	4628      	mov	r0, r5
 800434c:	f7fd fdd6 	bl	8001efc <wc_AesEncrypt>
        if (ret != 0)
 8004350:	4604      	mov	r4, r0
 8004352:	b9f8      	cbnz	r0, 8004394 <wc_AesGcmEncrypt+0xbc>
        xorbufout(c, scratch, p, partial);
 8004354:	9b05      	ldr	r3, [sp, #20]
 8004356:	4642      	mov	r2, r8
 8004358:	a90e      	add	r1, sp, #56	; 0x38
 800435a:	4650      	mov	r0, sl
 800435c:	f7fd fd60 	bl	8001e20 <xorbufout>
    if (authTag) {
 8004360:	f1bb 0f00 	cmp.w	fp, #0
 8004364:	d03b      	beq.n	80043de <wc_AesGcmEncrypt+0x106>
        GHASH(&aes->gcm, authIn, authInSz, out, sz, authTag, authTagSz);
 8004366:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004368:	9700      	str	r7, [sp, #0]
 800436a:	e9dd 1220 	ldrd	r1, r2, [sp, #128]	; 0x80
 800436e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004372:	f505 7092 	add.w	r0, r5, #292	; 0x124
 8004376:	464b      	mov	r3, r9
 8004378:	f7ff ff03 	bl	8004182 <GHASH>
        ret = wc_AesEncrypt(aes, initialCounter, scratch);
 800437c:	aa0e      	add	r2, sp, #56	; 0x38
 800437e:	a90a      	add	r1, sp, #40	; 0x28
 8004380:	4628      	mov	r0, r5
 8004382:	f7fd fdbb 	bl	8001efc <wc_AesEncrypt>
        if (ret != 0)
 8004386:	4604      	mov	r4, r0
 8004388:	b920      	cbnz	r0, 8004394 <wc_AesGcmEncrypt+0xbc>
        xorbuf(authTag, scratch, authTagSz);
 800438a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800438c:	a90e      	add	r1, sp, #56	; 0x38
 800438e:	4658      	mov	r0, fp
 8004390:	f7fd fd79 	bl	8001e86 <xorbuf>
#endif
    {
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
                                                              authIn, authInSz);
    }
}
 8004394:	4620      	mov	r0, r4
 8004396:	b013      	add	sp, #76	; 0x4c
 8004398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 800439c:	2110      	movs	r1, #16
 800439e:	9200      	str	r2, [sp, #0]
 80043a0:	2200      	movs	r2, #0
 80043a2:	e9cd 6101 	strd	r6, r1, [sp, #4]
 80043a6:	f500 7092 	add.w	r0, r0, #292	; 0x124
 80043aa:	4611      	mov	r1, r2
 80043ac:	f7ff fee9 	bl	8004182 <GHASH>
 80043b0:	e7b6      	b.n	8004320 <wc_AesGcmEncrypt+0x48>
            IncrementGcmCounter(counter);
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7fd fd96 	bl	8001ee4 <IncrementGcmCounter>
            ret = wc_AesEncrypt(aes, counter, scratch);
 80043b8:	4631      	mov	r1, r6
 80043ba:	aa0e      	add	r2, sp, #56	; 0x38
 80043bc:	4628      	mov	r0, r5
 80043be:	f7fd fd9d 	bl	8001efc <wc_AesEncrypt>
            if (ret != 0)
 80043c2:	4604      	mov	r4, r0
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d1e5      	bne.n	8004394 <wc_AesGcmEncrypt+0xbc>
            xorbufout(c, scratch, p, AES_BLOCK_SIZE);
 80043c8:	4642      	mov	r2, r8
 80043ca:	4650      	mov	r0, sl
 80043cc:	2310      	movs	r3, #16
 80043ce:	a90e      	add	r1, sp, #56	; 0x38
 80043d0:	f7fd fd26 	bl	8001e20 <xorbufout>
            p += AES_BLOCK_SIZE;
 80043d4:	f108 0810 	add.w	r8, r8, #16
            c += AES_BLOCK_SIZE;
 80043d8:	f10a 0a10 	add.w	sl, sl, #16
 80043dc:	e7a9      	b.n	8004332 <wc_AesGcmEncrypt+0x5a>
 80043de:	465c      	mov	r4, fp
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
 80043e0:	e7d8      	b.n	8004394 <wc_AesGcmEncrypt+0xbc>
        return BAD_FUNC_ARG;
 80043e2:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80043e6:	e7d5      	b.n	8004394 <wc_AesGcmEncrypt+0xbc>

080043e8 <wc_AesGcmDecrypt>:
/* Software AES - GCM Decrypt */
int wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                     const byte* iv, word32 ivSz,
                     const byte* authTag, word32 authTagSz,
                     const byte* authIn, word32 authInSz)
{
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	b095      	sub	sp, #84	; 0x54
 80043ee:	4616      	mov	r6, r2
 80043f0:	461c      	mov	r4, r3
 80043f2:	460d      	mov	r5, r1
 80043f4:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
#endif

    /* argument checks */
    /* If the sz is non-zero, both in and out must be set. If sz is 0,
     * in and out are don't cares, as this is is the GMAC case. */
    if (aes == NULL || iv == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 80043f8:	4680      	mov	r8, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	f000 808b 	beq.w	8004516 <wc_AesGcmDecrypt+0x12e>
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8088 	beq.w	8004516 <wc_AesGcmDecrypt+0x12e>
 8004406:	b12c      	cbz	r4, 8004414 <wc_AesGcmDecrypt+0x2c>
 8004408:	2e00      	cmp	r6, #0
 800440a:	f000 8084 	beq.w	8004516 <wc_AesGcmDecrypt+0x12e>
 800440e:	2900      	cmp	r1, #0
 8004410:	f000 8081 	beq.w	8004516 <wc_AesGcmDecrypt+0x12e>
 8004414:	9920      	ldr	r1, [sp, #128]	; 0x80
 8004416:	2900      	cmp	r1, #0
 8004418:	d07d      	beq.n	8004516 <wc_AesGcmDecrypt+0x12e>
        authTag == NULL || authTagSz > AES_BLOCK_SIZE || authTagSz == 0 ||
 800441a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800441c:	3901      	subs	r1, #1
 800441e:	290f      	cmp	r1, #15
 8004420:	d879      	bhi.n	8004516 <wc_AesGcmDecrypt+0x12e>
 8004422:	2a00      	cmp	r2, #0
 8004424:	d077      	beq.n	8004516 <wc_AesGcmDecrypt+0x12e>
    if (ivSz == GCM_NONCE_MID_SZ) {
 8004426:	2a0c      	cmp	r2, #12
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 8004428:	f508 7792 	add.w	r7, r8, #292	; 0x124
 800442c:	f10d 0910 	add.w	r9, sp, #16
    if (ivSz == GCM_NONCE_MID_SZ) {
 8004430:	d154      	bne.n	80044dc <wc_AesGcmDecrypt+0xf4>
        XMEMCPY(counter, iv, ivSz);
 8004432:	4619      	mov	r1, r3
 8004434:	4648      	mov	r0, r9
 8004436:	f00e fec3 	bl	80131c0 <memcpy>
        XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 800443a:	2203      	movs	r2, #3
 800443c:	2100      	movs	r1, #0
 800443e:	a807      	add	r0, sp, #28
 8004440:	f00e fee6 	bl	8013210 <memset>
        counter[AES_BLOCK_SIZE - 1] = 1;
 8004444:	2301      	movs	r3, #1
 8004446:	f88d 301f 	strb.w	r3, [sp, #31]
    GHASH(&aes->gcm, authIn, authInSz, in, sz, Tprime, sizeof(Tprime));
 800444a:	f04f 0b10 	mov.w	fp, #16
 800444e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8004452:	e9dd 1222 	ldrd	r1, r2, [sp, #136]	; 0x88
 8004456:	4638      	mov	r0, r7
 8004458:	4633      	mov	r3, r6
 800445a:	e9cd 4a00 	strd	r4, sl, [sp]
 800445e:	f8cd b008 	str.w	fp, [sp, #8]
 8004462:	f7ff fe8e 	bl	8004182 <GHASH>
    ret = wc_AesEncrypt(aes, counter, EKY0);
 8004466:	aa10      	add	r2, sp, #64	; 0x40
 8004468:	4649      	mov	r1, r9
 800446a:	4640      	mov	r0, r8
 800446c:	f7fd fd46 	bl	8001efc <wc_AesEncrypt>
    if (ret != 0)
 8004470:	4607      	mov	r7, r0
 8004472:	bb80      	cbnz	r0, 80044d6 <wc_AesGcmDecrypt+0xee>
    xorbuf(Tprime, EKY0, sizeof(Tprime));
 8004474:	465a      	mov	r2, fp
 8004476:	a910      	add	r1, sp, #64	; 0x40
 8004478:	4650      	mov	r0, sl
 800447a:	f7fd fd04 	bl	8001e86 <xorbuf>
        while (blocks--) {
 800447e:	f024 0b0f 	bic.w	fp, r4, #15
 8004482:	44ab      	add	fp, r5
 8004484:	455d      	cmp	r5, fp
 8004486:	d133      	bne.n	80044f0 <wc_AesGcmDecrypt+0x108>
    if (partial != 0) {
 8004488:	f014 040f 	ands.w	r4, r4, #15
 800448c:	d012      	beq.n	80044b4 <wc_AesGcmDecrypt+0xcc>
        IncrementGcmCounter(counter);
 800448e:	4648      	mov	r0, r9
 8004490:	f7fd fd28 	bl	8001ee4 <IncrementGcmCounter>
        ret = wc_AesEncrypt(aes, counter, scratch);
 8004494:	4649      	mov	r1, r9
 8004496:	aa08      	add	r2, sp, #32
 8004498:	4640      	mov	r0, r8
 800449a:	f7fd fd2f 	bl	8001efc <wc_AesEncrypt>
        if (ret != 0)
 800449e:	b9d0      	cbnz	r0, 80044d6 <wc_AesGcmDecrypt+0xee>
        xorbuf(scratch, c, partial);
 80044a0:	4622      	mov	r2, r4
 80044a2:	4631      	mov	r1, r6
 80044a4:	a808      	add	r0, sp, #32
 80044a6:	f7fd fcee 	bl	8001e86 <xorbuf>
        XMEMCPY(p, scratch, partial);
 80044aa:	4622      	mov	r2, r4
 80044ac:	a908      	add	r1, sp, #32
 80044ae:	4628      	mov	r0, r5
 80044b0:	f00e fe86 	bl	80131c0 <memcpy>
                                             int length)
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
 80044b4:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 80044b8:	189a      	adds	r2, r3, r2
        compareSum |= a[i] ^ b[i];
 80044ba:	f813 1b01 	ldrb.w	r1, [r3], #1
 80044be:	f81a 0b01 	ldrb.w	r0, [sl], #1
    for (i = 0; i < length; i++) {
 80044c2:	429a      	cmp	r2, r3
        compareSum |= a[i] ^ b[i];
 80044c4:	ea81 0100 	eor.w	r1, r1, r0
 80044c8:	ea47 0701 	orr.w	r7, r7, r1
    for (i = 0; i < length; i++) {
 80044cc:	d1f5      	bne.n	80044ba <wc_AesGcmDecrypt+0xd2>
    res = 0 - (sword32)(((word32)(0 - res)) >> 31U);
 80044ce:	4278      	negs	r0, r7
 80044d0:	17c0      	asrs	r0, r0, #31
    ret = (ret & ~res) | (res & AES_GCM_AUTH_E);
 80044d2:	f020 00b3 	bic.w	r0, r0, #179	; 0xb3
#endif
    {
        return AES_GCM_decrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
                                                              authIn, authInSz);
    }
}
 80044d6:	b015      	add	sp, #84	; 0x54
 80044d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 80044dc:	2110      	movs	r1, #16
 80044de:	9200      	str	r2, [sp, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	e9cd 9101 	strd	r9, r1, [sp, #4]
 80044e6:	4638      	mov	r0, r7
 80044e8:	4611      	mov	r1, r2
 80044ea:	f7ff fe4a 	bl	8004182 <GHASH>
 80044ee:	e7ac      	b.n	800444a <wc_AesGcmDecrypt+0x62>
            IncrementGcmCounter(counter);
 80044f0:	4648      	mov	r0, r9
 80044f2:	f7fd fcf7 	bl	8001ee4 <IncrementGcmCounter>
            ret = wc_AesEncrypt(aes, counter, scratch);
 80044f6:	4649      	mov	r1, r9
 80044f8:	aa08      	add	r2, sp, #32
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7fd fcfe 	bl	8001efc <wc_AesEncrypt>
            if (ret != 0)
 8004500:	2800      	cmp	r0, #0
 8004502:	d1e8      	bne.n	80044d6 <wc_AesGcmDecrypt+0xee>
            xorbufout(p, scratch, c, AES_BLOCK_SIZE);
 8004504:	4632      	mov	r2, r6
 8004506:	4628      	mov	r0, r5
 8004508:	2310      	movs	r3, #16
 800450a:	a908      	add	r1, sp, #32
 800450c:	f7fd fc88 	bl	8001e20 <xorbufout>
            p += AES_BLOCK_SIZE;
 8004510:	3510      	adds	r5, #16
            c += AES_BLOCK_SIZE;
 8004512:	3610      	adds	r6, #16
 8004514:	e7b6      	b.n	8004484 <wc_AesGcmDecrypt+0x9c>
        return BAD_FUNC_ARG;
 8004516:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800451a:	e7dc      	b.n	80044d6 <wc_AesGcmDecrypt+0xee>

0800451c <wc_GmacSetKey>:
#endif /* WC_NO_RNG */


WOLFSSL_API int wc_GmacSetKey(Gmac* gmac, const byte* key, word32 len)
{
    if (gmac == NULL || key == NULL) {
 800451c:	b110      	cbz	r0, 8004524 <wc_GmacSetKey+0x8>
 800451e:	b109      	cbz	r1, 8004524 <wc_GmacSetKey+0x8>
        return BAD_FUNC_ARG;
    }
    return wc_AesGcmSetKey(&gmac->aes, key, len);
 8004520:	f7ff be0a 	b.w	8004138 <wc_AesGcmSetKey>
}
 8004524:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004528:	4770      	bx	lr

0800452a <wc_GmacUpdate>:


WOLFSSL_API int wc_GmacUpdate(Gmac* gmac, const byte* iv, word32 ivSz,
                              const byte* authIn, word32 authInSz,
                              byte* authTag, word32 authTagSz)
{
 800452a:	b510      	push	{r4, lr}
 800452c:	b086      	sub	sp, #24
    if (gmac == NULL) {
 800452e:	b178      	cbz	r0, 8004550 <wc_GmacUpdate+0x26>
        return BAD_FUNC_ARG;
    }

    return wc_AesGcmEncrypt(&gmac->aes, NULL, NULL, 0, iv, ivSz,
 8004530:	9c08      	ldr	r4, [sp, #32]
 8004532:	9100      	str	r1, [sp, #0]
 8004534:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004542:	2300      	movs	r3, #0
 8004544:	461a      	mov	r2, r3
 8004546:	4619      	mov	r1, r3
 8004548:	f7ff fec6 	bl	80042d8 <wc_AesGcmEncrypt>
                                         authTag, authTagSz, authIn, authInSz);
}
 800454c:	b006      	add	sp, #24
 800454e:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 8004550:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004554:	e7fa      	b.n	800454c <wc_GmacUpdate+0x22>

08004556 <wc_AesInit>:
/* Initialize Aes for use with async hardware */
int wc_AesInit(Aes* aes, void* heap, int devId)
{
    int ret = 0;

    if (aes == NULL)
 8004556:	b118      	cbz	r0, 8004560 <wc_AesInit+0xa>
        return BAD_FUNC_ARG;

    aes->heap = heap;
 8004558:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
#endif

#if defined(WOLFSSL_RENESAS_FSPSM)
    XMEMSET(&aes->ctx, 0, sizeof(aes->ctx));
#endif
    return ret;
 800455c:	2000      	movs	r0, #0
 800455e:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8004560:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8004564:	4770      	bx	lr

08004566 <wc_AesFree>:
#if ((defined(WOLFSSL_RENESAS_FSPSM_TLS) || \
    defined(WOLFSSL_RENESAS_FSPSM_CRYPTONLY)) && \
    !defined(NO_WOLFSSL_RENESAS_FSPSM_AES))
    wc_fspsm_Aesfree(aes);
#endif
}
 8004566:	4770      	bx	lr

08004568 <ByteReverseWord32>:
}
 8004568:	ba00      	rev	r0, r0
 800456a:	4770      	bx	lr

0800456c <IPERM>:
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 800456c:	680b      	ldr	r3, [r1, #0]
 800456e:	ea4f 7333 	mov.w	r3, r3, ror #28

    static WC_INLINE void IPERM(word32* left, word32* right)
    {
        word32 work;

        *right = rotlFixed(*right, 4U);
 8004572:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xf0f0f0f0;
 8004574:	6802      	ldr	r2, [r0, #0]
 8004576:	4053      	eors	r3, r2
 8004578:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
        *left ^= work;
 800457c:	405a      	eors	r2, r3
 800457e:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 20U);
 8004580:	680a      	ldr	r2, [r1, #0]
 8004582:	4053      	eors	r3, r2
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 8004584:	ea4f 5333 	mov.w	r3, r3, ror #20
 8004588:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xffff0000;
 800458a:	6802      	ldr	r2, [r0, #0]
 800458c:	4053      	eors	r3, r2
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	041b      	lsls	r3, r3, #16
        *left ^= work;
 8004592:	405a      	eors	r2, r3
 8004594:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 18U);
 8004596:	680a      	ldr	r2, [r1, #0]
 8004598:	4053      	eors	r3, r2
 800459a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800459e:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0x33333333;
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	4053      	eors	r3, r2
 80045a4:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
        *left ^= work;
 80045a8:	405a      	eors	r2, r3
 80045aa:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 6U);
 80045ac:	680a      	ldr	r2, [r1, #0]
 80045ae:	4053      	eors	r3, r2
 80045b0:	ea4f 13b3 	mov.w	r3, r3, ror #6
 80045b4:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0x00ff00ff;
 80045b6:	6802      	ldr	r2, [r0, #0]
 80045b8:	4053      	eors	r3, r2
 80045ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        *left ^= work;
 80045be:	405a      	eors	r2, r3
 80045c0:	6002      	str	r2, [r0, #0]

        *right = rotlFixed(*right^work, 9U);
 80045c2:	680a      	ldr	r2, [r1, #0]
 80045c4:	4053      	eors	r3, r2
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 80045c6:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80045ca:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xaaaaaaaa;
 80045cc:	6802      	ldr	r2, [r0, #0]
 80045ce:	4053      	eors	r3, r2
 80045d0:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        *left = rotlFixed(*left^work, 1U);
 80045d4:	405a      	eors	r2, r3
 80045d6:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80045da:	6002      	str	r2, [r0, #0]
        *right ^= work;
 80045dc:	680a      	ldr	r2, [r1, #0]
 80045de:	4053      	eors	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
    }
 80045e2:	4770      	bx	lr

080045e4 <FPERM>:
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 80045e4:	680a      	ldr	r2, [r1, #0]
 80045e6:	ea4f 0272 	mov.w	r2, r2, ror #1

    static WC_INLINE void FPERM(word32* left, word32* right)
    {
        word32 work;

        *right = rotrFixed(*right, 1U);
 80045ea:	600a      	str	r2, [r1, #0]
        work = (*left ^ *right) & 0xaaaaaaaa;
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	4053      	eors	r3, r2
 80045f0:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        *right ^= work;
 80045f4:	405a      	eors	r2, r3
 80045f6:	600a      	str	r2, [r1, #0]

        *left = rotrFixed(*left^work, 9U);
 80045f8:	6802      	ldr	r2, [r0, #0]
 80045fa:	4053      	eors	r3, r2
 80045fc:	ea4f 2373 	mov.w	r3, r3, ror #9
 8004600:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0x00ff00ff;
 8004602:	680a      	ldr	r2, [r1, #0]
 8004604:	4053      	eors	r3, r2
 8004606:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        *right ^= work;
 800460a:	405a      	eors	r2, r3
 800460c:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 6U);
 800460e:	6802      	ldr	r2, [r0, #0]
 8004610:	4053      	eors	r3, r2
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 8004612:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8004616:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0x33333333;
 8004618:	680a      	ldr	r2, [r1, #0]
 800461a:	4053      	eors	r3, r2
 800461c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
        *right ^= work;
 8004620:	405a      	eors	r2, r3
 8004622:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 18U);
 8004624:	6802      	ldr	r2, [r0, #0]
 8004626:	4053      	eors	r3, r2
 8004628:	ea4f 33b3 	mov.w	r3, r3, ror #14
 800462c:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0xffff0000;
 800462e:	680a      	ldr	r2, [r1, #0]
 8004630:	4053      	eors	r3, r2
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	041b      	lsls	r3, r3, #16
        *right ^= work;
 8004636:	405a      	eors	r2, r3
 8004638:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 20U);
 800463a:	6802      	ldr	r2, [r0, #0]
 800463c:	4053      	eors	r3, r2
 800463e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8004642:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0xf0f0f0f0;
 8004644:	680a      	ldr	r2, [r1, #0]
 8004646:	4053      	eors	r3, r2
 8004648:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
        *right ^= work;
 800464c:	405a      	eors	r2, r3
 800464e:	600a      	str	r2, [r1, #0]

        *left = rotrFixed(*left^work, 4U);
 8004650:	6802      	ldr	r2, [r0, #0]
 8004652:	4053      	eors	r3, r2
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 8004654:	ea4f 1333 	mov.w	r3, r3, ror #4
 8004658:	6003      	str	r3, [r0, #0]
    }
 800465a:	4770      	bx	lr

0800465c <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
 800465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        word32 l = *lIn, r = *rIn, i;
 8004660:	f8d1 c000 	ldr.w	ip, [r1]
 8004664:	6806      	ldr	r6, [r0, #0]

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
 8004666:	4b49      	ldr	r3, [pc, #292]	; (800478c <DesRawProcessBlock+0x130>)
 8004668:	f102 0780 	add.w	r7, r2, #128	; 0x80
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
 800466c:	6814      	ldr	r4, [r2, #0]
 800466e:	ea84 1e3c 	eor.w	lr, r4, ip, ror #4
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
 8004672:	6854      	ldr	r4, [r2, #4]
 8004674:	ea8c 0404 	eor.w	r4, ip, r4
            l ^= Spbox[6][(work) & 0x3f]
 8004678:	f00e 053f 	and.w	r5, lr, #63	; 0x3f
            l ^= Spbox[7][(work) & 0x3f]
 800467c:	f004 083f 	and.w	r8, r4, #63	; 0x3f
            l ^= Spbox[6][(work) & 0x3f]
 8004680:	f505 75c0 	add.w	r5, r5, #384	; 0x180
            l ^= Spbox[7][(work) & 0x3f]
 8004684:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
 8004688:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800468c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8004690:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
 8004694:	f3ce 2805 	ubfx	r8, lr, #8, #6
 8004698:	f508 7880 	add.w	r8, r8, #256	; 0x100
        for (i=0; i<8; i++)
 800469c:	3210      	adds	r2, #16
            l ^= Spbox[7][(work) & 0x3f]
 800469e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 80046a2:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
 80046a6:	f3ce 4805 	ubfx	r8, lr, #16, #6
 80046aa:	f108 0880 	add.w	r8, r8, #128	; 0x80
              ^  Spbox[0][(work >> 24) & 0x3f];
 80046ae:	f3ce 6e05 	ubfx	lr, lr, #24, #6
            l ^= Spbox[7][(work) & 0x3f]
 80046b2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 80046b6:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80046ba:	ea85 0508 	eor.w	r5, r5, r8
 80046be:	ea85 050e 	eor.w	r5, r5, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
 80046c2:	f3c4 2e05 	ubfx	lr, r4, #8, #6
 80046c6:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
 80046ca:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80046ce:	ea85 050e 	eor.w	r5, r5, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
 80046d2:	f3c4 4e05 	ubfx	lr, r4, #16, #6
 80046d6:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
              ^  Spbox[1][(work >> 24) & 0x3f];
 80046da:	f3c4 6405 	ubfx	r4, r4, #24, #6
 80046de:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
 80046e0:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80046e4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80046e8:	ea85 050e 	eor.w	r5, r5, lr
 80046ec:	4065      	eors	r5, r4
 80046ee:	406e      	eors	r6, r5
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
 80046f0:	f852 4c04 	ldr.w	r4, [r2, #-4]
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 80046f4:	f852 5c08 	ldr.w	r5, [r2, #-8]
            work = l ^ kptr[4*i+3];
 80046f8:	ea86 0e04 	eor.w	lr, r6, r4
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 80046fc:	ea85 1536 	eor.w	r5, r5, r6, ror #4
            r ^= Spbox[6][(work) & 0x3f]
 8004700:	f005 043f 	and.w	r4, r5, #63	; 0x3f
            r ^= Spbox[7][(work) & 0x3f]
 8004704:	f00e 083f 	and.w	r8, lr, #63	; 0x3f
            r ^= Spbox[6][(work) & 0x3f]
 8004708:	f504 74c0 	add.w	r4, r4, #384	; 0x180
            r ^= Spbox[7][(work) & 0x3f]
 800470c:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
 8004710:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8004714:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8004718:	ea84 0408 	eor.w	r4, r4, r8
 800471c:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
 8004720:	f3ce 2c05 	ubfx	ip, lr, #8, #6
 8004724:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
        for (i=0; i<8; i++)
 8004728:	4297      	cmp	r7, r2
 800472a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800472e:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
 8004732:	f3ce 4c05 	ubfx	ip, lr, #16, #6
 8004736:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
              ^  Spbox[1][(work >> 24) & 0x3f];
 800473a:	f3ce 6e05 	ubfx	lr, lr, #24, #6
 800473e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8004742:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 8004746:	ea84 040c 	eor.w	r4, r4, ip
 800474a:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
 800474e:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[4][(work >> 8) & 0x3f]
 8004752:	f3c5 2c05 	ubfx	ip, r5, #8, #6
 8004756:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800475a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800475e:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[2][(work >> 16) & 0x3f]
 8004762:	f3c5 4c05 	ubfx	ip, r5, #16, #6
 8004766:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
              ^  Spbox[0][(work >> 24) & 0x3f];
 800476a:	f3c5 6505 	ubfx	r5, r5, #24, #6
 800476e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
            r ^= Spbox[7][(work) & 0x3f]
 8004772:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8004776:	ea84 040c 	eor.w	r4, r4, ip
 800477a:	ea84 0c05 	eor.w	ip, r4, r5
        for (i=0; i<8; i++)
 800477e:	f47f af75 	bne.w	800466c <DesRawProcessBlock+0x10>
        }

        *lIn = l; *rIn = r;
 8004782:	6006      	str	r6, [r0, #0]
 8004784:	f8c1 c000 	str.w	ip, [r1]
    }
 8004788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478c:	08016f28 	.word	0x08016f28

08004790 <DesSetKey>:
    {
 8004790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4606      	mov	r6, r0
        byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8004796:	2078      	movs	r0, #120	; 0x78
    {
 8004798:	468b      	mov	fp, r1
 800479a:	4615      	mov	r5, r2
        byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800479c:	f00e fd00 	bl	80131a0 <malloc>
        if (buffer == NULL)
 80047a0:	4604      	mov	r4, r0
 80047a2:	2800      	cmp	r0, #0
 80047a4:	f000 8095 	beq.w	80048d2 <DesSetKey+0x142>
            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 80047a8:	494b      	ldr	r1, [pc, #300]	; (80048d8 <DesSetKey+0x148>)
                    bytebit[m])                    /* and which bit of that byte  */
 80047aa:	4f4c      	ldr	r7, [pc, #304]	; (80048dc <DesSetKey+0x14c>)
            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 80047ac:	f100 0938 	add.w	r9, r0, #56	; 0x38
            byte* const  ks   = pcr  + 56;
 80047b0:	f100 0870 	add.w	r8, r0, #112	; 0x70
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 80047b4:	1e42      	subs	r2, r0, #1
 80047b6:	3037      	adds	r0, #55	; 0x37
                l = pc1[j] - 1;                    /* integer bit location        */
 80047b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047bc:	3b01      	subs	r3, #1
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 80047be:	ea4f 0ce3 	mov.w	ip, r3, asr #3
                m = l & 07;                        /* find bit                    */
 80047c2:	f003 0307 	and.w	r3, r3, #7
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 80047c6:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80047ca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
                    ? 1 : 0;                       /* and store 1-bit result      */
 80047ce:	ea1c 0f03 	tst.w	ip, r3
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	f802 3f01 	strb.w	r3, [r2, #1]!
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 80047dc:	4290      	cmp	r0, r2
 80047de:	d1eb      	bne.n	80047b8 <DesSetKey+0x28>
 80047e0:	f105 0380 	add.w	r3, r5, #128	; 0x80
 80047e4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80048e0 <DesSetKey+0x150>
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	462e      	mov	r6, r5
 80047ec:	462f      	mov	r7, r5
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
 80047ee:	2208      	movs	r2, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	4640      	mov	r0, r8
 80047f4:	f00e fd0c 	bl	8013210 <memset>
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 80047f8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80047fc:	4649      	mov	r1, r9
 80047fe:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 8004800:	201c      	movs	r0, #28
 8004802:	4298      	cmp	r0, r3
 8004804:	bfd4      	ite	le
 8004806:	f1a3 001c 	suble.w	r0, r3, #28
 800480a:	4618      	movgt	r0, r3
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 800480c:	3201      	adds	r2, #1
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 800480e:	5c20      	ldrb	r0, [r4, r0]
                    pcr[j] =
 8004810:	f801 0b01 	strb.w	r0, [r1], #1
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 8004814:	2a38      	cmp	r2, #56	; 0x38
 8004816:	f103 0301 	add.w	r3, r3, #1
 800481a:	d155      	bne.n	80048c8 <DesSetKey+0x138>
 800481c:	4831      	ldr	r0, [pc, #196]	; (80048e4 <DesSetKey+0x154>)
                for (j = 0; j < 48; j++) {        /* select bits individually     */
 800481e:	2300      	movs	r3, #0
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 8004820:	f04f 0c06 	mov.w	ip, #6
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
 8004824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004828:	444a      	add	r2, r9
 800482a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800482e:	b16a      	cbz	r2, 800484c <DesSetKey+0xbc>
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 8004830:	fbb3 f2fc 	udiv	r2, r3, ip
 8004834:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 80048dc <DesSetKey+0x14c>
                        l= j % 6;                 /* mask it in if it's there     */
 8004838:	fb0c 3112 	mls	r1, ip, r2, r3
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 800483c:	f85e e021 	ldr.w	lr, [lr, r1, lsl #2]
 8004840:	f818 1002 	ldrb.w	r1, [r8, r2]
 8004844:	ea41 01ae 	orr.w	r1, r1, lr, asr #2
 8004848:	f808 1002 	strb.w	r1, [r8, r2]
                for (j = 0; j < 48; j++) {        /* select bits individually     */
 800484c:	3301      	adds	r3, #1
 800484e:	2b30      	cmp	r3, #48	; 0x30
 8004850:	d1e8      	bne.n	8004824 <DesSetKey+0x94>
                         | ((word32) ks[2] << 16)
 8004852:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
                out[2*i] = ((word32) ks[0] << 24)
 8004856:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
                         | ((word32) ks[2] << 16)
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[6]);
 8004860:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8004864:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
 8004866:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
                         | ((word32) ks[6]);
 800486a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
 800486e:	603b      	str	r3, [r7, #0]
                             | ((word32) ks[3] << 16)
 8004870:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
                out[2*i + 1] = ((word32) ks[1] << 24)
 8004874:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
                             | ((word32) ks[3] << 16)
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[7]);
 800487e:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 8004882:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
 8004884:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
                             | ((word32) ks[7]);
 8004888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
 800488c:	607b      	str	r3, [r7, #4]
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	3708      	adds	r7, #8
 8004892:	42bb      	cmp	r3, r7
 8004894:	d1ab      	bne.n	80047ee <DesSetKey+0x5e>
            if (dir == DES_DECRYPTION) {
 8004896:	f1bb 0f01 	cmp.w	fp, #1
 800489a:	d10e      	bne.n	80048ba <DesSetKey+0x12a>
 800489c:	f105 0340 	add.w	r3, r5, #64	; 0x40
                    out[i] = out[DES_KS_SIZE - 2 - i];
 80048a0:	6fa9      	ldr	r1, [r5, #120]	; 0x78
                    word32 swap = out[i];
 80048a2:	6832      	ldr	r2, [r6, #0]
                    out[i] = out[DES_KS_SIZE - 2 - i];
 80048a4:	6031      	str	r1, [r6, #0]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
 80048a6:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
                    out[DES_KS_SIZE - 2 - i] = swap;
 80048a8:	67aa      	str	r2, [r5, #120]	; 0x78
                    swap = out[i + 1];
 80048aa:	6872      	ldr	r2, [r6, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
 80048ac:	6071      	str	r1, [r6, #4]
                for (i = 0; i < 16; i += 2) {
 80048ae:	3608      	adds	r6, #8
 80048b0:	42b3      	cmp	r3, r6
                    out[DES_KS_SIZE - 1 - i] = swap;
 80048b2:	67ea      	str	r2, [r5, #124]	; 0x7c
                for (i = 0; i < 16; i += 2) {
 80048b4:	f1a5 0508 	sub.w	r5, r5, #8
 80048b8:	d1f2      	bne.n	80048a0 <DesSetKey+0x110>
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80048ba:	4620      	mov	r0, r4
 80048bc:	f00e fc78 	bl	80131b0 <free>
        return 0;
 80048c0:	2000      	movs	r0, #0
    }
 80048c2:	b003      	add	sp, #12
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 80048c8:	2a1c      	cmp	r2, #28
 80048ca:	bfb4      	ite	lt
 80048cc:	201c      	movlt	r0, #28
 80048ce:	2038      	movge	r0, #56	; 0x38
 80048d0:	e797      	b.n	8004802 <DesSetKey+0x72>
            return MEMORY_E;
 80048d2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80048d6:	e7f4      	b.n	80048c2 <DesSetKey+0x132>
 80048d8:	08017748 	.word	0x08017748
 80048dc:	08017728 	.word	0x08017728
 80048e0:	080177b0 	.word	0x080177b0
 80048e4:	08017780 	.word	0x08017780

080048e8 <Des3ProcessBlock>:
        XMEMCPY(out, &r, sizeof(r));
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
    }

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
 80048e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	4615      	mov	r5, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
 80048ee:	4668      	mov	r0, sp
 80048f0:	2204      	movs	r2, #4
    {
 80048f2:	460e      	mov	r6, r1
        XMEMCPY(&l, in, sizeof(l));
 80048f4:	f00e fc64 	bl	80131c0 <memcpy>
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
 80048f8:	2204      	movs	r2, #4
 80048fa:	18b1      	adds	r1, r6, r2
 80048fc:	eb0d 0002 	add.w	r0, sp, r2
 8004900:	f00e fc5e 	bl	80131c0 <memcpy>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 8004904:	9800      	ldr	r0, [sp, #0]
 8004906:	f7ff fe2f 	bl	8004568 <ByteReverseWord32>
 800490a:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 800490c:	9801      	ldr	r0, [sp, #4]
 800490e:	f7ff fe2b 	bl	8004568 <ByteReverseWord32>
        #endif
        IPERM(&l,&r);
 8004912:	a901      	add	r1, sp, #4
            r = ByteReverseWord32(r);
 8004914:	9001      	str	r0, [sp, #4]
        IPERM(&l,&r);
 8004916:	4668      	mov	r0, sp
 8004918:	f7ff fe28 	bl	800456c <IPERM>

        DesRawProcessBlock(&l, &r, des->key[0]);
 800491c:	4622      	mov	r2, r4
 800491e:	f7ff fe9d 	bl	800465c <DesRawProcessBlock>
        DesRawProcessBlock(&r, &l, des->key[1]);
 8004922:	a801      	add	r0, sp, #4
 8004924:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8004928:	4669      	mov	r1, sp
 800492a:	f7ff fe97 	bl	800465c <DesRawProcessBlock>
        DesRawProcessBlock(&l, &r, des->key[2]);
 800492e:	4601      	mov	r1, r0
 8004930:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8004934:	4668      	mov	r0, sp
 8004936:	f7ff fe91 	bl	800465c <DesRawProcessBlock>

        FPERM(&l,&r);
 800493a:	f7ff fe53 	bl	80045e4 <FPERM>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 800493e:	9800      	ldr	r0, [sp, #0]
 8004940:	f7ff fe12 	bl	8004568 <ByteReverseWord32>
 8004944:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 8004946:	9801      	ldr	r0, [sp, #4]
 8004948:	f7ff fe0e 	bl	8004568 <ByteReverseWord32>
        #endif
        XMEMCPY(out, &r, sizeof(r));
 800494c:	2204      	movs	r2, #4
            r = ByteReverseWord32(r);
 800494e:	9001      	str	r0, [sp, #4]
        XMEMCPY(out, &r, sizeof(r));
 8004950:	4628      	mov	r0, r5
 8004952:	f00e fc35 	bl	80131c0 <memcpy>
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
 8004956:	2204      	movs	r2, #4
 8004958:	4669      	mov	r1, sp
 800495a:	18a8      	adds	r0, r5, r2
 800495c:	f00e fc30 	bl	80131c0 <memcpy>
    }
 8004960:	b002      	add	sp, #8
 8004962:	bd70      	pop	{r4, r5, r6, pc}

08004964 <xorbuf.constprop.0>:
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8004964:	ea81 0300 	eor.w	r3, r1, r0
 8004968:	f013 0f03 	tst.w	r3, #3
WC_MISC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 800496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496e:	f04f 0308 	mov.w	r3, #8
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8004972:	d019      	beq.n	80049a8 <xorbuf.constprop.0+0x44>
    for (i = 0; i < count; i++)
 8004974:	3901      	subs	r1, #1
 8004976:	4403      	add	r3, r0
 8004978:	4298      	cmp	r0, r3
 800497a:	d120      	bne.n	80049be <xorbuf.constprop.0+0x5a>
}
 800497c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(b++) ^= *(m++);
 800497e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004982:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004986:	406a      	eors	r2, r5
 8004988:	f800 2c01 	strb.w	r2, [r0, #-1]
            count--;
 800498c:	3b01      	subs	r3, #1
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 800498e:	b10c      	cbz	r4, 8004994 <xorbuf.constprop.0+0x30>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f4      	bne.n	800497e <xorbuf.constprop.0+0x1a>
    for (i = 0; i < n; i++)
 8004994:	f023 0503 	bic.w	r5, r3, #3
 8004998:	194e      	adds	r6, r1, r5
 800499a:	4602      	mov	r2, r0
 800499c:	42b1      	cmp	r1, r6
 800499e:	d106      	bne.n	80049ae <xorbuf.constprop.0+0x4a>
 80049a0:	4428      	add	r0, r5
        count %= WOLFSSL_WORD_SIZE;
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	e7e5      	b.n	8004974 <xorbuf.constprop.0+0x10>
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 80049a8:	f000 0403 	and.w	r4, r0, #3
 80049ac:	e7ef      	b.n	800498e <xorbuf.constprop.0+0x2a>
        *((*r)++) ^= *((*a)++);
 80049ae:	f852 4b04 	ldr.w	r4, [r2], #4
 80049b2:	f851 7b04 	ldr.w	r7, [r1], #4
 80049b6:	407c      	eors	r4, r7
 80049b8:	f842 4c04 	str.w	r4, [r2, #-4]
    for (i = 0; i < n; i++)
 80049bc:	e7ee      	b.n	800499c <xorbuf.constprop.0+0x38>
        b[i] ^= m[i];
 80049be:	7802      	ldrb	r2, [r0, #0]
 80049c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049c4:	4062      	eors	r2, r4
 80049c6:	f800 2b01 	strb.w	r2, [r0], #1
    for (i = 0; i < count; i++)
 80049ca:	e7d5      	b.n	8004978 <xorbuf.constprop.0+0x14>

080049cc <wc_Des3_CbcEncrypt>:
        }
        return 0;
    }

    int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
 80049cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d0:	460e      	mov	r6, r1
 80049d2:	4614      	mov	r4, r2
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
 80049d4:	4607      	mov	r7, r0
 80049d6:	b1e0      	cbz	r0, 8004a12 <wc_Des3_CbcEncrypt+0x46>
 80049d8:	b1d9      	cbz	r1, 8004a12 <wc_Des3_CbcEncrypt+0x46>
 80049da:	b1d2      	cbz	r2, 8004a12 <wc_Des3_CbcEncrypt+0x46>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
        while (blocks--) {
 80049dc:	f023 0307 	bic.w	r3, r3, #7
 80049e0:	18d5      	adds	r5, r2, r3
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 80049e2:	f500 78c0 	add.w	r8, r0, #384	; 0x180
        while (blocks--) {
 80049e6:	42ac      	cmp	r4, r5
 80049e8:	d102      	bne.n	80049f0 <wc_Des3_CbcEncrypt+0x24>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
 80049ea:	2000      	movs	r0, #0
    }
 80049ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 80049f0:	4621      	mov	r1, r4
 80049f2:	4640      	mov	r0, r8
 80049f4:	f7ff ffb6 	bl	8004964 <xorbuf.constprop.0>
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
 80049f8:	4642      	mov	r2, r8
 80049fa:	4641      	mov	r1, r8
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff ff73 	bl	80048e8 <Des3ProcessBlock>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
 8004a02:	4630      	mov	r0, r6
 8004a04:	2208      	movs	r2, #8
 8004a06:	4641      	mov	r1, r8
 8004a08:	f00e fbda 	bl	80131c0 <memcpy>
            out += DES_BLOCK_SIZE;
 8004a0c:	3608      	adds	r6, #8
            in  += DES_BLOCK_SIZE;
 8004a0e:	3408      	adds	r4, #8
 8004a10:	e7e9      	b.n	80049e6 <wc_Des3_CbcEncrypt+0x1a>
            return BAD_FUNC_ARG;
 8004a12:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004a16:	e7e9      	b.n	80049ec <wc_Des3_CbcEncrypt+0x20>

08004a18 <wc_Des3_SetIV>:
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
}

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
 8004a18:	b510      	push	{r4, lr}
    if (des == NULL) {
 8004a1a:	b150      	cbz	r0, 8004a32 <wc_Des3_SetIV+0x1a>
        return BAD_FUNC_ARG;
    }
    if (iv) {
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 8004a1c:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8004a20:	2208      	movs	r2, #8
    if (iv) {
 8004a22:	b119      	cbz	r1, 8004a2c <wc_Des3_SetIV+0x14>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 8004a24:	f00e fbcc 	bl	80131c0 <memcpy>
    #endif
    }
    else
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);

    return 0;
 8004a28:	2000      	movs	r0, #0
}
 8004a2a:	bd10      	pop	{r4, pc}
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
 8004a2c:	f00e fbf0 	bl	8013210 <memset>
 8004a30:	e7fa      	b.n	8004a28 <wc_Des3_SetIV+0x10>
        return BAD_FUNC_ARG;
 8004a32:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004a36:	e7f8      	b.n	8004a2a <wc_Des3_SetIV+0x12>

08004a38 <wc_Des3_SetKey>:
    {
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	460e      	mov	r6, r1
 8004a3c:	4617      	mov	r7, r2
 8004a3e:	461d      	mov	r5, r3
        if (des == NULL || key == NULL || dir < 0) {
 8004a40:	4604      	mov	r4, r0
 8004a42:	b3b8      	cbz	r0, 8004ab4 <wc_Des3_SetKey+0x7c>
 8004a44:	b3b1      	cbz	r1, 8004ab4 <wc_Des3_SetKey+0x7c>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	db34      	blt.n	8004ab4 <wc_Des3_SetKey+0x7c>
        XMEMSET(des->key, 0, sizeof(*(des->key)));
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f00e fbdf 	bl	8013210 <memset>
        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
 8004a52:	2204      	movs	r2, #4
 8004a54:	2100      	movs	r1, #0
 8004a56:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8004a5a:	f00e fbd9 	bl	8013210 <memset>
        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
 8004a5e:	2204      	movs	r2, #4
 8004a60:	2100      	movs	r1, #0
 8004a62:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 8004a66:	f00e fbd3 	bl	8013210 <memset>
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2000      	moveq	r0, #0
 8004a70:	2010      	movne	r0, #16
 8004a72:	4622      	mov	r2, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	4430      	add	r0, r6
 8004a78:	f7ff fe8a 	bl	8004790 <DesSetKey>
        if (ret != 0)
 8004a7c:	b9e0      	cbnz	r0, 8004ab8 <wc_Des3_SetKey+0x80>
        ret = DesSetKey(key + 8, !dir, des->key[1]);
 8004a7e:	fab5 f185 	clz	r1, r5
 8004a82:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8004a86:	0949      	lsrs	r1, r1, #5
 8004a88:	f106 0008 	add.w	r0, r6, #8
 8004a8c:	f7ff fe80 	bl	8004790 <DesSetKey>
        if (ret != 0)
 8004a90:	b990      	cbnz	r0, 8004ab8 <wc_Des3_SetKey+0x80>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
 8004a92:	2d01      	cmp	r5, #1
 8004a94:	bf0c      	ite	eq
 8004a96:	2000      	moveq	r0, #0
 8004a98:	2010      	movne	r0, #16
 8004a9a:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4430      	add	r0, r6
 8004aa2:	f7ff fe75 	bl	8004790 <DesSetKey>
        if (ret != 0)
 8004aa6:	b938      	cbnz	r0, 8004ab8 <wc_Des3_SetKey+0x80>
        return wc_Des3_SetIV(des, iv);
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	4620      	mov	r0, r4
    }
 8004aac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return wc_Des3_SetIV(des, iv);
 8004ab0:	f7ff bfb2 	b.w	8004a18 <wc_Des3_SetIV>
            return BAD_FUNC_ARG;
 8004ab4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004aba <wc_Des3Init>:

/* Initialize Des3 for use with async device */
int wc_Des3Init(Des3* des3, void* heap, int devId)
{
    int ret = 0;
    if (des3 == NULL)
 8004aba:	b118      	cbz	r0, 8004ac4 <wc_Des3Init+0xa>
        return BAD_FUNC_ARG;

    des3->heap = heap;
 8004abc:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
#if defined(WOLFSSL_CHECK_MEM_ZERO) && (defined(WOLF_CRYPTO_CB) || \
        (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)))
    wc_MemZero_Add("DES3 devKey", &des3->devKey, sizeof(des3->devKey));
#endif

    return ret;
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8004ac4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8004ac8:	4770      	bx	lr

08004aca <wc_Des3Free>:
    ForceZero(des3->devKey, sizeof(des3->devKey));
#endif
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(des3, sizeof(Des3));
#endif
}
 8004aca:	4770      	bx	lr

08004acc <wc_ecc_new_point_ex.constprop.0>:
/**
 * Allocate a new ECC point (if one not provided)
 * use a heap hint when creating new ecc_point
 * return an allocated point on success or NULL on failure
*/
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
 8004acc:	b573      	push	{r0, r1, r4, r5, r6, lr}

   if (point == NULL) {
       return BAD_FUNC_ARG;
   }

   p = *point;
 8004ace:	6804      	ldr	r4, [r0, #0]
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
 8004ad0:	4606      	mov	r6, r0
#ifndef WOLFSSL_NO_MALLOC
   if (p == NULL) {
 8004ad2:	b92c      	cbnz	r4, 8004ae0 <wc_ecc_new_point_ex.constprop.0+0x14>
      p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
 8004ad4:	f44f 709c 	mov.w	r0, #312	; 0x138
 8004ad8:	f00e fb62 	bl	80131a0 <malloc>
   }
#endif
   if (p == NULL) {
 8004adc:	4604      	mov	r4, r0
 8004ade:	b1c8      	cbz	r0, 8004b14 <wc_ecc_new_point_ex.constprop.0+0x48>
      return MEMORY_E;
   }
   XMEMSET(p, 0, sizeof(ecc_point));
 8004ae0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f00e fb92 	bl	8013210 <memset>

#ifndef ALT_ECC_SIZE
   err = mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL);
 8004aec:	2300      	movs	r3, #0
 8004aee:	e9cd 3300 	strd	r3, r3, [sp]
 8004af2:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8004af6:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8004afa:	4620      	mov	r0, r4
 8004afc:	f00c fabb 	bl	8011076 <mp_init_multi>
   if (err != MP_OKAY) {
 8004b00:	4605      	mov	r5, r0
 8004b02:	b128      	cbz	r0, 8004b10 <wc_ecc_new_point_ex.constprop.0+0x44>
   #ifndef WOLFSSL_NO_MALLOC
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 8004b04:	4620      	mov	r0, r4
 8004b06:	f00e fb53 	bl	80131b0 <free>
#endif

   *point = p;
   (void)heap;
   return err;
}
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
   *point = p;
 8004b10:	6034      	str	r4, [r6, #0]
   return err;
 8004b12:	e7fa      	b.n	8004b0a <wc_ecc_new_point_ex.constprop.0+0x3e>
      return MEMORY_E;
 8004b14:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8004b18:	e7f7      	b.n	8004b0a <wc_ecc_new_point_ex.constprop.0+0x3e>

08004b1a <wc_ecc_del_point_ex.constprop.0>:
}

/** Free an ECC point from memory
  p   The point to free
*/
static void wc_ecc_del_point_ex(ecc_point* p, void* heap)
 8004b1a:	b510      	push	{r4, lr}
{
   if (p != NULL) {
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	b170      	cbz	r0, 8004b3e <wc_ecc_del_point_ex.constprop.0+0x24>
      mp_clear(p->x);
 8004b20:	f00c faa4 	bl	801106c <mp_clear>
      mp_clear(p->y);
 8004b24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b28:	f00c faa0 	bl	801106c <mp_clear>
      mp_clear(p->z);
 8004b2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b30:	f00c fa9c 	bl	801106c <mp_clear>
   #ifndef WOLFSSL_NO_MALLOC
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 8004b34:	4620      	mov	r0, r4
   #endif
   }
   (void)heap;
}
 8004b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 8004b3a:	f00e bb39 	b.w	80131b0 <free>
}
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <ecc_point_to_mont.constprop.0>:
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
 8004b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b44:	4606      	mov	r6, r0
   NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 8004b46:	2068      	movs	r0, #104	; 0x68
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
 8004b48:	460f      	mov	r7, r1
 8004b4a:	4690      	mov	r8, r2
   NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 8004b4c:	f00e fb28 	bl	80131a0 <malloc>
 8004b50:	4605      	mov	r5, r0
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d04c      	beq.n	8004bf0 <ecc_point_to_mont.constprop.0+0xb0>
 8004b56:	2268      	movs	r2, #104	; 0x68
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f00e fb59 	bl	8013210 <memset>
       err = INIT_MP_INT_SIZE(mu, mp_bitsused(modulus));
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f00c fa6f 	bl	8011042 <mp_init>
   if (err == MP_OKAY) {
 8004b64:	4604      	mov	r4, r0
 8004b66:	bb10      	cbnz	r0, 8004bae <ecc_point_to_mont.constprop.0+0x6e>
       err = mp_montgomery_calc_normalization(mu, modulus);
 8004b68:	4641      	mov	r1, r8
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f00d fa3d 	bl	8011fea <mp_montgomery_calc_normalization>
       if (err == MP_OKAY) {
 8004b70:	4604      	mov	r4, r0
 8004b72:	b9c8      	cbnz	r0, 8004ba8 <ecc_point_to_mont.constprop.0+0x68>
           if (mp_cmp_d(mu, 1) == MP_EQ) {
 8004b74:	2101      	movs	r1, #1
 8004b76:	4628      	mov	r0, r5
 8004b78:	f00c faa8 	bl	80110cc <mp_cmp_d>
 8004b7c:	b9d8      	cbnz	r0, 8004bb6 <ecc_point_to_mont.constprop.0+0x76>
               err = mp_copy(p->x, r->x);
 8004b7e:	4639      	mov	r1, r7
 8004b80:	4630      	mov	r0, r6
 8004b82:	f00d fa22 	bl	8011fca <mp_copy>
               if (err == MP_OKAY)
 8004b86:	4604      	mov	r4, r0
 8004b88:	b970      	cbnz	r0, 8004ba8 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_copy(p->y, r->y);
 8004b8a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004b8e:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8004b92:	f00d fa1a 	bl	8011fca <mp_copy>
               if (err == MP_OKAY)
 8004b96:	4604      	mov	r4, r0
 8004b98:	b930      	cbnz	r0, 8004ba8 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_copy(p->z, r->z);
 8004b9a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004b9e:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 8004ba2:	f00d fa12 	bl	8011fca <mp_copy>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 8004ba6:	4604      	mov	r4, r0
       mp_clear(mu);
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f00c fa5f 	bl	801106c <mp_clear>
   FREE_MP_INT_SIZE(mu, heap, DYNAMIC_TYPE_ECC);
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f00e fafe 	bl	80131b0 <free>
 8004bb4:	e01e      	b.n	8004bf4 <ecc_point_to_mont.constprop.0+0xb4>
               err = mp_mulmod(p->x, mu, modulus, r->x);
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	4642      	mov	r2, r8
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f00c fe0b 	bl	80117d8 <mp_mulmod>
               if (err == MP_OKAY)
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d1ef      	bne.n	8004ba8 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_mulmod(p->y, mu, modulus, r->y);
 8004bc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004bcc:	4642      	mov	r2, r8
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8004bd4:	f00c fe00 	bl	80117d8 <mp_mulmod>
               if (err == MP_OKAY)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d1e4      	bne.n	8004ba8 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 8004bde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004be2:	4642      	mov	r2, r8
 8004be4:	4629      	mov	r1, r5
 8004be6:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 8004bea:	f00c fdf5 	bl	80117d8 <mp_mulmod>
 8004bee:	e7da      	b.n	8004ba6 <ecc_point_to_mont.constprop.0+0x66>
       err = MEMORY_E;
 8004bf0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
}
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bfa <_ecc_projective_dbl_point.constprop.0>:
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
 8004bfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfe:	9001      	str	r0, [sp, #4]
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8004c00:	2068      	movs	r0, #104	; 0x68
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
 8004c02:	4689      	mov	r9, r1
 8004c04:	4616      	mov	r6, r2
 8004c06:	469a      	mov	sl, r3
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8004c08:	f00e faca 	bl	80131a0 <malloc>
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	b118      	cbz	r0, 8004c18 <_ecc_projective_dbl_point.constprop.0+0x1e>
 8004c10:	2268      	movs	r2, #104	; 0x68
 8004c12:	2100      	movs	r1, #0
 8004c14:	f00e fafc 	bl	8013210 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8004c18:	2068      	movs	r0, #104	; 0x68
 8004c1a:	f00e fac1 	bl	80131a0 <malloc>
 8004c1e:	4607      	mov	r7, r0
 8004c20:	2800      	cmp	r0, #0
 8004c22:	f000 8123 	beq.w	8004e6c <_ecc_projective_dbl_point.constprop.0+0x272>
 8004c26:	2268      	movs	r2, #104	; 0x68
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f00e faf1 	bl	8013210 <memset>
      if (t1 == NULL || t2 == NULL) {
 8004c2e:	b92d      	cbnz	r5, 8004c3c <_ecc_projective_dbl_point.constprop.0+0x42>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004c30:	4638      	mov	r0, r7
 8004c32:	e000      	b.n	8004c36 <_ecc_projective_dbl_point.constprop.0+0x3c>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8004c34:	4628      	mov	r0, r5
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004c36:	f00e fabb 	bl	80131b0 <free>
 8004c3a:	e11a      	b.n	8004e72 <_ecc_projective_dbl_point.constprop.0+0x278>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f00c fa00 	bl	8011042 <mp_init>
   if (err == MP_OKAY) {
 8004c42:	4604      	mov	r4, r0
 8004c44:	b920      	cbnz	r0, 8004c50 <_ecc_projective_dbl_point.constprop.0+0x56>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 8004c46:	4638      	mov	r0, r7
 8004c48:	f00c f9fb 	bl	8011042 <mp_init>
   if (err != MP_OKAY) {
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	b148      	cbz	r0, 8004c64 <_ecc_projective_dbl_point.constprop.0+0x6a>
       FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004c50:	4638      	mov	r0, r7
 8004c52:	f00e faad 	bl	80131b0 <free>
       FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8004c56:	4628      	mov	r0, r5
 8004c58:	f00e faaa 	bl	80131b0 <free>
}
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	b003      	add	sp, #12
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err = mp_copy(P->x, x);
 8004c64:	9801      	ldr	r0, [sp, #4]
 8004c66:	4649      	mov	r1, r9
 8004c68:	f00d f9af 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 80f5 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_copy(P->y, y);
 8004c74:	9b01      	ldr	r3, [sp, #4]
   y = R->y;
 8004c76:	f109 0868 	add.w	r8, r9, #104	; 0x68
       err = mp_copy(P->y, y);
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8004c80:	f00d f9a3 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8004c84:	4604      	mov	r4, r0
 8004c86:	2800      	cmp	r0, #0
 8004c88:	f040 80e9 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_copy(P->z, z);
 8004c8c:	9801      	ldr	r0, [sp, #4]
   z = R->z;
 8004c8e:	f109 0bd0 	add.w	fp, r9, #208	; 0xd0
       err = mp_copy(P->z, z);
 8004c92:	4659      	mov	r1, fp
 8004c94:	30d0      	adds	r0, #208	; 0xd0
 8004c96:	f00d f998 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 80de 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(z, t1);
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4658      	mov	r0, fp
 8004ca6:	f00d fa55 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 8004caa:	4604      	mov	r4, r0
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f040 80d6 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f00d fa4e 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f040 80cd 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(z, y, z);
 8004cc4:	465a      	mov	r2, fp
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	4658      	mov	r0, fp
 8004cca:	f00c fb04 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8004cce:	4604      	mov	r4, r0
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	f040 80c4 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(z, modulus, mp);
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f00d fa3c 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	f040 80bb 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_addmod_ct(z, z, modulus, z);
 8004ce8:	465b      	mov	r3, fp
 8004cea:	4632      	mov	r2, r6
 8004cec:	4659      	mov	r1, fp
 8004cee:	4658      	mov	r0, fp
 8004cf0:	f00c f9e8 	bl	80110c4 <mp_addmod_ct>
      if (err == MP_OKAY)
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f040 80b1 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_submod_ct(x, t1, modulus, t2);
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4632      	mov	r2, r6
 8004d00:	4629      	mov	r1, r5
 8004d02:	4648      	mov	r0, r9
 8004d04:	f00c f9dc 	bl	80110c0 <mp_submod_ct>
      if (err == MP_OKAY)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	f040 80a7 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t1, x, modulus, t1);
 8004d10:	462b      	mov	r3, r5
 8004d12:	4632      	mov	r2, r6
 8004d14:	4649      	mov	r1, r9
 8004d16:	4628      	mov	r0, r5
 8004d18:	f00c f9d4 	bl	80110c4 <mp_addmod_ct>
      if (err == MP_OKAY)
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f040 809d 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_mul(t1, t2, t2);
 8004d24:	463a      	mov	r2, r7
 8004d26:	4639      	mov	r1, r7
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f00c fad4 	bl	80112d6 <mp_mul>
      if (err == MP_OKAY)
 8004d2e:	4604      	mov	r4, r0
 8004d30:	2800      	cmp	r0, #0
 8004d32:	f040 8094 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_montgomery_reduce(t2, modulus, mp);
 8004d36:	4652      	mov	r2, sl
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	f00d fa0c 	bl	8012158 <mp_montgomery_reduce>
      if (err == MP_OKAY)
 8004d40:	4604      	mov	r4, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f040 808b 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t2, t2, modulus, t1);
 8004d48:	462b      	mov	r3, r5
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4638      	mov	r0, r7
 8004d50:	f00c f9b8 	bl	80110c4 <mp_addmod_ct>
      if (err == MP_OKAY)
 8004d54:	4604      	mov	r4, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f040 8081 	bne.w	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t1, t2, modulus, t1);
 8004d5c:	462b      	mov	r3, r5
 8004d5e:	4632      	mov	r2, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	4628      	mov	r0, r5
 8004d64:	f00c f9ae 	bl	80110c4 <mp_addmod_ct>
   if (err == MP_OKAY)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d177      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_addmod_ct(y, y, modulus, y);
 8004d6e:	4643      	mov	r3, r8
 8004d70:	4632      	mov	r2, r6
 8004d72:	4641      	mov	r1, r8
 8004d74:	4640      	mov	r0, r8
 8004d76:	f00c f9a5 	bl	80110c4 <mp_addmod_ct>
   if (err == MP_OKAY)
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d16e      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(y, y);
 8004d80:	4641      	mov	r1, r8
 8004d82:	4640      	mov	r0, r8
 8004d84:	f00d f9e6 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 8004d88:	4604      	mov	r4, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d167      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 8004d8e:	4652      	mov	r2, sl
 8004d90:	4631      	mov	r1, r6
 8004d92:	4640      	mov	r0, r8
 8004d94:	f00d f9e0 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004d98:	4604      	mov	r4, r0
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d15f      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(y, t2);
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4640      	mov	r0, r8
 8004da2:	f00d f9d7 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 8004da6:	4604      	mov	r4, r0
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d158      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(t2, modulus, mp);
 8004dac:	4652      	mov	r2, sl
 8004dae:	4631      	mov	r1, r6
 8004db0:	4638      	mov	r0, r7
 8004db2:	f00d f9d1 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004db6:	4604      	mov	r4, r0
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d150      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_div_2_mod_ct(t2, modulus, t2);
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f00d f9cd 	bl	8012160 <mp_div_2_mod_ct>
   if (err == MP_OKAY)
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d148      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(y, x, y);
 8004dcc:	4642      	mov	r2, r8
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f00c fa80 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d140      	bne.n	8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 8004ddc:	4652      	mov	r2, sl
 8004dde:	4631      	mov	r1, r6
 8004de0:	4640      	mov	r0, r8
 8004de2:	f00d f9b9 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004de6:	4604      	mov	r4, r0
 8004de8:	bbc8      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(t1, x);
 8004dea:	4649      	mov	r1, r9
 8004dec:	4628      	mov	r0, r5
 8004dee:	f00d f9b1 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 8004df2:	4604      	mov	r4, r0
 8004df4:	bb98      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(x, modulus, mp);
 8004df6:	4652      	mov	r2, sl
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4648      	mov	r0, r9
 8004dfc:	f00d f9ac 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004e00:	4604      	mov	r4, r0
 8004e02:	bb60      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(x, y, modulus, x);
 8004e04:	464b      	mov	r3, r9
 8004e06:	4632      	mov	r2, r6
 8004e08:	4641      	mov	r1, r8
 8004e0a:	4648      	mov	r0, r9
 8004e0c:	f00c f958 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8004e10:	4604      	mov	r4, r0
 8004e12:	bb20      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(x, y, modulus, x);
 8004e14:	464b      	mov	r3, r9
 8004e16:	4632      	mov	r2, r6
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	f00c f950 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8004e20:	4604      	mov	r4, r0
 8004e22:	b9e0      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(y, x, modulus, y);
 8004e24:	4643      	mov	r3, r8
 8004e26:	4632      	mov	r2, r6
 8004e28:	4649      	mov	r1, r9
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f00c f948 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8004e30:	4604      	mov	r4, r0
 8004e32:	b9a0      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(y, t1, y);
 8004e34:	4642      	mov	r2, r8
 8004e36:	4629      	mov	r1, r5
 8004e38:	4640      	mov	r0, r8
 8004e3a:	f00c fa4c 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8004e3e:	4604      	mov	r4, r0
 8004e40:	b968      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 8004e42:	4652      	mov	r2, sl
 8004e44:	4631      	mov	r1, r6
 8004e46:	4640      	mov	r0, r8
 8004e48:	f00d f986 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	b930      	cbnz	r0, 8004e5e <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(y, t2, modulus, y);
 8004e50:	4643      	mov	r3, r8
 8004e52:	4632      	mov	r2, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	4640      	mov	r0, r8
 8004e58:	f00c f932 	bl	80110c0 <mp_submod_ct>
 8004e5c:	4604      	mov	r4, r0
   mp_clear(t1);
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f00c f904 	bl	801106c <mp_clear>
   mp_clear(t2);
 8004e64:	4638      	mov	r0, r7
 8004e66:	f00c f901 	bl	801106c <mp_clear>
 8004e6a:	e6f1      	b.n	8004c50 <_ecc_projective_dbl_point.constprop.0+0x56>
      if (t1 == NULL || t2 == NULL) {
 8004e6c:	2d00      	cmp	r5, #0
 8004e6e:	f47f aee1 	bne.w	8004c34 <_ecc_projective_dbl_point.constprop.0+0x3a>
         return MEMORY_E;
 8004e72:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8004e76:	e6f1      	b.n	8004c5c <_ecc_projective_dbl_point.constprop.0+0x62>

08004e78 <wc_ecc_curve_cache_load_item>:
{
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	4616      	mov	r6, r2
 8004e7c:	461d      	mov	r5, r3
    if (curve->spec_use >= curve->spec_count) {
 8004e7e:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 8004e82:	4293      	cmp	r3, r2
{
 8004e84:	4604      	mov	r4, r0
 8004e86:	460f      	mov	r7, r1
    if (curve->spec_use >= curve->spec_count) {
 8004e88:	d215      	bcs.n	8004eb6 <wc_ecc_curve_cache_load_item+0x3e>
    *dst = &curve->spec_ints[curve->spec_use++];
 8004e8a:	6980      	ldr	r0, [r0, #24]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	6222      	str	r2, [r4, #32]
 8004e90:	2268      	movs	r2, #104	; 0x68
 8004e92:	fb02 0003 	mla	r0, r2, r3, r0
 8004e96:	6030      	str	r0, [r6, #0]
    err = mp_init(*dst);
 8004e98:	f00c f8d3 	bl	8011042 <mp_init>
    if (err == MP_OKAY) {
 8004e9c:	b968      	cbnz	r0, 8004eba <wc_ecc_curve_cache_load_item+0x42>
        curve->load_mask |= mask;
 8004e9e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004ea2:	6830      	ldr	r0, [r6, #0]
 8004ea4:	431d      	orrs	r5, r3
 8004ea6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 8004eaa:	4639      	mov	r1, r7
 8004eac:	2210      	movs	r2, #16
}
 8004eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 8004eb2:	f00d b8bb 	b.w	801202c <mp_read_radix>
        return ECC_BAD_ARG_E;
 8004eb6:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ebc <_ecc_projective_add_point.isra.0>:
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 8004ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (Q == R) {
 8004ec0:	4291      	cmp	r1, r2
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 8004ec2:	4681      	mov	r9, r0
 8004ec4:	9100      	str	r1, [sp, #0]
      Q = tPt;
 8004ec6:	bf08      	it	eq
 8004ec8:	9000      	streq	r0, [sp, #0]
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8004eca:	f04f 0068 	mov.w	r0, #104	; 0x68
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 8004ece:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004ed2:	4617      	mov	r7, r2
 8004ed4:	461d      	mov	r5, r3
   if (Q == R) {
 8004ed6:	bf08      	it	eq
 8004ed8:	4691      	moveq	r9, r2
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8004eda:	f00e f961 	bl	80131a0 <malloc>
 8004ede:	4604      	mov	r4, r0
 8004ee0:	b118      	cbz	r0, 8004eea <_ecc_projective_add_point.isra.0+0x2e>
 8004ee2:	2268      	movs	r2, #104	; 0x68
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	f00e f993 	bl	8013210 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8004eea:	2068      	movs	r0, #104	; 0x68
 8004eec:	f00e f958 	bl	80131a0 <malloc>
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f000 8208 	beq.w	8005308 <_ecc_projective_add_point.isra.0+0x44c>
 8004ef8:	2268      	movs	r2, #104	; 0x68
 8004efa:	2100      	movs	r1, #0
 8004efc:	f00e f988 	bl	8013210 <memset>
      if (t1 == NULL || t2 == NULL) {
 8004f00:	b92c      	cbnz	r4, 8004f0e <_ecc_projective_add_point.isra.0+0x52>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004f02:	4630      	mov	r0, r6
 8004f04:	e000      	b.n	8004f08 <_ecc_projective_add_point.isra.0+0x4c>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8004f06:	4620      	mov	r0, r4
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004f08:	f00e f952 	bl	80131b0 <free>
 8004f0c:	e1ff      	b.n	800530e <_ecc_projective_add_point.isra.0+0x452>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f00c f897 	bl	8011042 <mp_init>
   if (err == MP_OKAY) {
 8004f14:	4603      	mov	r3, r0
 8004f16:	b920      	cbnz	r0, 8004f22 <_ecc_projective_add_point.isra.0+0x66>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f00c f892 	bl	8011042 <mp_init>
   if (err != MP_OKAY) {
 8004f1e:	4603      	mov	r3, r0
 8004f20:	b158      	cbz	r0, 8004f3a <_ecc_projective_add_point.isra.0+0x7e>
 8004f22:	9300      	str	r3, [sp, #0]
      FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004f24:	4630      	mov	r0, r6
 8004f26:	f00e f943 	bl	80131b0 <free>
      FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f00e f940 	bl	80131b0 <free>
   return err;
 8004f30:	9b00      	ldr	r3, [sp, #0]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	b003      	add	sp, #12
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      err = mp_submod_ct(modulus, Q->y, modulus, t1);
 8004f3a:	9b00      	ldr	r3, [sp, #0]
 8004f3c:	3368      	adds	r3, #104	; 0x68
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	9901      	ldr	r1, [sp, #4]
 8004f42:	4623      	mov	r3, r4
 8004f44:	462a      	mov	r2, r5
 8004f46:	4628      	mov	r0, r5
 8004f48:	f00c f8ba 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY) {
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d159      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
      if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 8004f52:	9900      	ldr	r1, [sp, #0]
 8004f54:	4648      	mov	r0, r9
 8004f56:	f00c f8b7 	bl	80110c8 <mp_cmp>
 8004f5a:	bb70      	cbnz	r0, 8004fba <_ecc_projective_add_point.isra.0+0xfe>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8004f5c:	9b00      	ldr	r3, [sp, #0]
 8004f5e:	f103 0ad0 	add.w	sl, r3, #208	; 0xd0
 8004f62:	4650      	mov	r0, sl
 8004f64:	f00d f92e 	bl	80121c4 <get_digit_count>
      if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 8004f68:	b338      	cbz	r0, 8004fba <_ecc_projective_add_point.isra.0+0xfe>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 8004f70:	f00c f8aa 	bl	80110c8 <mp_cmp>
 8004f74:	bb08      	cbnz	r0, 8004fba <_ecc_projective_add_point.isra.0+0xfe>
           (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 8004f76:	f109 0a68 	add.w	sl, r9, #104	; 0x68
 8004f7a:	9901      	ldr	r1, [sp, #4]
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	f00c f8a3 	bl	80110c8 <mp_cmp>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8004f82:	b9a0      	cbnz	r0, 8004fae <_ecc_projective_add_point.isra.0+0xf2>
          mp_clear(t1);
 8004f84:	4620      	mov	r0, r4
 8004f86:	f00c f871 	bl	801106c <mp_clear>
          mp_clear(t2);
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f00c f86e 	bl	801106c <mp_clear>
            FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8004f90:	4630      	mov	r0, r6
 8004f92:	f00e f90d 	bl	80131b0 <free>
            FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8004f96:	4620      	mov	r0, r4
 8004f98:	f00e f90a 	bl	80131b0 <free>
         return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 8004f9c:	4643      	mov	r3, r8
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4648      	mov	r0, r9
}
 8004fa4:	b003      	add	sp, #12
 8004fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
         return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 8004faa:	f7ff be26 	b.w	8004bfa <_ecc_projective_dbl_point.constprop.0>
           (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	f00c f889 	bl	80110c8 <mp_cmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0e4      	beq.n	8004f84 <_ecc_projective_add_point.isra.0+0xc8>
       err = mp_copy(P->x, x);
 8004fba:	4639      	mov	r1, r7
 8004fbc:	4648      	mov	r0, r9
 8004fbe:	f00d f804 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	b9f8      	cbnz	r0, 8005006 <_ecc_projective_add_point.isra.0+0x14a>
   y = R->y;
 8004fc6:	f107 0a68 	add.w	sl, r7, #104	; 0x68
       err = mp_copy(P->y, y);
 8004fca:	4651      	mov	r1, sl
 8004fcc:	f109 0068 	add.w	r0, r9, #104	; 0x68
 8004fd0:	f00c fffb 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	b9b0      	cbnz	r0, 8005006 <_ecc_projective_add_point.isra.0+0x14a>
   z = R->z;
 8004fd8:	f107 0bd0 	add.w	fp, r7, #208	; 0xd0
       err = mp_copy(P->z, z);
 8004fdc:	4659      	mov	r1, fp
 8004fde:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 8004fe2:	f00c fff2 	bl	8011fca <mp_copy>
   if (err == MP_OKAY) {
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	b968      	cbnz	r0, 8005006 <_ecc_projective_add_point.isra.0+0x14a>
       if (!mp_iszero(Q->z)) {
 8004fea:	9b00      	ldr	r3, [sp, #0]
 8004fec:	f103 09d0 	add.w	r9, r3, #208	; 0xd0
 8004ff0:	4648      	mov	r0, r9
 8004ff2:	f00c ffef 	bl	8011fd4 <mp_iszero>
 8004ff6:	b170      	cbz	r0, 8005016 <_ecc_projective_add_point.isra.0+0x15a>
       err = mp_sqr(z, t1);
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4658      	mov	r0, fp
 8004ffc:	f00d f8aa 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 8005000:	4603      	mov	r3, r0
 8005002:	2800      	cmp	r0, #0
 8005004:	d047      	beq.n	8005096 <_ecc_projective_add_point.isra.0+0x1da>
   mp_clear(t1);
 8005006:	4620      	mov	r0, r4
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	f00c f82f 	bl	801106c <mp_clear>
   mp_clear(t2);
 800500e:	4630      	mov	r0, r6
 8005010:	f00c f82c 	bl	801106c <mp_clear>
 8005014:	e786      	b.n	8004f24 <_ecc_projective_add_point.isra.0+0x68>
           err = mp_sqr(Q->z, t1);
 8005016:	4621      	mov	r1, r4
 8005018:	4648      	mov	r0, r9
 800501a:	f00d f89b 	bl	8012154 <mp_sqr>
           if (err == MP_OKAY)
 800501e:	4603      	mov	r3, r0
 8005020:	2800      	cmp	r0, #0
 8005022:	d1f0      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8005024:	4642      	mov	r2, r8
 8005026:	4629      	mov	r1, r5
 8005028:	4620      	mov	r0, r4
 800502a:	f00d f895 	bl	8012158 <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800502e:	4603      	mov	r3, r0
 8005030:	2800      	cmp	r0, #0
 8005032:	d1e8      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(t1, x, x);
 8005034:	463a      	mov	r2, r7
 8005036:	4639      	mov	r1, r7
 8005038:	4620      	mov	r0, r4
 800503a:	f00c f94c 	bl	80112d6 <mp_mul>
           if (err == MP_OKAY)
 800503e:	4603      	mov	r3, r0
 8005040:	2800      	cmp	r0, #0
 8005042:	d1e0      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(x, modulus, mp);
 8005044:	4642      	mov	r2, r8
 8005046:	4629      	mov	r1, r5
 8005048:	4638      	mov	r0, r7
 800504a:	f00d f885 	bl	8012158 <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800504e:	4603      	mov	r3, r0
 8005050:	2800      	cmp	r0, #0
 8005052:	d1d8      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(Q->z, t1, t1);
 8005054:	4622      	mov	r2, r4
 8005056:	4621      	mov	r1, r4
 8005058:	4648      	mov	r0, r9
 800505a:	f00c f93c 	bl	80112d6 <mp_mul>
           if (err == MP_OKAY)
 800505e:	4603      	mov	r3, r0
 8005060:	2800      	cmp	r0, #0
 8005062:	d1d0      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8005064:	4642      	mov	r2, r8
 8005066:	4629      	mov	r1, r5
 8005068:	4620      	mov	r0, r4
 800506a:	f00d f875 	bl	8012158 <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800506e:	4603      	mov	r3, r0
 8005070:	2800      	cmp	r0, #0
 8005072:	d1c8      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(t1, y, y);
 8005074:	4652      	mov	r2, sl
 8005076:	4651      	mov	r1, sl
 8005078:	4620      	mov	r0, r4
 800507a:	f00c f92c 	bl	80112d6 <mp_mul>
           if (err == MP_OKAY)
 800507e:	4603      	mov	r3, r0
 8005080:	2800      	cmp	r0, #0
 8005082:	d1c0      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(y, modulus, mp);
 8005084:	4642      	mov	r2, r8
 8005086:	4629      	mov	r1, r5
 8005088:	4650      	mov	r0, sl
 800508a:	f00d f865 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800508e:	4603      	mov	r3, r0
 8005090:	2800      	cmp	r0, #0
 8005092:	d0b1      	beq.n	8004ff8 <_ecc_projective_add_point.isra.0+0x13c>
 8005094:	e7b7      	b.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8005096:	4642      	mov	r2, r8
 8005098:	4629      	mov	r1, r5
 800509a:	4620      	mov	r0, r4
 800509c:	f00d f85c 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80050a0:	4603      	mov	r3, r0
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d1af      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(Q->x, t1, t2);
 80050a6:	9800      	ldr	r0, [sp, #0]
 80050a8:	4632      	mov	r2, r6
 80050aa:	4621      	mov	r1, r4
 80050ac:	f00c f913 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 80050b0:	4603      	mov	r3, r0
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d1a7      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 80050b6:	4642      	mov	r2, r8
 80050b8:	4629      	mov	r1, r5
 80050ba:	4630      	mov	r0, r6
 80050bc:	f00d f84c 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80050c0:	4603      	mov	r3, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d19f      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(z, t1, t1);
 80050c6:	4622      	mov	r2, r4
 80050c8:	4621      	mov	r1, r4
 80050ca:	4658      	mov	r0, fp
 80050cc:	f00c f903 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 80050d0:	4603      	mov	r3, r0
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d197      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 80050d6:	4642      	mov	r2, r8
 80050d8:	4629      	mov	r1, r5
 80050da:	4620      	mov	r0, r4
 80050dc:	f00d f83c 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80050e0:	4603      	mov	r3, r0
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d18f      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(Q->y, t1, t1);
 80050e6:	9801      	ldr	r0, [sp, #4]
 80050e8:	4622      	mov	r2, r4
 80050ea:	4621      	mov	r1, r4
 80050ec:	f00c f8f3 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 80050f0:	4603      	mov	r3, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d187      	bne.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 80050f6:	4642      	mov	r2, r8
 80050f8:	4629      	mov	r1, r5
 80050fa:	4620      	mov	r0, r4
 80050fc:	f00d f82c 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8005100:	4603      	mov	r3, r0
 8005102:	2800      	cmp	r0, #0
 8005104:	f47f af7f 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(y, t1, modulus, y);
 8005108:	4653      	mov	r3, sl
 800510a:	462a      	mov	r2, r5
 800510c:	4621      	mov	r1, r4
 800510e:	4650      	mov	r0, sl
 8005110:	f00b ffd6 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8005114:	4603      	mov	r3, r0
 8005116:	2800      	cmp	r0, #0
 8005118:	f47f af75 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t1, t1, modulus, t1);
 800511c:	4623      	mov	r3, r4
 800511e:	462a      	mov	r2, r5
 8005120:	4621      	mov	r1, r4
 8005122:	4620      	mov	r0, r4
 8005124:	f00b ffce 	bl	80110c4 <mp_addmod_ct>
   if (err == MP_OKAY)
 8005128:	4603      	mov	r3, r0
 800512a:	2800      	cmp	r0, #0
 800512c:	f47f af6b 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t1, y, modulus, t1);
 8005130:	4623      	mov	r3, r4
 8005132:	462a      	mov	r2, r5
 8005134:	4651      	mov	r1, sl
 8005136:	4620      	mov	r0, r4
 8005138:	f00b ffc4 	bl	80110c4 <mp_addmod_ct>
   if (err == MP_OKAY)
 800513c:	4603      	mov	r3, r0
 800513e:	2800      	cmp	r0, #0
 8005140:	f47f af61 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(x, t2, modulus, x);
 8005144:	463b      	mov	r3, r7
 8005146:	462a      	mov	r2, r5
 8005148:	4631      	mov	r1, r6
 800514a:	4638      	mov	r0, r7
 800514c:	f00b ffb8 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8005150:	4603      	mov	r3, r0
 8005152:	2800      	cmp	r0, #0
 8005154:	f47f af57 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t2, t2, modulus, t2);
 8005158:	4633      	mov	r3, r6
 800515a:	462a      	mov	r2, r5
 800515c:	4631      	mov	r1, r6
 800515e:	4630      	mov	r0, r6
 8005160:	f00b ffb0 	bl	80110c4 <mp_addmod_ct>
   if (err == MP_OKAY)
 8005164:	4603      	mov	r3, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	f47f af4d 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t2, x, modulus, t2);
 800516c:	4633      	mov	r3, r6
 800516e:	462a      	mov	r2, r5
 8005170:	4639      	mov	r1, r7
 8005172:	4630      	mov	r0, r6
 8005174:	f00b ffa6 	bl	80110c4 <mp_addmod_ct>
   if (err == MP_OKAY) {
 8005178:	4603      	mov	r3, r0
 800517a:	2800      	cmp	r0, #0
 800517c:	f47f af43 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       if (!mp_iszero(Q->z)) {
 8005180:	4648      	mov	r0, r9
 8005182:	f00c ff27 	bl	8011fd4 <mp_iszero>
 8005186:	2800      	cmp	r0, #0
 8005188:	f000 80ab 	beq.w	80052e2 <_ecc_projective_add_point.isra.0+0x426>
       err = mp_mul(z, x, z);
 800518c:	465a      	mov	r2, fp
 800518e:	4639      	mov	r1, r7
 8005190:	4658      	mov	r0, fp
 8005192:	f00c f8a0 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8005196:	4603      	mov	r3, r0
 8005198:	2800      	cmp	r0, #0
 800519a:	f47f af34 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(z, modulus, mp);
 800519e:	4642      	mov	r2, r8
 80051a0:	4629      	mov	r1, r5
 80051a2:	4658      	mov	r0, fp
 80051a4:	f00c ffd8 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80051a8:	4603      	mov	r3, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f47f af2b 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t1, x, t1);
 80051b0:	4622      	mov	r2, r4
 80051b2:	4639      	mov	r1, r7
 80051b4:	4620      	mov	r0, r4
 80051b6:	f00c f88e 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 80051ba:	4603      	mov	r3, r0
 80051bc:	2800      	cmp	r0, #0
 80051be:	f47f af22 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 80051c2:	4642      	mov	r2, r8
 80051c4:	4629      	mov	r1, r5
 80051c6:	4620      	mov	r0, r4
 80051c8:	f00c ffc6 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80051cc:	4603      	mov	r3, r0
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f47f af19 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_sqr(x, x);
 80051d4:	4639      	mov	r1, r7
 80051d6:	4638      	mov	r0, r7
 80051d8:	f00c ffbc 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 80051dc:	4603      	mov	r3, r0
 80051de:	2800      	cmp	r0, #0
 80051e0:	f47f af11 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(x, modulus, mp);
 80051e4:	4642      	mov	r2, r8
 80051e6:	4629      	mov	r1, r5
 80051e8:	4638      	mov	r0, r7
 80051ea:	f00c ffb5 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80051ee:	4603      	mov	r3, r0
 80051f0:	2800      	cmp	r0, #0
 80051f2:	f47f af08 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t2, x, t2);
 80051f6:	4632      	mov	r2, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	4630      	mov	r0, r6
 80051fc:	f00c f86b 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8005200:	4603      	mov	r3, r0
 8005202:	2800      	cmp	r0, #0
 8005204:	f47f aeff 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 8005208:	4642      	mov	r2, r8
 800520a:	4629      	mov	r1, r5
 800520c:	4630      	mov	r0, r6
 800520e:	f00c ffa3 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8005212:	4603      	mov	r3, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	f47f aef6 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t1, x, t1);
 800521a:	4622      	mov	r2, r4
 800521c:	4639      	mov	r1, r7
 800521e:	4620      	mov	r0, r4
 8005220:	f00c f859 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8005224:	4603      	mov	r3, r0
 8005226:	2800      	cmp	r0, #0
 8005228:	f47f aeed 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800522c:	4642      	mov	r2, r8
 800522e:	4629      	mov	r1, r5
 8005230:	4620      	mov	r0, r4
 8005232:	f00c ff91 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8005236:	4603      	mov	r3, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	f47f aee4 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_sqr(y, x);
 800523e:	4639      	mov	r1, r7
 8005240:	4650      	mov	r0, sl
 8005242:	f00c ff87 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 8005246:	4603      	mov	r3, r0
 8005248:	2800      	cmp	r0, #0
 800524a:	f47f aedc 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(x, modulus, mp);
 800524e:	4642      	mov	r2, r8
 8005250:	4629      	mov	r1, r5
 8005252:	4638      	mov	r0, r7
 8005254:	f00c ff80 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8005258:	4603      	mov	r3, r0
 800525a:	2800      	cmp	r0, #0
 800525c:	f47f aed3 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(x, t2, modulus, x);
 8005260:	463b      	mov	r3, r7
 8005262:	462a      	mov	r2, r5
 8005264:	4631      	mov	r1, r6
 8005266:	4638      	mov	r0, r7
 8005268:	f00b ff2a 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 800526c:	4603      	mov	r3, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	f47f aec9 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, x, modulus, t2);
 8005274:	4633      	mov	r3, r6
 8005276:	462a      	mov	r2, r5
 8005278:	4639      	mov	r1, r7
 800527a:	4630      	mov	r0, r6
 800527c:	f00b ff20 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8005280:	4603      	mov	r3, r0
 8005282:	2800      	cmp	r0, #0
 8005284:	f47f aebf 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, x, modulus, t2);
 8005288:	4633      	mov	r3, r6
 800528a:	462a      	mov	r2, r5
 800528c:	4639      	mov	r1, r7
 800528e:	4630      	mov	r0, r6
 8005290:	f00b ff16 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 8005294:	4603      	mov	r3, r0
 8005296:	2800      	cmp	r0, #0
 8005298:	f47f aeb5 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t2, y, t2);
 800529c:	4632      	mov	r2, r6
 800529e:	4651      	mov	r1, sl
 80052a0:	4630      	mov	r0, r6
 80052a2:	f00c f818 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 80052a6:	4603      	mov	r3, r0
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f47f aeac 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 80052ae:	4642      	mov	r2, r8
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f00c ff50 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80052b8:	4603      	mov	r3, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f47f aea3 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, t1, modulus, y);
 80052c0:	4653      	mov	r3, sl
 80052c2:	462a      	mov	r2, r5
 80052c4:	4621      	mov	r1, r4
 80052c6:	4630      	mov	r0, r6
 80052c8:	f00b fefa 	bl	80110c0 <mp_submod_ct>
   if (err == MP_OKAY)
 80052cc:	4603      	mov	r3, r0
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f47f ae99 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_div_2_mod_ct(y, modulus, y);
 80052d4:	4652      	mov	r2, sl
 80052d6:	4629      	mov	r1, r5
 80052d8:	4650      	mov	r0, sl
 80052da:	f00c ff41 	bl	8012160 <mp_div_2_mod_ct>
 80052de:	4603      	mov	r3, r0
 80052e0:	e691      	b.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
           err = mp_mul(z, Q->z, z);
 80052e2:	465a      	mov	r2, fp
 80052e4:	4649      	mov	r1, r9
 80052e6:	4658      	mov	r0, fp
 80052e8:	f00b fff5 	bl	80112d6 <mp_mul>
           if (err == MP_OKAY)
 80052ec:	4603      	mov	r3, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f47f ae89 	bne.w	8005006 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(z, modulus, mp);
 80052f4:	4642      	mov	r2, r8
 80052f6:	4629      	mov	r1, r5
 80052f8:	4658      	mov	r0, fp
 80052fa:	f00c ff2d 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80052fe:	4603      	mov	r3, r0
 8005300:	2800      	cmp	r0, #0
 8005302:	f43f af43 	beq.w	800518c <_ecc_projective_add_point.isra.0+0x2d0>
 8005306:	e67e      	b.n	8005006 <_ecc_projective_add_point.isra.0+0x14a>
      if (t1 == NULL || t2 == NULL) {
 8005308:	2c00      	cmp	r4, #0
 800530a:	f47f adfc 	bne.w	8004f06 <_ecc_projective_add_point.isra.0+0x4a>
         return MEMORY_E;
 800530e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005312:	e60e      	b.n	8004f32 <_ecc_projective_add_point.isra.0+0x76>

08005314 <wc_ecc_curve_free>:
{
 8005314:	b510      	push	{r4, lr}
    if (curve) {
 8005316:	4604      	mov	r4, r0
 8005318:	2800      	cmp	r0, #0
 800531a:	d042      	beq.n	80053a2 <wc_ecc_curve_free+0x8e>
    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 800531c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005320:	07db      	lsls	r3, r3, #31
 8005322:	d509      	bpl.n	8005338 <wc_ecc_curve_free+0x24>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 8005324:	6840      	ldr	r0, [r0, #4]
    if (item) {
 8005326:	b108      	cbz	r0, 800532c <wc_ecc_curve_free+0x18>
        mp_clear(item);
 8005328:	f00b fea0 	bl	801106c <mp_clear>
    curve->load_mask &= ~mask;
 800532c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 8005338:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800533c:	0798      	lsls	r0, r3, #30
 800533e:	d509      	bpl.n	8005354 <wc_ecc_curve_free+0x40>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 8005340:	68a0      	ldr	r0, [r4, #8]
    if (item) {
 8005342:	b108      	cbz	r0, 8005348 <wc_ecc_curve_free+0x34>
        mp_clear(item);
 8005344:	f00b fe92 	bl	801106c <mp_clear>
    curve->load_mask &= ~mask;
 8005348:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 8005354:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005358:	0719      	lsls	r1, r3, #28
 800535a:	d509      	bpl.n	8005370 <wc_ecc_curve_free+0x5c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 800535c:	68e0      	ldr	r0, [r4, #12]
    if (item) {
 800535e:	b108      	cbz	r0, 8005364 <wc_ecc_curve_free+0x50>
        mp_clear(item);
 8005360:	f00b fe84 	bl	801106c <mp_clear>
    curve->load_mask &= ~mask;
 8005364:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005368:	f023 0308 	bic.w	r3, r3, #8
 800536c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 8005370:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005374:	06da      	lsls	r2, r3, #27
 8005376:	d509      	bpl.n	800538c <wc_ecc_curve_free+0x78>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 8005378:	6920      	ldr	r0, [r4, #16]
    if (item) {
 800537a:	b108      	cbz	r0, 8005380 <wc_ecc_curve_free+0x6c>
        mp_clear(item);
 800537c:	f00b fe76 	bl	801106c <mp_clear>
    curve->load_mask &= ~mask;
 8005380:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005384:	f023 0310 	bic.w	r3, r3, #16
 8005388:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 800538c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005390:	069b      	lsls	r3, r3, #26
 8005392:	d503      	bpl.n	800539c <wc_ecc_curve_free+0x88>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 8005394:	6960      	ldr	r0, [r4, #20]
    if (item) {
 8005396:	b108      	cbz	r0, 800539c <wc_ecc_curve_free+0x88>
        mp_clear(item);
 8005398:	f00b fe68 	bl	801106c <mp_clear>
    curve->load_mask = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <wc_ecc_curve_load>:
{
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (dp == NULL || pCurve == NULL)
 80053a6:	4606      	mov	r6, r0
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d048      	beq.n	800543e <wc_ecc_curve_load+0x9a>
    curve = *pCurve;
 80053ac:	680d      	ldr	r5, [r1, #0]
    if (curve->dp != dp) {
 80053ae:	682b      	ldr	r3, [r5, #0]
    curve->dp = dp; /* set dp info */
 80053b0:	6028      	str	r0, [r5, #0]
    if (curve->dp != dp) {
 80053b2:	4283      	cmp	r3, r0
        curve->load_mask = 0;
 80053b4:	bf1c      	itt	ne
 80053b6:	2300      	movne	r3, #0
 80053b8:	f885 3024 	strbne.w	r3, [r5, #36]	; 0x24
    load_items = (byte)(((byte)~(word32)curve->load_mask) & load_mask);
 80053bc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80053c0:	ea22 0703 	bic.w	r7, r2, r3
    if (load_items & ECC_CURVE_FIELD_PRIME)
 80053c4:	f017 0401 	ands.w	r4, r7, #1
    curve->load_mask |= load_items;
 80053c8:	ea43 0302 	orr.w	r3, r3, r2
 80053cc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (load_items & ECC_CURVE_FIELD_PRIME)
 80053d0:	d006      	beq.n	80053e0 <wc_ecc_curve_load+0x3c>
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 80053d2:	68c1      	ldr	r1, [r0, #12]
 80053d4:	2301      	movs	r3, #1
 80053d6:	1d2a      	adds	r2, r5, #4
 80053d8:	4628      	mov	r0, r5
 80053da:	f7ff fd4d 	bl	8004e78 <wc_ecc_curve_cache_load_item>
 80053de:	4604      	mov	r4, r0
    if (load_items & ECC_CURVE_FIELD_AF)
 80053e0:	07b8      	lsls	r0, r7, #30
 80053e2:	d507      	bpl.n	80053f4 <wc_ecc_curve_load+0x50>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 80053e4:	6931      	ldr	r1, [r6, #16]
 80053e6:	2302      	movs	r3, #2
 80053e8:	f105 0208 	add.w	r2, r5, #8
 80053ec:	4628      	mov	r0, r5
 80053ee:	f7ff fd43 	bl	8004e78 <wc_ecc_curve_cache_load_item>
 80053f2:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_ORDER)
 80053f4:	0739      	lsls	r1, r7, #28
 80053f6:	d507      	bpl.n	8005408 <wc_ecc_curve_load+0x64>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 80053f8:	69b1      	ldr	r1, [r6, #24]
 80053fa:	2308      	movs	r3, #8
 80053fc:	f105 020c 	add.w	r2, r5, #12
 8005400:	4628      	mov	r0, r5
 8005402:	f7ff fd39 	bl	8004e78 <wc_ecc_curve_cache_load_item>
 8005406:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_GX)
 8005408:	06fa      	lsls	r2, r7, #27
 800540a:	d506      	bpl.n	800541a <wc_ecc_curve_load+0x76>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 800540c:	2310      	movs	r3, #16
 800540e:	69f1      	ldr	r1, [r6, #28]
 8005410:	18ea      	adds	r2, r5, r3
 8005412:	4628      	mov	r0, r5
 8005414:	f7ff fd30 	bl	8004e78 <wc_ecc_curve_cache_load_item>
 8005418:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_GY)
 800541a:	06bb      	lsls	r3, r7, #26
 800541c:	d507      	bpl.n	800542e <wc_ecc_curve_load+0x8a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 800541e:	6a31      	ldr	r1, [r6, #32]
 8005420:	2320      	movs	r3, #32
 8005422:	f105 0214 	add.w	r2, r5, #20
 8005426:	4628      	mov	r0, r5
 8005428:	f7ff fd26 	bl	8004e78 <wc_ecc_curve_cache_load_item>
 800542c:	4404      	add	r4, r0
    if (ret != 0) {
 800542e:	b124      	cbz	r4, 800543a <wc_ecc_curve_load+0x96>
        wc_ecc_curve_free(curve);
 8005430:	4628      	mov	r0, r5
 8005432:	f7ff ff6f 	bl	8005314 <wc_ecc_curve_free>
        ret = MP_READ_E;
 8005436:	f06f 046e 	mvn.w	r4, #110	; 0x6e
}
 800543a:	4620      	mov	r0, r4
 800543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 800543e:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8005442:	e7fa      	b.n	800543a <wc_ecc_curve_load+0x96>

08005444 <wc_ecc_set_curve>:
    if (key == NULL || (keysize <= 0 && curve_id < 0)) {
 8005444:	4603      	mov	r3, r0
 8005446:	b118      	cbz	r0, 8005450 <wc_ecc_set_curve+0xc>
 8005448:	2900      	cmp	r1, #0
 800544a:	dc04      	bgt.n	8005456 <wc_ecc_set_curve+0x12>
 800544c:	2a00      	cmp	r2, #0
 800544e:	da04      	bge.n	800545a <wc_ecc_set_curve+0x16>
        return BAD_FUNC_ARG;
 8005450:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8005454:	4770      	bx	lr
    if (keysize > ECC_MAXSIZE) {
 8005456:	2942      	cmp	r1, #66	; 0x42
 8005458:	dc13      	bgt.n	8005482 <wc_ecc_set_curve+0x3e>
    if (key->idx != ECC_CUSTOM_IDX) {
 800545a:	6858      	ldr	r0, [r3, #4]
 800545c:	3001      	adds	r0, #1
 800545e:	f04f 0000 	mov.w	r0, #0
 8005462:	d007      	beq.n	8005474 <wc_ecc_set_curve+0x30>
            if (curve_id > ECC_CURVE_DEF) {
 8005464:	4282      	cmp	r2, r0
        key->idx = 0;
 8005466:	6058      	str	r0, [r3, #4]
        key->dp = NULL;
 8005468:	6118      	str	r0, [r3, #16]
            if (curve_id > ECC_CURVE_DEF) {
 800546a:	dc04      	bgt.n	8005476 <wc_ecc_set_curve+0x32>
            else if (keysize <= ecc_sets[x].size) {
 800546c:	2920      	cmp	r1, #32
 800546e:	dd04      	ble.n	800547a <wc_ecc_set_curve+0x36>
            return ECC_CURVE_OID_E;
 8005470:	f06f 00ab 	mvn.w	r0, #171	; 0xab
}
 8005474:	4770      	bx	lr
                if (curve_id == ecc_sets[x].id)
 8005476:	2a07      	cmp	r2, #7
 8005478:	d1fa      	bne.n	8005470 <wc_ecc_set_curve+0x2c>
        key->dp  = &ecc_sets[x];
 800547a:	4a03      	ldr	r2, [pc, #12]	; (8005488 <wc_ecc_set_curve+0x44>)
 800547c:	611a      	str	r2, [r3, #16]
    return 0;
 800547e:	2000      	movs	r0, #0
 8005480:	4770      	bx	lr
        return ECC_BAD_ARG_E;
 8005482:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8005486:	4770      	bx	lr
 8005488:	080177d4 	.word	0x080177d4

0800548c <ecc_map_ex>:
{
 800548c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	460f      	mov	r7, r1
 8005492:	4691      	mov	r9, r2
 8005494:	461c      	mov	r4, r3
   if (P == NULL || modulus == NULL)
 8005496:	4682      	mov	sl, r0
 8005498:	2800      	cmp	r0, #0
 800549a:	f000 80b5 	beq.w	8005608 <ecc_map_ex+0x17c>
 800549e:	2900      	cmp	r1, #0
 80054a0:	f000 80b2 	beq.w	8005608 <ecc_map_ex+0x17c>
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
 80054a4:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
 80054a8:	2100      	movs	r1, #0
 80054aa:	4640      	mov	r0, r8
 80054ac:	f00b fe0e 	bl	80110cc <mp_cmp_d>
 80054b0:	4601      	mov	r1, r0
 80054b2:	b9a8      	cbnz	r0, 80054e0 <ecc_map_ex+0x54>
       err = mp_set(P->x, 0);
 80054b4:	4650      	mov	r0, sl
 80054b6:	f00c fe55 	bl	8012164 <mp_set>
       if (err == MP_OKAY)
 80054ba:	4604      	mov	r4, r0
 80054bc:	2800      	cmp	r0, #0
 80054be:	f040 8092 	bne.w	80055e6 <ecc_map_ex+0x15a>
           err = mp_set(P->y, 0);
 80054c2:	4601      	mov	r1, r0
 80054c4:	f10a 0068 	add.w	r0, sl, #104	; 0x68
 80054c8:	f00c fe4c 	bl	8012164 <mp_set>
       if (err == MP_OKAY)
 80054cc:	4604      	mov	r4, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 8089 	bne.w	80055e6 <ecc_map_ex+0x15a>
           err = mp_set(P->z, 1);
 80054d4:	4640      	mov	r0, r8
 80054d6:	2101      	movs	r1, #1
}
 80054d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
           err = mp_set(P->z, 1);
 80054dc:	f00c be42 	b.w	8012164 <mp_set>
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 80054e0:	2068      	movs	r0, #104	; 0x68
 80054e2:	f00d fe5d 	bl	80131a0 <malloc>
 80054e6:	4605      	mov	r5, r0
 80054e8:	b118      	cbz	r0, 80054f2 <ecc_map_ex+0x66>
 80054ea:	2268      	movs	r2, #104	; 0x68
 80054ec:	2100      	movs	r1, #0
 80054ee:	f00d fe8f 	bl	8013210 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 80054f2:	2068      	movs	r0, #104	; 0x68
 80054f4:	f00d fe54 	bl	80131a0 <malloc>
 80054f8:	4606      	mov	r6, r0
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f000 8087 	beq.w	800560e <ecc_map_ex+0x182>
 8005500:	2268      	movs	r2, #104	; 0x68
 8005502:	2100      	movs	r1, #0
 8005504:	f00d fe84 	bl	8013210 <memset>
      if (t1 == NULL || t2 == NULL) {
 8005508:	b90d      	cbnz	r5, 800550e <ecc_map_ex+0x82>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800550a:	4630      	mov	r0, r6
 800550c:	e007      	b.n	800551e <ecc_map_ex+0x92>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 800550e:	4628      	mov	r0, r5
 8005510:	f00b fd97 	bl	8011042 <mp_init>
   if (err == MP_OKAY) {
 8005514:	b130      	cbz	r0, 8005524 <ecc_map_ex+0x98>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8005516:	4630      	mov	r0, r6
 8005518:	f00d fe4a 	bl	80131b0 <free>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800551c:	4628      	mov	r0, r5
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800551e:	f00d fe47 	bl	80131b0 <free>
 8005522:	e076      	b.n	8005612 <ecc_map_ex+0x186>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 8005524:	4630      	mov	r0, r6
 8005526:	f00b fd8c 	bl	8011042 <mp_init>
   if (err != MP_OKAY) {
 800552a:	2800      	cmp	r0, #0
 800552c:	d1f3      	bne.n	8005516 <ecc_map_ex+0x8a>
       if (ct) {
 800552e:	2c00      	cmp	r4, #0
 8005530:	d05c      	beq.n	80055ec <ecc_map_ex+0x160>
           err = mp_invmod_mont_ct(z, modulus, t1, mp);
 8005532:	464b      	mov	r3, r9
 8005534:	462a      	mov	r2, r5
 8005536:	4639      	mov	r1, r7
 8005538:	4640      	mov	r0, r8
 800553a:	f00c fd18 	bl	8011f6e <mp_invmod_mont_ct>
           if (err == MP_OKAY)
 800553e:	4604      	mov	r4, r0
 8005540:	2800      	cmp	r0, #0
 8005542:	d144      	bne.n	80055ce <ecc_map_ex+0x142>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8005544:	464a      	mov	r2, r9
 8005546:	4639      	mov	r1, r7
 8005548:	4628      	mov	r0, r5
 800554a:	f00c fe05 	bl	8012158 <mp_montgomery_reduce>
               err = mp_invmod(z, modulus, t1);
 800554e:	4604      	mov	r4, r0
   if (err == MP_OKAY)
 8005550:	bbe8      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_sqr(t1, t2);
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	f00c fdfd 	bl	8012154 <mp_sqr>
   if (err == MP_OKAY)
 800555a:	4604      	mov	r4, r0
 800555c:	bbb8      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_mod(t2, modulus, t2);
 800555e:	4632      	mov	r2, r6
 8005560:	4639      	mov	r1, r7
 8005562:	4630      	mov	r0, r6
 8005564:	f00c f93a 	bl	80117dc <mp_mod>
   if (err == MP_OKAY)
 8005568:	4604      	mov	r4, r0
 800556a:	bb80      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_mul(t1, t2, t1);
 800556c:	462a      	mov	r2, r5
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	f00b feb0 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8005576:	4604      	mov	r4, r0
 8005578:	bb48      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_mod(t1, modulus, t1);
 800557a:	462a      	mov	r2, r5
 800557c:	4639      	mov	r1, r7
 800557e:	4628      	mov	r0, r5
 8005580:	f00c f92c 	bl	80117dc <mp_mod>
   if (err == MP_OKAY)
 8005584:	4604      	mov	r4, r0
 8005586:	bb10      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_mul(x, t2, x);
 8005588:	4652      	mov	r2, sl
 800558a:	4631      	mov	r1, r6
 800558c:	4650      	mov	r0, sl
 800558e:	f00b fea2 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 8005592:	4604      	mov	r4, r0
 8005594:	b9d8      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_montgomery_reduce(x, modulus, mp);
 8005596:	464a      	mov	r2, r9
 8005598:	4639      	mov	r1, r7
 800559a:	4650      	mov	r0, sl
 800559c:	f00c fddc 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80055a0:	4604      	mov	r4, r0
 80055a2:	b9a0      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
   y = P->y;
 80055a4:	f10a 0a68 	add.w	sl, sl, #104	; 0x68
       err = mp_mul(y, t1, y);
 80055a8:	4652      	mov	r2, sl
 80055aa:	4629      	mov	r1, r5
 80055ac:	4650      	mov	r0, sl
 80055ae:	f00b fe92 	bl	80112d6 <mp_mul>
   if (err == MP_OKAY)
 80055b2:	4604      	mov	r4, r0
 80055b4:	b958      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_montgomery_reduce(y, modulus, mp);
 80055b6:	464a      	mov	r2, r9
 80055b8:	4639      	mov	r1, r7
 80055ba:	4650      	mov	r0, sl
 80055bc:	f00c fdcc 	bl	8012158 <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80055c0:	4604      	mov	r4, r0
 80055c2:	b920      	cbnz	r0, 80055ce <ecc_map_ex+0x142>
       err = mp_set(z, 1);
 80055c4:	2101      	movs	r1, #1
 80055c6:	4640      	mov	r0, r8
 80055c8:	f00c fdcc 	bl	8012164 <mp_set>
 80055cc:	4604      	mov	r4, r0
   mp_clear(t1);
 80055ce:	4628      	mov	r0, r5
 80055d0:	f00b fd4c 	bl	801106c <mp_clear>
   mp_clear(t2);
 80055d4:	4630      	mov	r0, r6
 80055d6:	f00b fd49 	bl	801106c <mp_clear>
      FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 80055da:	4630      	mov	r0, r6
 80055dc:	f00d fde8 	bl	80131b0 <free>
      FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 80055e0:	4628      	mov	r0, r5
 80055e2:	f00d fde5 	bl	80131b0 <free>
}
 80055e6:	4620      	mov	r0, r4
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
           err = mp_montgomery_reduce(z, modulus, mp);
 80055ec:	464a      	mov	r2, r9
 80055ee:	4639      	mov	r1, r7
 80055f0:	4640      	mov	r0, r8
 80055f2:	f00c fdb1 	bl	8012158 <mp_montgomery_reduce>
           if (err == MP_OKAY)
 80055f6:	4604      	mov	r4, r0
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d1e8      	bne.n	80055ce <ecc_map_ex+0x142>
               err = mp_invmod(z, modulus, t1);
 80055fc:	462a      	mov	r2, r5
 80055fe:	4639      	mov	r1, r7
 8005600:	4640      	mov	r0, r8
 8005602:	f00c fb25 	bl	8011c50 <mp_invmod>
 8005606:	e7a2      	b.n	800554e <ecc_map_ex+0xc2>
       return ECC_BAD_ARG_E;
 8005608:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800560c:	e7eb      	b.n	80055e6 <ecc_map_ex+0x15a>
      if (t1 == NULL || t2 == NULL) {
 800560e:	2d00      	cmp	r5, #0
 8005610:	d184      	bne.n	800551c <ecc_map_ex+0x90>
         return MEMORY_E;
 8005612:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8005616:	e7e6      	b.n	80055e6 <ecc_map_ex+0x15a>

08005618 <ecc_map>:
    return ecc_map_ex(P, modulus, mp, 0);
 8005618:	2300      	movs	r3, #0
 800561a:	f7ff bf37 	b.w	800548c <ecc_map_ex>

0800561e <wc_ecc_copy_point>:
/** Copy the value of a point to an other one
  p    The point to copy
  r    The created point
*/
int wc_ecc_copy_point(const ecc_point* p, ecc_point *r)
{
 800561e:	b538      	push	{r3, r4, r5, lr}
 8005620:	460d      	mov	r5, r1
    int ret;

    /* prevents null arguments */
    if (p == NULL || r == NULL)
 8005622:	4604      	mov	r4, r0
 8005624:	b190      	cbz	r0, 800564c <wc_ecc_copy_point+0x2e>
 8005626:	b189      	cbz	r1, 800564c <wc_ecc_copy_point+0x2e>
        return ECC_BAD_ARG_E;

    ret = mp_copy(p->x, r->x);
 8005628:	f00c fccf 	bl	8011fca <mp_copy>
    if (ret != MP_OKAY)
 800562c:	b980      	cbnz	r0, 8005650 <wc_ecc_copy_point+0x32>
        return ret;
    ret = mp_copy(p->y, r->y);
 800562e:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8005632:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005636:	f00c fcc8 	bl	8011fca <mp_copy>
    if (ret != MP_OKAY)
 800563a:	b948      	cbnz	r0, 8005650 <wc_ecc_copy_point+0x32>
        return ret;
    ret = mp_copy(p->z, r->z);
 800563c:	f105 01d0 	add.w	r1, r5, #208	; 0xd0
 8005640:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    if (ret != MP_OKAY)
        return ret;

    return MP_OKAY;
}
 8005644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = mp_copy(p->z, r->z);
 8005648:	f00c bcbf 	b.w	8011fca <mp_copy>
        return ECC_BAD_ARG_E;
 800564c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
 8005650:	bd38      	pop	{r3, r4, r5, pc}

08005652 <wc_ecc_is_valid_idx>:
*/
int wc_ecc_is_valid_idx(int n)
{
   int x;

   if (n >= (int)ECC_SET_COUNT)
 8005652:	3001      	adds	r0, #1
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
      return 1;
   }

   return 0;
}
 8005654:	2801      	cmp	r0, #1
 8005656:	bf8c      	ite	hi
 8005658:	2000      	movhi	r0, #0
 800565a:	2001      	movls	r0, #1
 800565c:	4770      	bx	lr

0800565e <wc_ecc_get_curve_idx>:
    }
    if (ecc_sets[curve_idx].size == 0) {
        return ECC_CURVE_INVALID;
    }
    return curve_idx;
}
 800565e:	3807      	subs	r0, #7
 8005660:	bf18      	it	ne
 8005662:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005666:	4770      	bx	lr

08005668 <wc_ecc_get_name>:
{
 8005668:	b508      	push	{r3, lr}
    int curve_idx = wc_ecc_get_curve_idx(curve_id);
 800566a:	f7ff fff8 	bl	800565e <wc_ecc_get_curve_idx>
    if (curve_idx == ECC_CURVE_INVALID)
 800566e:	1c43      	adds	r3, r0, #1
    return ecc_sets[curve_idx].name;
 8005670:	bf1d      	ittte	ne
 8005672:	4b04      	ldrne	r3, [pc, #16]	; (8005684 <wc_ecc_get_name+0x1c>)
 8005674:	2234      	movne	r2, #52	; 0x34
 8005676:	fb02 3000 	mlane	r0, r2, r0, r3
        return NULL;
 800567a:	2000      	moveq	r0, #0
    return ecc_sets[curve_idx].name;
 800567c:	bf18      	it	ne
 800567e:	6880      	ldrne	r0, [r0, #8]
}
 8005680:	bd08      	pop	{r3, pc}
 8005682:	bf00      	nop
 8005684:	080177d4 	.word	0x080177d4

08005688 <wc_ecc_get_curve_size_from_id>:
 *
 * id      curve id, from ecc_curve_id enum in ecc.h
 * return  curve size, from ecc_sets[] on success, negative on error
 */
int wc_ecc_get_curve_size_from_id(int curve_id)
{
 8005688:	b508      	push	{r3, lr}
    int curve_idx = wc_ecc_get_curve_idx(curve_id);
 800568a:	f7ff ffe8 	bl	800565e <wc_ecc_get_curve_idx>
    if (curve_idx == ECC_CURVE_INVALID)
 800568e:	1c43      	adds	r3, r0, #1
        return ECC_BAD_ARG_E;
    return ecc_sets[curve_idx].size;
 8005690:	bf1d      	ittte	ne
 8005692:	2334      	movne	r3, #52	; 0x34
 8005694:	4358      	mulne	r0, r3
 8005696:	4b03      	ldrne	r3, [pc, #12]	; (80056a4 <wc_ecc_get_curve_size_from_id+0x1c>)
        return ECC_BAD_ARG_E;
 8005698:	f06f 00a9 	mvneq.w	r0, #169	; 0xa9
    return ecc_sets[curve_idx].size;
 800569c:	bf18      	it	ne
 800569e:	5818      	ldrne	r0, [r3, r0]
}
 80056a0:	bd08      	pop	{r3, pc}
 80056a2:	bf00      	nop
 80056a4:	080177d4 	.word	0x080177d4

080056a8 <wc_ecc_gen_k>:
}
#endif /* !WOLFSSL_ATECC508A && !WOLFSSL_CRYPTOCELL */

/* generate random and ensure its greater than 0 and less than order */
int wc_ecc_gen_k(WC_RNG* rng, int size, mp_int* k, mp_int* order)
{
 80056a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056aa:	4615      	mov	r5, r2
 80056ac:	b095      	sub	sp, #84	; 0x54
 80056ae:	461f      	mov	r7, r3
#ifndef WC_NO_RNG
    int err;
    byte buf[ECC_MAXSIZE_GEN];

    if (rng == NULL || size < 0 || size + 8 > ECC_MAXSIZE_GEN || k == NULL ||
 80056b0:	b3a0      	cbz	r0, 800571c <wc_ecc_gen_k+0x74>
 80056b2:	2942      	cmp	r1, #66	; 0x42
 80056b4:	d832      	bhi.n	800571c <wc_ecc_gen_k+0x74>
 80056b6:	b38a      	cbz	r2, 800571c <wc_ecc_gen_k+0x74>
 80056b8:	b383      	cbz	r3, 800571c <wc_ecc_gen_k+0x74>
        return BAD_FUNC_ARG;
    }

    /* generate 8 extra bytes to mitigate bias from the modulo operation below */
    /* see section A.1.2 in 'Suite B Implementor's Guide to FIPS 186-3 (ECDSA)' */
    size += 8;
 80056ba:	f101 0608 	add.w	r6, r1, #8

    /* make up random string */
    err = wc_RNG_GenerateBlock(rng, buf, (word32)size);
 80056be:	4632      	mov	r2, r6
 80056c0:	a901      	add	r1, sp, #4
 80056c2:	f001 fd44 	bl	800714e <wc_RNG_GenerateBlock>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_ecc_gen_k buf", buf, size);
#endif

    /* load random buffer data into k */
    if (err == 0)
 80056c6:	4604      	mov	r4, r0
 80056c8:	b998      	cbnz	r0, 80056f2 <wc_ecc_gen_k+0x4a>
        err = mp_read_unsigned_bin(k, buf, (word32)size);
 80056ca:	4632      	mov	r2, r6
 80056cc:	a901      	add	r1, sp, #4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f00b fd00 	bl	80110d4 <mp_read_unsigned_bin>

    /* the key should be smaller than the order of base point */
    if (err == MP_OKAY) {
 80056d4:	4604      	mov	r4, r0
 80056d6:	b960      	cbnz	r0, 80056f2 <wc_ecc_gen_k+0x4a>
        if (mp_cmp(k, order) != MP_LT) {
 80056d8:	4639      	mov	r1, r7
 80056da:	4628      	mov	r0, r5
 80056dc:	f00b fcf4 	bl	80110c8 <mp_cmp>
 80056e0:	3001      	adds	r0, #1
 80056e2:	d110      	bne.n	8005706 <wc_ecc_gen_k+0x5e>
        }
    }

    /* quick sanity check to make sure we're not dealing with a 0 key */
    if (err == MP_OKAY) {
        if (mp_iszero(k) == MP_YES)
 80056e4:	4628      	mov	r0, r5
 80056e6:	f00c fc75 	bl	8011fd4 <mp_iszero>
          err = MP_ZERO_E;
 80056ea:	2801      	cmp	r0, #1
 80056ec:	bf08      	it	eq
 80056ee:	f06f 0478 	mvneq.w	r4, #120	; 0x78
    while (len--) *z++ = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	4619      	mov	r1, r3
 80056f6:	aa01      	add	r2, sp, #4
 80056f8:	441a      	add	r2, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	2b4b      	cmp	r3, #75	; 0x4b
 80056fe:	d10b      	bne.n	8005718 <wc_ecc_gen_k+0x70>
    (void)size;
    (void)k;
    (void)order;
    return NOT_COMPILED_IN;
#endif /* !WC_NO_RNG */
}
 8005700:	4620      	mov	r0, r4
 8005702:	b015      	add	sp, #84	; 0x54
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err = mp_mod(k, order, k);
 8005706:	462a      	mov	r2, r5
 8005708:	4639      	mov	r1, r7
 800570a:	4628      	mov	r0, r5
 800570c:	f00c f866 	bl	80117dc <mp_mod>
    if (err == MP_OKAY) {
 8005710:	2800      	cmp	r0, #0
 8005712:	d0e7      	beq.n	80056e4 <wc_ecc_gen_k+0x3c>
 8005714:	4604      	mov	r4, r0
 8005716:	e7ec      	b.n	80056f2 <wc_ecc_gen_k+0x4a>
 8005718:	7011      	strb	r1, [r2, #0]
 800571a:	e7ec      	b.n	80056f6 <wc_ecc_gen_k+0x4e>
        return BAD_FUNC_ARG;
 800571c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8005720:	e7ee      	b.n	8005700 <wc_ecc_gen_k+0x58>

08005722 <wc_ecc_gen_z>:
{
 8005722:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005726:	e9dd 6b0c 	ldrd	r6, fp, [sp, #48]	; 0x30
 800572a:	4681      	mov	r9, r0
 800572c:	468a      	mov	sl, r1
    err = mp_montgomery_calc_normalization(mu, modulus);
 800572e:	4658      	mov	r0, fp
 8005730:	4619      	mov	r1, r3
{
 8005732:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8005736:	4614      	mov	r4, r2
 8005738:	461d      	mov	r5, r3
    err = mp_montgomery_calc_normalization(mu, modulus);
 800573a:	f00c fc56 	bl	8011fea <mp_montgomery_calc_normalization>
    if (err == MP_OKAY)
 800573e:	2800      	cmp	r0, #0
 8005740:	d14d      	bne.n	80057de <wc_ecc_gen_z+0xbc>
        err = wc_ecc_gen_k(rng, size, ty, modulus);
 8005742:	462b      	mov	r3, r5
 8005744:	4632      	mov	r2, r6
 8005746:	4651      	mov	r1, sl
 8005748:	4648      	mov	r0, r9
 800574a:	f7ff ffad 	bl	80056a8 <wc_ecc_gen_k>
    if (err == MP_OKAY)
 800574e:	2800      	cmp	r0, #0
 8005750:	d145      	bne.n	80057de <wc_ecc_gen_z+0xbc>
        err = mp_mulmod(ty, mu, modulus, ty);
 8005752:	4633      	mov	r3, r6
 8005754:	462a      	mov	r2, r5
 8005756:	4659      	mov	r1, fp
 8005758:	4630      	mov	r0, r6
 800575a:	f00c f83d 	bl	80117d8 <mp_mulmod>
    if (err == MP_OKAY)
 800575e:	bbf0      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->z, ty, p->z);
 8005760:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
 8005764:	464a      	mov	r2, r9
 8005766:	4631      	mov	r1, r6
 8005768:	4648      	mov	r0, r9
 800576a:	f00b fdb4 	bl	80112d6 <mp_mul>
    if (err == MP_OKAY)
 800576e:	bbb0      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->z, modulus, mp);
 8005770:	463a      	mov	r2, r7
 8005772:	4629      	mov	r1, r5
 8005774:	4648      	mov	r0, r9
 8005776:	f00c fcef 	bl	8012158 <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800577a:	bb80      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_sqr(ty, tx);
 800577c:	4641      	mov	r1, r8
 800577e:	4630      	mov	r0, r6
 8005780:	f00c fce8 	bl	8012154 <mp_sqr>
    if (err == MP_OKAY)
 8005784:	bb58      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(tx, modulus, mp);
 8005786:	463a      	mov	r2, r7
 8005788:	4629      	mov	r1, r5
 800578a:	4640      	mov	r0, r8
 800578c:	f00c fce4 	bl	8012158 <mp_montgomery_reduce>
    if (err == MP_OKAY)
 8005790:	bb28      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_mul(ty, tx, ty);
 8005792:	4632      	mov	r2, r6
 8005794:	4641      	mov	r1, r8
 8005796:	4630      	mov	r0, r6
 8005798:	f00b fd9d 	bl	80112d6 <mp_mul>
    if (err == MP_OKAY)
 800579c:	b9f8      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(ty, modulus, mp);
 800579e:	463a      	mov	r2, r7
 80057a0:	4629      	mov	r1, r5
 80057a2:	4630      	mov	r0, r6
 80057a4:	f00c fcd8 	bl	8012158 <mp_montgomery_reduce>
    if (err == MP_OKAY)
 80057a8:	b9c8      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->x, tx, p->x);
 80057aa:	4622      	mov	r2, r4
 80057ac:	4641      	mov	r1, r8
 80057ae:	4620      	mov	r0, r4
 80057b0:	f00b fd91 	bl	80112d6 <mp_mul>
    if (err == MP_OKAY)
 80057b4:	b998      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->x, modulus, mp);
 80057b6:	463a      	mov	r2, r7
 80057b8:	4629      	mov	r1, r5
 80057ba:	4620      	mov	r0, r4
 80057bc:	f00c fccc 	bl	8012158 <mp_montgomery_reduce>
    if (err == MP_OKAY)
 80057c0:	b968      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->y, ty, p->y);
 80057c2:	3468      	adds	r4, #104	; 0x68
 80057c4:	4622      	mov	r2, r4
 80057c6:	4631      	mov	r1, r6
 80057c8:	4620      	mov	r0, r4
 80057ca:	f00b fd84 	bl	80112d6 <mp_mul>
    if (err == MP_OKAY)
 80057ce:	b930      	cbnz	r0, 80057de <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->y, modulus, mp);
 80057d0:	463a      	mov	r2, r7
 80057d2:	4629      	mov	r1, r5
 80057d4:	4620      	mov	r0, r4
}
 80057d6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        err = mp_montgomery_reduce(p->y, modulus, mp);
 80057da:	f00c bcbd 	b.w	8012158 <mp_montgomery_reduce>
}
 80057de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080057e2 <wc_ecc_init_ex>:
}

/* Setup dynamic pointers if using normal math for proper freeing */
WOLFSSL_ABI
int wc_ecc_init_ex(ecc_key* key, void* heap, int devId)
{
 80057e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e4:	460d      	mov	r5, r1
    int ret      = 0;
#if defined(HAVE_PKCS11)
    int isPkcs11 = 0;
#endif

    if (key == NULL) {
 80057e6:	4604      	mov	r4, r0
 80057e8:	b1b0      	cbz	r0, 8005818 <wc_ecc_init_ex+0x36>

#ifdef ECC_DUMP_OID
    wc_ecc_dump_oids();
#endif

    XMEMSET(key, 0, sizeof(ecc_key));
 80057ea:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80057ee:	2100      	movs	r1, #0
 80057f0:	f00d fd0e 	bl	8013210 <memset>
    key->state = ECC_STATE_NONE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60a3      	str	r3, [r4, #8]
    alt_fp_init(key->pubkey.y);
    alt_fp_init(key->pubkey.z);
    key->k = (mp_int*)key->ka;
    alt_fp_init(key->k);
#else
    ret = mp_init_multi(key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 80057f8:	f104 0280 	add.w	r2, r4, #128	; 0x80
 80057fc:	e9cd 3300 	strd	r3, r3, [sp]
 8005800:	f104 0118 	add.w	r1, r4, #24
 8005804:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
 8005808:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800580c:	f00b fc33 	bl	8011076 <mp_init_multi>
                                                                    NULL, NULL);
    if (ret != MP_OKAY) {
 8005810:	b928      	cbnz	r0, 800581e <wc_ecc_init_ex+0x3c>
#endif

#ifdef WOLFSSL_HEAP_TEST
    key->heap = (void*)WOLFSSL_HEAP_TEST;
#else
    key->heap = heap;
 8005812:	6165      	str	r5, [r4, #20]
        return WC_HW_E;
    }
#endif

    return ret;
}
 8005814:	b003      	add	sp, #12
 8005816:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8005818:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800581c:	e7fa      	b.n	8005814 <wc_ecc_init_ex+0x32>
        return MEMORY_E;
 800581e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8005822:	e7f7      	b.n	8005814 <wc_ecc_init_ex+0x32>

08005824 <wc_ecc_free>:
  Free an ECC key from memory
  key   The key you wish to free
*/
WOLFSSL_ABI
int wc_ecc_free(ecc_key* key)
{
 8005824:	b510      	push	{r4, lr}
    if (key == NULL) {
 8005826:	4604      	mov	r4, r0
 8005828:	b170      	cbz	r0, 8005848 <wc_ecc_free+0x24>

#ifdef WOLFSSL_MAXQ10XX_CRYPTO
    wc_MAXQ10XX_EccFree(key);
#endif

    mp_clear(key->pubkey.x);
 800582a:	3018      	adds	r0, #24
 800582c:	f00b fc1e 	bl	801106c <mp_clear>
    mp_clear(key->pubkey.y);
 8005830:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8005834:	f00b fc1a 	bl	801106c <mp_clear>
    mp_clear(key->pubkey.z);
 8005838:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800583c:	f00b fc16 	bl	801106c <mp_clear>

#ifdef ALT_ECC_SIZE
    if (key->k)
#endif
        mp_forcezero(key->k);
 8005840:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005844:	f00b fc10 	bl	8011068 <mp_forcezero>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(ecc_key));
#endif

    return 0;
}
 8005848:	2000      	movs	r0, #0
 800584a:	bd10      	pop	{r4, pc}

0800584c <ecc_projective_add_point_safe>:
 *           (Result was: z == 0, x and/or y not 0)
 *        -> Need to set result to infinity.
 */
int ecc_projective_add_point_safe(ecc_point* A, ecc_point* B, ecc_point* R,
    mp_int* a, mp_int* modulus, mp_digit mp, int* infinity)
{
 800584c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005852:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28
 8005856:	4606      	mov	r6, r0
 8005858:	4689      	mov	r9, r1
 800585a:	4614      	mov	r4, r2
    int err;

    if (mp_iszero(A->x) && mp_iszero(A->y)) {
 800585c:	f00c fbba 	bl	8011fd4 <mp_iszero>
 8005860:	b158      	cbz	r0, 800587a <ecc_projective_add_point_safe+0x2e>
 8005862:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8005866:	f00c fbb5 	bl	8011fd4 <mp_iszero>
 800586a:	b130      	cbz	r0, 800587a <ecc_projective_add_point_safe+0x2e>
        /* A is infinity. */
        err = wc_ecc_copy_point(B, R);
 800586c:	4621      	mov	r1, r4
 800586e:	4648      	mov	r0, r9
            }
        }
    }

    return err;
}
 8005870:	b002      	add	sp, #8
 8005872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        err = wc_ecc_copy_point(A, R);
 8005876:	f7ff bed2 	b.w	800561e <wc_ecc_copy_point>
    else if (mp_iszero(B->x) && mp_iszero(B->y)) {
 800587a:	4648      	mov	r0, r9
 800587c:	f00c fbaa 	bl	8011fd4 <mp_iszero>
 8005880:	b138      	cbz	r0, 8005892 <ecc_projective_add_point_safe+0x46>
 8005882:	f109 0068 	add.w	r0, r9, #104	; 0x68
 8005886:	f00c fba5 	bl	8011fd4 <mp_iszero>
 800588a:	b110      	cbz	r0, 8005892 <ecc_projective_add_point_safe+0x46>
        err = wc_ecc_copy_point(A, R);
 800588c:	4621      	mov	r1, r4
 800588e:	4630      	mov	r0, r6
 8005890:	e7ee      	b.n	8005870 <ecc_projective_add_point_safe+0x24>
    else if ((mp_cmp(A->x, B->x) == MP_EQ) && (mp_cmp(A->z, B->z) == MP_EQ)) {
 8005892:	4649      	mov	r1, r9
 8005894:	4630      	mov	r0, r6
 8005896:	f00b fc17 	bl	80110c8 <mp_cmp>
 800589a:	bb60      	cbnz	r0, 80058f6 <ecc_projective_add_point_safe+0xaa>
 800589c:	f109 01d0 	add.w	r1, r9, #208	; 0xd0
 80058a0:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 80058a4:	f00b fc10 	bl	80110c8 <mp_cmp>
 80058a8:	4682      	mov	sl, r0
 80058aa:	bb20      	cbnz	r0, 80058f6 <ecc_projective_add_point_safe+0xaa>
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 80058ac:	f109 0168 	add.w	r1, r9, #104	; 0x68
 80058b0:	f106 0068 	add.w	r0, r6, #104	; 0x68
 80058b4:	f00b fc08 	bl	80110c8 <mp_cmp>
 80058b8:	b920      	cbnz	r0, 80058c4 <ecc_projective_add_point_safe+0x78>
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 80058ba:	4643      	mov	r3, r8
 80058bc:	462a      	mov	r2, r5
 80058be:	4621      	mov	r1, r4
 80058c0:	4648      	mov	r0, r9
 80058c2:	e048      	b.n	8005956 <ecc_projective_add_point_safe+0x10a>
            err = mp_set(R->x, 0);
 80058c4:	4651      	mov	r1, sl
 80058c6:	4620      	mov	r0, r4
 80058c8:	f00c fc4c 	bl	8012164 <mp_set>
            if (err == MP_OKAY)
 80058cc:	b968      	cbnz	r0, 80058ea <ecc_projective_add_point_safe+0x9e>
                err = mp_set(R->y, 0);
 80058ce:	4601      	mov	r1, r0
 80058d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058d4:	f00c fc46 	bl	8012164 <mp_set>
            if (err == MP_OKAY)
 80058d8:	b938      	cbnz	r0, 80058ea <ecc_projective_add_point_safe+0x9e>
                err = mp_set(R->z, 1);
 80058da:	2101      	movs	r1, #1
 80058dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058e0:	f00c fc40 	bl	8012164 <mp_set>
            if ((err == MP_OKAY) && (infinity != NULL))
 80058e4:	b908      	cbnz	r0, 80058ea <ecc_projective_add_point_safe+0x9e>
 80058e6:	b91f      	cbnz	r7, 80058f0 <ecc_projective_add_point_safe+0xa4>
                *infinity = 1;
 80058e8:	2000      	movs	r0, #0
}
 80058ea:	b002      	add	sp, #8
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                *infinity = 1;
 80058f0:	2301      	movs	r3, #1
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	e7f8      	b.n	80058e8 <ecc_projective_add_point_safe+0x9c>
        err = _ecc_projective_add_point(A, B, R, a, modulus, mp);
 80058f6:	f8cd 8000 	str.w	r8, [sp]
 80058fa:	462b      	mov	r3, r5
 80058fc:	4622      	mov	r2, r4
 80058fe:	4649      	mov	r1, r9
 8005900:	4630      	mov	r0, r6
 8005902:	f7ff fadb 	bl	8004ebc <_ecc_projective_add_point.isra.0>
        if ((err == MP_OKAY) && mp_iszero(R->z)) {
 8005906:	2800      	cmp	r0, #0
 8005908:	d1ef      	bne.n	80058ea <ecc_projective_add_point_safe+0x9e>
 800590a:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
 800590e:	4630      	mov	r0, r6
 8005910:	f00c fb60 	bl	8011fd4 <mp_iszero>
 8005914:	2800      	cmp	r0, #0
 8005916:	d0e7      	beq.n	80058e8 <ecc_projective_add_point_safe+0x9c>
            if (mp_iszero(R->x) && mp_iszero(R->y)) {
 8005918:	4620      	mov	r0, r4
 800591a:	f00c fb5b 	bl	8011fd4 <mp_iszero>
 800591e:	b1f8      	cbz	r0, 8005960 <ecc_projective_add_point_safe+0x114>
 8005920:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005924:	f00c fb56 	bl	8011fd4 <mp_iszero>
 8005928:	b1d0      	cbz	r0, 8005960 <ecc_projective_add_point_safe+0x114>
                if (mp_iszero(B->z)) {
 800592a:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 800592e:	f00c fb51 	bl	8011fd4 <mp_iszero>
 8005932:	2800      	cmp	r0, #0
 8005934:	d0c1      	beq.n	80058ba <ecc_projective_add_point_safe+0x6e>
                    err = wc_ecc_copy_point(B, R);
 8005936:	4621      	mov	r1, r4
 8005938:	4648      	mov	r0, r9
 800593a:	f7ff fe70 	bl	800561e <wc_ecc_copy_point>
                    if (err == MP_OKAY) {
 800593e:	2800      	cmp	r0, #0
 8005940:	d1d3      	bne.n	80058ea <ecc_projective_add_point_safe+0x9e>
                        err = mp_montgomery_calc_normalization(R->z, modulus);
 8005942:	4629      	mov	r1, r5
 8005944:	4630      	mov	r0, r6
 8005946:	f00c fb50 	bl	8011fea <mp_montgomery_calc_normalization>
                    if (err == MP_OKAY) {
 800594a:	2800      	cmp	r0, #0
 800594c:	d1cd      	bne.n	80058ea <ecc_projective_add_point_safe+0x9e>
                        err = _ecc_projective_dbl_point(R, R, a, modulus, mp);
 800594e:	4643      	mov	r3, r8
 8005950:	462a      	mov	r2, r5
 8005952:	4621      	mov	r1, r4
 8005954:	4620      	mov	r0, r4
}
 8005956:	b002      	add	sp, #8
 8005958:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 800595c:	f7ff b94d 	b.w	8004bfa <_ecc_projective_dbl_point.constprop.0>
                err = mp_set(R->x, 0);
 8005960:	2100      	movs	r1, #0
 8005962:	4620      	mov	r0, r4
 8005964:	f00c fbfe 	bl	8012164 <mp_set>
                if (err == MP_OKAY)
 8005968:	2800      	cmp	r0, #0
 800596a:	d1be      	bne.n	80058ea <ecc_projective_add_point_safe+0x9e>
                    err = mp_set(R->y, 0);
 800596c:	4601      	mov	r1, r0
 800596e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005972:	f00c fbf7 	bl	8012164 <mp_set>
                if (err == MP_OKAY)
 8005976:	2800      	cmp	r0, #0
 8005978:	d1b7      	bne.n	80058ea <ecc_projective_add_point_safe+0x9e>
                    err = mp_set(R->z, 1);
 800597a:	2101      	movs	r1, #1
 800597c:	4630      	mov	r0, r6
 800597e:	e7af      	b.n	80058e0 <ecc_projective_add_point_safe+0x94>

08005980 <ecc_projective_dbl_point_safe>:
 * Double infinity -> infinity.
 * Otherwise do normal double - which can't lead to infinity as odd order.
 */
int ecc_projective_dbl_point_safe(ecc_point *P, ecc_point *R, mp_int* a,
                                  mp_int* modulus, mp_digit mp)
{
 8005980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005984:	9f06      	ldr	r7, [sp, #24]
 8005986:	4604      	mov	r4, r0
 8005988:	460d      	mov	r5, r1
 800598a:	461e      	mov	r6, r3
    int err;

    if (mp_iszero(P->x) && mp_iszero(P->y)) {
 800598c:	f00c fb22 	bl	8011fd4 <mp_iszero>
 8005990:	b150      	cbz	r0, 80059a8 <ecc_projective_dbl_point_safe+0x28>
 8005992:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005996:	f00c fb1d 	bl	8011fd4 <mp_iszero>
 800599a:	b128      	cbz	r0, 80059a8 <ecc_projective_dbl_point_safe+0x28>
        /* P is infinity. */
        err = wc_ecc_copy_point(P, R);
 800599c:	4629      	mov	r1, r5
 800599e:	4620      	mov	r0, r4
    else {
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
    }

    return err;
}
 80059a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = wc_ecc_copy_point(P, R);
 80059a4:	f7ff be3b 	b.w	800561e <wc_ecc_copy_point>
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 80059a8:	463b      	mov	r3, r7
 80059aa:	4632      	mov	r2, r6
 80059ac:	4629      	mov	r1, r5
 80059ae:	4620      	mov	r0, r4
}
 80059b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 80059b4:	f7ff b921 	b.w	8004bfa <_ecc_projective_dbl_point.constprop.0>

080059b8 <ecc_mulmod>:
{
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	b08d      	sub	sp, #52	; 0x34
 80059be:	4688      	mov	r8, r1
 80059c0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80059c2:	9005      	str	r0, [sp, #20]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 80059c4:	4628      	mov	r0, r5
{
 80059c6:	9206      	str	r2, [sp, #24]
 80059c8:	461c      	mov	r4, r3
 80059ca:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 80059ce:	f00c fb06 	bl	8011fde <mp_count_bits>
    mp_int*  kt = R[2]->x;
 80059d2:	68a3      	ldr	r3, [r4, #8]
 80059d4:	9304      	str	r3, [sp, #16]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 80059d6:	4607      	mov	r7, r0
    tmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 80059d8:	2068      	movs	r0, #104	; 0x68
 80059da:	f00d fbe1 	bl	80131a0 <malloc>
    if (tmp == NULL) {
 80059de:	4606      	mov	r6, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f000 818a 	beq.w	8005cfa <ecc_mulmod+0x342>
        err = mp_init(tmp);
 80059e6:	f00b fb2c 	bl	8011042 <mp_init>
    if (err == MP_OKAY)
 80059ea:	4602      	mov	r2, r0
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d147      	bne.n	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[0]->x);
 80059f0:	6821      	ldr	r1, [r4, #0]
 80059f2:	4640      	mov	r0, r8
 80059f4:	f00c fae9 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 80059f8:	4602      	mov	r2, r0
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d140      	bne.n	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->y, R[0]->y);
 80059fe:	6821      	ldr	r1, [r4, #0]
 8005a00:	f108 0b68 	add.w	fp, r8, #104	; 0x68
 8005a04:	3168      	adds	r1, #104	; 0x68
 8005a06:	4658      	mov	r0, fp
 8005a08:	f00c fadf 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d136      	bne.n	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[0]->z);
 8005a12:	6821      	ldr	r1, [r4, #0]
 8005a14:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
 8005a18:	31d0      	adds	r1, #208	; 0xd0
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	f00c fad5 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005a20:	4602      	mov	r2, r0
 8005a22:	bb68      	cbnz	r0, 8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[1]->x);
 8005a24:	6861      	ldr	r1, [r4, #4]
 8005a26:	4640      	mov	r0, r8
 8005a28:	f00c facf 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	bb38      	cbnz	r0, 8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->y, R[1]->y);
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	4658      	mov	r0, fp
 8005a34:	3168      	adds	r1, #104	; 0x68
 8005a36:	f00c fac8 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	bb00      	cbnz	r0, 8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[1]->z);
 8005a3e:	6861      	ldr	r1, [r4, #4]
 8005a40:	4650      	mov	r0, sl
 8005a42:	31d0      	adds	r1, #208	; 0xd0
 8005a44:	f00c fac1 	bl	8011fca <mp_copy>
    if ((err == MP_OKAY) && (rng != NULL))
 8005a48:	4602      	mov	r2, r0
 8005a4a:	b9c8      	cbnz	r0, 8005a80 <ecc_mulmod+0xc8>
 8005a4c:	f1b9 0f00 	cmp.w	r9, #0
 8005a50:	d11c      	bne.n	8005a8c <ecc_mulmod+0xd4>
        t = mp_count_bits(modulus) + 1;
 8005a52:	4628      	mov	r0, r5
 8005a54:	f00c fac3 	bl	8011fde <mp_count_bits>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	9307      	str	r3, [sp, #28]
    int      cnt = DIGIT_BIT;
 8005a5c:	f8dd 901c 	ldr.w	r9, [sp, #28]
        v = k->dp[0] >> 1;
 8005a60:	9b05      	ldr	r3, [sp, #20]
        err = mp_copy(k, kt);
 8005a62:	9904      	ldr	r1, [sp, #16]
        v = k->dp[0] >> 1;
 8005a64:	689f      	ldr	r7, [r3, #8]
    int      cnt = DIGIT_BIT;
 8005a66:	f1b9 0f20 	cmp.w	r9, #32
        err = mp_copy(k, kt);
 8005a6a:	4618      	mov	r0, r3
    int      cnt = DIGIT_BIT;
 8005a6c:	bfa8      	it	ge
 8005a6e:	f04f 0920 	movge.w	r9, #32
        err = mp_copy(k, kt);
 8005a72:	f00c faaa 	bl	8011fca <mp_copy>
        v = k->dp[0] >> 1;
 8005a76:	087f      	lsrs	r7, r7, #1
    if (err == MP_OKAY) {
 8005a78:	4602      	mov	r2, r0
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f000 8139 	beq.w	8005cf2 <ecc_mulmod+0x33a>
    XFREE(tmp, NULL, DYNAMIC_TYPE_ECC);
 8005a80:	4630      	mov	r0, r6
 8005a82:	9204      	str	r2, [sp, #16]
 8005a84:	f00d fb94 	bl	80131b0 <free>
 8005a88:	9a04      	ldr	r2, [sp, #16]
 8005a8a:	e138      	b.n	8005cfe <ecc_mulmod+0x346>
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	9a04      	ldr	r2, [sp, #16]
 8005a90:	9203      	str	r2, [sp, #12]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 8005a92:	3707      	adds	r7, #7
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 8005a94:	f103 0268 	add.w	r2, r3, #104	; 0x68
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 8005a98:	bf48      	it	mi
 8005a9a:	3707      	addmi	r7, #7
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 8005a9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 8005aa0:	10ff      	asrs	r7, r7, #3
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 8005aa2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	462b      	mov	r3, r5
 8005aac:	4648      	mov	r0, r9
 8005aae:	f7ff fe38 	bl	8005722 <wc_ecc_gen_z>
    if ((err == MP_OKAY) && (rng != NULL))
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d1e3      	bne.n	8005a80 <ecc_mulmod+0xc8>
        err = wc_ecc_gen_z(rng, bytes, R[1], modulus, mp, R[2]->x, R[2]->y, kt);
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	9a04      	ldr	r2, [sp, #16]
 8005abc:	9203      	str	r2, [sp, #12]
 8005abe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ac2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ac6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005ac8:	6862      	ldr	r2, [r4, #4]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4639      	mov	r1, r7
 8005ace:	462b      	mov	r3, r5
 8005ad0:	4648      	mov	r0, r9
 8005ad2:	f7ff fe26 	bl	8005722 <wc_ecc_gen_z>
    if (err == MP_OKAY) {
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d1d1      	bne.n	8005a80 <ecc_mulmod+0xc8>
 8005adc:	e7b9      	b.n	8005a52 <ecc_mulmod+0x9a>
        if (--cnt == 0) {
 8005ade:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae2:	d108      	bne.n	8005af6 <ecc_mulmod+0x13e>
            v = kt->dp[j++];
 8005ae4:	f10a 0202 	add.w	r2, sl, #2
 8005ae8:	9904      	ldr	r1, [sp, #16]
 8005aea:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
 8005aee:	f10a 0a01 	add.w	sl, sl, #1
            cnt = DIGIT_BIT;
 8005af2:	f04f 0920 	mov.w	r9, #32
        b = v & 1;
 8005af6:	f007 0201 	and.w	r2, r7, #1
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 8005afa:	9600      	str	r6, [sp, #0]
        swap ^= (int)b;
 8005afc:	4053      	eors	r3, r2
        b = v & 1;
 8005afe:	9208      	str	r2, [sp, #32]
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 8005b00:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b04:	682a      	ldr	r2, [r5, #0]
 8005b06:	9309      	str	r3, [sp, #36]	; 0x24
 8005b08:	f00c fa71 	bl	8011fee <mp_cond_swap_ct_ex>
        v >>= 1;
 8005b0c:	087f      	lsrs	r7, r7, #1
        if (err == MP_OKAY) {
 8005b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b10:	4602      	mov	r2, r0
 8005b12:	bb50      	cbnz	r0, 8005b6a <ecc_mulmod+0x1b2>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used, swap,
 8005b14:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b18:	9600      	str	r6, [sp, #0]
 8005b1a:	682a      	ldr	r2, [r5, #0]
 8005b1c:	3168      	adds	r1, #104	; 0x68
 8005b1e:	3068      	adds	r0, #104	; 0x68
 8005b20:	f00c fa65 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 8005b24:	4602      	mov	r2, r0
 8005b26:	bb00      	cbnz	r0, 8005b6a <ecc_mulmod+0x1b2>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used, swap,
 8005b28:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b2c:	9600      	str	r6, [sp, #0]
 8005b2e:	682a      	ldr	r2, [r5, #0]
 8005b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b32:	31d0      	adds	r1, #208	; 0xd0
 8005b34:	30d0      	adds	r0, #208	; 0xd0
 8005b36:	f00c fa5a 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY)
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	b9a8      	cbnz	r0, 8005b6a <ecc_mulmod+0x1b2>
            err = ecc_projective_dbl_point_safe(R[0], R[0], a, modulus, mp);
 8005b3e:	6821      	ldr	r1, [r4, #0]
 8005b40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005b42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	4608      	mov	r0, r1
 8005b48:	462b      	mov	r3, r5
 8005b4a:	f7ff ff19 	bl	8005980 <ecc_projective_dbl_point_safe>
        if (err == MP_OKAY) {
 8005b4e:	4602      	mov	r2, r0
 8005b50:	b958      	cbnz	r0, 8005b6a <ecc_mulmod+0x1b2>
            err = ecc_projective_add_point_safe(R[0], R[1], R[0], a, modulus,
 8005b52:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005b56:	ab0b      	add	r3, sp, #44	; 0x2c
 8005b58:	9302      	str	r3, [sp, #8]
 8005b5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	e9cd 5300 	strd	r5, r3, [sp]
 8005b62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b64:	f7ff fe72 	bl	800584c <ecc_projective_add_point_safe>
 8005b68:	4602      	mov	r2, r0
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 8005b6a:	f10b 0b01 	add.w	fp, fp, #1
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d186      	bne.n	8005a80 <ecc_mulmod+0xc8>
        swap = (int)b;
 8005b72:	9b08      	ldr	r3, [sp, #32]
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 8005b74:	9a07      	ldr	r2, [sp, #28]
 8005b76:	455a      	cmp	r2, fp
 8005b78:	dcb1      	bgt.n	8005ade <ecc_mulmod+0x126>
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 8005b7a:	9600      	str	r6, [sp, #0]
    swap ^= 1;
 8005b7c:	f083 0701 	eor.w	r7, r3, #1
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 8005b80:	682a      	ldr	r2, [r5, #0]
 8005b82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b86:	463b      	mov	r3, r7
 8005b88:	f00c fa31 	bl	8011fee <mp_cond_swap_ct_ex>
    if (err == MP_OKAY) {
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f47f af76 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used, swap,
 8005b94:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b98:	9600      	str	r6, [sp, #0]
 8005b9a:	682a      	ldr	r2, [r5, #0]
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	3168      	adds	r1, #104	; 0x68
 8005ba0:	3068      	adds	r0, #104	; 0x68
 8005ba2:	f00c fa24 	bl	8011fee <mp_cond_swap_ct_ex>
    if (err == MP_OKAY) {
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f47f af69 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used, swap,
 8005bae:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005bb2:	9600      	str	r6, [sp, #0]
 8005bb4:	682a      	ldr	r2, [r5, #0]
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	31d0      	adds	r1, #208	; 0xd0
 8005bba:	30d0      	adds	r0, #208	; 0xd0
 8005bbc:	f00c fa17 	bl	8011fee <mp_cond_swap_ct_ex>
    if (err == MP_OKAY)
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f47f af5c 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[2]->x);
 8005bc8:	68a1      	ldr	r1, [r4, #8]
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f00c f9fd 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f47f af54 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_sub(modulus, P->y, R[2]->y);
 8005bd8:	68a2      	ldr	r2, [r4, #8]
 8005bda:	f108 0168 	add.w	r1, r8, #104	; 0x68
 8005bde:	3268      	adds	r2, #104	; 0x68
 8005be0:	4628      	mov	r0, r5
 8005be2:	f00b fa6b 	bl	80110bc <mp_sub>
    if (err == MP_OKAY)
 8005be6:	4602      	mov	r2, r0
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f47f af49 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[2]->z);
 8005bee:	68a1      	ldr	r1, [r4, #8]
 8005bf0:	f108 00d0 	add.w	r0, r8, #208	; 0xd0
 8005bf4:	31d0      	adds	r1, #208	; 0xd0
 8005bf6:	f00c f9e8 	bl	8011fca <mp_copy>
    if (err == MP_OKAY) {
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f47f af3f 	bne.w	8005a80 <ecc_mulmod+0xc8>
        b = k->dp[0] & 1;
 8005c02:	9b05      	ldr	r3, [sp, #20]
 8005c04:	689f      	ldr	r7, [r3, #8]
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, (int)b,
 8005c06:	9600      	str	r6, [sp, #0]
        b = k->dp[0] & 1;
 8005c08:	f007 0701 	and.w	r7, r7, #1
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, (int)b,
 8005c0c:	682a      	ldr	r2, [r5, #0]
 8005c0e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c12:	463b      	mov	r3, r7
 8005c14:	f00c f9eb 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 8005c18:	4602      	mov	r2, r0
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f47f af30 	bne.w	8005a80 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used,
 8005c20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c24:	9600      	str	r6, [sp, #0]
 8005c26:	682a      	ldr	r2, [r5, #0]
 8005c28:	463b      	mov	r3, r7
 8005c2a:	3168      	adds	r1, #104	; 0x68
 8005c2c:	3068      	adds	r0, #104	; 0x68
 8005c2e:	f00c f9de 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 8005c32:	4602      	mov	r2, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f47f af23 	bne.w	8005a80 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used,
 8005c3a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c3e:	9600      	str	r6, [sp, #0]
 8005c40:	682a      	ldr	r2, [r5, #0]
 8005c42:	463b      	mov	r3, r7
 8005c44:	31d0      	adds	r1, #208	; 0xd0
 8005c46:	30d0      	adds	r0, #208	; 0xd0
 8005c48:	f00c f9d1 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY)
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f47f af16 	bne.w	8005a80 <ecc_mulmod+0xc8>
            err = ecc_projective_add_point_safe(R[0], R[2], R[0], a, modulus,
 8005c54:	ab0b      	add	r3, sp, #44	; 0x2c
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005c5c:	68a1      	ldr	r1, [r4, #8]
 8005c5e:	e9cd 5300 	strd	r5, r3, [sp]
 8005c62:	4610      	mov	r0, r2
 8005c64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c66:	f7ff fdf1 	bl	800584c <ecc_projective_add_point_safe>
        if (err == MP_OKAY) {
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	f47f af07 	bne.w	8005a80 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used,
 8005c72:	9600      	str	r6, [sp, #0]
 8005c74:	682a      	ldr	r2, [r5, #0]
 8005c76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	f00c f9b7 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 8005c80:	4602      	mov	r2, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f47f aefc 	bne.w	8005a80 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used,
 8005c88:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c8c:	9600      	str	r6, [sp, #0]
 8005c8e:	682a      	ldr	r2, [r5, #0]
 8005c90:	463b      	mov	r3, r7
 8005c92:	3168      	adds	r1, #104	; 0x68
 8005c94:	3068      	adds	r0, #104	; 0x68
 8005c96:	f00c f9aa 	bl	8011fee <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f47f aeef 	bne.w	8005a80 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used,
 8005ca2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005ca6:	9600      	str	r6, [sp, #0]
 8005ca8:	682a      	ldr	r2, [r5, #0]
 8005caa:	463b      	mov	r3, r7
 8005cac:	31d0      	adds	r1, #208	; 0xd0
 8005cae:	30d0      	adds	r0, #208	; 0xd0
 8005cb0:	f00c f99d 	bl	8011fee <mp_cond_swap_ct_ex>
    if (err == MP_OKAY)
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	f47f aee2 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->x, Q->x);
 8005cbc:	9906      	ldr	r1, [sp, #24]
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	f00c f983 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f47f aeda 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->y, Q->y);
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	9b06      	ldr	r3, [sp, #24]
 8005cd0:	3068      	adds	r0, #104	; 0x68
 8005cd2:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8005cd6:	f00c f978 	bl	8011fca <mp_copy>
    if (err == MP_OKAY)
 8005cda:	4602      	mov	r2, r0
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f47f aecf 	bne.w	8005a80 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->z, Q->z);
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	9906      	ldr	r1, [sp, #24]
 8005ce6:	30d0      	adds	r0, #208	; 0xd0
 8005ce8:	31d0      	adds	r1, #208	; 0xd0
 8005cea:	f00c f96e 	bl	8011fca <mp_copy>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	e6c6      	b.n	8005a80 <ecc_mulmod+0xc8>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	469a      	mov	sl, r3
 8005cf6:	469b      	mov	fp, r3
 8005cf8:	e73c      	b.n	8005b74 <ecc_mulmod+0x1bc>
        err = MEMORY_E;
 8005cfa:	f06f 027c 	mvn.w	r2, #124	; 0x7c
}
 8005cfe:	4610      	mov	r0, r2
 8005d00:	b00d      	add	sp, #52	; 0x34
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d06 <wc_ecc_mulmod_ex2>:
{
 8005d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	b08d      	sub	sp, #52	; 0x34
 8005d0c:	e9dd 7b16 	ldrd	r7, fp, [sp, #88]	; 0x58
 8005d10:	460d      	mov	r5, r1
 8005d12:	4616      	mov	r6, r2
 8005d14:	9305      	str	r3, [sp, #20]
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
 8005d16:	4680      	mov	r8, r0
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f000 80af 	beq.w	8005e7c <wc_ecc_mulmod_ex2+0x176>
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	f000 80ac 	beq.w	8005e7c <wc_ecc_mulmod_ex2+0x176>
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f000 80a9 	beq.w	8005e7c <wc_ecc_mulmod_ex2+0x176>
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	f000 80a6 	beq.w	8005e7c <wc_ecc_mulmod_ex2+0x176>
   if (mp_count_bits(k) > mp_count_bits(order)) {
 8005d30:	f00c f955 	bl	8011fde <mp_count_bits>
 8005d34:	4604      	mov	r4, r0
 8005d36:	4658      	mov	r0, fp
 8005d38:	f00c f951 	bl	8011fde <mp_count_bits>
 8005d3c:	4284      	cmp	r4, r0
 8005d3e:	f300 80a0 	bgt.w	8005e82 <wc_ecc_mulmod_ex2+0x17c>
   tG = NULL;
 8005d42:	2400      	movs	r4, #0
   XMEMSET(M, 0, sizeof(M));
 8005d44:	220c      	movs	r2, #12
 8005d46:	4621      	mov	r1, r4
 8005d48:	a809      	add	r0, sp, #36	; 0x24
   tG = NULL;
 8005d4a:	9407      	str	r4, [sp, #28]
   XMEMSET(M, 0, sizeof(M));
 8005d4c:	f00d fa60 	bl	8013210 <memset>
   for (i = 0; i < M_POINTS; i++) {
 8005d50:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 8005d54:	46a1      	mov	r9, r4
      err = wc_ecc_new_point_ex(&M[i], heap);
 8005d56:	4650      	mov	r0, sl
 8005d58:	f7fe feb8 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
      if (err != MP_OKAY) {
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d179      	bne.n	8005e56 <wc_ecc_mulmod_ex2+0x150>
   for (i = 0; i < M_POINTS; i++) {
 8005d62:	f109 0901 	add.w	r9, r9, #1
 8005d66:	f1b9 0f03 	cmp.w	r9, #3
 8005d6a:	f10a 0a04 	add.w	sl, sl, #4
 8005d6e:	d1f2      	bne.n	8005d56 <wc_ecc_mulmod_ex2+0x50>
   err = wc_ecc_new_point_ex(&tG, heap);
 8005d70:	a807      	add	r0, sp, #28
 8005d72:	f7fe feab 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
   if (err != MP_OKAY) {
 8005d76:	4604      	mov	r4, r0
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d16c      	bne.n	8005e56 <wc_ecc_mulmod_ex2+0x150>
   if ((err = ecc_point_to_mont(G, tG, modulus, heap)) != MP_OKAY) {
 8005d7c:	9907      	ldr	r1, [sp, #28]
 8005d7e:	463a      	mov	r2, r7
 8005d80:	4628      	mov	r0, r5
 8005d82:	f7fe fedd 	bl	8004b40 <ecc_point_to_mont.constprop.0>
 8005d86:	4604      	mov	r4, r0
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d164      	bne.n	8005e56 <wc_ecc_mulmod_ex2+0x150>
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
 8005d8c:	a908      	add	r1, sp, #32
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f00c f9e4 	bl	801215c <mp_montgomery_setup>
 8005d94:	4604      	mov	r4, r0
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d15d      	bne.n	8005e56 <wc_ecc_mulmod_ex2+0x150>
   err = ecc_mulmod(k, tG, R, M, a, modulus, mp, rng);
 8005d9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	9b08      	ldr	r3, [sp, #32]
 8005da0:	9907      	ldr	r1, [sp, #28]
 8005da2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8005da6:	9b05      	ldr	r3, [sp, #20]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4632      	mov	r2, r6
 8005dac:	ab09      	add	r3, sp, #36	; 0x24
 8005dae:	4640      	mov	r0, r8
 8005db0:	f7ff fe02 	bl	80059b8 <ecc_mulmod>
   if (err == MP_OKAY) {
 8005db4:	4604      	mov	r4, r0
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d14d      	bne.n	8005e56 <wc_ecc_mulmod_ex2+0x150>
    NEW_MP_INT_SIZE(t, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8005dba:	2068      	movs	r0, #104	; 0x68
       err = ecc_check_order_minus_1(k, tG, R, modulus, order);
 8005dbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    NEW_MP_INT_SIZE(t, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8005dc0:	f00d f9ee 	bl	80131a0 <malloc>
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d055      	beq.n	8005e76 <wc_ecc_mulmod_ex2+0x170>
 8005dca:	4621      	mov	r1, r4
 8005dcc:	2268      	movs	r2, #104	; 0x68
 8005dce:	f00d fa1f 	bl	8013210 <memset>
        err = INIT_MP_INT_SIZE(t, mp_bitsused(modulus));
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f00b f935 	bl	8011042 <mp_init>
    if (err == MP_OKAY) {
 8005dd8:	4604      	mov	r4, r0
 8005dda:	bb80      	cbnz	r0, 8005e3e <wc_ecc_mulmod_ex2+0x138>
        err = mp_sub_d(order, 1, t);
 8005ddc:	462a      	mov	r2, r5
 8005dde:	2101      	movs	r1, #1
 8005de0:	4658      	mov	r0, fp
 8005de2:	f00b f979 	bl	80110d8 <mp_sub_d>
        if (err == MP_OKAY) {
 8005de6:	4604      	mov	r4, r0
 8005de8:	bb30      	cbnz	r0, 8005e38 <wc_ecc_mulmod_ex2+0x132>
            int kIsMinusOne = (mp_cmp((mp_int*)k, t) == MP_EQ);
 8005dea:	4629      	mov	r1, r5
 8005dec:	4640      	mov	r0, r8
 8005dee:	f00b f96b 	bl	80110c8 <mp_cmp>
 8005df2:	fab0 f880 	clz	r8, r0
 8005df6:	ea4f 1858 	mov.w	r8, r8, lsr #5
            err = mp_cond_copy(tG->x, kIsMinusOne, R->x);
 8005dfa:	4632      	mov	r2, r6
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	4650      	mov	r0, sl
 8005e00:	f00c f9ef 	bl	80121e2 <mp_cond_copy>
            if (err == MP_OKAY) {
 8005e04:	4604      	mov	r4, r0
 8005e06:	b9b8      	cbnz	r0, 8005e38 <wc_ecc_mulmod_ex2+0x132>
                err = mp_sub(modulus, tG->y, t);
 8005e08:	462a      	mov	r2, r5
 8005e0a:	f10a 0168 	add.w	r1, sl, #104	; 0x68
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f00b f954 	bl	80110bc <mp_sub>
            if (err == MP_OKAY) {
 8005e14:	4604      	mov	r4, r0
 8005e16:	b978      	cbnz	r0, 8005e38 <wc_ecc_mulmod_ex2+0x132>
                err = mp_cond_copy(t, kIsMinusOne, R->y);
 8005e18:	f106 0268 	add.w	r2, r6, #104	; 0x68
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f00c f9df 	bl	80121e2 <mp_cond_copy>
            if (err == MP_OKAY) {
 8005e24:	4604      	mov	r4, r0
 8005e26:	b938      	cbnz	r0, 8005e38 <wc_ecc_mulmod_ex2+0x132>
                err = mp_cond_copy(tG->z, kIsMinusOne, R->z);
 8005e28:	f106 02d0 	add.w	r2, r6, #208	; 0xd0
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	f10a 00d0 	add.w	r0, sl, #208	; 0xd0
 8005e32:	f00c f9d6 	bl	80121e2 <mp_cond_copy>
 8005e36:	4604      	mov	r4, r0
        mp_free(t);
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f00b f91b 	bl	8011074 <mp_free>
    FREE_MP_INT_SIZE(t, NULL, DYNAMIC_TYPE_ECC);
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f00d f9b6 	bl	80131b0 <free>
   if (err == MP_OKAY && map)
 8005e44:	b93c      	cbnz	r4, 8005e56 <wc_ecc_mulmod_ex2+0x150>
 8005e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e48:	b12b      	cbz	r3, 8005e56 <wc_ecc_mulmod_ex2+0x150>
      err = ecc_map(R, modulus, mp);
 8005e4a:	9a08      	ldr	r2, [sp, #32]
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f7ff fbe2 	bl	8005618 <ecc_map>
 8005e54:	4604      	mov	r4, r0
   wc_ecc_del_point_ex(tG, heap);
 8005e56:	9807      	ldr	r0, [sp, #28]
 8005e58:	f7fe fe5f 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
      wc_ecc_del_point_ex(M[i], heap);
 8005e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e5e:	f7fe fe5c 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
 8005e62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e64:	f7fe fe59 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
 8005e68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e6a:	f7fe fe56 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
}
 8005e6e:	4620      	mov	r0, r4
 8005e70:	b00d      	add	sp, #52	; 0x34
 8005e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = MEMORY_E;
 8005e76:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8005e7a:	e7ec      	b.n	8005e56 <wc_ecc_mulmod_ex2+0x150>
      return ECC_BAD_ARG_E;
 8005e7c:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 8005e80:	e7f5      	b.n	8005e6e <wc_ecc_mulmod_ex2+0x168>
      return ECC_OUT_OF_RANGE_E;
 8005e82:	f06f 04d8 	mvn.w	r4, #216	; 0xd8
 8005e86:	e7f2      	b.n	8005e6e <wc_ecc_mulmod_ex2+0x168>

08005e88 <wc_ecc_shared_secret_gen_sync>:
{
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ecc_point* result = NULL;
 8005e8c:	f04f 0900 	mov.w	r9, #0
{
 8005e90:	b094      	sub	sp, #80	; 0x50
 8005e92:	4605      	mov	r5, r0
 8005e94:	468a      	mov	sl, r1
        DECLARE_CURVE_SPECS(3);
 8005e96:	a80a      	add	r0, sp, #40	; 0x28
 8005e98:	4649      	mov	r1, r9
{
 8005e9a:	4617      	mov	r7, r2
        DECLARE_CURVE_SPECS(3);
 8005e9c:	2228      	movs	r2, #40	; 0x28
{
 8005e9e:	4698      	mov	r8, r3
        mp_digit mp = 0;
 8005ea0:	e9cd 9907 	strd	r9, r9, [sp, #28]
        DECLARE_CURVE_SPECS(3);
 8005ea4:	9009      	str	r0, [sp, #36]	; 0x24
 8005ea6:	f00d f9b3 	bl	8013210 <memset>
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	2203      	movs	r2, #3
 8005eae:	61da      	str	r2, [r3, #28]
        ALLOC_CURVE_SPECS(3, err);
 8005eb0:	f44f 709c 	mov.w	r0, #312	; 0x138
 8005eb4:	f00d f974 	bl	80131a0 <malloc>
 8005eb8:	4606      	mov	r6, r0
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d067      	beq.n	8005f8e <wc_ecc_shared_secret_gen_sync+0x106>
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
            err = wc_ecc_curve_load(private_key->dp, &curve,
 8005ec0:	220b      	movs	r2, #11
        ALLOC_CURVE_SPECS(3, err);
 8005ec2:	6198      	str	r0, [r3, #24]
            err = wc_ecc_curve_load(private_key->dp, &curve,
 8005ec4:	a909      	add	r1, sp, #36	; 0x24
 8005ec6:	6928      	ldr	r0, [r5, #16]
 8005ec8:	f7ff fa6c 	bl	80053a4 <wc_ecc_curve_load>
        if (err != MP_OKAY) {
 8005ecc:	4604      	mov	r4, r0
 8005ece:	b938      	cbnz	r0, 8005ee0 <wc_ecc_shared_secret_gen_sync+0x58>
        err = wc_ecc_new_point_ex(&result, private_key->heap);
 8005ed0:	a807      	add	r0, sp, #28
 8005ed2:	f7fe fdfb 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
        if (err != MP_OKAY) {
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	b130      	cbz	r0, 8005ee8 <wc_ecc_shared_secret_gen_sync+0x60>
            wc_ecc_curve_free(curve);
 8005eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005edc:	f7ff fa1a 	bl	8005314 <wc_ecc_curve_free>
            FREE_CURVE_SPECS();
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f00d f965 	bl	80131b0 <free>
 8005ee6:	e04b      	b.n	8005f80 <wc_ecc_shared_secret_gen_sync+0xf8>
        if (private_key->rng == NULL) {
 8005ee8:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d032      	beq.n	8005f56 <wc_ecc_shared_secret_gen_sync+0xce>
            err = wc_ecc_mulmod_ex2(k, point, result, curve->Af, curve->prime,
 8005ef0:	6969      	ldr	r1, [r5, #20]
 8005ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef4:	9202      	str	r2, [sp, #8]
 8005ef6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	9201      	str	r2, [sp, #4]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	9200      	str	r2, [sp, #0]
 8005f02:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	9a07      	ldr	r2, [sp, #28]
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	f7ff fefb 	bl	8005d06 <wc_ecc_mulmod_ex2>
        if (err == MP_OKAY) {
 8005f10:	4605      	mov	r5, r0
 8005f12:	bb10      	cbnz	r0, 8005f5a <wc_ecc_shared_secret_gen_sync+0xd2>
            err = mp_montgomery_setup(curve->prime, &mp);
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	a908      	add	r1, sp, #32
 8005f18:	6858      	ldr	r0, [r3, #4]
 8005f1a:	f00c f91f 	bl	801215c <mp_montgomery_setup>
        if (err == MP_OKAY) {
 8005f1e:	4604      	mov	r4, r0
 8005f20:	bb90      	cbnz	r0, 8005f88 <wc_ecc_shared_secret_gen_sync+0x100>
            err = ecc_map_ex(result, curve->prime, mp, 1);
 8005f22:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8005f26:	9807      	ldr	r0, [sp, #28]
 8005f28:	6849      	ldr	r1, [r1, #4]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f7ff faae 	bl	800548c <ecc_map_ex>
        if (err == MP_OKAY) {
 8005f30:	4605      	mov	r5, r0
 8005f32:	b990      	cbnz	r0, 8005f5a <wc_ecc_shared_secret_gen_sync+0xd2>
            x = mp_unsigned_bin_size(curve->prime);
 8005f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f36:	6858      	ldr	r0, [r3, #4]
 8005f38:	f00b f8ca 	bl	80110d0 <mp_unsigned_bin_size>
            if (*outlen < (word32)x || x < mp_unsigned_bin_size(result->x)) {
 8005f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f40:	4283      	cmp	r3, r0
            x = mp_unsigned_bin_size(curve->prime);
 8005f42:	4604      	mov	r4, r0
            if (*outlen < (word32)x || x < mp_unsigned_bin_size(result->x)) {
 8005f44:	d304      	bcc.n	8005f50 <wc_ecc_shared_secret_gen_sync+0xc8>
 8005f46:	9807      	ldr	r0, [sp, #28]
 8005f48:	f00b f8c2 	bl	80110d0 <mp_unsigned_bin_size>
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	dd21      	ble.n	8005f94 <wc_ecc_shared_secret_gen_sync+0x10c>
                err = BUFFER_E;
 8005f50:	f06f 0583 	mvn.w	r5, #131	; 0x83
 8005f54:	e001      	b.n	8005f5a <wc_ecc_shared_secret_gen_sync+0xd2>
            err = MISSING_RNG_E;
 8005f56:	f06f 05eb 	mvn.w	r5, #235	; 0xeb
        mp_forcezero(result->x);
 8005f5a:	9807      	ldr	r0, [sp, #28]
        *outlen = (word32)x;
 8005f5c:	f8c8 4000 	str.w	r4, [r8]
        mp_forcezero(result->x);
 8005f60:	f00b f882 	bl	8011068 <mp_forcezero>
        mp_forcezero(result->y);
 8005f64:	9807      	ldr	r0, [sp, #28]
 8005f66:	3068      	adds	r0, #104	; 0x68
 8005f68:	f00b f87e 	bl	8011068 <mp_forcezero>
        wc_ecc_del_point_ex(result, private_key->heap);
 8005f6c:	9807      	ldr	r0, [sp, #28]
 8005f6e:	f7fe fdd4 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
        wc_ecc_curve_free(curve);
 8005f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f74:	f7ff f9ce 	bl	8005314 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f00d f919 	bl	80131b0 <free>
 8005f7e:	462c      	mov	r4, r5
}
 8005f80:	4620      	mov	r0, r4
 8005f82:	b014      	add	sp, #80	; 0x50
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	4605      	mov	r5, r0
        int x = 0;
 8005f8a:	464c      	mov	r4, r9
 8005f8c:	e7e5      	b.n	8005f5a <wc_ecc_shared_secret_gen_sync+0xd2>
        ALLOC_CURVE_SPECS(3, err);
 8005f8e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    return err;
 8005f92:	e7f5      	b.n	8005f80 <wc_ecc_shared_secret_gen_sync+0xf8>
            XMEMSET(out, 0, (size_t)x);
 8005f94:	4629      	mov	r1, r5
 8005f96:	4622      	mov	r2, r4
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f00d f939 	bl	8013210 <memset>
            err = mp_to_unsigned_bin(result->x, out +
 8005f9e:	9d07      	ldr	r5, [sp, #28]
                                     (x - mp_unsigned_bin_size(result->x)));
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f00b f895 	bl	80110d0 <mp_unsigned_bin_size>
 8005fa6:	1a21      	subs	r1, r4, r0
            err = mp_to_unsigned_bin(result->x, out +
 8005fa8:	4439      	add	r1, r7
 8005faa:	4628      	mov	r0, r5
 8005fac:	f00c f80b 	bl	8011fc6 <mp_to_unsigned_bin>
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	e7d2      	b.n	8005f5a <wc_ecc_shared_secret_gen_sync+0xd2>

08005fb4 <wc_ecc_shared_secret_ex>:
{
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (private_key == NULL || point == NULL || out == NULL ||
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	b348      	cbz	r0, 800600e <wc_ecc_shared_secret_ex+0x5a>
 8005fba:	b341      	cbz	r1, 800600e <wc_ecc_shared_secret_ex+0x5a>
 8005fbc:	b33a      	cbz	r2, 800600e <wc_ecc_shared_secret_ex+0x5a>
 8005fbe:	b333      	cbz	r3, 800600e <wc_ecc_shared_secret_ex+0x5a>
    if (private_key->type != ECC_PRIVATEKEY &&
 8005fc0:	6800      	ldr	r0, [r0, #0]
 8005fc2:	3802      	subs	r0, #2
 8005fc4:	2801      	cmp	r0, #1
 8005fc6:	d825      	bhi.n	8006014 <wc_ecc_shared_secret_ex+0x60>
    if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL) {
 8005fc8:	6860      	ldr	r0, [r4, #4]
 8005fca:	f7ff fb42 	bl	8005652 <wc_ecc_is_valid_idx>
 8005fce:	b308      	cbz	r0, 8006014 <wc_ecc_shared_secret_ex+0x60>
 8005fd0:	6920      	ldr	r0, [r4, #16]
 8005fd2:	b1f8      	cbz	r0, 8006014 <wc_ecc_shared_secret_ex+0x60>
    switch (private_key->state) {
 8005fd4:	68a0      	ldr	r0, [r4, #8]
 8005fd6:	2801      	cmp	r0, #1
 8005fd8:	dc06      	bgt.n	8005fe8 <wc_ecc_shared_secret_ex+0x34>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	da0a      	bge.n	8005ff4 <wc_ecc_shared_secret_ex+0x40>
            err = BAD_STATE_E;
 8005fde:	f06f 00bf 	mvn.w	r0, #191	; 0xbf
    private_key->state = ECC_STATE_NONE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60a3      	str	r3, [r4, #8]
    return err;
 8005fe6:	e00f      	b.n	8006008 <wc_ecc_shared_secret_ex+0x54>
    switch (private_key->state) {
 8005fe8:	2802      	cmp	r0, #2
 8005fea:	bf14      	ite	ne
 8005fec:	f06f 00bf 	mvnne.w	r0, #191	; 0xbf
 8005ff0:	2000      	moveq	r0, #0
 8005ff2:	e7f6      	b.n	8005fe2 <wc_ecc_shared_secret_ex+0x2e>
            private_key->state = ECC_STATE_SHARED_SEC_GEN;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	60a0      	str	r0, [r4, #8]
                err = wc_ecc_shared_secret_gen_sync(private_key, point,
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f7ff ff45 	bl	8005e88 <wc_ecc_shared_secret_gen_sync>
            if (err < 0) {
 8005ffe:	2800      	cmp	r0, #0
 8006000:	da03      	bge.n	800600a <wc_ecc_shared_secret_ex+0x56>
    if (err == WC_PENDING_E) {
 8006002:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8006006:	d1ec      	bne.n	8005fe2 <wc_ecc_shared_secret_ex+0x2e>
}
 8006008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            err = 0;
 800600a:	2000      	movs	r0, #0
 800600c:	e7e9      	b.n	8005fe2 <wc_ecc_shared_secret_ex+0x2e>
        return BAD_FUNC_ARG;
 800600e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8006012:	e7f9      	b.n	8006008 <wc_ecc_shared_secret_ex+0x54>
        return ECC_BAD_ARG_E;
 8006014:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8006018:	e7f6      	b.n	8006008 <wc_ecc_shared_secret_ex+0x54>

0800601a <wc_ecc_shared_secret>:
{
 800601a:	b570      	push	{r4, r5, r6, lr}
   if (private_key == NULL || public_key == NULL || out == NULL ||
 800601c:	4604      	mov	r4, r0
 800601e:	b1e0      	cbz	r0, 800605a <wc_ecc_shared_secret+0x40>
 8006020:	b1d9      	cbz	r1, 800605a <wc_ecc_shared_secret+0x40>
 8006022:	b1d2      	cbz	r2, 800605a <wc_ecc_shared_secret+0x40>
 8006024:	b1cb      	cbz	r3, 800605a <wc_ecc_shared_secret+0x40>
   if (private_key->type != ECC_PRIVATEKEY &&
 8006026:	6800      	ldr	r0, [r0, #0]
 8006028:	3802      	subs	r0, #2
 800602a:	2801      	cmp	r0, #1
 800602c:	d818      	bhi.n	8006060 <wc_ecc_shared_secret+0x46>
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL ||
 800602e:	6860      	ldr	r0, [r4, #4]
 8006030:	f7ff fb0f 	bl	8005652 <wc_ecc_is_valid_idx>
 8006034:	b1a0      	cbz	r0, 8006060 <wc_ecc_shared_secret+0x46>
 8006036:	6925      	ldr	r5, [r4, #16]
 8006038:	b195      	cbz	r5, 8006060 <wc_ecc_shared_secret+0x46>
       wc_ecc_is_valid_idx(public_key->idx)  == 0 || public_key->dp == NULL) {
 800603a:	6848      	ldr	r0, [r1, #4]
 800603c:	f7ff fb09 	bl	8005652 <wc_ecc_is_valid_idx>
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL ||
 8006040:	b170      	cbz	r0, 8006060 <wc_ecc_shared_secret+0x46>
       wc_ecc_is_valid_idx(public_key->idx)  == 0 || public_key->dp == NULL) {
 8006042:	6908      	ldr	r0, [r1, #16]
 8006044:	b160      	cbz	r0, 8006060 <wc_ecc_shared_secret+0x46>
   if (private_key->dp->id != public_key->dp->id) {
 8006046:	686d      	ldr	r5, [r5, #4]
 8006048:	6840      	ldr	r0, [r0, #4]
 800604a:	4285      	cmp	r5, r0
 800604c:	d108      	bne.n	8006060 <wc_ecc_shared_secret+0x46>
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
 800604e:	4620      	mov	r0, r4
 8006050:	3118      	adds	r1, #24
}
 8006052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
 8006056:	f7ff bfad 	b.w	8005fb4 <wc_ecc_shared_secret_ex>
       return BAD_FUNC_ARG;
 800605a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800605e:	bd70      	pop	{r4, r5, r6, pc}
      return ECC_BAD_ARG_E;
 8006060:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8006064:	e7fb      	b.n	800605e <wc_ecc_shared_secret+0x44>

08006066 <ecc_make_pub_ex>:
{
 8006066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	460c      	mov	r4, r1
 800606c:	b08b      	sub	sp, #44	; 0x2c
 800606e:	4617      	mov	r7, r2
 8006070:	4699      	mov	r9, r3
    if (key == NULL) {
 8006072:	4605      	mov	r5, r0
 8006074:	2800      	cmp	r0, #0
 8006076:	f000 8085 	beq.w	8006184 <ecc_make_pub_ex+0x11e>
    if (pubOut != NULL) {
 800607a:	b9da      	cbnz	r2, 80060b4 <ecc_make_pub_ex+0x4e>
        pub = &key->pubkey;
 800607c:	4606      	mov	r6, r0
        key->type = ECC_PRIVATEKEY_ONLY;
 800607e:	2303      	movs	r3, #3
 8006080:	f846 3b18 	str.w	r3, [r6], #24
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 8006084:	f505 78a8 	add.w	r8, r5, #336	; 0x150
 8006088:	4640      	mov	r0, r8
 800608a:	f00b ffa3 	bl	8011fd4 <mp_iszero>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 800608e:	f106 0b68 	add.w	fp, r6, #104	; 0x68
 8006092:	f106 0ad0 	add.w	sl, r6, #208	; 0xd0
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 8006096:	b178      	cbz	r0, 80060b8 <ecc_make_pub_ex+0x52>
        err = ECC_PRIV_KEY_E;
 8006098:	f06f 03d7 	mvn.w	r3, #215	; 0xd7
        mp_clear(pub->x);
 800609c:	4630      	mov	r0, r6
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	f00a ffe4 	bl	801106c <mp_clear>
        mp_clear(pub->y);
 80060a4:	4658      	mov	r0, fp
 80060a6:	f00a ffe1 	bl	801106c <mp_clear>
        mp_clear(pub->z);
 80060aa:	4650      	mov	r0, sl
 80060ac:	f00a ffde 	bl	801106c <mp_clear>
 80060b0:	9b07      	ldr	r3, [sp, #28]
 80060b2:	e05a      	b.n	800616a <ecc_make_pub_ex+0x104>
 80060b4:	4616      	mov	r6, r2
 80060b6:	e7e5      	b.n	8006084 <ecc_make_pub_ex+0x1e>
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 80060b8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1eb      	bne.n	8006098 <ecc_make_pub_ex+0x32>
                                      (mp_cmp(key->k, curve->order) != MP_LT)))
 80060c0:	68e1      	ldr	r1, [r4, #12]
 80060c2:	9307      	str	r3, [sp, #28]
 80060c4:	4640      	mov	r0, r8
 80060c6:	f00a ffff 	bl	80110c8 <mp_cmp>
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 80060ca:	3001      	adds	r0, #1
 80060cc:	9b07      	ldr	r3, [sp, #28]
 80060ce:	d1e3      	bne.n	8006098 <ecc_make_pub_ex+0x32>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 80060d0:	e9cd 3300 	strd	r3, r3, [sp]
 80060d4:	4652      	mov	r2, sl
 80060d6:	4659      	mov	r1, fp
 80060d8:	4630      	mov	r0, r6
 80060da:	f00a ffcc 	bl	8011076 <mp_init_multi>
    if (err == MP_OKAY) {
 80060de:	4603      	mov	r3, r0
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1db      	bne.n	800609c <ecc_make_pub_ex+0x36>
        ecc_point* base = NULL;
 80060e4:	e9cd 0008 	strd	r0, r0, [sp, #32]
        err = wc_ecc_new_point_ex(&base, key->heap);
 80060e8:	a809      	add	r0, sp, #36	; 0x24
 80060ea:	f7fe fcef 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
        if (err == MP_OKAY)
 80060ee:	4603      	mov	r3, r0
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d133      	bne.n	800615c <ecc_make_pub_ex+0xf6>
            err = mp_copy(curve->Gx, base->x);
 80060f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060f6:	6920      	ldr	r0, [r4, #16]
 80060f8:	f00b ff67 	bl	8011fca <mp_copy>
        if (err == MP_OKAY)
 80060fc:	4603      	mov	r3, r0
 80060fe:	bb68      	cbnz	r0, 800615c <ecc_make_pub_ex+0xf6>
            err = mp_copy(curve->Gy, base->y);
 8006100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006102:	6960      	ldr	r0, [r4, #20]
 8006104:	3168      	adds	r1, #104	; 0x68
 8006106:	f00b ff60 	bl	8011fca <mp_copy>
        if (err == MP_OKAY)
 800610a:	4603      	mov	r3, r0
 800610c:	bb30      	cbnz	r0, 800615c <ecc_make_pub_ex+0xf6>
            err = mp_montgomery_setup(curve->prime, &mp);
 800610e:	6860      	ldr	r0, [r4, #4]
 8006110:	a908      	add	r1, sp, #32
 8006112:	f00c f823 	bl	801215c <mp_montgomery_setup>
        if (err == MP_OKAY)
 8006116:	4603      	mov	r3, r0
 8006118:	bb00      	cbnz	r0, 800615c <ecc_make_pub_ex+0xf6>
            err = mp_set(base->z, 1);
 800611a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800611c:	2101      	movs	r1, #1
 800611e:	30d0      	adds	r0, #208	; 0xd0
 8006120:	f00c f820 	bl	8012164 <mp_set>
        if (err == MP_OKAY) {
 8006124:	4603      	mov	r3, r0
 8006126:	b9c8      	cbnz	r0, 800615c <ecc_make_pub_ex+0xf6>
            err = wc_ecc_mulmod_ex2(key->k, base, pub, curve->Af, curve->prime,
 8006128:	696a      	ldr	r2, [r5, #20]
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800613a:	f8cd 9008 	str.w	r9, [sp, #8]
 800613e:	4632      	mov	r2, r6
 8006140:	4640      	mov	r0, r8
 8006142:	f7ff fde0 	bl	8005d06 <wc_ecc_mulmod_ex2>
            if (err == MP_MEM) {
 8006146:	1c82      	adds	r2, r0, #2
            err = wc_ecc_mulmod_ex2(key->k, base, pub, curve->Af, curve->prime,
 8006148:	4603      	mov	r3, r0
            if (err == MP_MEM) {
 800614a:	d018      	beq.n	800617e <ecc_make_pub_ex+0x118>
        if (err == MP_OKAY) {
 800614c:	b930      	cbnz	r0, 800615c <ecc_make_pub_ex+0xf6>
            err = ecc_map_ex(pub, curve->prime, mp, 1);
 800614e:	2301      	movs	r3, #1
 8006150:	9a08      	ldr	r2, [sp, #32]
 8006152:	6861      	ldr	r1, [r4, #4]
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff f999 	bl	800548c <ecc_map_ex>
 800615a:	4603      	mov	r3, r0
        wc_ecc_del_point_ex(base, key->heap);
 800615c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	f7fe fcdb 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
    if (err != MP_OKAY
 8006164:	9b07      	ldr	r3, [sp, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d198      	bne.n	800609c <ecc_make_pub_ex+0x36>
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 800616a:	682a      	ldr	r2, [r5, #0]
 800616c:	2a03      	cmp	r2, #3
 800616e:	d102      	bne.n	8006176 <ecc_make_pub_ex+0x110>
 8006170:	b90f      	cbnz	r7, 8006176 <ecc_make_pub_ex+0x110>
        key->type = ECC_PRIVATEKEY;
 8006172:	2202      	movs	r2, #2
 8006174:	602a      	str	r2, [r5, #0]
}
 8006176:	4618      	mov	r0, r3
 8006178:	b00b      	add	sp, #44	; 0x2c
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
               err = MEMORY_E;
 800617e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8006182:	e7eb      	b.n	800615c <ecc_make_pub_ex+0xf6>
        return BAD_FUNC_ARG;
 8006184:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006188:	e7f5      	b.n	8006176 <ecc_make_pub_ex+0x110>

0800618a <_ecc_make_key_ex>:
{
 800618a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	4606      	mov	r6, r0
 8006190:	b08c      	sub	sp, #48	; 0x30
    if (key == NULL || rng == NULL) {
 8006192:	4615      	mov	r5, r2
 8006194:	2a00      	cmp	r2, #0
 8006196:	d055      	beq.n	8006244 <_ecc_make_key_ex+0xba>
 8006198:	2800      	cmp	r0, #0
 800619a:	d053      	beq.n	8006244 <_ecc_make_key_ex+0xba>
    key->state = ECC_STATE_NONE;
 800619c:	f04f 0800 	mov.w	r8, #0
 80061a0:	f8c2 8008 	str.w	r8, [r2, #8]
    err = wc_ecc_set_curve(key, keysize, curve_id);
 80061a4:	4628      	mov	r0, r5
 80061a6:	461a      	mov	r2, r3
 80061a8:	f7ff f94c 	bl	8005444 <wc_ecc_set_curve>
    if (err != 0) {
 80061ac:	4604      	mov	r4, r0
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d13e      	bne.n	8006230 <_ecc_make_key_ex+0xa6>
    key->flags = (byte)flags;
 80061b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80061b6:	60eb      	str	r3, [r5, #12]
        DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 80061b8:	4621      	mov	r1, r4
 80061ba:	a802      	add	r0, sp, #8
 80061bc:	2228      	movs	r2, #40	; 0x28
 80061be:	9001      	str	r0, [sp, #4]
 80061c0:	f00d f826 	bl	8013210 <memset>
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	2205      	movs	r2, #5
        err = mp_init(key->k);
 80061c8:	f505 77a8 	add.w	r7, r5, #336	; 0x150
        DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 80061cc:	61da      	str	r2, [r3, #28]
        err = mp_init(key->k);
 80061ce:	4638      	mov	r0, r7
 80061d0:	f00a ff37 	bl	8011042 <mp_init>
        if (err == MP_OKAY) {
 80061d4:	4604      	mov	r4, r0
 80061d6:	bb88      	cbnz	r0, 800623c <_ecc_make_key_ex+0xb2>
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 80061d8:	f44f 7002 	mov.w	r0, #520	; 0x208
 80061dc:	f00c ffe0 	bl	80131a0 <malloc>
 80061e0:	4680      	mov	r8, r0
 80061e2:	b348      	cbz	r0, 8006238 <_ecc_make_key_ex+0xae>
 80061e4:	9b01      	ldr	r3, [sp, #4]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 80061e6:	223b      	movs	r2, #59	; 0x3b
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 80061e8:	6198      	str	r0, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 80061ea:	a901      	add	r1, sp, #4
 80061ec:	6928      	ldr	r0, [r5, #16]
 80061ee:	f7ff f8d9 	bl	80053a4 <wc_ecc_curve_load>
        if (err == MP_OKAY) {
 80061f2:	4604      	mov	r4, r0
 80061f4:	bb10      	cbnz	r0, 800623c <_ecc_make_key_ex+0xb2>
            err = wc_ecc_gen_k(rng, key->dp->size, key->k, curve->order);
 80061f6:	6929      	ldr	r1, [r5, #16]
 80061f8:	9b01      	ldr	r3, [sp, #4]
 80061fa:	6809      	ldr	r1, [r1, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	463a      	mov	r2, r7
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff fa51 	bl	80056a8 <wc_ecc_gen_k>
        if (err == MP_OKAY) {
 8006206:	4604      	mov	r4, r0
 8006208:	b9c0      	cbnz	r0, 800623c <_ecc_make_key_ex+0xb2>
            err = ecc_make_pub_ex(key, curve, NULL, rng);
 800620a:	4602      	mov	r2, r0
 800620c:	9901      	ldr	r1, [sp, #4]
 800620e:	4633      	mov	r3, r6
 8006210:	4628      	mov	r0, r5
 8006212:	f7ff ff28 	bl	8006066 <ecc_make_pub_ex>
        if (err == MP_OKAY
 8006216:	4604      	mov	r4, r0
 8006218:	b980      	cbnz	r0, 800623c <_ecc_make_key_ex+0xb2>
            key->type = ECC_PRIVATEKEY;
 800621a:	2302      	movs	r3, #2
 800621c:	602b      	str	r3, [r5, #0]
        wc_ecc_curve_free(curve);
 800621e:	9801      	ldr	r0, [sp, #4]
 8006220:	f7ff f878 	bl	8005314 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 8006224:	f1b8 0f00 	cmp.w	r8, #0
 8006228:	d002      	beq.n	8006230 <_ecc_make_key_ex+0xa6>
 800622a:	4640      	mov	r0, r8
 800622c:	f00c ffc0 	bl	80131b0 <free>
}
 8006230:	4620      	mov	r0, r4
 8006232:	b00c      	add	sp, #48	; 0x30
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006238:	f06f 047c 	mvn.w	r4, #124	; 0x7c
            mp_forcezero(key->k);
 800623c:	4638      	mov	r0, r7
 800623e:	f00a ff13 	bl	8011068 <mp_forcezero>
 8006242:	e7ec      	b.n	800621e <_ecc_make_key_ex+0x94>
        return BAD_FUNC_ARG;
 8006244:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8006248:	e7f2      	b.n	8006230 <_ecc_make_key_ex+0xa6>

0800624a <wc_ecc_make_key_ex>:
{
 800624a:	b513      	push	{r0, r1, r4, lr}
    err = _ecc_make_key_ex(rng, keysize, key, curve_id, flags);
 800624c:	2400      	movs	r4, #0
 800624e:	9400      	str	r4, [sp, #0]
 8006250:	f7ff ff9b 	bl	800618a <_ecc_make_key_ex>
}
 8006254:	b002      	add	sp, #8
 8006256:	bd10      	pop	{r4, pc}

08006258 <wc_ecc_sign_hash_ex>:
{
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	b095      	sub	sp, #84	; 0x54
 800625e:	4607      	mov	r7, r0
 8006260:	9203      	str	r2, [sp, #12]
   DECLARE_CURVE_SPECS(1);
 8006262:	a80a      	add	r0, sp, #40	; 0x28
 8006264:	2228      	movs	r2, #40	; 0x28
{
 8006266:	460e      	mov	r6, r1
   DECLARE_CURVE_SPECS(1);
 8006268:	2100      	movs	r1, #0
{
 800626a:	461c      	mov	r4, r3
 800626c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   DECLARE_CURVE_SPECS(1);
 8006270:	9009      	str	r0, [sp, #36]	; 0x24
 8006272:	f00c ffcd 	bl	8013210 <memset>
 8006276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006278:	2201      	movs	r2, #1
 800627a:	61da      	str	r2, [r3, #28]
   if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL) {
 800627c:	2f00      	cmp	r7, #0
 800627e:	f000 8141 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
 8006282:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 813d 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
 800628a:	f1b8 0f00 	cmp.w	r8, #0
 800628e:	f000 8139 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
 8006292:	2c00      	cmp	r4, #0
 8006294:	f000 8136 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8132 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
   if (key->type != ECC_PRIVATEKEY && key->type != ECC_PRIVATEKEY_ONLY) {
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	3b02      	subs	r3, #2
 80062a4:	4293      	cmp	r3, r2
 80062a6:	f200 812d 	bhi.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 80062aa:	6860      	ldr	r0, [r4, #4]
 80062ac:	f7ff f9d1 	bl	8005652 <wc_ecc_is_valid_idx>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f000 8127 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8123 	beq.w	8006504 <wc_ecc_sign_hash_ex+0x2ac>
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 80062be:	2068      	movs	r0, #104	; 0x68
 80062c0:	f00c ff6e 	bl	80131a0 <malloc>
 80062c4:	4605      	mov	r5, r0
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f000 811f 	beq.w	800650a <wc_ecc_sign_hash_ex+0x2b2>
 80062cc:	2268      	movs	r2, #104	; 0x68
 80062ce:	2100      	movs	r1, #0
 80062d0:	f00c ff9e 	bl	8013210 <memset>
   if ((err = INIT_MP_INT_SIZE(e, ECC_KEY_MAX_BITS(key))) != MP_OKAY) {
 80062d4:	4628      	mov	r0, r5
 80062d6:	f00a feb4 	bl	8011042 <mp_init>
 80062da:	4683      	mov	fp, r0
 80062dc:	b130      	cbz	r0, 80062ec <wc_ecc_sign_hash_ex+0x94>
      FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 80062de:	4628      	mov	r0, r5
   FREE_CURVE_SPECS();
 80062e0:	f00c ff66 	bl	80131b0 <free>
}
 80062e4:	4658      	mov	r0, fp
 80062e6:	b015      	add	sp, #84	; 0x54
 80062e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ALLOC_CURVE_SPECS(1, err);
 80062ec:	2068      	movs	r0, #104	; 0x68
 80062ee:	f00c ff57 	bl	80131a0 <malloc>
 80062f2:	9002      	str	r0, [sp, #8]
 80062f4:	b978      	cbnz	r0, 8006316 <wc_ecc_sign_hash_ex+0xbe>
 80062f6:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
   mp_clear(e);
 80062fa:	4628      	mov	r0, r5
 80062fc:	f00a feb6 	bl	801106c <mp_clear>
   wc_ecc_curve_free(curve);
 8006300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006302:	f7ff f807 	bl	8005314 <wc_ecc_curve_free>
   FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 8006306:	4628      	mov	r0, r5
 8006308:	f00c ff52 	bl	80131b0 <free>
   FREE_CURVE_SPECS();
 800630c:	9b02      	ldr	r3, [sp, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0e8      	beq.n	80062e4 <wc_ecc_sign_hash_ex+0x8c>
 8006312:	4618      	mov	r0, r3
 8006314:	e7e4      	b.n	80062e0 <wc_ecc_sign_hash_ex+0x88>
        ALLOC_CURVE_SPECS(1, err);
 8006316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006318:	9a02      	ldr	r2, [sp, #8]
 800631a:	619a      	str	r2, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800631c:	6920      	ldr	r0, [r4, #16]
 800631e:	2208      	movs	r2, #8
 8006320:	a909      	add	r1, sp, #36	; 0x24
 8006322:	f7ff f83f 	bl	80053a4 <wc_ecc_curve_load>
   if (err == MP_OKAY) {
 8006326:	4683      	mov	fp, r0
 8006328:	2800      	cmp	r0, #0
 800632a:	d1e6      	bne.n	80062fa <wc_ecc_sign_hash_ex+0xa2>
       word32 orderBits = (word32)mp_count_bits(curve->order);
 800632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632e:	68d8      	ldr	r0, [r3, #12]
 8006330:	f00b fe55 	bl	8011fde <mp_count_bits>
       if ((WOLFSSL_BIT_SIZE * inlen) > orderBits)
 8006334:	ebb0 0fc6 	cmp.w	r0, r6, lsl #3
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 8006338:	bf3c      	itt	cc
 800633a:	1dc6      	addcc	r6, r0, #7
 800633c:	08f6      	lsrcc	r6, r6, #3
       word32 orderBits = (word32)mp_count_bits(curve->order);
 800633e:	4681      	mov	r9, r0
       err = mp_read_unsigned_bin(e, in, inlen);
 8006340:	4632      	mov	r2, r6
 8006342:	4639      	mov	r1, r7
 8006344:	4628      	mov	r0, r5
 8006346:	f00a fec5 	bl	80110d4 <mp_read_unsigned_bin>
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
 800634a:	4683      	mov	fp, r0
 800634c:	2800      	cmp	r0, #0
 800634e:	d1d4      	bne.n	80062fa <wc_ecc_sign_hash_ex+0xa2>
 8006350:	ebb9 0fc6 	cmp.w	r9, r6, lsl #3
 8006354:	d206      	bcs.n	8006364 <wc_ecc_sign_hash_ex+0x10c>
           mp_rshb(e, (int)(WOLFSSL_BIT_SIZE - (orderBits & 0x7)));
 8006356:	f009 0107 	and.w	r1, r9, #7
 800635a:	f1c1 0108 	rsb	r1, r1, #8
 800635e:	4628      	mov	r0, r5
 8006360:	f00b fe41 	bl	8011fe6 <mp_rshb>
       pubkey = (ecc_key*)XMALLOC(sizeof(ecc_key), key->heap, DYNAMIC_TYPE_ECC);
 8006364:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8006368:	f00c ff1a 	bl	80131a0 <malloc>
       if (pubkey == NULL)
 800636c:	4606      	mov	r6, r0
 800636e:	2800      	cmp	r0, #0
 8006370:	d0c1      	beq.n	80062f6 <wc_ecc_sign_hash_ex+0x9e>
           err = wc_ecc_init_ex(pubkey, key->heap, INVALID_DEVID);
 8006372:	6961      	ldr	r1, [r4, #20]
 8006374:	f06f 0201 	mvn.w	r2, #1
 8006378:	f7ff fa33 	bl	80057e2 <wc_ecc_init_ex>
           if (err == MP_OKAY) {
 800637c:	4683      	mov	fp, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d1bb      	bne.n	80062fa <wc_ecc_sign_hash_ex+0xa2>
    NEW_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006382:	2068      	movs	r0, #104	; 0x68
              err = ecc_sign_hash_sw(key, pubkey, rng, curve, e, r, s);
 8006384:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    NEW_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006388:	f00c ff0a 	bl	80131a0 <malloc>
 800638c:	4607      	mov	r7, r0
 800638e:	2800      	cmp	r0, #0
 8006390:	f000 80b5 	beq.w	80064fe <wc_ecc_sign_hash_ex+0x2a6>
 8006394:	4659      	mov	r1, fp
 8006396:	2268      	movs	r2, #104	; 0x68
 8006398:	f00c ff3a 	bl	8013210 <memset>
        err = INIT_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key));
 800639c:	4638      	mov	r0, r7
 800639e:	f00a fe50 	bl	8011042 <mp_init>
    if (err == MP_OKAY) {
 80063a2:	4683      	mov	fp, r0
 80063a4:	b930      	cbnz	r0, 80063b4 <wc_ecc_sign_hash_ex+0x15c>
 80063a6:	f04f 0a41 	mov.w	sl, #65	; 0x41
            if (++loop_check > 64) {
 80063aa:	f1ba 0a01 	subs.w	sl, sl, #1
 80063ae:	d10f      	bne.n	80063d0 <wc_ecc_sign_hash_ex+0x178>
                 err = RNG_FAILURE_E;
 80063b0:	f06f 0bc6 	mvn.w	fp, #198	; 0xc6
    mp_forcezero(b);
 80063b4:	4638      	mov	r0, r7
 80063b6:	f00a fe57 	bl	8011068 <mp_forcezero>
    FREE_MP_INT_SIZE(b, key->heap, DYNAMIC_TYPE_ECC);
 80063ba:	b117      	cbz	r7, 80063c2 <wc_ecc_sign_hash_ex+0x16a>
 80063bc:	4638      	mov	r0, r7
 80063be:	f00c fef7 	bl	80131b0 <free>
              wc_ecc_free(pubkey);
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff fa2e 	bl	8005824 <wc_ecc_free>
              XFREE(pubkey, key->heap, DYNAMIC_TYPE_ECC);
 80063c8:	4630      	mov	r0, r6
 80063ca:	f00c fef1 	bl	80131b0 <free>
 80063ce:	e794      	b.n	80062fa <wc_ecc_sign_hash_ex+0xa2>
            err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);
 80063d0:	6921      	ldr	r1, [r4, #16]
 80063d2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80063d6:	6809      	ldr	r1, [r1, #0]
 80063d8:	9803      	ldr	r0, [sp, #12]
 80063da:	463a      	mov	r2, r7
 80063dc:	f7ff f964 	bl	80056a8 <wc_ecc_gen_k>
        while (err == MP_ZERO_E);
 80063e0:	f110 0f79 	cmn.w	r0, #121	; 0x79
            err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);
 80063e4:	4683      	mov	fp, r0
        while (err == MP_ZERO_E);
 80063e6:	d0e0      	beq.n	80063aa <wc_ecc_sign_hash_ex+0x152>
    for (; err == MP_OKAY;) {
 80063e8:	f1bb 0f00 	cmp.w	fp, #0
 80063ec:	d1e2      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
 80063ee:	2341      	movs	r3, #65	; 0x41
 80063f0:	9304      	str	r3, [sp, #16]
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 80063f2:	f106 0318 	add.w	r3, r6, #24
            err = _ecc_make_key_ex(rng, key->dp->size, pubkey, key->dp->id,
 80063f6:	f8cd b018 	str.w	fp, [sp, #24]
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 80063fa:	9305      	str	r3, [sp, #20]
            mp_int* ep = pubkey->k;
 80063fc:	f506 7aa8 	add.w	sl, r6, #336	; 0x150
        if (++loop_check > 64) {
 8006400:	9b04      	ldr	r3, [sp, #16]
 8006402:	3b01      	subs	r3, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	d0d3      	beq.n	80063b0 <wc_ecc_sign_hash_ex+0x158>
            err = _ecc_make_key_ex(rng, key->dp->size, pubkey, key->dp->id,
 8006408:	6921      	ldr	r1, [r4, #16]
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	684b      	ldr	r3, [r1, #4]
 8006410:	9803      	ldr	r0, [sp, #12]
 8006412:	6809      	ldr	r1, [r1, #0]
 8006414:	4632      	mov	r2, r6
 8006416:	f7ff feb8 	bl	800618a <_ecc_make_key_ex>
        if (err != MP_OKAY) break;
 800641a:	4683      	mov	fp, r0
 800641c:	2800      	cmp	r0, #0
 800641e:	d1c9      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 8006420:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006422:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8006426:	9805      	ldr	r0, [sp, #20]
 8006428:	f00b f9d8 	bl	80117dc <mp_mod>
        if (err != MP_OKAY) break;
 800642c:	4683      	mov	fp, r0
 800642e:	2800      	cmp	r0, #0
 8006430:	d1c0      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
        if (mp_iszero(r) == MP_NO) {
 8006432:	981e      	ldr	r0, [sp, #120]	; 0x78
 8006434:	f00b fdce 	bl	8011fd4 <mp_iszero>
 8006438:	b170      	cbz	r0, 8006458 <wc_ecc_sign_hash_ex+0x200>
         mp_clear(pubkey->pubkey.x);
 800643a:	9805      	ldr	r0, [sp, #20]
 800643c:	f00a fe16 	bl	801106c <mp_clear>
         mp_clear(pubkey->pubkey.y);
 8006440:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8006444:	f00a fe12 	bl	801106c <mp_clear>
         mp_clear(pubkey->pubkey.z);
 8006448:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
 800644c:	f00a fe0e 	bl	801106c <mp_clear>
         mp_forcezero(pubkey->k);
 8006450:	4650      	mov	r0, sl
 8006452:	f00a fe09 	bl	8011068 <mp_forcezero>
    for (; err == MP_OKAY;) {
 8006456:	e7d3      	b.n	8006400 <wc_ecc_sign_hash_ex+0x1a8>
            mp_int* x  = key->k;
 8006458:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 800645c:	9307      	str	r3, [sp, #28]
            err = mp_mulmod(pubkey->k, b, curve->order, kp);
 800645e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8006462:	4653      	mov	r3, sl
 8006464:	4639      	mov	r1, r7
 8006466:	4650      	mov	r0, sl
 8006468:	f00b f9b6 	bl	80117d8 <mp_mulmod>
            if (err != MP_OKAY) break;
 800646c:	4683      	mov	fp, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d1a0      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_invmod(kp, curve->order, kp);
 8006472:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8006476:	4652      	mov	r2, sl
 8006478:	4650      	mov	r0, sl
 800647a:	f00b fbe9 	bl	8011c50 <mp_invmod>
            if (err != MP_OKAY) break;
 800647e:	4683      	mov	fp, r0
 8006480:	2800      	cmp	r0, #0
 8006482:	d197      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(x, r, curve->order, s);
 8006484:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8006488:	991e      	ldr	r1, [sp, #120]	; 0x78
 800648a:	4643      	mov	r3, r8
 800648c:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8006490:	f00b f9a2 	bl	80117d8 <mp_mulmod>
            if (err != MP_OKAY) break;
 8006494:	4683      	mov	fp, r0
 8006496:	2800      	cmp	r0, #0
 8006498:	d18c      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(kp, s, curve->order, s);
 800649a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800649e:	4643      	mov	r3, r8
 80064a0:	4641      	mov	r1, r8
 80064a2:	4650      	mov	r0, sl
 80064a4:	f00b f998 	bl	80117d8 <mp_mulmod>
            if (err != MP_OKAY) break;
 80064a8:	4683      	mov	fp, r0
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d182      	bne.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(kp, e, curve->order, ep);
 80064ae:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80064b2:	4653      	mov	r3, sl
 80064b4:	4629      	mov	r1, r5
 80064b6:	4650      	mov	r0, sl
 80064b8:	f00b f98e 	bl	80117d8 <mp_mulmod>
            if (err != MP_OKAY) break;
 80064bc:	4683      	mov	fp, r0
 80064be:	2800      	cmp	r0, #0
 80064c0:	f47f af78 	bne.w	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_addmod_ct(ep, s, curve->order, s);
 80064c4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80064c8:	4643      	mov	r3, r8
 80064ca:	4641      	mov	r1, r8
 80064cc:	4650      	mov	r0, sl
 80064ce:	f00a fdf9 	bl	80110c4 <mp_addmod_ct>
            if (err != MP_OKAY) break;
 80064d2:	4683      	mov	fp, r0
 80064d4:	2800      	cmp	r0, #0
 80064d6:	f47f af6d 	bne.w	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(s, b, curve->order, s);
 80064da:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80064de:	4643      	mov	r3, r8
 80064e0:	4639      	mov	r1, r7
 80064e2:	4640      	mov	r0, r8
 80064e4:	f00b f978 	bl	80117d8 <mp_mulmod>
            if (err != MP_OKAY) break;
 80064e8:	4683      	mov	fp, r0
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f47f af62 	bne.w	80063b4 <wc_ecc_sign_hash_ex+0x15c>
            if (mp_iszero(s) == MP_NO) {
 80064f0:	4640      	mov	r0, r8
 80064f2:	f00b fd6f 	bl	8011fd4 <mp_iszero>
 80064f6:	4683      	mov	fp, r0
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d19e      	bne.n	800643a <wc_ecc_sign_hash_ex+0x1e2>
 80064fc:	e75a      	b.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
        err = MEMORY_E;
 80064fe:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 8006502:	e757      	b.n	80063b4 <wc_ecc_sign_hash_ex+0x15c>
       return ECC_BAD_ARG_E;
 8006504:	f06f 0ba9 	mvn.w	fp, #169	; 0xa9
 8006508:	e6ec      	b.n	80062e4 <wc_ecc_sign_hash_ex+0x8c>
      return MEMORY_E;
 800650a:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800650e:	e6e9      	b.n	80062e4 <wc_ecc_sign_hash_ex+0x8c>

08006510 <wc_ecc_sign_hash>:
{
 8006510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8006518:	4689      	mov	r9, r1
 800651a:	4616      	mov	r6, r2
 800651c:	461f      	mov	r7, r3
    if (in == NULL || out == NULL || outlen == NULL || key == NULL) {
 800651e:	4680      	mov	r8, r0
 8006520:	2800      	cmp	r0, #0
 8006522:	d04d      	beq.n	80065c0 <wc_ecc_sign_hash+0xb0>
 8006524:	2a00      	cmp	r2, #0
 8006526:	d04b      	beq.n	80065c0 <wc_ecc_sign_hash+0xb0>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d049      	beq.n	80065c0 <wc_ecc_sign_hash+0xb0>
 800652c:	f1bb 0f00 	cmp.w	fp, #0
 8006530:	d046      	beq.n	80065c0 <wc_ecc_sign_hash+0xb0>
    if (rng == NULL) {
 8006532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006534:	2b00      	cmp	r3, #0
 8006536:	d043      	beq.n	80065c0 <wc_ecc_sign_hash+0xb0>
    NEW_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006538:	2068      	movs	r0, #104	; 0x68
 800653a:	f00c fe31 	bl	80131a0 <malloc>
 800653e:	4604      	mov	r4, r0
 8006540:	2800      	cmp	r0, #0
 8006542:	d043      	beq.n	80065cc <wc_ecc_sign_hash+0xbc>
 8006544:	2268      	movs	r2, #104	; 0x68
 8006546:	2100      	movs	r1, #0
 8006548:	f00c fe62 	bl	8013210 <memset>
    NEW_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800654c:	2068      	movs	r0, #104	; 0x68
 800654e:	f00c fe27 	bl	80131a0 <malloc>
 8006552:	4605      	mov	r5, r0
 8006554:	b3b8      	cbz	r0, 80065c6 <wc_ecc_sign_hash+0xb6>
 8006556:	2268      	movs	r2, #104	; 0x68
 8006558:	2100      	movs	r1, #0
 800655a:	f00c fe59 	bl	8013210 <memset>
    err = INIT_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key));
 800655e:	4620      	mov	r0, r4
 8006560:	f00a fd6f 	bl	8011042 <mp_init>
    if (err != 0) {
 8006564:	4682      	mov	sl, r0
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006566:	4628      	mov	r0, r5
    if (err != 0) {
 8006568:	f1ba 0f00 	cmp.w	sl, #0
 800656c:	d008      	beq.n	8006580 <wc_ecc_sign_hash+0x70>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800656e:	f00c fe1f 	bl	80131b0 <free>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 8006572:	4620      	mov	r0, r4
 8006574:	f00c fe1c 	bl	80131b0 <free>
}
 8006578:	4650      	mov	r0, sl
 800657a:	b003      	add	sp, #12
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = INIT_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key));
 8006580:	f00a fd5f 	bl	8011042 <mp_init>
    if (err != 0) {
 8006584:	4682      	mov	sl, r0
 8006586:	b108      	cbz	r0, 800658c <wc_ecc_sign_hash+0x7c>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006588:	4628      	mov	r0, r5
 800658a:	e7f0      	b.n	800656e <wc_ecc_sign_hash+0x5e>
    err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
 800658c:	e9cd 4500 	strd	r4, r5, [sp]
 8006590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006592:	465b      	mov	r3, fp
 8006594:	4649      	mov	r1, r9
 8006596:	4640      	mov	r0, r8
 8006598:	f7ff fe5e 	bl	8006258 <wc_ecc_sign_hash_ex>
    if (err < 0) {
 800659c:	f1b0 0a00 	subs.w	sl, r0, #0
 80065a0:	da06      	bge.n	80065b0 <wc_ecc_sign_hash+0xa0>
    mp_clear(r);
 80065a2:	4620      	mov	r0, r4
 80065a4:	f00a fd62 	bl	801106c <mp_clear>
    mp_clear(s);
 80065a8:	4628      	mov	r0, r5
 80065aa:	f00a fd5f 	bl	801106c <mp_clear>
    FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 80065ae:	e7eb      	b.n	8006588 <wc_ecc_sign_hash+0x78>
    err = StoreECC_DSA_Sig(out, outlen, r, s);
 80065b0:	462b      	mov	r3, r5
 80065b2:	4622      	mov	r2, r4
 80065b4:	4639      	mov	r1, r7
 80065b6:	4630      	mov	r0, r6
 80065b8:	f004 fc49 	bl	800ae4e <StoreECC_DSA_Sig>
 80065bc:	4682      	mov	sl, r0
 80065be:	e7f0      	b.n	80065a2 <wc_ecc_sign_hash+0x92>
        return ECC_BAD_ARG_E;
 80065c0:	f06f 0aa9 	mvn.w	sl, #169	; 0xa9
 80065c4:	e7d8      	b.n	8006578 <wc_ecc_sign_hash+0x68>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 80065c6:	4620      	mov	r0, r4
 80065c8:	f00c fdf2 	bl	80131b0 <free>
        return MEMORY_E;
 80065cc:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 80065d0:	e7d2      	b.n	8006578 <wc_ecc_sign_hash+0x68>

080065d2 <ecc_mul2add>:
int ecc_mul2add(ecc_point* A, mp_int* kA,
                    ecc_point* B, mp_int* kB,
                    ecc_point* C, mp_int* a, mp_int* modulus,
                    void* heap)
#endif
{
 80065d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	b08d      	sub	sp, #52	; 0x34
#else
  unsigned char* tA = NULL;
  unsigned char* tB = NULL;
#endif
  int            err = MP_OKAY, first, x, y;
  mp_digit       mp = 0;
 80065d8:	f04f 0b00 	mov.w	fp, #0
{
 80065dc:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80065de:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80065e0:	9205      	str	r2, [sp, #20]
 80065e2:	468a      	mov	sl, r1
 80065e4:	461e      	mov	r6, r3
  mp_digit       mp = 0;
 80065e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c

  /* argchks */
  if (A == NULL || kA == NULL || B == NULL || kB == NULL || C == NULL ||
 80065ea:	4680      	mov	r8, r0
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f000 81b0 	beq.w	8006952 <ecc_mul2add+0x380>
 80065f2:	2900      	cmp	r1, #0
 80065f4:	f000 81ad 	beq.w	8006952 <ecc_mul2add+0x380>
 80065f8:	2a00      	cmp	r2, #0
 80065fa:	f000 81aa 	beq.w	8006952 <ecc_mul2add+0x380>
 80065fe:	2e00      	cmp	r6, #0
 8006600:	f000 81a7 	beq.w	8006952 <ecc_mul2add+0x380>
 8006604:	2f00      	cmp	r7, #0
 8006606:	f000 81a4 	beq.w	8006952 <ecc_mul2add+0x380>
 800660a:	2d00      	cmp	r5, #0
 800660c:	f000 81a1 	beq.w	8006952 <ecc_mul2add+0x380>
     return ECC_BAD_ARG_E;
  }

#ifndef WOLFSSL_NO_MALLOC
  /* allocate memory */
  tA = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8006610:	f240 1001 	movw	r0, #257	; 0x101
 8006614:	f00c fdc4 	bl	80131a0 <malloc>
  if (tA == NULL) {
 8006618:	4681      	mov	r9, r0
 800661a:	b140      	cbz	r0, 800662e <ecc_mul2add+0x5c>
     return GEN_MEM_ERR;
  }
  tB = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800661c:	f240 1001 	movw	r0, #257	; 0x101
 8006620:	f00c fdbe 	bl	80131a0 <malloc>
  if (tB == NULL) {
 8006624:	9004      	str	r0, [sp, #16]
 8006626:	b928      	cbnz	r0, 8006634 <ecc_mul2add+0x62>
#ifdef WOLFSSL_SMALL_STACK
  precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,
                                                       DYNAMIC_TYPE_ECC_BUFFER);
  if (precomp == NULL) {
     XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
     XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8006628:	4648      	mov	r0, r9
 800662a:	f00c fdc1 	bl	80131b0 <free>
     return GEN_MEM_ERR;
 800662e:	f06f 0101 	mvn.w	r1, #1
 8006632:	e109      	b.n	8006848 <ecc_mul2add+0x276>
  precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,
 8006634:	2040      	movs	r0, #64	; 0x40
 8006636:	f00c fdb3 	bl	80131a0 <malloc>
  if (precomp == NULL) {
 800663a:	4604      	mov	r4, r0
 800663c:	b918      	cbnz	r0, 8006646 <ecc_mul2add+0x74>
     XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800663e:	9804      	ldr	r0, [sp, #16]
 8006640:	f00c fdb6 	bl	80131b0 <free>
 8006644:	e7f0      	b.n	8006628 <ecc_mul2add+0x56>
  }
  C->key = key;
#endif /* WOLFSSL_SMALL_STACK_CACHE */

  /* init variables */
  XMEMSET(tA, 0, ECC_BUFSIZE);
 8006646:	4659      	mov	r1, fp
 8006648:	f240 1201 	movw	r2, #257	; 0x101
 800664c:	4648      	mov	r0, r9
 800664e:	f00c fddf 	bl	8013210 <memset>
  XMEMSET(tB, 0, ECC_BUFSIZE);
 8006652:	4659      	mov	r1, fp
 8006654:	f240 1201 	movw	r2, #257	; 0x101
 8006658:	9804      	ldr	r0, [sp, #16]
 800665a:	f00c fdd9 	bl	8013210 <memset>
#ifndef WOLFSSL_SMALL_STACK
  XMEMSET(precomp, 0, sizeof(precomp));
#else
  XMEMSET(precomp, 0, sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ);
 800665e:	4659      	mov	r1, fp
 8006660:	2240      	movs	r2, #64	; 0x40
 8006662:	4620      	mov	r0, r4
 8006664:	f00c fdd4 	bl	8013210 <memset>
  wc_MemZero_Add("ecc_mul2add tA", tA, ECC_BUFSIZE);
  wc_MemZero_Add("ecc_mul2add tB", tB, ECC_BUFSIZE);
#endif

  /* get sizes */
  lenA = (unsigned int)mp_unsigned_bin_size(kA);
 8006668:	4650      	mov	r0, sl
 800666a:	f00a fd31 	bl	80110d0 <mp_unsigned_bin_size>
 800666e:	9006      	str	r0, [sp, #24]
  lenB = (unsigned int)mp_unsigned_bin_size(kB);
 8006670:	4630      	mov	r0, r6
 8006672:	f00a fd2d 	bl	80110d0 <mp_unsigned_bin_size>
  len  = MAX(lenA, lenB);

  /* sanity check */
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 8006676:	9906      	ldr	r1, [sp, #24]
 8006678:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
  lenB = (unsigned int)mp_unsigned_bin_size(kB);
 800667c:	4683      	mov	fp, r0
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 800667e:	f080 815c 	bcs.w	800693a <ecc_mul2add+0x368>
 8006682:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8006686:	f080 8158 	bcs.w	800693a <ecc_mul2add+0x368>
  len  = MAX(lenA, lenB);
 800668a:	4281      	cmp	r1, r0
 800668c:	460b      	mov	r3, r1
 800668e:	bf38      	it	cc
 8006690:	4603      	movcc	r3, r0
    err = BAD_FUNC_ARG;
  }

  if (err == MP_OKAY) {
    /* extract and justify kA */
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 8006692:	1a59      	subs	r1, r3, r1
 8006694:	4449      	add	r1, r9
 8006696:	4650      	mov	r0, sl
  len  = MAX(lenA, lenB);
 8006698:	9306      	str	r3, [sp, #24]
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 800669a:	f00b fc94 	bl	8011fc6 <mp_to_unsigned_bin>

    /* extract and justify kB */
    if (err == MP_OKAY)
 800669e:	4601      	mov	r1, r0
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f040 80ad 	bne.w	8006800 <ecc_mul2add+0x22e>
        err = mp_to_unsigned_bin(kB, (len - lenB) + tB);
 80066a6:	9b06      	ldr	r3, [sp, #24]
 80066a8:	eba3 010b 	sub.w	r1, r3, fp
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	4630      	mov	r0, r6
 80066b0:	4419      	add	r1, r3
 80066b2:	f00b fc88 	bl	8011fc6 <mp_to_unsigned_bin>

    /* allocate the table */
    if (err == MP_OKAY) {
 80066b6:	4601      	mov	r1, r0
 80066b8:	2800      	cmp	r0, #0
 80066ba:	f040 80a1 	bne.w	8006800 <ecc_mul2add+0x22e>
 80066be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80066c2:	4626      	mov	r6, r4
 80066c4:	9307      	str	r3, [sp, #28]
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
        #ifdef WOLFSSL_NO_MALLOC
            precomp[x] = &lcl_precomp[x];
        #endif
            err = wc_ecc_new_point_ex(&precomp[x], heap);
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7fe fa00 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
            if (err != MP_OKAY)
 80066cc:	4601      	mov	r1, r0
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f040 8096 	bne.w	8006800 <ecc_mul2add+0x22e>
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	3604      	adds	r6, #4
 80066d8:	429e      	cmp	r6, r3
 80066da:	d1f4      	bne.n	80066c6 <ecc_mul2add+0xf4>
    }
  }

  if (err == MP_OKAY)
    /* init montgomery reduction */
    err = mp_montgomery_setup(modulus, &mp);
 80066dc:	a90b      	add	r1, sp, #44	; 0x2c
 80066de:	4628      	mov	r0, r5
 80066e0:	f00b fd3c 	bl	801215c <mp_montgomery_setup>

  if (err == MP_OKAY) {
 80066e4:	4601      	mov	r1, r0
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f040 808a 	bne.w	8006800 <ecc_mul2add+0x22e>
    NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 80066ec:	2068      	movs	r0, #104	; 0x68
    err = ecc_mont_norm_points(A, precomp[1], B, precomp[1<<2], modulus, heap);
 80066ee:	f8d4 b004 	ldr.w	fp, [r4, #4]
 80066f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80066f6:	9108      	str	r1, [sp, #32]
    NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 80066f8:	f00c fd52 	bl	80131a0 <malloc>
 80066fc:	4606      	mov	r6, r0
 80066fe:	2800      	cmp	r0, #0
 8006700:	f000 811e 	beq.w	8006940 <ecc_mul2add+0x36e>
 8006704:	9908      	ldr	r1, [sp, #32]
 8006706:	2268      	movs	r2, #104	; 0x68
 8006708:	f00c fd82 	bl	8013210 <memset>
        err = INIT_MP_INT_SIZE(mu, mp_bitsused(modulus));
 800670c:	4630      	mov	r0, r6
 800670e:	f00a fc98 	bl	8011042 <mp_init>
    if (err == MP_OKAY) {
 8006712:	4601      	mov	r1, r0
 8006714:	2800      	cmp	r0, #0
 8006716:	d141      	bne.n	800679c <ecc_mul2add+0x1ca>
        err = mp_montgomery_calc_normalization(mu, modulus);
 8006718:	4629      	mov	r1, r5
 800671a:	4630      	mov	r0, r6
 800671c:	f00b fc65 	bl	8011fea <mp_montgomery_calc_normalization>
        if (err == MP_OKAY) {
 8006720:	4601      	mov	r1, r0
 8006722:	bbb0      	cbnz	r0, 8006792 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->x, mu, modulus, Am->x);
 8006724:	4631      	mov	r1, r6
 8006726:	465b      	mov	r3, fp
 8006728:	462a      	mov	r2, r5
 800672a:	4640      	mov	r0, r8
 800672c:	f00b f854 	bl	80117d8 <mp_mulmod>
        if (err == MP_OKAY)
 8006730:	4601      	mov	r1, r0
 8006732:	bb70      	cbnz	r0, 8006792 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->y, mu, modulus, Am->y);
 8006734:	4631      	mov	r1, r6
 8006736:	f10b 0368 	add.w	r3, fp, #104	; 0x68
 800673a:	462a      	mov	r2, r5
 800673c:	f108 0068 	add.w	r0, r8, #104	; 0x68
 8006740:	f00b f84a 	bl	80117d8 <mp_mulmod>
        if (err == MP_OKAY)
 8006744:	4601      	mov	r1, r0
 8006746:	bb20      	cbnz	r0, 8006792 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->z, mu, modulus, Am->z);
 8006748:	4631      	mov	r1, r6
 800674a:	f10b 03d0 	add.w	r3, fp, #208	; 0xd0
 800674e:	462a      	mov	r2, r5
 8006750:	f108 00d0 	add.w	r0, r8, #208	; 0xd0
 8006754:	f00b f840 	bl	80117d8 <mp_mulmod>
        if (err == MP_OKAY)
 8006758:	4601      	mov	r1, r0
 800675a:	b9d0      	cbnz	r0, 8006792 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->x, mu, modulus, Bm->x);
 800675c:	4631      	mov	r1, r6
 800675e:	9805      	ldr	r0, [sp, #20]
 8006760:	4653      	mov	r3, sl
 8006762:	462a      	mov	r2, r5
 8006764:	f00b f838 	bl	80117d8 <mp_mulmod>
        if (err == MP_OKAY)
 8006768:	4601      	mov	r1, r0
 800676a:	b990      	cbnz	r0, 8006792 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->y, mu, modulus, Bm->y);
 800676c:	9805      	ldr	r0, [sp, #20]
 800676e:	4631      	mov	r1, r6
 8006770:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8006774:	462a      	mov	r2, r5
 8006776:	3068      	adds	r0, #104	; 0x68
 8006778:	f00b f82e 	bl	80117d8 <mp_mulmod>
        if (err == MP_OKAY)
 800677c:	4601      	mov	r1, r0
 800677e:	b940      	cbnz	r0, 8006792 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->z, mu, modulus, Bm->z);
 8006780:	9805      	ldr	r0, [sp, #20]
 8006782:	4631      	mov	r1, r6
 8006784:	f10a 03d0 	add.w	r3, sl, #208	; 0xd0
 8006788:	462a      	mov	r2, r5
 800678a:	30d0      	adds	r0, #208	; 0xd0
 800678c:	f00b f824 	bl	80117d8 <mp_mulmod>
 8006790:	4601      	mov	r1, r0
        mp_clear(mu);
 8006792:	4630      	mov	r0, r6
 8006794:	9105      	str	r1, [sp, #20]
 8006796:	f00a fc69 	bl	801106c <mp_clear>
 800679a:	9905      	ldr	r1, [sp, #20]
 800679c:	9105      	str	r1, [sp, #20]
    FREE_MP_INT_SIZE(mu, heap, DYNAMIC_TYPE_ECC);
 800679e:	4630      	mov	r0, r6
 80067a0:	f00c fd06 	bl	80131b0 <free>
  }

  if (err == MP_OKAY) {
 80067a4:	9905      	ldr	r1, [sp, #20]
 80067a6:	bb59      	cbnz	r1, 8006800 <ecc_mul2add+0x22e>
    /* precomp [i,0](A + B) table */
    err = ecc_projective_dbl_point_safe(precomp[1], precomp[2], a, modulus, mp);
 80067a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80067b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067b2:	462b      	mov	r3, r5
 80067b4:	f7ff f8e4 	bl	8005980 <ecc_projective_dbl_point_safe>
  }
  if (err == MP_OKAY) {
 80067b8:	4601      	mov	r1, r0
 80067ba:	bb08      	cbnz	r0, 8006800 <ecc_mul2add+0x22e>
    err = ecc_projective_add_point_safe(precomp[1], precomp[2], precomp[3],
 80067bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067be:	9002      	str	r0, [sp, #8]
 80067c0:	e9cd 5300 	strd	r5, r3, [sp]
 80067c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067c6:	6860      	ldr	r0, [r4, #4]
 80067c8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80067cc:	f7ff f83e 	bl	800584c <ecc_projective_add_point_safe>
                                                          a, modulus, mp, NULL);
  }

  if (err == MP_OKAY) {
 80067d0:	4601      	mov	r1, r0
 80067d2:	b9a8      	cbnz	r0, 8006800 <ecc_mul2add+0x22e>
    /* precomp [0,i](A + B) table */
    err = ecc_projective_dbl_point_safe(precomp[4], precomp[8], a, modulus, mp);
 80067d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	6a21      	ldr	r1, [r4, #32]
 80067da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067dc:	6920      	ldr	r0, [r4, #16]
 80067de:	462b      	mov	r3, r5
 80067e0:	f7ff f8ce 	bl	8005980 <ecc_projective_dbl_point_safe>
  }
  if (err == MP_OKAY) {
 80067e4:	4601      	mov	r1, r0
 80067e6:	b958      	cbnz	r0, 8006800 <ecc_mul2add+0x22e>
    err = ecc_projective_add_point_safe(precomp[4], precomp[8], precomp[12], a,
 80067e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ea:	9002      	str	r0, [sp, #8]
 80067ec:	e9cd 5300 	strd	r5, r3, [sp]
 80067f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067f2:	6a21      	ldr	r1, [r4, #32]
 80067f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80067f6:	6920      	ldr	r0, [r4, #16]
 80067f8:	f7ff f828 	bl	800584c <ecc_projective_add_point_safe>
                                                             modulus, mp, NULL);
  }

  if (err == MP_OKAY) {
 80067fc:	4601      	mov	r1, r0
 80067fe:	b338      	cbz	r0, 8006850 <ecc_mul2add+0x27e>
  /* reduce to affine */
  if (err == MP_OKAY)
    err = ecc_map(C, modulus, mp);

  /* clean up */
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 8006800:	1f25      	subs	r5, r4, #4
 8006802:	f104 063c 	add.w	r6, r4, #60	; 0x3c
     wc_ecc_del_point_ex(precomp[x], heap);
 8006806:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800680a:	9105      	str	r1, [sp, #20]
 800680c:	f7fe f985 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 8006810:	42ae      	cmp	r6, r5
 8006812:	9905      	ldr	r1, [sp, #20]
 8006814:	d1f7      	bne.n	8006806 <ecc_mul2add+0x234>
 8006816:	f209 1201 	addw	r2, r9, #257	; 0x101
 800681a:	464b      	mov	r3, r9
 800681c:	2000      	movs	r0, #0
 800681e:	4293      	cmp	r3, r2
 8006820:	f040 8091 	bne.w	8006946 <ecc_mul2add+0x374>
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	2000      	movs	r0, #0
 8006828:	f203 1201 	addw	r2, r3, #257	; 0x101
 800682c:	4293      	cmp	r3, r2
 800682e:	f040 808d 	bne.w	800694c <ecc_mul2add+0x37a>
  XFREE(key->t1, heap, DYNAMIC_TYPE_ECC);
  XFREE(key, heap, DYNAMIC_TYPE_ECC_BUFFER);
  C->key = NULL;
#endif
#ifdef WOLFSSL_SMALL_STACK
  XFREE(precomp, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8006832:	4620      	mov	r0, r4
 8006834:	9105      	str	r1, [sp, #20]
 8006836:	f00c fcbb 	bl	80131b0 <free>
#endif
#ifndef WOLFSSL_NO_MALLOC
  XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800683a:	9804      	ldr	r0, [sp, #16]
 800683c:	f00c fcb8 	bl	80131b0 <free>
  XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 8006840:	4648      	mov	r0, r9
 8006842:	f00c fcb5 	bl	80131b0 <free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
  wc_MemZero_Check(tB, ECC_BUFSIZE);
  wc_MemZero_Check(tA, ECC_BUFSIZE);
#endif
  return err;
 8006846:	9905      	ldr	r1, [sp, #20]
}
 8006848:	4608      	mov	r0, r1
 800684a:	b00d      	add	sp, #52	; 0x34
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (x = 1; x < 4; x++) {
 8006850:	f04f 0801 	mov.w	r8, #1
      for (y = 1; y < 4; y++) {
 8006854:	f104 0610 	add.w	r6, r4, #16
        if (err == MP_OKAY) {
 8006858:	b961      	cbnz	r1, 8006874 <ecc_mul2add+0x2a2>
          err = ecc_projective_add_point_safe(precomp[x], precomp[(y<<2)],
 800685a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800685c:	9102      	str	r1, [sp, #8]
 800685e:	e9cd 5300 	strd	r5, r3, [sp]
 8006862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006864:	6831      	ldr	r1, [r6, #0]
 8006866:	f856 2028 	ldr.w	r2, [r6, r8, lsl #2]
 800686a:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 800686e:	f7fe ffed 	bl	800584c <ecc_projective_add_point_safe>
 8006872:	4601      	mov	r1, r0
      for (y = 1; y < 4; y++) {
 8006874:	9b07      	ldr	r3, [sp, #28]
 8006876:	3610      	adds	r6, #16
 8006878:	42b3      	cmp	r3, r6
 800687a:	d1ed      	bne.n	8006858 <ecc_mul2add+0x286>
    for (x = 1; x < 4; x++) {
 800687c:	f108 0801 	add.w	r8, r8, #1
 8006880:	f1b8 0f04 	cmp.w	r8, #4
 8006884:	d1e6      	bne.n	8006854 <ecc_mul2add+0x282>
  if (err == MP_OKAY) {
 8006886:	2900      	cmp	r1, #0
 8006888:	d1ba      	bne.n	8006800 <ecc_mul2add+0x22e>
    first   = 1;
 800688a:	2301      	movs	r3, #1
 800688c:	930a      	str	r3, [sp, #40]	; 0x28
    bitbufB = tB[0];
 800688e:	9b04      	ldr	r3, [sp, #16]
    bitbufA = tA[0];
 8006890:	f899 a000 	ldrb.w	sl, [r9]
    bitbufB = tB[0];
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	9305      	str	r3, [sp, #20]
                    err = mp_copy(precomp[i]->y, C->y);
 8006898:	f107 0368 	add.w	r3, r7, #104	; 0x68
    for (x = 0; x < (int)len || nibble != 3; ) {
 800689c:	4688      	mov	r8, r1
    nibble  = 3;
 800689e:	f04f 0b03 	mov.w	fp, #3
                    err = mp_copy(precomp[i]->y, C->y);
 80068a2:	9309      	str	r3, [sp, #36]	; 0x24
    for (x = 0; x < (int)len || nibble != 3; ) {
 80068a4:	9b06      	ldr	r3, [sp, #24]
 80068a6:	4543      	cmp	r3, r8
 80068a8:	dc0b      	bgt.n	80068c2 <ecc_mul2add+0x2f0>
 80068aa:	f1bb 0f03 	cmp.w	fp, #3
 80068ae:	d108      	bne.n	80068c2 <ecc_mul2add+0x2f0>
  if (err == MP_OKAY)
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d1a5      	bne.n	8006800 <ecc_mul2add+0x22e>
    err = ecc_map(C, modulus, mp);
 80068b4:	4629      	mov	r1, r5
 80068b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7fe fead 	bl	8005618 <ecc_map>
 80068be:	4601      	mov	r1, r0
 80068c0:	e79e      	b.n	8006800 <ecc_mul2add+0x22e>
        if (++nibble == 4) {
 80068c2:	f10b 0b01 	add.w	fp, fp, #1
 80068c6:	f1bb 0f04 	cmp.w	fp, #4
 80068ca:	d10c      	bne.n	80068e6 <ecc_mul2add+0x314>
            if (x == (int)len) break;
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	4543      	cmp	r3, r8
 80068d0:	d0ee      	beq.n	80068b0 <ecc_mul2add+0x2de>
            bitbufB = tB[x];
 80068d2:	9b04      	ldr	r3, [sp, #16]
            bitbufA = tA[x];
 80068d4:	f819 a008 	ldrb.w	sl, [r9, r8]
            bitbufB = tB[x];
 80068d8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80068dc:	9305      	str	r3, [sp, #20]
            x++;
 80068de:	f108 0801 	add.w	r8, r8, #1
            nibble  = 0;
 80068e2:	f04f 0b00 	mov.w	fp, #0
        nA = (bitbufA >> 6) & 0x03;
 80068e6:	ea4f 139a 	mov.w	r3, sl, lsr #6
 80068ea:	9307      	str	r3, [sp, #28]
        nB = (bitbufB >> 6) & 0x03;
 80068ec:	9b05      	ldr	r3, [sp, #20]
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 80068ee:	9a07      	ldr	r2, [sp, #28]
        nB = (bitbufB >> 6) & 0x03;
 80068f0:	099e      	lsrs	r6, r3, #6
        bitbufA = (bitbufA << 2) & 0xFF;
 80068f2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80068f6:	fa5f fa83 	uxtb.w	sl, r3
        bitbufB = (bitbufB << 2) & 0xFF;
 80068fa:	9b05      	ldr	r3, [sp, #20]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	b2db      	uxtb	r3, r3
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 8006900:	4332      	orrs	r2, r6
        bitbufB = (bitbufB << 2) & 0xFF;
 8006902:	9305      	str	r3, [sp, #20]
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 8006904:	9208      	str	r2, [sp, #32]
 8006906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006908:	d126      	bne.n	8006958 <ecc_mul2add+0x386>
 800690a:	2b01      	cmp	r3, #1
 800690c:	d0ca      	beq.n	80068a4 <ecc_mul2add+0x2d2>
        if (first == 0) {
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1c8      	bne.n	80068a4 <ecc_mul2add+0x2d2>
 8006912:	e022      	b.n	800695a <ecc_mul2add+0x388>
                if (err == MP_OKAY)
 8006914:	2900      	cmp	r1, #0
 8006916:	f47f af73 	bne.w	8006800 <ecc_mul2add+0x22e>
                    err = ecc_projective_add_point_safe(C, precomp[i],
 800691a:	ab0a      	add	r3, sp, #40	; 0x28
 800691c:	9302      	str	r3, [sp, #8]
 800691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006920:	e9cd 5300 	strd	r5, r3, [sp]
 8006924:	463a      	mov	r2, r7
 8006926:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 800692a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800692c:	4638      	mov	r0, r7
 800692e:	f7fe ff8d 	bl	800584c <ecc_projective_add_point_safe>
                if (err != MP_OKAY)
 8006932:	4601      	mov	r1, r0
 8006934:	2800      	cmp	r0, #0
 8006936:	d0b5      	beq.n	80068a4 <ecc_mul2add+0x2d2>
 8006938:	e762      	b.n	8006800 <ecc_mul2add+0x22e>
    err = BAD_FUNC_ARG;
 800693a:	f06f 01ac 	mvn.w	r1, #172	; 0xac
 800693e:	e75f      	b.n	8006800 <ecc_mul2add+0x22e>
       err = MEMORY_E;
 8006940:	f06f 017c 	mvn.w	r1, #124	; 0x7c
 8006944:	e75c      	b.n	8006800 <ecc_mul2add+0x22e>
 8006946:	f803 0b01 	strb.w	r0, [r3], #1
 800694a:	e768      	b.n	800681e <ecc_mul2add+0x24c>
 800694c:	f803 0b01 	strb.w	r0, [r3], #1
 8006950:	e76c      	b.n	800682c <ecc_mul2add+0x25a>
     return ECC_BAD_ARG_E;
 8006952:	f06f 01a9 	mvn.w	r1, #169	; 0xa9
 8006956:	e777      	b.n	8006848 <ecc_mul2add+0x276>
        if (first == 0) {
 8006958:	b9d3      	cbnz	r3, 8006990 <ecc_mul2add+0x3be>
            if (err == MP_OKAY)
 800695a:	2900      	cmp	r1, #0
 800695c:	f47f af50 	bne.w	8006800 <ecc_mul2add+0x22e>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 8006960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	4639      	mov	r1, r7
 8006966:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006968:	462b      	mov	r3, r5
 800696a:	4638      	mov	r0, r7
 800696c:	f7ff f808 	bl	8005980 <ecc_projective_dbl_point_safe>
            if (err == MP_OKAY)
 8006970:	4601      	mov	r1, r0
 8006972:	2800      	cmp	r0, #0
 8006974:	f47f af44 	bne.w	8006800 <ecc_mul2add+0x22e>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 8006978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4639      	mov	r1, r7
 800697e:	462b      	mov	r3, r5
 8006980:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006982:	4638      	mov	r0, r7
 8006984:	f7fe fffc 	bl	8005980 <ecc_projective_dbl_point_safe>
        if ((nA != 0) || (nB != 0)) {
 8006988:	9b08      	ldr	r3, [sp, #32]
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800698a:	4601      	mov	r1, r0
        if ((nA != 0) || (nB != 0)) {
 800698c:	2b00      	cmp	r3, #0
 800698e:	d089      	beq.n	80068a4 <ecc_mul2add+0x2d2>
            unsigned int i = nA + (nB<<2);
 8006990:	9b07      	ldr	r3, [sp, #28]
 8006992:	eb03 0686 	add.w	r6, r3, r6, lsl #2
            if (first == 1) {
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	2b01      	cmp	r3, #1
 800699a:	d1bb      	bne.n	8006914 <ecc_mul2add+0x342>
                first = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	930a      	str	r3, [sp, #40]	; 0x28
                if (err == MP_OKAY)
 80069a0:	2900      	cmp	r1, #0
 80069a2:	f47f af2d 	bne.w	8006800 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->x, C->x);
 80069a6:	4639      	mov	r1, r7
 80069a8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80069ac:	f00b fb0d 	bl	8011fca <mp_copy>
                if (err == MP_OKAY)
 80069b0:	4601      	mov	r1, r0
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f47f af24 	bne.w	8006800 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->y, C->y);
 80069b8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80069bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069be:	3068      	adds	r0, #104	; 0x68
 80069c0:	f00b fb03 	bl	8011fca <mp_copy>
                if (err == MP_OKAY)
 80069c4:	4601      	mov	r1, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f47f af1a 	bne.w	8006800 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->z, C->z);
 80069cc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80069d0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80069d4:	30d0      	adds	r0, #208	; 0xd0
 80069d6:	f00b faf8 	bl	8011fca <mp_copy>
 80069da:	4601      	mov	r1, r0
 80069dc:	e762      	b.n	80068a4 <ecc_mul2add+0x2d2>

080069de <wc_ecc_verify_hash_ex>:
               Caller should check the *res value to determine if the signature
               is valid or invalid. Other negative values are returned on error.
*/
int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash,
                    word32 hashlen, int* res, ecc_key* key)
{
 80069de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e2:	b09f      	sub	sp, #124	; 0x7c
 80069e4:	4681      	mov	r9, r0
 80069e6:	9206      	str	r2, [sp, #24]
#elif defined(WOLFSSL_XILINX_CRYPT_VERSAL)
   byte sigRS[ECC_MAX_CRYPTO_HW_SIZE * 2];
   byte hashcopy[ECC_MAX_CRYPTO_HW_SIZE] = {0};
#else
   int curveLoaded = 0;
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 80069e8:	a80a      	add	r0, sp, #40	; 0x28
 80069ea:	2228      	movs	r2, #40	; 0x28
{
 80069ec:	468a      	mov	sl, r1
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 80069ee:	2100      	movs	r1, #0
{
 80069f0:	4698      	mov	r8, r3
 80069f2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 80069f4:	9008      	str	r0, [sp, #32]
 80069f6:	f00c fc0b 	bl	8013210 <memset>
 80069fa:	9b08      	ldr	r3, [sp, #32]
 80069fc:	2205      	movs	r2, #5
 80069fe:	61da      	str	r2, [r3, #28]
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8006a00:	f1b9 0f00 	cmp.w	r9, #0
 8006a04:	d105      	bne.n	8006a12 <wc_ecc_verify_hash_ex+0x34>
       return ECC_BAD_ARG_E;
 8006a06:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
   (void)keySz;
   (void)hashlen;

   return err;
#endif /* WOLFSSL_STM32_PKA */
}
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	b01f      	add	sp, #124	; 0x7c
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8006a12:	f1ba 0f00 	cmp.w	sl, #0
 8006a16:	d0f6      	beq.n	8006a06 <wc_ecc_verify_hash_ex+0x28>
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f3      	beq.n	8006a06 <wc_ecc_verify_hash_ex+0x28>
 8006a1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <wc_ecc_verify_hash_ex+0x28>
 8006a24:	2e00      	cmp	r6, #0
 8006a26:	d0ee      	beq.n	8006a06 <wc_ecc_verify_hash_ex+0x28>
   *res = 0;
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6019      	str	r1, [r3, #0]
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 8006a2c:	6870      	ldr	r0, [r6, #4]
 8006a2e:	f7fe fe10 	bl	8005652 <wc_ecc_is_valid_idx>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d0e7      	beq.n	8006a06 <wc_ecc_verify_hash_ex+0x28>
 8006a36:	6933      	ldr	r3, [r6, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0e4      	beq.n	8006a06 <wc_ecc_verify_hash_ex+0x28>
    DECLARE_CURVE_SPECS(1);
 8006a3c:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 8006a40:	2228      	movs	r2, #40	; 0x28
 8006a42:	4658      	mov	r0, fp
 8006a44:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006a48:	f00c fbe2 	bl	8013210 <memset>
 8006a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4e:	2201      	movs	r2, #1
 8006a50:	61da      	str	r2, [r3, #28]
    ALLOC_CURVE_SPECS(1, err);
 8006a52:	2068      	movs	r0, #104	; 0x68
 8006a54:	f00c fba4 	bl	80131a0 <malloc>
 8006a58:	4605      	mov	r5, r0
 8006a5a:	b308      	cbz	r0, 8006aa0 <wc_ecc_verify_hash_ex+0xc2>
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8006a5e:	2208      	movs	r2, #8
    ALLOC_CURVE_SPECS(1, err);
 8006a60:	6198      	str	r0, [r3, #24]
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8006a62:	a909      	add	r1, sp, #36	; 0x24
 8006a64:	6930      	ldr	r0, [r6, #16]
 8006a66:	f7fe fc9d 	bl	80053a4 <wc_ecc_curve_load>
    if (err != 0) {
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d13c      	bne.n	8006aea <wc_ecc_verify_hash_ex+0x10c>
    if (mp_iszero(r) || mp_iszero(s)) {
 8006a70:	4648      	mov	r0, r9
 8006a72:	f00b faaf 	bl	8011fd4 <mp_iszero>
 8006a76:	b1b0      	cbz	r0, 8006aa6 <wc_ecc_verify_hash_ex+0xc8>
        err = MP_ZERO_E;
 8006a78:	f06f 0478 	mvn.w	r4, #120	; 0x78
    wc_ecc_curve_free(curve);
 8006a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a7e:	f7fe fc49 	bl	8005314 <wc_ecc_curve_free>
    FREE_CURVE_SPECS();
 8006a82:	4628      	mov	r0, r5
 8006a84:	f00c fb94 	bl	80131b0 <free>
   if (err != MP_OKAY) {
 8006a88:	2c00      	cmp	r4, #0
 8006a8a:	d1be      	bne.n	8006a0a <wc_ecc_verify_hash_ex+0x2c>
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	2b03      	cmp	r3, #3
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006a90:	f44f 7002 	mov.w	r0, #520	; 0x208
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 8006a94:	d137      	bne.n	8006b06 <wc_ecc_verify_hash_ex+0x128>
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006a96:	f00c fb83 	bl	80131a0 <malloc>
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	9005      	str	r0, [sp, #20]
 8006a9e:	b9d8      	cbnz	r0, 8006ad8 <wc_ecc_verify_hash_ex+0xfa>
    ALLOC_CURVE_SPECS(1, err);
 8006aa0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   if (err != MP_OKAY) {
 8006aa4:	e7b1      	b.n	8006a0a <wc_ecc_verify_hash_ex+0x2c>
    if (mp_iszero(r) || mp_iszero(s)) {
 8006aa6:	4650      	mov	r0, sl
 8006aa8:	f00b fa94 	bl	8011fd4 <mp_iszero>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d1e3      	bne.n	8006a78 <wc_ecc_verify_hash_ex+0x9a>
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	4648      	mov	r0, r9
 8006ab4:	68d9      	ldr	r1, [r3, #12]
 8006ab6:	f00a fb07 	bl	80110c8 <mp_cmp>
 8006aba:	3001      	adds	r0, #1
 8006abc:	d109      	bne.n	8006ad2 <wc_ecc_verify_hash_ex+0xf4>
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	4650      	mov	r0, sl
 8006ac2:	68d9      	ldr	r1, [r3, #12]
 8006ac4:	f00a fb00 	bl	80110c8 <mp_cmp>
 8006ac8:	1c44      	adds	r4, r0, #1
 8006aca:	bf18      	it	ne
 8006acc:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8006ad0:	e7d4      	b.n	8006a7c <wc_ecc_verify_hash_ex+0x9e>
        err = MP_VAL;
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ad6:	e7d1      	b.n	8006a7c <wc_ecc_verify_hash_ex+0x9e>
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006ad8:	9b08      	ldr	r3, [sp, #32]
      err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8006ada:	223b      	movs	r2, #59	; 0x3b
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006adc:	6198      	str	r0, [r3, #24]
      err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8006ade:	a908      	add	r1, sp, #32
 8006ae0:	6930      	ldr	r0, [r6, #16]
 8006ae2:	f7fe fc5f 	bl	80053a4 <wc_ecc_curve_load>
      if (err != MP_OKAY) {
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	b108      	cbz	r0, 8006aee <wc_ecc_verify_hash_ex+0x110>
        FREE_CURVE_SPECS();
 8006aea:	4628      	mov	r0, r5
 8006aec:	e072      	b.n	8006bd4 <wc_ecc_verify_hash_ex+0x1f6>
      err = ecc_make_pub_ex(key, curve, NULL, NULL);
 8006aee:	4603      	mov	r3, r0
 8006af0:	4602      	mov	r2, r0
 8006af2:	9908      	ldr	r1, [sp, #32]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7ff fab6 	bl	8006066 <ecc_make_pub_ex>
      if (err != MP_OKAY) {
 8006afa:	4604      	mov	r4, r0
 8006afc:	b198      	cbz	r0, 8006b26 <wc_ecc_verify_hash_ex+0x148>
           wc_ecc_curve_free(curve);
 8006afe:	9808      	ldr	r0, [sp, #32]
 8006b00:	f7fe fc08 	bl	8005314 <wc_ecc_curve_free>
           FREE_CURVE_SPECS();
 8006b04:	e7f1      	b.n	8006aea <wc_ecc_verify_hash_ex+0x10c>
       ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006b06:	f00c fb4b 	bl	80131a0 <malloc>
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	9005      	str	r0, [sp, #20]
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d0c6      	beq.n	8006aa0 <wc_ecc_verify_hash_ex+0xc2>
 8006b12:	9b08      	ldr	r3, [sp, #32]
       err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8006b14:	223b      	movs	r2, #59	; 0x3b
       ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 8006b16:	6198      	str	r0, [r3, #24]
       err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8006b18:	a908      	add	r1, sp, #32
 8006b1a:	6930      	ldr	r0, [r6, #16]
 8006b1c:	f7fe fc42 	bl	80053a4 <wc_ecc_curve_load>
       if (err != 0) {
 8006b20:	4604      	mov	r4, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d1e1      	bne.n	8006aea <wc_ecc_verify_hash_ex+0x10c>
   ecc_point* mG = NULL;
 8006b26:	2400      	movs	r4, #0
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006b28:	2068      	movs	r0, #104	; 0x68
   err = ecc_verify_hash(r, s, hash, hashlen, res, key, curve);
 8006b2a:	9f08      	ldr	r7, [sp, #32]
   ecc_point* mG = NULL;
 8006b2c:	9409      	str	r4, [sp, #36]	; 0x24
   ecc_point* mQ = NULL;
 8006b2e:	9414      	str	r4, [sp, #80]	; 0x50
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006b30:	f00c fb36 	bl	80131a0 <malloc>
 8006b34:	4605      	mov	r5, r0
 8006b36:	b150      	cbz	r0, 8006b4e <wc_ecc_verify_hash_ex+0x170>
 8006b38:	2268      	movs	r2, #104	; 0x68
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	f00c fb68 	bl	8013210 <memset>
   err = INIT_MP_INT_SIZE(e, ECC_KEY_MAX_BITS(key));
 8006b40:	4628      	mov	r0, r5
 8006b42:	f00a fa7e 	bl	8011042 <mp_init>
   if (err != MP_OKAY) {
 8006b46:	b128      	cbz	r0, 8006b54 <wc_ecc_verify_hash_ex+0x176>
      XFREE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f00c fb31 	bl	80131b0 <free>
       return MEMORY_E;
 8006b4e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8006b52:	e03b      	b.n	8006bcc <wc_ecc_verify_hash_ex+0x1ee>
       unsigned int orderBits = (unsigned int)mp_count_bits(curve->order);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f00b fa42 	bl	8011fde <mp_count_bits>
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 8006b5a:	ebb0 0fc8 	cmp.w	r0, r8, lsl #3
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 8006b5e:	bf3c      	itt	cc
 8006b60:	f100 0807 	addcc.w	r8, r0, #7
 8006b64:	ea4f 08d8 	movcc.w	r8, r8, lsr #3
 8006b68:	9007      	str	r0, [sp, #28]
       err = mp_read_unsigned_bin(e, hash, hashlen);
 8006b6a:	9906      	ldr	r1, [sp, #24]
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f00a fab0 	bl	80110d4 <mp_read_unsigned_bin>
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 8006b74:	4604      	mov	r4, r0
 8006b76:	b950      	cbnz	r0, 8006b8e <wc_ecc_verify_hash_ex+0x1b0>
 8006b78:	9b07      	ldr	r3, [sp, #28]
 8006b7a:	ebb3 0fc8 	cmp.w	r3, r8, lsl #3
 8006b7e:	d206      	bcs.n	8006b8e <wc_ecc_verify_hash_ex+0x1b0>
           mp_rshb(e, (int)(WOLFSSL_BIT_SIZE - (orderBits & 0x7)));
 8006b80:	f003 0107 	and.w	r1, r3, #7
 8006b84:	f1c1 0108 	rsb	r1, r1, #8
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f00b fa2c 	bl	8011fe6 <mp_rshb>
   NEW_MP_INT_SIZE(w, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006b8e:	2068      	movs	r0, #104	; 0x68
 8006b90:	f00c fb06 	bl	80131a0 <malloc>
 8006b94:	4680      	mov	r8, r0
 8006b96:	b300      	cbz	r0, 8006bda <wc_ecc_verify_hash_ex+0x1fc>
 8006b98:	2268      	movs	r2, #104	; 0x68
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	f00c fb38 	bl	8013210 <memset>
   if (err == MP_OKAY) {
 8006ba0:	b1f4      	cbz	r4, 8006be0 <wc_ecc_verify_hash_ex+0x202>
   wc_ecc_del_point_ex(mG, key->heap);
 8006ba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ba4:	f7fd ffb9 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
   wc_ecc_del_point_ex(mQ, key->heap);
 8006ba8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006baa:	f7fd ffb6 	bl	8004b1a <wc_ecc_del_point_ex.constprop.0>
   mp_clear(e);
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f00a fa5c 	bl	801106c <mp_clear>
   mp_clear(w);
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	f00a fa59 	bl	801106c <mp_clear>
   FREE_MP_INT_SIZE(w, key->heap, DYNAMIC_TYPE_ECC);
 8006bba:	f1b8 0f00 	cmp.w	r8, #0
 8006bbe:	d002      	beq.n	8006bc6 <wc_ecc_verify_hash_ex+0x1e8>
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	f00c faf5 	bl	80131b0 <free>
   FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f00c faf2 	bl	80131b0 <free>
   wc_ecc_curve_free(curve);
 8006bcc:	9808      	ldr	r0, [sp, #32]
 8006bce:	f7fe fba1 	bl	8005314 <wc_ecc_curve_free>
   FREE_CURVE_SPECS();
 8006bd2:	9805      	ldr	r0, [sp, #20]
        FREE_CURVE_SPECS();
 8006bd4:	f00c faec 	bl	80131b0 <free>
 8006bd8:	e717      	b.n	8006a0a <wc_ecc_verify_hash_ex+0x2c>
       err = MEMORY_E;
 8006bda:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8006bde:	e7e0      	b.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = INIT_MP_INT_SIZE(w, ECC_KEY_MAX_BITS(key));
 8006be0:	4640      	mov	r0, r8
 8006be2:	f00a fa2e 	bl	8011042 <mp_init>
   if (err == MP_OKAY) {
 8006be6:	4604      	mov	r4, r0
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d1da      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = wc_ecc_new_point_ex(&mG, key->heap);
 8006bec:	a809      	add	r0, sp, #36	; 0x24
 8006bee:	f7fd ff6d 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
   if (err == MP_OKAY) {
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d1d4      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = wc_ecc_new_point_ex(&mQ, key->heap);
 8006bf8:	4658      	mov	r0, fp
 8006bfa:	f7fd ff67 	bl	8004acc <wc_ecc_new_point_ex.constprop.0>
   if (err == MP_OKAY)
 8006bfe:	4604      	mov	r4, r0
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1ce      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_invmod(s, curve->order, w);
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	4642      	mov	r2, r8
 8006c08:	4650      	mov	r0, sl
 8006c0a:	f00b f821 	bl	8011c50 <mp_invmod>
   if (err == MP_OKAY)
 8006c0e:	4604      	mov	r4, r0
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d1c6      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mulmod(e, w, curve->order, u1);
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	462b      	mov	r3, r5
 8006c18:	4641      	mov	r1, r8
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f00a fddc 	bl	80117d8 <mp_mulmod>
   if (err == MP_OKAY)
 8006c20:	4604      	mov	r4, r0
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d1bd      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mulmod(r, w, curve->order, u2);
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4643      	mov	r3, r8
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	4648      	mov	r0, r9
 8006c2e:	f00a fdd3 	bl	80117d8 <mp_mulmod>
   if (err == MP_OKAY)
 8006c32:	4604      	mov	r4, r0
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1b4      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(curve->Gx, mG->x);
 8006c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f00b f9c5 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8006c40:	4604      	mov	r4, r0
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d1ad      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(curve->Gy, mG->y);
 8006c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	3168      	adds	r1, #104	; 0x68
 8006c4c:	f00b f9bd 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8006c50:	4604      	mov	r4, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1a5      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_set(mG->z, 1);
 8006c56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c58:	2101      	movs	r1, #1
 8006c5a:	30d0      	adds	r0, #208	; 0xd0
 8006c5c:	f00b fa82 	bl	8012164 <mp_set>
   if (err == MP_OKAY)
 8006c60:	4604      	mov	r4, r0
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d19d      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.x, mQ->x);
 8006c66:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006c68:	f106 0018 	add.w	r0, r6, #24
 8006c6c:	f00b f9ad 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8006c70:	4604      	mov	r4, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d195      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.y, mQ->y);
 8006c76:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006c78:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8006c7c:	3168      	adds	r1, #104	; 0x68
 8006c7e:	f00b f9a4 	bl	8011fca <mp_copy>
   if (err == MP_OKAY)
 8006c82:	4604      	mov	r4, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d18c      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.z, mQ->z);
 8006c88:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006c8a:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
 8006c8e:	31d0      	adds	r1, #208	; 0xd0
 8006c90:	f00b f99b 	bl	8011fca <mp_copy>
    if (err == MP_OKAY) {
 8006c94:	4604      	mov	r4, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d183      	bne.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
        err = ecc_mul2add(mG, u1, mQ, u2, mG, curve->Af, curve->prime,
 8006c9a:	6973      	ldr	r3, [r6, #20]
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	9302      	str	r3, [sp, #8]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ca6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ca8:	e9cd 0300 	strd	r0, r3, [sp]
 8006cac:	4629      	mov	r1, r5
 8006cae:	4643      	mov	r3, r8
 8006cb0:	f7ff fc8f 	bl	80065d2 <ecc_mul2add>
   if (err == MP_OKAY)
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f47f af73 	bne.w	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mod(mG->x, curve->order, v);
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	f00a fd8b 	bl	80117dc <mp_mod>
   if (err == MP_OKAY) {
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f47f af6a 	bne.w	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
       if (mp_cmp(v, r) == MP_EQ)
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	f00a f9f9 	bl	80110c8 <mp_cmp>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f47f af63 	bne.w	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>
           *res = 1;
 8006cdc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006cde:	2301      	movs	r3, #1
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	e75e      	b.n	8006ba2 <wc_ecc_verify_hash_ex+0x1c4>

08006ce4 <wc_ecc_verify_hash>:
{
 8006ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006cea:	468b      	mov	fp, r1
 8006cec:	4617      	mov	r7, r2
 8006cee:	4699      	mov	r9, r3
    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d078      	beq.n	8006de8 <wc_ecc_verify_hash+0x104>
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	d076      	beq.n	8006de8 <wc_ecc_verify_hash+0x104>
 8006cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d073      	beq.n	8006de8 <wc_ecc_verify_hash+0x104>
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	d071      	beq.n	8006de8 <wc_ecc_verify_hash+0x104>
    NEW_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006d04:	2068      	movs	r0, #104	; 0x68
 8006d06:	f00c fa4b 	bl	80131a0 <malloc>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d071      	beq.n	8006df4 <wc_ecc_verify_hash+0x110>
 8006d10:	2268      	movs	r2, #104	; 0x68
 8006d12:	2100      	movs	r1, #0
 8006d14:	f00c fa7c 	bl	8013210 <memset>
    NEW_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 8006d18:	2068      	movs	r0, #104	; 0x68
 8006d1a:	f00c fa41 	bl	80131a0 <malloc>
 8006d1e:	4605      	mov	r5, r0
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d064      	beq.n	8006dee <wc_ecc_verify_hash+0x10a>
 8006d24:	2268      	movs	r2, #104	; 0x68
 8006d26:	2100      	movs	r1, #0
 8006d28:	f00c fa72 	bl	8013210 <memset>
    err = INIT_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key));
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f00a f988 	bl	8011042 <mp_init>
    if (err != 0) {
 8006d32:	4682      	mov	sl, r0
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006d34:	4628      	mov	r0, r5
    if (err != 0) {
 8006d36:	f1ba 0f00 	cmp.w	sl, #0
 8006d3a:	d008      	beq.n	8006d4e <wc_ecc_verify_hash+0x6a>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006d3c:	f00c fa38 	bl	80131b0 <free>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 8006d40:	4620      	mov	r0, r4
 8006d42:	f00c fa35 	bl	80131b0 <free>
}
 8006d46:	4650      	mov	r0, sl
 8006d48:	b003      	add	sp, #12
 8006d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = INIT_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key));
 8006d4e:	f00a f978 	bl	8011042 <mp_init>
    if (err != 0) {
 8006d52:	4682      	mov	sl, r0
 8006d54:	b108      	cbz	r0, 8006d5a <wc_ecc_verify_hash+0x76>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006d56:	4628      	mov	r0, r5
 8006d58:	e7f0      	b.n	8006d3c <wc_ecc_verify_hash+0x58>
    switch (key->state) {
 8006d5a:	68b3      	ldr	r3, [r6, #8]
 8006d5c:	2b07      	cmp	r3, #7
 8006d5e:	d840      	bhi.n	8006de2 <wc_ecc_verify_hash+0xfe>
 8006d60:	e8df f003 	tbb	[pc, r3]
 8006d64:	3f3f3f04 	.word	0x3f3f3f04
 8006d68:	3013043f 	.word	0x3013043f
            *res = 0;
 8006d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            key->state = ECC_STATE_VERIFY_DECODE;
 8006d6e:	2305      	movs	r3, #5
 8006d70:	60b3      	str	r3, [r6, #8]
            *res = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	6013      	str	r3, [r2, #0]
            err = DecodeECC_DSA_Sig_Ex(sig, siglen, r, s, 0);
 8006d76:	4659      	mov	r1, fp
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f004 f8a1 	bl	800aec6 <DecodeECC_DSA_Sig_Ex>
            if (err < 0) {
 8006d84:	f1b0 0a00 	subs.w	sl, r0, #0
 8006d88:	db21      	blt.n	8006dce <wc_ecc_verify_hash+0xea>
            key->state = ECC_STATE_VERIFY_DO;
 8006d8a:	2306      	movs	r3, #6
 8006d8c:	60b3      	str	r3, [r6, #8]
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
 8006d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	463a      	mov	r2, r7
 8006d94:	464b      	mov	r3, r9
 8006d96:	4629      	mov	r1, r5
 8006d98:	9601      	str	r6, [sp, #4]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff fe1f 	bl	80069de <wc_ecc_verify_hash_ex>
 8006da0:	4682      	mov	sl, r0
            mp_clear(r);
 8006da2:	4620      	mov	r0, r4
 8006da4:	f00a f962 	bl	801106c <mp_clear>
            mp_clear(s);
 8006da8:	4628      	mov	r0, r5
 8006daa:	f00a f95f 	bl	801106c <mp_clear>
            FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006dae:	4628      	mov	r0, r5
 8006db0:	f00c f9fe 	bl	80131b0 <free>
            FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 8006db4:	4620      	mov	r0, r4
 8006db6:	f00c f9fb 	bl	80131b0 <free>
            if (err < 0) {
 8006dba:	f1ba 0f00 	cmp.w	sl, #0
 8006dbe:	db0d      	blt.n	8006ddc <wc_ecc_verify_hash+0xf8>
            s = NULL;
 8006dc0:	2500      	movs	r5, #0
            r = NULL;
 8006dc2:	462c      	mov	r4, r5
            key->state = ECC_STATE_VERIFY_RES;
 8006dc4:	2307      	movs	r3, #7
 8006dc6:	60b3      	str	r3, [r6, #8]
            err = 0;
 8006dc8:	f04f 0a00 	mov.w	sl, #0
    FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 8006dcc:	b115      	cbz	r5, 8006dd4 <wc_ecc_verify_hash+0xf0>
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f00c f9ee 	bl	80131b0 <free>
    FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 8006dd4:	b114      	cbz	r4, 8006ddc <wc_ecc_verify_hash+0xf8>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f00c f9ea 	bl	80131b0 <free>
    key->state = ECC_STATE_NONE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60b3      	str	r3, [r6, #8]
    return err;
 8006de0:	e7b1      	b.n	8006d46 <wc_ecc_verify_hash+0x62>
    switch (key->state) {
 8006de2:	f06f 0abf 	mvn.w	sl, #191	; 0xbf
 8006de6:	e7f1      	b.n	8006dcc <wc_ecc_verify_hash+0xe8>
        return ECC_BAD_ARG_E;
 8006de8:	f06f 0aa9 	mvn.w	sl, #169	; 0xa9
 8006dec:	e7ab      	b.n	8006d46 <wc_ecc_verify_hash+0x62>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 8006dee:	4620      	mov	r0, r4
 8006df0:	f00c f9de 	bl	80131b0 <free>
        return MEMORY_E;
 8006df4:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 8006df8:	e7a5      	b.n	8006d46 <wc_ecc_verify_hash+0x62>

08006dfa <wc_ecc_set_rng>:
int wc_ecc_set_rng(ecc_key* key, WC_RNG* rng)
{
    int err = 0;

#ifdef ECC_TIMING_RESISTANT
    if (key == NULL) {
 8006dfa:	b118      	cbz	r0, 8006e04 <wc_ecc_set_rng+0xa>
        err = BAD_FUNC_ARG;
    }
    else {
        key->rng = rng;
 8006dfc:	f8c0 11b8 	str.w	r1, [r0, #440]	; 0x1b8
    int err = 0;
 8006e00:	2000      	movs	r0, #0
 8006e02:	4770      	bx	lr
        err = BAD_FUNC_ARG;
 8006e04:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    (void)rng;
    /* report success, not an error if ECC_TIMING_RESISTANT is not defined */
#endif

    return err;
}
 8006e08:	4770      	bx	lr

08006e0a <HmacKeyInnerHash>:
#endif /* WOLFSSL_MAXQ108X */
}


static int HmacKeyInnerHash(Hmac* hmac)
{
 8006e0a:	b510      	push	{r4, lr}
    int ret = 0;

    switch (hmac->macType) {
 8006e0c:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 8006e10:	2b06      	cmp	r3, #6
{
 8006e12:	4604      	mov	r4, r0
    switch (hmac->macType) {
 8006e14:	d00e      	beq.n	8006e34 <HmacKeyInnerHash+0x2a>
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d012      	beq.n	8006e40 <HmacKeyInnerHash+0x36>
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d105      	bne.n	8006e2a <HmacKeyInnerHash+0x20>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
 8006e1e:	2240      	movs	r2, #64	; 0x40
 8006e20:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 8006e24:	f001 f8c8 	bl	8007fb8 <wc_ShaUpdate>

        default:
            break;
    }

    if (ret == 0)
 8006e28:	b918      	cbnz	r0, 8006e32 <HmacKeyInnerHash+0x28>
        hmac->innerHashKeyed = WC_HMAC_INNER_HASH_KEYED_SW;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
 8006e30:	2000      	movs	r0, #0

    return ret;
}
 8006e32:	bd10      	pop	{r4, pc}
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 8006e3a:	f001 fb7f 	bl	800853c <wc_Sha256Update>
            break;
 8006e3e:	e7f3      	b.n	8006e28 <HmacKeyInnerHash+0x1e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
 8006e40:	2280      	movs	r2, #128	; 0x80
 8006e42:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 8006e46:	f003 fe17 	bl	800aa78 <wc_Sha512Update>
            break;
 8006e4a:	e7ed      	b.n	8006e28 <HmacKeyInnerHash+0x1e>

08006e4c <_InitHmac>:
    switch (type) {
 8006e4c:	2906      	cmp	r1, #6
{
 8006e4e:	b538      	push	{r3, r4, r5, lr}
 8006e50:	4605      	mov	r5, r0
 8006e52:	4614      	mov	r4, r2
    switch (type) {
 8006e54:	d00b      	beq.n	8006e6e <_InitHmac+0x22>
 8006e56:	2908      	cmp	r1, #8
 8006e58:	d00f      	beq.n	8006e7a <_InitHmac+0x2e>
 8006e5a:	2904      	cmp	r1, #4
 8006e5c:	d113      	bne.n	8006e86 <_InitHmac+0x3a>
            ret = wc_InitSha_ex(&hmac->hash.sha, heap, devId);
 8006e5e:	f06f 0201 	mvn.w	r2, #1
 8006e62:	4621      	mov	r1, r4
 8006e64:	f001 f888 	bl	8007f78 <wc_InitSha_ex>
    hmac->heap = heap;
 8006e68:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
}
 8006e6c:	bd38      	pop	{r3, r4, r5, pc}
            ret = wc_InitSha256_ex(&hmac->hash.sha256, heap, devId);
 8006e6e:	f06f 0201 	mvn.w	r2, #1
 8006e72:	4621      	mov	r1, r4
 8006e74:	f001 fb2e 	bl	80084d4 <wc_InitSha256_ex>
            break;
 8006e78:	e7f6      	b.n	8006e68 <_InitHmac+0x1c>
            ret = wc_InitSha512_ex(&hmac->hash.sha512, heap, devId);
 8006e7a:	f06f 0201 	mvn.w	r2, #1
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f003 fde2 	bl	800aa48 <wc_InitSha512_ex>
            break;
 8006e84:	e7f0      	b.n	8006e68 <_InitHmac+0x1c>
    switch (type) {
 8006e86:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8006e8a:	e7ed      	b.n	8006e68 <_InitHmac+0x1c>

08006e8c <wc_HmacUpdate>:


int wc_HmacUpdate(Hmac* hmac, const byte* msg, word32 length)
{
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	460d      	mov	r5, r1
 8006e90:	4616      	mov	r6, r2
    int ret = 0;

    if (hmac == NULL || (msg == NULL && length > 0)) {
 8006e92:	4604      	mov	r4, r0
 8006e94:	b348      	cbz	r0, 8006eea <wc_HmacUpdate+0x5e>
 8006e96:	b901      	cbnz	r1, 8006e9a <wc_HmacUpdate+0xe>
 8006e98:	bb3a      	cbnz	r2, 8006eea <wc_HmacUpdate+0x5e>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 8006e9a:	f894 3225 	ldrb.w	r3, [r4, #549]	; 0x225
 8006e9e:	b14b      	cbz	r3, 8006eb4 <wc_HmacUpdate+0x28>
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
 8006ea0:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d012      	beq.n	8006ece <wc_HmacUpdate+0x42>
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d017      	beq.n	8006edc <wc_HmacUpdate+0x50>
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d007      	beq.n	8006ec0 <wc_HmacUpdate+0x34>
 8006eb0:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
        ret = HmacKeyInnerHash(hmac);
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7ff ffa8 	bl	8006e0a <HmacKeyInnerHash>
        if (ret != 0)
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <wc_HmacUpdate+0x14>
 8006ebe:	e7f8      	b.n	8006eb2 <wc_HmacUpdate+0x26>
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4620      	mov	r0, r4
}
 8006ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 8006eca:	f001 b875 	b.w	8007fb8 <wc_ShaUpdate>
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 8006ece:	4632      	mov	r2, r6
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4620      	mov	r0, r4
}
 8006ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 8006ed8:	f001 bb30 	b.w	800853c <wc_Sha256Update>
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 8006edc:	4632      	mov	r2, r6
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4620      	mov	r0, r4
}
 8006ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 8006ee6:	f003 bdc7 	b.w	800aa78 <wc_Sha512Update>
        return BAD_FUNC_ARG;
 8006eea:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8006eee:	e7e0      	b.n	8006eb2 <wc_HmacUpdate+0x26>

08006ef0 <wc_HmacFinal>:


int wc_HmacFinal(Hmac* hmac, byte* hash)
{
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	460d      	mov	r5, r1
    int ret;

    if (hmac == NULL || hash == NULL) {
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	b158      	cbz	r0, 8006f10 <wc_HmacFinal+0x20>
 8006ef8:	b151      	cbz	r1, 8006f10 <wc_HmacFinal+0x20>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 8006efa:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
 8006efe:	b153      	cbz	r3, 8006f16 <wc_HmacFinal+0x26>
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
 8006f00:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d02b      	beq.n	8006f60 <wc_HmacFinal+0x70>
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d045      	beq.n	8006f98 <wc_HmacFinal+0xa8>
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d007      	beq.n	8006f20 <wc_HmacFinal+0x30>
        return BAD_FUNC_ARG;
 8006f10:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8006f14:	e003      	b.n	8006f1e <wc_HmacFinal+0x2e>
        ret = HmacKeyInnerHash(hmac);
 8006f16:	f7ff ff78 	bl	8006e0a <HmacKeyInnerHash>
        if (ret != 0)
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d0f0      	beq.n	8006f00 <wc_HmacFinal+0x10>
    if (ret == 0) {
        hmac->innerHashKeyed = 0;
    }

    return ret;
}
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
 8006f20:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 8006f24:	4631      	mov	r1, r6
 8006f26:	4620      	mov	r0, r4
 8006f28:	f001 f8ae 	bl	8008088 <wc_ShaFinal>
            if (ret != 0)
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d1f6      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 8006f36:	4620      	mov	r0, r4
 8006f38:	f001 f83e 	bl	8007fb8 <wc_ShaUpdate>
            if (ret != 0)
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1ee      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
 8006f40:	2214      	movs	r2, #20
 8006f42:	4631      	mov	r1, r6
 8006f44:	4620      	mov	r0, r4
 8006f46:	f001 f837 	bl	8007fb8 <wc_ShaUpdate>
            if (ret != 0)
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d1e7      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4620      	mov	r0, r4
 8006f52:	f001 f899 	bl	8008088 <wc_ShaFinal>
    if (ret == 0) {
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d1e1      	bne.n	8006f1e <wc_HmacFinal+0x2e>
        hmac->innerHashKeyed = 0;
 8006f5a:	f884 0225 	strb.w	r0, [r4, #549]	; 0x225
 8006f5e:	e7de      	b.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
 8006f60:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 8006f64:	4631      	mov	r1, r6
 8006f66:	4620      	mov	r0, r4
 8006f68:	f001 fb40 	bl	80085ec <wc_Sha256Final>
            if (ret != 0)
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d1d6      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
 8006f70:	2240      	movs	r2, #64	; 0x40
 8006f72:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 8006f76:	4620      	mov	r0, r4
 8006f78:	f001 fae0 	bl	800853c <wc_Sha256Update>
            if (ret != 0)
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1ce      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
 8006f80:	2220      	movs	r2, #32
 8006f82:	4631      	mov	r1, r6
 8006f84:	4620      	mov	r0, r4
 8006f86:	f001 fad9 	bl	800853c <wc_Sha256Update>
            if (ret != 0)
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d1c7      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4620      	mov	r0, r4
 8006f92:	f001 fb2b 	bl	80085ec <wc_Sha256Final>
            break;
 8006f96:	e7de      	b.n	8006f56 <wc_HmacFinal+0x66>
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
 8006f98:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f003 fd40 	bl	800aa24 <wc_Sha512Final>
            if (ret != 0)
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1ba      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
 8006fa8:	2280      	movs	r2, #128	; 0x80
 8006faa:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f003 fd62 	bl	800aa78 <wc_Sha512Update>
            if (ret != 0)
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d1b2      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
 8006fb8:	2240      	movs	r2, #64	; 0x40
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f003 fd5b 	bl	800aa78 <wc_Sha512Update>
            if (ret != 0)
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d1ab      	bne.n	8006f1e <wc_HmacFinal+0x2e>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f003 fd2b 	bl	800aa24 <wc_Sha512Final>
            break;
 8006fce:	e7c2      	b.n	8006f56 <wc_HmacFinal+0x66>

08006fd0 <wc_HmacInit>:
    #undef wc_HmacFinal

#else
/* Initialize Hmac for use with async device */
int wc_HmacInit(Hmac* hmac, void* heap, int devId)
{
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	460d      	mov	r5, r1
    int ret = 0;

    if (hmac == NULL)
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	b150      	cbz	r0, 8006fee <wc_HmacInit+0x1e>
        return BAD_FUNC_ARG;

    XMEMSET(hmac, 0, sizeof(Hmac));
 8006fd8:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f00c f917 	bl	8013210 <memset>
    hmac->macType = WC_HASH_TYPE_NONE;
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
    hmac->heap = heap;
 8006fe8:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 8006fee:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8006ff2:	e7fb      	b.n	8006fec <wc_HmacInit+0x1c>

08006ff4 <wc_HmacFree>:
}
#endif /* WOLF_PRIVATE_KEY_ID */

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
 8006ff4:	b510      	push	{r4, lr}
    if (hmac == NULL)
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	b170      	cbz	r0, 8007018 <wc_HmacFree+0x24>

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
    wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (hmac->macType) {
 8006ffa:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 8006ffe:	2b06      	cmp	r3, #6
 8007000:	d00b      	beq.n	800701a <wc_HmacFree+0x26>
 8007002:	2b08      	cmp	r3, #8
 8007004:	d00c      	beq.n	8007020 <wc_HmacFree+0x2c>
 8007006:	2b04      	cmp	r3, #4
 8007008:	d101      	bne.n	800700e <wc_HmacFree+0x1a>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            wc_ShaFree(&hmac->hash.sha);
 800700a:	f001 f8b5 	bl	8008178 <wc_ShaFree>
            break;
 800700e:	f504 730a 	add.w	r3, r4, #552	; 0x228
 8007012:	2200      	movs	r2, #0
 8007014:	429c      	cmp	r4, r3
 8007016:	d106      	bne.n	8007026 <wc_HmacFree+0x32>
        default:
            break;
    }

    ForceZero(hmac, sizeof(*hmac));
}
 8007018:	bd10      	pop	{r4, pc}
            wc_Sha256Free(&hmac->hash.sha256);
 800701a:	f001 fb71 	bl	8008700 <wc_Sha256Free>
            break;
 800701e:	e7f6      	b.n	800700e <wc_HmacFree+0x1a>
            wc_Sha512Free(&hmac->hash.sha512);
 8007020:	f003 fd94 	bl	800ab4c <wc_Sha512Free>
            break;
 8007024:	e7f3      	b.n	800700e <wc_HmacFree+0x1a>
 8007026:	f804 2b01 	strb.w	r2, [r4], #1
 800702a:	e7f3      	b.n	8007014 <wc_HmacFree+0x20>

0800702c <wc_HmacSetKey>:
{
 800702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007030:	460f      	mov	r7, r1
 8007032:	4616      	mov	r6, r2
 8007034:	461d      	mov	r5, r3
    if (hmac == NULL || (key == NULL && length != 0) ||
 8007036:	4604      	mov	r4, r0
 8007038:	2800      	cmp	r0, #0
 800703a:	d07c      	beq.n	8007136 <wc_HmacSetKey+0x10a>
 800703c:	b90a      	cbnz	r2, 8007042 <wc_HmacSetKey+0x16>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d179      	bne.n	8007136 <wc_HmacSetKey+0x10a>
            type == WC_SHA384 || type == WC_SHA512 ||
 8007042:	1efb      	subs	r3, r7, #3
    if (hmac == NULL || (key == NULL && length != 0) ||
 8007044:	2b05      	cmp	r3, #5
 8007046:	d903      	bls.n	8007050 <wc_HmacSetKey+0x24>
            type == WC_SHA384 || type == WC_SHA512 ||
 8007048:	f1a7 030a 	sub.w	r3, r7, #10
 800704c:	2b03      	cmp	r3, #3
 800704e:	d872      	bhi.n	8007136 <wc_HmacSetKey+0x10a>
    if (hmac->macType != WC_HASH_TYPE_NONE) {
 8007050:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 8007054:	b113      	cbz	r3, 800705c <wc_HmacSetKey+0x30>
        wc_HmacFree(hmac);
 8007056:	4620      	mov	r0, r4
 8007058:	f7ff ffcc 	bl	8006ff4 <wc_HmacFree>
    hmac->innerHashKeyed = 0;
 800705c:	2200      	movs	r2, #0
 800705e:	f884 2225 	strb.w	r2, [r4, #549]	; 0x225
    hmac->macType = (byte)type;
 8007062:	f884 7224 	strb.w	r7, [r4, #548]	; 0x224
    ret = _InitHmac(hmac, type, heap);
 8007066:	4639      	mov	r1, r7
 8007068:	4620      	mov	r0, r4
 800706a:	f7ff feef 	bl	8006e4c <_InitHmac>
    if (ret != 0)
 800706e:	4680      	mov	r8, r0
 8007070:	bbb0      	cbnz	r0, 80070e0 <wc_HmacSetKey+0xb4>
    switch (hmac->macType) {
 8007072:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 8007076:	2b06      	cmp	r3, #6
    ip = (byte*)hmac->ipad;
 8007078:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
    switch (hmac->macType) {
 800707c:	d033      	beq.n	80070e6 <wc_HmacSetKey+0xba>
 800707e:	2b08      	cmp	r3, #8
 8007080:	d041      	beq.n	8007106 <wc_HmacSetKey+0xda>
 8007082:	2b04      	cmp	r3, #4
 8007084:	d157      	bne.n	8007136 <wc_HmacSetKey+0x10a>
            if (length <= WC_SHA_BLOCK_SIZE) {
 8007086:	2d40      	cmp	r5, #64	; 0x40
 8007088:	d809      	bhi.n	800709e <wc_HmacSetKey+0x72>
                if (key != NULL) {
 800708a:	b126      	cbz	r6, 8007096 <wc_HmacSetKey+0x6a>
                    XMEMCPY(ip, key, length);
 800708c:	462a      	mov	r2, r5
 800708e:	4631      	mov	r1, r6
 8007090:	4638      	mov	r0, r7
 8007092:	f00c f895 	bl	80131c0 <memcpy>
            hmac_block_size = WC_SHA_BLOCK_SIZE;
 8007096:	2640      	movs	r6, #64	; 0x40
        if (length < hmac_block_size)
 8007098:	42b5      	cmp	r5, r6
 800709a:	d214      	bcs.n	80070c6 <wc_HmacSetKey+0x9a>
 800709c:	e00e      	b.n	80070bc <wc_HmacSetKey+0x90>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
 800709e:	462a      	mov	r2, r5
 80070a0:	4631      	mov	r1, r6
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 ff88 	bl	8007fb8 <wc_ShaUpdate>
                if (ret != 0)
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d147      	bne.n	800713c <wc_HmacSetKey+0x110>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
 80070ac:	4639      	mov	r1, r7
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 ffea 	bl	8008088 <wc_ShaFinal>
                if (ret != 0)
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d141      	bne.n	800713c <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA_BLOCK_SIZE;
 80070b8:	2640      	movs	r6, #64	; 0x40
                length = WC_SHA_DIGEST_SIZE;
 80070ba:	2514      	movs	r5, #20
            XMEMSET(ip + length, 0, hmac_block_size - length);
 80070bc:	1b72      	subs	r2, r6, r5
 80070be:	2100      	movs	r1, #0
 80070c0:	1978      	adds	r0, r7, r5
 80070c2:	f00c f8a5 	bl	8013210 <memset>
 80070c6:	34df      	adds	r4, #223	; 0xdf
 80070c8:	4426      	add	r6, r4
            op[i] = (byte)(ip[i] ^ OPAD);
 80070ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80070ce:	f083 025c 	eor.w	r2, r3, #92	; 0x5c
        for(i = 0; i < hmac_block_size; i++) {
 80070d2:	42b4      	cmp	r4, r6
            ip[i] ^= IPAD;
 80070d4:	f083 0336 	eor.w	r3, r3, #54	; 0x36
            op[i] = (byte)(ip[i] ^ OPAD);
 80070d8:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
            ip[i] ^= IPAD;
 80070dc:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < hmac_block_size; i++) {
 80070de:	d1f4      	bne.n	80070ca <wc_HmacSetKey+0x9e>
}
 80070e0:	4640      	mov	r0, r8
 80070e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (length <= WC_SHA256_BLOCK_SIZE) {
 80070e6:	2d40      	cmp	r5, #64	; 0x40
 80070e8:	d9cf      	bls.n	800708a <wc_HmacSetKey+0x5e>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
 80070ea:	462a      	mov	r2, r5
 80070ec:	4631      	mov	r1, r6
 80070ee:	4620      	mov	r0, r4
 80070f0:	f001 fa24 	bl	800853c <wc_Sha256Update>
                if (ret != 0)
 80070f4:	bb10      	cbnz	r0, 800713c <wc_HmacSetKey+0x110>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
 80070f6:	4639      	mov	r1, r7
 80070f8:	4620      	mov	r0, r4
 80070fa:	f001 fa77 	bl	80085ec <wc_Sha256Final>
                if (ret != 0)
 80070fe:	b9e8      	cbnz	r0, 800713c <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA256_BLOCK_SIZE;
 8007100:	2640      	movs	r6, #64	; 0x40
                length = WC_SHA256_DIGEST_SIZE;
 8007102:	2520      	movs	r5, #32
 8007104:	e7da      	b.n	80070bc <wc_HmacSetKey+0x90>
            if (length <= WC_SHA512_BLOCK_SIZE) {
 8007106:	2d80      	cmp	r5, #128	; 0x80
 8007108:	d807      	bhi.n	800711a <wc_HmacSetKey+0xee>
                if (key != NULL) {
 800710a:	b126      	cbz	r6, 8007116 <wc_HmacSetKey+0xea>
                    XMEMCPY(ip, key, length);
 800710c:	462a      	mov	r2, r5
 800710e:	4631      	mov	r1, r6
 8007110:	4638      	mov	r0, r7
 8007112:	f00c f855 	bl	80131c0 <memcpy>
            hmac_block_size = WC_SHA512_BLOCK_SIZE;
 8007116:	2680      	movs	r6, #128	; 0x80
 8007118:	e7be      	b.n	8007098 <wc_HmacSetKey+0x6c>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
 800711a:	462a      	mov	r2, r5
 800711c:	4631      	mov	r1, r6
 800711e:	4620      	mov	r0, r4
 8007120:	f003 fcaa 	bl	800aa78 <wc_Sha512Update>
                if (ret != 0)
 8007124:	b950      	cbnz	r0, 800713c <wc_HmacSetKey+0x110>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
 8007126:	4639      	mov	r1, r7
 8007128:	4620      	mov	r0, r4
 800712a:	f003 fc7b 	bl	800aa24 <wc_Sha512Final>
                if (ret != 0)
 800712e:	b928      	cbnz	r0, 800713c <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA512_BLOCK_SIZE;
 8007130:	2680      	movs	r6, #128	; 0x80
                length = WC_SHA512_DIGEST_SIZE;
 8007132:	2540      	movs	r5, #64	; 0x40
 8007134:	e7c2      	b.n	80070bc <wc_HmacSetKey+0x90>
    switch (hmac->macType) {
 8007136:	f06f 08ac 	mvn.w	r8, #172	; 0xac
 800713a:	e7d1      	b.n	80070e0 <wc_HmacSetKey+0xb4>
    if (ret == 0) {
 800713c:	4680      	mov	r8, r0
 800713e:	e7cf      	b.n	80070e0 <wc_HmacSetKey+0xb4>

08007140 <wc_InitRng_ex>:
#endif

    (void)nonce;
    (void)nonceSz;

    if (rng == NULL)
 8007140:	b110      	cbz	r0, 8007148 <wc_InitRng_ex+0x8>

#ifdef WOLFSSL_HEAP_TEST
    rng->heap = (void*)WOLFSSL_HEAP_TEST;
    (void)heap;
#else
    rng->heap = heap;
 8007142:	6041      	str	r1, [r0, #4]
        rng->status = DRBG_FAILED;
    }
#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
 8007144:	2000      	movs	r0, #0
 8007146:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8007148:	f06f 00ac 	mvn.w	r0, #172	; 0xac


int wc_InitRng_ex(WC_RNG* rng, void* heap, int devId)
{
    return _InitRng(rng, NULL, 0, heap, devId);
}
 800714c:	4770      	bx	lr

0800714e <wc_RNG_GenerateBlock>:


/* place a generated block in output */
WOLFSSL_ABI
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
 800714e:	b538      	push	{r3, r4, r5, lr}
 8007150:	460d      	mov	r5, r1
 8007152:	4614      	mov	r4, r2
    int ret;

    if (rng == NULL || output == NULL)
 8007154:	b158      	cbz	r0, 800716e <wc_RNG_GenerateBlock+0x20>
 8007156:	b151      	cbz	r1, 800716e <wc_RNG_GenerateBlock+0x20>
        return BAD_FUNC_ARG;

    if (sz == 0)
 8007158:	b162      	cbz	r2, 8007174 <wc_RNG_GenerateBlock+0x26>
    #endif
    }
#endif

#ifdef CUSTOM_RAND_GENERATE_BLOCK
    XMEMSET(output, 0, sz);
 800715a:	2100      	movs	r1, #0
 800715c:	4628      	mov	r0, r5
 800715e:	f00c f857 	bl	8013210 <memset>
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
}
 8007166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
 800716a:	f7f8 bf8b 	b.w	8000084 <my_rng_gen_block>
        return BAD_FUNC_ARG;
 800716e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8007172:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 8007174:	4610      	mov	r0, r2
 8007176:	e7fc      	b.n	8007172 <wc_RNG_GenerateBlock+0x24>

08007178 <wc_FreeRng>:
int wc_FreeRng(WC_RNG* rng)
{
    int ret = 0;

    if (rng == NULL)
        return BAD_FUNC_ARG;
 8007178:	2800      	cmp	r0, #0
    if (wc_VersalTrngReset() && !ret)
        ret = WC_HW_E;
#endif

    return ret;
}
 800717a:	bf0c      	ite	eq
 800717c:	f06f 00ac 	mvneq.w	r0, #172	; 0xac
 8007180:	2000      	movne	r0, #0
 8007182:	4770      	bx	lr

08007184 <ByteReverseWords>:
{
 8007184:	b510      	push	{r4, lr}
        word32 count = byteCount/(word32)sizeof(word32);
 8007186:	0892      	lsrs	r2, r2, #2
        for (i = 0; i < count; i++)
 8007188:	2300      	movs	r3, #0
            out[i] = ByteReverseWord32(in[i]);
 800718a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800718e:	ba24      	rev	r4, r4
 8007190:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (i = 0; i < count; i++)
 8007194:	3301      	adds	r3, #1
 8007196:	429a      	cmp	r2, r3
 8007198:	d1f7      	bne.n	800718a <ByteReverseWords+0x6>
}
 800719a:	bd10      	pop	{r4, pc}

0800719c <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static int Transform(wc_Sha* sha, const byte* data)
    {
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	b097      	sub	sp, #92	; 0x5c
        word32 W[WC_SHA_BLOCK_SIZE / sizeof(word32)];

        /* Copy context->state[] to working vars */
        word32 a = sha->digest[0];
 80071a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80071a4:	930d      	str	r3, [sp, #52]	; 0x34
        word32 b = sha->digest[1];
 80071a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80071a8:	9301      	str	r3, [sp, #4]
        word32 c = sha->digest[2];
 80071aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80071ac:	9305      	str	r3, [sp, #20]
        word32 d = sha->digest[3];
 80071ae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80071b0:	930e      	str	r3, [sp, #56]	; 0x38
        word32 e = sha->digest[4];
 80071b2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80071b4:	9312      	str	r3, [sp, #72]	; 0x48
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 80071b6:	680b      	ldr	r3, [r1, #0]
 80071b8:	9306      	str	r3, [sp, #24]
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 80071ba:	9a06      	ldr	r2, [sp, #24]
 80071bc:	4bd9      	ldr	r3, [pc, #868]	; (8007524 <Transform+0x388>)
 80071be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    {
 80071c0:	9000      	str	r0, [sp, #0]
 80071c2:	eb02 0e03 	add.w	lr, r2, r3
 80071c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80071ce:	9d05      	ldr	r5, [sp, #20]
 80071d0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80071d4:	4496      	add	lr, r2
 80071d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071d8:	eb0e 62f2 	add.w	r2, lr, r2, ror #27
 80071dc:	ea80 0e04 	eor.w	lr, r0, r4
 80071e0:	9801      	ldr	r0, [sp, #4]
 80071e2:	ea0e 0e00 	and.w	lr, lr, r0
 80071e6:	ea8e 0e04 	eor.w	lr, lr, r4
 80071ea:	4496      	add	lr, r2
 80071ec:	684a      	ldr	r2, [r1, #4]
 80071ee:	9207      	str	r2, [sp, #28]
 80071f0:	9801      	ldr	r0, [sp, #4]
 80071f2:	9a05      	ldr	r2, [sp, #20]
 80071f4:	ea82 00b0 	eor.w	r0, r2, r0, ror #2
 80071f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071fa:	4010      	ands	r0, r2
 80071fc:	9a05      	ldr	r2, [sp, #20]
 80071fe:	4050      	eors	r0, r2
 8007200:	9a07      	ldr	r2, [sp, #28]
 8007202:	441a      	add	r2, r3
 8007204:	4422      	add	r2, r4
 8007206:	4410      	add	r0, r2
 8007208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800720a:	ea4f 04b2 	mov.w	r4, r2, ror #2
 800720e:	9a01      	ldr	r2, [sp, #4]
 8007210:	ea84 07b2 	eor.w	r7, r4, r2, ror #2
 8007214:	ea07 070e 	and.w	r7, r7, lr
 8007218:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 800721c:	eb0a 0203 	add.w	r2, sl, r3
 8007220:	442a      	add	r2, r5
 8007222:	eb00 60fe 	add.w	r0, r0, lr, ror #27
 8007226:	9d01      	ldr	r5, [sp, #4]
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 8007228:	f8d1 b010 	ldr.w	fp, [r1, #16]
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800722c:	ea84 0cbe 	eor.w	ip, r4, lr, ror #2
 8007230:	4417      	add	r7, r2
 8007232:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8007236:	eb09 0203 	add.w	r2, r9, r3
 800723a:	ea0c 0c00 	and.w	ip, ip, r0
 800723e:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8007242:	eb02 02b5 	add.w	r2, r2, r5, ror #2
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 8007246:	ea80 06be 	eor.w	r6, r0, lr, ror #2
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800724a:	ea8c 0c04 	eor.w	ip, ip, r4
 800724e:	4494      	add	ip, r2
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 8007250:	403e      	ands	r6, r7
 8007252:	eb0b 0203 	add.w	r2, fp, r3
 8007256:	4422      	add	r2, r4
 8007258:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 800725c:	4416      	add	r6, r2
 800725e:	694a      	ldr	r2, [r1, #20]
 8007260:	920f      	str	r2, [sp, #60]	; 0x3c
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 8007262:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 8007266:	ea80 04b7 	eor.w	r4, r0, r7, ror #2
 800726a:	ea04 040c 	and.w	r4, r4, ip
 800726e:	441a      	add	r2, r3
 8007270:	eb02 02be 	add.w	r2, r2, lr, ror #2
 8007274:	4044      	eors	r4, r0
 8007276:	eb06 66fc 	add.w	r6, r6, ip, ror #27
 800727a:	4414      	add	r4, r2
 800727c:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8007280:	698a      	ldr	r2, [r1, #24]
 8007282:	9210      	str	r2, [sp, #64]	; 0x40
 8007284:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
 8007288:	4035      	ands	r5, r6
 800728a:	441a      	add	r2, r3
 800728c:	4402      	add	r2, r0
 800728e:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 8007292:	4415      	add	r5, r2
 8007294:	69ca      	ldr	r2, [r1, #28]
 8007296:	9211      	str	r2, [sp, #68]	; 0x44
 8007298:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 800729c:	ea8c 00b6 	eor.w	r0, ip, r6, ror #2
 80072a0:	4020      	ands	r0, r4
 80072a2:	441a      	add	r2, r3
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 80072a4:	f8d1 e020 	ldr.w	lr, [r1, #32]
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 80072a8:	eb05 65f4 	add.w	r5, r5, r4, ror #27
 80072ac:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 80072b0:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80072b4:	ea80 000c 	eor.w	r0, r0, ip
 80072b8:	4410      	add	r0, r2
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 80072ba:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 80072be:	eb0e 0703 	add.w	r7, lr, r3
 80072c2:	402a      	ands	r2, r5
 80072c4:	4467      	add	r7, ip
 80072c6:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 80072ca:	443a      	add	r2, r7
 80072cc:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 80072ce:	9709      	str	r7, [sp, #36]	; 0x24
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 80072d0:	eb00 60f5 	add.w	r0, r0, r5, ror #27
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 80072d4:	ea84 0cb5 	eor.w	ip, r4, r5, ror #2
 80072d8:	441f      	add	r7, r3
 80072da:	ea0c 0c00 	and.w	ip, ip, r0
 80072de:	eb07 06b6 	add.w	r6, r7, r6, ror #2
 80072e2:	ea8c 0c04 	eor.w	ip, ip, r4
 80072e6:	eb02 62f0 	add.w	r2, r2, r0, ror #27
 80072ea:	44b4      	add	ip, r6
 80072ec:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80072f0:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80072f2:	960a      	str	r6, [sp, #40]	; 0x28
 80072f4:	ea80 08b5 	eor.w	r8, r0, r5, ror #2
 80072f8:	441e      	add	r6, r3
 80072fa:	ea08 0802 	and.w	r8, r8, r2
 80072fe:	4434      	add	r4, r6
 8007300:	ea88 08b5 	eor.w	r8, r8, r5, ror #2
 8007304:	44a0      	add	r8, r4
 8007306:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8007308:	940b      	str	r4, [sp, #44]	; 0x2c
 800730a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800730c:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8007310:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
 8007314:	441e      	add	r6, r3
 8007316:	ea04 040c 	and.w	r4, r4, ip
 800731a:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 800731e:	4044      	eors	r4, r0
 8007320:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8007324:	442c      	add	r4, r5
 8007326:	ea4f 0cbc 	mov.w	ip, ip, ror #2
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800732a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800732c:	950c      	str	r5, [sp, #48]	; 0x30
 800732e:	ea8c 07b2 	eor.w	r7, ip, r2, ror #2
 8007332:	441d      	add	r5, r3
 8007334:	ea07 0708 	and.w	r7, r7, r8
 8007338:	4428      	add	r0, r5
 800733a:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 800733e:	4407      	add	r7, r0
 8007340:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007342:	9002      	str	r0, [sp, #8]
 8007344:	9d02      	ldr	r5, [sp, #8]
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 8007346:	eb04 64f8 	add.w	r4, r4, r8, ror #27
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800734a:	ea8c 00b8 	eor.w	r0, ip, r8, ror #2
 800734e:	441d      	add	r5, r3
 8007350:	4020      	ands	r0, r4
 8007352:	eb05 02b2 	add.w	r2, r5, r2, ror #2
 8007356:	ea80 000c 	eor.w	r0, r0, ip
 800735a:	eb07 67f4 	add.w	r7, r7, r4, ror #27
 800735e:	4410      	add	r0, r2
 8007360:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8007364:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8007366:	9203      	str	r2, [sp, #12]
 8007368:	ea84 06b8 	eor.w	r6, r4, r8, ror #2
 800736c:	403e      	ands	r6, r7
 800736e:	441a      	add	r2, r3
 8007370:	4462      	add	r2, ip
 8007372:	ea86 06b8 	eor.w	r6, r6, r8, ror #2
 8007376:	4416      	add	r6, r2
 8007378:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800737a:	9204      	str	r2, [sp, #16]
 800737c:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8007380:	ea84 01b7 	eor.w	r1, r4, r7, ror #2
 8007384:	4001      	ands	r1, r0
 8007386:	441a      	add	r2, r3
 8007388:	eb02 02b8 	add.w	r2, r2, r8, ror #2
 800738c:	4061      	eors	r1, r4
 800738e:	4411      	add	r1, r2

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 8007390:	9a06      	ldr	r2, [sp, #24]
 8007392:	9d02      	ldr	r5, [sp, #8]
 8007394:	ea82 020a 	eor.w	r2, r2, sl
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 8007398:	eb06 66f0 	add.w	r6, r6, r0, ror #27
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800739c:	ea82 020e 	eor.w	r2, r2, lr
 80073a0:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80073a4:	406a      	eors	r2, r5
 80073a6:	ea80 05b7 	eor.w	r5, r0, r7, ror #2
 80073aa:	9206      	str	r2, [sp, #24]
 80073ac:	4035      	ands	r5, r6
 80073ae:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 80073b2:	4422      	add	r2, r4
 80073b4:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 80073b8:	4415      	add	r5, r2
 80073ba:	9a07      	ldr	r2, [sp, #28]
 80073bc:	ea82 0c09 	eor.w	ip, r2, r9
 80073c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c2:	ea8c 0c02 	eor.w	ip, ip, r2
 80073c6:	9a03      	ldr	r2, [sp, #12]
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 80073c8:	eb01 61f6 	add.w	r1, r1, r6, ror #27
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 80073cc:	ea8c 0202 	eor.w	r2, ip, r2
 80073d0:	ea80 04b6 	eor.w	r4, r0, r6, ror #2
 80073d4:	9207      	str	r2, [sp, #28]
 80073d6:	400c      	ands	r4, r1
 80073d8:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 80073dc:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 80073e0:	4044      	eors	r4, r0
 80073e2:	4414      	add	r4, r2
 80073e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e6:	ea8a 0a0b 	eor.w	sl, sl, fp
 80073ea:	ea8a 0a02 	eor.w	sl, sl, r2
 80073ee:	9a04      	ldr	r2, [sp, #16]
 80073f0:	ea8a 0a02 	eor.w	sl, sl, r2
 80073f4:	eb05 65f1 	add.w	r5, r5, r1, ror #27
 80073f8:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80073fc:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8007400:	9213      	str	r2, [sp, #76]	; 0x4c
 8007402:	ea81 02b6 	eor.w	r2, r1, r6, ror #2
 8007406:	eb03 77fa 	add.w	r7, r3, sl, ror #31
 800740a:	402a      	ands	r2, r5
 800740c:	4438      	add	r0, r7
 800740e:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 8007412:	4402      	add	r2, r0
 8007414:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007416:	ea89 0700 	eor.w	r7, r9, r0
 800741a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800741c:	4047      	eors	r7, r0
 800741e:	9806      	ldr	r0, [sp, #24]
 8007420:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
 8007424:	ea4f 70f7 	mov.w	r0, r7, ror #31
 8007428:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 800742c:	9014      	str	r0, [sp, #80]	; 0x50
 800742e:	ea81 00b5 	eor.w	r0, r1, r5, ror #2
 8007432:	4020      	ands	r0, r4
 8007434:	eb03 73f7 	add.w	r3, r3, r7, ror #31
 8007438:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 800743c:	4048      	eors	r0, r1
 800743e:	4418      	add	r0, r3

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 8007440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007444:	ea8b 0303 	eor.w	r3, fp, r3
 8007448:	4073      	eors	r3, r6
 800744a:	9e07      	ldr	r6, [sp, #28]
 800744c:	ea83 73f6 	eor.w	r3, r3, r6, ror #31
 8007450:	9308      	str	r3, [sp, #32]
 8007452:	9e08      	ldr	r6, [sp, #32]
 8007454:	4b34      	ldr	r3, [pc, #208]	; (8007528 <Transform+0x38c>)
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 8007456:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 800745a:	ea4f 04b4 	mov.w	r4, r4, ror #2
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800745e:	ea84 0bb5 	eor.w	fp, r4, r5, ror #2
 8007462:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 8007466:	4431      	add	r1, r6
 8007468:	ea8b 0b02 	eor.w	fp, fp, r2
 800746c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800746e:	448b      	add	fp, r1
 8007470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007472:	4071      	eors	r1, r6
 8007474:	9e02      	ldr	r6, [sp, #8]
 8007476:	4071      	eors	r1, r6
 8007478:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800747c:	eb00 60f2 	add.w	r0, r0, r2, ror #27
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 8007480:	eb03 76f1 	add.w	r6, r3, r1, ror #31
 8007484:	ea84 0cb2 	eor.w	ip, r4, r2, ror #2
 8007488:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 800748c:	ea8c 0c00 	eor.w	ip, ip, r0
 8007490:	44ac      	add	ip, r5
 8007492:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007494:	9e03      	ldr	r6, [sp, #12]
 8007496:	ea85 050e 	eor.w	r5, r5, lr
 800749a:	4075      	eors	r5, r6
 800749c:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 80074a0:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
 80074a4:	ea4f 76f5 	mov.w	r6, r5, ror #31
 80074a8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80074ac:	9610      	str	r6, [sp, #64]	; 0x40
 80074ae:	ea80 08b2 	eor.w	r8, r0, r2, ror #2
 80074b2:	eb03 76f5 	add.w	r6, r3, r5, ror #31
 80074b6:	4434      	add	r4, r6
 80074b8:	ea88 080b 	eor.w	r8, r8, fp
 80074bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074be:	44a0      	add	r8, r4
 80074c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80074c2:	4066      	eors	r6, r4
 80074c4:	9c04      	ldr	r4, [sp, #16]
 80074c6:	4066      	eors	r6, r4
 80074c8:	9c08      	ldr	r4, [sp, #32]
 80074ca:	ea86 76f4 	eor.w	r6, r6, r4, ror #31
 80074ce:	ea4f 74f6 	mov.w	r4, r6, ror #31
 80074d2:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
 80074d6:	9411      	str	r4, [sp, #68]	; 0x44
 80074d8:	ea80 09bb 	eor.w	r9, r0, fp, ror #2
 80074dc:	eb03 74f6 	add.w	r4, r3, r6, ror #31
 80074e0:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 80074e4:	ea89 090c 	eor.w	r9, r9, ip
 80074e8:	4491      	add	r9, r2
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 80074ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ec:	9c06      	ldr	r4, [sp, #24]
 80074ee:	ea8e 0202 	eor.w	r2, lr, r2
 80074f2:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 80074f6:	eb08 68fc 	add.w	r8, r8, ip, ror #27
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 80074fa:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 80074fe:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8007502:	eb03 7ef2 	add.w	lr, r3, r2, ror #31
 8007506:	ea8c 04bb 	eor.w	r4, ip, fp, ror #2
 800750a:	4470      	add	r0, lr
 800750c:	ea84 0408 	eor.w	r4, r4, r8
 8007510:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8007514:	4404      	add	r4, r0
 8007516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007518:	ea80 000e 	eor.w	r0, r0, lr
 800751c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8007520:	e004      	b.n	800752c <Transform+0x390>
 8007522:	bf00      	nop
 8007524:	5a827999 	.word	0x5a827999
 8007528:	6ed9eba1 	.word	0x6ed9eba1
 800752c:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 8007530:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 8007534:	eb09 69f8 	add.w	r9, r9, r8, ror #27
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 8007538:	9009      	str	r0, [sp, #36]	; 0x24
 800753a:	ea8c 0eb8 	eor.w	lr, ip, r8, ror #2
 800753e:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 8007542:	eb00 00bb 	add.w	r0, r0, fp, ror #2
 8007546:	ea8e 0e09 	eor.w	lr, lr, r9
 800754a:	4486      	add	lr, r0
 800754c:	ea4f 00b9 	mov.w	r0, r9, ror #2
 8007550:	eb04 64f9 	add.w	r4, r4, r9, ror #27
 8007554:	900f      	str	r0, [sp, #60]	; 0x3c
 8007556:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800755a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800755c:	ea80 0909 	eor.w	r9, r0, r9
 8007560:	ea89 7afa 	eor.w	sl, r9, sl, ror #31
 8007564:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
 8007568:	ea4f 70fa 	mov.w	r0, sl, ror #31
 800756c:	9015      	str	r0, [sp, #84]	; 0x54
 800756e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007570:	eb03 79fa 	add.w	r9, r3, sl, ror #31
 8007574:	ea80 0bb8 	eor.w	fp, r0, r8, ror #2
 8007578:	44cc      	add	ip, r9
 800757a:	ea8b 0b04 	eor.w	fp, fp, r4
 800757e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007580:	44e3      	add	fp, ip
 8007582:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007586:	ea80 090c 	eor.w	r9, r0, ip
 800758a:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 800758e:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 8007592:	ea4f 70f7 	mov.w	r0, r7, ror #31
 8007596:	900b      	str	r0, [sp, #44]	; 0x2c
 8007598:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800759a:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
 800759e:	eb03 79f7 	add.w	r9, r3, r7, ror #31
 80075a2:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
 80075a6:	eb09 08b8 	add.w	r8, r9, r8, ror #2
 80075aa:	ea8c 0c0e 	eor.w	ip, ip, lr
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 80075ae:	980c      	ldr	r0, [sp, #48]	; 0x30
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 80075b0:	44c4      	add	ip, r8
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 80075b2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075b6:	ea80 0808 	eor.w	r8, r0, r8
 80075ba:	9808      	ldr	r0, [sp, #32]
 80075bc:	ea88 78f0 	eor.w	r8, r8, r0, ror #31
 80075c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c2:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 80075c6:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 80075ca:	900a      	str	r0, [sp, #40]	; 0x28
 80075cc:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80075d0:	eb03 79f0 	add.w	r9, r3, r0, ror #31
 80075d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80075d6:	ea8e 08b4 	eor.w	r8, lr, r4, ror #2
 80075da:	4448      	add	r0, r9
 80075dc:	ea88 080b 	eor.w	r8, r8, fp
 80075e0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80075e4:	4480      	add	r8, r0
 80075e6:	9802      	ldr	r0, [sp, #8]
 80075e8:	ea80 0009 	eor.w	r0, r0, r9
 80075ec:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 80075f0:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 80075f4:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 80075f8:	9002      	str	r0, [sp, #8]
 80075fa:	ea8e 09bb 	eor.w	r9, lr, fp, ror #2
 80075fe:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 8007602:	eb00 00b4 	add.w	r0, r0, r4, ror #2
 8007606:	ea89 090c 	eor.w	r9, r9, ip
 800760a:	9c06      	ldr	r4, [sp, #24]
 800760c:	4481      	add	r9, r0
 800760e:	9803      	ldr	r0, [sp, #12]
 8007610:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8007614:	ea80 75f5 	eor.w	r5, r0, r5, ror #31
 8007618:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 800761c:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8007620:	ea4f 70f5 	mov.w	r0, r5, ror #31
 8007624:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8007628:	900c      	str	r0, [sp, #48]	; 0x30
 800762a:	ea8c 04bb 	eor.w	r4, ip, fp, ror #2
 800762e:	eb03 70f5 	add.w	r0, r3, r5, ror #31
 8007632:	4470      	add	r0, lr
 8007634:	ea84 0408 	eor.w	r4, r4, r8
 8007638:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800763c:	4404      	add	r4, r0
 800763e:	9804      	ldr	r0, [sp, #16]
 8007640:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 8007644:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 8007648:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800764a:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800764e:	ea4f 76f0 	mov.w	r6, r0, ror #31
 8007652:	eb09 69f8 	add.w	r9, r9, r8, ror #27
 8007656:	960f      	str	r6, [sp, #60]	; 0x3c
 8007658:	eb03 7ef0 	add.w	lr, r3, r0, ror #31
 800765c:	ea8c 06b8 	eor.w	r6, ip, r8, ror #2
 8007660:	eb0e 0ebb 	add.w	lr, lr, fp, ror #2
 8007664:	ea86 0609 	eor.w	r6, r6, r9
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 8007668:	f8dd b018 	ldr.w	fp, [sp, #24]
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800766c:	4476      	add	r6, lr
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800766e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8007672:	ea8e 7efb 	eor.w	lr, lr, fp, ror #31
 8007676:	f8dd b008 	ldr.w	fp, [sp, #8]
 800767a:	ea8e 7ef2 	eor.w	lr, lr, r2, ror #31
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800767e:	eb04 64f9 	add.w	r4, r4, r9, ror #27
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 8007682:	ea8e 7efb 	eor.w	lr, lr, fp, ror #31
 8007686:	ea4f 09b9 	mov.w	r9, r9, ror #2
 800768a:	f8cd e00c 	str.w	lr, [sp, #12]
 800768e:	ea89 0bb8 	eor.w	fp, r9, r8, ror #2
 8007692:	eb03 7efe 	add.w	lr, r3, lr, ror #31
 8007696:	44f4      	add	ip, lr
 8007698:	ea8b 0b04 	eor.w	fp, fp, r4
 800769c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80076a0:	44e3      	add	fp, ip
 80076a2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80076a6:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 80076aa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80076ae:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 80076b2:	ea8c 7cf5 	eor.w	ip, ip, r5, ror #31
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 80076b6:	eb06 66f4 	add.w	r6, r6, r4, ror #27
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 80076ba:	f8cd c010 	str.w	ip, [sp, #16]
 80076be:	ea89 0eb4 	eor.w	lr, r9, r4, ror #2
 80076c2:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 80076c6:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
 80076ca:	ea8e 0e06 	eor.w	lr, lr, r6
 80076ce:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
 80076d2:	ea4f 08b6 	mov.w	r8, r6, ror #2
 80076d6:	44e6      	add	lr, ip
 80076d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80076da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80076de:	ea86 76fc 	eor.w	r6, r6, ip, ror #31
 80076e2:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
 80076e6:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 80076ea:	ea4f 76fa 	mov.w	r6, sl, ror #31
 80076ee:	9613      	str	r6, [sp, #76]	; 0x4c
 80076f0:	eb03 7cfa 	add.w	ip, r3, sl, ror #31
 80076f4:	ea88 06b4 	eor.w	r6, r8, r4, ror #2
 80076f8:	44cc      	add	ip, r9
 80076fa:	ea86 060b 	eor.w	r6, r6, fp
 80076fe:	4466      	add	r6, ip
 8007700:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8007704:	ea8c 79f1 	eor.w	r9, ip, r1, ror #31
 8007708:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 800770c:	9f03      	ldr	r7, [sp, #12]
 800770e:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 8007712:	ea4f 77f9 	mov.w	r7, r9, ror #31
 8007716:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
 800771a:	eb03 7cf9 	add.w	ip, r3, r9, ror #31
 800771e:	9714      	str	r7, [sp, #80]	; 0x50
 8007720:	ea88 07bb 	eor.w	r7, r8, fp, ror #2
 8007724:	eb0c 04b4 	add.w	r4, ip, r4, ror #2
 8007728:	ea87 070e 	eor.w	r7, r7, lr
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800772c:	f8dd c020 	ldr.w	ip, [sp, #32]
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 8007730:	4427      	add	r7, r4
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 8007732:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007734:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 8007738:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800773c:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 8007740:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007744:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 8007748:	9406      	str	r4, [sp, #24]
 800774a:	f8dd c018 	ldr.w	ip, [sp, #24]
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800774e:	eb06 66fe 	add.w	r6, r6, lr, ror #27
 8007752:	ea4f 0ebe 	mov.w	lr, lr, ror #2
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 8007756:	ea8e 04bb 	eor.w	r4, lr, fp, ror #2
 800775a:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 800775e:	44c4      	add	ip, r8
 8007760:	4074      	eors	r4, r6
 8007762:	4464      	add	r4, ip
 8007764:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8007768:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
 800776c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007770:	ea81 71fc 	eor.w	r1, r1, ip, ror #31
 8007774:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 8007778:	eb07 67f6 	add.w	r7, r7, r6, ror #27
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800777c:	9107      	str	r1, [sp, #28]
 800777e:	ea8e 0cb6 	eor.w	ip, lr, r6, ror #2
 8007782:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8007786:	eb01 01bb 	add.w	r1, r1, fp, ror #2
 800778a:	ea8c 0c07 	eor.w	ip, ip, r7
 800778e:	448c      	add	ip, r1
 8007790:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007792:	ea81 78f2 	eor.w	r8, r1, r2, ror #31
 8007796:	ea88 78f5 	eor.w	r8, r8, r5, ror #31
 800779a:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800779e:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 80077a2:	ea4f 71f8 	mov.w	r1, r8, ror #31
 80077a6:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80077aa:	9110      	str	r1, [sp, #64]	; 0x40
 80077ac:	ea87 0bb6 	eor.w	fp, r7, r6, ror #2
 80077b0:	eb03 71f8 	add.w	r1, r3, r8, ror #31
 80077b4:	4471      	add	r1, lr
 80077b6:	ea8b 0b04 	eor.w	fp, fp, r4
 80077ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077bc:	448b      	add	fp, r1
 80077be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077c0:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 80077c4:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 80077c8:	9906      	ldr	r1, [sp, #24]
 80077ca:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 80077ce:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
 80077d2:	ea87 0eb4 	eor.w	lr, r7, r4, ror #2
 80077d6:	eb03 73f0 	add.w	r3, r3, r0, ror #31
 80077da:	ea8e 0e0c 	eor.w	lr, lr, ip
 80077de:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 80077e2:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
 80077e6:	4473      	add	r3, lr
 80077e8:	eb03 6efb 	add.w	lr, r3, fp, ror #27

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 80077ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ee:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
 80077f8:	9b07      	ldr	r3, [sp, #28]
 80077fa:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 80077fe:	ea4b 02bc 	orr.w	r2, fp, ip, ror #2
 8007802:	9308      	str	r3, [sp, #32]
 8007804:	ea4f 71f0 	mov.w	r1, r0, ror #31
 8007808:	ea0b 03bc 	and.w	r3, fp, ip, ror #2
 800780c:	ea02 02b4 	and.w	r2, r2, r4, ror #2
 8007810:	9111      	str	r1, [sp, #68]	; 0x44
 8007812:	431a      	orrs	r2, r3
 8007814:	9908      	ldr	r1, [sp, #32]
 8007816:	4bd9      	ldr	r3, [pc, #868]	; (8007b7c <Transform+0x9e0>)
 8007818:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800781c:	4439      	add	r1, r7
 800781e:	440a      	add	r2, r1
 8007820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007822:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
 8007826:	9904      	ldr	r1, [sp, #16]
 8007828:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 800782c:	ea86 71f8 	eor.w	r1, r6, r8, ror #31
 8007830:	9109      	str	r1, [sp, #36]	; 0x24
 8007832:	ea4e 01bb 	orr.w	r1, lr, fp, ror #2
 8007836:	ea01 05bc 	and.w	r5, r1, ip, ror #2
 800783a:	ea0e 01bb 	and.w	r1, lr, fp, ror #2
 800783e:	4329      	orrs	r1, r5
 8007840:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007842:	eb03 75f5 	add.w	r5, r3, r5, ror #31
 8007846:	eb05 04b4 	add.w	r4, r5, r4, ror #2
 800784a:	4421      	add	r1, r4
 800784c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800784e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007850:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8007854:	ea84 7afa 	eor.w	sl, r4, sl, ror #31
 8007858:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 800785c:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 8007860:	ea42 07be 	orr.w	r7, r2, lr, ror #2
 8007864:	ea4f 74fa 	mov.w	r4, sl, ror #31
 8007868:	9415      	str	r4, [sp, #84]	; 0x54
 800786a:	ea07 04bb 	and.w	r4, r7, fp, ror #2
 800786e:	ea02 07be 	and.w	r7, r2, lr, ror #2
 8007872:	4327      	orrs	r7, r4
 8007874:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 8007878:	9d02      	ldr	r5, [sp, #8]
 800787a:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 800787e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007880:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8007884:	ea84 79f9 	eor.w	r9, r4, r9, ror #31
 8007888:	9c08      	ldr	r4, [sp, #32]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800788a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800788c:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8007890:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 8007894:	ea41 06b2 	orr.w	r6, r1, r2, ror #2
 8007898:	ea4f 74f9 	mov.w	r4, r9, ror #31
 800789c:	940b      	str	r4, [sp, #44]	; 0x2c
 800789e:	ea06 04be 	and.w	r4, r6, lr, ror #2
 80078a2:	ea01 06b2 	and.w	r6, r1, r2, ror #2
 80078a6:	4326      	orrs	r6, r4
 80078a8:	eb03 74f9 	add.w	r4, r3, r9, ror #31
 80078ac:	eb04 04bb 	add.w	r4, r4, fp, ror #2
 80078b0:	4426      	add	r6, r4
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 80078b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80078b4:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 80078b8:	9d06      	ldr	r5, [sp, #24]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 80078ba:	4467      	add	r7, ip
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 80078bc:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 80078c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078c2:	f8dd c008 	ldr.w	ip, [sp, #8]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 80078c6:	eb07 67f1 	add.w	r7, r7, r1, ror #27
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 80078ca:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 80078ce:	ea47 05b1 	orr.w	r5, r7, r1, ror #2
 80078d2:	940a      	str	r4, [sp, #40]	; 0x28
 80078d4:	ea05 04b2 	and.w	r4, r5, r2, ror #2
 80078d8:	ea07 05b1 	and.w	r5, r7, r1, ror #2
 80078dc:	4325      	orrs	r5, r4
 80078de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078e0:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 80078e4:	eb04 04be 	add.w	r4, r4, lr, ror #2
 80078e8:	4425      	add	r5, r4
 80078ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80078ec:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 80078f0:	f8dd c01c 	ldr.w	ip, [sp, #28]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 80078f4:	eb06 66f7 	add.w	r6, r6, r7, ror #27
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 80078f8:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 80078fc:	ea46 0eb7 	orr.w	lr, r6, r7, ror #2
 8007900:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
 8007904:	9402      	str	r4, [sp, #8]
 8007906:	ea0e 04b1 	and.w	r4, lr, r1, ror #2
 800790a:	ea06 0eb7 	and.w	lr, r6, r7, ror #2
 800790e:	ea44 0e0e 	orr.w	lr, r4, lr
 8007912:	9c02      	ldr	r4, [sp, #8]
 8007914:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8007918:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800791c:	4496      	add	lr, r2
 800791e:	9c03      	ldr	r4, [sp, #12]
 8007920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007922:	ea82 7cf4 	eor.w	ip, r2, r4, ror #31
 8007926:	ea8c 78f8 	eor.w	r8, ip, r8, ror #31
 800792a:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 800792e:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 8007932:	ea45 04b6 	orr.w	r4, r5, r6, ror #2
 8007936:	ea4f 72f8 	mov.w	r2, r8, ror #31
 800793a:	920c      	str	r2, [sp, #48]	; 0x30
 800793c:	ea04 02b7 	and.w	r2, r4, r7, ror #2
 8007940:	ea05 04b6 	and.w	r4, r5, r6, ror #2
 8007944:	4314      	orrs	r4, r2
 8007946:	eb03 72f8 	add.w	r2, r3, r8, ror #31
 800794a:	eb02 02b1 	add.w	r2, r2, r1, ror #2
 800794e:	4414      	add	r4, r2
 8007950:	9904      	ldr	r1, [sp, #16]
 8007952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007954:	ea82 71f1 	eor.w	r1, r2, r1, ror #31
 8007958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800795a:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 800795e:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8007962:	ea81 71f2 	eor.w	r1, r1, r2, ror #31
 8007966:	ea4e 0cb5 	orr.w	ip, lr, r5, ror #2
 800796a:	ea4f 72f1 	mov.w	r2, r1, ror #31
 800796e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007970:	ea0c 02b6 	and.w	r2, ip, r6, ror #2
 8007974:	ea0e 0cb5 	and.w	ip, lr, r5, ror #2
 8007978:	ea42 0c0c 	orr.w	ip, r2, ip
 800797c:	eb03 72f1 	add.w	r2, r3, r1, ror #31
 8007980:	eb02 02b7 	add.w	r2, r2, r7, ror #2
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 8007984:	9803      	ldr	r0, [sp, #12]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 8007986:	4494      	add	ip, r2
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 8007988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800798a:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800798e:	9808      	ldr	r0, [sp, #32]
 8007990:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8007994:	9802      	ldr	r0, [sp, #8]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 8007996:	eb04 64fe 	add.w	r4, r4, lr, ror #27
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800799a:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800799e:	9203      	str	r2, [sp, #12]
 80079a0:	ea44 02be 	orr.w	r2, r4, lr, ror #2
 80079a4:	ea02 00b5 	and.w	r0, r2, r5, ror #2
 80079a8:	ea04 02be 	and.w	r2, r4, lr, ror #2
 80079ac:	4302      	orrs	r2, r0
 80079ae:	9803      	ldr	r0, [sp, #12]
 80079b0:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 80079b4:	eb00 00b6 	add.w	r0, r0, r6, ror #2
 80079b8:	4402      	add	r2, r0
 80079ba:	9e04      	ldr	r6, [sp, #16]
 80079bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80079be:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 80079c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 80079c4:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 80079c8:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 80079cc:	ea4c 0bb4 	orr.w	fp, ip, r4, ror #2
 80079d0:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 80079d4:	9004      	str	r0, [sp, #16]
 80079d6:	ea0b 00be 	and.w	r0, fp, lr, ror #2
 80079da:	ea0c 0bb4 	and.w	fp, ip, r4, ror #2
 80079de:	ea40 0b0b 	orr.w	fp, r0, fp
 80079e2:	9804      	ldr	r0, [sp, #16]
 80079e4:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 80079e8:	eb00 00b5 	add.w	r0, r0, r5, ror #2
 80079ec:	4483      	add	fp, r0
 80079ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80079f0:	9d06      	ldr	r5, [sp, #24]
 80079f2:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
 80079f6:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
 80079fa:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 80079fe:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
 8007a02:	ea42 07bc 	orr.w	r7, r2, ip, ror #2
 8007a06:	ea4f 70fa 	mov.w	r0, sl, ror #31
 8007a0a:	9013      	str	r0, [sp, #76]	; 0x4c
 8007a0c:	ea07 00b4 	and.w	r0, r7, r4, ror #2
 8007a10:	ea02 07bc 	and.w	r7, r2, ip, ror #2
 8007a14:	4307      	orrs	r7, r0
 8007a16:	eb03 70fa 	add.w	r0, r3, sl, ror #31
 8007a1a:	eb00 00be 	add.w	r0, r0, lr, ror #2
 8007a1e:	9d07      	ldr	r5, [sp, #28]
 8007a20:	4407      	add	r7, r0
 8007a22:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007a24:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
 8007a28:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 8007a2c:	9803      	ldr	r0, [sp, #12]
 8007a2e:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 8007a32:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 8007a36:	ea4b 06b2 	orr.w	r6, fp, r2, ror #2
 8007a3a:	ea4f 70f9 	mov.w	r0, r9, ror #31
 8007a3e:	9014      	str	r0, [sp, #80]	; 0x50
 8007a40:	ea06 00bc 	and.w	r0, r6, ip, ror #2
 8007a44:	ea0b 06b2 	and.w	r6, fp, r2, ror #2
 8007a48:	4306      	orrs	r6, r0
 8007a4a:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 8007a4e:	eb00 00b4 	add.w	r0, r0, r4, ror #2
 8007a52:	4406      	add	r6, r0
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007a54:	9c06      	ldr	r4, [sp, #24]
 8007a56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007a58:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 8007a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a5e:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 8007a62:	9804      	ldr	r0, [sp, #16]
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 8007a64:	eb07 67fb 	add.w	r7, r7, fp, ror #27
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007a68:	ea47 05bb 	orr.w	r5, r7, fp, ror #2
 8007a6c:	ea84 70f0 	eor.w	r0, r4, r0, ror #31
 8007a70:	9006      	str	r0, [sp, #24]
 8007a72:	ea05 00b2 	and.w	r0, r5, r2, ror #2
 8007a76:	ea07 05bb 	and.w	r5, r7, fp, ror #2
 8007a7a:	4305      	orrs	r5, r0
 8007a7c:	9806      	ldr	r0, [sp, #24]
 8007a7e:	9c07      	ldr	r4, [sp, #28]
 8007a80:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 8007a84:	eb00 00bc 	add.w	r0, r0, ip, ror #2
 8007a88:	4405      	add	r5, r0
 8007a8a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007a8c:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8007a90:	9c02      	ldr	r4, [sp, #8]
 8007a92:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 8007a96:	eb06 66f7 	add.w	r6, r6, r7, ror #27
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007a9a:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
 8007a9e:	9007      	str	r0, [sp, #28]
 8007aa0:	ea46 00b7 	orr.w	r0, r6, r7, ror #2
 8007aa4:	ea00 04bb 	and.w	r4, r0, fp, ror #2
 8007aa8:	ea06 00b7 	and.w	r0, r6, r7, ror #2
 8007aac:	4320      	orrs	r0, r4
 8007aae:	9c07      	ldr	r4, [sp, #28]
 8007ab0:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8007ab4:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 8007ab8:	4410      	add	r0, r2
 8007aba:	9c08      	ldr	r4, [sp, #32]
 8007abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007abe:	ea82 7cf4 	eor.w	ip, r2, r4, ror #31
 8007ac2:	ea8c 7cf8 	eor.w	ip, ip, r8, ror #31
 8007ac6:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8007aca:	ea8c 7cf9 	eor.w	ip, ip, r9, ror #31
 8007ace:	ea45 08b6 	orr.w	r8, r5, r6, ror #2
 8007ad2:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8007ad6:	9210      	str	r2, [sp, #64]	; 0x40
 8007ad8:	ea08 02b7 	and.w	r2, r8, r7, ror #2
 8007adc:	ea05 08b6 	and.w	r8, r5, r6, ror #2
 8007ae0:	ea42 0808 	orr.w	r8, r2, r8
 8007ae4:	eb03 72fc 	add.w	r2, r3, ip, ror #31
 8007ae8:	eb02 02bb 	add.w	r2, r2, fp, ror #2
 8007aec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007aee:	4490      	add	r8, r2
 8007af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007af2:	ea82 7bf4 	eor.w	fp, r2, r4, ror #31
 8007af6:	9a06      	ldr	r2, [sp, #24]
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007af8:	9c08      	ldr	r4, [sp, #32]
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007afa:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 8007afe:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8007b02:	ea8b 7bf2 	eor.w	fp, fp, r2, ror #31
 8007b06:	ea40 01b5 	orr.w	r1, r0, r5, ror #2
 8007b0a:	ea4f 72fb 	mov.w	r2, fp, ror #31
 8007b0e:	9211      	str	r2, [sp, #68]	; 0x44
 8007b10:	ea01 02b6 	and.w	r2, r1, r6, ror #2
 8007b14:	ea00 01b5 	and.w	r1, r0, r5, ror #2
 8007b18:	4311      	orrs	r1, r2
 8007b1a:	eb03 72fb 	add.w	r2, r3, fp, ror #31
 8007b1e:	eb02 07b7 	add.w	r7, r2, r7, ror #2
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007b22:	9a15      	ldr	r2, [sp, #84]	; 0x54
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007b24:	4439      	add	r1, r7
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007b26:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
 8007b2a:	9a03      	ldr	r2, [sp, #12]
 8007b2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007b2e:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 8007b32:	9a07      	ldr	r2, [sp, #28]
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007b34:	eb08 68f0 	add.w	r8, r8, r0, ror #27
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007b38:	ea48 0eb0 	orr.w	lr, r8, r0, ror #2
 8007b3c:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
 8007b40:	9208      	str	r2, [sp, #32]
 8007b42:	ea0e 02b5 	and.w	r2, lr, r5, ror #2
 8007b46:	ea08 0eb0 	and.w	lr, r8, r0, ror #2
 8007b4a:	ea42 0e0e 	orr.w	lr, r2, lr
 8007b4e:	9a08      	ldr	r2, [sp, #32]
 8007b50:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8007b54:	eb02 02b6 	add.w	r2, r2, r6, ror #2
 8007b58:	4496      	add	lr, r2
 8007b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b5c:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
 8007b60:	9a04      	ldr	r2, [sp, #16]
 8007b62:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 8007b66:	eb01 61f8 	add.w	r1, r1, r8, ror #27
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007b6a:	ea86 72fc 	eor.w	r2, r6, ip, ror #31
 8007b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b70:	ea41 02b8 	orr.w	r2, r1, r8, ror #2
 8007b74:	ea02 04b0 	and.w	r4, r2, r0, ror #2
 8007b78:	e002      	b.n	8007b80 <Transform+0x9e4>
 8007b7a:	bf00      	nop
 8007b7c:	8f1bbcdc 	.word	0x8f1bbcdc
 8007b80:	ea01 02b8 	and.w	r2, r1, r8, ror #2
 8007b84:	4322      	orrs	r2, r4
 8007b86:	9c09      	ldr	r4, [sp, #36]	; 0x24

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 8007b88:	9e03      	ldr	r6, [sp, #12]
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007b8a:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8007b8e:	eb04 05b5 	add.w	r5, r4, r5, ror #2
 8007b92:	4415      	add	r5, r2
 8007b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b98:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 8007b9c:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 8007ba0:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 8007ba4:	eb0e 6ef1 	add.w	lr, lr, r1, ror #27
 8007ba8:	ea4f 72fa 	mov.w	r2, sl, ror #31
 8007bac:	9215      	str	r2, [sp, #84]	; 0x54
 8007bae:	ea4e 02b1 	orr.w	r2, lr, r1, ror #2
 8007bb2:	ea02 04b8 	and.w	r4, r2, r8, ror #2
 8007bb6:	ea0e 02b1 	and.w	r2, lr, r1, ror #2
 8007bba:	4322      	orrs	r2, r4
 8007bbc:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 8007bc0:	eb04 00b0 	add.w	r0, r4, r0, ror #2
 8007bc4:	4402      	add	r2, r0
 8007bc6:	9c02      	ldr	r4, [sp, #8]
 8007bc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007bca:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8007bce:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 8007bd2:	9808      	ldr	r0, [sp, #32]
 8007bd4:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8007bd8:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 8007bdc:	ea4f 70f9 	mov.w	r0, r9, ror #31
 8007be0:	ea45 04be 	orr.w	r4, r5, lr, ror #2
 8007be4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007be6:	ea04 04b1 	and.w	r4, r4, r1, ror #2
 8007bea:	ea05 00be 	and.w	r0, r5, lr, ror #2
 8007bee:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 8007bf2:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8007bf6:	4320      	orrs	r0, r4
 8007bf8:	4418      	add	r0, r3
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 8007bfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bfe:	ea83 78f4 	eor.w	r8, r3, r4, ror #31
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	ea88 78f3 	eor.w	r8, r8, r3, ror #31
 8007c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0a:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
 8007c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c12:	4bd8      	ldr	r3, [pc, #864]	; (8007f74 <Transform+0xdd8>)
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007c14:	eb02 62f5 	add.w	r2, r2, r5, ror #27
 8007c18:	ea4f 05b5 	mov.w	r5, r5, ror #2
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 8007c1c:	ea85 07be 	eor.w	r7, r5, lr, ror #2
 8007c20:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8007c24:	eb04 01b1 	add.w	r1, r4, r1, ror #2
 8007c28:	4057      	eors	r7, r2
 8007c2a:	9c02      	ldr	r4, [sp, #8]
 8007c2c:	440f      	add	r7, r1
 8007c2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c30:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8007c34:	9c07      	ldr	r4, [sp, #28]
 8007c36:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8007c3a:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 8007c3e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 8007c42:	9102      	str	r1, [sp, #8]
 8007c44:	ea85 04b2 	eor.w	r4, r5, r2, ror #2
 8007c48:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8007c4c:	eb01 01be 	add.w	r1, r1, lr, ror #2
 8007c50:	4044      	eors	r4, r0
 8007c52:	440c      	add	r4, r1
 8007c54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c56:	ea81 7ef6 	eor.w	lr, r1, r6, ror #31
 8007c5a:	ea8e 7efc 	eor.w	lr, lr, ip, ror #31
 8007c5e:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8007c62:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8007c66:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8007c6a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8007c6e:	910c      	str	r1, [sp, #48]	; 0x30
 8007c70:	ea80 0cb2 	eor.w	ip, r0, r2, ror #2
 8007c74:	eb03 71fe 	add.w	r1, r3, lr, ror #31
 8007c78:	4429      	add	r1, r5
 8007c7a:	ea8c 0c07 	eor.w	ip, ip, r7
 8007c7e:	9d04      	ldr	r5, [sp, #16]
 8007c80:	448c      	add	ip, r1
 8007c82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c84:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 8007c88:	ea81 7bfb 	eor.w	fp, r1, fp, ror #31
 8007c8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c8e:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 8007c92:	ea4f 71fb 	mov.w	r1, fp, ror #31
 8007c96:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 8007c9a:	eb03 75fb 	add.w	r5, r3, fp, ror #31
 8007c9e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ca0:	ea80 01b7 	eor.w	r1, r0, r7, ror #2
 8007ca4:	eb05 02b2 	add.w	r2, r5, r2, ror #2
 8007ca8:	4061      	eors	r1, r4
 8007caa:	4411      	add	r1, r2
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 8007cac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cae:	9d08      	ldr	r5, [sp, #32]
 8007cb0:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 8007cb4:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 8007cb8:	9d02      	ldr	r5, [sp, #8]
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 8007cba:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 8007cbe:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 8007cc2:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8007cc6:	9203      	str	r2, [sp, #12]
 8007cc8:	ea84 08b7 	eor.w	r8, r4, r7, ror #2
 8007ccc:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8007cd0:	4402      	add	r2, r0
 8007cd2:	ea88 080c 	eor.w	r8, r8, ip
 8007cd6:	4490      	add	r8, r2
 8007cd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cda:	9804      	ldr	r0, [sp, #16]
 8007cdc:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8007ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce2:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8007ce6:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
 8007cea:	9204      	str	r2, [sp, #16]
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 8007cec:	eb01 61fc 	add.w	r1, r1, ip, ror #27
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 8007cf0:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 8007cf4:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8007cf8:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 8007cfc:	404e      	eors	r6, r1
 8007cfe:	9806      	ldr	r0, [sp, #24]
 8007d00:	4416      	add	r6, r2
 8007d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d04:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8007d08:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 8007d0c:	eb08 68f1 	add.w	r8, r8, r1, ror #27
 8007d10:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 8007d14:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8007d18:	ea81 07bc 	eor.w	r7, r1, ip, ror #2
 8007d1c:	eb03 72fa 	add.w	r2, r3, sl, ror #31
 8007d20:	4422      	add	r2, r4
 8007d22:	ea87 0708 	eor.w	r7, r7, r8
 8007d26:	9807      	ldr	r0, [sp, #28]
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007d28:	9c06      	ldr	r4, [sp, #24]
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 8007d2a:	4417      	add	r7, r2
 8007d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d2e:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8007d32:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 8007d36:	9a03      	ldr	r2, [sp, #12]
 8007d38:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 8007d3c:	eb06 66f8 	add.w	r6, r6, r8, ror #27
 8007d40:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
 8007d44:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 8007d48:	eb00 00bc 	add.w	r0, r0, ip, ror #2
 8007d4c:	4072      	eors	r2, r6
 8007d4e:	4402      	add	r2, r0
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007d50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d52:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 8007d56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d58:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 8007d5c:	9804      	ldr	r0, [sp, #16]
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 8007d5e:	eb07 67f6 	add.w	r7, r7, r6, ror #27
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007d62:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 8007d66:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8007d6a:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 8007d6e:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 8007d72:	4401      	add	r1, r0
 8007d74:	ea8c 0c07 	eor.w	ip, ip, r7
 8007d78:	9807      	ldr	r0, [sp, #28]
 8007d7a:	448c      	add	ip, r1
 8007d7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d7e:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 8007d82:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 8007d86:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 8007d8a:	eb02 62f7 	add.w	r2, r2, r7, ror #27
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007d8e:	ea86 05b7 	eor.w	r5, r6, r7, ror #2
 8007d92:	eb03 70f1 	add.w	r0, r3, r1, ror #31
 8007d96:	eb00 00b8 	add.w	r0, r0, r8, ror #2
 8007d9a:	4055      	eors	r5, r2
 8007d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007da0:	4405      	add	r5, r0
 8007da2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007da4:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 8007da8:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 8007dac:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8007db0:	ea80 70f9 	eor.w	r0, r0, r9, ror #31
 8007db4:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8007db8:	9006      	str	r0, [sp, #24]
 8007dba:	ea82 08b7 	eor.w	r8, r2, r7, ror #2
 8007dbe:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 8007dc2:	4430      	add	r0, r6
 8007dc4:	ea88 080c 	eor.w	r8, r8, ip
 8007dc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007dca:	4480      	add	r8, r0
 8007dcc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007dce:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 8007dd2:	ea80 70fb 	eor.w	r0, r0, fp, ror #31
 8007dd6:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8007dda:	9007      	str	r0, [sp, #28]
 8007ddc:	9e07      	ldr	r6, [sp, #28]
 8007dde:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8007de2:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
 8007de6:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 8007dea:	eb06 06b7 	add.w	r6, r6, r7, ror #2
 8007dee:	4068      	eors	r0, r5
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007df0:	9f08      	ldr	r7, [sp, #32]
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007df2:	4430      	add	r0, r6
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007df4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007df6:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 8007dfa:	9e03      	ldr	r6, [sp, #12]
 8007dfc:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007e00:	eb08 68f5 	add.w	r8, r8, r5, ror #27
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007e04:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 8007e08:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8007e0c:	eb03 76f7 	add.w	r6, r3, r7, ror #31
 8007e10:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 8007e14:	4432      	add	r2, r6
 8007e16:	ea8e 0e08 	eor.w	lr, lr, r8
 8007e1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e1c:	4496      	add	lr, r2
 8007e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e20:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
 8007e24:	9a04      	ldr	r2, [sp, #16]
 8007e26:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8007e2a:	9a06      	ldr	r2, [sp, #24]
 8007e2c:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 8007e30:	eb00 60f8 	add.w	r0, r0, r8, ror #27
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007e34:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
 8007e38:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
 8007e3c:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
 8007e40:	4042      	eors	r2, r0
 8007e42:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007e46:	4462      	add	r2, ip
 8007e48:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8007e4c:	ea8c 7cfb 	eor.w	ip, ip, fp, ror #31
 8007e50:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
 8007e54:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007e58:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
 8007e5c:	ea8a 7afc 	eor.w	sl, sl, ip, ror #31
 8007e60:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8007e64:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 8007e68:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
 8007e6c:	44ab      	add	fp, r5
 8007e6e:	ea8c 0c0e 	eor.w	ip, ip, lr
 8007e72:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007e74:	44dc      	add	ip, fp
 8007e76:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e7a:	ea85 75fb 	eor.w	r5, r5, fp, ror #31
 8007e7e:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 8007e82:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 8007e86:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 8007e8a:	ea80 05be 	eor.w	r5, r0, lr, ror #2
 8007e8e:	eb03 79f7 	add.w	r9, r3, r7, ror #31
 8007e92:	eb09 09b8 	add.w	r9, r9, r8, ror #2
 8007e96:	4055      	eors	r5, r2
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007e98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007e9c:	444d      	add	r5, r9
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007e9e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8007ea2:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 8007ea6:	ea88 74f4 	eor.w	r4, r8, r4, ror #31
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007eaa:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007eae:	ea84 76f6 	eor.w	r6, r4, r6, ror #31
 8007eb2:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8007eb6:	eb03 78f6 	add.w	r8, r3, r6, ror #31
 8007eba:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 8007ebe:	ea84 040c 	eor.w	r4, r4, ip
 8007ec2:	4440      	add	r0, r8
 8007ec4:	4420      	add	r0, r4
 8007ec6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007ec8:	ea84 74fb 	eor.w	r4, r4, fp, ror #31
 8007ecc:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 8007ed0:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 8007ed4:	eb03 71f1 	add.w	r1, r3, r1, ror #31
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 8007ed8:	eb05 65fc 	add.w	r5, r5, ip, ror #27
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007edc:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
 8007ee0:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 8007ee4:	4069      	eors	r1, r5
 8007ee6:	9c03      	ldr	r4, [sp, #12]
 8007ee8:	448e      	add	lr, r1
 8007eea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007eec:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8007ef0:	9c06      	ldr	r4, [sp, #24]
 8007ef2:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8007ef6:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 8007efa:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8007efe:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8007f02:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8007f06:	440a      	add	r2, r1
 8007f08:	ea85 01bc 	eor.w	r1, r5, ip, ror #2
 8007f0c:	4041      	eors	r1, r0
 8007f0e:	9c04      	ldr	r4, [sp, #16]
 8007f10:	440a      	add	r2, r1
 8007f12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f14:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8007f18:	9c07      	ldr	r4, [sp, #28]
 8007f1a:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8007f1e:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
 8007f22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f24:	440b      	add	r3, r1
 8007f26:	eb03 73f6 	add.w	r3, r3, r6, ror #31
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007f2a:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
        sha->digest[0] += a;
 8007f2e:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007f32:	ea85 03b0 	eor.w	r3, r5, r0, ror #2
 8007f36:	ea83 030e 	eor.w	r3, r3, lr
        sha->digest[0] += a;
 8007f3a:	9900      	ldr	r1, [sp, #0]
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 8007f3c:	eb02 62fe 	add.w	r2, r2, lr, ror #27
        sha->digest[0] += a;
 8007f40:	4463      	add	r3, ip
 8007f42:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8007f46:	64cb      	str	r3, [r1, #76]	; 0x4c
        sha->digest[1] += b;
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	441a      	add	r2, r3
        sha->digest[2] += c;
 8007f4c:	9b05      	ldr	r3, [sp, #20]
        sha->digest[1] += b;
 8007f4e:	650a      	str	r2, [r1, #80]	; 0x50
        sha->digest[2] += c;
 8007f50:	eb03 01be 	add.w	r1, r3, lr, ror #2
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	6559      	str	r1, [r3, #84]	; 0x54
        sha->digest[3] += d;
 8007f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f5a:	eb03 00b0 	add.w	r0, r3, r0, ror #2
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	6598      	str	r0, [r3, #88]	; 0x58
        sha->digest[4] += e;
 8007f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f64:	441d      	add	r5, r3
 8007f66:	9b00      	ldr	r3, [sp, #0]

        (void)data; /* Not used */

        return 0;
    }
 8007f68:	2000      	movs	r0, #0
        sha->digest[4] += e;
 8007f6a:	65dd      	str	r5, [r3, #92]	; 0x5c
    }
 8007f6c:	b017      	add	sp, #92	; 0x5c
 8007f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f72:	bf00      	nop
 8007f74:	ca62c1d6 	.word	0xca62c1d6

08007f78 <wc_InitSha_ex>:
** we'll assume this is ALWAYS for a new, uninitialized sha256
*/
int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
{
    int ret = 0;
    if (sha == NULL) {
 8007f78:	b1b8      	cbz	r0, 8007faa <wc_InitSha_ex+0x32>
        sha->digest[0] = 0x67452301L;
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <wc_InitSha_ex+0x38>)
 8007f7c:	64c3      	str	r3, [r0, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 8007f7e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8007f82:	6503      	str	r3, [r0, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 8007f84:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8007f88:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8007f8c:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 8007f90:	6543      	str	r3, [r0, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 8007f92:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8007f96:	6583      	str	r3, [r0, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <wc_InitSha_ex+0x3c>)
 8007f9a:	65c3      	str	r3, [r0, #92]	; 0x5c
        sha->buffLen = 0;
 8007f9c:	2300      	movs	r3, #0
        sha->loLen   = 0;
 8007f9e:	e9c0 3300 	strd	r3, r3, [r0]
        return BAD_FUNC_ARG;
    }

    sha->heap = heap;
 8007fa2:	6601      	str	r1, [r0, #96]	; 0x60
        sha->hiLen   = 0;
 8007fa4:	6083      	str	r3, [r0, #8]
# endif /* WOLFSSL_ASYNC_CRYPT */
#ifdef WOLFSSL_IMXRT1170_CAAM
   ret = wc_CAAM_HashInit(&sha->hndl, &sha->ctx, WC_HASH_TYPE_SHA);
#endif

    return ret;
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8007faa:	f06f 00ac 	mvn.w	r0, #172	; 0xac
} /* wc_InitSha_ex */
 8007fae:	4770      	bx	lr
 8007fb0:	67452301 	.word	0x67452301
 8007fb4:	c3d2e1f0 	.word	0xc3d2e1f0

08007fb8 <wc_ShaUpdate>:

/* do block size increments/updates */
int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
{
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	460f      	mov	r7, r1
 8007fbe:	4614      	mov	r4, r2
    int ret = 0;
    word32 blocksLen;
    byte* local;

    if (sha == NULL || (data == NULL && len > 0)) {
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d05a      	beq.n	800807c <wc_ShaUpdate+0xc4>
 8007fc6:	b939      	cbnz	r1, 8007fd8 <wc_ShaUpdate+0x20>
        return BAD_FUNC_ARG;
    }

    if (data == NULL && len == 0) {
        /* valid, but do nothing */
        return 0;
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	bf14      	ite	ne
 8007fcc:	f06f 06ac 	mvnne.w	r6, #172	; 0xac
 8007fd0:	2600      	moveq	r6, #0
        XMEMCPY(local, data, len);
        sha->buffLen = len;
    }

    return ret;
}
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sha->buffLen >= WC_SHA_BLOCK_SIZE) {
 8007fd8:	6800      	ldr	r0, [r0, #0]
 8007fda:	283f      	cmp	r0, #63	; 0x3f
 8007fdc:	d851      	bhi.n	8008082 <wc_ShaUpdate+0xca>
        sha->hiLen++;                       /* carry low to high */
 8007fde:	686b      	ldr	r3, [r5, #4]
 8007fe0:	18d3      	adds	r3, r2, r3
    if ((sha->loLen += len) < tmp)
 8007fe2:	606b      	str	r3, [r5, #4]
        sha->hiLen++;                       /* carry low to high */
 8007fe4:	bf22      	ittt	cs
 8007fe6:	68ab      	ldrcs	r3, [r5, #8]
 8007fe8:	3301      	addcs	r3, #1
 8007fea:	60ab      	strcs	r3, [r5, #8]
    local = (byte*)sha->buffer;
 8007fec:	f105 080c 	add.w	r8, r5, #12
    if (sha->buffLen > 0) {
 8007ff0:	b1d8      	cbz	r0, 800802a <wc_ShaUpdate+0x72>
        blocksLen = min(len, WC_SHA_BLOCK_SIZE - sha->buffLen);
 8007ff2:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_MISC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
 8007ff6:	4296      	cmp	r6, r2
 8007ff8:	bf28      	it	cs
 8007ffa:	4616      	movcs	r6, r2
        XMEMCPY(&local[sha->buffLen], data, blocksLen);
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4440      	add	r0, r8
 8008000:	f00b f8de 	bl	80131c0 <memcpy>
        sha->buffLen += blocksLen;
 8008004:	682a      	ldr	r2, [r5, #0]
 8008006:	4432      	add	r2, r6
        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 8008008:	2a40      	cmp	r2, #64	; 0x40
        sha->buffLen += blocksLen;
 800800a:	602a      	str	r2, [r5, #0]
        data         += blocksLen;
 800800c:	4437      	add	r7, r6
        len          -= blocksLen;
 800800e:	eba4 0406 	sub.w	r4, r4, r6
        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 8008012:	d10a      	bne.n	800802a <wc_ShaUpdate+0x72>
            ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 8008014:	4641      	mov	r1, r8
 8008016:	4640      	mov	r0, r8
 8008018:	f7ff f8b4 	bl	8007184 <ByteReverseWords>
            ret = XTRANSFORM(sha, (const byte*)local);
 800801c:	4628      	mov	r0, r5
 800801e:	f7ff f8bd 	bl	800719c <Transform>
            if (ret != 0) {
 8008022:	4606      	mov	r6, r0
 8008024:	2800      	cmp	r0, #0
 8008026:	d1d4      	bne.n	8007fd2 <wc_ShaUpdate+0x1a>
            sha->buffLen = 0; /* Nothing left to do, so set to zero. */
 8008028:	6028      	str	r0, [r5, #0]
{
 800802a:	46a1      	mov	r9, r4
 800802c:	2600      	movs	r6, #0
 800802e:	eb07 0a04 	add.w	sl, r7, r4
    while (len >= WC_SHA_BLOCK_SIZE) {
 8008032:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8008036:	ebaa 0109 	sub.w	r1, sl, r9
 800803a:	d80f      	bhi.n	800805c <wc_ShaUpdate+0xa4>
 800803c:	09a2      	lsrs	r2, r4, #6
 800803e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8008042:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8008046:	fb03 4402 	mla	r4, r3, r2, r4
    if (len > 0) {
 800804a:	4439      	add	r1, r7
 800804c:	2c00      	cmp	r4, #0
 800804e:	d0c0      	beq.n	8007fd2 <wc_ShaUpdate+0x1a>
        XMEMCPY(local, data, len);
 8008050:	4622      	mov	r2, r4
 8008052:	4640      	mov	r0, r8
 8008054:	f00b f8b4 	bl	80131c0 <memcpy>
        sha->buffLen = len;
 8008058:	602c      	str	r4, [r5, #0]
 800805a:	e7ba      	b.n	8007fd2 <wc_ShaUpdate+0x1a>
            XMEMCPY(local32, data, WC_SHA_BLOCK_SIZE);
 800805c:	2240      	movs	r2, #64	; 0x40
 800805e:	4640      	mov	r0, r8
 8008060:	f00b f8ae 	bl	80131c0 <memcpy>
        ByteReverseWords(local32, local32, WC_SHA_BLOCK_SIZE);
 8008064:	2240      	movs	r2, #64	; 0x40
 8008066:	4641      	mov	r1, r8
 8008068:	4640      	mov	r0, r8
 800806a:	f7ff f88b 	bl	8007184 <ByteReverseWords>
        ret = XTRANSFORM(sha, (const byte*)local32);
 800806e:	4628      	mov	r0, r5
 8008070:	f7ff f894 	bl	800719c <Transform>
        len  -= WC_SHA_BLOCK_SIZE;
 8008074:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        ret = XTRANSFORM(sha, (const byte*)local32);
 8008078:	4606      	mov	r6, r0
 800807a:	e7da      	b.n	8008032 <wc_ShaUpdate+0x7a>
        return BAD_FUNC_ARG;
 800807c:	f06f 06ac 	mvn.w	r6, #172	; 0xac
 8008080:	e7a7      	b.n	8007fd2 <wc_ShaUpdate+0x1a>
        return BUFFER_E;
 8008082:	f06f 0683 	mvn.w	r6, #131	; 0x83
 8008086:	e7a4      	b.n	8007fd2 <wc_ShaUpdate+0x1a>

08008088 <wc_ShaFinal>:
/*
** Finalizes hashing of data. Result is placed into hash.
** Resets state of sha struct.
*/
int wc_ShaFinal(wc_Sha* sha, byte* hash)
{
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	460f      	mov	r7, r1
    int ret;
    byte* local;

    if (sha == NULL || hash == NULL) {
 800808c:	4604      	mov	r4, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	d067      	beq.n	8008162 <wc_ShaFinal+0xda>
 8008092:	2900      	cmp	r1, #0
 8008094:	d065      	beq.n	8008162 <wc_ShaFinal+0xda>
        return BAD_FUNC_ARG;
    }

    local = (byte*)sha->buffer;
 8008096:	4606      	mov	r6, r0
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* we'll add a 0x80 byte at the end,
    ** so make sure we have appropriate buffer length. */
    if (sha->buffLen > WC_SHA_BLOCK_SIZE - 1) {
 8008098:	f856 3b0c 	ldr.w	r3, [r6], #12
 800809c:	2b3f      	cmp	r3, #63	; 0x3f
 800809e:	d863      	bhi.n	8008168 <wc_ShaFinal+0xe0>
        /* exit with error code if there's a bad buffer size in buffLen */
        return BAD_STATE_E;
    } /* buffLen check */

    local[sha->buffLen++] = 0x80;  /* add 1 */
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	6002      	str	r2, [r0, #0]
 80080a4:	2280      	movs	r2, #128	; 0x80
 80080a6:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (sha->buffLen > WC_SHA_PAD_SIZE) {
 80080a8:	6800      	ldr	r0, [r0, #0]
 80080aa:	2838      	cmp	r0, #56	; 0x38
 80080ac:	d912      	bls.n	80080d4 <wc_ShaFinal+0x4c>
        XMEMSET(&local[sha->buffLen], 0, WC_SHA_BLOCK_SIZE - sha->buffLen);
 80080ae:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80080b2:	2100      	movs	r1, #0
 80080b4:	4430      	add	r0, r6
 80080b6:	f00b f8ab 	bl	8013210 <memset>
        sha->buffLen += WC_SHA_BLOCK_SIZE - sha->buffLen;
 80080ba:	2240      	movs	r2, #64	; 0x40
 80080bc:	6022      	str	r2, [r4, #0]

    #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 80080be:	4631      	mov	r1, r6
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff f85f 	bl	8007184 <ByteReverseWords>
    #else
        /*
        ** The #if defined(WOLFSSL_USE_ESP32C3_CRYPT_HASH_HW) also falls
        ** though here to SW, as it's not yet implemented for HW.
        */
        ret = XTRANSFORM(sha, (const byte*)local);
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7ff f868 	bl	800719c <Transform>
    #endif
        if (ret != 0) {
 80080cc:	4605      	mov	r5, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d145      	bne.n	800815e <wc_ShaFinal+0xd6>
            return ret;
        }

        sha->buffLen = 0;
 80080d2:	6020      	str	r0, [r4, #0]
    } /*  (sha->buffLen > WC_SHA_PAD_SIZE) */

    XMEMSET(&local[sha->buffLen], 0, WC_SHA_PAD_SIZE - sha->buffLen);
 80080d4:	6820      	ldr	r0, [r4, #0]
 80080d6:	2100      	movs	r1, #0
 80080d8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80080dc:	4430      	add	r0, r6
 80080de:	f00b f897 	bl	8013210 <memset>

#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 80080e2:	2240      	movs	r2, #64	; 0x40
 80080e4:	4631      	mov	r1, r6
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7ff f84c 	bl	8007184 <ByteReverseWords>
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 80080ec:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80080f0:	0f5a      	lsrs	r2, r3, #29
 80080f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    sha->loLen = sha->loLen << 3;
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	6063      	str	r3, [r4, #4]
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 80080fa:	60a2      	str	r2, [r4, #8]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
 80080fc:	f104 0108 	add.w	r1, r4, #8
 8008100:	2204      	movs	r2, #4
 8008102:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8008106:	f00b f85b 	bl	80131c0 <memcpy>
    XMEMCPY(&local[WC_SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
 800810a:	2204      	movs	r2, #4
 800810c:	18a1      	adds	r1, r4, r2
 800810e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8008112:	f00b f855 	bl	80131c0 <memcpy>
/*
** The #if defined(WOLFSSL_USE_ESP32C3_CRYPT_HASH_HW) also falls
** though here to SW, as it's not yet implemented for HW.
*/
#else
    ret = XTRANSFORM(sha, (const byte*)local);
 8008116:	4631      	mov	r1, r6
 8008118:	4620      	mov	r0, r4
 800811a:	f7ff f83f 	bl	800719c <Transform>
#endif

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 800811e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8008122:	2214      	movs	r2, #20
    ret = XTRANSFORM(sha, (const byte*)local);
 8008124:	4605      	mov	r5, r0
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 8008126:	4608      	mov	r0, r1
 8008128:	f7ff f82c 	bl	8007184 <ByteReverseWords>
#endif

    XMEMCPY(hash, (byte *)&sha->digest[0], WC_SHA_DIGEST_SIZE);
 800812c:	2214      	movs	r2, #20
 800812e:	4638      	mov	r0, r7
 8008130:	f00b f846 	bl	80131c0 <memcpy>
        sha->digest[0] = 0x67452301L;
 8008134:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <wc_ShaFinal+0xe8>)
 8008136:	64e3      	str	r3, [r4, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 8008138:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800813c:	6523      	str	r3, [r4, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 800813e:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8008142:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8008146:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 800814a:	6563      	str	r3, [r4, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 800814c:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8008150:	65a3      	str	r3, [r4, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <wc_ShaFinal+0xec>)
 8008154:	65e3      	str	r3, [r4, #92]	; 0x5c
        sha->buffLen = 0;
 8008156:	2300      	movs	r3, #0
        sha->loLen   = 0;
 8008158:	e9c4 3300 	strd	r3, r3, [r4]
        sha->hiLen   = 0;
 800815c:	60a3      	str	r3, [r4, #8]
     * which may cause fall back to SW if HW is busy. we do not return result
     * of initSha here */
    (void)InitSha(sha); /* reset state */

    return ret;
}
 800815e:	4628      	mov	r0, r5
 8008160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 8008162:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8008166:	e7fa      	b.n	800815e <wc_ShaFinal+0xd6>
        return BAD_STATE_E;
 8008168:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 800816c:	e7f7      	b.n	800815e <wc_ShaFinal+0xd6>
 800816e:	bf00      	nop
 8008170:	67452301 	.word	0x67452301
 8008174:	c3d2e1f0 	.word	0xc3d2e1f0

08008178 <wc_ShaFree>:
    }
#endif
#ifdef WOLFSSL_IMXRT_DCP
    DCPShaFree(sha);
#endif
}
 8008178:	4770      	bx	lr

0800817a <ByteReverseWords>:
{
 800817a:	b510      	push	{r4, lr}
        word32 count = byteCount/(word32)sizeof(word32);
 800817c:	0892      	lsrs	r2, r2, #2
        for (i = 0; i < count; i++)
 800817e:	2300      	movs	r3, #0
            out[i] = ByteReverseWord32(in[i]);
 8008180:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8008184:	ba24      	rev	r4, r4
 8008186:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (i = 0; i < count; i++)
 800818a:	3301      	adds	r3, #1
 800818c:	429a      	cmp	r2, r3
 800818e:	d1f7      	bne.n	8008180 <ByteReverseWords+0x6>
}
 8008190:	bd10      	pop	{r4, pc}
	...

08008194 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	4604      	mov	r4, r0
 800819a:	b08d      	sub	sp, #52	; 0x34
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 800819c:	f44f 7080 	mov.w	r0, #256	; 0x100
    {
 80081a0:	460d      	mov	r5, r1
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 80081a2:	f00a fffd 	bl	80131a0 <malloc>
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 80081a6:	4682      	mov	sl, r0
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f000 818e 	beq.w	80084ca <Transform_Sha256+0x336>
 80081ae:	1f23      	subs	r3, r4, #4
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	ab04      	add	r3, sp, #16
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f104 031c 	add.w	r3, r4, #28
 80081ba:	9302      	str	r3, [sp, #8]
 80081bc:	e9dd 3200 	ldrd	r3, r2, [sp]
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];
 80081c0:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80081c4:	f842 1b04 	str.w	r1, [r2], #4
        for (i = 0; i < 8; i++)
 80081c8:	9902      	ldr	r1, [sp, #8]
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d1f8      	bne.n	80081c0 <Transform_Sha256+0x2c>

        for (i = 0; i < 16; i++)
 80081ce:	2300      	movs	r3, #0
            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
 80081d0:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80081d4:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
        for (i = 0; i < 16; i++)
 80081d8:	3301      	adds	r3, #1
 80081da:	2b10      	cmp	r3, #16
 80081dc:	d1f8      	bne.n	80081d0 <Transform_Sha256+0x3c>
 80081de:	46d0      	mov	r8, sl
 80081e0:	f10a 00c0 	add.w	r0, sl, #192	; 0xc0
 80081e4:	4652      	mov	r2, sl

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 80081e6:	6b91      	ldr	r1, [r2, #56]	; 0x38
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 80081e8:	4615      	mov	r5, r2
 80081ea:	ea4f 43f1 	mov.w	r3, r1, ror #19
 80081ee:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 80081f2:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 80081f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80081f8:	682d      	ldr	r5, [r5, #0]
 80081fa:	f852 4f04 	ldr.w	r4, [r2, #4]!
 80081fe:	4429      	add	r1, r5
 8008200:	440b      	add	r3, r1
 8008202:	ea4f 41b4 	mov.w	r1, r4, ror #18
 8008206:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
 800820a:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
 800820e:	440b      	add	r3, r1
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 8008210:	4290      	cmp	r0, r2
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 8008212:	63d3      	str	r3, [r2, #60]	; 0x3c
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 8008214:	d1e7      	bne.n	80081e6 <Transform_Sha256+0x52>
 8008216:	e9dd 1009 	ldrd	r1, r0, [sp, #36]	; 0x24
 800821a:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 800821e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008222:	f50a 7680 	add.w	r6, sl, #256	; 0x100
 8008226:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008228:	9c08      	ldr	r4, [sp, #32]
 800822a:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80084d0 <Transform_Sha256+0x33c>
 800822e:	9603      	str	r6, [sp, #12]
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
            RND(0); RND(1); RND(2); RND(3);
 8008230:	f8d8 7000 	ldr.w	r7, [r8]
 8008234:	f8d9 6000 	ldr.w	r6, [r9]
 8008238:	ea4f 2bf4 	mov.w	fp, r4, ror #11
 800823c:	ea8b 1bb4 	eor.w	fp, fp, r4, ror #6
 8008240:	443e      	add	r6, r7
 8008242:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
 8008246:	44b3      	add	fp, r6
 8008248:	ea80 0601 	eor.w	r6, r0, r1
 800824c:	4026      	ands	r6, r4
 800824e:	4046      	eors	r6, r0
 8008250:	44b3      	add	fp, r6
 8008252:	ea4e 070c 	orr.w	r7, lr, ip
 8008256:	ea4f 06be 	mov.w	r6, lr, ror #2
 800825a:	445d      	add	r5, fp
 800825c:	ea86 367e 	eor.w	r6, r6, lr, ror #13
 8008260:	ea0e 0b0c 	and.w	fp, lr, ip
 8008264:	4017      	ands	r7, r2
 8008266:	ea86 56be 	eor.w	r6, r6, lr, ror #22
 800826a:	ea47 070b 	orr.w	r7, r7, fp
 800826e:	4437      	add	r7, r6
 8008270:	442b      	add	r3, r5
 8008272:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8008276:	443d      	add	r5, r7
 8008278:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800827c:	ea84 0b01 	eor.w	fp, r4, r1
 8008280:	443e      	add	r6, r7
 8008282:	4430      	add	r0, r6
 8008284:	ea0b 0b03 	and.w	fp, fp, r3
 8008288:	ea4f 26f3 	mov.w	r6, r3, ror #11
 800828c:	ea8b 0b01 	eor.w	fp, fp, r1
 8008290:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
 8008294:	4458      	add	r0, fp
 8008296:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 800829a:	4406      	add	r6, r0
 800829c:	ea45 070e 	orr.w	r7, r5, lr
 80082a0:	ea4f 3075 	mov.w	r0, r5, ror #13
 80082a4:	ea05 0b0e 	and.w	fp, r5, lr
 80082a8:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 80082ac:	ea07 070c 	and.w	r7, r7, ip
 80082b0:	ea47 070b 	orr.w	r7, r7, fp
 80082b4:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 80082b8:	4438      	add	r0, r7
 80082ba:	4430      	add	r0, r6
 80082bc:	4432      	add	r2, r6
 80082be:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80082c2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80082c6:	ea84 0b03 	eor.w	fp, r4, r3
 80082ca:	443e      	add	r6, r7
 80082cc:	4431      	add	r1, r6
 80082ce:	ea0b 0b02 	and.w	fp, fp, r2
 80082d2:	ea4f 26f2 	mov.w	r6, r2, ror #11
 80082d6:	ea8b 0b04 	eor.w	fp, fp, r4
 80082da:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
 80082de:	4459      	add	r1, fp
 80082e0:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 80082e4:	440e      	add	r6, r1
 80082e6:	ea45 0700 	orr.w	r7, r5, r0
 80082ea:	ea4f 3170 	mov.w	r1, r0, ror #13
 80082ee:	ea05 0b00 	and.w	fp, r5, r0
 80082f2:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80082f6:	ea07 070e 	and.w	r7, r7, lr
 80082fa:	ea47 070b 	orr.w	r7, r7, fp
 80082fe:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8008302:	4439      	add	r1, r7
 8008304:	4431      	add	r1, r6
 8008306:	44b4      	add	ip, r6
 8008308:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800830c:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8008310:	ea83 0b02 	eor.w	fp, r3, r2
 8008314:	443e      	add	r6, r7
 8008316:	4434      	add	r4, r6
 8008318:	ea0b 0b0c 	and.w	fp, fp, ip
 800831c:	ea4f 26fc 	mov.w	r6, ip, ror #11
 8008320:	ea8b 0b03 	eor.w	fp, fp, r3
 8008324:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 8008328:	445c      	add	r4, fp
 800832a:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 800832e:	4426      	add	r6, r4
 8008330:	ea40 0701 	orr.w	r7, r0, r1
 8008334:	ea4f 3471 	mov.w	r4, r1, ror #13
 8008338:	ea00 0b01 	and.w	fp, r0, r1
 800833c:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8008340:	402f      	ands	r7, r5
 8008342:	ea47 070b 	orr.w	r7, r7, fp
 8008346:	ea84 54b1 	eor.w	r4, r4, r1, ror #22
 800834a:	443c      	add	r4, r7
 800834c:	4434      	add	r4, r6
 800834e:	44b6      	add	lr, r6
            RND(4); RND(5); RND(6); RND(7);
 8008350:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008354:	f8d9 6010 	ldr.w	r6, [r9, #16]
 8008358:	ea82 0b0c 	eor.w	fp, r2, ip
 800835c:	443e      	add	r6, r7
 800835e:	4433      	add	r3, r6
 8008360:	ea0b 0b0e 	and.w	fp, fp, lr
 8008364:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8008368:	ea8b 0b02 	eor.w	fp, fp, r2
 800836c:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8008370:	445b      	add	r3, fp
 8008372:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 8008376:	441e      	add	r6, r3
 8008378:	ea41 0704 	orr.w	r7, r1, r4
 800837c:	ea4f 3374 	mov.w	r3, r4, ror #13
 8008380:	ea01 0b04 	and.w	fp, r1, r4
 8008384:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 8008388:	4007      	ands	r7, r0
 800838a:	ea47 070b 	orr.w	r7, r7, fp
 800838e:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 8008392:	443b      	add	r3, r7
 8008394:	4433      	add	r3, r6
 8008396:	4435      	add	r5, r6
 8008398:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800839c:	f8d9 6014 	ldr.w	r6, [r9, #20]
 80083a0:	ea8c 0b0e 	eor.w	fp, ip, lr
 80083a4:	443e      	add	r6, r7
 80083a6:	4432      	add	r2, r6
 80083a8:	ea0b 0b05 	and.w	fp, fp, r5
 80083ac:	ea4f 26f5 	mov.w	r6, r5, ror #11
 80083b0:	ea8b 0b0c 	eor.w	fp, fp, ip
 80083b4:	ea86 16b5 	eor.w	r6, r6, r5, ror #6
 80083b8:	445a      	add	r2, fp
 80083ba:	ea86 6675 	eor.w	r6, r6, r5, ror #25
 80083be:	4416      	add	r6, r2
 80083c0:	ea44 0703 	orr.w	r7, r4, r3
 80083c4:	ea4f 3273 	mov.w	r2, r3, ror #13
 80083c8:	ea04 0b03 	and.w	fp, r4, r3
 80083cc:	400f      	ands	r7, r1
 80083ce:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 80083d2:	ea47 070b 	orr.w	r7, r7, fp
 80083d6:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 80083da:	443a      	add	r2, r7
 80083dc:	4432      	add	r2, r6
 80083de:	4430      	add	r0, r6
 80083e0:	f8d8 7018 	ldr.w	r7, [r8, #24]
 80083e4:	f8d9 6018 	ldr.w	r6, [r9, #24]
 80083e8:	ea8e 0b05 	eor.w	fp, lr, r5
 80083ec:	443e      	add	r6, r7
 80083ee:	44b4      	add	ip, r6
 80083f0:	ea0b 0b00 	and.w	fp, fp, r0
 80083f4:	ea4f 26f0 	mov.w	r6, r0, ror #11
 80083f8:	ea8b 0b0e 	eor.w	fp, fp, lr
 80083fc:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 8008400:	44dc      	add	ip, fp
 8008402:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 8008406:	4466      	add	r6, ip
 8008408:	ea43 0702 	orr.w	r7, r3, r2
 800840c:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8008410:	4027      	ands	r7, r4
 8008412:	ea03 0b02 	and.w	fp, r3, r2
 8008416:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 800841a:	ea47 070b 	orr.w	r7, r7, fp
 800841e:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 8008422:	44bc      	add	ip, r7
 8008424:	44b4      	add	ip, r6
 8008426:	4431      	add	r1, r6
 8008428:	f8d8 701c 	ldr.w	r7, [r8, #28]
 800842c:	f8d9 601c 	ldr.w	r6, [r9, #28]
 8008430:	ea85 0b00 	eor.w	fp, r5, r0
 8008434:	443e      	add	r6, r7
 8008436:	44b6      	add	lr, r6
 8008438:	ea0b 0b01 	and.w	fp, fp, r1
 800843c:	ea4f 26f1 	mov.w	r6, r1, ror #11
 8008440:	ea8b 0b05 	eor.w	fp, fp, r5
 8008444:	ea86 16b1 	eor.w	r6, r6, r1, ror #6
 8008448:	44de      	add	lr, fp
 800844a:	ea86 6671 	eor.w	r6, r6, r1, ror #25
 800844e:	4476      	add	r6, lr
 8008450:	ea42 070c 	orr.w	r7, r2, ip
 8008454:	ea4f 3e7c 	mov.w	lr, ip, ror #13
 8008458:	ea8e 0ebc 	eor.w	lr, lr, ip, ror #2
 800845c:	401f      	ands	r7, r3
 800845e:	ea02 0b0c 	and.w	fp, r2, ip
 8008462:	ea8e 5ebc 	eor.w	lr, lr, ip, ror #22
 8008466:	ea47 070b 	orr.w	r7, r7, fp
 800846a:	44be      	add	lr, r7
 800846c:	4434      	add	r4, r6
 800846e:	44b6      	add	lr, r6
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 8008470:	9e03      	ldr	r6, [sp, #12]
 8008472:	f108 0820 	add.w	r8, r8, #32
 8008476:	4546      	cmp	r6, r8
 8008478:	f109 0920 	add.w	r9, r9, #32
 800847c:	f47f aed8 	bne.w	8008230 <Transform_Sha256+0x9c>
 8008480:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
 8008484:	e9cd ec04 	strd	lr, ip, [sp, #16]
 8008488:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800848c:	950b      	str	r5, [sp, #44]	; 0x2c
 800848e:	9408      	str	r4, [sp, #32]
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
            sha256->digest[i] += S[i];
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	9900      	ldr	r1, [sp, #0]
 8008494:	f853 2b04 	ldr.w	r2, [r3], #4
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800849e:	9100      	str	r1, [sp, #0]
 80084a0:	4413      	add	r3, r2
 80084a2:	600b      	str	r3, [r1, #0]
        for (i = 0; i < 8; i++) {
 80084a4:	9b02      	ldr	r3, [sp, #8]
 80084a6:	428b      	cmp	r3, r1
 80084a8:	d1f2      	bne.n	8008490 <Transform_Sha256+0x2fc>
 80084aa:	f50a 7280 	add.w	r2, sl, #256	; 0x100
 80084ae:	4653      	mov	r3, sl
 80084b0:	2100      	movs	r1, #0
    while (len--) *z++ = 0;
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d106      	bne.n	80084c4 <Transform_Sha256+0x330>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        ForceZero(W, sizeof(word32) * WC_SHA256_BLOCK_SIZE);
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80084b6:	4650      	mov	r0, sl
 80084b8:	f00a fe7a 	bl	80131b0 <free>
    #endif
        return 0;
 80084bc:	2000      	movs	r0, #0
    }
 80084be:	b00d      	add	sp, #52	; 0x34
 80084c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	f803 1b01 	strb.w	r1, [r3], #1
 80084c8:	e7f3      	b.n	80084b2 <Transform_Sha256+0x31e>
            return MEMORY_E;
 80084ca:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80084ce:	e7f6      	b.n	80084be <Transform_Sha256+0x32a>
 80084d0:	0801783c 	.word	0x0801783c

080084d4 <wc_InitSha256_ex>:
    {
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	460d      	mov	r5, r1
        if (sha256 == NULL)
 80084d8:	4604      	mov	r4, r0
 80084da:	b1f0      	cbz	r0, 800851a <wc_InitSha256_ex+0x46>
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 80084dc:	2220      	movs	r2, #32
 80084de:	2100      	movs	r1, #0
 80084e0:	f00a fe96 	bl	8013210 <memset>
    sha256->digest[1] = 0xBB67AE85L;
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <wc_InitSha256_ex+0x4c>)
 80084e6:	4a0f      	ldr	r2, [pc, #60]	; (8008524 <wc_InitSha256_ex+0x50>)
    sha256->digest[3] = 0xA54FF53AL;
 80084e8:	490f      	ldr	r1, [pc, #60]	; (8008528 <wc_InitSha256_ex+0x54>)
    sha256->digest[5] = 0x9B05688CL;
 80084ea:	4810      	ldr	r0, [pc, #64]	; (800852c <wc_InitSha256_ex+0x58>)
    sha256->digest[1] = 0xBB67AE85L;
 80084ec:	e9c4 2300 	strd	r2, r3, [r4]
    sha256->digest[3] = 0xA54FF53AL;
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <wc_InitSha256_ex+0x5c>)
 80084f2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    sha256->digest[5] = 0x9B05688CL;
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <wc_InitSha256_ex+0x60>)
 80084f8:	e9c4 0304 	strd	r0, r3, [r4, #16]
    sha256->digest[6] = 0x1F83D9ABL;
 80084fc:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <wc_InitSha256_ex+0x64>)
 80084fe:	61a3      	str	r3, [r4, #24]
    sha256->buffLen = 0;
 8008500:	2000      	movs	r0, #0
    sha256->digest[7] = 0x5BE0CD19L;
 8008502:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8008506:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    sha256->loLen   = 0;
 800850a:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
        sha256->heap = heap;
 800850e:	e9c4 051a 	strd	r0, r5, [r4, #104]	; 0x68
    sha256->digest[7] = 0x5BE0CD19L;
 8008512:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8008516:	61e3      	str	r3, [r4, #28]
    }
 8008518:	bd38      	pop	{r3, r4, r5, pc}
            return BAD_FUNC_ARG;
 800851a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800851e:	e7fb      	b.n	8008518 <wc_InitSha256_ex+0x44>
 8008520:	bb67ae85 	.word	0xbb67ae85
 8008524:	6a09e667 	.word	0x6a09e667
 8008528:	3c6ef372 	.word	0x3c6ef372
 800852c:	510e527f 	.word	0x510e527f
 8008530:	a54ff53a 	.word	0xa54ff53a
 8008534:	9b05688c 	.word	0x9b05688c
 8008538:	1f83d9ab 	.word	0x1f83d9ab

0800853c <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	460e      	mov	r6, r1
 8008542:	4614      	mov	r4, r2
        if (sha256 == NULL || (data == NULL && len > 0)) {
 8008544:	4605      	mov	r5, r0
 8008546:	2800      	cmp	r0, #0
 8008548:	d049      	beq.n	80085de <wc_Sha256Update+0xa2>
 800854a:	b919      	cbnz	r1, 8008554 <wc_Sha256Update+0x18>
 800854c:	2a00      	cmp	r2, #0
 800854e:	d146      	bne.n	80085de <wc_Sha256Update+0xa2>
            sha256->buffLen = len;
 8008550:	2000      	movs	r0, #0
 8008552:	e042      	b.n	80085da <wc_Sha256Update+0x9e>
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 8008554:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8008556:	283f      	cmp	r0, #63	; 0x3f
 8008558:	d844      	bhi.n	80085e4 <wc_Sha256Update+0xa8>
            sha256->hiLen++;                       /* carry low to high */
 800855a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800855c:	18d3      	adds	r3, r2, r3
        if ((sha256->loLen += len) < tmp) {
 800855e:	666b      	str	r3, [r5, #100]	; 0x64
            sha256->hiLen++;                       /* carry low to high */
 8008560:	bf22      	ittt	cs
 8008562:	6eab      	ldrcs	r3, [r5, #104]	; 0x68
 8008564:	3301      	addcs	r3, #1
 8008566:	66ab      	strcs	r3, [r5, #104]	; 0x68
        local = (byte*)sha256->buffer;
 8008568:	f105 0720 	add.w	r7, r5, #32
        if (sha256->buffLen > 0) {
 800856c:	b1c8      	cbz	r0, 80085a2 <wc_Sha256Update+0x66>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 800856e:	f1c0 0840 	rsb	r8, r0, #64	; 0x40
        return a > b ? b : a;
 8008572:	4590      	cmp	r8, r2
 8008574:	bf28      	it	cs
 8008576:	4690      	movcs	r8, r2
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 8008578:	4642      	mov	r2, r8
 800857a:	4438      	add	r0, r7
 800857c:	f00a fe20 	bl	80131c0 <memcpy>
            sha256->buffLen += blocksLen;
 8008580:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8008582:	4442      	add	r2, r8
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 8008584:	2a40      	cmp	r2, #64	; 0x40
            sha256->buffLen += blocksLen;
 8008586:	662a      	str	r2, [r5, #96]	; 0x60
            data            += blocksLen;
 8008588:	4446      	add	r6, r8
            len             -= blocksLen;
 800858a:	eba4 0408 	sub.w	r4, r4, r8
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 800858e:	d108      	bne.n	80085a2 <wc_Sha256Update+0x66>
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 8008590:	4638      	mov	r0, r7
 8008592:	4639      	mov	r1, r7
 8008594:	f7ff fdf1 	bl	800817a <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local);
 8008598:	4628      	mov	r0, r5
 800859a:	f7ff fdfb 	bl	8008194 <Transform_Sha256>
                if (ret == 0)
 800859e:	b9e0      	cbnz	r0, 80085da <wc_Sha256Update+0x9e>
                    sha256->buffLen = 0;
 80085a0:	6628      	str	r0, [r5, #96]	; 0x60
 80085a2:	4426      	add	r6, r4
            while (len >= WC_SHA256_BLOCK_SIZE) {
 80085a4:	2c3f      	cmp	r4, #63	; 0x3f
 80085a6:	eba6 0104 	sub.w	r1, r6, r4
 80085aa:	d807      	bhi.n	80085bc <wc_Sha256Update+0x80>
        if (ret == 0 && len > 0) {
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	d0cf      	beq.n	8008550 <wc_Sha256Update+0x14>
            XMEMCPY(local, data, len);
 80085b0:	4622      	mov	r2, r4
 80085b2:	4638      	mov	r0, r7
 80085b4:	f00a fe04 	bl	80131c0 <memcpy>
            sha256->buffLen = len;
 80085b8:	662c      	str	r4, [r5, #96]	; 0x60
 80085ba:	e7c9      	b.n	8008550 <wc_Sha256Update+0x14>
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 80085bc:	2240      	movs	r2, #64	; 0x40
 80085be:	4638      	mov	r0, r7
 80085c0:	f00a fdfe 	bl	80131c0 <memcpy>
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 80085c4:	4638      	mov	r0, r7
 80085c6:	2240      	movs	r2, #64	; 0x40
 80085c8:	4639      	mov	r1, r7
 80085ca:	f7ff fdd6 	bl	800817a <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local32);
 80085ce:	4628      	mov	r0, r5
                len  -= WC_SHA256_BLOCK_SIZE;
 80085d0:	3c40      	subs	r4, #64	; 0x40
                ret = XTRANSFORM(sha256, (const byte*)local32);
 80085d2:	f7ff fddf 	bl	8008194 <Transform_Sha256>
                if (ret != 0)
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0e4      	beq.n	80085a4 <wc_Sha256Update+0x68>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
    }
 80085da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BAD_FUNC_ARG;
 80085de:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80085e2:	e7fa      	b.n	80085da <wc_Sha256Update+0x9e>
            return BUFFER_E;
 80085e4:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80085e8:	e7f7      	b.n	80085da <wc_Sha256Update+0x9e>
	...

080085ec <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	460f      	mov	r7, r1
        int ret;

        if (sha256 == NULL || hash == NULL) {
 80085f0:	4604      	mov	r4, r0
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d070      	beq.n	80086d8 <wc_Sha256Final+0xec>
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d06e      	beq.n	80086d8 <wc_Sha256Final+0xec>
        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
 80085fa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80085fc:	2b3f      	cmp	r3, #63	; 0x3f
 80085fe:	d86e      	bhi.n	80086de <wc_Sha256Final+0xf2>
        local = (byte*)sha256->buffer;
 8008600:	f100 0620 	add.w	r6, r0, #32
        local[sha256->buffLen++] = 0x80; /* add 1 */
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	6602      	str	r2, [r0, #96]	; 0x60
 8008608:	2280      	movs	r2, #128	; 0x80
 800860a:	54f2      	strb	r2, [r6, r3]
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 800860c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800860e:	2838      	cmp	r0, #56	; 0x38
 8008610:	d912      	bls.n	8008638 <wc_Sha256Final+0x4c>
            XMEMSET(&local[sha256->buffLen], 0,
 8008612:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8008616:	2100      	movs	r1, #0
 8008618:	4430      	add	r0, r6
 800861a:	f00a fdf9 	bl	8013210 <memset>
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 800861e:	2240      	movs	r2, #64	; 0x40
 8008620:	6622      	str	r2, [r4, #96]	; 0x60
                ByteReverseWords(sha256->buffer, sha256->buffer,
 8008622:	4631      	mov	r1, r6
 8008624:	4630      	mov	r0, r6
 8008626:	f7ff fda8 	bl	800817a <ByteReverseWords>
            ret = XTRANSFORM(sha256, (const byte*)local);
 800862a:	4620      	mov	r0, r4
 800862c:	f7ff fdb2 	bl	8008194 <Transform_Sha256>
            if (ret != 0)
 8008630:	4605      	mov	r5, r0
 8008632:	2800      	cmp	r0, #0
 8008634:	d14e      	bne.n	80086d4 <wc_Sha256Final+0xe8>
            sha256->buffLen = 0;
 8008636:	6620      	str	r0, [r4, #96]	; 0x60
        XMEMSET(&local[sha256->buffLen], 0,
 8008638:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800863a:	2100      	movs	r1, #0
 800863c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8008640:	4430      	add	r0, r6
 8008642:	f00a fde5 	bl	8013210 <memset>
                                                         (sha256->hiLen << 3);
 8008646:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 800864a:	0f5a      	lsrs	r2, r3, #29
 800864c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
        sha256->loLen = sha256->loLen << 3;
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	6663      	str	r3, [r4, #100]	; 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 8008654:	66a2      	str	r2, [r4, #104]	; 0x68
            ByteReverseWords(sha256->buffer, sha256->buffer,
 8008656:	4631      	mov	r1, r6
 8008658:	2240      	movs	r2, #64	; 0x40
 800865a:	4630      	mov	r0, r6
 800865c:	f7ff fd8d 	bl	800817a <ByteReverseWords>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 8008660:	2204      	movs	r2, #4
 8008662:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8008666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800866a:	f00a fda9 	bl	80131c0 <memcpy>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 800866e:	2204      	movs	r2, #4
 8008670:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8008674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008678:	f00a fda2 	bl	80131c0 <memcpy>
        ret = XTRANSFORM(sha256, (const byte*)local);
 800867c:	4631      	mov	r1, r6
 800867e:	4620      	mov	r0, r4
 8008680:	f7ff fd88 	bl	8008194 <Transform_Sha256>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
        if (ret != 0) {
 8008684:	4605      	mov	r5, r0
 8008686:	bb28      	cbnz	r0, 80086d4 <wc_Sha256Final+0xe8>
            return ret;
        }

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 8008688:	4621      	mov	r1, r4
 800868a:	2220      	movs	r2, #32
 800868c:	4620      	mov	r0, r4
 800868e:	f7ff fd74 	bl	800817a <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 8008692:	2220      	movs	r2, #32
 8008694:	4638      	mov	r0, r7
 8008696:	f00a fd93 	bl	80131c0 <memcpy>
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 800869a:	2220      	movs	r2, #32
 800869c:	4629      	mov	r1, r5
 800869e:	4620      	mov	r0, r4
 80086a0:	f00a fdb6 	bl	8013210 <memset>
    sha256->digest[1] = 0xBB67AE85L;
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <wc_Sha256Final+0xf8>)
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <wc_Sha256Final+0xfc>)
    sha256->digest[3] = 0xA54FF53AL;
 80086a8:	4910      	ldr	r1, [pc, #64]	; (80086ec <wc_Sha256Final+0x100>)
    sha256->digest[5] = 0x9B05688CL;
 80086aa:	4811      	ldr	r0, [pc, #68]	; (80086f0 <wc_Sha256Final+0x104>)
    sha256->hiLen   = 0;
 80086ac:	66a5      	str	r5, [r4, #104]	; 0x68
    sha256->digest[1] = 0xBB67AE85L;
 80086ae:	e9c4 2300 	strd	r2, r3, [r4]
    sha256->digest[3] = 0xA54FF53AL;
 80086b2:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <wc_Sha256Final+0x108>)
 80086b4:	e9c4 1302 	strd	r1, r3, [r4, #8]
    sha256->digest[5] = 0x9B05688CL;
 80086b8:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <wc_Sha256Final+0x10c>)
 80086ba:	e9c4 0304 	strd	r0, r3, [r4, #16]
    sha256->digest[6] = 0x1F83D9ABL;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <wc_Sha256Final+0x110>)
 80086c0:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 80086c2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80086c6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    sha256->loLen   = 0;
 80086ca:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    sha256->digest[7] = 0x5BE0CD19L;
 80086ce:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80086d2:	61e3      	str	r3, [r4, #28]

        return InitSha256(sha256);  /* reset state */
    }
 80086d4:	4628      	mov	r0, r5
 80086d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
 80086d8:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 80086dc:	e7fa      	b.n	80086d4 <wc_Sha256Final+0xe8>
            return BAD_STATE_E;
 80086de:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 80086e2:	e7f7      	b.n	80086d4 <wc_Sha256Final+0xe8>
 80086e4:	bb67ae85 	.word	0xbb67ae85
 80086e8:	6a09e667 	.word	0x6a09e667
 80086ec:	3c6ef372 	.word	0x3c6ef372
 80086f0:	510e527f 	.word	0x510e527f
 80086f4:	a54ff53a 	.word	0xa54ff53a
 80086f8:	9b05688c 	.word	0x9b05688c
 80086fc:	1f83d9ab 	.word	0x1f83d9ab

08008700 <wc_Sha256Free>:
#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
    if (sha256 == NULL)
 8008700:	b120      	cbz	r0, 800870c <wc_Sha256Free+0xc>
 8008702:	f100 0370 	add.w	r3, r0, #112	; 0x70
    while (len--) *z++ = 0;
 8008706:	2200      	movs	r2, #0
 8008708:	4298      	cmp	r0, r3
 800870a:	d100      	bne.n	800870e <wc_Sha256Free+0xe>
    else {
        ESP_LOGV(TAG, "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
    ForceZero(sha256, sizeof(*sha256));
}
 800870c:	4770      	bx	lr
 800870e:	f800 2b01 	strb.w	r2, [r0], #1
 8008712:	e7f9      	b.n	8008708 <wc_Sha256Free+0x8>
 8008714:	0000      	movs	r0, r0
	...

08008718 <InitSha512>:
#else

#ifdef WOLFSSL_SHA512

static int InitSha512(wc_Sha512* sha512)
{
 8008718:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 800871a:	2800      	cmp	r0, #0
 800871c:	d032      	beq.n	8008784 <InitSha512+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
 800871e:	a31c      	add	r3, pc, #112	; (adr r3, 8008790 <InitSha512+0x78>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
 8008728:	a31b      	add	r3, pc, #108	; (adr r3, 8008798 <InitSha512+0x80>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
 8008732:	a31b      	add	r3, pc, #108	; (adr r3, 80087a0 <InitSha512+0x88>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
 800873c:	a31a      	add	r3, pc, #104	; (adr r3, 80087a8 <InitSha512+0x90>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
 8008746:	a31a      	add	r3, pc, #104	; (adr r3, 80087b0 <InitSha512+0x98>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
 8008750:	a319      	add	r3, pc, #100	; (adr r3, 80087b8 <InitSha512+0xa0>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
 800875a:	a319      	add	r3, pc, #100	; (adr r3, 80087c0 <InitSha512+0xa8>)
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 8008764:	a318      	add	r3, pc, #96	; (adr r3, 80087c8 <InitSha512+0xb0>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 800876a:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 800876c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 8008770:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 8008772:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 8008774:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 8008778:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 800877c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8008780:	4618      	mov	r0, r3
}
 8008782:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8008784:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008788:	e7fb      	b.n	8008782 <InitSha512+0x6a>
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	f3bcc908 	.word	0xf3bcc908
 8008794:	6a09e667 	.word	0x6a09e667
 8008798:	84caa73b 	.word	0x84caa73b
 800879c:	bb67ae85 	.word	0xbb67ae85
 80087a0:	fe94f82b 	.word	0xfe94f82b
 80087a4:	3c6ef372 	.word	0x3c6ef372
 80087a8:	5f1d36f1 	.word	0x5f1d36f1
 80087ac:	a54ff53a 	.word	0xa54ff53a
 80087b0:	ade682d1 	.word	0xade682d1
 80087b4:	510e527f 	.word	0x510e527f
 80087b8:	2b3e6c1f 	.word	0x2b3e6c1f
 80087bc:	9b05688c 	.word	0x9b05688c
 80087c0:	fb41bd6b 	.word	0xfb41bd6b
 80087c4:	1f83d9ab 	.word	0x1f83d9ab
 80087c8:	137e2179 	.word	0x137e2179
 80087cc:	5be0cd19 	.word	0x5be0cd19

080087d0 <InitSha512_224>:
 * Note that sha512/224 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_224(wc_Sha512* sha512)
{
 80087d0:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d032      	beq.n	800883c <InitSha512_224+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x8c3d37c819544da2);
 80087d6:	a31c      	add	r3, pc, #112	; (adr r3, 8008848 <InitSha512_224+0x78>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0x73e1996689dcd4d6);
 80087e0:	a31b      	add	r3, pc, #108	; (adr r3, 8008850 <InitSha512_224+0x80>)
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x1dfab7ae32ff9c82);
 80087ea:	a31b      	add	r3, pc, #108	; (adr r3, 8008858 <InitSha512_224+0x88>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0x679dd514582f9fcf);
 80087f4:	a31a      	add	r3, pc, #104	; (adr r3, 8008860 <InitSha512_224+0x90>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x0f6d2b697bd44da8);
 80087fe:	a31a      	add	r3, pc, #104	; (adr r3, 8008868 <InitSha512_224+0x98>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0x77e36f7304c48942);
 8008808:	a319      	add	r3, pc, #100	; (adr r3, 8008870 <InitSha512_224+0xa0>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x3f9d85a86a1d36c8);
 8008812:	a319      	add	r3, pc, #100	; (adr r3, 8008878 <InitSha512_224+0xa8>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 800881c:	a318      	add	r3, pc, #96	; (adr r3, 8008880 <InitSha512_224+0xb0>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 8008822:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 8008824:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 8008828:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 800882a:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 800882c:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 8008830:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 8008834:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8008838:	4618      	mov	r0, r3
}
 800883a:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 800883c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008840:	e7fb      	b.n	800883a <InitSha512_224+0x6a>
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	19544da2 	.word	0x19544da2
 800884c:	8c3d37c8 	.word	0x8c3d37c8
 8008850:	89dcd4d6 	.word	0x89dcd4d6
 8008854:	73e19966 	.word	0x73e19966
 8008858:	32ff9c82 	.word	0x32ff9c82
 800885c:	1dfab7ae 	.word	0x1dfab7ae
 8008860:	582f9fcf 	.word	0x582f9fcf
 8008864:	679dd514 	.word	0x679dd514
 8008868:	7bd44da8 	.word	0x7bd44da8
 800886c:	0f6d2b69 	.word	0x0f6d2b69
 8008870:	04c48942 	.word	0x04c48942
 8008874:	77e36f73 	.word	0x77e36f73
 8008878:	6a1d36c8 	.word	0x6a1d36c8
 800887c:	3f9d85a8 	.word	0x3f9d85a8
 8008880:	91d692a1 	.word	0x91d692a1
 8008884:	1112e6ad 	.word	0x1112e6ad

08008888 <InitSha512_256>:
 * Note that sha512/256 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_256(wc_Sha512* sha512)
{
 8008888:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 800888a:	2800      	cmp	r0, #0
 800888c:	d032      	beq.n	80088f4 <InitSha512_256+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x22312194fc2bf72c);
 800888e:	a31c      	add	r3, pc, #112	; (adr r3, 8008900 <InitSha512_256+0x78>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0x9f555fa3c84c64c2);
 8008898:	a31b      	add	r3, pc, #108	; (adr r3, 8008908 <InitSha512_256+0x80>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x2393b86b6f53b151);
 80088a2:	a31b      	add	r3, pc, #108	; (adr r3, 8008910 <InitSha512_256+0x88>)
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0x963877195940eabd);
 80088ac:	a31a      	add	r3, pc, #104	; (adr r3, 8008918 <InitSha512_256+0x90>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x96283ee2a88effe3);
 80088b6:	a31a      	add	r3, pc, #104	; (adr r3, 8008920 <InitSha512_256+0x98>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0xbe5e1e2553863992);
 80088c0:	a319      	add	r3, pc, #100	; (adr r3, 8008928 <InitSha512_256+0xa0>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x2b0199fc2c85b8aa);
 80088ca:	a319      	add	r3, pc, #100	; (adr r3, 8008930 <InitSha512_256+0xa8>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 80088d4:	a318      	add	r3, pc, #96	; (adr r3, 8008938 <InitSha512_256+0xb0>)
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 80088da:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 80088dc:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 80088e0:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 80088e2:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 80088e4:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 80088e8:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 80088ec:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 80088f0:	4618      	mov	r0, r3
}
 80088f2:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 80088f4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80088f8:	e7fb      	b.n	80088f2 <InitSha512_256+0x6a>
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w
 8008900:	fc2bf72c 	.word	0xfc2bf72c
 8008904:	22312194 	.word	0x22312194
 8008908:	c84c64c2 	.word	0xc84c64c2
 800890c:	9f555fa3 	.word	0x9f555fa3
 8008910:	6f53b151 	.word	0x6f53b151
 8008914:	2393b86b 	.word	0x2393b86b
 8008918:	5940eabd 	.word	0x5940eabd
 800891c:	96387719 	.word	0x96387719
 8008920:	a88effe3 	.word	0xa88effe3
 8008924:	96283ee2 	.word	0x96283ee2
 8008928:	53863992 	.word	0x53863992
 800892c:	be5e1e25 	.word	0xbe5e1e25
 8008930:	2c85b8aa 	.word	0x2c85b8aa
 8008934:	2b0199fc 	.word	0x2b0199fc
 8008938:	81c52ca2 	.word	0x81c52ca2
 800893c:	0eb72ddc 	.word	0x0eb72ddc

08008940 <ByteReverseWords64>:
{
 8008940:	b510      	push	{r4, lr}
 8008942:	f022 0207 	bic.w	r2, r2, #7
 8008946:	3808      	subs	r0, #8
 8008948:	440a      	add	r2, r1
        out[i] = ByteReverseWord64(in[i]);
 800894a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800894e:	ba24      	rev	r4, r4
 8008950:	f840 4f08 	str.w	r4, [r0, #8]!
 8008954:	3108      	adds	r1, #8
 8008956:	ba1b      	rev	r3, r3
    for (i = 0; i < count; i++)
 8008958:	428a      	cmp	r2, r1
        out[i] = ByteReverseWord64(in[i]);
 800895a:	6043      	str	r3, [r0, #4]
    for (i = 0; i < count; i++)
 800895c:	d1f5      	bne.n	800894a <ByteReverseWords64+0xa>
}
 800895e:	bd10      	pop	{r4, pc}

08008960 <_Transform_Sha512>:
    h(i) += S1(e(i)) + Ch(e(i),f(i),g(i)) + K[(i)+j] + (j ? blk2(i) : blk0(i)); \
    d(i) += h(i); \
    h(i) += S0(a(i)) + Maj(a(i),b(i),c(i))

static int _Transform_Sha512(wc_Sha512* sha512)
{
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	4605      	mov	r5, r0
 8008966:	b0c3      	sub	sp, #268	; 0x10c
            return MEMORY_E;
        sha512->W = W;
    }
#elif defined(WOLFSSL_SMALL_STACK)
    word64* W;
    W = (word64*) XMALLOC(sizeof(word64) * 16, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8008968:	2080      	movs	r0, #128	; 0x80
 800896a:	f00a fc19 	bl	80131a0 <malloc>
    if (W == NULL)
 800896e:	4604      	mov	r4, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	f001 87e2 	beq.w	800a93a <_Transform_Sha512+0x1fda>
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
 8008976:	2240      	movs	r2, #64	; 0x40
 8008978:	4629      	mov	r1, r5
 800897a:	a832      	add	r0, sp, #200	; 0xc8
 800897c:	f00a fc20 	bl	80131c0 <memcpy>
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
 8008980:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008982:	932f      	str	r3, [sp, #188]	; 0xbc
 8008984:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8008986:	932b      	str	r3, [sp, #172]	; 0xac
 8008988:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800898a:	932c      	str	r3, [sp, #176]	; 0xb0
 800898c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800898e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008990:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8008992:	932e      	str	r3, [sp, #184]	; 0xb8
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	9319      	str	r3, [sp, #100]	; 0x64
 8008998:	68e3      	ldr	r3, [r4, #12]
 800899a:	9309      	str	r3, [sp, #36]	; 0x24
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	9318      	str	r3, [sp, #96]	; 0x60
 80089a0:	6863      	ldr	r3, [r4, #4]
 80089a2:	9308      	str	r3, [sp, #32]
 80089a4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80089a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80089a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80089ac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80089ae:	9322      	str	r3, [sp, #136]	; 0x88
 80089b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80089b2:	9327      	str	r3, [sp, #156]	; 0x9c
 80089b4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80089b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80089b8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80089ba:	f8dd a0ec 	ldr.w	sl, [sp, #236]	; 0xec
 80089be:	f8dd b0e4 	ldr.w	fp, [sp, #228]	; 0xe4
 80089c2:	9325      	str	r3, [sp, #148]	; 0x94
 80089c4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80089c6:	9326      	str	r3, [sp, #152]	; 0x98
 80089c8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80089ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80089cc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80089ce:	9324      	str	r3, [sp, #144]	; 0x90
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80089d4:	6963      	ldr	r3, [r4, #20]
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	69a3      	ldr	r3, [r4, #24]
 80089da:	9312      	str	r3, [sp, #72]	; 0x48
 80089dc:	69e3      	ldr	r3, [r4, #28]
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	6a23      	ldr	r3, [r4, #32]
 80089e2:	931a      	str	r3, [sp, #104]	; 0x68
 80089e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e6:	930a      	str	r3, [sp, #40]	; 0x28
 80089e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80089ea:	9314      	str	r3, [sp, #80]	; 0x50
 80089ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80089f2:	9320      	str	r3, [sp, #128]	; 0x80
 80089f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80089f6:	9310      	str	r3, [sp, #64]	; 0x40
 80089f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089fa:	9315      	str	r3, [sp, #84]	; 0x54
 80089fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a02:	9321      	str	r3, [sp, #132]	; 0x84
 8008a04:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008a06:	9311      	str	r3, [sp, #68]	; 0x44
 8008a08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a0a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a0e:	9306      	str	r3, [sp, #24]
 8008a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a12:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008a1a:	931c      	str	r3, [sp, #112]	; 0x70
 8008a1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a22:	931d      	str	r3, [sp, #116]	; 0x74
 8008a24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a26:	930d      	str	r3, [sp, #52]	; 0x34
 8008a28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a2a:	931e      	str	r3, [sp, #120]	; 0x78
 8008a2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8008a30:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a32:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8008a3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a40:	2200      	movs	r2, #0
 8008a42:	4bbf      	ldr	r3, [pc, #764]	; (8008d40 <_Transform_Sha512+0x3e0>)
 8008a44:	9201      	str	r2, [sp, #4]
    return (x >> y) | (x << (sizeof(y) * 8 - y));
 8008a46:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8008a48:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8008a4a:	ea4f 469a 	mov.w	r6, sl, lsr #18
 8008a4e:	ea4f 379a 	mov.w	r7, sl, lsr #14
 8008a52:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 8008a56:	ea46 3082 	orr.w	r0, r6, r2, lsl #14
 8008a5a:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 8008a5e:	0b89      	lsrs	r1, r1, #14
        R( 0); R( 1); R( 2); R( 3);
 8008a60:	ea87 0600 	eor.w	r6, r7, r0
 8008a64:	ea4c 3c8a 	orr.w	ip, ip, sl, lsl #14
 8008a68:	05d0      	lsls	r0, r2, #23
 8008a6a:	ea41 418a 	orr.w	r1, r1, sl, lsl #18
 8008a6e:	ea81 010c 	eor.w	r1, r1, ip
 8008a72:	ea40 205a 	orr.w	r0, r0, sl, lsr #9
 8008a76:	ea4f 57ca 	mov.w	r7, sl, lsl #23
 8008a7a:	ea47 2752 	orr.w	r7, r7, r2, lsr #9
 8008a7e:	4041      	eors	r1, r0
 8008a80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008a82:	982b      	ldr	r0, [sp, #172]	; 0xac
 8008a84:	ea82 0c00 	eor.w	ip, r2, r0
 8008a88:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008a8a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8008a8c:	4077      	eors	r7, r6
 8008a8e:	ea82 0600 	eor.w	r6, r2, r0
 8008a92:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8008a94:	ea0c 0c02 	and.w	ip, ip, r2
 8008a98:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008a9a:	ea06 060a 	and.w	r6, r6, sl
 8008a9e:	ea8c 0c02 	eor.w	ip, ip, r2
 8008aa2:	4070      	eors	r0, r6
 8008aa4:	eb11 010c 	adds.w	r1, r1, ip
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	9230      	str	r2, [sp, #192]	; 0xc0
 8008aac:	eb47 0600 	adc.w	r6, r7, r0
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	9231      	str	r2, [sp, #196]	; 0xc4
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f001 86d8 	beq.w	800a86c <_Transform_Sha512+0x1f0c>
 8008abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008abe:	ea4f 4ed2 	mov.w	lr, r2, lsr #19
 8008ac2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ac4:	ea4e 3e42 	orr.w	lr, lr, r2, lsl #13
 8008ac8:	4610      	mov	r0, r2
 8008aca:	0cd7      	lsrs	r7, r2, #19
 8008acc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ace:	ea47 3742 	orr.w	r7, r7, r2, lsl #13
 8008ad2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ad4:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8008ad8:	ea4c 7c52 	orr.w	ip, ip, r2, lsr #29
 8008adc:	ea87 0c0c 	eor.w	ip, r7, ip
 8008ae0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8008ae2:	00d0      	lsls	r0, r2, #3
 8008ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ae6:	09bf      	lsrs	r7, r7, #6
 8008ae8:	ea47 6782 	orr.w	r7, r7, r2, lsl #26
 8008aec:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8008af0:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
 8008af4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008af6:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8008afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afc:	ea8e 0000 	eor.w	r0, lr, r0
 8008b00:	4078      	eors	r0, r7
 8008b02:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 8008b06:	0857      	lsrs	r7, r2, #1
 8008b08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b0a:	ea47 77c2 	orr.w	r7, r7, r2, lsl #31
 8008b0e:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8008b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b14:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8008b18:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8008b1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b1e:	ea89 0e0e 	eor.w	lr, r9, lr
 8008b22:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8008b26:	ea4f 19d2 	mov.w	r9, r2, lsr #7
 8008b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b2c:	ea87 0708 	eor.w	r7, r7, r8
 8008b30:	ea49 6942 	orr.w	r9, r9, r2, lsl #25
 8008b34:	ea87 17d2 	eor.w	r7, r7, r2, lsr #7
 8008b38:	ea8e 0e09 	eor.w	lr, lr, r9
 8008b3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b3e:	eb10 0e0e 	adds.w	lr, r0, lr
 8008b42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b44:	eb4c 0707 	adc.w	r7, ip, r7
 8008b48:	eb1e 0e02 	adds.w	lr, lr, r2
 8008b4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b4e:	eb40 0707 	adc.w	r7, r0, r7
 8008b52:	9808      	ldr	r0, [sp, #32]
 8008b54:	eb1e 0e02 	adds.w	lr, lr, r2
 8008b58:	eb40 0007 	adc.w	r0, r0, r7
 8008b5c:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8008b60:	9008      	str	r0, [sp, #32]
 8008b62:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8008b64:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8008b68:	1809      	adds	r1, r1, r0
 8008b6a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8008b6c:	eb46 0600 	adc.w	r6, r6, r0
 8008b70:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008b72:	1809      	adds	r1, r1, r0
 8008b74:	9808      	ldr	r0, [sp, #32]
 8008b76:	eb40 0606 	adc.w	r6, r0, r6
 8008b7a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8008b7c:	1809      	adds	r1, r1, r0
 8008b7e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8008b80:	eb40 0606 	adc.w	r6, r0, r6
 8008b84:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008b86:	1808      	adds	r0, r1, r0
 8008b88:	eb46 020b 	adc.w	r2, r6, fp
 8008b8c:	9230      	str	r2, [sp, #192]	; 0xc0
 8008b8e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008b90:	902a      	str	r0, [sp, #168]	; 0xa8
 8008b92:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 8008b96:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008b98:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8008b9a:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 8008b9e:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 8008ba2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008ba4:	0780      	lsls	r0, r0, #30
 8008ba6:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 8008baa:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8008bae:	0797      	lsls	r7, r2, #30
 8008bb0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008bb2:	ea8c 0c00 	eor.w	ip, ip, r0
 8008bb6:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 8008bba:	0650      	lsls	r0, r2, #25
 8008bbc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008bbe:	ea8e 0e07 	eor.w	lr, lr, r7
 8008bc2:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 8008bc6:	0657      	lsls	r7, r2, #25
 8008bc8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008bca:	ea8c 0c00 	eor.w	ip, ip, r0
 8008bce:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 8008bd2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8008bd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008bd6:	ea40 0802 	orr.w	r8, r0, r2
 8008bda:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008bdc:	9826      	ldr	r0, [sp, #152]	; 0x98
 8008bde:	ea8e 0e07 	eor.w	lr, lr, r7
 8008be2:	4310      	orrs	r0, r2
 8008be4:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8008be6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008be8:	4038      	ands	r0, r7
 8008bea:	ea08 0802 	and.w	r8, r8, r2
 8008bee:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8008bf0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008bf2:	4017      	ands	r7, r2
 8008bf4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008bf6:	ea48 0707 	orr.w	r7, r8, r7
 8008bfa:	ea02 0909 	and.w	r9, r2, r9
 8008bfe:	eb1e 0707 	adds.w	r7, lr, r7
 8008c02:	ea40 0909 	orr.w	r9, r0, r9
 8008c06:	eb4c 0909 	adc.w	r9, ip, r9
 8008c0a:	1879      	adds	r1, r7, r1
 8008c0c:	eb46 0209 	adc.w	r2, r6, r9
 8008c10:	9229      	str	r2, [sp, #164]	; 0xa4
 8008c12:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008c14:	9122      	str	r1, [sp, #136]	; 0x88
 8008c16:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 8008c1a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008c1c:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8008c20:	0b96      	lsrs	r6, r2, #14
 8008c22:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008c24:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 8008c28:	0c90      	lsrs	r0, r2, #18
 8008c2a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008c2c:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 8008c30:	0c91      	lsrs	r1, r2, #18
 8008c32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008c34:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008c38:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8008c3c:	404e      	eors	r6, r1
 8008c3e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8008c40:	05c9      	lsls	r1, r1, #23
 8008c42:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 8008c46:	ea8c 0c00 	eor.w	ip, ip, r0
 8008c4a:	05d0      	lsls	r0, r2, #23
 8008c4c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008c4e:	404e      	eors	r6, r1
 8008c50:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 8008c54:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8008c56:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008c58:	ea8c 0c00 	eor.w	ip, ip, r0
 8008c5c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8008c5e:	4051      	eors	r1, r2
 8008c60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008c62:	4001      	ands	r1, r0
 8008c64:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8008c66:	ea82 070a 	eor.w	r7, r2, sl
 8008c6a:	4007      	ands	r7, r0
 8008c6c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8008c6e:	4057      	eors	r7, r2
 8008c70:	4041      	eors	r1, r0
 8008c72:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008c74:	6898      	ldr	r0, [r3, #8]
 8008c76:	1810      	adds	r0, r2, r0
 8008c78:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008c7a:	eb42 080e 	adc.w	r8, r2, lr
 8008c7e:	180a      	adds	r2, r1, r0
 8008c80:	922b      	str	r2, [sp, #172]	; 0xac
 8008c82:	9a01      	ldr	r2, [sp, #4]
 8008c84:	eb47 0708 	adc.w	r7, r7, r8
 8008c88:	2a00      	cmp	r2, #0
 8008c8a:	f001 85f5 	beq.w	800a878 <_Transform_Sha512+0x1f18>
 8008c8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c90:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008c92:	ea4f 49d2 	mov.w	r9, r2, lsr #19
 8008c96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c98:	ea49 3942 	orr.w	r9, r9, r2, lsl #13
 8008c9c:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 8008ca0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ca2:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8008ca6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ca8:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8008cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cae:	ea4e 7e52 	orr.w	lr, lr, r2, lsr #29
 8008cb2:	00d0      	lsls	r0, r2, #3
 8008cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cb6:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8008cba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cbc:	ea88 0e0e 	eor.w	lr, r8, lr
 8008cc0:	ea4f 1892 	mov.w	r8, r2, lsr #6
 8008cc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cc6:	ea89 0000 	eor.w	r0, r9, r0
 8008cca:	ea48 6882 	orr.w	r8, r8, r2, lsl #26
 8008cce:	ea80 0008 	eor.w	r0, r0, r8
 8008cd2:	ea8e 1e92 	eor.w	lr, lr, r2, lsr #6
 8008cd6:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008cda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cdc:	eb12 0b08 	adds.w	fp, r2, r8
 8008ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8008ce6:	eb42 0808 	adc.w	r8, r2, r8
 8008cea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cec:	eb10 000b 	adds.w	r0, r0, fp
 8008cf0:	ea4f 0b52 	mov.w	fp, r2, lsr #1
 8008cf4:	9a07      	ldr	r2, [sp, #28]
 8008cf6:	eb4e 0e08 	adc.w	lr, lr, r8
 8008cfa:	ea4b 7bc2 	orr.w	fp, fp, r2, lsl #31
 8008cfe:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8008d02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d04:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 8008d08:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8008d0c:	9a07      	ldr	r2, [sp, #28]
 8008d0e:	ea49 6902 	orr.w	r9, r9, r2, lsl #24
 8008d12:	0a12      	lsrs	r2, r2, #8
 8008d14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d18:	ea88 0802 	eor.w	r8, r8, r2
 8008d1c:	9a07      	ldr	r2, [sp, #28]
 8008d1e:	ea8b 0909 	eor.w	r9, fp, r9
 8008d22:	ea4f 1bd1 	mov.w	fp, r1, lsr #7
 8008d26:	ea4b 6b42 	orr.w	fp, fp, r2, lsl #25
 8008d2a:	ea89 090b 	eor.w	r9, r9, fp
 8008d2e:	ea88 18d2 	eor.w	r8, r8, r2, lsr #7
 8008d32:	eb10 0209 	adds.w	r2, r0, r9
 8008d36:	9219      	str	r2, [sp, #100]	; 0x64
 8008d38:	eb4e 0208 	adc.w	r2, lr, r8
 8008d3c:	e002      	b.n	8008d44 <_Transform_Sha512+0x3e4>
 8008d3e:	bf00      	nop
 8008d40:	08017940 	.word	0x08017940
 8008d44:	9209      	str	r2, [sp, #36]	; 0x24
 8008d46:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008d48:	eb1c 0102 	adds.w	r1, ip, r2
 8008d4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d4e:	eb46 0607 	adc.w	r6, r6, r7
 8008d52:	1889      	adds	r1, r1, r2
 8008d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d56:	eb42 0606 	adc.w	r6, r2, r6
 8008d5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008d5c:	188a      	adds	r2, r1, r2
 8008d5e:	922b      	str	r2, [sp, #172]	; 0xac
 8008d60:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d62:	eb46 0202 	adc.w	r2, r6, r2
 8008d66:	922c      	str	r2, [sp, #176]	; 0xb0
 8008d68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d6a:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 8008d6e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008d70:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8008d74:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 8008d78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d7a:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 8008d7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008d80:	0790      	lsls	r0, r2, #30
 8008d82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d84:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 8008d88:	0797      	lsls	r7, r2, #30
 8008d8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008d8c:	ea8e 0e00 	eor.w	lr, lr, r0
 8008d90:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 8008d94:	0650      	lsls	r0, r2, #25
 8008d96:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008d98:	ea8c 0c07 	eor.w	ip, ip, r7
 8008d9c:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 8008da0:	0657      	lsls	r7, r2, #25
 8008da2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008da4:	ea8e 0e00 	eor.w	lr, lr, r0
 8008da8:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 8008dac:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8008dae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008db0:	ea8c 0c07 	eor.w	ip, ip, r7
 8008db4:	ea42 0700 	orr.w	r7, r2, r0
 8008db8:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 8008dbc:	ea42 0800 	orr.w	r8, r2, r0
 8008dc0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008dc2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8008dc4:	4017      	ands	r7, r2
 8008dc6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dc8:	ea08 0802 	and.w	r8, r8, r2
 8008dcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008dce:	4010      	ands	r0, r2
 8008dd0:	e9dd 9228 	ldrd	r9, r2, [sp, #160]	; 0xa0
 8008dd4:	4307      	orrs	r7, r0
 8008dd6:	ea02 0909 	and.w	r9, r2, r9
 8008dda:	eb1c 0707 	adds.w	r7, ip, r7
 8008dde:	ea48 0909 	orr.w	r9, r8, r9
 8008de2:	eb4e 0909 	adc.w	r9, lr, r9
 8008de6:	187a      	adds	r2, r7, r1
 8008de8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008dea:	eb46 0209 	adc.w	r2, r6, r9
 8008dee:	9224      	str	r2, [sp, #144]	; 0x90
 8008df0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008df2:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 8008df6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008df8:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8008dfc:	0b96      	lsrs	r6, r2, #14
 8008dfe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008e00:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 8008e04:	0c90      	lsrs	r0, r2, #18
 8008e06:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008e08:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 8008e0c:	0c91      	lsrs	r1, r2, #18
 8008e0e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008e10:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8008e14:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8008e18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008e1a:	404e      	eors	r6, r1
 8008e1c:	05d1      	lsls	r1, r2, #23
 8008e1e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008e20:	ea8c 0c00 	eor.w	ip, ip, r0
 8008e24:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 8008e28:	05d0      	lsls	r0, r2, #23
 8008e2a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008e2c:	404e      	eors	r6, r1
 8008e2e:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 8008e32:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8008e34:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008e36:	4051      	eors	r1, r2
 8008e38:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008e3a:	ea82 070a 	eor.w	r7, r2, sl
 8008e3e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008e40:	4011      	ands	r1, r2
 8008e42:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008e44:	4017      	ands	r7, r2
 8008e46:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8008e48:	ea8c 0c00 	eor.w	ip, ip, r0
 8008e4c:	4051      	eors	r1, r2
 8008e4e:	6918      	ldr	r0, [r3, #16]
 8008e50:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008e52:	1810      	adds	r0, r2, r0
 8008e54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008e56:	eb42 0e0e 	adc.w	lr, r2, lr
 8008e5a:	9a01      	ldr	r2, [sp, #4]
 8008e5c:	ea87 070a 	eor.w	r7, r7, sl
 8008e60:	1809      	adds	r1, r1, r0
 8008e62:	eb47 070e 	adc.w	r7, r7, lr
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	f001 850b 	beq.w	800a882 <_Transform_Sha512+0x1f22>
 8008e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e6e:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8008e72:	9a02      	ldr	r2, [sp, #8]
 8008e74:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 8008e78:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8008e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e7e:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 8008e82:	0a10      	lsrs	r0, r2, #8
 8008e84:	9a02      	ldr	r2, [sp, #8]
 8008e86:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8008e8a:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8008e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e90:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8008e94:	ea88 0e0e 	eor.w	lr, r8, lr
 8008e98:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 8008e9c:	9a02      	ldr	r2, [sp, #8]
 8008e9e:	ea89 0000 	eor.w	r0, r9, r0
 8008ea2:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8008ea6:	ea80 0008 	eor.w	r0, r0, r8
 8008eaa:	ea8e 1ed2 	eor.w	lr, lr, r2, lsr #7
 8008eae:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eb4:	eb12 0b08 	adds.w	fp, r2, r8
 8008eb8:	9a07      	ldr	r2, [sp, #28]
 8008eba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8008ebe:	eb42 0808 	adc.w	r8, r2, r8
 8008ec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ec4:	eb10 000b 	adds.w	r0, r0, fp
 8008ec8:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 8008ecc:	9a08      	ldr	r2, [sp, #32]
 8008ece:	eb4e 0e08 	adc.w	lr, lr, r8
 8008ed2:	ea4b 3b42 	orr.w	fp, fp, r2, lsl #13
 8008ed6:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 8008eda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008edc:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8008ee0:	9a08      	ldr	r2, [sp, #32]
 8008ee2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8008ee6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ee8:	ea49 7252 	orr.w	r2, r9, r2, lsr #29
 8008eec:	9207      	str	r2, [sp, #28]
 8008eee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ef0:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8008ef4:	9a08      	ldr	r2, [sp, #32]
 8008ef6:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8008efa:	9a07      	ldr	r2, [sp, #28]
 8008efc:	ea88 0802 	eor.w	r8, r8, r2
 8008f00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f02:	ea8b 0909 	eor.w	r9, fp, r9
 8008f06:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 8008f0a:	9a08      	ldr	r2, [sp, #32]
 8008f0c:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 8008f10:	ea89 090b 	eor.w	r9, r9, fp
 8008f14:	ea88 1892 	eor.w	r8, r8, r2, lsr #6
 8008f18:	eb10 0209 	adds.w	r2, r0, r9
 8008f1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f1e:	eb4e 0208 	adc.w	r2, lr, r8
 8008f22:	9207      	str	r2, [sp, #28]
 8008f24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f26:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8008f2a:	eb1c 0101 	adds.w	r1, ip, r1
 8008f2e:	eb46 0607 	adc.w	r6, r6, r7
 8008f32:	1889      	adds	r1, r1, r2
 8008f34:	9a07      	ldr	r2, [sp, #28]
 8008f36:	eb42 0606 	adc.w	r6, r2, r6
 8008f3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008f3c:	188a      	adds	r2, r1, r2
 8008f3e:	922d      	str	r2, [sp, #180]	; 0xb4
 8008f40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f42:	eb46 0202 	adc.w	r2, r6, r2
 8008f46:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f48:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008f4a:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 8008f4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f50:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8008f54:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 8008f58:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008f5a:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 8008f5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f60:	0790      	lsls	r0, r2, #30
 8008f62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008f64:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 8008f68:	0797      	lsls	r7, r2, #30
 8008f6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f6c:	ea8e 0e00 	eor.w	lr, lr, r0
 8008f70:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 8008f74:	0650      	lsls	r0, r2, #25
 8008f76:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008f78:	ea8c 0c07 	eor.w	ip, ip, r7
 8008f7c:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 8008f80:	0657      	lsls	r7, r2, #25
 8008f82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f84:	ea8e 0e00 	eor.w	lr, lr, r0
 8008f88:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 8008f8c:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8008f90:	ea8c 0c07 	eor.w	ip, ip, r7
 8008f94:	ea42 0700 	orr.w	r7, r2, r0
 8008f98:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008f9a:	9824      	ldr	r0, [sp, #144]	; 0x90
 8008f9c:	ea42 0800 	orr.w	r8, r2, r0
 8008fa0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008fa2:	4017      	ands	r7, r2
 8008fa4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008fa6:	ea08 0802 	and.w	r8, r8, r2
 8008faa:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8008fae:	4010      	ands	r0, r2
 8008fb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008fb2:	4338      	orrs	r0, r7
 8008fb4:	ea02 0909 	and.w	r9, r2, r9
 8008fb8:	eb1c 0000 	adds.w	r0, ip, r0
 8008fbc:	ea48 0909 	orr.w	r9, r8, r9
 8008fc0:	eb4e 0909 	adc.w	r9, lr, r9
 8008fc4:	1842      	adds	r2, r0, r1
 8008fc6:	9225      	str	r2, [sp, #148]	; 0x94
 8008fc8:	eb46 0209 	adc.w	r2, r6, r9
 8008fcc:	9226      	str	r2, [sp, #152]	; 0x98
 8008fce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008fd0:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 8008fd4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008fd6:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8008fda:	0b96      	lsrs	r6, r2, #14
 8008fdc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008fde:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 8008fe2:	0c90      	lsrs	r0, r2, #18
 8008fe4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008fe6:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 8008fea:	0c91      	lsrs	r1, r2, #18
 8008fec:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008fee:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8008ff2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008ff4:	404e      	eors	r6, r1
 8008ff6:	05d1      	lsls	r1, r2, #23
 8008ff8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008ffa:	ea8c 0c00 	eor.w	ip, ip, r0
 8008ffe:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 8009002:	05d0      	lsls	r0, r2, #23
 8009004:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009006:	404e      	eors	r6, r1
 8009008:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 800900c:	e9dd 212a 	ldrd	r2, r1, [sp, #168]	; 0xa8
 8009010:	ea8c 0c00 	eor.w	ip, ip, r0
 8009014:	4051      	eors	r1, r2
 8009016:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8009018:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800901a:	ea82 0700 	eor.w	r7, r2, r0
 800901e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009020:	6998      	ldr	r0, [r3, #24]
 8009022:	4011      	ands	r1, r2
 8009024:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009026:	4017      	ands	r7, r2
 8009028:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800902a:	4051      	eors	r1, r2
 800902c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800902e:	4057      	eors	r7, r2
 8009030:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009032:	1810      	adds	r0, r2, r0
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	eb4a 0e02 	adc.w	lr, sl, r2
 800903a:	9a01      	ldr	r2, [sp, #4]
 800903c:	1809      	adds	r1, r1, r0
 800903e:	eb47 070e 	adc.w	r7, r7, lr
 8009042:	2a00      	cmp	r2, #0
 8009044:	f001 8422 	beq.w	800a88c <_Transform_Sha512+0x1f2c>
 8009048:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800904a:	ea4f 0952 	mov.w	r9, r2, lsr #1
 800904e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009050:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 8009054:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8009058:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800905a:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 800905e:	0a10      	lsrs	r0, r2, #8
 8009060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009062:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8009066:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800906a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800906c:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8009070:	ea88 0e0e 	eor.w	lr, r8, lr
 8009074:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 8009078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800907a:	ea89 0000 	eor.w	r0, r9, r0
 800907e:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8009082:	ea80 0008 	eor.w	r0, r0, r8
 8009086:	ea8e 1ed2 	eor.w	lr, lr, r2, lsr #7
 800908a:	e9dd 2812 	ldrd	r2, r8, [sp, #72]	; 0x48
 800908e:	eb12 0b08 	adds.w	fp, r2, r8
 8009092:	e9dd 2802 	ldrd	r2, r8, [sp, #8]
 8009096:	eb42 0808 	adc.w	r8, r2, r8
 800909a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800909c:	eb10 000b 	adds.w	r0, r0, fp
 80090a0:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 80090a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a6:	eb4e 0e08 	adc.w	lr, lr, r8
 80090aa:	ea4b 3b42 	orr.w	fp, fp, r2, lsl #13
 80090ae:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 80090b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090b4:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 80090b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ba:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 80090be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090c0:	ea4a 7a52 	orr.w	sl, sl, r2, lsr #29
 80090c4:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80090c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ca:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80090ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090d0:	ea8b 0909 	eor.w	r9, fp, r9
 80090d4:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 80090d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090da:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 80090de:	ea88 080a 	eor.w	r8, r8, sl
 80090e2:	ea89 090b 	eor.w	r9, r9, fp
 80090e6:	ea88 1892 	eor.w	r8, r8, r2, lsr #6
 80090ea:	eb10 0209 	adds.w	r2, r0, r9
 80090ee:	9212      	str	r2, [sp, #72]	; 0x48
 80090f0:	eb4e 0208 	adc.w	r2, lr, r8
 80090f4:	9202      	str	r2, [sp, #8]
 80090f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090f8:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 80090fc:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009100:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8009104:	eb1c 0101 	adds.w	r1, ip, r1
 8009108:	eb46 0607 	adc.w	r6, r6, r7
 800910c:	1889      	adds	r1, r1, r2
 800910e:	9a02      	ldr	r2, [sp, #8]
 8009110:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009112:	eb42 0606 	adc.w	r6, r2, r6
 8009116:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8009118:	188a      	adds	r2, r1, r2
 800911a:	922f      	str	r2, [sp, #188]	; 0xbc
 800911c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800911e:	eb46 0202 	adc.w	r2, r6, r2
 8009122:	9231      	str	r2, [sp, #196]	; 0xc4
 8009124:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009126:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 800912a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800912c:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8009130:	0f10      	lsrs	r0, r2, #28
 8009132:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009134:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800913a:	0792      	lsls	r2, r2, #30
 800913c:	ea42 0297 	orr.w	r2, r2, r7, lsr #2
 8009140:	07bf      	lsls	r7, r7, #30
 8009142:	ea47 079e 	orr.w	r7, r7, lr, lsr #2
 8009146:	ea8c 0c07 	eor.w	ip, ip, r7
 800914a:	4050      	eors	r0, r2
 800914c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800914e:	4672      	mov	r2, lr
 8009150:	0652      	lsls	r2, r2, #25
 8009152:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 8009156:	067f      	lsls	r7, r7, #25
 8009158:	ea47 17de 	orr.w	r7, r7, lr, lsr #7
 800915c:	ea8c 0c07 	eor.w	ip, ip, r7
 8009160:	4050      	eors	r0, r2
 8009162:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009164:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009166:	4317      	orrs	r7, r2
 8009168:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800916a:	ea42 0e0e 	orr.w	lr, r2, lr
 800916e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009170:	4017      	ands	r7, r2
 8009172:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009174:	ea0e 0e02 	and.w	lr, lr, r2
 8009178:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800917a:	ea02 0208 	and.w	r2, r2, r8
 800917e:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8009182:	433a      	orrs	r2, r7
 8009184:	ea08 0809 	and.w	r8, r8, r9
 8009188:	eb1c 0202 	adds.w	r2, ip, r2
 800918c:	ea4e 0808 	orr.w	r8, lr, r8
 8009190:	eb40 0808 	adc.w	r8, r0, r8
 8009194:	eb12 0b01 	adds.w	fp, r2, r1
 8009198:	eb46 0208 	adc.w	r2, r6, r8
 800919c:	9227      	str	r2, [sp, #156]	; 0x9c
 800919e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80091a0:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 80091a2:	0b97      	lsrs	r7, r2, #14
 80091a4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80091a6:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 80091aa:	0b90      	lsrs	r0, r2, #14
 80091ac:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80091ae:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 80091b2:	0c91      	lsrs	r1, r2, #18
 80091b4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80091b6:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 80091ba:	0c92      	lsrs	r2, r2, #18
 80091bc:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
        R( 4); R( 5); R( 6); R( 7);
 80091c0:	4050      	eors	r0, r2
 80091c2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80091c4:	05d2      	lsls	r2, r2, #23
 80091c6:	404f      	eors	r7, r1
 80091c8:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 80091cc:	05f1      	lsls	r1, r6, #23
 80091ce:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80091d0:	4042      	eors	r2, r0
 80091d2:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 80091d6:	404f      	eors	r7, r1
 80091d8:	9228      	str	r2, [sp, #160]	; 0xa0
 80091da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80091dc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80091de:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80091e0:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 80091e4:	404a      	eors	r2, r1
 80091e6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80091e8:	ea81 0600 	eor.w	r6, r1, r0
 80091ec:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80091ee:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80091f0:	400a      	ands	r2, r1
 80091f2:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80091f4:	400e      	ands	r6, r1
 80091f6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80091f8:	404a      	eors	r2, r1
 80091fa:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80091fc:	404e      	eors	r6, r1
 80091fe:	6a19      	ldr	r1, [r3, #32]
 8009200:	1841      	adds	r1, r0, r1
 8009202:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8009204:	eb40 0c0c 	adc.w	ip, r0, ip
 8009208:	1852      	adds	r2, r2, r1
 800920a:	9901      	ldr	r1, [sp, #4]
 800920c:	eb46 060c 	adc.w	r6, r6, ip
 8009210:	2900      	cmp	r1, #0
 8009212:	f001 8340 	beq.w	800a896 <_Transform_Sha512+0x1f36>
 8009216:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009218:	9804      	ldr	r0, [sp, #16]
 800921a:	ea4f 0851 	mov.w	r8, r1, lsr #1
 800921e:	9904      	ldr	r1, [sp, #16]
 8009220:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 8009224:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8009228:	9914      	ldr	r1, [sp, #80]	; 0x50
 800922a:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 800922e:	0a09      	lsrs	r1, r1, #8
 8009230:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8009234:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8009238:	9814      	ldr	r0, [sp, #80]	; 0x50
 800923a:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800923e:	ea8e 0c0c 	eor.w	ip, lr, ip
 8009242:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 8009246:	9804      	ldr	r0, [sp, #16]
 8009248:	ea88 0101 	eor.w	r1, r8, r1
 800924c:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 8009250:	ea81 010e 	eor.w	r1, r1, lr
 8009254:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 8009258:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 800925c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800925e:	eb10 0a0e 	adds.w	sl, r0, lr
 8009262:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009264:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8009268:	eb40 0e0e 	adc.w	lr, r0, lr
 800926c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800926e:	eb11 010a 	adds.w	r1, r1, sl
 8009272:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 8009276:	9807      	ldr	r0, [sp, #28]
 8009278:	eb4c 0c0e 	adc.w	ip, ip, lr
 800927c:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 8009280:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 8009284:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009286:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 800928a:	9807      	ldr	r0, [sp, #28]
 800928c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8009290:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009292:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8009296:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800929a:	9807      	ldr	r0, [sp, #28]
 800929c:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 80092a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80092a2:	ea8a 0808 	eor.w	r8, sl, r8
 80092a6:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 80092aa:	9807      	ldr	r0, [sp, #28]
 80092ac:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 80092b0:	ea8e 0e09 	eor.w	lr, lr, r9
 80092b4:	ea88 080a 	eor.w	r8, r8, sl
 80092b8:	eb11 0108 	adds.w	r1, r1, r8
 80092bc:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 80092c0:	911a      	str	r1, [sp, #104]	; 0x68
 80092c2:	eb4c 010e 	adc.w	r1, ip, lr
 80092c6:	910a      	str	r1, [sp, #40]	; 0x28
 80092c8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80092ca:	18ba      	adds	r2, r7, r2
 80092cc:	eb41 0006 	adc.w	r0, r1, r6
 80092d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092d2:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 80092d4:	1852      	adds	r2, r2, r1
 80092d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092d8:	eb41 0000 	adc.w	r0, r1, r0
 80092dc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80092de:	1889      	adds	r1, r1, r2
 80092e0:	912a      	str	r1, [sp, #168]	; 0xa8
 80092e2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80092e4:	eb41 0100 	adc.w	r1, r1, r0
 80092e8:	9129      	str	r1, [sp, #164]	; 0xa4
 80092ea:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80092ec:	ea4f 7e1b 	mov.w	lr, fp, lsr #28
 80092f0:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 80092f4:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 80092f8:	0789      	lsls	r1, r1, #30
 80092fa:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80092fe:	ea4c 1c0b 	orr.w	ip, ip, fp, lsl #4
 8009302:	ea8c 0c01 	eor.w	ip, ip, r1
 8009306:	ea4f 768b 	mov.w	r6, fp, lsl #30
 800930a:	0679      	lsls	r1, r7, #25
 800930c:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 8009310:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 8009314:	ea8c 0c01 	eor.w	ip, ip, r1
 8009318:	ea8e 0e06 	eor.w	lr, lr, r6
 800931c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800931e:	ea4f 664b 	mov.w	r6, fp, lsl #25
 8009322:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 8009326:	ea8e 0e06 	eor.w	lr, lr, r6
 800932a:	ea41 060b 	orr.w	r6, r1, fp
 800932e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009330:	430f      	orrs	r7, r1
 8009332:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009334:	400e      	ands	r6, r1
 8009336:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009338:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 800933c:	400f      	ands	r7, r1
 800933e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009340:	ea01 010b 	and.w	r1, r1, fp
 8009344:	4331      	orrs	r1, r6
 8009346:	ea08 0809 	and.w	r8, r8, r9
 800934a:	eb1e 0101 	adds.w	r1, lr, r1
 800934e:	ea47 0808 	orr.w	r8, r7, r8
 8009352:	eb4c 0808 	adc.w	r8, ip, r8
 8009356:	188a      	adds	r2, r1, r2
 8009358:	9222      	str	r2, [sp, #136]	; 0x88
 800935a:	eb40 0208 	adc.w	r2, r0, r8
 800935e:	9228      	str	r2, [sp, #160]	; 0xa0
 8009360:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009362:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8009364:	0b97      	lsrs	r7, r2, #14
 8009366:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009368:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 800936c:	0b90      	lsrs	r0, r2, #14
 800936e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009370:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 8009374:	0c91      	lsrs	r1, r2, #18
 8009376:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009378:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800937c:	0c92      	lsrs	r2, r2, #18
 800937e:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 8009382:	4050      	eors	r0, r2
 8009384:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009386:	05d2      	lsls	r2, r2, #23
 8009388:	404f      	eors	r7, r1
 800938a:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 800938e:	05f1      	lsls	r1, r6, #23
 8009390:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8009392:	4042      	eors	r2, r0
 8009394:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8009398:	9230      	str	r2, [sp, #192]	; 0xc0
 800939a:	404f      	eors	r7, r1
 800939c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800939e:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80093a0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80093a2:	404a      	eors	r2, r1
 80093a4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80093a6:	ea81 0600 	eor.w	r6, r1, r0
 80093aa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80093ac:	400a      	ands	r2, r1
 80093ae:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80093b0:	982b      	ldr	r0, [sp, #172]	; 0xac
 80093b2:	f8d3 c02c 	ldr.w	ip, [r3, #44]	; 0x2c
 80093b6:	400e      	ands	r6, r1
 80093b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80093ba:	404a      	eors	r2, r1
 80093bc:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80093be:	404e      	eors	r6, r1
 80093c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80093c2:	1841      	adds	r1, r0, r1
 80093c4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80093c6:	eb40 0c0c 	adc.w	ip, r0, ip
 80093ca:	1852      	adds	r2, r2, r1
 80093cc:	9901      	ldr	r1, [sp, #4]
 80093ce:	eb46 060c 	adc.w	r6, r6, ip
 80093d2:	2900      	cmp	r1, #0
 80093d4:	f001 8264 	beq.w	800a8a0 <_Transform_Sha512+0x1f40>
 80093d8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80093da:	9805      	ldr	r0, [sp, #20]
 80093dc:	ea4f 0851 	mov.w	r8, r1, lsr #1
 80093e0:	9905      	ldr	r1, [sp, #20]
 80093e2:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 80093e6:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80093ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 80093ec:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 80093f0:	0a09      	lsrs	r1, r1, #8
 80093f2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80093f6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80093fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80093fc:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 8009400:	ea8e 0c0c 	eor.w	ip, lr, ip
 8009404:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 8009408:	9805      	ldr	r0, [sp, #20]
 800940a:	ea88 0101 	eor.w	r1, r8, r1
 800940e:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 8009412:	ea81 010e 	eor.w	r1, r1, lr
 8009416:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 800941a:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 800941e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009420:	eb10 0a0e 	adds.w	sl, r0, lr
 8009424:	9804      	ldr	r0, [sp, #16]
 8009426:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800942a:	eb40 0e0e 	adc.w	lr, r0, lr
 800942e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009430:	eb11 010a 	adds.w	r1, r1, sl
 8009434:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 8009438:	9802      	ldr	r0, [sp, #8]
 800943a:	eb4c 0c0e 	adc.w	ip, ip, lr
 800943e:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 8009442:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 8009446:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009448:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 800944c:	9802      	ldr	r0, [sp, #8]
 800944e:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8009452:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009454:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8009458:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800945c:	9802      	ldr	r0, [sp, #8]
 800945e:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 8009462:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009464:	ea8a 0808 	eor.w	r8, sl, r8
 8009468:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 800946c:	9802      	ldr	r0, [sp, #8]
 800946e:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 8009472:	ea8e 0e09 	eor.w	lr, lr, r9
 8009476:	ea88 080a 	eor.w	r8, r8, sl
 800947a:	eb11 0108 	adds.w	r1, r1, r8
 800947e:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 8009482:	9114      	str	r1, [sp, #80]	; 0x50
 8009484:	eb4c 010e 	adc.w	r1, ip, lr
 8009488:	9104      	str	r1, [sp, #16]
 800948a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800948c:	18ba      	adds	r2, r7, r2
 800948e:	eb41 0006 	adc.w	r0, r1, r6
 8009492:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009494:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009496:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8009498:	1852      	adds	r2, r2, r1
 800949a:	9904      	ldr	r1, [sp, #16]
 800949c:	eb41 0000 	adc.w	r0, r1, r0
 80094a0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80094a2:	1889      	adds	r1, r1, r2
 80094a4:	912b      	str	r1, [sp, #172]	; 0xac
 80094a6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80094a8:	eb41 0100 	adc.w	r1, r1, r0
 80094ac:	912c      	str	r1, [sp, #176]	; 0xb0
 80094ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 80094b0:	ea4f 7e11 	mov.w	lr, r1, lsr #28
 80094b4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80094b6:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 80094ba:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 80094be:	9922      	ldr	r1, [sp, #136]	; 0x88
 80094c0:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
 80094c4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80094c6:	0789      	lsls	r1, r1, #30
 80094c8:	ea41 0196 	orr.w	r1, r1, r6, lsr #2
 80094cc:	07b6      	lsls	r6, r6, #30
 80094ce:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 80094d2:	ea8e 0e06 	eor.w	lr, lr, r6
 80094d6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80094d8:	ea8c 0c01 	eor.w	ip, ip, r1
 80094dc:	0679      	lsls	r1, r7, #25
 80094de:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 80094e2:	ea8c 0c01 	eor.w	ip, ip, r1
 80094e6:	0676      	lsls	r6, r6, #25
 80094e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80094ea:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 80094ee:	ea8e 0e06 	eor.w	lr, lr, r6
 80094f2:	ea4b 0601 	orr.w	r6, fp, r1
 80094f6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80094f8:	430f      	orrs	r7, r1
 80094fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 80094fc:	400e      	ands	r6, r1
 80094fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009500:	e9dd 8927 	ldrd	r8, r9, [sp, #156]	; 0x9c
 8009504:	400f      	ands	r7, r1
 8009506:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009508:	ea0b 0101 	and.w	r1, fp, r1
 800950c:	4331      	orrs	r1, r6
 800950e:	ea08 0809 	and.w	r8, r8, r9
 8009512:	eb1e 0101 	adds.w	r1, lr, r1
 8009516:	ea47 0808 	orr.w	r8, r7, r8
 800951a:	eb4c 0808 	adc.w	r8, ip, r8
 800951e:	188a      	adds	r2, r1, r2
 8009520:	9223      	str	r2, [sp, #140]	; 0x8c
 8009522:	eb40 0208 	adc.w	r2, r0, r8
 8009526:	9224      	str	r2, [sp, #144]	; 0x90
 8009528:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800952a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800952c:	0b97      	lsrs	r7, r2, #14
 800952e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009530:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 8009534:	0b90      	lsrs	r0, r2, #14
 8009536:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009538:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800953c:	0c91      	lsrs	r1, r2, #18
 800953e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009540:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8009544:	0c92      	lsrs	r2, r2, #18
 8009546:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 800954a:	4050      	eors	r0, r2
 800954c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800954e:	05d2      	lsls	r2, r2, #23
 8009550:	404f      	eors	r7, r1
 8009552:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8009556:	05f1      	lsls	r1, r6, #23
 8009558:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800955a:	4042      	eors	r2, r0
 800955c:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8009560:	404f      	eors	r7, r1
 8009562:	9230      	str	r2, [sp, #192]	; 0xc0
 8009564:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009566:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009568:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800956a:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
 800956e:	404a      	eors	r2, r1
 8009570:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8009572:	ea81 0600 	eor.w	r6, r1, r0
 8009576:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009578:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800957a:	400a      	ands	r2, r1
 800957c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800957e:	400e      	ands	r6, r1
 8009580:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8009582:	404a      	eors	r2, r1
 8009584:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8009586:	404e      	eors	r6, r1
 8009588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800958a:	1841      	adds	r1, r0, r1
 800958c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800958e:	eb40 0c0c 	adc.w	ip, r0, ip
 8009592:	1852      	adds	r2, r2, r1
 8009594:	9901      	ldr	r1, [sp, #4]
 8009596:	eb46 060c 	adc.w	r6, r6, ip
 800959a:	2900      	cmp	r1, #0
 800959c:	f001 8185 	beq.w	800a8aa <_Transform_Sha512+0x1f4a>
 80095a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095a2:	9806      	ldr	r0, [sp, #24]
 80095a4:	ea4f 0851 	mov.w	r8, r1, lsr #1
 80095a8:	9906      	ldr	r1, [sp, #24]
 80095aa:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 80095ae:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80095b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095b4:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 80095b8:	0a09      	lsrs	r1, r1, #8
 80095ba:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80095be:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80095c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80095c4:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 80095c8:	ea8e 0c0c 	eor.w	ip, lr, ip
 80095cc:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 80095d0:	9806      	ldr	r0, [sp, #24]
 80095d2:	ea88 0101 	eor.w	r1, r8, r1
 80095d6:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 80095da:	ea81 010e 	eor.w	r1, r1, lr
 80095de:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 80095e2:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 80095e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80095e8:	eb10 0a0e 	adds.w	sl, r0, lr
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80095f2:	eb40 0e0e 	adc.w	lr, r0, lr
 80095f6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80095f8:	eb11 010a 	adds.w	r1, r1, sl
 80095fc:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 8009600:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009602:	eb4c 0c0e 	adc.w	ip, ip, lr
 8009606:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 800960a:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 800960e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009610:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 8009614:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009616:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 800961a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800961c:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8009620:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8009624:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009626:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 800962a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800962c:	ea8a 0808 	eor.w	r8, sl, r8
 8009630:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 8009634:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009636:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800963a:	ea8e 0e09 	eor.w	lr, lr, r9
 800963e:	ea88 080a 	eor.w	r8, r8, sl
 8009642:	eb11 0108 	adds.w	r1, r1, r8
 8009646:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 800964a:	9115      	str	r1, [sp, #84]	; 0x54
 800964c:	eb4c 010e 	adc.w	r1, ip, lr
 8009650:	9105      	str	r1, [sp, #20]
 8009652:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8009654:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8009658:	18ba      	adds	r2, r7, r2
 800965a:	eb41 0006 	adc.w	r0, r1, r6
 800965e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009660:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8009662:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8009664:	1852      	adds	r2, r2, r1
 8009666:	9905      	ldr	r1, [sp, #20]
 8009668:	eb41 0000 	adc.w	r0, r1, r0
 800966c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800966e:	1889      	adds	r1, r1, r2
 8009670:	912d      	str	r1, [sp, #180]	; 0xb4
 8009672:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009674:	eb41 0100 	adc.w	r1, r1, r0
 8009678:	912e      	str	r1, [sp, #184]	; 0xb8
 800967a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800967c:	ea4f 7e11 	mov.w	lr, r1, lsr #28
 8009680:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009682:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 8009686:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 800968a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800968c:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
 8009690:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009692:	0789      	lsls	r1, r1, #30
 8009694:	ea41 0196 	orr.w	r1, r1, r6, lsr #2
 8009698:	07b6      	lsls	r6, r6, #30
 800969a:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 800969e:	ea8e 0e06 	eor.w	lr, lr, r6
 80096a2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80096a4:	ea8c 0c01 	eor.w	ip, ip, r1
 80096a8:	0679      	lsls	r1, r7, #25
 80096aa:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 80096ae:	0676      	lsls	r6, r6, #25
 80096b0:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 80096b4:	ea8c 0c01 	eor.w	ip, ip, r1
 80096b8:	ea8e 0e06 	eor.w	lr, lr, r6
 80096bc:	e9dd 1622 	ldrd	r1, r6, [sp, #136]	; 0x88
 80096c0:	430e      	orrs	r6, r1
 80096c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80096c4:	430f      	orrs	r7, r1
 80096c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80096c8:	400f      	ands	r7, r1
 80096ca:	e9dd 1822 	ldrd	r1, r8, [sp, #136]	; 0x88
 80096ce:	ea01 0108 	and.w	r1, r1, r8
 80096d2:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 80096d6:	ea06 060b 	and.w	r6, r6, fp
 80096da:	4331      	orrs	r1, r6
 80096dc:	ea08 0809 	and.w	r8, r8, r9
 80096e0:	eb1e 0101 	adds.w	r1, lr, r1
 80096e4:	ea47 0808 	orr.w	r8, r7, r8
 80096e8:	eb4c 0808 	adc.w	r8, ip, r8
 80096ec:	188a      	adds	r2, r1, r2
 80096ee:	9225      	str	r2, [sp, #148]	; 0x94
 80096f0:	eb40 0208 	adc.w	r2, r0, r8
 80096f4:	9226      	str	r2, [sp, #152]	; 0x98
 80096f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80096f8:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 80096fa:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 80096fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009700:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8009704:	0b90      	lsrs	r0, r2, #14
 8009706:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009708:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800970c:	0c91      	lsrs	r1, r2, #18
 800970e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009710:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8009714:	0c92      	lsrs	r2, r2, #18
 8009716:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 800971a:	4050      	eors	r0, r2
 800971c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800971e:	05d2      	lsls	r2, r2, #23
 8009720:	ea8c 0c01 	eor.w	ip, ip, r1
 8009724:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8009728:	05f1      	lsls	r1, r6, #23
 800972a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800972c:	4042      	eors	r2, r0
 800972e:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8009732:	9230      	str	r2, [sp, #192]	; 0xc0
 8009734:	ea8c 0c01 	eor.w	ip, ip, r1
 8009738:	e9dd 212a 	ldrd	r2, r1, [sp, #168]	; 0xa8
 800973c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800973e:	404a      	eors	r2, r1
 8009740:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8009742:	ea81 0700 	eor.w	r7, r1, r0
 8009746:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8009748:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800974a:	400a      	ands	r2, r1
 800974c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800974e:	404a      	eors	r2, r1
 8009750:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8009752:	4037      	ands	r7, r6
 8009754:	404f      	eors	r7, r1
 8009756:	e9d3 160e 	ldrd	r1, r6, [r3, #56]	; 0x38
 800975a:	1841      	adds	r1, r0, r1
 800975c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800975e:	eb40 0606 	adc.w	r6, r0, r6
 8009762:	1852      	adds	r2, r2, r1
 8009764:	9901      	ldr	r1, [sp, #4]
 8009766:	eb47 0706 	adc.w	r7, r7, r6
 800976a:	2900      	cmp	r1, #0
 800976c:	f001 80a2 	beq.w	800a8b4 <_Transform_Sha512+0x1f54>
 8009770:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009772:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009774:	ea4f 0851 	mov.w	r8, r1, lsr #1
 8009778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800977a:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 800977e:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8009782:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009784:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 8009788:	0a09      	lsrs	r1, r1, #8
 800978a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800978e:	0a06      	lsrs	r6, r0, #8
 8009790:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009792:	ea88 0101 	eor.w	r1, r8, r1
 8009796:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 800979a:	ea4f 18d0 	mov.w	r8, r0, lsr #7
 800979e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80097a0:	ea8e 0606 	eor.w	r6, lr, r6
 80097a4:	ea48 6840 	orr.w	r8, r8, r0, lsl #25
 80097a8:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
 80097ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80097ae:	ea81 0108 	eor.w	r1, r1, r8
 80097b2:	1809      	adds	r1, r1, r0
 80097b4:	9806      	ldr	r0, [sp, #24]
 80097b6:	eb40 0606 	adc.w	r6, r0, r6
 80097ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80097bc:	1809      	adds	r1, r1, r0
 80097be:	9808      	ldr	r0, [sp, #32]
 80097c0:	eb40 0606 	adc.w	r6, r0, r6
 80097c4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097c6:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 80097ca:	9804      	ldr	r0, [sp, #16]
 80097cc:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 80097d0:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 80097d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097d6:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 80097da:	9804      	ldr	r0, [sp, #16]
 80097dc:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 80097e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097e2:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 80097e6:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 80097ea:	9804      	ldr	r0, [sp, #16]
 80097ec:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 80097f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097f2:	ea8a 0808 	eor.w	r8, sl, r8
 80097f6:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 80097fa:	9804      	ldr	r0, [sp, #16]
 80097fc:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 8009800:	ea8e 0e09 	eor.w	lr, lr, r9
 8009804:	ea88 080a 	eor.w	r8, r8, sl
 8009808:	eb11 0108 	adds.w	r1, r1, r8
 800980c:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 8009810:	9116      	str	r1, [sp, #88]	; 0x58
 8009812:	eb46 010e 	adc.w	r1, r6, lr
 8009816:	9106      	str	r1, [sp, #24]
 8009818:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800981a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800981e:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8009822:	eb1c 0202 	adds.w	r2, ip, r2
 8009826:	eb41 0007 	adc.w	r0, r1, r7
 800982a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800982c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
 8009830:	1852      	adds	r2, r2, r1
 8009832:	9906      	ldr	r1, [sp, #24]
 8009834:	eb41 0000 	adc.w	r0, r1, r0
 8009838:	eb1b 0102 	adds.w	r1, fp, r2
 800983c:	912f      	str	r1, [sp, #188]	; 0xbc
 800983e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009840:	eb41 0100 	adc.w	r1, r1, r0
 8009844:	9130      	str	r1, [sp, #192]	; 0xc0
 8009846:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009848:	078e      	lsls	r6, r1, #30
 800984a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800984c:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 8009850:	ea4f 7e81 	mov.w	lr, r1, lsl #30
 8009854:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009856:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 800985a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800985c:	0f0f      	lsrs	r7, r1, #28
 800985e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009860:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8009864:	0f09      	lsrs	r1, r1, #28
 8009866:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800986a:	404e      	eors	r6, r1
 800986c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800986e:	0649      	lsls	r1, r1, #25
 8009870:	ea41 11dc 	orr.w	r1, r1, ip, lsr #7
 8009874:	ea8e 0e07 	eor.w	lr, lr, r7
 8009878:	4667      	mov	r7, ip
 800987a:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 800987e:	067f      	lsls	r7, r7, #25
 8009880:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 8009884:	404e      	eors	r6, r1
 8009886:	ea8e 0e07 	eor.w	lr, lr, r7
 800988a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800988c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800988e:	430f      	orrs	r7, r1
 8009890:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009892:	ea41 0c0c 	orr.w	ip, r1, ip
 8009896:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009898:	400f      	ands	r7, r1
 800989a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800989c:	ea0c 0c01 	and.w	ip, ip, r1
 80098a0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80098a2:	ea01 0108 	and.w	r1, r1, r8
 80098a6:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80098aa:	4339      	orrs	r1, r7
 80098ac:	ea08 0809 	and.w	r8, r8, r9
 80098b0:	eb1e 0101 	adds.w	r1, lr, r1
 80098b4:	ea4c 0808 	orr.w	r8, ip, r8
 80098b8:	eb46 0808 	adc.w	r8, r6, r8
 80098bc:	eb11 0b02 	adds.w	fp, r1, r2
 80098c0:	eb40 0208 	adc.w	r2, r0, r8
 80098c4:	9227      	str	r2, [sp, #156]	; 0x9c
 80098c6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80098c8:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 80098ca:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 80098ce:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80098d0:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 80098d4:	0b90      	lsrs	r0, r2, #14
 80098d6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80098d8:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 80098dc:	0c91      	lsrs	r1, r2, #18
 80098de:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80098e0:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 80098e4:	0c92      	lsrs	r2, r2, #18
 80098e6:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
        R( 8); R( 9); R(10); R(11);
 80098ea:	4050      	eors	r0, r2
 80098ec:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80098ee:	05d2      	lsls	r2, r2, #23
 80098f0:	ea8c 0c01 	eor.w	ip, ip, r1
 80098f4:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 80098f8:	05f1      	lsls	r1, r6, #23
 80098fa:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 80098fc:	4042      	eors	r2, r0
 80098fe:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8009902:	9231      	str	r2, [sp, #196]	; 0xc4
 8009904:	ea8c 0c01 	eor.w	ip, ip, r1
 8009908:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800990a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800990c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800990e:	404a      	eors	r2, r1
 8009910:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009912:	ea81 0700 	eor.w	r7, r1, r0
 8009916:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8009918:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800991a:	400a      	ands	r2, r1
 800991c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800991e:	404a      	eors	r2, r1
 8009920:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009922:	4037      	ands	r7, r6
 8009924:	404f      	eors	r7, r1
 8009926:	e9d3 1610 	ldrd	r1, r6, [r3, #64]	; 0x40
 800992a:	1841      	adds	r1, r0, r1
 800992c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800992e:	eb40 0606 	adc.w	r6, r0, r6
 8009932:	1852      	adds	r2, r2, r1
 8009934:	9901      	ldr	r1, [sp, #4]
 8009936:	eb47 0706 	adc.w	r7, r7, r6
 800993a:	2900      	cmp	r1, #0
 800993c:	f000 87bf 	beq.w	800a8be <_Transform_Sha512+0x1f5e>
 8009940:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009942:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009944:	ea4f 2811 	mov.w	r8, r1, lsr #8
 8009948:	990c      	ldr	r1, [sp, #48]	; 0x30
 800994a:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 800994e:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8009952:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009954:	ea4e 6e01 	orr.w	lr, lr, r1, lsl #24
 8009958:	0849      	lsrs	r1, r1, #1
 800995a:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800995e:	0846      	lsrs	r6, r0, #1
 8009960:	981c      	ldr	r0, [sp, #112]	; 0x70
 8009962:	ea88 0101 	eor.w	r1, r8, r1
 8009966:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 800996a:	ea4f 18d0 	mov.w	r8, r0, lsr #7
 800996e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009970:	ea8e 0606 	eor.w	r6, lr, r6
 8009974:	ea48 6840 	orr.w	r8, r8, r0, lsl #25
 8009978:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
 800997c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800997e:	ea81 0108 	eor.w	r1, r1, r8
 8009982:	1809      	adds	r1, r1, r0
 8009984:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009986:	eb40 0606 	adc.w	r6, r0, r6
 800998a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800998c:	1809      	adds	r1, r1, r0
 800998e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009990:	eb40 0606 	adc.w	r6, r0, r6
 8009994:	9805      	ldr	r0, [sp, #20]
 8009996:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800999a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800999c:	ea4e 7e50 	orr.w	lr, lr, r0, lsr #29
 80099a0:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 80099aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80099ac:	ea4f 48d0 	mov.w	r8, r0, lsr #19
 80099b0:	9805      	ldr	r0, [sp, #20]
 80099b2:	ea48 3840 	orr.w	r8, r8, r0, lsl #13
 80099b6:	ea4f 49d0 	mov.w	r9, r0, lsr #19
 80099ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80099bc:	ea8a 0808 	eor.w	r8, sl, r8
 80099c0:	ea49 3940 	orr.w	r9, r9, r0, lsl #13
 80099c4:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 80099c8:	9805      	ldr	r0, [sp, #20]
 80099ca:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 80099ce:	ea8e 0e09 	eor.w	lr, lr, r9
 80099d2:	ea88 080a 	eor.w	r8, r8, sl
 80099d6:	eb11 0108 	adds.w	r1, r1, r8
 80099da:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 80099de:	911b      	str	r1, [sp, #108]	; 0x6c
 80099e0:	eb46 010e 	adc.w	r1, r6, lr
 80099e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80099e6:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80099e8:	eb1c 0202 	adds.w	r2, ip, r2
 80099ec:	eb41 0007 	adc.w	r0, r1, r7
 80099f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80099f2:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 80099f6:	1852      	adds	r2, r2, r1
 80099f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099fa:	eb41 0000 	adc.w	r0, r1, r0
 80099fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a00:	1889      	adds	r1, r1, r2
 8009a02:	9129      	str	r1, [sp, #164]	; 0xa4
 8009a04:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8009a06:	eb41 0100 	adc.w	r1, r1, r0
 8009a0a:	912a      	str	r1, [sp, #168]	; 0xa8
 8009a0c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009a0e:	ea4f 7e8b 	mov.w	lr, fp, lsl #30
 8009a12:	ea4f 771b 	mov.w	r7, fp, lsr #28
 8009a16:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8009a1a:	078e      	lsls	r6, r1, #30
 8009a1c:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 8009a20:	0f09      	lsrs	r1, r1, #28
 8009a22:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 8009a26:	ea46 069b 	orr.w	r6, r6, fp, lsr #2
 8009a2a:	404e      	eors	r6, r1
 8009a2c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009a2e:	0649      	lsls	r1, r1, #25
 8009a30:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 8009a34:	404e      	eors	r6, r1
 8009a36:	ea8e 0e07 	eor.w	lr, lr, r7
 8009a3a:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009a3c:	ea4f 674b 	mov.w	r7, fp, lsl #25
 8009a40:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 8009a44:	ea8e 0e07 	eor.w	lr, lr, r7
 8009a48:	ea41 070b 	orr.w	r7, r1, fp
 8009a4c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009a4e:	ea41 0c0c 	orr.w	ip, r1, ip
 8009a52:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009a54:	400f      	ands	r7, r1
 8009a56:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009a58:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 8009a5c:	ea0c 0c01 	and.w	ip, ip, r1
 8009a60:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009a62:	ea01 010b 	and.w	r1, r1, fp
 8009a66:	4339      	orrs	r1, r7
 8009a68:	ea08 0809 	and.w	r8, r8, r9
 8009a6c:	eb1e 0101 	adds.w	r1, lr, r1
 8009a70:	ea4c 0808 	orr.w	r8, ip, r8
 8009a74:	eb46 0808 	adc.w	r8, r6, r8
 8009a78:	188a      	adds	r2, r1, r2
 8009a7a:	9222      	str	r2, [sp, #136]	; 0x88
 8009a7c:	eb40 0208 	adc.w	r2, r0, r8
 8009a80:	9228      	str	r2, [sp, #160]	; 0xa0
 8009a82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009a84:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009a86:	0c97      	lsrs	r7, r2, #18
 8009a88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009a8a:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 8009a8e:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 8009a92:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009a94:	ea4c 3c82 	orr.w	ip, ip, r2, lsl #14
 8009a98:	0b91      	lsrs	r1, r2, #14
 8009a9a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009a9c:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8009aa0:	0b92      	lsrs	r2, r2, #14
 8009aa2:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8009aa6:	ea8c 0c02 	eor.w	ip, ip, r2
 8009aaa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009aac:	05d2      	lsls	r2, r2, #23
 8009aae:	404f      	eors	r7, r1
 8009ab0:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8009ab4:	05c1      	lsls	r1, r0, #23
 8009ab6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8009ab8:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8009abc:	4079      	eors	r1, r7
 8009abe:	9131      	str	r1, [sp, #196]	; 0xc4
 8009ac0:	e9d3 1612 	ldrd	r1, r6, [r3, #72]	; 0x48
 8009ac4:	ea8c 0c02 	eor.w	ip, ip, r2
 8009ac8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009aca:	1851      	adds	r1, r2, r1
 8009acc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009ace:	eb42 0606 	adc.w	r6, r2, r6
 8009ad2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009ad4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8009ad6:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8009ad8:	4050      	eors	r0, r2
 8009ada:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009adc:	407a      	eors	r2, r7
 8009ade:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8009ae0:	4038      	ands	r0, r7
 8009ae2:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8009ae4:	403a      	ands	r2, r7
 8009ae6:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8009ae8:	4078      	eors	r0, r7
 8009aea:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8009aec:	1809      	adds	r1, r1, r0
 8009aee:	ea82 0207 	eor.w	r2, r2, r7
 8009af2:	eb46 0602 	adc.w	r6, r6, r2
 8009af6:	9a01      	ldr	r2, [sp, #4]
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	f000 86e7 	beq.w	800a8cc <_Transform_Sha512+0x1f6c>
 8009afe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b02:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8009b04:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8009b08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b0a:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8009b0e:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8009b12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b14:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8009b18:	0852      	lsrs	r2, r2, #1
 8009b1a:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 8009b1e:	0840      	lsrs	r0, r0, #1
 8009b20:	ea40 70c7 	orr.w	r0, r0, r7, lsl #31
 8009b24:	ea88 0202 	eor.w	r2, r8, r2
 8009b28:	ea4f 18d7 	mov.w	r8, r7, lsr #7
 8009b2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009b2e:	ea8e 0000 	eor.w	r0, lr, r0
 8009b32:	ea48 6847 	orr.w	r8, r8, r7, lsl #25
 8009b36:	ea80 10d7 	eor.w	r0, r0, r7, lsr #7
 8009b3a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009b3c:	ea82 0208 	eor.w	r2, r2, r8
 8009b40:	19d2      	adds	r2, r2, r7
 8009b42:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009b44:	eb47 0000 	adc.w	r0, r7, r0
 8009b48:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8009b4a:	19d2      	adds	r2, r2, r7
 8009b4c:	9f07      	ldr	r7, [sp, #28]
 8009b4e:	eb47 0000 	adc.w	r0, r7, r0
 8009b52:	9f06      	ldr	r7, [sp, #24]
 8009b54:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8009b58:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8009b5a:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 8009b5e:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
 8009b62:	9f06      	ldr	r7, [sp, #24]
 8009b64:	ea4a 7a57 	orr.w	sl, sl, r7, lsr #29
 8009b68:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8009b6a:	ea4f 48d7 	mov.w	r8, r7, lsr #19
 8009b6e:	9f06      	ldr	r7, [sp, #24]
 8009b70:	ea48 3847 	orr.w	r8, r8, r7, lsl #13
 8009b74:	ea4f 49d7 	mov.w	r9, r7, lsr #19
 8009b78:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8009b7a:	ea8a 0808 	eor.w	r8, sl, r8
 8009b7e:	ea49 3947 	orr.w	r9, r9, r7, lsl #13
 8009b82:	ea4f 1a97 	mov.w	sl, r7, lsr #6
 8009b86:	9f06      	ldr	r7, [sp, #24]
 8009b88:	ea4a 6a87 	orr.w	sl, sl, r7, lsl #26
 8009b8c:	ea8e 0e09 	eor.w	lr, lr, r9
 8009b90:	ea88 080a 	eor.w	r8, r8, sl
 8009b94:	eb12 0208 	adds.w	r2, r2, r8
 8009b98:	ea8e 1e97 	eor.w	lr, lr, r7, lsr #6
 8009b9c:	921c      	str	r2, [sp, #112]	; 0x70
 8009b9e:	eb40 020e 	adc.w	r2, r0, lr
 8009ba2:	920c      	str	r2, [sp, #48]	; 0x30
 8009ba4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009ba6:	1889      	adds	r1, r1, r2
 8009ba8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009baa:	eb46 060c 	adc.w	r6, r6, ip
 8009bae:	1889      	adds	r1, r1, r2
 8009bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bb2:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8009bb6:	eb42 0606 	adc.w	r6, r2, r6
 8009bba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009bbc:	1852      	adds	r2, r2, r1
 8009bbe:	922b      	str	r2, [sp, #172]	; 0xac
 8009bc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bc2:	eb42 0206 	adc.w	r2, r2, r6
 8009bc6:	922c      	str	r2, [sp, #176]	; 0xb0
 8009bc8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009bca:	0790      	lsls	r0, r2, #30
 8009bcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009bce:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 8009bd2:	ea4f 7e82 	mov.w	lr, r2, lsl #30
 8009bd6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009bd8:	ea4e 0e92 	orr.w	lr, lr, r2, lsr #2
 8009bdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009bde:	0f17      	lsrs	r7, r2, #28
 8009be0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009be2:	ea47 1702 	orr.w	r7, r7, r2, lsl #4
 8009be6:	0f12      	lsrs	r2, r2, #28
 8009be8:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 8009bec:	4050      	eors	r0, r2
 8009bee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009bf0:	0652      	lsls	r2, r2, #25
 8009bf2:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 8009bf6:	ea8e 0e07 	eor.w	lr, lr, r7
 8009bfa:	4667      	mov	r7, ip
 8009bfc:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8009c00:	4050      	eors	r0, r2
 8009c02:	067f      	lsls	r7, r7, #25
 8009c04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c06:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 8009c0a:	ea8e 0e07 	eor.w	lr, lr, r7
 8009c0e:	ea4b 0c02 	orr.w	ip, fp, r2
 8009c12:	e9dd 2727 	ldrd	r2, r7, [sp, #156]	; 0x9c
 8009c16:	4317      	orrs	r7, r2
 8009c18:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009c1a:	ea0c 0c02 	and.w	ip, ip, r2
 8009c1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c20:	e9dd 8927 	ldrd	r8, r9, [sp, #156]	; 0x9c
 8009c24:	4017      	ands	r7, r2
 8009c26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c28:	ea0b 0202 	and.w	r2, fp, r2
 8009c2c:	ea08 0809 	and.w	r8, r8, r9
 8009c30:	ea4c 0202 	orr.w	r2, ip, r2
 8009c34:	ea47 0808 	orr.w	r8, r7, r8
 8009c38:	eb1e 0202 	adds.w	r2, lr, r2
 8009c3c:	eb40 0808 	adc.w	r8, r0, r8
 8009c40:	1852      	adds	r2, r2, r1
 8009c42:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c44:	eb46 0208 	adc.w	r2, r6, r8
 8009c48:	9224      	str	r2, [sp, #144]	; 0x90
 8009c4a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009c4c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009c4e:	0c97      	lsrs	r7, r2, #18
 8009c50:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009c52:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 8009c56:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 8009c5a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009c5c:	ea4c 3c82 	orr.w	ip, ip, r2, lsl #14
 8009c60:	0b91      	lsrs	r1, r2, #14
 8009c62:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009c64:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8009c68:	0b92      	lsrs	r2, r2, #14
 8009c6a:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8009c6e:	ea8c 0c02 	eor.w	ip, ip, r2
 8009c72:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009c74:	05d2      	lsls	r2, r2, #23
 8009c76:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8009c7a:	404f      	eors	r7, r1
 8009c7c:	05c1      	lsls	r1, r0, #23
 8009c7e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8009c80:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8009c84:	404f      	eors	r7, r1
 8009c86:	e9d3 1614 	ldrd	r1, r6, [r3, #80]	; 0x50
 8009c8a:	ea8c 0c02 	eor.w	ip, ip, r2
 8009c8e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009c90:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009c92:	1851      	adds	r1, r2, r1
 8009c94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009c96:	eb42 0906 	adc.w	r9, r2, r6
 8009c9a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009c9c:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8009c9e:	4050      	eors	r0, r2
 8009ca0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009ca2:	4056      	eors	r6, r2
 8009ca4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009ca6:	4010      	ands	r0, r2
 8009ca8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009caa:	4016      	ands	r6, r2
 8009cac:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009cae:	4050      	eors	r0, r2
 8009cb0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009cb2:	1809      	adds	r1, r1, r0
 8009cb4:	ea86 0202 	eor.w	r2, r6, r2
 8009cb8:	eb49 0602 	adc.w	r6, r9, r2
 8009cbc:	9a01      	ldr	r2, [sp, #4]
 8009cbe:	912d      	str	r1, [sp, #180]	; 0xb4
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	f000 860a 	beq.w	800a8da <_Transform_Sha512+0x1f7a>
 8009cc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009cc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009cca:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8009cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cd0:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8009cd4:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8009cd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009cda:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8009cde:	0852      	lsrs	r2, r2, #1
 8009ce0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8009ce4:	0848      	lsrs	r0, r1, #1
 8009ce6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ce8:	ea88 0202 	eor.w	r2, r8, r2
 8009cec:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8009cf0:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8009cf4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009cf6:	ea8e 0000 	eor.w	r0, lr, r0
 8009cfa:	ea48 6841 	orr.w	r8, r8, r1, lsl #25
 8009cfe:	ea80 10d1 	eor.w	r0, r0, r1, lsr #7
 8009d02:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009d04:	ea82 0208 	eor.w	r2, r2, r8
 8009d08:	1852      	adds	r2, r2, r1
 8009d0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d0c:	eb41 0000 	adc.w	r0, r1, r0
 8009d10:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d12:	1852      	adds	r2, r2, r1
 8009d14:	9902      	ldr	r1, [sp, #8]
 8009d16:	eb41 0000 	adc.w	r0, r1, r0
 8009d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d1c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8009d20:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d22:	ea4e 7e51 	orr.w	lr, lr, r1, lsr #29
 8009d26:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8009d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d2c:	ea4a 7a51 	orr.w	sl, sl, r1, lsr #29
 8009d30:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d32:	ea4f 48d1 	mov.w	r8, r1, lsr #19
 8009d36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d38:	ea48 3841 	orr.w	r8, r8, r1, lsl #13
 8009d3c:	ea4f 49d1 	mov.w	r9, r1, lsr #19
 8009d40:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d42:	ea8a 0808 	eor.w	r8, sl, r8
 8009d46:	ea49 3941 	orr.w	r9, r9, r1, lsl #13
 8009d4a:	ea4f 1a91 	mov.w	sl, r1, lsr #6
 8009d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d50:	ea4a 6a81 	orr.w	sl, sl, r1, lsl #26
 8009d54:	ea8e 0e09 	eor.w	lr, lr, r9
 8009d58:	ea88 080a 	eor.w	r8, r8, sl
 8009d5c:	eb12 0208 	adds.w	r2, r2, r8
 8009d60:	ea8e 1e91 	eor.w	lr, lr, r1, lsr #6
 8009d64:	921d      	str	r2, [sp, #116]	; 0x74
 8009d66:	eb40 020e 	adc.w	r2, r0, lr
 8009d6a:	920d      	str	r2, [sp, #52]	; 0x34
 8009d6c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009d6e:	19d1      	adds	r1, r2, r7
 8009d70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009d72:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8009d74:	eb46 060c 	adc.w	r6, r6, ip
 8009d78:	1889      	adds	r1, r1, r2
 8009d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d7c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 8009d80:	eb42 0606 	adc.w	r6, r2, r6
 8009d84:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009d86:	1852      	adds	r2, r2, r1
 8009d88:	922d      	str	r2, [sp, #180]	; 0xb4
 8009d8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d8c:	eb42 0206 	adc.w	r2, r2, r6
 8009d90:	922e      	str	r2, [sp, #184]	; 0xb8
 8009d92:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d94:	ea4f 7e82 	mov.w	lr, r2, lsl #30
 8009d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009d9a:	ea4e 0e92 	orr.w	lr, lr, r2, lsr #2
 8009d9e:	ea4f 7882 	mov.w	r8, r2, lsl #30
 8009da2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009da4:	ea48 0892 	orr.w	r8, r8, r2, lsr #2
 8009da8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009daa:	0f10      	lsrs	r0, r2, #28
 8009dac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009dae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009db2:	0f12      	lsrs	r2, r2, #28
 8009db4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8009db8:	ea8e 0e02 	eor.w	lr, lr, r2
 8009dbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009dbe:	0652      	lsls	r2, r2, #25
 8009dc0:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 8009dc4:	ea88 0800 	eor.w	r8, r8, r0
 8009dc8:	0678      	lsls	r0, r7, #25
 8009dca:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8009dcc:	ea40 10d7 	orr.w	r0, r0, r7, lsr #7
 8009dd0:	ea8e 0e02 	eor.w	lr, lr, r2
 8009dd4:	ea88 0800 	eor.w	r8, r8, r0
 8009dd8:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8009ddc:	4310      	orrs	r0, r2
 8009dde:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009de0:	ea42 0907 	orr.w	r9, r2, r7
 8009de4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8009de6:	ea09 0902 	and.w	r9, r9, r2
 8009dea:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8009dee:	403a      	ands	r2, r7
 8009df0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8009df2:	ea00 000b 	and.w	r0, r0, fp
 8009df6:	4310      	orrs	r0, r2
 8009df8:	ea07 070c 	and.w	r7, r7, ip
 8009dfc:	eb18 0000 	adds.w	r0, r8, r0
 8009e00:	ea49 0707 	orr.w	r7, r9, r7
 8009e04:	eb4e 0707 	adc.w	r7, lr, r7
 8009e08:	1842      	adds	r2, r0, r1
 8009e0a:	9225      	str	r2, [sp, #148]	; 0x94
 8009e0c:	eb46 0207 	adc.w	r2, r6, r7
 8009e10:	9226      	str	r2, [sp, #152]	; 0x98
 8009e12:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009e14:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8009e16:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8009e1a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009e1c:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8009e20:	ea4f 4e92 	mov.w	lr, r2, lsr #18
 8009e24:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009e26:	ea4e 3e82 	orr.w	lr, lr, r2, lsl #14
 8009e2a:	0b91      	lsrs	r1, r2, #14
 8009e2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009e2e:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8009e32:	0b92      	lsrs	r2, r2, #14
 8009e34:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8009e38:	ea8e 0e02 	eor.w	lr, lr, r2
 8009e3c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009e3e:	05d2      	lsls	r2, r2, #23
 8009e40:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8009e44:	ea89 0901 	eor.w	r9, r9, r1
 8009e48:	05c1      	lsls	r1, r0, #23
 8009e4a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8009e4c:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 8009e4e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8009e52:	ea89 0901 	eor.w	r9, r9, r1
 8009e56:	ea8e 0e02 	eor.w	lr, lr, r2
 8009e5a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009e5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8009e5e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8009e60:	404a      	eors	r2, r1
 8009e62:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009e64:	ea81 0600 	eor.w	r6, r1, r0
 8009e68:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8009e6a:	400a      	ands	r2, r1
 8009e6c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8009e6e:	400e      	ands	r6, r1
 8009e70:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8009e72:	404a      	eors	r2, r1
 8009e74:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009e76:	404e      	eors	r6, r1
 8009e78:	e9d3 1016 	ldrd	r1, r0, [r3, #88]	; 0x58
 8009e7c:	1879      	adds	r1, r7, r1
 8009e7e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8009e80:	eb47 0000 	adc.w	r0, r7, r0
 8009e84:	1852      	adds	r2, r2, r1
 8009e86:	9901      	ldr	r1, [sp, #4]
 8009e88:	922f      	str	r2, [sp, #188]	; 0xbc
 8009e8a:	eb46 0600 	adc.w	r6, r6, r0
 8009e8e:	2900      	cmp	r1, #0
 8009e90:	f000 852a 	beq.w	800a8e8 <_Transform_Sha512+0x1f88>
 8009e94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e96:	9803      	ldr	r0, [sp, #12]
 8009e98:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8009e9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e9e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8009ea2:	9903      	ldr	r1, [sp, #12]
 8009ea4:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
 8009ea8:	0a0f      	lsrs	r7, r1, #8
 8009eaa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009eac:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 8009eb0:	0849      	lsrs	r1, r1, #1
 8009eb2:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8009eb6:	0840      	lsrs	r0, r0, #1
 8009eb8:	ea40 70c8 	orr.w	r0, r0, r8, lsl #31
 8009ebc:	4078      	eors	r0, r7
 8009ebe:	9f03      	ldr	r7, [sp, #12]
 8009ec0:	ea8c 0101 	eor.w	r1, ip, r1
 8009ec4:	ea4f 1cd8 	mov.w	ip, r8, lsr #7
 8009ec8:	ea4c 6c47 	orr.w	ip, ip, r7, lsl #25
 8009ecc:	ea80 10d7 	eor.w	r0, r0, r7, lsr #7
 8009ed0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009ed2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009ed6:	ea81 010c 	eor.w	r1, r1, ip
 8009eda:	19c9      	adds	r1, r1, r7
 8009edc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009ede:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8009ee2:	eb47 0000 	adc.w	r0, r7, r0
 8009ee6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009ee8:	19c9      	adds	r1, r1, r7
 8009eea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009eec:	eb47 0000 	adc.w	r0, r7, r0
 8009ef0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009ef2:	00ff      	lsls	r7, r7, #3
 8009ef4:	ea47 775c 	orr.w	r7, r7, ip, lsr #29
 8009ef8:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8009efc:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8009f00:	ea4a 7a5c 	orr.w	sl, sl, ip, lsr #29
 8009f04:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8009f08:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8009f0c:	ea4c 3c48 	orr.w	ip, ip, r8, lsl #13
 8009f10:	ea4f 48d8 	mov.w	r8, r8, lsr #19
 8009f14:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8009f18:	ea8a 0c0c 	eor.w	ip, sl, ip
 8009f1c:	ea4f 1a92 	mov.w	sl, r2, lsr #6
 8009f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f22:	ea4a 6a82 	orr.w	sl, sl, r2, lsl #26
 8009f26:	ea87 0708 	eor.w	r7, r7, r8
 8009f2a:	ea8c 0c0a 	eor.w	ip, ip, sl
 8009f2e:	ea87 1792 	eor.w	r7, r7, r2, lsr #6
 8009f32:	eb11 020c 	adds.w	r2, r1, ip
 8009f36:	eb40 0107 	adc.w	r1, r0, r7
 8009f3a:	921e      	str	r2, [sp, #120]	; 0x78
 8009f3c:	910e      	str	r1, [sp, #56]	; 0x38
 8009f3e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009f40:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f42:	eb19 0202 	adds.w	r2, r9, r2
 8009f46:	eb4e 0e06 	adc.w	lr, lr, r6
 8009f4a:	1852      	adds	r2, r2, r1
 8009f4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f4e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8009f50:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8009f54:	eb41 0e0e 	adc.w	lr, r1, lr
 8009f58:	eb1b 0102 	adds.w	r1, fp, r2
 8009f5c:	912f      	str	r1, [sp, #188]	; 0xbc
 8009f5e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009f60:	eb41 010e 	adc.w	r1, r1, lr
 8009f64:	9131      	str	r1, [sp, #196]	; 0xc4
 8009f66:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009f68:	078f      	lsls	r7, r1, #30
 8009f6a:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009f6c:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 8009f70:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8009f74:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009f76:	ea4c 0c91 	orr.w	ip, ip, r1, lsr #2
 8009f7a:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009f7c:	0f08      	lsrs	r0, r1, #28
 8009f7e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009f80:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8009f84:	0f09      	lsrs	r1, r1, #28
 8009f86:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8009f8a:	404f      	eors	r7, r1
 8009f8c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009f8e:	0649      	lsls	r1, r1, #25
 8009f90:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 8009f94:	ea8c 0c00 	eor.w	ip, ip, r0
 8009f98:	0670      	lsls	r0, r6, #25
 8009f9a:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8009f9c:	ea40 10d6 	orr.w	r0, r0, r6, lsr #7
 8009fa0:	ea8c 0c00 	eor.w	ip, ip, r0
 8009fa4:	404f      	eors	r7, r1
 8009fa6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8009fa8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009faa:	4308      	orrs	r0, r1
 8009fac:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009fae:	ea41 0806 	orr.w	r8, r1, r6
 8009fb2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009fb4:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8009fb6:	4008      	ands	r0, r1
 8009fb8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8009fba:	ea08 0801 	and.w	r8, r8, r1
 8009fbe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009fc0:	4031      	ands	r1, r6
 8009fc2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009fc4:	4308      	orrs	r0, r1
 8009fc6:	ea06 0609 	and.w	r6, r6, r9
 8009fca:	eb1c 0000 	adds.w	r0, ip, r0
 8009fce:	ea48 0606 	orr.w	r6, r8, r6
 8009fd2:	eb47 0606 	adc.w	r6, r7, r6
 8009fd6:	1882      	adds	r2, r0, r2
 8009fd8:	9227      	str	r2, [sp, #156]	; 0x9c
 8009fda:	eb4e 0206 	adc.w	r2, lr, r6
 8009fde:	9230      	str	r2, [sp, #192]	; 0xc0
 8009fe0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009fe2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8009fe4:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 8009fe8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009fea:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 8009fee:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8009ff2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009ff4:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8009ff8:	0b91      	lsrs	r1, r2, #14
 8009ffa:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009ffc:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800a000:	0b92      	lsrs	r2, r2, #14
 800a002:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
        R(12); R(13); R(14); R(15);
 800a006:	ea89 0902 	eor.w	r9, r9, r2
 800a00a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800a00c:	05d2      	lsls	r2, r2, #23
 800a00e:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800a012:	ea8a 0a01 	eor.w	sl, sl, r1
 800a016:	05c1      	lsls	r1, r0, #23
 800a018:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800a01a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800a01e:	ea8a 0a01 	eor.w	sl, sl, r1
 800a022:	ea89 0902 	eor.w	r9, r9, r2
 800a026:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800a028:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a02a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800a02c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800a02e:	404a      	eors	r2, r1
 800a030:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800a032:	ea81 0800 	eor.w	r8, r1, r0
 800a036:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800a038:	400a      	ands	r2, r1
 800a03a:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800a03c:	ea08 0801 	and.w	r8, r8, r1
 800a040:	992b      	ldr	r1, [sp, #172]	; 0xac
 800a042:	404a      	eors	r2, r1
 800a044:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800a046:	ea88 0801 	eor.w	r8, r8, r1
 800a04a:	e9d3 1018 	ldrd	r1, r0, [r3, #96]	; 0x60
 800a04e:	1871      	adds	r1, r6, r1
 800a050:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800a052:	eb46 0000 	adc.w	r0, r6, r0
 800a056:	1852      	adds	r2, r2, r1
 800a058:	9901      	ldr	r1, [sp, #4]
 800a05a:	eb48 0800 	adc.w	r8, r8, r0
 800a05e:	2900      	cmp	r1, #0
 800a060:	f000 844a 	beq.w	800a8f8 <_Transform_Sha512+0x1f98>
 800a064:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800a066:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a068:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 800a06c:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800a070:	0a0f      	lsrs	r7, r1, #8
 800a072:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a074:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800a078:	0a0e      	lsrs	r6, r1, #8
 800a07a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800a07c:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800a080:	0849      	lsrs	r1, r1, #1
 800a082:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800a086:	0840      	lsrs	r0, r0, #1
 800a088:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800a08c:	4070      	eors	r0, r6
 800a08e:	4666      	mov	r6, ip
 800a090:	4079      	eors	r1, r7
 800a092:	09f7      	lsrs	r7, r6, #7
 800a094:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800a096:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a09a:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800a09e:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800a0a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a0a4:	4079      	eors	r1, r7
 800a0a6:	1989      	adds	r1, r1, r6
 800a0a8:	9e03      	ldr	r6, [sp, #12]
 800a0aa:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800a0ac:	eb46 0000 	adc.w	r0, r6, r0
 800a0b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a0b2:	1989      	adds	r1, r1, r6
 800a0b4:	9e04      	ldr	r6, [sp, #16]
 800a0b6:	eb46 0000 	adc.w	r0, r6, r0
 800a0ba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a0bc:	00f6      	lsls	r6, r6, #3
 800a0be:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800a0c2:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a0c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a0c8:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800a0cc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800a0ce:	0cff      	lsrs	r7, r7, #19
 800a0d0:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800a0d4:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800a0d8:	ea4c 3c4b 	orr.w	ip, ip, fp, lsl #13
 800a0dc:	ea86 060c 	eor.w	r6, r6, ip
 800a0e0:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a0e4:	ea8e 0707 	eor.w	r7, lr, r7
 800a0e8:	ea4f 1e9b 	mov.w	lr, fp, lsr #6
 800a0ec:	ea4e 6e8c 	orr.w	lr, lr, ip, lsl #26
 800a0f0:	ea87 070e 	eor.w	r7, r7, lr
 800a0f4:	19c9      	adds	r1, r1, r7
 800a0f6:	ea86 169c 	eor.w	r6, r6, ip, lsr #6
 800a0fa:	9113      	str	r1, [sp, #76]	; 0x4c
 800a0fc:	eb40 0106 	adc.w	r1, r0, r6
 800a100:	9103      	str	r1, [sp, #12]
 800a102:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a104:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 800a108:	eb1a 0202 	adds.w	r2, sl, r2
 800a10c:	eb49 0908 	adc.w	r9, r9, r8
 800a110:	1852      	adds	r2, r2, r1
 800a112:	9903      	ldr	r1, [sp, #12]
 800a114:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 800a118:	eb41 0909 	adc.w	r9, r1, r9
 800a11c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a11e:	1889      	adds	r1, r1, r2
 800a120:	9129      	str	r1, [sp, #164]	; 0xa4
 800a122:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800a124:	eb41 0109 	adc.w	r1, r1, r9
 800a128:	912a      	str	r1, [sp, #168]	; 0xa8
 800a12a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800a12c:	078e      	lsls	r6, r1, #30
 800a12e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800a130:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 800a134:	078f      	lsls	r7, r1, #30
 800a136:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800a138:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 800a13c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800a13e:	0f08      	lsrs	r0, r1, #28
 800a140:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800a142:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800a146:	0f09      	lsrs	r1, r1, #28
 800a148:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800a14c:	404e      	eors	r6, r1
 800a14e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800a150:	ea4f 6c41 	mov.w	ip, r1, lsl #25
 800a154:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800a156:	4047      	eors	r7, r0
 800a158:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a15a:	ea4c 1cd1 	orr.w	ip, ip, r1, lsr #7
 800a15e:	0649      	lsls	r1, r1, #25
 800a160:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 800a164:	404f      	eors	r7, r1
 800a166:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800a168:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a16a:	ea86 060c 	eor.w	r6, r6, ip
 800a16e:	4301      	orrs	r1, r0
 800a170:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
 800a174:	9826      	ldr	r0, [sp, #152]	; 0x98
 800a176:	ea40 0e0c 	orr.w	lr, r0, ip
 800a17a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800a17c:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 800a180:	4001      	ands	r1, r0
 800a182:	9824      	ldr	r0, [sp, #144]	; 0x90
 800a184:	ea0e 0e00 	and.w	lr, lr, r0
 800a188:	9825      	ldr	r0, [sp, #148]	; 0x94
 800a18a:	ea00 000c 	and.w	r0, r0, ip
 800a18e:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 800a192:	4301      	orrs	r1, r0
 800a194:	ea0c 0c08 	and.w	ip, ip, r8
 800a198:	1879      	adds	r1, r7, r1
 800a19a:	ea4e 0c0c 	orr.w	ip, lr, ip
 800a19e:	eb46 0c0c 	adc.w	ip, r6, ip
 800a1a2:	188a      	adds	r2, r1, r2
 800a1a4:	9222      	str	r2, [sp, #136]	; 0x88
 800a1a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800a1a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800a1aa:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800a1ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a1b0:	eb49 0b0c 	adc.w	fp, r9, ip
 800a1b4:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800a1b8:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800a1bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800a1be:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800a1c2:	0b91      	lsrs	r1, r2, #14
 800a1c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a1c6:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800a1ca:	0b92      	lsrs	r2, r2, #14
 800a1cc:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800a1d0:	ea89 0902 	eor.w	r9, r9, r2
 800a1d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a1d6:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800a1d8:	05d2      	lsls	r2, r2, #23
 800a1da:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800a1de:	ea8a 0a01 	eor.w	sl, sl, r1
 800a1e2:	05c1      	lsls	r1, r0, #23
 800a1e4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800a1e6:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800a1ea:	ea8a 0a01 	eor.w	sl, sl, r1
 800a1ee:	ea89 0902 	eor.w	r9, r9, r2
 800a1f2:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800a1f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a1f6:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800a1f8:	404a      	eors	r2, r1
 800a1fa:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800a1fc:	ea81 0800 	eor.w	r8, r1, r0
 800a200:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a202:	400a      	ands	r2, r1
 800a204:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800a206:	ea08 0801 	and.w	r8, r8, r1
 800a20a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a20c:	404a      	eors	r2, r1
 800a20e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800a210:	ea88 0801 	eor.w	r8, r8, r1
 800a214:	e9d3 101a 	ldrd	r1, r0, [r3, #104]	; 0x68
 800a218:	1871      	adds	r1, r6, r1
 800a21a:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800a21c:	eb46 0000 	adc.w	r0, r6, r0
 800a220:	1852      	adds	r2, r2, r1
 800a222:	9901      	ldr	r1, [sp, #4]
 800a224:	9228      	str	r2, [sp, #160]	; 0xa0
 800a226:	eb48 0800 	adc.w	r8, r8, r0
 800a22a:	2900      	cmp	r1, #0
 800a22c:	f000 836b 	beq.w	800a906 <_Transform_Sha512+0x1fa6>
 800a230:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a232:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a234:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 800a238:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a23a:	0a0f      	lsrs	r7, r1, #8
 800a23c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a23e:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800a242:	0a0e      	lsrs	r6, r1, #8
 800a244:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a246:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800a24a:	0849      	lsrs	r1, r1, #1
 800a24c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800a250:	0840      	lsrs	r0, r0, #1
 800a252:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800a256:	4070      	eors	r0, r6
 800a258:	4666      	mov	r6, ip
 800a25a:	4079      	eors	r1, r7
 800a25c:	09f7      	lsrs	r7, r6, #7
 800a25e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a260:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800a264:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800a268:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800a26c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800a26e:	4079      	eors	r1, r7
 800a270:	1989      	adds	r1, r1, r6
 800a272:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800a274:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a276:	eb46 0000 	adc.w	r0, r6, r0
 800a27a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a27c:	1989      	adds	r1, r1, r6
 800a27e:	9e05      	ldr	r6, [sp, #20]
 800a280:	eb46 0000 	adc.w	r0, r6, r0
 800a284:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a286:	00f6      	lsls	r6, r6, #3
 800a288:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800a28c:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a290:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a292:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800a296:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a298:	0cff      	lsrs	r7, r7, #19
 800a29a:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800a29e:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800a2a2:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 800a2a6:	ea8e 0707 	eor.w	r7, lr, r7
 800a2aa:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 800a2ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2b0:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 800a2b4:	ea86 060c 	eor.w	r6, r6, ip
 800a2b8:	ea87 070e 	eor.w	r7, r7, lr
 800a2bc:	19c9      	adds	r1, r1, r7
 800a2be:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 800a2c2:	911f      	str	r1, [sp, #124]	; 0x7c
 800a2c4:	eb40 0106 	adc.w	r1, r0, r6
 800a2c8:	910f      	str	r1, [sp, #60]	; 0x3c
 800a2ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a2cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800a2ce:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800a2d2:	eb1a 0202 	adds.w	r2, sl, r2
 800a2d6:	eb49 0908 	adc.w	r9, r9, r8
 800a2da:	1852      	adds	r2, r2, r1
 800a2dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2de:	eb41 0909 	adc.w	r9, r1, r9
 800a2e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a2e4:	1889      	adds	r1, r1, r2
 800a2e6:	912b      	str	r1, [sp, #172]	; 0xac
 800a2e8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a2ea:	eb41 0109 	adc.w	r1, r1, r9
 800a2ee:	912c      	str	r1, [sp, #176]	; 0xb0
 800a2f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a2f2:	ea4f 768b 	mov.w	r6, fp, lsl #30
 800a2f6:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 800a2fa:	078f      	lsls	r7, r1, #30
 800a2fc:	0f08      	lsrs	r0, r1, #28
 800a2fe:	ea4f 711b 	mov.w	r1, fp, lsr #28
 800a302:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800a306:	404e      	eors	r6, r1
 800a308:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a30a:	ea4f 6c4b 	mov.w	ip, fp, lsl #25
 800a30e:	ea4c 1cd1 	orr.w	ip, ip, r1, lsr #7
 800a312:	ea40 100b 	orr.w	r0, r0, fp, lsl #4
 800a316:	ea47 079b 	orr.w	r7, r7, fp, lsr #2
 800a31a:	0649      	lsls	r1, r1, #25
 800a31c:	4047      	eors	r7, r0
 800a31e:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 800a322:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a324:	404f      	eors	r7, r1
 800a326:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800a328:	4301      	orrs	r1, r0
 800a32a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a32c:	ea40 0e0b 	orr.w	lr, r0, fp
 800a330:	9825      	ldr	r0, [sp, #148]	; 0x94
 800a332:	4001      	ands	r1, r0
 800a334:	9826      	ldr	r0, [sp, #152]	; 0x98
 800a336:	ea86 060c 	eor.w	r6, r6, ip
 800a33a:	ea0e 0e00 	and.w	lr, lr, r0
 800a33e:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800a342:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800a344:	ea00 000c 	and.w	r0, r0, ip
 800a348:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
 800a34c:	4301      	orrs	r1, r0
 800a34e:	ea0c 0c0b 	and.w	ip, ip, fp
 800a352:	1879      	adds	r1, r7, r1
 800a354:	ea4e 0c0c 	orr.w	ip, lr, ip
 800a358:	eb46 0c0c 	adc.w	ip, r6, ip
 800a35c:	188a      	adds	r2, r1, r2
 800a35e:	9223      	str	r2, [sp, #140]	; 0x8c
 800a360:	eb49 020c 	adc.w	r2, r9, ip
 800a364:	9224      	str	r2, [sp, #144]	; 0x90
 800a366:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800a368:	982b      	ldr	r0, [sp, #172]	; 0xac
 800a36a:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800a36e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a370:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800a374:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800a378:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800a37a:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800a37e:	0b91      	lsrs	r1, r2, #14
 800a380:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a382:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800a386:	0b92      	lsrs	r2, r2, #14
 800a388:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800a38c:	ea89 0902 	eor.w	r9, r9, r2
 800a390:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a392:	05d2      	lsls	r2, r2, #23
 800a394:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800a398:	ea8a 0a01 	eor.w	sl, sl, r1
 800a39c:	05c1      	lsls	r1, r0, #23
 800a39e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800a3a0:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800a3a4:	ea8a 0a01 	eor.w	sl, sl, r1
 800a3a8:	ea89 0902 	eor.w	r9, r9, r2
 800a3ac:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a3ae:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800a3b0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800a3b2:	404a      	eors	r2, r1
 800a3b4:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800a3b6:	ea81 0800 	eor.w	r8, r1, r0
 800a3ba:	992b      	ldr	r1, [sp, #172]	; 0xac
 800a3bc:	400a      	ands	r2, r1
 800a3be:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800a3c0:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800a3c2:	ea08 0801 	and.w	r8, r8, r1
 800a3c6:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800a3c8:	404a      	eors	r2, r1
 800a3ca:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800a3cc:	ea88 0801 	eor.w	r8, r8, r1
 800a3d0:	e9d3 101c 	ldrd	r1, r0, [r3, #112]	; 0x70
 800a3d4:	1871      	adds	r1, r6, r1
 800a3d6:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800a3d8:	eb46 0000 	adc.w	r0, r6, r0
 800a3dc:	1852      	adds	r2, r2, r1
 800a3de:	9901      	ldr	r1, [sp, #4]
 800a3e0:	9228      	str	r2, [sp, #160]	; 0xa0
 800a3e2:	eb48 0800 	adc.w	r8, r8, r0
 800a3e6:	2900      	cmp	r1, #0
 800a3e8:	f000 8294 	beq.w	800a914 <_Transform_Sha512+0x1fb4>
 800a3ec:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a3ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a3f0:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 800a3f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3f6:	0a0f      	lsrs	r7, r1, #8
 800a3f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a3fa:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800a3fe:	0a0e      	lsrs	r6, r1, #8
 800a400:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a402:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800a406:	0849      	lsrs	r1, r1, #1
 800a408:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800a40c:	0840      	lsrs	r0, r0, #1
 800a40e:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800a412:	4070      	eors	r0, r6
 800a414:	4666      	mov	r6, ip
 800a416:	4079      	eors	r1, r7
 800a418:	09f7      	lsrs	r7, r6, #7
 800a41a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a41c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a420:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800a424:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800a428:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a42a:	4079      	eors	r1, r7
 800a42c:	1989      	adds	r1, r1, r6
 800a42e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a430:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a432:	eb46 0000 	adc.w	r0, r6, r0
 800a436:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800a438:	1989      	adds	r1, r1, r6
 800a43a:	9e06      	ldr	r6, [sp, #24]
 800a43c:	eb46 0000 	adc.w	r0, r6, r0
 800a440:	9e03      	ldr	r6, [sp, #12]
 800a442:	00f6      	lsls	r6, r6, #3
 800a444:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800a448:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a44c:	9f03      	ldr	r7, [sp, #12]
 800a44e:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800a452:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a454:	0cff      	lsrs	r7, r7, #19
 800a456:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800a45a:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800a45e:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 800a462:	ea8e 0707 	eor.w	r7, lr, r7
 800a466:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 800a46a:	9a03      	ldr	r2, [sp, #12]
 800a46c:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 800a470:	ea86 060c 	eor.w	r6, r6, ip
 800a474:	ea87 070e 	eor.w	r7, r7, lr
 800a478:	19c9      	adds	r1, r1, r7
 800a47a:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 800a47e:	9120      	str	r1, [sp, #128]	; 0x80
 800a480:	eb40 0106 	adc.w	r1, r0, r6
 800a484:	9110      	str	r1, [sp, #64]	; 0x40
 800a486:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a488:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a48a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800a48c:	eb1a 0202 	adds.w	r2, sl, r2
 800a490:	eb49 0908 	adc.w	r9, r9, r8
 800a494:	1852      	adds	r2, r2, r1
 800a496:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a498:	eb41 0909 	adc.w	r9, r1, r9
 800a49c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a49e:	1889      	adds	r1, r1, r2
 800a4a0:	912d      	str	r1, [sp, #180]	; 0xb4
 800a4a2:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a4a4:	eb41 0109 	adc.w	r1, r1, r9
 800a4a8:	912e      	str	r1, [sp, #184]	; 0xb8
 800a4aa:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a4ac:	078f      	lsls	r7, r1, #30
 800a4ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a4b0:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 800a4b4:	ea4f 7e81 	mov.w	lr, r1, lsl #30
 800a4b8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a4ba:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 800a4be:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a4c0:	0f08      	lsrs	r0, r1, #28
 800a4c2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a4c4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800a4c8:	0f09      	lsrs	r1, r1, #28
 800a4ca:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800a4ce:	404f      	eors	r7, r1
 800a4d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a4d2:	ea8e 0e00 	eor.w	lr, lr, r0
 800a4d6:	9824      	ldr	r0, [sp, #144]	; 0x90
 800a4d8:	ea4f 6c41 	mov.w	ip, r1, lsl #25
 800a4dc:	0671      	lsls	r1, r6, #25
 800a4de:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 800a4e2:	ea8e 0e01 	eor.w	lr, lr, r1
 800a4e6:	9824      	ldr	r0, [sp, #144]	; 0x90
 800a4e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a4ea:	ea4c 1cd6 	orr.w	ip, ip, r6, lsr #7
 800a4ee:	4331      	orrs	r1, r6
 800a4f0:	ea4b 0600 	orr.w	r6, fp, r0
 800a4f4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800a4f6:	4001      	ands	r1, r0
 800a4f8:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a4fa:	ea87 070c 	eor.w	r7, r7, ip
 800a4fe:	4006      	ands	r6, r0
 800a500:	e9dd 0c22 	ldrd	r0, ip, [sp, #136]	; 0x88
 800a504:	ea00 000c 	and.w	r0, r0, ip
 800a508:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 800a50c:	4301      	orrs	r1, r0
 800a50e:	ea0b 0c0c 	and.w	ip, fp, ip
 800a512:	eb1e 0101 	adds.w	r1, lr, r1
 800a516:	ea46 0c0c 	orr.w	ip, r6, ip
 800a51a:	eb47 0c0c 	adc.w	ip, r7, ip
 800a51e:	188a      	adds	r2, r1, r2
 800a520:	9225      	str	r2, [sp, #148]	; 0x94
 800a522:	eb49 020c 	adc.w	r2, r9, ip
 800a526:	9226      	str	r2, [sp, #152]	; 0x98
 800a528:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a52a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800a52c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800a52e:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800a532:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a534:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800a538:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800a53c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a53e:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800a542:	0b92      	lsrs	r2, r2, #14
 800a544:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800a548:	ea8a 0a02 	eor.w	sl, sl, r2
 800a54c:	0b89      	lsrs	r1, r1, #14
 800a54e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a550:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800a554:	ea89 0901 	eor.w	r9, r9, r1
 800a558:	05d1      	lsls	r1, r2, #23
 800a55a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800a55e:	05c2      	lsls	r2, r0, #23
 800a560:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800a562:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800a566:	ea8a 0a02 	eor.w	sl, sl, r2
 800a56a:	ea89 0901 	eor.w	r9, r9, r1
 800a56e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800a570:	992b      	ldr	r1, [sp, #172]	; 0xac
 800a572:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800a574:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800a576:	404a      	eors	r2, r1
 800a578:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800a57a:	ea81 0800 	eor.w	r8, r1, r0
 800a57e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a580:	400a      	ands	r2, r1
 800a582:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800a584:	ea08 0801 	and.w	r8, r8, r1
 800a588:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a58a:	404a      	eors	r2, r1
 800a58c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800a58e:	ea88 0801 	eor.w	r8, r8, r1
 800a592:	e9d3 101e 	ldrd	r1, r0, [r3, #120]	; 0x78
 800a596:	1871      	adds	r1, r6, r1
 800a598:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800a59a:	eb46 0000 	adc.w	r0, r6, r0
 800a59e:	1852      	adds	r2, r2, r1
 800a5a0:	9901      	ldr	r1, [sp, #4]
 800a5a2:	9228      	str	r2, [sp, #160]	; 0xa0
 800a5a4:	eb48 0800 	adc.w	r8, r8, r0
 800a5a8:	2900      	cmp	r1, #0
 800a5aa:	f000 81ba 	beq.w	800a922 <_Transform_Sha512+0x1fc2>
 800a5ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5b0:	9808      	ldr	r0, [sp, #32]
 800a5b2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800a5b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a5b8:	0a0f      	lsrs	r7, r1, #8
 800a5ba:	9908      	ldr	r1, [sp, #32]
 800a5bc:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800a5c0:	0a0e      	lsrs	r6, r1, #8
 800a5c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5c4:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800a5c8:	0849      	lsrs	r1, r1, #1
 800a5ca:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800a5ce:	0840      	lsrs	r0, r0, #1
 800a5d0:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800a5d4:	4070      	eors	r0, r6
 800a5d6:	4666      	mov	r6, ip
 800a5d8:	4079      	eors	r1, r7
 800a5da:	09f7      	lsrs	r7, r6, #7
 800a5dc:	9e08      	ldr	r6, [sp, #32]
 800a5de:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a5e2:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800a5e6:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800a5ea:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800a5ec:	4079      	eors	r1, r7
 800a5ee:	1989      	adds	r1, r1, r6
 800a5f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a5f2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a5f4:	eb46 0000 	adc.w	r0, r6, r0
 800a5f8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a5fa:	1989      	adds	r1, r1, r6
 800a5fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a5fe:	eb46 0000 	adc.w	r0, r6, r0
 800a602:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800a604:	00f6      	lsls	r6, r6, #3
 800a606:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800a60a:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800a60e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a610:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800a614:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a616:	0cff      	lsrs	r7, r7, #19
 800a618:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800a61c:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800a620:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 800a624:	ea8e 0707 	eor.w	r7, lr, r7
 800a628:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 800a62c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a62e:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 800a632:	ea86 060c 	eor.w	r6, r6, ip
 800a636:	ea87 070e 	eor.w	r7, r7, lr
 800a63a:	19c9      	adds	r1, r1, r7
 800a63c:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 800a640:	9121      	str	r1, [sp, #132]	; 0x84
 800a642:	eb40 0106 	adc.w	r1, r0, r6
 800a646:	9111      	str	r1, [sp, #68]	; 0x44
 800a648:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a64a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a64c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a64e:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 800a652:	eb1a 0202 	adds.w	r2, sl, r2
 800a656:	eb49 0908 	adc.w	r9, r9, r8
 800a65a:	eb12 0801 	adds.w	r8, r2, r1
 800a65e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a660:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a662:	eb42 0909 	adc.w	r9, r2, r9
 800a666:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a668:	eb12 0208 	adds.w	r2, r2, r8
 800a66c:	922f      	str	r2, [sp, #188]	; 0xbc
 800a66e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800a670:	eb42 0a09 	adc.w	sl, r2, r9
 800a674:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a676:	0790      	lsls	r0, r2, #30
 800a678:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a67a:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 800a67e:	0796      	lsls	r6, r2, #30
 800a680:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a682:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 800a686:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a688:	0f12      	lsrs	r2, r2, #28
 800a68a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800a68e:	4056      	eors	r6, r2
 800a690:	0f09      	lsrs	r1, r1, #28
 800a692:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a694:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800a698:	4048      	eors	r0, r1
 800a69a:	0651      	lsls	r1, r2, #25
 800a69c:	ea41 11d7 	orr.w	r1, r1, r7, lsr #7
 800a6a0:	067a      	lsls	r2, r7, #25
 800a6a2:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800a6a4:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 800a6a8:	4056      	eors	r6, r2
 800a6aa:	4048      	eors	r0, r1
 800a6ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a6ae:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a6b0:	ea42 0c01 	orr.w	ip, r2, r1
 800a6b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6b6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a6b8:	4317      	orrs	r7, r2
 800a6ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6bc:	ea0c 0c02 	and.w	ip, ip, r2
 800a6c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a6c2:	4011      	ands	r1, r2
 800a6c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6c6:	ea07 070b 	and.w	r7, r7, fp
 800a6ca:	ea02 0e0e 	and.w	lr, r2, lr
 800a6ce:	ea4c 0101 	orr.w	r1, ip, r1
 800a6d2:	1871      	adds	r1, r6, r1
 800a6d4:	ea47 0e0e 	orr.w	lr, r7, lr
 800a6d8:	eb40 0e0e 	adc.w	lr, r0, lr
 800a6dc:	eb11 0208 	adds.w	r2, r1, r8
    for (j = 0; j < 80; j += 16) {
 800a6e0:	9901      	ldr	r1, [sp, #4]
        R(12); R(13); R(14); R(15);
 800a6e2:	9227      	str	r2, [sp, #156]	; 0x9c
    for (j = 0; j < 80; j += 16) {
 800a6e4:	f101 0110 	add.w	r1, r1, #16
        R(12); R(13); R(14); R(15);
 800a6e8:	eb49 020e 	adc.w	r2, r9, lr
    for (j = 0; j < 80; j += 16) {
 800a6ec:	2950      	cmp	r1, #80	; 0x50
        R(12); R(13); R(14); R(15);
 800a6ee:	9228      	str	r2, [sp, #160]	; 0xa0
    for (j = 0; j < 80; j += 16) {
 800a6f0:	9101      	str	r1, [sp, #4]
 800a6f2:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800a6f6:	f47e a9a6 	bne.w	8008a46 <_Transform_Sha512+0xe6>
 800a6fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800a6fc:	e9cd 3a3a 	strd	r3, sl, [sp, #232]	; 0xe8
 800a700:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a702:	933e      	str	r3, [sp, #248]	; 0xf8
 800a704:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a706:	933f      	str	r3, [sp, #252]	; 0xfc
 800a708:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a70a:	933c      	str	r3, [sp, #240]	; 0xf0
 800a70c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a70e:	933d      	str	r3, [sp, #244]	; 0xf4
 800a710:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a712:	6723      	str	r3, [r4, #112]	; 0x70
 800a714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a716:	6763      	str	r3, [r4, #116]	; 0x74
 800a718:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a71a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a71c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a720:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a722:	60a3      	str	r3, [r4, #8]
 800a724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a726:	60e3      	str	r3, [r4, #12]
 800a728:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a72a:	6023      	str	r3, [r4, #0]
 800a72c:	9b08      	ldr	r3, [sp, #32]
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a732:	9340      	str	r3, [sp, #256]	; 0x100
 800a734:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a736:	9341      	str	r3, [sp, #260]	; 0x104
 800a738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a73a:	e9cd 3b38 	strd	r3, fp, [sp, #224]	; 0xe0
 800a73e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a740:	9332      	str	r3, [sp, #200]	; 0xc8
 800a742:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a744:	9333      	str	r3, [sp, #204]	; 0xcc
 800a746:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a748:	9334      	str	r3, [sp, #208]	; 0xd0
 800a74a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a74c:	9335      	str	r3, [sp, #212]	; 0xd4
 800a74e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a750:	9336      	str	r3, [sp, #216]	; 0xd8
 800a752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a754:	9337      	str	r3, [sp, #220]	; 0xdc
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	67a3      	str	r3, [r4, #120]	; 0x78
 800a75a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a75c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a75e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a760:	6523      	str	r3, [r4, #80]	; 0x50
 800a762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a764:	6563      	str	r3, [r4, #84]	; 0x54
 800a766:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	9b07      	ldr	r3, [sp, #28]
 800a76c:	6163      	str	r3, [r4, #20]
 800a76e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a770:	65a3      	str	r3, [r4, #88]	; 0x58
 800a772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a774:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a778:	61a3      	str	r3, [r4, #24]
 800a77a:	9b02      	ldr	r3, [sp, #8]
 800a77c:	61e3      	str	r3, [r4, #28]
 800a77e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a780:	6623      	str	r3, [r4, #96]	; 0x60
 800a782:	9b03      	ldr	r3, [sp, #12]
 800a784:	6663      	str	r3, [r4, #100]	; 0x64
 800a786:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a788:	6223      	str	r3, [r4, #32]
 800a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78c:	6263      	str	r3, [r4, #36]	; 0x24
 800a78e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a790:	66a3      	str	r3, [r4, #104]	; 0x68
 800a792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a794:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a798:	62a3      	str	r3, [r4, #40]	; 0x28
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a79e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a0:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a2:	9b05      	ldr	r3, [sp, #20]
 800a7a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a7a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7a8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a7aa:	9b06      	ldr	r3, [sp, #24]
 800a7ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a7ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7b0:	6423      	str	r3, [r4, #64]	; 0x40
 800a7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b4:	6463      	str	r3, [r4, #68]	; 0x44
    }
#endif /* USE_SLOW_SHA512 */

    /* Add the working vars back into digest */
    sha512->digest[0] += a(0);
 800a7b6:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a7ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a7bc:	189b      	adds	r3, r3, r2
 800a7be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a7c0:	eb42 0101 	adc.w	r1, r2, r1
 800a7c4:	e9c5 3100 	strd	r3, r1, [r5]
    sha512->digest[1] += b(0);
 800a7c8:	e9d5 1602 	ldrd	r1, r6, [r5, #8]
 800a7cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a7ce:	18c9      	adds	r1, r1, r3
 800a7d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7d2:	eb43 0606 	adc.w	r6, r3, r6
 800a7d6:	e9c5 1602 	strd	r1, r6, [r5, #8]
    sha512->digest[2] += c(0);
 800a7da:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
 800a7de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7e0:	18d2      	adds	r2, r2, r3
 800a7e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7e4:	eb43 0606 	adc.w	r6, r3, r6
 800a7e8:	e9c5 2604 	strd	r2, r6, [r5, #16]
    sha512->digest[3] += d(0);
 800a7ec:	e9d5 2606 	ldrd	r2, r6, [r5, #24]
 800a7f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    sha512->digest[4] += e(0);
 800a7f2:	e9d5 0708 	ldrd	r0, r7, [r5, #32]
    sha512->digest[3] += d(0);
 800a7f6:	18d2      	adds	r2, r2, r3
    sha512->digest[4] += e(0);
 800a7f8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    sha512->digest[3] += d(0);
 800a7fa:	eb4b 0606 	adc.w	r6, fp, r6
    sha512->digest[4] += e(0);
 800a7fe:	18c0      	adds	r0, r0, r3
 800a800:	eb4a 0707 	adc.w	r7, sl, r7
 800a804:	e9c5 0708 	strd	r0, r7, [r5, #32]
    sha512->digest[5] += f(0);
 800a808:	e9d5 070a 	ldrd	r0, r7, [r5, #40]	; 0x28
 800a80c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a80e:	18c0      	adds	r0, r0, r3
 800a810:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a812:	eb43 0707 	adc.w	r7, r3, r7
    sha512->digest[3] += d(0);
 800a816:	e9c5 2606 	strd	r2, r6, [r5, #24]
    sha512->digest[5] += f(0);
 800a81a:	e9c5 070a 	strd	r0, r7, [r5, #40]	; 0x28
    sha512->digest[6] += g(0);
 800a81e:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 800a822:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a824:	18c0      	adds	r0, r0, r3
 800a826:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a828:	eb43 0606 	adc.w	r6, r3, r6
 800a82c:	e9c5 060c 	strd	r0, r6, [r5, #48]	; 0x30
    sha512->digest[7] += h(0);
 800a830:	e9d5 160e 	ldrd	r1, r6, [r5, #56]	; 0x38
 800a834:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a836:	18c9      	adds	r1, r1, r3
 800a838:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a83a:	eb43 0606 	adc.w	r6, r3, r6
 800a83e:	e9c5 160e 	strd	r1, r6, [r5, #56]	; 0x38
    while (len--) *z++ = 0;
 800a842:	f104 0280 	add.w	r2, r4, #128	; 0x80
 800a846:	4623      	mov	r3, r4
 800a848:	2100      	movs	r1, #0
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d170      	bne.n	800a930 <_Transform_Sha512+0x1fd0>
 800a84e:	2300      	movs	r3, #0
 800a850:	4619      	mov	r1, r3
 800a852:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800a856:	3301      	adds	r3, #1
 800a858:	2b41      	cmp	r3, #65	; 0x41
 800a85a:	446a      	add	r2, sp
 800a85c:	d16b      	bne.n	800a936 <_Transform_Sha512+0x1fd6>
    /* Wipe variables */
    ForceZero(W, sizeof(word64) * 16);
    ForceZero(T, sizeof(T));

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
    XFREE(W, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800a85e:	4620      	mov	r0, r4
 800a860:	f008 fca6 	bl	80131b0 <free>
#endif

    return 0;
 800a864:	2000      	movs	r0, #0
}
 800a866:	b043      	add	sp, #268	; 0x10c
 800a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R( 0); R( 1); R( 2); R( 3);
 800a86c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a86e:	9218      	str	r2, [sp, #96]	; 0x60
 800a870:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800a872:	9208      	str	r2, [sp, #32]
 800a874:	f7fe b975 	b.w	8008b62 <_Transform_Sha512+0x202>
 800a878:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800a87a:	9219      	str	r2, [sp, #100]	; 0x64
 800a87c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800a87e:	f7fe ba61 	b.w	8008d44 <_Transform_Sha512+0x3e4>
 800a882:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a884:	9217      	str	r2, [sp, #92]	; 0x5c
 800a886:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800a888:	f7fe bb4b 	b.w	8008f22 <_Transform_Sha512+0x5c2>
 800a88c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800a88e:	9212      	str	r2, [sp, #72]	; 0x48
 800a890:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800a892:	f7fe bc2f 	b.w	80090f4 <_Transform_Sha512+0x794>
        R( 4); R( 5); R( 6); R( 7);
 800a896:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a898:	911a      	str	r1, [sp, #104]	; 0x68
 800a89a:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800a89c:	f7fe bd13 	b.w	80092c6 <_Transform_Sha512+0x966>
 800a8a0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800a8a2:	9114      	str	r1, [sp, #80]	; 0x50
 800a8a4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800a8a6:	f7fe bdef 	b.w	8009488 <_Transform_Sha512+0xb28>
 800a8aa:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800a8ac:	9115      	str	r1, [sp, #84]	; 0x54
 800a8ae:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800a8b0:	f7fe bece 	b.w	8009650 <_Transform_Sha512+0xcf0>
 800a8b4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800a8b6:	9116      	str	r1, [sp, #88]	; 0x58
 800a8b8:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800a8ba:	f7fe bfac 	b.w	8009816 <_Transform_Sha512+0xeb6>
        R( 8); R( 9); R(10); R(11);
 800a8be:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800a8c2:	911b      	str	r1, [sp, #108]	; 0x6c
 800a8c4:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800a8c8:	f7ff b88c 	b.w	80099e4 <_Transform_Sha512+0x1084>
 800a8cc:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800a8d0:	921c      	str	r2, [sp, #112]	; 0x70
 800a8d2:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800a8d6:	f7ff b964 	b.w	8009ba2 <_Transform_Sha512+0x1242>
 800a8da:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800a8de:	921d      	str	r2, [sp, #116]	; 0x74
 800a8e0:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800a8e4:	f7ff ba41 	b.w	8009d6a <_Transform_Sha512+0x140a>
 800a8e8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a8ec:	921e      	str	r2, [sp, #120]	; 0x78
 800a8ee:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 800a8f2:	920e      	str	r2, [sp, #56]	; 0x38
 800a8f4:	f7ff bb23 	b.w	8009f3e <_Transform_Sha512+0x15de>
        R(12); R(13); R(14); R(15);
 800a8f8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800a8fc:	9113      	str	r1, [sp, #76]	; 0x4c
 800a8fe:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800a902:	f7ff bbfd 	b.w	800a100 <_Transform_Sha512+0x17a0>
 800a906:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 800a90a:	921f      	str	r2, [sp, #124]	; 0x7c
 800a90c:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 800a910:	920f      	str	r2, [sp, #60]	; 0x3c
 800a912:	e4da      	b.n	800a2ca <_Transform_Sha512+0x196a>
 800a914:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 800a918:	9220      	str	r2, [sp, #128]	; 0x80
 800a91a:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800a91e:	9210      	str	r2, [sp, #64]	; 0x40
 800a920:	e5b1      	b.n	800a486 <_Transform_Sha512+0x1b26>
 800a922:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 800a926:	9221      	str	r2, [sp, #132]	; 0x84
 800a928:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 800a92c:	9211      	str	r2, [sp, #68]	; 0x44
 800a92e:	e68b      	b.n	800a648 <_Transform_Sha512+0x1ce8>
 800a930:	f803 1b01 	strb.w	r1, [r3], #1
 800a934:	e789      	b.n	800a84a <_Transform_Sha512+0x1eea>
 800a936:	7011      	strb	r1, [r2, #0]
 800a938:	e78b      	b.n	800a852 <_Transform_Sha512+0x1ef2>
        return MEMORY_E;
 800a93a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800a93e:	e792      	b.n	800a866 <_Transform_Sha512+0x1f06>

0800a940 <Sha512_Family_Final>:
    return Sha512FinalRaw(sha512, hash, WC_SHA512_DIGEST_SIZE);
}

static int Sha512_Family_Final(wc_Sha512* sha512, byte* hash, size_t digestSz,
                               int (*initfp)(wc_Sha512*))
{
 800a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	460e      	mov	r6, r1
 800a946:	4690      	mov	r8, r2
 800a948:	461f      	mov	r7, r3
    int ret;

    if (sha512 == NULL || hash == NULL) {
 800a94a:	4604      	mov	r4, r0
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d061      	beq.n	800aa14 <Sha512_Family_Final+0xd4>
 800a950:	2900      	cmp	r1, #0
 800a952:	d05f      	beq.n	800aa14 <Sha512_Family_Final+0xd4>
    if (sha512->buffLen > WC_SHA512_BLOCK_SIZE - 1) {
 800a954:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800a958:	2b7f      	cmp	r3, #127	; 0x7f
    local = (byte*)sha512->buffer;
 800a95a:	f100 0940 	add.w	r9, r0, #64	; 0x40
    if (sha512->buffLen > WC_SHA512_BLOCK_SIZE - 1) {
 800a95e:	d85d      	bhi.n	800aa1c <Sha512_Family_Final+0xdc>
    local[sha512->buffLen++] = 0x80;  /* add 1 */
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	2580      	movs	r5, #128	; 0x80
 800a964:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800a968:	f809 5003 	strb.w	r5, [r9, r3]
    if (sha512->buffLen > WC_SHA512_PAD_SIZE) {
 800a96c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800a970:	2870      	cmp	r0, #112	; 0x70
 800a972:	d912      	bls.n	800a99a <Sha512_Family_Final+0x5a>
        XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 800a974:	1a2a      	subs	r2, r5, r0
 800a976:	2100      	movs	r1, #0
 800a978:	4448      	add	r0, r9
 800a97a:	f008 fc49 	bl	8013210 <memset>
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 800a97e:	4648      	mov	r0, r9
        sha512->buffLen += WC_SHA512_BLOCK_SIZE - sha512->buffLen;
 800a980:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 800a984:	462a      	mov	r2, r5
 800a986:	4649      	mov	r1, r9
 800a988:	f7fd ffda 	bl	8008940 <ByteReverseWords64>
        ret = Transform_Sha512(sha512);
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7fd ffe7 	bl	8008960 <_Transform_Sha512>
        if (ret != 0)
 800a992:	2800      	cmp	r0, #0
 800a994:	d140      	bne.n	800aa18 <Sha512_Family_Final+0xd8>
        sha512->buffLen = 0;
 800a996:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_PAD_SIZE - sha512->buffLen);
 800a99a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 800a99e:	2100      	movs	r1, #0
 800a9a0:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 800a9a4:	4448      	add	r0, r9
 800a9a6:	f008 fc33 	bl	8013210 <memset>
                                                         (sha512->hiLen << 3);
 800a9aa:	e9d4 5334 	ldrd	r5, r3, [r4, #208]	; 0xd0
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800a9ae:	e9d4 1232 	ldrd	r1, r2, [r4, #200]	; 0xc8
                                                         (sha512->hiLen << 3);
 800a9b2:	00db      	lsls	r3, r3, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800a9b4:	0f50      	lsrs	r0, r2, #29
                                                         (sha512->hiLen << 3);
 800a9b6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800a9ba:	00ed      	lsls	r5, r5, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800a9bc:	182d      	adds	r5, r5, r0
    sha512->loLen = sha512->loLen << 3;
 800a9be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800a9c2:	f143 0300 	adc.w	r3, r3, #0
    sha512->loLen = sha512->loLen << 3;
 800a9c6:	ea42 7251 	orr.w	r2, r2, r1, lsr #29
 800a9ca:	00c9      	lsls	r1, r1, #3
 800a9cc:	e9c4 1232 	strd	r1, r2, [r4, #200]	; 0xc8
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800a9d0:	e9c4 5334 	strd	r5, r3, [r4, #208]	; 0xd0
            ByteReverseWords64(sha512->buffer, sha512->buffer, WC_SHA512_PAD_SIZE);
 800a9d4:	2270      	movs	r2, #112	; 0x70
 800a9d6:	4648      	mov	r0, r9
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7fd ffb1 	bl	8008940 <ByteReverseWords64>
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
 800a9de:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	; 0xd0
 800a9e2:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 800a9e6:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
    ret = Transform_Sha512(sha512);
 800a9ea:	4620      	mov	r0, r4
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 800a9ec:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
    ret = Transform_Sha512(sha512);
 800a9f0:	f7fd ffb6 	bl	8008960 <_Transform_Sha512>
    if (ret != 0)
 800a9f4:	b980      	cbnz	r0, 800aa18 <Sha512_Family_Final+0xd8>
        ByteReverseWords64(sha512->digest, sha512->digest, WC_SHA512_DIGEST_SIZE);
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	2240      	movs	r2, #64	; 0x40
 800a9fc:	f7fd ffa0 	bl	8008940 <ByteReverseWords64>

    ret = Sha512Final(sha512);
    if (ret != 0)
        return ret;

    XMEMCPY(hash, sha512->digest, digestSz);
 800aa00:	4642      	mov	r2, r8
 800aa02:	4621      	mov	r1, r4
 800aa04:	4630      	mov	r0, r6
 800aa06:	f008 fbdb 	bl	80131c0 <memcpy>

    /* initialize Sha512 structure for the next use */
    return initfp(sha512);
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	463b      	mov	r3, r7
}
 800aa0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return initfp(sha512);
 800aa12:	4718      	bx	r3
        return BAD_FUNC_ARG;
 800aa14:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800aa18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_STATE_E;
 800aa1c:	f06f 00bf 	mvn.w	r0, #191	; 0xbf
 800aa20:	e7fa      	b.n	800aa18 <Sha512_Family_Final+0xd8>
	...

0800aa24 <wc_Sha512Final>:

int wc_Sha512Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_DIGEST_SIZE, InitSha512);
 800aa24:	4b01      	ldr	r3, [pc, #4]	; (800aa2c <wc_Sha512Final+0x8>)
 800aa26:	2240      	movs	r2, #64	; 0x40
 800aa28:	f7ff bf8a 	b.w	800a940 <Sha512_Family_Final>
 800aa2c:	08008719 	.word	0x08008719

0800aa30 <wc_Sha512_224Final>:
    return Sha512FinalRaw(sha, hash, WC_SHA512_224_DIGEST_SIZE);
}

int wc_Sha512_224Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_224_DIGEST_SIZE,
 800aa30:	4b01      	ldr	r3, [pc, #4]	; (800aa38 <wc_Sha512_224Final+0x8>)
 800aa32:	221c      	movs	r2, #28
 800aa34:	f7ff bf84 	b.w	800a940 <Sha512_Family_Final>
 800aa38:	080087d1 	.word	0x080087d1

0800aa3c <wc_Sha512_256Final>:
    return Sha512FinalRaw(sha, hash, WC_SHA512_256_DIGEST_SIZE);
}

int wc_Sha512_256Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_256_DIGEST_SIZE,
 800aa3c:	4b01      	ldr	r3, [pc, #4]	; (800aa44 <wc_Sha512_256Final+0x8>)
 800aa3e:	2220      	movs	r2, #32
 800aa40:	f7ff bf7e 	b.w	800a940 <Sha512_Family_Final>
 800aa44:	08008889 	.word	0x08008889

0800aa48 <wc_InitSha512_ex>:
    if (sha512 == NULL) {
 800aa48:	b118      	cbz	r0, 800aa52 <wc_InitSha512_ex+0xa>
    sha512->heap = heap;
 800aa4a:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 800aa4e:	f7fd be63 	b.w	8008718 <InitSha512>
}
 800aa52:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800aa56:	4770      	bx	lr

0800aa58 <wc_InitSha512_224_ex>:
    if (sha512 == NULL) {
 800aa58:	b118      	cbz	r0, 800aa62 <wc_InitSha512_224_ex+0xa>
    sha512->heap = heap;
 800aa5a:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 800aa5e:	f7fd beb7 	b.w	80087d0 <InitSha512_224>
}
 800aa62:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800aa66:	4770      	bx	lr

0800aa68 <wc_InitSha512_256_ex>:
    if (sha512 == NULL) {
 800aa68:	b118      	cbz	r0, 800aa72 <wc_InitSha512_256_ex+0xa>
    sha512->heap = heap;
 800aa6a:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 800aa6e:	f7fd bf0b 	b.w	8008888 <InitSha512_256>
}
 800aa72:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800aa76:	4770      	bx	lr

0800aa78 <wc_Sha512Update>:
{
 800aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	460e      	mov	r6, r1
 800aa7e:	4614      	mov	r4, r2
    if (sha512 == NULL || (data == NULL && len > 0)) {
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d05c      	beq.n	800ab40 <wc_Sha512Update+0xc8>
 800aa86:	b909      	cbnz	r1, 800aa8c <wc_Sha512Update+0x14>
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	d159      	bne.n	800ab40 <wc_Sha512Update+0xc8>
    if (sha512->buffLen >= WC_SHA512_BLOCK_SIZE)
 800aa8c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 800aa90:	287f      	cmp	r0, #127	; 0x7f
 800aa92:	d858      	bhi.n	800ab46 <wc_Sha512Update+0xce>
    if (len == 0)
 800aa94:	b90c      	cbnz	r4, 800aa9a <wc_Sha512Update+0x22>
        sha512->buffLen = len;
 800aa96:	2000      	movs	r0, #0
 800aa98:	e050      	b.n	800ab3c <wc_Sha512Update+0xc4>
    if ( (sha512->loLen += len) < tmp)
 800aa9a:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
 800aa9e:	191b      	adds	r3, r3, r4
 800aaa0:	f152 0200 	adcs.w	r2, r2, #0
 800aaa4:	f04f 0100 	mov.w	r1, #0
 800aaa8:	bf28      	it	cs
 800aaaa:	2101      	movcs	r1, #1
 800aaac:	e9c5 3232 	strd	r3, r2, [r5, #200]	; 0xc8
 800aab0:	b131      	cbz	r1, 800aac0 <wc_Sha512Update+0x48>
        sha512->hiLen++;                       /* carry low to high */
 800aab2:	e9d5 3234 	ldrd	r3, r2, [r5, #208]	; 0xd0
 800aab6:	3301      	adds	r3, #1
 800aab8:	f142 0200 	adc.w	r2, r2, #0
 800aabc:	e9c5 3234 	strd	r3, r2, [r5, #208]	; 0xd0
    byte* local = (byte*)sha512->buffer;
 800aac0:	f105 0740 	add.w	r7, r5, #64	; 0x40
    if (sha512->buffLen > 0) {
 800aac4:	b1e8      	cbz	r0, 800ab02 <wc_Sha512Update+0x8a>
        word32 add = min(len, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 800aac6:	f1c0 0880 	rsb	r8, r0, #128	; 0x80
        return a > b ? b : a;
 800aaca:	45a0      	cmp	r8, r4
 800aacc:	bf28      	it	cs
 800aace:	46a0      	movcs	r8, r4
            XMEMCPY(&local[sha512->buffLen], data, add);
 800aad0:	4642      	mov	r2, r8
 800aad2:	4631      	mov	r1, r6
 800aad4:	4438      	add	r0, r7
 800aad6:	f008 fb73 	bl	80131c0 <memcpy>
            sha512->buffLen += add;
 800aada:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 800aade:	4442      	add	r2, r8
        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 800aae0:	2a80      	cmp	r2, #128	; 0x80
            sha512->buffLen += add;
 800aae2:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
            data            += add;
 800aae6:	4446      	add	r6, r8
            len             -= add;
 800aae8:	eba4 0408 	sub.w	r4, r4, r8
        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 800aaec:	d109      	bne.n	800ab02 <wc_Sha512Update+0x8a>
                ByteReverseWords64(sha512->buffer, sha512->buffer,
 800aaee:	4638      	mov	r0, r7
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	f7fd ff25 	bl	8008940 <ByteReverseWords64>
            ret = Transform_Sha512(sha512);
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f7fd ff32 	bl	8008960 <_Transform_Sha512>
            if (ret == 0)
 800aafc:	b9f0      	cbnz	r0, 800ab3c <wc_Sha512Update+0xc4>
                sha512->buffLen = 0;
 800aafe:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ab02:	4426      	add	r6, r4
        while (len >= WC_SHA512_BLOCK_SIZE) {
 800ab04:	2c7f      	cmp	r4, #127	; 0x7f
 800ab06:	eba6 0104 	sub.w	r1, r6, r4
 800ab0a:	d808      	bhi.n	800ab1e <wc_Sha512Update+0xa6>
    if (ret == 0 && len > 0) {
 800ab0c:	2c00      	cmp	r4, #0
 800ab0e:	d0c2      	beq.n	800aa96 <wc_Sha512Update+0x1e>
        XMEMCPY(local, data, len);
 800ab10:	4622      	mov	r2, r4
 800ab12:	4638      	mov	r0, r7
 800ab14:	f008 fb54 	bl	80131c0 <memcpy>
        sha512->buffLen = len;
 800ab18:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 800ab1c:	e7bb      	b.n	800aa96 <wc_Sha512Update+0x1e>
            XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 800ab1e:	2280      	movs	r2, #128	; 0x80
 800ab20:	4638      	mov	r0, r7
 800ab22:	f008 fb4d 	bl	80131c0 <memcpy>
            ByteReverseWords64(sha512->buffer, sha512->buffer,
 800ab26:	4638      	mov	r0, r7
 800ab28:	2280      	movs	r2, #128	; 0x80
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7fd ff08 	bl	8008940 <ByteReverseWords64>
            ret = Transform_Sha512(sha512);
 800ab30:	4628      	mov	r0, r5
            len  -= WC_SHA512_BLOCK_SIZE;
 800ab32:	3c80      	subs	r4, #128	; 0x80
            ret = Transform_Sha512(sha512);
 800ab34:	f7fd ff14 	bl	8008960 <_Transform_Sha512>
            if (ret != 0)
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d0e3      	beq.n	800ab04 <wc_Sha512Update+0x8c>
}
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BAD_FUNC_ARG;
 800ab40:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800ab44:	e7fa      	b.n	800ab3c <wc_Sha512Update+0xc4>
        return BUFFER_E;
 800ab46:	f06f 0083 	mvn.w	r0, #131	; 0x83
 800ab4a:	e7f7      	b.n	800ab3c <wc_Sha512Update+0xc4>

0800ab4c <wc_Sha512Free>:
    if (sha512 == NULL)
 800ab4c:	b120      	cbz	r0, 800ab58 <wc_Sha512Free+0xc>
 800ab4e:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    while (len--) *z++ = 0;
 800ab52:	2200      	movs	r2, #0
 800ab54:	4298      	cmp	r0, r3
 800ab56:	d100      	bne.n	800ab5a <wc_Sha512Free+0xe>
}
 800ab58:	4770      	bx	lr
 800ab5a:	f800 2b01 	strb.w	r2, [r0], #1
 800ab5e:	e7f9      	b.n	800ab54 <wc_Sha512Free+0x8>

0800ab60 <wc_Sha512_224Update>:
    return wc_Sha512Update(sha, data, len);
 800ab60:	f7ff bf8a 	b.w	800aa78 <wc_Sha512Update>

0800ab64 <wc_Sha512_224Free>:
    wc_Sha512Free(sha);
 800ab64:	f7ff bff2 	b.w	800ab4c <wc_Sha512Free>

0800ab68 <wc_Sha512_256Update>:
 800ab68:	f7ff bf86 	b.w	800aa78 <wc_Sha512Update>

0800ab6c <wc_Sha512_256Free>:
 800ab6c:	f7ff bfee 	b.w	800ab4c <wc_Sha512Free>

0800ab70 <GetLength_ex>:
 * @return  ASN_PARSE_E if the encoding is invalid.
 * @return  BUFFER_E when not enough data to complete decode.
 */
int GetLength_ex(const byte* input, word32* inOutIdx, int* len, word32 maxIdx,
                 int check)
{
 800ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
    int     length = 0;
    word32  idx = (word32)*inOutIdx;
 800ab72:	680f      	ldr	r7, [r1, #0]
    /* Ensure zero return length on error. */
    *len = 0;

    /* Check there is at least one byte available containing length information.
     */
    if ((idx + 1) > maxIdx) {
 800ab74:	1c7e      	adds	r6, r7, #1
    *len = 0;
 800ab76:	2400      	movs	r4, #0
    if ((idx + 1) > maxIdx) {
 800ab78:	429e      	cmp	r6, r3
{
 800ab7a:	4605      	mov	r5, r0
    *len = 0;
 800ab7c:	6014      	str	r4, [r2, #0]
    if ((idx + 1) > maxIdx) {
 800ab7e:	d82f      	bhi.n	800abe0 <GetLength_ex+0x70>
    }

    /* Get the first length byte. */
    b = input[idx++];
    /* Check if the first byte indicates the count of bytes. */
    if (b >= ASN_LONG_LENGTH) {
 800ab80:	57ed      	ldrsb	r5, [r5, r7]
 800ab82:	42a5      	cmp	r5, r4
    b = input[idx++];
 800ab84:	eb00 0c07 	add.w	ip, r0, r7
 800ab88:	5dc0      	ldrb	r0, [r0, r7]
    if (b >= ASN_LONG_LENGTH) {
 800ab8a:	da15      	bge.n	800abb8 <GetLength_ex+0x48>
         */
        word32 bytes = (word32)b & 0x7FU;
        int minLen;

        /* Calculate minimum length to be encoded with bytes. */
        if (b == ASN_INDEF_LENGTH) {
 800ab8c:	2880      	cmp	r0, #128	; 0x80
 800ab8e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800ab92:	d007      	beq.n	800aba4 <GetLength_ex+0x34>
            /* Indefinite length encoding - no length bytes. */
            minLen = 0;
        }
        else if (bytes == 1) {
 800ab94:	2d01      	cmp	r5, #1
 800ab96:	d019      	beq.n	800abcc <GetLength_ex+0x5c>
            minLen = 0x80;
        }
        /* Only support up to the number of bytes that fit into return var. */
        else if (bytes > sizeof(length)) {
 800ab98:	2d04      	cmp	r5, #4
 800ab9a:	d81e      	bhi.n	800abda <GetLength_ex+0x6a>
            WOLFSSL_MSG("GetLength - overlong data length spec");
            return ASN_PARSE_E;
        } else {
            minLen = 1 << ((bytes - 1) * 8);
 800ab9c:	1e6c      	subs	r4, r5, #1
 800ab9e:	00e0      	lsls	r0, r4, #3
 800aba0:	2401      	movs	r4, #1
 800aba2:	4084      	lsls	r4, r0
        }

        /* Check the number of bytes required are available. */
        if ((idx + bytes) > maxIdx) {
 800aba4:	442e      	add	r6, r5
 800aba6:	429e      	cmp	r6, r3
 800aba8:	d81a      	bhi.n	800abe0 <GetLength_ex+0x70>
    int     length = 0;
 800abaa:	2000      	movs	r0, #0
            WOLFSSL_MSG("GetLength - bad long length");
            return BUFFER_E;
        }

        /* Big-endian encoding of number. */
        while (bytes--) {
 800abac:	3d01      	subs	r5, #1
 800abae:	d20f      	bcs.n	800abd0 <GetLength_ex+0x60>
            b = input[idx++];
            length = (length << 8) | b;
        }
        /* Negative value indicates we overflowed the signed int. */
        if (length < 0) {
 800abb0:	2800      	cmp	r0, #0
 800abb2:	db12      	blt.n	800abda <GetLength_ex+0x6a>
            return ASN_PARSE_E;
        }
        /* Don't allow lengths that are longer than strictly required. */
        if (length < minLen) {
 800abb4:	42a0      	cmp	r0, r4
 800abb6:	db10      	blt.n	800abda <GetLength_ex+0x6a>
        /* Length in first byte. */
        length = b;
    }

    /* When requested, check the buffer has at least length bytes left. */
    if (check && ((idx + (word32)length) > maxIdx)) {
 800abb8:	9c05      	ldr	r4, [sp, #20]
 800abba:	b114      	cbz	r4, 800abc2 <GetLength_ex+0x52>
 800abbc:	1984      	adds	r4, r0, r6
 800abbe:	429c      	cmp	r4, r3
 800abc0:	d80e      	bhi.n	800abe0 <GetLength_ex+0x70>
    }

    /* Return index after length encoding. */
    *inOutIdx = idx;
    /* Return length if valid. */
    if (length > 0) {
 800abc2:	2800      	cmp	r0, #0
    *inOutIdx = idx;
 800abc4:	600e      	str	r6, [r1, #0]
    if (length > 0) {
 800abc6:	dd00      	ble.n	800abca <GetLength_ex+0x5a>
        *len = length;
 800abc8:	6010      	str	r0, [r2, #0]
    }

    /* Return length calculated or error code. */
    return length;
}
 800abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            minLen = 0x80;
 800abcc:	2480      	movs	r4, #128	; 0x80
 800abce:	e7e9      	b.n	800aba4 <GetLength_ex+0x34>
            length = (length << 8) | b;
 800abd0:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800abd4:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
 800abd8:	e7e8      	b.n	800abac <GetLength_ex+0x3c>
            return ASN_PARSE_E;
 800abda:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800abde:	e7f4      	b.n	800abca <GetLength_ex+0x5a>
        return BUFFER_E;
 800abe0:	f06f 0083 	mvn.w	r0, #131	; 0x83
 800abe4:	e7f1      	b.n	800abca <GetLength_ex+0x5a>

0800abe6 <GetASNTag>:
 * return  0 on success
 * return  BAD_FUNC_ARG when tag, inOutIdx or input is NULL.
 * return  BUFFER_E when not enough space in buffer for tag.
 */
int GetASNTag(const byte* input, word32* inOutIdx, byte* tag, word32 maxIdx)
{
 800abe6:	b530      	push	{r4, r5, lr}
    int ret = 0;
    word32 idx = 0;

    /* Check validity of parameters. */
    if ((tag == NULL) || (inOutIdx == NULL) || (input == NULL)) {
 800abe8:	b152      	cbz	r2, 800ac00 <GetASNTag+0x1a>
 800abea:	b149      	cbz	r1, 800ac00 <GetASNTag+0x1a>
 800abec:	b140      	cbz	r0, 800ac00 <GetASNTag+0x1a>
        ret = BAD_FUNC_ARG;
    }
    if (ret == 0) {
        /* Get index and ensure space for tag. */
        idx = *inOutIdx;
 800abee:	680d      	ldr	r5, [r1, #0]
        if (idx + ASN_TAG_SZ > maxIdx) {
 800abf0:	1c6c      	adds	r4, r5, #1
 800abf2:	429c      	cmp	r4, r3
 800abf4:	d807      	bhi.n	800ac06 <GetASNTag+0x20>
            ret = BUFFER_E;
        }
    }
    if (ret == 0) {
        /* Return the tag and the index after tag. */
        *tag = input[idx];
 800abf6:	5d43      	ldrb	r3, [r0, r5]
 800abf8:	7013      	strb	r3, [r2, #0]
        *inOutIdx = idx + ASN_TAG_SZ;
 800abfa:	2000      	movs	r0, #0
 800abfc:	600c      	str	r4, [r1, #0]
    }
    /* Return error code. */
    return ret;
}
 800abfe:	bd30      	pop	{r4, r5, pc}
        ret = BAD_FUNC_ARG;
 800ac00:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800ac04:	e7fb      	b.n	800abfe <GetASNTag+0x18>
            ret = BUFFER_E;
 800ac06:	f06f 0083 	mvn.w	r0, #131	; 0x83
    return ret;
 800ac0a:	e7f8      	b.n	800abfe <GetASNTag+0x18>

0800ac0c <GetASNHeader_ex>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the expected tag is not found or length is invalid.
 */
static int GetASNHeader_ex(const byte* input, byte tag, word32* inOutIdx,
                           int* len, word32 maxIdx, int check)
{
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	b086      	sub	sp, #24
 800ac12:	461d      	mov	r5, r3
 800ac14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    int    ret = 0;
    word32 idx = *inOutIdx;
 800ac18:	6813      	ldr	r3, [r2, #0]
 800ac1a:	9304      	str	r3, [sp, #16]
    byte   tagFound;
    int    length = 0;
 800ac1c:	2300      	movs	r3, #0
{
 800ac1e:	460f      	mov	r7, r1
 800ac20:	4614      	mov	r4, r2
    int    length = 0;
 800ac22:	9305      	str	r3, [sp, #20]

    /* Get tag/type. */
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 800ac24:	f10d 020f 	add.w	r2, sp, #15
 800ac28:	4643      	mov	r3, r8
 800ac2a:	a904      	add	r1, sp, #16
{
 800ac2c:	4606      	mov	r6, r0
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 800ac2e:	f7ff ffda 	bl	800abe6 <GetASNTag>
 800ac32:	b120      	cbz	r0, 800ac3e <GetASNHeader_ex+0x32>
{
 800ac34:	f06f 008b 	mvn.w	r0, #139	; 0x8b
        *inOutIdx = idx;
        ret = length;
    }
    /* Return number of data bytes or error code. */
    return ret;
}
 800ac38:	b006      	add	sp, #24
 800ac3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret == 0) && (tagFound != tag)) {
 800ac3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ac42:	42bb      	cmp	r3, r7
 800ac44:	d1f6      	bne.n	800ac34 <GetASNHeader_ex+0x28>
    if ((ret == 0) && (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)) {
 800ac46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	aa05      	add	r2, sp, #20
 800ac4c:	4643      	mov	r3, r8
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f7ff ff8e 	bl	800ab70 <GetLength_ex>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	dbed      	blt.n	800ac34 <GetASNHeader_ex+0x28>
        *len      = length;
 800ac58:	9805      	ldr	r0, [sp, #20]
        *inOutIdx = idx;
 800ac5a:	9b04      	ldr	r3, [sp, #16]
        *len      = length;
 800ac5c:	6028      	str	r0, [r5, #0]
        *inOutIdx = idx;
 800ac5e:	6023      	str	r3, [r4, #0]
    return ret;
 800ac60:	e7ea      	b.n	800ac38 <GetASNHeader_ex+0x2c>

0800ac62 <GetSequence>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a SEQUENCE or length is invalid.
 */
int GetSequence(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
 800ac62:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800ac64:	2401      	movs	r4, #1
 800ac66:	e9cd 3400 	strd	r3, r4, [sp]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	460a      	mov	r2, r1
 800ac6e:	2130      	movs	r1, #48	; 0x30
 800ac70:	f7ff ffcc 	bl	800ac0c <GetASNHeader_ex>
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
                        maxIdx);
}
 800ac74:	b002      	add	sp, #8
 800ac76:	bd10      	pop	{r4, pc}

0800ac78 <GetASNInt>:
 *         or invalid use of or missing leading zero.
 *         Otherwise, 0 to indicate success.
 */
int GetASNInt(const byte* input, word32* inOutIdx, int* len,
                     word32 maxIdx)
{
 800ac78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac7a:	4616      	mov	r6, r2
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	e9cd 3200 	strd	r3, r2, [sp]
{
 800ac82:	460d      	mov	r5, r1
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800ac84:	460a      	mov	r2, r1
 800ac86:	4633      	mov	r3, r6
 800ac88:	2102      	movs	r1, #2
{
 800ac8a:	4607      	mov	r7, r0
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800ac8c:	f7ff ffbe 	bl	800ac0c <GetASNHeader_ex>
    int    ret;

    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
    if (ret < 0)
 800ac90:	2800      	cmp	r0, #0
 800ac92:	db0f      	blt.n	800acb4 <GetASNInt+0x3c>
        return ret;

    if (*len > 0) {
 800ac94:	6832      	ldr	r2, [r6, #0]
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	dd1a      	ble.n	800acd0 <GetASNInt+0x58>
#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
        /* check for invalid padding on negative integer.
         * c.f. X.690 (ISO/IEC 8825-2:2003 (E)) 10.4.6; RFC 5280 4.1
         */
        if (*len > 1) {
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 800ac9a:	682c      	ldr	r4, [r5, #0]
        if (*len > 1) {
 800ac9c:	2a01      	cmp	r2, #1
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 800ac9e:	5d3b      	ldrb	r3, [r7, r4]
        if (*len > 1) {
 800aca0:	d016      	beq.n	800acd0 <GetASNInt+0x58>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 800aca2:	2bff      	cmp	r3, #255	; 0xff
 800aca4:	d108      	bne.n	800acb8 <GetASNInt+0x40>
 800aca6:	443c      	add	r4, r7
 800aca8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da0f      	bge.n	800acd0 <GetASNInt+0x58>
                return ASN_PARSE_E;
 800acb0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
#endif
        }
    }

    return 0;
}
 800acb4:	b003      	add	sp, #12
 800acb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
 800acb8:	b953      	cbnz	r3, 800acd0 <GetASNInt+0x58>
            (*inOutIdx)++;
 800acba:	3401      	adds	r4, #1
 800acbc:	602c      	str	r4, [r5, #0]
            (*len)--;
 800acbe:	6833      	ldr	r3, [r6, #0]
 800acc0:	3b01      	subs	r3, #1
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 800acc2:	2b00      	cmp	r3, #0
            (*len)--;
 800acc4:	6033      	str	r3, [r6, #0]
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 800acc6:	dd03      	ble.n	800acd0 <GetASNInt+0x58>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	56fb      	ldrsb	r3, [r7, r3]
 800accc:	2b00      	cmp	r3, #0
 800acce:	daef      	bge.n	800acb0 <GetASNInt+0x38>
    return 0;
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7ef      	b.n	800acb4 <GetASNInt+0x3c>

0800acd4 <GetIntPositive>:
}

#if (defined(HAVE_ECC) || !defined(NO_DSA)) && !defined(WOLFSSL_ASN_TEMPLATE)
static int GetIntPositive(mp_int* mpi, const byte* input, word32* inOutIdx,
    word32 maxIdx, int initNum)
{
 800acd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	4617      	mov	r7, r2
    word32 idx = *inOutIdx;
 800acdc:	6812      	ldr	r2, [r2, #0]
 800acde:	9200      	str	r2, [sp, #0]
{
 800ace0:	4606      	mov	r6, r0
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
 800ace2:	aa01      	add	r2, sp, #4
 800ace4:	4669      	mov	r1, sp
 800ace6:	4620      	mov	r0, r4
{
 800ace8:	9d08      	ldr	r5, [sp, #32]
 800acea:	4698      	mov	r8, r3
    ret = GetASNInt(input, &idx, &length, maxIdx);
 800acec:	f7ff ffc4 	bl	800ac78 <GetASNInt>
    if (ret != 0)
 800acf0:	b930      	cbnz	r0, 800ad00 <GetIntPositive+0x2c>
        return ret;

    /* should not be hit but adding in an additional sanity check */
    if (idx + length > maxIdx) {
 800acf2:	e9dd 1300 	ldrd	r1, r3, [sp]
 800acf6:	440b      	add	r3, r1
 800acf8:	4543      	cmp	r3, r8
 800acfa:	d904      	bls.n	800ad06 <GetIntPositive+0x32>
        return MP_INIT_E;
 800acfc:	f06f 006d 	mvn.w	r0, #109	; 0x6d
#endif /* HAVE_WOLF_BIGINT */

    *inOutIdx = idx + (word32)length;

    return 0;
}
 800ad00:	b002      	add	sp, #8
 800ad02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((input[idx] & 0x80) == 0x80) {
 800ad06:	5663      	ldrsb	r3, [r4, r1]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da06      	bge.n	800ad1a <GetIntPositive+0x46>
        if (idx < 1) {
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d0f5      	beq.n	800acfc <GetIntPositive+0x28>
        if (input[idx - 1] != 0x00) {
 800ad10:	4421      	add	r1, r4
 800ad12:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f0      	bne.n	800acfc <GetIntPositive+0x28>
    if (initNum) {
 800ad1a:	b965      	cbnz	r5, 800ad36 <GetIntPositive+0x62>
    if (mp_read_unsigned_bin(mpi, input + idx, (word32)length) != 0) {
 800ad1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad20:	4630      	mov	r0, r6
 800ad22:	4421      	add	r1, r4
 800ad24:	f006 f9d6 	bl	80110d4 <mp_read_unsigned_bin>
 800ad28:	b158      	cbz	r0, 800ad42 <GetIntPositive+0x6e>
        mp_clear(mpi);
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f006 f99e 	bl	801106c <mp_clear>
        return ASN_GETINT_E;
 800ad30:	f06f 008d 	mvn.w	r0, #141	; 0x8d
 800ad34:	e7e4      	b.n	800ad00 <GetIntPositive+0x2c>
        if (mp_init(mpi) != MP_OKAY)
 800ad36:	4630      	mov	r0, r6
 800ad38:	f006 f983 	bl	8011042 <mp_init>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d0ed      	beq.n	800ad1c <GetIntPositive+0x48>
 800ad40:	e7dc      	b.n	800acfc <GetIntPositive+0x28>
    *inOutIdx = idx + (word32)length;
 800ad42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad46:	4413      	add	r3, r2
 800ad48:	603b      	str	r3, [r7, #0]
    return 0;
 800ad4a:	e7d9      	b.n	800ad00 <GetIntPositive+0x2c>

0800ad4c <SetLength>:
word32 SetLength(word32 length, byte* output)
{
    /* Start encoding at start of buffer. */
    word32 i = 0;

    if (length < ASN_LONG_LENGTH) {
 800ad4c:	287f      	cmp	r0, #127	; 0x7f
{
 800ad4e:	b570      	push	{r4, r5, r6, lr}
    if (length < ASN_LONG_LENGTH) {
 800ad50:	d91c      	bls.n	800ad8c <SetLength+0x40>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 800ad52:	0c03      	lsrs	r3, r0, #16
 800ad54:	d11e      	bne.n	800ad94 <SetLength+0x48>
 800ad56:	0a03      	lsrs	r3, r0, #8
 800ad58:	bf0c      	ite	eq
 800ad5a:	2301      	moveq	r3, #1
 800ad5c:	2302      	movne	r3, #2
        /* Skip over length. */
        i++;
    }
    else {
        /* Calculate the number of bytes required to encode value. */
        byte j = (byte)BytePrecision(length);
 800ad5e:	b2da      	uxtb	r2, r3

        if (output) {
 800ad60:	b111      	cbz	r1, 800ad68 <SetLength+0x1c>
            /* Encode count byte. */
            output[i] = (byte)(j | ASN_LONG_LENGTH);
 800ad62:	f062 047f 	orn	r4, r2, #127	; 0x7f
 800ad66:	700c      	strb	r4, [r1, #0]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	1c4d      	adds	r5, r1, #1
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 800ad6e:	4614      	mov	r4, r2
        /* Skip over count byte. */
        i++;

        /* Encode value as a big-endian byte array. */
        for (; j > 0; --j) {
            if (output) {
 800ad70:	b111      	cbz	r1, 800ad78 <SetLength+0x2c>
                /* Encode next most-significant byte. */
                output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
 800ad72:	fa20 f603 	lsr.w	r6, r0, r3
 800ad76:	702e      	strb	r6, [r5, #0]
        for (; j > 0; --j) {
 800ad78:	3c01      	subs	r4, #1
 800ad7a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800ad7e:	f1a3 0308 	sub.w	r3, r3, #8
 800ad82:	f105 0501 	add.w	r5, r5, #1
 800ad86:	d1f3      	bne.n	800ad70 <SetLength+0x24>
            }
            /* Skip over byte. */
            i++;
 800ad88:	1c50      	adds	r0, r2, #1
        }
    }

    /* Return number of bytes in encoded length. */
    return i;
}
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
        if (output) {
 800ad8c:	b101      	cbz	r1, 800ad90 <SetLength+0x44>
            output[i] = (byte)length;
 800ad8e:	7008      	strb	r0, [r1, #0]
        i++;
 800ad90:	2001      	movs	r0, #1
    return i;
 800ad92:	e7fa      	b.n	800ad8a <SetLength+0x3e>
    for (i = (word32)sizeof(value) - 1; i; --i)
 800ad94:	2303      	movs	r3, #3
 800ad96:	e7e2      	b.n	800ad5e <SetLength+0x12>

0800ad98 <SetASNInt>:
{
 800ad98:	b538      	push	{r3, r4, r5, lr}
    if (output) {
 800ad9a:	4614      	mov	r4, r2
 800ad9c:	b10a      	cbz	r2, 800ada2 <SetASNInt+0xa>
        output[idx] = ASN_INTEGER;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	7013      	strb	r3, [r2, #0]
    if (firstByte & 0x80) {
 800ada2:	b24d      	sxtb	r5, r1
 800ada4:	2d00      	cmp	r5, #0
        len++;
 800ada6:	bfb8      	it	lt
 800ada8:	3001      	addlt	r0, #1
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 800adaa:	b164      	cbz	r4, 800adc6 <SetASNInt+0x2e>
 800adac:	1c61      	adds	r1, r4, #1
 800adae:	f7ff ffcd 	bl	800ad4c <SetLength>
    if (firstByte & 0x80) {
 800adb2:	2d00      	cmp	r5, #0
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 800adb4:	4603      	mov	r3, r0
 800adb6:	f100 0001 	add.w	r0, r0, #1
    if (firstByte & 0x80) {
 800adba:	da03      	bge.n	800adc4 <SetASNInt+0x2c>
        if (output) {
 800adbc:	b10c      	cbz	r4, 800adc2 <SetASNInt+0x2a>
            output[idx] = 0x00;
 800adbe:	2200      	movs	r2, #0
 800adc0:	5422      	strb	r2, [r4, r0]
        idx++;
 800adc2:	1c98      	adds	r0, r3, #2
}
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 800adc6:	4621      	mov	r1, r4
 800adc8:	e7f1      	b.n	800adae <SetASNInt+0x16>

0800adca <SetASNIntMP>:
{
 800adca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adce:	460d      	mov	r5, r1
 800add0:	4680      	mov	r8, r0
 800add2:	4617      	mov	r7, r2
    leadingBit = mp_leading_bit(n);
 800add4:	f007 f905 	bl	8011fe2 <mp_leading_bit>
 800add8:	4606      	mov	r6, r0
    length = mp_unsigned_bin_size(n);
 800adda:	4640      	mov	r0, r8
 800addc:	f006 f978 	bl	80110d0 <mp_unsigned_bin_size>
    if (maxSz >= 0 && (1 + length + (leadingBit ? 1 : 0)) > maxSz)
 800ade0:	2d00      	cmp	r5, #0
    length = mp_unsigned_bin_size(n);
 800ade2:	4604      	mov	r4, r0
    if (maxSz >= 0 && (1 + length + (leadingBit ? 1 : 0)) > maxSz)
 800ade4:	db09      	blt.n	800adfa <SetASNIntMP+0x30>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	2e00      	cmp	r6, #0
 800adea:	bf18      	it	ne
 800adec:	3301      	addne	r3, #1
 800adee:	42ab      	cmp	r3, r5
 800adf0:	dd03      	ble.n	800adfa <SetASNIntMP+0x30>
        return BUFFER_E;
 800adf2:	f06f 0083 	mvn.w	r0, #131	; 0x83
}
 800adf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    idx = SetASNInt(length, (byte)(leadingBit ? 0x80U : 0x00U), output);
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	bf14      	ite	ne
 800adfe:	2180      	movne	r1, #128	; 0x80
 800ae00:	2100      	moveq	r1, #0
 800ae02:	463a      	mov	r2, r7
 800ae04:	4620      	mov	r0, r4
 800ae06:	f7ff ffc7 	bl	800ad98 <SetASNInt>
    if (maxSz >= 0 && (idx + length) > maxSz)
 800ae0a:	2d00      	cmp	r5, #0
    idx = SetASNInt(length, (byte)(leadingBit ? 0x80U : 0x00U), output);
 800ae0c:	4606      	mov	r6, r0
    if (maxSz >= 0 && (idx + length) > maxSz)
 800ae0e:	db02      	blt.n	800ae16 <SetASNIntMP+0x4c>
 800ae10:	1823      	adds	r3, r4, r0
 800ae12:	42ab      	cmp	r3, r5
 800ae14:	dced      	bgt.n	800adf2 <SetASNIntMP+0x28>
    if (output) {
 800ae16:	b90f      	cbnz	r7, 800ae1c <SetASNIntMP+0x52>
    idx += length;
 800ae18:	19a0      	adds	r0, r4, r6
    return idx;
 800ae1a:	e7ec      	b.n	800adf6 <SetASNIntMP+0x2c>
        int err = mp_to_unsigned_bin(n, output + idx);
 800ae1c:	19b9      	adds	r1, r7, r6
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f007 f8d1 	bl	8011fc6 <mp_to_unsigned_bin>
        if (err != MP_OKAY)
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d0f7      	beq.n	800ae18 <SetASNIntMP+0x4e>
            return MP_TO_E;
 800ae28:	f06f 0070 	mvn.w	r0, #112	; 0x70
 800ae2c:	e7e3      	b.n	800adf6 <SetASNIntMP+0x2c>

0800ae2e <SetHeader>:
 * @param [in]  len     Length of data in ASN.1 item.
 * @param [out] output  Buffer to encode into.
 * @return  Number of bytes encoded.
 */
static word32 SetHeader(byte tag, word32 len, byte* output)
{
 800ae2e:	b508      	push	{r3, lr}
 800ae30:	4603      	mov	r3, r0
 800ae32:	4608      	mov	r0, r1
    if (output) {
 800ae34:	4611      	mov	r1, r2
 800ae36:	b10a      	cbz	r2, 800ae3c <SetHeader+0xe>
        /* Encode tag first. */
        output[0] = tag;
 800ae38:	f801 3b01 	strb.w	r3, [r1], #1
    }
    /* Encode the length. */
    return SetLength(len, output ? output + ASN_TAG_SZ : NULL) + ASN_TAG_SZ;
 800ae3c:	f7ff ff86 	bl	800ad4c <SetLength>
}
 800ae40:	3001      	adds	r0, #1
 800ae42:	bd08      	pop	{r3, pc}

0800ae44 <SetSequence>:
 * @param [in]  len     Length of data in SEQUENCE.
 * @param [out] output  Buffer to encode into.
 * @return  Number of bytes encoded.
 */
word32 SetSequence(word32 len, byte* output)
{
 800ae44:	460a      	mov	r2, r1
    return SetHeader(ASN_SEQUENCE | ASN_CONSTRUCTED, len, output);
 800ae46:	4601      	mov	r1, r0
 800ae48:	2030      	movs	r0, #48	; 0x30
 800ae4a:	f7ff bff0 	b.w	800ae2e <SetHeader>

0800ae4e <StoreECC_DSA_Sig>:
#define dsaSigASN_Length (sizeof(dsaSigASN) / sizeof(ASNItem))
#endif

/* Der Encode r & s ints into out, outLen is (in/out) size */
int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
{
 800ae4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae52:	4680      	mov	r8, r0
    int    rSz;                           /* encoding size */
    int    sSz;
    int    headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */

    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    int rLeadingZero = mp_leading_bit(r);
 800ae54:	4610      	mov	r0, r2
{
 800ae56:	461f      	mov	r7, r3
 800ae58:	460e      	mov	r6, r1
 800ae5a:	4691      	mov	r9, r2
    int rLeadingZero = mp_leading_bit(r);
 800ae5c:	f007 f8c1 	bl	8011fe2 <mp_leading_bit>
 800ae60:	4605      	mov	r5, r0
    int sLeadingZero = mp_leading_bit(s);
 800ae62:	4638      	mov	r0, r7
 800ae64:	f007 f8bd 	bl	8011fe2 <mp_leading_bit>
 800ae68:	4604      	mov	r4, r0
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
 800ae6a:	4648      	mov	r0, r9
 800ae6c:	f006 f930 	bl	80110d0 <mp_unsigned_bin_size>
 800ae70:	4682      	mov	sl, r0
    int sLen = mp_unsigned_bin_size(s);
 800ae72:	4638      	mov	r0, r7
 800ae74:	f006 f92c 	bl	80110d0 <mp_unsigned_bin_size>

    if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
 800ae78:	4455      	add	r5, sl
 800ae7a:	4405      	add	r5, r0
 800ae7c:	442c      	add	r4, r5
 800ae7e:	6833      	ldr	r3, [r6, #0]
 800ae80:	1d20      	adds	r0, r4, #4
            headerSz + 2)))  /* SEQ_TAG + LEN(ENUM) */
 800ae82:	3406      	adds	r4, #6
    if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d31b      	bcc.n	800aec0 <StoreECC_DSA_Sig+0x72>
        return BUFFER_E;

    idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
 800ae88:	4641      	mov	r1, r8
 800ae8a:	f7ff ffdb 	bl	800ae44 <SetSequence>
        headerSz), out);

    /* store r */
    rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
 800ae8e:	6831      	ldr	r1, [r6, #0]
 800ae90:	eb08 0200 	add.w	r2, r8, r0
 800ae94:	1a09      	subs	r1, r1, r0
    idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
 800ae96:	4604      	mov	r4, r0
    rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
 800ae98:	4648      	mov	r0, r9
 800ae9a:	f7ff ff96 	bl	800adca <SetASNIntMP>
    if (rSz < 0)
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	db0c      	blt.n	800aebc <StoreECC_DSA_Sig+0x6e>
        return rSz;
    idx += (word32)rSz;

    /* store s */
    sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
 800aea2:	6831      	ldr	r1, [r6, #0]
    idx += (word32)rSz;
 800aea4:	4404      	add	r4, r0
    sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
 800aea6:	eb08 0204 	add.w	r2, r8, r4
 800aeaa:	1b09      	subs	r1, r1, r4
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ff8c 	bl	800adca <SetASNIntMP>
    if (sSz < 0)
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	db02      	blt.n	800aebc <StoreECC_DSA_Sig+0x6e>
        return sSz;
    idx += (word32)sSz;
 800aeb6:	4420      	add	r0, r4

    *outLen = idx;
 800aeb8:	6030      	str	r0, [r6, #0]

    return 0;
 800aeba:	2000      	movs	r0, #0
        }
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BUFFER_E;
 800aec0:	f06f 0083 	mvn.w	r0, #131	; 0x83
 800aec4:	e7fa      	b.n	800aebc <StoreECC_DSA_Sig+0x6e>

0800aec6 <DecodeECC_DSA_Sig_Ex>:
    return DecodeECC_DSA_Sig_Ex(sig, sigLen, r, s, 1);
}

int DecodeECC_DSA_Sig_Ex(const byte* sig, word32 sigLen, mp_int* r, mp_int* s,
    int init)
{
 800aec6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 800aeca:	2400      	movs	r4, #0
{
 800aecc:	4689      	mov	r9, r1
 800aece:	4616      	mov	r6, r2
 800aed0:	461f      	mov	r7, r3
    int    len = 0;

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 800aed2:	aa03      	add	r2, sp, #12
 800aed4:	460b      	mov	r3, r1
 800aed6:	a902      	add	r1, sp, #8
    int    len = 0;
 800aed8:	e9cd 4402 	strd	r4, r4, [sp, #8]
{
 800aedc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aee0:	4680      	mov	r8, r0
    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 800aee2:	f7ff febe 	bl	800ac62 <GetSequence>
 800aee6:	42a0      	cmp	r0, r4
 800aee8:	da04      	bge.n	800aef4 <DecodeECC_DSA_Sig_Ex+0x2e>
    /* sanity check that the index has been advanced all the way to the end of
     * the buffer */
    if (idx != sigLen) {
        mp_clear(r);
        mp_clear(s);
        return ASN_ECC_KEY_E;
 800aeea:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
        mp_clear(s);
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 800aeee:	b004      	add	sp, #16
 800aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sigLen != idx + (word32)len) {
 800aef4:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
 800aef8:	441d      	add	r5, r3
 800aefa:	454d      	cmp	r5, r9
 800aefc:	d1f5      	bne.n	800aeea <DecodeECC_DSA_Sig_Ex+0x24>
    if (GetIntPositive(r, sig, &idx, sigLen, init) < 0) {
 800aefe:	f8cd a000 	str.w	sl, [sp]
 800af02:	462b      	mov	r3, r5
 800af04:	aa02      	add	r2, sp, #8
 800af06:	4641      	mov	r1, r8
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff fee3 	bl	800acd4 <GetIntPositive>
 800af0e:	2800      	cmp	r0, #0
 800af10:	dbeb      	blt.n	800aeea <DecodeECC_DSA_Sig_Ex+0x24>
    if (GetIntPositive(s, sig, &idx, sigLen, init) < 0) {
 800af12:	f8cd a000 	str.w	sl, [sp]
 800af16:	462b      	mov	r3, r5
 800af18:	aa02      	add	r2, sp, #8
 800af1a:	4641      	mov	r1, r8
 800af1c:	4638      	mov	r0, r7
 800af1e:	f7ff fed9 	bl	800acd4 <GetIntPositive>
 800af22:	2800      	cmp	r0, #0
 800af24:	da03      	bge.n	800af2e <DecodeECC_DSA_Sig_Ex+0x68>
        mp_clear(r);
 800af26:	4630      	mov	r0, r6
        mp_clear(s);
 800af28:	f006 f8a0 	bl	801106c <mp_clear>
 800af2c:	e7dd      	b.n	800aeea <DecodeECC_DSA_Sig_Ex+0x24>
    if (idx != sigLen) {
 800af2e:	9b02      	ldr	r3, [sp, #8]
 800af30:	42ab      	cmp	r3, r5
 800af32:	d004      	beq.n	800af3e <DecodeECC_DSA_Sig_Ex+0x78>
        mp_clear(r);
 800af34:	4630      	mov	r0, r6
 800af36:	f006 f899 	bl	801106c <mp_clear>
        mp_clear(s);
 800af3a:	4638      	mov	r0, r7
 800af3c:	e7f4      	b.n	800af28 <DecodeECC_DSA_Sig_Ex+0x62>
    return 0;
 800af3e:	4620      	mov	r0, r4
 800af40:	e7d5      	b.n	800aeee <DecodeECC_DSA_Sig_Ex+0x28>

0800af42 <curve25519_copy_point>:
}

static WC_INLINE void curve25519_copy_point(byte* out, const byte* point,
    int endian)
{
    if (endian == EC25519_BIG_ENDIAN) {
 800af42:	2a01      	cmp	r2, #1
{
 800af44:	b410      	push	{r4}
 800af46:	460c      	mov	r4, r1
    if (endian == EC25519_BIG_ENDIAN) {
 800af48:	d10a      	bne.n	800af60 <curve25519_copy_point+0x1e>
 800af4a:	f101 0220 	add.w	r2, r1, #32
 800af4e:	3801      	subs	r0, #1
        int i;
        /* put shared secret key in Big Endian format */
        for (i = 0; i < CURVE25519_KEYSIZE; i++) {
            out[i] = point[CURVE25519_KEYSIZE - i -1];
 800af50:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 800af54:	f800 3f01 	strb.w	r3, [r0, #1]!
        for (i = 0; i < CURVE25519_KEYSIZE; i++) {
 800af58:	42a2      	cmp	r2, r4
 800af5a:	d1f9      	bne.n	800af50 <curve25519_copy_point+0xe>
        }
    }
    else { /* put shared secret key in Little Endian format */
        XMEMCPY(out, point, CURVE25519_KEYSIZE);
    }
}
 800af5c:	bc10      	pop	{r4}
 800af5e:	4770      	bx	lr
 800af60:	bc10      	pop	{r4}
        XMEMCPY(out, point, CURVE25519_KEYSIZE);
 800af62:	2220      	movs	r2, #32
 800af64:	f008 b92c 	b.w	80131c0 <memcpy>

0800af68 <wc_curve25519_make_pub>:
#ifdef FREESCALE_LTC_ECC
    const ECPoint* basepoint = nxp_ltc_curve25519_GetBasePoint();
    ECPoint wc_pub;
#endif

    if ( (public_size != CURVE25519_KEYSIZE) ||
 800af68:	2820      	cmp	r0, #32
{
 800af6a:	b538      	push	{r3, r4, r5, lr}
 800af6c:	460d      	mov	r5, r1
 800af6e:	461c      	mov	r4, r3
    if ( (public_size != CURVE25519_KEYSIZE) ||
 800af70:	d113      	bne.n	800af9a <wc_curve25519_make_pub+0x32>
 800af72:	2a20      	cmp	r2, #32
 800af74:	d111      	bne.n	800af9a <wc_curve25519_make_pub+0x32>
        (private_size != CURVE25519_KEYSIZE)) {
        return ECC_BAD_ARG_E;
    }
    if ((pub == NULL) || (priv == NULL)) {
 800af76:	b181      	cbz	r1, 800af9a <wc_curve25519_make_pub+0x32>
 800af78:	b17b      	cbz	r3, 800af9a <wc_curve25519_make_pub+0x32>
    if ((priv[0] & ~248) ||
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	075b      	lsls	r3, r3, #29
 800af7e:	d10c      	bne.n	800af9a <wc_curve25519_make_pub+0x32>
 800af80:	f994 301f 	ldrsb.w	r3, [r4, #31]
 800af84:	2b00      	cmp	r3, #0
 800af86:	db08      	blt.n	800af9a <wc_curve25519_make_pub+0x32>
    ret = nxp_ltc_curve25519(&wc_pub, priv, basepoint, kLTC_Weierstrass);
    if (ret == 0) {
        XMEMCPY(pub, wc_pub.point, CURVE25519_KEYSIZE);
    }
#else
    fe_init();
 800af88:	f000 fb9a 	bl	800b6c0 <fe_init>

    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    ret = curve25519(pub, priv, (byte*)kCurve25519BasePoint);
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	4a03      	ldr	r2, [pc, #12]	; (800afa0 <wc_curve25519_make_pub+0x38>)

    RESTORE_VECTOR_REGISTERS();
#endif

    return ret;
}
 800af92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = curve25519(pub, priv, (byte*)kCurve25519BasePoint);
 800af96:	f001 bca3 	b.w	800c8e0 <curve25519>
}
 800af9a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	08017bc8 	.word	0x08017bc8

0800afa4 <wc_curve25519_make_priv>:
 *
 * return value is propagated from wc_RNG_GenerateBlock(() (0 on success),
 * or BAD_FUNC_ARG/ECC_BAD_ARG_E, and the byte vector is little endian.
 */
int wc_curve25519_make_priv(WC_RNG* rng, int keysize, byte* key)
{
 800afa4:	b510      	push	{r4, lr}
    int ret;

    if (key == NULL || rng == NULL)
 800afa6:	4614      	mov	r4, r2
 800afa8:	b192      	cbz	r2, 800afd0 <wc_curve25519_make_priv+0x2c>
 800afaa:	b188      	cbz	r0, 800afd0 <wc_curve25519_make_priv+0x2c>
        return BAD_FUNC_ARG;

    /* currently only a key size of 32 bytes is used */
    if (keysize != CURVE25519_KEYSIZE)
 800afac:	2920      	cmp	r1, #32
 800afae:	d112      	bne.n	800afd6 <wc_curve25519_make_priv+0x32>
        return ECC_BAD_ARG_E;

    /* random number for private key */
    ret = wc_RNG_GenerateBlock(rng, key, (word32)keysize);
 800afb0:	460a      	mov	r2, r1
 800afb2:	4621      	mov	r1, r4
 800afb4:	f7fc f8cb 	bl	800714e <wc_RNG_GenerateBlock>
    if (ret == 0) {
 800afb8:	b948      	cbnz	r0, 800afce <wc_curve25519_make_priv+0x2a>
    priv[0]  &= 248;
 800afba:	7823      	ldrb	r3, [r4, #0]
 800afbc:	f023 0307 	bic.w	r3, r3, #7
 800afc0:	7023      	strb	r3, [r4, #0]
    priv[CURVE25519_KEYSIZE-1] &= 127;
 800afc2:	7fe3      	ldrb	r3, [r4, #31]
 800afc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    priv[CURVE25519_KEYSIZE-1] |= 64;
 800afc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afcc:	77e3      	strb	r3, [r4, #31]
        /* Clamp the private key */
        ret = curve25519_priv_clamp(key);
    }

    return ret;
}
 800afce:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 800afd0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800afd4:	e7fb      	b.n	800afce <wc_curve25519_make_priv+0x2a>
        return ECC_BAD_ARG_E;
 800afd6:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800afda:	e7f8      	b.n	800afce <wc_curve25519_make_priv+0x2a>

0800afdc <wc_curve25519_make_key>:
 *
 * return value is propagated from wc_curve25519_make_private() or
 * wc_curve25519_make_pub() (0 on success).
 */
int wc_curve25519_make_key(WC_RNG* rng, int keysize, curve25519_key* key)
{
 800afdc:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if (key == NULL || rng == NULL)
 800afde:	4614      	mov	r4, r2
 800afe0:	b1ea      	cbz	r2, 800b01e <wc_curve25519_make_key+0x42>
 800afe2:	b1e0      	cbz	r0, 800b01e <wc_curve25519_make_key+0x42>
#endif

#ifdef WOLFSSL_SE050
    ret = se050_curve25519_create_key(key, keysize);
#else
    ret = wc_curve25519_make_priv(rng, keysize, key->k);
 800afe4:	f102 0529 	add.w	r5, r2, #41	; 0x29
 800afe8:	462a      	mov	r2, r5
 800afea:	f7ff ffdb 	bl	800afa4 <wc_curve25519_make_priv>
    if (ret == 0) {
 800afee:	b9a8      	cbnz	r0, 800b01c <wc_curve25519_make_key+0x40>
        key->privSet = 1;
 800aff0:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 800aff4:	2220      	movs	r2, #32
        key->privSet = 1;
 800aff6:	f041 0102 	orr.w	r1, r1, #2
 800affa:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 800affe:	462b      	mov	r3, r5
 800b000:	4610      	mov	r0, r2
 800b002:	f104 0108 	add.w	r1, r4, #8
 800b006:	f7ff ffaf 	bl	800af68 <wc_curve25519_make_pub>
                                     (int)sizeof(key->k), key->k);
        key->pubSet = (ret == 0);
 800b00a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 800b00e:	fab0 f380 	clz	r3, r0
 800b012:	095b      	lsrs	r3, r3, #5
 800b014:	f363 0200 	bfi	r2, r3, #0, #1
 800b018:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    }
#endif
    return ret;
}
 800b01c:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 800b01e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b022:	e7fb      	b.n	800b01c <wc_curve25519_make_key+0x40>

0800b024 <wc_curve25519_shared_secret_ex>:
}

int wc_curve25519_shared_secret_ex(curve25519_key* private_key,
                                   curve25519_key* public_key,
                                   byte* out, word32* outlen, int endian)
{
 800b024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b026:	460c      	mov	r4, r1
 800b028:	b08b      	sub	sp, #44	; 0x2c
 800b02a:	4617      	mov	r7, r2
 800b02c:	461d      	mov	r5, r3
    int ret;
    ECPoint o;

    /* sanity check */
    if (private_key == NULL || public_key == NULL ||
 800b02e:	4606      	mov	r6, r0
 800b030:	b390      	cbz	r0, 800b098 <wc_curve25519_shared_secret_ex+0x74>
 800b032:	b389      	cbz	r1, 800b098 <wc_curve25519_shared_secret_ex+0x74>
 800b034:	b382      	cbz	r2, 800b098 <wc_curve25519_shared_secret_ex+0x74>
        out == NULL || outlen == NULL || *outlen < CURVE25519_KEYSIZE) {
 800b036:	b37b      	cbz	r3, 800b098 <wc_curve25519_shared_secret_ex+0x74>
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b1f      	cmp	r3, #31
 800b03c:	d92c      	bls.n	800b098 <wc_curve25519_shared_secret_ex+0x74>
        return BAD_FUNC_ARG;
    }

    /* make sure we have a populated private and public key */
    if (!public_key->pubSet
 800b03e:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
 800b042:	07da      	lsls	r2, r3, #31
 800b044:	d52b      	bpl.n	800b09e <wc_curve25519_shared_secret_ex+0x7a>
    #ifndef WOLFSSL_SE050
        || !private_key->privSet
 800b046:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800b04a:	079b      	lsls	r3, r3, #30
 800b04c:	d527      	bpl.n	800b09e <wc_curve25519_shared_secret_ex+0x7a>
    ) {
        return ECC_BAD_ARG_E;
    }

    /* avoid implementation fingerprinting - make sure signed bit is not set */
    if (public_key->p.point[CURVE25519_KEYSIZE-1] & 0x80) {
 800b04e:	f991 3027 	ldrsb.w	r3, [r1, #39]	; 0x27
 800b052:	2b00      	cmp	r3, #0
 800b054:	db23      	blt.n	800b09e <wc_curve25519_shared_secret_ex+0x7a>
            return ret;
        /* fall-through when unavailable */
    }
#endif

    XMEMSET(&o, 0, sizeof(o));
 800b056:	2221      	movs	r2, #33	; 0x21
 800b058:	2100      	movs	r1, #0
 800b05a:	a801      	add	r0, sp, #4
 800b05c:	f008 f8d8 	bl	8013210 <memset>
    else
    #endif
    {
    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    ret = curve25519(o.point, private_key->k, public_key->p.point);
 800b060:	f104 0208 	add.w	r2, r4, #8
 800b064:	f106 0129 	add.w	r1, r6, #41	; 0x29
 800b068:	a801      	add	r0, sp, #4
 800b06a:	f001 fc39 	bl	800c8e0 <curve25519>
        if (t == 0) {
            ret = ECC_OUT_OF_RANGE_E;
        }
    }
#endif
    if (ret == 0) {
 800b06e:	4604      	mov	r4, r0
 800b070:	b930      	cbnz	r0, 800b080 <wc_curve25519_shared_secret_ex+0x5c>
        curve25519_copy_point(out, o.point, endian);
 800b072:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b074:	a901      	add	r1, sp, #4
 800b076:	4638      	mov	r0, r7
 800b078:	f7ff ff63 	bl	800af42 <curve25519_copy_point>
        *outlen = CURVE25519_KEYSIZE;
 800b07c:	2320      	movs	r3, #32
 800b07e:	602b      	str	r3, [r5, #0]
{
 800b080:	2300      	movs	r3, #0
 800b082:	4619      	mov	r1, r3
 800b084:	aa01      	add	r2, sp, #4
 800b086:	441a      	add	r2, r3
 800b088:	3301      	adds	r3, #1
 800b08a:	2b22      	cmp	r3, #34	; 0x22
 800b08c:	d102      	bne.n	800b094 <wc_curve25519_shared_secret_ex+0x70>
    }

    ForceZero(&o, sizeof(o));

    return ret;
}
 800b08e:	4620      	mov	r0, r4
 800b090:	b00b      	add	sp, #44	; 0x2c
 800b092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b094:	7011      	strb	r1, [r2, #0]
 800b096:	e7f5      	b.n	800b084 <wc_curve25519_shared_secret_ex+0x60>
        return BAD_FUNC_ARG;
 800b098:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b09c:	e7f7      	b.n	800b08e <wc_curve25519_shared_secret_ex+0x6a>
        return ECC_BAD_ARG_E;
 800b09e:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800b0a2:	e7f4      	b.n	800b08e <wc_curve25519_shared_secret_ex+0x6a>

0800b0a4 <wc_curve25519_shared_secret>:
{
 800b0a4:	b513      	push	{r0, r1, r4, lr}
    return wc_curve25519_shared_secret_ex(private_key, public_key,
 800b0a6:	2401      	movs	r4, #1
 800b0a8:	9400      	str	r4, [sp, #0]
 800b0aa:	f7ff ffbb 	bl	800b024 <wc_curve25519_shared_secret_ex>
}
 800b0ae:	b002      	add	sp, #8
 800b0b0:	bd10      	pop	{r4, pc}
	...

0800b0b4 <wc_curve25519_init_ex>:
}

#endif /* HAVE_CURVE25519_KEY_IMPORT */

int wc_curve25519_init_ex(curve25519_key* key, void* heap, int devId)
{
 800b0b4:	b510      	push	{r4, lr}
    if (key == NULL)
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	b148      	cbz	r0, 800b0ce <wc_curve25519_init_ex+0x1a>
       return BAD_FUNC_ARG;

    XMEMSET(key, 0, sizeof(*key));
 800b0ba:	224c      	movs	r2, #76	; 0x4c
 800b0bc:	2100      	movs	r1, #0
 800b0be:	f008 f8a7 	bl	8013210 <memset>

    /* currently the format for curve25519 */
    key->dp = &curve25519_sets[0];
 800b0c2:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <wc_curve25519_init_ex+0x20>)
 800b0c4:	6063      	str	r3, [r4, #4]
    (void)devId;
#endif
    (void)heap; /* if needed for XMALLOC/XFREE in future */

#ifndef FREESCALE_LTC_ECC
    fe_init();
 800b0c6:	f000 fafb 	bl	800b6c0 <fe_init>

#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_curve25519_init_ex key->k", key->k, CURVE25519_KEYSIZE);
#endif

    return 0;
 800b0ca:	2000      	movs	r0, #0
}
 800b0cc:	bd10      	pop	{r4, pc}
       return BAD_FUNC_ARG;
 800b0ce:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b0d2:	e7fb      	b.n	800b0cc <wc_curve25519_init_ex+0x18>
 800b0d4:	08017bc0 	.word	0x08017bc0

0800b0d8 <wc_curve25519_free>:
    return wc_curve25519_init_ex(key, NULL, INVALID_DEVID);
}

/* Clean the memory of a key */
void wc_curve25519_free(curve25519_key* key)
{
 800b0d8:	b510      	push	{r4, lr}
    if (key == NULL)
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b198      	cbz	r0, 800b106 <wc_curve25519_free+0x2e>

#ifdef WOLFSSL_SE050
    se050_curve25519_free_key(key);
#endif

    key->dp = NULL;
 800b0de:	2200      	movs	r2, #0
 800b0e0:	6042      	str	r2, [r0, #4]
    ForceZero(key->k, sizeof(key->k));
 800b0e2:	f100 0329 	add.w	r3, r0, #41	; 0x29
 800b0e6:	f100 0149 	add.w	r1, r0, #73	; 0x49
 800b0ea:	428b      	cmp	r3, r1
 800b0ec:	d10c      	bne.n	800b108 <wc_curve25519_free+0x30>
    XMEMSET(&key->p, 0, sizeof(key->p));
 800b0ee:	2221      	movs	r2, #33	; 0x21
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	f104 0008 	add.w	r0, r4, #8
 800b0f6:	f008 f88b 	bl	8013210 <memset>
    key->pubSet = 0;
 800b0fa:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    key->privSet = 0;
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(curve25519_key));
#endif
}
 800b106:	bd10      	pop	{r4, pc}
 800b108:	f803 2b01 	strb.w	r2, [r3], #1
 800b10c:	e7ed      	b.n	800b0ea <wc_curve25519_free+0x12>

0800b10e <ed25519_hash_init>:
    ** more char for saving the line ending in our ed25519Ctx[] here: */
    static const byte ed25519Ctx[ED25519CTX_SIZE + 1] = ED25519CTX_SNC_MESSAGE;
#endif

static int ed25519_hash_init(ed25519_key* key, wc_Sha512 *sha)
{
 800b10e:	b538      	push	{r3, r4, r5, lr}
 800b110:	460c      	mov	r4, r1
 800b112:	4605      	mov	r5, r0
    int ret;

#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    /* when not using persistent SHA, we'll zero the sha param */
    XMEMSET(sha, 0, sizeof(wc_Sha512));
 800b114:	22e0      	movs	r2, #224	; 0xe0
 800b116:	2100      	movs	r1, #0
 800b118:	4620      	mov	r0, r4
 800b11a:	f008 f879 	bl	8013210 <memset>
#endif

    ret = wc_InitSha512_ex(sha, key->heap,
 800b11e:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800b120:	4620      	mov	r0, r4
 800b122:	f06f 0201 	mvn.w	r2, #1
    if (ret == 0)
        key->sha_clean_flag = 1;
#endif

    return ret;
}
 800b126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = wc_InitSha512_ex(sha, key->heap,
 800b12a:	f7ff bc8d 	b.w	800aa48 <wc_InitSha512_ex>

0800b12e <ed25519_hash>:
}


static int ed25519_hash(ed25519_key* key, const byte* in, word32 inLen,
    byte* hash)
{
 800b12e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b130:	460d      	mov	r5, r1
 800b132:	b0b9      	sub	sp, #228	; 0xe4
 800b134:	4616      	mov	r6, r2
 800b136:	461f      	mov	r7, r3
    wc_Sha512 sha[1];
#else
    wc_Sha512 *sha;
#endif

    if (key == NULL || (in == NULL && inLen > 0) || hash == NULL) {
 800b138:	b1c0      	cbz	r0, 800b16c <ed25519_hash+0x3e>
 800b13a:	b901      	cbnz	r1, 800b13e <ed25519_hash+0x10>
 800b13c:	b9b2      	cbnz	r2, 800b16c <ed25519_hash+0x3e>

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    sha = &key->sha;
    ret = ed25519_hash_reset(key);
#else
    ret = ed25519_hash_init(key, sha);
 800b13e:	4669      	mov	r1, sp
 800b140:	f7ff ffe5 	bl	800b10e <ed25519_hash_init>
#endif
    if (ret < 0)
 800b144:	1e04      	subs	r4, r0, #0
 800b146:	db0e      	blt.n	800b166 <ed25519_hash+0x38>
    return wc_Sha512Update(sha, data, len);
 800b148:	4632      	mov	r2, r6
 800b14a:	4629      	mov	r1, r5
 800b14c:	4668      	mov	r0, sp
 800b14e:	f7ff fc93 	bl	800aa78 <wc_Sha512Update>
        return ret;

    ret = ed25519_hash_update(key, sha, in, inLen);
    if (ret == 0)
 800b152:	4604      	mov	r4, r0
 800b154:	b920      	cbnz	r0, 800b160 <ed25519_hash+0x32>
    int ret = wc_Sha512Final(sha, hash);
 800b156:	4639      	mov	r1, r7
 800b158:	4668      	mov	r0, sp
 800b15a:	f7ff fc63 	bl	800aa24 <wc_Sha512Final>
 800b15e:	4604      	mov	r4, r0
    wc_Sha512Free(sha);
 800b160:	4668      	mov	r0, sp
 800b162:	f7ff fcf3 	bl	800ab4c <wc_Sha512Free>
#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    ed25519_hash_free(key, sha);
#endif

    return ret;
}
 800b166:	4620      	mov	r0, r4
 800b168:	b039      	add	sp, #228	; 0xe4
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 800b16c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b170:	e7f9      	b.n	800b166 <ed25519_hash+0x38>

0800b172 <wc_ed25519_make_public>:

#ifdef HAVE_ED25519_MAKE_KEY
int wc_ed25519_make_public(ed25519_key* key, unsigned char* pubKey,
                           word32 pubKeySz)
{
 800b172:	b570      	push	{r4, r5, r6, lr}
 800b174:	460e      	mov	r6, r1
 800b176:	b0b8      	sub	sp, #224	; 0xe0
    ALIGN16 byte az[ED25519_PRV_KEY_SIZE];
#if !defined(FREESCALE_LTC_ECC)
    ge_p3 A;
#endif

    if (key == NULL || pubKey == NULL || pubKeySz != ED25519_PUB_KEY_SIZE)
 800b178:	4605      	mov	r5, r0
 800b17a:	b360      	cbz	r0, 800b1d6 <wc_ed25519_make_public+0x64>
 800b17c:	b359      	cbz	r1, 800b1d6 <wc_ed25519_make_public+0x64>
 800b17e:	2a20      	cmp	r2, #32
 800b180:	d129      	bne.n	800b1d6 <wc_ed25519_make_public+0x64>
        ret = BAD_FUNC_ARG;

    if ((ret == 0) && (!key->privKeySet)) {
 800b182:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800b186:	07db      	lsls	r3, r3, #31
 800b188:	d528      	bpl.n	800b1dc <wc_ed25519_make_public+0x6a>
        ret = ECC_PRIV_KEY_E;
    }

    if (ret == 0)
        ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 800b18a:	466b      	mov	r3, sp
 800b18c:	f100 0120 	add.w	r1, r0, #32
 800b190:	f7ff ffcd 	bl	800b12e <ed25519_hash>
    if (ret == 0) {
 800b194:	4604      	mov	r4, r0
 800b196:	b9d8      	cbnz	r0, 800b1d0 <wc_ed25519_make_public+0x5e>
        /* apply clamp */
        az[0]  &= 248;
 800b198:	f89d 3000 	ldrb.w	r3, [sp]
 800b19c:	f023 0307 	bic.w	r3, r3, #7
 800b1a0:	f88d 3000 	strb.w	r3, [sp]
        az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 800b1a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800b1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        az[31] |= 64;
 800b1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        publicKey.Y = key->pointY;
        LTC_PKHA_Ed25519_PointMul(LTC_PKHA_Ed25519_BasePoint(), az,
            ED25519_KEY_SIZE, &publicKey, kLTC_Ed25519 /* result on Ed25519 */);
        LTC_PKHA_Ed25519_Compress(&publicKey, pubKey);
    #else
        ge_scalarmult_base(&A, az);
 800b1b0:	4669      	mov	r1, sp
 800b1b2:	a810      	add	r0, sp, #64	; 0x40
        az[31] |= 64;
 800b1b4:	f88d 301f 	strb.w	r3, [sp, #31]
        ge_scalarmult_base(&A, az);
 800b1b8:	f004 fa38 	bl	800f62c <ge_scalarmult_base>
        ge_p3_tobytes(pubKey, &A);
 800b1bc:	a910      	add	r1, sp, #64	; 0x40
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f004 fd40 	bl	800fc44 <ge_tobytes>
    #endif

        key->pubKeySet = 1;
 800b1c4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 800b1c8:	f043 0302 	orr.w	r3, r3, #2
 800b1cc:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    }

    return ret;
}
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	b038      	add	sp, #224	; 0xe0
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
 800b1d6:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b1da:	e7f9      	b.n	800b1d0 <wc_ed25519_make_public+0x5e>
        ret = ECC_PRIV_KEY_E;
 800b1dc:	f06f 04d7 	mvn.w	r4, #215	; 0xd7
    return ret;
 800b1e0:	e7f6      	b.n	800b1d0 <wc_ed25519_make_public+0x5e>

0800b1e2 <wc_ed25519_make_key>:

/* generate an ed25519 key pair.
 * returns 0 on success
 */
int wc_ed25519_make_key(WC_RNG* rng, int keySz, ed25519_key* key)
{
 800b1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e4:	460f      	mov	r7, r1
 800b1e6:	4614      	mov	r4, r2
    int ret;

    if (rng == NULL || key == NULL)
 800b1e8:	b390      	cbz	r0, 800b250 <wc_ed25519_make_key+0x6e>
 800b1ea:	b38a      	cbz	r2, 800b250 <wc_ed25519_make_key+0x6e>
        return BAD_FUNC_ARG;

    /* ed25519 has 32 byte key sizes */
    if (keySz != ED25519_KEY_SIZE)
 800b1ec:	2920      	cmp	r1, #32
 800b1ee:	d12f      	bne.n	800b250 <wc_ed25519_make_key+0x6e>
        return BAD_FUNC_ARG;

    key->privKeySet = 0;
 800b1f0:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
            return ret;
        /* fall-through when unavailable */
    }
#endif

    ret = wc_RNG_GenerateBlock(rng, key->k, ED25519_KEY_SIZE);
 800b1f4:	f102 0620 	add.w	r6, r2, #32
    key->privKeySet = 0;
 800b1f8:	f023 0303 	bic.w	r3, r3, #3
 800b1fc:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    ret = wc_RNG_GenerateBlock(rng, key->k, ED25519_KEY_SIZE);
 800b200:	460a      	mov	r2, r1
 800b202:	4631      	mov	r1, r6
 800b204:	f7fb ffa3 	bl	800714e <wc_RNG_GenerateBlock>
    if (ret != 0)
 800b208:	4605      	mov	r5, r0
 800b20a:	b9b8      	cbnz	r0, 800b23c <wc_ed25519_make_key+0x5a>
        return ret;

    key->privKeySet = 1;
 800b20c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b210:	f043 0301 	orr.w	r3, r3, #1
 800b214:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    ret = wc_ed25519_make_public(key, key->p, ED25519_PUB_KEY_SIZE);
 800b218:	463a      	mov	r2, r7
 800b21a:	4621      	mov	r1, r4
 800b21c:	4620      	mov	r0, r4
 800b21e:	f7ff ffa8 	bl	800b172 <wc_ed25519_make_public>
    if (ret != 0) {
 800b222:	4605      	mov	r5, r0
 800b224:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b228:	b16d      	cbz	r5, 800b246 <wc_ed25519_make_key+0x64>
        key->privKeySet = 0;
 800b22a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b22e:	f36f 0300 	bfc	r3, #0, #1
 800b232:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800b236:	2300      	movs	r3, #0
 800b238:	4286      	cmp	r6, r0
 800b23a:	d101      	bne.n	800b240 <wc_ed25519_make_key+0x5e>

    /* put public key after private key, on the same buffer */
    XMEMMOVE(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);

    return ret;
}
 800b23c:	4628      	mov	r0, r5
 800b23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b240:	f806 3b01 	strb.w	r3, [r6], #1
 800b244:	e7f8      	b.n	800b238 <wc_ed25519_make_key+0x56>
    XMEMMOVE(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);
 800b246:	463a      	mov	r2, r7
 800b248:	4621      	mov	r1, r4
 800b24a:	f007 ffc7 	bl	80131dc <memmove>
    return ret;
 800b24e:	e7f5      	b.n	800b23c <wc_ed25519_make_key+0x5a>
        return BAD_FUNC_ARG;
 800b250:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800b254:	e7f2      	b.n	800b23c <wc_ed25519_make_key+0x5a>
	...

0800b258 <wc_ed25519_sign_msg_ex>:
    return 0 on success
 */
int wc_ed25519_sign_msg_ex(const byte* in, word32 inLen, byte* out,
                            word32 *outLen, ed25519_key* key, byte type,
                            const byte* context, byte contextLen)
{
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800b260:	460f      	mov	r7, r1
 800b262:	f8dd 8260 	ldr.w	r8, [sp, #608]	; 0x260
 800b266:	f8dd 9268 	ldr.w	r9, [sp, #616]	; 0x268
 800b26a:	4615      	mov	r5, r2
    ALIGN16 byte nonce[WC_SHA512_DIGEST_SIZE];
    ALIGN16 byte hram[WC_SHA512_DIGEST_SIZE];
    ALIGN16 byte az[ED25519_PRV_KEY_SIZE];

    /* sanity check on arguments */
    if (in == NULL || out == NULL || outLen == NULL || key == NULL ||
 800b26c:	4606      	mov	r6, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	f000 80e9 	beq.w	800b446 <wc_ed25519_sign_msg_ex+0x1ee>
 800b274:	2a00      	cmp	r2, #0
 800b276:	f000 80e6 	beq.w	800b446 <wc_ed25519_sign_msg_ex+0x1ee>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 80e3 	beq.w	800b446 <wc_ed25519_sign_msg_ex+0x1ee>
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	f000 80df 	beq.w	800b446 <wc_ed25519_sign_msg_ex+0x1ee>
 800b288:	f1b9 0f00 	cmp.w	r9, #0
 800b28c:	d104      	bne.n	800b298 <wc_ed25519_sign_msg_ex+0x40>
                                         (context == NULL && contextLen != 0)) {
 800b28e:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 800b292:	2a00      	cmp	r2, #0
 800b294:	f040 80d7 	bne.w	800b446 <wc_ed25519_sign_msg_ex+0x1ee>
            return ret;
        /* fall-through when unavailable */
    }
#endif

    if (!key->pubKeySet)
 800b298:	f898 2060 	ldrb.w	r2, [r8, #96]	; 0x60
 800b29c:	0792      	lsls	r2, r2, #30
 800b29e:	f140 80d2 	bpl.w	800b446 <wc_ed25519_sign_msg_ex+0x1ee>
        return BAD_FUNC_ARG;

    /* check and set up out length */
    if (*outLen < ED25519_SIG_SIZE) {
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	2a3f      	cmp	r2, #63	; 0x3f
 800b2a6:	f04f 0240 	mov.w	r2, #64	; 0x40
        *outLen = ED25519_SIG_SIZE;
 800b2aa:	601a      	str	r2, [r3, #0]
    if (*outLen < ED25519_SIG_SIZE) {
 800b2ac:	d806      	bhi.n	800b2bc <wc_ed25519_sign_msg_ex+0x64>
        return BUFFER_E;
 800b2ae:	f06f 0483 	mvn.w	r4, #131	; 0x83
    sc_reduce(hram);
    sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
#endif
#endif /* WOLFSSL_SE050 */
    return ret;
}
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800b2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 800b2bc:	2220      	movs	r2, #32
 800b2be:	ab20      	add	r3, sp, #128	; 0x80
 800b2c0:	eb08 0102 	add.w	r1, r8, r2
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	f7ff ff32 	bl	800b12e <ed25519_hash>
    if (ret != 0)
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d1f0      	bne.n	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
    az[0]  &= 248;
 800b2d0:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 800b2d4:	f023 0307 	bic.w	r3, r3, #7
 800b2d8:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 800b2dc:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
 800b2e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    az[31] |= 64;
 800b2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        ret = ed25519_hash_init(key, sha);
 800b2e8:	a958      	add	r1, sp, #352	; 0x160
 800b2ea:	4640      	mov	r0, r8
    az[31] |= 64;
 800b2ec:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
        ret = ed25519_hash_init(key, sha);
 800b2f0:	f7ff ff0d 	bl	800b10e <ed25519_hash_init>
        if (ret < 0) {
 800b2f4:	1e04      	subs	r4, r0, #0
 800b2f6:	dbdc      	blt.n	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
        if (type == Ed25519ctx || type == Ed25519ph) {
 800b2f8:	f89d 3264 	ldrb.w	r3, [sp, #612]	; 0x264
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d871      	bhi.n	800b3e4 <wc_ed25519_sign_msg_ex+0x18c>
    return wc_Sha512Update(sha, data, len);
 800b300:	4952      	ldr	r1, [pc, #328]	; (800b44c <wc_ed25519_sign_msg_ex+0x1f4>)
 800b302:	2220      	movs	r2, #32
 800b304:	a858      	add	r0, sp, #352	; 0x160
 800b306:	f7ff fbb7 	bl	800aa78 <wc_Sha512Update>
            if (ret == 0)
 800b30a:	4604      	mov	r4, r0
 800b30c:	b9c0      	cbnz	r0, 800b340 <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 800b30e:	2201      	movs	r2, #1
 800b310:	a999      	add	r1, sp, #612	; 0x264
 800b312:	a858      	add	r0, sp, #352	; 0x160
 800b314:	f7ff fbb0 	bl	800aa78 <wc_Sha512Update>
            if (ret == 0)
 800b318:	4604      	mov	r4, r0
 800b31a:	b988      	cbnz	r0, 800b340 <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 800b31c:	2201      	movs	r2, #1
 800b31e:	a99b      	add	r1, sp, #620	; 0x26c
 800b320:	a858      	add	r0, sp, #352	; 0x160
 800b322:	f7ff fba9 	bl	800aa78 <wc_Sha512Update>
            if (ret == 0 && context != NULL)
 800b326:	4604      	mov	r4, r0
 800b328:	b950      	cbnz	r0, 800b340 <wc_ed25519_sign_msg_ex+0xe8>
 800b32a:	f1b9 0f00 	cmp.w	r9, #0
 800b32e:	d152      	bne.n	800b3d6 <wc_ed25519_sign_msg_ex+0x17e>
    return wc_Sha512Update(sha, data, len);
 800b330:	2220      	movs	r2, #32
 800b332:	a928      	add	r1, sp, #160	; 0xa0
 800b334:	a858      	add	r0, sp, #352	; 0x160
 800b336:	f7ff fb9f 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b33a:	4604      	mov	r4, r0
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d054      	beq.n	800b3ea <wc_ed25519_sign_msg_ex+0x192>
    wc_Sha512Free(sha);
 800b340:	a858      	add	r0, sp, #352	; 0x160
 800b342:	f7ff fc03 	bl	800ab4c <wc_Sha512Free>
    if (ret != 0)
 800b346:	2c00      	cmp	r4, #0
 800b348:	d1b3      	bne.n	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
    sc_reduce(nonce);
 800b34a:	4668      	mov	r0, sp
 800b34c:	f002 f906 	bl	800d55c <sc_reduce>
    ge_scalarmult_base(&R,nonce);
 800b350:	4669      	mov	r1, sp
 800b352:	a830      	add	r0, sp, #192	; 0xc0
 800b354:	f004 f96a 	bl	800f62c <ge_scalarmult_base>
    ge_p3_tobytes(out,&R);
 800b358:	a930      	add	r1, sp, #192	; 0xc0
 800b35a:	4628      	mov	r0, r5
 800b35c:	f004 fc72 	bl	800fc44 <ge_tobytes>
        ret = ed25519_hash_init(key, sha);
 800b360:	a958      	add	r1, sp, #352	; 0x160
 800b362:	4640      	mov	r0, r8
 800b364:	f7ff fed3 	bl	800b10e <ed25519_hash_init>
        if (ret < 0)
 800b368:	1e04      	subs	r4, r0, #0
 800b36a:	dba2      	blt.n	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
        if (type == Ed25519ctx || type == Ed25519ph) {
 800b36c:	f89d 3264 	ldrb.w	r3, [sp, #612]	; 0x264
 800b370:	2b01      	cmp	r3, #1
 800b372:	d84f      	bhi.n	800b414 <wc_ed25519_sign_msg_ex+0x1bc>
    return wc_Sha512Update(sha, data, len);
 800b374:	4935      	ldr	r1, [pc, #212]	; (800b44c <wc_ed25519_sign_msg_ex+0x1f4>)
 800b376:	2220      	movs	r2, #32
 800b378:	a858      	add	r0, sp, #352	; 0x160
 800b37a:	f7ff fb7d 	bl	800aa78 <wc_Sha512Update>
            if (ret == 0)
 800b37e:	4604      	mov	r4, r0
 800b380:	b9c0      	cbnz	r0, 800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 800b382:	2201      	movs	r2, #1
 800b384:	a999      	add	r1, sp, #612	; 0x264
 800b386:	a858      	add	r0, sp, #352	; 0x160
 800b388:	f7ff fb76 	bl	800aa78 <wc_Sha512Update>
            if (ret == 0)
 800b38c:	4604      	mov	r4, r0
 800b38e:	b988      	cbnz	r0, 800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 800b390:	2201      	movs	r2, #1
 800b392:	a99b      	add	r1, sp, #620	; 0x26c
 800b394:	a858      	add	r0, sp, #352	; 0x160
 800b396:	f7ff fb6f 	bl	800aa78 <wc_Sha512Update>
            if (ret == 0 && context != NULL)
 800b39a:	4604      	mov	r4, r0
 800b39c:	b950      	cbnz	r0, 800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
 800b39e:	f1b9 0f00 	cmp.w	r9, #0
 800b3a2:	d130      	bne.n	800b406 <wc_ed25519_sign_msg_ex+0x1ae>
    return wc_Sha512Update(sha, data, len);
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	a858      	add	r0, sp, #352	; 0x160
 800b3aa:	f7ff fb65 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d032      	beq.n	800b41a <wc_ed25519_sign_msg_ex+0x1c2>
    wc_Sha512Free(sha);
 800b3b4:	a858      	add	r0, sp, #352	; 0x160
 800b3b6:	f7ff fbc9 	bl	800ab4c <wc_Sha512Free>
    if (ret != 0)
 800b3ba:	2c00      	cmp	r4, #0
 800b3bc:	f47f af79 	bne.w	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
    sc_reduce(hram);
 800b3c0:	a810      	add	r0, sp, #64	; 0x40
 800b3c2:	f002 f8cb 	bl	800d55c <sc_reduce>
    sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
 800b3c6:	466b      	mov	r3, sp
 800b3c8:	aa20      	add	r2, sp, #128	; 0x80
 800b3ca:	a910      	add	r1, sp, #64	; 0x40
 800b3cc:	f105 0020 	add.w	r0, r5, #32
 800b3d0:	f002 fec0 	bl	800e154 <sc_muladd>
    return ret;
 800b3d4:	e76d      	b.n	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
    return wc_Sha512Update(sha, data, len);
 800b3d6:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 800b3da:	4649      	mov	r1, r9
 800b3dc:	a858      	add	r0, sp, #352	; 0x160
 800b3de:	f7ff fb4b 	bl	800aa78 <wc_Sha512Update>
 800b3e2:	4604      	mov	r4, r0
        if (ret == 0)
 800b3e4:	2c00      	cmp	r4, #0
 800b3e6:	d1ab      	bne.n	800b340 <wc_ed25519_sign_msg_ex+0xe8>
 800b3e8:	e7a2      	b.n	800b330 <wc_ed25519_sign_msg_ex+0xd8>
    return wc_Sha512Update(sha, data, len);
 800b3ea:	463a      	mov	r2, r7
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	a858      	add	r0, sp, #352	; 0x160
 800b3f0:	f7ff fb42 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d1a2      	bne.n	800b340 <wc_ed25519_sign_msg_ex+0xe8>
    int ret = wc_Sha512Final(sha, hash);
 800b3fa:	4669      	mov	r1, sp
 800b3fc:	a858      	add	r0, sp, #352	; 0x160
 800b3fe:	f7ff fb11 	bl	800aa24 <wc_Sha512Final>
 800b402:	4604      	mov	r4, r0
    return ret;
 800b404:	e79c      	b.n	800b340 <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 800b406:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 800b40a:	4649      	mov	r1, r9
 800b40c:	a858      	add	r0, sp, #352	; 0x160
 800b40e:	f7ff fb33 	bl	800aa78 <wc_Sha512Update>
 800b412:	4604      	mov	r4, r0
        if (ret == 0)
 800b414:	2c00      	cmp	r4, #0
 800b416:	d1cd      	bne.n	800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
 800b418:	e7c4      	b.n	800b3a4 <wc_ed25519_sign_msg_ex+0x14c>
    return wc_Sha512Update(sha, data, len);
 800b41a:	2220      	movs	r2, #32
 800b41c:	4641      	mov	r1, r8
 800b41e:	a858      	add	r0, sp, #352	; 0x160
 800b420:	f7ff fb2a 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b424:	4604      	mov	r4, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	d1c4      	bne.n	800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 800b42a:	463a      	mov	r2, r7
 800b42c:	4631      	mov	r1, r6
 800b42e:	a858      	add	r0, sp, #352	; 0x160
 800b430:	f7ff fb22 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b434:	4604      	mov	r4, r0
 800b436:	2800      	cmp	r0, #0
 800b438:	d1bc      	bne.n	800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
    int ret = wc_Sha512Final(sha, hash);
 800b43a:	a910      	add	r1, sp, #64	; 0x40
 800b43c:	a858      	add	r0, sp, #352	; 0x160
 800b43e:	f7ff faf1 	bl	800aa24 <wc_Sha512Final>
 800b442:	4604      	mov	r4, r0
    return ret;
 800b444:	e7b6      	b.n	800b3b4 <wc_ed25519_sign_msg_ex+0x15c>
        return BAD_FUNC_ARG;
 800b446:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b44a:	e732      	b.n	800b2b2 <wc_ed25519_sign_msg_ex+0x5a>
 800b44c:	08017be8 	.word	0x08017be8

0800b450 <wc_ed25519_sign_msg>:
    key    is the ed25519 key to use when signing
    return 0 on success
 */
int wc_ed25519_sign_msg(const byte* in, word32 inLen, byte* out,
                        word32 *outLen, ed25519_key* key)
{
 800b450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ed25519_sign_msg_ex(in, inLen, out, outLen, key, (byte)Ed25519,
 800b452:	2400      	movs	r4, #0
 800b454:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800b458:	24ff      	movs	r4, #255	; 0xff
 800b45a:	9401      	str	r4, [sp, #4]
 800b45c:	9c06      	ldr	r4, [sp, #24]
 800b45e:	9400      	str	r4, [sp, #0]
 800b460:	f7ff fefa 	bl	800b258 <wc_ed25519_sign_msg_ex>
        NULL, 0);
}
 800b464:	b004      	add	sp, #16
 800b466:	bd10      	pop	{r4, pc}

0800b468 <wc_ed25519_verify_msg_ex>:
   return  0 and res of 1 on success
*/
int wc_ed25519_verify_msg_ex(const byte* sig, word32 sigLen, const byte* msg,
                              word32 msgLen, int* res, ed25519_key* key,
                              byte type, const byte* context, byte contextLen)
{
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b470:	469a      	mov	sl, r3
 800b472:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
 800b474:	f89d 8290 	ldrb.w	r8, [sp, #656]	; 0x290
 800b478:	f8dd 9294 	ldr.w	r9, [sp, #660]	; 0x294
 800b47c:	f89d 3298 	ldrb.w	r3, [sp, #664]	; 0x298
 800b480:	468b      	mov	fp, r1
 800b482:	4617      	mov	r7, r2
#else
    wc_Sha512 sha[1];
#endif

    /* sanity check on arguments */
    if (sig == NULL || msg == NULL || res == NULL || key == NULL ||
 800b484:	4605      	mov	r5, r0
 800b486:	2800      	cmp	r0, #0
 800b488:	f000 80bf 	beq.w	800b60a <wc_ed25519_verify_msg_ex+0x1a2>
 800b48c:	2a00      	cmp	r2, #0
 800b48e:	f000 80bc 	beq.w	800b60a <wc_ed25519_verify_msg_ex+0x1a2>
 800b492:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b494:	2a00      	cmp	r2, #0
 800b496:	f000 80b8 	beq.w	800b60a <wc_ed25519_verify_msg_ex+0x1a2>
 800b49a:	2e00      	cmp	r6, #0
 800b49c:	f000 80b5 	beq.w	800b60a <wc_ed25519_verify_msg_ex+0x1a2>
 800b4a0:	f1b9 0f00 	cmp.w	r9, #0
 800b4a4:	d102      	bne.n	800b4ac <wc_ed25519_verify_msg_ex+0x44>
                                         (context == NULL && contextLen != 0))
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f040 80af 	bne.w	800b60a <wc_ed25519_verify_msg_ex+0x1a2>
#endif

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    sha = &key->sha;
#else
    ret = ed25519_hash_init(key, sha);
 800b4ac:	a960      	add	r1, sp, #384	; 0x180
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	f7ff fe2c 	bl	800b10e <ed25519_hash_init>
    if (ret < 0) {
 800b4b6:	1e04      	subs	r4, r0, #0
 800b4b8:	db6f      	blt.n	800b59a <wc_ed25519_verify_msg_ex+0x132>
        return ret;
    }
#endif /* WOLFSSL_ED25519_PERSISTENT_SHA */

    ret = ed25519_verify_msg_init_with_sha(sig, sigLen, key, sha, type, context,
 800b4ba:	9b01      	ldr	r3, [sp, #4]
 800b4bc:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
 800b4c0:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
    if (sig == NULL || key == NULL ||
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	d103      	bne.n	800b4d2 <wc_ed25519_verify_msg_ex+0x6a>
        (context == NULL && contextLen != 0)) {
 800b4ca:	b113      	cbz	r3, 800b4d2 <wc_ed25519_verify_msg_ex+0x6a>
        return BAD_FUNC_ARG;
 800b4cc:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b4d0:	e060      	b.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
    if (sigLen != ED25519_SIG_SIZE || (sig[ED25519_SIG_SIZE-1] & 224))
 800b4d2:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800b4d6:	d1f9      	bne.n	800b4cc <wc_ed25519_verify_msg_ex+0x64>
 800b4d8:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 800b4dc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800b4e0:	d1f4      	bne.n	800b4cc <wc_ed25519_verify_msg_ex+0x64>
    if (type == Ed25519ctx || type == Ed25519ph) {
 800b4e2:	f1b8 0f01 	cmp.w	r8, #1
 800b4e6:	d934      	bls.n	800b552 <wc_ed25519_verify_msg_ex+0xea>
    return wc_Sha512Update(sha, data, len);
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	a860      	add	r0, sp, #384	; 0x180
 800b4ee:	f7ff fac3 	bl	800aa78 <wc_Sha512Update>
    if (ret == 0)
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d14d      	bne.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	a860      	add	r0, sp, #384	; 0x180
 800b4fe:	f7ff fabb 	bl	800aa78 <wc_Sha512Update>
        contextLen);
    if (ret == 0)
 800b502:	4604      	mov	r4, r0
 800b504:	2800      	cmp	r0, #0
 800b506:	d145      	bne.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 800b508:	4652      	mov	r2, sl
 800b50a:	4639      	mov	r1, r7
 800b50c:	a860      	add	r0, sp, #384	; 0x180
 800b50e:	f7ff fab3 	bl	800aa78 <wc_Sha512Update>
        ret = ed25519_verify_msg_update_with_sha(msg, msgLen, key, sha);
    if (ret == 0)
 800b512:	4604      	mov	r4, r0
 800b514:	2800      	cmp	r0, #0
 800b516:	d13d      	bne.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
    *res = 0;
 800b518:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b51a:	6018      	str	r0, [r3, #0]
    if (sig[ED25519_SIG_SIZE-1] > 0x10)
 800b51c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 800b520:	2b10      	cmp	r3, #16
 800b522:	d8d3      	bhi.n	800b4cc <wc_ed25519_verify_msg_ex+0x64>
    if (sig[ED25519_SIG_SIZE-1] == 0x10) {
 800b524:	d13e      	bne.n	800b5a4 <wc_ed25519_verify_msg_ex+0x13c>
 800b526:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 800b52a:	f105 0230 	add.w	r2, r5, #48	; 0x30
            if (sig[i] > 0x00)
 800b52e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b532:	2900      	cmp	r1, #0
 800b534:	d136      	bne.n	800b5a4 <wc_ed25519_verify_msg_ex+0x13c>
        for (--i; i > ED25519_SIG_LOW_ORDER_IDX; i--) {
 800b536:	4293      	cmp	r3, r2
 800b538:	d1f9      	bne.n	800b52e <wc_ed25519_verify_msg_ex+0xc6>
 800b53a:	4a35      	ldr	r2, [pc, #212]	; (800b610 <wc_ed25519_verify_msg_ex+0x1a8>)
 800b53c:	232f      	movs	r3, #47	; 0x2f
                if (sig[i] < ed25519_low_order[j])
 800b53e:	5ce8      	ldrb	r0, [r5, r3]
 800b540:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b544:	4288      	cmp	r0, r1
 800b546:	d32d      	bcc.n	800b5a4 <wc_ed25519_verify_msg_ex+0x13c>
                if (sig[i] > ed25519_low_order[j])
 800b548:	d8c0      	bhi.n	800b4cc <wc_ed25519_verify_msg_ex+0x64>
            for (j = 0; j < (int)sizeof(ed25519_low_order); j++, i--) {
 800b54a:	3b01      	subs	r3, #1
 800b54c:	2b1f      	cmp	r3, #31
 800b54e:	d1f6      	bne.n	800b53e <wc_ed25519_verify_msg_ex+0xd6>
 800b550:	e7bc      	b.n	800b4cc <wc_ed25519_verify_msg_ex+0x64>
    return wc_Sha512Update(sha, data, len);
 800b552:	4930      	ldr	r1, [pc, #192]	; (800b614 <wc_ed25519_verify_msg_ex+0x1ac>)
 800b554:	2220      	movs	r2, #32
 800b556:	a860      	add	r0, sp, #384	; 0x180
 800b558:	f7ff fa8e 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b55c:	4604      	mov	r4, r0
 800b55e:	b9c8      	cbnz	r0, 800b594 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 800b560:	2201      	movs	r2, #1
 800b562:	a91a      	add	r1, sp, #104	; 0x68
 800b564:	a860      	add	r0, sp, #384	; 0x180
 800b566:	f7ff fa87 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0)
 800b56a:	4604      	mov	r4, r0
 800b56c:	b990      	cbnz	r0, 800b594 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 800b56e:	2201      	movs	r2, #1
 800b570:	a938      	add	r1, sp, #224	; 0xe0
 800b572:	a860      	add	r0, sp, #384	; 0x180
 800b574:	f7ff fa80 	bl	800aa78 <wc_Sha512Update>
        if (ret == 0 && context != NULL)
 800b578:	4604      	mov	r4, r0
 800b57a:	b958      	cbnz	r0, 800b594 <wc_ed25519_verify_msg_ex+0x12c>
 800b57c:	f1b9 0f00 	cmp.w	r9, #0
 800b580:	d0b2      	beq.n	800b4e8 <wc_ed25519_verify_msg_ex+0x80>
    return wc_Sha512Update(sha, data, len);
 800b582:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
 800b586:	4649      	mov	r1, r9
 800b588:	a860      	add	r0, sp, #384	; 0x180
 800b58a:	f7ff fa75 	bl	800aa78 <wc_Sha512Update>
    if (ret == 0)
 800b58e:	4604      	mov	r4, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d0a9      	beq.n	800b4e8 <wc_ed25519_verify_msg_ex+0x80>
    wc_Sha512Free(sha);
 800b594:	a860      	add	r0, sp, #384	; 0x180
 800b596:	f7ff fad9 	bl	800ab4c <wc_Sha512Free>
#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    ed25519_hash_free(key, sha);
#endif
#endif /* WOLFSSL_SE050 */
    return ret;
}
 800b59a:	4620      	mov	r0, r4
 800b59c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ge_frombytes_negate_vartime(&A, key->p) != 0)
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	a838      	add	r0, sp, #224	; 0xe0
 800b5a8:	f004 faca 	bl	800fb40 <ge_frombytes_negate_vartime>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d18d      	bne.n	800b4cc <wc_ed25519_verify_msg_ex+0x64>
    int ret = wc_Sha512Final(sha, hash);
 800b5b0:	a90a      	add	r1, sp, #40	; 0x28
 800b5b2:	a860      	add	r0, sp, #384	; 0x180
 800b5b4:	f7ff fa36 	bl	800aa24 <wc_Sha512Final>
    if (ret != 0)
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d1ea      	bne.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
    sc_reduce(h);
 800b5be:	a80a      	add	r0, sp, #40	; 0x28
 800b5c0:	f001 ffcc 	bl	800d55c <sc_reduce>
    ret = ge_double_scalarmult_vartime(&R, h, &A, sig + (ED25519_SIG_SIZE/2));
 800b5c4:	f105 0320 	add.w	r3, r5, #32
 800b5c8:	aa38      	add	r2, sp, #224	; 0xe0
 800b5ca:	a90a      	add	r1, sp, #40	; 0x28
 800b5cc:	a81a      	add	r0, sp, #104	; 0x68
 800b5ce:	f004 f8c3 	bl	800f758 <ge_double_scalarmult_vartime>
    if (ret != 0)
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d1dd      	bne.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
    ge_tobytes(rcheck, &R);
 800b5d8:	a91a      	add	r1, sp, #104	; 0x68
 800b5da:	a802      	add	r0, sp, #8
 800b5dc:	f004 fb32 	bl	800fc44 <ge_tobytes>
    for (i = 0; i < length; i++) {
 800b5e0:	1e6a      	subs	r2, r5, #1
 800b5e2:	ab02      	add	r3, sp, #8
 800b5e4:	351f      	adds	r5, #31
        compareSum |= a[i] ^ b[i];
 800b5e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b5ea:	f813 1b01 	ldrb.w	r1, [r3], #1
    for (i = 0; i < length; i++) {
 800b5ee:	4295      	cmp	r5, r2
        compareSum |= a[i] ^ b[i];
 800b5f0:	ea81 0100 	eor.w	r1, r1, r0
 800b5f4:	ea44 0401 	orr.w	r4, r4, r1
    for (i = 0; i < length; i++) {
 800b5f8:	d1f5      	bne.n	800b5e6 <wc_ed25519_verify_msg_ex+0x17e>
    if (ret != 0) {
 800b5fa:	b91c      	cbnz	r4, 800b604 <wc_ed25519_verify_msg_ex+0x19c>
        *res = 1;
 800b5fc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b5fe:	2301      	movs	r3, #1
 800b600:	6013      	str	r3, [r2, #0]
 800b602:	e7c7      	b.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
        ret = SIG_VERIFY_E;
 800b604:	f06f 04e4 	mvn.w	r4, #228	; 0xe4
 800b608:	e7c4      	b.n	800b594 <wc_ed25519_verify_msg_ex+0x12c>
        return BAD_FUNC_ARG;
 800b60a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b60e:	e7c4      	b.n	800b59a <wc_ed25519_verify_msg_ex+0x132>
 800b610:	08017c09 	.word	0x08017c09
 800b614:	08017be8 	.word	0x08017be8

0800b618 <wc_ed25519_verify_msg>:
   key     Ed25519 public key
   return  0 and res of 1 on success
*/
int wc_ed25519_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
                          word32 msgLen, int* res, ed25519_key* key)
{
 800b618:	b510      	push	{r4, lr}
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 800b61a:	2400      	movs	r4, #0
{
 800b61c:	b086      	sub	sp, #24
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 800b61e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b622:	24ff      	movs	r4, #255	; 0xff
 800b624:	9402      	str	r4, [sp, #8]
 800b626:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b628:	9401      	str	r4, [sp, #4]
 800b62a:	9c08      	ldr	r4, [sp, #32]
 800b62c:	9400      	str	r4, [sp, #0]
 800b62e:	f7ff ff1b 	bl	800b468 <wc_ed25519_verify_msg_ex>
                                    (byte)Ed25519, NULL, 0);
}
 800b632:	b006      	add	sp, #24
 800b634:	bd10      	pop	{r4, pc}

0800b636 <wc_ed25519_init_ex>:
#endif /* HAVE_ED25519_VERIFY */


/* initialize information and memory for key */
int wc_ed25519_init_ex(ed25519_key* key, void* heap, int devId)
{
 800b636:	b538      	push	{r3, r4, r5, lr}
 800b638:	460d      	mov	r5, r1
    if (key == NULL)
 800b63a:	4604      	mov	r4, r0
 800b63c:	b140      	cbz	r0, 800b650 <wc_ed25519_init_ex+0x1a>
        return BAD_FUNC_ARG;

    /* for init, ensure the key is zeroed*/
    XMEMSET(key, 0, sizeof(ed25519_key));
 800b63e:	2268      	movs	r2, #104	; 0x68
 800b640:	2100      	movs	r1, #0
 800b642:	f007 fde5 	bl	8013210 <memset>
#ifdef WOLF_CRYPTO_CB
    key->devId = devId;
#else
    (void)devId;
#endif
    key->heap = heap;
 800b646:	6665      	str	r5, [r4, #100]	; 0x64

#ifndef FREESCALE_LTC_ECC
    fe_init();
 800b648:	f000 f83a 	bl	800b6c0 <fe_init>
#endif

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    return ed25519_hash_init(key, &key->sha);
#else /* !WOLFSSL_ED25519_PERSISTENT_SHA */
    return 0;
 800b64c:	2000      	movs	r0, #0
#endif /* WOLFSSL_ED25519_PERSISTENT_SHA */
}
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 800b650:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b654:	e7fb      	b.n	800b64e <wc_ed25519_init_ex+0x18>

0800b656 <wc_ed25519_init>:

int wc_ed25519_init(ed25519_key* key)
{
    return wc_ed25519_init_ex(key, NULL, INVALID_DEVID);
 800b656:	f06f 0201 	mvn.w	r2, #1
 800b65a:	2100      	movs	r1, #0
 800b65c:	f7ff bfeb 	b.w	800b636 <wc_ed25519_init_ex>

0800b660 <wc_ed25519_free>:
}

/* clear memory of key */
void wc_ed25519_free(ed25519_key* key)
{
    if (key == NULL)
 800b660:	b120      	cbz	r0, 800b66c <wc_ed25519_free+0xc>
 800b662:	f100 0368 	add.w	r3, r0, #104	; 0x68
    while (len--) *z++ = 0;
 800b666:	2200      	movs	r2, #0
 800b668:	4298      	cmp	r0, r3
 800b66a:	d100      	bne.n	800b66e <wc_ed25519_free+0xe>

    ForceZero(key, sizeof(ed25519_key));
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(ed25519_key));
#endif
}
 800b66c:	4770      	bx	lr
 800b66e:	f800 2b01 	strb.w	r2, [r0], #1
 800b672:	e7f9      	b.n	800b668 <wc_ed25519_free+0x8>

0800b674 <load_3>:
word64 load_3(const unsigned char *in)
{
  word64 result;
  result = (word64) in[0];
  result |= ((word64) in[1]) << 8;
  result |= ((word64) in[2]) << 16;
 800b674:	7883      	ldrb	r3, [r0, #2]
  result |= ((word64) in[1]) << 8;
 800b676:	7841      	ldrb	r1, [r0, #1]
  result = (word64) in[0];
 800b678:	7802      	ldrb	r2, [r0, #0]
  result |= ((word64) in[2]) << 16;
 800b67a:	041b      	lsls	r3, r3, #16
 800b67c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  return result;
}
 800b680:	ea43 0002 	orr.w	r0, r3, r2
 800b684:	2100      	movs	r1, #0
 800b686:	4770      	bx	lr

0800b688 <load_4>:
  result = (word64) in[0];
  result |= ((word64) in[1]) << 8;
  result |= ((word64) in[2]) << 16;
  result |= ((word64) in[3]) << 24;
  return result;
}
 800b688:	6800      	ldr	r0, [r0, #0]
 800b68a:	2100      	movs	r1, #0
 800b68c:	4770      	bx	lr

0800b68e <fe_1>:
*/

void fe_1(fe h)
{
  h[0] = 1;
  h[1] = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	2201      	movs	r2, #1
 800b692:	e9c0 2300 	strd	r2, r3, [r0]
  h[2] = 0;
  h[3] = 0;
 800b696:	e9c0 3302 	strd	r3, r3, [r0, #8]
  h[4] = 0;
  h[5] = 0;
 800b69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  h[6] = 0;
  h[7] = 0;
 800b69e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  h[8] = 0;
  h[9] = 0;
 800b6a2:	e9c0 3308 	strd	r3, r3, [r0, #32]
}
 800b6a6:	4770      	bx	lr

0800b6a8 <fe_0>:
h = 0
*/

void fe_0(fe h)
{
  h[0] = 0;
 800b6a8:	2300      	movs	r3, #0
  h[1] = 0;
 800b6aa:	e9c0 3300 	strd	r3, r3, [r0]
  h[2] = 0;
  h[3] = 0;
 800b6ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  h[4] = 0;
  h[5] = 0;
 800b6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  h[6] = 0;
  h[7] = 0;
 800b6b6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  h[8] = 0;
  h[9] = 0;
 800b6ba:	e9c0 3308 	strd	r3, r3, [r0, #32]
}
 800b6be:	4770      	bx	lr

0800b6c0 <fe_init>:
     (defined(HAVE_ED25519) && !defined(ED25519_SMALL))) && \
    !defined(FREESCALE_LTC_ECC)
/* to be Complementary to fe_low_mem.c */
void fe_init(void)
{
}
 800b6c0:	4770      	bx	lr

0800b6c2 <fe_sq>:
/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h,const fe f)
{
 800b6c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c6:	460b      	mov	r3, r1
  sword32 f0 = f[0];
  sword32 f1 = f[1];
 800b6c8:	e9d1 5200 	ldrd	r5, r2, [r1]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 800b6cc:	e9d1 c102 	ldrd	ip, r1, [r1, #8]
{
 800b6d0:	b097      	sub	sp, #92	; 0x5c
  sword32 f5_2 = 2 * f5;
  sword32 f6_2 = 2 * f6;
  sword32 f7_2 = 2 * f7;
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 800b6d2:	f04f 0926 	mov.w	r9, #38	; 0x26
  sword32 f3 = f[3];
 800b6d6:	9107      	str	r1, [sp, #28]
  sword32 f5 = f[5];
 800b6d8:	e9d3 e104 	ldrd	lr, r1, [r3, #16]
 800b6dc:	9101      	str	r1, [sp, #4]
  sword32 f7 = f[7];
 800b6de:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
 800b6e2:	9103      	str	r1, [sp, #12]
  sword32 f8 = f[8];
 800b6e4:	6a19      	ldr	r1, [r3, #32]
  sword32 f9 = f[9];
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	9308      	str	r3, [sp, #32]
  sword32 f2_2 = 2 * f2;
 800b6ea:	ea4f 034c 	mov.w	r3, ip, lsl #1
 800b6ee:	9305      	str	r3, [sp, #20]
  sword32 f3_2 = 2 * f3;
 800b6f0:	9b07      	ldr	r3, [sp, #28]
  sword32 f8 = f[8];
 800b6f2:	9104      	str	r1, [sp, #16]
  sword32 f3_2 = 2 * f3;
 800b6f4:	ea4f 0b43 	mov.w	fp, r3, lsl #1
  sword32 f4_2 = 2 * f4;
 800b6f8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800b6fc:	930b      	str	r3, [sp, #44]	; 0x2c
  sword32 f5_2 = 2 * f5;
 800b6fe:	9b01      	ldr	r3, [sp, #4]
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 800b700:	9903      	ldr	r1, [sp, #12]
{
 800b702:	9000      	str	r0, [sp, #0]
  sword32 f5_2 = 2 * f5;
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	9302      	str	r3, [sp, #8]
  sword32 f7_2 = 2 * f7;
 800b708:	9b03      	ldr	r3, [sp, #12]
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 800b70a:	9808      	ldr	r0, [sp, #32]
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 800b70c:	9e01      	ldr	r6, [sp, #4]
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 800b70e:	fb09 f101 	mul.w	r1, r9, r1
 800b712:	9106      	str	r1, [sp, #24]
  sword32 f7_2 = 2 * f7;
 800b714:	005b      	lsls	r3, r3, #1
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 800b716:	9904      	ldr	r1, [sp, #16]
  sword32 f7_2 = 2 * f7;
 800b718:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 f1_2 = 2 * f1;
 800b71a:	ea4f 0842 	mov.w	r8, r2, lsl #1
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 800b71e:	fb09 f000 	mul.w	r0, r9, r0
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 800b722:	2313      	movs	r3, #19
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 800b724:	4359      	muls	r1, r3
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 800b726:	fb03 fa04 	mul.w	sl, r3, r4
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 800b72a:	fb09 f906 	mul.w	r9, r9, r6
  sword64 f1f4_2  = f1_2 * (sword64) f4;
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
  sword64 f1f6_2  = f1_2 * (sword64) f6;
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
  sword64 f1f8_2  = f1_2 * (sword64) f8;
  sword64 f1f9_76 = f1_2 * (sword64) f9_38;
 800b72e:	fb88 3600 	smull	r3, r6, r8, r0
  sword32 f0_2 = 2 * f0;
 800b732:	006f      	lsls	r7, r5, #1
  sword64 f7f8_38 = f7_2 * (sword64) f8_19;
  sword64 f7f9_76 = f7_2 * (sword64) f9_38;
  sword64 f8f8_19 = f8   * (sword64) f8_19;
  sword64 f8f9_38 = f8   * (sword64) f9_38;
  sword64 f9f9_38 = f9   * (sword64) f9_38;
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 800b734:	fbc5 3605 	smlal	r3, r6, r5, r5
 800b738:	ea4f 054c 	mov.w	r5, ip, lsl #1
 800b73c:	fbc5 3601 	smlal	r3, r6, r5, r1
 800b740:	9d06      	ldr	r5, [sp, #24]
 800b742:	fbcb 3605 	smlal	r3, r6, fp, r5
 800b746:	ea4f 054e 	mov.w	r5, lr, lsl #1
 800b74a:	fbc5 360a 	smlal	r3, r6, r5, sl
 800b74e:	461d      	mov	r5, r3
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	fbc3 5609 	smlal	r5, r6, r3, r9
 800b756:	950a      	str	r5, [sp, #40]	; 0x28
  sword64 f2f9_38 = f2   * (sword64) f9_38;
 800b758:	fb8c 5900 	smull	r5, r9, ip, r0
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
 800b75c:	9b06      	ldr	r3, [sp, #24]
 800b75e:	fbc7 5902 	smlal	r5, r9, r7, r2
 800b762:	fbcb 5901 	smlal	r5, r9, fp, r1
 800b766:	fbce 5903 	smlal	r5, r9, lr, r3
 800b76a:	9b02      	ldr	r3, [sp, #8]
 800b76c:	fbc3 590a 	smlal	r5, r9, r3, sl
 800b770:	e9cd 590c 	strd	r5, r9, [sp, #48]	; 0x30
  sword64 f1f1_2  = f1_2 * (sword64) f1;
 800b774:	fb82 5308 	smull	r5, r3, r2, r8
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 800b778:	fbc7 530c 	smlal	r5, r3, r7, ip
 800b77c:	fbcb 5300 	smlal	r5, r3, fp, r0
 800b780:	ea4f 024e 	mov.w	r2, lr, lsl #1
 800b784:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b788:	fbc1 5302 	smlal	r5, r3, r1, r2
 800b78c:	9a02      	ldr	r2, [sp, #8]
 800b78e:	fbc2 5309 	smlal	r5, r3, r2, r9
 800b792:	461a      	mov	r2, r3
 800b794:	fbc4 520a 	smlal	r5, r2, r4, sl
 800b798:	e9cd 520e 	strd	r5, r2, [sp, #56]	; 0x38
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 800b79c:	9a07      	ldr	r2, [sp, #28]
  sword64 f1f2_2  = f1_2 * (sword64) f2;
 800b79e:	fb8c 5308 	smull	r5, r3, ip, r8
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 800b7a2:	fbc7 5302 	smlal	r5, r3, r7, r2
 800b7a6:	9a02      	ldr	r2, [sp, #8]
 800b7a8:	fbce 5300 	smlal	r5, r3, lr, r0
 800b7ac:	fbc2 5301 	smlal	r5, r3, r2, r1
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	fbc4 5209 	smlal	r5, r2, r4, r9
 800b7b6:	e9cd 5210 	strd	r5, r2, [sp, #64]	; 0x40
  sword64 f1f3_4  = f1_2 * (sword64) f3_2;
 800b7ba:	fb88 2a0b 	smull	r2, sl, r8, fp
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800b7be:	fbc7 2a0e 	smlal	r2, sl, r7, lr
 800b7c2:	fbcc 2a0c 	smlal	r2, sl, ip, ip
 800b7c6:	f8dd c008 	ldr.w	ip, [sp, #8]
  sword32 f6_2 = 2 * f6;
 800b7ca:	0065      	lsls	r5, r4, #1
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800b7cc:	fbcc 2a00 	smlal	r2, sl, ip, r0
 800b7d0:	fbc1 2a05 	smlal	r2, sl, r1, r5
 800b7d4:	9d03      	ldr	r5, [sp, #12]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 800b7d6:	f8dd c014 	ldr.w	ip, [sp, #20]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800b7da:	fbc5 2a09 	smlal	r2, sl, r5, r9
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 800b7de:	9d01      	ldr	r5, [sp, #4]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800b7e0:	9206      	str	r2, [sp, #24]
  sword64 f1f4_2  = f1_2 * (sword64) f4;
 800b7e2:	fb8e 3208 	smull	r3, r2, lr, r8
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 800b7e6:	fbc7 3205 	smlal	r3, r2, r7, r5
 800b7ea:	9d07      	ldr	r5, [sp, #28]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 800b7ec:	f8dd 9010 	ldr.w	r9, [sp, #16]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 800b7f0:	fbc5 320c 	smlal	r3, r2, r5, ip
 800b7f4:	fbc4 3200 	smlal	r3, r2, r4, r0
 800b7f8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800b7fc:	461d      	mov	r5, r3
 800b7fe:	fbcc 5201 	smlal	r5, r2, ip, r1
 800b802:	9512      	str	r5, [sp, #72]	; 0x48
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 800b804:	9d02      	ldr	r5, [sp, #8]
 800b806:	fb88 3c05 	smull	r3, ip, r8, r5
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 800b80a:	9d05      	ldr	r5, [sp, #20]
 800b80c:	fbc7 3c04 	smlal	r3, ip, r7, r4
 800b810:	fbce 3c05 	smlal	r3, ip, lr, r5
 800b814:	9d07      	ldr	r5, [sp, #28]
 800b816:	fbc5 3c0b 	smlal	r3, ip, r5, fp
 800b81a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b81c:	fbc5 3c00 	smlal	r3, ip, r5, r0
 800b820:	461d      	mov	r5, r3
 800b822:	fbc9 5c01 	smlal	r5, ip, r9, r1
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 800b826:	9903      	ldr	r1, [sp, #12]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 800b828:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 800b82c:	fb84 3c08 	smull	r3, ip, r4, r8
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 800b830:	9507      	str	r5, [sp, #28]
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 800b832:	fbc7 3c01 	smlal	r3, ip, r7, r1
 800b836:	9d05      	ldr	r5, [sp, #20]
 800b838:	9901      	ldr	r1, [sp, #4]
 800b83a:	fbc1 3c05 	smlal	r3, ip, r1, r5
 800b83e:	fbce 3c0b 	smlal	r3, ip, lr, fp
 800b842:	4619      	mov	r1, r3
 800b844:	fbc9 1c00 	smlal	r1, ip, r9, r0
 800b848:	e9cd 1c14 	strd	r1, ip, [sp, #80]	; 0x50
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 800b84c:	9909      	ldr	r1, [sp, #36]	; 0x24
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800b84e:	9d05      	ldr	r5, [sp, #20]
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 800b852:	fb88 1c01 	smull	r1, ip, r8, r1
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800b856:	fbc7 1c09 	smlal	r1, ip, r7, r9
 800b85a:	fbc4 1c05 	smlal	r1, ip, r4, r5
 800b85e:	9d02      	ldr	r5, [sp, #8]
 800b860:	fbcb 1c05 	smlal	r1, ip, fp, r5
 800b864:	9d08      	ldr	r5, [sp, #32]
 800b866:	fbce 1c0e 	smlal	r1, ip, lr, lr
 800b86a:	fbc5 1c00 	smlal	r1, ip, r5, r0
 800b86e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 800b872:	fb89 0c08 	smull	r0, ip, r9, r8
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800b876:	468e      	mov	lr, r1
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 800b878:	fbc7 0c05 	smlal	r0, ip, r7, r5
 800b87c:	9903      	ldr	r1, [sp, #12]
 800b87e:	9d05      	ldr	r5, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800b880:	9f07      	ldr	r7, [sp, #28]
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 800b882:	fbc1 0c05 	smlal	r0, ip, r1, r5
 800b886:	fbc4 0c0b 	smlal	r0, ip, r4, fp
 800b88a:	9901      	ldr	r1, [sp, #4]
 800b88c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b88e:	fbc1 0c04 	smlal	r0, ip, r1, r4
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b892:	990a      	ldr	r1, [sp, #40]	; 0x28
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 800b894:	9008      	str	r0, [sp, #32]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b896:	f111 7b00 	adds.w	fp, r1, #33554432	; 0x2000000
 800b89a:	f146 0500 	adc.w	r5, r6, #0
 800b89e:	990c      	ldr	r1, [sp, #48]	; 0x30
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 800b8a0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b8a4:	ea4f 689b 	mov.w	r8, fp, lsr #26
 800b8a8:	ea48 1885 	orr.w	r8, r8, r5, lsl #6
 800b8ac:	eb18 0801 	adds.w	r8, r8, r1
 800b8b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8b2:	f00b 4b7c 	and.w	fp, fp, #4227858432	; 0xfc000000
 800b8b6:	eb43 69a5 	adc.w	r9, r3, r5, asr #26
 800b8ba:	ebb1 0b0b 	subs.w	fp, r1, fp
 800b8be:	eb66 0105 	sbc.w	r1, r6, r5
 800b8c2:	910a      	str	r1, [sp, #40]	; 0x28
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800b8c4:	9906      	ldr	r1, [sp, #24]
 800b8c6:	f111 7400 	adds.w	r4, r1, #33554432	; 0x2000000
 800b8ca:	f14a 0300 	adc.w	r3, sl, #0
 800b8ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b8d0:	0ea0      	lsrs	r0, r4, #26
 800b8d2:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 800b8d6:	1840      	adds	r0, r0, r1
 800b8d8:	eb42 6ca3 	adc.w	ip, r2, r3, asr #26
 800b8dc:	9a06      	ldr	r2, [sp, #24]
 800b8de:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800b8e2:	1b14      	subs	r4, r2, r4
 800b8e4:	eb6a 0103 	sbc.w	r1, sl, r3
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800b8e8:	f118 7680 	adds.w	r6, r8, #16777216	; 0x1000000
 800b8ec:	f149 0300 	adc.w	r3, r9, #0
 800b8f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8f2:	0e75      	lsrs	r5, r6, #25
 800b8f4:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
 800b8f8:	18aa      	adds	r2, r5, r2
 800b8fa:	9203      	str	r2, [sp, #12]
 800b8fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8fe:	f006 457e 	and.w	r5, r6, #4261412864	; 0xfe000000
 800b902:	eb42 6363 	adc.w	r3, r2, r3, asr #25
 800b906:	ebb8 0205 	subs.w	r2, r8, r5
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800b90a:	f110 7580 	adds.w	r5, r0, #16777216	; 0x1000000
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800b90e:	920c      	str	r2, [sp, #48]	; 0x30
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800b910:	ea4f 6655 	mov.w	r6, r5, lsr #25
 800b914:	f14c 0200 	adc.w	r2, ip, #0
 800b918:	ea46 16c2 	orr.w	r6, r6, r2, lsl #7
 800b91c:	19f6      	adds	r6, r6, r7
 800b91e:	9604      	str	r6, [sp, #16]
 800b920:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800b922:	f005 457e 	and.w	r5, r5, #4261412864	; 0xfe000000
 800b926:	eb46 6c62 	adc.w	ip, r6, r2, asr #25
 800b92a:	1b42      	subs	r2, r0, r5
 800b92c:	9207      	str	r2, [sp, #28]

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800b92e:	9a03      	ldr	r2, [sp, #12]
 800b930:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b932:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800b936:	9201      	str	r2, [sp, #4]
 800b938:	f143 0300 	adc.w	r3, r3, #0
 800b93c:	0e92      	lsrs	r2, r2, #26
 800b93e:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800b942:	1812      	adds	r2, r2, r0
 800b944:	9205      	str	r2, [sp, #20]
 800b946:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b948:	eb42 63a3 	adc.w	r3, r2, r3, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800b94c:	9a04      	ldr	r2, [sp, #16]

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800b94e:	9d08      	ldr	r5, [sp, #32]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800b950:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800b954:	9202      	str	r2, [sp, #8]
 800b956:	f14c 0c00 	adc.w	ip, ip, #0
 800b95a:	0e90      	lsrs	r0, r2, #26
 800b95c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b95e:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 800b962:	1880      	adds	r0, r0, r2
 800b964:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b966:	eb42 6cac 	adc.w	ip, r2, ip, asr #26
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800b96a:	9a05      	ldr	r2, [sp, #20]
 800b96c:	f112 7a80 	adds.w	sl, r2, #16777216	; 0x1000000
 800b970:	f143 0200 	adc.w	r2, r3, #0
 800b974:	ea4f 635a 	mov.w	r3, sl, lsr #25
 800b978:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b97c:	191c      	adds	r4, r3, r4
 800b97e:	eb41 6362 	adc.w	r3, r1, r2, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800b982:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 800b986:	f14c 0c00 	adc.w	ip, ip, #0
 800b98a:	ea4f 6159 	mov.w	r1, r9, lsr #25
 800b98e:	4672      	mov	r2, lr
 800b990:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 800b994:	1889      	adds	r1, r1, r2
 800b996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b998:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800b99c:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 800b9a0:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800b9a4:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 800b9a8:	f14c 0c00 	adc.w	ip, ip, #0
 800b9ac:	ea4f 6298 	mov.w	r2, r8, lsr #26
 800b9b0:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 800b9b4:	1952      	adds	r2, r2, r5
 800b9b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800b9b8:	9306      	str	r3, [sp, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800b9ba:	eb45 6cac 	adc.w	ip, r5, ip, asr #26

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800b9be:	f112 7e80 	adds.w	lr, r2, #16777216	; 0x1000000
 800b9c2:	f14c 0c00 	adc.w	ip, ip, #0
 800b9c6:	ea4f 655e 	mov.w	r5, lr, lsr #25
 800b9ca:	2313      	movs	r3, #19
 800b9cc:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 800b9d0:	fba5 6503 	umull	r6, r5, r5, r3
 800b9d4:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 800b9d8:	fb03 550c 	mla	r5, r3, ip, r5
 800b9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9de:	eb16 060b 	adds.w	r6, r6, fp
 800b9e2:	eb45 0503 	adc.w	r5, r5, r3

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b9e6:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000

  h[0] = (sword32)h0;
 800b9ea:	9b00      	ldr	r3, [sp, #0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b9ec:	f00c 4b7c 	and.w	fp, ip, #4227858432	; 0xfc000000
 800b9f0:	f145 0500 	adc.w	r5, r5, #0
 800b9f4:	ebb6 060b 	subs.w	r6, r6, fp
  h[0] = (sword32)h0;
 800b9f8:	601e      	str	r6, [r3, #0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800b9fa:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 800b9fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba00:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 800ba04:	eb1c 0503 	adds.w	r5, ip, r3
  h[1] = (sword32)h1;
 800ba08:	9b00      	ldr	r3, [sp, #0]
 800ba0a:	605d      	str	r5, [r3, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800ba0c:	9b01      	ldr	r3, [sp, #4]
 800ba0e:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	1b5d      	subs	r5, r3, r5
  h[2] = (sword32)h2;
 800ba16:	9b00      	ldr	r3, [sp, #0]
 800ba18:	609d      	str	r5, [r3, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 800ba20:	ebb3 050a 	subs.w	r5, r3, sl
  h[3] = (sword32)h3;
 800ba24:	9b00      	ldr	r3, [sp, #0]
 800ba26:	60dd      	str	r5, [r3, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800ba28:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 800ba2c:	1b64      	subs	r4, r4, r5
  h[4] = (sword32)h4;
 800ba2e:	611c      	str	r4, [r3, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800ba30:	9b06      	ldr	r3, [sp, #24]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800ba32:	9c04      	ldr	r4, [sp, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800ba34:	0ebf      	lsrs	r7, r7, #26
 800ba36:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 800ba3a:	9b07      	ldr	r3, [sp, #28]
 800ba3c:	18ff      	adds	r7, r7, r3
  h[5] = (sword32)h5;
 800ba3e:	9b00      	ldr	r3, [sp, #0]
 800ba40:	615f      	str	r7, [r3, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800ba42:	9b02      	ldr	r3, [sp, #8]
 800ba44:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 800ba48:	1ae3      	subs	r3, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800ba4a:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  h[6] = (sword32)h6;
 800ba4e:	9c00      	ldr	r4, [sp, #0]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800ba50:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800ba54:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800ba58:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800ba5c:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800ba60:	ebb2 020e 	subs.w	r2, r2, lr
  h[6] = (sword32)h6;
 800ba64:	61a3      	str	r3, [r4, #24]
  h[7] = (sword32)h7;
 800ba66:	61e0      	str	r0, [r4, #28]
  h[8] = (sword32)h8;
 800ba68:	6221      	str	r1, [r4, #32]
  h[9] = (sword32)h9;
 800ba6a:	6262      	str	r2, [r4, #36]	; 0x24
}
 800ba6c:	b017      	add	sp, #92	; 0x5c
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba72 <fe_add>:
Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h,const fe f,const fe g)
{
 800ba72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 h0 = f0 + g0;
  sword32 h1 = f1 + g1;
 800ba76:	6853      	ldr	r3, [r2, #4]
 800ba78:	684e      	ldr	r6, [r1, #4]
  sword32 h2 = f2 + g2;
 800ba7a:	688d      	ldr	r5, [r1, #8]
  sword32 h3 = f3 + g3;
 800ba7c:	68cc      	ldr	r4, [r1, #12]
  sword32 h4 = f4 + g4;
 800ba7e:	690f      	ldr	r7, [r1, #16]
  sword32 h5 = f5 + g5;
  sword32 h6 = f6 + g6;
  sword32 h7 = f7 + g7;
  sword32 h8 = f8 + g8;
  sword32 h9 = f9 + g9;
 800ba80:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
  sword32 h1 = f1 + g1;
 800ba84:	441e      	add	r6, r3
  sword32 h2 = f2 + g2;
 800ba86:	6893      	ldr	r3, [r2, #8]
 800ba88:	441d      	add	r5, r3
  sword32 h3 = f3 + g3;
 800ba8a:	68d3      	ldr	r3, [r2, #12]
 800ba8c:	441c      	add	r4, r3
  sword32 h4 = f4 + g4;
 800ba8e:	6913      	ldr	r3, [r2, #16]
 800ba90:	eb07 0c03 	add.w	ip, r7, r3
  sword32 h5 = f5 + g5;
 800ba94:	694f      	ldr	r7, [r1, #20]
 800ba96:	6953      	ldr	r3, [r2, #20]
 800ba98:	eb07 0e03 	add.w	lr, r7, r3
  sword32 h6 = f6 + g6;
 800ba9c:	698f      	ldr	r7, [r1, #24]
 800ba9e:	6993      	ldr	r3, [r2, #24]
 800baa0:	eb07 0803 	add.w	r8, r7, r3
  sword32 h7 = f7 + g7;
 800baa4:	69cf      	ldr	r7, [r1, #28]
 800baa6:	69d3      	ldr	r3, [r2, #28]
 800baa8:	eb07 0903 	add.w	r9, r7, r3
  sword32 h8 = f8 + g8;
 800baac:	6a13      	ldr	r3, [r2, #32]
 800baae:	6a0f      	ldr	r7, [r1, #32]
  sword32 h0 = f0 + g0;
 800bab0:	6809      	ldr	r1, [r1, #0]
  sword32 h8 = f8 + g8;
 800bab2:	441f      	add	r7, r3
  sword32 h9 = f9 + g9;
 800bab4:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 h0 = f0 + g0;
 800bab6:	6812      	ldr	r2, [r2, #0]
  sword32 h9 = f9 + g9;
 800bab8:	4453      	add	r3, sl
  sword32 h0 = f0 + g0;
 800baba:	440a      	add	r2, r1
  h[0] = h0;
  h[1] = h1;
 800babc:	e9c0 2600 	strd	r2, r6, [r0]
  h[2] = h2;
  h[3] = h3;
 800bac0:	e9c0 5402 	strd	r5, r4, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 800bac4:	e9c0 ce04 	strd	ip, lr, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 800bac8:	e9c0 8906 	strd	r8, r9, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 800bacc:	e9c0 7308 	strd	r7, r3, [r0, #32]
}
 800bad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bad4 <fe_tobytes>:
  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s,const fe h)
{
 800bad4:	460b      	mov	r3, r1
 800bad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 h4 = h[4];
  sword32 h5 = h[5];
  sword32 h6 = h[6];
  sword32 h7 = h[7];
  sword32 h8 = h[8];
  sword32 h9 = h[9];
 800bada:	e9d3 9208 	ldrd	r9, r2, [r3, #32]
  sword32 h1 = h[1];
 800bade:	e9d1 8e00 	ldrd	r8, lr, [r1]
  sword32 carry6;
  sword32 carry7;
  sword32 carry8;
  sword32 carry9;

  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 800bae2:	f04f 0a13 	mov.w	sl, #19
  sword32 h5 = h[5];
 800bae6:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
  sword32 h7 = h[7];
 800baea:	e9d3 5406 	ldrd	r5, r4, [r3, #24]
  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 800baee:	fb0a f302 	mul.w	r3, sl, r2
  sword32 h3 = h[3];
 800baf2:	e9d1 c102 	ldrd	ip, r1, [r1, #8]
  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 800baf6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  q = (h0 + q) >> 26;
 800bafa:	eb08 6363 	add.w	r3, r8, r3, asr #25
  q = (h1 + q) >> 25;
 800bafe:	eb0e 63a3 	add.w	r3, lr, r3, asr #26
  q = (h2 + q) >> 26;
 800bb02:	eb0c 6363 	add.w	r3, ip, r3, asr #25
  q = (h3 + q) >> 25;
 800bb06:	eb01 63a3 	add.w	r3, r1, r3, asr #26
  q = (h4 + q) >> 26;
 800bb0a:	eb07 6363 	add.w	r3, r7, r3, asr #25
  q = (h5 + q) >> 25;
 800bb0e:	eb06 63a3 	add.w	r3, r6, r3, asr #26
  q = (h6 + q) >> 26;
 800bb12:	eb05 6363 	add.w	r3, r5, r3, asr #25
  q = (h7 + q) >> 25;
 800bb16:	eb04 63a3 	add.w	r3, r4, r3, asr #26
  q = (h8 + q) >> 26;
 800bb1a:	eb09 6363 	add.w	r3, r9, r3, asr #25
  q = (h9 + q) >> 25;
 800bb1e:	eb02 63a3 	add.w	r3, r2, r3, asr #26
 800bb22:	165b      	asrs	r3, r3, #25

  /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
  h0 += 19 * q;
 800bb24:	fb0a 8803 	mla	r8, sl, r3, r8
  /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */

  carry0 = h0 >> 26; h1 += carry0; h0 -= carry0 << 26;
 800bb28:	eb0e 6ea8 	add.w	lr, lr, r8, asr #26
 800bb2c:	f028 487c 	bic.w	r8, r8, #4227858432	; 0xfc000000
  evidently 2^255 h10-2^255 q = 0.
  Goal: Output h0+...+2^230 h9.
  */

  s[0] = (byte)(h0 >> 0);
  s[1] = (byte)(h0 >> 8);
 800bb30:	ea4f 2328 	mov.w	r3, r8, asr #8
  carry1 = h1 >> 25; h2 += carry1; h1 -= carry1 << 25;
 800bb34:	eb0c 6c6e 	add.w	ip, ip, lr, asr #25
  s[1] = (byte)(h0 >> 8);
 800bb38:	7043      	strb	r3, [r0, #1]
 800bb3a:	f02e 4e7e 	bic.w	lr, lr, #4261412864	; 0xfe000000
  s[2] = (byte)(h0 >> 16);
 800bb3e:	ea4f 4328 	mov.w	r3, r8, asr #16
 800bb42:	7083      	strb	r3, [r0, #2]
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 800bb44:	ea4f 038e 	mov.w	r3, lr, lsl #2
  s[0] = (byte)(h0 >> 0);
 800bb48:	f880 8000 	strb.w	r8, [r0]
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 800bb4c:	ea43 6818 	orr.w	r8, r3, r8, lsr #24
  s[4] = (byte)(h1 >> 6);
 800bb50:	ea4f 13ae 	mov.w	r3, lr, asr #6
  carry2 = h2 >> 26; h3 += carry2; h2 -= carry2 << 26;
 800bb54:	eb01 61ac 	add.w	r1, r1, ip, asr #26
  s[4] = (byte)(h1 >> 6);
 800bb58:	7103      	strb	r3, [r0, #4]
 800bb5a:	f02c 4c7c 	bic.w	ip, ip, #4227858432	; 0xfc000000
  s[5] = (byte)(h1 >> 14);
 800bb5e:	ea4f 33ae 	mov.w	r3, lr, asr #14
 800bb62:	7143      	strb	r3, [r0, #5]
  s[6] = (byte)((h1 >> 22) | (h2 << 3));
 800bb64:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800bb68:	ea43 5e9e 	orr.w	lr, r3, lr, lsr #22
  s[7] = (byte)(h2 >> 5);
 800bb6c:	ea4f 136c 	mov.w	r3, ip, asr #5
  carry3 = h3 >> 25; h4 += carry3; h3 -= carry3 << 25;
 800bb70:	eb07 6761 	add.w	r7, r7, r1, asr #25
  s[7] = (byte)(h2 >> 5);
 800bb74:	71c3      	strb	r3, [r0, #7]
 800bb76:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
  s[8] = (byte)(h2 >> 13);
 800bb7a:	ea4f 336c 	mov.w	r3, ip, asr #13
 800bb7e:	7203      	strb	r3, [r0, #8]
  s[9] = (byte)((h2 >> 21) | (h3 << 5));
 800bb80:	014b      	lsls	r3, r1, #5
 800bb82:	ea43 5c5c 	orr.w	ip, r3, ip, lsr #21
  s[10] = (byte)(h3 >> 3);
 800bb86:	10cb      	asrs	r3, r1, #3
 800bb88:	7283      	strb	r3, [r0, #10]
  s[11] = (byte)(h3 >> 11);
 800bb8a:	12cb      	asrs	r3, r1, #11
 800bb8c:	72c3      	strb	r3, [r0, #11]
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 800bb8e:	01bb      	lsls	r3, r7, #6
  carry4 = h4 >> 26; h5 += carry4; h4 -= carry4 << 26;
 800bb90:	eb06 66a7 	add.w	r6, r6, r7, asr #26
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 800bb94:	ea43 41d1 	orr.w	r1, r3, r1, lsr #19
  s[13] = (byte)(h4 >> 2);
 800bb98:	f3c7 0397 	ubfx	r3, r7, #2, #24
  carry5 = h5 >> 25; h6 += carry5; h5 -= carry5 << 25;
 800bb9c:	eb05 6566 	add.w	r5, r5, r6, asr #25
  s[13] = (byte)(h4 >> 2);
 800bba0:	7343      	strb	r3, [r0, #13]
 800bba2:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
  s[14] = (byte)(h4 >> 10);
 800bba6:	f3c7 238f 	ubfx	r3, r7, #10, #16
 800bbaa:	7383      	strb	r3, [r0, #14]
  s[15] = (byte)(h4 >> 18);
  s[16] = (byte)(h5 >> 0);
  s[17] = (byte)(h5 >> 8);
 800bbac:	1233      	asrs	r3, r6, #8
  carry6 = h6 >> 26; h7 += carry6; h6 -= carry6 << 26;
 800bbae:	eb04 64a5 	add.w	r4, r4, r5, asr #26
  s[17] = (byte)(h5 >> 8);
 800bbb2:	7443      	strb	r3, [r0, #17]
 800bbb4:	f025 457c 	bic.w	r5, r5, #4227858432	; 0xfc000000
  s[18] = (byte)(h5 >> 16);
 800bbb8:	1433      	asrs	r3, r6, #16
 800bbba:	7483      	strb	r3, [r0, #18]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 800bbbc:	006b      	lsls	r3, r5, #1
  s[16] = (byte)(h5 >> 0);
 800bbbe:	7406      	strb	r6, [r0, #16]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 800bbc0:	ea43 6616 	orr.w	r6, r3, r6, lsr #24
  s[20] = (byte)(h6 >> 7);
 800bbc4:	11eb      	asrs	r3, r5, #7
  carry7 = h7 >> 25; h8 += carry7; h7 -= carry7 << 25;
 800bbc6:	eb09 6964 	add.w	r9, r9, r4, asr #25
  s[20] = (byte)(h6 >> 7);
 800bbca:	7503      	strb	r3, [r0, #20]
 800bbcc:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
  s[21] = (byte)(h6 >> 15);
 800bbd0:	13eb      	asrs	r3, r5, #15
  s[15] = (byte)(h4 >> 18);
 800bbd2:	f3c7 4787 	ubfx	r7, r7, #18, #8
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 800bbd6:	f880 8003 	strb.w	r8, [r0, #3]
  s[6] = (byte)((h1 >> 22) | (h2 << 3));
 800bbda:	f880 e006 	strb.w	lr, [r0, #6]
  s[9] = (byte)((h2 >> 21) | (h3 << 5));
 800bbde:	f880 c009 	strb.w	ip, [r0, #9]
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 800bbe2:	7301      	strb	r1, [r0, #12]
  s[15] = (byte)(h4 >> 18);
 800bbe4:	73c7      	strb	r7, [r0, #15]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 800bbe6:	74c6      	strb	r6, [r0, #19]
  s[21] = (byte)(h6 >> 15);
 800bbe8:	7543      	strb	r3, [r0, #21]
  s[22] = (byte)((h6 >> 23) | (h7 << 3));
 800bbea:	00e3      	lsls	r3, r4, #3
 800bbec:	ea43 55d5 	orr.w	r5, r3, r5, lsr #23
  s[23] = (byte)(h7 >> 5);
 800bbf0:	1163      	asrs	r3, r4, #5
 800bbf2:	f029 4b7c 	bic.w	fp, r9, #4227858432	; 0xfc000000
 800bbf6:	75c3      	strb	r3, [r0, #23]
  s[24] = (byte)(h7 >> 13);
 800bbf8:	1363      	asrs	r3, r4, #13
 800bbfa:	7603      	strb	r3, [r0, #24]
  s[25] = (byte)((h7 >> 21) | (h8 << 4));
 800bbfc:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800bc00:	ea43 5454 	orr.w	r4, r3, r4, lsr #21
  carry8 = h8 >> 26; h9 += carry8; h8 -= carry8 << 26;
 800bc04:	eb02 62a9 	add.w	r2, r2, r9, asr #26
  s[26] = (byte)(h8 >> 4);
 800bc08:	ea4f 132b 	mov.w	r3, fp, asr #4
 800bc0c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
 800bc10:	7683      	strb	r3, [r0, #26]
  s[27] = (byte)(h8 >> 12);
 800bc12:	ea4f 332b 	mov.w	r3, fp, asr #12
 800bc16:	76c3      	strb	r3, [r0, #27]
  s[28] = (byte)((h8 >> 20) | (h9 << 6));
 800bc18:	0193      	lsls	r3, r2, #6
 800bc1a:	ea43 5b1b 	orr.w	fp, r3, fp, lsr #20
  s[29] = (byte)(h9 >> 2);
 800bc1e:	1093      	asrs	r3, r2, #2
 800bc20:	7743      	strb	r3, [r0, #29]
  s[30] = (byte)(h9 >> 10);
 800bc22:	1293      	asrs	r3, r2, #10
  s[31] = (byte)(h9 >> 18);
 800bc24:	1492      	asrs	r2, r2, #18
  s[22] = (byte)((h6 >> 23) | (h7 << 3));
 800bc26:	7585      	strb	r5, [r0, #22]
  s[25] = (byte)((h7 >> 21) | (h8 << 4));
 800bc28:	7644      	strb	r4, [r0, #25]
  s[28] = (byte)((h8 >> 20) | (h9 << 6));
 800bc2a:	f880 b01c 	strb.w	fp, [r0, #28]
  s[30] = (byte)(h9 >> 10);
 800bc2e:	7783      	strb	r3, [r0, #30]
  s[31] = (byte)(h9 >> 18);
 800bc30:	77c2      	strb	r2, [r0, #31]
}
 800bc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc36 <fe_sub>:
Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h,const fe f,const fe g)
{
 800bc36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 h0 = f0 - g0;
  sword32 h1 = f1 - g1;
 800bc3a:	6853      	ldr	r3, [r2, #4]
 800bc3c:	684e      	ldr	r6, [r1, #4]
  sword32 h2 = f2 - g2;
 800bc3e:	688d      	ldr	r5, [r1, #8]
  sword32 h3 = f3 - g3;
 800bc40:	68cc      	ldr	r4, [r1, #12]
  sword32 h4 = f4 - g4;
 800bc42:	690f      	ldr	r7, [r1, #16]
  sword32 h1 = f1 - g1;
 800bc44:	1af6      	subs	r6, r6, r3
  sword32 h2 = f2 - g2;
 800bc46:	6893      	ldr	r3, [r2, #8]
 800bc48:	1aed      	subs	r5, r5, r3
  sword32 h3 = f3 - g3;
 800bc4a:	68d3      	ldr	r3, [r2, #12]
 800bc4c:	eba4 0a03 	sub.w	sl, r4, r3
  sword32 h4 = f4 - g4;
 800bc50:	6913      	ldr	r3, [r2, #16]
  sword32 h5 = f5 - g5;
  sword32 h6 = f6 - g6;
  sword32 h7 = f7 - g7;
  sword32 h8 = f8 - g8;
  sword32 h9 = f9 - g9;
 800bc52:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  sword32 h4 = f4 - g4;
 800bc54:	eba7 0c03 	sub.w	ip, r7, r3
  sword32 h5 = f5 - g5;
 800bc58:	694f      	ldr	r7, [r1, #20]
 800bc5a:	6953      	ldr	r3, [r2, #20]
 800bc5c:	eba7 0e03 	sub.w	lr, r7, r3
  sword32 h6 = f6 - g6;
 800bc60:	698f      	ldr	r7, [r1, #24]
 800bc62:	6993      	ldr	r3, [r2, #24]
 800bc64:	eba7 0803 	sub.w	r8, r7, r3
  sword32 h7 = f7 - g7;
 800bc68:	69cf      	ldr	r7, [r1, #28]
 800bc6a:	69d3      	ldr	r3, [r2, #28]
 800bc6c:	eba7 0903 	sub.w	r9, r7, r3
  sword32 h8 = f8 - g8;
 800bc70:	6a13      	ldr	r3, [r2, #32]
 800bc72:	6a0f      	ldr	r7, [r1, #32]
  sword32 h0 = f0 - g0;
 800bc74:	6809      	ldr	r1, [r1, #0]
  sword32 h8 = f8 - g8;
 800bc76:	1aff      	subs	r7, r7, r3
  sword32 h9 = f9 - g9;
 800bc78:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 h0 = f0 - g0;
 800bc7a:	6812      	ldr	r2, [r2, #0]
  sword32 h9 = f9 - g9;
 800bc7c:	1ae3      	subs	r3, r4, r3
  sword32 h0 = f0 - g0;
 800bc7e:	1a8a      	subs	r2, r1, r2
  h[0] = h0;
  h[1] = h1;
 800bc80:	e9c0 2600 	strd	r2, r6, [r0]
  h[2] = h2;
  h[3] = h3;
 800bc84:	e9c0 5a02 	strd	r5, sl, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 800bc88:	e9c0 ce04 	strd	ip, lr, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 800bc8c:	e9c0 8906 	strd	r8, r9, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 800bc90:	e9c0 7308 	strd	r7, r3, [r0, #32]
}
 800bc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bc98 <fe_frombytes>:
/*
Ignores top bit of h.
*/

void fe_frombytes(fe h,const unsigned char *s)
{
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	b08d      	sub	sp, #52	; 0x34
  sword64 h0 = load_4(s);
 800bca0:	4608      	mov	r0, r1
{
 800bca2:	460e      	mov	r6, r1
  sword64 h0 = load_4(s);
 800bca4:	f7ff fcf0 	bl	800b688 <load_4>
 800bca8:	9004      	str	r0, [sp, #16]
  sword64 h1 = load_3(s + 4) << 6;
 800bcaa:	1d30      	adds	r0, r6, #4
  sword64 h0 = load_4(s);
 800bcac:	9109      	str	r1, [sp, #36]	; 0x24
  sword64 h1 = load_3(s + 4) << 6;
 800bcae:	f7ff fce1 	bl	800b674 <load_3>
 800bcb2:	018b      	lsls	r3, r1, #6
 800bcb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bcb8:	930a      	str	r3, [sp, #40]	; 0x28
 800bcba:	0183      	lsls	r3, r0, #6
  sword64 h2 = load_3(s + 7) << 5;
 800bcbc:	1df0      	adds	r0, r6, #7
  sword64 h1 = load_3(s + 4) << 6;
 800bcbe:	9301      	str	r3, [sp, #4]
  sword64 h2 = load_3(s + 7) << 5;
 800bcc0:	f7ff fcd8 	bl	800b674 <load_3>
 800bcc4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800bcc8:	0143      	lsls	r3, r0, #5
 800bcca:	ea4a 6ad0 	orr.w	sl, sl, r0, lsr #27
  sword64 h3 = load_3(s + 10) << 3;
 800bcce:	f106 000a 	add.w	r0, r6, #10
  sword64 h2 = load_3(s + 7) << 5;
 800bcd2:	9305      	str	r3, [sp, #20]
  sword64 h3 = load_3(s + 10) << 3;
 800bcd4:	f7ff fcce 	bl	800b674 <load_3>
 800bcd8:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 800bcdc:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 800bce0:	ea4f 0bc0 	mov.w	fp, r0, lsl #3
  sword64 h4 = load_3(s + 13) << 2;
 800bce4:	f106 000d 	add.w	r0, r6, #13
 800bce8:	f7ff fcc4 	bl	800b674 <load_3>
 800bcec:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800bcf0:	0083      	lsls	r3, r0, #2
 800bcf2:	ea48 7890 	orr.w	r8, r8, r0, lsr #30
  sword64 h5 = load_4(s + 16);
 800bcf6:	f106 0010 	add.w	r0, r6, #16
  sword64 h4 = load_3(s + 13) << 2;
 800bcfa:	9306      	str	r3, [sp, #24]
  sword64 h5 = load_4(s + 16);
 800bcfc:	f7ff fcc4 	bl	800b688 <load_4>
 800bd00:	9002      	str	r0, [sp, #8]
  sword64 h6 = load_3(s + 20) << 7;
 800bd02:	f106 0014 	add.w	r0, r6, #20
  sword64 h5 = load_4(s + 16);
 800bd06:	910b      	str	r1, [sp, #44]	; 0x2c
  sword64 h6 = load_3(s + 20) << 7;
 800bd08:	f7ff fcb4 	bl	800b674 <load_3>
 800bd0c:	01cb      	lsls	r3, r1, #7
 800bd0e:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	01c3      	lsls	r3, r0, #7
  sword64 h7 = load_3(s + 23) << 5;
 800bd16:	f106 0017 	add.w	r0, r6, #23
  sword64 h6 = load_3(s + 20) << 7;
 800bd1a:	9307      	str	r3, [sp, #28]
  sword64 h7 = load_3(s + 23) << 5;
 800bd1c:	f7ff fcaa 	bl	800b674 <load_3>
 800bd20:	014f      	lsls	r7, r1, #5
 800bd22:	0143      	lsls	r3, r0, #5
 800bd24:	ea47 67d0 	orr.w	r7, r7, r0, lsr #27
  sword64 h8 = load_3(s + 26) << 4;
 800bd28:	f106 001a 	add.w	r0, r6, #26
  sword64 h7 = load_3(s + 23) << 5;
 800bd2c:	9303      	str	r3, [sp, #12]
  sword64 h8 = load_3(s + 26) << 4;
 800bd2e:	f7ff fca1 	bl	800b674 <load_3>
 800bd32:	010d      	lsls	r5, r1, #4
 800bd34:	0103      	lsls	r3, r0, #4
 800bd36:	ea45 7510 	orr.w	r5, r5, r0, lsr #28
  sword64 h9 = (load_3(s + 29) & 8388607) << 2;
 800bd3a:	f106 001d 	add.w	r0, r6, #29
  sword64 h8 = load_3(s + 26) << 4;
 800bd3e:	9308      	str	r3, [sp, #32]
  sword64 h9 = (load_3(s + 29) & 8388607) << 2;
 800bd40:	f7ff fc98 	bl	800b674 <load_3>
 800bd44:	0080      	lsls	r0, r0, #2
 800bd46:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800bd4a:	f020 0003 	bic.w	r0, r0, #3
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800bd4e:	f100 7280 	add.w	r2, r0, #16777216	; 0x1000000
 800bd52:	9b04      	ldr	r3, [sp, #16]
 800bd54:	0e51      	lsrs	r1, r2, #25
 800bd56:	2613      	movs	r6, #19
 800bd58:	fba1 1606 	umull	r1, r6, r1, r6
 800bd5c:	18cb      	adds	r3, r1, r3
 800bd5e:	9304      	str	r3, [sp, #16]
 800bd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800bd62:	9908      	ldr	r1, [sp, #32]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800bd64:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
 800bd68:	f143 0600 	adc.w	r6, r3, #0
 800bd6c:	1a83      	subs	r3, r0, r2
 800bd6e:	9309      	str	r3, [sp, #36]	; 0x24
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800bd70:	9b01      	ldr	r3, [sp, #4]
 800bd72:	f113 7280 	adds.w	r2, r3, #16777216	; 0x1000000
 800bd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd78:	ea4f 6052 	mov.w	r0, r2, lsr #25
 800bd7c:	f143 0e00 	adc.w	lr, r3, #0
 800bd80:	9b05      	ldr	r3, [sp, #20]
 800bd82:	ea40 10ce 	orr.w	r0, r0, lr, lsl #7
 800bd86:	18c3      	adds	r3, r0, r3
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	9b01      	ldr	r3, [sp, #4]
 800bd8c:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
 800bd90:	eb4a 6e6e 	adc.w	lr, sl, lr, asr #25
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	930a      	str	r3, [sp, #40]	; 0x28
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800bd98:	f11b 7380 	adds.w	r3, fp, #16777216	; 0x1000000
 800bd9c:	9a06      	ldr	r2, [sp, #24]
 800bd9e:	f149 0c00 	adc.w	ip, r9, #0
 800bda2:	0e58      	lsrs	r0, r3, #25
 800bda4:	ea40 10cc 	orr.w	r0, r0, ip, lsl #7
 800bda8:	1882      	adds	r2, r0, r2
 800bdaa:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
 800bdae:	eb48 6c6c 	adc.w	ip, r8, ip, asr #25
 800bdb2:	ebbb 0b03 	subs.w	fp, fp, r3
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800bdb6:	9b02      	ldr	r3, [sp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800bdb8:	9201      	str	r2, [sp, #4]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800bdba:	f113 7080 	adds.w	r0, r3, #16777216	; 0x1000000
 800bdbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc0:	ea4f 6250 	mov.w	r2, r0, lsr #25
 800bdc4:	f143 0900 	adc.w	r9, r3, #0
 800bdc8:	9b07      	ldr	r3, [sp, #28]
 800bdca:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 800bdce:	18d2      	adds	r2, r2, r3
 800bdd0:	9b00      	ldr	r3, [sp, #0]
 800bdd2:	eb43 6969 	adc.w	r9, r3, r9, asr #25
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 800bddc:	1a1b      	subs	r3, r3, r0
 800bdde:	9306      	str	r3, [sp, #24]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800bde0:	9b03      	ldr	r3, [sp, #12]
 800bde2:	f113 7080 	adds.w	r0, r3, #16777216	; 0x1000000
 800bde6:	f147 0800 	adc.w	r8, r7, #0
 800bdea:	0e43      	lsrs	r3, r0, #25
 800bdec:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
 800bdf0:	185b      	adds	r3, r3, r1
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 800bdfa:	eb45 6868 	adc.w	r8, r5, r8, asr #25
 800bdfe:	1a1b      	subs	r3, r3, r0
 800be00:	9303      	str	r3, [sp, #12]

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800be02:	9b04      	ldr	r3, [sp, #16]
 800be04:	f113 7700 	adds.w	r7, r3, #33554432	; 0x2000000
 800be08:	f146 0300 	adc.w	r3, r6, #0
 800be0c:	9302      	str	r3, [sp, #8]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800be0e:	9b05      	ldr	r3, [sp, #20]
 800be10:	f113 7600 	adds.w	r6, r3, #33554432	; 0x2000000
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800be14:	9b01      	ldr	r3, [sp, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800be16:	f14e 0e00 	adc.w	lr, lr, #0
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800be1a:	f113 7000 	adds.w	r0, r3, #33554432	; 0x2000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be1e:	9b00      	ldr	r3, [sp, #0]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800be20:	f14c 0c00 	adc.w	ip, ip, #0
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800be24:	f112 7500 	adds.w	r5, r2, #33554432	; 0x2000000
 800be28:	f149 0900 	adc.w	r9, r9, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be2c:	f113 7100 	adds.w	r1, r3, #33554432	; 0x2000000
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800be30:	9b04      	ldr	r3, [sp, #16]
 800be32:	f007 4a7c 	and.w	sl, r7, #4227858432	; 0xfc000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be36:	f148 0800 	adc.w	r8, r8, #0
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800be3a:	ebb3 0a0a 	subs.w	sl, r3, sl
 800be3e:	9b02      	ldr	r3, [sp, #8]

  h[0] = (sword32)h0;
 800be40:	f8c4 a000 	str.w	sl, [r4]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800be44:	0ebf      	lsrs	r7, r7, #26
 800be46:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 800be4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be4c:	18ff      	adds	r7, r7, r3
  h[1] = (sword32)h1;
 800be4e:	6067      	str	r7, [r4, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800be50:	9b05      	ldr	r3, [sp, #20]
 800be52:	f006 477c 	and.w	r7, r6, #4227858432	; 0xfc000000
 800be56:	0eb6      	lsrs	r6, r6, #26
 800be58:	ea46 168e 	orr.w	r6, r6, lr, lsl #6
 800be5c:	1bdf      	subs	r7, r3, r7
 800be5e:	eb16 060b 	adds.w	r6, r6, fp
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800be62:	9b01      	ldr	r3, [sp, #4]
  h[2] = (sword32)h2;
  h[3] = (sword32)h3;
 800be64:	60e6      	str	r6, [r4, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800be66:	f000 467c 	and.w	r6, r0, #4227858432	; 0xfc000000
 800be6a:	1b9e      	subs	r6, r3, r6
 800be6c:	0e80      	lsrs	r0, r0, #26
 800be6e:	9b06      	ldr	r3, [sp, #24]
  h[2] = (sword32)h2;
 800be70:	60a7      	str	r7, [r4, #8]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800be72:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 800be76:	18c0      	adds	r0, r0, r3
  h[4] = (sword32)h4;
  h[5] = (sword32)h5;
 800be78:	6160      	str	r0, [r4, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800be7a:	9b03      	ldr	r3, [sp, #12]
  h[4] = (sword32)h4;
 800be7c:	6126      	str	r6, [r4, #16]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800be7e:	f005 407c 	and.w	r0, r5, #4227858432	; 0xfc000000
 800be82:	0ead      	lsrs	r5, r5, #26
 800be84:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 800be88:	1a12      	subs	r2, r2, r0
 800be8a:	18ed      	adds	r5, r5, r3
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be8c:	9b00      	ldr	r3, [sp, #0]
  h[6] = (sword32)h6;
 800be8e:	61a2      	str	r2, [r4, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be90:	f001 427c 	and.w	r2, r1, #4227858432	; 0xfc000000
 800be94:	1a9b      	subs	r3, r3, r2
  h[7] = (sword32)h7;
  h[8] = (sword32)h8;
 800be96:	6223      	str	r3, [r4, #32]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be98:	0e89      	lsrs	r1, r1, #26
 800be9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  h[7] = (sword32)h7;
 800be9c:	61e5      	str	r5, [r4, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800be9e:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 800bea2:	18c9      	adds	r1, r1, r3
  h[9] = (sword32)h9;
 800bea4:	6261      	str	r1, [r4, #36]	; 0x24
}
 800bea6:	b00d      	add	sp, #52	; 0x34
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800beac <fe_copy>:
/*
h = f
*/

void fe_copy(fe h,const fe f)
{
 800beac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sword32 f0 = f[0];
  sword32 f1 = f[1];
 800beb0:	e9d1 9800 	ldrd	r9, r8, [r1]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 800beb4:	e9d1 e302 	ldrd	lr, r3, [r1, #8]
  sword32 f4 = f[4];
  sword32 f5 = f[5];
 800beb8:	e9d1 7604 	ldrd	r7, r6, [r1, #16]
  sword32 f6 = f[6];
  sword32 f7 = f[7];
 800bebc:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  sword32 f8 = f[8];
  sword32 f9 = f[9];
 800bec0:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
  h[0] = f0;
  h[1] = f1;
 800bec4:	e9c0 9800 	strd	r9, r8, [r0]
  h[2] = f2;
  h[3] = f3;
 800bec8:	e9c0 e302 	strd	lr, r3, [r0, #8]
  h[4] = f4;
  h[5] = f5;
 800becc:	e9c0 7604 	strd	r7, r6, [r0, #16]
  h[6] = f6;
  h[7] = f7;
 800bed0:	e9c0 5406 	strd	r5, r4, [r0, #24]
  h[8] = f8;
  h[9] = f9;
 800bed4:	e9c0 2108 	strd	r2, r1, [r0, #32]
}
 800bed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bedc <fe_mul>:

With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h,const fe f,const fe g)
{
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	b0a5      	sub	sp, #148	; 0x94
  sword32 f0 = f[0];
 800bee2:	680b      	ldr	r3, [r1, #0]
 800bee4:	9301      	str	r3, [sp, #4]
  sword32 f1 = f[1];
 800bee6:	684b      	ldr	r3, [r1, #4]
 800bee8:	9308      	str	r3, [sp, #32]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 800beea:	e9d1 9302 	ldrd	r9, r3, [r1, #8]
 800beee:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 f4 = f[4];
  sword32 f5 = f[5];
 800bef0:	e9d1 7304 	ldrd	r7, r3, [r1, #16]
 800bef4:	930a      	str	r3, [sp, #40]	; 0x28
  sword32 f6 = f[6];
  sword32 f7 = f[7];
 800bef6:	e9d1 a306 	ldrd	sl, r3, [r1, #24]
 800befa:	930b      	str	r3, [sp, #44]	; 0x2c
  sword32 f8 = f[8];
  sword32 f9 = f[9];
 800befc:	e9d1 8308 	ldrd	r8, r3, [r1, #32]
 800bf00:	930c      	str	r3, [sp, #48]	; 0x30
  sword32 g0 = g[0];
  sword32 g1 = g[1];
  sword32 g2 = g[2];
 800bf02:	6893      	ldr	r3, [r2, #8]
 800bf04:	9302      	str	r3, [sp, #8]
  sword32 g3 = g[3];
 800bf06:	68d3      	ldr	r3, [r2, #12]
 800bf08:	9304      	str	r3, [sp, #16]
  sword32 g4 = g[4];
 800bf0a:	6913      	ldr	r3, [r2, #16]
 800bf0c:	9306      	str	r3, [sp, #24]
  sword32 g5 = g[5];
 800bf0e:	6953      	ldr	r3, [r2, #20]
 800bf10:	930d      	str	r3, [sp, #52]	; 0x34
  sword32 g6 = g[6];
 800bf12:	6993      	ldr	r3, [r2, #24]
 800bf14:	930f      	str	r3, [sp, #60]	; 0x3c
  sword32 g7 = g[7];
 800bf16:	69d3      	ldr	r3, [r2, #28]
 800bf18:	9316      	str	r3, [sp, #88]	; 0x58
  sword32 g8 = g[8];
 800bf1a:	6a13      	ldr	r3, [r2, #32]
  sword32 g1 = g[1];
 800bf1c:	e9d2 1400 	ldrd	r1, r4, [r2]
  sword32 g8 = g[8];
 800bf20:	9317      	str	r3, [sp, #92]	; 0x5c
  sword32 g9 = g[9];
 800bf22:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 g1_19 = 19 * g1; /* 1.959375*2^29 */
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
  sword32 g3_19 = 19 * g3;
  sword32 g4_19 = 19 * g4;
  sword32 g5_19 = 19 * g5;
 800bf24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  sword32 g9 = g[9];
 800bf26:	9319      	str	r3, [sp, #100]	; 0x64
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 800bf28:	f04f 0b13 	mov.w	fp, #19
  sword32 g5_19 = 19 * g5;
 800bf2c:	fb0b f202 	mul.w	r2, fp, r2
 800bf30:	9210      	str	r2, [sp, #64]	; 0x40
  sword32 g6_19 = 19 * g6;
 800bf32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 800bf34:	9b02      	ldr	r3, [sp, #8]
  sword64 f9g5_38 = f9_2 * (sword64) g5_19;
  sword64 f9g6_19 = f9   * (sword64) g6_19;
  sword64 f9g7_38 = f9_2 * (sword64) g7_19;
  sword64 f9g8_19 = f9   * (sword64) g8_19;
  sword64 f9g9_38 = f9_2 * (sword64) g9_19;
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 800bf36:	f8dd c004 	ldr.w	ip, [sp, #4]
  sword32 g6_19 = 19 * g6;
 800bf3a:	fb0b f202 	mul.w	r2, fp, r2
 800bf3e:	920e      	str	r2, [sp, #56]	; 0x38
  sword32 g7_19 = 19 * g7;
 800bf40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf42:	fb0b f202 	mul.w	r2, fp, r2
 800bf46:	9207      	str	r2, [sp, #28]
  sword32 g8_19 = 19 * g8;
 800bf48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf4a:	fb0b f202 	mul.w	r2, fp, r2
 800bf4e:	9205      	str	r2, [sp, #20]
  sword32 g9_19 = 19 * g9;
 800bf50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bf52:	fb0b f202 	mul.w	r2, fp, r2
 800bf56:	9203      	str	r2, [sp, #12]
  sword32 f1_2 = 2 * f1;
 800bf58:	9a08      	ldr	r2, [sp, #32]
 800bf5a:	0052      	lsls	r2, r2, #1
 800bf5c:	9211      	str	r2, [sp, #68]	; 0x44
  sword32 f3_2 = 2 * f3;
 800bf5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 800bf60:	9d11      	ldr	r5, [sp, #68]	; 0x44
  sword32 f3_2 = 2 * f3;
 800bf62:	0052      	lsls	r2, r2, #1
 800bf64:	9212      	str	r2, [sp, #72]	; 0x48
  sword32 f5_2 = 2 * f5;
 800bf66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf68:	0052      	lsls	r2, r2, #1
 800bf6a:	9213      	str	r2, [sp, #76]	; 0x4c
  sword32 f7_2 = 2 * f7;
 800bf6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
{
 800bf6e:	4686      	mov	lr, r0
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 800bf70:	9803      	ldr	r0, [sp, #12]
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 800bf72:	fb0b f303 	mul.w	r3, fp, r3
  sword32 f7_2 = 2 * f7;
 800bf76:	0052      	lsls	r2, r2, #1
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 800bf78:	931a      	str	r3, [sp, #104]	; 0x68
  sword32 f7_2 = 2 * f7;
 800bf7a:	9214      	str	r2, [sp, #80]	; 0x50
  sword32 g3_19 = 19 * g3;
 800bf7c:	9b04      	ldr	r3, [sp, #16]
  sword32 f9_2 = 2 * f9;
 800bf7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 800bf80:	fb85 6500 	smull	r6, r5, r5, r0
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 800bf84:	fbcc 6501 	smlal	r6, r5, ip, r1
 800bf88:	f8dd c014 	ldr.w	ip, [sp, #20]
  sword32 g3_19 = 19 * g3;
 800bf8c:	fb0b f303 	mul.w	r3, fp, r3
  sword32 f9_2 = 2 * f9;
 800bf90:	0052      	lsls	r2, r2, #1
  sword32 g3_19 = 19 * g3;
 800bf92:	9318      	str	r3, [sp, #96]	; 0x60
  sword32 f9_2 = 2 * f9;
 800bf94:	9215      	str	r2, [sp, #84]	; 0x54
  sword32 g4_19 = 19 * g4;
 800bf96:	9b06      	ldr	r3, [sp, #24]
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 800bf98:	fbc9 650c 	smlal	r6, r5, r9, ip
 800bf9c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800bfa0:	9807      	ldr	r0, [sp, #28]
 800bfa2:	fbcc 6500 	smlal	r6, r5, ip, r0
 800bfa6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bfa8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800bfac:	fbc7 6500 	smlal	r6, r5, r7, r0
 800bfb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  sword32 g4_19 = 19 * g4;
 800bfb2:	fb0b f303 	mul.w	r3, fp, r3
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 800bfb6:	fbc0 650c 	smlal	r6, r5, r0, ip
 800bfba:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bfbc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800bfc0:	fbca 6503 	smlal	r6, r5, sl, r3
 800bfc4:	fbc0 650c 	smlal	r6, r5, r0, ip
 800bfc8:	981a      	ldr	r0, [sp, #104]	; 0x68
 800bfca:	fbc8 6500 	smlal	r6, r5, r8, r0
 800bfce:	9815      	ldr	r0, [sp, #84]	; 0x54
  sword32 g1_19 = 19 * g1; /* 1.959375*2^29 */
 800bfd0:	fb0b f204 	mul.w	r2, fp, r4
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 800bfd4:	fbc0 6502 	smlal	r6, r5, r0, r2
  sword64 f1g0    = f1   * (sword64) g0;
 800bfd8:	9a08      	ldr	r2, [sp, #32]
  sword64 h1 = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
 800bfda:	9801      	ldr	r0, [sp, #4]
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 800bfdc:	961b      	str	r6, [sp, #108]	; 0x6c
  sword64 f1g0    = f1   * (sword64) g0;
 800bfde:	fb81 c202 	smull	ip, r2, r1, r2
  sword64 h1 = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
 800bfe2:	fbc0 c204 	smlal	ip, r2, r0, r4
 800bfe6:	9803      	ldr	r0, [sp, #12]
 800bfe8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bfea:	fbc0 c209 	smlal	ip, r2, r0, r9
 800bfee:	9805      	ldr	r0, [sp, #20]
 800bff0:	fbc0 c206 	smlal	ip, r2, r0, r6
 800bff4:	9807      	ldr	r0, [sp, #28]
 800bff6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bff8:	fbc0 c207 	smlal	ip, r2, r0, r7
 800bffc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bffe:	fbc0 c206 	smlal	ip, r2, r0, r6
 800c002:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c004:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c006:	fbc0 c20a 	smlal	ip, r2, r0, sl
 800c00a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c00c:	fbc3 c200 	smlal	ip, r2, r3, r0
 800c010:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c012:	fbc0 c208 	smlal	ip, r2, r0, r8
 800c016:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c018:	fbc0 c206 	smlal	ip, r2, r0, r6
 800c01c:	921c      	str	r2, [sp, #112]	; 0x70
 800c01e:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
  sword64 f1g1_2  = f1_2 * (sword64) g1;
 800c022:	9a11      	ldr	r2, [sp, #68]	; 0x44
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 800c024:	e9dd 0c01 	ldrd	r0, ip, [sp, #4]
  sword64 f1g1_2  = f1_2 * (sword64) g1;
 800c028:	fb84 6202 	smull	r6, r2, r4, r2
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 800c02c:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c030:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c032:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c036:	fbc1 6209 	smlal	r6, r2, r1, r9
 800c03a:	fbcc 6200 	smlal	r6, r2, ip, r0
 800c03e:	9805      	ldr	r0, [sp, #20]
 800c040:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800c044:	fbc0 6207 	smlal	r6, r2, r0, r7
 800c048:	9807      	ldr	r0, [sp, #28]
 800c04a:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c04e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c050:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800c054:	fbc0 620a 	smlal	r6, r2, r0, sl
 800c058:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c05a:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c05e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c060:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800c064:	fbc3 6208 	smlal	r6, r2, r3, r8
 800c068:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c06c:	921d      	str	r2, [sp, #116]	; 0x74
  sword64 f1g2    = f1   * (sword64) g2;
 800c06e:	9808      	ldr	r0, [sp, #32]
 800c070:	9a02      	ldr	r2, [sp, #8]
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 800c072:	f8dd c010 	ldr.w	ip, [sp, #16]
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 800c076:	9618      	str	r6, [sp, #96]	; 0x60
  sword64 f1g2    = f1   * (sword64) g2;
 800c078:	fb82 6200 	smull	r6, r2, r2, r0
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 800c07c:	9801      	ldr	r0, [sp, #4]
 800c07e:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c082:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c084:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800c088:	fbc4 6209 	smlal	r6, r2, r4, r9
 800c08c:	fbc1 6200 	smlal	r6, r2, r1, r0
 800c090:	9803      	ldr	r0, [sp, #12]
 800c092:	fbc0 6207 	smlal	r6, r2, r0, r7
 800c096:	9805      	ldr	r0, [sp, #20]
 800c098:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c09c:	9807      	ldr	r0, [sp, #28]
 800c09e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c0a2:	fbc0 620a 	smlal	r6, r2, r0, sl
 800c0a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c0a8:	fbc0 620c 	smlal	r6, r2, r0, ip
 800c0ac:	9810      	ldr	r0, [sp, #64]	; 0x40
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 800c0ae:	f8dd c018 	ldr.w	ip, [sp, #24]
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 800c0b2:	fbc0 6208 	smlal	r6, r2, r0, r8
 800c0b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c0b8:	fbc3 6200 	smlal	r6, r2, r3, r0
 800c0bc:	e9cd 621e 	strd	r6, r2, [sp, #120]	; 0x78
  sword64 f1g3_2  = f1_2 * (sword64) g3;
 800c0c0:	9b04      	ldr	r3, [sp, #16]
 800c0c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 800c0c4:	9801      	ldr	r0, [sp, #4]
 800c0c6:	9e03      	ldr	r6, [sp, #12]
  sword64 f1g3_2  = f1_2 * (sword64) g3;
 800c0c8:	fb83 2302 	smull	r2, r3, r3, r2
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 800c0cc:	fbc0 230c 	smlal	r2, r3, r0, ip
 800c0d0:	9802      	ldr	r0, [sp, #8]
 800c0d2:	fbc0 2309 	smlal	r2, r3, r0, r9
 800c0d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c0d8:	fbc4 2300 	smlal	r2, r3, r4, r0
 800c0dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c0de:	fbc1 2307 	smlal	r2, r3, r1, r7
 800c0e2:	fbc6 2300 	smlal	r2, r3, r6, r0
 800c0e6:	9805      	ldr	r0, [sp, #20]
 800c0e8:	fbc0 230a 	smlal	r2, r3, r0, sl
 800c0ec:	9807      	ldr	r0, [sp, #28]
 800c0ee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 800c0f2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 800c0f4:	fbc0 230c 	smlal	r2, r3, r0, ip
 800c0f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c0fa:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800c0fe:	fbc0 2308 	smlal	r2, r3, r0, r8
 800c102:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c104:	fbc0 230c 	smlal	r2, r3, r0, ip
 800c108:	9210      	str	r2, [sp, #64]	; 0x40
  sword64 f1g4    = f1   * (sword64) g4;
 800c10a:	9808      	ldr	r0, [sp, #32]
 800c10c:	9a06      	ldr	r2, [sp, #24]
 800c10e:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 800c112:	9801      	ldr	r0, [sp, #4]
 800c114:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c118:	9804      	ldr	r0, [sp, #16]
 800c11a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c11c:	fbc0 2c09 	smlal	r2, ip, r0, r9
 800c120:	9802      	ldr	r0, [sp, #8]
 800c122:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c126:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c128:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c12a:	fbc4 2c07 	smlal	r2, ip, r4, r7
 800c12e:	fbc1 2c00 	smlal	r2, ip, r1, r0
 800c132:	9803      	ldr	r0, [sp, #12]
 800c134:	fbc0 2c0a 	smlal	r2, ip, r0, sl
 800c138:	9805      	ldr	r0, [sp, #20]
 800c13a:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c13e:	9807      	ldr	r0, [sp, #28]
 800c140:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c142:	fbc0 2c08 	smlal	r2, ip, r0, r8
 800c146:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c148:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c14c:	920e      	str	r2, [sp, #56]	; 0x38
  sword64 f1g5_2  = f1_2 * (sword64) g5;
 800c14e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 800c152:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 800c154:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
  sword64 f1g5_2  = f1_2 * (sword64) g5;
 800c158:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 800c15c:	9801      	ldr	r0, [sp, #4]
 800c15e:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c162:	9806      	ldr	r0, [sp, #24]
 800c164:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c166:	fbc0 2c09 	smlal	r2, ip, r0, r9
 800c16a:	9804      	ldr	r0, [sp, #16]
 800c16c:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c170:	9802      	ldr	r0, [sp, #8]
 800c172:	9e03      	ldr	r6, [sp, #12]
 800c174:	fbc0 2c07 	smlal	r2, ip, r0, r7
 800c178:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c17a:	fbc4 2c00 	smlal	r2, ip, r4, r0
 800c17e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c180:	fbc1 2c0a 	smlal	r2, ip, r1, sl
 800c184:	fbc6 2c00 	smlal	r2, ip, r6, r0
 800c188:	9805      	ldr	r0, [sp, #20]
 800c18a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c18c:	fbc0 2c08 	smlal	r2, ip, r0, r8
 800c190:	9807      	ldr	r0, [sp, #28]
 800c192:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c196:	9207      	str	r2, [sp, #28]
  sword64 f1g6    = f1   * (sword64) g6;
 800c198:	9808      	ldr	r0, [sp, #32]
 800c19a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  sword64 h7 = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
 800c19c:	9e16      	ldr	r6, [sp, #88]	; 0x58
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 800c19e:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
  sword64 f1g6    = f1   * (sword64) g6;
 800c1a2:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h7 = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
 800c1a6:	9801      	ldr	r0, [sp, #4]
 800c1a8:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c1ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c1ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c1b0:	fbc0 2c09 	smlal	r2, ip, r0, r9
 800c1b4:	9806      	ldr	r0, [sp, #24]
 800c1b6:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c1ba:	9804      	ldr	r0, [sp, #16]
 800c1bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c1be:	fbc0 2c07 	smlal	r2, ip, r0, r7
 800c1c2:	9802      	ldr	r0, [sp, #8]
 800c1c4:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c1c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c1ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c1cc:	fbc4 2c0a 	smlal	r2, ip, r4, sl
 800c1d0:	fbc1 2c00 	smlal	r2, ip, r1, r0
 800c1d4:	9803      	ldr	r0, [sp, #12]
 800c1d6:	fbc0 2c08 	smlal	r2, ip, r0, r8
 800c1da:	9805      	ldr	r0, [sp, #20]
 800c1dc:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c1e0:	e9cd 2c22 	strd	r2, ip, [sp, #136]	; 0x88
  sword64 f1g7_2  = f1_2 * (sword64) g7;
 800c1e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c1e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 800c1e8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  sword64 f1g7_2  = f1_2 * (sword64) g7;
 800c1ea:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 800c1ee:	9801      	ldr	r0, [sp, #4]
 800c1f0:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c1f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c1f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c1f8:	fbc0 2c09 	smlal	r2, ip, r0, r9
 800c1fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c1fe:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c202:	9806      	ldr	r0, [sp, #24]
 800c204:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800c206:	fbc0 2c07 	smlal	r2, ip, r0, r7
 800c20a:	9804      	ldr	r0, [sp, #16]
 800c20c:	fbc0 2c06 	smlal	r2, ip, r0, r6
 800c210:	9802      	ldr	r0, [sp, #8]
 800c212:	fbc0 2c0a 	smlal	r2, ip, r0, sl
 800c216:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c218:	9e03      	ldr	r6, [sp, #12]
 800c21a:	fbc4 2c00 	smlal	r2, ip, r4, r0
 800c21e:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c220:	fbc1 2c08 	smlal	r2, ip, r1, r8
 800c224:	fbc6 2c00 	smlal	r2, ip, r6, r0
 800c228:	9203      	str	r2, [sp, #12]
  sword64 f1g8    = f1   * (sword64) g8;
 800c22a:	9808      	ldr	r0, [sp, #32]
 800c22c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 800c22e:	9e01      	ldr	r6, [sp, #4]
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 800c230:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 800c234:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  sword64 f1g8    = f1   * (sword64) g8;
 800c238:	fb82 2000 	smull	r2, r0, r2, r0
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 800c23c:	fbc6 200c 	smlal	r2, r0, r6, ip
 800c240:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c242:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800c246:	fbc6 2009 	smlal	r2, r0, r6, r9
 800c24a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800c24c:	fbc6 200c 	smlal	r2, r0, r6, ip
 800c250:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c252:	fbc6 2007 	smlal	r2, r0, r6, r7
 800c256:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c258:	9e06      	ldr	r6, [sp, #24]
 800c25a:	fbc6 2007 	smlal	r2, r0, r6, r7
 800c25e:	9e04      	ldr	r6, [sp, #16]
 800c260:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c262:	fbc6 200a 	smlal	r2, r0, r6, sl
 800c266:	9e02      	ldr	r6, [sp, #8]
 800c268:	fbc6 2007 	smlal	r2, r0, r6, r7
 800c26c:	fbc4 2008 	smlal	r2, r0, r4, r8
 800c270:	4684      	mov	ip, r0
 800c272:	980c      	ldr	r0, [sp, #48]	; 0x30
    i.e. |h0| <= 1.4*2^60; narrower ranges for h2, h4, h6, h8
  |h1| <= (1.65*1.65*2^51*(1+1+19+19+19+19+19+19+19+19))
    i.e. |h1| <= 1.7*2^59; narrower ranges for h3, h5, h7, h9
  */

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c274:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  /* |h0| <= 2^25 */
  /* |h4| <= 2^25 */
  /* |h1| <= 1.71*2^59 */
  /* |h5| <= 1.71*2^59 */

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800c276:	9f18      	ldr	r7, [sp, #96]	; 0x60
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 800c278:	fbc1 2c00 	smlal	r2, ip, r1, r0
 800c27c:	4616      	mov	r6, r2
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c27e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 800c280:	f8cd c020 	str.w	ip, [sp, #32]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c284:	f112 7000 	adds.w	r0, r2, #33554432	; 0x2000000
 800c288:	f145 0100 	adc.w	r1, r5, #0
 800c28c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c28e:	ea4f 6890 	mov.w	r8, r0, lsr #26
 800c292:	ea48 1881 	orr.w	r8, r8, r1, lsl #6
 800c296:	eb18 0802 	adds.w	r8, r8, r2
 800c29a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c29c:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 800c2a0:	eb42 62a1 	adc.w	r2, r2, r1, asr #26
 800c2a4:	1a20      	subs	r0, r4, r0
 800c2a6:	eb65 0101 	sbc.w	r1, r5, r1
 800c2aa:	910a      	str	r1, [sp, #40]	; 0x28
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c2ac:	9910      	ldr	r1, [sp, #64]	; 0x40
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c2ae:	9009      	str	r0, [sp, #36]	; 0x24
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c2b0:	f111 7400 	adds.w	r4, r1, #33554432	; 0x2000000
 800c2b4:	f143 0500 	adc.w	r5, r3, #0
 800c2b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c2ba:	0ea0      	lsrs	r0, r4, #26
 800c2bc:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
 800c2c0:	1840      	adds	r0, r0, r1
 800c2c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c2c4:	eb41 6ca5 	adc.w	ip, r1, r5, asr #26
 800c2c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c2ca:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800c2ce:	1b09      	subs	r1, r1, r4
 800c2d0:	eb63 0305 	sbc.w	r3, r3, r5
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800c2d4:	f118 7580 	adds.w	r5, r8, #16777216	; 0x1000000
 800c2d8:	f142 0200 	adc.w	r2, r2, #0
 800c2dc:	0e6c      	lsrs	r4, r5, #25
 800c2de:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 800c2e2:	19e4      	adds	r4, r4, r7
 800c2e4:	9404      	str	r4, [sp, #16]
 800c2e6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800c2e8:	9f07      	ldr	r7, [sp, #28]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800c2ea:	f005 457e 	and.w	r5, r5, #4261412864	; 0xfe000000
 800c2ee:	eb44 6262 	adc.w	r2, r4, r2, asr #25
 800c2f2:	ebb8 0405 	subs.w	r4, r8, r5
 800c2f6:	940b      	str	r4, [sp, #44]	; 0x2c
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800c2f8:	f110 7480 	adds.w	r4, r0, #16777216	; 0x1000000
 800c2fc:	f14c 0c00 	adc.w	ip, ip, #0
 800c300:	0e65      	lsrs	r5, r4, #25
 800c302:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 800c306:	19ed      	adds	r5, r5, r7
 800c308:	9505      	str	r5, [sp, #20]
 800c30a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800c30c:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 800c310:	eb45 6c6c 	adc.w	ip, r5, ip, asr #25
 800c314:	1b00      	subs	r0, r0, r4
 800c316:	900c      	str	r0, [sp, #48]	; 0x30
  /* |h1| <= 2^24; from now on fits into int32 */
  /* |h5| <= 2^24; from now on fits into int32 */
  /* |h2| <= 1.41*2^60 */
  /* |h6| <= 1.41*2^60 */

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c318:	9804      	ldr	r0, [sp, #16]
 800c31a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c31c:	f110 7000 	adds.w	r0, r0, #33554432	; 0x2000000
 800c320:	9001      	str	r0, [sp, #4]
 800c322:	f142 0200 	adc.w	r2, r2, #0
 800c326:	0e80      	lsrs	r0, r0, #26
 800c328:	ea40 1082 	orr.w	r0, r0, r2, lsl #6
 800c32c:	1900      	adds	r0, r0, r4
 800c32e:	9006      	str	r0, [sp, #24]
 800c330:	981f      	ldr	r0, [sp, #124]	; 0x7c
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c332:	9c22      	ldr	r4, [sp, #136]	; 0x88
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c334:	eb40 62a2 	adc.w	r2, r0, r2, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c338:	9805      	ldr	r0, [sp, #20]
 800c33a:	f110 7000 	adds.w	r0, r0, #33554432	; 0x2000000
 800c33e:	9002      	str	r0, [sp, #8]
 800c340:	f14c 0c00 	adc.w	ip, ip, #0
 800c344:	0e80      	lsrs	r0, r0, #26
 800c346:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 800c34a:	1900      	adds	r0, r0, r4
 800c34c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800c34e:	eb44 6cac 	adc.w	ip, r4, ip, asr #26
  /* |h2| <= 2^25; from now on fits into int32 unchanged */
  /* |h6| <= 2^25; from now on fits into int32 unchanged */
  /* |h3| <= 1.71*2^59 */
  /* |h7| <= 1.71*2^59 */

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800c352:	9c06      	ldr	r4, [sp, #24]
 800c354:	f114 7a80 	adds.w	sl, r4, #16777216	; 0x1000000
 800c358:	f142 0200 	adc.w	r2, r2, #0
 800c35c:	ea4f 645a 	mov.w	r4, sl, lsr #25
 800c360:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 800c364:	1864      	adds	r4, r4, r1
 800c366:	eb43 6362 	adc.w	r3, r3, r2, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800c36a:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 800c36e:	9a03      	ldr	r2, [sp, #12]
 800c370:	f14c 0c00 	adc.w	ip, ip, #0
 800c374:	ea4f 6159 	mov.w	r1, r9, lsr #25
 800c378:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 800c37c:	1889      	adds	r1, r1, r2
 800c37e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c380:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  /* |h3| <= 2^24; from now on fits into int32 unchanged */
  /* |h7| <= 2^24; from now on fits into int32 unchanged */
  /* |h4| <= 1.72*2^34 */
  /* |h8| <= 1.41*2^60 */

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c384:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 800c388:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c38c:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 800c390:	f14c 0c00 	adc.w	ip, ip, #0
 800c394:	ea4f 6298 	mov.w	r2, r8, lsr #26
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c398:	9307      	str	r3, [sp, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c39a:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 800c39e:	9b08      	ldr	r3, [sp, #32]
 800c3a0:	1992      	adds	r2, r2, r6
 800c3a2:	eb43 6cac 	adc.w	ip, r3, ip, asr #26
  /* |h4| <= 2^25; from now on fits into int32 unchanged */
  /* |h8| <= 2^25; from now on fits into int32 unchanged */
  /* |h5| <= 1.01*2^24 */
  /* |h9| <= 1.71*2^59 */

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800c3a6:	f112 7380 	adds.w	r3, r2, #16777216	; 0x1000000
 800c3aa:	f14c 0c00 	adc.w	ip, ip, #0
 800c3ae:	0e5d      	lsrs	r5, r3, #25
 800c3b0:	9303      	str	r3, [sp, #12]
 800c3b2:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 800c3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b8:	fba5 650b 	umull	r6, r5, r5, fp
 800c3bc:	18f6      	adds	r6, r6, r3
 800c3be:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 800c3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c4:	fb0b 550c 	mla	r5, fp, ip, r5
 800c3c8:	eb45 0503 	adc.w	r5, r5, r3
  /* |h9| <= 2^24; from now on fits into int32 unchanged */
  /* |h0| <= 1.1*2^39 */

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c3cc:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000
 800c3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3d2:	f145 0500 	adc.w	r5, r5, #0
 800c3d6:	f00c 4b7c 	and.w	fp, ip, #4227858432	; 0xfc000000
 800c3da:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 800c3de:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 800c3e2:	ebb6 060b 	subs.w	r6, r6, fp
 800c3e6:	eb1c 0503 	adds.w	r5, ip, r3
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c3ea:	9b01      	ldr	r3, [sp, #4]
  /* |h0| <= 2^25; from now on fits into int32 unchanged */
  /* |h1| <= 1.01*2^24 */

  h[0] = (sword32)h0;
  h[1] = (sword32)h1;
 800c3ec:	f8ce 5004 	str.w	r5, [lr, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c3f0:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 800c3f4:	9b04      	ldr	r3, [sp, #16]
  h[0] = (sword32)h0;
 800c3f6:	f8ce 6000 	str.w	r6, [lr]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c3fa:	1b5d      	subs	r5, r3, r5
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800c3fc:	9b06      	ldr	r3, [sp, #24]
  h[2] = (sword32)h2;
 800c3fe:	f8ce 5008 	str.w	r5, [lr, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800c402:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 800c406:	ebb3 050a 	subs.w	r5, r3, sl
  h[3] = (sword32)h3;
 800c40a:	f8ce 500c 	str.w	r5, [lr, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c40e:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 800c412:	1b64      	subs	r4, r4, r5
  h[4] = (sword32)h4;
 800c414:	f8ce 4010 	str.w	r4, [lr, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c418:	9b07      	ldr	r3, [sp, #28]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c41a:	9c05      	ldr	r4, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c41c:	0ebf      	lsrs	r7, r7, #26
 800c41e:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 800c422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c424:	18ff      	adds	r7, r7, r3
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c426:	9b02      	ldr	r3, [sp, #8]
  h[5] = (sword32)h5;
 800c428:	f8ce 7014 	str.w	r7, [lr, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c42c:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 800c430:	1ae3      	subs	r3, r4, r3
  h[6] = (sword32)h6;
 800c432:	f8ce 3018 	str.w	r3, [lr, #24]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800c436:	9b03      	ldr	r3, [sp, #12]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800c438:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c43c:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800c440:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800c444:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c448:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800c44c:	1ad2      	subs	r2, r2, r3
  h[7] = (sword32)h7;
 800c44e:	f8ce 001c 	str.w	r0, [lr, #28]
  h[8] = (sword32)h8;
 800c452:	f8ce 1020 	str.w	r1, [lr, #32]
  h[9] = (sword32)h9;
 800c456:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
}
 800c45a:	b025      	add	sp, #148	; 0x94
 800c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c460 <fe_invert>:
{
 800c460:	b530      	push	{r4, r5, lr}
 800c462:	b0a9      	sub	sp, #164	; 0xa4
 800c464:	460c      	mov	r4, r1
  fe t0 = {0};
 800c466:	2228      	movs	r2, #40	; 0x28
 800c468:	2100      	movs	r1, #0
{
 800c46a:	4605      	mov	r5, r0
  fe t0 = {0};
 800c46c:	4668      	mov	r0, sp
 800c46e:	f006 fecf 	bl	8013210 <memset>
  fe t1 = {0};
 800c472:	2228      	movs	r2, #40	; 0x28
 800c474:	2100      	movs	r1, #0
 800c476:	eb0d 0002 	add.w	r0, sp, r2
 800c47a:	f006 fec9 	bl	8013210 <memset>
  fe t2 = {0};
 800c47e:	2228      	movs	r2, #40	; 0x28
 800c480:	2100      	movs	r1, #0
 800c482:	a814      	add	r0, sp, #80	; 0x50
 800c484:	f006 fec4 	bl	8013210 <memset>
  fe t3 = {0};
 800c488:	2228      	movs	r2, #40	; 0x28
 800c48a:	2100      	movs	r1, #0
 800c48c:	a81e      	add	r0, sp, #120	; 0x78
 800c48e:	f006 febf 	bl	8013210 <memset>
  fe_sq(t0,z); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 800c492:	4621      	mov	r1, r4
 800c494:	4668      	mov	r0, sp
 800c496:	f7ff f914 	bl	800b6c2 <fe_sq>
  fe_sq(t1,t0); for (i = 1;i < 2;++i) fe_sq(t1,t1);
 800c49a:	4669      	mov	r1, sp
 800c49c:	a80a      	add	r0, sp, #40	; 0x28
 800c49e:	f7ff f910 	bl	800b6c2 <fe_sq>
 800c4a2:	a90a      	add	r1, sp, #40	; 0x28
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	f7ff f90c 	bl	800b6c2 <fe_sq>
  fe_mul(t1,z,t1);
 800c4aa:	aa0a      	add	r2, sp, #40	; 0x28
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7ff fd14 	bl	800bedc <fe_mul>
  fe_mul(t0,t0,t1);
 800c4b4:	aa0a      	add	r2, sp, #40	; 0x28
 800c4b6:	4669      	mov	r1, sp
 800c4b8:	4668      	mov	r0, sp
 800c4ba:	f7ff fd0f 	bl	800bedc <fe_mul>
  fe_sq(t2,t0); for (i = 1;i < 1;++i) fe_sq(t2,t2);
 800c4be:	4669      	mov	r1, sp
 800c4c0:	a814      	add	r0, sp, #80	; 0x50
 800c4c2:	f7ff f8fe 	bl	800b6c2 <fe_sq>
  fe_mul(t1,t1,t2);
 800c4c6:	a90a      	add	r1, sp, #40	; 0x28
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	aa14      	add	r2, sp, #80	; 0x50
 800c4cc:	f7ff fd06 	bl	800bedc <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 5;++i) fe_sq(t2,t2);
 800c4d0:	a90a      	add	r1, sp, #40	; 0x28
 800c4d2:	a814      	add	r0, sp, #80	; 0x50
 800c4d4:	f7ff f8f5 	bl	800b6c2 <fe_sq>
 800c4d8:	2404      	movs	r4, #4
 800c4da:	a914      	add	r1, sp, #80	; 0x50
 800c4dc:	4608      	mov	r0, r1
 800c4de:	f7ff f8f0 	bl	800b6c2 <fe_sq>
 800c4e2:	3c01      	subs	r4, #1
 800c4e4:	d1f9      	bne.n	800c4da <fe_invert+0x7a>
  fe_mul(t1,t2,t1);
 800c4e6:	aa0a      	add	r2, sp, #40	; 0x28
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	a914      	add	r1, sp, #80	; 0x50
 800c4ec:	f7ff fcf6 	bl	800bedc <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 10;++i) fe_sq(t2,t2);
 800c4f0:	a90a      	add	r1, sp, #40	; 0x28
 800c4f2:	a814      	add	r0, sp, #80	; 0x50
 800c4f4:	f7ff f8e5 	bl	800b6c2 <fe_sq>
 800c4f8:	2409      	movs	r4, #9
 800c4fa:	a914      	add	r1, sp, #80	; 0x50
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	f7ff f8e0 	bl	800b6c2 <fe_sq>
 800c502:	3c01      	subs	r4, #1
 800c504:	d1f9      	bne.n	800c4fa <fe_invert+0x9a>
  fe_mul(t2,t2,t1);
 800c506:	a914      	add	r1, sp, #80	; 0x50
 800c508:	4608      	mov	r0, r1
 800c50a:	aa0a      	add	r2, sp, #40	; 0x28
 800c50c:	f7ff fce6 	bl	800bedc <fe_mul>
  fe_sq(t3,t2); for (i = 1;i < 20;++i) fe_sq(t3,t3);
 800c510:	a914      	add	r1, sp, #80	; 0x50
 800c512:	a81e      	add	r0, sp, #120	; 0x78
 800c514:	f7ff f8d5 	bl	800b6c2 <fe_sq>
 800c518:	2413      	movs	r4, #19
 800c51a:	a91e      	add	r1, sp, #120	; 0x78
 800c51c:	4608      	mov	r0, r1
 800c51e:	f7ff f8d0 	bl	800b6c2 <fe_sq>
 800c522:	3c01      	subs	r4, #1
 800c524:	d1f9      	bne.n	800c51a <fe_invert+0xba>
  fe_mul(t2,t3,t2);
 800c526:	aa14      	add	r2, sp, #80	; 0x50
 800c528:	4610      	mov	r0, r2
 800c52a:	a91e      	add	r1, sp, #120	; 0x78
 800c52c:	f7ff fcd6 	bl	800bedc <fe_mul>
  fe_sq(t2,t2); for (i = 1;i < 10;++i) fe_sq(t2,t2);
 800c530:	a914      	add	r1, sp, #80	; 0x50
 800c532:	4608      	mov	r0, r1
 800c534:	f7ff f8c5 	bl	800b6c2 <fe_sq>
 800c538:	2409      	movs	r4, #9
 800c53a:	a914      	add	r1, sp, #80	; 0x50
 800c53c:	4608      	mov	r0, r1
 800c53e:	f7ff f8c0 	bl	800b6c2 <fe_sq>
 800c542:	3c01      	subs	r4, #1
 800c544:	d1f9      	bne.n	800c53a <fe_invert+0xda>
  fe_mul(t1,t2,t1);
 800c546:	aa0a      	add	r2, sp, #40	; 0x28
 800c548:	4610      	mov	r0, r2
 800c54a:	a914      	add	r1, sp, #80	; 0x50
 800c54c:	f7ff fcc6 	bl	800bedc <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 50;++i) fe_sq(t2,t2);
 800c550:	a90a      	add	r1, sp, #40	; 0x28
 800c552:	a814      	add	r0, sp, #80	; 0x50
 800c554:	f7ff f8b5 	bl	800b6c2 <fe_sq>
 800c558:	2431      	movs	r4, #49	; 0x31
 800c55a:	a914      	add	r1, sp, #80	; 0x50
 800c55c:	4608      	mov	r0, r1
 800c55e:	f7ff f8b0 	bl	800b6c2 <fe_sq>
 800c562:	3c01      	subs	r4, #1
 800c564:	d1f9      	bne.n	800c55a <fe_invert+0xfa>
  fe_mul(t2,t2,t1);
 800c566:	a914      	add	r1, sp, #80	; 0x50
 800c568:	4608      	mov	r0, r1
 800c56a:	aa0a      	add	r2, sp, #40	; 0x28
 800c56c:	f7ff fcb6 	bl	800bedc <fe_mul>
  fe_sq(t3,t2); for (i = 1;i < 100;++i) fe_sq(t3,t3);
 800c570:	a914      	add	r1, sp, #80	; 0x50
 800c572:	a81e      	add	r0, sp, #120	; 0x78
 800c574:	f7ff f8a5 	bl	800b6c2 <fe_sq>
 800c578:	2463      	movs	r4, #99	; 0x63
 800c57a:	a91e      	add	r1, sp, #120	; 0x78
 800c57c:	4608      	mov	r0, r1
 800c57e:	f7ff f8a0 	bl	800b6c2 <fe_sq>
 800c582:	3c01      	subs	r4, #1
 800c584:	d1f9      	bne.n	800c57a <fe_invert+0x11a>
  fe_mul(t2,t3,t2);
 800c586:	aa14      	add	r2, sp, #80	; 0x50
 800c588:	4610      	mov	r0, r2
 800c58a:	a91e      	add	r1, sp, #120	; 0x78
 800c58c:	f7ff fca6 	bl	800bedc <fe_mul>
  fe_sq(t2,t2); for (i = 1;i < 50;++i) fe_sq(t2,t2);
 800c590:	a914      	add	r1, sp, #80	; 0x50
 800c592:	4608      	mov	r0, r1
 800c594:	f7ff f895 	bl	800b6c2 <fe_sq>
 800c598:	2431      	movs	r4, #49	; 0x31
 800c59a:	a914      	add	r1, sp, #80	; 0x50
 800c59c:	4608      	mov	r0, r1
 800c59e:	f7ff f890 	bl	800b6c2 <fe_sq>
 800c5a2:	3c01      	subs	r4, #1
 800c5a4:	d1f9      	bne.n	800c59a <fe_invert+0x13a>
  fe_mul(t1,t2,t1);
 800c5a6:	aa0a      	add	r2, sp, #40	; 0x28
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	a914      	add	r1, sp, #80	; 0x50
 800c5ac:	f7ff fc96 	bl	800bedc <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 5;++i) fe_sq(t1,t1);
 800c5b0:	a90a      	add	r1, sp, #40	; 0x28
 800c5b2:	4608      	mov	r0, r1
 800c5b4:	f7ff f885 	bl	800b6c2 <fe_sq>
 800c5b8:	2404      	movs	r4, #4
 800c5ba:	a90a      	add	r1, sp, #40	; 0x28
 800c5bc:	4608      	mov	r0, r1
 800c5be:	f7ff f880 	bl	800b6c2 <fe_sq>
 800c5c2:	3c01      	subs	r4, #1
 800c5c4:	d1f9      	bne.n	800c5ba <fe_invert+0x15a>
  fe_mul(out,t1,t0);
 800c5c6:	466a      	mov	r2, sp
 800c5c8:	a90a      	add	r1, sp, #40	; 0x28
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	f7ff fc86 	bl	800bedc <fe_mul>
}
 800c5d0:	b029      	add	sp, #164	; 0xa4
 800c5d2:	bd30      	pop	{r4, r5, pc}

0800c5d4 <fe_cswap>:

Preconditions: b in {0,1}.
*/

void fe_cswap(fe f, fe g, int b)
{
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	b08b      	sub	sp, #44	; 0x2c
  sword32 f5 = f[5];
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword32 g0 = g[0];
 800c5da:	680b      	ldr	r3, [r1, #0]
 800c5dc:	9301      	str	r3, [sp, #4]
  sword32 g5 = g[5];
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 x0 = f0 ^ g0;
 800c5de:	6804      	ldr	r4, [r0, #0]
  sword32 g1 = g[1];
 800c5e0:	684b      	ldr	r3, [r1, #4]
  sword32 x0 = f0 ^ g0;
 800c5e2:	9d01      	ldr	r5, [sp, #4]
  sword32 g1 = g[1];
 800c5e4:	9302      	str	r3, [sp, #8]
  sword32 x0 = f0 ^ g0;
 800c5e6:	ea84 0a05 	eor.w	sl, r4, r5
  sword32 g2 = g[2];
 800c5ea:	688b      	ldr	r3, [r1, #8]
  sword32 x1 = f1 ^ g1;
 800c5ec:	6844      	ldr	r4, [r0, #4]
 800c5ee:	9d02      	ldr	r5, [sp, #8]
  sword32 g2 = g[2];
 800c5f0:	9303      	str	r3, [sp, #12]
  sword32 x1 = f1 ^ g1;
 800c5f2:	ea84 0905 	eor.w	r9, r4, r5
  sword32 g3 = g[3];
 800c5f6:	68cb      	ldr	r3, [r1, #12]
  sword32 x2 = f2 ^ g2;
 800c5f8:	6884      	ldr	r4, [r0, #8]
 800c5fa:	9d03      	ldr	r5, [sp, #12]
  sword32 g3 = g[3];
 800c5fc:	9304      	str	r3, [sp, #16]
  sword32 x2 = f2 ^ g2;
 800c5fe:	ea84 0805 	eor.w	r8, r4, r5
  sword32 g4 = g[4];
 800c602:	690b      	ldr	r3, [r1, #16]
  sword32 x3 = f3 ^ g3;
 800c604:	68c4      	ldr	r4, [r0, #12]
 800c606:	9d04      	ldr	r5, [sp, #16]
  sword32 g4 = g[4];
 800c608:	9305      	str	r3, [sp, #20]
  sword32 x3 = f3 ^ g3;
 800c60a:	ea84 0e05 	eor.w	lr, r4, r5
  sword32 g5 = g[5];
 800c60e:	694b      	ldr	r3, [r1, #20]
  sword32 x4 = f4 ^ g4;
 800c610:	6904      	ldr	r4, [r0, #16]
 800c612:	9d05      	ldr	r5, [sp, #20]
  sword32 g5 = g[5];
 800c614:	9306      	str	r3, [sp, #24]
  sword32 g6 = g[6];
 800c616:	698b      	ldr	r3, [r1, #24]
 800c618:	9307      	str	r3, [sp, #28]
  sword32 x4 = f4 ^ g4;
 800c61a:	ea84 0c05 	eor.w	ip, r4, r5
  sword32 g7 = g[7];
 800c61e:	69cb      	ldr	r3, [r1, #28]
  sword32 x5 = f5 ^ g5;
 800c620:	9d06      	ldr	r5, [sp, #24]
 800c622:	6944      	ldr	r4, [r0, #20]
  sword32 g7 = g[7];
 800c624:	9308      	str	r3, [sp, #32]
  sword32 g8 = g[8];
 800c626:	6a0b      	ldr	r3, [r1, #32]
 800c628:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 x5 = f5 ^ g5;
 800c62a:	ea84 0705 	eor.w	r7, r4, r5
  sword32 g9 = g[9];
 800c62e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  sword32 x6 = f6 ^ g6;
 800c630:	6984      	ldr	r4, [r0, #24]
 800c632:	9d07      	ldr	r5, [sp, #28]
  sword32 x7 = f7 ^ g7;
  sword32 x8 = f8 ^ g8;
 800c634:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  sword32 x6 = f6 ^ g6;
 800c638:	ea84 0605 	eor.w	r6, r4, r5
  sword32 x7 = f7 ^ g7;
 800c63c:	69c4      	ldr	r4, [r0, #28]
 800c63e:	9d08      	ldr	r5, [sp, #32]
 800c640:	4065      	eors	r5, r4
  sword32 x8 = f8 ^ g8;
 800c642:	6a04      	ldr	r4, [r0, #32]
 800c644:	ea84 040b 	eor.w	r4, r4, fp
  sword32 x9 = f9 ^ g9;
 800c648:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  b = -b;
 800c64c:	4252      	negs	r2, r2
  sword32 x9 = f9 ^ g9;
 800c64e:	ea8b 0b03 	eor.w	fp, fp, r3
  x0 &= b;
 800c652:	ea0a 0a02 	and.w	sl, sl, r2
  x1 &= b;
 800c656:	ea09 0902 	and.w	r9, r9, r2
  x2 &= b;
 800c65a:	ea08 0802 	and.w	r8, r8, r2
  x3 &= b;
 800c65e:	ea0e 0e02 	and.w	lr, lr, r2
  x4 &= b;
 800c662:	ea0c 0c02 	and.w	ip, ip, r2
  x5 &= b;
 800c666:	4017      	ands	r7, r2
  x6 &= b;
 800c668:	4016      	ands	r6, r2
  x7 &= b;
 800c66a:	4015      	ands	r5, r2
  x8 &= b;
 800c66c:	4014      	ands	r4, r2
  x9 &= b;
 800c66e:	ea0b 0202 	and.w	r2, fp, r2
  f[0] = f0 ^ x0;
 800c672:	f8d0 b000 	ldr.w	fp, [r0]
 800c676:	ea8b 0b0a 	eor.w	fp, fp, sl
 800c67a:	f8c0 b000 	str.w	fp, [r0]
  f[1] = f1 ^ x1;
 800c67e:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800c682:	ea8b 0b09 	eor.w	fp, fp, r9
 800c686:	f8c0 b004 	str.w	fp, [r0, #4]
  f[2] = f2 ^ x2;
 800c68a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800c68e:	ea8b 0b08 	eor.w	fp, fp, r8
 800c692:	f8c0 b008 	str.w	fp, [r0, #8]
  f[3] = f3 ^ x3;
 800c696:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 800c69a:	ea8b 0b0e 	eor.w	fp, fp, lr
 800c69e:	f8c0 b00c 	str.w	fp, [r0, #12]
  f[4] = f4 ^ x4;
 800c6a2:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800c6a6:	ea8b 0b0c 	eor.w	fp, fp, ip
 800c6aa:	f8c0 b010 	str.w	fp, [r0, #16]
  f[5] = f5 ^ x5;
 800c6ae:	f8d0 b014 	ldr.w	fp, [r0, #20]
 800c6b2:	ea8b 0b07 	eor.w	fp, fp, r7
 800c6b6:	f8c0 b014 	str.w	fp, [r0, #20]
  f[6] = f6 ^ x6;
 800c6ba:	f8d0 b018 	ldr.w	fp, [r0, #24]
 800c6be:	ea8b 0b06 	eor.w	fp, fp, r6
 800c6c2:	f8c0 b018 	str.w	fp, [r0, #24]
  f[7] = f7 ^ x7;
 800c6c6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800c6ca:	ea8b 0b05 	eor.w	fp, fp, r5
 800c6ce:	f8c0 b01c 	str.w	fp, [r0, #28]
  f[8] = f8 ^ x8;
 800c6d2:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800c6d6:	ea8b 0b04 	eor.w	fp, fp, r4
 800c6da:	f8c0 b020 	str.w	fp, [r0, #32]
  f[9] = f9 ^ x9;
 800c6de:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800c6e2:	ea8b 0b02 	eor.w	fp, fp, r2
 800c6e6:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
  g[0] = g0 ^ x0;
 800c6ea:	9801      	ldr	r0, [sp, #4]
 800c6ec:	ea80 000a 	eor.w	r0, r0, sl
 800c6f0:	6008      	str	r0, [r1, #0]
  g[1] = g1 ^ x1;
 800c6f2:	9802      	ldr	r0, [sp, #8]
 800c6f4:	ea80 0009 	eor.w	r0, r0, r9
 800c6f8:	6048      	str	r0, [r1, #4]
  g[2] = g2 ^ x2;
 800c6fa:	9803      	ldr	r0, [sp, #12]
 800c6fc:	ea80 0008 	eor.w	r0, r0, r8
 800c700:	6088      	str	r0, [r1, #8]
  g[3] = g3 ^ x3;
 800c702:	9804      	ldr	r0, [sp, #16]
 800c704:	ea80 000e 	eor.w	r0, r0, lr
 800c708:	60c8      	str	r0, [r1, #12]
  g[4] = g4 ^ x4;
 800c70a:	9805      	ldr	r0, [sp, #20]
 800c70c:	ea80 000c 	eor.w	r0, r0, ip
 800c710:	6108      	str	r0, [r1, #16]
  g[5] = g5 ^ x5;
 800c712:	9806      	ldr	r0, [sp, #24]
 800c714:	4047      	eors	r7, r0
  g[6] = g6 ^ x6;
 800c716:	9807      	ldr	r0, [sp, #28]
  g[5] = g5 ^ x5;
 800c718:	614f      	str	r7, [r1, #20]
  g[6] = g6 ^ x6;
 800c71a:	4046      	eors	r6, r0
  g[7] = g7 ^ x7;
 800c71c:	9808      	ldr	r0, [sp, #32]
  g[6] = g6 ^ x6;
 800c71e:	618e      	str	r6, [r1, #24]
  g[7] = g7 ^ x7;
 800c720:	4045      	eors	r5, r0
  g[8] = g8 ^ x8;
 800c722:	9809      	ldr	r0, [sp, #36]	; 0x24
  g[7] = g7 ^ x7;
 800c724:	61cd      	str	r5, [r1, #28]
  g[8] = g8 ^ x8;
 800c726:	4044      	eors	r4, r0
  g[9] = g9 ^ x9;
 800c728:	405a      	eors	r2, r3
  g[8] = g8 ^ x8;
 800c72a:	620c      	str	r4, [r1, #32]
  g[9] = g9 ^ x9;
 800c72c:	624a      	str	r2, [r1, #36]	; 0x24
}
 800c72e:	b00b      	add	sp, #44	; 0x2c
 800c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c734 <fe_mul121666>:
Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_mul121666(fe h,fe f)
{
 800c734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 f5 = f[5];
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword64 h0 = f0 * (sword64) 121666;
 800c738:	4b68      	ldr	r3, [pc, #416]	; (800c8dc <fe_mul121666+0x1a8>)
 800c73a:	680a      	ldr	r2, [r1, #0]
  sword64 h1 = f1 * (sword64) 121666;
 800c73c:	684e      	ldr	r6, [r1, #4]
  sword64 h2 = f2 * (sword64) 121666;
  sword64 h3 = f3 * (sword64) 121666;
 800c73e:	68cd      	ldr	r5, [r1, #12]
{
 800c740:	b08b      	sub	sp, #44	; 0x2c
  sword64 h0 = f0 * (sword64) 121666;
 800c742:	fb82 9803 	smull	r9, r8, r2, r3
  sword64 h1 = f1 * (sword64) 121666;
 800c746:	fb86 6203 	smull	r6, r2, r6, r3
 800c74a:	9202      	str	r2, [sp, #8]
  sword64 h3 = f3 * (sword64) 121666;
 800c74c:	fb85 5203 	smull	r5, r2, r5, r3
 800c750:	9203      	str	r2, [sp, #12]
  sword64 h4 = f4 * (sword64) 121666;
  sword64 h5 = f5 * (sword64) 121666;
 800c752:	694a      	ldr	r2, [r1, #20]
 800c754:	fb82 c203 	smull	ip, r2, r2, r3
 800c758:	9204      	str	r2, [sp, #16]
  sword64 h6 = f6 * (sword64) 121666;
  sword64 h7 = f7 * (sword64) 121666;
 800c75a:	69ca      	ldr	r2, [r1, #28]
 800c75c:	fb82 2403 	smull	r2, r4, r2, r3
 800c760:	9201      	str	r2, [sp, #4]
  sword64 h8 = f8 * (sword64) 121666;
  sword64 h9 = f9 * (sword64) 121666;
 800c762:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  sword64 h7 = f7 * (sword64) 121666;
 800c764:	9405      	str	r4, [sp, #20]
  sword64 h9 = f9 * (sword64) 121666;
 800c766:	fb82 a403 	smull	sl, r4, r2, r3
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800c76a:	f11a 7e80 	adds.w	lr, sl, #16777216	; 0x1000000
 800c76e:	f144 0400 	adc.w	r4, r4, #0
 800c772:	ea4f 675e 	mov.w	r7, lr, lsr #25
 800c776:	f04f 0b13 	mov.w	fp, #19
 800c77a:	ea47 17c4 	orr.w	r7, r7, r4, lsl #7
 800c77e:	fba7 720b 	umull	r7, r2, r7, fp
 800c782:	1664      	asrs	r4, r4, #25
 800c784:	eb17 0909 	adds.w	r9, r7, r9
 800c788:	fb0b 2204 	mla	r2, fp, r4, r2
 800c78c:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
 800c790:	eb42 0808 	adc.w	r8, r2, r8
 800c794:	ebba 020e 	subs.w	r2, sl, lr
 800c798:	9206      	str	r2, [sp, #24]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800c79a:	9a02      	ldr	r2, [sp, #8]
 800c79c:	f116 7480 	adds.w	r4, r6, #16777216	; 0x1000000
 800c7a0:	f142 0b00 	adc.w	fp, r2, #0
 800c7a4:	0e67      	lsrs	r7, r4, #25
 800c7a6:	688a      	ldr	r2, [r1, #8]
 800c7a8:	ea47 17cb 	orr.w	r7, r7, fp, lsl #7
 800c7ac:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 800c7b0:	ea4f 6b6b 	mov.w	fp, fp, asr #25
 800c7b4:	fbc2 7b03 	smlal	r7, fp, r2, r3
 800c7b8:	1b32      	subs	r2, r6, r4
 800c7ba:	9207      	str	r2, [sp, #28]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800c7bc:	9a03      	ldr	r2, [sp, #12]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800c7be:	9702      	str	r7, [sp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800c7c0:	f115 7480 	adds.w	r4, r5, #16777216	; 0x1000000
 800c7c4:	f142 0e00 	adc.w	lr, r2, #0
 800c7c8:	0e66      	lsrs	r6, r4, #25
 800c7ca:	690a      	ldr	r2, [r1, #16]
 800c7cc:	ea46 16ce 	orr.w	r6, r6, lr, lsl #7
 800c7d0:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 800c7d4:	ea4f 6e6e 	mov.w	lr, lr, asr #25
 800c7d8:	fbc2 6e03 	smlal	r6, lr, r2, r3
 800c7dc:	1b2a      	subs	r2, r5, r4
 800c7de:	9208      	str	r2, [sp, #32]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800c7e0:	9a04      	ldr	r2, [sp, #16]
 800c7e2:	698c      	ldr	r4, [r1, #24]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800c7e4:	9603      	str	r6, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800c7e6:	f11c 7580 	adds.w	r5, ip, #16777216	; 0x1000000
 800c7ea:	f142 0700 	adc.w	r7, r2, #0
 800c7ee:	f005 427e 	and.w	r2, r5, #4261412864	; 0xfe000000
 800c7f2:	ebbc 0202 	subs.w	r2, ip, r2
 800c7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f8:	0e6e      	lsrs	r6, r5, #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800c7fa:	9a01      	ldr	r2, [sp, #4]
 800c7fc:	f8d1 c020 	ldr.w	ip, [r1, #32]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800c800:	ea46 16c7 	orr.w	r6, r6, r7, lsl #7
 800c804:	167f      	asrs	r7, r7, #25
 800c806:	fbc4 6703 	smlal	r6, r7, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800c80a:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 800c80e:	9a05      	ldr	r2, [sp, #20]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800c810:	9604      	str	r6, [sp, #16]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800c812:	f142 0500 	adc.w	r5, r2, #0
 800c816:	0e66      	lsrs	r6, r4, #25
 800c818:	ea46 16c5 	orr.w	r6, r6, r5, lsl #7
 800c81c:	166d      	asrs	r5, r5, #25
 800c81e:	4629      	mov	r1, r5
 800c820:	fbcc 6103 	smlal	r6, r1, ip, r3
 800c824:	9b01      	ldr	r3, [sp, #4]
 800c826:	9605      	str	r6, [sp, #20]
 800c828:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 800c82c:	1b1c      	subs	r4, r3, r4

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c82e:	9b02      	ldr	r3, [sp, #8]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c830:	f119 7600 	adds.w	r6, r9, #33554432	; 0x2000000
 800c834:	f148 0800 	adc.w	r8, r8, #0
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c838:	f113 7500 	adds.w	r5, r3, #33554432	; 0x2000000
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c83c:	9b03      	ldr	r3, [sp, #12]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c83e:	f14b 0b00 	adc.w	fp, fp, #0
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c842:	f113 7c00 	adds.w	ip, r3, #33554432	; 0x2000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c846:	9b04      	ldr	r3, [sp, #16]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c848:	9a05      	ldr	r2, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c84a:	f14e 0e00 	adc.w	lr, lr, #0
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c84e:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 800c852:	f147 0700 	adc.w	r7, r7, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c856:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c85a:	f006 427c 	and.w	r2, r6, #4227858432	; 0xfc000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c85e:	f141 0100 	adc.w	r1, r1, #0
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c862:	0eb6      	lsrs	r6, r6, #26
 800c864:	ebb9 0902 	subs.w	r9, r9, r2
 800c868:	9a07      	ldr	r2, [sp, #28]

  h[0] = (sword32)h0;
 800c86a:	f8c0 9000 	str.w	r9, [r0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800c86e:	ea46 1688 	orr.w	r6, r6, r8, lsl #6
 800c872:	18b6      	adds	r6, r6, r2
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c874:	9a02      	ldr	r2, [sp, #8]
  h[1] = (sword32)h1;
 800c876:	6046      	str	r6, [r0, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c878:	f005 467c 	and.w	r6, r5, #4227858432	; 0xfc000000
 800c87c:	1b96      	subs	r6, r2, r6
 800c87e:	0ead      	lsrs	r5, r5, #26
 800c880:	9a08      	ldr	r2, [sp, #32]
  h[2] = (sword32)h2;
 800c882:	6086      	str	r6, [r0, #8]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800c884:	ea45 158b 	orr.w	r5, r5, fp, lsl #6
 800c888:	18ad      	adds	r5, r5, r2
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c88a:	9a03      	ldr	r2, [sp, #12]
  h[3] = (sword32)h3;
 800c88c:	60c5      	str	r5, [r0, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c88e:	f00c 467c 	and.w	r6, ip, #4227858432	; 0xfc000000
 800c892:	1b96      	subs	r6, r2, r6
 800c894:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 800c898:	9a09      	ldr	r2, [sp, #36]	; 0x24
  h[4] = (sword32)h4;
 800c89a:	6106      	str	r6, [r0, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800c89c:	ea4c 1c8e 	orr.w	ip, ip, lr, lsl #6
 800c8a0:	eb1c 0202 	adds.w	r2, ip, r2
  h[5] = (sword32)h5;
 800c8a4:	6142      	str	r2, [r0, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800c8a6:	f003 467c 	and.w	r6, r3, #4227858432	; 0xfc000000
 800c8aa:	9a04      	ldr	r2, [sp, #16]
 800c8ac:	0e9b      	lsrs	r3, r3, #26
 800c8ae:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 800c8b2:	1b96      	subs	r6, r2, r6
 800c8b4:	191b      	adds	r3, r3, r4
  h[6] = (sword32)h6;
  h[7] = (sword32)h7;
 800c8b6:	61c3      	str	r3, [r0, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c8b8:	9b05      	ldr	r3, [sp, #20]
  h[6] = (sword32)h6;
 800c8ba:	6186      	str	r6, [r0, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c8bc:	f00a 467c 	and.w	r6, sl, #4227858432	; 0xfc000000
 800c8c0:	1b9e      	subs	r6, r3, r6
 800c8c2:	ea4f 6a9a 	mov.w	sl, sl, lsr #26
 800c8c6:	9b06      	ldr	r3, [sp, #24]
  h[8] = (sword32)h8;
 800c8c8:	6206      	str	r6, [r0, #32]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800c8ca:	ea4a 1a81 	orr.w	sl, sl, r1, lsl #6
 800c8ce:	eb1a 0203 	adds.w	r2, sl, r3
  h[9] = (sword32)h9;
 800c8d2:	6242      	str	r2, [r0, #36]	; 0x24
}
 800c8d4:	b00b      	add	sp, #44	; 0x2c
 800c8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8da:	bf00      	nop
 800c8dc:	0001db42 	.word	0x0001db42

0800c8e0 <curve25519>:
{
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	b0c7      	sub	sp, #284	; 0x11c
 800c8e6:	4616      	mov	r6, r2
  fe x2 = {0};
 800c8e8:	ac0a      	add	r4, sp, #40	; 0x28
  fe x1 = {0};
 800c8ea:	2228      	movs	r2, #40	; 0x28
{
 800c8ec:	4682      	mov	sl, r0
 800c8ee:	468b      	mov	fp, r1
  fe x1 = {0};
 800c8f0:	4668      	mov	r0, sp
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	f006 fc8c 	bl	8013210 <memset>
  fe x2 = {0};
 800c8f8:	2228      	movs	r2, #40	; 0x28
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f006 fc87 	bl	8013210 <memset>
  fe x3 = {0};
 800c902:	ad1e      	add	r5, sp, #120	; 0x78
  fe z2 = {0};
 800c904:	2228      	movs	r2, #40	; 0x28
 800c906:	2100      	movs	r1, #0
 800c908:	a814      	add	r0, sp, #80	; 0x50
 800c90a:	f006 fc81 	bl	8013210 <memset>
  fe x3 = {0};
 800c90e:	2228      	movs	r2, #40	; 0x28
 800c910:	2100      	movs	r1, #0
 800c912:	4628      	mov	r0, r5
 800c914:	f006 fc7c 	bl	8013210 <memset>
  fe z3 = {0};
 800c918:	2228      	movs	r2, #40	; 0x28
 800c91a:	2100      	movs	r1, #0
 800c91c:	a828      	add	r0, sp, #160	; 0xa0
 800c91e:	f006 fc77 	bl	8013210 <memset>
  fe tmp0 = {0};
 800c922:	2228      	movs	r2, #40	; 0x28
 800c924:	2100      	movs	r1, #0
 800c926:	a832      	add	r0, sp, #200	; 0xc8
 800c928:	f006 fc72 	bl	8013210 <memset>
  fe tmp1 = {0};
 800c92c:	2228      	movs	r2, #40	; 0x28
 800c92e:	2100      	movs	r1, #0
 800c930:	a83c      	add	r0, sp, #240	; 0xf0
 800c932:	f006 fc6d 	bl	8013210 <memset>
  fe_frombytes(x1,p);
 800c936:	4631      	mov	r1, r6
 800c938:	4668      	mov	r0, sp
 800c93a:	f7ff f9ad 	bl	800bc98 <fe_frombytes>
  fe_1(x2);
 800c93e:	4620      	mov	r0, r4
 800c940:	f7fe fea5 	bl	800b68e <fe_1>
  fe_0(z2);
 800c944:	a814      	add	r0, sp, #80	; 0x50
 800c946:	f7fe feaf 	bl	800b6a8 <fe_0>
  fe_copy(x3,x1);
 800c94a:	4669      	mov	r1, sp
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7ff faad 	bl	800beac <fe_copy>
  fe_1(z3);
 800c952:	a828      	add	r0, sp, #160	; 0xa0
 800c954:	f7fe fe9b 	bl	800b68e <fe_1>
  swap = 0;
 800c958:	2700      	movs	r7, #0
  for (pos = 254;pos >= 0;--pos) {
 800c95a:	f04f 08fe 	mov.w	r8, #254	; 0xfe
    fe_cswap(z2,z3,swap);
 800c95e:	4606      	mov	r6, r0
    b = n[pos / 8] >> (pos & 7);
 800c960:	ea4f 03e8 	mov.w	r3, r8, asr #3
 800c964:	f008 0207 	and.w	r2, r8, #7
 800c968:	f81b 3003 	ldrb.w	r3, [fp, r3]
 800c96c:	4113      	asrs	r3, r2
    b &= 1;
 800c96e:	46b9      	mov	r9, r7
 800c970:	f003 0701 	and.w	r7, r3, #1
    swap ^= b;
 800c974:	ea87 0909 	eor.w	r9, r7, r9
    fe_cswap(x2,x3,swap);
 800c978:	464a      	mov	r2, r9
 800c97a:	4629      	mov	r1, r5
 800c97c:	4620      	mov	r0, r4
 800c97e:	f7ff fe29 	bl	800c5d4 <fe_cswap>
    fe_cswap(z2,z3,swap);
 800c982:	464a      	mov	r2, r9
 800c984:	4631      	mov	r1, r6
 800c986:	a814      	add	r0, sp, #80	; 0x50
 800c988:	f7ff fe24 	bl	800c5d4 <fe_cswap>
    fe_sub(tmp0,x3,z3);
 800c98c:	4632      	mov	r2, r6
 800c98e:	4629      	mov	r1, r5
 800c990:	a832      	add	r0, sp, #200	; 0xc8
 800c992:	f7ff f950 	bl	800bc36 <fe_sub>
    fe_sub(tmp1,x2,z2);
 800c996:	aa14      	add	r2, sp, #80	; 0x50
 800c998:	4621      	mov	r1, r4
 800c99a:	a83c      	add	r0, sp, #240	; 0xf0
 800c99c:	f7ff f94b 	bl	800bc36 <fe_sub>
    fe_add(x2,x2,z2);
 800c9a0:	aa14      	add	r2, sp, #80	; 0x50
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f7ff f864 	bl	800ba72 <fe_add>
    fe_add(z2,x3,z3);
 800c9aa:	4632      	mov	r2, r6
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	a814      	add	r0, sp, #80	; 0x50
 800c9b0:	f7ff f85f 	bl	800ba72 <fe_add>
    fe_mul(z3,tmp0,x2);
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	a932      	add	r1, sp, #200	; 0xc8
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7ff fa8f 	bl	800bedc <fe_mul>
    fe_mul(z2,z2,tmp1);
 800c9be:	a914      	add	r1, sp, #80	; 0x50
 800c9c0:	aa3c      	add	r2, sp, #240	; 0xf0
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	f7ff fa8a 	bl	800bedc <fe_mul>
    fe_sq(tmp0,tmp1);
 800c9c8:	a93c      	add	r1, sp, #240	; 0xf0
 800c9ca:	a832      	add	r0, sp, #200	; 0xc8
 800c9cc:	f7fe fe79 	bl	800b6c2 <fe_sq>
    fe_sq(tmp1,x2);
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	a83c      	add	r0, sp, #240	; 0xf0
 800c9d4:	f7fe fe75 	bl	800b6c2 <fe_sq>
    fe_add(x3,z3,z2);
 800c9d8:	aa14      	add	r2, sp, #80	; 0x50
 800c9da:	4631      	mov	r1, r6
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7ff f848 	bl	800ba72 <fe_add>
    fe_sub(z2,z3,z2);
 800c9e2:	aa14      	add	r2, sp, #80	; 0x50
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	f7ff f925 	bl	800bc36 <fe_sub>
    fe_mul(x2,tmp1,tmp0);
 800c9ec:	aa32      	add	r2, sp, #200	; 0xc8
 800c9ee:	a93c      	add	r1, sp, #240	; 0xf0
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f7ff fa73 	bl	800bedc <fe_mul>
    fe_sub(tmp1,tmp1,tmp0);
 800c9f6:	a93c      	add	r1, sp, #240	; 0xf0
 800c9f8:	aa32      	add	r2, sp, #200	; 0xc8
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	f7ff f91b 	bl	800bc36 <fe_sub>
    fe_sq(z2,z2);
 800ca00:	a914      	add	r1, sp, #80	; 0x50
 800ca02:	4608      	mov	r0, r1
 800ca04:	f7fe fe5d 	bl	800b6c2 <fe_sq>
    fe_mul121666(z3,tmp1);
 800ca08:	a93c      	add	r1, sp, #240	; 0xf0
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff fe92 	bl	800c734 <fe_mul121666>
    fe_sq(x3,x3);
 800ca10:	4629      	mov	r1, r5
 800ca12:	4628      	mov	r0, r5
 800ca14:	f7fe fe55 	bl	800b6c2 <fe_sq>
    fe_add(tmp0,tmp0,z3);
 800ca18:	a932      	add	r1, sp, #200	; 0xc8
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	f7ff f828 	bl	800ba72 <fe_add>
    fe_mul(z3,x1,z2);
 800ca22:	aa14      	add	r2, sp, #80	; 0x50
 800ca24:	4669      	mov	r1, sp
 800ca26:	4630      	mov	r0, r6
 800ca28:	f7ff fa58 	bl	800bedc <fe_mul>
    fe_mul(z2,tmp1,tmp0);
 800ca2c:	aa32      	add	r2, sp, #200	; 0xc8
 800ca2e:	a93c      	add	r1, sp, #240	; 0xf0
 800ca30:	a814      	add	r0, sp, #80	; 0x50
 800ca32:	f7ff fa53 	bl	800bedc <fe_mul>
  for (pos = 254;pos >= 0;--pos) {
 800ca36:	f1b8 0801 	subs.w	r8, r8, #1
 800ca3a:	d291      	bcs.n	800c960 <curve25519+0x80>
  fe_cswap(x2,x3,swap);
 800ca3c:	463a      	mov	r2, r7
 800ca3e:	4629      	mov	r1, r5
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7ff fdc7 	bl	800c5d4 <fe_cswap>
  fe_cswap(z2,z3,swap);
 800ca46:	463a      	mov	r2, r7
 800ca48:	4631      	mov	r1, r6
 800ca4a:	a814      	add	r0, sp, #80	; 0x50
 800ca4c:	f7ff fdc2 	bl	800c5d4 <fe_cswap>
  fe_invert(z2,z2);
 800ca50:	a914      	add	r1, sp, #80	; 0x50
 800ca52:	4608      	mov	r0, r1
 800ca54:	f7ff fd04 	bl	800c460 <fe_invert>
  fe_mul(x2,x2,z2);
 800ca58:	aa14      	add	r2, sp, #80	; 0x50
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f7ff fa3d 	bl	800bedc <fe_mul>
  fe_tobytes(q,x2);
 800ca62:	4650      	mov	r0, sl
 800ca64:	4621      	mov	r1, r4
 800ca66:	f7ff f835 	bl	800bad4 <fe_tobytes>
}
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	b047      	add	sp, #284	; 0x11c
 800ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca72 <fe_sq2>:
/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h,const fe f)
{
 800ca72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 f0 = f[0];
  sword32 f1 = f[1];
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 800ca76:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
{
 800ca7a:	b097      	sub	sp, #92	; 0x5c
 800ca7c:	4683      	mov	fp, r0
  sword32 f3 = f[3];
 800ca7e:	9409      	str	r4, [sp, #36]	; 0x24
  sword32 f4 = f[4];
 800ca80:	690c      	ldr	r4, [r1, #16]
 800ca82:	9402      	str	r4, [sp, #8]
  sword32 f5 = f[5];
 800ca84:	694c      	ldr	r4, [r1, #20]
 800ca86:	9404      	str	r4, [sp, #16]
  sword32 f6 = f[6];
 800ca88:	698c      	ldr	r4, [r1, #24]
 800ca8a:	9401      	str	r4, [sp, #4]
  sword32 f7 = f[7];
 800ca8c:	69cc      	ldr	r4, [r1, #28]
 800ca8e:	9406      	str	r4, [sp, #24]
  sword32 f1 = f[1];
 800ca90:	e9d1 0300 	ldrd	r0, r3, [r1]
  sword32 f8 = f[8];
 800ca94:	6a0c      	ldr	r4, [r1, #32]
  sword32 f9 = f[9];
 800ca96:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ca98:	910a      	str	r1, [sp, #40]	; 0x28
  sword32 f0_2 = 2 * f0;
  sword32 f1_2 = 2 * f1;
  sword32 f2_2 = 2 * f2;
 800ca9a:	0051      	lsls	r1, r2, #1
 800ca9c:	9108      	str	r1, [sp, #32]
  sword32 f3_2 = 2 * f3;
 800ca9e:	9909      	ldr	r1, [sp, #36]	; 0x24
  sword32 f5_2 = 2 * f5;
  sword32 f6_2 = 2 * f6;
  sword32 f7_2 = 2 * f7;
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 800caa0:	9e06      	ldr	r6, [sp, #24]
  sword32 f8 = f[8];
 800caa2:	9407      	str	r4, [sp, #28]
  sword32 f3_2 = 2 * f3;
 800caa4:	0049      	lsls	r1, r1, #1
 800caa6:	9103      	str	r1, [sp, #12]
  sword32 f4_2 = 2 * f4;
 800caa8:	9902      	ldr	r1, [sp, #8]
 800caaa:	0049      	lsls	r1, r1, #1
 800caac:	910b      	str	r1, [sp, #44]	; 0x2c
  sword32 f5_2 = 2 * f5;
 800caae:	9904      	ldr	r1, [sp, #16]
 800cab0:	0049      	lsls	r1, r1, #1
 800cab2:	9105      	str	r1, [sp, #20]
  sword32 f7_2 = 2 * f7;
 800cab4:	9906      	ldr	r1, [sp, #24]
 800cab6:	0049      	lsls	r1, r1, #1
 800cab8:	910c      	str	r1, [sp, #48]	; 0x30
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 800caba:	9901      	ldr	r1, [sp, #4]
 800cabc:	2513      	movs	r5, #19
 800cabe:	fb05 f401 	mul.w	r4, r5, r1
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 800cac2:	2126      	movs	r1, #38	; 0x26
 800cac4:	fb01 fe06 	mul.w	lr, r1, r6
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 800cac8:	9e07      	ldr	r6, [sp, #28]
 800caca:	fb05 f706 	mul.w	r7, r5, r6
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 800cace:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 800cad0:	9d04      	ldr	r5, [sp, #16]
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 800cad2:	fb01 f806 	mul.w	r8, r1, r6
  sword32 f1_2 = 2 * f1;
 800cad6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 800cada:	4369      	muls	r1, r5
  sword64 f1f4_2  = f1_2 * (sword64) f4;
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
  sword64 f1f6_2  = f1_2 * (sword64) f6;
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
  sword64 f1f8_2  = f1_2 * (sword64) f8;
  sword64 f1f9_76 = f1_2 * (sword64) f9_38;
 800cadc:	fb8c 6508 	smull	r6, r5, ip, r8
  sword32 f0_2 = 2 * f0;
 800cae0:	ea4f 0940 	mov.w	r9, r0, lsl #1
  sword64 f7f8_38 = f7_2 * (sword64) f8_19;
  sword64 f7f9_76 = f7_2 * (sword64) f9_38;
  sword64 f8f8_19 = f8   * (sword64) f8_19;
  sword64 f8f9_38 = f8   * (sword64) f9_38;
  sword64 f9f9_38 = f9   * (sword64) f9_38;
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 800cae4:	fbc0 6500 	smlal	r6, r5, r0, r0
 800cae8:	0050      	lsls	r0, r2, #1
 800caea:	fbc0 6507 	smlal	r6, r5, r0, r7
 800caee:	9803      	ldr	r0, [sp, #12]
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 800caf0:	f8dd a00c 	ldr.w	sl, [sp, #12]
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 800caf4:	fbc0 650e 	smlal	r6, r5, r0, lr
 800caf8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cafa:	fbc0 6504 	smlal	r6, r5, r0, r4
 800cafe:	9804      	ldr	r0, [sp, #16]
 800cb00:	fbc0 6501 	smlal	r6, r5, r0, r1
 800cb04:	960e      	str	r6, [sp, #56]	; 0x38
  sword64 f2f9_38 = f2   * (sword64) f9_38;
 800cb06:	fb82 1008 	smull	r1, r0, r2, r8
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
 800cb0a:	9e03      	ldr	r6, [sp, #12]
 800cb0c:	fbc9 1003 	smlal	r1, r0, r9, r3
 800cb10:	fbc6 1007 	smlal	r1, r0, r6, r7
 800cb14:	9e02      	ldr	r6, [sp, #8]
 800cb16:	fbc6 100e 	smlal	r1, r0, r6, lr
 800cb1a:	9e05      	ldr	r6, [sp, #20]
 800cb1c:	fbc6 1004 	smlal	r1, r0, r6, r4
 800cb20:	910f      	str	r1, [sp, #60]	; 0x3c
  sword64 f1f1_2  = f1_2 * (sword64) f1;
 800cb22:	fb83 610c 	smull	r6, r1, r3, ip
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 800cb26:	fbc9 6102 	smlal	r6, r1, r9, r2
 800cb2a:	fbca 6108 	smlal	r6, r1, sl, r8
 800cb2e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800cb32:	fbc7 610a 	smlal	r6, r1, r7, sl
 800cb36:	f8dd a014 	ldr.w	sl, [sp, #20]
 800cb3a:	fbca 610e 	smlal	r6, r1, sl, lr
 800cb3e:	f8dd a004 	ldr.w	sl, [sp, #4]
 800cb42:	fbca 6104 	smlal	r6, r1, sl, r4
 800cb46:	9610      	str	r6, [sp, #64]	; 0x40
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 800cb48:	9e09      	ldr	r6, [sp, #36]	; 0x24
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 800cb4a:	910d      	str	r1, [sp, #52]	; 0x34
  sword64 f1f2_2  = f1_2 * (sword64) f2;
 800cb4c:	fb82 4a0c 	smull	r4, sl, r2, ip
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 800cb50:	fbc9 4a06 	smlal	r4, sl, r9, r6
 800cb54:	9e02      	ldr	r6, [sp, #8]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800cb56:	9902      	ldr	r1, [sp, #8]
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 800cb58:	fbc6 4a08 	smlal	r4, sl, r6, r8
 800cb5c:	9e05      	ldr	r6, [sp, #20]
 800cb5e:	fbc6 4a07 	smlal	r4, sl, r6, r7
 800cb62:	9e01      	ldr	r6, [sp, #4]
 800cb64:	fbc6 4a0e 	smlal	r4, sl, r6, lr
 800cb68:	9411      	str	r4, [sp, #68]	; 0x44
  sword64 f1f3_4  = f1_2 * (sword64) f3_2;
 800cb6a:	9c03      	ldr	r4, [sp, #12]
 800cb6c:	fb8c 4304 	smull	r4, r3, ip, r4
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800cb70:	fbc9 4301 	smlal	r4, r3, r9, r1
 800cb74:	fbc2 4302 	smlal	r4, r3, r2, r2
 800cb78:	9a05      	ldr	r2, [sp, #20]
  sword32 f6_2 = 2 * f6;
 800cb7a:	0076      	lsls	r6, r6, #1
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 800cb7c:	fbc2 4308 	smlal	r4, r3, r2, r8
 800cb80:	9a06      	ldr	r2, [sp, #24]
 800cb82:	fbc7 4306 	smlal	r4, r3, r7, r6
 800cb86:	fbc2 430e 	smlal	r4, r3, r2, lr
 800cb8a:	9412      	str	r4, [sp, #72]	; 0x48
  sword64 f1f4_2  = f1_2 * (sword64) f4;
 800cb8c:	fb81 420c 	smull	r4, r2, r1, ip
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 800cb90:	9904      	ldr	r1, [sp, #16]
 800cb92:	fbc9 4201 	smlal	r4, r2, r9, r1
 800cb96:	e9dd 6108 	ldrd	r6, r1, [sp, #32]
 800cb9a:	fbc1 4206 	smlal	r4, r2, r1, r6
 800cb9e:	9901      	ldr	r1, [sp, #4]
 800cba0:	fbc1 4208 	smlal	r4, r2, r1, r8
 800cba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cba6:	fbc1 4207 	smlal	r4, r2, r1, r7
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 800cbaa:	9905      	ldr	r1, [sp, #20]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 800cbac:	9413      	str	r4, [sp, #76]	; 0x4c
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 800cbae:	fb8c 4e01 	smull	r4, lr, ip, r1
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 800cbb2:	9901      	ldr	r1, [sp, #4]
 800cbb4:	fbc9 4e01 	smlal	r4, lr, r9, r1
 800cbb8:	9902      	ldr	r1, [sp, #8]
 800cbba:	fbc1 4e06 	smlal	r4, lr, r1, r6
 800cbbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbc0:	9e03      	ldr	r6, [sp, #12]
 800cbc2:	fbc1 4e06 	smlal	r4, lr, r1, r6
 800cbc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cbc8:	fbc1 4e08 	smlal	r4, lr, r1, r8
 800cbcc:	9907      	ldr	r1, [sp, #28]
 800cbce:	fbc1 4e07 	smlal	r4, lr, r1, r7
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 800cbd2:	9901      	ldr	r1, [sp, #4]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 800cbd4:	9414      	str	r4, [sp, #80]	; 0x50
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 800cbd6:	fb81 640c 	smull	r6, r4, r1, ip
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 800cbda:	9906      	ldr	r1, [sp, #24]
 800cbdc:	9f08      	ldr	r7, [sp, #32]
 800cbde:	fbc9 6401 	smlal	r6, r4, r9, r1
 800cbe2:	9904      	ldr	r1, [sp, #16]
 800cbe4:	fbc1 6407 	smlal	r6, r4, r1, r7
 800cbe8:	e9dd 1702 	ldrd	r1, r7, [sp, #8]
 800cbec:	fbc1 6407 	smlal	r6, r4, r1, r7
 800cbf0:	9907      	ldr	r1, [sp, #28]
 800cbf2:	fbc1 6408 	smlal	r6, r4, r1, r8
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 800cbf6:	990c      	ldr	r1, [sp, #48]	; 0x30
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 800cbf8:	9615      	str	r6, [sp, #84]	; 0x54
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 800cbfa:	fb8c 6701 	smull	r6, r7, ip, r1
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800cbfe:	9907      	ldr	r1, [sp, #28]
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 800cc00:	9409      	str	r4, [sp, #36]	; 0x24
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800cc02:	fbc9 6701 	smlal	r6, r7, r9, r1
 800cc06:	9c08      	ldr	r4, [sp, #32]
 800cc08:	9901      	ldr	r1, [sp, #4]
 800cc0a:	fbc1 6704 	smlal	r6, r7, r1, r4
 800cc0e:	9903      	ldr	r1, [sp, #12]
 800cc10:	9c05      	ldr	r4, [sp, #20]
 800cc12:	fbc1 6704 	smlal	r6, r7, r1, r4
 800cc16:	9902      	ldr	r1, [sp, #8]
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 800cc18:	9c08      	ldr	r4, [sp, #32]
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800cc1a:	fbc1 6701 	smlal	r6, r7, r1, r1
 800cc1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc20:	fbc1 6708 	smlal	r6, r7, r1, r8
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 800cc24:	9907      	ldr	r1, [sp, #28]
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 800cc26:	9602      	str	r6, [sp, #8]
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 800cc28:	fb81 6c0c 	smull	r6, ip, r1, ip
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 800cc2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc2e:	fbc9 6c01 	smlal	r6, ip, r9, r1
 800cc32:	9906      	ldr	r1, [sp, #24]
 800cc34:	fbc1 6c04 	smlal	r6, ip, r1, r4
 800cc38:	9901      	ldr	r1, [sp, #4]
 800cc3a:	9c03      	ldr	r4, [sp, #12]
 800cc3c:	fbc1 6c04 	smlal	r6, ip, r1, r4
 800cc40:	9904      	ldr	r1, [sp, #16]
 800cc42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cc44:	fbc1 6c04 	smlal	r6, ip, r1, r4
 800cc48:	46b1      	mov	r9, r6
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  h0 += h0;
 800cc4a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  h1 += h1;
 800cc4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  h2 += h2;
 800cc4e:	990d      	ldr	r1, [sp, #52]	; 0x34
  h0 += h0;
 800cc50:	19b6      	adds	r6, r6, r6
 800cc52:	416d      	adcs	r5, r5
  h1 += h1;
 800cc54:	1924      	adds	r4, r4, r4
 800cc56:	9401      	str	r4, [sp, #4]
  h2 += h2;
 800cc58:	9c10      	ldr	r4, [sp, #64]	; 0x40
  h1 += h1;
 800cc5a:	4140      	adcs	r0, r0
  h2 += h2;
 800cc5c:	1924      	adds	r4, r4, r4
 800cc5e:	9403      	str	r4, [sp, #12]
  h3 += h3;
 800cc60:	9c11      	ldr	r4, [sp, #68]	; 0x44
  h2 += h2;
 800cc62:	4149      	adcs	r1, r1
  h3 += h3;
 800cc64:	1924      	adds	r4, r4, r4
 800cc66:	9405      	str	r4, [sp, #20]
 800cc68:	eb4a 040a 	adc.w	r4, sl, sl
 800cc6c:	9406      	str	r4, [sp, #24]
  h4 += h4;
 800cc6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800cc70:	eb14 0804 	adds.w	r8, r4, r4
  h5 += h5;
 800cc74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  h4 += h4;
 800cc76:	415b      	adcs	r3, r3
  h5 += h5;
 800cc78:	eb14 0a04 	adds.w	sl, r4, r4
  h6 += h6;
 800cc7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  h5 += h5;
 800cc7e:	4152      	adcs	r2, r2
  h6 += h6;
 800cc80:	1924      	adds	r4, r4, r4
 800cc82:	9404      	str	r4, [sp, #16]
  h7 += h7;
 800cc84:	9c15      	ldr	r4, [sp, #84]	; 0x54
  h6 += h6;
 800cc86:	eb4e 0e0e 	adc.w	lr, lr, lr
  h7 += h7;
 800cc8a:	1924      	adds	r4, r4, r4
 800cc8c:	940b      	str	r4, [sp, #44]	; 0x2c
 800cc8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cc90:	4164      	adcs	r4, r4
 800cc92:	940c      	str	r4, [sp, #48]	; 0x30
  h8 += h8;
 800cc94:	9c02      	ldr	r4, [sp, #8]
 800cc96:	1924      	adds	r4, r4, r4
 800cc98:	940d      	str	r4, [sp, #52]	; 0x34
 800cc9a:	eb47 0407 	adc.w	r4, r7, r7
 800cc9e:	940e      	str	r4, [sp, #56]	; 0x38
  h9 += h9;
 800cca0:	eb19 0409 	adds.w	r4, r9, r9
 800cca4:	940f      	str	r4, [sp, #60]	; 0x3c
 800cca6:	eb4c 040c 	adc.w	r4, ip, ip

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800ccaa:	f116 7700 	adds.w	r7, r6, #33554432	; 0x2000000
 800ccae:	f145 0c00 	adc.w	ip, r5, #0
 800ccb2:	f8dd 9004 	ldr.w	r9, [sp, #4]
  h9 += h9;
 800ccb6:	9410      	str	r4, [sp, #64]	; 0x40
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800ccb8:	0ebc      	lsrs	r4, r7, #26
 800ccba:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
 800ccbe:	eb14 0909 	adds.w	r9, r4, r9
 800ccc2:	f007 477c 	and.w	r7, r7, #4227858432	; 0xfc000000
 800ccc6:	eb40 60ac 	adc.w	r0, r0, ip, asr #26
 800ccca:	1bf4      	subs	r4, r6, r7
 800cccc:	9407      	str	r4, [sp, #28]
 800ccce:	eb65 040c 	sbc.w	r4, r5, ip
 800ccd2:	9408      	str	r4, [sp, #32]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800ccd4:	f118 7400 	adds.w	r4, r8, #33554432	; 0x2000000
 800ccd8:	f143 0500 	adc.w	r5, r3, #0
 800ccdc:	0ea6      	lsrs	r6, r4, #26
 800ccde:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 800cce2:	eb16 0a0a 	adds.w	sl, r6, sl
 800cce6:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800ccea:	eb42 62a5 	adc.w	r2, r2, r5, asr #26
 800ccee:	ebb8 0804 	subs.w	r8, r8, r4
 800ccf2:	eb63 0305 	sbc.w	r3, r3, r5

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800ccf6:	f119 7480 	adds.w	r4, r9, #16777216	; 0x1000000
 800ccfa:	9e03      	ldr	r6, [sp, #12]
 800ccfc:	f140 0000 	adc.w	r0, r0, #0
 800cd00:	0e65      	lsrs	r5, r4, #25
 800cd02:	ea45 15c0 	orr.w	r5, r5, r0, lsl #7
 800cd06:	19ad      	adds	r5, r5, r6
 800cd08:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 800cd0c:	eb41 6160 	adc.w	r1, r1, r0, asr #25
 800cd10:	ebb9 0004 	subs.w	r0, r9, r4
 800cd14:	9009      	str	r0, [sp, #36]	; 0x24
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800cd16:	f11a 7080 	adds.w	r0, sl, #16777216	; 0x1000000
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 800cd1a:	9503      	str	r5, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800cd1c:	f142 0200 	adc.w	r2, r2, #0
 800cd20:	9d04      	ldr	r5, [sp, #16]
 800cd22:	0e44      	lsrs	r4, r0, #25
 800cd24:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 800cd28:	1964      	adds	r4, r4, r5
 800cd2a:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 800cd2e:	eb4e 6e62 	adc.w	lr, lr, r2, asr #25
 800cd32:	ebba 0200 	subs.w	r2, sl, r0
 800cd36:	920a      	str	r2, [sp, #40]	; 0x28

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800cd38:	9a03      	ldr	r2, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 800cd3a:	9404      	str	r4, [sp, #16]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800cd3c:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800cd40:	9201      	str	r2, [sp, #4]
 800cd42:	f141 0100 	adc.w	r1, r1, #0
 800cd46:	9805      	ldr	r0, [sp, #20]

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800cd48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd4a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800cd4c:	0e92      	lsrs	r2, r2, #26
 800cd4e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800cd52:	1812      	adds	r2, r2, r0
 800cd54:	9205      	str	r2, [sp, #20]
 800cd56:	9a06      	ldr	r2, [sp, #24]
 800cd58:	eb42 61a1 	adc.w	r1, r2, r1, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800cd5c:	f114 7200 	adds.w	r2, r4, #33554432	; 0x2000000
 800cd60:	f14e 0e00 	adc.w	lr, lr, #0
 800cd64:	9202      	str	r2, [sp, #8]
 800cd66:	0e90      	lsrs	r0, r2, #26
 800cd68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd6a:	ea40 108e 	orr.w	r0, r0, lr, lsl #6
 800cd6e:	1880      	adds	r0, r0, r2
 800cd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd72:	eb42 6cae 	adc.w	ip, r2, lr, asr #26
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800cd76:	9a05      	ldr	r2, [sp, #20]
 800cd78:	f112 7a80 	adds.w	sl, r2, #16777216	; 0x1000000
 800cd7c:	f141 0100 	adc.w	r1, r1, #0
 800cd80:	ea4f 645a 	mov.w	r4, sl, lsr #25
 800cd84:	ea44 14c1 	orr.w	r4, r4, r1, lsl #7
 800cd88:	eb14 0408 	adds.w	r4, r4, r8
 800cd8c:	eb43 6361 	adc.w	r3, r3, r1, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800cd90:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 800cd94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd96:	f14c 0c00 	adc.w	ip, ip, #0
 800cd9a:	ea4f 6159 	mov.w	r1, r9, lsr #25
 800cd9e:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 800cda2:	1889      	adds	r1, r1, r2
 800cda4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cda6:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800cdaa:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 800cdae:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800cdb2:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 800cdb6:	f14c 0c00 	adc.w	ip, ip, #0
 800cdba:	ea4f 6298 	mov.w	r2, r8, lsr #26
 800cdbe:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 800cdc2:	1952      	adds	r2, r2, r5
 800cdc4:	eb46 6cac 	adc.w	ip, r6, ip, asr #26

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800cdc8:	f112 7e80 	adds.w	lr, r2, #16777216	; 0x1000000
 800cdcc:	f14c 0c00 	adc.w	ip, ip, #0
 800cdd0:	ea4f 655e 	mov.w	r5, lr, lsr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800cdd4:	9306      	str	r3, [sp, #24]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800cdd6:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 800cdda:	2313      	movs	r3, #19
 800cddc:	fba5 6503 	umull	r6, r5, r5, r3
 800cde0:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 800cde4:	fb03 550c 	mla	r5, r3, ip, r5
 800cde8:	9b07      	ldr	r3, [sp, #28]
 800cdea:	18f6      	adds	r6, r6, r3
 800cdec:	9b08      	ldr	r3, [sp, #32]
 800cdee:	eb45 0503 	adc.w	r5, r5, r3

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800cdf2:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000
 800cdf6:	f00c 437c 	and.w	r3, ip, #4227858432	; 0xfc000000
 800cdfa:	f145 0500 	adc.w	r5, r5, #0
 800cdfe:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 800ce02:	1af6      	subs	r6, r6, r3
 800ce04:	9b09      	ldr	r3, [sp, #36]	; 0x24

  h[0] = (sword32)h0;
 800ce06:	f8cb 6000 	str.w	r6, [fp]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 800ce0a:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 800ce0e:	eb1c 0503 	adds.w	r5, ip, r3
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800ce12:	9b01      	ldr	r3, [sp, #4]
  h[1] = (sword32)h1;
 800ce14:	f8cb 5004 	str.w	r5, [fp, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 800ce18:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	1b5d      	subs	r5, r3, r5
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800ce20:	9b05      	ldr	r3, [sp, #20]
  h[2] = (sword32)h2;
 800ce22:	f8cb 5008 	str.w	r5, [fp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 800ce26:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 800ce2a:	ebb3 050a 	subs.w	r5, r3, sl
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800ce2e:	9b06      	ldr	r3, [sp, #24]
  h[3] = (sword32)h3;
 800ce30:	f8cb 500c 	str.w	r5, [fp, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 800ce34:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 800ce38:	0ebf      	lsrs	r7, r7, #26
 800ce3a:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 800ce3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce40:	1b64      	subs	r4, r4, r5
 800ce42:	18ff      	adds	r7, r7, r3
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800ce44:	9b02      	ldr	r3, [sp, #8]
  h[4] = (sword32)h4;
 800ce46:	f8cb 4010 	str.w	r4, [fp, #16]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800ce4a:	9c04      	ldr	r4, [sp, #16]
  h[5] = (sword32)h5;
 800ce4c:	f8cb 7014 	str.w	r7, [fp, #20]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800ce50:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800ce54:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800ce58:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 800ce5c:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 800ce60:	1ae3      	subs	r3, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 800ce62:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 800ce66:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 800ce6a:	ebb2 020e 	subs.w	r2, r2, lr
  h[6] = (sword32)h6;
 800ce6e:	f8cb 3018 	str.w	r3, [fp, #24]
  h[7] = (sword32)h7;
 800ce72:	f8cb 001c 	str.w	r0, [fp, #28]
  h[8] = (sword32)h8;
 800ce76:	f8cb 1020 	str.w	r1, [fp, #32]
  h[9] = (sword32)h9;
 800ce7a:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
}
 800ce7e:	b017      	add	sp, #92	; 0x5c
 800ce80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce84 <fe_pow22523>:


void fe_pow22523(fe out,const fe z)
{
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	b09e      	sub	sp, #120	; 0x78
 800ce88:	460c      	mov	r4, r1
  fe t0 = {0};
 800ce8a:	2228      	movs	r2, #40	; 0x28
 800ce8c:	2100      	movs	r1, #0
{
 800ce8e:	4605      	mov	r5, r0
  fe t0 = {0};
 800ce90:	4668      	mov	r0, sp
 800ce92:	f006 f9bd 	bl	8013210 <memset>
  fe t1 = {0};
 800ce96:	2228      	movs	r2, #40	; 0x28
 800ce98:	2100      	movs	r1, #0
 800ce9a:	eb0d 0002 	add.w	r0, sp, r2
 800ce9e:	f006 f9b7 	bl	8013210 <memset>
  fe t2 = {0};
 800cea2:	2228      	movs	r2, #40	; 0x28
 800cea4:	2100      	movs	r1, #0
 800cea6:	a814      	add	r0, sp, #80	; 0x50
 800cea8:	f006 f9b2 	bl	8013210 <memset>
  int i = 0;

  fe_sq(t0,z); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 800ceac:	4621      	mov	r1, r4
 800ceae:	4668      	mov	r0, sp
 800ceb0:	f7fe fc07 	bl	800b6c2 <fe_sq>
  fe_sq(t1,t0); for (i = 1;i < 2;++i) fe_sq(t1,t1);
 800ceb4:	4669      	mov	r1, sp
 800ceb6:	a80a      	add	r0, sp, #40	; 0x28
 800ceb8:	f7fe fc03 	bl	800b6c2 <fe_sq>
 800cebc:	a90a      	add	r1, sp, #40	; 0x28
 800cebe:	4608      	mov	r0, r1
 800cec0:	f7fe fbff 	bl	800b6c2 <fe_sq>
  fe_mul(t1,z,t1);
 800cec4:	aa0a      	add	r2, sp, #40	; 0x28
 800cec6:	4610      	mov	r0, r2
 800cec8:	4621      	mov	r1, r4
 800ceca:	f7ff f807 	bl	800bedc <fe_mul>
  fe_mul(t0,t0,t1);
 800cece:	aa0a      	add	r2, sp, #40	; 0x28
 800ced0:	4669      	mov	r1, sp
 800ced2:	4668      	mov	r0, sp
 800ced4:	f7ff f802 	bl	800bedc <fe_mul>
  fe_sq(t0,t0); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 800ced8:	4669      	mov	r1, sp
 800ceda:	4668      	mov	r0, sp
 800cedc:	f7fe fbf1 	bl	800b6c2 <fe_sq>
  fe_mul(t0,t1,t0);
 800cee0:	466a      	mov	r2, sp
 800cee2:	a90a      	add	r1, sp, #40	; 0x28
 800cee4:	4668      	mov	r0, sp
 800cee6:	f7fe fff9 	bl	800bedc <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 5;++i) fe_sq(t1,t1);
 800ceea:	4669      	mov	r1, sp
 800ceec:	a80a      	add	r0, sp, #40	; 0x28
 800ceee:	f7fe fbe8 	bl	800b6c2 <fe_sq>
 800cef2:	2604      	movs	r6, #4
 800cef4:	a90a      	add	r1, sp, #40	; 0x28
 800cef6:	4608      	mov	r0, r1
 800cef8:	f7fe fbe3 	bl	800b6c2 <fe_sq>
 800cefc:	3e01      	subs	r6, #1
 800cefe:	d1f9      	bne.n	800cef4 <fe_pow22523+0x70>
  fe_mul(t0,t1,t0);
 800cf00:	466a      	mov	r2, sp
 800cf02:	a90a      	add	r1, sp, #40	; 0x28
 800cf04:	4668      	mov	r0, sp
 800cf06:	f7fe ffe9 	bl	800bedc <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 10;++i) fe_sq(t1,t1);
 800cf0a:	4669      	mov	r1, sp
 800cf0c:	a80a      	add	r0, sp, #40	; 0x28
 800cf0e:	f7fe fbd8 	bl	800b6c2 <fe_sq>
 800cf12:	2609      	movs	r6, #9
 800cf14:	a90a      	add	r1, sp, #40	; 0x28
 800cf16:	4608      	mov	r0, r1
 800cf18:	f7fe fbd3 	bl	800b6c2 <fe_sq>
 800cf1c:	3e01      	subs	r6, #1
 800cf1e:	d1f9      	bne.n	800cf14 <fe_pow22523+0x90>
  fe_mul(t1,t1,t0);
 800cf20:	a90a      	add	r1, sp, #40	; 0x28
 800cf22:	4608      	mov	r0, r1
 800cf24:	466a      	mov	r2, sp
 800cf26:	f7fe ffd9 	bl	800bedc <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 20;++i) fe_sq(t2,t2);
 800cf2a:	a90a      	add	r1, sp, #40	; 0x28
 800cf2c:	a814      	add	r0, sp, #80	; 0x50
 800cf2e:	f7fe fbc8 	bl	800b6c2 <fe_sq>
 800cf32:	2613      	movs	r6, #19
 800cf34:	a914      	add	r1, sp, #80	; 0x50
 800cf36:	4608      	mov	r0, r1
 800cf38:	f7fe fbc3 	bl	800b6c2 <fe_sq>
 800cf3c:	3e01      	subs	r6, #1
 800cf3e:	d1f9      	bne.n	800cf34 <fe_pow22523+0xb0>
  fe_mul(t1,t2,t1);
 800cf40:	aa0a      	add	r2, sp, #40	; 0x28
 800cf42:	4610      	mov	r0, r2
 800cf44:	a914      	add	r1, sp, #80	; 0x50
 800cf46:	f7fe ffc9 	bl	800bedc <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 10;++i) fe_sq(t1,t1);
 800cf4a:	a90a      	add	r1, sp, #40	; 0x28
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	f7fe fbb8 	bl	800b6c2 <fe_sq>
 800cf52:	2609      	movs	r6, #9
 800cf54:	a90a      	add	r1, sp, #40	; 0x28
 800cf56:	4608      	mov	r0, r1
 800cf58:	f7fe fbb3 	bl	800b6c2 <fe_sq>
 800cf5c:	3e01      	subs	r6, #1
 800cf5e:	d1f9      	bne.n	800cf54 <fe_pow22523+0xd0>
  fe_mul(t0,t1,t0);
 800cf60:	466a      	mov	r2, sp
 800cf62:	a90a      	add	r1, sp, #40	; 0x28
 800cf64:	4668      	mov	r0, sp
 800cf66:	f7fe ffb9 	bl	800bedc <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 50;++i) fe_sq(t1,t1);
 800cf6a:	4669      	mov	r1, sp
 800cf6c:	a80a      	add	r0, sp, #40	; 0x28
 800cf6e:	f7fe fba8 	bl	800b6c2 <fe_sq>
 800cf72:	2631      	movs	r6, #49	; 0x31
 800cf74:	a90a      	add	r1, sp, #40	; 0x28
 800cf76:	4608      	mov	r0, r1
 800cf78:	f7fe fba3 	bl	800b6c2 <fe_sq>
 800cf7c:	3e01      	subs	r6, #1
 800cf7e:	d1f9      	bne.n	800cf74 <fe_pow22523+0xf0>
  fe_mul(t1,t1,t0);
 800cf80:	a90a      	add	r1, sp, #40	; 0x28
 800cf82:	4608      	mov	r0, r1
 800cf84:	466a      	mov	r2, sp
 800cf86:	f7fe ffa9 	bl	800bedc <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 100;++i) fe_sq(t2,t2);
 800cf8a:	a90a      	add	r1, sp, #40	; 0x28
 800cf8c:	a814      	add	r0, sp, #80	; 0x50
 800cf8e:	f7fe fb98 	bl	800b6c2 <fe_sq>
 800cf92:	2663      	movs	r6, #99	; 0x63
 800cf94:	a914      	add	r1, sp, #80	; 0x50
 800cf96:	4608      	mov	r0, r1
 800cf98:	f7fe fb93 	bl	800b6c2 <fe_sq>
 800cf9c:	3e01      	subs	r6, #1
 800cf9e:	d1f9      	bne.n	800cf94 <fe_pow22523+0x110>
  fe_mul(t1,t2,t1);
 800cfa0:	aa0a      	add	r2, sp, #40	; 0x28
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	a914      	add	r1, sp, #80	; 0x50
 800cfa6:	f7fe ff99 	bl	800bedc <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 50;++i) fe_sq(t1,t1);
 800cfaa:	a90a      	add	r1, sp, #40	; 0x28
 800cfac:	4608      	mov	r0, r1
 800cfae:	f7fe fb88 	bl	800b6c2 <fe_sq>
 800cfb2:	2631      	movs	r6, #49	; 0x31
 800cfb4:	a90a      	add	r1, sp, #40	; 0x28
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	f7fe fb83 	bl	800b6c2 <fe_sq>
 800cfbc:	3e01      	subs	r6, #1
 800cfbe:	d1f9      	bne.n	800cfb4 <fe_pow22523+0x130>
  fe_mul(t0,t1,t0);
 800cfc0:	466a      	mov	r2, sp
 800cfc2:	a90a      	add	r1, sp, #40	; 0x28
 800cfc4:	4668      	mov	r0, sp
 800cfc6:	f7fe ff89 	bl	800bedc <fe_mul>
  fe_sq(t0,t0); for (i = 1;i < 2;++i) fe_sq(t0,t0);
 800cfca:	4669      	mov	r1, sp
 800cfcc:	4668      	mov	r0, sp
 800cfce:	f7fe fb78 	bl	800b6c2 <fe_sq>
 800cfd2:	4669      	mov	r1, sp
 800cfd4:	4668      	mov	r0, sp
 800cfd6:	f7fe fb74 	bl	800b6c2 <fe_sq>
  fe_mul(out,t0,z);
 800cfda:	4622      	mov	r2, r4
 800cfdc:	4669      	mov	r1, sp
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f7fe ff7c 	bl	800bedc <fe_mul>

  return;
}
 800cfe4:	b01e      	add	sp, #120	; 0x78
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}

0800cfe8 <fe_neg>:
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword32 h0 = -f0;
  sword32 h1 = -f1;
 800cfe8:	684b      	ldr	r3, [r1, #4]
{
 800cfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sword32 h1 = -f1;
 800cfee:	f1c3 0e00 	rsb	lr, r3, #0
  sword32 h2 = -f2;
 800cff2:	688b      	ldr	r3, [r1, #8]
  sword32 h3 = -f3;
 800cff4:	68cf      	ldr	r7, [r1, #12]
  sword32 h4 = -f4;
 800cff6:	690e      	ldr	r6, [r1, #16]
  sword32 h5 = -f5;
 800cff8:	694d      	ldr	r5, [r1, #20]
  sword32 h6 = -f6;
 800cffa:	698c      	ldr	r4, [r1, #24]
  sword32 h2 = -f2;
 800cffc:	f1c3 0c00 	rsb	ip, r3, #0
  sword32 h7 = -f7;
 800d000:	69cb      	ldr	r3, [r1, #28]
 800d002:	f1c3 0800 	rsb	r8, r3, #0
  sword32 h8 = -f8;
 800d006:	6a0b      	ldr	r3, [r1, #32]
 800d008:	425a      	negs	r2, r3
  sword32 h9 = -f9;
 800d00a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  sword32 h0 = -f0;
 800d00c:	6809      	ldr	r1, [r1, #0]
  sword32 h3 = -f3;
 800d00e:	427f      	negs	r7, r7
  sword32 h4 = -f4;
 800d010:	4276      	negs	r6, r6
  sword32 h5 = -f5;
 800d012:	426d      	negs	r5, r5
  sword32 h6 = -f6;
 800d014:	4264      	negs	r4, r4
  sword32 h9 = -f9;
 800d016:	425b      	negs	r3, r3
  sword32 h0 = -f0;
 800d018:	4249      	negs	r1, r1
  h[0] = h0;
  h[1] = h1;
 800d01a:	e9c0 1e00 	strd	r1, lr, [r0]
  h[2] = h2;
  h[3] = h3;
 800d01e:	e9c0 c702 	strd	ip, r7, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 800d022:	e9c0 6504 	strd	r6, r5, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 800d026:	e9c0 4806 	strd	r4, r8, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 800d02a:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 800d02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d034 <fe_isnonzero>:
*/

static const unsigned char zero[32] = {0};

int fe_isnonzero(const fe f)
{
 800d034:	b530      	push	{r4, r5, lr}
 800d036:	b089      	sub	sp, #36	; 0x24
 800d038:	4601      	mov	r1, r0
  unsigned char s[32];
  fe_tobytes(s,f);
 800d03a:	4668      	mov	r0, sp
 800d03c:	f7fe fd4a 	bl	800bad4 <fe_tobytes>
    for (i = 0; i < length; i++) {
 800d040:	4c07      	ldr	r4, [pc, #28]	; (800d060 <fe_isnonzero+0x2c>)
    int compareSum = 0;
 800d042:	2300      	movs	r3, #0
    for (i = 0; i < length; i++) {
 800d044:	461a      	mov	r2, r3
        compareSum |= a[i] ^ b[i];
 800d046:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d04a:	f814 5b01 	ldrb.w	r5, [r4], #1
    for (i = 0; i < length; i++) {
 800d04e:	3201      	adds	r2, #1
        compareSum |= a[i] ^ b[i];
 800d050:	4069      	eors	r1, r5
    for (i = 0; i < length; i++) {
 800d052:	2a20      	cmp	r2, #32
        compareSum |= a[i] ^ b[i];
 800d054:	ea43 0301 	orr.w	r3, r3, r1
    for (i = 0; i < length; i++) {
 800d058:	d1f5      	bne.n	800d046 <fe_isnonzero+0x12>
  return ConstantCompare(s,zero,32);
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	b009      	add	sp, #36	; 0x24
 800d05e:	bd30      	pop	{r4, r5, pc}
 800d060:	08017c19 	.word	0x08017c19

0800d064 <fe_isnegative>:
Preconditions:
   |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f)
{
 800d064:	b500      	push	{lr}
 800d066:	b089      	sub	sp, #36	; 0x24
 800d068:	4601      	mov	r1, r0
  unsigned char s[32];
  fe_tobytes(s,f);
 800d06a:	4668      	mov	r0, sp
 800d06c:	f7fe fd32 	bl	800bad4 <fe_tobytes>
  return s[0] & 1;
 800d070:	f89d 0000 	ldrb.w	r0, [sp]
}
 800d074:	f000 0001 	and.w	r0, r0, #1
 800d078:	b009      	add	sp, #36	; 0x24
 800d07a:	f85d fb04 	ldr.w	pc, [sp], #4

0800d07e <fe_cmov>:

Preconditions: b in {0,1}.
*/

void fe_cmov(fe f, const fe g, int b)
{
 800d07e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 x0 = f0 ^ g0;
  sword32 x1 = f1 ^ g1;
  sword32 x2 = f2 ^ g2;
 800d082:	6883      	ldr	r3, [r0, #8]
 800d084:	688c      	ldr	r4, [r1, #8]
{
 800d086:	9201      	str	r2, [sp, #4]
  sword32 x2 = f2 ^ g2;
 800d088:	405c      	eors	r4, r3
  sword32 x3 = f3 ^ g3;
 800d08a:	68c2      	ldr	r2, [r0, #12]
 800d08c:	68cb      	ldr	r3, [r1, #12]
  sword32 x0 = f0 ^ g0;
 800d08e:	680e      	ldr	r6, [r1, #0]
  sword32 x1 = f1 ^ g1;
 800d090:	684d      	ldr	r5, [r1, #4]
  sword32 x3 = f3 ^ g3;
 800d092:	ea82 0e03 	eor.w	lr, r2, r3
  sword32 x4 = f4 ^ g4;
 800d096:	690b      	ldr	r3, [r1, #16]
 800d098:	6902      	ldr	r2, [r0, #16]
 800d09a:	ea82 0803 	eor.w	r8, r2, r3
  sword32 x5 = f5 ^ g5;
 800d09e:	694b      	ldr	r3, [r1, #20]
 800d0a0:	6942      	ldr	r2, [r0, #20]
 800d0a2:	ea82 0903 	eor.w	r9, r2, r3
  sword32 x6 = f6 ^ g6;
 800d0a6:	698b      	ldr	r3, [r1, #24]
 800d0a8:	6982      	ldr	r2, [r0, #24]
 800d0aa:	ea82 0a03 	eor.w	sl, r2, r3
  sword32 x7 = f7 ^ g7;
 800d0ae:	69cb      	ldr	r3, [r1, #28]
 800d0b0:	69c2      	ldr	r2, [r0, #28]
 800d0b2:	ea82 0b03 	eor.w	fp, r2, r3
  sword32 x8 = f8 ^ g8;
 800d0b6:	6a0b      	ldr	r3, [r1, #32]
 800d0b8:	6a02      	ldr	r2, [r0, #32]
  sword32 x9 = f9 ^ g9;
 800d0ba:	6a49      	ldr	r1, [r1, #36]	; 0x24
  sword32 x8 = f8 ^ g8;
 800d0bc:	4053      	eors	r3, r2
  sword32 x9 = f9 ^ g9;
 800d0be:	6a42      	ldr	r2, [r0, #36]	; 0x24
  sword32 f1 = f[1];
 800d0c0:	e9d0 c700 	ldrd	ip, r7, [r0]
  sword32 x9 = f9 ^ g9;
 800d0c4:	4051      	eors	r1, r2
  b = -b;
 800d0c6:	9a01      	ldr	r2, [sp, #4]
  sword32 x1 = f1 ^ g1;
 800d0c8:	407d      	eors	r5, r7
  b = -b;
 800d0ca:	4252      	negs	r2, r2
  x0 &= b;
  x1 &= b;
 800d0cc:	4015      	ands	r5, r2
  x6 &= b;
  x7 &= b;
  x8 &= b;
  x9 &= b;
  f[0] = f0 ^ x0;
  f[1] = f1 ^ x1;
 800d0ce:	407d      	eors	r5, r7
 800d0d0:	6045      	str	r5, [r0, #4]
  f[2] = f2 ^ x2;
 800d0d2:	6885      	ldr	r5, [r0, #8]
  x2 &= b;
 800d0d4:	4014      	ands	r4, r2
  f[2] = f2 ^ x2;
 800d0d6:	406c      	eors	r4, r5
 800d0d8:	6084      	str	r4, [r0, #8]
  f[3] = f3 ^ x3;
 800d0da:	68c4      	ldr	r4, [r0, #12]
  x3 &= b;
 800d0dc:	ea0e 0e02 	and.w	lr, lr, r2
  f[3] = f3 ^ x3;
 800d0e0:	ea8e 0404 	eor.w	r4, lr, r4
 800d0e4:	60c4      	str	r4, [r0, #12]
  f[4] = f4 ^ x4;
 800d0e6:	6904      	ldr	r4, [r0, #16]
  x4 &= b;
 800d0e8:	ea08 0802 	and.w	r8, r8, r2
  f[4] = f4 ^ x4;
 800d0ec:	ea88 0404 	eor.w	r4, r8, r4
 800d0f0:	6104      	str	r4, [r0, #16]
  sword32 x0 = f0 ^ g0;
 800d0f2:	ea8c 0606 	eor.w	r6, ip, r6
  f[5] = f5 ^ x5;
 800d0f6:	6944      	ldr	r4, [r0, #20]
  x5 &= b;
 800d0f8:	ea09 0902 	and.w	r9, r9, r2
  x0 &= b;
 800d0fc:	4016      	ands	r6, r2
  f[5] = f5 ^ x5;
 800d0fe:	ea89 0404 	eor.w	r4, r9, r4
  f[0] = f0 ^ x0;
 800d102:	ea86 060c 	eor.w	r6, r6, ip
 800d106:	6006      	str	r6, [r0, #0]
  f[5] = f5 ^ x5;
 800d108:	6144      	str	r4, [r0, #20]
  f[6] = f6 ^ x6;
 800d10a:	6984      	ldr	r4, [r0, #24]
  x6 &= b;
 800d10c:	ea0a 0a02 	and.w	sl, sl, r2
  f[6] = f6 ^ x6;
 800d110:	ea8a 0404 	eor.w	r4, sl, r4
 800d114:	6184      	str	r4, [r0, #24]
  f[7] = f7 ^ x7;
 800d116:	69c4      	ldr	r4, [r0, #28]
  x7 &= b;
 800d118:	ea0b 0b02 	and.w	fp, fp, r2
  f[7] = f7 ^ x7;
 800d11c:	ea8b 0404 	eor.w	r4, fp, r4
 800d120:	61c4      	str	r4, [r0, #28]
  f[8] = f8 ^ x8;
 800d122:	6a04      	ldr	r4, [r0, #32]
  x8 &= b;
 800d124:	4013      	ands	r3, r2
  f[8] = f8 ^ x8;
 800d126:	4063      	eors	r3, r4
 800d128:	6203      	str	r3, [r0, #32]
  f[9] = f9 ^ x9;
 800d12a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  x9 &= b;
 800d12c:	400a      	ands	r2, r1
  f[9] = f9 ^ x9;
 800d12e:	405a      	eors	r2, r3
 800d130:	6242      	str	r2, [r0, #36]	; 0x24
}
 800d132:	b003      	add	sp, #12
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d138 <slide>:

#define SLIDE_SIZE 256

/* ge double scalar mult */
static void slide(signed char *r,const unsigned char *a)
{
 800d138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int i;
  int b;
  int k;

  for (i = 0;i < SLIDE_SIZE;++i)
 800d13c:	2300      	movs	r3, #0
    r[i] = 1 & (a[i >> 3] >> (i & 7));
 800d13e:	10da      	asrs	r2, r3, #3
 800d140:	f003 0407 	and.w	r4, r3, #7
 800d144:	5c8a      	ldrb	r2, [r1, r2]
 800d146:	4122      	asrs	r2, r4
 800d148:	f002 0201 	and.w	r2, r2, #1
 800d14c:	54c2      	strb	r2, [r0, r3]
  for (i = 0;i < SLIDE_SIZE;++i)
 800d14e:	3301      	adds	r3, #1
 800d150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d154:	d1f3      	bne.n	800d13e <slide+0x6>
 800d156:	2201      	movs	r2, #1
 800d158:	1e41      	subs	r1, r0, #1
 800d15a:	f500 7c80 	add.w	ip, r0, #256	; 0x100
            for (k = i + b;k < SLIDE_SIZE;++k) {
              if (!r[k]) {
                r[k] = 1;
                break;
              }
              r[k] = 0;
 800d15e:	2700      	movs	r7, #0
                r[k] = 1;
 800d160:	4696      	mov	lr, r2
  for (i = 0;i < SLIDE_SIZE;++i)
 800d162:	f240 1801 	movw	r8, #257	; 0x101
    if (r[i]) {
 800d166:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 800d16a:	bb73      	cbnz	r3, 800d1ca <slide+0x92>
  for (i = 0;i < SLIDE_SIZE;++i)
 800d16c:	3201      	adds	r2, #1
 800d16e:	4542      	cmp	r2, r8
 800d170:	d1f9      	bne.n	800d166 <slide+0x2e>
          } else
            break;
        }
      }
    }
}
 800d172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (r[i + b]) {
 800d176:	56c5      	ldrsb	r5, [r0, r3]
 800d178:	b155      	cbz	r5, 800d190 <slide+0x58>
          if (r[i] + (r[i + b] << b) <= 15) {
 800d17a:	f991 4000 	ldrsb.w	r4, [r1]
 800d17e:	40b5      	lsls	r5, r6
 800d180:	eb04 0905 	add.w	r9, r4, r5
 800d184:	f1b9 0f0f 	cmp.w	r9, #15
 800d188:	dc0a      	bgt.n	800d1a0 <slide+0x68>
            r[i] += (signed char)(r[i + b] << b); r[i + b] = 0;
 800d18a:	f881 9000 	strb.w	r9, [r1]
 800d18e:	54c7      	strb	r7, [r0, r3]
      for (b = 1;b <= 6 && i + b < SLIDE_SIZE;++b) {
 800d190:	3601      	adds	r6, #1
 800d192:	2e07      	cmp	r6, #7
 800d194:	f103 0301 	add.w	r3, r3, #1
 800d198:	d0e8      	beq.n	800d16c <slide+0x34>
 800d19a:	2bff      	cmp	r3, #255	; 0xff
 800d19c:	ddeb      	ble.n	800d176 <slide+0x3e>
 800d19e:	e7e5      	b.n	800d16c <slide+0x34>
          } else if (r[i] - (r[i + b] << b) >= -15) {
 800d1a0:	1b64      	subs	r4, r4, r5
 800d1a2:	f114 0f0f 	cmn.w	r4, #15
 800d1a6:	dbe1      	blt.n	800d16c <slide+0x34>
            r[i] -= (signed char)(r[i + b] << b);
 800d1a8:	700c      	strb	r4, [r1, #0]
            for (k = i + b;k < SLIDE_SIZE;++k) {
 800d1aa:	181c      	adds	r4, r3, r0
              if (!r[k]) {
 800d1ac:	4625      	mov	r5, r4
 800d1ae:	3401      	adds	r4, #1
 800d1b0:	f995 9000 	ldrsb.w	r9, [r5]
 800d1b4:	f1b9 0f00 	cmp.w	r9, #0
 800d1b8:	d102      	bne.n	800d1c0 <slide+0x88>
                r[k] = 1;
 800d1ba:	f885 e000 	strb.w	lr, [r5]
                break;
 800d1be:	e7e7      	b.n	800d190 <slide+0x58>
            for (k = i + b;k < SLIDE_SIZE;++k) {
 800d1c0:	45a4      	cmp	ip, r4
              r[k] = 0;
 800d1c2:	f804 7c01 	strb.w	r7, [r4, #-1]
            for (k = i + b;k < SLIDE_SIZE;++k) {
 800d1c6:	d1f1      	bne.n	800d1ac <slide+0x74>
 800d1c8:	e7e2      	b.n	800d190 <slide+0x58>
 800d1ca:	4613      	mov	r3, r2
      for (b = 1;b <= 6 && i + b < SLIDE_SIZE;++b) {
 800d1cc:	2601      	movs	r6, #1
 800d1ce:	e7e4      	b.n	800d19a <slide+0x62>

0800d1d0 <ge_p1p1_to_p2>:
r = p
*/

#ifndef CURVED25519_ASM
static void ge_p1p1_to_p2(ge_p2 *r,const ge_p1p1 *p)
{
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  fe_mul(r->X,p->X,p->T);
 800d1d2:	f101 0778 	add.w	r7, r1, #120	; 0x78
{
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	4605      	mov	r5, r0
  fe_mul(r->X,p->X,p->T);
 800d1da:	463a      	mov	r2, r7
  fe_mul(r->Y,p->Y,p->Z);
 800d1dc:	f104 0650 	add.w	r6, r4, #80	; 0x50
  fe_mul(r->X,p->X,p->T);
 800d1e0:	f7fe fe7c 	bl	800bedc <fe_mul>
  fe_mul(r->Y,p->Y,p->Z);
 800d1e4:	4632      	mov	r2, r6
 800d1e6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800d1ea:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d1ee:	f7fe fe75 	bl	800bedc <fe_mul>
  fe_mul(r->Z,p->Z,p->T);
 800d1f2:	463a      	mov	r2, r7
 800d1f4:	4631      	mov	r1, r6
 800d1f6:	f105 0050 	add.w	r0, r5, #80	; 0x50
}
 800d1fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  fe_mul(r->Z,p->Z,p->T);
 800d1fe:	f7fe be6d 	b.w	800bedc <fe_mul>

0800d202 <ge_madd>:
{
 800d202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d206:	4605      	mov	r5, r0
    fe_add(r->X,p->Y,p->X);
 800d208:	f101 0828 	add.w	r8, r1, #40	; 0x28
{
 800d20c:	b08b      	sub	sp, #44	; 0x2c
    fe_sub(r->Y,p->Y,p->X);
 800d20e:	f105 0628 	add.w	r6, r5, #40	; 0x28
{
 800d212:	460c      	mov	r4, r1
 800d214:	4617      	mov	r7, r2
    fe_add(r->X,p->Y,p->X);
 800d216:	460a      	mov	r2, r1
 800d218:	4641      	mov	r1, r8
 800d21a:	f7fe fc2a 	bl	800ba72 <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 800d21e:	4622      	mov	r2, r4
 800d220:	4641      	mov	r1, r8
 800d222:	4630      	mov	r0, r6
    fe_mul(r->Z,r->X,q->yplusx);
 800d224:	f105 0850 	add.w	r8, r5, #80	; 0x50
    fe_sub(r->Y,p->Y,p->X);
 800d228:	f7fe fd05 	bl	800bc36 <fe_sub>
    fe_mul(r->Z,r->X,q->yplusx);
 800d22c:	463a      	mov	r2, r7
 800d22e:	4629      	mov	r1, r5
 800d230:	4640      	mov	r0, r8
 800d232:	f7fe fe53 	bl	800bedc <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 800d236:	f105 0978 	add.w	r9, r5, #120	; 0x78
    fe_mul(r->Y,r->Y,q->yminusx);
 800d23a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d23e:	4631      	mov	r1, r6
 800d240:	4630      	mov	r0, r6
 800d242:	f7fe fe4b 	bl	800bedc <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 800d246:	f104 0278 	add.w	r2, r4, #120	; 0x78
 800d24a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d24e:	4648      	mov	r0, r9
 800d250:	f7fe fe44 	bl	800bedc <fe_mul>
    fe_add(t0,p->Z,p->Z);
 800d254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d258:	4611      	mov	r1, r2
 800d25a:	4668      	mov	r0, sp
 800d25c:	f7fe fc09 	bl	800ba72 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 800d260:	4632      	mov	r2, r6
 800d262:	4641      	mov	r1, r8
 800d264:	4628      	mov	r0, r5
 800d266:	f7fe fce6 	bl	800bc36 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 800d26a:	4632      	mov	r2, r6
 800d26c:	4641      	mov	r1, r8
 800d26e:	4630      	mov	r0, r6
 800d270:	f7fe fbff 	bl	800ba72 <fe_add>
    fe_add(r->Z,t0,r->T);
 800d274:	464a      	mov	r2, r9
 800d276:	4669      	mov	r1, sp
 800d278:	4640      	mov	r0, r8
 800d27a:	f7fe fbfa 	bl	800ba72 <fe_add>
    fe_sub(r->T,t0,r->T);
 800d27e:	464a      	mov	r2, r9
 800d280:	4669      	mov	r1, sp
 800d282:	4648      	mov	r0, r9
 800d284:	f7fe fcd7 	bl	800bc36 <fe_sub>
}
 800d288:	b00b      	add	sp, #44	; 0x2c
 800d28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d28e <ge_p1p1_to_p3>:
r = p
*/

#ifndef CURVED25519_ASM
static WC_INLINE void ge_p1p1_to_p3(ge_p3 *r,const ge_p1p1 *p)
{
 800d28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d292:	460c      	mov	r4, r1
  fe_mul(r->X,p->X,p->T);
 800d294:	f101 0878 	add.w	r8, r1, #120	; 0x78
{
 800d298:	4605      	mov	r5, r0
  fe_mul(r->X,p->X,p->T);
 800d29a:	4642      	mov	r2, r8
  fe_mul(r->Y,p->Y,p->Z);
 800d29c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800d2a0:	f104 0750 	add.w	r7, r4, #80	; 0x50
  fe_mul(r->X,p->X,p->T);
 800d2a4:	f7fe fe1a 	bl	800bedc <fe_mul>
  fe_mul(r->Y,p->Y,p->Z);
 800d2a8:	463a      	mov	r2, r7
 800d2aa:	4631      	mov	r1, r6
 800d2ac:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d2b0:	f7fe fe14 	bl	800bedc <fe_mul>
  fe_mul(r->Z,p->Z,p->T);
 800d2b4:	4642      	mov	r2, r8
 800d2b6:	4639      	mov	r1, r7
 800d2b8:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800d2bc:	f7fe fe0e 	bl	800bedc <fe_mul>
  fe_mul(r->T,p->X,p->Y);
 800d2c0:	4632      	mov	r2, r6
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	f105 0078 	add.w	r0, r5, #120	; 0x78
}
 800d2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  fe_mul(r->T,p->X,p->Y);
 800d2cc:	f7fe be06 	b.w	800bedc <fe_mul>

0800d2d0 <ge_add>:
{
 800d2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2d4:	4604      	mov	r4, r0
    fe_add(r->X,p->Y,p->X);
 800d2d6:	f101 0828 	add.w	r8, r1, #40	; 0x28
{
 800d2da:	b08b      	sub	sp, #44	; 0x2c
    fe_sub(r->Y,p->Y,p->X);
 800d2dc:	f104 0728 	add.w	r7, r4, #40	; 0x28
{
 800d2e0:	4616      	mov	r6, r2
 800d2e2:	460d      	mov	r5, r1
    fe_add(r->X,p->Y,p->X);
 800d2e4:	460a      	mov	r2, r1
 800d2e6:	4641      	mov	r1, r8
 800d2e8:	f7fe fbc3 	bl	800ba72 <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	4638      	mov	r0, r7
    fe_mul(r->Z,r->X,q->YplusX);
 800d2f2:	f104 0850 	add.w	r8, r4, #80	; 0x50
    fe_sub(r->Y,p->Y,p->X);
 800d2f6:	f7fe fc9e 	bl	800bc36 <fe_sub>
    fe_mul(r->Z,r->X,q->YplusX);
 800d2fa:	4632      	mov	r2, r6
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4640      	mov	r0, r8
 800d300:	f7fe fdec 	bl	800bedc <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 800d304:	f104 0978 	add.w	r9, r4, #120	; 0x78
    fe_mul(r->Y,r->Y,q->YminusX);
 800d308:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800d30c:	4639      	mov	r1, r7
 800d30e:	4638      	mov	r0, r7
 800d310:	f7fe fde4 	bl	800bedc <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 800d314:	f105 0278 	add.w	r2, r5, #120	; 0x78
 800d318:	f106 0178 	add.w	r1, r6, #120	; 0x78
 800d31c:	4648      	mov	r0, r9
 800d31e:	f7fe fddd 	bl	800bedc <fe_mul>
    fe_mul(r->X,p->Z,q->Z);
 800d322:	f106 0250 	add.w	r2, r6, #80	; 0x50
 800d326:	f105 0150 	add.w	r1, r5, #80	; 0x50
 800d32a:	4620      	mov	r0, r4
 800d32c:	f7fe fdd6 	bl	800bedc <fe_mul>
    fe_add(t0,r->X,r->X);
 800d330:	4622      	mov	r2, r4
 800d332:	4621      	mov	r1, r4
 800d334:	4668      	mov	r0, sp
 800d336:	f7fe fb9c 	bl	800ba72 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 800d33a:	463a      	mov	r2, r7
 800d33c:	4641      	mov	r1, r8
 800d33e:	4620      	mov	r0, r4
 800d340:	f7fe fc79 	bl	800bc36 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 800d344:	463a      	mov	r2, r7
 800d346:	4641      	mov	r1, r8
 800d348:	4638      	mov	r0, r7
 800d34a:	f7fe fb92 	bl	800ba72 <fe_add>
    fe_add(r->Z,t0,r->T);
 800d34e:	464a      	mov	r2, r9
 800d350:	4669      	mov	r1, sp
 800d352:	4640      	mov	r0, r8
 800d354:	f7fe fb8d 	bl	800ba72 <fe_add>
    fe_sub(r->T,t0,r->T);
 800d358:	464a      	mov	r2, r9
 800d35a:	4669      	mov	r1, sp
 800d35c:	4648      	mov	r0, r9
 800d35e:	f7fe fc6a 	bl	800bc36 <fe_sub>
}
 800d362:	b00b      	add	sp, #44	; 0x2c
 800d364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d368 <ge_p3_to_cached>:
} ;
#endif


static WC_INLINE void ge_p3_to_cached(ge_cached *r,const ge_p3 *p)
{
 800d368:	b570      	push	{r4, r5, r6, lr}
  fe_add(r->YplusX,p->Y,p->X);
 800d36a:	f101 0628 	add.w	r6, r1, #40	; 0x28
{
 800d36e:	4605      	mov	r5, r0
 800d370:	460c      	mov	r4, r1
  fe_add(r->YplusX,p->Y,p->X);
 800d372:	460a      	mov	r2, r1
 800d374:	4631      	mov	r1, r6
 800d376:	f7fe fb7c 	bl	800ba72 <fe_add>
  fe_sub(r->YminusX,p->Y,p->X);
 800d37a:	4622      	mov	r2, r4
 800d37c:	4631      	mov	r1, r6
 800d37e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d382:	f7fe fc58 	bl	800bc36 <fe_sub>
  fe_copy(r->Z,p->Z);
 800d386:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800d38a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800d38e:	f7fe fd8d 	bl	800beac <fe_copy>
  fe_mul(r->T2d,p->T,d2);
 800d392:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800d396:	f105 0078 	add.w	r0, r5, #120	; 0x78
 800d39a:	4a02      	ldr	r2, [pc, #8]	; (800d3a4 <ge_p3_to_cached+0x3c>)
}
 800d39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fe_mul(r->T2d,p->T,d2);
 800d3a0:	f7fe bd9c 	b.w	800bedc <fe_mul>
 800d3a4:	0801f824 	.word	0x0801f824

0800d3a8 <ge_p2_dbl>:
{
 800d3a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	460e      	mov	r6, r1
 800d3b0:	b08b      	sub	sp, #44	; 0x2c
    fe_sq(r->Z,p->Y);
 800d3b2:	f104 0550 	add.w	r5, r4, #80	; 0x50
 800d3b6:	f106 0928 	add.w	r9, r6, #40	; 0x28
    fe_sq(r->X,p->X);
 800d3ba:	f7fe f982 	bl	800b6c2 <fe_sq>
    fe_sq2(r->T,p->Z);
 800d3be:	f104 0878 	add.w	r8, r4, #120	; 0x78
    fe_sq(r->Z,p->Y);
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f7fe f97c 	bl	800b6c2 <fe_sq>
    fe_add(r->Y,p->X,p->Y);
 800d3ca:	f104 0728 	add.w	r7, r4, #40	; 0x28
    fe_sq2(r->T,p->Z);
 800d3ce:	f106 0150 	add.w	r1, r6, #80	; 0x50
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	f7ff fb4d 	bl	800ca72 <fe_sq2>
    fe_add(r->Y,p->X,p->Y);
 800d3d8:	464a      	mov	r2, r9
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4638      	mov	r0, r7
 800d3de:	f7fe fb48 	bl	800ba72 <fe_add>
    fe_sq(t0,r->Y);
 800d3e2:	4639      	mov	r1, r7
 800d3e4:	4668      	mov	r0, sp
 800d3e6:	f7fe f96c 	bl	800b6c2 <fe_sq>
    fe_add(r->Y,r->Z,r->X);
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	f7fe fb3f 	bl	800ba72 <fe_add>
    fe_sub(r->Z,r->Z,r->X);
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f7fe fc1c 	bl	800bc36 <fe_sub>
    fe_sub(r->X,t0,r->Y);
 800d3fe:	463a      	mov	r2, r7
 800d400:	4669      	mov	r1, sp
 800d402:	4620      	mov	r0, r4
 800d404:	f7fe fc17 	bl	800bc36 <fe_sub>
    fe_sub(r->T,r->T,r->Z);
 800d408:	462a      	mov	r2, r5
 800d40a:	4641      	mov	r1, r8
 800d40c:	4640      	mov	r0, r8
 800d40e:	f7fe fc12 	bl	800bc36 <fe_sub>
}
 800d412:	b00b      	add	sp, #44	; 0x2c
 800d414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d418 <ge_p3_dbl>:
{
 800d418:	b530      	push	{r4, r5, lr}
 800d41a:	b09f      	sub	sp, #124	; 0x7c
 800d41c:	460c      	mov	r4, r1
 800d41e:	4605      	mov	r5, r0
*/

#ifndef CURVED25519_ASM
static void ge_p3_to_p2(ge_p2 *r,const ge_p3 *p)
{
  fe_copy(r->X,p->X);
 800d420:	4668      	mov	r0, sp
 800d422:	f7fe fd43 	bl	800beac <fe_copy>
  fe_copy(r->Y,p->Y);
 800d426:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800d42a:	a80a      	add	r0, sp, #40	; 0x28
 800d42c:	f7fe fd3e 	bl	800beac <fe_copy>
  fe_copy(r->Z,p->Z);
 800d430:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800d434:	a814      	add	r0, sp, #80	; 0x50
 800d436:	f7fe fd39 	bl	800beac <fe_copy>
    ge_p2_dbl(r,&q);
 800d43a:	4669      	mov	r1, sp
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7ff ffb3 	bl	800d3a8 <ge_p2_dbl>
}
 800d442:	b01f      	add	sp, #124	; 0x7c
 800d444:	bd30      	pop	{r4, r5, pc}

0800d446 <cmov>:
{
 800d446:	b570      	push	{r4, r5, r6, lr}
  word32 y = x; /* 0: yes; 1..255: no */
 800d448:	ea82 0403 	eor.w	r4, r2, r3
  y -= 1; /* 4294967295: yes; 0..254: no */
 800d44c:	3c01      	subs	r4, #1
  y >>= 31; /* 1: yes; 0: no */
 800d44e:	0fe4      	lsrs	r4, r4, #31
{
 800d450:	4605      	mov	r5, r0
 800d452:	460e      	mov	r6, r1
  fe_cmov(t->yplusx,u->yplusx,b);
 800d454:	4622      	mov	r2, r4
 800d456:	f7ff fe12 	bl	800d07e <fe_cmov>
  fe_cmov(t->yminusx,u->yminusx,b);
 800d45a:	4622      	mov	r2, r4
 800d45c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800d460:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d464:	f7ff fe0b 	bl	800d07e <fe_cmov>
  fe_cmov(t->xy2d,u->xy2d,b);
 800d468:	4622      	mov	r2, r4
 800d46a:	f106 0150 	add.w	r1, r6, #80	; 0x50
 800d46e:	f105 0050 	add.w	r0, r5, #80	; 0x50
}
 800d472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fe_cmov(t->xy2d,u->xy2d,b);
 800d476:	f7ff be02 	b.w	800d07e <fe_cmov>
	...

0800d47c <ge_select>:
{
 800d47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d480:	4606      	mov	r6, r0
  unsigned char babs = (unsigned char)(b - (((-bnegative) & b) << 1));
 800d482:	ea02 74e2 	and.w	r4, r2, r2, asr #31
{
 800d486:	b09e      	sub	sp, #120	; 0x78
  return ((unsigned char)b) >> 7;
 800d488:	0fd7      	lsrs	r7, r2, #31
#if defined(HAVE_ED25519_SIGN) || defined(HAVE_ED25519_MAKE_KEY)
/* ge_precomp_0 */
static void ge_precomp_0(ge_precomp *h)
{
  fe_1(h->yplusx);
  fe_1(h->yminusx);
 800d48a:	f106 0928 	add.w	r9, r6, #40	; 0x28
  unsigned char babs = (unsigned char)(b - (((-bnegative) & b) << 1));
 800d48e:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800d492:	f002 04ff 	and.w	r4, r2, #255	; 0xff
{
 800d496:	460d      	mov	r5, r1
  fe_0(h->xy2d);
 800d498:	f106 0850 	add.w	r8, r6, #80	; 0x50
  fe_1(h->yplusx);
 800d49c:	f7fe f8f7 	bl	800b68e <fe_1>
  fe_1(h->yminusx);
 800d4a0:	4648      	mov	r0, r9
 800d4a2:	f7fe f8f4 	bl	800b68e <fe_1>
  fe_0(h->xy2d);
 800d4a6:	4640      	mov	r0, r8
  cmov(t,&base[pos][0],babs,1);
 800d4a8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d558 <ge_select+0xdc>
  fe_0(h->xy2d);
 800d4ac:	f7fe f8fc 	bl	800b6a8 <fe_0>
  cmov(t,&base[pos][0],babs,1);
 800d4b0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800d4b4:	434d      	muls	r5, r1
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	eb0a 0105 	add.w	r1, sl, r5
 800d4bc:	4630      	mov	r0, r6
 800d4be:	2301      	movs	r3, #1
 800d4c0:	f7ff ffc1 	bl	800d446 <cmov>
  cmov(t,&base[pos][1],babs,2);
 800d4c4:	f105 0178 	add.w	r1, r5, #120	; 0x78
 800d4c8:	4622      	mov	r2, r4
 800d4ca:	4451      	add	r1, sl
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	f7ff ffb9 	bl	800d446 <cmov>
  cmov(t,&base[pos][2],babs,3);
 800d4d4:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4451      	add	r1, sl
 800d4dc:	4630      	mov	r0, r6
 800d4de:	2303      	movs	r3, #3
 800d4e0:	f7ff ffb1 	bl	800d446 <cmov>
  cmov(t,&base[pos][3],babs,4);
 800d4e4:	f505 71b4 	add.w	r1, r5, #360	; 0x168
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	4451      	add	r1, sl
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	2304      	movs	r3, #4
 800d4f0:	f7ff ffa9 	bl	800d446 <cmov>
  cmov(t,&base[pos][4],babs,5);
 800d4f4:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	4451      	add	r1, sl
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	2305      	movs	r3, #5
 800d500:	f7ff ffa1 	bl	800d446 <cmov>
  cmov(t,&base[pos][5],babs,6);
 800d504:	f505 7116 	add.w	r1, r5, #600	; 0x258
 800d508:	4622      	mov	r2, r4
 800d50a:	4451      	add	r1, sl
 800d50c:	4630      	mov	r0, r6
 800d50e:	2306      	movs	r3, #6
 800d510:	f7ff ff99 	bl	800d446 <cmov>
  cmov(t,&base[pos][6],babs,7);
 800d514:	f505 7134 	add.w	r1, r5, #720	; 0x2d0
 800d518:	4622      	mov	r2, r4
 800d51a:	4451      	add	r1, sl
 800d51c:	4630      	mov	r0, r6
 800d51e:	2307      	movs	r3, #7
 800d520:	f7ff ff91 	bl	800d446 <cmov>
  cmov(t,&base[pos][7],babs,8);
 800d524:	f505 7152 	add.w	r1, r5, #840	; 0x348
 800d528:	2308      	movs	r3, #8
 800d52a:	4622      	mov	r2, r4
 800d52c:	4451      	add	r1, sl
 800d52e:	4630      	mov	r0, r6
 800d530:	f7ff ff89 	bl	800d446 <cmov>
  fe_cswap(t->yminusx, t->yplusx, bnegative);
 800d534:	463a      	mov	r2, r7
 800d536:	4631      	mov	r1, r6
 800d538:	4648      	mov	r0, r9
 800d53a:	f7ff f84b 	bl	800c5d4 <fe_cswap>
  fe_neg(minust.xy2d,t->xy2d);
 800d53e:	4641      	mov	r1, r8
 800d540:	a814      	add	r0, sp, #80	; 0x50
 800d542:	f7ff fd51 	bl	800cfe8 <fe_neg>
  fe_cmov(t->xy2d,minust.xy2d,bnegative);
 800d546:	463a      	mov	r2, r7
 800d548:	a914      	add	r1, sp, #80	; 0x50
 800d54a:	4640      	mov	r0, r8
 800d54c:	f7ff fd97 	bl	800d07e <fe_cmov>
}
 800d550:	b01e      	add	sp, #120	; 0x78
 800d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d556:	bf00      	nop
 800d558:	08017ffc 	.word	0x08017ffc

0800d55c <sc_reduce>:
{
 800d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d560:	b099      	sub	sp, #100	; 0x64
 800d562:	4604      	mov	r4, r0
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 800d564:	f7fe f886 	bl	800b674 <load_3>
 800d568:	900f      	str	r0, [sp, #60]	; 0x3c
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 800d56a:	1ca0      	adds	r0, r4, #2
 800d56c:	f7fe f88c 	bl	800b688 <load_4>
 800d570:	9010      	str	r0, [sp, #64]	; 0x40
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 800d572:	1d60      	adds	r0, r4, #5
 800d574:	f7fe f87e 	bl	800b674 <load_3>
 800d578:	9011      	str	r0, [sp, #68]	; 0x44
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 800d57a:	1de0      	adds	r0, r4, #7
 800d57c:	f7fe f884 	bl	800b688 <load_4>
 800d580:	9012      	str	r0, [sp, #72]	; 0x48
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 800d582:	f104 000a 	add.w	r0, r4, #10
 800d586:	f7fe f87f 	bl	800b688 <load_4>
 800d58a:	9013      	str	r0, [sp, #76]	; 0x4c
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 800d58c:	f104 000d 	add.w	r0, r4, #13
 800d590:	f7fe f870 	bl	800b674 <load_3>
 800d594:	9014      	str	r0, [sp, #80]	; 0x50
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 800d596:	f104 000f 	add.w	r0, r4, #15
 800d59a:	f7fe f875 	bl	800b688 <load_4>
 800d59e:	9007      	str	r0, [sp, #28]
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 800d5a0:	f104 0012 	add.w	r0, r4, #18
 800d5a4:	f7fe f866 	bl	800b674 <load_3>
 800d5a8:	900a      	str	r0, [sp, #40]	; 0x28
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 800d5aa:	f104 0015 	add.w	r0, r4, #21
 800d5ae:	f7fe f861 	bl	800b674 <load_3>
 800d5b2:	9008      	str	r0, [sp, #32]
    t[ 9] = MASK_21 & (load_4(s + 23) >> 5);
 800d5b4:	f104 0017 	add.w	r0, r4, #23
 800d5b8:	f7fe f866 	bl	800b688 <load_4>
 800d5bc:	900c      	str	r0, [sp, #48]	; 0x30
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 800d5be:	f104 001a 	add.w	r0, r4, #26
 800d5c2:	f7fe f857 	bl	800b674 <load_3>
 800d5c6:	9009      	str	r0, [sp, #36]	; 0x24
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 800d5c8:	f104 001c 	add.w	r0, r4, #28
 800d5cc:	f7fe f85c 	bl	800b688 <load_4>
 800d5d0:	900e      	str	r0, [sp, #56]	; 0x38
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 800d5d2:	f104 001f 	add.w	r0, r4, #31
 800d5d6:	f7fe f857 	bl	800b688 <load_4>
 800d5da:	9005      	str	r0, [sp, #20]
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 800d5dc:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d5e0:	f7fe f848 	bl	800b674 <load_3>
 800d5e4:	9015      	str	r0, [sp, #84]	; 0x54
    t[14] = MASK_21 & (load_4(s + 36) >> 6);
 800d5e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d5ea:	f7fe f84d 	bl	800b688 <load_4>
 800d5ee:	4605      	mov	r5, r0
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 800d5f0:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800d5f4:	f7fe f83e 	bl	800b674 <load_3>
 800d5f8:	9016      	str	r0, [sp, #88]	; 0x58
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 800d5fa:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800d5fe:	f7fe f839 	bl	800b674 <load_3>
 800d602:	9001      	str	r0, [sp, #4]
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 800d604:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800d608:	f7fe f83e 	bl	800b688 <load_4>
 800d60c:	9017      	str	r0, [sp, #92]	; 0x5c
    t[18] = MASK_21 & (load_3(s + 47) >> 2);
 800d60e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 800d612:	f7fe f82f 	bl	800b674 <load_3>
 800d616:	f3c0 0994 	ubfx	r9, r0, #2, #21
    t[19] = MASK_21 & (load_4(s + 49) >> 7);
 800d61a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800d61e:	f7fe f833 	bl	800b688 <load_4>
 800d622:	f3c0 1ad4 	ubfx	sl, r0, #7, #21
    t[20] = MASK_21 & (load_4(s + 52) >> 4);
 800d626:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800d62a:	f7fe f82d 	bl	800b688 <load_4>
 800d62e:	f3c0 1714 	ubfx	r7, r0, #4, #21
    t[21] = MASK_21 & (load_3(s + 55) >> 1);
 800d632:	f104 0037 	add.w	r0, r4, #55	; 0x37
 800d636:	f7fe f81d 	bl	800b674 <load_3>
 800d63a:	f3c0 0854 	ubfx	r8, r0, #1, #21
    t[22] = MASK_21 & (load_4(s + 57) >> 6);
 800d63e:	f104 0039 	add.w	r0, r4, #57	; 0x39
 800d642:	f7fe f821 	bl	800b688 <load_4>
 800d646:	f3c0 1694 	ubfx	r6, r0, #6, #21
    t[23] =           (load_4(s + 60) >> 3);
 800d64a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800d64e:	f7fe f81b 	bl	800b688 <load_4>
 800d652:	08cb      	lsrs	r3, r1, #3
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 800d65a:	9b01      	ldr	r3, [sp, #4]
    t[16] -= t[23] * ORDER_5;
 800d65c:	f8df c378 	ldr.w	ip, [pc, #888]	; 800d9d8 <sc_reduce+0x47c>
 800d660:	9a00      	ldr	r2, [sp, #0]
    t[14] -= t[23] * ORDER_3;
 800d662:	f8df e378 	ldr.w	lr, [pc, #888]	; 800d9dc <sc_reduce+0x480>
    t[23] =           (load_4(s + 60) >> 3);
 800d666:	ea4b 7b41 	orr.w	fp, fp, r1, lsl #29
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 800d66a:	f3c3 0014 	ubfx	r0, r3, #0, #21
    t[16] -= t[23] * ORDER_5;
 800d66e:	f1cb 0300 	rsb	r3, fp, #0
 800d672:	fb0c 3202 	mla	r2, ip, r2, r3
 800d676:	fbab 310c 	umull	r3, r1, fp, ip
 800d67a:	18c3      	adds	r3, r0, r3
 800d67c:	9302      	str	r3, [sp, #8]
 800d67e:	eb42 0301 	adc.w	r3, r2, r1
    t[14] -= t[23] * ORDER_3;
 800d682:	9a00      	ldr	r2, [sp, #0]
    t[16] -= t[23] * ORDER_5;
 800d684:	9301      	str	r3, [sp, #4]
    t[14] -= t[23] * ORDER_3;
 800d686:	f1cb 0300 	rsb	r3, fp, #0
 800d68a:	fb0e 3202 	mla	r2, lr, r2, r3
    t[14] = MASK_21 & (load_4(s + 36) >> 6);
 800d68e:	f3c5 1194 	ubfx	r1, r5, #6, #21
    t[14] -= t[23] * ORDER_3;
 800d692:	fbab 030e 	umull	r0, r3, fp, lr
 800d696:	1809      	adds	r1, r1, r0
 800d698:	eb42 0203 	adc.w	r2, r2, r3
    t[14] -= t[22] * ORDER_4;
 800d69c:	4bd0      	ldr	r3, [pc, #832]	; (800d9e0 <sc_reduce+0x484>)
    t[12] -= t[23] * ORDER_1;
 800d69e:	9d00      	ldr	r5, [sp, #0]
    t[14] -= t[22] * ORDER_4;
 800d6a0:	fba6 0303 	umull	r0, r3, r6, r3
 800d6a4:	1809      	adds	r1, r1, r0
 800d6a6:	eba3 0306 	sub.w	r3, r3, r6
 800d6aa:	eb43 0302 	adc.w	r3, r3, r2
    t[14] -= t[21] * ORDER_5;
 800d6ae:	fba8 020c 	umull	r0, r2, r8, ip
 800d6b2:	1809      	adds	r1, r1, r0
 800d6b4:	eba2 0208 	sub.w	r2, r2, r8
 800d6b8:	eb42 0303 	adc.w	r3, r2, r3
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 800d6bc:	9a05      	ldr	r2, [sp, #20]
    t[14] -= t[21] * ORDER_5;
 800d6be:	9304      	str	r3, [sp, #16]
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 800d6c0:	f3c2 1314 	ubfx	r3, r2, #4, #21
    t[12] -= t[23] * ORDER_1;
 800d6c4:	4ac7      	ldr	r2, [pc, #796]	; (800d9e4 <sc_reduce+0x488>)
    t[14] -= t[21] * ORDER_5;
 800d6c6:	9103      	str	r1, [sp, #12]
    t[12] -= t[23] * ORDER_1;
 800d6c8:	f1cb 0000 	rsb	r0, fp, #0
 800d6cc:	fb02 0105 	mla	r1, r2, r5, r0
 800d6d0:	fbab 0202 	umull	r0, r2, fp, r2
    t[12] -= t[22] * ORDER_2;
 800d6d4:	4dc4      	ldr	r5, [pc, #784]	; (800d9e8 <sc_reduce+0x48c>)
    t[12] -= t[23] * ORDER_1;
 800d6d6:	181b      	adds	r3, r3, r0
 800d6d8:	eb41 0002 	adc.w	r0, r1, r2
    t[12] -= t[22] * ORDER_2;
 800d6dc:	fba6 5205 	umull	r5, r2, r6, r5
 800d6e0:	1b92      	subs	r2, r2, r6
 800d6e2:	195b      	adds	r3, r3, r5
 800d6e4:	eb42 0100 	adc.w	r1, r2, r0
    t[12] -= t[21] * ORDER_3;
 800d6e8:	fba8 020e 	umull	r0, r2, r8, lr
 800d6ec:	181b      	adds	r3, r3, r0
 800d6ee:	eba2 0208 	sub.w	r2, r2, r8
 800d6f2:	eb42 0201 	adc.w	r2, r2, r1
    t[12] -= t[20] * ORDER_4;
 800d6f6:	49ba      	ldr	r1, [pc, #744]	; (800d9e0 <sc_reduce+0x484>)
 800d6f8:	fba7 0101 	umull	r0, r1, r7, r1
 800d6fc:	1bc9      	subs	r1, r1, r7
 800d6fe:	181b      	adds	r3, r3, r0
 800d700:	eb41 0202 	adc.w	r2, r1, r2
    t[12] -= t[19] * ORDER_5;
 800d704:	fbaa 010c 	umull	r0, r1, sl, ip
 800d708:	181b      	adds	r3, r3, r0
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 800d70a:	9807      	ldr	r0, [sp, #28]
    t[12] -= t[19] * ORDER_5;
 800d70c:	9305      	str	r3, [sp, #20]
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 800d70e:	f3c0 1e94 	ubfx	lr, r0, #6, #21
    t[ 6] -= t[18] * ORDER_0;
 800d712:	48b6      	ldr	r0, [pc, #728]	; (800d9ec <sc_reduce+0x490>)
    t[12] -= t[19] * ORDER_5;
 800d714:	eba1 010a 	sub.w	r1, r1, sl
 800d718:	eb41 0302 	adc.w	r3, r1, r2
    t[ 6] -= t[18] * ORDER_0;
 800d71c:	fba9 c100 	umull	ip, r1, r9, r0
    t[12] -= t[19] * ORDER_5;
 800d720:	9306      	str	r3, [sp, #24]
    t[ 6] -= t[18] * ORDER_0;
 800d722:	eb1e 030c 	adds.w	r3, lr, ip
 800d726:	9307      	str	r3, [sp, #28]
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 800d728:	9b08      	ldr	r3, [sp, #32]
    t[ 8] -= t[19] * ORDER_1;
 800d72a:	4aae      	ldr	r2, [pc, #696]	; (800d9e4 <sc_reduce+0x488>)
    t[ 8] -= t[20] * ORDER_0;
 800d72c:	4684      	mov	ip, r0
    t[ 6] -= t[18] * ORDER_0;
 800d72e:	eba1 0109 	sub.w	r1, r1, r9
    t[ 8] -= t[20] * ORDER_0;
 800d732:	fba7 5000 	umull	r5, r0, r7, r0
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 800d736:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 6] -= t[18] * ORDER_0;
 800d73a:	f141 0100 	adc.w	r1, r1, #0
    t[ 8] -= t[20] * ORDER_0;
 800d73e:	1bc0      	subs	r0, r0, r7
 800d740:	195b      	adds	r3, r3, r5
    t[ 8] -= t[19] * ORDER_1;
 800d742:	fbaa 5202 	umull	r5, r2, sl, r2
    t[ 8] -= t[20] * ORDER_0;
 800d746:	f140 0000 	adc.w	r0, r0, #0
    t[ 8] -= t[19] * ORDER_1;
 800d74a:	195b      	adds	r3, r3, r5
    t[ 8] -= t[18] * ORDER_2;
 800d74c:	4da6      	ldr	r5, [pc, #664]	; (800d9e8 <sc_reduce+0x48c>)
    t[ 8] -= t[19] * ORDER_1;
 800d74e:	eba2 020a 	sub.w	r2, r2, sl
 800d752:	eb42 0000 	adc.w	r0, r2, r0
    t[ 8] -= t[18] * ORDER_2;
 800d756:	fba9 5205 	umull	r5, r2, r9, r5
 800d75a:	195b      	adds	r3, r3, r5
 800d75c:	eba2 0209 	sub.w	r2, r2, r9
 800d760:	eb42 0200 	adc.w	r2, r2, r0
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 800d764:	9809      	ldr	r0, [sp, #36]	; 0x24
    t[10] -= t[21] * ORDER_1;
 800d766:	4d9f      	ldr	r5, [pc, #636]	; (800d9e4 <sc_reduce+0x488>)
    t[ 8] -= t[18] * ORDER_2;
 800d768:	9308      	str	r3, [sp, #32]
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 800d76a:	f3c0 0094 	ubfx	r0, r0, #2, #21
    t[10] -= t[22] * ORDER_0;
 800d76e:	fba6 3e0c 	umull	r3, lr, r6, ip
 800d772:	ebae 0e06 	sub.w	lr, lr, r6
 800d776:	18c0      	adds	r0, r0, r3
    t[10] -= t[21] * ORDER_1;
 800d778:	fba8 3505 	umull	r3, r5, r8, r5
    t[10] -= t[22] * ORDER_0;
 800d77c:	f14e 0c00 	adc.w	ip, lr, #0
    t[10] -= t[21] * ORDER_1;
 800d780:	18c0      	adds	r0, r0, r3
    t[10] -= t[20] * ORDER_2;
 800d782:	4b99      	ldr	r3, [pc, #612]	; (800d9e8 <sc_reduce+0x48c>)
    t[10] -= t[21] * ORDER_1;
 800d784:	eba5 0508 	sub.w	r5, r5, r8
 800d788:	eb45 0e0c 	adc.w	lr, r5, ip
    t[10] -= t[20] * ORDER_2;
 800d78c:	fba7 3c03 	umull	r3, ip, r7, r3
 800d790:	ebac 0c07 	sub.w	ip, ip, r7
 800d794:	18c0      	adds	r0, r0, r3
 800d796:	eb4c 050e 	adc.w	r5, ip, lr
    t[10] -= t[19] * ORDER_3;
 800d79a:	f8df e240 	ldr.w	lr, [pc, #576]	; 800d9dc <sc_reduce+0x480>
 800d79e:	fbaa e30e 	umull	lr, r3, sl, lr
 800d7a2:	eba3 030a 	sub.w	r3, r3, sl
 800d7a6:	eb10 000e 	adds.w	r0, r0, lr
 800d7aa:	eb43 0c05 	adc.w	ip, r3, r5
    t[10] -= t[18] * ORDER_4;
 800d7ae:	4b8c      	ldr	r3, [pc, #560]	; (800d9e0 <sc_reduce+0x484>)
 800d7b0:	fba9 e303 	umull	lr, r3, r9, r3
 800d7b4:	eb10 000e 	adds.w	r0, r0, lr
 800d7b8:	eba3 0309 	sub.w	r3, r3, r9
 800d7bc:	eb43 030c 	adc.w	r3, r3, ip
 800d7c0:	9009      	str	r0, [sp, #36]	; 0x24
    t[ 7] -= t[19] * ORDER_0;
 800d7c2:	f8df c228 	ldr.w	ip, [pc, #552]	; 800d9ec <sc_reduce+0x490>
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 800d7c6:	980a      	ldr	r0, [sp, #40]	; 0x28
    t[ 7] -= t[19] * ORDER_0;
 800d7c8:	fbaa 5e0c 	umull	r5, lr, sl, ip
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 800d7cc:	f3c0 00d4 	ubfx	r0, r0, #3, #21
    t[ 7] -= t[19] * ORDER_0;
 800d7d0:	1940      	adds	r0, r0, r5
    t[ 7] -= t[18] * ORDER_1;
 800d7d2:	4d84      	ldr	r5, [pc, #528]	; (800d9e4 <sc_reduce+0x488>)
    t[ 7] -= t[19] * ORDER_0;
 800d7d4:	ebae 0e0a 	sub.w	lr, lr, sl
    t[ 7] -= t[18] * ORDER_1;
 800d7d8:	fba9 5c05 	umull	r5, ip, r9, r5
    t[ 7] -= t[19] * ORDER_0;
 800d7dc:	f14e 0e00 	adc.w	lr, lr, #0
    t[ 7] -= t[18] * ORDER_1;
 800d7e0:	1940      	adds	r0, r0, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800d7e2:	9d07      	ldr	r5, [sp, #28]
 800d7e4:	ea4f 5555 	mov.w	r5, r5, lsr #21
 800d7e8:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
    t[ 7] -= t[18] * ORDER_1;
 800d7ec:	ebac 0c09 	sub.w	ip, ip, r9
 800d7f0:	eb4c 0c0e 	adc.w	ip, ip, lr
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800d7f4:	1940      	adds	r0, r0, r5
 800d7f6:	900a      	str	r0, [sp, #40]	; 0x28
 800d7f8:	eb4c 5061 	adc.w	r0, ip, r1, asr #21
 800d7fc:	900b      	str	r0, [sp, #44]	; 0x2c
    t[ 9] -= t[21] * ORDER_0;
 800d7fe:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 800d9ec <sc_reduce+0x490>
    t[ 9] = MASK_21 & (load_4(s + 23) >> 5);
 800d802:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d804:	f3c0 1154 	ubfx	r1, r0, #5, #21
    t[ 9] -= t[21] * ORDER_0;
 800d808:	fba8 e00c 	umull	lr, r0, r8, ip
 800d80c:	eba0 0008 	sub.w	r0, r0, r8
 800d810:	eb11 010e 	adds.w	r1, r1, lr
 800d814:	f140 0500 	adc.w	r5, r0, #0
    t[ 9] -= t[20] * ORDER_1;
 800d818:	4872      	ldr	r0, [pc, #456]	; (800d9e4 <sc_reduce+0x488>)
 800d81a:	fba7 ec00 	umull	lr, ip, r7, r0
 800d81e:	ebac 0c07 	sub.w	ip, ip, r7
 800d822:	eb11 010e 	adds.w	r1, r1, lr
 800d826:	eb4c 0005 	adc.w	r0, ip, r5
    t[ 9] -= t[19] * ORDER_2;
 800d82a:	4d6f      	ldr	r5, [pc, #444]	; (800d9e8 <sc_reduce+0x48c>)
    t[ 9] -= t[18] * ORDER_3;
 800d82c:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 800d9dc <sc_reduce+0x480>
    t[ 9] -= t[19] * ORDER_2;
 800d830:	fbaa 5c05 	umull	r5, ip, sl, r5
 800d834:	1949      	adds	r1, r1, r5
 800d836:	ebac 0c0a 	sub.w	ip, ip, sl
 800d83a:	eb4c 0c00 	adc.w	ip, ip, r0
    t[ 9] -= t[18] * ORDER_3;
 800d83e:	fba9 050e 	umull	r0, r5, r9, lr
 800d842:	1809      	adds	r1, r1, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800d844:	9808      	ldr	r0, [sp, #32]
 800d846:	ea4f 5050 	mov.w	r0, r0, lsr #21
 800d84a:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
    t[ 9] -= t[18] * ORDER_3;
 800d84e:	eba5 0509 	sub.w	r5, r5, r9
 800d852:	eb45 050c 	adc.w	r5, r5, ip
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800d856:	1809      	adds	r1, r1, r0
 800d858:	eb45 5262 	adc.w	r2, r5, r2, asr #21
 800d85c:	910c      	str	r1, [sp, #48]	; 0x30
    t[11] -= t[23] * ORDER_0;
 800d85e:	9d00      	ldr	r5, [sp, #0]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800d860:	920d      	str	r2, [sp, #52]	; 0x34
    t[11] -= t[23] * ORDER_0;
 800d862:	4962      	ldr	r1, [pc, #392]	; (800d9ec <sc_reduce+0x490>)
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 800d864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    t[11] -= t[23] * ORDER_0;
 800d866:	f1cb 0000 	rsb	r0, fp, #0
 800d86a:	fb01 0005 	mla	r0, r1, r5, r0
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 800d86e:	f3c2 12d4 	ubfx	r2, r2, #7, #21
    t[11] -= t[23] * ORDER_0;
 800d872:	fbab 5101 	umull	r5, r1, fp, r1
 800d876:	1952      	adds	r2, r2, r5
    t[11] -= t[22] * ORDER_1;
 800d878:	4d5a      	ldr	r5, [pc, #360]	; (800d9e4 <sc_reduce+0x488>)
    t[11] -= t[23] * ORDER_0;
 800d87a:	eb40 0001 	adc.w	r0, r0, r1
    t[11] -= t[22] * ORDER_1;
 800d87e:	fba6 5105 	umull	r5, r1, r6, r5
 800d882:	1952      	adds	r2, r2, r5
 800d884:	eba1 0106 	sub.w	r1, r1, r6
 800d888:	eb41 0100 	adc.w	r1, r1, r0
    t[11] -= t[21] * ORDER_2;
 800d88c:	4856      	ldr	r0, [pc, #344]	; (800d9e8 <sc_reduce+0x48c>)
 800d88e:	fba8 0500 	umull	r0, r5, r8, r0
 800d892:	eba5 0508 	sub.w	r5, r5, r8
 800d896:	1812      	adds	r2, r2, r0
 800d898:	eb45 0101 	adc.w	r1, r5, r1
    t[11] -= t[20] * ORDER_3;
 800d89c:	fba7 050e 	umull	r0, r5, r7, lr
 800d8a0:	1812      	adds	r2, r2, r0
 800d8a2:	eba5 0507 	sub.w	r5, r5, r7
 800d8a6:	eb45 0501 	adc.w	r5, r5, r1
    t[11] -= t[19] * ORDER_4;
 800d8aa:	494d      	ldr	r1, [pc, #308]	; (800d9e0 <sc_reduce+0x484>)
 800d8ac:	fbaa 1001 	umull	r1, r0, sl, r1
 800d8b0:	1852      	adds	r2, r2, r1
 800d8b2:	eba0 000a 	sub.w	r0, r0, sl
    t[11] -= t[18] * ORDER_5;
 800d8b6:	f8df a120 	ldr.w	sl, [pc, #288]	; 800d9d8 <sc_reduce+0x47c>
    t[11] -= t[19] * ORDER_4;
 800d8ba:	eb40 0005 	adc.w	r0, r0, r5
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800d8be:	9d09      	ldr	r5, [sp, #36]	; 0x24
    t[11] -= t[18] * ORDER_5;
 800d8c0:	fba9 ec0a 	umull	lr, ip, r9, sl
 800d8c4:	eb12 020e 	adds.w	r2, r2, lr
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800d8c8:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    t[11] -= t[18] * ORDER_5;
 800d8cc:	ebac 0c09 	sub.w	ip, ip, r9
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800d8d0:	ea4e 2ec3 	orr.w	lr, lr, r3, lsl #11
    t[11] -= t[18] * ORDER_5;
 800d8d4:	eb4c 0000 	adc.w	r0, ip, r0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800d8d8:	eb12 020e 	adds.w	r2, r2, lr
 800d8dc:	eb40 5563 	adc.w	r5, r0, r3, asr #21
    t[13] -= t[23] * ORDER_2;
 800d8e0:	f8df c104 	ldr.w	ip, [pc, #260]	; 800d9e8 <sc_reduce+0x48c>
 800d8e4:	9800      	ldr	r0, [sp, #0]
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 800d8e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800d8e8:	920e      	str	r2, [sp, #56]	; 0x38
    t[13] -= t[23] * ORDER_2;
 800d8ea:	f1cb 0200 	rsb	r2, fp, #0
 800d8ee:	fb0c 2100 	mla	r1, ip, r0, r2
    t[13] -= t[22] * ORDER_3;
 800d8f2:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 800d9dc <sc_reduce+0x480>
    t[13] -= t[21] * ORDER_4;
 800d8f6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800d9e0 <sc_reduce+0x484>
    t[13] -= t[23] * ORDER_2;
 800d8fa:	fbab 020c 	umull	r0, r2, fp, ip
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 800d8fe:	f3c3 0354 	ubfx	r3, r3, #1, #21
    t[13] -= t[23] * ORDER_2;
 800d902:	181b      	adds	r3, r3, r0
 800d904:	eb41 0002 	adc.w	r0, r1, r2
    t[13] -= t[22] * ORDER_3;
 800d908:	fba6 210e 	umull	r2, r1, r6, lr
 800d90c:	189b      	adds	r3, r3, r2
 800d90e:	eba1 0106 	sub.w	r1, r1, r6
 800d912:	eb41 0100 	adc.w	r1, r1, r0
    t[13] -= t[21] * ORDER_4;
 800d916:	fba8 2009 	umull	r2, r0, r8, r9
 800d91a:	189a      	adds	r2, r3, r2
 800d91c:	eba0 0008 	sub.w	r0, r0, r8
    t[13] -= t[20] * ORDER_5;
 800d920:	fba7 c30a 	umull	ip, r3, r7, sl
    t[13] -= t[21] * ORDER_4;
 800d924:	eb40 0001 	adc.w	r0, r0, r1
    t[13] -= t[20] * ORDER_5;
 800d928:	1bdf      	subs	r7, r3, r7
 800d92a:	eb12 020c 	adds.w	r2, r2, ip
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800d92e:	9b05      	ldr	r3, [sp, #20]
    t[15] -= t[23] * ORDER_4;
 800d930:	f8dd 8000 	ldr.w	r8, [sp]
    t[13] -= t[20] * ORDER_5;
 800d934:	eb47 0700 	adc.w	r7, r7, r0
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800d938:	9806      	ldr	r0, [sp, #24]
 800d93a:	0d5b      	lsrs	r3, r3, #21
 800d93c:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 800d940:	18d2      	adds	r2, r2, r3
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 800d942:	9b16      	ldr	r3, [sp, #88]	; 0x58
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800d944:	eb47 5760 	adc.w	r7, r7, r0, asr #21
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 800d948:	f3c3 00d4 	ubfx	r0, r3, #3, #21
    t[15] -= t[23] * ORDER_4;
 800d94c:	f1cb 0300 	rsb	r3, fp, #0
 800d950:	fb09 3108 	mla	r1, r9, r8, r3
 800d954:	fbab 3c09 	umull	r3, ip, fp, r9
 800d958:	18c3      	adds	r3, r0, r3
    t[15] -= t[22] * ORDER_5;
 800d95a:	fba6 e00a 	umull	lr, r0, r6, sl
    t[15] -= t[23] * ORDER_4;
 800d95e:	eb41 010c 	adc.w	r1, r1, ip
    t[15] -= t[22] * ORDER_5;
 800d962:	1b86      	subs	r6, r0, r6
 800d964:	eb13 030e 	adds.w	r3, r3, lr
 800d968:	eb46 0601 	adc.w	r6, r6, r1
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800d96c:	9903      	ldr	r1, [sp, #12]
 800d96e:	9804      	ldr	r0, [sp, #16]
    t[ 0] -= t[12] * ORDER_0;
 800d970:	f8df e078 	ldr.w	lr, [pc, #120]	; 800d9ec <sc_reduce+0x490>
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800d974:	0d49      	lsrs	r1, r1, #21
 800d976:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 800d97a:	185b      	adds	r3, r3, r1
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d97c:	9902      	ldr	r1, [sp, #8]
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800d97e:	eb46 5660 	adc.w	r6, r6, r0, asr #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d982:	ea4f 5c51 	mov.w	ip, r1, lsr #21
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 800d986:	9817      	ldr	r0, [sp, #92]	; 0x5c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d988:	9901      	ldr	r1, [sp, #4]
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 800d98a:	f3c0 1054 	ubfx	r0, r0, #5, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d98e:	ea4c 2cc1 	orr.w	ip, ip, r1, lsl #11
 800d992:	eb10 000c 	adds.w	r0, r0, ip
 800d996:	ea4f 5161 	mov.w	r1, r1, asr #21
 800d99a:	9000      	str	r0, [sp, #0]
 800d99c:	f141 0000 	adc.w	r0, r1, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800d9a0:	990e      	ldr	r1, [sp, #56]	; 0x38
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d9a2:	9004      	str	r0, [sp, #16]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800d9a4:	9805      	ldr	r0, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800d9a6:	0d49      	lsrs	r1, r1, #21
 800d9a8:	ea41 21c5 	orr.w	r1, r1, r5, lsl #11
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800d9ac:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800d9b0:	1840      	adds	r0, r0, r1
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800d9b2:	9903      	ldr	r1, [sp, #12]
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800d9b4:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 800d9b8:	ea4c 2cc7 	orr.w	ip, ip, r7, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800d9bc:	ea4f 5565 	mov.w	r5, r5, asr #21
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800d9c0:	f3c1 0114 	ubfx	r1, r1, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800d9c4:	f145 0500 	adc.w	r5, r5, #0
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800d9c8:	157f      	asrs	r7, r7, #21
 800d9ca:	eb11 010c 	adds.w	r1, r1, ip
 800d9ce:	f147 0700 	adc.w	r7, r7, #0
 800d9d2:	9705      	str	r7, [sp, #20]
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d9d4:	9f02      	ldr	r7, [sp, #8]
 800d9d6:	e00b      	b.n	800d9f0 <sc_reduce+0x494>
 800d9d8:	fff59084 	.word	0xfff59084
 800d9dc:	fff0c654 	.word	0xfff0c654
 800d9e0:	ffe215d1 	.word	0xffe215d1
 800d9e4:	ffe72d19 	.word	0xffe72d19
 800d9e8:	ffe9fb68 	.word	0xffe9fb68
 800d9ec:	ffea2c13 	.word	0xffea2c13
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800d9f0:	9101      	str	r1, [sp, #4]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800d9f2:	0d59      	lsrs	r1, r3, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800d9f4:	f3c7 0714 	ubfx	r7, r7, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800d9f8:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800d9fc:	1879      	adds	r1, r7, r1
 800d9fe:	ea4f 5666 	mov.w	r6, r6, asr #21
 800da02:	f146 0700 	adc.w	r7, r6, #0
 800da06:	9706      	str	r7, [sp, #24]
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 800da08:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800da0a:	9102      	str	r1, [sp, #8]
    t[ 0] -= t[12] * ORDER_0;
 800da0c:	fba0 c60e 	umull	ip, r6, r0, lr
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 800da10:	f3c7 0114 	ubfx	r1, r7, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 800da14:	eb11 010c 	adds.w	r1, r1, ip
 800da18:	f1c0 0700 	rsb	r7, r0, #0
 800da1c:	fb0e 7b05 	mla	fp, lr, r5, r7
 800da20:	910f      	str	r1, [sp, #60]	; 0x3c
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 800da22:	9910      	ldr	r1, [sp, #64]	; 0x40
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800da24:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800da28:	f3c2 0214 	ubfx	r2, r2, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 800da2c:	eb4b 0b06 	adc.w	fp, fp, r6
    t[ 1] -= t[12] * ORDER_1;
 800da30:	4eeb      	ldr	r6, [pc, #940]	; (800dde0 <sc_reduce+0x884>)
    t[ 1] -= t[13] * ORDER_0;
 800da32:	fba2 ca0e 	umull	ip, sl, r2, lr
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 800da36:	f3c1 1154 	ubfx	r1, r1, #5, #21
    t[ 1] -= t[12] * ORDER_1;
 800da3a:	fb06 7905 	mla	r9, r6, r5, r7
    t[ 1] -= t[13] * ORDER_0;
 800da3e:	eb11 010c 	adds.w	r1, r1, ip
 800da42:	ebaa 0a02 	sub.w	sl, sl, r2
    t[ 1] -= t[12] * ORDER_1;
 800da46:	fba0 c606 	umull	ip, r6, r0, r6
    t[ 1] -= t[13] * ORDER_0;
 800da4a:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 1] -= t[12] * ORDER_1;
 800da4e:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800da52:	ea4f 5c58 	mov.w	ip, r8, lsr #21
 800da56:	ea4c 2ccb 	orr.w	ip, ip, fp, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 800da5a:	444e      	add	r6, r9
 800da5c:	eb46 060a 	adc.w	r6, r6, sl
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800da60:	eb11 010c 	adds.w	r1, r1, ip
 800da64:	9110      	str	r1, [sp, #64]	; 0x40
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 800da66:	9911      	ldr	r1, [sp, #68]	; 0x44
    t[ 2] -= t[14] * ORDER_0;
 800da68:	f8dd 9014 	ldr.w	r9, [sp, #20]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800da6c:	eb46 566b 	adc.w	r6, r6, fp, asr #21
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 800da70:	f3c1 0b94 	ubfx	fp, r1, #2, #21
    t[ 2] -= t[14] * ORDER_0;
 800da74:	9901      	ldr	r1, [sp, #4]
 800da76:	4249      	negs	r1, r1
 800da78:	4688      	mov	r8, r1
 800da7a:	9103      	str	r1, [sp, #12]
 800da7c:	fb0e 8809 	mla	r8, lr, r9, r8
 800da80:	4671      	mov	r1, lr
 800da82:	f8dd e004 	ldr.w	lr, [sp, #4]
 800da86:	fbae ec01 	umull	lr, ip, lr, r1
 800da8a:	468a      	mov	sl, r1
 800da8c:	eb1b 010e 	adds.w	r1, fp, lr
    t[ 2] -= t[13] * ORDER_1;
 800da90:	f8df b34c 	ldr.w	fp, [pc, #844]	; 800dde0 <sc_reduce+0x884>
    t[ 2] -= t[14] * ORDER_0;
 800da94:	eb48 0c0c 	adc.w	ip, r8, ip
    t[ 2] -= t[13] * ORDER_1;
 800da98:	fba2 980b 	umull	r9, r8, r2, fp
 800da9c:	eb11 0109 	adds.w	r1, r1, r9
 800daa0:	eba8 0802 	sub.w	r8, r8, r2
 800daa4:	eb48 080c 	adc.w	r8, r8, ip
    t[ 2] -= t[12] * ORDER_2;
 800daa8:	f8df c338 	ldr.w	ip, [pc, #824]	; 800dde4 <sc_reduce+0x888>
 800daac:	fb0c 7905 	mla	r9, ip, r5, r7
 800dab0:	fba0 ce0c 	umull	ip, lr, r0, ip
 800dab4:	eb11 010c 	adds.w	r1, r1, ip
 800dab8:	44ce      	add	lr, r9
 800daba:	eb4e 0e08 	adc.w	lr, lr, r8
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800dabe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800dac2:	ea4f 5c58 	mov.w	ip, r8, lsr #21
 800dac6:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
 800daca:	eb11 010c 	adds.w	r1, r1, ip
 800dace:	eb4e 5666 	adc.w	r6, lr, r6, asr #21
 800dad2:	9111      	str	r1, [sp, #68]	; 0x44
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 800dad4:	9912      	ldr	r1, [sp, #72]	; 0x48
    t[ 3] -= t[14] * ORDER_1;
 800dad6:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800dada:	f8dd 9014 	ldr.w	r9, [sp, #20]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800dade:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 800dae2:	f3c1 1cd4 	ubfx	ip, r1, #7, #21
    t[ 3] -= t[15] * ORDER_0;
 800dae6:	fba3 180a 	umull	r1, r8, r3, sl
    t[ 3] -= t[14] * ORDER_1;
 800daea:	fb0b ea09 	mla	sl, fp, r9, lr
 800daee:	f8dd e004 	ldr.w	lr, [sp, #4]
    t[ 3] -= t[15] * ORDER_0;
 800daf2:	eb1c 0c01 	adds.w	ip, ip, r1
 800daf6:	eba8 0803 	sub.w	r8, r8, r3
    t[ 3] -= t[14] * ORDER_1;
 800dafa:	fbae 1e0b 	umull	r1, lr, lr, fp
    t[ 3] -= t[15] * ORDER_0;
 800dafe:	f148 0800 	adc.w	r8, r8, #0
    t[ 3] -= t[14] * ORDER_1;
 800db02:	eb1c 0101 	adds.w	r1, ip, r1
    t[ 3] -= t[13] * ORDER_2;
 800db06:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 800dde4 <sc_reduce+0x888>
    t[ 3] -= t[12] * ORDER_3;
 800db0a:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 800dde8 <sc_reduce+0x88c>
    t[ 3] -= t[13] * ORDER_2;
 800db0e:	fba2 c90c 	umull	ip, r9, r2, ip
    t[ 3] -= t[14] * ORDER_1;
 800db12:	44f2      	add	sl, lr
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800db14:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
    t[ 3] -= t[14] * ORDER_1;
 800db18:	eb4a 0a08 	adc.w	sl, sl, r8
    t[ 3] -= t[13] * ORDER_2;
 800db1c:	eba9 0902 	sub.w	r9, r9, r2
 800db20:	eb11 010c 	adds.w	r1, r1, ip
    t[ 3] -= t[12] * ORDER_3;
 800db24:	fba0 c80b 	umull	ip, r8, r0, fp
    t[ 3] -= t[13] * ORDER_2;
 800db28:	eb49 0a0a 	adc.w	sl, r9, sl
    t[ 3] -= t[12] * ORDER_3;
 800db2c:	fb0b 7905 	mla	r9, fp, r5, r7
 800db30:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800db34:	ea4f 5c5e 	mov.w	ip, lr, lsr #21
 800db38:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 800db3c:	44c8      	add	r8, r9
 800db3e:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800db42:	eb11 0e0c 	adds.w	lr, r1, ip
 800db46:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800db4a:	eb48 5e66 	adc.w	lr, r8, r6, asr #21
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 800db4e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    t[ 4] -= t[16] * ORDER_0;
 800db50:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800db54:	f8dd c008 	ldr.w	ip, [sp, #8]
 800db58:	f8df 8290 	ldr.w	r8, [pc, #656]	; 800ddec <sc_reduce+0x890>
    t[ 4] -= t[14] * ORDER_2;
 800db5c:	f8dd a014 	ldr.w	sl, [sp, #20]
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 800db60:	f3c6 1114 	ubfx	r1, r6, #4, #21
    t[ 4] -= t[16] * ORDER_0;
 800db64:	9e02      	ldr	r6, [sp, #8]
 800db66:	4276      	negs	r6, r6
 800db68:	fb08 6909 	mla	r9, r8, r9, r6
 800db6c:	fbac 8c08 	umull	r8, ip, ip, r8
 800db70:	eb11 0108 	adds.w	r1, r1, r8
 800db74:	eb49 0c0c 	adc.w	ip, r9, ip
    t[ 4] -= t[15] * ORDER_1;
 800db78:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800dde0 <sc_reduce+0x884>
 800db7c:	fba3 8909 	umull	r8, r9, r3, r9
 800db80:	eb11 0108 	adds.w	r1, r1, r8
 800db84:	eba9 0903 	sub.w	r9, r9, r3
    t[ 4] -= t[14] * ORDER_2;
 800db88:	f8dd 800c 	ldr.w	r8, [sp, #12]
    t[ 4] -= t[15] * ORDER_1;
 800db8c:	eb49 090c 	adc.w	r9, r9, ip
    t[ 4] -= t[14] * ORDER_2;
 800db90:	f8df c250 	ldr.w	ip, [pc, #592]	; 800dde4 <sc_reduce+0x888>
 800db94:	fb0c 8a0a 	mla	sl, ip, sl, r8
 800db98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db9c:	fba8 c80c 	umull	ip, r8, r8, ip
 800dba0:	eb11 010c 	adds.w	r1, r1, ip
 800dba4:	44c2      	add	sl, r8
    t[ 4] -= t[13] * ORDER_3;
 800dba6:	fba2 cb0b 	umull	ip, fp, r2, fp
    t[ 4] -= t[14] * ORDER_2;
 800dbaa:	eb4a 0a09 	adc.w	sl, sl, r9
    t[ 4] -= t[13] * ORDER_3;
 800dbae:	ebab 0b02 	sub.w	fp, fp, r2
 800dbb2:	eb11 010c 	adds.w	r1, r1, ip
    t[ 4] -= t[12] * ORDER_4;
 800dbb6:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800ddf0 <sc_reduce+0x894>
    t[ 4] -= t[13] * ORDER_3;
 800dbba:	eb4b 0a0a 	adc.w	sl, fp, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800dbbe:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    t[ 4] -= t[12] * ORDER_4;
 800dbc2:	fb08 7905 	mla	r9, r8, r5, r7
 800dbc6:	fba0 c808 	umull	ip, r8, r0, r8
 800dbca:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800dbce:	ea4f 5c5b 	mov.w	ip, fp, lsr #21
 800dbd2:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 800dbd6:	44c8      	add	r8, r9
 800dbd8:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800dbdc:	eb11 010c 	adds.w	r1, r1, ip
 800dbe0:	9113      	str	r1, [sp, #76]	; 0x4c
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 800dbe2:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[ 5] -= t[17] * ORDER_0;
 800dbe4:	f8dd b010 	ldr.w	fp, [sp, #16]
 800dbe8:	f8dd 9000 	ldr.w	r9, [sp]
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 800dbec:	f3c1 0c54 	ubfx	ip, r1, #1, #21
    t[ 5] -= t[17] * ORDER_0;
 800dbf0:	9900      	ldr	r1, [sp, #0]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800dbf2:	eb48 586e 	adc.w	r8, r8, lr, asr #21
    t[ 5] -= t[17] * ORDER_0;
 800dbf6:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800ddec <sc_reduce+0x890>
 800dbfa:	4249      	negs	r1, r1
 800dbfc:	fb0e 1b0b 	mla	fp, lr, fp, r1
 800dc00:	fba9 e90e 	umull	lr, r9, r9, lr
 800dc04:	eb1c 0c0e 	adds.w	ip, ip, lr
 800dc08:	eb4b 0b09 	adc.w	fp, fp, r9
    t[ 5] -= t[16] * ORDER_1;
 800dc0c:	f8dd e018 	ldr.w	lr, [sp, #24]
 800dc10:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800dde0 <sc_reduce+0x884>
 800dc14:	fb09 6a0e 	mla	sl, r9, lr, r6
 800dc18:	f8dd e008 	ldr.w	lr, [sp, #8]
 800dc1c:	fbae e909 	umull	lr, r9, lr, r9
 800dc20:	eb1c 0e0e 	adds.w	lr, ip, lr
    t[ 5] -= t[15] * ORDER_2;
 800dc24:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 800dde4 <sc_reduce+0x888>
    t[ 5] -= t[16] * ORDER_1;
 800dc28:	44ca      	add	sl, r9
    t[ 5] -= t[15] * ORDER_2;
 800dc2a:	fba3 9c0c 	umull	r9, ip, r3, ip
    t[ 5] -= t[16] * ORDER_1;
 800dc2e:	eb4a 0a0b 	adc.w	sl, sl, fp
    t[ 5] -= t[15] * ORDER_2;
 800dc32:	ebac 0c03 	sub.w	ip, ip, r3
 800dc36:	eb1e 0e09 	adds.w	lr, lr, r9
 800dc3a:	eb4c 0a0a 	adc.w	sl, ip, sl
    t[ 5] -= t[14] * ORDER_3;
 800dc3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dc42:	f8dd b014 	ldr.w	fp, [sp, #20]
 800dc46:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800dde8 <sc_reduce+0x88c>
 800dc4a:	fb0c 9b0b 	mla	fp, ip, fp, r9
 800dc4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dc52:	fba9 c90c 	umull	ip, r9, r9, ip
 800dc56:	eb1e 0c0c 	adds.w	ip, lr, ip
    t[ 5] -= t[13] * ORDER_4;
 800dc5a:	f8df e194 	ldr.w	lr, [pc, #404]	; 800ddf0 <sc_reduce+0x894>
    t[ 5] -= t[14] * ORDER_3;
 800dc5e:	44d9      	add	r9, fp
 800dc60:	eb49 090a 	adc.w	r9, r9, sl
    t[ 5] -= t[13] * ORDER_4;
 800dc64:	fba2 ea0e 	umull	lr, sl, r2, lr
 800dc68:	ebaa 0a02 	sub.w	sl, sl, r2
 800dc6c:	eb1c 0c0e 	adds.w	ip, ip, lr
 800dc70:	eb4a 0909 	adc.w	r9, sl, r9
    t[ 5] -= t[12] * ORDER_5;
 800dc74:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800ddf4 <sc_reduce+0x898>
    t[ 6] -= t[15] * ORDER_3;
 800dc78:	f8df b16c 	ldr.w	fp, [pc, #364]	; 800dde8 <sc_reduce+0x88c>
    t[ 5] -= t[12] * ORDER_5;
 800dc7c:	fb0a 7505 	mla	r5, sl, r5, r7
 800dc80:	fba0 070a 	umull	r0, r7, r0, sl
 800dc84:	eb1c 0c00 	adds.w	ip, ip, r0
 800dc88:	443d      	add	r5, r7
 800dc8a:	eb45 0909 	adc.w	r9, r5, r9
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800dc8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    t[ 6] -= t[17] * ORDER_1;
 800dc90:	9f00      	ldr	r7, [sp, #0]
 800dc92:	4853      	ldr	r0, [pc, #332]	; (800dde0 <sc_reduce+0x884>)
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800dc94:	ea4f 5e55 	mov.w	lr, r5, lsr #21
 800dc98:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
 800dc9c:	eb1c 050e 	adds.w	r5, ip, lr
 800dca0:	9514      	str	r5, [sp, #80]	; 0x50
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dca2:	9d07      	ldr	r5, [sp, #28]
 800dca4:	f3c5 0e14 	ubfx	lr, r5, #0, #21
    t[ 6] -= t[17] * ORDER_1;
 800dca8:	9d04      	ldr	r5, [sp, #16]
 800dcaa:	fb00 1505 	mla	r5, r0, r5, r1
 800dcae:	fba7 c000 	umull	ip, r0, r7, r0
    t[ 6] -= t[16] * ORDER_2;
 800dcb2:	4f4c      	ldr	r7, [pc, #304]	; (800dde4 <sc_reduce+0x888>)
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800dcb4:	eb49 5868 	adc.w	r8, r9, r8, asr #21
    t[ 6] -= t[16] * ORDER_2;
 800dcb8:	f8dd 9018 	ldr.w	r9, [sp, #24]
    t[ 6] -= t[17] * ORDER_1;
 800dcbc:	eb1e 0e0c 	adds.w	lr, lr, ip
    t[ 6] -= t[16] * ORDER_2;
 800dcc0:	f8dd c008 	ldr.w	ip, [sp, #8]
    t[ 6] -= t[17] * ORDER_1;
 800dcc4:	eb45 0500 	adc.w	r5, r5, r0
    t[ 6] -= t[16] * ORDER_2;
 800dcc8:	4638      	mov	r0, r7
 800dcca:	fbac c000 	umull	ip, r0, ip, r0
 800dcce:	fb07 6709 	mla	r7, r7, r9, r6
 800dcd2:	eb1e 0c0c 	adds.w	ip, lr, ip
 800dcd6:	4407      	add	r7, r0
    t[ 6] -= t[15] * ORDER_3;
 800dcd8:	fba3 090b 	umull	r0, r9, r3, fp
    t[ 6] -= t[16] * ORDER_2;
 800dcdc:	eb47 0705 	adc.w	r7, r7, r5
    t[ 6] -= t[15] * ORDER_3;
 800dce0:	eba9 0903 	sub.w	r9, r9, r3
 800dce4:	eb1c 0c00 	adds.w	ip, ip, r0
 800dce8:	eb49 0707 	adc.w	r7, r9, r7
    t[ 6] -= t[14] * ORDER_4;
 800dcec:	9d03      	ldr	r5, [sp, #12]
 800dcee:	f8dd e014 	ldr.w	lr, [sp, #20]
 800dcf2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800ddf0 <sc_reduce+0x894>
 800dcf6:	fb09 5e0e 	mla	lr, r9, lr, r5
 800dcfa:	9d01      	ldr	r5, [sp, #4]
 800dcfc:	fba5 0509 	umull	r0, r5, r5, r9
 800dd00:	eb1c 0000 	adds.w	r0, ip, r0
 800dd04:	4475      	add	r5, lr
    t[ 6] -= t[13] * ORDER_5;
 800dd06:	fba2 c90a 	umull	ip, r9, r2, sl
    t[ 6] -= t[14] * ORDER_4;
 800dd0a:	eb45 0507 	adc.w	r5, r5, r7
    t[ 6] -= t[13] * ORDER_5;
 800dd0e:	eba9 0202 	sub.w	r2, r9, r2
 800dd12:	eb10 0c0c 	adds.w	ip, r0, ip
 800dd16:	eb42 0505 	adc.w	r5, r2, r5
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800dd1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    t[ 7] -= t[17] * ORDER_2;
 800dd1c:	9f04      	ldr	r7, [sp, #16]
    t[ 7] -= t[15] * ORDER_4;
 800dd1e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800ddf0 <sc_reduce+0x894>
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800dd22:	0d50      	lsrs	r0, r2, #21
 800dd24:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
 800dd28:	eb1c 0200 	adds.w	r2, ip, r0
 800dd2c:	9207      	str	r2, [sp, #28]
    t[ 7] -= t[17] * ORDER_2;
 800dd2e:	f8dd c000 	ldr.w	ip, [sp]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800dd34:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    t[ 7] -= t[17] * ORDER_2;
 800dd38:	4d2a      	ldr	r5, [pc, #168]	; (800dde4 <sc_reduce+0x888>)
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dd3a:	f3c2 0214 	ubfx	r2, r2, #0, #21
    t[ 7] -= t[17] * ORDER_2;
 800dd3e:	fb05 1707 	mla	r7, r5, r7, r1
 800dd42:	fbac 5005 	umull	r5, r0, ip, r5
 800dd46:	1952      	adds	r2, r2, r5
    t[ 7] -= t[16] * ORDER_3;
 800dd48:	f8dd c018 	ldr.w	ip, [sp, #24]
 800dd4c:	9d02      	ldr	r5, [sp, #8]
    t[ 7] -= t[17] * ORDER_2;
 800dd4e:	eb47 0700 	adc.w	r7, r7, r0
    t[ 7] -= t[16] * ORDER_3;
 800dd52:	fb0b 6c0c 	mla	ip, fp, ip, r6
 800dd56:	fba5 050b 	umull	r0, r5, r5, fp
 800dd5a:	1812      	adds	r2, r2, r0
 800dd5c:	4465      	add	r5, ip
 800dd5e:	eb45 0507 	adc.w	r5, r5, r7
    t[ 7] -= t[14] * ORDER_5;
 800dd62:	f8dd c014 	ldr.w	ip, [sp, #20]
 800dd66:	9f03      	ldr	r7, [sp, #12]
    t[ 7] -= t[15] * ORDER_4;
 800dd68:	fba3 e909 	umull	lr, r9, r3, r9
    t[ 7] -= t[14] * ORDER_5;
 800dd6c:	fb0a 770c 	mla	r7, sl, ip, r7
 800dd70:	f8dd c004 	ldr.w	ip, [sp, #4]
    t[ 7] -= t[15] * ORDER_4;
 800dd74:	eba9 0903 	sub.w	r9, r9, r3
 800dd78:	eb12 020e 	adds.w	r2, r2, lr
 800dd7c:	eb49 0505 	adc.w	r5, r9, r5
    t[ 7] -= t[14] * ORDER_5;
 800dd80:	fbac 090a 	umull	r0, r9, ip, sl
 800dd84:	1812      	adds	r2, r2, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dd86:	9807      	ldr	r0, [sp, #28]
 800dd88:	ea4f 5050 	mov.w	r0, r0, lsr #21
    t[ 7] -= t[14] * ORDER_5;
 800dd8c:	444f      	add	r7, r9
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dd8e:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
    t[ 7] -= t[14] * ORDER_5;
 800dd92:	eb47 0505 	adc.w	r5, r7, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dd96:	1812      	adds	r2, r2, r0
 800dd98:	9201      	str	r2, [sp, #4]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800dd9a:	9a08      	ldr	r2, [sp, #32]
    t[ 8] -= t[17] * ORDER_3;
 800dd9c:	9f00      	ldr	r7, [sp, #0]
    t[ 8] -= t[16] * ORDER_4;
 800dd9e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800ddf0 <sc_reduce+0x894>
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800dda2:	f3c2 0014 	ubfx	r0, r2, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dda6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dda8:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800ddac:	0d55      	lsrs	r5, r2, #21
 800ddae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ddb0:	ea45 25c2 	orr.w	r5, r5, r2, lsl #11
 800ddb4:	ea4f 5c62 	mov.w	ip, r2, asr #21
    t[ 8] -= t[17] * ORDER_3;
 800ddb8:	9a04      	ldr	r2, [sp, #16]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800ddba:	1940      	adds	r0, r0, r5
 800ddbc:	f14c 0e00 	adc.w	lr, ip, #0
    t[ 8] -= t[17] * ORDER_3;
 800ddc0:	fb0b 1202 	mla	r2, fp, r2, r1
 800ddc4:	fba7 5c0b 	umull	r5, ip, r7, fp
 800ddc8:	4494      	add	ip, r2
    t[ 8] -= t[16] * ORDER_4;
 800ddca:	9f06      	ldr	r7, [sp, #24]
 800ddcc:	9a02      	ldr	r2, [sp, #8]
 800ddce:	fb09 6707 	mla	r7, r9, r7, r6
    t[ 8] -= t[17] * ORDER_3;
 800ddd2:	1940      	adds	r0, r0, r5
    t[ 8] -= t[16] * ORDER_4;
 800ddd4:	fba2 2509 	umull	r2, r5, r2, r9
    t[ 8] -= t[17] * ORDER_3;
 800ddd8:	eb4c 0c0e 	adc.w	ip, ip, lr
    t[ 8] -= t[16] * ORDER_4;
 800dddc:	443d      	add	r5, r7
 800ddde:	e00b      	b.n	800ddf8 <sc_reduce+0x89c>
 800dde0:	ffe72d19 	.word	0xffe72d19
 800dde4:	ffe9fb68 	.word	0xffe9fb68
 800dde8:	fff0c654 	.word	0xfff0c654
 800ddec:	ffea2c13 	.word	0xffea2c13
 800ddf0:	ffe215d1 	.word	0xffe215d1
 800ddf4:	fff59084 	.word	0xfff59084
 800ddf8:	1880      	adds	r0, r0, r2
    t[ 8] -= t[15] * ORDER_5;
 800ddfa:	fba3 2e0a 	umull	r2, lr, r3, sl
    t[ 8] -= t[16] * ORDER_4;
 800ddfe:	eb45 050c 	adc.w	r5, r5, ip
    t[ 8] -= t[15] * ORDER_5;
 800de02:	ebae 0303 	sub.w	r3, lr, r3
 800de06:	1880      	adds	r0, r0, r2
 800de08:	eb43 0505 	adc.w	r5, r3, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800de0c:	9b01      	ldr	r3, [sp, #4]
    t[ 9] -= t[17] * ORDER_4;
 800de0e:	9f04      	ldr	r7, [sp, #16]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800de10:	0d5a      	lsrs	r2, r3, #21
 800de12:	ea42 22c8 	orr.w	r2, r2, r8, lsl #11
 800de16:	1883      	adds	r3, r0, r2
 800de18:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    t[ 9] -= t[17] * ORDER_4;
 800de1c:	fb09 1507 	mla	r5, r9, r7, r1
 800de20:	9f00      	ldr	r7, [sp, #0]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800de22:	9303      	str	r3, [sp, #12]
    t[ 9] -= t[17] * ORDER_4;
 800de24:	fba7 0209 	umull	r0, r2, r7, r9
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    t[ 9] -= t[16] * ORDER_5;
 800de2a:	9f06      	ldr	r7, [sp, #24]
    t[ 8] -= t[15] * ORDER_5;
 800de2c:	46d4      	mov	ip, sl
    t[ 9] -= t[16] * ORDER_5;
 800de2e:	fb0c 6607 	mla	r6, ip, r7, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de32:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 9] -= t[16] * ORDER_5;
 800de36:	9f02      	ldr	r7, [sp, #8]
    t[ 9] -= t[17] * ORDER_4;
 800de38:	181b      	adds	r3, r3, r0
 800de3a:	eb45 0202 	adc.w	r2, r5, r2
    t[ 9] -= t[16] * ORDER_5;
 800de3e:	fba7 750c 	umull	r7, r5, r7, ip
 800de42:	19db      	adds	r3, r3, r7
 800de44:	442e      	add	r6, r5
 800de46:	eb46 0602 	adc.w	r6, r6, r2
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800de4a:	9a03      	ldr	r2, [sp, #12]
 800de4c:	0d50      	lsrs	r0, r2, #21
 800de4e:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
 800de52:	181b      	adds	r3, r3, r0
 800de54:	9302      	str	r3, [sp, #8]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800de56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    t[ 9] -= t[17] * ORDER_4;
 800de58:	46ca      	mov	sl, r9
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800de5a:	f3c3 0914 	ubfx	r9, r3, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de60:	ea4f 5053 	mov.w	r0, r3, lsr #21
 800de64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de66:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800de6a:	ea4f 5563 	mov.w	r5, r3, asr #21
    t[10] -= t[17] * ORDER_5;
 800de6e:	9b04      	ldr	r3, [sp, #16]
 800de70:	fb0c 1103 	mla	r1, ip, r3, r1
 800de74:	9b00      	ldr	r3, [sp, #0]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800de76:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de7a:	eb19 0900 	adds.w	r9, r9, r0
    t[10] -= t[17] * ORDER_5;
 800de7e:	fba3 0c0c 	umull	r0, ip, r3, ip
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de82:	9b02      	ldr	r3, [sp, #8]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de84:	f145 0500 	adc.w	r5, r5, #0
    t[10] -= t[17] * ORDER_5;
 800de88:	eb19 0900 	adds.w	r9, r9, r0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de8c:	ea4f 5053 	mov.w	r0, r3, lsr #21
 800de90:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
    t[10] -= t[17] * ORDER_5;
 800de94:	4461      	add	r1, ip
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800de96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    t[10] -= t[17] * ORDER_5;
 800de98:	eb41 0105 	adc.w	r1, r1, r5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800de9c:	eb19 0900 	adds.w	r9, r9, r0
 800dea0:	eb41 5868 	adc.w	r8, r1, r8, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800dea4:	ea4f 5759 	mov.w	r7, r9, lsr #21
 800dea8:	ea47 27c8 	orr.w	r7, r7, r8, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800deac:	f3c3 0b14 	ubfx	fp, r3, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800deb0:	eb1b 0b07 	adds.w	fp, fp, r7
 800deb4:	ea4f 5668 	mov.w	r6, r8, asr #21
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800deb8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    t[ 0] -= t[12] * ORDER_0;
 800deba:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800e140 <sc_reduce+0xbe4>
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800debe:	f146 0600 	adc.w	r6, r6, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800dec2:	ea4f 535b 	mov.w	r3, fp, lsr #21
 800dec6:	ea43 23c6 	orr.w	r3, r3, r6, lsl #11
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800deca:	f3c7 0014 	ubfx	r0, r7, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800dece:	1576      	asrs	r6, r6, #21
    t[ 0] -= t[12] * ORDER_0;
 800ded0:	425f      	negs	r7, r3
 800ded2:	fb08 7206 	mla	r2, r8, r6, r7
 800ded6:	fba3 1808 	umull	r1, r8, r3, r8
 800deda:	1840      	adds	r0, r0, r1
 800dedc:	eb42 0808 	adc.w	r8, r2, r8
    t[ 1] -= t[12] * ORDER_1;
 800dee0:	4998      	ldr	r1, [pc, #608]	; (800e144 <sc_reduce+0xbe8>)
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800dee2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dee4:	f3c2 0c14 	ubfx	ip, r2, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 800dee8:	fb01 7206 	mla	r2, r1, r6, r7
 800deec:	fba3 1e01 	umull	r1, lr, r3, r1
 800def0:	eb1c 0101 	adds.w	r1, ip, r1
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800def4:	ea4f 5c50 	mov.w	ip, r0, lsr #21
 800def8:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 800defc:	eb42 020e 	adc.w	r2, r2, lr
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800df00:	eb11 010c 	adds.w	r1, r1, ip
 800df04:	eb42 5268 	adc.w	r2, r2, r8, asr #21
 800df08:	f3c0 0814 	ubfx	r8, r0, #0, #21
 800df0c:	f8cd 8000 	str.w	r8, [sp]
    t[ 2] -= t[12] * ORDER_2;
 800df10:	488d      	ldr	r0, [pc, #564]	; (800e148 <sc_reduce+0xbec>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800df12:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    t[ 2] -= t[12] * ORDER_2;
 800df16:	fb00 7506 	mla	r5, r0, r6, r7
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800df1a:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 2] -= t[12] * ORDER_2;
 800df1e:	fba3 0e00 	umull	r0, lr, r3, r0
 800df22:	eb1c 0000 	adds.w	r0, ip, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800df26:	ea4f 5c51 	mov.w	ip, r1, lsr #21
 800df2a:	ea4c 2cc2 	orr.w	ip, ip, r2, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 800df2e:	eb45 0e0e 	adc.w	lr, r5, lr
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800df32:	eb10 000c 	adds.w	r0, r0, ip
 800df36:	eb4e 5e62 	adc.w	lr, lr, r2, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800df3a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    t[ 3] -= t[12] * ORDER_3;
 800df3e:	4a83      	ldr	r2, [pc, #524]	; (800e14c <sc_reduce+0xbf0>)
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800df40:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 3] -= t[12] * ORDER_3;
 800df44:	fb02 7506 	mla	r5, r2, r6, r7
 800df48:	fba3 2802 	umull	r2, r8, r3, r2
 800df4c:	eb1c 0202 	adds.w	r2, ip, r2
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800df50:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    t[ 3] -= t[12] * ORDER_3;
 800df54:	eb45 0508 	adc.w	r5, r5, r8
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800df58:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800df5c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800df60:	eb12 020c 	adds.w	r2, r2, ip
 800df64:	eb45 556e 	adc.w	r5, r5, lr, asr #21
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800df68:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 4] -= t[12] * ORDER_4;
 800df6c:	fb0a 7806 	mla	r8, sl, r6, r7
 800df70:	fba3 ea0a 	umull	lr, sl, r3, sl
 800df74:	eb1c 0c0e 	adds.w	ip, ip, lr
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800df78:	ea4f 5e52 	mov.w	lr, r2, lsr #21
 800df7c:	ea4e 2ec5 	orr.w	lr, lr, r5, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 800df80:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800df84:	eb1c 0e0e 	adds.w	lr, ip, lr
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800df88:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800df8c:	eb48 5865 	adc.w	r8, r8, r5, asr #21
    t[ 5] -= t[12] * ORDER_5;
 800df90:	4d6f      	ldr	r5, [pc, #444]	; (800e150 <sc_reduce+0xbf4>)
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800df92:	f3ca 0c14 	ubfx	ip, sl, #0, #21
    t[ 5] -= t[12] * ORDER_5;
 800df96:	fb05 7606 	mla	r6, r5, r6, r7
 800df9a:	fba3 3705 	umull	r3, r7, r3, r5
 800df9e:	eb1c 0503 	adds.w	r5, ip, r3
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800dfa2:	ea4f 5c5e 	mov.w	ip, lr, lsr #21
 800dfa6:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dfaa:	9b07      	ldr	r3, [sp, #28]
    t[ 5] -= t[12] * ORDER_5;
 800dfac:	eb46 0607 	adc.w	r6, r6, r7
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800dfb0:	eb15 050c 	adds.w	r5, r5, ip
 800dfb4:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800dfb8:	ea4f 5c55 	mov.w	ip, r5, lsr #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dfbc:	9f01      	ldr	r7, [sp, #4]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800dfbe:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dfc2:	f3c3 0614 	ubfx	r6, r3, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800dfc6:	eb16 060c 	adds.w	r6, r6, ip
 800dfca:	ea4f 5368 	mov.w	r3, r8, asr #21
 800dfce:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dfd2:	f3c7 0c14 	ubfx	ip, r7, #0, #21
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dfd6:	0d77      	lsrs	r7, r6, #21
 800dfd8:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 800dfdc:	eb1c 0c07 	adds.w	ip, ip, r7
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800dfe0:	9f03      	ldr	r7, [sp, #12]
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800dfe2:	ea4f 5363 	mov.w	r3, r3, asr #21
 800dfe6:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800dfea:	f3c7 0a14 	ubfx	sl, r7, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dfee:	ea4f 575c 	mov.w	r7, ip, lsr #21
 800dff2:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 800dff6:	eb1a 0a07 	adds.w	sl, sl, r7
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800dffa:	9f02      	ldr	r7, [sp, #8]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800dffc:	ea4f 5363 	mov.w	r3, r3, asr #21
 800e000:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800e004:	f3c7 0814 	ubfx	r8, r7, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800e008:	ea4f 575a 	mov.w	r7, sl, lsr #21
 800e00c:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 800e010:	eb18 0807 	adds.w	r8, r8, r7
 800e014:	ea4f 5363 	mov.w	r3, r3, asr #21
 800e018:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800e01c:	ea4f 5758 	mov.w	r7, r8, lsr #21
 800e020:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e024:	f3c9 0914 	ubfx	r9, r9, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800e028:	eb19 0907 	adds.w	r9, r9, r7
 800e02c:	ea4f 5363 	mov.w	r3, r3, asr #21
 800e030:	f143 0300 	adc.w	r3, r3, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800e034:	f3cb 0714 	ubfx	r7, fp, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e038:	ea4f 5b59 	mov.w	fp, r9, lsr #21
 800e03c:	ea4b 2bc3 	orr.w	fp, fp, r3, lsl #11
    s[ 0] = (byte)(t[ 0] >>  0);
 800e040:	9b00      	ldr	r3, [sp, #0]
 800e042:	7023      	strb	r3, [r4, #0]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e044:	eb17 070b 	adds.w	r7, r7, fp
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800e048:	f3c1 0114 	ubfx	r1, r1, #0, #21
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 800e04c:	f8dd b000 	ldr.w	fp, [sp]
    s[ 1] = (byte)(t[ 0] >>  8);
 800e050:	0a1b      	lsrs	r3, r3, #8
 800e052:	7063      	strb	r3, [r4, #1]
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 800e054:	014b      	lsls	r3, r1, #5
 800e056:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800e05a:	70a3      	strb	r3, [r4, #2]
    s[ 3] = (byte)(t[ 1] >>  3);
 800e05c:	08cb      	lsrs	r3, r1, #3
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800e05e:	f3c0 0014 	ubfx	r0, r0, #0, #21
    s[ 3] = (byte)(t[ 1] >>  3);
 800e062:	70e3      	strb	r3, [r4, #3]
    s[ 4] = (byte)(t[ 1] >> 11);
 800e064:	0acb      	lsrs	r3, r1, #11
 800e066:	7123      	strb	r3, [r4, #4]
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 800e068:	0083      	lsls	r3, r0, #2
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800e06a:	f3c2 0214 	ubfx	r2, r2, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 800e06e:	ea43 41d1 	orr.w	r1, r3, r1, lsr #19
    s[ 6] = (byte)(t[ 2] >>  6);
 800e072:	0983      	lsrs	r3, r0, #6
 800e074:	71a3      	strb	r3, [r4, #6]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 800e076:	01d3      	lsls	r3, r2, #7
 800e078:	ea43 3090 	orr.w	r0, r3, r0, lsr #14
    s[ 8] = (byte)(t[ 3] >>  1);
 800e07c:	0853      	lsrs	r3, r2, #1
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800e07e:	f3ce 0e14 	ubfx	lr, lr, #0, #21
    s[ 8] = (byte)(t[ 3] >>  1);
 800e082:	7223      	strb	r3, [r4, #8]
    s[ 9] = (byte)(t[ 3] >>  9);
 800e084:	0a53      	lsrs	r3, r2, #9
 800e086:	7263      	strb	r3, [r4, #9]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 800e088:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800e08c:	ea43 4252 	orr.w	r2, r3, r2, lsr #17
    s[11] = (byte)(t[ 4] >>  4);
 800e090:	ea4f 131e 	mov.w	r3, lr, lsr #4
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800e094:	f3c5 0514 	ubfx	r5, r5, #0, #21
    s[11] = (byte)(t[ 4] >>  4);
 800e098:	72e3      	strb	r3, [r4, #11]
    s[12] = (byte)(t[ 4] >> 12);
 800e09a:	ea4f 331e 	mov.w	r3, lr, lsr #12
 800e09e:	7323      	strb	r3, [r4, #12]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 800e0a0:	196b      	adds	r3, r5, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800e0a2:	f3c6 0614 	ubfx	r6, r6, #0, #21
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 800e0a6:	ea43 5e1e 	orr.w	lr, r3, lr, lsr #20
    s[14] = (byte)(t[ 5] >>  7);
 800e0aa:	09eb      	lsrs	r3, r5, #7
 800e0ac:	73a3      	strb	r3, [r4, #14]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 800e0ae:	01b3      	lsls	r3, r6, #6
 800e0b0:	ea43 35d5 	orr.w	r5, r3, r5, lsr #15
    s[16] = (byte)(t[ 6] >>  2);
 800e0b4:	08b3      	lsrs	r3, r6, #2
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800e0b6:	f3cc 0c14 	ubfx	ip, ip, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 800e0ba:	7161      	strb	r1, [r4, #5]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 800e0bc:	71e0      	strb	r0, [r4, #7]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 800e0be:	72a2      	strb	r2, [r4, #10]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 800e0c0:	f884 e00d 	strb.w	lr, [r4, #13]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 800e0c4:	73e5      	strb	r5, [r4, #15]
    s[16] = (byte)(t[ 6] >>  2);
 800e0c6:	7423      	strb	r3, [r4, #16]
    s[17] = (byte)(t[ 6] >> 10);
 800e0c8:	0ab3      	lsrs	r3, r6, #10
 800e0ca:	7463      	strb	r3, [r4, #17]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 800e0cc:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800e0d0:	f3ca 0a14 	ubfx	sl, sl, #0, #21
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 800e0d4:	ea43 4696 	orr.w	r6, r3, r6, lsr #18
    s[19] = (byte)(t[ 7] >>  5);
 800e0d8:	ea4f 135c 	mov.w	r3, ip, lsr #5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800e0dc:	f3c8 0814 	ubfx	r8, r8, #0, #21
    s[19] = (byte)(t[ 7] >>  5);
 800e0e0:	74e3      	strb	r3, [r4, #19]
    s[22] = (byte)(t[ 8] >>  8);
 800e0e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800e0e6:	75a3      	strb	r3, [r4, #22]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 800e0e8:	ea4f 1348 	mov.w	r3, r8, lsl #5
    s[21] = (byte)(t[ 8] >>  0);
 800e0ec:	f884 a015 	strb.w	sl, [r4, #21]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 800e0f0:	ea43 4a1a 	orr.w	sl, r3, sl, lsr #16
    s[24] = (byte)(t[ 9] >>  3);
 800e0f4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e0f8:	f3c9 0914 	ubfx	r9, r9, #0, #21
    s[24] = (byte)(t[ 9] >>  3);
 800e0fc:	7623      	strb	r3, [r4, #24]
    s[25] = (byte)(t[ 9] >> 11);
 800e0fe:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 800e102:	7663      	strb	r3, [r4, #25]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 800e104:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800e108:	ea43 48d8 	orr.w	r8, r3, r8, lsr #19
    s[27] = (byte)(t[10] >>  6);
 800e10c:	ea4f 1399 	mov.w	r3, r9, lsr #6
 800e110:	76e3      	strb	r3, [r4, #27]
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 800e112:	01fb      	lsls	r3, r7, #7
 800e114:	ea43 3999 	orr.w	r9, r3, r9, lsr #14
    s[29] = (byte)(t[11] >>  1);
 800e118:	087b      	lsrs	r3, r7, #1
    s[20] = (byte)(t[ 7] >> 13);
 800e11a:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
    s[29] = (byte)(t[11] >>  1);
 800e11e:	7763      	strb	r3, [r4, #29]
    s[30] = (byte)(t[11] >>  9);
 800e120:	0a7b      	lsrs	r3, r7, #9
    s[31] = (byte)(t[11] >> 17);
 800e122:	0c7f      	lsrs	r7, r7, #17
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 800e124:	74a6      	strb	r6, [r4, #18]
    s[20] = (byte)(t[ 7] >> 13);
 800e126:	f884 c014 	strb.w	ip, [r4, #20]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 800e12a:	f884 a017 	strb.w	sl, [r4, #23]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 800e12e:	f884 801a 	strb.w	r8, [r4, #26]
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 800e132:	f884 901c 	strb.w	r9, [r4, #28]
    s[30] = (byte)(t[11] >>  9);
 800e136:	77a3      	strb	r3, [r4, #30]
    s[31] = (byte)(t[11] >> 17);
 800e138:	77e7      	strb	r7, [r4, #31]
}
 800e13a:	b019      	add	sp, #100	; 0x64
 800e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e140:	ffea2c13 	.word	0xffea2c13
 800e144:	ffe72d19 	.word	0xffe72d19
 800e148:	ffe9fb68 	.word	0xffe9fb68
 800e14c:	fff0c654 	.word	0xfff0c654
 800e150:	fff59084 	.word	0xfff59084

0800e154 <sc_muladd>:
{
 800e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e158:	b0b5      	sub	sp, #212	; 0xd4
 800e15a:	4617      	mov	r7, r2
 800e15c:	9000      	str	r0, [sp, #0]
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 800e15e:	4608      	mov	r0, r1
{
 800e160:	461e      	mov	r6, r3
 800e162:	460c      	mov	r4, r1
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 800e164:	f7fd fa86 	bl	800b674 <load_3>
 800e168:	f3c0 0314 	ubfx	r3, r0, #0, #21
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 800e16c:	1ca0      	adds	r0, r4, #2
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 800e16e:	9301      	str	r3, [sp, #4]
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 800e170:	f7fd fa8a 	bl	800b688 <load_4>
 800e174:	f3c0 1354 	ubfx	r3, r0, #5, #21
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 800e178:	1d60      	adds	r0, r4, #5
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 800e17a:	9302      	str	r3, [sp, #8]
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 800e17c:	f7fd fa7a 	bl	800b674 <load_3>
 800e180:	f3c0 0394 	ubfx	r3, r0, #2, #21
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 800e184:	1de0      	adds	r0, r4, #7
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 800e186:	9303      	str	r3, [sp, #12]
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 800e188:	f7fd fa7e 	bl	800b688 <load_4>
 800e18c:	f3c0 13d4 	ubfx	r3, r0, #7, #21
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 800e190:	f104 000a 	add.w	r0, r4, #10
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 800e194:	9304      	str	r3, [sp, #16]
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 800e196:	f7fd fa77 	bl	800b688 <load_4>
 800e19a:	f3c0 1314 	ubfx	r3, r0, #4, #21
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 800e19e:	f104 000d 	add.w	r0, r4, #13
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 800e1a2:	9305      	str	r3, [sp, #20]
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 800e1a4:	f7fd fa66 	bl	800b674 <load_3>
 800e1a8:	f3c0 0354 	ubfx	r3, r0, #1, #21
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 800e1ac:	f104 000f 	add.w	r0, r4, #15
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 800e1b0:	9306      	str	r3, [sp, #24]
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 800e1b2:	f7fd fa69 	bl	800b688 <load_4>
 800e1b6:	f3c0 1394 	ubfx	r3, r0, #6, #21
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 800e1ba:	f104 0012 	add.w	r0, r4, #18
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 800e1be:	9307      	str	r3, [sp, #28]
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 800e1c0:	f7fd fa58 	bl	800b674 <load_3>
 800e1c4:	f3c0 03d4 	ubfx	r3, r0, #3, #21
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 800e1c8:	f104 0015 	add.w	r0, r4, #21
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 800e1cc:	9308      	str	r3, [sp, #32]
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 800e1ce:	f7fd fa51 	bl	800b674 <load_3>
 800e1d2:	f3c0 0314 	ubfx	r3, r0, #0, #21
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 800e1d6:	f104 0017 	add.w	r0, r4, #23
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 800e1da:	9309      	str	r3, [sp, #36]	; 0x24
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 800e1dc:	f7fd fa54 	bl	800b688 <load_4>
 800e1e0:	f3c0 1354 	ubfx	r3, r0, #5, #21
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 800e1e4:	f104 001a 	add.w	r0, r4, #26
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 800e1e8:	930a      	str	r3, [sp, #40]	; 0x28
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 800e1ea:	f7fd fa43 	bl	800b674 <load_3>
 800e1ee:	f3c0 0394 	ubfx	r3, r0, #2, #21
    ad[11] = (word32)(load_4(a + 28) >> 7);
 800e1f2:	f104 001c 	add.w	r0, r4, #28
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 800e1f6:	930b      	str	r3, [sp, #44]	; 0x2c
    ad[11] = (word32)(load_4(a + 28) >> 7);
 800e1f8:	f7fd fa46 	bl	800b688 <load_4>
 800e1fc:	4680      	mov	r8, r0
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 800e1fe:	4638      	mov	r0, r7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 800e200:	911f      	str	r1, [sp, #124]	; 0x7c
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 800e202:	f7fd fa37 	bl	800b674 <load_3>
 800e206:	f3c0 0314 	ubfx	r3, r0, #0, #21
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 800e20a:	1cb8      	adds	r0, r7, #2
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 800e20c:	930c      	str	r3, [sp, #48]	; 0x30
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 800e20e:	f7fd fa3b 	bl	800b688 <load_4>
 800e212:	f3c0 1354 	ubfx	r3, r0, #5, #21
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 800e216:	1d78      	adds	r0, r7, #5
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 800e218:	930d      	str	r3, [sp, #52]	; 0x34
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 800e21a:	f7fd fa2b 	bl	800b674 <load_3>
 800e21e:	f3c0 0394 	ubfx	r3, r0, #2, #21
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 800e222:	1df8      	adds	r0, r7, #7
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 800e224:	930e      	str	r3, [sp, #56]	; 0x38
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 800e226:	f7fd fa2f 	bl	800b688 <load_4>
 800e22a:	f3c0 13d4 	ubfx	r3, r0, #7, #21
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 800e22e:	f107 000a 	add.w	r0, r7, #10
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 800e232:	930f      	str	r3, [sp, #60]	; 0x3c
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 800e234:	f7fd fa28 	bl	800b688 <load_4>
 800e238:	f3c0 1314 	ubfx	r3, r0, #4, #21
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 800e23c:	f107 000d 	add.w	r0, r7, #13
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 800e240:	9310      	str	r3, [sp, #64]	; 0x40
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 800e242:	f7fd fa17 	bl	800b674 <load_3>
 800e246:	f3c0 0354 	ubfx	r3, r0, #1, #21
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 800e24a:	f107 000f 	add.w	r0, r7, #15
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 800e24e:	9311      	str	r3, [sp, #68]	; 0x44
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 800e250:	f7fd fa1a 	bl	800b688 <load_4>
 800e254:	f3c0 1394 	ubfx	r3, r0, #6, #21
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 800e258:	f107 0012 	add.w	r0, r7, #18
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 800e25c:	9312      	str	r3, [sp, #72]	; 0x48
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 800e25e:	f7fd fa09 	bl	800b674 <load_3>
 800e262:	f3c0 03d4 	ubfx	r3, r0, #3, #21
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 800e266:	f107 0015 	add.w	r0, r7, #21
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 800e26a:	9313      	str	r3, [sp, #76]	; 0x4c
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 800e26c:	f7fd fa02 	bl	800b674 <load_3>
 800e270:	f3c0 0314 	ubfx	r3, r0, #0, #21
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 800e274:	f107 0017 	add.w	r0, r7, #23
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 800e278:	9314      	str	r3, [sp, #80]	; 0x50
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 800e27a:	f7fd fa05 	bl	800b688 <load_4>
 800e27e:	f3c0 1354 	ubfx	r3, r0, #5, #21
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 800e282:	f107 001a 	add.w	r0, r7, #26
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 800e286:	9315      	str	r3, [sp, #84]	; 0x54
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 800e288:	f7fd f9f4 	bl	800b674 <load_3>
 800e28c:	f3c0 0394 	ubfx	r3, r0, #2, #21
    bd[11] = (word32)(load_4(b + 28) >> 7);
 800e290:	f107 001c 	add.w	r0, r7, #28
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 800e294:	9316      	str	r3, [sp, #88]	; 0x58
    bd[11] = (word32)(load_4(b + 28) >> 7);
 800e296:	f7fd f9f7 	bl	800b688 <load_4>
 800e29a:	4681      	mov	r9, r0
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 800e29c:	4630      	mov	r0, r6
    bd[11] = (word32)(load_4(b + 28) >> 7);
 800e29e:	460c      	mov	r4, r1
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 800e2a0:	f7fd f9e8 	bl	800b674 <load_3>
 800e2a4:	9017      	str	r0, [sp, #92]	; 0x5c
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 800e2a6:	1cb0      	adds	r0, r6, #2
 800e2a8:	f7fd f9ee 	bl	800b688 <load_4>
 800e2ac:	902a      	str	r0, [sp, #168]	; 0xa8
    cd[ 2] = MASK_21 & (load_3(c +  5) >> 2);
 800e2ae:	1d70      	adds	r0, r6, #5
 800e2b0:	f7fd f9e0 	bl	800b674 <load_3>
 800e2b4:	4682      	mov	sl, r0
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 800e2b6:	1df0      	adds	r0, r6, #7
 800e2b8:	f7fd f9e6 	bl	800b688 <load_4>
 800e2bc:	902b      	str	r0, [sp, #172]	; 0xac
    cd[ 4] = MASK_21 & (load_4(c + 10) >> 4);
 800e2be:	f106 000a 	add.w	r0, r6, #10
 800e2c2:	f7fd f9e1 	bl	800b688 <load_4>
 800e2c6:	4683      	mov	fp, r0
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 800e2c8:	f106 000d 	add.w	r0, r6, #13
 800e2cc:	f7fd f9d2 	bl	800b674 <load_3>
 800e2d0:	902d      	str	r0, [sp, #180]	; 0xb4
    cd[ 6] = MASK_21 & (load_4(c + 15) >> 6);
 800e2d2:	f106 000f 	add.w	r0, r6, #15
 800e2d6:	f7fd f9d7 	bl	800b688 <load_4>
 800e2da:	4605      	mov	r5, r0
    cd[ 7] = MASK_21 & (load_3(c + 18) >> 3);
 800e2dc:	f106 0012 	add.w	r0, r6, #18
 800e2e0:	f7fd f9c8 	bl	800b674 <load_3>
 800e2e4:	902f      	str	r0, [sp, #188]	; 0xbc
    cd[ 8] = MASK_21 & (load_3(c + 21) >> 0);
 800e2e6:	f106 0015 	add.w	r0, r6, #21
 800e2ea:	f7fd f9c3 	bl	800b674 <load_3>
 800e2ee:	901c      	str	r0, [sp, #112]	; 0x70
    cd[ 9] = MASK_21 & (load_4(c + 23) >> 5);
 800e2f0:	f106 0017 	add.w	r0, r6, #23
 800e2f4:	f7fd f9c8 	bl	800b688 <load_4>
 800e2f8:	9031      	str	r0, [sp, #196]	; 0xc4
    cd[10] = MASK_21 & (load_3(c + 26) >> 2);
 800e2fa:	f106 001a 	add.w	r0, r6, #26
 800e2fe:	f7fd f9b9 	bl	800b674 <load_3>
 800e302:	4607      	mov	r7, r0
    cd[11] = (word32)(load_4(c + 28) >> 7);
 800e304:	f106 001c 	add.w	r0, r6, #28
 800e308:	f7fd f9be 	bl	800b688 <load_4>
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 800e30c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    t[ 0] = cd[ 0] + (sword64)ad[ 0] * bd[ 0];
 800e30e:	9e01      	ldr	r6, [sp, #4]
 800e310:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    cd[11] = (word32)(load_4(c + 28) >> 7);
 800e314:	9033      	str	r0, [sp, #204]	; 0xcc
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 800e316:	f3c3 0014 	ubfx	r0, r3, #0, #21
    t[ 0] = cd[ 0] + (sword64)ad[ 0] * bd[ 0];
 800e31a:	2300      	movs	r3, #0
 800e31c:	461a      	mov	r2, r3
 800e31e:	fbe6 020c 	umlal	r0, r2, r6, ip
 800e322:	e9cd 0217 	strd	r0, r2, [sp, #92]	; 0x5c
    t[ 2] = cd[ 2] + (sword64)ad[ 0] * bd[ 2] + (sword64)ad[ 1] * bd[ 1] +
 800e326:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800e32a:	9a01      	ldr	r2, [sp, #4]
    cd[ 2] = MASK_21 & (load_3(c +  5) >> 2);
 800e32c:	f3ca 0094 	ubfx	r0, sl, #2, #21
    t[ 2] = cd[ 2] + (sword64)ad[ 0] * bd[ 2] + (sword64)ad[ 1] * bd[ 1] +
 800e330:	461e      	mov	r6, r3
 800e332:	fbe2 060c 	umlal	r0, r6, r2, ip
 800e336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e338:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e33c:	fbe2 060c 	umlal	r0, r6, r2, ip
 800e340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e342:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e346:	fbe2 060c 	umlal	r0, r6, r2, ip
 800e34a:	9019      	str	r0, [sp, #100]	; 0x64
    t[ 4] = cd[ 4] + (sword64)ad[ 0] * bd[ 4] + (sword64)ad[ 1] * bd[ 3] +
 800e34c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800e350:	9801      	ldr	r0, [sp, #4]
    cd[ 4] = MASK_21 & (load_4(c + 10) >> 4);
 800e352:	f3cb 1214 	ubfx	r2, fp, #4, #21
    t[ 4] = cd[ 4] + (sword64)ad[ 0] * bd[ 4] + (sword64)ad[ 1] * bd[ 3] +
 800e356:	469b      	mov	fp, r3
 800e358:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 800e35c:	9802      	ldr	r0, [sp, #8]
 800e35e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800e362:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 800e366:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e368:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e36c:	fbe0 2b0c 	umlal	r2, fp, r0, ip
                     (sword64)ad[ 2] * bd[ 2] + (sword64)ad[ 3] * bd[ 1] +
 800e370:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e372:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e376:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 800e37a:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e37e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e380:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 800e384:	921a      	str	r2, [sp, #104]	; 0x68
    t[ 6] = cd[ 6] + (sword64)ad[ 0] * bd[ 6] + (sword64)ad[ 1] * bd[ 5] +
 800e386:	9801      	ldr	r0, [sp, #4]
    cd[ 6] = MASK_21 & (load_4(c + 15) >> 6);
 800e388:	f3c5 1294 	ubfx	r2, r5, #6, #21
    t[ 6] = cd[ 6] + (sword64)ad[ 0] * bd[ 6] + (sword64)ad[ 1] * bd[ 5] +
 800e38c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800e38e:	469e      	mov	lr, r3
 800e390:	fbe0 2e05 	umlal	r2, lr, r0, r5
 800e394:	9802      	ldr	r0, [sp, #8]
 800e396:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e398:	fbe0 2e05 	umlal	r2, lr, r0, r5
 800e39c:	9803      	ldr	r0, [sp, #12]
 800e39e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e3a0:	fbe0 2e05 	umlal	r2, lr, r0, r5
                     (sword64)ad[ 2] * bd[ 4] + (sword64)ad[ 3] * bd[ 3] +
 800e3a4:	9d04      	ldr	r5, [sp, #16]
 800e3a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e3a8:	fbe0 2e05 	umlal	r2, lr, r0, r5
 800e3ac:	980e      	ldr	r0, [sp, #56]	; 0x38
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 800e3ae:	9d06      	ldr	r5, [sp, #24]
                     (sword64)ad[ 2] * bd[ 4] + (sword64)ad[ 3] * bd[ 3] +
 800e3b0:	fbe0 2e0c 	umlal	r2, lr, r0, ip
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 800e3b4:	980d      	ldr	r0, [sp, #52]	; 0x34
    t[ 8] = cd[ 8] + (sword64)ad[ 0] * bd[ 8] + (sword64)ad[ 1] * bd[ 7] +
 800e3b6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 800e3ba:	fbe0 2e05 	umlal	r2, lr, r0, r5
 800e3be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e3c0:	9d07      	ldr	r5, [sp, #28]
 800e3c2:	fbe0 2e05 	umlal	r2, lr, r0, r5
 800e3c6:	921b      	str	r2, [sp, #108]	; 0x6c
    cd[ 8] = MASK_21 & (load_3(c + 21) >> 0);
 800e3c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e3ca:	f3c2 0014 	ubfx	r0, r2, #0, #21
    t[ 8] = cd[ 8] + (sword64)ad[ 0] * bd[ 8] + (sword64)ad[ 1] * bd[ 7] +
 800e3ce:	9a01      	ldr	r2, [sp, #4]
 800e3d0:	461d      	mov	r5, r3
 800e3d2:	fbe2 050c 	umlal	r0, r5, r2, ip
 800e3d6:	9a02      	ldr	r2, [sp, #8]
 800e3d8:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800e3dc:	fbe2 050c 	umlal	r0, r5, r2, ip
 800e3e0:	9a03      	ldr	r2, [sp, #12]
 800e3e2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800e3e6:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 2] * bd[ 6] + (sword64)ad[ 3] * bd[ 5] +
 800e3ea:	9a04      	ldr	r2, [sp, #16]
 800e3ec:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800e3f0:	fbe2 050c 	umlal	r0, r5, r2, ip
 800e3f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3f6:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e3fa:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 4] * bd[ 4] + (sword64)ad[ 5] * bd[ 3] +
 800e3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e400:	f8dd c018 	ldr.w	ip, [sp, #24]
 800e404:	fbe2 050c 	umlal	r0, r5, r2, ip
 800e408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e40a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e40e:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 6] * bd[ 2] + (sword64)ad[ 7] * bd[ 1] +
 800e412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e414:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e418:	fbe2 050c 	umlal	r0, r5, r2, ip
 800e41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e41e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e422:	fbe2 050c 	umlal	r0, r5, r2, ip
 800e426:	901c      	str	r0, [sp, #112]	; 0x70
    t[10] = cd[10] + (sword64)ad[ 0] * bd[10] + (sword64)ad[ 1] * bd[ 9] +
 800e428:	9a01      	ldr	r2, [sp, #4]
    cd[10] = MASK_21 & (load_3(c + 26) >> 2);
 800e42a:	f3c7 0094 	ubfx	r0, r7, #2, #21
    t[10] = cd[10] + (sword64)ad[ 0] * bd[10] + (sword64)ad[ 1] * bd[ 9] +
 800e42e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800e430:	469c      	mov	ip, r3
 800e432:	fbe2 0c07 	umlal	r0, ip, r2, r7
 800e436:	9a02      	ldr	r2, [sp, #8]
 800e438:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800e43a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 800e43e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e440:	9a03      	ldr	r2, [sp, #12]
 800e442:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 2] * bd[ 8] + (sword64)ad[ 3] * bd[ 7] +
 800e446:	9a04      	ldr	r2, [sp, #16]
 800e448:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e44a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 800e44e:	9a05      	ldr	r2, [sp, #20]
 800e450:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e452:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 4] * bd[ 6] + (sword64)ad[ 5] * bd[ 5] +
 800e456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e458:	9f06      	ldr	r7, [sp, #24]
 800e45a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 800e45e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e460:	9f07      	ldr	r7, [sp, #28]
 800e462:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 6] * bd[ 4] + (sword64)ad[ 7] * bd[ 3] +
 800e466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e468:	9f08      	ldr	r7, [sp, #32]
 800e46a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 800e46e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e470:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e472:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 8] * bd[ 2] + (sword64)ad[ 9] * bd[ 1] +
 800e476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e478:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e47a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 800e47e:	e9dd 720b 	ldrd	r7, r2, [sp, #44]	; 0x2c
 800e482:	fbe2 0c07 	umlal	r0, ip, r2, r7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 800e486:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 800e488:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bd[11] = (word32)(load_4(b + 28) >> 7);
 800e48a:	ea4f 19d9 	mov.w	r9, r9, lsr #7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 800e48e:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 800e492:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
    bd[11] = (word32)(load_4(b + 28) >> 7);
 800e496:	ea49 6944 	orr.w	r9, r9, r4, lsl #25
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 800e49a:	9a02      	ldr	r2, [sp, #8]
 800e49c:	9c03      	ldr	r4, [sp, #12]
                     (sword64)ad[ 8] * bd[ 2] + (sword64)ad[ 9] * bd[ 1] +
 800e49e:	e9cd 0c1d 	strd	r0, ip, [sp, #116]	; 0x74
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 800e4a2:	fba4 4707 	umull	r4, r7, r4, r7
 800e4a6:	fba2 2009 	umull	r2, r0, r2, r9
 800e4aa:	1912      	adds	r2, r2, r4
 800e4ac:	eb40 0707 	adc.w	r7, r0, r7
 800e4b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e4b2:	9804      	ldr	r0, [sp, #16]
 800e4b4:	fbe0 2704 	umlal	r2, r7, r0, r4
 800e4b8:	4610      	mov	r0, r2
                     (sword64)ad[ 3] * bd[ 9] + (sword64)ad[ 4] * bd[ 8] +
 800e4ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800e4bc:	9a05      	ldr	r2, [sp, #20]
 800e4be:	fbe2 0704 	umlal	r0, r7, r2, r4
 800e4c2:	9a06      	ldr	r2, [sp, #24]
 800e4c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e4c6:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 5] * bd[ 7] + (sword64)ad[ 6] * bd[ 6] +
 800e4ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e4cc:	9c07      	ldr	r4, [sp, #28]
 800e4ce:	fbe2 0704 	umlal	r0, r7, r2, r4
 800e4d2:	9c08      	ldr	r4, [sp, #32]
 800e4d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4d6:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 7] * bd[ 5] + (sword64)ad[ 8] * bd[ 4] +
 800e4da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e4dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    t[14] =          (sword64)ad[ 3] * bd[11] + (sword64)ad[ 4] * bd[10] +
 800e4de:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
                     (sword64)ad[ 7] * bd[ 5] + (sword64)ad[ 8] * bd[ 4] +
 800e4e2:	fbe2 0704 	umlal	r0, r7, r2, r4
 800e4e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e4ea:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 9] * bd[ 3] + (sword64)ad[10] * bd[ 2] +
 800e4ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e4f2:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[11] * bd[ 1];
 800e4f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4f8:	fba2 2408 	umull	r2, r4, r2, r8
                     (sword64)ad[ 9] * bd[ 3] + (sword64)ad[10] * bd[ 2] +
 800e4fc:	1882      	adds	r2, r0, r2
 800e4fe:	eb47 0704 	adc.w	r7, r7, r4
 800e502:	921f      	str	r2, [sp, #124]	; 0x7c
    t[14] =          (sword64)ad[ 3] * bd[11] + (sword64)ad[ 4] * bd[10] +
 800e504:	9c05      	ldr	r4, [sp, #20]
 800e506:	9a04      	ldr	r2, [sp, #16]
 800e508:	fba4 4c0c 	umull	r4, ip, r4, ip
 800e50c:	fba2 2009 	umull	r2, r0, r2, r9
 800e510:	1912      	adds	r2, r2, r4
 800e512:	eb40 000c 	adc.w	r0, r0, ip
 800e516:	9c06      	ldr	r4, [sp, #24]
 800e518:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800e51c:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 5] * bd[ 9] + (sword64)ad[ 6] * bd[ 8] +
 800e520:	9c07      	ldr	r4, [sp, #28]
 800e522:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800e526:	fbe4 200c 	umlal	r2, r0, r4, ip
 800e52a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e52c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e530:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 7] * bd[ 7] + (sword64)ad[ 8] * bd[ 6] +
 800e534:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800e536:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e53a:	fbe4 200c 	umlal	r2, r0, r4, ip
 800e53e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e540:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800e544:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 800e548:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e54a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800e54e:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[11] * bd[ 3];
 800e552:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e554:	fba4 4c08 	umull	r4, ip, r4, r8
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 800e558:	1912      	adds	r2, r2, r4
 800e55a:	9220      	str	r2, [sp, #128]	; 0x80
 800e55c:	eb40 020c 	adc.w	r2, r0, ip
    t[16] =          (sword64)ad[ 5] * bd[11] + (sword64)ad[ 6] * bd[10] +
 800e560:	9c07      	ldr	r4, [sp, #28]
 800e562:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 800e566:	9221      	str	r2, [sp, #132]	; 0x84
    t[16] =          (sword64)ad[ 5] * bd[11] + (sword64)ad[ 6] * bd[10] +
 800e568:	9a06      	ldr	r2, [sp, #24]
 800e56a:	fba4 c40c 	umull	ip, r4, r4, ip
 800e56e:	fba2 2009 	umull	r2, r0, r2, r9
 800e572:	eb12 020c 	adds.w	r2, r2, ip
 800e576:	eb40 0404 	adc.w	r4, r0, r4
 800e57a:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800e57e:	9808      	ldr	r0, [sp, #32]
 800e580:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[ 7] * bd[ 9] + (sword64)ad[ 8] * bd[ 8] +
 800e584:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e586:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e58a:	fbe0 240c 	umlal	r2, r4, r0, ip
 800e58e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e590:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800e594:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 800e598:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e59a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800e59e:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[11] * bd[ 5];
 800e5a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e5a4:	fba0 0c08 	umull	r0, ip, r0, r8
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 800e5a8:	1812      	adds	r2, r2, r0
 800e5aa:	9222      	str	r2, [sp, #136]	; 0x88
 800e5ac:	eb44 020c 	adc.w	r2, r4, ip
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 800e5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 800e5b4:	9223      	str	r2, [sp, #140]	; 0x8c
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 800e5b6:	9a08      	ldr	r2, [sp, #32]
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 800e5b8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 800e5bc:	fba0 0404 	umull	r0, r4, r0, r4
 800e5c0:	fba2 2a09 	umull	r2, sl, r2, r9
 800e5c4:	1812      	adds	r2, r2, r0
 800e5c6:	eb4a 0a04 	adc.w	sl, sl, r4
 800e5ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e5cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e5ce:	fbe0 2a04 	umlal	r2, sl, r0, r4
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 800e5d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e5d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e5d6:	fbe0 2a04 	umlal	r2, sl, r0, r4
                     (sword64)ad[11] * bd[ 7];
 800e5da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e5dc:	fba0 0408 	umull	r0, r4, r0, r8
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 800e5e0:	1812      	adds	r2, r2, r0
 800e5e2:	9224      	str	r2, [sp, #144]	; 0x90
 800e5e4:	eb4a 0204 	adc.w	r2, sl, r4
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 800e5e8:	9816      	ldr	r0, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 800e5ea:	9225      	str	r2, [sp, #148]	; 0x94
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 800e5ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5ee:	fba0 c00c 	umull	ip, r0, r0, ip
 800e5f2:	fba2 2409 	umull	r2, r4, r2, r9
 800e5f6:	eb12 020c 	adds.w	r2, r2, ip
 800e5fa:	eb44 0400 	adc.w	r4, r4, r0
                     (sword64)ad[11] * bd[ 9];
 800e5fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e600:	fba0 0c08 	umull	r0, ip, r0, r8
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 800e604:	1812      	adds	r2, r2, r0
 800e606:	9226      	str	r2, [sp, #152]	; 0x98
 800e608:	eb44 020c 	adc.w	r2, r4, ip
 800e60c:	9227      	str	r2, [sp, #156]	; 0x9c
    t[22] =          (sword64)ad[11] * bd[11];
 800e60e:	fba9 2008 	umull	r2, r0, r9, r8
 800e612:	e9cd 2028 	strd	r2, r0, [sp, #160]	; 0xa0
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 800e616:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    t[ 1] = cd[ 1] + (sword64)ad[ 0] * bd[ 1] + (sword64)ad[ 1] * bd[ 0];
 800e618:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 800e61c:	f3c2 1454 	ubfx	r4, r2, #5, #21
    t[ 1] = cd[ 1] + (sword64)ad[ 0] * bd[ 1] + (sword64)ad[ 1] * bd[ 0];
 800e620:	9a01      	ldr	r2, [sp, #4]
 800e622:	4618      	mov	r0, r3
 800e624:	fbe2 400c 	umlal	r4, r0, r2, ip
 800e628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e62a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e62e:	fbe2 400c 	umlal	r4, r0, r2, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800e632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e634:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800e638:	0d52      	lsrs	r2, r2, #21
 800e63a:	ea42 22cc 	orr.w	r2, r2, ip, lsl #11
 800e63e:	18a2      	adds	r2, r4, r2
 800e640:	922a      	str	r2, [sp, #168]	; 0xa8
 800e642:	eb40 526c 	adc.w	r2, r0, ip, asr #21
 800e646:	9218      	str	r2, [sp, #96]	; 0x60
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 800e648:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    t[ 3] = cd[ 3] + (sword64)ad[ 0] * bd[ 3] + (sword64)ad[ 1] * bd[ 2] +
 800e64a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 800e64c:	f3c2 14d4 	ubfx	r4, r2, #7, #21
    t[ 3] = cd[ 3] + (sword64)ad[ 0] * bd[ 3] + (sword64)ad[ 1] * bd[ 2] +
 800e650:	9a01      	ldr	r2, [sp, #4]
 800e652:	469a      	mov	sl, r3
 800e654:	fbe2 4a00 	umlal	r4, sl, r2, r0
 800e658:	9a02      	ldr	r2, [sp, #8]
 800e65a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e65c:	fbe2 4a00 	umlal	r4, sl, r2, r0
 800e660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e662:	9803      	ldr	r0, [sp, #12]
 800e664:	fbe2 4a00 	umlal	r4, sl, r2, r0
                     (sword64)ad[ 2] * bd[ 1] + (sword64)ad[ 3] * bd[ 0];
 800e668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e66a:	9804      	ldr	r0, [sp, #16]
 800e66c:	fbe2 4a00 	umlal	r4, sl, r2, r0
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800e670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e672:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 800e676:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
 800e67a:	eb14 020c 	adds.w	r2, r4, ip
 800e67e:	922b      	str	r2, [sp, #172]	; 0xac
 800e680:	eb4a 5266 	adc.w	r2, sl, r6, asr #21
 800e684:	922c      	str	r2, [sp, #176]	; 0xb0
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 800e686:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    t[ 5] = cd[ 5] + (sword64)ad[ 0] * bd[ 5] + (sword64)ad[ 1] * bd[ 4] +
 800e688:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 800e68a:	f3c2 0c54 	ubfx	ip, r2, #1, #21
    t[ 5] = cd[ 5] + (sword64)ad[ 0] * bd[ 5] + (sword64)ad[ 1] * bd[ 4] +
 800e68e:	9a01      	ldr	r2, [sp, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	fbe2 c004 	umlal	ip, r0, r2, r4
 800e696:	9a02      	ldr	r2, [sp, #8]
 800e698:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e69a:	fbe2 c004 	umlal	ip, r0, r2, r4
 800e69e:	9a03      	ldr	r2, [sp, #12]
 800e6a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e6a2:	fbe2 c004 	umlal	ip, r0, r2, r4
                     (sword64)ad[ 2] * bd[ 3] + (sword64)ad[ 3] * bd[ 2] +
 800e6a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6a8:	9c04      	ldr	r4, [sp, #16]
 800e6aa:	fbe2 c004 	umlal	ip, r0, r2, r4
 800e6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6b0:	9c05      	ldr	r4, [sp, #20]
 800e6b2:	fbe2 c004 	umlal	ip, r0, r2, r4
                     (sword64)ad[ 4] * bd[ 1] + (sword64)ad[ 5] * bd[ 0];
 800e6b6:	9c06      	ldr	r4, [sp, #24]
 800e6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6ba:	fbe2 c004 	umlal	ip, r0, r2, r4
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800e6be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e6c0:	0d52      	lsrs	r2, r2, #21
 800e6c2:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800e6c6:	eb1c 0202 	adds.w	r2, ip, r2
 800e6ca:	922d      	str	r2, [sp, #180]	; 0xb4
 800e6cc:	eb40 526b 	adc.w	r2, r0, fp, asr #21
 800e6d0:	922e      	str	r2, [sp, #184]	; 0xb8
    cd[ 7] = MASK_21 & (load_3(c + 18) >> 3);
 800e6d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e6d4:	f3c2 06d4 	ubfx	r6, r2, #3, #21
    t[ 7] = cd[ 7] + (sword64)ad[ 0] * bd[ 7] + (sword64)ad[ 1] * bd[ 6] +
 800e6d8:	9a01      	ldr	r2, [sp, #4]
 800e6da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e6dc:	469a      	mov	sl, r3
 800e6de:	fbe2 6a00 	umlal	r6, sl, r2, r0
 800e6e2:	9a02      	ldr	r2, [sp, #8]
 800e6e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e6e6:	fbe2 6a00 	umlal	r6, sl, r2, r0
 800e6ea:	9a03      	ldr	r2, [sp, #12]
 800e6ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e6ee:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 2] * bd[ 5] + (sword64)ad[ 3] * bd[ 4] +
 800e6f2:	9a04      	ldr	r2, [sp, #16]
 800e6f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e6f6:	fbe2 6a00 	umlal	r6, sl, r2, r0
 800e6fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6fc:	9805      	ldr	r0, [sp, #20]
 800e6fe:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 4] * bd[ 3] + (sword64)ad[ 5] * bd[ 2] +
 800e702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e704:	9807      	ldr	r0, [sp, #28]
 800e706:	fbe2 6a04 	umlal	r6, sl, r2, r4
 800e70a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    t[ 9] = cd[ 9] + (sword64)ad[ 0] * bd[ 9] + (sword64)ad[ 1] * bd[ 8] +
 800e70c:	9c15      	ldr	r4, [sp, #84]	; 0x54
                     (sword64)ad[ 4] * bd[ 3] + (sword64)ad[ 5] * bd[ 2] +
 800e70e:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 6] * bd[ 1] + (sword64)ad[ 7] * bd[ 0];
 800e712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e714:	9808      	ldr	r0, [sp, #32]
 800e716:	fbe2 6a00 	umlal	r6, sl, r2, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800e71a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e71c:	0d50      	lsrs	r0, r2, #21
 800e71e:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
 800e722:	1832      	adds	r2, r6, r0
 800e724:	922f      	str	r2, [sp, #188]	; 0xbc
 800e726:	eb4a 526e 	adc.w	r2, sl, lr, asr #21
 800e72a:	9230      	str	r2, [sp, #192]	; 0xc0
    cd[ 9] = MASK_21 & (load_4(c + 23) >> 5);
 800e72c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800e72e:	f3c2 1054 	ubfx	r0, r2, #5, #21
    t[ 9] = cd[ 9] + (sword64)ad[ 0] * bd[ 9] + (sword64)ad[ 1] * bd[ 8] +
 800e732:	9a01      	ldr	r2, [sp, #4]
 800e734:	fbe2 0304 	umlal	r0, r3, r2, r4
 800e738:	469b      	mov	fp, r3
 800e73a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e73c:	9b02      	ldr	r3, [sp, #8]
 800e73e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 800e742:	9b03      	ldr	r3, [sp, #12]
 800e744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e746:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 2] * bd[ 7] + (sword64)ad[ 3] * bd[ 6] +
 800e74a:	9b04      	ldr	r3, [sp, #16]
 800e74c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e74e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 800e752:	9b05      	ldr	r3, [sp, #20]
 800e754:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e756:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 4] * bd[ 5] + (sword64)ad[ 5] * bd[ 4] +
 800e75a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e75c:	9a06      	ldr	r2, [sp, #24]
 800e75e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 800e762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e764:	9a07      	ldr	r2, [sp, #28]
 800e766:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 6] * bd[ 3] + (sword64)ad[ 7] * bd[ 2] +
 800e76a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e76c:	9a08      	ldr	r2, [sp, #32]
 800e76e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 800e772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e776:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 8] * bd[ 1] + (sword64)ad[ 9] * bd[ 0];
 800e77a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e77e:	fbe3 0b02 	umlal	r0, fp, r3, r2
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800e782:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e784:	0d5b      	lsrs	r3, r3, #21
 800e786:	ea43 23c5 	orr.w	r3, r3, r5, lsl #11
 800e78a:	18c3      	adds	r3, r0, r3
 800e78c:	9331      	str	r3, [sp, #196]	; 0xc4
 800e78e:	eb4b 5365 	adc.w	r3, fp, r5, asr #21
 800e792:	9332      	str	r3, [sp, #200]	; 0xc8
    cd[11] = (word32)(load_4(c + 28) >> 7);
 800e794:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    t[16] -= t[23] * ORDER_5;
 800e796:	f8df b304 	ldr.w	fp, [pc, #772]	; 800ea9c <sc_muladd+0x948>
    cd[11] = (word32)(load_4(c + 28) >> 7);
 800e79a:	09da      	lsrs	r2, r3, #7
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 800e79c:	9b01      	ldr	r3, [sp, #4]
    cd[11] = (word32)(load_4(c + 28) >> 7);
 800e79e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 800e7a2:	fba3 0309 	umull	r0, r3, r3, r9
 800e7a6:	1815      	adds	r5, r2, r0
 800e7a8:	f143 0c00 	adc.w	ip, r3, #0
 800e7ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7ae:	9b02      	ldr	r3, [sp, #8]
 800e7b0:	fbe3 5c02 	umlal	r5, ip, r3, r2
 800e7b4:	9b03      	ldr	r3, [sp, #12]
                     (sword64)ad[ 2] * bd[ 9] + (sword64)ad[ 3] * bd[ 8] +
 800e7b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 800e7b8:	fbe3 5c04 	umlal	r5, ip, r3, r4
                     (sword64)ad[ 2] * bd[ 9] + (sword64)ad[ 3] * bd[ 8] +
 800e7bc:	9b04      	ldr	r3, [sp, #16]
 800e7be:	fbe3 5c02 	umlal	r5, ip, r3, r2
 800e7c2:	9b05      	ldr	r3, [sp, #20]
 800e7c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e7c6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 4] * bd[ 7] + (sword64)ad[ 5] * bd[ 6] +
 800e7ca:	9b06      	ldr	r3, [sp, #24]
 800e7cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7ce:	fbe3 5c02 	umlal	r5, ip, r3, r2
 800e7d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7d4:	9a07      	ldr	r2, [sp, #28]
 800e7d6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 6] * bd[ 5] + (sword64)ad[ 7] * bd[ 4] +
 800e7da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7dc:	9a08      	ldr	r2, [sp, #32]
 800e7de:	fbe3 5c02 	umlal	r5, ip, r3, r2
 800e7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 8] * bd[ 3] + (sword64)ad[ 9] * bd[ 2] +
 800e7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7ee:	fbe3 5c02 	umlal	r5, ip, r3, r2
 800e7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7f6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 800e7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7fc:	fba3 0e08 	umull	r0, lr, r3, r8
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e800:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 800e802:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 800e804:	182d      	adds	r5, r5, r0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e806:	ea4f 5053 	mov.w	r0, r3, lsr #21
 800e80a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e80c:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 800e810:	eb4c 0c0e 	adc.w	ip, ip, lr
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800e814:	182b      	adds	r3, r5, r0
 800e816:	9333      	str	r3, [sp, #204]	; 0xcc
 800e818:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e81a:	eb4c 5e63 	adc.w	lr, ip, r3, asr #21
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 800e81e:	9b03      	ldr	r3, [sp, #12]
 800e820:	fba3 0209 	umull	r0, r2, r3, r9
 800e824:	9b04      	ldr	r3, [sp, #16]
 800e826:	fba3 3101 	umull	r3, r1, r3, r1
 800e82a:	18c0      	adds	r0, r0, r3
 800e82c:	eb42 0601 	adc.w	r6, r2, r1
 800e830:	9a05      	ldr	r2, [sp, #20]
                     (sword64)ad[ 4] * bd[ 9] + (sword64)ad[ 5] * bd[ 8] +
 800e832:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 800e834:	4603      	mov	r3, r0
 800e836:	fbe2 3604 	umlal	r3, r6, r2, r4
                     (sword64)ad[ 4] * bd[ 9] + (sword64)ad[ 5] * bd[ 8] +
 800e83a:	9a06      	ldr	r2, [sp, #24]
 800e83c:	fbe2 3601 	umlal	r3, r6, r2, r1
 800e840:	9a07      	ldr	r2, [sp, #28]
 800e842:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e844:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[ 6] * bd[ 7] + (sword64)ad[ 7] * bd[ 6] +
 800e848:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e84a:	9908      	ldr	r1, [sp, #32]
 800e84c:	fbe2 3601 	umlal	r3, r6, r2, r1
 800e850:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e852:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e854:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[ 8] * bd[ 5] + (sword64)ad[ 9] * bd[ 4] +
 800e858:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e85a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e85c:	fbe2 3601 	umlal	r3, r6, r2, r1
 800e860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e864:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 800e868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 800e86a:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 800e86c:	fba2 0508 	umull	r0, r5, r2, r8
 800e870:	1818      	adds	r0, r3, r0
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800e872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e874:	ea4f 5353 	mov.w	r3, r3, lsr #21
 800e878:	ea43 23c7 	orr.w	r3, r3, r7, lsl #11
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 800e87c:	eb46 0605 	adc.w	r6, r6, r5
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800e880:	18c3      	adds	r3, r0, r3
 800e882:	931e      	str	r3, [sp, #120]	; 0x78
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 800e884:	9b05      	ldr	r3, [sp, #20]
 800e886:	fba3 0209 	umull	r0, r2, r3, r9
 800e88a:	9b06      	ldr	r3, [sp, #24]
 800e88c:	fba3 3101 	umull	r3, r1, r3, r1
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800e890:	eb46 5667 	adc.w	r6, r6, r7, asr #21
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 800e894:	18c0      	adds	r0, r0, r3
 800e896:	9b07      	ldr	r3, [sp, #28]
 800e898:	eb42 0201 	adc.w	r2, r2, r1
 800e89c:	fbe3 0204 	umlal	r0, r2, r3, r4
                     (sword64)ad[ 6] * bd[ 9] + (sword64)ad[ 7] * bd[ 8] +
 800e8a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e8a2:	9b08      	ldr	r3, [sp, #32]
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 800e8a4:	4605      	mov	r5, r0
                     (sword64)ad[ 6] * bd[ 9] + (sword64)ad[ 7] * bd[ 8] +
 800e8a6:	fbe3 5201 	umlal	r5, r2, r3, r1
 800e8aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e8ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8ae:	fbe3 5201 	umlal	r5, r2, r3, r1
                     (sword64)ad[ 8] * bd[ 7] + (sword64)ad[ 9] * bd[ 6] +
 800e8b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e8b6:	fbe3 5201 	umlal	r5, r2, r3, r1
 800e8ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8be:	fbe3 5201 	umlal	r5, r2, r3, r1
                     (sword64)ad[10] * bd[ 5] + (sword64)ad[11] * bd[ 4];
 800e8c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 800e8c4:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 5] + (sword64)ad[11] * bd[ 4];
 800e8c6:	fba3 0308 	umull	r0, r3, r3, r8
 800e8ca:	182d      	adds	r5, r5, r0
 800e8cc:	eb42 0203 	adc.w	r2, r2, r3
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800e8d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8d2:	0d58      	lsrs	r0, r3, #21
 800e8d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8d6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800e8da:	182b      	adds	r3, r5, r0
 800e8dc:	9310      	str	r3, [sp, #64]	; 0x40
 800e8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8e0:	eb42 5263 	adc.w	r2, r2, r3, asr #21
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 800e8e4:	9b07      	ldr	r3, [sp, #28]
 800e8e6:	fba3 0c09 	umull	r0, ip, r3, r9
 800e8ea:	9b08      	ldr	r3, [sp, #32]
 800e8ec:	fba3 3101 	umull	r3, r1, r3, r1
 800e8f0:	18c3      	adds	r3, r0, r3
 800e8f2:	eb4c 0c01 	adc.w	ip, ip, r1
 800e8f6:	9909      	ldr	r1, [sp, #36]	; 0x24
                     (sword64)ad[ 8] * bd[ 9] + (sword64)ad[ 9] * bd[ 8] +
 800e8f8:	980a      	ldr	r0, [sp, #40]	; 0x28
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 800e8fa:	fbe1 3c04 	umlal	r3, ip, r1, r4
                     (sword64)ad[ 8] * bd[ 9] + (sword64)ad[ 9] * bd[ 8] +
 800e8fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e900:	fbe1 3c00 	umlal	r3, ip, r1, r0
 800e904:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e906:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e908:	fbe1 3c00 	umlal	r3, ip, r1, r0
                     (sword64)ad[10] * bd[ 7] + (sword64)ad[11] * bd[ 6];
 800e90c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e90e:	fba1 0108 	umull	r0, r1, r1, r8
 800e912:	1818      	adds	r0, r3, r0
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800e914:	9b22      	ldr	r3, [sp, #136]	; 0x88
                     (sword64)ad[10] * bd[ 7] + (sword64)ad[11] * bd[ 6];
 800e916:	eb4c 0c01 	adc.w	ip, ip, r1
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800e91a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800e91c:	0d5b      	lsrs	r3, r3, #21
 800e91e:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 800e922:	18c3      	adds	r3, r0, r3
 800e924:	eb4c 5c61 	adc.w	ip, ip, r1, asr #21
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 800e928:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e92a:	990a      	ldr	r1, [sp, #40]	; 0x28
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800e92c:	9311      	str	r3, [sp, #68]	; 0x44
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 800e92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e930:	fba1 0100 	umull	r0, r1, r1, r0
 800e934:	fba3 3a09 	umull	r3, sl, r3, r9
 800e938:	181b      	adds	r3, r3, r0
 800e93a:	eb4a 0a01 	adc.w	sl, sl, r1
 800e93e:	980b      	ldr	r0, [sp, #44]	; 0x2c
                     (sword64)ad[10] * bd[ 9] + (sword64)ad[11] * bd[ 8];
 800e940:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 800e942:	fbe4 3a00 	umlal	r3, sl, r4, r0
                     (sword64)ad[10] * bd[ 9] + (sword64)ad[11] * bd[ 8];
 800e946:	fba1 0108 	umull	r0, r1, r1, r8
 800e94a:	181b      	adds	r3, r3, r0
 800e94c:	eb4a 0a01 	adc.w	sl, sl, r1
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 800e950:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e952:	9825      	ldr	r0, [sp, #148]	; 0x94
 800e954:	0d49      	lsrs	r1, r1, #21
 800e956:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 800e95a:	185b      	adds	r3, r3, r1
    t[21] =          (sword64)ad[10] * bd[11] + (sword64)ad[11] * bd[10];
 800e95c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e95e:	fba1 9509 	umull	r9, r5, r1, r9
 800e962:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e964:	fba1 1408 	umull	r1, r4, r1, r8
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 800e968:	eb4a 5a60 	adc.w	sl, sl, r0, asr #21
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 800e96c:	9826      	ldr	r0, [sp, #152]	; 0x98
    t[21] =          (sword64)ad[10] * bd[11] + (sword64)ad[11] * bd[10];
 800e96e:	eb19 0101 	adds.w	r1, r9, r1
 800e972:	eb45 0404 	adc.w	r4, r5, r4
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 800e976:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    t[12] -= t[22] * ORDER_2;
 800e978:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800eaa0 <sc_muladd+0x94c>
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 800e97c:	0d40      	lsrs	r0, r0, #21
 800e97e:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 800e982:	1809      	adds	r1, r1, r0
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 800e984:	9828      	ldr	r0, [sp, #160]	; 0xa0
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 800e986:	eb44 5465 	adc.w	r4, r4, r5, asr #21
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 800e98a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800e98c:	0d40      	lsrs	r0, r0, #21
 800e98e:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 800e992:	9005      	str	r0, [sp, #20]
 800e994:	1568      	asrs	r0, r5, #21
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 800e996:	9d11      	ldr	r5, [sp, #68]	; 0x44
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 800e998:	900f      	str	r0, [sp, #60]	; 0x3c
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 800e99a:	9824      	ldr	r0, [sp, #144]	; 0x90
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 800e99c:	0d6d      	lsrs	r5, r5, #21
 800e99e:	ea45 25cc 	orr.w	r5, r5, ip, lsl #11
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 800e9a2:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 800e9a6:	1940      	adds	r0, r0, r5
 800e9a8:	ea4f 5c6c 	mov.w	ip, ip, asr #21
 800e9ac:	9006      	str	r0, [sp, #24]
 800e9ae:	f14c 0000 	adc.w	r0, ip, #0
 800e9b2:	900c      	str	r0, [sp, #48]	; 0x30
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 800e9b4:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e9b6:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[19] >> 21; t[20] += carry; t[19] &= MASK_21;
 800e9ba:	0d58      	lsrs	r0, r3, #21
 800e9bc:	ea40 20ca 	orr.w	r0, r0, sl, lsl #11
 800e9c0:	1828      	adds	r0, r5, r0
 800e9c2:	ea4f 5a6a 	mov.w	sl, sl, asr #21
 800e9c6:	9007      	str	r0, [sp, #28]
 800e9c8:	f14a 0000 	adc.w	r0, sl, #0
 800e9cc:	900d      	str	r0, [sp, #52]	; 0x34
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 800e9ce:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800e9d0:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[21] >> 21; t[22] += carry; t[21] &= MASK_21;
 800e9d4:	0d48      	lsrs	r0, r1, #21
 800e9d6:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 800e9da:	1828      	adds	r0, r5, r0
 800e9dc:	ea4f 5464 	mov.w	r4, r4, asr #21
 800e9e0:	9008      	str	r0, [sp, #32]
 800e9e2:	f144 0000 	adc.w	r0, r4, #0
 800e9e6:	900e      	str	r0, [sp, #56]	; 0x38
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800e9e8:	9822      	ldr	r0, [sp, #136]	; 0x88
    t[16] -= t[23] * ORDER_5;
 800e9ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800e9ec:	f3c0 0714 	ubfx	r7, r0, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800e9f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e9f2:	0d40      	lsrs	r0, r0, #21
 800e9f4:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
 800e9f8:	183f      	adds	r7, r7, r0
    t[16] -= t[23] * ORDER_5;
 800e9fa:	9805      	ldr	r0, [sp, #20]
 800e9fc:	f1c0 0000 	rsb	r0, r0, #0
 800ea00:	9009      	str	r0, [sp, #36]	; 0x24
 800ea02:	fb0b 0504 	mla	r5, fp, r4, r0
 800ea06:	9805      	ldr	r0, [sp, #20]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800ea08:	ea4f 5262 	mov.w	r2, r2, asr #21
    t[16] -= t[23] * ORDER_5;
 800ea0c:	fba0 040b 	umull	r0, r4, r0, fp
 800ea10:	4425      	add	r5, r4
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800ea12:	f142 0200 	adc.w	r2, r2, #0
    t[16] -= t[23] * ORDER_5;
 800ea16:	1838      	adds	r0, r7, r0
 800ea18:	eb45 0202 	adc.w	r2, r5, r2
 800ea1c:	9012      	str	r0, [sp, #72]	; 0x48
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800ea1e:	981e      	ldr	r0, [sp, #120]	; 0x78
    t[16] -= t[23] * ORDER_5;
 800ea20:	9213      	str	r2, [sp, #76]	; 0x4c
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800ea22:	9a20      	ldr	r2, [sp, #128]	; 0x80
    t[14] -= t[23] * ORDER_3;
 800ea24:	9c09      	ldr	r4, [sp, #36]	; 0x24
    t[14] -= t[22] * ORDER_4;
 800ea26:	4f1f      	ldr	r7, [pc, #124]	; (800eaa4 <sc_muladd+0x950>)
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800ea28:	ea4f 5850 	mov.w	r8, r0, lsr #21
 800ea2c:	ea48 28c6 	orr.w	r8, r8, r6, lsl #11
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800ea30:	f3c2 0214 	ubfx	r2, r2, #0, #21
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800ea34:	1575      	asrs	r5, r6, #21
 800ea36:	eb12 0208 	adds.w	r2, r2, r8
 800ea3a:	f145 0000 	adc.w	r0, r5, #0
    t[14] -= t[23] * ORDER_3;
 800ea3e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800eaa8 <sc_muladd+0x954>
 800ea42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea44:	fb08 4605 	mla	r6, r8, r5, r4
 800ea48:	9c05      	ldr	r4, [sp, #20]
 800ea4a:	fba4 4508 	umull	r4, r5, r4, r8
 800ea4e:	1912      	adds	r2, r2, r4
 800ea50:	4435      	add	r5, r6
 800ea52:	eb45 0500 	adc.w	r5, r5, r0
    t[14] -= t[22] * ORDER_4;
 800ea56:	9808      	ldr	r0, [sp, #32]
 800ea58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ea5a:	4240      	negs	r0, r0
 800ea5c:	fb07 0604 	mla	r6, r7, r4, r0
 800ea60:	900a      	str	r0, [sp, #40]	; 0x28
 800ea62:	9808      	ldr	r0, [sp, #32]
    carry = t[21] >> 21; t[22] += carry; t[21] &= MASK_21;
 800ea64:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[14] -= t[22] * ORDER_4;
 800ea68:	fba0 0407 	umull	r0, r4, r0, r7
 800ea6c:	1810      	adds	r0, r2, r0
 800ea6e:	4426      	add	r6, r4
    t[14] -= t[21] * ORDER_5;
 800ea70:	fba1 2c0b 	umull	r2, ip, r1, fp
    t[14] -= t[22] * ORDER_4;
 800ea74:	eb46 0605 	adc.w	r6, r6, r5
    t[14] -= t[21] * ORDER_5;
 800ea78:	ebac 0c01 	sub.w	ip, ip, r1
 800ea7c:	1882      	adds	r2, r0, r2
 800ea7e:	9214      	str	r2, [sp, #80]	; 0x50
 800ea80:	eb4c 0206 	adc.w	r2, ip, r6
 800ea84:	9215      	str	r2, [sp, #84]	; 0x54
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ea86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    t[12] -= t[23] * ORDER_1;
 800ea88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea8a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ea8c:	f3c2 0014 	ubfx	r0, r2, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800ea90:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800ea92:	0d52      	lsrs	r2, r2, #21
 800ea94:	ea42 22ce 	orr.w	r2, r2, lr, lsl #11
 800ea98:	1880      	adds	r0, r0, r2
 800ea9a:	e007      	b.n	800eaac <sc_muladd+0x958>
 800ea9c:	fff59084 	.word	0xfff59084
 800eaa0:	ffe9fb68 	.word	0xffe9fb68
 800eaa4:	ffe215d1 	.word	0xffe215d1
 800eaa8:	fff0c654 	.word	0xfff0c654
    t[12] -= t[23] * ORDER_1;
 800eaac:	4ad1      	ldr	r2, [pc, #836]	; (800edf4 <sc_muladd+0xca0>)
 800eaae:	fb02 5606 	mla	r6, r2, r6, r5
 800eab2:	9d05      	ldr	r5, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800eab4:	ea4f 5c6e 	mov.w	ip, lr, asr #21
 800eab8:	f14c 0400 	adc.w	r4, ip, #0
    t[12] -= t[23] * ORDER_1;
 800eabc:	fba5 5c02 	umull	r5, ip, r5, r2
 800eac0:	1940      	adds	r0, r0, r5
 800eac2:	44b4      	add	ip, r6
    t[12] -= t[22] * ORDER_2;
 800eac4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    t[12] -= t[23] * ORDER_1;
 800eac6:	eb4c 0c04 	adc.w	ip, ip, r4
    t[12] -= t[22] * ORDER_2;
 800eaca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800eacc:	fb09 4605 	mla	r6, r9, r5, r4
 800ead0:	9c08      	ldr	r4, [sp, #32]
 800ead2:	fba4 4509 	umull	r4, r5, r4, r9
 800ead6:	1900      	adds	r0, r0, r4
 800ead8:	442e      	add	r6, r5
    t[12] -= t[20] * ORDER_4;
 800eada:	9c07      	ldr	r4, [sp, #28]
    t[12] -= t[21] * ORDER_3;
 800eadc:	fba1 5a08 	umull	r5, sl, r1, r8
    t[12] -= t[22] * ORDER_2;
 800eae0:	eb46 060c 	adc.w	r6, r6, ip
    t[12] -= t[21] * ORDER_3;
 800eae4:	1940      	adds	r0, r0, r5
    t[12] -= t[20] * ORDER_4;
 800eae6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    t[12] -= t[21] * ORDER_3;
 800eae8:	ebaa 0a01 	sub.w	sl, sl, r1
    t[12] -= t[20] * ORDER_4;
 800eaec:	f1c4 0400 	rsb	r4, r4, #0
    t[12] -= t[21] * ORDER_3;
 800eaf0:	eb4a 0606 	adc.w	r6, sl, r6
    t[12] -= t[20] * ORDER_4;
 800eaf4:	940b      	str	r4, [sp, #44]	; 0x2c
 800eaf6:	fb07 4a05 	mla	sl, r7, r5, r4
 800eafa:	9c07      	ldr	r4, [sp, #28]
    carry = t[19] >> 21; t[20] += carry; t[19] &= MASK_21;
 800eafc:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[12] -= t[20] * ORDER_4;
 800eb00:	fba4 5407 	umull	r5, r4, r4, r7
 800eb04:	1945      	adds	r5, r0, r5
 800eb06:	44a2      	add	sl, r4
    t[12] -= t[19] * ORDER_5;
 800eb08:	fba3 0c0b 	umull	r0, ip, r3, fp
    t[12] -= t[20] * ORDER_4;
 800eb0c:	eb4a 0a06 	adc.w	sl, sl, r6
    t[12] -= t[19] * ORDER_5;
 800eb10:	ebac 0c03 	sub.w	ip, ip, r3
 800eb14:	1828      	adds	r0, r5, r0
 800eb16:	9016      	str	r0, [sp, #88]	; 0x58
 800eb18:	eb4c 000a 	adc.w	r0, ip, sl
 800eb1c:	901f      	str	r0, [sp, #124]	; 0x7c
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800eb1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800eb20:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    t[ 6] -= t[18] * ORDER_0;
 800eb22:	4eb5      	ldr	r6, [pc, #724]	; (800edf8 <sc_muladd+0xca4>)
 800eb24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800eb26:	f3c0 0e14 	ubfx	lr, r0, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800eb2a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800eb2c:	0d40      	lsrs	r0, r0, #21
 800eb2e:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 800eb32:	ea4f 5c64 	mov.w	ip, r4, asr #21
    t[ 6] -= t[18] * ORDER_0;
 800eb36:	9c06      	ldr	r4, [sp, #24]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800eb38:	eb1e 0e00 	adds.w	lr, lr, r0
    t[ 6] -= t[18] * ORDER_0;
 800eb3c:	f1c4 0400 	rsb	r4, r4, #0
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800eb40:	f14c 0000 	adc.w	r0, ip, #0
    t[ 6] -= t[18] * ORDER_0;
 800eb44:	fb06 4c05 	mla	ip, r6, r5, r4
 800eb48:	9d06      	ldr	r5, [sp, #24]
 800eb4a:	fba5 a506 	umull	sl, r5, r5, r6
 800eb4e:	44ac      	add	ip, r5
 800eb50:	eb1e 050a 	adds.w	r5, lr, sl
 800eb54:	eb4c 0c00 	adc.w	ip, ip, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800eb58:	981c      	ldr	r0, [sp, #112]	; 0x70
    t[ 6] -= t[18] * ORDER_0;
 800eb5a:	951b      	str	r5, [sp, #108]	; 0x6c
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800eb5c:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800eb60:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800eb62:	f8dd e0c0 	ldr.w	lr, [sp, #192]	; 0xc0
 800eb66:	0d40      	lsrs	r0, r0, #21
 800eb68:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
 800eb6c:	182d      	adds	r5, r5, r0
 800eb6e:	ea4f 5a6e 	mov.w	sl, lr, asr #21
    t[ 8] -= t[20] * ORDER_0;
 800eb72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eb74:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800eb78:	fb06 0b0e 	mla	fp, r6, lr, r0
 800eb7c:	9807      	ldr	r0, [sp, #28]
 800eb7e:	fba0 0e06 	umull	r0, lr, r0, r6
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800eb82:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 8] -= t[20] * ORDER_0;
 800eb86:	44de      	add	lr, fp
 800eb88:	1828      	adds	r0, r5, r0
 800eb8a:	eb4e 0e0a 	adc.w	lr, lr, sl
    t[ 8] -= t[19] * ORDER_1;
 800eb8e:	fba3 a502 	umull	sl, r5, r3, r2
 800eb92:	eb10 000a 	adds.w	r0, r0, sl
 800eb96:	eba5 0503 	sub.w	r5, r5, r3
 800eb9a:	eb45 050e 	adc.w	r5, r5, lr
    t[ 8] -= t[18] * ORDER_2;
 800eb9e:	f8dd a018 	ldr.w	sl, [sp, #24]
 800eba2:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800eba6:	fbaa ab09 	umull	sl, fp, sl, r9
 800ebaa:	fb09 4e0e 	mla	lr, r9, lr, r4
 800ebae:	eb10 000a 	adds.w	r0, r0, sl
 800ebb2:	44de      	add	lr, fp
 800ebb4:	901c      	str	r0, [sp, #112]	; 0x70
 800ebb6:	eb4e 0005 	adc.w	r0, lr, r5
 800ebba:	9020      	str	r0, [sp, #128]	; 0x80
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800ebbc:	981d      	ldr	r0, [sp, #116]	; 0x74
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800ebbe:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 800ebc0:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
    t[10] -= t[20] * ORDER_2;
 800ebc4:	f8cd 900c 	str.w	r9, [sp, #12]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800ebc8:	0d6d      	lsrs	r5, r5, #21
 800ebca:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800ebce:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800ebd2:	1940      	adds	r0, r0, r5
 800ebd4:	ea4f 5b6e 	mov.w	fp, lr, asr #21
    t[10] -= t[22] * ORDER_0;
 800ebd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ebda:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    t[10] -= t[18] * ORDER_4;
 800ebde:	9702      	str	r7, [sp, #8]
    t[10] -= t[22] * ORDER_0;
 800ebe0:	fb06 5e0e 	mla	lr, r6, lr, r5
 800ebe4:	9d08      	ldr	r5, [sp, #32]
    t[10] -= t[18] * ORDER_4;
 800ebe6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    t[10] -= t[19] * ORDER_3;
 800ebe8:	f8cd 8004 	str.w	r8, [sp, #4]
    t[10] -= t[22] * ORDER_0;
 800ebec:	fba5 5a06 	umull	r5, sl, r5, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800ebf0:	f14b 0b00 	adc.w	fp, fp, #0
    t[10] -= t[22] * ORDER_0;
 800ebf4:	44d6      	add	lr, sl
 800ebf6:	1940      	adds	r0, r0, r5
 800ebf8:	eb4e 0e0b 	adc.w	lr, lr, fp
    t[10] -= t[21] * ORDER_1;
 800ebfc:	fba1 ab02 	umull	sl, fp, r1, r2
    t[10] -= t[20] * ORDER_2;
 800ec00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t[ 7] -= t[19] * ORDER_0;
 800ec02:	9604      	str	r6, [sp, #16]
    t[10] -= t[21] * ORDER_1;
 800ec04:	eb10 000a 	adds.w	r0, r0, sl
    t[10] -= t[20] * ORDER_2;
 800ec08:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800ec0c:	fb09 5a0a 	mla	sl, r9, sl, r5
 800ec10:	9d07      	ldr	r5, [sp, #28]
    t[10] -= t[21] * ORDER_1;
 800ec12:	ebab 0b01 	sub.w	fp, fp, r1
    t[10] -= t[20] * ORDER_2;
 800ec16:	fba5 5909 	umull	r5, r9, r5, r9
    t[10] -= t[21] * ORDER_1;
 800ec1a:	eb4b 0e0e 	adc.w	lr, fp, lr
    t[10] -= t[20] * ORDER_2;
 800ec1e:	44d1      	add	r9, sl
 800ec20:	1940      	adds	r0, r0, r5
 800ec22:	eb49 090e 	adc.w	r9, r9, lr
    t[10] -= t[19] * ORDER_3;
 800ec26:	fba3 e508 	umull	lr, r5, r3, r8
 800ec2a:	eb10 000e 	adds.w	r0, r0, lr
    t[10] -= t[18] * ORDER_4;
 800ec2e:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800edfc <sc_muladd+0xca8>
 800ec32:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800edfc <sc_muladd+0xca8>
 800ec36:	fb0e 4707 	mla	r7, lr, r7, r4
 800ec3a:	f8dd e018 	ldr.w	lr, [sp, #24]
    t[10] -= t[19] * ORDER_3;
 800ec3e:	eba5 0503 	sub.w	r5, r5, r3
    t[10] -= t[18] * ORDER_4;
 800ec42:	fbae e808 	umull	lr, r8, lr, r8
    t[10] -= t[19] * ORDER_3;
 800ec46:	eb45 0509 	adc.w	r5, r5, r9
    t[10] -= t[18] * ORDER_4;
 800ec4a:	eb10 000e 	adds.w	r0, r0, lr
 800ec4e:	901d      	str	r0, [sp, #116]	; 0x74
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800ec50:	982f      	ldr	r0, [sp, #188]	; 0xbc
    t[10] -= t[18] * ORDER_4;
 800ec52:	4447      	add	r7, r8
 800ec54:	eb47 0805 	adc.w	r8, r7, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800ec58:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[ 7] -= t[19] * ORDER_0;
 800ec5c:	fba3 6706 	umull	r6, r7, r3, r6
 800ec60:	1986      	adds	r6, r0, r6
    t[ 7] -= t[18] * ORDER_1;
 800ec62:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ec64:	fb02 4500 	mla	r5, r2, r0, r4
 800ec68:	9806      	ldr	r0, [sp, #24]
    t[ 7] -= t[19] * ORDER_0;
 800ec6a:	eba7 0703 	sub.w	r7, r7, r3
    t[ 7] -= t[18] * ORDER_1;
 800ec6e:	fba0 0e02 	umull	r0, lr, r0, r2
    t[ 7] -= t[19] * ORDER_0;
 800ec72:	f147 0700 	adc.w	r7, r7, #0
    t[ 7] -= t[18] * ORDER_1;
 800ec76:	1830      	adds	r0, r6, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800ec78:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ec7a:	ea4f 5656 	mov.w	r6, r6, lsr #21
 800ec7e:	ea46 26cc 	orr.w	r6, r6, ip, lsl #11
    t[ 7] -= t[18] * ORDER_1;
 800ec82:	4475      	add	r5, lr
 800ec84:	eb45 0507 	adc.w	r5, r5, r7
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800ec88:	1980      	adds	r0, r0, r6
 800ec8a:	9021      	str	r0, [sp, #132]	; 0x84
 800ec8c:	eb45 506c 	adc.w	r0, r5, ip, asr #21
 800ec90:	9022      	str	r0, [sp, #136]	; 0x88
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800ec92:	9831      	ldr	r0, [sp, #196]	; 0xc4
    t[ 9] -= t[20] * ORDER_1;
 800ec94:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800ec96:	f3c0 0514 	ubfx	r5, r0, #0, #21
    t[ 9] -= t[21] * ORDER_0;
 800ec9a:	9804      	ldr	r0, [sp, #16]
 800ec9c:	fba1 0c00 	umull	r0, ip, r1, r0
 800eca0:	182d      	adds	r5, r5, r0
    t[ 9] -= t[20] * ORDER_1;
 800eca2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800eca4:	fb02 0706 	mla	r7, r2, r6, r0
 800eca8:	9807      	ldr	r0, [sp, #28]
    t[ 9] -= t[21] * ORDER_0;
 800ecaa:	ebac 0c01 	sub.w	ip, ip, r1
    t[ 9] -= t[20] * ORDER_1;
 800ecae:	fba0 0602 	umull	r0, r6, r0, r2
    t[ 9] -= t[21] * ORDER_0;
 800ecb2:	f14c 0c00 	adc.w	ip, ip, #0
    t[ 9] -= t[20] * ORDER_1;
 800ecb6:	1828      	adds	r0, r5, r0
    t[ 9] -= t[19] * ORDER_2;
 800ecb8:	4d51      	ldr	r5, [pc, #324]	; (800ee00 <sc_muladd+0xcac>)
    t[ 9] -= t[20] * ORDER_1;
 800ecba:	4437      	add	r7, r6
    t[ 9] -= t[19] * ORDER_2;
 800ecbc:	fba3 5e05 	umull	r5, lr, r3, r5
    t[ 9] -= t[20] * ORDER_1;
 800ecc0:	eb47 070c 	adc.w	r7, r7, ip
    t[ 9] -= t[18] * ORDER_3;
 800ecc4:	4e4f      	ldr	r6, [pc, #316]	; (800ee04 <sc_muladd+0xcb0>)
 800ecc6:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800ee04 <sc_muladd+0xcb0>
    t[ 9] -= t[19] * ORDER_2;
 800ecca:	1940      	adds	r0, r0, r5
    t[ 9] -= t[18] * ORDER_3;
 800eccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecce:	fb06 4505 	mla	r5, r6, r5, r4
 800ecd2:	9e06      	ldr	r6, [sp, #24]
    t[ 9] -= t[19] * ORDER_2;
 800ecd4:	ebae 0e03 	sub.w	lr, lr, r3
    t[ 9] -= t[18] * ORDER_3;
 800ecd8:	fba6 6c0c 	umull	r6, ip, r6, ip
    t[ 9] -= t[19] * ORDER_2;
 800ecdc:	eb4e 0707 	adc.w	r7, lr, r7
    t[ 9] -= t[18] * ORDER_3;
 800ece0:	4465      	add	r5, ip
 800ece2:	1980      	adds	r0, r0, r6
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800ece4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    t[ 9] -= t[18] * ORDER_3;
 800ece6:	eb45 0507 	adc.w	r5, r5, r7
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800ecea:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800ecec:	0d76      	lsrs	r6, r6, #21
 800ecee:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
 800ecf2:	1980      	adds	r0, r0, r6
 800ecf4:	9023      	str	r0, [sp, #140]	; 0x8c
 800ecf6:	eb45 5067 	adc.w	r0, r5, r7, asr #21
 800ecfa:	9020      	str	r0, [sp, #128]	; 0x80
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800ecfc:	9833      	ldr	r0, [sp, #204]	; 0xcc
    t[11] -= t[23] * ORDER_0;
 800ecfe:	9f04      	ldr	r7, [sp, #16]
 800ed00:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800ed02:	f3c0 0514 	ubfx	r5, r0, #0, #21
    t[11] -= t[23] * ORDER_0;
 800ed06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed08:	fb07 0c06 	mla	ip, r7, r6, r0
 800ed0c:	9805      	ldr	r0, [sp, #20]
 800ed0e:	fba0 0607 	umull	r0, r6, r0, r7
 800ed12:	182d      	adds	r5, r5, r0
 800ed14:	eb4c 0c06 	adc.w	ip, ip, r6
    t[11] -= t[22] * ORDER_1;
 800ed18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ed1c:	fb02 0706 	mla	r7, r2, r6, r0
 800ed20:	9808      	ldr	r0, [sp, #32]
 800ed22:	fba0 0602 	umull	r0, r6, r0, r2
 800ed26:	1828      	adds	r0, r5, r0
    t[11] -= t[21] * ORDER_2;
 800ed28:	4d35      	ldr	r5, [pc, #212]	; (800ee00 <sc_muladd+0xcac>)
    t[11] -= t[22] * ORDER_1;
 800ed2a:	4437      	add	r7, r6
    t[11] -= t[21] * ORDER_2;
 800ed2c:	fba1 5e05 	umull	r5, lr, r1, r5
    t[11] -= t[20] * ORDER_3;
 800ed30:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    t[11] -= t[22] * ORDER_1;
 800ed32:	eb47 070c 	adc.w	r7, r7, ip
    t[11] -= t[21] * ORDER_2;
 800ed36:	1940      	adds	r0, r0, r5
    t[11] -= t[20] * ORDER_3;
 800ed38:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 800ee04 <sc_muladd+0xcb0>
 800ed3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ed3e:	fb0c 5c06 	mla	ip, ip, r6, r5
 800ed42:	9d07      	ldr	r5, [sp, #28]
 800ed44:	4e2f      	ldr	r6, [pc, #188]	; (800ee04 <sc_muladd+0xcb0>)
    t[11] -= t[21] * ORDER_2;
 800ed46:	ebae 0e01 	sub.w	lr, lr, r1
    t[11] -= t[20] * ORDER_3;
 800ed4a:	fba5 5606 	umull	r5, r6, r5, r6
    t[11] -= t[21] * ORDER_2;
 800ed4e:	eb4e 0707 	adc.w	r7, lr, r7
    t[11] -= t[20] * ORDER_3;
 800ed52:	1940      	adds	r0, r0, r5
    t[11] -= t[19] * ORDER_4;
 800ed54:	4d29      	ldr	r5, [pc, #164]	; (800edfc <sc_muladd+0xca8>)
    t[11] -= t[20] * ORDER_3;
 800ed56:	4466      	add	r6, ip
    t[11] -= t[19] * ORDER_4;
 800ed58:	fba3 e505 	umull	lr, r5, r3, r5
    t[11] -= t[20] * ORDER_3;
 800ed5c:	eb46 0607 	adc.w	r6, r6, r7
    t[11] -= t[19] * ORDER_4;
 800ed60:	1aeb      	subs	r3, r5, r3
 800ed62:	eb10 000e 	adds.w	r0, r0, lr
    t[11] -= t[18] * ORDER_5;
 800ed66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t[13] -= t[22] * ORDER_3;
 800ed68:	f8df c098 	ldr.w	ip, [pc, #152]	; 800ee04 <sc_muladd+0xcb0>
    t[11] -= t[19] * ORDER_4;
 800ed6c:	eb43 0606 	adc.w	r6, r3, r6
    t[11] -= t[18] * ORDER_5;
 800ed70:	4b25      	ldr	r3, [pc, #148]	; (800ee08 <sc_muladd+0xcb4>)
 800ed72:	fb03 4405 	mla	r4, r3, r5, r4
 800ed76:	9d06      	ldr	r5, [sp, #24]
 800ed78:	fba5 e703 	umull	lr, r7, r5, r3
 800ed7c:	eb10 000e 	adds.w	r0, r0, lr
 800ed80:	443c      	add	r4, r7
 800ed82:	eb44 0706 	adc.w	r7, r4, r6
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800ed86:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    t[13] -= t[23] * ORDER_2;
 800ed88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed8a:	4e1d      	ldr	r6, [pc, #116]	; (800ee00 <sc_muladd+0xcac>)
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800ed8c:	ea4f 5e54 	mov.w	lr, r4, lsr #21
 800ed90:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
    t[13] -= t[23] * ORDER_2;
 800ed94:	9c09      	ldr	r4, [sp, #36]	; 0x24
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800ed96:	eb10 000e 	adds.w	r0, r0, lr
 800ed9a:	9024      	str	r0, [sp, #144]	; 0x90
    t[13] -= t[23] * ORDER_2;
 800ed9c:	fb06 4605 	mla	r6, r6, r5, r4
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800eda0:	981e      	ldr	r0, [sp, #120]	; 0x78
    t[13] -= t[23] * ORDER_2;
 800eda2:	9c05      	ldr	r4, [sp, #20]
 800eda4:	4d16      	ldr	r5, [pc, #88]	; (800ee00 <sc_muladd+0xcac>)
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800eda6:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[13] -= t[23] * ORDER_2;
 800edaa:	fba4 5405 	umull	r5, r4, r4, r5
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800edae:	eb47 5768 	adc.w	r7, r7, r8, asr #21
    t[13] -= t[23] * ORDER_2;
 800edb2:	1940      	adds	r0, r0, r5
 800edb4:	eb46 0604 	adc.w	r6, r6, r4
    t[13] -= t[22] * ORDER_3;
 800edb8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800edba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800edbc:	fb0c 4c05 	mla	ip, ip, r5, r4
 800edc0:	9c08      	ldr	r4, [sp, #32]
 800edc2:	4d10      	ldr	r5, [pc, #64]	; (800ee04 <sc_muladd+0xcb0>)
 800edc4:	fba4 4505 	umull	r4, r5, r4, r5
 800edc8:	1900      	adds	r0, r0, r4
    t[13] -= t[21] * ORDER_4;
 800edca:	4c0c      	ldr	r4, [pc, #48]	; (800edfc <sc_muladd+0xca8>)
    t[13] -= t[22] * ORDER_3;
 800edcc:	4465      	add	r5, ip
    t[13] -= t[21] * ORDER_4;
 800edce:	fba1 e404 	umull	lr, r4, r1, r4
    t[13] -= t[22] * ORDER_3;
 800edd2:	eb45 0506 	adc.w	r5, r5, r6
    t[13] -= t[21] * ORDER_4;
 800edd6:	1a61      	subs	r1, r4, r1
 800edd8:	eb10 000e 	adds.w	r0, r0, lr
    t[13] -= t[20] * ORDER_5;
 800eddc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    t[15] -= t[23] * ORDER_4;
 800edde:	4e07      	ldr	r6, [pc, #28]	; (800edfc <sc_muladd+0xca8>)
    t[13] -= t[21] * ORDER_4;
 800ede0:	eb41 0505 	adc.w	r5, r1, r5
    t[13] -= t[20] * ORDER_5;
 800ede4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ede6:	fb03 1a04 	mla	sl, r3, r4, r1
 800edea:	9907      	ldr	r1, [sp, #28]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800edec:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    t[13] -= t[20] * ORDER_5;
 800edee:	fba1 e103 	umull	lr, r1, r1, r3
 800edf2:	e00b      	b.n	800ee0c <sc_muladd+0xcb8>
 800edf4:	ffe72d19 	.word	0xffe72d19
 800edf8:	ffea2c13 	.word	0xffea2c13
 800edfc:	ffe215d1 	.word	0xffe215d1
 800ee00:	ffe9fb68 	.word	0xffe9fb68
 800ee04:	fff0c654 	.word	0xfff0c654
 800ee08:	fff59084 	.word	0xfff59084
 800ee0c:	448a      	add	sl, r1
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ee0e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ee10:	0d49      	lsrs	r1, r1, #21
    t[13] -= t[20] * ORDER_5;
 800ee12:	eb10 000e 	adds.w	r0, r0, lr
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ee16:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
    t[13] -= t[20] * ORDER_5;
 800ee1a:	eb4a 0a05 	adc.w	sl, sl, r5
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ee1e:	1840      	adds	r0, r0, r1
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800ee20:	9910      	ldr	r1, [sp, #64]	; 0x40
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ee22:	eb4a 5a64 	adc.w	sl, sl, r4, asr #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800ee26:	f3c1 0514 	ubfx	r5, r1, #0, #21
    t[15] -= t[23] * ORDER_4;
 800ee2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ee2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee2e:	fb06 1404 	mla	r4, r6, r4, r1
 800ee32:	9905      	ldr	r1, [sp, #20]
 800ee34:	fba1 1606 	umull	r1, r6, r1, r6
 800ee38:	1869      	adds	r1, r5, r1
 800ee3a:	eb44 0606 	adc.w	r6, r4, r6
    t[15] -= t[22] * ORDER_5;
 800ee3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ee40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ee42:	fb03 4405 	mla	r4, r3, r5, r4
 800ee46:	9d08      	ldr	r5, [sp, #32]
 800ee48:	fba5 5c03 	umull	r5, ip, r5, r3
 800ee4c:	4464      	add	r4, ip
 800ee4e:	1949      	adds	r1, r1, r5
 800ee50:	eb44 0606 	adc.w	r6, r4, r6
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800ee54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ee56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ee58:	0d64      	lsrs	r4, r4, #21
 800ee5a:	ea44 24c5 	orr.w	r4, r4, r5, lsl #11
 800ee5e:	1909      	adds	r1, r1, r4
 800ee60:	eb46 5665 	adc.w	r6, r6, r5, asr #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800ee64:	9d12      	ldr	r5, [sp, #72]	; 0x48
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 800ee66:	9c11      	ldr	r4, [sp, #68]	; 0x44
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800ee68:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 800ee6c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 800ee6e:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800ee72:	ea4c 2cc5 	orr.w	ip, ip, r5, lsl #11
 800ee76:	eb14 040c 	adds.w	r4, r4, ip
 800ee7a:	ea4f 5565 	mov.w	r5, r5, asr #21
 800ee7e:	9405      	str	r4, [sp, #20]
 800ee80:	f145 0400 	adc.w	r4, r5, #0
 800ee84:	9409      	str	r4, [sp, #36]	; 0x24
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ee86:	9c16      	ldr	r4, [sp, #88]	; 0x58
    t[ 0] -= t[12] * ORDER_0;
 800ee88:	f8dd c010 	ldr.w	ip, [sp, #16]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 800ee8c:	f3c4 0514 	ubfx	r5, r4, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800ee90:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800ee92:	0d64      	lsrs	r4, r4, #21
 800ee94:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
 800ee98:	192d      	adds	r5, r5, r4
 800ee9a:	ea4f 5767 	mov.w	r7, r7, asr #21
 800ee9e:	f147 0400 	adc.w	r4, r7, #0
 800eea2:	940a      	str	r4, [sp, #40]	; 0x28
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800eea4:	9c14      	ldr	r4, [sp, #80]	; 0x50
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800eea6:	ea4f 5950 	mov.w	r9, r0, lsr #21
 800eeaa:	ea49 29ca 	orr.w	r9, r9, sl, lsl #11
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 800eeae:	f3c4 0814 	ubfx	r8, r4, #0, #21
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800eeb2:	eb18 0409 	adds.w	r4, r8, r9
 800eeb6:	ea4f 5a6a 	mov.w	sl, sl, asr #21
 800eeba:	9406      	str	r4, [sp, #24]
 800eebc:	f14a 0400 	adc.w	r4, sl, #0
 800eec0:	940b      	str	r4, [sp, #44]	; 0x2c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 800eec2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800eec4:	f3c4 0714 	ubfx	r7, r4, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800eec8:	0d4c      	lsrs	r4, r1, #21
 800eeca:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
 800eece:	193c      	adds	r4, r7, r4
 800eed0:	ea4f 5666 	mov.w	r6, r6, asr #21
 800eed4:	9407      	str	r4, [sp, #28]
 800eed6:	f146 0400 	adc.w	r4, r6, #0
    t[ 0] -= t[12] * ORDER_0;
 800eeda:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800eedc:	940c      	str	r4, [sp, #48]	; 0x30
    t[ 0] -= t[12] * ORDER_0;
 800eede:	426f      	negs	r7, r5
 800eee0:	fb0c 7c06 	mla	ip, ip, r6, r7
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800eee4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    t[ 0] -= t[12] * ORDER_0;
 800eee6:	9e04      	ldr	r6, [sp, #16]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800eee8:	f3c4 0414 	ubfx	r4, r4, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 800eeec:	fba5 9606 	umull	r9, r6, r5, r6
 800eef0:	eb14 0409 	adds.w	r4, r4, r9
 800eef4:	eb4c 0806 	adc.w	r8, ip, r6
    t[ 1] -= t[13] * ORDER_0;
 800eef8:	9e04      	ldr	r6, [sp, #16]
    t[ 0] -= t[12] * ORDER_0;
 800eefa:	940d      	str	r4, [sp, #52]	; 0x34
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 800eefc:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef00:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800ef02:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    t[ 1] -= t[13] * ORDER_0;
 800ef06:	fba0 eb06 	umull	lr, fp, r0, r6
    t[ 1] -= t[12] * ORDER_1;
 800ef0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef0c:	f3c4 0414 	ubfx	r4, r4, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 800ef10:	fb02 7a06 	mla	sl, r2, r6, r7
    t[ 1] -= t[13] * ORDER_0;
 800ef14:	eb14 040e 	adds.w	r4, r4, lr
    t[ 1] -= t[12] * ORDER_1;
 800ef18:	fba5 9602 	umull	r9, r6, r5, r2
    t[ 1] -= t[13] * ORDER_0;
 800ef1c:	ebab 0b00 	sub.w	fp, fp, r0
 800ef20:	f14b 0b00 	adc.w	fp, fp, #0
    t[ 1] -= t[12] * ORDER_1;
 800ef24:	eb14 0409 	adds.w	r4, r4, r9
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800ef28:	ea4f 595c 	mov.w	r9, ip, lsr #21
 800ef2c:	ea49 29c8 	orr.w	r9, r9, r8, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 800ef30:	4456      	add	r6, sl
 800ef32:	eb46 060b 	adc.w	r6, r6, fp
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800ef36:	eb14 0409 	adds.w	r4, r4, r9
 800ef3a:	940e      	str	r4, [sp, #56]	; 0x38
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800ef3c:	9c19      	ldr	r4, [sp, #100]	; 0x64
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef3e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800ef42:	eb46 5c68 	adc.w	ip, r6, r8, asr #21
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800ef46:	f3c4 0614 	ubfx	r6, r4, #0, #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef4a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ef4c:	0d64      	lsrs	r4, r4, #21
 800ef4e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
 800ef52:	1936      	adds	r6, r6, r4
    t[ 2] -= t[14] * ORDER_0;
 800ef54:	9c06      	ldr	r4, [sp, #24]
 800ef56:	f1c4 0400 	rsb	r4, r4, #0
 800ef5a:	9408      	str	r4, [sp, #32]
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef5c:	ea4f 596e 	mov.w	r9, lr, asr #21
    t[ 2] -= t[14] * ORDER_0;
 800ef60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ef64:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800ef68:	fb08 480e 	mla	r8, r8, lr, r4
 800ef6c:	9c06      	ldr	r4, [sp, #24]
 800ef6e:	f8dd e010 	ldr.w	lr, [sp, #16]
 800ef72:	fba4 4e0e 	umull	r4, lr, r4, lr
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef76:	f149 0900 	adc.w	r9, r9, #0
    t[ 2] -= t[14] * ORDER_0;
 800ef7a:	44f0      	add	r8, lr
 800ef7c:	1934      	adds	r4, r6, r4
 800ef7e:	eb48 0809 	adc.w	r8, r8, r9
    t[ 2] -= t[12] * ORDER_2;
 800ef82:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ef84:	f8df e388 	ldr.w	lr, [pc, #904]	; 800f310 <sc_muladd+0x11bc>
    t[ 2] -= t[13] * ORDER_1;
 800ef88:	fba0 9a02 	umull	r9, sl, r0, r2
 800ef8c:	ebaa 0a00 	sub.w	sl, sl, r0
 800ef90:	eb14 0409 	adds.w	r4, r4, r9
 800ef94:	eb4a 0808 	adc.w	r8, sl, r8
    t[ 2] -= t[12] * ORDER_2;
 800ef98:	fb0e 7a06 	mla	sl, lr, r6, r7
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800ef9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    t[ 2] -= t[12] * ORDER_2;
 800ef9e:	fba5 9e0e 	umull	r9, lr, r5, lr
 800efa2:	eb14 0409 	adds.w	r4, r4, r9
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800efa6:	ea4f 5956 	mov.w	r9, r6, lsr #21
 800efaa:	ea49 29cc 	orr.w	r9, r9, ip, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 800efae:	44d6      	add	lr, sl
 800efb0:	eb4e 0e08 	adc.w	lr, lr, r8
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800efb4:	eb14 0409 	adds.w	r4, r4, r9
 800efb8:	940f      	str	r4, [sp, #60]	; 0x3c
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800efba:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800efbc:	eb4e 566c 	adc.w	r6, lr, ip, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800efc0:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 3] -= t[15] * ORDER_0;
 800efc4:	9c04      	ldr	r4, [sp, #16]
    t[ 3] -= t[14] * ORDER_1;
 800efc6:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 800efca:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[ 3] -= t[15] * ORDER_0;
 800efce:	fba1 4804 	umull	r4, r8, r1, r4
 800efd2:	eb1c 0c04 	adds.w	ip, ip, r4
    t[ 3] -= t[14] * ORDER_1;
 800efd6:	9c08      	ldr	r4, [sp, #32]
 800efd8:	fb02 4a0e 	mla	sl, r2, lr, r4
 800efdc:	9c06      	ldr	r4, [sp, #24]
    t[ 3] -= t[15] * ORDER_0;
 800efde:	eba8 0801 	sub.w	r8, r8, r1
    t[ 3] -= t[14] * ORDER_1;
 800efe2:	fba4 4e02 	umull	r4, lr, r4, r2
    t[ 3] -= t[15] * ORDER_0;
 800efe6:	f148 0800 	adc.w	r8, r8, #0
    t[ 3] -= t[14] * ORDER_1;
 800efea:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 3] -= t[13] * ORDER_2;
 800efee:	f8df c320 	ldr.w	ip, [pc, #800]	; 800f310 <sc_muladd+0x11bc>
    t[ 3] -= t[14] * ORDER_1;
 800eff2:	44f2      	add	sl, lr
    t[ 3] -= t[13] * ORDER_2;
 800eff4:	fba0 c90c 	umull	ip, r9, r0, ip
    t[ 3] -= t[12] * ORDER_3;
 800eff8:	f8df e318 	ldr.w	lr, [pc, #792]	; 800f314 <sc_muladd+0x11c0>
    t[ 3] -= t[14] * ORDER_1;
 800effc:	eb4a 0a08 	adc.w	sl, sl, r8
    t[ 3] -= t[13] * ORDER_2;
 800f000:	eb14 040c 	adds.w	r4, r4, ip
    t[ 3] -= t[12] * ORDER_3;
 800f004:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    t[ 3] -= t[13] * ORDER_2;
 800f008:	eba9 0900 	sub.w	r9, r9, r0
 800f00c:	eb49 0a0a 	adc.w	sl, r9, sl
    t[ 3] -= t[12] * ORDER_3;
 800f010:	fb0e 790c 	mla	r9, lr, ip, r7
 800f014:	fba5 c80e 	umull	ip, r8, r5, lr
 800f018:	eb14 040c 	adds.w	r4, r4, ip
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f01c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800f020:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 800f024:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 800f028:	44c8      	add	r8, r9
 800f02a:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f02e:	eb14 040c 	adds.w	r4, r4, ip
 800f032:	9410      	str	r4, [sp, #64]	; 0x40
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f034:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800f036:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f03a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f03c:	eb48 5e66 	adc.w	lr, r8, r6, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f040:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    t[ 4] -= t[16] * ORDER_0;
 800f042:	f8dd 8010 	ldr.w	r8, [sp, #16]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f046:	0d64      	lsrs	r4, r4, #21
 800f048:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
 800f04c:	ea4f 5a66 	mov.w	sl, r6, asr #21
    t[ 4] -= t[16] * ORDER_0;
 800f050:	9e07      	ldr	r6, [sp, #28]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f052:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 4] -= t[16] * ORDER_0;
 800f056:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 800f05a:	f1c6 0600 	rsb	r6, r6, #0
 800f05e:	fb08 690c 	mla	r9, r8, ip, r6
 800f062:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f066:	fbac c808 	umull	ip, r8, ip, r8
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f06a:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 4] -= t[16] * ORDER_0;
 800f06e:	44c1      	add	r9, r8
 800f070:	eb14 0c0c 	adds.w	ip, r4, ip
    t[ 4] -= t[15] * ORDER_1;
 800f074:	fba1 4b02 	umull	r4, fp, r1, r2
    t[ 4] -= t[14] * ORDER_2;
 800f078:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    t[ 4] -= t[16] * ORDER_0;
 800f07c:	eb49 090a 	adc.w	r9, r9, sl
    t[ 4] -= t[15] * ORDER_1;
 800f080:	eb1c 0c04 	adds.w	ip, ip, r4
    t[ 4] -= t[14] * ORDER_2;
 800f084:	f8df a288 	ldr.w	sl, [pc, #648]	; 800f310 <sc_muladd+0x11bc>
 800f088:	9c08      	ldr	r4, [sp, #32]
 800f08a:	fb0a 4a08 	mla	sl, sl, r8, r4
 800f08e:	9c06      	ldr	r4, [sp, #24]
 800f090:	f8df 827c 	ldr.w	r8, [pc, #636]	; 800f310 <sc_muladd+0x11bc>
    t[ 4] -= t[15] * ORDER_1;
 800f094:	ebab 0b01 	sub.w	fp, fp, r1
    t[ 4] -= t[14] * ORDER_2;
 800f098:	fba4 4808 	umull	r4, r8, r4, r8
    t[ 4] -= t[15] * ORDER_1;
 800f09c:	eb4b 0909 	adc.w	r9, fp, r9
    t[ 4] -= t[14] * ORDER_2;
 800f0a0:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 4] -= t[13] * ORDER_3;
 800f0a4:	f8df c26c 	ldr.w	ip, [pc, #620]	; 800f314 <sc_muladd+0x11c0>
    t[ 4] -= t[14] * ORDER_2;
 800f0a8:	44c2      	add	sl, r8
    t[ 4] -= t[13] * ORDER_3;
 800f0aa:	fba0 cb0c 	umull	ip, fp, r0, ip
    t[ 4] -= t[14] * ORDER_2;
 800f0ae:	eb4a 0a09 	adc.w	sl, sl, r9
    t[ 4] -= t[12] * ORDER_4;
 800f0b2:	f8df 8264 	ldr.w	r8, [pc, #612]	; 800f318 <sc_muladd+0x11c4>
    t[ 4] -= t[13] * ORDER_3;
 800f0b6:	eb14 040c 	adds.w	r4, r4, ip
    t[ 4] -= t[12] * ORDER_4;
 800f0ba:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    t[ 4] -= t[13] * ORDER_3;
 800f0be:	ebab 0b00 	sub.w	fp, fp, r0
    t[ 4] -= t[12] * ORDER_4;
 800f0c2:	fb08 790c 	mla	r9, r8, ip, r7
 800f0c6:	fba5 c808 	umull	ip, r8, r5, r8
    t[ 4] -= t[13] * ORDER_3;
 800f0ca:	eb4b 0a0a 	adc.w	sl, fp, sl
    t[ 4] -= t[12] * ORDER_4;
 800f0ce:	eb14 040c 	adds.w	r4, r4, ip
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f0d2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800f0d6:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 800f0da:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 800f0de:	44c8      	add	r8, r9
 800f0e0:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f0e4:	eb14 040c 	adds.w	r4, r4, ip
 800f0e8:	9411      	str	r4, [sp, #68]	; 0x44
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f0ea:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
    t[ 5] -= t[17] * ORDER_0;
 800f0ec:	f8dd 9010 	ldr.w	r9, [sp, #16]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f0f0:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 5] -= t[17] * ORDER_0;
 800f0f4:	9c05      	ldr	r4, [sp, #20]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f0f6:	eb48 586e 	adc.w	r8, r8, lr, asr #21
    t[ 5] -= t[17] * ORDER_0;
 800f0fa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800f0fe:	4264      	negs	r4, r4
 800f100:	fb09 4b0e 	mla	fp, r9, lr, r4
 800f104:	f8dd e014 	ldr.w	lr, [sp, #20]
 800f108:	fbae e909 	umull	lr, r9, lr, r9
 800f10c:	eb1c 0c0e 	adds.w	ip, ip, lr
    t[ 5] -= t[16] * ORDER_1;
 800f110:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800f114:	fb02 6a0e 	mla	sl, r2, lr, r6
 800f118:	f8dd e01c 	ldr.w	lr, [sp, #28]
    t[ 5] -= t[17] * ORDER_0;
 800f11c:	eb4b 0b09 	adc.w	fp, fp, r9
    t[ 5] -= t[16] * ORDER_1;
 800f120:	fbae e902 	umull	lr, r9, lr, r2
 800f124:	eb1c 0e0e 	adds.w	lr, ip, lr
    t[ 5] -= t[15] * ORDER_2;
 800f128:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 800f310 <sc_muladd+0x11bc>
    t[ 5] -= t[16] * ORDER_1;
 800f12c:	44ca      	add	sl, r9
    t[ 5] -= t[15] * ORDER_2;
 800f12e:	fba1 9c0c 	umull	r9, ip, r1, ip
    t[ 5] -= t[16] * ORDER_1;
 800f132:	eb4a 0a0b 	adc.w	sl, sl, fp
    t[ 5] -= t[15] * ORDER_2;
 800f136:	ebac 0c01 	sub.w	ip, ip, r1
 800f13a:	eb1e 0e09 	adds.w	lr, lr, r9
 800f13e:	eb4c 0a0a 	adc.w	sl, ip, sl
    t[ 5] -= t[14] * ORDER_3;
 800f142:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f146:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f14a:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 800f314 <sc_muladd+0x11c0>
 800f14e:	fb0b cb09 	mla	fp, fp, r9, ip
 800f152:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f156:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800f314 <sc_muladd+0x11c0>
 800f15a:	fbac c909 	umull	ip, r9, ip, r9
 800f15e:	eb1e 0c0c 	adds.w	ip, lr, ip
    t[ 5] -= t[13] * ORDER_4;
 800f162:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 800f318 <sc_muladd+0x11c4>
    t[ 5] -= t[14] * ORDER_3;
 800f166:	44d9      	add	r9, fp
 800f168:	eb49 090a 	adc.w	r9, r9, sl
    t[ 5] -= t[13] * ORDER_4;
 800f16c:	fba0 ea0e 	umull	lr, sl, r0, lr
 800f170:	ebaa 0a00 	sub.w	sl, sl, r0
 800f174:	eb1c 0c0e 	adds.w	ip, ip, lr
 800f178:	eb4a 0909 	adc.w	r9, sl, r9
    t[ 5] -= t[12] * ORDER_5;
 800f17c:	fba5 5a03 	umull	r5, sl, r5, r3
 800f180:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800f184:	eb1c 0c05 	adds.w	ip, ip, r5
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f188:	9d11      	ldr	r5, [sp, #68]	; 0x44
    t[ 5] -= t[12] * ORDER_5;
 800f18a:	fb03 770e 	mla	r7, r3, lr, r7
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f18e:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    t[ 5] -= t[12] * ORDER_5;
 800f192:	4457      	add	r7, sl
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f194:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
    t[ 5] -= t[12] * ORDER_5;
 800f198:	eb47 0909 	adc.w	r9, r7, r9
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f19c:	eb1c 050e 	adds.w	r5, ip, lr
 800f1a0:	950a      	str	r5, [sp, #40]	; 0x28
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f1a2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f1a4:	f3c5 0e14 	ubfx	lr, r5, #0, #21
    t[ 6] -= t[17] * ORDER_1;
 800f1a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f1aa:	fb02 4705 	mla	r7, r2, r5, r4
 800f1ae:	9d05      	ldr	r5, [sp, #20]
 800f1b0:	fba5 c502 	umull	ip, r5, r5, r2
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f1b4:	eb49 5868 	adc.w	r8, r9, r8, asr #21
    t[ 6] -= t[17] * ORDER_1;
 800f1b8:	eb1e 0e0c 	adds.w	lr, lr, ip
 800f1bc:	eb47 0705 	adc.w	r7, r7, r5
    t[ 6] -= t[16] * ORDER_2;
 800f1c0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 800f310 <sc_muladd+0x11bc>
 800f1c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1c6:	fb0c 6905 	mla	r9, ip, r5, r6
 800f1ca:	9d07      	ldr	r5, [sp, #28]
 800f1cc:	fba5 c50c 	umull	ip, r5, r5, ip
 800f1d0:	eb1e 0c0c 	adds.w	ip, lr, ip
 800f1d4:	444d      	add	r5, r9
 800f1d6:	eb45 0507 	adc.w	r5, r5, r7
    t[ 6] -= t[15] * ORDER_3;
 800f1da:	4f4e      	ldr	r7, [pc, #312]	; (800f314 <sc_muladd+0x11c0>)
    t[ 6] -= t[14] * ORDER_4;
 800f1dc:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800f318 <sc_muladd+0x11c4>
    t[ 6] -= t[15] * ORDER_3;
 800f1e0:	fba1 7e07 	umull	r7, lr, r1, r7
 800f1e4:	eb1c 0c07 	adds.w	ip, ip, r7
 800f1e8:	ebae 0e01 	sub.w	lr, lr, r1
    t[ 6] -= t[14] * ORDER_4;
 800f1ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    t[ 6] -= t[15] * ORDER_3;
 800f1ee:	eb4e 0e05 	adc.w	lr, lr, r5
    t[ 6] -= t[14] * ORDER_4;
 800f1f2:	9d08      	ldr	r5, [sp, #32]
 800f1f4:	fb09 5907 	mla	r9, r9, r7, r5
 800f1f8:	9d06      	ldr	r5, [sp, #24]
 800f1fa:	4f47      	ldr	r7, [pc, #284]	; (800f318 <sc_muladd+0x11c4>)
 800f1fc:	fba5 5707 	umull	r5, r7, r5, r7
 800f200:	eb1c 0505 	adds.w	r5, ip, r5
 800f204:	444f      	add	r7, r9
    t[ 6] -= t[13] * ORDER_5;
 800f206:	fba0 ca03 	umull	ip, sl, r0, r3
    t[ 6] -= t[14] * ORDER_4;
 800f20a:	eb47 070e 	adc.w	r7, r7, lr
    t[ 6] -= t[13] * ORDER_5;
 800f20e:	ebaa 0000 	sub.w	r0, sl, r0
 800f212:	eb15 0c0c 	adds.w	ip, r5, ip
 800f216:	eb40 0707 	adc.w	r7, r0, r7
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f21a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f21c:	0d45      	lsrs	r5, r0, #21
 800f21e:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
 800f222:	eb1c 0005 	adds.w	r0, ip, r5
 800f226:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    t[ 7] -= t[17] * ORDER_2;
 800f22a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f22c:	4f38      	ldr	r7, [pc, #224]	; (800f310 <sc_muladd+0x11bc>)
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f22e:	9012      	str	r0, [sp, #72]	; 0x48
    t[ 7] -= t[17] * ORDER_2;
 800f230:	fb07 4c05 	mla	ip, r7, r5, r4
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f234:	9821      	ldr	r0, [sp, #132]	; 0x84
    t[ 7] -= t[17] * ORDER_2;
 800f236:	9d05      	ldr	r5, [sp, #20]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f238:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[ 7] -= t[17] * ORDER_2;
 800f23c:	fba5 7507 	umull	r7, r5, r5, r7
 800f240:	19c0      	adds	r0, r0, r7
 800f242:	eb4c 0c05 	adc.w	ip, ip, r5
    t[ 7] -= t[16] * ORDER_3;
 800f246:	4f33      	ldr	r7, [pc, #204]	; (800f314 <sc_muladd+0x11c0>)
 800f248:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f24a:	fb07 6e05 	mla	lr, r7, r5, r6
 800f24e:	9d07      	ldr	r5, [sp, #28]
 800f250:	fba5 5707 	umull	r5, r7, r5, r7
 800f254:	1940      	adds	r0, r0, r5
    t[ 7] -= t[15] * ORDER_4;
 800f256:	4d30      	ldr	r5, [pc, #192]	; (800f318 <sc_muladd+0x11c4>)
    t[ 7] -= t[16] * ORDER_3;
 800f258:	4477      	add	r7, lr
    t[ 7] -= t[15] * ORDER_4;
 800f25a:	fba1 5905 	umull	r5, r9, r1, r5
    t[ 7] -= t[16] * ORDER_3;
 800f25e:	eb47 070c 	adc.w	r7, r7, ip
    t[ 7] -= t[14] * ORDER_5;
 800f262:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    t[ 7] -= t[15] * ORDER_4;
 800f266:	1945      	adds	r5, r0, r5
    t[ 7] -= t[14] * ORDER_5;
 800f268:	9808      	ldr	r0, [sp, #32]
 800f26a:	fb03 0a0c 	mla	sl, r3, ip, r0
 800f26e:	9806      	ldr	r0, [sp, #24]
    t[ 8] -= t[17] * ORDER_3;
 800f270:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800f314 <sc_muladd+0x11c0>
    t[ 7] -= t[15] * ORDER_4;
 800f274:	eba9 0901 	sub.w	r9, r9, r1
 800f278:	eb49 0707 	adc.w	r7, r9, r7
    t[ 7] -= t[14] * ORDER_5;
 800f27c:	fba0 9003 	umull	r9, r0, r0, r3
 800f280:	4482      	add	sl, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f282:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f284:	ea4f 5b50 	mov.w	fp, r0, lsr #21
    t[ 7] -= t[14] * ORDER_5;
 800f288:	eb15 0509 	adds.w	r5, r5, r9
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f28c:	ea4b 2bc8 	orr.w	fp, fp, r8, lsl #11
    t[ 7] -= t[14] * ORDER_5;
 800f290:	eb4a 0707 	adc.w	r7, sl, r7
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f294:	eb15 000b 	adds.w	r0, r5, fp
 800f298:	9006      	str	r0, [sp, #24]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f29a:	981c      	ldr	r0, [sp, #112]	; 0x70
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f29c:	9d22      	ldr	r5, [sp, #136]	; 0x88
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f29e:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f2a2:	f3c0 0a14 	ubfx	sl, r0, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f2a6:	9821      	ldr	r0, [sp, #132]	; 0x84
    t[ 8] -= t[17] * ORDER_3;
 800f2a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f2aa:	0d40      	lsrs	r0, r0, #21
    t[ 8] -= t[17] * ORDER_3;
 800f2ac:	fb0c 4e07 	mla	lr, ip, r7, r4
 800f2b0:	9f05      	ldr	r7, [sp, #20]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f2b2:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 800f2b6:	eb1a 0000 	adds.w	r0, sl, r0
    t[ 8] -= t[17] * ORDER_3;
 800f2ba:	fba7 7c0c 	umull	r7, ip, r7, ip
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f2be:	ea4f 5565 	mov.w	r5, r5, asr #21
 800f2c2:	f145 0500 	adc.w	r5, r5, #0
    t[ 8] -= t[17] * ORDER_3;
 800f2c6:	44f4      	add	ip, lr
 800f2c8:	19c0      	adds	r0, r0, r7
 800f2ca:	eb4c 0c05 	adc.w	ip, ip, r5
    t[ 8] -= t[16] * ORDER_4;
 800f2ce:	4f12      	ldr	r7, [pc, #72]	; (800f318 <sc_muladd+0x11c4>)
 800f2d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2d2:	fb07 6e05 	mla	lr, r7, r5, r6
 800f2d6:	9d07      	ldr	r5, [sp, #28]
 800f2d8:	fba5 5707 	umull	r5, r7, r5, r7
 800f2dc:	1940      	adds	r0, r0, r5
 800f2de:	4477      	add	r7, lr
    t[ 8] -= t[15] * ORDER_5;
 800f2e0:	fba1 5903 	umull	r5, r9, r1, r3
    t[ 8] -= t[16] * ORDER_4;
 800f2e4:	eb47 070c 	adc.w	r7, r7, ip
    t[ 8] -= t[15] * ORDER_5;
 800f2e8:	eba9 0101 	sub.w	r1, r9, r1
 800f2ec:	1940      	adds	r0, r0, r5
 800f2ee:	eb41 0707 	adc.w	r7, r1, r7
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f2f2:	9906      	ldr	r1, [sp, #24]
 800f2f4:	0d4d      	lsrs	r5, r1, #21
 800f2f6:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
 800f2fa:	1941      	adds	r1, r0, r5
    t[ 9] -= t[17] * ORDER_4;
 800f2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2fe:	4d06      	ldr	r5, [pc, #24]	; (800f318 <sc_muladd+0x11c4>)
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f300:	9108      	str	r1, [sp, #32]
 800f302:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f306:	9923      	ldr	r1, [sp, #140]	; 0x8c
    t[ 9] -= t[17] * ORDER_4;
 800f308:	fb05 4700 	mla	r7, r5, r0, r4
 800f30c:	e006      	b.n	800f31c <sc_muladd+0x11c8>
 800f30e:	bf00      	nop
 800f310:	ffe9fb68 	.word	0xffe9fb68
 800f314:	fff0c654 	.word	0xfff0c654
 800f318:	ffe215d1 	.word	0xffe215d1
 800f31c:	9805      	ldr	r0, [sp, #20]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f31e:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[ 9] -= t[17] * ORDER_4;
 800f322:	fba0 5005 	umull	r5, r0, r0, r5
 800f326:	1949      	adds	r1, r1, r5
    t[ 9] -= t[16] * ORDER_5;
 800f328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f32a:	fb03 6605 	mla	r6, r3, r5, r6
 800f32e:	9d07      	ldr	r5, [sp, #28]
    t[ 9] -= t[17] * ORDER_4;
 800f330:	eb47 0000 	adc.w	r0, r7, r0
    t[ 9] -= t[16] * ORDER_5;
 800f334:	fba5 7503 	umull	r7, r5, r5, r3
 800f338:	19c9      	adds	r1, r1, r7
 800f33a:	442e      	add	r6, r5
 800f33c:	eb46 0600 	adc.w	r6, r6, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f340:	9808      	ldr	r0, [sp, #32]
 800f342:	0d47      	lsrs	r7, r0, #21
 800f344:	ea47 27c8 	orr.w	r7, r7, r8, lsl #11
 800f348:	19c9      	adds	r1, r1, r7
 800f34a:	9107      	str	r1, [sp, #28]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f34c:	991d      	ldr	r1, [sp, #116]	; 0x74
    t[ 0] -= t[12] * ORDER_0;
 800f34e:	9804      	ldr	r0, [sp, #16]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f350:	f3c1 0e14 	ubfx	lr, r1, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f354:	9923      	ldr	r1, [sp, #140]	; 0x8c
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f356:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f35a:	0d4e      	lsrs	r6, r1, #21
 800f35c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f35e:	ea46 26c1 	orr.w	r6, r6, r1, lsl #11
 800f362:	154d      	asrs	r5, r1, #21
    t[10] -= t[17] * ORDER_5;
 800f364:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f366:	fb03 4401 	mla	r4, r3, r1, r4
 800f36a:	9905      	ldr	r1, [sp, #20]
 800f36c:	fba1 a103 	umull	sl, r1, r1, r3
 800f370:	440c      	add	r4, r1
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f372:	9907      	ldr	r1, [sp, #28]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f374:	eb1e 0e06 	adds.w	lr, lr, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f378:	ea4f 5151 	mov.w	r1, r1, lsr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f37c:	f145 0500 	adc.w	r5, r5, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f380:	ea41 21c8 	orr.w	r1, r1, r8, lsl #11
    t[10] -= t[17] * ORDER_5;
 800f384:	eb1e 0e0a 	adds.w	lr, lr, sl
 800f388:	eb44 0405 	adc.w	r4, r4, r5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f38c:	eb1e 0101 	adds.w	r1, lr, r1
 800f390:	9105      	str	r1, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800f392:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f394:	f3c1 0a14 	ubfx	sl, r1, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f398:	9905      	ldr	r1, [sp, #20]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f39a:	eb44 5868 	adc.w	r8, r4, r8, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f39e:	ea4f 5c51 	mov.w	ip, r1, lsr #21
 800f3a2:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
 800f3a6:	eb1a 0a0c 	adds.w	sl, sl, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800f3aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f3ac:	ea4f 5768 	mov.w	r7, r8, asr #21
 800f3b0:	f147 0700 	adc.w	r7, r7, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800f3b4:	ea4f 565a 	mov.w	r6, sl, lsr #21
 800f3b8:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800f3bc:	f3c1 0b14 	ubfx	fp, r1, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 800f3c0:	9904      	ldr	r1, [sp, #16]
 800f3c2:	f1c6 0800 	rsb	r8, r6, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800f3c6:	157f      	asrs	r7, r7, #21
    t[ 0] -= t[12] * ORDER_0;
 800f3c8:	fba6 4000 	umull	r4, r0, r6, r0
 800f3cc:	fb01 8107 	mla	r1, r1, r7, r8
 800f3d0:	eb1b 0b04 	adds.w	fp, fp, r4
 800f3d4:	eb41 0000 	adc.w	r0, r1, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800f3d8:	990e      	ldr	r1, [sp, #56]	; 0x38
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800f3da:	ea4f 545b 	mov.w	r4, fp, lsr #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800f3de:	f3c1 0914 	ubfx	r9, r1, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 800f3e2:	fb02 8107 	mla	r1, r2, r7, r8
 800f3e6:	fba6 2502 	umull	r2, r5, r6, r2
 800f3ea:	eb19 0202 	adds.w	r2, r9, r2
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800f3ee:	ea44 24c0 	orr.w	r4, r4, r0, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 800f3f2:	eb41 0105 	adc.w	r1, r1, r5
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800f3f6:	1912      	adds	r2, r2, r4
 800f3f8:	eb41 5160 	adc.w	r1, r1, r0, asr #21
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f3fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f3fe:	f3c0 0414 	ubfx	r4, r0, #0, #21
    t[ 2] -= t[12] * ORDER_2;
 800f402:	4887      	ldr	r0, [pc, #540]	; (800f620 <sc_muladd+0x14cc>)
 800f404:	fb00 8507 	mla	r5, r0, r7, r8
 800f408:	fba6 0900 	umull	r0, r9, r6, r0
 800f40c:	1820      	adds	r0, r4, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800f40e:	ea4f 5452 	mov.w	r4, r2, lsr #21
 800f412:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 800f416:	eb45 0509 	adc.w	r5, r5, r9
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800f41a:	1900      	adds	r0, r0, r4
 800f41c:	eb45 5561 	adc.w	r5, r5, r1, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f420:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f422:	f3c1 0c14 	ubfx	ip, r1, #0, #21
    t[ 3] -= t[12] * ORDER_3;
 800f426:	497f      	ldr	r1, [pc, #508]	; (800f624 <sc_muladd+0x14d0>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f428:	0d44      	lsrs	r4, r0, #21
    t[ 3] -= t[12] * ORDER_3;
 800f42a:	fb01 8e07 	mla	lr, r1, r7, r8
 800f42e:	fba6 1901 	umull	r1, r9, r6, r1
 800f432:	eb1c 0101 	adds.w	r1, ip, r1
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f436:	ea44 24c5 	orr.w	r4, r4, r5, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 800f43a:	eb4e 0909 	adc.w	r9, lr, r9
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f43e:	1909      	adds	r1, r1, r4
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f440:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f442:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 4] -= t[12] * ORDER_4;
 800f446:	4c78      	ldr	r4, [pc, #480]	; (800f628 <sc_muladd+0x14d4>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f448:	eb49 5965 	adc.w	r9, r9, r5, asr #21
    t[ 4] -= t[12] * ORDER_4;
 800f44c:	fb04 8e07 	mla	lr, r4, r7, r8
 800f450:	fba6 5404 	umull	r5, r4, r6, r4
 800f454:	eb1c 0c05 	adds.w	ip, ip, r5
 800f458:	eb4e 0e04 	adc.w	lr, lr, r4
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f45c:	0d4d      	lsrs	r5, r1, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f45e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f460:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
 800f464:	eb1c 0c05 	adds.w	ip, ip, r5
    t[ 5] -= t[12] * ORDER_5;
 800f468:	fb03 8707 	mla	r7, r3, r7, r8
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f46c:	f3c4 0514 	ubfx	r5, r4, #0, #21
    t[ 5] -= t[12] * ORDER_5;
 800f470:	fba6 3803 	umull	r3, r8, r6, r3
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f474:	eb4e 5e69 	adc.w	lr, lr, r9, asr #21
    t[ 5] -= t[12] * ORDER_5;
 800f478:	18eb      	adds	r3, r5, r3
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f47a:	ea4f 555c 	mov.w	r5, ip, lsr #21
 800f47e:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f482:	9c12      	ldr	r4, [sp, #72]	; 0x48
    t[ 5] -= t[12] * ORDER_5;
 800f484:	eb47 0708 	adc.w	r7, r7, r8
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f488:	195b      	adds	r3, r3, r5
 800f48a:	eb47 5e6e 	adc.w	lr, r7, lr, asr #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f48e:	0d5d      	lsrs	r5, r3, #21
 800f490:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f494:	f3c4 0614 	ubfx	r6, r4, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f498:	1976      	adds	r6, r6, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f49a:	9c06      	ldr	r4, [sp, #24]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f49c:	ea4f 576e 	mov.w	r7, lr, asr #21
 800f4a0:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f4a4:	ea4f 5856 	mov.w	r8, r6, lsr #21
 800f4a8:	ea48 28c7 	orr.w	r8, r8, r7, lsl #11
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f4ac:	f3c4 0914 	ubfx	r9, r4, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f4b0:	9c08      	ldr	r4, [sp, #32]
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f4b2:	eb19 0908 	adds.w	r9, r9, r8
 800f4b6:	ea4f 5767 	mov.w	r7, r7, asr #21
 800f4ba:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f4be:	f3c4 0514 	ubfx	r5, r4, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f4c2:	ea4f 5459 	mov.w	r4, r9, lsr #21
 800f4c6:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
 800f4ca:	192d      	adds	r5, r5, r4
 800f4cc:	ea4f 5767 	mov.w	r7, r7, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f4d0:	9c07      	ldr	r4, [sp, #28]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f4d2:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f4d6:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f4da:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f4de:	ea4e 2ec7 	orr.w	lr, lr, r7, lsl #11
 800f4e2:	eb14 0e0e 	adds.w	lr, r4, lr
 800f4e6:	ea4f 5767 	mov.w	r7, r7, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f4ea:	9c05      	ldr	r4, [sp, #20]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f4ec:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f4f0:	ea4f 585e 	mov.w	r8, lr, lsr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f4f4:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f4f8:	ea48 28c7 	orr.w	r8, r8, r7, lsl #11
 800f4fc:	eb14 0808 	adds.w	r8, r4, r8
 800f500:	ea4f 5767 	mov.w	r7, r7, asr #21
 800f504:	f147 0700 	adc.w	r7, r7, #0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f508:	ea4f 5458 	mov.w	r4, r8, lsr #21
 800f50c:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 800f510:	f3ca 0a14 	ubfx	sl, sl, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f514:	eb1a 0a04 	adds.w	sl, sl, r4
    s[ 0] = (byte)(t[ 0] >>  0);
 800f518:	9c00      	ldr	r4, [sp, #0]
    s[ 1] = (byte)(t[ 0] >>  8);
 800f51a:	9f00      	ldr	r7, [sp, #0]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 800f51c:	f3cb 0b14 	ubfx	fp, fp, #0, #21
    s[ 0] = (byte)(t[ 0] >>  0);
 800f520:	f884 b000 	strb.w	fp, [r4]
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 800f524:	f3c2 0214 	ubfx	r2, r2, #0, #21
    s[ 1] = (byte)(t[ 0] >>  8);
 800f528:	ea4f 241b 	mov.w	r4, fp, lsr #8
 800f52c:	707c      	strb	r4, [r7, #1]
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 800f52e:	0154      	lsls	r4, r2, #5
 800f530:	ea44 4b1b 	orr.w	fp, r4, fp, lsr #16
    s[ 3] = (byte)(t[ 1] >>  3);
 800f534:	08d4      	lsrs	r4, r2, #3
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 800f536:	f3c0 0014 	ubfx	r0, r0, #0, #21
    s[ 3] = (byte)(t[ 1] >>  3);
 800f53a:	70fc      	strb	r4, [r7, #3]
    s[ 4] = (byte)(t[ 1] >> 11);
 800f53c:	0ad4      	lsrs	r4, r2, #11
 800f53e:	713c      	strb	r4, [r7, #4]
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 800f540:	0084      	lsls	r4, r0, #2
 800f542:	ea44 42d2 	orr.w	r2, r4, r2, lsr #19
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 800f546:	f3c1 0114 	ubfx	r1, r1, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 800f54a:	717a      	strb	r2, [r7, #5]
    s[ 6] = (byte)(t[ 2] >>  6);
 800f54c:	0982      	lsrs	r2, r0, #6
 800f54e:	71ba      	strb	r2, [r7, #6]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 800f550:	01ca      	lsls	r2, r1, #7
 800f552:	ea42 3090 	orr.w	r0, r2, r0, lsr #14
    s[ 8] = (byte)(t[ 3] >>  1);
 800f556:	084a      	lsrs	r2, r1, #1
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 800f558:	f3cc 0c14 	ubfx	ip, ip, #0, #21
    s[ 8] = (byte)(t[ 3] >>  1);
 800f55c:	723a      	strb	r2, [r7, #8]
    s[ 9] = (byte)(t[ 3] >>  9);
 800f55e:	0a4a      	lsrs	r2, r1, #9
 800f560:	727a      	strb	r2, [r7, #9]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 800f562:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800f566:	ea42 4151 	orr.w	r1, r2, r1, lsr #17
    s[11] = (byte)(t[ 4] >>  4);
 800f56a:	ea4f 121c 	mov.w	r2, ip, lsr #4
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 800f56e:	f3c3 0314 	ubfx	r3, r3, #0, #21
    s[11] = (byte)(t[ 4] >>  4);
 800f572:	72fa      	strb	r2, [r7, #11]
    s[12] = (byte)(t[ 4] >> 12);
 800f574:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800f578:	733a      	strb	r2, [r7, #12]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 800f57a:	18da      	adds	r2, r3, r3
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 800f57c:	f3c6 0614 	ubfx	r6, r6, #0, #21
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 800f580:	ea42 5c1c 	orr.w	ip, r2, ip, lsr #20
    s[14] = (byte)(t[ 5] >>  7);
 800f584:	09da      	lsrs	r2, r3, #7
 800f586:	73ba      	strb	r2, [r7, #14]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 800f588:	01b2      	lsls	r2, r6, #6
 800f58a:	ea42 33d3 	orr.w	r3, r2, r3, lsr #15
 800f58e:	73fb      	strb	r3, [r7, #15]
    s[16] = (byte)(t[ 6] >>  2);
 800f590:	08b3      	lsrs	r3, r6, #2
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 800f592:	f3c9 0914 	ubfx	r9, r9, #0, #21
    s[16] = (byte)(t[ 6] >>  2);
 800f596:	743b      	strb	r3, [r7, #16]
    s[17] = (byte)(t[ 6] >> 10);
 800f598:	0ab3      	lsrs	r3, r6, #10
 800f59a:	747b      	strb	r3, [r7, #17]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 800f59c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 800f5a0:	f3c5 0514 	ubfx	r5, r5, #0, #21
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 800f5a4:	ea43 4696 	orr.w	r6, r3, r6, lsr #18
    s[19] = (byte)(t[ 7] >>  5);
 800f5a8:	ea4f 1359 	mov.w	r3, r9, lsr #5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 800f5ac:	f3ce 0e14 	ubfx	lr, lr, #0, #21
    s[19] = (byte)(t[ 7] >>  5);
 800f5b0:	74fb      	strb	r3, [r7, #19]
    s[22] = (byte)(t[ 8] >>  8);
 800f5b2:	0a2b      	lsrs	r3, r5, #8
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 800f5b4:	f3c8 0814 	ubfx	r8, r8, #0, #21
    s[22] = (byte)(t[ 8] >>  8);
 800f5b8:	75bb      	strb	r3, [r7, #22]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 800f5ba:	ea4f 144e 	mov.w	r4, lr, lsl #5
    s[24] = (byte)(t[ 9] >>  3);
 800f5be:	ea4f 03de 	mov.w	r3, lr, lsr #3
    s[21] = (byte)(t[ 8] >>  0);
 800f5c2:	757d      	strb	r5, [r7, #21]
    s[24] = (byte)(t[ 9] >>  3);
 800f5c4:	763b      	strb	r3, [r7, #24]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 800f5c6:	ea44 4515 	orr.w	r5, r4, r5, lsr #16
    s[25] = (byte)(t[ 9] >> 11);
 800f5ca:	ea4f 23de 	mov.w	r3, lr, lsr #11
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 800f5ce:	ea4f 0488 	mov.w	r4, r8, lsl #2
    s[25] = (byte)(t[ 9] >> 11);
 800f5d2:	767b      	strb	r3, [r7, #25]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 800f5d4:	ea44 4ede 	orr.w	lr, r4, lr, lsr #19
    s[27] = (byte)(t[10] >>  6);
 800f5d8:	ea4f 1398 	mov.w	r3, r8, lsr #6
    s[20] = (byte)(t[ 7] >> 13);
 800f5dc:	ea4f 3959 	mov.w	r9, r9, lsr #13
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 800f5e0:	ea4f 14ca 	mov.w	r4, sl, lsl #7
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 800f5e4:	f887 b002 	strb.w	fp, [r7, #2]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 800f5e8:	71f8      	strb	r0, [r7, #7]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 800f5ea:	72b9      	strb	r1, [r7, #10]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 800f5ec:	f887 c00d 	strb.w	ip, [r7, #13]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 800f5f0:	74be      	strb	r6, [r7, #18]
    s[20] = (byte)(t[ 7] >> 13);
 800f5f2:	f887 9014 	strb.w	r9, [r7, #20]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 800f5f6:	75fd      	strb	r5, [r7, #23]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 800f5f8:	f887 e01a 	strb.w	lr, [r7, #26]
    s[27] = (byte)(t[10] >>  6);
 800f5fc:	76fb      	strb	r3, [r7, #27]
    s[29] = (byte)(t[11] >>  1);
 800f5fe:	ea4f 035a 	mov.w	r3, sl, lsr #1
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 800f602:	ea44 3898 	orr.w	r8, r4, r8, lsr #14
    s[29] = (byte)(t[11] >>  1);
 800f606:	777b      	strb	r3, [r7, #29]
    s[30] = (byte)(t[11] >>  9);
 800f608:	ea4f 235a 	mov.w	r3, sl, lsr #9
    s[31] = (byte)(t[11] >> 17);
 800f60c:	ea4f 4a5a 	mov.w	sl, sl, lsr #17
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 800f610:	f887 801c 	strb.w	r8, [r7, #28]
    s[30] = (byte)(t[11] >>  9);
 800f614:	77bb      	strb	r3, [r7, #30]
    s[31] = (byte)(t[11] >> 17);
 800f616:	f887 a01f 	strb.w	sl, [r7, #31]
}
 800f61a:	b035      	add	sp, #212	; 0xd4
 800f61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f620:	ffe9fb68 	.word	0xffe9fb68
 800f624:	fff0c654 	.word	0xfff0c654
 800f628:	ffe215d1 	.word	0xffe215d1

0800f62c <ge_scalarmult_base>:
{
 800f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f62e:	b0f5      	sub	sp, #468	; 0x1d4
 800f630:	4604      	mov	r4, r0
  for (i = 0;i < 32;++i) {
 800f632:	4668      	mov	r0, sp
 800f634:	1e4e      	subs	r6, r1, #1
{
 800f636:	4603      	mov	r3, r0
 800f638:	311f      	adds	r1, #31
 800f63a:	4605      	mov	r5, r0
    e[2 * i + 0] = (a[i] >> 0) & 15;
 800f63c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800f640:	f002 070f 	and.w	r7, r2, #15
  for (i = 0;i < 32;++i) {
 800f644:	42b1      	cmp	r1, r6
    e[2 * i + 1] = (a[i] >> 4) & 15;
 800f646:	ea4f 1212 	mov.w	r2, r2, lsr #4
    e[2 * i + 0] = (a[i] >> 0) & 15;
 800f64a:	701f      	strb	r7, [r3, #0]
    e[2 * i + 1] = (a[i] >> 4) & 15;
 800f64c:	705a      	strb	r2, [r3, #1]
  for (i = 0;i < 32;++i) {
 800f64e:	f103 0302 	add.w	r3, r3, #2
 800f652:	d1f3      	bne.n	800f63c <ge_scalarmult_base+0x10>
 800f654:	213f      	movs	r1, #63	; 0x3f
  carry = 0;
 800f656:	2200      	movs	r2, #0
    e[i] += carry;
 800f658:	f990 3000 	ldrsb.w	r3, [r0]
 800f65c:	4413      	add	r3, r2
 800f65e:	b2db      	uxtb	r3, r3
    carry = e[i] + 8;
 800f660:	f103 0208 	add.w	r2, r3, #8
    carry >>= 4;
 800f664:	f342 1203 	sbfx	r2, r2, #4, #4
    e[i] -= (signed char)(carry << 4);
 800f668:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
  for (i = 0;i < 63;++i) {
 800f66c:	3901      	subs	r1, #1
    e[i] -= (signed char)(carry << 4);
 800f66e:	f800 3b01 	strb.w	r3, [r0], #1
  for (i = 0;i < 63;++i) {
 800f672:	d1f1      	bne.n	800f658 <ge_scalarmult_base+0x2c>
  e[63] += carry;
 800f674:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 800f678:	4413      	add	r3, r2
 800f67a:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
  ge_select(&t,0,e[1]);
 800f67e:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800f682:	a82e      	add	r0, sp, #184	; 0xb8
  fe_add(h->Y, t.yplusx, t.yminusx);
 800f684:	f104 0628 	add.w	r6, r4, #40	; 0x28
  ge_select(&t,0,e[1]);
 800f688:	f7fd fef8 	bl	800d47c <ge_select>
  fe_sub(h->X, t.yplusx, t.yminusx);
 800f68c:	aa38      	add	r2, sp, #224	; 0xe0
 800f68e:	a92e      	add	r1, sp, #184	; 0xb8
 800f690:	4620      	mov	r0, r4
 800f692:	f7fc fad0 	bl	800bc36 <fe_sub>
  fe_add(h->Y, t.yplusx, t.yminusx);
 800f696:	aa38      	add	r2, sp, #224	; 0xe0
 800f698:	a92e      	add	r1, sp, #184	; 0xb8
 800f69a:	4630      	mov	r0, r6
 800f69c:	f7fc f9e9 	bl	800ba72 <fe_add>
  fe_0(h->Z);
 800f6a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6a4:	f7fc f800 	bl	800b6a8 <fe_0>
  h->Z[0] = 4;
 800f6a8:	2304      	movs	r3, #4
 800f6aa:	6523      	str	r3, [r4, #80]	; 0x50
  fe_mul(h->T,h->X,h->Y);
 800f6ac:	4632      	mov	r2, r6
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800f6b4:	f7fc fc12 	bl	800bedc <fe_mul>
  fe_add(h->X, h->X, h->X);
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f7fc f9d8 	bl	800ba72 <fe_add>
  fe_add(h->Y, h->Y, h->Y);
 800f6c2:	4632      	mov	r2, r6
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7fc f9d3 	bl	800ba72 <fe_add>
  for (i = 3;i < 64;i += 2) {
 800f6cc:	2603      	movs	r6, #3
    ge_select(&t,i / 2,e[i]);
 800f6ce:	57aa      	ldrsb	r2, [r5, r6]
 800f6d0:	1071      	asrs	r1, r6, #1
 800f6d2:	a82e      	add	r0, sp, #184	; 0xb8
 800f6d4:	f7fd fed2 	bl	800d47c <ge_select>
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 800f6d8:	aa2e      	add	r2, sp, #184	; 0xb8
 800f6da:	4621      	mov	r1, r4
 800f6dc:	a84c      	add	r0, sp, #304	; 0x130
 800f6de:	f7fd fd90 	bl	800d202 <ge_madd>
  for (i = 3;i < 64;i += 2) {
 800f6e2:	3602      	adds	r6, #2
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 800f6e4:	a94c      	add	r1, sp, #304	; 0x130
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f7fd fdd1 	bl	800d28e <ge_p1p1_to_p3>
  for (i = 3;i < 64;i += 2) {
 800f6ec:	2e41      	cmp	r6, #65	; 0x41
 800f6ee:	d1ee      	bne.n	800f6ce <ge_scalarmult_base+0xa2>
  ge_p3_dbl(&r,h);  ge_p1p1_to_p2(&s,&r);
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	a84c      	add	r0, sp, #304	; 0x130
 800f6f4:	f7fd fe90 	bl	800d418 <ge_p3_dbl>
 800f6f8:	a94c      	add	r1, sp, #304	; 0x130
 800f6fa:	a810      	add	r0, sp, #64	; 0x40
 800f6fc:	f7fd fd68 	bl	800d1d0 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p2(&s,&r);
 800f700:	a910      	add	r1, sp, #64	; 0x40
 800f702:	a84c      	add	r0, sp, #304	; 0x130
 800f704:	f7fd fe50 	bl	800d3a8 <ge_p2_dbl>
 800f708:	a94c      	add	r1, sp, #304	; 0x130
 800f70a:	a810      	add	r0, sp, #64	; 0x40
 800f70c:	f7fd fd60 	bl	800d1d0 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p2(&s,&r);
 800f710:	a910      	add	r1, sp, #64	; 0x40
 800f712:	a84c      	add	r0, sp, #304	; 0x130
 800f714:	f7fd fe48 	bl	800d3a8 <ge_p2_dbl>
 800f718:	a94c      	add	r1, sp, #304	; 0x130
 800f71a:	a810      	add	r0, sp, #64	; 0x40
 800f71c:	f7fd fd58 	bl	800d1d0 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p3(h,&r);
 800f720:	a910      	add	r1, sp, #64	; 0x40
 800f722:	a84c      	add	r0, sp, #304	; 0x130
 800f724:	f7fd fe40 	bl	800d3a8 <ge_p2_dbl>
 800f728:	a94c      	add	r1, sp, #304	; 0x130
 800f72a:	4620      	mov	r0, r4
 800f72c:	f7fd fdaf 	bl	800d28e <ge_p1p1_to_p3>
  for (i = 0;i < 64;i += 2) {
 800f730:	2600      	movs	r6, #0
    ge_select(&t,i / 2,e[i]);
 800f732:	57aa      	ldrsb	r2, [r5, r6]
 800f734:	1071      	asrs	r1, r6, #1
 800f736:	a82e      	add	r0, sp, #184	; 0xb8
 800f738:	f7fd fea0 	bl	800d47c <ge_select>
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 800f73c:	aa2e      	add	r2, sp, #184	; 0xb8
 800f73e:	4621      	mov	r1, r4
 800f740:	a84c      	add	r0, sp, #304	; 0x130
 800f742:	f7fd fd5e 	bl	800d202 <ge_madd>
  for (i = 0;i < 64;i += 2) {
 800f746:	3602      	adds	r6, #2
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 800f748:	a94c      	add	r1, sp, #304	; 0x130
 800f74a:	4620      	mov	r0, r4
 800f74c:	f7fd fd9f 	bl	800d28e <ge_p1p1_to_p3>
  for (i = 0;i < 64;i += 2) {
 800f750:	2e40      	cmp	r6, #64	; 0x40
 800f752:	d1ee      	bne.n	800f732 <ge_scalarmult_base+0x106>
}
 800f754:	b075      	add	sp, #468	; 0x1d4
 800f756:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f758 <ge_double_scalarmult_vartime>:
{
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	b091      	sub	sp, #68	; 0x44
 800f75e:	468b      	mov	fp, r1
 800f760:	9003      	str	r0, [sp, #12]
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f762:	f44f 7080 	mov.w	r0, #256	; 0x100
{
 800f766:	4691      	mov	r9, r2
 800f768:	469a      	mov	sl, r3
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f76a:	f003 fd19 	bl	80131a0 <malloc>
 800f76e:	9001      	str	r0, [sp, #4]
 800f770:	2800      	cmp	r0, #0
 800f772:	f000 81cd 	beq.w	800fb10 <ge_double_scalarmult_vartime+0x3b8>
      ((bslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f776:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f77a:	f003 fd11 	bl	80131a0 <malloc>
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f77e:	4680      	mov	r8, r0
 800f780:	2800      	cmp	r0, #0
 800f782:	f000 81cb 	beq.w	800fb1c <ge_double_scalarmult_vartime+0x3c4>
      ((Ai = (ge_cached *)XMALLOC(8 * sizeof(*Ai), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f786:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800f78a:	f003 fd09 	bl	80131a0 <malloc>
      ((bslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f78e:	4606      	mov	r6, r0
 800f790:	2800      	cmp	r0, #0
 800f792:	f000 81ca 	beq.w	800fb2a <ge_double_scalarmult_vartime+0x3d2>
      ((t = (ge_p1p1 *)XMALLOC(sizeof(*t), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f796:	20a0      	movs	r0, #160	; 0xa0
 800f798:	f003 fd02 	bl	80131a0 <malloc>
      ((Ai = (ge_cached *)XMALLOC(8 * sizeof(*Ai), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f79c:	4604      	mov	r4, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	f000 81c7 	beq.w	800fb32 <ge_double_scalarmult_vartime+0x3da>
      ((u = (ge_p3 *)XMALLOC(sizeof(*u), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f7a4:	20a0      	movs	r0, #160	; 0xa0
 800f7a6:	f003 fcfb 	bl	80131a0 <malloc>
      ((t = (ge_p1p1 *)XMALLOC(sizeof(*t), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	f000 81c3 	beq.w	800fb38 <ge_double_scalarmult_vartime+0x3e0>
      ((A2 = (ge_p3 *)XMALLOC(sizeof(*A2), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL))
 800f7b2:	20a0      	movs	r0, #160	; 0xa0
 800f7b4:	f003 fcf4 	bl	80131a0 <malloc>
      ((u = (ge_p3 *)XMALLOC(sizeof(*u), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 800f7b8:	4607      	mov	r7, r0
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	f000 81b2 	beq.w	800fb24 <ge_double_scalarmult_vartime+0x3cc>
  slide(aslide,a);
 800f7c0:	9801      	ldr	r0, [sp, #4]
 800f7c2:	4659      	mov	r1, fp
 800f7c4:	f7fd fcb8 	bl	800d138 <slide>
  slide(bslide,b);
 800f7c8:	4651      	mov	r1, sl
 800f7ca:	4640      	mov	r0, r8
 800f7cc:	f7fd fcb4 	bl	800d138 <slide>
  ge_p3_to_cached(&Ai[0],A);
 800f7d0:	4649      	mov	r1, r9
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7fd fdc8 	bl	800d368 <ge_p3_to_cached>
  ge_p3_dbl(t,A); ge_p1p1_to_p3(A2,t);
 800f7d8:	4649      	mov	r1, r9
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f7fd fe1c 	bl	800d418 <ge_p3_dbl>
 800f7e0:	4621      	mov	r1, r4
 800f7e2:	4638      	mov	r0, r7
 800f7e4:	f7fd fd53 	bl	800d28e <ge_p1p1_to_p3>
  ge_add(t,A2,&Ai[0]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[1],u);
 800f7e8:	4632      	mov	r2, r6
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f7fd fd6f 	bl	800d2d0 <ge_add>
 800f7f2:	f106 09a0 	add.w	r9, r6, #160	; 0xa0
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f7fd fd48 	bl	800d28e <ge_p1p1_to_p3>
 800f7fe:	4648      	mov	r0, r9
 800f800:	4629      	mov	r1, r5
 800f802:	f7fd fdb1 	bl	800d368 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[1]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[2],u);
 800f806:	464a      	mov	r2, r9
 800f808:	4639      	mov	r1, r7
 800f80a:	4620      	mov	r0, r4
 800f80c:	f7fd fd60 	bl	800d2d0 <ge_add>
 800f810:	f506 79a0 	add.w	r9, r6, #320	; 0x140
 800f814:	4621      	mov	r1, r4
 800f816:	4628      	mov	r0, r5
 800f818:	f7fd fd39 	bl	800d28e <ge_p1p1_to_p3>
 800f81c:	4648      	mov	r0, r9
 800f81e:	4629      	mov	r1, r5
 800f820:	f7fd fda2 	bl	800d368 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[2]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[3],u);
 800f824:	464a      	mov	r2, r9
 800f826:	4639      	mov	r1, r7
 800f828:	4620      	mov	r0, r4
 800f82a:	f7fd fd51 	bl	800d2d0 <ge_add>
 800f82e:	f506 79f0 	add.w	r9, r6, #480	; 0x1e0
 800f832:	4621      	mov	r1, r4
 800f834:	4628      	mov	r0, r5
 800f836:	f7fd fd2a 	bl	800d28e <ge_p1p1_to_p3>
 800f83a:	4648      	mov	r0, r9
 800f83c:	4629      	mov	r1, r5
 800f83e:	f7fd fd93 	bl	800d368 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[3]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[4],u);
 800f842:	464a      	mov	r2, r9
 800f844:	4639      	mov	r1, r7
 800f846:	4620      	mov	r0, r4
 800f848:	f7fd fd42 	bl	800d2d0 <ge_add>
 800f84c:	f506 7920 	add.w	r9, r6, #640	; 0x280
 800f850:	4621      	mov	r1, r4
 800f852:	4628      	mov	r0, r5
 800f854:	f7fd fd1b 	bl	800d28e <ge_p1p1_to_p3>
 800f858:	4648      	mov	r0, r9
 800f85a:	4629      	mov	r1, r5
 800f85c:	f7fd fd84 	bl	800d368 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[4]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[5],u);
 800f860:	464a      	mov	r2, r9
 800f862:	4639      	mov	r1, r7
 800f864:	4620      	mov	r0, r4
 800f866:	f7fd fd33 	bl	800d2d0 <ge_add>
 800f86a:	f506 7948 	add.w	r9, r6, #800	; 0x320
 800f86e:	4621      	mov	r1, r4
 800f870:	4628      	mov	r0, r5
 800f872:	f7fd fd0c 	bl	800d28e <ge_p1p1_to_p3>
 800f876:	4648      	mov	r0, r9
 800f878:	4629      	mov	r1, r5
 800f87a:	f7fd fd75 	bl	800d368 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[5]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[6],u);
 800f87e:	464a      	mov	r2, r9
 800f880:	4639      	mov	r1, r7
 800f882:	4620      	mov	r0, r4
 800f884:	f7fd fd24 	bl	800d2d0 <ge_add>
 800f888:	f506 7970 	add.w	r9, r6, #960	; 0x3c0
 800f88c:	4621      	mov	r1, r4
 800f88e:	4628      	mov	r0, r5
 800f890:	f7fd fcfd 	bl	800d28e <ge_p1p1_to_p3>
 800f894:	4629      	mov	r1, r5
 800f896:	4648      	mov	r0, r9
 800f898:	f7fd fd66 	bl	800d368 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[6]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[7],u);
 800f89c:	464a      	mov	r2, r9
 800f89e:	4639      	mov	r1, r7
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f7fd fd15 	bl	800d2d0 <ge_add>
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7fd fcf0 	bl	800d28e <ge_p1p1_to_p3>
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	f506 608c 	add.w	r0, r6, #1120	; 0x460
 800f8b4:	f7fd fd58 	bl	800d368 <ge_p3_to_cached>
  fe_0(h->X);
 800f8b8:	9803      	ldr	r0, [sp, #12]
 800f8ba:	f7fb fef5 	bl	800b6a8 <fe_0>
  fe_1(h->Y);
 800f8be:	9b03      	ldr	r3, [sp, #12]
 800f8c0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800f8c4:	f7fb fee3 	bl	800b68e <fe_1>
  fe_1(h->Z);
 800f8c8:	9b03      	ldr	r3, [sp, #12]
 800f8ca:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800f8ce:	f7fb fede 	bl	800b68e <fe_1>
  for (i = 255;i >= 0;--i) {
 800f8d2:	22ff      	movs	r2, #255	; 0xff
    if (aslide[i] || bslide[i]) break;
 800f8d4:	9b01      	ldr	r3, [sp, #4]
 800f8d6:	569b      	ldrsb	r3, [r3, r2]
 800f8d8:	b91b      	cbnz	r3, 800f8e2 <ge_double_scalarmult_vartime+0x18a>
 800f8da:	f918 3002 	ldrsb.w	r3, [r8, r2]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d04b      	beq.n	800f97a <ge_double_scalarmult_vartime+0x222>
 800f8e2:	eb08 0302 	add.w	r3, r8, r2
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	9b01      	ldr	r3, [sp, #4]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	9302      	str	r3, [sp, #8]

#ifndef CURVED25519_ASM
static WC_INLINE void ge_sub(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)
{
    ge t0;
    fe_add(r->X,p->Y,p->X);
 800f8ee:	f105 0328 	add.w	r3, r5, #40	; 0x28
 800f8f2:	9304      	str	r3, [sp, #16]
  for (;i >= 0;--i) {
 800f8f4:	9b00      	ldr	r3, [sp, #0]
 800f8f6:	eba3 0308 	sub.w	r3, r3, r8
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	db3f      	blt.n	800f97e <ge_double_scalarmult_vartime+0x226>
    ge_p2_dbl(t,r);
 800f8fe:	9903      	ldr	r1, [sp, #12]
 800f900:	4620      	mov	r0, r4
 800f902:	f7fd fd51 	bl	800d3a8 <ge_p2_dbl>
    if (aslide[i] > 0) {
 800f906:	9b02      	ldr	r3, [sp, #8]
 800f908:	f993 3000 	ldrsb.w	r3, [r3]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dd54      	ble.n	800f9ba <ge_double_scalarmult_vartime+0x262>
      ge_p1p1_to_p3(u,t);
 800f910:	4621      	mov	r1, r4
 800f912:	4628      	mov	r0, r5
 800f914:	f7fd fcbb 	bl	800d28e <ge_p1p1_to_p3>
      ge_add(t,u,&Ai[aslide[i]/2]);
 800f918:	9b02      	ldr	r3, [sp, #8]
 800f91a:	f993 2000 	ldrsb.w	r2, [r3]
 800f91e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f922:	1052      	asrs	r2, r2, #1
 800f924:	23a0      	movs	r3, #160	; 0xa0
 800f926:	fb03 6202 	mla	r2, r3, r2, r6
 800f92a:	4629      	mov	r1, r5
 800f92c:	4620      	mov	r0, r4
 800f92e:	f7fd fccf 	bl	800d2d0 <ge_add>
    if (bslide[i] > 0) {
 800f932:	9b00      	ldr	r3, [sp, #0]
 800f934:	f993 3000 	ldrsb.w	r3, [r3]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f340 8093 	ble.w	800fa64 <ge_double_scalarmult_vartime+0x30c>
      ge_p1p1_to_p3(u,t);
 800f93e:	4621      	mov	r1, r4
 800f940:	4628      	mov	r0, r5
 800f942:	f7fd fca4 	bl	800d28e <ge_p1p1_to_p3>
      ge_madd(t,u,&Bi[bslide[i]/2]);
 800f946:	9b00      	ldr	r3, [sp, #0]
 800f948:	f993 2000 	ldrsb.w	r2, [r3]
 800f94c:	4b7b      	ldr	r3, [pc, #492]	; (800fb3c <ge_double_scalarmult_vartime+0x3e4>)
 800f94e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f952:	1052      	asrs	r2, r2, #1
 800f954:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800f958:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f95c:	4629      	mov	r1, r5
 800f95e:	4620      	mov	r0, r4
 800f960:	f7fd fc4f 	bl	800d202 <ge_madd>
    ge_p1p1_to_p2(r,t);
 800f964:	9803      	ldr	r0, [sp, #12]
 800f966:	4621      	mov	r1, r4
 800f968:	f7fd fc32 	bl	800d1d0 <ge_p1p1_to_p2>
  for (;i >= 0;--i) {
 800f96c:	9b00      	ldr	r3, [sp, #0]
 800f96e:	3b01      	subs	r3, #1
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	9b02      	ldr	r3, [sp, #8]
 800f974:	3b01      	subs	r3, #1
 800f976:	9302      	str	r3, [sp, #8]
 800f978:	e7bc      	b.n	800f8f4 <ge_double_scalarmult_vartime+0x19c>
  for (i = 255;i >= 0;--i) {
 800f97a:	3a01      	subs	r2, #1
 800f97c:	d2aa      	bcs.n	800f8d4 <ge_double_scalarmult_vartime+0x17c>
      ret = 0;
 800f97e:	f04f 0900 	mov.w	r9, #0
      XFREE(aslide, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800f982:	9801      	ldr	r0, [sp, #4]
 800f984:	f003 fc14 	bl	80131b0 <free>
  if (bslide != NULL)
 800f988:	f1b8 0f00 	cmp.w	r8, #0
 800f98c:	d002      	beq.n	800f994 <ge_double_scalarmult_vartime+0x23c>
      XFREE(bslide, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800f98e:	4640      	mov	r0, r8
 800f990:	f003 fc0e 	bl	80131b0 <free>
  if (Ai != NULL)
 800f994:	b116      	cbz	r6, 800f99c <ge_double_scalarmult_vartime+0x244>
      XFREE(Ai, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800f996:	4630      	mov	r0, r6
 800f998:	f003 fc0a 	bl	80131b0 <free>
  if (t != NULL)
 800f99c:	b114      	cbz	r4, 800f9a4 <ge_double_scalarmult_vartime+0x24c>
      XFREE(t, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800f99e:	4620      	mov	r0, r4
 800f9a0:	f003 fc06 	bl	80131b0 <free>
  if (u != NULL)
 800f9a4:	b115      	cbz	r5, 800f9ac <ge_double_scalarmult_vartime+0x254>
      XFREE(u, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f003 fc02 	bl	80131b0 <free>
  if (A2 != NULL)
 800f9ac:	2f00      	cmp	r7, #0
 800f9ae:	f000 80b1 	beq.w	800fb14 <ge_double_scalarmult_vartime+0x3bc>
      XFREE(A2, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800f9b2:	4638      	mov	r0, r7
 800f9b4:	f003 fbfc 	bl	80131b0 <free>
  return ret;
 800f9b8:	e0ac      	b.n	800fb14 <ge_double_scalarmult_vartime+0x3bc>
    } else if (aslide[i] < 0) {
 800f9ba:	d0ba      	beq.n	800f932 <ge_double_scalarmult_vartime+0x1da>
      ge_p1p1_to_p3(u,t);
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f7fd fc65 	bl	800d28e <ge_p1p1_to_p3>
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 800f9c4:	9b02      	ldr	r3, [sp, #8]
    fe_add(r->X,p->Y,p->X);
 800f9c6:	9904      	ldr	r1, [sp, #16]
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 800f9c8:	f993 9000 	ldrsb.w	r9, [r3]
 800f9cc:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    fe_sub(r->Y,p->Y,p->X);
 800f9d0:	f104 0a28 	add.w	sl, r4, #40	; 0x28
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 800f9d4:	23a0      	movs	r3, #160	; 0xa0
    fe_add(r->X,p->Y,p->X);
 800f9d6:	462a      	mov	r2, r5
 800f9d8:	4620      	mov	r0, r4
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 800f9da:	ea4f 0969 	mov.w	r9, r9, asr #1
 800f9de:	fb09 6913 	mls	r9, r9, r3, r6
    fe_mul(r->Z,r->X,q->YminusX);
 800f9e2:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    fe_add(r->X,p->Y,p->X);
 800f9e6:	f7fc f844 	bl	800ba72 <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 800f9ea:	9904      	ldr	r1, [sp, #16]
 800f9ec:	462a      	mov	r2, r5
 800f9ee:	4650      	mov	r0, sl
 800f9f0:	f7fc f921 	bl	800bc36 <fe_sub>
    fe_mul(r->Z,r->X,q->YminusX);
 800f9f4:	f109 0228 	add.w	r2, r9, #40	; 0x28
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	4658      	mov	r0, fp
 800f9fc:	f7fc fa6e 	bl	800bedc <fe_mul>
    fe_mul(r->Y,r->Y,q->YplusX);
 800fa00:	464a      	mov	r2, r9
 800fa02:	4651      	mov	r1, sl
 800fa04:	4650      	mov	r0, sl
 800fa06:	f7fc fa69 	bl	800bedc <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 800fa0a:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f105 0278 	add.w	r2, r5, #120	; 0x78
 800fa14:	f109 0178 	add.w	r1, r9, #120	; 0x78
 800fa18:	9305      	str	r3, [sp, #20]
 800fa1a:	f7fc fa5f 	bl	800bedc <fe_mul>
    fe_mul(r->X,p->Z,q->Z);
 800fa1e:	f109 0250 	add.w	r2, r9, #80	; 0x50
 800fa22:	f105 0150 	add.w	r1, r5, #80	; 0x50
 800fa26:	4620      	mov	r0, r4
 800fa28:	f7fc fa58 	bl	800bedc <fe_mul>
    fe_add(t0,r->X,r->X);
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	4621      	mov	r1, r4
 800fa30:	a806      	add	r0, sp, #24
 800fa32:	f7fc f81e 	bl	800ba72 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 800fa36:	4652      	mov	r2, sl
 800fa38:	4659      	mov	r1, fp
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f7fc f8fb 	bl	800bc36 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 800fa40:	4652      	mov	r2, sl
 800fa42:	4659      	mov	r1, fp
 800fa44:	4650      	mov	r0, sl
 800fa46:	f7fc f814 	bl	800ba72 <fe_add>
    fe_sub(r->Z,t0,r->T);
 800fa4a:	9b05      	ldr	r3, [sp, #20]
 800fa4c:	a906      	add	r1, sp, #24
 800fa4e:	461a      	mov	r2, r3
 800fa50:	4658      	mov	r0, fp
 800fa52:	f7fc f8f0 	bl	800bc36 <fe_sub>
    fe_add(r->T,t0,r->T);
 800fa56:	9b05      	ldr	r3, [sp, #20]
 800fa58:	a906      	add	r1, sp, #24
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fc f808 	bl	800ba72 <fe_add>
}
 800fa62:	e766      	b.n	800f932 <ge_double_scalarmult_vartime+0x1da>
    } else if (bslide[i] < 0) {
 800fa64:	f43f af7e 	beq.w	800f964 <ge_double_scalarmult_vartime+0x20c>
      ge_p1p1_to_p3(u,t);
 800fa68:	4621      	mov	r1, r4
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f7fd fc0f 	bl	800d28e <ge_p1p1_to_p3>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 800fa70:	9b00      	ldr	r3, [sp, #0]
    fe_add(r->X,p->Y,p->X);
 800fa72:	9904      	ldr	r1, [sp, #16]
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 800fa74:	f993 9000 	ldrsb.w	r9, [r3]
    fe_sub(r->Y,p->Y,p->X);
 800fa78:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    fe_add(r->X,p->Y,p->X);
 800fa7c:	462a      	mov	r2, r5
 800fa7e:	4620      	mov	r0, r4
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 800fa80:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    fe_add(r->X,p->Y,p->X);
 800fa84:	f7fb fff5 	bl	800ba72 <fe_add>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 800fa88:	ea4f 0969 	mov.w	r9, r9, asr #1
    fe_sub(r->Y,p->Y,p->X);
 800fa8c:	9904      	ldr	r1, [sp, #16]
 800fa8e:	462a      	mov	r2, r5
 800fa90:	4650      	mov	r0, sl
 800fa92:	f7fc f8d0 	bl	800bc36 <fe_sub>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 800fa96:	f1c9 0900 	rsb	r9, r9, #0
    fe_mul(r->Z,r->X,q->yminusx);
 800fa9a:	2178      	movs	r1, #120	; 0x78
 800fa9c:	fb01 f909 	mul.w	r9, r1, r9
 800faa0:	4b26      	ldr	r3, [pc, #152]	; (800fb3c <ge_double_scalarmult_vartime+0x3e4>)
 800faa2:	f104 0b50 	add.w	fp, r4, #80	; 0x50
 800faa6:	f109 0228 	add.w	r2, r9, #40	; 0x28
 800faaa:	441a      	add	r2, r3
 800faac:	4621      	mov	r1, r4
 800faae:	4658      	mov	r0, fp
 800fab0:	f7fc fa14 	bl	800bedc <fe_mul>
    fe_mul(r->Y,r->Y,q->yplusx);
 800fab4:	4b21      	ldr	r3, [pc, #132]	; (800fb3c <ge_double_scalarmult_vartime+0x3e4>)
 800fab6:	4651      	mov	r1, sl
 800fab8:	eb03 0209 	add.w	r2, r3, r9
 800fabc:	4650      	mov	r0, sl
 800fabe:	f7fc fa0d 	bl	800bedc <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 800fac2:	481e      	ldr	r0, [pc, #120]	; (800fb3c <ge_double_scalarmult_vartime+0x3e4>)
 800fac4:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800fac8:	f109 0150 	add.w	r1, r9, #80	; 0x50
 800facc:	f105 0278 	add.w	r2, r5, #120	; 0x78
 800fad0:	4401      	add	r1, r0
 800fad2:	4618      	mov	r0, r3
 800fad4:	4699      	mov	r9, r3
 800fad6:	f7fc fa01 	bl	800bedc <fe_mul>
    fe_add(t0,p->Z,p->Z);
 800fada:	f105 0250 	add.w	r2, r5, #80	; 0x50
 800fade:	4611      	mov	r1, r2
 800fae0:	a806      	add	r0, sp, #24
 800fae2:	f7fb ffc6 	bl	800ba72 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 800fae6:	4652      	mov	r2, sl
 800fae8:	4659      	mov	r1, fp
 800faea:	4620      	mov	r0, r4
 800faec:	f7fc f8a3 	bl	800bc36 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 800faf0:	4652      	mov	r2, sl
 800faf2:	4659      	mov	r1, fp
 800faf4:	4650      	mov	r0, sl
 800faf6:	f7fb ffbc 	bl	800ba72 <fe_add>
    fe_sub(r->Z,t0,r->T);
 800fafa:	464a      	mov	r2, r9
 800fafc:	a906      	add	r1, sp, #24
 800fafe:	4658      	mov	r0, fp
 800fb00:	f7fc f899 	bl	800bc36 <fe_sub>
    fe_add(r->T,t0,r->T);
 800fb04:	464a      	mov	r2, r9
 800fb06:	a906      	add	r1, sp, #24
 800fb08:	4648      	mov	r0, r9
 800fb0a:	f7fb ffb2 	bl	800ba72 <fe_add>
}
 800fb0e:	e729      	b.n	800f964 <ge_double_scalarmult_vartime+0x20c>
      ret = MEMORY_E;
 800fb10:	f06f 097c 	mvn.w	r9, #124	; 0x7c
}
 800fb14:	4648      	mov	r0, r9
 800fb16:	b011      	add	sp, #68	; 0x44
 800fb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ge_p3 *A2 = NULL;
 800fb1c:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 800fb1e:	4605      	mov	r5, r0
  ge_p1p1 *t = NULL;
 800fb20:	4604      	mov	r4, r0
  ge_cached *Ai = NULL; /* A,3A,5A,7A,9A,11A,13A,15A */
 800fb22:	4606      	mov	r6, r0
      ret = MEMORY_E;
 800fb24:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 800fb28:	e72b      	b.n	800f982 <ge_double_scalarmult_vartime+0x22a>
  ge_p3 *A2 = NULL;
 800fb2a:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 800fb2c:	4605      	mov	r5, r0
  ge_p1p1 *t = NULL;
 800fb2e:	4604      	mov	r4, r0
 800fb30:	e7f8      	b.n	800fb24 <ge_double_scalarmult_vartime+0x3cc>
  ge_p3 *A2 = NULL;
 800fb32:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 800fb34:	4605      	mov	r5, r0
 800fb36:	e7f5      	b.n	800fb24 <ge_double_scalarmult_vartime+0x3cc>
  ge_p3 *A2 = NULL;
 800fb38:	4607      	mov	r7, r0
 800fb3a:	e7f3      	b.n	800fb24 <ge_double_scalarmult_vartime+0x3cc>
 800fb3c:	08017c3c 	.word	0x08017c3c

0800fb40 <ge_frombytes_negate_vartime>:
{
 800fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb42:	4604      	mov	r4, r0
  fe_frombytes(h->Y,s);
 800fb44:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 800fb48:	b0b3      	sub	sp, #204	; 0xcc
  fe_1(h->Z);
 800fb4a:	f104 0750 	add.w	r7, r4, #80	; 0x50
  fe_frombytes(h->Y,s);
 800fb4e:	4628      	mov	r0, r5
{
 800fb50:	460e      	mov	r6, r1
  fe_frombytes(h->Y,s);
 800fb52:	f7fc f8a1 	bl	800bc98 <fe_frombytes>
  fe_1(h->Z);
 800fb56:	4638      	mov	r0, r7
 800fb58:	f7fb fd99 	bl	800b68e <fe_1>
  fe_sq(u,h->Y);
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	4668      	mov	r0, sp
 800fb60:	f7fb fdaf 	bl	800b6c2 <fe_sq>
  fe_mul(v,u,d);
 800fb64:	4a35      	ldr	r2, [pc, #212]	; (800fc3c <ge_frombytes_negate_vartime+0xfc>)
 800fb66:	4669      	mov	r1, sp
 800fb68:	a80a      	add	r0, sp, #40	; 0x28
 800fb6a:	f7fc f9b7 	bl	800bedc <fe_mul>
  fe_sub(u,u,h->Z);       /* u = y^2-1 */
 800fb6e:	463a      	mov	r2, r7
 800fb70:	4669      	mov	r1, sp
 800fb72:	4668      	mov	r0, sp
 800fb74:	f7fc f85f 	bl	800bc36 <fe_sub>
  fe_add(v,v,h->Z);       /* v = dy^2+1 */
 800fb78:	a90a      	add	r1, sp, #40	; 0x28
 800fb7a:	463a      	mov	r2, r7
 800fb7c:	4608      	mov	r0, r1
 800fb7e:	f7fb ff78 	bl	800ba72 <fe_add>
  fe_sq(v3,v);
 800fb82:	a90a      	add	r1, sp, #40	; 0x28
 800fb84:	a814      	add	r0, sp, #80	; 0x50
 800fb86:	f7fb fd9c 	bl	800b6c2 <fe_sq>
  fe_mul(v3,v3,v);        /* v3 = v^3 */
 800fb8a:	a914      	add	r1, sp, #80	; 0x50
 800fb8c:	aa0a      	add	r2, sp, #40	; 0x28
 800fb8e:	4608      	mov	r0, r1
 800fb90:	f7fc f9a4 	bl	800bedc <fe_mul>
  fe_sq(h->X,v3);
 800fb94:	a914      	add	r1, sp, #80	; 0x50
 800fb96:	4620      	mov	r0, r4
 800fb98:	f7fb fd93 	bl	800b6c2 <fe_sq>
  fe_mul(h->X,h->X,v);
 800fb9c:	aa0a      	add	r2, sp, #40	; 0x28
 800fb9e:	4621      	mov	r1, r4
 800fba0:	4620      	mov	r0, r4
 800fba2:	f7fc f99b 	bl	800bedc <fe_mul>
  fe_mul(h->X,h->X,u);    /* x = uv^7 */
 800fba6:	466a      	mov	r2, sp
 800fba8:	4621      	mov	r1, r4
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7fc f996 	bl	800bedc <fe_mul>
  fe_pow22523(h->X,h->X); /* x = (uv^7)^((q-5)/8) */
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f7fd f966 	bl	800ce84 <fe_pow22523>
  fe_mul(h->X,h->X,v3);
 800fbb8:	aa14      	add	r2, sp, #80	; 0x50
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f7fc f98d 	bl	800bedc <fe_mul>
  fe_mul(h->X,h->X,u);    /* x = uv^3(uv^7)^((q-5)/8) */
 800fbc2:	466a      	mov	r2, sp
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f7fc f988 	bl	800bedc <fe_mul>
  fe_sq(vxx,h->X);
 800fbcc:	4621      	mov	r1, r4
 800fbce:	a81e      	add	r0, sp, #120	; 0x78
 800fbd0:	f7fb fd77 	bl	800b6c2 <fe_sq>
  fe_mul(vxx,vxx,v);
 800fbd4:	a91e      	add	r1, sp, #120	; 0x78
 800fbd6:	4608      	mov	r0, r1
 800fbd8:	aa0a      	add	r2, sp, #40	; 0x28
 800fbda:	f7fc f97f 	bl	800bedc <fe_mul>
  fe_sub(check,vxx,u);    /* vx^2-u */
 800fbde:	a828      	add	r0, sp, #160	; 0xa0
 800fbe0:	466a      	mov	r2, sp
 800fbe2:	a91e      	add	r1, sp, #120	; 0x78
 800fbe4:	f7fc f827 	bl	800bc36 <fe_sub>
  if (fe_isnonzero(check)) {
 800fbe8:	a828      	add	r0, sp, #160	; 0xa0
 800fbea:	f7fd fa23 	bl	800d034 <fe_isnonzero>
 800fbee:	b168      	cbz	r0, 800fc0c <ge_frombytes_negate_vartime+0xcc>
    fe_add(check,vxx,u);  /* vx^2+u */
 800fbf0:	a828      	add	r0, sp, #160	; 0xa0
 800fbf2:	466a      	mov	r2, sp
 800fbf4:	a91e      	add	r1, sp, #120	; 0x78
 800fbf6:	f7fb ff3c 	bl	800ba72 <fe_add>
    if (fe_isnonzero(check)) return -1;
 800fbfa:	a828      	add	r0, sp, #160	; 0xa0
 800fbfc:	f7fd fa1a 	bl	800d034 <fe_isnonzero>
 800fc00:	b9c0      	cbnz	r0, 800fc34 <ge_frombytes_negate_vartime+0xf4>
    fe_mul(h->X,h->X,sqrtm1);
 800fc02:	4a0f      	ldr	r2, [pc, #60]	; (800fc40 <ge_frombytes_negate_vartime+0x100>)
 800fc04:	4621      	mov	r1, r4
 800fc06:	4620      	mov	r0, r4
 800fc08:	f7fc f968 	bl	800bedc <fe_mul>
  if (fe_isnegative(h->X) == (s[31] >> 7))
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f7fd fa29 	bl	800d064 <fe_isnegative>
 800fc12:	7ff3      	ldrb	r3, [r6, #31]
 800fc14:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 800fc18:	d103      	bne.n	800fc22 <ge_frombytes_negate_vartime+0xe2>
    fe_neg(h->X,h->X);
 800fc1a:	4621      	mov	r1, r4
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f7fd f9e3 	bl	800cfe8 <fe_neg>
  fe_mul(h->T,h->X,h->Y);
 800fc22:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800fc26:	462a      	mov	r2, r5
 800fc28:	4621      	mov	r1, r4
 800fc2a:	f7fc f957 	bl	800bedc <fe_mul>
  return 0;
 800fc2e:	2000      	movs	r0, #0
}
 800fc30:	b033      	add	sp, #204	; 0xcc
 800fc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (fe_isnonzero(check)) return -1;
 800fc34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc38:	e7fa      	b.n	800fc30 <ge_frombytes_negate_vartime+0xf0>
 800fc3a:	bf00      	nop
 800fc3c:	0801f7fc 	.word	0x0801f7fc
 800fc40:	0801f84c 	.word	0x0801f84c

0800fc44 <ge_tobytes>:
#endif

/* ge tobytes */
void ge_tobytes(unsigned char *s,const ge_p2 *h)
{
 800fc44:	b530      	push	{r4, r5, lr}
 800fc46:	b09f      	sub	sp, #124	; 0x7c
 800fc48:	4604      	mov	r4, r0
 800fc4a:	460d      	mov	r5, r1
  ge recip;
  ge x;
  ge y;

  fe_invert(recip,h->Z);
 800fc4c:	4668      	mov	r0, sp
 800fc4e:	3150      	adds	r1, #80	; 0x50
 800fc50:	f7fc fc06 	bl	800c460 <fe_invert>
  fe_mul(x,h->X,recip);
 800fc54:	466a      	mov	r2, sp
 800fc56:	4629      	mov	r1, r5
 800fc58:	a80a      	add	r0, sp, #40	; 0x28
 800fc5a:	f7fc f93f 	bl	800bedc <fe_mul>
  fe_mul(y,h->Y,recip);
 800fc5e:	466a      	mov	r2, sp
 800fc60:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800fc64:	a814      	add	r0, sp, #80	; 0x50
 800fc66:	f7fc f939 	bl	800bedc <fe_mul>
  fe_tobytes(s,y);
 800fc6a:	a914      	add	r1, sp, #80	; 0x50
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	f7fb ff31 	bl	800bad4 <fe_tobytes>
  s[31] ^= (unsigned char)(fe_isnegative(x) << 7);
 800fc72:	a80a      	add	r0, sp, #40	; 0x28
 800fc74:	f7fd f9f6 	bl	800d064 <fe_isnegative>
 800fc78:	7fe3      	ldrb	r3, [r4, #31]
 800fc7a:	ea83 13c0 	eor.w	r3, r3, r0, lsl #7
 800fc7e:	77e3      	strb	r3, [r4, #31]
}
 800fc80:	b01f      	add	sp, #124	; 0x7c
 800fc82:	bd30      	pop	{r4, r5, pc}

0800fc84 <fp_cond_swap_ct_ex>:
}

#endif /* WOLFSSL_KEY_GEN || HAVE_ECC */

static int fp_cond_swap_ct_ex(mp_int* a, mp_int* b, int c, int m, mp_int* t)
{
 800fc84:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    mp_digit mask = (mp_digit)0 - m;

    t->used = (a->used ^ b->used) & mask;
 800fc86:	680d      	ldr	r5, [r1, #0]
 800fc88:	6804      	ldr	r4, [r0, #0]
{
 800fc8a:	9e05      	ldr	r6, [sp, #20]
    t->used = (a->used ^ b->used) & mask;
 800fc8c:	406c      	eors	r4, r5
    mp_digit mask = (mp_digit)0 - m;
 800fc8e:	425b      	negs	r3, r3
    t->used = (a->used ^ b->used) & mask;
 800fc90:	401c      	ands	r4, r3
 800fc92:	6034      	str	r4, [r6, #0]
    for (i = 0; i < c; i++) {
 800fc94:	2501      	movs	r5, #1
 800fc96:	f105 0c01 	add.w	ip, r5, #1
 800fc9a:	3d01      	subs	r5, #1
 800fc9c:	42aa      	cmp	r2, r5
 800fc9e:	dc13      	bgt.n	800fcc8 <fp_cond_swap_ct_ex+0x44>
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
    }
    a->used ^= t->used;
 800fca0:	6803      	ldr	r3, [r0, #0]
 800fca2:	4063      	eors	r3, r4
 800fca4:	f106 0408 	add.w	r4, r6, #8
 800fca8:	f840 3b08 	str.w	r3, [r0], #8
    for (i = 0; i < c; i++) {
 800fcac:	46a4      	mov	ip, r4
 800fcae:	2300      	movs	r3, #0
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	db13      	blt.n	800fcdc <fp_cond_swap_ct_ex+0x58>
        a->dp[i] ^= t->dp[i];
    }
    b->used ^= t->used;
 800fcb4:	680b      	ldr	r3, [r1, #0]
 800fcb6:	6830      	ldr	r0, [r6, #0]
 800fcb8:	4043      	eors	r3, r0
 800fcba:	f841 3b08 	str.w	r3, [r1], #8
    for (i = 0; i < c; i++) {
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	db13      	blt.n	800fcec <fp_cond_swap_ct_ex+0x68>
        b->dp[i] ^= t->dp[i];
    }

    return FP_OKAY;
}
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 800fcc8:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
 800fccc:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 800fcd0:	407d      	eors	r5, r7
 800fcd2:	401d      	ands	r5, r3
 800fcd4:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 800fcd8:	4665      	mov	r5, ip
 800fcda:	e7dc      	b.n	800fc96 <fp_cond_swap_ct_ex+0x12>
        a->dp[i] ^= t->dp[i];
 800fcdc:	f85c 5b04 	ldr.w	r5, [ip], #4
 800fce0:	6807      	ldr	r7, [r0, #0]
 800fce2:	407d      	eors	r5, r7
 800fce4:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < c; i++) {
 800fce8:	3301      	adds	r3, #1
 800fcea:	e7e1      	b.n	800fcb0 <fp_cond_swap_ct_ex+0x2c>
        b->dp[i] ^= t->dp[i];
 800fcec:	6808      	ldr	r0, [r1, #0]
 800fcee:	f854 5b04 	ldr.w	r5, [r4], #4
 800fcf2:	4068      	eors	r0, r5
 800fcf4:	f841 0b04 	str.w	r0, [r1], #4
    for (i = 0; i < c; i++) {
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	e7e1      	b.n	800fcc0 <fp_cond_swap_ct_ex+0x3c>

0800fcfc <fp_sqr_comba8>:



#ifdef TFM_SQR8
int fp_sqr_comba8(fp_int *A, fp_int *B)
{
 800fcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd00:	b089      	sub	sp, #36	; 0x24
 800fd02:	4607      	mov	r7, r0
#else
   fp_digit *b;
#endif

#ifdef WOLFSSL_SMALL_STACK
   b = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800fd04:	2040      	movs	r0, #64	; 0x40
{
 800fd06:	9102      	str	r1, [sp, #8]
   b = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800fd08:	f003 fa4a 	bl	80131a0 <malloc>
   if (b == NULL)
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	f000 821d 	beq.w	801014e <fp_sqr_comba8+0x452>

   /* clear carries */
   CLEAR_CARRY;

   /* output 0 */
   SQRADD(a[0],a[0]);
 800fd14:	68b8      	ldr	r0, [r7, #8]
   COMBA_STORE(b[0]);

   /* output 1 */
   CARRY_FORWARD;
   SQRADD2(a[0], a[1]); 
 800fd16:	68f9      	ldr	r1, [r7, #12]
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
   COMBA_STORE(b[3]);

   /* output 4 */
   CARRY_FORWARD;
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fd18:	f8d7 8018 	ldr.w	r8, [r7, #24]
   SQRADD2(a[0], a[1]); 
 800fd1c:	fba0 c501 	umull	ip, r5, r0, r1
   SQRADD(a[0],a[0]);
 800fd20:	fba0 3400 	umull	r3, r4, r0, r0
   SQRADD2(a[0], a[1]); 
 800fd24:	eb14 040c 	adds.w	r4, r4, ip
 800fd28:	f145 0200 	adc.w	r2, r5, #0
 800fd2c:	eb14 040c 	adds.w	r4, r4, ip
 800fd30:	6074      	str	r4, [r6, #4]
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 800fd32:	693c      	ldr	r4, [r7, #16]
   SQRADD(a[0],a[0]);
 800fd34:	6033      	str	r3, [r6, #0]
   SQRADD2(a[0], a[1]); 
 800fd36:	f145 0500 	adc.w	r5, r5, #0
   SQRADD(a[0],a[0]);
 800fd3a:	2300      	movs	r3, #0
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 800fd3c:	fba0 ec04 	umull	lr, ip, r0, r4
   SQRADD2(a[0], a[1]); 
 800fd40:	1952      	adds	r2, r2, r5
 800fd42:	eb43 0503 	adc.w	r5, r3, r3
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 800fd46:	eb12 020e 	adds.w	r2, r2, lr
 800fd4a:	9400      	str	r4, [sp, #0]
 800fd4c:	f14c 0400 	adc.w	r4, ip, #0
 800fd50:	192d      	adds	r5, r5, r4
 800fd52:	eb43 0403 	adc.w	r4, r3, r3
 800fd56:	eb12 020e 	adds.w	r2, r2, lr
 800fd5a:	f14c 0c00 	adc.w	ip, ip, #0
 800fd5e:	eb1c 0c05 	adds.w	ip, ip, r5
 800fd62:	461d      	mov	r5, r3
 800fd64:	fbe1 2501 	umlal	r2, r5, r1, r1
 800fd68:	60b2      	str	r2, [r6, #8]
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 800fd6a:	697a      	ldr	r2, [r7, #20]
 800fd6c:	9201      	str	r2, [sp, #4]
 800fd6e:	fba0 a902 	umull	sl, r9, r0, r2
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 800fd72:	f144 0400 	adc.w	r4, r4, #0
 800fd76:	eb1c 0c05 	adds.w	ip, ip, r5
 800fd7a:	eb43 0503 	adc.w	r5, r3, r3
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 800fd7e:	eb1c 0c0a 	adds.w	ip, ip, sl
 800fd82:	f149 0200 	adc.w	r2, r9, #0
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 800fd86:	eb04 0e05 	add.w	lr, r4, r5
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 800fd8a:	eb1e 0e02 	adds.w	lr, lr, r2
 800fd8e:	eb43 0503 	adc.w	r5, r3, r3
 800fd92:	9a00      	ldr	r2, [sp, #0]
 800fd94:	eb1c 0c0a 	adds.w	ip, ip, sl
 800fd98:	f149 0900 	adc.w	r9, r9, #0
 800fd9c:	eb1e 0e09 	adds.w	lr, lr, r9
 800fda0:	fba1 a902 	umull	sl, r9, r1, r2
 800fda4:	f145 0500 	adc.w	r5, r5, #0
 800fda8:	eb1c 0c0a 	adds.w	ip, ip, sl
 800fdac:	f149 0200 	adc.w	r2, r9, #0
 800fdb0:	eb1e 0e02 	adds.w	lr, lr, r2
 800fdb4:	f145 0500 	adc.w	r5, r5, #0
 800fdb8:	eb1c 0c0a 	adds.w	ip, ip, sl
 800fdbc:	f149 0200 	adc.w	r2, r9, #0
 800fdc0:	eb12 020e 	adds.w	r2, r2, lr
 800fdc4:	f8c6 c00c 	str.w	ip, [r6, #12]
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fdc8:	fba0 ec08 	umull	lr, ip, r0, r8
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 800fdcc:	eb43 0403 	adc.w	r4, r3, r3
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fdd0:	eb12 020e 	adds.w	r2, r2, lr
 800fdd4:	f14c 0900 	adc.w	r9, ip, #0
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 800fdd8:	442c      	add	r4, r5
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fdda:	eb14 0409 	adds.w	r4, r4, r9
 800fdde:	eb43 0b03 	adc.w	fp, r3, r3
 800fde2:	9d01      	ldr	r5, [sp, #4]
   COMBA_STORE(b[4]);

   /* output 5 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fde4:	f8d7 901c 	ldr.w	r9, [r7, #28]
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fde8:	eb12 020e 	adds.w	r2, r2, lr
 800fdec:	f14c 0c00 	adc.w	ip, ip, #0
 800fdf0:	fba1 e505 	umull	lr, r5, r1, r5
 800fdf4:	eb14 040c 	adds.w	r4, r4, ip
 800fdf8:	f14b 0b00 	adc.w	fp, fp, #0
 800fdfc:	eb12 020e 	adds.w	r2, r2, lr
 800fe00:	f145 0c00 	adc.w	ip, r5, #0
 800fe04:	eb14 040c 	adds.w	r4, r4, ip
 800fe08:	f14b 0b00 	adc.w	fp, fp, #0
 800fe0c:	eb12 020e 	adds.w	r2, r2, lr
 800fe10:	f8dd c000 	ldr.w	ip, [sp]
 800fe14:	f145 0500 	adc.w	r5, r5, #0
 800fe18:	192c      	adds	r4, r5, r4
 800fe1a:	461d      	mov	r5, r3
 800fe1c:	fbec 250c 	umlal	r2, r5, ip, ip
 800fe20:	f14b 0b00 	adc.w	fp, fp, #0
 800fe24:	6132      	str	r2, [r6, #16]
 800fe26:	1964      	adds	r4, r4, r5
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fe28:	fba0 2e09 	umull	r2, lr, r0, r9
 800fe2c:	461d      	mov	r5, r3
 800fe2e:	fbe1 2508 	umlal	r2, r5, r1, r8
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fe32:	9403      	str	r4, [sp, #12]
 800fe34:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fe38:	e9dd a400 	ldrd	sl, r4, [sp]
 800fe3c:	eb1e 0e05 	adds.w	lr, lr, r5
 800fe40:	eb43 0503 	adc.w	r5, r3, r3
 800fe44:	9504      	str	r5, [sp, #16]
 800fe46:	461d      	mov	r5, r3
 800fe48:	fbea 2504 	umlal	r2, r5, sl, r4
 800fe4c:	eb1e 0e05 	adds.w	lr, lr, r5
 800fe50:	eb43 0403 	adc.w	r4, r3, r3
 800fe54:	9405      	str	r4, [sp, #20]
 800fe56:	9c03      	ldr	r4, [sp, #12]
 800fe58:	1892      	adds	r2, r2, r2
 800fe5a:	eb43 0503 	adc.w	r5, r3, r3
 800fe5e:	1914      	adds	r4, r2, r4
 800fe60:	f145 0500 	adc.w	r5, r5, #0
 800fe64:	6174      	str	r4, [r6, #20]
 800fe66:	eb1e 0e0e 	adds.w	lr, lr, lr
   COMBA_STORE(b[5]);

   /* output 6 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800fe6a:	6a3c      	ldr	r4, [r7, #32]
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fe6c:	eb43 0a03 	adc.w	sl, r3, r3
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 800fe70:	44dc      	add	ip, fp
 800fe72:	eb1e 0e05 	adds.w	lr, lr, r5
 800fe76:	f14a 0a00 	adc.w	sl, sl, #0
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800fe7a:	461a      	mov	r2, r3
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fe7c:	eb1c 0c0e 	adds.w	ip, ip, lr
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800fe80:	fba0 5e04 	umull	r5, lr, r0, r4
 800fe84:	fbe1 5209 	umlal	r5, r2, r1, r9
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fe88:	f14a 0a00 	adc.w	sl, sl, #0
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800fe8c:	eb1e 0e02 	adds.w	lr, lr, r2
 800fe90:	eb43 0203 	adc.w	r2, r3, r3
 800fe94:	f8dd b000 	ldr.w	fp, [sp]
 800fe98:	9206      	str	r2, [sp, #24]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	fbeb 5208 	umlal	r5, r2, fp, r8
 800fea0:	eb1e 0e02 	adds.w	lr, lr, r2
 800fea4:	eb43 0203 	adc.w	r2, r3, r3
 800fea8:	196d      	adds	r5, r5, r5
 800feaa:	9207      	str	r2, [sp, #28]
 800feac:	eb43 0203 	adc.w	r2, r3, r3
 800feb0:	eb15 0c0c 	adds.w	ip, r5, ip
 800feb4:	f142 0200 	adc.w	r2, r2, #0
 800feb8:	eb1e 0e0e 	adds.w	lr, lr, lr
 800febc:	eb43 0503 	adc.w	r5, r3, r3
 800fec0:	eb1e 0e02 	adds.w	lr, lr, r2
 800fec4:	f145 0b00 	adc.w	fp, r5, #0
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 800fec8:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
 800fecc:	442a      	add	r2, r5
 800fece:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800fed2:	eb1a 020e 	adds.w	r2, sl, lr
 800fed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800feda:	469a      	mov	sl, r3
 800fedc:	fbee ca0e 	umlal	ip, sl, lr, lr
 800fee0:	f14b 0500 	adc.w	r5, fp, #0
 800fee4:	eb12 0a0a 	adds.w	sl, r2, sl
 800fee8:	eb43 0203 	adc.w	r2, r3, r3
 800feec:	9204      	str	r2, [sp, #16]
 800feee:	f8c6 c018 	str.w	ip, [r6, #24]
   COMBA_STORE(b[6]);

   /* output 7 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800fef2:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 800fef4:	f8dd e000 	ldr.w	lr, [sp]
 800fef8:	fba0 2c07 	umull	r2, ip, r0, r7
 800fefc:	4618      	mov	r0, r3
 800fefe:	fbe1 2004 	umlal	r2, r0, r1, r4
 800ff02:	eb1c 0c00 	adds.w	ip, ip, r0
 800ff06:	4618      	mov	r0, r3
 800ff08:	fbee 2009 	umlal	r2, r0, lr, r9
 800ff0c:	eb43 0b03 	adc.w	fp, r3, r3
 800ff10:	eb1c 0000 	adds.w	r0, ip, r0
 800ff14:	f14b 0c00 	adc.w	ip, fp, #0
 800ff18:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ff1c:	f8cd c00c 	str.w	ip, [sp, #12]
 800ff20:	469c      	mov	ip, r3
 800ff22:	fbee 2c08 	umlal	r2, ip, lr, r8
 800ff26:	eb10 000c 	adds.w	r0, r0, ip
 800ff2a:	eb43 0e03 	adc.w	lr, r3, r3
 800ff2e:	1892      	adds	r2, r2, r2
 800ff30:	eb43 0c03 	adc.w	ip, r3, r3
 800ff34:	eb12 020a 	adds.w	r2, r2, sl
 800ff38:	f14c 0c00 	adc.w	ip, ip, #0
 800ff3c:	1800      	adds	r0, r0, r0
 800ff3e:	eb43 0b03 	adc.w	fp, r3, r3
 800ff42:	eb10 000c 	adds.w	r0, r0, ip
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800ff46:	e9dd ca06 	ldrd	ip, sl, [sp, #24]
 800ff4a:	44d4      	add	ip, sl
 800ff4c:	eb05 0c4c 	add.w	ip, r5, ip, lsl #1
 800ff50:	9d04      	ldr	r5, [sp, #16]
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800ff52:	61f2      	str	r2, [r6, #28]
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 800ff54:	44ac      	add	ip, r5
 800ff56:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800ff5a:	eb1c 0000 	adds.w	r0, ip, r0
   COMBA_STORE(b[7]);

   /* output 8 */
   CARRY_FORWARD;
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800ff5e:	f8dd c000 	ldr.w	ip, [sp]
 800ff62:	fba1 1207 	umull	r1, r2, r1, r7
 800ff66:	461d      	mov	r5, r3
 800ff68:	fbec 1504 	umlal	r1, r5, ip, r4
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800ff6c:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800ff70:	1952      	adds	r2, r2, r5
 800ff72:	eb43 0503 	adc.w	r5, r3, r3
 800ff76:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ff7a:	9504      	str	r5, [sp, #16]
 800ff7c:	461d      	mov	r5, r3
 800ff7e:	fbec 1509 	umlal	r1, r5, ip, r9
 800ff82:	1952      	adds	r2, r2, r5
 800ff84:	eb43 0a03 	adc.w	sl, r3, r3
 800ff88:	1849      	adds	r1, r1, r1
 800ff8a:	eb43 0503 	adc.w	r5, r3, r3
 800ff8e:	1808      	adds	r0, r1, r0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800ff90:	9903      	ldr	r1, [sp, #12]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800ff92:	f145 0500 	adc.w	r5, r5, #0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800ff96:	448e      	add	lr, r1
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800ff98:	1892      	adds	r2, r2, r2
 800ff9a:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 800ff9e:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 800ffa2:	1952      	adds	r2, r2, r5
 800ffa4:	f14c 0c00 	adc.w	ip, ip, #0
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800ffa8:	eb1b 0202 	adds.w	r2, fp, r2
 800ffac:	469b      	mov	fp, r3
 800ffae:	fbe8 0b08 	umlal	r0, fp, r8, r8
 800ffb2:	f14c 0500 	adc.w	r5, ip, #0
 800ffb6:	eb12 0b0b 	adds.w	fp, r2, fp
 800ffba:	eb43 0203 	adc.w	r2, r3, r3
 800ffbe:	9203      	str	r2, [sp, #12]
   COMBA_STORE(b[8]);

   /* output 9 */
   CARRY_FORWARD;
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 800ffc0:	9a00      	ldr	r2, [sp, #0]
 800ffc2:	f8dd c004 	ldr.w	ip, [sp, #4]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800ffc6:	6230      	str	r0, [r6, #32]
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 800ffc8:	4619      	mov	r1, r3
 800ffca:	fba2 2007 	umull	r2, r0, r2, r7
 800ffce:	fbec 2104 	umlal	r2, r1, ip, r4
 800ffd2:	1840      	adds	r0, r0, r1
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	fbe8 2109 	umlal	r2, r1, r8, r9
 800ffda:	eb43 0c03 	adc.w	ip, r3, r3
 800ffde:	1840      	adds	r0, r0, r1
 800ffe0:	eb43 0e03 	adc.w	lr, r3, r3
 800ffe4:	1892      	adds	r2, r2, r2
 800ffe6:	eb43 0103 	adc.w	r1, r3, r3
 800ffea:	eb12 020b 	adds.w	r2, r2, fp
 800ffee:	f141 0100 	adc.w	r1, r1, #0
 800fff2:	1800      	adds	r0, r0, r0
 800fff4:	eb43 0b03 	adc.w	fp, r3, r3
 800fff8:	1840      	adds	r0, r0, r1
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800fffa:	9904      	ldr	r1, [sp, #16]
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 800fffc:	6272      	str	r2, [r6, #36]	; 0x24
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 800fffe:	448a      	add	sl, r1
 8010000:	9903      	ldr	r1, [sp, #12]
   COMBA_STORE(b[9]);

   /* output 10 */
   CARRY_FORWARD;
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8010002:	9a01      	ldr	r2, [sp, #4]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 8010004:	eb05 0a4a 	add.w	sl, r5, sl, lsl #1
 8010008:	448a      	add	sl, r1
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801000a:	fba2 5207 	umull	r5, r2, r2, r7
 801000e:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 8010012:	eb1a 0000 	adds.w	r0, sl, r0
 8010016:	44f4      	add	ip, lr
 8010018:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801001c:	1940      	adds	r0, r0, r5
 801001e:	f142 0100 	adc.w	r1, r2, #0
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 8010022:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8010026:	eb1b 0b01 	adds.w	fp, fp, r1
 801002a:	eb43 0c03 	adc.w	ip, r3, r3
 801002e:	1828      	adds	r0, r5, r0
 8010030:	f142 0200 	adc.w	r2, r2, #0
 8010034:	eb12 0b0b 	adds.w	fp, r2, fp
 8010038:	fba8 5204 	umull	r5, r2, r8, r4
 801003c:	f14c 0c00 	adc.w	ip, ip, #0
 8010040:	1828      	adds	r0, r5, r0
 8010042:	f142 0100 	adc.w	r1, r2, #0
 8010046:	eb11 0b0b 	adds.w	fp, r1, fp
 801004a:	f14c 0c00 	adc.w	ip, ip, #0
 801004e:	182d      	adds	r5, r5, r0
 8010050:	4619      	mov	r1, r3
 8010052:	f142 0200 	adc.w	r2, r2, #0
 8010056:	fbe9 5109 	umlal	r5, r1, r9, r9
 801005a:	eb12 020b 	adds.w	r2, r2, fp
 801005e:	f14c 0000 	adc.w	r0, ip, #0
 8010062:	1852      	adds	r2, r2, r1
   COMBA_STORE(b[10]);

   /* output 11 */
   CARRY_FORWARD;
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 8010064:	fba8 c107 	umull	ip, r1, r8, r7
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8010068:	eb43 0e03 	adc.w	lr, r3, r3
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801006c:	eb12 020c 	adds.w	r2, r2, ip
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8010070:	4470      	add	r0, lr
 8010072:	62b5      	str	r5, [r6, #40]	; 0x28
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 8010074:	f141 0500 	adc.w	r5, r1, #0
 8010078:	1940      	adds	r0, r0, r5
 801007a:	eb43 0503 	adc.w	r5, r3, r3
 801007e:	eb1c 0202 	adds.w	r2, ip, r2
 8010082:	f141 0100 	adc.w	r1, r1, #0
 8010086:	1809      	adds	r1, r1, r0
 8010088:	fba9 e004 	umull	lr, r0, r9, r4
 801008c:	f145 0500 	adc.w	r5, r5, #0
 8010090:	eb1e 0202 	adds.w	r2, lr, r2
 8010094:	f140 0c00 	adc.w	ip, r0, #0
 8010098:	eb1c 0c01 	adds.w	ip, ip, r1
 801009c:	f145 0500 	adc.w	r5, r5, #0
 80100a0:	eb1e 0202 	adds.w	r2, lr, r2
 80100a4:	f140 0100 	adc.w	r1, r0, #0
 80100a8:	eb11 010c 	adds.w	r1, r1, ip
 80100ac:	62f2      	str	r2, [r6, #44]	; 0x2c
   COMBA_STORE(b[11]);

   /* output 12 */
   CARRY_FORWARD;
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80100ae:	fba9 0207 	umull	r0, r2, r9, r7
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 80100b2:	eb43 0e03 	adc.w	lr, r3, r3
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80100b6:	1841      	adds	r1, r0, r1
 80100b8:	f142 0c00 	adc.w	ip, r2, #0
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 80100bc:	4475      	add	r5, lr
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80100be:	eb15 050c 	adds.w	r5, r5, ip
 80100c2:	eb43 0c03 	adc.w	ip, r3, r3
 80100c6:	1841      	adds	r1, r0, r1
 80100c8:	f142 0200 	adc.w	r2, r2, #0
 80100cc:	1952      	adds	r2, r2, r5
 80100ce:	461d      	mov	r5, r3
 80100d0:	fbe4 1504 	umlal	r1, r5, r4, r4
 80100d4:	f14c 0000 	adc.w	r0, ip, #0
 80100d8:	6331      	str	r1, [r6, #48]	; 0x30
 80100da:	1952      	adds	r2, r2, r5
   COMBA_STORE(b[12]);

   /* output 13 */
   CARRY_FORWARD;
   SQRADD2(a[6], a[7]); 
 80100dc:	fba4 4107 	umull	r4, r1, r4, r7
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80100e0:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADD2(a[6], a[7]); 
 80100e4:	1912      	adds	r2, r2, r4
 80100e6:	f141 0500 	adc.w	r5, r1, #0
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80100ea:	4460      	add	r0, ip
   SQRADD2(a[6], a[7]); 
 80100ec:	1940      	adds	r0, r0, r5
 80100ee:	eb43 0503 	adc.w	r5, r3, r3
 80100f2:	18a4      	adds	r4, r4, r2
 80100f4:	f141 0200 	adc.w	r2, r1, #0
 80100f8:	1812      	adds	r2, r2, r0
   COMBA_STORE(b[13]);

   /* output 14 */
   CARRY_FORWARD;
   SQRADD(a[7], a[7]); 
 80100fa:	4619      	mov	r1, r3
 80100fc:	fbe7 2107 	umlal	r2, r1, r7, r7
 8010100:	eb45 0101 	adc.w	r1, r5, r1
 8010104:	63f1      	str	r1, [r6, #60]	; 0x3c
   COMBA_STORE(b[14]);
   COMBA_STORE2(b[15]);
   COMBA_FINI;

   B->used = 16;
 8010106:	9902      	ldr	r1, [sp, #8]
   SQRADD(a[7], a[7]); 
 8010108:	63b2      	str	r2, [r6, #56]	; 0x38
   B->sign = FP_ZPOS;
 801010a:	604b      	str	r3, [r1, #4]
   XMEMCPY(B->dp, b, 16 * sizeof(fp_digit));
 801010c:	9b02      	ldr	r3, [sp, #8]
   SQRADD2(a[6], a[7]); 
 801010e:	6374      	str	r4, [r6, #52]	; 0x34
   B->used = 16;
 8010110:	2210      	movs	r2, #16
 8010112:	600a      	str	r2, [r1, #0]
   XMEMCPY(B->dp, b, 16 * sizeof(fp_digit));
 8010114:	f103 0008 	add.w	r0, r3, #8
 8010118:	2240      	movs	r2, #64	; 0x40
 801011a:	4631      	mov	r1, r6
 801011c:	f003 f850 	bl	80131c0 <memcpy>
   fp_clamp(B);
 8010120:	9b02      	ldr	r3, [sp, #8]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	b13b      	cbz	r3, 8010136 <fp_sqr_comba8+0x43a>
 8010126:	9902      	ldr	r1, [sp, #8]
 8010128:	1e5a      	subs	r2, r3, #1
 801012a:	3301      	adds	r3, #1
 801012c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010130:	b153      	cbz	r3, 8010148 <fp_sqr_comba8+0x44c>
 8010132:	9b02      	ldr	r3, [sp, #8]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	9a02      	ldr	r2, [sp, #8]

#ifdef WOLFSSL_SMALL_STACK
   XFREE(b, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8010138:	4630      	mov	r0, r6
   fp_clamp(B);
 801013a:	6053      	str	r3, [r2, #4]
   XFREE(b, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801013c:	f003 f838 	bl	80131b0 <free>
#endif
   return FP_OKAY;
 8010140:	2000      	movs	r0, #0
}
 8010142:	b009      	add	sp, #36	; 0x24
 8010144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   fp_clamp(B);
 8010148:	9b02      	ldr	r3, [sp, #8]
 801014a:	601a      	str	r2, [r3, #0]
 801014c:	e7e8      	b.n	8010120 <fp_sqr_comba8+0x424>
      return FP_MEM;
 801014e:	f06f 0001 	mvn.w	r0, #1
 8010152:	e7f6      	b.n	8010142 <fp_sqr_comba8+0x446>

08010154 <fp_mul_comba8>:



#ifdef TFM_MUL8
int fp_mul_comba8(fp_int *A, fp_int *B, fp_int *C)
{
 8010154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010158:	b085      	sub	sp, #20
 801015a:	e9cd 0101 	strd	r0, r1, [sp, #4]
#else
   fp_digit *at;
#endif

#ifdef WOLFSSL_SMALL_STACK
   at = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801015e:	2040      	movs	r0, #64	; 0x40
{
 8010160:	4617      	mov	r7, r2
   at = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8010162:	f003 f81d 	bl	80131a0 <malloc>
   if (at == NULL)
 8010166:	4680      	mov	r8, r0
 8010168:	2800      	cmp	r0, #0
 801016a:	f000 824f 	beq.w	801060c <fp_mul_comba8+0x4b8>
       return FP_MEM;
#endif

   XMEMCPY(at, A->dp, 8 * sizeof(fp_digit));
 801016e:	9b01      	ldr	r3, [sp, #4]
 8010170:	2220      	movs	r2, #32
 8010172:	f103 0108 	add.w	r1, r3, #8
 8010176:	f003 f823 	bl	80131c0 <memcpy>
   XMEMCPY(at+8, B->dp, 8 * sizeof(fp_digit));
 801017a:	9b02      	ldr	r3, [sp, #8]
 801017c:	2220      	movs	r2, #32
 801017e:	f103 0108 	add.w	r1, r3, #8
 8010182:	eb08 0002 	add.w	r0, r8, r2
 8010186:	f003 f81b 	bl	80131c0 <memcpy>
   COMBA_START;

   COMBA_CLEAR;
   /* 0 */
   MULADD(at[0], at[8]); 
 801018a:	f8d8 4000 	ldr.w	r4, [r8]
 801018e:	f8d8 e020 	ldr.w	lr, [r8, #32]
   COMBA_STORE(C->dp[0]);
   /* 1 */
   COMBA_FORWARD;
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 8010192:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[1]);
   /* 2 */
   COMBA_FORWARD;
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 8010196:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[2]);
   /* 3 */
   COMBA_FORWARD;
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801019a:	f8d8 9008 	ldr.w	r9, [r8, #8]
   COMBA_FORWARD;
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
   COMBA_STORE(C->dp[4]);
   /* 5 */
   COMBA_FORWARD;
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801019e:	f8d8 a02c 	ldr.w	sl, [r8, #44]	; 0x2c
   MULADD(at[0], at[8]); 
 80101a2:	fba4 320e 	umull	r3, r2, r4, lr
 80101a6:	60bb      	str	r3, [r7, #8]
 80101a8:	2300      	movs	r3, #0
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80101aa:	4619      	mov	r1, r3
 80101ac:	fbe4 2100 	umlal	r2, r1, r4, r0
 80101b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80101b4:	9000      	str	r0, [sp, #0]
 80101b6:	9d00      	ldr	r5, [sp, #0]
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80101b8:	f8dd c000 	ldr.w	ip, [sp]
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80101bc:	4618      	mov	r0, r3
 80101be:	fbee 2005 	umlal	r2, r0, lr, r5
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80101c2:	f8d8 5028 	ldr.w	r5, [r8, #40]	; 0x28
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80101c6:	60fa      	str	r2, [r7, #12]
 80101c8:	1809      	adds	r1, r1, r0
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80101ca:	461a      	mov	r2, r3
 80101cc:	fbe4 1205 	umlal	r1, r2, r4, r5
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80101d0:	eb43 0003 	adc.w	r0, r3, r3
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80101d4:	461d      	mov	r5, r3
 80101d6:	fbe6 150c 	umlal	r1, r5, r6, ip
 80101da:	1882      	adds	r2, r0, r2
 80101dc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80101e0:	eb43 0003 	adc.w	r0, r3, r3
 80101e4:	1952      	adds	r2, r2, r5
 80101e6:	461d      	mov	r5, r3
 80101e8:	fbee 1506 	umlal	r1, r5, lr, r6
 80101ec:	6139      	str	r1, [r7, #16]
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 80101ee:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80101f2:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80101f6:	f140 0000 	adc.w	r0, r0, #0
 80101fa:	1952      	adds	r2, r2, r5
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 80101fc:	461d      	mov	r5, r3
 80101fe:	fbe4 2501 	umlal	r2, r5, r4, r1
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 8010202:	f140 0100 	adc.w	r1, r0, #0
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 8010206:	1949      	adds	r1, r1, r5
 8010208:	461d      	mov	r5, r3
 801020a:	fbec 2506 	umlal	r2, r5, ip, r6
 801020e:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 8010212:	eb43 0003 	adc.w	r0, r3, r3
 8010216:	1949      	adds	r1, r1, r5
 8010218:	461d      	mov	r5, r3
 801021a:	fbe6 2509 	umlal	r2, r5, r6, r9
 801021e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010222:	f140 0000 	adc.w	r0, r0, #0
 8010226:	1949      	adds	r1, r1, r5
 8010228:	461d      	mov	r5, r3
 801022a:	fbee 2506 	umlal	r2, r5, lr, r6
 801022e:	f140 0000 	adc.w	r0, r0, #0
 8010232:	1949      	adds	r1, r1, r5
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 8010234:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8010238:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801023c:	617a      	str	r2, [r7, #20]
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801023e:	461a      	mov	r2, r3
 8010240:	fbe4 1205 	umlal	r1, r2, r4, r5
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 8010244:	f140 0000 	adc.w	r0, r0, #0
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 8010248:	461d      	mov	r5, r3
 801024a:	fbec 1506 	umlal	r1, r5, ip, r6
 801024e:	1880      	adds	r0, r0, r2
 8010250:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 8010254:	eb43 0203 	adc.w	r2, r3, r3
 8010258:	1940      	adds	r0, r0, r5
 801025a:	461d      	mov	r5, r3
 801025c:	fbe6 1509 	umlal	r1, r5, r6, r9
 8010260:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 8010264:	f8d8 900c 	ldr.w	r9, [r8, #12]
 8010268:	f142 0200 	adc.w	r2, r2, #0
 801026c:	1940      	adds	r0, r0, r5
 801026e:	460d      	mov	r5, r1
 8010270:	4619      	mov	r1, r3
 8010272:	fbe6 5109 	umlal	r5, r1, r6, r9
 8010276:	f8d8 6010 	ldr.w	r6, [r8, #16]
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801027a:	f8d8 9034 	ldr.w	r9, [r8, #52]	; 0x34
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801027e:	f142 0200 	adc.w	r2, r2, #0
 8010282:	1841      	adds	r1, r0, r1
 8010284:	4618      	mov	r0, r3
 8010286:	fbee 5006 	umlal	r5, r0, lr, r6
 801028a:	f142 0200 	adc.w	r2, r2, #0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801028e:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 8010292:	61bd      	str	r5, [r7, #24]
 8010294:	1809      	adds	r1, r1, r0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 8010296:	4618      	mov	r0, r3
 8010298:	fbe4 1009 	umlal	r1, r0, r4, r9
 801029c:	461d      	mov	r5, r3
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801029e:	f142 0200 	adc.w	r2, r2, #0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80102a2:	fbec 1506 	umlal	r1, r5, ip, r6
 80102a6:	1812      	adds	r2, r2, r0
 80102a8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80102ac:	eb43 0003 	adc.w	r0, r3, r3
 80102b0:	1952      	adds	r2, r2, r5
 80102b2:	461d      	mov	r5, r3
 80102b4:	fbe6 150a 	umlal	r1, r5, r6, sl
 80102b8:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80102bc:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 80102c0:	f140 0000 	adc.w	r0, r0, #0
 80102c4:	1952      	adds	r2, r2, r5
 80102c6:	461d      	mov	r5, r3
 80102c8:	fbe6 150a 	umlal	r1, r5, r6, sl
 80102cc:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 80102d0:	f8d8 a010 	ldr.w	sl, [r8, #16]
   COMBA_STORE(C->dp[5]);
   /* 6 */
   COMBA_FORWARD;
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 80102d4:	f8d8 b038 	ldr.w	fp, [r8, #56]	; 0x38
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80102d8:	f140 0000 	adc.w	r0, r0, #0
 80102dc:	1952      	adds	r2, r2, r5
 80102de:	461d      	mov	r5, r3
 80102e0:	fbe6 150a 	umlal	r1, r5, r6, sl
 80102e4:	f8d8 a014 	ldr.w	sl, [r8, #20]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 80102e8:	f8d8 6008 	ldr.w	r6, [r8, #8]
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80102ec:	f140 0000 	adc.w	r0, r0, #0
 80102f0:	1952      	adds	r2, r2, r5
 80102f2:	461d      	mov	r5, r3
 80102f4:	fbee 150a 	umlal	r1, r5, lr, sl
 80102f8:	f140 0000 	adc.w	r0, r0, #0
 80102fc:	1952      	adds	r2, r2, r5
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 80102fe:	461d      	mov	r5, r3
 8010300:	fbe4 250b 	umlal	r2, r5, r4, fp
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 8010304:	61f9      	str	r1, [r7, #28]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8010306:	4611      	mov	r1, r2
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 8010308:	f140 0200 	adc.w	r2, r0, #0
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801030c:	4618      	mov	r0, r3
 801030e:	fbec 1009 	umlal	r1, r0, ip, r9
 8010312:	1952      	adds	r2, r2, r5
 8010314:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8010318:	eb43 0503 	adc.w	r5, r3, r3
 801031c:	1812      	adds	r2, r2, r0
 801031e:	4618      	mov	r0, r3
 8010320:	fbe6 100c 	umlal	r1, r0, r6, ip
 8010324:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 8010328:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801032c:	f145 0500 	adc.w	r5, r5, #0
 8010330:	1812      	adds	r2, r2, r0
 8010332:	4618      	mov	r0, r3
 8010334:	fbe6 100c 	umlal	r1, r0, r6, ip
 8010338:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 801033c:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8010340:	f145 0500 	adc.w	r5, r5, #0
 8010344:	1812      	adds	r2, r2, r0
 8010346:	4618      	mov	r0, r3
 8010348:	fbe6 100c 	umlal	r1, r0, r6, ip
 801034c:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[6]);
   /* 7 */
   COMBA_FORWARD;
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8010350:	f8dd c000 	ldr.w	ip, [sp]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8010354:	f145 0500 	adc.w	r5, r5, #0
 8010358:	1812      	adds	r2, r2, r0
 801035a:	4618      	mov	r0, r3
 801035c:	fbe6 100a 	umlal	r1, r0, r6, sl
 8010360:	f145 0500 	adc.w	r5, r5, #0
 8010364:	1812      	adds	r2, r2, r0
 8010366:	f8d8 0018 	ldr.w	r0, [r8, #24]
 801036a:	461e      	mov	r6, r3
 801036c:	fbee 1600 	umlal	r1, r6, lr, r0
 8010370:	6239      	str	r1, [r7, #32]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8010372:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8010376:	f145 0500 	adc.w	r5, r5, #0
 801037a:	1996      	adds	r6, r2, r6
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801037c:	461a      	mov	r2, r3
 801037e:	fbe4 6201 	umlal	r6, r2, r4, r1
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8010382:	f145 0400 	adc.w	r4, r5, #0
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8010386:	18a4      	adds	r4, r4, r2
 8010388:	461a      	mov	r2, r3
 801038a:	fbec 620b 	umlal	r6, r2, ip, fp
 801038e:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8010392:	eb43 0503 	adc.w	r5, r3, r3
 8010396:	18a4      	adds	r4, r4, r2
 8010398:	461a      	mov	r2, r3
 801039a:	fbec 6209 	umlal	r6, r2, ip, r9
 801039e:	f145 0500 	adc.w	r5, r5, #0
 80103a2:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80103a6:	18a2      	adds	r2, r4, r2
 80103a8:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 80103ac:	9203      	str	r2, [sp, #12]
 80103ae:	461a      	mov	r2, r3
 80103b0:	fbec 6204 	umlal	r6, r2, ip, r4
 80103b4:	9c03      	ldr	r4, [sp, #12]
 80103b6:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 80103ba:	f145 0500 	adc.w	r5, r5, #0
 80103be:	18a2      	adds	r2, r4, r2
 80103c0:	f8d8 4010 	ldr.w	r4, [r8, #16]
 80103c4:	9203      	str	r2, [sp, #12]
 80103c6:	461a      	mov	r2, r3
 80103c8:	fbec 6204 	umlal	r6, r2, ip, r4
 80103cc:	9c03      	ldr	r4, [sp, #12]
 80103ce:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
 80103d2:	f145 0500 	adc.w	r5, r5, #0
 80103d6:	18a4      	adds	r4, r4, r2
 80103d8:	461a      	mov	r2, r3
 80103da:	fbec 620a 	umlal	r6, r2, ip, sl
 80103de:	f8d8 c024 	ldr.w	ip, [r8, #36]	; 0x24
 80103e2:	f145 0500 	adc.w	r5, r5, #0
 80103e6:	18a4      	adds	r4, r4, r2
 80103e8:	461a      	mov	r2, r3
 80103ea:	fbec 6200 	umlal	r6, r2, ip, r0
 80103ee:	f145 0500 	adc.w	r5, r5, #0
 80103f2:	18a4      	adds	r4, r4, r2
 80103f4:	f8d8 201c 	ldr.w	r2, [r8, #28]
 80103f8:	f145 0c00 	adc.w	ip, r5, #0
 80103fc:	461d      	mov	r5, r3
 80103fe:	fbee 6502 	umlal	r6, r5, lr, r2
 8010402:	1964      	adds	r4, r4, r5
   COMBA_STORE(C->dp[7]);
   /* 8 */
   COMBA_FORWARD;
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 8010404:	9d00      	ldr	r5, [sp, #0]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8010406:	627e      	str	r6, [r7, #36]	; 0x24
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 8010408:	4626      	mov	r6, r4
 801040a:	461c      	mov	r4, r3
 801040c:	fbe5 6401 	umlal	r6, r4, r5, r1
 8010410:	f8d8 e008 	ldr.w	lr, [r8, #8]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8010414:	f14c 0c00 	adc.w	ip, ip, #0
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 8010418:	eb1c 0c04 	adds.w	ip, ip, r4
 801041c:	461c      	mov	r4, r3
 801041e:	fbee 640b 	umlal	r6, r4, lr, fp
 8010422:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8010426:	eb43 0503 	adc.w	r5, r3, r3
 801042a:	eb1c 0c04 	adds.w	ip, ip, r4
 801042e:	461c      	mov	r4, r3
 8010430:	fbee 6409 	umlal	r6, r4, lr, r9
 8010434:	f145 0500 	adc.w	r5, r5, #0
 8010438:	eb1c 0c04 	adds.w	ip, ip, r4
 801043c:	f145 0400 	adc.w	r4, r5, #0
 8010440:	9400      	str	r4, [sp, #0]
 8010442:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 8010446:	f8d8 5010 	ldr.w	r5, [r8, #16]
 801044a:	461c      	mov	r4, r3
 801044c:	fbee 6405 	umlal	r6, r4, lr, r5
 8010450:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 8010454:	9d00      	ldr	r5, [sp, #0]
 8010456:	eb1c 0404 	adds.w	r4, ip, r4
 801045a:	469c      	mov	ip, r3
 801045c:	fbee 6c0a 	umlal	r6, ip, lr, sl
 8010460:	f8d8 e028 	ldr.w	lr, [r8, #40]	; 0x28
 8010464:	f145 0500 	adc.w	r5, r5, #0
 8010468:	eb14 0c0c 	adds.w	ip, r4, ip
 801046c:	461c      	mov	r4, r3
 801046e:	fbee 6400 	umlal	r6, r4, lr, r0
 8010472:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8010476:	f145 0500 	adc.w	r5, r5, #0
 801047a:	eb1c 0404 	adds.w	r4, ip, r4
 801047e:	469c      	mov	ip, r3
 8010480:	fbee 6c02 	umlal	r6, ip, lr, r2
 8010484:	f145 0500 	adc.w	r5, r5, #0
 8010488:	eb14 040c 	adds.w	r4, r4, ip
   COMBA_STORE(C->dp[8]);
   /* 9 */
   COMBA_FORWARD;
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801048c:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8010490:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 8010494:	62be      	str	r6, [r7, #40]	; 0x28
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 8010496:	461e      	mov	r6, r3
 8010498:	fbec 4601 	umlal	r4, r6, ip, r1
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801049c:	f145 0500 	adc.w	r5, r5, #0
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 80104a0:	469c      	mov	ip, r3
 80104a2:	fbee 4c0b 	umlal	r4, ip, lr, fp
 80104a6:	19ad      	adds	r5, r5, r6
 80104a8:	f8d8 e010 	ldr.w	lr, [r8, #16]
 80104ac:	eb43 0603 	adc.w	r6, r3, r3
 80104b0:	eb15 050c 	adds.w	r5, r5, ip
 80104b4:	469c      	mov	ip, r3
 80104b6:	fbee 4c09 	umlal	r4, ip, lr, r9
 80104ba:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 80104be:	f146 0600 	adc.w	r6, r6, #0
 80104c2:	eb15 050c 	adds.w	r5, r5, ip
 80104c6:	469c      	mov	ip, r3
 80104c8:	fbee 4c0a 	umlal	r4, ip, lr, sl
 80104cc:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 80104d0:	f146 0600 	adc.w	r6, r6, #0
 80104d4:	eb15 050c 	adds.w	r5, r5, ip
 80104d8:	469c      	mov	ip, r3
 80104da:	fbee 4c00 	umlal	r4, ip, lr, r0
 80104de:	f8d8 e028 	ldr.w	lr, [r8, #40]	; 0x28
 80104e2:	f146 0600 	adc.w	r6, r6, #0
 80104e6:	eb15 050c 	adds.w	r5, r5, ip
 80104ea:	469c      	mov	ip, r3
 80104ec:	fbee 4c02 	umlal	r4, ip, lr, r2
 80104f0:	f146 0600 	adc.w	r6, r6, #0
 80104f4:	eb15 050c 	adds.w	r5, r5, ip
   COMBA_STORE(C->dp[9]);
   /* 10 */
   COMBA_FORWARD;
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 80104f8:	f8d8 c00c 	ldr.w	ip, [r8, #12]
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 80104fc:	62fc      	str	r4, [r7, #44]	; 0x2c
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 80104fe:	461c      	mov	r4, r3
 8010500:	fbec 5401 	umlal	r5, r4, ip, r1
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 8010504:	f146 0600 	adc.w	r6, r6, #0
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 8010508:	f8d8 c010 	ldr.w	ip, [r8, #16]
 801050c:	1934      	adds	r4, r6, r4
 801050e:	461e      	mov	r6, r3
 8010510:	fbec 560b 	umlal	r5, r6, ip, fp
 8010514:	eb43 0e03 	adc.w	lr, r3, r3
 8010518:	19a4      	adds	r4, r4, r6
 801051a:	461e      	mov	r6, r3
 801051c:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8010520:	fbe9 560a 	umlal	r5, r6, r9, sl
 8010524:	f14e 0e00 	adc.w	lr, lr, #0
 8010528:	19a6      	adds	r6, r4, r6
 801052a:	461c      	mov	r4, r3
 801052c:	fbec 5400 	umlal	r5, r4, ip, r0
 8010530:	f14e 0e00 	adc.w	lr, lr, #0
 8010534:	1934      	adds	r4, r6, r4
 8010536:	f14e 0600 	adc.w	r6, lr, #0
 801053a:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 801053e:	469c      	mov	ip, r3
 8010540:	fbee 5c02 	umlal	r5, ip, lr, r2
 8010544:	eb14 040c 	adds.w	r4, r4, ip
   COMBA_STORE(C->dp[10]);
   /* 11 */
   COMBA_FORWARD;
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 8010548:	f8d8 c010 	ldr.w	ip, [r8, #16]
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801054c:	633d      	str	r5, [r7, #48]	; 0x30
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 801054e:	461d      	mov	r5, r3
 8010550:	fbec 4501 	umlal	r4, r5, ip, r1
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 8010554:	f146 0600 	adc.w	r6, r6, #0
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 8010558:	469c      	mov	ip, r3
 801055a:	fbea 4c0b 	umlal	r4, ip, sl, fp
 801055e:	1976      	adds	r6, r6, r5
 8010560:	eb43 0503 	adc.w	r5, r3, r3
 8010564:	eb16 060c 	adds.w	r6, r6, ip
 8010568:	469c      	mov	ip, r3
 801056a:	fbe9 4c00 	umlal	r4, ip, r9, r0
 801056e:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 8010572:	f145 0500 	adc.w	r5, r5, #0
 8010576:	eb16 060c 	adds.w	r6, r6, ip
 801057a:	469c      	mov	ip, r3
 801057c:	fbee 4c02 	umlal	r4, ip, lr, r2
 8010580:	f145 0500 	adc.w	r5, r5, #0
 8010584:	637c      	str	r4, [r7, #52]	; 0x34
 8010586:	eb16 060c 	adds.w	r6, r6, ip
   COMBA_STORE(C->dp[11]);
   /* 12 */
   COMBA_FORWARD;
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 801058a:	461c      	mov	r4, r3
 801058c:	fbea 6401 	umlal	r6, r4, sl, r1
 8010590:	469c      	mov	ip, r3
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 8010592:	f145 0500 	adc.w	r5, r5, #0
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 8010596:	fbeb 6c00 	umlal	r6, ip, fp, r0
 801059a:	192d      	adds	r5, r5, r4
 801059c:	eb43 0403 	adc.w	r4, r3, r3
 80105a0:	eb15 050c 	adds.w	r5, r5, ip
 80105a4:	469c      	mov	ip, r3
 80105a6:	fbe9 6c02 	umlal	r6, ip, r9, r2
 80105aa:	f144 0400 	adc.w	r4, r4, #0
 80105ae:	63be      	str	r6, [r7, #56]	; 0x38
 80105b0:	eb15 050c 	adds.w	r5, r5, ip
   COMBA_STORE(C->dp[12]);
   /* 13 */
   COMBA_FORWARD;
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 80105b4:	461e      	mov	r6, r3
 80105b6:	fbe0 5601 	umlal	r5, r6, r0, r1
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 80105ba:	f144 0000 	adc.w	r0, r4, #0
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 80105be:	1980      	adds	r0, r0, r6
 80105c0:	461e      	mov	r6, r3
 80105c2:	fbeb 5602 	umlal	r5, r6, fp, r2
 80105c6:	eb43 0403 	adc.w	r4, r3, r3
 80105ca:	1980      	adds	r0, r0, r6
   COMBA_STORE(C->dp[13]);
   /* 14 */
   COMBA_FORWARD;
   MULADD(at[7], at[15]); 
 80105cc:	fbe1 0302 	umlal	r0, r3, r1, r2
 80105d0:	eb44 0303 	adc.w	r3, r4, r3
 80105d4:	647b      	str	r3, [r7, #68]	; 0x44
   COMBA_STORE(C->dp[14]);
   COMBA_STORE2(C->dp[15]);
   C->used = 16;
 80105d6:	2310      	movs	r3, #16
 80105d8:	603b      	str	r3, [r7, #0]
   C->sign = A->sign ^ B->sign;
 80105da:	9b01      	ldr	r3, [sp, #4]
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 80105dc:	63fd      	str	r5, [r7, #60]	; 0x3c
   C->sign = A->sign ^ B->sign;
 80105de:	6859      	ldr	r1, [r3, #4]
 80105e0:	9b02      	ldr	r3, [sp, #8]
   MULADD(at[7], at[15]); 
 80105e2:	6438      	str	r0, [r7, #64]	; 0x40
   C->sign = A->sign ^ B->sign;
 80105e4:	685a      	ldr	r2, [r3, #4]
   fp_clamp(C);
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	b133      	cbz	r3, 80105f8 <fp_mul_comba8+0x4a4>
 80105ea:	1e58      	subs	r0, r3, #1
 80105ec:	3301      	adds	r3, #1
 80105ee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80105f2:	b14b      	cbz	r3, 8010608 <fp_mul_comba8+0x4b4>
   C->sign = A->sign ^ B->sign;
 80105f4:	ea81 0302 	eor.w	r3, r1, r2
   COMBA_FINI;

#ifdef WOLFSSL_SMALL_STACK
   XFREE(at, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80105f8:	4640      	mov	r0, r8
   fp_clamp(C);
 80105fa:	607b      	str	r3, [r7, #4]
   XFREE(at, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80105fc:	f002 fdd8 	bl	80131b0 <free>
#endif
   return FP_OKAY;
 8010600:	2000      	movs	r0, #0
}
 8010602:	b005      	add	sp, #20
 8010604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   fp_clamp(C);
 8010608:	6038      	str	r0, [r7, #0]
 801060a:	e7ec      	b.n	80105e6 <fp_mul_comba8+0x492>
       return FP_MEM;
 801060c:	f06f 0001 	mvn.w	r0, #1
 8010610:	e7f7      	b.n	8010602 <fp_mul_comba8+0x4ae>

08010612 <s_fp_add>:
{
 8010612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  y       = MAX(a->used, b->used);
 8010616:	6803      	ldr	r3, [r0, #0]
 8010618:	680c      	ldr	r4, [r1, #0]
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801061a:	6817      	ldr	r7, [r2, #0]
  y       = MAX(a->used, b->used);
 801061c:	42a3      	cmp	r3, r4
 801061e:	bfb8      	it	lt
 8010620:	4623      	movlt	r3, r4
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 8010622:	2f18      	cmp	r7, #24
 8010624:	bfa8      	it	ge
 8010626:	2718      	movge	r7, #24
  t = 0;
 8010628:	2500      	movs	r5, #0
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801062a:	46b8      	mov	r8, r7
  c->used = y;
 801062c:	6013      	str	r3, [r2, #0]
  for (x = 0; x < y; x++) {
 801062e:	2401      	movs	r4, #1
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 8010630:	46ac      	mov	ip, r5
  for (x = 0; x < y; x++) {
 8010632:	1c66      	adds	r6, r4, #1
 8010634:	3c01      	subs	r4, #1
 8010636:	42a3      	cmp	r3, r4
 8010638:	dc1b      	bgt.n	8010672 <s_fp_add+0x60>
 801063a:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
  if (t != 0) {
 801063e:	b135      	cbz	r5, 801064e <s_fp_add+0x3c>
     if (x == FP_SIZE)
 8010640:	2b18      	cmp	r3, #24
 8010642:	d02a      	beq.n	801069a <s_fp_add+0x88>
     c->dp[c->used++] = (fp_digit)t;
 8010644:	3302      	adds	r3, #2
 8010646:	2001      	movs	r0, #1
 8010648:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     ++x;
 801064c:	4401      	add	r1, r0
  c->used = x;
 801064e:	4613      	mov	r3, r2
     c->dp[x] = 0;
 8010650:	2000      	movs	r0, #0
  c->used = x;
 8010652:	f843 1b08 	str.w	r1, [r3], #8
  for (; x < oldused; x++) {
 8010656:	4541      	cmp	r1, r8
 8010658:	db19      	blt.n	801068e <s_fp_add+0x7c>
  fp_clamp(c);
 801065a:	6813      	ldr	r3, [r2, #0]
 801065c:	b12b      	cbz	r3, 801066a <s_fp_add+0x58>
 801065e:	1e59      	subs	r1, r3, #1
 8010660:	3301      	adds	r3, #1
 8010662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010666:	b1b3      	cbz	r3, 8010696 <s_fp_add+0x84>
 8010668:	6853      	ldr	r3, [r2, #4]
 801066a:	6053      	str	r3, [r2, #4]
  return FP_OKAY;
 801066c:	2000      	movs	r0, #0
}
 801066e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 8010672:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8010676:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 801067a:	19e4      	adds	r4, r4, r7
 801067c:	eb4c 0e0c 	adc.w	lr, ip, ip
 8010680:	1964      	adds	r4, r4, r5
      c->dp[x]   = (fp_digit)t;
 8010682:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
      t        >>= DIGIT_BIT;
 8010686:	f14e 0500 	adc.w	r5, lr, #0
 801068a:	4634      	mov	r4, r6
 801068c:	e7d1      	b.n	8010632 <s_fp_add+0x20>
     c->dp[x] = 0;
 801068e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  for (; x < oldused; x++) {
 8010692:	3101      	adds	r1, #1
 8010694:	e7df      	b.n	8010656 <s_fp_add+0x44>
  fp_clamp(c);
 8010696:	6011      	str	r1, [r2, #0]
 8010698:	e7df      	b.n	801065a <s_fp_add+0x48>
         return FP_VAL;
 801069a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801069e:	e7e6      	b.n	801066e <s_fp_add+0x5c>

080106a0 <s_fp_sub>:
{
 80106a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  c->used  = a->used;
 80106a2:	6807      	ldr	r7, [r0, #0]
  oldused  = c->used;
 80106a4:	6816      	ldr	r6, [r2, #0]
  oldbused = b->used;
 80106a6:	680b      	ldr	r3, [r1, #0]
  c->used  = a->used;
 80106a8:	6017      	str	r7, [r2, #0]
  for (x = 0; x < oldbused; x++) {
 80106aa:	2401      	movs	r4, #1
  t       = 0;
 80106ac:	2500      	movs	r5, #0
  for (x = 0; x < oldbused; x++) {
 80106ae:	f104 0c01 	add.w	ip, r4, #1
 80106b2:	3c01      	subs	r4, #1
 80106b4:	42a3      	cmp	r3, r4
 80106b6:	dc1b      	bgt.n	80106f0 <s_fp_sub+0x50>
 80106b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80106bc:	1c59      	adds	r1, r3, #1
  for (; x < a->used; x++) {
 80106be:	f101 0c01 	add.w	ip, r1, #1
 80106c2:	3901      	subs	r1, #1
 80106c4:	428f      	cmp	r7, r1
 80106c6:	dc24      	bgt.n	8010712 <s_fp_sub+0x72>
 80106c8:	1af9      	subs	r1, r7, r3
 80106ca:	429f      	cmp	r7, r3
 80106cc:	bfb8      	it	lt
 80106ce:	2100      	movlt	r1, #0
 80106d0:	440b      	add	r3, r1
     c->dp[x] = 0;
 80106d2:	2000      	movs	r0, #0
 80106d4:	f102 0108 	add.w	r1, r2, #8
  for (; x < oldused; x++) {
 80106d8:	42b3      	cmp	r3, r6
 80106da:	db24      	blt.n	8010726 <s_fp_sub+0x86>
  fp_clamp(c);
 80106dc:	6813      	ldr	r3, [r2, #0]
 80106de:	b12b      	cbz	r3, 80106ec <s_fp_sub+0x4c>
 80106e0:	1e59      	subs	r1, r3, #1
 80106e2:	3301      	adds	r3, #1
 80106e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106e8:	b30b      	cbz	r3, 801072e <s_fp_sub+0x8e>
 80106ea:	6853      	ldr	r3, [r2, #4]
 80106ec:	6053      	str	r3, [r2, #4]
}
 80106ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
 80106f0:	f851 e02c 	ldr.w	lr, [r1, ip, lsl #2]
 80106f4:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 80106f8:	ebb4 040e 	subs.w	r4, r4, lr
 80106fc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8010700:	1b64      	subs	r4, r4, r5
 8010702:	f16e 0500 	sbc.w	r5, lr, #0
     c->dp[x]  = (fp_digit)t;
 8010706:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 801070a:	f005 0501 	and.w	r5, r5, #1
 801070e:	4664      	mov	r4, ip
 8010710:	e7cd      	b.n	80106ae <s_fp_sub+0xe>
     t         = ((fp_word)a->dp[x]) - t;
 8010712:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 8010716:	1b64      	subs	r4, r4, r5
     c->dp[x]  = (fp_digit)t;
 8010718:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 801071c:	bf34      	ite	cc
 801071e:	2501      	movcc	r5, #1
 8010720:	2500      	movcs	r5, #0
 8010722:	4661      	mov	r1, ip
 8010724:	e7cb      	b.n	80106be <s_fp_sub+0x1e>
     c->dp[x] = 0;
 8010726:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  for (; x < oldused; x++) {
 801072a:	3301      	adds	r3, #1
 801072c:	e7d4      	b.n	80106d8 <s_fp_sub+0x38>
  fp_clamp(c);
 801072e:	6011      	str	r1, [r2, #0]
 8010730:	e7d4      	b.n	80106dc <s_fp_sub+0x3c>

08010732 <fp_mul_2>:
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 8010732:	6802      	ldr	r2, [r0, #0]
 8010734:	2a17      	cmp	r2, #23
{
 8010736:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 8010738:	dc2d      	bgt.n	8010796 <fp_mul_2+0x64>
 801073a:	d102      	bne.n	8010742 <fp_mul_2+0x10>
 801073c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801073e:	2b00      	cmp	r3, #0
 8010740:	db29      	blt.n	8010796 <fp_mul_2+0x64>
  b->used = a->used;
 8010742:	460b      	mov	r3, r1
  oldused = b->used;
 8010744:	f8d1 c000 	ldr.w	ip, [r1]
  b->used = a->used;
 8010748:	f843 2b08 	str.w	r2, [r3], #8
    r = 0;
 801074c:	2200      	movs	r2, #0
    tmpa = a->dp;
 801074e:	f100 0608 	add.w	r6, r0, #8
    tmpb = b->dp;
 8010752:	461c      	mov	r4, r3
    for (x = 0; x < a->used; x++) {
 8010754:	4615      	mov	r5, r2
 8010756:	6807      	ldr	r7, [r0, #0]
 8010758:	42af      	cmp	r7, r5
 801075a:	dc0f      	bgt.n	801077c <fp_mul_2+0x4a>
    if (r != 0) {
 801075c:	b122      	cbz	r2, 8010768 <fp_mul_2+0x36>
      *tmpb = 1;
 801075e:	2201      	movs	r2, #1
 8010760:	6022      	str	r2, [r4, #0]
      ++(b->used);
 8010762:	680a      	ldr	r2, [r1, #0]
 8010764:	3201      	adds	r2, #1
 8010766:	600a      	str	r2, [r1, #0]
    tmpb = b->dp + b->used;
 8010768:	680a      	ldr	r2, [r1, #0]
 801076a:	2400      	movs	r4, #0
 801076c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (x = b->used; x < oldused; x++) {
 8010770:	4562      	cmp	r2, ip
 8010772:	db0c      	blt.n	801078e <fp_mul_2+0x5c>
  b->sign = a->sign;
 8010774:	6843      	ldr	r3, [r0, #4]
 8010776:	604b      	str	r3, [r1, #4]
  return FP_OKAY;
 8010778:	2000      	movs	r0, #0
}
 801077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
 801077c:	f856 7b04 	ldr.w	r7, [r6], #4
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
 8010780:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8010784:	f844 2b04 	str.w	r2, [r4], #4
    for (x = 0; x < a->used; x++) {
 8010788:	3501      	adds	r5, #1
      r = rr;
 801078a:	0ffa      	lsrs	r2, r7, #31
 801078c:	e7e3      	b.n	8010756 <fp_mul_2+0x24>
      *tmpb++ = 0;
 801078e:	f843 4b04 	str.w	r4, [r3], #4
    for (x = b->used; x < oldused; x++) {
 8010792:	3201      	adds	r2, #1
 8010794:	e7ec      	b.n	8010770 <fp_mul_2+0x3e>
    return FP_VAL;
 8010796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801079a:	e7ee      	b.n	801077a <fp_mul_2+0x48>

0801079c <fp_mul_d>:
{
 801079c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c->used = a->used;
 801079e:	6803      	ldr	r3, [r0, #0]
   c->sign = a->sign;
 80107a0:	6847      	ldr	r7, [r0, #4]
   oldused = c->used;
 80107a2:	f8d2 c000 	ldr.w	ip, [r2]
   c->sign = a->sign;
 80107a6:	6057      	str	r7, [r2, #4]
   w       = 0;
 80107a8:	2400      	movs	r4, #0
   c->used = a->used;
 80107aa:	6013      	str	r3, [r2, #0]
   for (x = 0; x < a->used; x++) {
 80107ac:	2501      	movs	r5, #1
   w       = 0;
 80107ae:	4626      	mov	r6, r4
   for (x = 0; x < a->used; x++) {
 80107b0:	f105 0e01 	add.w	lr, r5, #1
 80107b4:	3d01      	subs	r5, #1
 80107b6:	42ab      	cmp	r3, r5
 80107b8:	dc1c      	bgt.n	80107f4 <fp_mul_d+0x58>
 80107ba:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   if (w != 0) {
 80107be:	b13c      	cbz	r4, 80107d0 <fp_mul_d+0x34>
      if (a->used == FP_SIZE)
 80107c0:	2b18      	cmp	r3, #24
 80107c2:	d027      	beq.n	8010814 <fp_mul_d+0x78>
      c->dp[c->used++] = (fp_digit) w;
 80107c4:	1c58      	adds	r0, r3, #1
 80107c6:	3302      	adds	r3, #2
 80107c8:	6010      	str	r0, [r2, #0]
 80107ca:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      ++x;
 80107ce:	3101      	adds	r1, #1
      c->dp[x] = 0;
 80107d0:	f102 0308 	add.w	r3, r2, #8
 80107d4:	2000      	movs	r0, #0
   for (; x < oldused && x < FP_SIZE; x++) {
 80107d6:	4561      	cmp	r1, ip
 80107d8:	da01      	bge.n	80107de <fp_mul_d+0x42>
 80107da:	2917      	cmp	r1, #23
 80107dc:	dd14      	ble.n	8010808 <fp_mul_d+0x6c>
   fp_clamp(c);
 80107de:	6813      	ldr	r3, [r2, #0]
 80107e0:	b12b      	cbz	r3, 80107ee <fp_mul_d+0x52>
 80107e2:	1e59      	subs	r1, r3, #1
 80107e4:	3301      	adds	r3, #1
 80107e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107ea:	b18b      	cbz	r3, 8010810 <fp_mul_d+0x74>
 80107ec:	463b      	mov	r3, r7
 80107ee:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 80107f0:	2000      	movs	r0, #0
}
 80107f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
 80107f4:	f850 502e 	ldr.w	r5, [r0, lr, lsl #2]
 80107f8:	fbe5 4601 	umlal	r4, r6, r5, r1
       c->dp[x]  = (fp_digit)w;
 80107fc:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
       w         = w >> DIGIT_BIT;
 8010800:	4675      	mov	r5, lr
 8010802:	4634      	mov	r4, r6
 8010804:	2600      	movs	r6, #0
   for (x = 0; x < a->used; x++) {
 8010806:	e7d3      	b.n	80107b0 <fp_mul_d+0x14>
      c->dp[x] = 0;
 8010808:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
   for (; x < oldused && x < FP_SIZE; x++) {
 801080c:	3101      	adds	r1, #1
 801080e:	e7e2      	b.n	80107d6 <fp_mul_d+0x3a>
   fp_clamp(c);
 8010810:	6011      	str	r1, [r2, #0]
 8010812:	e7e4      	b.n	80107de <fp_mul_d+0x42>
          return FP_VAL;
 8010814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010818:	e7eb      	b.n	80107f2 <fp_mul_d+0x56>

0801081a <fp_div_2>:
{
 801081a:	b5f0      	push	{r4, r5, r6, r7, lr}
  b->used = a->used;
 801081c:	4605      	mov	r5, r0
 801081e:	460b      	mov	r3, r1
 8010820:	f855 2b08 	ldr.w	r2, [r5], #8
  oldused = b->used;
 8010824:	680f      	ldr	r7, [r1, #0]
  b->used = a->used;
 8010826:	f843 2b08 	str.w	r2, [r3], #8
    tmpa = a->dp + b->used - 1;
 801082a:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 801082e:	3c01      	subs	r4, #1
 8010830:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    for (x = b->used - 1; x >= 0; x--) {
 8010834:	3a01      	subs	r2, #1
    tmpb = b->dp + b->used - 1;
 8010836:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    r = 0;
 801083a:	2600      	movs	r6, #0
    for (x = b->used - 1; x >= 0; x--) {
 801083c:	2a00      	cmp	r2, #0
 801083e:	da10      	bge.n	8010862 <fp_div_2+0x48>
    tmpb = b->dp + b->used;
 8010840:	680a      	ldr	r2, [r1, #0]
      *tmpb++ = 0;
 8010842:	2400      	movs	r4, #0
    tmpb = b->dp + b->used;
 8010844:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (x = b->used; x < oldused; x++) {
 8010848:	42ba      	cmp	r2, r7
 801084a:	db15      	blt.n	8010878 <fp_div_2+0x5e>
  b->sign = a->sign;
 801084c:	6842      	ldr	r2, [r0, #4]
  fp_clamp (b);
 801084e:	680b      	ldr	r3, [r1, #0]
 8010850:	b12b      	cbz	r3, 801085e <fp_div_2+0x44>
 8010852:	1e58      	subs	r0, r3, #1
 8010854:	3301      	adds	r3, #1
 8010856:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801085a:	b18b      	cbz	r3, 8010880 <fp_div_2+0x66>
 801085c:	4613      	mov	r3, r2
 801085e:	604b      	str	r3, [r1, #4]
}
 8010860:	bdf0      	pop	{r4, r5, r6, r7, pc}
      rr = *tmpa & 1;
 8010862:	f855 c904 	ldr.w	ip, [r5], #-4
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
 8010866:	07f6      	lsls	r6, r6, #31
 8010868:	ea46 065c 	orr.w	r6, r6, ip, lsr #1
 801086c:	f844 6904 	str.w	r6, [r4], #-4
    for (x = b->used - 1; x >= 0; x--) {
 8010870:	3a01      	subs	r2, #1
      r = rr;
 8010872:	f00c 0601 	and.w	r6, ip, #1
 8010876:	e7e1      	b.n	801083c <fp_div_2+0x22>
      *tmpb++ = 0;
 8010878:	f843 4b04 	str.w	r4, [r3], #4
    for (x = b->used; x < oldused; x++) {
 801087c:	3201      	adds	r2, #1
 801087e:	e7e3      	b.n	8010848 <fp_div_2+0x2e>
  fp_clamp (b);
 8010880:	6008      	str	r0, [r1, #0]
 8010882:	e7e4      	b.n	801084e <fp_div_2+0x34>

08010884 <fp_div_2_mod_ct>:
{
 8010884:	b5f0      	push	{r4, r5, r6, r7, lr}
  mask = 0 - (a->dp[0] & 1);
 8010886:	6887      	ldr	r7, [r0, #8]
  for (i = 0; i < b->used; i++) {
 8010888:	680c      	ldr	r4, [r1, #0]
  fp_word  w = 0;
 801088a:	f04f 0e00 	mov.w	lr, #0
  mask = 0 - (a->dp[0] & 1);
 801088e:	f347 0700 	sbfx	r7, r7, #0, #1
  for (i = 0; i < b->used; i++) {
 8010892:	2301      	movs	r3, #1
      w         += a->dp[i] & mask_a;
 8010894:	46f4      	mov	ip, lr
  for (i = 0; i < b->used; i++) {
 8010896:	1e5e      	subs	r6, r3, #1
 8010898:	42b4      	cmp	r4, r6
 801089a:	f103 0501 	add.w	r5, r3, #1
 801089e:	dc1d      	bgt.n	80108dc <fp_div_2_mod_ct+0x58>
 80108a0:	f102 0108 	add.w	r1, r2, #8
 80108a4:	2000      	movs	r0, #0
  for (i = 0; i < b->used-1; i++) {
 80108a6:	1e65      	subs	r5, r4, #1
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 80108a8:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = 0; i < b->used-1; i++) {
 80108ac:	42a8      	cmp	r0, r5
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 80108ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
  for (i = 0; i < b->used-1; i++) {
 80108b2:	db2a      	blt.n	801090a <fp_div_2_mod_ct+0x86>
 80108b4:	2c01      	cmp	r4, #1
 80108b6:	bfb8      	it	lt
 80108b8:	2401      	movlt	r4, #1
  c->dp[i] = (c->dp[i] >> 1) | ((fp_digit)w << (DIGIT_BIT - 1));
 80108ba:	1c61      	adds	r1, r4, #1
 80108bc:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
 80108c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  c->sign = FP_ZPOS;
 80108c4:	2300      	movs	r3, #0
  c->used = i + 1;
 80108c6:	6014      	str	r4, [r2, #0]
  c->sign = FP_ZPOS;
 80108c8:	6053      	str	r3, [r2, #4]
  fp_clamp(c);
 80108ca:	6813      	ldr	r3, [r2, #0]
 80108cc:	b123      	cbz	r3, 80108d8 <fp_div_2_mod_ct+0x54>
 80108ce:	1e59      	subs	r1, r3, #1
 80108d0:	3301      	adds	r3, #1
 80108d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108d6:	b1fb      	cbz	r3, 8010918 <fp_div_2_mod_ct+0x94>
}
 80108d8:	2000      	movs	r0, #0
 80108da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      fp_digit mask_a = 0 - (i < a->used);
 80108dc:	6803      	ldr	r3, [r0, #0]
 80108de:	42b3      	cmp	r3, r6
      w         += a->dp[i] & mask_a;
 80108e0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
      fp_digit mask_a = 0 - (i < a->used);
 80108e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108e8:	bfd8      	it	le
 80108ea:	2300      	movle	r3, #0
      w         += a->dp[i] & mask_a;
 80108ec:	4033      	ands	r3, r6
      w         += b->dp[i] & mask;
 80108ee:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
 80108f2:	403e      	ands	r6, r7
      w         += a->dp[i] & mask_a;
 80108f4:	199b      	adds	r3, r3, r6
 80108f6:	eb4c 060c 	adc.w	r6, ip, ip
 80108fa:	eb13 030e 	adds.w	r3, r3, lr
      c->dp[i]   = (fp_digit)w;
 80108fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
      w        >>= DIGIT_BIT;
 8010902:	f146 0e00 	adc.w	lr, r6, #0
 8010906:	462b      	mov	r3, r5
 8010908:	e7c5      	b.n	8010896 <fp_div_2_mod_ct+0x12>
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 801090a:	680e      	ldr	r6, [r1, #0]
 801090c:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 8010910:	f841 3c04 	str.w	r3, [r1, #-4]
  for (i = 0; i < b->used-1; i++) {
 8010914:	3001      	adds	r0, #1
 8010916:	e7c7      	b.n	80108a8 <fp_div_2_mod_ct+0x24>
  fp_clamp(c);
 8010918:	6011      	str	r1, [r2, #0]
 801091a:	e7d6      	b.n	80108ca <fp_div_2_mod_ct+0x46>

0801091c <fp_submod_ct>:
{
 801091c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (c->used + 1 > FP_SIZE) {
 8010920:	6814      	ldr	r4, [r2, #0]
 8010922:	2c17      	cmp	r4, #23
 8010924:	dc48      	bgt.n	80109b8 <fp_submod_ct+0x9c>
  if (c == d) {
 8010926:	429a      	cmp	r2, r3
 8010928:	d046      	beq.n	80109b8 <fp_submod_ct+0x9c>
  for (i = 0; i < c->used; i++) {
 801092a:	2700      	movs	r7, #0
 801092c:	f103 0608 	add.w	r6, r3, #8
 8010930:	f100 0e08 	add.w	lr, r0, #8
  if (c == d) {
 8010934:	46b0      	mov	r8, r6
 8010936:	f101 0008 	add.w	r0, r1, #8
  w = 0;
 801093a:	46bc      	mov	ip, r7
 801093c:	463d      	mov	r5, r7
    w         += a->dp[i];
 801093e:	f85e 1b04 	ldr.w	r1, [lr], #4
    w         -= b->dp[i];
 8010942:	f850 9b04 	ldr.w	r9, [r0], #4
    w         += a->dp[i];
 8010946:	eb11 010c 	adds.w	r1, r1, ip
 801094a:	f145 0500 	adc.w	r5, r5, #0
    w         -= b->dp[i];
 801094e:	ebb1 0109 	subs.w	r1, r1, r9
 8010952:	f165 0c00 	sbc.w	ip, r5, #0
  for (i = 0; i < c->used; i++) {
 8010956:	42bc      	cmp	r4, r7
    w        >>= DIGIT_BIT;
 8010958:	ea4f 75ec 	mov.w	r5, ip, asr #31
  for (i = 0; i < c->used; i++) {
 801095c:	dc15      	bgt.n	801098a <fp_submod_ct+0x6e>
  mask = (fp_digit)0 - (w < 0);
 801095e:	462f      	mov	r7, r5
  for (i = 0; i < c->used; i++) {
 8010960:	2500      	movs	r5, #0
 8010962:	3208      	adds	r2, #8
  w = 0;
 8010964:	4628      	mov	r0, r5
 8010966:	46ac      	mov	ip, r5
  for (i = 0; i < c->used; i++) {
 8010968:	42ac      	cmp	r4, r5
 801096a:	dc12      	bgt.n	8010992 <fp_submod_ct+0x76>
  d->used = i;
 801096c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  d->sign = FP_ZPOS;
 8010970:	2200      	movs	r2, #0
  d->used = i;
 8010972:	601c      	str	r4, [r3, #0]
  d->sign = FP_ZPOS;
 8010974:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 8010976:	6818      	ldr	r0, [r3, #0]
 8010978:	b128      	cbz	r0, 8010986 <fp_submod_ct+0x6a>
 801097a:	1e41      	subs	r1, r0, #1
 801097c:	3001      	adds	r0, #1
 801097e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8010982:	b1ba      	cbz	r2, 80109b4 <fp_submod_ct+0x98>
  return FP_OKAY;
 8010984:	2000      	movs	r0, #0
}
 8010986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d->dp[i]   = (fp_digit)w;
 801098a:	f848 1b04 	str.w	r1, [r8], #4
  for (i = 0; i < c->used; i++) {
 801098e:	3701      	adds	r7, #1
 8010990:	e7d5      	b.n	801093e <fp_submod_ct+0x22>
    w         += d->dp[i];
 8010992:	6831      	ldr	r1, [r6, #0]
 8010994:	1808      	adds	r0, r1, r0
    w         += c->dp[i] & mask;
 8010996:	f852 1b04 	ldr.w	r1, [r2], #4
 801099a:	ea01 0107 	and.w	r1, r1, r7
    w         += d->dp[i];
 801099e:	f14c 0c00 	adc.w	ip, ip, #0
    w         += c->dp[i] & mask;
 80109a2:	1809      	adds	r1, r1, r0
    w        >>= DIGIT_BIT;
 80109a4:	f14c 0000 	adc.w	r0, ip, #0
    d->dp[i]   = (fp_digit)w;
 80109a8:	f846 1b04 	str.w	r1, [r6], #4
    w        >>= DIGIT_BIT;
 80109ac:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (i = 0; i < c->used; i++) {
 80109b0:	3501      	adds	r5, #1
 80109b2:	e7d9      	b.n	8010968 <fp_submod_ct+0x4c>
  fp_clamp(d);
 80109b4:	6019      	str	r1, [r3, #0]
 80109b6:	e7de      	b.n	8010976 <fp_submod_ct+0x5a>
    return FP_VAL;
 80109b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109bc:	e7e3      	b.n	8010986 <fp_submod_ct+0x6a>

080109be <fp_addmod_ct>:
  if (c == d) {
 80109be:	429a      	cmp	r2, r3
{
 80109c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (c == d) {
 80109c4:	d057      	beq.n	8010a76 <fp_addmod_ct+0xb8>
  s = 0;
 80109c6:	f04f 0e00 	mov.w	lr, #0
  for (i = 0; i < c->used; i++) {
 80109ca:	6816      	ldr	r6, [r2, #0]
 80109cc:	2401      	movs	r4, #1
  s = 0;
 80109ce:	46f0      	mov	r8, lr
  w = 0;
 80109d0:	46f1      	mov	r9, lr
    w         += a->dp[i];
 80109d2:	46f4      	mov	ip, lr
  for (i = 0; i < c->used; i++) {
 80109d4:	1c67      	adds	r7, r4, #1
 80109d6:	3c01      	subs	r4, #1
 80109d8:	42a6      	cmp	r6, r4
 80109da:	dc1f      	bgt.n	8010a1c <fp_addmod_ct+0x5e>
  s += (fp_digit)w;
 80109dc:	eb19 040e 	adds.w	r4, r9, lr
 80109e0:	f148 0800 	adc.w	r8, r8, #0
  mask = (fp_digit)0 - (s >= 0);
 80109e4:	ea6f 0808 	mvn.w	r8, r8
 80109e8:	ea4f 78d8 	mov.w	r8, r8, lsr #31
  for (i = 0; i < c->used; i++) {
 80109ec:	2400      	movs	r4, #0
  mask = (fp_digit)0 - (s >= 0);
 80109ee:	f1c8 0800 	rsb	r8, r8, #0
  for (i = 0; i < c->used; i++) {
 80109f2:	3208      	adds	r2, #8
 80109f4:	f103 0708 	add.w	r7, r3, #8
  w = 0;
 80109f8:	4621      	mov	r1, r4
  for (i = 0; i < c->used; i++) {
 80109fa:	42a6      	cmp	r6, r4
 80109fc:	dc28      	bgt.n	8010a50 <fp_addmod_ct+0x92>
  d->used = i;
 80109fe:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  d->sign = FP_ZPOS;
 8010a02:	2200      	movs	r2, #0
  d->used = i;
 8010a04:	601e      	str	r6, [r3, #0]
  d->sign = FP_ZPOS;
 8010a06:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 8010a08:	6818      	ldr	r0, [r3, #0]
 8010a0a:	b128      	cbz	r0, 8010a18 <fp_addmod_ct+0x5a>
 8010a0c:	1e41      	subs	r1, r0, #1
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8010a14:	b36a      	cbz	r2, 8010a72 <fp_addmod_ct+0xb4>
 8010a16:	2000      	movs	r0, #0
}
 8010a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    w         += b->dp[i];
 8010a1c:	f851 4027 	ldr.w	r4, [r1, r7, lsl #2]
    w         += a->dp[i];
 8010a20:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    w         += b->dp[i];
 8010a24:	192d      	adds	r5, r5, r4
 8010a26:	eb4c 0a0c 	adc.w	sl, ip, ip
 8010a2a:	eb15 0409 	adds.w	r4, r5, r9
    d->dp[i]   = (fp_digit)w;
 8010a2e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
    s         -= c->dp[i];
 8010a32:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
    w         += b->dp[i];
 8010a36:	f14a 0900 	adc.w	r9, sl, #0
    s         += (fp_digit)w;
 8010a3a:	eb14 040e 	adds.w	r4, r4, lr
 8010a3e:	f148 0e00 	adc.w	lr, r8, #0
    s         -= c->dp[i];
 8010a42:	1b64      	subs	r4, r4, r5
    s        >>= DIGIT_BIT;
 8010a44:	f16e 0e00 	sbc.w	lr, lr, #0
 8010a48:	ea4f 78ee 	mov.w	r8, lr, asr #31
 8010a4c:	463c      	mov	r4, r7
 8010a4e:	e7c1      	b.n	80109d4 <fp_addmod_ct+0x16>
    w        += c->dp[i] & mask;
 8010a50:	f852 5b04 	ldr.w	r5, [r2], #4
    w         = d->dp[i] - w;
 8010a54:	6838      	ldr	r0, [r7, #0]
    w        += c->dp[i] & mask;
 8010a56:	ea08 0505 	and.w	r5, r8, r5
 8010a5a:	1a40      	subs	r0, r0, r1
 8010a5c:	eb61 0101 	sbc.w	r1, r1, r1
    w         = d->dp[i] - w;
 8010a60:	1b40      	subs	r0, r0, r5
 8010a62:	f161 0100 	sbc.w	r1, r1, #0
    d->dp[i]  = (fp_digit)w;
 8010a66:	f847 0b04 	str.w	r0, [r7], #4
    w         = (w >> DIGIT_BIT)&1;
 8010a6a:	f001 0101 	and.w	r1, r1, #1
  for (i = 0; i < c->used; i++) {
 8010a6e:	3401      	adds	r4, #1
 8010a70:	e7c3      	b.n	80109fa <fp_addmod_ct+0x3c>
  fp_clamp(d);
 8010a72:	6019      	str	r1, [r3, #0]
 8010a74:	e7c8      	b.n	8010a08 <fp_addmod_ct+0x4a>
    return FP_VAL;
 8010a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a7a:	e7cd      	b.n	8010a18 <fp_addmod_ct+0x5a>

08010a7c <fp_cmp_d>:
  if (a->used == 0 && b == 0)
 8010a7c:	6803      	ldr	r3, [r0, #0]
 8010a7e:	b923      	cbnz	r3, 8010a8a <fp_cmp_d+0xe>
 8010a80:	1e08      	subs	r0, r1, #0
 8010a82:	bf18      	it	ne
 8010a84:	2001      	movne	r0, #1
 8010a86:	4240      	negs	r0, r0
 8010a88:	4770      	bx	lr
  if ((b && a->used == 0) || a->sign == FP_NEG) {
 8010a8a:	6842      	ldr	r2, [r0, #4]
 8010a8c:	2a01      	cmp	r2, #1
 8010a8e:	d009      	beq.n	8010aa4 <fp_cmp_d+0x28>
  if (a->used > 1) {
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	dc0a      	bgt.n	8010aaa <fp_cmp_d+0x2e>
 8010a94:	6883      	ldr	r3, [r0, #8]
  if (a->dp[0] > b) {
 8010a96:	4299      	cmp	r1, r3
 8010a98:	d307      	bcc.n	8010aaa <fp_cmp_d+0x2e>
  } else if (a->dp[0] < b) {
 8010a9a:	bf8c      	ite	hi
 8010a9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010aa0:	2000      	movls	r0, #0
 8010aa2:	4770      	bx	lr
    return FP_LT;
 8010aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010aa8:	4770      	bx	lr
    return FP_GT;
 8010aaa:	2001      	movs	r0, #1
}
 8010aac:	4770      	bx	lr

08010aae <fp_cmp_mag>:
   if (a->used > b->used) {
 8010aae:	6803      	ldr	r3, [r0, #0]
 8010ab0:	680a      	ldr	r2, [r1, #0]
 8010ab2:	4293      	cmp	r3, r2
{
 8010ab4:	b510      	push	{r4, lr}
   if (a->used > b->used) {
 8010ab6:	dc10      	bgt.n	8010ada <fp_cmp_mag+0x2c>
   } else if (a->used < b->used) {
 8010ab8:	db11      	blt.n	8010ade <fp_cmp_mag+0x30>
      for (x = a->used - 1; x >= 0; x--) {
 8010aba:	3b01      	subs	r3, #1
          if (a->dp[x] > b->dp[x]) {
 8010abc:	3008      	adds	r0, #8
 8010abe:	3108      	adds	r1, #8
      for (x = a->used - 1; x >= 0; x--) {
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	da01      	bge.n	8010ac8 <fp_cmp_mag+0x1a>
   return FP_EQ;
 8010ac4:	2000      	movs	r0, #0
}
 8010ac6:	bd10      	pop	{r4, pc}
          if (a->dp[x] > b->dp[x]) {
 8010ac8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8010acc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8010ad0:	4294      	cmp	r4, r2
 8010ad2:	d802      	bhi.n	8010ada <fp_cmp_mag+0x2c>
          } else if (a->dp[x] < b->dp[x]) {
 8010ad4:	d303      	bcc.n	8010ade <fp_cmp_mag+0x30>
      for (x = a->used - 1; x >= 0; x--) {
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	e7f2      	b.n	8010ac0 <fp_cmp_mag+0x12>
      return FP_GT;
 8010ada:	2001      	movs	r0, #1
 8010adc:	e7f3      	b.n	8010ac6 <fp_cmp_mag+0x18>
      return FP_LT;
 8010ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ae2:	e7f0      	b.n	8010ac6 <fp_cmp_mag+0x18>

08010ae4 <fp_add>:
{
 8010ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sa = a->sign;
 8010ae8:	6847      	ldr	r7, [r0, #4]
  sb = b->sign;
 8010aea:	f8d1 8004 	ldr.w	r8, [r1, #4]
  if (sa == sb) {
 8010aee:	4547      	cmp	r7, r8
{
 8010af0:	4605      	mov	r5, r0
 8010af2:	460e      	mov	r6, r1
 8010af4:	4614      	mov	r4, r2
  if (sa == sb) {
 8010af6:	d104      	bne.n	8010b02 <fp_add+0x1e>
    c->sign = sa;
 8010af8:	6057      	str	r7, [r2, #4]
}
 8010afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ret = s_fp_add (a, b, c);
 8010afe:	f7ff bd88 	b.w	8010612 <s_fp_add>
    if (fp_cmp_mag (a, b) == FP_LT) {
 8010b02:	f7ff ffd4 	bl	8010aae <fp_cmp_mag>
 8010b06:	3001      	adds	r0, #1
      s_fp_sub (b, a, c);
 8010b08:	bf09      	itett	eq
 8010b0a:	4630      	moveq	r0, r6
      s_fp_sub (a, b, c);
 8010b0c:	4628      	movne	r0, r5
      c->sign = sb;
 8010b0e:	f8c4 8004 	streq.w	r8, [r4, #4]
      s_fp_sub (b, a, c);
 8010b12:	4622      	moveq	r2, r4
 8010b14:	bf0f      	iteee	eq
 8010b16:	4629      	moveq	r1, r5
      c->sign = sa;
 8010b18:	6067      	strne	r7, [r4, #4]
      s_fp_sub (a, b, c);
 8010b1a:	4622      	movne	r2, r4
 8010b1c:	4631      	movne	r1, r6
 8010b1e:	f7ff fdbf 	bl	80106a0 <s_fp_sub>
}
 8010b22:	2000      	movs	r0, #0
 8010b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b28 <fp_sub>:
{
 8010b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sa = a->sign;
 8010b2a:	6844      	ldr	r4, [r0, #4]
  if (sa != sb) {
 8010b2c:	684b      	ldr	r3, [r1, #4]
 8010b2e:	429c      	cmp	r4, r3
{
 8010b30:	4607      	mov	r7, r0
 8010b32:	460e      	mov	r6, r1
 8010b34:	4615      	mov	r5, r2
  if (sa != sb) {
 8010b36:	d004      	beq.n	8010b42 <fp_sub+0x1a>
    c->sign = sa;
 8010b38:	6054      	str	r4, [r2, #4]
}
 8010b3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ret = s_fp_add (a, b, c);
 8010b3e:	f7ff bd68 	b.w	8010612 <s_fp_add>
    if (fp_cmp_mag (a, b) != FP_LT) {
 8010b42:	f7ff ffb4 	bl	8010aae <fp_cmp_mag>
 8010b46:	3001      	adds	r0, #1
 8010b48:	d007      	beq.n	8010b5a <fp_sub+0x32>
      c->sign = sa;
 8010b4a:	606c      	str	r4, [r5, #4]
      s_fp_sub (a, b, c);
 8010b4c:	462a      	mov	r2, r5
 8010b4e:	4631      	mov	r1, r6
 8010b50:	4638      	mov	r0, r7
      s_fp_sub (b, a, c);
 8010b52:	f7ff fda5 	bl	80106a0 <s_fp_sub>
}
 8010b56:	2000      	movs	r0, #0
 8010b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
 8010b5a:	fab4 f484 	clz	r4, r4
 8010b5e:	0964      	lsrs	r4, r4, #5
 8010b60:	606c      	str	r4, [r5, #4]
      s_fp_sub (b, a, c);
 8010b62:	462a      	mov	r2, r5
 8010b64:	4639      	mov	r1, r7
 8010b66:	4630      	mov	r0, r6
 8010b68:	e7f3      	b.n	8010b52 <fp_sub+0x2a>

08010b6a <fp_cmp>:
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 8010b6a:	6842      	ldr	r2, [r0, #4]
 8010b6c:	2a01      	cmp	r2, #1
{
 8010b6e:	460b      	mov	r3, r1
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 8010b70:	d104      	bne.n	8010b7c <fp_cmp+0x12>
 8010b72:	684a      	ldr	r2, [r1, #4]
 8010b74:	b942      	cbnz	r2, 8010b88 <fp_cmp+0x1e>
      return FP_LT;
 8010b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b7a:	e003      	b.n	8010b84 <fp_cmp+0x1a>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
 8010b7c:	b942      	cbnz	r2, 8010b90 <fp_cmp+0x26>
 8010b7e:	684a      	ldr	r2, [r1, #4]
 8010b80:	2a01      	cmp	r2, #1
 8010b82:	d105      	bne.n	8010b90 <fp_cmp+0x26>
}
 8010b84:	4610      	mov	r0, r2
 8010b86:	4770      	bx	lr
         return fp_cmp_mag(b, a);
 8010b88:	4601      	mov	r1, r0
 8010b8a:	4618      	mov	r0, r3
         return fp_cmp_mag(a, b);
 8010b8c:	f7ff bf8f 	b.w	8010aae <fp_cmp_mag>
 8010b90:	4619      	mov	r1, r3
 8010b92:	e7fb      	b.n	8010b8c <fp_cmp+0x22>

08010b94 <fp_montgomery_setup>:
  b = a->dp[0];
 8010b94:	6883      	ldr	r3, [r0, #8]
  if ((b & 1) == 0) {
 8010b96:	07da      	lsls	r2, r3, #31
 8010b98:	d514      	bpl.n	8010bc4 <fp_montgomery_setup+0x30>
  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 8010b9a:	1c98      	adds	r0, r3, #2
 8010b9c:	0040      	lsls	r0, r0, #1
 8010b9e:	f000 0008 	and.w	r0, r0, #8
 8010ba2:	4418      	add	r0, r3
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 8010ba4:	fb00 f203 	mul.w	r2, r0, r3
 8010ba8:	f1c2 0202 	rsb	r2, r2, #2
 8010bac:	4350      	muls	r0, r2
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 8010bae:	fb00 f203 	mul.w	r2, r0, r3
 8010bb2:	f1c2 0202 	rsb	r2, r2, #2
 8010bb6:	4342      	muls	r2, r0
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 8010bb8:	4353      	muls	r3, r2
 8010bba:	3b02      	subs	r3, #2
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
 8010bbc:	4353      	muls	r3, r2
 8010bbe:	600b      	str	r3, [r1, #0]
  return FP_OKAY;
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	4770      	bx	lr
    return FP_VAL;
 8010bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010bc8:	4770      	bx	lr

08010bca <fp_montgomery_reduce_ex>:
{
 8010bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (m->used > (FP_SIZE/2)) {
 8010bce:	680b      	ldr	r3, [r1, #0]
{
 8010bd0:	b085      	sub	sp, #20
   if (m->used > (FP_SIZE/2)) {
 8010bd2:	2b0c      	cmp	r3, #12
{
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	460e      	mov	r6, r1
 8010bd8:	9203      	str	r2, [sp, #12]
   if (m->used > (FP_SIZE/2)) {
 8010bda:	f300 8095 	bgt.w	8010d08 <fp_montgomery_reduce_ex+0x13e>
   c = (fp_digit*)XMALLOC(sizeof(fp_digit)*(FP_SIZE + 1), NULL, DYNAMIC_TYPE_BIGINT);
 8010bde:	2064      	movs	r0, #100	; 0x64
 8010be0:	f002 fade 	bl	80131a0 <malloc>
   if (c == NULL) {
 8010be4:	4605      	mov	r5, r0
 8010be6:	2800      	cmp	r0, #0
 8010be8:	f000 8091 	beq.w	8010d0e <fp_montgomery_reduce_ex+0x144>
   XMEMSET(c, 0, sizeof(fp_digit)*(FP_SIZE + 1));
 8010bec:	2264      	movs	r2, #100	; 0x64
 8010bee:	2100      	movs	r1, #0
 8010bf0:	f002 fb0e 	bl	8013210 <memset>
   pa = m->used;
 8010bf4:	6833      	ldr	r3, [r6, #0]
   if (a->used <= m->used) {
 8010bf6:	6822      	ldr	r2, [r4, #0]
 8010bf8:	429a      	cmp	r2, r3
      oldused = m->used * 2;
 8010bfa:	bfcc      	ite	gt
 8010bfc:	ea4f 0843 	movgt.w	r8, r3, lsl #1
 8010c00:	4698      	movle	r8, r3
   for (x = 0; x < oldused; x++) {
 8010c02:	f104 0108 	add.w	r1, r4, #8
 8010c06:	2200      	movs	r2, #0
 8010c08:	4590      	cmp	r8, r2
 8010c0a:	dc39      	bgt.n	8010c80 <fp_montgomery_reduce_ex+0xb6>
 8010c0c:	46ae      	mov	lr, r5
 8010c0e:	0099      	lsls	r1, r3, #2
   for (x = 0; x < pa; x++) {
 8010c10:	f04f 0c00 	mov.w	ip, #0
 8010c14:	459c      	cmp	ip, r3
 8010c16:	db39      	blt.n	8010c8c <fp_montgomery_reduce_ex+0xc2>
  _c   = c + pa;
 8010c18:	eb05 0e01 	add.w	lr, r5, r1
  tmpm = a->dp;
 8010c1c:	f104 0208 	add.w	r2, r4, #8
  for (x = 0; x < pa+1; x++) {
 8010c20:	f104 0c04 	add.w	ip, r4, #4
 8010c24:	2700      	movs	r7, #0
 8010c26:	429f      	cmp	r7, r3
 8010c28:	dd62      	ble.n	8010cf0 <fp_montgomery_reduce_ex+0x126>
 8010c2a:	1c5f      	adds	r7, r3, #1
 8010c2c:	f101 0104 	add.w	r1, r1, #4
 8010c30:	f103 0001 	add.w	r0, r3, #1
 8010c34:	bfb8      	it	lt
 8010c36:	2100      	movlt	r1, #0
 8010c38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c3c:	4411      	add	r1, r2
 8010c3e:	3301      	adds	r3, #1
     *tmpm++ = 0;
 8010c40:	2200      	movs	r2, #0
  for (; x < oldused; x++) {
 8010c42:	4598      	cmp	r8, r3
 8010c44:	dc5a      	bgt.n	8010cfc <fp_montgomery_reduce_ex+0x132>
  a->used = pa+1;
 8010c46:	6020      	str	r0, [r4, #0]
  fp_clamp(a);
 8010c48:	6823      	ldr	r3, [r4, #0]
 8010c4a:	b133      	cbz	r3, 8010c5a <fp_montgomery_reduce_ex+0x90>
 8010c4c:	1e5a      	subs	r2, r3, #1
 8010c4e:	3301      	adds	r3, #1
 8010c50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d055      	beq.n	8010d04 <fp_montgomery_reduce_ex+0x13a>
 8010c58:	6863      	ldr	r3, [r4, #4]
 8010c5a:	6063      	str	r3, [r4, #4]
  if (fp_cmp_mag (a, m) != FP_LT) {
 8010c5c:	4631      	mov	r1, r6
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f7ff ff25 	bl	8010aae <fp_cmp_mag>
 8010c64:	3001      	adds	r0, #1
 8010c66:	d004      	beq.n	8010c72 <fp_montgomery_reduce_ex+0xa8>
    s_fp_sub (a, m, a);
 8010c68:	4622      	mov	r2, r4
 8010c6a:	4631      	mov	r1, r6
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f7ff fd17 	bl	80106a0 <s_fp_sub>
  XFREE(c, NULL, DYNAMIC_TYPE_BIGINT);
 8010c72:	4628      	mov	r0, r5
 8010c74:	f002 fa9c 	bl	80131b0 <free>
  return FP_OKAY;
 8010c78:	2000      	movs	r0, #0
}
 8010c7a:	b005      	add	sp, #20
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       c[x] = a->dp[x];
 8010c80:	f851 0b04 	ldr.w	r0, [r1], #4
 8010c84:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
   for (x = 0; x < oldused; x++) {
 8010c88:	3201      	adds	r2, #1
 8010c8a:	e7bd      	b.n	8010c08 <fp_montgomery_reduce_ex+0x3e>
       LOOP_START;
 8010c8c:	4677      	mov	r7, lr
 8010c8e:	9803      	ldr	r0, [sp, #12]
 8010c90:	f857 2904 	ldr.w	r2, [r7], #-4
 8010c94:	4342      	muls	r2, r0
 8010c96:	9202      	str	r2, [sp, #8]
       tmpm = m->dp;
 8010c98:	f106 0208 	add.w	r2, r6, #8
 8010c9c:	9201      	str	r2, [sp, #4]
       fp_digit cy = 0;
 8010c9e:	2200      	movs	r2, #0
       y = 0;
 8010ca0:	4691      	mov	r9, r2
          INNERMUL;
 8010ca2:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8010ca6:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010caa:	eb10 0b02 	adds.w	fp, r0, r2
 8010cae:	f85a 0b04 	ldr.w	r0, [sl], #4
 8010cb2:	f8cd a004 	str.w	sl, [sp, #4]
 8010cb6:	f04f 0200 	mov.w	r2, #0
 8010cba:	f8dd a008 	ldr.w	sl, [sp, #8]
 8010cbe:	4152      	adcs	r2, r2
       for (; y < pa; y++) {
 8010cc0:	f109 0901 	add.w	r9, r9, #1
          INNERMUL;
 8010cc4:	fbea b200 	umlal	fp, r2, sl, r0
       for (; y < pa; y++) {
 8010cc8:	454b      	cmp	r3, r9
          INNERMUL;
 8010cca:	f8c7 b000 	str.w	fp, [r7]
       for (; y < pa; y++) {
 8010cce:	d1e8      	bne.n	8010ca2 <fp_montgomery_reduce_ex+0xd8>
 8010cd0:	eb01 070e 	add.w	r7, r1, lr
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 8010cd4:	b922      	cbnz	r2, 8010ce0 <fp_montgomery_reduce_ex+0x116>
   for (x = 0; x < pa; x++) {
 8010cd6:	f10c 0c01 	add.w	ip, ip, #1
 8010cda:	f10e 0e04 	add.w	lr, lr, #4
 8010cde:	e799      	b.n	8010c14 <fp_montgomery_reduce_ex+0x4a>
           PROPCARRY;
 8010ce0:	6838      	ldr	r0, [r7, #0]
 8010ce2:	1882      	adds	r2, r0, r2
 8010ce4:	f847 2b04 	str.w	r2, [r7], #4
 8010ce8:	bf2c      	ite	cs
 8010cea:	2201      	movcs	r2, #1
 8010cec:	2200      	movcc	r2, #0
           ++_c;
 8010cee:	e7f1      	b.n	8010cd4 <fp_montgomery_reduce_ex+0x10a>
     *tmpm++ = *_c++;
 8010cf0:	f85e 0027 	ldr.w	r0, [lr, r7, lsl #2]
 8010cf4:	f84c 0f04 	str.w	r0, [ip, #4]!
  for (x = 0; x < pa+1; x++) {
 8010cf8:	3701      	adds	r7, #1
 8010cfa:	e794      	b.n	8010c26 <fp_montgomery_reduce_ex+0x5c>
     *tmpm++ = 0;
 8010cfc:	f841 2b04 	str.w	r2, [r1], #4
  for (; x < oldused; x++) {
 8010d00:	3301      	adds	r3, #1
 8010d02:	e79e      	b.n	8010c42 <fp_montgomery_reduce_ex+0x78>
  fp_clamp(a);
 8010d04:	6022      	str	r2, [r4, #0]
 8010d06:	e79f      	b.n	8010c48 <fp_montgomery_reduce_ex+0x7e>
      return FP_VAL;
 8010d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d0c:	e7b5      	b.n	8010c7a <fp_montgomery_reduce_ex+0xb0>
      return FP_MEM;
 8010d0e:	f06f 0001 	mvn.w	r0, #1
 8010d12:	e7b2      	b.n	8010c7a <fp_montgomery_reduce_ex+0xb0>

08010d14 <fp_montgomery_reduce>:
  return fp_montgomery_reduce_ex(a, m, mp, 1);
 8010d14:	2301      	movs	r3, #1
 8010d16:	f7ff bf58 	b.w	8010bca <fp_montgomery_reduce_ex>

08010d1a <fp_to_unsigned_bin_at_pos>:
{
 8010d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   int j = 0;
 8010d1c:	2500      	movs	r5, #0
 8010d1e:	4410      	add	r0, r2
   for (i = 0; i < t->used-1; ) {
 8010d20:	462e      	mov	r6, r5
 8010d22:	680f      	ldr	r7, [r1, #0]
       b[x++] = (unsigned char)(t->dp[i] >> j);
 8010d24:	1cb3      	adds	r3, r6, #2
   for (i = 0; i < t->used-1; ) {
 8010d26:	3f01      	subs	r7, #1
 8010d28:	42b7      	cmp	r7, r6
       b[x++] = (unsigned char)(t->dp[i] >> j);
 8010d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010d2e:	eba0 0402 	sub.w	r4, r0, r2
   for (i = 0; i < t->used-1; ) {
 8010d32:	dc03      	bgt.n	8010d3c <fp_to_unsigned_bin_at_pos+0x22>
 8010d34:	1911      	adds	r1, r2, r4
 8010d36:	1a88      	subs	r0, r1, r2
   while (n != 0) {
 8010d38:	b95b      	cbnz	r3, 8010d52 <fp_to_unsigned_bin_at_pos+0x38>
}
 8010d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
       b[x++] = (unsigned char)(t->dp[i] >> j);
 8010d3c:	40eb      	lsrs	r3, r5
 8010d3e:	f800 3b01 	strb.w	r3, [r0], #1
       j += 8;
 8010d42:	f105 0308 	add.w	r3, r5, #8
       i += j == DIGIT_BIT;
 8010d46:	2d18      	cmp	r5, #24
 8010d48:	bf08      	it	eq
 8010d4a:	3601      	addeq	r6, #1
       j &= DIGIT_BIT - 1;
 8010d4c:	f003 051f 	and.w	r5, r3, #31
 8010d50:	e7e7      	b.n	8010d22 <fp_to_unsigned_bin_at_pos+0x8>
       b[x++] = (unsigned char)n;
 8010d52:	f801 3b01 	strb.w	r3, [r1], #1
       n >>= 8;
 8010d56:	0a1b      	lsrs	r3, r3, #8
 8010d58:	e7ed      	b.n	8010d36 <fp_to_unsigned_bin_at_pos+0x1c>

08010d5a <fp_is_bit_set>:
    if (b > FP_MAX_BITS)
 8010d5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010d5e:	d80f      	bhi.n	8010d80 <fp_is_bit_set+0x26>
    if ((fp_digit)a->used < i)
 8010d60:	6802      	ldr	r2, [r0, #0]
 8010d62:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
    i = b/DIGIT_BIT;
 8010d66:	ea4f 1351 	mov.w	r3, r1, lsr #5
    if ((fp_digit)a->used < i)
 8010d6a:	d30c      	bcc.n	8010d86 <fp_is_bit_set+0x2c>
    return (int)((a->dp[i] >> b%DIGIT_BIT) & (fp_digit)1);
 8010d6c:	3302      	adds	r3, #2
 8010d6e:	f001 011f 	and.w	r1, r1, #31
 8010d72:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010d76:	fa20 f101 	lsr.w	r1, r0, r1
 8010d7a:	f001 0001 	and.w	r0, r1, #1
 8010d7e:	4770      	bx	lr
        return FP_VAL;
 8010d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d84:	4770      	bx	lr
        return 0;
 8010d86:	2000      	movs	r0, #0
}
 8010d88:	4770      	bx	lr

08010d8a <fp_count_bits>:
{
 8010d8a:	4603      	mov	r3, r0
  if (a->used == 0) {
 8010d8c:	6800      	ldr	r0, [r0, #0]
 8010d8e:	b128      	cbz	r0, 8010d9c <fp_count_bits+0x12>
  r = (a->used - 1) * DIGIT_BIT;
 8010d90:	1e42      	subs	r2, r0, #1
 8010d92:	0150      	lsls	r0, r2, #5
  q = a->dp[a->used - 1];
 8010d94:	3202      	adds	r2, #2
 8010d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  while (q > ((fp_digit) 0)) {
 8010d9a:	b903      	cbnz	r3, 8010d9e <fp_count_bits+0x14>
}
 8010d9c:	4770      	bx	lr
    ++r;
 8010d9e:	3001      	adds	r0, #1
    q >>= ((fp_digit) 1);
 8010da0:	085b      	lsrs	r3, r3, #1
 8010da2:	e7fa      	b.n	8010d9a <fp_count_bits+0x10>

08010da4 <fp_unsigned_bin_size>:
{
 8010da4:	b508      	push	{r3, lr}
  int     size = fp_count_bits (a);
 8010da6:	f7ff fff0 	bl	8010d8a <fp_count_bits>
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
 8010daa:	f010 0307 	ands.w	r3, r0, #7
 8010dae:	bf18      	it	ne
 8010db0:	2301      	movne	r3, #1
 8010db2:	2800      	cmp	r0, #0
 8010db4:	bfb8      	it	lt
 8010db6:	3007      	addlt	r0, #7
}
 8010db8:	eb03 00e0 	add.w	r0, r3, r0, asr #3
 8010dbc:	bd08      	pop	{r3, pc}

08010dbe <fp_leading_bit>:
{
 8010dbe:	4602      	mov	r2, r0
    if (a->used != 0) {
 8010dc0:	6800      	ldr	r0, [r0, #0]
 8010dc2:	b160      	cbz	r0, 8010dde <fp_leading_bit+0x20>
        fp_digit q = a->dp[a->used - 1];
 8010dc4:	1c43      	adds	r3, r0, #1
    int bit = 0;
 8010dc6:	2000      	movs	r0, #0
        fp_digit q = a->dp[a->used - 1];
 8010dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dcc:	2204      	movs	r2, #4
            if ((unsigned char)q != 0)
 8010dce:	b2d9      	uxtb	r1, r3
 8010dd0:	b109      	cbz	r1, 8010dd6 <fp_leading_bit+0x18>
                bit = (q & 0x80) != 0;
 8010dd2:	f3c3 10c0 	ubfx	r0, r3, #7, #1
        while (qSz > 0) {
 8010dd6:	3a01      	subs	r2, #1
            q >>= 8;
 8010dd8:	ea4f 2313 	mov.w	r3, r3, lsr #8
        while (qSz > 0) {
 8010ddc:	d1f7      	bne.n	8010dce <fp_leading_bit+0x10>
}
 8010dde:	4770      	bx	lr

08010de0 <fp_lshd>:
    if (a->used + x > FP_SIZE) return FP_VAL;
 8010de0:	6803      	ldr	r3, [r0, #0]
 8010de2:	185a      	adds	r2, r3, r1
 8010de4:	2a18      	cmp	r2, #24
{
 8010de6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (a->used + x > FP_SIZE) return FP_VAL;
 8010de8:	dc2b      	bgt.n	8010e42 <fp_lshd+0x62>
    y = a->used + x - 1;
 8010dea:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    a->used = y + 1;
 8010dee:	1c54      	adds	r4, r2, #1
 8010df0:	f06f 0603 	mvn.w	r6, #3
 8010df4:	6002      	str	r2, [r0, #0]
    for (; y >= x; y--) {
 8010df6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010dfa:	434e      	muls	r6, r1
    y = a->used + x - 1;
 8010dfc:	4665      	mov	r5, ip
    for (; y >= x; y--) {
 8010dfe:	428d      	cmp	r5, r1
 8010e00:	da14      	bge.n	8010e2c <fp_lshd+0x4c>
 8010e02:	425b      	negs	r3, r3
 8010e04:	428a      	cmp	r2, r1
 8010e06:	bfb8      	it	lt
 8010e08:	2300      	movlt	r3, #0
 8010e0a:	4463      	add	r3, ip
        a->dp[y] = 0;
 8010e0c:	f100 0208 	add.w	r2, r0, #8
 8010e10:	2100      	movs	r1, #0
    for (; y >= 0; y--) {
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	da0f      	bge.n	8010e36 <fp_lshd+0x56>
    fp_clamp(a);
 8010e16:	6803      	ldr	r3, [r0, #0]
 8010e18:	b12b      	cbz	r3, 8010e26 <fp_lshd+0x46>
 8010e1a:	1e5a      	subs	r2, r3, #1
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010e22:	b163      	cbz	r3, 8010e3e <fp_lshd+0x5e>
 8010e24:	6843      	ldr	r3, [r0, #4]
 8010e26:	6043      	str	r3, [r0, #4]
 8010e28:	2000      	movs	r0, #0
}
 8010e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->dp[y] = a->dp[y-x];
 8010e2c:	59a7      	ldr	r7, [r4, r6]
 8010e2e:	f844 7904 	str.w	r7, [r4], #-4
    for (; y >= x; y--) {
 8010e32:	3d01      	subs	r5, #1
 8010e34:	e7e3      	b.n	8010dfe <fp_lshd+0x1e>
        a->dp[y] = 0;
 8010e36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (; y >= 0; y--) {
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	e7e9      	b.n	8010e12 <fp_lshd+0x32>
    fp_clamp(a);
 8010e3e:	6002      	str	r2, [r0, #0]
 8010e40:	e7e9      	b.n	8010e16 <fp_lshd+0x36>
    if (a->used + x > FP_SIZE) return FP_VAL;
 8010e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e46:	e7f0      	b.n	8010e2a <fp_lshd+0x4a>

08010e48 <fp_zero>:
    a->used = 0;
 8010e48:	2100      	movs	r1, #0
    a->sign = FP_ZPOS;
 8010e4a:	e9c0 1100 	strd	r1, r1, [r0]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 8010e4e:	2260      	movs	r2, #96	; 0x60
 8010e50:	3008      	adds	r0, #8
 8010e52:	f002 b9dd 	b.w	8013210 <memset>

08010e56 <fp_2expt>:
{
 8010e56:	b538      	push	{r3, r4, r5, lr}
 8010e58:	460c      	mov	r4, r1
 8010e5a:	4605      	mov	r5, r0
   fp_zero (a);
 8010e5c:	f7ff fff4 	bl	8010e48 <fp_zero>
   if (z >= FP_SIZE) {
 8010e60:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8010e64:	d20a      	bcs.n	8010e7c <fp_2expt+0x26>
   z = b / DIGIT_BIT;
 8010e66:	1163      	asrs	r3, r4, #5
  a->used = z + 1;
 8010e68:	1c5a      	adds	r2, r3, #1
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 8010e6a:	f004 041f 	and.w	r4, r4, #31
 8010e6e:	3302      	adds	r3, #2
 8010e70:	2101      	movs	r1, #1
 8010e72:	fa01 f404 	lsl.w	r4, r1, r4
  a->used = z + 1;
 8010e76:	602a      	str	r2, [r5, #0]
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 8010e78:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}

08010e7e <fp_read_unsigned_bin>:
{
 8010e7e:	b570      	push	{r4, r5, r6, lr}
 8010e80:	4614      	mov	r4, r2
 8010e82:	4605      	mov	r5, r0
 8010e84:	460e      	mov	r6, r1
  fp_zero (a);
 8010e86:	f7ff ffdf 	bl	8010e48 <fp_zero>
  if (c == 0) {
 8010e8a:	b1ac      	cbz	r4, 8010eb8 <fp_read_unsigned_bin+0x3a>
  if (c > 0 && (word32)c > maxC) {
 8010e8c:	2c60      	cmp	r4, #96	; 0x60
     int excess = (c - maxC);
 8010e8e:	bfc2      	ittt	gt
 8010e90:	3c60      	subgt	r4, #96	; 0x60
     b += excess;
 8010e92:	1936      	addgt	r6, r6, r4
     c -= excess;
 8010e94:	2460      	movgt	r4, #96	; 0x60
     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
 8010e96:	1ce2      	adds	r2, r4, #3
 8010e98:	462b      	mov	r3, r5
 8010e9a:	0892      	lsrs	r2, r2, #2
 8010e9c:	f843 2b08 	str.w	r2, [r3], #8
     for (c -= 1; c >= 0; c -= 1) {
 8010ea0:	3c01      	subs	r4, #1
 8010ea2:	2c00      	cmp	r4, #0
 8010ea4:	da0a      	bge.n	8010ebc <fp_read_unsigned_bin+0x3e>
  fp_clamp (a);
 8010ea6:	682b      	ldr	r3, [r5, #0]
 8010ea8:	b12b      	cbz	r3, 8010eb6 <fp_read_unsigned_bin+0x38>
 8010eaa:	1e5a      	subs	r2, r3, #1
 8010eac:	3301      	adds	r3, #1
 8010eae:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8010eb2:	b13b      	cbz	r3, 8010ec4 <fp_read_unsigned_bin+0x46>
 8010eb4:	686b      	ldr	r3, [r5, #4]
 8010eb6:	606b      	str	r3, [r5, #4]
}
 8010eb8:	2000      	movs	r0, #0
 8010eba:	bd70      	pop	{r4, r5, r6, pc}
       pd[c] = *b++;
 8010ebc:	f816 2b01 	ldrb.w	r2, [r6], #1
 8010ec0:	551a      	strb	r2, [r3, r4]
 8010ec2:	e7ed      	b.n	8010ea0 <fp_read_unsigned_bin+0x22>
  fp_clamp (a);
 8010ec4:	602a      	str	r2, [r5, #0]
 8010ec6:	e7ee      	b.n	8010ea6 <fp_read_unsigned_bin+0x28>

08010ec8 <fp_set>:
{
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4605      	mov	r5, r0
 8010ecc:	460c      	mov	r4, r1
   fp_zero(a);
 8010ece:	f7ff ffbb 	bl	8010e48 <fp_zero>
   a->dp[0] = b;
 8010ed2:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
 8010ed4:	3c00      	subs	r4, #0
 8010ed6:	bf18      	it	ne
 8010ed8:	2401      	movne	r4, #1
 8010eda:	602c      	str	r4, [r5, #0]
}
 8010edc:	bd38      	pop	{r3, r4, r5, pc}

08010ede <fp_montgomery_calc_normalization>:
{
 8010ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee0:	4605      	mov	r5, r0
  bits = fp_count_bits (b) % DIGIT_BIT;
 8010ee2:	4608      	mov	r0, r1
 8010ee4:	f7ff ff51 	bl	8010d8a <fp_count_bits>
  if (!bits) bits = DIGIT_BIT;
 8010ee8:	f010 041f 	ands.w	r4, r0, #31
{
 8010eec:	460e      	mov	r6, r1
  if (!bits) bits = DIGIT_BIT;
 8010eee:	d024      	beq.n	8010f3a <fp_montgomery_calc_normalization+0x5c>
  bits = fp_count_bits (b) % DIGIT_BIT;
 8010ef0:	4240      	negs	r0, r0
 8010ef2:	f000 001f 	and.w	r0, r0, #31
 8010ef6:	bf58      	it	pl
 8010ef8:	4244      	negpl	r4, r0
  if (b->used > 1) {
 8010efa:	6831      	ldr	r1, [r6, #0]
 8010efc:	2901      	cmp	r1, #1
 8010efe:	dd1e      	ble.n	8010f3e <fp_montgomery_calc_normalization+0x60>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
 8010f00:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8010f04:	3921      	subs	r1, #33	; 0x21
 8010f06:	4628      	mov	r0, r5
 8010f08:	f7ff ffa5 	bl	8010e56 <fp_2expt>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 8010f0c:	3c01      	subs	r4, #1
    int err = fp_mul_2 (a, a);
 8010f0e:	4629      	mov	r1, r5
 8010f10:	4628      	mov	r0, r5
 8010f12:	f7ff fc0e 	bl	8010732 <fp_mul_2>
    if (err != FP_OKAY) {
 8010f16:	4607      	mov	r7, r0
 8010f18:	b968      	cbnz	r0, 8010f36 <fp_montgomery_calc_normalization+0x58>
    if (fp_cmp_mag (a, b) != FP_LT) {
 8010f1a:	4631      	mov	r1, r6
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f7ff fdc6 	bl	8010aae <fp_cmp_mag>
 8010f22:	3001      	adds	r0, #1
 8010f24:	d004      	beq.n	8010f30 <fp_montgomery_calc_normalization+0x52>
      s_fp_sub (a, b, a);
 8010f26:	462a      	mov	r2, r5
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f7ff fbb8 	bl	80106a0 <s_fp_sub>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 8010f30:	3401      	adds	r4, #1
 8010f32:	2c20      	cmp	r4, #32
 8010f34:	d1eb      	bne.n	8010f0e <fp_montgomery_calc_normalization+0x30>
}
 8010f36:	4638      	mov	r0, r7
 8010f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!bits) bits = DIGIT_BIT;
 8010f3a:	2420      	movs	r4, #32
 8010f3c:	e7dd      	b.n	8010efa <fp_montgomery_calc_normalization+0x1c>
   a->dp[0] = b;
 8010f3e:	2401      	movs	r4, #1
   fp_zero(a);
 8010f40:	4628      	mov	r0, r5
 8010f42:	f7ff ff81 	bl	8010e48 <fp_zero>
   a->dp[0] = b;
 8010f46:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
 8010f48:	602c      	str	r4, [r5, #0]
     bits = 1;
 8010f4a:	e7df      	b.n	8010f0c <fp_montgomery_calc_normalization+0x2e>

08010f4c <fp_rshd>:
{
 8010f4c:	b4f0      	push	{r4, r5, r6, r7}
  if (x >= a->used) {
 8010f4e:	6804      	ldr	r4, [r0, #0]
 8010f50:	428c      	cmp	r4, r1
{
 8010f52:	4603      	mov	r3, r0
  if (x >= a->used) {
 8010f54:	dd16      	ble.n	8010f84 <fp_rshd+0x38>
 8010f56:	f100 0608 	add.w	r6, r0, #8
 8010f5a:	4635      	mov	r5, r6
   for (y = 0; y < a->used - x; y++) {
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	1a60      	subs	r0, r4, r1
 8010f60:	4290      	cmp	r0, r2
 8010f62:	dc12      	bgt.n	8010f8a <fp_rshd+0x3e>
 8010f64:	4602      	mov	r2, r0
      a->dp[y] = 0;
 8010f66:	2100      	movs	r1, #0
   for (; y < a->used; y++) {
 8010f68:	4294      	cmp	r4, r2
 8010f6a:	dc14      	bgt.n	8010f96 <fp_rshd+0x4a>
   a->used -= x;
 8010f6c:	6018      	str	r0, [r3, #0]
   fp_clamp(a);
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	b12a      	cbz	r2, 8010f7e <fp_rshd+0x32>
 8010f72:	1e51      	subs	r1, r2, #1
 8010f74:	3201      	adds	r2, #1
 8010f76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010f7a:	b182      	cbz	r2, 8010f9e <fp_rshd+0x52>
 8010f7c:	685a      	ldr	r2, [r3, #4]
 8010f7e:	605a      	str	r2, [r3, #4]
}
 8010f80:	bcf0      	pop	{r4, r5, r6, r7}
 8010f82:	4770      	bx	lr
 8010f84:	bcf0      	pop	{r4, r5, r6, r7}
     fp_zero(a);
 8010f86:	f7ff bf5f 	b.w	8010e48 <fp_zero>
      a->dp[y] = a->dp[y+x];
 8010f8a:	f855 7021 	ldr.w	r7, [r5, r1, lsl #2]
 8010f8e:	f845 7b04 	str.w	r7, [r5], #4
   for (y = 0; y < a->used - x; y++) {
 8010f92:	3201      	adds	r2, #1
 8010f94:	e7e4      	b.n	8010f60 <fp_rshd+0x14>
      a->dp[y] = 0;
 8010f96:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
   for (; y < a->used; y++) {
 8010f9a:	3201      	adds	r2, #1
 8010f9c:	e7e4      	b.n	8010f68 <fp_rshd+0x1c>
   fp_clamp(a);
 8010f9e:	6019      	str	r1, [r3, #0]
 8010fa0:	e7e5      	b.n	8010f6e <fp_rshd+0x22>

08010fa2 <fp_rshb>:
{
 8010fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (x <= 0) return;
 8010fa4:	1e0c      	subs	r4, r1, #0
{
 8010fa6:	4605      	mov	r5, r0
    if (x <= 0) return;
 8010fa8:	dd1f      	ble.n	8010fea <fp_rshb+0x48>
    if (x >= DIGIT_BIT) {
 8010faa:	2c1f      	cmp	r4, #31
 8010fac:	dd05      	ble.n	8010fba <fp_rshb+0x18>
        fp_rshd(c, x / DIGIT_BIT);
 8010fae:	1161      	asrs	r1, r4, #5
 8010fb0:	f7ff ffcc 	bl	8010f4c <fp_rshd>
        if (D == 0) return;
 8010fb4:	f014 041f 	ands.w	r4, r4, #31
 8010fb8:	d017      	beq.n	8010fea <fp_rshb+0x48>
    if (fp_iszero(c)) return;
 8010fba:	682b      	ldr	r3, [r5, #0]
 8010fbc:	b1ab      	cbz	r3, 8010fea <fp_rshb+0x48>
    shift = DIGIT_BIT - D;
 8010fbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    tmpc = c->dp + (c->used - 1);
 8010fc2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8010fc6:	40a1      	lsls	r1, r4
    shift = DIGIT_BIT - D;
 8010fc8:	f1c4 0720 	rsb	r7, r4, #32
    tmpc = c->dp + (c->used - 1);
 8010fcc:	3204      	adds	r2, #4
    for (x = c->used - 1; x >= 0; x--) {
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	43c9      	mvns	r1, r1
    r = 0;
 8010fd2:	2000      	movs	r0, #0
    for (x = c->used - 1; x >= 0; x--) {
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	da09      	bge.n	8010fec <fp_rshb+0x4a>
    fp_clamp(c);
 8010fd8:	682b      	ldr	r3, [r5, #0]
 8010fda:	b12b      	cbz	r3, 8010fe8 <fp_rshb+0x46>
 8010fdc:	1e5a      	subs	r2, r3, #1
 8010fde:	3301      	adds	r3, #1
 8010fe0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8010fe4:	b173      	cbz	r3, 8011004 <fp_rshb+0x62>
 8010fe6:	686b      	ldr	r3, [r5, #4]
 8010fe8:	606b      	str	r3, [r5, #4]
}
 8010fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      rr = *tmpc & mask;
 8010fec:	f8d2 c000 	ldr.w	ip, [r2]
      *tmpc = (*tmpc >> D) | (r << shift);
 8010ff0:	40b8      	lsls	r0, r7
 8010ff2:	fa2c f604 	lsr.w	r6, ip, r4
 8010ff6:	4330      	orrs	r0, r6
 8010ff8:	f842 0904 	str.w	r0, [r2], #-4
    for (x = c->used - 1; x >= 0; x--) {
 8010ffc:	3b01      	subs	r3, #1
      r = rr;
 8010ffe:	ea0c 0001 	and.w	r0, ip, r1
 8011002:	e7e7      	b.n	8010fd4 <fp_rshb+0x32>
    fp_clamp(c);
 8011004:	602a      	str	r2, [r5, #0]
 8011006:	e7e7      	b.n	8010fd8 <fp_rshb+0x36>

08011008 <fp_sub_d>:
{
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	4605      	mov	r5, r0
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801100c:	2068      	movs	r0, #104	; 0x68
{
 801100e:	460f      	mov	r7, r1
 8011010:	4616      	mov	r6, r2
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011012:	f002 f8c5 	bl	80131a0 <malloc>
 8011016:	4604      	mov	r4, r0
   if (tmp == NULL)
 8011018:	b180      	cbz	r0, 801103c <fp_sub_d+0x34>
    fp_zero(a);
 801101a:	f7ff ff15 	bl	8010e48 <fp_zero>
   fp_set(tmp, b);
 801101e:	4639      	mov	r1, r7
 8011020:	4620      	mov	r0, r4
 8011022:	f7ff ff51 	bl	8010ec8 <fp_set>
     err = fp_sub(a, tmp, c);
 8011026:	4628      	mov	r0, r5
 8011028:	4632      	mov	r2, r6
 801102a:	4621      	mov	r1, r4
 801102c:	f7ff fd7c 	bl	8010b28 <fp_sub>
 8011030:	4605      	mov	r5, r0
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8011032:	4620      	mov	r0, r4
 8011034:	f002 f8bc 	bl	80131b0 <free>
}
 8011038:	4628      	mov	r0, r5
 801103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       return FP_MEM;
 801103c:	f06f 0501 	mvn.w	r5, #1
 8011040:	e7fa      	b.n	8011038 <fp_sub_d+0x30>

08011042 <mp_init>:
{
 8011042:	b508      	push	{r3, lr}
  if (a)
 8011044:	b108      	cbz	r0, 801104a <mp_init+0x8>
    fp_zero(a);
 8011046:	f7ff feff 	bl	8010e48 <fp_zero>
}
 801104a:	2000      	movs	r0, #0
 801104c:	bd08      	pop	{r3, pc}

0801104e <fp_forcezero>:
    if (a == NULL)
 801104e:	b138      	cbz	r0, 8011060 <fp_forcezero+0x12>
    a->used = 0;
 8011050:	2200      	movs	r2, #0
    a->sign = FP_ZPOS;
 8011052:	e9c0 2200 	strd	r2, r2, [r0]
    ForceZero(a->dp, size * sizeof(fp_digit));
 8011056:	f100 0308 	add.w	r3, r0, #8
WC_MISC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 801105a:	3068      	adds	r0, #104	; 0x68
    while (len--) *z++ = 0;
 801105c:	4283      	cmp	r3, r0
 801105e:	d100      	bne.n	8011062 <fp_forcezero+0x14>
}
 8011060:	4770      	bx	lr
 8011062:	f803 2b01 	strb.w	r2, [r3], #1
 8011066:	e7f9      	b.n	801105c <fp_forcezero+0xe>

08011068 <mp_forcezero>:
    fp_forcezero(a);
 8011068:	f7ff bff1 	b.w	801104e <fp_forcezero>

0801106c <mp_clear>:
    if (a == NULL)
 801106c:	b108      	cbz	r0, 8011072 <mp_clear+0x6>
    fp_clear(a);
 801106e:	f7ff beeb 	b.w	8010e48 <fp_zero>
}
 8011072:	4770      	bx	lr

08011074 <mp_free>:
 8011074:	4770      	bx	lr

08011076 <mp_init_multi>:
{
 8011076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801107a:	460e      	mov	r6, r1
 801107c:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 8011080:	4615      	mov	r5, r2
 8011082:	461c      	mov	r4, r3
    if (a)
 8011084:	b108      	cbz	r0, 801108a <mp_init_multi+0x14>
    fp_zero(a);
 8011086:	f7ff fedf 	bl	8010e48 <fp_zero>
    if (b)
 801108a:	b116      	cbz	r6, 8011092 <mp_init_multi+0x1c>
    fp_zero(a);
 801108c:	4630      	mov	r0, r6
 801108e:	f7ff fedb 	bl	8010e48 <fp_zero>
    if (c)
 8011092:	b115      	cbz	r5, 801109a <mp_init_multi+0x24>
    fp_zero(a);
 8011094:	4628      	mov	r0, r5
 8011096:	f7ff fed7 	bl	8010e48 <fp_zero>
    if (d)
 801109a:	b114      	cbz	r4, 80110a2 <mp_init_multi+0x2c>
    fp_zero(a);
 801109c:	4620      	mov	r0, r4
 801109e:	f7ff fed3 	bl	8010e48 <fp_zero>
    if (e)
 80110a2:	f1b8 0f00 	cmp.w	r8, #0
 80110a6:	d002      	beq.n	80110ae <mp_init_multi+0x38>
    fp_zero(a);
 80110a8:	4640      	mov	r0, r8
 80110aa:	f7ff fecd 	bl	8010e48 <fp_zero>
    if (f)
 80110ae:	b117      	cbz	r7, 80110b6 <mp_init_multi+0x40>
    fp_zero(a);
 80110b0:	4638      	mov	r0, r7
 80110b2:	f7ff fec9 	bl	8010e48 <fp_zero>
}
 80110b6:	2000      	movs	r0, #0
 80110b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110bc <mp_sub>:
  return fp_sub(a, b, c);
 80110bc:	f7ff bd34 	b.w	8010b28 <fp_sub>

080110c0 <mp_submod_ct>:
  return fp_submod_ct(a, b, c, d);
 80110c0:	f7ff bc2c 	b.w	801091c <fp_submod_ct>

080110c4 <mp_addmod_ct>:
  return fp_addmod_ct(a, b, c, d);
 80110c4:	f7ff bc7b 	b.w	80109be <fp_addmod_ct>

080110c8 <mp_cmp>:
  return fp_cmp(a, b);
 80110c8:	f7ff bd4f 	b.w	8010b6a <fp_cmp>

080110cc <mp_cmp_d>:
  return fp_cmp_d(a, b);
 80110cc:	f7ff bcd6 	b.w	8010a7c <fp_cmp_d>

080110d0 <mp_unsigned_bin_size>:
  return fp_unsigned_bin_size(a);
 80110d0:	f7ff be68 	b.w	8010da4 <fp_unsigned_bin_size>

080110d4 <mp_read_unsigned_bin>:
  return fp_read_unsigned_bin(a, b, c);
 80110d4:	f7ff bed3 	b.w	8010e7e <fp_read_unsigned_bin>

080110d8 <mp_sub_d>:
  return fp_sub_d(a, b, c);
 80110d8:	f7ff bf96 	b.w	8011008 <fp_sub_d>

080110dc <fp_copy>:
    if (a != b) {
 80110dc:	4288      	cmp	r0, r1
{
 80110de:	460b      	mov	r3, r1
    if (a != b) {
 80110e0:	d00a      	beq.n	80110f8 <fp_copy+0x1c>
        b->used = a->used;
 80110e2:	6802      	ldr	r2, [r0, #0]
 80110e4:	600a      	str	r2, [r1, #0]
        b->sign = a->sign;
 80110e6:	6842      	ldr	r2, [r0, #4]
 80110e8:	604a      	str	r2, [r1, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
 80110ea:	f100 0108 	add.w	r1, r0, #8
 80110ee:	2260      	movs	r2, #96	; 0x60
 80110f0:	f103 0008 	add.w	r0, r3, #8
 80110f4:	f002 b864 	b.w	80131c0 <memcpy>
}
 80110f8:	4770      	bx	lr

080110fa <fp_mul_2d>:
{
 80110fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fc:	460d      	mov	r5, r1
   fp_copy(a, c);
 80110fe:	4611      	mov	r1, r2
{
 8011100:	4614      	mov	r4, r2
   fp_copy(a, c);
 8011102:	f7ff ffeb 	bl	80110dc <fp_copy>
   if (b >= DIGIT_BIT) {
 8011106:	2d1f      	cmp	r5, #31
 8011108:	dc0d      	bgt.n	8011126 <fp_mul_2d+0x2c>
   if (b != 0) {
 801110a:	f015 061f 	ands.w	r6, r5, #31
 801110e:	d111      	bne.n	8011134 <fp_mul_2d+0x3a>
   fp_clamp(c);
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	b12b      	cbz	r3, 8011120 <fp_mul_2d+0x26>
 8011114:	1e5a      	subs	r2, r3, #1
 8011116:	3301      	adds	r3, #1
 8011118:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801111c:	b383      	cbz	r3, 8011180 <fp_mul_2d+0x86>
 801111e:	6863      	ldr	r3, [r4, #4]
 8011120:	6063      	str	r3, [r4, #4]
   return FP_OKAY;
 8011122:	2000      	movs	r0, #0
 8011124:	e005      	b.n	8011132 <fp_mul_2d+0x38>
      int ret = fp_lshd(c, b/DIGIT_BIT);
 8011126:	1169      	asrs	r1, r5, #5
 8011128:	4620      	mov	r0, r4
 801112a:	f7ff fe59 	bl	8010de0 <fp_lshd>
      if (ret != FP_OKAY)
 801112e:	2800      	cmp	r0, #0
 8011130:	d0eb      	beq.n	801110a <fp_mul_2d+0x10>
}
 8011132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b %= DIGIT_BIT;
 8011134:	426d      	negs	r5, r5
      for (x = 0; x < c->used; x++) {
 8011136:	4622      	mov	r2, r4
   b %= DIGIT_BIT;
 8011138:	f005 051f 	and.w	r5, r5, #31
 801113c:	bf58      	it	pl
 801113e:	426e      	negpl	r6, r5
      for (x = 0; x < c->used; x++) {
 8011140:	2000      	movs	r0, #0
 8011142:	f852 3b08 	ldr.w	r3, [r2], #8
      shift = DIGIT_BIT - b;
 8011146:	f1c6 0c20 	rsb	ip, r6, #32
      carry = 0;
 801114a:	4601      	mov	r1, r0
      for (x = 0; x < c->used; x++) {
 801114c:	4283      	cmp	r3, r0
 801114e:	dc08      	bgt.n	8011162 <fp_mul_2d+0x68>
      if (carry && x < FP_SIZE) {
 8011150:	b189      	cbz	r1, 8011176 <fp_mul_2d+0x7c>
 8011152:	2b17      	cmp	r3, #23
 8011154:	dc0f      	bgt.n	8011176 <fp_mul_2d+0x7c>
         c->dp[c->used++] = carry;
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	3302      	adds	r3, #2
 801115a:	6022      	str	r2, [r4, #0]
 801115c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
      if (x == FP_SIZE)
 8011160:	e7d6      	b.n	8011110 <fp_mul_2d+0x16>
          carrytmp = c->dp[x] >> shift;
 8011162:	6817      	ldr	r7, [r2, #0]
          c->dp[x] = (c->dp[x] << b) + carry;
 8011164:	fa07 f506 	lsl.w	r5, r7, r6
 8011168:	4429      	add	r1, r5
 801116a:	f842 1b04 	str.w	r1, [r2], #4
      for (x = 0; x < c->used; x++) {
 801116e:	3001      	adds	r0, #1
          carry = carrytmp;
 8011170:	fa27 f10c 	lsr.w	r1, r7, ip
 8011174:	e7ea      	b.n	801114c <fp_mul_2d+0x52>
      if (x == FP_SIZE)
 8011176:	2b18      	cmp	r3, #24
 8011178:	d1ca      	bne.n	8011110 <fp_mul_2d+0x16>
         return FP_VAL;
 801117a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801117e:	e7d8      	b.n	8011132 <fp_mul_2d+0x38>
   fp_clamp(c);
 8011180:	6022      	str	r2, [r4, #0]
 8011182:	e7c5      	b.n	8011110 <fp_mul_2d+0x16>

08011184 <fp_mul_comba>:
{
 8011184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011188:	b087      	sub	sp, #28
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801118a:	6803      	ldr	r3, [r0, #0]
{
 801118c:	9205      	str	r2, [sp, #20]
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801118e:	680a      	ldr	r2, [r1, #0]
 8011190:	4413      	add	r3, r2
 8011192:	2b17      	cmp	r3, #23
{
 8011194:	4606      	mov	r6, r0
 8011196:	460d      	mov	r5, r1
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 8011198:	dc6e      	bgt.n	8011278 <fp_mul_comba+0xf4>
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801119a:	2068      	movs	r0, #104	; 0x68
 801119c:	f002 f800 	bl	80131a0 <malloc>
   if (tmp == NULL)
 80111a0:	4604      	mov	r4, r0
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d06b      	beq.n	801127e <fp_mul_comba+0xfa>
   pa = A->used + B->used;
 80111a6:	4637      	mov	r7, r6
 80111a8:	46a8      	mov	r8, r5
 80111aa:	f857 3b08 	ldr.w	r3, [r7], #8
 80111ae:	f858 2b08 	ldr.w	r2, [r8], #8
 80111b2:	4413      	add	r3, r2
   if (pa >= FP_SIZE) {
 80111b4:	2b17      	cmp	r3, #23
 80111b6:	bfa8      	it	ge
 80111b8:	2317      	movge	r3, #23
 80111ba:	9302      	str	r3, [sp, #8]
    fp_zero(a);
 80111bc:	f7ff fe44 	bl	8010e48 <fp_zero>
   COMBA_CLEAR;
 80111c0:	2200      	movs	r2, #0
 80111c2:	f104 0308 	add.w	r3, r4, #8
 80111c6:	9303      	str	r3, [sp, #12]
 80111c8:	4611      	mov	r1, r2
   for (ix = 0; ix < pa; ix++) {
 80111ca:	4694      	mov	ip, r2
 80111cc:	9b02      	ldr	r3, [sp, #8]
 80111ce:	459c      	cmp	ip, r3
 80111d0:	db18      	blt.n	8011204 <fp_mul_comba+0x80>
  dst->sign = A->sign ^ B->sign;
 80111d2:	6871      	ldr	r1, [r6, #4]
 80111d4:	686a      	ldr	r2, [r5, #4]
  dst->used = pa;
 80111d6:	6023      	str	r3, [r4, #0]
  fp_clamp(dst);
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	b13b      	cbz	r3, 80111ec <fp_mul_comba+0x68>
 80111dc:	1e58      	subs	r0, r3, #1
 80111de:	3301      	adds	r3, #1
 80111e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d045      	beq.n	8011274 <fp_mul_comba+0xf0>
  dst->sign = A->sign ^ B->sign;
 80111e8:	ea81 0302 	eor.w	r3, r1, r2
  fp_copy(dst, C);
 80111ec:	9905      	ldr	r1, [sp, #20]
  fp_clamp(dst);
 80111ee:	6063      	str	r3, [r4, #4]
  fp_copy(dst, C);
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ff ff73 	bl	80110dc <fp_copy>
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 80111f6:	4620      	mov	r0, r4
 80111f8:	f001 ffda 	bl	80131b0 <free>
  return ret;
 80111fc:	2000      	movs	r0, #0
}
 80111fe:	b007      	add	sp, #28
 8011200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ty = MIN(ix, (B->used > 0 ? B->used - 1 : 0));
 8011204:	682b      	ldr	r3, [r5, #0]
 8011206:	2b01      	cmp	r3, #1
 8011208:	bfb8      	it	lt
 801120a:	2301      	movlt	r3, #1
 801120c:	3b01      	subs	r3, #1
 801120e:	4563      	cmp	r3, ip
 8011210:	bfa8      	it	ge
 8011212:	4663      	movge	r3, ip
      tx = ix - ty;
 8011214:	ebac 0e03 	sub.w	lr, ip, r3
      tmpx = A->dp + tx;
 8011218:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 801121c:	9004      	str	r0, [sp, #16]
      tmpy = B->dp + ty;
 801121e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8011222:	9001      	str	r0, [sp, #4]
      iy = MIN(A->used-tx, ty+1);
 8011224:	6830      	ldr	r0, [r6, #0]
 8011226:	eba0 000e 	sub.w	r0, r0, lr
 801122a:	4298      	cmp	r0, r3
      COMBA_FORWARD;
 801122c:	468b      	mov	fp, r1
 801122e:	4611      	mov	r1, r2
 8011230:	f04f 0200 	mov.w	r2, #0
      iy = MIN(A->used-tx, ty+1);
 8011234:	bfc8      	it	gt
 8011236:	1c58      	addgt	r0, r3, #1
      for (iz = 0; iz < iy; ++iz) {
 8011238:	4696      	mov	lr, r2
 801123a:	4586      	cmp	lr, r0
 801123c:	db06      	blt.n	801124c <fp_mul_comba+0xc8>
      COMBA_STORE(dst->dp[ix]);
 801123e:	9b03      	ldr	r3, [sp, #12]
 8011240:	f843 bb04 	str.w	fp, [r3], #4
   for (ix = 0; ix < pa; ix++) {
 8011244:	f10c 0c01 	add.w	ip, ip, #1
      COMBA_STORE(dst->dp[ix]);
 8011248:	9303      	str	r3, [sp, #12]
   for (ix = 0; ix < pa; ix++) {
 801124a:	e7bf      	b.n	80111cc <fp_mul_comba+0x48>
          MULADD(_tmpx, _tmpy);
 801124c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011250:	f859 3904 	ldr.w	r3, [r9], #-4
 8011254:	f8cd 9004 	str.w	r9, [sp, #4]
 8011258:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801125c:	f859 902e 	ldr.w	r9, [r9, lr, lsl #2]
 8011260:	469a      	mov	sl, r3
 8011262:	2300      	movs	r3, #0
 8011264:	fbe9 b30a 	umlal	fp, r3, r9, sl
 8011268:	18c9      	adds	r1, r1, r3
 801126a:	f142 0200 	adc.w	r2, r2, #0
      for (iz = 0; iz < iy; ++iz) {
 801126e:	f10e 0e01 	add.w	lr, lr, #1
 8011272:	e7e2      	b.n	801123a <fp_mul_comba+0xb6>
  fp_clamp(dst);
 8011274:	6020      	str	r0, [r4, #0]
 8011276:	e7af      	b.n	80111d8 <fp_mul_comba+0x54>
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 8011278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801127c:	e7bf      	b.n	80111fe <fp_mul_comba+0x7a>
       return FP_MEM;
 801127e:	f06f 0001 	mvn.w	r0, #1
 8011282:	e7bc      	b.n	80111fe <fp_mul_comba+0x7a>

08011284 <fp_mul>:
{
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    y  = MAX(A->used, B->used);
 8011286:	680f      	ldr	r7, [r1, #0]
 8011288:	6806      	ldr	r6, [r0, #0]
    oldused = C->used;
 801128a:	6815      	ldr	r5, [r2, #0]
    y  = MAX(A->used, B->used);
 801128c:	42b7      	cmp	r7, r6
 801128e:	463b      	mov	r3, r7
 8011290:	bfb8      	it	lt
 8011292:	4633      	movlt	r3, r6
    if (y + yy >= FP_SIZE) {
 8011294:	42b7      	cmp	r7, r6
 8011296:	bfd4      	ite	le
 8011298:	eb03 0c07 	addle.w	ip, r3, r7
 801129c:	eb03 0c06 	addgt.w	ip, r3, r6
 80112a0:	f1bc 0f17 	cmp.w	ip, #23
{
 80112a4:	4614      	mov	r4, r2
    if (y + yy >= FP_SIZE) {
 80112a6:	dc0f      	bgt.n	80112c8 <fp_mul+0x44>
        if (y == 8) {
 80112a8:	2b08      	cmp	r3, #8
 80112aa:	d10a      	bne.n	80112c2 <fp_mul+0x3e>
           ret = fp_mul_comba8(A,B,C);
 80112ac:	f7fe ff52 	bl	8010154 <fp_mul_comba8>
    for (y = C->used; y >= 0 && y < oldused; y++) {
 80112b0:	4622      	mov	r2, r4
        C->dp[y] = 0;
 80112b2:	2100      	movs	r1, #0
    for (y = C->used; y >= 0 && y < oldused; y++) {
 80112b4:	f852 3b08 	ldr.w	r3, [r2], #8
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	db01      	blt.n	80112c0 <fp_mul+0x3c>
 80112bc:	42ab      	cmp	r3, r5
 80112be:	db06      	blt.n	80112ce <fp_mul+0x4a>
}
 80112c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = fp_mul_comba(A,B,C);
 80112c2:	f7ff ff5f 	bl	8011184 <fp_mul_comba>
 80112c6:	e7f3      	b.n	80112b0 <fp_mul+0x2c>
       ret = FP_VAL;
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112cc:	e7f0      	b.n	80112b0 <fp_mul+0x2c>
        C->dp[y] = 0;
 80112ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (y = C->used; y >= 0 && y < oldused; y++) {
 80112d2:	3301      	adds	r3, #1
 80112d4:	e7f0      	b.n	80112b8 <fp_mul+0x34>

080112d6 <mp_mul>:
  return fp_mul(a, b, c);
 80112d6:	f7ff bfd5 	b.w	8011284 <fp_mul>

080112da <fp_mod_2d>:
{
 80112da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (b <= 0) {
 80112dc:	1e0d      	subs	r5, r1, #0
{
 80112de:	4607      	mov	r7, r0
 80112e0:	4614      	mov	r4, r2
   if (b <= 0) {
 80112e2:	dc04      	bgt.n	80112ee <fp_mod_2d+0x14>
}
 80112e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fp_zero(c);
 80112e8:	4610      	mov	r0, r2
 80112ea:	f7ff bdad 	b.w	8010e48 <fp_zero>
   fp_copy(a, c);
 80112ee:	4611      	mov	r1, r2
 80112f0:	f7ff fef4 	bl	80110dc <fp_copy>
   if (c->sign == FP_ZPOS && b >= (DIGIT_BIT * a->used)) {
 80112f4:	6866      	ldr	r6, [r4, #4]
 80112f6:	b91e      	cbnz	r6, 8011300 <fp_mod_2d+0x26>
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 80112fe:	da36      	bge.n	801136e <fp_mod_2d+0x94>
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 8011300:	f105 021f 	add.w	r2, r5, #31
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 8011304:	2e01      	cmp	r6, #1
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 8011306:	ea4f 1352 	mov.w	r3, r2, lsr #5
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 801130a:	d02d      	beq.n	8011368 <fp_mod_2d+0x8e>
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801130c:	4620      	mov	r0, r4
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 801130e:	461a      	mov	r2, r3
   for (x = bmax; x < (unsigned int)c->used; x++) {
 8011310:	f850 1b08 	ldr.w	r1, [r0], #8
    c->dp[x] = 0;
 8011314:	2700      	movs	r7, #0
   for (x = bmax; x < (unsigned int)c->used; x++) {
 8011316:	4291      	cmp	r1, r2
 8011318:	d82a      	bhi.n	8011370 <fp_mod_2d+0x96>
  if (c->sign == FP_NEG) {
 801131a:	2e01      	cmp	r6, #1
 801131c:	d10c      	bne.n	8011338 <fp_mod_2d+0x5e>
 801131e:	f104 0c08 	add.w	ip, r4, #8
     fp_digit carry = 0;
 8011322:	2200      	movs	r2, #0
 8011324:	4666      	mov	r6, ip
     for (x = 0; x < (unsigned int)c->used; x++) {
 8011326:	4610      	mov	r0, r2
 8011328:	4281      	cmp	r1, r0
 801132a:	d125      	bne.n	8011378 <fp_mod_2d+0x9e>
         c->dp[x] = (fp_digit)0 - carry;
 801132c:	4252      	negs	r2, r2
     for (; x < bmax; x++) {
 801132e:	4299      	cmp	r1, r3
 8011330:	d330      	bcc.n	8011394 <fp_mod_2d+0xba>
     c->sign = FP_ZPOS;
 8011332:	2200      	movs	r2, #0
     c->used = (int)bmax;
 8011334:	6023      	str	r3, [r4, #0]
     c->sign = FP_ZPOS;
 8011336:	6062      	str	r2, [r4, #4]
  x = DIGIT_BIT - (b % DIGIT_BIT);
 8011338:	f005 051f 	and.w	r5, r5, #31
 801133c:	f1c5 0120 	rsb	r1, r5, #32
  if (x != DIGIT_BIT) {
 8011340:	b145      	cbz	r5, 8011354 <fp_mod_2d+0x7a>
     c->dp[bmax - 1] &= ~((fp_digit)0) >> x;
 8011342:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801134a:	fa22 f101 	lsr.w	r1, r2, r1
 801134e:	685a      	ldr	r2, [r3, #4]
 8011350:	400a      	ands	r2, r1
 8011352:	605a      	str	r2, [r3, #4]
  fp_clamp (c);
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	b12b      	cbz	r3, 8011364 <fp_mod_2d+0x8a>
 8011358:	1e5a      	subs	r2, r3, #1
 801135a:	3301      	adds	r3, #1
 801135c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011360:	b1e3      	cbz	r3, 801139c <fp_mod_2d+0xc2>
 8011362:	6863      	ldr	r3, [r4, #4]
 8011364:	6063      	str	r3, [r4, #4]
 8011366:	e002      	b.n	801136e <fp_mod_2d+0x94>
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 8011368:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 801136c:	d3ce      	bcc.n	801130c <fp_mod_2d+0x32>
}
 801136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c->dp[x] = 0;
 8011370:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
   for (x = bmax; x < (unsigned int)c->used; x++) {
 8011374:	3201      	adds	r2, #1
 8011376:	e7ce      	b.n	8011316 <fp_mod_2d+0x3c>
         fp_digit next = c->dp[x] > 0;
 8011378:	f8d6 e000 	ldr.w	lr, [r6]
         c->dp[x] = (fp_digit)0 - c->dp[x] - carry;
 801137c:	eb0e 0702 	add.w	r7, lr, r2
 8011380:	427f      	negs	r7, r7
 8011382:	f846 7b04 	str.w	r7, [r6], #4
         carry |= next;
 8011386:	f1be 0f00 	cmp.w	lr, #0
 801138a:	bf18      	it	ne
 801138c:	f042 0201 	orrne.w	r2, r2, #1
     for (x = 0; x < (unsigned int)c->used; x++) {
 8011390:	3001      	adds	r0, #1
 8011392:	e7c9      	b.n	8011328 <fp_mod_2d+0x4e>
         c->dp[x] = (fp_digit)0 - carry;
 8011394:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
     for (; x < bmax; x++) {
 8011398:	3101      	adds	r1, #1
 801139a:	e7c8      	b.n	801132e <fp_mod_2d+0x54>
  fp_clamp (c);
 801139c:	6022      	str	r2, [r4, #0]
 801139e:	e7d9      	b.n	8011354 <fp_mod_2d+0x7a>

080113a0 <fp_div_2d>:
{
 80113a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (b <= 0) {
 80113a2:	1e0d      	subs	r5, r1, #0
{
 80113a4:	4607      	mov	r7, r0
 80113a6:	4614      	mov	r4, r2
 80113a8:	461e      	mov	r6, r3
  if (b <= 0) {
 80113aa:	dc08      	bgt.n	80113be <fp_div_2d+0x1e>
    fp_copy (a, c);
 80113ac:	4611      	mov	r1, r2
 80113ae:	f7ff fe95 	bl	80110dc <fp_copy>
    if (d != NULL) {
 80113b2:	b35e      	cbz	r6, 801140c <fp_div_2d+0x6c>
      fp_zero (d);
 80113b4:	4630      	mov	r0, r6
}
 80113b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fp_zero (d);
 80113ba:	f7ff bd45 	b.w	8010e48 <fp_zero>
  if (a == c && d != NULL) {
 80113be:	4290      	cmp	r0, r2
 80113c0:	d103      	bne.n	80113ca <fp_div_2d+0x2a>
 80113c2:	b113      	cbz	r3, 80113ca <fp_div_2d+0x2a>
    fp_mod_2d (a, b, d);
 80113c4:	461a      	mov	r2, r3
 80113c6:	f7ff ff88 	bl	80112da <fp_mod_2d>
  fp_copy(a, c);
 80113ca:	4621      	mov	r1, r4
 80113cc:	4638      	mov	r0, r7
 80113ce:	f7ff fe85 	bl	80110dc <fp_copy>
  if (b >= (int)DIGIT_BIT) {
 80113d2:	2d1f      	cmp	r5, #31
 80113d4:	dd03      	ble.n	80113de <fp_div_2d+0x3e>
    fp_rshd (c, b / DIGIT_BIT);
 80113d6:	1169      	asrs	r1, r5, #5
 80113d8:	4620      	mov	r0, r4
 80113da:	f7ff fdb7 	bl	8010f4c <fp_rshd>
  if (D != 0) {
 80113de:	f015 011f 	ands.w	r1, r5, #31
 80113e2:	d002      	beq.n	80113ea <fp_div_2d+0x4a>
    fp_rshb(c, D);
 80113e4:	4620      	mov	r0, r4
 80113e6:	f7ff fddc 	bl	8010fa2 <fp_rshb>
  if (a != c && d != NULL) {
 80113ea:	42a7      	cmp	r7, r4
 80113ec:	d005      	beq.n	80113fa <fp_div_2d+0x5a>
 80113ee:	b126      	cbz	r6, 80113fa <fp_div_2d+0x5a>
    fp_mod_2d (a, b, d);
 80113f0:	4632      	mov	r2, r6
 80113f2:	4629      	mov	r1, r5
 80113f4:	4638      	mov	r0, r7
 80113f6:	f7ff ff70 	bl	80112da <fp_mod_2d>
  fp_clamp (c);
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	b12b      	cbz	r3, 801140a <fp_div_2d+0x6a>
 80113fe:	1e5a      	subs	r2, r3, #1
 8011400:	3301      	adds	r3, #1
 8011402:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011406:	b113      	cbz	r3, 801140e <fp_div_2d+0x6e>
 8011408:	6863      	ldr	r3, [r4, #4]
 801140a:	6063      	str	r3, [r4, #4]
}
 801140c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  fp_clamp (c);
 801140e:	6022      	str	r2, [r4, #0]
 8011410:	e7f3      	b.n	80113fa <fp_div_2d+0x5a>

08011412 <fp_div>:
{
 8011412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011416:	b08d      	sub	sp, #52	; 0x34
 8011418:	9305      	str	r3, [sp, #20]
  if (fp_iszero (b) == FP_YES) {
 801141a:	680b      	ldr	r3, [r1, #0]
{
 801141c:	9002      	str	r0, [sp, #8]
 801141e:	9104      	str	r1, [sp, #16]
 8011420:	9200      	str	r2, [sp, #0]
  if (fp_iszero (b) == FP_YES) {
 8011422:	2b00      	cmp	r3, #0
 8011424:	f000 8183 	beq.w	801172e <fp_div+0x31c>
  if (fp_cmp_mag (a, b) == FP_LT)
 8011428:	f7ff fb41 	bl	8010aae <fp_cmp_mag>
 801142c:	3001      	adds	r0, #1
 801142e:	d10f      	bne.n	8011450 <fp_div+0x3e>
    if (d != NULL) {
 8011430:	9b05      	ldr	r3, [sp, #20]
 8011432:	b11b      	cbz	r3, 801143c <fp_div+0x2a>
      fp_copy (a, d);
 8011434:	9802      	ldr	r0, [sp, #8]
 8011436:	4619      	mov	r1, r3
 8011438:	f7ff fe50 	bl	80110dc <fp_copy>
    if (c != NULL) {
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	b113      	cbz	r3, 8011446 <fp_div+0x34>
      fp_zero (c);
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff fd01 	bl	8010e48 <fp_zero>
    return FP_OKAY;
 8011446:	2500      	movs	r5, #0
}
 8011448:	4628      	mov	r0, r5
 801144a:	b00d      	add	sp, #52	; 0x34
 801144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  q = (fp_int*)XMALLOC(sizeof(fp_int) * 5, NULL, DYNAMIC_TYPE_BIGINT);
 8011450:	f44f 7002 	mov.w	r0, #520	; 0x208
 8011454:	f001 fea4 	bl	80131a0 <malloc>
  if (q == NULL) {
 8011458:	4604      	mov	r4, r0
 801145a:	2800      	cmp	r0, #0
 801145c:	f000 816a 	beq.w	8011734 <fp_div+0x322>
  x = &q[1]; y = &q[2]; t1 = &q[3]; t2 = &q[4];
 8011460:	f500 73d0 	add.w	r3, r0, #416	; 0x1a0
 8011464:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 8011468:	f100 0768 	add.w	r7, r0, #104	; 0x68
 801146c:	f500 7a9c 	add.w	sl, r0, #312	; 0x138
 8011470:	930b      	str	r3, [sp, #44]	; 0x2c
    fp_zero(a);
 8011472:	f7ff fce9 	bl	8010e48 <fp_zero>
  q->used = a->used;
 8011476:	9b02      	ldr	r3, [sp, #8]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	6023      	str	r3, [r4, #0]
    fp_zero(a);
 801147c:	4650      	mov	r0, sl
 801147e:	f7ff fce3 	bl	8010e48 <fp_zero>
 8011482:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8011486:	f7ff fcdf 	bl	8010e48 <fp_zero>
 801148a:	4638      	mov	r0, r7
 801148c:	f7ff fcdc 	bl	8010e48 <fp_zero>
  fp_copy(a, x); /* copy (src = a) to (dst = x) */
 8011490:	4639      	mov	r1, r7
 8011492:	9802      	ldr	r0, [sp, #8]
 8011494:	f7ff fe22 	bl	80110dc <fp_copy>
    fp_zero(a);
 8011498:	4648      	mov	r0, r9
 801149a:	f7ff fcd5 	bl	8010e48 <fp_zero>
  fp_copy(b, y); /* copy (src = b) to (dst = y) */
 801149e:	9804      	ldr	r0, [sp, #16]
 80114a0:	4649      	mov	r1, r9
 80114a2:	f7ff fe1b 	bl	80110dc <fp_copy>
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 80114a6:	9b02      	ldr	r3, [sp, #8]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	9309      	str	r3, [sp, #36]	; 0x24
 80114ac:	9b04      	ldr	r3, [sp, #16]
  x->sign = y->sign = FP_ZPOS;
 80114ae:	2100      	movs	r1, #0
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 80114b0:	685b      	ldr	r3, [r3, #4]
  x->sign = y->sign = FP_ZPOS;
 80114b2:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 80114b6:	66e1      	str	r1, [r4, #108]	; 0x6c
  norm = fp_count_bits(y) % DIGIT_BIT;
 80114b8:	4648      	mov	r0, r9
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 80114ba:	930a      	str	r3, [sp, #40]	; 0x28
  norm = fp_count_bits(y) % DIGIT_BIT;
 80114bc:	f7ff fc65 	bl	8010d8a <fp_count_bits>
 80114c0:	1a0b      	subs	r3, r1, r0
 80114c2:	f003 031f 	and.w	r3, r3, #31
 80114c6:	f000 001f 	and.w	r0, r0, #31
 80114ca:	bf58      	it	pl
 80114cc:	4258      	negpl	r0, r3
  if (norm < (int)(DIGIT_BIT-1)) {
 80114ce:	281f      	cmp	r0, #31
 80114d0:	d06d      	beq.n	80115ae <fp_div+0x19c>
    norm = (DIGIT_BIT-1) - norm;
 80114d2:	f1c0 031f 	rsb	r3, r0, #31
    ret = fp_mul_2d (x, norm, x);
 80114d6:	463a      	mov	r2, r7
 80114d8:	4619      	mov	r1, r3
 80114da:	4638      	mov	r0, r7
    norm = (DIGIT_BIT-1) - norm;
 80114dc:	9303      	str	r3, [sp, #12]
    ret = fp_mul_2d (x, norm, x);
 80114de:	f7ff fe0c 	bl	80110fa <fp_mul_2d>
    if (ret != FP_OKAY) {
 80114e2:	4605      	mov	r5, r0
 80114e4:	b118      	cbz	r0, 80114ee <fp_div+0xdc>
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 80114e6:	4620      	mov	r0, r4
 80114e8:	f001 fe62 	bl	80131b0 <free>
  return FP_OKAY;
 80114ec:	e7ac      	b.n	8011448 <fp_div+0x36>
    ret = fp_mul_2d (y, norm, y);
 80114ee:	9903      	ldr	r1, [sp, #12]
 80114f0:	464a      	mov	r2, r9
 80114f2:	4648      	mov	r0, r9
 80114f4:	f7ff fe01 	bl	80110fa <fp_mul_2d>
    if (ret != FP_OKAY) {
 80114f8:	4605      	mov	r5, r0
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d1f3      	bne.n	80114e6 <fp_div+0xd4>
  t = y->used - 1;
 80114fe:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
  n = x->used - 1;
 8011502:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  t = y->used - 1;
 8011506:	9301      	str	r3, [sp, #4]
  ret = fp_lshd (y, n - t); /* y = y*b**{n-t} */
 8011508:	eba8 0603 	sub.w	r6, r8, r3
 801150c:	4631      	mov	r1, r6
 801150e:	4648      	mov	r0, r9
 8011510:	f7ff fc66 	bl	8010de0 <fp_lshd>
  if (ret != FP_OKAY) {
 8011514:	4605      	mov	r5, r0
 8011516:	2800      	cmp	r0, #0
 8011518:	d1e5      	bne.n	80114e6 <fp_div+0xd4>
 801151a:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
  while (fp_cmp (x, y) != FP_LT) {
 801151e:	4649      	mov	r1, r9
 8011520:	4638      	mov	r0, r7
 8011522:	f7ff fb22 	bl	8010b6a <fp_cmp>
 8011526:	3001      	adds	r0, #1
 8011528:	d143      	bne.n	80115b2 <fp_div+0x1a0>
  t = y->used - 1;
 801152a:	9b01      	ldr	r3, [sp, #4]
  fp_rshd (y, n - t);
 801152c:	4631      	mov	r1, r6
  t = y->used - 1;
 801152e:	3b01      	subs	r3, #1
  fp_rshd (y, n - t);
 8011530:	4648      	mov	r0, r9
  t = y->used - 1;
 8011532:	9307      	str	r3, [sp, #28]
  fp_rshd (y, n - t);
 8011534:	f7ff fd0a 	bl	8010f4c <fp_rshd>
  for (i = n; i >= (t + 1); i--) {
 8011538:	9b01      	ldr	r3, [sp, #4]
 801153a:	f108 0601 	add.w	r6, r8, #1
 801153e:	1af6      	subs	r6, r6, r3
 8011540:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  n = x->used - 1;
 8011544:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 8011548:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801154c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8011550:	9306      	str	r3, [sp, #24]
  for (i = n; i >= (t + 1); i--) {
 8011552:	9a07      	ldr	r2, [sp, #28]
    if (i > x->used) {
 8011554:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  for (i = n; i >= (t + 1); i--) {
 8011556:	4593      	cmp	fp, r2
 8011558:	dc3f      	bgt.n	80115da <fp_div+0x1c8>
  x->sign = x->used == 0 ? FP_ZPOS : a->sign;
 801155a:	b10b      	cbz	r3, 8011560 <fp_div+0x14e>
 801155c:	9b02      	ldr	r3, [sp, #8]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (c != NULL) {
 8011562:	9b00      	ldr	r3, [sp, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	f040 80c6 	bne.w	80116f6 <fp_div+0x2e4>
  if (d != NULL) {
 801156a:	9b05      	ldr	r3, [sp, #20]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d0ba      	beq.n	80114e6 <fp_div+0xd4>
    fp_div_2d (x, norm, x, NULL);
 8011570:	9903      	ldr	r1, [sp, #12]
 8011572:	2300      	movs	r3, #0
 8011574:	463a      	mov	r2, r7
 8011576:	4638      	mov	r0, r7
 8011578:	f7ff ff12 	bl	80113a0 <fp_div_2d>
    for (i = b->used; i < x->used; i++) {
 801157c:	9b04      	ldr	r3, [sp, #16]
 801157e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8011580:	681b      	ldr	r3, [r3, #0]
        x->dp[i] = 0;
 8011582:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8011586:	2000      	movs	r0, #0
    for (i = b->used; i < x->used; i++) {
 8011588:	429a      	cmp	r2, r3
 801158a:	f300 80ca 	bgt.w	8011722 <fp_div+0x310>
    fp_clamp(x);
 801158e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011590:	b13b      	cbz	r3, 80115a2 <fp_div+0x190>
 8011592:	1e5a      	subs	r2, r3, #1
 8011594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801159a:	2b00      	cmp	r3, #0
 801159c:	f000 80c5 	beq.w	801172a <fp_div+0x318>
 80115a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    fp_copy (x, d);
 80115a2:	9905      	ldr	r1, [sp, #20]
    fp_clamp(x);
 80115a4:	66e3      	str	r3, [r4, #108]	; 0x6c
    fp_copy (x, d);
 80115a6:	4638      	mov	r0, r7
 80115a8:	f7ff fd98 	bl	80110dc <fp_copy>
 80115ac:	e79b      	b.n	80114e6 <fp_div+0xd4>
    norm = 0;
 80115ae:	9103      	str	r1, [sp, #12]
 80115b0:	e7a5      	b.n	80114fe <fp_div+0xec>
    ++(q->dp[n - t]);
 80115b2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80115b6:	3301      	adds	r3, #1
 80115b8:	f8cb 3008 	str.w	r3, [fp, #8]
    ret = fp_sub (x, y, x);
 80115bc:	463a      	mov	r2, r7
 80115be:	4649      	mov	r1, r9
 80115c0:	4638      	mov	r0, r7
 80115c2:	f7ff fab1 	bl	8010b28 <fp_sub>
    if (ret != FP_OKAY) {
 80115c6:	4603      	mov	r3, r0
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d0a8      	beq.n	801151e <fp_div+0x10c>
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 80115cc:	4620      	mov	r0, r4
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	f001 fdee 	bl	80131b0 <free>
      ret = fp_add (x, t1, x);
 80115d4:	9b00      	ldr	r3, [sp, #0]
 80115d6:	461d      	mov	r5, r3
        return ret;
 80115d8:	e736      	b.n	8011448 <fp_div+0x36>
    if (i > x->used) {
 80115da:	459b      	cmp	fp, r3
 80115dc:	dc7d      	bgt.n	80116da <fp_div+0x2c8>
    if (x->dp[i] == y->dp[t]) {
 80115de:	9b06      	ldr	r3, [sp, #24]
 80115e0:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
 80115e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80115e8:	9b01      	ldr	r3, [sp, #4]
 80115ea:	4291      	cmp	r1, r2
 80115ec:	ebab 0303 	sub.w	r3, fp, r3
 80115f0:	9308      	str	r3, [sp, #32]
 80115f2:	d178      	bne.n	80116e6 <fp_div+0x2d4>
      q->dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
 80115f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115f8:	6033      	str	r3, [r6, #0]
    q->dp[i - t - 1] = (q->dp[i - t - 1] + 1);
 80115fa:	6833      	ldr	r3, [r6, #0]
 80115fc:	3301      	adds	r3, #1
 80115fe:	6033      	str	r3, [r6, #0]
      q->dp[i - t - 1] = (q->dp[i - t - 1] - 1);
 8011600:	6833      	ldr	r3, [r6, #0]
 8011602:	3b01      	subs	r3, #1
 8011604:	6033      	str	r3, [r6, #0]
      fp_zero (t1);
 8011606:	4650      	mov	r0, sl
 8011608:	f7ff fc1e 	bl	8010e48 <fp_zero>
      t1->dp[0] = (t - 1 < 0) ? 0 : y->dp[t - 1];
 801160c:	9b07      	ldr	r3, [sp, #28]
 801160e:	2b00      	cmp	r3, #0
 8011610:	bfca      	itet	gt
 8011612:	9b06      	ldrgt	r3, [sp, #24]
 8011614:	2300      	movle	r3, #0
 8011616:	f8d3 30d0 	ldrgt.w	r3, [r3, #208]	; 0xd0
 801161a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
      t1->dp[1] = y->dp[t];
 801161e:	9b06      	ldr	r3, [sp, #24]
 8011620:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011624:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
      t1->used = 2;
 8011628:	2302      	movs	r3, #2
 801162a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
      ret = fp_mul_d (t1, q->dp[i - t - 1], t1);
 801162e:	6831      	ldr	r1, [r6, #0]
 8011630:	4652      	mov	r2, sl
 8011632:	4650      	mov	r0, sl
 8011634:	f7ff f8b2 	bl	801079c <fp_mul_d>
      if (ret != FP_OKAY) {
 8011638:	4603      	mov	r3, r0
 801163a:	2800      	cmp	r0, #0
 801163c:	d1c6      	bne.n	80115cc <fp_div+0x1ba>
      t2->dp[0] = (i - 2 < 0) ? 0 : x->dp[i - 2];
 801163e:	f1bb 0f01 	cmp.w	fp, #1
 8011642:	bfc8      	it	gt
 8011644:	f8d8 3064 	ldrgt.w	r3, [r8, #100]	; 0x64
 8011648:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 801164c:	f1bb 0f00 	cmp.w	fp, #0
 8011650:	bfc8      	it	gt
 8011652:	f8d8 3068 	ldrgt.w	r3, [r8, #104]	; 0x68
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 8011656:	990b      	ldr	r1, [sp, #44]	; 0x2c
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 8011658:	bfd8      	it	le
 801165a:	2300      	movle	r3, #0
 801165c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      t2->dp[2] = x->dp[i];
 8011660:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8011664:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      t2->used = 3;
 8011668:	2303      	movs	r3, #3
 801166a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 801166e:	4650      	mov	r0, sl
 8011670:	f7ff fa1d 	bl	8010aae <fp_cmp_mag>
 8011674:	2801      	cmp	r0, #1
 8011676:	d0c3      	beq.n	8011600 <fp_div+0x1ee>
    ret = fp_mul_d (y, q->dp[i - t - 1], t1);
 8011678:	6831      	ldr	r1, [r6, #0]
 801167a:	4652      	mov	r2, sl
 801167c:	4648      	mov	r0, r9
 801167e:	f7ff f88d 	bl	801079c <fp_mul_d>
    if (ret != FP_OKAY) {
 8011682:	4603      	mov	r3, r0
 8011684:	2800      	cmp	r0, #0
 8011686:	d1a1      	bne.n	80115cc <fp_div+0x1ba>
    ret = fp_lshd  (t1, i - t - 1);
 8011688:	9908      	ldr	r1, [sp, #32]
 801168a:	4650      	mov	r0, sl
 801168c:	f7ff fba8 	bl	8010de0 <fp_lshd>
    if (ret != FP_OKAY) {
 8011690:	4603      	mov	r3, r0
 8011692:	2800      	cmp	r0, #0
 8011694:	d19a      	bne.n	80115cc <fp_div+0x1ba>
    ret = fp_sub   (x, t1, x);
 8011696:	463a      	mov	r2, r7
 8011698:	4651      	mov	r1, sl
 801169a:	4638      	mov	r0, r7
 801169c:	f7ff fa44 	bl	8010b28 <fp_sub>
    if (ret != FP_OKAY) {
 80116a0:	4603      	mov	r3, r0
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d192      	bne.n	80115cc <fp_div+0x1ba>
    if (x->sign == FP_NEG) {
 80116a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d116      	bne.n	80116da <fp_div+0x2c8>
      fp_copy (y, t1);
 80116ac:	4651      	mov	r1, sl
 80116ae:	4648      	mov	r0, r9
 80116b0:	f7ff fd14 	bl	80110dc <fp_copy>
      ret = fp_lshd (t1, i - t - 1);
 80116b4:	9908      	ldr	r1, [sp, #32]
 80116b6:	4650      	mov	r0, sl
 80116b8:	f7ff fb92 	bl	8010de0 <fp_lshd>
      if (ret != FP_OKAY) {
 80116bc:	4603      	mov	r3, r0
 80116be:	2800      	cmp	r0, #0
 80116c0:	d184      	bne.n	80115cc <fp_div+0x1ba>
      ret = fp_add (x, t1, x);
 80116c2:	463a      	mov	r2, r7
 80116c4:	4651      	mov	r1, sl
 80116c6:	4638      	mov	r0, r7
 80116c8:	f7ff fa0c 	bl	8010ae4 <fp_add>
      if (ret != FP_OKAY) {
 80116cc:	4603      	mov	r3, r0
 80116ce:	2800      	cmp	r0, #0
 80116d0:	f47f af7c 	bne.w	80115cc <fp_div+0x1ba>
      q->dp[i - t - 1] = q->dp[i - t - 1] - 1;
 80116d4:	6833      	ldr	r3, [r6, #0]
 80116d6:	3b01      	subs	r3, #1
 80116d8:	6033      	str	r3, [r6, #0]
  for (i = n; i >= (t + 1); i--) {
 80116da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80116de:	3e04      	subs	r6, #4
 80116e0:	f1a8 0804 	sub.w	r8, r8, #4
 80116e4:	e735      	b.n	8011552 <fp_div+0x140>
      tmp /= ((fp_word)y->dp[t]);
 80116e6:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 80116ea:	2300      	movs	r3, #0
 80116ec:	f001 fa20 	bl	8012b30 <__aeabi_uldivmod>
      q->dp[i - t - 1] = (fp_digit) (tmp);
 80116f0:	6030      	str	r0, [r6, #0]
 80116f2:	e782      	b.n	80115fa <fp_div+0x1e8>
    fp_clamp (q);
 80116f4:	6022      	str	r2, [r4, #0]
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	b133      	cbz	r3, 8011708 <fp_div+0x2f6>
 80116fa:	1e5a      	subs	r2, r3, #1
 80116fc:	3301      	adds	r3, #1
 80116fe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d0f6      	beq.n	80116f4 <fp_div+0x2e2>
 8011706:	6863      	ldr	r3, [r4, #4]
 8011708:	6063      	str	r3, [r4, #4]
    fp_copy (q, c);
 801170a:	9900      	ldr	r1, [sp, #0]
 801170c:	4620      	mov	r0, r4
 801170e:	f7ff fce5 	bl	80110dc <fp_copy>
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 8011712:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011716:	1a9b      	subs	r3, r3, r2
    c->sign = neg;
 8011718:	9a00      	ldr	r2, [sp, #0]
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801171a:	bf18      	it	ne
 801171c:	2301      	movne	r3, #1
    c->sign = neg;
 801171e:	6053      	str	r3, [r2, #4]
 8011720:	e723      	b.n	801156a <fp_div+0x158>
        x->dp[i] = 0;
 8011722:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for (i = b->used; i < x->used; i++) {
 8011726:	3301      	adds	r3, #1
 8011728:	e72e      	b.n	8011588 <fp_div+0x176>
    fp_clamp(x);
 801172a:	66a2      	str	r2, [r4, #104]	; 0x68
 801172c:	e72f      	b.n	801158e <fp_div+0x17c>
    return FP_VAL;
 801172e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011732:	e689      	b.n	8011448 <fp_div+0x36>
      return FP_MEM;
 8011734:	f06f 0501 	mvn.w	r5, #1
 8011738:	e686      	b.n	8011448 <fp_div+0x36>

0801173a <fp_mod>:
{
 801173a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801173c:	4605      	mov	r5, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801173e:	2068      	movs	r0, #104	; 0x68
{
 8011740:	460e      	mov	r6, r1
 8011742:	4617      	mov	r7, r2
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011744:	f001 fd2c 	bl	80131a0 <malloc>
   if (t == NULL)
 8011748:	4604      	mov	r4, r0
 801174a:	b1f8      	cbz	r0, 801178c <fp_mod+0x52>
    fp_zero(a);
 801174c:	f7ff fb7c 	bl	8010e48 <fp_zero>
   err = fp_div(a, b, NULL, t);
 8011750:	4628      	mov	r0, r5
 8011752:	4623      	mov	r3, r4
 8011754:	2200      	movs	r2, #0
 8011756:	4631      	mov	r1, r6
 8011758:	f7ff fe5b 	bl	8011412 <fp_div>
   if (err == FP_OKAY) {
 801175c:	4605      	mov	r5, r0
 801175e:	b958      	cbnz	r0, 8011778 <fp_mod+0x3e>
      if (!fp_iszero(t) && (t->sign != b->sign)) {
 8011760:	6823      	ldr	r3, [r4, #0]
 8011762:	b173      	cbz	r3, 8011782 <fp_mod+0x48>
 8011764:	6862      	ldr	r2, [r4, #4]
 8011766:	6873      	ldr	r3, [r6, #4]
 8011768:	429a      	cmp	r2, r3
 801176a:	d00a      	beq.n	8011782 <fp_mod+0x48>
         err = fp_add(t, b, c);
 801176c:	463a      	mov	r2, r7
 801176e:	4631      	mov	r1, r6
 8011770:	4620      	mov	r0, r4
 8011772:	f7ff f9b7 	bl	8010ae4 <fp_add>
 8011776:	4605      	mov	r5, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 8011778:	4620      	mov	r0, r4
 801177a:	f001 fd19 	bl	80131b0 <free>
}
 801177e:	4628      	mov	r0, r5
 8011780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         fp_copy(t, c);
 8011782:	4639      	mov	r1, r7
 8011784:	4620      	mov	r0, r4
 8011786:	f7ff fca9 	bl	80110dc <fp_copy>
 801178a:	e7f5      	b.n	8011778 <fp_mod+0x3e>
       return FP_MEM;
 801178c:	f06f 0501 	mvn.w	r5, #1
 8011790:	e7f5      	b.n	801177e <fp_mod+0x44>

08011792 <fp_mulmod>:
{
 8011792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011796:	4604      	mov	r4, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011798:	2068      	movs	r0, #104	; 0x68
{
 801179a:	4688      	mov	r8, r1
 801179c:	4616      	mov	r6, r2
 801179e:	461f      	mov	r7, r3
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80117a0:	f001 fcfe 	bl	80131a0 <malloc>
 80117a4:	4605      	mov	r5, r0
   if (t == NULL)
 80117a6:	b1a0      	cbz	r0, 80117d2 <fp_mulmod+0x40>
    fp_zero(a);
 80117a8:	f7ff fb4e 	bl	8010e48 <fp_zero>
  err = fp_mul(a, b, t);
 80117ac:	4620      	mov	r0, r4
 80117ae:	462a      	mov	r2, r5
 80117b0:	4641      	mov	r1, r8
 80117b2:	f7ff fd67 	bl	8011284 <fp_mul>
  if (err == FP_OKAY) {
 80117b6:	4604      	mov	r4, r0
 80117b8:	b928      	cbnz	r0, 80117c6 <fp_mulmod+0x34>
      err = fp_mod(t, c, d);
 80117ba:	463a      	mov	r2, r7
 80117bc:	4631      	mov	r1, r6
 80117be:	4628      	mov	r0, r5
 80117c0:	f7ff ffbb 	bl	801173a <fp_mod>
 80117c4:	4604      	mov	r4, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 80117c6:	4628      	mov	r0, r5
 80117c8:	f001 fcf2 	bl	80131b0 <free>
}
 80117cc:	4620      	mov	r0, r4
 80117ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return FP_MEM;
 80117d2:	f06f 0401 	mvn.w	r4, #1
 80117d6:	e7f9      	b.n	80117cc <fp_mulmod+0x3a>

080117d8 <mp_mulmod>:
   ret = fp_mulmod(a, b, c, d);
 80117d8:	f7ff bfdb 	b.w	8011792 <fp_mulmod>

080117dc <mp_mod>:
  return fp_mod (a, b, c);
 80117dc:	f7ff bfad 	b.w	801173a <fp_mod>

080117e0 <fp_invmod>:
{
 80117e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 80117e4:	684b      	ldr	r3, [r1, #4]
{
 80117e6:	b085      	sub	sp, #20
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 80117e8:	2b01      	cmp	r3, #1
{
 80117ea:	4683      	mov	fp, r0
 80117ec:	460c      	mov	r4, r1
 80117ee:	9203      	str	r2, [sp, #12]
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 80117f0:	d057      	beq.n	80118a2 <fp_invmod+0xc2>
 80117f2:	680b      	ldr	r3, [r1, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d054      	beq.n	80118a2 <fp_invmod+0xc2>
  if (fp_iszero(a) == FP_YES) {
 80117f8:	6802      	ldr	r2, [r0, #0]
 80117fa:	2a00      	cmp	r2, #0
 80117fc:	d051      	beq.n	80118a2 <fp_invmod+0xc2>
  if (fp_iseven(b) == FP_YES) {
 80117fe:	2b00      	cmp	r3, #0
 8011800:	f340 814b 	ble.w	8011a9a <fp_invmod+0x2ba>
 8011804:	688b      	ldr	r3, [r1, #8]
 8011806:	07dd      	lsls	r5, r3, #31
 8011808:	f100 8147 	bmi.w	8011a9a <fp_invmod+0x2ba>
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 8, NULL, DYNAMIC_TYPE_BIGINT);
 801180c:	f44f 7050 	mov.w	r0, #832	; 0x340
 8011810:	f001 fcc6 	bl	80131a0 <malloc>
  if (x == NULL) {
 8011814:	4606      	mov	r6, r0
 8011816:	b928      	cbnz	r0, 8011824 <fp_invmod+0x44>
      return FP_MEM;
 8011818:	f06f 0b01 	mvn.w	fp, #1
}
 801181c:	4658      	mov	r0, fp
 801181e:	b005      	add	sp, #20
 8011820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  y = &x[1]; u = &x[2]; v = &x[3]; A = &x[4]; B = &x[5]; C = &x[6]; D = &x[7];
 8011824:	f100 0368 	add.w	r3, r0, #104	; 0x68
 8011828:	9302      	str	r3, [sp, #8]
 801182a:	f100 03d0 	add.w	r3, r0, #208	; 0xd0
 801182e:	9301      	str	r3, [sp, #4]
 8011830:	f500 799c 	add.w	r9, r0, #312	; 0x138
 8011834:	f500 77d0 	add.w	r7, r0, #416	; 0x1a0
 8011838:	f500 7a02 	add.w	sl, r0, #520	; 0x208
 801183c:	f500 751c 	add.w	r5, r0, #624	; 0x270
 8011840:	f500 7836 	add.w	r8, r0, #728	; 0x2d8
    fp_zero(a);
 8011844:	f7ff fb00 	bl	8010e48 <fp_zero>
 8011848:	f106 0068 	add.w	r0, r6, #104	; 0x68
 801184c:	f7ff fafc 	bl	8010e48 <fp_zero>
 8011850:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 8011854:	f7ff faf8 	bl	8010e48 <fp_zero>
 8011858:	4648      	mov	r0, r9
 801185a:	f7ff faf5 	bl	8010e48 <fp_zero>
 801185e:	4638      	mov	r0, r7
 8011860:	f7ff faf2 	bl	8010e48 <fp_zero>
 8011864:	4650      	mov	r0, sl
 8011866:	f7ff faef 	bl	8010e48 <fp_zero>
 801186a:	4628      	mov	r0, r5
 801186c:	f7ff faec 	bl	8010e48 <fp_zero>
 8011870:	4640      	mov	r0, r8
 8011872:	f7ff fae9 	bl	8010e48 <fp_zero>
  if ((err = fp_mod(a, b, x)) != FP_OKAY) {
 8011876:	4658      	mov	r0, fp
 8011878:	4632      	mov	r2, r6
 801187a:	4621      	mov	r1, r4
 801187c:	f7ff ff5d 	bl	801173a <fp_mod>
 8011880:	4683      	mov	fp, r0
 8011882:	b118      	cbz	r0, 801188c <fp_invmod+0xac>
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8011884:	4630      	mov	r0, r6
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8011886:	f001 fc93 	bl	80131b0 <free>
  return FP_OKAY;
 801188a:	e7c7      	b.n	801181c <fp_invmod+0x3c>
  fp_copy(b, y);
 801188c:	f106 0168 	add.w	r1, r6, #104	; 0x68
 8011890:	4620      	mov	r0, r4
 8011892:	f7ff fc23 	bl	80110dc <fp_copy>
  if (fp_iszero(x) == FP_YES) {
 8011896:	6832      	ldr	r2, [r6, #0]
 8011898:	2a00      	cmp	r2, #0
 801189a:	d105      	bne.n	80118a8 <fp_invmod+0xc8>
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801189c:	4630      	mov	r0, r6
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801189e:	f001 fc87 	bl	80131b0 <free>
    return FP_VAL;
 80118a2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80118a6:	e7b9      	b.n	801181c <fp_invmod+0x3c>
  if (fp_iseven(x) == FP_YES && fp_iseven(y) == FP_YES) {
 80118a8:	dd08      	ble.n	80118bc <fp_invmod+0xdc>
 80118aa:	68b2      	ldr	r2, [r6, #8]
 80118ac:	07d0      	lsls	r0, r2, #31
 80118ae:	d405      	bmi.n	80118bc <fp_invmod+0xdc>
 80118b0:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 80118b2:	2a00      	cmp	r2, #0
 80118b4:	dd02      	ble.n	80118bc <fp_invmod+0xdc>
 80118b6:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80118b8:	07d1      	lsls	r1, r2, #31
 80118ba:	d5ef      	bpl.n	801189c <fp_invmod+0xbc>
  fp_copy (x, u);
 80118bc:	f106 01d0 	add.w	r1, r6, #208	; 0xd0
 80118c0:	4630      	mov	r0, r6
 80118c2:	f7ff fc0b 	bl	80110dc <fp_copy>
  fp_copy (y, v);
 80118c6:	4649      	mov	r1, r9
 80118c8:	f106 0068 	add.w	r0, r6, #104	; 0x68
   a->dp[0] = b;
 80118cc:	f04f 0b01 	mov.w	fp, #1
  fp_copy (y, v);
 80118d0:	f7ff fc04 	bl	80110dc <fp_copy>
   fp_zero(a);
 80118d4:	4638      	mov	r0, r7
 80118d6:	f7ff fab7 	bl	8010e48 <fp_zero>
   a->dp[0] = b;
 80118da:	f8c6 b1a8 	str.w	fp, [r6, #424]	; 0x1a8
   a->used  = a->dp[0] ? 1 : 0;
 80118de:	f8c6 b1a0 	str.w	fp, [r6, #416]	; 0x1a0
   fp_zero(a);
 80118e2:	4640      	mov	r0, r8
 80118e4:	f7ff fab0 	bl	8010e48 <fp_zero>
   a->dp[0] = b;
 80118e8:	f8c6 b2e0 	str.w	fp, [r6, #736]	; 0x2e0
   a->used  = a->dp[0] ? 1 : 0;
 80118ec:	f8c6 b2d8 	str.w	fp, [r6, #728]	; 0x2d8
  while (fp_iseven (u) == FP_YES) {
 80118f0:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
 80118f4:	2a00      	cmp	r2, #0
 80118f6:	dd5d      	ble.n	80119b4 <fp_invmod+0x1d4>
 80118f8:	f8d6 20d8 	ldr.w	r2, [r6, #216]	; 0xd8
 80118fc:	07d0      	lsls	r0, r2, #31
 80118fe:	d459      	bmi.n	80119b4 <fp_invmod+0x1d4>
    fp_div_2 (u, u);
 8011900:	9901      	ldr	r1, [sp, #4]
 8011902:	4608      	mov	r0, r1
 8011904:	f7fe ff89 	bl	801081a <fp_div_2>
    if (fp_isodd (A) == FP_YES || fp_isodd (B) == FP_YES) {
 8011908:	f8d6 21a0 	ldr.w	r2, [r6, #416]	; 0x1a0
 801190c:	2a00      	cmp	r2, #0
 801190e:	dd03      	ble.n	8011918 <fp_invmod+0x138>
 8011910:	f8d6 21a8 	ldr.w	r2, [r6, #424]	; 0x1a8
 8011914:	07d2      	lsls	r2, r2, #31
 8011916:	d407      	bmi.n	8011928 <fp_invmod+0x148>
 8011918:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
 801191c:	2a00      	cmp	r2, #0
 801191e:	dd13      	ble.n	8011948 <fp_invmod+0x168>
 8011920:	f8d6 2210 	ldr.w	r2, [r6, #528]	; 0x210
 8011924:	07d3      	lsls	r3, r2, #31
 8011926:	d50f      	bpl.n	8011948 <fp_invmod+0x168>
      err = fp_add (A, y, A);
 8011928:	9902      	ldr	r1, [sp, #8]
 801192a:	463a      	mov	r2, r7
 801192c:	4638      	mov	r0, r7
 801192e:	f7ff f8d9 	bl	8010ae4 <fp_add>
      if (err != FP_OKAY) {
 8011932:	4683      	mov	fp, r0
 8011934:	2800      	cmp	r0, #0
 8011936:	d1a5      	bne.n	8011884 <fp_invmod+0xa4>
      err = fp_sub (B, x, B);
 8011938:	4652      	mov	r2, sl
 801193a:	4631      	mov	r1, r6
 801193c:	4650      	mov	r0, sl
 801193e:	f7ff f8f3 	bl	8010b28 <fp_sub>
      if (err != FP_OKAY) {
 8011942:	4683      	mov	fp, r0
 8011944:	2800      	cmp	r0, #0
 8011946:	d19d      	bne.n	8011884 <fp_invmod+0xa4>
    fp_div_2 (A, A);
 8011948:	4639      	mov	r1, r7
 801194a:	4638      	mov	r0, r7
 801194c:	f7fe ff65 	bl	801081a <fp_div_2>
    fp_div_2 (B, B);
 8011950:	4651      	mov	r1, sl
 8011952:	4650      	mov	r0, sl
 8011954:	f7fe ff61 	bl	801081a <fp_div_2>
 8011958:	e7ca      	b.n	80118f0 <fp_invmod+0x110>
    fp_div_2 (v, v);
 801195a:	4648      	mov	r0, r9
 801195c:	f7fe ff5d 	bl	801081a <fp_div_2>
    if (fp_isodd (C) == FP_YES || fp_isodd (D) == FP_YES) {
 8011960:	f8d6 2270 	ldr.w	r2, [r6, #624]	; 0x270
 8011964:	2a00      	cmp	r2, #0
 8011966:	dd03      	ble.n	8011970 <fp_invmod+0x190>
 8011968:	f8d6 2278 	ldr.w	r2, [r6, #632]	; 0x278
 801196c:	07d1      	lsls	r1, r2, #31
 801196e:	d407      	bmi.n	8011980 <fp_invmod+0x1a0>
 8011970:	f8d6 22d8 	ldr.w	r2, [r6, #728]	; 0x2d8
 8011974:	2a00      	cmp	r2, #0
 8011976:	dd15      	ble.n	80119a4 <fp_invmod+0x1c4>
 8011978:	f8d6 22e0 	ldr.w	r2, [r6, #736]	; 0x2e0
 801197c:	07d2      	lsls	r2, r2, #31
 801197e:	d511      	bpl.n	80119a4 <fp_invmod+0x1c4>
      err = fp_add (C, y, C);
 8011980:	9902      	ldr	r1, [sp, #8]
 8011982:	462a      	mov	r2, r5
 8011984:	4628      	mov	r0, r5
 8011986:	f7ff f8ad 	bl	8010ae4 <fp_add>
      if (err != FP_OKAY) {
 801198a:	4683      	mov	fp, r0
 801198c:	2800      	cmp	r0, #0
 801198e:	f47f af79 	bne.w	8011884 <fp_invmod+0xa4>
      err = fp_sub (D, x, D);
 8011992:	4642      	mov	r2, r8
 8011994:	4631      	mov	r1, r6
 8011996:	4640      	mov	r0, r8
 8011998:	f7ff f8c6 	bl	8010b28 <fp_sub>
      if (err != FP_OKAY) {
 801199c:	4683      	mov	fp, r0
 801199e:	2800      	cmp	r0, #0
 80119a0:	f47f af70 	bne.w	8011884 <fp_invmod+0xa4>
    fp_div_2 (C, C);
 80119a4:	4629      	mov	r1, r5
 80119a6:	4628      	mov	r0, r5
 80119a8:	f7fe ff37 	bl	801081a <fp_div_2>
    fp_div_2 (D, D);
 80119ac:	4641      	mov	r1, r8
 80119ae:	4640      	mov	r0, r8
 80119b0:	f7fe ff33 	bl	801081a <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 80119b4:	f8d6 2138 	ldr.w	r2, [r6, #312]	; 0x138
 80119b8:	2a00      	cmp	r2, #0
    fp_div_2 (v, v);
 80119ba:	4649      	mov	r1, r9
  while (fp_iseven (v) == FP_YES) {
 80119bc:	dd03      	ble.n	80119c6 <fp_invmod+0x1e6>
 80119be:	f8d6 2140 	ldr.w	r2, [r6, #320]	; 0x140
 80119c2:	07d3      	lsls	r3, r2, #31
 80119c4:	d5c9      	bpl.n	801195a <fp_invmod+0x17a>
  if (fp_cmp (u, v) != FP_LT) {
 80119c6:	9801      	ldr	r0, [sp, #4]
 80119c8:	f7ff f8cf 	bl	8010b6a <fp_cmp>
 80119cc:	3001      	adds	r0, #1
 80119ce:	d115      	bne.n	80119fc <fp_invmod+0x21c>
    err = fp_sub (v, u, v);
 80119d0:	9901      	ldr	r1, [sp, #4]
 80119d2:	464a      	mov	r2, r9
 80119d4:	4648      	mov	r0, r9
 80119d6:	f7ff f8a7 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 80119da:	4683      	mov	fp, r0
 80119dc:	2800      	cmp	r0, #0
 80119de:	f47f af51 	bne.w	8011884 <fp_invmod+0xa4>
    err = fp_sub (C, A, C);
 80119e2:	462a      	mov	r2, r5
 80119e4:	4639      	mov	r1, r7
 80119e6:	4628      	mov	r0, r5
 80119e8:	f7ff f89e 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 80119ec:	4683      	mov	fp, r0
 80119ee:	2800      	cmp	r0, #0
 80119f0:	f47f af48 	bne.w	8011884 <fp_invmod+0xa4>
    err = fp_sub (D, B, D);
 80119f4:	4642      	mov	r2, r8
 80119f6:	4651      	mov	r1, sl
 80119f8:	4640      	mov	r0, r8
 80119fa:	e014      	b.n	8011a26 <fp_invmod+0x246>
    err = fp_sub (u, v, u);
 80119fc:	9a01      	ldr	r2, [sp, #4]
 80119fe:	4649      	mov	r1, r9
 8011a00:	4610      	mov	r0, r2
 8011a02:	f7ff f891 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011a06:	4683      	mov	fp, r0
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	f47f af3b 	bne.w	8011884 <fp_invmod+0xa4>
    err = fp_sub (A, C, A);
 8011a0e:	463a      	mov	r2, r7
 8011a10:	4629      	mov	r1, r5
 8011a12:	4638      	mov	r0, r7
 8011a14:	f7ff f888 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011a18:	4683      	mov	fp, r0
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	f47f af32 	bne.w	8011884 <fp_invmod+0xa4>
    err = fp_sub (B, D, B);
 8011a20:	4652      	mov	r2, sl
 8011a22:	4641      	mov	r1, r8
 8011a24:	4650      	mov	r0, sl
    err = fp_sub (D, B, D);
 8011a26:	f7ff f87f 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011a2a:	4683      	mov	fp, r0
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	f47f af29 	bne.w	8011884 <fp_invmod+0xa4>
  if (fp_iszero (u) == FP_NO)
 8011a32:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
 8011a36:	2a00      	cmp	r2, #0
 8011a38:	f47f af5a 	bne.w	80118f0 <fp_invmod+0x110>
  if (fp_cmp_d (v, 1) != FP_EQ) {
 8011a3c:	2101      	movs	r1, #1
 8011a3e:	4648      	mov	r0, r9
 8011a40:	f7ff f81c 	bl	8010a7c <fp_cmp_d>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	f47f af29 	bne.w	801189c <fp_invmod+0xbc>
  while (fp_cmp_d(C, 0) == FP_LT) {
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f7ff f815 	bl	8010a7c <fp_cmp_d>
 8011a52:	3001      	adds	r0, #1
 8011a54:	d00f      	beq.n	8011a76 <fp_invmod+0x296>
  while (fp_cmp_mag(C, b) != FP_LT) {
 8011a56:	4621      	mov	r1, r4
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ff f828 	bl	8010aae <fp_cmp_mag>
 8011a5e:	3001      	adds	r0, #1
 8011a60:	d112      	bne.n	8011a88 <fp_invmod+0x2a8>
  fp_copy(C, c);
 8011a62:	9903      	ldr	r1, [sp, #12]
 8011a64:	4628      	mov	r0, r5
 8011a66:	f7ff fb39 	bl	80110dc <fp_copy>
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f001 fba0 	bl	80131b0 <free>
  return FP_OKAY;
 8011a70:	f04f 0b00 	mov.w	fp, #0
 8011a74:	e6d2      	b.n	801181c <fp_invmod+0x3c>
    err = fp_add(C, b, C);
 8011a76:	462a      	mov	r2, r5
 8011a78:	4621      	mov	r1, r4
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f7ff f832 	bl	8010ae4 <fp_add>
    if (err != FP_OKAY) {
 8011a80:	4683      	mov	fp, r0
 8011a82:	2800      	cmp	r0, #0
 8011a84:	d0e1      	beq.n	8011a4a <fp_invmod+0x26a>
 8011a86:	e6fd      	b.n	8011884 <fp_invmod+0xa4>
    err = fp_sub(C, b, C);
 8011a88:	462a      	mov	r2, r5
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7ff f84b 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011a92:	4683      	mov	fp, r0
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d0de      	beq.n	8011a56 <fp_invmod+0x276>
 8011a98:	e6f4      	b.n	8011884 <fp_invmod+0xa4>
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 6, NULL, DYNAMIC_TYPE_BIGINT);
 8011a9a:	f44f 701c 	mov.w	r0, #624	; 0x270
 8011a9e:	f001 fb7f 	bl	80131a0 <malloc>
  if (x == NULL) {
 8011aa2:	4682      	mov	sl, r0
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	f43f aeb7 	beq.w	8011818 <fp_invmod+0x38>
  y = &x[1]; u = &x[2]; v = &x[3]; B = &x[4]; D = &x[5];
 8011aaa:	f100 0968 	add.w	r9, r0, #104	; 0x68
 8011aae:	f100 07d0 	add.w	r7, r0, #208	; 0xd0
 8011ab2:	f500 769c 	add.w	r6, r0, #312	; 0x138
 8011ab6:	f500 78d0 	add.w	r8, r0, #416	; 0x1a0
 8011aba:	f500 7502 	add.w	r5, r0, #520	; 0x208
    fp_zero(a);
 8011abe:	f7ff f9c3 	bl	8010e48 <fp_zero>
 8011ac2:	4648      	mov	r0, r9
 8011ac4:	f7ff f9c0 	bl	8010e48 <fp_zero>
 8011ac8:	4638      	mov	r0, r7
 8011aca:	f7ff f9bd 	bl	8010e48 <fp_zero>
 8011ace:	4630      	mov	r0, r6
 8011ad0:	f7ff f9ba 	bl	8010e48 <fp_zero>
 8011ad4:	4640      	mov	r0, r8
 8011ad6:	f7ff f9b7 	bl	8010e48 <fp_zero>
 8011ada:	4628      	mov	r0, r5
 8011adc:	f7ff f9b4 	bl	8010e48 <fp_zero>
  if (fp_iszero(a) == FP_YES) {
 8011ae0:	f8db 3000 	ldr.w	r3, [fp]
 8011ae4:	b90b      	cbnz	r3, 8011aea <fp_invmod+0x30a>
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8011ae6:	4650      	mov	r0, sl
 8011ae8:	e6d9      	b.n	801189e <fp_invmod+0xbe>
  fp_copy(b, x);
 8011aea:	4651      	mov	r1, sl
 8011aec:	4620      	mov	r0, r4
 8011aee:	f7ff faf5 	bl	80110dc <fp_copy>
  return fp_mod (a, b, c);
 8011af2:	4658      	mov	r0, fp
 8011af4:	464a      	mov	r2, r9
 8011af6:	4621      	mov	r1, r4
 8011af8:	f7ff fe1f 	bl	801173a <fp_mod>
  if ((err = mp_mod(a, b, y)) != FP_OKAY) {
 8011afc:	4683      	mov	fp, r0
 8011afe:	b108      	cbz	r0, 8011b04 <fp_invmod+0x324>
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8011b00:	4650      	mov	r0, sl
 8011b02:	e6c0      	b.n	8011886 <fp_invmod+0xa6>
  if (fp_iszero(y) == FP_YES) {
 8011b04:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d0ec      	beq.n	8011ae6 <fp_invmod+0x306>
  fp_copy(x, u);
 8011b0c:	4639      	mov	r1, r7
 8011b0e:	4650      	mov	r0, sl
 8011b10:	f7ff fae4 	bl	80110dc <fp_copy>
  fp_copy(y, v);
 8011b14:	4631      	mov	r1, r6
 8011b16:	4648      	mov	r0, r9
 8011b18:	f7ff fae0 	bl	80110dc <fp_copy>
   fp_zero(a);
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f7ff f993 	bl	8010e48 <fp_zero>
   a->dp[0] = b;
 8011b22:	2301      	movs	r3, #1
 8011b24:	f8ca 3210 	str.w	r3, [sl, #528]	; 0x210
   a->used  = a->dp[0] ? 1 : 0;
 8011b28:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
  while (fp_iseven (u) == FP_YES) {
 8011b2c:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	dd33      	ble.n	8011b9c <fp_invmod+0x3bc>
 8011b34:	f8da 30d8 	ldr.w	r3, [sl, #216]	; 0xd8
 8011b38:	07d9      	lsls	r1, r3, #31
 8011b3a:	d42f      	bmi.n	8011b9c <fp_invmod+0x3bc>
    fp_div_2 (u, u);
 8011b3c:	4639      	mov	r1, r7
 8011b3e:	4638      	mov	r0, r7
 8011b40:	f7fe fe6b 	bl	801081a <fp_div_2>
    if (fp_isodd (B) == FP_YES) {
 8011b44:	f8da 31a0 	ldr.w	r3, [sl, #416]	; 0x1a0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dd0b      	ble.n	8011b64 <fp_invmod+0x384>
 8011b4c:	f8da 31a8 	ldr.w	r3, [sl, #424]	; 0x1a8
 8011b50:	07d8      	lsls	r0, r3, #31
 8011b52:	d507      	bpl.n	8011b64 <fp_invmod+0x384>
      err = fp_sub (B, x, B);
 8011b54:	4642      	mov	r2, r8
 8011b56:	4651      	mov	r1, sl
 8011b58:	4640      	mov	r0, r8
 8011b5a:	f7fe ffe5 	bl	8010b28 <fp_sub>
      if (err != FP_OKAY) {
 8011b5e:	4683      	mov	fp, r0
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d1cd      	bne.n	8011b00 <fp_invmod+0x320>
    fp_div_2 (B, B);
 8011b64:	4641      	mov	r1, r8
 8011b66:	4640      	mov	r0, r8
 8011b68:	f7fe fe57 	bl	801081a <fp_div_2>
 8011b6c:	e7de      	b.n	8011b2c <fp_invmod+0x34c>
    fp_div_2 (v, v);
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f7fe fe53 	bl	801081a <fp_div_2>
    if (fp_isodd (D) == FP_YES) {
 8011b74:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	dd0b      	ble.n	8011b94 <fp_invmod+0x3b4>
 8011b7c:	f8da 3210 	ldr.w	r3, [sl, #528]	; 0x210
 8011b80:	07da      	lsls	r2, r3, #31
 8011b82:	d507      	bpl.n	8011b94 <fp_invmod+0x3b4>
      err = fp_sub (D, x, D);
 8011b84:	462a      	mov	r2, r5
 8011b86:	4651      	mov	r1, sl
 8011b88:	4628      	mov	r0, r5
 8011b8a:	f7fe ffcd 	bl	8010b28 <fp_sub>
      if (err != FP_OKAY) {
 8011b8e:	4683      	mov	fp, r0
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d1b5      	bne.n	8011b00 <fp_invmod+0x320>
    fp_div_2 (D, D);
 8011b94:	4629      	mov	r1, r5
 8011b96:	4628      	mov	r0, r5
 8011b98:	f7fe fe3f 	bl	801081a <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 8011b9c:	f8da 3138 	ldr.w	r3, [sl, #312]	; 0x138
 8011ba0:	2b00      	cmp	r3, #0
    fp_div_2 (v, v);
 8011ba2:	4631      	mov	r1, r6
  while (fp_iseven (v) == FP_YES) {
 8011ba4:	dd03      	ble.n	8011bae <fp_invmod+0x3ce>
 8011ba6:	f8da 3140 	ldr.w	r3, [sl, #320]	; 0x140
 8011baa:	07db      	lsls	r3, r3, #31
 8011bac:	d5df      	bpl.n	8011b6e <fp_invmod+0x38e>
  if (fp_cmp (u, v) != FP_LT) {
 8011bae:	4638      	mov	r0, r7
 8011bb0:	f7fe ffdb 	bl	8010b6a <fp_cmp>
 8011bb4:	3001      	adds	r0, #1
 8011bb6:	d10b      	bne.n	8011bd0 <fp_invmod+0x3f0>
    err = fp_sub (v, u, v);
 8011bb8:	4632      	mov	r2, r6
 8011bba:	4639      	mov	r1, r7
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	f7fe ffb3 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011bc2:	4683      	mov	fp, r0
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	d19b      	bne.n	8011b00 <fp_invmod+0x320>
    err = fp_sub (D, B, D);
 8011bc8:	462a      	mov	r2, r5
 8011bca:	4641      	mov	r1, r8
 8011bcc:	4628      	mov	r0, r5
 8011bce:	e00a      	b.n	8011be6 <fp_invmod+0x406>
    err = fp_sub (u, v, u);
 8011bd0:	463a      	mov	r2, r7
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	4638      	mov	r0, r7
 8011bd6:	f7fe ffa7 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011bda:	4683      	mov	fp, r0
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d18f      	bne.n	8011b00 <fp_invmod+0x320>
    err = fp_sub (B, D, B);
 8011be0:	4642      	mov	r2, r8
 8011be2:	4629      	mov	r1, r5
 8011be4:	4640      	mov	r0, r8
    err = fp_sub (D, B, D);
 8011be6:	f7fe ff9f 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011bea:	4683      	mov	fp, r0
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d187      	bne.n	8011b00 <fp_invmod+0x320>
  if (fp_iszero (u) == FP_NO) {
 8011bf0:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d199      	bne.n	8011b2c <fp_invmod+0x34c>
  if (fp_cmp_d (v, 1) != FP_EQ) {
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7fe ff3e 	bl	8010a7c <fp_cmp_d>
 8011c00:	4683      	mov	fp, r0
 8011c02:	2800      	cmp	r0, #0
 8011c04:	f47f af6f 	bne.w	8011ae6 <fp_invmod+0x306>
  while (D->sign == FP_NEG) {
 8011c08:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d00a      	beq.n	8011c26 <fp_invmod+0x446>
  while (fp_cmp_mag(D, b) != FP_LT) {
 8011c10:	4621      	mov	r1, r4
 8011c12:	4628      	mov	r0, r5
 8011c14:	f7fe ff4b 	bl	8010aae <fp_cmp_mag>
 8011c18:	3001      	adds	r0, #1
 8011c1a:	d10c      	bne.n	8011c36 <fp_invmod+0x456>
  fp_copy (D, c);
 8011c1c:	9903      	ldr	r1, [sp, #12]
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f7ff fa5c 	bl	80110dc <fp_copy>
 8011c24:	e76c      	b.n	8011b00 <fp_invmod+0x320>
    err = fp_add (D, b, D);
 8011c26:	462a      	mov	r2, r5
 8011c28:	4621      	mov	r1, r4
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f7fe ff5a 	bl	8010ae4 <fp_add>
    if (err != FP_OKAY) {
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d0e9      	beq.n	8011c08 <fp_invmod+0x428>
 8011c34:	e764      	b.n	8011b00 <fp_invmod+0x320>
    err = fp_sub(D, b, D);
 8011c36:	462a      	mov	r2, r5
 8011c38:	4621      	mov	r1, r4
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	f7fe ff74 	bl	8010b28 <fp_sub>
    if (err != FP_OKAY) {
 8011c40:	4606      	mov	r6, r0
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d0e4      	beq.n	8011c10 <fp_invmod+0x430>
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8011c46:	4650      	mov	r0, sl
 8011c48:	f001 fab2 	bl	80131b0 <free>
    err = fp_sub(D, b, D);
 8011c4c:	46b3      	mov	fp, r6
      return err;
 8011c4e:	e5e5      	b.n	801181c <fp_invmod+0x3c>

08011c50 <mp_invmod>:
  return fp_invmod(a, b, c);
 8011c50:	f7ff bdc6 	b.w	80117e0 <fp_invmod>

08011c54 <fp_sqr_comba>:
{
 8011c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c58:	4681      	mov	r9, r0
 8011c5a:	b087      	sub	sp, #28
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011c5c:	2068      	movs	r0, #104	; 0x68
{
 8011c5e:	460f      	mov	r7, r1
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011c60:	f001 fa9e 	bl	80131a0 <malloc>
   if (tmp == NULL)
 8011c64:	4680      	mov	r8, r0
 8011c66:	2800      	cmp	r0, #0
 8011c68:	f000 8087 	beq.w	8011d7a <fp_sqr_comba+0x126>
  pa = A->used + A->used;
 8011c6c:	f8d9 3000 	ldr.w	r3, [r9]
 8011c70:	005b      	lsls	r3, r3, #1
  if (pa >= FP_SIZE) {
 8011c72:	2b17      	cmp	r3, #23
 8011c74:	bfa8      	it	ge
 8011c76:	2317      	movge	r3, #23
  if (A == B) {
 8011c78:	45b9      	cmp	r9, r7
 8011c7a:	9302      	str	r3, [sp, #8]
 8011c7c:	d126      	bne.n	8011ccc <fp_sqr_comba+0x78>
    fp_zero(a);
 8011c7e:	f7ff f8e3 	bl	8010e48 <fp_zero>
     dst = tmp;
 8011c82:	4640      	mov	r0, r8
  for (ix = 0; ix < pa; ix++) {
 8011c84:	f100 0308 	add.w	r3, r0, #8
  COMBA_CLEAR;
 8011c88:	2500      	movs	r5, #0
 8011c8a:	9303      	str	r3, [sp, #12]
      tmpx = A->dp + tx;
 8011c8c:	f109 0308 	add.w	r3, r9, #8
  COMBA_CLEAR;
 8011c90:	462c      	mov	r4, r5
  for (ix = 0; ix < pa; ix++) {
 8011c92:	462e      	mov	r6, r5
      tmpx = A->dp + tx;
 8011c94:	9304      	str	r3, [sp, #16]
          SQRADD2(*tmpx++, *tmpy--);
 8011c96:	46ab      	mov	fp, r5
  for (ix = 0; ix < pa; ix++) {
 8011c98:	9b02      	ldr	r3, [sp, #8]
 8011c9a:	429e      	cmp	r6, r3
 8011c9c:	db1b      	blt.n	8011cd6 <fp_sqr_comba+0x82>
  dst->used = pa;
 8011c9e:	6003      	str	r3, [r0, #0]
  fp_clamp (dst);
 8011ca0:	6803      	ldr	r3, [r0, #0]
 8011ca2:	b133      	cbz	r3, 8011cb2 <fp_sqr_comba+0x5e>
 8011ca4:	1e5a      	subs	r2, r3, #1
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d062      	beq.n	8011d76 <fp_sqr_comba+0x122>
 8011cb0:	6843      	ldr	r3, [r0, #4]
 8011cb2:	6043      	str	r3, [r0, #4]
  if (dst != B) {
 8011cb4:	42b8      	cmp	r0, r7
 8011cb6:	d002      	beq.n	8011cbe <fp_sqr_comba+0x6a>
     fp_copy(dst, B);
 8011cb8:	4639      	mov	r1, r7
 8011cba:	f7ff fa0f 	bl	80110dc <fp_copy>
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8011cbe:	4640      	mov	r0, r8
 8011cc0:	f001 fa76 	bl	80131b0 <free>
  return FP_OKAY;
 8011cc4:	2000      	movs	r0, #0
}
 8011cc6:	b007      	add	sp, #28
 8011cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fp_zero(B);
 8011ccc:	4638      	mov	r0, r7
 8011cce:	f7ff f8bb 	bl	8010e48 <fp_zero>
 8011cd2:	4638      	mov	r0, r7
 8011cd4:	e7d6      	b.n	8011c84 <fp_sqr_comba+0x30>
      ty = MIN(A->used-1, ix);
 8011cd6:	f8d9 2000 	ldr.w	r2, [r9]
      tmpx = A->dp + tx;
 8011cda:	f8dd c010 	ldr.w	ip, [sp, #16]
      ty = MIN(A->used-1, ix);
 8011cde:	42b2      	cmp	r2, r6
 8011ce0:	bfd4      	ite	le
 8011ce2:	f102 33ff 	addle.w	r3, r2, #4294967295	; 0xffffffff
 8011ce6:	4633      	movgt	r3, r6
      tx = ix - ty;
 8011ce8:	1af1      	subs	r1, r6, r3
      iy = MIN(A->used-tx, ty+1);
 8011cea:	1a52      	subs	r2, r2, r1
 8011cec:	429a      	cmp	r2, r3
 8011cee:	bfc8      	it	gt
 8011cf0:	1c5a      	addgt	r2, r3, #1
      tmpx = A->dp + tx;
 8011cf2:	eb0c 0e81 	add.w	lr, ip, r1, lsl #2
      tmpy = A->dp + ty;
 8011cf6:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
      iy = MIN(iy, (ty-tx+1)>>1);
 8011cfa:	1a5b      	subs	r3, r3, r1
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	105b      	asrs	r3, r3, #1
 8011d00:	4293      	cmp	r3, r2
 8011d02:	bfa8      	it	ge
 8011d04:	4613      	movge	r3, r2
 8011d06:	9305      	str	r3, [sp, #20]
      COMBA_FORWARD;
 8011d08:	4623      	mov	r3, r4
 8011d0a:	462c      	mov	r4, r5
 8011d0c:	2500      	movs	r5, #0
      tmpy = A->dp + ty;
 8011d0e:	f8cd c004 	str.w	ip, [sp, #4]
      for (iz = 0; iz < iy; iz++) {
 8011d12:	4629      	mov	r1, r5
 8011d14:	9a05      	ldr	r2, [sp, #20]
 8011d16:	4291      	cmp	r1, r2
 8011d18:	db12      	blt.n	8011d40 <fp_sqr_comba+0xec>
      if ((ix&1) == 0) {
 8011d1a:	f016 0c01 	ands.w	ip, r6, #1
 8011d1e:	d109      	bne.n	8011d34 <fp_sqr_comba+0xe0>
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
 8011d20:	1072      	asrs	r2, r6, #1
 8011d22:	3202      	adds	r2, #2
 8011d24:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 8011d28:	4662      	mov	r2, ip
 8011d2a:	fbe1 3201 	umlal	r3, r2, r1, r1
 8011d2e:	18a4      	adds	r4, r4, r2
 8011d30:	eb45 054c 	adc.w	r5, r5, ip, lsl #1
      COMBA_STORE(dst->dp[ix]);
 8011d34:	9a03      	ldr	r2, [sp, #12]
 8011d36:	f842 3b04 	str.w	r3, [r2], #4
  for (ix = 0; ix < pa; ix++) {
 8011d3a:	3601      	adds	r6, #1
      COMBA_STORE(dst->dp[ix]);
 8011d3c:	9203      	str	r2, [sp, #12]
  for (ix = 0; ix < pa; ix++) {
 8011d3e:	e7ab      	b.n	8011c98 <fp_sqr_comba+0x44>
          SQRADD2(*tmpx++, *tmpy--);
 8011d40:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011d44:	f85c 2904 	ldr.w	r2, [ip], #-4
 8011d48:	f8cd c004 	str.w	ip, [sp, #4]
 8011d4c:	f85e c021 	ldr.w	ip, [lr, r1, lsl #2]
 8011d50:	fbac c202 	umull	ip, r2, ip, r2
 8011d54:	eb13 030c 	adds.w	r3, r3, ip
 8011d58:	f142 0a00 	adc.w	sl, r2, #0
 8011d5c:	eb14 040a 	adds.w	r4, r4, sl
 8011d60:	eb4b 0a0b 	adc.w	sl, fp, fp
 8011d64:	eb13 030c 	adds.w	r3, r3, ip
 8011d68:	f142 0200 	adc.w	r2, r2, #0
 8011d6c:	1914      	adds	r4, r2, r4
 8011d6e:	eb45 050a 	adc.w	r5, r5, sl
      for (iz = 0; iz < iy; iz++) {
 8011d72:	3101      	adds	r1, #1
 8011d74:	e7ce      	b.n	8011d14 <fp_sqr_comba+0xc0>
  fp_clamp (dst);
 8011d76:	6002      	str	r2, [r0, #0]
 8011d78:	e792      	b.n	8011ca0 <fp_sqr_comba+0x4c>
       return FP_MEM;
 8011d7a:	f06f 0001 	mvn.w	r0, #1
 8011d7e:	e7a2      	b.n	8011cc6 <fp_sqr_comba+0x72>

08011d80 <fp_sqr>:
{
 8011d80:	b538      	push	{r3, r4, r5, lr}
    y = A->used;
 8011d82:	6803      	ldr	r3, [r0, #0]
    oldused = B->used;
 8011d84:	680d      	ldr	r5, [r1, #0]
    if (y + y >= FP_SIZE) {
 8011d86:	005a      	lsls	r2, r3, #1
 8011d88:	2a17      	cmp	r2, #23
{
 8011d8a:	460c      	mov	r4, r1
    if (y + y >= FP_SIZE) {
 8011d8c:	dc0f      	bgt.n	8011dae <fp_sqr+0x2e>
        if (y == 8) {
 8011d8e:	2b08      	cmp	r3, #8
 8011d90:	d10a      	bne.n	8011da8 <fp_sqr+0x28>
           err = fp_sqr_comba8(A,B);
 8011d92:	f7fd ffb3 	bl	800fcfc <fp_sqr_comba8>
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8011d96:	4621      	mov	r1, r4
    B->dp[y] = 0;
 8011d98:	2200      	movs	r2, #0
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8011d9a:	f851 3b08 	ldr.w	r3, [r1], #8
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	db01      	blt.n	8011da6 <fp_sqr+0x26>
 8011da2:	42ab      	cmp	r3, r5
 8011da4:	db06      	blt.n	8011db4 <fp_sqr+0x34>
}
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
       err = fp_sqr_comba(A, B);
 8011da8:	f7ff ff54 	bl	8011c54 <fp_sqr_comba>
 8011dac:	e7f3      	b.n	8011d96 <fp_sqr+0x16>
       err = FP_VAL;
 8011dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011db2:	e7f0      	b.n	8011d96 <fp_sqr+0x16>
    B->dp[y] = 0;
 8011db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8011db8:	3301      	adds	r3, #1
 8011dba:	e7f0      	b.n	8011d9e <fp_sqr+0x1e>

08011dbc <fp_invmod_mont_ct>:
{
 8011dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc0:	461f      	mov	r7, r3
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 8011dc2:	6803      	ldr	r3, [r0, #0]
{
 8011dc4:	b085      	sub	sp, #20
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 8011dc6:	005b      	lsls	r3, r3, #1
 8011dc8:	2b18      	cmp	r3, #24
{
 8011dca:	4683      	mov	fp, r0
 8011dcc:	460e      	mov	r6, r1
 8011dce:	9201      	str	r2, [sp, #4]
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 8011dd0:	f300 80c7 	bgt.w	8011f62 <fp_invmod_mont_ct+0x1a6>
 8011dd4:	680b      	ldr	r3, [r1, #0]
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	2b18      	cmp	r3, #24
 8011dda:	f300 80c2 	bgt.w	8011f62 <fp_invmod_mont_ct+0x1a6>
  t = (fp_int*)XMALLOC(sizeof(fp_int) * (2 + CT_INV_MOD_PRE_CNT), NULL,
 8011dde:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8011de2:	f001 f9dd 	bl	80131a0 <malloc>
  if (t == NULL)
 8011de6:	4604      	mov	r4, r0
 8011de8:	2800      	cmp	r0, #0
 8011dea:	f000 80bd 	beq.w	8011f68 <fp_invmod_mont_ct+0x1ac>
  e = t + 1;
 8011dee:	f100 0968 	add.w	r9, r0, #104	; 0x68
  pre = t + 2;
 8011df2:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
    fp_zero(a);
 8011df6:	f7ff f827 	bl	8010e48 <fp_zero>
 8011dfa:	4648      	mov	r0, r9
 8011dfc:	f7ff f824 	bl	8010e48 <fp_zero>
 8011e00:	4640      	mov	r0, r8
 8011e02:	f7ff f821 	bl	8010e48 <fp_zero>
  fp_copy(a, &pre[0]);
 8011e06:	4641      	mov	r1, r8
 8011e08:	4658      	mov	r0, fp
 8011e0a:	f7ff f967 	bl	80110dc <fp_copy>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 8011e0e:	f504 6382 	add.w	r3, r4, #1040	; 0x410
 8011e12:	9302      	str	r3, [sp, #8]
 8011e14:	f504 759c 	add.w	r5, r4, #312	; 0x138
  int i, j, err = FP_OKAY;
 8011e18:	2300      	movs	r3, #0
    fp_zero(a);
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	9303      	str	r3, [sp, #12]
 8011e1e:	f7ff f813 	bl	8010e48 <fp_zero>
    err |= fp_sqr(&pre[i-1], &pre[i]);
 8011e22:	4629      	mov	r1, r5
 8011e24:	f1a5 0068 	sub.w	r0, r5, #104	; 0x68
 8011e28:	f7ff ffaa 	bl	8011d80 <fp_sqr>
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 8011e2c:	463a      	mov	r2, r7
    err |= fp_sqr(&pre[i-1], &pre[i]);
 8011e2e:	4682      	mov	sl, r0
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 8011e30:	4631      	mov	r1, r6
 8011e32:	4628      	mov	r0, r5
 8011e34:	f7fe ff6e 	bl	8010d14 <fp_montgomery_reduce>
    err |= fp_mul(&pre[i], a, &pre[i]);
 8011e38:	462a      	mov	r2, r5
 8011e3a:	ea4a 0a00 	orr.w	sl, sl, r0
 8011e3e:	4659      	mov	r1, fp
 8011e40:	4628      	mov	r0, r5
 8011e42:	f7ff fa1f 	bl	8011284 <fp_mul>
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 8011e46:	463a      	mov	r2, r7
 8011e48:	ea4a 0a00 	orr.w	sl, sl, r0
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f7fe ff60 	bl	8010d14 <fp_montgomery_reduce>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 8011e54:	9a02      	ldr	r2, [sp, #8]
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 8011e56:	9b03      	ldr	r3, [sp, #12]
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 8011e58:	3568      	adds	r5, #104	; 0x68
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 8011e5a:	ea4a 0a00 	orr.w	sl, sl, r0
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 8011e5e:	42aa      	cmp	r2, r5
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 8011e60:	ea43 030a 	orr.w	r3, r3, sl
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 8011e64:	d1d9      	bne.n	8011e1a <fp_invmod_mont_ct+0x5e>
  err |= fp_sub_d(b, 2, e);
 8011e66:	464a      	mov	r2, r9
 8011e68:	2102      	movs	r1, #2
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	9302      	str	r3, [sp, #8]
 8011e6e:	f7ff f8cb 	bl	8011008 <fp_sub_d>
 8011e72:	9b02      	ldr	r3, [sp, #8]
 8011e74:	ea40 0503 	orr.w	r5, r0, r3
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 8011e78:	4648      	mov	r0, r9
 8011e7a:	f7fe ff86 	bl	8010d8a <fp_count_bits>
  j = 1;
 8011e7e:	f04f 0a01 	mov.w	sl, #1
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 8011e82:	f1a0 0b02 	sub.w	fp, r0, #2
 8011e86:	f1bb 0f00 	cmp.w	fp, #0
 8011e8a:	da27      	bge.n	8011edc <fp_invmod_mont_ct+0x120>
  fp_copy(&pre[j-1], t);
 8011e8c:	2368      	movs	r3, #104	; 0x68
 8011e8e:	fb03 800a 	mla	r0, r3, sl, r8
 8011e92:	4621      	mov	r1, r4
 8011e94:	3868      	subs	r0, #104	; 0x68
 8011e96:	f7ff f921 	bl	80110dc <fp_copy>
  j = 0;
 8011e9a:	f04f 0a00 	mov.w	sl, #0
  for (; i >= 0; i--) {
 8011e9e:	f1bb 0f00 	cmp.w	fp, #0
 8011ea2:	da29      	bge.n	8011ef8 <fp_invmod_mont_ct+0x13c>
  if (j > 0) {
 8011ea4:	f1ba 0f00 	cmp.w	sl, #0
 8011ea8:	dd56      	ble.n	8011f58 <fp_invmod_mont_ct+0x19c>
    err |= fp_mul(t, &pre[j-1], c);
 8011eaa:	2168      	movs	r1, #104	; 0x68
 8011eac:	fb01 810a 	mla	r1, r1, sl, r8
 8011eb0:	9a01      	ldr	r2, [sp, #4]
 8011eb2:	3968      	subs	r1, #104	; 0x68
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f7ff f9e5 	bl	8011284 <fp_mul>
    err |= fp_montgomery_reduce(c, b, mp);
 8011eba:	463a      	mov	r2, r7
    err |= fp_mul(t, &pre[j-1], c);
 8011ebc:	4680      	mov	r8, r0
    err |= fp_montgomery_reduce(c, b, mp);
 8011ebe:	4631      	mov	r1, r6
 8011ec0:	9801      	ldr	r0, [sp, #4]
 8011ec2:	f7fe ff27 	bl	8010d14 <fp_montgomery_reduce>
 8011ec6:	ea48 0800 	orr.w	r8, r8, r0
 8011eca:	ea45 0508 	orr.w	r5, r5, r8
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f001 f96e 	bl	80131b0 <free>
}
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	b005      	add	sp, #20
 8011ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!fp_is_bit_set(e, i) || j == CT_INV_MOD_PRE_CNT)
 8011edc:	4659      	mov	r1, fp
 8011ede:	4648      	mov	r0, r9
 8011ee0:	f7fe ff3b 	bl	8010d5a <fp_is_bit_set>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d0d1      	beq.n	8011e8c <fp_invmod_mont_ct+0xd0>
 8011ee8:	f1ba 0f08 	cmp.w	sl, #8
 8011eec:	d0ce      	beq.n	8011e8c <fp_invmod_mont_ct+0xd0>
      j++;
 8011eee:	f10a 0a01 	add.w	sl, sl, #1
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 8011ef2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011ef6:	e7c6      	b.n	8011e86 <fp_invmod_mont_ct+0xca>
    int set = fp_is_bit_set(e, i);
 8011ef8:	4659      	mov	r1, fp
 8011efa:	4648      	mov	r0, r9
 8011efc:	f7fe ff2d 	bl	8010d5a <fp_is_bit_set>
    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 8011f00:	f1ba 0f08 	cmp.w	sl, #8
    int set = fp_is_bit_set(e, i);
 8011f04:	9002      	str	r0, [sp, #8]
    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 8011f06:	d003      	beq.n	8011f10 <fp_invmod_mont_ct+0x154>
 8011f08:	b9b0      	cbnz	r0, 8011f38 <fp_invmod_mont_ct+0x17c>
 8011f0a:	f1ba 0f00 	cmp.w	sl, #0
 8011f0e:	dd13      	ble.n	8011f38 <fp_invmod_mont_ct+0x17c>
      err |= fp_mul(t, &pre[j-1], t);
 8011f10:	2368      	movs	r3, #104	; 0x68
 8011f12:	fb03 810a 	mla	r1, r3, sl, r8
 8011f16:	4622      	mov	r2, r4
 8011f18:	3968      	subs	r1, #104	; 0x68
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f7ff f9b2 	bl	8011284 <fp_mul>
      err |= fp_montgomery_reduce(t, b, mp);
 8011f20:	463a      	mov	r2, r7
      err |= fp_mul(t, &pre[j-1], t);
 8011f22:	4682      	mov	sl, r0
      err |= fp_montgomery_reduce(t, b, mp);
 8011f24:	4631      	mov	r1, r6
 8011f26:	4620      	mov	r0, r4
 8011f28:	f7fe fef4 	bl	8010d14 <fp_montgomery_reduce>
 8011f2c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011f30:	ea45 050a 	orr.w	r5, r5, sl
      j = 0;
 8011f34:	f04f 0a00 	mov.w	sl, #0
    err |= fp_sqr(t, t);
 8011f38:	4621      	mov	r1, r4
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f7ff ff20 	bl	8011d80 <fp_sqr>
    err |= fp_montgomery_reduce(t, b, mp);
 8011f40:	463a      	mov	r2, r7
    err |= fp_sqr(t, t);
 8011f42:	4305      	orrs	r5, r0
    err |= fp_montgomery_reduce(t, b, mp);
 8011f44:	4631      	mov	r1, r6
 8011f46:	4620      	mov	r0, r4
 8011f48:	f7fe fee4 	bl	8010d14 <fp_montgomery_reduce>
    j += set;
 8011f4c:	9b02      	ldr	r3, [sp, #8]
    err |= fp_montgomery_reduce(t, b, mp);
 8011f4e:	4305      	orrs	r5, r0
    j += set;
 8011f50:	449a      	add	sl, r3
  for (; i >= 0; i--) {
 8011f52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011f56:	e7a2      	b.n	8011e9e <fp_invmod_mont_ct+0xe2>
    fp_copy(t, c);
 8011f58:	9901      	ldr	r1, [sp, #4]
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f7ff f8be 	bl	80110dc <fp_copy>
 8011f60:	e7b5      	b.n	8011ece <fp_invmod_mont_ct+0x112>
    return FP_VAL;
 8011f62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011f66:	e7b5      	b.n	8011ed4 <fp_invmod_mont_ct+0x118>
    return FP_MEM;
 8011f68:	f06f 0501 	mvn.w	r5, #1
 8011f6c:	e7b2      	b.n	8011ed4 <fp_invmod_mont_ct+0x118>

08011f6e <mp_invmod_mont_ct>:
  return fp_invmod_mont_ct(a, b, c, mp);
 8011f6e:	f7ff bf25 	b.w	8011dbc <fp_invmod_mont_ct>

08011f72 <fp_init_copy>:
    if (a != b) {
 8011f72:	4288      	cmp	r0, r1
{
 8011f74:	b538      	push	{r3, r4, r5, lr}
 8011f76:	4605      	mov	r5, r0
 8011f78:	460c      	mov	r4, r1
    if (a != b) {
 8011f7a:	d007      	beq.n	8011f8c <fp_init_copy+0x1a>
    fp_zero(a);
 8011f7c:	f7fe ff64 	bl	8010e48 <fp_zero>
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 8011f80:	4629      	mov	r1, r5
 8011f82:	4620      	mov	r0, r4
}
 8011f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 8011f88:	f7ff b8a8 	b.w	80110dc <fp_copy>
}
 8011f8c:	bd38      	pop	{r3, r4, r5, pc}

08011f8e <fp_to_unsigned_bin>:
{
 8011f8e:	b570      	push	{r4, r5, r6, lr}
 8011f90:	4606      	mov	r6, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011f92:	2068      	movs	r0, #104	; 0x68
{
 8011f94:	460d      	mov	r5, r1
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011f96:	f001 f903 	bl	80131a0 <malloc>
   if (t == NULL)
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	b180      	cbz	r0, 8011fc0 <fp_to_unsigned_bin+0x32>
  fp_init_copy(t, a);
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	f7ff ffe7 	bl	8011f72 <fp_init_copy>
  x = fp_to_unsigned_bin_at_pos(0, t, b);
 8011fa4:	462a      	mov	r2, r5
 8011fa6:	4621      	mov	r1, r4
 8011fa8:	2000      	movs	r0, #0
 8011faa:	f7fe feb6 	bl	8010d1a <fp_to_unsigned_bin_at_pos>
 8011fae:	4601      	mov	r1, r0
  mp_reverse (b, x);
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	f000 f8f5 	bl	80121a0 <mp_reverse>
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f001 f8fa 	bl	80131b0 <free>
  return FP_OKAY;
 8011fbc:	2000      	movs	r0, #0
}
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}
       return FP_MEM;
 8011fc0:	f06f 0001 	mvn.w	r0, #1
 8011fc4:	e7fb      	b.n	8011fbe <fp_to_unsigned_bin+0x30>

08011fc6 <mp_to_unsigned_bin>:
  return fp_to_unsigned_bin(a,b);
 8011fc6:	f7ff bfe2 	b.w	8011f8e <fp_to_unsigned_bin>

08011fca <mp_copy>:
{
 8011fca:	b508      	push	{r3, lr}
    fp_copy(a, b);
 8011fcc:	f7ff f886 	bl	80110dc <fp_copy>
}
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	bd08      	pop	{r3, pc}

08011fd4 <mp_iszero>:
    return fp_iszero(a);
 8011fd4:	6800      	ldr	r0, [r0, #0]
}
 8011fd6:	fab0 f080 	clz	r0, r0
 8011fda:	0940      	lsrs	r0, r0, #5
 8011fdc:	4770      	bx	lr

08011fde <mp_count_bits>:
    return fp_count_bits(a);
 8011fde:	f7fe bed4 	b.w	8010d8a <fp_count_bits>

08011fe2 <mp_leading_bit>:
    return fp_leading_bit(a);
 8011fe2:	f7fe beec 	b.w	8010dbe <fp_leading_bit>

08011fe6 <mp_rshb>:
    fp_rshb(a, x);
 8011fe6:	f7fe bfdc 	b.w	8010fa2 <fp_rshb>

08011fea <mp_montgomery_calc_normalization>:
    return fp_montgomery_calc_normalization(a, b);
 8011fea:	f7fe bf78 	b.w	8010ede <fp_montgomery_calc_normalization>

08011fee <mp_cond_swap_ct_ex>:
#endif /* !NO_RSA || !NO_DSA || !NO_DH || WOLFSSL_KEY_GEN */


int mp_cond_swap_ct_ex(mp_int* a, mp_int* b, int c, int m, mp_int* t)
{
    return fp_cond_swap_ct_ex(a, b, c, m, t);
 8011fee:	f7fd be49 	b.w	800fc84 <fp_cond_swap_ct_ex>

08011ff2 <fp_add_d>:
#if defined(HAVE_ECC) || !defined(NO_PWDBASED) || defined(OPENSSL_EXTRA) || \
    defined(WC_RSA_BLINDING) || !defined(NO_DSA) || \
    (!defined(NO_RSA) && !defined(NO_RSA_BOUNDS_CHECK))
/* c = a + b */
int fp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 8011ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff4:	4605      	mov	r5, r0
   fp_int* tmp;
#endif
   int     err;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011ff6:	2068      	movs	r0, #104	; 0x68
{
 8011ff8:	460f      	mov	r7, r1
 8011ffa:	4616      	mov	r6, r2
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8011ffc:	f001 f8d0 	bl	80131a0 <malloc>
 8012000:	4604      	mov	r4, r0
   if (tmp == NULL)
 8012002:	b180      	cbz	r0, 8012026 <fp_add_d+0x34>
    fp_zero(a);
 8012004:	f7fe ff20 	bl	8010e48 <fp_zero>
       return FP_MEM;
#endif

   fp_init(tmp);
   fp_set(tmp, b);
 8012008:	4639      	mov	r1, r7
 801200a:	4620      	mov	r0, r4
 801200c:	f7fe ff5c 	bl	8010ec8 <fp_set>
   err = fp_add(a, tmp, c);
 8012010:	4628      	mov	r0, r5
 8012012:	4632      	mov	r2, r6
 8012014:	4621      	mov	r1, r4
 8012016:	f7fe fd65 	bl	8010ae4 <fp_add>
 801201a:	4605      	mov	r5, r0

#ifdef WOLFSSL_SMALL_STACK
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801201c:	4620      	mov	r0, r4
 801201e:	f001 f8c7 	bl	80131b0 <free>
#endif
   return err;
}
 8012022:	4628      	mov	r0, r5
 8012024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       return FP_MEM;
 8012026:	f06f 0501 	mvn.w	r5, #1
 801202a:	e7fa      	b.n	8012022 <fp_add_d+0x30>

0801202c <mp_read_radix>:
  return FP_OKAY;
}

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
 801202c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012030:	4690      	mov	r8, r2
 8012032:	4604      	mov	r4, r0
 8012034:	460d      	mov	r5, r1
  fp_zero (a);
 8012036:	f7fe ff07 	bl	8010e48 <fp_zero>
  if (radix == 16)
 801203a:	f1b8 0f10 	cmp.w	r8, #16
 801203e:	d146      	bne.n	80120ce <mp_read_radix+0xa2>
  if (*str == '-') {
 8012040:	782b      	ldrb	r3, [r5, #0]
 8012042:	2b2d      	cmp	r3, #45	; 0x2d
    ++str;
 8012044:	bf08      	it	eq
 8012046:	3501      	addeq	r5, #1
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 8012048:	4628      	mov	r0, r5
    neg = FP_NEG;
 801204a:	bf0c      	ite	eq
 801204c:	2601      	moveq	r6, #1
    neg = FP_ZPOS;
 801204e:	2600      	movne	r6, #0
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 8012050:	f001 fa63 	bl	801351a <strlen>
  k = 0;
 8012054:	2200      	movs	r2, #0
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 8012056:	3801      	subs	r0, #1
  j = 0;
 8012058:	4611      	mov	r1, r2
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801205a:	2800      	cmp	r0, #0
 801205c:	da0d      	bge.n	801207a <mp_read_radix+0x4e>
  a->used = k + 1;
 801205e:	3201      	adds	r2, #1
  fp_clamp(a);
 8012060:	6022      	str	r2, [r4, #0]
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d06f      	beq.n	8012148 <mp_read_radix+0x11c>
 8012068:	1e5a      	subs	r2, r3, #1
 801206a:	3301      	adds	r3, #1
 801206c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d0f5      	beq.n	8012060 <mp_read_radix+0x34>
     a->sign = neg;
 8012074:	6066      	str	r6, [r4, #4]
  return FP_OKAY;
 8012076:	2000      	movs	r0, #0
 8012078:	e025      	b.n	80120c6 <mp_read_radix+0x9a>
      ch = (int)HexCharToByte(str[i]);
 801207a:	5c2b      	ldrb	r3, [r5, r0]
#endif

WC_MISC_STATIC WC_INLINE signed char HexCharToByte(char ch)
{
    signed char ret = (signed char)ch;
    if (ret >= '0' && ret <= '9')
 801207c:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012080:	b2ff      	uxtb	r7, r7
 8012082:	2f09      	cmp	r7, #9
 8012084:	d812      	bhi.n	80120ac <mp_read_radix+0x80>
        ret -= '0';
 8012086:	b27b      	sxtb	r3, r7
      k += j == DIGIT_BIT;
 8012088:	2920      	cmp	r1, #32
 801208a:	bf08      	it	eq
 801208c:	3201      	addeq	r2, #1
      if (k >= FP_SIZE)
 801208e:	2a17      	cmp	r2, #23
      j &= DIGIT_BIT - 1;
 8012090:	f001 011f 	and.w	r1, r1, #31
      if (k >= FP_SIZE)
 8012094:	dc15      	bgt.n	80120c2 <mp_read_radix+0x96>
      a->dp[k] |= ((fp_digit)ch) << j;
 8012096:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801209a:	408b      	lsls	r3, r1
 801209c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80120a0:	433b      	orrs	r3, r7
 80120a2:	f8cc 3008 	str.w	r3, [ip, #8]
      j += 4;
 80120a6:	3104      	adds	r1, #4
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 80120a8:	3801      	subs	r0, #1
 80120aa:	e7d6      	b.n	801205a <mp_read_radix+0x2e>
    else if (ret >= 'A' && ret <= 'F')
 80120ac:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 80120b0:	2f05      	cmp	r7, #5
 80120b2:	d802      	bhi.n	80120ba <mp_read_radix+0x8e>
        ret -= 'A' - 10;
 80120b4:	3b37      	subs	r3, #55	; 0x37
    else if (ret >= 'a' && ret <= 'f')
        ret -= 'a' - 10;
 80120b6:	b25b      	sxtb	r3, r3
 80120b8:	e7e6      	b.n	8012088 <mp_read_radix+0x5c>
    else if (ret >= 'a' && ret <= 'f')
 80120ba:	f1a3 0761 	sub.w	r7, r3, #97	; 0x61
 80120be:	2f05      	cmp	r7, #5
 80120c0:	d903      	bls.n	80120ca <mp_read_radix+0x9e>
        return FP_VAL;
 80120c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return fp_read_radix(a, str, radix);
}
 80120c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret -= 'a' - 10;
 80120ca:	3b57      	subs	r3, #87	; 0x57
 80120cc:	e7f3      	b.n	80120b6 <mp_read_radix+0x8a>
  if (radix < 2 || radix > 64) {
 80120ce:	f1a8 0302 	sub.w	r3, r8, #2
 80120d2:	2b3e      	cmp	r3, #62	; 0x3e
 80120d4:	d8f5      	bhi.n	80120c2 <mp_read_radix+0x96>
  if (*str == '-') {
 80120d6:	782b      	ldrb	r3, [r5, #0]
 80120d8:	2b2d      	cmp	r3, #45	; 0x2d
 80120da:	d133      	bne.n	8012144 <mp_read_radix+0x118>
    ++str;
 80120dc:	3501      	adds	r5, #1
    neg = FP_NEG;
 80120de:	2601      	movs	r6, #1
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
 80120e0:	4f1a      	ldr	r7, [pc, #104]	; (801214c <mp_read_radix+0x120>)
 80120e2:	3d01      	subs	r5, #1
 80120e4:	e025      	b.n	8012132 <mp_read_radix+0x106>
 80120e6:	f1b8 0f24 	cmp.w	r8, #36	; 0x24
 80120ea:	dc06      	bgt.n	80120fa <mp_read_radix+0xce>
 80120ec:	5c3b      	ldrb	r3, [r7, r0]
 80120ee:	f003 0303 	and.w	r3, r3, #3
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	bf08      	it	eq
 80120f6:	3820      	subeq	r0, #32
 80120f8:	b2c0      	uxtb	r0, r0
    for (y = 0; y < 64; y++) {
 80120fa:	4b15      	ldr	r3, [pc, #84]	; (8012150 <mp_read_radix+0x124>)
 80120fc:	f04f 0900 	mov.w	r9, #0
      if (ch == fp_s_rmap[y]) {
 8012100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012104:	4282      	cmp	r2, r0
 8012106:	d005      	beq.n	8012114 <mp_read_radix+0xe8>
    for (y = 0; y < 64; y++) {
 8012108:	f109 0901 	add.w	r9, r9, #1
 801210c:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8012110:	d1f6      	bne.n	8012100 <mp_read_radix+0xd4>
 8012112:	e7d6      	b.n	80120c2 <mp_read_radix+0x96>
    if (y >= radix) {
 8012114:	45c8      	cmp	r8, r9
 8012116:	ddd4      	ble.n	80120c2 <mp_read_radix+0x96>
      int ret = fp_mul_d (a, (fp_digit) radix, a);
 8012118:	4622      	mov	r2, r4
 801211a:	4641      	mov	r1, r8
 801211c:	4620      	mov	r0, r4
 801211e:	f7fe fb3d 	bl	801079c <fp_mul_d>
      if (ret != FP_OKAY)
 8012122:	2800      	cmp	r0, #0
 8012124:	d1cf      	bne.n	80120c6 <mp_read_radix+0x9a>
      ret = fp_add_d (a, (fp_digit) y, a);
 8012126:	4649      	mov	r1, r9
 8012128:	4620      	mov	r0, r4
 801212a:	f7ff ff62 	bl	8011ff2 <fp_add_d>
      if (ret != FP_OKAY)
 801212e:	2800      	cmp	r0, #0
 8012130:	d1c9      	bne.n	80120c6 <mp_read_radix+0x9a>
  while (*str) {
 8012132:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012136:	2800      	cmp	r0, #0
 8012138:	d1d5      	bne.n	80120e6 <mp_read_radix+0xba>
  if (fp_iszero(a) != FP_YES) {
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d09a      	beq.n	8012076 <mp_read_radix+0x4a>
     a->sign = neg;
 8012140:	6066      	str	r6, [r4, #4]
    return fp_read_radix(a, str, radix);
 8012142:	e7c0      	b.n	80120c6 <mp_read_radix+0x9a>
    neg = FP_ZPOS;
 8012144:	2600      	movs	r6, #0
 8012146:	e7cb      	b.n	80120e0 <mp_read_radix+0xb4>
  fp_clamp(a);
 8012148:	6063      	str	r3, [r4, #4]
 801214a:	e794      	b.n	8012076 <mp_read_radix+0x4a>
 801214c:	0801f8c1 	.word	0x0801f8c1
 8012150:	0801f874 	.word	0x0801f874

08012154 <mp_sqr>:
#ifdef HAVE_ECC

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
    return fp_sqr(A, B);
 8012154:	f7ff be14 	b.w	8011d80 <fp_sqr>

08012158 <mp_montgomery_reduce>:
}

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
    return fp_montgomery_reduce(a, m, mp);
 8012158:	f7fe bddc 	b.w	8010d14 <fp_montgomery_reduce>

0801215c <mp_montgomery_setup>:


/* fast math conversion */
int mp_montgomery_setup(fp_int *a, fp_digit *rho)
{
    return fp_montgomery_setup(a, rho);
 801215c:	f7fe bd1a 	b.w	8010b94 <fp_montgomery_setup>

08012160 <mp_div_2_mod_ct>:
}

/* c = a / 2 (mod b) - constant time (a < b and positive) */
int mp_div_2_mod_ct(mp_int *a, mp_int *b, mp_int *c)
{
  return fp_div_2_mod_ct(a, b, c);
 8012160:	f7fe bb90 	b.w	8010884 <fp_div_2_mod_ct>

08012164 <mp_set>:

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA) || \
    defined(WOLFSSL_KEY_GEN)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
 8012164:	b508      	push	{r3, lr}
    fp_set(a,b);
 8012166:	f7fe feaf 	bl	8010ec8 <fp_set>
    return MP_OKAY;
}
 801216a:	2000      	movs	r0, #0
 801216c:	bd08      	pop	{r3, pc}
	...

08012170 <wolfCrypt_Init>:
 */
WOLFSSL_ABI
int wolfCrypt_Init(void)
{
    int ret = 0;
    if (initRefCount == 0) {
 8012170:	4b03      	ldr	r3, [pc, #12]	; (8012180 <wolfCrypt_Init+0x10>)
 8012172:	681a      	ldr	r2, [r3, #0]
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	3201      	adds	r2, #1
 8012178:	601a      	str	r2, [r3, #0]

    return ret;
}
 801217a:	2000      	movs	r0, #0
 801217c:	4770      	bx	lr
 801217e:	bf00      	nop
 8012180:	20000194 	.word	0x20000194

08012184 <wolfCrypt_Cleanup>:
WOLFSSL_ABI
int wolfCrypt_Cleanup(void)
{
    int ret = 0;

    initRefCount--;
 8012184:	4b05      	ldr	r3, [pc, #20]	; (801219c <wolfCrypt_Cleanup+0x18>)
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	3a01      	subs	r2, #1
 801218a:	601a      	str	r2, [r3, #0]
    if (initRefCount < 0)
 801218c:	681a      	ldr	r2, [r3, #0]
 801218e:	2a00      	cmp	r2, #0
        initRefCount = 0;
 8012190:	bfbc      	itt	lt
 8012192:	2200      	movlt	r2, #0
 8012194:	601a      	strlt	r2, [r3, #0]

    if (initRefCount == 0) {
 8012196:	681b      	ldr	r3, [r3, #0]
        wc_MemZero_Free();
    #endif
    }

    return ret;
}
 8012198:	2000      	movs	r0, #0
 801219a:	4770      	bx	lr
 801219c:	20000194 	.word	0x20000194

080121a0 <mp_reverse>:
#endif


/* reverse an array, used for radix code */
void mp_reverse(unsigned char *s, int len)
{
 80121a0:	b530      	push	{r4, r5, lr}
    int ix, iy;

    if (s == NULL)
 80121a2:	b130      	cbz	r0, 80121b2 <mp_reverse+0x12>
        return;

    ix = 0;
    iy = len - 1;
    while (ix < iy) {
 80121a4:	1e42      	subs	r2, r0, #1
    ix = 0;
 80121a6:	2300      	movs	r3, #0
 80121a8:	4408      	add	r0, r1
    while (ix < iy) {
 80121aa:	3901      	subs	r1, #1
 80121ac:	1acc      	subs	r4, r1, r3
 80121ae:	42a3      	cmp	r3, r4
 80121b0:	db00      	blt.n	80121b4 <mp_reverse+0x14>
        s[ix] = s[iy];
        s[iy] = t;
        ++ix;
        --iy;
    }
}
 80121b2:	bd30      	pop	{r4, r5, pc}
        unsigned char t = s[ix];
 80121b4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        s[ix] = s[iy];
 80121b8:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 80121bc:	7015      	strb	r5, [r2, #0]
        ++ix;
 80121be:	3301      	adds	r3, #1
        s[iy] = t;
 80121c0:	7004      	strb	r4, [r0, #0]
        --iy;
 80121c2:	e7f3      	b.n	80121ac <mp_reverse+0xc>

080121c4 <get_digit_count>:

int get_digit_count(const mp_int* a)
{
    if (a == NULL)
 80121c4:	b100      	cbz	r0, 80121c8 <get_digit_count+0x4>
        return 0;

    return (int)a->used;
 80121c6:	6800      	ldr	r0, [r0, #0]
}
 80121c8:	4770      	bx	lr

080121ca <get_digit>:

mp_digit get_digit(const mp_int* a, int n)
{
    if (a == NULL)
 80121ca:	b148      	cbz	r0, 80121e0 <get_digit+0x16>
        return 0;

    return (n < 0 || (unsigned int)n >= (unsigned int)a->used) ? 0 : a->dp[n];
 80121cc:	2900      	cmp	r1, #0
 80121ce:	db06      	blt.n	80121de <get_digit+0x14>
 80121d0:	6803      	ldr	r3, [r0, #0]
 80121d2:	428b      	cmp	r3, r1
 80121d4:	d903      	bls.n	80121de <get_digit+0x14>
 80121d6:	3102      	adds	r1, #2
 80121d8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80121dc:	4770      	bx	lr
        return 0;
 80121de:	2000      	movs	r0, #0
}
 80121e0:	4770      	bx	lr

080121e2 <mp_cond_copy>:
 * b     MP integer to copy into.
 * returns BAD_FUNC_ARG when a or b is NULL, MEMORY_E when growing b fails and
 *         MP_OKAY otherwise.
 */
int mp_cond_copy(mp_int* a, int copy, mp_int* b)
{
 80121e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int err = MP_OKAY;
#if defined(SP_WORD_SIZE) && SP_WORD_SIZE == 8
    unsigned int mask = (unsigned int)0 - copy;
#else
    mp_digit mask = (mp_digit)0 - (mp_digit)copy;
 80121e6:	424f      	negs	r7, r1
#endif

    if (a == NULL || b == NULL)
 80121e8:	4606      	mov	r6, r0
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d047      	beq.n	801227e <mp_cond_copy+0x9c>
 80121ee:	2a00      	cmp	r2, #0
 80121f0:	d045      	beq.n	801227e <mp_cond_copy+0x9c>
         * When mask all set, b ^ b ^ a = a
         */
        /* Conditionally copy all digits and then number of used digits.
         * get_digit() returns 0 when index greater than available digit.
         */
        for (i = 0; i < a->used; i++) {
 80121f2:	6804      	ldr	r4, [r0, #0]
 80121f4:	f102 0808 	add.w	r8, r2, #8
 80121f8:	f04f 0900 	mov.w	r9, #0
 80121fc:	454c      	cmp	r4, r9
 80121fe:	dc18      	bgt.n	8012232 <mp_cond_copy+0x50>
 8012200:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 8012204:	f10a 0902 	add.w	r9, sl, #2
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
        }
        for (; i < b->used; i++) {
 8012208:	f8d2 8000 	ldr.w	r8, [r2]
 801220c:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 8012210:	45d0      	cmp	r8, sl
 8012212:	dc21      	bgt.n	8012258 <mp_cond_copy+0x76>
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
        }
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
#if (!defined(WOLFSSL_SP_MATH) && !defined(WOLFSSL_SP_MATH_ALL)) || \
    defined(WOLFSSL_SP_INT_NEGATIVE)
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 8012214:	6853      	ldr	r3, [r2, #4]
 8012216:	6871      	ldr	r1, [r6, #4]
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 8012218:	ea84 0408 	eor.w	r4, r4, r8
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801221c:	4059      	eors	r1, r3
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801221e:	403c      	ands	r4, r7
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 8012220:	400f      	ands	r7, r1
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 8012222:	ea84 0408 	eor.w	r4, r4, r8
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 8012226:	405f      	eors	r7, r3
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 8012228:	6014      	str	r4, [r2, #0]
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801222a:	6057      	str	r7, [r2, #4]
 801222c:	2000      	movs	r0, #0
#endif
    }

    return err;
}
 801222e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
 8012232:	4649      	mov	r1, r9
 8012234:	4630      	mov	r0, r6
 8012236:	f7ff ffc8 	bl	80121ca <get_digit>
 801223a:	4649      	mov	r1, r9
 801223c:	4605      	mov	r5, r0
 801223e:	4610      	mov	r0, r2
 8012240:	f7ff ffc3 	bl	80121ca <get_digit>
 8012244:	f8d8 3000 	ldr.w	r3, [r8]
 8012248:	4045      	eors	r5, r0
 801224a:	403d      	ands	r5, r7
 801224c:	405d      	eors	r5, r3
 801224e:	f848 5b04 	str.w	r5, [r8], #4
        for (i = 0; i < a->used; i++) {
 8012252:	f109 0901 	add.w	r9, r9, #1
 8012256:	e7d1      	b.n	80121fc <mp_cond_copy+0x1a>
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
 8012258:	4651      	mov	r1, sl
 801225a:	4630      	mov	r0, r6
 801225c:	f7ff ffb5 	bl	80121ca <get_digit>
 8012260:	4651      	mov	r1, sl
 8012262:	4605      	mov	r5, r0
 8012264:	4610      	mov	r0, r2
 8012266:	f7ff ffb0 	bl	80121ca <get_digit>
 801226a:	f8d9 3000 	ldr.w	r3, [r9]
 801226e:	4045      	eors	r5, r0
 8012270:	403d      	ands	r5, r7
 8012272:	405d      	eors	r5, r3
 8012274:	f849 5b04 	str.w	r5, [r9], #4
        for (; i < b->used; i++) {
 8012278:	f10a 0a01 	add.w	sl, sl, #1
 801227c:	e7c8      	b.n	8012210 <mp_cond_copy+0x2e>
        err = BAD_FUNC_ARG;
 801227e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    return err;
 8012282:	e7d4      	b.n	801222e <mp_cond_copy+0x4c>

08012284 <__aeabi_drsub>:
 8012284:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8012288:	e002      	b.n	8012290 <__adddf3>
 801228a:	bf00      	nop

0801228c <__aeabi_dsub>:
 801228c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08012290 <__adddf3>:
 8012290:	b530      	push	{r4, r5, lr}
 8012292:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8012296:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801229a:	ea94 0f05 	teq	r4, r5
 801229e:	bf08      	it	eq
 80122a0:	ea90 0f02 	teqeq	r0, r2
 80122a4:	bf1f      	itttt	ne
 80122a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80122aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80122ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80122b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80122b6:	f000 80e2 	beq.w	801247e <__adddf3+0x1ee>
 80122ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80122be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80122c2:	bfb8      	it	lt
 80122c4:	426d      	neglt	r5, r5
 80122c6:	dd0c      	ble.n	80122e2 <__adddf3+0x52>
 80122c8:	442c      	add	r4, r5
 80122ca:	ea80 0202 	eor.w	r2, r0, r2
 80122ce:	ea81 0303 	eor.w	r3, r1, r3
 80122d2:	ea82 0000 	eor.w	r0, r2, r0
 80122d6:	ea83 0101 	eor.w	r1, r3, r1
 80122da:	ea80 0202 	eor.w	r2, r0, r2
 80122de:	ea81 0303 	eor.w	r3, r1, r3
 80122e2:	2d36      	cmp	r5, #54	; 0x36
 80122e4:	bf88      	it	hi
 80122e6:	bd30      	pophi	{r4, r5, pc}
 80122e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80122ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80122f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80122f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80122f8:	d002      	beq.n	8012300 <__adddf3+0x70>
 80122fa:	4240      	negs	r0, r0
 80122fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8012300:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8012304:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8012308:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801230c:	d002      	beq.n	8012314 <__adddf3+0x84>
 801230e:	4252      	negs	r2, r2
 8012310:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8012314:	ea94 0f05 	teq	r4, r5
 8012318:	f000 80a7 	beq.w	801246a <__adddf3+0x1da>
 801231c:	f1a4 0401 	sub.w	r4, r4, #1
 8012320:	f1d5 0e20 	rsbs	lr, r5, #32
 8012324:	db0d      	blt.n	8012342 <__adddf3+0xb2>
 8012326:	fa02 fc0e 	lsl.w	ip, r2, lr
 801232a:	fa22 f205 	lsr.w	r2, r2, r5
 801232e:	1880      	adds	r0, r0, r2
 8012330:	f141 0100 	adc.w	r1, r1, #0
 8012334:	fa03 f20e 	lsl.w	r2, r3, lr
 8012338:	1880      	adds	r0, r0, r2
 801233a:	fa43 f305 	asr.w	r3, r3, r5
 801233e:	4159      	adcs	r1, r3
 8012340:	e00e      	b.n	8012360 <__adddf3+0xd0>
 8012342:	f1a5 0520 	sub.w	r5, r5, #32
 8012346:	f10e 0e20 	add.w	lr, lr, #32
 801234a:	2a01      	cmp	r2, #1
 801234c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8012350:	bf28      	it	cs
 8012352:	f04c 0c02 	orrcs.w	ip, ip, #2
 8012356:	fa43 f305 	asr.w	r3, r3, r5
 801235a:	18c0      	adds	r0, r0, r3
 801235c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8012360:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8012364:	d507      	bpl.n	8012376 <__adddf3+0xe6>
 8012366:	f04f 0e00 	mov.w	lr, #0
 801236a:	f1dc 0c00 	rsbs	ip, ip, #0
 801236e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8012372:	eb6e 0101 	sbc.w	r1, lr, r1
 8012376:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801237a:	d31b      	bcc.n	80123b4 <__adddf3+0x124>
 801237c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8012380:	d30c      	bcc.n	801239c <__adddf3+0x10c>
 8012382:	0849      	lsrs	r1, r1, #1
 8012384:	ea5f 0030 	movs.w	r0, r0, rrx
 8012388:	ea4f 0c3c 	mov.w	ip, ip, rrx
 801238c:	f104 0401 	add.w	r4, r4, #1
 8012390:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8012394:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8012398:	f080 809a 	bcs.w	80124d0 <__adddf3+0x240>
 801239c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80123a0:	bf08      	it	eq
 80123a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80123a6:	f150 0000 	adcs.w	r0, r0, #0
 80123aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80123ae:	ea41 0105 	orr.w	r1, r1, r5
 80123b2:	bd30      	pop	{r4, r5, pc}
 80123b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80123b8:	4140      	adcs	r0, r0
 80123ba:	eb41 0101 	adc.w	r1, r1, r1
 80123be:	3c01      	subs	r4, #1
 80123c0:	bf28      	it	cs
 80123c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80123c6:	d2e9      	bcs.n	801239c <__adddf3+0x10c>
 80123c8:	f091 0f00 	teq	r1, #0
 80123cc:	bf04      	itt	eq
 80123ce:	4601      	moveq	r1, r0
 80123d0:	2000      	moveq	r0, #0
 80123d2:	fab1 f381 	clz	r3, r1
 80123d6:	bf08      	it	eq
 80123d8:	3320      	addeq	r3, #32
 80123da:	f1a3 030b 	sub.w	r3, r3, #11
 80123de:	f1b3 0220 	subs.w	r2, r3, #32
 80123e2:	da0c      	bge.n	80123fe <__adddf3+0x16e>
 80123e4:	320c      	adds	r2, #12
 80123e6:	dd08      	ble.n	80123fa <__adddf3+0x16a>
 80123e8:	f102 0c14 	add.w	ip, r2, #20
 80123ec:	f1c2 020c 	rsb	r2, r2, #12
 80123f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80123f4:	fa21 f102 	lsr.w	r1, r1, r2
 80123f8:	e00c      	b.n	8012414 <__adddf3+0x184>
 80123fa:	f102 0214 	add.w	r2, r2, #20
 80123fe:	bfd8      	it	le
 8012400:	f1c2 0c20 	rsble	ip, r2, #32
 8012404:	fa01 f102 	lsl.w	r1, r1, r2
 8012408:	fa20 fc0c 	lsr.w	ip, r0, ip
 801240c:	bfdc      	itt	le
 801240e:	ea41 010c 	orrle.w	r1, r1, ip
 8012412:	4090      	lslle	r0, r2
 8012414:	1ae4      	subs	r4, r4, r3
 8012416:	bfa2      	ittt	ge
 8012418:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801241c:	4329      	orrge	r1, r5
 801241e:	bd30      	popge	{r4, r5, pc}
 8012420:	ea6f 0404 	mvn.w	r4, r4
 8012424:	3c1f      	subs	r4, #31
 8012426:	da1c      	bge.n	8012462 <__adddf3+0x1d2>
 8012428:	340c      	adds	r4, #12
 801242a:	dc0e      	bgt.n	801244a <__adddf3+0x1ba>
 801242c:	f104 0414 	add.w	r4, r4, #20
 8012430:	f1c4 0220 	rsb	r2, r4, #32
 8012434:	fa20 f004 	lsr.w	r0, r0, r4
 8012438:	fa01 f302 	lsl.w	r3, r1, r2
 801243c:	ea40 0003 	orr.w	r0, r0, r3
 8012440:	fa21 f304 	lsr.w	r3, r1, r4
 8012444:	ea45 0103 	orr.w	r1, r5, r3
 8012448:	bd30      	pop	{r4, r5, pc}
 801244a:	f1c4 040c 	rsb	r4, r4, #12
 801244e:	f1c4 0220 	rsb	r2, r4, #32
 8012452:	fa20 f002 	lsr.w	r0, r0, r2
 8012456:	fa01 f304 	lsl.w	r3, r1, r4
 801245a:	ea40 0003 	orr.w	r0, r0, r3
 801245e:	4629      	mov	r1, r5
 8012460:	bd30      	pop	{r4, r5, pc}
 8012462:	fa21 f004 	lsr.w	r0, r1, r4
 8012466:	4629      	mov	r1, r5
 8012468:	bd30      	pop	{r4, r5, pc}
 801246a:	f094 0f00 	teq	r4, #0
 801246e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8012472:	bf06      	itte	eq
 8012474:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8012478:	3401      	addeq	r4, #1
 801247a:	3d01      	subne	r5, #1
 801247c:	e74e      	b.n	801231c <__adddf3+0x8c>
 801247e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8012482:	bf18      	it	ne
 8012484:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8012488:	d029      	beq.n	80124de <__adddf3+0x24e>
 801248a:	ea94 0f05 	teq	r4, r5
 801248e:	bf08      	it	eq
 8012490:	ea90 0f02 	teqeq	r0, r2
 8012494:	d005      	beq.n	80124a2 <__adddf3+0x212>
 8012496:	ea54 0c00 	orrs.w	ip, r4, r0
 801249a:	bf04      	itt	eq
 801249c:	4619      	moveq	r1, r3
 801249e:	4610      	moveq	r0, r2
 80124a0:	bd30      	pop	{r4, r5, pc}
 80124a2:	ea91 0f03 	teq	r1, r3
 80124a6:	bf1e      	ittt	ne
 80124a8:	2100      	movne	r1, #0
 80124aa:	2000      	movne	r0, #0
 80124ac:	bd30      	popne	{r4, r5, pc}
 80124ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80124b2:	d105      	bne.n	80124c0 <__adddf3+0x230>
 80124b4:	0040      	lsls	r0, r0, #1
 80124b6:	4149      	adcs	r1, r1
 80124b8:	bf28      	it	cs
 80124ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80124be:	bd30      	pop	{r4, r5, pc}
 80124c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80124c4:	bf3c      	itt	cc
 80124c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80124ca:	bd30      	popcc	{r4, r5, pc}
 80124cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80124d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80124d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80124d8:	f04f 0000 	mov.w	r0, #0
 80124dc:	bd30      	pop	{r4, r5, pc}
 80124de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80124e2:	bf1a      	itte	ne
 80124e4:	4619      	movne	r1, r3
 80124e6:	4610      	movne	r0, r2
 80124e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80124ec:	bf1c      	itt	ne
 80124ee:	460b      	movne	r3, r1
 80124f0:	4602      	movne	r2, r0
 80124f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80124f6:	bf06      	itte	eq
 80124f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80124fc:	ea91 0f03 	teqeq	r1, r3
 8012500:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8012504:	bd30      	pop	{r4, r5, pc}
 8012506:	bf00      	nop

08012508 <__aeabi_ui2d>:
 8012508:	f090 0f00 	teq	r0, #0
 801250c:	bf04      	itt	eq
 801250e:	2100      	moveq	r1, #0
 8012510:	4770      	bxeq	lr
 8012512:	b530      	push	{r4, r5, lr}
 8012514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8012518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801251c:	f04f 0500 	mov.w	r5, #0
 8012520:	f04f 0100 	mov.w	r1, #0
 8012524:	e750      	b.n	80123c8 <__adddf3+0x138>
 8012526:	bf00      	nop

08012528 <__aeabi_i2d>:
 8012528:	f090 0f00 	teq	r0, #0
 801252c:	bf04      	itt	eq
 801252e:	2100      	moveq	r1, #0
 8012530:	4770      	bxeq	lr
 8012532:	b530      	push	{r4, r5, lr}
 8012534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8012538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801253c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8012540:	bf48      	it	mi
 8012542:	4240      	negmi	r0, r0
 8012544:	f04f 0100 	mov.w	r1, #0
 8012548:	e73e      	b.n	80123c8 <__adddf3+0x138>
 801254a:	bf00      	nop

0801254c <__aeabi_f2d>:
 801254c:	0042      	lsls	r2, r0, #1
 801254e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8012552:	ea4f 0131 	mov.w	r1, r1, rrx
 8012556:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801255a:	bf1f      	itttt	ne
 801255c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8012560:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8012564:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8012568:	4770      	bxne	lr
 801256a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801256e:	bf08      	it	eq
 8012570:	4770      	bxeq	lr
 8012572:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8012576:	bf04      	itt	eq
 8012578:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 801257c:	4770      	bxeq	lr
 801257e:	b530      	push	{r4, r5, lr}
 8012580:	f44f 7460 	mov.w	r4, #896	; 0x380
 8012584:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8012588:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801258c:	e71c      	b.n	80123c8 <__adddf3+0x138>
 801258e:	bf00      	nop

08012590 <__aeabi_ul2d>:
 8012590:	ea50 0201 	orrs.w	r2, r0, r1
 8012594:	bf08      	it	eq
 8012596:	4770      	bxeq	lr
 8012598:	b530      	push	{r4, r5, lr}
 801259a:	f04f 0500 	mov.w	r5, #0
 801259e:	e00a      	b.n	80125b6 <__aeabi_l2d+0x16>

080125a0 <__aeabi_l2d>:
 80125a0:	ea50 0201 	orrs.w	r2, r0, r1
 80125a4:	bf08      	it	eq
 80125a6:	4770      	bxeq	lr
 80125a8:	b530      	push	{r4, r5, lr}
 80125aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80125ae:	d502      	bpl.n	80125b6 <__aeabi_l2d+0x16>
 80125b0:	4240      	negs	r0, r0
 80125b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80125b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80125ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80125be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80125c2:	f43f aed8 	beq.w	8012376 <__adddf3+0xe6>
 80125c6:	f04f 0203 	mov.w	r2, #3
 80125ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80125ce:	bf18      	it	ne
 80125d0:	3203      	addne	r2, #3
 80125d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80125d6:	bf18      	it	ne
 80125d8:	3203      	addne	r2, #3
 80125da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80125de:	f1c2 0320 	rsb	r3, r2, #32
 80125e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80125e6:	fa20 f002 	lsr.w	r0, r0, r2
 80125ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80125ee:	ea40 000e 	orr.w	r0, r0, lr
 80125f2:	fa21 f102 	lsr.w	r1, r1, r2
 80125f6:	4414      	add	r4, r2
 80125f8:	e6bd      	b.n	8012376 <__adddf3+0xe6>
 80125fa:	bf00      	nop

080125fc <__aeabi_dmul>:
 80125fc:	b570      	push	{r4, r5, r6, lr}
 80125fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8012602:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8012606:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801260a:	bf1d      	ittte	ne
 801260c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8012610:	ea94 0f0c 	teqne	r4, ip
 8012614:	ea95 0f0c 	teqne	r5, ip
 8012618:	f000 f8de 	bleq	80127d8 <__aeabi_dmul+0x1dc>
 801261c:	442c      	add	r4, r5
 801261e:	ea81 0603 	eor.w	r6, r1, r3
 8012622:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8012626:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 801262a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801262e:	bf18      	it	ne
 8012630:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8012634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801263c:	d038      	beq.n	80126b0 <__aeabi_dmul+0xb4>
 801263e:	fba0 ce02 	umull	ip, lr, r0, r2
 8012642:	f04f 0500 	mov.w	r5, #0
 8012646:	fbe1 e502 	umlal	lr, r5, r1, r2
 801264a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801264e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8012652:	f04f 0600 	mov.w	r6, #0
 8012656:	fbe1 5603 	umlal	r5, r6, r1, r3
 801265a:	f09c 0f00 	teq	ip, #0
 801265e:	bf18      	it	ne
 8012660:	f04e 0e01 	orrne.w	lr, lr, #1
 8012664:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8012668:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 801266c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8012670:	d204      	bcs.n	801267c <__aeabi_dmul+0x80>
 8012672:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8012676:	416d      	adcs	r5, r5
 8012678:	eb46 0606 	adc.w	r6, r6, r6
 801267c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8012680:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8012684:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8012688:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 801268c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8012690:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8012694:	bf88      	it	hi
 8012696:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801269a:	d81e      	bhi.n	80126da <__aeabi_dmul+0xde>
 801269c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80126a0:	bf08      	it	eq
 80126a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80126a6:	f150 0000 	adcs.w	r0, r0, #0
 80126aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80126ae:	bd70      	pop	{r4, r5, r6, pc}
 80126b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80126b4:	ea46 0101 	orr.w	r1, r6, r1
 80126b8:	ea40 0002 	orr.w	r0, r0, r2
 80126bc:	ea81 0103 	eor.w	r1, r1, r3
 80126c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80126c4:	bfc2      	ittt	gt
 80126c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80126ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80126ce:	bd70      	popgt	{r4, r5, r6, pc}
 80126d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80126d4:	f04f 0e00 	mov.w	lr, #0
 80126d8:	3c01      	subs	r4, #1
 80126da:	f300 80ab 	bgt.w	8012834 <__aeabi_dmul+0x238>
 80126de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80126e2:	bfde      	ittt	le
 80126e4:	2000      	movle	r0, #0
 80126e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80126ea:	bd70      	pople	{r4, r5, r6, pc}
 80126ec:	f1c4 0400 	rsb	r4, r4, #0
 80126f0:	3c20      	subs	r4, #32
 80126f2:	da35      	bge.n	8012760 <__aeabi_dmul+0x164>
 80126f4:	340c      	adds	r4, #12
 80126f6:	dc1b      	bgt.n	8012730 <__aeabi_dmul+0x134>
 80126f8:	f104 0414 	add.w	r4, r4, #20
 80126fc:	f1c4 0520 	rsb	r5, r4, #32
 8012700:	fa00 f305 	lsl.w	r3, r0, r5
 8012704:	fa20 f004 	lsr.w	r0, r0, r4
 8012708:	fa01 f205 	lsl.w	r2, r1, r5
 801270c:	ea40 0002 	orr.w	r0, r0, r2
 8012710:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8012714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801271c:	fa21 f604 	lsr.w	r6, r1, r4
 8012720:	eb42 0106 	adc.w	r1, r2, r6
 8012724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012728:	bf08      	it	eq
 801272a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801272e:	bd70      	pop	{r4, r5, r6, pc}
 8012730:	f1c4 040c 	rsb	r4, r4, #12
 8012734:	f1c4 0520 	rsb	r5, r4, #32
 8012738:	fa00 f304 	lsl.w	r3, r0, r4
 801273c:	fa20 f005 	lsr.w	r0, r0, r5
 8012740:	fa01 f204 	lsl.w	r2, r1, r4
 8012744:	ea40 0002 	orr.w	r0, r0, r2
 8012748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801274c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8012750:	f141 0100 	adc.w	r1, r1, #0
 8012754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012758:	bf08      	it	eq
 801275a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801275e:	bd70      	pop	{r4, r5, r6, pc}
 8012760:	f1c4 0520 	rsb	r5, r4, #32
 8012764:	fa00 f205 	lsl.w	r2, r0, r5
 8012768:	ea4e 0e02 	orr.w	lr, lr, r2
 801276c:	fa20 f304 	lsr.w	r3, r0, r4
 8012770:	fa01 f205 	lsl.w	r2, r1, r5
 8012774:	ea43 0302 	orr.w	r3, r3, r2
 8012778:	fa21 f004 	lsr.w	r0, r1, r4
 801277c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012780:	fa21 f204 	lsr.w	r2, r1, r4
 8012784:	ea20 0002 	bic.w	r0, r0, r2
 8012788:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801278c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8012790:	bf08      	it	eq
 8012792:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	f094 0f00 	teq	r4, #0
 801279c:	d10f      	bne.n	80127be <__aeabi_dmul+0x1c2>
 801279e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80127a2:	0040      	lsls	r0, r0, #1
 80127a4:	eb41 0101 	adc.w	r1, r1, r1
 80127a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80127ac:	bf08      	it	eq
 80127ae:	3c01      	subeq	r4, #1
 80127b0:	d0f7      	beq.n	80127a2 <__aeabi_dmul+0x1a6>
 80127b2:	ea41 0106 	orr.w	r1, r1, r6
 80127b6:	f095 0f00 	teq	r5, #0
 80127ba:	bf18      	it	ne
 80127bc:	4770      	bxne	lr
 80127be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80127c2:	0052      	lsls	r2, r2, #1
 80127c4:	eb43 0303 	adc.w	r3, r3, r3
 80127c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80127cc:	bf08      	it	eq
 80127ce:	3d01      	subeq	r5, #1
 80127d0:	d0f7      	beq.n	80127c2 <__aeabi_dmul+0x1c6>
 80127d2:	ea43 0306 	orr.w	r3, r3, r6
 80127d6:	4770      	bx	lr
 80127d8:	ea94 0f0c 	teq	r4, ip
 80127dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80127e0:	bf18      	it	ne
 80127e2:	ea95 0f0c 	teqne	r5, ip
 80127e6:	d00c      	beq.n	8012802 <__aeabi_dmul+0x206>
 80127e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80127ec:	bf18      	it	ne
 80127ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80127f2:	d1d1      	bne.n	8012798 <__aeabi_dmul+0x19c>
 80127f4:	ea81 0103 	eor.w	r1, r1, r3
 80127f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80127fc:	f04f 0000 	mov.w	r0, #0
 8012800:	bd70      	pop	{r4, r5, r6, pc}
 8012802:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8012806:	bf06      	itte	eq
 8012808:	4610      	moveq	r0, r2
 801280a:	4619      	moveq	r1, r3
 801280c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8012810:	d019      	beq.n	8012846 <__aeabi_dmul+0x24a>
 8012812:	ea94 0f0c 	teq	r4, ip
 8012816:	d102      	bne.n	801281e <__aeabi_dmul+0x222>
 8012818:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 801281c:	d113      	bne.n	8012846 <__aeabi_dmul+0x24a>
 801281e:	ea95 0f0c 	teq	r5, ip
 8012822:	d105      	bne.n	8012830 <__aeabi_dmul+0x234>
 8012824:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8012828:	bf1c      	itt	ne
 801282a:	4610      	movne	r0, r2
 801282c:	4619      	movne	r1, r3
 801282e:	d10a      	bne.n	8012846 <__aeabi_dmul+0x24a>
 8012830:	ea81 0103 	eor.w	r1, r1, r3
 8012834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8012838:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801283c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012840:	f04f 0000 	mov.w	r0, #0
 8012844:	bd70      	pop	{r4, r5, r6, pc}
 8012846:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 801284a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801284e:	bd70      	pop	{r4, r5, r6, pc}

08012850 <__aeabi_ddiv>:
 8012850:	b570      	push	{r4, r5, r6, lr}
 8012852:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8012856:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801285a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801285e:	bf1d      	ittte	ne
 8012860:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8012864:	ea94 0f0c 	teqne	r4, ip
 8012868:	ea95 0f0c 	teqne	r5, ip
 801286c:	f000 f8a7 	bleq	80129be <__aeabi_ddiv+0x16e>
 8012870:	eba4 0405 	sub.w	r4, r4, r5
 8012874:	ea81 0e03 	eor.w	lr, r1, r3
 8012878:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801287c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8012880:	f000 8088 	beq.w	8012994 <__aeabi_ddiv+0x144>
 8012884:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8012888:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801288c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8012890:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8012894:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8012898:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 801289c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80128a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80128a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80128a8:	429d      	cmp	r5, r3
 80128aa:	bf08      	it	eq
 80128ac:	4296      	cmpeq	r6, r2
 80128ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80128b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80128b6:	d202      	bcs.n	80128be <__aeabi_ddiv+0x6e>
 80128b8:	085b      	lsrs	r3, r3, #1
 80128ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80128be:	1ab6      	subs	r6, r6, r2
 80128c0:	eb65 0503 	sbc.w	r5, r5, r3
 80128c4:	085b      	lsrs	r3, r3, #1
 80128c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80128ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80128ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80128d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80128d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80128da:	bf22      	ittt	cs
 80128dc:	1ab6      	subcs	r6, r6, r2
 80128de:	4675      	movcs	r5, lr
 80128e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80128e4:	085b      	lsrs	r3, r3, #1
 80128e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80128ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80128ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80128f2:	bf22      	ittt	cs
 80128f4:	1ab6      	subcs	r6, r6, r2
 80128f6:	4675      	movcs	r5, lr
 80128f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80128fc:	085b      	lsrs	r3, r3, #1
 80128fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8012902:	ebb6 0e02 	subs.w	lr, r6, r2
 8012906:	eb75 0e03 	sbcs.w	lr, r5, r3
 801290a:	bf22      	ittt	cs
 801290c:	1ab6      	subcs	r6, r6, r2
 801290e:	4675      	movcs	r5, lr
 8012910:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8012914:	085b      	lsrs	r3, r3, #1
 8012916:	ea4f 0232 	mov.w	r2, r2, rrx
 801291a:	ebb6 0e02 	subs.w	lr, r6, r2
 801291e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8012922:	bf22      	ittt	cs
 8012924:	1ab6      	subcs	r6, r6, r2
 8012926:	4675      	movcs	r5, lr
 8012928:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801292c:	ea55 0e06 	orrs.w	lr, r5, r6
 8012930:	d018      	beq.n	8012964 <__aeabi_ddiv+0x114>
 8012932:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8012936:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 801293a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801293e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8012942:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8012946:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801294a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801294e:	d1c0      	bne.n	80128d2 <__aeabi_ddiv+0x82>
 8012950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012954:	d10b      	bne.n	801296e <__aeabi_ddiv+0x11e>
 8012956:	ea41 0100 	orr.w	r1, r1, r0
 801295a:	f04f 0000 	mov.w	r0, #0
 801295e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8012962:	e7b6      	b.n	80128d2 <__aeabi_ddiv+0x82>
 8012964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8012968:	bf04      	itt	eq
 801296a:	4301      	orreq	r1, r0
 801296c:	2000      	moveq	r0, #0
 801296e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8012972:	bf88      	it	hi
 8012974:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8012978:	f63f aeaf 	bhi.w	80126da <__aeabi_dmul+0xde>
 801297c:	ebb5 0c03 	subs.w	ip, r5, r3
 8012980:	bf04      	itt	eq
 8012982:	ebb6 0c02 	subseq.w	ip, r6, r2
 8012986:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801298a:	f150 0000 	adcs.w	r0, r0, #0
 801298e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8012992:	bd70      	pop	{r4, r5, r6, pc}
 8012994:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8012998:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 801299c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80129a0:	bfc2      	ittt	gt
 80129a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80129a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80129aa:	bd70      	popgt	{r4, r5, r6, pc}
 80129ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80129b0:	f04f 0e00 	mov.w	lr, #0
 80129b4:	3c01      	subs	r4, #1
 80129b6:	e690      	b.n	80126da <__aeabi_dmul+0xde>
 80129b8:	ea45 0e06 	orr.w	lr, r5, r6
 80129bc:	e68d      	b.n	80126da <__aeabi_dmul+0xde>
 80129be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80129c2:	ea94 0f0c 	teq	r4, ip
 80129c6:	bf08      	it	eq
 80129c8:	ea95 0f0c 	teqeq	r5, ip
 80129cc:	f43f af3b 	beq.w	8012846 <__aeabi_dmul+0x24a>
 80129d0:	ea94 0f0c 	teq	r4, ip
 80129d4:	d10a      	bne.n	80129ec <__aeabi_ddiv+0x19c>
 80129d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80129da:	f47f af34 	bne.w	8012846 <__aeabi_dmul+0x24a>
 80129de:	ea95 0f0c 	teq	r5, ip
 80129e2:	f47f af25 	bne.w	8012830 <__aeabi_dmul+0x234>
 80129e6:	4610      	mov	r0, r2
 80129e8:	4619      	mov	r1, r3
 80129ea:	e72c      	b.n	8012846 <__aeabi_dmul+0x24a>
 80129ec:	ea95 0f0c 	teq	r5, ip
 80129f0:	d106      	bne.n	8012a00 <__aeabi_ddiv+0x1b0>
 80129f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80129f6:	f43f aefd 	beq.w	80127f4 <__aeabi_dmul+0x1f8>
 80129fa:	4610      	mov	r0, r2
 80129fc:	4619      	mov	r1, r3
 80129fe:	e722      	b.n	8012846 <__aeabi_dmul+0x24a>
 8012a00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8012a04:	bf18      	it	ne
 8012a06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8012a0a:	f47f aec5 	bne.w	8012798 <__aeabi_dmul+0x19c>
 8012a0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8012a12:	f47f af0d 	bne.w	8012830 <__aeabi_dmul+0x234>
 8012a16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8012a1a:	f47f aeeb 	bne.w	80127f4 <__aeabi_dmul+0x1f8>
 8012a1e:	e712      	b.n	8012846 <__aeabi_dmul+0x24a>

08012a20 <__gedf2>:
 8012a20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012a24:	e006      	b.n	8012a34 <__cmpdf2+0x4>
 8012a26:	bf00      	nop

08012a28 <__ledf2>:
 8012a28:	f04f 0c01 	mov.w	ip, #1
 8012a2c:	e002      	b.n	8012a34 <__cmpdf2+0x4>
 8012a2e:	bf00      	nop

08012a30 <__cmpdf2>:
 8012a30:	f04f 0c01 	mov.w	ip, #1
 8012a34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8012a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8012a44:	bf18      	it	ne
 8012a46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8012a4a:	d01b      	beq.n	8012a84 <__cmpdf2+0x54>
 8012a4c:	b001      	add	sp, #4
 8012a4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8012a52:	bf0c      	ite	eq
 8012a54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8012a58:	ea91 0f03 	teqne	r1, r3
 8012a5c:	bf02      	ittt	eq
 8012a5e:	ea90 0f02 	teqeq	r0, r2
 8012a62:	2000      	moveq	r0, #0
 8012a64:	4770      	bxeq	lr
 8012a66:	f110 0f00 	cmn.w	r0, #0
 8012a6a:	ea91 0f03 	teq	r1, r3
 8012a6e:	bf58      	it	pl
 8012a70:	4299      	cmppl	r1, r3
 8012a72:	bf08      	it	eq
 8012a74:	4290      	cmpeq	r0, r2
 8012a76:	bf2c      	ite	cs
 8012a78:	17d8      	asrcs	r0, r3, #31
 8012a7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8012a7e:	f040 0001 	orr.w	r0, r0, #1
 8012a82:	4770      	bx	lr
 8012a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012a8c:	d102      	bne.n	8012a94 <__cmpdf2+0x64>
 8012a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8012a92:	d107      	bne.n	8012aa4 <__cmpdf2+0x74>
 8012a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8012a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8012a9c:	d1d6      	bne.n	8012a4c <__cmpdf2+0x1c>
 8012a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8012aa2:	d0d3      	beq.n	8012a4c <__cmpdf2+0x1c>
 8012aa4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop

08012aac <__aeabi_cdrcmple>:
 8012aac:	4684      	mov	ip, r0
 8012aae:	4610      	mov	r0, r2
 8012ab0:	4662      	mov	r2, ip
 8012ab2:	468c      	mov	ip, r1
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	4663      	mov	r3, ip
 8012ab8:	e000      	b.n	8012abc <__aeabi_cdcmpeq>
 8012aba:	bf00      	nop

08012abc <__aeabi_cdcmpeq>:
 8012abc:	b501      	push	{r0, lr}
 8012abe:	f7ff ffb7 	bl	8012a30 <__cmpdf2>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	bf48      	it	mi
 8012ac6:	f110 0f00 	cmnmi.w	r0, #0
 8012aca:	bd01      	pop	{r0, pc}

08012acc <__aeabi_dcmpeq>:
 8012acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012ad0:	f7ff fff4 	bl	8012abc <__aeabi_cdcmpeq>
 8012ad4:	bf0c      	ite	eq
 8012ad6:	2001      	moveq	r0, #1
 8012ad8:	2000      	movne	r0, #0
 8012ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8012ade:	bf00      	nop

08012ae0 <__aeabi_dcmplt>:
 8012ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012ae4:	f7ff ffea 	bl	8012abc <__aeabi_cdcmpeq>
 8012ae8:	bf34      	ite	cc
 8012aea:	2001      	movcc	r0, #1
 8012aec:	2000      	movcs	r0, #0
 8012aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8012af2:	bf00      	nop

08012af4 <__aeabi_dcmple>:
 8012af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012af8:	f7ff ffe0 	bl	8012abc <__aeabi_cdcmpeq>
 8012afc:	bf94      	ite	ls
 8012afe:	2001      	movls	r0, #1
 8012b00:	2000      	movhi	r0, #0
 8012b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8012b06:	bf00      	nop

08012b08 <__aeabi_dcmpge>:
 8012b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012b0c:	f7ff ffce 	bl	8012aac <__aeabi_cdrcmple>
 8012b10:	bf94      	ite	ls
 8012b12:	2001      	movls	r0, #1
 8012b14:	2000      	movhi	r0, #0
 8012b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8012b1a:	bf00      	nop

08012b1c <__aeabi_dcmpgt>:
 8012b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8012b20:	f7ff ffc4 	bl	8012aac <__aeabi_cdrcmple>
 8012b24:	bf34      	ite	cc
 8012b26:	2001      	movcc	r0, #1
 8012b28:	2000      	movcs	r0, #0
 8012b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8012b2e:	bf00      	nop

08012b30 <__aeabi_uldivmod>:
 8012b30:	b953      	cbnz	r3, 8012b48 <__aeabi_uldivmod+0x18>
 8012b32:	b94a      	cbnz	r2, 8012b48 <__aeabi_uldivmod+0x18>
 8012b34:	2900      	cmp	r1, #0
 8012b36:	bf08      	it	eq
 8012b38:	2800      	cmpeq	r0, #0
 8012b3a:	bf1c      	itt	ne
 8012b3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8012b40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8012b44:	f000 b974 	b.w	8012e30 <__aeabi_idiv0>
 8012b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8012b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8012b50:	f000 f806 	bl	8012b60 <__udivmoddi4>
 8012b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b5c:	b004      	add	sp, #16
 8012b5e:	4770      	bx	lr

08012b60 <__udivmoddi4>:
 8012b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b64:	9e08      	ldr	r6, [sp, #32]
 8012b66:	460d      	mov	r5, r1
 8012b68:	4604      	mov	r4, r0
 8012b6a:	4688      	mov	r8, r1
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d14d      	bne.n	8012c0c <__udivmoddi4+0xac>
 8012b70:	428a      	cmp	r2, r1
 8012b72:	4694      	mov	ip, r2
 8012b74:	d968      	bls.n	8012c48 <__udivmoddi4+0xe8>
 8012b76:	fab2 f282 	clz	r2, r2
 8012b7a:	b152      	cbz	r2, 8012b92 <__udivmoddi4+0x32>
 8012b7c:	fa01 f302 	lsl.w	r3, r1, r2
 8012b80:	f1c2 0120 	rsb	r1, r2, #32
 8012b84:	fa20 f101 	lsr.w	r1, r0, r1
 8012b88:	fa0c fc02 	lsl.w	ip, ip, r2
 8012b8c:	ea41 0803 	orr.w	r8, r1, r3
 8012b90:	4094      	lsls	r4, r2
 8012b92:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8012b96:	0c21      	lsrs	r1, r4, #16
 8012b98:	fbb8 fef5 	udiv	lr, r8, r5
 8012b9c:	fa1f f78c 	uxth.w	r7, ip
 8012ba0:	fb05 831e 	mls	r3, r5, lr, r8
 8012ba4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012ba8:	fb0e f107 	mul.w	r1, lr, r7
 8012bac:	4299      	cmp	r1, r3
 8012bae:	d90b      	bls.n	8012bc8 <__udivmoddi4+0x68>
 8012bb0:	eb1c 0303 	adds.w	r3, ip, r3
 8012bb4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8012bb8:	f080 811e 	bcs.w	8012df8 <__udivmoddi4+0x298>
 8012bbc:	4299      	cmp	r1, r3
 8012bbe:	f240 811b 	bls.w	8012df8 <__udivmoddi4+0x298>
 8012bc2:	f1ae 0e02 	sub.w	lr, lr, #2
 8012bc6:	4463      	add	r3, ip
 8012bc8:	1a5b      	subs	r3, r3, r1
 8012bca:	b2a4      	uxth	r4, r4
 8012bcc:	fbb3 f0f5 	udiv	r0, r3, r5
 8012bd0:	fb05 3310 	mls	r3, r5, r0, r3
 8012bd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8012bd8:	fb00 f707 	mul.w	r7, r0, r7
 8012bdc:	42a7      	cmp	r7, r4
 8012bde:	d90a      	bls.n	8012bf6 <__udivmoddi4+0x96>
 8012be0:	eb1c 0404 	adds.w	r4, ip, r4
 8012be4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012be8:	f080 8108 	bcs.w	8012dfc <__udivmoddi4+0x29c>
 8012bec:	42a7      	cmp	r7, r4
 8012bee:	f240 8105 	bls.w	8012dfc <__udivmoddi4+0x29c>
 8012bf2:	4464      	add	r4, ip
 8012bf4:	3802      	subs	r0, #2
 8012bf6:	1be4      	subs	r4, r4, r7
 8012bf8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8012bfc:	2100      	movs	r1, #0
 8012bfe:	b11e      	cbz	r6, 8012c08 <__udivmoddi4+0xa8>
 8012c00:	40d4      	lsrs	r4, r2
 8012c02:	2300      	movs	r3, #0
 8012c04:	e9c6 4300 	strd	r4, r3, [r6]
 8012c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0c:	428b      	cmp	r3, r1
 8012c0e:	d908      	bls.n	8012c22 <__udivmoddi4+0xc2>
 8012c10:	2e00      	cmp	r6, #0
 8012c12:	f000 80ee 	beq.w	8012df2 <__udivmoddi4+0x292>
 8012c16:	2100      	movs	r1, #0
 8012c18:	e9c6 0500 	strd	r0, r5, [r6]
 8012c1c:	4608      	mov	r0, r1
 8012c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c22:	fab3 f183 	clz	r1, r3
 8012c26:	2900      	cmp	r1, #0
 8012c28:	d14a      	bne.n	8012cc0 <__udivmoddi4+0x160>
 8012c2a:	42ab      	cmp	r3, r5
 8012c2c:	d302      	bcc.n	8012c34 <__udivmoddi4+0xd4>
 8012c2e:	4282      	cmp	r2, r0
 8012c30:	f200 80f9 	bhi.w	8012e26 <__udivmoddi4+0x2c6>
 8012c34:	1a84      	subs	r4, r0, r2
 8012c36:	eb65 0303 	sbc.w	r3, r5, r3
 8012c3a:	2001      	movs	r0, #1
 8012c3c:	4698      	mov	r8, r3
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	d0e2      	beq.n	8012c08 <__udivmoddi4+0xa8>
 8012c42:	e9c6 4800 	strd	r4, r8, [r6]
 8012c46:	e7df      	b.n	8012c08 <__udivmoddi4+0xa8>
 8012c48:	b902      	cbnz	r2, 8012c4c <__udivmoddi4+0xec>
 8012c4a:	deff      	udf	#255	; 0xff
 8012c4c:	fab2 f282 	clz	r2, r2
 8012c50:	2a00      	cmp	r2, #0
 8012c52:	f040 8091 	bne.w	8012d78 <__udivmoddi4+0x218>
 8012c56:	eba1 050c 	sub.w	r5, r1, ip
 8012c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8012c5e:	fa1f fe8c 	uxth.w	lr, ip
 8012c62:	2101      	movs	r1, #1
 8012c64:	fbb5 f3f7 	udiv	r3, r5, r7
 8012c68:	fb07 5013 	mls	r0, r7, r3, r5
 8012c6c:	0c25      	lsrs	r5, r4, #16
 8012c6e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8012c72:	fb0e f003 	mul.w	r0, lr, r3
 8012c76:	42a8      	cmp	r0, r5
 8012c78:	d908      	bls.n	8012c8c <__udivmoddi4+0x12c>
 8012c7a:	eb1c 0505 	adds.w	r5, ip, r5
 8012c7e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8012c82:	d202      	bcs.n	8012c8a <__udivmoddi4+0x12a>
 8012c84:	42a8      	cmp	r0, r5
 8012c86:	f200 80cb 	bhi.w	8012e20 <__udivmoddi4+0x2c0>
 8012c8a:	4643      	mov	r3, r8
 8012c8c:	1a2d      	subs	r5, r5, r0
 8012c8e:	b2a4      	uxth	r4, r4
 8012c90:	fbb5 f0f7 	udiv	r0, r5, r7
 8012c94:	fb07 5510 	mls	r5, r7, r0, r5
 8012c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8012c9c:	fb0e fe00 	mul.w	lr, lr, r0
 8012ca0:	45a6      	cmp	lr, r4
 8012ca2:	d908      	bls.n	8012cb6 <__udivmoddi4+0x156>
 8012ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8012ca8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8012cac:	d202      	bcs.n	8012cb4 <__udivmoddi4+0x154>
 8012cae:	45a6      	cmp	lr, r4
 8012cb0:	f200 80bb 	bhi.w	8012e2a <__udivmoddi4+0x2ca>
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	eba4 040e 	sub.w	r4, r4, lr
 8012cba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8012cbe:	e79e      	b.n	8012bfe <__udivmoddi4+0x9e>
 8012cc0:	f1c1 0720 	rsb	r7, r1, #32
 8012cc4:	408b      	lsls	r3, r1
 8012cc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8012cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8012cce:	fa20 f407 	lsr.w	r4, r0, r7
 8012cd2:	fa05 f301 	lsl.w	r3, r5, r1
 8012cd6:	431c      	orrs	r4, r3
 8012cd8:	40fd      	lsrs	r5, r7
 8012cda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8012cde:	fa00 f301 	lsl.w	r3, r0, r1
 8012ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8012ce6:	0c20      	lsrs	r0, r4, #16
 8012ce8:	fa1f fe8c 	uxth.w	lr, ip
 8012cec:	fb09 5518 	mls	r5, r9, r8, r5
 8012cf0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8012cf4:	fb08 f00e 	mul.w	r0, r8, lr
 8012cf8:	42a8      	cmp	r0, r5
 8012cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8012cfe:	d90b      	bls.n	8012d18 <__udivmoddi4+0x1b8>
 8012d00:	eb1c 0505 	adds.w	r5, ip, r5
 8012d04:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8012d08:	f080 8088 	bcs.w	8012e1c <__udivmoddi4+0x2bc>
 8012d0c:	42a8      	cmp	r0, r5
 8012d0e:	f240 8085 	bls.w	8012e1c <__udivmoddi4+0x2bc>
 8012d12:	f1a8 0802 	sub.w	r8, r8, #2
 8012d16:	4465      	add	r5, ip
 8012d18:	1a2d      	subs	r5, r5, r0
 8012d1a:	b2a4      	uxth	r4, r4
 8012d1c:	fbb5 f0f9 	udiv	r0, r5, r9
 8012d20:	fb09 5510 	mls	r5, r9, r0, r5
 8012d24:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8012d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8012d2c:	45ae      	cmp	lr, r5
 8012d2e:	d908      	bls.n	8012d42 <__udivmoddi4+0x1e2>
 8012d30:	eb1c 0505 	adds.w	r5, ip, r5
 8012d34:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8012d38:	d26c      	bcs.n	8012e14 <__udivmoddi4+0x2b4>
 8012d3a:	45ae      	cmp	lr, r5
 8012d3c:	d96a      	bls.n	8012e14 <__udivmoddi4+0x2b4>
 8012d3e:	3802      	subs	r0, #2
 8012d40:	4465      	add	r5, ip
 8012d42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8012d46:	fba0 9402 	umull	r9, r4, r0, r2
 8012d4a:	eba5 050e 	sub.w	r5, r5, lr
 8012d4e:	42a5      	cmp	r5, r4
 8012d50:	46c8      	mov	r8, r9
 8012d52:	46a6      	mov	lr, r4
 8012d54:	d356      	bcc.n	8012e04 <__udivmoddi4+0x2a4>
 8012d56:	d053      	beq.n	8012e00 <__udivmoddi4+0x2a0>
 8012d58:	b15e      	cbz	r6, 8012d72 <__udivmoddi4+0x212>
 8012d5a:	ebb3 0208 	subs.w	r2, r3, r8
 8012d5e:	eb65 050e 	sbc.w	r5, r5, lr
 8012d62:	fa05 f707 	lsl.w	r7, r5, r7
 8012d66:	fa22 f301 	lsr.w	r3, r2, r1
 8012d6a:	40cd      	lsrs	r5, r1
 8012d6c:	431f      	orrs	r7, r3
 8012d6e:	e9c6 7500 	strd	r7, r5, [r6]
 8012d72:	2100      	movs	r1, #0
 8012d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d78:	f1c2 0320 	rsb	r3, r2, #32
 8012d7c:	fa20 f103 	lsr.w	r1, r0, r3
 8012d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8012d84:	fa25 f303 	lsr.w	r3, r5, r3
 8012d88:	4095      	lsls	r5, r2
 8012d8a:	430d      	orrs	r5, r1
 8012d8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8012d90:	fa1f fe8c 	uxth.w	lr, ip
 8012d94:	fbb3 f1f7 	udiv	r1, r3, r7
 8012d98:	fb07 3011 	mls	r0, r7, r1, r3
 8012d9c:	0c2b      	lsrs	r3, r5, #16
 8012d9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012da2:	fb01 f00e 	mul.w	r0, r1, lr
 8012da6:	4298      	cmp	r0, r3
 8012da8:	fa04 f402 	lsl.w	r4, r4, r2
 8012dac:	d908      	bls.n	8012dc0 <__udivmoddi4+0x260>
 8012dae:	eb1c 0303 	adds.w	r3, ip, r3
 8012db2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8012db6:	d22f      	bcs.n	8012e18 <__udivmoddi4+0x2b8>
 8012db8:	4298      	cmp	r0, r3
 8012dba:	d92d      	bls.n	8012e18 <__udivmoddi4+0x2b8>
 8012dbc:	3902      	subs	r1, #2
 8012dbe:	4463      	add	r3, ip
 8012dc0:	1a1b      	subs	r3, r3, r0
 8012dc2:	b2ad      	uxth	r5, r5
 8012dc4:	fbb3 f0f7 	udiv	r0, r3, r7
 8012dc8:	fb07 3310 	mls	r3, r7, r0, r3
 8012dcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8012dd0:	fb00 f30e 	mul.w	r3, r0, lr
 8012dd4:	42ab      	cmp	r3, r5
 8012dd6:	d908      	bls.n	8012dea <__udivmoddi4+0x28a>
 8012dd8:	eb1c 0505 	adds.w	r5, ip, r5
 8012ddc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8012de0:	d216      	bcs.n	8012e10 <__udivmoddi4+0x2b0>
 8012de2:	42ab      	cmp	r3, r5
 8012de4:	d914      	bls.n	8012e10 <__udivmoddi4+0x2b0>
 8012de6:	3802      	subs	r0, #2
 8012de8:	4465      	add	r5, ip
 8012dea:	1aed      	subs	r5, r5, r3
 8012dec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8012df0:	e738      	b.n	8012c64 <__udivmoddi4+0x104>
 8012df2:	4631      	mov	r1, r6
 8012df4:	4630      	mov	r0, r6
 8012df6:	e707      	b.n	8012c08 <__udivmoddi4+0xa8>
 8012df8:	4686      	mov	lr, r0
 8012dfa:	e6e5      	b.n	8012bc8 <__udivmoddi4+0x68>
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	e6fa      	b.n	8012bf6 <__udivmoddi4+0x96>
 8012e00:	454b      	cmp	r3, r9
 8012e02:	d2a9      	bcs.n	8012d58 <__udivmoddi4+0x1f8>
 8012e04:	ebb9 0802 	subs.w	r8, r9, r2
 8012e08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8012e0c:	3801      	subs	r0, #1
 8012e0e:	e7a3      	b.n	8012d58 <__udivmoddi4+0x1f8>
 8012e10:	4640      	mov	r0, r8
 8012e12:	e7ea      	b.n	8012dea <__udivmoddi4+0x28a>
 8012e14:	4620      	mov	r0, r4
 8012e16:	e794      	b.n	8012d42 <__udivmoddi4+0x1e2>
 8012e18:	4641      	mov	r1, r8
 8012e1a:	e7d1      	b.n	8012dc0 <__udivmoddi4+0x260>
 8012e1c:	46d0      	mov	r8, sl
 8012e1e:	e77b      	b.n	8012d18 <__udivmoddi4+0x1b8>
 8012e20:	3b02      	subs	r3, #2
 8012e22:	4465      	add	r5, ip
 8012e24:	e732      	b.n	8012c8c <__udivmoddi4+0x12c>
 8012e26:	4608      	mov	r0, r1
 8012e28:	e709      	b.n	8012c3e <__udivmoddi4+0xde>
 8012e2a:	4464      	add	r4, ip
 8012e2c:	3802      	subs	r0, #2
 8012e2e:	e742      	b.n	8012cb6 <__udivmoddi4+0x156>

08012e30 <__aeabi_idiv0>:
 8012e30:	4770      	bx	lr
 8012e32:	bf00      	nop

08012e34 <__sflush_r>:
 8012e34:	898a      	ldrh	r2, [r1, #12]
 8012e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e38:	4605      	mov	r5, r0
 8012e3a:	0710      	lsls	r0, r2, #28
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	d457      	bmi.n	8012ef0 <__sflush_r+0xbc>
 8012e40:	684b      	ldr	r3, [r1, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	dc04      	bgt.n	8012e50 <__sflush_r+0x1c>
 8012e46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	dc01      	bgt.n	8012e50 <__sflush_r+0x1c>
 8012e4c:	2000      	movs	r0, #0
 8012e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e52:	2e00      	cmp	r6, #0
 8012e54:	d0fa      	beq.n	8012e4c <__sflush_r+0x18>
 8012e56:	2300      	movs	r3, #0
 8012e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e5c:	682f      	ldr	r7, [r5, #0]
 8012e5e:	602b      	str	r3, [r5, #0]
 8012e60:	d032      	beq.n	8012ec8 <__sflush_r+0x94>
 8012e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e64:	89a3      	ldrh	r3, [r4, #12]
 8012e66:	075a      	lsls	r2, r3, #29
 8012e68:	d505      	bpl.n	8012e76 <__sflush_r+0x42>
 8012e6a:	6863      	ldr	r3, [r4, #4]
 8012e6c:	1ac0      	subs	r0, r0, r3
 8012e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e70:	b10b      	cbz	r3, 8012e76 <__sflush_r+0x42>
 8012e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e74:	1ac0      	subs	r0, r0, r3
 8012e76:	2300      	movs	r3, #0
 8012e78:	4602      	mov	r2, r0
 8012e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e7c:	6a21      	ldr	r1, [r4, #32]
 8012e7e:	4628      	mov	r0, r5
 8012e80:	47b0      	blx	r6
 8012e82:	1c43      	adds	r3, r0, #1
 8012e84:	89a3      	ldrh	r3, [r4, #12]
 8012e86:	d106      	bne.n	8012e96 <__sflush_r+0x62>
 8012e88:	6829      	ldr	r1, [r5, #0]
 8012e8a:	291d      	cmp	r1, #29
 8012e8c:	d82c      	bhi.n	8012ee8 <__sflush_r+0xb4>
 8012e8e:	4a29      	ldr	r2, [pc, #164]	; (8012f34 <__sflush_r+0x100>)
 8012e90:	40ca      	lsrs	r2, r1
 8012e92:	07d6      	lsls	r6, r2, #31
 8012e94:	d528      	bpl.n	8012ee8 <__sflush_r+0xb4>
 8012e96:	2200      	movs	r2, #0
 8012e98:	6062      	str	r2, [r4, #4]
 8012e9a:	04d9      	lsls	r1, r3, #19
 8012e9c:	6922      	ldr	r2, [r4, #16]
 8012e9e:	6022      	str	r2, [r4, #0]
 8012ea0:	d504      	bpl.n	8012eac <__sflush_r+0x78>
 8012ea2:	1c42      	adds	r2, r0, #1
 8012ea4:	d101      	bne.n	8012eaa <__sflush_r+0x76>
 8012ea6:	682b      	ldr	r3, [r5, #0]
 8012ea8:	b903      	cbnz	r3, 8012eac <__sflush_r+0x78>
 8012eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8012eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eae:	602f      	str	r7, [r5, #0]
 8012eb0:	2900      	cmp	r1, #0
 8012eb2:	d0cb      	beq.n	8012e4c <__sflush_r+0x18>
 8012eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eb8:	4299      	cmp	r1, r3
 8012eba:	d002      	beq.n	8012ec2 <__sflush_r+0x8e>
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f000 f9af 	bl	8013220 <_free_r>
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8012ec6:	e7c2      	b.n	8012e4e <__sflush_r+0x1a>
 8012ec8:	6a21      	ldr	r1, [r4, #32]
 8012eca:	2301      	movs	r3, #1
 8012ecc:	4628      	mov	r0, r5
 8012ece:	47b0      	blx	r6
 8012ed0:	1c41      	adds	r1, r0, #1
 8012ed2:	d1c7      	bne.n	8012e64 <__sflush_r+0x30>
 8012ed4:	682b      	ldr	r3, [r5, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d0c4      	beq.n	8012e64 <__sflush_r+0x30>
 8012eda:	2b1d      	cmp	r3, #29
 8012edc:	d001      	beq.n	8012ee2 <__sflush_r+0xae>
 8012ede:	2b16      	cmp	r3, #22
 8012ee0:	d101      	bne.n	8012ee6 <__sflush_r+0xb2>
 8012ee2:	602f      	str	r7, [r5, #0]
 8012ee4:	e7b2      	b.n	8012e4c <__sflush_r+0x18>
 8012ee6:	89a3      	ldrh	r3, [r4, #12]
 8012ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eec:	81a3      	strh	r3, [r4, #12]
 8012eee:	e7ae      	b.n	8012e4e <__sflush_r+0x1a>
 8012ef0:	690f      	ldr	r7, [r1, #16]
 8012ef2:	2f00      	cmp	r7, #0
 8012ef4:	d0aa      	beq.n	8012e4c <__sflush_r+0x18>
 8012ef6:	0793      	lsls	r3, r2, #30
 8012ef8:	680e      	ldr	r6, [r1, #0]
 8012efa:	bf08      	it	eq
 8012efc:	694b      	ldreq	r3, [r1, #20]
 8012efe:	600f      	str	r7, [r1, #0]
 8012f00:	bf18      	it	ne
 8012f02:	2300      	movne	r3, #0
 8012f04:	1bf6      	subs	r6, r6, r7
 8012f06:	608b      	str	r3, [r1, #8]
 8012f08:	2e00      	cmp	r6, #0
 8012f0a:	dd9f      	ble.n	8012e4c <__sflush_r+0x18>
 8012f0c:	6a21      	ldr	r1, [r4, #32]
 8012f0e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8012f12:	4633      	mov	r3, r6
 8012f14:	463a      	mov	r2, r7
 8012f16:	4628      	mov	r0, r5
 8012f18:	47e0      	blx	ip
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	dc06      	bgt.n	8012f2c <__sflush_r+0xf8>
 8012f1e:	89a3      	ldrh	r3, [r4, #12]
 8012f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f24:	81a3      	strh	r3, [r4, #12]
 8012f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f2a:	e790      	b.n	8012e4e <__sflush_r+0x1a>
 8012f2c:	4407      	add	r7, r0
 8012f2e:	1a36      	subs	r6, r6, r0
 8012f30:	e7ea      	b.n	8012f08 <__sflush_r+0xd4>
 8012f32:	bf00      	nop
 8012f34:	20400001 	.word	0x20400001

08012f38 <_fflush_r>:
 8012f38:	b538      	push	{r3, r4, r5, lr}
 8012f3a:	690b      	ldr	r3, [r1, #16]
 8012f3c:	4605      	mov	r5, r0
 8012f3e:	460c      	mov	r4, r1
 8012f40:	b913      	cbnz	r3, 8012f48 <_fflush_r+0x10>
 8012f42:	2500      	movs	r5, #0
 8012f44:	4628      	mov	r0, r5
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	b118      	cbz	r0, 8012f52 <_fflush_r+0x1a>
 8012f4a:	6983      	ldr	r3, [r0, #24]
 8012f4c:	b90b      	cbnz	r3, 8012f52 <_fflush_r+0x1a>
 8012f4e:	f000 f887 	bl	8013060 <__sinit>
 8012f52:	4b14      	ldr	r3, [pc, #80]	; (8012fa4 <_fflush_r+0x6c>)
 8012f54:	429c      	cmp	r4, r3
 8012f56:	d11b      	bne.n	8012f90 <_fflush_r+0x58>
 8012f58:	686c      	ldr	r4, [r5, #4]
 8012f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d0ef      	beq.n	8012f42 <_fflush_r+0xa>
 8012f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f64:	07d0      	lsls	r0, r2, #31
 8012f66:	d404      	bmi.n	8012f72 <_fflush_r+0x3a>
 8012f68:	0599      	lsls	r1, r3, #22
 8012f6a:	d402      	bmi.n	8012f72 <_fflush_r+0x3a>
 8012f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f6e:	f000 f915 	bl	801319c <__retarget_lock_acquire_recursive>
 8012f72:	4628      	mov	r0, r5
 8012f74:	4621      	mov	r1, r4
 8012f76:	f7ff ff5d 	bl	8012e34 <__sflush_r>
 8012f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f7c:	07da      	lsls	r2, r3, #31
 8012f7e:	4605      	mov	r5, r0
 8012f80:	d4e0      	bmi.n	8012f44 <_fflush_r+0xc>
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	059b      	lsls	r3, r3, #22
 8012f86:	d4dd      	bmi.n	8012f44 <_fflush_r+0xc>
 8012f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f8a:	f000 f908 	bl	801319e <__retarget_lock_release_recursive>
 8012f8e:	e7d9      	b.n	8012f44 <_fflush_r+0xc>
 8012f90:	4b05      	ldr	r3, [pc, #20]	; (8012fa8 <_fflush_r+0x70>)
 8012f92:	429c      	cmp	r4, r3
 8012f94:	d101      	bne.n	8012f9a <_fflush_r+0x62>
 8012f96:	68ac      	ldr	r4, [r5, #8]
 8012f98:	e7df      	b.n	8012f5a <_fflush_r+0x22>
 8012f9a:	4b04      	ldr	r3, [pc, #16]	; (8012fac <_fflush_r+0x74>)
 8012f9c:	429c      	cmp	r4, r3
 8012f9e:	bf08      	it	eq
 8012fa0:	68ec      	ldreq	r4, [r5, #12]
 8012fa2:	e7da      	b.n	8012f5a <_fflush_r+0x22>
 8012fa4:	0801f9e4 	.word	0x0801f9e4
 8012fa8:	0801fa04 	.word	0x0801fa04
 8012fac:	0801f9c4 	.word	0x0801f9c4

08012fb0 <std>:
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	b510      	push	{r4, lr}
 8012fb4:	4604      	mov	r4, r0
 8012fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8012fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fbe:	6083      	str	r3, [r0, #8]
 8012fc0:	8181      	strh	r1, [r0, #12]
 8012fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8012fc4:	81c2      	strh	r2, [r0, #14]
 8012fc6:	6183      	str	r3, [r0, #24]
 8012fc8:	4619      	mov	r1, r3
 8012fca:	2208      	movs	r2, #8
 8012fcc:	305c      	adds	r0, #92	; 0x5c
 8012fce:	f000 f91f 	bl	8013210 <memset>
 8012fd2:	4b05      	ldr	r3, [pc, #20]	; (8012fe8 <std+0x38>)
 8012fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8012fd6:	4b05      	ldr	r3, [pc, #20]	; (8012fec <std+0x3c>)
 8012fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012fda:	4b05      	ldr	r3, [pc, #20]	; (8012ff0 <std+0x40>)
 8012fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fde:	4b05      	ldr	r3, [pc, #20]	; (8012ff4 <std+0x44>)
 8012fe0:	6224      	str	r4, [r4, #32]
 8012fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8012fe4:	bd10      	pop	{r4, pc}
 8012fe6:	bf00      	nop
 8012fe8:	08013495 	.word	0x08013495
 8012fec:	080134b7 	.word	0x080134b7
 8012ff0:	080134ef 	.word	0x080134ef
 8012ff4:	08013513 	.word	0x08013513

08012ff8 <_cleanup_r>:
 8012ff8:	4901      	ldr	r1, [pc, #4]	; (8013000 <_cleanup_r+0x8>)
 8012ffa:	f000 b8af 	b.w	801315c <_fwalk_reent>
 8012ffe:	bf00      	nop
 8013000:	08012f39 	.word	0x08012f39

08013004 <__sfmoreglue>:
 8013004:	b570      	push	{r4, r5, r6, lr}
 8013006:	2268      	movs	r2, #104	; 0x68
 8013008:	1e4d      	subs	r5, r1, #1
 801300a:	4355      	muls	r5, r2
 801300c:	460e      	mov	r6, r1
 801300e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013012:	f000 f96f 	bl	80132f4 <_malloc_r>
 8013016:	4604      	mov	r4, r0
 8013018:	b140      	cbz	r0, 801302c <__sfmoreglue+0x28>
 801301a:	2100      	movs	r1, #0
 801301c:	e9c0 1600 	strd	r1, r6, [r0]
 8013020:	300c      	adds	r0, #12
 8013022:	60a0      	str	r0, [r4, #8]
 8013024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013028:	f000 f8f2 	bl	8013210 <memset>
 801302c:	4620      	mov	r0, r4
 801302e:	bd70      	pop	{r4, r5, r6, pc}

08013030 <__sfp_lock_acquire>:
 8013030:	4801      	ldr	r0, [pc, #4]	; (8013038 <__sfp_lock_acquire+0x8>)
 8013032:	f000 b8b3 	b.w	801319c <__retarget_lock_acquire_recursive>
 8013036:	bf00      	nop
 8013038:	20000199 	.word	0x20000199

0801303c <__sfp_lock_release>:
 801303c:	4801      	ldr	r0, [pc, #4]	; (8013044 <__sfp_lock_release+0x8>)
 801303e:	f000 b8ae 	b.w	801319e <__retarget_lock_release_recursive>
 8013042:	bf00      	nop
 8013044:	20000199 	.word	0x20000199

08013048 <__sinit_lock_acquire>:
 8013048:	4801      	ldr	r0, [pc, #4]	; (8013050 <__sinit_lock_acquire+0x8>)
 801304a:	f000 b8a7 	b.w	801319c <__retarget_lock_acquire_recursive>
 801304e:	bf00      	nop
 8013050:	2000019a 	.word	0x2000019a

08013054 <__sinit_lock_release>:
 8013054:	4801      	ldr	r0, [pc, #4]	; (801305c <__sinit_lock_release+0x8>)
 8013056:	f000 b8a2 	b.w	801319e <__retarget_lock_release_recursive>
 801305a:	bf00      	nop
 801305c:	2000019a 	.word	0x2000019a

08013060 <__sinit>:
 8013060:	b510      	push	{r4, lr}
 8013062:	4604      	mov	r4, r0
 8013064:	f7ff fff0 	bl	8013048 <__sinit_lock_acquire>
 8013068:	69a3      	ldr	r3, [r4, #24]
 801306a:	b11b      	cbz	r3, 8013074 <__sinit+0x14>
 801306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013070:	f7ff bff0 	b.w	8013054 <__sinit_lock_release>
 8013074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013078:	6523      	str	r3, [r4, #80]	; 0x50
 801307a:	4b13      	ldr	r3, [pc, #76]	; (80130c8 <__sinit+0x68>)
 801307c:	4a13      	ldr	r2, [pc, #76]	; (80130cc <__sinit+0x6c>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	62a2      	str	r2, [r4, #40]	; 0x28
 8013082:	42a3      	cmp	r3, r4
 8013084:	bf04      	itt	eq
 8013086:	2301      	moveq	r3, #1
 8013088:	61a3      	streq	r3, [r4, #24]
 801308a:	4620      	mov	r0, r4
 801308c:	f000 f820 	bl	80130d0 <__sfp>
 8013090:	6060      	str	r0, [r4, #4]
 8013092:	4620      	mov	r0, r4
 8013094:	f000 f81c 	bl	80130d0 <__sfp>
 8013098:	60a0      	str	r0, [r4, #8]
 801309a:	4620      	mov	r0, r4
 801309c:	f000 f818 	bl	80130d0 <__sfp>
 80130a0:	2200      	movs	r2, #0
 80130a2:	60e0      	str	r0, [r4, #12]
 80130a4:	2104      	movs	r1, #4
 80130a6:	6860      	ldr	r0, [r4, #4]
 80130a8:	f7ff ff82 	bl	8012fb0 <std>
 80130ac:	68a0      	ldr	r0, [r4, #8]
 80130ae:	2201      	movs	r2, #1
 80130b0:	2109      	movs	r1, #9
 80130b2:	f7ff ff7d 	bl	8012fb0 <std>
 80130b6:	68e0      	ldr	r0, [r4, #12]
 80130b8:	2202      	movs	r2, #2
 80130ba:	2112      	movs	r1, #18
 80130bc:	f7ff ff78 	bl	8012fb0 <std>
 80130c0:	2301      	movs	r3, #1
 80130c2:	61a3      	str	r3, [r4, #24]
 80130c4:	e7d2      	b.n	801306c <__sinit+0xc>
 80130c6:	bf00      	nop
 80130c8:	0801fa24 	.word	0x0801fa24
 80130cc:	08012ff9 	.word	0x08012ff9

080130d0 <__sfp>:
 80130d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130d2:	4607      	mov	r7, r0
 80130d4:	f7ff ffac 	bl	8013030 <__sfp_lock_acquire>
 80130d8:	4b1e      	ldr	r3, [pc, #120]	; (8013154 <__sfp+0x84>)
 80130da:	681e      	ldr	r6, [r3, #0]
 80130dc:	69b3      	ldr	r3, [r6, #24]
 80130de:	b913      	cbnz	r3, 80130e6 <__sfp+0x16>
 80130e0:	4630      	mov	r0, r6
 80130e2:	f7ff ffbd 	bl	8013060 <__sinit>
 80130e6:	3648      	adds	r6, #72	; 0x48
 80130e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80130ec:	3b01      	subs	r3, #1
 80130ee:	d503      	bpl.n	80130f8 <__sfp+0x28>
 80130f0:	6833      	ldr	r3, [r6, #0]
 80130f2:	b30b      	cbz	r3, 8013138 <__sfp+0x68>
 80130f4:	6836      	ldr	r6, [r6, #0]
 80130f6:	e7f7      	b.n	80130e8 <__sfp+0x18>
 80130f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80130fc:	b9d5      	cbnz	r5, 8013134 <__sfp+0x64>
 80130fe:	4b16      	ldr	r3, [pc, #88]	; (8013158 <__sfp+0x88>)
 8013100:	60e3      	str	r3, [r4, #12]
 8013102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013106:	6665      	str	r5, [r4, #100]	; 0x64
 8013108:	f000 f847 	bl	801319a <__retarget_lock_init_recursive>
 801310c:	f7ff ff96 	bl	801303c <__sfp_lock_release>
 8013110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013118:	6025      	str	r5, [r4, #0]
 801311a:	61a5      	str	r5, [r4, #24]
 801311c:	2208      	movs	r2, #8
 801311e:	4629      	mov	r1, r5
 8013120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013124:	f000 f874 	bl	8013210 <memset>
 8013128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801312c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013130:	4620      	mov	r0, r4
 8013132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013134:	3468      	adds	r4, #104	; 0x68
 8013136:	e7d9      	b.n	80130ec <__sfp+0x1c>
 8013138:	2104      	movs	r1, #4
 801313a:	4638      	mov	r0, r7
 801313c:	f7ff ff62 	bl	8013004 <__sfmoreglue>
 8013140:	4604      	mov	r4, r0
 8013142:	6030      	str	r0, [r6, #0]
 8013144:	2800      	cmp	r0, #0
 8013146:	d1d5      	bne.n	80130f4 <__sfp+0x24>
 8013148:	f7ff ff78 	bl	801303c <__sfp_lock_release>
 801314c:	230c      	movs	r3, #12
 801314e:	603b      	str	r3, [r7, #0]
 8013150:	e7ee      	b.n	8013130 <__sfp+0x60>
 8013152:	bf00      	nop
 8013154:	0801fa24 	.word	0x0801fa24
 8013158:	ffff0001 	.word	0xffff0001

0801315c <_fwalk_reent>:
 801315c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013160:	4606      	mov	r6, r0
 8013162:	4688      	mov	r8, r1
 8013164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013168:	2700      	movs	r7, #0
 801316a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801316e:	f1b9 0901 	subs.w	r9, r9, #1
 8013172:	d505      	bpl.n	8013180 <_fwalk_reent+0x24>
 8013174:	6824      	ldr	r4, [r4, #0]
 8013176:	2c00      	cmp	r4, #0
 8013178:	d1f7      	bne.n	801316a <_fwalk_reent+0xe>
 801317a:	4638      	mov	r0, r7
 801317c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013180:	89ab      	ldrh	r3, [r5, #12]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d907      	bls.n	8013196 <_fwalk_reent+0x3a>
 8013186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801318a:	3301      	adds	r3, #1
 801318c:	d003      	beq.n	8013196 <_fwalk_reent+0x3a>
 801318e:	4629      	mov	r1, r5
 8013190:	4630      	mov	r0, r6
 8013192:	47c0      	blx	r8
 8013194:	4307      	orrs	r7, r0
 8013196:	3568      	adds	r5, #104	; 0x68
 8013198:	e7e9      	b.n	801316e <_fwalk_reent+0x12>

0801319a <__retarget_lock_init_recursive>:
 801319a:	4770      	bx	lr

0801319c <__retarget_lock_acquire_recursive>:
 801319c:	4770      	bx	lr

0801319e <__retarget_lock_release_recursive>:
 801319e:	4770      	bx	lr

080131a0 <malloc>:
 80131a0:	4b02      	ldr	r3, [pc, #8]	; (80131ac <malloc+0xc>)
 80131a2:	4601      	mov	r1, r0
 80131a4:	6818      	ldr	r0, [r3, #0]
 80131a6:	f000 b8a5 	b.w	80132f4 <_malloc_r>
 80131aa:	bf00      	nop
 80131ac:	200000dc 	.word	0x200000dc

080131b0 <free>:
 80131b0:	4b02      	ldr	r3, [pc, #8]	; (80131bc <free+0xc>)
 80131b2:	4601      	mov	r1, r0
 80131b4:	6818      	ldr	r0, [r3, #0]
 80131b6:	f000 b833 	b.w	8013220 <_free_r>
 80131ba:	bf00      	nop
 80131bc:	200000dc 	.word	0x200000dc

080131c0 <memcpy>:
 80131c0:	440a      	add	r2, r1
 80131c2:	4291      	cmp	r1, r2
 80131c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80131c8:	d100      	bne.n	80131cc <memcpy+0xc>
 80131ca:	4770      	bx	lr
 80131cc:	b510      	push	{r4, lr}
 80131ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131d6:	4291      	cmp	r1, r2
 80131d8:	d1f9      	bne.n	80131ce <memcpy+0xe>
 80131da:	bd10      	pop	{r4, pc}

080131dc <memmove>:
 80131dc:	4288      	cmp	r0, r1
 80131de:	b510      	push	{r4, lr}
 80131e0:	eb01 0402 	add.w	r4, r1, r2
 80131e4:	d902      	bls.n	80131ec <memmove+0x10>
 80131e6:	4284      	cmp	r4, r0
 80131e8:	4623      	mov	r3, r4
 80131ea:	d807      	bhi.n	80131fc <memmove+0x20>
 80131ec:	1e43      	subs	r3, r0, #1
 80131ee:	42a1      	cmp	r1, r4
 80131f0:	d008      	beq.n	8013204 <memmove+0x28>
 80131f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80131fa:	e7f8      	b.n	80131ee <memmove+0x12>
 80131fc:	4402      	add	r2, r0
 80131fe:	4601      	mov	r1, r0
 8013200:	428a      	cmp	r2, r1
 8013202:	d100      	bne.n	8013206 <memmove+0x2a>
 8013204:	bd10      	pop	{r4, pc}
 8013206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801320a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801320e:	e7f7      	b.n	8013200 <memmove+0x24>

08013210 <memset>:
 8013210:	4402      	add	r2, r0
 8013212:	4603      	mov	r3, r0
 8013214:	4293      	cmp	r3, r2
 8013216:	d100      	bne.n	801321a <memset+0xa>
 8013218:	4770      	bx	lr
 801321a:	f803 1b01 	strb.w	r1, [r3], #1
 801321e:	e7f9      	b.n	8013214 <memset+0x4>

08013220 <_free_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4605      	mov	r5, r0
 8013224:	2900      	cmp	r1, #0
 8013226:	d041      	beq.n	80132ac <_free_r+0x8c>
 8013228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801322c:	1f0c      	subs	r4, r1, #4
 801322e:	2b00      	cmp	r3, #0
 8013230:	bfb8      	it	lt
 8013232:	18e4      	addlt	r4, r4, r3
 8013234:	f000 f9ae 	bl	8013594 <__malloc_lock>
 8013238:	4a1d      	ldr	r2, [pc, #116]	; (80132b0 <_free_r+0x90>)
 801323a:	6813      	ldr	r3, [r2, #0]
 801323c:	b933      	cbnz	r3, 801324c <_free_r+0x2c>
 801323e:	6063      	str	r3, [r4, #4]
 8013240:	6014      	str	r4, [r2, #0]
 8013242:	4628      	mov	r0, r5
 8013244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013248:	f000 b9aa 	b.w	80135a0 <__malloc_unlock>
 801324c:	42a3      	cmp	r3, r4
 801324e:	d908      	bls.n	8013262 <_free_r+0x42>
 8013250:	6820      	ldr	r0, [r4, #0]
 8013252:	1821      	adds	r1, r4, r0
 8013254:	428b      	cmp	r3, r1
 8013256:	bf01      	itttt	eq
 8013258:	6819      	ldreq	r1, [r3, #0]
 801325a:	685b      	ldreq	r3, [r3, #4]
 801325c:	1809      	addeq	r1, r1, r0
 801325e:	6021      	streq	r1, [r4, #0]
 8013260:	e7ed      	b.n	801323e <_free_r+0x1e>
 8013262:	461a      	mov	r2, r3
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	b10b      	cbz	r3, 801326c <_free_r+0x4c>
 8013268:	42a3      	cmp	r3, r4
 801326a:	d9fa      	bls.n	8013262 <_free_r+0x42>
 801326c:	6811      	ldr	r1, [r2, #0]
 801326e:	1850      	adds	r0, r2, r1
 8013270:	42a0      	cmp	r0, r4
 8013272:	d10b      	bne.n	801328c <_free_r+0x6c>
 8013274:	6820      	ldr	r0, [r4, #0]
 8013276:	4401      	add	r1, r0
 8013278:	1850      	adds	r0, r2, r1
 801327a:	4283      	cmp	r3, r0
 801327c:	6011      	str	r1, [r2, #0]
 801327e:	d1e0      	bne.n	8013242 <_free_r+0x22>
 8013280:	6818      	ldr	r0, [r3, #0]
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	6053      	str	r3, [r2, #4]
 8013286:	4401      	add	r1, r0
 8013288:	6011      	str	r1, [r2, #0]
 801328a:	e7da      	b.n	8013242 <_free_r+0x22>
 801328c:	d902      	bls.n	8013294 <_free_r+0x74>
 801328e:	230c      	movs	r3, #12
 8013290:	602b      	str	r3, [r5, #0]
 8013292:	e7d6      	b.n	8013242 <_free_r+0x22>
 8013294:	6820      	ldr	r0, [r4, #0]
 8013296:	1821      	adds	r1, r4, r0
 8013298:	428b      	cmp	r3, r1
 801329a:	bf04      	itt	eq
 801329c:	6819      	ldreq	r1, [r3, #0]
 801329e:	685b      	ldreq	r3, [r3, #4]
 80132a0:	6063      	str	r3, [r4, #4]
 80132a2:	bf04      	itt	eq
 80132a4:	1809      	addeq	r1, r1, r0
 80132a6:	6021      	streq	r1, [r4, #0]
 80132a8:	6054      	str	r4, [r2, #4]
 80132aa:	e7ca      	b.n	8013242 <_free_r+0x22>
 80132ac:	bd38      	pop	{r3, r4, r5, pc}
 80132ae:	bf00      	nop
 80132b0:	2000019c 	.word	0x2000019c

080132b4 <sbrk_aligned>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	4e0e      	ldr	r6, [pc, #56]	; (80132f0 <sbrk_aligned+0x3c>)
 80132b8:	460c      	mov	r4, r1
 80132ba:	6831      	ldr	r1, [r6, #0]
 80132bc:	4605      	mov	r5, r0
 80132be:	b911      	cbnz	r1, 80132c6 <sbrk_aligned+0x12>
 80132c0:	f000 f8a4 	bl	801340c <_sbrk_r>
 80132c4:	6030      	str	r0, [r6, #0]
 80132c6:	4621      	mov	r1, r4
 80132c8:	4628      	mov	r0, r5
 80132ca:	f000 f89f 	bl	801340c <_sbrk_r>
 80132ce:	1c43      	adds	r3, r0, #1
 80132d0:	d00a      	beq.n	80132e8 <sbrk_aligned+0x34>
 80132d2:	1cc4      	adds	r4, r0, #3
 80132d4:	f024 0403 	bic.w	r4, r4, #3
 80132d8:	42a0      	cmp	r0, r4
 80132da:	d007      	beq.n	80132ec <sbrk_aligned+0x38>
 80132dc:	1a21      	subs	r1, r4, r0
 80132de:	4628      	mov	r0, r5
 80132e0:	f000 f894 	bl	801340c <_sbrk_r>
 80132e4:	3001      	adds	r0, #1
 80132e6:	d101      	bne.n	80132ec <sbrk_aligned+0x38>
 80132e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80132ec:	4620      	mov	r0, r4
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	200001a0 	.word	0x200001a0

080132f4 <_malloc_r>:
 80132f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f8:	1ccd      	adds	r5, r1, #3
 80132fa:	f025 0503 	bic.w	r5, r5, #3
 80132fe:	3508      	adds	r5, #8
 8013300:	2d0c      	cmp	r5, #12
 8013302:	bf38      	it	cc
 8013304:	250c      	movcc	r5, #12
 8013306:	2d00      	cmp	r5, #0
 8013308:	4607      	mov	r7, r0
 801330a:	db01      	blt.n	8013310 <_malloc_r+0x1c>
 801330c:	42a9      	cmp	r1, r5
 801330e:	d905      	bls.n	801331c <_malloc_r+0x28>
 8013310:	230c      	movs	r3, #12
 8013312:	603b      	str	r3, [r7, #0]
 8013314:	2600      	movs	r6, #0
 8013316:	4630      	mov	r0, r6
 8013318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801331c:	4e2e      	ldr	r6, [pc, #184]	; (80133d8 <_malloc_r+0xe4>)
 801331e:	f000 f939 	bl	8013594 <__malloc_lock>
 8013322:	6833      	ldr	r3, [r6, #0]
 8013324:	461c      	mov	r4, r3
 8013326:	bb34      	cbnz	r4, 8013376 <_malloc_r+0x82>
 8013328:	4629      	mov	r1, r5
 801332a:	4638      	mov	r0, r7
 801332c:	f7ff ffc2 	bl	80132b4 <sbrk_aligned>
 8013330:	1c43      	adds	r3, r0, #1
 8013332:	4604      	mov	r4, r0
 8013334:	d14d      	bne.n	80133d2 <_malloc_r+0xde>
 8013336:	6834      	ldr	r4, [r6, #0]
 8013338:	4626      	mov	r6, r4
 801333a:	2e00      	cmp	r6, #0
 801333c:	d140      	bne.n	80133c0 <_malloc_r+0xcc>
 801333e:	6823      	ldr	r3, [r4, #0]
 8013340:	4631      	mov	r1, r6
 8013342:	4638      	mov	r0, r7
 8013344:	eb04 0803 	add.w	r8, r4, r3
 8013348:	f000 f860 	bl	801340c <_sbrk_r>
 801334c:	4580      	cmp	r8, r0
 801334e:	d13a      	bne.n	80133c6 <_malloc_r+0xd2>
 8013350:	6821      	ldr	r1, [r4, #0]
 8013352:	3503      	adds	r5, #3
 8013354:	1a6d      	subs	r5, r5, r1
 8013356:	f025 0503 	bic.w	r5, r5, #3
 801335a:	3508      	adds	r5, #8
 801335c:	2d0c      	cmp	r5, #12
 801335e:	bf38      	it	cc
 8013360:	250c      	movcc	r5, #12
 8013362:	4629      	mov	r1, r5
 8013364:	4638      	mov	r0, r7
 8013366:	f7ff ffa5 	bl	80132b4 <sbrk_aligned>
 801336a:	3001      	adds	r0, #1
 801336c:	d02b      	beq.n	80133c6 <_malloc_r+0xd2>
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	442b      	add	r3, r5
 8013372:	6023      	str	r3, [r4, #0]
 8013374:	e00e      	b.n	8013394 <_malloc_r+0xa0>
 8013376:	6822      	ldr	r2, [r4, #0]
 8013378:	1b52      	subs	r2, r2, r5
 801337a:	d41e      	bmi.n	80133ba <_malloc_r+0xc6>
 801337c:	2a0b      	cmp	r2, #11
 801337e:	d916      	bls.n	80133ae <_malloc_r+0xba>
 8013380:	1961      	adds	r1, r4, r5
 8013382:	42a3      	cmp	r3, r4
 8013384:	6025      	str	r5, [r4, #0]
 8013386:	bf18      	it	ne
 8013388:	6059      	strne	r1, [r3, #4]
 801338a:	6863      	ldr	r3, [r4, #4]
 801338c:	bf08      	it	eq
 801338e:	6031      	streq	r1, [r6, #0]
 8013390:	5162      	str	r2, [r4, r5]
 8013392:	604b      	str	r3, [r1, #4]
 8013394:	4638      	mov	r0, r7
 8013396:	f104 060b 	add.w	r6, r4, #11
 801339a:	f000 f901 	bl	80135a0 <__malloc_unlock>
 801339e:	f026 0607 	bic.w	r6, r6, #7
 80133a2:	1d23      	adds	r3, r4, #4
 80133a4:	1af2      	subs	r2, r6, r3
 80133a6:	d0b6      	beq.n	8013316 <_malloc_r+0x22>
 80133a8:	1b9b      	subs	r3, r3, r6
 80133aa:	50a3      	str	r3, [r4, r2]
 80133ac:	e7b3      	b.n	8013316 <_malloc_r+0x22>
 80133ae:	6862      	ldr	r2, [r4, #4]
 80133b0:	42a3      	cmp	r3, r4
 80133b2:	bf0c      	ite	eq
 80133b4:	6032      	streq	r2, [r6, #0]
 80133b6:	605a      	strne	r2, [r3, #4]
 80133b8:	e7ec      	b.n	8013394 <_malloc_r+0xa0>
 80133ba:	4623      	mov	r3, r4
 80133bc:	6864      	ldr	r4, [r4, #4]
 80133be:	e7b2      	b.n	8013326 <_malloc_r+0x32>
 80133c0:	4634      	mov	r4, r6
 80133c2:	6876      	ldr	r6, [r6, #4]
 80133c4:	e7b9      	b.n	801333a <_malloc_r+0x46>
 80133c6:	230c      	movs	r3, #12
 80133c8:	603b      	str	r3, [r7, #0]
 80133ca:	4638      	mov	r0, r7
 80133cc:	f000 f8e8 	bl	80135a0 <__malloc_unlock>
 80133d0:	e7a1      	b.n	8013316 <_malloc_r+0x22>
 80133d2:	6025      	str	r5, [r4, #0]
 80133d4:	e7de      	b.n	8013394 <_malloc_r+0xa0>
 80133d6:	bf00      	nop
 80133d8:	2000019c 	.word	0x2000019c

080133dc <iprintf>:
 80133dc:	b40f      	push	{r0, r1, r2, r3}
 80133de:	4b0a      	ldr	r3, [pc, #40]	; (8013408 <iprintf+0x2c>)
 80133e0:	b513      	push	{r0, r1, r4, lr}
 80133e2:	681c      	ldr	r4, [r3, #0]
 80133e4:	b124      	cbz	r4, 80133f0 <iprintf+0x14>
 80133e6:	69a3      	ldr	r3, [r4, #24]
 80133e8:	b913      	cbnz	r3, 80133f0 <iprintf+0x14>
 80133ea:	4620      	mov	r0, r4
 80133ec:	f7ff fe38 	bl	8013060 <__sinit>
 80133f0:	ab05      	add	r3, sp, #20
 80133f2:	9a04      	ldr	r2, [sp, #16]
 80133f4:	68a1      	ldr	r1, [r4, #8]
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	4620      	mov	r0, r4
 80133fa:	f000 fa5b 	bl	80138b4 <_vfiprintf_r>
 80133fe:	b002      	add	sp, #8
 8013400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013404:	b004      	add	sp, #16
 8013406:	4770      	bx	lr
 8013408:	200000dc 	.word	0x200000dc

0801340c <_sbrk_r>:
 801340c:	b538      	push	{r3, r4, r5, lr}
 801340e:	4d06      	ldr	r5, [pc, #24]	; (8013428 <_sbrk_r+0x1c>)
 8013410:	2300      	movs	r3, #0
 8013412:	4604      	mov	r4, r0
 8013414:	4608      	mov	r0, r1
 8013416:	602b      	str	r3, [r5, #0]
 8013418:	f000 ff1c 	bl	8014254 <_sbrk>
 801341c:	1c43      	adds	r3, r0, #1
 801341e:	d102      	bne.n	8013426 <_sbrk_r+0x1a>
 8013420:	682b      	ldr	r3, [r5, #0]
 8013422:	b103      	cbz	r3, 8013426 <_sbrk_r+0x1a>
 8013424:	6023      	str	r3, [r4, #0]
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	200001a4 	.word	0x200001a4

0801342c <sniprintf>:
 801342c:	b40c      	push	{r2, r3}
 801342e:	b530      	push	{r4, r5, lr}
 8013430:	4b17      	ldr	r3, [pc, #92]	; (8013490 <sniprintf+0x64>)
 8013432:	1e0c      	subs	r4, r1, #0
 8013434:	681d      	ldr	r5, [r3, #0]
 8013436:	b09d      	sub	sp, #116	; 0x74
 8013438:	da08      	bge.n	801344c <sniprintf+0x20>
 801343a:	238b      	movs	r3, #139	; 0x8b
 801343c:	602b      	str	r3, [r5, #0]
 801343e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013442:	b01d      	add	sp, #116	; 0x74
 8013444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013448:	b002      	add	sp, #8
 801344a:	4770      	bx	lr
 801344c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013454:	bf14      	ite	ne
 8013456:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801345a:	4623      	moveq	r3, r4
 801345c:	9304      	str	r3, [sp, #16]
 801345e:	9307      	str	r3, [sp, #28]
 8013460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013464:	9002      	str	r0, [sp, #8]
 8013466:	9006      	str	r0, [sp, #24]
 8013468:	f8ad 3016 	strh.w	r3, [sp, #22]
 801346c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801346e:	ab21      	add	r3, sp, #132	; 0x84
 8013470:	a902      	add	r1, sp, #8
 8013472:	4628      	mov	r0, r5
 8013474:	9301      	str	r3, [sp, #4]
 8013476:	f000 f8f5 	bl	8013664 <_svfiprintf_r>
 801347a:	1c43      	adds	r3, r0, #1
 801347c:	bfbc      	itt	lt
 801347e:	238b      	movlt	r3, #139	; 0x8b
 8013480:	602b      	strlt	r3, [r5, #0]
 8013482:	2c00      	cmp	r4, #0
 8013484:	d0dd      	beq.n	8013442 <sniprintf+0x16>
 8013486:	9b02      	ldr	r3, [sp, #8]
 8013488:	2200      	movs	r2, #0
 801348a:	701a      	strb	r2, [r3, #0]
 801348c:	e7d9      	b.n	8013442 <sniprintf+0x16>
 801348e:	bf00      	nop
 8013490:	200000dc 	.word	0x200000dc

08013494 <__sread>:
 8013494:	b510      	push	{r4, lr}
 8013496:	460c      	mov	r4, r1
 8013498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801349c:	f000 fcce 	bl	8013e3c <_read_r>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	bfab      	itete	ge
 80134a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134a6:	89a3      	ldrhlt	r3, [r4, #12]
 80134a8:	181b      	addge	r3, r3, r0
 80134aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134ae:	bfac      	ite	ge
 80134b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80134b2:	81a3      	strhlt	r3, [r4, #12]
 80134b4:	bd10      	pop	{r4, pc}

080134b6 <__swrite>:
 80134b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ba:	461f      	mov	r7, r3
 80134bc:	898b      	ldrh	r3, [r1, #12]
 80134be:	05db      	lsls	r3, r3, #23
 80134c0:	4605      	mov	r5, r0
 80134c2:	460c      	mov	r4, r1
 80134c4:	4616      	mov	r6, r2
 80134c6:	d505      	bpl.n	80134d4 <__swrite+0x1e>
 80134c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134cc:	2302      	movs	r3, #2
 80134ce:	2200      	movs	r2, #0
 80134d0:	f000 f84e 	bl	8013570 <_lseek_r>
 80134d4:	89a3      	ldrh	r3, [r4, #12]
 80134d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134de:	81a3      	strh	r3, [r4, #12]
 80134e0:	4632      	mov	r2, r6
 80134e2:	463b      	mov	r3, r7
 80134e4:	4628      	mov	r0, r5
 80134e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134ea:	f000 b81f 	b.w	801352c <_write_r>

080134ee <__sseek>:
 80134ee:	b510      	push	{r4, lr}
 80134f0:	460c      	mov	r4, r1
 80134f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f6:	f000 f83b 	bl	8013570 <_lseek_r>
 80134fa:	1c43      	adds	r3, r0, #1
 80134fc:	89a3      	ldrh	r3, [r4, #12]
 80134fe:	bf15      	itete	ne
 8013500:	6560      	strne	r0, [r4, #84]	; 0x54
 8013502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801350a:	81a3      	strheq	r3, [r4, #12]
 801350c:	bf18      	it	ne
 801350e:	81a3      	strhne	r3, [r4, #12]
 8013510:	bd10      	pop	{r4, pc}

08013512 <__sclose>:
 8013512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013516:	f000 b81b 	b.w	8013550 <_close_r>

0801351a <strlen>:
 801351a:	4603      	mov	r3, r0
 801351c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013520:	2a00      	cmp	r2, #0
 8013522:	d1fb      	bne.n	801351c <strlen+0x2>
 8013524:	1a18      	subs	r0, r3, r0
 8013526:	3801      	subs	r0, #1
 8013528:	4770      	bx	lr
	...

0801352c <_write_r>:
 801352c:	b538      	push	{r3, r4, r5, lr}
 801352e:	4d07      	ldr	r5, [pc, #28]	; (801354c <_write_r+0x20>)
 8013530:	4604      	mov	r4, r0
 8013532:	4608      	mov	r0, r1
 8013534:	4611      	mov	r1, r2
 8013536:	2200      	movs	r2, #0
 8013538:	602a      	str	r2, [r5, #0]
 801353a:	461a      	mov	r2, r3
 801353c:	f000 fe98 	bl	8014270 <_write>
 8013540:	1c43      	adds	r3, r0, #1
 8013542:	d102      	bne.n	801354a <_write_r+0x1e>
 8013544:	682b      	ldr	r3, [r5, #0]
 8013546:	b103      	cbz	r3, 801354a <_write_r+0x1e>
 8013548:	6023      	str	r3, [r4, #0]
 801354a:	bd38      	pop	{r3, r4, r5, pc}
 801354c:	200001a4 	.word	0x200001a4

08013550 <_close_r>:
 8013550:	b538      	push	{r3, r4, r5, lr}
 8013552:	4d06      	ldr	r5, [pc, #24]	; (801356c <_close_r+0x1c>)
 8013554:	2300      	movs	r3, #0
 8013556:	4604      	mov	r4, r0
 8013558:	4608      	mov	r0, r1
 801355a:	602b      	str	r3, [r5, #0]
 801355c:	f000 fe52 	bl	8014204 <_close>
 8013560:	1c43      	adds	r3, r0, #1
 8013562:	d102      	bne.n	801356a <_close_r+0x1a>
 8013564:	682b      	ldr	r3, [r5, #0]
 8013566:	b103      	cbz	r3, 801356a <_close_r+0x1a>
 8013568:	6023      	str	r3, [r4, #0]
 801356a:	bd38      	pop	{r3, r4, r5, pc}
 801356c:	200001a4 	.word	0x200001a4

08013570 <_lseek_r>:
 8013570:	b538      	push	{r3, r4, r5, lr}
 8013572:	4d07      	ldr	r5, [pc, #28]	; (8013590 <_lseek_r+0x20>)
 8013574:	4604      	mov	r4, r0
 8013576:	4608      	mov	r0, r1
 8013578:	4611      	mov	r1, r2
 801357a:	2200      	movs	r2, #0
 801357c:	602a      	str	r2, [r5, #0]
 801357e:	461a      	mov	r2, r3
 8013580:	f000 fe58 	bl	8014234 <_lseek>
 8013584:	1c43      	adds	r3, r0, #1
 8013586:	d102      	bne.n	801358e <_lseek_r+0x1e>
 8013588:	682b      	ldr	r3, [r5, #0]
 801358a:	b103      	cbz	r3, 801358e <_lseek_r+0x1e>
 801358c:	6023      	str	r3, [r4, #0]
 801358e:	bd38      	pop	{r3, r4, r5, pc}
 8013590:	200001a4 	.word	0x200001a4

08013594 <__malloc_lock>:
 8013594:	4801      	ldr	r0, [pc, #4]	; (801359c <__malloc_lock+0x8>)
 8013596:	f7ff be01 	b.w	801319c <__retarget_lock_acquire_recursive>
 801359a:	bf00      	nop
 801359c:	20000198 	.word	0x20000198

080135a0 <__malloc_unlock>:
 80135a0:	4801      	ldr	r0, [pc, #4]	; (80135a8 <__malloc_unlock+0x8>)
 80135a2:	f7ff bdfc 	b.w	801319e <__retarget_lock_release_recursive>
 80135a6:	bf00      	nop
 80135a8:	20000198 	.word	0x20000198

080135ac <__ssputs_r>:
 80135ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b0:	688e      	ldr	r6, [r1, #8]
 80135b2:	429e      	cmp	r6, r3
 80135b4:	4682      	mov	sl, r0
 80135b6:	460c      	mov	r4, r1
 80135b8:	4690      	mov	r8, r2
 80135ba:	461f      	mov	r7, r3
 80135bc:	d838      	bhi.n	8013630 <__ssputs_r+0x84>
 80135be:	898a      	ldrh	r2, [r1, #12]
 80135c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135c4:	d032      	beq.n	801362c <__ssputs_r+0x80>
 80135c6:	6825      	ldr	r5, [r4, #0]
 80135c8:	6909      	ldr	r1, [r1, #16]
 80135ca:	eba5 0901 	sub.w	r9, r5, r1
 80135ce:	6965      	ldr	r5, [r4, #20]
 80135d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135d8:	3301      	adds	r3, #1
 80135da:	444b      	add	r3, r9
 80135dc:	106d      	asrs	r5, r5, #1
 80135de:	429d      	cmp	r5, r3
 80135e0:	bf38      	it	cc
 80135e2:	461d      	movcc	r5, r3
 80135e4:	0553      	lsls	r3, r2, #21
 80135e6:	d531      	bpl.n	801364c <__ssputs_r+0xa0>
 80135e8:	4629      	mov	r1, r5
 80135ea:	f7ff fe83 	bl	80132f4 <_malloc_r>
 80135ee:	4606      	mov	r6, r0
 80135f0:	b950      	cbnz	r0, 8013608 <__ssputs_r+0x5c>
 80135f2:	230c      	movs	r3, #12
 80135f4:	f8ca 3000 	str.w	r3, [sl]
 80135f8:	89a3      	ldrh	r3, [r4, #12]
 80135fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135fe:	81a3      	strh	r3, [r4, #12]
 8013600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013608:	6921      	ldr	r1, [r4, #16]
 801360a:	464a      	mov	r2, r9
 801360c:	f7ff fdd8 	bl	80131c0 <memcpy>
 8013610:	89a3      	ldrh	r3, [r4, #12]
 8013612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801361a:	81a3      	strh	r3, [r4, #12]
 801361c:	6126      	str	r6, [r4, #16]
 801361e:	6165      	str	r5, [r4, #20]
 8013620:	444e      	add	r6, r9
 8013622:	eba5 0509 	sub.w	r5, r5, r9
 8013626:	6026      	str	r6, [r4, #0]
 8013628:	60a5      	str	r5, [r4, #8]
 801362a:	463e      	mov	r6, r7
 801362c:	42be      	cmp	r6, r7
 801362e:	d900      	bls.n	8013632 <__ssputs_r+0x86>
 8013630:	463e      	mov	r6, r7
 8013632:	6820      	ldr	r0, [r4, #0]
 8013634:	4632      	mov	r2, r6
 8013636:	4641      	mov	r1, r8
 8013638:	f7ff fdd0 	bl	80131dc <memmove>
 801363c:	68a3      	ldr	r3, [r4, #8]
 801363e:	1b9b      	subs	r3, r3, r6
 8013640:	60a3      	str	r3, [r4, #8]
 8013642:	6823      	ldr	r3, [r4, #0]
 8013644:	4433      	add	r3, r6
 8013646:	6023      	str	r3, [r4, #0]
 8013648:	2000      	movs	r0, #0
 801364a:	e7db      	b.n	8013604 <__ssputs_r+0x58>
 801364c:	462a      	mov	r2, r5
 801364e:	f000 fd7f 	bl	8014150 <_realloc_r>
 8013652:	4606      	mov	r6, r0
 8013654:	2800      	cmp	r0, #0
 8013656:	d1e1      	bne.n	801361c <__ssputs_r+0x70>
 8013658:	6921      	ldr	r1, [r4, #16]
 801365a:	4650      	mov	r0, sl
 801365c:	f7ff fde0 	bl	8013220 <_free_r>
 8013660:	e7c7      	b.n	80135f2 <__ssputs_r+0x46>
	...

08013664 <_svfiprintf_r>:
 8013664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013668:	4698      	mov	r8, r3
 801366a:	898b      	ldrh	r3, [r1, #12]
 801366c:	061b      	lsls	r3, r3, #24
 801366e:	b09d      	sub	sp, #116	; 0x74
 8013670:	4607      	mov	r7, r0
 8013672:	460d      	mov	r5, r1
 8013674:	4614      	mov	r4, r2
 8013676:	d50e      	bpl.n	8013696 <_svfiprintf_r+0x32>
 8013678:	690b      	ldr	r3, [r1, #16]
 801367a:	b963      	cbnz	r3, 8013696 <_svfiprintf_r+0x32>
 801367c:	2140      	movs	r1, #64	; 0x40
 801367e:	f7ff fe39 	bl	80132f4 <_malloc_r>
 8013682:	6028      	str	r0, [r5, #0]
 8013684:	6128      	str	r0, [r5, #16]
 8013686:	b920      	cbnz	r0, 8013692 <_svfiprintf_r+0x2e>
 8013688:	230c      	movs	r3, #12
 801368a:	603b      	str	r3, [r7, #0]
 801368c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013690:	e0d1      	b.n	8013836 <_svfiprintf_r+0x1d2>
 8013692:	2340      	movs	r3, #64	; 0x40
 8013694:	616b      	str	r3, [r5, #20]
 8013696:	2300      	movs	r3, #0
 8013698:	9309      	str	r3, [sp, #36]	; 0x24
 801369a:	2320      	movs	r3, #32
 801369c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80136a4:	2330      	movs	r3, #48	; 0x30
 80136a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013850 <_svfiprintf_r+0x1ec>
 80136aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136ae:	f04f 0901 	mov.w	r9, #1
 80136b2:	4623      	mov	r3, r4
 80136b4:	469a      	mov	sl, r3
 80136b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ba:	b10a      	cbz	r2, 80136c0 <_svfiprintf_r+0x5c>
 80136bc:	2a25      	cmp	r2, #37	; 0x25
 80136be:	d1f9      	bne.n	80136b4 <_svfiprintf_r+0x50>
 80136c0:	ebba 0b04 	subs.w	fp, sl, r4
 80136c4:	d00b      	beq.n	80136de <_svfiprintf_r+0x7a>
 80136c6:	465b      	mov	r3, fp
 80136c8:	4622      	mov	r2, r4
 80136ca:	4629      	mov	r1, r5
 80136cc:	4638      	mov	r0, r7
 80136ce:	f7ff ff6d 	bl	80135ac <__ssputs_r>
 80136d2:	3001      	adds	r0, #1
 80136d4:	f000 80aa 	beq.w	801382c <_svfiprintf_r+0x1c8>
 80136d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136da:	445a      	add	r2, fp
 80136dc:	9209      	str	r2, [sp, #36]	; 0x24
 80136de:	f89a 3000 	ldrb.w	r3, [sl]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f000 80a2 	beq.w	801382c <_svfiprintf_r+0x1c8>
 80136e8:	2300      	movs	r3, #0
 80136ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136f2:	f10a 0a01 	add.w	sl, sl, #1
 80136f6:	9304      	str	r3, [sp, #16]
 80136f8:	9307      	str	r3, [sp, #28]
 80136fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136fe:	931a      	str	r3, [sp, #104]	; 0x68
 8013700:	4654      	mov	r4, sl
 8013702:	2205      	movs	r2, #5
 8013704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013708:	4851      	ldr	r0, [pc, #324]	; (8013850 <_svfiprintf_r+0x1ec>)
 801370a:	f000 fcd1 	bl	80140b0 <memchr>
 801370e:	9a04      	ldr	r2, [sp, #16]
 8013710:	b9d8      	cbnz	r0, 801374a <_svfiprintf_r+0xe6>
 8013712:	06d0      	lsls	r0, r2, #27
 8013714:	bf44      	itt	mi
 8013716:	2320      	movmi	r3, #32
 8013718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801371c:	0711      	lsls	r1, r2, #28
 801371e:	bf44      	itt	mi
 8013720:	232b      	movmi	r3, #43	; 0x2b
 8013722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013726:	f89a 3000 	ldrb.w	r3, [sl]
 801372a:	2b2a      	cmp	r3, #42	; 0x2a
 801372c:	d015      	beq.n	801375a <_svfiprintf_r+0xf6>
 801372e:	9a07      	ldr	r2, [sp, #28]
 8013730:	4654      	mov	r4, sl
 8013732:	2000      	movs	r0, #0
 8013734:	f04f 0c0a 	mov.w	ip, #10
 8013738:	4621      	mov	r1, r4
 801373a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801373e:	3b30      	subs	r3, #48	; 0x30
 8013740:	2b09      	cmp	r3, #9
 8013742:	d94e      	bls.n	80137e2 <_svfiprintf_r+0x17e>
 8013744:	b1b0      	cbz	r0, 8013774 <_svfiprintf_r+0x110>
 8013746:	9207      	str	r2, [sp, #28]
 8013748:	e014      	b.n	8013774 <_svfiprintf_r+0x110>
 801374a:	eba0 0308 	sub.w	r3, r0, r8
 801374e:	fa09 f303 	lsl.w	r3, r9, r3
 8013752:	4313      	orrs	r3, r2
 8013754:	9304      	str	r3, [sp, #16]
 8013756:	46a2      	mov	sl, r4
 8013758:	e7d2      	b.n	8013700 <_svfiprintf_r+0x9c>
 801375a:	9b03      	ldr	r3, [sp, #12]
 801375c:	1d19      	adds	r1, r3, #4
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	9103      	str	r1, [sp, #12]
 8013762:	2b00      	cmp	r3, #0
 8013764:	bfbb      	ittet	lt
 8013766:	425b      	neglt	r3, r3
 8013768:	f042 0202 	orrlt.w	r2, r2, #2
 801376c:	9307      	strge	r3, [sp, #28]
 801376e:	9307      	strlt	r3, [sp, #28]
 8013770:	bfb8      	it	lt
 8013772:	9204      	strlt	r2, [sp, #16]
 8013774:	7823      	ldrb	r3, [r4, #0]
 8013776:	2b2e      	cmp	r3, #46	; 0x2e
 8013778:	d10c      	bne.n	8013794 <_svfiprintf_r+0x130>
 801377a:	7863      	ldrb	r3, [r4, #1]
 801377c:	2b2a      	cmp	r3, #42	; 0x2a
 801377e:	d135      	bne.n	80137ec <_svfiprintf_r+0x188>
 8013780:	9b03      	ldr	r3, [sp, #12]
 8013782:	1d1a      	adds	r2, r3, #4
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	9203      	str	r2, [sp, #12]
 8013788:	2b00      	cmp	r3, #0
 801378a:	bfb8      	it	lt
 801378c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013790:	3402      	adds	r4, #2
 8013792:	9305      	str	r3, [sp, #20]
 8013794:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013854 <_svfiprintf_r+0x1f0>
 8013798:	7821      	ldrb	r1, [r4, #0]
 801379a:	2203      	movs	r2, #3
 801379c:	4650      	mov	r0, sl
 801379e:	f000 fc87 	bl	80140b0 <memchr>
 80137a2:	b140      	cbz	r0, 80137b6 <_svfiprintf_r+0x152>
 80137a4:	2340      	movs	r3, #64	; 0x40
 80137a6:	eba0 000a 	sub.w	r0, r0, sl
 80137aa:	fa03 f000 	lsl.w	r0, r3, r0
 80137ae:	9b04      	ldr	r3, [sp, #16]
 80137b0:	4303      	orrs	r3, r0
 80137b2:	3401      	adds	r4, #1
 80137b4:	9304      	str	r3, [sp, #16]
 80137b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ba:	4827      	ldr	r0, [pc, #156]	; (8013858 <_svfiprintf_r+0x1f4>)
 80137bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137c0:	2206      	movs	r2, #6
 80137c2:	f000 fc75 	bl	80140b0 <memchr>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d038      	beq.n	801383c <_svfiprintf_r+0x1d8>
 80137ca:	4b24      	ldr	r3, [pc, #144]	; (801385c <_svfiprintf_r+0x1f8>)
 80137cc:	bb1b      	cbnz	r3, 8013816 <_svfiprintf_r+0x1b2>
 80137ce:	9b03      	ldr	r3, [sp, #12]
 80137d0:	3307      	adds	r3, #7
 80137d2:	f023 0307 	bic.w	r3, r3, #7
 80137d6:	3308      	adds	r3, #8
 80137d8:	9303      	str	r3, [sp, #12]
 80137da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137dc:	4433      	add	r3, r6
 80137de:	9309      	str	r3, [sp, #36]	; 0x24
 80137e0:	e767      	b.n	80136b2 <_svfiprintf_r+0x4e>
 80137e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80137e6:	460c      	mov	r4, r1
 80137e8:	2001      	movs	r0, #1
 80137ea:	e7a5      	b.n	8013738 <_svfiprintf_r+0xd4>
 80137ec:	2300      	movs	r3, #0
 80137ee:	3401      	adds	r4, #1
 80137f0:	9305      	str	r3, [sp, #20]
 80137f2:	4619      	mov	r1, r3
 80137f4:	f04f 0c0a 	mov.w	ip, #10
 80137f8:	4620      	mov	r0, r4
 80137fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137fe:	3a30      	subs	r2, #48	; 0x30
 8013800:	2a09      	cmp	r2, #9
 8013802:	d903      	bls.n	801380c <_svfiprintf_r+0x1a8>
 8013804:	2b00      	cmp	r3, #0
 8013806:	d0c5      	beq.n	8013794 <_svfiprintf_r+0x130>
 8013808:	9105      	str	r1, [sp, #20]
 801380a:	e7c3      	b.n	8013794 <_svfiprintf_r+0x130>
 801380c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013810:	4604      	mov	r4, r0
 8013812:	2301      	movs	r3, #1
 8013814:	e7f0      	b.n	80137f8 <_svfiprintf_r+0x194>
 8013816:	ab03      	add	r3, sp, #12
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	462a      	mov	r2, r5
 801381c:	4b10      	ldr	r3, [pc, #64]	; (8013860 <_svfiprintf_r+0x1fc>)
 801381e:	a904      	add	r1, sp, #16
 8013820:	4638      	mov	r0, r7
 8013822:	f3af 8000 	nop.w
 8013826:	1c42      	adds	r2, r0, #1
 8013828:	4606      	mov	r6, r0
 801382a:	d1d6      	bne.n	80137da <_svfiprintf_r+0x176>
 801382c:	89ab      	ldrh	r3, [r5, #12]
 801382e:	065b      	lsls	r3, r3, #25
 8013830:	f53f af2c 	bmi.w	801368c <_svfiprintf_r+0x28>
 8013834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013836:	b01d      	add	sp, #116	; 0x74
 8013838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801383c:	ab03      	add	r3, sp, #12
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	462a      	mov	r2, r5
 8013842:	4b07      	ldr	r3, [pc, #28]	; (8013860 <_svfiprintf_r+0x1fc>)
 8013844:	a904      	add	r1, sp, #16
 8013846:	4638      	mov	r0, r7
 8013848:	f000 f9d2 	bl	8013bf0 <_printf_i>
 801384c:	e7eb      	b.n	8013826 <_svfiprintf_r+0x1c2>
 801384e:	bf00      	nop
 8013850:	0801fa28 	.word	0x0801fa28
 8013854:	0801fa2e 	.word	0x0801fa2e
 8013858:	0801fa32 	.word	0x0801fa32
 801385c:	00000000 	.word	0x00000000
 8013860:	080135ad 	.word	0x080135ad

08013864 <__sfputc_r>:
 8013864:	6893      	ldr	r3, [r2, #8]
 8013866:	3b01      	subs	r3, #1
 8013868:	2b00      	cmp	r3, #0
 801386a:	b410      	push	{r4}
 801386c:	6093      	str	r3, [r2, #8]
 801386e:	da07      	bge.n	8013880 <__sfputc_r+0x1c>
 8013870:	6994      	ldr	r4, [r2, #24]
 8013872:	42a3      	cmp	r3, r4
 8013874:	db01      	blt.n	801387a <__sfputc_r+0x16>
 8013876:	290a      	cmp	r1, #10
 8013878:	d102      	bne.n	8013880 <__sfputc_r+0x1c>
 801387a:	bc10      	pop	{r4}
 801387c:	f000 baf0 	b.w	8013e60 <__swbuf_r>
 8013880:	6813      	ldr	r3, [r2, #0]
 8013882:	1c58      	adds	r0, r3, #1
 8013884:	6010      	str	r0, [r2, #0]
 8013886:	7019      	strb	r1, [r3, #0]
 8013888:	4608      	mov	r0, r1
 801388a:	bc10      	pop	{r4}
 801388c:	4770      	bx	lr

0801388e <__sfputs_r>:
 801388e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013890:	4606      	mov	r6, r0
 8013892:	460f      	mov	r7, r1
 8013894:	4614      	mov	r4, r2
 8013896:	18d5      	adds	r5, r2, r3
 8013898:	42ac      	cmp	r4, r5
 801389a:	d101      	bne.n	80138a0 <__sfputs_r+0x12>
 801389c:	2000      	movs	r0, #0
 801389e:	e007      	b.n	80138b0 <__sfputs_r+0x22>
 80138a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a4:	463a      	mov	r2, r7
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7ff ffdc 	bl	8013864 <__sfputc_r>
 80138ac:	1c43      	adds	r3, r0, #1
 80138ae:	d1f3      	bne.n	8013898 <__sfputs_r+0xa>
 80138b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138b4 <_vfiprintf_r>:
 80138b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b8:	460d      	mov	r5, r1
 80138ba:	b09d      	sub	sp, #116	; 0x74
 80138bc:	4614      	mov	r4, r2
 80138be:	4698      	mov	r8, r3
 80138c0:	4606      	mov	r6, r0
 80138c2:	b118      	cbz	r0, 80138cc <_vfiprintf_r+0x18>
 80138c4:	6983      	ldr	r3, [r0, #24]
 80138c6:	b90b      	cbnz	r3, 80138cc <_vfiprintf_r+0x18>
 80138c8:	f7ff fbca 	bl	8013060 <__sinit>
 80138cc:	4b89      	ldr	r3, [pc, #548]	; (8013af4 <_vfiprintf_r+0x240>)
 80138ce:	429d      	cmp	r5, r3
 80138d0:	d11b      	bne.n	801390a <_vfiprintf_r+0x56>
 80138d2:	6875      	ldr	r5, [r6, #4]
 80138d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138d6:	07d9      	lsls	r1, r3, #31
 80138d8:	d405      	bmi.n	80138e6 <_vfiprintf_r+0x32>
 80138da:	89ab      	ldrh	r3, [r5, #12]
 80138dc:	059a      	lsls	r2, r3, #22
 80138de:	d402      	bmi.n	80138e6 <_vfiprintf_r+0x32>
 80138e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138e2:	f7ff fc5b 	bl	801319c <__retarget_lock_acquire_recursive>
 80138e6:	89ab      	ldrh	r3, [r5, #12]
 80138e8:	071b      	lsls	r3, r3, #28
 80138ea:	d501      	bpl.n	80138f0 <_vfiprintf_r+0x3c>
 80138ec:	692b      	ldr	r3, [r5, #16]
 80138ee:	b9eb      	cbnz	r3, 801392c <_vfiprintf_r+0x78>
 80138f0:	4629      	mov	r1, r5
 80138f2:	4630      	mov	r0, r6
 80138f4:	f000 fb06 	bl	8013f04 <__swsetup_r>
 80138f8:	b1c0      	cbz	r0, 801392c <_vfiprintf_r+0x78>
 80138fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138fc:	07dc      	lsls	r4, r3, #31
 80138fe:	d50e      	bpl.n	801391e <_vfiprintf_r+0x6a>
 8013900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013904:	b01d      	add	sp, #116	; 0x74
 8013906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390a:	4b7b      	ldr	r3, [pc, #492]	; (8013af8 <_vfiprintf_r+0x244>)
 801390c:	429d      	cmp	r5, r3
 801390e:	d101      	bne.n	8013914 <_vfiprintf_r+0x60>
 8013910:	68b5      	ldr	r5, [r6, #8]
 8013912:	e7df      	b.n	80138d4 <_vfiprintf_r+0x20>
 8013914:	4b79      	ldr	r3, [pc, #484]	; (8013afc <_vfiprintf_r+0x248>)
 8013916:	429d      	cmp	r5, r3
 8013918:	bf08      	it	eq
 801391a:	68f5      	ldreq	r5, [r6, #12]
 801391c:	e7da      	b.n	80138d4 <_vfiprintf_r+0x20>
 801391e:	89ab      	ldrh	r3, [r5, #12]
 8013920:	0598      	lsls	r0, r3, #22
 8013922:	d4ed      	bmi.n	8013900 <_vfiprintf_r+0x4c>
 8013924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013926:	f7ff fc3a 	bl	801319e <__retarget_lock_release_recursive>
 801392a:	e7e9      	b.n	8013900 <_vfiprintf_r+0x4c>
 801392c:	2300      	movs	r3, #0
 801392e:	9309      	str	r3, [sp, #36]	; 0x24
 8013930:	2320      	movs	r3, #32
 8013932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013936:	f8cd 800c 	str.w	r8, [sp, #12]
 801393a:	2330      	movs	r3, #48	; 0x30
 801393c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b00 <_vfiprintf_r+0x24c>
 8013940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013944:	f04f 0901 	mov.w	r9, #1
 8013948:	4623      	mov	r3, r4
 801394a:	469a      	mov	sl, r3
 801394c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013950:	b10a      	cbz	r2, 8013956 <_vfiprintf_r+0xa2>
 8013952:	2a25      	cmp	r2, #37	; 0x25
 8013954:	d1f9      	bne.n	801394a <_vfiprintf_r+0x96>
 8013956:	ebba 0b04 	subs.w	fp, sl, r4
 801395a:	d00b      	beq.n	8013974 <_vfiprintf_r+0xc0>
 801395c:	465b      	mov	r3, fp
 801395e:	4622      	mov	r2, r4
 8013960:	4629      	mov	r1, r5
 8013962:	4630      	mov	r0, r6
 8013964:	f7ff ff93 	bl	801388e <__sfputs_r>
 8013968:	3001      	adds	r0, #1
 801396a:	f000 80aa 	beq.w	8013ac2 <_vfiprintf_r+0x20e>
 801396e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013970:	445a      	add	r2, fp
 8013972:	9209      	str	r2, [sp, #36]	; 0x24
 8013974:	f89a 3000 	ldrb.w	r3, [sl]
 8013978:	2b00      	cmp	r3, #0
 801397a:	f000 80a2 	beq.w	8013ac2 <_vfiprintf_r+0x20e>
 801397e:	2300      	movs	r3, #0
 8013980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013988:	f10a 0a01 	add.w	sl, sl, #1
 801398c:	9304      	str	r3, [sp, #16]
 801398e:	9307      	str	r3, [sp, #28]
 8013990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013994:	931a      	str	r3, [sp, #104]	; 0x68
 8013996:	4654      	mov	r4, sl
 8013998:	2205      	movs	r2, #5
 801399a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801399e:	4858      	ldr	r0, [pc, #352]	; (8013b00 <_vfiprintf_r+0x24c>)
 80139a0:	f000 fb86 	bl	80140b0 <memchr>
 80139a4:	9a04      	ldr	r2, [sp, #16]
 80139a6:	b9d8      	cbnz	r0, 80139e0 <_vfiprintf_r+0x12c>
 80139a8:	06d1      	lsls	r1, r2, #27
 80139aa:	bf44      	itt	mi
 80139ac:	2320      	movmi	r3, #32
 80139ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139b2:	0713      	lsls	r3, r2, #28
 80139b4:	bf44      	itt	mi
 80139b6:	232b      	movmi	r3, #43	; 0x2b
 80139b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139bc:	f89a 3000 	ldrb.w	r3, [sl]
 80139c0:	2b2a      	cmp	r3, #42	; 0x2a
 80139c2:	d015      	beq.n	80139f0 <_vfiprintf_r+0x13c>
 80139c4:	9a07      	ldr	r2, [sp, #28]
 80139c6:	4654      	mov	r4, sl
 80139c8:	2000      	movs	r0, #0
 80139ca:	f04f 0c0a 	mov.w	ip, #10
 80139ce:	4621      	mov	r1, r4
 80139d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139d4:	3b30      	subs	r3, #48	; 0x30
 80139d6:	2b09      	cmp	r3, #9
 80139d8:	d94e      	bls.n	8013a78 <_vfiprintf_r+0x1c4>
 80139da:	b1b0      	cbz	r0, 8013a0a <_vfiprintf_r+0x156>
 80139dc:	9207      	str	r2, [sp, #28]
 80139de:	e014      	b.n	8013a0a <_vfiprintf_r+0x156>
 80139e0:	eba0 0308 	sub.w	r3, r0, r8
 80139e4:	fa09 f303 	lsl.w	r3, r9, r3
 80139e8:	4313      	orrs	r3, r2
 80139ea:	9304      	str	r3, [sp, #16]
 80139ec:	46a2      	mov	sl, r4
 80139ee:	e7d2      	b.n	8013996 <_vfiprintf_r+0xe2>
 80139f0:	9b03      	ldr	r3, [sp, #12]
 80139f2:	1d19      	adds	r1, r3, #4
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	9103      	str	r1, [sp, #12]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	bfbb      	ittet	lt
 80139fc:	425b      	neglt	r3, r3
 80139fe:	f042 0202 	orrlt.w	r2, r2, #2
 8013a02:	9307      	strge	r3, [sp, #28]
 8013a04:	9307      	strlt	r3, [sp, #28]
 8013a06:	bfb8      	it	lt
 8013a08:	9204      	strlt	r2, [sp, #16]
 8013a0a:	7823      	ldrb	r3, [r4, #0]
 8013a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8013a0e:	d10c      	bne.n	8013a2a <_vfiprintf_r+0x176>
 8013a10:	7863      	ldrb	r3, [r4, #1]
 8013a12:	2b2a      	cmp	r3, #42	; 0x2a
 8013a14:	d135      	bne.n	8013a82 <_vfiprintf_r+0x1ce>
 8013a16:	9b03      	ldr	r3, [sp, #12]
 8013a18:	1d1a      	adds	r2, r3, #4
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	9203      	str	r2, [sp, #12]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	bfb8      	it	lt
 8013a22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a26:	3402      	adds	r4, #2
 8013a28:	9305      	str	r3, [sp, #20]
 8013a2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013b04 <_vfiprintf_r+0x250>
 8013a2e:	7821      	ldrb	r1, [r4, #0]
 8013a30:	2203      	movs	r2, #3
 8013a32:	4650      	mov	r0, sl
 8013a34:	f000 fb3c 	bl	80140b0 <memchr>
 8013a38:	b140      	cbz	r0, 8013a4c <_vfiprintf_r+0x198>
 8013a3a:	2340      	movs	r3, #64	; 0x40
 8013a3c:	eba0 000a 	sub.w	r0, r0, sl
 8013a40:	fa03 f000 	lsl.w	r0, r3, r0
 8013a44:	9b04      	ldr	r3, [sp, #16]
 8013a46:	4303      	orrs	r3, r0
 8013a48:	3401      	adds	r4, #1
 8013a4a:	9304      	str	r3, [sp, #16]
 8013a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a50:	482d      	ldr	r0, [pc, #180]	; (8013b08 <_vfiprintf_r+0x254>)
 8013a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a56:	2206      	movs	r2, #6
 8013a58:	f000 fb2a 	bl	80140b0 <memchr>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d03f      	beq.n	8013ae0 <_vfiprintf_r+0x22c>
 8013a60:	4b2a      	ldr	r3, [pc, #168]	; (8013b0c <_vfiprintf_r+0x258>)
 8013a62:	bb1b      	cbnz	r3, 8013aac <_vfiprintf_r+0x1f8>
 8013a64:	9b03      	ldr	r3, [sp, #12]
 8013a66:	3307      	adds	r3, #7
 8013a68:	f023 0307 	bic.w	r3, r3, #7
 8013a6c:	3308      	adds	r3, #8
 8013a6e:	9303      	str	r3, [sp, #12]
 8013a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a72:	443b      	add	r3, r7
 8013a74:	9309      	str	r3, [sp, #36]	; 0x24
 8013a76:	e767      	b.n	8013948 <_vfiprintf_r+0x94>
 8013a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	2001      	movs	r0, #1
 8013a80:	e7a5      	b.n	80139ce <_vfiprintf_r+0x11a>
 8013a82:	2300      	movs	r3, #0
 8013a84:	3401      	adds	r4, #1
 8013a86:	9305      	str	r3, [sp, #20]
 8013a88:	4619      	mov	r1, r3
 8013a8a:	f04f 0c0a 	mov.w	ip, #10
 8013a8e:	4620      	mov	r0, r4
 8013a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a94:	3a30      	subs	r2, #48	; 0x30
 8013a96:	2a09      	cmp	r2, #9
 8013a98:	d903      	bls.n	8013aa2 <_vfiprintf_r+0x1ee>
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d0c5      	beq.n	8013a2a <_vfiprintf_r+0x176>
 8013a9e:	9105      	str	r1, [sp, #20]
 8013aa0:	e7c3      	b.n	8013a2a <_vfiprintf_r+0x176>
 8013aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	e7f0      	b.n	8013a8e <_vfiprintf_r+0x1da>
 8013aac:	ab03      	add	r3, sp, #12
 8013aae:	9300      	str	r3, [sp, #0]
 8013ab0:	462a      	mov	r2, r5
 8013ab2:	4b17      	ldr	r3, [pc, #92]	; (8013b10 <_vfiprintf_r+0x25c>)
 8013ab4:	a904      	add	r1, sp, #16
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	f3af 8000 	nop.w
 8013abc:	4607      	mov	r7, r0
 8013abe:	1c78      	adds	r0, r7, #1
 8013ac0:	d1d6      	bne.n	8013a70 <_vfiprintf_r+0x1bc>
 8013ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ac4:	07d9      	lsls	r1, r3, #31
 8013ac6:	d405      	bmi.n	8013ad4 <_vfiprintf_r+0x220>
 8013ac8:	89ab      	ldrh	r3, [r5, #12]
 8013aca:	059a      	lsls	r2, r3, #22
 8013acc:	d402      	bmi.n	8013ad4 <_vfiprintf_r+0x220>
 8013ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ad0:	f7ff fb65 	bl	801319e <__retarget_lock_release_recursive>
 8013ad4:	89ab      	ldrh	r3, [r5, #12]
 8013ad6:	065b      	lsls	r3, r3, #25
 8013ad8:	f53f af12 	bmi.w	8013900 <_vfiprintf_r+0x4c>
 8013adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ade:	e711      	b.n	8013904 <_vfiprintf_r+0x50>
 8013ae0:	ab03      	add	r3, sp, #12
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	462a      	mov	r2, r5
 8013ae6:	4b0a      	ldr	r3, [pc, #40]	; (8013b10 <_vfiprintf_r+0x25c>)
 8013ae8:	a904      	add	r1, sp, #16
 8013aea:	4630      	mov	r0, r6
 8013aec:	f000 f880 	bl	8013bf0 <_printf_i>
 8013af0:	e7e4      	b.n	8013abc <_vfiprintf_r+0x208>
 8013af2:	bf00      	nop
 8013af4:	0801f9e4 	.word	0x0801f9e4
 8013af8:	0801fa04 	.word	0x0801fa04
 8013afc:	0801f9c4 	.word	0x0801f9c4
 8013b00:	0801fa39 	.word	0x0801fa39
 8013b04:	0801fa3f 	.word	0x0801fa3f
 8013b08:	0801fa43 	.word	0x0801fa43
 8013b0c:	00000000 	.word	0x00000000
 8013b10:	0801388f 	.word	0x0801388f

08013b14 <_printf_common>:
 8013b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b18:	4616      	mov	r6, r2
 8013b1a:	4699      	mov	r9, r3
 8013b1c:	688a      	ldr	r2, [r1, #8]
 8013b1e:	690b      	ldr	r3, [r1, #16]
 8013b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b24:	4293      	cmp	r3, r2
 8013b26:	bfb8      	it	lt
 8013b28:	4613      	movlt	r3, r2
 8013b2a:	6033      	str	r3, [r6, #0]
 8013b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b30:	4607      	mov	r7, r0
 8013b32:	460c      	mov	r4, r1
 8013b34:	b10a      	cbz	r2, 8013b3a <_printf_common+0x26>
 8013b36:	3301      	adds	r3, #1
 8013b38:	6033      	str	r3, [r6, #0]
 8013b3a:	6823      	ldr	r3, [r4, #0]
 8013b3c:	0699      	lsls	r1, r3, #26
 8013b3e:	bf42      	ittt	mi
 8013b40:	6833      	ldrmi	r3, [r6, #0]
 8013b42:	3302      	addmi	r3, #2
 8013b44:	6033      	strmi	r3, [r6, #0]
 8013b46:	6825      	ldr	r5, [r4, #0]
 8013b48:	f015 0506 	ands.w	r5, r5, #6
 8013b4c:	d106      	bne.n	8013b5c <_printf_common+0x48>
 8013b4e:	f104 0a19 	add.w	sl, r4, #25
 8013b52:	68e3      	ldr	r3, [r4, #12]
 8013b54:	6832      	ldr	r2, [r6, #0]
 8013b56:	1a9b      	subs	r3, r3, r2
 8013b58:	42ab      	cmp	r3, r5
 8013b5a:	dc26      	bgt.n	8013baa <_printf_common+0x96>
 8013b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b60:	1e13      	subs	r3, r2, #0
 8013b62:	6822      	ldr	r2, [r4, #0]
 8013b64:	bf18      	it	ne
 8013b66:	2301      	movne	r3, #1
 8013b68:	0692      	lsls	r2, r2, #26
 8013b6a:	d42b      	bmi.n	8013bc4 <_printf_common+0xb0>
 8013b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b70:	4649      	mov	r1, r9
 8013b72:	4638      	mov	r0, r7
 8013b74:	47c0      	blx	r8
 8013b76:	3001      	adds	r0, #1
 8013b78:	d01e      	beq.n	8013bb8 <_printf_common+0xa4>
 8013b7a:	6823      	ldr	r3, [r4, #0]
 8013b7c:	68e5      	ldr	r5, [r4, #12]
 8013b7e:	6832      	ldr	r2, [r6, #0]
 8013b80:	f003 0306 	and.w	r3, r3, #6
 8013b84:	2b04      	cmp	r3, #4
 8013b86:	bf08      	it	eq
 8013b88:	1aad      	subeq	r5, r5, r2
 8013b8a:	68a3      	ldr	r3, [r4, #8]
 8013b8c:	6922      	ldr	r2, [r4, #16]
 8013b8e:	bf0c      	ite	eq
 8013b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b94:	2500      	movne	r5, #0
 8013b96:	4293      	cmp	r3, r2
 8013b98:	bfc4      	itt	gt
 8013b9a:	1a9b      	subgt	r3, r3, r2
 8013b9c:	18ed      	addgt	r5, r5, r3
 8013b9e:	2600      	movs	r6, #0
 8013ba0:	341a      	adds	r4, #26
 8013ba2:	42b5      	cmp	r5, r6
 8013ba4:	d11a      	bne.n	8013bdc <_printf_common+0xc8>
 8013ba6:	2000      	movs	r0, #0
 8013ba8:	e008      	b.n	8013bbc <_printf_common+0xa8>
 8013baa:	2301      	movs	r3, #1
 8013bac:	4652      	mov	r2, sl
 8013bae:	4649      	mov	r1, r9
 8013bb0:	4638      	mov	r0, r7
 8013bb2:	47c0      	blx	r8
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	d103      	bne.n	8013bc0 <_printf_common+0xac>
 8013bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bc0:	3501      	adds	r5, #1
 8013bc2:	e7c6      	b.n	8013b52 <_printf_common+0x3e>
 8013bc4:	18e1      	adds	r1, r4, r3
 8013bc6:	1c5a      	adds	r2, r3, #1
 8013bc8:	2030      	movs	r0, #48	; 0x30
 8013bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013bce:	4422      	add	r2, r4
 8013bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013bd8:	3302      	adds	r3, #2
 8013bda:	e7c7      	b.n	8013b6c <_printf_common+0x58>
 8013bdc:	2301      	movs	r3, #1
 8013bde:	4622      	mov	r2, r4
 8013be0:	4649      	mov	r1, r9
 8013be2:	4638      	mov	r0, r7
 8013be4:	47c0      	blx	r8
 8013be6:	3001      	adds	r0, #1
 8013be8:	d0e6      	beq.n	8013bb8 <_printf_common+0xa4>
 8013bea:	3601      	adds	r6, #1
 8013bec:	e7d9      	b.n	8013ba2 <_printf_common+0x8e>
	...

08013bf0 <_printf_i>:
 8013bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bf4:	7e0f      	ldrb	r7, [r1, #24]
 8013bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013bf8:	2f78      	cmp	r7, #120	; 0x78
 8013bfa:	4691      	mov	r9, r2
 8013bfc:	4680      	mov	r8, r0
 8013bfe:	460c      	mov	r4, r1
 8013c00:	469a      	mov	sl, r3
 8013c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c06:	d807      	bhi.n	8013c18 <_printf_i+0x28>
 8013c08:	2f62      	cmp	r7, #98	; 0x62
 8013c0a:	d80a      	bhi.n	8013c22 <_printf_i+0x32>
 8013c0c:	2f00      	cmp	r7, #0
 8013c0e:	f000 80d8 	beq.w	8013dc2 <_printf_i+0x1d2>
 8013c12:	2f58      	cmp	r7, #88	; 0x58
 8013c14:	f000 80a3 	beq.w	8013d5e <_printf_i+0x16e>
 8013c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c20:	e03a      	b.n	8013c98 <_printf_i+0xa8>
 8013c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c26:	2b15      	cmp	r3, #21
 8013c28:	d8f6      	bhi.n	8013c18 <_printf_i+0x28>
 8013c2a:	a101      	add	r1, pc, #4	; (adr r1, 8013c30 <_printf_i+0x40>)
 8013c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c30:	08013c89 	.word	0x08013c89
 8013c34:	08013c9d 	.word	0x08013c9d
 8013c38:	08013c19 	.word	0x08013c19
 8013c3c:	08013c19 	.word	0x08013c19
 8013c40:	08013c19 	.word	0x08013c19
 8013c44:	08013c19 	.word	0x08013c19
 8013c48:	08013c9d 	.word	0x08013c9d
 8013c4c:	08013c19 	.word	0x08013c19
 8013c50:	08013c19 	.word	0x08013c19
 8013c54:	08013c19 	.word	0x08013c19
 8013c58:	08013c19 	.word	0x08013c19
 8013c5c:	08013da9 	.word	0x08013da9
 8013c60:	08013ccd 	.word	0x08013ccd
 8013c64:	08013d8b 	.word	0x08013d8b
 8013c68:	08013c19 	.word	0x08013c19
 8013c6c:	08013c19 	.word	0x08013c19
 8013c70:	08013dcb 	.word	0x08013dcb
 8013c74:	08013c19 	.word	0x08013c19
 8013c78:	08013ccd 	.word	0x08013ccd
 8013c7c:	08013c19 	.word	0x08013c19
 8013c80:	08013c19 	.word	0x08013c19
 8013c84:	08013d93 	.word	0x08013d93
 8013c88:	682b      	ldr	r3, [r5, #0]
 8013c8a:	1d1a      	adds	r2, r3, #4
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	602a      	str	r2, [r5, #0]
 8013c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c98:	2301      	movs	r3, #1
 8013c9a:	e0a3      	b.n	8013de4 <_printf_i+0x1f4>
 8013c9c:	6820      	ldr	r0, [r4, #0]
 8013c9e:	6829      	ldr	r1, [r5, #0]
 8013ca0:	0606      	lsls	r6, r0, #24
 8013ca2:	f101 0304 	add.w	r3, r1, #4
 8013ca6:	d50a      	bpl.n	8013cbe <_printf_i+0xce>
 8013ca8:	680e      	ldr	r6, [r1, #0]
 8013caa:	602b      	str	r3, [r5, #0]
 8013cac:	2e00      	cmp	r6, #0
 8013cae:	da03      	bge.n	8013cb8 <_printf_i+0xc8>
 8013cb0:	232d      	movs	r3, #45	; 0x2d
 8013cb2:	4276      	negs	r6, r6
 8013cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cb8:	485e      	ldr	r0, [pc, #376]	; (8013e34 <_printf_i+0x244>)
 8013cba:	230a      	movs	r3, #10
 8013cbc:	e019      	b.n	8013cf2 <_printf_i+0x102>
 8013cbe:	680e      	ldr	r6, [r1, #0]
 8013cc0:	602b      	str	r3, [r5, #0]
 8013cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013cc6:	bf18      	it	ne
 8013cc8:	b236      	sxthne	r6, r6
 8013cca:	e7ef      	b.n	8013cac <_printf_i+0xbc>
 8013ccc:	682b      	ldr	r3, [r5, #0]
 8013cce:	6820      	ldr	r0, [r4, #0]
 8013cd0:	1d19      	adds	r1, r3, #4
 8013cd2:	6029      	str	r1, [r5, #0]
 8013cd4:	0601      	lsls	r1, r0, #24
 8013cd6:	d501      	bpl.n	8013cdc <_printf_i+0xec>
 8013cd8:	681e      	ldr	r6, [r3, #0]
 8013cda:	e002      	b.n	8013ce2 <_printf_i+0xf2>
 8013cdc:	0646      	lsls	r6, r0, #25
 8013cde:	d5fb      	bpl.n	8013cd8 <_printf_i+0xe8>
 8013ce0:	881e      	ldrh	r6, [r3, #0]
 8013ce2:	4854      	ldr	r0, [pc, #336]	; (8013e34 <_printf_i+0x244>)
 8013ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8013ce6:	bf0c      	ite	eq
 8013ce8:	2308      	moveq	r3, #8
 8013cea:	230a      	movne	r3, #10
 8013cec:	2100      	movs	r1, #0
 8013cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013cf2:	6865      	ldr	r5, [r4, #4]
 8013cf4:	60a5      	str	r5, [r4, #8]
 8013cf6:	2d00      	cmp	r5, #0
 8013cf8:	bfa2      	ittt	ge
 8013cfa:	6821      	ldrge	r1, [r4, #0]
 8013cfc:	f021 0104 	bicge.w	r1, r1, #4
 8013d00:	6021      	strge	r1, [r4, #0]
 8013d02:	b90e      	cbnz	r6, 8013d08 <_printf_i+0x118>
 8013d04:	2d00      	cmp	r5, #0
 8013d06:	d04d      	beq.n	8013da4 <_printf_i+0x1b4>
 8013d08:	4615      	mov	r5, r2
 8013d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8013d12:	5dc7      	ldrb	r7, [r0, r7]
 8013d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d18:	4637      	mov	r7, r6
 8013d1a:	42bb      	cmp	r3, r7
 8013d1c:	460e      	mov	r6, r1
 8013d1e:	d9f4      	bls.n	8013d0a <_printf_i+0x11a>
 8013d20:	2b08      	cmp	r3, #8
 8013d22:	d10b      	bne.n	8013d3c <_printf_i+0x14c>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	07de      	lsls	r6, r3, #31
 8013d28:	d508      	bpl.n	8013d3c <_printf_i+0x14c>
 8013d2a:	6923      	ldr	r3, [r4, #16]
 8013d2c:	6861      	ldr	r1, [r4, #4]
 8013d2e:	4299      	cmp	r1, r3
 8013d30:	bfde      	ittt	le
 8013d32:	2330      	movle	r3, #48	; 0x30
 8013d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013d3c:	1b52      	subs	r2, r2, r5
 8013d3e:	6122      	str	r2, [r4, #16]
 8013d40:	f8cd a000 	str.w	sl, [sp]
 8013d44:	464b      	mov	r3, r9
 8013d46:	aa03      	add	r2, sp, #12
 8013d48:	4621      	mov	r1, r4
 8013d4a:	4640      	mov	r0, r8
 8013d4c:	f7ff fee2 	bl	8013b14 <_printf_common>
 8013d50:	3001      	adds	r0, #1
 8013d52:	d14c      	bne.n	8013dee <_printf_i+0x1fe>
 8013d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d58:	b004      	add	sp, #16
 8013d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d5e:	4835      	ldr	r0, [pc, #212]	; (8013e34 <_printf_i+0x244>)
 8013d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013d64:	6829      	ldr	r1, [r5, #0]
 8013d66:	6823      	ldr	r3, [r4, #0]
 8013d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8013d6c:	6029      	str	r1, [r5, #0]
 8013d6e:	061d      	lsls	r5, r3, #24
 8013d70:	d514      	bpl.n	8013d9c <_printf_i+0x1ac>
 8013d72:	07df      	lsls	r7, r3, #31
 8013d74:	bf44      	itt	mi
 8013d76:	f043 0320 	orrmi.w	r3, r3, #32
 8013d7a:	6023      	strmi	r3, [r4, #0]
 8013d7c:	b91e      	cbnz	r6, 8013d86 <_printf_i+0x196>
 8013d7e:	6823      	ldr	r3, [r4, #0]
 8013d80:	f023 0320 	bic.w	r3, r3, #32
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	2310      	movs	r3, #16
 8013d88:	e7b0      	b.n	8013cec <_printf_i+0xfc>
 8013d8a:	6823      	ldr	r3, [r4, #0]
 8013d8c:	f043 0320 	orr.w	r3, r3, #32
 8013d90:	6023      	str	r3, [r4, #0]
 8013d92:	2378      	movs	r3, #120	; 0x78
 8013d94:	4828      	ldr	r0, [pc, #160]	; (8013e38 <_printf_i+0x248>)
 8013d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d9a:	e7e3      	b.n	8013d64 <_printf_i+0x174>
 8013d9c:	0659      	lsls	r1, r3, #25
 8013d9e:	bf48      	it	mi
 8013da0:	b2b6      	uxthmi	r6, r6
 8013da2:	e7e6      	b.n	8013d72 <_printf_i+0x182>
 8013da4:	4615      	mov	r5, r2
 8013da6:	e7bb      	b.n	8013d20 <_printf_i+0x130>
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	6826      	ldr	r6, [r4, #0]
 8013dac:	6961      	ldr	r1, [r4, #20]
 8013dae:	1d18      	adds	r0, r3, #4
 8013db0:	6028      	str	r0, [r5, #0]
 8013db2:	0635      	lsls	r5, r6, #24
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	d501      	bpl.n	8013dbc <_printf_i+0x1cc>
 8013db8:	6019      	str	r1, [r3, #0]
 8013dba:	e002      	b.n	8013dc2 <_printf_i+0x1d2>
 8013dbc:	0670      	lsls	r0, r6, #25
 8013dbe:	d5fb      	bpl.n	8013db8 <_printf_i+0x1c8>
 8013dc0:	8019      	strh	r1, [r3, #0]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	6123      	str	r3, [r4, #16]
 8013dc6:	4615      	mov	r5, r2
 8013dc8:	e7ba      	b.n	8013d40 <_printf_i+0x150>
 8013dca:	682b      	ldr	r3, [r5, #0]
 8013dcc:	1d1a      	adds	r2, r3, #4
 8013dce:	602a      	str	r2, [r5, #0]
 8013dd0:	681d      	ldr	r5, [r3, #0]
 8013dd2:	6862      	ldr	r2, [r4, #4]
 8013dd4:	2100      	movs	r1, #0
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f000 f96a 	bl	80140b0 <memchr>
 8013ddc:	b108      	cbz	r0, 8013de2 <_printf_i+0x1f2>
 8013dde:	1b40      	subs	r0, r0, r5
 8013de0:	6060      	str	r0, [r4, #4]
 8013de2:	6863      	ldr	r3, [r4, #4]
 8013de4:	6123      	str	r3, [r4, #16]
 8013de6:	2300      	movs	r3, #0
 8013de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013dec:	e7a8      	b.n	8013d40 <_printf_i+0x150>
 8013dee:	6923      	ldr	r3, [r4, #16]
 8013df0:	462a      	mov	r2, r5
 8013df2:	4649      	mov	r1, r9
 8013df4:	4640      	mov	r0, r8
 8013df6:	47d0      	blx	sl
 8013df8:	3001      	adds	r0, #1
 8013dfa:	d0ab      	beq.n	8013d54 <_printf_i+0x164>
 8013dfc:	6823      	ldr	r3, [r4, #0]
 8013dfe:	079b      	lsls	r3, r3, #30
 8013e00:	d413      	bmi.n	8013e2a <_printf_i+0x23a>
 8013e02:	68e0      	ldr	r0, [r4, #12]
 8013e04:	9b03      	ldr	r3, [sp, #12]
 8013e06:	4298      	cmp	r0, r3
 8013e08:	bfb8      	it	lt
 8013e0a:	4618      	movlt	r0, r3
 8013e0c:	e7a4      	b.n	8013d58 <_printf_i+0x168>
 8013e0e:	2301      	movs	r3, #1
 8013e10:	4632      	mov	r2, r6
 8013e12:	4649      	mov	r1, r9
 8013e14:	4640      	mov	r0, r8
 8013e16:	47d0      	blx	sl
 8013e18:	3001      	adds	r0, #1
 8013e1a:	d09b      	beq.n	8013d54 <_printf_i+0x164>
 8013e1c:	3501      	adds	r5, #1
 8013e1e:	68e3      	ldr	r3, [r4, #12]
 8013e20:	9903      	ldr	r1, [sp, #12]
 8013e22:	1a5b      	subs	r3, r3, r1
 8013e24:	42ab      	cmp	r3, r5
 8013e26:	dcf2      	bgt.n	8013e0e <_printf_i+0x21e>
 8013e28:	e7eb      	b.n	8013e02 <_printf_i+0x212>
 8013e2a:	2500      	movs	r5, #0
 8013e2c:	f104 0619 	add.w	r6, r4, #25
 8013e30:	e7f5      	b.n	8013e1e <_printf_i+0x22e>
 8013e32:	bf00      	nop
 8013e34:	0801fa4a 	.word	0x0801fa4a
 8013e38:	0801fa5b 	.word	0x0801fa5b

08013e3c <_read_r>:
 8013e3c:	b538      	push	{r3, r4, r5, lr}
 8013e3e:	4d07      	ldr	r5, [pc, #28]	; (8013e5c <_read_r+0x20>)
 8013e40:	4604      	mov	r4, r0
 8013e42:	4608      	mov	r0, r1
 8013e44:	4611      	mov	r1, r2
 8013e46:	2200      	movs	r2, #0
 8013e48:	602a      	str	r2, [r5, #0]
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	f000 f9fa 	bl	8014244 <_read>
 8013e50:	1c43      	adds	r3, r0, #1
 8013e52:	d102      	bne.n	8013e5a <_read_r+0x1e>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	b103      	cbz	r3, 8013e5a <_read_r+0x1e>
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	200001a4 	.word	0x200001a4

08013e60 <__swbuf_r>:
 8013e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e62:	460e      	mov	r6, r1
 8013e64:	4614      	mov	r4, r2
 8013e66:	4605      	mov	r5, r0
 8013e68:	b118      	cbz	r0, 8013e72 <__swbuf_r+0x12>
 8013e6a:	6983      	ldr	r3, [r0, #24]
 8013e6c:	b90b      	cbnz	r3, 8013e72 <__swbuf_r+0x12>
 8013e6e:	f7ff f8f7 	bl	8013060 <__sinit>
 8013e72:	4b21      	ldr	r3, [pc, #132]	; (8013ef8 <__swbuf_r+0x98>)
 8013e74:	429c      	cmp	r4, r3
 8013e76:	d12b      	bne.n	8013ed0 <__swbuf_r+0x70>
 8013e78:	686c      	ldr	r4, [r5, #4]
 8013e7a:	69a3      	ldr	r3, [r4, #24]
 8013e7c:	60a3      	str	r3, [r4, #8]
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	071a      	lsls	r2, r3, #28
 8013e82:	d52f      	bpl.n	8013ee4 <__swbuf_r+0x84>
 8013e84:	6923      	ldr	r3, [r4, #16]
 8013e86:	b36b      	cbz	r3, 8013ee4 <__swbuf_r+0x84>
 8013e88:	6923      	ldr	r3, [r4, #16]
 8013e8a:	6820      	ldr	r0, [r4, #0]
 8013e8c:	1ac0      	subs	r0, r0, r3
 8013e8e:	6963      	ldr	r3, [r4, #20]
 8013e90:	b2f6      	uxtb	r6, r6
 8013e92:	4283      	cmp	r3, r0
 8013e94:	4637      	mov	r7, r6
 8013e96:	dc04      	bgt.n	8013ea2 <__swbuf_r+0x42>
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	f7ff f84c 	bl	8012f38 <_fflush_r>
 8013ea0:	bb30      	cbnz	r0, 8013ef0 <__swbuf_r+0x90>
 8013ea2:	68a3      	ldr	r3, [r4, #8]
 8013ea4:	3b01      	subs	r3, #1
 8013ea6:	60a3      	str	r3, [r4, #8]
 8013ea8:	6823      	ldr	r3, [r4, #0]
 8013eaa:	1c5a      	adds	r2, r3, #1
 8013eac:	6022      	str	r2, [r4, #0]
 8013eae:	701e      	strb	r6, [r3, #0]
 8013eb0:	6963      	ldr	r3, [r4, #20]
 8013eb2:	3001      	adds	r0, #1
 8013eb4:	4283      	cmp	r3, r0
 8013eb6:	d004      	beq.n	8013ec2 <__swbuf_r+0x62>
 8013eb8:	89a3      	ldrh	r3, [r4, #12]
 8013eba:	07db      	lsls	r3, r3, #31
 8013ebc:	d506      	bpl.n	8013ecc <__swbuf_r+0x6c>
 8013ebe:	2e0a      	cmp	r6, #10
 8013ec0:	d104      	bne.n	8013ecc <__swbuf_r+0x6c>
 8013ec2:	4621      	mov	r1, r4
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	f7ff f837 	bl	8012f38 <_fflush_r>
 8013eca:	b988      	cbnz	r0, 8013ef0 <__swbuf_r+0x90>
 8013ecc:	4638      	mov	r0, r7
 8013ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ed0:	4b0a      	ldr	r3, [pc, #40]	; (8013efc <__swbuf_r+0x9c>)
 8013ed2:	429c      	cmp	r4, r3
 8013ed4:	d101      	bne.n	8013eda <__swbuf_r+0x7a>
 8013ed6:	68ac      	ldr	r4, [r5, #8]
 8013ed8:	e7cf      	b.n	8013e7a <__swbuf_r+0x1a>
 8013eda:	4b09      	ldr	r3, [pc, #36]	; (8013f00 <__swbuf_r+0xa0>)
 8013edc:	429c      	cmp	r4, r3
 8013ede:	bf08      	it	eq
 8013ee0:	68ec      	ldreq	r4, [r5, #12]
 8013ee2:	e7ca      	b.n	8013e7a <__swbuf_r+0x1a>
 8013ee4:	4621      	mov	r1, r4
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f000 f80c 	bl	8013f04 <__swsetup_r>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d0cb      	beq.n	8013e88 <__swbuf_r+0x28>
 8013ef0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013ef4:	e7ea      	b.n	8013ecc <__swbuf_r+0x6c>
 8013ef6:	bf00      	nop
 8013ef8:	0801f9e4 	.word	0x0801f9e4
 8013efc:	0801fa04 	.word	0x0801fa04
 8013f00:	0801f9c4 	.word	0x0801f9c4

08013f04 <__swsetup_r>:
 8013f04:	4b32      	ldr	r3, [pc, #200]	; (8013fd0 <__swsetup_r+0xcc>)
 8013f06:	b570      	push	{r4, r5, r6, lr}
 8013f08:	681d      	ldr	r5, [r3, #0]
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	460c      	mov	r4, r1
 8013f0e:	b125      	cbz	r5, 8013f1a <__swsetup_r+0x16>
 8013f10:	69ab      	ldr	r3, [r5, #24]
 8013f12:	b913      	cbnz	r3, 8013f1a <__swsetup_r+0x16>
 8013f14:	4628      	mov	r0, r5
 8013f16:	f7ff f8a3 	bl	8013060 <__sinit>
 8013f1a:	4b2e      	ldr	r3, [pc, #184]	; (8013fd4 <__swsetup_r+0xd0>)
 8013f1c:	429c      	cmp	r4, r3
 8013f1e:	d10f      	bne.n	8013f40 <__swsetup_r+0x3c>
 8013f20:	686c      	ldr	r4, [r5, #4]
 8013f22:	89a3      	ldrh	r3, [r4, #12]
 8013f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f28:	0719      	lsls	r1, r3, #28
 8013f2a:	d42c      	bmi.n	8013f86 <__swsetup_r+0x82>
 8013f2c:	06dd      	lsls	r5, r3, #27
 8013f2e:	d411      	bmi.n	8013f54 <__swsetup_r+0x50>
 8013f30:	2309      	movs	r3, #9
 8013f32:	6033      	str	r3, [r6, #0]
 8013f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f38:	81a3      	strh	r3, [r4, #12]
 8013f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f3e:	e03e      	b.n	8013fbe <__swsetup_r+0xba>
 8013f40:	4b25      	ldr	r3, [pc, #148]	; (8013fd8 <__swsetup_r+0xd4>)
 8013f42:	429c      	cmp	r4, r3
 8013f44:	d101      	bne.n	8013f4a <__swsetup_r+0x46>
 8013f46:	68ac      	ldr	r4, [r5, #8]
 8013f48:	e7eb      	b.n	8013f22 <__swsetup_r+0x1e>
 8013f4a:	4b24      	ldr	r3, [pc, #144]	; (8013fdc <__swsetup_r+0xd8>)
 8013f4c:	429c      	cmp	r4, r3
 8013f4e:	bf08      	it	eq
 8013f50:	68ec      	ldreq	r4, [r5, #12]
 8013f52:	e7e6      	b.n	8013f22 <__swsetup_r+0x1e>
 8013f54:	0758      	lsls	r0, r3, #29
 8013f56:	d512      	bpl.n	8013f7e <__swsetup_r+0x7a>
 8013f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f5a:	b141      	cbz	r1, 8013f6e <__swsetup_r+0x6a>
 8013f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f60:	4299      	cmp	r1, r3
 8013f62:	d002      	beq.n	8013f6a <__swsetup_r+0x66>
 8013f64:	4630      	mov	r0, r6
 8013f66:	f7ff f95b 	bl	8013220 <_free_r>
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8013f6e:	89a3      	ldrh	r3, [r4, #12]
 8013f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f74:	81a3      	strh	r3, [r4, #12]
 8013f76:	2300      	movs	r3, #0
 8013f78:	6063      	str	r3, [r4, #4]
 8013f7a:	6923      	ldr	r3, [r4, #16]
 8013f7c:	6023      	str	r3, [r4, #0]
 8013f7e:	89a3      	ldrh	r3, [r4, #12]
 8013f80:	f043 0308 	orr.w	r3, r3, #8
 8013f84:	81a3      	strh	r3, [r4, #12]
 8013f86:	6923      	ldr	r3, [r4, #16]
 8013f88:	b94b      	cbnz	r3, 8013f9e <__swsetup_r+0x9a>
 8013f8a:	89a3      	ldrh	r3, [r4, #12]
 8013f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f94:	d003      	beq.n	8013f9e <__swsetup_r+0x9a>
 8013f96:	4621      	mov	r1, r4
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f000 f847 	bl	801402c <__smakebuf_r>
 8013f9e:	89a0      	ldrh	r0, [r4, #12]
 8013fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013fa4:	f010 0301 	ands.w	r3, r0, #1
 8013fa8:	d00a      	beq.n	8013fc0 <__swsetup_r+0xbc>
 8013faa:	2300      	movs	r3, #0
 8013fac:	60a3      	str	r3, [r4, #8]
 8013fae:	6963      	ldr	r3, [r4, #20]
 8013fb0:	425b      	negs	r3, r3
 8013fb2:	61a3      	str	r3, [r4, #24]
 8013fb4:	6923      	ldr	r3, [r4, #16]
 8013fb6:	b943      	cbnz	r3, 8013fca <__swsetup_r+0xc6>
 8013fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013fbc:	d1ba      	bne.n	8013f34 <__swsetup_r+0x30>
 8013fbe:	bd70      	pop	{r4, r5, r6, pc}
 8013fc0:	0781      	lsls	r1, r0, #30
 8013fc2:	bf58      	it	pl
 8013fc4:	6963      	ldrpl	r3, [r4, #20]
 8013fc6:	60a3      	str	r3, [r4, #8]
 8013fc8:	e7f4      	b.n	8013fb4 <__swsetup_r+0xb0>
 8013fca:	2000      	movs	r0, #0
 8013fcc:	e7f7      	b.n	8013fbe <__swsetup_r+0xba>
 8013fce:	bf00      	nop
 8013fd0:	200000dc 	.word	0x200000dc
 8013fd4:	0801f9e4 	.word	0x0801f9e4
 8013fd8:	0801fa04 	.word	0x0801fa04
 8013fdc:	0801f9c4 	.word	0x0801f9c4

08013fe0 <__swhatbuf_r>:
 8013fe0:	b570      	push	{r4, r5, r6, lr}
 8013fe2:	460e      	mov	r6, r1
 8013fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe8:	2900      	cmp	r1, #0
 8013fea:	b096      	sub	sp, #88	; 0x58
 8013fec:	4614      	mov	r4, r2
 8013fee:	461d      	mov	r5, r3
 8013ff0:	da08      	bge.n	8014004 <__swhatbuf_r+0x24>
 8013ff2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	602a      	str	r2, [r5, #0]
 8013ffa:	061a      	lsls	r2, r3, #24
 8013ffc:	d410      	bmi.n	8014020 <__swhatbuf_r+0x40>
 8013ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014002:	e00e      	b.n	8014022 <__swhatbuf_r+0x42>
 8014004:	466a      	mov	r2, sp
 8014006:	f000 f8d3 	bl	80141b0 <_fstat_r>
 801400a:	2800      	cmp	r0, #0
 801400c:	dbf1      	blt.n	8013ff2 <__swhatbuf_r+0x12>
 801400e:	9a01      	ldr	r2, [sp, #4]
 8014010:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014014:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014018:	425a      	negs	r2, r3
 801401a:	415a      	adcs	r2, r3
 801401c:	602a      	str	r2, [r5, #0]
 801401e:	e7ee      	b.n	8013ffe <__swhatbuf_r+0x1e>
 8014020:	2340      	movs	r3, #64	; 0x40
 8014022:	2000      	movs	r0, #0
 8014024:	6023      	str	r3, [r4, #0]
 8014026:	b016      	add	sp, #88	; 0x58
 8014028:	bd70      	pop	{r4, r5, r6, pc}
	...

0801402c <__smakebuf_r>:
 801402c:	898b      	ldrh	r3, [r1, #12]
 801402e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014030:	079d      	lsls	r5, r3, #30
 8014032:	4606      	mov	r6, r0
 8014034:	460c      	mov	r4, r1
 8014036:	d507      	bpl.n	8014048 <__smakebuf_r+0x1c>
 8014038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801403c:	6023      	str	r3, [r4, #0]
 801403e:	6123      	str	r3, [r4, #16]
 8014040:	2301      	movs	r3, #1
 8014042:	6163      	str	r3, [r4, #20]
 8014044:	b002      	add	sp, #8
 8014046:	bd70      	pop	{r4, r5, r6, pc}
 8014048:	ab01      	add	r3, sp, #4
 801404a:	466a      	mov	r2, sp
 801404c:	f7ff ffc8 	bl	8013fe0 <__swhatbuf_r>
 8014050:	9900      	ldr	r1, [sp, #0]
 8014052:	4605      	mov	r5, r0
 8014054:	4630      	mov	r0, r6
 8014056:	f7ff f94d 	bl	80132f4 <_malloc_r>
 801405a:	b948      	cbnz	r0, 8014070 <__smakebuf_r+0x44>
 801405c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014060:	059a      	lsls	r2, r3, #22
 8014062:	d4ef      	bmi.n	8014044 <__smakebuf_r+0x18>
 8014064:	f023 0303 	bic.w	r3, r3, #3
 8014068:	f043 0302 	orr.w	r3, r3, #2
 801406c:	81a3      	strh	r3, [r4, #12]
 801406e:	e7e3      	b.n	8014038 <__smakebuf_r+0xc>
 8014070:	4b0d      	ldr	r3, [pc, #52]	; (80140a8 <__smakebuf_r+0x7c>)
 8014072:	62b3      	str	r3, [r6, #40]	; 0x28
 8014074:	89a3      	ldrh	r3, [r4, #12]
 8014076:	6020      	str	r0, [r4, #0]
 8014078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801407c:	81a3      	strh	r3, [r4, #12]
 801407e:	9b00      	ldr	r3, [sp, #0]
 8014080:	6163      	str	r3, [r4, #20]
 8014082:	9b01      	ldr	r3, [sp, #4]
 8014084:	6120      	str	r0, [r4, #16]
 8014086:	b15b      	cbz	r3, 80140a0 <__smakebuf_r+0x74>
 8014088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801408c:	4630      	mov	r0, r6
 801408e:	f000 f8a1 	bl	80141d4 <_isatty_r>
 8014092:	b128      	cbz	r0, 80140a0 <__smakebuf_r+0x74>
 8014094:	89a3      	ldrh	r3, [r4, #12]
 8014096:	f023 0303 	bic.w	r3, r3, #3
 801409a:	f043 0301 	orr.w	r3, r3, #1
 801409e:	81a3      	strh	r3, [r4, #12]
 80140a0:	89a0      	ldrh	r0, [r4, #12]
 80140a2:	4305      	orrs	r5, r0
 80140a4:	81a5      	strh	r5, [r4, #12]
 80140a6:	e7cd      	b.n	8014044 <__smakebuf_r+0x18>
 80140a8:	08012ff9 	.word	0x08012ff9
 80140ac:	00000000 	.word	0x00000000

080140b0 <memchr>:
 80140b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80140b4:	2a10      	cmp	r2, #16
 80140b6:	db2b      	blt.n	8014110 <memchr+0x60>
 80140b8:	f010 0f07 	tst.w	r0, #7
 80140bc:	d008      	beq.n	80140d0 <memchr+0x20>
 80140be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80140c2:	3a01      	subs	r2, #1
 80140c4:	428b      	cmp	r3, r1
 80140c6:	d02d      	beq.n	8014124 <memchr+0x74>
 80140c8:	f010 0f07 	tst.w	r0, #7
 80140cc:	b342      	cbz	r2, 8014120 <memchr+0x70>
 80140ce:	d1f6      	bne.n	80140be <memchr+0xe>
 80140d0:	b4f0      	push	{r4, r5, r6, r7}
 80140d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80140d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80140da:	f022 0407 	bic.w	r4, r2, #7
 80140de:	f07f 0700 	mvns.w	r7, #0
 80140e2:	2300      	movs	r3, #0
 80140e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80140e8:	3c08      	subs	r4, #8
 80140ea:	ea85 0501 	eor.w	r5, r5, r1
 80140ee:	ea86 0601 	eor.w	r6, r6, r1
 80140f2:	fa85 f547 	uadd8	r5, r5, r7
 80140f6:	faa3 f587 	sel	r5, r3, r7
 80140fa:	fa86 f647 	uadd8	r6, r6, r7
 80140fe:	faa5 f687 	sel	r6, r5, r7
 8014102:	b98e      	cbnz	r6, 8014128 <memchr+0x78>
 8014104:	d1ee      	bne.n	80140e4 <memchr+0x34>
 8014106:	bcf0      	pop	{r4, r5, r6, r7}
 8014108:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801410c:	f002 0207 	and.w	r2, r2, #7
 8014110:	b132      	cbz	r2, 8014120 <memchr+0x70>
 8014112:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014116:	3a01      	subs	r2, #1
 8014118:	ea83 0301 	eor.w	r3, r3, r1
 801411c:	b113      	cbz	r3, 8014124 <memchr+0x74>
 801411e:	d1f8      	bne.n	8014112 <memchr+0x62>
 8014120:	2000      	movs	r0, #0
 8014122:	4770      	bx	lr
 8014124:	3801      	subs	r0, #1
 8014126:	4770      	bx	lr
 8014128:	2d00      	cmp	r5, #0
 801412a:	bf06      	itte	eq
 801412c:	4635      	moveq	r5, r6
 801412e:	3803      	subeq	r0, #3
 8014130:	3807      	subne	r0, #7
 8014132:	f015 0f01 	tst.w	r5, #1
 8014136:	d107      	bne.n	8014148 <memchr+0x98>
 8014138:	3001      	adds	r0, #1
 801413a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801413e:	bf02      	ittt	eq
 8014140:	3001      	addeq	r0, #1
 8014142:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8014146:	3001      	addeq	r0, #1
 8014148:	bcf0      	pop	{r4, r5, r6, r7}
 801414a:	3801      	subs	r0, #1
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <_realloc_r>:
 8014150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014154:	4680      	mov	r8, r0
 8014156:	4614      	mov	r4, r2
 8014158:	460e      	mov	r6, r1
 801415a:	b921      	cbnz	r1, 8014166 <_realloc_r+0x16>
 801415c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014160:	4611      	mov	r1, r2
 8014162:	f7ff b8c7 	b.w	80132f4 <_malloc_r>
 8014166:	b92a      	cbnz	r2, 8014174 <_realloc_r+0x24>
 8014168:	f7ff f85a 	bl	8013220 <_free_r>
 801416c:	4625      	mov	r5, r4
 801416e:	4628      	mov	r0, r5
 8014170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014174:	f000 f83e 	bl	80141f4 <_malloc_usable_size_r>
 8014178:	4284      	cmp	r4, r0
 801417a:	4607      	mov	r7, r0
 801417c:	d802      	bhi.n	8014184 <_realloc_r+0x34>
 801417e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014182:	d812      	bhi.n	80141aa <_realloc_r+0x5a>
 8014184:	4621      	mov	r1, r4
 8014186:	4640      	mov	r0, r8
 8014188:	f7ff f8b4 	bl	80132f4 <_malloc_r>
 801418c:	4605      	mov	r5, r0
 801418e:	2800      	cmp	r0, #0
 8014190:	d0ed      	beq.n	801416e <_realloc_r+0x1e>
 8014192:	42bc      	cmp	r4, r7
 8014194:	4622      	mov	r2, r4
 8014196:	4631      	mov	r1, r6
 8014198:	bf28      	it	cs
 801419a:	463a      	movcs	r2, r7
 801419c:	f7ff f810 	bl	80131c0 <memcpy>
 80141a0:	4631      	mov	r1, r6
 80141a2:	4640      	mov	r0, r8
 80141a4:	f7ff f83c 	bl	8013220 <_free_r>
 80141a8:	e7e1      	b.n	801416e <_realloc_r+0x1e>
 80141aa:	4635      	mov	r5, r6
 80141ac:	e7df      	b.n	801416e <_realloc_r+0x1e>
	...

080141b0 <_fstat_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4d07      	ldr	r5, [pc, #28]	; (80141d0 <_fstat_r+0x20>)
 80141b4:	2300      	movs	r3, #0
 80141b6:	4604      	mov	r4, r0
 80141b8:	4608      	mov	r0, r1
 80141ba:	4611      	mov	r1, r2
 80141bc:	602b      	str	r3, [r5, #0]
 80141be:	f000 f829 	bl	8014214 <_fstat>
 80141c2:	1c43      	adds	r3, r0, #1
 80141c4:	d102      	bne.n	80141cc <_fstat_r+0x1c>
 80141c6:	682b      	ldr	r3, [r5, #0]
 80141c8:	b103      	cbz	r3, 80141cc <_fstat_r+0x1c>
 80141ca:	6023      	str	r3, [r4, #0]
 80141cc:	bd38      	pop	{r3, r4, r5, pc}
 80141ce:	bf00      	nop
 80141d0:	200001a4 	.word	0x200001a4

080141d4 <_isatty_r>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	4d06      	ldr	r5, [pc, #24]	; (80141f0 <_isatty_r+0x1c>)
 80141d8:	2300      	movs	r3, #0
 80141da:	4604      	mov	r4, r0
 80141dc:	4608      	mov	r0, r1
 80141de:	602b      	str	r3, [r5, #0]
 80141e0:	f000 f820 	bl	8014224 <_isatty>
 80141e4:	1c43      	adds	r3, r0, #1
 80141e6:	d102      	bne.n	80141ee <_isatty_r+0x1a>
 80141e8:	682b      	ldr	r3, [r5, #0]
 80141ea:	b103      	cbz	r3, 80141ee <_isatty_r+0x1a>
 80141ec:	6023      	str	r3, [r4, #0]
 80141ee:	bd38      	pop	{r3, r4, r5, pc}
 80141f0:	200001a4 	.word	0x200001a4

080141f4 <_malloc_usable_size_r>:
 80141f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141f8:	1f18      	subs	r0, r3, #4
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	bfbc      	itt	lt
 80141fe:	580b      	ldrlt	r3, [r1, r0]
 8014200:	18c0      	addlt	r0, r0, r3
 8014202:	4770      	bx	lr

08014204 <_close>:
 8014204:	4b02      	ldr	r3, [pc, #8]	; (8014210 <_close+0xc>)
 8014206:	2258      	movs	r2, #88	; 0x58
 8014208:	601a      	str	r2, [r3, #0]
 801420a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801420e:	4770      	bx	lr
 8014210:	200001a4 	.word	0x200001a4

08014214 <_fstat>:
 8014214:	4b02      	ldr	r3, [pc, #8]	; (8014220 <_fstat+0xc>)
 8014216:	2258      	movs	r2, #88	; 0x58
 8014218:	601a      	str	r2, [r3, #0]
 801421a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801421e:	4770      	bx	lr
 8014220:	200001a4 	.word	0x200001a4

08014224 <_isatty>:
 8014224:	4b02      	ldr	r3, [pc, #8]	; (8014230 <_isatty+0xc>)
 8014226:	2258      	movs	r2, #88	; 0x58
 8014228:	601a      	str	r2, [r3, #0]
 801422a:	2000      	movs	r0, #0
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	200001a4 	.word	0x200001a4

08014234 <_lseek>:
 8014234:	4b02      	ldr	r3, [pc, #8]	; (8014240 <_lseek+0xc>)
 8014236:	2258      	movs	r2, #88	; 0x58
 8014238:	601a      	str	r2, [r3, #0]
 801423a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801423e:	4770      	bx	lr
 8014240:	200001a4 	.word	0x200001a4

08014244 <_read>:
 8014244:	4b02      	ldr	r3, [pc, #8]	; (8014250 <_read+0xc>)
 8014246:	2258      	movs	r2, #88	; 0x58
 8014248:	601a      	str	r2, [r3, #0]
 801424a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801424e:	4770      	bx	lr
 8014250:	200001a4 	.word	0x200001a4

08014254 <_sbrk>:
 8014254:	4a04      	ldr	r2, [pc, #16]	; (8014268 <_sbrk+0x14>)
 8014256:	4905      	ldr	r1, [pc, #20]	; (801426c <_sbrk+0x18>)
 8014258:	6813      	ldr	r3, [r2, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	bf08      	it	eq
 801425e:	460b      	moveq	r3, r1
 8014260:	4418      	add	r0, r3
 8014262:	6010      	str	r0, [r2, #0]
 8014264:	4618      	mov	r0, r3
 8014266:	4770      	bx	lr
 8014268:	200001a8 	.word	0x200001a8
 801426c:	200001ac 	.word	0x200001ac

08014270 <_write>:
 8014270:	4b02      	ldr	r3, [pc, #8]	; (801427c <_write+0xc>)
 8014272:	2258      	movs	r2, #88	; 0x58
 8014274:	601a      	str	r2, [r3, #0]
 8014276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801427a:	4770      	bx	lr
 801427c:	200001a4 	.word	0x200001a4

Disassembly of section .init:

08014280 <_init>:
 8014280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014282:	bf00      	nop

Disassembly of section .fini:

08014284 <_fini>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	bf00      	nop
