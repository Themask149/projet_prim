
Build/WolfSSLClient.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <CbIORecv>:

    return (ret == STATUS_OK) ? sz : WOLFSSL_CBIO_ERR_GENERAL;
#else
    return ret;
#endif
}
 8000000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000004:	4770      	bx	lr
	...

08000008 <tls_client>:
    return ret;
#endif
}

static int tls_client(void)
{
 8000008:	b570      	push	{r4, r5, r6, lr}
    char msg[] = "Hello WolfSSL!\r\n";
 800000a:	4b40      	ldr	r3, [pc, #256]	; (800010c <tls_client+0x104>)
{
 800000c:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
    char msg[] = "Hello WolfSSL!\r\n";
 8000010:	aa01      	add	r2, sp, #4
 8000012:	f103 0510 	add.w	r5, r3, #16
 8000016:	6818      	ldr	r0, [r3, #0]
 8000018:	6859      	ldr	r1, [r3, #4]
 800001a:	4614      	mov	r4, r2
 800001c:	c403      	stmia	r4!, {r0, r1}
 800001e:	3308      	adds	r3, #8
 8000020:	42ab      	cmp	r3, r5
 8000022:	4622      	mov	r2, r4
 8000024:	d1f7      	bne.n	8000016 <tls_client+0xe>
 8000026:	781b      	ldrb	r3, [r3, #0]
 8000028:	7023      	strb	r3, [r4, #0]
    char reply[MAXSZ];
    int ret, msgSz, error;
    WOLFSSL* ssl = NULL;
    WOLFSSL_CTX* ctx = NULL;

    if ((ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method())) == NULL) {
 800002a:	f009 f8d2 	bl	80091d2 <wolfTLSv1_2_client_method>
 800002e:	f007 feb7 	bl	8007da0 <wolfSSL_CTX_new>
 8000032:	4605      	mov	r5, r0
 8000034:	b950      	cbnz	r0, 800004c <tls_client+0x44>
        printf("CTXnew failed.\n");
 8000036:	4836      	ldr	r0, [pc, #216]	; (8000110 <tls_client+0x108>)
 8000038:	f01d fdc2 	bl	801dbc0 <iprintf>
    WOLFSSL* ssl = NULL;
 800003c:	2400      	movs	r4, #0
    }

    return 0;

fail:
    wolfSSL_shutdown(ssl);
 800003e:	4620      	mov	r0, r4
 8000040:	f007 f97e 	bl	8007340 <wolfSSL_shutdown>
    wolfSSL_free(ssl);
 8000044:	4620      	mov	r0, r4
 8000046:	f007 f95a 	bl	80072fe <wolfSSL_free>
 800004a:	e026      	b.n	800009a <tls_client+0x92>
    wolfSSL_CTX_set_verify(ctx, WOLFSSL_VERIFY_NONE, NULL);
 800004c:	2200      	movs	r2, #0
 800004e:	4611      	mov	r1, r2
 8000050:	f007 fb4c 	bl	80076ec <wolfSSL_CTX_set_verify>
    if ((ret = wolfSSL_CTX_set_cipher_list(ctx, "ECDHE-ECDSA-AES128-SHA256")) != WOLFSSL_SUCCESS) {
 8000054:	492f      	ldr	r1, [pc, #188]	; (8000114 <tls_client+0x10c>)
 8000056:	4628      	mov	r0, r5
 8000058:	f007 fb65 	bl	8007726 <wolfSSL_CTX_set_cipher_list>
 800005c:	2801      	cmp	r0, #1
 800005e:	4604      	mov	r4, r0
 8000060:	d007      	beq.n	8000072 <tls_client+0x6a>
        wolfSSL_CTX_free(ctx);
 8000062:	4628      	mov	r0, r5
 8000064:	f007 f92f 	bl	80072c6 <wolfSSL_CTX_free>
        printf("CTXset_cipher_list failed, error: %d\n", ret);
 8000068:	4621      	mov	r1, r4
 800006a:	482b      	ldr	r0, [pc, #172]	; (8000118 <tls_client+0x110>)
 800006c:	f01d fda8 	bl	801dbc0 <iprintf>
 8000070:	e7e4      	b.n	800003c <tls_client+0x34>
    wolfSSL_CTX_SetIORecv(ctx, CbIORecv);
 8000072:	492a      	ldr	r1, [pc, #168]	; (800011c <tls_client+0x114>)
 8000074:	4628      	mov	r0, r5
 8000076:	f009 f8af 	bl	80091d8 <wolfSSL_CTX_SetIORecv>
    wolfSSL_CTX_SetIOSend(ctx, CbIOSend);
 800007a:	4929      	ldr	r1, [pc, #164]	; (8000120 <tls_client+0x118>)
 800007c:	4628      	mov	r0, r5
 800007e:	f009 f8ae 	bl	80091de <wolfSSL_CTX_SetIOSend>
    if ((ssl = wolfSSL_new(ctx)) == NULL) {
 8000082:	4628      	mov	r0, r5
 8000084:	f007 f923 	bl	80072ce <wolfSSL_new>
 8000088:	4604      	mov	r4, r0
 800008a:	b970      	cbnz	r0, 80000aa <tls_client+0xa2>
        error = wolfSSL_get_error(ssl, 0);
 800008c:	4601      	mov	r1, r0
 800008e:	f007 f9a1 	bl	80073d4 <wolfSSL_get_error>
 8000092:	4601      	mov	r1, r0
        printf("wolfSSL_new failed %d\n", error);
 8000094:	4823      	ldr	r0, [pc, #140]	; (8000124 <tls_client+0x11c>)
 8000096:	f01d fd93 	bl	801dbc0 <iprintf>
    wolfSSL_CTX_free(ctx);
 800009a:	4628      	mov	r0, r5
 800009c:	f007 f913 	bl	80072c6 <wolfSSL_CTX_free>

    return -1;
 80000a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80000a4:	f50d 6d83 	add.w	sp, sp, #1048	; 0x418
 80000a8:	bd70      	pop	{r4, r5, r6, pc}
        ret = wolfSSL_connect(ssl);
 80000aa:	4620      	mov	r0, r4
 80000ac:	f007 fb4e 	bl	800774c <wolfSSL_connect>
        error = wolfSSL_get_error(ssl, 0);
 80000b0:	2100      	movs	r1, #0
        ret = wolfSSL_connect(ssl);
 80000b2:	4606      	mov	r6, r0
        error = wolfSSL_get_error(ssl, 0);
 80000b4:	4620      	mov	r0, r4
 80000b6:	f007 f98d 	bl	80073d4 <wolfSSL_get_error>
        if (ret != WOLFSSL_SUCCESS) {
 80000ba:	2e01      	cmp	r6, #1
        error = wolfSSL_get_error(ssl, 0);
 80000bc:	4601      	mov	r1, r0
        if (ret != WOLFSSL_SUCCESS) {
 80000be:	d006      	beq.n	80000ce <tls_client+0xc6>
            if (error != WOLFSSL_ERROR_WANT_READ && error != WOLFSSL_ERROR_WANT_WRITE) {
 80000c0:	1e83      	subs	r3, r0, #2
 80000c2:	2b01      	cmp	r3, #1
 80000c4:	d9f1      	bls.n	80000aa <tls_client+0xa2>
                printf("wolfSSL connect failed with return code %d\n", error);
 80000c6:	4818      	ldr	r0, [pc, #96]	; (8000128 <tls_client+0x120>)
 80000c8:	f01d fd7a 	bl	801dbc0 <iprintf>
                goto fail;
 80000cc:	e7b7      	b.n	800003e <tls_client+0x36>
        ret   = wolfSSL_write(ssl, msg, msgSz);
 80000ce:	2211      	movs	r2, #17
 80000d0:	a901      	add	r1, sp, #4
 80000d2:	4620      	mov	r0, r4
 80000d4:	f007 f919 	bl	800730a <wolfSSL_write>
        error = wolfSSL_get_error(ssl, 0);
 80000d8:	2100      	movs	r1, #0
        ret   = wolfSSL_write(ssl, msg, msgSz);
 80000da:	4606      	mov	r6, r0
        error = wolfSSL_get_error(ssl, 0);
 80000dc:	4620      	mov	r0, r4
 80000de:	f007 f979 	bl	80073d4 <wolfSSL_get_error>
        if (ret != msgSz) {
 80000e2:	2e11      	cmp	r6, #17
 80000e4:	d002      	beq.n	80000ec <tls_client+0xe4>
            if (error != WOLFSSL_ERROR_WANT_READ && error != WOLFSSL_ERROR_WANT_WRITE) {
 80000e6:	3802      	subs	r0, #2
 80000e8:	2801      	cmp	r0, #1
 80000ea:	d8a8      	bhi.n	800003e <tls_client+0x36>
        ret = wolfSSL_read(ssl, reply, sizeof(reply) - 1);
 80000ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80000f0:	a906      	add	r1, sp, #24
 80000f2:	4620      	mov	r0, r4
 80000f4:	f007 f916 	bl	8007324 <wolfSSL_read>
        error = wolfSSL_get_error(ssl, 0);
 80000f8:	2100      	movs	r1, #0
        ret = wolfSSL_read(ssl, reply, sizeof(reply) - 1);
 80000fa:	4606      	mov	r6, r0
        error = wolfSSL_get_error(ssl, 0);
 80000fc:	4620      	mov	r0, r4
 80000fe:	f007 f969 	bl	80073d4 <wolfSSL_get_error>
        if (ret < 0) {
 8000102:	2e00      	cmp	r6, #0
 8000104:	dbef      	blt.n	80000e6 <tls_client+0xde>
    return 0;
 8000106:	2000      	movs	r0, #0
 8000108:	e7cc      	b.n	80000a4 <tls_client+0x9c>
 800010a:	bf00      	nop
 800010c:	0801e7fb 	.word	0x0801e7fb
 8000110:	0801e768 	.word	0x0801e768
 8000114:	0801e778 	.word	0x0801e778
 8000118:	0801e792 	.word	0x0801e792
 800011c:	08000001 	.word	0x08000001
 8000120:	0800012d 	.word	0x0800012d
 8000124:	0801e7b8 	.word	0x0801e7b8
 8000128:	0801e7cf 	.word	0x0801e7cf

0800012c <CbIOSend>:
 800012c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000130:	4770      	bx	lr

08000132 <main>:
#endif /* !WOLFCRYPT_ONLY && !NO_WOLFSSL_CLIENT */


int main(void)
{
 8000132:	b510      	push	{r4, lr}
    int ret;

#if !defined(WOLFCRYPT_ONLY) && !defined(NO_WOLFSSL_CLIENT)
    wolfSSL_Init();
 8000134:	f007 fdd6 	bl	8007ce4 <wolfSSL_Init>

    ret = tls_client();
 8000138:	f7ff ff66 	bl	8000008 <tls_client>
 800013c:	4604      	mov	r4, r0

    wolfSSL_Cleanup();
 800013e:	f007 fd7b 	bl	8007c38 <wolfSSL_Cleanup>
#else
    ret = NOT_COMPILED_IN;
#endif

	return ret;
}
 8000142:	4620      	mov	r0, r4
 8000144:	bd10      	pop	{r4, pc}
	...

08000148 <my_time>:
static int gTimeMs;
static int hw_get_time_sec(void)
{
    #warning Must implement your own time source if validating certificates

	return ++gTimeMs;
 8000148:	4b02      	ldr	r3, [pc, #8]	; (8000154 <my_time+0xc>)
 800014a:	6818      	ldr	r0, [r3, #0]
 800014c:	3001      	adds	r0, #1
 800014e:	6018      	str	r0, [r3, #0]
/* This is used by wolfCrypt asn.c for cert time checking */
unsigned long my_time(unsigned long* timer)
{
    (void)timer;
    return hw_get_time_sec();
}
 8000150:	4770      	bx	lr
 8000152:	bf00      	nop
 8000154:	20000068 	.word	0x20000068

08000158 <LowResTimer>:
	return ++gTimeMs;
 8000158:	4b02      	ldr	r3, [pc, #8]	; (8000164 <LowResTimer+0xc>)
 800015a:	6818      	ldr	r0, [r3, #0]
 800015c:	3001      	adds	r0, #1
 800015e:	6018      	str	r0, [r3, #0]
#ifndef WOLFCRYPT_ONLY
/* This is used by TLS only */
unsigned int LowResTimer(void)
{
    return hw_get_time_sec();
}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	20000068 	.word	0x20000068

08000168 <hw_rand>:
static unsigned int gCounter;
unsigned int hw_rand(void)
{
    #warning Must implement your own random source

    return ++gCounter;
 8000168:	4b02      	ldr	r3, [pc, #8]	; (8000174 <hw_rand+0xc>)
 800016a:	6818      	ldr	r0, [r3, #0]
 800016c:	3001      	adds	r0, #1
 800016e:	6018      	str	r0, [r3, #0]
}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000064 	.word	0x20000064

08000178 <my_rng_gen_block>:
{
    return hw_rand();
}

int my_rng_gen_block(unsigned char* output, unsigned int sz)
{
 8000178:	b570      	push	{r4, r5, r6, lr}
    uint32_t i = 0;
 800017a:	2200      	movs	r2, #0
{
 800017c:	4604      	mov	r4, r0

    while (i < sz)
 800017e:	428a      	cmp	r2, r1
 8000180:	d301      	bcc.n	8000186 <my_rng_gen_block+0xe>
            i += sizeof(CUSTOM_RAND_TYPE);
        }
    }

    return 0;
}
 8000182:	2000      	movs	r0, #0
 8000184:	bd70      	pop	{r4, r5, r6, pc}
        if( (i + sizeof(CUSTOM_RAND_TYPE)) > sz ||
 8000186:	1d15      	adds	r5, r2, #4
 8000188:	428d      	cmp	r5, r1
            ((uint32_t)&output[i] % sizeof(CUSTOM_RAND_TYPE)) != 0
 800018a:	eb04 0602 	add.w	r6, r4, r2
        if( (i + sizeof(CUSTOM_RAND_TYPE)) > sz ||
 800018e:	d801      	bhi.n	8000194 <my_rng_gen_block+0x1c>
 8000190:	07b3      	lsls	r3, r6, #30
 8000192:	d005      	beq.n	80001a0 <my_rng_gen_block+0x28>
    return hw_rand();
 8000194:	f7ff ffe8 	bl	8000168 <hw_rand>
            output[i++] = (unsigned char)my_rng_seed_gen();
 8000198:	1c55      	adds	r5, r2, #1
 800019a:	7030      	strb	r0, [r6, #0]
{
 800019c:	462a      	mov	r2, r5
 800019e:	e7ee      	b.n	800017e <my_rng_gen_block+0x6>
    return hw_rand();
 80001a0:	f7ff ffe2 	bl	8000168 <hw_rand>
            *((CUSTOM_RAND_TYPE*)&output[i]) = my_rng_seed_gen();
 80001a4:	6030      	str	r0, [r6, #0]
            i += sizeof(CUSTOM_RAND_TYPE);
 80001a6:	e7f9      	b.n	800019c <my_rng_gen_block+0x24>

080001a8 <memcpy32>:
extern uint32_t __heap_end__[];

/* Copy memory: src=Source, dst_beg=Destination Begin, dst_end=Destination End */
void memcpy32(uint32_t* src, uint32_t* dst_beg, uint32_t* dst_end)
{
    while (dst_beg < dst_end) {
 80001a8:	428a      	cmp	r2, r1
 80001aa:	d800      	bhi.n	80001ae <memcpy32+0x6>
        *dst_beg++ = *src++;
    }
}
 80001ac:	4770      	bx	lr
        *dst_beg++ = *src++;
 80001ae:	f850 3b04 	ldr.w	r3, [r0], #4
 80001b2:	f841 3b04 	str.w	r3, [r1], #4
 80001b6:	e7f7      	b.n	80001a8 <memcpy32>

080001b8 <meminit32>:
/* Zero address in range */
void meminit32(uint32_t* start, uint32_t* end)
{
    while (start < end) {
        *start++ = 0;
 80001b8:	2300      	movs	r3, #0
    while (start < end) {
 80001ba:	4288      	cmp	r0, r1
 80001bc:	d300      	bcc.n	80001c0 <meminit32+0x8>
    }
}
 80001be:	4770      	bx	lr
        *start++ = 0;
 80001c0:	f840 3b04 	str.w	r3, [r0], #4
 80001c4:	e7f9      	b.n	80001ba <meminit32+0x2>
	...

080001c8 <reset_handler>:
#endif /* USE_WOLF_ARM_STARTUP */

/* Entry Point */
void reset_handler(void)
{
 80001c8:	b508      	push	{r3, lr}
#ifdef USE_WOLF_ARM_STARTUP
    /* Init sections */
    memcpy32(__data_load_start__, __data_start__, __data_end__);
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <reset_handler+0x28>)
 80001cc:	4909      	ldr	r1, [pc, #36]	; (80001f4 <reset_handler+0x2c>)
 80001ce:	480a      	ldr	r0, [pc, #40]	; (80001f8 <reset_handler+0x30>)
 80001d0:	f7ff ffea 	bl	80001a8 <memcpy32>
    meminit32(__bss_start__, __bss_end__);
 80001d4:	4909      	ldr	r1, [pc, #36]	; (80001fc <reset_handler+0x34>)
 80001d6:	480a      	ldr	r0, [pc, #40]	; (8000200 <reset_handler+0x38>)
 80001d8:	f7ff ffee 	bl	80001b8 <meminit32>

    /* Init heap */
    __heap_start__[0] = 0;
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <reset_handler+0x3c>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
    __heap_start__[1] = ((uintptr_t)__heap_end__ - (uintptr_t)__heap_start__);
 80001e2:	4a09      	ldr	r2, [pc, #36]	; (8000208 <reset_handler+0x40>)
 80001e4:	1ad2      	subs	r2, r2, r3
 80001e6:	605a      	str	r2, [r3, #4]
#endif /* USE_WOLF_ARM_STARTUP */

    /* Start main */
    extern int main(void);
    main();
 80001e8:	f7ff ffa3 	bl	8000132 <main>

    /* Application has ended, so busy wait */
    while(1);
 80001ec:	e7fe      	b.n	80001ec <reset_handler+0x24>
 80001ee:	bf00      	nop
 80001f0:	0801e7cc 	.word	0x0801e7cc
 80001f4:	0801e768 	.word	0x0801e768
 80001f8:	0801e768 	.word	0x0801e768
 80001fc:	200000c0 	.word	0x200000c0
 8000200:	20000064 	.word	0x20000064
 8000204:	200000c0 	.word	0x200000c0
 8000208:	200000c0 	.word	0x200000c0

0800020c <ForceZero>:
            *w++ = 0;
        }
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 800020c:	4401      	add	r1, r0
 800020e:	2300      	movs	r3, #0
 8000210:	4288      	cmp	r0, r1
 8000212:	d100      	bne.n	8000216 <ForceZero+0xa>
}
 8000214:	4770      	bx	lr
    while (len--) *z++ = 0;
 8000216:	f800 3b01 	strb.w	r3, [r0], #1
 800021a:	e7f9      	b.n	8000210 <ForceZero+0x4>

0800021c <c24to32>:
#ifndef WOLFSSL_NO_INT_DECODE
/* convert a 24 bit integer into a 32 bit one */
WC_MISC_STATIC WC_INLINE void c24to32(const word24 wc_u24, word32* wc_u32)
{
    *wc_u32 = ((word32)wc_u24[0] << 16) |
              ((word32)wc_u24[1] << 8) |
 800021c:	7843      	ldrb	r3, [r0, #1]
    *wc_u32 = ((word32)wc_u24[0] << 16) |
 800021e:	7802      	ldrb	r2, [r0, #0]
              ((word32)wc_u24[1] << 8) |
 8000220:	021b      	lsls	r3, r3, #8
    *wc_u32 = ((word32)wc_u24[0] << 16) |
 8000222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
               (word32)wc_u24[2];
 8000226:	7882      	ldrb	r2, [r0, #2]
              ((word32)wc_u24[1] << 8) |
 8000228:	4313      	orrs	r3, r2
    *wc_u32 = ((word32)wc_u24[0] << 16) |
 800022a:	600b      	str	r3, [r1, #0]
}
 800022c:	4770      	bx	lr

0800022e <ato16>:
}

/* convert opaque to 16 bit integer */
WC_MISC_STATIC WC_INLINE void ato16(const byte* c, word16* wc_u16)
{
    *wc_u16 = (word16) ((c[0] << 8) | (c[1]));
 800022e:	8803      	ldrh	r3, [r0, #0]
 8000230:	ba5b      	rev16	r3, r3
 8000232:	800b      	strh	r3, [r1, #0]
}
 8000234:	4770      	bx	lr
	...

08000238 <CipherRequires>:

/* Does this cipher suite (first, second) have the requirement
   an ephemeral key exchange will still require the key for signing
   the key exchange so ECDHE_RSA requires an rsa key thus rsa_kea */
static int CipherRequires(byte first, byte second, int requirement)
{
 8000238:	4603      	mov	r3, r0
            return 1;
    }
#endif /* HAVE_CHACHA */

    /* ECC extensions */
    if (first == ECC_BYTE) {
 800023a:	2bc0      	cmp	r3, #192	; 0xc0
{
 800023c:	4610      	mov	r0, r2
    if (first == ECC_BYTE) {
 800023e:	d15e      	bne.n	80002fe <CipherRequires+0xc6>

        switch (second) {
 8000240:	293a      	cmp	r1, #58	; 0x3a
 8000242:	d844      	bhi.n	80002ce <CipherRequires+0x96>
 8000244:	2922      	cmp	r1, #34	; 0x22
 8000246:	d807      	bhi.n	8000258 <CipherRequires+0x20>
 8000248:	2906      	cmp	r1, #6
 800024a:	d03e      	beq.n	80002ca <CipherRequires+0x92>
 800024c:	d83a      	bhi.n	80002c4 <CipherRequires+0x8c>
 800024e:	3903      	subs	r1, #3
 8000250:	2902      	cmp	r1, #2
 8000252:	d945      	bls.n	80002e0 <CipherRequires+0xa8>
                    return 1;
                break;
    #endif /* HAVE_ECC || HAVE_CURVE25519 || HAVE_CURVE448 */
            default:
                WOLFSSL_MSG("Unsupported cipher suite, CipherRequires ECC PSK");
                return 0;
 8000254:	2000      	movs	r0, #0
    }  /* if ECC / Normal suites else */

#endif /* !WOLFSSL_NO_TLS12 */

    return 0;
}
 8000256:	4770      	bx	lr
        switch (second) {
 8000258:	3923      	subs	r1, #35	; 0x23
 800025a:	2917      	cmp	r1, #23
 800025c:	d8fa      	bhi.n	8000254 <CipherRequires+0x1c>
 800025e:	a301      	add	r3, pc, #4	; (adr r3, 8000264 <CipherRequires+0x2c>)
 8000260:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000264:	080002cb 	.word	0x080002cb
 8000268:	080002cb 	.word	0x080002cb
 800026c:	080002f3 	.word	0x080002f3
 8000270:	080002f3 	.word	0x080002f3
 8000274:	08000255 	.word	0x08000255
 8000278:	08000255 	.word	0x08000255
 800027c:	08000255 	.word	0x08000255
 8000280:	08000255 	.word	0x08000255
 8000284:	080002db 	.word	0x080002db
 8000288:	080002db 	.word	0x080002db
 800028c:	080002eb 	.word	0x080002eb
 8000290:	080002eb 	.word	0x080002eb
 8000294:	08000255 	.word	0x08000255
 8000298:	08000255 	.word	0x08000255
 800029c:	08000255 	.word	0x08000255
 80002a0:	08000255 	.word	0x08000255
 80002a4:	08000255 	.word	0x08000255
 80002a8:	08000255 	.word	0x08000255
 80002ac:	08000255 	.word	0x08000255
 80002b0:	08000255 	.word	0x08000255
 80002b4:	08000307 	.word	0x08000307
 80002b8:	08000255 	.word	0x08000255
 80002bc:	08000255 	.word	0x08000255
 80002c0:	08000307 	.word	0x08000307
 80002c4:	3908      	subs	r1, #8
 80002c6:	2902      	cmp	r1, #2
 80002c8:	d8c4      	bhi.n	8000254 <CipherRequires+0x1c>
                if (requirement == REQUIRES_ECC)
 80002ca:	2802      	cmp	r0, #2
 80002cc:	e009      	b.n	80002e2 <CipherRequires+0xaa>
        switch (second) {
 80002ce:	29ac      	cmp	r1, #172	; 0xac
 80002d0:	d003      	beq.n	80002da <CipherRequires+0xa2>
 80002d2:	3152      	adds	r1, #82	; 0x52
 80002d4:	b2c9      	uxtb	r1, r1
 80002d6:	2901      	cmp	r1, #1
 80002d8:	d8bc      	bhi.n	8000254 <CipherRequires+0x1c>
                if (requirement == REQUIRES_ECC)
 80002da:	f020 0004 	bic.w	r0, r0, #4
 80002de:	e7f4      	b.n	80002ca <CipherRequires+0x92>
                if (requirement == REQUIRES_ECC_STATIC)
 80002e0:	2a03      	cmp	r2, #3
 80002e2:	bf14      	ite	ne
 80002e4:	2000      	movne	r0, #0
 80002e6:	2001      	moveq	r0, #1
 80002e8:	4770      	bx	lr
                if (requirement == REQUIRES_ECC_STATIC)
 80002ea:	2a03      	cmp	r2, #3
 80002ec:	d00d      	beq.n	800030a <CipherRequires+0xd2>
                if (requirement == REQUIRES_AEAD)
 80002ee:	2a06      	cmp	r2, #6
 80002f0:	e7f7      	b.n	80002e2 <CipherRequires+0xaa>
                if (requirement == REQUIRES_ECC)
 80002f2:	1e90      	subs	r0, r2, #2
 80002f4:	2801      	cmp	r0, #1
 80002f6:	bf8c      	ite	hi
 80002f8:	2000      	movhi	r0, #0
 80002fa:	2001      	movls	r0, #1
 80002fc:	4770      	bx	lr
    if (first == ECDHE_PSK_BYTE) {
 80002fe:	2bd0      	cmp	r3, #208	; 0xd0
 8000300:	d1a8      	bne.n	8000254 <CipherRequires+0x1c>
        switch (second) {
 8000302:	2901      	cmp	r1, #1
 8000304:	d1a6      	bne.n	8000254 <CipherRequires+0x1c>
                if (requirement == REQUIRES_PSK)
 8000306:	2804      	cmp	r0, #4
 8000308:	e7eb      	b.n	80002e2 <CipherRequires+0xaa>
                    return 1;
 800030a:	2001      	movs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <SanityCheckMsgReceived>:

/* Make sure no duplicates, no fast forward, or other problems; 0 on success */
static int SanityCheckMsgReceived(WOLFSSL* ssl, byte type)
{
    /* verify not a duplicate, mark received, check state */
    switch (type) {
 8000310:	2916      	cmp	r1, #22
 8000312:	d81a      	bhi.n	800034a <SanityCheckMsgReceived+0x3a>
 8000314:	2916      	cmp	r1, #22
 8000316:	d81b      	bhi.n	8000350 <SanityCheckMsgReceived+0x40>
 8000318:	e8df f011 	tbh	[pc, r1, lsl #1]
 800031c:	002e001c 	.word	0x002e001c
 8000320:	004e003f 	.word	0x004e003f
 8000324:	001a0060 	.word	0x001a0060
 8000328:	001a001a 	.word	0x001a001a
 800032c:	001a001a 	.word	0x001a001a
 8000330:	006f001a 	.word	0x006f001a
 8000334:	00b3009f 	.word	0x00b3009f
 8000338:	00e900c4 	.word	0x00e900c4
 800033c:	001a00fa 	.word	0x001a00fa
 8000340:	001a001a 	.word	0x001a001a
 8000344:	001a0111 	.word	0x001a0111
 8000348:	008b      	.short	0x008b
 800034a:	2937      	cmp	r1, #55	; 0x37
 800034c:	f000 8105 	beq.w	800055a <SanityCheckMsgReceived+0x24a>
 8000350:	4ba8      	ldr	r3, [pc, #672]	; (80005f4 <SanityCheckMsgReceived+0x2e4>)
 8000352:	e00f      	b.n	8000374 <SanityCheckMsgReceived+0x64>

#ifndef NO_WOLFSSL_CLIENT
        case hello_request:
        #ifndef NO_WOLFSSL_SERVER
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 8000354:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 8000358:	f013 0f30 	tst.w	r3, #48	; 0x30
 800035c:	f000 8144 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
                WOLFSSL_MSG("HelloRequest received by server");
                WOLFSSL_ERROR_VERBOSE(SIDE_ERROR);
                return SIDE_ERROR;
            }
        #endif
            if (ssl->msgsReceived.got_hello_request) {
 8000360:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 8000364:	f012 0301 	ands.w	r3, r2, #1
 8000368:	f040 8140 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
                WOLFSSL_MSG("Duplicate HelloRequest received");
                WOLFSSL_ERROR_VERBOSE(DUPLICATE_MSG_E);
                return DUPLICATE_MSG_E;
            }
            ssl->msgsReceived.got_hello_request = 1;
 800036c:	f042 0201 	orr.w	r2, r2, #1
            if (ssl->msgsReceived.got_client_hello) {
                WOLFSSL_MSG("Duplicate ClientHello received");
                WOLFSSL_ERROR_VERBOSE(DUPLICATE_MSG_E);
                return DUPLICATE_MSG_E;
            }
            ssl->msgsReceived.got_client_hello = 1;
 8000370:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
            WOLFSSL_ERROR_VERBOSE(SANITY_MSG_E);
            return SANITY_MSG_E;
    }

    return 0;
}
 8000374:	4618      	mov	r0, r3
 8000376:	4770      	bx	lr
            if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8000378:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 800037c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000380:	2b10      	cmp	r3, #16
 8000382:	f000 8131 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_client_hello) {
 8000386:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 800038a:	f012 0306 	ands.w	r3, r2, #6
 800038e:	f040 812d 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_client_hello = 1;
 8000392:	2101      	movs	r1, #1
 8000394:	f361 0242 	bfi	r2, r1, #1, #2
 8000398:	e7ea      	b.n	8000370 <SanityCheckMsgReceived+0x60>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 800039a:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 800039e:	f013 0f30 	tst.w	r3, #48	; 0x30
 80003a2:	f000 8121 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_server_hello) {
 80003a6:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 80003aa:	f012 0308 	ands.w	r3, r2, #8
 80003ae:	f040 811d 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_server_hello = 1;
 80003b2:	f042 0208 	orr.w	r2, r2, #8
 80003b6:	e7db      	b.n	8000370 <SanityCheckMsgReceived+0x60>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 80003b8:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 80003bc:	f013 0f30 	tst.w	r3, #48	; 0x30
 80003c0:	f000 8112 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_hello_verify_request) {
 80003c4:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 80003c8:	f012 0310 	ands.w	r3, r2, #16
 80003cc:	f040 810e 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
            if (ssl->msgsReceived.got_hello_retry_request) {
 80003d0:	0611      	lsls	r1, r2, #24
 80003d2:	f100 8107 	bmi.w	80005e4 <SanityCheckMsgReceived+0x2d4>
            ssl->msgsReceived.got_hello_verify_request = 1;
 80003d6:	f042 0210 	orr.w	r2, r2, #16
 80003da:	e7c9      	b.n	8000370 <SanityCheckMsgReceived+0x60>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 80003dc:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 80003e0:	f013 0f30 	tst.w	r3, #48	; 0x30
 80003e4:	f000 8100 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_session_ticket) {
 80003e8:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 80003ec:	f012 0320 	ands.w	r3, r2, #32
 80003f0:	f040 80fc 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_session_ticket = 1;
 80003f4:	f042 0220 	orr.w	r2, r2, #32
 80003f8:	e7ba      	b.n	8000370 <SanityCheckMsgReceived+0x60>
            if (ssl->msgsReceived.got_certificate) {
 80003fa:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
 80003fe:	f012 0302 	ands.w	r3, r2, #2
 8000402:	f040 80f3 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_certificate = 1;
 8000406:	f042 0202 	orr.w	r2, r2, #2
 800040a:	f880 2139 	strb.w	r2, [r0, #313]	; 0x139
            if (ssl->options.side == WOLFSSL_CLIENT_END) {
 800040e:	f890 2270 	ldrb.w	r2, [r0, #624]	; 0x270
 8000412:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000416:	2a10      	cmp	r2, #16
 8000418:	d106      	bne.n	8000428 <SanityCheckMsgReceived+0x118>
                if ( ssl->msgsReceived.got_server_hello == 0) {
 800041a:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 800041e:	0710      	lsls	r0, r2, #28
 8000420:	d4a8      	bmi.n	8000374 <SanityCheckMsgReceived+0x64>
                        return OUT_OF_ORDER_E;
 8000422:	f46f 73ba 	mvn.w	r3, #372	; 0x174
 8000426:	e7a5      	b.n	8000374 <SanityCheckMsgReceived+0x64>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 8000428:	2a00      	cmp	r2, #0
 800042a:	f000 8081 	beq.w	8000530 <SanityCheckMsgReceived+0x220>
    return 0;
 800042e:	2300      	movs	r3, #0
 8000430:	e7a0      	b.n	8000374 <SanityCheckMsgReceived+0x64>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 8000432:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 8000436:	f013 0f30 	tst.w	r3, #48	; 0x30
 800043a:	f000 80d5 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_certificate_status) {
 800043e:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 8000442:	0759      	lsls	r1, r3, #29
 8000444:	f100 80d2 	bmi.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_certificate_status = 1;
 8000448:	f043 0304 	orr.w	r3, r3, #4
            if (ssl->msgsReceived.got_certificate == 0) {
 800044c:	079a      	lsls	r2, r3, #30
            ssl->msgsReceived.got_certificate_status = 1;
 800044e:	f880 3139 	strb.w	r3, [r0, #313]	; 0x139
            if (ssl->msgsReceived.got_certificate == 0) {
 8000452:	d5e6      	bpl.n	8000422 <SanityCheckMsgReceived+0x112>
            if (ssl->msgsReceived.got_server_key_exchange != 0) {
 8000454:	0718      	lsls	r0, r3, #28
 8000456:	d5ea      	bpl.n	800042e <SanityCheckMsgReceived+0x11e>
 8000458:	e7e3      	b.n	8000422 <SanityCheckMsgReceived+0x112>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 800045a:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 800045e:	f013 0f30 	tst.w	r3, #48	; 0x30
 8000462:	f000 80c1 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_server_key_exchange) {
 8000466:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 800046a:	0719      	lsls	r1, r3, #28
 800046c:	f100 80be 	bmi.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_server_key_exchange = 1;
 8000470:	f043 0308 	orr.w	r3, r3, #8
 8000474:	f880 3139 	strb.w	r3, [r0, #313]	; 0x139
            if (ssl->msgsReceived.got_server_hello == 0) {
 8000478:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 800047c:	f013 0f08 	tst.w	r3, #8
 8000480:	e05a      	b.n	8000538 <SanityCheckMsgReceived+0x228>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 8000482:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 8000486:	f013 0f30 	tst.w	r3, #48	; 0x30
 800048a:	f000 80ad 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_certificate_request) {
 800048e:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
 8000492:	f012 0310 	ands.w	r3, r2, #16
 8000496:	f040 80a9 	bne.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_certificate_request = 1;
 800049a:	f042 0210 	orr.w	r2, r2, #16
 800049e:	f880 2139 	strb.w	r2, [r0, #313]	; 0x139
            break;
 80004a2:	e767      	b.n	8000374 <SanityCheckMsgReceived+0x64>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 80004a4:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 80004a8:	f013 0f30 	tst.w	r3, #48	; 0x30
 80004ac:	f000 809c 	beq.w	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_server_hello_done) {
 80004b0:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 80004b4:	069a      	lsls	r2, r3, #26
 80004b6:	f100 8099 	bmi.w	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_server_hello_done = 1;
 80004ba:	f043 0320 	orr.w	r3, r3, #32
            if (ssl->msgsReceived.got_certificate == 0) {
 80004be:	0799      	lsls	r1, r3, #30
            ssl->msgsReceived.got_server_hello_done = 1;
 80004c0:	f880 3139 	strb.w	r3, [r0, #313]	; 0x139
            if (ssl->msgsReceived.got_certificate == 0) {
 80004c4:	d408      	bmi.n	80004d8 <SanityCheckMsgReceived+0x1c8>
                    ssl->specs.kea == dhe_psk_kea ||
 80004c6:	f890 214b 	ldrb.w	r2, [r0, #331]	; 0x14b
                if (ssl->specs.kea == psk_kea ||
 80004ca:	3a04      	subs	r2, #4
 80004cc:	2a02      	cmp	r2, #2
 80004ce:	d903      	bls.n	80004d8 <SanityCheckMsgReceived+0x1c8>
                    ssl->specs.kea == ecdhe_psk_kea ||
 80004d0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80004d4:	0712      	lsls	r2, r2, #28
 80004d6:	d5a4      	bpl.n	8000422 <SanityCheckMsgReceived+0x112>
            if (ssl->msgsReceived.got_server_key_exchange == 0) {
 80004d8:	071b      	lsls	r3, r3, #28
 80004da:	d4a8      	bmi.n	800042e <SanityCheckMsgReceived+0x11e>
                if (ssl->specs.static_ecdh == 1 ||
 80004dc:	f890 314f 	ldrb.w	r3, [r0, #335]	; 0x14f
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d0a4      	beq.n	800042e <SanityCheckMsgReceived+0x11e>
 80004e4:	f890 314b 	ldrb.w	r3, [r0, #331]	; 0x14b
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d0a0      	beq.n	800042e <SanityCheckMsgReceived+0x11e>
 80004ec:	e799      	b.n	8000422 <SanityCheckMsgReceived+0x112>
            if (ssl->options.side == WOLFSSL_CLIENT_END) {
 80004ee:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 80004f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80004f6:	2b10      	cmp	r3, #16
 80004f8:	d076      	beq.n	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_certificate_verify) {
 80004fa:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 80004fe:	0659      	lsls	r1, r3, #25
 8000500:	d474      	bmi.n	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_certificate_verify = 1;
 8000502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000506:	f880 3139 	strb.w	r3, [r0, #313]	; 0x139
            if ( ssl->msgsReceived.got_certificate == 0) {
 800050a:	f013 0f02 	tst.w	r3, #2
 800050e:	e013      	b.n	8000538 <SanityCheckMsgReceived+0x228>
            if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8000510:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 8000514:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000518:	2b10      	cmp	r3, #16
 800051a:	d065      	beq.n	80005e8 <SanityCheckMsgReceived+0x2d8>
            if (ssl->msgsReceived.got_client_key_exchange) {
 800051c:	f990 3139 	ldrsb.w	r3, [r0, #313]	; 0x139
 8000520:	2b00      	cmp	r3, #0
 8000522:	db63      	blt.n	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_client_key_exchange = 1;
 8000524:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	f880 3139 	strb.w	r3, [r0, #313]	; 0x139
                if ( ssl->msgsReceived.got_client_hello == 0) {
 8000530:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 8000534:	f013 0f06 	tst.w	r3, #6
 8000538:	f47f af79 	bne.w	800042e <SanityCheckMsgReceived+0x11e>
 800053c:	e771      	b.n	8000422 <SanityCheckMsgReceived+0x112>
            if (ssl->msgsReceived.got_finished) {
 800053e:	f890 313a 	ldrb.w	r3, [r0, #314]	; 0x13a
 8000542:	07da      	lsls	r2, r3, #31
 8000544:	d452      	bmi.n	80005ec <SanityCheckMsgReceived+0x2dc>
            ssl->msgsReceived.got_finished = 1;
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	f880 313a 	strb.w	r3, [r0, #314]	; 0x13a
            if (ssl->msgsReceived.got_change_cipher == 0) {
 800054e:	0758      	lsls	r0, r3, #29
 8000550:	f53f af6d 	bmi.w	800042e <SanityCheckMsgReceived+0x11e>
                return NO_CHANGE_CIPHER_E;
 8000554:	f46f 73c4 	mvn.w	r3, #392	; 0x188
 8000558:	e70c      	b.n	8000374 <SanityCheckMsgReceived+0x64>
            if (ssl->msgsReceived.got_change_cipher) {
 800055a:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
 800055e:	0751      	lsls	r1, r2, #29
 8000560:	d444      	bmi.n	80005ec <SanityCheckMsgReceived+0x2dc>
            if (!ssl->options.dtls)
 8000562:	f890 3272 	ldrb.w	r3, [r0, #626]	; 0x272
 8000566:	f013 0304 	ands.w	r3, r3, #4
                ssl->msgsReceived.got_change_cipher = 1;
 800056a:	bf04      	itt	eq
 800056c:	f042 0204 	orreq.w	r2, r2, #4
 8000570:	f880 213a 	strbeq.w	r2, [r0, #314]	; 0x13a
            if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8000574:	f890 2270 	ldrb.w	r2, [r0, #624]	; 0x270
 8000578:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800057c:	2910      	cmp	r1, #16
 800057e:	d118      	bne.n	80005b2 <SanityCheckMsgReceived+0x2a2>
                if (!ssl->options.resuming) {
 8000580:	f890 2271 	ldrb.w	r2, [r0, #625]	; 0x271
 8000584:	0712      	lsls	r2, r2, #28
 8000586:	d40f      	bmi.n	80005a8 <SanityCheckMsgReceived+0x298>
                   if (ssl->msgsReceived.got_server_hello_done == 0) {
 8000588:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
 800058c:	f012 0f20 	tst.w	r2, #32
                    if (ssl->msgsReceived.got_server_hello == 0) {
 8000590:	f43f af47 	beq.w	8000422 <SanityCheckMsgReceived+0x112>
            if (ssl->options.dtls)
 8000594:	2b00      	cmp	r3, #0
 8000596:	f43f af4a 	beq.w	800042e <SanityCheckMsgReceived+0x11e>
                ssl->msgsReceived.got_change_cipher = 1;
 800059a:	f890 313a 	ldrb.w	r3, [r0, #314]	; 0x13a
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	f880 313a 	strb.w	r3, [r0, #314]	; 0x13a
 80005a6:	e742      	b.n	800042e <SanityCheckMsgReceived+0x11e>
                    if (ssl->msgsReceived.got_server_hello == 0) {
 80005a8:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
 80005ac:	f012 0f08 	tst.w	r2, #8
 80005b0:	e7ee      	b.n	8000590 <SanityCheckMsgReceived+0x280>
            if (ssl->options.side == WOLFSSL_SERVER_END) {
 80005b2:	2900      	cmp	r1, #0
 80005b4:	d1ee      	bne.n	8000594 <SanityCheckMsgReceived+0x284>
                if (!ssl->options.resuming &&
 80005b6:	f890 1271 	ldrb.w	r1, [r0, #625]	; 0x271
 80005ba:	0709      	lsls	r1, r1, #28
 80005bc:	d404      	bmi.n	80005c8 <SanityCheckMsgReceived+0x2b8>
 80005be:	f990 1139 	ldrsb.w	r1, [r0, #313]	; 0x139
 80005c2:	2900      	cmp	r1, #0
 80005c4:	f6bf af2d 	bge.w	8000422 <SanityCheckMsgReceived+0x112>
                    if (ssl->options.verifyPeer &&
 80005c8:	0652      	lsls	r2, r2, #25
 80005ca:	d5e3      	bpl.n	8000594 <SanityCheckMsgReceived+0x284>
 80005cc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80005d0:	07d1      	lsls	r1, r2, #31
 80005d2:	d5df      	bpl.n	8000594 <SanityCheckMsgReceived+0x284>
                        if (!ssl->options.havePeerVerify ||
 80005d4:	0791      	lsls	r1, r2, #30
 80005d6:	d503      	bpl.n	80005e0 <SanityCheckMsgReceived+0x2d0>
                                !ssl->msgsReceived.got_certificate_verify) {
 80005d8:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
                        if (!ssl->options.havePeerVerify ||
 80005dc:	0652      	lsls	r2, r2, #25
 80005de:	d4d9      	bmi.n	8000594 <SanityCheckMsgReceived+0x284>
                            return NO_PEER_VERIFY;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SanityCheckMsgReceived+0x2e8>)
 80005e2:	e6c7      	b.n	8000374 <SanityCheckMsgReceived+0x64>
                return VERSION_ERROR;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SanityCheckMsgReceived+0x2ec>)
 80005e6:	e6c5      	b.n	8000374 <SanityCheckMsgReceived+0x64>
                return SIDE_ERROR;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SanityCheckMsgReceived+0x2f0>)
 80005ea:	e6c3      	b.n	8000374 <SanityCheckMsgReceived+0x64>
                return DUPLICATE_MSG_E;
 80005ec:	f46f 73c5 	mvn.w	r3, #394	; 0x18a
 80005f0:	e6c0      	b.n	8000374 <SanityCheckMsgReceived+0x64>
 80005f2:	bf00      	nop
 80005f4:	fffffe76 	.word	0xfffffe76
 80005f8:	fffffe86 	.word	0xfffffe86
 80005fc:	fffffeba 	.word	0xfffffeba
 8000600:	fffffea8 	.word	0xfffffea8

08000604 <FreeSckeArgs>:
{
    SckeArgs* args = (SckeArgs*)pArgs;

    (void)ssl;

    if (args->encSecret) {
 8000604:	6848      	ldr	r0, [r1, #4]
{
 8000606:	b510      	push	{r4, lr}
 8000608:	460c      	mov	r4, r1
    if (args->encSecret) {
 800060a:	b118      	cbz	r0, 8000614 <FreeSckeArgs+0x10>
        XFREE(args->encSecret, ssl->heap, DYNAMIC_TYPE_SECRET);
 800060c:	f01d f9b2 	bl	801d974 <free>
        args->encSecret = NULL;
 8000610:	2300      	movs	r3, #0
 8000612:	6063      	str	r3, [r4, #4]
    }
    if (args->input) {
 8000614:	68a0      	ldr	r0, [r4, #8]
 8000616:	b118      	cbz	r0, 8000620 <FreeSckeArgs+0x1c>
        XFREE(args->input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8000618:	f01d f9ac 	bl	801d974 <free>
        args->input = NULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60a3      	str	r3, [r4, #8]
    }
}
 8000620:	bd10      	pop	{r4, pc}

08000622 <FreeScvArgs>:
    if (args->verifySig) {
        XFREE(args->verifySig, ssl->heap, DYNAMIC_TYPE_SIGNATURE);
        args->verifySig = NULL;
    }
#endif
    if (args->input) {
 8000622:	6888      	ldr	r0, [r1, #8]
{
 8000624:	b510      	push	{r4, lr}
 8000626:	460c      	mov	r4, r1
    if (args->input) {
 8000628:	b118      	cbz	r0, 8000632 <FreeScvArgs+0x10>
        XFREE(args->input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 800062a:	f01d f9a3 	bl	801d974 <free>
        args->input = NULL;
 800062e:	2300      	movs	r3, #0
 8000630:	60a3      	str	r3, [r4, #8]
    }
}
 8000632:	bd10      	pop	{r4, pc}

08000634 <FreeSskeArgs>:
        SskeArgs* args = (SskeArgs*)pArgs;

        (void)ssl;

    #if defined(HAVE_ECC) || defined(HAVE_CURVE25519) || defined(HAVE_CURVE448)
        if (args->exportBuf) {
 8000634:	6848      	ldr	r0, [r1, #4]
    {
 8000636:	b510      	push	{r4, lr}
 8000638:	460c      	mov	r4, r1
        if (args->exportBuf) {
 800063a:	b118      	cbz	r0, 8000644 <FreeSskeArgs+0x10>
            XFREE(args->exportBuf, ssl->heap, DYNAMIC_TYPE_DER);
 800063c:	f01d f99a 	bl	801d974 <free>
            args->exportBuf = NULL;
 8000640:	2300      	movs	r3, #0
 8000642:	6063      	str	r3, [r4, #4]
            XFREE(args->verifySig, ssl->heap, DYNAMIC_TYPE_SIGNATURE);
            args->verifySig = NULL;
        }
    #endif
        (void)args;
    }
 8000644:	bd10      	pop	{r4, pc}

08000646 <ProcessPeerCertParse>:
{
 8000646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000648:	460c      	mov	r4, r1
 800064a:	4615      	mov	r5, r2
 800064c:	461f      	mov	r7, r3
    if (ssl == NULL || args == NULL
 800064e:	4606      	mov	r6, r0
 8000650:	2800      	cmp	r0, #0
 8000652:	d040      	beq.n	80006d6 <ProcessPeerCertParse+0x90>
 8000654:	2900      	cmp	r1, #0
 8000656:	d03e      	beq.n	80006d6 <ProcessPeerCertParse+0x90>
        || args->dCert == NULL
 8000658:	6848      	ldr	r0, [r1, #4]
 800065a:	2800      	cmp	r0, #0
 800065c:	d03b      	beq.n	80006d6 <ProcessPeerCertParse+0x90>
    if (args->certIdx > args->count)
 800065e:	e9d1 3105 	ldrd	r3, r1, [r1, #20]
 8000662:	4299      	cmp	r1, r3
 8000664:	dc3b      	bgt.n	80006de <ProcessPeerCertParse+0x98>
    if (!args->dCertInit
 8000666:	f894 3020 	ldrb.w	r3, [r4, #32]
 800066a:	075a      	lsls	r2, r3, #29
 800066c:	d414      	bmi.n	8000698 <ProcessPeerCertParse+0x52>
    cert = &args->certs[args->certIdx];
 800066e:	f8d4 c000 	ldr.w	ip, [r4]
        InitDecodedCert(args->dCert, cert->buffer, cert->length, ssl->heap);
 8000672:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cert = &args->certs[args->certIdx];
 8000674:	eb0c 02c1 	add.w	r2, ip, r1, lsl #3
        InitDecodedCert(args->dCert, cert->buffer, cert->length, ssl->heap);
 8000678:	f85c 1031 	ldr.w	r1, [ip, r1, lsl #3]
 800067c:	6852      	ldr	r2, [r2, #4]
 800067e:	f013 f9cb 	bl	8013a18 <InitDecodedCert>
        args->dCertInit = 1;
 8000682:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	f884 3020 	strb.w	r3, [r4, #32]
        args->dCert->sigCtx.devId = ssl->devId;
 800068e:	6863      	ldr	r3, [r4, #4]
 8000690:	f8d6 22bc 	ldr.w	r2, [r6, #700]	; 0x2bc
 8000694:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
    ret = ParseCertRelative(args->dCert, certType, verify, SSL_CM(ssl));
 8000698:	6833      	ldr	r3, [r6, #0]
 800069a:	6860      	ldr	r0, [r4, #4]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	4629      	mov	r1, r5
 80006a0:	463a      	mov	r2, r7
 80006a2:	f013 fea5 	bl	80143f0 <ParseCertRelative>
    if (ret == 0 || ret == ASN_BEFORE_DATE_E || ret == ASN_AFTER_DATE_E) {
 80006a6:	4605      	mov	r5, r0
 80006a8:	b118      	cbz	r0, 80006b2 <ProcessPeerCertParse+0x6c>
 80006aa:	f100 0397 	add.w	r3, r0, #151	; 0x97
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d818      	bhi.n	80006e4 <ProcessPeerCertParse+0x9e>
        if (args->dCert->extAuthKeyIdSet)
 80006b2:	6864      	ldr	r4, [r4, #4]
 80006b4:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
 80006b8:	075b      	lsls	r3, r3, #29
        alreadySigner = AlreadySigner(SSL_CM(ssl), subjectHash);
 80006ba:	6833      	ldr	r3, [r6, #0]
            subjectHash = args->dCert->extSubjKeyId;
 80006bc:	bf4c      	ite	mi
 80006be:	f504 7433 	addmi.w	r4, r4, #716	; 0x2cc
            subjectHash = args->dCert->subjectHash;
 80006c2:	3438      	addpl	r4, #56	; 0x38
        alreadySigner = AlreadySigner(SSL_CM(ssl), subjectHash);
 80006c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006c6:	4621      	mov	r1, r4
 80006c8:	f006 feb8 	bl	800743c <AlreadySigner>
        *pSubjectHash = subjectHash;
 80006cc:	9b06      	ldr	r3, [sp, #24]
 80006ce:	601c      	str	r4, [r3, #0]
        *pAlreadySigner = alreadySigner;
 80006d0:	9b07      	ldr	r3, [sp, #28]
 80006d2:	6018      	str	r0, [r3, #0]
 80006d4:	e001      	b.n	80006da <ProcessPeerCertParse+0x94>
        return BAD_FUNC_ARG;
 80006d6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
}
 80006da:	4628      	mov	r0, r5
 80006dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BUFFER_E;
 80006de:	f06f 0583 	mvn.w	r5, #131	; 0x83
 80006e2:	e7fa      	b.n	80006da <ProcessPeerCertParse+0x94>
    int alreadySigner = 0;
 80006e4:	2000      	movs	r0, #0
    byte* subjectHash = NULL;
 80006e6:	4604      	mov	r4, r0
 80006e8:	e7f0      	b.n	80006cc <ProcessPeerCertParse+0x86>
	...

080006ec <HashSkeData>:
{
 80006ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80006f0:	4604      	mov	r4, r0
    int digest_sz = wc_HashGetDigestSize(hashType);
 80006f2:	4608      	mov	r0, r1
{
 80006f4:	460e      	mov	r6, r1
 80006f6:	4690      	mov	r8, r2
 80006f8:	461f      	mov	r7, r3
    int digest_sz = wc_HashGetDigestSize(hashType);
 80006fa:	f01a f8b9 	bl	801a870 <wc_HashGetDigestSize>
    if (digest_sz <= 0) {
 80006fe:	1e05      	subs	r5, r0, #0
 8000700:	dd49      	ble.n	8000796 <HashSkeData+0xaa>
        ssl->buffers.sig.buffer = (byte*)XMALLOC(SEED_LEN + sz, ssl->heap,
 8000702:	f107 0940 	add.w	r9, r7, #64	; 0x40
 8000706:	4648      	mov	r0, r9
 8000708:	f01d f92c 	bl	801d964 <malloc>
 800070c:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
        if (ssl->buffers.sig.buffer == NULL) {
 8000710:	b928      	cbnz	r0, 800071e <HashSkeData+0x32>
            ret = MEMORY_E;
 8000712:	f06f 057c 	mvn.w	r5, #124	; 0x7c
}
 8000716:	4628      	mov	r0, r5
 8000718:	b003      	add	sp, #12
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        XMEMCPY(ssl->buffers.sig.buffer, ssl->arrays->clientRandom, RAN_LEN);
 800071e:	68a1      	ldr	r1, [r4, #8]
        ssl->buffers.sig.length = SEED_LEN + sz;
 8000720:	f8c4 90c4 	str.w	r9, [r4, #196]	; 0xc4
        XMEMCPY(ssl->buffers.sig.buffer, ssl->arrays->clientRandom, RAN_LEN);
 8000724:	2220      	movs	r2, #32
 8000726:	3114      	adds	r1, #20
 8000728:	f01d f93c 	bl	801d9a4 <memcpy>
        XMEMCPY(&ssl->buffers.sig.buffer[RAN_LEN], ssl->arrays->serverRandom,
 800072c:	68a1      	ldr	r1, [r4, #8]
 800072e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8000732:	2220      	movs	r2, #32
 8000734:	3134      	adds	r1, #52	; 0x34
 8000736:	4410      	add	r0, r2
 8000738:	f01d f934 	bl	801d9a4 <memcpy>
        XMEMCPY(&ssl->buffers.sig.buffer[RAN_LEN * 2], data, sz);
 800073c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8000740:	463a      	mov	r2, r7
 8000742:	4641      	mov	r1, r8
 8000744:	3040      	adds	r0, #64	; 0x40
 8000746:	f01d f92d 	bl	801d9a4 <memcpy>
    if (sigAlgo == ed25519_sa_algo) {
 800074a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800074e:	2b09      	cmp	r3, #9
 8000750:	d023      	beq.n	800079a <HashSkeData+0xae>
        ssl->options.dontFreeDigest = 0;
 8000752:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
        ssl->buffers.digest.length = (unsigned int)digest_sz;
 8000756:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
        ssl->options.dontFreeDigest = 0;
 800075a:	f36f 0382 	bfc	r3, #2, #1
 800075e:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
        ssl->buffers.digest.buffer = (byte*)XMALLOC(ssl->buffers.digest.length,
 8000762:	4628      	mov	r0, r5
 8000764:	f01d f8fe 	bl	801d964 <malloc>
 8000768:	4603      	mov	r3, r0
 800076a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
        if (ssl->buffers.digest.buffer == NULL) {
 800076e:	2800      	cmp	r0, #0
 8000770:	d0cf      	beq.n	8000712 <HashSkeData+0x26>
        ret = wc_Hash(hashType, ssl->buffers.sig.buffer,
 8000772:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 8000776:	9200      	str	r2, [sp, #0]
 8000778:	4630      	mov	r0, r6
 800077a:	e9d4 1230 	ldrd	r1, r2, [r4, #192]	; 0xc0
 800077e:	f01a f9f0 	bl	801ab62 <wc_Hash>
 8000782:	4605      	mov	r5, r0
            XFREE(ssl->buffers.sig.buffer, ssl->heap, DYNAMIC_TYPE_SIGNATURE);
 8000784:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8000788:	b108      	cbz	r0, 800078e <HashSkeData+0xa2>
 800078a:	f01d f8f3 	bl	801d974 <free>
            ssl->buffers.sig.buffer = NULL;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8000794:	e7bf      	b.n	8000716 <HashSkeData+0x2a>
 8000796:	4d02      	ldr	r5, [pc, #8]	; (80007a0 <HashSkeData+0xb4>)
 8000798:	e7bd      	b.n	8000716 <HashSkeData+0x2a>
 800079a:	2500      	movs	r5, #0
    return ret;
 800079c:	e7bb      	b.n	8000716 <HashSkeData+0x2a>
 800079e:	bf00      	nop
 80007a0:	fffffeb8 	.word	0xfffffeb8

080007a4 <DecodeSigAlg>:
    *hsType = invalid_sa_algo;
 80007a4:	23ff      	movs	r3, #255	; 0xff
 80007a6:	7013      	strb	r3, [r2, #0]
    switch (input[0]) {
 80007a8:	7803      	ldrb	r3, [r0, #0]
 80007aa:	2b08      	cmp	r3, #8
{
 80007ac:	b510      	push	{r4, lr}
    switch (input[0]) {
 80007ae:	d10a      	bne.n	80007c6 <DecodeSigAlg+0x22>
            if (input[1] == ED25519_SA_MINOR) {
 80007b0:	7844      	ldrb	r4, [r0, #1]
 80007b2:	2c07      	cmp	r4, #7
                *hsType = ed25519_sa_algo;
 80007b4:	bf0b      	itete	eq
 80007b6:	2309      	moveq	r3, #9
                *hsType   = input[0];
 80007b8:	7013      	strbne	r3, [r2, #0]
                *hsType = ed25519_sa_algo;
 80007ba:	7013      	strbeq	r3, [r2, #0]
                *hashAlgo = input[1];
 80007bc:	7843      	ldrbne	r3, [r0, #1]
                *hashAlgo = sha512_mac;
 80007be:	bf08      	it	eq
 80007c0:	2306      	moveq	r3, #6
                *hashAlgo = input[1];
 80007c2:	700b      	strb	r3, [r1, #0]
}
 80007c4:	bd10      	pop	{r4, pc}
            *hashAlgo = input[0];
 80007c6:	700b      	strb	r3, [r1, #0]
            *hsType   = input[1];
 80007c8:	7843      	ldrb	r3, [r0, #1]
 80007ca:	7013      	strb	r3, [r2, #0]
}
 80007cc:	e7fa      	b.n	80007c4 <DecodeSigAlg+0x20>

080007ce <SetDigest>:
    switch (hashAlgo) {
 80007ce:	2904      	cmp	r1, #4
 80007d0:	d011      	beq.n	80007f6 <SetDigest+0x28>
 80007d2:	2906      	cmp	r1, #6
 80007d4:	d01b      	beq.n	800080e <SetDigest+0x40>
 80007d6:	2902      	cmp	r1, #2
 80007d8:	d10c      	bne.n	80007f4 <SetDigest+0x26>
            ssl->options.dontFreeDigest = 1;
 80007da:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
            ssl->buffers.digest.buffer = ssl->hsHashes->certHashes.sha;
 80007e6:	68c3      	ldr	r3, [r0, #12]
 80007e8:	3374      	adds	r3, #116	; 0x74
 80007ea:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
            ssl->buffers.digest.length = WC_SHA_DIGEST_SIZE;
 80007ee:	2314      	movs	r3, #20
            ssl->buffers.digest.length = WC_SHA512_DIGEST_SIZE;
 80007f0:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
}
 80007f4:	4770      	bx	lr
            ssl->options.dontFreeDigest = 1;
 80007f6:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
            ssl->buffers.digest.buffer = ssl->hsHashes->certHashes.sha256;
 8000802:	68c3      	ldr	r3, [r0, #12]
 8000804:	3388      	adds	r3, #136	; 0x88
 8000806:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
            ssl->buffers.digest.length = WC_SHA256_DIGEST_SIZE;
 800080a:	2320      	movs	r3, #32
 800080c:	e7f0      	b.n	80007f0 <SetDigest+0x22>
            ssl->options.dontFreeDigest = 1;
 800080e:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
            ssl->buffers.digest.buffer = ssl->hsHashes->certHashes.sha512;
 800081a:	68c3      	ldr	r3, [r0, #12]
 800081c:	33a8      	adds	r3, #168	; 0xa8
 800081e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
            ssl->buffers.digest.length = WC_SHA512_DIGEST_SIZE;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	e7e4      	b.n	80007f0 <SetDigest+0x22>

08000826 <AddRecordHeader.constprop.0>:
    if (rl == NULL) {
 8000826:	b170      	cbz	r0, 8000846 <AddRecordHeader.constprop.0+0x20>
    rl->type    = type;
 8000828:	7002      	strb	r2, [r0, #0]
    rl->pvMajor = ssl->version.major;       /* type and version same in each */
 800082a:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 800082e:	7042      	strb	r2, [r0, #1]
        rl->pvMinor = ssl->version.minor;
 8000830:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8000834:	7082      	strb	r2, [r0, #2]
    if (!ssl->options.dtls) {
 8000836:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800083a:	075b      	lsls	r3, r3, #29
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 800083c:	bf5e      	ittt	pl
 800083e:	f3c1 2307 	ubfxpl	r3, r1, #8, #8
 8000842:	70c3      	strbpl	r3, [r0, #3]
    c[1] =  (byte)(wc_u16       & 0xff);
 8000844:	7101      	strbpl	r1, [r0, #4]
}
 8000846:	4770      	bx	lr

08000848 <AddHeaders>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	460d      	mov	r5, r1
 800084c:	4616      	mov	r6, r2
    AddRecordHeader(output, length + lengthAdj, handshake, ssl, CUR_ORDER);
 800084e:	3104      	adds	r1, #4
 8000850:	2216      	movs	r2, #22
 8000852:	f7ff ffe8 	bl	8000826 <AddRecordHeader.constprop.0>
    out[0] = (byte)((in >> 16) & 0xff);
 8000856:	0c2b      	lsrs	r3, r5, #16
 8000858:	7183      	strb	r3, [r0, #6]
    out[1] = (byte)((in >>  8) & 0xff);
 800085a:	0a2b      	lsrs	r3, r5, #8
    hs->type = type;
 800085c:	7146      	strb	r6, [r0, #5]
 800085e:	71c3      	strb	r3, [r0, #7]
    out[2] =  (byte)(in        & 0xff);
 8000860:	7205      	strb	r5, [r0, #8]
}
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <CompareSuites.isra.0>:
#endif /* WOLFSSL_TLS13 */

        return 1;
    }

    static int CompareSuites(const WOLFSSL* ssl, const Suites* suites,
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	4604      	mov	r4, r0
                             Suites* peerSuites, word16 i, word16 j,
                             CipherSuite* cs, TLSX* extensions)
    {
        if (suites->suites[i]   == peerSuites->suites[j] &&
 800086a:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    static int CompareSuites(const WOLFSSL* ssl, const Suites* suites,
 800086e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
        if (suites->suites[i]   == peerSuites->suites[j] &&
 8000872:	eb01 0903 	add.w	r9, r1, r3
 8000876:	4402      	add	r2, r0
 8000878:	f899 5004 	ldrb.w	r5, [r9, #4]
 800087c:	7910      	ldrb	r0, [r2, #4]
 800087e:	42a8      	cmp	r0, r5
 8000880:	d004      	beq.n	800088c <CompareSuites.isra.0+0x28>
            else {
                WOLFSSL_MSG("Could not verify suite validity, continue");
            }
        }

        return MATCH_SUITE_ERROR;
 8000882:	f46f 7afa 	mvn.w	sl, #500	; 0x1f4
    }
 8000886:	4650      	mov	r0, sl
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            suites->suites[i+1] == peerSuites->suites[j+1] ) {
 800088c:	3301      	adds	r3, #1
 800088e:	18cf      	adds	r7, r1, r3
        if (suites->suites[i]   == peerSuites->suites[j] &&
 8000890:	7953      	ldrb	r3, [r2, #5]
            suites->suites[i+1] == peerSuites->suites[j+1] ) {
 8000892:	793e      	ldrb	r6, [r7, #4]
        if (suites->suites[i]   == peerSuites->suites[j] &&
 8000894:	42b3      	cmp	r3, r6
 8000896:	d1f4      	bne.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_RSA)) {
 8000898:	2200      	movs	r2, #0
 800089a:	4631      	mov	r1, r6
 800089c:	4628      	mov	r0, r5
 800089e:	f7ff fccb 	bl	8000238 <CipherRequires>
 80008a2:	b118      	cbz	r0, 80008ac <CompareSuites.isra.0+0x48>
            if (ssl->options.haveRSA == 0) {
 80008a4:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
 80008a8:	0798      	lsls	r0, r3, #30
 80008aa:	d5ea      	bpl.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_DHE)) {
 80008ac:	2201      	movs	r2, #1
 80008ae:	4631      	mov	r1, r6
 80008b0:	4628      	mov	r0, r5
 80008b2:	f7ff fcc1 	bl	8000238 <CipherRequires>
 80008b6:	b118      	cbz	r0, 80008c0 <CompareSuites.isra.0+0x5c>
            if (ssl->options.haveDH == 0) {
 80008b8:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
 80008bc:	0719      	lsls	r1, r3, #28
 80008be:	d5e0      	bpl.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_ECC)) {
 80008c0:	2202      	movs	r2, #2
 80008c2:	4631      	mov	r1, r6
 80008c4:	4628      	mov	r0, r5
 80008c6:	f7ff fcb7 	bl	8000238 <CipherRequires>
 80008ca:	b118      	cbz	r0, 80008d4 <CompareSuites.isra.0+0x70>
            if (ssl->options.haveECC == 0) {
 80008cc:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
 80008d0:	075a      	lsls	r2, r3, #29
 80008d2:	d5d6      	bpl.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_ECC_STATIC)) {
 80008d4:	2203      	movs	r2, #3
 80008d6:	4631      	mov	r1, r6
 80008d8:	4628      	mov	r0, r5
 80008da:	f7ff fcad 	bl	8000238 <CipherRequires>
 80008de:	b118      	cbz	r0, 80008e8 <CompareSuites.isra.0+0x84>
            if (ssl->options.haveStaticECC == 0) {
 80008e0:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
 80008e4:	069b      	lsls	r3, r3, #26
 80008e6:	d5cc      	bpl.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_PSK)) {
 80008e8:	2204      	movs	r2, #4
 80008ea:	4631      	mov	r1, r6
 80008ec:	4628      	mov	r0, r5
 80008ee:	f7ff fca3 	bl	8000238 <CipherRequires>
 80008f2:	4682      	mov	sl, r0
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d1c4      	bne.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_RSA_SIG)) {
 80008f8:	2205      	movs	r2, #5
 80008fa:	4631      	mov	r1, r6
 80008fc:	4628      	mov	r0, r5
 80008fe:	f7ff fc9b 	bl	8000238 <CipherRequires>
 8000902:	b160      	cbz	r0, 800091e <CompareSuites.isra.0+0xba>
            if (ssl->options.side == WOLFSSL_SERVER_END &&
 8000904:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
 8000908:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 800090c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000914:	f023 03cf 	bic.w	r3, r3, #207	; 0xcf
 8000918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800091c:	d0b1      	beq.n	8000882 <CompareSuites.isra.0+0x1e>
        if (CipherRequires(first, second, REQUIRES_AEAD)) {
 800091e:	2206      	movs	r2, #6
 8000920:	4631      	mov	r1, r6
 8000922:	4628      	mov	r0, r5
 8000924:	f7ff fc88 	bl	8000238 <CipherRequires>
 8000928:	b138      	cbz	r0, 800093a <CompareSuites.isra.0+0xd6>
            if (ssl->version.major == SSLv3_MAJOR &&
 800092a:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 800092e:	2b03      	cmp	r3, #3
 8000930:	d103      	bne.n	800093a <CompareSuites.isra.0+0xd6>
 8000932:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8000936:	2b02      	cmp	r3, #2
 8000938:	d9a3      	bls.n	8000882 <CompareSuites.isra.0+0x1e>
        if (!TLSX_ValidateSupportedCurves(ssl, first, second,
 800093a:	f108 0304 	add.w	r3, r8, #4
 800093e:	4632      	mov	r2, r6
 8000940:	4629      	mov	r1, r5
 8000942:	4620      	mov	r0, r4
 8000944:	f007 ffe9 	bl	800891a <TLSX_ValidateSupportedCurves>
 8000948:	2800      	cmp	r0, #0
 800094a:	d09a      	beq.n	8000882 <CompareSuites.isra.0+0x1e>
                cs->cipherSuite0 = suites->suites[i];
 800094c:	f899 3004 	ldrb.w	r3, [r9, #4]
 8000950:	f888 3000 	strb.w	r3, [r8]
                cs->cipherSuite  = suites->suites[i+1];
 8000954:	793b      	ldrb	r3, [r7, #4]
 8000956:	f888 3001 	strb.w	r3, [r8, #1]
                return 0;
 800095a:	e794      	b.n	8000886 <CompareSuites.isra.0+0x22>

0800095c <IsTLS>:
    if (ssl->version.major == SSLv3_MAJOR && ssl->version.minor >=TLSv1_MINOR)
 800095c:	f890 313c 	ldrb.w	r3, [r0, #316]	; 0x13c
 8000960:	2b03      	cmp	r3, #3
 8000962:	d105      	bne.n	8000970 <IsTLS+0x14>
 8000964:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
 8000968:	3800      	subs	r0, #0
 800096a:	bf18      	it	ne
 800096c:	2001      	movne	r0, #1
 800096e:	4770      	bx	lr
    return 0;
 8000970:	2000      	movs	r0, #0
}
 8000972:	4770      	bx	lr

08000974 <IsAtLeastTLSv1_2>:
    if (ssl->version.major == SSLv3_MAJOR && ssl->version.minor >=TLSv1_2_MINOR)
 8000974:	f890 313c 	ldrb.w	r3, [r0, #316]	; 0x13c
 8000978:	2b03      	cmp	r3, #3
 800097a:	d106      	bne.n	800098a <IsAtLeastTLSv1_2+0x16>
 800097c:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
 8000980:	2802      	cmp	r0, #2
 8000982:	bf94      	ite	ls
 8000984:	2000      	movls	r0, #0
 8000986:	2001      	movhi	r0, #1
 8000988:	4770      	bx	lr
    return 0;
 800098a:	2000      	movs	r0, #0
}
 800098c:	4770      	bx	lr

0800098e <IsAtLeastTLSv1_3>:
{
 800098e:	b082      	sub	sp, #8
 8000990:	f8ad 0004 	strh.w	r0, [sp, #4]
    ret = (pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_3_MINOR);
 8000994:	b2c0      	uxtb	r0, r0
 8000996:	2803      	cmp	r0, #3
 8000998:	d107      	bne.n	80009aa <IsAtLeastTLSv1_3+0x1c>
 800099a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800099e:	2803      	cmp	r0, #3
 80009a0:	bf94      	ite	ls
 80009a2:	2000      	movls	r0, #0
 80009a4:	2001      	movhi	r0, #1
}
 80009a6:	b002      	add	sp, #8
 80009a8:	4770      	bx	lr
    ret = (pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_3_MINOR);
 80009aa:	2000      	movs	r0, #0
    return ret;
 80009ac:	e7fb      	b.n	80009a6 <IsAtLeastTLSv1_3+0x18>

080009ae <IsEncryptionOn>:
{
 80009ae:	4603      	mov	r3, r0
    return ssl->keys.encryptionOn &&
 80009b0:	f890 0268 	ldrb.w	r0, [r0, #616]	; 0x268
 80009b4:	b128      	cbz	r0, 80009c2 <IsEncryptionOn+0x14>
 80009b6:	b129      	cbz	r1, 80009c4 <IsEncryptionOn+0x16>
 80009b8:	f893 0061 	ldrb.w	r0, [r3, #97]	; 0x61
 80009bc:	3800      	subs	r0, #0
 80009be:	bf18      	it	ne
 80009c0:	2001      	movne	r0, #1
}
 80009c2:	4770      	bx	lr
    return ssl->keys.encryptionOn &&
 80009c4:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
 80009c8:	e7f8      	b.n	80009bc <IsEncryptionOn+0xe>

080009ca <InitSSL_Method>:
{
 80009ca:	b082      	sub	sp, #8
 80009cc:	f8ad 1004 	strh.w	r1, [sp, #4]
    method->version    = pv;
 80009d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80009d4:	8003      	strh	r3, [r0, #0]
    method->side       = WOLFSSL_CLIENT_END;
 80009d6:	2301      	movs	r3, #1
 80009d8:	7083      	strb	r3, [r0, #2]
    method->downgrade  = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	70c3      	strb	r3, [r0, #3]
}
 80009de:	b002      	add	sp, #8
 80009e0:	4770      	bx	lr

080009e2 <InitSSL_Ctx>:
{
 80009e2:	b570      	push	{r4, r5, r6, lr}
 80009e4:	4604      	mov	r4, r0
 80009e6:	460e      	mov	r6, r1
 80009e8:	4615      	mov	r5, r2
    XMEMSET(ctx, 0, sizeof(WOLFSSL_CTX));
 80009ea:	2100      	movs	r1, #0
 80009ec:	226c      	movs	r2, #108	; 0x6c
 80009ee:	f01d f801 	bl	801d9f4 <memset>
    if (heap == NULL) {
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	bf14      	ite	ne
 80009f6:	462b      	movne	r3, r5
 80009f8:	4623      	moveq	r3, r4
 80009fa:	6323      	str	r3, [r4, #48]	; 0x30
    ctx->timeout  = WOLFSSL_SESSION_TIMEOUT;
 80009fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a00:	6523      	str	r3, [r4, #80]	; 0x50
        ctx->minDowngrade = WOLFSSL_MIN_DOWNGRADE;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    wolfSSL_RefInit(&ctx->ref, &ret);
 8000a08:	2301      	movs	r3, #1
 8000a0a:	60a3      	str	r3, [r4, #8]
    ctx->privateKeyDevId = INVALID_DEVID;
 8000a0c:	f06f 0301 	mvn.w	r3, #1
 8000a10:	6263      	str	r3, [r4, #36]	; 0x24
    ctx->minEccKeySz  = MIN_ECCKEY_SZ;
 8000a12:	231c      	movs	r3, #28
 8000a14:	8763      	strh	r3, [r4, #58]	; 0x3a
    ctx->eccTempKeySz = ECDHE_SIZE;
 8000a16:	2320      	movs	r3, #32
 8000a18:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    ctx->verifyDepth = MAX_CHAIN_DEPTH;
 8000a1c:	2309      	movs	r3, #9
    ctx->method   = method;
 8000a1e:	6026      	str	r6, [r4, #0]
    ctx->verifyDepth = MAX_CHAIN_DEPTH;
 8000a20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if (method->side == WOLFSSL_CLIENT_END) {
 8000a24:	78b3      	ldrb	r3, [r6, #2]
 8000a26:	2b01      	cmp	r3, #1
        ctx->haveECC  = 1;             /* server turns on with ECC key cert */
 8000a28:	bf01      	itttt	eq
 8000a2a:	f894 3036 	ldrbeq.w	r3, [r4, #54]	; 0x36
 8000a2e:	f023 034a 	biceq.w	r3, r3, #74	; 0x4a
 8000a32:	f043 034a 	orreq.w	r3, r3, #74	; 0x4a
 8000a36:	f884 3036 	strbeq.w	r3, [r4, #54]	; 0x36
    ctx->devId = INVALID_DEVID;
 8000a3a:	f06f 0301 	mvn.w	r3, #1
 8000a3e:	6623      	str	r3, [r4, #96]	; 0x60
    ctx->cm = wolfSSL_CertManagerNew_ex(heap);
 8000a40:	4628      	mov	r0, r5
 8000a42:	f006 fc1e 	bl	8007282 <wolfSSL_CertManagerNew_ex>
 8000a46:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ctx->cm == NULL) {
 8000a48:	b110      	cbz	r0, 8000a50 <InitSSL_Ctx+0x6e>
    ctx->heap = heap; /* wolfSSL_CTX_load_static_memory sets */
 8000a4a:	6325      	str	r5, [r4, #48]	; 0x30
    return ret;
 8000a4c:	2000      	movs	r0, #0
}
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_CERT_MANAGER_ERROR;
 8000a50:	f46f 70b3 	mvn.w	r0, #358	; 0x166
 8000a54:	e7fb      	b.n	8000a4e <InitSSL_Ctx+0x6c>

08000a56 <SSL_CtxResourceFree>:
{
 8000a56:	b538      	push	{r3, r4, r5, lr}
 8000a58:	4604      	mov	r4, r0
    XFREE(ctx->method, heapAtCTXInit, DYNAMIC_TYPE_METHOD);
 8000a5a:	6800      	ldr	r0, [r0, #0]
 8000a5c:	b108      	cbz	r0, 8000a62 <SSL_CtxResourceFree+0xc>
 8000a5e:	f01c ff89 	bl	801d974 <free>
    if (ctx->suites) {
 8000a62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ctx->method = NULL;
 8000a64:	2500      	movs	r5, #0
 8000a66:	6025      	str	r5, [r4, #0]
    if (ctx->suites) {
 8000a68:	b110      	cbz	r0, 8000a70 <SSL_CtxResourceFree+0x1a>
        XFREE(ctx->suites, ctx->heap, DYNAMIC_TYPE_SUITES);
 8000a6a:	f01c ff83 	bl	801d974 <free>
        ctx->suites = NULL;
 8000a6e:	62e5      	str	r5, [r4, #44]	; 0x2c
    if (ctx->rng) {
 8000a70:	6860      	ldr	r0, [r4, #4]
 8000a72:	b138      	cbz	r0, 8000a84 <SSL_CtxResourceFree+0x2e>
        wc_FreeRng(ctx->rng);
 8000a74:	f00e f871 	bl	800eb5a <wc_FreeRng>
        XFREE(ctx->rng, ctx->heap, DYNAMIC_TYPE_RNG);
 8000a78:	6860      	ldr	r0, [r4, #4]
 8000a7a:	b108      	cbz	r0, 8000a80 <SSL_CtxResourceFree+0x2a>
 8000a7c:	f01c ff7a 	bl	801d974 <free>
        ctx->rng = NULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	6063      	str	r3, [r4, #4]
    if (ctx->privateKey != NULL && ctx->privateKey->buffer != NULL) {
 8000a84:	69a3      	ldr	r3, [r4, #24]
 8000a86:	b123      	cbz	r3, 8000a92 <SSL_CtxResourceFree+0x3c>
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	b110      	cbz	r0, 8000a92 <SSL_CtxResourceFree+0x3c>
        ForceZero(ctx->privateKey->buffer, ctx->privateKey->length);
 8000a8c:	6899      	ldr	r1, [r3, #8]
 8000a8e:	f7ff fbbd 	bl	800020c <ForceZero>
    FreeDer(&ctx->privateKey);
 8000a92:	f104 0018 	add.w	r0, r4, #24
 8000a96:	f013 fa73 	bl	8013f80 <FreeDer>
    FreeDer(&ctx->certificate);
 8000a9a:	f104 0010 	add.w	r0, r4, #16
 8000a9e:	f013 fa6f 	bl	8013f80 <FreeDer>
    FreeDer(&ctx->certChain);
 8000aa2:	f104 0014 	add.w	r0, r4, #20
 8000aa6:	f013 fa6b 	bl	8013f80 <FreeDer>
    wolfSSL_CertManagerFree(ctx->cm);
 8000aaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000aac:	f006 fbd4 	bl	8007258 <wolfSSL_CertManagerFree>
    ctx->cm = NULL;
 8000ab0:	2300      	movs	r3, #0
    TLSX_FreeAll(ctx->extensions, ctx->heap);
 8000ab2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ab4:	6e60      	ldr	r0, [r4, #100]	; 0x64
    ctx->cm = NULL;
 8000ab6:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TLSX_FreeAll(ctx->extensions, ctx->heap);
 8000abc:	f007 bfdf 	b.w	8008a7e <TLSX_FreeAll>

08000ac0 <FreeSSL_Ctx>:
    wolfSSL_RefDec(&ctx->ref, &isZero, &ret);
 8000ac0:	6883      	ldr	r3, [r0, #8]
 8000ac2:	3b01      	subs	r3, #1
{
 8000ac4:	b510      	push	{r4, lr}
 8000ac6:	4604      	mov	r4, r0
    wolfSSL_RefDec(&ctx->ref, &isZero, &ret);
 8000ac8:	6083      	str	r3, [r0, #8]
    if (isZero) {
 8000aca:	b933      	cbnz	r3, 8000ada <FreeSSL_Ctx+0x1a>
        SSL_CtxResourceFree(ctx);
 8000acc:	f7ff ffc3 	bl	8000a56 <SSL_CtxResourceFree>
        XFREE(ctx, heap, DYNAMIC_TYPE_CTX);
 8000ad0:	4620      	mov	r0, r4
}
 8000ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        XFREE(ctx, heap, DYNAMIC_TYPE_CTX);
 8000ad6:	f01c bf4d 	b.w	801d974 <free>
}
 8000ada:	bd10      	pop	{r4, pc}

08000adc <InitCiphers>:
    ssl->encrypt.des3 = NULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	6503      	str	r3, [r0, #80]	; 0x50
    ssl->decrypt.des3 = NULL;
 8000ae0:	6643      	str	r3, [r0, #100]	; 0x64
    ssl->encrypt.aes = NULL;
 8000ae2:	6543      	str	r3, [r0, #84]	; 0x54
    ssl->decrypt.aes = NULL;
 8000ae4:	6683      	str	r3, [r0, #104]	; 0x68
    ssl->encrypt.setup = 0;
 8000ae6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    ssl->decrypt.setup = 0;
 8000aea:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
}
 8000aee:	4770      	bx	lr

08000af0 <FreeCiphers>:
{
 8000af0:	b510      	push	{r4, lr}
 8000af2:	4604      	mov	r4, r0
    wc_Des3Free(ssl->encrypt.des3);
 8000af4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8000af6:	f00b fa67 	bl	800bfc8 <wc_Des3Free>
    wc_Des3Free(ssl->decrypt.des3);
 8000afa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000afc:	f00b fa64 	bl	800bfc8 <wc_Des3Free>
    XFREE(ssl->encrypt.des3, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b00:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000b02:	b108      	cbz	r0, 8000b08 <FreeCiphers+0x18>
 8000b04:	f01c ff36 	bl	801d974 <free>
    XFREE(ssl->decrypt.des3, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b08:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000b0a:	b108      	cbz	r0, 8000b10 <FreeCiphers+0x20>
 8000b0c:	f01c ff32 	bl	801d974 <free>
    wc_AesFree(ssl->encrypt.aes);
 8000b10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b12:	f00a ff79 	bl	800ba08 <wc_AesFree>
    wc_AesFree(ssl->decrypt.aes);
 8000b16:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000b18:	f00a ff76 	bl	800ba08 <wc_AesFree>
    XFREE(ssl->encrypt.aes, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b1e:	b108      	cbz	r0, 8000b24 <FreeCiphers+0x34>
 8000b20:	f01c ff28 	bl	801d974 <free>
    XFREE(ssl->decrypt.aes, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b24:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000b26:	b108      	cbz	r0, 8000b2c <FreeCiphers+0x3c>
 8000b28:	f01c ff24 	bl	801d974 <free>
    XFREE(ssl->decrypt.additional, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b2c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000b2e:	b108      	cbz	r0, 8000b34 <FreeCiphers+0x44>
 8000b30:	f01c ff20 	bl	801d974 <free>
    XFREE(ssl->encrypt.additional, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b36:	b108      	cbz	r0, 8000b3c <FreeCiphers+0x4c>
 8000b38:	f01c ff1c 	bl	801d974 <free>
    XFREE(ssl->decrypt.nonce, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8000b3e:	b108      	cbz	r0, 8000b44 <FreeCiphers+0x54>
 8000b40:	f01c ff18 	bl	801d974 <free>
    XFREE(ssl->encrypt.nonce, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b44:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000b46:	b118      	cbz	r0, 8000b50 <FreeCiphers+0x60>
}
 8000b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    XFREE(ssl->encrypt.nonce, ssl->heap, DYNAMIC_TYPE_CIPHER);
 8000b4c:	f01c bf12 	b.w	801d974 <free>
}
 8000b50:	bd10      	pop	{r4, pc}

08000b52 <InitCipherSpecs>:
{
 8000b52:	b510      	push	{r4, lr}
    XMEMSET(cs, 0, sizeof(CipherSpecs));
 8000b54:	2210      	movs	r2, #16
{
 8000b56:	4604      	mov	r4, r0
    XMEMSET(cs, 0, sizeof(CipherSpecs));
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f01c ff4b 	bl	801d9f4 <memset>
    cs->bulk_cipher_algorithm = INVALID_BYTE;
 8000b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b62:	8123      	strh	r3, [r4, #8]
    cs->mac_algorithm         = INVALID_BYTE;
 8000b64:	8163      	strh	r3, [r4, #10]
    cs->sig_algo              = INVALID_BYTE;
 8000b66:	7323      	strb	r3, [r4, #12]
}
 8000b68:	bd10      	pop	{r4, pc}

08000b6a <InitSuitesHashSigAlgo_ex2>:
    if (haveSig & SIG_ECDSA) {
 8000b6a:	f011 0301 	ands.w	r3, r1, #1
{
 8000b6e:	b510      	push	{r4, lr}
    if (haveSig & SIG_ECDSA) {
 8000b70:	d00b      	beq.n	8000b8a <InitSuitesHashSigAlgo_ex2+0x20>
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx, macAlgo, sigAlgo);
 8000b72:	2306      	movs	r3, #6
 8000b74:	b148      	cbz	r0, 8000b8a <InitSuitesHashSigAlgo_ex2+0x20>
 8000b76:	2203      	movs	r2, #3
 8000b78:	7042      	strb	r2, [r0, #1]
 8000b7a:	70c2      	strb	r2, [r0, #3]
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx,
 8000b7c:	2208      	movs	r2, #8
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx, macAlgo, sigAlgo);
 8000b7e:	2404      	movs	r4, #4
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx,
 8000b80:	7102      	strb	r2, [r0, #4]
 8000b82:	2207      	movs	r2, #7
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx, macAlgo, sigAlgo);
 8000b84:	7003      	strb	r3, [r0, #0]
 8000b86:	7084      	strb	r4, [r0, #2]
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx,
 8000b88:	7142      	strb	r2, [r0, #5]
    if (haveSig & SIG_RSA) {
 8000b8a:	078a      	lsls	r2, r1, #30
 8000b8c:	d50f      	bpl.n	8000bae <InitSuitesHashSigAlgo_ex2+0x44>
            ADD_HASH_SIG_ALGO(hashSigAlgo, inOutIdx, macAlgo, sigAlgo);
 8000b8e:	b160      	cbz	r0, 8000baa <InitSuitesHashSigAlgo_ex2+0x40>
 8000b90:	2206      	movs	r2, #6
 8000b92:	54c2      	strb	r2, [r0, r3]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	b292      	uxth	r2, r2
 8000b98:	2101      	movs	r1, #1
 8000b9a:	5481      	strb	r1, [r0, r2]
 8000b9c:	1c9a      	adds	r2, r3, #2
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	2404      	movs	r4, #4
 8000ba2:	5484      	strb	r4, [r0, r2]
 8000ba4:	1cda      	adds	r2, r3, #3
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	5481      	strb	r1, [r0, r2]
 8000baa:	3304      	adds	r3, #4
 8000bac:	b29b      	uxth	r3, r3
    *len = idx;
 8000bae:	9a02      	ldr	r2, [sp, #8]
 8000bb0:	8013      	strh	r3, [r2, #0]
}
 8000bb2:	bd10      	pop	{r4, pc}

08000bb4 <AllocateCtxSuites>:
{
 8000bb4:	b538      	push	{r3, r4, r5, lr}
    if (ctx->suites == NULL) {
 8000bb6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 8000bb8:	4605      	mov	r5, r0
    if (ctx->suites == NULL) {
 8000bba:	b954      	cbnz	r4, 8000bd2 <AllocateCtxSuites+0x1e>
        ctx->suites = (Suites*)XMALLOC(sizeof(Suites), ctx->heap,
 8000bbc:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8000bc0:	f01c fed0 	bl	801d964 <malloc>
 8000bc4:	62e8      	str	r0, [r5, #44]	; 0x2c
        if (ctx->suites == NULL) {
 8000bc6:	b130      	cbz	r0, 8000bd6 <AllocateCtxSuites+0x22>
        XMEMSET(ctx->suites, 0, sizeof(Suites));
 8000bc8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000bcc:	4621      	mov	r1, r4
 8000bce:	f01c ff11 	bl	801d9f4 <memset>
    return 0;
 8000bd2:	2000      	movs	r0, #0
}
 8000bd4:	bd38      	pop	{r3, r4, r5, pc}
            return MEMORY_ERROR;
 8000bd6:	f46f 7097 	mvn.w	r0, #302	; 0x12e
 8000bda:	e7fb      	b.n	8000bd4 <AllocateCtxSuites+0x20>

08000bdc <AllocateSuites>:
{
 8000bdc:	b538      	push	{r3, r4, r5, lr}
    if (ssl->suites == NULL) {
 8000bde:	6844      	ldr	r4, [r0, #4]
{
 8000be0:	4605      	mov	r5, r0
    if (ssl->suites == NULL) {
 8000be2:	b974      	cbnz	r4, 8000c02 <AllocateSuites+0x26>
        ssl->suites = (Suites*)XMALLOC(sizeof(Suites), ssl->heap,
 8000be4:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8000be8:	f01c febc 	bl	801d964 <malloc>
 8000bec:	4603      	mov	r3, r0
 8000bee:	6068      	str	r0, [r5, #4]
        if (ssl->suites == NULL) {
 8000bf0:	b180      	cbz	r0, 8000c14 <AllocateSuites+0x38>
        if (ssl->ctx != NULL && ssl->ctx->suites != NULL)
 8000bf2:	682a      	ldr	r2, [r5, #0]
 8000bf4:	b13a      	cbz	r2, 8000c06 <AllocateSuites+0x2a>
 8000bf6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000bf8:	b129      	cbz	r1, 8000c06 <AllocateSuites+0x2a>
            XMEMCPY(ssl->suites, ssl->ctx->suites, sizeof(Suites));
 8000bfa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000bfe:	f01c fed1 	bl	801d9a4 <memcpy>
    return 0;
 8000c02:	2000      	movs	r0, #0
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
            XMEMSET(ssl->suites, 0, sizeof(Suites));
 8000c06:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f01c fef1 	bl	801d9f4 <memset>
 8000c12:	e7f6      	b.n	8000c02 <AllocateSuites+0x26>
            return MEMORY_ERROR;
 8000c14:	f46f 7097 	mvn.w	r0, #302	; 0x12e
 8000c18:	e7f4      	b.n	8000c04 <AllocateSuites+0x28>

08000c1a <InitSuites>:
{
 8000c1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1e:	4617      	mov	r7, r2
 8000c20:	f8ad 1004 	strh.w	r1, [sp, #4]
 8000c24:	f3c1 2207 	ubfx	r2, r1, #8, #8
    int    tls    = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_MINOR;
 8000c28:	b2c9      	uxtb	r1, r1
 8000c2a:	2903      	cmp	r1, #3
{
 8000c2c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8000c30:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8000c34:	f8bd e040 	ldrh.w	lr, [sp, #64]	; 0x40
 8000c38:	f8bd c044 	ldrh.w	ip, [sp, #68]	; 0x44
    int    tls    = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_MINOR;
 8000c3c:	d140      	bne.n	8000cc0 <InitSuites+0xa6>
 8000c3e:	1e14      	subs	r4, r2, #0
 8000c40:	bf18      	it	ne
 8000c42:	2401      	movne	r4, #1
    int    tls1_2 = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_2_MINOR;
 8000c44:	2a02      	cmp	r2, #2
 8000c46:	bf94      	ite	ls
 8000c48:	2200      	movls	r2, #0
 8000c4a:	2201      	movhi	r2, #1
    if (suites == NULL) {
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d05d      	beq.n	8000d0c <InitSuites+0xf2>
    if (suites->setSuites)
 8000c50:	f890 1156 	ldrb.w	r1, [r0, #342]	; 0x156
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d159      	bne.n	8000d0c <InitSuites+0xf2>
    if (tls1_2 && haveECC) {
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	d053      	beq.n	8000d04 <InitSuites+0xea>
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d04f      	beq.n	8000d00 <InitSuites+0xe6>
        suites->suites[idx++] = ECC_BYTE;
 8000c60:	f44f 512f 	mov.w	r1, #11200	; 0x2bc0
 8000c64:	8081      	strh	r1, [r0, #4]
        suites->suites[idx++] = ECC_BYTE;
 8000c66:	f44f 510f 	mov.w	r1, #9152	; 0x23c0
 8000c6a:	80c1      	strh	r1, [r0, #6]
    if (tls && haveECC) {
 8000c6c:	2c00      	cmp	r4, #0
 8000c6e:	d145      	bne.n	8000cfc <InitSuites+0xe2>
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
 8000c70:	2504      	movs	r5, #4
    if (suites->hashSigAlgoSz == 0) {
 8000c72:	8841      	ldrh	r1, [r0, #2]
    suites->suiteSz = idx;
 8000c74:	8005      	strh	r5, [r0, #0]
    if (suites->hashSigAlgoSz == 0) {
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d148      	bne.n	8000d0c <InitSuites+0xf2>
        haveSig |= (haveRSAsig | haveRSA) ? SIG_RSA : 0;
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2102      	movne	r1, #2
 8000c80:	2100      	moveq	r1, #0
        haveSig |= (haveECDSAsig | haveECC) ? SIG_ECDSA : 0;
 8000c82:	ea56 0308 	orrs.w	r3, r6, r8
 8000c86:	bf0c      	ite	eq
 8000c88:	460b      	moveq	r3, r1
 8000c8a:	f041 0301 	orrne.w	r3, r1, #1
        haveSig |= haveFalconSig ? SIG_FALCON : 0;
 8000c8e:	f1be 0f00 	cmp.w	lr, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2108      	movne	r1, #8
 8000c96:	2100      	moveq	r1, #0
        haveSig |= haveDilithiumSig ? SIG_DILITHIUM : 0;
 8000c98:	f1bc 0f00 	cmp.w	ip, #0
        haveSig |= haveFalconSig ? SIG_FALCON : 0;
 8000c9c:	ea41 0103 	orr.w	r1, r1, r3
        haveSig |= haveDilithiumSig ? SIG_DILITHIUM : 0;
 8000ca0:	bf18      	it	ne
 8000ca2:	2410      	movne	r4, #16
        InitSuitesHashSigAlgo_ex2(suites->hashSigAlgo, haveSig, tls1_2, keySz,
 8000ca4:	f100 0302 	add.w	r3, r0, #2
        haveSig |= haveDilithiumSig ? SIG_DILITHIUM : 0;
 8000ca8:	bf08      	it	eq
 8000caa:	2400      	moveq	r4, #0
        InitSuitesHashSigAlgo_ex2(suites->hashSigAlgo, haveSig, tls1_2, keySz,
 8000cac:	930a      	str	r3, [sp, #40]	; 0x28
 8000cae:	4321      	orrs	r1, r4
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	f500 7098 	add.w	r0, r0, #304	; 0x130
}
 8000cb6:	b002      	add	sp, #8
 8000cb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        InitSuitesHashSigAlgo_ex2(suites->hashSigAlgo, haveSig, tls1_2, keySz,
 8000cbc:	f7ff bf55 	b.w	8000b6a <InitSuitesHashSigAlgo_ex2>
    int    tls    = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_MINOR;
 8000cc0:	2400      	movs	r4, #0
    int    tls1_2 = pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_2_MINOR;
 8000cc2:	4622      	mov	r2, r4
 8000cc4:	e7c2      	b.n	8000c4c <InitSuites+0x32>
    if (tls && haveECC) {
 8000cc6:	b1de      	cbz	r6, 8000d00 <InitSuites+0xe6>
    word16 idx = 0;
 8000cc8:	4614      	mov	r4, r2
        suites->suites[idx++] = ECC_BYTE;
 8000cca:	1905      	adds	r5, r0, r4
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
 8000ccc:	eb00 0904 	add.w	r9, r0, r4
        suites->suites[idx++] = ECC_BYTE;
 8000cd0:	21c0      	movs	r1, #192	; 0xc0
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
 8000cd2:	f04f 0a0a 	mov.w	sl, #10
        suites->suites[idx++] = ECC_BYTE;
 8000cd6:	7129      	strb	r1, [r5, #4]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
 8000cd8:	1ca5      	adds	r5, r4, #2
 8000cda:	f889 a005 	strb.w	sl, [r9, #5]
    if (tls && haveECC) {
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d0c7      	beq.n	8000c72 <InitSuites+0x58>
        suites->suites[idx++] = ECC_BYTE;
 8000ce2:	4405      	add	r5, r0
 8000ce4:	7129      	strb	r1, [r5, #4]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
 8000ce6:	464d      	mov	r5, r9
 8000ce8:	f04f 0909 	mov.w	r9, #9
        suites->suites[idx++] = ECC_BYTE;
 8000cec:	7229      	strb	r1, [r5, #8]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
 8000cee:	f885 9007 	strb.w	r9, [r5, #7]
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA;
 8000cf2:	1da5      	adds	r5, r4, #6
 8000cf4:	4404      	add	r4, r0
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	7261      	strb	r1, [r4, #9]
 8000cfa:	e7ba      	b.n	8000c72 <InitSuites+0x58>
        suites->suites[idx++] = TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
 8000cfc:	2404      	movs	r4, #4
 8000cfe:	e7e4      	b.n	8000cca <InitSuites+0xb0>
    word16 idx = 0;
 8000d00:	4635      	mov	r5, r6
 8000d02:	e7b6      	b.n	8000c72 <InitSuites+0x58>
    if (tls && haveECC) {
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d1de      	bne.n	8000cc6 <InitSuites+0xac>
    word16 idx = 0;
 8000d08:	4615      	mov	r5, r2
 8000d0a:	e7b2      	b.n	8000c72 <InitSuites+0x58>
}
 8000d0c:	b002      	add	sp, #8
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000d12 <InitSuites_EitherSide.constprop.0>:
static void InitSuites_EitherSide(Suites* suites, ProtocolVersion pv, int keySz,
 8000d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	461c      	mov	r4, r3
 8000d1a:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
 8000d1e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8000d22:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 8000d26:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8000d2a:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8000d2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000d30:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8000d34:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 8000d38:	2101      	movs	r1, #1
        InitSuites(suites, pv, keySz, haveRSA, havePSK, haveDH, haveECDSAsig,
 8000d3a:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
 8000d3e:	e9cd e807 	strd	lr, r8, [sp, #28]
 8000d42:	e9cd 7c05 	strd	r7, ip, [sp, #20]
 8000d46:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8000d4a:	9502      	str	r5, [sp, #8]
    if (side == WOLFSSL_SERVER_END) {
 8000d4c:	b93b      	cbnz	r3, 8000d5e <InitSuites_EitherSide.constprop.0+0x4c>
        InitSuites(suites, pv, keySz, haveRSA, havePSK, haveDH, haveECDSAsig,
 8000d4e:	9401      	str	r4, [sp, #4]
        InitSuites(suites, pv, keySz, haveRSA, havePSK, TRUE, haveECDSAsig,
 8000d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	f7ff ff61 	bl	8000c1a <InitSuites>
}
 8000d58:	b00e      	add	sp, #56	; 0x38
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        InitSuites(suites, pv, keySz, haveRSA, havePSK, TRUE, haveECDSAsig,
 8000d5e:	9101      	str	r1, [sp, #4]
 8000d60:	2300      	movs	r3, #0
 8000d62:	e7f5      	b.n	8000d50 <InitSuites_EitherSide.constprop.0+0x3e>

08000d64 <EccVerify>:
{
 8000d64:	b513      	push	{r0, r1, r4, lr}
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
        ret = wc_ecc_verify_hash(in, inSz, out, outSz, &ssl->eccVerifyRes, key);
 8000d6e:	9b05      	ldr	r3, [sp, #20]
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	f504 7323 	add.w	r3, r4, #652	; 0x28c
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	9b04      	ldr	r3, [sp, #16]
 8000d7a:	f00d fa0e 	bl	800e19a <wc_ecc_verify_hash>
        if (ret != 0 || ssl->eccVerifyRes == 0) {
 8000d7e:	b928      	cbnz	r0, 8000d8c <EccVerify+0x28>
 8000d80:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
                ret = VERIFY_SIGN_ERROR;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <EccVerify+0x2c>)
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	bf08      	it	eq
 8000d8a:	4618      	moveq	r0, r3
}
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd10      	pop	{r4, pc}
 8000d90:	fffffeb6 	.word	0xfffffeb6

08000d94 <EccSharedSecret>:
{
 8000d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d98:	460c      	mov	r4, r1
        ret = wc_ecc_set_rng(priv_key, ssl->rng);
 8000d9a:	6981      	ldr	r1, [r0, #24]
 8000d9c:	4620      	mov	r0, r4
{
 8000d9e:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8000da2:	4615      	mov	r5, r2
        ret = wc_ecc_set_rng(priv_key, ssl->rng);
 8000da4:	f00d fbef 	bl	800e586 <wc_ecc_set_rng>
        if (ret == 0)
 8000da8:	b938      	cbnz	r0, 8000dba <EccSharedSecret+0x26>
            ret = wc_ecc_shared_secret(priv_key, pub_key, out, outlen);
 8000daa:	463b      	mov	r3, r7
 8000dac:	4632      	mov	r2, r6
 8000dae:	4629      	mov	r1, r5
 8000db0:	4620      	mov	r0, r4
}
 8000db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            ret = wc_ecc_shared_secret(priv_key, pub_key, out, outlen);
 8000db6:	f00c bb8b 	b.w	800d4d0 <wc_ecc_shared_secret>
}
 8000dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dbe <EccMakeKey>:
{
 8000dbe:	b570      	push	{r4, r5, r6, lr}
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	460d      	mov	r5, r1
    if (peer == NULL || peer->dp == NULL) {
 8000dc4:	b10a      	cbz	r2, 8000dca <EccMakeKey+0xc>
 8000dc6:	6913      	ldr	r3, [r2, #16]
 8000dc8:	b953      	cbnz	r3, 8000de0 <EccMakeKey+0x22>
        if (ssl->ecdhCurveOID > 0) {
 8000dca:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
        keySz = ssl->eccTempKeySz;
 8000dce:	f8b4 62a4 	ldrh.w	r6, [r4, #676]	; 0x2a4
        if (ssl->ecdhCurveOID > 0) {
 8000dd2:	b118      	cbz	r0, 8000ddc <EccMakeKey+0x1e>
            ecc_curve = wc_ecc_get_oid(ssl->ecdhCurveOID, NULL, NULL);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	f00d fbde 	bl	800e598 <wc_ecc_get_oid>
    int ecc_curve = ECC_CURVE_DEF;
 8000ddc:	4603      	mov	r3, r0
 8000dde:	e001      	b.n	8000de4 <EccMakeKey+0x26>
        ecc_curve = peer->dp->id;
 8000de0:	e9d3 6300 	ldrd	r6, r3, [r3]
        ret = wc_ecc_make_key_ex(ssl->rng, keySz, key, ecc_curve);
 8000de4:	69a0      	ldr	r0, [r4, #24]
 8000de6:	462a      	mov	r2, r5
 8000de8:	4631      	mov	r1, r6
 8000dea:	f00c fc89 	bl	800d700 <wc_ecc_make_key_ex>
    if (ret == 0 && key->dp) {
 8000dee:	b920      	cbnz	r0, 8000dfa <EccMakeKey+0x3c>
 8000df0:	692b      	ldr	r3, [r5, #16]
 8000df2:	b113      	cbz	r3, 8000dfa <EccMakeKey+0x3c>
        ssl->ecdhCurveOID = key->dp->oidSum;
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
}
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}

08000dfc <Ed25519CheckPubKey>:
{
 8000dfc:	b513      	push	{r0, r1, r4, lr}
    ed25519_key* key = (ed25519_key*)ssl->hsKey;
 8000dfe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    if (key != NULL && !key->pubKeySet) {
 8000e00:	b19c      	cbz	r4, 8000e2a <Ed25519CheckPubKey+0x2e>
 8000e02:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8000e06:	079b      	lsls	r3, r3, #30
 8000e08:	d40f      	bmi.n	8000e2a <Ed25519CheckPubKey+0x2e>
        ret = wc_CertGetPubKey(ssl->buffers.certificate->buffer,
 8000e0a:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 8000e0e:	ab01      	add	r3, sp, #4
 8000e10:	6881      	ldr	r1, [r0, #8]
 8000e12:	6800      	ldr	r0, [r0, #0]
 8000e14:	466a      	mov	r2, sp
 8000e16:	f012 fe65 	bl	8013ae4 <wc_CertGetPubKey>
        if (ret == 0) {
 8000e1a:	b920      	cbnz	r0, 8000e26 <Ed25519CheckPubKey+0x2a>
            ret = wc_ed25519_import_public(pubKey, pubKeySz, key);
 8000e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000e20:	4622      	mov	r2, r4
 8000e22:	f015 f975 	bl	8016110 <wc_ed25519_import_public>
}
 8000e26:	b002      	add	sp, #8
 8000e28:	bd10      	pop	{r4, pc}
    int ret = 0;
 8000e2a:	2000      	movs	r0, #0
    return ret;
 8000e2c:	e7fb      	b.n	8000e26 <Ed25519CheckPubKey+0x2a>
	...

08000e30 <Ed25519Verify>:
{
 8000e30:	b513      	push	{r0, r1, r4, lr}
 8000e32:	4604      	mov	r4, r0
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
        ret = wc_ed25519_verify_msg(in, inSz, msg, msgSz,
 8000e3a:	9b05      	ldr	r3, [sp, #20]
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f504 7323 	add.w	r3, r4, #652	; 0x28c
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	9b04      	ldr	r3, [sp, #16]
 8000e46:	f015 f8df 	bl	8016008 <wc_ed25519_verify_msg>
        ret = (ret != 0 || ssl->eccVerifyRes == 0) ? VERIFY_SIGN_ERROR : 0;
 8000e4a:	b938      	cbnz	r0, 8000e5c <Ed25519Verify+0x2c>
 8000e4c:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <Ed25519Verify+0x30>)
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	bf08      	it	eq
 8000e56:	4618      	moveq	r0, r3
}
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd10      	pop	{r4, pc}
        ret = (ret != 0 || ssl->eccVerifyRes == 0) ? VERIFY_SIGN_ERROR : 0;
 8000e5c:	4800      	ldr	r0, [pc, #0]	; (8000e60 <Ed25519Verify+0x30>)
 8000e5e:	e7fb      	b.n	8000e58 <Ed25519Verify+0x28>
 8000e60:	fffffeb6 	.word	0xfffffeb6

08000e64 <InitSSL_CTX_Suites>:
{
 8000e64:	b510      	push	{r4, lr}
    InitSuites_EitherSide(ctx->suites, ctx->method->version, keySz,
 8000e66:	6802      	ldr	r2, [r0, #0]
            haveRSA, havePSK, ctx->haveDH, ctx->haveECDSAsig, ctx->haveECC,
 8000e68:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    InitSuites_EitherSide(ctx->suites, ctx->method->version, keySz,
 8000e6c:	7891      	ldrb	r1, [r2, #2]
{
 8000e6e:	b088      	sub	sp, #32
    InitSuites_EitherSide(ctx->suites, ctx->method->version, keySz,
 8000e70:	9106      	str	r1, [sp, #24]
 8000e72:	2100      	movs	r1, #0
 8000e74:	9105      	str	r1, [sp, #20]
 8000e76:	f3c3 1140 	ubfx	r1, r3, #5, #1
 8000e7a:	9104      	str	r1, [sp, #16]
 8000e7c:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8000e80:	9103      	str	r1, [sp, #12]
 8000e82:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8000e86:	9102      	str	r1, [sp, #8]
 8000e88:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8000e8c:	9101      	str	r1, [sp, #4]
 8000e8e:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8000e92:	9100      	str	r1, [sp, #0]
 8000e94:	7854      	ldrb	r4, [r2, #1]
 8000e96:	7811      	ldrb	r1, [r2, #0]
 8000e98:	6a02      	ldr	r2, [r0, #32]
 8000e9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000e9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ea0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8000ea4:	f7ff ff35 	bl	8000d12 <InitSuites_EitherSide.constprop.0>
}
 8000ea8:	b008      	add	sp, #32
 8000eaa:	bd10      	pop	{r4, pc}

08000eac <InitSSL_Suites>:
{
 8000eac:	b510      	push	{r4, lr}
    if (!ssl)
 8000eae:	4604      	mov	r4, r0
{
 8000eb0:	b088      	sub	sp, #32
    if (!ssl)
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d04f      	beq.n	8000f56 <InitSSL_Suites+0xaa>
    ssl->options.cacheMessages = ssl->options.side == WOLFSSL_SERVER_END ||
 8000eb6:	f890 2270 	ldrb.w	r2, [r0, #624]	; 0x270
                                      ssl->buffers.keyType == ed448_sa_algo ||
 8000eba:	f012 0f30 	tst.w	r2, #48	; 0x30
 8000ebe:	d048      	beq.n	8000f52 <InitSSL_Suites+0xa6>
                                      ssl->buffers.keyType == ed25519_sa_algo ||
 8000ec0:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
    ssl->options.cacheMessages = ssl->options.side == WOLFSSL_SERVER_END ||
 8000ec4:	f003 013d 	and.w	r1, r3, #61	; 0x3d
 8000ec8:	2909      	cmp	r1, #9
 8000eca:	d042      	beq.n	8000f52 <InitSSL_Suites+0xa6>
                                      ssl->buffers.keyType == ed448_sa_algo ||
 8000ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ed0:	f1a3 0111 	sub.w	r1, r3, #17
 8000ed4:	424b      	negs	r3, r1
 8000ed6:	414b      	adcs	r3, r1
    ssl->options.cacheMessages = ssl->options.side == WOLFSSL_SERVER_END ||
 8000ed8:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    if (ssl->suites != NULL) {
 8000edc:	6860      	ldr	r0, [r4, #4]
    ssl->options.cacheMessages = ssl->options.side == WOLFSSL_SERVER_END ||
 8000ede:	f363 0182 	bfi	r1, r3, #2, #1
 8000ee2:	f884 1276 	strb.w	r1, [r4, #630]	; 0x276
    if (ssl->suites != NULL) {
 8000ee6:	b1f8      	cbz	r0, 8000f28 <InitSSL_Suites+0x7c>
        InitSuites_EitherSide(ssl->suites, ssl->version, keySz, haveRSA,
 8000ee8:	f3c2 1201 	ubfx	r2, r2, #4, #2
                havePSK, ssl->options.haveDH, ssl->options.haveECDSAsig,
 8000eec:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
        InitSuites_EitherSide(ssl->suites, ssl->version, keySz, haveRSA,
 8000ef0:	9206      	str	r2, [sp, #24]
                ssl->options.haveAnon, ssl->options.side);
 8000ef2:	f894 2275 	ldrb.w	r2, [r4, #629]	; 0x275
        InitSuites_EitherSide(ssl->suites, ssl->version, keySz, haveRSA,
 8000ef6:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000efa:	9205      	str	r2, [sp, #20]
 8000efc:	09da      	lsrs	r2, r3, #7
 8000efe:	9204      	str	r2, [sp, #16]
 8000f00:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8000f04:	9203      	str	r2, [sp, #12]
 8000f06:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8000f0a:	9202      	str	r2, [sp, #8]
 8000f0c:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8000f10:	9201      	str	r2, [sp, #4]
 8000f12:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 8000f1c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000f20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f24:	f7ff fef5 	bl	8000d12 <InitSuites_EitherSide.constprop.0>
    if (ssl->options.side == WOLFSSL_SERVER_END &&
 8000f28:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8000f2c:	f013 0f30 	tst.w	r3, #48	; 0x30
 8000f30:	d114      	bne.n	8000f5c <InitSSL_Suites+0xb0>
        if (!ssl->buffers.certificate || !ssl->buffers.certificate->buffer) {
 8000f32:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000f36:	b19b      	cbz	r3, 8000f60 <InitSSL_Suites+0xb4>
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b18b      	cbz	r3, 8000f60 <InitSSL_Suites+0xb4>
        if (!ssl->buffers.key || !ssl->buffers.key->buffer) {
 8000f3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000f40:	b173      	cbz	r3, 8000f60 <InitSSL_Suites+0xb4>
 8000f42:	681b      	ldr	r3, [r3, #0]
                return NO_PRIVATE_KEY;
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2001      	movne	r0, #1
 8000f4a:	f46f 709e 	mvneq.w	r0, #316	; 0x13c
}
 8000f4e:	b008      	add	sp, #32
 8000f50:	bd10      	pop	{r4, pc}
                                      ssl->buffers.keyType == ed448_sa_algo ||
 8000f52:	2301      	movs	r3, #1
 8000f54:	e7c0      	b.n	8000ed8 <InitSSL_Suites+0x2c>
        return BAD_FUNC_ARG;
 8000f56:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8000f5a:	e7f8      	b.n	8000f4e <InitSSL_Suites+0xa2>
    return WOLFSSL_SUCCESS;
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	e7f6      	b.n	8000f4e <InitSSL_Suites+0xa2>
                return NO_PRIVATE_KEY;
 8000f60:	f46f 709e 	mvn.w	r0, #316	; 0x13c
 8000f64:	e7f3      	b.n	8000f4e <InitSSL_Suites+0xa2>
	...

08000f68 <SetSSL_CTX>:
{
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	b085      	sub	sp, #20
 8000f70:	4690      	mov	r8, r2
    if (!ssl || !ctx)
 8000f72:	4604      	mov	r4, r0
 8000f74:	b928      	cbnz	r0, 8000f82 <SetSSL_CTX+0x1a>
        return BAD_FUNC_ARG;
 8000f76:	f06f 07ac 	mvn.w	r7, #172	; 0xac
}
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	b005      	add	sp, #20
 8000f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!ssl || !ctx)
 8000f82:	2900      	cmp	r1, #0
 8000f84:	d0f7      	beq.n	8000f76 <SetSSL_CTX+0xe>
    newSSL = ssl->ctx == NULL; /* Assign after null check */
 8000f86:	6806      	ldr	r6, [r0, #0]
    if (!newSSL) {
 8000f88:	b116      	cbz	r6, 8000f90 <SetSSL_CTX+0x28>
        wolfSSL_CTX_free(ssl->ctx);
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f006 f99b 	bl	80072c6 <wolfSSL_CTX_free>
    ret = wolfSSL_CTX_up_ref(ctx);
 8000f90:	4628      	mov	r0, r5
 8000f92:	f006 f993 	bl	80072bc <wolfSSL_CTX_up_ref>
    if (!ssl->msgsReceived.got_client_hello &&
 8000f96:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
    ssl->ctx     = ctx; /* only for passing to calls, options could change */
 8000f9a:	6025      	str	r5, [r4, #0]
    if (!ssl->msgsReceived.got_client_hello &&
 8000f9c:	f013 0f0e 	tst.w	r3, #14
 8000fa0:	682b      	ldr	r3, [r5, #0]
        ssl->version = ctx->method->version;
 8000fa2:	bf04      	itt	eq
 8000fa4:	881a      	ldrheq	r2, [r3, #0]
 8000fa6:	f8a4 213c 	strheq.w	r2, [r4, #316]	; 0x13c
    ssl->eccTempKeySz = ctx->eccTempKeySz;
 8000faa:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
 8000fae:	f8a4 22a4 	strh.w	r2, [r4, #676]	; 0x2a4
    ssl->ecdhCurveOID = ctx->ecdhCurveOID;
 8000fb2:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000fb4:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
    ssl->pkCurveOID = ctx->pkCurveOID;
 8000fb8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8000fba:	f8c4 22a8 	str.w	r2, [r4, #680]	; 0x2a8
    ssl->timeout = ctx->timeout;
 8000fbe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000fc0:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    ssl->verifyCallback    = ctx->verifyCallback;
 8000fc4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000fc6:	6222      	str	r2, [r4, #32]
    if (newSSL || ctx->method->side != WOLFSSL_NEITHER_END)
 8000fc8:	7899      	ldrb	r1, [r3, #2]
    ret = wolfSSL_CTX_up_ref(ctx);
 8000fca:	4607      	mov	r7, r0
    if (newSSL || ctx->method->side != WOLFSSL_NEITHER_END)
 8000fcc:	b10e      	cbz	r6, 8000fd2 <SetSSL_CTX+0x6a>
 8000fce:	2903      	cmp	r1, #3
 8000fd0:	d005      	beq.n	8000fde <SetSSL_CTX+0x76>
        ssl->options.side      = ctx->method->side;
 8000fd2:	f894 2270 	ldrb.w	r2, [r4, #624]	; 0x270
 8000fd6:	f361 1205 	bfi	r2, r1, #4, #2
 8000fda:	f884 2270 	strb.w	r2, [r4, #624]	; 0x270
    ssl->options.downgrade    = ctx->method->downgrade;
 8000fde:	78d9      	ldrb	r1, [r3, #3]
    ssl->options.minDowngrade = ctx->minDowngrade;
 8000fe0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8000fe4:	f884 3280 	strb.w	r3, [r4, #640]	; 0x280
    ssl->options.haveRSA          = ctx->haveRSA;
 8000fe8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    ssl->options.haveFalconSig    = ctx->haveFalconSig;
 8000fec:	f3c3 1200 	ubfx	r2, r3, #4, #1
    ssl->options.haveRSA          = ctx->haveRSA;
 8000ff0:	f003 0a01 	and.w	sl, r3, #1
    ssl->options.haveDH           = ctx->haveDH;
 8000ff4:	f3c3 0e80 	ubfx	lr, r3, #2, #1
    ssl->options.haveECDSAsig     = ctx->haveECDSAsig;
 8000ff8:	f3c3 0cc0 	ubfx	ip, r3, #3, #1
    ssl->options.haveECC          = ctx->haveECC;
 8000ffc:	f3c3 0940 	ubfx	r9, r3, #1, #1
    ssl->options.haveStaticECC    = ctx->haveStaticECC;
 8001000:	f3c3 1080 	ubfx	r0, r3, #6, #1
    ssl->options.haveDilithiumSig = ctx->haveDilithiumSig;
 8001004:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001008:	9301      	str	r3, [sp, #4]
    ssl->options.minEccKeySz = ctx->minEccKeySz;
 800100a:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800100c:	f8a4 3286 	strh.w	r3, [r4, #646]	; 0x286
    ssl->options.partialWrite  = ctx->partialWrite;
 8001010:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    ssl->options.haveFalconSig    = ctx->haveFalconSig;
 8001014:	9200      	str	r2, [sp, #0]
    ssl->options.quietShutdown = ctx->quietShutdown;
 8001016:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
    ssl->options.partialWrite  = ctx->partialWrite;
 800101a:	09db      	lsrs	r3, r3, #7
 800101c:	9302      	str	r3, [sp, #8]
    ssl->options.quietShutdown = ctx->quietShutdown;
 800101e:	f3c2 0340 	ubfx	r3, r2, #1, #1
 8001022:	9303      	str	r3, [sp, #12]
    ssl->options.sessionCacheOff      = ctx->sessionCacheOff;
 8001024:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    ssl->options.sendVerify     = ctx->sendVerify;
 8001028:	f3c3 1b00 	ubfx	fp, r3, #4, #1
 800102c:	099e      	lsrs	r6, r3, #6
 800102e:	ea46 068b 	orr.w	r6, r6, fp, lsl #2
 8001032:	f3c3 1b40 	ubfx	fp, r3, #5, #1
 8001036:	ea46 06cb 	orr.w	r6, r6, fp, lsl #3
 800103a:	f003 0b01 	and.w	fp, r3, #1
 800103e:	ea46 168b 	orr.w	r6, r6, fp, lsl #6
 8001042:	f3c3 0b40 	ubfx	fp, r3, #1, #1
 8001046:	ea46 16cb 	orr.w	r6, r6, fp, lsl #7
 800104a:	f3c3 0b80 	ubfx	fp, r3, #2, #1
 800104e:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8001052:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001056:	ea46 2643 	orr.w	r6, r6, r3, lsl #9
 800105a:	f001 0101 	and.w	r1, r1, #1
 800105e:	ea46 2681 	orr.w	r6, r6, r1, lsl #10
 8001062:	ea46 664a 	orr.w	r6, r6, sl, lsl #25
 8001066:	ea46 6989 	orr.w	r9, r6, r9, lsl #26
 800106a:	ea49 6ece 	orr.w	lr, r9, lr, lsl #27
 800106e:	9b00      	ldr	r3, [sp, #0]
 8001070:	4940      	ldr	r1, [pc, #256]	; (8001174 <SetSSL_CTX+0x20c>)
 8001072:	ea4e 7c0c 	orr.w	ip, lr, ip, lsl #28
 8001076:	ea4c 7040 	orr.w	r0, ip, r0, lsl #29
 800107a:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001084:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
 8001088:	4019      	ands	r1, r3
    ssl->options.partialWrite  = ctx->partialWrite;
 800108a:	9b02      	ldr	r3, [sp, #8]
    ssl->options.sendVerify     = ctx->sendVerify;
 800108c:	4308      	orrs	r0, r1
    ssl->options.partialWrite  = ctx->partialWrite;
 800108e:	9903      	ldr	r1, [sp, #12]
    ssl->options.sendVerify     = ctx->sendVerify;
 8001090:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
    ssl->options.partialWrite  = ctx->partialWrite;
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    ssl->options.groupMessages = ctx->groupMessages;
 800109a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    ssl->options.partialWrite  = ctx->partialWrite;
 800109e:	ea43 12c2 	orr.w	r2, r3, r2, lsl #7
 80010a2:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80010a6:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 80010aa:	431a      	orrs	r2, r3
    ssl->buffers.certificate = ctx->certificate;
 80010ac:	692b      	ldr	r3, [r5, #16]
 80010ae:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ssl->buffers.certChain = ctx->certChain;
 80010b2:	696b      	ldr	r3, [r5, #20]
    ssl->options.partialWrite  = ctx->partialWrite;
 80010b4:	f884 2274 	strb.w	r2, [r4, #628]	; 0x274
    ssl->buffers.certChain = ctx->certChain;
 80010b8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    ssl->buffers.keyType  = ctx->privateKeyType;
 80010bc:	7f2a      	ldrb	r2, [r5, #28]
    ssl->buffers.key      = ctx->privateKey;
 80010be:	69ab      	ldr	r3, [r5, #24]
 80010c0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    ssl->buffers.keyType  = ctx->privateKeyType;
 80010c4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 80010c8:	f3c2 0205 	ubfx	r2, r2, #0, #6
 80010cc:	f362 0305 	bfi	r3, r2, #0, #6
    ssl->buffers.keyId    = ctx->privateKeyId;
 80010d0:	7f2a      	ldrb	r2, [r5, #28]
 80010d2:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80010d6:	f362 1386 	bfi	r3, r2, #6, #1
    ssl->buffers.keyLabel = ctx->privateKeyLabel;
 80010da:	7f2a      	ldrb	r2, [r5, #28]
 80010dc:	09d2      	lsrs	r2, r2, #7
 80010de:	f362 13c7 	bfi	r3, r2, #7, #1
 80010e2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    ssl->buffers.keySz    = ctx->privateKeySz;
 80010e6:	6a2b      	ldr	r3, [r5, #32]
 80010e8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
                                      ssl->buffers.keyType == ed448_sa_algo ||
 80010ec:	f010 0f30 	tst.w	r0, #48	; 0x30
    ssl->buffers.keyDevId = ctx->privateKeyDevId;
 80010f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80010f2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
                                      ssl->buffers.keyType == ed448_sa_algo ||
 80010f6:	d032      	beq.n	800115e <SetSSL_CTX+0x1f6>
                                      ssl->buffers.keyType == ed25519_sa_algo ||
 80010f8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    ssl->options.cacheMessages = ssl->options.side == WOLFSSL_SERVER_END ||
 80010fc:	f003 023d 	and.w	r2, r3, #61	; 0x3d
 8001100:	2a09      	cmp	r2, #9
 8001102:	d02c      	beq.n	800115e <SetSSL_CTX+0x1f6>
                                      ssl->buffers.keyType == ed448_sa_algo ||
 8001104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001108:	f1a3 0211 	sub.w	r2, r3, #17
 800110c:	4253      	negs	r3, r2
 800110e:	4153      	adcs	r3, r2
    ssl->options.cacheMessages = ssl->options.side == WOLFSSL_SERVER_END ||
 8001110:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
 8001114:	f363 0282 	bfi	r2, r3, #2, #1
 8001118:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
    if (writeDup == 0) {
 800111c:	f1b8 0f00 	cmp.w	r8, #0
 8001120:	d112      	bne.n	8001148 <SetSSL_CTX+0x1e0>
        if (ssl->suites != NULL) {
 8001122:	6860      	ldr	r0, [r4, #4]
 8001124:	b130      	cbz	r0, 8001134 <SetSSL_CTX+0x1cc>
            if (ctx->suites == NULL)
 8001126:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
                XMEMSET(ssl->suites, 0, sizeof(Suites));
 8001128:	f44f 72ac 	mov.w	r2, #344	; 0x158
            if (ctx->suites == NULL)
 800112c:	b9c9      	cbnz	r1, 8001162 <SetSSL_CTX+0x1fa>
                XMEMSET(ssl->suites, 0, sizeof(Suites));
 800112e:	4641      	mov	r1, r8
 8001130:	f01c fc60 	bl	801d9f4 <memset>
        if (ssl->options.side != WOLFSSL_NEITHER_END) {
 8001134:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8001138:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800113c:	2b30      	cmp	r3, #48	; 0x30
 800113e:	d003      	beq.n	8001148 <SetSSL_CTX+0x1e0>
            ret = InitSSL_Suites(ssl);
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff feb3 	bl	8000eac <InitSSL_Suites>
 8001146:	4607      	mov	r7, r0
    if (ctx->mask != 0 && wolfSSL_set_options(ssl, ctx->mask) == 0) {
 8001148:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800114a:	b969      	cbnz	r1, 8001168 <SetSSL_CTX+0x200>
        ssl->CBIORecv = ctx->CBIORecv;
 800114c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800114e:	62a3      	str	r3, [r4, #40]	; 0x28
        ssl->CBIOSend = ctx->CBIOSend;
 8001150:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001152:	62e3      	str	r3, [r4, #44]	; 0x2c
    ssl->verifyDepth = ctx->verifyDepth;
 8001154:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8001158:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
    return ret;
 800115c:	e70d      	b.n	8000f7a <SetSSL_CTX+0x12>
                                      ssl->buffers.keyType == ed448_sa_algo ||
 800115e:	2301      	movs	r3, #1
 8001160:	e7d6      	b.n	8001110 <SetSSL_CTX+0x1a8>
                XMEMCPY(ssl->suites, ctx->suites, sizeof(Suites));
 8001162:	f01c fc1f 	bl	801d9a4 <memcpy>
 8001166:	e7e5      	b.n	8001134 <SetSSL_CTX+0x1cc>
    if (ctx->mask != 0 && wolfSSL_set_options(ssl, ctx->mask) == 0) {
 8001168:	4620      	mov	r0, r4
 800116a:	f006 fef2 	bl	8007f52 <wolfSSL_set_options>
 800116e:	2800      	cmp	r0, #0
 8001170:	d1ec      	bne.n	800114c <SetSSL_CTX+0x1e4>
 8001172:	e700      	b.n	8000f76 <SetSSL_CTX+0xe>
 8001174:	01fff830 	.word	0x01fff830

08001178 <FreeHandshakeHashes>:
{
 8001178:	b510      	push	{r4, lr}
 800117a:	4604      	mov	r4, r0
    if (ssl->hsHashes) {
 800117c:	68c0      	ldr	r0, [r0, #12]
 800117e:	b300      	cbz	r0, 80011c2 <FreeHandshakeHashes+0x4a>
        wc_Sha256Free(&ssl->hsHashes->hashSha256);
 8001180:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 8001184:	f00f f806 	bl	8010194 <wc_Sha256Free>
        wc_Sha512Free(&ssl->hsHashes->hashSha512);
 8001188:	68e0      	ldr	r0, [r4, #12]
 800118a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800118e:	f011 fa77 	bl	8012680 <wc_Sha512Free>
        if (ssl->hsHashes->messages != NULL) {
 8001192:	68e3      	ldr	r3, [r4, #12]
 8001194:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 8001198:	b168      	cbz	r0, 80011b6 <FreeHandshakeHashes+0x3e>
            ForceZero(ssl->hsHashes->messages, ssl->hsHashes->length);
 800119a:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 800119e:	f7ff f835 	bl	800020c <ForceZero>
            XFREE(ssl->hsHashes->messages, ssl->heap, DYNAMIC_TYPE_HASHES);
 80011a2:	68e3      	ldr	r3, [r4, #12]
 80011a4:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 80011a8:	b108      	cbz	r0, 80011ae <FreeHandshakeHashes+0x36>
 80011aa:	f01c fbe3 	bl	801d974 <free>
            ssl->hsHashes->messages = NULL;
 80011ae:	68e3      	ldr	r3, [r4, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
        XFREE(ssl->hsHashes, ssl->heap, DYNAMIC_TYPE_HASHES);
 80011b6:	68e0      	ldr	r0, [r4, #12]
 80011b8:	b108      	cbz	r0, 80011be <FreeHandshakeHashes+0x46>
 80011ba:	f01c fbdb 	bl	801d974 <free>
        ssl->hsHashes = NULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	60e3      	str	r3, [r4, #12]
}
 80011c2:	bd10      	pop	{r4, pc}

080011c4 <InitHandshakeHashes>:
    if (ssl->hsHashes != NULL) {
 80011c4:	68c3      	ldr	r3, [r0, #12]
{
 80011c6:	b510      	push	{r4, lr}
 80011c8:	4604      	mov	r4, r0
    if (ssl->hsHashes != NULL) {
 80011ca:	b10b      	cbz	r3, 80011d0 <InitHandshakeHashes+0xc>
        FreeHandshakeHashes(ssl);
 80011cc:	f7ff ffd4 	bl	8001178 <FreeHandshakeHashes>
    ssl->hsHashes = (HS_Hashes*)XMALLOC(sizeof(HS_Hashes), ssl->heap,
 80011d0:	f44f 702c 	mov.w	r0, #688	; 0x2b0
 80011d4:	f01c fbc6 	bl	801d964 <malloc>
 80011d8:	60e0      	str	r0, [r4, #12]
    if (ssl->hsHashes == NULL) {
 80011da:	b1b8      	cbz	r0, 800120c <InitHandshakeHashes+0x48>
    XMEMSET(ssl->hsHashes, 0, sizeof(HS_Hashes));
 80011dc:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80011e0:	2100      	movs	r1, #0
 80011e2:	f01c fc07 	bl	801d9f4 <memset>
    ret = wc_InitSha256_ex(&ssl->hsHashes->hashSha256, ssl->heap, ssl->devId);
 80011e6:	68e0      	ldr	r0, [r4, #12]
 80011e8:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 80011ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011ee:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 80011f2:	f00e fea5 	bl	800ff40 <wc_InitSha256_ex>
    if (ret != 0)
 80011f6:	b958      	cbnz	r0, 8001210 <InitHandshakeHashes+0x4c>
    ret = wc_InitSha512_ex(&ssl->hsHashes->hashSha512, ssl->heap, ssl->devId);
 80011f8:	68e0      	ldr	r0, [r4, #12]
 80011fa:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 80011fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001200:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
}
 8001204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ret = wc_InitSha512_ex(&ssl->hsHashes->hashSha512, ssl->heap, ssl->devId);
 8001208:	f011 b9b0 	b.w	801256c <wc_InitSha512_ex>
        return MEMORY_E;
 800120c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
 8001210:	bd10      	pop	{r4, pc}

08001212 <ReinitSSL>:
{
 8001212:	b570      	push	{r4, r5, r6, lr}
 8001214:	4604      	mov	r4, r0
 8001216:	460d      	mov	r5, r1
    if (!writeDup && ssl->arrays == NULL) {
 8001218:	b96a      	cbnz	r2, 8001236 <ReinitSSL+0x24>
 800121a:	6886      	ldr	r6, [r0, #8]
 800121c:	b95e      	cbnz	r6, 8001236 <ReinitSSL+0x24>
        ssl->arrays = (Arrays*)XMALLOC(sizeof(Arrays), ssl->heap,
 800121e:	20a8      	movs	r0, #168	; 0xa8
 8001220:	f01c fba0 	bl	801d964 <malloc>
 8001224:	60a0      	str	r0, [r4, #8]
        if (ssl->arrays == NULL) {
 8001226:	b910      	cbnz	r0, 800122e <ReinitSSL+0x1c>
            return MEMORY_E;
 8001228:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
 800122c:	bd70      	pop	{r4, r5, r6, pc}
        XMEMSET(ssl->arrays, 0, sizeof(Arrays));
 800122e:	22a8      	movs	r2, #168	; 0xa8
 8001230:	4631      	mov	r1, r6
 8001232:	f01c fbdf 	bl	801d9f4 <memset>
    if (ssl->rng == NULL) {
 8001236:	69a3      	ldr	r3, [r4, #24]
 8001238:	b18b      	cbz	r3, 800125e <ReinitSSL+0x4c>
    ssl->options.shutdownDone = 0;
 800123a:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
    if (ssl->session != NULL)
 800123e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    ssl->options.shutdownDone = 0;
 8001242:	f36f 13c7 	bfc	r3, #7, #1
 8001246:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
    if (ssl->session != NULL)
 800124a:	2800      	cmp	r0, #0
 800124c:	d0ee      	beq.n	800122c <ReinitSSL+0x1a>
        ssl->session->side = (byte)ssl->options.side;
 800124e:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8001252:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001256:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return ret;
 800125a:	2000      	movs	r0, #0
 800125c:	e7e6      	b.n	800122c <ReinitSSL+0x1a>
        ssl->rng = ctx->rng; /* CTX may have one, if so use it */
 800125e:	686d      	ldr	r5, [r5, #4]
 8001260:	61a5      	str	r5, [r4, #24]
    if (ssl->rng == NULL) {
 8001262:	2d00      	cmp	r5, #0
 8001264:	d1e9      	bne.n	800123a <ReinitSSL+0x28>
        ssl->rng = (WC_RNG*)XMALLOC(sizeof(WC_RNG), ssl->heap,DYNAMIC_TYPE_RNG);
 8001266:	2008      	movs	r0, #8
 8001268:	f01c fb7c 	bl	801d964 <malloc>
 800126c:	61a0      	str	r0, [r4, #24]
        if (ssl->rng == NULL) {
 800126e:	2800      	cmp	r0, #0
 8001270:	d0da      	beq.n	8001228 <ReinitSSL+0x16>
        XMEMSET(ssl->rng, 0, sizeof(WC_RNG));
 8001272:	2208      	movs	r2, #8
 8001274:	4629      	mov	r1, r5
 8001276:	f01c fbbd 	bl	801d9f4 <memset>
        ssl->options.weOwnRng = 1;
 800127a:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
        if ( (ret = wc_InitRng_ex(ssl->rng, ssl->heap, ssl->devId)) != 0) {
 800127e:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 8001282:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001284:	69a0      	ldr	r0, [r4, #24]
        ssl->options.weOwnRng = 1;
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
        if ( (ret = wc_InitRng_ex(ssl->rng, ssl->heap, ssl->devId)) != 0) {
 800128e:	f00d fc48 	bl	800eb22 <wc_InitRng_ex>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0d1      	beq.n	800123a <ReinitSSL+0x28>
 8001296:	e7c9      	b.n	800122c <ReinitSSL+0x1a>

08001298 <InitSSL>:
{
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	460e      	mov	r6, r1
 800129c:	4604      	mov	r4, r0
 800129e:	4617      	mov	r7, r2
    XMEMSET(ssl, 0, sizeof(WOLFSSL));
 80012a0:	2100      	movs	r1, #0
 80012a2:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80012a6:	f01c fba5 	bl	801d9f4 <memset>
    ssl->heap = ctx->heap; /* carry over user heap without static memory */
 80012aa:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80012ac:	6263      	str	r3, [r4, #36]	; 0x24
    ssl->buffers.inputBuffer.buffer = ssl->buffers.inputBuffer.staticBuffer;
 80012ae:	f104 0378 	add.w	r3, r4, #120	; 0x78
 80012b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ssl->buffers.inputBuffer.bufferSize  = STATIC_BUFFER_LEN;
 80012b6:	2305      	movs	r3, #5
 80012b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->buffers.outputBuffer.bufferSize  = STATIC_BUFFER_LEN;
 80012bc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->devId = ctx->devId; /* device for async HW (from wolfAsync_DevOpen) */
 80012c0:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80012c2:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    ssl->options.serverState = NULL_STATE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
    ssl->options.handShakeState  = NULL_STATE;
 80012cc:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    ssl->options.connectState = CONNECT_BEGIN;
 80012d0:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
    ssl->options.acceptState  = ACCEPT_BEGIN;
 80012d4:	f8a4 3282 	strh.w	r3, [r4, #642]	; 0x282
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 80012d8:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
    ssl->encrypt.state = CIPHER_STATE_BEGIN;
 80012dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    ssl->decrypt.state = CIPHER_STATE_BEGIN;
 80012e0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    ssl->IOCB_ReadCtx  = &ssl->rfd;  /* prevent invalid pointer access if not */
 80012e4:	f504 738c 	add.w	r3, r4, #280	; 0x118
 80012e8:	6123      	str	r3, [r4, #16]
    ssl->IOCB_WriteCtx = &ssl->wfd;  /* correctly set */
 80012ea:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80012ee:	6163      	str	r3, [r4, #20]
    ssl->buffers.outputBuffer.buffer = ssl->buffers.outputBuffer.staticBuffer;
 80012f0:	f104 0294 	add.w	r2, r4, #148	; 0x94
        ssl->hmac = TLS_hmac;
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <InitSSL+0x120>)
    ssl->buffers.outputBuffer.buffer = ssl->buffers.outputBuffer.staticBuffer;
 80012f6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    ssl->rfd = -1;   /* set to invalid descriptor */
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ssl->wfd = -1;
 80012fe:	e9c4 2246 	strd	r2, r2, [r4, #280]	; 0x118
    ssl->cipher.ssl = ssl;
 8001302:	e9c4 4312 	strd	r4, r3, [r4, #72]	; 0x48
    ssl->options.useClientOrder = ctx->useClientOrder;
 8001306:	f896 1039 	ldrb.w	r1, [r6, #57]	; 0x39
    ssl->options.userCurves = ctx->userCurves;
 800130a:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 800130e:	f003 0001 	and.w	r0, r3, #1
 8001312:	f3c1 0340 	ubfx	r3, r1, #1, #1
 8001316:	03db      	lsls	r3, r3, #15
 8001318:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 800131c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8001320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001324:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8001328:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800132c:	f421 31d0 	bic.w	r1, r1, #106496	; 0x1a000
 8001330:	430b      	orrs	r3, r1
    ssl->alert_history.last_rx.level = -1;
 8001332:	e9c4 223f 	strd	r2, r2, [r4, #252]	; 0xfc
    ssl->alert_history.last_tx.level = -1;
 8001336:	e9c4 2241 	strd	r2, r2, [r4, #260]	; 0x104
    ssl->options.userCurves = ctx->userCurves;
 800133a:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
    InitCiphers(ssl);
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff fbcc 	bl	8000adc <InitCiphers>
    InitCipherSpecs(&ssl->specs);
 8001344:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001348:	f7ff fc03 	bl	8000b52 <InitCipherSpecs>
    if ((ret = ReinitSSL(ssl, ctx, writeDup)) != 0) {
 800134c:	463a      	mov	r2, r7
 800134e:	4631      	mov	r1, r6
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff ff5e 	bl	8001212 <ReinitSSL>
 8001356:	4605      	mov	r5, r0
 8001358:	bb60      	cbnz	r0, 80013b4 <InitSSL+0x11c>
    if (!writeDup) {
 800135a:	b94f      	cbnz	r7, 8001370 <InitSSL+0xd8>
        if (ctx->suites == NULL) {
 800135c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800135e:	b93b      	cbnz	r3, 8001370 <InitSSL+0xd8>
            ret = AllocateCtxSuites(ctx);
 8001360:	4630      	mov	r0, r6
 8001362:	f7ff fc27 	bl	8000bb4 <AllocateCtxSuites>
            if (ret != 0)
 8001366:	4605      	mov	r5, r0
 8001368:	bb20      	cbnz	r0, 80013b4 <InitSSL+0x11c>
            InitSSL_CTX_Suites(ctx);
 800136a:	4630      	mov	r0, r6
 800136c:	f7ff fd7a 	bl	8000e64 <InitSSL_CTX_Suites>
    if ((ret = SetSSL_CTX(ssl, ctx, writeDup)) != WOLFSSL_SUCCESS
 8001370:	463a      	mov	r2, r7
 8001372:	4631      	mov	r1, r6
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fdf7 	bl	8000f68 <SetSSL_CTX>
 800137a:	2801      	cmp	r0, #1
 800137c:	4605      	mov	r5, r0
 800137e:	d119      	bne.n	80013b4 <InitSSL+0x11c>
    ssl->options.dtls = ssl->version.major == DTLS_MAJOR;
 8001380:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 8001384:	f1a3 02fe 	sub.w	r2, r3, #254	; 0xfe
 8001388:	4253      	negs	r3, r2
 800138a:	4153      	adcs	r3, r2
 800138c:	f894 2272 	ldrb.w	r2, [r4, #626]	; 0x272
 8001390:	f363 0282 	bfi	r2, r3, #2, #1
 8001394:	f884 2272 	strb.w	r2, [r4, #626]	; 0x272
    ret = InitHandshakeHashes(ssl);
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff ff13 	bl	80011c4 <InitHandshakeHashes>
    if (ret != 0)
 800139e:	4605      	mov	r5, r0
 80013a0:	b940      	cbnz	r0, 80013b4 <InitSSL+0x11c>
    ssl->session = wolfSSL_NewSession(ssl->heap);
 80013a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013a4:	f006 fd7d 	bl	8007ea2 <wolfSSL_NewSession>
        return MEMORY_E;
 80013a8:	2800      	cmp	r0, #0
    ssl->session = wolfSSL_NewSession(ssl->heap);
 80013aa:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
        return MEMORY_E;
 80013ae:	bf08      	it	eq
 80013b0:	f06f 057c 	mvneq.w	r5, #124	; 0x7c
}
 80013b4:	4628      	mov	r0, r5
 80013b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b8:	08008585 	.word	0x08008585

080013bc <FreeArrays>:
    if (ssl->arrays) {
 80013bc:	6883      	ldr	r3, [r0, #8]
{
 80013be:	b510      	push	{r4, lr}
 80013c0:	4604      	mov	r4, r0
    if (ssl->arrays) {
 80013c2:	b36b      	cbz	r3, 8001420 <FreeArrays+0x64>
        if (keep && !IsAtLeastTLSv1_3(ssl->version)) {
 80013c4:	b199      	cbz	r1, 80013ee <FreeArrays+0x32>
 80013c6:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80013ca:	f7ff fae0 	bl	800098e <IsAtLeastTLSv1_3>
 80013ce:	b970      	cbnz	r0, 80013ee <FreeArrays+0x32>
            XMEMCPY(ssl->session->sessionID, ssl->arrays->sessionID, ID_LEN);
 80013d0:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80013d4:	2220      	movs	r2, #32
 80013d6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80013da:	303c      	adds	r0, #60	; 0x3c
 80013dc:	f01c fae2 	bl	801d9a4 <memcpy>
            ssl->session->sessionIDSz = ssl->arrays->sessionIDSz;
 80013e0:	68a2      	ldr	r2, [r4, #8]
 80013e2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80013e6:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 80013ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        if (ssl->arrays->preMasterSecret) {
 80013ee:	68a3      	ldr	r3, [r4, #8]
 80013f0:	6858      	ldr	r0, [r3, #4]
 80013f2:	b150      	cbz	r0, 800140a <FreeArrays+0x4e>
            ForceZero(ssl->arrays->preMasterSecret, ENCRYPT_LEN);
 80013f4:	218b      	movs	r1, #139	; 0x8b
 80013f6:	f7fe ff09 	bl	800020c <ForceZero>
            XFREE(ssl->arrays->preMasterSecret, ssl->heap, DYNAMIC_TYPE_SECRET);
 80013fa:	68a3      	ldr	r3, [r4, #8]
 80013fc:	6858      	ldr	r0, [r3, #4]
 80013fe:	b108      	cbz	r0, 8001404 <FreeArrays+0x48>
 8001400:	f01c fab8 	bl	801d974 <free>
            ssl->arrays->preMasterSecret = NULL;
 8001404:	68a3      	ldr	r3, [r4, #8]
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
        XFREE(ssl->arrays->pendingMsg, ssl->heap, DYNAMIC_TYPE_ARRAYS);
 800140a:	68a3      	ldr	r3, [r4, #8]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	b108      	cbz	r0, 8001414 <FreeArrays+0x58>
 8001410:	f01c fab0 	bl	801d974 <free>
        ssl->arrays->pendingMsg = NULL;
 8001414:	68a0      	ldr	r0, [r4, #8]
 8001416:	2300      	movs	r3, #0
 8001418:	6003      	str	r3, [r0, #0]
        ForceZero(ssl->arrays, sizeof(Arrays)); /* clear arrays struct */
 800141a:	21a8      	movs	r1, #168	; 0xa8
 800141c:	f7fe fef6 	bl	800020c <ForceZero>
    XFREE(ssl->arrays, ssl->heap, DYNAMIC_TYPE_ARRAYS);
 8001420:	68a0      	ldr	r0, [r4, #8]
 8001422:	b108      	cbz	r0, 8001428 <FreeArrays+0x6c>
 8001424:	f01c faa6 	bl	801d974 <free>
    ssl->arrays = NULL;
 8001428:	2300      	movs	r3, #0
 800142a:	60a3      	str	r3, [r4, #8]
}
 800142c:	bd10      	pop	{r4, pc}

0800142e <FreeKey>:
{
 800142e:	b510      	push	{r4, lr}
 8001430:	4614      	mov	r4, r2
    if (ssl && pKey && *pKey) {
 8001432:	b180      	cbz	r0, 8001456 <FreeKey+0x28>
 8001434:	b17a      	cbz	r2, 8001456 <FreeKey+0x28>
 8001436:	6810      	ldr	r0, [r2, #0]
 8001438:	b168      	cbz	r0, 8001456 <FreeKey+0x28>
        switch (type) {
 800143a:	2945      	cmp	r1, #69	; 0x45
 800143c:	d00f      	beq.n	800145e <FreeKey+0x30>
 800143e:	2946      	cmp	r1, #70	; 0x46
 8001440:	d00a      	beq.n	8001458 <FreeKey+0x2a>
 8001442:	2925      	cmp	r1, #37	; 0x25
 8001444:	d101      	bne.n	800144a <FreeKey+0x1c>
                wc_ecc_free((ecc_key*)*pKey);
 8001446:	f00b fc48 	bl	800ccda <wc_ecc_free>
        XFREE(*pKey, ssl->heap, type);
 800144a:	6820      	ldr	r0, [r4, #0]
 800144c:	b108      	cbz	r0, 8001452 <FreeKey+0x24>
 800144e:	f01c fa91 	bl	801d974 <free>
        *pKey = NULL;
 8001452:	2300      	movs	r3, #0
 8001454:	6023      	str	r3, [r4, #0]
}
 8001456:	bd10      	pop	{r4, pc}
                wc_ed25519_free((ed25519_key*)*pKey);
 8001458:	f014 fdf5 	bl	8016046 <wc_ed25519_free>
                break;
 800145c:	e7f5      	b.n	800144a <FreeKey+0x1c>
                wc_curve25519_free((curve25519_key*)*pKey);
 800145e:	f014 fb6d 	bl	8015b3c <wc_curve25519_free>
                break;
 8001462:	e7f2      	b.n	800144a <FreeKey+0x1c>

08001464 <AllocKey>:
{
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001466:	460e      	mov	r6, r1
 8001468:	4617      	mov	r7, r2
    if (ssl == NULL || pKey == NULL) {
 800146a:	4605      	mov	r5, r0
 800146c:	b140      	cbz	r0, 8001480 <AllocKey+0x1c>
 800146e:	b13a      	cbz	r2, 8001480 <AllocKey+0x1c>
    if (*pKey != NULL) {
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	bb9b      	cbnz	r3, 80014dc <AllocKey+0x78>
    switch (type) {
 8001474:	2945      	cmp	r1, #69	; 0x45
 8001476:	d006      	beq.n	8001486 <AllocKey+0x22>
 8001478:	2946      	cmp	r1, #70	; 0x46
 800147a:	d01c      	beq.n	80014b6 <AllocKey+0x52>
 800147c:	2925      	cmp	r1, #37	; 0x25
 800147e:	d01c      	beq.n	80014ba <AllocKey+0x56>
        return BAD_FUNC_ARG;
 8001480:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8001484:	e022      	b.n	80014cc <AllocKey+0x68>
            sz = sizeof(curve25519_key);
 8001486:	204c      	movs	r0, #76	; 0x4c
    *pKey = (void *)XMALLOC(sz, ssl->heap, type);
 8001488:	f01c fa6c 	bl	801d964 <malloc>
 800148c:	6038      	str	r0, [r7, #0]
    if (*pKey == NULL) {
 800148e:	b340      	cbz	r0, 80014e2 <AllocKey+0x7e>
    switch (type) {
 8001490:	2e45      	cmp	r6, #69	; 0x45
 8001492:	d01d      	beq.n	80014d0 <AllocKey+0x6c>
 8001494:	2e46      	cmp	r6, #70	; 0x46
 8001496:	d013      	beq.n	80014c0 <AllocKey+0x5c>
 8001498:	2e25      	cmp	r6, #37	; 0x25
 800149a:	d1f1      	bne.n	8001480 <AllocKey+0x1c>
            ret = wc_ecc_init_ex(eccKey, ssl->heap, ssl->devId);
 800149c:	f8d5 22bc 	ldr.w	r2, [r5, #700]	; 0x2bc
 80014a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80014a2:	f00b fbf9 	bl	800cc98 <wc_ecc_init_ex>
    if (ret != 0) {
 80014a6:	4604      	mov	r4, r0
 80014a8:	b180      	cbz	r0, 80014cc <AllocKey+0x68>
        FreeKey(ssl, type, pKey);
 80014aa:	463a      	mov	r2, r7
 80014ac:	4631      	mov	r1, r6
 80014ae:	4628      	mov	r0, r5
 80014b0:	f7ff ffbd 	bl	800142e <FreeKey>
 80014b4:	e00a      	b.n	80014cc <AllocKey+0x68>
            sz = sizeof(ed25519_key);
 80014b6:	2068      	movs	r0, #104	; 0x68
 80014b8:	e7e6      	b.n	8001488 <AllocKey+0x24>
    switch (type) {
 80014ba:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 80014be:	e7e3      	b.n	8001488 <AllocKey+0x24>
            wc_ed25519_init_ex((ed25519_key*)*pKey, ssl->heap, ssl->devId);
 80014c0:	f8d5 22bc 	ldr.w	r2, [r5, #700]	; 0x2bc
 80014c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80014c6:	f014 fdae 	bl	8016026 <wc_ed25519_init_ex>
            ret = 0;
 80014ca:	2400      	movs	r4, #0
}
 80014cc:	4620      	mov	r0, r4
 80014ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            wc_curve25519_init_ex((curve25519_key*)*pKey, ssl->heap, ssl->devId);
 80014d0:	f8d5 22bc 	ldr.w	r2, [r5, #700]	; 0x2bc
 80014d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80014d6:	f014 fb1f 	bl	8015b18 <wc_curve25519_init_ex>
 80014da:	e7f6      	b.n	80014ca <AllocKey+0x66>
        return BAD_STATE_E;
 80014dc:	f06f 04bf 	mvn.w	r4, #191	; 0xbf
 80014e0:	e7f4      	b.n	80014cc <AllocKey+0x68>
        return MEMORY_E;
 80014e2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80014e6:	e7f1      	b.n	80014cc <AllocKey+0x68>

080014e8 <FreeAsyncCtx>:
{
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	460d      	mov	r5, r1
    if (ssl->async != NULL) {
 80014ec:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80014ee:	4604      	mov	r4, r0
    if (ssl->async != NULL) {
 80014f0:	b169      	cbz	r1, 800150e <FreeAsyncCtx+0x26>
        if (ssl->async->freeArgs != NULL) {
 80014f2:	680b      	ldr	r3, [r1, #0]
 80014f4:	b123      	cbz	r3, 8001500 <FreeAsyncCtx+0x18>
            ssl->async->freeArgs(ssl, ssl->async->args);
 80014f6:	3104      	adds	r1, #4
 80014f8:	4798      	blx	r3
            ssl->async->freeArgs = NULL;
 80014fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
        if (freeAsync) {
 8001500:	b12d      	cbz	r5, 800150e <FreeAsyncCtx+0x26>
            XFREE(ssl->async, ssl->heap, DYNAMIC_TYPE_ASYNC);
 8001502:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001504:	b108      	cbz	r0, 800150a <FreeAsyncCtx+0x22>
 8001506:	f01c fa35 	bl	801d974 <free>
            ssl->async = NULL;
 800150a:	2300      	movs	r3, #0
 800150c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800150e:	bd38      	pop	{r3, r4, r5, pc}

08001510 <FreeKeyExchange>:
{
 8001510:	b510      	push	{r4, lr}
 8001512:	4604      	mov	r4, r0
    if (ssl->buffers.sig.buffer) {
 8001514:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8001518:	b120      	cbz	r0, 8001524 <FreeKeyExchange+0x14>
        XFREE(ssl->buffers.sig.buffer, ssl->heap, DYNAMIC_TYPE_SIGNATURE);
 800151a:	f01c fa2b 	bl	801d974 <free>
        ssl->buffers.sig.buffer = NULL;
 800151e:	2300      	movs	r3, #0
        ssl->buffers.sig.length = 0;
 8001520:	e9c4 3330 	strd	r3, r3, [r4, #192]	; 0xc0
    if (ssl->buffers.digest.buffer) {
 8001524:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8001528:	b170      	cbz	r0, 8001548 <FreeKeyExchange+0x38>
        if (!ssl->options.dontFreeDigest) {
 800152a:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 800152e:	075b      	lsls	r3, r3, #29
 8001530:	d401      	bmi.n	8001536 <FreeKeyExchange+0x26>
            XFREE(ssl->buffers.digest.buffer, ssl->heap, DYNAMIC_TYPE_DIGEST);
 8001532:	f01c fa1f 	bl	801d974 <free>
        ssl->options.dontFreeDigest = 0;
 8001536:	f894 2275 	ldrb.w	r2, [r4, #629]	; 0x275
        ssl->buffers.digest.buffer = NULL;
 800153a:	2300      	movs	r3, #0
        ssl->buffers.digest.length = 0;
 800153c:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
        ssl->options.dontFreeDigest = 0;
 8001540:	f363 0282 	bfi	r2, r3, #2, #1
 8001544:	f884 2275 	strb.w	r2, [r4, #629]	; 0x275
    FreeKey(ssl, ssl->hsType, &ssl->hsKey);
 8001548:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800154a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800154e:	4620      	mov	r0, r4
}
 8001550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    FreeKey(ssl, ssl->hsType, &ssl->hsKey);
 8001554:	f7ff bf6b 	b.w	800142e <FreeKey>

08001558 <FreeSuites>:
{
 8001558:	b510      	push	{r4, lr}
 800155a:	4604      	mov	r4, r0
    XFREE(ssl->suites, ssl->heap, DYNAMIC_TYPE_SUITES);
 800155c:	6840      	ldr	r0, [r0, #4]
 800155e:	b108      	cbz	r0, 8001564 <FreeSuites+0xc>
 8001560:	f01c fa08 	bl	801d974 <free>
    ssl->suites = NULL;
 8001564:	2300      	movs	r3, #0
 8001566:	6063      	str	r3, [r4, #4]
}
 8001568:	bd10      	pop	{r4, pc}

0800156a <WriteSEQ>:
    if (!ssl->options.dtls) {
 800156a:	f890 3272 	ldrb.w	r3, [r0, #626]	; 0x272
 800156e:	075b      	lsls	r3, r3, #29
{
 8001570:	b510      	push	{r4, lr}
    if (!ssl->options.dtls) {
 8001572:	d424      	bmi.n	80015be <WriteSEQ+0x54>
    if (verify) {
 8001574:	b1c9      	cbz	r1, 80015aa <WriteSEQ+0x40>
        seq[1] = ssl->keys.peer_sequence_number_lo++;
 8001576:	e9d0 1394 	ldrd	r1, r3, [r0, #592]	; 0x250
 800157a:	1c5c      	adds	r4, r3, #1
 800157c:	f8c0 4254 	str.w	r4, [r0, #596]	; 0x254
        if (seq[1] > ssl->keys.peer_sequence_number_lo) {
 8001580:	d304      	bcc.n	800158c <WriteSEQ+0x22>
            ssl->keys.peer_sequence_number_hi++;
 8001582:	1c4b      	adds	r3, r1, #1
 8001584:	f8c0 3250 	str.w	r3, [r0, #592]	; 0x250
            ssl->keys.sequence_number_hi++;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c[0] = (byte)((wc_u32 >> 24) & 0xff);
 800158c:	0e08      	lsrs	r0, r1, #24
 800158e:	7010      	strb	r0, [r2, #0]
    c[1] = (byte)((wc_u32 >> 16) & 0xff);
 8001590:	0c08      	lsrs	r0, r1, #16
 8001592:	7050      	strb	r0, [r2, #1]
    c[3] =  (byte)(wc_u32        & 0xff);
 8001594:	70d1      	strb	r1, [r2, #3]
    c[2] = (byte)((wc_u32 >>  8) & 0xff);
 8001596:	0a08      	lsrs	r0, r1, #8
    c[0] = (byte)((wc_u32 >> 24) & 0xff);
 8001598:	0e19      	lsrs	r1, r3, #24
 800159a:	7111      	strb	r1, [r2, #4]
    c[1] = (byte)((wc_u32 >> 16) & 0xff);
 800159c:	0c19      	lsrs	r1, r3, #16
 800159e:	7151      	strb	r1, [r2, #5]
    c[2] = (byte)((wc_u32 >>  8) & 0xff);
 80015a0:	0a19      	lsrs	r1, r3, #8
 80015a2:	7090      	strb	r0, [r2, #2]
 80015a4:	7191      	strb	r1, [r2, #6]
    c[3] =  (byte)(wc_u32        & 0xff);
 80015a6:	71d3      	strb	r3, [r2, #7]
}
 80015a8:	bd10      	pop	{r4, pc}
        seq[1] = ssl->keys.sequence_number_lo++;
 80015aa:	e9d0 1396 	ldrd	r1, r3, [r0, #600]	; 0x258
 80015ae:	1c5c      	adds	r4, r3, #1
 80015b0:	f8c0 425c 	str.w	r4, [r0, #604]	; 0x25c
        if (seq[1] > ssl->keys.sequence_number_lo) {
 80015b4:	d3ea      	bcc.n	800158c <WriteSEQ+0x22>
            ssl->keys.sequence_number_hi++;
 80015b6:	1c4b      	adds	r3, r1, #1
 80015b8:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
 80015bc:	e7e4      	b.n	8001588 <WriteSEQ+0x1e>
    word32 seq[2] = {0, 0};
 80015be:	2300      	movs	r3, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	e7e3      	b.n	800158c <WriteSEQ+0x22>

080015c4 <HashRaw>:
{
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (ssl->hsHashes == NULL) {
 80015c8:	68c4      	ldr	r4, [r0, #12]
{
 80015ca:	4605      	mov	r5, r0
 80015cc:	4688      	mov	r8, r1
 80015ce:	4616      	mov	r6, r2
    if (ssl->hsHashes == NULL) {
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d049      	beq.n	8001668 <HashRaw+0xa4>
    if (IsAtLeastTLSv1_2(ssl)) {
 80015d4:	f7ff f9ce 	bl	8000974 <IsAtLeastTLSv1_2>
 80015d8:	b918      	cbnz	r0, 80015e2 <HashRaw+0x1e>
    int ret = 0;
 80015da:	2400      	movs	r4, #0
}
 80015dc:	4620      	mov	r0, r4
 80015de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = wc_Sha256Update(&ssl->hsHashes->hashSha256, data, sz);
 80015e2:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 80015e6:	f00e fcdf 	bl	800ffa8 <wc_Sha256Update>
        if (ret != 0)
 80015ea:	4604      	mov	r4, r0
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d1f5      	bne.n	80015dc <HashRaw+0x18>
        ret = wc_Sha512Update(&ssl->hsHashes->hashSha512, data, sz);
 80015f0:	68e8      	ldr	r0, [r5, #12]
 80015f2:	4632      	mov	r2, r6
 80015f4:	4641      	mov	r1, r8
 80015f6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 80015fa:	f010 ffcf 	bl	801259c <wc_Sha512Update>
        if (ret != 0)
 80015fe:	4604      	mov	r4, r0
 8001600:	2800      	cmp	r0, #0
 8001602:	d1eb      	bne.n	80015dc <HashRaw+0x18>
    if (ssl->options.cacheMessages) {
 8001604:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
 8001608:	075b      	lsls	r3, r3, #29
 800160a:	d5e6      	bpl.n	80015da <HashRaw+0x16>
        msgs = (byte*)XMALLOC(ssl->hsHashes->length + sz, ssl->heap,
 800160c:	68eb      	ldr	r3, [r5, #12]
 800160e:	f8d3 02a4 	ldr.w	r0, [r3, #676]	; 0x2a4
 8001612:	4430      	add	r0, r6
 8001614:	f01c f9a6 	bl	801d964 <malloc>
        if (msgs == NULL)
 8001618:	4607      	mov	r7, r0
 800161a:	b340      	cbz	r0, 800166e <HashRaw+0xaa>
        if ((ret == 0) && (ssl->hsHashes->messages != NULL)) {
 800161c:	68eb      	ldr	r3, [r5, #12]
 800161e:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
 8001622:	b171      	cbz	r1, 8001642 <HashRaw+0x7e>
            XMEMCPY(msgs, ssl->hsHashes->messages, ssl->hsHashes->length);
 8001624:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
 8001628:	f01c f9bc 	bl	801d9a4 <memcpy>
            ForceZero(ssl->hsHashes->messages, ssl->hsHashes->length);
 800162c:	68eb      	ldr	r3, [r5, #12]
 800162e:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	; 0x2a0
 8001632:	f7fe fdeb 	bl	800020c <ForceZero>
            XFREE(ssl->hsHashes->messages, ssl->heap, DYNAMIC_TYPE_HASHES);
 8001636:	68eb      	ldr	r3, [r5, #12]
 8001638:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 800163c:	b108      	cbz	r0, 8001642 <HashRaw+0x7e>
 800163e:	f01c f999 	bl	801d974 <free>
            ssl->hsHashes->messages = msgs;
 8001642:	68eb      	ldr	r3, [r5, #12]
            XMEMCPY(msgs + ssl->hsHashes->length, data, sz);
 8001644:	f8d3 02a4 	ldr.w	r0, [r3, #676]	; 0x2a4
            ssl->hsHashes->messages = msgs;
 8001648:	f8c3 72a0 	str.w	r7, [r3, #672]	; 0x2a0
            XMEMCPY(msgs + ssl->hsHashes->length, data, sz);
 800164c:	4632      	mov	r2, r6
 800164e:	4641      	mov	r1, r8
 8001650:	4438      	add	r0, r7
 8001652:	f01c f9a7 	bl	801d9a4 <memcpy>
            ssl->hsHashes->prevLen = ssl->hsHashes->length;
 8001656:	68eb      	ldr	r3, [r5, #12]
 8001658:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
 800165c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
            ssl->hsHashes->length += sz;
 8001660:	4416      	add	r6, r2
 8001662:	f8c3 62a4 	str.w	r6, [r3, #676]	; 0x2a4
 8001666:	e7b9      	b.n	80015dc <HashRaw+0x18>
        return BAD_FUNC_ARG;
 8001668:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800166c:	e7b6      	b.n	80015dc <HashRaw+0x18>
            ret = MEMORY_E;
 800166e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8001672:	e7b3      	b.n	80015dc <HashRaw+0x18>

08001674 <HashOutput>:
{
 8001674:	b410      	push	{r4}
    if (ssl->hsHashes == NULL)
 8001676:	68c4      	ldr	r4, [r0, #12]
 8001678:	b12c      	cbz	r4, 8001686 <HashOutput+0x12>
    adj = output + RECORD_HEADER_SZ + ivSz;
 800167a:	3305      	adds	r3, #5
}
 800167c:	bc10      	pop	{r4}
    return HashRaw(ssl, adj, sz);
 800167e:	3a05      	subs	r2, #5
 8001680:	4419      	add	r1, r3
 8001682:	f7ff bf9f 	b.w	80015c4 <HashRaw>
}
 8001686:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800168a:	bc10      	pop	{r4}
 800168c:	4770      	bx	lr

0800168e <HashInput>:
    if (ssl->hsHashes == NULL) {
 800168e:	68c3      	ldr	r3, [r0, #12]
 8001690:	b11b      	cbz	r3, 800169a <HashInput+0xc>
    return HashRaw(ssl, adj, sz);
 8001692:	3204      	adds	r2, #4
 8001694:	3904      	subs	r1, #4
 8001696:	f7ff bf95 	b.w	80015c4 <HashRaw>
}
 800169a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800169e:	4770      	bx	lr

080016a0 <ShrinkOutputBuffer>:
{
 80016a0:	b510      	push	{r4, lr}
 80016a2:	4604      	mov	r4, r0
    XFREE(ssl->buffers.outputBuffer.buffer - ssl->buffers.outputBuffer.offset,
 80016a4:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 80016a8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 80016ac:	1ac0      	subs	r0, r0, r3
 80016ae:	d001      	beq.n	80016b4 <ShrinkOutputBuffer+0x14>
 80016b0:	f01c f960 	bl	801d974 <free>
    ssl->buffers.outputBuffer.buffer = ssl->buffers.outputBuffer.staticBuffer;
 80016b4:	f104 0394 	add.w	r3, r4, #148	; 0x94
 80016b8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->buffers.outputBuffer.bufferSize  = STATIC_BUFFER_LEN;
 80016bc:	2305      	movs	r3, #5
 80016be:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->buffers.outputBuffer.dynamicFlag = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
 80016c8:	bd10      	pop	{r4, pc}

080016ca <ShrinkInputBuffer>:
{
 80016ca:	b538      	push	{r3, r4, r5, lr}
    int usedLength = ssl->buffers.inputBuffer.length -
 80016cc:	e9d0 5321 	ldrd	r5, r3, [r0, #132]	; 0x84
{
 80016d0:	4604      	mov	r4, r0
    int usedLength = ssl->buffers.inputBuffer.length -
 80016d2:	1aed      	subs	r5, r5, r3
    if (!forcedFree && (usedLength > STATIC_BUFFER_LEN ||
 80016d4:	b969      	cbnz	r1, 80016f2 <ShrinkInputBuffer+0x28>
 80016d6:	2d05      	cmp	r5, #5
 80016d8:	dc23      	bgt.n	8001722 <ShrinkInputBuffer+0x58>
 80016da:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 80016de:	bb02      	cbnz	r2, 8001722 <ShrinkInputBuffer+0x58>
    if (!forcedFree && usedLength > 0) {
 80016e0:	2d00      	cmp	r5, #0
 80016e2:	dd06      	ble.n	80016f2 <ShrinkInputBuffer+0x28>
        XMEMCPY(ssl->buffers.inputBuffer.staticBuffer,
 80016e4:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80016e8:	462a      	mov	r2, r5
 80016ea:	4419      	add	r1, r3
 80016ec:	3078      	adds	r0, #120	; 0x78
 80016ee:	f01c f959 	bl	801d9a4 <memcpy>
    ForceZero(ssl->buffers.inputBuffer.buffer,
 80016f2:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	; 0x80
 80016f6:	f7fe fd89 	bl	800020c <ForceZero>
    XFREE(ssl->buffers.inputBuffer.buffer - ssl->buffers.inputBuffer.offset,
 80016fa:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80016fe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001702:	1ac0      	subs	r0, r0, r3
 8001704:	d001      	beq.n	800170a <ShrinkInputBuffer+0x40>
 8001706:	f01c f935 	bl	801d974 <free>
    ssl->buffers.inputBuffer.buffer = ssl->buffers.inputBuffer.staticBuffer;
 800170a:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800170e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ssl->buffers.inputBuffer.bufferSize  = STATIC_BUFFER_LEN;
 8001712:	2205      	movs	r2, #5
 8001714:	2300      	movs	r3, #0
 8001716:	e9c4 3222 	strd	r3, r2, [r4, #136]	; 0x88
    ssl->buffers.inputBuffer.dynamicFlag = 0;
 800171a:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
    ssl->buffers.inputBuffer.length = usedLength;
 800171e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8001722:	bd38      	pop	{r3, r4, r5, pc}

08001724 <SSL_ResourceFree>:
{
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4604      	mov	r4, r0
    FreeCiphers(ssl);
 8001728:	f7ff f9e2 	bl	8000af0 <FreeCiphers>
    FreeArrays(ssl, 0);
 800172c:	2100      	movs	r1, #0
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fe44 	bl	80013bc <FreeArrays>
    FreeKeyExchange(ssl);
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff feeb 	bl	8001510 <FreeKeyExchange>
    FreeAsyncCtx(ssl, 1);
 800173a:	2101      	movs	r1, #1
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fed3 	bl	80014e8 <FreeAsyncCtx>
    if (ssl->options.weOwnRng) {
 8001742:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 8001746:	079b      	lsls	r3, r3, #30
 8001748:	d50e      	bpl.n	8001768 <SSL_ResourceFree+0x44>
        wc_FreeRng(ssl->rng);
 800174a:	69a0      	ldr	r0, [r4, #24]
 800174c:	f00d fa05 	bl	800eb5a <wc_FreeRng>
        XFREE(ssl->rng, ssl->heap, DYNAMIC_TYPE_RNG);
 8001750:	69a0      	ldr	r0, [r4, #24]
 8001752:	b108      	cbz	r0, 8001758 <SSL_ResourceFree+0x34>
 8001754:	f01c f90e 	bl	801d974 <free>
        ssl->options.weOwnRng = 0;
 8001758:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
        ssl->rng = NULL;
 800175c:	2200      	movs	r2, #0
        ssl->options.weOwnRng = 0;
 800175e:	f362 0341 	bfi	r3, r2, #1, #1
        ssl->rng = NULL;
 8001762:	61a2      	str	r2, [r4, #24]
        ssl->options.weOwnRng = 0;
 8001764:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
    FreeSuites(ssl);
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff fef5 	bl	8001558 <FreeSuites>
    FreeHandshakeHashes(ssl);
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff fd02 	bl	8001178 <FreeHandshakeHashes>
    XFREE(ssl->buffers.domainName.buffer, ssl->heap, DYNAMIC_TYPE_DOMAIN);
 8001774:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8001778:	b108      	cbz	r0, 800177e <SSL_ResourceFree+0x5a>
 800177a:	f01c f8fb 	bl	801d974 <free>
    ForceZero(&ssl->keys, sizeof(Keys));
 800177e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001782:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001786:	f7fe fd41 	bl	800020c <ForceZero>
    ssl->keepCert = 0; /* make sure certificate is free'd */
 800178a:	2300      	movs	r3, #0
 800178c:	f884 32b9 	strb.w	r3, [r4, #697]	; 0x2b9
    wolfSSL_UnloadCertsKeys(ssl);
 8001790:	4620      	mov	r0, r4
 8001792:	f006 fb59 	bl	8007e48 <wolfSSL_UnloadCertsKeys>
    if (ssl->buffers.inputBuffer.dynamicFlag)
 8001796:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800179a:	b11b      	cbz	r3, 80017a4 <SSL_ResourceFree+0x80>
        ShrinkInputBuffer(ssl, FORCED_FREE);
 800179c:	2101      	movs	r1, #1
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ff93 	bl	80016ca <ShrinkInputBuffer>
    if (ssl->buffers.outputBuffer.dynamicFlag)
 80017a4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80017a8:	b113      	cbz	r3, 80017b0 <SSL_ResourceFree+0x8c>
        ShrinkOutputBuffer(ssl);
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7ff ff78 	bl	80016a0 <ShrinkOutputBuffer>
    FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccKey);
 80017b0:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 80017b4:	2125      	movs	r1, #37	; 0x25
 80017b6:	4620      	mov	r0, r4
    ssl->peerEccKeyPresent = 0;
 80017b8:	2500      	movs	r5, #0
    FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccKey);
 80017ba:	f7ff fe38 	bl	800142e <FreeKey>
    ssl->peerEccKeyPresent = 0;
 80017be:	f884 5299 	strb.w	r5, [r4, #665]	; 0x299
    FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccDsaKey);
 80017c2:	f504 7228 	add.w	r2, r4, #672	; 0x2a0
 80017c6:	2125      	movs	r1, #37	; 0x25
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff fe30 	bl	800142e <FreeKey>
        if (ssl->peerX25519KeyPresent
 80017ce:	f894 32b8 	ldrb.w	r3, [r4, #696]	; 0x2b8
    ssl->peerEccDsaKeyPresent = 0;
 80017d2:	f884 52a6 	strb.w	r5, [r4, #678]	; 0x2a6
        if (ssl->peerX25519KeyPresent
 80017d6:	bb53      	cbnz	r3, 800182e <SSL_ResourceFree+0x10a>
                           || ssl->eccTempKeyPresent == DYNAMIC_TYPE_CURVE25519
 80017d8:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
        dtype = DYNAMIC_TYPE_ECC;
 80017dc:	2b45      	cmp	r3, #69	; 0x45
 80017de:	bf0c      	ite	eq
 80017e0:	2145      	moveq	r1, #69	; 0x45
 80017e2:	2125      	movne	r1, #37	; 0x25
        ssl->eccTempKeyPresent = 0;
 80017e4:	2500      	movs	r5, #0
        FreeKey(ssl, dtype, (void**)&ssl->eccTempKey);
 80017e6:	f504 7225 	add.w	r2, r4, #660	; 0x294
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff fe1f 	bl	800142e <FreeKey>
    FreeKey(ssl, DYNAMIC_TYPE_CURVE25519, (void**)&ssl->peerX25519Key);
 80017f0:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 80017f4:	2145      	movs	r1, #69	; 0x45
 80017f6:	4620      	mov	r0, r4
        ssl->eccTempKeyPresent = 0;
 80017f8:	f884 5298 	strb.w	r5, [r4, #664]	; 0x298
    FreeKey(ssl, DYNAMIC_TYPE_CURVE25519, (void**)&ssl->peerX25519Key);
 80017fc:	f7ff fe17 	bl	800142e <FreeKey>
    FreeKey(ssl, DYNAMIC_TYPE_ED25519, (void**)&ssl->peerEd25519Key);
 8001800:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 8001804:	2146      	movs	r1, #70	; 0x46
 8001806:	4620      	mov	r0, r4
    ssl->peerX25519KeyPresent = 0;
 8001808:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
    FreeKey(ssl, DYNAMIC_TYPE_ED25519, (void**)&ssl->peerEd25519Key);
 800180c:	f7ff fe0f 	bl	800142e <FreeKey>
    TLSX_FreeAll(ssl->extensions, ssl->heap);
 8001810:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001812:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
    ssl->peerEd25519KeyPresent = 0;
 8001816:	f884 52b0 	strb.w	r5, [r4, #688]	; 0x2b0
    TLSX_FreeAll(ssl->extensions, ssl->heap);
 800181a:	f007 f930 	bl	8008a7e <TLSX_FreeAll>
    if (ssl->session != NULL)
 800181e:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 8001822:	b131      	cbz	r1, 8001832 <SSL_ResourceFree+0x10e>
        wolfSSL_FreeSession(ssl->ctx, ssl->session);
 8001824:	6820      	ldr	r0, [r4, #0]
}
 8001826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        wolfSSL_FreeSession(ssl->ctx, ssl->session);
 800182a:	f006 bb5d 	b.w	8007ee8 <wolfSSL_FreeSession>
            dtype = DYNAMIC_TYPE_CURVE25519;
 800182e:	2145      	movs	r1, #69	; 0x45
 8001830:	e7d8      	b.n	80017e4 <SSL_ResourceFree+0xc0>
}
 8001832:	bd38      	pop	{r3, r4, r5, pc}

08001834 <FreeSSL>:
{
 8001834:	b538      	push	{r3, r4, r5, lr}
    WOLFSSL_CTX* ctx = ssl->ctx;
 8001836:	6805      	ldr	r5, [r0, #0]
{
 8001838:	4604      	mov	r4, r0
    SSL_ResourceFree(ssl);
 800183a:	f7ff ff73 	bl	8001724 <SSL_ResourceFree>
    XFREE(ssl, heap, DYNAMIC_TYPE_SSL);
 800183e:	4620      	mov	r0, r4
 8001840:	f01c f898 	bl	801d974 <free>
    if (ctx)
 8001844:	b125      	cbz	r5, 8001850 <FreeSSL+0x1c>
        FreeSSL_Ctx(ctx); /* will decrement and free underlying CTX if 0 */
 8001846:	4628      	mov	r0, r5
}
 8001848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        FreeSSL_Ctx(ctx); /* will decrement and free underlying CTX if 0 */
 800184c:	f7ff b938 	b.w	8000ac0 <FreeSSL_Ctx>
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}

08001852 <FreeHandshakeResources>:
{
 8001852:	b538      	push	{r3, r4, r5, lr}
    if (ssl->buffers.inputBuffer.dynamicFlag)
 8001854:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
{
 8001858:	4604      	mov	r4, r0
    if (ssl->buffers.inputBuffer.dynamicFlag)
 800185a:	b113      	cbz	r3, 8001862 <FreeHandshakeResources+0x10>
        ShrinkInputBuffer(ssl, NO_FORCED_FREE);
 800185c:	2100      	movs	r1, #0
 800185e:	f7ff ff34 	bl	80016ca <ShrinkInputBuffer>
        FreeSuites(ssl);
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff fe78 	bl	8001558 <FreeSuites>
        FreeHandshakeHashes(ssl);
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff fc85 	bl	8001178 <FreeHandshakeHashes>
    if (ssl->options.tls1_1 == 0
 800186e:	f994 3271 	ldrsb.w	r3, [r4, #625]	; 0x271
 8001872:	2b00      	cmp	r3, #0
 8001874:	da02      	bge.n	800187c <FreeHandshakeResources+0x2a>
        || ssl->specs.cipher_type == stream
 8001876:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
 800187a:	b993      	cbnz	r3, 80018a2 <FreeHandshakeResources+0x50>
        if (ssl->options.weOwnRng) {
 800187c:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 8001880:	079a      	lsls	r2, r3, #30
 8001882:	d50e      	bpl.n	80018a2 <FreeHandshakeResources+0x50>
            wc_FreeRng(ssl->rng);
 8001884:	69a0      	ldr	r0, [r4, #24]
 8001886:	f00d f968 	bl	800eb5a <wc_FreeRng>
            XFREE(ssl->rng, ssl->heap, DYNAMIC_TYPE_RNG);
 800188a:	69a0      	ldr	r0, [r4, #24]
 800188c:	b108      	cbz	r0, 8001892 <FreeHandshakeResources+0x40>
 800188e:	f01c f871 	bl	801d974 <free>
            ssl->options.weOwnRng = 0;
 8001892:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
            ssl->rng = NULL;
 8001896:	2200      	movs	r2, #0
            ssl->options.weOwnRng = 0;
 8001898:	f362 0341 	bfi	r3, r2, #1, #1
            ssl->rng = NULL;
 800189c:	61a2      	str	r2, [r4, #24]
            ssl->options.weOwnRng = 0;
 800189e:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
        if (ssl->options.saveArrays == 0)
 80018a2:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 80018a6:	07db      	lsls	r3, r3, #31
 80018a8:	d403      	bmi.n	80018b2 <FreeHandshakeResources+0x60>
            FreeArrays(ssl, 1);
 80018aa:	2101      	movs	r1, #1
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff fd85 	bl	80013bc <FreeArrays>
        ssl->peerEccDsaKeyPresent = 0;
 80018b2:	2500      	movs	r5, #0
        FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccDsaKey);
 80018b4:	f504 7228 	add.w	r2, r4, #672	; 0x2a0
 80018b8:	2125      	movs	r1, #37	; 0x25
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff fdb7 	bl	800142e <FreeKey>
        FreeKey(ssl, DYNAMIC_TYPE_ED25519, (void**)&ssl->peerEd25519Key);
 80018c0:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 80018c4:	2146      	movs	r1, #70	; 0x46
 80018c6:	4620      	mov	r0, r4
        ssl->peerEccDsaKeyPresent = 0;
 80018c8:	f884 52a6 	strb.w	r5, [r4, #678]	; 0x2a6
        FreeKey(ssl, DYNAMIC_TYPE_ED25519, (void**)&ssl->peerEd25519Key);
 80018cc:	f7ff fdaf 	bl	800142e <FreeKey>
        ssl->peerEd25519KeyPresent = 0;
 80018d0:	f884 52b0 	strb.w	r5, [r4, #688]	; 0x2b0
    FreeKey(ssl, DYNAMIC_TYPE_ECC, (void**)&ssl->peerEccKey);
 80018d4:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 80018d8:	2125      	movs	r1, #37	; 0x25
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fda7 	bl	800142e <FreeKey>
        if (ssl->peerX25519KeyPresent ||
 80018e0:	f894 32b8 	ldrb.w	r3, [r4, #696]	; 0x2b8
    ssl->peerEccKeyPresent = 0;
 80018e4:	f884 5299 	strb.w	r5, [r4, #665]	; 0x299
        if (ssl->peerX25519KeyPresent ||
 80018e8:	bb03      	cbnz	r3, 800192c <FreeHandshakeResources+0xda>
 80018ea:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
        dtype = DYNAMIC_TYPE_ECC;
 80018ee:	2b45      	cmp	r3, #69	; 0x45
 80018f0:	bf0c      	ite	eq
 80018f2:	2145      	moveq	r1, #69	; 0x45
 80018f4:	2125      	movne	r1, #37	; 0x25
        ssl->eccTempKeyPresent = 0;
 80018f6:	2500      	movs	r5, #0
        FreeKey(ssl, dtype, (void**)&ssl->eccTempKey);
 80018f8:	f504 7225 	add.w	r2, r4, #660	; 0x294
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff fd96 	bl	800142e <FreeKey>
    FreeKey(ssl, DYNAMIC_TYPE_CURVE25519, (void**)&ssl->peerX25519Key);
 8001902:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8001906:	2145      	movs	r1, #69	; 0x45
 8001908:	4620      	mov	r0, r4
        ssl->eccTempKeyPresent = 0;
 800190a:	f884 5298 	strb.w	r5, [r4, #664]	; 0x298
    FreeKey(ssl, DYNAMIC_TYPE_CURVE25519, (void**)&ssl->peerX25519Key);
 800190e:	f7ff fd8e 	bl	800142e <FreeKey>
    ssl->peerX25519KeyPresent = 0;
 8001912:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
    wolfSSL_UnloadCertsKeys(ssl);
 8001916:	4620      	mov	r0, r4
 8001918:	f006 fa96 	bl	8007e48 <wolfSSL_UnloadCertsKeys>
    TLSX_FreeAll(ssl->extensions, ssl->heap);
 800191c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800191e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8001922:	f007 f8ac 	bl	8008a7e <TLSX_FreeAll>
    ssl->extensions = NULL;
 8001926:	f8c4 52c0 	str.w	r5, [r4, #704]	; 0x2c0
}
 800192a:	bd38      	pop	{r3, r4, r5, pc}
            dtype = DYNAMIC_TYPE_CURVE25519;
 800192c:	2145      	movs	r1, #69	; 0x45
 800192e:	e7e2      	b.n	80018f6 <FreeHandshakeResources+0xa4>

08001930 <SendBuffered>:
    if (ssl->CBIOSend == NULL && !WOLFSSL_IS_QUIC(ssl)) {
 8001930:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8001932:	b570      	push	{r4, r5, r6, lr}
 8001934:	4604      	mov	r4, r0
    if (ssl->CBIOSend == NULL && !WOLFSSL_IS_QUIC(ssl)) {
 8001936:	bb3b      	cbnz	r3, 8001988 <SendBuffered+0x58>
            return SOCKET_ERROR_E;
 8001938:	481e      	ldr	r0, [pc, #120]	; (80019b4 <SendBuffered+0x84>)
}
 800193a:	bd70      	pop	{r4, r5, r6, pc}
        int sent = ssl->CBIOSend(ssl,
 800193c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8001940:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001946:	6963      	ldr	r3, [r4, #20]
 8001948:	4401      	add	r1, r0
 800194a:	462a      	mov	r2, r5
 800194c:	4620      	mov	r0, r4
 800194e:	47b0      	blx	r6
        if (sent < 0) {
 8001950:	2800      	cmp	r0, #0
 8001952:	da0d      	bge.n	8001970 <SendBuffered+0x40>
            switch (sent) {
 8001954:	3005      	adds	r0, #5
 8001956:	2803      	cmp	r0, #3
 8001958:	d8ee      	bhi.n	8001938 <SendBuffered+0x8>
 800195a:	e8df f000 	tbb	[pc, r0]
 800195e:	1502      	.short	0x1502
 8001960:	2402      	.short	0x2402
                    ssl->options.connReset = 1;
 8001962:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
 800196e:	e7e3      	b.n	8001938 <SendBuffered+0x8>
        if (sent > (int)ssl->buffers.outputBuffer.length) {
 8001970:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8001974:	4298      	cmp	r0, r3
 8001976:	dc19      	bgt.n	80019ac <SendBuffered+0x7c>
        ssl->buffers.outputBuffer.idx += sent;
 8001978:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800197c:	4402      	add	r2, r0
        ssl->buffers.outputBuffer.length -= sent;
 800197e:	1a18      	subs	r0, r3, r0
        ssl->buffers.outputBuffer.idx += sent;
 8001980:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->buffers.outputBuffer.length -= sent;
 8001984:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    while (ssl->buffers.outputBuffer.length > 0) {
 8001988:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 800198c:	2d00      	cmp	r5, #0
 800198e:	d1d5      	bne.n	800193c <SendBuffered+0xc>
    if (ssl->buffers.outputBuffer.dynamicFlag)
 8001990:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
    ssl->buffers.outputBuffer.idx = 0;
 8001994:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    if (ssl->buffers.outputBuffer.dynamicFlag)
 8001998:	2800      	cmp	r0, #0
 800199a:	d0ce      	beq.n	800193a <SendBuffered+0xa>
        ShrinkOutputBuffer(ssl);
 800199c:	4620      	mov	r0, r4
 800199e:	f7ff fe7f 	bl	80016a0 <ShrinkOutputBuffer>
    return 0;
 80019a2:	4628      	mov	r0, r5
 80019a4:	e7c9      	b.n	800193a <SendBuffered+0xa>
                    return WANT_WRITE;
 80019a6:	f46f 70a3 	mvn.w	r0, #326	; 0x146
 80019aa:	e7c6      	b.n	800193a <SendBuffered+0xa>
            return SEND_OOB_READ_E;
 80019ac:	f46f 70c1 	mvn.w	r0, #386	; 0x182
 80019b0:	e7c3      	b.n	800193a <SendBuffered+0xa>
 80019b2:	bf00      	nop
 80019b4:	fffffecc 	.word	0xfffffecc

080019b8 <GetOutputBuffer>:
    return ssl->buffers.outputBuffer.buffer + ssl->buffers.outputBuffer.idx +
 80019b8:	e9d0 2328 	ldrd	r2, r3, [r0, #160]	; 0xa0
 80019bc:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 80019c0:	4413      	add	r3, r2
}
 80019c2:	4418      	add	r0, r3
 80019c4:	4770      	bx	lr

080019c6 <GrowInputBuffer>:
{
 80019c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    byte  align = ssl->options.dtls ? WOLFSSL_GENERAL_ALIGNMENT : 0;
 80019ca:	f890 5272 	ldrb.w	r5, [r0, #626]	; 0x272
    if (align) {
 80019ce:	f015 0504 	ands.w	r5, r5, #4
{
 80019d2:	4604      	mov	r4, r0
 80019d4:	4616      	mov	r6, r2
    if (align) {
 80019d6:	d003      	beq.n	80019e0 <GrowInputBuffer+0x1a>
           align *= 2;
 80019d8:	006d      	lsls	r5, r5, #1
 80019da:	b2ed      	uxtb	r5, r5
       while (align < hdrSz)
 80019dc:	2d0c      	cmp	r5, #12
 80019de:	d9fb      	bls.n	80019d8 <GrowInputBuffer+0x12>
    if (usedLength < 0 || size < 0) {
 80019e0:	2e00      	cmp	r6, #0
 80019e2:	db3a      	blt.n	8001a5a <GrowInputBuffer+0x94>
 80019e4:	2900      	cmp	r1, #0
 80019e6:	db38      	blt.n	8001a5a <GrowInputBuffer+0x94>
    tmp = (byte*)XMALLOC(size + usedLength + align,
 80019e8:	1877      	adds	r7, r6, r1
 80019ea:	1978      	adds	r0, r7, r5
 80019ec:	f01b ffba 	bl	801d964 <malloc>
    if (tmp == NULL)
 80019f0:	4680      	mov	r8, r0
 80019f2:	b3a8      	cbz	r0, 8001a60 <GrowInputBuffer+0x9a>
    if (align)
 80019f4:	b115      	cbz	r5, 80019fc <GrowInputBuffer+0x36>
        tmp += align - hdrSz;
 80019f6:	f1a5 030d 	sub.w	r3, r5, #13
 80019fa:	4498      	add	r8, r3
    if (usedLength)
 80019fc:	b146      	cbz	r6, 8001a10 <GrowInputBuffer+0x4a>
        XMEMCPY(tmp, ssl->buffers.inputBuffer.buffer +
 80019fe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001a02:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001a06:	4632      	mov	r2, r6
 8001a08:	4419      	add	r1, r3
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	f01b ffca 	bl	801d9a4 <memcpy>
    if (ssl->buffers.inputBuffer.dynamicFlag) {
 8001a10:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8001a14:	b183      	cbz	r3, 8001a38 <GrowInputBuffer+0x72>
        if (IsEncryptionOn(ssl, 1)) {
 8001a16:	2101      	movs	r1, #1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7fe ffc8 	bl	80009ae <IsEncryptionOn>
 8001a1e:	b118      	cbz	r0, 8001a28 <GrowInputBuffer+0x62>
            ForceZero(ssl->buffers.inputBuffer.buffer,
 8001a20:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	; 0x80
 8001a24:	f7fe fbf2 	bl	800020c <ForceZero>
        XFREE(ssl->buffers.inputBuffer.buffer - ssl->buffers.inputBuffer.offset,
 8001a28:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 8001a2c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8001a30:	1a98      	subs	r0, r3, r2
 8001a32:	d001      	beq.n	8001a38 <GrowInputBuffer+0x72>
 8001a34:	f01b ff9e 	bl	801d974 <free>
    ssl->buffers.inputBuffer.dynamicFlag = 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    if (align)
 8001a3e:	b10d      	cbz	r5, 8001a44 <GrowInputBuffer+0x7e>
        ssl->buffers.inputBuffer.offset = align - hdrSz;
 8001a40:	3d0d      	subs	r5, #13
 8001a42:	b2ed      	uxtb	r5, r5
    ssl->buffers.inputBuffer.idx    = 0;
 8001a44:	2000      	movs	r0, #0
    ssl->buffers.inputBuffer.length = usedLength;
 8001a46:	e9c4 6021 	strd	r6, r0, [r4, #132]	; 0x84
 8001a4a:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    ssl->buffers.inputBuffer.buffer = tmp;
 8001a4e:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
    ssl->buffers.inputBuffer.bufferSize = size + usedLength;
 8001a52:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
}
 8001a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BAD_FUNC_ARG;
 8001a5a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8001a5e:	e7fa      	b.n	8001a56 <GrowInputBuffer+0x90>
        return MEMORY_E;
 8001a60:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001a64:	e7f7      	b.n	8001a56 <GrowInputBuffer+0x90>
	...

08001a68 <GetInputData>:
{
 8001a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    usedLength = ssl->buffers.inputBuffer.length - ssl->buffers.inputBuffer.idx;
 8001a6c:	e9d0 6221 	ldrd	r6, r2, [r0, #132]	; 0x84
    maxLength  = ssl->buffers.inputBuffer.bufferSize - usedLength;
 8001a70:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8001a74:	1b95      	subs	r5, r2, r6
    if (usedLength < 0 || maxLength < 0 || inSz <= 0) {
 8001a76:	1ab6      	subs	r6, r6, r2
    maxLength  = ssl->buffers.inputBuffer.bufferSize - usedLength;
 8001a78:	442b      	add	r3, r5
{
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	460f      	mov	r7, r1
    inSz       = (int)(size - usedLength);      /* from last partial read */
 8001a7e:	440d      	add	r5, r1
    if (usedLength < 0 || maxLength < 0 || inSz <= 0) {
 8001a80:	d472      	bmi.n	8001b68 <GetInputData+0x100>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db70      	blt.n	8001b68 <GetInputData+0x100>
 8001a86:	2d00      	cmp	r5, #0
 8001a88:	dd6e      	ble.n	8001b68 <GetInputData+0x100>
    if (inSz > maxLength) {
 8001a8a:	42ab      	cmp	r3, r5
 8001a8c:	db0c      	blt.n	8001aa8 <GetInputData+0x40>
    if (usedLength > 0 && ssl->buffers.inputBuffer.idx != 0)
 8001a8e:	b99e      	cbnz	r6, 8001ab8 <GetInputData+0x50>
    ssl->buffers.inputBuffer.idx    = 0;
 8001a90:	2300      	movs	r3, #0
    ssl->buffers.inputBuffer.length = usedLength;
 8001a92:	e9c4 6321 	strd	r6, r3, [r4, #132]	; 0x84
        int in = wolfSSLReceive(ssl,
 8001a96:	e9d4 3120 	ldrd	r3, r1, [r4, #128]	; 0x80
 8001a9a:	eb03 0901 	add.w	r9, r3, r1
    if (ssl->CBIORecv == NULL) {
 8001a9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001aa0:	b9ab      	cbnz	r3, 8001ace <GetInputData+0x66>
            return SOCKET_ERROR_E;
 8001aa2:	4835      	ldr	r0, [pc, #212]	; (8001b78 <GetInputData+0x110>)
}
 8001aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (GrowInputBuffer(ssl, size + dtlsExtra, usedLength) < 0)
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	f7ff ff8c 	bl	80019c6 <GrowInputBuffer>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	daed      	bge.n	8001a8e <GetInputData+0x26>
            return MEMORY_E;
 8001ab2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001ab6:	e7f5      	b.n	8001aa4 <GetInputData+0x3c>
    if (usedLength > 0 && ssl->buffers.inputBuffer.idx != 0)
 8001ab8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001abc:	2900      	cmp	r1, #0
 8001abe:	d0e7      	beq.n	8001a90 <GetInputData+0x28>
        XMEMMOVE(ssl->buffers.inputBuffer.buffer,
 8001ac0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	4401      	add	r1, r0
 8001ac8:	f01b ff7a 	bl	801d9c0 <memmove>
 8001acc:	e7e0      	b.n	8001a90 <GetInputData+0x28>
    int retryLimit = WOLFSSL_MODE_AUTO_RETRY_ATTEMPTS;
 8001ace:	f04f 080a 	mov.w	r8, #10
    recvd = ssl->CBIORecv(ssl, (char *)buf, (int)sz, ssl->IOCB_ReadCtx);
 8001ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ad4:	6923      	ldr	r3, [r4, #16]
 8001ad6:	462a      	mov	r2, r5
 8001ad8:	4649      	mov	r1, r9
 8001ada:	4620      	mov	r0, r4
 8001adc:	47b0      	blx	r6
    if (recvd < 0) {
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	da35      	bge.n	8001b4e <GetInputData+0xe6>
        switch (recvd) {
 8001ae2:	1d83      	adds	r3, r0, #6
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d82d      	bhi.n	8001b44 <GetInputData+0xdc>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <GetInputData+0x88>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001aa3 	.word	0x08001aa3
 8001af4:	08001b3b 	.word	0x08001b3b
 8001af8:	08001ad3 	.word	0x08001ad3
 8001afc:	08001b2d 	.word	0x08001b2d
 8001b00:	08001b09 	.word	0x08001b09
 8001b04:	08001aa3 	.word	0x08001aa3
                if (retryLimit > 0 && ssl->ctx->autoRetry &&
 8001b08:	f1b8 0f00 	cmp.w	r8, #0
 8001b0c:	dd2e      	ble.n	8001b6c <GetInputData+0x104>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001b14:	07da      	lsls	r2, r3, #31
 8001b16:	d529      	bpl.n	8001b6c <GetInputData+0x104>
 8001b18:	f894 327f 	ldrb.w	r3, [r4, #639]	; 0x27f
 8001b1c:	bb33      	cbnz	r3, 8001b6c <GetInputData+0x104>
                        !ssl->options.handShakeDone && !ssl->options.dtls) {
 8001b1e:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8001b22:	075b      	lsls	r3, r3, #29
 8001b24:	d422      	bmi.n	8001b6c <GetInputData+0x104>
                    retryLimit--;
 8001b26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
                    goto retry;
 8001b2a:	e7d2      	b.n	8001ad2 <GetInputData+0x6a>
                ssl->options.connReset = 1;
 8001b2c:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
 8001b38:	e7b3      	b.n	8001aa2 <GetInputData+0x3a>
                ssl->options.isClosed = 1;
 8001b3a:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	e7f7      	b.n	8001b34 <GetInputData+0xcc>
        if (in == WANT_READ)
 8001b44:	f46f 73a1 	mvn.w	r3, #322	; 0x142
 8001b48:	4298      	cmp	r0, r3
 8001b4a:	d1aa      	bne.n	8001aa2 <GetInputData+0x3a>
 8001b4c:	e7aa      	b.n	8001aa4 <GetInputData+0x3c>
        if (in > inSz) {
 8001b4e:	4285      	cmp	r5, r0
 8001b50:	db0f      	blt.n	8001b72 <GetInputData+0x10a>
        ssl->buffers.inputBuffer.length += in;
 8001b52:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001b56:	4403      	add	r3, r0
    } while (ssl->buffers.inputBuffer.length < size);
 8001b58:	42bb      	cmp	r3, r7
        ssl->buffers.inputBuffer.length += in;
 8001b5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        inSz -= in;
 8001b5e:	eba5 0500 	sub.w	r5, r5, r0
    } while (ssl->buffers.inputBuffer.length < size);
 8001b62:	d398      	bcc.n	8001a96 <GetInputData+0x2e>
    return 0;
 8001b64:	2000      	movs	r0, #0
 8001b66:	e79d      	b.n	8001aa4 <GetInputData+0x3c>
        return BUFFER_ERROR;
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <GetInputData+0x114>)
 8001b6a:	e79b      	b.n	8001aa4 <GetInputData+0x3c>
            return WANT_READ;
 8001b6c:	f46f 70a1 	mvn.w	r0, #322	; 0x142
 8001b70:	e798      	b.n	8001aa4 <GetInputData+0x3c>
            return RECV_OVERFLOW_E;
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <GetInputData+0x118>)
 8001b74:	e796      	b.n	8001aa4 <GetInputData+0x3c>
 8001b76:	bf00      	nop
 8001b78:	fffffecc 	.word	0xfffffecc
 8001b7c:	fffffeb8 	.word	0xfffffeb8
 8001b80:	fffffe88 	.word	0xfffffe88

08001b84 <CheckAvailableSize>:
    if (size < 0) {
 8001b84:	2900      	cmp	r1, #0
{
 8001b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b88:	4604      	mov	r4, r0
    if (size < 0) {
 8001b8a:	db3b      	blt.n	8001c04 <CheckAvailableSize+0x80>
    if ((ssl->buffers.outputBuffer.bufferSize -
 8001b8c:	e9d0 7328 	ldrd	r7, r3, [r0, #160]	; 0xa0
 8001b90:	441f      	add	r7, r3
             ssl->buffers.outputBuffer.length -
 8001b92:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8001b96:	1bdb      	subs	r3, r3, r7
    if ((ssl->buffers.outputBuffer.bufferSize -
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d231      	bcs.n	8001c00 <CheckAvailableSize+0x7c>
    byte  hdrSz = ssl->options.dtls ? DTLS_RECORD_HEADER_SZ :
 8001b9c:	f890 3272 	ldrb.w	r3, [r0, #626]	; 0x272
 8001ba0:	f013 0f04 	tst.w	r3, #4
 8001ba4:	bf14      	ite	ne
 8001ba6:	250d      	movne	r5, #13
 8001ba8:	2505      	moveq	r5, #5
    int newSz = size + ssl->buffers.outputBuffer.idx +
 8001baa:	440f      	add	r7, r1
    byte align = WOLFSSL_GENERAL_ALIGNMENT;
 8001bac:	2604      	movs	r6, #4
        align *= 2;
 8001bae:	0076      	lsls	r6, r6, #1
 8001bb0:	b2f6      	uxtb	r6, r6
    while (align < hdrSz)
 8001bb2:	42ae      	cmp	r6, r5
 8001bb4:	d3fb      	bcc.n	8001bae <CheckAvailableSize+0x2a>
    tmp = (byte*)XMALLOC(newSz + align, ssl->heap, DYNAMIC_TYPE_OUT_BUFFER);
 8001bb6:	19b8      	adds	r0, r7, r6
 8001bb8:	f01b fed4 	bl	801d964 <malloc>
    if (tmp == NULL)
 8001bbc:	b328      	cbz	r0, 8001c0a <CheckAvailableSize+0x86>
    if (ssl->buffers.outputBuffer.length)
 8001bbe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        tmp += align - hdrSz;
 8001bc2:	1b76      	subs	r6, r6, r5
 8001bc4:	1985      	adds	r5, r0, r6
    if (ssl->buffers.outputBuffer.length)
 8001bc6:	b13b      	cbz	r3, 8001bd8 <CheckAvailableSize+0x54>
        XMEMCPY(tmp, ssl->buffers.outputBuffer.buffer,
 8001bc8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8001bcc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8001bd0:	441a      	add	r2, r3
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f01b fee6 	bl	801d9a4 <memcpy>
    if (ssl->buffers.outputBuffer.dynamicFlag) {
 8001bd8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8001bdc:	b13b      	cbz	r3, 8001bee <CheckAvailableSize+0x6a>
        XFREE(ssl->buffers.outputBuffer.buffer -
 8001bde:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 8001be2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8001be6:	1ac0      	subs	r0, r0, r3
 8001be8:	d001      	beq.n	8001bee <CheckAvailableSize+0x6a>
 8001bea:	f01b fec3 	bl	801d974 <free>
    ssl->buffers.outputBuffer.dynamicFlag = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
        ssl->buffers.outputBuffer.offset = align - hdrSz;
 8001bf4:	f884 60ad 	strb.w	r6, [r4, #173]	; 0xad
    ssl->buffers.outputBuffer.buffer = tmp;
 8001bf8:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    ssl->buffers.outputBuffer.bufferSize = newSz;
 8001bfc:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
    return 0;
 8001c00:	2000      	movs	r0, #0
 8001c02:	e001      	b.n	8001c08 <CheckAvailableSize+0x84>
        return BAD_FUNC_ARG;
 8001c04:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return MEMORY_E;
 8001c0a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001c0e:	e7fb      	b.n	8001c08 <CheckAvailableSize+0x84>

08001c10 <MatchDomainName>:
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (pattern == NULL || str == NULL || len <= 0)
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d03a      	beq.n	8001c8c <MatchDomainName+0x7c>
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d03d      	beq.n	8001c96 <MatchDomainName+0x86>
 8001c1a:	2900      	cmp	r1, #0
 8001c1c:	dd3b      	ble.n	8001c96 <MatchDomainName+0x86>
        char p = (char)XTOLOWER((unsigned char)*pattern++);
 8001c1e:	4d24      	ldr	r5, [pc, #144]	; (8001cb0 <MatchDomainName+0xa0>)
 8001c20:	f810 4b01 	ldrb.w	r4, [r0], #1
 8001c24:	5d63      	ldrb	r3, [r4, r5]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	bf08      	it	eq
 8001c2e:	3420      	addeq	r4, #32
        if (p == '\0')
 8001c30:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
            if (p != (char)XTOLOWER((unsigned char) *str))
 8001c34:	7813      	ldrb	r3, [r2, #0]
        if (p == '\0')
 8001c36:	d024      	beq.n	8001c82 <MatchDomainName+0x72>
        if (p == '*') {
 8001c38:	5cee      	ldrb	r6, [r5, r3]
 8001c3a:	2c2a      	cmp	r4, #42	; 0x2a
 8001c3c:	f006 0603 	and.w	r6, r6, #3
 8001c40:	d12b      	bne.n	8001c9a <MatchDomainName+0x8a>
 8001c42:	4606      	mov	r6, r0
            while (--len > 0) {
 8001c44:	3901      	subs	r1, #1
 8001c46:	4630      	mov	r0, r6
 8001c48:	d101      	bne.n	8001c4e <MatchDomainName+0x3e>
                p = '\0';
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	e00b      	b.n	8001c66 <MatchDomainName+0x56>
                p = (char)XTOLOWER((unsigned char)*pattern);
 8001c4e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001c52:	5ce8      	ldrb	r0, [r5, r3]
 8001c54:	f000 0003 	and.w	r0, r0, #3
 8001c58:	2801      	cmp	r0, #1
 8001c5a:	bf08      	it	eq
 8001c5c:	3320      	addeq	r3, #32
 8001c5e:	b2dc      	uxtb	r4, r3
                if (p != '*')
 8001c60:	2c2a      	cmp	r4, #42	; 0x2a
                pattern++;
 8001c62:	4630      	mov	r0, r6
                if (p != '*')
 8001c64:	d0ee      	beq.n	8001c44 <MatchDomainName+0x34>
 8001c66:	4616      	mov	r6, r2
 8001c68:	4632      	mov	r2, r6
            while ( (s = (char)XTOLOWER((unsigned char) *str)) != '\0') {
 8001c6a:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001c6e:	5cef      	ldrb	r7, [r5, r3]
 8001c70:	f007 0703 	and.w	r7, r7, #3
 8001c74:	2f01      	cmp	r7, #1
 8001c76:	bf08      	it	eq
 8001c78:	3320      	addeq	r3, #32
 8001c7a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001c7e:	d106      	bne.n	8001c8e <MatchDomainName+0x7e>
        if (len > 0) {
 8001c80:	b989      	cbnz	r1, 8001ca6 <MatchDomainName+0x96>
    if (*str == '\0' && len == 0) {
 8001c82:	7813      	ldrb	r3, [r2, #0]
 8001c84:	b93b      	cbnz	r3, 8001c96 <MatchDomainName+0x86>
 8001c86:	fab1 f081 	clz	r0, r1
 8001c8a:	0940      	lsrs	r0, r0, #5
}
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (s == p)
 8001c8e:	42a3      	cmp	r3, r4
 8001c90:	d0f6      	beq.n	8001c80 <MatchDomainName+0x70>
                if (s == '.')
 8001c92:	2b2e      	cmp	r3, #46	; 0x2e
 8001c94:	d1e8      	bne.n	8001c68 <MatchDomainName+0x58>
        return 0;
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7f8      	b.n	8001c8c <MatchDomainName+0x7c>
            if (p != (char)XTOLOWER((unsigned char) *str))
 8001c9a:	2e01      	cmp	r6, #1
 8001c9c:	bf08      	it	eq
 8001c9e:	3320      	addeq	r3, #32
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	429c      	cmp	r4, r3
 8001ca4:	d1f7      	bne.n	8001c96 <MatchDomainName+0x86>
    while (len > 0) {
 8001ca6:	3901      	subs	r1, #1
            str++;
 8001ca8:	f102 0201 	add.w	r2, r2, #1
    while (len > 0) {
 8001cac:	d1b8      	bne.n	8001c20 <MatchDomainName+0x10>
 8001cae:	e7e8      	b.n	8001c82 <MatchDomainName+0x72>
 8001cb0:	0802ab2d 	.word	0x0802ab2d

08001cb4 <CheckForAltNames>:
{
 8001cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cb8:	460f      	mov	r7, r1
 8001cba:	4615      	mov	r5, r2
    if (dCert)
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	b100      	cbz	r0, 8001cc2 <CheckForAltNames+0xe>
        altName = dCert->altNames;
 8001cc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    if (checkCN != NULL) {
 8001cc2:	b11d      	cbz	r5, 8001ccc <CheckForAltNames+0x18>
        *checkCN = (altName == NULL) ? 1 : 0;
 8001cc4:	fab4 f384 	clz	r3, r4
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	602b      	str	r3, [r5, #0]
            match = -1;
 8001ccc:	2600      	movs	r6, #0
    while (altName) {
 8001cce:	b914      	cbnz	r4, 8001cd6 <CheckForAltNames+0x22>
}
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            len = altName->len;
 8001cd6:	e9d4 9802 	ldrd	r9, r8, [r4, #8]
        if (MatchDomainName(buf, len, domain)) {
 8001cda:	463a      	mov	r2, r7
 8001cdc:	4649      	mov	r1, r9
 8001cde:	4640      	mov	r0, r8
 8001ce0:	f7ff ff96 	bl	8001c10 <MatchDomainName>
 8001ce4:	b120      	cbz	r0, 8001cf0 <CheckForAltNames+0x3c>
            if (checkCN != NULL) {
 8001ce6:	b10d      	cbz	r5, 8001cec <CheckForAltNames+0x38>
                *checkCN = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	602b      	str	r3, [r5, #0]
            match = 1;
 8001cec:	2601      	movs	r6, #1
    return match;
 8001cee:	e7ef      	b.n	8001cd0 <CheckForAltNames+0x1c>
        else if (buf && (len >=1) && (buf[0] == '*')) {
 8001cf0:	f1b8 0f00 	cmp.w	r8, #0
 8001cf4:	d008      	beq.n	8001d08 <CheckForAltNames+0x54>
 8001cf6:	f1b9 0f00 	cmp.w	r9, #0
 8001cfa:	d005      	beq.n	8001d08 <CheckForAltNames+0x54>
 8001cfc:	f898 3000 	ldrb.w	r3, [r8]
            match = -1;
 8001d00:	2b2a      	cmp	r3, #42	; 0x2a
 8001d02:	bf08      	it	eq
 8001d04:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
        altName = altName->next;
 8001d08:	6824      	ldr	r4, [r4, #0]
 8001d0a:	e7e0      	b.n	8001cce <CheckForAltNames+0x1a>

08001d0c <DoVerifyCallback>:
{
 8001d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d10:	460e      	mov	r6, r1
 8001d12:	4615      	mov	r5, r2
 8001d14:	4698      	mov	r8, r3
    if (cm == NULL) {
 8001d16:	4682      	mov	sl, r0
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d075      	beq.n	8001e08 <DoVerifyCallback+0xfc>
    if (ret == 0) {
 8001d1c:	b172      	cbz	r2, 8001d3c <DoVerifyCallback+0x30>
        if ((ssl != NULL) && (!ssl->options.verifyNone)) {
 8001d1e:	b909      	cbnz	r1, 8001d24 <DoVerifyCallback+0x18>
    int verify_ok = 0, use_cb = 0;
 8001d20:	2700      	movs	r7, #0
 8001d22:	e005      	b.n	8001d30 <DoVerifyCallback+0x24>
        if ((ssl != NULL) && (!ssl->options.verifyNone)) {
 8001d24:	f996 3270 	ldrsb.w	r3, [r6, #624]	; 0x270
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	dbf9      	blt.n	8001d20 <DoVerifyCallback+0x14>
    if ((use_cb && (ssl != NULL) && ((ssl->verifyCallback != NULL)
 8001d2c:	6a37      	ldr	r7, [r6, #32]
 8001d2e:	b93f      	cbnz	r7, 8001d40 <DoVerifyCallback+0x34>
        || (cm->verifyCallback != NULL)
 8001d30:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8001d34:	b92b      	cbnz	r3, 8001d42 <DoVerifyCallback+0x36>
}
 8001d36:	4628      	mov	r0, r5
 8001d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        verify_ok = 1;
 8001d3c:	2701      	movs	r7, #1
 8001d3e:	e7f7      	b.n	8001d30 <DoVerifyCallback+0x24>
    int verify_ok = 0, use_cb = 0;
 8001d40:	2700      	movs	r7, #0
        store = (WOLFSSL_X509_STORE_CTX*)XMALLOC(
 8001d42:	2030      	movs	r0, #48	; 0x30
 8001d44:	f01b fe0e 	bl	801d964 <malloc>
        if (store == NULL) {
 8001d48:	4604      	mov	r4, r0
 8001d4a:	b140      	cbz	r0, 8001d5e <DoVerifyCallback+0x52>
        domain = (char*)XMALLOC(ASN_NAME_MAX, heap, DYNAMIC_TYPE_STRING);
 8001d4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d50:	f01b fe08 	bl	801d964 <malloc>
        if (domain == NULL) {
 8001d54:	4681      	mov	r9, r0
 8001d56:	b928      	cbnz	r0, 8001d64 <DoVerifyCallback+0x58>
            XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f01b fe0b 	bl	801d974 <free>
            return MEMORY_E;
 8001d5e:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8001d62:	e7e8      	b.n	8001d36 <DoVerifyCallback+0x2a>
        XMEMSET(store, 0, sizeof(WOLFSSL_X509_STORE_CTX));
 8001d64:	2230      	movs	r2, #48	; 0x30
 8001d66:	2100      	movs	r1, #0
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f01b fe43 	bl	801d9f4 <memset>
        domain[0] = '\0';
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f889 3000 	strb.w	r3, [r9]
        if (args->dCertInit && args->dCert && args->dCert->subjectCN) {
 8001d74:	f898 3020 	ldrb.w	r3, [r8, #32]
 8001d78:	075b      	lsls	r3, r3, #29
 8001d7a:	d50c      	bpl.n	8001d96 <DoVerifyCallback+0x8a>
 8001d7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001d80:	b14b      	cbz	r3, 8001d96 <DoVerifyCallback+0x8a>
 8001d82:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001d84:	b139      	cbz	r1, 8001d96 <DoVerifyCallback+0x8a>
            int subjectCNLen = args->dCert->subjectCNLen;
 8001d86:	f8d3 b068 	ldr.w	fp, [r3, #104]	; 0x68
            if (subjectCNLen > ASN_NAME_MAX-1)
 8001d8a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8001d8e:	dc21      	bgt.n	8001dd4 <DoVerifyCallback+0xc8>
            if (subjectCNLen > 0) {
 8001d90:	f1bb 0f00 	cmp.w	fp, #0
 8001d94:	dc20      	bgt.n	8001dd8 <DoVerifyCallback+0xcc>
        store->error_depth = args->certIdx;
 8001d96:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001d9a:	61e3      	str	r3, [r4, #28]
        store->discardSessionCerts = 0;
 8001d9c:	2300      	movs	r3, #0
        store->error = ret;
 8001d9e:	61a5      	str	r5, [r4, #24]
        store->discardSessionCerts = 0;
 8001da0:	6223      	str	r3, [r4, #32]
        store->domain = domain;
 8001da2:	f8c4 9010 	str.w	r9, [r4, #16]
        if (ssl != NULL) {
 8001da6:	b316      	cbz	r6, 8001dee <DoVerifyCallback+0xe2>
            if (ssl->verifyCbCtx != NULL) {
 8001da8:	69f3      	ldr	r3, [r6, #28]
 8001daa:	b1eb      	cbz	r3, 8001de8 <DoVerifyCallback+0xdc>
                store->userCtx = ssl->ctx->verifyCbCtx;
 8001dac:	6163      	str	r3, [r4, #20]
        store->certs = args->certs;
 8001dae:	f8d8 3000 	ldr.w	r3, [r8]
 8001db2:	62a3      	str	r3, [r4, #40]	; 0x28
        store->totalCerts = args->totalCerts;
 8001db4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001db8:	6263      	str	r3, [r4, #36]	; 0x24
        if (cm->verifyCallback != NULL) {
 8001dba:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8001dbe:	b363      	cbz	r3, 8001e1a <DoVerifyCallback+0x10e>
            store->userCtx = cm;
 8001dc0:	f8c4 a014 	str.w	sl, [r4, #20]
            if (cm->verifyCallback(verify_ok, store)) {
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	4638      	mov	r0, r7
 8001dc8:	4798      	blx	r3
 8001dca:	bb28      	cbnz	r0, 8001e18 <DoVerifyCallback+0x10c>
        if (ssl != NULL) {
 8001dcc:	b38e      	cbz	r6, 8001e32 <DoVerifyCallback+0x126>
                verifyFail = 1;
 8001dce:	f04f 0a01 	mov.w	sl, #1
 8001dd2:	e026      	b.n	8001e22 <DoVerifyCallback+0x116>
                subjectCNLen = ASN_NAME_MAX-1;
 8001dd4:	f04f 0bff 	mov.w	fp, #255	; 0xff
                XMEMCPY(domain, args->dCert->subjectCN, subjectCNLen);
 8001dd8:	465a      	mov	r2, fp
 8001dda:	4648      	mov	r0, r9
 8001ddc:	f01b fde2 	bl	801d9a4 <memcpy>
                domain[subjectCNLen] = '\0';
 8001de0:	2300      	movs	r3, #0
 8001de2:	f809 300b 	strb.w	r3, [r9, fp]
 8001de6:	e7d6      	b.n	8001d96 <DoVerifyCallback+0x8a>
                store->userCtx = ssl->ctx->verifyCbCtx;
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	e7de      	b.n	8001dac <DoVerifyCallback+0xa0>
            store->userCtx = cm;
 8001dee:	f8c4 a014 	str.w	sl, [r4, #20]
 8001df2:	e7dc      	b.n	8001dae <DoVerifyCallback+0xa2>
        if (verifyFail) {
 8001df4:	f1ba 0f00 	cmp.w	sl, #0
 8001df8:	d11b      	bne.n	8001e32 <DoVerifyCallback+0x126>
        XFREE(domain, heap, DYNAMIC_TYPE_STRING);
 8001dfa:	4648      	mov	r0, r9
 8001dfc:	f01b fdba 	bl	801d974 <free>
        XFREE(store, heap, DYNAMIC_TYPE_X509_STORE);
 8001e00:	4620      	mov	r0, r4
 8001e02:	f01b fdb7 	bl	801d974 <free>
 8001e06:	e796      	b.n	8001d36 <DoVerifyCallback+0x2a>
        return BAD_FUNC_ARG;
 8001e08:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8001e0c:	e793      	b.n	8001d36 <DoVerifyCallback+0x2a>
        if (verifyFail) {
 8001e0e:	f1ba 0f00 	cmp.w	sl, #0
 8001e12:	d10f      	bne.n	8001e34 <DoVerifyCallback+0x128>
 8001e14:	4655      	mov	r5, sl
 8001e16:	e7f0      	b.n	8001dfa <DoVerifyCallback+0xee>
                    ret = 0;
 8001e18:	2500      	movs	r5, #0
        if (ssl != NULL) {
 8001e1a:	2e00      	cmp	r6, #0
 8001e1c:	d0ed      	beq.n	8001dfa <DoVerifyCallback+0xee>
 8001e1e:	f04f 0a00 	mov.w	sl, #0
            if (ssl->verifyCallback) {
 8001e22:	6a33      	ldr	r3, [r6, #32]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0e5      	beq.n	8001df4 <DoVerifyCallback+0xe8>
                if (ssl->verifyCallback(verify_ok, store)) {
 8001e28:	4621      	mov	r1, r4
 8001e2a:	4638      	mov	r0, r7
 8001e2c:	4798      	blx	r3
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d1ed      	bne.n	8001e0e <DoVerifyCallback+0x102>
            if (ret == 0) {
 8001e32:	b90d      	cbnz	r5, 8001e38 <DoVerifyCallback+0x12c>
                ret = VERIFY_CERT_ERROR;
 8001e34:	f46f 75a4 	mvn.w	r5, #328	; 0x148
            args->verifyErr = 1;
 8001e38:	f898 3020 	ldrb.w	r3, [r8, #32]
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	f888 3020 	strb.w	r3, [r8, #32]
 8001e44:	e7d9      	b.n	8001dfa <DoVerifyCallback+0xee>
	...

08001e48 <DoFinished>:
{
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4617      	mov	r7, r2
    word32 finishedSz = (ssl->options.tls ? TLS_FINISHED_SZ : FINISHED_SZ);
 8001e4e:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
 8001e52:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e56:	bf14      	ite	ne
 8001e58:	250c      	movne	r5, #12
 8001e5a:	2524      	moveq	r5, #36	; 0x24
    if (finishedSz != size)
 8001e5c:	429d      	cmp	r5, r3
{
 8001e5e:	4608      	mov	r0, r1
 8001e60:	461e      	mov	r6, r3
 8001e62:	9906      	ldr	r1, [sp, #24]
    if (finishedSz != size)
 8001e64:	d133      	bne.n	8001ece <DoFinished+0x86>
    if (size != totalSz) {
 8001e66:	428d      	cmp	r5, r1
            if (*inOutIdx + size + ssl->keys.padSz > totalSz)
 8001e68:	683b      	ldr	r3, [r7, #0]
    if (size != totalSz) {
 8001e6a:	d005      	beq.n	8001e78 <DoFinished+0x30>
            if (*inOutIdx + size + ssl->keys.padSz > totalSz)
 8001e6c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8001e70:	441d      	add	r5, r3
 8001e72:	4415      	add	r5, r2
 8001e74:	428d      	cmp	r5, r1
 8001e76:	d82c      	bhi.n	8001ed2 <DoFinished+0x8a>
    if (sniff == NO_SNIFF) {
 8001e78:	9a07      	ldr	r2, [sp, #28]
 8001e7a:	b1aa      	cbz	r2, 8001ea8 <DoFinished+0x60>
    *inOutIdx += size + ssl->keys.padSz;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4433      	add	r3, r6
 8001e80:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
 8001e84:	4433      	add	r3, r6
 8001e86:	603b      	str	r3, [r7, #0]
    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8001e88:	f894 2270 	ldrb.w	r2, [r4, #624]	; 0x270
        if (!ssl->options.resuming) {
 8001e8c:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8001e90:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001e94:	2a10      	cmp	r2, #16
        if (!ssl->options.resuming) {
 8001e96:	f003 0308 	and.w	r3, r3, #8
    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8001e9a:	d10e      	bne.n	8001eba <DoFinished+0x72>
        ssl->options.serverState = SERVER_FINISHED_COMPLETE;
 8001e9c:	220a      	movs	r2, #10
 8001e9e:	f884 227c 	strb.w	r2, [r4, #636]	; 0x27c
        if (!ssl->options.resuming) {
 8001ea2:	b17b      	cbz	r3, 8001ec4 <DoFinished+0x7c>
    return 0;
 8001ea4:	2000      	movs	r0, #0
}
 8001ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (XMEMCMP(input + *inOutIdx, &ssl->hsHashes->verifyHashes,size) != 0){
 8001ea8:	68e1      	ldr	r1, [r4, #12]
 8001eaa:	4632      	mov	r2, r6
 8001eac:	4418      	add	r0, r3
 8001eae:	f01b fd69 	bl	801d984 <memcmp>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d0e2      	beq.n	8001e7c <DoFinished+0x34>
            return VERIFY_FINISHED_ERROR;
 8001eb6:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <DoFinished+0x90>)
 8001eb8:	e7f5      	b.n	8001ea6 <DoFinished+0x5e>
        ssl->options.clientState = CLIENT_FINISHED_COMPLETE;
 8001eba:	220f      	movs	r2, #15
 8001ebc:	f884 227d 	strb.w	r2, [r4, #637]	; 0x27d
        if (ssl->options.resuming) {
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <DoFinished+0x5c>
            ssl->options.handShakeState = HANDSHAKE_DONE;
 8001ec4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ec8:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
 8001ecc:	e7ea      	b.n	8001ea4 <DoFinished+0x5c>
        return BUFFER_ERROR;
 8001ece:	4803      	ldr	r0, [pc, #12]	; (8001edc <DoFinished+0x94>)
 8001ed0:	e7e9      	b.n	8001ea6 <DoFinished+0x5e>
                return BUFFER_E;
 8001ed2:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8001ed6:	e7e6      	b.n	8001ea6 <DoFinished+0x5e>
 8001ed8:	fffffed0 	.word	0xfffffed0
 8001edc:	fffffeb8 	.word	0xfffffeb8

08001ee0 <TimingPadVerify>:
{
 8001ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee4:	b0ad      	sub	sp, #180	; 0xb4
 8001ee6:	4688      	mov	r8, r1
 8001ee8:	f8dd 90d8 	ldr.w	r9, [sp, #216]	; 0xd8
    int checkSz = sz - 1;
 8001eec:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
{
 8001ef0:	4605      	mov	r5, r0
    byte paddingSz = data[sz - 1];
 8001ef2:	5dc8      	ldrb	r0, [r1, r7]
    byte good = ctMaskGT(paddingSz, sz - 1 - macSz);
 8001ef4:	1af9      	subs	r1, r7, r3

#ifndef WOLFSSL_NO_CT_OPS
/* Constant time - mask set when a > b. */
WC_MISC_STATIC WC_INLINE byte ctMaskGT(int a, int b)
{
    return (byte)((((word32)a - (word32)b - 1) >> 31) - 1);
 8001ef6:	43c9      	mvns	r1, r1
 8001ef8:	4401      	add	r1, r0
 8001efa:	0fc9      	lsrs	r1, r1, #31
 8001efc:	3901      	subs	r1, #1
 8001efe:	b2c9      	uxtb	r1, r1
 8001f00:	2fff      	cmp	r7, #255	; 0xff
 8001f02:	46bc      	mov	ip, r7
 8001f04:	9105      	str	r1, [sp, #20]
    if (checkSz > TLS_MAX_PAD_SZ)
 8001f06:	bfa8      	it	ge
 8001f08:	f04f 0cff 	movge.w	ip, #255	; 0xff
    for (i = 0; i < checkSz; i++) {
 8001f0c:	eb08 0a09 	add.w	sl, r8, r9
 8001f10:	2400      	movs	r4, #0
 8001f12:	45a4      	cmp	ip, r4
 8001f14:	dc41      	bgt.n	8001f9a <TimingPadVerify+0xba>
    ret = ssl->hmac(ssl, verify, input, pLen - macSz - padLen - 1, padLen,
 8001f16:	2101      	movs	r1, #1
 8001f18:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001f1c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8001f1e:	e9cd 2100 	strd	r2, r1, [sp]
 8001f22:	eba9 0303 	sub.w	r3, r9, r3
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	4642      	mov	r2, r8
 8001f2e:	a90c      	add	r1, sp, #48	; 0x30
 8001f30:	4628      	mov	r0, r5
 8001f32:	47a0      	blx	r4
    good |= MaskMac(input, pLen, ssl->specs.hash_size, verify);
 8001f34:	f895 414d 	ldrb.w	r4, [r5, #333]	; 0x14d
    int macEnd = sz - 1 - data[sz - 1];
 8001f38:	f818 3007 	ldrb.w	r3, [r8, r7]
    ret = ssl->hmac(ssl, verify, input, pLen - macSz - padLen - 1, padLen,
 8001f3c:	9007      	str	r0, [sp, #28]
    int scanStart = sz - 1 - TLS_MAX_PAD_SZ - macSz;
 8001f3e:	f5a9 7680 	sub.w	r6, r9, #256	; 0x100
 8001f42:	1b36      	subs	r6, r6, r4
    int macEnd = sz - 1 - data[sz - 1];
 8001f44:	1aff      	subs	r7, r7, r3
}

/* Constant time - mask set when a >= b. */
WC_MISC_STATIC WC_INLINE int ctMaskIntGTE(int a, int b)
{
    return (int)((((word32)a - (word32)b) >> 31) - 1);
 8001f46:	0ff3      	lsrs	r3, r6, #31
    int macStart = macEnd - macSz;
 8001f48:	eba7 0b04 	sub.w	fp, r7, r4
 8001f4c:	3b01      	subs	r3, #1
    scanStart &= ctMaskIntGTE(scanStart, 0);
 8001f4e:	401e      	ands	r6, r3
 8001f50:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8001f54:	3b01      	subs	r3, #1
    macStart &= ctMaskIntGTE(macStart, 0);
 8001f56:	ea0b 0b03 	and.w	fp, fp, r3
    if ((macSz & (macSz - 1)) == 0)
 8001f5a:	1e63      	subs	r3, r4, #1
 8001f5c:	ea14 0a03 	ands.w	sl, r4, r3
 8001f60:	9308      	str	r3, [sp, #32]
 8001f62:	d128      	bne.n	8001fb6 <TimingPadVerify+0xd6>
        r = (macSz - (scanStart - macStart)) & (macSz - 1);
 8001f64:	eba6 050b 	sub.w	r5, r6, fp
 8001f68:	1b65      	subs	r5, r4, r5
 8001f6a:	401d      	ands	r5, r3
    XMEMSET(mac, 0, macSz);
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	2100      	movs	r1, #0
 8001f70:	a81c      	add	r0, sp, #112	; 0x70
 8001f72:	f01b fd3f 	bl	801d9f4 <memset>
    for (i = scanStart; i < sz; i += macSz) {
 8001f76:	eba7 0309 	sub.w	r3, r7, r9
 8001f7a:	eba9 0006 	sub.w	r0, r9, r6
 8001f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f80:	45b1      	cmp	r9, r6
 8001f82:	dd46      	ble.n	8002012 <TimingPadVerify+0x132>
 8001f84:	eb08 0206 	add.w	r2, r8, r6
 8001f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f8a:	9206      	str	r2, [sp, #24]
    return (byte)((((word32)a - (word32)b) >> 31) - 1);
 8001f8c:	eba6 020b 	sub.w	r2, r6, fp
 8001f90:	4403      	add	r3, r0
 8001f92:	af1c      	add	r7, sp, #112	; 0x70
        for (j = 0; j < macSz && j + i < sz; j++) {
 8001f94:	2100      	movs	r1, #0
 8001f96:	920a      	str	r2, [sp, #40]	; 0x28
 8001f98:	e032      	b.n	8002000 <TimingPadVerify+0x120>
}

/* Constant time - mask set when a <= b. */
WC_MISC_STATIC WC_INLINE byte ctMaskLTE(int a, int b)
{
    return (byte)((((word32)b - (word32)a) >> 31) - 1);
 8001f9a:	1b01      	subs	r1, r0, r4
        good |= mask & (data[sz - 1 - i] ^ paddingSz);
 8001f9c:	f81a ed01 	ldrb.w	lr, [sl, #-1]!
 8001fa0:	9e05      	ldr	r6, [sp, #20]
 8001fa2:	0fc9      	lsrs	r1, r1, #31
 8001fa4:	3901      	subs	r1, #1
 8001fa6:	ea80 0e0e 	eor.w	lr, r0, lr
 8001faa:	ea01 010e 	and.w	r1, r1, lr
 8001fae:	430e      	orrs	r6, r1
 8001fb0:	9605      	str	r6, [sp, #20]
    for (i = 0; i < checkSz; i++) {
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	e7ad      	b.n	8001f12 <TimingPadVerify+0x32>
    else if (macSz == WC_SHA_DIGEST_SIZE)
 8001fb6:	2c14      	cmp	r4, #20
        r = (macSz - (scanStart - macStart)) % WC_SHA_DIGEST_SIZE;
 8001fb8:	bf05      	ittet	eq
 8001fba:	eba6 050b 	subeq.w	r5, r6, fp
 8001fbe:	f1c5 0514 	rsbeq	r5, r5, #20
    int r = 0;
 8001fc2:	2500      	movne	r5, #0
        r = (macSz - (scanStart - macStart)) % WC_SHA_DIGEST_SIZE;
 8001fc4:	fb95 f2f4 	sdiveq	r2, r5, r4
 8001fc8:	bf08      	it	eq
 8001fca:	fb04 5512 	mlseq	r5, r4, r2, r5
 8001fce:	e7cd      	b.n	8001f6c <TimingPadVerify+0x8c>
            mac[j] |= started & notEnded & data[i + j];
 8001fd0:	783a      	ldrb	r2, [r7, #0]
 8001fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8001fd4:	9a06      	ldr	r2, [sp, #24]
 8001fd6:	f812 cb01 	ldrb.w	ip, [r2], #1
 8001fda:	9206      	str	r2, [sp, #24]
    return (byte)((((word32)a - (word32)b) >> 31) - 1);
 8001fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return (byte)((((word32)b - (word32)a - 1) >> 31) - 1);
 8001fde:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
    return (byte)((((word32)a - (word32)b) >> 31) - 1);
 8001fe2:	440a      	add	r2, r1
 8001fe4:	0fd2      	lsrs	r2, r2, #31
    return (byte)((((word32)b - (word32)a - 1) >> 31) - 1);
 8001fe6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    return (byte)((((word32)a - (word32)b) >> 31) - 1);
 8001fea:	3a01      	subs	r2, #1
 8001fec:	ea0c 0c0e 	and.w	ip, ip, lr
 8001ff0:	ea02 0c0c 	and.w	ip, r2, ip
 8001ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ff6:	ea42 0c0c 	orr.w	ip, r2, ip
 8001ffa:	f807 cb01 	strb.w	ip, [r7], #1
        for (j = 0; j < macSz && j + i < sz; j++) {
 8001ffe:	3101      	adds	r1, #1
 8002000:	428c      	cmp	r4, r1
 8002002:	dd03      	ble.n	800200c <TimingPadVerify+0x12c>
 8002004:	4281      	cmp	r1, r0
 8002006:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800200a:	d1e1      	bne.n	8001fd0 <TimingPadVerify+0xf0>
    for (i = scanStart; i < sz; i += macSz) {
 800200c:	4426      	add	r6, r4
 800200e:	1b00      	subs	r0, r0, r4
 8002010:	e7b6      	b.n	8001f80 <TimingPadVerify+0xa0>
    if ((macSz & (macSz - 1)) == 0) {
 8002012:	f1ba 0f00 	cmp.w	sl, #0
 8002016:	d12a      	bne.n	800206e <TimingPadVerify+0x18e>
 8002018:	ae0c      	add	r6, sp, #48	; 0x30
    unsigned char good = 0;
 800201a:	4652      	mov	r2, sl
        for (i = 0; i < macSz; i++)
 800201c:	4554      	cmp	r4, sl
 800201e:	dc15      	bgt.n	800204c <TimingPadVerify+0x16c>
    good |= MaskMac(input, pLen, ssl->specs.hash_size, verify);
 8002020:	9b05      	ldr	r3, [sp, #20]
 8002022:	431a      	orrs	r2, r3
    good = (byte)~(word32)good;
 8002024:	43d2      	mvns	r2, r2
    good &= good >> 4;
 8002026:	f3c2 1303 	ubfx	r3, r2, #4, #4
 800202a:	401a      	ands	r2, r3
    good &= good >> 2;
 800202c:	ea02 0292 	and.w	r2, r2, r2, lsr #2
    ret -= 1 - good;
 8002030:	ea12 0352 	ands.w	r3, r2, r2, lsr #1
    if (ret != 0) {
 8002034:	9a07      	ldr	r2, [sp, #28]
    ret -= 1 - good;
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
    if (ret != 0) {
 800203c:	4293      	cmp	r3, r2
}
 800203e:	bf14      	ite	ne
 8002040:	f46f 7098 	mvnne.w	r0, #304	; 0x130
 8002044:	2000      	moveq	r0, #0
 8002046:	b02d      	add	sp, #180	; 0xb4
 8002048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            good |= expMac[i] ^ mac[(i + r) & (macSz - 1)];
 800204c:	9b08      	ldr	r3, [sp, #32]
 800204e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002052:	eb0a 0105 	add.w	r1, sl, r5
 8002056:	4019      	ands	r1, r3
 8002058:	f101 03b0 	add.w	r3, r1, #176	; 0xb0
 800205c:	eb0d 0103 	add.w	r1, sp, r3
        for (i = 0; i < macSz; i++)
 8002060:	f10a 0a01 	add.w	sl, sl, #1
            good |= expMac[i] ^ mac[(i + r) & (macSz - 1)];
 8002064:	f811 1c40 	ldrb.w	r1, [r1, #-64]
 8002068:	4041      	eors	r1, r0
 800206a:	430a      	orrs	r2, r1
        for (i = 0; i < macSz; i++)
 800206c:	e7d6      	b.n	800201c <TimingPadVerify+0x13c>
    else if (macSz == WC_SHA_DIGEST_SIZE) {
 800206e:	2c14      	cmp	r4, #20
 8002070:	d114      	bne.n	800209c <TimingPadVerify+0x1bc>
    unsigned char good = 0;
 8002072:	2200      	movs	r2, #0
 8002074:	ae0c      	add	r6, sp, #48	; 0x30
        for (i = 0; i < macSz; i++)
 8002076:	4611      	mov	r1, r2
            good |= expMac[i] ^ mac[(i + r) % WC_SHA_DIGEST_SIZE];
 8002078:	194b      	adds	r3, r1, r5
 800207a:	fb93 f7f4 	sdiv	r7, r3, r4
 800207e:	fb04 3317 	mls	r3, r4, r7, r3
 8002082:	33b0      	adds	r3, #176	; 0xb0
 8002084:	446b      	add	r3, sp
 8002086:	f816 0b01 	ldrb.w	r0, [r6], #1
 800208a:	f813 3c40 	ldrb.w	r3, [r3, #-64]
        for (i = 0; i < macSz; i++)
 800208e:	3101      	adds	r1, #1
            good |= expMac[i] ^ mac[(i + r) % WC_SHA_DIGEST_SIZE];
 8002090:	4043      	eors	r3, r0
        for (i = 0; i < macSz; i++)
 8002092:	2914      	cmp	r1, #20
            good |= expMac[i] ^ mac[(i + r) % WC_SHA_DIGEST_SIZE];
 8002094:	ea42 0203 	orr.w	r2, r2, r3
        for (i = 0; i < macSz; i++)
 8002098:	d1ee      	bne.n	8002078 <TimingPadVerify+0x198>
 800209a:	e7c1      	b.n	8002020 <TimingPadVerify+0x140>
    unsigned char good = 0;
 800209c:	2200      	movs	r2, #0
 800209e:	e7bf      	b.n	8002020 <TimingPadVerify+0x140>

080020a0 <BuildCertHashes>:
{
 80020a0:	b538      	push	{r3, r4, r5, lr}
    if (ssl->options.tls) {
 80020a2:	f890 3271 	ldrb.w	r3, [r0, #625]	; 0x271
 80020a6:	065b      	lsls	r3, r3, #25
{
 80020a8:	4604      	mov	r4, r0
 80020aa:	460d      	mov	r5, r1
    if (ssl->options.tls) {
 80020ac:	d401      	bmi.n	80020b2 <BuildCertHashes+0x12>
    int ret = 0;
 80020ae:	2000      	movs	r0, #0
}
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
        ret = wc_ShaGetHash(&ssl->hsHashes->hashSha, hashes->sha);
 80020b2:	68c0      	ldr	r0, [r0, #12]
 80020b4:	30e8      	adds	r0, #232	; 0xe8
 80020b6:	f00d fd76 	bl	800fba6 <wc_ShaGetHash>
        if (ret != 0)
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d1f8      	bne.n	80020b0 <BuildCertHashes+0x10>
        if (IsAtLeastTLSv1_2(ssl)) {
 80020be:	4620      	mov	r0, r4
 80020c0:	f7fe fc58 	bl	8000974 <IsAtLeastTLSv1_2>
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d0f2      	beq.n	80020ae <BuildCertHashes+0xe>
                ret = wc_Sha256GetHash(&ssl->hsHashes->hashSha256,
 80020c8:	68e0      	ldr	r0, [r4, #12]
 80020ca:	f105 0114 	add.w	r1, r5, #20
 80020ce:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 80020d2:	f00e f877 	bl	80101c4 <wc_Sha256GetHash>
                if (ret != 0)
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d1ea      	bne.n	80020b0 <BuildCertHashes+0x10>
                ret = wc_Sha512GetHash(&ssl->hsHashes->hashSha512,
 80020da:	68e0      	ldr	r0, [r4, #12]
 80020dc:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80020e0:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
}
 80020e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret = wc_Sha512GetHash(&ssl->hsHashes->hashSha512,
 80020e8:	f010 bb06 	b.w	80126f8 <wc_Sha512GetHash>

080020ec <FreeBuildMsgArgs>:
    if (args
 80020ec:	b131      	cbz	r1, 80020fc <FreeBuildMsgArgs+0x10>
        if (args->iv && (args->iv != args->staticIvBuffer)) {
 80020ee:	69c8      	ldr	r0, [r1, #28]
 80020f0:	b120      	cbz	r0, 80020fc <FreeBuildMsgArgs+0x10>
 80020f2:	3120      	adds	r1, #32
 80020f4:	4288      	cmp	r0, r1
 80020f6:	d001      	beq.n	80020fc <FreeBuildMsgArgs+0x10>
            XFREE(args->iv, ssl->heap, DYNAMIC_TYPE_SALT);
 80020f8:	f01b bc3c 	b.w	801d974 <free>
}
 80020fc:	4770      	bx	lr
	...

08002100 <BuildMessage>:
{
 8002100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002104:	b093      	sub	sp, #76	; 0x4c
 8002106:	e9dd 8a1c 	ldrd	r8, sl, [sp, #112]	; 0x70
 800210a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800210c:	460e      	mov	r6, r1
 800210e:	4615      	mov	r5, r2
 8002110:	4699      	mov	r9, r3
    if (ssl == NULL) {
 8002112:	4604      	mov	r4, r0
 8002114:	b110      	cbz	r0, 800211c <BuildMessage+0x1c>
    if (!sizeOnly && (output == NULL || input == NULL) ) {
 8002116:	b927      	cbnz	r7, 8002122 <BuildMessage+0x22>
 8002118:	b101      	cbz	r1, 800211c <BuildMessage+0x1c>
 800211a:	b933      	cbnz	r3, 800212a <BuildMessage+0x2a>
        return BAD_FUNC_ARG;
 800211c:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8002120:	e038      	b.n	8002194 <BuildMessage+0x94>
    if (sizeOnly && (output || input) ) {
 8002122:	2900      	cmp	r1, #0
 8002124:	d1fa      	bne.n	800211c <BuildMessage+0x1c>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f8      	bne.n	800211c <BuildMessage+0x1c>
        ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 800212a:	f04f 0b00 	mov.w	fp, #0
        XMEMSET(args, 0, sizeof(BuildMsgArgs));
 800212e:	2230      	movs	r2, #48	; 0x30
        ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 8002130:	f884 b284 	strb.w	fp, [r4, #644]	; 0x284
        XMEMSET(args, 0, sizeof(BuildMsgArgs));
 8002134:	4659      	mov	r1, fp
 8002136:	a806      	add	r0, sp, #24
 8002138:	f01b fc5c 	bl	801d9f4 <memset>
        args->idx  = RECORD_HEADER_SZ;
 800213c:	2205      	movs	r2, #5
        args->headerSz = RECORD_HEADER_SZ;
 800213e:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
    switch (ssl->options.buildMsgState) {
 8002142:	f894 2284 	ldrb.w	r2, [r4, #644]	; 0x284
        args->sz = RECORD_HEADER_SZ + inSz;
 8002146:	f108 0305 	add.w	r3, r8, #5
 800214a:	9307      	str	r3, [sp, #28]
    switch (ssl->options.buildMsgState) {
 800214c:	2a04      	cmp	r2, #4
 800214e:	d806      	bhi.n	800215e <BuildMessage+0x5e>
 8002150:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002154:	000c0009 	.word	0x000c0009
 8002158:	00de00cc 	.word	0x00de00cc
 800215c:	00f8      	.short	0x00f8
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 800215e:	f884 b284 	strb.w	fp, [r4, #644]	; 0x284
        ret = args->sz;
 8002162:	9d07      	ldr	r5, [sp, #28]
 8002164:	e012      	b.n	800218c <BuildMessage+0x8c>
            ssl->options.buildMsgState = BUILD_MSG_SIZE;
 8002166:	2201      	movs	r2, #1
 8002168:	f884 2284 	strb.w	r2, [r4, #644]	; 0x284
            args->digestSz = ssl->specs.hash_size;
 800216c:	f894 014d 	ldrb.w	r0, [r4, #333]	; 0x14d
            if (ssl->specs.cipher_type == block) {
 8002170:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
            args->digestSz = ssl->specs.hash_size;
 8002174:	9006      	str	r0, [sp, #24]
            args->sz += args->digestSz;
 8002176:	4403      	add	r3, r0
            if (ssl->specs.cipher_type == block) {
 8002178:	2a01      	cmp	r2, #1
            args->sz += args->digestSz;
 800217a:	9307      	str	r3, [sp, #28]
            if (ssl->specs.cipher_type == block) {
 800217c:	d131      	bne.n	80021e2 <BuildMessage+0xe2>
                word32 blockSz = ssl->specs.block_size;
 800217e:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
                if (blockSz == 0) {
 8002182:	b958      	cbnz	r0, 800219c <BuildMessage+0x9c>
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 8002184:	f884 0284 	strb.w	r0, [r4, #644]	; 0x284
                    ERROR_OUT(BAD_STATE_E, exit_buildmsg);
 8002188:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
    FreeBuildMsgArgs(ssl, args);
 800218c:	a906      	add	r1, sp, #24
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff ffac 	bl	80020ec <FreeBuildMsgArgs>
}
 8002194:	4628      	mov	r0, r5
 8002196:	b013      	add	sp, #76	; 0x4c
 8002198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (ssl->options.tls1_1) {
 800219c:	f994 2271 	ldrsb.w	r2, [r4, #625]	; 0x271
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	da0a      	bge.n	80021ba <BuildMessage+0xba>
                    args->sz  += args->ivSz;
 80021a4:	4403      	add	r3, r0
                    if (args->ivSz > MAX_IV_SZ)
 80021a6:	2810      	cmp	r0, #16
                    args->ivSz = blockSz;
 80021a8:	900c      	str	r0, [sp, #48]	; 0x30
                    args->sz  += args->ivSz;
 80021aa:	9307      	str	r3, [sp, #28]
                    if (args->ivSz > MAX_IV_SZ)
 80021ac:	d905      	bls.n	80021ba <BuildMessage+0xba>
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
                        ERROR_OUT(BUFFER_E, exit_buildmsg);
 80021b4:	f06f 0583 	mvn.w	r5, #131	; 0x83
 80021b8:	e7e8      	b.n	800218c <BuildMessage+0x8c>
                args->sz += 1;       /* pad byte */
 80021ba:	9b07      	ldr	r3, [sp, #28]
                    args->pad = (args->sz - args->headerSz) % blockSz;
 80021bc:	1f1a      	subs	r2, r3, #4
 80021be:	fbb2 f1f0 	udiv	r1, r2, r0
 80021c2:	fb00 2211 	mls	r2, r0, r1, r2
                if (args->pad != 0)
 80021c6:	b94a      	cbnz	r2, 80021dc <BuildMessage+0xdc>
                    args->pad = (args->sz - args->headerSz) % blockSz;
 80021c8:	9208      	str	r2, [sp, #32]
                args->sz += args->pad;
 80021ca:	9a08      	ldr	r2, [sp, #32]
 80021cc:	4413      	add	r3, r2
 80021ce:	3301      	adds	r3, #1
                args->sz += (args->ivSz + ssl->specs.aead_mac_size - args->digestSz);
 80021d0:	9307      	str	r3, [sp, #28]
            if (sizeOnly)
 80021d2:	b1af      	cbz	r7, 8002200 <BuildMessage+0x100>
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
    if (ret == 0) {
 80021da:	e7c2      	b.n	8002162 <BuildMessage+0x62>
                    args->pad = blockSz - args->pad;
 80021dc:	1a80      	subs	r0, r0, r2
 80021de:	9008      	str	r0, [sp, #32]
 80021e0:	e7f3      	b.n	80021ca <BuildMessage+0xca>
            if (ssl->specs.cipher_type == aead) {
 80021e2:	2a02      	cmp	r2, #2
 80021e4:	d1f5      	bne.n	80021d2 <BuildMessage+0xd2>
                if (ssl->specs.bulk_cipher_algorithm != wolfssl_chacha)
 80021e6:	f894 2148 	ldrb.w	r2, [r4, #328]	; 0x148
 80021ea:	2a09      	cmp	r2, #9
                    args->ivSz = AESGCM_EXP_IV_SZ;
 80021ec:	bf1c      	itt	ne
 80021ee:	2208      	movne	r2, #8
 80021f0:	920c      	strne	r2, [sp, #48]	; 0x30
                args->sz += (args->ivSz + ssl->specs.aead_mac_size - args->digestSz);
 80021f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021f4:	f8b4 2146 	ldrh.w	r2, [r4, #326]	; 0x146
 80021f8:	440a      	add	r2, r1
 80021fa:	4413      	add	r3, r2
 80021fc:	1a1b      	subs	r3, r3, r0
 80021fe:	e7e7      	b.n	80021d0 <BuildMessage+0xd0>
            if (args->sz > (word32)outSz) {
 8002200:	9b07      	ldr	r3, [sp, #28]
 8002202:	429d      	cmp	r5, r3
 8002204:	d3d3      	bcc.n	80021ae <BuildMessage+0xae>
            if (args->ivSz > 0) {
 8002206:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002208:	2800      	cmp	r0, #0
 800220a:	d156      	bne.n	80022ba <BuildMessage+0x1ba>
            args->size = (word16)(args->sz - args->headerSz);    /* include mac and digest */
 800220c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800220e:	9907      	ldr	r1, [sp, #28]
 8002210:	1ac9      	subs	r1, r1, r3
 8002212:	b289      	uxth	r1, r1
            AddRecordHeader(output, args->size, (byte)type, ssl, epochOrder);
 8002214:	fa5f f28a 	uxtb.w	r2, sl
 8002218:	4623      	mov	r3, r4
 800221a:	4630      	mov	r0, r6
            args->size = (word16)(args->sz - args->headerSz);    /* include mac and digest */
 800221c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
            AddRecordHeader(output, args->size, (byte)type, ssl, epochOrder);
 8002220:	f7fe fb01 	bl	8000826 <AddRecordHeader.constprop.0>
            if (args->ivSz > 0) {
 8002224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002226:	b172      	cbz	r2, 8002246 <BuildMessage+0x146>
                XMEMCPY(output + args->idx, args->iv,
 8002228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800222a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800222c:	2a10      	cmp	r2, #16
 800222e:	bf28      	it	cs
 8002230:	2210      	movcs	r2, #16
 8002232:	4430      	add	r0, r6
 8002234:	f01b fbb6 	bl	801d9a4 <memcpy>
                args->idx += min(args->ivSz, MAX_IV_SZ);
 8002238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800223a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800223c:	2a10      	cmp	r2, #16
 800223e:	bf94      	ite	ls
 8002240:	189b      	addls	r3, r3, r2
 8002242:	3310      	addhi	r3, #16
 8002244:	9309      	str	r3, [sp, #36]	; 0x24
            XMEMCPY(output + args->idx, input, inSz);
 8002246:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002248:	4642      	mov	r2, r8
 800224a:	4649      	mov	r1, r9
 800224c:	4430      	add	r0, r6
 800224e:	f01b fba9 	bl	801d9a4 <memcpy>
            args->idx += inSz;
 8002252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002254:	4443      	add	r3, r8
 8002256:	9309      	str	r3, [sp, #36]	; 0x24
            ssl->options.buildMsgState = BUILD_MSG_HASH;
 8002258:	2302      	movs	r3, #2
 800225a:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
            if (type == handshake && hashOutput) {
 800225e:	f1ba 0f16 	cmp.w	sl, #22
 8002262:	d047      	beq.n	80022f4 <BuildMessage+0x1f4>
            if (ssl->specs.cipher_type == block) {
 8002264:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10b      	bne.n	8002284 <BuildMessage+0x184>
                    tmpIdx = args->idx + args->digestSz;
 800226c:	9a06      	ldr	r2, [sp, #24]
 800226e:	9b09      	ldr	r3, [sp, #36]	; 0x24
                for (i = 0; i <= args->pad; i++)
 8002270:	9908      	ldr	r1, [sp, #32]
                    tmpIdx = args->idx + args->digestSz;
 8002272:	4413      	add	r3, r2
                    output[tmpIdx++] = (byte)args->pad; /* pad byte gets pad value */
 8002274:	b2c8      	uxtb	r0, r1
 8002276:	4433      	add	r3, r6
                for (i = 0; i <= args->pad; i++)
 8002278:	2200      	movs	r2, #0
 800227a:	3201      	adds	r2, #1
 800227c:	4291      	cmp	r1, r2
                    output[tmpIdx++] = (byte)args->pad; /* pad byte gets pad value */
 800227e:	f803 0b01 	strb.w	r0, [r3], #1
                for (i = 0; i <= args->pad; i++)
 8002282:	d2fa      	bcs.n	800227a <BuildMessage+0x17a>
            ssl->options.buildMsgState = BUILD_MSG_VERIFY_MAC;
 8002284:	2303      	movs	r3, #3
 8002286:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
            if (ssl->specs.cipher_type != aead
 800228a:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
 800228e:	2b02      	cmp	r3, #2
 8002290:	d142      	bne.n	8002318 <BuildMessage+0x218>
            ssl->options.buildMsgState = BUILD_MSG_ENCRYPT;
 8002292:	2304      	movs	r3, #4
 8002294:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
    switch (ssl->encrypt.state) {
 8002298:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
                ret = Encrypt(ssl, output + args->headerSz,
 800229c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800229e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    switch (ssl->encrypt.state) {
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d061      	beq.n	800236a <BuildMessage+0x26a>
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	f04f 0000 	mov.w	r0, #0
 80022ac:	f000 80e6 	beq.w	800247c <BuildMessage+0x37c>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d04b      	beq.n	800234c <BuildMessage+0x24c>
    ssl->encrypt.state = CIPHER_STATE_BEGIN;
 80022b4:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
            if (ret != 0) {
 80022b8:	e78c      	b.n	80021d4 <BuildMessage+0xd4>
                if (args->ivSz > sizeof(args->staticIvBuffer)) {
 80022ba:	2810      	cmp	r0, #16
 80022bc:	d908      	bls.n	80022d0 <BuildMessage+0x1d0>
                    args->iv = (byte*)XMALLOC(args->ivSz, ssl->heap,
 80022be:	f01b fb51 	bl	801d964 <malloc>
 80022c2:	900d      	str	r0, [sp, #52]	; 0x34
                    if (args->iv == NULL) {
 80022c4:	b930      	cbnz	r0, 80022d4 <BuildMessage+0x1d4>
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 80022c6:	f884 7284 	strb.w	r7, [r4, #644]	; 0x284
                        ERROR_OUT(MEMORY_E, exit_buildmsg);
 80022ca:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 80022ce:	e75d      	b.n	800218c <BuildMessage+0x8c>
                    args->iv = args->staticIvBuffer;
 80022d0:	ab0e      	add	r3, sp, #56	; 0x38
 80022d2:	930d      	str	r3, [sp, #52]	; 0x34
                ret = wc_RNG_GenerateBlock(ssl->rng, args->iv, args->ivSz);
 80022d4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 80022d8:	69a0      	ldr	r0, [r4, #24]
 80022da:	f00c fc29 	bl	800eb30 <wc_RNG_GenerateBlock>
                if (ret != 0)
 80022de:	4605      	mov	r5, r0
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d093      	beq.n	800220c <BuildMessage+0x10c>
    ssl->options.buildMsgState = BUILD_MSG_BEGIN;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f884 3284 	strb.w	r3, [r4, #644]	; 0x284
    if (ret == 0) {
 80022ea:	e74f      	b.n	800218c <BuildMessage+0x8c>
            if (sizeOnly)
 80022ec:	2f00      	cmp	r7, #0
 80022ee:	f47f af71 	bne.w	80021d4 <BuildMessage+0xd4>
 80022f2:	e7b4      	b.n	800225e <BuildMessage+0x15e>
            if (type == handshake && hashOutput) {
 80022f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0b4      	beq.n	8002264 <BuildMessage+0x164>
                ret = HashOutput(ssl, output, args->headerSz + inSz, args->ivSz);
 80022fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022fe:	4442      	add	r2, r8
 8002300:	4631      	mov	r1, r6
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff f9b6 	bl	8001674 <HashOutput>
                if (ret != 0)
 8002308:	4605      	mov	r5, r0
 800230a:	2800      	cmp	r0, #0
 800230c:	d0aa      	beq.n	8002264 <BuildMessage+0x164>
 800230e:	e7e9      	b.n	80022e4 <BuildMessage+0x1e4>
            if (sizeOnly)
 8002310:	2f00      	cmp	r7, #0
 8002312:	f47f af5f 	bne.w	80021d4 <BuildMessage+0xd4>
 8002316:	e7b8      	b.n	800228a <BuildMessage+0x18a>
                                args->headerSz + args->ivSz, inSz, -1, type, 0, epochOrder);
 8002318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800231a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    ret = ssl->hmac(ssl, output + args->idx, output +
 800231c:	9909      	ldr	r1, [sp, #36]	; 0x24
                                args->headerSz + args->ivSz, inSz, -1, type, 0, epochOrder);
 800231e:	441a      	add	r2, r3
                    ret = ssl->hmac(ssl, output + args->idx, output +
 8002320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002322:	9303      	str	r3, [sp, #12]
 8002324:	2300      	movs	r3, #0
 8002326:	e9cd a301 	strd	sl, r3, [sp, #4]
 800232a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8002332:	4643      	mov	r3, r8
 8002334:	4432      	add	r2, r6
 8002336:	4431      	add	r1, r6
 8002338:	4620      	mov	r0, r4
 800233a:	47a8      	blx	r5
            if (ret != 0)
 800233c:	4605      	mov	r5, r0
 800233e:	2800      	cmp	r0, #0
 8002340:	d1d0      	bne.n	80022e4 <BuildMessage+0x1e4>
 8002342:	e7a6      	b.n	8002292 <BuildMessage+0x192>
            if (sizeOnly)
 8002344:	2f00      	cmp	r7, #0
 8002346:	f47f af45 	bne.w	80021d4 <BuildMessage+0xd4>
 800234a:	e7a5      	b.n	8002298 <BuildMessage+0x198>
            if (ssl->encrypt.setup == 0) {
 800234c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8095 	beq.w	8002480 <BuildMessage+0x380>
            if (ssl->specs.bulk_cipher_algorithm == wolfssl_aes_ccm ||
 8002356:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 800235a:	1fda      	subs	r2, r3, #7
 800235c:	2a01      	cmp	r2, #1
 800235e:	d910      	bls.n	8002382 <BuildMessage+0x282>
                ssl->specs.bulk_cipher_algorithm == wolfssl_aes_gcm ||
 8002360:	2b0e      	cmp	r3, #14
 8002362:	d00e      	beq.n	8002382 <BuildMessage+0x282>
            ssl->encrypt.state = CIPHER_STATE_DO;
 8002364:	2301      	movs	r3, #1
 8002366:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (input == NULL) {
 800236a:	19f7      	adds	r7, r6, r7
    switch (ssl->specs.bulk_cipher_algorithm) {
 800236c:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
    if (input == NULL) {
 8002370:	f000 8081 	beq.w	8002476 <BuildMessage+0x376>
    switch (ssl->specs.bulk_cipher_algorithm) {
 8002374:	2b06      	cmp	r3, #6
 8002376:	d077      	beq.n	8002468 <BuildMessage+0x368>
 8002378:	d817      	bhi.n	80023aa <BuildMessage+0x2aa>
 800237a:	2b04      	cmp	r3, #4
 800237c:	d051      	beq.n	8002422 <BuildMessage+0x322>
 800237e:	4d41      	ldr	r5, [pc, #260]	; (8002484 <BuildMessage+0x384>)
 8002380:	e056      	b.n	8002430 <BuildMessage+0x330>
                if (ssl->encrypt.additional == NULL)
 8002382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002384:	b91b      	cbnz	r3, 800238e <BuildMessage+0x28e>
                    ssl->encrypt.additional = (byte*)XMALLOC(AEAD_AUTH_DATA_SZ,
 8002386:	200d      	movs	r0, #13
 8002388:	f01b faec 	bl	801d964 <malloc>
 800238c:	65a0      	str	r0, [r4, #88]	; 0x58
                if (ssl->encrypt.nonce == NULL) {
 800238e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002390:	b91b      	cbnz	r3, 800239a <BuildMessage+0x29a>
                    ssl->encrypt.nonce = (byte*)XMALLOC(AESGCM_NONCE_SZ,
 8002392:	200c      	movs	r0, #12
 8002394:	f01b fae6 	bl	801d964 <malloc>
 8002398:	65e0      	str	r0, [r4, #92]	; 0x5c
                if (ssl->encrypt.additional == NULL ||
 800239a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800239c:	b113      	cbz	r3, 80023a4 <BuildMessage+0x2a4>
 800239e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1df      	bne.n	8002364 <BuildMessage+0x264>
                    return MEMORY_E;
 80023a4:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 80023a8:	e057      	b.n	800245a <BuildMessage+0x35a>
    switch (ssl->specs.bulk_cipher_algorithm) {
 80023aa:	3b07      	subs	r3, #7
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d8e6      	bhi.n	800237e <BuildMessage+0x27e>
            XMEMSET(ssl->encrypt.additional, 0, AEAD_AUTH_DATA_SZ);
 80023b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023b2:	220d      	movs	r2, #13
 80023b4:	2100      	movs	r1, #0
 80023b6:	f01b fb1d 	bl	801d9f4 <memset>
            WriteSEQ(ssl, CUR_ORDER, ssl->encrypt.additional);
 80023ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80023bc:	4620      	mov	r0, r4
 80023be:	2100      	movs	r1, #0
 80023c0:	f7ff f8d3 	bl	800156a <WriteSEQ>
            XMEMCPY(ssl->encrypt.additional + AEAD_TYPE_OFFSET,
 80023c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023c6:	1f79      	subs	r1, r7, #5
 80023c8:	2203      	movs	r2, #3
 80023ca:	3008      	adds	r0, #8
 80023cc:	f01b faea 	bl	801d9a4 <memcpy>
            c16toa(sz - AESGCM_EXP_IV_SZ - ssl->specs.aead_mac_size,
 80023d0:	f8b4 2146 	ldrh.w	r2, [r4, #326]	; 0x146
                                ssl->encrypt.additional + AEAD_LEN_OFFSET);
 80023d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
            c16toa(sz - AESGCM_EXP_IV_SZ - ssl->specs.aead_mac_size,
 80023d6:	f1a8 0008 	sub.w	r0, r8, #8
 80023da:	1a82      	subs	r2, r0, r2
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80023dc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80023e0:	72d9      	strb	r1, [r3, #11]
    c[1] =  (byte)(wc_u16       & 0xff);
 80023e2:	731a      	strb	r2, [r3, #12]
                ret = aes_auth_fn(ssl->encrypt.aes,
 80023e4:	210d      	movs	r1, #13
                        sz - AESGCM_EXP_IV_SZ - ssl->specs.aead_mac_size,
 80023e6:	f8b4 3146 	ldrh.w	r3, [r4, #326]	; 0x146
                ret = aes_auth_fn(ssl->encrypt.aes,
 80023ea:	9105      	str	r1, [sp, #20]
 80023ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
                        out + sz - ssl->specs.aead_mac_size,
 80023ee:	eba8 0803 	sub.w	r8, r8, r3
                ret = aes_auth_fn(ssl->encrypt.aes,
 80023f2:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80023f6:	eb07 0108 	add.w	r1, r7, r8
 80023fa:	9102      	str	r1, [sp, #8]
 80023fc:	210c      	movs	r1, #12
 80023fe:	9101      	str	r1, [sp, #4]
 8002400:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002402:	9100      	str	r1, [sp, #0]
 8002404:	f107 0208 	add.w	r2, r7, #8
 8002408:	1ac3      	subs	r3, r0, r3
 800240a:	4611      	mov	r1, r2
 800240c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800240e:	f009 fa99 	bl	800b944 <wc_AesGcmEncrypt_ex>
            XMEMCPY(out,
 8002412:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                ret = aes_auth_fn(ssl->encrypt.aes,
 8002414:	4605      	mov	r5, r0
            XMEMCPY(out,
 8002416:	2208      	movs	r2, #8
 8002418:	3104      	adds	r1, #4
 800241a:	4638      	mov	r0, r7
 800241c:	f01b fac2 	bl	801d9a4 <memcpy>
        break;
 8002420:	e006      	b.n	8002430 <BuildMessage+0x330>
            ret = wc_Des3_CbcEncrypt(ssl->encrypt.des3, out, input, sz);
 8002422:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002424:	4643      	mov	r3, r8
 8002426:	463a      	mov	r2, r7
 8002428:	4639      	mov	r1, r7
 800242a:	f009 fd21 	bl	800be70 <wc_Des3_CbcEncrypt>
            ret = wc_AesCbcEncrypt(ssl->encrypt.aes, out, input, sz);
 800242e:	4605      	mov	r5, r0
            ssl->encrypt.state = CIPHER_STATE_END;
 8002430:	2302      	movs	r3, #2
 8002432:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            if (ssl->specs.bulk_cipher_algorithm == wolfssl_aes_ccm ||
 8002436:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 800243a:	1fda      	subs	r2, r3, #7
 800243c:	2a01      	cmp	r2, #1
 800243e:	d901      	bls.n	8002444 <BuildMessage+0x344>
                ssl->specs.bulk_cipher_algorithm == wolfssl_aes_gcm ||
 8002440:	2b0e      	cmp	r3, #14
 8002442:	d104      	bne.n	800244e <BuildMessage+0x34e>
                if (ssl->encrypt.nonce)
 8002444:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002446:	b110      	cbz	r0, 800244e <BuildMessage+0x34e>
                    ForceZero(ssl->encrypt.nonce, AESGCM_NONCE_SZ);
 8002448:	210c      	movs	r1, #12
 800244a:	f7fd fedf 	bl	800020c <ForceZero>
    ssl->encrypt.state = CIPHER_STATE_BEGIN;
 800244e:	2300      	movs	r3, #0
 8002450:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            if (ret != 0) {
 8002454:	2d00      	cmp	r5, #0
 8002456:	f43f aebd 	beq.w	80021d4 <BuildMessage+0xd4>
                        ForceZero(output + args->headerSz, (word16)args->size);
 800245a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800245c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8002460:	4430      	add	r0, r6
 8002462:	f7fd fed3 	bl	800020c <ForceZero>
                goto exit_buildmsg;
 8002466:	e73d      	b.n	80022e4 <BuildMessage+0x1e4>
            ret = wc_AesCbcEncrypt(ssl->encrypt.aes, out, input, sz);
 8002468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800246a:	4643      	mov	r3, r8
 800246c:	463a      	mov	r2, r7
 800246e:	4639      	mov	r1, r7
 8002470:	f008 f8ea 	bl	800a648 <wc_AesCbcEncrypt>
 8002474:	e7db      	b.n	800242e <BuildMessage+0x32e>
        return BAD_FUNC_ARG;
 8002476:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800247a:	e7d9      	b.n	8002430 <BuildMessage+0x330>
    switch (ssl->encrypt.state) {
 800247c:	4605      	mov	r5, r0
 800247e:	e7da      	b.n	8002436 <BuildMessage+0x336>
                return ENCRYPT_ERROR;
 8002480:	4d00      	ldr	r5, [pc, #0]	; (8002484 <BuildMessage+0x384>)
 8002482:	e7ea      	b.n	800245a <BuildMessage+0x35a>
 8002484:	fffffec6 	.word	0xfffffec6

08002488 <SendChangeCipher>:
{
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (IsEncryptionOn(ssl, 1) && ssl->options.handShakeDone) {
 800248a:	2101      	movs	r1, #1
{
 800248c:	b089      	sub	sp, #36	; 0x24
 800248e:	4604      	mov	r4, r0
    if (IsEncryptionOn(ssl, 1) && ssl->options.handShakeDone) {
 8002490:	f7fe fa8d 	bl	80009ae <IsEncryptionOn>
 8002494:	b3b8      	cbz	r0, 8002506 <SendChangeCipher+0x7e>
 8002496:	f894 327f 	ldrb.w	r3, [r4, #639]	; 0x27f
        sendSz += MAX_MSG_EXTRA;
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf0c      	ite	eq
 800249e:	2606      	moveq	r6, #6
 80024a0:	266c      	movne	r6, #108	; 0x6c
    ssl->options.buildingMsg = 1;
 80024a2:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
    if ((ret = CheckAvailableSize(ssl, sendSz)) != 0)
 80024ae:	4631      	mov	r1, r6
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff fb67 	bl	8001b84 <CheckAvailableSize>
 80024b6:	4605      	mov	r5, r0
 80024b8:	bb10      	cbnz	r0, 8002500 <SendChangeCipher+0x78>
    output = GetOutputBuffer(ssl);
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff fa7c 	bl	80019b8 <GetOutputBuffer>
    AddRecordHeader(output, 1, change_cipher_spec, ssl, CUR_ORDER);
 80024c0:	2101      	movs	r1, #1
 80024c2:	4623      	mov	r3, r4
 80024c4:	2214      	movs	r2, #20
 80024c6:	f7fe f9ae 	bl	8000826 <AddRecordHeader.constprop.0>
    output = GetOutputBuffer(ssl);
 80024ca:	4607      	mov	r7, r0
    output[idx] = 1;             /* turn it on */
 80024cc:	7141      	strb	r1, [r0, #5]
    if (IsEncryptionOn(ssl, 1) && ssl->options.handShakeDone) {
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7fe fa6d 	bl	80009ae <IsEncryptionOn>
 80024d4:	b1c8      	cbz	r0, 800250a <SendChangeCipher+0x82>
 80024d6:	f894 327f 	ldrb.w	r3, [r4, #639]	; 0x27f
 80024da:	b1b3      	cbz	r3, 800250a <SendChangeCipher+0x82>
        sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 80024dc:	2314      	movs	r3, #20
 80024de:	e9cd 1300 	strd	r1, r3, [sp]
        input[0] = 1;  /* turn it on */
 80024e2:	f88d 101c 	strb.w	r1, [sp, #28]
        sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 80024e6:	4632      	mov	r2, r6
 80024e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80024ec:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80024f0:	ab07      	add	r3, sp, #28
 80024f2:	4639      	mov	r1, r7
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff fe03 	bl	8002100 <BuildMessage>
        if (sendSz < 0) {
 80024fa:	1e06      	subs	r6, r0, #0
 80024fc:	da05      	bge.n	800250a <SendChangeCipher+0x82>
            return sendSz;
 80024fe:	4635      	mov	r5, r6
}
 8002500:	4628      	mov	r0, r5
 8002502:	b009      	add	sp, #36	; 0x24
 8002504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int                sendSz = RECORD_HEADER_SZ + ENUM_LEN;
 8002506:	2606      	movs	r6, #6
 8002508:	e7cb      	b.n	80024a2 <SendChangeCipher+0x1a>
    ssl->buffers.outputBuffer.length += sendSz;
 800250a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800250e:	4430      	add	r0, r6
 8002510:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if ((ret = SetKeysSide(ssl, ENCRYPT_SIDE_ONLY)) != 0)
 8002514:	2101      	movs	r1, #1
 8002516:	4620      	mov	r0, r4
 8002518:	f004 fc0a 	bl	8006d30 <SetKeysSide>
 800251c:	4605      	mov	r5, r0
 800251e:	2800      	cmp	r0, #0
 8002520:	d1ee      	bne.n	8002500 <SendChangeCipher+0x78>
    ssl->options.buildingMsg = 0;
 8002522:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8002526:	f360 03c3 	bfi	r3, r0, #3, #1
 800252a:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
    if (ssl->options.groupMessages)
 800252e:	f994 3274 	ldrsb.w	r3, [r4, #628]	; 0x274
 8002532:	2b00      	cmp	r3, #0
 8002534:	dbe4      	blt.n	8002500 <SendChangeCipher+0x78>
        return SendBuffered(ssl);
 8002536:	4620      	mov	r0, r4
}
 8002538:	b009      	add	sp, #36	; 0x24
 800253a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return SendBuffered(ssl);
 800253e:	f7ff b9f7 	b.w	8001930 <SendBuffered>
	...

08002544 <SendAlert_ex>:
{
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
    ssl->pendingAlert.level = severity;
 8002546:	e9c0 2143 	strd	r2, r1, [r0, #268]	; 0x10c
{
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	460d      	mov	r5, r1
    if ((ret = CheckAvailableSize(ssl, outputSz)) != 0) {
 800254e:	2168      	movs	r1, #104	; 0x68
{
 8002550:	4604      	mov	r4, r0
 8002552:	4617      	mov	r7, r2
    if ((ret = CheckAvailableSize(ssl, outputSz)) != 0) {
 8002554:	f7ff fb16 	bl	8001b84 <CheckAvailableSize>
 8002558:	2800      	cmp	r0, #0
 800255a:	d146      	bne.n	80025ea <SendAlert_ex+0xa6>
    if (ssl->buffers.outputBuffer.buffer == NULL)
 800255c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d044      	beq.n	80025ee <SendAlert_ex+0xaa>
    output = GetOutputBuffer(ssl);
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff fa27 	bl	80019b8 <GetOutputBuffer>
    if (severity == alert_fatal) {
 800256a:	2d02      	cmp	r5, #2
            ssl->options.isClosed = 1;  /* Don't send close_notify */
 800256c:	bf08      	it	eq
 800256e:	f894 3272 	ldrbeq.w	r3, [r4, #626]	; 0x272
    input[0] = (byte)severity;
 8002572:	f88d 501c 	strb.w	r5, [sp, #28]
            ssl->options.isClosed = 1;  /* Don't send close_notify */
 8002576:	bf08      	it	eq
 8002578:	f043 0310 	orreq.w	r3, r3, #16
    output = GetOutputBuffer(ssl);
 800257c:	4606      	mov	r6, r0
            ssl->options.isClosed = 1;  /* Don't send close_notify */
 800257e:	bf08      	it	eq
 8002580:	f884 3272 	strbeq.w	r3, [r4, #626]	; 0x272
    ssl->alert_history.last_tx.level = severity;
 8002584:	e9c4 7541 	strd	r7, r5, [r4, #260]	; 0x104
    if (IsEncryptionOn(ssl, 1)) {
 8002588:	2101      	movs	r1, #1
 800258a:	4620      	mov	r0, r4
    input[1] = (byte)type;
 800258c:	f88d 701d 	strb.w	r7, [sp, #29]
    if (IsEncryptionOn(ssl, 1)) {
 8002590:	f7fe fa0d 	bl	80009ae <IsEncryptionOn>
 8002594:	b190      	cbz	r0, 80025bc <SendAlert_ex+0x78>
        sendSz = BuildMessage(ssl, output, outputSz, input, ALERT_SIZE, alert,
 8002596:	2300      	movs	r3, #0
 8002598:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800259c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025a0:	2215      	movs	r2, #21
 80025a2:	2302      	movs	r3, #2
 80025a4:	e9cd 3200 	strd	r3, r2, [sp]
 80025a8:	4631      	mov	r1, r6
 80025aa:	ab07      	add	r3, sp, #28
 80025ac:	2268      	movs	r2, #104	; 0x68
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff fda6 	bl	8002100 <BuildMessage>
    if (sendSz < 0)
 80025b4:	2800      	cmp	r0, #0
 80025b6:	da0d      	bge.n	80025d4 <SendAlert_ex+0x90>
        return BUILD_MSG_ERROR;
 80025b8:	480e      	ldr	r0, [pc, #56]	; (80025f4 <SendAlert_ex+0xb0>)
 80025ba:	e016      	b.n	80025ea <SendAlert_ex+0xa6>
                AddRecordHeader(output, ALERT_SIZE, alert, ssl, CUR_ORDER);
 80025bc:	2102      	movs	r1, #2
 80025be:	4623      	mov	r3, r4
 80025c0:	2215      	movs	r2, #21
 80025c2:	4630      	mov	r0, r6
 80025c4:	f7fe f92f 	bl	8000826 <AddRecordHeader.constprop.0>
        XMEMCPY(output, input, ALERT_SIZE);
 80025c8:	460a      	mov	r2, r1
 80025ca:	1d70      	adds	r0, r6, #5
 80025cc:	a907      	add	r1, sp, #28
 80025ce:	f01b f9e9 	bl	801d9a4 <memcpy>
        sendSz = RECORD_HEADER_SZ + ALERT_SIZE;
 80025d2:	2007      	movs	r0, #7
    ssl->buffers.outputBuffer.length += sendSz;
 80025d4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80025d8:	4418      	add	r0, r3
 80025da:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    ret = SendBuffered(ssl);
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff f9a6 	bl	8001930 <SendBuffered>
    ssl->pendingAlert.code = 0;
 80025e4:	2300      	movs	r3, #0
    ssl->pendingAlert.level = alert_none;
 80025e6:	e9c4 3343 	strd	r3, r3, [r4, #268]	; 0x10c
}
 80025ea:	b009      	add	sp, #36	; 0x24
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BUFFER_E;
 80025ee:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80025f2:	e7fa      	b.n	80025ea <SendAlert_ex+0xa6>
 80025f4:	fffffec0 	.word	0xfffffec0

080025f8 <SendFinished>:
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
                     finishedSz = ssl->options.tls ? TLS_FINISHED_SZ :
 80025fa:	f890 3271 	ldrb.w	r3, [r0, #625]	; 0x271
 80025fe:	f013 0f40 	tst.w	r3, #64	; 0x40
    ssl->options.buildingMsg = 1;
 8002602:	f890 3276 	ldrb.w	r3, [r0, #630]	; 0x276
 8002606:	f043 0308 	orr.w	r3, r3, #8
{
 800260a:	b093      	sub	sp, #76	; 0x4c
    ssl->options.buildingMsg = 1;
 800260c:	f880 3276 	strb.w	r3, [r0, #630]	; 0x276
    if ((ret = CheckAvailableSize(ssl, outputSz)) != 0)
 8002610:	f04f 0196 	mov.w	r1, #150	; 0x96
{
 8002614:	4604      	mov	r4, r0
                     finishedSz = ssl->options.tls ? TLS_FINISHED_SZ :
 8002616:	bf14      	ite	ne
 8002618:	260c      	movne	r6, #12
 800261a:	2624      	moveq	r6, #36	; 0x24
    if ((ret = CheckAvailableSize(ssl, outputSz)) != 0)
 800261c:	f7ff fab2 	bl	8001b84 <CheckAvailableSize>
 8002620:	4605      	mov	r5, r0
 8002622:	2800      	cmp	r0, #0
 8002624:	d150      	bne.n	80026c8 <SendFinished+0xd0>
    output = GetOutputBuffer(ssl);
 8002626:	4620      	mov	r0, r4
 8002628:	f7ff f9c6 	bl	80019b8 <GetOutputBuffer>
    hs->type = type;
 800262c:	2314      	movs	r3, #20
 800262e:	f88d 3018 	strb.w	r3, [sp, #24]
    ret = BuildFinished(ssl, hashes, ssl->options.side == WOLFSSL_CLIENT_END ?
 8002632:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8002636:	492a      	ldr	r1, [pc, #168]	; (80026e0 <SendFinished+0xe8>)
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <SendFinished+0xec>)
    out[0] = (byte)((in >> 16) & 0xff);
 800263a:	f88d 5019 	strb.w	r5, [sp, #25]
 800263e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002642:	2b10      	cmp	r3, #16
 8002644:	bf18      	it	ne
 8002646:	460a      	movne	r2, r1
    if (ssl->options.tls) {
 8002648:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
    out[1] = (byte)((in >>  8) & 0xff);
 800264c:	f88d 501a 	strb.w	r5, [sp, #26]
 8002650:	0659      	lsls	r1, r3, #25
    output = GetOutputBuffer(ssl);
 8002652:	4607      	mov	r7, r0
    out[2] =  (byte)(in        & 0xff);
 8002654:	f88d 601b 	strb.w	r6, [sp, #27]
    if (ssl->options.tls) {
 8002658:	d505      	bpl.n	8002666 <SendFinished+0x6e>
        ret = BuildTlsFinished(ssl, hashes, sender);
 800265a:	a907      	add	r1, sp, #28
 800265c:	4620      	mov	r0, r4
 800265e:	f005 fe77 	bl	8008350 <BuildTlsFinished>
    if (ret != 0) return ret;
 8002662:	4605      	mov	r5, r0
 8002664:	bb80      	cbnz	r0, 80026c8 <SendFinished+0xd0>
    sendSz = BuildMessage(ssl, output, outputSz, input, headerSz + finishedSz,
 8002666:	2300      	movs	r3, #0
 8002668:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800266c:	9303      	str	r3, [sp, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	2316      	movs	r3, #22
 8002672:	3604      	adds	r6, #4
 8002674:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002678:	9600      	str	r6, [sp, #0]
 800267a:	ab06      	add	r3, sp, #24
 800267c:	2296      	movs	r2, #150	; 0x96
 800267e:	4639      	mov	r1, r7
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff fd3d 	bl	8002100 <BuildMessage>
    if (sendSz < 0)
 8002686:	1e05      	subs	r5, r0, #0
 8002688:	db28      	blt.n	80026dc <SendFinished+0xe4>
    if (!ssl->options.resuming) {
 800268a:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 800268e:	071b      	lsls	r3, r3, #28
 8002690:	d41d      	bmi.n	80026ce <SendFinished+0xd6>
        SetupSession(ssl);
 8002692:	4620      	mov	r0, r4
 8002694:	f005 fb87 	bl	8007da6 <SetupSession>
        if (ssl->options.side == WOLFSSL_SERVER_END) {
 8002698:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 800269c:	f013 0f30 	tst.w	r3, #48	; 0x30
 80026a0:	d103      	bne.n	80026aa <SendFinished+0xb2>
            ssl->options.handShakeState = HANDSHAKE_DONE;
 80026a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026a6:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
    ssl->buffers.outputBuffer.length += sendSz;
 80026aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80026ae:	4428      	add	r0, r5
 80026b0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    ret = SendBuffered(ssl);
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff f93b 	bl	8001930 <SendBuffered>
    ssl->options.buildingMsg = 0;
 80026ba:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80026be:	f36f 03c3 	bfc	r3, #3, #1
    ret = SendBuffered(ssl);
 80026c2:	4605      	mov	r5, r0
    ssl->options.buildingMsg = 0;
 80026c4:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
}
 80026c8:	4628      	mov	r0, r5
 80026ca:	b013      	add	sp, #76	; 0x4c
 80026cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ssl->options.side == WOLFSSL_CLIENT_END) {
 80026ce:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 80026d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d1e7      	bne.n	80026aa <SendFinished+0xb2>
 80026da:	e7e2      	b.n	80026a2 <SendFinished+0xaa>
        return BUILD_MSG_ERROR;
 80026dc:	4d02      	ldr	r5, [pc, #8]	; (80026e8 <SendFinished+0xf0>)
 80026de:	e7f3      	b.n	80026c8 <SendFinished+0xd0>
 80026e0:	0801fd62 	.word	0x0801fd62
 80026e4:	0801fd58 	.word	0x0801fd58
 80026e8:	fffffec0 	.word	0xfffffec0

080026ec <cipherExtraData>:
    if (ssl->specs.cipher_type == aead) {
 80026ec:	f890 3149 	ldrb.w	r3, [r0, #329]	; 0x149
 80026f0:	2b02      	cmp	r3, #2
{
 80026f2:	4602      	mov	r2, r0
    if (ssl->specs.cipher_type == aead) {
 80026f4:	d107      	bne.n	8002706 <cipherExtraData+0x1a>
        if (ssl->specs.bulk_cipher_algorithm != wolfssl_chacha) {
 80026f6:	f892 3148 	ldrb.w	r3, [r2, #328]	; 0x148
        cipherExtra = ssl->specs.aead_mac_size;
 80026fa:	f8b0 0146 	ldrh.w	r0, [r0, #326]	; 0x146
        if (ssl->specs.bulk_cipher_algorithm != wolfssl_chacha) {
 80026fe:	2b09      	cmp	r3, #9
 8002700:	d009      	beq.n	8002716 <cipherExtraData+0x2a>
            cipherExtra += AESGCM_EXP_IV_SZ;
 8002702:	3008      	adds	r0, #8
 8002704:	4770      	bx	lr
        cipherExtra = ssl->specs.iv_size + ssl->specs.block_size +
 8002706:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
 800270a:	f8b0 0144 	ldrh.w	r0, [r0, #324]	; 0x144
 800270e:	4403      	add	r3, r0
            ssl->specs.hash_size;
 8002710:	f892 014d 	ldrb.w	r0, [r2, #333]	; 0x14d
        cipherExtra = ssl->specs.iv_size + ssl->specs.block_size +
 8002714:	4418      	add	r0, r3
}
 8002716:	4770      	bx	lr

08002718 <SendHandshakeMsg.constprop.0>:
static int SendHandshakeMsg(WOLFSSL* ssl, byte* input, word32 inputSz,
 8002718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271c:	460e      	mov	r6, r1
 800271e:	b089      	sub	sp, #36	; 0x24
    if (ssl == NULL || input == NULL)
 8002720:	4604      	mov	r4, r0
 8002722:	2800      	cmp	r0, #0
 8002724:	f000 808c 	beq.w	8002840 <SendHandshakeMsg.constprop.0+0x128>
 8002728:	2900      	cmp	r1, #0
 800272a:	f000 8089 	beq.w	8002840 <SendHandshakeMsg.constprop.0+0x128>
        inputSz += HANDSHAKE_HEADER_SZ;
 800272e:	f102 0a04 	add.w	sl, r2, #4
    if (input >= ssl->buffers.outputBuffer.buffer &&
 8002732:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8002736:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 800273a:	46d3      	mov	fp, sl
 800273c:	bfa8      	it	ge
 800273e:	f44f 4b80 	movge.w	fp, #16384	; 0x4000
 8002742:	4299      	cmp	r1, r3
 8002744:	d304      	bcc.n	8002750 <SendHandshakeMsg.constprop.0+0x38>
            input < ssl->buffers.outputBuffer.buffer +
 8002746:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
 800274a:	440b      	add	r3, r1
    if (input >= ssl->buffers.outputBuffer.buffer &&
 800274c:	429e      	cmp	r6, r3
 800274e:	d377      	bcc.n	8002840 <SendHandshakeMsg.constprop.0+0x128>
    if (!ssl->options.buildingMsg) {
 8002750:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8002754:	f013 0308 	ands.w	r3, r3, #8
 8002758:	d107      	bne.n	800276a <SendHandshakeMsg.constprop.0+0x52>
        ret = HashOutput(ssl, input, headerSz + (int)inputSz, 0);
 800275a:	3209      	adds	r2, #9
 800275c:	4631      	mov	r1, r6
 800275e:	4620      	mov	r0, r4
 8002760:	f7fe ff88 	bl	8001674 <HashOutput>
        if (ret != 0)
 8002764:	4603      	mov	r3, r0
 8002766:	2800      	cmp	r0, #0
 8002768:	d147      	bne.n	80027fa <SendHandshakeMsg.constprop.0+0xe2>
    while (ssl->fragOffset < inputSz) {
 800276a:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
 800276e:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
 8002772:	45aa      	cmp	sl, r5
 8002774:	d807      	bhi.n	8002786 <SendHandshakeMsg.constprop.0+0x6e>
    ssl->fragOffset = 0;
 8002776:	2300      	movs	r3, #0
    ssl->options.buildingMsg = 0;
 8002778:	f363 02c3 	bfi	r2, r3, #3, #1
    ssl->fragOffset = 0;
 800277c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    ssl->options.buildingMsg = 0;
 8002780:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
    return ret;
 8002784:	e039      	b.n	80027fa <SendHandshakeMsg.constprop.0+0xe2>
        byte* data = input + ssl->fragOffset + headerSz;
 8002786:	f105 0905 	add.w	r9, r5, #5
        if (inputSz - ssl->fragOffset < fragSz)
 800278a:	ebaa 0505 	sub.w	r5, sl, r5
 800278e:	455d      	cmp	r5, fp
        ssl->options.buildingMsg = 1;
 8002790:	f042 0208 	orr.w	r2, r2, #8
 8002794:	bf28      	it	cs
 8002796:	465d      	movcs	r5, fp
 8002798:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
        if (IsEncryptionOn(ssl, 1))
 800279c:	2101      	movs	r1, #1
 800279e:	4620      	mov	r0, r4
        byte* data = input + ssl->fragOffset + headerSz;
 80027a0:	44b1      	add	r9, r6
        outputSz = headerSz + fragSz;
 80027a2:	1d6f      	adds	r7, r5, #5
        if (IsEncryptionOn(ssl, 1))
 80027a4:	f7fe f903 	bl	80009ae <IsEncryptionOn>
 80027a8:	b118      	cbz	r0, 80027b2 <SendHandshakeMsg.constprop.0+0x9a>
            outputSz += cipherExtraData(ssl);
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7ff ff9e 	bl	80026ec <cipherExtraData>
 80027b0:	4407      	add	r7, r0
        if ((ret = CheckAvailableSize(ssl, outputSz)) != 0)
 80027b2:	4639      	mov	r1, r7
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff f9e5 	bl	8001b84 <CheckAvailableSize>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b9e8      	cbnz	r0, 80027fa <SendHandshakeMsg.constprop.0+0xe2>
        if (ssl->buffers.outputBuffer.buffer == NULL)
 80027be:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80027c2:	9007      	str	r0, [sp, #28]
 80027c4:	2a00      	cmp	r2, #0
 80027c6:	d03e      	beq.n	8002846 <SendHandshakeMsg.constprop.0+0x12e>
        output = GetOutputBuffer(ssl);
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff f8f5 	bl	80019b8 <GetOutputBuffer>
        if (IsEncryptionOn(ssl, 1)) {
 80027ce:	2101      	movs	r1, #1
        output = GetOutputBuffer(ssl);
 80027d0:	4680      	mov	r8, r0
        if (IsEncryptionOn(ssl, 1)) {
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7fe f8eb 	bl	80009ae <IsEncryptionOn>
 80027d8:	b198      	cbz	r0, 8002802 <SendHandshakeMsg.constprop.0+0xea>
            ret = BuildMessage(ssl, output, outputSz,
 80027da:	9b07      	ldr	r3, [sp, #28]
 80027dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80027e4:	2316      	movs	r3, #22
 80027e6:	e9cd 5300 	strd	r5, r3, [sp]
 80027ea:	463a      	mov	r2, r7
 80027ec:	464b      	mov	r3, r9
 80027ee:	4641      	mov	r1, r8
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fc85 	bl	8002100 <BuildMessage>
            if (ret >= 0)
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	da10      	bge.n	800281c <SendHandshakeMsg.constprop.0+0x104>
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	b009      	add	sp, #36	; 0x24
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                AddRecordHeader(output, fragSz, handshake, ssl, CUR_ORDER);
 8002802:	4623      	mov	r3, r4
 8002804:	2216      	movs	r2, #22
 8002806:	4629      	mov	r1, r5
 8002808:	4640      	mov	r0, r8
 800280a:	f7fe f80c 	bl	8000826 <AddRecordHeader.constprop.0>
            XMEMCPY(output + headerSz, data, fragSz);
 800280e:	462a      	mov	r2, r5
 8002810:	4649      	mov	r1, r9
 8002812:	f108 0005 	add.w	r0, r8, #5
 8002816:	f01b f8c5 	bl	801d9a4 <memcpy>
 800281a:	463b      	mov	r3, r7
        ssl->buffers.outputBuffer.length += outputSz;
 800281c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8002820:	4418      	add	r0, r3
        ssl->fragOffset += fragSz;
 8002822:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
        ssl->buffers.outputBuffer.length += outputSz;
 8002826:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        ssl->fragOffset += fragSz;
 800282a:	442b      	add	r3, r5
 800282c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
        if (!ssl->options.groupMessages)
 8002830:	f994 3274 	ldrsb.w	r3, [r4, #628]	; 0x274
 8002834:	2b00      	cmp	r3, #0
 8002836:	db98      	blt.n	800276a <SendHandshakeMsg.constprop.0+0x52>
            ret = SendBuffered(ssl);
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff f879 	bl	8001930 <SendBuffered>
 800283e:	e791      	b.n	8002764 <SendHandshakeMsg.constprop.0+0x4c>
        return BAD_FUNC_ARG;
 8002840:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8002844:	e7d9      	b.n	80027fa <SendHandshakeMsg.constprop.0+0xe2>
            return MEMORY_E;
 8002846:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800284a:	e7d6      	b.n	80027fa <SendHandshakeMsg.constprop.0+0xe2>

0800284c <SendCertificate>:
{
 800284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (ssl->options.usingPSK_cipher || ssl->options.usingAnon_cipher) {
 8002850:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002854:	f013 030c 	ands.w	r3, r3, #12
{
 8002858:	b093      	sub	sp, #76	; 0x4c
 800285a:	4604      	mov	r4, r0
    if (ssl->options.usingPSK_cipher || ssl->options.usingAnon_cipher) {
 800285c:	f040 81bd 	bne.w	8002bda <SendCertificate+0x38e>
    if (ssl->options.sendVerify == SEND_BLANK_CERT) {
 8002860:	f890 2270 	ldrb.w	r2, [r0, #624]	; 0x270
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	2a02      	cmp	r2, #2
 800286a:	d057      	beq.n	800291c <SendCertificate+0xd0>
        if (!ssl->buffers.certificate) {
 800286c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 81b4 	beq.w	8002bde <SendCertificate+0x392>
        certSz = ssl->buffers.certificate->length;
 8002876:	f8d3 8008 	ldr.w	r8, [r3, #8]
        if (certSz && ssl->buffers.certChain) {
 800287a:	f1b8 0f00 	cmp.w	r8, #0
 800287e:	d054      	beq.n	800292a <SendCertificate+0xde>
        listSz = certSz + CERT_HEADER_SZ;
 8002880:	f108 0303 	add.w	r3, r8, #3
 8002884:	9307      	str	r3, [sp, #28]
        if (certSz && ssl->buffers.certChain) {
 8002886:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        length = certSz + headerSz;
 800288a:	f108 0a06 	add.w	sl, r8, #6
        if (certSz && ssl->buffers.certChain) {
 800288e:	2b00      	cmp	r3, #0
 8002890:	d053      	beq.n	800293a <SendCertificate+0xee>
            certChainSz = ssl->buffers.certChain->length;
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	9306      	str	r3, [sp, #24]
            listSz += certChainSz;
 8002896:	9a06      	ldr	r2, [sp, #24]
            length += certChainSz;
 8002898:	449a      	add	sl, r3
            listSz += certChainSz;
 800289a:	f108 0303 	add.w	r3, r8, #3
 800289e:	4413      	add	r3, r2
 80028a0:	9307      	str	r3, [sp, #28]
        headerSz = 2 * CERT_HEADER_SZ;
 80028a2:	2306      	movs	r3, #6
 80028a4:	9308      	str	r3, [sp, #32]
    if (ssl->fragOffset != 0)
 80028a6:	f8d4 712c 	ldr.w	r7, [r4, #300]	; 0x12c
 80028aa:	2f00      	cmp	r7, #0
 80028ac:	d049      	beq.n	8002942 <SendCertificate+0xf6>
        length -= (ssl->fragOffset + headerSz);
 80028ae:	9b08      	ldr	r3, [sp, #32]
 80028b0:	ebaa 0707 	sub.w	r7, sl, r7
 80028b4:	1aff      	subs	r7, r7, r3
    out[0] = (byte)((in >> 16) & 0xff);
 80028b6:	f3ca 4307 	ubfx	r3, sl, #16, #8
 80028ba:	930b      	str	r3, [sp, #44]	; 0x2c
    out[1] = (byte)((in >>  8) & 0xff);
 80028bc:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80028c0:	930c      	str	r3, [sp, #48]	; 0x30
    out[0] = (byte)((in >> 16) & 0xff);
 80028c2:	9b07      	ldr	r3, [sp, #28]
 80028c4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80028c8:	930d      	str	r3, [sp, #52]	; 0x34
    out[1] = (byte)((in >>  8) & 0xff);
 80028ca:	9b07      	ldr	r3, [sp, #28]
 80028cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80028d0:	930e      	str	r3, [sp, #56]	; 0x38
    out[0] = (byte)((in >> 16) & 0xff);
 80028d2:	f3c8 4307 	ubfx	r3, r8, #16, #8
 80028d6:	930f      	str	r3, [sp, #60]	; 0x3c
    out[1] = (byte)((in >>  8) & 0xff);
 80028d8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80028dc:	9310      	str	r3, [sp, #64]	; 0x40
                if (headerSz + certSz + certChainSz <=
 80028de:	9b06      	ldr	r3, [sp, #24]
 80028e0:	4443      	add	r3, r8
 80028e2:	2500      	movs	r5, #0
 80028e4:	930a      	str	r3, [sp, #40]	; 0x28
    while (length > 0 && ret == 0) {
 80028e6:	b107      	cbz	r7, 80028ea <SendCertificate+0x9e>
 80028e8:	b36d      	cbz	r5, 8002946 <SendCertificate+0xfa>
    if (ret != WANT_WRITE) {
 80028ea:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 80028ee:	429d      	cmp	r5, r3
 80028f0:	d010      	beq.n	8002914 <SendCertificate+0xc8>
        ssl->options.buildingMsg = 0;
 80028f2:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80028f6:	f36f 03c3 	bfc	r3, #3, #1
 80028fa:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
        ssl->fragOffset = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
        if (ssl->options.side == WOLFSSL_SERVER_END){
 8002904:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8002908:	f013 0f30 	tst.w	r3, #48	; 0x30
 800290c:	d102      	bne.n	8002914 <SendCertificate+0xc8>
            ssl->options.serverState = SERVER_CERT_COMPLETE;
 800290e:	2305      	movs	r3, #5
 8002910:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
}
 8002914:	4628      	mov	r0, r5
 8002916:	b013      	add	sp, #76	; 0x4c
 8002918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            length = CERT_HEADER_SZ;
 800291c:	f04f 0a03 	mov.w	sl, #3
            headerSz = CERT_HEADER_SZ;
 8002920:	e9cd 3a07 	strd	r3, sl, [sp, #28]
            certChainSz = 0;
 8002924:	9306      	str	r3, [sp, #24]
            certSz = 0;
 8002926:	4698      	mov	r8, r3
 8002928:	e7bd      	b.n	80028a6 <SendCertificate+0x5a>
 800292a:	f04f 0a06 	mov.w	sl, #6
 800292e:	2303      	movs	r3, #3
        headerSz = 2 * CERT_HEADER_SZ;
 8002930:	e9cd 3a07 	strd	r3, sl, [sp, #28]
            certChainSz = 0;
 8002934:	f8cd 8018 	str.w	r8, [sp, #24]
 8002938:	e7b5      	b.n	80028a6 <SendCertificate+0x5a>
        headerSz = 2 * CERT_HEADER_SZ;
 800293a:	2206      	movs	r2, #6
 800293c:	9208      	str	r2, [sp, #32]
            certChainSz = 0;
 800293e:	9306      	str	r3, [sp, #24]
 8002940:	e7b1      	b.n	80028a6 <SendCertificate+0x5a>
 8002942:	4657      	mov	r7, sl
 8002944:	e7b7      	b.n	80028b6 <SendCertificate+0x6a>
        ssl->options.buildingMsg = 1;
 8002946:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
        if (!ssl->options.dtls) {
 8002952:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002956:	0759      	lsls	r1, r3, #29
 8002958:	f100 80da 	bmi.w	8002b10 <SendCertificate+0x2c4>
            if (ssl->fragOffset == 0)  {
 800295c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 80cb 	bne.w	8002afc <SendCertificate+0x2b0>
                if (headerSz + certSz + certChainSz <=
 8002966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002968:	9a08      	ldr	r2, [sp, #32]
 800296a:	189d      	adds	r5, r3, r2
 800296c:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8002970:	429d      	cmp	r5, r3
 8002972:	bf28      	it	cs
 8002974:	461d      	movcs	r5, r3
                sendSz += fragSz + HANDSHAKE_HEADER_SZ;
 8002976:	f105 0b09 	add.w	fp, r5, #9
                i += HANDSHAKE_HEADER_SZ;
 800297a:	2609      	movs	r6, #9
            if (IsEncryptionOn(ssl, 1))
 800297c:	2101      	movs	r1, #1
 800297e:	4620      	mov	r0, r4
 8002980:	f7fe f815 	bl	80009ae <IsEncryptionOn>
 8002984:	b108      	cbz	r0, 800298a <SendCertificate+0x13e>
                sendSz += MAX_MSG_EXTRA;
 8002986:	f10b 0b66 	add.w	fp, fp, #102	; 0x66
        if (IsEncryptionOn(ssl, 1))
 800298a:	2101      	movs	r1, #1
 800298c:	4620      	mov	r0, r4
 800298e:	f7fe f80e 	bl	80009ae <IsEncryptionOn>
 8002992:	b118      	cbz	r0, 800299c <SendCertificate+0x150>
            sendSz += cipherExtraData(ssl);
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fea9 	bl	80026ec <cipherExtraData>
 800299a:	4483      	add	fp, r0
        if ((ret = CheckAvailableSize(ssl, sendSz)) != 0)
 800299c:	4659      	mov	r1, fp
 800299e:	4620      	mov	r0, r4
 80029a0:	f7ff f8f0 	bl	8001b84 <CheckAvailableSize>
 80029a4:	9009      	str	r0, [sp, #36]	; 0x24
 80029a6:	2800      	cmp	r0, #0
 80029a8:	f040 811b 	bne.w	8002be2 <SendCertificate+0x396>
        output = GetOutputBuffer(ssl);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff f803 	bl	80019b8 <GetOutputBuffer>
            if (!ssl->options.dtls) {
 80029b2:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
        if (ssl->fragOffset == 0) {
 80029b6:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
        output = GetOutputBuffer(ssl);
 80029ba:	4681      	mov	r9, r0
            if (!ssl->options.dtls) {
 80029bc:	f003 0304 	and.w	r3, r3, #4
        if (ssl->fragOffset == 0) {
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	f040 80fe 	bne.w	8002bc2 <SendCertificate+0x376>
            if (!ssl->options.dtls) {
 80029c6:	b9bb      	cbnz	r3, 80029f8 <SendCertificate+0x1ac>
    AddRecordHeader(output, fragSz + lengthAdj, handshake, ssl, CUR_ORDER);
 80029c8:	4623      	mov	r3, r4
 80029ca:	1d29      	adds	r1, r5, #4
 80029cc:	2216      	movs	r2, #22
 80029ce:	f7fd ff2a 	bl	8000826 <AddRecordHeader.constprop.0>
    hs->type = type;
 80029d2:	230b      	movs	r3, #11
 80029d4:	7143      	strb	r3, [r0, #5]
    out[0] = (byte)((in >> 16) & 0xff);
 80029d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029d8:	7183      	strb	r3, [r0, #6]
    out[1] = (byte)((in >>  8) & 0xff);
 80029da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029dc:	71c3      	strb	r3, [r0, #7]
    out[2] =  (byte)(in        & 0xff);
 80029de:	f880 a008 	strb.w	sl, [r0, #8]
                if (!IsEncryptionOn(ssl, 1))
 80029e2:	2101      	movs	r1, #1
 80029e4:	4620      	mov	r0, r4
 80029e6:	f7fd ffe2 	bl	80009ae <IsEncryptionOn>
 80029ea:	b928      	cbnz	r0, 80029f8 <SendCertificate+0x1ac>
                    HashRaw(ssl, output + RECORD_HEADER_SZ,
 80029ec:	2204      	movs	r2, #4
 80029ee:	f109 0105 	add.w	r1, r9, #5
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7fe fde6 	bl	80015c4 <HashRaw>
    out[0] = (byte)((in >> 16) & 0xff);
 80029f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80029fa:	f809 2006 	strb.w	r2, [r9, r6]
            c32to24(listSz, output + i);
 80029fe:	eb09 0306 	add.w	r3, r9, r6
    out[1] = (byte)((in >>  8) & 0xff);
 8002a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a04:	705a      	strb	r2, [r3, #1]
    out[2] =  (byte)(in        & 0xff);
 8002a06:	9a07      	ldr	r2, [sp, #28]
 8002a08:	709a      	strb	r2, [r3, #2]
            if (ssl->options.dtls || !IsEncryptionOn(ssl, 1))
 8002a0a:	f894 2272 	ldrb.w	r2, [r4, #626]	; 0x272
 8002a0e:	0752      	lsls	r2, r2, #29
 8002a10:	d406      	bmi.n	8002a20 <SendCertificate+0x1d4>
 8002a12:	2101      	movs	r1, #1
 8002a14:	4620      	mov	r0, r4
 8002a16:	9311      	str	r3, [sp, #68]	; 0x44
 8002a18:	f7fd ffc9 	bl	80009ae <IsEncryptionOn>
 8002a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a1e:	b920      	cbnz	r0, 8002a2a <SendCertificate+0x1de>
                HashRaw(ssl, output + i, CERT_HEADER_SZ);
 8002a20:	2203      	movs	r2, #3
 8002a22:	4619      	mov	r1, r3
 8002a24:	4620      	mov	r0, r4
 8002a26:	f7fe fdcd 	bl	80015c4 <HashRaw>
            i += CERT_HEADER_SZ;
 8002a2a:	1cf2      	adds	r2, r6, #3
            if (certSz) {
 8002a2c:	f1b8 0f00 	cmp.w	r8, #0
 8002a30:	d172      	bne.n	8002b18 <SendCertificate+0x2cc>
            length -= CERT_HEADER_SZ;
 8002a32:	3f03      	subs	r7, #3
            fragSz -= CERT_HEADER_SZ;
 8002a34:	3d03      	subs	r5, #3
            i += CERT_HEADER_SZ;
 8002a36:	4616      	mov	r6, r2
        if (certChainSz && fragSz) {
 8002a38:	9b06      	ldr	r3, [sp, #24]
 8002a3a:	b1cb      	cbz	r3, 8002a70 <SendCertificate+0x224>
 8002a3c:	b1c5      	cbz	r5, 8002a70 <SendCertificate+0x224>
            word32 copySz = min(certChainSz + certSz - ssl->fragOffset, fragSz);
 8002a3e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8002a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a44:	1a5a      	subs	r2, r3, r1
            XMEMCPY(output + i,
 8002a46:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
        return a > b ? b : a;
 8002a4a:	4295      	cmp	r5, r2
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	bf28      	it	cs
 8002a50:	4615      	movcs	r5, r2
 8002a52:	eba1 0108 	sub.w	r1, r1, r8
 8002a56:	4419      	add	r1, r3
 8002a58:	eb09 0006 	add.w	r0, r9, r6
 8002a5c:	462a      	mov	r2, r5
 8002a5e:	f01a ffa1 	bl	801d9a4 <memcpy>
            ssl->fragOffset += copySz;
 8002a62:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8002a66:	442b      	add	r3, r5
            i += copySz;
 8002a68:	442e      	add	r6, r5
            ssl->fragOffset += copySz;
 8002a6a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            length -= copySz;
 8002a6e:	1b7f      	subs	r7, r7, r5
        if (IsEncryptionOn(ssl, 1)) {
 8002a70:	2101      	movs	r1, #1
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fd ff9b 	bl	80009ae <IsEncryptionOn>
            int   inputSz = i; /* build msg adds rec hdr */
 8002a78:	4635      	mov	r5, r6
        if (IsEncryptionOn(ssl, 1)) {
 8002a7a:	b380      	cbz	r0, 8002ade <SendCertificate+0x292>
            if (ssl->options.dtls)
 8002a7c:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
                recordHeaderSz += DTLS_RECORD_EXTRA;
 8002a80:	f013 0f04 	tst.w	r3, #4
 8002a84:	bf0c      	ite	eq
 8002a86:	2105      	moveq	r1, #5
 8002a88:	210d      	movne	r1, #13
            inputSz -= recordHeaderSz;
 8002a8a:	1a75      	subs	r5, r6, r1
            if (inputSz < 0) {
 8002a8c:	2d00      	cmp	r5, #0
            inputSz -= recordHeaderSz;
 8002a8e:	9111      	str	r1, [sp, #68]	; 0x44
            if (inputSz < 0) {
 8002a90:	f2c0 80a9 	blt.w	8002be6 <SendCertificate+0x39a>
            if (inputSz > 0) {  /* clang thinks could be zero, let's help */
 8002a94:	f000 809f 	beq.w	8002bd6 <SendCertificate+0x38a>
                input = (byte*)XMALLOC(inputSz, ssl->heap,
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f01a ff63 	bl	801d964 <malloc>
                if (input == NULL)
 8002a9e:	4606      	mov	r6, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	f000 80a3 	beq.w	8002bec <SendCertificate+0x3a0>
                XMEMCPY(input, output + recordHeaderSz, inputSz);
 8002aa6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	4449      	add	r1, r9
 8002aac:	f01a ff7a 	bl	801d9a4 <memcpy>
            sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2316      	movs	r3, #22
 8002abc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002ac0:	9500      	str	r5, [sp, #0]
 8002ac2:	4633      	mov	r3, r6
 8002ac4:	465a      	mov	r2, fp
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fb19 	bl	8002100 <BuildMessage>
 8002ace:	4605      	mov	r5, r0
            XFREE(input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8002ad0:	b116      	cbz	r6, 8002ad8 <SendCertificate+0x28c>
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	f01a ff4e 	bl	801d974 <free>
            if (sendSz < 0)
 8002ad8:	2d00      	cmp	r5, #0
 8002ada:	f6ff af1b 	blt.w	8002914 <SendCertificate+0xc8>
        ssl->buffers.outputBuffer.length += sendSz;
 8002ade:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        if (!ssl->options.groupMessages)
 8002ae2:	f994 3274 	ldrsb.w	r3, [r4, #628]	; 0x274
        ssl->buffers.outputBuffer.length += sendSz;
 8002ae6:	4415      	add	r5, r2
        if (!ssl->options.groupMessages)
 8002ae8:	2b00      	cmp	r3, #0
        ssl->buffers.outputBuffer.length += sendSz;
 8002aea:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        if (!ssl->options.groupMessages)
 8002aee:	db03      	blt.n	8002af8 <SendCertificate+0x2ac>
            ret = SendBuffered(ssl);
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7fe ff1d 	bl	8001930 <SendBuffered>
 8002af6:	9009      	str	r0, [sp, #36]	; 0x24
    out[1] = (byte)((in >>  8) & 0xff);
 8002af8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002afa:	e6f4      	b.n	80028e6 <SendCertificate+0x9a>
        return a > b ? b : a;
 8002afc:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8002b00:	463d      	mov	r5, r7
 8002b02:	bf28      	it	cs
 8002b04:	f44f 4580 	movcs.w	r5, #16384	; 0x4000
                sendSz += fragSz;
 8002b08:	f105 0b05 	add.w	fp, r5, #5
        word32 i = RECORD_HEADER_SZ;
 8002b0c:	2605      	movs	r6, #5
 8002b0e:	e735      	b.n	800297c <SendCertificate+0x130>
        int    sendSz = RECORD_HEADER_SZ;
 8002b10:	f04f 0b05 	mov.w	fp, #5
        word32 i = RECORD_HEADER_SZ;
 8002b14:	465e      	mov	r6, fp
 8002b16:	e738      	b.n	800298a <SendCertificate+0x13e>
                c32to24(certSz, output + i);
 8002b18:	eb09 0302 	add.w	r3, r9, r2
    out[0] = (byte)((in >> 16) & 0xff);
 8002b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002b1e:	f809 1002 	strb.w	r1, [r9, r2]
    out[1] = (byte)((in >>  8) & 0xff);
 8002b22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002b24:	705a      	strb	r2, [r3, #1]
    out[2] =  (byte)(in        & 0xff);
 8002b26:	f883 8002 	strb.w	r8, [r3, #2]
                if (ssl->options.dtls || !IsEncryptionOn(ssl, 1))
 8002b2a:	f894 2272 	ldrb.w	r2, [r4, #626]	; 0x272
 8002b2e:	0750      	lsls	r0, r2, #29
 8002b30:	d406      	bmi.n	8002b40 <SendCertificate+0x2f4>
 8002b32:	2101      	movs	r1, #1
 8002b34:	4620      	mov	r0, r4
 8002b36:	9311      	str	r3, [sp, #68]	; 0x44
 8002b38:	f7fd ff39 	bl	80009ae <IsEncryptionOn>
 8002b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b3e:	b920      	cbnz	r0, 8002b4a <SendCertificate+0x2fe>
                    HashRaw(ssl, output + i, CERT_HEADER_SZ);
 8002b40:	2203      	movs	r2, #3
 8002b42:	4619      	mov	r1, r3
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7fe fd3d 	bl	80015c4 <HashRaw>
                if (ssl->options.dtls || !IsEncryptionOn(ssl, 1)) {
 8002b4a:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002b4e:	0759      	lsls	r1, r3, #29
                i += CERT_HEADER_SZ;
 8002b50:	f106 0606 	add.w	r6, r6, #6
                length -= CERT_HEADER_SZ;
 8002b54:	f1a7 0706 	sub.w	r7, r7, #6
                fragSz -= CERT_HEADER_SZ;
 8002b58:	f1a5 0506 	sub.w	r5, r5, #6
                if (ssl->options.dtls || !IsEncryptionOn(ssl, 1)) {
 8002b5c:	d404      	bmi.n	8002b68 <SendCertificate+0x31c>
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7fd ff24 	bl	80009ae <IsEncryptionOn>
 8002b66:	b978      	cbnz	r0, 8002b88 <SendCertificate+0x33c>
                    HashRaw(ssl, ssl->buffers.certificate->buffer, certSz);
 8002b68:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7fe fd27 	bl	80015c4 <HashRaw>
                    if (certChainSz)
 8002b76:	9b06      	ldr	r3, [sp, #24]
 8002b78:	b133      	cbz	r3, 8002b88 <SendCertificate+0x33c>
                        HashRaw(ssl, ssl->buffers.certChain->buffer,
 8002b7a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8002b7e:	9a06      	ldr	r2, [sp, #24]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7fe fd1e 	bl	80015c4 <HashRaw>
        if (certSz && ssl->fragOffset < certSz) {
 8002b88:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8002b8c:	4543      	cmp	r3, r8
 8002b8e:	f4bf af53 	bcs.w	8002a38 <SendCertificate+0x1ec>
            XMEMCPY(output + i,
 8002b92:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
            word32 copySz = min(certSz - ssl->fragOffset, fragSz);
 8002b96:	eba8 0203 	sub.w	r2, r8, r3
            XMEMCPY(output + i,
 8002b9a:	6809      	ldr	r1, [r1, #0]
        return a > b ? b : a;
 8002b9c:	42aa      	cmp	r2, r5
 8002b9e:	bf28      	it	cs
 8002ba0:	462a      	movcs	r2, r5
 8002ba2:	4419      	add	r1, r3
 8002ba4:	eb09 0006 	add.w	r0, r9, r6
 8002ba8:	9211      	str	r2, [sp, #68]	; 0x44
 8002baa:	f01a fefb 	bl	801d9a4 <memcpy>
            i += copySz;
 8002bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
            ssl->fragOffset += copySz;
 8002bb0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8002bb4:	4413      	add	r3, r2
            i += copySz;
 8002bb6:	4416      	add	r6, r2
            ssl->fragOffset += copySz;
 8002bb8:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            length -= copySz;
 8002bbc:	1abf      	subs	r7, r7, r2
            fragSz -= copySz;
 8002bbe:	1aad      	subs	r5, r5, r2
 8002bc0:	e73a      	b.n	8002a38 <SendCertificate+0x1ec>
            if (!ssl->options.dtls) {
 8002bc2:	b923      	cbnz	r3, 8002bce <SendCertificate+0x382>
                AddRecordHeader(output, fragSz, handshake, ssl, CUR_ORDER);
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	2216      	movs	r2, #22
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd fe2c 	bl	8000826 <AddRecordHeader.constprop.0>
        if (certSz && ssl->fragOffset < certSz) {
 8002bce:	f1b8 0f00 	cmp.w	r8, #0
 8002bd2:	d1d9      	bne.n	8002b88 <SendCertificate+0x33c>
 8002bd4:	e730      	b.n	8002a38 <SendCertificate+0x1ec>
            byte* input = NULL;
 8002bd6:	462e      	mov	r6, r5
 8002bd8:	e76a      	b.n	8002ab0 <SendCertificate+0x264>
        return 0;  /* not needed */
 8002bda:	2500      	movs	r5, #0
 8002bdc:	e69a      	b.n	8002914 <SendCertificate+0xc8>
            return BUFFER_ERROR;
 8002bde:	4d05      	ldr	r5, [pc, #20]	; (8002bf4 <SendCertificate+0x3a8>)
 8002be0:	e698      	b.n	8002914 <SendCertificate+0xc8>
 8002be2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002be4:	e696      	b.n	8002914 <SendCertificate+0xc8>
                return BUFFER_E;
 8002be6:	f06f 0583 	mvn.w	r5, #131	; 0x83
 8002bea:	e693      	b.n	8002914 <SendCertificate+0xc8>
                    return MEMORY_E;
 8002bec:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8002bf0:	e690      	b.n	8002914 <SendCertificate+0xc8>
 8002bf2:	bf00      	nop
 8002bf4:	fffffeb8 	.word	0xfffffeb8

08002bf8 <SendCertificateRequest>:
{
 8002bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const Suites* suites = WOLFSSL_SUITES(ssl);
 8002bfc:	6845      	ldr	r5, [r0, #4]
{
 8002bfe:	b087      	sub	sp, #28
 8002c00:	4604      	mov	r4, r0
    const Suites* suites = WOLFSSL_SUITES(ssl);
 8002c02:	b90d      	cbnz	r5, 8002c08 <SendCertificateRequest+0x10>
 8002c04:	6803      	ldr	r3, [r0, #0]
 8002c06:	6add      	ldr	r5, [r3, #44]	; 0x2c
    if (IsAtLeastTLSv1_2(ssl))
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7fd feb3 	bl	8000974 <IsAtLeastTLSv1_2>
 8002c0e:	b1d8      	cbz	r0, 8002c48 <SendCertificateRequest+0x50>
        reqSz += LENGTH_SZ + suites->hashSigAlgoSz;
 8002c10:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 8002c14:	f109 0906 	add.w	r9, r9, #6
    if (ssl->options.usingPSK_cipher || ssl->options.usingAnon_cipher)
 8002c18:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8002c1c:	f013 0f0c 	tst.w	r3, #12
 8002c20:	f040 80aa 	bne.w	8002d78 <SendCertificateRequest+0x180>
        if (IsEncryptionOn(ssl, 1))
 8002c24:	2101      	movs	r1, #1
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fd fec1 	bl	80009ae <IsEncryptionOn>
    if (!ssl->options.dtls) {
 8002c2c:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002c30:	0759      	lsls	r1, r3, #29
    sendSz = RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ + reqSz;
 8002c32:	f109 0809 	add.w	r8, r9, #9
    if (!ssl->options.dtls) {
 8002c36:	d40a      	bmi.n	8002c4e <SendCertificateRequest+0x56>
        if (IsEncryptionOn(ssl, 1))
 8002c38:	b158      	cbz	r0, 8002c52 <SendCertificateRequest+0x5a>
            sendSz += MAX_MSG_EXTRA;
 8002c3a:	f109 086f 	add.w	r8, r9, #111	; 0x6f
        sendSz += cipherExtraData(ssl);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff fd54 	bl	80026ec <cipherExtraData>
 8002c44:	4480      	add	r8, r0
 8002c46:	e004      	b.n	8002c52 <SendCertificateRequest+0x5a>
    int  reqSz = ENUM_LEN + typeTotal + REQ_HEADER_SZ;  /* add auth later */
 8002c48:	f04f 0904 	mov.w	r9, #4
 8002c4c:	e7e4      	b.n	8002c18 <SendCertificateRequest+0x20>
    if (IsEncryptionOn(ssl, 1))
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d1f5      	bne.n	8002c3e <SendCertificateRequest+0x46>
    ssl->options.buildingMsg = 1;
 8002c52:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
    if ((ret = CheckAvailableSize(ssl, sendSz)) != 0)
 8002c5e:	4641      	mov	r1, r8
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7fe ff8f 	bl	8001b84 <CheckAvailableSize>
 8002c66:	4607      	mov	r7, r0
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	f040 8083 	bne.w	8002d74 <SendCertificateRequest+0x17c>
    output = GetOutputBuffer(ssl);
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7fe fea2 	bl	80019b8 <GetOutputBuffer>
    AddHeaders(output, reqSz, certificate_request, ssl);
 8002c74:	4649      	mov	r1, r9
 8002c76:	4623      	mov	r3, r4
 8002c78:	220d      	movs	r2, #13
 8002c7a:	f7fd fde5 	bl	8000848 <AddHeaders>
    output[i++] = (byte)typeTotal;  /* # of types */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	7243      	strb	r3, [r0, #9]
    if ((ssl->options.cipherSuite0 == ECC_BYTE ||
 8002c82:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
 8002c86:	2ac0      	cmp	r2, #192	; 0xc0
    output = GetOutputBuffer(ssl);
 8002c88:	4606      	mov	r6, r0
    if ((ssl->options.cipherSuite0 == ECC_BYTE ||
 8002c8a:	d001      	beq.n	8002c90 <SendCertificateRequest+0x98>
 8002c8c:	2acc      	cmp	r2, #204	; 0xcc
 8002c8e:	d105      	bne.n	8002c9c <SendCertificateRequest+0xa4>
         ssl->options.cipherSuite0 == CHACHA_BYTE) &&
 8002c90:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
        output[i++] = ecdsa_sign;
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2340      	moveq	r3, #64	; 0x40
 8002c9c:	72b3      	strb	r3, [r6, #10]
    if (IsAtLeastTLSv1_2(ssl)) {
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7fd fe68 	bl	8000974 <IsAtLeastTLSv1_2>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d04a      	beq.n	8002d3e <SendCertificateRequest+0x146>
        c16toa(suites->hashSigAlgoSz, &output[i]);
 8002ca8:	886b      	ldrh	r3, [r5, #2]
    c[1] =  (byte)(wc_u16       & 0xff);
 8002caa:	7333      	strb	r3, [r6, #12]
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8002cac:	0a1a      	lsrs	r2, r3, #8
 8002cae:	72f2      	strb	r2, [r6, #11]
        XMEMCPY(&output[i], suites->hashSigAlgo, suites->hashSigAlgoSz);
 8002cb0:	886a      	ldrh	r2, [r5, #2]
 8002cb2:	f505 7198 	add.w	r1, r5, #304	; 0x130
 8002cb6:	f106 000d 	add.w	r0, r6, #13
 8002cba:	f01a fe73 	bl	801d9a4 <memcpy>
        i += suites->hashSigAlgoSz;
 8002cbe:	886d      	ldrh	r5, [r5, #2]
 8002cc0:	350d      	adds	r5, #13
    c16toa((word16)dnLen, &output[i]);  /* auth's */
 8002cc2:	1973      	adds	r3, r6, r5
 8002cc4:	f04f 0a00 	mov.w	sl, #0
 8002cc8:	f806 a005 	strb.w	sl, [r6, r5]
        if (IsEncryptionOn(ssl, 1)) {
 8002ccc:	2101      	movs	r1, #1
    c[1] =  (byte)(wc_u16       & 0xff);
 8002cce:	f883 a001 	strb.w	sl, [r3, #1]
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7fd fe6b 	bl	80009ae <IsEncryptionOn>
    i += REQ_HEADER_SZ;
 8002cd8:	3502      	adds	r5, #2
        if (IsEncryptionOn(ssl, 1)) {
 8002cda:	4603      	mov	r3, r0
 8002cdc:	b388      	cbz	r0, 8002d42 <SendCertificateRequest+0x14a>
            if (ssl->options.dtls)
 8002cde:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
                recordHeaderSz += DTLS_RECORD_EXTRA;
 8002ce2:	f013 0f04 	tst.w	r3, #4
 8002ce6:	bf0c      	ite	eq
 8002ce8:	f04f 0b05 	moveq.w	fp, #5
 8002cec:	f04f 0b0d 	movne.w	fp, #13
            if (inputSz <= 0) {
 8002cf0:	ebb5 050b 	subs.w	r5, r5, fp
 8002cf4:	d042      	beq.n	8002d7c <SendCertificateRequest+0x184>
            input = (byte*)XMALLOC(inputSz, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f01a fe34 	bl	801d964 <malloc>
            if (input == NULL)
 8002cfc:	4681      	mov	r9, r0
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d03f      	beq.n	8002d82 <SendCertificateRequest+0x18a>
            XMEMCPY(input, output + recordHeaderSz, inputSz);
 8002d02:	462a      	mov	r2, r5
 8002d04:	eb06 010b 	add.w	r1, r6, fp
 8002d08:	f01a fe4c 	bl	801d9a4 <memcpy>
            sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 8002d0c:	2316      	movs	r3, #22
 8002d0e:	2201      	movs	r2, #1
 8002d10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d14:	9500      	str	r5, [sp, #0]
 8002d16:	464b      	mov	r3, r9
 8002d18:	4642      	mov	r2, r8
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	e9cd aa04 	strd	sl, sl, [sp, #16]
 8002d20:	f8cd a00c 	str.w	sl, [sp, #12]
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff f9eb 	bl	8002100 <BuildMessage>
 8002d2a:	4605      	mov	r5, r0
            XFREE(input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8002d2c:	4648      	mov	r0, r9
 8002d2e:	f01a fe21 	bl	801d974 <free>
            if (sendSz < 0)
 8002d32:	4555      	cmp	r5, sl
 8002d34:	da0b      	bge.n	8002d4e <SendCertificateRequest+0x156>
}
 8002d36:	4628      	mov	r0, r5
 8002d38:	b007      	add	sp, #28
 8002d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3e:	250b      	movs	r5, #11
 8002d40:	e7bf      	b.n	8002cc2 <SendCertificateRequest+0xca>
            ret = HashOutput(ssl, output, sendSz, 0);
 8002d42:	462a      	mov	r2, r5
 8002d44:	4631      	mov	r1, r6
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7fe fc94 	bl	8001674 <HashOutput>
            if (ret != 0)
 8002d4c:	b9e0      	cbnz	r0, 8002d88 <SendCertificateRequest+0x190>
    ssl->buffers.outputBuffer.length += sendSz;
 8002d4e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    if (ssl->options.groupMessages)
 8002d52:	f994 3274 	ldrsb.w	r3, [r4, #628]	; 0x274
    ssl->buffers.outputBuffer.length += sendSz;
 8002d56:	442a      	add	r2, r5
    if (ssl->options.groupMessages)
 8002d58:	2b00      	cmp	r3, #0
    ssl->buffers.outputBuffer.length += sendSz;
 8002d5a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    if (ssl->options.groupMessages)
 8002d5e:	db03      	blt.n	8002d68 <SendCertificateRequest+0x170>
        ret = SendBuffered(ssl);
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7fe fde5 	bl	8001930 <SendBuffered>
 8002d66:	4607      	mov	r7, r0
    ssl->options.buildingMsg = 0;
 8002d68:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8002d6c:	f36f 03c3 	bfc	r3, #3, #1
 8002d70:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
    return ret;
 8002d74:	463d      	mov	r5, r7
 8002d76:	e7de      	b.n	8002d36 <SendCertificateRequest+0x13e>
        return 0;  /* not needed */
 8002d78:	2500      	movs	r5, #0
 8002d7a:	e7dc      	b.n	8002d36 <SendCertificateRequest+0x13e>
                return BUFFER_E;
 8002d7c:	f06f 0583 	mvn.w	r5, #131	; 0x83
 8002d80:	e7d9      	b.n	8002d36 <SendCertificateRequest+0x13e>
                return MEMORY_E;
 8002d82:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8002d86:	e7d6      	b.n	8002d36 <SendCertificateRequest+0x13e>
 8002d88:	4605      	mov	r5, r0
 8002d8a:	e7d4      	b.n	8002d36 <SendCertificateRequest+0x13e>

08002d8c <SendCertificateStatus>:
}
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	4770      	bx	lr

08002d90 <RetrySendAlert>:
    int severity = ssl->pendingAlert.level;
 8002d90:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
{
 8002d94:	b410      	push	{r4}
    if (severity == alert_none)
 8002d96:	b139      	cbz	r1, 8002da8 <RetrySendAlert+0x18>
    ssl->pendingAlert.code = 0;
 8002d98:	2400      	movs	r4, #0
    int type = ssl->pendingAlert.code;
 8002d9a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    ssl->pendingAlert.level = alert_none;
 8002d9e:	e9c0 4443 	strd	r4, r4, [r0, #268]	; 0x10c
}
 8002da2:	bc10      	pop	{r4}
    return SendAlert_ex(ssl, severity, type);
 8002da4:	f7ff bbce 	b.w	8002544 <SendAlert_ex>
}
 8002da8:	4608      	mov	r0, r1
 8002daa:	bc10      	pop	{r4}
 8002dac:	4770      	bx	lr
	...

08002db0 <SendData>:
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	4617      	mov	r7, r2
    if (ssl->error == WANT_WRITE
 8002db6:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8002dba:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 8002dbe:	429a      	cmp	r2, r3
        ssl->error = 0;
 8002dc0:	bf04      	itt	eq
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	f8c0 3114 	streq.w	r3, [r0, #276]	; 0x114
    if (ssl->error == VERIFY_MAC_ERROR || ssl->error == DECRYPT_ERROR) {
 8002dc8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8002dcc:	f46f 7298 	mvn.w	r2, #304	; 0x130
 8002dd0:	4293      	cmp	r3, r2
{
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	4689      	mov	r9, r1
    if (ssl->error == VERIFY_MAC_ERROR || ssl->error == DECRYPT_ERROR) {
 8002dd8:	d002      	beq.n	8002de0 <SendData+0x30>
 8002dda:	f513 7f9c 	cmn.w	r3, #312	; 0x138
 8002dde:	d106      	bne.n	8002dee <SendData+0x3e>
        if (ssl->options.dtls) {
 8002de0:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002de4:	0759      	lsls	r1, r3, #29
 8002de6:	d563      	bpl.n	8002eb0 <SendData+0x100>
            ssl->error = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    if (ssl->options.handShakeState != HANDSHAKE_DONE && !IsSCR(ssl)) {
 8002dee:	f894 327e 	ldrb.w	r3, [r4, #638]	; 0x27e
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d132      	bne.n	8002e5c <SendData+0xac>
    if (ssl->buffers.outputBuffer.length > 0
 8002df6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8002dfa:	bbbd      	cbnz	r5, 8002e6c <SendData+0xbc>
    ret = RetrySendAlert(ssl);
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ffc7 	bl	8002d90 <RetrySendAlert>
    if (ret != 0) {
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d152      	bne.n	8002eac <SendData+0xfc>
            sendSz = BuildMessage(ssl, out, outputSz, sendBuffer, buffSz,
 8002e06:	f04f 0a17 	mov.w	sl, #23
            buffSz = wolfSSL_GetMaxFragSize(ssl, sz - sent);
 8002e0a:	1b7e      	subs	r6, r7, r5
 8002e0c:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 8002e10:	bfa8      	it	ge
 8002e12:	f44f 4680 	movge.w	r6, #16384	; 0x4000
        if (sent == sz) break;
 8002e16:	42bd      	cmp	r5, r7
        byte* sendBuffer = (byte*)data + sent;  /* may switch on comp */
 8002e18:	eb09 0b05 	add.w	fp, r9, r5
        if (sent == sz) break;
 8002e1c:	d070      	beq.n	8002f00 <SendData+0x150>
        if (IsEncryptionOn(ssl, 1) || ssl->options.tls1_3)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4620      	mov	r0, r4
        outputSz = buffSz + COMP_EXTRA + DTLS_RECORD_HEADER_SZ;
 8002e22:	f106 080d 	add.w	r8, r6, #13
        if (IsEncryptionOn(ssl, 1) || ssl->options.tls1_3)
 8002e26:	f7fd fdc2 	bl	80009ae <IsEncryptionOn>
 8002e2a:	b918      	cbnz	r0, 8002e34 <SendData+0x84>
 8002e2c:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002e30:	07da      	lsls	r2, r3, #31
 8002e32:	d503      	bpl.n	8002e3c <SendData+0x8c>
            outputSz += cipherExtraData(ssl);
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff fc59 	bl	80026ec <cipherExtraData>
 8002e3a:	4480      	add	r8, r0
        if ((ret = CheckAvailableSize(ssl, outputSz)) != 0)
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7fe fea0 	bl	8001b84 <CheckAvailableSize>
 8002e44:	bb78      	cbnz	r0, 8002ea6 <SendData+0xf6>
        out = GetOutputBuffer(ssl);
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7fe fdb6 	bl	80019b8 <GetOutputBuffer>
        if (!ssl->options.tls1_3) {
 8002e4c:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002e50:	f013 0301 	ands.w	r3, r3, #1
        out = GetOutputBuffer(ssl);
 8002e54:	4601      	mov	r1, r0
        if (!ssl->options.tls1_3) {
 8002e56:	d02e      	beq.n	8002eb6 <SendData+0x106>
            return BUILD_MSG_ERROR;
 8002e58:	482a      	ldr	r0, [pc, #168]	; (8002f04 <SendData+0x154>)
 8002e5a:	e004      	b.n	8002e66 <SendData+0xb6>
        if ( (err = wolfSSL_negotiate(ssl)) != WOLFSSL_SUCCESS) {
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f004 fecf 	bl	8007c00 <wolfSSL_negotiate>
 8002e62:	2801      	cmp	r0, #1
 8002e64:	d0c7      	beq.n	8002df6 <SendData+0x46>
}
 8002e66:	b007      	add	sp, #28
 8002e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( (ssl->error = SendBuffered(ssl)) < 0) {
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7fe fd5f 	bl	8001930 <SendBuffered>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8002e78:	da0e      	bge.n	8002e98 <SendData+0xe8>
            if (ssl->error == SOCKET_ERROR_E && (ssl->options.connReset ||
 8002e7a:	f510 7f9a 	cmn.w	r0, #308	; 0x134
 8002e7e:	d1f2      	bne.n	8002e66 <SendData+0xb6>
 8002e80:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002e84:	f013 0f18 	tst.w	r3, #24
                ssl->error = SOCKET_PEER_CLOSED_E;
 8002e88:	bf17      	itett	ne
 8002e8a:	f46f 73c6 	mvnne.w	r3, #396	; 0x18c
        return WOLFSSL_FATAL_ERROR;
 8002e8e:	481e      	ldreq	r0, [pc, #120]	; (8002f08 <SendData+0x158>)
                ssl->error = SOCKET_PEER_CLOSED_E;
 8002e90:	f8c4 3114 	strne.w	r3, [r4, #276]	; 0x114
                return 0;  /* peer reset or closed */
 8002e94:	2000      	movne	r0, #0
 8002e96:	e7e6      	b.n	8002e66 <SendData+0xb6>
            sent = ssl->buffers.prevSent + ssl->buffers.plainSz;
 8002e98:	e9d4 5334 	ldrd	r5, r3, [r4, #208]	; 0xd0
 8002e9c:	441d      	add	r5, r3
            if (sent > sz) {
 8002e9e:	42bd      	cmp	r5, r7
 8002ea0:	ddac      	ble.n	8002dfc <SendData+0x4c>
                return ssl->error = BAD_FUNC_ARG;
 8002ea2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
            return ssl->error = ret;
 8002ea6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8002eaa:	e7dc      	b.n	8002e66 <SendData+0xb6>
        ssl->error = ret;
 8002eac:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
            return WOLFSSL_FATAL_ERROR;
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb4:	e7d7      	b.n	8002e66 <SendData+0xb6>
            sendSz = BuildMessage(ssl, out, outputSz, sendBuffer, buffSz,
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002ebc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002ec0:	9305      	str	r3, [sp, #20]
 8002ec2:	9600      	str	r6, [sp, #0]
 8002ec4:	465b      	mov	r3, fp
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7ff f919 	bl	8002100 <BuildMessage>
        if (sendSz < 0) {
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	dbc2      	blt.n	8002e58 <SendData+0xa8>
        ssl->buffers.outputBuffer.length += sendSz;
 8002ed2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8002ed6:	4418      	add	r0, r3
 8002ed8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if ( (ssl->error = SendBuffered(ssl)) < 0) {
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7fe fd27 	bl	8001930 <SendBuffered>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8002ee8:	da02      	bge.n	8002ef0 <SendData+0x140>
            ssl->buffers.prevSent = sent;
 8002eea:	e9c4 5634 	strd	r5, r6, [r4, #208]	; 0xd0
            if (ssl->error == SOCKET_ERROR_E && (ssl->options.connReset ||
 8002eee:	e7c4      	b.n	8002e7a <SendData+0xca>
        if (ssl->options.partialWrite == 1) {
 8002ef0:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8002ef4:	06db      	lsls	r3, r3, #27
        sent += buffSz;
 8002ef6:	eb05 0006 	add.w	r0, r5, r6
        if (ssl->options.partialWrite == 1) {
 8002efa:	d4b4      	bmi.n	8002e66 <SendData+0xb6>
        sent += buffSz;
 8002efc:	4605      	mov	r5, r0
 8002efe:	e784      	b.n	8002e0a <SendData+0x5a>
 8002f00:	4628      	mov	r0, r5
 8002f02:	e7b0      	b.n	8002e66 <SendData+0xb6>
 8002f04:	fffffec0 	.word	0xfffffec0
 8002f08:	fffffecc 	.word	0xfffffecc

08002f0c <SendAlert>:
    if (ssl->pendingAlert.level != alert_none) {
 8002f0c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
{
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	4604      	mov	r4, r0
 8002f14:	460d      	mov	r5, r1
 8002f16:	4616      	mov	r6, r2
    if (ssl->pendingAlert.level != alert_none) {
 8002f18:	b163      	cbz	r3, 8002f34 <SendAlert+0x28>
        int ret = RetrySendAlert(ssl);
 8002f1a:	f7ff ff39 	bl	8002d90 <RetrySendAlert>
        if (ret != 0) {
 8002f1e:	b148      	cbz	r0, 8002f34 <SendAlert+0x28>
            if (ssl->pendingAlert.level == alert_none ||
 8002f20:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002f24:	b11b      	cbz	r3, 8002f2e <SendAlert+0x22>
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <SendAlert+0x26>
                    (ssl->pendingAlert.level != alert_fatal &&
 8002f2a:	2d02      	cmp	r5, #2
 8002f2c:	d101      	bne.n	8002f32 <SendAlert+0x26>
                ssl->pendingAlert.level = severity;
 8002f2e:	e9c4 6543 	strd	r6, r5, [r4, #268]	; 0x10c
}
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
    return SendAlert_ex(ssl, severity, type);
 8002f34:	4632      	mov	r2, r6
 8002f36:	4629      	mov	r1, r5
 8002f38:	4620      	mov	r0, r4
}
 8002f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return SendAlert_ex(ssl, severity, type);
 8002f3e:	f7ff bb01 	b.w	8002544 <SendAlert_ex>

08002f42 <DoCertFatalAlert>:
{
 8002f42:	b510      	push	{r4, lr}
    if (ssl == NULL || ret == 0) {
 8002f44:	4604      	mov	r4, r0
 8002f46:	b1d8      	cbz	r0, 8002f80 <DoCertFatalAlert+0x3e>
 8002f48:	b1d1      	cbz	r1, 8002f80 <DoCertFatalAlert+0x3e>
    if (ret == ASN_AFTER_DATE_E || ret == ASN_BEFORE_DATE_E) {
 8002f4a:	f101 0397 	add.w	r3, r1, #151	; 0x97
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d917      	bls.n	8002f82 <DoCertFatalAlert+0x40>
    else if (ret == ASN_NO_SIGNER_E || ret == ASN_PATHLEN_INV_E ||
 8002f52:	f111 0fbc 	cmn.w	r1, #188	; 0xbc
 8002f56:	d016      	beq.n	8002f86 <DoCertFatalAlert+0x44>
 8002f58:	f101 03ee 	add.w	r3, r1, #238	; 0xee
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d912      	bls.n	8002f86 <DoCertFatalAlert+0x44>
            alertWhy = handshake_failure;
 8002f60:	f46f 72ac 	mvn.w	r2, #344	; 0x158
 8002f64:	4291      	cmp	r1, r2
 8002f66:	bf14      	ite	ne
 8002f68:	222a      	movne	r2, #42	; 0x2a
 8002f6a:	2228      	moveq	r2, #40	; 0x28
    SendAlert(ssl, alert_fatal, alertWhy); /* try to send */
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff ffcc 	bl	8002f0c <SendAlert>
    ssl->options.isClosed = 1;
 8002f74:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8002f78:	f043 0310 	orr.w	r3, r3, #16
 8002f7c:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
}
 8002f80:	bd10      	pop	{r4, pc}
        alertWhy = certificate_expired;
 8002f82:	222d      	movs	r2, #45	; 0x2d
 8002f84:	e7f2      	b.n	8002f6c <DoCertFatalAlert+0x2a>
        alertWhy = unknown_ca;
 8002f86:	2230      	movs	r2, #48	; 0x30
 8002f88:	e7f0      	b.n	8002f6c <DoCertFatalAlert+0x2a>
	...

08002f8c <ProcessPeerCerts>:
{
 8002f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f90:	4605      	mov	r5, r0
 8002f92:	b087      	sub	sp, #28
    byte* subjectHash = NULL;
 8002f94:	2400      	movs	r4, #0
    args = (ProcPeerCertArgs*)XMALLOC(
 8002f96:	2024      	movs	r0, #36	; 0x24
    int alreadySigner = 0;
 8002f98:	e9cd 4402 	strd	r4, r4, [sp, #8]
{
 8002f9c:	4689      	mov	r9, r1
 8002f9e:	4690      	mov	r8, r2
 8002fa0:	461f      	mov	r7, r3
    args = (ProcPeerCertArgs*)XMALLOC(
 8002fa2:	f01a fcdf 	bl	801d964 <malloc>
    if (args == NULL) {
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	f000 8337 	beq.w	800361c <ProcessPeerCerts+0x690>
        ssl->options.asyncState = TLS_ASYNC_BEGIN;
 8002fae:	f885 4283 	strb.w	r4, [r5, #643]	; 0x283
        XMEMSET(args, 0, sizeof(ProcPeerCertArgs));
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f01a fd1d 	bl	801d9f4 <memset>
        args->idx = *inOutIdx;
 8002fba:	f8d8 3000 	ldr.w	r3, [r8]
        args->begin = *inOutIdx;
 8002fbe:	e9c6 3302 	strd	r3, r3, [r6, #8]
    switch (ssl->options.asyncState)
 8002fc2:	f895 3283 	ldrb.w	r3, [r5, #643]	; 0x283
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	f200 8325 	bhi.w	8003616 <ProcessPeerCerts+0x68a>
 8002fcc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002fd0:	01430006 	.word	0x01430006
 8002fd4:	0220008e 	.word	0x0220008e
 8002fd8:	0321031f 	.word	0x0321031f
            args->certs = (buffer*)XMALLOC(sizeof(buffer) * MAX_CHAIN_DEPTH,
 8002fdc:	2048      	movs	r0, #72	; 0x48
 8002fde:	f01a fcc1 	bl	801d964 <malloc>
 8002fe2:	6030      	str	r0, [r6, #0]
            if (args->certs == NULL) {
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	f000 8133 	beq.w	8003250 <ProcessPeerCerts+0x2c4>
            XMEMSET(args->certs, 0, sizeof(buffer) * MAX_CHAIN_DEPTH);
 8002fea:	2248      	movs	r2, #72	; 0x48
 8002fec:	2100      	movs	r1, #0
 8002fee:	f01a fd01 	bl	801d9f4 <memset>
            if ((args->idx - args->begin) + OPAQUE24_LEN > totalSz) {
 8002ff2:	68b0      	ldr	r0, [r6, #8]
 8002ff4:	68f2      	ldr	r2, [r6, #12]
 8002ff6:	1cc3      	adds	r3, r0, #3
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	42bb      	cmp	r3, r7
 8002ffc:	d91e      	bls.n	800303c <ProcessPeerCerts+0xb0>
                    ERROR_OUT(BUFFER_ERROR, exit_ppc);
 8002ffe:	4c97      	ldr	r4, [pc, #604]	; (800325c <ProcessPeerCerts+0x2d0>)
    if (args->certs) {
 8003000:	6830      	ldr	r0, [r6, #0]
 8003002:	b118      	cbz	r0, 800300c <ProcessPeerCerts+0x80>
        XFREE(args->certs, ssl->heap, DYNAMIC_TYPE_DER);
 8003004:	f01a fcb6 	bl	801d974 <free>
        args->certs = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	6033      	str	r3, [r6, #0]
    if (args->dCert) {
 800300c:	6870      	ldr	r0, [r6, #4]
 800300e:	b188      	cbz	r0, 8003034 <ProcessPeerCerts+0xa8>
        if (args->dCertInit) {
 8003010:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003014:	075b      	lsls	r3, r3, #29
 8003016:	d507      	bpl.n	8003028 <ProcessPeerCerts+0x9c>
            FreeDecodedCert(args->dCert);
 8003018:	f010 fd27 	bl	8013a6a <FreeDecodedCert>
            args->dCertInit = 0;
 800301c:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003020:	f36f 0382 	bfc	r3, #2, #1
 8003024:	f886 3020 	strb.w	r3, [r6, #32]
        XFREE(args->dCert, ssl->heap, DYNAMIC_TYPE_DCERT);
 8003028:	6870      	ldr	r0, [r6, #4]
 800302a:	b108      	cbz	r0, 8003030 <ProcessPeerCerts+0xa4>
 800302c:	f01a fca2 	bl	801d974 <free>
        args->dCert = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	6073      	str	r3, [r6, #4]
    XFREE(args, ssl->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8003034:	4630      	mov	r0, r6
 8003036:	f01a fc9d 	bl	801d974 <free>
 800303a:	e2f1      	b.n	8003620 <ProcessPeerCerts+0x694>
            c24to32(input + args->idx, &listSz);
 800303c:	a904      	add	r1, sp, #16
 800303e:	4448      	add	r0, r9
 8003040:	f7fd f8ec 	bl	800021c <c24to32>
            args->idx += OPAQUE24_LEN;
 8003044:	68b3      	ldr	r3, [r6, #8]
            if (listSz > MAX_CERTIFICATE_SZ) {
 8003046:	9a04      	ldr	r2, [sp, #16]
 8003048:	f644 011e 	movw	r1, #18462	; 0x481e
            args->idx += OPAQUE24_LEN;
 800304c:	3303      	adds	r3, #3
            if (listSz > MAX_CERTIFICATE_SZ) {
 800304e:	428a      	cmp	r2, r1
            args->idx += OPAQUE24_LEN;
 8003050:	60b3      	str	r3, [r6, #8]
            if (listSz > MAX_CERTIFICATE_SZ) {
 8003052:	d8d4      	bhi.n	8002ffe <ProcessPeerCerts+0x72>
            if ((args->idx - args->begin) + listSz != totalSz) {
 8003054:	68f1      	ldr	r1, [r6, #12]
 8003056:	1a5b      	subs	r3, r3, r1
 8003058:	4413      	add	r3, r2
 800305a:	42bb      	cmp	r3, r7
 800305c:	d1cf      	bne.n	8002ffe <ProcessPeerCerts+0x72>
            while (listSz) {
 800305e:	9b04      	ldr	r3, [sp, #16]
                if (args->totalCerts >= ssl->verifyDepth ||
 8003060:	6934      	ldr	r4, [r6, #16]
            while (listSz) {
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 80b2 	bne.w	80031cc <ProcessPeerCerts+0x240>
            args->certIdx = 0; /* select peer cert (first one) */
 8003068:	e9c6 4305 	strd	r4, r3, [r6, #20]
            if (args->count == 0) {
 800306c:	2c00      	cmp	r4, #0
 800306e:	f040 80ed 	bne.w	800324c <ProcessPeerCerts+0x2c0>
                if ((ssl->options.side == WOLFSSL_SERVER_END) &&
 8003072:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
 8003076:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 800307a:	f040 80d6 	bne.w	800322a <ProcessPeerCerts+0x29e>
                    (ssl->options.mutualAuth || (ssl->options.failNoCert &&
 800307e:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
                if ((ssl->options.side == WOLFSSL_SERVER_END) &&
 8003082:	07db      	lsls	r3, r3, #31
 8003084:	d409      	bmi.n	800309a <ProcessPeerCerts+0x10e>
                    (ssl->options.mutualAuth || (ssl->options.failNoCert &&
 8003086:	f895 3271 	ldrb.w	r3, [r5, #625]	; 0x271
 800308a:	07df      	lsls	r7, r3, #31
 800308c:	d50c      	bpl.n	80030a8 <ProcessPeerCerts+0x11c>
                                             IsAtLeastTLSv1_3(ssl->version)))) {
 800308e:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
 8003092:	f7fd fc7c 	bl	800098e <IsAtLeastTLSv1_3>
                    (ssl->options.mutualAuth || (ssl->options.failNoCert &&
 8003096:	4604      	mov	r4, r0
 8003098:	b130      	cbz	r0, 80030a8 <ProcessPeerCerts+0x11c>
                    DoCertFatalAlert(ssl, ret);
 800309a:	f46f 71ac 	mvn.w	r1, #344	; 0x158
 800309e:	4628      	mov	r0, r5
 80030a0:	f7ff ff4f 	bl	8002f42 <DoCertFatalAlert>
                    ret = NO_PEER_CERT;
 80030a4:	f46f 74ac 	mvn.w	r4, #344	; 0x158
            args->dCertInit = 0;
 80030a8:	f896 3020 	ldrb.w	r3, [r6, #32]
 80030ac:	f36f 0382 	bfc	r3, #2, #1
 80030b0:	f886 3020 	strb.w	r3, [r6, #32]
            args->dCert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), ssl->heap,
 80030b4:	f44f 7056 	mov.w	r0, #856	; 0x358
 80030b8:	f01a fc54 	bl	801d964 <malloc>
 80030bc:	6070      	str	r0, [r6, #4]
            if (args->dCert == NULL) {
 80030be:	2800      	cmp	r0, #0
 80030c0:	f000 80c6 	beq.w	8003250 <ProcessPeerCerts+0x2c4>
            XMEMSET(args->dCert, 0, sizeof(DecodedCert));
 80030c4:	f44f 7256 	mov.w	r2, #856	; 0x358
 80030c8:	2100      	movs	r1, #0
 80030ca:	f01a fc93 	bl	801d9f4 <memset>
            ssl->options.asyncState = TLS_ASYNC_BUILD;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f885 3283 	strb.w	r3, [r5, #643]	; 0x283
            if (args->count > 0) {
 80030d4:	6973      	ldr	r3, [r6, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	dd03      	ble.n	80030e2 <ProcessPeerCerts+0x156>
                while (args->count > 1
 80030da:	6973      	ldr	r3, [r6, #20]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f300 80c3 	bgt.w	8003268 <ProcessPeerCerts+0x2dc>
            if (ret != 0) {
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	d18c      	bne.n	8003000 <ProcessPeerCerts+0x74>
            ssl->options.asyncState = TLS_ASYNC_DO;
 80030e6:	2302      	movs	r3, #2
 80030e8:	f885 3283 	strb.w	r3, [r5, #643]	; 0x283
            if (args->count > 0) {
 80030ec:	6973      	ldr	r3, [r6, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f04f 0400 	mov.w	r4, #0
 80030f4:	dd2b      	ble.n	800314e <ProcessPeerCerts+0x1c2>
                ret = ProcessPeerCertParse(ssl, args, CERT_TYPE,
 80030f6:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
                args->certIdx = 0;
 80030fa:	61b4      	str	r4, [r6, #24]
                ret = ProcessPeerCertParse(ssl, args, CERT_TYPE,
 80030fc:	aa03      	add	r2, sp, #12
 80030fe:	42a3      	cmp	r3, r4
 8003100:	9201      	str	r2, [sp, #4]
 8003102:	aa02      	add	r2, sp, #8
 8003104:	9200      	str	r2, [sp, #0]
 8003106:	bfb8      	it	lt
 8003108:	2300      	movlt	r3, #0
 800310a:	4622      	mov	r2, r4
 800310c:	bfa8      	it	ge
 800310e:	2301      	movge	r3, #1
 8003110:	4631      	mov	r1, r6
 8003112:	4628      	mov	r0, r5
 8003114:	f7fd fa97 	bl	8000646 <ProcessPeerCertParse>
                if (ret == 0) {
 8003118:	4604      	mov	r4, r0
 800311a:	2800      	cmp	r0, #0
 800311c:	f040 8154 	bne.w	80033c8 <ProcessPeerCerts+0x43c>
                    if (ssl->options.side == WOLFSSL_SERVER_END) {
 8003120:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
 8003124:	f013 0f30 	tst.w	r3, #48	; 0x30
 8003128:	d106      	bne.n	8003138 <ProcessPeerCerts+0x1ac>
                        if (args->dCert->version != WOLFSSL_X509_V3) {
 800312a:	6873      	ldr	r3, [r6, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2b02      	cmp	r3, #2
                            args->lastErr = ASN_VERSION_E;
 8003130:	bf1c      	itt	ne
 8003132:	f06f 038c 	mvnne.w	r3, #140	; 0x8c
 8003136:	61f3      	strne	r3, [r6, #28]
                    if (args->verifyErr) {
 8003138:	f896 3020 	ldrb.w	r3, [r6, #32]
 800313c:	f013 0202 	ands.w	r2, r3, #2
 8003140:	f000 813d 	beq.w	80033be <ProcessPeerCerts+0x432>
                        args->fatal = 1;
 8003144:	f043 0301 	orr.w	r3, r3, #1
                        ret = args->lastErr;
 8003148:	69f4      	ldr	r4, [r6, #28]
                        args->fatal = 1;
 800314a:	f886 3020 	strb.w	r3, [r6, #32]
            if (args->fatal && ret != 0) {
 800314e:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003152:	07da      	lsls	r2, r3, #31
 8003154:	d502      	bpl.n	800315c <ProcessPeerCerts+0x1d0>
 8003156:	2c00      	cmp	r4, #0
 8003158:	f47f af52 	bne.w	8003000 <ProcessPeerCerts+0x74>
            ssl->options.asyncState = TLS_ASYNC_VERIFY;
 800315c:	2303      	movs	r3, #3
 800315e:	f885 3283 	strb.w	r3, [r5, #643]	; 0x283
            if (args->count > 0) {
 8003162:	6973      	ldr	r3, [r6, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f340 81a4 	ble.w	80034b2 <ProcessPeerCerts+0x526>
                if (args->dCert->extKeyUsageSet) {
 800316a:	6870      	ldr	r0, [r6, #4]
 800316c:	f990 3354 	ldrsb.w	r3, [r0, #852]	; 0x354
 8003170:	2b00      	cmp	r3, #0
 8003172:	da11      	bge.n	8003198 <ProcessPeerCerts+0x20c>
                    if ((ssl->specs.kea == rsa_kea) &&
 8003174:	f895 314b 	ldrb.w	r3, [r5, #331]	; 0x14b
 8003178:	2b01      	cmp	r3, #1
 800317a:	f040 8275 	bne.w	8003668 <ProcessPeerCerts+0x6dc>
                        (ssl->options.side == WOLFSSL_CLIENT_END) &&
 800317e:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
                    if ((ssl->specs.kea == rsa_kea) &&
 8003182:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003186:	2b10      	cmp	r3, #16
 8003188:	d106      	bne.n	8003198 <ProcessPeerCerts+0x20c>
                        (ssl->options.side == WOLFSSL_CLIENT_END) &&
 800318a:	f8b0 32f8 	ldrh.w	r3, [r0, #760]	; 0x2f8
                        ret = KEYUSE_ENCIPHER_E;
 800318e:	f013 0f20 	tst.w	r3, #32
 8003192:	bf08      	it	eq
 8003194:	f46f 74c0 	mvneq.w	r4, #384	; 0x180
                if (args->dCert->extExtKeyUsageSet) {
 8003198:	f890 3355 	ldrb.w	r3, [r0, #853]	; 0x355
 800319c:	07db      	lsls	r3, r3, #31
 800319e:	d50d      	bpl.n	80031bc <ProcessPeerCerts+0x230>
                    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 80031a0:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
                        if ((args->dCert->extExtKeyUsage &
 80031a4:	f890 22fa 	ldrb.w	r2, [r0, #762]	; 0x2fa
                    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 80031a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	f040 8131 	bne.w	8003414 <ProcessPeerCerts+0x488>
                            ret = EXTKEYUSE_AUTH_E;
 80031b2:	f012 0f03 	tst.w	r2, #3
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <ProcessPeerCerts+0x2d4>)
 80031b8:	bf08      	it	eq
 80031ba:	461c      	moveq	r4, r3
                if (args->fatal) {
 80031bc:	f896 3020 	ldrb.w	r3, [r6, #32]
 80031c0:	07df      	lsls	r7, r3, #31
 80031c2:	f140 812a 	bpl.w	800341a <ProcessPeerCerts+0x48e>
                    ssl->error = ret;
 80031c6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
                    goto exit_ppc;
 80031ca:	e719      	b.n	8003000 <ProcessPeerCerts+0x74>
                if (args->totalCerts >= ssl->verifyDepth ||
 80031cc:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
 80031d0:	42a3      	cmp	r3, r4
 80031d2:	dd28      	ble.n	8003226 <ProcessPeerCerts+0x29a>
 80031d4:	2c08      	cmp	r4, #8
 80031d6:	dc26      	bgt.n	8003226 <ProcessPeerCerts+0x29a>
                if ((args->idx - args->begin) + OPAQUE24_LEN > totalSz) {
 80031d8:	68b0      	ldr	r0, [r6, #8]
 80031da:	68f2      	ldr	r2, [r6, #12]
 80031dc:	1cc3      	adds	r3, r0, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	42bb      	cmp	r3, r7
 80031e2:	f63f af0c 	bhi.w	8002ffe <ProcessPeerCerts+0x72>
                c24to32(input + args->idx, &certSz);
 80031e6:	a905      	add	r1, sp, #20
 80031e8:	4448      	add	r0, r9
 80031ea:	f7fd f817 	bl	800021c <c24to32>
                args->idx += OPAQUE24_LEN;
 80031ee:	68b2      	ldr	r2, [r6, #8]
                if ((args->idx - args->begin) + certSz > totalSz) {
 80031f0:	68f3      	ldr	r3, [r6, #12]
 80031f2:	9905      	ldr	r1, [sp, #20]
                args->idx += OPAQUE24_LEN;
 80031f4:	3203      	adds	r2, #3
                if ((args->idx - args->begin) + certSz > totalSz) {
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	440b      	add	r3, r1
 80031fa:	42bb      	cmp	r3, r7
                args->idx += OPAQUE24_LEN;
 80031fc:	60b2      	str	r2, [r6, #8]
                if ((args->idx - args->begin) + certSz > totalSz) {
 80031fe:	f63f aefe 	bhi.w	8002ffe <ProcessPeerCerts+0x72>
                args->certs[args->totalCerts].length = certSz;
 8003202:	6933      	ldr	r3, [r6, #16]
 8003204:	6830      	ldr	r0, [r6, #0]
 8003206:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
 800320a:	6061      	str	r1, [r4, #4]
                args->certs[args->totalCerts].buffer = input + args->idx;
 800320c:	eb09 0402 	add.w	r4, r9, r2
                args->idx += certSz;
 8003210:	440a      	add	r2, r1
                args->certs[args->totalCerts].buffer = input + args->idx;
 8003212:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
                args->idx += certSz;
 8003216:	60b2      	str	r2, [r6, #8]
                listSz -= certSz + CERT_HEADER_SZ;
 8003218:	9a04      	ldr	r2, [sp, #16]
 800321a:	3a03      	subs	r2, #3
 800321c:	1a52      	subs	r2, r2, r1
                args->totalCerts++;
 800321e:	3301      	adds	r3, #1
                listSz -= certSz + CERT_HEADER_SZ;
 8003220:	9204      	str	r2, [sp, #16]
                args->totalCerts++;
 8003222:	6133      	str	r3, [r6, #16]
                WOLFSSL_MSG("\tPut another cert into chain");
 8003224:	e71b      	b.n	800305e <ProcessPeerCerts+0xd2>
                    ERROR_OUT(MAX_CHAIN_ERROR, exit_ppc);
 8003226:	4c0f      	ldr	r4, [pc, #60]	; (8003264 <ProcessPeerCerts+0x2d8>)
 8003228:	e6ea      	b.n	8003000 <ProcessPeerCerts+0x74>
                else if ((ssl->options.side == WOLFSSL_CLIENT_END) &&
 800322a:	2b10      	cmp	r3, #16
 800322c:	f47f af3c 	bne.w	80030a8 <ProcessPeerCerts+0x11c>
                         IsAtLeastTLSv1_3(ssl->version)) {
 8003230:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
 8003234:	f7fd fbab 	bl	800098e <IsAtLeastTLSv1_3>
                else if ((ssl->options.side == WOLFSSL_CLIENT_END) &&
 8003238:	4604      	mov	r4, r0
 800323a:	2800      	cmp	r0, #0
 800323c:	f43f af34 	beq.w	80030a8 <ProcessPeerCerts+0x11c>
                    SendAlert(ssl, alert_fatal, decode_error);
 8003240:	2232      	movs	r2, #50	; 0x32
 8003242:	2102      	movs	r1, #2
 8003244:	4628      	mov	r0, r5
 8003246:	f7ff fe61 	bl	8002f0c <SendAlert>
 800324a:	e72b      	b.n	80030a4 <ProcessPeerCerts+0x118>
        ret = 0;
 800324c:	461c      	mov	r4, r3
 800324e:	e72b      	b.n	80030a8 <ProcessPeerCerts+0x11c>
                ERROR_OUT(MEMORY_E, exit_ppc);
 8003250:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8003254:	e6d4      	b.n	8003000 <ProcessPeerCerts+0x74>
    switch (ssl->options.asyncState)
 8003256:	2400      	movs	r4, #0
 8003258:	e73c      	b.n	80030d4 <ProcessPeerCerts+0x148>
 800325a:	bf00      	nop
 800325c:	fffffeb8 	.word	0xfffffeb8
 8003260:	fffffe7e 	.word	0xfffffe7e
 8003264:	fffffe90 	.word	0xfffffe90
                    args->certIdx = args->count - 1;
 8003268:	3b01      	subs	r3, #1
 800326a:	61b3      	str	r3, [r6, #24]
                    ret = ProcessPeerCertParse(ssl, args, CHAIN_CERT_TYPE,
 800326c:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
 8003270:	aa03      	add	r2, sp, #12
 8003272:	9201      	str	r2, [sp, #4]
 8003274:	43db      	mvns	r3, r3
 8003276:	aa02      	add	r2, sp, #8
 8003278:	9200      	str	r2, [sp, #0]
 800327a:	0fdb      	lsrs	r3, r3, #31
 800327c:	2225      	movs	r2, #37	; 0x25
 800327e:	4631      	mov	r1, r6
 8003280:	4628      	mov	r0, r5
 8003282:	f7fd f9e0 	bl	8000646 <ProcessPeerCertParse>
                    if (ret == 0) {
 8003286:	4604      	mov	r4, r0
 8003288:	2800      	cmp	r0, #0
 800328a:	d148      	bne.n	800331e <ProcessPeerCerts+0x392>
    if (ssl->options.verifyNone) {
 800328c:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
 8003290:	2b00      	cmp	r3, #0
 8003292:	db12      	blt.n	80032ba <ProcessPeerCerts+0x32e>
    switch (args->dCert->keyOID) {
 8003294:	6872      	ldr	r2, [r6, #4]
 8003296:	69d3      	ldr	r3, [r2, #28]
 8003298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329c:	d038      	beq.n	8003310 <ProcessPeerCerts+0x384>
 800329e:	f240 2106 	movw	r1, #518	; 0x206
 80032a2:	428b      	cmp	r3, r1
 80032a4:	d109      	bne.n	80032ba <ProcessPeerCerts+0x32e>
            if (ssl->options.minEccKeySz < 0 ||
 80032a6:	f9b5 3286 	ldrsh.w	r3, [r5, #646]	; 0x286
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db43      	blt.n	8003336 <ProcessPeerCerts+0x3aa>
 80032ae:	6852      	ldr	r2, [r2, #4]
                ret = ECC_KEY_SIZE_E;
 80032b0:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 80032b4:	429a      	cmp	r2, r3
 80032b6:	bf38      	it	cc
 80032b8:	460c      	movcc	r4, r1
                    ret = DoVerifyCallback(SSL_CM(ssl), ssl, ret, args);
 80032ba:	6828      	ldr	r0, [r5, #0]
 80032bc:	4633      	mov	r3, r6
 80032be:	4622      	mov	r2, r4
 80032c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80032c2:	4629      	mov	r1, r5
 80032c4:	f7fe fd22 	bl	8001d0c <DoVerifyCallback>
 80032c8:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
                    if (ssl->options.verifyNone &&
 80032cc:	2b00      	cmp	r3, #0
                    ret = DoVerifyCallback(SSL_CM(ssl), ssl, ret, args);
 80032ce:	4604      	mov	r4, r0
                    if (ssl->options.verifyNone &&
 80032d0:	da33      	bge.n	800333a <ProcessPeerCerts+0x3ae>
                              (ret == CRL_MISSING || ret == CRL_CERT_REVOKED ||
 80032d2:	f500 72b5 	add.w	r2, r0, #362	; 0x16a
                    if (ssl->options.verifyNone &&
 80032d6:	2a01      	cmp	r2, #1
 80032d8:	d902      	bls.n	80032e0 <ProcessPeerCerts+0x354>
                              (ret == CRL_MISSING || ret == CRL_CERT_REVOKED ||
 80032da:	f110 0fb3 	cmn.w	r0, #179	; 0xb3
 80032de:	d12c      	bne.n	800333a <ProcessPeerCerts+0x3ae>
                        ret = ssl->error = 0;
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
                    if (ret == 0 && args->dCert->isCA &&
 80032e6:	6872      	ldr	r2, [r6, #4]
 80032e8:	f892 2354 	ldrb.w	r2, [r2, #852]	; 0x354
 80032ec:	06d0      	lsls	r0, r2, #27
 80032ee:	d434      	bmi.n	800335a <ProcessPeerCerts+0x3ce>
                    ssl->error = ret; /* Report SSL error or clear error if
 80032f0:	2400      	movs	r4, #0
 80032f2:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
                    FreeDecodedCert(args->dCert);
 80032f6:	6870      	ldr	r0, [r6, #4]
 80032f8:	f010 fbb7 	bl	8013a6a <FreeDecodedCert>
                    args->dCertInit = 0;
 80032fc:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003300:	f36f 0382 	bfc	r3, #2, #1
 8003304:	f886 3020 	strb.w	r3, [r6, #32]
                    args->count--;
 8003308:	6973      	ldr	r3, [r6, #20]
 800330a:	3b01      	subs	r3, #1
 800330c:	6173      	str	r3, [r6, #20]
 800330e:	e6e4      	b.n	80030da <ProcessPeerCerts+0x14e>
            if (ssl->options.minEccKeySz < 0 ||
 8003310:	f8b5 3286 	ldrh.w	r3, [r5, #646]	; 0x286
                ret = ECC_KEY_SIZE_E;
 8003314:	4aa6      	ldr	r2, [pc, #664]	; (80035b0 <ProcessPeerCerts+0x624>)
 8003316:	2b20      	cmp	r3, #32
 8003318:	bf88      	it	hi
 800331a:	4614      	movhi	r4, r2
 800331c:	e7cd      	b.n	80032ba <ProcessPeerCerts+0x32e>
                    else if (ret == ASN_PARSE_E || ret == BUFFER_E ||
 800331e:	f110 0f8c 	cmn.w	r0, #140	; 0x8c
 8003322:	f43f ae6d 	beq.w	8003000 <ProcessPeerCerts+0x74>
 8003326:	f110 0f84 	cmn.w	r0, #132	; 0x84
 800332a:	f43f ae69 	beq.w	8003000 <ProcessPeerCerts+0x74>
 800332e:	f110 0f7d 	cmn.w	r0, #125	; 0x7d
 8003332:	d1c2      	bne.n	80032ba <ProcessPeerCerts+0x32e>
 8003334:	e664      	b.n	8003000 <ProcessPeerCerts+0x74>
                ret = ECC_KEY_SIZE_E;
 8003336:	4c9e      	ldr	r4, [pc, #632]	; (80035b0 <ProcessPeerCerts+0x624>)
 8003338:	e7bf      	b.n	80032ba <ProcessPeerCerts+0x32e>
                    if (ret == 0 && args->dCert->isCA &&
 800333a:	2c00      	cmp	r4, #0
 800333c:	d0d3      	beq.n	80032e6 <ProcessPeerCerts+0x35a>
                    ssl->error = ret; /* Report SSL error or clear error if
 800333e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
                    if (ret != 0) {
 8003342:	2c00      	cmp	r4, #0
 8003344:	d0d7      	beq.n	80032f6 <ProcessPeerCerts+0x36a>
                        if (!ssl->options.verifyNone) {
 8003346:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
 800334a:	2b00      	cmp	r3, #0
 800334c:	db31      	blt.n	80033b2 <ProcessPeerCerts+0x426>
                            DoCertFatalAlert(ssl, ret);
 800334e:	4621      	mov	r1, r4
 8003350:	4628      	mov	r0, r5
 8003352:	f7ff fdf6 	bl	8002f42 <DoCertFatalAlert>
                            args->lastErr = ret;
 8003356:	61f4      	str	r4, [r6, #28]
            if (ret != 0) {
 8003358:	e652      	b.n	8003000 <ProcessPeerCerts+0x74>
                    if (ret == 0 && args->dCert->isCA &&
 800335a:	2b00      	cmp	r3, #0
 800335c:	dbc8      	blt.n	80032f0 <ProcessPeerCerts+0x364>
                        if (!alreadySigner) {
 800335e:	9f03      	ldr	r7, [sp, #12]
 8003360:	2f00      	cmp	r7, #0
 8003362:	d1c5      	bne.n	80032f0 <ProcessPeerCerts+0x364>
                        buffer* cert = &args->certs[args->certIdx];
 8003364:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8003368:	f8d6 9000 	ldr.w	r9, [r6]
                            ret = AllocDer(&add, cert->length, CA_TYPE, ssl->heap);
 800336c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                            DerBuffer* add = NULL;
 800336e:	9705      	str	r7, [sp, #20]
                        buffer* cert = &args->certs[args->certIdx];
 8003370:	eb09 0bca 	add.w	fp, r9, sl, lsl #3
                            ret = AllocDer(&add, cert->length, CA_TYPE, ssl->heap);
 8003374:	2205      	movs	r2, #5
 8003376:	f8db 1004 	ldr.w	r1, [fp, #4]
 800337a:	a805      	add	r0, sp, #20
 800337c:	f010 fdd2 	bl	8013f24 <AllocDer>
                            if (ret < 0)
 8003380:	1e04      	subs	r4, r0, #0
 8003382:	f6ff ae3d 	blt.w	8003000 <ProcessPeerCerts+0x74>
                            XMEMCPY(add->buffer, cert->buffer, cert->length);
 8003386:	9b05      	ldr	r3, [sp, #20]
 8003388:	f8db 2004 	ldr.w	r2, [fp, #4]
 800338c:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f01a fb07 	bl	801d9a4 <memcpy>
                            ret = AddCA(SSL_CM(ssl), &add, WOLFSSL_CHAIN_CA,
 8003396:	6828      	ldr	r0, [r5, #0]
 8003398:	463b      	mov	r3, r7
 800339a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800339c:	2202      	movs	r2, #2
 800339e:	a905      	add	r1, sp, #20
 80033a0:	f004 f8c6 	bl	8007530 <AddCA>
                            if (ret == WOLFSSL_SUCCESS) {
 80033a4:	2801      	cmp	r0, #1
                            ret = AddCA(SSL_CM(ssl), &add, WOLFSSL_CHAIN_CA,
 80033a6:	4604      	mov	r4, r0
                            if (ret == WOLFSSL_SUCCESS) {
 80033a8:	d1c9      	bne.n	800333e <ProcessPeerCerts+0x3b2>
                    ssl->error = ret; /* Report SSL error or clear error if
 80033aa:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
                                ret = 0;
 80033ae:	463c      	mov	r4, r7
 80033b0:	e7a1      	b.n	80032f6 <ProcessPeerCerts+0x36a>
                        if (args->lastErr == 0) {
 80033b2:	69f3      	ldr	r3, [r6, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d19e      	bne.n	80032f6 <ProcessPeerCerts+0x36a>
                            args->lastErr = ret; /* save error from last time */
 80033b8:	61f4      	str	r4, [r6, #28]
                            ret = 0; /* reset error */
 80033ba:	461c      	mov	r4, r3
 80033bc:	e79b      	b.n	80032f6 <ProcessPeerCerts+0x36a>
                        args->fatal = 0;
 80033be:	f362 0300 	bfi	r3, r2, #0, #1
                    args->fatal = 1;
 80033c2:	f886 3020 	strb.w	r3, [r6, #32]
 80033c6:	e6c2      	b.n	800314e <ProcessPeerCerts+0x1c2>
                else if (ret == ASN_PARSE_E || ret == BUFFER_E ||
 80033c8:	f020 0308 	bic.w	r3, r0, #8
 80033cc:	338c      	adds	r3, #140	; 0x8c
 80033ce:	d002      	beq.n	80033d6 <ProcessPeerCerts+0x44a>
 80033d0:	f110 0f7d 	cmn.w	r0, #125	; 0x7d
 80033d4:	d104      	bne.n	80033e0 <ProcessPeerCerts+0x454>
                    args->fatal = 1;
 80033d6:	f896 3020 	ldrb.w	r3, [r6, #32]
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	e7f0      	b.n	80033c2 <ProcessPeerCerts+0x436>
                    if (ssl->verifyCallback) {
 80033e0:	6a2b      	ldr	r3, [r5, #32]
 80033e2:	b173      	cbz	r3, 8003402 <ProcessPeerCerts+0x476>
                        args->fatal = (args->verifyErr) ? 1 : 0;
 80033e4:	f896 3020 	ldrb.w	r3, [r6, #32]
 80033e8:	085a      	lsrs	r2, r3, #1
 80033ea:	f362 0300 	bfi	r3, r2, #0, #1
                        if (args->fatal)
 80033ee:	07d9      	lsls	r1, r3, #31
                        args->fatal = (args->verifyErr) ? 1 : 0;
 80033f0:	f886 3020 	strb.w	r3, [r6, #32]
                        if (args->fatal)
 80033f4:	f57f aeab 	bpl.w	800314e <ProcessPeerCerts+0x1c2>
                        DoCertFatalAlert(ssl, ret);
 80033f8:	4621      	mov	r1, r4
 80033fa:	4628      	mov	r0, r5
 80033fc:	f7ff fda1 	bl	8002f42 <DoCertFatalAlert>
 8003400:	e6a5      	b.n	800314e <ProcessPeerCerts+0x1c2>
                        args->fatal = 1;
 8003402:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	f886 3020 	strb.w	r3, [r6, #32]
 800340e:	e7f3      	b.n	80033f8 <ProcessPeerCerts+0x46c>
    switch (ssl->options.asyncState)
 8003410:	2400      	movs	r4, #0
 8003412:	e6a6      	b.n	8003162 <ProcessPeerCerts+0x1d6>
                            ret = EXTKEYUSE_AUTH_E;
 8003414:	f012 0f05 	tst.w	r2, #5
 8003418:	e6cd      	b.n	80031b6 <ProcessPeerCerts+0x22a>
                ssl->options.havePeerCert = 1;
 800341a:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
                if (ssl->options.side == WOLFSSL_CLIENT_END &&
 800341e:	f895 2270 	ldrb.w	r2, [r5, #624]	; 0x270
                ssl->options.havePeerCert = 1;
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
                if (ssl->options.side == WOLFSSL_CLIENT_END &&
 800342a:	f002 0330 	and.w	r3, r2, #48	; 0x30
 800342e:	2b10      	cmp	r3, #16
 8003430:	d108      	bne.n	8003444 <ProcessPeerCerts+0x4b8>
 8003432:	f895 314f 	ldrb.w	r3, [r5, #335]	; 0x14f
 8003436:	b12b      	cbz	r3, 8003444 <ProcessPeerCerts+0x4b8>
                    ssl->options.peerAuthGood = 1;
 8003438:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	f885 3276 	strb.w	r3, [r5, #630]	; 0x276
                if (!ssl->options.verifyNone && ssl->buffers.domainName.buffer) {
 8003444:	0611      	lsls	r1, r2, #24
 8003446:	d40b      	bmi.n	8003460 <ProcessPeerCerts+0x4d4>
 8003448:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800344c:	b141      	cbz	r1, 8003460 <ProcessPeerCerts+0x4d4>
                    if (args->dCert->altNames) {
 800344e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d060      	beq.n	8003516 <ProcessPeerCerts+0x58a>
                        if (CheckForAltNames(args->dCert,
 8003454:	2200      	movs	r2, #0
 8003456:	f7fe fc2d 	bl	8001cb4 <CheckForAltNames>
 800345a:	2801      	cmp	r0, #1
 800345c:	d000      	beq.n	8003460 <ProcessPeerCerts+0x4d4>
                            ret = DOMAIN_NAME_MISMATCH;
 800345e:	4c55      	ldr	r4, [pc, #340]	; (80035b4 <ProcessPeerCerts+0x628>)
                switch (args->dCert->keyOID) {
 8003460:	6873      	ldr	r3, [r6, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003468:	f000 808a 	beq.w	8003580 <ProcessPeerCerts+0x5f4>
 800346c:	f240 2206 	movw	r2, #518	; 0x206
 8003470:	4293      	cmp	r3, r2
 8003472:	d11e      	bne.n	80034b2 <ProcessPeerCerts+0x526>
                        if (ssl->peerEccDsaKey == NULL) {
 8003474:	f8d5 72a0 	ldr.w	r7, [r5, #672]	; 0x2a0
                        word32 idx = 0;
 8003478:	f04f 0900 	mov.w	r9, #0
 800347c:	f8cd 9014 	str.w	r9, [sp, #20]
                        if (ssl->peerEccDsaKey == NULL) {
 8003480:	2f00      	cmp	r7, #0
 8003482:	d150      	bne.n	8003526 <ProcessPeerCerts+0x59a>
                            keyRet = AllocKey(ssl, DYNAMIC_TYPE_ECC,
 8003484:	f505 7228 	add.w	r2, r5, #672	; 0x2a0
 8003488:	2125      	movs	r1, #37	; 0x25
 800348a:	4628      	mov	r0, r5
 800348c:	f7fd ffea 	bl	8001464 <AllocKey>
                        if (keyRet != 0 ||
 8003490:	2800      	cmp	r0, #0
 8003492:	d04b      	beq.n	800352c <ProcessPeerCerts+0x5a0>
                            ret = PEER_KEY_ERROR;
 8003494:	4c48      	ldr	r4, [pc, #288]	; (80035b8 <ProcessPeerCerts+0x62c>)
                        if (ssl->options.side == WOLFSSL_CLIENT_END && ssl->ecdhCurveOID == 0)
 8003496:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
 800349a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d107      	bne.n	80034b2 <ProcessPeerCerts+0x526>
 80034a2:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 80034a6:	b923      	cbnz	r3, 80034b2 <ProcessPeerCerts+0x526>
                            ssl->ecdhCurveOID = args->dCert->pkCurveOID;
 80034a8:	6873      	ldr	r3, [r6, #4]
 80034aa:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
                            ssl->ecdhCurveOID = ECC_X25519_OID;
 80034ae:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
            if (args->fatal && ret != 0) {
 80034b2:	f896 3020 	ldrb.w	r3, [r6, #32]
 80034b6:	07da      	lsls	r2, r3, #31
 80034b8:	d502      	bpl.n	80034c0 <ProcessPeerCerts+0x534>
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	f47f ada0 	bne.w	8003000 <ProcessPeerCerts+0x74>
            ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 80034c0:	2304      	movs	r3, #4
 80034c2:	f885 3283 	strb.w	r3, [r5, #643]	; 0x283
            if (args->lastErr != 0 && ret == 0) {
 80034c6:	69f3      	ldr	r3, [r6, #28]
 80034c8:	b113      	cbz	r3, 80034d0 <ProcessPeerCerts+0x544>
 80034ca:	2c00      	cmp	r4, #0
 80034cc:	bf08      	it	eq
 80034ce:	461c      	moveq	r4, r3
            ret = DoVerifyCallback(SSL_CM(ssl), ssl, ret, args);
 80034d0:	6828      	ldr	r0, [r5, #0]
 80034d2:	4622      	mov	r2, r4
 80034d4:	4633      	mov	r3, r6
 80034d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80034d8:	4629      	mov	r1, r5
 80034da:	f7fe fc17 	bl	8001d0c <DoVerifyCallback>
            if (ssl->options.verifyNone &&
 80034de:	f995 2270 	ldrsb.w	r2, [r5, #624]	; 0x270
 80034e2:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
 80034e6:	2a00      	cmp	r2, #0
            ret = DoVerifyCallback(SSL_CM(ssl), ssl, ret, args);
 80034e8:	4604      	mov	r4, r0
            if (ssl->options.verifyNone &&
 80034ea:	f280 80a0 	bge.w	800362e <ProcessPeerCerts+0x6a2>
                              (ret == CRL_MISSING || ret == CRL_CERT_REVOKED ||
 80034ee:	f500 72b5 	add.w	r2, r0, #362	; 0x16a
            if (ssl->options.verifyNone &&
 80034f2:	2a01      	cmp	r2, #1
 80034f4:	d903      	bls.n	80034fe <ProcessPeerCerts+0x572>
                              (ret == CRL_MISSING || ret == CRL_CERT_REVOKED ||
 80034f6:	f110 0fb3 	cmn.w	r0, #179	; 0xb3
 80034fa:	f040 80b2 	bne.w	8003662 <ProcessPeerCerts+0x6d6>
                ret = ssl->error = 0;
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
            if (ret == 0 && ssl->options.side == WOLFSSL_CLIENT_END) {
 8003504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003508:	2b10      	cmp	r3, #16
 800350a:	d102      	bne.n	8003512 <ProcessPeerCerts+0x586>
                ssl->options.serverState = SERVER_CERT_COMPLETE;
 800350c:	2305      	movs	r3, #5
 800350e:	f885 327c 	strb.w	r3, [r5, #636]	; 0x27c
 8003512:	2400      	movs	r4, #0
 8003514:	e094      	b.n	8003640 <ProcessPeerCerts+0x6b4>
                        if (MatchDomainName(
 8003516:	460a      	mov	r2, r1
 8003518:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
 800351c:	f7fe fb78 	bl	8001c10 <MatchDomainName>
 8003520:	2800      	cmp	r0, #0
 8003522:	d09c      	beq.n	800345e <ProcessPeerCerts+0x4d2>
 8003524:	e79c      	b.n	8003460 <ProcessPeerCerts+0x4d4>
                        } else if (ssl->peerEccDsaKeyPresent) {
 8003526:	f895 32a6 	ldrb.w	r3, [r5, #678]	; 0x2a6
 800352a:	b9eb      	cbnz	r3, 8003568 <ProcessPeerCerts+0x5dc>
                            wc_EccPublicKeyDecode(args->dCert->publicKey, &idx,
 800352c:	6870      	ldr	r0, [r6, #4]
 800352e:	f8d5 22a0 	ldr.w	r2, [r5, #672]	; 0x2a0
 8003532:	6843      	ldr	r3, [r0, #4]
 8003534:	6800      	ldr	r0, [r0, #0]
 8003536:	a905      	add	r1, sp, #20
 8003538:	f010 fe97 	bl	801426a <wc_EccPublicKeyDecode>
                        if (keyRet != 0 ||
 800353c:	2800      	cmp	r0, #0
 800353e:	d1a9      	bne.n	8003494 <ProcessPeerCerts+0x508>
                            ssl->peerEccDsaKeyPresent = 1;
 8003540:	2301      	movs	r3, #1
 8003542:	f885 32a6 	strb.w	r3, [r5, #678]	; 0x2a6
                        if (ret == 0 && ssl->peerEccDsaKeyPresent &&
 8003546:	2c00      	cmp	r4, #0
 8003548:	d1a5      	bne.n	8003496 <ProcessPeerCerts+0x50a>
 800354a:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
 800354e:	2b00      	cmp	r3, #0
 8003550:	dba1      	blt.n	8003496 <ProcessPeerCerts+0x50a>
                                              wc_ecc_size(ssl->peerEccDsaKey)
 8003552:	f8d5 02a0 	ldr.w	r0, [r5, #672]	; 0x2a0
 8003556:	f00a ffce 	bl	800e4f6 <wc_ecc_size>
                                              < ssl->options.minEccKeySz) {
 800355a:	f9b5 2286 	ldrsh.w	r2, [r5, #646]	; 0x286
                            ret = ECC_KEY_SIZE_E;
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <ProcessPeerCerts+0x624>)
 8003560:	4290      	cmp	r0, r2
 8003562:	bfb8      	it	lt
 8003564:	461c      	movlt	r4, r3
 8003566:	e796      	b.n	8003496 <ProcessPeerCerts+0x50a>
            wc_ecc_free((ecc_key*)pKey);
 8003568:	4638      	mov	r0, r7
 800356a:	f009 fbb6 	bl	800ccda <wc_ecc_free>
            ret = wc_ecc_init_ex((ecc_key*)pKey, ssl->heap, ssl->devId);
 800356e:	f8d5 22bc 	ldr.w	r2, [r5, #700]	; 0x2bc
 8003572:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003574:	4638      	mov	r0, r7
 8003576:	f009 fb8f 	bl	800cc98 <wc_ecc_init_ex>
                            ssl->peerEccDsaKeyPresent = 0;
 800357a:	f885 92a6 	strb.w	r9, [r5, #678]	; 0x2a6
 800357e:	e787      	b.n	8003490 <ProcessPeerCerts+0x504>
                        if (ssl->peerEd25519Key == NULL) {
 8003580:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
 8003584:	b9d7      	cbnz	r7, 80035bc <ProcessPeerCerts+0x630>
                            keyRet = AllocKey(ssl, DYNAMIC_TYPE_ED25519,
 8003586:	f505 722b 	add.w	r2, r5, #684	; 0x2ac
 800358a:	2146      	movs	r1, #70	; 0x46
 800358c:	4628      	mov	r0, r5
 800358e:	f7fd ff69 	bl	8001464 <AllocKey>
                        if (keyRet != 0 ||
 8003592:	b1b0      	cbz	r0, 80035c2 <ProcessPeerCerts+0x636>
                            ret = PEER_KEY_ERROR;
 8003594:	4c08      	ldr	r4, [pc, #32]	; (80035b8 <ProcessPeerCerts+0x62c>)
                        if (ssl->options.side == WOLFSSL_CLIENT_END && ssl->ecdhCurveOID == 0)
 8003596:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
 800359a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d187      	bne.n	80034b2 <ProcessPeerCerts+0x526>
 80035a2:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d183      	bne.n	80034b2 <ProcessPeerCerts+0x526>
                            ssl->ecdhCurveOID = ECC_X25519_OID;
 80035aa:	f240 136d 	movw	r3, #365	; 0x16d
 80035ae:	e77e      	b.n	80034ae <ProcessPeerCerts+0x522>
 80035b0:	fffffe66 	.word	0xfffffe66
 80035b4:	fffffebe 	.word	0xfffffebe
 80035b8:	fffffeaa 	.word	0xfffffeaa
                        } else if (ssl->peerEd25519KeyPresent) {
 80035bc:	f895 32b0 	ldrb.w	r3, [r5, #688]	; 0x2b0
 80035c0:	b9c3      	cbnz	r3, 80035f4 <ProcessPeerCerts+0x668>
                            wc_ed25519_import_public(args->dCert->publicKey,
 80035c2:	6873      	ldr	r3, [r6, #4]
 80035c4:	f8d5 22ac 	ldr.w	r2, [r5, #684]	; 0x2ac
 80035c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035cc:	f012 fda0 	bl	8016110 <wc_ed25519_import_public>
                        if (keyRet != 0 ||
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d1df      	bne.n	8003594 <ProcessPeerCerts+0x608>
                            ssl->peerEd25519KeyPresent = 1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f885 32b0 	strb.w	r3, [r5, #688]	; 0x2b0
                        if (ret == 0 && ssl->peerEd25519KeyPresent &&
 80035da:	2c00      	cmp	r4, #0
 80035dc:	d1db      	bne.n	8003596 <ProcessPeerCerts+0x60a>
 80035de:	f995 3270 	ldrsb.w	r3, [r5, #624]	; 0x270
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	dbd7      	blt.n	8003596 <ProcessPeerCerts+0x60a>
                                  !ssl->options.verifyNone &&
 80035e6:	f9b5 2286 	ldrsh.w	r2, [r5, #646]	; 0x286
                            ret = ECC_KEY_SIZE_E;
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <ProcessPeerCerts+0x708>)
 80035ec:	2a20      	cmp	r2, #32
 80035ee:	bfc8      	it	gt
 80035f0:	461c      	movgt	r4, r3
 80035f2:	e7d0      	b.n	8003596 <ProcessPeerCerts+0x60a>
            wc_ed25519_free((ed25519_key*)pKey);
 80035f4:	4638      	mov	r0, r7
 80035f6:	f012 fd26 	bl	8016046 <wc_ed25519_free>
            ret = wc_ed25519_init_ex((ed25519_key*)pKey, ssl->heap,
 80035fa:	f8d5 22bc 	ldr.w	r2, [r5, #700]	; 0x2bc
 80035fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003600:	4638      	mov	r0, r7
 8003602:	f012 fd10 	bl	8016026 <wc_ed25519_init_ex>
                            ssl->peerEd25519KeyPresent = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	f885 32b0 	strb.w	r3, [r5, #688]	; 0x2b0
 800360c:	e7c1      	b.n	8003592 <ProcessPeerCerts+0x606>
    switch (ssl->options.asyncState)
 800360e:	2400      	movs	r4, #0
 8003610:	e759      	b.n	80034c6 <ProcessPeerCerts+0x53a>
 8003612:	2400      	movs	r4, #0
 8003614:	e021      	b.n	800365a <ProcessPeerCerts+0x6ce>
 8003616:	f46f 7496 	mvn.w	r4, #300	; 0x12c
 800361a:	e4f1      	b.n	8003000 <ProcessPeerCerts+0x74>
        ERROR_OUT(MEMORY_E, exit_ppc);
 800361c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    FreeKeyExchange(ssl);
 8003620:	4628      	mov	r0, r5
 8003622:	f7fd ff75 	bl	8001510 <FreeKeyExchange>
}
 8003626:	4620      	mov	r0, r4
 8003628:	b007      	add	sp, #28
 800362a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ret != 0) {
 800362e:	2800      	cmp	r0, #0
 8003630:	f43f af68 	beq.w	8003504 <ProcessPeerCerts+0x578>
                    DoCertFatalAlert(ssl, ret);
 8003634:	4621      	mov	r1, r4
 8003636:	4628      	mov	r0, r5
 8003638:	f7ff fc83 	bl	8002f42 <DoCertFatalAlert>
                ssl->error = ret; /* Report SSL error */
 800363c:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
            if (IsEncryptionOn(ssl, 0)) {
 8003640:	2100      	movs	r1, #0
 8003642:	4628      	mov	r0, r5
 8003644:	f7fd f9b3 	bl	80009ae <IsEncryptionOn>
 8003648:	b120      	cbz	r0, 8003654 <ProcessPeerCerts+0x6c8>
                args->idx += ssl->keys.padSz;
 800364a:	68b3      	ldr	r3, [r6, #8]
 800364c:	f8d5 2264 	ldr.w	r2, [r5, #612]	; 0x264
 8003650:	4413      	add	r3, r2
 8003652:	60b3      	str	r3, [r6, #8]
            ssl->options.asyncState = TLS_ASYNC_END;
 8003654:	2305      	movs	r3, #5
 8003656:	f885 3283 	strb.w	r3, [r5, #643]	; 0x283
            *inOutIdx = args->idx;
 800365a:	68b3      	ldr	r3, [r6, #8]
 800365c:	f8c8 3000 	str.w	r3, [r8]
            break;
 8003660:	e4ce      	b.n	8003000 <ProcessPeerCerts+0x74>
            if (ret != 0) {
 8003662:	2800      	cmp	r0, #0
 8003664:	d1ea      	bne.n	800363c <ProcessPeerCerts+0x6b0>
 8003666:	e74d      	b.n	8003504 <ProcessPeerCerts+0x578>
                    if ((ssl->specs.kea != rsa_kea) &&
 8003668:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d008      	beq.n	8003682 <ProcessPeerCerts+0x6f6>
                            (ssl->specs.sig_algo == ecc_dsa_sa_algo &&
 8003670:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
 8003674:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
                        (ssl->specs.sig_algo == rsa_sa_algo ||
 800367c:	2b03      	cmp	r3, #3
 800367e:	f47f ad8b 	bne.w	8003198 <ProcessPeerCerts+0x20c>
                                 !ssl->specs.static_ecdh)) &&
 8003682:	f8b0 32f8 	ldrh.w	r3, [r0, #760]	; 0x2f8
                        ret = KEYUSE_SIGNATURE_E;
 8003686:	f013 0f80 	tst.w	r3, #128	; 0x80
 800368a:	bf08      	it	eq
 800368c:	f46f 74bf 	mvneq.w	r4, #382	; 0x17e
 8003690:	e582      	b.n	8003198 <ProcessPeerCerts+0x20c>
 8003692:	bf00      	nop
 8003694:	fffffe66 	.word	0xfffffe66

08003698 <DoApplicationData>:
{
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (ssl->options.handShakeDone == 0) {
 800369a:	f890 627f 	ldrb.w	r6, [r0, #639]	; 0x27f
    word32 msgSz   = WOLFSSL_IS_QUIC(ssl)? ssl->curSize : ssl->keys.encryptSz;
 800369e:	f8d0 5260 	ldr.w	r5, [r0, #608]	; 0x260
    word32 idx     = *inOutIdx;
 80036a2:	6817      	ldr	r7, [r2, #0]
{
 80036a4:	4604      	mov	r4, r0
    if (ssl->options.handShakeDone == 0) {
 80036a6:	b93e      	cbnz	r6, 80036b8 <DoApplicationData+0x20>
        if (sniff == NO_SNIFF) {
 80036a8:	b91b      	cbnz	r3, 80036b2 <DoApplicationData+0x1a>
            SendAlert(ssl, alert_fatal, unexpected_message);
 80036aa:	220a      	movs	r2, #10
 80036ac:	2102      	movs	r1, #2
 80036ae:	f7ff fc2d 	bl	8002f0c <SendAlert>
        return OUT_OF_ORDER_E;
 80036b2:	f46f 70ba 	mvn.w	r0, #372	; 0x174
 80036b6:	e02f      	b.n	8003718 <DoApplicationData+0x80>
    if (ssl->specs.cipher_type == block) {
 80036b8:	f890 0149 	ldrb.w	r0, [r0, #329]	; 0x149
 80036bc:	2801      	cmp	r0, #1
 80036be:	d114      	bne.n	80036ea <DoApplicationData+0x52>
        if (ssl->options.tls1_1)
 80036c0:	f994 0271 	ldrsb.w	r0, [r4, #625]	; 0x271
 80036c4:	2800      	cmp	r0, #0
 80036c6:	da1b      	bge.n	8003700 <DoApplicationData+0x68>
            ivExtra = ssl->specs.block_size;
 80036c8:	f8b4 c144 	ldrh.w	ip, [r4, #324]	; 0x144
    dataSz = msgSz - ivExtra - ssl->keys.padSz;
 80036cc:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
 80036d0:	1ba8      	subs	r0, r5, r6
 80036d2:	eba0 000c 	sub.w	r0, r0, ip
    if (dataSz < 0) {
 80036d6:	2800      	cmp	r0, #0
 80036d8:	da15      	bge.n	8003706 <DoApplicationData+0x6e>
        if (sniff == NO_SNIFF) {
 80036da:	b923      	cbnz	r3, 80036e6 <DoApplicationData+0x4e>
            SendAlert(ssl, alert_fatal, unexpected_message);
 80036dc:	220a      	movs	r2, #10
 80036de:	2102      	movs	r1, #2
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7ff fc13 	bl	8002f0c <SendAlert>
        return BUFFER_ERROR;
 80036e6:	480d      	ldr	r0, [pc, #52]	; (800371c <DoApplicationData+0x84>)
 80036e8:	e016      	b.n	8003718 <DoApplicationData+0x80>
    if (ssl->specs.cipher_type == aead) {
 80036ea:	2802      	cmp	r0, #2
 80036ec:	d108      	bne.n	8003700 <DoApplicationData+0x68>
    return (ssl->specs.cipher_type == aead) &&
 80036ee:	f894 0148 	ldrb.w	r0, [r4, #328]	; 0x148
            ivExtra = AESGCM_EXP_IV_SZ;
 80036f2:	2809      	cmp	r0, #9
 80036f4:	bf0c      	ite	eq
 80036f6:	f04f 0c00 	moveq.w	ip, #0
 80036fa:	f04f 0c08 	movne.w	ip, #8
 80036fe:	e7e5      	b.n	80036cc <DoApplicationData+0x34>
    int    ivExtra = 0;
 8003700:	f04f 0c00 	mov.w	ip, #0
 8003704:	e7e2      	b.n	80036cc <DoApplicationData+0x34>
    byte*  rawData = input + idx;  /* keep current  for hmac */
 8003706:	bf1c      	itt	ne
 8003708:	19c9      	addne	r1, r1, r7
        idx += rawSz;
 800370a:	183f      	addne	r7, r7, r0
    idx += ssl->keys.padSz;
 800370c:	443e      	add	r6, r7
        ssl->buffers.clearOutputBuffer.length = dataSz;
 800370e:	bf18      	it	ne
 8003710:	e9c4 102e 	strdne	r1, r0, [r4, #184]	; 0xb8
    *inOutIdx = idx;
 8003714:	6016      	str	r6, [r2, #0]
    return 0;
 8003716:	2000      	movs	r0, #0
}
 8003718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800371a:	bf00      	nop
 800371c:	fffffeb8 	.word	0xfffffeb8

08003720 <SetCipherList>:
{
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003724:	4682      	mov	sl, r0
 8003726:	b09b      	sub	sp, #108	; 0x6c
 8003728:	4616      	mov	r6, r2
    if (suites == NULL || list == NULL) {
 800372a:	460d      	mov	r5, r1
 800372c:	b909      	cbnz	r1, 8003732 <SetCipherList+0x12>
                    return 0; /* suites buffer not large enough, error out */
 800372e:	2400      	movs	r4, #0
 8003730:	e01c      	b.n	800376c <SetCipherList+0x4c>
    if (suites == NULL || list == NULL) {
 8003732:	2a00      	cmp	r2, #0
 8003734:	d0fb      	beq.n	800372e <SetCipherList+0xe>
    if (next[0] == 0 || XSTRCMP(next, "ALL") == 0 ||
 8003736:	7813      	ldrb	r3, [r2, #0]
 8003738:	b9e3      	cbnz	r3, 8003774 <SetCipherList+0x54>
        InitSuites(suites, ctx->method->version,
 800373a:	f8da 2000 	ldr.w	r2, [sl]
 800373e:	7893      	ldrb	r3, [r2, #2]
 8003740:	930a      	str	r3, [sp, #40]	; 0x28
 8003742:	2401      	movs	r4, #1
 8003744:	2300      	movs	r3, #0
 8003746:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800374a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800374e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003752:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003756:	e9cd 4400 	strd	r4, r4, [sp]
 800375a:	7850      	ldrb	r0, [r2, #1]
 800375c:	7811      	ldrb	r1, [r2, #0]
 800375e:	f8da 2020 	ldr.w	r2, [sl, #32]
 8003762:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003766:	4628      	mov	r0, r5
 8003768:	f7fd fa57 	bl	8000c1a <InitSuites>
}
 800376c:	4620      	mov	r0, r4
 800376e:	b01b      	add	sp, #108	; 0x6c
 8003770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (next[0] == 0 || XSTRCMP(next, "ALL") == 0 ||
 8003774:	494a      	ldr	r1, [pc, #296]	; (80038a0 <SetCipherList+0x180>)
 8003776:	4610      	mov	r0, r2
 8003778:	f01a fa8d 	bl	801dc96 <strcmp>
 800377c:	2800      	cmp	r0, #0
 800377e:	d0dc      	beq.n	800373a <SetCipherList+0x1a>
        XSTRCMP(next, "DEFAULT") == 0 || XSTRCMP(next, "HIGH") == 0) {
 8003780:	4948      	ldr	r1, [pc, #288]	; (80038a4 <SetCipherList+0x184>)
 8003782:	4630      	mov	r0, r6
 8003784:	f01a fa87 	bl	801dc96 <strcmp>
    if (next[0] == 0 || XSTRCMP(next, "ALL") == 0 ||
 8003788:	2800      	cmp	r0, #0
 800378a:	d0d6      	beq.n	800373a <SetCipherList+0x1a>
        XSTRCMP(next, "DEFAULT") == 0 || XSTRCMP(next, "HIGH") == 0) {
 800378c:	4946      	ldr	r1, [pc, #280]	; (80038a8 <SetCipherList+0x188>)
 800378e:	4630      	mov	r0, r6
 8003790:	f01a fa81 	bl	801dc96 <strcmp>
 8003794:	2800      	cmp	r0, #0
 8003796:	d0d0      	beq.n	800373a <SetCipherList+0x1a>
    int       haveSig          = 0;
 8003798:	2700      	movs	r7, #0
    int       idx              = 0;
 800379a:	46b8      	mov	r8, r7
    int       ret              = 0;
 800379c:	463c      	mov	r4, r7
        next = XSTRSTR(next, ":");
 800379e:	4943      	ldr	r1, [pc, #268]	; (80038ac <SetCipherList+0x18c>)
 80037a0:	4630      	mov	r0, r6
 80037a2:	f01a fab1 	bl	801dd08 <strstr>
        if (next != NULL) {
 80037a6:	4681      	mov	r9, r0
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d058      	beq.n	800385e <SetCipherList+0x13e>
            word32 currLen = (word32)(next - current);
 80037ac:	eba0 0b06 	sub.w	fp, r0, r6
        length = MAX_SUITE_NAME;
 80037b0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80037b4:	bf28      	it	cs
 80037b6:	f04f 0b30 	movcs.w	fp, #48	; 0x30
        XSTRNCPY(name, current, length);
 80037ba:	465a      	mov	r2, fp
 80037bc:	4631      	mov	r1, r6
 80037be:	a80d      	add	r0, sp, #52	; 0x34
 80037c0:	f01a fa8f 	bl	801dce2 <strncpy>
        name[(length == sizeof(name)) ? length - 1 : length] = 0;
 80037c4:	f10b 0368 	add.w	r3, fp, #104	; 0x68
 80037c8:	eb0d 0b03 	add.w	fp, sp, r3
 80037cc:	2600      	movs	r6, #0
 80037ce:	f80b 6c34 	strb.w	r6, [fp, #-52]
        for (i = 0; i < suiteSz; i++) {
 80037d2:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80038b0 <SetCipherList+0x190>
            if (XSTRNCMP(name, cipher_names[i].name, sizeof(name)) == 0
 80037d6:	f8db 1000 	ldr.w	r1, [fp]
 80037da:	2231      	movs	r2, #49	; 0x31
 80037dc:	a80d      	add	r0, sp, #52	; 0x34
 80037de:	f01a fa6c 	bl	801dcba <strncmp>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d13e      	bne.n	8003864 <SetCipherList+0x144>
                    if ((suites->suites[j+0] == cipher_names[i].cipherSuite0) &&
 80037e6:	4832      	ldr	r0, [pc, #200]	; (80038b0 <SetCipherList+0x190>)
 80037e8:	220c      	movs	r2, #12
 80037ea:	462b      	mov	r3, r5
                for (j = 0; j < idx; j += 2) {
 80037ec:	2100      	movs	r1, #0
                    if ((suites->suites[j+0] == cipher_names[i].cipherSuite0) &&
 80037ee:	fb02 0206 	mla	r2, r2, r6, r0
                for (j = 0; j < idx; j += 2) {
 80037f2:	4588      	cmp	r8, r1
 80037f4:	dc44      	bgt.n	8003880 <SetCipherList+0x160>
                if (j != idx) {
 80037f6:	d11a      	bne.n	800382e <SetCipherList+0x10e>
                if (idx + 1 >= WOLFSSL_MAX_SUITE_SZ) {
 80037f8:	f5b8 7f95 	cmp.w	r8, #298	; 0x12a
 80037fc:	dc97      	bgt.n	800372e <SetCipherList+0xe>
                suites->suites[idx++] = cipher_names[i].cipherSuite0;
 80037fe:	482c      	ldr	r0, [pc, #176]	; (80038b0 <SetCipherList+0x190>)
 8003800:	220c      	movs	r2, #12
 8003802:	fb02 0606 	mla	r6, r2, r6, r0
 8003806:	eb05 0108 	add.w	r1, r5, r8
 800380a:	f108 0301 	add.w	r3, r8, #1
 800380e:	7a32      	ldrb	r2, [r6, #8]
 8003810:	710a      	strb	r2, [r1, #4]
                suites->suites[idx++] = cipher_names[i].cipherSuite;
 8003812:	442b      	add	r3, r5
 8003814:	7a72      	ldrb	r2, [r6, #9]
                if (XSTRSTR(name, "ECDSA"))
 8003816:	4927      	ldr	r1, [pc, #156]	; (80038b4 <SetCipherList+0x194>)
                suites->suites[idx++] = cipher_names[i].cipherSuite;
 8003818:	711a      	strb	r2, [r3, #4]
                if (XSTRSTR(name, "ECDSA"))
 800381a:	a80d      	add	r0, sp, #52	; 0x34
                suites->suites[idx++] = cipher_names[i].cipherSuite;
 800381c:	f108 0802 	add.w	r8, r8, #2
                if (XSTRSTR(name, "ECDSA"))
 8003820:	f01a fa72 	bl	801dd08 <strstr>
 8003824:	2800      	cmp	r0, #0
 8003826:	d038      	beq.n	800389a <SetCipherList+0x17a>
                    haveSig |= SIG_ECDSA;
 8003828:	f047 0701 	orr.w	r7, r7, #1
                ret = 1; /* found at least one */
 800382c:	2401      	movs	r4, #1
    while (next++); /* ++ needed to skip ':' */
 800382e:	f109 0601 	add.w	r6, r9, #1
 8003832:	f1b9 0f00 	cmp.w	r9, #0
 8003836:	d1b2      	bne.n	800379e <SetCipherList+0x7e>
    if (ret) {
 8003838:	2c00      	cmp	r4, #0
 800383a:	f43f af78 	beq.w	800372e <SetCipherList+0xe>
            InitSuitesHashSigAlgo_ex2(suites->hashSigAlgo, haveSig, 1, keySz,
 800383e:	1caa      	adds	r2, r5, #2
        keySz = ctx->privateKeySz;
 8003840:	f8da 3020 	ldr.w	r3, [sl, #32]
            suites->suiteSz   = (word16)idx;
 8003844:	f8a5 8000 	strh.w	r8, [r5]
            InitSuitesHashSigAlgo_ex2(suites->hashSigAlgo, haveSig, 1, keySz,
 8003848:	4639      	mov	r1, r7
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	f505 7098 	add.w	r0, r5, #304	; 0x130
 8003850:	2201      	movs	r2, #1
 8003852:	f7fd f98a 	bl	8000b6a <InitSuitesHashSigAlgo_ex2>
        suites->setSuites = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	f885 3156 	strb.w	r3, [r5, #342]	; 0x156
 800385c:	e786      	b.n	800376c <SetCipherList+0x4c>
        length = MAX_SUITE_NAME;
 800385e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8003862:	e7aa      	b.n	80037ba <SetCipherList+0x9a>
                || XSTRNCMP(name, cipher_names[i].name_iana, sizeof(name)) == 0
 8003864:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003868:	2231      	movs	r2, #49	; 0x31
 800386a:	a80d      	add	r0, sp, #52	; 0x34
 800386c:	f01a fa25 	bl	801dcba <strncmp>
 8003870:	2800      	cmp	r0, #0
 8003872:	d0b8      	beq.n	80037e6 <SetCipherList+0xc6>
        for (i = 0; i < suiteSz; i++) {
 8003874:	3601      	adds	r6, #1
 8003876:	2e05      	cmp	r6, #5
 8003878:	f10b 0b0c 	add.w	fp, fp, #12
 800387c:	d1ab      	bne.n	80037d6 <SetCipherList+0xb6>
 800387e:	e7d6      	b.n	800382e <SetCipherList+0x10e>
                    if ((suites->suites[j+0] == cipher_names[i].cipherSuite0) &&
 8003880:	f893 c004 	ldrb.w	ip, [r3, #4]
 8003884:	7a10      	ldrb	r0, [r2, #8]
 8003886:	4584      	cmp	ip, r0
 8003888:	d104      	bne.n	8003894 <SetCipherList+0x174>
 800388a:	f893 c005 	ldrb.w	ip, [r3, #5]
 800388e:	7a50      	ldrb	r0, [r2, #9]
 8003890:	4584      	cmp	ip, r0
 8003892:	d0cc      	beq.n	800382e <SetCipherList+0x10e>
                for (j = 0; j < idx; j += 2) {
 8003894:	3102      	adds	r1, #2
 8003896:	3302      	adds	r3, #2
 8003898:	e7ab      	b.n	80037f2 <SetCipherList+0xd2>
                    haveSig |= SIG_RSA;
 800389a:	f047 0702 	orr.w	r7, r7, #2
 800389e:	e7c5      	b.n	800382c <SetCipherList+0x10c>
 80038a0:	0801e80e 	.word	0x0801e80e
 80038a4:	0801e812 	.word	0x0801e812
 80038a8:	0801e81a 	.word	0x0801e81a
 80038ac:	0801e80c 	.word	0x0801e80c
 80038b0:	0801fd1c 	.word	0x0801fd1c
 80038b4:	0801e81f 	.word	0x0801e81f

080038b8 <PickHashSigAlgo>:
{
 80038b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038bc:	4604      	mov	r4, r0
    if (IsAtLeastTLSv1_3(ssl->version)) {
 80038be:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
{
 80038c2:	460e      	mov	r6, r1
 80038c4:	4615      	mov	r5, r2
    if (IsAtLeastTLSv1_3(ssl->version)) {
 80038c6:	f7fd f862 	bl	800098e <IsAtLeastTLSv1_3>
 80038ca:	b178      	cbz	r0, 80038ec <PickHashSigAlgo+0x34>
        ssl->options.sigAlgo = ssl->buffers.keyType;
 80038cc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
 80038d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80038d4:	f884 227b 	strb.w	r2, [r4, #635]	; 0x27b
    if (ssl->options.sigAlgo == anonymous_sa_algo) {
 80038d8:	b95a      	cbnz	r2, 80038f2 <PickHashSigAlgo+0x3a>
        ssl->options.hashAlgo = ssl->specs.mac_algorithm;
 80038da:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
 80038de:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
            ret = 0;
 80038e2:	2500      	movs	r5, #0
}
 80038e4:	4628      	mov	r0, r5
 80038e6:	b003      	add	sp, #12
 80038e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ssl->options.sigAlgo = ssl->specs.sig_algo;
 80038ec:	f894 214c 	ldrb.w	r2, [r4, #332]	; 0x14c
 80038f0:	e7f0      	b.n	80038d4 <PickHashSigAlgo+0x1c>
    if (IsAtLeastTLSv1_2(ssl)) {
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7fd f83e 	bl	8000974 <IsAtLeastTLSv1_2>
        return sha256_mac;
 80038f8:	2800      	cmp	r0, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2702      	moveq	r7, #2
 80038fe:	2704      	movne	r7, #4
    ssl->options.hashAlgo = minHash = MinHashAlgo(ssl);
 8003900:	f884 727a 	strb.w	r7, [r4, #634]	; 0x27a
    if (hashSigAlgoSz == 0)
 8003904:	2d00      	cmp	r5, #0
 8003906:	d0ed      	beq.n	80038e4 <PickHashSigAlgo+0x2c>
 8003908:	f025 0501 	bic.w	r5, r5, #1
 800390c:	eb06 0905 	add.w	r9, r6, r5
        byte hashAlgo = 0, sigAlgo = 0;
 8003910:	f04f 0800 	mov.w	r8, #0
    int ret = MATCH_SUITE_ERROR;
 8003914:	f46f 75fa 	mvn.w	r5, #500	; 0x1f4
    for (i = 0; (i+1) < hashSigAlgoSz; i += HELLO_EXT_SIGALGO_SZ) {
 8003918:	454e      	cmp	r6, r9
 800391a:	d0e3      	beq.n	80038e4 <PickHashSigAlgo+0x2c>
        DecodeSigAlg(&hashSigAlgo[i], &hashAlgo, &sigAlgo);
 800391c:	f10d 0207 	add.w	r2, sp, #7
 8003920:	f10d 0106 	add.w	r1, sp, #6
 8003924:	4630      	mov	r0, r6
        byte hashAlgo = 0, sigAlgo = 0;
 8003926:	f88d 8006 	strb.w	r8, [sp, #6]
 800392a:	f88d 8007 	strb.w	r8, [sp, #7]
        DecodeSigAlg(&hashSigAlgo[i], &hashAlgo, &sigAlgo);
 800392e:	f7fc ff39 	bl	80007a4 <DecodeSigAlg>
        if (hashAlgo < minHash)
 8003932:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003936:	42ba      	cmp	r2, r7
 8003938:	d311      	bcc.n	800395e <PickHashSigAlgo+0xa6>
    if (ssl->pkCurveOID == ECC_ED25519_OID) {
 800393a:	f8d4 32a8 	ldr.w	r3, [r4, #680]	; 0x2a8
        if (!MatchSigAlgo(ssl, sigAlgo))
 800393e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (ssl->pkCurveOID == ECC_ED25519_OID) {
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d106      	bne.n	8003956 <PickHashSigAlgo+0x9e>
        if (!MatchSigAlgo(ssl, sigAlgo))
 8003948:	2909      	cmp	r1, #9
 800394a:	d108      	bne.n	800395e <PickHashSigAlgo+0xa6>
            ssl->options.sigAlgo = sigAlgo;
 800394c:	f884 127b 	strb.w	r1, [r4, #635]	; 0x27b
            ssl->options.hashAlgo = hashAlgo;
 8003950:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
 8003954:	e7c5      	b.n	80038e2 <PickHashSigAlgo+0x2a>
    return sigAlgo == ssl->options.sigAlgo;
 8003956:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
        if (!MatchSigAlgo(ssl, sigAlgo))
 800395a:	4299      	cmp	r1, r3
 800395c:	d001      	beq.n	8003962 <PickHashSigAlgo+0xaa>
    for (i = 0; (i+1) < hashSigAlgoSz; i += HELLO_EXT_SIGALGO_SZ) {
 800395e:	3602      	adds	r6, #2
 8003960:	e7da      	b.n	8003918 <PickHashSigAlgo+0x60>
        switch (hashAlgo) {
 8003962:	2a06      	cmp	r2, #6
 8003964:	d8fb      	bhi.n	800395e <PickHashSigAlgo+0xa6>
 8003966:	2301      	movs	r3, #1
 8003968:	4093      	lsls	r3, r2
 800396a:	f013 0f54 	tst.w	r3, #84	; 0x54
 800396e:	d0f6      	beq.n	800395e <PickHashSigAlgo+0xa6>
                if (ret == 0 && hashAlgo > ssl->options.hashAlgo)
 8003970:	b91d      	cbnz	r5, 800397a <PickHashSigAlgo+0xc2>
 8003972:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
 8003976:	4293      	cmp	r3, r2
 8003978:	d3f1      	bcc.n	800395e <PickHashSigAlgo+0xa6>
                if (IsAtLeastTLSv1_2(ssl) && !IsAtLeastTLSv1_3(ssl->version) &&
 800397a:	4620      	mov	r0, r4
 800397c:	f7fc fffa 	bl	8000974 <IsAtLeastTLSv1_2>
 8003980:	b180      	cbz	r0, 80039a4 <PickHashSigAlgo+0xec>
 8003982:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8003986:	f7fd f802 	bl	800098e <IsAtLeastTLSv1_3>
 800398a:	b958      	cbnz	r0, 80039a4 <PickHashSigAlgo+0xec>
                        (ssl->options.side == WOLFSSL_CLIENT_END)) {
 800398c:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
                if (IsAtLeastTLSv1_2(ssl) && !IsAtLeastTLSv1_3(ssl->version) &&
 8003990:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003994:	2b10      	cmp	r3, #16
 8003996:	d105      	bne.n	80039a4 <PickHashSigAlgo+0xec>
                    if (1
 8003998:	f002 03fb 	and.w	r3, r2, #251	; 0xfb
 800399c:	2b02      	cmp	r3, #2
 800399e:	d001      	beq.n	80039a4 <PickHashSigAlgo+0xec>
                        && (hashAlgo != sha256_mac)
 80039a0:	2a04      	cmp	r2, #4
 80039a2:	d1dc      	bne.n	800395e <PickHashSigAlgo+0xa6>
                ssl->options.hashAlgo = hashAlgo;
 80039a4:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
                ssl->options.sigAlgo = sigAlgo;
 80039a8:	f884 127b 	strb.w	r1, [r4, #635]	; 0x27b
                ret = 0;
 80039ac:	2500      	movs	r5, #0
                break;
 80039ae:	e7d6      	b.n	800395e <PickHashSigAlgo+0xa6>

080039b0 <DecodePrivateKey>:
    if (ssl->buffers.key == NULL || ssl->buffers.key->buffer == NULL) {
 80039b0:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
{
 80039b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039b6:	4605      	mov	r5, r0
 80039b8:	460e      	mov	r6, r1
    if (ssl->buffers.key == NULL || ssl->buffers.key->buffer == NULL) {
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d059      	beq.n	8003a72 <DecodePrivateKey+0xc2>
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d056      	beq.n	8003a72 <DecodePrivateKey+0xc2>
    if (ssl->buffers.keyType == ecc_dsa_sa_algo || ssl->buffers.keyType == 0
 80039c4:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 80039c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 80039d2:	d000      	beq.n	80039d6 <DecodePrivateKey+0x26>
 80039d4:	bb13      	cbnz	r3, 8003a1c <DecodePrivateKey+0x6c>
        ssl->hsType = DYNAMIC_TYPE_ECC;
 80039d6:	2125      	movs	r1, #37	; 0x25
 80039d8:	6429      	str	r1, [r5, #64]	; 0x40
        ret = AllocKey(ssl, ssl->hsType, &ssl->hsKey);
 80039da:	463a      	mov	r2, r7
 80039dc:	4628      	mov	r0, r5
 80039de:	f7fd fd41 	bl	8001464 <AllocKey>
        if (ret != 0) {
 80039e2:	4604      	mov	r4, r0
 80039e4:	b990      	cbnz	r0, 8003a0c <DecodePrivateKey+0x5c>
        idx = 0;
 80039e6:	9001      	str	r0, [sp, #4]
        ret = wc_EccPrivateKeyDecode(ssl->buffers.key->buffer, &idx,
 80039e8:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
 80039ec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80039ee:	6883      	ldr	r3, [r0, #8]
 80039f0:	6800      	ldr	r0, [r0, #0]
 80039f2:	a901      	add	r1, sp, #4
 80039f4:	f010 fb58 	bl	80140a8 <wc_EccPrivateKeyDecode>
        if (ret == 0) {
 80039f8:	4604      	mov	r4, r0
 80039fa:	b988      	cbnz	r0, 8003a20 <DecodePrivateKey+0x70>
            keySz = wc_ecc_size((ecc_key*)ssl->hsKey);
 80039fc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80039fe:	f00a fd7a 	bl	800e4f6 <wc_ecc_size>
            if (keySz < ssl->options.minEccKeySz) {
 8003a02:	f9b5 3286 	ldrsh.w	r3, [r5, #646]	; 0x286
 8003a06:	4283      	cmp	r3, r0
 8003a08:	dd03      	ble.n	8003a12 <DecodePrivateKey+0x62>
                ERROR_OUT(ECC_KEY_SIZE_E, exit_dpk);
 8003a0a:	4c1b      	ldr	r4, [pc, #108]	; (8003a78 <DecodePrivateKey+0xc8>)
}
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	b003      	add	sp, #12
 8003a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *length = (word16)wc_ecc_sig_size((ecc_key*)ssl->hsKey);
 8003a12:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003a14:	f00a fd74 	bl	800e500 <wc_ecc_sig_size>
 8003a18:	8030      	strh	r0, [r6, #0]
            goto exit_dpk;
 8003a1a:	e7f7      	b.n	8003a0c <DecodePrivateKey+0x5c>
    int      ret = BAD_FUNC_ARG;
 8003a1c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
        FreeKey(ssl, ssl->hsType, (void**)&ssl->hsKey);
 8003a20:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003a22:	463a      	mov	r2, r7
 8003a24:	4628      	mov	r0, r5
 8003a26:	f7fd fd02 	bl	800142e <FreeKey>
    if (ssl->buffers.keyType == ed25519_sa_algo || ssl->buffers.keyType == 0) {
 8003a2a:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
 8003a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a32:	2b09      	cmp	r3, #9
 8003a34:	d001      	beq.n	8003a3a <DecodePrivateKey+0x8a>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e8      	bne.n	8003a0c <DecodePrivateKey+0x5c>
        ssl->hsType = DYNAMIC_TYPE_ED25519;
 8003a3a:	2146      	movs	r1, #70	; 0x46
 8003a3c:	6429      	str	r1, [r5, #64]	; 0x40
        ret = AllocKey(ssl, ssl->hsType, &ssl->hsKey);
 8003a3e:	463a      	mov	r2, r7
 8003a40:	4628      	mov	r0, r5
 8003a42:	f7fd fd0f 	bl	8001464 <AllocKey>
        if (ret != 0) {
 8003a46:	4604      	mov	r4, r0
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d1df      	bne.n	8003a0c <DecodePrivateKey+0x5c>
        idx = 0;
 8003a4c:	9001      	str	r0, [sp, #4]
        ret = wc_Ed25519PrivateKeyDecode(ssl->buffers.key->buffer, &idx,
 8003a4e:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
 8003a52:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003a54:	6883      	ldr	r3, [r0, #8]
 8003a56:	6800      	ldr	r0, [r0, #0]
 8003a58:	a901      	add	r1, sp, #4
 8003a5a:	f011 fed6 	bl	801580a <wc_Ed25519PrivateKeyDecode>
        if (ret == 0) {
 8003a5e:	4604      	mov	r4, r0
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d1d3      	bne.n	8003a0c <DecodePrivateKey+0x5c>
            if (ED25519_KEY_SIZE < ssl->options.minEccKeySz) {
 8003a64:	f9b5 3286 	ldrsh.w	r3, [r5, #646]	; 0x286
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	dcce      	bgt.n	8003a0a <DecodePrivateKey+0x5a>
            *length = ED25519_SIG_SIZE;
 8003a6c:	2340      	movs	r3, #64	; 0x40
 8003a6e:	8033      	strh	r3, [r6, #0]
            goto exit_dpk;
 8003a70:	e7cc      	b.n	8003a0c <DecodePrivateKey+0x5c>
            ERROR_OUT(NO_PRIVATE_KEY, exit_dpk);
 8003a72:	f46f 749e 	mvn.w	r4, #316	; 0x13c
    return ret;
 8003a76:	e7c9      	b.n	8003a0c <DecodePrivateKey+0x5c>
 8003a78:	fffffe66 	.word	0xfffffe66

08003a7c <HaveUniqueSessionObj>:
    {
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4605      	mov	r5, r0
        if (ssl->session->ref.count > 1) {
 8003a80:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8003a84:	6843      	ldr	r3, [r0, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	dd0a      	ble.n	8003aa0 <HaveUniqueSessionObj+0x24>
            WOLFSSL_SESSION* newSession = wolfSSL_SESSION_dup(ssl->session);
 8003a8a:	f004 fa4a 	bl	8007f22 <wolfSSL_SESSION_dup>
            if (newSession == NULL) {
 8003a8e:	4604      	mov	r4, r0
 8003a90:	b138      	cbz	r0, 8003aa2 <HaveUniqueSessionObj+0x26>
            wolfSSL_FreeSession(ssl->ctx, ssl->session);
 8003a92:	f8d5 10f4 	ldr.w	r1, [r5, #244]	; 0xf4
 8003a96:	6828      	ldr	r0, [r5, #0]
 8003a98:	f004 fa26 	bl	8007ee8 <wolfSSL_FreeSession>
            ssl->session = newSession;
 8003a9c:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
        return 1;
 8003aa0:	2001      	movs	r0, #1
    }
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}

08003aa4 <SendClientHello>:
    {
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	b088      	sub	sp, #32
        word16             extSz = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8ad 301e 	strh.w	r3, [sp, #30]
        if (ssl == NULL) {
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	b928      	cbnz	r0, 8003ac0 <SendClientHello+0x1c>
            return BAD_FUNC_ARG;
 8003ab4:	f06f 04ac 	mvn.w	r4, #172	; 0xac
    }
 8003ab8:	4620      	mov	r0, r4
 8003aba:	b008      	add	sp, #32
 8003abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        idSz = ssl->options.resuming ? ssl->session->sessionIDSz : 0;
 8003ac0:	f890 9271 	ldrb.w	r9, [r0, #625]	; 0x271
        suites = WOLFSSL_SUITES(ssl);
 8003ac4:	6847      	ldr	r7, [r0, #4]
        idSz = ssl->options.resuming ? ssl->session->sessionIDSz : 0;
 8003ac6:	f019 0908 	ands.w	r9, r9, #8
 8003aca:	bf1c      	itt	ne
 8003acc:	f8d0 30f4 	ldrne.w	r3, [r0, #244]	; 0xf4
 8003ad0:	f893 905c 	ldrbne.w	r9, [r3, #92]	; 0x5c
        suites = WOLFSSL_SUITES(ssl);
 8003ad4:	b927      	cbnz	r7, 8003ae0 <SendClientHello+0x3c>
 8003ad6:	6803      	ldr	r3, [r0, #0]
 8003ad8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
        if (suites == NULL) {
 8003ada:	2f00      	cmp	r7, #0
 8003adc:	f000 80f1 	beq.w	8003cc2 <SendClientHello+0x21e>
        if ((ret = TLSX_PopulateExtensions(ssl, 0)) != 0)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4628      	mov	r0, r5
            length += suites->suiteSz;
 8003ae4:	f8b7 a000 	ldrh.w	sl, [r7]
        if ((ret = TLSX_PopulateExtensions(ssl, 0)) != 0)
 8003ae8:	f005 f8c6 	bl	8008c78 <TLSX_PopulateExtensions>
 8003aec:	4604      	mov	r4, r0
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d1e2      	bne.n	8003ab8 <SendClientHello+0x14>
        extSz = 0;
 8003af2:	f8ad 001e 	strh.w	r0, [sp, #30]
        ret = TLSX_GetRequestSize(ssl, client_hello, &extSz);
 8003af6:	f10d 021e 	add.w	r2, sp, #30
 8003afa:	2101      	movs	r1, #1
 8003afc:	4628      	mov	r0, r5
 8003afe:	f005 f925 	bl	8008d4c <TLSX_GetRequestSize>
        if (ret != 0)
 8003b02:	4604      	mov	r4, r0
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d1d7      	bne.n	8003ab8 <SendClientHello+0x14>
        length += extSz;
 8003b08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
               + COMP_LEN + ENUM_LEN;
 8003b0c:	f109 0227 	add.w	r2, r9, #39	; 0x27
 8003b10:	4413      	add	r3, r2
        length += extSz;
 8003b12:	449a      	add	sl, r3
        if (ssl->arrays == NULL) {
 8003b14:	68ab      	ldr	r3, [r5, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0cc      	beq.n	8003ab4 <SendClientHello+0x10>
        if (IsEncryptionOn(ssl, 1))
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f7fc ff46 	bl	80009ae <IsEncryptionOn>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	f040 80bc 	bne.w	8003ca0 <SendClientHello+0x1fc>
        sendSz = length + HANDSHAKE_HEADER_SZ + RECORD_HEADER_SZ;
 8003b28:	f10a 0809 	add.w	r8, sl, #9
        ssl->options.buildingMsg = 1;
 8003b2c:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	f885 3276 	strb.w	r3, [r5, #630]	; 0x276
        if ((ret = CheckAvailableSize(ssl, sendSz)) != 0)
 8003b38:	4641      	mov	r1, r8
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	f7fe f822 	bl	8001b84 <CheckAvailableSize>
 8003b40:	4604      	mov	r4, r0
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d1b8      	bne.n	8003ab8 <SendClientHello+0x14>
        output = GetOutputBuffer(ssl);
 8003b46:	4628      	mov	r0, r5
 8003b48:	f7fd ff36 	bl	80019b8 <GetOutputBuffer>
        AddHeaders(output, length, client_hello, ssl);
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	462b      	mov	r3, r5
 8003b50:	2201      	movs	r2, #1
 8003b52:	f7fc fe79 	bl	8000848 <AddHeaders>
        output[idx++] = ssl->version.major;
 8003b56:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
 8003b5a:	7243      	strb	r3, [r0, #9]
        output[idx++] = ssl->version.minor;
 8003b5c:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
 8003b60:	7283      	strb	r3, [r0, #10]
        ssl->chVersion = ssl->version;  /* store in case changed */
 8003b62:	f8b5 313c 	ldrh.w	r3, [r5, #316]	; 0x13c
 8003b66:	f8a5 313e 	strh.w	r3, [r5, #318]	; 0x13e
        if (ssl->options.connectState == CONNECT_BEGIN) {
 8003b6a:	f895 3281 	ldrb.w	r3, [r5, #641]	; 0x281
        output = GetOutputBuffer(ssl);
 8003b6e:	4606      	mov	r6, r0
        if (ssl->options.connectState == CONNECT_BEGIN) {
 8003b70:	b97b      	cbnz	r3, 8003b92 <SendClientHello+0xee>
            ret = wc_RNG_GenerateBlock(ssl->rng, output + idx, RAN_LEN);
 8003b72:	f100 0a0b 	add.w	sl, r0, #11
 8003b76:	2220      	movs	r2, #32
 8003b78:	69a8      	ldr	r0, [r5, #24]
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	f00a ffd8 	bl	800eb30 <wc_RNG_GenerateBlock>
            if (ret != 0)
 8003b80:	4604      	mov	r4, r0
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d198      	bne.n	8003ab8 <SendClientHello+0x14>
            XMEMCPY(ssl->arrays->clientRandom, output + idx, RAN_LEN);
 8003b86:	68a8      	ldr	r0, [r5, #8]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	3014      	adds	r0, #20
 8003b8e:	f019 ff09 	bl	801d9a4 <memcpy>
        output[idx++] = (byte)idSz;
 8003b92:	f886 902b 	strb.w	r9, [r6, #43]	; 0x2b
        if (idSz) {
 8003b96:	f1b9 0f00 	cmp.w	r9, #0
 8003b9a:	f000 8084 	beq.w	8003ca6 <SendClientHello+0x202>
            XMEMCPY(output + idx, ssl->session->sessionID,
 8003b9e:	f8d5 10f4 	ldr.w	r1, [r5, #244]	; 0xf4
 8003ba2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 8003ba6:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
 8003baa:	313c      	adds	r1, #60	; 0x3c
 8003bac:	f019 fefa 	bl	801d9a4 <memcpy>
            idx += ssl->session->sessionIDSz;
 8003bb0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003bb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bb8:	332c      	adds	r3, #44	; 0x2c
            c16toa(suites->suiteSz, output + idx);
 8003bba:	883a      	ldrh	r2, [r7, #0]
 8003bbc:	18f1      	adds	r1, r6, r3
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8003bbe:	0a10      	lsrs	r0, r2, #8
 8003bc0:	54f0      	strb	r0, [r6, r3]
    c[1] =  (byte)(wc_u16       & 0xff);
 8003bc2:	704a      	strb	r2, [r1, #1]
            XMEMCPY(output + idx, &suites->suites, suites->suiteSz);
 8003bc4:	4639      	mov	r1, r7
            idx += OPAQUE16_LEN;
 8003bc6:	1c9c      	adds	r4, r3, #2
            XMEMCPY(output + idx, &suites->suites, suites->suiteSz);
 8003bc8:	f831 2b04 	ldrh.w	r2, [r1], #4
 8003bcc:	1930      	adds	r0, r6, r4
 8003bce:	f019 fee9 	bl	801d9a4 <memcpy>
            idx += suites->suiteSz;
 8003bd2:	883b      	ldrh	r3, [r7, #0]
 8003bd4:	4423      	add	r3, r4
        output[idx++] = COMP_LEN;
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	54f2      	strb	r2, [r6, r3]
 8003bda:	1899      	adds	r1, r3, r2
        if (ssl->options.usingCompression)
 8003bdc:	f895 2273 	ldrb.w	r2, [r5, #627]	; 0x273
 8003be0:	f012 0201 	ands.w	r2, r2, #1
 8003be4:	f103 0902 	add.w	r9, r3, #2
            output[idx++] = ZLIB_COMPRESSION;
 8003be8:	bf1c      	itt	ne
 8003bea:	23dd      	movne	r3, #221	; 0xdd
 8003bec:	5473      	strbne	r3, [r6, r1]
        extSz = 0;
 8003bee:	f04f 0300 	mov.w	r3, #0
            output[idx++] = NO_COMPRESSION;
 8003bf2:	bf08      	it	eq
 8003bf4:	5472      	strbeq	r2, [r6, r1]
        ret = TLSX_WriteRequest(ssl, output + idx, client_hello, &extSz);
 8003bf6:	4628      	mov	r0, r5
        extSz = 0;
 8003bf8:	f8ad 301e 	strh.w	r3, [sp, #30]
        ret = TLSX_WriteRequest(ssl, output + idx, client_hello, &extSz);
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f10d 031e 	add.w	r3, sp, #30
 8003c02:	eb06 0109 	add.w	r1, r6, r9
 8003c06:	f005 f8ed 	bl	8008de4 <TLSX_WriteRequest>
        if (ret != 0)
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f47f af53 	bne.w	8003ab8 <SendClientHello+0x14>
        if (IsEncryptionOn(ssl, 1)) {
 8003c12:	2101      	movs	r1, #1
 8003c14:	4628      	mov	r0, r5
 8003c16:	f7fc feca 	bl	80009ae <IsEncryptionOn>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d045      	beq.n	8003caa <SendClientHello+0x206>
            if (ssl->options.dtls)
 8003c1e:	f895 3272 	ldrb.w	r3, [r5, #626]	; 0x272
        idx += extSz;
 8003c22:	f8bd 701e 	ldrh.w	r7, [sp, #30]
                recordHeaderSz += DTLS_RECORD_EXTRA;
 8003c26:	f013 0f04 	tst.w	r3, #4
        idx += extSz;
 8003c2a:	444f      	add	r7, r9
                recordHeaderSz += DTLS_RECORD_EXTRA;
 8003c2c:	bf0c      	ite	eq
 8003c2e:	f04f 0a05 	moveq.w	sl, #5
 8003c32:	f04f 0a0d 	movne.w	sl, #13
            inputSz -= recordHeaderSz;
 8003c36:	eba7 070a 	sub.w	r7, r7, sl
            input = (byte*)XMALLOC(inputSz, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f019 fe92 	bl	801d964 <malloc>
            if (input == NULL)
 8003c40:	4681      	mov	r9, r0
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d040      	beq.n	8003cc8 <SendClientHello+0x224>
            XMEMCPY(input, output + recordHeaderSz, inputSz);
 8003c46:	463a      	mov	r2, r7
 8003c48:	eb06 010a 	add.w	r1, r6, sl
 8003c4c:	f019 feaa 	bl	801d9a4 <memcpy>
            sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 8003c50:	2316      	movs	r3, #22
 8003c52:	2201      	movs	r2, #1
 8003c54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c58:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003c5c:	9403      	str	r4, [sp, #12]
 8003c5e:	464b      	mov	r3, r9
 8003c60:	4642      	mov	r2, r8
 8003c62:	4631      	mov	r1, r6
 8003c64:	9700      	str	r7, [sp, #0]
 8003c66:	4628      	mov	r0, r5
 8003c68:	f7fe fa4a 	bl	8002100 <BuildMessage>
 8003c6c:	4604      	mov	r4, r0
            XFREE(input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8003c6e:	4648      	mov	r0, r9
 8003c70:	f019 fe80 	bl	801d974 <free>
            if (sendSz < 0)
 8003c74:	2c00      	cmp	r4, #0
 8003c76:	f6ff af1f 	blt.w	8003ab8 <SendClientHello+0x14>
        ssl->options.clientState = CLIENT_HELLO_COMPLETE;
 8003c7a:	230c      	movs	r3, #12
        ssl->buffers.outputBuffer.length += sendSz;
 8003c7c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
        ssl->options.clientState = CLIENT_HELLO_COMPLETE;
 8003c80:	f885 327d 	strb.w	r3, [r5, #637]	; 0x27d
        ssl->options.buildingMsg = 0;
 8003c84:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
        ssl->buffers.outputBuffer.length += sendSz;
 8003c88:	4420      	add	r0, r4
        ssl->options.buildingMsg = 0;
 8003c8a:	f36f 03c3 	bfc	r3, #3, #1
        ssl->buffers.outputBuffer.length += sendSz;
 8003c8e:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
        ssl->options.buildingMsg = 0;
 8003c92:	f885 3276 	strb.w	r3, [r5, #630]	; 0x276
        ret = SendBuffered(ssl);
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7fd fe4a 	bl	8001930 <SendBuffered>
 8003c9c:	4604      	mov	r4, r0
        return ret;
 8003c9e:	e70b      	b.n	8003ab8 <SendClientHello+0x14>
            sendSz += MAX_MSG_EXTRA;
 8003ca0:	f10a 086f 	add.w	r8, sl, #111	; 0x6f
 8003ca4:	e742      	b.n	8003b2c <SendClientHello+0x88>
        output[idx++] = (byte)idSz;
 8003ca6:	232c      	movs	r3, #44	; 0x2c
 8003ca8:	e787      	b.n	8003bba <SendClientHello+0x116>
            ret = HashOutput(ssl, output, sendSz, 0);
 8003caa:	4623      	mov	r3, r4
 8003cac:	4642      	mov	r2, r8
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7fd fcdf 	bl	8001674 <HashOutput>
            if (ret != 0)
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f47f aefd 	bne.w	8003ab8 <SendClientHello+0x14>
 8003cbe:	4644      	mov	r4, r8
 8003cc0:	e7db      	b.n	8003c7a <SendClientHello+0x1d6>
            return SUITES_ERROR;
 8003cc2:	f46f 74b9 	mvn.w	r4, #370	; 0x172
 8003cc6:	e6f7      	b.n	8003ab8 <SendClientHello+0x14>
                return MEMORY_E;
 8003cc8:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8003ccc:	e6f4      	b.n	8003ab8 <SendClientHello+0x14>
	...

08003cd0 <DoHelloVerifyRequest>:
        if (OPAQUE16_LEN + OPAQUE8_LEN > size)
 8003cd0:	2b02      	cmp	r3, #2
    {
 8003cd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        word32          begin = *inOutIdx;
 8003cd6:	6816      	ldr	r6, [r2, #0]
    {
 8003cd8:	4607      	mov	r7, r0
 8003cda:	4689      	mov	r9, r1
 8003cdc:	4615      	mov	r5, r2
 8003cde:	4698      	mov	r8, r3
        if (OPAQUE16_LEN + OPAQUE8_LEN > size)
 8003ce0:	d803      	bhi.n	8003cea <DoHelloVerifyRequest+0x1a>
            return BUFFER_ERROR;
 8003ce2:	4814      	ldr	r0, [pc, #80]	; (8003d34 <DoHelloVerifyRequest+0x64>)
    }
 8003ce4:	b003      	add	sp, #12
 8003ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        XMEMCPY(&pv, input + *inOutIdx, OPAQUE16_LEN);
 8003cea:	2202      	movs	r2, #2
 8003cec:	4431      	add	r1, r6
 8003cee:	a801      	add	r0, sp, #4
 8003cf0:	f019 fe58 	bl	801d9a4 <memcpy>
        *inOutIdx += OPAQUE16_LEN;
 8003cf4:	682c      	ldr	r4, [r5, #0]
        if (pv.major != DTLS_MAJOR ||
 8003cf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
        *inOutIdx += OPAQUE16_LEN;
 8003cfa:	1ca2      	adds	r2, r4, #2
        if (pv.major != DTLS_MAJOR ||
 8003cfc:	2bfe      	cmp	r3, #254	; 0xfe
        *inOutIdx += OPAQUE16_LEN;
 8003cfe:	602a      	str	r2, [r5, #0]
        if (pv.major != DTLS_MAJOR ||
 8003d00:	d115      	bne.n	8003d2e <DoHelloVerifyRequest+0x5e>
                         (pv.minor != DTLS_MINOR && pv.minor != DTLSv1_2_MINOR))
 8003d02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003d06:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8003d0a:	2bfd      	cmp	r3, #253	; 0xfd
 8003d0c:	d10f      	bne.n	8003d2e <DoHelloVerifyRequest+0x5e>
        cookieSz = input[(*inOutIdx)++];
 8003d0e:	3403      	adds	r4, #3
 8003d10:	602c      	str	r4, [r5, #0]
 8003d12:	f819 3002 	ldrb.w	r3, [r9, r2]
        if (cookieSz) {
 8003d16:	b12b      	cbz	r3, 8003d24 <DoHelloVerifyRequest+0x54>
            if ((*inOutIdx - begin) + cookieSz > size)
 8003d18:	1ba6      	subs	r6, r4, r6
 8003d1a:	441e      	add	r6, r3
 8003d1c:	4546      	cmp	r6, r8
 8003d1e:	d8e0      	bhi.n	8003ce2 <DoHelloVerifyRequest+0x12>
            *inOutIdx += cookieSz;
 8003d20:	441c      	add	r4, r3
 8003d22:	602c      	str	r4, [r5, #0]
        ssl->options.serverState = SERVER_HELLOVERIFYREQUEST_COMPLETE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
        return 0;
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e7da      	b.n	8003ce4 <DoHelloVerifyRequest+0x14>
            return VERSION_ERROR;
 8003d2e:	4802      	ldr	r0, [pc, #8]	; (8003d38 <DoHelloVerifyRequest+0x68>)
 8003d30:	e7d8      	b.n	8003ce4 <DoHelloVerifyRequest+0x14>
 8003d32:	bf00      	nop
 8003d34:	fffffeb8 	.word	0xfffffeb8
 8003d38:	fffffeba 	.word	0xfffffeba

08003d3c <CheckVersion>:
        if (ssl->options.dtls) {
 8003d3c:	f890 3272 	ldrb.w	r3, [r0, #626]	; 0x272
 8003d40:	f013 0304 	ands.w	r3, r3, #4
 8003d44:	b2ca      	uxtb	r2, r1
    {
 8003d46:	b082      	sub	sp, #8
 8003d48:	f3c1 2107 	ubfx	r1, r1, #8, #8
        if (ssl->options.dtls) {
 8003d4c:	d053      	beq.n	8003df6 <CheckVersion+0xba>
            if (pv.major != DTLS_MAJOR || pv.minor == DTLS_BOGUS_MINOR) {
 8003d4e:	2afe      	cmp	r2, #254	; 0xfe
 8003d50:	d001      	beq.n	8003d56 <CheckVersion+0x1a>
                switch(pv.minor) {
 8003d52:	483f      	ldr	r0, [pc, #252]	; (8003e50 <CheckVersion+0x114>)
 8003d54:	e079      	b.n	8003e4a <CheckVersion+0x10e>
            if (pv.major != DTLS_MAJOR || pv.minor == DTLS_BOGUS_MINOR) {
 8003d56:	29fe      	cmp	r1, #254	; 0xfe
 8003d58:	d0fb      	beq.n	8003d52 <CheckVersion+0x16>
            lowerVersion = pv.minor > ssl->version.minor;
 8003d5a:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
 8003d5e:	428a      	cmp	r2, r1
 8003d60:	bf34      	ite	cc
 8003d62:	2201      	movcc	r2, #1
 8003d64:	2200      	movcs	r2, #0
        if (higherVersion) {
 8003d66:	d8f4      	bhi.n	8003d52 <CheckVersion+0x16>
        if (lowerVersion) {
 8003d68:	b1a2      	cbz	r2, 8003d94 <CheckVersion+0x58>
            if (!ssl->options.downgrade) {
 8003d6a:	f890 2271 	ldrb.w	r2, [r0, #625]	; 0x271
 8003d6e:	0752      	lsls	r2, r2, #29
 8003d70:	d5ef      	bpl.n	8003d52 <CheckVersion+0x16>
            if ((!ssl->options.dtls && pv.minor < ssl->options.minDowngrade) ||
 8003d72:	f890 2280 	ldrb.w	r2, [r0, #640]	; 0x280
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d147      	bne.n	8003e0a <CheckVersion+0xce>
 8003d7a:	428a      	cmp	r2, r1
 8003d7c:	d8e9      	bhi.n	8003d52 <CheckVersion+0x16>
                switch(pv.minor) {
 8003d7e:	2901      	cmp	r1, #1
                ssl->version.minor = pv.minor;
 8003d80:	f880 113d 	strb.w	r1, [r0, #317]	; 0x13d
                switch(pv.minor) {
 8003d84:	d04e      	beq.n	8003e24 <CheckVersion+0xe8>
 8003d86:	d946      	bls.n	8003e16 <CheckVersion+0xda>
 8003d88:	29fd      	cmp	r1, #253	; 0xfd
 8003d8a:	d003      	beq.n	8003d94 <CheckVersion+0x58>
 8003d8c:	d840      	bhi.n	8003e10 <CheckVersion+0xd4>
 8003d8e:	3902      	subs	r1, #2
 8003d90:	2901      	cmp	r1, #1
 8003d92:	d8de      	bhi.n	8003d52 <CheckVersion+0x16>
        if (!ssl->options.dtls && ssl->options.downgrade &&
 8003d94:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 8003d98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d9c:	f423 037b 	bic.w	r3, r3, #16449536	; 0xfb0000
 8003da0:	f423 437b 	bic.w	r3, r3, #64256	; 0xfb00
 8003da4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d14c      	bne.n	8003e48 <CheckVersion+0x10c>
            ssl->options.mask > 0) {
 8003dae:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
        if (!ssl->options.dtls && ssl->options.downgrade &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d048      	beq.n	8003e48 <CheckVersion+0x10c>
            if (ssl->version.minor == TLSv1_2_MINOR &&
 8003db6:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
 8003dba:	2a03      	cmp	r2, #3
 8003dbc:	d137      	bne.n	8003e2e <CheckVersion+0xf2>
 8003dbe:	011a      	lsls	r2, r3, #4
 8003dc0:	d539      	bpl.n	8003e36 <CheckVersion+0xfa>
                ssl->version.minor = TLSv1_1_MINOR;
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f880 213d 	strb.w	r2, [r0, #317]	; 0x13d
            if (ssl->version.minor == TLSv1_1_MINOR &&
 8003dc8:	0159      	lsls	r1, r3, #5
 8003dca:	d534      	bpl.n	8003e36 <CheckVersion+0xfa>
                ssl->options.tls1_1 = 0;
 8003dcc:	f890 2271 	ldrb.w	r2, [r0, #625]	; 0x271
 8003dd0:	f36f 12c7 	bfc	r2, #7, #1
 8003dd4:	f880 2271 	strb.w	r2, [r0, #625]	; 0x271
                ssl->version.minor = TLSv1_MINOR;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f880 213d 	strb.w	r2, [r0, #317]	; 0x13d
            if (ssl->version.minor == TLSv1_MINOR &&
 8003dde:	049a      	lsls	r2, r3, #18
 8003de0:	d529      	bpl.n	8003e36 <CheckVersion+0xfa>
                ssl->options.tls    = 0;
 8003de2:	f890 2271 	ldrb.w	r2, [r0, #625]	; 0x271
 8003de6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003dea:	f880 2271 	strb.w	r2, [r0, #625]	; 0x271
                ssl->version.minor = SSLv3_MINOR;
 8003dee:	2200      	movs	r2, #0
 8003df0:	f880 213d 	strb.w	r2, [r0, #317]	; 0x13d
 8003df4:	e01f      	b.n	8003e36 <CheckVersion+0xfa>
            if (pv.major != SSLv3_MAJOR) {
 8003df6:	2a03      	cmp	r2, #3
 8003df8:	d1ab      	bne.n	8003d52 <CheckVersion+0x16>
            lowerVersion = pv.minor < ssl->version.minor;
 8003dfa:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
 8003dfe:	428a      	cmp	r2, r1
 8003e00:	bf8c      	ite	hi
 8003e02:	2201      	movhi	r2, #1
 8003e04:	2200      	movls	r2, #0
        if (higherVersion) {
 8003e06:	d2af      	bcs.n	8003d68 <CheckVersion+0x2c>
 8003e08:	e7a3      	b.n	8003d52 <CheckVersion+0x16>
                (ssl->options.dtls && pv.minor > ssl->options.minDowngrade)) {
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	d2b7      	bcs.n	8003d7e <CheckVersion+0x42>
 8003e0e:	e7a0      	b.n	8003d52 <CheckVersion+0x16>
                switch(pv.minor) {
 8003e10:	29ff      	cmp	r1, #255	; 0xff
 8003e12:	d0bf      	beq.n	8003d94 <CheckVersion+0x58>
 8003e14:	e79d      	b.n	8003d52 <CheckVersion+0x16>
                    ssl->options.tls    = 0;
 8003e16:	f890 3271 	ldrb.w	r3, [r0, #625]	; 0x271
 8003e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                    ssl->options.tls1_1 = 0;
 8003e1e:	f880 3271 	strb.w	r3, [r0, #625]	; 0x271
                    break;
 8003e22:	e7b7      	b.n	8003d94 <CheckVersion+0x58>
                    ssl->options.tls1_1 = 0;
 8003e24:	f890 3271 	ldrb.w	r3, [r0, #625]	; 0x271
 8003e28:	f36f 13c7 	bfc	r3, #7, #1
 8003e2c:	e7f7      	b.n	8003e1e <CheckVersion+0xe2>
            if (ssl->version.minor == TLSv1_1_MINOR &&
 8003e2e:	2a02      	cmp	r2, #2
 8003e30:	d0ca      	beq.n	8003dc8 <CheckVersion+0x8c>
            if (ssl->version.minor == TLSv1_MINOR &&
 8003e32:	2a01      	cmp	r2, #1
 8003e34:	d0d3      	beq.n	8003dde <CheckVersion+0xa2>
            if (ssl->version.minor == SSLv3_MINOR &&
 8003e36:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
 8003e3a:	b90a      	cbnz	r2, 8003e40 <CheckVersion+0x104>
 8003e3c:	04db      	lsls	r3, r3, #19
 8003e3e:	d488      	bmi.n	8003d52 <CheckVersion+0x16>
            if (ssl->version.minor < ssl->options.minDowngrade) {
 8003e40:	f890 3280 	ldrb.w	r3, [r0, #640]	; 0x280
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d884      	bhi.n	8003d52 <CheckVersion+0x16>
        return 0;
 8003e48:	2000      	movs	r0, #0
    }
 8003e4a:	b002      	add	sp, #8
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	fffffeba 	.word	0xfffffeba

08003e54 <CompleteServerHello>:
        if (!ssl->options.resuming) {
 8003e54:	f890 3271 	ldrb.w	r3, [r0, #625]	; 0x271
 8003e58:	0719      	lsls	r1, r3, #28
    {
 8003e5a:	b570      	push	{r4, r5, r6, lr}
 8003e5c:	4604      	mov	r4, r0
        if (!ssl->options.resuming) {
 8003e5e:	d41d      	bmi.n	8003e9c <CompleteServerHello+0x48>
            if (ssl->ctx->method->version.major == SSLv3_MAJOR &&
 8003e60:	6803      	ldr	r3, [r0, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	2a03      	cmp	r2, #3
 8003e68:	d149      	bne.n	8003efe <CompleteServerHello+0xaa>
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d146      	bne.n	8003efe <CompleteServerHello+0xaa>
            byte* down = ssl->arrays->serverRandom + RAN_LEN -
 8003e70:	6885      	ldr	r5, [r0, #8]
            byte  vers = ssl->arrays->serverRandom[RAN_LEN - 1];
 8003e72:	f895 6053 	ldrb.w	r6, [r5, #83]	; 0x53
                (wolfSSL_get_options(ssl) & WOLFSSL_OP_NO_TLSv1_2) == 0) {
 8003e76:	f004 f8d4 	bl	8008022 <wolfSSL_get_options>
                ssl->ctx->method->version.minor == TLSv1_2_MINOR &&
 8003e7a:	0102      	lsls	r2, r0, #4
 8003e7c:	d43f      	bmi.n	8003efe <CompleteServerHello+0xaa>
                if (XMEMCMP(down, tls13Downgrade, TLS13_DOWNGRADE_SZ) == 0 &&
 8003e7e:	4925      	ldr	r1, [pc, #148]	; (8003f14 <CompleteServerHello+0xc0>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8003e86:	f019 fd7d 	bl	801d984 <memcmp>
 8003e8a:	bbc0      	cbnz	r0, 8003efe <CompleteServerHello+0xaa>
 8003e8c:	bbbe      	cbnz	r6, 8003efe <CompleteServerHello+0xaa>
                    SendAlert(ssl, alert_fatal, illegal_parameter);
 8003e8e:	222f      	movs	r2, #47	; 0x2f
 8003e90:	2102      	movs	r1, #2
 8003e92:	4620      	mov	r0, r4
 8003e94:	f7ff f83a 	bl	8002f0c <SendAlert>
                    return VERSION_ERROR;
 8003e98:	481f      	ldr	r0, [pc, #124]	; (8003f18 <CompleteServerHello+0xc4>)
    }
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
        ret = ret ||
 8003e9c:	069b      	lsls	r3, r3, #26
 8003e9e:	d528      	bpl.n	8003ef2 <CompleteServerHello+0x9e>
              (ssl->options.haveSessionId && XMEMCMP(ssl->arrays->sessionID,
 8003ea0:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
 8003ea4:	6880      	ldr	r0, [r0, #8]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	313c      	adds	r1, #60	; 0x3c
 8003eaa:	3054      	adds	r0, #84	; 0x54
 8003eac:	f019 fd6a 	bl	801d984 <memcmp>
 8003eb0:	b9f8      	cbnz	r0, 8003ef2 <CompleteServerHello+0x9e>
                if (SetCipherSpecs(ssl) == 0) {
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f002 ff04 	bl	8006cc0 <SetCipherSpecs>
 8003eb8:	bb30      	cbnz	r0, 8003f08 <CompleteServerHello+0xb4>
                    if (!HaveUniqueSessionObj(ssl)) {
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7ff fdde 	bl	8003a7c <HaveUniqueSessionObj>
 8003ec0:	b320      	cbz	r0, 8003f0c <CompleteServerHello+0xb8>
                    XMEMCPY(ssl->arrays->masterSecret,
 8003ec2:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 8003ec6:	68a0      	ldr	r0, [r4, #8]
 8003ec8:	2230      	movs	r2, #48	; 0x30
 8003eca:	315d      	adds	r1, #93	; 0x5d
 8003ecc:	3075      	adds	r0, #117	; 0x75
 8003ece:	f019 fd69 	bl	801d9a4 <memcpy>
                    ret = DeriveTlsKeys(ssl);
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f004 fa8c 	bl	80083f0 <DeriveTlsKeys>
                    ssl->options.peerAuthGood = (ret == 0);
 8003ed8:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
 8003edc:	fab0 f380 	clz	r3, r0
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f363 0241 	bfi	r2, r3, #1, #1
                    ssl->options.serverState = SERVER_HELLODONE_COMPLETE;
 8003ee6:	2308      	movs	r3, #8
                    ssl->options.peerAuthGood = (ret == 0);
 8003ee8:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
                    ssl->options.serverState = SERVER_HELLODONE_COMPLETE;
 8003eec:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
                    return ret;
 8003ef0:	e7d3      	b.n	8003e9a <CompleteServerHello+0x46>
                ssl->options.resuming = 0; /* server denied resumption try */
 8003ef2:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8003ef6:	f36f 03c3 	bfc	r3, #3, #1
 8003efa:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
        return SetCipherSpecs(ssl);
 8003efe:	4620      	mov	r0, r4
    }
 8003f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SetCipherSpecs(ssl);
 8003f04:	f002 bedc 	b.w	8006cc0 <SetCipherSpecs>
                    return UNSUPPORTED_SUITE;
 8003f08:	4804      	ldr	r0, [pc, #16]	; (8003f1c <CompleteServerHello+0xc8>)
 8003f0a:	e7c6      	b.n	8003e9a <CompleteServerHello+0x46>
                        return MEMORY_ERROR;
 8003f0c:	f46f 7097 	mvn.w	r0, #302	; 0x12e
 8003f10:	e7c3      	b.n	8003e9a <CompleteServerHello+0x46>
 8003f12:	bf00      	nop
 8003f14:	0801fd6c 	.word	0x0801fd6c
 8003f18:	fffffeba 	.word	0xfffffeba
 8003f1c:	fffffe0c 	.word	0xfffffe0c

08003f20 <DoServerHello>:
    {
 8003f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (OPAQUE16_LEN + RAN_LEN + OPAQUE8_LEN > helloSz)
 8003f24:	2b22      	cmp	r3, #34	; 0x22
        word32          i = *inOutIdx;
 8003f26:	6817      	ldr	r7, [r2, #0]
    {
 8003f28:	b085      	sub	sp, #20
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4688      	mov	r8, r1
 8003f2e:	4692      	mov	sl, r2
 8003f30:	4699      	mov	r9, r3
        if (OPAQUE16_LEN + RAN_LEN + OPAQUE8_LEN > helloSz)
 8003f32:	d801      	bhi.n	8003f38 <DoServerHello+0x18>
                    return BUFFER_ERROR;
 8003f34:	4d65      	ldr	r5, [pc, #404]	; (80040cc <DoServerHello+0x1ac>)
 8003f36:	e011      	b.n	8003f5c <DoServerHello+0x3c>
        XMEMCPY(&pv, input + i, OPAQUE16_LEN);
 8003f38:	eb01 0b07 	add.w	fp, r1, r7
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4659      	mov	r1, fp
 8003f40:	a803      	add	r0, sp, #12
 8003f42:	f019 fd2f 	bl	801d9a4 <memcpy>
        ret = CheckVersion(ssl, pv);
 8003f46:	9903      	ldr	r1, [sp, #12]
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7ff fef7 	bl	8003d3c <CheckVersion>
        if (ret != 0) {
 8003f4e:	4605      	mov	r5, r0
 8003f50:	b140      	cbz	r0, 8003f64 <DoServerHello+0x44>
            SendAlert(ssl, alert_fatal, wolfssl_alert_protocol_version);
 8003f52:	2246      	movs	r2, #70	; 0x46
 8003f54:	2102      	movs	r1, #2
 8003f56:	4620      	mov	r0, r4
 8003f58:	f7fe ffd8 	bl	8002f0c <SendAlert>
    }
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	b005      	add	sp, #20
 8003f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        XMEMCPY(ssl->arrays->serverRandom, input + i, RAN_LEN);
 8003f64:	68a0      	ldr	r0, [r4, #8]
        i += OPAQUE16_LEN;
 8003f66:	1cb9      	adds	r1, r7, #2
        XMEMCPY(ssl->arrays->serverRandom, input + i, RAN_LEN);
 8003f68:	2220      	movs	r2, #32
 8003f6a:	4441      	add	r1, r8
 8003f6c:	3034      	adds	r0, #52	; 0x34
 8003f6e:	f019 fd19 	bl	801d9a4 <memcpy>
        ssl->arrays->sessionIDSz = input[i++];
 8003f72:	f89b 2022 	ldrb.w	r2, [fp, #34]	; 0x22
 8003f76:	68a0      	ldr	r0, [r4, #8]
        if (ssl->arrays->sessionIDSz > ID_LEN) {
 8003f78:	2a20      	cmp	r2, #32
        ssl->arrays->sessionIDSz = input[i++];
 8003f7a:	f107 0623 	add.w	r6, r7, #35	; 0x23
 8003f7e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
        if (ssl->arrays->sessionIDSz > ID_LEN) {
 8003f82:	d902      	bls.n	8003f8a <DoServerHello+0x6a>
            ssl->arrays->sessionIDSz = 0;
 8003f84:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
            return BUFFER_ERROR;
 8003f88:	e7d4      	b.n	8003f34 <DoServerHello+0x14>
        else if (ssl->arrays->sessionIDSz) {
 8003f8a:	b192      	cbz	r2, 8003fb2 <DoServerHello+0x92>
            if ((i - begin) + ssl->arrays->sessionIDSz > helloSz)
 8003f8c:	f102 0323 	add.w	r3, r2, #35	; 0x23
 8003f90:	454b      	cmp	r3, r9
 8003f92:	d8cf      	bhi.n	8003f34 <DoServerHello+0x14>
            XMEMCPY(ssl->arrays->sessionID, input + i,
 8003f94:	eb08 0106 	add.w	r1, r8, r6
 8003f98:	3054      	adds	r0, #84	; 0x54
 8003f9a:	f019 fd03 	bl	801d9a4 <memcpy>
            i += ssl->arrays->sessionIDSz;
 8003f9e:	68a3      	ldr	r3, [r4, #8]
 8003fa0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fa4:	441e      	add	r6, r3
            ssl->options.haveSessionId = 1;
 8003fa6:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8003faa:	f043 0320 	orr.w	r3, r3, #32
 8003fae:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
        if ((i - begin) + OPAQUE16_LEN + OPAQUE8_LEN > helloSz)
 8003fb2:	f1c7 0303 	rsb	r3, r7, #3
 8003fb6:	4433      	add	r3, r6
 8003fb8:	454b      	cmp	r3, r9
 8003fba:	d8bb      	bhi.n	8003f34 <DoServerHello+0x14>
        cs1 = input[i++];
 8003fbc:	eb08 0306 	add.w	r3, r8, r6
        cs0 = input[i++];
 8003fc0:	f818 0006 	ldrb.w	r0, [r8, r6]
        cs1 = input[i++];
 8003fc4:	7859      	ldrb	r1, [r3, #1]
            const Suites* suites = WOLFSSL_SUITES(ssl);
 8003fc6:	6863      	ldr	r3, [r4, #4]
        cs1 = input[i++];
 8003fc8:	1cb5      	adds	r5, r6, #2
            const Suites* suites = WOLFSSL_SUITES(ssl);
 8003fca:	b90b      	cbnz	r3, 8003fd0 <DoServerHello+0xb0>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            for (idx = 0; idx < suites->suiteSz; idx += 2) {
 8003fd0:	f8b3 e000 	ldrh.w	lr, [r3]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	eba2 0c03 	sub.w	ip, r2, r3
 8003fda:	45e6      	cmp	lr, ip
 8003fdc:	d802      	bhi.n	8003fe4 <DoServerHello+0xc4>
                return MATCH_SUITE_ERROR;
 8003fde:	f46f 75fa 	mvn.w	r5, #500	; 0x1f4
 8003fe2:	e7bb      	b.n	8003f5c <DoServerHello+0x3c>
                if (suites->suites[idx]   == cs0 &&
 8003fe4:	f892 c004 	ldrb.w	ip, [r2, #4]
 8003fe8:	4584      	cmp	ip, r0
 8003fea:	d103      	bne.n	8003ff4 <DoServerHello+0xd4>
 8003fec:	f892 c005 	ldrb.w	ip, [r2, #5]
 8003ff0:	458c      	cmp	ip, r1
 8003ff2:	d018      	beq.n	8004026 <DoServerHello+0x106>
            for (idx = 0; idx < suites->suiteSz; idx += 2) {
 8003ff4:	3202      	adds	r2, #2
 8003ff6:	e7ee      	b.n	8003fd6 <DoServerHello+0xb6>
        if (compression != NO_COMPRESSION && !ssl->options.usingCompression) {
 8003ff8:	b19b      	cbz	r3, 8004022 <DoServerHello+0x102>
        if (compression != ZLIB_COMPRESSION && ssl->options.usingCompression) {
 8003ffa:	2add      	cmp	r2, #221	; 0xdd
 8003ffc:	d023      	beq.n	8004046 <DoServerHello+0x126>
            ssl->options.usingCompression = 0;  /* turn off if server refused */
 8003ffe:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
 8004002:	f36f 0300 	bfc	r3, #0, #1
 8004006:	f884 3273 	strb.w	r3, [r4, #627]	; 0x273
 800400a:	e01c      	b.n	8004046 <DoServerHello+0x126>
                *inOutIdx = begin + helloSz; /* skip extensions */
 800400c:	444f      	add	r7, r9
 800400e:	f8ca 7000 	str.w	r7, [sl]
 8004012:	e046      	b.n	80040a2 <DoServerHello+0x182>
            ssl->options.haveEMS = 0; /* If no extensions, no EMS */
 8004014:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 8004018:	f36f 03c3 	bfc	r3, #3, #1
 800401c:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
 8004020:	e03f      	b.n	80040a2 <DoServerHello+0x182>
            return COMPRESSION_ERROR;
 8004022:	4d2b      	ldr	r5, [pc, #172]	; (80040d0 <DoServerHello+0x1b0>)
 8004024:	e79a      	b.n	8003f5c <DoServerHello+0x3c>
        ssl->options.cipherSuite0 = cs0;
 8004026:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
        ssl->options.cipherSuite  = cs1;
 800402a:	f884 1279 	strb.w	r1, [r4, #633]	; 0x279
        if (compression != NO_COMPRESSION && !ssl->options.usingCompression) {
 800402e:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
        compression = input[i++];
 8004032:	f818 2005 	ldrb.w	r2, [r8, r5]
 8004036:	f106 0b03 	add.w	fp, r6, #3
        if (compression != NO_COMPRESSION && !ssl->options.usingCompression) {
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2a00      	cmp	r2, #0
 8004040:	d1da      	bne.n	8003ff8 <DoServerHello+0xd8>
        if (compression != ZLIB_COMPRESSION && ssl->options.usingCompression) {
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1db      	bne.n	8003ffe <DoServerHello+0xde>
        if ( (i - begin) < helloSz) {
 8004046:	ebab 0507 	sub.w	r5, fp, r7
 800404a:	454d      	cmp	r5, r9
        *inOutIdx = i;
 800404c:	f8ca b000 	str.w	fp, [sl]
        if ( (i - begin) < helloSz) {
 8004050:	d2e0      	bcs.n	8004014 <DoServerHello+0xf4>
            if (TLSX_SupportExtensions(ssl)) {
 8004052:	4620      	mov	r0, r4
 8004054:	f004 fe01 	bl	8008c5a <TLSX_SupportExtensions>
 8004058:	2800      	cmp	r0, #0
 800405a:	d0d7      	beq.n	800400c <DoServerHello+0xec>
                if ((i - begin) + OPAQUE16_LEN > helloSz)
 800405c:	3502      	adds	r5, #2
 800405e:	454d      	cmp	r5, r9
 8004060:	f63f af68 	bhi.w	8003f34 <DoServerHello+0x14>
                ato16(&input[i], &totalExtSz);
 8004064:	f10d 010e 	add.w	r1, sp, #14
 8004068:	eb08 000b 	add.w	r0, r8, fp
 800406c:	f7fc f8df 	bl	800022e <ato16>
                if ((i - begin) + totalExtSz > helloSz)
 8004070:	f8bd 200e 	ldrh.w	r2, [sp, #14]
                i += OPAQUE16_LEN;
 8004074:	3605      	adds	r6, #5
                if ((i - begin) + totalExtSz > helloSz)
 8004076:	1bd7      	subs	r7, r2, r7
 8004078:	4437      	add	r7, r6
 800407a:	454f      	cmp	r7, r9
 800407c:	f63f af5a 	bhi.w	8003f34 <DoServerHello+0x14>
                if ((ret = TLSX_Parse(ssl, (byte *) input + i, totalExtSz,
 8004080:	2300      	movs	r3, #0
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	eb08 0106 	add.w	r1, r8, r6
 8004088:	2302      	movs	r3, #2
 800408a:	4620      	mov	r0, r4
 800408c:	f004 ff82 	bl	8008f94 <TLSX_Parse>
 8004090:	4605      	mov	r5, r0
 8004092:	2800      	cmp	r0, #0
 8004094:	f47f af62 	bne.w	8003f5c <DoServerHello+0x3c>
                i += totalExtSz;
 8004098:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800409c:	441e      	add	r6, r3
                *inOutIdx = i;
 800409e:	f8ca 6000 	str.w	r6, [sl]
        ssl->options.serverState = SERVER_HELLO_COMPLETE;
 80040a2:	2303      	movs	r3, #3
 80040a4:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
        if (IsEncryptionOn(ssl, 0)) {
 80040a8:	2100      	movs	r1, #0
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7fc fc7f 	bl	80009ae <IsEncryptionOn>
 80040b0:	b130      	cbz	r0, 80040c0 <DoServerHello+0x1a0>
            *inOutIdx += ssl->keys.padSz;
 80040b2:	f8da 3000 	ldr.w	r3, [sl]
 80040b6:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80040ba:	4413      	add	r3, r2
 80040bc:	f8ca 3000 	str.w	r3, [sl]
        ret = CompleteServerHello(ssl);
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff fec7 	bl	8003e54 <CompleteServerHello>
 80040c6:	4605      	mov	r5, r0
        return ret;
 80040c8:	e748      	b.n	8003f5c <DoServerHello+0x3c>
 80040ca:	bf00      	nop
 80040cc:	fffffeb8 	.word	0xfffffeb8
 80040d0:	fffffe0a 	.word	0xfffffe0a

080040d4 <VerifyClientSuite>:
    {
 80040d4:	b508      	push	{r3, lr}
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
        if (CipherRequires(cipherSuite0, cipherSuite, REQUIRES_PSK)) {
 80040da:	2204      	movs	r2, #4
 80040dc:	f7fc f8ac 	bl	8000238 <CipherRequires>
    }
 80040e0:	fab0 f080 	clz	r0, r0
 80040e4:	0940      	lsrs	r0, r0, #5
 80040e6:	bd08      	pop	{r3, pc}

080040e8 <SendClientKeyExchange>:
{
 80040e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (ssl->async == NULL) {
 80040ec:	6b85      	ldr	r5, [r0, #56]	; 0x38
{
 80040ee:	b086      	sub	sp, #24
 80040f0:	4604      	mov	r4, r0
    if (ssl->async == NULL) {
 80040f2:	b9d5      	cbnz	r5, 800412a <SendClientKeyExchange+0x42>
                XMALLOC(sizeof(struct WOLFSSL_ASYNC), ssl->heap,
 80040f4:	204c      	movs	r0, #76	; 0x4c
 80040f6:	f019 fc35 	bl	801d964 <malloc>
        ssl->async = (struct WOLFSSL_ASYNC*)
 80040fa:	63a0      	str	r0, [r4, #56]	; 0x38
        if (ssl->async == NULL)
 80040fc:	b988      	cbnz	r0, 8004122 <SendClientKeyExchange+0x3a>
            ERROR_OUT(MEMORY_E, exit_scke);
 80040fe:	f06f 057c 	mvn.w	r5, #124	; 0x7c
    if (ssl->arrays->preMasterSecret != NULL) {
 8004102:	68a3      	ldr	r3, [r4, #8]
 8004104:	6858      	ldr	r0, [r3, #4]
 8004106:	b110      	cbz	r0, 800410e <SendClientKeyExchange+0x26>
        ForceZero(ssl->arrays->preMasterSecret, ssl->arrays->preMasterSz);
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	f7fc f87f 	bl	800020c <ForceZero>
    ssl->arrays->preMasterSz = 0;
 800410e:	68a3      	ldr	r3, [r4, #8]
 8004110:	2100      	movs	r1, #0
    FreeAsyncCtx(ssl, 0);
 8004112:	4620      	mov	r0, r4
    ssl->arrays->preMasterSz = 0;
 8004114:	6099      	str	r1, [r3, #8]
    FreeAsyncCtx(ssl, 0);
 8004116:	f7fd f9e7 	bl	80014e8 <FreeAsyncCtx>
    FreeKeyExchange(ssl);
 800411a:	4620      	mov	r0, r4
 800411c:	f7fd f9f8 	bl	8001510 <FreeKeyExchange>
    return ret;
 8004120:	e1e0      	b.n	80044e4 <SendClientKeyExchange+0x3fc>
        XMEMSET(ssl->async, 0, sizeof(struct WOLFSSL_ASYNC));
 8004122:	224c      	movs	r2, #76	; 0x4c
 8004124:	4629      	mov	r1, r5
 8004126:	f019 fc65 	bl	801d9f4 <memset>
    if (ssl->options.buildingMsg) {
 800412a:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    args = (SckeArgs*)ssl->async->args;
 800412e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (ssl->options.buildingMsg) {
 8004130:	f011 0108 	ands.w	r1, r1, #8
 8004134:	d10e      	bne.n	8004154 <SendClientKeyExchange+0x6c>
        XMEMSET(args, 0, sizeof(SckeArgs));
 8004136:	221c      	movs	r2, #28
        ssl->options.asyncState = TLS_ASYNC_BEGIN;
 8004138:	f884 1283 	strb.w	r1, [r4, #643]	; 0x283
        XMEMSET(args, 0, sizeof(SckeArgs));
 800413c:	1d30      	adds	r0, r6, #4
 800413e:	f019 fc59 	bl	801d9f4 <memset>
        ssl->options.buildingMsg = 1;
 8004142:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
        ssl->async->freeArgs = FreeSckeArgs;
 8004146:	4a6d      	ldr	r2, [pc, #436]	; (80042fc <SendClientKeyExchange+0x214>)
        ssl->options.buildingMsg = 1;
 8004148:	f043 0308 	orr.w	r3, r3, #8
 800414c:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
        ssl->async->freeArgs = FreeSckeArgs;
 8004150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004152:	601a      	str	r2, [r3, #0]
    switch(ssl->options.asyncState)
 8004154:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
 8004158:	2b05      	cmp	r3, #5
 800415a:	f200 80c8 	bhi.w	80042ee <SendClientKeyExchange+0x206>
 800415e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004162:	0006      	.short	0x0006
 8004164:	00d80032 	.word	0x00d80032
 8004168:	010d00fd 	.word	0x010d00fd
 800416c:	0167      	.short	0x0167
            switch (ssl->specs.kea) {
 800416e:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004172:	2b07      	cmp	r3, #7
 8004174:	d001      	beq.n	800417a <SendClientKeyExchange+0x92>
                            ERROR_OUT(NO_PEER_KEY, exit_scke);
 8004176:	4d62      	ldr	r5, [pc, #392]	; (8004300 <SendClientKeyExchange+0x218>)
 8004178:	e7c3      	b.n	8004102 <SendClientKeyExchange+0x1a>
                    if (ssl->peerX25519KeyPresent) {
 800417a:	f894 32b8 	ldrb.w	r3, [r4, #696]	; 0x2b8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d053      	beq.n	800422a <SendClientKeyExchange+0x142>
                        if (!ssl->peerX25519Key || !ssl->peerX25519Key->dp) {
 8004182:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d05a      	beq.n	8004240 <SendClientKeyExchange+0x158>
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d057      	beq.n	8004240 <SendClientKeyExchange+0x158>
                        ssl->hsType = DYNAMIC_TYPE_CURVE25519;
 8004190:	2145      	movs	r1, #69	; 0x45
 8004192:	6421      	str	r1, [r4, #64]	; 0x40
                        ret = AllocKey(ssl, ssl->hsType, &ssl->hsKey);
 8004194:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8004198:	4620      	mov	r0, r4
 800419a:	f7fd f963 	bl	8001464 <AllocKey>
                        if (ret != 0) {
 800419e:	4605      	mov	r5, r0
 80041a0:	2800      	cmp	r0, #0
 80041a2:	f040 8194 	bne.w	80044ce <SendClientKeyExchange+0x3e6>
        ret = wc_curve25519_make_key(ssl->rng, CURVE25519_KEYSIZE, key);
 80041a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80041a8:	69a0      	ldr	r0, [r4, #24]
 80041aa:	2120      	movs	r1, #32
 80041ac:	f011 fba6 	bl	80158fc <wc_curve25519_make_key>
    if (ret == 0) {
 80041b0:	4605      	mov	r5, r0
 80041b2:	2800      	cmp	r0, #0
 80041b4:	f040 818b 	bne.w	80044ce <SendClientKeyExchange+0x3e6>
        ssl->ecdhCurveOID = ECC_X25519_OID;
 80041b8:	f240 136d 	movw	r3, #365	; 0x16d
 80041bc:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
            ssl->options.asyncState = TLS_ASYNC_BUILD;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            args->encSz = MAX_ENCRYPT_SZ;
 80041c6:	258b      	movs	r5, #139	; 0x8b
 80041c8:	6135      	str	r5, [r6, #16]
            args->encSecret = (byte*)XMALLOC(MAX_ENCRYPT_SZ, ssl->heap,
 80041ca:	4628      	mov	r0, r5
 80041cc:	f019 fbca 	bl	801d964 <malloc>
 80041d0:	60b0      	str	r0, [r6, #8]
            if (args->encSecret == NULL) {
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d093      	beq.n	80040fe <SendClientKeyExchange+0x16>
            if (ssl->arrays->preMasterSecret == NULL) {
 80041d6:	68a7      	ldr	r7, [r4, #8]
 80041d8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80041dc:	f1b8 0f00 	cmp.w	r8, #0
 80041e0:	d10c      	bne.n	80041fc <SendClientKeyExchange+0x114>
                ssl->arrays->preMasterSz = ENCRYPT_LEN;
 80041e2:	60bd      	str	r5, [r7, #8]
                ssl->arrays->preMasterSecret = (byte*)XMALLOC(ENCRYPT_LEN,
 80041e4:	4628      	mov	r0, r5
 80041e6:	f019 fbbd 	bl	801d964 <malloc>
                if (ssl->arrays->preMasterSecret == NULL) {
 80041ea:	68a3      	ldr	r3, [r4, #8]
                ssl->arrays->preMasterSecret = (byte*)XMALLOC(ENCRYPT_LEN,
 80041ec:	6078      	str	r0, [r7, #4]
                if (ssl->arrays->preMasterSecret == NULL) {
 80041ee:	6858      	ldr	r0, [r3, #4]
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d084      	beq.n	80040fe <SendClientKeyExchange+0x16>
                XMEMSET(ssl->arrays->preMasterSecret, 0, ENCRYPT_LEN);
 80041f4:	462a      	mov	r2, r5
 80041f6:	4641      	mov	r1, r8
 80041f8:	f019 fbfc 	bl	801d9f4 <memset>
            switch(ssl->specs.kea)
 80041fc:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004200:	2b07      	cmp	r3, #7
 8004202:	d1b8      	bne.n	8004176 <SendClientKeyExchange+0x8e>
                    ssl->arrays->preMasterSz = ENCRYPT_LEN;
 8004204:	68a3      	ldr	r3, [r4, #8]
                        ret = wc_curve25519_export_public_ex(
 8004206:	68b1      	ldr	r1, [r6, #8]
                                (curve25519_key*)ssl->hsKey,
 8004208:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                    ssl->arrays->preMasterSz = ENCRYPT_LEN;
 800420a:	228b      	movs	r2, #139	; 0x8b
 800420c:	609a      	str	r2, [r3, #8]
                    if (ssl->hsType == DYNAMIC_TYPE_CURVE25519) {
 800420e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004210:	2b45      	cmp	r3, #69	; 0x45
                        ret = wc_curve25519_export_public_ex(
 8004212:	f101 0101 	add.w	r1, r1, #1
 8004216:	f106 0210 	add.w	r2, r6, #16
                    if (ssl->hsType == DYNAMIC_TYPE_CURVE25519) {
 800421a:	d11a      	bne.n	8004252 <SendClientKeyExchange+0x16a>
                        ret = wc_curve25519_export_public_ex(
 800421c:	2300      	movs	r3, #0
 800421e:	f011 fbd1 	bl	80159c4 <wc_curve25519_export_public_ex>
                        if (ret != 0) {
 8004222:	2800      	cmp	r0, #0
 8004224:	d072      	beq.n	800430c <SendClientKeyExchange+0x224>
                            ERROR_OUT(ECC_EXPORT_ERROR, exit_scke);
 8004226:	4d37      	ldr	r5, [pc, #220]	; (8004304 <SendClientKeyExchange+0x21c>)
 8004228:	e76b      	b.n	8004102 <SendClientKeyExchange+0x1a>
                    if (ssl->specs.static_ecdh) {
 800422a:	f894 314f 	ldrb.w	r3, [r4, #335]	; 0x14f
 800422e:	b14b      	cbz	r3, 8004244 <SendClientKeyExchange+0x15c>
                        if (!ssl->peerEccDsaKey || !ssl->peerEccDsaKeyPresent) {
 8004230:	f8d4 72a0 	ldr.w	r7, [r4, #672]	; 0x2a0
 8004234:	b127      	cbz	r7, 8004240 <SendClientKeyExchange+0x158>
 8004236:	f894 32a6 	ldrb.w	r3, [r4, #678]	; 0x2a6
                        if (!ssl->peerEccKey || !ssl->peerEccKeyPresent) {
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 8135 	bne.w	80044aa <SendClientKeyExchange+0x3c2>
                            ERROR_OUT(NO_PEER_KEY, exit_scke);
 8004240:	4d31      	ldr	r5, [pc, #196]	; (8004308 <SendClientKeyExchange+0x220>)
 8004242:	e75e      	b.n	8004102 <SendClientKeyExchange+0x1a>
                        if (!ssl->peerEccKey || !ssl->peerEccKeyPresent) {
 8004244:	f8d4 729c 	ldr.w	r7, [r4, #668]	; 0x29c
 8004248:	2f00      	cmp	r7, #0
 800424a:	d0f9      	beq.n	8004240 <SendClientKeyExchange+0x158>
 800424c:	f894 3299 	ldrb.w	r3, [r4, #665]	; 0x299
 8004250:	e7f3      	b.n	800423a <SendClientKeyExchange+0x152>
                    ret = wc_ecc_export_x963((ecc_key*)ssl->hsKey,
 8004252:	f00a f82d 	bl	800e2b0 <wc_ecc_export_x963>
 8004256:	e7e4      	b.n	8004222 <SendClientKeyExchange+0x13a>
                    ret = EccSharedSecret(ssl,
 8004258:	68b1      	ldr	r1, [r6, #8]
 800425a:	9201      	str	r2, [sp, #4]
 800425c:	2501      	movs	r5, #1
 800425e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8004262:	f106 0310 	add.w	r3, r6, #16
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	194b      	adds	r3, r1, r5
 800426a:	e9d4 12a7 	ldrd	r1, r2, [r4, #668]	; 0x29c
                              ssl->peerEccDsaKey : ssl->peerEccKey;
 800426e:	f894 714f 	ldrb.w	r7, [r4, #335]	; 0x14f
                    ret = EccSharedSecret(ssl,
 8004272:	2f00      	cmp	r7, #0
 8004274:	bf08      	it	eq
 8004276:	460a      	moveq	r2, r1
 8004278:	4601      	mov	r1, r0
 800427a:	4620      	mov	r0, r4
 800427c:	f7fc fd8a 	bl	8000d94 <EccSharedSecret>
                    if (!ssl->specs.static_ecdh
 8004280:	f894 314f 	ldrb.w	r3, [r4, #335]	; 0x14f
                    ret = EccSharedSecret(ssl,
 8004284:	4605      	mov	r5, r0
                    if (!ssl->specs.static_ecdh
 8004286:	2b00      	cmp	r3, #0
 8004288:	d162      	bne.n	8004350 <SendClientKeyExchange+0x268>
                     && !ssl->options.keepResources) {
 800428a:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 800428e:	f013 0740 	ands.w	r7, r3, #64	; 0x40
 8004292:	d15d      	bne.n	8004350 <SendClientKeyExchange+0x268>
                        FreeKey(ssl, DYNAMIC_TYPE_ECC,
 8004294:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 8004298:	2125      	movs	r1, #37	; 0x25
 800429a:	4620      	mov	r0, r4
 800429c:	f7fd f8c7 	bl	800142e <FreeKey>
                        ssl->peerEccKeyPresent = 0;
 80042a0:	f884 7299 	strb.w	r7, [r4, #665]	; 0x299
 80042a4:	e054      	b.n	8004350 <SendClientKeyExchange+0x268>
                tlsSz = 2;
 80042a6:	2702      	movs	r7, #2
 80042a8:	e072      	b.n	8004390 <SendClientKeyExchange+0x2a8>
            idx = HANDSHAKE_HEADER_SZ + RECORD_HEADER_SZ;
 80042aa:	2509      	movs	r5, #9
 80042ac:	e09c      	b.n	80043e8 <SendClientKeyExchange+0x300>
                ret = HashOutput(ssl, args->output, args->sendSz, 0);
 80042ae:	4629      	mov	r1, r5
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7fd f9df 	bl	8001674 <HashOutput>
            if (ret != 0) {
 80042b6:	4605      	mov	r5, r0
 80042b8:	2800      	cmp	r0, #0
 80042ba:	f000 80da 	beq.w	8004472 <SendClientKeyExchange+0x38a>
 80042be:	e106      	b.n	80044ce <SendClientKeyExchange+0x3e6>
                ret = SendBuffered(ssl);
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7fd fb35 	bl	8001930 <SendBuffered>
            if (ret == 0 || ret == WANT_WRITE) {
 80042c6:	4605      	mov	r5, r0
 80042c8:	2800      	cmp	r0, #0
 80042ca:	f000 80dd 	beq.w	8004488 <SendClientKeyExchange+0x3a0>
 80042ce:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 80042d2:	4298      	cmp	r0, r3
 80042d4:	f000 80d9 	beq.w	800448a <SendClientKeyExchange+0x3a2>
    if (ret == WC_PENDING_E || ret == WANT_WRITE) {
 80042d8:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 80042dc:	f000 80fb 	beq.w	80044d6 <SendClientKeyExchange+0x3ee>
 80042e0:	e70f      	b.n	8004102 <SendClientKeyExchange+0x1a>
 80042e2:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 80042e6:	429d      	cmp	r5, r3
 80042e8:	f000 80f7 	beq.w	80044da <SendClientKeyExchange+0x3f2>
 80042ec:	e709      	b.n	8004102 <SendClientKeyExchange+0x1a>
    switch(ssl->options.asyncState)
 80042ee:	f46f 7596 	mvn.w	r5, #300	; 0x12c
 80042f2:	e706      	b.n	8004102 <SendClientKeyExchange+0x1a>
                        ret = BAD_STATE_E;
 80042f4:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 80042f8:	e703      	b.n	8004102 <SendClientKeyExchange+0x1a>
 80042fa:	bf00      	nop
 80042fc:	08000605 	.word	0x08000605
 8004300:	fffffe8a 	.word	0xfffffe8a
 8004304:	fffffe9e 	.word	0xfffffe9e
 8004308:	fffffec4 	.word	0xfffffec4
            ssl->options.asyncState = TLS_ASYNC_DO;
 800430c:	2302      	movs	r3, #2
 800430e:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            switch(ssl->specs.kea)
 8004312:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004316:	2b07      	cmp	r3, #7
 8004318:	f47f af2d 	bne.w	8004176 <SendClientKeyExchange+0x8e>
                            ssl->arrays->preMasterSecret,
 800431c:	68a3      	ldr	r3, [r4, #8]
                    if (ssl->peerX25519KeyPresent) {
 800431e:	f894 12b8 	ldrb.w	r1, [r4, #696]	; 0x2b8
                        ret = X25519SharedSecret(ssl,
 8004322:	685a      	ldr	r2, [r3, #4]
                            (curve25519_key*)ssl->hsKey, ssl->peerX25519Key,
 8004324:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                        ret = X25519SharedSecret(ssl,
 8004326:	3308      	adds	r3, #8
                    if (ssl->peerX25519KeyPresent) {
 8004328:	2900      	cmp	r1, #0
 800432a:	d095      	beq.n	8004258 <SendClientKeyExchange+0x170>
        ret = wc_curve25519_shared_secret_ex(priv_key, pub_key, out, outlen,
 800432c:	2100      	movs	r1, #0
 800432e:	9100      	str	r1, [sp, #0]
 8004330:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
 8004334:	f011 fb06 	bl	8015944 <wc_curve25519_shared_secret_ex>
                        if (!ssl->specs.static_ecdh
 8004338:	f894 714f 	ldrb.w	r7, [r4, #335]	; 0x14f
        ret = wc_curve25519_shared_secret_ex(priv_key, pub_key, out, outlen,
 800433c:	4605      	mov	r5, r0
                        if (!ssl->specs.static_ecdh
 800433e:	b93f      	cbnz	r7, 8004350 <SendClientKeyExchange+0x268>
                            FreeKey(ssl, DYNAMIC_TYPE_CURVE25519,
 8004340:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8004344:	2145      	movs	r1, #69	; 0x45
 8004346:	4620      	mov	r0, r4
 8004348:	f7fd f871 	bl	800142e <FreeKey>
                            ssl->peerX25519KeyPresent = 0;
 800434c:	f884 72b8 	strb.w	r7, [r4, #696]	; 0x2b8
            if (ret != 0) {
 8004350:	2d00      	cmp	r5, #0
 8004352:	f040 80bc 	bne.w	80044ce <SendClientKeyExchange+0x3e6>
            ssl->options.asyncState = TLS_ASYNC_VERIFY;
 8004356:	2303      	movs	r3, #3
 8004358:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            switch(ssl->specs.kea)
 800435c:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004360:	2b07      	cmp	r3, #7
 8004362:	f47f af08 	bne.w	8004176 <SendClientKeyExchange+0x8e>
                    if (args->encSecret == NULL) {
 8004366:	68b3      	ldr	r3, [r6, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0c3      	beq.n	80042f4 <SendClientKeyExchange+0x20c>
                        *args->encSecret = (byte)args->encSz;
 800436c:	6932      	ldr	r2, [r6, #16]
 800436e:	701a      	strb	r2, [r3, #0]
                        args->encSz += OPAQUE8_LEN;
 8004370:	6933      	ldr	r3, [r6, #16]
 8004372:	3301      	adds	r3, #1
 8004374:	6133      	str	r3, [r6, #16]
            ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 8004376:	2304      	movs	r3, #4
 8004378:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            if (ssl->options.tls || ssl->specs.kea == diffie_hellman_kea) {
 800437c:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
 8004380:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004384:	0652      	lsls	r2, r2, #25
 8004386:	d48e      	bmi.n	80042a6 <SendClientKeyExchange+0x1be>
            word32 tlsSz = 0;
 8004388:	2b02      	cmp	r3, #2
 800438a:	bf0c      	ite	eq
 800438c:	2702      	moveq	r7, #2
 800438e:	2700      	movne	r7, #0
            if (ssl->specs.kea == ecc_diffie_hellman_kea ||
 8004390:	3b05      	subs	r3, #5
                tlsSz = 0;
 8004392:	2b02      	cmp	r3, #2
            args->sendSz = args->encSz + tlsSz + idx;
 8004394:	6932      	ldr	r2, [r6, #16]
                tlsSz = 0;
 8004396:	bf98      	it	ls
 8004398:	2700      	movls	r7, #0
            args->sendSz = args->encSz + tlsSz + idx;
 800439a:	443a      	add	r2, r7
 800439c:	f102 0309 	add.w	r3, r2, #9
 80043a0:	61b3      	str	r3, [r6, #24]
            if (IsEncryptionOn(ssl, 1)) {
 80043a2:	2101      	movs	r1, #1
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fc fb02 	bl	80009ae <IsEncryptionOn>
 80043aa:	b108      	cbz	r0, 80043b0 <SendClientKeyExchange+0x2c8>
                args->sendSz += MAX_MSG_EXTRA;
 80043ac:	326f      	adds	r2, #111	; 0x6f
 80043ae:	61b2      	str	r2, [r6, #24]
            if ((ret = CheckAvailableSize(ssl, args->sendSz)) != 0)
 80043b0:	69b1      	ldr	r1, [r6, #24]
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7fd fbe6 	bl	8001b84 <CheckAvailableSize>
 80043b8:	4605      	mov	r5, r0
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f040 8087 	bne.w	80044ce <SendClientKeyExchange+0x3e6>
            args->output = GetOutputBuffer(ssl);
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7fd faf9 	bl	80019b8 <GetOutputBuffer>
            AddHeaders(args->output, args->encSz + tlsSz, client_key_exchange, ssl);
 80043c6:	6931      	ldr	r1, [r6, #16]
            args->output = GetOutputBuffer(ssl);
 80043c8:	6070      	str	r0, [r6, #4]
            AddHeaders(args->output, args->encSz + tlsSz, client_key_exchange, ssl);
 80043ca:	4623      	mov	r3, r4
 80043cc:	2210      	movs	r2, #16
 80043ce:	4439      	add	r1, r7
 80043d0:	f7fc fa3a 	bl	8000848 <AddHeaders>
            if (tlsSz) {
 80043d4:	2f00      	cmp	r7, #0
 80043d6:	f43f af68 	beq.w	80042aa <SendClientKeyExchange+0x1c2>
                c16toa((word16)args->encSz, &args->output[idx]);
 80043da:	6932      	ldr	r2, [r6, #16]
 80043dc:	6873      	ldr	r3, [r6, #4]
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80043de:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80043e2:	7259      	strb	r1, [r3, #9]
    c[1] =  (byte)(wc_u16       & 0xff);
 80043e4:	729a      	strb	r2, [r3, #10]
                idx += OPAQUE16_LEN;
 80043e6:	250b      	movs	r5, #11
            XMEMCPY(args->output + idx, args->encSecret, args->encSz);
 80043e8:	6870      	ldr	r0, [r6, #4]
 80043ea:	68b1      	ldr	r1, [r6, #8]
 80043ec:	6932      	ldr	r2, [r6, #16]
 80043ee:	4428      	add	r0, r5
 80043f0:	f019 fad8 	bl	801d9a4 <memcpy>
            if (IsEncryptionOn(ssl, 1)) {
 80043f4:	2101      	movs	r1, #1
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fc fad9 	bl	80009ae <IsEncryptionOn>
 80043fc:	b1a8      	cbz	r0, 800442a <SendClientKeyExchange+0x342>
                if (ssl->options.dtls)
 80043fe:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
            idx += args->encSz;
 8004402:	6930      	ldr	r0, [r6, #16]
                    recordHeaderSz += DTLS_RECORD_EXTRA;
 8004404:	f013 0f04 	tst.w	r3, #4
 8004408:	bf0c      	ite	eq
 800440a:	2705      	moveq	r7, #5
 800440c:	270d      	movne	r7, #13
            idx += args->encSz;
 800440e:	4428      	add	r0, r5
                args->inputSz = idx - recordHeaderSz; /* buildmsg adds rechdr */
 8004410:	1bc0      	subs	r0, r0, r7
 8004412:	61f0      	str	r0, [r6, #28]
                args->input = (byte*)XMALLOC(args->inputSz, ssl->heap,
 8004414:	f019 faa6 	bl	801d964 <malloc>
 8004418:	60f0      	str	r0, [r6, #12]
                if (args->input == NULL) {
 800441a:	2800      	cmp	r0, #0
 800441c:	f43f ae6f 	beq.w	80040fe <SendClientKeyExchange+0x16>
                XMEMCPY(args->input, args->output + recordHeaderSz,
 8004420:	6871      	ldr	r1, [r6, #4]
 8004422:	69f2      	ldr	r2, [r6, #28]
 8004424:	4439      	add	r1, r7
 8004426:	f019 fabd 	bl	801d9a4 <memcpy>
            ssl->options.asyncState = TLS_ASYNC_END;
 800442a:	2305      	movs	r3, #5
 800442c:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            if (IsEncryptionOn(ssl, 1)) {
 8004430:	2101      	movs	r1, #1
 8004432:	4620      	mov	r0, r4
 8004434:	f7fc fabb 	bl	80009ae <IsEncryptionOn>
                ret = BuildMessage(ssl, args->output, args->sendSz,
 8004438:	6875      	ldr	r5, [r6, #4]
 800443a:	69b2      	ldr	r2, [r6, #24]
            if (IsEncryptionOn(ssl, 1)) {
 800443c:	4603      	mov	r3, r0
 800443e:	2800      	cmp	r0, #0
 8004440:	f43f af35 	beq.w	80042ae <SendClientKeyExchange+0x1c6>
                ret = BuildMessage(ssl, args->output, args->sendSz,
 8004444:	2700      	movs	r7, #0
 8004446:	e9cd 1702 	strd	r1, r7, [sp, #8]
 800444a:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800444e:	2316      	movs	r3, #22
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	69f3      	ldr	r3, [r6, #28]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4629      	mov	r1, r5
 8004458:	68f3      	ldr	r3, [r6, #12]
 800445a:	4620      	mov	r0, r4
 800445c:	f7fd fe50 	bl	8002100 <BuildMessage>
 8004460:	4605      	mov	r5, r0
                XFREE(args->input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8004462:	68f0      	ldr	r0, [r6, #12]
 8004464:	b108      	cbz	r0, 800446a <SendClientKeyExchange+0x382>
 8004466:	f019 fa85 	bl	801d974 <free>
                if (ret >= 0) {
 800446a:	2d00      	cmp	r5, #0
                args->input = NULL; /* make sure its not double free'd on cleanup */
 800446c:	60f7      	str	r7, [r6, #12]
                if (ret >= 0) {
 800446e:	db2e      	blt.n	80044ce <SendClientKeyExchange+0x3e6>
                    args->sendSz = ret;
 8004470:	61b5      	str	r5, [r6, #24]
            ssl->buffers.outputBuffer.length += args->sendSz;
 8004472:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004476:	69b2      	ldr	r2, [r6, #24]
 8004478:	4413      	add	r3, r2
 800447a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            if (!ssl->options.groupMessages) {
 800447e:	f994 3274 	ldrsb.w	r3, [r4, #628]	; 0x274
 8004482:	2b00      	cmp	r3, #0
 8004484:	f6bf af1c 	bge.w	80042c0 <SendClientKeyExchange+0x1d8>
                    recordHeaderSz += DTLS_RECORD_EXTRA;
 8004488:	2500      	movs	r5, #0
                int tmpRet = MakeMasterSecret(ssl);
 800448a:	4620      	mov	r0, r4
 800448c:	f002 fea9 	bl	80071e2 <MakeMasterSecret>
                ssl->options.clientState = CLIENT_KEYEXCHANGE_COMPLETE;
 8004490:	230d      	movs	r3, #13
 8004492:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
                ssl->options.buildingMsg = 0;
 8004496:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 800449a:	f36f 03c3 	bfc	r3, #3, #1
                if (tmpRet != 0) {
 800449e:	2800      	cmp	r0, #0
 80044a0:	bf18      	it	ne
 80044a2:	4605      	movne	r5, r0
                ssl->options.buildingMsg = 0;
 80044a4:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
 80044a8:	e011      	b.n	80044ce <SendClientKeyExchange+0x3e6>
                    ssl->hsType = DYNAMIC_TYPE_ECC;
 80044aa:	2125      	movs	r1, #37	; 0x25
 80044ac:	6421      	str	r1, [r4, #64]	; 0x40
                    ret = AllocKey(ssl, ssl->hsType, &ssl->hsKey);
 80044ae:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fc ffd6 	bl	8001464 <AllocKey>
                    if (ret != 0) {
 80044b8:	4605      	mov	r5, r0
 80044ba:	b940      	cbnz	r0, 80044ce <SendClientKeyExchange+0x3e6>
                    ret = EccMakeKey(ssl, (ecc_key*)ssl->hsKey, peerKey);
 80044bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80044be:	463a      	mov	r2, r7
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7fc fc7c 	bl	8000dbe <EccMakeKey>
            if (ret != 0) {
 80044c6:	4605      	mov	r5, r0
 80044c8:	2800      	cmp	r0, #0
 80044ca:	f43f ae79 	beq.w	80041c0 <SendClientKeyExchange+0xd8>
    if (ret == WC_PENDING_E || ret == WANT_WRITE) {
 80044ce:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
 80044d2:	f47f af06 	bne.w	80042e2 <SendClientKeyExchange+0x1fa>
                if (tmpRet != 0) {
 80044d6:	f06f 056b 	mvn.w	r5, #107	; 0x6b
        if (ssl->options.buildingMsg)
 80044da:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80044de:	071b      	lsls	r3, r3, #28
 80044e0:	f57f ae0f 	bpl.w	8004102 <SendClientKeyExchange+0x1a>
}
 80044e4:	4628      	mov	r0, r5
 80044e6:	b006      	add	sp, #24
 80044e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080044ec <SendCertificateVerify>:
{
 80044ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (ssl->async == NULL) {
 80044ee:	6b85      	ldr	r5, [r0, #56]	; 0x38
{
 80044f0:	4604      	mov	r4, r0
    if (ssl->async == NULL) {
 80044f2:	bb1d      	cbnz	r5, 800453c <SendCertificateVerify+0x50>
                XMALLOC(sizeof(struct WOLFSSL_ASYNC), ssl->heap,
 80044f4:	204c      	movs	r0, #76	; 0x4c
 80044f6:	f019 fa35 	bl	801d964 <malloc>
        ssl->async = (struct WOLFSSL_ASYNC*)
 80044fa:	63a0      	str	r0, [r4, #56]	; 0x38
        if (ssl->async == NULL)
 80044fc:	b9d0      	cbnz	r0, 8004534 <SendCertificateVerify+0x48>
            ERROR_OUT(MEMORY_E, exit_scv);
 80044fe:	f06f 067c 	mvn.w	r6, #124	; 0x7c
    if(ssl->buffers.digest.buffer) {
 8004502:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8004506:	b128      	cbz	r0, 8004514 <SendCertificateVerify+0x28>
        if (!ssl->options.dontFreeDigest) {
 8004508:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 800450c:	075b      	lsls	r3, r3, #29
 800450e:	d401      	bmi.n	8004514 <SendCertificateVerify+0x28>
            XFREE(ssl->buffers.digest.buffer,
 8004510:	f019 fa30 	bl	801d974 <free>
    ssl->options.dontFreeDigest = 0;
 8004514:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
    ssl->buffers.digest.buffer = NULL;
 8004518:	2100      	movs	r1, #0
    ssl->options.dontFreeDigest = 0;
 800451a:	f361 0382 	bfi	r3, r1, #2, #1
    FreeAsyncCtx(ssl, 0);
 800451e:	4620      	mov	r0, r4
    ssl->buffers.digest.length = 0;
 8004520:	e9c4 1132 	strd	r1, r1, [r4, #200]	; 0xc8
    ssl->options.dontFreeDigest = 0;
 8004524:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
    FreeAsyncCtx(ssl, 0);
 8004528:	f7fc ffde 	bl	80014e8 <FreeAsyncCtx>
    FreeKeyExchange(ssl);
 800452c:	4620      	mov	r0, r4
 800452e:	f7fc ffef 	bl	8001510 <FreeKeyExchange>
    return ret;
 8004532:	e122      	b.n	800477a <SendCertificateVerify+0x28e>
        XMEMSET(ssl->async, 0, sizeof(struct WOLFSSL_ASYNC));
 8004534:	224c      	movs	r2, #76	; 0x4c
 8004536:	4629      	mov	r1, r5
 8004538:	f019 fa5c 	bl	801d9f4 <memset>
    if (ssl->options.buildingMsg) {
 800453c:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    args = (ScvArgs*)ssl->async->args;
 8004540:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    if (ssl->options.buildingMsg) {
 8004542:	f011 0108 	ands.w	r1, r1, #8
 8004546:	d00e      	beq.n	8004566 <SendCertificateVerify+0x7a>
        if (ssl->options.asyncState != TLS_ASYNC_END) {
 8004548:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
 800454c:	2b05      	cmp	r3, #5
 800454e:	f040 8119 	bne.w	8004784 <SendCertificateVerify+0x298>
            ret = SendHandshakeMsg(ssl, args->output,
 8004552:	696a      	ldr	r2, [r5, #20]
                (word32)args->length + args->extraSz + VERIFY_HEADER,
 8004554:	8cab      	ldrh	r3, [r5, #36]	; 0x24
            ret = SendHandshakeMsg(ssl, args->output,
 8004556:	6869      	ldr	r1, [r5, #4]
 8004558:	3202      	adds	r2, #2
 800455a:	441a      	add	r2, r3
 800455c:	4620      	mov	r0, r4
 800455e:	f7fe f8db 	bl	8002718 <SendHandshakeMsg.constprop.0>
 8004562:	4606      	mov	r6, r0
            if (ret != 0)
 8004564:	e104      	b.n	8004770 <SendCertificateVerify+0x284>
        XMEMSET(args, 0, sizeof(ScvArgs));
 8004566:	2224      	movs	r2, #36	; 0x24
        ssl->options.asyncState = TLS_ASYNC_BEGIN;
 8004568:	f884 1283 	strb.w	r1, [r4, #643]	; 0x283
        XMEMSET(args, 0, sizeof(ScvArgs));
 800456c:	1d28      	adds	r0, r5, #4
 800456e:	f019 fa41 	bl	801d9f4 <memset>
        ssl->async->freeArgs = FreeScvArgs;
 8004572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004574:	4a88      	ldr	r2, [pc, #544]	; (8004798 <SendCertificateVerify+0x2ac>)
 8004576:	601a      	str	r2, [r3, #0]
    switch(ssl->options.asyncState)
 8004578:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
 800457c:	2b05      	cmp	r3, #5
 800457e:	f200 8104 	bhi.w	800478a <SendCertificateVerify+0x29e>
 8004582:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <SendCertificateVerify+0x9c>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	080045a1 	.word	0x080045a1
 800458c:	080045d7 	.word	0x080045d7
 8004590:	0800468f 	.word	0x0800468f
 8004594:	080046d7 	.word	0x080046d7
 8004598:	08004711 	.word	0x08004711
 800459c:	08004553 	.word	0x08004553
            if (ssl->options.sendVerify == SEND_BLANK_CERT) {
 80045a0:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f000 80f3 	beq.w	8004794 <SendCertificateVerify+0x2a8>
            args->sendSz = MAX_CERT_VERIFY_SZ + MAX_MSG_EXTRA;
 80045ae:	23af      	movs	r3, #175	; 0xaf
 80045b0:	61eb      	str	r3, [r5, #28]
            if (IsEncryptionOn(ssl, 1)) {
 80045b2:	2101      	movs	r1, #1
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7fc f9fa 	bl	80009ae <IsEncryptionOn>
 80045ba:	b110      	cbz	r0, 80045c2 <SendCertificateVerify+0xd6>
                args->sendSz += MAX_MSG_EXTRA;
 80045bc:	f240 1315 	movw	r3, #277	; 0x115
 80045c0:	61eb      	str	r3, [r5, #28]
            args->input = (byte*)XMALLOC(args->sendSz,
 80045c2:	69e8      	ldr	r0, [r5, #28]
 80045c4:	f019 f9ce 	bl	801d964 <malloc>
 80045c8:	60e8      	str	r0, [r5, #12]
            if (args->input == NULL)
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d097      	beq.n	80044fe <SendCertificateVerify+0x12>
            ssl->options.asyncState = TLS_ASYNC_BUILD;
 80045ce:	2301      	movs	r3, #1
            args->output = args->input;
 80045d0:	6068      	str	r0, [r5, #4]
            ssl->options.asyncState = TLS_ASYNC_BUILD;
 80045d2:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            ret = BuildCertHashes(ssl, &ssl->hsHashes->certHashes);
 80045d6:	68e1      	ldr	r1, [r4, #12]
 80045d8:	4620      	mov	r0, r4
 80045da:	3174      	adds	r1, #116	; 0x74
 80045dc:	f7fd fd60 	bl	80020a0 <BuildCertHashes>
            if (ret != 0) {
 80045e0:	4606      	mov	r6, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f040 80c4 	bne.w	8004770 <SendCertificateVerify+0x284>
            if (ssl->buffers.key == NULL) {
 80045e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80045ec:	b913      	cbnz	r3, 80045f4 <SendCertificateVerify+0x108>
                    ERROR_OUT(NO_PRIVATE_KEY, exit_scv);
 80045ee:	f46f 769e 	mvn.w	r6, #316	; 0x13c
 80045f2:	e786      	b.n	8004502 <SendCertificateVerify+0x16>
                ret = DecodePrivateKey(ssl, &args->length);
 80045f4:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7ff f9d9 	bl	80039b0 <DecodePrivateKey>
                if (ret != 0) {
 80045fe:	4606      	mov	r6, r0
 8004600:	2800      	cmp	r0, #0
 8004602:	f040 80b5 	bne.w	8004770 <SendCertificateVerify+0x284>
            if (args->length == 0) {
 8004606:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <SendCertificateVerify+0x102>
            args->idx = RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ;
 800460c:	2309      	movs	r3, #9
 800460e:	612b      	str	r3, [r5, #16]
            args->verify = &args->output[RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ];
 8004610:	686b      	ldr	r3, [r5, #4]
            args->extraSz = 0;  /* tls 1.2 hash/sig */
 8004612:	6168      	str	r0, [r5, #20]
            args->verify = &args->output[RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ];
 8004614:	3309      	adds	r3, #9
            ssl->buffers.sig.length = MAX_ENCODED_SIG_SZ;
 8004616:	208c      	movs	r0, #140	; 0x8c
            args->verify = &args->output[RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ];
 8004618:	60ab      	str	r3, [r5, #8]
            ssl->buffers.sig.length = MAX_ENCODED_SIG_SZ;
 800461a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
            ssl->buffers.sig.buffer = (byte*)XMALLOC(MAX_ENCODED_SIG_SZ,
 800461e:	f019 f9a1 	bl	801d964 <malloc>
 8004622:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
            if (ssl->buffers.sig.buffer == NULL) {
 8004626:	2800      	cmp	r0, #0
 8004628:	f43f af69 	beq.w	80044fe <SendCertificateVerify+0x12>
            if (!IsAtLeastTLSv1_2(ssl)) {
 800462c:	4620      	mov	r0, r4
 800462e:	f7fc f9a1 	bl	8000974 <IsAtLeastTLSv1_2>
 8004632:	2800      	cmp	r0, #0
 8004634:	d17b      	bne.n	800472e <SendCertificateVerify+0x242>
            ssl->options.dontFreeDigest = 1;
 8004636:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
            ssl->buffers.digest.buffer = ssl->hsHashes->certHashes.sha256;
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	3388      	adds	r3, #136	; 0x88
 8004646:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
            ssl->buffers.digest.length = WC_SHA256_DIGEST_SIZE;
 800464a:	2320      	movs	r3, #32
 800464c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
            if (ssl->hsType == DYNAMIC_TYPE_RSA) {
 8004650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004652:	2b0a      	cmp	r3, #10
 8004654:	d171      	bne.n	800473a <SendCertificateVerify+0x24e>
                    args->sigAlgo = rsa_sa_algo;
 8004656:	2301      	movs	r3, #1
                args->sigAlgo = ed448_sa_algo;
 8004658:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
            if (IsAtLeastTLSv1_2(ssl)) {
 800465c:	4620      	mov	r0, r4
 800465e:	f7fc f989 	bl	8000974 <IsAtLeastTLSv1_2>
 8004662:	b168      	cbz	r0, 8004680 <SendCertificateVerify+0x194>
                EncodeSigAlg(ssl->options.hashAlgo, args->sigAlgo,
 8004664:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 8004668:	68ab      	ldr	r3, [r5, #8]
    switch (hsType) {
 800466a:	2a03      	cmp	r2, #3
 800466c:	d071      	beq.n	8004752 <SendCertificateVerify+0x266>
 800466e:	2a09      	cmp	r2, #9
 8004670:	d074      	beq.n	800475c <SendCertificateVerify+0x270>
                args->extraSz = HASH_SIG_SIZE;
 8004672:	2302      	movs	r3, #2
 8004674:	616b      	str	r3, [r5, #20]
                SetDigest(ssl, ssl->options.hashAlgo);
 8004676:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
 800467a:	4620      	mov	r0, r4
 800467c:	f7fc f8a7 	bl	80007ce <SetDigest>
            if (args->sigAlgo == ed25519_sa_algo) {
 8004680:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8004684:	2b09      	cmp	r3, #9
 8004686:	d06d      	beq.n	8004764 <SendCertificateVerify+0x278>
            ssl->options.asyncState = TLS_ASYNC_DO;
 8004688:	2302      	movs	r3, #2
 800468a:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            if (ssl->hsType == DYNAMIC_TYPE_ECC) {
 800468e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004690:	2b25      	cmp	r3, #37	; 0x25
 8004692:	d175      	bne.n	8004780 <SendCertificateVerify+0x294>
        ret = wc_ecc_sign_hash(in, inSz, out, outSz, ssl->rng, key);
 8004694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	69a3      	ldr	r3, [r4, #24]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 80046a0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 80046a4:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 80046a8:	f009 f98d 	bl	800d9c6 <wc_ecc_sign_hash>
 80046ac:	4606      	mov	r6, r0
           if (ssl->hsType == DYNAMIC_TYPE_ED25519) {
 80046ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046b0:	2b46      	cmp	r3, #70	; 0x46
 80046b2:	d10b      	bne.n	80046cc <SendCertificateVerify+0x1e0>
        ret = wc_ed25519_sign_msg(in, inSz, out, outSz, key);
 80046b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                    ssl->hsHashes->messages, ssl->hsHashes->length,
 80046b6:	68e0      	ldr	r0, [r4, #12]
        ret = wc_ed25519_sign_msg(in, inSz, out, outSz, key);
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	e9d0 01a8 	ldrd	r0, r1, [r0, #672]	; 0x2a0
 80046be:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 80046c2:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 80046c6:	f011 fbbb 	bl	8015e40 <wc_ed25519_sign_msg>
 80046ca:	4606      	mov	r6, r0
            if (ret != 0) {
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	d14f      	bne.n	8004770 <SendCertificateVerify+0x284>
            ssl->options.asyncState = TLS_ASYNC_VERIFY;
 80046d0:	2303      	movs	r3, #3
 80046d2:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            args->verify = &args->output[args->idx];
 80046d6:	692a      	ldr	r2, [r5, #16]
 80046d8:	686b      	ldr	r3, [r5, #4]
 80046da:	4413      	add	r3, r2
            switch (ssl->hsType) {
 80046dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
            args->verify = &args->output[args->idx];
 80046de:	60ab      	str	r3, [r5, #8]
            switch (ssl->hsType) {
 80046e0:	2a25      	cmp	r2, #37	; 0x25
 80046e2:	d001      	beq.n	80046e8 <SendCertificateVerify+0x1fc>
 80046e4:	2a46      	cmp	r2, #70	; 0x46
 80046e6:	d110      	bne.n	800470a <SendCertificateVerify+0x21e>
                    args->length = (word16)ssl->buffers.sig.length;
 80046e8:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
                    c16toa(args->length, args->verify + args->extraSz);
 80046ec:	6968      	ldr	r0, [r5, #20]
                    args->length = (word16)ssl->buffers.sig.length;
 80046ee:	b28a      	uxth	r2, r1
 80046f0:	84aa      	strh	r2, [r5, #36]	; 0x24
                    c16toa(args->length, args->verify + args->extraSz);
 80046f2:	181e      	adds	r6, r3, r0
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80046f4:	0a12      	lsrs	r2, r2, #8
 80046f6:	541a      	strb	r2, [r3, r0]
    c[1] =  (byte)(wc_u16       & 0xff);
 80046f8:	7071      	strb	r1, [r6, #1]
                    XMEMCPY(args->verify + args->extraSz + VERIFY_HEADER,
 80046fa:	6968      	ldr	r0, [r5, #20]
 80046fc:	68ab      	ldr	r3, [r5, #8]
 80046fe:	3002      	adds	r0, #2
 8004700:	e9d4 1230 	ldrd	r1, r2, [r4, #192]	; 0xc0
 8004704:	4418      	add	r0, r3
 8004706:	f019 f94d 	bl	801d9a4 <memcpy>
            ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 800470a:	2304      	movs	r3, #4
 800470c:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            if (args->output == NULL) {
 8004710:	6868      	ldr	r0, [r5, #4]
 8004712:	2800      	cmp	r0, #0
 8004714:	d03c      	beq.n	8004790 <SendCertificateVerify+0x2a4>
            AddHeaders(args->output, (word32)args->length + args->extraSz +
 8004716:	6969      	ldr	r1, [r5, #20]
 8004718:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 800471a:	3102      	adds	r1, #2
 800471c:	4623      	mov	r3, r4
 800471e:	220f      	movs	r2, #15
 8004720:	4431      	add	r1, r6
 8004722:	f7fc f891 	bl	8000848 <AddHeaders>
            ssl->options.asyncState = TLS_ASYNC_END;
 8004726:	2305      	movs	r3, #5
 8004728:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
 800472c:	e711      	b.n	8004552 <SendCertificateVerify+0x66>
                SetDigest(ssl, ssl->options.hashAlgo);
 800472e:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
 8004732:	4620      	mov	r0, r4
 8004734:	f7fc f84b 	bl	80007ce <SetDigest>
 8004738:	e78a      	b.n	8004650 <SendCertificateVerify+0x164>
            else if (ssl->hsType == DYNAMIC_TYPE_ECC)
 800473a:	2b25      	cmp	r3, #37	; 0x25
 800473c:	d101      	bne.n	8004742 <SendCertificateVerify+0x256>
                    args->sigAlgo = ecc_dsa_sa_algo;
 800473e:	2303      	movs	r3, #3
 8004740:	e78a      	b.n	8004658 <SendCertificateVerify+0x16c>
            else if (ssl->hsType == DYNAMIC_TYPE_ED25519)
 8004742:	2b46      	cmp	r3, #70	; 0x46
 8004744:	d101      	bne.n	800474a <SendCertificateVerify+0x25e>
                args->sigAlgo = ed25519_sa_algo;
 8004746:	2309      	movs	r3, #9
 8004748:	e786      	b.n	8004658 <SendCertificateVerify+0x16c>
            else if (ssl->hsType == DYNAMIC_TYPE_ED448)
 800474a:	2b5c      	cmp	r3, #92	; 0x5c
 800474c:	d186      	bne.n	800465c <SendCertificateVerify+0x170>
                args->sigAlgo = ed448_sa_algo;
 800474e:	230b      	movs	r3, #11
 8004750:	e782      	b.n	8004658 <SendCertificateVerify+0x16c>
                EncodeSigAlg(ssl->options.hashAlgo, args->sigAlgo,
 8004752:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
            output[0] = hashAlgo;
 8004756:	7019      	strb	r1, [r3, #0]
            output[1] = ED25519_SA_MINOR;
 8004758:	705a      	strb	r2, [r3, #1]
            break;
 800475a:	e78a      	b.n	8004672 <SendCertificateVerify+0x186>
            output[0] = ED25519_SA_MAJOR;
 800475c:	2208      	movs	r2, #8
 800475e:	701a      	strb	r2, [r3, #0]
            output[1] = ED25519_SA_MINOR;
 8004760:	2207      	movs	r2, #7
 8004762:	e7f9      	b.n	8004758 <SendCertificateVerify+0x26c>
                ret = Ed25519CheckPubKey(ssl);
 8004764:	4620      	mov	r0, r4
 8004766:	f7fc fb49 	bl	8000dfc <Ed25519CheckPubKey>
                if (ret != 0)
 800476a:	4606      	mov	r6, r0
 800476c:	2800      	cmp	r0, #0
 800476e:	d08b      	beq.n	8004688 <SendCertificateVerify+0x19c>
    if (ret == WANT_WRITE
 8004770:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 8004774:	429e      	cmp	r6, r3
 8004776:	f47f aec4 	bne.w	8004502 <SendCertificateVerify+0x16>
}
 800477a:	4630      	mov	r0, r6
 800477c:	b002      	add	sp, #8
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	2600      	movs	r6, #0
 8004782:	e794      	b.n	80046ae <SendCertificateVerify+0x1c2>
            ret = BAD_STATE_E;
 8004784:	f06f 06bf 	mvn.w	r6, #191	; 0xbf
 8004788:	e6bb      	b.n	8004502 <SendCertificateVerify+0x16>
    switch(ssl->options.asyncState)
 800478a:	f46f 7696 	mvn.w	r6, #300	; 0x12c
 800478e:	e6b8      	b.n	8004502 <SendCertificateVerify+0x16>
                ERROR_OUT(BUFFER_ERROR, exit_scv);
 8004790:	4e02      	ldr	r6, [pc, #8]	; (800479c <SendCertificateVerify+0x2b0>)
 8004792:	e6b6      	b.n	8004502 <SendCertificateVerify+0x16>
                return 0;  /* sent blank cert, can't verify */
 8004794:	2600      	movs	r6, #0
 8004796:	e7f0      	b.n	800477a <SendCertificateVerify+0x28e>
 8004798:	08000623 	.word	0x08000623
 800479c:	fffffeb8 	.word	0xfffffeb8

080047a0 <SendServerHello>:
    {
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	b088      	sub	sp, #32
        length = VERSION_SZ + RAN_LEN
 80047a6:	2346      	movs	r3, #70	; 0x46
        ret = TLSX_GetResponseSize(ssl, server_hello, &length);
 80047a8:	aa07      	add	r2, sp, #28
 80047aa:	2102      	movs	r1, #2
    {
 80047ac:	4604      	mov	r4, r0
        length = VERSION_SZ + RAN_LEN
 80047ae:	f8ad 301c 	strh.w	r3, [sp, #28]
        ret = TLSX_GetResponseSize(ssl, server_hello, &length);
 80047b2:	f004 fb7a 	bl	8008eaa <TLSX_GetResponseSize>
        if (ret != 0)
 80047b6:	4605      	mov	r5, r0
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f040 80ee 	bne.w	800499a <SendServerHello+0x1fa>
            length -= ID_LEN;    /* adjust ID_LEN assumption */
 80047be:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80047c2:	3e20      	subs	r6, #32
 80047c4:	b2b6      	uxth	r6, r6
        if (IsEncryptionOn(ssl, 1))
 80047c6:	2101      	movs	r1, #1
 80047c8:	4620      	mov	r0, r4
            length -= ID_LEN;    /* adjust ID_LEN assumption */
 80047ca:	f8ad 601c 	strh.w	r6, [sp, #28]
        if (IsEncryptionOn(ssl, 1))
 80047ce:	f7fc f8ee 	bl	80009ae <IsEncryptionOn>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f040 80af 	bne.w	8004936 <SendServerHello+0x196>
        sendSz = length + HANDSHAKE_HEADER_SZ + RECORD_HEADER_SZ;
 80047d8:	3609      	adds	r6, #9
        ssl->options.buildingMsg = 1;
 80047da:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80047de:	f043 0308 	orr.w	r3, r3, #8
 80047e2:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
        if ((ret = CheckAvailableSize(ssl, sendSz)) != 0)
 80047e6:	4631      	mov	r1, r6
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7fd f9cb 	bl	8001b84 <CheckAvailableSize>
 80047ee:	4605      	mov	r5, r0
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f040 80d2 	bne.w	800499a <SendServerHello+0x1fa>
        output = GetOutputBuffer(ssl);
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7fd f8de 	bl	80019b8 <GetOutputBuffer>
        AddHeaders(output, length, server_hello, ssl);
 80047fc:	4623      	mov	r3, r4
 80047fe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8004802:	2202      	movs	r2, #2
 8004804:	f7fc f820 	bl	8000848 <AddHeaders>
        output[idx++] = (byte)ssl->version.major;
 8004808:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 800480c:	7243      	strb	r3, [r0, #9]
        output[idx++] = (byte)ssl->version.minor;
 800480e:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8004812:	7283      	strb	r3, [r0, #10]
        if (!ssl->options.resuming) {
 8004814:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
        output = GetOutputBuffer(ssl);
 8004818:	4680      	mov	r8, r0
            ret = wc_RNG_GenerateBlock(ssl->rng, output + idx,
 800481a:	f100 070b 	add.w	r7, r0, #11
        if (!ssl->options.resuming) {
 800481e:	0718      	lsls	r0, r3, #28
 8004820:	f100 808b 	bmi.w	800493a <SendServerHello+0x19a>
            ret = wc_RNG_GenerateBlock(ssl->rng, output + idx,
 8004824:	69a0      	ldr	r0, [r4, #24]
 8004826:	2221      	movs	r2, #33	; 0x21
 8004828:	4639      	mov	r1, r7
 800482a:	f00a f981 	bl	800eb30 <wc_RNG_GenerateBlock>
            if (ret != 0)
 800482e:	4605      	mov	r5, r0
 8004830:	2800      	cmp	r0, #0
 8004832:	f040 80b2 	bne.w	800499a <SendServerHello+0x1fa>
            if (ssl->ctx->method->version.major == SSLv3_MAJOR &&
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	2a03      	cmp	r2, #3
 800483e:	d114      	bne.n	800486a <SendServerHello+0xca>
 8004840:	785b      	ldrb	r3, [r3, #1]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d111      	bne.n	800486a <SendServerHello+0xca>
                (wolfSSL_get_options(ssl) & WOLFSSL_OP_NO_TLSv1_2) == 0 &&
 8004846:	4620      	mov	r0, r4
 8004848:	f003 fbeb 	bl	8008022 <wolfSSL_get_options>
                ssl->ctx->method->version.minor == TLSv1_2_MINOR &&
 800484c:	0101      	lsls	r1, r0, #4
 800484e:	d40c      	bmi.n	800486a <SendServerHello+0xca>
                !IsAtLeastTLSv1_2(ssl)) {
 8004850:	4620      	mov	r0, r4
 8004852:	f7fc f88f 	bl	8000974 <IsAtLeastTLSv1_2>
                (wolfSSL_get_options(ssl) & WOLFSSL_OP_NO_TLSv1_2) == 0 &&
 8004856:	4605      	mov	r5, r0
 8004858:	b938      	cbnz	r0, 800486a <SendServerHello+0xca>
                XMEMCPY(output + idx + RAN_LEN - (TLS13_DOWNGRADE_SZ + 1),
 800485a:	4952      	ldr	r1, [pc, #328]	; (80049a4 <SendServerHello+0x204>)
 800485c:	2207      	movs	r2, #7
 800485e:	f108 0023 	add.w	r0, r8, #35	; 0x23
 8004862:	f019 f89f 	bl	801d9a4 <memcpy>
                output[idx + RAN_LEN - 1] = 0;
 8004866:	f888 502a 	strb.w	r5, [r8, #42]	; 0x2a
            XMEMCPY(ssl->arrays->serverRandom, output + idx, RAN_LEN);
 800486a:	68a0      	ldr	r0, [r4, #8]
            output[idx++] = sessIdSz;
 800486c:	2500      	movs	r5, #0
            XMEMCPY(ssl->arrays->serverRandom, output + idx, RAN_LEN);
 800486e:	2220      	movs	r2, #32
 8004870:	4639      	mov	r1, r7
 8004872:	3034      	adds	r0, #52	; 0x34
 8004874:	f019 f896 	bl	801d9a4 <memcpy>
            output[idx++] = sessIdSz;
 8004878:	f888 502b 	strb.w	r5, [r8, #43]	; 0x2b
            XMEMCPY(ssl->arrays->sessionID, output + idx, sessIdSz);
 800487c:	68a0      	ldr	r0, [r4, #8]
 800487e:	462a      	mov	r2, r5
 8004880:	f108 012c 	add.w	r1, r8, #44	; 0x2c
 8004884:	3054      	adds	r0, #84	; 0x54
 8004886:	f019 f88d 	bl	801d9a4 <memcpy>
            ssl->arrays->sessionIDSz = sessIdSz;
 800488a:	68a3      	ldr	r3, [r4, #8]
 800488c:	f883 5074 	strb.w	r5, [r3, #116]	; 0x74
        output[idx++] = ssl->options.cipherSuite0;
 8004890:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8004894:	f888 302c 	strb.w	r3, [r8, #44]	; 0x2c
        output[idx++] = ssl->options.cipherSuite;
 8004898:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
 800489c:	f888 302d 	strb.w	r3, [r8, #45]	; 0x2d
        if (ssl->options.usingCompression)
 80048a0:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
            output[idx++] = ZLIB_COMPRESSION;
 80048a4:	f013 0301 	ands.w	r3, r3, #1
 80048a8:	bf18      	it	ne
 80048aa:	23dd      	movne	r3, #221	; 0xdd
 80048ac:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
            word16 offset = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8ad 301e 	strh.w	r3, [sp, #30]
            ret = TLSX_WriteResponse(ssl, output + idx, server_hello, &offset);
 80048b6:	2202      	movs	r2, #2
 80048b8:	f10d 031e 	add.w	r3, sp, #30
 80048bc:	f108 012f 	add.w	r1, r8, #47	; 0x2f
 80048c0:	4620      	mov	r0, r4
 80048c2:	f004 fb24 	bl	8008f0e <TLSX_WriteResponse>
            if (ret != 0)
 80048c6:	4605      	mov	r5, r0
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d166      	bne.n	800499a <SendServerHello+0x1fa>
        if (IsEncryptionOn(ssl, 1)) {
 80048cc:	2101      	movs	r1, #1
 80048ce:	4620      	mov	r0, r4
            idx += offset;
 80048d0:	f8bd 701e 	ldrh.w	r7, [sp, #30]
        if (IsEncryptionOn(ssl, 1)) {
 80048d4:	f7fc f86b 	bl	80009ae <IsEncryptionOn>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d03e      	beq.n	800495a <SendServerHello+0x1ba>
            if (ssl->options.dtls)
 80048dc:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
                recordHeaderSz += DTLS_RECORD_EXTRA;
 80048e0:	f013 0f04 	tst.w	r3, #4
 80048e4:	bf0c      	ite	eq
 80048e6:	f04f 0a05 	moveq.w	sl, #5
 80048ea:	f04f 0a0d 	movne.w	sl, #13
            idx += offset;
 80048ee:	372f      	adds	r7, #47	; 0x2f
            inputSz -= recordHeaderSz;
 80048f0:	eba7 070a 	sub.w	r7, r7, sl
            input = (byte*)XMALLOC(inputSz, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 80048f4:	4638      	mov	r0, r7
 80048f6:	f019 f835 	bl	801d964 <malloc>
            if (input == NULL)
 80048fa:	4681      	mov	r9, r0
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d04a      	beq.n	8004996 <SendServerHello+0x1f6>
            XMEMCPY(input, output + recordHeaderSz, inputSz);
 8004900:	463a      	mov	r2, r7
 8004902:	eb08 010a 	add.w	r1, r8, sl
 8004906:	f019 f84d 	bl	801d9a4 <memcpy>
            sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 800490a:	2316      	movs	r3, #22
 800490c:	2201      	movs	r2, #1
 800490e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004912:	4641      	mov	r1, r8
 8004914:	4632      	mov	r2, r6
 8004916:	464b      	mov	r3, r9
 8004918:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800491c:	9503      	str	r5, [sp, #12]
 800491e:	9700      	str	r7, [sp, #0]
 8004920:	4620      	mov	r0, r4
 8004922:	f7fd fbed 	bl	8002100 <BuildMessage>
 8004926:	4606      	mov	r6, r0
            XFREE(input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8004928:	4648      	mov	r0, r9
 800492a:	f019 f823 	bl	801d974 <free>
            if (sendSz < 0)
 800492e:	2e00      	cmp	r6, #0
 8004930:	da1a      	bge.n	8004968 <SendServerHello+0x1c8>
 8004932:	4635      	mov	r5, r6
 8004934:	e031      	b.n	800499a <SendServerHello+0x1fa>
            sendSz += MAX_MSG_EXTRA;
 8004936:	366f      	adds	r6, #111	; 0x6f
 8004938:	e74f      	b.n	80047da <SendServerHello+0x3a>
            XMEMCPY(output + idx, ssl->arrays->serverRandom, RAN_LEN);
 800493a:	68a1      	ldr	r1, [r4, #8]
 800493c:	2220      	movs	r2, #32
 800493e:	3134      	adds	r1, #52	; 0x34
 8004940:	4638      	mov	r0, r7
 8004942:	f019 f82f 	bl	801d9a4 <memcpy>
            output[idx++] = sessIdSz;
 8004946:	f888 502b 	strb.w	r5, [r8, #43]	; 0x2b
            XMEMCPY(output + idx, ssl->arrays->sessionID, sessIdSz);
 800494a:	68a1      	ldr	r1, [r4, #8]
 800494c:	462a      	mov	r2, r5
 800494e:	3154      	adds	r1, #84	; 0x54
 8004950:	f108 002c 	add.w	r0, r8, #44	; 0x2c
 8004954:	f019 f826 	bl	801d9a4 <memcpy>
 8004958:	e79a      	b.n	8004890 <SendServerHello+0xf0>
            ret = HashOutput(ssl, output, sendSz, 0);
 800495a:	462b      	mov	r3, r5
 800495c:	4632      	mov	r2, r6
 800495e:	4641      	mov	r1, r8
 8004960:	4620      	mov	r0, r4
 8004962:	f7fc fe87 	bl	8001674 <HashOutput>
            if (ret != 0)
 8004966:	b9a0      	cbnz	r0, 8004992 <SendServerHello+0x1f2>
        ssl->options.serverState = SERVER_HELLO_COMPLETE;
 8004968:	2303      	movs	r3, #3
 800496a:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
        ssl->options.buildingMsg = 0;
 800496e:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
        ssl->buffers.outputBuffer.length += sendSz;
 8004972:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
        ssl->options.buildingMsg = 0;
 8004976:	f36f 03c3 	bfc	r3, #3, #1
 800497a:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
        if (ssl->options.groupMessages)
 800497e:	f994 3274 	ldrsb.w	r3, [r4, #628]	; 0x274
        ssl->buffers.outputBuffer.length += sendSz;
 8004982:	4430      	add	r0, r6
        if (ssl->options.groupMessages)
 8004984:	2b00      	cmp	r3, #0
        ssl->buffers.outputBuffer.length += sendSz;
 8004986:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (ssl->options.groupMessages)
 800498a:	db06      	blt.n	800499a <SendServerHello+0x1fa>
            ret = SendBuffered(ssl);
 800498c:	4620      	mov	r0, r4
 800498e:	f7fc ffcf 	bl	8001930 <SendBuffered>
 8004992:	4605      	mov	r5, r0
 8004994:	e001      	b.n	800499a <SendServerHello+0x1fa>
                return MEMORY_E;
 8004996:	f06f 057c 	mvn.w	r5, #124	; 0x7c
    }
 800499a:	4628      	mov	r0, r5
 800499c:	b008      	add	sp, #32
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a2:	bf00      	nop
 80049a4:	0801fd6c 	.word	0x0801fd6c

080049a8 <SendServerKeyExchange>:
    {
 80049a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (ssl->async == NULL) {
 80049ac:	6b85      	ldr	r5, [r0, #56]	; 0x38
    {
 80049ae:	b085      	sub	sp, #20
 80049b0:	4604      	mov	r4, r0
        if (ssl->async == NULL) {
 80049b2:	b955      	cbnz	r5, 80049ca <SendServerKeyExchange+0x22>
                    XMALLOC(sizeof(struct WOLFSSL_ASYNC), ssl->heap,
 80049b4:	204c      	movs	r0, #76	; 0x4c
 80049b6:	f018 ffd5 	bl	801d964 <malloc>
            ssl->async = (struct WOLFSSL_ASYNC*)
 80049ba:	63a0      	str	r0, [r4, #56]	; 0x38
            if (ssl->async == NULL)
 80049bc:	2800      	cmp	r0, #0
 80049be:	f000 8205 	beq.w	8004dcc <SendServerKeyExchange+0x424>
            XMEMSET(ssl->async, 0, sizeof(struct WOLFSSL_ASYNC));
 80049c2:	224c      	movs	r2, #76	; 0x4c
 80049c4:	4629      	mov	r1, r5
 80049c6:	f019 f815 	bl	801d9f4 <memset>
        if (ssl->options.buildingMsg) {
 80049ca:	f894 7276 	ldrb.w	r7, [r4, #630]	; 0x276
        args = (SskeArgs*)ssl->async->args;
 80049ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
        if (ssl->options.buildingMsg) {
 80049d0:	f017 0708 	ands.w	r7, r7, #8
 80049d4:	d011      	beq.n	80049fa <SendServerKeyExchange+0x52>
            if (ssl->options.asyncState != TLS_ASYNC_END) {
 80049d6:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
 80049da:	2b05      	cmp	r3, #5
 80049dc:	f040 81ec 	bne.w	8004db8 <SendServerKeyExchange+0x410>
                ret = SendHandshakeMsg(ssl, args->output, args->length,
 80049e0:	69aa      	ldr	r2, [r5, #24]
 80049e2:	6869      	ldr	r1, [r5, #4]
 80049e4:	4620      	mov	r0, r4
 80049e6:	f7fd fe97 	bl	8002718 <SendHandshakeMsg.constprop.0>
                if (ret != 0)
 80049ea:	4606      	mov	r6, r0
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f040 8097 	bne.w	8004b20 <SendServerKeyExchange+0x178>
                ssl->options.serverState = SERVER_KEYEXCHANGE_COMPLETE;
 80049f2:	2307      	movs	r3, #7
 80049f4:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
        if (ret == WANT_WRITE
 80049f8:	e0c3      	b.n	8004b82 <SendServerKeyExchange+0x1da>
            XMEMSET(args, 0, sizeof(SskeArgs));
 80049fa:	222c      	movs	r2, #44	; 0x2c
            ssl->options.asyncState = TLS_ASYNC_BEGIN;
 80049fc:	f884 7283 	strb.w	r7, [r4, #643]	; 0x283
            XMEMSET(args, 0, sizeof(SskeArgs));
 8004a00:	4639      	mov	r1, r7
 8004a02:	1d28      	adds	r0, r5, #4
 8004a04:	f018 fff6 	bl	801d9f4 <memset>
            ssl->async->freeArgs = FreeSskeArgs;
 8004a08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a0a:	4a7a      	ldr	r2, [pc, #488]	; (8004bf4 <SendServerKeyExchange+0x24c>)
 8004a0c:	601a      	str	r2, [r3, #0]
        switch(ssl->options.asyncState)
 8004a0e:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	f200 81d3 	bhi.w	8004dbe <SendServerKeyExchange+0x416>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <SendServerKeyExchange+0x78>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a39 	.word	0x08004a39
 8004a24:	08004a8f 	.word	0x08004a8f
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004aad 	.word	0x08004aad
 8004a30:	08004aeb 	.word	0x08004aeb
 8004a34:	080049e1 	.word	0x080049e1
                switch(ssl->specs.kea)
 8004a38:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004a3c:	2b07      	cmp	r3, #7
 8004a3e:	f040 81c1 	bne.w	8004dc4 <SendServerKeyExchange+0x41c>
                        if (ssl->specs.static_ecdh) {
 8004a42:	f894 314f 	ldrb.w	r3, [r4, #335]	; 0x14f
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 81bc 	bne.w	8004dc4 <SendServerKeyExchange+0x41c>
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8004a4c:	e9d4 13a4 	ldrd	r1, r3, [r4, #656]	; 0x290
 8004a50:	f240 126d 	movw	r2, #365	; 0x16d
 8004a54:	4291      	cmp	r1, r2
 8004a56:	d16b      	bne.n	8004b30 <SendServerKeyExchange+0x188>
                            if (ssl->eccTempKey == NULL) {
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d058      	beq.n	8004b0e <SendServerKeyExchange+0x166>
                            if (ssl->eccTempKeyPresent == 0) {
 8004a5c:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
 8004a60:	b993      	cbnz	r3, 8004a88 <SendServerKeyExchange+0xe0>
        ret = wc_curve25519_make_key(ssl->rng, CURVE25519_KEYSIZE, key);
 8004a62:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 8004a66:	69a0      	ldr	r0, [r4, #24]
 8004a68:	2120      	movs	r1, #32
 8004a6a:	f010 ff47 	bl	80158fc <wc_curve25519_make_key>
    if (ret == 0) {
 8004a6e:	4606      	mov	r6, r0
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f040 81ae 	bne.w	8004dd2 <SendServerKeyExchange+0x42a>
        ssl->ecdhCurveOID = ECC_X25519_OID;
 8004a76:	f240 136d 	movw	r3, #365	; 0x16d
 8004a7a:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
                                    ssl->eccTempKeyPresent =
 8004a7e:	2345      	movs	r3, #69	; 0x45
                                ssl->eccTempKeyPresent = DYNAMIC_TYPE_ECC;
 8004a80:	f884 3298 	strb.w	r3, [r4, #664]	; 0x298
                if (ret != 0) {
 8004a84:	2e00      	cmp	r6, #0
 8004a86:	d14b      	bne.n	8004b20 <SendServerKeyExchange+0x178>
                ssl->options.asyncState = TLS_ASYNC_BUILD;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                switch(ssl->specs.kea)
 8004a8e:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004a92:	2b07      	cmp	r3, #7
 8004a94:	d067      	beq.n	8004b66 <SendServerKeyExchange+0x1be>
                ssl->options.asyncState = TLS_ASYNC_DO;
 8004a96:	2302      	movs	r3, #2
 8004a98:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                switch(ssl->specs.kea)
 8004a9c:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004aa0:	2b07      	cmp	r3, #7
 8004aa2:	f000 8162 	beq.w	8004d6a <SendServerKeyExchange+0x3c2>
                ssl->options.asyncState = TLS_ASYNC_VERIFY;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                switch(ssl->specs.kea)
 8004aac:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d117      	bne.n	8004ae4 <SendServerKeyExchange+0x13c>
                        switch(ssl->options.sigAlgo)
 8004ab4:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d002      	beq.n	8004ac2 <SendServerKeyExchange+0x11a>
 8004abc:	2b09      	cmp	r3, #9
 8004abe:	f040 8096 	bne.w	8004bee <SendServerKeyExchange+0x246>
                                c16toa((word16)args->sigSz,
 8004ac2:	69eb      	ldr	r3, [r5, #28]
 8004ac4:	692a      	ldr	r2, [r5, #16]
 8004ac6:	6869      	ldr	r1, [r5, #4]
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8004ac8:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8004acc:	1888      	adds	r0, r1, r2
 8004ace:	548e      	strb	r6, [r1, r2]
    c[1] =  (byte)(wc_u16       & 0xff);
 8004ad0:	7043      	strb	r3, [r0, #1]
                                args->length += args->sigSz - args->tmpSigSz;
 8004ad2:	696a      	ldr	r2, [r5, #20]
 8004ad4:	69eb      	ldr	r3, [r5, #28]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	69aa      	ldr	r2, [r5, #24]
 8004ada:	441a      	add	r2, r3
 8004adc:	61aa      	str	r2, [r5, #24]
                                args->sendSz += args->sigSz - args->tmpSigSz;
 8004ade:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004ae0:	4413      	add	r3, r2
 8004ae2:	62ab      	str	r3, [r5, #40]	; 0x28
                ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                if (ssl->specs.kea == ecdhe_psk_kea ||
 8004aea:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8004aee:	3b06      	subs	r3, #6
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d808      	bhi.n	8004b06 <SendServerKeyExchange+0x15e>
                    if (args->output) {
 8004af4:	6868      	ldr	r0, [r5, #4]
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f000 8166 	beq.w	8004dc8 <SendServerKeyExchange+0x420>
                        AddHeaders(args->output, args->length,
 8004afc:	69a9      	ldr	r1, [r5, #24]
 8004afe:	4623      	mov	r3, r4
 8004b00:	220c      	movs	r2, #12
 8004b02:	f7fb fea1 	bl	8000848 <AddHeaders>
                ssl->options.asyncState = TLS_ASYNC_END;
 8004b06:	2305      	movs	r3, #5
 8004b08:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
 8004b0c:	e768      	b.n	80049e0 <SendServerKeyExchange+0x38>
                                ret = AllocKey(ssl, DYNAMIC_TYPE_CURVE25519,
 8004b0e:	f504 7225 	add.w	r2, r4, #660	; 0x294
 8004b12:	2145      	movs	r1, #69	; 0x45
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7fc fca5 	bl	8001464 <AllocKey>
                                if (ret != 0) {
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d09d      	beq.n	8004a5c <SendServerKeyExchange+0xb4>
        if (ret == WANT_WRITE
 8004b20:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 8004b24:	429e      	cmp	r6, r3
 8004b26:	d12c      	bne.n	8004b82 <SendServerKeyExchange+0x1da>
    }
 8004b28:	4630      	mov	r0, r6
 8004b2a:	b005      	add	sp, #20
 8004b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        if (ssl->eccTempKey == NULL) {
 8004b30:	b17b      	cbz	r3, 8004b52 <SendServerKeyExchange+0x1aa>
                        if (ssl->eccTempKeyPresent == 0) {
 8004b32:	f894 2298 	ldrb.w	r2, [r4, #664]	; 0x298
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d1a6      	bne.n	8004a88 <SendServerKeyExchange+0xe0>
                            ret = EccMakeKey(ssl, ssl->eccTempKey, NULL);
 8004b3a:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7fc f93d 	bl	8000dbe <EccMakeKey>
                            if (ret == 0 || ret == WC_PENDING_E) {
 8004b44:	4606      	mov	r6, r0
 8004b46:	b110      	cbz	r0, 8004b4e <SendServerKeyExchange+0x1a6>
 8004b48:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8004b4c:	d1e8      	bne.n	8004b20 <SendServerKeyExchange+0x178>
                                ssl->eccTempKeyPresent = DYNAMIC_TYPE_ECC;
 8004b4e:	2325      	movs	r3, #37	; 0x25
 8004b50:	e796      	b.n	8004a80 <SendServerKeyExchange+0xd8>
                            ret = AllocKey(ssl, DYNAMIC_TYPE_ECC,
 8004b52:	f504 7225 	add.w	r2, r4, #660	; 0x294
 8004b56:	2125      	movs	r1, #37	; 0x25
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7fc fc83 	bl	8001464 <AllocKey>
                            if (ret != 0) {
 8004b5e:	4606      	mov	r6, r0
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d0e6      	beq.n	8004b32 <SendServerKeyExchange+0x18a>
 8004b64:	e7dc      	b.n	8004b20 <SendServerKeyExchange+0x178>
                        args->idx = RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ;
 8004b66:	2309      	movs	r3, #9
 8004b68:	612b      	str	r3, [r5, #16]
                        args->exportSz = MAX_EXPORT_ECC_SZ;
 8004b6a:	f44f 7080 	mov.w	r0, #256	; 0x100
                        args->length = ENUM_LEN + CURVE_LEN + ENUM_LEN;
 8004b6e:	2304      	movs	r3, #4
 8004b70:	61ab      	str	r3, [r5, #24]
                        args->exportSz = MAX_EXPORT_ECC_SZ;
 8004b72:	6268      	str	r0, [r5, #36]	; 0x24
                        args->exportBuf = (byte*)XMALLOC(MAX_EXPORT_ECC_SZ,
 8004b74:	f018 fef6 	bl	801d964 <malloc>
 8004b78:	4601      	mov	r1, r0
 8004b7a:	60a8      	str	r0, [r5, #8]
                        if (args->exportBuf == NULL) {
 8004b7c:	b978      	cbnz	r0, 8004b9e <SendServerKeyExchange+0x1f6>
                            ERROR_OUT(MEMORY_E, exit_sske);
 8004b7e:	f06f 067c 	mvn.w	r6, #124	; 0x7c
            args->input != NULL) {
 8004b82:	68e8      	ldr	r0, [r5, #12]
            args != NULL &&
 8004b84:	b118      	cbz	r0, 8004b8e <SendServerKeyExchange+0x1e6>
            XFREE(args->input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8004b86:	f018 fef5 	bl	801d974 <free>
            args->input = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60eb      	str	r3, [r5, #12]
        FreeAsyncCtx(ssl, 0);
 8004b8e:	4620      	mov	r0, r4
 8004b90:	2100      	movs	r1, #0
 8004b92:	f7fc fca9 	bl	80014e8 <FreeAsyncCtx>
        FreeKeyExchange(ssl);
 8004b96:	4620      	mov	r0, r4
 8004b98:	f7fc fcba 	bl	8001510 <FreeKeyExchange>
        return ret;
 8004b9c:	e7c4      	b.n	8004b28 <SendServerKeyExchange+0x180>
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8004b9e:	f8d4 6290 	ldr.w	r6, [r4, #656]	; 0x290
                                        (curve25519_key*)ssl->eccTempKey,
 8004ba2:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8004ba6:	f240 136d 	movw	r3, #365	; 0x16d
 8004baa:	429e      	cmp	r6, r3
                            if (wc_curve25519_export_public_ex(
 8004bac:	f105 0224 	add.w	r2, r5, #36	; 0x24
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8004bb0:	d111      	bne.n	8004bd6 <SendServerKeyExchange+0x22e>
                            if (wc_curve25519_export_public_ex(
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f010 ff06 	bl	80159c4 <wc_curve25519_export_public_ex>
 8004bb8:	b958      	cbnz	r0, 8004bd2 <SendServerKeyExchange+0x22a>
                        args->length += args->exportSz;
 8004bba:	69aa      	ldr	r2, [r5, #24]
 8004bbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bbe:	eb02 0803 	add.w	r8, r2, r3
                        if (ssl->buffers.key == NULL) {
 8004bc2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
                        args->length += args->exportSz;
 8004bc6:	f8c5 8018 	str.w	r8, [r5, #24]
                        if (ssl->buffers.key == NULL) {
 8004bca:	b93b      	cbnz	r3, 8004bdc <SendServerKeyExchange+0x234>
                                ERROR_OUT(NO_PRIVATE_KEY, exit_sske);
 8004bcc:	f46f 769e 	mvn.w	r6, #316	; 0x13c
 8004bd0:	e7d7      	b.n	8004b82 <SendServerKeyExchange+0x1da>
                                ERROR_OUT(ECC_EXPORT_ERROR, exit_sske);
 8004bd2:	4e09      	ldr	r6, [pc, #36]	; (8004bf8 <SendServerKeyExchange+0x250>)
 8004bd4:	e7d5      	b.n	8004b82 <SendServerKeyExchange+0x1da>
                            ret = wc_ecc_export_x963(ssl->eccTempKey,
 8004bd6:	f009 fb6b 	bl	800e2b0 <wc_ecc_export_x963>
 8004bda:	e7ed      	b.n	8004bb8 <SendServerKeyExchange+0x210>
                            switch(ssl->options.sigAlgo) {
 8004bdc:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
                        preSigIdx = args->idx;
 8004be0:	f8d5 9010 	ldr.w	r9, [r5, #16]
                            switch(ssl->options.sigAlgo) {
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d009      	beq.n	8004bfc <SendServerKeyExchange+0x254>
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	f000 8091 	beq.w	8004d10 <SendServerKeyExchange+0x368>
                            ERROR_OUT(ALGO_ID_E, exit_sske);
 8004bee:	f06f 0684 	mvn.w	r6, #132	; 0x84
 8004bf2:	e7c6      	b.n	8004b82 <SendServerKeyExchange+0x1da>
 8004bf4:	08000635 	.word	0x08000635
 8004bf8:	fffffe9e 	.word	0xfffffe9e
                                ssl->buffers.keyType = ecc_dsa_sa_algo;
 8004bfc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
 8004c00:	f363 0205 	bfi	r2, r3, #0, #6
 8004c04:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
                                ret = DecodePrivateKey(ssl, &keySz);
 8004c08:	f10d 010e 	add.w	r1, sp, #14
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f7fe fecf 	bl	80039b0 <DecodePrivateKey>
                                if (ret != 0) {
 8004c12:	4606      	mov	r6, r0
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d183      	bne.n	8004b20 <SendServerKeyExchange+0x178>
                                args->tmpSigSz = keySz;
 8004c18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
                                args->tmpSigSz = ED25519_SIG_SIZE;
 8004c1c:	616b      	str	r3, [r5, #20]
                        args->length += args->tmpSigSz;
 8004c1e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004c22:	441a      	add	r2, r3
 8004c24:	1c93      	adds	r3, r2, #2
 8004c26:	61ab      	str	r3, [r5, #24]
                        if (IsAtLeastTLSv1_2(ssl)) {
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7fb fea3 	bl	8000974 <IsAtLeastTLSv1_2>
 8004c2e:	b108      	cbz	r0, 8004c34 <SendServerKeyExchange+0x28c>
                            args->length += HASH_SIG_SIZE;
 8004c30:	3204      	adds	r2, #4
 8004c32:	61aa      	str	r2, [r5, #24]
                        args->sendSz = args->length + HANDSHAKE_HEADER_SZ + RECORD_HEADER_SZ;
 8004c34:	69aa      	ldr	r2, [r5, #24]
 8004c36:	f102 0309 	add.w	r3, r2, #9
 8004c3a:	62ab      	str	r3, [r5, #40]	; 0x28
                        if (IsEncryptionOn(ssl, 1)) {
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7fb feb5 	bl	80009ae <IsEncryptionOn>
 8004c44:	b108      	cbz	r0, 8004c4a <SendServerKeyExchange+0x2a2>
                            args->sendSz += MAX_MSG_EXTRA;
 8004c46:	326f      	adds	r2, #111	; 0x6f
 8004c48:	62aa      	str	r2, [r5, #40]	; 0x28
                        args->input = (byte*)XMALLOC(args->sendSz,
 8004c4a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004c4c:	f018 fe8a 	bl	801d964 <malloc>
 8004c50:	60e8      	str	r0, [r5, #12]
                        if (args->input == NULL)
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d093      	beq.n	8004b7e <SendServerKeyExchange+0x1d6>
                        args->output[args->idx++] = named_curve;
 8004c56:	692b      	ldr	r3, [r5, #16]
                        args->output = args->input;
 8004c58:	6068      	str	r0, [r5, #4]
                        args->output[args->idx++] = named_curve;
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	612a      	str	r2, [r5, #16]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	54c2      	strb	r2, [r0, r3]
                        args->output[args->idx++] = 0x00;          /* leading zero */
 8004c62:	692b      	ldr	r3, [r5, #16]
 8004c64:	686a      	ldr	r2, [r5, #4]
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	6129      	str	r1, [r5, #16]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	54d1      	strb	r1, [r2, r3]
                        if (ssl->ecdhCurveOID == ECC_X25519_OID)
 8004c6e:	f8d4 2290 	ldr.w	r2, [r4, #656]	; 0x290
 8004c72:	f240 136d 	movw	r3, #365	; 0x16d
 8004c76:	429a      	cmp	r2, r3
 8004c78:	692b      	ldr	r3, [r5, #16]
 8004c7a:	686a      	ldr	r2, [r5, #4]
 8004c7c:	d159      	bne.n	8004d32 <SendServerKeyExchange+0x38a>
                            args->output[args->idx++] = WOLFSSL_ECC_X25519;
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	6129      	str	r1, [r5, #16]
 8004c82:	211d      	movs	r1, #29
 8004c84:	54d1      	strb	r1, [r2, r3]
                        args->output[args->idx++] = (byte)args->exportSz;
 8004c86:	692b      	ldr	r3, [r5, #16]
 8004c88:	686a      	ldr	r2, [r5, #4]
 8004c8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004c8c:	1c58      	adds	r0, r3, #1
 8004c8e:	6128      	str	r0, [r5, #16]
 8004c90:	54d1      	strb	r1, [r2, r3]
                        XMEMCPY(args->output + args->idx, args->exportBuf, args->exportSz);
 8004c92:	692b      	ldr	r3, [r5, #16]
 8004c94:	6868      	ldr	r0, [r5, #4]
 8004c96:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004c98:	68a9      	ldr	r1, [r5, #8]
 8004c9a:	4418      	add	r0, r3
 8004c9c:	f018 fe82 	bl	801d9a4 <memcpy>
                        args->idx += args->exportSz;
 8004ca0:	692a      	ldr	r2, [r5, #16]
 8004ca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ca4:	441a      	add	r2, r3
 8004ca6:	612a      	str	r2, [r5, #16]
                        if (IsAtLeastTLSv1_2(ssl)) {
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7fb fe63 	bl	8000974 <IsAtLeastTLSv1_2>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d09d      	beq.n	8004bee <SendServerKeyExchange+0x246>
                            EncodeSigAlg(ssl->options.hashAlgo,
 8004cb2:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
 8004cb6:	686b      	ldr	r3, [r5, #4]
    switch (hsType) {
 8004cb8:	2903      	cmp	r1, #3
                            EncodeSigAlg(ssl->options.hashAlgo,
 8004cba:	eb03 0002 	add.w	r0, r3, r2
    switch (hsType) {
 8004cbe:	d048      	beq.n	8004d52 <SendServerKeyExchange+0x3aa>
 8004cc0:	2909      	cmp	r1, #9
 8004cc2:	d04b      	beq.n	8004d5c <SendServerKeyExchange+0x3b4>
                            args->idx += 2;
 8004cc4:	692b      	ldr	r3, [r5, #16]
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	612b      	str	r3, [r5, #16]
                            hashType = HashAlgoToType(ssl->options.hashAlgo);
 8004cca:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    switch (hashAlgo) {
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d049      	beq.n	8004d66 <SendServerKeyExchange+0x3be>
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d18b      	bne.n	8004bee <SendServerKeyExchange+0x246>
            return WC_HASH_TYPE_SHA512;
 8004cd6:	2108      	movs	r1, #8
                            args->output + preSigIdx, preSigSz,
 8004cd8:	686a      	ldr	r2, [r5, #4]
                        ret = HashSkeData(ssl, hashType,
 8004cda:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	444a      	add	r2, r9
 8004ce2:	4643      	mov	r3, r8
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f7fb fd01 	bl	80006ec <HashSkeData>
                        if (ret != 0) {
 8004cea:	4606      	mov	r6, r0
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f47f af17 	bne.w	8004b20 <SendServerKeyExchange+0x178>
                        args->sigSz = args->tmpSigSz;
 8004cf2:	696b      	ldr	r3, [r5, #20]
 8004cf4:	61eb      	str	r3, [r5, #28]
                        switch (ssl->options.sigAlgo)
 8004cf6:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
 8004cfa:	2b09      	cmp	r3, #9
 8004cfc:	f47f aecb 	bne.w	8004a96 <SendServerKeyExchange+0xee>
                                ret = Ed25519CheckPubKey(ssl);
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7fc f87b 	bl	8000dfc <Ed25519CheckPubKey>
                                if (ret != 0)
 8004d06:	4606      	mov	r6, r0
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f43f aec4 	beq.w	8004a96 <SendServerKeyExchange+0xee>
 8004d0e:	e707      	b.n	8004b20 <SendServerKeyExchange+0x178>
                                ssl->buffers.keyType = ed25519_sa_algo;
 8004d10:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
 8004d14:	f363 0205 	bfi	r2, r3, #0, #6
 8004d18:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
                                ret = DecodePrivateKey(ssl, &keySz);
 8004d1c:	f10d 010e 	add.w	r1, sp, #14
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7fe fe45 	bl	80039b0 <DecodePrivateKey>
                                if (ret != 0) {
 8004d26:	4606      	mov	r6, r0
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	f47f aef9 	bne.w	8004b20 <SendServerKeyExchange+0x178>
                                args->tmpSigSz = ED25519_SIG_SIZE;
 8004d2e:	2340      	movs	r3, #64	; 0x40
 8004d30:	e774      	b.n	8004c1c <SendServerKeyExchange+0x274>
                                                    SetCurveId(ssl->eccTempKey);
 8004d32:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
                            args->output[args->idx++] =
 8004d36:	1c58      	adds	r0, r3, #1
 8004d38:	6128      	str	r0, [r5, #16]
        if (key == NULL || key->dp == NULL) {
 8004d3a:	b141      	cbz	r1, 8004d4e <SendServerKeyExchange+0x3a6>
 8004d3c:	6909      	ldr	r1, [r1, #16]
 8004d3e:	b131      	cbz	r1, 8004d4e <SendServerKeyExchange+0x3a6>
        switch(oidSum) {
 8004d40:	6acf      	ldr	r7, [r1, #44]	; 0x2c
        return (byte)GetCurveByOID(key->dp->oidSum);
 8004d42:	f240 210e 	movw	r1, #526	; 0x20e
 8004d46:	428f      	cmp	r7, r1
 8004d48:	bf0c      	ite	eq
 8004d4a:	2717      	moveq	r7, #23
 8004d4c:	2700      	movne	r7, #0
                            args->output[args->idx++] =
 8004d4e:	54d7      	strb	r7, [r2, r3]
 8004d50:	e799      	b.n	8004c86 <SendServerKeyExchange+0x2de>
                            EncodeSigAlg(ssl->options.hashAlgo,
 8004d52:	f894 627a 	ldrb.w	r6, [r4, #634]	; 0x27a
            output[0] = hashAlgo;
 8004d56:	549e      	strb	r6, [r3, r2]
            output[1] = ecc_dsa_sa_algo;
 8004d58:	7041      	strb	r1, [r0, #1]
            break;
 8004d5a:	e7b3      	b.n	8004cc4 <SendServerKeyExchange+0x31c>
            output[0] = ED25519_SA_MAJOR;
 8004d5c:	2108      	movs	r1, #8
 8004d5e:	5499      	strb	r1, [r3, r2]
            output[1] = ED25519_SA_MINOR;
 8004d60:	2307      	movs	r3, #7
 8004d62:	7043      	strb	r3, [r0, #1]
            break;
 8004d64:	e7ae      	b.n	8004cc4 <SendServerKeyExchange+0x31c>
    switch (hashAlgo) {
 8004d66:	2106      	movs	r1, #6
 8004d68:	e7b6      	b.n	8004cd8 <SendServerKeyExchange+0x330>
                        switch (ssl->options.sigAlgo)
 8004d6a:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d00f      	beq.n	8004d92 <SendServerKeyExchange+0x3ea>
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	f47f af3b 	bne.w	8004bee <SendServerKeyExchange+0x246>
                                    args->output + LENGTH_SZ + args->idx,
 8004d78:	692a      	ldr	r2, [r5, #16]
                                ret = Ed25519Sign(ssl,
 8004d7a:	6869      	ldr	r1, [r5, #4]
        ret = wc_ed25519_sign_msg(in, inSz, out, outSz, key);
 8004d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d7e:	9300      	str	r3, [sp, #0]
                                    args->output + LENGTH_SZ + args->idx,
 8004d80:	3202      	adds	r2, #2
        ret = wc_ed25519_sign_msg(in, inSz, out, outSz, key);
 8004d82:	440a      	add	r2, r1
 8004d84:	f105 031c 	add.w	r3, r5, #28
 8004d88:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
 8004d8c:	f011 f858 	bl	8015e40 <wc_ed25519_sign_msg>
 8004d90:	e00d      	b.n	8004dae <SendServerKeyExchange+0x406>
                                    args->output + LENGTH_SZ + args->idx,
 8004d92:	692a      	ldr	r2, [r5, #16]
                                ret = EccSign(ssl,
 8004d94:	6869      	ldr	r1, [r5, #4]
        ret = wc_ecc_sign_hash(in, inSz, out, outSz, ssl->rng, key);
 8004d96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d98:	9301      	str	r3, [sp, #4]
                                    args->output + LENGTH_SZ + args->idx,
 8004d9a:	3202      	adds	r2, #2
        ret = wc_ecc_sign_hash(in, inSz, out, outSz, ssl->rng, key);
 8004d9c:	69a3      	ldr	r3, [r4, #24]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	440a      	add	r2, r1
 8004da2:	f105 031c 	add.w	r3, r5, #28
 8004da6:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 8004daa:	f008 fe0c 	bl	800d9c6 <wc_ecc_sign_hash>
        ret = wc_ed25519_sign_msg(in, inSz, out, outSz, key);
 8004dae:	4606      	mov	r6, r0
                if (ret != 0) {
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f47f aeb5 	bne.w	8004b20 <SendServerKeyExchange+0x178>
 8004db6:	e676      	b.n	8004aa6 <SendServerKeyExchange+0xfe>
                ret = BAD_STATE_E;
 8004db8:	f06f 06bf 	mvn.w	r6, #191	; 0xbf
 8004dbc:	e6e1      	b.n	8004b82 <SendServerKeyExchange+0x1da>
        switch(ssl->options.asyncState)
 8004dbe:	f46f 7696 	mvn.w	r6, #300	; 0x12c
 8004dc2:	e6de      	b.n	8004b82 <SendServerKeyExchange+0x1da>
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	e6dc      	b.n	8004b82 <SendServerKeyExchange+0x1da>
                        ERROR_OUT(BUFFER_ERROR, exit_sske);
 8004dc8:	4e04      	ldr	r6, [pc, #16]	; (8004ddc <SendServerKeyExchange+0x434>)
 8004dca:	e6da      	b.n	8004b82 <SendServerKeyExchange+0x1da>
                ERROR_OUT(MEMORY_E, exit_sske);
 8004dcc:	f06f 067c 	mvn.w	r6, #124	; 0x7c
 8004dd0:	e6dd      	b.n	8004b8e <SendServerKeyExchange+0x1e6>
                                if (ret == 0 || ret == WC_PENDING_E) {
 8004dd2:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8004dd6:	f47f aea3 	bne.w	8004b20 <SendServerKeyExchange+0x178>
 8004dda:	e650      	b.n	8004a7e <SendServerKeyExchange+0xd6>
 8004ddc:	fffffeb8 	.word	0xfffffeb8

08004de0 <MatchSuite_ex>:

    int MatchSuite_ex(const WOLFSSL* ssl, Suites* peerSuites, CipherSuite* cs,
                      TLSX* extensions)
    {
 8004de0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        int ret;
        word16 i, j;
        const Suites* suites = WOLFSSL_SUITES(ssl);
 8004de4:	6846      	ldr	r6, [r0, #4]
    {
 8004de6:	4607      	mov	r7, r0
 8004de8:	460d      	mov	r5, r1
 8004dea:	4690      	mov	r8, r2
        const Suites* suites = WOLFSSL_SUITES(ssl);
 8004dec:	b90e      	cbnz	r6, 8004df2 <MatchSuite_ex+0x12>
 8004dee:	6803      	ldr	r3, [r0, #0]
 8004df0:	6ade      	ldr	r6, [r3, #44]	; 0x2c

        WOLFSSL_ENTER("MatchSuite");

        /* & 0x1 equivalent % 2 */
        if (peerSuites->suiteSz == 0 || peerSuites->suiteSz & 0x1)
 8004df2:	882c      	ldrh	r4, [r5, #0]
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d046      	beq.n	8004e86 <MatchSuite_ex+0xa6>
 8004df8:	f014 0401 	ands.w	r4, r4, #1
 8004dfc:	d143      	bne.n	8004e86 <MatchSuite_ex+0xa6>
            return BUFFER_ERROR;

        if (suites == NULL)
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	d043      	beq.n	8004e8a <MatchSuite_ex+0xaa>
            return SUITES_ERROR;

        if (!ssl->options.useClientOrder) {
 8004e02:	f997 3275 	ldrsb.w	r3, [r7, #629]	; 0x275
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da2b      	bge.n	8004e62 <MatchSuite_ex+0x82>
            }
        }
        else {
            /* Client order */
            for (j = 0; j < peerSuites->suiteSz; j += 2) {
                for (i = 0; i < suites->suiteSz; i += 2) {
 8004e0a:	46a2      	mov	sl, r4
                    ret = CompareSuites(ssl, suites, peerSuites, i, j, cs, extensions);
                    if (ret != MATCH_SUITE_ERROR)
 8004e0c:	f46f 79fa 	mvn.w	r9, #500	; 0x1f4
                for (i = 0; i < suites->suiteSz; i += 2) {
 8004e10:	8833      	ldrh	r3, [r6, #0]
 8004e12:	4553      	cmp	r3, sl
 8004e14:	d828      	bhi.n	8004e68 <MatchSuite_ex+0x88>
            for (j = 0; j < peerSuites->suiteSz; j += 2) {
 8004e16:	882b      	ldrh	r3, [r5, #0]
 8004e18:	3402      	adds	r4, #2
 8004e1a:	b2a4      	uxth	r4, r4
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d918      	bls.n	8004e52 <MatchSuite_ex+0x72>
                for (i = 0; i < suites->suiteSz; i += 2) {
 8004e20:	f04f 0a00 	mov.w	sl, #0
 8004e24:	e7f4      	b.n	8004e10 <MatchSuite_ex+0x30>
                    ret = CompareSuites(ssl, suites, peerSuites, i, j, cs, extensions);
 8004e26:	e9cd 9800 	strd	r9, r8, [sp]
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7fb fd17 	bl	8000864 <CompareSuites.isra.0>
                    if (ret != MATCH_SUITE_ERROR)
 8004e36:	4550      	cmp	r0, sl
 8004e38:	d10d      	bne.n	8004e56 <MatchSuite_ex+0x76>
                for (j = 0; j < peerSuites->suiteSz; j += 2) {
 8004e3a:	f109 0902 	add.w	r9, r9, #2
 8004e3e:	fa1f f989 	uxth.w	r9, r9
 8004e42:	882b      	ldrh	r3, [r5, #0]
 8004e44:	454b      	cmp	r3, r9
 8004e46:	d8ee      	bhi.n	8004e26 <MatchSuite_ex+0x46>
            for (i = 0; i < suites->suiteSz; i += 2) {
 8004e48:	3402      	adds	r4, #2
 8004e4a:	b2a4      	uxth	r4, r4
 8004e4c:	8833      	ldrh	r3, [r6, #0]
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	d804      	bhi.n	8004e5c <MatchSuite_ex+0x7c>
                }
            }
        }

        WOLFSSL_ERROR_VERBOSE(MATCH_SUITE_ERROR);
        return MATCH_SUITE_ERROR;
 8004e52:	f46f 70fa 	mvn.w	r0, #500	; 0x1f4

    }
 8004e56:	b002      	add	sp, #8
 8004e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                for (j = 0; j < peerSuites->suiteSz; j += 2) {
 8004e5c:	f04f 0900 	mov.w	r9, #0
 8004e60:	e7ef      	b.n	8004e42 <MatchSuite_ex+0x62>
                    if (ret != MATCH_SUITE_ERROR)
 8004e62:	f46f 7afa 	mvn.w	sl, #500	; 0x1f4
 8004e66:	e7f1      	b.n	8004e4c <MatchSuite_ex+0x6c>
                    ret = CompareSuites(ssl, suites, peerSuites, i, j, cs, extensions);
 8004e68:	e9cd 4800 	strd	r4, r8, [sp]
 8004e6c:	4653      	mov	r3, sl
 8004e6e:	462a      	mov	r2, r5
 8004e70:	4631      	mov	r1, r6
 8004e72:	4638      	mov	r0, r7
 8004e74:	f7fb fcf6 	bl	8000864 <CompareSuites.isra.0>
                    if (ret != MATCH_SUITE_ERROR)
 8004e78:	4548      	cmp	r0, r9
 8004e7a:	d1ec      	bne.n	8004e56 <MatchSuite_ex+0x76>
                for (i = 0; i < suites->suiteSz; i += 2) {
 8004e7c:	f10a 0a02 	add.w	sl, sl, #2
 8004e80:	fa1f fa8a 	uxth.w	sl, sl
 8004e84:	e7c4      	b.n	8004e10 <MatchSuite_ex+0x30>
            return BUFFER_ERROR;
 8004e86:	4802      	ldr	r0, [pc, #8]	; (8004e90 <MatchSuite_ex+0xb0>)
 8004e88:	e7e5      	b.n	8004e56 <MatchSuite_ex+0x76>
            return SUITES_ERROR;
 8004e8a:	f46f 70b9 	mvn.w	r0, #370	; 0x172
 8004e8e:	e7e2      	b.n	8004e56 <MatchSuite_ex+0x76>
 8004e90:	fffffeb8 	.word	0xfffffeb8

08004e94 <MatchSuite>:

    int MatchSuite(WOLFSSL* ssl, Suites* peerSuites)
    {
 8004e94:	b530      	push	{r4, r5, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	b085      	sub	sp, #20
 8004e9a:	460d      	mov	r5, r1
        int ret;
        CipherSuite cs;

        XMEMSET(&cs, 0, sizeof(cs));
 8004e9c:	220c      	movs	r2, #12
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	a801      	add	r0, sp, #4
 8004ea2:	f018 fda7 	bl	801d9f4 <memset>

        ret = MatchSuite_ex(ssl, peerSuites, &cs,
 8004ea6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004eaa:	aa01      	add	r2, sp, #4
 8004eac:	4629      	mov	r1, r5
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7ff ff96 	bl	8004de0 <MatchSuite_ex>
                ssl->extensions
#else
                NULL
#endif
                );
        if (ret != 0)
 8004eb4:	b980      	cbnz	r0, 8004ed8 <MatchSuite+0x44>
            return ret;

        ssl->options.cipherSuite0 = cs.cipherSuite0;
 8004eb6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004eba:	f8a4 3278 	strh.w	r3, [r4, #632]	; 0x278
        ssl->options.cipherSuite  = cs.cipherSuite;
#if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_CURVE25519) || \
    defined(HAVE_ED448) || defined(HAVE_CURVE448)
        ssl->ecdhCurveOID = cs.ecdhCurveOID;
 8004ebe:	9b02      	ldr	r3, [sp, #8]
 8004ec0:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
#endif

        ret = SetCipherSpecs(ssl);
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f001 fefb 	bl	8006cc0 <SetCipherSpecs>
        if (ret != 0)
 8004eca:	b928      	cbnz	r0, 8004ed8 <MatchSuite+0x44>
            return ret;
        ret = PickHashSigAlgo(ssl, peerSuites->hashSigAlgo,
 8004ecc:	886a      	ldrh	r2, [r5, #2]
 8004ece:	f505 7198 	add.w	r1, r5, #304	; 0x130
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7fe fcf0 	bl	80038b8 <PickHashSigAlgo>
            if (ret != 0)
                return ret;
        }
#endif
        return ret;
    }
 8004ed8:	b005      	add	sp, #20
 8004eda:	bd30      	pop	{r4, r5, pc}

08004edc <HandleTlsResumption>:
     *  judged expired, falls back to full-handshake. If you want disable this
     *  session ticket validation check in TLS1.2 and below, define
     *  WOLFSSL_NO_TICKET_EXPIRE.
     */
    int HandleTlsResumption(WOLFSSL* ssl, Suites* clSuites)
    {
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	460e      	mov	r6, r1
            session = ssl->session;
        }
        else
    #endif
        {
            session = wolfSSL_GetSession(ssl, ssl->arrays->masterSecret, 1);
 8004ee0:	6881      	ldr	r1, [r0, #8]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	3175      	adds	r1, #117	; 0x75
    {
 8004ee6:	4604      	mov	r4, r0
            session = wolfSSL_GetSession(ssl, ssl->arrays->masterSecret, 1);
 8004ee8:	f002 ffac 	bl	8007e44 <wolfSSL_GetSession>
        }
        if (!session) {
 8004eec:	4605      	mov	r5, r0
 8004eee:	b938      	cbnz	r0, 8004f00 <HandleTlsResumption+0x24>
            WOLFSSL_MSG("Session lookup for resume failed");
            ssl->options.resuming = 0;
 8004ef0:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8004ef4:	f36f 03c3 	bfc	r3, #3, #1
 8004ef8:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
            return ret;
 8004efc:	2000      	movs	r0, #0
            }
        }


        return ret;
    }
 8004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (LowResTimer() > session->bornOn + ssl->timeout) {
 8004f00:	f7fb f92a 	bl	8000158 <LowResTimer>
 8004f04:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004f06:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004f0a:	4413      	add	r3, r2
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	d8ef      	bhi.n	8004ef0 <HandleTlsResumption+0x14>
        else if (session->haveEMS != ssl->options.haveEMS) {
 8004f10:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 8004f14:	f8b5 208e 	ldrh.w	r2, [r5, #142]	; 0x8e
 8004f18:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8004f1c:	4291      	cmp	r1, r2
 8004f1e:	d107      	bne.n	8004f30 <HandleTlsResumption+0x54>
            for (j = 0; j < clSuites->suiteSz; j += 2) {
 8004f20:	8831      	ldrh	r1, [r6, #0]
 8004f22:	4633      	mov	r3, r6
 8004f24:	2200      	movs	r2, #0
 8004f26:	4291      	cmp	r1, r2
 8004f28:	dc0d      	bgt.n	8004f46 <HandleTlsResumption+0x6a>
            if (j == clSuites->suiteSz) {
 8004f2a:	d119      	bne.n	8004f60 <HandleTlsResumption+0x84>
                ret = UNSUPPORTED_SUITE;
 8004f2c:	4828      	ldr	r0, [pc, #160]	; (8004fd0 <HandleTlsResumption+0xf4>)
 8004f2e:	e7e6      	b.n	8004efe <HandleTlsResumption+0x22>
            if (!session->haveEMS && ssl->options.haveEMS) {
 8004f30:	f003 0008 	and.w	r0, r3, #8
 8004f34:	b912      	cbnz	r2, 8004f3c <HandleTlsResumption+0x60>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d1da      	bne.n	8004ef0 <HandleTlsResumption+0x14>
 8004f3a:	e7e0      	b.n	8004efe <HandleTlsResumption+0x22>
                ret = EXT_MASTER_SECRET_NEEDED_E;
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	4825      	ldr	r0, [pc, #148]	; (8004fd4 <HandleTlsResumption+0xf8>)
 8004f40:	bf18      	it	ne
 8004f42:	2000      	movne	r0, #0
 8004f44:	e7db      	b.n	8004efe <HandleTlsResumption+0x22>
                if (clSuites->suites[j] == session->cipherSuite0 &&
 8004f46:	791f      	ldrb	r7, [r3, #4]
 8004f48:	f895 0090 	ldrb.w	r0, [r5, #144]	; 0x90
 8004f4c:	4287      	cmp	r7, r0
 8004f4e:	d104      	bne.n	8004f5a <HandleTlsResumption+0x7e>
 8004f50:	795f      	ldrb	r7, [r3, #5]
 8004f52:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
 8004f56:	4287      	cmp	r7, r0
 8004f58:	d002      	beq.n	8004f60 <HandleTlsResumption+0x84>
            for (j = 0; j < clSuites->suiteSz; j += 2) {
 8004f5a:	3202      	adds	r2, #2
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	e7e2      	b.n	8004f26 <HandleTlsResumption+0x4a>
            if (ret == 0 && ssl->options.resuming) {
 8004f60:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8004f64:	071b      	lsls	r3, r3, #28
 8004f66:	d52c      	bpl.n	8004fc2 <HandleTlsResumption+0xe6>
                ssl->options.cipherSuite0 = session->cipherSuite0;
 8004f68:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8004f6c:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
                ssl->options.cipherSuite =  session->cipherSuite;
 8004f70:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 8004f74:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
                ret = SetCipherSpecs(ssl);
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f001 fea1 	bl	8006cc0 <SetCipherSpecs>
                if (ret == 0) {
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d1bd      	bne.n	8004efe <HandleTlsResumption+0x22>
                    ret = PickHashSigAlgo(ssl, clSuites->hashSigAlgo,
 8004f82:	8872      	ldrh	r2, [r6, #2]
 8004f84:	f506 7198 	add.w	r1, r6, #304	; 0x130
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f7fe fc95 	bl	80038b8 <PickHashSigAlgo>
            if (ret == 0) {
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d1b5      	bne.n	8004efe <HandleTlsResumption+0x22>
                                           ssl->arrays->serverRandom, RAN_LEN);
 8004f92:	68a1      	ldr	r1, [r4, #8]
                ret = wc_RNG_GenerateBlock(ssl->rng,
 8004f94:	69a0      	ldr	r0, [r4, #24]
 8004f96:	2220      	movs	r2, #32
 8004f98:	3134      	adds	r1, #52	; 0x34
 8004f9a:	f009 fdc9 	bl	800eb30 <wc_RNG_GenerateBlock>
            if (ret == 0) {
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d1ad      	bne.n	8004efe <HandleTlsResumption+0x22>
                    ret = DeriveTlsKeys(ssl);
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f003 fa24 	bl	80083f0 <DeriveTlsKeys>
                ssl->options.peerAuthGood = (ret == 0);
 8004fa8:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
 8004fac:	fab0 f380 	clz	r3, r0
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	f363 0241 	bfi	r2, r3, #1, #1
                ssl->options.clientState = CLIENT_KEYEXCHANGE_COMPLETE;
 8004fb6:	230d      	movs	r3, #13
                ssl->options.peerAuthGood = (ret == 0);
 8004fb8:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
                ssl->options.clientState = CLIENT_KEYEXCHANGE_COMPLETE;
 8004fbc:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
 8004fc0:	e79d      	b.n	8004efe <HandleTlsResumption+0x22>
                if (MatchSuite(ssl, clSuites) < 0) {
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff ff65 	bl	8004e94 <MatchSuite>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	dae1      	bge.n	8004f92 <HandleTlsResumption+0xb6>
 8004fce:	e7ad      	b.n	8004f2c <HandleTlsResumption+0x50>
 8004fd0:	fffffe0c 	.word	0xfffffe0c
 8004fd4:	fffffe62 	.word	0xfffffe62

08004fd8 <DoClientHello>:


    /* handle processing of client_hello (1) */
    int DoClientHello(WOLFSSL* ssl, const byte* input, word32* inOutIdx,
                             word32 helloSz)
    {
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4698      	mov	r8, r3
        }
        ssl->options.dtlsStateful = 1;
#endif /* WOLFSSL_DTLS */

        /* Reset to sane value for SCR */
        ssl->options.resuming = 0;
 8004fde:	f890 3271 	ldrb.w	r3, [r0, #625]	; 0x271
        word32          i = *inOutIdx;
 8004fe2:	6815      	ldr	r5, [r2, #0]
        ssl->options.resuming = 0;
 8004fe4:	f36f 03c3 	bfc	r3, #3, #1
 8004fe8:	f880 3271 	strb.w	r3, [r0, #625]	; 0x271
        ssl->arrays->sessionIDSz = 0;
 8004fec:	6883      	ldr	r3, [r0, #8]
    {
 8004fee:	4692      	mov	sl, r2

        /* protocol version, random and session id length check */
        if (OPAQUE16_LEN + RAN_LEN + OPAQUE8_LEN > helloSz)
 8004ff0:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
        ssl->arrays->sessionIDSz = 0;
 8004ff4:	f04f 0200 	mov.w	r2, #0
    {
 8004ff8:	b091      	sub	sp, #68	; 0x44
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	460f      	mov	r7, r1
        ssl->arrays->sessionIDSz = 0;
 8004ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        if (OPAQUE16_LEN + RAN_LEN + OPAQUE8_LEN > helloSz)
 8005002:	f240 81d6 	bls.w	80053b2 <DoClientHello+0x3da>
            return BUFFER_ERROR;

        /* protocol version */
        XMEMCPY(&pv, input + i, OPAQUE16_LEN);
 8005006:	194e      	adds	r6, r1, r5
 8005008:	2202      	movs	r2, #2
 800500a:	4631      	mov	r1, r6
 800500c:	a80f      	add	r0, sp, #60	; 0x3c
 800500e:	f018 fcc9 	bl	801d9a4 <memcpy>
        ssl->chVersion = pv;   /* store */
 8005012:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005016:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
        i += OPAQUE16_LEN;

        /* Legacy protocol version cannot negotiate TLS 1.3 or higher. */
        if (pv.major == SSLv3_MAJOR && pv.minor >= TLSv1_3_MINOR)
 800501a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800501e:	2b03      	cmp	r3, #3
 8005020:	d105      	bne.n	800502e <DoClientHello+0x56>
 8005022:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8005026:	2a03      	cmp	r2, #3
            pv.minor = TLSv1_2_MINOR;
 8005028:	bf88      	it	hi
 800502a:	f88d 303d 	strbhi.w	r3, [sp, #61]	; 0x3d

        lesserVersion = !ssl->options.dtls && ssl->version.minor > pv.minor;
 800502e:	f894 1272 	ldrb.w	r1, [r4, #626]	; 0x272
 8005032:	f894 213d 	ldrb.w	r2, [r4, #317]	; 0x13d
 8005036:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 800503a:	f011 0104 	ands.w	r1, r1, #4
 800503e:	f040 80f0 	bne.w	8005222 <DoClientHello+0x24a>
        lesserVersion |= ssl->options.dtls && ssl->version.minor < pv.minor;

        if (lesserVersion) {
 8005042:	4293      	cmp	r3, r2
 8005044:	f0c0 80f0 	bcc.w	8005228 <DoClientHello+0x250>
                       TRUE, ssl->options.side);
        }

        /* check if option is set to not allow the current version
         * set from either wolfSSL_set_options or wolfSSL_CTX_set_options */
        if (!ssl->options.dtls && ssl->options.downgrade &&
 8005048:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
 800504c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005050:	f423 037b 	bic.w	r3, r3, #16449536	; 0xfb0000
 8005054:	f423 437b 	bic.w	r3, r3, #64256	; 0xfb00
 8005058:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005060:	d16a      	bne.n	8005138 <DoClientHello+0x160>
            ssl->options.mask > 0) {
 8005062:	f8d4 226c 	ldr.w	r2, [r4, #620]	; 0x26c
        if (!ssl->options.dtls && ssl->options.downgrade &&
 8005066:	2a00      	cmp	r2, #0
 8005068:	d066      	beq.n	8005138 <DoClientHello+0x160>

            int reset = 0;

            if (ssl->version.minor == TLSv1_2_MINOR &&
 800506a:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 800506e:	2b03      	cmp	r3, #3
 8005070:	f040 8131 	bne.w	80052d6 <DoClientHello+0x2fe>
 8005074:	f012 6300 	ands.w	r3, r2, #134217728	; 0x8000000
 8005078:	d003      	beq.n	8005082 <DoClientHello+0xaa>
               (ssl->options.mask & WOLFSSL_OP_NO_TLSv1_2) ==
                WOLFSSL_OP_NO_TLSv1_2) {
                WOLFSSL_MSG("\tOption set to not allow TLSv1.2, Downgrading");
                ssl->version.minor = TLSv1_1_MINOR;
 800507a:	2302      	movs	r3, #2
 800507c:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
                reset = 1;
 8005080:	2301      	movs	r3, #1
            }

            if (ssl->version.minor == TLSv1_1_MINOR &&
 8005082:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 8005086:	2902      	cmp	r1, #2
 8005088:	d10a      	bne.n	80050a0 <DoClientHello+0xc8>
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	d508      	bpl.n	80050a0 <DoClientHello+0xc8>
               (ssl->options.mask & WOLFSSL_OP_NO_TLSv1_1) ==
                WOLFSSL_OP_NO_TLSv1_1) {
                WOLFSSL_MSG("\tOption set to not allow TLSv1.1, Downgrading");
                ssl->options.tls1_1 = 0;
 800508e:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8005092:	f36f 13c7 	bfc	r3, #7, #1
 8005096:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
                ssl->version.minor = TLSv1_MINOR;
 800509a:	2301      	movs	r3, #1
 800509c:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
                reset = 1;
            }

            if (ssl->version.minor == TLSv1_MINOR &&
 80050a0:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 80050a4:	2901      	cmp	r1, #1
 80050a6:	d10b      	bne.n	80050c0 <DoClientHello+0xe8>
 80050a8:	0490      	lsls	r0, r2, #18
 80050aa:	d509      	bpl.n	80050c0 <DoClientHello+0xe8>
               (ssl->options.mask & WOLFSSL_OP_NO_TLSv1) ==
                WOLFSSL_OP_NO_TLSv1) {
                WOLFSSL_MSG("\tOption set to not allow TLSv1, Downgrading");
                ssl->options.tls    = 0;
 80050ac:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
                ssl->options.tls1_1 = 0;
                ssl->version.minor = SSLv3_MINOR;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
                reset = 1;
 80050be:	460b      	mov	r3, r1
            }

            if (ssl->version.minor == SSLv3_MINOR &&
 80050c0:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 80050c4:	b911      	cbnz	r1, 80050cc <DoClientHello+0xf4>
 80050c6:	04d0      	lsls	r0, r2, #19
 80050c8:	f100 80b2 	bmi.w	8005230 <DoClientHello+0x258>
                SendAlert(ssl, alert_fatal, wolfssl_alert_protocol_version);
#endif
                goto out;
            }

            if (ssl->version.minor < ssl->options.minDowngrade) {
 80050cc:	f894 2280 	ldrb.w	r2, [r4, #640]	; 0x280
 80050d0:	428a      	cmp	r2, r1
 80050d2:	f200 80ad 	bhi.w	8005230 <DoClientHello+0x258>
                WOLFSSL_MSG("\tversion below minimum allowed, fatal error");
                ret = VERSION_ERROR;
                goto out;
            }

            if (reset) {
 80050d6:	b37b      	cbz	r3, 8005138 <DoClientHello+0x160>
            #endif
            #ifndef NO_CERTS
                keySz = ssl->buffers.keySz;
            #endif

                ret = AllocateSuites(ssl);
 80050d8:	4620      	mov	r0, r4
                keySz = ssl->buffers.keySz;
 80050da:	f8d4 90e8 	ldr.w	r9, [r4, #232]	; 0xe8
                ret = AllocateSuites(ssl);
 80050de:	f7fb fd7d 	bl	8000bdc <AllocateSuites>
                if (ret != 0)
 80050e2:	4603      	mov	r3, r0
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f040 80a4 	bne.w	8005232 <DoClientHello+0x25a>
                InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
                           ssl->options.haveDH, ssl->options.haveECDSAsig,
                           ssl->options.haveECC, TRUE, ssl->options.haveStaticECC,
                           ssl->options.haveFalconSig,
                           ssl->options.haveDilithiumSig, ssl->options.haveAnon,
                           TRUE, ssl->options.side);
 80050ea:	f894 2270 	ldrb.w	r2, [r4, #624]	; 0x270
                           ssl->options.haveDilithiumSig, ssl->options.haveAnon,
 80050ee:	f894 1273 	ldrb.w	r1, [r4, #627]	; 0x273
                InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 80050f2:	f3c2 1201 	ubfx	r2, r2, #4, #2
 80050f6:	920a      	str	r2, [sp, #40]	; 0x28
                           ssl->options.haveDilithiumSig, ssl->options.haveAnon,
 80050f8:	f894 2275 	ldrb.w	r2, [r4, #629]	; 0x275
                InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 80050fc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005100:	9208      	str	r2, [sp, #32]
 8005102:	09ca      	lsrs	r2, r1, #7
 8005104:	9207      	str	r2, [sp, #28]
 8005106:	f3c1 1280 	ubfx	r2, r1, #6, #1
 800510a:	2001      	movs	r0, #1
 800510c:	9206      	str	r2, [sp, #24]
 800510e:	f3c1 1240 	ubfx	r2, r1, #5, #1
 8005112:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8005116:	f3c1 0280 	ubfx	r2, r1, #2, #1
 800511a:	9203      	str	r2, [sp, #12]
 800511c:	f3c1 1200 	ubfx	r2, r1, #4, #1
 8005120:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8005124:	e9cd 3100 	strd	r3, r1, [sp]
 8005128:	9009      	str	r0, [sp, #36]	; 0x24
 800512a:	9202      	str	r2, [sp, #8]
 800512c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8005130:	6860      	ldr	r0, [r4, #4]
 8005132:	464a      	mov	r2, r9
 8005134:	f7fb fd71 	bl	8000c1a <InitSuites>
            }
        }

        /* random */
        XMEMCPY(ssl->arrays->clientRandom, input + i, RAN_LEN);
 8005138:	68a0      	ldr	r0, [r4, #8]
        i += OPAQUE16_LEN;
 800513a:	1ca9      	adds	r1, r5, #2
        XMEMCPY(ssl->arrays->clientRandom, input + i, RAN_LEN);
 800513c:	2220      	movs	r2, #32
 800513e:	4439      	add	r1, r7
 8005140:	3014      	adds	r0, #20
 8005142:	f018 fc2f 	bl	801d9a4 <memcpy>
            printf("\n");
        }
#endif

        /* session id */
        b = input[i++];
 8005146:	f896 6022 	ldrb.w	r6, [r6, #34]	; 0x22
        if (b > ID_LEN) {
 800514a:	2e20      	cmp	r6, #32
        b = input[i++];
 800514c:	f105 0923 	add.w	r9, r5, #35	; 0x23
        if (b > ID_LEN) {
 8005150:	f200 812f 	bhi.w	80053b2 <DoClientHello+0x3da>
            WOLFSSL_MSG("Invalid session ID size");
            ret = BUFFER_ERROR; /* session ID greater than 32 bytes long */
            goto out;
        }
        else if (b > 0 && !IsSCR(ssl)) {
 8005154:	b1b6      	cbz	r6, 8005184 <DoClientHello+0x1ac>
            if ((i - begin) + b > helloSz) {
 8005156:	f106 0323 	add.w	r3, r6, #35	; 0x23
 800515a:	4543      	cmp	r3, r8
 800515c:	f200 8129 	bhi.w	80053b2 <DoClientHello+0x3da>
                ret = BUFFER_ERROR;
                goto out;
            }

            /* Always save session ID in case we want to echo it. */
            XMEMCPY(ssl->arrays->sessionID, input + i, b);
 8005160:	68a0      	ldr	r0, [r4, #8]
 8005162:	4632      	mov	r2, r6
 8005164:	eb07 0109 	add.w	r1, r7, r9
 8005168:	3054      	adds	r0, #84	; 0x54
 800516a:	f018 fc1b 	bl	801d9a4 <memcpy>
            ssl->arrays->sessionIDSz = b;
 800516e:	68a3      	ldr	r3, [r4, #8]

            if (b == ID_LEN)
 8005170:	2e20      	cmp	r6, #32
            ssl->arrays->sessionIDSz = b;
 8005172:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
                ssl->options.resuming = 1; /* client wants to resume */
 8005176:	bf02      	ittt	eq
 8005178:	f894 3271 	ldrbeq.w	r3, [r4, #625]	; 0x271
 800517c:	f043 0308 	orreq.w	r3, r3, #8
 8005180:	f884 3271 	strbeq.w	r3, [r4, #625]	; 0x271
            WOLFSSL_MSG("Client wants to resume session");
        }
        i += b;
 8005184:	44b1      	add	r9, r6
                }
            }
#endif /* WOLFSSL_DTLS */

        /* suites */
        if ((i - begin) + OPAQUE16_LEN > helloSz) {
 8005186:	f1c5 0302 	rsb	r3, r5, #2
 800518a:	444b      	add	r3, r9
 800518c:	4543      	cmp	r3, r8
 800518e:	f200 8110 	bhi.w	80053b2 <DoClientHello+0x3da>
            ret = BUFFER_ERROR;
            goto out;
        }

#ifdef WOLFSSL_SMALL_STACK
        clSuites = (Suites*)XMALLOC(sizeof(Suites), ssl->heap,
 8005192:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005196:	f018 fbe5 	bl	801d964 <malloc>
                                       DYNAMIC_TYPE_SUITES);
        if (clSuites == NULL) {
 800519a:	4606      	mov	r6, r0
 800519c:	2800      	cmp	r0, #0
 800519e:	f000 810a 	beq.w	80053b6 <DoClientHello+0x3de>
            ret = MEMORY_E;
            goto out;
        }
#endif
        XMEMSET(clSuites, 0, sizeof(Suites));
 80051a2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80051a6:	2100      	movs	r1, #0
 80051a8:	f018 fc24 	bl	801d9f4 <memset>
        ato16(&input[i], &clSuites->suiteSz);
 80051ac:	4631      	mov	r1, r6
 80051ae:	eb07 0009 	add.w	r0, r7, r9
 80051b2:	f7fb f83c 	bl	800022e <ato16>
        i += OPAQUE16_LEN;

        /* Cipher suite lists are always multiples of two in length. */
        if (clSuites->suiteSz % 2 != 0) {
 80051b6:	8832      	ldrh	r2, [r6, #0]
 80051b8:	f012 0b01 	ands.w	fp, r2, #1
 80051bc:	f040 80b5 	bne.w	800532a <DoClientHello+0x352>
        i += OPAQUE16_LEN;
 80051c0:	f109 0902 	add.w	r9, r9, #2
            ret = BUFFER_ERROR;
            goto out;
        }

        /* suites and compression length check */
        if ((i - begin) + clSuites->suiteSz + OPAQUE8_LEN > helloSz) {
 80051c4:	f1c5 0301 	rsb	r3, r5, #1
 80051c8:	444b      	add	r3, r9
 80051ca:	4413      	add	r3, r2
 80051cc:	4543      	cmp	r3, r8
 80051ce:	f200 80ac 	bhi.w	800532a <DoClientHello+0x352>
            ret = BUFFER_ERROR;
            goto out;
        }

        if (clSuites->suiteSz > WOLFSSL_MAX_SUITE_SZ) {
 80051d2:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 80051d6:	f200 80a8 	bhi.w	800532a <DoClientHello+0x352>
            ret = BUFFER_ERROR;
            goto out;
        }

        XMEMCPY(clSuites->suites, input + i, clSuites->suiteSz);
 80051da:	eb07 0109 	add.w	r1, r7, r9
 80051de:	1d30      	adds	r0, r6, #4
 80051e0:	f018 fbe0 	bl	801d9a4 <memcpy>
                goto out;
            }
        }
#endif

        i += clSuites->suiteSz;
 80051e4:	8832      	ldrh	r2, [r6, #0]
        clSuites->hashSigAlgoSz = 0;
 80051e6:	f8a6 b002 	strh.w	fp, [r6, #2]
        i += clSuites->suiteSz;
 80051ea:	444a      	add	r2, r9

        /* compression length */
        b = input[i++];
 80051ec:	f102 0c01 	add.w	ip, r2, #1
 80051f0:	5cbb      	ldrb	r3, [r7, r2]
 80051f2:	18b9      	adds	r1, r7, r2

        if ((i - begin) + b > helloSz) {
 80051f4:	ebac 0205 	sub.w	r2, ip, r5
 80051f8:	441a      	add	r2, r3
 80051fa:	4542      	cmp	r2, r8
 80051fc:	4699      	mov	r9, r3
 80051fe:	f200 8094 	bhi.w	800532a <DoClientHello+0x352>
            ret = BUFFER_ERROR;
            goto out;
        }

        if (b == 0) {
 8005202:	b163      	cbz	r3, 800521e <DoClientHello+0x246>
        }

        {
            /* compression match types */
            int matchNo = 0;
            int matchZlib = 0;
 8005204:	465a      	mov	r2, fp
            int matchNo = 0;
 8005206:	4658      	mov	r0, fp

            while (b--) {
 8005208:	3b01      	subs	r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2bff      	cmp	r3, #255	; 0xff
 800520e:	d164      	bne.n	80052da <DoClientHello+0x302>
                if (comp == ZLIB_COMPRESSION) {
                    matchZlib = 1;
                }
            }

            if (ssl->options.usingCompression == 0 && matchNo) {
 8005210:	f894 3273 	ldrb.w	r3, [r4, #627]	; 0x273
 8005214:	07d9      	lsls	r1, r3, #31
 8005216:	44e1      	add	r9, ip
 8005218:	d46b      	bmi.n	80052f2 <DoClientHello+0x31a>
 800521a:	2800      	cmp	r0, #0
 800521c:	d170      	bne.n	8005300 <DoClientHello+0x328>
            ret = COMPRESSION_ERROR;
 800521e:	4b6e      	ldr	r3, [pc, #440]	; (80053d8 <DoClientHello+0x400>)
 8005220:	e0b1      	b.n	8005386 <DoClientHello+0x3ae>
        lesserVersion |= ssl->options.dtls && ssl->version.minor < pv.minor;
 8005222:	4293      	cmp	r3, r2
 8005224:	f67f af10 	bls.w	8005048 <DoClientHello+0x70>
            if (!ssl->options.downgrade) {
 8005228:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
 800522c:	0750      	lsls	r0, r2, #29
 800522e:	d404      	bmi.n	800523a <DoClientHello+0x262>
                ret = VERSION_ERROR;
 8005230:	4b6a      	ldr	r3, [pc, #424]	; (80053dc <DoClientHello+0x404>)
        if (ret != 0) {
            WOLFSSL_ERROR_VERBOSE(ret);
        }

        return ret;
    }
 8005232:	4618      	mov	r0, r3
 8005234:	b011      	add	sp, #68	; 0x44
 8005236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            belowMinDowngrade = pv.minor < ssl->options.minDowngrade;
 800523a:	f894 0280 	ldrb.w	r0, [r4, #640]	; 0x280
            if (ssl->options.dtls)
 800523e:	2900      	cmp	r1, #0
 8005240:	f000 80bc 	beq.w	80053bc <DoClientHello+0x3e4>
            if (belowMinDowngrade) {
 8005244:	4283      	cmp	r3, r0
 8005246:	d8f3      	bhi.n	8005230 <DoClientHello+0x258>
                if (pv.minor == DTLSv1_2_MINOR) {
 8005248:	2bfd      	cmp	r3, #253	; 0xfd
 800524a:	d141      	bne.n	80052d0 <DoClientHello+0x2f8>
                    ssl->options.tls1_3 = 0;
 800524c:	f894 2272 	ldrb.w	r2, [r4, #626]	; 0x272
 8005250:	f36f 0200 	bfc	r2, #0, #1
 8005254:	f884 2272 	strb.w	r2, [r4, #626]	; 0x272
 8005258:	e0ba      	b.n	80053d0 <DoClientHello+0x3f8>
                else if (pv.minor == TLSv1_MINOR) {
 800525a:	2b01      	cmp	r3, #1
 800525c:	d102      	bne.n	8005264 <DoClientHello+0x28c>
                    ssl->options.tls1_1 = 0;
 800525e:	f361 12c7 	bfi	r2, r1, #7, #1
 8005262:	e0b3      	b.n	80053cc <DoClientHello+0x3f4>
                else if (pv.minor == TLSv1_1_MINOR) {
 8005264:	2b02      	cmp	r3, #2
 8005266:	f000 80b3 	beq.w	80053d0 <DoClientHello+0x3f8>
                else if (pv.minor == TLSv1_2_MINOR) {
 800526a:	2b03      	cmp	r3, #3
 800526c:	f000 80b0 	beq.w	80053d0 <DoClientHello+0x3f8>
            ret = AllocateSuites(ssl);
 8005270:	4620      	mov	r0, r4
            keySz = ssl->buffers.keySz;
 8005272:	f8d4 90e8 	ldr.w	r9, [r4, #232]	; 0xe8
            ret = AllocateSuites(ssl);
 8005276:	f7fb fcb1 	bl	8000bdc <AllocateSuites>
            if (ret != 0)
 800527a:	4603      	mov	r3, r0
 800527c:	2800      	cmp	r0, #0
 800527e:	d1d8      	bne.n	8005232 <DoClientHello+0x25a>
                       TRUE, ssl->options.side);
 8005280:	f894 2270 	ldrb.w	r2, [r4, #624]	; 0x270
                       ssl->options.haveDilithiumSig, ssl->options.haveAnon,
 8005284:	f894 1273 	ldrb.w	r1, [r4, #627]	; 0x273
            InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 8005288:	f3c2 1201 	ubfx	r2, r2, #4, #2
 800528c:	920a      	str	r2, [sp, #40]	; 0x28
                       ssl->options.haveDilithiumSig, ssl->options.haveAnon,
 800528e:	f894 2275 	ldrb.w	r2, [r4, #629]	; 0x275
            InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 8005292:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005296:	9208      	str	r2, [sp, #32]
 8005298:	09ca      	lsrs	r2, r1, #7
 800529a:	9207      	str	r2, [sp, #28]
 800529c:	f3c1 1280 	ubfx	r2, r1, #6, #1
 80052a0:	2001      	movs	r0, #1
 80052a2:	9206      	str	r2, [sp, #24]
 80052a4:	f3c1 1240 	ubfx	r2, r1, #5, #1
 80052a8:	e9cd 0204 	strd	r0, r2, [sp, #16]
 80052ac:	f3c1 0280 	ubfx	r2, r1, #2, #1
 80052b0:	9203      	str	r2, [sp, #12]
 80052b2:	f3c1 1200 	ubfx	r2, r1, #4, #1
 80052b6:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80052ba:	e9cd 3100 	strd	r3, r1, [sp]
 80052be:	9009      	str	r0, [sp, #36]	; 0x24
 80052c0:	9202      	str	r2, [sp, #8]
 80052c2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80052c6:	6860      	ldr	r0, [r4, #4]
 80052c8:	464a      	mov	r2, r9
 80052ca:	f7fb fca6 	bl	8000c1a <InitSuites>
 80052ce:	e6bb      	b.n	8005048 <DoClientHello+0x70>
                else if (pv.minor == DTLS_MINOR) {
 80052d0:	2bff      	cmp	r3, #255	; 0xff
 80052d2:	d1cd      	bne.n	8005270 <DoClientHello+0x298>
 80052d4:	e7ba      	b.n	800524c <DoClientHello+0x274>
            int reset = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e6d3      	b.n	8005082 <DoClientHello+0xaa>
                byte comp = input[i++];
 80052da:	f811 ef01 	ldrb.w	lr, [r1, #1]!
                if (comp == NO_COMPRESSION) {
 80052de:	f1be 0f00 	cmp.w	lr, #0
 80052e2:	d004      	beq.n	80052ee <DoClientHello+0x316>
                    matchZlib = 1;
 80052e4:	f1be 0fdd 	cmp.w	lr, #221	; 0xdd
 80052e8:	bf08      	it	eq
 80052ea:	2201      	moveq	r2, #1
 80052ec:	e78c      	b.n	8005208 <DoClientHello+0x230>
                    matchNo = 1;
 80052ee:	2001      	movs	r0, #1
 80052f0:	e78a      	b.n	8005208 <DoClientHello+0x230>
            } else if (ssl->options.usingCompression && matchZlib) {
 80052f2:	b92a      	cbnz	r2, 8005300 <DoClientHello+0x328>
            } else if (ssl->options.usingCompression && matchNo) {
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d092      	beq.n	800521e <DoClientHello+0x246>
                ssl->options.usingCompression = 0;  /* turn off */
 80052f8:	f362 0300 	bfi	r3, r2, #0, #1
 80052fc:	f884 3273 	strb.w	r3, [r4, #627]	; 0x273
        if ((i - begin) < helloSz) {
 8005300:	eba9 0b05 	sub.w	fp, r9, r5
 8005304:	45c3      	cmp	fp, r8
        *inOutIdx = i;
 8005306:	f8ca 9000 	str.w	r9, [sl]
        if ((i - begin) < helloSz) {
 800530a:	d22c      	bcs.n	8005366 <DoClientHello+0x38e>
            if (TLSX_SupportExtensions(ssl))
 800530c:	4620      	mov	r0, r4
 800530e:	f003 fca4 	bl	8008c5a <TLSX_SupportExtensions>
 8005312:	2800      	cmp	r0, #0
 8005314:	d03d      	beq.n	8005392 <DoClientHello+0x3ba>
                if ((ret = TLSX_PopulateExtensions(ssl, 1)) != 0)
 8005316:	2101      	movs	r1, #1
 8005318:	4620      	mov	r0, r4
 800531a:	f003 fcad 	bl	8008c78 <TLSX_PopulateExtensions>
 800531e:	4603      	mov	r3, r0
 8005320:	bb88      	cbnz	r0, 8005386 <DoClientHello+0x3ae>
                if ((i - begin) + OPAQUE16_LEN > helloSz) {
 8005322:	f10b 0b02 	add.w	fp, fp, #2
 8005326:	45c3      	cmp	fp, r8
 8005328:	d901      	bls.n	800532e <DoClientHello+0x356>
            ret = BUFFER_ERROR;
 800532a:	4b2d      	ldr	r3, [pc, #180]	; (80053e0 <DoClientHello+0x408>)
 800532c:	e02b      	b.n	8005386 <DoClientHello+0x3ae>
                ato16(&input[i], &totalExtSz);
 800532e:	eb07 0009 	add.w	r0, r7, r9
 8005332:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
 8005336:	f7fa ff7a 	bl	800022e <ato16>
                if ((i - begin) + totalExtSz > helloSz) {
 800533a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
                i += OPAQUE16_LEN;
 800533e:	f109 0902 	add.w	r9, r9, #2
                if ((i - begin) + totalExtSz > helloSz) {
 8005342:	1b55      	subs	r5, r2, r5
 8005344:	444d      	add	r5, r9
 8005346:	4545      	cmp	r5, r8
 8005348:	d8ef      	bhi.n	800532a <DoClientHello+0x352>
                if ((ret = TLSX_Parse(ssl, input + i, totalExtSz, client_hello,
 800534a:	2301      	movs	r3, #1
 800534c:	9600      	str	r6, [sp, #0]
 800534e:	eb07 0109 	add.w	r1, r7, r9
 8005352:	4620      	mov	r0, r4
 8005354:	f003 fe1e 	bl	8008f94 <TLSX_Parse>
 8005358:	4603      	mov	r3, r0
 800535a:	b9a0      	cbnz	r0, 8005386 <DoClientHello+0x3ae>
                i += totalExtSz;
 800535c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8005360:	444b      	add	r3, r9
                *inOutIdx = i;
 8005362:	f8ca 3000 	str.w	r3, [sl]
        ssl->options.clientState   = CLIENT_HELLO_COMPLETE;
 8005366:	230c      	movs	r3, #12
 8005368:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
        ssl->options.haveSessionId = 1;
 800536c:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
        if (ssl->options.resuming) {
 8005378:	071b      	lsls	r3, r3, #28
 800537a:	d40e      	bmi.n	800539a <DoClientHello+0x3c2>
            ret = MatchSuite(ssl, clSuites);
 800537c:	4631      	mov	r1, r6
 800537e:	4620      	mov	r0, r4
 8005380:	f7ff fd88 	bl	8004e94 <MatchSuite>
 8005384:	4603      	mov	r3, r0
            XFREE(clSuites, ssl->heap, DYNAMIC_TYPE_SUITES);
 8005386:	4630      	mov	r0, r6
 8005388:	930d      	str	r3, [sp, #52]	; 0x34
 800538a:	f018 faf3 	bl	801d974 <free>
 800538e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005390:	e74f      	b.n	8005232 <DoClientHello+0x25a>
                *inOutIdx = begin + helloSz; /* skip extensions */
 8005392:	4445      	add	r5, r8
 8005394:	f8ca 5000 	str.w	r5, [sl]
 8005398:	e7e5      	b.n	8005366 <DoClientHello+0x38e>
            ret = HandleTlsResumption(ssl, clSuites);
 800539a:	4631      	mov	r1, r6
 800539c:	4620      	mov	r0, r4
 800539e:	f7ff fd9d 	bl	8004edc <HandleTlsResumption>
            if (ret != 0)
 80053a2:	4603      	mov	r3, r0
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1ee      	bne.n	8005386 <DoClientHello+0x3ae>
            if (ssl->options.clientState == CLIENT_KEYEXCHANGE_COMPLETE) {
 80053a8:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
 80053ac:	2a0d      	cmp	r2, #13
 80053ae:	d1e5      	bne.n	800537c <DoClientHello+0x3a4>
 80053b0:	e7e9      	b.n	8005386 <DoClientHello+0x3ae>
            return BUFFER_ERROR;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <DoClientHello+0x408>)
 80053b4:	e73d      	b.n	8005232 <DoClientHello+0x25a>
            ret = MEMORY_E;
 80053b6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80053ba:	e73a      	b.n	8005232 <DoClientHello+0x25a>
            if (belowMinDowngrade) {
 80053bc:	4283      	cmp	r3, r0
 80053be:	f4ff af37 	bcc.w	8005230 <DoClientHello+0x258>
                if (pv.minor == SSLv3_MINOR) {
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f47f af49 	bne.w	800525a <DoClientHello+0x282>
                    ssl->options.tls    = 0;
 80053c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
                    ssl->options.tls1_1 = 0;
 80053cc:	f884 2271 	strb.w	r2, [r4, #625]	; 0x271
                    ssl->version.minor = DTLS_MINOR;
 80053d0:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
 80053d4:	e74c      	b.n	8005270 <DoClientHello+0x298>
 80053d6:	bf00      	nop
 80053d8:	fffffe0a 	.word	0xfffffe0a
 80053dc:	fffffeba 	.word	0xfffffeba
 80053e0:	fffffeb8 	.word	0xfffffeb8

080053e4 <DoHandShakeMsgType>:
{
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	b091      	sub	sp, #68	; 0x44
 80053ea:	e9dd 8a1a 	ldrd	r8, sl, [sp, #104]	; 0x68
 80053ee:	461d      	mov	r5, r3
    if (*inOutIdx + size > totalSz) {
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	4443      	add	r3, r8
 80053f4:	4553      	cmp	r3, sl
{
 80053f6:	4604      	mov	r4, r0
 80053f8:	460f      	mov	r7, r1
 80053fa:	4616      	mov	r6, r2
    if (*inOutIdx + size > totalSz) {
 80053fc:	9305      	str	r3, [sp, #20]
 80053fe:	f200 8699 	bhi.w	8006134 <DoHandShakeMsgType+0xd50>
                  (ssl->keys.encryptionOn ? ssl->keys.padSz : 0);
 8005402:	f890 3268 	ldrb.w	r3, [r0, #616]	; 0x268
 8005406:	b10b      	cbz	r3, 800540c <DoHandShakeMsgType+0x28>
 8005408:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
 800540c:	9306      	str	r3, [sp, #24]
    if ( (ret = SanityCheckMsgReceived(ssl, type)) != 0) {
 800540e:	4629      	mov	r1, r5
 8005410:	4620      	mov	r0, r4
 8005412:	f7fa ff7d 	bl	8000310 <SanityCheckMsgReceived>
 8005416:	4681      	mov	r9, r0
 8005418:	b958      	cbnz	r0, 8005432 <DoHandShakeMsgType+0x4e>
    if (ssl->options.handShakeState == HANDSHAKE_DONE && type != hello_request){
 800541a:	f894 327e 	ldrb.w	r3, [r4, #638]	; 0x27e
 800541e:	2b10      	cmp	r3, #16
 8005420:	d10b      	bne.n	800543a <DoHandShakeMsgType+0x56>
 8005422:	b155      	cbz	r5, 800543a <DoHandShakeMsgType+0x56>
        SendAlert(ssl, alert_fatal, unexpected_message);
 8005424:	220a      	movs	r2, #10
 8005426:	2102      	movs	r1, #2
 8005428:	4620      	mov	r0, r4
 800542a:	f7fd fd6f 	bl	8002f0c <SendAlert>
        return OUT_OF_ORDER_E;
 800542e:	f46f 79ba 	mvn.w	r9, #372	; 0x174
}
 8005432:	4648      	mov	r0, r9
 8005434:	b011      	add	sp, #68	; 0x44
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ssl->options.side == WOLFSSL_CLIENT_END && ssl->options.dtls == 0 &&
 800543a:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
 800543e:	4b67      	ldr	r3, [pc, #412]	; (80055dc <DoHandShakeMsgType+0x1f8>)
 8005440:	4013      	ands	r3, r2
 8005442:	2b10      	cmp	r3, #16
 8005444:	d118      	bne.n	8005478 <DoHandShakeMsgType+0x94>
 8005446:	f894 327c 	ldrb.w	r3, [r4, #636]	; 0x27c
 800544a:	b913      	cbnz	r3, 8005452 <DoHandShakeMsgType+0x6e>
               ssl->options.serverState == NULL_STATE && type != server_hello &&
 800544c:	f015 0ffd 	tst.w	r5, #253	; 0xfd
 8005450:	d1e8      	bne.n	8005424 <DoHandShakeMsgType+0x40>
    if (ssl->options.side == WOLFSSL_SERVER_END &&
 8005452:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8005456:	f013 0f30 	tst.w	r3, #48	; 0x30
 800545a:	d117      	bne.n	800548c <DoHandShakeMsgType+0xa8>
 800545c:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
 8005460:	b9a3      	cbnz	r3, 800548c <DoHandShakeMsgType+0xa8>
               ssl->options.clientState == NULL_STATE && type != client_hello) {
 8005462:	2d01      	cmp	r5, #1
 8005464:	d1de      	bne.n	8005424 <DoHandShakeMsgType+0x40>
        ret = HashInput(ssl, input + *inOutIdx, size);
 8005466:	6831      	ldr	r1, [r6, #0]
 8005468:	4642      	mov	r2, r8
 800546a:	4439      	add	r1, r7
 800546c:	4620      	mov	r0, r4
 800546e:	f7fc f90e 	bl	800168e <HashInput>
        if (ret != 0) {
 8005472:	b168      	cbz	r0, 8005490 <DoHandShakeMsgType+0xac>
 8005474:	4681      	mov	r9, r0
 8005476:	e7dc      	b.n	8005432 <DoHandShakeMsgType+0x4e>
    if (ssl->options.side == WOLFSSL_CLIENT_END && ssl->options.dtls &&
 8005478:	4a59      	ldr	r2, [pc, #356]	; (80055e0 <DoHandShakeMsgType+0x1fc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d1e9      	bne.n	8005452 <DoHandShakeMsgType+0x6e>
 800547e:	2d0e      	cmp	r5, #14
 8005480:	d1e7      	bne.n	8005452 <DoHandShakeMsgType+0x6e>
            type == server_hello_done &&
 8005482:	f894 327c 	ldrb.w	r3, [r4, #636]	; 0x27c
 8005486:	2b02      	cmp	r3, #2
 8005488:	d8e3      	bhi.n	8005452 <DoHandShakeMsgType+0x6e>
 800548a:	e7cb      	b.n	8005424 <DoHandShakeMsgType+0x40>
    if (type != hello_request
 800548c:	2d00      	cmp	r5, #0
 800548e:	d1ea      	bne.n	8005466 <DoHandShakeMsgType+0x82>
    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8005490:	f894 2270 	ldrb.w	r2, [r4, #624]	; 0x270
 8005494:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005498:	2a10      	cmp	r2, #16
 800549a:	d117      	bne.n	80054cc <DoHandShakeMsgType+0xe8>
        switch (type) {
 800549c:	f1a5 030b 	sub.w	r3, r5, #11
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d813      	bhi.n	80054cc <DoHandShakeMsgType+0xe8>
            if (ssl->options.resuming) {
 80054a4:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d50f      	bpl.n	80054cc <DoHandShakeMsgType+0xe8>
                if (ssl->session->sessionIDSz != 0) {
 80054ac:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 80054b0:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 80054b4:	2900      	cmp	r1, #0
 80054b6:	d1b5      	bne.n	8005424 <DoHandShakeMsgType+0x40>
                ssl->options.resuming = 0;
 80054b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80054bc:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
                ssl->options.peerAuthGood = 0;
 80054c0:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80054c4:	f361 0341 	bfi	r3, r1, #1, #1
 80054c8:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
    switch (type) {
 80054cc:	2d16      	cmp	r5, #22
 80054ce:	f200 8635 	bhi.w	800613c <DoHandShakeMsgType+0xd58>
 80054d2:	e8df f015 	tbh	[pc, r5, lsl #1]
 80054d6:	0017      	.short	0x0017
 80054d8:	0051036e 	.word	0x0051036e
 80054dc:	0633003d 	.word	0x0633003d
 80054e0:	06330633 	.word	0x06330633
 80054e4:	06330633 	.word	0x06330633
 80054e8:	06330633 	.word	0x06330633
 80054ec:	013b0329 	.word	0x013b0329
 80054f0:	03560087 	.word	0x03560087
 80054f4:	03af0546 	.word	0x03af0546
 80054f8:	06330633 	.word	0x06330633
 80054fc:	03640633 	.word	0x03640633
 8005500:	03300633 	.word	0x03300633
    if (size) /* must be 0 */
 8005504:	f1b8 0f00 	cmp.w	r8, #0
 8005508:	f040 8338 	bne.w	8005b7c <DoHandShakeMsgType+0x798>
    if (IsEncryptionOn(ssl, 0)) {
 800550c:	4641      	mov	r1, r8
 800550e:	4620      	mov	r0, r4
 8005510:	f7fb fa4d 	bl	80009ae <IsEncryptionOn>
 8005514:	b160      	cbz	r0, 8005530 <DoHandShakeMsgType+0x14c>
                    *inOutIdx + ssl->keys.padSz > totalSz)
 8005516:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 800551a:	6833      	ldr	r3, [r6, #0]
 800551c:	440b      	add	r3, r1
            if (size != totalSz &&
 800551e:	f1ba 0f00 	cmp.w	sl, #0
 8005522:	d004      	beq.n	800552e <DoHandShakeMsgType+0x14a>
 8005524:	459a      	cmp	sl, r3
 8005526:	d202      	bcs.n	800552e <DoHandShakeMsgType+0x14a>
                return BUFFER_E;
 8005528:	f06f 0983 	mvn.w	r9, #131	; 0x83
 800552c:	e781      	b.n	8005432 <DoHandShakeMsgType+0x4e>
            *inOutIdx += ssl->keys.padSz;
 800552e:	6033      	str	r3, [r6, #0]
    if (ssl->options.side == WOLFSSL_SERVER_END) {
 8005530:	b93a      	cbnz	r2, 8005542 <DoHandShakeMsgType+0x15e>
        SendAlert(ssl, alert_fatal, unexpected_message); /* try */
 8005532:	220a      	movs	r2, #10
 8005534:	2102      	movs	r1, #2
 8005536:	4620      	mov	r0, r4
 8005538:	f7fd fce8 	bl	8002f0c <SendAlert>
        return FATAL_ERROR;
 800553c:	f46f 799c 	mvn.w	r9, #312	; 0x138
 8005540:	e777      	b.n	8005432 <DoHandShakeMsgType+0x4e>
        return SendAlert(ssl, alert_warning, no_renegotiation);
 8005542:	2264      	movs	r2, #100	; 0x64
 8005544:	2101      	movs	r1, #1
 8005546:	4620      	mov	r0, r4
 8005548:	f7fd fce0 	bl	8002f0c <SendAlert>
    ret = ProcessPeerCerts(ssl, input, inOutIdx, size);
 800554c:	4605      	mov	r5, r0
        break;
 800554e:	e040      	b.n	80055d2 <DoHandShakeMsgType+0x1ee>
        ret = DoHelloVerifyRequest(ssl, input,inOutIdx, size);
 8005550:	4639      	mov	r1, r7
 8005552:	4643      	mov	r3, r8
 8005554:	4632      	mov	r2, r6
 8005556:	4620      	mov	r0, r4
 8005558:	f7fe fbba 	bl	8003cd0 <DoHelloVerifyRequest>
        if (IsEncryptionOn(ssl, 0)) {
 800555c:	2100      	movs	r1, #0
        ret = DoHelloVerifyRequest(ssl, input,inOutIdx, size);
 800555e:	4605      	mov	r5, r0
        if (IsEncryptionOn(ssl, 0)) {
 8005560:	4620      	mov	r0, r4
 8005562:	f7fb fa24 	bl	80009ae <IsEncryptionOn>
 8005566:	b3a0      	cbz	r0, 80055d2 <DoHandShakeMsgType+0x1ee>
                if (*inOutIdx + ssl->keys.padSz > totalSz)
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 800556e:	4413      	add	r3, r2
 8005570:	4553      	cmp	r3, sl
 8005572:	d8d9      	bhi.n	8005528 <DoHandShakeMsgType+0x144>
                *inOutIdx += ssl->keys.padSz;
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	e02c      	b.n	80055d2 <DoHandShakeMsgType+0x1ee>
        ret = DoServerHello(ssl, input, inOutIdx, size);
 8005578:	4643      	mov	r3, r8
 800557a:	4639      	mov	r1, r7
 800557c:	4632      	mov	r2, r6
 800557e:	4620      	mov	r0, r4
 8005580:	f7fe fcce 	bl	8003f20 <DoServerHello>
        if (ssl->options.resuming || !IsAtLeastTLSv1_2(ssl) ||
 8005584:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8005588:	071f      	lsls	r7, r3, #28
        ret = DoServerHello(ssl, input, inOutIdx, size);
 800558a:	4605      	mov	r5, r0
        if (ssl->options.resuming || !IsAtLeastTLSv1_2(ssl) ||
 800558c:	d408      	bmi.n	80055a0 <DoHandShakeMsgType+0x1bc>
 800558e:	4620      	mov	r0, r4
 8005590:	f7fb f9f0 	bl	8000974 <IsAtLeastTLSv1_2>
 8005594:	b120      	cbz	r0, 80055a0 <DoHandShakeMsgType+0x1bc>
                                               IsAtLeastTLSv1_3(ssl->version)) {
 8005596:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800559a:	f7fb f9f8 	bl	800098e <IsAtLeastTLSv1_3>
        if (ssl->options.resuming || !IsAtLeastTLSv1_2(ssl) ||
 800559e:	b1c0      	cbz	r0, 80055d2 <DoHandShakeMsgType+0x1ee>
                ssl->options.cacheMessages = 0;
 80055a0:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 80055a4:	f36f 0382 	bfc	r3, #2, #1
 80055a8:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
                if ((ssl->hsHashes != NULL) && (ssl->hsHashes->messages != NULL)) {
 80055ac:	68e3      	ldr	r3, [r4, #12]
 80055ae:	b183      	cbz	r3, 80055d2 <DoHandShakeMsgType+0x1ee>
 80055b0:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 80055b4:	b168      	cbz	r0, 80055d2 <DoHandShakeMsgType+0x1ee>
                    ForceZero(ssl->hsHashes->messages, ssl->hsHashes->length);
 80055b6:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 80055ba:	f7fa fe27 	bl	800020c <ForceZero>
                    XFREE(ssl->hsHashes->messages, ssl->heap,
 80055be:	68e3      	ldr	r3, [r4, #12]
 80055c0:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 80055c4:	b108      	cbz	r0, 80055ca <DoHandShakeMsgType+0x1e6>
 80055c6:	f018 f9d5 	bl	801d974 <free>
                    ssl->hsHashes->messages = NULL;
 80055ca:	68e3      	ldr	r3, [r4, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    if (ret == 0 && expectedIdx != *inOutIdx) {
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	d07c      	beq.n	80056d0 <DoHandShakeMsgType+0x2ec>
 80055d6:	46a9      	mov	r9, r5
 80055d8:	e72b      	b.n	8005432 <DoHandShakeMsgType+0x4e>
 80055da:	bf00      	nop
 80055dc:	00040030 	.word	0x00040030
 80055e0:	00040010 	.word	0x00040010
        word32 begin = *inOutIdx;
 80055e4:	6835      	ldr	r5, [r6, #0]
        if (OPAQUE8_LEN > size)
 80055e6:	f1b8 0f00 	cmp.w	r8, #0
 80055ea:	f000 82c7 	beq.w	8005b7c <DoHandShakeMsgType+0x798>
        len = input[(*inOutIdx)++];
 80055ee:	1c6a      	adds	r2, r5, #1
 80055f0:	6032      	str	r2, [r6, #0]
 80055f2:	5d7b      	ldrb	r3, [r7, r5]
 80055f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        if ((*inOutIdx - begin) + len > size)
 80055f8:	1c59      	adds	r1, r3, #1
 80055fa:	4588      	cmp	r8, r1
 80055fc:	f0c0 82be 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
        *inOutIdx += len;
 8005600:	441a      	add	r2, r3
 8005602:	6032      	str	r2, [r6, #0]
        if (IsAtLeastTLSv1_2(ssl)) {
 8005604:	4620      	mov	r0, r4
 8005606:	f7fb f9b5 	bl	8000974 <IsAtLeastTLSv1_2>
 800560a:	b360      	cbz	r0, 8005666 <DoHandShakeMsgType+0x282>
            if ((*inOutIdx - begin) + OPAQUE16_LEN > size)
 800560c:	f1c5 0302 	rsb	r3, r5, #2
 8005610:	4413      	add	r3, r2
 8005612:	4598      	cmp	r8, r3
 8005614:	f0c0 82b2 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
            ato16(input + *inOutIdx, &len);
 8005618:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 800561c:	18b8      	adds	r0, r7, r2
 800561e:	f7fa fe06 	bl	800022e <ato16>
            *inOutIdx += OPAQUE16_LEN;
 8005622:	6831      	ldr	r1, [r6, #0]
            if ((len > size) || ((*inOutIdx - begin) + len > size))
 8005624:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
            *inOutIdx += OPAQUE16_LEN;
 8005628:	3102      	adds	r1, #2
            if ((len > size) || ((*inOutIdx - begin) + len > size))
 800562a:	4590      	cmp	r8, r2
            *inOutIdx += OPAQUE16_LEN;
 800562c:	6031      	str	r1, [r6, #0]
            if ((len > size) || ((*inOutIdx - begin) + len > size))
 800562e:	f0c0 82a5 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
 8005632:	1b4b      	subs	r3, r1, r5
 8005634:	4413      	add	r3, r2
 8005636:	4598      	cmp	r8, r3
 8005638:	f0c0 82a0 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
            if (PickHashSigAlgo(ssl, input + *inOutIdx, len) != 0 &&
 800563c:	4439      	add	r1, r7
 800563e:	4620      	mov	r0, r4
 8005640:	f7fe f93a 	bl	80038b8 <PickHashSigAlgo>
 8005644:	b150      	cbz	r0, 800565c <DoHandShakeMsgType+0x278>
                                             ssl->buffers.certificate &&
 8005646:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
            if (PickHashSigAlgo(ssl, input + *inOutIdx, len) != 0 &&
 800564a:	b13b      	cbz	r3, 800565c <DoHandShakeMsgType+0x278>
                                             ssl->buffers.certificate &&
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	b12b      	cbz	r3, 800565c <DoHandShakeMsgType+0x278>
                if (ssl->buffers.key && ssl->buffers.key->buffer) {
 8005650:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005654:	b113      	cbz	r3, 800565c <DoHandShakeMsgType+0x278>
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d174      	bne.n	8005746 <DoHandShakeMsgType+0x362>
            *inOutIdx += len;
 800565c:	6833      	ldr	r3, [r6, #0]
 800565e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8005662:	4413      	add	r3, r2
 8005664:	6033      	str	r3, [r6, #0]
        if ((*inOutIdx - begin) + OPAQUE16_LEN > size)
 8005666:	6830      	ldr	r0, [r6, #0]
 8005668:	1c83      	adds	r3, r0, #2
 800566a:	1b5b      	subs	r3, r3, r5
 800566c:	4598      	cmp	r8, r3
 800566e:	f0c0 8285 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
        ato16(input + *inOutIdx, &len);
 8005672:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8005676:	4438      	add	r0, r7
 8005678:	f7fa fdd9 	bl	800022e <ato16>
        *inOutIdx += OPAQUE16_LEN;
 800567c:	6833      	ldr	r3, [r6, #0]
        if ((*inOutIdx - begin) + len > size)
 800567e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
        *inOutIdx += OPAQUE16_LEN;
 8005682:	3302      	adds	r3, #2
 8005684:	6033      	str	r3, [r6, #0]
        if ((*inOutIdx - begin) + len > size)
 8005686:	1b5b      	subs	r3, r3, r5
 8005688:	4413      	add	r3, r2
 800568a:	4598      	cmp	r8, r3
 800568c:	f0c0 8276 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
        while (len) {
 8005690:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
            if ((*inOutIdx - begin) + OPAQUE16_LEN > size)
 8005694:	6832      	ldr	r2, [r6, #0]
        while (len) {
 8005696:	bb73      	cbnz	r3, 80056f6 <DoHandShakeMsgType+0x312>
        if (ssl->buffers.certificate && ssl->buffers.certificate->buffer) {
 8005698:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800569c:	2b00      	cmp	r3, #0
 800569e:	d046      	beq.n	800572e <DoHandShakeMsgType+0x34a>
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d043      	beq.n	800572e <DoHandShakeMsgType+0x34a>
            if (ssl->buffers.key && ssl->buffers.key->buffer) {
 80056a6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80056aa:	b143      	cbz	r3, 80056be <DoHandShakeMsgType+0x2da>
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b133      	cbz	r3, 80056be <DoHandShakeMsgType+0x2da>
                ssl->options.sendVerify = SEND_CERT;
 80056b0:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 80056b4:	2101      	movs	r1, #1
            ssl->options.sendVerify = SEND_BLANK_CERT;
 80056b6:	f361 0301 	bfi	r3, r1, #0, #2
 80056ba:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
        if (IsEncryptionOn(ssl, 0)) {
 80056be:	2100      	movs	r1, #0
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7fb f974 	bl	80009ae <IsEncryptionOn>
 80056c6:	b118      	cbz	r0, 80056d0 <DoHandShakeMsgType+0x2ec>
            *inOutIdx += ssl->keys.padSz;
 80056c8:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
            *inOutIdx += ssl->keys.padSz;
 80056cc:	4413      	add	r3, r2
 80056ce:	6033      	str	r3, [r6, #0]
    expectedIdx = *inOutIdx + size +
 80056d0:	e9dd b305 	ldrd	fp, r3, [sp, #20]
 80056d4:	449b      	add	fp, r3
    if (ret == 0 && expectedIdx != *inOutIdx) {
 80056d6:	6833      	ldr	r3, [r6, #0]
 80056d8:	455b      	cmp	r3, fp
 80056da:	f43f aeaa 	beq.w	8005432 <DoHandShakeMsgType+0x4e>
        if (!ssl->options.dtls)
 80056de:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80056e2:	075b      	lsls	r3, r3, #29
 80056e4:	d404      	bmi.n	80056f0 <DoHandShakeMsgType+0x30c>
            SendAlert(ssl, alert_fatal, decode_error);
 80056e6:	2232      	movs	r2, #50	; 0x32
 80056e8:	2102      	movs	r1, #2
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7fd fc0e 	bl	8002f0c <SendAlert>
        ret = DECODE_E;
 80056f0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80059bc <DoHandShakeMsgType+0x5d8>
 80056f4:	e69d      	b.n	8005432 <DoHandShakeMsgType+0x4e>
            if ((*inOutIdx - begin) + OPAQUE16_LEN > size)
 80056f6:	1c93      	adds	r3, r2, #2
 80056f8:	1b5b      	subs	r3, r3, r5
 80056fa:	4598      	cmp	r8, r3
 80056fc:	f0c0 823e 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
            ato16(input + *inOutIdx, &dnSz);
 8005700:	a909      	add	r1, sp, #36	; 0x24
 8005702:	18b8      	adds	r0, r7, r2
 8005704:	f7fa fd93 	bl	800022e <ato16>
            *inOutIdx += OPAQUE16_LEN;
 8005708:	6833      	ldr	r3, [r6, #0]
            if ((*inOutIdx - begin) + dnSz > size)
 800570a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
            *inOutIdx += OPAQUE16_LEN;
 800570e:	3302      	adds	r3, #2
            if ((*inOutIdx - begin) + dnSz > size)
 8005710:	1b59      	subs	r1, r3, r5
 8005712:	4411      	add	r1, r2
 8005714:	4588      	cmp	r8, r1
            *inOutIdx += OPAQUE16_LEN;
 8005716:	6033      	str	r3, [r6, #0]
            if ((*inOutIdx - begin) + dnSz > size)
 8005718:	f0c0 8230 	bcc.w	8005b7c <DoHandShakeMsgType+0x798>
            *inOutIdx += dnSz;
 800571c:	4413      	add	r3, r2
 800571e:	6033      	str	r3, [r6, #0]
            len -= OPAQUE16_LEN + dnSz;
 8005720:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8005724:	3b02      	subs	r3, #2
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800572c:	e7b0      	b.n	8005690 <DoHandShakeMsgType+0x2ac>
        else if (IsTLS(ssl) || ssl->options.dtls)
 800572e:	4620      	mov	r0, r4
 8005730:	f7fb f914 	bl	800095c <IsTLS>
 8005734:	b918      	cbnz	r0, 800573e <DoHandShakeMsgType+0x35a>
 8005736:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 800573a:	075d      	lsls	r5, r3, #29
 800573c:	d5bf      	bpl.n	80056be <DoHandShakeMsgType+0x2da>
            ssl->options.sendVerify = SEND_BLANK_CERT;
 800573e:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8005742:	2102      	movs	r1, #2
 8005744:	e7b7      	b.n	80056b6 <DoHandShakeMsgType+0x2d2>
                    return INVALID_PARAMETER;
 8005746:	f46f 79d4 	mvn.w	r9, #424	; 0x1a8
 800574a:	e672      	b.n	8005432 <DoHandShakeMsgType+0x4e>
        ssl->options.asyncState = TLS_ASYNC_BEGIN;
 800574c:	2100      	movs	r1, #0
        XMEMSET(args, 0, sizeof(DskeArgs));
 800574e:	2218      	movs	r2, #24
        ssl->options.asyncState = TLS_ASYNC_BEGIN;
 8005750:	f884 1283 	strb.w	r1, [r4, #643]	; 0x283
        XMEMSET(args, 0, sizeof(DskeArgs));
 8005754:	a809      	add	r0, sp, #36	; 0x24
 8005756:	f018 f94d 	bl	801d9f4 <memset>
        args->sigAlgo = ssl->specs.sig_algo;
 800575a:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 800575e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        args->hashAlgo = sha_mac;
 8005762:	2302      	movs	r3, #2
        args->idx = *inOutIdx;
 8005764:	6832      	ldr	r2, [r6, #0]
        args->hashAlgo = sha_mac;
 8005766:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    switch(ssl->options.asyncState)
 800576a:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
        args->begin = *inOutIdx;
 800576e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    switch(ssl->options.asyncState)
 8005772:	2b05      	cmp	r3, #5
 8005774:	f200 81cd 	bhi.w	8005b12 <DoHandShakeMsgType+0x72e>
 8005778:	e8df f013 	tbh	[pc, r3, lsl #1]
 800577c:	00720006 	.word	0x00720006
 8005780:	0199012d 	.word	0x0199012d
 8005784:	01c201b5 	.word	0x01c201b5
            switch(ssl->specs.kea)
 8005788:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 800578c:	2b07      	cmp	r3, #7
 800578e:	d170      	bne.n	8005872 <DoHandShakeMsgType+0x48e>
                    if ((args->idx - args->begin) + ENUM_LEN + OPAQUE16_LEN +
 8005790:	f1b8 0f03 	cmp.w	r8, #3
 8005794:	d801      	bhi.n	800579a <DoHandShakeMsgType+0x3b6>
                        ERROR_OUT(BUFFER_ERROR, exit_dske);
 8005796:	4d8a      	ldr	r5, [pc, #552]	; (80059c0 <DoHandShakeMsgType+0x5dc>)
 8005798:	e032      	b.n	8005800 <DoHandShakeMsgType+0x41c>
                    b = input[args->idx++];
 800579a:	1c53      	adds	r3, r2, #1
 800579c:	930b      	str	r3, [sp, #44]	; 0x2c
                    if (b != named_curve) {
 800579e:	5cbb      	ldrb	r3, [r7, r2]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	f040 81b9 	bne.w	8005b18 <DoHandShakeMsgType+0x734>
                    b = input[args->idx++];
 80057a6:	18bb      	adds	r3, r7, r2
 80057a8:	1cd1      	adds	r1, r2, #3
 80057aa:	789b      	ldrb	r3, [r3, #2]
 80057ac:	910b      	str	r1, [sp, #44]	; 0x2c
        switch (tlsCurveId) {
 80057ae:	2b17      	cmp	r3, #23
 80057b0:	d030      	beq.n	8005814 <DoHandShakeMsgType+0x430>
 80057b2:	2b1d      	cmp	r3, #29
 80057b4:	f040 81b2 	bne.w	8005b1c <DoHandShakeMsgType+0x738>
            case WOLFSSL_ECC_X25519: return ECC_X25519_OID;
 80057b8:	f240 1b6d 	movw	fp, #365	; 0x16d
                    ssl->ecdhCurveOID = curveOid;
 80057bc:	f8c4 b290 	str.w	fp, [r4, #656]	; 0x290
                    if ((args->idx - args->begin) + length > size) {
 80057c0:	f817 a001 	ldrb.w	sl, [r7, r1]
                    length = input[args->idx++];
 80057c4:	3204      	adds	r2, #4
 80057c6:	920b      	str	r2, [sp, #44]	; 0x2c
                    if ((args->idx - args->begin) + length > size) {
 80057c8:	f10a 0204 	add.w	r2, sl, #4
 80057cc:	4590      	cmp	r8, r2
 80057ce:	d3e2      	bcc.n	8005796 <DoHandShakeMsgType+0x3b2>
                    if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 80057d0:	f240 126d 	movw	r2, #365	; 0x16d
 80057d4:	4593      	cmp	fp, r2
 80057d6:	d14e      	bne.n	8005876 <DoHandShakeMsgType+0x492>
                        if (ssl->peerX25519Key == NULL) {
 80057d8:	f8d4 52b4 	ldr.w	r5, [r4, #692]	; 0x2b4
 80057dc:	b9ed      	cbnz	r5, 800581a <DoHandShakeMsgType+0x436>
                            ret = AllocKey(ssl, DYNAMIC_TYPE_CURVE25519,
 80057de:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 80057e2:	2145      	movs	r1, #69	; 0x45
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7fb fe3d 	bl	8001464 <AllocKey>
                            if (ret != 0) {
 80057ea:	4605      	mov	r5, r0
 80057ec:	b940      	cbnz	r0, 8005800 <DoHandShakeMsgType+0x41c>
                        if ((ret = wc_curve25519_check_public(
 80057ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80057f0:	2200      	movs	r2, #0
 80057f2:	4651      	mov	r1, sl
 80057f4:	4438      	add	r0, r7
 80057f6:	f010 f93b 	bl	8015a70 <wc_curve25519_check_public>
 80057fa:	4603      	mov	r3, r0
 80057fc:	b1f0      	cbz	r0, 800583c <DoHandShakeMsgType+0x458>
                            ERROR_OUT(ECC_PEERKEY_ERROR, exit_dske);
 80057fe:	4d71      	ldr	r5, [pc, #452]	; (80059c4 <DoHandShakeMsgType+0x5e0>)
    if (args->verifySig) {
 8005800:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005802:	b118      	cbz	r0, 800580c <DoHandShakeMsgType+0x428>
        XFREE(args->verifySig, ssl->heap, DYNAMIC_TYPE_SIGNATURE);
 8005804:	f018 f8b6 	bl	801d974 <free>
        args->verifySig = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	930a      	str	r3, [sp, #40]	; 0x28
        FreeAsyncCtx(ssl, 0);
    #else
        FreeDcvArgs(ssl, args);
    #endif
        /* Final cleanup */
        FreeKeyExchange(ssl);
 800580c:	4620      	mov	r0, r4
 800580e:	f7fb fe7f 	bl	8001510 <FreeKeyExchange>
        break;
 8005812:	e6de      	b.n	80055d2 <DoHandShakeMsgType+0x1ee>
        switch (tlsCurveId) {
 8005814:	f240 2b0e 	movw	fp, #526	; 0x20e
 8005818:	e7d0      	b.n	80057bc <DoHandShakeMsgType+0x3d8>
                        } else if (ssl->peerX25519KeyPresent) {
 800581a:	f894 32b8 	ldrb.w	r3, [r4, #696]	; 0x2b8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0e5      	beq.n	80057ee <DoHandShakeMsgType+0x40a>
            wc_curve25519_free((curve25519_key*)pKey);
 8005822:	4628      	mov	r0, r5
 8005824:	f010 f98a 	bl	8015b3c <wc_curve25519_free>
            ret = wc_curve25519_init_ex((curve25519_key*)pKey, ssl->heap,
 8005828:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 800582c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800582e:	4628      	mov	r0, r5
 8005830:	f010 f972 	bl	8015b18 <wc_curve25519_init_ex>
                            ssl->peerX25519KeyPresent = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
                            if (ret != 0) {
 800583a:	e7d6      	b.n	80057ea <DoHandShakeMsgType+0x406>
                        if (wc_curve25519_import_public_ex(input + args->idx,
 800583c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800583e:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8005842:	4651      	mov	r1, sl
 8005844:	4438      	add	r0, r7
 8005846:	f010 f8f5 	bl	8015a34 <wc_curve25519_import_public_ex>
 800584a:	2800      	cmp	r0, #0
 800584c:	d1d7      	bne.n	80057fe <DoHandShakeMsgType+0x41a>
                        args->idx += length;
 800584e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005850:	4453      	add	r3, sl
 8005852:	930b      	str	r3, [sp, #44]	; 0x2c
                        ssl->peerX25519KeyPresent = 1;
 8005854:	2301      	movs	r3, #1
 8005856:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
            ssl->options.asyncState = TLS_ASYNC_BUILD;
 800585a:	2301      	movs	r3, #1
 800585c:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            switch(ssl->specs.kea)
 8005860:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8005864:	2b06      	cmp	r3, #6
 8005866:	d839      	bhi.n	80058dc <DoHandShakeMsgType+0x4f8>
 8005868:	2b03      	cmp	r3, #3
 800586a:	f200 80b1 	bhi.w	80059d0 <DoHandShakeMsgType+0x5ec>
 800586e:	2b02      	cmp	r3, #2
 8005870:	d036      	beq.n	80058e0 <DoHandShakeMsgType+0x4fc>
                    ret = BAD_KEA_TYPE_E;
 8005872:	4d55      	ldr	r5, [pc, #340]	; (80059c8 <DoHandShakeMsgType+0x5e4>)
 8005874:	e7c4      	b.n	8005800 <DoHandShakeMsgType+0x41c>
                    if (ssl->peerEccKey == NULL) {
 8005876:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 800587a:	b9f5      	cbnz	r5, 80058ba <DoHandShakeMsgType+0x4d6>
                        ret = AllocKey(ssl, DYNAMIC_TYPE_ECC,
 800587c:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 8005880:	2125      	movs	r1, #37	; 0x25
 8005882:	4620      	mov	r0, r4
 8005884:	f7fb fdee 	bl	8001464 <AllocKey>
                        if (ret != 0) {
 8005888:	4605      	mov	r5, r0
 800588a:	2800      	cmp	r0, #0
 800588c:	d1b8      	bne.n	8005800 <DoHandShakeMsgType+0x41c>
                    curveId = wc_ecc_get_oid(curveOid, NULL, NULL);
 800588e:	2200      	movs	r2, #0
 8005890:	4611      	mov	r1, r2
 8005892:	4658      	mov	r0, fp
 8005894:	f008 fe80 	bl	800e598 <wc_ecc_get_oid>
 8005898:	4603      	mov	r3, r0
                    if (wc_ecc_import_x963_ex(input + args->idx, length,
 800589a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800589c:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 80058a0:	4651      	mov	r1, sl
 80058a2:	4438      	add	r0, r7
 80058a4:	f008 fd86 	bl	800e3b4 <wc_ecc_import_x963_ex>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1a8      	bne.n	80057fe <DoHandShakeMsgType+0x41a>
                    args->idx += length;
 80058ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ae:	4453      	add	r3, sl
 80058b0:	930b      	str	r3, [sp, #44]	; 0x2c
                    ssl->peerEccKeyPresent = 1;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f884 3299 	strb.w	r3, [r4, #665]	; 0x299
            if (ret != 0) {
 80058b8:	e7cf      	b.n	800585a <DoHandShakeMsgType+0x476>
                    } else if (ssl->peerEccKeyPresent) {
 80058ba:	f894 2299 	ldrb.w	r2, [r4, #665]	; 0x299
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d0e5      	beq.n	800588e <DoHandShakeMsgType+0x4aa>
            wc_ecc_free((ecc_key*)pKey);
 80058c2:	4628      	mov	r0, r5
 80058c4:	f007 fa09 	bl	800ccda <wc_ecc_free>
            ret = wc_ecc_init_ex((ecc_key*)pKey, ssl->heap, ssl->devId);
 80058c8:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 80058cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058ce:	4628      	mov	r0, r5
 80058d0:	f007 f9e2 	bl	800cc98 <wc_ecc_init_ex>
                        ssl->peerEccKeyPresent = 0;
 80058d4:	2200      	movs	r2, #0
 80058d6:	f884 2299 	strb.w	r2, [r4, #665]	; 0x299
                        if (ret != 0) {
 80058da:	e7d5      	b.n	8005888 <DoHandShakeMsgType+0x4a4>
 80058dc:	2b07      	cmp	r3, #7
 80058de:	e7c7      	b.n	8005870 <DoHandShakeMsgType+0x48c>
                    if (ssl->options.usingAnon_cipher) {
 80058e0:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80058e4:	0718      	lsls	r0, r3, #28
 80058e6:	d473      	bmi.n	80059d0 <DoHandShakeMsgType+0x5ec>
                    verifySz = (word16)(args->idx - args->begin);
 80058e8:	e9dd a20b 	ldrd	sl, r2, [sp, #44]	; 0x2c
 80058ec:	ebaa 0502 	sub.w	r5, sl, r2
 80058f0:	b2ad      	uxth	r5, r5
                    if (verifySz > MAX_DH_SZ) {
 80058f2:	f240 630c 	movw	r3, #1548	; 0x60c
 80058f6:	429d      	cmp	r5, r3
 80058f8:	f63f af4d 	bhi.w	8005796 <DoHandShakeMsgType+0x3b2>
                    if (IsAtLeastTLSv1_2(ssl)) {
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7fb f839 	bl	8000974 <IsAtLeastTLSv1_2>
 8005902:	b910      	cbnz	r0, 800590a <DoHandShakeMsgType+0x526>
                        ret = ALGO_ID_E;
 8005904:	f06f 0584 	mvn.w	r5, #132	; 0x84
 8005908:	e77a      	b.n	8005800 <DoHandShakeMsgType+0x41c>
                        if ((args->idx - args->begin) + ENUM_LEN + ENUM_LEN >
 800590a:	f10a 0302 	add.w	r3, sl, #2
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	4598      	cmp	r8, r3
 8005912:	f4ff af40 	bcc.w	8005796 <DoHandShakeMsgType+0x3b2>
                        DecodeSigAlg(&input[args->idx], &args->hashAlgo,
 8005916:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800591a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800591e:	eb07 000a 	add.w	r0, r7, sl
 8005922:	f7fa ff3f 	bl	80007a4 <DecodeSigAlg>
                        if (sigAlgo == ed25519_sa_algo &&
 8005926:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800592a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800592e:	2b09      	cmp	r3, #9
 8005930:	d139      	bne.n	80059a6 <DoHandShakeMsgType+0x5c2>
 8005932:	2a03      	cmp	r2, #3
 8005934:	d137      	bne.n	80059a6 <DoHandShakeMsgType+0x5c2>
                            args->sigAlgo = sigAlgo;
 8005936:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                        args->idx += 2;
 800593a:	980b      	ldr	r0, [sp, #44]	; 0x2c
                        hashType = HashAlgoToType(args->hashAlgo);
 800593c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
                        args->idx += 2;
 8005940:	3002      	adds	r0, #2
    switch (hashAlgo) {
 8005942:	2b04      	cmp	r3, #4
                        args->idx += 2;
 8005944:	900b      	str	r0, [sp, #44]	; 0x2c
    switch (hashAlgo) {
 8005946:	d031      	beq.n	80059ac <DoHandShakeMsgType+0x5c8>
 8005948:	2b06      	cmp	r3, #6
 800594a:	d1db      	bne.n	8005904 <DoHandShakeMsgType+0x520>
 800594c:	f04f 0a08 	mov.w	sl, #8
                    if ((args->idx - args->begin) + OPAQUE16_LEN > size) {
 8005950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005952:	1ac3      	subs	r3, r0, r3
 8005954:	3302      	adds	r3, #2
 8005956:	4598      	cmp	r8, r3
 8005958:	f4ff af1d 	bcc.w	8005796 <DoHandShakeMsgType+0x3b2>
                    ato16(input + args->idx, &args->verifySigSz);
 800595c:	a90d      	add	r1, sp, #52	; 0x34
 800595e:	4438      	add	r0, r7
 8005960:	f7fa fc65 	bl	800022e <ato16>
                    args->idx += OPAQUE16_LEN;
 8005964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    if ((args->idx - args->begin) + args->verifySigSz > size) {
 8005966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005968:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
                    args->idx += OPAQUE16_LEN;
 800596c:	3302      	adds	r3, #2
 800596e:	930b      	str	r3, [sp, #44]	; 0x2c
                    if ((args->idx - args->begin) + args->verifySigSz > size) {
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	440b      	add	r3, r1
 8005974:	4598      	cmp	r8, r3
 8005976:	f4ff af0e 	bcc.w	8005796 <DoHandShakeMsgType+0x3b2>
                    ret = HashSkeData(ssl, hashType, input + args->begin,
 800597a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	443a      	add	r2, r7
 8005982:	462b      	mov	r3, r5
 8005984:	4651      	mov	r1, sl
 8005986:	4620      	mov	r0, r4
 8005988:	f7fa feb0 	bl	80006ec <HashSkeData>
                    if (ret != 0) {
 800598c:	4605      	mov	r5, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	f47f af36 	bne.w	8005800 <DoHandShakeMsgType+0x41c>
                    switch (args->sigAlgo)
 8005994:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8005998:	2b03      	cmp	r3, #3
 800599a:	d00a      	beq.n	80059b2 <DoHandShakeMsgType+0x5ce>
 800599c:	2b09      	cmp	r3, #9
 800599e:	d1b1      	bne.n	8005904 <DoHandShakeMsgType+0x520>
                            if (!ssl->peerEd25519KeyPresent) {
 80059a0:	f894 32b0 	ldrb.w	r3, [r4, #688]	; 0x2b0
 80059a4:	e007      	b.n	80059b6 <DoHandShakeMsgType+0x5d2>
                        if (sigAlgo != args->sigAlgo) {
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d1ac      	bne.n	8005904 <DoHandShakeMsgType+0x520>
 80059aa:	e7c6      	b.n	800593a <DoHandShakeMsgType+0x556>
            return WC_HASH_TYPE_SHA256;
 80059ac:	f04f 0a06 	mov.w	sl, #6
 80059b0:	e7ce      	b.n	8005950 <DoHandShakeMsgType+0x56c>
                            if (!ssl->peerEccDsaKeyPresent) {
 80059b2:	f894 32a6 	ldrb.w	r3, [r4, #678]	; 0x2a6
                            if (!ssl->peerEd25519KeyPresent) {
 80059b6:	b95b      	cbnz	r3, 80059d0 <DoHandShakeMsgType+0x5ec>
                                ERROR_OUT(NO_PEER_KEY, exit_dske);
 80059b8:	4d04      	ldr	r5, [pc, #16]	; (80059cc <DoHandShakeMsgType+0x5e8>)
 80059ba:	e721      	b.n	8005800 <DoHandShakeMsgType+0x41c>
 80059bc:	fffffe60 	.word	0xfffffe60
 80059c0:	fffffeb8 	.word	0xfffffeb8
 80059c4:	fffffea0 	.word	0xfffffea0
 80059c8:	fffffe8a 	.word	0xfffffe8a
 80059cc:	fffffec4 	.word	0xfffffec4
            ssl->options.asyncState = TLS_ASYNC_DO;
 80059d0:	2302      	movs	r3, #2
 80059d2:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            switch(ssl->specs.kea)
 80059d6:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d839      	bhi.n	8005a52 <DoHandShakeMsgType+0x66e>
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d862      	bhi.n	8005aa8 <DoHandShakeMsgType+0x6c4>
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	f47f af45 	bne.w	8005872 <DoHandShakeMsgType+0x48e>
                    if (ssl->options.usingAnon_cipher) {
 80059e8:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80059ec:	0719      	lsls	r1, r3, #28
 80059ee:	d45b      	bmi.n	8005aa8 <DoHandShakeMsgType+0x6c4>
                    if (args->verifySig == NULL) {
 80059f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f2:	b96b      	cbnz	r3, 8005a10 <DoHandShakeMsgType+0x62c>
                        args->verifySig = (byte*)XMALLOC(args->verifySigSz,
 80059f4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80059f8:	f017 ffb4 	bl	801d964 <malloc>
 80059fc:	900a      	str	r0, [sp, #40]	; 0x28
                        if (args->verifySig == NULL) {
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f000 808f 	beq.w	8005b22 <DoHandShakeMsgType+0x73e>
                        XMEMCPY(args->verifySig, input + args->idx,
 8005a04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a06:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8005a0a:	4439      	add	r1, r7
 8005a0c:	f017 ffca 	bl	801d9a4 <memcpy>
                    switch (args->sigAlgo)
 8005a10:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
                                        args->verifySig, args->verifySigSz,
 8005a14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d01d      	beq.n	8005a56 <DoHandShakeMsgType+0x672>
 8005a1a:	2b09      	cmp	r3, #9
 8005a1c:	f47f af72 	bne.w	8005904 <DoHandShakeMsgType+0x520>
                            ret = Ed25519Verify(ssl,
 8005a20:	f8d4 32ac 	ldr.w	r3, [r4, #684]	; 0x2ac
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	2700      	movs	r7, #0
 8005a28:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8005a2c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	9702      	str	r7, [sp, #8]
 8005a34:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7fb f9f9 	bl	8000e30 <Ed25519Verify>
                                FreeKey(ssl, DYNAMIC_TYPE_ED25519,
 8005a3e:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
                            ret = Ed25519Verify(ssl,
 8005a42:	4605      	mov	r5, r0
                                FreeKey(ssl, DYNAMIC_TYPE_ED25519,
 8005a44:	2146      	movs	r1, #70	; 0x46
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7fb fcf1 	bl	800142e <FreeKey>
                                ssl->peerEd25519KeyPresent = 0;
 8005a4c:	f884 72b0 	strb.w	r7, [r4, #688]	; 0x2b0
 8005a50:	e019      	b.n	8005a86 <DoHandShakeMsgType+0x6a2>
 8005a52:	2b07      	cmp	r3, #7
 8005a54:	e7c6      	b.n	80059e4 <DoHandShakeMsgType+0x600>
                                    ret = EccVerify(ssl,
 8005a56:	f8d4 32a0 	ldr.w	r3, [r4, #672]	; 0x2a0
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	2700      	movs	r7, #0
 8005a5e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8005a62:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	9702      	str	r7, [sp, #8]
 8005a6a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7fb f978 	bl	8000d64 <EccVerify>
                                FreeKey(ssl, DYNAMIC_TYPE_ECC,
 8005a74:	f504 7228 	add.w	r2, r4, #672	; 0x2a0
                                    ret = EccVerify(ssl,
 8005a78:	4605      	mov	r5, r0
                                FreeKey(ssl, DYNAMIC_TYPE_ECC,
 8005a7a:	2125      	movs	r1, #37	; 0x25
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7fb fcd6 	bl	800142e <FreeKey>
                                ssl->peerEccDsaKeyPresent = 0;
 8005a82:	f884 72a6 	strb.w	r7, [r4, #678]	; 0x2a6
                                ssl->options.havePeerCert && (ret == 0);
 8005a86:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
                            ssl->options.peerAuthGood =
 8005a8a:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
                                ssl->options.havePeerCert && (ret == 0);
 8005a8e:	f013 0301 	ands.w	r3, r3, #1
 8005a92:	bf1c      	itt	ne
 8005a94:	fab5 f385 	clzne	r3, r5
 8005a98:	095b      	lsrne	r3, r3, #5
                            ssl->options.peerAuthGood =
 8005a9a:	f363 0241 	bfi	r2, r3, #1, #1
 8005a9e:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
            if (ret != 0) {
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	f47f aeac 	bne.w	8005800 <DoHandShakeMsgType+0x41c>
            ssl->options.asyncState = TLS_ASYNC_VERIFY;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            switch(ssl->specs.kea)
 8005aae:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d82b      	bhi.n	8005b0e <DoHandShakeMsgType+0x72a>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d812      	bhi.n	8005ae0 <DoHandShakeMsgType+0x6fc>
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	f47f aed9 	bne.w	8005872 <DoHandShakeMsgType+0x48e>
                    if (ssl->options.usingAnon_cipher) {
 8005ac0:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005ac4:	071a      	lsls	r2, r3, #28
 8005ac6:	d40b      	bmi.n	8005ae0 <DoHandShakeMsgType+0x6fc>
                    args->idx += args->verifySigSz;
 8005ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8005ace:	4413      	add	r3, r2
 8005ad0:	930b      	str	r3, [sp, #44]	; 0x2c
                    switch(args->sigAlgo)
 8005ad2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d002      	beq.n	8005ae0 <DoHandShakeMsgType+0x6fc>
 8005ada:	2b09      	cmp	r3, #9
 8005adc:	f47f af12 	bne.w	8005904 <DoHandShakeMsgType+0x520>
            ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            if (IsEncryptionOn(ssl, 0)) {
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f7fa ff60 	bl	80009ae <IsEncryptionOn>
 8005aee:	b120      	cbz	r0, 8005afa <DoHandShakeMsgType+0x716>
                args->idx += ssl->keys.padSz;
 8005af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af2:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8005af6:	4413      	add	r3, r2
 8005af8:	930b      	str	r3, [sp, #44]	; 0x2c
            ssl->options.asyncState = TLS_ASYNC_END;
 8005afa:	2305      	movs	r3, #5
 8005afc:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            *inOutIdx = args->idx;
 8005b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b02:	6033      	str	r3, [r6, #0]
            ssl->options.serverState = SERVER_KEYEXCHANGE_COMPLETE;
 8005b04:	2307      	movs	r3, #7
 8005b06:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
            break;
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	e678      	b.n	8005800 <DoHandShakeMsgType+0x41c>
 8005b0e:	2b07      	cmp	r3, #7
 8005b10:	e7d4      	b.n	8005abc <DoHandShakeMsgType+0x6d8>
    switch(ssl->options.asyncState)
 8005b12:	f46f 7596 	mvn.w	r5, #300	; 0x12c
 8005b16:	e673      	b.n	8005800 <DoHandShakeMsgType+0x41c>
                        ERROR_OUT(ECC_CURVETYPE_ERROR, exit_dske);
 8005b18:	4dab      	ldr	r5, [pc, #684]	; (8005dc8 <DoHandShakeMsgType+0x9e4>)
 8005b1a:	e671      	b.n	8005800 <DoHandShakeMsgType+0x41c>
        switch (tlsCurveId) {
 8005b1c:	f46f 75af 	mvn.w	r5, #350	; 0x15e
 8005b20:	e66e      	b.n	8005800 <DoHandShakeMsgType+0x41c>
                            ERROR_OUT(MEMORY_E, exit_dske);
 8005b22:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8005b26:	e66b      	b.n	8005800 <DoHandShakeMsgType+0x41c>
    ret = ProcessPeerCerts(ssl, input, inOutIdx, size);
 8005b28:	4643      	mov	r3, r8
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7fd fa2c 	bl	8002f8c <ProcessPeerCerts>
 8005b34:	e50a      	b.n	800554c <DoHandShakeMsgType+0x168>
    if (size < ENUM_LEN + OPAQUE24_LEN)
 8005b36:	f1b8 0f03 	cmp.w	r8, #3
 8005b3a:	d91f      	bls.n	8005b7c <DoHandShakeMsgType+0x798>
    status_type = input[(*inOutIdx)++];
 8005b3c:	6830      	ldr	r0, [r6, #0]
 8005b3e:	3001      	adds	r0, #1
 8005b40:	6030      	str	r0, [r6, #0]
    c24to32(input + *inOutIdx, &status_length);
 8005b42:	a909      	add	r1, sp, #36	; 0x24
 8005b44:	4438      	add	r0, r7
 8005b46:	f7fa fb69 	bl	800021c <c24to32>
    *inOutIdx += OPAQUE24_LEN;
 8005b4a:	6833      	ldr	r3, [r6, #0]
 8005b4c:	3303      	adds	r3, #3
 8005b4e:	6033      	str	r3, [r6, #0]
    if (size != ENUM_LEN + OPAQUE24_LEN + status_length)
 8005b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b52:	3304      	adds	r3, #4
 8005b54:	4598      	cmp	r8, r3
 8005b56:	d111      	bne.n	8005b7c <DoHandShakeMsgType+0x798>
        SendAlert(ssl, alert_fatal, bad_certificate_status_response);
 8005b58:	2102      	movs	r1, #2
 8005b5a:	2271      	movs	r2, #113	; 0x71
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7fd f9d5 	bl	8002f0c <SendAlert>
    if (IsEncryptionOn(ssl, 0)) {
 8005b62:	2100      	movs	r1, #0
 8005b64:	4620      	mov	r0, r4
 8005b66:	f7fa ff22 	bl	80009ae <IsEncryptionOn>
 8005b6a:	b138      	cbz	r0, 8005b7c <DoHandShakeMsgType+0x798>
            if (*inOutIdx + ssl->keys.padSz > size)
 8005b6c:	6833      	ldr	r3, [r6, #0]
 8005b6e:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8005b72:	4413      	add	r3, r2
 8005b74:	4598      	cmp	r8, r3
 8005b76:	f4ff acd7 	bcc.w	8005528 <DoHandShakeMsgType+0x144>
            *inOutIdx += ssl->keys.padSz;
 8005b7a:	6033      	str	r3, [r6, #0]
        return BUFFER_ERROR;
 8005b7c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005dcc <DoHandShakeMsgType+0x9e8>
 8005b80:	e457      	b.n	8005432 <DoHandShakeMsgType+0x4e>
        ssl->options.serverState = SERVER_HELLODONE_COMPLETE;
 8005b82:	2308      	movs	r3, #8
 8005b84:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
        if (IsEncryptionOn(ssl, 0)) {
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f7fa ff0f 	bl	80009ae <IsEncryptionOn>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	f43f ad9d 	beq.w	80056d0 <DoHandShakeMsgType+0x2ec>
            *inOutIdx += ssl->keys.padSz;
 8005b96:	6833      	ldr	r3, [r6, #0]
 8005b98:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8005b9c:	e596      	b.n	80056cc <DoHandShakeMsgType+0x2e8>
        ret = DoFinished(ssl, input, inOutIdx, size, totalSz, NO_SNIFF);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e9cd a300 	strd	sl, r3, [sp]
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4643      	mov	r3, r8
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7fc f94c 	bl	8001e48 <DoFinished>
 8005bb0:	e4cc      	b.n	800554c <DoHandShakeMsgType+0x168>
        ret = DoClientHello(ssl, input, inOutIdx, size);
 8005bb2:	4643      	mov	r3, r8
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff fa0d 	bl	8004fd8 <DoClientHello>
        if (ssl->options.resuming || !ssl->options.verifyPeer || \
 8005bbe:	f8b4 3270 	ldrh.w	r3, [r4, #624]	; 0x270
 8005bc2:	f403 6304 	and.w	r3, r3, #2112	; 0x840
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
        ret = DoClientHello(ssl, input, inOutIdx, size);
 8005bc8:	4605      	mov	r5, r0
        if (ssl->options.resuming || !ssl->options.verifyPeer || \
 8005bca:	d108      	bne.n	8005bde <DoHandShakeMsgType+0x7fa>
                     !IsAtLeastTLSv1_2(ssl) || IsAtLeastTLSv1_3(ssl->version)) {
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7fa fed1 	bl	8000974 <IsAtLeastTLSv1_2>
        if (ssl->options.resuming || !ssl->options.verifyPeer || \
 8005bd2:	b120      	cbz	r0, 8005bde <DoHandShakeMsgType+0x7fa>
                     !IsAtLeastTLSv1_2(ssl) || IsAtLeastTLSv1_3(ssl->version)) {
 8005bd4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8005bd8:	f7fa fed9 	bl	800098e <IsAtLeastTLSv1_3>
 8005bdc:	b1c0      	cbz	r0, 8005c10 <DoHandShakeMsgType+0x82c>
                ssl->options.cacheMessages = 0;
 8005bde:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8005be2:	f36f 0382 	bfc	r3, #2, #1
 8005be6:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
                if ((ssl->hsHashes != NULL) && (ssl->hsHashes->messages != NULL)) {
 8005bea:	68e3      	ldr	r3, [r4, #12]
 8005bec:	b183      	cbz	r3, 8005c10 <DoHandShakeMsgType+0x82c>
 8005bee:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 8005bf2:	b168      	cbz	r0, 8005c10 <DoHandShakeMsgType+0x82c>
                    ForceZero(ssl->hsHashes->messages, ssl->hsHashes->length);
 8005bf4:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 8005bf8:	f7fa fb08 	bl	800020c <ForceZero>
                    XFREE(ssl->hsHashes->messages, ssl->heap, DYNAMIC_TYPE_HASHES);
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	f8d3 02a0 	ldr.w	r0, [r3, #672]	; 0x2a0
 8005c02:	b108      	cbz	r0, 8005c08 <DoHandShakeMsgType+0x824>
 8005c04:	f017 feb6 	bl	801d974 <free>
                    ssl->hsHashes->messages = NULL;
 8005c08:	68e3      	ldr	r3, [r4, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
        if (IsEncryptionOn(ssl, 0)) {
 8005c10:	2100      	movs	r1, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	f7fa fecb 	bl	80009ae <IsEncryptionOn>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f43f acda 	beq.w	80055d2 <DoHandShakeMsgType+0x1ee>
                        *inOutIdx + ssl->keys.padSz > totalSz)
 8005c1e:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8005c22:	6832      	ldr	r2, [r6, #0]
                if (size != totalSz &&
 8005c24:	45d0      	cmp	r8, sl
                        *inOutIdx + ssl->keys.padSz > totalSz)
 8005c26:	4413      	add	r3, r2
                if (size != totalSz &&
 8005c28:	f43f aca4 	beq.w	8005574 <DoHandShakeMsgType+0x190>
 8005c2c:	459a      	cmp	sl, r3
 8005c2e:	f4bf aca1 	bcs.w	8005574 <DoHandShakeMsgType+0x190>
 8005c32:	e479      	b.n	8005528 <DoHandShakeMsgType+0x144>
        else
    #endif /* WOLFSSL_ASYNC_CRYPT */
        {
            /* Reset state */
            ret = 0;
            ssl->options.asyncState = TLS_ASYNC_BEGIN;
 8005c34:	2100      	movs	r1, #0
 8005c36:	f884 1283 	strb.w	r1, [r4, #643]	; 0x283
            XMEMSET(args, 0, sizeof(DckeArgs));
 8005c3a:	2214      	movs	r2, #20
 8005c3c:	a809      	add	r0, sp, #36	; 0x24
 8005c3e:	f017 fed9 	bl	801d9f4 <memset>
            args->idx = *inOutIdx;
 8005c42:	6833      	ldr	r3, [r6, #0]
            args->begin = *inOutIdx;
 8005c44:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
            ssl->async->freeArgs = FreeDckeArgs;
        #endif
        }

        /* Do Client Key Exchange State Machine */
        switch(ssl->options.asyncState)
 8005c48:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	f200 817c 	bhi.w	8005f4a <DoHandShakeMsgType+0xb66>
 8005c52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c56:	0006      	.short	0x0006
 8005c58:	00d30059 	.word	0x00d30059
 8005c5c:	00fd00f1 	.word	0x00fd00f1
 8005c60:	0111      	.short	0x0111
        {
            case TLS_ASYNC_BEGIN:
            {
                /* Sanity checks */
                /* server side checked in SanityCheckMsgReceived */
                if (ssl->options.clientState < CLIENT_HELLO_COMPLETE) {
 8005c62:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
 8005c66:	2b0b      	cmp	r3, #11
 8005c68:	d810      	bhi.n	8005c8c <DoHandShakeMsgType+0x8a8>
                    WOLFSSL_MSG("Client sending keyexchange at wrong time");
                    SendAlert(ssl, alert_fatal, unexpected_message);
 8005c6a:	220a      	movs	r2, #10
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7fd f94c 	bl	8002f0c <SendAlert>
                    ERROR_OUT(OUT_OF_ORDER_E, exit_dcke);
 8005c74:	f46f 75ba 	mvn.w	r5, #372	; 0x174
        }
    #endif


        /* Cleanup PMS */
        if (ssl->arrays->preMasterSecret != NULL) {
 8005c78:	68a3      	ldr	r3, [r4, #8]
 8005c7a:	6858      	ldr	r0, [r3, #4]
 8005c7c:	b110      	cbz	r0, 8005c84 <DoHandShakeMsgType+0x8a0>
            ForceZero(ssl->arrays->preMasterSecret, ssl->arrays->preMasterSz);
 8005c7e:	6899      	ldr	r1, [r3, #8]
 8005c80:	f7fa fac4 	bl	800020c <ForceZero>
        }
        ssl->arrays->preMasterSz = 0;
 8005c84:	68a3      	ldr	r3, [r4, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]

        /* Final cleanup */
        FreeKeyExchange(ssl);
 8005c8a:	e5bf      	b.n	800580c <DoHandShakeMsgType+0x428>
                if (ssl->options.verifyPeer &&
 8005c8c:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8005c90:	065b      	lsls	r3, r3, #25
 8005c92:	d50c      	bpl.n	8005cae <DoHandShakeMsgType+0x8ca>
                         (ssl->options.mutualAuth || ssl->options.failNoCert)) {
 8005c94:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
                if (ssl->options.verifyPeer &&
 8005c98:	07dd      	lsls	r5, r3, #31
 8005c9a:	d403      	bmi.n	8005ca4 <DoHandShakeMsgType+0x8c0>
                         (ssl->options.mutualAuth || ssl->options.failNoCert)) {
 8005c9c:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8005ca0:	07d8      	lsls	r0, r3, #31
 8005ca2:	d504      	bpl.n	8005cae <DoHandShakeMsgType+0x8ca>
                    if (!ssl->options.havePeerCert) {
 8005ca4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005ca8:	07d9      	lsls	r1, r3, #31
 8005caa:	f140 8151 	bpl.w	8005f50 <DoHandShakeMsgType+0xb6c>
                if (ssl->options.verifyPeer && ssl->options.failNoCertxPSK) {
 8005cae:	f8b4 3270 	ldrh.w	r3, [r4, #624]	; 0x270
 8005cb2:	f403 7310 	and.w	r3, r3, #576	; 0x240
 8005cb6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8005cba:	d105      	bne.n	8005cc8 <DoHandShakeMsgType+0x8e4>
                    if (!ssl->options.havePeerCert &&
 8005cbc:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005cc0:	f013 0f05 	tst.w	r3, #5
 8005cc4:	f000 8144 	beq.w	8005f50 <DoHandShakeMsgType+0xb6c>
                if (ssl->arrays->preMasterSecret == NULL) {
 8005cc8:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8005ccc:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005cd0:	b989      	cbnz	r1, 8005cf6 <DoHandShakeMsgType+0x912>
                    ssl->arrays->preMasterSz = ENCRYPT_LEN;
 8005cd2:	258b      	movs	r5, #139	; 0x8b
 8005cd4:	f8ca 5008 	str.w	r5, [sl, #8]
                    ssl->arrays->preMasterSecret = (byte*)XMALLOC(ENCRYPT_LEN,
 8005cd8:	4628      	mov	r0, r5
 8005cda:	9107      	str	r1, [sp, #28]
 8005cdc:	f017 fe42 	bl	801d964 <malloc>
                    if (ssl->arrays->preMasterSecret == NULL) {
 8005ce0:	68a3      	ldr	r3, [r4, #8]
                    ssl->arrays->preMasterSecret = (byte*)XMALLOC(ENCRYPT_LEN,
 8005ce2:	f8ca 0004 	str.w	r0, [sl, #4]
                    if (ssl->arrays->preMasterSecret == NULL) {
 8005ce6:	6858      	ldr	r0, [r3, #4]
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	f000 8134 	beq.w	8005f56 <DoHandShakeMsgType+0xb72>
                    XMEMSET(ssl->arrays->preMasterSecret, 0, ENCRYPT_LEN);
 8005cee:	9907      	ldr	r1, [sp, #28]
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	f017 fe7f 	bl	801d9f4 <memset>
                switch (ssl->specs.kea) {
 8005cf6:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	d001      	beq.n	8005d02 <DoHandShakeMsgType+0x91e>
                        ret = BAD_KEA_TYPE_E;
 8005cfe:	4d34      	ldr	r5, [pc, #208]	; (8005dd0 <DoHandShakeMsgType+0x9ec>)
 8005d00:	e7ba      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                ssl->options.asyncState = TLS_ASYNC_BUILD;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                switch (ssl->specs.kea) {
 8005d08:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8005d0c:	2b07      	cmp	r3, #7
 8005d0e:	d1f6      	bne.n	8005cfe <DoHandShakeMsgType+0x91a>
                        if (ssl->specs.static_ecdh &&
 8005d10:	f894 314f 	ldrb.w	r3, [r4, #335]	; 0x14f
                        ecc_key* private_key = ssl->eccTempKey;
 8005d14:	f8d4 a294 	ldr.w	sl, [r4, #660]	; 0x294
                        if (ssl->specs.static_ecdh &&
 8005d18:	b1cb      	cbz	r3, 8005d4e <DoHandShakeMsgType+0x96a>
                                          ssl->ecdhCurveOID != ECC_X25519_OID &&
 8005d1a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
                        if (ssl->specs.static_ecdh &&
 8005d1e:	f240 126d 	movw	r2, #365	; 0x16d
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <DoHandShakeMsgType+0x96a>
                                          ssl->ecdhCurveOID != ECC_X25519_OID &&
 8005d26:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8005d2a:	d010      	beq.n	8005d4e <DoHandShakeMsgType+0x96a>
                            ssl->buffers.keyType = ecc_dsa_sa_algo;
 8005d2c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8005d30:	2203      	movs	r2, #3
 8005d32:	f362 0305 	bfi	r3, r2, #0, #6
 8005d36:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
                            ret = DecodePrivateKey(ssl, &keySz);
 8005d3a:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f7fd fe36 	bl	80039b0 <DecodePrivateKey>
                            if (ret != 0) {
 8005d44:	4605      	mov	r5, r0
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d196      	bne.n	8005c78 <DoHandShakeMsgType+0x894>
                            private_key = (ecc_key*)ssl->hsKey;
 8005d4a:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
                        if ((args->idx - args->begin) + OPAQUE8_LEN > size) {
 8005d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d52:	1c51      	adds	r1, r2, #1
 8005d54:	1acb      	subs	r3, r1, r3
 8005d56:	4598      	cmp	r8, r3
 8005d58:	d201      	bcs.n	8005d5e <DoHandShakeMsgType+0x97a>
                            ERROR_OUT(BUFFER_ERROR, exit_dcke);
 8005d5a:	4d1c      	ldr	r5, [pc, #112]	; (8005dcc <DoHandShakeMsgType+0x9e8>)
 8005d5c:	e78c      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                        args->length = input[args->idx++];
 8005d5e:	5cba      	ldrb	r2, [r7, r2]
 8005d60:	910b      	str	r1, [sp, #44]	; 0x2c
                        if ((args->idx - args->begin) + args->length > size) {
 8005d62:	4413      	add	r3, r2
 8005d64:	4598      	cmp	r8, r3
                        args->length = input[args->idx++];
 8005d66:	920a      	str	r2, [sp, #40]	; 0x28
                        if ((args->idx - args->begin) + args->length > size) {
 8005d68:	d3f7      	bcc.n	8005d5a <DoHandShakeMsgType+0x976>
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8005d6a:	f8d4 2290 	ldr.w	r2, [r4, #656]	; 0x290
 8005d6e:	f240 136d 	movw	r3, #365	; 0x16d
 8005d72:	429a      	cmp	r2, r3
 8005d74:	f040 8091 	bne.w	8005e9a <DoHandShakeMsgType+0xab6>
                            if (ssl->peerX25519Key == NULL) {
 8005d78:	f8d4 52b4 	ldr.w	r5, [r4, #692]	; 0x2b4
 8005d7c:	b99d      	cbnz	r5, 8005da6 <DoHandShakeMsgType+0x9c2>
                                ret = AllocKey(ssl, DYNAMIC_TYPE_CURVE25519,
 8005d7e:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8005d82:	2145      	movs	r1, #69	; 0x45
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7fb fb6d 	bl	8001464 <AllocKey>
                                if (ret != 0) {
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	f47f af73 	bne.w	8005c78 <DoHandShakeMsgType+0x894>
                            if ((ret = wc_curve25519_check_public(
 8005d92:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
 8005d96:	2200      	movs	r2, #0
 8005d98:	4438      	add	r0, r7
 8005d9a:	f00f fe69 	bl	8015a70 <wc_curve25519_check_public>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	b1d0      	cbz	r0, 8005dd8 <DoHandShakeMsgType+0x9f4>
                                ERROR_OUT(ECC_PEERKEY_ERROR, exit_dcke);
 8005da2:	4d0c      	ldr	r5, [pc, #48]	; (8005dd4 <DoHandShakeMsgType+0x9f0>)
 8005da4:	e768      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                            } else if (ssl->peerX25519KeyPresent) {
 8005da6:	f894 32b8 	ldrb.w	r3, [r4, #696]	; 0x2b8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f1      	beq.n	8005d92 <DoHandShakeMsgType+0x9ae>
            wc_curve25519_free((curve25519_key*)pKey);
 8005dae:	4628      	mov	r0, r5
 8005db0:	f00f fec4 	bl	8015b3c <wc_curve25519_free>
            ret = wc_curve25519_init_ex((curve25519_key*)pKey, ssl->heap,
 8005db4:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 8005db8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f00f feac 	bl	8015b18 <wc_curve25519_init_ex>
                                ssl->peerX25519KeyPresent = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
                                if (ret != 0) {
 8005dc6:	e7e0      	b.n	8005d8a <DoHandShakeMsgType+0x9a6>
 8005dc8:	fffffea2 	.word	0xfffffea2
 8005dcc:	fffffeb8 	.word	0xfffffeb8
 8005dd0:	fffffe8a 	.word	0xfffffe8a
 8005dd4:	fffffea0 	.word	0xfffffea0
                            if (wc_curve25519_import_public_ex(
 8005dd8:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
 8005ddc:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8005de0:	4438      	add	r0, r7
 8005de2:	f00f fe27 	bl	8015a34 <wc_curve25519_import_public_ex>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d1db      	bne.n	8005da2 <DoHandShakeMsgType+0x9be>
                            ssl->arrays->preMasterSz = CURVE25519_KEYSIZE;
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	2220      	movs	r2, #32
 8005dee:	609a      	str	r2, [r3, #8]
                            ssl->peerX25519KeyPresent = 1;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
                ssl->options.asyncState = TLS_ASYNC_DO;
 8005df6:	2302      	movs	r3, #2
 8005df8:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                switch (ssl->specs.kea) {
 8005dfc:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	f47f af7c 	bne.w	8005cfe <DoHandShakeMsgType+0x91a>
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8005e06:	f8d4 1290 	ldr.w	r1, [r4, #656]	; 0x290
                                ssl->arrays->preMasterSecret,
 8005e0a:	68a3      	ldr	r3, [r4, #8]
                        void* private_key = ssl->eccTempKey;
 8005e0c:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
                            ret = X25519SharedSecret(ssl,
 8005e10:	685a      	ldr	r2, [r3, #4]
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8005e12:	f240 156d 	movw	r5, #365	; 0x16d
 8005e16:	42a9      	cmp	r1, r5
                            ret = X25519SharedSecret(ssl,
 8005e18:	f103 0308 	add.w	r3, r3, #8
                        if (ssl->ecdhCurveOID == ECC_X25519_OID) {
 8005e1c:	d178      	bne.n	8005f10 <DoHandShakeMsgType+0xb2c>
        ret = wc_curve25519_shared_secret_ex(priv_key, pub_key, out, outlen,
 8005e1e:	2100      	movs	r1, #0
 8005e20:	9100      	str	r1, [sp, #0]
 8005e22:	f8d4 12b4 	ldr.w	r1, [r4, #692]	; 0x2b4
 8005e26:	f00f fd8d 	bl	8015944 <wc_curve25519_shared_secret_ex>
 8005e2a:	4605      	mov	r5, r0
                if (ret != 0) {
 8005e2c:	2d00      	cmp	r5, #0
 8005e2e:	f47f af23 	bne.w	8005c78 <DoHandShakeMsgType+0x894>
                ssl->options.asyncState = TLS_ASYNC_VERIFY;
 8005e32:	2303      	movs	r3, #3
 8005e34:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                switch (ssl->specs.kea) {
 8005e38:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
 8005e3c:	2b07      	cmp	r3, #7
 8005e3e:	f47f af5e 	bne.w	8005cfe <DoHandShakeMsgType+0x91a>
                        args->idx += args->length;
 8005e42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e46:	4413      	add	r3, r2
 8005e48:	930b      	str	r3, [sp, #44]	; 0x2c
                ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 8005e4a:	2304      	movs	r3, #4
 8005e4c:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                if (IsEncryptionOn(ssl, 0)) {
 8005e50:	2100      	movs	r1, #0
 8005e52:	4620      	mov	r0, r4
 8005e54:	f7fa fdab 	bl	80009ae <IsEncryptionOn>
 8005e58:	b120      	cbz	r0, 8005e64 <DoHandShakeMsgType+0xa80>
                    args->idx += ssl->keys.padSz;
 8005e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e5c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8005e60:	4413      	add	r3, r2
 8005e62:	930b      	str	r3, [sp, #44]	; 0x2c
                ret = MakeMasterSecret(ssl);
 8005e64:	4620      	mov	r0, r4
 8005e66:	f001 f9bc 	bl	80071e2 <MakeMasterSecret>
                if (ret != 0) {
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f47f af03 	bne.w	8005c78 <DoHandShakeMsgType+0x894>
                ssl->options.asyncState = TLS_ASYNC_END;
 8005e72:	2305      	movs	r3, #5
 8005e74:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                *inOutIdx = args->idx;
 8005e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7a:	6033      	str	r3, [r6, #0]
                if (ssl->options.verifyPeer) {
 8005e7c:	f894 0270 	ldrb.w	r0, [r4, #624]	; 0x270
                ssl->options.clientState = CLIENT_KEYEXCHANGE_COMPLETE;
 8005e80:	230d      	movs	r3, #13
                if (ssl->options.verifyPeer) {
 8005e82:	f010 0040 	ands.w	r0, r0, #64	; 0x40
                ssl->options.clientState = CLIENT_KEYEXCHANGE_COMPLETE;
 8005e86:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
                if (ssl->options.verifyPeer) {
 8005e8a:	d004      	beq.n	8005e96 <DoHandShakeMsgType+0xab2>
                    ret = BuildCertHashes(ssl, &ssl->hsHashes->certHashes);
 8005e8c:	68e1      	ldr	r1, [r4, #12]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	3174      	adds	r1, #116	; 0x74
 8005e92:	f7fc f905 	bl	80020a0 <BuildCertHashes>
 8005e96:	4605      	mov	r5, r0
 8005e98:	e6ee      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                        if (!ssl->specs.static_ecdh &&
 8005e9a:	f894 314f 	ldrb.w	r3, [r4, #335]	; 0x14f
 8005e9e:	b91b      	cbnz	r3, 8005ea8 <DoHandShakeMsgType+0xac4>
 8005ea0:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d059      	beq.n	8005f5c <DoHandShakeMsgType+0xb78>
                        if (ssl->peerEccKey == NULL) {
 8005ea8:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 8005eac:	b9fd      	cbnz	r5, 8005eee <DoHandShakeMsgType+0xb0a>
                            ret = AllocKey(ssl, DYNAMIC_TYPE_ECC,
 8005eae:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 8005eb2:	2125      	movs	r1, #37	; 0x25
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7fb fad5 	bl	8001464 <AllocKey>
                            if (ret != 0) {
 8005eba:	4605      	mov	r5, r0
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f47f aedb 	bne.w	8005c78 <DoHandShakeMsgType+0x894>
                        if (wc_ecc_import_x963_ex(input + args->idx,
 8005ec2:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
 8005ec6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005eca:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4438      	add	r0, r7
 8005ed2:	f008 fa6f 	bl	800e3b4 <wc_ecc_import_x963_ex>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f47f af63 	bne.w	8005da2 <DoHandShakeMsgType+0x9be>
                        ssl->arrays->preMasterSz = private_key->dp->size;
 8005edc:	f8da 2010 	ldr.w	r2, [sl, #16]
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	609a      	str	r2, [r3, #8]
                        ssl->peerEccKeyPresent = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f884 3299 	strb.w	r3, [r4, #665]	; 0x299
                if (ret != 0) {
 8005eec:	e783      	b.n	8005df6 <DoHandShakeMsgType+0xa12>
                        } else if (ssl->peerEccKeyPresent) {
 8005eee:	f894 3299 	ldrb.w	r3, [r4, #665]	; 0x299
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0e5      	beq.n	8005ec2 <DoHandShakeMsgType+0xade>
            wc_ecc_free((ecc_key*)pKey);
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f006 feef 	bl	800ccda <wc_ecc_free>
            ret = wc_ecc_init_ex((ecc_key*)pKey, ssl->heap, ssl->devId);
 8005efc:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 8005f00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f02:	4628      	mov	r0, r5
 8005f04:	f006 fec8 	bl	800cc98 <wc_ecc_init_ex>
                            ssl->peerEccKeyPresent = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f884 3299 	strb.w	r3, [r4, #665]	; 0x299
                            if (ret != 0) {
 8005f0e:	e7d4      	b.n	8005eba <DoHandShakeMsgType+0xad6>
                        if (ssl->specs.static_ecdh) {
 8005f10:	f894 114f 	ldrb.w	r1, [r4, #335]	; 0x14f
 8005f14:	b101      	cbz	r1, 8005f18 <DoHandShakeMsgType+0xb34>
                            private_key = ssl->hsKey;
 8005f16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                        ret = EccSharedSecret(ssl,
 8005f18:	9201      	str	r2, [sp, #4]
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	e9cd 3802 	strd	r3, r8, [sp, #8]
 8005f22:	ab0a      	add	r3, sp, #40	; 0x28
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f28:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 8005f2c:	4601      	mov	r1, r0
 8005f2e:	443b      	add	r3, r7
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7fa ff2f 	bl	8000d94 <EccSharedSecret>
                            FreeKey(ssl, DYNAMIC_TYPE_ECC,
 8005f36:	f504 7227 	add.w	r2, r4, #668	; 0x29c
                        ret = EccSharedSecret(ssl,
 8005f3a:	4605      	mov	r5, r0
                            FreeKey(ssl, DYNAMIC_TYPE_ECC,
 8005f3c:	2125      	movs	r1, #37	; 0x25
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7fb fa75 	bl	800142e <FreeKey>
                            ssl->peerEccKeyPresent = 0;
 8005f44:	f884 8299 	strb.w	r8, [r4, #665]	; 0x299
                        break;
 8005f48:	e770      	b.n	8005e2c <DoHandShakeMsgType+0xa48>
        switch(ssl->options.asyncState)
 8005f4a:	f46f 7596 	mvn.w	r5, #300	; 0x12c
 8005f4e:	e693      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                        ERROR_OUT(NO_PEER_CERT, exit_dcke);
 8005f50:	f46f 75ac 	mvn.w	r5, #344	; 0x158
 8005f54:	e690      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                        ERROR_OUT(MEMORY_E, exit_dcke);
 8005f56:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8005f5a:	e68d      	b.n	8005c78 <DoHandShakeMsgType+0x894>
                            ERROR_OUT(ECC_MAKEKEY_ERROR, exit_dcke);
 8005f5c:	f46f 75b0 	mvn.w	r5, #352	; 0x160
 8005f60:	e68a      	b.n	8005c78 <DoHandShakeMsgType+0x894>
            ssl->options.asyncState = TLS_ASYNC_BEGIN;
 8005f62:	2100      	movs	r1, #0
 8005f64:	f884 1283 	strb.w	r1, [r4, #643]	; 0x283
            XMEMSET(args, 0, sizeof(DcvArgs));
 8005f68:	221c      	movs	r2, #28
 8005f6a:	a809      	add	r0, sp, #36	; 0x24
 8005f6c:	f017 fd42 	bl	801d9f4 <memset>
            args->hashAlgo = sha_mac;
 8005f70:	2302      	movs	r3, #2
            args->idx = *inOutIdx;
 8005f72:	6835      	ldr	r5, [r6, #0]
            args->hashAlgo = sha_mac;
 8005f74:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        switch(ssl->options.asyncState)
 8005f78:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
            args->begin = *inOutIdx;
 8005f7c:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
        switch(ssl->options.asyncState)
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d804      	bhi.n	8005f8e <DoHandShakeMsgType+0xbaa>
 8005f84:	e8df f003 	tbb	[pc, r3]
 8005f88:	a7611b18 	.word	0xa7611b18
 8005f8c:	c3aa      	.short	0xc3aa
 8005f8e:	f46f 7596 	mvn.w	r5, #300	; 0x12c
        if(ssl->buffers.digest.buffer) {
 8005f92:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8005f96:	b128      	cbz	r0, 8005fa4 <DoHandShakeMsgType+0xbc0>
            if (!ssl->options.dontFreeDigest) {
 8005f98:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 8005f9c:	075a      	lsls	r2, r3, #29
 8005f9e:	d401      	bmi.n	8005fa4 <DoHandShakeMsgType+0xbc0>
                XFREE(ssl->buffers.digest.buffer,
 8005fa0:	f017 fce8 	bl	801d974 <free>
        ssl->options.dontFreeDigest = 0;
 8005fa4:	f894 2275 	ldrb.w	r2, [r4, #629]	; 0x275
        ssl->buffers.digest.buffer = NULL;
 8005fa8:	2300      	movs	r3, #0
        ssl->options.dontFreeDigest = 0;
 8005faa:	f363 0282 	bfi	r2, r3, #2, #1
        ssl->buffers.digest.length = 0;
 8005fae:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
        ssl->options.dontFreeDigest = 0;
 8005fb2:	f884 2275 	strb.w	r2, [r4, #629]	; 0x275
 8005fb6:	e429      	b.n	800580c <DoHandShakeMsgType+0x428>
                ssl->options.asyncState = TLS_ASYNC_BUILD;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                if (IsAtLeastTLSv1_2(ssl)) {
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7fa fcd8 	bl	8000974 <IsAtLeastTLSv1_2>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f000 80a4 	beq.w	8006112 <DoHandShakeMsgType+0xd2e>
                    if ((args->idx - args->begin) + ENUM_LEN + ENUM_LEN > size) {
 8005fca:	f1b8 0f01 	cmp.w	r8, #1
 8005fce:	d801      	bhi.n	8005fd4 <DoHandShakeMsgType+0xbf0>
                        ERROR_OUT(BUFFER_ERROR, exit_dcv);
 8005fd0:	4d5c      	ldr	r5, [pc, #368]	; (8006144 <DoHandShakeMsgType+0xd60>)
 8005fd2:	e7de      	b.n	8005f92 <DoHandShakeMsgType+0xbae>
                    DecodeSigAlg(&input[args->idx], &args->hashAlgo,
 8005fd4:	f10d 023d 	add.w	r2, sp, #61	; 0x3d
 8005fd8:	a90f      	add	r1, sp, #60	; 0x3c
 8005fda:	1978      	adds	r0, r7, r5
 8005fdc:	f7fa fbe2 	bl	80007a4 <DecodeSigAlg>
                    args->idx += 2;
 8005fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fe2:	3302      	adds	r3, #2
 8005fe4:	930d      	str	r3, [sp, #52]	; 0x34
                if ((args->idx - args->begin) + OPAQUE16_LEN > size) {
 8005fe6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fea:	1c83      	adds	r3, r0, #2
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	4598      	cmp	r8, r3
 8005ff0:	d3ee      	bcc.n	8005fd0 <DoHandShakeMsgType+0xbec>
                ato16(input + args->idx, &args->sz);
 8005ff2:	a90b      	add	r1, sp, #44	; 0x2c
 8005ff4:	4438      	add	r0, r7
 8005ff6:	f7fa f91a 	bl	800022e <ato16>
                args->idx += OPAQUE16_LEN;
 8005ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if ((args->idx - args->begin) + args->sz > size ||
 8005ffc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ffe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
                args->idx += OPAQUE16_LEN;
 8006002:	3302      	adds	r3, #2
 8006004:	930d      	str	r3, [sp, #52]	; 0x34
                if ((args->idx - args->begin) + args->sz > size ||
 8006006:	1a5b      	subs	r3, r3, r1
 8006008:	4413      	add	r3, r2
 800600a:	4598      	cmp	r8, r3
 800600c:	d3e0      	bcc.n	8005fd0 <DoHandShakeMsgType+0xbec>
 800600e:	2a8b      	cmp	r2, #139	; 0x8b
 8006010:	d8de      	bhi.n	8005fd0 <DoHandShakeMsgType+0xbec>
                if (ssl->peerEccDsaKeyPresent) {
 8006012:	f894 32a6 	ldrb.w	r3, [r4, #678]	; 0x2a6
 8006016:	b1ab      	cbz	r3, 8006044 <DoHandShakeMsgType+0xc60>
            ssl->options.dontFreeDigest = 1;
 8006018:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 800601c:	f043 0304 	orr.w	r3, r3, #4
 8006020:	f884 3275 	strb.w	r3, [r4, #629]	; 0x275
            ssl->buffers.digest.buffer = ssl->hsHashes->certHashes.sha;
 8006024:	68e3      	ldr	r3, [r4, #12]
 8006026:	3374      	adds	r3, #116	; 0x74
 8006028:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
            ssl->buffers.digest.length = WC_SHA_DIGEST_SIZE;
 800602c:	2314      	movs	r3, #20
 800602e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
                    if (IsAtLeastTLSv1_2(ssl)) {
 8006032:	4620      	mov	r0, r4
 8006034:	f7fa fc9e 	bl	8000974 <IsAtLeastTLSv1_2>
 8006038:	b120      	cbz	r0, 8006044 <DoHandShakeMsgType+0xc60>
                        SetDigest(ssl, args->hashAlgo);
 800603a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800603e:	4620      	mov	r0, r4
 8006040:	f7fa fbc5 	bl	80007ce <SetDigest>
                ssl->options.asyncState = TLS_ASYNC_DO;
 8006044:	2302      	movs	r3, #2
 8006046:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                if (ssl->peerEccDsaKeyPresent) {
 800604a:	f894 02a6 	ldrb.w	r0, [r4, #678]	; 0x2a6
 800604e:	b1f0      	cbz	r0, 800608e <DoHandShakeMsgType+0xcaa>
                        ret = EccVerify(ssl,
 8006050:	2300      	movs	r3, #0
 8006052:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006054:	9302      	str	r3, [sp, #8]
 8006056:	f8d4 32a0 	ldr.w	r3, [r4, #672]	; 0x2a0
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8006060:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4439      	add	r1, r7
 8006068:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800606c:	4620      	mov	r0, r4
 800606e:	f7fa fe79 	bl	8000d64 <EccVerify>
                    ssl->options.peerAuthGood = ssl->options.havePeerCert &&
 8006072:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006076:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
 800607a:	f013 0301 	ands.w	r3, r3, #1
 800607e:	bf1c      	itt	ne
 8006080:	fab0 f380 	clzne	r3, r0
 8006084:	095b      	lsrne	r3, r3, #5
 8006086:	f363 0241 	bfi	r2, r3, #1, #1
 800608a:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
                if (ssl->peerEd25519KeyPresent) {
 800608e:	f894 32b0 	ldrb.w	r3, [r4, #688]	; 0x2b0
 8006092:	b1fb      	cbz	r3, 80060d4 <DoHandShakeMsgType+0xcf0>
                    ret = Ed25519Verify(ssl,
 8006094:	2200      	movs	r2, #0
 8006096:	9202      	str	r2, [sp, #8]
                        ssl->hsHashes->messages, ssl->hsHashes->prevLen,
 8006098:	68e3      	ldr	r3, [r4, #12]
                    ret = Ed25519Verify(ssl,
 800609a:	f8d4 22ac 	ldr.w	r2, [r4, #684]	; 0x2ac
 800609e:	9201      	str	r2, [sp, #4]
 80060a0:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
 80060a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060a6:	9200      	str	r2, [sp, #0]
 80060a8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80060ac:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80060b0:	4439      	add	r1, r7
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7fa febc 	bl	8000e30 <Ed25519Verify>
                    ssl->options.peerAuthGood = ssl->options.havePeerCert &&
 80060b8:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80060bc:	f894 2276 	ldrb.w	r2, [r4, #630]	; 0x276
 80060c0:	f013 0301 	ands.w	r3, r3, #1
 80060c4:	bf1c      	itt	ne
 80060c6:	fab0 f380 	clzne	r3, r0
 80060ca:	095b      	lsrne	r3, r3, #5
 80060cc:	f363 0241 	bfi	r2, r3, #1, #1
 80060d0:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
                if (ret != 0) {
 80060d4:	bb58      	cbnz	r0, 800612e <DoHandShakeMsgType+0xd4a>
                ssl->options.asyncState = TLS_ASYNC_FINALIZE;
 80060d6:	2304      	movs	r3, #4
 80060d8:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
                if (IsEncryptionOn(ssl, 0)) {
 80060dc:	2100      	movs	r1, #0
 80060de:	4620      	mov	r0, r4
 80060e0:	f7fa fc65 	bl	80009ae <IsEncryptionOn>
 80060e4:	b120      	cbz	r0, 80060f0 <DoHandShakeMsgType+0xd0c>
                    args->idx += ssl->keys.padSz;
 80060e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80060ec:	4413      	add	r3, r2
 80060ee:	930d      	str	r3, [sp, #52]	; 0x34
                ssl->options.havePeerVerify = 1;
 80060f0:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
                args->idx += args->sz;
 80060f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                ssl->options.havePeerVerify = 1;
 80060f6:	f043 0302 	orr.w	r3, r3, #2
 80060fa:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
                args->idx += args->sz;
 80060fe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006102:	4413      	add	r3, r2
                *inOutIdx = args->idx;
 8006104:	6033      	str	r3, [r6, #0]
                args->idx += args->sz;
 8006106:	930d      	str	r3, [sp, #52]	; 0x34
                ssl->options.asyncState = TLS_ASYNC_END;
 8006108:	2305      	movs	r3, #5
 800610a:	f884 3283 	strb.w	r3, [r4, #643]	; 0x283
            ret = 0;
 800610e:	2500      	movs	r5, #0
 8006110:	e73f      	b.n	8005f92 <DoHandShakeMsgType+0xbae>
                else if (ssl->peerEccDsaKeyPresent) {
 8006112:	f894 32a6 	ldrb.w	r3, [r4, #678]	; 0x2a6
 8006116:	b11b      	cbz	r3, 8006120 <DoHandShakeMsgType+0xd3c>
                        args->sigAlgo = ecc_dsa_sa_algo;
 8006118:	2303      	movs	r3, #3
                    args->sigAlgo = ed25519_sa_algo;
 800611a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800611e:	e762      	b.n	8005fe6 <DoHandShakeMsgType+0xc02>
                else if (ssl->peerEd25519KeyPresent)
 8006120:	f894 32b0 	ldrb.w	r3, [r4, #688]	; 0x2b0
 8006124:	2b00      	cmp	r3, #0
 8006126:	f43f af5e 	beq.w	8005fe6 <DoHandShakeMsgType+0xc02>
                    args->sigAlgo = ed25519_sa_algo;
 800612a:	2309      	movs	r3, #9
 800612c:	e7f5      	b.n	800611a <DoHandShakeMsgType+0xd36>
                    ret = SIG_VERIFY_E;
 800612e:	f06f 05e4 	mvn.w	r5, #228	; 0xe4
 8006132:	e72e      	b.n	8005f92 <DoHandShakeMsgType+0xbae>
        return INCOMPLETE_DATA;
 8006134:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8006148 <DoHandShakeMsgType+0xd64>
 8006138:	f7ff b97b 	b.w	8005432 <DoHandShakeMsgType+0x4e>
    switch (type) {
 800613c:	f46f 7999 	mvn.w	r9, #306	; 0x132
 8006140:	f7ff b977 	b.w	8005432 <DoHandShakeMsgType+0x4e>
 8006144:	fffffeb8 	.word	0xfffffeb8
 8006148:	fffffeca 	.word	0xfffffeca

0800614c <ProcessReplyEx>:
{
 800614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (ssl->error != 0 && ssl->error != WANT_READ && ssl->error != WANT_WRITE
 8006150:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
{
 8006154:	b09b      	sub	sp, #108	; 0x6c
 8006156:	4604      	mov	r4, r0
    if (ssl->error != 0 && ssl->error != WANT_READ && ssl->error != WANT_WRITE
 8006158:	b156      	cbz	r6, 8006170 <ProcessReplyEx+0x24>
 800615a:	f026 0204 	bic.w	r2, r6, #4
 800615e:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 8006162:	429a      	cmp	r2, r3
 8006164:	d004      	beq.n	8006170 <ProcessReplyEx+0x24>
        && (allowSocketErr != 1 || ssl->error != SOCKET_ERROR_E)
 8006166:	2901      	cmp	r1, #1
 8006168:	d16f      	bne.n	800624a <ProcessReplyEx+0xfe>
 800616a:	f516 7f9a 	cmn.w	r6, #308	; 0x134
 800616e:	d16c      	bne.n	800624a <ProcessReplyEx+0xfe>
    ret = RetrySendAlert(ssl);
 8006170:	4620      	mov	r0, r4
 8006172:	f7fc fe0d 	bl	8002d90 <RetrySendAlert>
    if (ret != 0)
 8006176:	4606      	mov	r6, r0
 8006178:	2800      	cmp	r0, #0
 800617a:	d166      	bne.n	800624a <ProcessReplyEx+0xfe>
    word32 startIdx = 0;
 800617c:	4682      	mov	sl, r0
            if (IsEncryptionOn(ssl, 0) && ssl->keys.decryptedCur == 0 &&
 800617e:	4680      	mov	r8, r0
        switch (ssl->options.processReply) {
 8006180:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
 8006184:	2b08      	cmp	r3, #8
 8006186:	f200 840f 	bhi.w	80069a8 <ProcessReplyEx+0x85c>
 800618a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800618e:	0009      	.short	0x0009
 8006190:	0013040d 	.word	0x0013040d
 8006194:	007d006e 	.word	0x007d006e
 8006198:	01810080 	.word	0x01810080
 800619c:	01d701d4 	.word	0x01d701d4
            if (!ssl->options.dtls) {
 80061a0:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80061a4:	075b      	lsls	r3, r3, #29
 80061a6:	d405      	bmi.n	80061b4 <ProcessReplyEx+0x68>
                if ((ret = GetInputData(ssl, readSz)) < 0)
 80061a8:	2105      	movs	r1, #5
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7fb fc5c 	bl	8001a68 <GetInputData>
 80061b0:	1e06      	subs	r6, r0, #0
 80061b2:	db4a      	blt.n	800624a <ProcessReplyEx+0xfe>
    if (!ssl->options.dtls) {
 80061b4:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80061b8:	075f      	lsls	r7, r3, #29
 80061ba:	d414      	bmi.n	80061e6 <ProcessReplyEx+0x9a>
        XMEMCPY(rh, ssl->buffers.inputBuffer.buffer + *inOutIdx, RECORD_HEADER_SZ);
 80061bc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80061c0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80061c4:	2205      	movs	r2, #5
 80061c6:	4419      	add	r1, r3
 80061c8:	f204 1033 	addw	r0, r4, #307	; 0x133
 80061cc:	f017 fbea 	bl	801d9a4 <memcpy>
        *inOutIdx += RECORD_HEADER_SZ;
 80061d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80061d4:	3305      	adds	r3, #5
 80061d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        ato16(rh->length, size);
 80061da:	f504 7198 	add.w	r1, r4, #304	; 0x130
 80061de:	f504 709b 	add.w	r0, r4, #310	; 0x136
 80061e2:	f7fa f824 	bl	800022e <ato16>
    if (rh->pvMajor != ssl->version.major || rh->pvMinor != ssl->version.minor)
 80061e6:	f894 2134 	ldrb.w	r2, [r4, #308]	; 0x134
 80061ea:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d105      	bne.n	80061fe <ProcessReplyEx+0xb2>
 80061f2:	f894 2135 	ldrb.w	r2, [r4, #309]	; 0x135
 80061f6:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d01d      	beq.n	800623a <ProcessReplyEx+0xee>
        if (ssl->options.side == WOLFSSL_SERVER_END &&
 80061fe:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8006202:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8006206:	d103      	bne.n	8006210 <ProcessReplyEx+0xc4>
 8006208:	f894 2282 	ldrb.w	r2, [r4, #642]	; 0x282
 800620c:	2a03      	cmp	r2, #3
 800620e:	d914      	bls.n	800623a <ProcessReplyEx+0xee>
        else if (ssl->options.side == WOLFSSL_CLIENT_END &&
 8006210:	f8b4 2270 	ldrh.w	r2, [r4, #624]	; 0x270
 8006214:	f402 6286 	and.w	r2, r2, #1072	; 0x430
 8006218:	f5b2 6f82 	cmp.w	r2, #1040	; 0x410
 800621c:	d103      	bne.n	8006226 <ProcessReplyEx+0xda>
                                 ssl->options.downgrade &&
 800621e:	f894 2281 	ldrb.w	r2, [r4, #641]	; 0x281
 8006222:	2a03      	cmp	r2, #3
 8006224:	d909      	bls.n	800623a <ProcessReplyEx+0xee>
        else if (ssl->options.dtls && rh->type == handshake)
 8006226:	f894 2272 	ldrb.w	r2, [r4, #626]	; 0x272
 800622a:	0756      	lsls	r6, r2, #29
 800622c:	f140 83d4 	bpl.w	80069d8 <ProcessReplyEx+0x88c>
 8006230:	f894 2133 	ldrb.w	r2, [r4, #307]	; 0x133
 8006234:	2a16      	cmp	r2, #22
 8006236:	f040 83cf 	bne.w	80069d8 <ProcessReplyEx+0x88c>
    if (*size > (MAX_RECORD_SIZE + MAX_COMP_EXTRA + MAX_MSG_EXTRA)) {
 800623a:	f8b4 2130 	ldrh.w	r2, [r4, #304]	; 0x130
 800623e:	f244 4366 	movw	r3, #17510	; 0x4466
 8006242:	429a      	cmp	r2, r3
 8006244:	d905      	bls.n	8006252 <ProcessReplyEx+0x106>
        return LENGTH_ERROR;
 8006246:	f46f 76aa 	mvn.w	r6, #340	; 0x154
}
 800624a:	4630      	mov	r0, r6
 800624c:	b01b      	add	sp, #108	; 0x6c
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (ssl->options.dtls && rh->type == handshake)
 8006252:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
    if (*size == 0 && rh->type != application_data) {
 8006256:	2a00      	cmp	r2, #0
 8006258:	d172      	bne.n	8006340 <ProcessReplyEx+0x1f4>
 800625a:	2b17      	cmp	r3, #23
 800625c:	d1f3      	bne.n	8006246 <ProcessReplyEx+0xfa>
            ssl->options.processReply = getData;
 800625e:	2303      	movs	r3, #3
    ssl->keys.decryptedCur = 0;
 8006260:	f884 8269 	strb.w	r8, [r4, #617]	; 0x269
            ssl->options.processReply = getData;
 8006264:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
            ret = GetRecordHeader(ssl, &ssl->buffers.inputBuffer.idx,
 8006268:	2600      	movs	r6, #0
            if (!ssl->options.dtls) {
 800626a:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 800626e:	075d      	lsls	r5, r3, #29
 8006270:	d406      	bmi.n	8006280 <ProcessReplyEx+0x134>
                if ((ret = GetInputData(ssl, ssl->curSize)) < 0) {
 8006272:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
 8006276:	4620      	mov	r0, r4
 8006278:	f7fb fbf6 	bl	8001a68 <GetInputData>
 800627c:	1e06      	subs	r6, r0, #0
 800627e:	dbe4      	blt.n	800624a <ProcessReplyEx+0xfe>
            startIdx = ssl->buffers.inputBuffer.idx;  /* in case > 1 msg per */
 8006280:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
            ssl->keys.padSz = 0;
 8006284:	f8c4 8264 	str.w	r8, [r4, #612]	; 0x264
            ssl->options.processReply = decryptMessage;
 8006288:	2305      	movs	r3, #5
 800628a:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
            if (IsEncryptionOn(ssl, 0) && ssl->keys.decryptedCur == 0 &&
 800628e:	2100      	movs	r1, #0
 8006290:	4620      	mov	r0, r4
 8006292:	f7fa fb8c 	bl	80009ae <IsEncryptionOn>
 8006296:	2800      	cmp	r0, #0
 8006298:	f000 80f7 	beq.w	800648a <ProcessReplyEx+0x33e>
 800629c:	f894 3269 	ldrb.w	r3, [r4, #617]	; 0x269
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 80f2 	bne.w	800648a <ProcessReplyEx+0x33e>
                                        (!IsAtLeastTLSv1_3(ssl->version) ||
 80062a6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80062aa:	f7fa fb70 	bl	800098e <IsAtLeastTLSv1_3>
            if (IsEncryptionOn(ssl, 0) && ssl->keys.decryptedCur == 0 &&
 80062ae:	b120      	cbz	r0, 80062ba <ProcessReplyEx+0x16e>
                                        (!IsAtLeastTLSv1_3(ssl->version) ||
 80062b0:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
 80062b4:	2b14      	cmp	r3, #20
 80062b6:	f000 80e8 	beq.w	800648a <ProcessReplyEx+0x33e>
    if (ssl->specs.cipher_type == block) {
 80062ba:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
                ret = SanityCheckCipherText(ssl, ssl->curSize);
 80062be:	f8b4 6130 	ldrh.w	r6, [r4, #304]	; 0x130
    word32 minLength = ssl->specs.hash_size; /* covers stream */
 80062c2:	f894 214d 	ldrb.w	r2, [r4, #333]	; 0x14d
    if (ssl->specs.cipher_type == block) {
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d140      	bne.n	800634c <ProcessReplyEx+0x200>
        if (encryptSz % ssl->specs.block_size) {
 80062ca:	f8b4 3144 	ldrh.w	r3, [r4, #324]	; 0x144
 80062ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80062d2:	fb03 6111 	mls	r1, r3, r1, r6
 80062d6:	2900      	cmp	r1, #0
 80062d8:	f040 8369 	bne.w	80069ae <ProcessReplyEx+0x862>
        minLength++;  /* pad byte */
 80062dc:	3201      	adds	r2, #1
        if (ssl->options.tls1_1)
 80062de:	f994 1271 	ldrsb.w	r1, [r4, #625]	; 0x271
 80062e2:	429a      	cmp	r2, r3
 80062e4:	bf38      	it	cc
 80062e6:	461a      	movcc	r2, r3
 80062e8:	2900      	cmp	r1, #0
 80062ea:	da00      	bge.n	80062ee <ProcessReplyEx+0x1a2>
            minLength += ssl->specs.block_size;  /* explicit IV */
 80062ec:	441a      	add	r2, r3
    if (encryptSz < minLength) {
 80062ee:	4296      	cmp	r6, r2
 80062f0:	f0c0 835d 	bcc.w	80069ae <ProcessReplyEx+0x862>
                    if (!ssl->options.tls1_3) {
 80062f4:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80062f8:	f013 0301 	ands.w	r3, r3, #1
 80062fc:	f040 8149 	bne.w	8006592 <ProcessReplyEx+0x446>
                        ret = DecryptTls(ssl,
 8006300:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006304:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
        ssl->decrypt.state = CIPHER_STATE_BEGIN;
 8006308:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
            if (ssl->decrypt.setup == 0) {
 800630c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
                        ret = DecryptTls(ssl,
 8006310:	4415      	add	r5, r2
            if (ssl->decrypt.setup == 0) {
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 813d 	beq.w	8006592 <ProcessReplyEx+0x446>
            if (ssl->specs.bulk_cipher_algorithm == wolfssl_aes_ccm ||
 8006318:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 800631c:	1fda      	subs	r2, r3, #7
 800631e:	2a01      	cmp	r2, #1
 8006320:	d963      	bls.n	80063ea <ProcessReplyEx+0x29e>
                ssl->specs.bulk_cipher_algorithm == wolfssl_aes_gcm ||
 8006322:	2b0e      	cmp	r3, #14
 8006324:	d061      	beq.n	80063ea <ProcessReplyEx+0x29e>
    switch (ssl->specs.bulk_cipher_algorithm)
 8006326:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
            ssl->decrypt.state = CIPHER_STATE_DO;
 800632a:	2701      	movs	r7, #1
    switch (ssl->specs.bulk_cipher_algorithm)
 800632c:	2b06      	cmp	r3, #6
            ssl->decrypt.state = CIPHER_STATE_DO;
 800632e:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
    switch (ssl->specs.bulk_cipher_algorithm)
 8006332:	f000 808f 	beq.w	8006454 <ProcessReplyEx+0x308>
 8006336:	d813      	bhi.n	8006360 <ProcessReplyEx+0x214>
 8006338:	2b04      	cmp	r3, #4
 800633a:	d06a      	beq.n	8006412 <ProcessReplyEx+0x2c6>
 800633c:	4eb5      	ldr	r6, [pc, #724]	; (8006614 <ProcessReplyEx+0x4c8>)
 800633e:	e06f      	b.n	8006420 <ProcessReplyEx+0x2d4>
    switch (rh->type) {
 8006340:	3b14      	subs	r3, #20
 8006342:	2b03      	cmp	r3, #3
 8006344:	d98b      	bls.n	800625e <ProcessReplyEx+0x112>
 8006346:	f46f 769b 	mvn.w	r6, #310	; 0x136
 800634a:	e77e      	b.n	800624a <ProcessReplyEx+0xfe>
    if (ssl->specs.cipher_type == aead) {
 800634c:	2b02      	cmp	r3, #2
 800634e:	d1ce      	bne.n	80062ee <ProcessReplyEx+0x1a2>
    return (ssl->specs.cipher_type == aead) &&
 8006350:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
        minLength = ssl->specs.aead_mac_size;    /* authTag size */
 8006354:	f8b4 2146 	ldrh.w	r2, [r4, #326]	; 0x146
    return (ssl->specs.cipher_type == aead) &&
 8006358:	2b09      	cmp	r3, #9
            minLength += AESGCM_EXP_IV_SZ;       /* explicit IV  */
 800635a:	bf18      	it	ne
 800635c:	3208      	addne	r2, #8
 800635e:	e7c6      	b.n	80062ee <ProcessReplyEx+0x1a2>
    switch (ssl->specs.bulk_cipher_algorithm)
 8006360:	3b07      	subs	r3, #7
 8006362:	2b01      	cmp	r3, #1
 8006364:	d8ea      	bhi.n	800633c <ProcessReplyEx+0x1f0>
            XMEMSET(ssl->decrypt.additional, 0, AEAD_AUTH_DATA_SZ);
 8006366:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006368:	220d      	movs	r2, #13
 800636a:	2100      	movs	r1, #0
 800636c:	f017 fb42 	bl	801d9f4 <memset>
            WriteSEQ(ssl, PEER_ORDER, ssl->decrypt.additional);
 8006370:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006372:	4639      	mov	r1, r7
 8006374:	4620      	mov	r0, r4
 8006376:	f7fb f8f8 	bl	800156a <WriteSEQ>
            ssl->decrypt.additional[AEAD_TYPE_OFFSET] = ssl->curRL.type;
 800637a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800637c:	f894 2133 	ldrb.w	r2, [r4, #307]	; 0x133
 8006380:	721a      	strb	r2, [r3, #8]
            ssl->decrypt.additional[AEAD_VMAJ_OFFSET] = ssl->curRL.pvMajor;
 8006382:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006384:	f894 2134 	ldrb.w	r2, [r4, #308]	; 0x134
 8006388:	725a      	strb	r2, [r3, #9]
            ssl->decrypt.additional[AEAD_VMIN_OFFSET] = ssl->curRL.pvMinor;
 800638a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800638c:	f894 2135 	ldrb.w	r2, [r4, #309]	; 0x135
 8006390:	729a      	strb	r2, [r3, #10]
            c16toa(sz - AESGCM_EXP_IV_SZ - ssl->specs.aead_mac_size,
 8006392:	f8b4 3146 	ldrh.w	r3, [r4, #326]	; 0x146
                                    ssl->decrypt.additional + AEAD_LEN_OFFSET);
 8006396:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
            c16toa(sz - AESGCM_EXP_IV_SZ - ssl->specs.aead_mac_size,
 8006398:	f1a6 0708 	sub.w	r7, r6, #8
 800639c:	1afb      	subs	r3, r7, r3
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 800639e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    c[1] =  (byte)(wc_u16       & 0xff);
 80063a2:	7313      	strb	r3, [r2, #12]
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80063a4:	72d1      	strb	r1, [r2, #11]
                XMEMCPY(ssl->decrypt.nonce, ssl->keys.aead_dec_imp_IV,
 80063a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80063a8:	f504 7111 	add.w	r1, r4, #580	; 0x244
 80063ac:	2204      	movs	r2, #4
 80063ae:	f017 faf9 	bl	801d9a4 <memcpy>
            XMEMCPY(ssl->decrypt.nonce + AESGCM_IMP_IV_SZ, input,
 80063b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80063b4:	4629      	mov	r1, r5
 80063b6:	2208      	movs	r2, #8
 80063b8:	3004      	adds	r0, #4
 80063ba:	f017 faf3 	bl	801d9a4 <memcpy>
                if ((ret = aes_auth_fn(ssl->decrypt.aes,
 80063be:	210d      	movs	r1, #13
                            sz - AESGCM_EXP_IV_SZ - ssl->specs.aead_mac_size,
 80063c0:	f8b4 3146 	ldrh.w	r3, [r4, #326]	; 0x146
                if ((ret = aes_auth_fn(ssl->decrypt.aes,
 80063c4:	9105      	str	r1, [sp, #20]
 80063c6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
                            input + sz - ssl->specs.aead_mac_size,
 80063c8:	1af0      	subs	r0, r6, r3
                if ((ret = aes_auth_fn(ssl->decrypt.aes,
 80063ca:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80063ce:	210c      	movs	r1, #12
 80063d0:	4428      	add	r0, r5
 80063d2:	f105 0208 	add.w	r2, r5, #8
 80063d6:	9101      	str	r1, [sp, #4]
 80063d8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80063da:	9002      	str	r0, [sp, #8]
 80063dc:	9100      	str	r1, [sp, #0]
 80063de:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80063e0:	1afb      	subs	r3, r7, r3
 80063e2:	4611      	mov	r1, r2
 80063e4:	f005 f9e4 	bl	800b7b0 <wc_AesGcmDecrypt>
 80063e8:	e019      	b.n	800641e <ProcessReplyEx+0x2d2>
                if (ssl->decrypt.additional == NULL)
 80063ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80063ec:	b91b      	cbnz	r3, 80063f6 <ProcessReplyEx+0x2aa>
                    ssl->decrypt.additional = (byte*)XMALLOC(AEAD_AUTH_DATA_SZ,
 80063ee:	200d      	movs	r0, #13
 80063f0:	f017 fab8 	bl	801d964 <malloc>
 80063f4:	66e0      	str	r0, [r4, #108]	; 0x6c
                if (ssl->decrypt.nonce == NULL) {
 80063f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063f8:	b91b      	cbnz	r3, 8006402 <ProcessReplyEx+0x2b6>
                    ssl->decrypt.nonce = (byte*)XMALLOC(AESGCM_NONCE_SZ,
 80063fa:	200c      	movs	r0, #12
 80063fc:	f017 fab2 	bl	801d964 <malloc>
 8006400:	6720      	str	r0, [r4, #112]	; 0x70
                if (ssl->decrypt.additional == NULL ||
 8006402:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006404:	b113      	cbz	r3, 800640c <ProcessReplyEx+0x2c0>
 8006406:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006408:	2b00      	cmp	r3, #0
 800640a:	d18c      	bne.n	8006326 <ProcessReplyEx+0x1da>
                    return MEMORY_E;
 800640c:	f06f 067c 	mvn.w	r6, #124	; 0x7c
 8006410:	e01a      	b.n	8006448 <ProcessReplyEx+0x2fc>
            ret = wc_Des3_CbcDecrypt(ssl->decrypt.des3, plain, input, sz);
 8006412:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006414:	4633      	mov	r3, r6
 8006416:	462a      	mov	r2, r5
 8006418:	4629      	mov	r1, r5
 800641a:	f005 fd4f 	bl	800bebc <wc_Des3_CbcDecrypt>
                if ((ret = aes_auth_fn(ssl->decrypt.aes,
 800641e:	4606      	mov	r6, r0
            ssl->decrypt.state = CIPHER_STATE_END;
 8006420:	2302      	movs	r3, #2
 8006422:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
            if (ssl->specs.bulk_cipher_algorithm == wolfssl_aes_ccm ||
 8006426:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 800642a:	3b07      	subs	r3, #7
 800642c:	2b01      	cmp	r3, #1
 800642e:	d818      	bhi.n	8006462 <ProcessReplyEx+0x316>
                if (ssl->decrypt.nonce)
 8006430:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006432:	b110      	cbz	r0, 800643a <ProcessReplyEx+0x2ee>
                    ForceZero(ssl->decrypt.nonce, AESGCM_NONCE_SZ);
 8006434:	210c      	movs	r1, #12
 8006436:	f7f9 fee9 	bl	800020c <ForceZero>
                if (ret < 0) {
 800643a:	2e00      	cmp	r6, #0
 800643c:	da11      	bge.n	8006462 <ProcessReplyEx+0x316>
    ssl->decrypt.state = CIPHER_STATE_BEGIN;
 800643e:	2300      	movs	r3, #0
 8006440:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    ret = VERIFY_MAC_ERROR;
 8006444:	f46f 7698 	mvn.w	r6, #304	; 0x130
                    SendAlert(ssl, alert_fatal, bad_record_mac);
 8006448:	2214      	movs	r2, #20
 800644a:	2102      	movs	r1, #2
 800644c:	4620      	mov	r0, r4
 800644e:	f7fc fd5d 	bl	8002f0c <SendAlert>
                    return ret;
 8006452:	e6fa      	b.n	800624a <ProcessReplyEx+0xfe>
            ret = wc_AesCbcDecrypt(ssl->decrypt.aes, plain, input, sz);
 8006454:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006456:	4633      	mov	r3, r6
 8006458:	462a      	mov	r2, r5
 800645a:	4629      	mov	r1, r5
 800645c:	f004 f91e 	bl	800a69c <wc_AesCbcDecrypt>
 8006460:	e7dd      	b.n	800641e <ProcessReplyEx+0x2d2>
                if (ret >= 0) {
 8006462:	2e00      	cmp	r6, #0
    ssl->decrypt.state = CIPHER_STATE_BEGIN;
 8006464:	f884 8074 	strb.w	r8, [r4, #116]	; 0x74
                if (ret >= 0) {
 8006468:	dbee      	blt.n	8006448 <ProcessReplyEx+0x2fc>
                    if (ssl->options.tls1_1 && ssl->specs.cipher_type == block)
 800646a:	f994 3271 	ldrsb.w	r3, [r4, #625]	; 0x271
 800646e:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
 8006472:	2b00      	cmp	r3, #0
 8006474:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006478:	f280 8082 	bge.w	8006580 <ProcessReplyEx+0x434>
 800647c:	2a01      	cmp	r2, #1
 800647e:	d17f      	bne.n	8006580 <ProcessReplyEx+0x434>
                        ssl->buffers.inputBuffer.idx += ssl->specs.block_size;
 8006480:	f8b4 2144 	ldrh.w	r2, [r4, #324]	; 0x144
 8006484:	4413      	add	r3, r2
                        ssl->buffers.inputBuffer.idx += AESGCM_EXP_IV_SZ;
 8006486:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            ssl->options.processReply = verifyMessage;
 800648a:	2306      	movs	r3, #6
 800648c:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
            if (IsEncryptionOn(ssl, 0) && ssl->keys.decryptedCur == 0 &&
 8006490:	2100      	movs	r1, #0
 8006492:	4620      	mov	r0, r4
 8006494:	f7fa fa8b 	bl	80009ae <IsEncryptionOn>
 8006498:	2800      	cmp	r0, #0
 800649a:	d04c      	beq.n	8006536 <ProcessReplyEx+0x3ea>
 800649c:	f894 3269 	ldrb.w	r3, [r4, #617]	; 0x269
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d148      	bne.n	8006536 <ProcessReplyEx+0x3ea>
                                        (!IsAtLeastTLSv1_3(ssl->version) ||
 80064a4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80064a8:	f7fa fa71 	bl	800098e <IsAtLeastTLSv1_3>
                                         ssl->curRL.type != change_cipher_spec))
 80064ac:	f894 7133 	ldrb.w	r7, [r4, #307]	; 0x133
            if (IsEncryptionOn(ssl, 0) && ssl->keys.decryptedCur == 0 &&
 80064b0:	b108      	cbz	r0, 80064b6 <ProcessReplyEx+0x36a>
                                        (!IsAtLeastTLSv1_3(ssl->version) ||
 80064b2:	2f14      	cmp	r7, #20
 80064b4:	d03f      	beq.n	8006536 <ProcessReplyEx+0x3ea>
    if (ssl->specs.cipher_type == block) {
 80064b6:	f894 b149 	ldrb.w	fp, [r4, #329]	; 0x149
                    ret = VerifyMac(ssl, ssl->buffers.inputBuffer.buffer +
 80064ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80064be:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    word32 digestSz = ssl->specs.hash_size;
 80064c2:	f894 914d 	ldrb.w	r9, [r4, #333]	; 0x14d
    if (ssl->specs.cipher_type == block) {
 80064c6:	f1bb 0f01 	cmp.w	fp, #1
                    ret = VerifyMac(ssl, ssl->buffers.inputBuffer.buffer +
 80064ca:	441e      	add	r6, r3
 80064cc:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
    if (ssl->specs.cipher_type == block) {
 80064d0:	f040 809a 	bne.w	8006608 <ProcessReplyEx+0x4bc>
        if (ssl->options.tls1_1)
 80064d4:	f994 2271 	ldrsb.w	r2, [r4, #625]	; 0x271
 80064d8:	f894 1271 	ldrb.w	r1, [r4, #625]	; 0x271
 80064dc:	2a00      	cmp	r2, #0
            ivExtra = ssl->specs.block_size;
 80064de:	bfb4      	ite	lt
 80064e0:	f8b4 2144 	ldrhlt.w	r2, [r4, #324]	; 0x144
        int ivExtra = 0;
 80064e4:	2200      	movge	r2, #0
        pad = *(input + msgSz - ivExtra - 1);
 80064e6:	1a9a      	subs	r2, r3, r2
 80064e8:	18b0      	adds	r0, r6, r2
        if (ssl->options.tls) {
 80064ea:	f011 0140 	ands.w	r1, r1, #64	; 0x40
        pad = *(input + msgSz - ivExtra - 1);
 80064ee:	f810 5c01 	ldrb.w	r5, [r0, #-1]
        if (ssl->options.tls) {
 80064f2:	d050      	beq.n	8006596 <ProcessReplyEx+0x44a>
            ret = TimingPadVerify(ssl, input, pad, digestSz, msgSz - ivExtra,
 80064f4:	e9cd 2700 	strd	r2, r7, [sp]
 80064f8:	4631      	mov	r1, r6
 80064fa:	464b      	mov	r3, r9
 80064fc:	462a      	mov	r2, r5
 80064fe:	4620      	mov	r0, r4
 8006500:	f7fb fcee 	bl	8001ee0 <TimingPadVerify>
            if (ret != 0)
 8006504:	1e06      	subs	r6, r0, #0
 8006506:	f040 80a8 	bne.w	800665a <ProcessReplyEx+0x50e>
        padByte = 1;
 800650a:	2301      	movs	r3, #1
    if (ssl->specs.cipher_type == aead) {
 800650c:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
 8006510:	2a02      	cmp	r2, #2
        *padSz = digestSz + pad + padByte;
 8006512:	bf13      	iteet	ne
 8006514:	18ed      	addne	r5, r5, r3
        *padSz = ssl->specs.aead_mac_size;
 8006516:	f8b4 3146 	ldrheq.w	r3, [r4, #326]	; 0x146
 800651a:	f8c4 3264 	streq.w	r3, [r4, #612]	; 0x264
        *padSz = digestSz + pad + padByte;
 800651e:	444d      	addne	r5, r9
 8006520:	bf18      	it	ne
 8006522:	f8c4 5264 	strne.w	r5, [r4, #612]	; 0x264
    return 0;
 8006526:	2600      	movs	r6, #0
                ssl->keys.encryptSz    = ssl->curSize;
 8006528:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 800652c:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
                ssl->keys.decryptedCur = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	f884 3269 	strb.w	r3, [r4, #617]	; 0x269
            ssl->options.processReply = runProcessingOneMessage;
 8006536:	2308      	movs	r3, #8
 8006538:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
                    >= ssl->buffers.inputBuffer.length) {
 800653c:	e9d4 7521 	ldrd	r7, r5, [r4, #132]	; 0x84
            if (ssl->buffers.inputBuffer.idx
 8006540:	42bd      	cmp	r5, r7
 8006542:	f080 8237 	bcs.w	80069b4 <ProcessReplyEx+0x868>
            if (!IsAtLeastTLSv1_3(ssl->version)
 8006546:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800654a:	f7fa fa20 	bl	800098e <IsAtLeastTLSv1_3>
 800654e:	9006      	str	r0, [sp, #24]
 8006550:	b950      	cbnz	r0, 8006568 <ProcessReplyEx+0x41c>
                    && ssl->curSize - ssl->keys.padSz -
 8006552:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 8006556:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	1b5b      	subs	r3, r3, r5
 800655e:	4453      	add	r3, sl
 8006560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006564:	f200 8226 	bhi.w	80069b4 <ProcessReplyEx+0x868>
            switch (ssl->curRL.type) {
 8006568:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
 800656c:	3b14      	subs	r3, #20
 800656e:	2b03      	cmp	r3, #3
 8006570:	f63f aee9 	bhi.w	8006346 <ProcessReplyEx+0x1fa>
 8006574:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006578:	019f012b 	.word	0x019f012b
 800657c:	01960074 	.word	0x01960074
    return (ssl->specs.cipher_type == aead) &&
 8006580:	2a02      	cmp	r2, #2
 8006582:	d182      	bne.n	800648a <ProcessReplyEx+0x33e>
 8006584:	f894 2148 	ldrb.w	r2, [r4, #328]	; 0x148
 8006588:	2a09      	cmp	r2, #9
 800658a:	f43f af7e 	beq.w	800648a <ProcessReplyEx+0x33e>
                        ssl->buffers.inputBuffer.idx += AESGCM_EXP_IV_SZ;
 800658e:	3308      	adds	r3, #8
 8006590:	e779      	b.n	8006486 <ProcessReplyEx+0x33a>
                        ret = DECRYPT_ERROR;
 8006592:	4e20      	ldr	r6, [pc, #128]	; (8006614 <ProcessReplyEx+0x4c8>)
 8006594:	e758      	b.n	8006448 <ProcessReplyEx+0x2fc>
            XMEMSET(dmy, 0, sizeof(dmy));
 8006596:	2201      	movs	r2, #1
 8006598:	a809      	add	r0, sp, #36	; 0x24
 800659a:	9307      	str	r3, [sp, #28]
 800659c:	9106      	str	r1, [sp, #24]
 800659e:	f017 fa29 	bl	801d9f4 <memset>
            if (pad > (msgSz - digestSz - 1)) {
 80065a2:	9b07      	ldr	r3, [sp, #28]
 80065a4:	9906      	ldr	r1, [sp, #24]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	eba3 0309 	sub.w	r3, r3, r9
 80065ac:	429d      	cmp	r5, r3
                pad       = 0;  /* no bad read */
 80065ae:	bf88      	it	hi
 80065b0:	460d      	movhi	r5, r1
            ret = ssl->hmac(ssl, verify, input, msgSz - digestSz - pad - 1,
 80065b2:	f04f 0201 	mov.w	r2, #1
 80065b6:	eba3 0305 	sub.w	r3, r3, r5
 80065ba:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80065be:	e9cd 5700 	strd	r5, r7, [sp]
            int  badPadLen = 0;
 80065c2:	bf98      	it	ls
 80065c4:	468b      	movls	fp, r1
            ret = ssl->hmac(ssl, verify, input, msgSz - digestSz - pad - 1,
 80065c6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80065c8:	9306      	str	r3, [sp, #24]
 80065ca:	4632      	mov	r2, r6
 80065cc:	a90a      	add	r1, sp, #40	; 0x28
 80065ce:	4620      	mov	r0, r4
                badPadLen = 1;
 80065d0:	bf88      	it	hi
 80065d2:	f04f 0b01 	movhi.w	fp, #1
            ret = ssl->hmac(ssl, verify, input, msgSz - digestSz - pad - 1,
 80065d6:	47b8      	blx	r7
    for (i = 0; i < length; i++) {
 80065d8:	9b06      	ldr	r3, [sp, #24]
    int compareSum = 0;
 80065da:	2100      	movs	r1, #0
 80065dc:	aa0a      	add	r2, sp, #40	; 0x28
 80065de:	4433      	add	r3, r6
    for (i = 0; i < length; i++) {
 80065e0:	460f      	mov	r7, r1
 80065e2:	454f      	cmp	r7, r9
 80065e4:	db06      	blt.n	80065f4 <ProcessReplyEx+0x4a8>
            if (ConstantCompare(verify, input + msgSz - digestSz - pad - 1,
 80065e6:	ea40 000b 	orr.w	r0, r0, fp
 80065ea:	ea50 0301 	orrs.w	r3, r0, r1
 80065ee:	d08c      	beq.n	800650a <ProcessReplyEx+0x3be>
                        return DECRYPT_ERROR;
 80065f0:	4e08      	ldr	r6, [pc, #32]	; (8006614 <ProcessReplyEx+0x4c8>)
 80065f2:	e62a      	b.n	800624a <ProcessReplyEx+0xfe>
        compareSum |= a[i] ^ b[i];
 80065f4:	f812 cb01 	ldrb.w	ip, [r2], #1
 80065f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065fc:	ea8c 0c06 	eor.w	ip, ip, r6
 8006600:	ea41 010c 	orr.w	r1, r1, ip
    for (i = 0; i < length; i++) {
 8006604:	3701      	adds	r7, #1
 8006606:	e7ec      	b.n	80065e2 <ProcessReplyEx+0x496>
    else if (ssl->specs.cipher_type == stream) {
 8006608:	f1bb 0f00 	cmp.w	fp, #0
 800660c:	d004      	beq.n	8006618 <ProcessReplyEx+0x4cc>
    word32 padByte = 0;
 800660e:	2300      	movs	r3, #0
    word32 pad     = 0;
 8006610:	461d      	mov	r5, r3
 8006612:	e77b      	b.n	800650c <ProcessReplyEx+0x3c0>
 8006614:	fffffec8 	.word	0xfffffec8
        ret = ssl->hmac(ssl, verify, input, msgSz - digestSz, -1, content, 1,
 8006618:	2201      	movs	r2, #1
 800661a:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800661e:	eba3 0509 	sub.w	r5, r3, r9
 8006622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006626:	9701      	str	r7, [sp, #4]
 8006628:	9200      	str	r2, [sp, #0]
 800662a:	462b      	mov	r3, r5
 800662c:	4632      	mov	r2, r6
 800662e:	a90a      	add	r1, sp, #40	; 0x28
 8006630:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8006632:	4620      	mov	r0, r4
 8006634:	47b8      	blx	r7
 8006636:	aa0a      	add	r2, sp, #40	; 0x28
 8006638:	1973      	adds	r3, r6, r5
 800663a:	4659      	mov	r1, fp
 800663c:	4589      	cmp	r9, r1
 800663e:	dc03      	bgt.n	8006648 <ProcessReplyEx+0x4fc>
        if (ConstantCompare(verify, input + msgSz - digestSz, digestSz) != 0) {
 8006640:	ea50 030b 	orrs.w	r3, r0, fp
 8006644:	d0e3      	beq.n	800660e <ProcessReplyEx+0x4c2>
 8006646:	e7d3      	b.n	80065f0 <ProcessReplyEx+0x4a4>
        compareSum |= a[i] ^ b[i];
 8006648:	f812 5b01 	ldrb.w	r5, [r2], #1
 800664c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006650:	4075      	eors	r5, r6
 8006652:	ea4b 0b05 	orr.w	fp, fp, r5
    for (i = 0; i < length; i++) {
 8006656:	3101      	adds	r1, #1
 8006658:	e7f0      	b.n	800663c <ProcessReplyEx+0x4f0>
                    if (ret < 0) {
 800665a:	f6bf af65 	bge.w	8006528 <ProcessReplyEx+0x3dc>
 800665e:	e7c7      	b.n	80065f0 <ProcessReplyEx+0x4a4>
                    if (ssl->options.dtls) {
 8006660:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8006664:	0758      	lsls	r0, r3, #29
 8006666:	d422      	bmi.n	80066ae <ProcessReplyEx+0x562>
                    else if (!IsAtLeastTLSv1_3(ssl->version)
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 80ad 	bne.w	80067ca <ProcessReplyEx+0x67e>
                        ret = DoHandShakeMsg(ssl,
 8006670:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    if (ssl->arrays == NULL) {
 8006674:	68a3      	ldr	r3, [r4, #8]
                        ret = DoHandShakeMsg(ssl,
 8006676:	f104 0b88 	add.w	fp, r4, #136	; 0x88
    const byte *ptr = input + *inOutIdx;
 800667a:	1970      	adds	r0, r6, r5
    if (ssl->arrays == NULL) {
 800667c:	b9d3      	cbnz	r3, 80066b4 <ProcessReplyEx+0x568>
    *inOutIdx += HANDSHAKE_HEADER_SZ;
 800667e:	1d2b      	adds	r3, r5, #4
    if (*inOutIdx > totalSz)
 8006680:	429f      	cmp	r7, r3
    *inOutIdx += HANDSHAKE_HEADER_SZ;
 8006682:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    if (*inOutIdx > totalSz)
 8006686:	d32b      	bcc.n	80066e0 <ProcessReplyEx+0x594>
    c24to32(&ptr[1], size);
 8006688:	a90a      	add	r1, sp, #40	; 0x28
 800668a:	3001      	adds	r0, #1
    *type = ptr[0];
 800668c:	5d75      	ldrb	r5, [r6, r5]
    c24to32(&ptr[1], size);
 800668e:	f7f9 fdc5 	bl	800021c <c24to32>
        if (size > MAX_HANDSHAKE_SZ) {
 8006692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006694:	f644 031e 	movw	r3, #18462	; 0x481e
 8006698:	429a      	cmp	r2, r3
 800669a:	d81f      	bhi.n	80066dc <ProcessReplyEx+0x590>
        return DoHandShakeMsgType(ssl, input, inOutIdx, type, size, totalSz);
 800669c:	e9cd 2700 	strd	r2, r7, [sp]
        ret = DoHandShakeMsgType(ssl, input, inOutIdx, type, size, totalSz);
 80066a0:	4631      	mov	r1, r6
 80066a2:	462b      	mov	r3, r5
 80066a4:	465a      	mov	r2, fp
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7fe fe9c 	bl	80053e4 <DoHandShakeMsgType>
 80066ac:	4606      	mov	r6, r0
                    if (ret != 0
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d040      	beq.n	8006734 <ProcessReplyEx+0x5e8>
 80066b2:	e016      	b.n	80066e2 <ProcessReplyEx+0x596>
    if (ssl->arrays->pendingMsgSz == 0) {
 80066b4:	68d9      	ldr	r1, [r3, #12]
    inputLength = ssl->buffers.inputBuffer.length - *inOutIdx;
 80066b6:	eba7 0905 	sub.w	r9, r7, r5
    if (ssl->arrays->pendingMsgSz == 0) {
 80066ba:	2900      	cmp	r1, #0
 80066bc:	d155      	bne.n	800676a <ProcessReplyEx+0x61e>
    *inOutIdx += HANDSHAKE_HEADER_SZ;
 80066be:	1d2b      	adds	r3, r5, #4
    if (*inOutIdx > totalSz)
 80066c0:	429f      	cmp	r7, r3
    *inOutIdx += HANDSHAKE_HEADER_SZ;
 80066c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    if (*inOutIdx > totalSz)
 80066c6:	d30b      	bcc.n	80066e0 <ProcessReplyEx+0x594>
    c24to32(&ptr[1], size);
 80066c8:	3001      	adds	r0, #1
 80066ca:	a90a      	add	r1, sp, #40	; 0x28
    *type = ptr[0];
 80066cc:	5d75      	ldrb	r5, [r6, r5]
    c24to32(&ptr[1], size);
 80066ce:	f7f9 fda5 	bl	800021c <c24to32>
        if (size > MAX_HANDSHAKE_SZ) {
 80066d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066d4:	f644 031e 	movw	r3, #18462	; 0x481e
 80066d8:	4298      	cmp	r0, r3
 80066da:	d90c      	bls.n	80066f6 <ProcessReplyEx+0x5aa>
            return HANDSHAKE_SIZE_ERROR;
 80066dc:	4eb9      	ldr	r6, [pc, #740]	; (80069c4 <ProcessReplyEx+0x878>)
 80066de:	e000      	b.n	80066e2 <ProcessReplyEx+0x596>
            return PARSE_ERROR;
 80066e0:	4eb9      	ldr	r6, [pc, #740]	; (80069c8 <ProcessReplyEx+0x87c>)
                        && (!ssl->options.dtls
 80066e2:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80066e6:	0759      	lsls	r1, r3, #29
 80066e8:	f57f adaf 	bpl.w	800624a <ProcessReplyEx+0xfe>
                            || ret != WANT_WRITE)
 80066ec:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 80066f0:	429e      	cmp	r6, r3
 80066f2:	d020      	beq.n	8006736 <ProcessReplyEx+0x5ea>
 80066f4:	e5a9      	b.n	800624a <ProcessReplyEx+0xfe>
        if (inputLength - HANDSHAKE_HEADER_SZ < size) {
 80066f6:	f1a9 0304 	sub.w	r3, r9, #4
 80066fa:	4298      	cmp	r0, r3
 80066fc:	d92f      	bls.n	800675e <ProcessReplyEx+0x612>
            ssl->arrays->pendingMsgType = type;
 80066fe:	68a7      	ldr	r7, [r4, #8]
            ssl->arrays->pendingMsgSz = size + HANDSHAKE_HEADER_SZ;
 8006700:	3004      	adds	r0, #4
            ssl->arrays->pendingMsgType = type;
 8006702:	f887 50a5 	strb.w	r5, [r7, #165]	; 0xa5
            ssl->arrays->pendingMsgSz = size + HANDSHAKE_HEADER_SZ;
 8006706:	60f8      	str	r0, [r7, #12]
            ssl->arrays->pendingMsg = (byte*)XMALLOC(size + HANDSHAKE_HEADER_SZ,
 8006708:	f017 f92c 	bl	801d964 <malloc>
            if (ssl->arrays->pendingMsg == NULL)
 800670c:	68a3      	ldr	r3, [r4, #8]
            ssl->arrays->pendingMsg = (byte*)XMALLOC(size + HANDSHAKE_HEADER_SZ,
 800670e:	6038      	str	r0, [r7, #0]
            if (ssl->arrays->pendingMsg == NULL)
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	b338      	cbz	r0, 8006764 <ProcessReplyEx+0x618>
            XMEMCPY(ssl->arrays->pendingMsg,
 8006714:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8006718:	3904      	subs	r1, #4
 800671a:	464a      	mov	r2, r9
 800671c:	4431      	add	r1, r6
 800671e:	f017 f941 	bl	801d9a4 <memcpy>
            ssl->arrays->pendingMsgOffset = inputLength;
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	f8c3 9010 	str.w	r9, [r3, #16]
            *inOutIdx += inputLength - HANDSHAKE_HEADER_SZ;
 8006728:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800672c:	3d04      	subs	r5, #4
 800672e:	444d      	add	r5, r9
 8006730:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    int    ret = 0;
 8006734:	2600      	movs	r6, #0
            if (ssl->buffers.inputBuffer.idx >= ssl->buffers.inputBuffer.length
 8006736:	e9d4 3221 	ldrd	r3, r2, [r4, #132]	; 0x84
 800673a:	429a      	cmp	r2, r3
            ssl->options.processReply = doProcessInit;
 800673c:	f884 8277 	strb.w	r8, [r4, #631]	; 0x277
            if (ssl->buffers.inputBuffer.idx >= ssl->buffers.inputBuffer.length
 8006740:	f0c0 810f 	bcc.w	8006962 <ProcessReplyEx+0x816>
                if ((ret == 0) && ssl->buffers.inputBuffer.dynamicFlag)
 8006744:	2e00      	cmp	r6, #0
 8006746:	f47f ad80 	bne.w	800624a <ProcessReplyEx+0xfe>
 800674a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800674e:	2b00      	cmp	r3, #0
 8006750:	f43f ad7b 	beq.w	800624a <ProcessReplyEx+0xfe>
                    ShrinkInputBuffer(ssl, NO_FORCED_FREE);
 8006754:	4631      	mov	r1, r6
 8006756:	4620      	mov	r0, r4
 8006758:	f7fa ffb7 	bl	80016ca <ShrinkInputBuffer>
 800675c:	e575      	b.n	800624a <ProcessReplyEx+0xfe>
        ret = DoHandShakeMsgType(ssl, input, inOutIdx, type, size, totalSz);
 800675e:	e9cd 0700 	strd	r0, r7, [sp]
 8006762:	e79d      	b.n	80066a0 <ProcessReplyEx+0x554>
                return MEMORY_E;
 8006764:	f06f 067c 	mvn.w	r6, #124	; 0x7c
 8006768:	e7bb      	b.n	80066e2 <ProcessReplyEx+0x596>
            ssl->arrays->pendingMsgSz - ssl->arrays->pendingMsgOffset;
 800676a:	691e      	ldr	r6, [r3, #16]
            XMEMCPY(ssl->arrays->pendingMsg + ssl->arrays->pendingMsgOffset,
 800676c:	681b      	ldr	r3, [r3, #0]
        word32 pendSz =
 800676e:	1b8d      	subs	r5, r1, r6
 8006770:	454d      	cmp	r5, r9
 8006772:	bf28      	it	cs
 8006774:	464d      	movcs	r5, r9
            XMEMCPY(ssl->arrays->pendingMsg + ssl->arrays->pendingMsgOffset,
 8006776:	4601      	mov	r1, r0
 8006778:	462a      	mov	r2, r5
 800677a:	1998      	adds	r0, r3, r6
 800677c:	f017 f912 	bl	801d9a4 <memcpy>
        ssl->arrays->pendingMsgOffset += inputLength;
 8006780:	68a1      	ldr	r1, [r4, #8]
 8006782:	690b      	ldr	r3, [r1, #16]
 8006784:	442b      	add	r3, r5
 8006786:	610b      	str	r3, [r1, #16]
        *inOutIdx += inputLength;
 8006788:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800678c:	442a      	add	r2, r5
 800678e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (ssl->arrays->pendingMsgOffset == ssl->arrays->pendingMsgSz)
 8006792:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d1cc      	bne.n	8006734 <ProcessReplyEx+0x5e8>
            word32 idx = HANDSHAKE_HEADER_SZ;
 800679a:	2304      	movs	r3, #4
 800679c:	930a      	str	r3, [sp, #40]	; 0x28
            ret = DoHandShakeMsgType(ssl,
 800679e:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	3a04      	subs	r2, #4
 80067a6:	9200      	str	r2, [sp, #0]
 80067a8:	6809      	ldr	r1, [r1, #0]
 80067aa:	aa0a      	add	r2, sp, #40	; 0x28
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7fe fe19 	bl	80053e4 <DoHandShakeMsgType>
                XFREE(ssl->arrays->pendingMsg, ssl->heap, DYNAMIC_TYPE_ARRAYS);
 80067b2:	68a3      	ldr	r3, [r4, #8]
            ret = DoHandShakeMsgType(ssl,
 80067b4:	4606      	mov	r6, r0
                XFREE(ssl->arrays->pendingMsg, ssl->heap, DYNAMIC_TYPE_ARRAYS);
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	b108      	cbz	r0, 80067be <ProcessReplyEx+0x672>
 80067ba:	f017 f8db 	bl	801d974 <free>
                ssl->arrays->pendingMsg = NULL;
 80067be:	68a3      	ldr	r3, [r4, #8]
 80067c0:	f8c3 8000 	str.w	r8, [r3]
                ssl->arrays->pendingMsgSz = 0;
 80067c4:	f8c3 800c 	str.w	r8, [r3, #12]
 80067c8:	e771      	b.n	80066ae <ProcessReplyEx+0x562>
                        ret = BUFFER_ERROR;
 80067ca:	4e80      	ldr	r6, [pc, #512]	; (80069cc <ProcessReplyEx+0x880>)
 80067cc:	e789      	b.n	80066e2 <ProcessReplyEx+0x596>
                            ssl->curSize < 1) {
 80067ce:	f8b4 2130 	ldrh.w	r2, [r4, #304]	; 0x130
                            ssl->buffers.inputBuffer.length ||
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	f43f ad37 	beq.w	8006246 <ProcessReplyEx+0xfa>
                    if (ssl->buffers.inputBuffer.buffer[
 80067d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80067dc:	5d5b      	ldrb	r3, [r3, r5]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	f47f ad31 	bne.w	8006246 <ProcessReplyEx+0xfa>
                    if (IsEncryptionOn(ssl, 0) && ssl->options.handShakeDone) {
 80067e4:	2100      	movs	r1, #0
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7fa f8e1 	bl	80009ae <IsEncryptionOn>
 80067ec:	b1b8      	cbz	r0, 800681e <ProcessReplyEx+0x6d2>
 80067ee:	f894 327f 	ldrb.w	r3, [r4, #639]	; 0x27f
 80067f2:	b1a3      	cbz	r3, 800681e <ProcessReplyEx+0x6d2>
                        if (ssl->specs.cipher_type == aead) {
 80067f4:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d147      	bne.n	800688c <ProcessReplyEx+0x740>
                            if (ssl->specs.bulk_cipher_algorithm != wolfssl_chacha)
 80067fc:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 8006800:	2b09      	cmp	r3, #9
                                ssl->curSize -= AESGCM_EXP_IV_SZ;
 8006802:	bf1c      	itt	ne
 8006804:	3a08      	subne	r2, #8
 8006806:	f8a4 2130 	strhne.w	r2, [r4, #304]	; 0x130
                            ssl->curSize -= ssl->specs.aead_mac_size;
 800680a:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
                            ssl->buffers.inputBuffer.idx += ssl->specs.aead_mac_size;
 800680e:	f8b4 2146 	ldrh.w	r2, [r4, #326]	; 0x146
 8006812:	4415      	add	r5, r2
                            ssl->curSize -= ssl->specs.aead_mac_size;
 8006814:	1a9b      	subs	r3, r3, r2
                            ssl->buffers.inputBuffer.idx += ssl->specs.aead_mac_size;
 8006816:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
                            ssl->curSize -= ssl->specs.aead_mac_size;
 800681a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
                    if (ssl->curSize != 1) {
 800681e:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 8006822:	2b01      	cmp	r3, #1
 8006824:	f47f ad0f 	bne.w	8006246 <ProcessReplyEx+0xfa>
                    ssl->buffers.inputBuffer.idx++;
 8006828:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800682c:	3301      	adds	r3, #1
 800682e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
                    ret = SanityCheckMsgReceived(ssl, change_cipher_hs);
 8006832:	2137      	movs	r1, #55	; 0x37
 8006834:	4620      	mov	r0, r4
 8006836:	f7f9 fd6b 	bl	8000310 <SanityCheckMsgReceived>
                    if (ret != 0) {
 800683a:	4606      	mov	r6, r0
 800683c:	b120      	cbz	r0, 8006848 <ProcessReplyEx+0x6fc>
                        if (!ssl->options.dtls) {
 800683e:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8006842:	075a      	lsls	r2, r3, #29
 8006844:	f57f ad01 	bpl.w	800624a <ProcessReplyEx+0xfe>
                    ssl->keys.encryptionOn = 1;
 8006848:	2301      	movs	r3, #1
 800684a:	f884 3268 	strb.w	r3, [r4, #616]	; 0x268
                    if ((ret = SetKeysSide(ssl, DECRYPT_SIDE_ONLY)) != 0)
 800684e:	2102      	movs	r1, #2
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fa6d 	bl	8006d30 <SetKeysSide>
 8006856:	4606      	mov	r6, r0
 8006858:	2800      	cmp	r0, #0
 800685a:	f47f acf6 	bne.w	800624a <ProcessReplyEx+0xfe>
                                       ssl->options.side == WOLFSSL_CLIENT_END ?
 800685e:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
                    ret = BuildFinished(ssl, &ssl->hsHashes->verifyHashes,
 8006862:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <ProcessReplyEx+0x884>)
 8006864:	495b      	ldr	r1, [pc, #364]	; (80069d4 <ProcessReplyEx+0x888>)
 8006866:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800686a:	2b10      	cmp	r3, #16
 800686c:	bf18      	it	ne
 800686e:	460a      	movne	r2, r1
    if (ssl->options.tls) {
 8006870:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8006874:	065b      	lsls	r3, r3, #25
 8006876:	f57f af5d 	bpl.w	8006734 <ProcessReplyEx+0x5e8>
        ret = BuildTlsFinished(ssl, hashes, sender);
 800687a:	68e1      	ldr	r1, [r4, #12]
 800687c:	4620      	mov	r0, r4
 800687e:	f001 fd67 	bl	8008350 <BuildTlsFinished>
                    if ((ret = DoApplicationData(ssl,
 8006882:	4606      	mov	r6, r0
 8006884:	2800      	cmp	r0, #0
 8006886:	f43f af55 	beq.w	8006734 <ProcessReplyEx+0x5e8>
 800688a:	e4de      	b.n	800624a <ProcessReplyEx+0xfe>
                            ssl->curSize -= ssl->specs.iv_size;
 800688c:	f8b4 1142 	ldrh.w	r1, [r4, #322]	; 0x142
                            ssl->buffers.inputBuffer.idx += ssl->keys.padSz;
 8006890:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
                            ssl->curSize -= ssl->specs.iv_size;
 8006894:	1a52      	subs	r2, r2, r1
                            ssl->buffers.inputBuffer.idx += ssl->keys.padSz;
 8006896:	441d      	add	r5, r3
                            ssl->curSize -= ssl->specs.iv_size;
 8006898:	1ad2      	subs	r2, r2, r3
                            ssl->buffers.inputBuffer.idx += ssl->keys.padSz;
 800689a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
                            ssl->curSize -= ssl->specs.iv_size;
 800689e:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
 80068a2:	e7bc      	b.n	800681e <ProcessReplyEx+0x6d2>
                    if ((ret = DoApplicationData(ssl,
 80068a4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80068a8:	2300      	movs	r3, #0
 80068aa:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7fc fef2 	bl	8003698 <DoApplicationData>
 80068b4:	e7e5      	b.n	8006882 <ProcessReplyEx+0x736>
    if (IsEncryptionOn(ssl, 0)) {
 80068b6:	2100      	movs	r1, #0
 80068b8:	4620      	mov	r0, r4
                    ret = DoAlert(ssl, ssl->buffers.inputBuffer.buffer,
 80068ba:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    word32 dataSz = (word32)ssl->curSize;
 80068be:	f8b4 2130 	ldrh.w	r2, [r4, #304]	; 0x130
    if (IsEncryptionOn(ssl, 0)) {
 80068c2:	f7fa f874 	bl	80009ae <IsEncryptionOn>
 80068c6:	b168      	cbz	r0, 80068e4 <ProcessReplyEx+0x798>
        if (ssl->specs.cipher_type == block) {
 80068c8:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d13b      	bne.n	8006948 <ProcessReplyEx+0x7fc>
            if (ssl->options.tls1_1)
 80068d0:	f994 3271 	ldrsb.w	r3, [r4, #625]	; 0x271
 80068d4:	428b      	cmp	r3, r1
 80068d6:	da01      	bge.n	80068dc <ProcessReplyEx+0x790>
                ivExtra = ssl->specs.block_size;
 80068d8:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
        dataSz -= ssl->keys.padSz;
 80068dc:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 80068e0:	1ad2      	subs	r2, r2, r3
 80068e2:	1a52      	subs	r2, r2, r1
    if (dataSz != ALERT_SIZE) {
 80068e4:	2a02      	cmp	r2, #2
 80068e6:	d167      	bne.n	80069b8 <ProcessReplyEx+0x86c>
    level = input[(*inOutIdx)++];
 80068e8:	1c6b      	adds	r3, r5, #1
 80068ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80068ee:	5d72      	ldrb	r2, [r6, r5]
    code  = input[(*inOutIdx)++];
 80068f0:	3502      	adds	r5, #2
    if (level == alert_fatal) {
 80068f2:	2a02      	cmp	r2, #2
    code  = input[(*inOutIdx)++];
 80068f4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    ssl->alert_history.last_rx.code = code;
 80068f8:	5cf6      	ldrb	r6, [r6, r3]
        ssl->options.isClosed = 1;  /* Don't send close_notify */
 80068fa:	bf02      	ittt	eq
 80068fc:	f894 3272 	ldrbeq.w	r3, [r4, #626]	; 0x272
 8006900:	f043 0310 	orreq.w	r3, r3, #16
 8006904:	f884 3272 	strbeq.w	r3, [r4, #626]	; 0x272
    if (++ssl->options.alertCount >= WOLFSSL_ALERT_COUNT_MAX) {
 8006908:	f894 3285 	ldrb.w	r3, [r4, #645]	; 0x285
 800690c:	3301      	adds	r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b04      	cmp	r3, #4
    ssl->alert_history.last_rx.level = level;
 8006912:	e9c4 623f 	strd	r6, r2, [r4, #252]	; 0xfc
    if (++ssl->options.alertCount >= WOLFSSL_ALERT_COUNT_MAX) {
 8006916:	f884 3285 	strb.w	r3, [r4, #645]	; 0x285
 800691a:	d850      	bhi.n	80069be <ProcessReplyEx+0x872>
    if (*type == close_notify) {
 800691c:	b92e      	cbnz	r6, 800692a <ProcessReplyEx+0x7de>
        ssl->options.closeNotify = 1;
 800691e:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8006922:	f043 0320 	orr.w	r3, r3, #32
 8006926:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
    if (IsEncryptionOn(ssl, 0)) {
 800692a:	2100      	movs	r1, #0
 800692c:	4620      	mov	r0, r4
 800692e:	f7fa f83e 	bl	80009ae <IsEncryptionOn>
 8006932:	b120      	cbz	r0, 800693e <ProcessReplyEx+0x7f2>
        *inOutIdx += ssl->keys.padSz;
 8006934:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8006938:	441d      	add	r5, r3
 800693a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
                    if (ret == alert_fatal)
 800693e:	2a02      	cmp	r2, #2
 8006940:	d153      	bne.n	80069ea <ProcessReplyEx+0x89e>
                        return FATAL_ERROR;
 8006942:	f46f 769c 	mvn.w	r6, #312	; 0x138
 8006946:	e480      	b.n	800624a <ProcessReplyEx+0xfe>
        if (ssl->specs.cipher_type == aead) {
 8006948:	2b02      	cmp	r3, #2
 800694a:	d1c7      	bne.n	80068dc <ProcessReplyEx+0x790>
    return (ssl->specs.cipher_type == aead) &&
 800694c:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
                ivExtra = AESGCM_EXP_IV_SZ;
 8006950:	2b09      	cmp	r3, #9
 8006952:	bf0c      	ite	eq
 8006954:	2100      	moveq	r1, #0
 8006956:	2108      	movne	r1, #8
 8006958:	e7c0      	b.n	80068dc <ProcessReplyEx+0x790>
                    if (type == decrypt_error)
 800695a:	2e33      	cmp	r6, #51	; 0x33
 800695c:	f47f aeea 	bne.w	8006734 <ProcessReplyEx+0x5e8>
 8006960:	e7ef      	b.n	8006942 <ProcessReplyEx+0x7f6>
            else if ((ssl->buffers.inputBuffer.idx - startIdx) < ssl->curSize) {
 8006962:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
 8006966:	eba2 030a 	sub.w	r3, r2, sl
 800696a:	428b      	cmp	r3, r1
 800696c:	d20e      	bcs.n	800698c <ProcessReplyEx+0x840>
                ssl->options.processReply = runProcessingOneMessage;
 800696e:	2308      	movs	r3, #8
 8006970:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
                if (IsEncryptionOn(ssl, 0)) {
 8006974:	2100      	movs	r1, #0
 8006976:	4620      	mov	r0, r4
 8006978:	f7fa f819 	bl	80009ae <IsEncryptionOn>
 800697c:	b130      	cbz	r0, 800698c <ProcessReplyEx+0x840>
                        if (ssl->buffers.inputBuffer.idx >= ssl->keys.padSz) {
 800697e:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8006982:	429a      	cmp	r2, r3
 8006984:	d3dd      	bcc.n	8006942 <ProcessReplyEx+0x7f6>
                            ssl->buffers.inputBuffer.idx -= ssl->keys.padSz;
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
            if (ret == 0 && ssl->buffers.inputBuffer.dynamicFlag)
 800698c:	2e00      	cmp	r6, #0
 800698e:	f47f abf7 	bne.w	8006180 <ProcessReplyEx+0x34>
 8006992:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006996:	2b00      	cmp	r3, #0
 8006998:	f43f abf2 	beq.w	8006180 <ProcessReplyEx+0x34>
                ShrinkInputBuffer(ssl, NO_FORCED_FREE);
 800699c:	4631      	mov	r1, r6
 800699e:	4620      	mov	r0, r4
 80069a0:	f7fa fe93 	bl	80016ca <ShrinkInputBuffer>
 80069a4:	f7ff bbec 	b.w	8006180 <ProcessReplyEx+0x34>
        switch (ssl->options.processReply) {
 80069a8:	f46f 7696 	mvn.w	r6, #300	; 0x12c
 80069ac:	e44d      	b.n	800624a <ProcessReplyEx+0xfe>
            return SANITY_CIPHER_E;
 80069ae:	f46f 76bb 	mvn.w	r6, #374	; 0x176
 80069b2:	e44a      	b.n	800624a <ProcessReplyEx+0xfe>
                return BUFFER_ERROR;
 80069b4:	4e05      	ldr	r6, [pc, #20]	; (80069cc <ProcessReplyEx+0x880>)
 80069b6:	e448      	b.n	800624a <ProcessReplyEx+0xfe>
        return BUFFER_E;
 80069b8:	f06f 0683 	mvn.w	r6, #131	; 0x83
 80069bc:	e445      	b.n	800624a <ProcessReplyEx+0xfe>
        return ALERT_COUNT_E;
 80069be:	f46f 76d5 	mvn.w	r6, #426	; 0x1aa
 80069c2:	e442      	b.n	800624a <ProcessReplyEx+0xfe>
 80069c4:	fffffe6c 	.word	0xfffffe6c
 80069c8:	fffffece 	.word	0xfffffece
 80069cc:	fffffeb8 	.word	0xfffffeb8
 80069d0:	0801fd62 	.word	0x0801fd62
 80069d4:	0801fd58 	.word	0x0801fd58
                    if (ssl->options.side == WOLFSSL_CLIENT_END)
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d104      	bne.n	80069e6 <ProcessReplyEx+0x89a>
                        SendAlert(ssl, alert_fatal,
 80069dc:	2246      	movs	r2, #70	; 0x46
 80069de:	2102      	movs	r1, #2
 80069e0:	4620      	mov	r0, r4
 80069e2:	f7fc fa93 	bl	8002f0c <SendAlert>
 80069e6:	4e06      	ldr	r6, [pc, #24]	; (8006a00 <ProcessReplyEx+0x8b4>)
 80069e8:	e42f      	b.n	800624a <ProcessReplyEx+0xfe>
                    if (type == close_notify) {
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	d1b5      	bne.n	800695a <ProcessReplyEx+0x80e>
                        ssl->options.processReply = doProcessInit;
 80069ee:	f884 6277 	strb.w	r6, [r4, #631]	; 0x277
                        return ssl->error = ZERO_RETURN;
 80069f2:	f46f 76ab 	mvn.w	r6, #342	; 0x156
                        ssl->buffers.inputBuffer.idx =
 80069f6:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
                        return ssl->error = ZERO_RETURN;
 80069fa:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
 80069fe:	e424      	b.n	800624a <ProcessReplyEx+0xfe>
 8006a00:	fffffeba 	.word	0xfffffeba

08006a04 <ProcessReply>:
    return ProcessReplyEx(ssl, 0);
 8006a04:	2100      	movs	r1, #0
 8006a06:	f7ff bba1 	b.w	800614c <ProcessReplyEx>

08006a0a <ReceiveData>:
{
 8006a0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0e:	461f      	mov	r7, r3
    if (ssl->error == WANT_READ || ssl->error == WOLFSSL_ERROR_WANT_READ) {
 8006a10:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
{
 8006a14:	4691      	mov	r9, r2
    if (ssl->error == WANT_READ || ssl->error == WOLFSSL_ERROR_WANT_READ) {
 8006a16:	f46f 72a1 	mvn.w	r2, #322	; 0x142
 8006a1a:	4293      	cmp	r3, r2
{
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	4688      	mov	r8, r1
    if (ssl->error == WANT_READ || ssl->error == WOLFSSL_ERROR_WANT_READ) {
 8006a20:	d001      	beq.n	8006a26 <ReceiveData+0x1c>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d102      	bne.n	8006a2c <ReceiveData+0x22>
        ssl->error = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    if (ssl->error != 0 && ssl->error != WANT_WRITE
 8006a2c:	f8d5 4114 	ldr.w	r4, [r5, #276]	; 0x114
 8006a30:	b11c      	cbz	r4, 8006a3a <ReceiveData+0x30>
 8006a32:	f46f 73a3 	mvn.w	r3, #326	; 0x146
 8006a36:	429c      	cmp	r4, r3
 8006a38:	d128      	bne.n	8006a8c <ReceiveData+0x82>
        if (ssl->options.handShakeState != HANDSHAKE_DONE)
 8006a3a:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d005      	beq.n	8006a4e <ReceiveData+0x44>
            if ( (err = wolfSSL_negotiate(ssl)) != WOLFSSL_SUCCESS) {
 8006a42:	4628      	mov	r0, r5
 8006a44:	f001 f8dc 	bl	8007c00 <wolfSSL_negotiate>
 8006a48:	2801      	cmp	r0, #1
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	d11e      	bne.n	8006a8c <ReceiveData+0x82>
    while (ssl->buffers.clearOutputBuffer.length == 0) {
 8006a4e:	f8d5 60bc 	ldr.w	r6, [r5, #188]	; 0xbc
 8006a52:	b1f6      	cbz	r6, 8006a92 <ReceiveData+0x88>
    size = min(sz, (int)ssl->buffers.clearOutputBuffer.length);
 8006a54:	45b1      	cmp	r9, r6
 8006a56:	464c      	mov	r4, r9
 8006a58:	bf28      	it	cs
 8006a5a:	4634      	movcs	r4, r6
    XMEMCPY(output, ssl->buffers.clearOutputBuffer.buffer, size);
 8006a5c:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
 8006a60:	4622      	mov	r2, r4
 8006a62:	4640      	mov	r0, r8
 8006a64:	f016 ff9e 	bl	801d9a4 <memcpy>
    if (peek == 0) {
 8006a68:	b94f      	cbnz	r7, 8006a7e <ReceiveData+0x74>
        ssl->buffers.clearOutputBuffer.length -= size;
 8006a6a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 8006a6e:	1b1b      	subs	r3, r3, r4
 8006a70:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
        ssl->buffers.clearOutputBuffer.buffer += size;
 8006a74:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8006a78:	4423      	add	r3, r4
 8006a7a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
    if (ssl->buffers.inputBuffer.dynamicFlag)
 8006a7e:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8006a82:	b11b      	cbz	r3, 8006a8c <ReceiveData+0x82>
       ShrinkInputBuffer(ssl, NO_FORCED_FREE);
 8006a84:	2100      	movs	r1, #0
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7fa fe1f 	bl	80016ca <ShrinkInputBuffer>
}
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if ( (ssl->error = ProcessReply(ssl)) < 0) {
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7ff ffb6 	bl	8006a04 <ProcessReply>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	f8c5 0114 	str.w	r0, [r5, #276]	; 0x114
 8006aa0:	dad5      	bge.n	8006a4e <ReceiveData+0x44>
            if (ssl->error == ZERO_RETURN) {
 8006aa2:	f46f 73ab 	mvn.w	r3, #342	; 0x156
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	d00b      	beq.n	8006ac2 <ReceiveData+0xb8>
            if (ssl->error == SOCKET_ERROR_E) {
 8006aaa:	f510 7f9a 	cmn.w	r0, #308	; 0x134
 8006aae:	d1ed      	bne.n	8006a8c <ReceiveData+0x82>
                if (ssl->options.connReset || ssl->options.isClosed) {
 8006ab0:	f895 3272 	ldrb.w	r3, [r5, #626]	; 0x272
 8006ab4:	f013 0f18 	tst.w	r3, #24
 8006ab8:	d0e8      	beq.n	8006a8c <ReceiveData+0x82>
                    ssl->error = SOCKET_PEER_CLOSED_E;
 8006aba:	f46f 73c6 	mvn.w	r3, #396	; 0x18c
 8006abe:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
                return 0; /* no more data coming */
 8006ac2:	4634      	mov	r4, r6
 8006ac4:	e7e2      	b.n	8006a8c <ReceiveData+0x82>

08006ac6 <SendServerHelloDone>:
    {
 8006ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (IsEncryptionOn(ssl, 1))
 8006aca:	2101      	movs	r1, #1
    {
 8006acc:	b086      	sub	sp, #24
 8006ace:	4605      	mov	r5, r0
        if (IsEncryptionOn(ssl, 1))
 8006ad0:	f7f9 ff6d 	bl	80009ae <IsEncryptionOn>
        ssl->options.buildingMsg = 1;
 8006ad4:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
            sendSz += MAX_MSG_EXTRA;
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	bf0c      	ite	eq
 8006adc:	f04f 0809 	moveq.w	r8, #9
 8006ae0:	f04f 086f 	movne.w	r8, #111	; 0x6f
        ssl->options.buildingMsg = 1;
 8006ae4:	f043 0308 	orr.w	r3, r3, #8
 8006ae8:	f885 3276 	strb.w	r3, [r5, #630]	; 0x276
        if ((ret = CheckAvailableSize(ssl, sendSz)) != 0)
 8006aec:	4641      	mov	r1, r8
 8006aee:	4628      	mov	r0, r5
 8006af0:	f7fb f848 	bl	8001b84 <CheckAvailableSize>
 8006af4:	4604      	mov	r4, r0
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d13c      	bne.n	8006b74 <SendServerHelloDone+0xae>
        output = GetOutputBuffer(ssl);
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7fa ff5c 	bl	80019b8 <GetOutputBuffer>
        AddHeaders(output, 0, server_hello_done, ssl);
 8006b00:	4621      	mov	r1, r4
 8006b02:	462b      	mov	r3, r5
 8006b04:	220e      	movs	r2, #14
 8006b06:	f7f9 fe9f 	bl	8000848 <AddHeaders>
        output = GetOutputBuffer(ssl);
 8006b0a:	4606      	mov	r6, r0
        if (IsEncryptionOn(ssl, 1)) {
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f7f9 ff4d 	bl	80009ae <IsEncryptionOn>
 8006b14:	b390      	cbz	r0, 8006b7c <SendServerHelloDone+0xb6>
            if (ssl->options.dtls) {
 8006b16:	f895 3272 	ldrb.w	r3, [r5, #626]	; 0x272
 8006b1a:	f003 0304 	and.w	r3, r3, #4
                recordHeaderSz += DTLS_RECORD_EXTRA;
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf0c      	ite	eq
 8006b22:	f04f 0904 	moveq.w	r9, #4
 8006b26:	f04f 090c 	movne.w	r9, #12
            input = (byte*)XMALLOC(inputSz, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8006b2a:	4648      	mov	r0, r9
                recordHeaderSz += DTLS_RECORD_EXTRA;
 8006b2c:	bf0c      	ite	eq
 8006b2e:	f04f 0a05 	moveq.w	sl, #5
 8006b32:	f04f 0a0d 	movne.w	sl, #13
            input = (byte*)XMALLOC(inputSz, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8006b36:	f016 ff15 	bl	801d964 <malloc>
            if (input == NULL)
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d03b      	beq.n	8006bb8 <SendServerHelloDone+0xf2>
            XMEMCPY(input, output + recordHeaderSz, inputSz);
 8006b40:	464a      	mov	r2, r9
 8006b42:	eb06 010a 	add.w	r1, r6, sl
 8006b46:	f016 ff2d 	bl	801d9a4 <memcpy>
            sendSz = BuildMessage(ssl, output, sendSz, input, inputSz,
 8006b4a:	2316      	movs	r3, #22
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b52:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006b56:	9403      	str	r4, [sp, #12]
 8006b58:	463b      	mov	r3, r7
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	f8cd 9000 	str.w	r9, [sp]
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7fb facc 	bl	8002100 <BuildMessage>
 8006b68:	4604      	mov	r4, r0
            XFREE(input, ssl->heap, DYNAMIC_TYPE_IN_BUFFER);
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f016 ff02 	bl	801d974 <free>
            if (sendSz < 0)
 8006b70:	2c00      	cmp	r4, #0
 8006b72:	da0d      	bge.n	8006b90 <SendServerHelloDone+0xca>
    }
 8006b74:	4620      	mov	r0, r4
 8006b76:	b006      	add	sp, #24
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            ret = HashOutput(ssl, output, sendSz, 0);
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	4642      	mov	r2, r8
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	f7fa fd76 	bl	8001674 <HashOutput>
            if (ret != 0)
 8006b88:	4604      	mov	r4, r0
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1f2      	bne.n	8006b74 <SendServerHelloDone+0xae>
 8006b8e:	4644      	mov	r4, r8
        ssl->buffers.outputBuffer.length += sendSz;
 8006b90:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
        ssl->options.serverState = SERVER_HELLODONE_COMPLETE;
 8006b94:	2308      	movs	r3, #8
 8006b96:	f885 327c 	strb.w	r3, [r5, #636]	; 0x27c
        ssl->options.buildingMsg = 0;
 8006b9a:	f895 3276 	ldrb.w	r3, [r5, #630]	; 0x276
        ssl->buffers.outputBuffer.length += sendSz;
 8006b9e:	4420      	add	r0, r4
        ssl->options.buildingMsg = 0;
 8006ba0:	f36f 03c3 	bfc	r3, #3, #1
        ssl->buffers.outputBuffer.length += sendSz;
 8006ba4:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
        ret = SendBuffered(ssl);
 8006ba8:	4628      	mov	r0, r5
        ssl->options.buildingMsg = 0;
 8006baa:	f885 3276 	strb.w	r3, [r5, #630]	; 0x276
    }
 8006bae:	b006      	add	sp, #24
 8006bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ret = SendBuffered(ssl);
 8006bb4:	f7fa bebc 	b.w	8001930 <SendBuffered>
                return MEMORY_E;
 8006bb8:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8006bbc:	e7da      	b.n	8006b74 <SendServerHelloDone+0xae>
	...

08006bc0 <GetCipherSpec>:
 * @param opts         [in/out] Options can be NULL
 * @return
 */
int GetCipherSpec(word16 side, byte cipherSuite0, byte cipherSuite,
                      CipherSpecs* specs, Options* opts)
{
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(HAVE_SESSION_TICKET) || !defined(NO_PSK)
    if (opts != NULL)
        havePSK = opts->havePSK;
#endif
#ifndef NO_WOLFSSL_CLIENT
    if (side == WOLFSSL_CLIENT_END) {
 8006bc2:	2801      	cmp	r0, #1
{
 8006bc4:	9d06      	ldr	r5, [sp, #24]
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	4616      	mov	r6, r2
 8006bca:	461c      	mov	r4, r3
    if (side == WOLFSSL_CLIENT_END) {
 8006bcc:	d003      	beq.n	8006bd6 <GetCipherSpec+0x16>
        }
    }
#endif /* NO_WOLFSSL_CLIENT */

    /* Chacha extensions, 0xcc */
    if (cipherSuite0 == CHACHA_BYTE) {
 8006bce:	2fcc      	cmp	r7, #204	; 0xcc
 8006bd0:	d107      	bne.n	8006be2 <GetCipherSpec+0x22>
    }

    /* ECC extensions, AES-CCM or TLS 1.3 Integrity-only */
    if (cipherSuite0 == ECC_BYTE) {

    switch (cipherSuite) {
 8006bd2:	483a      	ldr	r0, [pc, #232]	; (8006cbc <GetCipherSpec+0xfc>)
        /* CLIENT/SERVER: No peer authentication to be performed. */
        opts->peerAuthGood = 1;
    }

    return 0;
}
 8006bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (VerifyClientSuite(havePSK, cipherSuite0, cipherSuite) != 1) {
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f7fd fa7c 	bl	80040d4 <VerifyClientSuite>
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d0f6      	beq.n	8006bce <GetCipherSpec+0xe>
 8006be0:	e7f7      	b.n	8006bd2 <GetCipherSpec+0x12>
    if (cipherSuite0 == ECC_BYTE) {
 8006be2:	2fc0      	cmp	r7, #192	; 0xc0
 8006be4:	d15c      	bne.n	8006ca0 <GetCipherSpec+0xe0>
    switch (cipherSuite) {
 8006be6:	2e0a      	cmp	r6, #10
 8006be8:	d04b      	beq.n	8006c82 <GetCipherSpec+0xc2>
 8006bea:	d813      	bhi.n	8006c14 <GetCipherSpec+0x54>
 8006bec:	2e08      	cmp	r6, #8
 8006bee:	d038      	beq.n	8006c62 <GetCipherSpec+0xa2>
 8006bf0:	2e09      	cmp	r6, #9
 8006bf2:	d1ee      	bne.n	8006bd2 <GetCipherSpec+0x12>
        specs->bulk_cipher_algorithm = wolfssl_aes;
 8006bf4:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006bf8:	8123      	strh	r3, [r4, #8]
        specs->mac_algorithm         = sha_mac;
 8006bfa:	f240 7302 	movw	r3, #1794	; 0x702
 8006bfe:	8163      	strh	r3, [r4, #10]
        specs->sig_algo              = ecc_dsa_sa_algo;
 8006c00:	f241 4303 	movw	r3, #5123	; 0x1403
 8006c04:	81a3      	strh	r3, [r4, #12]
        specs->pad_size              = PAD_SHA;
 8006c06:	2328      	movs	r3, #40	; 0x28
 8006c08:	81e3      	strh	r3, [r4, #14]
        specs->key_size              = AES_128_KEY_SIZE;
 8006c0a:	2310      	movs	r3, #16
 8006c0c:	8023      	strh	r3, [r4, #0]
        specs->block_size            = AES_BLOCK_SIZE;
 8006c0e:	80a3      	strh	r3, [r4, #4]
        specs->iv_size               = AES_IV_SIZE;
 8006c10:	8063      	strh	r3, [r4, #2]
        break;
 8006c12:	e024      	b.n	8006c5e <GetCipherSpec+0x9e>
    switch (cipherSuite) {
 8006c14:	2e23      	cmp	r6, #35	; 0x23
 8006c16:	d013      	beq.n	8006c40 <GetCipherSpec+0x80>
 8006c18:	2e2b      	cmp	r6, #43	; 0x2b
 8006c1a:	d1da      	bne.n	8006bd2 <GetCipherSpec+0x12>
        specs->key_size              = AES_128_KEY_SIZE;
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	8023      	strh	r3, [r4, #0]
        specs->block_size            = AES_BLOCK_SIZE;
 8006c20:	80a3      	strh	r3, [r4, #4]
        specs->aead_mac_size         = AES_GCM_AUTH_SZ;
 8006c22:	80e3      	strh	r3, [r4, #6]
        specs->bulk_cipher_algorithm = wolfssl_aes_gcm;
 8006c24:	f240 2307 	movw	r3, #519	; 0x207
 8006c28:	8123      	strh	r3, [r4, #8]
        specs->mac_algorithm         = sha256_mac;
 8006c2a:	f240 7304 	movw	r3, #1796	; 0x704
 8006c2e:	8163      	strh	r3, [r4, #10]
        specs->sig_algo              = ecc_dsa_sa_algo;
 8006c30:	f242 0303 	movw	r3, #8195	; 0x2003
        specs->iv_size               = AESGCM_IMP_IV_SZ;
 8006c34:	2204      	movs	r2, #4
        specs->sig_algo              = ecc_dsa_sa_algo;
 8006c36:	81a3      	strh	r3, [r4, #12]
        specs->pad_size              = PAD_SHA;
 8006c38:	2328      	movs	r3, #40	; 0x28
        specs->iv_size               = AESGCM_IMP_IV_SZ;
 8006c3a:	8062      	strh	r2, [r4, #2]
        specs->pad_size              = PAD_SHA;
 8006c3c:	81e3      	strh	r3, [r4, #14]
        break;
 8006c3e:	e00e      	b.n	8006c5e <GetCipherSpec+0x9e>
        specs->bulk_cipher_algorithm = wolfssl_aes;
 8006c40:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006c44:	8123      	strh	r3, [r4, #8]
        specs->mac_algorithm         = sha256_mac;
 8006c46:	f240 7304 	movw	r3, #1796	; 0x704
 8006c4a:	8163      	strh	r3, [r4, #10]
        specs->sig_algo              = ecc_dsa_sa_algo;
 8006c4c:	f242 0303 	movw	r3, #8195	; 0x2003
 8006c50:	81a3      	strh	r3, [r4, #12]
        specs->pad_size              = PAD_SHA;
 8006c52:	2328      	movs	r3, #40	; 0x28
 8006c54:	81e3      	strh	r3, [r4, #14]
        specs->key_size              = AES_128_KEY_SIZE;
 8006c56:	2310      	movs	r3, #16
 8006c58:	8023      	strh	r3, [r4, #0]
        specs->iv_size               = AES_IV_SIZE;
 8006c5a:	8063      	strh	r3, [r4, #2]
        specs->block_size            = AES_BLOCK_SIZE;
 8006c5c:	80a3      	strh	r3, [r4, #4]
    return 0;
 8006c5e:	2000      	movs	r0, #0
 8006c60:	e7b8      	b.n	8006bd4 <GetCipherSpec+0x14>
        specs->bulk_cipher_algorithm = wolfssl_triple_des;
 8006c62:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c66:	8123      	strh	r3, [r4, #8]
        specs->mac_algorithm         = sha_mac;
 8006c68:	f240 7302 	movw	r3, #1794	; 0x702
 8006c6c:	8163      	strh	r3, [r4, #10]
        specs->sig_algo              = ecc_dsa_sa_algo;
 8006c6e:	f241 4303 	movw	r3, #5123	; 0x1403
 8006c72:	81a3      	strh	r3, [r4, #12]
        specs->pad_size              = PAD_SHA;
 8006c74:	2328      	movs	r3, #40	; 0x28
 8006c76:	81e3      	strh	r3, [r4, #14]
        specs->key_size              = DES3_KEY_SIZE;
 8006c78:	2318      	movs	r3, #24
 8006c7a:	8023      	strh	r3, [r4, #0]
        specs->block_size            = DES_BLOCK_SIZE;
 8006c7c:	80a6      	strh	r6, [r4, #4]
        specs->iv_size               = DES_IV_SIZE;
 8006c7e:	8066      	strh	r6, [r4, #2]
        break;
 8006c80:	e7ed      	b.n	8006c5e <GetCipherSpec+0x9e>
        specs->bulk_cipher_algorithm = wolfssl_aes;
 8006c82:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006c86:	8123      	strh	r3, [r4, #8]
        specs->mac_algorithm         = sha_mac;
 8006c88:	f240 7302 	movw	r3, #1794	; 0x702
 8006c8c:	8163      	strh	r3, [r4, #10]
        specs->sig_algo              = ecc_dsa_sa_algo;
 8006c8e:	f241 4303 	movw	r3, #5123	; 0x1403
 8006c92:	81a3      	strh	r3, [r4, #12]
        specs->pad_size              = PAD_SHA;
 8006c94:	2328      	movs	r3, #40	; 0x28
 8006c96:	81e3      	strh	r3, [r4, #14]
        specs->key_size              = AES_256_KEY_SIZE;
 8006c98:	2320      	movs	r3, #32
 8006c9a:	8023      	strh	r3, [r4, #0]
        specs->block_size            = AES_BLOCK_SIZE;
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	e7b6      	b.n	8006c0e <GetCipherSpec+0x4e>
    if (cipherSuite0 != ECC_BYTE &&
 8006ca0:	2fd0      	cmp	r7, #208	; 0xd0
 8006ca2:	d001      	beq.n	8006ca8 <GetCipherSpec+0xe8>
        cipherSuite0 != CHACHA_BYTE &&
 8006ca4:	2f13      	cmp	r7, #19
 8006ca6:	d194      	bne.n	8006bd2 <GetCipherSpec+0x12>
    if (specs->sig_algo == anonymous_sa_algo && opts != NULL) {
 8006ca8:	7b20      	ldrb	r0, [r4, #12]
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d1d7      	bne.n	8006c5e <GetCipherSpec+0x9e>
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	d0d5      	beq.n	8006c5e <GetCipherSpec+0x9e>
        opts->peerAuthGood = 1;
 8006cb2:	7aab      	ldrb	r3, [r5, #10]
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	72ab      	strb	r3, [r5, #10]
 8006cba:	e78b      	b.n	8006bd4 <GetCipherSpec+0x14>
 8006cbc:	fffffe0c 	.word	0xfffffe0c

08006cc0 <SetCipherSpecs>:
{
 8006cc0:	b513      	push	{r0, r1, r4, lr}
 8006cc2:	4604      	mov	r4, r0
    int ret = GetCipherSpec(ssl->options.side, ssl->options.cipherSuite0,
 8006cc4:	f890 0270 	ldrb.w	r0, [r0, #624]	; 0x270
 8006cc8:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
 8006ccc:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
 8006cd0:	f504 731b 	add.w	r3, r4, #620	; 0x26c
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8006cda:	f504 73a0 	add.w	r3, r4, #320	; 0x140
 8006cde:	f7ff ff6f 	bl	8006bc0 <GetCipherSpec>
    if (ret == 0) {
 8006ce2:	bb00      	cbnz	r0, 8006d26 <SetCipherSpecs+0x66>
        if (ssl->version.major == SSLv3_MAJOR &&
 8006ce4:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d11c      	bne.n	8006d26 <SetCipherSpecs+0x66>
                ssl->version.minor >= TLSv1_MINOR) {
 8006cec:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (ssl->version.major == SSLv3_MAJOR &&
 8006cf0:	b1cb      	cbz	r3, 8006d26 <SetCipherSpecs+0x66>
            ssl->options.tls = 1;
 8006cf2:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
 8006cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cfa:	f884 2271 	strb.w	r2, [r4, #625]	; 0x271
            if (ssl->version.minor >= TLSv1_1_MINOR) {
 8006cfe:	2b01      	cmp	r3, #1
            ssl->hmac = TLS_hmac;
 8006d00:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <SetCipherSpecs+0x6c>)
 8006d02:	64e2      	str	r2, [r4, #76]	; 0x4c
            if (ssl->version.minor >= TLSv1_1_MINOR) {
 8006d04:	d00f      	beq.n	8006d26 <SetCipherSpecs+0x66>
                if (ssl->version.minor >= TLSv1_3_MINOR)
 8006d06:	2b03      	cmp	r3, #3
                ssl->options.tls1_1 = 1;
 8006d08:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
                    ssl->options.tls1_3 = 1;
 8006d0c:	bf88      	it	hi
 8006d0e:	f894 3272 	ldrbhi.w	r3, [r4, #626]	; 0x272
                ssl->options.tls1_1 = 1;
 8006d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                    ssl->options.tls1_3 = 1;
 8006d16:	bf88      	it	hi
 8006d18:	f043 0301 	orrhi.w	r3, r3, #1
                ssl->options.tls1_1 = 1;
 8006d1c:	f884 2271 	strb.w	r2, [r4, #625]	; 0x271
                    ssl->options.tls1_3 = 1;
 8006d20:	bf88      	it	hi
 8006d22:	f884 3272 	strbhi.w	r3, [r4, #626]	; 0x272
}
 8006d26:	b002      	add	sp, #8
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	bf00      	nop
 8006d2c:	08008585 	.word	0x08008585

08006d30 <SetKeysSide>:
#endif
            copy = 1;
    }
#endif /* HAVE_SECURE_RENEGOTIATION */

    switch (side) {
 8006d30:	2902      	cmp	r1, #2
{
 8006d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d36:	4604      	mov	r4, r0
    switch (side) {
 8006d38:	d02a      	beq.n	8006d90 <SetKeysSide+0x60>
 8006d3a:	2903      	cmp	r1, #3
 8006d3c:	d02c      	beq.n	8006d98 <SetKeysSide+0x68>
 8006d3e:	2901      	cmp	r1, #1
 8006d40:	f040 81ca 	bne.w	80070d8 <SetKeysSide+0x3a8>
            }
            else {
                WOLFSSL_BUFFER(keys->server_write_key, ssl->specs.key_size);
            }
#endif
            wc_encrypt = &ssl->encrypt;
 8006d44:	f100 0550 	add.w	r5, r0, #80	; 0x50
    Ciphers* wc_decrypt = NULL;
 8006d48:	2600      	movs	r6, #0
    if (specs->bulk_cipher_algorithm == wolfssl_triple_des) {
 8006d4a:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
        ret = ssl->ctx->EncryptKeysCb(ssl, ctx);
    }
    if (!ssl->ctx->EncryptKeysCb || ret == PROTOCOLCB_UNAVAILABLE)
#endif
    {
        ret = SetKeys(wc_encrypt, wc_decrypt, keys, &ssl->specs, ssl->options.side,
 8006d4e:	f894 7270 	ldrb.w	r7, [r4, #624]	; 0x270
                      ssl->heap, ssl->devId, ssl->rng, ssl->options.tls1_3);
 8006d52:	f894 a272 	ldrb.w	sl, [r4, #626]	; 0x272
        ret = SetKeys(wc_encrypt, wc_decrypt, keys, &ssl->specs, ssl->options.side,
 8006d56:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8006d5a:	f8d4 92bc 	ldr.w	r9, [r4, #700]	; 0x2bc
 8006d5e:	f8d4 b018 	ldr.w	fp, [r4, #24]
    if (specs->bulk_cipher_algorithm == wolfssl_triple_des) {
 8006d62:	2b04      	cmp	r3, #4
        ret = SetKeys(wc_encrypt, wc_decrypt, keys, &ssl->specs, ssl->options.side,
 8006d64:	f3c7 1701 	ubfx	r7, r7, #4, #2
                      ssl->heap, ssl->devId, ssl->rng, ssl->options.tls1_3);
 8006d68:	f00a 0a01 	and.w	sl, sl, #1
    if (specs->bulk_cipher_algorithm == wolfssl_triple_des) {
 8006d6c:	d166      	bne.n	8006e3c <SetKeysSide+0x10c>
        if (enc) {
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	f000 81d8 	beq.w	8007124 <SetKeysSide+0x3f4>
            if (enc->des3 == NULL)
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b923      	cbnz	r3, 8006d82 <SetKeysSide+0x52>
                enc->des3 = (Des3*)XMALLOC(sizeof(Des3), heap, DYNAMIC_TYPE_CIPHER);
 8006d78:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8006d7c:	f016 fdf2 	bl	801d964 <malloc>
 8006d80:	6028      	str	r0, [r5, #0]
            if (enc->des3 == NULL)
 8006d82:	6828      	ldr	r0, [r5, #0]
 8006d84:	b968      	cbnz	r0, 8006da2 <SetKeysSide+0x72>
                return MEMORY_E;
 8006d86:	f06f 007c 	mvn.w	r0, #124	; 0x7c
        CacheStatusPP(ssl->secure_renegotiation);
    }
#endif /* HAVE_SECURE_RENEGOTIATION */

    return ret;
}
 8006d8a:	b003      	add	sp, #12
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            wc_decrypt = &ssl->decrypt;
 8006d90:	f100 0664 	add.w	r6, r0, #100	; 0x64
    Ciphers* wc_encrypt = NULL;
 8006d94:	2500      	movs	r5, #0
            break;
 8006d96:	e7d8      	b.n	8006d4a <SetKeysSide+0x1a>
            wc_encrypt = &ssl->encrypt;
 8006d98:	f100 0550 	add.w	r5, r0, #80	; 0x50
            wc_decrypt = &ssl->decrypt;
 8006d9c:	f100 0664 	add.w	r6, r0, #100	; 0x64
            break;
 8006da0:	e7d3      	b.n	8006d4a <SetKeysSide+0x1a>
            XMEMSET(enc->des3, 0, sizeof(Des3));
 8006da2:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8006da6:	2100      	movs	r1, #0
 8006da8:	f016 fe24 	bl	801d9f4 <memset>
        if (dec) {
 8006dac:	b1c6      	cbz	r6, 8006de0 <SetKeysSide+0xb0>
            if (dec->des3 == NULL)
 8006dae:	6833      	ldr	r3, [r6, #0]
 8006db0:	b923      	cbnz	r3, 8006dbc <SetKeysSide+0x8c>
                dec->des3 = (Des3*)XMALLOC(sizeof(Des3), heap, DYNAMIC_TYPE_CIPHER);
 8006db2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8006db6:	f016 fdd5 	bl	801d964 <malloc>
 8006dba:	6030      	str	r0, [r6, #0]
            if (dec->des3 == NULL)
 8006dbc:	6830      	ldr	r0, [r6, #0]
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d0e1      	beq.n	8006d86 <SetKeysSide+0x56>
            XMEMSET(dec->des3, 0, sizeof(Des3));
 8006dc2:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	f016 fe14 	bl	801d9f4 <memset>
        if (enc) {
 8006dcc:	b945      	cbnz	r5, 8006de0 <SetKeysSide+0xb0>
            if (wc_Des3Init(dec->des3, heap, devId) != 0) {
 8006dce:	6830      	ldr	r0, [r6, #0]
 8006dd0:	464a      	mov	r2, r9
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	f005 f8f0 	bl	800bfb8 <wc_Des3Init>
 8006dd8:	b1c0      	cbz	r0, 8006e0c <SetKeysSide+0xdc>
                return ASYNC_INIT_E;
 8006dda:	f06f 00b5 	mvn.w	r0, #181	; 0xb5
 8006dde:	e7d4      	b.n	8006d8a <SetKeysSide+0x5a>
            if (wc_Des3Init(enc->des3, heap, devId) != 0) {
 8006de0:	6828      	ldr	r0, [r5, #0]
 8006de2:	464a      	mov	r2, r9
 8006de4:	4641      	mov	r1, r8
 8006de6:	f005 f8e7 	bl	800bfb8 <wc_Des3Init>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d1f5      	bne.n	8006dda <SetKeysSide+0xaa>
        if (dec) {
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	d1ed      	bne.n	8006dce <SetKeysSide+0x9e>
        if (side == WOLFSSL_CLIENT_END) {
 8006df2:	2f01      	cmp	r7, #1
 8006df4:	f040 80ae 	bne.w	8006f54 <SetKeysSide+0x224>
                desRet = wc_Des3_SetKey(enc->des3, keys->client_write_key,
 8006df8:	6828      	ldr	r0, [r5, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f504 7204 	add.w	r2, r4, #528	; 0x210
 8006e00:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 8006e04:	f005 f897 	bl	800bf36 <wc_Des3_SetKey>
                if (desRet != 0) return desRet;
 8006e08:	b128      	cbz	r0, 8006e16 <SetKeysSide+0xe6>
 8006e0a:	e7be      	b.n	8006d8a <SetKeysSide+0x5a>
        if (side == WOLFSSL_CLIENT_END) {
 8006e0c:	2f01      	cmp	r7, #1
 8006e0e:	f040 8097 	bne.w	8006f40 <SetKeysSide+0x210>
            if (enc) {
 8006e12:	2d00      	cmp	r5, #0
 8006e14:	d1f0      	bne.n	8006df8 <SetKeysSide+0xc8>
            if (dec) {
 8006e16:	b90e      	cbnz	r6, 8006e1c <SetKeysSide+0xec>
        if (enc)
 8006e18:	b95d      	cbnz	r5, 8006e32 <SetKeysSide+0x102>
 8006e1a:	e00f      	b.n	8006e3c <SetKeysSide+0x10c>
                desRet = wc_Des3_SetKey(dec->des3, keys->server_write_key,
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f504 7208 	add.w	r2, r4, #544	; 0x220
 8006e22:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
                desRet = wc_Des3_SetKey(dec->des3, keys->client_write_key,
 8006e26:	6830      	ldr	r0, [r6, #0]
 8006e28:	f005 f885 	bl	800bf36 <wc_Des3_SetKey>
                if (desRet != 0) return desRet;
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1ac      	bne.n	8006d8a <SetKeysSide+0x5a>
        if (enc)
 8006e30:	b115      	cbz	r5, 8006e38 <SetKeysSide+0x108>
            enc->setup = 1;
 8006e32:	2301      	movs	r3, #1
 8006e34:	746b      	strb	r3, [r5, #17]
        if (dec)
 8006e36:	b10e      	cbz	r6, 8006e3c <SetKeysSide+0x10c>
            dec->setup = 1;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	7473      	strb	r3, [r6, #17]
    if (specs->bulk_cipher_algorithm == wolfssl_aes) {
 8006e3c:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	d158      	bne.n	8006ef6 <SetKeysSide+0x1c6>
        if (enc) {
 8006e44:	2d00      	cmp	r5, #0
 8006e46:	f000 8171 	beq.w	800712c <SetKeysSide+0x3fc>
            if (enc->aes == NULL) {
 8006e4a:	6868      	ldr	r0, [r5, #4]
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f040 808c 	bne.w	8006f6a <SetKeysSide+0x23a>
                enc->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 8006e52:	f44f 709c 	mov.w	r0, #312	; 0x138
 8006e56:	f016 fd85 	bl	801d964 <malloc>
 8006e5a:	6068      	str	r0, [r5, #4]
                if (enc->aes == NULL)
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d092      	beq.n	8006d86 <SetKeysSide+0x56>
            XMEMSET(enc->aes, 0, sizeof(Aes));
 8006e60:	6868      	ldr	r0, [r5, #4]
 8006e62:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e66:	2100      	movs	r1, #0
 8006e68:	f016 fdc4 	bl	801d9f4 <memset>
        if (dec) {
 8006e6c:	2e00      	cmp	r6, #0
 8006e6e:	f000 8136 	beq.w	80070de <SetKeysSide+0x3ae>
            if (dec->aes == NULL) {
 8006e72:	6870      	ldr	r0, [r6, #4]
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d17b      	bne.n	8006f70 <SetKeysSide+0x240>
                dec->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 8006e78:	f44f 709c 	mov.w	r0, #312	; 0x138
 8006e7c:	f016 fd72 	bl	801d964 <malloc>
 8006e80:	6070      	str	r0, [r6, #4]
                if (dec->aes == NULL)
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f af7f 	beq.w	8006d86 <SetKeysSide+0x56>
            XMEMSET(dec->aes, 0, sizeof(Aes));
 8006e88:	6870      	ldr	r0, [r6, #4]
 8006e8a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e8e:	2100      	movs	r1, #0
 8006e90:	f016 fdb0 	bl	801d9f4 <memset>
        if (enc) {
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	f040 8125 	bne.w	80070e4 <SetKeysSide+0x3b4>
            if (wc_AesInit(dec->aes, heap, devId) != 0) {
 8006e9a:	6870      	ldr	r0, [r6, #4]
 8006e9c:	464a      	mov	r2, r9
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	f004 fdaa 	bl	800b9f8 <wc_AesInit>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d198      	bne.n	8006dda <SetKeysSide+0xaa>
        if (side == WOLFSSL_CLIENT_END) {
 8006ea8:	2f01      	cmp	r7, #1
 8006eaa:	d164      	bne.n	8006f76 <SetKeysSide+0x246>
            if (enc) {
 8006eac:	b17d      	cbz	r5, 8006ece <SetKeysSide+0x19e>
                aesRet = wc_AesSetKey(enc->aes, keys->client_write_key,
 8006eae:	2300      	movs	r3, #0
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 8006eb6:	6868      	ldr	r0, [r5, #4]
 8006eb8:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8006ebc:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 8006ec0:	f003 f992 	bl	800a1e8 <wc_AesSetKey>
                if (aesRet != 0) return aesRet;
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f47f af60 	bne.w	8006d8a <SetKeysSide+0x5a>
            if (dec) {
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	d057      	beq.n	8006f7e <SetKeysSide+0x24e>
                aesRet = wc_AesSetKey(dec->aes, keys->server_write_key,
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 8006eda:	f504 7308 	add.w	r3, r4, #544	; 0x220
                aesRet = wc_AesSetKey(dec->aes, keys->client_write_key,
 8006ede:	6870      	ldr	r0, [r6, #4]
 8006ee0:	f003 f982 	bl	800a1e8 <wc_AesSetKey>
                if (aesRet != 0) return aesRet;
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f47f af50 	bne.w	8006d8a <SetKeysSide+0x5a>
        if (enc)
 8006eea:	b115      	cbz	r5, 8006ef2 <SetKeysSide+0x1c2>
            enc->setup = 1;
 8006eec:	2301      	movs	r3, #1
 8006eee:	746b      	strb	r3, [r5, #17]
        if (dec)
 8006ef0:	b10e      	cbz	r6, 8006ef6 <SetKeysSide+0x1c6>
            dec->setup = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	7473      	strb	r3, [r6, #17]
    if (specs->bulk_cipher_algorithm == wolfssl_aes_gcm) {
 8006ef6:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 8006efa:	2b07      	cmp	r3, #7
 8006efc:	f040 80e4 	bne.w	80070c8 <SetKeysSide+0x398>
        if (enc) {
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	d04b      	beq.n	8006f9c <SetKeysSide+0x26c>
            if (enc->aes == NULL) {
 8006f04:	6868      	ldr	r0, [r5, #4]
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d145      	bne.n	8006f96 <SetKeysSide+0x266>
                enc->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 8006f0a:	f44f 709c 	mov.w	r0, #312	; 0x138
 8006f0e:	f016 fd29 	bl	801d964 <malloc>
 8006f12:	6068      	str	r0, [r5, #4]
                if (enc->aes == NULL)
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f43f af36 	beq.w	8006d86 <SetKeysSide+0x56>
            XMEMSET(enc->aes, 0, sizeof(Aes));
 8006f1a:	6868      	ldr	r0, [r5, #4]
 8006f1c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006f20:	2100      	movs	r1, #0
 8006f22:	f016 fd67 	bl	801d9f4 <memset>
        if (dec) {
 8006f26:	2e00      	cmp	r6, #0
 8006f28:	d139      	bne.n	8006f9e <SetKeysSide+0x26e>
            if (wc_AesInit(enc->aes, heap, devId) != 0) {
 8006f2a:	6868      	ldr	r0, [r5, #4]
 8006f2c:	464a      	mov	r2, r9
 8006f2e:	4641      	mov	r1, r8
 8006f30:	f004 fd62 	bl	800b9f8 <wc_AesInit>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f47f af50 	bne.w	8006dda <SetKeysSide+0xaa>
        if (dec) {
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d04a      	beq.n	8006fd4 <SetKeysSide+0x2a4>
 8006f3e:	e041      	b.n	8006fc4 <SetKeysSide+0x294>
            if (enc) {
 8006f40:	b945      	cbnz	r5, 8006f54 <SetKeysSide+0x224>
            if (dec) {
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	f43f af68 	beq.w	8006e18 <SetKeysSide+0xe8>
                desRet = wc_Des3_SetKey(dec->des3, keys->client_write_key,
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f504 7204 	add.w	r2, r4, #528	; 0x210
 8006f4e:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 8006f52:	e768      	b.n	8006e26 <SetKeysSide+0xf6>
                desRet = wc_Des3_SetKey(enc->des3, keys->server_write_key,
 8006f54:	6828      	ldr	r0, [r5, #0]
 8006f56:	2300      	movs	r3, #0
 8006f58:	f504 7208 	add.w	r2, r4, #544	; 0x220
 8006f5c:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 8006f60:	f004 ffe9 	bl	800bf36 <wc_Des3_SetKey>
                if (desRet != 0) return desRet;
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d0ec      	beq.n	8006f42 <SetKeysSide+0x212>
 8006f68:	e70f      	b.n	8006d8a <SetKeysSide+0x5a>
                wc_AesFree(enc->aes);
 8006f6a:	f004 fd4d 	bl	800ba08 <wc_AesFree>
 8006f6e:	e777      	b.n	8006e60 <SetKeysSide+0x130>
                wc_AesFree(dec->aes);
 8006f70:	f004 fd4a 	bl	800ba08 <wc_AesFree>
 8006f74:	e788      	b.n	8006e88 <SetKeysSide+0x158>
            if (enc) {
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	f040 80c2 	bne.w	8007100 <SetKeysSide+0x3d0>
            if (dec) {
 8006f7c:	b916      	cbnz	r6, 8006f84 <SetKeysSide+0x254>
        if (enc)
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	d1b4      	bne.n	8006eec <SetKeysSide+0x1bc>
 8006f82:	e7b8      	b.n	8006ef6 <SetKeysSide+0x1c6>
                aesRet = wc_AesSetKey(dec->aes, keys->client_write_key,
 8006f84:	2301      	movs	r3, #1
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 8006f8c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8006f90:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 8006f94:	e7a3      	b.n	8006ede <SetKeysSide+0x1ae>
                wc_AesFree(enc->aes);
 8006f96:	f004 fd37 	bl	800ba08 <wc_AesFree>
 8006f9a:	e7be      	b.n	8006f1a <SetKeysSide+0x1ea>
        if (dec) {
 8006f9c:	b1d6      	cbz	r6, 8006fd4 <SetKeysSide+0x2a4>
            if (dec->aes == NULL) {
 8006f9e:	6870      	ldr	r0, [r6, #4]
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d13c      	bne.n	800701e <SetKeysSide+0x2ee>
                dec->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 8006fa4:	f44f 709c 	mov.w	r0, #312	; 0x138
 8006fa8:	f016 fcdc 	bl	801d964 <malloc>
 8006fac:	6070      	str	r0, [r6, #4]
                if (dec->aes == NULL)
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f43f aee9 	beq.w	8006d86 <SetKeysSide+0x56>
            XMEMSET(dec->aes, 0, sizeof(Aes));
 8006fb4:	6870      	ldr	r0, [r6, #4]
 8006fb6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f016 fd1a 	bl	801d9f4 <memset>
        if (enc) {
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	d1b2      	bne.n	8006f2a <SetKeysSide+0x1fa>
            if (wc_AesInit(dec->aes, heap, devId) != 0) {
 8006fc4:	6870      	ldr	r0, [r6, #4]
 8006fc6:	464a      	mov	r2, r9
 8006fc8:	4641      	mov	r1, r8
 8006fca:	f004 fd15 	bl	800b9f8 <wc_AesInit>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f47f af03 	bne.w	8006dda <SetKeysSide+0xaa>
        if (side == WOLFSSL_CLIENT_END) {
 8006fd4:	2f01      	cmp	r7, #1
 8006fd6:	d145      	bne.n	8007064 <SetKeysSide+0x334>
            if (enc) {
 8006fd8:	b325      	cbz	r5, 8007024 <SetKeysSide+0x2f4>
                gcmRet = wc_AesGcmSetKey(enc->aes, keys->client_write_key,
 8006fda:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 8006fde:	6868      	ldr	r0, [r5, #4]
 8006fe0:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 8006fe4:	f004 fa8c 	bl	800b500 <wc_AesGcmSetKey>
                if (gcmRet != 0) return gcmRet;
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f47f aece 	bne.w	8006d8a <SetKeysSide+0x5a>
                XMEMCPY(keys->aead_enc_imp_IV, keys->client_write_IV,
 8006fee:	f504 7704 	add.w	r7, r4, #528	; 0x210
 8006ff2:	220c      	movs	r2, #12
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f504 700e 	add.w	r0, r4, #568	; 0x238
 8006ffa:	f016 fcd3 	bl	801d9a4 <memcpy>
                if (!tls13) {
 8006ffe:	f1ba 0f00 	cmp.w	sl, #0
 8007002:	d10a      	bne.n	800701a <SetKeysSide+0x2ea>
                    gcmRet = wc_AesGcmSetIV(enc->aes, AESGCM_NONCE_SZ,
 8007004:	f8cd b000 	str.w	fp, [sp]
 8007008:	6868      	ldr	r0, [r5, #4]
 800700a:	2304      	movs	r3, #4
 800700c:	463a      	mov	r2, r7
 800700e:	210c      	movs	r1, #12
 8007010:	f004 fc68 	bl	800b8e4 <wc_AesGcmSetIV>
                    if (gcmRet != 0) return gcmRet;
 8007014:	2800      	cmp	r0, #0
 8007016:	f47f aeb8 	bne.w	8006d8a <SetKeysSide+0x5a>
            if (dec) {
 800701a:	b92e      	cbnz	r6, 8007028 <SetKeysSide+0x2f8>
 800701c:	e017      	b.n	800704e <SetKeysSide+0x31e>
                wc_AesFree(dec->aes);
 800701e:	f004 fcf3 	bl	800ba08 <wc_AesFree>
 8007022:	e7c7      	b.n	8006fb4 <SetKeysSide+0x284>
            if (dec) {
 8007024:	2e00      	cmp	r6, #0
 8007026:	d055      	beq.n	80070d4 <SetKeysSide+0x3a4>
                gcmRet = wc_AesGcmSetKey(dec->aes, keys->server_write_key,
 8007028:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 800702c:	6870      	ldr	r0, [r6, #4]
 800702e:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 8007032:	f004 fa65 	bl	800b500 <wc_AesGcmSetKey>
                if (gcmRet != 0) return gcmRet;
 8007036:	2800      	cmp	r0, #0
 8007038:	f47f aea7 	bne.w	8006d8a <SetKeysSide+0x5a>
                XMEMCPY(keys->aead_dec_imp_IV, keys->server_write_IV,
 800703c:	220c      	movs	r2, #12
 800703e:	f504 7108 	add.w	r1, r4, #544	; 0x220
                XMEMCPY(keys->aead_dec_imp_IV, keys->client_write_IV,
 8007042:	f504 7011 	add.w	r0, r4, #580	; 0x244
 8007046:	f016 fcad 	bl	801d9a4 <memcpy>
        if (enc)
 800704a:	2d00      	cmp	r5, #0
 800704c:	d067      	beq.n	800711e <SetKeysSide+0x3ee>
            enc->setup = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	746b      	strb	r3, [r5, #17]
        if (dec)
 8007052:	2e00      	cmp	r6, #0
 8007054:	d039      	beq.n	80070ca <SetKeysSide+0x39a>
            dec->setup = 1;
 8007056:	2301      	movs	r3, #1
 8007058:	7473      	strb	r3, [r6, #17]
    if (enc) {
 800705a:	bbb5      	cbnz	r5, 80070ca <SetKeysSide+0x39a>
        keys->peer_sequence_number_hi = 0;
 800705c:	2000      	movs	r0, #0
        keys->peer_sequence_number_lo = 0;
 800705e:	e9c4 0094 	strd	r0, r0, [r4, #592]	; 0x250
 8007062:	e692      	b.n	8006d8a <SetKeysSide+0x5a>
            if (enc) {
 8007064:	b30d      	cbz	r5, 80070aa <SetKeysSide+0x37a>
                gcmRet = wc_AesGcmSetKey(enc->aes, keys->server_write_key,
 8007066:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 800706a:	6868      	ldr	r0, [r5, #4]
 800706c:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 8007070:	f004 fa46 	bl	800b500 <wc_AesGcmSetKey>
                if (gcmRet != 0) return gcmRet;
 8007074:	2800      	cmp	r0, #0
 8007076:	f47f ae88 	bne.w	8006d8a <SetKeysSide+0x5a>
                XMEMCPY(keys->aead_enc_imp_IV, keys->server_write_IV,
 800707a:	f504 7708 	add.w	r7, r4, #544	; 0x220
 800707e:	220c      	movs	r2, #12
 8007080:	4639      	mov	r1, r7
 8007082:	f504 700e 	add.w	r0, r4, #568	; 0x238
 8007086:	f016 fc8d 	bl	801d9a4 <memcpy>
                if (!tls13) {
 800708a:	f1ba 0f00 	cmp.w	sl, #0
 800708e:	d10a      	bne.n	80070a6 <SetKeysSide+0x376>
                    gcmRet = wc_AesGcmSetIV(enc->aes, AESGCM_NONCE_SZ,
 8007090:	f8cd b000 	str.w	fp, [sp]
 8007094:	6868      	ldr	r0, [r5, #4]
 8007096:	2304      	movs	r3, #4
 8007098:	463a      	mov	r2, r7
 800709a:	210c      	movs	r1, #12
 800709c:	f004 fc22 	bl	800b8e4 <wc_AesGcmSetIV>
                    if (gcmRet != 0) return gcmRet;
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f47f ae72 	bne.w	8006d8a <SetKeysSide+0x5a>
            if (dec) {
 80070a6:	b90e      	cbnz	r6, 80070ac <SetKeysSide+0x37c>
 80070a8:	e7d1      	b.n	800704e <SetKeysSide+0x31e>
 80070aa:	b19e      	cbz	r6, 80070d4 <SetKeysSide+0x3a4>
                gcmRet = wc_AesGcmSetKey(dec->aes, keys->client_write_key,
 80070ac:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 80070b0:	6870      	ldr	r0, [r6, #4]
 80070b2:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 80070b6:	f004 fa23 	bl	800b500 <wc_AesGcmSetKey>
                if (gcmRet != 0) return gcmRet;
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f47f ae65 	bne.w	8006d8a <SetKeysSide+0x5a>
                XMEMCPY(keys->aead_dec_imp_IV, keys->client_write_IV,
 80070c0:	220c      	movs	r2, #12
 80070c2:	f504 7104 	add.w	r1, r4, #528	; 0x210
 80070c6:	e7bc      	b.n	8007042 <SetKeysSide+0x312>
    if (enc) {
 80070c8:	b115      	cbz	r5, 80070d0 <SetKeysSide+0x3a0>
        keys->sequence_number_hi      = 0;
 80070ca:	2300      	movs	r3, #0
        keys->sequence_number_lo      = 0;
 80070cc:	e9c4 3396 	strd	r3, r3, [r4, #600]	; 0x258
    if (dec) {
 80070d0:	2e00      	cmp	r6, #0
 80070d2:	d1c3      	bne.n	800705c <SetKeysSide+0x32c>
    return 0;
 80070d4:	2000      	movs	r0, #0
 80070d6:	e658      	b.n	8006d8a <SetKeysSide+0x5a>
    switch (side) {
 80070d8:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80070dc:	e655      	b.n	8006d8a <SetKeysSide+0x5a>
        if (enc) {
 80070de:	2d00      	cmp	r5, #0
 80070e0:	f43f af09 	beq.w	8006ef6 <SetKeysSide+0x1c6>
            if (wc_AesInit(enc->aes, heap, devId) != 0) {
 80070e4:	6868      	ldr	r0, [r5, #4]
 80070e6:	464a      	mov	r2, r9
 80070e8:	4641      	mov	r1, r8
 80070ea:	f004 fc85 	bl	800b9f8 <wc_AesInit>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f47f ae73 	bne.w	8006dda <SetKeysSide+0xaa>
        if (dec) {
 80070f4:	2e00      	cmp	r6, #0
 80070f6:	f47f aed0 	bne.w	8006e9a <SetKeysSide+0x16a>
        if (side == WOLFSSL_CLIENT_END) {
 80070fa:	2f01      	cmp	r7, #1
 80070fc:	f43f aed7 	beq.w	8006eae <SetKeysSide+0x17e>
                aesRet = wc_AesSetKey(enc->aes, keys->server_write_key,
 8007100:	2300      	movs	r3, #0
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	f8b4 2140 	ldrh.w	r2, [r4, #320]	; 0x140
 8007108:	6868      	ldr	r0, [r5, #4]
 800710a:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800710e:	f504 71f8 	add.w	r1, r4, #496	; 0x1f0
 8007112:	f003 f869 	bl	800a1e8 <wc_AesSetKey>
                if (aesRet != 0) return aesRet;
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f af30 	beq.w	8006f7c <SetKeysSide+0x24c>
 800711c:	e635      	b.n	8006d8a <SetKeysSide+0x5a>
        if (dec)
 800711e:	2e00      	cmp	r6, #0
 8007120:	d199      	bne.n	8007056 <SetKeysSide+0x326>
 8007122:	e7d7      	b.n	80070d4 <SetKeysSide+0x3a4>
        if (dec) {
 8007124:	2e00      	cmp	r6, #0
 8007126:	f47f ae42 	bne.w	8006dae <SetKeysSide+0x7e>
 800712a:	e687      	b.n	8006e3c <SetKeysSide+0x10c>
        if (dec) {
 800712c:	2e00      	cmp	r6, #0
 800712e:	f47f aea0 	bne.w	8006e72 <SetKeysSide+0x142>
 8007132:	e6e0      	b.n	8006ef6 <SetKeysSide+0x1c6>

08007134 <StoreKeys>:


/* TLS can call too */
int StoreKeys(WOLFSSL* ssl, const byte* keyData, int side)
{
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

        return 0;
    }
#endif /* WOLFSSL_MULTICAST */

    if (ssl->specs.cipher_type != aead) {
 8007138:	f890 3149 	ldrb.w	r3, [r0, #329]	; 0x149
 800713c:	2b02      	cmp	r3, #2
{
 800713e:	4605      	mov	r5, r0
 8007140:	460f      	mov	r7, r1
        sz = ssl->specs.hash_size;
        if (side & PROVISION_CLIENT) {
 8007142:	f002 0801 	and.w	r8, r2, #1
 8007146:	f002 0602 	and.w	r6, r2, #2
    if (ssl->specs.cipher_type != aead) {
 800714a:	d048      	beq.n	80071de <StoreKeys+0xaa>
        sz = ssl->specs.hash_size;
 800714c:	f890 914d 	ldrb.w	r9, [r0, #333]	; 0x14d
        if (side & PROVISION_CLIENT) {
 8007150:	f1b8 0f00 	cmp.w	r8, #0
 8007154:	d041      	beq.n	80071da <StoreKeys+0xa6>
        #ifdef WOLFSSL_DTLS
            if (scr_copy)
                XMEMCPY(ssl->keys.client_write_MAC_secret,
                        keys->client_write_MAC_secret, sz);
        #endif
            XMEMCPY(keys->client_write_MAC_secret,&keyData[i], sz);
 8007156:	464a      	mov	r2, r9
 8007158:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800715c:	f016 fc22 	bl	801d9a4 <memcpy>
    #endif
            i += sz;
 8007160:	464c      	mov	r4, r9
        }
        if (side & PROVISION_SERVER) {
 8007162:	b136      	cbz	r6, 8007172 <StoreKeys+0x3e>
        #ifdef WOLFSSL_DTLS
            if (scr_copy)
                XMEMCPY(ssl->keys.server_write_MAC_secret,
                        keys->server_write_MAC_secret, sz);
        #endif
            XMEMCPY(keys->server_write_MAC_secret,&keyData[i], sz);
 8007164:	1939      	adds	r1, r7, r4
 8007166:	464a      	mov	r2, r9
 8007168:	f505 70c8 	add.w	r0, r5, #400	; 0x190
 800716c:	f016 fc1a 	bl	801d9a4 <memcpy>
    #endif
            i += sz;
 8007170:	444c      	add	r4, r9
        }
    }
    sz = ssl->specs.key_size;
 8007172:	f8b5 9140 	ldrh.w	r9, [r5, #320]	; 0x140
    if (side & PROVISION_CLIENT) {
 8007176:	f1b8 0f00 	cmp.w	r8, #0
 800717a:	d006      	beq.n	800718a <StoreKeys+0x56>
    #ifdef WOLFSSL_DTLS
        if (scr_copy)
            XMEMCPY(ssl->keys.client_write_key,
                    keys->client_write_key, sz);
    #endif
        XMEMCPY(keys->client_write_key, &keyData[i], sz);
 800717c:	1939      	adds	r1, r7, r4
 800717e:	464a      	mov	r2, r9
 8007180:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8007184:	f016 fc0e 	bl	801d9a4 <memcpy>
        i += sz;
 8007188:	444c      	add	r4, r9
    }
    if (side & PROVISION_SERVER) {
 800718a:	b136      	cbz	r6, 800719a <StoreKeys+0x66>
    #ifdef WOLFSSL_DTLS
        if (scr_copy)
            XMEMCPY(ssl->keys.server_write_key,
                    keys->server_write_key, sz);
    #endif
        XMEMCPY(keys->server_write_key, &keyData[i], sz);
 800718c:	1939      	adds	r1, r7, r4
 800718e:	464a      	mov	r2, r9
 8007190:	f505 70f8 	add.w	r0, r5, #496	; 0x1f0
 8007194:	f016 fc06 	bl	801d9a4 <memcpy>
        i += sz;
 8007198:	444c      	add	r4, r9
    }

    sz = ssl->specs.iv_size;
 800719a:	f8b5 9142 	ldrh.w	r9, [r5, #322]	; 0x142
    if (side & PROVISION_CLIENT) {
 800719e:	f1b8 0f00 	cmp.w	r8, #0
 80071a2:	d006      	beq.n	80071b2 <StoreKeys+0x7e>
    #ifdef WOLFSSL_DTLS
        if (scr_copy)
            XMEMCPY(ssl->keys.client_write_IV,
                    keys->client_write_IV, sz);
    #endif
        XMEMCPY(keys->client_write_IV, &keyData[i], sz);
 80071a4:	1939      	adds	r1, r7, r4
 80071a6:	464a      	mov	r2, r9
 80071a8:	f505 7004 	add.w	r0, r5, #528	; 0x210
 80071ac:	f016 fbfa 	bl	801d9a4 <memcpy>
        i += sz;
 80071b0:	444c      	add	r4, r9
    }
    if (side & PROVISION_SERVER) {
 80071b2:	b12e      	cbz	r6, 80071c0 <StoreKeys+0x8c>
    #ifdef WOLFSSL_DTLS
        if (scr_copy)
            XMEMCPY(ssl->keys.server_write_IV,
                    keys->server_write_IV, sz);
    #endif
        XMEMCPY(keys->server_write_IV, &keyData[i], sz);
 80071b4:	464a      	mov	r2, r9
 80071b6:	1939      	adds	r1, r7, r4
 80071b8:	f505 7008 	add.w	r0, r5, #544	; 0x220
 80071bc:	f016 fbf2 	bl	801d9a4 <memcpy>
    }

#ifdef HAVE_AEAD
    if (ssl->specs.cipher_type == aead) {
 80071c0:	f895 3149 	ldrb.w	r3, [r5, #329]	; 0x149
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d105      	bne.n	80071d4 <StoreKeys+0xa0>
    #ifdef WOLFSSL_DTLS
        if (scr_copy)
            XMEMMOVE(ssl->keys.aead_exp_IV,
                    keys->aead_exp_IV, AEAD_MAX_EXP_SZ);
    #endif
        XMEMSET(keys->aead_exp_IV, 0, AEAD_MAX_EXP_SZ);
 80071c8:	2208      	movs	r2, #8
 80071ca:	2100      	movs	r1, #0
 80071cc:	f505 700c 	add.w	r0, r5, #560	; 0x230
 80071d0:	f016 fc10 	bl	801d9f4 <memset>
    }
#endif

    return 0;
}
 80071d4:	2000      	movs	r0, #0
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int sz, i = 0;
 80071da:	4644      	mov	r4, r8
 80071dc:	e7c1      	b.n	8007162 <StoreKeys+0x2e>
 80071de:	2400      	movs	r4, #0
 80071e0:	e7c7      	b.n	8007172 <StoreKeys+0x3e>

080071e2 <MakeMasterSecret>:
    /* append secret to premaster : premaster | SerSi | CliSi */
#ifndef NO_OLD_TLS
    if (ssl->options.tls) return MakeTlsMasterSecret(ssl);
    return MakeSslMasterSecret(ssl);
#elif !defined(WOLFSSL_NO_TLS12) && !defined(NO_TLS)
    return MakeTlsMasterSecret(ssl);
 80071e2:	f001 b959 	b.w	8008498 <MakeTlsMasterSecret>

080071e6 <ForceZero>:
    while (len--) *z++ = 0;
 80071e6:	4401      	add	r1, r0
 80071e8:	2300      	movs	r3, #0
 80071ea:	4288      	cmp	r0, r1
 80071ec:	d100      	bne.n	80071f0 <ForceZero+0xa>
}
 80071ee:	4770      	bx	lr
    while (len--) *z++ = 0;
 80071f0:	f800 3b01 	strb.w	r3, [r0], #1
 80071f4:	e7f9      	b.n	80071ea <ForceZero+0x4>

080071f6 <HashSigner>:
#if defined(HAVE_SESSION_TICKET) || !defined(NO_CERTS) || \
    !defined(NO_SESSION_CACHE)
/* Make a word from the front of random hash */
WC_MISC_STATIC WC_INLINE word32 MakeWordFromHash(const byte* hashID)
{
    return ((word32)hashID[0] << 24) | ((word32)hashID[1] << 16) |
 80071f6:	6803      	ldr	r3, [r0, #0]
#ifndef NO_CERTS

/* hash is the SHA digest of name, just use first 32 bits as hash */
static WC_INLINE word32 HashSigner(const byte* hash)
{
    return MakeWordFromHash(hash) % CA_TABLE_SIZE;
 80071f8:	220b      	movs	r2, #11
 80071fa:	ba1b      	rev	r3, r3
 80071fc:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8007200:	fb02 3010 	mls	r0, r2, r0, r3
 8007204:	4770      	bx	lr

08007206 <ModeToVerifyOptions>:
    byte failNoCertxPSK:1;
    byte verifyPostHandshake:1;
} SetVerifyOptions;

static SetVerifyOptions ModeToVerifyOptions(int mode)
{
 8007206:	b513      	push	{r0, r1, r4, lr}
    SetVerifyOptions opts;
    XMEMSET(&opts, 0, sizeof(SetVerifyOptions));
 8007208:	2201      	movs	r2, #1
{
 800720a:	4604      	mov	r4, r0
    XMEMSET(&opts, 0, sizeof(SetVerifyOptions));
 800720c:	2100      	movs	r1, #0
 800720e:	a801      	add	r0, sp, #4
 8007210:	f016 fbf0 	bl	801d9f4 <memset>

    if (mode != WOLFSSL_VERIFY_DEFAULT) {
 8007214:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007218:	d01a      	beq.n	8007250 <ModeToVerifyOptions+0x4a>
        opts.verifyNone = (mode == WOLFSSL_VERIFY_NONE);
 800721a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800721e:	fab4 f284 	clz	r2, r4
 8007222:	0952      	lsrs	r2, r2, #5
 8007224:	f362 0341 	bfi	r3, r2, #1, #1
 8007228:	f88d 3004 	strb.w	r3, [sp, #4]
        if (!opts.verifyNone) {
 800722c:	b2da      	uxtb	r2, r3
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d40e      	bmi.n	8007250 <ModeToVerifyOptions+0x4a>
            opts.verifyPeer =
                    (mode & WOLFSSL_VERIFY_PEER) != 0;
            opts.failNoCertxPSK =
                    (mode & WOLFSSL_VERIFY_FAIL_EXCEPT_PSK) != 0;
            opts.failNoCert =
                    (mode & WOLFSSL_VERIFY_FAIL_IF_NO_PEER_CERT) != 0;
 8007232:	f3c4 0340 	ubfx	r3, r4, #1, #1
            opts.verifyPeer =
 8007236:	f004 0001 	and.w	r0, r4, #1
 800723a:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
                    (mode & WOLFSSL_VERIFY_FAIL_EXCEPT_PSK) != 0;
 800723e:	f3c4 1400 	ubfx	r4, r4, #4, #1
            opts.verifyPeer =
 8007242:	ea40 04c4 	orr.w	r4, r0, r4, lsl #3
 8007246:	f022 030d 	bic.w	r3, r2, #13
 800724a:	431c      	orrs	r4, r3
 800724c:	f88d 4004 	strb.w	r4, [sp, #4]
#endif
        }
    }

    return opts;
}
 8007250:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007254:	b002      	add	sp, #8
 8007256:	bd10      	pop	{r4, pc}

08007258 <wolfSSL_CertManagerFree>:
/* Dispose of certificate manager.
 *
 * @param [in, out] cm  Certificate manager.
 */
void wolfSSL_CertManagerFree(WOLFSSL_CERT_MANAGER* cm)
{
 8007258:	b510      	push	{r4, lr}
    WOLFSSL_ENTER("wolfSSL_CertManagerFree");

    /* Validate parameter. */
    if (cm != NULL) {
 800725a:	4604      	mov	r4, r0
 800725c:	b180      	cbz	r0, 8007280 <wolfSSL_CertManagerFree+0x28>
        int doFree = 0;
        int ret;

        /* Decrement reference count and check if value is 0. */
        wolfSSL_RefDec(&cm->ref, &doFree, &ret);
 800725e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007260:	3b01      	subs	r3, #1
 8007262:	65c3      	str	r3, [r0, #92]	; 0x5c
            WOLFSSL_MSG("Couldn't lock cm mutex");
        }
    #else
        (void)ret;
    #endif
        if (doFree) {
 8007264:	b963      	cbnz	r3, 8007280 <wolfSSL_CertManagerFree+0x28>
            }
        #endif
    #endif /* HAVE_OCSP */

            /* Dispose of CA table and mutex. */
            FreeSignerTable(cm->caTable, CA_TABLE_SIZE, cm->heap);
 8007266:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007268:	210b      	movs	r1, #11
 800726a:	f00c fcab 	bl	8013bc4 <FreeSignerTable>
            wc_FreeMutex(&cm->caLock);
 800726e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007272:	f015 ff41 	bl	801d0f8 <wc_FreeMutex>
        #endif

            /* Dispose of reference count. */
            wolfSSL_RefFree(&cm->ref);
            /* Dispose of certificate manager memory. */
            XFREE(cm, cm->heap, DYNAMIC_TYPE_CERT_MANAGER);
 8007276:	4620      	mov	r0, r4
        }
    }
}
 8007278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            XFREE(cm, cm->heap, DYNAMIC_TYPE_CERT_MANAGER);
 800727c:	f016 bb7a 	b.w	801d974 <free>
}
 8007280:	bd10      	pop	{r4, pc}

08007282 <wolfSSL_CertManagerNew_ex>:
{
 8007282:	b538      	push	{r3, r4, r5, lr}
 8007284:	4605      	mov	r5, r0
    cm = (WOLFSSL_CERT_MANAGER*)XMALLOC(sizeof(WOLFSSL_CERT_MANAGER), heap,
 8007286:	2060      	movs	r0, #96	; 0x60
 8007288:	f016 fb6c 	bl	801d964 <malloc>
    if (cm == NULL) {
 800728c:	4604      	mov	r4, r0
 800728e:	b170      	cbz	r0, 80072ae <wolfSSL_CertManagerNew_ex+0x2c>
        XMEMSET(cm, 0, sizeof(WOLFSSL_CERT_MANAGER));
 8007290:	2260      	movs	r2, #96	; 0x60
 8007292:	2100      	movs	r1, #0
 8007294:	f016 fbae 	bl	801d9f4 <memset>
        if (wc_InitMutex(&cm->caLock) != 0) {
 8007298:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800729c:	f015 ff2a 	bl	801d0f4 <wc_InitMutex>
 80072a0:	b938      	cbnz	r0, 80072b2 <wolfSSL_CertManagerNew_ex+0x30>
        wolfSSL_RefInit(&cm->ref, &err);
 80072a2:	2301      	movs	r3, #1
 80072a4:	65e3      	str	r3, [r4, #92]	; 0x5c
        cm->minEccKeySz = MIN_ECCKEY_SZ;
 80072a6:	231c      	movs	r3, #28
 80072a8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        cm->heap = heap;
 80072ac:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 80072ae:	4620      	mov	r0, r4
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
        wolfSSL_CertManagerFree(cm);
 80072b2:	4620      	mov	r0, r4
 80072b4:	f7ff ffd0 	bl	8007258 <wolfSSL_CertManagerFree>
        cm = NULL;
 80072b8:	2400      	movs	r4, #0
    return cm;
 80072ba:	e7f8      	b.n	80072ae <wolfSSL_CertManagerNew_ex+0x2c>

080072bc <wolfSSL_CTX_up_ref>:
    wolfSSL_RefInc(&ctx->ref, &ret);
 80072bc:	6883      	ldr	r3, [r0, #8]
 80072be:	3301      	adds	r3, #1
 80072c0:	6083      	str	r3, [r0, #8]
}
 80072c2:	2001      	movs	r0, #1
 80072c4:	4770      	bx	lr

080072c6 <wolfSSL_CTX_free>:
    if (ctx) {
 80072c6:	b108      	cbz	r0, 80072cc <wolfSSL_CTX_free+0x6>
        FreeSSL_Ctx(ctx);
 80072c8:	f7f9 bbfa 	b.w	8000ac0 <FreeSSL_Ctx>
}
 80072cc:	4770      	bx	lr

080072ce <wolfSSL_new>:
{
 80072ce:	b538      	push	{r3, r4, r5, lr}
    if (ctx == NULL)
 80072d0:	4605      	mov	r5, r0
 80072d2:	b910      	cbnz	r0, 80072da <wolfSSL_new+0xc>
            ssl = 0;
 80072d4:	2400      	movs	r4, #0
}
 80072d6:	4620      	mov	r0, r4
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
    ssl = (WOLFSSL*) XMALLOC(sizeof(WOLFSSL), ctx->heap, DYNAMIC_TYPE_SSL);
 80072da:	f44f 7031 	mov.w	r0, #708	; 0x2c4
 80072de:	f016 fb41 	bl	801d964 <malloc>
    if (ssl)
 80072e2:	4604      	mov	r4, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d0f5      	beq.n	80072d4 <wolfSSL_new+0x6>
        if ( (ret = InitSSL(ssl, ctx, 0)) < 0) {
 80072e8:	2200      	movs	r2, #0
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f9 ffd4 	bl	8001298 <InitSSL>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	daf0      	bge.n	80072d6 <wolfSSL_new+0x8>
            FreeSSL(ssl, ctx->heap);
 80072f4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7fa fa9c 	bl	8001834 <FreeSSL>
 80072fc:	e7ea      	b.n	80072d4 <wolfSSL_new+0x6>

080072fe <wolfSSL_free>:
    if (ssl)
 80072fe:	b118      	cbz	r0, 8007308 <wolfSSL_free+0xa>
        FreeSSL(ssl, ssl->ctx->heap);
 8007300:	6803      	ldr	r3, [r0, #0]
 8007302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007304:	f7fa ba96 	b.w	8001834 <FreeSSL>
}
 8007308:	4770      	bx	lr

0800730a <wolfSSL_write>:
{
 800730a:	b510      	push	{r4, lr}
    if (ssl == NULL || data == NULL || sz < 0)
 800730c:	b138      	cbz	r0, 800731e <wolfSSL_write+0x14>
 800730e:	b131      	cbz	r1, 800731e <wolfSSL_write+0x14>
 8007310:	2a00      	cmp	r2, #0
 8007312:	db04      	blt.n	800731e <wolfSSL_write+0x14>
    ret = SendData(ssl, data, sz);
 8007314:	f7fb fd4c 	bl	8002db0 <SendData>
    if (ret < 0)
 8007318:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
}
 800731c:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 800731e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8007322:	e7fb      	b.n	800731c <wolfSSL_write+0x12>

08007324 <wolfSSL_read>:
{
 8007324:	b510      	push	{r4, lr}
    if (ssl == NULL || data == NULL || sz < 0)
 8007326:	b140      	cbz	r0, 800733a <wolfSSL_read+0x16>
 8007328:	b139      	cbz	r1, 800733a <wolfSSL_read+0x16>
 800732a:	2a00      	cmp	r2, #0
 800732c:	db05      	blt.n	800733a <wolfSSL_read+0x16>
    ret = ReceiveData(ssl, (byte*)data, sz, peek);
 800732e:	2300      	movs	r3, #0
 8007330:	f7ff fb6b 	bl	8006a0a <ReceiveData>
    if (ret < 0)
 8007334:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
}
 8007338:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 800733a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    return wolfSSL_read_internal(ssl, data, sz, FALSE);
 800733e:	e7fb      	b.n	8007338 <wolfSSL_read+0x14>

08007340 <wolfSSL_shutdown>:
{
 8007340:	b510      	push	{r4, lr}
    if (ssl == NULL)
 8007342:	4604      	mov	r4, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d042      	beq.n	80073ce <wolfSSL_shutdown+0x8e>
    if (ssl->options.quietShutdown) {
 8007348:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800734c:	0699      	lsls	r1, r3, #26
 800734e:	d433      	bmi.n	80073b8 <wolfSSL_shutdown+0x78>
        if (!ssl->options.isClosed && !ssl->options.connReset &&
 8007350:	f890 2272 	ldrb.w	r2, [r0, #626]	; 0x272
 8007354:	f012 0258 	ands.w	r2, r2, #88	; 0x58
 8007358:	d130      	bne.n	80073bc <wolfSSL_shutdown+0x7c>
            ssl->error = SendAlert(ssl, alert_warning, close_notify);
 800735a:	2101      	movs	r1, #1
 800735c:	f7fb fdd6 	bl	8002f0c <SendAlert>
            if (ssl->error < 0) {
 8007360:	2800      	cmp	r0, #0
            ssl->error = SendAlert(ssl, alert_warning, close_notify);
 8007362:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
            if (ssl->error < 0) {
 8007366:	db32      	blt.n	80073ce <wolfSSL_shutdown+0x8e>
            ssl->options.sentNotify = 1;  /* don't send close_notify twice */
 8007368:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 800736c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            if (ssl->options.closeNotify) {
 8007370:	069a      	lsls	r2, r3, #26
            ssl->options.sentNotify = 1;  /* don't send close_notify twice */
 8007372:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
            if (ssl->options.closeNotify) {
 8007376:	d401      	bmi.n	800737c <wolfSSL_shutdown+0x3c>
                return ret;
 8007378:	2002      	movs	r0, #2
}
 800737a:	bd10      	pop	{r4, pc}
                ssl->options.shutdownDone = 1;
 800737c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007380:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
                ret = WOLFSSL_SUCCESS;
 8007384:	2001      	movs	r0, #1
        if (ssl->options.sentNotify && !ssl->options.closeNotify) {
 8007386:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 800738a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800738e:	2b40      	cmp	r3, #64	; 0x40
 8007390:	d1f3      	bne.n	800737a <wolfSSL_shutdown+0x3a>
            ret = ProcessReply(ssl);
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff fb36 	bl	8006a04 <ProcessReply>
            if ((ret == ZERO_RETURN) || (ret == SOCKET_ERROR_E)) {
 8007398:	f46f 73ab 	mvn.w	r3, #342	; 0x156
 800739c:	4298      	cmp	r0, r3
 800739e:	d002      	beq.n	80073a6 <wolfSSL_shutdown+0x66>
 80073a0:	f510 7f9a 	cmn.w	r0, #308	; 0x134
 80073a4:	d10d      	bne.n	80073c2 <wolfSSL_shutdown+0x82>
                ssl->options.shutdownDone = 1;
 80073a6:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80073aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ae:	f884 3272 	strb.w	r3, [r4, #626]	; 0x272
                ssl->error = WOLFSSL_ERROR_NONE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        ret = WOLFSSL_SUCCESS;
 80073b8:	2001      	movs	r0, #1
 80073ba:	e7de      	b.n	800737a <wolfSSL_shutdown+0x3a>
    int  ret = WOLFSSL_FATAL_ERROR;
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c0:	e7e1      	b.n	8007386 <wolfSSL_shutdown+0x46>
            } else if (ret == MEMORY_E) {
 80073c2:	307d      	adds	r0, #125	; 0x7d
 80073c4:	d003      	beq.n	80073ce <wolfSSL_shutdown+0x8e>
            } else if (ssl->error == WOLFSSL_ERROR_NONE) {
 80073c6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0d4      	beq.n	8007378 <wolfSSL_shutdown+0x38>
                ret = WOLFSSL_FATAL_ERROR;
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d2:	e7d2      	b.n	800737a <wolfSSL_shutdown+0x3a>

080073d4 <wolfSSL_get_error>:
    if (ret > 0)
 80073d4:	2900      	cmp	r1, #0
{
 80073d6:	4603      	mov	r3, r0
    if (ret > 0)
 80073d8:	dc14      	bgt.n	8007404 <wolfSSL_get_error+0x30>
    if (ssl == NULL)
 80073da:	b1a8      	cbz	r0, 8007408 <wolfSSL_get_error+0x34>
    if (ssl->error == WANT_READ)
 80073dc:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 80073e0:	f46f 72a1 	mvn.w	r2, #322	; 0x142
 80073e4:	4290      	cmp	r0, r2
 80073e6:	d012      	beq.n	800740e <wolfSSL_get_error+0x3a>
    else if (ssl->error == WANT_WRITE)
 80073e8:	f46f 72a3 	mvn.w	r2, #326	; 0x146
 80073ec:	4290      	cmp	r0, r2
 80073ee:	d010      	beq.n	8007412 <wolfSSL_get_error+0x3e>
    else if (ssl->error == ZERO_RETURN || ssl->options.shutdownDone)
 80073f0:	f46f 72ab 	mvn.w	r2, #342	; 0x156
 80073f4:	4290      	cmp	r0, r2
 80073f6:	d00e      	beq.n	8007416 <wolfSSL_get_error+0x42>
 80073f8:	f993 3272 	ldrsb.w	r3, [r3, #626]	; 0x272
        return WOLFSSL_ERROR_ZERO_RETURN;       /* convert to OpenSSL type */
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bfb8      	it	lt
 8007400:	2006      	movlt	r0, #6
 8007402:	4770      	bx	lr
        return WOLFSSL_ERROR_NONE;
 8007404:	2000      	movs	r0, #0
 8007406:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8007408:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800740c:	4770      	bx	lr
        return WOLFSSL_ERROR_WANT_READ;         /* convert to OpenSSL type */
 800740e:	2002      	movs	r0, #2
 8007410:	4770      	bx	lr
        return WOLFSSL_ERROR_WANT_WRITE;        /* convert to OpenSSL type */
 8007412:	2003      	movs	r0, #3
 8007414:	4770      	bx	lr
        return WOLFSSL_ERROR_ZERO_RETURN;       /* convert to OpenSSL type */
 8007416:	2006      	movs	r0, #6
}
 8007418:	4770      	bx	lr

0800741a <wolfSSL_GetMacSecret>:
    if (ssl == NULL)
 800741a:	b170      	cbz	r0, 800743a <wolfSSL_GetMacSecret+0x20>
    if ( (ssl->options.side == WOLFSSL_CLIENT_END && !verify) ||
 800741c:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 8007420:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007424:	2b10      	cmp	r3, #16
 8007426:	d103      	bne.n	8007430 <wolfSSL_GetMacSecret+0x16>
 8007428:	b929      	cbnz	r1, 8007436 <wolfSSL_GetMacSecret+0x1c>
        return ssl->keys.client_write_MAC_secret;
 800742a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800742e:	4770      	bx	lr
    if ( (ssl->options.side == WOLFSSL_CLIENT_END && !verify) ||
 8007430:	b90b      	cbnz	r3, 8007436 <wolfSSL_GetMacSecret+0x1c>
         (ssl->options.side == WOLFSSL_SERVER_END &&  verify) )
 8007432:	2900      	cmp	r1, #0
 8007434:	d1f9      	bne.n	800742a <wolfSSL_GetMacSecret+0x10>
        return ssl->keys.server_write_MAC_secret;
 8007436:	f500 70c8 	add.w	r0, r0, #400	; 0x190
}
 800743a:	4770      	bx	lr

0800743c <AlreadySigner>:
{
 800743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	460d      	mov	r5, r1
    if (cm == NULL || hash == NULL) {
 8007442:	4606      	mov	r6, r0
 8007444:	b918      	cbnz	r0, 800744e <AlreadySigner+0x12>
        return ret;
 8007446:	2400      	movs	r4, #0
}
 8007448:	4620      	mov	r0, r4
 800744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (cm == NULL || hash == NULL) {
 800744e:	2900      	cmp	r1, #0
 8007450:	d0f9      	beq.n	8007446 <AlreadySigner+0xa>
    row = HashSigner(hash);
 8007452:	4608      	mov	r0, r1
 8007454:	f7ff fecf 	bl	80071f6 <HashSigner>
    if (wc_LockMutex(&cm->caLock) != 0) {
 8007458:	f106 0854 	add.w	r8, r6, #84	; 0x54
    row = HashSigner(hash);
 800745c:	4607      	mov	r7, r0
    if (wc_LockMutex(&cm->caLock) != 0) {
 800745e:	4640      	mov	r0, r8
 8007460:	f015 fe4c 	bl	801d0fc <wc_LockMutex>
 8007464:	4604      	mov	r4, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	d1ed      	bne.n	8007446 <AlreadySigner+0xa>
    signers = cm->caTable[row];
 800746a:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
    while (signers) {
 800746e:	b91e      	cbnz	r6, 8007478 <AlreadySigner+0x3c>
    wc_UnLockMutex(&cm->caLock);
 8007470:	4640      	mov	r0, r8
 8007472:	f015 fe45 	bl	801d100 <wc_UnLockMutex>
    return ret;
 8007476:	e7e7      	b.n	8007448 <AlreadySigner+0xc>
        if (XMEMCMP(hash, subjectHash, SIGNER_DIGEST_SIZE) == 0) {
 8007478:	2214      	movs	r2, #20
 800747a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800747e:	4628      	mov	r0, r5
 8007480:	f016 fa80 	bl	801d984 <memcmp>
 8007484:	b108      	cbz	r0, 800748a <AlreadySigner+0x4e>
        signers = signers->next;
 8007486:	6cb6      	ldr	r6, [r6, #72]	; 0x48
 8007488:	e7f1      	b.n	800746e <AlreadySigner+0x32>
            ret = 1; /* success */
 800748a:	2401      	movs	r4, #1
 800748c:	e7f0      	b.n	8007470 <AlreadySigner+0x34>

0800748e <GetCA>:
{
 800748e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007490:	460d      	mov	r5, r1
    if (cm == NULL || hash == NULL)
 8007492:	4604      	mov	r4, r0
 8007494:	b910      	cbnz	r0, 800749c <GetCA+0xe>
        return NULL;
 8007496:	2400      	movs	r4, #0
}
 8007498:	4620      	mov	r0, r4
 800749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cm == NULL || hash == NULL)
 800749c:	2900      	cmp	r1, #0
 800749e:	d0fa      	beq.n	8007496 <GetCA+0x8>
    row = HashSigner(hash);
 80074a0:	4608      	mov	r0, r1
 80074a2:	f7ff fea8 	bl	80071f6 <HashSigner>
    if (wc_LockMutex(&cm->caLock) != 0)
 80074a6:	f104 0754 	add.w	r7, r4, #84	; 0x54
    row = HashSigner(hash);
 80074aa:	4606      	mov	r6, r0
    if (wc_LockMutex(&cm->caLock) != 0)
 80074ac:	4638      	mov	r0, r7
 80074ae:	f015 fe25 	bl	801d0fc <wc_LockMutex>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d1ef      	bne.n	8007496 <GetCA+0x8>
    signers = cm->caTable[row];
 80074b6:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    while (signers) {
 80074ba:	b91c      	cbnz	r4, 80074c4 <GetCA+0x36>
    wc_UnLockMutex(&cm->caLock);
 80074bc:	4638      	mov	r0, r7
 80074be:	f015 fe1f 	bl	801d100 <wc_UnLockMutex>
    return ret;
 80074c2:	e7e9      	b.n	8007498 <GetCA+0xa>
        if (XMEMCMP(hash, subjectHash, SIGNER_DIGEST_SIZE) == 0) {
 80074c4:	2214      	movs	r2, #20
 80074c6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80074ca:	4628      	mov	r0, r5
 80074cc:	f016 fa5a 	bl	801d984 <memcmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d0f3      	beq.n	80074bc <GetCA+0x2e>
        signers = signers->next;
 80074d4:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 80074d6:	e7f0      	b.n	80074ba <GetCA+0x2c>

080074d8 <GetCAByName>:
{
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	4688      	mov	r8, r1
    if (cm == NULL)
 80074de:	4604      	mov	r4, r0
 80074e0:	b918      	cbnz	r0, 80074ea <GetCAByName+0x12>
        return NULL;
 80074e2:	2500      	movs	r5, #0
}
 80074e4:	4628      	mov	r0, r5
 80074e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (wc_LockMutex(&cm->caLock) != 0)
 80074ea:	f100 0954 	add.w	r9, r0, #84	; 0x54
 80074ee:	4648      	mov	r0, r9
 80074f0:	f015 fe04 	bl	801d0fc <wc_LockMutex>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d1f4      	bne.n	80074e2 <GetCAByName+0xa>
 80074f8:	1f27      	subs	r7, r4, #4
 80074fa:	3428      	adds	r4, #40	; 0x28
        signers = cm->caTable[row];
 80074fc:	f857 6f04 	ldr.w	r6, [r7, #4]!
        while (signers && ret == NULL) {
 8007500:	2500      	movs	r5, #0
 8007502:	b17e      	cbz	r6, 8007524 <GetCAByName+0x4c>
 8007504:	b11d      	cbz	r5, 800750e <GetCAByName+0x36>
    wc_UnLockMutex(&cm->caLock);
 8007506:	4648      	mov	r0, r9
 8007508:	f015 fdfa 	bl	801d100 <wc_UnLockMutex>
    return ret;
 800750c:	e7ea      	b.n	80074e4 <GetCAByName+0xc>
            if (XMEMCMP(hash, signers->subjectNameHash,
 800750e:	f106 0120 	add.w	r1, r6, #32
 8007512:	2214      	movs	r2, #20
 8007514:	4640      	mov	r0, r8
 8007516:	f016 fa35 	bl	801d984 <memcmp>
 800751a:	2800      	cmp	r0, #0
 800751c:	bf08      	it	eq
 800751e:	4635      	moveq	r5, r6
            signers = signers->next;
 8007520:	6cb6      	ldr	r6, [r6, #72]	; 0x48
 8007522:	e7ee      	b.n	8007502 <GetCAByName+0x2a>
    for (row = 0; row < CA_TABLE_SIZE && ret == NULL; row++) {
 8007524:	42bc      	cmp	r4, r7
 8007526:	d0ee      	beq.n	8007506 <GetCAByName+0x2e>
 8007528:	2d00      	cmp	r5, #0
 800752a:	d0e7      	beq.n	80074fc <GetCAByName+0x24>
 800752c:	e7eb      	b.n	8007506 <GetCAByName+0x2e>
	...

08007530 <AddCA>:
{
 8007530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    DerBuffer*   der = *pDer;
 8007534:	f8d1 a000 	ldr.w	sl, [r1]
{
 8007538:	4688      	mov	r8, r1
 800753a:	4691      	mov	r9, r2
 800753c:	461d      	mov	r5, r3
    if (cm == NULL) {
 800753e:	4607      	mov	r7, r0
 8007540:	b940      	cbnz	r0, 8007554 <AddCA+0x24>
        FreeDer(pDer);
 8007542:	4608      	mov	r0, r1
 8007544:	f00c fd1c 	bl	8013f80 <FreeDer>
        return BAD_FUNC_ARG;
 8007548:	f06f 06ac 	mvn.w	r6, #172	; 0xac
}
 800754c:	4630      	mov	r0, r6
 800754e:	b003      	add	sp, #12
 8007550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), NULL,
 8007554:	f44f 7056 	mov.w	r0, #856	; 0x358
 8007558:	f016 fa04 	bl	801d964 <malloc>
    if (cert == NULL) {
 800755c:	4604      	mov	r4, r0
 800755e:	b928      	cbnz	r0, 800756c <AddCA+0x3c>
        FreeDer(pDer);
 8007560:	4640      	mov	r0, r8
 8007562:	f00c fd0d 	bl	8013f80 <FreeDer>
        return MEMORY_E;
 8007566:	f06f 067c 	mvn.w	r6, #124	; 0x7c
 800756a:	e7ef      	b.n	800754c <AddCA+0x1c>
    InitDecodedCert(cert, der->buffer, der->length, cm->heap);
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007572:	f8da 1000 	ldr.w	r1, [sl]
 8007576:	f00c fa4f 	bl	8013a18 <InitDecodedCert>
    ret = ParseCert(cert, CA_TYPE, verify, cm);
 800757a:	463b      	mov	r3, r7
 800757c:	462a      	mov	r2, r5
 800757e:	2105      	movs	r1, #5
 8007580:	4620      	mov	r0, r4
 8007582:	f00e f863 	bl	801564c <ParseCert>
 8007586:	4606      	mov	r6, r0
    if (verify) {
 8007588:	b175      	cbz	r5, 80075a8 <AddCA+0x78>
        switch (cert->keyOID) {
 800758a:	69e3      	ldr	r3, [r4, #28]
 800758c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007590:	d021      	beq.n	80075d6 <AddCA+0xa6>
 8007592:	f240 2206 	movw	r2, #518	; 0x206
 8007596:	4293      	cmp	r3, r2
 8007598:	d106      	bne.n	80075a8 <AddCA+0x78>
                if (cm->minEccKeySz < 0 ||
 800759a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800759e:	2b00      	cmp	r3, #0
 80075a0:	db1d      	blt.n	80075de <AddCA+0xae>
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d31a      	bcc.n	80075de <AddCA+0xae>
    if (ret == 0 && cert->isCA == 0 && type != WOLFSSL_USER_CA) {
 80075a8:	bb76      	cbnz	r6, 8007608 <AddCA+0xd8>
 80075aa:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
 80075ae:	06d8      	lsls	r0, r3, #27
 80075b0:	d418      	bmi.n	80075e4 <AddCA+0xb4>
 80075b2:	f1b9 0f01 	cmp.w	r9, #1
 80075b6:	d120      	bne.n	80075fa <AddCA+0xca>
    subjectHash = cert->extSubjKeyId;
 80075b8:	f504 7b33 	add.w	fp, r4, #716	; 0x2cc
    else if (ret == 0 && AlreadySigner(cm, subjectHash)) {
 80075bc:	4659      	mov	r1, fp
 80075be:	4638      	mov	r0, r7
 80075c0:	f7ff ff3c 	bl	800743c <AlreadySigner>
 80075c4:	bb00      	cbnz	r0, 8007608 <AddCA+0xd8>
        signer = MakeSigner(cm->heap);
 80075c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c8:	f00c fad6 	bl	8013b78 <MakeSigner>
        if (!signer)
 80075cc:	4605      	mov	r5, r0
 80075ce:	b9e8      	cbnz	r0, 800760c <AddCA+0xdc>
            ret = MEMORY_ERROR;
 80075d0:	f46f 7697 	mvn.w	r6, #302	; 0x12e
 80075d4:	e074      	b.n	80076c0 <AddCA+0x190>
                if (cm->minEccKeySz < 0 ||
 80075d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d9e4      	bls.n	80075a8 <AddCA+0x78>
                    ret = ECC_KEY_SIZE_E;
 80075de:	4e42      	ldr	r6, [pc, #264]	; (80076e8 <AddCA+0x1b8>)
    Signer*     signer = NULL;
 80075e0:	2500      	movs	r5, #0
 80075e2:	e06d      	b.n	80076c0 <AddCA+0x190>
    else if (ret == 0 && cert->isCA == 1 && type != WOLFSSL_USER_CA &&
 80075e4:	f1b9 0f01 	cmp.w	r9, #1
 80075e8:	d0e6      	beq.n	80075b8 <AddCA+0x88>
        !cert->selfSigned && (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) == 0) {
 80075ea:	f894 3356 	ldrb.w	r3, [r4, #854]	; 0x356
    else if (ret == 0 && cert->isCA == 1 && type != WOLFSSL_USER_CA &&
 80075ee:	0799      	lsls	r1, r3, #30
 80075f0:	d4e2      	bmi.n	80075b8 <AddCA+0x88>
        !cert->selfSigned && (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) == 0) {
 80075f2:	f8b4 32f8 	ldrh.w	r3, [r4, #760]	; 0x2f8
 80075f6:	075a      	lsls	r2, r3, #29
 80075f8:	d4de      	bmi.n	80075b8 <AddCA+0x88>
    Signer*     signer = NULL;
 80075fa:	4635      	mov	r5, r6
        ret = NOT_CA_ERROR;
 80075fc:	f46f 76b2 	mvn.w	r6, #356	; 0x164
 8007600:	e05e      	b.n	80076c0 <AddCA+0x190>
            ret = BAD_MUTEX_E;
 8007602:	f06f 0669 	mvn.w	r6, #105	; 0x69
 8007606:	e05b      	b.n	80076c0 <AddCA+0x190>
 8007608:	2500      	movs	r5, #0
 800760a:	e059      	b.n	80076c0 <AddCA+0x190>
        signer->keyOID         = cert->keyOID;
 800760c:	69e3      	ldr	r3, [r4, #28]
 800760e:	606b      	str	r3, [r5, #4]
        if (cert->pubKeyStored) {
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	b11b      	cbz	r3, 800761c <AddCA+0xec>
            signer->publicKey      = cert->publicKey;
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	60eb      	str	r3, [r5, #12]
            signer->pubKeySize     = cert->pubKeySize;
 8007618:	6863      	ldr	r3, [r4, #4]
 800761a:	602b      	str	r3, [r5, #0]
        if (cert->subjectCNStored) {
 800761c:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
        signer->selfSigned     = cert->selfSigned;
 8007620:	7aea      	ldrb	r2, [r5, #11]
        if (cert->subjectCNStored) {
 8007622:	07db      	lsls	r3, r3, #31
            signer->nameLen        = cert->subjectCNLen;
 8007624:	bf41      	itttt	mi
 8007626:	6ea3      	ldrmi	r3, [r4, #104]	; 0x68
 8007628:	612b      	strmi	r3, [r5, #16]
            signer->name           = cert->subjectCN;
 800762a:	6e63      	ldrmi	r3, [r4, #100]	; 0x64
 800762c:	616b      	strmi	r3, [r5, #20]
        signer->maxPathLen     = cert->maxPathLen;
 800762e:	f894 32f5 	ldrb.w	r3, [r4, #757]	; 0x2f5
 8007632:	72ab      	strb	r3, [r5, #10]
        signer->selfSigned     = cert->selfSigned;
 8007634:	f894 3356 	ldrb.w	r3, [r4, #854]	; 0x356
 8007638:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800763c:	f363 0200 	bfi	r2, r3, #0, #1
 8007640:	72ea      	strb	r2, [r5, #11]
        signer->permittedNames = cert->permittedNames;
 8007642:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007644:	61ab      	str	r3, [r5, #24]
        XMEMCPY(signer->subjectKeyIdHash, cert->extSubjKeyId,
 8007646:	f105 0634 	add.w	r6, r5, #52	; 0x34
        signer->excludedNames  = cert->excludedNames;
 800764a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800764c:	61eb      	str	r3, [r5, #28]
        XMEMCPY(signer->subjectKeyIdHash, cert->extSubjKeyId,
 800764e:	4659      	mov	r1, fp
 8007650:	2214      	movs	r2, #20
 8007652:	4630      	mov	r0, r6
 8007654:	f016 f9a6 	bl	801d9a4 <memcpy>
        XMEMCPY(signer->subjectNameHash, cert->subjectHash,
 8007658:	2214      	movs	r2, #20
 800765a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800765e:	f105 0020 	add.w	r0, r5, #32
 8007662:	f016 f99f 	bl	801d9a4 <memcpy>
        signer->keyUsage = cert->extKeyUsageSet ? cert->extKeyUsage
 8007666:	f994 3354 	ldrsb.w	r3, [r4, #852]	; 0x354
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfb4      	ite	lt
 800766e:	f8b4 32f8 	ldrhlt.w	r3, [r4, #760]	; 0x2f8
 8007672:	f64f 73ff 	movwge	r3, #65535	; 0xffff
 8007676:	812b      	strh	r3, [r5, #8]
        signer->next    = NULL; /* If Key Usage not set, all uses valid. */
 8007678:	2300      	movs	r3, #0
 800767a:	64ab      	str	r3, [r5, #72]	; 0x48
        row = HashSigner(signer->subjectKeyIdHash);
 800767c:	4630      	mov	r0, r6
        cert->excludedNames = NULL;
 800767e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
        cert->publicKey = 0;    /* in case lock fails don't free here.   */
 8007682:	6023      	str	r3, [r4, #0]
        cert->subjectCN = 0;
 8007684:	6663      	str	r3, [r4, #100]	; 0x64
        row = HashSigner(signer->subjectKeyIdHash);
 8007686:	f7ff fdb6 	bl	80071f6 <HashSigner>
        if (wc_LockMutex(&cm->caLock) == 0) {
 800768a:	f107 0354 	add.w	r3, r7, #84	; 0x54
        row = HashSigner(signer->subjectKeyIdHash);
 800768e:	4683      	mov	fp, r0
        if (wc_LockMutex(&cm->caLock) == 0) {
 8007690:	4618      	mov	r0, r3
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	f015 fd32 	bl	801d0fc <wc_LockMutex>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	4606      	mov	r6, r0
 800769c:	2800      	cmp	r0, #0
 800769e:	d1b0      	bne.n	8007602 <AddCA+0xd2>
            signer->next = cm->caTable[row];
 80076a0:	f857 202b 	ldr.w	r2, [r7, fp, lsl #2]
 80076a4:	64aa      	str	r2, [r5, #72]	; 0x48
            wc_UnLockMutex(&cm->caLock);
 80076a6:	4618      	mov	r0, r3
            cm->caTable[row] = signer;   /* takes ownership */
 80076a8:	f847 502b 	str.w	r5, [r7, fp, lsl #2]
            wc_UnLockMutex(&cm->caLock);
 80076ac:	f015 fd28 	bl	801d100 <wc_UnLockMutex>
            if (cm->caCacheCallback)
 80076b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b2:	b12b      	cbz	r3, 80076c0 <AddCA+0x190>
                cm->caCacheCallback(der->buffer, (int)der->length, type);
 80076b4:	f8da 1008 	ldr.w	r1, [sl, #8]
 80076b8:	f8da 0000 	ldr.w	r0, [sl]
 80076bc:	464a      	mov	r2, r9
 80076be:	4798      	blx	r3
    FreeDecodedCert(cert);
 80076c0:	4620      	mov	r0, r4
 80076c2:	f00c f9d2 	bl	8013a6a <FreeDecodedCert>
    if (ret != 0 && signer != NULL)
 80076c6:	b126      	cbz	r6, 80076d2 <AddCA+0x1a2>
 80076c8:	b11d      	cbz	r5, 80076d2 <AddCA+0x1a2>
        FreeSigner(signer, cm->heap);
 80076ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076cc:	4628      	mov	r0, r5
 80076ce:	f00c fa5f 	bl	8013b90 <FreeSigner>
    XFREE(cert, NULL, DYNAMIC_TYPE_DCERT);
 80076d2:	4620      	mov	r0, r4
 80076d4:	f016 f94e 	bl	801d974 <free>
    FreeDer(pDer);
 80076d8:	4640      	mov	r0, r8
 80076da:	f00c fc51 	bl	8013f80 <FreeDer>
    return ret == 0 ? WOLFSSL_SUCCESS : ret;
 80076de:	2e00      	cmp	r6, #0
 80076e0:	bf08      	it	eq
 80076e2:	2601      	moveq	r6, #1
 80076e4:	e732      	b.n	800754c <AddCA+0x1c>
 80076e6:	bf00      	nop
 80076e8:	fffffe66 	.word	0xfffffe66

080076ec <wolfSSL_CTX_set_verify>:

WOLFSSL_ABI
void wolfSSL_CTX_set_verify(WOLFSSL_CTX* ctx, int mode, VerifyCallback vc)
{
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4615      	mov	r5, r2
    SetVerifyOptions opts;

    WOLFSSL_ENTER("wolfSSL_CTX_set_verify");
    if (ctx == NULL)
 80076f0:	4604      	mov	r4, r0
 80076f2:	b1b8      	cbz	r0, 8007724 <wolfSSL_CTX_set_verify+0x38>
        return;

    opts = ModeToVerifyOptions(mode);
 80076f4:	4608      	mov	r0, r1
 80076f6:	f7ff fd86 	bl	8007206 <ModeToVerifyOptions>

    ctx->verifyNone     = opts.verifyNone;
    ctx->verifyPeer     = opts.verifyPeer;
 80076fa:	f3c0 0200 	ubfx	r2, r0, #0, #1
 80076fe:	f000 0302 	and.w	r3, r0, #2
 8007702:	4313      	orrs	r3, r2
    ctx->failNoCert     = opts.failNoCert;
 8007704:	f3c0 0280 	ubfx	r2, r0, #2, #1
    ctx->verifyPeer     = opts.verifyPeer;
 8007708:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800770c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    ctx->failNoCertxPSK = opts.failNoCertxPSK;
#if defined(WOLFSSL_TLS13) && defined(WOLFSSL_POST_HANDSHAKE_AUTH)
    ctx->verifyPostHandshake = opts.verifyPostHandshake;
#endif

    ctx->verifyCallback = vc;
 8007710:	64a5      	str	r5, [r4, #72]	; 0x48
    ctx->failNoCertxPSK = opts.failNoCertxPSK;
 8007712:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    ctx->verifyPeer     = opts.verifyPeer;
 8007716:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800771a:	f022 020f 	bic.w	r2, r2, #15
 800771e:	4313      	orrs	r3, r2
 8007720:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007724:	bd38      	pop	{r3, r4, r5, pc}

08007726 <wolfSSL_CTX_set_cipher_list>:

#endif


int wolfSSL_CTX_set_cipher_list(WOLFSSL_CTX* ctx, const char* list)
{
 8007726:	b538      	push	{r3, r4, r5, lr}
 8007728:	460d      	mov	r5, r1
    WOLFSSL_ENTER("wolfSSL_CTX_set_cipher_list");

    if (ctx == NULL)
 800772a:	4604      	mov	r4, r0
 800772c:	b908      	cbnz	r0, 8007732 <wolfSSL_CTX_set_cipher_list+0xc>
        return WOLFSSL_FAILURE;
 800772e:	2000      	movs	r0, #0
    return wolfSSL_parse_cipher_list(ctx, ctx->suites, list);
#else
    return (SetCipherList(ctx, ctx->suites, list)) ?
        WOLFSSL_SUCCESS : WOLFSSL_FAILURE;
#endif
}
 8007730:	bd38      	pop	{r3, r4, r5, pc}
    if (AllocateCtxSuites(ctx) != 0)
 8007732:	f7f9 fa3f 	bl	8000bb4 <AllocateCtxSuites>
 8007736:	2800      	cmp	r0, #0
 8007738:	d1f9      	bne.n	800772e <wolfSSL_CTX_set_cipher_list+0x8>
    return (SetCipherList(ctx, ctx->suites, list)) ?
 800773a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800773c:	462a      	mov	r2, r5
 800773e:	4620      	mov	r0, r4
 8007740:	f7fb ffee 	bl	8003720 <SetCipherList>
        WOLFSSL_SUCCESS : WOLFSSL_FAILURE;
 8007744:	3800      	subs	r0, #0
 8007746:	bf18      	it	ne
 8007748:	2001      	movne	r0, #1
 800774a:	e7f1      	b.n	8007730 <wolfSSL_CTX_set_cipher_list+0xa>

0800774c <wolfSSL_connect>:
    }

    /* please see note at top of README if you get an error from connect */
    WOLFSSL_ABI
    int wolfSSL_connect(WOLFSSL* ssl)
    {
 800774c:	b538      	push	{r3, r4, r5, lr}

        #ifdef HAVE_ERRNO_H
            errno = 0;
        #endif

        if (ssl == NULL)
 800774e:	4604      	mov	r4, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	f000 80ea 	beq.w	800792a <wolfSSL_connect+0x1de>

        WOLFSSL_ENTER("wolfSSL_connect");

        /* make sure this wolfSSL object has arrays and rng setup. Protects
         * case where the WOLFSSL object is reused via wolfSSL_clear() */
        if ((ret = ReinitSSL(ssl, ssl->ctx, 0)) != 0) {
 8007756:	6801      	ldr	r1, [r0, #0]
 8007758:	2200      	movs	r2, #0
 800775a:	f7f9 fd5a 	bl	8001212 <ReinitSSL>
 800775e:	4605      	mov	r5, r0
 8007760:	bbb0      	cbnz	r0, 80077d0 <wolfSSL_connect+0x84>
                return WOLFSSL_FATAL_ERROR;
            }
        }
#endif /* WOLFSSL_WOLFSENTRY_HOOKS */

        if (ssl->options.side != WOLFSSL_CLIENT_END) {
 8007762:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8007766:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800776a:	2b10      	cmp	r3, #16
 800776c:	d003      	beq.n	8007776 <wolfSSL_connect+0x2a>
            ssl->error = SIDE_ERROR;
 800776e:	4b70      	ldr	r3, [pc, #448]	; (8007930 <wolfSSL_connect+0x1e4>)
    #if !defined(WOLFSSL_NO_TLS12) || !defined(NO_OLD_TLS)
        case FIRST_REPLY_SECOND :
            /* CLIENT: Fail-safe for Server Authentication. */
            if (!ssl->options.peerAuthGood) {
                WOLFSSL_MSG("Server authentication did not happen");
                ssl->error = NO_PEER_VERIFY;
 8007770:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                return WOLFSSL_FATAL_ERROR;
 8007774:	e02a      	b.n	80077cc <wolfSSL_connect+0x80>
        advanceState = ssl->fragOffset == 0 &&
 8007776:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800777a:	b94b      	cbnz	r3, 8007790 <wolfSSL_connect+0x44>
            (ssl->options.connectState == CONNECT_BEGIN ||
 800777c:	f894 5281 	ldrb.w	r5, [r4, #641]	; 0x281
        advanceState = ssl->fragOffset == 0 &&
 8007780:	f015 0ffd 	tst.w	r5, #253	; 0xfd
 8007784:	d026      	beq.n	80077d4 <wolfSSL_connect+0x88>
             ssl->options.connectState == HELLO_AGAIN ||
 8007786:	3d04      	subs	r5, #4
 8007788:	2d04      	cmp	r5, #4
 800778a:	bf8c      	ite	hi
 800778c:	2500      	movhi	r5, #0
 800778e:	2501      	movls	r5, #1
        if (ssl->buffers.outputBuffer.length > 0
 8007790:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007794:	b1a3      	cbz	r3, 80077c0 <wolfSSL_connect+0x74>
            ret = SendBuffered(ssl);
 8007796:	4620      	mov	r0, r4
 8007798:	f7fa f8ca 	bl	8001930 <SendBuffered>
            if (ret == 0) {
 800779c:	b9a0      	cbnz	r0, 80077c8 <wolfSSL_connect+0x7c>
                if (ssl->fragOffset == 0 && !ssl->options.buildingMsg) {
 800779e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80077a2:	b96b      	cbnz	r3, 80077c0 <wolfSSL_connect+0x74>
 80077a4:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
 80077a8:	f011 0108 	ands.w	r1, r1, #8
 80077ac:	d108      	bne.n	80077c0 <wolfSSL_connect+0x74>
                    if (advanceState) {
 80077ae:	b13d      	cbz	r5, 80077c0 <wolfSSL_connect+0x74>
                        ssl->options.connectState++;
 80077b0:	f894 3281 	ldrb.w	r3, [r4, #641]	; 0x281
 80077b4:	3301      	adds	r3, #1
 80077b6:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
                        FreeAsyncCtx(ssl, 0);
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7f9 fe94 	bl	80014e8 <FreeAsyncCtx>
        ret = RetrySendAlert(ssl);
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7fb fae5 	bl	8002d90 <RetrySendAlert>
        if (ret != 0) {
 80077c6:	b138      	cbz	r0, 80077d8 <wolfSSL_connect+0x8c>
                ssl->error = ret;
 80077c8:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
                return WOLFSSL_FATAL_ERROR;
 80077cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        default:
            WOLFSSL_MSG("Unknown connect state ERROR");
            return WOLFSSL_FATAL_ERROR; /* unknown connect state */
        }
    #endif /* !WOLFSSL_NO_TLS12 || !NO_OLD_TLS || !WOLFSSL_TLS13 */
    }
 80077d0:	4628      	mov	r0, r5
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
        advanceState = ssl->fragOffset == 0 &&
 80077d4:	2501      	movs	r5, #1
 80077d6:	e7db      	b.n	8007790 <wolfSSL_connect+0x44>
        switch (ssl->options.connectState) {
 80077d8:	f894 3281 	ldrb.w	r3, [r4, #641]	; 0x281
 80077dc:	2b0a      	cmp	r3, #10
 80077de:	d8f5      	bhi.n	80077cc <wolfSSL_connect+0x80>
 80077e0:	e8df f003 	tbb	[pc, r3]
 80077e4:	1c1c1006 	.word	0x1c1c1006
 80077e8:	5c312a1f 	.word	0x5c312a1f
 80077ec:	7066      	.short	0x7066
 80077ee:	77          	.byte	0x77
 80077ef:	00          	.byte	0x00
            if ( (ssl->error = SendClientHello(ssl)) != 0) {
 80077f0:	4620      	mov	r0, r4
 80077f2:	f7fc f957 	bl	8003aa4 <SendClientHello>
 80077f6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d1e6      	bne.n	80077cc <wolfSSL_connect+0x80>
            ssl->options.connectState = CLIENT_HELLO_SENT;
 80077fe:	2301      	movs	r3, #1
 8007800:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            neededState = ssl->options.resuming ? SERVER_FINISHED_COMPLETE :
 8007804:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007808:	f013 0f08 	tst.w	r3, #8
 800780c:	bf18      	it	ne
 800780e:	250a      	movne	r5, #10
                            neededState = SERVER_HELLODONE_COMPLETE;
 8007810:	bf08      	it	eq
 8007812:	2508      	moveq	r5, #8
            while (ssl->options.serverState < neededState) {
 8007814:	f894 327c 	ldrb.w	r3, [r4, #636]	; 0x27c
 8007818:	429d      	cmp	r5, r3
 800781a:	dc1a      	bgt.n	8007852 <wolfSSL_connect+0x106>
            ssl->options.connectState = FIRST_REPLY_DONE;
 800781c:	2304      	movs	r3, #4
 800781e:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            if (ssl->options.certOnly)
 8007822:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8007826:	065a      	lsls	r2, r3, #25
 8007828:	d46d      	bmi.n	8007906 <wolfSSL_connect+0x1ba>
                if (ssl->options.sendVerify) {
 800782a:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d11d      	bne.n	800786e <wolfSSL_connect+0x122>
            ssl->options.connectState = FIRST_REPLY_FIRST;
 8007832:	2305      	movs	r3, #5
 8007834:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            if (!ssl->options.resuming) {
 8007838:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 800783c:	071d      	lsls	r5, r3, #28
 800783e:	d51e      	bpl.n	800787e <wolfSSL_connect+0x132>
            ssl->options.connectState = FIRST_REPLY_SECOND;
 8007840:	2306      	movs	r3, #6
 8007842:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            if (!ssl->options.peerAuthGood) {
 8007846:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 800784a:	0798      	lsls	r0, r3, #30
 800784c:	d41f      	bmi.n	800788e <wolfSSL_connect+0x142>
                ssl->error = NO_PEER_VERIFY;
 800784e:	4b39      	ldr	r3, [pc, #228]	; (8007934 <wolfSSL_connect+0x1e8>)
 8007850:	e78e      	b.n	8007770 <wolfSSL_connect+0x24>
                if ( (ssl->error = ProcessReply(ssl)) < 0) {
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff f8d6 	bl	8006a04 <ProcessReply>
 8007858:	2800      	cmp	r0, #0
 800785a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 800785e:	dbb5      	blt.n	80077cc <wolfSSL_connect+0x80>
                else if (neededState == SERVER_FINISHED_COMPLETE) {
 8007860:	2d0a      	cmp	r5, #10
 8007862:	d1d7      	bne.n	8007814 <wolfSSL_connect+0xc8>
                    if (!ssl->options.resuming) {
 8007864:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
                            neededState = SERVER_HELLODONE_COMPLETE;
 8007868:	f013 0f08 	tst.w	r3, #8
 800786c:	e7d0      	b.n	8007810 <wolfSSL_connect+0xc4>
                    if ( (ssl->error = SendCertificate(ssl)) != 0) {
 800786e:	4620      	mov	r0, r4
 8007870:	f7fa ffec 	bl	800284c <SendCertificate>
 8007874:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007878:	2800      	cmp	r0, #0
 800787a:	d0da      	beq.n	8007832 <wolfSSL_connect+0xe6>
 800787c:	e7a6      	b.n	80077cc <wolfSSL_connect+0x80>
                if ( (ssl->error = SendClientKeyExchange(ssl)) != 0) {
 800787e:	4620      	mov	r0, r4
 8007880:	f7fc fc32 	bl	80040e8 <SendClientKeyExchange>
 8007884:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007888:	2800      	cmp	r0, #0
 800788a:	d0d9      	beq.n	8007840 <wolfSSL_connect+0xf4>
 800788c:	e79e      	b.n	80077cc <wolfSSL_connect+0x80>
                if (ssl->options.sendVerify) {
 800788e:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8007892:	0799      	lsls	r1, r3, #30
 8007894:	d139      	bne.n	800790a <wolfSSL_connect+0x1be>
            ssl->options.connectState = FIRST_REPLY_THIRD;
 8007896:	2307      	movs	r3, #7
 8007898:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            if ( (ssl->error = SendChangeCipher(ssl)) != 0) {
 800789c:	4620      	mov	r0, r4
 800789e:	f7fa fdf3 	bl	8002488 <SendChangeCipher>
 80078a2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d190      	bne.n	80077cc <wolfSSL_connect+0x80>
            ssl->options.connectState = FIRST_REPLY_FOURTH;
 80078aa:	2308      	movs	r3, #8
 80078ac:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            if ( (ssl->error = SendFinished(ssl)) != 0) {
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7fa fea1 	bl	80025f8 <SendFinished>
 80078b6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d186      	bne.n	80077cc <wolfSSL_connect+0x80>
            ssl->options.connectState = FINISHED_DONE;
 80078be:	2309      	movs	r3, #9
 80078c0:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            while (ssl->options.serverState < SERVER_FINISHED_COMPLETE)
 80078c4:	f894 327c 	ldrb.w	r3, [r4, #636]	; 0x27c
 80078c8:	2b09      	cmp	r3, #9
 80078ca:	d926      	bls.n	800791a <wolfSSL_connect+0x1ce>
            ssl->options.connectState = SECOND_REPLY_DONE;
 80078cc:	230a      	movs	r3, #10
 80078ce:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
            if (ssl->hsDoneCb) {
 80078d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078d4:	b12b      	cbz	r3, 80078e2 <wolfSSL_connect+0x196>
                int cbret = ssl->hsDoneCb(ssl, ssl->hsDoneCtx);
 80078d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078d8:	4620      	mov	r0, r4
 80078da:	4798      	blx	r3
                if (cbret < 0) {
 80078dc:	2800      	cmp	r0, #0
 80078de:	f6ff af73 	blt.w	80077c8 <wolfSSL_connect+0x7c>
            if (!ssl->options.dtls) {
 80078e2:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 80078e6:	075a      	lsls	r2, r3, #29
 80078e8:	d406      	bmi.n	80078f8 <wolfSSL_connect+0x1ac>
                if (!ssl->options.keepResources) {
 80078ea:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 80078ee:	065b      	lsls	r3, r3, #25
 80078f0:	d402      	bmi.n	80078f8 <wolfSSL_connect+0x1ac>
                    FreeHandshakeResources(ssl);
 80078f2:	4620      	mov	r0, r4
 80078f4:	f7f9 ffad 	bl	8001852 <FreeHandshakeResources>
            FreeAsyncCtx(ssl, 1);
 80078f8:	2101      	movs	r1, #1
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7f9 fdf4 	bl	80014e8 <FreeAsyncCtx>
            ssl->error = 0; /* clear the error */
 8007900:	2300      	movs	r3, #0
 8007902:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                return WOLFSSL_SUCCESS;
 8007906:	2501      	movs	r5, #1
 8007908:	e762      	b.n	80077d0 <wolfSSL_connect+0x84>
                    if ( (ssl->error = SendCertificateVerify(ssl)) != 0) {
 800790a:	4620      	mov	r0, r4
 800790c:	f7fc fdee 	bl	80044ec <SendCertificateVerify>
 8007910:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007914:	2800      	cmp	r0, #0
 8007916:	d0be      	beq.n	8007896 <wolfSSL_connect+0x14a>
 8007918:	e758      	b.n	80077cc <wolfSSL_connect+0x80>
                if ( (ssl->error = ProcessReply(ssl)) < 0) {
 800791a:	4620      	mov	r0, r4
 800791c:	f7ff f872 	bl	8006a04 <ProcessReply>
 8007920:	2800      	cmp	r0, #0
 8007922:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007926:	dacd      	bge.n	80078c4 <wolfSSL_connect+0x178>
 8007928:	e750      	b.n	80077cc <wolfSSL_connect+0x80>
            return BAD_FUNC_ARG;
 800792a:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800792e:	e74f      	b.n	80077d0 <wolfSSL_connect+0x84>
 8007930:	fffffea8 	.word	0xfffffea8
 8007934:	fffffe86 	.word	0xfffffe86

08007938 <wolfSSL_accept>:
    }


    WOLFSSL_ABI
    int wolfSSL_accept(WOLFSSL* ssl)
    {
 8007938:	b510      	push	{r4, lr}
#endif
        int ret = 0;

        (void)ret;

        if (ssl == NULL)
 800793a:	4604      	mov	r4, r0
 800793c:	b910      	cbnz	r0, 8007944 <wolfSSL_accept+0xc>
            ssl->error = ret;
            WOLFSSL_ERROR(ssl->error);
            return WOLFSSL_FATAL_ERROR;
        }

        switch (ssl->options.acceptState) {
 800793e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007942:	e114      	b.n	8007b6e <wolfSSL_accept+0x236>
        if ((ret = ReinitSSL(ssl, ssl->ctx, 0)) != 0) {
 8007944:	6801      	ldr	r1, [r0, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	f7f9 fc63 	bl	8001212 <ReinitSSL>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 810e 	bne.w	8007b6e <wolfSSL_accept+0x236>
        if (ssl->options.side != WOLFSSL_SERVER_END) {
 8007952:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8007956:	f013 0f30 	tst.w	r3, #48	; 0x30
 800795a:	d003      	beq.n	8007964 <wolfSSL_accept+0x2c>
            ssl->error = SIDE_ERROR;
 800795c:	4ba7      	ldr	r3, [pc, #668]	; (8007bfc <wolfSSL_accept+0x2c4>)
                    ssl->error = NO_PRIVATE_KEY;
 800795e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
                    return WOLFSSL_FATAL_ERROR;
 8007962:	e7ec      	b.n	800793e <wolfSSL_accept+0x6>
                if (!ssl->buffers.certificate ||
 8007964:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8007968:	b10b      	cbz	r3, 800796e <wolfSSL_accept+0x36>
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	b913      	cbnz	r3, 8007974 <wolfSSL_accept+0x3c>
                    ssl->error = NO_PRIVATE_KEY;
 800796e:	f46f 739e 	mvn.w	r3, #316	; 0x13c
 8007972:	e7f4      	b.n	800795e <wolfSSL_accept+0x26>
                if (!ssl->buffers.key || !ssl->buffers.key->buffer) {
 8007974:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0f8      	beq.n	800796e <wolfSSL_accept+0x36>
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f5      	beq.n	800796e <wolfSSL_accept+0x36>
        if (ssl->buffers.outputBuffer.length > 0
 8007982:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007986:	b1e3      	cbz	r3, 80079c2 <wolfSSL_accept+0x8a>
            ret = SendBuffered(ssl);
 8007988:	4620      	mov	r0, r4
 800798a:	f7f9 ffd1 	bl	8001930 <SendBuffered>
            if (ret == 0) {
 800798e:	b9e0      	cbnz	r0, 80079ca <wolfSSL_accept+0x92>
                if (ssl->fragOffset == 0 && !ssl->options.buildingMsg) {
 8007990:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8007994:	b9ab      	cbnz	r3, 80079c2 <wolfSSL_accept+0x8a>
 8007996:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 800799a:	071a      	lsls	r2, r3, #28
 800799c:	d411      	bmi.n	80079c2 <wolfSSL_accept+0x8a>
                    if (ssl->options.acceptState == ACCEPT_FIRST_REPLY_DONE ||
 800799e:	f894 3282 	ldrb.w	r3, [r4, #642]	; 0x282
 80079a2:	f023 0208 	bic.w	r2, r3, #8
 80079a6:	3a04      	subs	r2, #4
 80079a8:	2a02      	cmp	r2, #2
 80079aa:	d903      	bls.n	80079b4 <wolfSSL_accept+0x7c>
                        ssl->options.acceptState == CERT_SENT ||
 80079ac:	f1a3 0208 	sub.w	r2, r3, #8
 80079b0:	2a02      	cmp	r2, #2
 80079b2:	d806      	bhi.n	80079c2 <wolfSSL_accept+0x8a>
                        ssl->options.acceptState++;
 80079b4:	3301      	adds	r3, #1
 80079b6:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
                        FreeAsyncCtx(ssl, 0);
 80079ba:	2100      	movs	r1, #0
 80079bc:	4620      	mov	r0, r4
 80079be:	f7f9 fd93 	bl	80014e8 <FreeAsyncCtx>
        ret = RetrySendAlert(ssl);
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7fb f9e4 	bl	8002d90 <RetrySendAlert>
        if (ret != 0) {
 80079c8:	b110      	cbz	r0, 80079d0 <wolfSSL_accept+0x98>
        case ACCEPT_THIRD_REPLY_DONE :
#ifndef NO_HANDSHAKE_DONE_CB
            if (ssl->hsDoneCb) {
                int cbret = ssl->hsDoneCb(ssl, ssl->hsDoneCtx);
                if (cbret < 0) {
                    ssl->error = cbret;
 80079ca:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
                    WOLFSSL_MSG("HandShake Done Cb don't continue error");
                    return WOLFSSL_FATAL_ERROR;
 80079ce:	e7b6      	b.n	800793e <wolfSSL_accept+0x6>
        switch (ssl->options.acceptState) {
 80079d0:	f894 3282 	ldrb.w	r3, [r4, #642]	; 0x282
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d8b2      	bhi.n	800793e <wolfSSL_accept+0x6>
 80079d8:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <wolfSSL_accept+0xa8>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007a33 	.word	0x08007a33
 80079e4:	0800793f 	.word	0x0800793f
 80079e8:	0800793f 	.word	0x0800793f
 80079ec:	0800793f 	.word	0x0800793f
 80079f0:	08007a41 	.word	0x08007a41
 80079f4:	08007a57 	.word	0x08007a57
 80079f8:	08007a67 	.word	0x08007a67
 80079fc:	0800793f 	.word	0x0800793f
 8007a00:	08007a77 	.word	0x08007a77
 8007a04:	08007a87 	.word	0x08007a87
 8007a08:	08007aaf 	.word	0x08007aaf
 8007a0c:	08007abd 	.word	0x08007abd
 8007a10:	08007ac7 	.word	0x08007ac7
 8007a14:	08007af5 	.word	0x08007af5
 8007a18:	08007b15 	.word	0x08007b15
 8007a1c:	08007b2b 	.word	0x08007b2b
 8007a20:	08007b39 	.word	0x08007b39
                if ( (ssl->error = ProcessReply(ssl)) < 0) {
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7fe ffed 	bl	8006a04 <ProcessReply>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007a30:	db85      	blt.n	800793e <wolfSSL_accept+0x6>
            while (ssl->options.clientState < CLIENT_HELLO_COMPLETE)
 8007a32:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
 8007a36:	2b0b      	cmp	r3, #11
 8007a38:	d9f4      	bls.n	8007a24 <wolfSSL_accept+0xec>
            ssl->options.acceptState = ACCEPT_FIRST_REPLY_DONE;
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if ( (ssl->error = SendServerHello(ssl)) != 0) {
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7fc fead 	bl	80047a0 <SendServerHello>
 8007a46:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f47f af77 	bne.w	800793e <wolfSSL_accept+0x6>
            ssl->options.acceptState = SERVER_HELLO_SENT;
 8007a50:	2305      	movs	r3, #5
 8007a52:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
                if (!ssl->options.resuming)
 8007a56:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007a5a:	071b      	lsls	r3, r3, #28
 8007a5c:	f140 8088 	bpl.w	8007b70 <wolfSSL_accept+0x238>
            ssl->options.acceptState = CERT_SENT;
 8007a60:	2306      	movs	r3, #6
 8007a62:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (!ssl->options.resuming)
 8007a66:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007a6a:	0718      	lsls	r0, r3, #28
 8007a6c:	f140 8089 	bpl.w	8007b82 <wolfSSL_accept+0x24a>
            ssl->options.acceptState = CERT_STATUS_SENT;
 8007a70:	2308      	movs	r3, #8
 8007a72:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (!ssl->options.resuming)
 8007a76:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007a7a:	0719      	lsls	r1, r3, #28
 8007a7c:	f140 808a 	bpl.w	8007b94 <wolfSSL_accept+0x25c>
            ssl->options.acceptState = KEY_EXCHANGE_SENT;
 8007a80:	2309      	movs	r3, #9
 8007a82:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
                if (!ssl->options.resuming) {
 8007a86:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007a8a:	071a      	lsls	r2, r3, #28
 8007a8c:	d40c      	bmi.n	8007aa8 <wolfSSL_accept+0x170>
                    if (ssl->options.verifyPeer) {
 8007a8e:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8007a92:	065b      	lsls	r3, r3, #25
 8007a94:	f140 8087 	bpl.w	8007ba6 <wolfSSL_accept+0x26e>
                        if ( (ssl->error = SendCertificateRequest(ssl)) != 0) {
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7fb f8ad 	bl	8002bf8 <SendCertificateRequest>
 8007a9e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f47f af4b 	bne.w	800793e <wolfSSL_accept+0x6>
            ssl->options.acceptState = CERT_REQ_SENT;
 8007aa8:	230a      	movs	r3, #10
 8007aaa:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (!ssl->options.resuming)
 8007aae:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007ab2:	0718      	lsls	r0, r3, #28
 8007ab4:	d57e      	bpl.n	8007bb4 <wolfSSL_accept+0x27c>
            ssl->options.acceptState = SERVER_HELLO_DONE;
 8007ab6:	230b      	movs	r3, #11
 8007ab8:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (!ssl->options.resuming) {
 8007abc:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007ac0:	0719      	lsls	r1, r3, #28
 8007ac2:	f140 8088 	bpl.w	8007bd6 <wolfSSL_accept+0x29e>
            if (!ssl->options.resuming && ssl->options.verifyPeer &&
 8007ac6:	f8b4 3270 	ldrh.w	r3, [r4, #624]	; 0x270
 8007aca:	f403 6304 	and.w	r3, r3, #2112	; 0x840
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d10d      	bne.n	8007aee <wolfSSL_accept+0x1b6>
                !ssl->options.havePeerCert && !ssl->options.failNoCert) {
 8007ad2:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
            if (!ssl->options.resuming && ssl->options.verifyPeer &&
 8007ad6:	07da      	lsls	r2, r3, #31
 8007ad8:	d409      	bmi.n	8007aee <wolfSSL_accept+0x1b6>
                !ssl->options.havePeerCert && !ssl->options.failNoCert) {
 8007ada:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007ade:	07db      	lsls	r3, r3, #31
                ssl->options.peerAuthGood = 1;
 8007ae0:	bf5e      	ittt	pl
 8007ae2:	f894 3276 	ldrbpl.w	r3, [r4, #630]	; 0x276
 8007ae6:	f043 0302 	orrpl.w	r3, r3, #2
 8007aea:	f884 3276 	strbpl.w	r3, [r4, #630]	; 0x276
            ssl->options.acceptState = TICKET_SENT;
 8007aee:	230d      	movs	r3, #13
 8007af0:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (!ssl->options.peerAuthGood) {
 8007af4:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8007af8:	0798      	lsls	r0, r3, #30
 8007afa:	f57f af20 	bpl.w	800793e <wolfSSL_accept+0x6>
            if ( (ssl->error = SendChangeCipher(ssl)) != 0) {
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7fa fcc2 	bl	8002488 <SendChangeCipher>
 8007b04:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f47f af18 	bne.w	800793e <wolfSSL_accept+0x6>
            ssl->options.acceptState = CHANGE_CIPHER_SENT;
 8007b0e:	230e      	movs	r3, #14
 8007b10:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if ( (ssl->error = SendFinished(ssl)) != 0) {
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7fa fd6f 	bl	80025f8 <SendFinished>
 8007b1a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f47f af0d 	bne.w	800793e <wolfSSL_accept+0x6>
            ssl->options.acceptState = ACCEPT_FINISHED_DONE;
 8007b24:	230f      	movs	r3, #15
 8007b26:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (ssl->options.resuming) {
 8007b2a:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8007b2e:	0719      	lsls	r1, r3, #28
 8007b30:	d45e      	bmi.n	8007bf0 <wolfSSL_accept+0x2b8>
            ssl->options.acceptState = ACCEPT_THIRD_REPLY_DONE;
 8007b32:	2310      	movs	r3, #16
 8007b34:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
            if (ssl->hsDoneCb) {
 8007b38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b3a:	b12b      	cbz	r3, 8007b48 <wolfSSL_accept+0x210>
                int cbret = ssl->hsDoneCb(ssl, ssl->hsDoneCtx);
 8007b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4798      	blx	r3
                if (cbret < 0) {
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f6ff af41 	blt.w	80079ca <wolfSSL_accept+0x92>
                }
            }
#endif /* NO_HANDSHAKE_DONE_CB */

            if (!ssl->options.dtls) {
 8007b48:	f894 3272 	ldrb.w	r3, [r4, #626]	; 0x272
 8007b4c:	075a      	lsls	r2, r3, #29
 8007b4e:	d406      	bmi.n	8007b5e <wolfSSL_accept+0x226>
                if (!ssl->options.keepResources) {
 8007b50:	f894 3275 	ldrb.w	r3, [r4, #629]	; 0x275
 8007b54:	065b      	lsls	r3, r3, #25
 8007b56:	d402      	bmi.n	8007b5e <wolfSSL_accept+0x226>
                    FreeHandshakeResources(ssl);
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7f9 fe7a 	bl	8001852 <FreeHandshakeResources>
                ssl->secure_renegotiation->startScr = 0;
            }
#endif /* WOLFSSL_ASYNC_CRYPT && HAVE_SECURE_RENEGOTIATION */
#if defined(WOLFSSL_ASYNC_IO) && !defined(WOLFSSL_ASYNC_CRYPT)
            /* Free the remaining async context if not using it for crypto */
            FreeAsyncCtx(ssl, 1);
 8007b5e:	4620      	mov	r0, r4
 8007b60:	2101      	movs	r1, #1
 8007b62:	f7f9 fcc1 	bl	80014e8 <FreeAsyncCtx>
                    WOLFSSL_ERROR(ssl->error);
                    return WOLFSSL_FATAL_ERROR;
                }
            }
#endif
            ssl->error = 0; /* clear the error */
 8007b66:	2300      	movs	r3, #0
 8007b68:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114

            WOLFSSL_LEAVE("wolfSSL_accept", WOLFSSL_SUCCESS);
            return WOLFSSL_SUCCESS;
 8007b6c:	2001      	movs	r0, #1
        default :
            WOLFSSL_MSG("Unknown accept state ERROR");
            return WOLFSSL_FATAL_ERROR;
        }
#endif /* !WOLFSSL_NO_TLS12 */
    }
 8007b6e:	bd10      	pop	{r4, pc}
                    if ( (ssl->error = SendCertificate(ssl)) != 0) {
 8007b70:	4620      	mov	r0, r4
 8007b72:	f7fa fe6b 	bl	800284c <SendCertificate>
 8007b76:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f43f af70 	beq.w	8007a60 <wolfSSL_accept+0x128>
 8007b80:	e6dd      	b.n	800793e <wolfSSL_accept+0x6>
                if ( (ssl->error = SendCertificateStatus(ssl)) != 0) {
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fb f902 	bl	8002d8c <SendCertificateStatus>
 8007b88:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f43f af6f 	beq.w	8007a70 <wolfSSL_accept+0x138>
 8007b92:	e6d4      	b.n	800793e <wolfSSL_accept+0x6>
                if ( (ssl->error = SendServerKeyExchange(ssl)) != 0) {
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7fc ff07 	bl	80049a8 <SendServerKeyExchange>
 8007b9a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f43f af6e 	beq.w	8007a80 <wolfSSL_accept+0x148>
 8007ba4:	e6cb      	b.n	800793e <wolfSSL_accept+0x6>
                        ssl->options.peerAuthGood = 1;
 8007ba6:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
 8007baa:	f043 0302 	orr.w	r3, r3, #2
 8007bae:	f884 3276 	strb.w	r3, [r4, #630]	; 0x276
 8007bb2:	e779      	b.n	8007aa8 <wolfSSL_accept+0x170>
                if ( (ssl->error = SendServerHelloDone(ssl)) != 0) {
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7fe ff86 	bl	8006ac6 <SendServerHelloDone>
 8007bba:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f43f af79 	beq.w	8007ab6 <wolfSSL_accept+0x17e>
 8007bc4:	e6bb      	b.n	800793e <wolfSSL_accept+0x6>
                    if ( (ssl->error = ProcessReply(ssl)) < 0) {
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7fe ff1c 	bl	8006a04 <ProcessReply>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007bd2:	f6ff aeb4 	blt.w	800793e <wolfSSL_accept+0x6>
                while (ssl->options.clientState < CLIENT_FINISHED_COMPLETE)
 8007bd6:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
 8007bda:	2b0e      	cmp	r3, #14
 8007bdc:	d9f3      	bls.n	8007bc6 <wolfSSL_accept+0x28e>
 8007bde:	e772      	b.n	8007ac6 <wolfSSL_accept+0x18e>
                    if ( (ssl->error = ProcessReply(ssl)) < 0) {
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7fe ff0f 	bl	8006a04 <ProcessReply>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8007bec:	f6ff aea7 	blt.w	800793e <wolfSSL_accept+0x6>
                while (ssl->options.clientState < CLIENT_FINISHED_COMPLETE) {
 8007bf0:	f894 327d 	ldrb.w	r3, [r4, #637]	; 0x27d
 8007bf4:	2b0e      	cmp	r3, #14
 8007bf6:	d9f3      	bls.n	8007be0 <wolfSSL_accept+0x2a8>
 8007bf8:	e79b      	b.n	8007b32 <wolfSSL_accept+0x1fa>
 8007bfa:	bf00      	nop
 8007bfc:	fffffea8 	.word	0xfffffea8

08007c00 <wolfSSL_negotiate>:
{
 8007c00:	b510      	push	{r4, lr}
    if (ssl == NULL)
 8007c02:	4604      	mov	r4, r0
 8007c04:	b1a0      	cbz	r0, 8007c30 <wolfSSL_negotiate+0x30>
    if (ssl->options.side == WOLFSSL_SERVER_END) {
 8007c06:	f890 3270 	ldrb.w	r3, [r0, #624]	; 0x270
 8007c0a:	f013 0f30 	tst.w	r3, #48	; 0x30
 8007c0e:	d10c      	bne.n	8007c2a <wolfSSL_negotiate+0x2a>
            err = wolfSSL_accept(ssl);
 8007c10:	f7ff fe92 	bl	8007938 <wolfSSL_accept>
    if (ssl->options.side == WOLFSSL_CLIENT_END) {
 8007c14:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8007c18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d109      	bne.n	8007c34 <wolfSSL_negotiate+0x34>
            err = wolfSSL_connect(ssl);
 8007c20:	4620      	mov	r0, r4
}
 8007c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            err = wolfSSL_connect(ssl);
 8007c26:	f7ff bd91 	b.w	800774c <wolfSSL_connect>
    int err = WOLFSSL_FATAL_ERROR;
 8007c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c2e:	e7f1      	b.n	8007c14 <wolfSSL_negotiate+0x14>
        return WOLFSSL_FATAL_ERROR;
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007c34:	bd10      	pop	{r4, pc}
	...

08007c38 <wolfSSL_Cleanup>:

#endif /* NO_HANDSHAKE_DONE_CB */

WOLFSSL_ABI
int wolfSSL_Cleanup(void)
{
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int j;
#endif

    WOLFSSL_ENTER("wolfSSL_Cleanup");

    if (initRefCount == 0)
 8007c3a:	4d25      	ldr	r5, [pc, #148]	; (8007cd0 <wolfSSL_Cleanup+0x98>)
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d040      	beq.n	8007cc4 <wolfSSL_Cleanup+0x8c>
        return ret;  /* possibly no init yet, but not failure either way */

    if ((count_mutex_valid == 1) && (wc_LockMutex(&count_mutex) != 0)) {
 8007c42:	4e24      	ldr	r6, [pc, #144]	; (8007cd4 <wolfSSL_Cleanup+0x9c>)
 8007c44:	6833      	ldr	r3, [r6, #0]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d034      	beq.n	8007cb4 <wolfSSL_Cleanup+0x7c>
    int ret = WOLFSSL_SUCCESS; /* Only the first error will be returned */
 8007c4a:	2401      	movs	r4, #1
        WOLFSSL_MSG("Bad Lock Mutex count");
        ret = BAD_MUTEX_E;
    }

    release = initRefCount-- == 1;
 8007c4c:	682f      	ldr	r7, [r5, #0]
 8007c4e:	1e7b      	subs	r3, r7, #1
 8007c50:	602b      	str	r3, [r5, #0]
    if (initRefCount < 0)
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	2b00      	cmp	r3, #0
        initRefCount = 0;
 8007c56:	bfbc      	itt	lt
 8007c58:	2300      	movlt	r3, #0
 8007c5a:	602b      	strlt	r3, [r5, #0]

    if (count_mutex_valid == 1) {
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d132      	bne.n	8007cc8 <wolfSSL_Cleanup+0x90>
        wc_UnLockMutex(&count_mutex);
 8007c62:	481d      	ldr	r0, [pc, #116]	; (8007cd8 <wolfSSL_Cleanup+0xa0>)
 8007c64:	f015 fa4c 	bl	801d100 <wc_UnLockMutex>
    }

    if (!release)
 8007c68:	2f01      	cmp	r7, #1
 8007c6a:	d121      	bne.n	8007cb0 <wolfSSL_Cleanup+0x78>
    }
    clisession_mutex_valid = 0;
    #endif
#endif /* !NO_SESSION_CACHE */

    if ((count_mutex_valid == 1) && (wc_FreeMutex(&count_mutex) != 0)) {
 8007c6c:	6833      	ldr	r3, [r6, #0]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d107      	bne.n	8007c82 <wolfSSL_Cleanup+0x4a>
 8007c72:	4819      	ldr	r0, [pc, #100]	; (8007cd8 <wolfSSL_Cleanup+0xa0>)
 8007c74:	f015 fa40 	bl	801d0f8 <wc_FreeMutex>
 8007c78:	b118      	cbz	r0, 8007c82 <wolfSSL_Cleanup+0x4a>
        if (ret == WOLFSSL_SUCCESS)
            ret = BAD_MUTEX_E;
 8007c7a:	2c01      	cmp	r4, #1
 8007c7c:	bf08      	it	eq
 8007c7e:	f06f 0469 	mvneq.w	r4, #105	; 0x69
    }
    count_mutex_valid = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	6033      	str	r3, [r6, #0]

#ifdef OPENSSL_EXTRA
    wolfSSL_RAND_Cleanup();
#endif

    if (wolfCrypt_Cleanup() != 0) {
 8007c86:	f015 fa27 	bl	801d0d8 <wolfCrypt_Cleanup>
 8007c8a:	b118      	cbz	r0, 8007c94 <wolfSSL_Cleanup+0x5c>
        WOLFSSL_MSG("Error with wolfCrypt_Cleanup call");
        if (ret == WOLFSSL_SUCCESS)
            ret = WC_CLEANUP_E;
 8007c8c:	2c01      	cmp	r4, #1
 8007c8e:	bf08      	it	eq
 8007c90:	f06f 04f0 	mvneq.w	r4, #240	; 0xf0
            ret = WC_CLEANUP_E;
    }
#endif

#ifdef HAVE_GLOBAL_RNG
    if ((globalRNGMutex_valid == 1) && (wc_FreeMutex(&globalRNGMutex) != 0)) {
 8007c94:	4d11      	ldr	r5, [pc, #68]	; (8007cdc <wolfSSL_Cleanup+0xa4>)
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d107      	bne.n	8007cac <wolfSSL_Cleanup+0x74>
 8007c9c:	4810      	ldr	r0, [pc, #64]	; (8007ce0 <wolfSSL_Cleanup+0xa8>)
 8007c9e:	f015 fa2b 	bl	801d0f8 <wc_FreeMutex>
 8007ca2:	b118      	cbz	r0, 8007cac <wolfSSL_Cleanup+0x74>
        if (ret == WOLFSSL_SUCCESS)
            ret = BAD_MUTEX_E;
 8007ca4:	2c01      	cmp	r4, #1
 8007ca6:	bf08      	it	eq
 8007ca8:	f06f 0469 	mvneq.w	r4, #105	; 0x69
    }
    globalRNGMutex_valid = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	602b      	str	r3, [r5, #0]
#ifdef WOLFSSL_MEM_FAIL_COUNT
    wc_MemFailCount_Free();
#endif

    return ret;
}
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((count_mutex_valid == 1) && (wc_LockMutex(&count_mutex) != 0)) {
 8007cb4:	4808      	ldr	r0, [pc, #32]	; (8007cd8 <wolfSSL_Cleanup+0xa0>)
 8007cb6:	f015 fa21 	bl	801d0fc <wc_LockMutex>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d0c5      	beq.n	8007c4a <wolfSSL_Cleanup+0x12>
        ret = BAD_MUTEX_E;
 8007cbe:	f06f 0469 	mvn.w	r4, #105	; 0x69
 8007cc2:	e7c3      	b.n	8007c4c <wolfSSL_Cleanup+0x14>
        return ret;  /* possibly no init yet, but not failure either way */
 8007cc4:	2401      	movs	r4, #1
 8007cc6:	e7f3      	b.n	8007cb0 <wolfSSL_Cleanup+0x78>
    if (!release)
 8007cc8:	2f01      	cmp	r7, #1
 8007cca:	d0da      	beq.n	8007c82 <wolfSSL_Cleanup+0x4a>
 8007ccc:	e7f0      	b.n	8007cb0 <wolfSSL_Cleanup+0x78>
 8007cce:	bf00      	nop
 8007cd0:	2000007c 	.word	0x2000007c
 8007cd4:	20000070 	.word	0x20000070
 8007cd8:	2000006c 	.word	0x2000006c
 8007cdc:	20000078 	.word	0x20000078
 8007ce0:	20000074 	.word	0x20000074

08007ce4 <wolfSSL_Init>:
{
 8007ce4:	b538      	push	{r3, r4, r5, lr}
    if (initRefCount == 0) {
 8007ce6:	4c16      	ldr	r4, [pc, #88]	; (8007d40 <wolfSSL_Init+0x5c>)
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	b9bb      	cbnz	r3, 8007d1c <wolfSSL_Init+0x38>
        if (wolfCrypt_Init() != 0) {
 8007cec:	f015 f9ea 	bl	801d0c4 <wolfCrypt_Init>
 8007cf0:	bb10      	cbnz	r0, 8007d38 <wolfSSL_Init+0x54>
            if (wc_InitMutex(&globalRNGMutex) != 0) {
 8007cf2:	4814      	ldr	r0, [pc, #80]	; (8007d44 <wolfSSL_Init+0x60>)
 8007cf4:	f015 f9fe 	bl	801d0f4 <wc_InitMutex>
 8007cf8:	b130      	cbz	r0, 8007d08 <wolfSSL_Init+0x24>
                ret = BAD_MUTEX_E;
 8007cfa:	f06f 0569 	mvn.w	r5, #105	; 0x69
        initRefCount = 1; /* Force cleanup */
 8007cfe:	2301      	movs	r3, #1
 8007d00:	6023      	str	r3, [r4, #0]
        (void)wolfSSL_Cleanup(); /* Ignore any error from cleanup */
 8007d02:	f7ff ff99 	bl	8007c38 <wolfSSL_Cleanup>
    return ret;
 8007d06:	e015      	b.n	8007d34 <wolfSSL_Init+0x50>
                globalRNGMutex_valid = 1;
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <wolfSSL_Init+0x64>)
            if (wc_InitMutex(&count_mutex) != 0) {
 8007d0a:	4810      	ldr	r0, [pc, #64]	; (8007d4c <wolfSSL_Init+0x68>)
                globalRNGMutex_valid = 1;
 8007d0c:	2501      	movs	r5, #1
 8007d0e:	601d      	str	r5, [r3, #0]
            if (wc_InitMutex(&count_mutex) != 0) {
 8007d10:	f015 f9f0 	bl	801d0f4 <wc_InitMutex>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1f0      	bne.n	8007cfa <wolfSSL_Init+0x16>
                count_mutex_valid = 1;
 8007d18:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <wolfSSL_Init+0x6c>)
 8007d1a:	601d      	str	r5, [r3, #0]
        if (wc_LockMutex(&count_mutex) != 0) {
 8007d1c:	480b      	ldr	r0, [pc, #44]	; (8007d4c <wolfSSL_Init+0x68>)
 8007d1e:	f015 f9ed 	bl	801d0fc <wc_LockMutex>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d1e9      	bne.n	8007cfa <wolfSSL_Init+0x16>
            initRefCount++;
 8007d26:	6823      	ldr	r3, [r4, #0]
            wc_UnLockMutex(&count_mutex);
 8007d28:	4808      	ldr	r0, [pc, #32]	; (8007d4c <wolfSSL_Init+0x68>)
            initRefCount++;
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	6023      	str	r3, [r4, #0]
            wc_UnLockMutex(&count_mutex);
 8007d2e:	f015 f9e7 	bl	801d100 <wc_UnLockMutex>
 8007d32:	2501      	movs	r5, #1
}
 8007d34:	4628      	mov	r0, r5
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	f06f 05e3 	mvn.w	r5, #227	; 0xe3
 8007d3c:	e7df      	b.n	8007cfe <wolfSSL_Init+0x1a>
 8007d3e:	bf00      	nop
 8007d40:	2000007c 	.word	0x2000007c
 8007d44:	20000074 	.word	0x20000074
 8007d48:	20000078 	.word	0x20000078
 8007d4c:	2000006c 	.word	0x2000006c
 8007d50:	20000070 	.word	0x20000070

08007d54 <wolfSSL_CTX_new_ex>:
    if (initRefCount == 0) {
 8007d54:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <wolfSSL_CTX_new_ex+0x48>)
 8007d56:	681b      	ldr	r3, [r3, #0]
{
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	460e      	mov	r6, r1
    if (initRefCount == 0) {
 8007d5e:	b95b      	cbnz	r3, 8007d78 <wolfSSL_CTX_new_ex+0x24>
        int ret = wolfSSL_Init();
 8007d60:	f7ff ffc0 	bl	8007ce4 <wolfSSL_Init>
        if (ret != WOLFSSL_SUCCESS) {
 8007d64:	2801      	cmp	r0, #1
 8007d66:	d007      	beq.n	8007d78 <wolfSSL_CTX_new_ex+0x24>
            if (method != NULL) {
 8007d68:	b915      	cbnz	r5, 8007d70 <wolfSSL_CTX_new_ex+0x1c>
            ctx = NULL;
 8007d6a:	2400      	movs	r4, #0
}
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
                XFREE(method, heap, DYNAMIC_TYPE_METHOD);
 8007d70:	4628      	mov	r0, r5
 8007d72:	f015 fdff 	bl	801d974 <free>
 8007d76:	e7f8      	b.n	8007d6a <wolfSSL_CTX_new_ex+0x16>
    if (method == NULL)
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	d0f6      	beq.n	8007d6a <wolfSSL_CTX_new_ex+0x16>
    ctx = (WOLFSSL_CTX*)XMALLOC(sizeof(WOLFSSL_CTX), heap, DYNAMIC_TYPE_CTX);
 8007d7c:	206c      	movs	r0, #108	; 0x6c
 8007d7e:	f015 fdf1 	bl	801d964 <malloc>
 8007d82:	4604      	mov	r4, r0
    if (ctx) {
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d0f3      	beq.n	8007d70 <wolfSSL_CTX_new_ex+0x1c>
        ret = InitSSL_Ctx(ctx, method, heap);
 8007d88:	4632      	mov	r2, r6
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fe29 	bl	80009e2 <InitSSL_Ctx>
        if (ret < 0) {
 8007d90:	2800      	cmp	r0, #0
 8007d92:	daeb      	bge.n	8007d6c <wolfSSL_CTX_new_ex+0x18>
            wolfSSL_CTX_free(ctx);
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7ff fa96 	bl	80072c6 <wolfSSL_CTX_free>
 8007d9a:	e7e6      	b.n	8007d6a <wolfSSL_CTX_new_ex+0x16>
 8007d9c:	2000007c 	.word	0x2000007c

08007da0 <wolfSSL_CTX_new>:
    return wolfSSL_CTX_new_ex(method, NULL);
 8007da0:	2100      	movs	r1, #0
 8007da2:	f7ff bfd7 	b.w	8007d54 <wolfSSL_CTX_new_ex>

08007da6 <SetupSession>:

void SetupSession(WOLFSSL* ssl)
{
 8007da6:	b538      	push	{r3, r4, r5, lr}
    WOLFSSL_SESSION* session = ssl->session;
 8007da8:	f8d0 40f4 	ldr.w	r4, [r0, #244]	; 0xf4
{
 8007dac:	4605      	mov	r5, r0

    WOLFSSL_ENTER("SetupSession");

    if (!IsAtLeastTLSv1_3(ssl->version) && ssl->arrays != NULL) {
 8007dae:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8007db2:	f7f8 fdec 	bl	800098e <IsAtLeastTLSv1_3>
 8007db6:	b988      	cbnz	r0, 8007ddc <SetupSession+0x36>
 8007db8:	68a9      	ldr	r1, [r5, #8]
 8007dba:	b179      	cbz	r1, 8007ddc <SetupSession+0x36>
        /* Make sure the session ID is available when the user calls any
         * get_session API */
        if (!session->haveAltSessionID) {
 8007dbc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007dc0:	07db      	lsls	r3, r3, #31
            XMEMCPY(session->sessionID, ssl->arrays->sessionID, ID_LEN);
 8007dc2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8007dc6:	f04f 0220 	mov.w	r2, #32
        if (!session->haveAltSessionID) {
 8007dca:	d435      	bmi.n	8007e38 <SetupSession+0x92>
            XMEMCPY(session->sessionID, ssl->arrays->sessionID, ID_LEN);
 8007dcc:	3154      	adds	r1, #84	; 0x54
 8007dce:	f015 fde9 	bl	801d9a4 <memcpy>
            session->sessionIDSz = ssl->arrays->sessionIDSz;
 8007dd2:	68ab      	ldr	r3, [r5, #8]
 8007dd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
        }
        else {
            XMEMCPY(session->sessionID, session->altSessionID, ID_LEN);
            session->sessionIDSz = ID_LEN;
 8007dd8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        }
    }
    session->side = (byte)ssl->options.side;
 8007ddc:	f895 3270 	ldrb.w	r3, [r5, #624]	; 0x270
 8007de0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8007de4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if (!IsAtLeastTLSv1_3(ssl->version) && ssl->arrays != NULL)
 8007de8:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
 8007dec:	f7f8 fdcf 	bl	800098e <IsAtLeastTLSv1_3>
 8007df0:	b938      	cbnz	r0, 8007e02 <SetupSession+0x5c>
 8007df2:	68a9      	ldr	r1, [r5, #8]
 8007df4:	b129      	cbz	r1, 8007e02 <SetupSession+0x5c>
        XMEMCPY(session->masterSecret, ssl->arrays->masterSecret, SECRET_LEN);
 8007df6:	2230      	movs	r2, #48	; 0x30
 8007df8:	3175      	adds	r1, #117	; 0x75
 8007dfa:	f104 005d 	add.w	r0, r4, #93	; 0x5d
 8007dfe:	f015 fdd1 	bl	801d9a4 <memcpy>
    session->haveEMS = ssl->options.haveEMS;
 8007e02:	f895 3275 	ldrb.w	r3, [r5, #629]	; 0x275
 8007e06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e0a:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
    if (ssl->sessionCtxSz > 0 && ssl->sessionCtxSz < ID_LEN) {
        XMEMCPY(ssl->session->sessionCtx, ssl->sessionCtx, ssl->sessionCtxSz);
        session->sessionCtxSz = ssl->sessionCtxSz;
    }
#endif
    session->timeout = ssl->timeout;
 8007e0e:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8007e12:	63a3      	str	r3, [r4, #56]	; 0x38
#ifndef NO_ASN_TIME
    session->bornOn  = LowResTimer();
 8007e14:	f7f8 f9a0 	bl	8000158 <LowResTimer>
 8007e18:	6360      	str	r0, [r4, #52]	; 0x34
                               defined(HAVE_SESSION_TICKET))
    session->version = ssl->version;
#endif
#if defined(SESSION_CERTS) || !defined(NO_RESUME_SUITE_CHECK) || \
                        (defined(WOLFSSL_TLS13) && defined(HAVE_SESSION_TICKET))
    session->cipherSuite0 = ssl->options.cipherSuite0;
 8007e1a:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
 8007e1e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    session->cipherSuite = ssl->options.cipherSuite;
 8007e22:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
 8007e26:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
#endif
#if defined(OPENSSL_EXTRA) || defined(OPENSSL_EXTRA_X509_SMALL)
    session->peerVerifyRet = (byte)ssl->peerVerifyRet;
#endif
    session->isSetup = 1;
 8007e2a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
            XMEMCPY(session->sessionID, session->altSessionID, ID_LEN);
 8007e38:	f104 0108 	add.w	r1, r4, #8
 8007e3c:	f015 fdb2 	bl	801d9a4 <memcpy>
            session->sessionIDSz = ID_LEN;
 8007e40:	2320      	movs	r3, #32
 8007e42:	e7c9      	b.n	8007dd8 <SetupSession+0x32>

08007e44 <wolfSSL_GetSession>:
    (void)ssl;
    (void)masterSecret;
    (void)restoreSessionCerts;

    return NULL;
}
 8007e44:	2000      	movs	r0, #0
 8007e46:	4770      	bx	lr

08007e48 <wolfSSL_UnloadCertsKeys>:


    /* unload any certs or keys that SSL owns, leave CTX as is
       WOLFSSL_SUCCESS on ok */
    int wolfSSL_UnloadCertsKeys(WOLFSSL* ssl)
    {
 8007e48:	b538      	push	{r3, r4, r5, lr}
        if (ssl == NULL) {
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	b330      	cbz	r0, 8007e9c <wolfSSL_UnloadCertsKeys+0x54>
            WOLFSSL_MSG("Null function arg");
            return BAD_FUNC_ARG;
        }

        if (ssl->buffers.weOwnCert && !ssl->keepCert) {
 8007e4e:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
 8007e52:	b13b      	cbz	r3, 8007e64 <wolfSSL_UnloadCertsKeys+0x1c>
 8007e54:	f890 52b9 	ldrb.w	r5, [r0, #697]	; 0x2b9
 8007e58:	b925      	cbnz	r5, 8007e64 <wolfSSL_UnloadCertsKeys+0x1c>
            WOLFSSL_MSG("Unloading cert");
            FreeDer(&ssl->buffers.certificate);
 8007e5a:	30dc      	adds	r0, #220	; 0xdc
 8007e5c:	f00c f890 	bl	8013f80 <FreeDer>
            #ifdef KEEP_OUR_CERT
            wolfSSL_X509_free(ssl->ourCert);
            ssl->ourCert = NULL;
            #endif
            ssl->buffers.weOwnCert = 0;
 8007e60:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
        }

        if (ssl->buffers.weOwnCertChain) {
 8007e64:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
 8007e68:	b133      	cbz	r3, 8007e78 <wolfSSL_UnloadCertsKeys+0x30>
            WOLFSSL_MSG("Unloading cert chain");
            FreeDer(&ssl->buffers.certChain);
 8007e6a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8007e6e:	f00c f887 	bl	8013f80 <FreeDer>
            ssl->buffers.weOwnCertChain = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
        }

        if (ssl->buffers.weOwnKey) {
 8007e78:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 8007e7c:	b163      	cbz	r3, 8007e98 <wolfSSL_UnloadCertsKeys+0x50>
            WOLFSSL_MSG("Unloading key");
            ForceZero(ssl->buffers.key->buffer, ssl->buffers.key->length);
 8007e7e:	4622      	mov	r2, r4
 8007e80:	f852 3fe0 	ldr.w	r3, [r2, #224]!
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	6899      	ldr	r1, [r3, #8]
 8007e88:	f7ff f9ad 	bl	80071e6 <ForceZero>
            FreeDer(&ssl->buffers.key);
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f00c f877 	bl	8013f80 <FreeDer>
            ssl->buffers.weOwnKey = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
        }

        return WOLFSSL_SUCCESS;
 8007e98:	2001      	movs	r0, #1
 8007e9a:	e001      	b.n	8007ea0 <wolfSSL_UnloadCertsKeys+0x58>
            return BAD_FUNC_ARG;
 8007e9c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }
 8007ea0:	bd38      	pop	{r3, r4, r5, pc}

08007ea2 <wolfSSL_NewSession>:
    return resuming;
}

/* return a new malloc'd session with default settings on success */
WOLFSSL_SESSION* wolfSSL_NewSession(void* heap)
{
 8007ea2:	b538      	push	{r3, r4, r5, lr}
 8007ea4:	4605      	mov	r5, r0
    WOLFSSL_SESSION* ret = NULL;

    WOLFSSL_ENTER("wolfSSL_NewSession");

    ret = (WOLFSSL_SESSION*)XMALLOC(sizeof(WOLFSSL_SESSION), heap,
 8007ea6:	20ac      	movs	r0, #172	; 0xac
 8007ea8:	f015 fd5c 	bl	801d964 <malloc>
            DYNAMIC_TYPE_SESSION);
    if (ret != NULL) {
 8007eac:	4604      	mov	r4, r0
 8007eae:	b140      	cbz	r0, 8007ec2 <wolfSSL_NewSession+0x20>
        int err;
        XMEMSET(ret, 0, sizeof(WOLFSSL_SESSION));
 8007eb0:	22ac      	movs	r2, #172	; 0xac
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	f015 fd9e 	bl	801d9f4 <memset>
        wolfSSL_RefInit(&ret->ref, &err);
 8007eb8:	2301      	movs	r3, #1
 8007eba:	6063      	str	r3, [r4, #4]
        (void)err;
    #endif
#ifndef NO_SESSION_CACHE
        ret->cacheRow = INVALID_SESSION_ROW; /* not in cache */
#endif
        ret->type = WOLFSSL_SESSION_TYPE_HEAP;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	7023      	strb	r3, [r4, #0]
        ret->heap = heap;
 8007ec0:	62e5      	str	r5, [r4, #44]	; 0x2c
                    &ret->ex_data);
        }
#endif
    }
    return ret;
}
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	bd38      	pop	{r3, r4, r5, pc}

08007ec6 <wolfSSL_DupSession>:
 * @return              WOLFSSL_SUCCESS on success
 *                      WOLFSSL_FAILURE on failure
 */
int wolfSSL_DupSession(const WOLFSSL_SESSION* input, WOLFSSL_SESSION* output,
        int avoidSysCalls)
{
 8007ec6:	b508      	push	{r3, lr}
 8007ec8:	460b      	mov	r3, r1
    if (input == NULL || output == NULL || input == output) {
 8007eca:	b150      	cbz	r0, 8007ee2 <wolfSSL_DupSession+0x1c>
 8007ecc:	b151      	cbz	r1, 8007ee4 <wolfSSL_DupSession+0x1e>
 8007ece:	4288      	cmp	r0, r1
 8007ed0:	d008      	beq.n	8007ee4 <wolfSSL_DupSession+0x1e>
    XMEMCPY((byte*)output + copyOffset, (byte*)input + copyOffset,
 8007ed2:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8007ed6:	227c      	movs	r2, #124	; 0x7c
 8007ed8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007edc:	f015 fd62 	bl	801d9a4 <memcpy>
    return ret;
 8007ee0:	2001      	movs	r0, #1
    return wolfSSL_DupSessionEx(input, output, avoidSysCalls, NULL, NULL, NULL);
}
 8007ee2:	bd08      	pop	{r3, pc}
        return WOLFSSL_FAILURE;
 8007ee4:	2000      	movs	r0, #0
    return wolfSSL_DupSessionEx(input, output, avoidSysCalls, NULL, NULL, NULL);
 8007ee6:	e7fc      	b.n	8007ee2 <wolfSSL_DupSession+0x1c>

08007ee8 <wolfSSL_FreeSession>:
    }
    return copy;
}

void wolfSSL_FreeSession(WOLFSSL_CTX* ctx, WOLFSSL_SESSION* session)
{
 8007ee8:	b508      	push	{r3, lr}
    session = ClientSessionToSession(session);
    if (session == NULL)
 8007eea:	460a      	mov	r2, r1
 8007eec:	b1c1      	cbz	r1, 8007f20 <wolfSSL_FreeSession+0x38>

    (void)ctx;

    WOLFSSL_ENTER("wolfSSL_FreeSession");

    if (session->ref.count > 0) {
 8007eee:	684b      	ldr	r3, [r1, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc11      	bgt.n	8007f18 <wolfSSL_FreeSession+0x30>
#ifdef HAVE_EX_DATA_CLEANUP_HOOKS
    wolfSSL_CRYPTO_cleanup_ex_data(&session->ex_data);
#endif

    /* Make sure masterSecret is zeroed. */
    ForceZero(session->masterSecret, SECRET_LEN);
 8007ef4:	2130      	movs	r1, #48	; 0x30
 8007ef6:	f102 005d 	add.w	r0, r2, #93	; 0x5d
 8007efa:	f7ff f974 	bl	80071e6 <ForceZero>
    /* Session ID is sensitive information too. */
    ForceZero(session->sessionID, ID_LEN);
 8007efe:	2120      	movs	r1, #32
 8007f00:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 8007f04:	f7ff f96f 	bl	80071e6 <ForceZero>

    if (session->type == WOLFSSL_SESSION_TYPE_HEAP) {
 8007f08:	7813      	ldrb	r3, [r2, #0]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d108      	bne.n	8007f20 <wolfSSL_FreeSession+0x38>
        XFREE(session, session->heap, DYNAMIC_TYPE_SESSION);
    }
}
 8007f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        XFREE(session, session->heap, DYNAMIC_TYPE_SESSION);
 8007f12:	4610      	mov	r0, r2
 8007f14:	f015 bd2e 	b.w	801d974 <free>
        wolfSSL_RefDec(&session->ref, &isZero, &ret);
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	604b      	str	r3, [r1, #4]
        if (!isZero) {
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0e9      	beq.n	8007ef4 <wolfSSL_FreeSession+0xc>
}
 8007f20:	bd08      	pop	{r3, pc}

08007f22 <wolfSSL_SESSION_dup>:
{
 8007f22:	b538      	push	{r3, r4, r5, lr}
    if (session == NULL)
 8007f24:	4605      	mov	r5, r0
 8007f26:	b910      	cbnz	r0, 8007f2e <wolfSSL_SESSION_dup+0xc>
        copy = NULL;
 8007f28:	2400      	movs	r4, #0
}
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	bd38      	pop	{r3, r4, r5, pc}
    copy = wolfSSL_NewSession(session->heap);
 8007f2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007f30:	f7ff ffb7 	bl	8007ea2 <wolfSSL_NewSession>
    if (copy != NULL &&
 8007f34:	4604      	mov	r4, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0f6      	beq.n	8007f28 <wolfSSL_SESSION_dup+0x6>
            wolfSSL_DupSession(session, copy, 0) != WOLFSSL_SUCCESS) {
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7ff ffc1 	bl	8007ec6 <wolfSSL_DupSession>
    if (copy != NULL &&
 8007f44:	2801      	cmp	r0, #1
 8007f46:	d0f0      	beq.n	8007f2a <wolfSSL_SESSION_dup+0x8>
        wolfSSL_FreeSession(NULL, copy);
 8007f48:	4621      	mov	r1, r4
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f7ff ffcc 	bl	8007ee8 <wolfSSL_FreeSession>
 8007f50:	e7ea      	b.n	8007f28 <wolfSSL_SESSION_dup+0x6>

08007f52 <wolfSSL_set_options>:

    return old_op | op;
}

long wolfSSL_set_options(WOLFSSL* ssl, long op)
{
 8007f52:	b530      	push	{r4, r5, lr}
    word16 havePSK = 0;
    int    keySz   = 0;

    WOLFSSL_ENTER("wolfSSL_set_options");

    if (ssl == NULL) {
 8007f54:	4604      	mov	r4, r0
{
 8007f56:	b08d      	sub	sp, #52	; 0x34
    if (ssl == NULL) {
 8007f58:	b910      	cbnz	r0, 8007f60 <wolfSSL_set_options+0xe>
        return 0;
 8007f5a:	2000      	movs	r0, #0
                   ssl->options.haveFalconSig, ssl->options.haveDilithiumSig,
                   ssl->options.haveAnon, TRUE, ssl->options.side);
    }

    return ssl->options.mask;
}
 8007f5c:	b00d      	add	sp, #52	; 0x34
 8007f5e:	bd30      	pop	{r4, r5, pc}
    return old_op | op;
 8007f60:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8007f64:	4319      	orrs	r1, r3
    if ((ssl->options.mask & WOLFSSL_OP_NO_TLSv1_3) == WOLFSSL_OP_NO_TLSv1_3) {
 8007f66:	008d      	lsls	r5, r1, #2
    ssl->options.mask = wolf_set_options(ssl->options.mask, op);
 8007f68:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
    if ((ssl->options.mask & WOLFSSL_OP_NO_TLSv1_3) == WOLFSSL_OP_NO_TLSv1_3) {
 8007f6c:	d506      	bpl.n	8007f7c <wolfSSL_set_options+0x2a>
        if (ssl->version.minor == TLSv1_3_MINOR)
 8007f6e:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
 8007f72:	2b04      	cmp	r3, #4
            ssl->version.minor = TLSv1_2_MINOR;
 8007f74:	bf04      	itt	eq
 8007f76:	2303      	moveq	r3, #3
 8007f78:	f880 313d 	strbeq.w	r3, [r0, #317]	; 0x13d
    if ((ssl->options.mask & WOLFSSL_OP_NO_TLSv1_2) == WOLFSSL_OP_NO_TLSv1_2) {
 8007f7c:	0108      	lsls	r0, r1, #4
 8007f7e:	d506      	bpl.n	8007f8e <wolfSSL_set_options+0x3c>
        if (ssl->version.minor == TLSv1_2_MINOR)
 8007f80:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8007f84:	2b03      	cmp	r3, #3
            ssl->version.minor = TLSv1_1_MINOR;
 8007f86:	bf04      	itt	eq
 8007f88:	2302      	moveq	r3, #2
 8007f8a:	f884 313d 	strbeq.w	r3, [r4, #317]	; 0x13d
    if ((ssl->options.mask & WOLFSSL_OP_NO_TLSv1_1) == WOLFSSL_OP_NO_TLSv1_1) {
 8007f8e:	014a      	lsls	r2, r1, #5
 8007f90:	d506      	bpl.n	8007fa0 <wolfSSL_set_options+0x4e>
        if (ssl->version.minor == TLSv1_1_MINOR)
 8007f92:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8007f96:	2b02      	cmp	r3, #2
            ssl->version.minor = TLSv1_MINOR;
 8007f98:	bf04      	itt	eq
 8007f9a:	2301      	moveq	r3, #1
 8007f9c:	f884 313d 	strbeq.w	r3, [r4, #317]	; 0x13d
    if ((ssl->options.mask & WOLFSSL_OP_NO_TLSv1) == WOLFSSL_OP_NO_TLSv1) {
 8007fa0:	048b      	lsls	r3, r1, #18
 8007fa2:	d506      	bpl.n	8007fb2 <wolfSSL_set_options+0x60>
        if (ssl->version.minor == TLSv1_MINOR)
 8007fa4:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8007fa8:	2b01      	cmp	r3, #1
            ssl->version.minor = SSLv3_MINOR;
 8007faa:	bf04      	itt	eq
 8007fac:	2300      	moveq	r3, #0
 8007fae:	f884 313d 	strbeq.w	r3, [r4, #317]	; 0x13d
    if (ssl->options.side != WOLFSSL_NEITHER_END) {
 8007fb2:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8007fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fba:	2b30      	cmp	r3, #48	; 0x30
 8007fbc:	d02e      	beq.n	800801c <wolfSSL_set_options+0xca>
        if (AllocateSuites(ssl) != 0)
 8007fbe:	4620      	mov	r0, r4
    keySz = ssl->buffers.keySz;
 8007fc0:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
        if (AllocateSuites(ssl) != 0)
 8007fc4:	f7f8 fe0a 	bl	8000bdc <AllocateSuites>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1c5      	bne.n	8007f5a <wolfSSL_set_options+0x8>
                   ssl->options.haveAnon, TRUE, ssl->options.side);
 8007fce:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	f3c1 1101 	ubfx	r1, r1, #4, #2
 8007fd8:	910a      	str	r1, [sp, #40]	; 0x28
 8007fda:	9009      	str	r0, [sp, #36]	; 0x24
                   ssl->options.haveAnon, TRUE, ssl->options.side);
 8007fdc:	f894 1275 	ldrb.w	r1, [r4, #629]	; 0x275
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 8007fe0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8007fe4:	9108      	str	r1, [sp, #32]
                   ssl->options.haveFalconSig, ssl->options.haveDilithiumSig,
 8007fe6:	f894 1273 	ldrb.w	r1, [r4, #627]	; 0x273
        InitSuites(ssl->suites, ssl->version, keySz, haveRSA, havePSK,
 8007fea:	09ca      	lsrs	r2, r1, #7
 8007fec:	9207      	str	r2, [sp, #28]
 8007fee:	f3c1 1280 	ubfx	r2, r1, #6, #1
 8007ff2:	9206      	str	r2, [sp, #24]
 8007ff4:	f3c1 1240 	ubfx	r2, r1, #5, #1
 8007ff8:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8007ffc:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8008000:	9203      	str	r2, [sp, #12]
 8008002:	f3c1 1200 	ubfx	r2, r1, #4, #1
 8008006:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800800a:	e9cd 3100 	strd	r3, r1, [sp]
 800800e:	9202      	str	r2, [sp, #8]
 8008010:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8008014:	6860      	ldr	r0, [r4, #4]
 8008016:	462a      	mov	r2, r5
 8008018:	f7f8 fdff 	bl	8000c1a <InitSuites>
    return ssl->options.mask;
 800801c:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
 8008020:	e79c      	b.n	8007f5c <wolfSSL_set_options+0xa>

08008022 <wolfSSL_get_options>:


long wolfSSL_get_options(const WOLFSSL* ssl)
{
    WOLFSSL_ENTER("wolfSSL_get_options");
    if(ssl == NULL)
 8008022:	b108      	cbz	r0, 8008028 <wolfSSL_get_options+0x6>
        return WOLFSSL_FAILURE;
    return ssl->options.mask;
 8008024:	f8d0 026c 	ldr.w	r0, [r0, #620]	; 0x26c
}
 8008028:	4770      	bx	lr

0800802a <ctMaskEq>:
    return (byte)((((word32)b - (word32)a - 1) >> 31) - 1);
 800802a:	1e4b      	subs	r3, r1, #1
 800802c:	1a1b      	subs	r3, r3, r0
    return (byte)((((word32)a - (word32)b - 1) >> 31) - 1);
 800802e:	1a40      	subs	r0, r0, r1
    return (byte)((byte)(~ctMaskGT(a, b)) & (byte)(~ctMaskLT(a, b)));
 8008030:	17db      	asrs	r3, r3, #31
    return (byte)((((word32)a - (word32)b - 1) >> 31) - 1);
 8008032:	3801      	subs	r0, #1
    return (byte)((byte)(~ctMaskGT(a, b)) & (byte)(~ctMaskLT(a, b)));
 8008034:	ea03 70e0 	and.w	r0, r3, r0, asr #31
}
 8008038:	b2c0      	uxtb	r0, r0
 800803a:	4770      	bx	lr

0800803c <TLSX_SupportedCurve_ValidateRequest>:
}
#else
static void TLSX_SupportedCurve_ValidateRequest(WOLFSSL* ssl, byte* semaphore)
{
    word16 i;
    const Suites* suites = WOLFSSL_SUITES(ssl);
 800803c:	6842      	ldr	r2, [r0, #4]
{
 800803e:	b530      	push	{r4, r5, lr}
    const Suites* suites = WOLFSSL_SUITES(ssl);
 8008040:	b90a      	cbnz	r2, 8008046 <TLSX_SupportedCurve_ValidateRequest+0xa>
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	6ada      	ldr	r2, [r3, #44]	; 0x2c

    for (i = 0; i < suites->suiteSz; i += 2) {
 8008046:	8814      	ldrh	r4, [r2, #0]
 8008048:	2300      	movs	r3, #0
 800804a:	429c      	cmp	r4, r3
 800804c:	d804      	bhi.n	8008058 <TLSX_SupportedCurve_ValidateRequest+0x1c>
        }
        #endif
    }

    /* turns semaphore on to avoid sending this extension. */
    TURN_ON(semaphore, TLSX_ToSemaphore(TLSX_SUPPORTED_GROUPS));
 800804e:	784b      	ldrb	r3, [r1, #1]
 8008050:	f043 0304 	orr.w	r3, r3, #4
 8008054:	704b      	strb	r3, [r1, #1]
}
 8008056:	bd30      	pop	{r4, r5, pc}
        if (suites->suites[i] == TLS13_BYTE)
 8008058:	18d0      	adds	r0, r2, r3
 800805a:	7900      	ldrb	r0, [r0, #4]
 800805c:	2813      	cmp	r0, #19
 800805e:	d0fa      	beq.n	8008056 <TLSX_SupportedCurve_ValidateRequest+0x1a>
        if ((suites->suites[i] == ECC_BYTE) ||
 8008060:	f000 05ef 	and.w	r5, r0, #239	; 0xef
 8008064:	2dc0      	cmp	r5, #192	; 0xc0
 8008066:	d0f6      	beq.n	8008056 <TLSX_SupportedCurve_ValidateRequest+0x1a>
            (suites->suites[i] == ECDHE_PSK_BYTE) ||
 8008068:	28cc      	cmp	r0, #204	; 0xcc
 800806a:	d0f4      	beq.n	8008056 <TLSX_SupportedCurve_ValidateRequest+0x1a>
    for (i = 0; i < suites->suiteSz; i += 2) {
 800806c:	3302      	adds	r3, #2
 800806e:	b29b      	uxth	r3, r3
 8008070:	e7eb      	b.n	800804a <TLSX_SupportedCurve_ValidateRequest+0xe>

08008072 <TLSX_PointFormat_ValidateRequest>:
#ifdef HAVE_FFDHE
    (void)ssl;
    (void)semaphore;
#else
    word16 i;
    const Suites* suites = WOLFSSL_SUITES(ssl);
 8008072:	6842      	ldr	r2, [r0, #4]
{
 8008074:	b530      	push	{r4, r5, lr}
    const Suites* suites = WOLFSSL_SUITES(ssl);
 8008076:	b912      	cbnz	r2, 800807e <TLSX_PointFormat_ValidateRequest+0xc>
 8008078:	6803      	ldr	r3, [r0, #0]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c

    if (suites == NULL)
 800807c:	b13a      	cbz	r2, 800808e <TLSX_PointFormat_ValidateRequest+0x1c>
        return;

    for (i = 0; i < suites->suiteSz; i += 2) {
 800807e:	8814      	ldrh	r4, [r2, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	429c      	cmp	r4, r3
 8008084:	d804      	bhi.n	8008090 <TLSX_PointFormat_ValidateRequest+0x1e>
            return;
        #endif
        }
    }
   /* turns semaphore on to avoid sending this extension. */
   TURN_ON(semaphore, TLSX_ToSemaphore(TLSX_EC_POINT_FORMATS));
 8008086:	784b      	ldrb	r3, [r1, #1]
 8008088:	f043 0308 	orr.w	r3, r3, #8
 800808c:	704b      	strb	r3, [r1, #1]
#endif
}
 800808e:	bd30      	pop	{r4, r5, pc}
        if (suites->suites[i] == TLS13_BYTE)
 8008090:	18d0      	adds	r0, r2, r3
 8008092:	7900      	ldrb	r0, [r0, #4]
 8008094:	2813      	cmp	r0, #19
 8008096:	d0fa      	beq.n	800808e <TLSX_PointFormat_ValidateRequest+0x1c>
        if ((suites->suites[i] == ECC_BYTE) ||
 8008098:	f000 05ef 	and.w	r5, r0, #239	; 0xef
 800809c:	2dc0      	cmp	r5, #192	; 0xc0
 800809e:	d0f6      	beq.n	800808e <TLSX_PointFormat_ValidateRequest+0x1c>
            (suites->suites[i] == ECDHE_PSK_BYTE) ||
 80080a0:	28cc      	cmp	r0, #204	; 0xcc
 80080a2:	d0f4      	beq.n	800808e <TLSX_PointFormat_ValidateRequest+0x1c>
    for (i = 0; i < suites->suiteSz; i += 2) {
 80080a4:	3302      	adds	r3, #2
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	e7eb      	b.n	8008082 <TLSX_PointFormat_ValidateRequest+0x10>

080080aa <TLSX_GetSize>:
                        word16* pLength)
{
    int    ret = 0;
    TLSX*  extension;
    word16 length = 0;
    byte   isRequest = (msgType == client_hello ||
 80080aa:	2a01      	cmp	r2, #1
{
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	4614      	mov	r4, r2
    byte   isRequest = (msgType == client_hello ||
 80080b2:	d002      	beq.n	80080ba <TLSX_GetSize+0x10>
 80080b4:	3a0d      	subs	r2, #13
 80080b6:	4254      	negs	r4, r2
 80080b8:	4154      	adcs	r4, r2
    word16 length = 0;
 80080ba:	2200      	movs	r2, #0
    switch (type) {
 80080bc:	f64f 7701 	movw	r7, #65281	; 0xff01
        /* only extensions marked as response are sent back to the client. */
        if (!isRequest && !extension->resp)
            continue; /* skip! */

        /* ssl level extensions are expected to override ctx level ones. */
        if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
 80080c0:	f04f 0c01 	mov.w	ip, #1
    while ((extension = list)) {
 80080c4:	b920      	cbnz	r0, 80080d0 <TLSX_GetSize+0x26>
        /* marks the extension as processed so ctx level */
        /* extensions don't overlap with ssl level ones. */
        TURN_ON(semaphore, TLSX_ToSemaphore(extension->type));
    }

    *pLength += length;
 80080c6:	8819      	ldrh	r1, [r3, #0]
 80080c8:	440a      	add	r2, r1
 80080ca:	801a      	strh	r2, [r3, #0]

    return ret;
}
 80080cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        list = extension->next;
 80080d0:	f8d0 e010 	ldr.w	lr, [r0, #16]
        if (!isRequest && !extension->resp)
 80080d4:	b90c      	cbnz	r4, 80080da <TLSX_GetSize+0x30>
 80080d6:	7b05      	ldrb	r5, [r0, #12]
 80080d8:	b345      	cbz	r5, 800812c <TLSX_GetSize+0x82>
        if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
 80080da:	f8b0 a000 	ldrh.w	sl, [r0]
    switch (type) {
 80080de:	45ba      	cmp	sl, r7
 80080e0:	bf14      	ite	ne
 80080e2:	46d1      	movne	r9, sl
 80080e4:	f04f 093f 	moveq.w	r9, #63	; 0x3f
        if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
 80080e8:	ea4f 06d9 	mov.w	r6, r9, lsr #3
 80080ec:	f009 0907 	and.w	r9, r9, #7
 80080f0:	5d8d      	ldrb	r5, [r1, r6]
 80080f2:	fa0c f909 	lsl.w	r9, ip, r9
 80080f6:	ea19 0f05 	tst.w	r9, r5
 80080fa:	fa5f f889 	uxtb.w	r8, r9
 80080fe:	d115      	bne.n	800812c <TLSX_GetSize+0x82>
        length += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
 8008100:	3204      	adds	r2, #4
        switch (extension->type) {
 8008102:	f1ba 0f0b 	cmp.w	sl, #11
        length += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
 8008106:	b292      	uxth	r2, r2
        switch (extension->type) {
 8008108:	d017      	beq.n	800813a <TLSX_GetSize+0x90>
 800810a:	f1ba 0f0d 	cmp.w	sl, #13
 800810e:	d01f      	beq.n	8008150 <TLSX_GetSize+0xa6>
 8008110:	f1ba 0f0a 	cmp.w	sl, #10
 8008114:	d107      	bne.n	8008126 <TLSX_GetSize+0x7c>
                length += EC_GET_SIZE((SupportedCurve*)extension->data);
 8008116:	f8d0 9004 	ldr.w	r9, [r0, #4]
    word16 length = OPAQUE16_LEN; /* list length */
 800811a:	2002      	movs	r0, #2
    while ((curve = list)) {
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	d106      	bne.n	8008130 <TLSX_GetSize+0x86>
                length += SA_GET_SIZE(extension->data);
 8008122:	4402      	add	r2, r0
 8008124:	b292      	uxth	r2, r2
        TURN_ON(semaphore, TLSX_ToSemaphore(extension->type));
 8008126:	ea45 0508 	orr.w	r5, r5, r8
 800812a:	558d      	strb	r5, [r1, r6]
    word16 length = ENUM_LEN; /* list length */
 800812c:	4670      	mov	r0, lr
 800812e:	e7c9      	b.n	80080c4 <TLSX_GetSize+0x1a>
        length += OPAQUE16_LEN; /* curve length */
 8008130:	3002      	adds	r0, #2
        list = curve->next;
 8008132:	f8d9 9004 	ldr.w	r9, [r9, #4]
        length += OPAQUE16_LEN; /* curve length */
 8008136:	b280      	uxth	r0, r0
 8008138:	e7f0      	b.n	800811c <TLSX_GetSize+0x72>
                length += PF_GET_SIZE((PointFormat*)extension->data);
 800813a:	f8d0 9004 	ldr.w	r9, [r0, #4]
    word16 length = ENUM_LEN; /* list length */
 800813e:	2001      	movs	r0, #1
    while ((point = list)) {
 8008140:	f1b9 0f00 	cmp.w	r9, #0
 8008144:	d0ed      	beq.n	8008122 <TLSX_GetSize+0x78>
        length += ENUM_LEN; /* format length */
 8008146:	3001      	adds	r0, #1
        list = point->next;
 8008148:	f8d9 9004 	ldr.w	r9, [r9, #4]
        length += ENUM_LEN; /* format length */
 800814c:	b280      	uxth	r0, r0
 800814e:	e7f7      	b.n	8008140 <TLSX_GetSize+0x96>
                length += SA_GET_SIZE(extension->data);
 8008150:	f8d0 9004 	ldr.w	r9, [r0, #4]
    if (sa->hashSigAlgoSz == 0)
 8008154:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8008158:	b940      	cbnz	r0, 800816c <TLSX_GetSize+0xc2>
        return OPAQUE16_LEN + WOLFSSL_SUITES(sa->ssl)->hashSigAlgoSz;
 800815a:	f8d9 9000 	ldr.w	r9, [r9]
 800815e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8008162:	b910      	cbnz	r0, 800816a <TLSX_GetSize+0xc0>
 8008164:	f8d9 0000 	ldr.w	r0, [r9]
 8008168:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800816a:	8840      	ldrh	r0, [r0, #2]
        return OPAQUE16_LEN + sa->hashSigAlgoSz;
 800816c:	3002      	adds	r0, #2
 800816e:	b280      	uxth	r0, r0
 8008170:	e7d7      	b.n	8008122 <TLSX_GetSize+0x78>

08008172 <TLSX_Write>:

/** Writes the extensions of a list in a buffer. */
static int TLSX_Write(TLSX* list, byte* output, byte* semaphore,
                         byte msgType, word16* pOffset)
{
 8008172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int    ret = 0;
    TLSX*  extension;
    word16 offset = 0;
    word16 length_offset = 0;
    byte   isRequest = (msgType == client_hello ||
 8008176:	2b01      	cmp	r3, #1
{
 8008178:	b085      	sub	sp, #20
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4691      	mov	r9, r2
    byte   isRequest = (msgType == client_hello ||
 8008180:	d003      	beq.n	800818a <TLSX_Write+0x18>
 8008182:	f1a3 020d 	sub.w	r2, r3, #13
 8008186:	4253      	negs	r3, r2
 8008188:	4153      	adcs	r3, r2
 800818a:	9301      	str	r3, [sp, #4]
    word16 offset = 0;
 800818c:	2400      	movs	r4, #0
    switch (type) {
 800818e:	f64f 7a01 	movw	sl, #65281	; 0xff01
        /* only extensions marked as response are written in a response. */
        if (!isRequest && !extension->resp)
            continue; /* skip! */

        /* ssl level extensions are expected to override ctx level ones. */
        if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
 8008192:	f04f 0b01 	mov.w	fp, #1
    while ((extension = list)) {
 8008196:	b946      	cbnz	r6, 80081aa <TLSX_Write+0x38>
        /* if we encountered an error propagate it */
        if (ret != 0)
            break;
    }

    *pOffset += offset;
 8008198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	441c      	add	r4, r3
 800819e:	9b0e      	ldr	r3, [sp, #56]	; 0x38

    return ret;
}
 80081a0:	4630      	mov	r0, r6
    *pOffset += offset;
 80081a2:	801c      	strh	r4, [r3, #0]
}
 80081a4:	b005      	add	sp, #20
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        list = extension->next;
 80081aa:	6933      	ldr	r3, [r6, #16]
 80081ac:	9302      	str	r3, [sp, #8]
        if (!isRequest && !extension->resp)
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	b913      	cbnz	r3, 80081b8 <TLSX_Write+0x46>
 80081b2:	7b33      	ldrb	r3, [r6, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d03a      	beq.n	800822e <TLSX_Write+0xbc>
        if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
 80081b8:	8832      	ldrh	r2, [r6, #0]
    switch (type) {
 80081ba:	4552      	cmp	r2, sl
 80081bc:	bf14      	ite	ne
 80081be:	4613      	movne	r3, r2
 80081c0:	233f      	moveq	r3, #63	; 0x3f
        if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
 80081c2:	08d9      	lsrs	r1, r3, #3
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	f819 1001 	ldrb.w	r1, [r9, r1]
 80081cc:	fa0b f303 	lsl.w	r3, fp, r3
 80081d0:	4219      	tst	r1, r3
 80081d2:	d12c      	bne.n	800822e <TLSX_Write+0xbc>
        c16toa(extension->type, output + offset);
 80081d4:	193b      	adds	r3, r7, r4
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80081d6:	0a11      	lsrs	r1, r2, #8
 80081d8:	5539      	strb	r1, [r7, r4]
    c[1] =  (byte)(wc_u16       & 0xff);
 80081da:	705a      	strb	r2, [r3, #1]
        switch (extension->type) {
 80081dc:	8833      	ldrh	r3, [r6, #0]
        offset += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
 80081de:	1d25      	adds	r5, r4, #4
        switch (extension->type) {
 80081e0:	2b0b      	cmp	r3, #11
        offset += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
 80081e2:	b2ad      	uxth	r5, r5
        switch (extension->type) {
 80081e4:	d030      	beq.n	8008248 <TLSX_Write+0xd6>
 80081e6:	2b0d      	cmp	r3, #13
 80081e8:	d03b      	beq.n	8008262 <TLSX_Write+0xf0>
 80081ea:	2b0a      	cmp	r3, #10
 80081ec:	d165      	bne.n	80082ba <TLSX_Write+0x148>
                offset += EC_WRITE((SupportedCurve*)extension->data,
 80081ee:	6873      	ldr	r3, [r6, #4]
 80081f0:	197a      	adds	r2, r7, r5
    word16 offset = OPAQUE16_LEN;
 80081f2:	2402      	movs	r4, #2
    while (list) {
 80081f4:	b9eb      	cbnz	r3, 8008232 <TLSX_Write+0xc0>
    c16toa(offset - OPAQUE16_LEN, output); /* writing list length */
 80081f6:	1ea3      	subs	r3, r4, #2
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80081f8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80081fc:	5579      	strb	r1, [r7, r5]
    c[1] =  (byte)(wc_u16       & 0xff);
 80081fe:	7053      	strb	r3, [r2, #1]
                offset += PF_WRITE((PointFormat*)extension->data,
 8008200:	442c      	add	r4, r5
 8008202:	b2a4      	uxth	r4, r4
        c16toa(offset - length_offset, output + length_offset - OPAQUE16_LEN);
 8008204:	1b63      	subs	r3, r4, r5
 8008206:	3d02      	subs	r5, #2
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8008208:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800820c:	197a      	adds	r2, r7, r5
 800820e:	5579      	strb	r1, [r7, r5]
    c[1] =  (byte)(wc_u16       & 0xff);
 8008210:	7053      	strb	r3, [r2, #1]
        TURN_ON(semaphore, TLSX_ToSemaphore(extension->type));
 8008212:	8833      	ldrh	r3, [r6, #0]
            return 63;
 8008214:	4553      	cmp	r3, sl
 8008216:	bf08      	it	eq
 8008218:	233f      	moveq	r3, #63	; 0x3f
        TURN_ON(semaphore, TLSX_ToSemaphore(extension->type));
 800821a:	08da      	lsrs	r2, r3, #3
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	f819 1002 	ldrb.w	r1, [r9, r2]
 8008224:	fa0b f303 	lsl.w	r3, fp, r3
 8008228:	430b      	orrs	r3, r1
 800822a:	f809 3002 	strb.w	r3, [r9, r2]
            return 63;
 800822e:	9e02      	ldr	r6, [sp, #8]
 8008230:	e7b1      	b.n	8008196 <TLSX_Write+0x24>
        c16toa(list->name, output + offset);
 8008232:	8819      	ldrh	r1, [r3, #0]
 8008234:	1910      	adds	r0, r2, r4
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8008236:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 800823a:	f802 c004 	strb.w	ip, [r2, r4]
    c[1] =  (byte)(wc_u16       & 0xff);
 800823e:	7041      	strb	r1, [r0, #1]
        offset += OPAQUE16_LEN;
 8008240:	3402      	adds	r4, #2
        list = list->next;
 8008242:	685b      	ldr	r3, [r3, #4]
        offset += OPAQUE16_LEN;
 8008244:	b2a4      	uxth	r4, r4
        list = list->next;
 8008246:	e7d5      	b.n	80081f4 <TLSX_Write+0x82>
                offset += PF_WRITE((PointFormat*)extension->data,
 8008248:	6873      	ldr	r3, [r6, #4]
 800824a:	197a      	adds	r2, r7, r5
    word16 offset = ENUM_LEN;
 800824c:	2401      	movs	r4, #1
    while (list) {
 800824e:	b913      	cbnz	r3, 8008256 <TLSX_Write+0xe4>
    output[0] = (byte)(offset - ENUM_LEN);
 8008250:	1e63      	subs	r3, r4, #1
 8008252:	557b      	strb	r3, [r7, r5]
 8008254:	e7d4      	b.n	8008200 <TLSX_Write+0x8e>
        output[offset++] = list->format;
 8008256:	7818      	ldrb	r0, [r3, #0]
 8008258:	5510      	strb	r0, [r2, r4]
 800825a:	1c61      	adds	r1, r4, #1
        list = list->next;
 800825c:	685b      	ldr	r3, [r3, #4]
        output[offset++] = list->format;
 800825e:	b28c      	uxth	r4, r1
 8008260:	e7f5      	b.n	800824e <TLSX_Write+0xdc>
                offset += SA_WRITE(extension->data, output + offset);
 8008262:	6873      	ldr	r3, [r6, #4]
    const Suites* suites = WOLFSSL_SUITES(sa->ssl);
 8008264:	6819      	ldr	r1, [r3, #0]
 8008266:	f8d1 8004 	ldr.w	r8, [r1, #4]
                offset += SA_WRITE(extension->data, output + offset);
 800826a:	197a      	adds	r2, r7, r5
    const Suites* suites = WOLFSSL_SUITES(sa->ssl);
 800826c:	f1b8 0f00 	cmp.w	r8, #0
 8008270:	d102      	bne.n	8008278 <TLSX_Write+0x106>
 8008272:	6809      	ldr	r1, [r1, #0]
 8008274:	f8d1 802c 	ldr.w	r8, [r1, #44]	; 0x2c
    if (sa->hashSigAlgoSz == 0) {
 8008278:	8899      	ldrh	r1, [r3, #4]
        XMEMCPY(output + OPAQUE16_LEN, suites->hashSigAlgo,
 800827a:	1c90      	adds	r0, r2, #2
    if (sa->hashSigAlgoSz == 0) {
 800827c:	b981      	cbnz	r1, 80082a0 <TLSX_Write+0x12e>
        c16toa(suites->hashSigAlgoSz, output);
 800827e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8008282:	0a19      	lsrs	r1, r3, #8
 8008284:	5579      	strb	r1, [r7, r5]
    c[1] =  (byte)(wc_u16       & 0xff);
 8008286:	7053      	strb	r3, [r2, #1]
        XMEMCPY(output + OPAQUE16_LEN, suites->hashSigAlgo,
 8008288:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800828c:	f508 7198 	add.w	r1, r8, #304	; 0x130
 8008290:	f015 fb88 	bl	801d9a4 <memcpy>
        hashSigAlgoSz = suites->hashSigAlgoSz;
 8008294:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    return OPAQUE16_LEN + hashSigAlgoSz;
 8008298:	3406      	adds	r4, #6
                offset += SA_WRITE(extension->data, output + offset);
 800829a:	fa13 f484 	uxtah	r4, r3, r4
 800829e:	e7b0      	b.n	8008202 <TLSX_Write+0x90>
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 80082a0:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 80082a4:	f807 c005 	strb.w	ip, [r7, r5]
    c[1] =  (byte)(wc_u16       & 0xff);
 80082a8:	7051      	strb	r1, [r2, #1]
        XMEMCPY(output + OPAQUE16_LEN, sa->hashSigAlgo,
 80082aa:	889a      	ldrh	r2, [r3, #4]
 80082ac:	9303      	str	r3, [sp, #12]
 80082ae:	1d99      	adds	r1, r3, #6
 80082b0:	f015 fb78 	bl	801d9a4 <memcpy>
        hashSigAlgoSz = sa->hashSigAlgoSz;
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	e7ee      	b.n	8008298 <TLSX_Write+0x126>
        switch (extension->type) {
 80082ba:	462c      	mov	r4, r5
 80082bc:	e7a2      	b.n	8008204 <TLSX_Write+0x92>

080082be <Hmac_HashUpdate>:
    switch (hmac->macType) {
 80082be:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 80082c2:	2b06      	cmp	r3, #6
 80082c4:	d005      	beq.n	80082d2 <Hmac_HashUpdate+0x14>
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d005      	beq.n	80082d6 <Hmac_HashUpdate+0x18>
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d105      	bne.n	80082da <Hmac_HashUpdate+0x1c>
            ret = wc_ShaUpdate(&hmac->hash.sha, data, sz);
 80082ce:	f007 bb65 	b.w	800f99c <wc_ShaUpdate>
            ret = wc_Sha256Update(&hmac->hash.sha256, data, sz);
 80082d2:	f007 be69 	b.w	800ffa8 <wc_Sha256Update>
            ret = wc_Sha512Update(&hmac->hash.sha512, data, sz);
 80082d6:	f00a b961 	b.w	801259c <wc_Sha512Update>
}
 80082da:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80082de:	4770      	bx	lr

080082e0 <TLSX_PointFormat_ValidateResponse.isra.0>:
    if (ssl->options.cipherSuite0 == TLS13_BYTE)
 80082e0:	2813      	cmp	r0, #19
 80082e2:	d009      	beq.n	80082f8 <TLSX_PointFormat_ValidateResponse.isra.0+0x18>
    if (ssl->options.cipherSuite0 == ECC_BYTE ||
 80082e4:	f000 03ef 	and.w	r3, r0, #239	; 0xef
 80082e8:	2bc0      	cmp	r3, #192	; 0xc0
 80082ea:	d005      	beq.n	80082f8 <TLSX_PointFormat_ValidateResponse.isra.0+0x18>
        ssl->options.cipherSuite0 == ECDHE_PSK_BYTE ||
 80082ec:	28cc      	cmp	r0, #204	; 0xcc
    TURN_ON(semaphore, TLSX_ToSemaphore(TLSX_EC_POINT_FORMATS));
 80082ee:	bf1e      	ittt	ne
 80082f0:	784b      	ldrbne	r3, [r1, #1]
 80082f2:	f043 0308 	orrne.w	r3, r3, #8
 80082f6:	704b      	strbne	r3, [r1, #1]
}
 80082f8:	4770      	bx	lr
	...

080082fc <BuildTlsHandshakeHash>:
{
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	460e      	mov	r6, r1
 8008300:	4614      	mov	r4, r2
    if (ssl == NULL || hash == NULL || hashLen == NULL || *hashLen < HSHASH_SZ)
 8008302:	4605      	mov	r5, r0
 8008304:	b1f8      	cbz	r0, 8008346 <BuildTlsHandshakeHash+0x4a>
 8008306:	b1f1      	cbz	r1, 8008346 <BuildTlsHandshakeHash+0x4a>
 8008308:	b1ea      	cbz	r2, 8008346 <BuildTlsHandshakeHash+0x4a>
 800830a:	6813      	ldr	r3, [r2, #0]
 800830c:	2b23      	cmp	r3, #35	; 0x23
 800830e:	d91a      	bls.n	8008346 <BuildTlsHandshakeHash+0x4a>
    if (IsAtLeastTLSv1_2(ssl)) {
 8008310:	f7f8 fb30 	bl	8000974 <IsAtLeastTLSv1_2>
 8008314:	b190      	cbz	r0, 800833c <BuildTlsHandshakeHash+0x40>
        if (ssl->specs.mac_algorithm <= sha256_mac ||
 8008316:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
 800831a:	2b04      	cmp	r3, #4
 800831c:	d901      	bls.n	8008322 <BuildTlsHandshakeHash+0x26>
 800831e:	2b08      	cmp	r3, #8
 8008320:	d10e      	bne.n	8008340 <BuildTlsHandshakeHash+0x44>
            ret |= wc_Sha256GetHash(&ssl->hsHashes->hashSha256, hash);
 8008322:	68e8      	ldr	r0, [r5, #12]
 8008324:	4631      	mov	r1, r6
 8008326:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 800832a:	f007 ff4b 	bl	80101c4 <wc_Sha256GetHash>
            hashSz = WC_SHA256_DIGEST_SIZE;
 800832e:	2320      	movs	r3, #32
    *hashLen = hashSz;
 8008330:	6023      	str	r3, [r4, #0]
        ret = BUILD_MSG_ERROR;
 8008332:	4b06      	ldr	r3, [pc, #24]	; (800834c <BuildTlsHandshakeHash+0x50>)
 8008334:	2800      	cmp	r0, #0
 8008336:	bf18      	it	ne
 8008338:	4618      	movne	r0, r3
}
 800833a:	bd70      	pop	{r4, r5, r6, pc}
    word32 hashSz = FINISHED_SZ;
 800833c:	2324      	movs	r3, #36	; 0x24
 800833e:	e7f7      	b.n	8008330 <BuildTlsHandshakeHash+0x34>
 8008340:	2324      	movs	r3, #36	; 0x24
    int ret = 0;
 8008342:	2000      	movs	r0, #0
 8008344:	e7f4      	b.n	8008330 <BuildTlsHandshakeHash+0x34>
        return BAD_FUNC_ARG;
 8008346:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800834a:	e7f6      	b.n	800833a <BuildTlsHandshakeHash+0x3e>
 800834c:	fffffec0 	.word	0xfffffec0

08008350 <BuildTlsFinished>:
{
 8008350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    word32 hashSz = HSHASH_SZ;
 8008354:	2324      	movs	r3, #36	; 0x24
{
 8008356:	b093      	sub	sp, #76	; 0x4c
    ret = BuildTlsHandshakeHash(ssl, handshake_hash, &hashSz);
 8008358:	eb0d 0403 	add.w	r4, sp, r3
{
 800835c:	460f      	mov	r7, r1
 800835e:	4616      	mov	r6, r2
    ret = BuildTlsHandshakeHash(ssl, handshake_hash, &hashSz);
 8008360:	4621      	mov	r1, r4
 8008362:	aa08      	add	r2, sp, #32
{
 8008364:	4605      	mov	r5, r0
    word32 hashSz = HSHASH_SZ;
 8008366:	9308      	str	r3, [sp, #32]
    ret = BuildTlsHandshakeHash(ssl, handshake_hash, &hashSz);
 8008368:	f7ff ffc8 	bl	80082fc <BuildTlsHandshakeHash>
    if (ret == 0) {
 800836c:	b968      	cbnz	r0, 800838a <BuildTlsFinished+0x3a>
        if (XSTRNCMP((const char*)sender, (const char*)kTlsClientStr,
 800836e:	491c      	ldr	r1, [pc, #112]	; (80083e0 <BuildTlsFinished+0x90>)
 8008370:	2204      	movs	r2, #4
 8008372:	4630      	mov	r0, r6
 8008374:	f015 fca1 	bl	801dcba <strncmp>
 8008378:	b178      	cbz	r0, 800839a <BuildTlsFinished+0x4a>
        else if (XSTRNCMP((const char*)sender, (const char*)kTlsServerStr,
 800837a:	491a      	ldr	r1, [pc, #104]	; (80083e4 <BuildTlsFinished+0x94>)
 800837c:	2204      	movs	r2, #4
 800837e:	4630      	mov	r0, r6
 8008380:	f015 fc9b 	bl	801dcba <strncmp>
 8008384:	b348      	cbz	r0, 80083da <BuildTlsFinished+0x8a>
            ret = BAD_FUNC_ARG;
 8008386:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800838a:	b013      	add	sp, #76	; 0x4c
 800838c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (len--) *z++ = 0;
 8008390:	f804 2b01 	strb.w	r2, [r4], #1
 8008394:	3b01      	subs	r3, #1
 8008396:	d2fb      	bcs.n	8008390 <BuildTlsFinished+0x40>
 8008398:	e7f7      	b.n	800838a <BuildTlsFinished+0x3a>
            side = kTlsClientFinStr;
 800839a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80083e8 <BuildTlsFinished+0x98>
                      ssl->arrays->masterSecret, SECRET_LEN, side,
 800839e:	68ae      	ldr	r6, [r5, #8]
            ret = wc_PRF_TLS((byte*)hashes, TLS_FINISHED_SZ,
 80083a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083a4:	4628      	mov	r0, r5
 80083a6:	f7f8 fae5 	bl	8000974 <IsAtLeastTLSv1_2>
 80083aa:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083b2:	9306      	str	r3, [sp, #24]
 80083b4:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
                      ssl->arrays->masterSecret, SECRET_LEN, side,
 80083b8:	3675      	adds	r6, #117	; 0x75
            ret = wc_PRF_TLS((byte*)hashes, TLS_FINISHED_SZ,
 80083ba:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80083be:	230f      	movs	r3, #15
 80083c0:	e9cd 8300 	strd	r8, r3, [sp]
 80083c4:	4632      	mov	r2, r6
 80083c6:	2330      	movs	r3, #48	; 0x30
 80083c8:	e9cd 4902 	strd	r4, r9, [sp, #8]
 80083cc:	210c      	movs	r1, #12
 80083ce:	4638      	mov	r0, r7
 80083d0:	f006 fb5d 	bl	800ea8e <wc_PRF_TLS>
        ForceZero(handshake_hash, hashSz);
 80083d4:	9b08      	ldr	r3, [sp, #32]
 80083d6:	2200      	movs	r2, #0
 80083d8:	e7dc      	b.n	8008394 <BuildTlsFinished+0x44>
            side = kTlsServerFinStr;
 80083da:	f8df 8010 	ldr.w	r8, [pc, #16]	; 80083ec <BuildTlsFinished+0x9c>
 80083de:	e7de      	b.n	800839e <BuildTlsFinished+0x4e>
 80083e0:	0801fd5d 	.word	0x0801fd5d
 80083e4:	0801fd67 	.word	0x0801fd67
 80083e8:	0801fd73 	.word	0x0801fd73
 80083ec:	0801fd83 	.word	0x0801fd83

080083f0 <DeriveTlsKeys>:
{
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        2 * ssl->specs.key_size  +
 80083f4:	f8b0 3140 	ldrh.w	r3, [r0, #320]	; 0x140
    int   key_dig_len = 2 * ssl->specs.hash_size +
 80083f8:	f890 514d 	ldrb.w	r5, [r0, #333]	; 0x14d
 80083fc:	441d      	add	r5, r3
                        2 * ssl->specs.iv_size;
 80083fe:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
{
 8008402:	b09b      	sub	sp, #108	; 0x6c
 8008404:	4604      	mov	r4, r0
    key_dig = (byte*)XMALLOC(MAX_PRF_DIG, ssl->heap, DYNAMIC_TYPE_DIGEST);
 8008406:	20e0      	movs	r0, #224	; 0xe0
                        2 * ssl->specs.key_size  +
 8008408:	441d      	add	r5, r3
    key_dig = (byte*)XMALLOC(MAX_PRF_DIG, ssl->heap, DYNAMIC_TYPE_DIGEST);
 800840a:	f015 faab 	bl	801d964 <malloc>
    int   key_dig_len = 2 * ssl->specs.hash_size +
 800840e:	006d      	lsls	r5, r5, #1
    if (key_dig == NULL) {
 8008410:	4606      	mov	r6, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d03b      	beq.n	800848e <DeriveTlsKeys+0x9e>
        ret = _DeriveTlsKeys(key_dig, key_dig_len,
 8008416:	4620      	mov	r0, r4
                         ssl->arrays->masterSecret, SECRET_LEN,
 8008418:	68a7      	ldr	r7, [r4, #8]
        ret = _DeriveTlsKeys(key_dig, key_dig_len,
 800841a:	f7f8 faab 	bl	8000974 <IsAtLeastTLSv1_2>
    XMEMCPY(seed,           sr, RAN_LEN);
 800841e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
        ret = _DeriveTlsKeys(key_dig, key_dig_len,
 8008422:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008426:	9309      	str	r3, [sp, #36]	; 0x24
 8008428:	4680      	mov	r8, r0
    XMEMCPY(seed,           sr, RAN_LEN);
 800842a:	2220      	movs	r2, #32
 800842c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008430:	4648      	mov	r0, r9
        ret = _DeriveTlsKeys(key_dig, key_dig_len,
 8008432:	f894 a14a 	ldrb.w	sl, [r4, #330]	; 0x14a
 8008436:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
    XMEMCPY(seed,           sr, RAN_LEN);
 800843a:	f015 fab3 	bl	801d9a4 <memcpy>
    XMEMCPY(seed + RAN_LEN, cr, RAN_LEN);
 800843e:	2220      	movs	r2, #32
 8008440:	f107 0114 	add.w	r1, r7, #20
 8008444:	a812      	add	r0, sp, #72	; 0x48
 8008446:	f015 faad 	bl	801d9a4 <memcpy>
    ret = wc_PRF_TLS(key_dig, key_dig_len, ms, msLen, key_label, KEY_LABEL_SZ,
 800844a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844c:	e9cd b306 	strd	fp, r3, [sp, #24]
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8008456:	230d      	movs	r3, #13
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <DeriveTlsKeys+0xa4>)
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4629      	mov	r1, r5
 8008460:	e9cd 8a04 	strd	r8, sl, [sp, #16]
 8008464:	2330      	movs	r3, #48	; 0x30
 8008466:	f107 0275 	add.w	r2, r7, #117	; 0x75
 800846a:	4630      	mov	r0, r6
 800846c:	f006 fb0f 	bl	800ea8e <wc_PRF_TLS>
    if (ret == 0)
 8008470:	4605      	mov	r5, r0
 8008472:	b928      	cbnz	r0, 8008480 <DeriveTlsKeys+0x90>
        ret = StoreKeys(ssl, key_dig, PROVISION_CLIENT_SERVER);
 8008474:	2203      	movs	r2, #3
 8008476:	4631      	mov	r1, r6
 8008478:	4620      	mov	r0, r4
 800847a:	f7fe fe5b 	bl	8007134 <StoreKeys>
 800847e:	4605      	mov	r5, r0
    XFREE(key_dig, ssl->heap, DYNAMIC_TYPE_DIGEST);
 8008480:	4630      	mov	r0, r6
 8008482:	f015 fa77 	bl	801d974 <free>
}
 8008486:	4628      	mov	r0, r5
 8008488:	b01b      	add	sp, #108	; 0x6c
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return MEMORY_E;
 800848e:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8008492:	e7f8      	b.n	8008486 <DeriveTlsKeys+0x96>
 8008494:	0801fd93 	.word	0x0801fd93

08008498 <MakeTlsMasterSecret>:
{
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ret = _MakeTlsMasterSecret(ssl->arrays->masterSecret,
 800849c:	6885      	ldr	r5, [r0, #8]
{
 800849e:	b09b      	sub	sp, #108	; 0x6c
 80084a0:	4604      	mov	r4, r0
            ret = _MakeTlsMasterSecret(ssl->arrays->masterSecret,
 80084a2:	e9d5 8901 	ldrd	r8, r9, [r5, #4]
 80084a6:	f7f8 fa65 	bl	8000974 <IsAtLeastTLSv1_2>
    XMEMCPY(seed,           cr, RAN_LEN);
 80084aa:	af0a      	add	r7, sp, #40	; 0x28
            ret = _MakeTlsMasterSecret(ssl->arrays->masterSecret,
 80084ac:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80084b0:	9309      	str	r3, [sp, #36]	; 0x24
 80084b2:	4606      	mov	r6, r0
    XMEMCPY(seed,           cr, RAN_LEN);
 80084b4:	2220      	movs	r2, #32
 80084b6:	f105 0114 	add.w	r1, r5, #20
 80084ba:	4638      	mov	r0, r7
            ret = _MakeTlsMasterSecret(ssl->arrays->masterSecret,
 80084bc:	f894 a14a 	ldrb.w	sl, [r4, #330]	; 0x14a
 80084c0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
    XMEMCPY(seed,           cr, RAN_LEN);
 80084c4:	f015 fa6e 	bl	801d9a4 <memcpy>
    XMEMCPY(seed + RAN_LEN, sr, RAN_LEN);
 80084c8:	2220      	movs	r2, #32
 80084ca:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80084ce:	a812      	add	r0, sp, #72	; 0x48
 80084d0:	f015 fa68 	bl	801d9a4 <memcpy>
    ret = wc_PRF_TLS(ms, msLen, pms, pmsLen, master_label, MASTER_LABEL_SZ,
 80084d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d6:	e9cd b306 	strd	fp, r3, [sp, #24]
 80084da:	2340      	movs	r3, #64	; 0x40
 80084dc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80084e0:	230d      	movs	r3, #13
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <MakeTlsMasterSecret+0x78>)
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	e9cd 6a04 	strd	r6, sl, [sp, #16]
 80084ec:	464b      	mov	r3, r9
 80084ee:	4642      	mov	r2, r8
 80084f0:	2130      	movs	r1, #48	; 0x30
 80084f2:	f105 0075 	add.w	r0, r5, #117	; 0x75
 80084f6:	f006 faca 	bl	800ea8e <wc_PRF_TLS>
    if (ret == 0) {
 80084fa:	b928      	cbnz	r0, 8008508 <MakeTlsMasterSecret+0x70>
        ret = DeriveTlsKeys(ssl);
 80084fc:	4620      	mov	r0, r4
}
 80084fe:	b01b      	add	sp, #108	; 0x6c
 8008500:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = DeriveTlsKeys(ssl);
 8008504:	f7ff bf74 	b.w	80083f0 <DeriveTlsKeys>
}
 8008508:	b01b      	add	sp, #108	; 0x6c
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	bf00      	nop
 8008510:	0801fda1 	.word	0x0801fda1

08008514 <wolfSSL_GetHmacType_ex>:
    if (specs == NULL)
 8008514:	b140      	cbz	r0, 8008528 <wolfSSL_GetHmacType_ex+0x14>
    switch (specs->mac_algorithm) {
 8008516:	7a83      	ldrb	r3, [r0, #10]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d008      	beq.n	800852e <wolfSSL_GetHmacType_ex+0x1a>
            return WC_SHA256;
 800851c:	2b04      	cmp	r3, #4
 800851e:	bf14      	ite	ne
 8008520:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008524:	2006      	moveq	r0, #6
 8008526:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8008528:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800852c:	4770      	bx	lr
    switch (specs->mac_algorithm) {
 800852e:	2004      	movs	r0, #4
}
 8008530:	4770      	bx	lr

08008532 <wolfSSL_GetHmacType>:
    if (ssl == NULL)
 8008532:	b118      	cbz	r0, 800853c <wolfSSL_GetHmacType+0xa>
    return wolfSSL_GetHmacType_ex(&ssl->specs);
 8008534:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8008538:	f7ff bfec 	b.w	8008514 <wolfSSL_GetHmacType_ex>
}
 800853c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008540:	4770      	bx	lr

08008542 <wolfSSL_SetTlsHmacInner>:
{
 8008542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008544:	460c      	mov	r4, r1
 8008546:	4616      	mov	r6, r2
 8008548:	461f      	mov	r7, r3
    if (ssl == NULL || inner == NULL)
 800854a:	4605      	mov	r5, r0
 800854c:	b1b8      	cbz	r0, 800857e <wolfSSL_SetTlsHmacInner+0x3c>
 800854e:	b1b1      	cbz	r1, 800857e <wolfSSL_SetTlsHmacInner+0x3c>
    XMEMSET(inner, 0, WOLFSSL_TLS_HMAC_INNER_SZ);
 8008550:	220d      	movs	r2, #13
 8008552:	2100      	movs	r1, #0
 8008554:	4620      	mov	r0, r4
 8008556:	f015 fa4d 	bl	801d9f4 <memset>
    WriteSEQ(ssl, verify, inner);
 800855a:	4628      	mov	r0, r5
 800855c:	9906      	ldr	r1, [sp, #24]
 800855e:	4622      	mov	r2, r4
 8008560:	f7f9 f803 	bl	800156a <WriteSEQ>
    inner[SEQ_SZ] = (byte)content;
 8008564:	7227      	strb	r7, [r4, #8]
    inner[SEQ_SZ + ENUM_LEN]            = ssl->version.major;
 8008566:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
 800856a:	7263      	strb	r3, [r4, #9]
    inner[SEQ_SZ + ENUM_LEN + ENUM_LEN] = ssl->version.minor;
 800856c:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
 8008570:	72a3      	strb	r3, [r4, #10]
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8008572:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008576:	72e3      	strb	r3, [r4, #11]
    c[1] =  (byte)(wc_u16       & 0xff);
 8008578:	7326      	strb	r6, [r4, #12]
    return 0;
 800857a:	2000      	movs	r0, #0
}
 800857c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 800857e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008582:	e7fb      	b.n	800857c <wolfSSL_SetTlsHmacInner+0x3a>

08008584 <TLS_hmac>:
{
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 800858c:	461f      	mov	r7, r3
 800858e:	9de2      	ldr	r5, [sp, #904]	; 0x388
 8008590:	9103      	str	r1, [sp, #12]
 8008592:	e9dd 93e0 	ldrd	r9, r3, [sp, #896]	; 0x380
 8008596:	4690      	mov	r8, r2
    if (ssl == NULL)
 8008598:	4604      	mov	r4, r0
 800859a:	2800      	cmp	r0, #0
 800859c:	f000 8194 	beq.w	80088c8 <TLS_hmac+0x344>
    if (!ssl->options.dtls)
 80085a0:	f890 2272 	ldrb.w	r2, [r0, #626]	; 0x272
    hashSz = ssl->specs.hash_size;
 80085a4:	f890 a14d 	ldrb.w	sl, [r0, #333]	; 0x14d
    if (!ssl->options.dtls)
 80085a8:	0752      	lsls	r2, r2, #29
        wolfSSL_SetTlsHmacInner(ssl, myInner, sz, content, epochOrder);
 80085aa:	bf46      	itte	mi
 80085ac:	9ae3      	ldrmi	r2, [sp, #908]	; 0x38c
 80085ae:	9200      	strmi	r2, [sp, #0]
        wolfSSL_SetTlsHmacInner(ssl, myInner, sz, content, verify);
 80085b0:	9500      	strpl	r5, [sp, #0]
        wolfSSL_SetTlsHmacInner(ssl, myInner, sz, content, epochOrder);
 80085b2:	463a      	mov	r2, r7
 80085b4:	a910      	add	r1, sp, #64	; 0x40
 80085b6:	f7ff ffc4 	bl	8008542 <wolfSSL_SetTlsHmacInner>
    ret = wc_HmacInit(&hmac, ssl->heap, ssl->devId);
 80085ba:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 80085be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085c0:	a84c      	add	r0, sp, #304	; 0x130
 80085c2:	f006 f8e2 	bl	800e78a <wc_HmacInit>
    if (ret != 0)
 80085c6:	4602      	mov	r2, r0
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f040 8081 	bne.w	80086d0 <TLS_hmac+0x14c>
    macSecret = wolfSSL_GetMacSecret(ssl, verify);
 80085ce:	4629      	mov	r1, r5
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7fe ff22 	bl	800741a <wolfSSL_GetMacSecret>
 80085d6:	4602      	mov	r2, r0
    ret = wc_HmacSetKey(&hmac, wolfSSL_GetHmacType(ssl),
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff ffaa 	bl	8008532 <wolfSSL_GetHmacType>
 80085de:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
 80085e2:	4601      	mov	r1, r0
 80085e4:	a84c      	add	r0, sp, #304	; 0x130
 80085e6:	f006 f8fe 	bl	800e7e6 <wc_HmacSetKey>
    if (ret == 0) {
 80085ea:	4602      	mov	r2, r0
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d16a      	bne.n	80086c6 <TLS_hmac+0x142>
        if (verify && padSz >= 0) {
 80085f0:	2d00      	cmp	r5, #0
 80085f2:	f000 8151 	beq.w	8008898 <TLS_hmac+0x314>
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	f2c0 814d 	blt.w	8008898 <TLS_hmac+0x314>
    switch (hmac->macType) {
 80085fe:	f89d 6354 	ldrb.w	r6, [sp, #852]	; 0x354
 8008602:	2e06      	cmp	r6, #6
 8008604:	d069      	beq.n	80086da <TLS_hmac+0x156>
 8008606:	2e08      	cmp	r6, #8
 8008608:	d06a      	beq.n	80086e0 <TLS_hmac+0x15c>
 800860a:	2e04      	cmp	r6, #4
 800860c:	f040 813f 	bne.w	800888e <TLS_hmac+0x30a>
            padSz = WC_SHA_BLOCK_SIZE - WC_SHA_PAD_SIZE + 1;
 8008610:	2409      	movs	r4, #9
            blockSz = WC_SHA_BLOCK_SIZE;
 8008612:	2540      	movs	r5, #64	; 0x40
            blockBits = 6;
 8008614:	2606      	movs	r6, #6
 8008616:	444f      	add	r7, r9
    maxLen = WOLFSSL_TLS_HMAC_INNER_SZ + sz - 1 - macLen;
 8008618:	f107 030d 	add.w	r3, r7, #13
 800861c:	9306      	str	r3, [sp, #24]
    realLen = maxLen - in[sz - 1];
 800861e:	eb08 030a 	add.w	r3, r8, sl
    c[0] = (byte)((wc_u32 >> 24) & 0xff);
 8008622:	2200      	movs	r2, #0
 8008624:	f813 9007 	ldrb.w	r9, [r3, r7]
 8008628:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800862c:	f107 030d 	add.w	r3, r7, #13
 8008630:	eba3 0909 	sub.w	r9, r3, r9
    realLen += blockSz;
 8008634:	eb05 0309 	add.w	r3, r5, r9
 8008638:	f3c3 5147 	ubfx	r1, r3, #21, #8
    c[1] = (byte)((wc_u32 >> 16) & 0xff);
 800863c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    c[2] = (byte)((wc_u32 >>  8) & 0xff);
 8008640:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    c32toa(realLen >> ((sizeof(word32) * 8) - 3), lenBytes);
 8008644:	0f5a      	lsrs	r2, r3, #29
    c[3] =  (byte)(wc_u32        & 0xff);
 8008646:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    c[0] = (byte)((wc_u32 >> 24) & 0xff);
 800864a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
    c32toa(realLen << 3, lenBytes + sizeof(word32));
 800864e:	00da      	lsls	r2, r3, #3
    c[1] = (byte)((wc_u32 >> 16) & 0xff);
 8008650:	f3c3 314f 	ubfx	r1, r3, #13, #16
 8008654:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    c[2] = (byte)((wc_u32 >>  8) & 0xff);
 8008658:	f3c3 1357 	ubfx	r3, r3, #5, #24
    c[3] =  (byte)(wc_u32        & 0xff);
 800865c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    ret = Hmac_HashUpdate(hmac, (unsigned char*)hmac->ipad, blockSz);
 8008660:	a984      	add	r1, sp, #528	; 0x210
 8008662:	462a      	mov	r2, r5
 8008664:	a84c      	add	r0, sp, #304	; 0x130
    c[2] = (byte)((wc_u32 >>  8) & 0xff);
 8008666:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 800866a:	f7ff fe28 	bl	80082be <Hmac_HashUpdate>
    if (ret != 0)
 800866e:	4601      	mov	r1, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	f040 810f 	bne.w	8008894 <TLS_hmac+0x310>
    extraBlock = ctSetLTE((maxLen + padSz) & blockMask, padSz);
 8008676:	f107 030d 	add.w	r3, r7, #13
    blockMask = blockSz - 1;
 800867a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
    extraBlock = ctSetLTE((maxLen + padSz) & blockMask, padSz);
 800867e:	4423      	add	r3, r4
    blocks = ((maxLen + blockSz - 1) >> blockBits) + extraBlock;
 8008680:	370c      	adds	r7, #12
    return (byte)(((word32)a - (word32)b - 1) >> 31);
 8008682:	43e2      	mvns	r2, r4
    extraBlock = ctSetLTE((maxLen + padSz) & blockMask, padSz);
 8008684:	ea03 030b 	and.w	r3, r3, fp
    blocks = ((maxLen + blockSz - 1) >> blockBits) + extraBlock;
 8008688:	442f      	add	r7, r5
 800868a:	4413      	add	r3, r2
 800868c:	40f7      	lsrs	r7, r6
 800868e:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
    safeBlocks = blocks - 6;
 8008692:	1f9f      	subs	r7, r3, #6
    XMEMSET(hmac->innerHash, 0, macLen);
 8008694:	9005      	str	r0, [sp, #20]
 8008696:	4652      	mov	r2, sl
 8008698:	a8c4      	add	r0, sp, #784	; 0x310
    blocks = ((maxLen + blockSz - 1) >> blockBits) + extraBlock;
 800869a:	9304      	str	r3, [sp, #16]
    XMEMSET(hmac->innerHash, 0, macLen);
 800869c:	f015 f9aa 	bl	801d9f4 <memset>
    if (safeBlocks > 0) {
 80086a0:	2f00      	cmp	r7, #0
 80086a2:	9905      	ldr	r1, [sp, #20]
 80086a4:	dd20      	ble.n	80086e8 <TLS_hmac+0x164>
        ret = Hmac_HashUpdate(hmac, header, WOLFSSL_TLS_HMAC_INNER_SZ);
 80086a6:	220d      	movs	r2, #13
 80086a8:	a910      	add	r1, sp, #64	; 0x40
 80086aa:	a84c      	add	r0, sp, #304	; 0x130
 80086ac:	f7ff fe07 	bl	80082be <Hmac_HashUpdate>
        if (ret != 0)
 80086b0:	4602      	mov	r2, r0
 80086b2:	b940      	cbnz	r0, 80086c6 <TLS_hmac+0x142>
        ret = Hmac_HashUpdate(hmac, in, safeBlocks * blockSz -
 80086b4:	fb07 f205 	mul.w	r2, r7, r5
 80086b8:	3a0d      	subs	r2, #13
 80086ba:	4641      	mov	r1, r8
 80086bc:	a84c      	add	r0, sp, #304	; 0x130
 80086be:	f7ff fdfe 	bl	80082be <Hmac_HashUpdate>
        if (ret != 0)
 80086c2:	4602      	mov	r2, r0
 80086c4:	b188      	cbz	r0, 80086ea <TLS_hmac+0x166>
    wc_HmacFree(&hmac);
 80086c6:	a84c      	add	r0, sp, #304	; 0x130
 80086c8:	9203      	str	r2, [sp, #12]
 80086ca:	f006 f870 	bl	800e7ae <wc_HmacFree>
    return ret;
 80086ce:	9a03      	ldr	r2, [sp, #12]
}
 80086d0:	4610      	mov	r0, r2
 80086d2:	f50d 7d57 	add.w	sp, sp, #860	; 0x35c
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            padSz = WC_SHA_BLOCK_SIZE - WC_SHA_PAD_SIZE + 1;
 80086da:	2409      	movs	r4, #9
            blockSz = WC_SHA_BLOCK_SIZE;
 80086dc:	2540      	movs	r5, #64	; 0x40
 80086de:	e79a      	b.n	8008616 <TLS_hmac+0x92>
    switch (hmac->macType) {
 80086e0:	2411      	movs	r4, #17
 80086e2:	2580      	movs	r5, #128	; 0x80
 80086e4:	2607      	movs	r6, #7
 80086e6:	e796      	b.n	8008616 <TLS_hmac+0x92>
        safeBlocks = 0;
 80086e8:	460f      	mov	r7, r1
    lastBlockLen = realLen & blockMask;
 80086ea:	ea0b 0309 	and.w	r3, fp, r9
    extraLen = ((blockSz * 2 - padSz - lastBlockLen) & blockMask) + 1;
 80086ee:	ebc4 0445 	rsb	r4, r4, r5, lsl #1
 80086f2:	1ae4      	subs	r4, r4, r3
 80086f4:	ea04 0b0b 	and.w	fp, r4, fp
 80086f8:	f10b 0b01 	add.w	fp, fp, #1
    lenBlock = (realLen + extraLen) >> blockBits;
 80086fc:	44cb      	add	fp, r9
    lastBlockLen = realLen & blockMask;
 80086fe:	9305      	str	r3, [sp, #20]
    lenBlock = (realLen + extraLen) >> blockBits;
 8008700:	fa2b f306 	lsr.w	r3, fp, r6
 8008704:	9307      	str	r3, [sp, #28]
    XMEMSET(digest, 0, macLen);
 8008706:	9803      	ldr	r0, [sp, #12]
    eocBlock = realLen >> blockBits;
 8008708:	fa29 f306 	lsr.w	r3, r9, r6
    XMEMSET(digest, 0, macLen);
 800870c:	4652      	mov	r2, sl
 800870e:	2100      	movs	r1, #0
    eocBlock = realLen >> blockBits;
 8008710:	9308      	str	r3, [sp, #32]
    XMEMSET(digest, 0, macLen);
 8008712:	f015 f96f 	bl	801d9f4 <memset>
                b = ctMaskSel(isOutBlock, lenBytes[j - (blockSz - 8)], b);
 8008716:	abd6      	add	r3, sp, #856	; 0x358
 8008718:	1b5b      	subs	r3, r3, r5
 800871a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
    k = safeBlocks * blockSz;
 800871e:	fb07 fb05 	mul.w	fp, r7, r5
                b = ctMaskSel(isOutBlock, lenBytes[j - (blockSz - 8)], b);
 8008722:	930c      	str	r3, [sp, #48]	; 0x30
    for (i = safeBlocks; i < blocks; i++) {
 8008724:	9b04      	ldr	r3, [sp, #16]
 8008726:	42bb      	cmp	r3, r7
 8008728:	dc33      	bgt.n	8008792 <TLS_hmac+0x20e>
    enum wc_HashType hashType = (enum wc_HashType)hmac->macType;
 800872a:	f89d 4354 	ldrb.w	r4, [sp, #852]	; 0x354
    int digestSz = wc_HashGetDigestSize(hashType);
 800872e:	4620      	mov	r0, r4
 8008730:	f012 f89e 	bl	801a870 <wc_HashGetDigestSize>
 8008734:	4605      	mov	r5, r0
    int blockSz = wc_HashGetBlockSize(hashType);
 8008736:	4620      	mov	r0, r4
 8008738:	f012 f8a6 	bl	801a888 <wc_HashGetBlockSize>
    if ((digestSz >= 0) && (blockSz >= 0)) {
 800873c:	2d00      	cmp	r5, #0
    int blockSz = wc_HashGetBlockSize(hashType);
 800873e:	4606      	mov	r6, r0
    if ((digestSz >= 0) && (blockSz >= 0)) {
 8008740:	f2c0 80a5 	blt.w	800888e <TLS_hmac+0x30a>
 8008744:	2800      	cmp	r0, #0
 8008746:	f2c0 80a2 	blt.w	800888e <TLS_hmac+0x30a>
        ret = wc_HashInit(&hash, hashType);
 800874a:	4621      	mov	r1, r4
 800874c:	a814      	add	r0, sp, #80	; 0x50
 800874e:	f012 f8cf 	bl	801a8f0 <wc_HashInit>
    if (ret == 0) {
 8008752:	4602      	mov	r2, r0
 8008754:	2800      	cmp	r0, #0
 8008756:	d1b6      	bne.n	80086c6 <TLS_hmac+0x142>
        ret = wc_HashUpdate(&hash, hashType, (byte*)hmac->opad,
 8008758:	aaa4      	add	r2, sp, #656	; 0x290
 800875a:	4633      	mov	r3, r6
 800875c:	4621      	mov	r1, r4
 800875e:	a814      	add	r0, sp, #80	; 0x50
 8008760:	f012 f8cb 	bl	801a8fa <wc_HashUpdate>
        if (ret == 0)
 8008764:	4602      	mov	r2, r0
 8008766:	b968      	cbnz	r0, 8008784 <TLS_hmac+0x200>
            ret = wc_HashUpdate(&hash, hashType, (byte*)hmac->innerHash,
 8008768:	aac4      	add	r2, sp, #784	; 0x310
 800876a:	462b      	mov	r3, r5
 800876c:	4621      	mov	r1, r4
 800876e:	a814      	add	r0, sp, #80	; 0x50
 8008770:	f012 f8c3 	bl	801a8fa <wc_HashUpdate>
        if (ret == 0)
 8008774:	4602      	mov	r2, r0
 8008776:	b928      	cbnz	r0, 8008784 <TLS_hmac+0x200>
            ret = wc_HashFinal(&hash, hashType, mac);
 8008778:	9a03      	ldr	r2, [sp, #12]
 800877a:	4621      	mov	r1, r4
 800877c:	a814      	add	r0, sp, #80	; 0x50
 800877e:	f012 f8e6 	bl	801a94e <wc_HashFinal>
 8008782:	4602      	mov	r2, r0
        wc_HashFree(&hash, hashType);
 8008784:	4621      	mov	r1, r4
 8008786:	a814      	add	r0, sp, #80	; 0x50
 8008788:	9203      	str	r2, [sp, #12]
 800878a:	f012 f901 	bl	801a990 <wc_HashFree>
 800878e:	9a03      	ldr	r2, [sp, #12]
 8008790:	e799      	b.n	80086c6 <TLS_hmac+0x142>
        unsigned char isEocBlock = ctMaskEq(i, eocBlock);
 8008792:	9908      	ldr	r1, [sp, #32]
 8008794:	4638      	mov	r0, r7
 8008796:	f7ff fc48 	bl	800802a <ctMaskEq>
        unsigned char isOutBlock = ctMaskEq(i, lenBlock);
 800879a:	9907      	ldr	r1, [sp, #28]
        unsigned char isEocBlock = ctMaskEq(i, eocBlock);
 800879c:	4681      	mov	r9, r0
        unsigned char isOutBlock = ctMaskEq(i, lenBlock);
 800879e:	4638      	mov	r0, r7
 80087a0:	f7ff fc43 	bl	800802a <ctMaskEq>
    return (byte)((((word32)a - (word32)b - 1) >> 31) - 1);
 80087a4:	9b05      	ldr	r3, [sp, #20]
 80087a6:	43db      	mvns	r3, r3
 80087a8:	9309      	str	r3, [sp, #36]	; 0x24
                b = in[k - WOLFSSL_TLS_HMAC_INNER_SZ];
 80087aa:	f1a8 030d 	sub.w	r3, r8, #13
 80087ae:	930b      	str	r3, [sp, #44]	; 0x2c
            b &= ((unsigned char)~(word32)isOutBlock) | isEocBlock;
 80087b0:	ea69 0300 	orn	r3, r9, r0
 80087b4:	930a      	str	r3, [sp, #40]	; 0x28
        unsigned char isOutBlock = ctMaskEq(i, lenBlock);
 80087b6:	4604      	mov	r4, r0
 80087b8:	465e      	mov	r6, fp
        for (j = 0; j < blockSz; j++) {
 80087ba:	2200      	movs	r2, #0
            if (j >= blockSz - 8) {
 80087bc:	f1a5 0308 	sub.w	r3, r5, #8
            unsigned char atEoc = ctMaskEq(j, eocIndex) & isEocBlock;
 80087c0:	9905      	ldr	r1, [sp, #20]
 80087c2:	930d      	str	r3, [sp, #52]	; 0x34
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7ff fc30 	bl	800802a <ctMaskEq>
 80087ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087cc:	1899      	adds	r1, r3, r2
 80087ce:	0fc9      	lsrs	r1, r1, #31
 80087d0:	3901      	subs	r1, #1
 80087d2:	ea09 0c00 	and.w	ip, r9, r0
            unsigned char pastEoc = ctMaskGT(j, eocIndex) & isEocBlock;
 80087d6:	ea09 0101 	and.w	r1, r9, r1
            if (k < WOLFSSL_TLS_HMAC_INNER_SZ)
 80087da:	2e0c      	cmp	r6, #12
 80087dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            unsigned char atEoc = ctMaskEq(j, eocIndex) & isEocBlock;
 80087de:	fa5f fc8c 	uxtb.w	ip, ip
            unsigned char pastEoc = ctMaskGT(j, eocIndex) & isEocBlock;
 80087e2:	b2c8      	uxtb	r0, r1
            if (k < WOLFSSL_TLS_HMAC_INNER_SZ)
 80087e4:	d83a      	bhi.n	800885c <TLS_hmac+0x2d8>
                b = header[k];
 80087e6:	a910      	add	r1, sp, #64	; 0x40
                b = in[k - WOLFSSL_TLS_HMAC_INNER_SZ];
 80087e8:	f811 e006 	ldrb.w	lr, [r1, r6]
    return (byte)((b & ((byte)~(word32)m)) | (a & m));
 80087ec:	f08e 0180 	eor.w	r1, lr, #128	; 0x80
 80087f0:	ea0c 0c01 	and.w	ip, ip, r1
            b &= ((unsigned char)~(word32)isOutBlock) | isEocBlock;
 80087f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087f6:	ea8e 0e0c 	eor.w	lr, lr, ip
 80087fa:	ea21 0000 	bic.w	r0, r1, r0
            if (j >= blockSz - 8) {
 80087fe:	4293      	cmp	r3, r2
            k++;
 8008800:	f106 0601 	add.w	r6, r6, #1
            b &= ((unsigned char)~(word32)isOutBlock) | isEocBlock;
 8008804:	ea0e 0000 	and.w	r0, lr, r0
            if (j >= blockSz - 8) {
 8008808:	dc04      	bgt.n	8008814 <TLS_hmac+0x290>
 800880a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800880c:	5c89      	ldrb	r1, [r1, r2]
 800880e:	4041      	eors	r1, r0
 8008810:	4021      	ands	r1, r4
 8008812:	4048      	eors	r0, r1
            hashBlock[j] = b;
 8008814:	a914      	add	r1, sp, #80	; 0x50
 8008816:	5488      	strb	r0, [r1, r2]
        for (j = 0; j < blockSz; j++) {
 8008818:	3201      	adds	r2, #1
 800881a:	4295      	cmp	r5, r2
 800881c:	d1d0      	bne.n	80087c0 <TLS_hmac+0x23c>
        ret = Hmac_HashUpdate(hmac, hashBlock, blockSz);
 800881e:	462a      	mov	r2, r5
 8008820:	a84c      	add	r0, sp, #304	; 0x130
 8008822:	f7ff fd4c 	bl	80082be <Hmac_HashUpdate>
            k++;
 8008826:	44ab      	add	fp, r5
        if (ret != 0)
 8008828:	4602      	mov	r2, r0
 800882a:	2800      	cmp	r0, #0
 800882c:	f47f af4b 	bne.w	80086c6 <TLS_hmac+0x142>
    switch (hmac->macType) {
 8008830:	f89d 3354 	ldrb.w	r3, [sp, #852]	; 0x354
 8008834:	2b06      	cmp	r3, #6
 8008836:	a914      	add	r1, sp, #80	; 0x50
 8008838:	d018      	beq.n	800886c <TLS_hmac+0x2e8>
 800883a:	2b08      	cmp	r3, #8
 800883c:	d01a      	beq.n	8008874 <TLS_hmac+0x2f0>
 800883e:	2b04      	cmp	r3, #4
 8008840:	d125      	bne.n	800888e <TLS_hmac+0x30a>
            ret = wc_ShaFinalRaw(&hmac->hash.sha, hash);
 8008842:	a84c      	add	r0, sp, #304	; 0x130
 8008844:	f007 f912 	bl	800fa6c <wc_ShaFinalRaw>
            ret = wc_Sha512FinalRaw(&hmac->hash.sha512, hash);
 8008848:	4602      	mov	r2, r0
        if (ret != 0)
 800884a:	2800      	cmp	r0, #0
 800884c:	f47f af3b 	bne.w	80086c6 <TLS_hmac+0x142>
 8008850:	abc4      	add	r3, sp, #784	; 0x310
 8008852:	ae14      	add	r6, sp, #80	; 0x50
        for (j = 0; j < macLen; j++)
 8008854:	4592      	cmp	sl, r2
 8008856:	dc11      	bgt.n	800887c <TLS_hmac+0x2f8>
    for (i = safeBlocks; i < blocks; i++) {
 8008858:	3701      	adds	r7, #1
 800885a:	e763      	b.n	8008724 <TLS_hmac+0x1a0>
            else if (k < maxLen)
 800885c:	9906      	ldr	r1, [sp, #24]
 800885e:	42b1      	cmp	r1, r6
 8008860:	d901      	bls.n	8008866 <TLS_hmac+0x2e2>
                b = in[k - WOLFSSL_TLS_HMAC_INNER_SZ];
 8008862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008864:	e7c0      	b.n	80087e8 <TLS_hmac+0x264>
            unsigned char b = 0;
 8008866:	f04f 0e00 	mov.w	lr, #0
 800886a:	e7bf      	b.n	80087ec <TLS_hmac+0x268>
            ret = wc_Sha256FinalRaw(&hmac->hash.sha256, hash);
 800886c:	a84c      	add	r0, sp, #304	; 0x130
 800886e:	f007 fbf2 	bl	8010056 <wc_Sha256FinalRaw>
 8008872:	e7e9      	b.n	8008848 <TLS_hmac+0x2c4>
            ret = wc_Sha512FinalRaw(&hmac->hash.sha512, hash);
 8008874:	a84c      	add	r0, sp, #304	; 0x130
 8008876:	f009 fefb 	bl	8012670 <wc_Sha512FinalRaw>
 800887a:	e7e5      	b.n	8008848 <TLS_hmac+0x2c4>
            ((unsigned char*)hmac->innerHash)[j] |= hashBlock[j] & isOutBlock;
 800887c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8008880:	7819      	ldrb	r1, [r3, #0]
 8008882:	4020      	ands	r0, r4
 8008884:	4301      	orrs	r1, r0
 8008886:	f803 1b01 	strb.w	r1, [r3], #1
        for (j = 0; j < macLen; j++)
 800888a:	3201      	adds	r2, #1
 800888c:	e7e2      	b.n	8008854 <TLS_hmac+0x2d0>
    switch (hmac->macType) {
 800888e:	f06f 02ac 	mvn.w	r2, #172	; 0xac
 8008892:	e718      	b.n	80086c6 <TLS_hmac+0x142>
 8008894:	4602      	mov	r2, r0
                ret = Hmac_UpdateFinal_CT(&hmac, digest, in,
 8008896:	e716      	b.n	80086c6 <TLS_hmac+0x142>
            ret = wc_HmacUpdate(&hmac, myInner, sizeof(myInner));
 8008898:	220d      	movs	r2, #13
 800889a:	a910      	add	r1, sp, #64	; 0x40
 800889c:	a84c      	add	r0, sp, #304	; 0x130
 800889e:	f005 fed2 	bl	800e646 <wc_HmacUpdate>
            if (ret == 0)
 80088a2:	4602      	mov	r2, r0
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f47f af0e 	bne.w	80086c6 <TLS_hmac+0x142>
                ret = wc_HmacUpdate(&hmac, in, sz);                /* content */
 80088aa:	463a      	mov	r2, r7
 80088ac:	4641      	mov	r1, r8
 80088ae:	a84c      	add	r0, sp, #304	; 0x130
 80088b0:	f005 fec9 	bl	800e646 <wc_HmacUpdate>
            if (ret == 0)
 80088b4:	4602      	mov	r2, r0
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f47f af05 	bne.w	80086c6 <TLS_hmac+0x142>
                ret = wc_HmacFinal(&hmac, digest);
 80088bc:	9903      	ldr	r1, [sp, #12]
 80088be:	a84c      	add	r0, sp, #304	; 0x130
 80088c0:	f005 fef3 	bl	800e6aa <wc_HmacFinal>
 80088c4:	4602      	mov	r2, r0
 80088c6:	e6fe      	b.n	80086c6 <TLS_hmac+0x142>
        return BAD_FUNC_ARG;
 80088c8:	f06f 02ac 	mvn.w	r2, #172	; 0xac
 80088cc:	e700      	b.n	80086d0 <TLS_hmac+0x14c>

080088ce <TLSX_SignatureAlgorithms_New>:
{
 80088ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sa = (SignatureAlgorithms*)XMALLOC(sizeof(*sa) + hashSigAlgoSz, heap,
 80088d0:	f101 0708 	add.w	r7, r1, #8
{
 80088d4:	4606      	mov	r6, r0
    sa = (SignatureAlgorithms*)XMALLOC(sizeof(*sa) + hashSigAlgoSz, heap,
 80088d6:	4638      	mov	r0, r7
{
 80088d8:	460d      	mov	r5, r1
    sa = (SignatureAlgorithms*)XMALLOC(sizeof(*sa) + hashSigAlgoSz, heap,
 80088da:	f015 f843 	bl	801d964 <malloc>
    if (sa != NULL) {
 80088de:	4604      	mov	r4, r0
 80088e0:	b128      	cbz	r0, 80088ee <TLSX_SignatureAlgorithms_New+0x20>
        XMEMSET(sa, 0, sizeof(*sa) + hashSigAlgoSz);
 80088e2:	463a      	mov	r2, r7
 80088e4:	2100      	movs	r1, #0
 80088e6:	f015 f885 	bl	801d9f4 <memset>
        sa->ssl = ssl;
 80088ea:	6026      	str	r6, [r4, #0]
        sa->hashSigAlgoSz = hashSigAlgoSz;
 80088ec:	80a5      	strh	r5, [r4, #4]
}
 80088ee:	4620      	mov	r0, r4
 80088f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088f2 <TLSX_SignatureAlgorithms_FreeAll>:
    XFREE(sa, heap, DYNAMIC_TYPE_TLSX);
 80088f2:	b108      	cbz	r0, 80088f8 <TLSX_SignatureAlgorithms_FreeAll+0x6>
 80088f4:	f015 b83e 	b.w	801d974 <free>
}
 80088f8:	4770      	bx	lr

080088fa <TLSX_Find>:
    while (extension && extension->type != type)
 80088fa:	b110      	cbz	r0, 8008902 <TLSX_Find+0x8>
 80088fc:	8803      	ldrh	r3, [r0, #0]
 80088fe:	428b      	cmp	r3, r1
 8008900:	d100      	bne.n	8008904 <TLSX_Find+0xa>
}
 8008902:	4770      	bx	lr
        extension = extension->next;
 8008904:	6900      	ldr	r0, [r0, #16]
 8008906:	e7f8      	b.n	80088fa <TLSX_Find>

08008908 <TLSX_SetResponse>:
{
 8008908:	b508      	push	{r3, lr}
    TLSX *extension = TLSX_Find(ssl->extensions, type);
 800890a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800890e:	f7ff fff4 	bl	80088fa <TLSX_Find>
    if (extension)
 8008912:	b108      	cbz	r0, 8008918 <TLSX_SetResponse+0x10>
        extension->resp = 1;
 8008914:	2301      	movs	r3, #1
 8008916:	7303      	strb	r3, [r0, #12]
}
 8008918:	bd08      	pop	{r3, pc}

0800891a <TLSX_ValidateSupportedCurves>:
                                 word32* ecdhCurveOID) {
 800891a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (first == CHACHA_BYTE) {
 800891e:	29cc      	cmp	r1, #204	; 0xcc
                                 word32* ecdhCurveOID) {
 8008920:	b085      	sub	sp, #20
 8008922:	4606      	mov	r6, r0
 8008924:	4688      	mov	r8, r1
 8008926:	461d      	mov	r5, r3
    if (first == CHACHA_BYTE) {
 8008928:	d109      	bne.n	800893e <TLSX_ValidateSupportedCurves+0x24>
        switch (second) {
 800892a:	2aab      	cmp	r2, #171	; 0xab
 800892c:	d805      	bhi.n	800893a <TLSX_ValidateSupportedCurves+0x20>
 800892e:	2aa9      	cmp	r2, #169	; 0xa9
 8008930:	d801      	bhi.n	8008936 <TLSX_ValidateSupportedCurves+0x1c>
 8008932:	2a15      	cmp	r2, #21
 8008934:	d107      	bne.n	8008946 <TLSX_ValidateSupportedCurves+0x2c>
        return 1; /* no suite restriction */
 8008936:	2001      	movs	r0, #1
 8008938:	e041      	b.n	80089be <TLSX_ValidateSupportedCurves+0xa4>
        switch (second) {
 800893a:	2aad      	cmp	r2, #173	; 0xad
 800893c:	e7fa      	b.n	8008934 <TLSX_ValidateSupportedCurves+0x1a>
    if (first == ECC_BYTE || first == ECDHE_PSK_BYTE || first == CHACHA_BYTE)
 800893e:	f001 03ef 	and.w	r3, r1, #239	; 0xef
 8008942:	2bc0      	cmp	r3, #192	; 0xc0
 8008944:	d1f7      	bne.n	8008936 <TLSX_ValidateSupportedCurves+0x1c>
        extension = TLSX_Find(ssl->extensions, TLSX_SUPPORTED_GROUPS);
 8008946:	f8d6 02c0 	ldr.w	r0, [r6, #704]	; 0x2c0
 800894a:	210a      	movs	r1, #10
 800894c:	f7ff ffd5 	bl	80088fa <TLSX_Find>
    if (!extension)
 8008950:	2800      	cmp	r0, #0
 8008952:	d0f0      	beq.n	8008936 <TLSX_ValidateSupportedCurves+0x1c>
            switch (second) {
 8008954:	f102 0452 	add.w	r4, r2, #82	; 0x52
 8008958:	b2e4      	uxtb	r4, r4
    word32          currOid   = ssl->ecdhCurveOID;
 800895a:	f8d6 e290 	ldr.w	lr, [r6, #656]	; 0x290
            switch (second) {
 800895e:	9402      	str	r4, [sp, #8]
 8008960:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
    for (curve = (SupportedCurve*)extension->data;
 8008964:	f8d0 a004 	ldr.w	sl, [r0, #4]
    word32          nextSz    = 80; /* Maximum known curve size is 66. */
 8008968:	2150      	movs	r1, #80	; 0x50
    int             key       = 0; /* validate key       */
 800896a:	2000      	movs	r0, #0
            switch (second) {
 800896c:	b2e4      	uxtb	r4, r4
    word32          currOid   = ssl->ecdhCurveOID;
 800896e:	46f1      	mov	r9, lr
    int             ephmSuite = 0;
 8008970:	9001      	str	r0, [sp, #4]
    word32          nextOid   = 0;
 8008972:	4607      	mov	r7, r0
    word32          defSz     = 80; /* Maximum known curve size is 66. */
 8008974:	468c      	mov	ip, r1
    word32          defOid    = 0;
 8008976:	4603      	mov	r3, r0
            switch (second) {
 8008978:	9403      	str	r4, [sp, #12]
    for (curve = (SupportedCurve*)extension->data;
 800897a:	f1ba 0f00 	cmp.w	sl, #0
 800897e:	d000      	beq.n	8008982 <TLSX_ValidateSupportedCurves+0x68>
         curve && !key;
 8008980:	b300      	cbz	r0, 80089c4 <TLSX_ValidateSupportedCurves+0xaa>
    *ecdhCurveOID = ssl->ecdhCurveOID;
 8008982:	f8c5 e000 	str.w	lr, [r5]
    if (*ecdhCurveOID == 0 && defSz == ssl->eccTempKeySz)
 8008986:	f1be 0f00 	cmp.w	lr, #0
 800898a:	d105      	bne.n	8008998 <TLSX_ValidateSupportedCurves+0x7e>
 800898c:	f8b6 22a4 	ldrh.w	r2, [r6, #676]	; 0x2a4
 8008990:	4562      	cmp	r2, ip
        *ecdhCurveOID = defOid;
 8008992:	bf04      	itt	eq
 8008994:	602b      	streq	r3, [r5, #0]
        key = 1;
 8008996:	2001      	moveq	r0, #1
    if (*ecdhCurveOID == 0) {
 8008998:	682a      	ldr	r2, [r5, #0]
 800899a:	b90a      	cbnz	r2, 80089a0 <TLSX_ValidateSupportedCurves+0x86>
 800899c:	464a      	mov	r2, r9
        key = 1;
 800899e:	2001      	movs	r0, #1
 80089a0:	602a      	str	r2, [r5, #0]
    if (*ecdhCurveOID == 0 && defSz == nextSz)
 80089a2:	b912      	cbnz	r2, 80089aa <TLSX_ValidateSupportedCurves+0x90>
 80089a4:	458c      	cmp	ip, r1
        *ecdhCurveOID = defOid;
 80089a6:	bf08      	it	eq
 80089a8:	602b      	streq	r3, [r5, #0]
    if (*ecdhCurveOID == 0)
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bf08      	it	eq
 80089b0:	463b      	moveq	r3, r7
 80089b2:	602b      	str	r3, [r5, #0]
    if (*ecdhCurveOID == 0 && ephmSuite)
 80089b4:	b91b      	cbnz	r3, 80089be <TLSX_ValidateSupportedCurves+0xa4>
        key = 0;
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bf18      	it	ne
 80089bc:	2000      	movne	r0, #0
}
 80089be:	b005      	add	sp, #20
 80089c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (curve->name) {
 80089c4:	f8ba 4000 	ldrh.w	r4, [sl]
 80089c8:	2c17      	cmp	r4, #23
 80089ca:	d033      	beq.n	8008a34 <TLSX_ValidateSupportedCurves+0x11a>
 80089cc:	2c1d      	cmp	r4, #29
 80089ce:	d142      	bne.n	8008a56 <TLSX_ValidateSupportedCurves+0x13c>
 80089d0:	f240 146d 	movw	r4, #365	; 0x16d
        if (defOid == 0 && ssl->eccTempKeySz <= octets && defSz > octets) {
 80089d4:	b953      	cbnz	r3, 80089ec <TLSX_ValidateSupportedCurves+0xd2>
 80089d6:	f8b6 b2a4 	ldrh.w	fp, [r6, #676]	; 0x2a4
 80089da:	f1bb 0f20 	cmp.w	fp, #32
 80089de:	d805      	bhi.n	80089ec <TLSX_ValidateSupportedCurves+0xd2>
 80089e0:	f1bc 0f20 	cmp.w	ip, #32
 80089e4:	bf1c      	itt	ne
 80089e6:	4623      	movne	r3, r4
            defSz = octets;
 80089e8:	f04f 0c20 	movne.w	ip, #32
        if (currOid == 0 && ssl->eccTempKeySz == octets)
 80089ec:	f1b9 0f00 	cmp.w	r9, #0
 80089f0:	d104      	bne.n	80089fc <TLSX_ValidateSupportedCurves+0xe2>
 80089f2:	f8b6 b2a4 	ldrh.w	fp, [r6, #676]	; 0x2a4
 80089f6:	f1bb 0f20 	cmp.w	fp, #32
 80089fa:	d03a      	beq.n	8008a72 <TLSX_ValidateSupportedCurves+0x158>
        if ((nextOid == 0 || nextSz > octets) && ssl->eccTempKeySz <= octets) {
 80089fc:	b10f      	cbz	r7, 8008a02 <TLSX_ValidateSupportedCurves+0xe8>
 80089fe:	2920      	cmp	r1, #32
 8008a00:	d006      	beq.n	8008a10 <TLSX_ValidateSupportedCurves+0xf6>
 8008a02:	f8b6 b2a4 	ldrh.w	fp, [r6, #676]	; 0x2a4
 8008a06:	f1bb 0f20 	cmp.w	fp, #32
 8008a0a:	bf9c      	itt	ls
 8008a0c:	4627      	movls	r7, r4
 8008a0e:	2120      	movls	r1, #32
        if (first == ECC_BYTE) {
 8008a10:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 8008a14:	d124      	bne.n	8008a60 <TLSX_ValidateSupportedCurves+0x146>
            switch (second) {
 8008a16:	2a2c      	cmp	r2, #44	; 0x2c
 8008a18:	d820      	bhi.n	8008a5c <TLSX_ValidateSupportedCurves+0x142>
 8008a1a:	2a2a      	cmp	r2, #42	; 0x2a
 8008a1c:	d803      	bhi.n	8008a26 <TLSX_ValidateSupportedCurves+0x10c>
 8008a1e:	2a0a      	cmp	r2, #10
 8008a20:	d80b      	bhi.n	8008a3a <TLSX_ValidateSupportedCurves+0x120>
 8008a22:	2a06      	cmp	r2, #6
 8008a24:	d90c      	bls.n	8008a40 <TLSX_ValidateSupportedCurves+0x126>
                    key |= ssl->ecdhCurveOID == oid;
 8008a26:	eba4 040e 	sub.w	r4, r4, lr
 8008a2a:	4260      	negs	r0, r4
 8008a2c:	4160      	adcs	r0, r4
                    ephmSuite = 1;
 8008a2e:	2401      	movs	r4, #1
 8008a30:	9401      	str	r4, [sp, #4]
                break;
 8008a32:	e010      	b.n	8008a56 <TLSX_ValidateSupportedCurves+0x13c>
                oid = ECC_SECP256R1_OID;
 8008a34:	f240 240e 	movw	r4, #526	; 0x20e
 8008a38:	e7cc      	b.n	80089d4 <TLSX_ValidateSupportedCurves+0xba>
            switch (second) {
 8008a3a:	9803      	ldr	r0, [sp, #12]
 8008a3c:	2801      	cmp	r0, #1
 8008a3e:	d9f2      	bls.n	8008a26 <TLSX_ValidateSupportedCurves+0x10c>
                    if (oid == ECC_X25519_OID && defOid == oid) {
 8008a40:	f240 106d 	movw	r0, #365	; 0x16d
 8008a44:	4284      	cmp	r4, r0
 8008a46:	d112      	bne.n	8008a6e <TLSX_ValidateSupportedCurves+0x154>
 8008a48:	4283      	cmp	r3, r0
                    key = 1;
 8008a4a:	f04f 0001 	mov.w	r0, #1
                    if (oid == ECC_X25519_OID && defOid == oid) {
 8008a4e:	d102      	bne.n	8008a56 <TLSX_ValidateSupportedCurves+0x13c>
                        defSz = 80;
 8008a50:	f04f 0c50 	mov.w	ip, #80	; 0x50
                        defOid = 0;
 8008a54:	2300      	movs	r3, #0
         curve = curve->next) {
 8008a56:	f8da a004 	ldr.w	sl, [sl, #4]
 8008a5a:	e78e      	b.n	800897a <TLSX_ValidateSupportedCurves+0x60>
            switch (second) {
 8008a5c:	9802      	ldr	r0, [sp, #8]
 8008a5e:	e7ed      	b.n	8008a3c <TLSX_ValidateSupportedCurves+0x122>
        if (first == CHACHA_BYTE) {
 8008a60:	f1b8 0fcc 	cmp.w	r8, #204	; 0xcc
 8008a64:	d1f7      	bne.n	8008a56 <TLSX_ValidateSupportedCurves+0x13c>
            switch (second) {
 8008a66:	2a14      	cmp	r2, #20
 8008a68:	d0dd      	beq.n	8008a26 <TLSX_ValidateSupportedCurves+0x10c>
 8008a6a:	2aa9      	cmp	r2, #169	; 0xa9
 8008a6c:	d0db      	beq.n	8008a26 <TLSX_ValidateSupportedCurves+0x10c>
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e7f1      	b.n	8008a56 <TLSX_ValidateSupportedCurves+0x13c>
        if ((nextOid == 0 || nextSz > octets) && ssl->eccTempKeySz <= octets) {
 8008a72:	46a1      	mov	r9, r4
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	d1c2      	bne.n	80089fe <TLSX_ValidateSupportedCurves+0xe4>
 8008a78:	4627      	mov	r7, r4
            nextSz  = octets;
 8008a7a:	4659      	mov	r1, fp
 8008a7c:	e7c8      	b.n	8008a10 <TLSX_ValidateSupportedCurves+0xf6>

08008a7e <TLSX_FreeAll>:
{
 8008a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
    while ((extension = list)) {
 8008a84:	b904      	cbnz	r4, 8008a88 <TLSX_FreeAll+0xa>
}
 8008a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch (extension->type) {
 8008a88:	8823      	ldrh	r3, [r4, #0]
        list = extension->next;
 8008a8a:	6926      	ldr	r6, [r4, #16]
        switch (extension->type) {
 8008a8c:	2b0b      	cmp	r3, #11
 8008a8e:	d00f      	beq.n	8008ab0 <TLSX_FreeAll+0x32>
 8008a90:	2b0d      	cmp	r3, #13
 8008a92:	d015      	beq.n	8008ac0 <TLSX_FreeAll+0x42>
 8008a94:	2b0a      	cmp	r3, #10
 8008a96:	d101      	bne.n	8008a9c <TLSX_FreeAll+0x1e>
                EC_FREE_ALL((SupportedCurve*)extension->data, heap);
 8008a98:	6860      	ldr	r0, [r4, #4]
    while ((curve = list)) {
 8008a9a:	b920      	cbnz	r0, 8008aa6 <TLSX_FreeAll+0x28>
        XFREE(extension, heap, DYNAMIC_TYPE_TLSX);
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f014 ff69 	bl	801d974 <free>
        list = extension->next;
 8008aa2:	4634      	mov	r4, r6
 8008aa4:	e7ee      	b.n	8008a84 <TLSX_FreeAll+0x6>
        list = curve->next;
 8008aa6:	6847      	ldr	r7, [r0, #4]
        XFREE(curve, heap, DYNAMIC_TYPE_TLSX);
 8008aa8:	f014 ff64 	bl	801d974 <free>
        list = curve->next;
 8008aac:	4638      	mov	r0, r7
 8008aae:	e7f4      	b.n	8008a9a <TLSX_FreeAll+0x1c>
                PF_FREE_ALL((PointFormat*)extension->data, heap);
 8008ab0:	6860      	ldr	r0, [r4, #4]
    while ((point = list)) {
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0f2      	beq.n	8008a9c <TLSX_FreeAll+0x1e>
        list = point->next;
 8008ab6:	6847      	ldr	r7, [r0, #4]
        XFREE(point, heap, DYNAMIC_TYPE_TLSX);
 8008ab8:	f014 ff5c 	bl	801d974 <free>
        list = point->next;
 8008abc:	4638      	mov	r0, r7
 8008abe:	e7f8      	b.n	8008ab2 <TLSX_FreeAll+0x34>
                SA_FREE_ALL((SignatureAlgorithms*)extension->data, heap);
 8008ac0:	6860      	ldr	r0, [r4, #4]
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	f7ff ff15 	bl	80088f2 <TLSX_SignatureAlgorithms_FreeAll>
                break;
 8008ac8:	e7e8      	b.n	8008a9c <TLSX_FreeAll+0x1e>

08008aca <TLSX_Push>:
{
 8008aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008acc:	4605      	mov	r5, r0
    TLSX* extension = (TLSX*)XMALLOC(sizeof(TLSX), heap, DYNAMIC_TYPE_TLSX);
 8008ace:	2014      	movs	r0, #20
{
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	4617      	mov	r7, r2
 8008ad4:	461e      	mov	r6, r3
    TLSX* extension = (TLSX*)XMALLOC(sizeof(TLSX), heap, DYNAMIC_TYPE_TLSX);
 8008ad6:	f014 ff45 	bl	801d964 <malloc>
    if (extension) {
 8008ada:	b1a8      	cbz	r0, 8008b08 <TLSX_Push+0x3e>
        extension->resp = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	7303      	strb	r3, [r0, #12]
    extension->next = *list;
 8008ae0:	682b      	ldr	r3, [r5, #0]
        extension->type = type;
 8008ae2:	8004      	strh	r4, [r0, #0]
        extension->data = (void*)data;
 8008ae4:	6047      	str	r7, [r0, #4]
    extension->next = *list;
 8008ae6:	6103      	str	r3, [r0, #16]
    *list = extension;
 8008ae8:	6028      	str	r0, [r5, #0]
        if (extension->next && extension->next->type == type) {
 8008aea:	4603      	mov	r3, r0
 8008aec:	6900      	ldr	r0, [r0, #16]
 8008aee:	b150      	cbz	r0, 8008b06 <TLSX_Push+0x3c>
 8008af0:	8802      	ldrh	r2, [r0, #0]
 8008af2:	42a2      	cmp	r2, r4
 8008af4:	d1f9      	bne.n	8008aea <TLSX_Push+0x20>
            extension->next = next->next;
 8008af6:	6902      	ldr	r2, [r0, #16]
 8008af8:	611a      	str	r2, [r3, #16]
            next->next = NULL;
 8008afa:	2400      	movs	r4, #0
 8008afc:	6104      	str	r4, [r0, #16]
            TLSX_FreeAll(next, heap);
 8008afe:	4631      	mov	r1, r6
 8008b00:	f7ff ffbd 	bl	8008a7e <TLSX_FreeAll>
    return 0;
 8008b04:	4620      	mov	r0, r4
}
 8008b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return MEMORY_E;
 8008b08:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8008b0c:	e7fb      	b.n	8008b06 <TLSX_Push+0x3c>

08008b0e <TLSX_UseSupportedCurve>:
{
 8008b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b12:	460e      	mov	r6, r1
 8008b14:	4690      	mov	r8, r2
    if (extensions == NULL) {
 8008b16:	4607      	mov	r7, r0
 8008b18:	b308      	cbz	r0, 8008b5e <TLSX_UseSupportedCurve+0x50>
    extension = TLSX_Find(*extensions, TLSX_SUPPORTED_GROUPS);
 8008b1a:	6800      	ldr	r0, [r0, #0]
 8008b1c:	210a      	movs	r1, #10
 8008b1e:	f7ff feec 	bl	80088fa <TLSX_Find>
    if (!extension) {
 8008b22:	4604      	mov	r4, r0
 8008b24:	b9c8      	cbnz	r0, 8008b5a <TLSX_UseSupportedCurve+0x4c>
    *curve = (SupportedCurve*)XMALLOC(sizeof(SupportedCurve), heap,
 8008b26:	2008      	movs	r0, #8
 8008b28:	f014 ff1c 	bl	801d964 <malloc>
    if (*curve == NULL)
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	b920      	cbnz	r0, 8008b3a <TLSX_UseSupportedCurve+0x2c>
        return MEMORY_E;
 8008b30:	f06f 047c 	mvn.w	r4, #124	; 0x7c
}
 8008b34:	4620      	mov	r0, r4
 8008b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (*curve)->next = NULL;
 8008b3a:	6044      	str	r4, [r0, #4]
    (*curve)->name = name;
 8008b3c:	8006      	strh	r6, [r0, #0]
        ret = TLSX_Push(extensions, TLSX_SUPPORTED_GROUPS, curve, heap);
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4643      	mov	r3, r8
 8008b42:	210a      	movs	r1, #10
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff ffc0 	bl	8008aca <TLSX_Push>
        if (ret != 0) {
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	b908      	cbnz	r0, 8008b52 <TLSX_UseSupportedCurve+0x44>
    return WOLFSSL_SUCCESS;
 8008b4e:	2401      	movs	r4, #1
 8008b50:	e7f0      	b.n	8008b34 <TLSX_UseSupportedCurve+0x26>
            XFREE(curve, heap, DYNAMIC_TYPE_TLSX);
 8008b52:	4628      	mov	r0, r5
 8008b54:	f014 ff0e 	bl	801d974 <free>
 8008b58:	e7ec      	b.n	8008b34 <TLSX_UseSupportedCurve+0x26>
        ret = TLSX_SupportedCurve_Append((SupportedCurve*)extension->data, name,
 8008b5a:	6844      	ldr	r4, [r0, #4]
    while (list) {
 8008b5c:	b914      	cbnz	r4, 8008b64 <TLSX_UseSupportedCurve+0x56>
        return BAD_FUNC_ARG;
 8008b5e:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8008b62:	e7e7      	b.n	8008b34 <TLSX_UseSupportedCurve+0x26>
        if (list->name == name) {
 8008b64:	8823      	ldrh	r3, [r4, #0]
 8008b66:	42b3      	cmp	r3, r6
 8008b68:	d0f1      	beq.n	8008b4e <TLSX_UseSupportedCurve+0x40>
        if (list->next == NULL) {
 8008b6a:	6865      	ldr	r5, [r4, #4]
 8008b6c:	b945      	cbnz	r5, 8008b80 <TLSX_UseSupportedCurve+0x72>
    *curve = (SupportedCurve*)XMALLOC(sizeof(SupportedCurve), heap,
 8008b6e:	2008      	movs	r0, #8
 8008b70:	f014 fef8 	bl	801d964 <malloc>
 8008b74:	6060      	str	r0, [r4, #4]
    if (*curve == NULL)
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d0da      	beq.n	8008b30 <TLSX_UseSupportedCurve+0x22>
    (*curve)->name = name;
 8008b7a:	8006      	strh	r6, [r0, #0]
    (*curve)->next = NULL;
 8008b7c:	6045      	str	r5, [r0, #4]
 8008b7e:	e7e6      	b.n	8008b4e <TLSX_UseSupportedCurve+0x40>
 8008b80:	462c      	mov	r4, r5
 8008b82:	e7eb      	b.n	8008b5c <TLSX_UseSupportedCurve+0x4e>

08008b84 <TLSX_SupportedCurve_Parse>:
{
 8008b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b86:	4605      	mov	r5, r0
 8008b88:	460e      	mov	r6, r1
 8008b8a:	4614      	mov	r4, r2
    if(!isRequest && !IsAtLeastTLSv1_3(ssl->version)) {
 8008b8c:	b11b      	cbz	r3, 8008b96 <TLSX_SupportedCurve_Parse+0x12>
    if (OPAQUE16_LEN > length || length % OPAQUE16_LEN)
 8008b8e:	2c01      	cmp	r4, #1
 8008b90:	d808      	bhi.n	8008ba4 <TLSX_SupportedCurve_Parse+0x20>
        return BUFFER_ERROR; /* servers doesn't send this extension. */
 8008b92:	4813      	ldr	r0, [pc, #76]	; (8008be0 <TLSX_SupportedCurve_Parse+0x5c>)
}
 8008b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!isRequest && !IsAtLeastTLSv1_3(ssl->version)) {
 8008b96:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8008b9a:	f7f7 fef8 	bl	800098e <IsAtLeastTLSv1_3>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d1f5      	bne.n	8008b8e <TLSX_SupportedCurve_Parse+0xa>
 8008ba2:	e7f6      	b.n	8008b92 <TLSX_SupportedCurve_Parse+0xe>
    if (OPAQUE16_LEN > length || length % OPAQUE16_LEN)
 8008ba4:	07e3      	lsls	r3, r4, #31
 8008ba6:	d4f4      	bmi.n	8008b92 <TLSX_SupportedCurve_Parse+0xe>
    if (length != OPAQUE16_LEN + offset)
 8008ba8:	8833      	ldrh	r3, [r6, #0]
 8008baa:	ba5b      	rev16	r3, r3
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	3302      	adds	r3, #2
 8008bb0:	429c      	cmp	r4, r3
 8008bb2:	d1ee      	bne.n	8008b92 <TLSX_SupportedCurve_Parse+0xe>
    if (offset == length)
 8008bb4:	2c02      	cmp	r4, #2
 8008bb6:	d101      	bne.n	8008bbc <TLSX_SupportedCurve_Parse+0x38>
        return 0;
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e7eb      	b.n	8008b94 <TLSX_SupportedCurve_Parse+0x10>
    offset = OPAQUE16_LEN;
 8008bbc:	2702      	movs	r7, #2
        ret = TLSX_UseSupportedCurve(extensions, name, ssl->heap);
 8008bbe:	5bf1      	ldrh	r1, [r6, r7]
 8008bc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008bc2:	9806      	ldr	r0, [sp, #24]
 8008bc4:	ba49      	rev16	r1, r1
 8008bc6:	b289      	uxth	r1, r1
 8008bc8:	f7ff ffa1 	bl	8008b0e <TLSX_UseSupportedCurve>
        if (ret != WOLFSSL_SUCCESS && ret != BAD_FUNC_ARG) {
 8008bcc:	2801      	cmp	r0, #1
 8008bce:	d002      	beq.n	8008bd6 <TLSX_SupportedCurve_Parse+0x52>
 8008bd0:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8008bd4:	d1de      	bne.n	8008b94 <TLSX_SupportedCurve_Parse+0x10>
    for (; offset < length; offset += OPAQUE16_LEN) {
 8008bd6:	3702      	adds	r7, #2
 8008bd8:	b2bf      	uxth	r7, r7
 8008bda:	42a7      	cmp	r7, r4
 8008bdc:	d3ef      	bcc.n	8008bbe <TLSX_SupportedCurve_Parse+0x3a>
 8008bde:	e7eb      	b.n	8008bb8 <TLSX_SupportedCurve_Parse+0x34>
 8008be0:	fffffeb8 	.word	0xfffffeb8

08008be4 <TLSX_UsePointFormat>:
{
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	460e      	mov	r6, r1
 8008bea:	4690      	mov	r8, r2
    if (extensions == NULL)
 8008bec:	4607      	mov	r7, r0
 8008bee:	b308      	cbz	r0, 8008c34 <TLSX_UsePointFormat+0x50>
    extension = TLSX_Find(*extensions, TLSX_EC_POINT_FORMATS);
 8008bf0:	6800      	ldr	r0, [r0, #0]
 8008bf2:	210b      	movs	r1, #11
 8008bf4:	f7ff fe81 	bl	80088fa <TLSX_Find>
    if (!extension) {
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	b9c8      	cbnz	r0, 8008c30 <TLSX_UsePointFormat+0x4c>
    *point = (PointFormat*)XMALLOC(sizeof(PointFormat), heap,
 8008bfc:	2008      	movs	r0, #8
 8008bfe:	f014 feb1 	bl	801d964 <malloc>
    if (*point == NULL)
 8008c02:	4605      	mov	r5, r0
 8008c04:	b920      	cbnz	r0, 8008c10 <TLSX_UsePointFormat+0x2c>
        return MEMORY_E;
 8008c06:	f06f 047c 	mvn.w	r4, #124	; 0x7c
}
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (*point)->next = NULL;
 8008c10:	6044      	str	r4, [r0, #4]
    (*point)->format = format;
 8008c12:	7006      	strb	r6, [r0, #0]
        ret = TLSX_Push(extensions, TLSX_EC_POINT_FORMATS, point, heap);
 8008c14:	4602      	mov	r2, r0
 8008c16:	4643      	mov	r3, r8
 8008c18:	210b      	movs	r1, #11
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f7ff ff55 	bl	8008aca <TLSX_Push>
        if (ret != 0) {
 8008c20:	4604      	mov	r4, r0
 8008c22:	b908      	cbnz	r0, 8008c28 <TLSX_UsePointFormat+0x44>
    return WOLFSSL_SUCCESS;
 8008c24:	2401      	movs	r4, #1
 8008c26:	e7f0      	b.n	8008c0a <TLSX_UsePointFormat+0x26>
            XFREE(point, heap, DYNAMIC_TYPE_TLSX);
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f014 fea3 	bl	801d974 <free>
 8008c2e:	e7ec      	b.n	8008c0a <TLSX_UsePointFormat+0x26>
        ret = TLSX_PointFormat_Append((PointFormat*)extension->data, format,
 8008c30:	6844      	ldr	r4, [r0, #4]
    while (list) {
 8008c32:	b914      	cbnz	r4, 8008c3a <TLSX_UsePointFormat+0x56>
        return BAD_FUNC_ARG;
 8008c34:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8008c38:	e7e7      	b.n	8008c0a <TLSX_UsePointFormat+0x26>
        if (list->format == format) {
 8008c3a:	7823      	ldrb	r3, [r4, #0]
 8008c3c:	42b3      	cmp	r3, r6
 8008c3e:	d0f1      	beq.n	8008c24 <TLSX_UsePointFormat+0x40>
        if (list->next == NULL) {
 8008c40:	6865      	ldr	r5, [r4, #4]
 8008c42:	b945      	cbnz	r5, 8008c56 <TLSX_UsePointFormat+0x72>
    *point = (PointFormat*)XMALLOC(sizeof(PointFormat), heap,
 8008c44:	2008      	movs	r0, #8
 8008c46:	f014 fe8d 	bl	801d964 <malloc>
 8008c4a:	6060      	str	r0, [r4, #4]
    if (*point == NULL)
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0da      	beq.n	8008c06 <TLSX_UsePointFormat+0x22>
    (*point)->format = format;
 8008c50:	7006      	strb	r6, [r0, #0]
    (*point)->next = NULL;
 8008c52:	6045      	str	r5, [r0, #4]
 8008c54:	e7e6      	b.n	8008c24 <TLSX_UsePointFormat+0x40>
 8008c56:	462c      	mov	r4, r5
 8008c58:	e7eb      	b.n	8008c32 <TLSX_UsePointFormat+0x4e>

08008c5a <TLSX_SupportExtensions>:
int TLSX_SupportExtensions(WOLFSSL* ssl) {
 8008c5a:	b510      	push	{r4, lr}
    return ssl && (IsTLS(ssl) || ssl->version.major == DTLS_MAJOR);
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	b140      	cbz	r0, 8008c72 <TLSX_SupportExtensions+0x18>
 8008c60:	f7f7 fe7c 	bl	800095c <IsTLS>
 8008c64:	b930      	cbnz	r0, 8008c74 <TLSX_SupportExtensions+0x1a>
 8008c66:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
 8008c6a:	f1a0 03fe 	sub.w	r3, r0, #254	; 0xfe
 8008c6e:	4258      	negs	r0, r3
 8008c70:	4158      	adcs	r0, r3
}
 8008c72:	bd10      	pop	{r4, pc}
    return ssl && (IsTLS(ssl) || ssl->version.major == DTLS_MAJOR);
 8008c74:	2001      	movs	r0, #1
 8008c76:	e7fc      	b.n	8008c72 <TLSX_SupportExtensions+0x18>

08008c78 <TLSX_PopulateExtensions>:
}

#endif /* HAVE_SUPPORTED_CURVES */

int TLSX_PopulateExtensions(WOLFSSL* ssl, byte isServer)
{
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	4605      	mov	r5, r0
#if (defined(HAVE_ECC) || defined(HAVE_CURVE25519) || \
                       defined(HAVE_CURVE448)) && defined(HAVE_SUPPORTED_CURVES)
        if (!ssl->options.userCurves && !ssl->ctx->userCurves) {
            if (TLSX_Find(ssl->ctx->extensions,
                                               TLSX_SUPPORTED_GROUPS) == NULL) {
                ret = TLSX_PopulateSupportedGroups(ssl, &ssl->extensions);
 8008c7c:	f500 7630 	add.w	r6, r0, #704	; 0x2c0
    if (!isServer) {
 8008c80:	b1e9      	cbz	r1, 8008cbe <TLSX_PopulateExtensions+0x46>
    if (TLSX_Find(*extensions, TLSX_SIGNATURE_ALGORITHMS) != NULL)
 8008c82:	210d      	movs	r1, #13
 8008c84:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8008c88:	f7ff fe37 	bl	80088fa <TLSX_Find>
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d157      	bne.n	8008d42 <TLSX_PopulateExtensions+0xca>
#endif
    } /* is not server */

#if !defined(NO_CERTS) && !defined(WOLFSSL_NO_SIGALG)
    WOLFSSL_MSG("Adding signature algorithms extension");
    if ((ret = TLSX_SetSignatureAlgorithms(&ssl->extensions, ssl, ssl->heap))
 8008c92:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    sa = TLSX_SignatureAlgorithms_New(ssl, 0, heap);
 8008c94:	4628      	mov	r0, r5
 8008c96:	463a      	mov	r2, r7
 8008c98:	f7ff fe19 	bl	80088ce <TLSX_SignatureAlgorithms_New>
    if (sa == NULL)
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d051      	beq.n	8008d46 <TLSX_PopulateExtensions+0xce>
    ret = TLSX_Push(extensions, TLSX_SIGNATURE_ALGORITHMS, sa, heap);
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	210d      	movs	r1, #13
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff ff0e 	bl	8008aca <TLSX_Push>
    if (ret != 0)
 8008cae:	4604      	mov	r4, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d03f      	beq.n	8008d34 <TLSX_PopulateExtensions+0xbc>
        TLSX_SignatureAlgorithms_FreeAll(sa, heap);
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7ff fe1b 	bl	80088f2 <TLSX_SignatureAlgorithms_FreeAll>
 8008cbc:	e03a      	b.n	8008d34 <TLSX_PopulateExtensions+0xbc>
        if (!ssl->options.userCurves && !ssl->ctx->userCurves) {
 8008cbe:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8008cc2:	069a      	lsls	r2, r3, #26
 8008cc4:	d51b      	bpl.n	8008cfe <TLSX_PopulateExtensions+0x86>
        if ((!IsAtLeastTLSv1_3(ssl->version) || ssl->options.downgrade) &&
 8008cc6:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
 8008cca:	f7f7 fe60 	bl	800098e <IsAtLeastTLSv1_3>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d132      	bne.n	8008d38 <TLSX_PopulateExtensions+0xc0>
               TLSX_Find(ssl->ctx->extensions, TLSX_EC_POINT_FORMATS) == NULL &&
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	210b      	movs	r1, #11
 8008cd6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008cd8:	f7ff fe0f 	bl	80088fa <TLSX_Find>
        if ((!IsAtLeastTLSv1_3(ssl->version) || ssl->options.downgrade) &&
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d1d0      	bne.n	8008c82 <TLSX_PopulateExtensions+0xa>
               TLSX_Find(ssl->extensions, TLSX_EC_POINT_FORMATS) == NULL) {
 8008ce0:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8008ce4:	f7ff fe09 	bl	80088fa <TLSX_Find>
               TLSX_Find(ssl->ctx->extensions, TLSX_EC_POINT_FORMATS) == NULL &&
 8008ce8:	4601      	mov	r1, r0
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1c9      	bne.n	8008c82 <TLSX_PopulateExtensions+0xa>
             ret = TLSX_UsePointFormat(&ssl->extensions,
 8008cee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ff77 	bl	8008be4 <TLSX_UsePointFormat>
             if (ret != WOLFSSL_SUCCESS)
 8008cf6:	2801      	cmp	r0, #1
             ret = TLSX_UsePointFormat(&ssl->extensions,
 8008cf8:	4604      	mov	r4, r0
             if (ret != WOLFSSL_SUCCESS)
 8008cfa:	d11b      	bne.n	8008d34 <TLSX_PopulateExtensions+0xbc>
 8008cfc:	e7c1      	b.n	8008c82 <TLSX_PopulateExtensions+0xa>
        if (!ssl->options.userCurves && !ssl->ctx->userCurves) {
 8008cfe:	6803      	ldr	r3, [r0, #0]
 8008d00:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d1de      	bne.n	8008cc6 <TLSX_PopulateExtensions+0x4e>
            if (TLSX_Find(ssl->ctx->extensions,
 8008d08:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008d0a:	210a      	movs	r1, #10
 8008d0c:	f7ff fdf5 	bl	80088fa <TLSX_Find>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d1d8      	bne.n	8008cc6 <TLSX_PopulateExtensions+0x4e>
                ret = TLSX_UseSupportedCurve(extensions,
 8008d14:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008d16:	2117      	movs	r1, #23
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff fef8 	bl	8008b0e <TLSX_UseSupportedCurve>
                if (ret != WOLFSSL_SUCCESS) return ret;
 8008d1e:	2801      	cmp	r0, #1
                ret = TLSX_UseSupportedCurve(extensions,
 8008d20:	4604      	mov	r4, r0
                if (ret != WOLFSSL_SUCCESS) return ret;
 8008d22:	d107      	bne.n	8008d34 <TLSX_PopulateExtensions+0xbc>
                ret = TLSX_UseSupportedCurve(extensions,
 8008d24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008d26:	211d      	movs	r1, #29
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f7ff fef0 	bl	8008b0e <TLSX_UseSupportedCurve>
                if (ret != WOLFSSL_SUCCESS)
 8008d2e:	2801      	cmp	r0, #1
                ret = TLSX_UseSupportedCurve(extensions,
 8008d30:	4604      	mov	r4, r0
                if (ret != WOLFSSL_SUCCESS)
 8008d32:	d0c8      	beq.n	8008cc6 <TLSX_PopulateExtensions+0x4e>
    (void)public_key;
    (void)public_key_len;
    (void)ssl;

    return ret;
}
 8008d34:	4620      	mov	r0, r4
 8008d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((!IsAtLeastTLSv1_3(ssl->version) || ssl->options.downgrade) &&
 8008d38:	f895 3271 	ldrb.w	r3, [r5, #625]	; 0x271
 8008d3c:	075b      	lsls	r3, r3, #29
 8008d3e:	d5a0      	bpl.n	8008c82 <TLSX_PopulateExtensions+0xa>
 8008d40:	e7c7      	b.n	8008cd2 <TLSX_PopulateExtensions+0x5a>
        return 0;
 8008d42:	2400      	movs	r4, #0
 8008d44:	e7f6      	b.n	8008d34 <TLSX_PopulateExtensions+0xbc>
        return MEMORY_ERROR;
 8008d46:	f46f 7497 	mvn.w	r4, #302	; 0x12e
 8008d4a:	e7f3      	b.n	8008d34 <TLSX_PopulateExtensions+0xbc>

08008d4c <TLSX_GetRequestSize>:
}
#endif

/** Tells the buffered size of extensions to be sent into the client hello. */
int TLSX_GetRequestSize(WOLFSSL* ssl, byte msgType, word16* pLength)
{
 8008d4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int ret = 0;
    word16 length = 0;
 8008d4e:	2300      	movs	r3, #0
    byte semaphore[SEMAPHORE_SIZE] = {0};
 8008d50:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
 8008d54:	4604      	mov	r4, r0
 8008d56:	460d      	mov	r5, r1
 8008d58:	4616      	mov	r6, r2
    word16 length = 0;
 8008d5a:	f8ad 3002 	strh.w	r3, [sp, #2]
    byte semaphore[SEMAPHORE_SIZE] = {0};
 8008d5e:	f88d 300c 	strb.w	r3, [sp, #12]

    if (!TLSX_SupportExtensions(ssl))
 8008d62:	f7ff ff7a 	bl	8008c5a <TLSX_SupportExtensions>
 8008d66:	b358      	cbz	r0, 8008dc0 <TLSX_GetRequestSize+0x74>
        return 0;
    if (msgType == client_hello) {
 8008d68:	2d01      	cmp	r5, #1
 8008d6a:	d112      	bne.n	8008d92 <TLSX_GetRequestSize+0x46>
        EC_VALIDATE_REQUEST(ssl, semaphore);
 8008d6c:	a901      	add	r1, sp, #4
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff f964 	bl	800803c <TLSX_SupportedCurve_ValidateRequest>
        PF_VALIDATE_REQUEST(ssl, semaphore);
 8008d74:	4620      	mov	r0, r4
 8008d76:	f7ff f97c 	bl	8008072 <TLSX_PointFormat_ValidateRequest>
        WOLF_STK_VALIDATE_REQUEST(ssl);
#if !defined(NO_CERTS) && !defined(WOLFSSL_NO_SIGALG)
        if (WOLFSSL_SUITES(ssl)->hashSigAlgoSz == 0)
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	b90b      	cbnz	r3, 8008d82 <TLSX_GetRequestSize+0x36>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	885b      	ldrh	r3, [r3, #2]
 8008d84:	b92b      	cbnz	r3, 8008d92 <TLSX_GetRequestSize+0x46>
            TURN_ON(semaphore, TLSX_ToSemaphore(TLSX_SIGNATURE_ALGORITHMS));
 8008d86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008d8a:	f043 0320 	orr.w	r3, r3, #32
 8008d8e:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    else
#endif /* HAVE_ECH */
#endif /* WOLFSSL_TLS13 */
    {
        if (ssl->extensions) {
 8008d92:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008d96:	b958      	cbnz	r0, 8008db0 <TLSX_GetRequestSize+0x64>
            ret = TLSX_GetSize(ssl->extensions, semaphore, msgType, &length);
            if (ret != 0)
                return ret;
        }
        if (ssl->ctx && ssl->ctx->extensions) {
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	b99b      	cbnz	r3, 8008dc4 <TLSX_GetRequestSize+0x78>
                  (!IsAtLeastTLSv1_3(ssl->version) || ssl->options.downgrade)) {
        length += HELLO_EXT_SZ;
    }
#endif

    if (length)
 8008d9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008da0:	b9e3      	cbnz	r3, 8008ddc <TLSX_GetRequestSize+0x90>
        length += OPAQUE16_LEN; /* for total length storage. */

    *pLength += length;
 8008da2:	8833      	ldrh	r3, [r6, #0]
 8008da4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008da8:	4413      	add	r3, r2
 8008daa:	8033      	strh	r3, [r6, #0]

    return ret;
 8008dac:	2000      	movs	r0, #0
 8008dae:	e007      	b.n	8008dc0 <TLSX_GetRequestSize+0x74>
            ret = TLSX_GetSize(ssl->extensions, semaphore, msgType, &length);
 8008db0:	f10d 0302 	add.w	r3, sp, #2
 8008db4:	462a      	mov	r2, r5
 8008db6:	a901      	add	r1, sp, #4
 8008db8:	f7ff f977 	bl	80080aa <TLSX_GetSize>
            if (ret != 0)
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d0eb      	beq.n	8008d98 <TLSX_GetRequestSize+0x4c>
}
 8008dc0:	b004      	add	sp, #16
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
        if (ssl->ctx && ssl->ctx->extensions) {
 8008dc4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d0e8      	beq.n	8008d9c <TLSX_GetRequestSize+0x50>
            ret = TLSX_GetSize(ssl->ctx->extensions, semaphore, msgType,
 8008dca:	f10d 0302 	add.w	r3, sp, #2
 8008dce:	462a      	mov	r2, r5
 8008dd0:	a901      	add	r1, sp, #4
 8008dd2:	f7ff f96a 	bl	80080aa <TLSX_GetSize>
            if (ret != 0)
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d0e0      	beq.n	8008d9c <TLSX_GetRequestSize+0x50>
 8008dda:	e7f1      	b.n	8008dc0 <TLSX_GetRequestSize+0x74>
        length += OPAQUE16_LEN; /* for total length storage. */
 8008ddc:	3302      	adds	r3, #2
 8008dde:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008de2:	e7de      	b.n	8008da2 <TLSX_GetRequestSize+0x56>

08008de4 <TLSX_WriteRequest>:
}
#endif

/** Writes the extensions to be sent into the client hello. */
int TLSX_WriteRequest(WOLFSSL* ssl, byte* output, byte msgType, word16* pOffset)
{
 8008de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de6:	b087      	sub	sp, #28
 8008de8:	461f      	mov	r7, r3
    int ret = 0;
    word16 offset = 0;
 8008dea:	2300      	movs	r3, #0
    byte semaphore[SEMAPHORE_SIZE] = {0};
 8008dec:	e9cd 3303 	strd	r3, r3, [sp, #12]
{
 8008df0:	4605      	mov	r5, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	4616      	mov	r6, r2
    word16 offset = 0;
 8008df6:	f8ad 300a 	strh.w	r3, [sp, #10]
    byte semaphore[SEMAPHORE_SIZE] = {0};
 8008dfa:	f88d 3014 	strb.w	r3, [sp, #20]

    if (!TLSX_SupportExtensions(ssl) || output == NULL)
 8008dfe:	f7ff ff2c 	bl	8008c5a <TLSX_SupportExtensions>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d03d      	beq.n	8008e82 <TLSX_WriteRequest+0x9e>
 8008e06:	2c00      	cmp	r4, #0
 8008e08:	d04d      	beq.n	8008ea6 <TLSX_WriteRequest+0xc2>
        return 0;

    offset += OPAQUE16_LEN; /* extensions length */
 8008e0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]

    if (msgType == client_hello) {
 8008e0e:	2e01      	cmp	r6, #1
    offset += OPAQUE16_LEN; /* extensions length */
 8008e10:	f103 0302 	add.w	r3, r3, #2
 8008e14:	f8ad 300a 	strh.w	r3, [sp, #10]
    if (msgType == client_hello) {
 8008e18:	d112      	bne.n	8008e40 <TLSX_WriteRequest+0x5c>
        EC_VALIDATE_REQUEST(ssl, semaphore);
 8008e1a:	a903      	add	r1, sp, #12
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7ff f90d 	bl	800803c <TLSX_SupportedCurve_ValidateRequest>
        PF_VALIDATE_REQUEST(ssl, semaphore);
 8008e22:	4628      	mov	r0, r5
 8008e24:	f7ff f925 	bl	8008072 <TLSX_PointFormat_ValidateRequest>
        WOLF_STK_VALIDATE_REQUEST(ssl);
#if !defined(NO_CERTS) && !defined(WOLFSSL_NO_SIGALG)
        if (WOLFSSL_SUITES(ssl)->hashSigAlgoSz == 0)
 8008e28:	686b      	ldr	r3, [r5, #4]
 8008e2a:	b90b      	cbnz	r3, 8008e30 <TLSX_WriteRequest+0x4c>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	b92b      	cbnz	r3, 8008e40 <TLSX_WriteRequest+0x5c>
            TURN_ON(semaphore, TLSX_ToSemaphore(TLSX_SIGNATURE_ALGORITHMS));
 8008e34:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008e38:	f043 0320 	orr.w	r3, r3, #32
 8008e3c:	f88d 300d 	strb.w	r3, [sp, #13]
            return ret;
    }
    else
#endif
    {
        if (ssl->extensions) {
 8008e40:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8008e44:	b988      	cbnz	r0, 8008e6a <TLSX_WriteRequest+0x86>
            ret = TLSX_Write(ssl->extensions, output + offset, semaphore,
                             msgType, &offset);
            if (ret != 0)
                return ret;
        }
        if (ssl->ctx && ssl->ctx->extensions) {
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	b9eb      	cbnz	r3, 8008e86 <TLSX_WriteRequest+0xa2>
            return ret;
    }
    #endif
#endif

    if (offset > OPAQUE16_LEN || msgType != client_hello)
 8008e4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d801      	bhi.n	8008e56 <TLSX_WriteRequest+0x72>
 8008e52:	2e01      	cmp	r6, #1
 8008e54:	d004      	beq.n	8008e60 <TLSX_WriteRequest+0x7c>
        c16toa(offset - OPAQUE16_LEN, output); /* extensions length */
 8008e56:	1e9a      	subs	r2, r3, #2
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8008e58:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008e5c:	7021      	strb	r1, [r4, #0]
    c[1] =  (byte)(wc_u16       & 0xff);
 8008e5e:	7062      	strb	r2, [r4, #1]

     *pOffset += offset;
 8008e60:	883a      	ldrh	r2, [r7, #0]
 8008e62:	4413      	add	r3, r2
 8008e64:	803b      	strh	r3, [r7, #0]

    return ret;
 8008e66:	2000      	movs	r0, #0
 8008e68:	e00b      	b.n	8008e82 <TLSX_WriteRequest+0x9e>
            ret = TLSX_Write(ssl->extensions, output + offset, semaphore,
 8008e6a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8008e6e:	f10d 030a 	add.w	r3, sp, #10
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	aa03      	add	r2, sp, #12
 8008e76:	4633      	mov	r3, r6
 8008e78:	4421      	add	r1, r4
 8008e7a:	f7ff f97a 	bl	8008172 <TLSX_Write>
            if (ret != 0)
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d0e1      	beq.n	8008e46 <TLSX_WriteRequest+0x62>
}
 8008e82:	b007      	add	sp, #28
 8008e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ssl->ctx && ssl->ctx->extensions) {
 8008e86:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0de      	beq.n	8008e4a <TLSX_WriteRequest+0x66>
            ret = TLSX_Write(ssl->ctx->extensions, output + offset, semaphore,
 8008e8c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8008e90:	f10d 030a 	add.w	r3, sp, #10
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	aa03      	add	r2, sp, #12
 8008e98:	4633      	mov	r3, r6
 8008e9a:	4421      	add	r1, r4
 8008e9c:	f7ff f969 	bl	8008172 <TLSX_Write>
            if (ret != 0)
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0d2      	beq.n	8008e4a <TLSX_WriteRequest+0x66>
 8008ea4:	e7ed      	b.n	8008e82 <TLSX_WriteRequest+0x9e>
        return 0;
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	e7eb      	b.n	8008e82 <TLSX_WriteRequest+0x9e>

08008eaa <TLSX_GetResponseSize>:

#if defined(WOLFSSL_TLS13) || !defined(NO_WOLFSSL_SERVER)

/** Tells the buffered size of extensions to be sent into the server hello. */
int TLSX_GetResponseSize(WOLFSSL* ssl, byte msgType, word16* pLength)
{
 8008eaa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int ret = 0;
    word16 length = 0;
    byte semaphore[SEMAPHORE_SIZE] = {0};

    switch (msgType) {
 8008eac:	2902      	cmp	r1, #2
    word16 length = 0;
 8008eae:	f04f 0300 	mov.w	r3, #0
    byte semaphore[SEMAPHORE_SIZE] = {0};
 8008eb2:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	4616      	mov	r6, r2
    word16 length = 0;
 8008ebc:	f8ad 3002 	strh.w	r3, [sp, #2]
    byte semaphore[SEMAPHORE_SIZE] = {0};
 8008ec0:	f88d 300c 	strb.w	r3, [sp, #12]
    switch (msgType) {
 8008ec4:	d104      	bne.n	8008ed0 <TLSX_GetResponseSize+0x26>
#ifndef NO_WOLFSSL_SERVER
        case server_hello:
            PF_VALIDATE_RESPONSE(ssl, semaphore);
 8008ec6:	f890 0278 	ldrb.w	r0, [r0, #632]	; 0x278
 8008eca:	a901      	add	r1, sp, #4
 8008ecc:	f7ff fa08 	bl	80082e0 <TLSX_PointFormat_ValidateResponse.isra.0>
                                              !IsAtLeastTLSv1_3(ssl->version)) {
        length += HELLO_EXT_SZ;
    }
#endif

    if (TLSX_SupportExtensions(ssl)) {
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f7ff fec2 	bl	8008c5a <TLSX_SupportExtensions>
 8008ed6:	b970      	cbnz	r0, 8008ef6 <TLSX_GetResponseSize+0x4c>
            return ret;
    }

    /* All the response data is set at the ssl object only, so no ctx here. */

    if (length || msgType != server_hello)
 8008ed8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008edc:	b90b      	cbnz	r3, 8008ee2 <TLSX_GetResponseSize+0x38>
 8008ede:	2c02      	cmp	r4, #2
 8008ee0:	d002      	beq.n	8008ee8 <TLSX_GetResponseSize+0x3e>
        length += OPAQUE16_LEN; /* for total length storage. */
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	f8ad 3002 	strh.w	r3, [sp, #2]

    *pLength += length;
 8008ee8:	8833      	ldrh	r3, [r6, #0]
 8008eea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008eee:	4413      	add	r3, r2
 8008ef0:	8033      	strh	r3, [r6, #0]

    return ret;
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e009      	b.n	8008f0a <TLSX_GetResponseSize+0x60>
        ret = TLSX_GetSize(ssl->extensions, semaphore, msgType, &length);
 8008ef6:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8008efa:	f10d 0302 	add.w	r3, sp, #2
 8008efe:	4622      	mov	r2, r4
 8008f00:	a901      	add	r1, sp, #4
 8008f02:	f7ff f8d2 	bl	80080aa <TLSX_GetSize>
        if (ret != 0)
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d0e6      	beq.n	8008ed8 <TLSX_GetResponseSize+0x2e>
}
 8008f0a:	b004      	add	sp, #16
 8008f0c:	bd70      	pop	{r4, r5, r6, pc}

08008f0e <TLSX_WriteResponse>:

/** Writes the server hello extensions into a buffer. */
int TLSX_WriteResponse(WOLFSSL *ssl, byte* output, byte msgType, word16* pOffset)
{
 8008f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f12:	b086      	sub	sp, #24
    int ret = 0;
    word16 offset = 0;
 8008f14:	f04f 0800 	mov.w	r8, #0
{
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	4616      	mov	r6, r2
 8008f1e:	461c      	mov	r4, r3
    word16 offset = 0;
 8008f20:	f8ad 800a 	strh.w	r8, [sp, #10]

    if (TLSX_SupportExtensions(ssl) && output) {
 8008f24:	f7ff fe99 	bl	8008c5a <TLSX_SupportExtensions>
 8008f28:	b338      	cbz	r0, 8008f7a <TLSX_WriteResponse+0x6c>
 8008f2a:	b335      	cbz	r5, 8008f7a <TLSX_WriteResponse+0x6c>
        byte semaphore[SEMAPHORE_SIZE] = {0};

        switch (msgType) {
 8008f2c:	2e02      	cmp	r6, #2
        byte semaphore[SEMAPHORE_SIZE] = {0};
 8008f2e:	e9cd 8803 	strd	r8, r8, [sp, #12]
 8008f32:	f88d 8014 	strb.w	r8, [sp, #20]
        switch (msgType) {
 8008f36:	d104      	bne.n	8008f42 <TLSX_WriteResponse+0x34>
#ifndef NO_WOLFSSL_SERVER
            case server_hello:
                PF_VALIDATE_RESPONSE(ssl, semaphore);
 8008f38:	f897 0278 	ldrb.w	r0, [r7, #632]	; 0x278
 8008f3c:	a903      	add	r1, sp, #12
 8008f3e:	f7ff f9cf 	bl	80082e0 <TLSX_PointFormat_ValidateResponse.isra.0>

            default:
                break;
        }

        offset += OPAQUE16_LEN; /* extensions length */
 8008f42:	f8bd 100a 	ldrh.w	r1, [sp, #10]

        ret = TLSX_Write(ssl->extensions, output + offset, semaphore,
 8008f46:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
        offset += OPAQUE16_LEN; /* extensions length */
 8008f4a:	3102      	adds	r1, #2
 8008f4c:	b289      	uxth	r1, r1
        ret = TLSX_Write(ssl->extensions, output + offset, semaphore,
 8008f4e:	f10d 030a 	add.w	r3, sp, #10
        offset += OPAQUE16_LEN; /* extensions length */
 8008f52:	f8ad 100a 	strh.w	r1, [sp, #10]
        ret = TLSX_Write(ssl->extensions, output + offset, semaphore,
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	aa03      	add	r2, sp, #12
 8008f5a:	4633      	mov	r3, r6
 8008f5c:	4429      	add	r1, r5
 8008f5e:	f7ff f908 	bl	8008172 <TLSX_Write>
                         msgType, &offset);
        if (ret != 0)
 8008f62:	b988      	cbnz	r0, 8008f88 <TLSX_WriteResponse+0x7a>
            c16toa(0, output + offset);
            offset += HELLO_EXT_SZ_SZ;
        }
#endif

        if (offset > OPAQUE16_LEN || msgType != server_hello)
 8008f64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d801      	bhi.n	8008f70 <TLSX_WriteResponse+0x62>
 8008f6c:	2e02      	cmp	r6, #2
 8008f6e:	d004      	beq.n	8008f7a <TLSX_WriteResponse+0x6c>
            c16toa(offset - OPAQUE16_LEN, output); /* extensions length */
 8008f70:	3b02      	subs	r3, #2
    c[0] = (byte)((wc_u16 >> 8) & 0xff);
 8008f72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008f76:	702a      	strb	r2, [r5, #0]
    c[1] =  (byte)(wc_u16       & 0xff);
 8008f78:	706b      	strb	r3, [r5, #1]
    }

    if (pOffset)
 8008f7a:	b144      	cbz	r4, 8008f8e <TLSX_WriteResponse+0x80>
        *pOffset += offset;
 8008f7c:	8823      	ldrh	r3, [r4, #0]
 8008f7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8008f82:	4413      	add	r3, r2
 8008f84:	8023      	strh	r3, [r4, #0]

    return ret;
 8008f86:	2000      	movs	r0, #0
}
 8008f88:	b006      	add	sp, #24
 8008f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ret;
 8008f8e:	4620      	mov	r0, r4
 8008f90:	e7fa      	b.n	8008f88 <TLSX_WriteResponse+0x7a>
	...

08008f94 <TLSX_Parse>:
#endif

/** Parses a buffer of TLS extensions. */
int TLSX_Parse(WOLFSSL* ssl, const byte* input, word16 length, byte msgType,
                                                                 Suites *suites)
{
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	b08b      	sub	sp, #44	; 0x2c
    int ret = 0;
    word16 offset = 0;
    byte isRequest = (msgType == client_hello ||
 8008f9a:	2b01      	cmp	r3, #1
{
 8008f9c:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8008fa0:	9202      	str	r2, [sp, #8]
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	4688      	mov	r8, r1
 8008fa6:	4699      	mov	r9, r3
    byte isRequest = (msgType == client_hello ||
 8008fa8:	d024      	beq.n	8008ff4 <TLSX_Parse+0x60>
 8008faa:	f1a3 020d 	sub.w	r2, r3, #13
 8008fae:	f1d2 0b00 	rsbs	fp, r2, #0
 8008fb2:	eb4b 0b02 	adc.w	fp, fp, r2
 8008fb6:	fa5f f38b 	uxtb.w	r3, fp
 8008fba:	9303      	str	r3, [sp, #12]
#if defined(WOLFSSL_TLS13) && (defined(HAVE_SESSION_TICKET) || !defined(NO_PSK))
    int pskDone = 0;
#endif
    byte seenType[SEMAPHORE_SIZE];  /* Seen known extensions. */

    if (!ssl || !input || (isRequest && !suites))
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	f000 80ed 	beq.w	800919c <TLSX_Parse+0x208>
 8008fc2:	f1b8 0f00 	cmp.w	r8, #0
 8008fc6:	f000 80e9 	beq.w	800919c <TLSX_Parse+0x208>
 8008fca:	f1bb 0f00 	cmp.w	fp, #0
 8008fce:	d003      	beq.n	8008fd8 <TLSX_Parse+0x44>
 8008fd0:	f1ba 0f00 	cmp.w	sl, #0
 8008fd4:	f000 80e2 	beq.w	800919c <TLSX_Parse+0x208>
        return BAD_FUNC_ARG;

    /* No known extensions seen yet. */
    XMEMSET(seenType, 0, sizeof(seenType));
 8008fd8:	2209      	movs	r2, #9
 8008fda:	2100      	movs	r1, #0
 8008fdc:	a807      	add	r0, sp, #28
                        return EXT_NOT_ALLOWED;
                }
                else
#endif
                {
                    if (msgType != client_hello &&
 8008fde:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
    XMEMSET(seenType, 0, sizeof(seenType));
 8008fe2:	f014 fd07 	bl	801d9f4 <memset>
                    if (msgType != client_hello &&
 8008fe6:	b2ff      	uxtb	r7, r7
    word16 offset = 0;
 8008fe8:	2300      	movs	r3, #0
    while (ret == 0 && offset < length) {
 8008fea:	9a02      	ldr	r2, [sp, #8]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d803      	bhi.n	8008ff8 <TLSX_Parse+0x64>
#endif

    if (ret == 0)
        ret = SNI_VERIFY_PARSE(ssl, isRequest);
    if (ret == 0)
        ret = TCA_VERIFY_PARSE(ssl, isRequest);
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e006      	b.n	8009002 <TLSX_Parse+0x6e>
    byte isRequest = (msgType == client_hello ||
 8008ff4:	469b      	mov	fp, r3
 8008ff6:	e7de      	b.n	8008fb6 <TLSX_Parse+0x22>
        if (length - offset < HELLO_EXT_TYPE_SZ + OPAQUE16_LEN)
 8008ff8:	9a02      	ldr	r2, [sp, #8]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	2a03      	cmp	r2, #3
 8008ffe:	dc03      	bgt.n	8009008 <TLSX_Parse+0x74>
            return BUFFER_ERROR;
 8009000:	4869      	ldr	r0, [pc, #420]	; (80091a8 <TLSX_Parse+0x214>)

    return ret;
}
 8009002:	b00b      	add	sp, #44	; 0x2c
 8009004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        offset += HELLO_EXT_TYPE_SZ;
 8009008:	1c99      	adds	r1, r3, #2
 800900a:	f838 2003 	ldrh.w	r2, [r8, r3]
        ato16(input + offset, &size);
 800900e:	b289      	uxth	r1, r1
 8009010:	ba52      	rev16	r2, r2
 8009012:	f838 4001 	ldrh.w	r4, [r8, r1]
 8009016:	b292      	uxth	r2, r2
    *wc_u16 = (word16) ((c[0] << 8) | (c[1]));
 8009018:	ba64      	rev16	r4, r4
        offset += OPAQUE16_LEN;
 800901a:	3304      	adds	r3, #4
        if ((type <= 62) || (type == TLSX_RENEGOTIATION_INFO)
 800901c:	2a3e      	cmp	r2, #62	; 0x3e
 800901e:	b2a4      	uxth	r4, r4
        offset += OPAQUE16_LEN;
 8009020:	b29d      	uxth	r5, r3
        if ((type <= 62) || (type == TLSX_RENEGOTIATION_INFO)
 8009022:	d92d      	bls.n	8009080 <TLSX_Parse+0xec>
 8009024:	f64f 7301 	movw	r3, #65281	; 0xff01
 8009028:	429a      	cmp	r2, r3
 800902a:	d114      	bne.n	8009056 <TLSX_Parse+0xc2>
            return 63;
 800902c:	233f      	movs	r3, #63	; 0x3f
            if (IS_OFF(seenType, TLSX_ToSemaphore(type))) {
 800902e:	a90a      	add	r1, sp, #40	; 0x28
 8009030:	eb01 00d3 	add.w	r0, r1, r3, lsr #3
 8009034:	f04f 0c01 	mov.w	ip, #1
 8009038:	f810 1c0c 	ldrb.w	r1, [r0, #-12]
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	fa0c f303 	lsl.w	r3, ip, r3
 8009044:	420b      	tst	r3, r1
 8009046:	fa5f fc83 	uxtb.w	ip, r3
 800904a:	f040 80aa 	bne.w	80091a2 <TLSX_Parse+0x20e>
                TURN_ON(seenType, TLSX_ToSemaphore(type));
 800904e:	ea41 010c 	orr.w	r1, r1, ip
 8009052:	f800 1c0c 	strb.w	r1, [r0, #-12]
        if (length - offset < size)
 8009056:	9b02      	ldr	r3, [sp, #8]
 8009058:	1b5b      	subs	r3, r3, r5
 800905a:	42a3      	cmp	r3, r4
 800905c:	dbd0      	blt.n	8009000 <TLSX_Parse+0x6c>
        switch (type) {
 800905e:	2a11      	cmp	r2, #17
 8009060:	d810      	bhi.n	8009084 <TLSX_Parse+0xf0>
 8009062:	b1aa      	cbz	r2, 8009090 <TLSX_Parse+0xfc>
 8009064:	3a01      	subs	r2, #1
 8009066:	2a10      	cmp	r2, #16
 8009068:	d812      	bhi.n	8009090 <TLSX_Parse+0xfc>
 800906a:	e8df f002 	tbb	[pc, r2]
 800906e:	1114      	.short	0x1114
 8009070:	11141814 	.word	0x11141814
 8009074:	1c111111 	.word	0x1c111111
 8009078:	1149112c 	.word	0x1149112c
 800907c:	1411      	.short	0x1411
 800907e:	14          	.byte	0x14
 800907f:	00          	.byte	0x00
 8009080:	4613      	mov	r3, r2
 8009082:	e7d4      	b.n	800902e <TLSX_Parse+0x9a>
 8009084:	2a23      	cmp	r2, #35	; 0x23
 8009086:	d006      	beq.n	8009096 <TLSX_Parse+0x102>
 8009088:	f64f 7301 	movw	r3, #65281	; 0xff01
 800908c:	429a      	cmp	r2, r3
 800908e:	d002      	beq.n	8009096 <TLSX_Parse+0x102>
        offset += size;
 8009090:	192b      	adds	r3, r5, r4
 8009092:	b29b      	uxth	r3, r3
 8009094:	e7a9      	b.n	8008fea <TLSX_Parse+0x56>
                    if (msgType != client_hello &&
 8009096:	2f01      	cmp	r7, #1
 8009098:	d9fa      	bls.n	8009090 <TLSX_Parse+0xfc>
                        return EXT_NOT_ALLOWED;
 800909a:	4844      	ldr	r0, [pc, #272]	; (80091ac <TLSX_Parse+0x218>)
 800909c:	e7b1      	b.n	8009002 <TLSX_Parse+0x6e>
                if (msgType != client_hello)
 800909e:	f1b9 0f01 	cmp.w	r9, #1
 80090a2:	d0f5      	beq.n	8009090 <TLSX_Parse+0xfc>
 80090a4:	e7f9      	b.n	800909a <TLSX_Parse+0x106>
                    if (msgType != client_hello) {
 80090a6:	f1b9 0f01 	cmp.w	r9, #1
 80090aa:	d1f6      	bne.n	800909a <TLSX_Parse+0x106>
                ret = EC_PARSE(ssl, input + offset, size, isRequest,
 80090ac:	f506 7330 	add.w	r3, r6, #704	; 0x2c0
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	4622      	mov	r2, r4
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	eb08 0105 	add.w	r1, r8, r5
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff fd62 	bl	8008b84 <TLSX_SupportedCurve_Parse>
    while (ret == 0 && offset < length) {
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d0e5      	beq.n	8009090 <TLSX_Parse+0xfc>
 80090c4:	e79d      	b.n	8009002 <TLSX_Parse+0x6e>
                if (msgType != client_hello &&
 80090c6:	2f01      	cmp	r7, #1
 80090c8:	d8e7      	bhi.n	800909a <TLSX_Parse+0x106>
    if (ENUM_LEN > length || length != (word16)ENUM_LEN + input[0])
 80090ca:	2c00      	cmp	r4, #0
 80090cc:	d098      	beq.n	8009000 <TLSX_Parse+0x6c>
 80090ce:	f818 3005 	ldrb.w	r3, [r8, r5]
 80090d2:	3301      	adds	r3, #1
 80090d4:	429c      	cmp	r4, r3
 80090d6:	d193      	bne.n	8009000 <TLSX_Parse+0x6c>
        offset += size;
 80090d8:	192b      	adds	r3, r5, r4
 80090da:	b29b      	uxth	r3, r3
    if (isRequest) {
 80090dc:	f1bb 0f00 	cmp.w	fp, #0
 80090e0:	d083      	beq.n	8008fea <TLSX_Parse+0x56>
        ret = TLSX_UsePointFormat(&ssl->extensions, WOLFSSL_EC_PF_UNCOMPRESSED,
 80090e2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	2100      	movs	r1, #0
 80090e8:	f506 7030 	add.w	r0, r6, #704	; 0x2c0
 80090ec:	f7ff fd7a 	bl	8008be4 <TLSX_UsePointFormat>
        if (ret != WOLFSSL_SUCCESS)
 80090f0:	2801      	cmp	r0, #1
 80090f2:	d1e5      	bne.n	80090c0 <TLSX_Parse+0x12c>
        TLSX_SetResponse(ssl, TLSX_EC_POINT_FORMATS);
 80090f4:	210b      	movs	r1, #11
 80090f6:	4630      	mov	r0, r6
 80090f8:	f7ff fc06 	bl	8008908 <TLSX_SetResponse>
    while (ret == 0 && offset < length) {
 80090fc:	9b04      	ldr	r3, [sp, #16]
 80090fe:	e774      	b.n	8008fea <TLSX_Parse+0x56>
                if (!IsAtLeastTLSv1_2(ssl))
 8009100:	4630      	mov	r0, r6
 8009102:	f7f7 fc37 	bl	8000974 <IsAtLeastTLSv1_2>
 8009106:	2800      	cmp	r0, #0
 8009108:	d0c2      	beq.n	8009090 <TLSX_Parse+0xfc>
                    if (msgType != client_hello)
 800910a:	f1b9 0f01 	cmp.w	r9, #1
 800910e:	d1c4      	bne.n	800909a <TLSX_Parse+0x106>
                ret = SA_PARSE(ssl, input + offset, size, isRequest, suites);
 8009110:	eb08 0105 	add.w	r1, r8, r5
    if (!isRequest)
 8009114:	f1bb 0f00 	cmp.w	fp, #0
 8009118:	f43f af72 	beq.w	8009000 <TLSX_Parse+0x6c>
    if (length < OPAQUE16_LEN + OPAQUE16_LEN || (length & 1) != 0)
 800911c:	2c03      	cmp	r4, #3
 800911e:	f67f af6f 	bls.w	8009000 <TLSX_Parse+0x6c>
 8009122:	07e3      	lsls	r3, r4, #31
 8009124:	f53f af6c 	bmi.w	8009000 <TLSX_Parse+0x6c>
 8009128:	f838 2005 	ldrh.w	r2, [r8, r5]
 800912c:	ba52      	rev16	r2, r2
 800912e:	b293      	uxth	r3, r2
    if (length != OPAQUE16_LEN + len)
 8009130:	1c98      	adds	r0, r3, #2
 8009132:	4284      	cmp	r4, r0
    input += OPAQUE16_LEN;
 8009134:	f101 0102 	add.w	r1, r1, #2
    if (length != OPAQUE16_LEN + len)
 8009138:	f47f af62 	bne.w	8009000 <TLSX_Parse+0x6c>
    if (suites->hashSigAlgoSz % 2 != 0)
 800913c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8009140:	07c0      	lsls	r0, r0, #31
 8009142:	f53f af5d 	bmi.w	8009000 <TLSX_Parse+0x6c>
    if (suites->hashSigAlgoSz > WOLFSSL_MAX_SIGALGO) {
 8009146:	2b26      	cmp	r3, #38	; 0x26
        suites->hashSigAlgoSz = WOLFSSL_MAX_SIGALGO;
 8009148:	bf88      	it	hi
 800914a:	2226      	movhi	r2, #38	; 0x26
 800914c:	f8aa 2002 	strh.w	r2, [sl, #2]
    XMEMCPY(suites->hashSigAlgo, input, suites->hashSigAlgoSz);
 8009150:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009154:	9305      	str	r3, [sp, #20]
 8009156:	f50a 7098 	add.w	r0, sl, #304	; 0x130
 800915a:	9104      	str	r1, [sp, #16]
 800915c:	f014 fc22 	bl	801d9a4 <memcpy>
    if ((length & 1) == 1)
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	f013 0201 	ands.w	r2, r3, #1
 8009166:	f47f af4b 	bne.w	8009000 <TLSX_Parse+0x6c>
    for (i = 0; i < length; i += 2) {
 800916a:	9904      	ldr	r1, [sp, #16]
    ssl->pssAlgo = 0;
 800916c:	f8a6 2288 	strh.w	r2, [r6, #648]	; 0x288
    for (i = 0; i < length; i += 2) {
 8009170:	429a      	cmp	r2, r3
 8009172:	d28d      	bcs.n	8009090 <TLSX_Parse+0xfc>
        if (input[i] == rsa_pss_sa_algo && input[i + 1] <= sha512_mac)
 8009174:	5c88      	ldrb	r0, [r1, r2]
 8009176:	2808      	cmp	r0, #8
 8009178:	d10d      	bne.n	8009196 <TLSX_Parse+0x202>
 800917a:	1888      	adds	r0, r1, r2
 800917c:	7840      	ldrb	r0, [r0, #1]
 800917e:	2806      	cmp	r0, #6
 8009180:	d809      	bhi.n	8009196 <TLSX_Parse+0x202>
            ssl->pssAlgo |= 1 << input[i + 1];
 8009182:	f04f 0c01 	mov.w	ip, #1
 8009186:	fa0c f000 	lsl.w	r0, ip, r0
 800918a:	f8b6 c288 	ldrh.w	ip, [r6, #648]	; 0x288
 800918e:	ea40 000c 	orr.w	r0, r0, ip
 8009192:	f8a6 0288 	strh.w	r0, [r6, #648]	; 0x288
    for (i = 0; i < length; i += 2) {
 8009196:	3202      	adds	r2, #2
 8009198:	b292      	uxth	r2, r2
 800919a:	e7e9      	b.n	8009170 <TLSX_Parse+0x1dc>
        return BAD_FUNC_ARG;
 800919c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80091a0:	e72f      	b.n	8009002 <TLSX_Parse+0x6e>
                return DUPLICATE_TLS_EXT_E;
 80091a2:	f46f 70e4 	mvn.w	r0, #456	; 0x1c8
 80091a6:	e72c      	b.n	8009002 <TLSX_Parse+0x6e>
 80091a8:	fffffeb8 	.word	0xfffffeb8
 80091ac:	fffffe58 	.word	0xfffffe58

080091b0 <wolfTLSv1_2_client_method_ex>:
    WOLFSSL_METHOD* wolfTLSv1_2_client_method(void)
    {
        return wolfTLSv1_2_client_method_ex(NULL);
    }
    WOLFSSL_METHOD* wolfTLSv1_2_client_method_ex(void* heap)
    {
 80091b0:	b513      	push	{r0, r1, r4, lr}
        WOLFSSL_METHOD* method =
                              (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
 80091b2:	2004      	movs	r0, #4
 80091b4:	f014 fbd6 	bl	801d964 <malloc>
                                                     heap, DYNAMIC_TYPE_METHOD);
        (void)heap;
        WOLFSSL_ENTER("TLSv1_2_client_method_ex");
        if (method)
 80091b8:	4604      	mov	r4, r0
 80091ba:	b138      	cbz	r0, 80091cc <wolfTLSv1_2_client_method_ex+0x1c>
    return pv;
 80091bc:	2303      	movs	r3, #3
 80091be:	f88d 3004 	strb.w	r3, [sp, #4]
 80091c2:	f88d 3005 	strb.w	r3, [sp, #5]
            InitSSL_Method(method, MakeTLSv1_2());
 80091c6:	9901      	ldr	r1, [sp, #4]
 80091c8:	f7f7 fbff 	bl	80009ca <InitSSL_Method>
        return method;
    }
 80091cc:	4620      	mov	r0, r4
 80091ce:	b002      	add	sp, #8
 80091d0:	bd10      	pop	{r4, pc}

080091d2 <wolfTLSv1_2_client_method>:
        return wolfTLSv1_2_client_method_ex(NULL);
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7ff bfec 	b.w	80091b0 <wolfTLSv1_2_client_method_ex>

080091d8 <wolfSSL_CTX_SetIORecv>:



void wolfSSL_CTX_SetIORecv(WOLFSSL_CTX *ctx, CallbackIORecv CBIORecv)
{
    if (ctx) {
 80091d8:	b100      	cbz	r0, 80091dc <wolfSSL_CTX_SetIORecv+0x4>
        ctx->CBIORecv = CBIORecv;
 80091da:	6401      	str	r1, [r0, #64]	; 0x40
    #ifdef OPENSSL_EXTRA
        ctx->cbioFlag |= WOLFSSL_CBIO_RECV;
    #endif
    }
}
 80091dc:	4770      	bx	lr

080091de <wolfSSL_CTX_SetIOSend>:


void wolfSSL_CTX_SetIOSend(WOLFSSL_CTX *ctx, CallbackIOSend CBIOSend)
{
    if (ctx) {
 80091de:	b100      	cbz	r0, 80091e2 <wolfSSL_CTX_SetIOSend+0x4>
        ctx->CBIOSend = CBIOSend;
 80091e0:	6441      	str	r1, [r0, #68]	; 0x44
    #ifdef OPENSSL_EXTRA
        ctx->cbioFlag |= WOLFSSL_CBIO_SEND;
    #endif
    }
}
 80091e2:	4770      	bx	lr

080091e4 <ByteReverseWord32>:
}
 80091e4:	ba00      	rev	r0, r0
 80091e6:	4770      	bx	lr

080091e8 <xorbufout>:
{
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (((wc_ptr_t)o) % WOLFSSL_WORD_SIZE ==
 80091ea:	ea80 0401 	eor.w	r4, r0, r1
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 80091ee:	ea82 0501 	eor.w	r5, r2, r1
 80091f2:	432c      	orrs	r4, r5
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE &&
 80091f4:	f014 0403 	ands.w	r4, r4, #3
 80091f8:	d10d      	bne.n	8009216 <xorbufout+0x2e>
        while (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 80091fa:	078d      	lsls	r5, r1, #30
 80091fc:	d000      	beq.n	8009200 <xorbufout+0x18>
 80091fe:	b973      	cbnz	r3, 800921e <xorbufout+0x36>
        XorWordsOut( &tpo.wp, &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
 8009200:	089d      	lsrs	r5, r3, #2
    for (i = 0; i < n; i++)
 8009202:	42a5      	cmp	r5, r4
 8009204:	d114      	bne.n	8009230 <xorbufout+0x48>
 8009206:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800920a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800920e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
        count %= WOLFSSL_WORD_SIZE;
 8009212:	f003 0303 	and.w	r3, r3, #3
    for (i = 0; i < count; i++)
 8009216:	2400      	movs	r4, #0
 8009218:	42a3      	cmp	r3, r4
 800921a:	d112      	bne.n	8009242 <xorbufout+0x5a>
}
 800921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(o++) = (byte)(*(b++) ^ *(m++));
 800921e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009222:	f812 6b01 	ldrb.w	r6, [r2], #1
 8009226:	4075      	eors	r5, r6
 8009228:	f800 5b01 	strb.w	r5, [r0], #1
            count--;
 800922c:	3b01      	subs	r3, #1
 800922e:	e7e4      	b.n	80091fa <xorbufout+0x12>
        *((*r)++) = *((*a)++) ^ *((*b)++);
 8009230:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 8009234:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8009238:	407e      	eors	r6, r7
 800923a:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
    for (i = 0; i < n; i++)
 800923e:	3401      	adds	r4, #1
 8009240:	e7df      	b.n	8009202 <xorbufout+0x1a>
        o[i] = (byte)(b[i] ^ m[i]);
 8009242:	5d0d      	ldrb	r5, [r1, r4]
 8009244:	5d16      	ldrb	r6, [r2, r4]
 8009246:	4075      	eors	r5, r6
 8009248:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < count; i++)
 800924a:	3401      	adds	r4, #1
 800924c:	e7e4      	b.n	8009218 <xorbufout+0x30>

0800924e <xorbuf>:
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 800924e:	ea81 0300 	eor.w	r3, r1, r0
 8009252:	079b      	lsls	r3, r3, #30
{
 8009254:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8009256:	d10c      	bne.n	8009272 <xorbuf+0x24>
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8009258:	f000 0403 	and.w	r4, r0, #3
 800925c:	b104      	cbz	r4, 8009260 <xorbuf+0x12>
 800925e:	b96a      	cbnz	r2, 800927c <xorbuf+0x2e>
    for (i = 0; i < n; i++)
 8009260:	f022 0503 	bic.w	r5, r2, #3
 8009264:	194e      	adds	r6, r1, r5
 8009266:	4603      	mov	r3, r0
 8009268:	42b1      	cmp	r1, r6
 800926a:	d110      	bne.n	800928e <xorbuf+0x40>
 800926c:	4428      	add	r0, r5
        count %= WOLFSSL_WORD_SIZE;
 800926e:	f002 0203 	and.w	r2, r2, #3
    for (i = 0; i < count; i++)
 8009272:	3901      	subs	r1, #1
 8009274:	4402      	add	r2, r0
 8009276:	4290      	cmp	r0, r2
 8009278:	d111      	bne.n	800929e <xorbuf+0x50>
}
 800927a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(b++) ^= *(m++);
 800927c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009280:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009284:	406b      	eors	r3, r5
 8009286:	f800 3c01 	strb.w	r3, [r0, #-1]
            count--;
 800928a:	3a01      	subs	r2, #1
 800928c:	e7e6      	b.n	800925c <xorbuf+0xe>
        *((*r)++) ^= *((*a)++);
 800928e:	f853 4b04 	ldr.w	r4, [r3], #4
 8009292:	f851 7b04 	ldr.w	r7, [r1], #4
 8009296:	407c      	eors	r4, r7
 8009298:	f843 4c04 	str.w	r4, [r3, #-4]
    for (i = 0; i < n; i++)
 800929c:	e7e4      	b.n	8009268 <xorbuf+0x1a>
        b[i] ^= m[i];
 800929e:	7803      	ldrb	r3, [r0, #0]
 80092a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092a4:	4063      	eors	r3, r4
 80092a6:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; i < count; i++)
 80092aa:	e7e4      	b.n	8009276 <xorbuf+0x28>

080092ac <IncrementGcmCounter>:
static WC_INLINE void IncrementGcmCounter(byte* inOutCtr)
{
    int i;

    /* in network byte order so start at end and work back */
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 80092ac:	f100 0210 	add.w	r2, r0, #16
 80092b0:	300c      	adds	r0, #12
        if (++inOutCtr[i])  /* we're done unless we overflow */
 80092b2:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80092b6:	3301      	adds	r3, #1
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	7013      	strb	r3, [r2, #0]
 80092bc:	b90b      	cbnz	r3, 80092c2 <IncrementGcmCounter+0x16>
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 80092be:	4282      	cmp	r2, r0
 80092c0:	d1f7      	bne.n	80092b2 <IncrementGcmCounter+0x6>
            return;
    }
}
 80092c2:	4770      	bx	lr

080092c4 <wc_AesEncrypt>:
{
 80092c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	460d      	mov	r5, r1
 80092ca:	4690      	mov	r8, r2
    if (aes == NULL) {
 80092cc:	4604      	mov	r4, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f000 872d 	beq.w	800a12e <wc_AesEncrypt+0xe6a>
    r = aes->rounds >> 1;
 80092d4:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
 80092d8:	087f      	lsrs	r7, r7, #1
    if (r > 7 || r == 0) {
 80092da:	1e7b      	subs	r3, r7, #1
 80092dc:	2b06      	cmp	r3, #6
 80092de:	f200 8729 	bhi.w	800a134 <wc_AesEncrypt+0xe70>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 80092e2:	2204      	movs	r2, #4
 80092e4:	4668      	mov	r0, sp
 80092e6:	f014 fb5d 	bl	801d9a4 <memcpy>
    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
 80092ea:	2204      	movs	r2, #4
 80092ec:	18a9      	adds	r1, r5, r2
 80092ee:	eb0d 0002 	add.w	r0, sp, r2
 80092f2:	f014 fb57 	bl	801d9a4 <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 80092f6:	f105 0108 	add.w	r1, r5, #8
 80092fa:	2204      	movs	r2, #4
 80092fc:	a802      	add	r0, sp, #8
 80092fe:	f014 fb51 	bl	801d9a4 <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 8009302:	f105 010c 	add.w	r1, r5, #12
 8009306:	2204      	movs	r2, #4
 8009308:	a803      	add	r0, sp, #12
 800930a:	f014 fb4b 	bl	801d9a4 <memcpy>
    s0 = ByteReverseWord32(s0);
 800930e:	9800      	ldr	r0, [sp, #0]
 8009310:	f7ff ff68 	bl	80091e4 <ByteReverseWord32>
 8009314:	4602      	mov	r2, r0
    s1 = ByteReverseWord32(s1);
 8009316:	9801      	ldr	r0, [sp, #4]
 8009318:	f7ff ff64 	bl	80091e4 <ByteReverseWord32>
 800931c:	4603      	mov	r3, r0
    s2 = ByteReverseWord32(s2);
 800931e:	9802      	ldr	r0, [sp, #8]
 8009320:	f7ff ff60 	bl	80091e4 <ByteReverseWord32>
 8009324:	4681      	mov	r9, r0
    s3 = ByteReverseWord32(s3);
 8009326:	9803      	ldr	r0, [sp, #12]
 8009328:	f7ff ff5c 	bl	80091e4 <ByteReverseWord32>
    s0 ^= rk[0];
 800932c:	6821      	ldr	r1, [r4, #0]
 800932e:	ea82 0e01 	eor.w	lr, r2, r1
    s1 ^= rk[1];
 8009332:	6862      	ldr	r2, [r4, #4]
 8009334:	ea83 0c02 	eor.w	ip, r3, r2
    s2 ^= rk[2];
 8009338:	68a3      	ldr	r3, [r4, #8]
 800933a:	ea89 0903 	eor.w	r9, r9, r3
    s3 ^= rk[3];
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	4058      	eors	r0, r3
                       ENC_ROUND_T_S( 0);
 8009342:	b2c2      	uxtb	r2, r0
 8009344:	4bf2      	ldr	r3, [pc, #968]	; (8009710 <wc_AesEncrypt+0x44c>)
 8009346:	ea4f 611e 	mov.w	r1, lr, lsr #24
 800934a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800934e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8009352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009356:	4055      	eors	r5, r2
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	4055      	eors	r5, r2
 800935c:	f3cc 4207 	ubfx	r2, ip, #16, #8
 8009360:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009364:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8009368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800936c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009370:	4055      	eors	r5, r2
 8009372:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8009376:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800937a:	ea4f 6619 	mov.w	r6, r9, lsr #24
 800937e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009382:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009386:	4055      	eors	r5, r2
 8009388:	fa5f f28e 	uxtb.w	r2, lr
 800938c:	f502 7240 	add.w	r2, r2, #768	; 0x300
    if (r > 5) {
 8009390:	2f05      	cmp	r7, #5
                       ENC_ROUND_T_S( 0);
 8009392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009396:	ea81 0102 	eor.w	r1, r1, r2
 800939a:	6962      	ldr	r2, [r4, #20]
 800939c:	ea81 0102 	eor.w	r1, r1, r2
 80093a0:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80093a4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80093a8:	fa5f f989 	uxtb.w	r9, r9
 80093ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093b0:	ea81 0102 	eor.w	r1, r1, r2
 80093b4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80093b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80093bc:	f509 7940 	add.w	r9, r9, #768	; 0x300
 80093c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093c4:	ea81 0102 	eor.w	r1, r1, r2
 80093c8:	fa5f f28c 	uxtb.w	r2, ip
 80093cc:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80093d0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80093d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093d8:	ea86 0602 	eor.w	r6, r6, r2
 80093dc:	69a2      	ldr	r2, [r4, #24]
 80093de:	ea86 0602 	eor.w	r6, r6, r2
 80093e2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80093e6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80093ea:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80093ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093f2:	ea86 0602 	eor.w	r6, r6, r2
 80093f6:	f3ce 2207 	ubfx	r2, lr, #8, #8
 80093fa:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80093fe:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8009402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009406:	ea86 0602 	eor.w	r6, r6, r2
 800940a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800940e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8009412:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8009416:	ea82 0900 	eor.w	r9, r2, r0
 800941a:	69e2      	ldr	r2, [r4, #28]
 800941c:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8009420:	ea89 0902 	eor.w	r9, r9, r2
 8009424:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8009428:	ea89 0902 	eor.w	r9, r9, r2
 800942c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8009430:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
 8009434:	fa5f f089 	uxtb.w	r0, r9
 8009438:	ea4f 6215 	mov.w	r2, r5, lsr #24
 800943c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009444:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009448:	ea82 0c00 	eor.w	ip, r2, r0
 800944c:	6a22      	ldr	r2, [r4, #32]
 800944e:	ea8c 0c02 	eor.w	ip, ip, r2
 8009452:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8009456:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800945a:	ea4f 6011 	mov.w	r0, r1, lsr #24
 800945e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009462:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009466:	ea8c 0c02 	eor.w	ip, ip, r2
 800946a:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800946e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009472:	fa5f fe81 	uxtb.w	lr, r1
 8009476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800947a:	ea8c 0c02 	eor.w	ip, ip, r2
 800947e:	b2ea      	uxtb	r2, r5
 8009480:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009484:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8009488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800948c:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8009490:	ea80 0002 	eor.w	r0, r0, r2
 8009494:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009496:	ea80 0002 	eor.w	r0, r0, r2
 800949a:	f3c6 4207 	ubfx	r2, r6, #16, #8
 800949e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80094a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80094a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094aa:	ea80 0002 	eor.w	r0, r0, r2
 80094ae:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80094b2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80094b6:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80094ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094be:	ea80 0002 	eor.w	r0, r0, r2
 80094c2:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80094c6:	b2f6      	uxtb	r6, r6
 80094c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094cc:	ea82 0e0e 	eor.w	lr, r2, lr
 80094d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80094d2:	ea8e 0e02 	eor.w	lr, lr, r2
 80094d6:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80094da:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80094de:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80094e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094e6:	ea8e 0e02 	eor.w	lr, lr, r2
 80094ea:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80094ee:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80094f2:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80094f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094fa:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80094fe:	ea8e 0e02 	eor.w	lr, lr, r2
 8009502:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009506:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800950a:	ea82 0906 	eor.w	r9, r2, r6
 800950e:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009512:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009514:	ea89 0902 	eor.w	r9, r9, r2
 8009518:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800951c:	ea89 0902 	eor.w	r9, r9, r2
 8009520:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8009524:	ea89 0902 	eor.w	r9, r9, r2
 8009528:	fa5f f289 	uxtb.w	r2, r9
 800952c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8009530:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009534:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8009538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800953c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8009540:	ea85 0501 	eor.w	r5, r5, r1
 8009544:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009548:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800954a:	ea85 0501 	eor.w	r5, r5, r1
 800954e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009552:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8009556:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800955a:	ea85 0501 	eor.w	r5, r5, r1
 800955e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009562:	ea85 0502 	eor.w	r5, r5, r2
 8009566:	fa5f f28c 	uxtb.w	r2, ip
 800956a:	ea4f 6110 	mov.w	r1, r0, lsr #24
 800956e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009572:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800957a:	ea81 0102 	eor.w	r1, r1, r2
 800957e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009580:	ea81 0102 	eor.w	r1, r1, r2
 8009584:	f3ce 4207 	ubfx	r2, lr, #16, #8
 8009588:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800958c:	ea4f 661e 	mov.w	r6, lr, lsr #24
 8009590:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009594:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009598:	ea81 0102 	eor.w	r1, r1, r2
 800959c:	f3c9 2207 	ubfx	r2, r9, #8, #8
 80095a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80095a4:	fa5f fe8e 	uxtb.w	lr, lr
 80095a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095ac:	ea81 0102 	eor.w	r1, r1, r2
 80095b0:	b2c2      	uxtb	r2, r0
 80095b2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80095b6:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80095ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095be:	ea86 0602 	eor.w	r6, r6, r2
 80095c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80095c4:	ea86 0602 	eor.w	r6, r6, r2
 80095c8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80095cc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80095d0:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80095d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095d8:	ea86 0602 	eor.w	r6, r6, r2
 80095dc:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80095e0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80095e4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80095e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095ec:	ea86 0602 	eor.w	r6, r6, r2
 80095f0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80095f4:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80095f8:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 80095fc:	ea82 0909 	eor.w	r9, r2, r9
 8009600:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009602:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009606:	ea89 0902 	eor.w	r9, r9, r2
 800960a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800960e:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8009612:	ea89 0902 	eor.w	r9, r9, r2
 8009616:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800961a:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
 800961e:	fa5f f289 	uxtb.w	r2, r9
 8009622:	ea4f 6015 	mov.w	r0, r5, lsr #24
 8009626:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800962a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800962e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009632:	ea80 0c02 	eor.w	ip, r0, r2
 8009636:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800963a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800963c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009640:	ea8c 0c00 	eor.w	ip, ip, r0
 8009644:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009648:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800964c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009650:	ea8c 0c00 	eor.w	ip, ip, r0
 8009654:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009658:	ea8c 0c02 	eor.w	ip, ip, r2
 800965c:	b2ea      	uxtb	r2, r5
 800965e:	ea4f 6011 	mov.w	r0, r1, lsr #24
 8009662:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009666:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800966a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800966e:	ea80 0002 	eor.w	r0, r0, r2
 8009672:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009674:	ea80 0002 	eor.w	r0, r0, r2
 8009678:	f3c6 4207 	ubfx	r2, r6, #16, #8
 800967c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009680:	fa5f fe81 	uxtb.w	lr, r1
 8009684:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009688:	ea80 0002 	eor.w	r0, r0, r2
 800968c:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8009690:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009694:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8009698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800969c:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80096a0:	ea80 0002 	eor.w	r0, r0, r2
 80096a4:	ea4f 6216 	mov.w	r2, r6, lsr #24
 80096a8:	b2f6      	uxtb	r6, r6
 80096aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096ae:	ea82 0e0e 	eor.w	lr, r2, lr
 80096b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80096b4:	ea8e 0e02 	eor.w	lr, lr, r2
 80096b8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80096bc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80096c0:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80096c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096c8:	ea8e 0e02 	eor.w	lr, lr, r2
 80096cc:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80096d0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80096d4:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80096d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096dc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80096e0:	ea8e 0e02 	eor.w	lr, lr, r2
 80096e4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80096e8:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80096ec:	ea82 0906 	eor.w	r9, r2, r6
 80096f0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80096f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80096f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80096fa:	ea89 0902 	eor.w	r9, r9, r2
 80096fe:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8009702:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8009706:	ea89 0902 	eor.w	r9, r9, r2
 800970a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800970e:	e001      	b.n	8009714 <wc_AesEncrypt+0x450>
 8009710:	08020eb0 	.word	0x08020eb0
 8009714:	ea89 0902 	eor.w	r9, r9, r2
 8009718:	fa5f f289 	uxtb.w	r2, r9
 800971c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8009720:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009724:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8009728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800972c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8009730:	ea85 0501 	eor.w	r5, r5, r1
 8009734:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009738:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800973a:	ea85 0501 	eor.w	r5, r5, r1
 800973e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009742:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8009746:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800974a:	ea85 0501 	eor.w	r5, r5, r1
 800974e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009752:	ea85 0502 	eor.w	r5, r5, r2
 8009756:	fa5f f28c 	uxtb.w	r2, ip
 800975a:	ea4f 6110 	mov.w	r1, r0, lsr #24
 800975e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009762:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800976a:	ea81 0102 	eor.w	r1, r1, r2
 800976e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009770:	ea81 0102 	eor.w	r1, r1, r2
 8009774:	f3ce 4207 	ubfx	r2, lr, #16, #8
 8009778:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800977c:	ea4f 661e 	mov.w	r6, lr, lsr #24
 8009780:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009784:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009788:	ea81 0102 	eor.w	r1, r1, r2
 800978c:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8009790:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009794:	fa5f fe8e 	uxtb.w	lr, lr
 8009798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800979c:	ea81 0102 	eor.w	r1, r1, r2
 80097a0:	b2c2      	uxtb	r2, r0
 80097a2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80097a6:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80097aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097ae:	ea86 0602 	eor.w	r6, r6, r2
 80097b2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80097b4:	ea86 0602 	eor.w	r6, r6, r2
 80097b8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80097bc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80097c0:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80097c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097c8:	ea86 0602 	eor.w	r6, r6, r2
 80097cc:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80097d0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80097d4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80097d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097dc:	ea86 0602 	eor.w	r6, r6, r2
 80097e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80097e4:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80097e8:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 80097ec:	ea82 0909 	eor.w	r9, r2, r9
 80097f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80097f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80097f6:	ea89 0902 	eor.w	r9, r9, r2
 80097fa:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80097fe:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8009802:	ea89 0902 	eor.w	r9, r9, r2
 8009806:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800980a:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
 800980e:	fa5f f289 	uxtb.w	r2, r9
 8009812:	ea4f 6015 	mov.w	r0, r5, lsr #24
 8009816:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800981a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800981e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009822:	ea80 0c02 	eor.w	ip, r0, r2
 8009826:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800982a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800982c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009830:	ea8c 0c00 	eor.w	ip, ip, r0
 8009834:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009838:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800983c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009840:	ea8c 0c00 	eor.w	ip, ip, r0
 8009844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009848:	ea8c 0c02 	eor.w	ip, ip, r2
 800984c:	b2ea      	uxtb	r2, r5
 800984e:	ea4f 6011 	mov.w	r0, r1, lsr #24
 8009852:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009856:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800985a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800985e:	ea80 0002 	eor.w	r0, r0, r2
 8009862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009864:	ea80 0002 	eor.w	r0, r0, r2
 8009868:	f3c6 4207 	ubfx	r2, r6, #16, #8
 800986c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009870:	fa5f fe81 	uxtb.w	lr, r1
 8009874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009878:	ea80 0002 	eor.w	r0, r0, r2
 800987c:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8009880:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009884:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8009888:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800988c:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8009890:	ea80 0002 	eor.w	r0, r0, r2
 8009894:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8009898:	b2f6      	uxtb	r6, r6
 800989a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800989e:	ea82 0e0e 	eor.w	lr, r2, lr
 80098a2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80098a4:	ea8e 0e02 	eor.w	lr, lr, r2
 80098a8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80098ac:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80098b0:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80098b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098b8:	ea8e 0e02 	eor.w	lr, lr, r2
 80098bc:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80098c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80098c4:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80098c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098cc:	ea8e 0e02 	eor.w	lr, lr, r2
 80098d0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80098d4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80098d8:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80098dc:	ea82 0906 	eor.w	r9, r2, r6
 80098e0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80098e4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80098e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80098ea:	ea89 0902 	eor.w	r9, r9, r2
 80098ee:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80098f2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80098f6:	ea89 0902 	eor.w	r9, r9, r2
 80098fa:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80098fe:	ea89 0902 	eor.w	r9, r9, r2
 8009902:	fa5f f289 	uxtb.w	r2, r9
 8009906:	ea4f 611c 	mov.w	r1, ip, lsr #24
 800990a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800990e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8009912:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009916:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800991a:	ea85 0501 	eor.w	r5, r5, r1
 800991e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009922:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009924:	ea85 0501 	eor.w	r5, r5, r1
 8009928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800992c:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8009930:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009934:	ea85 0501 	eor.w	r5, r5, r1
 8009938:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800993c:	ea85 0502 	eor.w	r5, r5, r2
 8009940:	fa5f f28c 	uxtb.w	r2, ip
 8009944:	ea4f 6110 	mov.w	r1, r0, lsr #24
 8009948:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800994c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009950:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009954:	ea81 0102 	eor.w	r1, r1, r2
 8009958:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800995a:	ea81 0102 	eor.w	r1, r1, r2
 800995e:	f3ce 4207 	ubfx	r2, lr, #16, #8
 8009962:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009966:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800996a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800996e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009972:	ea81 0102 	eor.w	r1, r1, r2
 8009976:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800997a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800997e:	fa5f fe8e 	uxtb.w	lr, lr
 8009982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009986:	ea81 0102 	eor.w	r1, r1, r2
 800998a:	b2c2      	uxtb	r2, r0
 800998c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009990:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8009994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009998:	ea86 0602 	eor.w	r6, r6, r2
 800999c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800999e:	ea86 0602 	eor.w	r6, r6, r2
 80099a2:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80099a6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80099aa:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80099ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099b2:	ea86 0602 	eor.w	r6, r6, r2
 80099b6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80099ba:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80099be:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80099c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099c6:	ea86 0602 	eor.w	r6, r6, r2
 80099ca:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80099ce:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80099d2:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 80099d6:	ea82 0909 	eor.w	r9, r2, r9
 80099da:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80099dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80099e0:	ea89 0902 	eor.w	r9, r9, r2
 80099e4:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80099e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80099ec:	ea89 0902 	eor.w	r9, r9, r2
 80099f0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80099f4:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
 80099f8:	fa5f f289 	uxtb.w	r2, r9
 80099fc:	ea4f 6015 	mov.w	r0, r5, lsr #24
 8009a00:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009a04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009a08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a0c:	ea80 0e02 	eor.w	lr, r0, r2
 8009a10:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8009a14:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8009a18:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009a1c:	ea8e 0e00 	eor.w	lr, lr, r0
 8009a20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009a24:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009a28:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009a2c:	ea8e 0e00 	eor.w	lr, lr, r0
 8009a30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a34:	ea8e 0e02 	eor.w	lr, lr, r2
 8009a38:	b2ea      	uxtb	r2, r5
 8009a3a:	ea4f 6011 	mov.w	r0, r1, lsr #24
 8009a3e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009a42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a4a:	ea80 0002 	eor.w	r0, r0, r2
 8009a4e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8009a52:	ea80 0002 	eor.w	r0, r0, r2
 8009a56:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8009a5a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009a5e:	fa5f fc81 	uxtb.w	ip, r1
 8009a62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a66:	ea80 0002 	eor.w	r0, r0, r2
 8009a6a:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8009a6e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009a72:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8009a76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a7a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8009a7e:	ea80 0002 	eor.w	r0, r0, r2
 8009a82:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8009a86:	b2f6      	uxtb	r6, r6
 8009a88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a8c:	ea82 0c0c 	eor.w	ip, r2, ip
 8009a90:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009a94:	ea8c 0c02 	eor.w	ip, ip, r2
 8009a98:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8009a9c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009aa0:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009aa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aa8:	ea8c 0c02 	eor.w	ip, ip, r2
 8009aac:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8009ab0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009ab4:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8009ab8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009abc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009ac0:	ea8c 0c02 	eor.w	ip, ip, r2
 8009ac4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009ac8:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8009acc:	ea82 0906 	eor.w	r9, r2, r6
 8009ad0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009ad4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009ad8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8009adc:	ea89 0902 	eor.w	r9, r9, r2
 8009ae0:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8009ae4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8009ae8:	ea89 0902 	eor.w	r9, r9, r2
 8009aec:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8009af0:	ea89 0902 	eor.w	r9, r9, r2
 8009af4:	fa5f f289 	uxtb.w	r2, r9
 8009af8:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8009afc:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009b00:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009b04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b08:	ea82 0201 	eor.w	r2, r2, r1
 8009b0c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8009b10:	ea81 0102 	eor.w	r1, r1, r2
 8009b14:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8009b18:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009b1c:	ea4f 6510 	mov.w	r5, r0, lsr #24
 8009b20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b24:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8009b28:	ea81 0102 	eor.w	r1, r1, r2
 8009b2c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8009b30:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009b34:	ea4f 661c 	mov.w	r6, ip, lsr #24
 8009b38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b3c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009b40:	ea81 0102 	eor.w	r1, r1, r2
 8009b44:	fa5f f28e 	uxtb.w	r2, lr
 8009b48:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009b4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b50:	ea85 0502 	eor.w	r5, r5, r2
 8009b54:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009b58:	ea85 0502 	eor.w	r5, r5, r2
 8009b5c:	f3cc 4207 	ubfx	r2, ip, #16, #8
 8009b60:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009b64:	fa5f fc8c 	uxtb.w	ip, ip
 8009b68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b6c:	ea85 0502 	eor.w	r5, r5, r2
 8009b70:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8009b74:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009b78:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8009b7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b80:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8009b84:	ea85 0502 	eor.w	r5, r5, r2
 8009b88:	b2c2      	uxtb	r2, r0
 8009b8a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009b8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b96:	ea86 0602 	eor.w	r6, r6, r2
 8009b9a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8009b9e:	ea86 0602 	eor.w	r6, r6, r2
 8009ba2:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8009ba6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009baa:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bb2:	ea86 0602 	eor.w	r6, r6, r2
 8009bb6:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8009bba:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009bbe:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8009bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bc6:	ea86 0602 	eor.w	r6, r6, r2
 8009bca:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009bce:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8009bd2:	ea82 0c0c 	eor.w	ip, r2, ip
 8009bd6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009bda:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009bde:	ea8c 0c02 	eor.w	ip, ip, r2
 8009be2:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8009be6:	ea8c 0c02 	eor.w	ip, ip, r2
 8009bea:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8009bee:	ea8c 0c02 	eor.w	ip, ip, r2
    if (r > 5) {
 8009bf2:	f240 81e5 	bls.w	8009fc0 <wc_AesEncrypt+0xcfc>
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 8009bf6:	fa5f f08c 	uxtb.w	r0, ip
 8009bfa:	0e0a      	lsrs	r2, r1, #24
 8009bfc:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009c00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009c08:	ea82 0e00 	eor.w	lr, r2, r0
 8009c0c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009c10:	ea8e 0e02 	eor.w	lr, lr, r2
 8009c14:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8009c18:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009c1c:	b2c8      	uxtb	r0, r1
 8009c1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c22:	ea8e 0e02 	eor.w	lr, lr, r2
 8009c26:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009c2a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009c2e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009c3a:	ea8e 0e02 	eor.w	lr, lr, r2
 8009c3e:	0e2a      	lsrs	r2, r5, #24
        if (r > 6) {
 8009c40:	2f07      	cmp	r7, #7
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 8009c42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c46:	ea82 0900 	eor.w	r9, r2, r0
 8009c4a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8009c4e:	ea89 0902 	eor.w	r9, r9, r2
 8009c52:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8009c56:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009c5a:	b2e8      	uxtb	r0, r5
 8009c5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c60:	ea89 0902 	eor.w	r9, r9, r2
 8009c64:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8009c68:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009c6c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009c70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009c78:	ea89 0902 	eor.w	r9, r9, r2
 8009c7c:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8009c80:	b2f6      	uxtb	r6, r6
 8009c82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c86:	ea80 0002 	eor.w	r0, r0, r2
 8009c8a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8009c8e:	ea82 0200 	eor.w	r2, r2, r0
 8009c92:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8009c96:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009c9a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8009c9e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009ca2:	ea82 0200 	eor.w	r2, r2, r0
 8009ca6:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8009caa:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009cae:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8009cb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009cb6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009cba:	ea82 0200 	eor.w	r2, r2, r0
 8009cbe:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8009cc2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8009cc6:	ea80 0c06 	eor.w	ip, r0, r6
 8009cca:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8009cce:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8009cd2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8009cd6:	ea8c 0c00 	eor.w	ip, ip, r0
 8009cda:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8009cde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009ce2:	ea8c 0c00 	eor.w	ip, ip, r0
 8009ce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cea:	ea8c 0c00 	eor.w	ip, ip, r0
 8009cee:	fa5f f08c 	uxtb.w	r0, ip
 8009cf2:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8009cf6:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009cfa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009cfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d02:	ea80 0001 	eor.w	r0, r0, r1
 8009d06:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8009d0a:	ea81 0100 	eor.w	r1, r1, r0
 8009d0e:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8009d12:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009d16:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8009d1a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d1e:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8009d22:	ea81 0100 	eor.w	r1, r1, r0
 8009d26:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009d2a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009d2e:	ea4f 6612 	mov.w	r6, r2, lsr #24
 8009d32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d36:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009d3a:	ea81 0100 	eor.w	r1, r1, r0
 8009d3e:	fa5f f08e 	uxtb.w	r0, lr
 8009d42:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009d46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d4a:	ea80 0005 	eor.w	r0, r0, r5
 8009d4e:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8009d52:	ea85 0500 	eor.w	r5, r5, r0
 8009d56:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009d5a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d64:	ea85 0500 	eor.w	r5, r5, r0
 8009d68:	f3cc 2007 	ubfx	r0, ip, #8, #8
 8009d6c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009d70:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009d74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d78:	ea85 0500 	eor.w	r5, r5, r0
 8009d7c:	fa5f f089 	uxtb.w	r0, r9
 8009d80:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009d84:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8009d88:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009d8c:	ea86 0600 	eor.w	r6, r6, r0
 8009d90:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8009d94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d98:	ea86 0600 	eor.w	r6, r6, r0
 8009d9c:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8009da0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009da4:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8009da8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009dac:	ea86 0600 	eor.w	r6, r6, r0
 8009db0:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8009db4:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009db8:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8009dbc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009dc0:	ea86 0600 	eor.w	r6, r6, r0
 8009dc4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8009dc8:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8009dcc:	ea80 0c02 	eor.w	ip, r0, r2
 8009dd0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8009dd4:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8009dd8:	ea8c 0c00 	eor.w	ip, ip, r0
 8009ddc:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8009de0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009de4:	ea8c 0c00 	eor.w	ip, ip, r0
 8009de8:	ea8c 0c02 	eor.w	ip, ip, r2
        if (r > 6) {
 8009dec:	f040 80e8 	bne.w	8009fc0 <wc_AesEncrypt+0xcfc>
            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
 8009df0:	fa5f f08c 	uxtb.w	r0, ip
 8009df4:	0e0a      	lsrs	r2, r1, #24
 8009df6:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009dfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e02:	ea82 0e00 	eor.w	lr, r2, r0
 8009e06:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8009e0a:	ea8e 0e02 	eor.w	lr, lr, r2
 8009e0e:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8009e12:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009e16:	b2c8      	uxtb	r0, r1
 8009e18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e1c:	ea8e 0e02 	eor.w	lr, lr, r2
 8009e20:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009e24:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009e28:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009e2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e34:	ea8e 0e02 	eor.w	lr, lr, r2
 8009e38:	0e2a      	lsrs	r2, r5, #24
 8009e3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e3e:	ea82 0900 	eor.w	r9, r2, r0
 8009e42:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8009e46:	ea89 0902 	eor.w	r9, r9, r2
 8009e4a:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8009e4e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009e52:	b2e8      	uxtb	r0, r5
 8009e54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e58:	ea89 0902 	eor.w	r9, r9, r2
 8009e5c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8009e60:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8009e64:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009e68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e70:	ea89 0902 	eor.w	r9, r9, r2
 8009e74:	0e32      	lsrs	r2, r6, #24
 8009e76:	b2f6      	uxtb	r6, r6
 8009e78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e7c:	4050      	eors	r0, r2
 8009e7e:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8009e82:	4042      	eors	r2, r0
 8009e84:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8009e88:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009e8c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8009e90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e94:	4042      	eors	r2, r0
 8009e96:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8009e9a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009e9e:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8009ea2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009ea6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009eaa:	4042      	eors	r2, r0
 8009eac:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8009eb0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8009eb4:	ea80 0c06 	eor.w	ip, r0, r6
 8009eb8:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8009ebc:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8009ec0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8009ec4:	ea8c 0c00 	eor.w	ip, ip, r0
 8009ec8:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8009ecc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009ed0:	ea8c 0c00 	eor.w	ip, ip, r0
 8009ed4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ed8:	ea8c 0c00 	eor.w	ip, ip, r0
 8009edc:	fa5f f08c 	uxtb.w	r0, ip
 8009ee0:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8009ee4:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009ee8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009eec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009ef0:	4048      	eors	r0, r1
 8009ef2:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8009ef6:	4041      	eors	r1, r0
 8009ef8:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8009efc:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009f00:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8009f04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f08:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8009f0c:	4041      	eors	r1, r0
 8009f0e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009f12:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009f16:	0e16      	lsrs	r6, r2, #24
 8009f18:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f1c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8009f20:	4041      	eors	r1, r0
 8009f22:	fa5f f08e 	uxtb.w	r0, lr
 8009f26:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009f2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f2e:	4068      	eors	r0, r5
 8009f30:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
 8009f34:	4045      	eors	r5, r0
 8009f36:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009f3a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f44:	4045      	eors	r5, r0
 8009f46:	f3cc 2007 	ubfx	r0, ip, #8, #8
 8009f4a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009f4e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8009f52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f56:	4045      	eors	r5, r0
 8009f58:	fa5f f089 	uxtb.w	r0, r9
 8009f5c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8009f60:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8009f64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f68:	4046      	eors	r6, r0
 8009f6a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8009f6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f72:	4046      	eors	r6, r0
 8009f74:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8009f78:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009f7c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8009f80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f84:	4046      	eors	r6, r0
 8009f86:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8009f8a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8009f8e:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8009f92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f96:	4046      	eors	r6, r0
 8009f98:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8009f9c:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8009fa0:	ea80 0c02 	eor.w	ip, r0, r2
 8009fa4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8009fa8:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8009fac:	ea8c 0c00 	eor.w	ip, ip, r0
 8009fb0:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8009fb4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009fb8:	ea8c 0c00 	eor.w	ip, ip, r0
 8009fbc:	ea8c 0c02 	eor.w	ip, ip, r2
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8009fc0:	b2ca      	uxtb	r2, r1
    rk += r * 8;
 8009fc2:	0178      	lsls	r0, r7, #5
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8009fc4:	f502 7280 	add.w	r2, r2, #256	; 0x100
    rk += r * 8;
 8009fc8:	eb04 1747 	add.w	r7, r4, r7, lsl #5
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8009fcc:	f813 9022 	ldrb.w	r9, [r3, r2, lsl #2]
 8009fd0:	687a      	ldr	r2, [r7, #4]
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8009fd2:	5824      	ldr	r4, [r4, r0]
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8009fd4:	ea89 0902 	eor.w	r9, r9, r2
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
 8009fd8:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8009fdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fe0:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8009fe4:	ea89 020e 	eor.w	r2, r9, lr
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8009fe8:	f3c6 4e07 	ubfx	lr, r6, #16, #8
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8009fec:	ea4f 6915 	mov.w	r9, r5, lsr #24
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8009ff0:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8009ff4:	f509 7900 	add.w	r9, r9, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8009ff8:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8009ffc:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 800a000:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 800a004:	f009 497f 	and.w	r9, r9, #4278190080	; 0xff000000
 800a008:	ea4e 0e09 	orr.w	lr, lr, r9
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 800a00c:	ea82 090e 	eor.w	r9, r2, lr
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 800a010:	b2ea      	uxtb	r2, r5
 800a012:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800a016:	f813 a022 	ldrb.w	sl, [r3, r2, lsl #2]
 800a01a:	68ba      	ldr	r2, [r7, #8]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 800a01c:	68ff      	ldr	r7, [r7, #12]
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 800a01e:	ea8a 0a02 	eor.w	sl, sl, r2
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
 800a022:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a02a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 800a02e:	ea8a 020e 	eor.w	r2, sl, lr
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 800a032:	f3cc 4e07 	ubfx	lr, ip, #16, #8
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 800a036:	ea4f 6a16 	mov.w	sl, r6, lsr #24
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 800a03a:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 800a03e:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 800a042:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 800a046:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 800a04a:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 800a04e:	f00a 4a7f 	and.w	sl, sl, #4278190080	; 0xff000000
 800a052:	ea4e 0e0a 	orr.w	lr, lr, sl
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 800a056:	ea82 0a0e 	eor.w	sl, r2, lr
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 800a05a:	b2f2      	uxtb	r2, r6
 800a05c:	f502 7280 	add.w	r2, r2, #256	; 0x100
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 800a060:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 800a064:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800a068:	407a      	eors	r2, r7
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 800a06a:	f3c5 2707 	ubfx	r7, r5, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 800a06e:	f50e 7e00 	add.w	lr, lr, #512	; 0x200
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 800a072:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 800a076:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 800a07a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 800a07e:	4057      	eors	r7, r2
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 800a080:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800a084:	f502 7240 	add.w	r2, r2, #768	; 0x300
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 800a088:	fa5f fc8c 	uxtb.w	ip, ip
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 800a08c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 800a090:	f00e 4e7f 	and.w	lr, lr, #4278190080	; 0xff000000
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 800a094:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 800a098:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 800a09c:	f3c6 2607 	ubfx	r6, r6, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 800a0a0:	ea42 020e 	orr.w	r2, r2, lr
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 800a0a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 800a0a8:	407a      	eors	r2, r7
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 800a0aa:	f3c5 4507 	ubfx	r5, r5, #16, #8
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 800a0ae:	f813 702c 	ldrb.w	r7, [r3, ip, lsl #2]
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 800a0b2:	0e09      	lsrs	r1, r1, #24
 800a0b4:	f501 7100 	add.w	r1, r1, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 800a0b8:	f505 7540 	add.w	r5, r5, #768	; 0x300
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 800a0bc:	407c      	eors	r4, r7
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 800a0be:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 800a0c2:	4060      	eors	r0, r4
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 800a0c4:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 800a0c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 800a0cc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 800a0d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a0d4:	4323      	orrs	r3, r4
    s0 = ByteReverseWord32(s0);
 800a0d6:	4058      	eors	r0, r3
 800a0d8:	f7ff f884 	bl	80091e4 <ByteReverseWord32>
 800a0dc:	9000      	str	r0, [sp, #0]
    s1 = ByteReverseWord32(s1);
 800a0de:	4648      	mov	r0, r9
 800a0e0:	f7ff f880 	bl	80091e4 <ByteReverseWord32>
 800a0e4:	9001      	str	r0, [sp, #4]
    s2 = ByteReverseWord32(s2);
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	f7ff f87c 	bl	80091e4 <ByteReverseWord32>
 800a0ec:	9002      	str	r0, [sp, #8]
    s3 = ByteReverseWord32(s3);
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7ff f878 	bl	80091e4 <ByteReverseWord32>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 800a0f4:	2204      	movs	r2, #4
    s3 = ByteReverseWord32(s3);
 800a0f6:	9003      	str	r0, [sp, #12]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 800a0f8:	4669      	mov	r1, sp
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f013 fc52 	bl	801d9a4 <memcpy>
    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
 800a100:	2204      	movs	r2, #4
 800a102:	eb0d 0102 	add.w	r1, sp, r2
 800a106:	eb08 0002 	add.w	r0, r8, r2
 800a10a:	f013 fc4b 	bl	801d9a4 <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 800a10e:	2204      	movs	r2, #4
 800a110:	a902      	add	r1, sp, #8
 800a112:	f108 0008 	add.w	r0, r8, #8
 800a116:	f013 fc45 	bl	801d9a4 <memcpy>
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 800a11a:	2204      	movs	r2, #4
 800a11c:	a903      	add	r1, sp, #12
 800a11e:	f108 000c 	add.w	r0, r8, #12
 800a122:	f013 fc3f 	bl	801d9a4 <memcpy>
    return 0;
 800a126:	2000      	movs	r0, #0
} /* wc_AesEncrypt */
 800a128:	b004      	add	sp, #16
 800a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_FUNC_ARG;
 800a12e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800a132:	e7f9      	b.n	800a128 <wc_AesEncrypt+0xe64>
        return KEYUSAGE_E;
 800a134:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 800a138:	e7f6      	b.n	800a128 <wc_AesEncrypt+0xe64>
 800a13a:	bf00      	nop

0800a13c <GMULT>:

#endif /* WOLFSSL_AESNI */

#if defined(GCM_SMALL)
static void GMULT(byte* X, byte* Y)
{
 800a13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	460c      	mov	r4, r1
 800a144:	4606      	mov	r6, r0
    byte Z[AES_BLOCK_SIZE];
    byte V[AES_BLOCK_SIZE];
    int i, j;

    XMEMSET(Z, 0, AES_BLOCK_SIZE);
 800a146:	2210      	movs	r2, #16
 800a148:	2100      	movs	r1, #0
 800a14a:	4668      	mov	r0, sp
 800a14c:	f013 fc52 	bl	801d9f4 <memset>
    XMEMCPY(V, X, AES_BLOCK_SIZE);
 800a150:	2210      	movs	r2, #16
 800a152:	4631      	mov	r1, r6
 800a154:	eb0d 0002 	add.w	r0, sp, r2
 800a158:	f013 fc24 	bl	801d9a4 <memcpy>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
 800a15c:	1e67      	subs	r7, r4, #1
 800a15e:	340f      	adds	r4, #15
    {
        byte y = Y[i];
 800a160:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800a164:	f04f 0808 	mov.w	r8, #8
        for (j = 0; j < 8; j++)
        {
            if (y & 0x80) {
 800a168:	062b      	lsls	r3, r5, #24
 800a16a:	d505      	bpl.n	800a178 <GMULT+0x3c>
                xorbuf(Z, V, AES_BLOCK_SIZE);
 800a16c:	2210      	movs	r2, #16
 800a16e:	eb0d 0102 	add.w	r1, sp, r2
 800a172:	4668      	mov	r0, sp
 800a174:	f7ff f86b 	bl	800924e <xorbuf>
    byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
 800a178:	f89d 301f 	ldrb.w	r3, [sp, #31]
    int carryIn = 0;
 800a17c:	2100      	movs	r1, #0
    byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
 800a17e:	f343 0300 	sbfx	r3, r3, #0, #1
 800a182:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 800a186:	a804      	add	r0, sp, #16
 800a188:	460a      	mov	r2, r1
        int carryOut = (x[i] & 0x01) << 7;
 800a18a:	f890 e000 	ldrb.w	lr, [r0]
 800a18e:	468c      	mov	ip, r1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 800a190:	3201      	adds	r2, #1
        int carryOut = (x[i] & 0x01) << 7;
 800a192:	ea4f 11ce 	mov.w	r1, lr, lsl #7
        x[i] = (byte) ((x[i] >> 1) | carryIn);
 800a196:	ea4c 0c5e 	orr.w	ip, ip, lr, lsr #1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 800a19a:	2a10      	cmp	r2, #16
        x[i] = (byte) ((x[i] >> 1) | carryIn);
 800a19c:	f800 cb01 	strb.w	ip, [r0], #1
        int carryOut = (x[i] & 0x01) << 7;
 800a1a0:	b2c9      	uxtb	r1, r1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 800a1a2:	d1f2      	bne.n	800a18a <GMULT+0x4e>
    x[0] ^= borrow;
 800a1a4:	f89d 1010 	ldrb.w	r1, [sp, #16]
            }

            RIGHTSHIFTX(V);
            y = y << 1;
 800a1a8:	006d      	lsls	r5, r5, #1
    x[0] ^= borrow;
 800a1aa:	404b      	eors	r3, r1
        for (j = 0; j < 8; j++)
 800a1ac:	f1b8 0801 	subs.w	r8, r8, #1
    x[0] ^= borrow;
 800a1b0:	f88d 3010 	strb.w	r3, [sp, #16]
            y = y << 1;
 800a1b4:	b2ed      	uxtb	r5, r5
        for (j = 0; j < 8; j++)
 800a1b6:	d1d7      	bne.n	800a168 <GMULT+0x2c>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
 800a1b8:	42bc      	cmp	r4, r7
 800a1ba:	d1d1      	bne.n	800a160 <GMULT+0x24>
        }
    }
    XMEMCPY(X, Z, AES_BLOCK_SIZE);
 800a1bc:	4669      	mov	r1, sp
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f013 fbf0 	bl	801d9a4 <memcpy>
}
 800a1c4:	b008      	add	sp, #32
 800a1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a1ca <wc_AesSetIV>:
{
 800a1ca:	b510      	push	{r4, lr}
    if (aes == NULL)
 800a1cc:	b148      	cbz	r0, 800a1e2 <wc_AesSetIV+0x18>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 800a1ce:	30f8      	adds	r0, #248	; 0xf8
 800a1d0:	2210      	movs	r2, #16
    if (iv)
 800a1d2:	b119      	cbz	r1, 800a1dc <wc_AesSetIV+0x12>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 800a1d4:	f013 fbe6 	bl	801d9a4 <memcpy>
    return 0;
 800a1d8:	2000      	movs	r0, #0
}
 800a1da:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
 800a1dc:	f013 fc0a 	bl	801d9f4 <memset>
 800a1e0:	e7fa      	b.n	800a1d8 <wc_AesSetIV+0xe>
        return BAD_FUNC_ARG;
 800a1e2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800a1e6:	e7f8      	b.n	800a1da <wc_AesSetIV+0x10>

0800a1e8 <wc_AesSetKey>:
    {
 800a1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a1f0:	4691      	mov	r9, r2
 800a1f2:	469b      	mov	fp, r3
        if (aes == NULL) {
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	f000 821d 	beq.w	800a636 <wc_AesSetKey+0x44e>
        if (keylen > sizeof(aes->key)) {
 800a1fc:	2af0      	cmp	r2, #240	; 0xf0
 800a1fe:	f200 821a 	bhi.w	800a636 <wc_AesSetKey+0x44e>
            if (keylen != 16 && keylen != 24 && keylen != 32) {
 800a202:	f022 0308 	bic.w	r3, r2, #8
 800a206:	2b10      	cmp	r3, #16
 800a208:	d002      	beq.n	800a210 <wc_AesSetKey+0x28>
 800a20a:	2a20      	cmp	r2, #32
 800a20c:	f040 8213 	bne.w	800a636 <wc_AesSetKey+0x44e>
        aes->rounds = (keylen/4) + 6;
 800a210:	ea4f 0a99 	mov.w	sl, r9, lsr #2
 800a214:	f10a 0306 	add.w	r3, sl, #6
 800a218:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
        aes->keylen = (int)keylen;
 800a21c:	f8c5 90f4 	str.w	r9, [r5, #244]	; 0xf4
        XMEMCPY(rk, userKey, keylen);
 800a220:	464a      	mov	r2, r9
 800a222:	4628      	mov	r0, r5
 800a224:	f013 fbbe 	bl	801d9a4 <memcpy>
        rk = aes->key;
 800a228:	462c      	mov	r4, r5
        for (i = 0; i < count; i++)
 800a22a:	462e      	mov	r6, r5
 800a22c:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
 800a230:	462b      	mov	r3, r5
 800a232:	459a      	cmp	sl, r3
 800a234:	d149      	bne.n	800a2ca <wc_AesSetKey+0xe2>
        switch (keylen) {
 800a236:	f1b9 0f18 	cmp.w	r9, #24
 800a23a:	f000 80bb 	beq.w	800a3b4 <wc_AesSetKey+0x1cc>
 800a23e:	f1b9 0f20 	cmp.w	r9, #32
 800a242:	d048      	beq.n	800a2d6 <wc_AesSetKey+0xee>
 800a244:	f1b9 0f10 	cmp.w	r9, #16
 800a248:	f040 81f5 	bne.w	800a636 <wc_AesSetKey+0x44e>
 800a24c:	f8df c210 	ldr.w	ip, [pc, #528]	; 800a460 <wc_AesSetKey+0x278>
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a250:	4884      	ldr	r0, [pc, #528]	; (800a464 <wc_AesSetKey+0x27c>)
 800a252:	f105 0e90 	add.w	lr, r5, #144	; 0x90
                temp  = rk[3];
 800a256:	68e2      	ldr	r2, [r4, #12]
                    rcon[i];
 800a258:	f85c 9b04 	ldr.w	r9, [ip], #4
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a25c:	b2d3      	uxtb	r3, r2
                if (++i == 10)
 800a25e:	4574      	cmp	r4, lr
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a260:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a264:	6823      	ldr	r3, [r4, #0]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a266:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a26a:	ea89 0303 	eor.w	r3, r9, r3
 800a26e:	ea83 0301 	eor.w	r3, r3, r1
 800a272:	ea4f 6112 	mov.w	r1, r2, lsr #24
 800a276:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800a27a:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 800a27e:	ea83 0301 	eor.w	r3, r3, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800a282:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800a286:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a28a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a28e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a292:	ea83 0301 	eor.w	r3, r3, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 800a296:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a29a:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800a29e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a2a2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a2a6:	ea83 0301 	eor.w	r3, r3, r1
                rk[5] = rk[1] ^ rk[4];
 800a2aa:	6861      	ldr	r1, [r4, #4]
                rk[4] = rk[0] ^
 800a2ac:	6123      	str	r3, [r4, #16]
                rk[5] = rk[1] ^ rk[4];
 800a2ae:	ea83 0301 	eor.w	r3, r3, r1
                rk[6] = rk[2] ^ rk[5];
 800a2b2:	68a1      	ldr	r1, [r4, #8]
                rk[5] = rk[1] ^ rk[4];
 800a2b4:	6163      	str	r3, [r4, #20]
                rk[6] = rk[2] ^ rk[5];
 800a2b6:	ea83 0301 	eor.w	r3, r3, r1
 800a2ba:	61a3      	str	r3, [r4, #24]
                rk[7] = rk[3] ^ rk[6];
 800a2bc:	ea83 0302 	eor.w	r3, r3, r2
 800a2c0:	61e3      	str	r3, [r4, #28]
                if (++i == 10)
 800a2c2:	f000 80ba 	beq.w	800a43a <wc_AesSetKey+0x252>
                rk += 4;
 800a2c6:	3410      	adds	r4, #16
                temp  = rk[3];
 800a2c8:	e7c5      	b.n	800a256 <wc_AesSetKey+0x6e>
            out[i] = ByteReverseWord32(in[i]);
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	f7fe ff8a 	bl	80091e4 <ByteReverseWord32>
 800a2d0:	f843 0b04 	str.w	r0, [r3], #4
        for (i = 0; i < count; i++)
 800a2d4:	e7ad      	b.n	800a232 <wc_AesSetKey+0x4a>
 800a2d6:	4b62      	ldr	r3, [pc, #392]	; (800a460 <wc_AesSetKey+0x278>)
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a2d8:	4a62      	ldr	r2, [pc, #392]	; (800a464 <wc_AesSetKey+0x27c>)
 800a2da:	f105 0cc0 	add.w	ip, r5, #192	; 0xc0
                temp = rk[ 7];
 800a2de:	69e0      	ldr	r0, [r4, #28]
                    rcon[i];
 800a2e0:	f853 9b04 	ldr.w	r9, [r3], #4
                rk[ 9] = rk[ 1] ^ rk[ 8];
 800a2e4:	6867      	ldr	r7, [r4, #4]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a2e6:	b2c1      	uxtb	r1, r0
                if (++i == 7)
 800a2e8:	4564      	cmp	r4, ip
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a2ea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a2ee:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a2f2:	6821      	ldr	r1, [r4, #0]
 800a2f4:	ea89 0101 	eor.w	r1, r9, r1
 800a2f8:	ea8e 0e01 	eor.w	lr, lr, r1
 800a2fc:	ea4f 6110 	mov.w	r1, r0, lsr #24
 800a300:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800a304:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 800a308:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800a30c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a310:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a314:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a318:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a31c:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 800a320:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a324:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800a328:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a32c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a330:	ea8e 0101 	eor.w	r1, lr, r1
                rk[ 8] = rk[ 0] ^
 800a334:	6221      	str	r1, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 800a336:	ea81 0107 	eor.w	r1, r1, r7
                rk[10] = rk[ 2] ^ rk[ 9];
 800a33a:	68a7      	ldr	r7, [r4, #8]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 800a33c:	6261      	str	r1, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
 800a33e:	ea81 0107 	eor.w	r1, r1, r7
                rk[11] = rk[ 3] ^ rk[10];
 800a342:	68e7      	ldr	r7, [r4, #12]
                rk[10] = rk[ 2] ^ rk[ 9];
 800a344:	62a1      	str	r1, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
 800a346:	ea81 0e07 	eor.w	lr, r1, r7
 800a34a:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
                if (++i == 7)
 800a34e:	d074      	beq.n	800a43a <wc_AesSetKey+0x252>
                    (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 800a350:	f3ce 4107 	ubfx	r1, lr, #16, #8
 800a354:	f501 7140 	add.w	r1, r1, #768	; 0x300
                rk[13] = rk[ 5] ^ rk[12];
 800a358:	6967      	ldr	r7, [r4, #20]
                    (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 800a35a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a35e:	f401 097f 	and.w	r9, r1, #16711680	; 0xff0000
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 800a362:	f3ce 2107 	ubfx	r1, lr, #8, #8
                rk += 8;
 800a366:	3420      	adds	r4, #32
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 800a368:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a36c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800a370:	ea49 0901 	orr.w	r9, r9, r1
 800a374:	f854 1c10 	ldr.w	r1, [r4, #-16]
 800a378:	ea89 0901 	eor.w	r9, r9, r1
                    (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
 800a37c:	ea4f 611e 	mov.w	r1, lr, lsr #24
 800a380:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a384:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a388:	f001 4a7f 	and.w	sl, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
 800a38c:	fa5f f18e 	uxtb.w	r1, lr
 800a390:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800a394:	f812 e021 	ldrb.w	lr, [r2, r1, lsl #2]
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 800a398:	ea4a 0e0e 	orr.w	lr, sl, lr
 800a39c:	ea89 010e 	eor.w	r1, r9, lr
                rk[12] = rk[ 4] ^
 800a3a0:	6121      	str	r1, [r4, #16]
                rk[13] = rk[ 5] ^ rk[12];
 800a3a2:	4079      	eors	r1, r7
                rk[14] = rk[ 6] ^ rk[13];
 800a3a4:	f854 7c08 	ldr.w	r7, [r4, #-8]
                rk[13] = rk[ 5] ^ rk[12];
 800a3a8:	6161      	str	r1, [r4, #20]
                rk[14] = rk[ 6] ^ rk[13];
 800a3aa:	4079      	eors	r1, r7
 800a3ac:	61a1      	str	r1, [r4, #24]
                rk[15] = rk[ 7] ^ rk[14];
 800a3ae:	4041      	eors	r1, r0
 800a3b0:	61e1      	str	r1, [r4, #28]
                temp = rk[ 7];
 800a3b2:	e794      	b.n	800a2de <wc_AesSetKey+0xf6>
 800a3b4:	482a      	ldr	r0, [pc, #168]	; (800a460 <wc_AesSetKey+0x278>)
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a3b6:	4a2b      	ldr	r2, [pc, #172]	; (800a464 <wc_AesSetKey+0x27c>)
 800a3b8:	f105 0ca8 	add.w	ip, r5, #168	; 0xa8
                temp = rk[ 5];
 800a3bc:	6963      	ldr	r3, [r4, #20]
                    rcon[i];
 800a3be:	f850 9b04 	ldr.w	r9, [r0], #4
                rk[ 7] = rk[ 1] ^ rk[ 6];
 800a3c2:	6867      	ldr	r7, [r4, #4]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a3c4:	b2d9      	uxtb	r1, r3
                if (++i == 8)
 800a3c6:	4564      	cmp	r4, ip
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800a3c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a3cc:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a3d0:	6821      	ldr	r1, [r4, #0]
 800a3d2:	ea89 0101 	eor.w	r1, r9, r1
 800a3d6:	ea8e 0e01 	eor.w	lr, lr, r1
 800a3da:	ea4f 6113 	mov.w	r1, r3, lsr #24
 800a3de:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800a3e2:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 800a3e6:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800a3ea:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a3ee:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a3f2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a3f6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a3fa:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 800a3fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a402:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800a406:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a40a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800a40e:	ea8e 0101 	eor.w	r1, lr, r1
                rk[ 6] = rk[ 0] ^
 800a412:	61a1      	str	r1, [r4, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 800a414:	ea81 0107 	eor.w	r1, r1, r7
                rk[ 8] = rk[ 2] ^ rk[ 7];
 800a418:	68a7      	ldr	r7, [r4, #8]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 800a41a:	61e1      	str	r1, [r4, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 800a41c:	ea81 0107 	eor.w	r1, r1, r7
                rk[ 9] = rk[ 3] ^ rk[ 8];
 800a420:	68e7      	ldr	r7, [r4, #12]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 800a422:	6221      	str	r1, [r4, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
 800a424:	ea81 0107 	eor.w	r1, r1, r7
 800a428:	6261      	str	r1, [r4, #36]	; 0x24
                if (++i == 8)
 800a42a:	d006      	beq.n	800a43a <wc_AesSetKey+0x252>
                rk[10] = rk[ 4] ^ rk[ 9];
 800a42c:	6927      	ldr	r7, [r4, #16]
 800a42e:	4079      	eors	r1, r7
 800a430:	62a1      	str	r1, [r4, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
 800a432:	4059      	eors	r1, r3
 800a434:	62e1      	str	r1, [r4, #44]	; 0x2c
                rk += 6;
 800a436:	3418      	adds	r4, #24
                temp = rk[ 5];
 800a438:	e7c0      	b.n	800a3bc <wc_AesSetKey+0x1d4>
    while (len--) *z++ = 0;
 800a43a:	2200      	movs	r2, #0
        if (dir == AES_DECRYPTION) {
 800a43c:	f1b8 0f01 	cmp.w	r8, #1
 800a440:	f88d 2004 	strb.w	r2, [sp, #4]
 800a444:	f88d 2005 	strb.w	r2, [sp, #5]
 800a448:	f88d 2006 	strb.w	r2, [sp, #6]
 800a44c:	f88d 2007 	strb.w	r2, [sp, #7]
 800a450:	d00a      	beq.n	800a468 <wc_AesSetKey+0x280>
        ret = wc_AesSetIV(aes, iv);
 800a452:	4659      	mov	r1, fp
 800a454:	4628      	mov	r0, r5
    } /* wc_AesSetKey() */
 800a456:	b003      	add	sp, #12
 800a458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = wc_AesSetIV(aes, iv);
 800a45c:	f7ff beb5 	b.w	800a1ca <wc_AesSetIV>
 800a460:	08021eb0 	.word	0x08021eb0
 800a464:	08020eb0 	.word	0x08020eb0
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800a468:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800a46c:	4629      	mov	r1, r5
 800a46e:	009c      	lsls	r4, r3, #2
 800a470:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800a474:	1aa0      	subs	r0, r4, r2
 800a476:	4282      	cmp	r2, r0
 800a478:	f101 0110 	add.w	r1, r1, #16
 800a47c:	f1a3 0310 	sub.w	r3, r3, #16
 800a480:	f0c0 80bf 	bcc.w	800a602 <wc_AesSetKey+0x41a>
 800a484:	2300      	movs	r3, #0
 800a486:	f88d 3004 	strb.w	r3, [sp, #4]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 800a48a:	4a6d      	ldr	r2, [pc, #436]	; (800a640 <wc_AesSetKey+0x458>)
 800a48c:	f88d 3005 	strb.w	r3, [sp, #5]
 800a490:	f88d 3006 	strb.w	r3, [sp, #6]
 800a494:	f88d 3007 	strb.w	r3, [sp, #7]
 800a498:	4b6a      	ldr	r3, [pc, #424]	; (800a644 <wc_AesSetKey+0x45c>)
            for (i = 1; i < aes->rounds; i++) {
 800a49a:	2001      	movs	r0, #1
 800a49c:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 800a4a0:	4288      	cmp	r0, r1
 800a4a2:	d2d6      	bcs.n	800a452 <wc_AesSetKey+0x26a>
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 800a4a4:	6931      	ldr	r1, [r6, #16]
 800a4a6:	0e0c      	lsrs	r4, r1, #24
 800a4a8:	f504 7480 	add.w	r4, r4, #256	; 0x100
            for (i = 1; i < aes->rounds; i++) {
 800a4ac:	3001      	adds	r0, #1
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 800a4ae:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 800a4b2:	b2cc      	uxtb	r4, r1
 800a4b4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a4b8:	3610      	adds	r6, #16
 800a4ba:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800a4be:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 800a4c2:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800a4c6:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a4ca:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800a4ce:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800a4d2:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800a4d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a4da:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800a4de:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800a4e2:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800a4e6:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800a4ea:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a4ee:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a4f2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a4f6:	ea84 040c 	eor.w	r4, r4, ip
 800a4fa:	4061      	eors	r1, r4
                rk[0] =
 800a4fc:	6031      	str	r1, [r6, #0]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
 800a4fe:	6871      	ldr	r1, [r6, #4]
 800a500:	0e0c      	lsrs	r4, r1, #24
 800a502:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a506:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 800a50a:	b2cc      	uxtb	r4, r1
 800a50c:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a510:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800a514:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 800a518:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800a51c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a520:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800a524:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800a528:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800a52c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a530:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800a534:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800a538:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800a53c:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800a540:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a544:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a548:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a54c:	ea84 040c 	eor.w	r4, r4, ip
 800a550:	4061      	eors	r1, r4
                rk[1] =
 800a552:	6071      	str	r1, [r6, #4]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
 800a554:	68b1      	ldr	r1, [r6, #8]
 800a556:	0e0c      	lsrs	r4, r1, #24
 800a558:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a55c:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 800a560:	b2cc      	uxtb	r4, r1
 800a562:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a566:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800a56a:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 800a56e:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800a572:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a576:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 800a57a:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800a57e:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800a582:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a586:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 800a58a:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800a58e:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 800a592:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800a596:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a59a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a59e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a5a2:	ea84 040c 	eor.w	r4, r4, ip
 800a5a6:	4061      	eors	r1, r4
                rk[2] =
 800a5a8:	60b1      	str	r1, [r6, #8]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
 800a5aa:	68f1      	ldr	r1, [r6, #12]
 800a5ac:	0e0c      	lsrs	r4, r1, #24
 800a5ae:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a5b2:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 800a5b6:	b2cc      	uxtb	r4, r1
 800a5b8:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a5bc:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800a5c0:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 800a5c4:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800a5c8:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a5cc:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 800a5d0:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800a5d4:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800a5d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a5dc:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 800a5e0:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800a5e4:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 800a5e8:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800a5ec:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800a5f0:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800a5f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a5f8:	ea84 040c 	eor.w	r4, r4, ip
 800a5fc:	4061      	eors	r1, r4
                rk[3] =
 800a5fe:	60f1      	str	r1, [r6, #12]
            for (i = 1; i < aes->rounds; i++) {
 800a600:	e74c      	b.n	800a49c <wc_AesSetKey+0x2b4>
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 800a602:	f851 0c10 	ldr.w	r0, [r1, #-16]
 800a606:	691f      	ldr	r7, [r3, #16]
 800a608:	f841 7c10 	str.w	r7, [r1, #-16]
 800a60c:	6118      	str	r0, [r3, #16]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 800a60e:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800a612:	695f      	ldr	r7, [r3, #20]
 800a614:	f841 7c0c 	str.w	r7, [r1, #-12]
 800a618:	6158      	str	r0, [r3, #20]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 800a61a:	f851 0c08 	ldr.w	r0, [r1, #-8]
 800a61e:	699f      	ldr	r7, [r3, #24]
 800a620:	f841 7c08 	str.w	r7, [r1, #-8]
 800a624:	6198      	str	r0, [r3, #24]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800a626:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a62a:	69df      	ldr	r7, [r3, #28]
 800a62c:	f841 7c04 	str.w	r7, [r1, #-4]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800a630:	3204      	adds	r2, #4
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800a632:	61d8      	str	r0, [r3, #28]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800a634:	e71e      	b.n	800a474 <wc_AesSetKey+0x28c>
    } /* wc_AesSetKey() */
 800a636:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800a63a:	b003      	add	sp, #12
 800a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a640:	08020eb0 	.word	0x08020eb0
 800a644:	0801fdb0 	.word	0x0801fdb0

0800a648 <wc_AesCbcEncrypt>:
    {
 800a648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a64c:	460d      	mov	r5, r1
 800a64e:	4616      	mov	r6, r2
        if (aes == NULL || out == NULL || in == NULL) {
 800a650:	4607      	mov	r7, r0
 800a652:	b300      	cbz	r0, 800a696 <wc_AesCbcEncrypt+0x4e>
 800a654:	b1f9      	cbz	r1, 800a696 <wc_AesCbcEncrypt+0x4e>
 800a656:	b1f2      	cbz	r2, 800a696 <wc_AesCbcEncrypt+0x4e>
        if (sz == 0) {
 800a658:	b913      	cbnz	r3, 800a660 <wc_AesCbcEncrypt+0x18>
            return 0;
 800a65a:	2000      	movs	r0, #0
    } /* wc_AesCbcEncrypt */
 800a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (blocks--) {
 800a660:	f023 030f 	bic.w	r3, r3, #15
 800a664:	18cc      	adds	r4, r1, r3
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 800a666:	f100 08f8 	add.w	r8, r0, #248	; 0xf8
        while (blocks--) {
 800a66a:	42a5      	cmp	r5, r4
 800a66c:	d0f5      	beq.n	800a65a <wc_AesCbcEncrypt+0x12>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 800a66e:	2210      	movs	r2, #16
 800a670:	4631      	mov	r1, r6
 800a672:	4640      	mov	r0, r8
 800a674:	f7fe fdeb 	bl	800924e <xorbuf>
            ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
 800a678:	4642      	mov	r2, r8
 800a67a:	4641      	mov	r1, r8
 800a67c:	4638      	mov	r0, r7
 800a67e:	f7fe fe21 	bl	80092c4 <wc_AesEncrypt>
            if (ret != 0)
 800a682:	2800      	cmp	r0, #0
 800a684:	d1ea      	bne.n	800a65c <wc_AesCbcEncrypt+0x14>
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
 800a686:	4628      	mov	r0, r5
 800a688:	2210      	movs	r2, #16
 800a68a:	4641      	mov	r1, r8
 800a68c:	f013 f98a 	bl	801d9a4 <memcpy>
            out += AES_BLOCK_SIZE;
 800a690:	3510      	adds	r5, #16
            in  += AES_BLOCK_SIZE;
 800a692:	3610      	adds	r6, #16
 800a694:	e7e9      	b.n	800a66a <wc_AesCbcEncrypt+0x22>
            return BAD_FUNC_ARG;
 800a696:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800a69a:	e7df      	b.n	800a65c <wc_AesCbcEncrypt+0x14>

0800a69c <wc_AesCbcDecrypt>:
    {
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	b089      	sub	sp, #36	; 0x24
 800a6a2:	4688      	mov	r8, r1
 800a6a4:	9201      	str	r2, [sp, #4]
        if (aes == NULL || out == NULL || in == NULL) {
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f000 8724 	beq.w	800b4f6 <wc_AesCbcDecrypt+0xe5a>
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	f000 8721 	beq.w	800b4f6 <wc_AesCbcDecrypt+0xe5a>
 800a6b4:	2a00      	cmp	r2, #0
 800a6b6:	f000 871e 	beq.w	800b4f6 <wc_AesCbcDecrypt+0xe5a>
        if (sz == 0) {
 800a6ba:	b91b      	cbnz	r3, 800a6c4 <wc_AesCbcDecrypt+0x28>
            return 0;
 800a6bc:	2000      	movs	r0, #0
    }
 800a6be:	b009      	add	sp, #36	; 0x24
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blocks = sz / AES_BLOCK_SIZE;
 800a6c4:	091a      	lsrs	r2, r3, #4
        if (sz % AES_BLOCK_SIZE) {
 800a6c6:	071b      	lsls	r3, r3, #28
 800a6c8:	f040 8715 	bne.w	800b4f6 <wc_AesCbcDecrypt+0xe5a>
 800a6cc:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 800a6d0:	9303      	str	r3, [sp, #12]
                       DEC_ROUND_T_S( 0);
 800a6d2:	4c03      	ldr	r4, [pc, #12]	; (800a6e0 <wc_AesCbcDecrypt+0x44>)
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 800a6d4:	4f03      	ldr	r7, [pc, #12]	; (800a6e4 <wc_AesCbcDecrypt+0x48>)
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 800a6d6:	f500 7384 	add.w	r3, r0, #264	; 0x108
 800a6da:	9302      	str	r3, [sp, #8]
 800a6dc:	e004      	b.n	800a6e8 <wc_AesCbcDecrypt+0x4c>
 800a6de:	bf00      	nop
 800a6e0:	0801fdb0 	.word	0x0801fdb0
 800a6e4:	08020db0 	.word	0x08020db0
        while (blocks--) {
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	4598      	cmp	r8, r3
 800a6ec:	d0e6      	beq.n	800a6bc <wc_AesCbcDecrypt+0x20>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 800a6ee:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800a6f2:	2210      	movs	r2, #16
 800a6f4:	f013 f956 	bl	801d9a4 <memcpy>
    r = aes->rounds >> 1;
 800a6f8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800a6fc:	ea4f 0a53 	mov.w	sl, r3, lsr #1
    if (r > 7 || r == 0) {
 800a700:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a704:	2b06      	cmp	r3, #6
 800a706:	f200 86f2 	bhi.w	800b4ee <wc_AesCbcDecrypt+0xe52>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 800a70a:	9902      	ldr	r1, [sp, #8]
 800a70c:	2204      	movs	r2, #4
 800a70e:	a804      	add	r0, sp, #16
 800a710:	f013 f948 	bl	801d9a4 <memcpy>
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
 800a714:	2204      	movs	r2, #4
 800a716:	f505 7186 	add.w	r1, r5, #268	; 0x10c
 800a71a:	a805      	add	r0, sp, #20
 800a71c:	f013 f942 	bl	801d9a4 <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 800a720:	2204      	movs	r2, #4
 800a722:	f505 7188 	add.w	r1, r5, #272	; 0x110
 800a726:	a806      	add	r0, sp, #24
 800a728:	f013 f93c 	bl	801d9a4 <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 800a72c:	2204      	movs	r2, #4
 800a72e:	f505 718a 	add.w	r1, r5, #276	; 0x114
 800a732:	a807      	add	r0, sp, #28
 800a734:	f013 f936 	bl	801d9a4 <memcpy>
    s0 = ByteReverseWord32(s0);
 800a738:	9804      	ldr	r0, [sp, #16]
 800a73a:	f7fe fd53 	bl	80091e4 <ByteReverseWord32>
 800a73e:	4681      	mov	r9, r0
    s1 = ByteReverseWord32(s1);
 800a740:	9805      	ldr	r0, [sp, #20]
 800a742:	f7fe fd4f 	bl	80091e4 <ByteReverseWord32>
 800a746:	4601      	mov	r1, r0
    s2 = ByteReverseWord32(s2);
 800a748:	9806      	ldr	r0, [sp, #24]
 800a74a:	f7fe fd4b 	bl	80091e4 <ByteReverseWord32>
 800a74e:	4602      	mov	r2, r0
    s3 = ByteReverseWord32(s3);
 800a750:	9807      	ldr	r0, [sp, #28]
 800a752:	f7fe fd47 	bl	80091e4 <ByteReverseWord32>
    s0 ^= rk[0];
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	ea89 0903 	eor.w	r9, r9, r3
    s1 ^= rk[1];
 800a75c:	686b      	ldr	r3, [r5, #4]
 800a75e:	ea81 0c03 	eor.w	ip, r1, r3
    s2 ^= rk[2];
 800a762:	68ab      	ldr	r3, [r5, #8]
 800a764:	ea82 0e03 	eor.w	lr, r2, r3
    s3 ^= rk[3];
 800a768:	68eb      	ldr	r3, [r5, #12]
 800a76a:	4058      	eors	r0, r3
                       DEC_ROUND_T_S( 0);
 800a76c:	fa5f f38c 	uxtb.w	r3, ip
 800a770:	ea4f 6219 	mov.w	r2, r9, lsr #24
 800a774:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a778:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 800a77c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a780:	405e      	eors	r6, r3
 800a782:	692b      	ldr	r3, [r5, #16]
 800a784:	405e      	eors	r6, r3
 800a786:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a78a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a78e:	fa5f f28e 	uxtb.w	r2, lr
 800a792:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a796:	405e      	eors	r6, r3
 800a798:	f3ce 2307 	ubfx	r3, lr, #8, #8
 800a79c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a7a0:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800a7a4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a7a8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ac:	405e      	eors	r6, r3
 800a7ae:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800a7b2:	b2c1      	uxtb	r1, r0
 800a7b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a7b8:	405a      	eors	r2, r3
 800a7ba:	696b      	ldr	r3, [r5, #20]
 800a7bc:	405a      	eors	r2, r3
 800a7be:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800a7c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a7c6:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800a7ca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a7ce:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800a7d2:	405a      	eors	r2, r3
 800a7d4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a7d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a7dc:	0e00      	lsrs	r0, r0, #24
 800a7de:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a7e2:	405a      	eors	r2, r3
 800a7e4:	ea4f 631e 	mov.w	r3, lr, lsr #24
 800a7e8:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 800a7ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a7f0:	4059      	eors	r1, r3
 800a7f2:	69ab      	ldr	r3, [r5, #24]
 800a7f4:	4059      	eors	r1, r3
 800a7f6:	f3cc 4307 	ubfx	r3, ip, #16, #8
 800a7fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a7fe:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 800a802:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a806:	4059      	eors	r1, r3
 800a808:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a80c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a810:	fa5f f989 	uxtb.w	r9, r9
 800a814:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a818:	f509 7940 	add.w	r9, r9, #768	; 0x300
 800a81c:	4059      	eors	r1, r3
 800a81e:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800a822:	f854 0029 	ldr.w	r0, [r4, r9, lsl #2]
 800a826:	ea83 0900 	eor.w	r9, r3, r0
 800a82a:	69eb      	ldr	r3, [r5, #28]
 800a82c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800a830:	ea89 0903 	eor.w	r9, r9, r3
 800a834:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 800a838:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 800a83c:	ea89 0903 	eor.w	r9, r9, r3
 800a840:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 800a844:	b2d0      	uxtb	r0, r2
                       DEC_ROUND_T_S( 0);
 800a846:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 800a84a:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800a84e:	0e33      	lsrs	r3, r6, #24
 800a850:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 800a854:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a858:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800a85c:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800a860:	ea83 0e00 	eor.w	lr, r3, r0
 800a864:	6a2b      	ldr	r3, [r5, #32]
 800a866:	ea8e 0e03 	eor.w	lr, lr, r3
 800a86a:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800a86e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a872:	b2c8      	uxtb	r0, r1
 800a874:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a878:	ea8e 0e03 	eor.w	lr, lr, r3
 800a87c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a880:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a884:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800a888:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a88c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800a890:	ea8e 0e03 	eor.w	lr, lr, r3
 800a894:	0e13      	lsrs	r3, r2, #24
 800a896:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a89a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a89e:	4058      	eors	r0, r3
 800a8a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8a2:	4058      	eors	r0, r3
 800a8a4:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800a8a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a8ac:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800a8b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a8b4:	4058      	eors	r0, r3
 800a8b6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a8ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if (r > 5) {
 800a8be:	f1ba 0f05 	cmp.w	sl, #5
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 800a8c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a8c6:	ea80 0003 	eor.w	r0, r0, r3
 800a8ca:	fa5f f389 	uxtb.w	r3, r9
 800a8ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a8d2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a8d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a8da:	ea8c 0c03 	eor.w	ip, ip, r3
 800a8de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a8e0:	ea8c 0c03 	eor.w	ip, ip, r3
 800a8e4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800a8e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a8ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800a8f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a8f4:	ea8c 0c03 	eor.w	ip, ip, r3
 800a8f8:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800a8fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a900:	b2f6      	uxtb	r6, r6
 800a902:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a906:	f506 7640 	add.w	r6, r6, #768	; 0x300
 800a90a:	ea8c 0c03 	eor.w	ip, ip, r3
 800a90e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800a912:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800a916:	ea83 0906 	eor.w	r9, r3, r6
 800a91a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a91c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800a920:	ea89 0903 	eor.w	r9, r9, r3
 800a924:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800a928:	ea89 0903 	eor.w	r9, r9, r3
 800a92c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800a930:	ea89 0903 	eor.w	r9, r9, r3
 800a934:	b2c3      	uxtb	r3, r0
 800a936:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800a93a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a93e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 800a942:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800a946:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800a94a:	ea86 0602 	eor.w	r6, r6, r2
 800a94e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a952:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a954:	ea86 0602 	eor.w	r6, r6, r2
 800a958:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800a95c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 800a960:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a964:	ea86 0602 	eor.w	r6, r6, r2
 800a968:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a96c:	fa5f f28c 	uxtb.w	r2, ip
 800a970:	ea86 0603 	eor.w	r6, r6, r3
 800a974:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800a978:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800a97c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a980:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a984:	ea82 0203 	eor.w	r2, r2, r3
 800a988:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a98a:	ea82 0203 	eor.w	r2, r2, r3
 800a98e:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800a992:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a996:	fa5f f189 	uxtb.w	r1, r9
 800a99a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a99e:	ea82 0203 	eor.w	r2, r2, r3
 800a9a2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a9a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a9aa:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800a9ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a9b2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800a9b6:	ea82 0203 	eor.w	r2, r2, r3
 800a9ba:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800a9be:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a9c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a9c6:	ea81 0103 	eor.w	r1, r1, r3
 800a9ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a9cc:	ea81 0103 	eor.w	r1, r1, r3
 800a9d0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a9d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a9d8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800a9dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a9e0:	ea81 0103 	eor.w	r1, r1, r3
 800a9e4:	f3ce 2307 	ubfx	r3, lr, #8, #8
 800a9e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a9ec:	fa5f fe8e 	uxtb.w	lr, lr
 800a9f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a9f4:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 800a9f8:	ea81 0103 	eor.w	r1, r1, r3
 800a9fc:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800aa00:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800aa04:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800aa08:	ea83 0909 	eor.w	r9, r3, r9
 800aa0c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800aa0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800aa12:	ea89 0903 	eor.w	r9, r9, r3
 800aa16:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800aa1a:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 800aa1e:	ea89 0903 	eor.w	r9, r9, r3
 800aa22:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800aa26:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
 800aa2a:	b2d3      	uxtb	r3, r2
 800aa2c:	ea4f 6016 	mov.w	r0, r6, lsr #24
 800aa30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aa34:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800aa38:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aa3c:	ea80 0e03 	eor.w	lr, r0, r3
 800aa40:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800aa44:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800aa46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aa4a:	ea8e 0e00 	eor.w	lr, lr, r0
 800aa4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800aa52:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800aa56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aa5a:	ea8e 0e00 	eor.w	lr, lr, r0
 800aa5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aa62:	b2c8      	uxtb	r0, r1
 800aa64:	ea8e 0e03 	eor.w	lr, lr, r3
 800aa68:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800aa6c:	ea4f 6312 	mov.w	r3, r2, lsr #24
 800aa70:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800aa74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aa78:	ea80 0003 	eor.w	r0, r0, r3
 800aa7c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800aa7e:	ea80 0003 	eor.w	r0, r0, r3
 800aa82:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800aa86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aa8a:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 800aa8e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aa92:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800aa96:	ea80 0003 	eor.w	r0, r0, r3
 800aa9a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800aa9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aaa2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800aaa6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aaaa:	ea80 0003 	eor.w	r0, r0, r3
 800aaae:	fa5f f389 	uxtb.w	r3, r9
 800aab2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aab6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800aaba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aabe:	ea8c 0c03 	eor.w	ip, ip, r3
 800aac2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800aac4:	ea8c 0c03 	eor.w	ip, ip, r3
 800aac8:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800aacc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aad0:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800aad4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aad8:	ea8c 0c03 	eor.w	ip, ip, r3
 800aadc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800aae0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aae4:	b2f6      	uxtb	r6, r6
 800aae6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aaea:	f506 7640 	add.w	r6, r6, #768	; 0x300
 800aaee:	ea8c 0c03 	eor.w	ip, ip, r3
 800aaf2:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800aaf6:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800aafa:	ea83 0906 	eor.w	r9, r3, r6
 800aafe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ab00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800ab04:	ea89 0903 	eor.w	r9, r9, r3
 800ab08:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800ab0c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800ab10:	ea89 0903 	eor.w	r9, r9, r3
 800ab14:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800ab18:	ea89 0903 	eor.w	r9, r9, r3
 800ab1c:	b2c3      	uxtb	r3, r0
 800ab1e:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800ab22:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ab26:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 800ab2a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ab2e:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800ab32:	ea86 0602 	eor.w	r6, r6, r2
 800ab36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ab3a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800ab3c:	ea86 0602 	eor.w	r6, r6, r2
 800ab40:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ab44:	f3cc 2307 	ubfx	r3, ip, #8, #8
 800ab48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ab4c:	ea86 0602 	eor.w	r6, r6, r2
 800ab50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ab54:	fa5f f28c 	uxtb.w	r2, ip
 800ab58:	ea86 0603 	eor.w	r6, r6, r3
 800ab5c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800ab60:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800ab64:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab68:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ab6c:	ea82 0203 	eor.w	r2, r2, r3
 800ab70:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ab72:	ea82 0203 	eor.w	r2, r2, r3
 800ab76:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800ab7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ab7e:	fa5f f189 	uxtb.w	r1, r9
 800ab82:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ab86:	ea82 0203 	eor.w	r2, r2, r3
 800ab8a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800ab8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ab92:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800ab96:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ab9a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800ab9e:	ea82 0203 	eor.w	r2, r2, r3
 800aba2:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800aba6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800abaa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800abae:	ea81 0103 	eor.w	r1, r1, r3
 800abb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800abb4:	ea81 0103 	eor.w	r1, r1, r3
 800abb8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800abbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800abc0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800abc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800abc8:	ea81 0103 	eor.w	r1, r1, r3
 800abcc:	f3ce 2307 	ubfx	r3, lr, #8, #8
 800abd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800abd4:	fa5f fe8e 	uxtb.w	lr, lr
 800abd8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800abdc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 800abe0:	ea81 0103 	eor.w	r1, r1, r3
 800abe4:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800abe8:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800abec:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800abf0:	ea83 0909 	eor.w	r9, r3, r9
 800abf4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800abf6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800abfa:	ea89 0903 	eor.w	r9, r9, r3
 800abfe:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800ac02:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 800ac06:	ea89 0903 	eor.w	r9, r9, r3
 800ac0a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800ac0e:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
 800ac12:	b2d3      	uxtb	r3, r2
 800ac14:	ea4f 6016 	mov.w	r0, r6, lsr #24
 800ac18:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ac1c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800ac20:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ac24:	ea80 0e03 	eor.w	lr, r0, r3
 800ac28:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800ac2c:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800ac2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ac32:	ea8e 0e00 	eor.w	lr, lr, r0
 800ac36:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ac3a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ac3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac42:	ea8e 0e00 	eor.w	lr, lr, r0
 800ac46:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ac4a:	b2c8      	uxtb	r0, r1
 800ac4c:	ea8e 0e03 	eor.w	lr, lr, r3
 800ac50:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800ac54:	ea4f 6312 	mov.w	r3, r2, lsr #24
 800ac58:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800ac5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ac60:	ea80 0003 	eor.w	r0, r0, r3
 800ac64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac66:	ea80 0003 	eor.w	r0, r0, r3
 800ac6a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800ac6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ac72:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 800ac76:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ac7a:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800ac7e:	ea80 0003 	eor.w	r0, r0, r3
 800ac82:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800ac86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac8a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ac8e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ac92:	ea80 0003 	eor.w	r0, r0, r3
 800ac96:	fa5f f389 	uxtb.w	r3, r9
 800ac9a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ac9e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800aca2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aca6:	ea8c 0c03 	eor.w	ip, ip, r3
 800acaa:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800acac:	ea8c 0c03 	eor.w	ip, ip, r3
 800acb0:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800acb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800acb8:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800acbc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800acc0:	ea8c 0c03 	eor.w	ip, ip, r3
 800acc4:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800acc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800accc:	b2f6      	uxtb	r6, r6
 800acce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800acd2:	f506 7640 	add.w	r6, r6, #768	; 0x300
 800acd6:	ea8c 0c03 	eor.w	ip, ip, r3
 800acda:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800acde:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800ace2:	ea83 0906 	eor.w	r9, r3, r6
 800ace6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ace8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800acec:	ea89 0903 	eor.w	r9, r9, r3
 800acf0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800acf4:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800acf8:	ea89 0903 	eor.w	r9, r9, r3
 800acfc:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800ad00:	ea89 0903 	eor.w	r9, r9, r3
 800ad04:	b2c3      	uxtb	r3, r0
 800ad06:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800ad0a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad0e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 800ad12:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ad16:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800ad1a:	ea86 0602 	eor.w	r6, r6, r2
 800ad1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ad22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800ad24:	ea86 0602 	eor.w	r6, r6, r2
 800ad28:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ad2c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 800ad30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ad34:	ea86 0602 	eor.w	r6, r6, r2
 800ad38:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ad3c:	fa5f f28c 	uxtb.w	r2, ip
 800ad40:	ea86 0603 	eor.w	r6, r6, r3
 800ad44:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800ad48:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800ad4c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ad54:	ea82 0203 	eor.w	r2, r2, r3
 800ad58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ad5a:	ea82 0203 	eor.w	r2, r2, r3
 800ad5e:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800ad62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ad66:	fa5f f189 	uxtb.w	r1, r9
 800ad6a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ad6e:	ea82 0203 	eor.w	r2, r2, r3
 800ad72:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800ad76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ad7a:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800ad7e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ad82:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800ad86:	ea82 0203 	eor.w	r2, r2, r3
 800ad8a:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800ad8e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800ad92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ad96:	ea81 0103 	eor.w	r1, r1, r3
 800ad9a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800ad9c:	ea81 0103 	eor.w	r1, r1, r3
 800ada0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ada4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ada8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800adac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800adb0:	ea81 0103 	eor.w	r1, r1, r3
 800adb4:	f3ce 2307 	ubfx	r3, lr, #8, #8
 800adb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800adbc:	fa5f fe8e 	uxtb.w	lr, lr
 800adc0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800adc4:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 800adc8:	ea81 0103 	eor.w	r1, r1, r3
 800adcc:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800add0:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800add4:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800add8:	ea83 0909 	eor.w	r9, r3, r9
 800addc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800adde:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800ade2:	ea89 0903 	eor.w	r9, r9, r3
 800ade6:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800adea:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 800adee:	ea89 0903 	eor.w	r9, r9, r3
 800adf2:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800adf6:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
 800adfa:	b2d3      	uxtb	r3, r2
 800adfc:	ea4f 6016 	mov.w	r0, r6, lsr #24
 800ae00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ae04:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800ae08:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae0c:	ea83 0300 	eor.w	r3, r3, r0
 800ae10:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800ae14:	ea80 0003 	eor.w	r0, r0, r3
 800ae18:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800ae1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ae20:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800ae24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae28:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800ae2c:	ea80 0003 	eor.w	r0, r0, r3
 800ae30:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ae34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ae38:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 800ae3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae40:	ea80 0003 	eor.w	r0, r0, r3
 800ae44:	b2cb      	uxtb	r3, r1
 800ae46:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ae4a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ae4e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae52:	ea8c 0c03 	eor.w	ip, ip, r3
 800ae56:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800ae5a:	ea8c 0c03 	eor.w	ip, ip, r3
 800ae5e:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800ae62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ae66:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800ae6a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae6e:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800ae72:	ea8c 0c03 	eor.w	ip, ip, r3
 800ae76:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800ae7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ae7e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae82:	ea8c 0c03 	eor.w	ip, ip, r3
 800ae86:	fa5f f389 	uxtb.w	r3, r9
 800ae8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ae8e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800ae92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ae96:	ea8e 0e03 	eor.w	lr, lr, r3
 800ae9a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800ae9e:	ea8e 0e03 	eor.w	lr, lr, r3
 800aea2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800aea6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aeaa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800aeae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aeb2:	ea8e 0e03 	eor.w	lr, lr, r3
 800aeb6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800aeba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aebe:	b2f6      	uxtb	r6, r6
 800aec0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aec4:	f506 7640 	add.w	r6, r6, #768	; 0x300
 800aec8:	ea8e 0e03 	eor.w	lr, lr, r3
 800aecc:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800aed0:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 800aed4:	ea86 0603 	eor.w	r6, r6, r3
 800aed8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800aedc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800aee0:	ea86 0603 	eor.w	r6, r6, r3
 800aee4:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800aee8:	ea86 0603 	eor.w	r6, r6, r3
 800aeec:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800aef0:	ea86 0603 	eor.w	r6, r6, r3
 800aef4:	fa5f f38c 	uxtb.w	r3, ip
 800aef8:	ea4f 6210 	mov.w	r2, r0, lsr #24
 800aefc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800af00:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 800af04:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800af08:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800af0c:	ea81 0102 	eor.w	r1, r1, r2
 800af10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800af14:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800af18:	ea81 0102 	eor.w	r1, r1, r2
 800af1c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800af20:	f3ce 2307 	ubfx	r3, lr, #8, #8
 800af24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800af28:	ea81 0102 	eor.w	r1, r1, r2
 800af2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800af30:	fa5f f28e 	uxtb.w	r2, lr
 800af34:	ea81 0103 	eor.w	r1, r1, r3
 800af38:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800af3c:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800af40:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800af48:	ea82 0203 	eor.w	r2, r2, r3
 800af4c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800af50:	ea82 0203 	eor.w	r2, r2, r3
 800af54:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800af58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800af5c:	ea4f 691e 	mov.w	r9, lr, lsr #24
 800af60:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800af64:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800af68:	ea82 0203 	eor.w	r2, r2, r3
 800af6c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800af70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800af74:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 800af78:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800af7c:	ea82 0203 	eor.w	r2, r2, r3
 800af80:	b2f3      	uxtb	r3, r6
 800af82:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800af86:	ea4f 6616 	mov.w	r6, r6, lsr #24
 800af8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800af8e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800af92:	ea89 0903 	eor.w	r9, r9, r3
 800af96:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800af9a:	ea89 0303 	eor.w	r3, r9, r3
 800af9e:	f3cc 4907 	ubfx	r9, ip, #16, #8
 800afa2:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800afa6:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 800afaa:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800afae:	ea83 0309 	eor.w	r3, r3, r9
 800afb2:	f3c0 2907 	ubfx	r9, r0, #8, #8
 800afb6:	b2c0      	uxtb	r0, r0
 800afb8:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800afbc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800afc0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800afc4:	ea86 0600 	eor.w	r6, r6, r0
 800afc8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800afcc:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800afd0:	ea86 0600 	eor.w	r6, r6, r0
 800afd4:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 800afd8:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
 800afdc:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800afe0:	ea86 0600 	eor.w	r6, r6, r0
 800afe4:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 800afe8:	ea83 0309 	eor.w	r3, r3, r9
 800afec:	ea86 0600 	eor.w	r6, r6, r0
    if (r > 5) {
 800aff0:	f240 81e8 	bls.w	800b3c4 <wc_AesCbcDecrypt+0xd28>
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 800aff4:	fa5f fc82 	uxtb.w	ip, r2
 800aff8:	0e08      	lsrs	r0, r1, #24
 800affa:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 800affe:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b002:	f854 e02c 	ldr.w	lr, [r4, ip, lsl #2]
 800b006:	ea80 0e0e 	eor.w	lr, r0, lr
 800b00a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 800b00e:	ea8e 0e00 	eor.w	lr, lr, r0
 800b012:	f3c6 4007 	ubfx	r0, r6, #16, #8
 800b016:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800b01a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800b01e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b022:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800b026:	ea8e 0e00 	eor.w	lr, lr, r0
 800b02a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b02e:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800b032:	ea4f 6913 	mov.w	r9, r3, lsr #24
 800b036:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b03a:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b03e:	ea8e 0e00 	eor.w	lr, lr, r0
 800b042:	b2d8      	uxtb	r0, r3
 800b044:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800b048:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800b04c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b050:	ea8c 0c00 	eor.w	ip, ip, r0
 800b054:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 800b058:	ea8c 0c00 	eor.w	ip, ip, r0
 800b05c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b060:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800b064:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b068:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b06c:	ea8c 0c00 	eor.w	ip, ip, r0
 800b070:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800b074:	f500 7000 	add.w	r0, r0, #512	; 0x200
        if (r > 6) {
 800b078:	f1ba 0f07 	cmp.w	sl, #7
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 800b07c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b080:	ea8c 0c00 	eor.w	ip, ip, r0
 800b084:	b2f0      	uxtb	r0, r6
 800b086:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800b08a:	ea4f 6616 	mov.w	r6, r6, lsr #24
 800b08e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b092:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800b096:	ea89 0900 	eor.w	r9, r9, r0
 800b09a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 800b09e:	ea89 0000 	eor.w	r0, r9, r0
 800b0a2:	f3c2 4907 	ubfx	r9, r2, #16, #8
 800b0a6:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800b0aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800b0ae:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b0b2:	ea80 0009 	eor.w	r0, r0, r9
 800b0b6:	f3c1 2907 	ubfx	r9, r1, #8, #8
 800b0ba:	b2c9      	uxtb	r1, r1
 800b0bc:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800b0c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800b0c4:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800b0c8:	ea86 0601 	eor.w	r6, r6, r1
 800b0cc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800b0d0:	ea86 0601 	eor.w	r6, r6, r1
 800b0d4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800b0d8:	fa5f f38c 	uxtb.w	r3, ip
 800b0dc:	ea86 0601 	eor.w	r6, r6, r1
 800b0e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b0e4:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 800b0e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b0ec:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800b0f0:	ea86 0601 	eor.w	r6, r6, r1
 800b0f4:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 800b0f8:	ea81 0103 	eor.w	r1, r1, r3
 800b0fc:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800b100:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800b104:	ea81 0103 	eor.w	r1, r1, r3
 800b108:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800b10c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b110:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b114:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b118:	ea80 0009 	eor.w	r0, r0, r9
 800b11c:	ea81 0103 	eor.w	r1, r1, r3
 800b120:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b124:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b128:	b2c2      	uxtb	r2, r0
 800b12a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b12e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800b132:	ea81 0103 	eor.w	r1, r1, r3
 800b136:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800b13a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b13e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b142:	ea82 0203 	eor.w	r2, r2, r3
 800b146:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800b14a:	ea82 0203 	eor.w	r2, r2, r3
 800b14e:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800b152:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b156:	ea4f 6910 	mov.w	r9, r0, lsr #24
 800b15a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b15e:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b162:	ea82 0203 	eor.w	r2, r2, r3
 800b166:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800b16a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b16e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800b172:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b176:	ea82 0203 	eor.w	r2, r2, r3
 800b17a:	b2f3      	uxtb	r3, r6
 800b17c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b180:	ea4f 6616 	mov.w	r6, r6, lsr #24
 800b184:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b188:	ea89 0903 	eor.w	r9, r9, r3
 800b18c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800b190:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800b194:	ea89 0303 	eor.w	r3, r9, r3
 800b198:	f3cc 4907 	ubfx	r9, ip, #16, #8
 800b19c:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800b1a0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800b1a4:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b1a8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b1ac:	ea83 0309 	eor.w	r3, r3, r9
 800b1b0:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800b1b4:	fa5f fe8e 	uxtb.w	lr, lr
 800b1b8:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 800b1bc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800b1c0:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800b1c4:	ea86 0e0e 	eor.w	lr, r6, lr
 800b1c8:	f8d5 60bc 	ldr.w	r6, [r5, #188]	; 0xbc
 800b1cc:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800b1d0:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 800b1d4:	ea8e 0606 	eor.w	r6, lr, r6
 800b1d8:	ea86 0600 	eor.w	r6, r6, r0
 800b1dc:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b1e0:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 800b1e4:	ea83 0309 	eor.w	r3, r3, r9
 800b1e8:	ea86 0600 	eor.w	r6, r6, r0
        if (r > 6) {
 800b1ec:	f040 80ea 	bne.w	800b3c4 <wc_AesCbcDecrypt+0xd28>
            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
 800b1f0:	fa5f fc82 	uxtb.w	ip, r2
 800b1f4:	0e08      	lsrs	r0, r1, #24
 800b1f6:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 800b1fa:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b1fe:	f854 e02c 	ldr.w	lr, [r4, ip, lsl #2]
 800b202:	ea80 0e0e 	eor.w	lr, r0, lr
 800b206:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 800b20a:	ea8e 0e00 	eor.w	lr, lr, r0
 800b20e:	f3c6 4007 	ubfx	r0, r6, #16, #8
 800b212:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800b216:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800b21a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b21e:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800b222:	ea8e 0e00 	eor.w	lr, lr, r0
 800b226:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800b22a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800b22e:	ea4f 6913 	mov.w	r9, r3, lsr #24
 800b232:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b236:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b23a:	ea8e 0e00 	eor.w	lr, lr, r0
 800b23e:	b2d8      	uxtb	r0, r3
 800b240:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800b244:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800b248:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b24c:	ea8c 0c00 	eor.w	ip, ip, r0
 800b250:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800b254:	ea8c 0c00 	eor.w	ip, ip, r0
 800b258:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b25c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800b260:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b264:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b268:	ea8c 0c00 	eor.w	ip, ip, r0
 800b26c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800b270:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800b274:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b278:	ea8c 0c00 	eor.w	ip, ip, r0
 800b27c:	b2f0      	uxtb	r0, r6
 800b27e:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800b282:	0e36      	lsrs	r6, r6, #24
 800b284:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b288:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800b28c:	ea89 0900 	eor.w	r9, r9, r0
 800b290:	f8d5 00c8 	ldr.w	r0, [r5, #200]	; 0xc8
 800b294:	ea89 0000 	eor.w	r0, r9, r0
 800b298:	f3c2 4907 	ubfx	r9, r2, #16, #8
 800b29c:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800b2a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800b2a4:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b2a8:	ea80 0009 	eor.w	r0, r0, r9
 800b2ac:	f3c1 2907 	ubfx	r9, r1, #8, #8
 800b2b0:	b2c9      	uxtb	r1, r1
 800b2b2:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800b2b6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800b2ba:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800b2be:	404e      	eors	r6, r1
 800b2c0:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 800b2c4:	404e      	eors	r6, r1
 800b2c6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800b2ca:	fa5f f38c 	uxtb.w	r3, ip
 800b2ce:	404e      	eors	r6, r1
 800b2d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b2d4:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 800b2d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b2dc:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800b2e0:	404e      	eors	r6, r1
 800b2e2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 800b2e6:	4059      	eors	r1, r3
 800b2e8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 800b2ec:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800b2f0:	4059      	eors	r1, r3
 800b2f2:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800b2f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b2fa:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b2fe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b302:	ea80 0009 	eor.w	r0, r0, r9
 800b306:	4059      	eors	r1, r3
 800b308:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b30c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b310:	b2c2      	uxtb	r2, r0
 800b312:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b316:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800b31a:	4059      	eors	r1, r3
 800b31c:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800b320:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b324:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b328:	405a      	eors	r2, r3
 800b32a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 800b32e:	405a      	eors	r2, r3
 800b330:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800b334:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b338:	ea4f 6910 	mov.w	r9, r0, lsr #24
 800b33c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b340:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b344:	405a      	eors	r2, r3
 800b346:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800b34a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b34e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800b352:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b356:	405a      	eors	r2, r3
 800b358:	b2f3      	uxtb	r3, r6
 800b35a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b35e:	0e36      	lsrs	r6, r6, #24
 800b360:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b364:	ea89 0903 	eor.w	r9, r9, r3
 800b368:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800b36c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800b370:	ea89 0303 	eor.w	r3, r9, r3
 800b374:	f3cc 4907 	ubfx	r9, ip, #16, #8
 800b378:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800b37c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800b380:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b384:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b388:	ea83 0309 	eor.w	r3, r3, r9
 800b38c:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800b390:	fa5f fe8e 	uxtb.w	lr, lr
 800b394:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 800b398:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800b39c:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800b3a0:	ea86 0e0e 	eor.w	lr, r6, lr
 800b3a4:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
 800b3a8:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800b3ac:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 800b3b0:	ea8e 0606 	eor.w	r6, lr, r6
 800b3b4:	4046      	eors	r6, r0
 800b3b6:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800b3ba:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 800b3be:	ea83 0309 	eor.w	r3, r3, r9
 800b3c2:	4046      	eors	r6, r0
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 800b3c4:	0e10      	lsrs	r0, r2, #24
    rk += r * 8;
 800b3c6:	eb05 1e4a 	add.w	lr, r5, sl, lsl #5
 800b3ca:	ea4f 1c4a 	mov.w	ip, sl, lsl #5
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 800b3ce:	f817 a000 	ldrb.w	sl, [r7, r0]
 800b3d2:	b2d8      	uxtb	r0, r3
 800b3d4:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800b3d8:	5c38      	ldrb	r0, [r7, r0]
 800b3da:	ea40 600a 	orr.w	r0, r0, sl, lsl #24
 800b3de:	f817 a009 	ldrb.w	sl, [r7, r9]
 800b3e2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 800b3e6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 800b3ea:	f817 a009 	ldrb.w	sl, [r7, r9]
 800b3ee:	ea40 2a0a 	orr.w	sl, r0, sl, lsl #8
                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
 800b3f2:	f8de 0004 	ldr.w	r0, [lr, #4]
 800b3f6:	ea8a 0a00 	eor.w	sl, sl, r0
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
 800b3fa:	0e18      	lsrs	r0, r3, #24
 800b3fc:	f3c2 4907 	ubfx	r9, r2, #16, #8
 800b400:	f817 b000 	ldrb.w	fp, [r7, r0]
 800b404:	b2f0      	uxtb	r0, r6
 800b406:	5c38      	ldrb	r0, [r7, r0]
 800b408:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 800b40c:	f817 b009 	ldrb.w	fp, [r7, r9]
 800b410:	f3c1 2907 	ubfx	r9, r1, #8, #8
 800b414:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 800b418:	f817 b009 	ldrb.w	fp, [r7, r9]
 800b41c:	ea40 2b0b 	orr.w	fp, r0, fp, lsl #8
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
 800b420:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b424:	ea8b 0b00 	eor.w	fp, fp, r0
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800b428:	0e30      	lsrs	r0, r6, #24
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b42a:	f3c6 4607 	ubfx	r6, r6, #16, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800b42e:	f817 9000 	ldrb.w	r9, [r7, r0]
 800b432:	b2c8      	uxtb	r0, r1
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b434:	0e09      	lsrs	r1, r1, #24
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800b436:	5c38      	ldrb	r0, [r7, r0]
 800b438:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
 800b43c:	f3c3 4907 	ubfx	r9, r3, #16, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b440:	f3c3 2307 	ubfx	r3, r3, #8, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800b444:	f817 9009 	ldrb.w	r9, [r7, r9]
 800b448:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800b44c:	f3c2 2907 	ubfx	r9, r2, #8, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b450:	b2d2      	uxtb	r2, r2
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800b452:	f817 9009 	ldrb.w	r9, [r7, r9]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b456:	5cba      	ldrb	r2, [r7, r2]
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800b458:	ea40 2909 	orr.w	r9, r0, r9, lsl #8
                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
 800b45c:	f8de 000c 	ldr.w	r0, [lr, #12]
 800b460:	ea89 0900 	eor.w	r9, r9, r0
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b464:	5c78      	ldrb	r0, [r7, r1]
 800b466:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b46a:	5dba      	ldrb	r2, [r7, r6]
 800b46c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b470:	5cfa      	ldrb	r2, [r7, r3]
                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
 800b472:	f855 300c 	ldr.w	r3, [r5, ip]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800b476:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    s0 = ByteReverseWord32(s0);
 800b47a:	4058      	eors	r0, r3
 800b47c:	f7fd feb2 	bl	80091e4 <ByteReverseWord32>
 800b480:	9004      	str	r0, [sp, #16]
    s1 = ByteReverseWord32(s1);
 800b482:	4650      	mov	r0, sl
 800b484:	f7fd feae 	bl	80091e4 <ByteReverseWord32>
 800b488:	9005      	str	r0, [sp, #20]
    s2 = ByteReverseWord32(s2);
 800b48a:	4658      	mov	r0, fp
 800b48c:	f7fd feaa 	bl	80091e4 <ByteReverseWord32>
 800b490:	9006      	str	r0, [sp, #24]
    s3 = ByteReverseWord32(s3);
 800b492:	4648      	mov	r0, r9
 800b494:	f7fd fea6 	bl	80091e4 <ByteReverseWord32>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 800b498:	2204      	movs	r2, #4
    s3 = ByteReverseWord32(s3);
 800b49a:	9007      	str	r0, [sp, #28]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 800b49c:	a904      	add	r1, sp, #16
 800b49e:	4640      	mov	r0, r8
 800b4a0:	f012 fa80 	bl	801d9a4 <memcpy>
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	eb08 0002 	add.w	r0, r8, r2
 800b4aa:	a905      	add	r1, sp, #20
 800b4ac:	f012 fa7a 	bl	801d9a4 <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	a906      	add	r1, sp, #24
 800b4b4:	f108 0008 	add.w	r0, r8, #8
 800b4b8:	f012 fa74 	bl	801d9a4 <memcpy>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 800b4bc:	f105 06f8 	add.w	r6, r5, #248	; 0xf8
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 800b4c0:	2204      	movs	r2, #4
 800b4c2:	a907      	add	r1, sp, #28
 800b4c4:	f108 000c 	add.w	r0, r8, #12
 800b4c8:	f012 fa6c 	bl	801d9a4 <memcpy>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	2210      	movs	r2, #16
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	f7fd febc 	bl	800924e <xorbuf>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
 800b4d6:	9902      	ldr	r1, [sp, #8]
 800b4d8:	2210      	movs	r2, #16
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f012 fa62 	bl	801d9a4 <memcpy>
            in  += AES_BLOCK_SIZE;
 800b4e0:	9b01      	ldr	r3, [sp, #4]
 800b4e2:	3310      	adds	r3, #16
            out += AES_BLOCK_SIZE;
 800b4e4:	f108 0810 	add.w	r8, r8, #16
            in  += AES_BLOCK_SIZE;
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	f7ff b8fd 	b.w	800a6e8 <wc_AesCbcDecrypt+0x4c>
        return KEYUSAGE_E;
 800b4ee:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 800b4f2:	f7ff b8e4 	b.w	800a6be <wc_AesCbcDecrypt+0x22>
            return BAD_FUNC_ARG;
 800b4f6:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b4fa:	f7ff b8e0 	b.w	800a6be <wc_AesCbcDecrypt+0x22>
 800b4fe:	bf00      	nop

0800b500 <wc_AesGcmSetKey>:
{
 800b500:	b570      	push	{r4, r5, r6, lr}
    if (!((len == 16) || (len == 24) || (len == 32)))
 800b502:	f022 0308 	bic.w	r3, r2, #8
 800b506:	2b10      	cmp	r3, #16
{
 800b508:	b086      	sub	sp, #24
 800b50a:	4604      	mov	r4, r0
 800b50c:	460e      	mov	r6, r1
 800b50e:	4615      	mov	r5, r2
    if (!((len == 16) || (len == 24) || (len == 32)))
 800b510:	d001      	beq.n	800b516 <wc_AesGcmSetKey+0x16>
 800b512:	2a20      	cmp	r2, #32
 800b514:	d116      	bne.n	800b544 <wc_AesGcmSetKey+0x44>
    if (aes == NULL) {
 800b516:	b1ac      	cbz	r4, 800b544 <wc_AesGcmSetKey+0x44>
    XMEMSET(iv, 0, AES_BLOCK_SIZE);
 800b518:	2210      	movs	r2, #16
 800b51a:	2100      	movs	r1, #0
 800b51c:	a802      	add	r0, sp, #8
 800b51e:	f012 fa69 	bl	801d9f4 <memset>
    ret = wc_AesSetKey(aes, key, len, iv, AES_ENCRYPTION);
 800b522:	2300      	movs	r3, #0
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	462a      	mov	r2, r5
 800b528:	ab02      	add	r3, sp, #8
 800b52a:	4631      	mov	r1, r6
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7fe fe5b 	bl	800a1e8 <wc_AesSetKey>
    if (ret == 0)
 800b532:	b928      	cbnz	r0, 800b540 <wc_AesGcmSetKey+0x40>
        ret = wc_AesEncrypt(aes, iv, aes->gcm.H);
 800b534:	f504 7292 	add.w	r2, r4, #292	; 0x124
 800b538:	a902      	add	r1, sp, #8
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7fd fec2 	bl	80092c4 <wc_AesEncrypt>
}
 800b540:	b006      	add	sp, #24
 800b542:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 800b544:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b548:	e7fa      	b.n	800b540 <wc_AesGcmSetKey+0x40>

0800b54a <GHASH>:


void GHASH(Gcm* gcm, const byte* a, word32 aSz, const byte* c,
    word32 cSz, byte* s, word32 sSz)
{
 800b54a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	460f      	mov	r7, r1
 800b552:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b554:	4614      	mov	r4, r2
 800b556:	461e      	mov	r6, r3
    byte x[AES_BLOCK_SIZE];
    byte scratch[AES_BLOCK_SIZE];
    word32 blocks, partial;
    byte* h;

    if (gcm == NULL) {
 800b558:	4680      	mov	r8, r0
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f000 8087 	beq.w	800b66e <GHASH+0x124>
        return;
    }

    h = gcm->H;
    XMEMSET(x, 0, AES_BLOCK_SIZE);
 800b560:	2210      	movs	r2, #16
 800b562:	2100      	movs	r1, #0
 800b564:	4668      	mov	r0, sp
 800b566:	f012 fa45 	bl	801d9f4 <memset>

    /* Hash in A, the Additional Authentication Data */
    if (aSz != 0 && a != NULL) {
 800b56a:	b1fc      	cbz	r4, 800b5ac <GHASH+0x62>
 800b56c:	b1f7      	cbz	r7, 800b5ac <GHASH+0x62>
        blocks = aSz / AES_BLOCK_SIZE;
        partial = aSz % AES_BLOCK_SIZE;
 800b56e:	f024 090f 	bic.w	r9, r4, #15
 800b572:	f004 0a0f 	and.w	sl, r4, #15
        while (blocks--) {
 800b576:	44b9      	add	r9, r7
 800b578:	454f      	cmp	r7, r9
 800b57a:	d17b      	bne.n	800b674 <GHASH+0x12a>
            xorbuf(x, a, AES_BLOCK_SIZE);
            GMULT(x, h);
            a += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
 800b57c:	f1ba 0f00 	cmp.w	sl, #0
 800b580:	d014      	beq.n	800b5ac <GHASH+0x62>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
 800b582:	2210      	movs	r2, #16
 800b584:	2100      	movs	r1, #0
 800b586:	eb0d 0002 	add.w	r0, sp, r2
 800b58a:	f012 fa33 	bl	801d9f4 <memset>
            XMEMCPY(scratch, a, partial);
 800b58e:	4652      	mov	r2, sl
 800b590:	4639      	mov	r1, r7
 800b592:	a804      	add	r0, sp, #16
 800b594:	f012 fa06 	bl	801d9a4 <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
 800b598:	2210      	movs	r2, #16
 800b59a:	eb0d 0102 	add.w	r1, sp, r2
 800b59e:	4668      	mov	r0, sp
 800b5a0:	f7fd fe55 	bl	800924e <xorbuf>
            GMULT(x, h);
 800b5a4:	4641      	mov	r1, r8
 800b5a6:	4668      	mov	r0, sp
 800b5a8:	f7fe fdc8 	bl	800a13c <GMULT>
        }
    }

    /* Hash in C, the Ciphertext */
    if (cSz != 0 && c != NULL) {
 800b5ac:	b1fd      	cbz	r5, 800b5ee <GHASH+0xa4>
 800b5ae:	b1f6      	cbz	r6, 800b5ee <GHASH+0xa4>
        blocks = cSz / AES_BLOCK_SIZE;
        partial = cSz % AES_BLOCK_SIZE;
 800b5b0:	f025 070f 	bic.w	r7, r5, #15
 800b5b4:	f005 090f 	and.w	r9, r5, #15
        while (blocks--) {
 800b5b8:	4437      	add	r7, r6
 800b5ba:	42be      	cmp	r6, r7
 800b5bc:	d165      	bne.n	800b68a <GHASH+0x140>
            xorbuf(x, c, AES_BLOCK_SIZE);
            GMULT(x, h);
            c += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
 800b5be:	f1b9 0f00 	cmp.w	r9, #0
 800b5c2:	d014      	beq.n	800b5ee <GHASH+0xa4>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
 800b5c4:	2210      	movs	r2, #16
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	eb0d 0002 	add.w	r0, sp, r2
 800b5cc:	f012 fa12 	bl	801d9f4 <memset>
            XMEMCPY(scratch, c, partial);
 800b5d0:	464a      	mov	r2, r9
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	a804      	add	r0, sp, #16
 800b5d6:	f012 f9e5 	bl	801d9a4 <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
 800b5da:	2210      	movs	r2, #16
 800b5dc:	eb0d 0102 	add.w	r1, sp, r2
 800b5e0:	4668      	mov	r0, sp
 800b5e2:	f7fd fe34 	bl	800924e <xorbuf>
            GMULT(x, h);
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	4668      	mov	r0, sp
 800b5ea:	f7fe fda7 	bl	800a13c <GMULT>
    buf[0] = (byte)(szHi >> 24);
 800b5ee:	2300      	movs	r3, #0
    sz <<= 3;
 800b5f0:	00e2      	lsls	r2, r4, #3
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
 800b5f2:	0f61      	lsrs	r1, r4, #29
    buf[0] = (byte)(szHi >> 24);
 800b5f4:	f88d 3010 	strb.w	r3, [sp, #16]
    buf[1] = (byte)(szHi >> 16);
 800b5f8:	f88d 3011 	strb.w	r3, [sp, #17]
    buf[2] = (byte)(szHi >>  8);
 800b5fc:	f88d 3012 	strb.w	r3, [sp, #18]
    buf[0] = (byte)(szHi >> 24);
 800b600:	f88d 3018 	strb.w	r3, [sp, #24]
    buf[1] = (byte)(szHi >> 16);
 800b604:	f88d 3019 	strb.w	r3, [sp, #25]
    buf[2] = (byte)(szHi >>  8);
 800b608:	f88d 301a 	strb.w	r3, [sp, #26]
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
 800b60c:	0f6b      	lsrs	r3, r5, #29
    buf[3] = (byte)szHi;
 800b60e:	f88d 1013 	strb.w	r1, [sp, #19]
    buf[7] = (byte)sz;
 800b612:	f88d 2017 	strb.w	r2, [sp, #23]
    buf[4] = (byte)(sz >> 24);
 800b616:	f3c4 5147 	ubfx	r1, r4, #21, #8
    sz <<= 3;
 800b61a:	00ea      	lsls	r2, r5, #3
    buf[3] = (byte)szHi;
 800b61c:	f88d 301b 	strb.w	r3, [sp, #27]
    buf[4] = (byte)(sz >> 24);
 800b620:	f3c5 5347 	ubfx	r3, r5, #21, #8
 800b624:	f88d 1014 	strb.w	r1, [sp, #20]
 800b628:	f88d 301c 	strb.w	r3, [sp, #28]
    buf[5] = (byte)(sz >> 16);
 800b62c:	f3c4 314f 	ubfx	r1, r4, #13, #16
 800b630:	f3c5 334f 	ubfx	r3, r5, #13, #16
    buf[7] = (byte)sz;
 800b634:	f88d 201f 	strb.w	r2, [sp, #31]
    }

    /* Hash in the lengths of A and C in bits */
    FlattenSzInBits(&scratch[0], aSz);
    FlattenSzInBits(&scratch[8], cSz);
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 800b638:	2210      	movs	r2, #16
    buf[5] = (byte)(sz >> 16);
 800b63a:	f88d 1015 	strb.w	r1, [sp, #21]
 800b63e:	f88d 301d 	strb.w	r3, [sp, #29]
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 800b642:	eb0d 0102 	add.w	r1, sp, r2
    buf[6] = (byte)(sz >>  8);
 800b646:	f3c5 1357 	ubfx	r3, r5, #5, #24
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 800b64a:	4668      	mov	r0, sp
    buf[6] = (byte)(sz >>  8);
 800b64c:	f3c4 1457 	ubfx	r4, r4, #5, #24
 800b650:	f88d 301e 	strb.w	r3, [sp, #30]
 800b654:	f88d 4016 	strb.w	r4, [sp, #22]
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 800b658:	f7fd fdf9 	bl	800924e <xorbuf>
    GMULT(x, h);
 800b65c:	4641      	mov	r1, r8
 800b65e:	4668      	mov	r0, sp
 800b660:	f7fe fd6c 	bl	800a13c <GMULT>

    /* Copy the result into s. */
    XMEMCPY(s, x, sSz);
 800b664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b666:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b668:	4669      	mov	r1, sp
 800b66a:	f012 f99b 	bl	801d9a4 <memcpy>
}
 800b66e:	b008      	add	sp, #32
 800b670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            xorbuf(x, a, AES_BLOCK_SIZE);
 800b674:	4639      	mov	r1, r7
 800b676:	2210      	movs	r2, #16
 800b678:	4668      	mov	r0, sp
 800b67a:	f7fd fde8 	bl	800924e <xorbuf>
            GMULT(x, h);
 800b67e:	4641      	mov	r1, r8
 800b680:	4668      	mov	r0, sp
 800b682:	f7fe fd5b 	bl	800a13c <GMULT>
            a += AES_BLOCK_SIZE;
 800b686:	3710      	adds	r7, #16
 800b688:	e776      	b.n	800b578 <GHASH+0x2e>
            xorbuf(x, c, AES_BLOCK_SIZE);
 800b68a:	4631      	mov	r1, r6
 800b68c:	2210      	movs	r2, #16
 800b68e:	4668      	mov	r0, sp
 800b690:	f7fd fddd 	bl	800924e <xorbuf>
            GMULT(x, h);
 800b694:	4641      	mov	r1, r8
 800b696:	4668      	mov	r0, sp
 800b698:	f7fe fd50 	bl	800a13c <GMULT>
            c += AES_BLOCK_SIZE;
 800b69c:	3610      	adds	r6, #16
 800b69e:	e78c      	b.n	800b5ba <GHASH+0x70>

0800b6a0 <wc_AesGcmEncrypt>:
/* Software AES - GCM Encrypt */
int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                   const byte* iv, word32 ivSz,
                   byte* authTag, word32 authTagSz,
                   const byte* authIn, word32 authInSz)
{
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	b093      	sub	sp, #76	; 0x4c
 800b6a6:	4690      	mov	r8, r2
 800b6a8:	461f      	mov	r7, r3
 800b6aa:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800b6ae:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800b6b2:	4689      	mov	r9, r1
    /* argument checks */
    if (aes == NULL || authTagSz > AES_BLOCK_SIZE || ivSz == 0) {
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d077      	beq.n	800b7aa <wc_AesGcmEncrypt+0x10a>
 800b6ba:	2a00      	cmp	r2, #0
 800b6bc:	d075      	beq.n	800b7aa <wc_AesGcmEncrypt+0x10a>
        return BAD_FUNC_ARG;
    }

    if (authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
 800b6be:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800b6c0:	390c      	subs	r1, #12
 800b6c2:	2904      	cmp	r1, #4
 800b6c4:	d871      	bhi.n	800b7aa <wc_AesGcmEncrypt+0x10a>
    if (ivSz == GCM_NONCE_MID_SZ) {
 800b6c6:	2a0c      	cmp	r2, #12
    word32 blocks = sz / AES_BLOCK_SIZE;
 800b6c8:	ea4f 1417 	mov.w	r4, r7, lsr #4
    if (ivSz == GCM_NONCE_MID_SZ) {
 800b6cc:	ae06      	add	r6, sp, #24
 800b6ce:	d149      	bne.n	800b764 <wc_AesGcmEncrypt+0xc4>
        XMEMCPY(counter, iv, ivSz);
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f012 f966 	bl	801d9a4 <memcpy>
        XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 800b6d8:	2203      	movs	r2, #3
 800b6da:	2100      	movs	r1, #0
 800b6dc:	a809      	add	r0, sp, #36	; 0x24
 800b6de:	f012 f989 	bl	801d9f4 <memset>
        counter[AES_BLOCK_SIZE - 1] = 1;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    XMEMCPY(initialCounter, counter, AES_BLOCK_SIZE);
 800b6e8:	2210      	movs	r2, #16
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	a80a      	add	r0, sp, #40	; 0x28
 800b6ee:	f012 f959 	bl	801d9a4 <memcpy>
        while (blocks--) {
 800b6f2:	eb09 1304 	add.w	r3, r9, r4, lsl #4
 800b6f6:	9305      	str	r3, [sp, #20]
    byte* c = out;
 800b6f8:	46ca      	mov	sl, r9
        while (blocks--) {
 800b6fa:	9b05      	ldr	r3, [sp, #20]
 800b6fc:	459a      	cmp	sl, r3
 800b6fe:	d13c      	bne.n	800b77a <wc_AesGcmEncrypt+0xda>
    if (partial != 0) {
 800b700:	f017 030f 	ands.w	r3, r7, #15
 800b704:	d010      	beq.n	800b728 <wc_AesGcmEncrypt+0x88>
        IncrementGcmCounter(counter);
 800b706:	4630      	mov	r0, r6
 800b708:	9305      	str	r3, [sp, #20]
        ret = wc_AesEncrypt(aes, counter, scratch);
 800b70a:	4631      	mov	r1, r6
        IncrementGcmCounter(counter);
 800b70c:	f7fd fdce 	bl	80092ac <IncrementGcmCounter>
        ret = wc_AesEncrypt(aes, counter, scratch);
 800b710:	aa0e      	add	r2, sp, #56	; 0x38
 800b712:	4628      	mov	r0, r5
 800b714:	f7fd fdd6 	bl	80092c4 <wc_AesEncrypt>
        if (ret != 0)
 800b718:	4604      	mov	r4, r0
 800b71a:	b9f8      	cbnz	r0, 800b75c <wc_AesGcmEncrypt+0xbc>
        xorbufout(c, scratch, p, partial);
 800b71c:	9b05      	ldr	r3, [sp, #20]
 800b71e:	4642      	mov	r2, r8
 800b720:	a90e      	add	r1, sp, #56	; 0x38
 800b722:	4650      	mov	r0, sl
 800b724:	f7fd fd60 	bl	80091e8 <xorbufout>
    if (authTag) {
 800b728:	f1bb 0f00 	cmp.w	fp, #0
 800b72c:	d03b      	beq.n	800b7a6 <wc_AesGcmEncrypt+0x106>
        GHASH(&aes->gcm, authIn, authInSz, out, sz, authTag, authTagSz);
 800b72e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b730:	9700      	str	r7, [sp, #0]
 800b732:	e9dd 1220 	ldrd	r1, r2, [sp, #128]	; 0x80
 800b736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b73a:	f505 7092 	add.w	r0, r5, #292	; 0x124
 800b73e:	464b      	mov	r3, r9
 800b740:	f7ff ff03 	bl	800b54a <GHASH>
        ret = wc_AesEncrypt(aes, initialCounter, scratch);
 800b744:	aa0e      	add	r2, sp, #56	; 0x38
 800b746:	a90a      	add	r1, sp, #40	; 0x28
 800b748:	4628      	mov	r0, r5
 800b74a:	f7fd fdbb 	bl	80092c4 <wc_AesEncrypt>
        if (ret != 0)
 800b74e:	4604      	mov	r4, r0
 800b750:	b920      	cbnz	r0, 800b75c <wc_AesGcmEncrypt+0xbc>
        xorbuf(authTag, scratch, authTagSz);
 800b752:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b754:	a90e      	add	r1, sp, #56	; 0x38
 800b756:	4658      	mov	r0, fp
 800b758:	f7fd fd79 	bl	800924e <xorbuf>
#endif
    {
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
                                                              authIn, authInSz);
    }
}
 800b75c:	4620      	mov	r0, r4
 800b75e:	b013      	add	sp, #76	; 0x4c
 800b760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 800b764:	2110      	movs	r1, #16
 800b766:	9200      	str	r2, [sp, #0]
 800b768:	2200      	movs	r2, #0
 800b76a:	e9cd 6101 	strd	r6, r1, [sp, #4]
 800b76e:	f500 7092 	add.w	r0, r0, #292	; 0x124
 800b772:	4611      	mov	r1, r2
 800b774:	f7ff fee9 	bl	800b54a <GHASH>
 800b778:	e7b6      	b.n	800b6e8 <wc_AesGcmEncrypt+0x48>
            IncrementGcmCounter(counter);
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7fd fd96 	bl	80092ac <IncrementGcmCounter>
            ret = wc_AesEncrypt(aes, counter, scratch);
 800b780:	4631      	mov	r1, r6
 800b782:	aa0e      	add	r2, sp, #56	; 0x38
 800b784:	4628      	mov	r0, r5
 800b786:	f7fd fd9d 	bl	80092c4 <wc_AesEncrypt>
            if (ret != 0)
 800b78a:	4604      	mov	r4, r0
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d1e5      	bne.n	800b75c <wc_AesGcmEncrypt+0xbc>
            xorbufout(c, scratch, p, AES_BLOCK_SIZE);
 800b790:	4642      	mov	r2, r8
 800b792:	4650      	mov	r0, sl
 800b794:	2310      	movs	r3, #16
 800b796:	a90e      	add	r1, sp, #56	; 0x38
 800b798:	f7fd fd26 	bl	80091e8 <xorbufout>
            p += AES_BLOCK_SIZE;
 800b79c:	f108 0810 	add.w	r8, r8, #16
            c += AES_BLOCK_SIZE;
 800b7a0:	f10a 0a10 	add.w	sl, sl, #16
 800b7a4:	e7a9      	b.n	800b6fa <wc_AesGcmEncrypt+0x5a>
 800b7a6:	465c      	mov	r4, fp
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
 800b7a8:	e7d8      	b.n	800b75c <wc_AesGcmEncrypt+0xbc>
        return BAD_FUNC_ARG;
 800b7aa:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800b7ae:	e7d5      	b.n	800b75c <wc_AesGcmEncrypt+0xbc>

0800b7b0 <wc_AesGcmDecrypt>:
/* Software AES - GCM Decrypt */
int wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                     const byte* iv, word32 ivSz,
                     const byte* authTag, word32 authTagSz,
                     const byte* authIn, word32 authInSz)
{
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	b095      	sub	sp, #84	; 0x54
 800b7b6:	4616      	mov	r6, r2
 800b7b8:	461c      	mov	r4, r3
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
#endif

    /* argument checks */
    /* If the sz is non-zero, both in and out must be set. If sz is 0,
     * in and out are don't cares, as this is is the GMAC case. */
    if (aes == NULL || iv == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	f000 808b 	beq.w	800b8de <wc_AesGcmDecrypt+0x12e>
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 8088 	beq.w	800b8de <wc_AesGcmDecrypt+0x12e>
 800b7ce:	b12c      	cbz	r4, 800b7dc <wc_AesGcmDecrypt+0x2c>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	f000 8084 	beq.w	800b8de <wc_AesGcmDecrypt+0x12e>
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	f000 8081 	beq.w	800b8de <wc_AesGcmDecrypt+0x12e>
 800b7dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b7de:	2900      	cmp	r1, #0
 800b7e0:	d07d      	beq.n	800b8de <wc_AesGcmDecrypt+0x12e>
        authTag == NULL || authTagSz > AES_BLOCK_SIZE || authTagSz == 0 ||
 800b7e2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800b7e4:	3901      	subs	r1, #1
 800b7e6:	290f      	cmp	r1, #15
 800b7e8:	d879      	bhi.n	800b8de <wc_AesGcmDecrypt+0x12e>
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d077      	beq.n	800b8de <wc_AesGcmDecrypt+0x12e>
    if (ivSz == GCM_NONCE_MID_SZ) {
 800b7ee:	2a0c      	cmp	r2, #12
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 800b7f0:	f508 7792 	add.w	r7, r8, #292	; 0x124
 800b7f4:	f10d 0910 	add.w	r9, sp, #16
    if (ivSz == GCM_NONCE_MID_SZ) {
 800b7f8:	d154      	bne.n	800b8a4 <wc_AesGcmDecrypt+0xf4>
        XMEMCPY(counter, iv, ivSz);
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4648      	mov	r0, r9
 800b7fe:	f012 f8d1 	bl	801d9a4 <memcpy>
        XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 800b802:	2203      	movs	r2, #3
 800b804:	2100      	movs	r1, #0
 800b806:	a807      	add	r0, sp, #28
 800b808:	f012 f8f4 	bl	801d9f4 <memset>
        counter[AES_BLOCK_SIZE - 1] = 1;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f88d 301f 	strb.w	r3, [sp, #31]
    GHASH(&aes->gcm, authIn, authInSz, in, sz, Tprime, sizeof(Tprime));
 800b812:	f04f 0b10 	mov.w	fp, #16
 800b816:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800b81a:	e9dd 1222 	ldrd	r1, r2, [sp, #136]	; 0x88
 800b81e:	4638      	mov	r0, r7
 800b820:	4633      	mov	r3, r6
 800b822:	e9cd 4a00 	strd	r4, sl, [sp]
 800b826:	f8cd b008 	str.w	fp, [sp, #8]
 800b82a:	f7ff fe8e 	bl	800b54a <GHASH>
    ret = wc_AesEncrypt(aes, counter, EKY0);
 800b82e:	aa10      	add	r2, sp, #64	; 0x40
 800b830:	4649      	mov	r1, r9
 800b832:	4640      	mov	r0, r8
 800b834:	f7fd fd46 	bl	80092c4 <wc_AesEncrypt>
    if (ret != 0)
 800b838:	4607      	mov	r7, r0
 800b83a:	bb80      	cbnz	r0, 800b89e <wc_AesGcmDecrypt+0xee>
    xorbuf(Tprime, EKY0, sizeof(Tprime));
 800b83c:	465a      	mov	r2, fp
 800b83e:	a910      	add	r1, sp, #64	; 0x40
 800b840:	4650      	mov	r0, sl
 800b842:	f7fd fd04 	bl	800924e <xorbuf>
        while (blocks--) {
 800b846:	f024 0b0f 	bic.w	fp, r4, #15
 800b84a:	44ab      	add	fp, r5
 800b84c:	455d      	cmp	r5, fp
 800b84e:	d133      	bne.n	800b8b8 <wc_AesGcmDecrypt+0x108>
    if (partial != 0) {
 800b850:	f014 040f 	ands.w	r4, r4, #15
 800b854:	d012      	beq.n	800b87c <wc_AesGcmDecrypt+0xcc>
        IncrementGcmCounter(counter);
 800b856:	4648      	mov	r0, r9
 800b858:	f7fd fd28 	bl	80092ac <IncrementGcmCounter>
        ret = wc_AesEncrypt(aes, counter, scratch);
 800b85c:	4649      	mov	r1, r9
 800b85e:	aa08      	add	r2, sp, #32
 800b860:	4640      	mov	r0, r8
 800b862:	f7fd fd2f 	bl	80092c4 <wc_AesEncrypt>
        if (ret != 0)
 800b866:	b9d0      	cbnz	r0, 800b89e <wc_AesGcmDecrypt+0xee>
        xorbuf(scratch, c, partial);
 800b868:	4622      	mov	r2, r4
 800b86a:	4631      	mov	r1, r6
 800b86c:	a808      	add	r0, sp, #32
 800b86e:	f7fd fcee 	bl	800924e <xorbuf>
        XMEMCPY(p, scratch, partial);
 800b872:	4622      	mov	r2, r4
 800b874:	a908      	add	r1, sp, #32
 800b876:	4628      	mov	r0, r5
 800b878:	f012 f894 	bl	801d9a4 <memcpy>
    for (i = 0; i < length; i++) {
 800b87c:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800b880:	189a      	adds	r2, r3, r2
        compareSum |= a[i] ^ b[i];
 800b882:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b886:	f81a 0b01 	ldrb.w	r0, [sl], #1
    for (i = 0; i < length; i++) {
 800b88a:	429a      	cmp	r2, r3
        compareSum |= a[i] ^ b[i];
 800b88c:	ea81 0100 	eor.w	r1, r1, r0
 800b890:	ea47 0701 	orr.w	r7, r7, r1
    for (i = 0; i < length; i++) {
 800b894:	d1f5      	bne.n	800b882 <wc_AesGcmDecrypt+0xd2>
    res = 0 - (sword32)(((word32)(0 - res)) >> 31U);
 800b896:	4278      	negs	r0, r7
 800b898:	17c0      	asrs	r0, r0, #31
    ret = (ret & ~res) | (res & AES_GCM_AUTH_E);
 800b89a:	f020 00b3 	bic.w	r0, r0, #179	; 0xb3
#endif
    {
        return AES_GCM_decrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
                                                              authIn, authInSz);
    }
}
 800b89e:	b015      	add	sp, #84	; 0x54
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 800b8a4:	2110      	movs	r1, #16
 800b8a6:	9200      	str	r2, [sp, #0]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	e9cd 9101 	strd	r9, r1, [sp, #4]
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	f7ff fe4a 	bl	800b54a <GHASH>
 800b8b6:	e7ac      	b.n	800b812 <wc_AesGcmDecrypt+0x62>
            IncrementGcmCounter(counter);
 800b8b8:	4648      	mov	r0, r9
 800b8ba:	f7fd fcf7 	bl	80092ac <IncrementGcmCounter>
            ret = wc_AesEncrypt(aes, counter, scratch);
 800b8be:	4649      	mov	r1, r9
 800b8c0:	aa08      	add	r2, sp, #32
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	f7fd fcfe 	bl	80092c4 <wc_AesEncrypt>
            if (ret != 0)
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1e8      	bne.n	800b89e <wc_AesGcmDecrypt+0xee>
            xorbufout(p, scratch, c, AES_BLOCK_SIZE);
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	2310      	movs	r3, #16
 800b8d2:	a908      	add	r1, sp, #32
 800b8d4:	f7fd fc88 	bl	80091e8 <xorbufout>
            p += AES_BLOCK_SIZE;
 800b8d8:	3510      	adds	r5, #16
            c += AES_BLOCK_SIZE;
 800b8da:	3610      	adds	r6, #16
 800b8dc:	e7b6      	b.n	800b84c <wc_AesGcmDecrypt+0x9c>
        return BAD_FUNC_ARG;
 800b8de:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b8e2:	e7dc      	b.n	800b89e <wc_AesGcmDecrypt+0xee>

0800b8e4 <wc_AesGcmSetIV>:


int wc_AesGcmSetIV(Aes* aes, word32 ivSz,
                   const byte* ivFixed, word32 ivFixedSz,
                   WC_RNG* rng)
{
 800b8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e8:	9f06      	ldr	r7, [sp, #24]
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	461c      	mov	r4, r3
 800b8ee:	4611      	mov	r1, r2
    int ret = 0;

    if (aes == NULL || rng == NULL || !CheckAesGcmIvSize((int)ivSz) ||
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	b140      	cbz	r0, 800b906 <wc_AesGcmSetIV+0x22>
 800b8f4:	b13f      	cbz	r7, 800b906 <wc_AesGcmSetIV+0x22>
            ivSz == GCM_NONCE_MID_SZ ||
 800b8f6:	f026 0304 	bic.w	r3, r6, #4
 800b8fa:	2b08      	cmp	r3, #8
 800b8fc:	d001      	beq.n	800b902 <wc_AesGcmSetIV+0x1e>
 800b8fe:	2e10      	cmp	r6, #16
 800b900:	d101      	bne.n	800b906 <wc_AesGcmSetIV+0x22>
    if (aes == NULL || rng == NULL || !CheckAesGcmIvSize((int)ivSz) ||
 800b902:	b919      	cbnz	r1, 800b90c <wc_AesGcmSetIV+0x28>
        (ivFixed == NULL && ivFixedSz != 0) ||
 800b904:	b124      	cbz	r4, 800b910 <wc_AesGcmSetIV+0x2c>
        (ivFixed != NULL && ivFixedSz != AES_IV_FIXED_SZ)) {

        ret = BAD_FUNC_ARG;
 800b906:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        aes->ctrSet = 1;
    #endif
        aes->nonceSz = ivSz;
    }

    return ret;
 800b90a:	e018      	b.n	800b93e <wc_AesGcmSetIV+0x5a>
        (ivFixed != NULL && ivFixedSz != AES_IV_FIXED_SZ)) {
 800b90c:	2c04      	cmp	r4, #4
 800b90e:	d1fa      	bne.n	800b906 <wc_AesGcmSetIV+0x22>
        byte* iv = (byte*)aes->reg;
 800b910:	f105 08f8 	add.w	r8, r5, #248	; 0xf8
        if (ivFixedSz)
 800b914:	b11c      	cbz	r4, 800b91e <wc_AesGcmSetIV+0x3a>
            XMEMCPY(iv, ivFixed, ivFixedSz);
 800b916:	4622      	mov	r2, r4
 800b918:	4640      	mov	r0, r8
 800b91a:	f012 f843 	bl	801d9a4 <memcpy>
        ret = wc_RNG_GenerateBlock(rng, iv + ivFixedSz, ivSz - ivFixedSz);
 800b91e:	1b32      	subs	r2, r6, r4
 800b920:	eb08 0104 	add.w	r1, r8, r4
 800b924:	4638      	mov	r0, r7
 800b926:	f003 f903 	bl	800eb30 <wc_RNG_GenerateBlock>
    if (ret == 0) {
 800b92a:	b940      	cbnz	r0, 800b93e <wc_AesGcmSetIV+0x5a>
        aes->invokeCtr[1] = (ivSz == GCM_NONCE_MID_SZ) ? 0 : 0xFFFFFFFF;
 800b92c:	f1b6 030c 	subs.w	r3, r6, #12
 800b930:	bf18      	it	ne
 800b932:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
        aes->nonceSz = ivSz;
 800b936:	e9c5 3647 	strd	r3, r6, [r5, #284]	; 0x11c
        aes->invokeCtr[0] = 0;
 800b93a:	f8c5 0118 	str.w	r0, [r5, #280]	; 0x118
}
 800b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b944 <wc_AesGcmEncrypt_ex>:

int wc_AesGcmEncrypt_ex(Aes* aes, byte* out, const byte* in, word32 sz,
                        byte* ivOut, word32 ivOutSz,
                        byte* authTag, word32 authTagSz,
                        const byte* authIn, word32 authInSz)
{
 800b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	4604      	mov	r4, r0
 800b94a:	b087      	sub	sp, #28
 800b94c:	e9dd 0510 	ldrd	r0, r5, [sp, #64]	; 0x40
 800b950:	e9dd 9a14 	ldrd	r9, sl, [sp, #80]	; 0x50
 800b954:	460f      	mov	r7, r1
 800b956:	4690      	mov	r8, r2
 800b958:	469b      	mov	fp, r3
    int ret = 0;

    if (aes == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	d047      	beq.n	800b9ee <wc_AesGcmEncrypt_ex+0xaa>
 800b95e:	b11b      	cbz	r3, 800b968 <wc_AesGcmEncrypt_ex+0x24>
 800b960:	2a00      	cmp	r2, #0
 800b962:	d044      	beq.n	800b9ee <wc_AesGcmEncrypt_ex+0xaa>
 800b964:	2900      	cmp	r1, #0
 800b966:	d042      	beq.n	800b9ee <wc_AesGcmEncrypt_ex+0xaa>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d040      	beq.n	800b9ee <wc_AesGcmEncrypt_ex+0xaa>
        ivOut == NULL || ivOutSz != aes->nonceSz ||
 800b96c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b970:	42ab      	cmp	r3, r5
 800b972:	d13c      	bne.n	800b9ee <wc_AesGcmEncrypt_ex+0xaa>
 800b974:	f1b9 0f00 	cmp.w	r9, #0
 800b978:	d102      	bne.n	800b980 <wc_AesGcmEncrypt_ex+0x3c>
        (authIn == NULL && authInSz != 0)) {
 800b97a:	f1ba 0f00 	cmp.w	sl, #0
 800b97e:	d136      	bne.n	800b9ee <wc_AesGcmEncrypt_ex+0xaa>

        ret = BAD_FUNC_ARG;
    }

    if (ret == 0) {
        aes->invokeCtr[0]++;
 800b980:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800b984:	3301      	adds	r3, #1
 800b986:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
        if (aes->invokeCtr[0] == 0) {
 800b98a:	b33b      	cbz	r3, 800b9dc <wc_AesGcmEncrypt_ex+0x98>
                ret = AES_GCM_OVERFLOW_E;
        }
    }

    if (ret == 0) {
        XMEMCPY(ivOut, aes->reg, ivOutSz);
 800b98c:	f104 06f8 	add.w	r6, r4, #248	; 0xf8
 800b990:	462a      	mov	r2, r5
 800b992:	4631      	mov	r1, r6
 800b994:	f012 f806 	bl	801d9a4 <memcpy>
        ret = wc_AesGcmEncrypt(aes, out, in, sz,
 800b998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b99e:	9600      	str	r6, [sp, #0]
 800b9a0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800b9a4:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 800b9a8:	465b      	mov	r3, fp
 800b9aa:	4642      	mov	r2, r8
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f7ff fe76 	bl	800b6a0 <wc_AesGcmEncrypt>
                               (byte*)aes->reg, ivOutSz,
                               authTag, authTagSz,
                               authIn, authInSz);
        if (ret == 0)
 800b9b4:	b978      	cbnz	r0, 800b9d6 <wc_AesGcmEncrypt_ex+0x92>
    for (i = (int)ctrSz - 1; i >= 0; i--) {
 800b9b6:	35f8      	adds	r5, #248	; 0xf8
 800b9b8:	4425      	add	r5, r4
 800b9ba:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
 800b9be:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
 800b9c2:	3407      	adds	r4, #7
 800b9c4:	42ec      	cmn	r4, r5
 800b9c6:	d406      	bmi.n	800b9d6 <wc_AesGcmEncrypt_ex+0x92>
        if (++ctr[i])
 800b9c8:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	702b      	strb	r3, [r5, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0f6      	beq.n	800b9c4 <wc_AesGcmEncrypt_ex+0x80>
            IncCtr((byte*)aes->reg, ivOutSz);
    }

    return ret;
}
 800b9d6:	b007      	add	sp, #28
 800b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            aes->invokeCtr[1]++;
 800b9dc:	f8d4 611c 	ldr.w	r6, [r4, #284]	; 0x11c
 800b9e0:	3601      	adds	r6, #1
 800b9e2:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
            if (aes->invokeCtr[1] == 0)
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	d1d0      	bne.n	800b98c <wc_AesGcmEncrypt_ex+0x48>
                ret = AES_GCM_OVERFLOW_E;
 800b9ea:	4802      	ldr	r0, [pc, #8]	; (800b9f4 <wc_AesGcmEncrypt_ex+0xb0>)
    return ret;
 800b9ec:	e7f3      	b.n	800b9d6 <wc_AesGcmEncrypt_ex+0x92>
        ret = BAD_FUNC_ARG;
 800b9ee:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800b9f2:	e7f0      	b.n	800b9d6 <wc_AesGcmEncrypt_ex+0x92>
 800b9f4:	fffffefc 	.word	0xfffffefc

0800b9f8 <wc_AesInit>:
/* Initialize Aes for use with async hardware */
int wc_AesInit(Aes* aes, void* heap, int devId)
{
    int ret = 0;

    if (aes == NULL)
 800b9f8:	b118      	cbz	r0, 800ba02 <wc_AesInit+0xa>
        return BAD_FUNC_ARG;

    aes->heap = heap;
 800b9fa:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
#endif

#if defined(WOLFSSL_RENESAS_FSPSM)
    XMEMSET(&aes->ctx, 0, sizeof(aes->ctx));
#endif
    return ret;
 800b9fe:	2000      	movs	r0, #0
 800ba00:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800ba02:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800ba06:	4770      	bx	lr

0800ba08 <wc_AesFree>:
#if ((defined(WOLFSSL_RENESAS_FSPSM_TLS) || \
    defined(WOLFSSL_RENESAS_FSPSM_CRYPTONLY)) && \
    !defined(NO_WOLFSSL_RENESAS_FSPSM_AES))
    wc_fspsm_Aesfree(aes);
#endif
}
 800ba08:	4770      	bx	lr

0800ba0a <ByteReverseWord32>:
}
 800ba0a:	ba00      	rev	r0, r0
 800ba0c:	4770      	bx	lr

0800ba0e <IPERM>:
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 800ba0e:	680b      	ldr	r3, [r1, #0]
 800ba10:	ea4f 7333 	mov.w	r3, r3, ror #28

    static WC_INLINE void IPERM(word32* left, word32* right)
    {
        word32 work;

        *right = rotlFixed(*right, 4U);
 800ba14:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xf0f0f0f0;
 800ba16:	6802      	ldr	r2, [r0, #0]
 800ba18:	4053      	eors	r3, r2
 800ba1a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
        *left ^= work;
 800ba1e:	405a      	eors	r2, r3
 800ba20:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 20U);
 800ba22:	680a      	ldr	r2, [r1, #0]
 800ba24:	4053      	eors	r3, r2
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 800ba26:	ea4f 5333 	mov.w	r3, r3, ror #20
 800ba2a:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xffff0000;
 800ba2c:	6802      	ldr	r2, [r0, #0]
 800ba2e:	4053      	eors	r3, r2
 800ba30:	0c1b      	lsrs	r3, r3, #16
 800ba32:	041b      	lsls	r3, r3, #16
        *left ^= work;
 800ba34:	405a      	eors	r2, r3
 800ba36:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 18U);
 800ba38:	680a      	ldr	r2, [r1, #0]
 800ba3a:	4053      	eors	r3, r2
 800ba3c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800ba40:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0x33333333;
 800ba42:	6802      	ldr	r2, [r0, #0]
 800ba44:	4053      	eors	r3, r2
 800ba46:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
        *left ^= work;
 800ba4a:	405a      	eors	r2, r3
 800ba4c:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 6U);
 800ba4e:	680a      	ldr	r2, [r1, #0]
 800ba50:	4053      	eors	r3, r2
 800ba52:	ea4f 13b3 	mov.w	r3, r3, ror #6
 800ba56:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0x00ff00ff;
 800ba58:	6802      	ldr	r2, [r0, #0]
 800ba5a:	4053      	eors	r3, r2
 800ba5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        *left ^= work;
 800ba60:	405a      	eors	r2, r3
 800ba62:	6002      	str	r2, [r0, #0]

        *right = rotlFixed(*right^work, 9U);
 800ba64:	680a      	ldr	r2, [r1, #0]
 800ba66:	4053      	eors	r3, r2
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 800ba68:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800ba6c:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xaaaaaaaa;
 800ba6e:	6802      	ldr	r2, [r0, #0]
 800ba70:	4053      	eors	r3, r2
 800ba72:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        *left = rotlFixed(*left^work, 1U);
 800ba76:	405a      	eors	r2, r3
 800ba78:	ea4f 72f2 	mov.w	r2, r2, ror #31
 800ba7c:	6002      	str	r2, [r0, #0]
        *right ^= work;
 800ba7e:	680a      	ldr	r2, [r1, #0]
 800ba80:	4053      	eors	r3, r2
 800ba82:	600b      	str	r3, [r1, #0]
    }
 800ba84:	4770      	bx	lr

0800ba86 <FPERM>:
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 800ba86:	680a      	ldr	r2, [r1, #0]
 800ba88:	ea4f 0272 	mov.w	r2, r2, ror #1

    static WC_INLINE void FPERM(word32* left, word32* right)
    {
        word32 work;

        *right = rotrFixed(*right, 1U);
 800ba8c:	600a      	str	r2, [r1, #0]
        work = (*left ^ *right) & 0xaaaaaaaa;
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	4053      	eors	r3, r2
 800ba92:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        *right ^= work;
 800ba96:	405a      	eors	r2, r3
 800ba98:	600a      	str	r2, [r1, #0]

        *left = rotrFixed(*left^work, 9U);
 800ba9a:	6802      	ldr	r2, [r0, #0]
 800ba9c:	4053      	eors	r3, r2
 800ba9e:	ea4f 2373 	mov.w	r3, r3, ror #9
 800baa2:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0x00ff00ff;
 800baa4:	680a      	ldr	r2, [r1, #0]
 800baa6:	4053      	eors	r3, r2
 800baa8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        *right ^= work;
 800baac:	405a      	eors	r2, r3
 800baae:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 6U);
 800bab0:	6802      	ldr	r2, [r0, #0]
 800bab2:	4053      	eors	r3, r2
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 800bab4:	ea4f 63b3 	mov.w	r3, r3, ror #26
 800bab8:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0x33333333;
 800baba:	680a      	ldr	r2, [r1, #0]
 800babc:	4053      	eors	r3, r2
 800babe:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
        *right ^= work;
 800bac2:	405a      	eors	r2, r3
 800bac4:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 18U);
 800bac6:	6802      	ldr	r2, [r0, #0]
 800bac8:	4053      	eors	r3, r2
 800baca:	ea4f 33b3 	mov.w	r3, r3, ror #14
 800bace:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0xffff0000;
 800bad0:	680a      	ldr	r2, [r1, #0]
 800bad2:	4053      	eors	r3, r2
 800bad4:	0c1b      	lsrs	r3, r3, #16
 800bad6:	041b      	lsls	r3, r3, #16
        *right ^= work;
 800bad8:	405a      	eors	r2, r3
 800bada:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 20U);
 800badc:	6802      	ldr	r2, [r0, #0]
 800bade:	4053      	eors	r3, r2
 800bae0:	ea4f 3333 	mov.w	r3, r3, ror #12
 800bae4:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0xf0f0f0f0;
 800bae6:	680a      	ldr	r2, [r1, #0]
 800bae8:	4053      	eors	r3, r2
 800baea:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
        *right ^= work;
 800baee:	405a      	eors	r2, r3
 800baf0:	600a      	str	r2, [r1, #0]

        *left = rotrFixed(*left^work, 4U);
 800baf2:	6802      	ldr	r2, [r0, #0]
 800baf4:	4053      	eors	r3, r2
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 800baf6:	ea4f 1333 	mov.w	r3, r3, ror #4
 800bafa:	6003      	str	r3, [r0, #0]
    }
 800bafc:	4770      	bx	lr
	...

0800bb00 <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
 800bb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        word32 l = *lIn, r = *rIn, i;
 800bb04:	f8d1 c000 	ldr.w	ip, [r1]
 800bb08:	6806      	ldr	r6, [r0, #0]

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
 800bb0a:	4b49      	ldr	r3, [pc, #292]	; (800bc30 <DesRawProcessBlock+0x130>)
 800bb0c:	f102 0780 	add.w	r7, r2, #128	; 0x80
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
 800bb10:	6814      	ldr	r4, [r2, #0]
 800bb12:	ea84 1e3c 	eor.w	lr, r4, ip, ror #4
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
 800bb16:	6854      	ldr	r4, [r2, #4]
 800bb18:	ea8c 0404 	eor.w	r4, ip, r4
            l ^= Spbox[6][(work) & 0x3f]
 800bb1c:	f00e 053f 	and.w	r5, lr, #63	; 0x3f
            l ^= Spbox[7][(work) & 0x3f]
 800bb20:	f004 083f 	and.w	r8, r4, #63	; 0x3f
            l ^= Spbox[6][(work) & 0x3f]
 800bb24:	f505 75c0 	add.w	r5, r5, #384	; 0x180
            l ^= Spbox[7][(work) & 0x3f]
 800bb28:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
 800bb2c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800bb30:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800bb34:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
 800bb38:	f3ce 2805 	ubfx	r8, lr, #8, #6
 800bb3c:	f508 7880 	add.w	r8, r8, #256	; 0x100
        for (i=0; i<8; i++)
 800bb40:	3210      	adds	r2, #16
            l ^= Spbox[7][(work) & 0x3f]
 800bb42:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800bb46:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
 800bb4a:	f3ce 4805 	ubfx	r8, lr, #16, #6
 800bb4e:	f108 0880 	add.w	r8, r8, #128	; 0x80
              ^  Spbox[0][(work >> 24) & 0x3f];
 800bb52:	f3ce 6e05 	ubfx	lr, lr, #24, #6
            l ^= Spbox[7][(work) & 0x3f]
 800bb56:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800bb5a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800bb5e:	ea85 0508 	eor.w	r5, r5, r8
 800bb62:	ea85 050e 	eor.w	r5, r5, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
 800bb66:	f3c4 2e05 	ubfx	lr, r4, #8, #6
 800bb6a:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
 800bb6e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800bb72:	ea85 050e 	eor.w	r5, r5, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
 800bb76:	f3c4 4e05 	ubfx	lr, r4, #16, #6
 800bb7a:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
              ^  Spbox[1][(work >> 24) & 0x3f];
 800bb7e:	f3c4 6405 	ubfx	r4, r4, #24, #6
 800bb82:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
 800bb84:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800bb88:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800bb8c:	ea85 050e 	eor.w	r5, r5, lr
 800bb90:	4065      	eors	r5, r4
 800bb92:	406e      	eors	r6, r5
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
 800bb94:	f852 4c04 	ldr.w	r4, [r2, #-4]
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 800bb98:	f852 5c08 	ldr.w	r5, [r2, #-8]
            work = l ^ kptr[4*i+3];
 800bb9c:	ea86 0e04 	eor.w	lr, r6, r4
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 800bba0:	ea85 1536 	eor.w	r5, r5, r6, ror #4
            r ^= Spbox[6][(work) & 0x3f]
 800bba4:	f005 043f 	and.w	r4, r5, #63	; 0x3f
            r ^= Spbox[7][(work) & 0x3f]
 800bba8:	f00e 083f 	and.w	r8, lr, #63	; 0x3f
            r ^= Spbox[6][(work) & 0x3f]
 800bbac:	f504 74c0 	add.w	r4, r4, #384	; 0x180
            r ^= Spbox[7][(work) & 0x3f]
 800bbb0:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
 800bbb4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800bbb8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800bbbc:	ea84 0408 	eor.w	r4, r4, r8
 800bbc0:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
 800bbc4:	f3ce 2c05 	ubfx	ip, lr, #8, #6
 800bbc8:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
        for (i=0; i<8; i++)
 800bbcc:	4297      	cmp	r7, r2
 800bbce:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800bbd2:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
 800bbd6:	f3ce 4c05 	ubfx	ip, lr, #16, #6
 800bbda:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
              ^  Spbox[1][(work >> 24) & 0x3f];
 800bbde:	f3ce 6e05 	ubfx	lr, lr, #24, #6
 800bbe2:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800bbe6:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800bbea:	ea84 040c 	eor.w	r4, r4, ip
 800bbee:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
 800bbf2:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[4][(work >> 8) & 0x3f]
 800bbf6:	f3c5 2c05 	ubfx	ip, r5, #8, #6
 800bbfa:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 800bbfe:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800bc02:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[2][(work >> 16) & 0x3f]
 800bc06:	f3c5 4c05 	ubfx	ip, r5, #16, #6
 800bc0a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
              ^  Spbox[0][(work >> 24) & 0x3f];
 800bc0e:	f3c5 6505 	ubfx	r5, r5, #24, #6
 800bc12:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
            r ^= Spbox[7][(work) & 0x3f]
 800bc16:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800bc1a:	ea84 040c 	eor.w	r4, r4, ip
 800bc1e:	ea84 0c05 	eor.w	ip, r4, r5
        for (i=0; i<8; i++)
 800bc22:	f47f af75 	bne.w	800bb10 <DesRawProcessBlock+0x10>
        }

        *lIn = l; *rIn = r;
 800bc26:	6006      	str	r6, [r0, #0]
 800bc28:	f8c1 c000 	str.w	ip, [r1]
    }
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	08021ed8 	.word	0x08021ed8

0800bc34 <DesSetKey>:
    {
 800bc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc38:	4606      	mov	r6, r0
        byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800bc3a:	2078      	movs	r0, #120	; 0x78
    {
 800bc3c:	468b      	mov	fp, r1
 800bc3e:	4615      	mov	r5, r2
        byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800bc40:	f011 fe90 	bl	801d964 <malloc>
        if (buffer == NULL)
 800bc44:	4604      	mov	r4, r0
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f000 8095 	beq.w	800bd76 <DesSetKey+0x142>
            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 800bc4c:	494b      	ldr	r1, [pc, #300]	; (800bd7c <DesSetKey+0x148>)
                    bytebit[m])                    /* and which bit of that byte  */
 800bc4e:	4f4c      	ldr	r7, [pc, #304]	; (800bd80 <DesSetKey+0x14c>)
            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 800bc50:	f100 0938 	add.w	r9, r0, #56	; 0x38
            byte* const  ks   = pcr  + 56;
 800bc54:	f100 0870 	add.w	r8, r0, #112	; 0x70
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 800bc58:	1e42      	subs	r2, r0, #1
 800bc5a:	3037      	adds	r0, #55	; 0x37
                l = pc1[j] - 1;                    /* integer bit location        */
 800bc5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc60:	3b01      	subs	r3, #1
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 800bc62:	ea4f 0ce3 	mov.w	ip, r3, asr #3
                m = l & 07;                        /* find bit                    */
 800bc66:	f003 0307 	and.w	r3, r3, #7
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 800bc6a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 800bc6e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
                    ? 1 : 0;                       /* and store 1-bit result      */
 800bc72:	ea1c 0f03 	tst.w	ip, r3
 800bc76:	bf14      	ite	ne
 800bc78:	2301      	movne	r3, #1
 800bc7a:	2300      	moveq	r3, #0
 800bc7c:	f802 3f01 	strb.w	r3, [r2, #1]!
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 800bc80:	4290      	cmp	r0, r2
 800bc82:	d1eb      	bne.n	800bc5c <DesSetKey+0x28>
 800bc84:	f105 0380 	add.w	r3, r5, #128	; 0x80
 800bc88:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 800bd84 <DesSetKey+0x150>
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	462e      	mov	r6, r5
 800bc90:	462f      	mov	r7, r5
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
 800bc92:	2208      	movs	r2, #8
 800bc94:	2100      	movs	r1, #0
 800bc96:	4640      	mov	r0, r8
 800bc98:	f011 feac 	bl	801d9f4 <memset>
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 800bc9c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800bca0:	4649      	mov	r1, r9
 800bca2:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 800bca4:	201c      	movs	r0, #28
 800bca6:	4298      	cmp	r0, r3
 800bca8:	bfd4      	ite	le
 800bcaa:	f1a3 001c 	suble.w	r0, r3, #28
 800bcae:	4618      	movgt	r0, r3
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 800bcb0:	3201      	adds	r2, #1
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 800bcb2:	5c20      	ldrb	r0, [r4, r0]
                    pcr[j] =
 800bcb4:	f801 0b01 	strb.w	r0, [r1], #1
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 800bcb8:	2a38      	cmp	r2, #56	; 0x38
 800bcba:	f103 0301 	add.w	r3, r3, #1
 800bcbe:	d155      	bne.n	800bd6c <DesSetKey+0x138>
 800bcc0:	4831      	ldr	r0, [pc, #196]	; (800bd88 <DesSetKey+0x154>)
                for (j = 0; j < 48; j++) {        /* select bits individually     */
 800bcc2:	2300      	movs	r3, #0
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 800bcc4:	f04f 0c06 	mov.w	ip, #6
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
 800bcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bccc:	444a      	add	r2, r9
 800bcce:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800bcd2:	b16a      	cbz	r2, 800bcf0 <DesSetKey+0xbc>
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 800bcd4:	fbb3 f2fc 	udiv	r2, r3, ip
 800bcd8:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 800bd80 <DesSetKey+0x14c>
                        l= j % 6;                 /* mask it in if it's there     */
 800bcdc:	fb0c 3112 	mls	r1, ip, r2, r3
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 800bce0:	f85e e021 	ldr.w	lr, [lr, r1, lsl #2]
 800bce4:	f818 1002 	ldrb.w	r1, [r8, r2]
 800bce8:	ea41 01ae 	orr.w	r1, r1, lr, asr #2
 800bcec:	f808 1002 	strb.w	r1, [r8, r2]
                for (j = 0; j < 48; j++) {        /* select bits individually     */
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	2b30      	cmp	r3, #48	; 0x30
 800bcf4:	d1e8      	bne.n	800bcc8 <DesSetKey+0x94>
                         | ((word32) ks[2] << 16)
 800bcf6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
                out[2*i] = ((word32) ks[0] << 24)
 800bcfa:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
                         | ((word32) ks[2] << 16)
 800bcfe:	041b      	lsls	r3, r3, #16
 800bd00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[6]);
 800bd04:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800bd08:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
 800bd0a:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
                         | ((word32) ks[6]);
 800bd0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
 800bd12:	603b      	str	r3, [r7, #0]
                             | ((word32) ks[3] << 16)
 800bd14:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
                out[2*i + 1] = ((word32) ks[1] << 24)
 800bd18:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
                             | ((word32) ks[3] << 16)
 800bd1c:	041b      	lsls	r3, r3, #16
 800bd1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[7]);
 800bd22:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 800bd26:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
 800bd28:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
                             | ((word32) ks[7]);
 800bd2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
 800bd30:	607b      	str	r3, [r7, #4]
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	3708      	adds	r7, #8
 800bd36:	42bb      	cmp	r3, r7
 800bd38:	d1ab      	bne.n	800bc92 <DesSetKey+0x5e>
            if (dir == DES_DECRYPTION) {
 800bd3a:	f1bb 0f01 	cmp.w	fp, #1
 800bd3e:	d10e      	bne.n	800bd5e <DesSetKey+0x12a>
 800bd40:	f105 0340 	add.w	r3, r5, #64	; 0x40
                    out[i] = out[DES_KS_SIZE - 2 - i];
 800bd44:	6fa9      	ldr	r1, [r5, #120]	; 0x78
                    word32 swap = out[i];
 800bd46:	6832      	ldr	r2, [r6, #0]
                    out[i] = out[DES_KS_SIZE - 2 - i];
 800bd48:	6031      	str	r1, [r6, #0]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
 800bd4a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
                    out[DES_KS_SIZE - 2 - i] = swap;
 800bd4c:	67aa      	str	r2, [r5, #120]	; 0x78
                    swap = out[i + 1];
 800bd4e:	6872      	ldr	r2, [r6, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
 800bd50:	6071      	str	r1, [r6, #4]
                for (i = 0; i < 16; i += 2) {
 800bd52:	3608      	adds	r6, #8
 800bd54:	42b3      	cmp	r3, r6
                    out[DES_KS_SIZE - 1 - i] = swap;
 800bd56:	67ea      	str	r2, [r5, #124]	; 0x7c
                for (i = 0; i < 16; i += 2) {
 800bd58:	f1a5 0508 	sub.w	r5, r5, #8
 800bd5c:	d1f2      	bne.n	800bd44 <DesSetKey+0x110>
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f011 fe08 	bl	801d974 <free>
        return 0;
 800bd64:	2000      	movs	r0, #0
    }
 800bd66:	b003      	add	sp, #12
 800bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 800bd6c:	2a1c      	cmp	r2, #28
 800bd6e:	bfb4      	ite	lt
 800bd70:	201c      	movlt	r0, #28
 800bd72:	2038      	movge	r0, #56	; 0x38
 800bd74:	e797      	b.n	800bca6 <DesSetKey+0x72>
            return MEMORY_E;
 800bd76:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800bd7a:	e7f4      	b.n	800bd66 <DesSetKey+0x132>
 800bd7c:	080226f8 	.word	0x080226f8
 800bd80:	080226d8 	.word	0x080226d8
 800bd84:	08022760 	.word	0x08022760
 800bd88:	08022730 	.word	0x08022730

0800bd8c <Des3ProcessBlock>:
        XMEMCPY(out, &r, sizeof(r));
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
    }

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
 800bd8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd8e:	4604      	mov	r4, r0
 800bd90:	4615      	mov	r5, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
 800bd92:	4668      	mov	r0, sp
 800bd94:	2204      	movs	r2, #4
    {
 800bd96:	460e      	mov	r6, r1
        XMEMCPY(&l, in, sizeof(l));
 800bd98:	f011 fe04 	bl	801d9a4 <memcpy>
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
 800bd9c:	2204      	movs	r2, #4
 800bd9e:	18b1      	adds	r1, r6, r2
 800bda0:	eb0d 0002 	add.w	r0, sp, r2
 800bda4:	f011 fdfe 	bl	801d9a4 <memcpy>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 800bda8:	9800      	ldr	r0, [sp, #0]
 800bdaa:	f7ff fe2e 	bl	800ba0a <ByteReverseWord32>
 800bdae:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 800bdb0:	9801      	ldr	r0, [sp, #4]
 800bdb2:	f7ff fe2a 	bl	800ba0a <ByteReverseWord32>
        #endif
        IPERM(&l,&r);
 800bdb6:	a901      	add	r1, sp, #4
            r = ByteReverseWord32(r);
 800bdb8:	9001      	str	r0, [sp, #4]
        IPERM(&l,&r);
 800bdba:	4668      	mov	r0, sp
 800bdbc:	f7ff fe27 	bl	800ba0e <IPERM>

        DesRawProcessBlock(&l, &r, des->key[0]);
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	f7ff fe9d 	bl	800bb00 <DesRawProcessBlock>
        DesRawProcessBlock(&r, &l, des->key[1]);
 800bdc6:	a801      	add	r0, sp, #4
 800bdc8:	f104 0280 	add.w	r2, r4, #128	; 0x80
 800bdcc:	4669      	mov	r1, sp
 800bdce:	f7ff fe97 	bl	800bb00 <DesRawProcessBlock>
        DesRawProcessBlock(&l, &r, des->key[2]);
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800bdd8:	4668      	mov	r0, sp
 800bdda:	f7ff fe91 	bl	800bb00 <DesRawProcessBlock>

        FPERM(&l,&r);
 800bdde:	f7ff fe52 	bl	800ba86 <FPERM>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 800bde2:	9800      	ldr	r0, [sp, #0]
 800bde4:	f7ff fe11 	bl	800ba0a <ByteReverseWord32>
 800bde8:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 800bdea:	9801      	ldr	r0, [sp, #4]
 800bdec:	f7ff fe0d 	bl	800ba0a <ByteReverseWord32>
        #endif
        XMEMCPY(out, &r, sizeof(r));
 800bdf0:	2204      	movs	r2, #4
            r = ByteReverseWord32(r);
 800bdf2:	9001      	str	r0, [sp, #4]
        XMEMCPY(out, &r, sizeof(r));
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f011 fdd5 	bl	801d9a4 <memcpy>
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
 800bdfa:	2204      	movs	r2, #4
 800bdfc:	4669      	mov	r1, sp
 800bdfe:	18a8      	adds	r0, r5, r2
 800be00:	f011 fdd0 	bl	801d9a4 <memcpy>
    }
 800be04:	b002      	add	sp, #8
 800be06:	bd70      	pop	{r4, r5, r6, pc}

0800be08 <xorbuf.constprop.0>:
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 800be08:	ea81 0300 	eor.w	r3, r1, r0
 800be0c:	f013 0f03 	tst.w	r3, #3
WC_MISC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 800be10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be12:	f04f 0308 	mov.w	r3, #8
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 800be16:	d019      	beq.n	800be4c <xorbuf.constprop.0+0x44>
    for (i = 0; i < count; i++)
 800be18:	3901      	subs	r1, #1
 800be1a:	4403      	add	r3, r0
 800be1c:	4298      	cmp	r0, r3
 800be1e:	d120      	bne.n	800be62 <xorbuf.constprop.0+0x5a>
}
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(b++) ^= *(m++);
 800be22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be26:	f810 5b01 	ldrb.w	r5, [r0], #1
 800be2a:	406a      	eors	r2, r5
 800be2c:	f800 2c01 	strb.w	r2, [r0, #-1]
            count--;
 800be30:	3b01      	subs	r3, #1
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 800be32:	b10c      	cbz	r4, 800be38 <xorbuf.constprop.0+0x30>
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f4      	bne.n	800be22 <xorbuf.constprop.0+0x1a>
    for (i = 0; i < n; i++)
 800be38:	f023 0503 	bic.w	r5, r3, #3
 800be3c:	194e      	adds	r6, r1, r5
 800be3e:	4602      	mov	r2, r0
 800be40:	42b1      	cmp	r1, r6
 800be42:	d106      	bne.n	800be52 <xorbuf.constprop.0+0x4a>
 800be44:	4428      	add	r0, r5
        count %= WOLFSSL_WORD_SIZE;
 800be46:	f003 0303 	and.w	r3, r3, #3
 800be4a:	e7e5      	b.n	800be18 <xorbuf.constprop.0+0x10>
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 800be4c:	f000 0403 	and.w	r4, r0, #3
 800be50:	e7ef      	b.n	800be32 <xorbuf.constprop.0+0x2a>
        *((*r)++) ^= *((*a)++);
 800be52:	f852 4b04 	ldr.w	r4, [r2], #4
 800be56:	f851 7b04 	ldr.w	r7, [r1], #4
 800be5a:	407c      	eors	r4, r7
 800be5c:	f842 4c04 	str.w	r4, [r2, #-4]
    for (i = 0; i < n; i++)
 800be60:	e7ee      	b.n	800be40 <xorbuf.constprop.0+0x38>
        b[i] ^= m[i];
 800be62:	7802      	ldrb	r2, [r0, #0]
 800be64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be68:	4062      	eors	r2, r4
 800be6a:	f800 2b01 	strb.w	r2, [r0], #1
    for (i = 0; i < count; i++)
 800be6e:	e7d5      	b.n	800be1c <xorbuf.constprop.0+0x14>

0800be70 <wc_Des3_CbcEncrypt>:
        }
        return 0;
    }

    int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	460e      	mov	r6, r1
 800be76:	4614      	mov	r4, r2
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
 800be78:	4607      	mov	r7, r0
 800be7a:	b1e0      	cbz	r0, 800beb6 <wc_Des3_CbcEncrypt+0x46>
 800be7c:	b1d9      	cbz	r1, 800beb6 <wc_Des3_CbcEncrypt+0x46>
 800be7e:	b1d2      	cbz	r2, 800beb6 <wc_Des3_CbcEncrypt+0x46>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
        while (blocks--) {
 800be80:	f023 0307 	bic.w	r3, r3, #7
 800be84:	18d5      	adds	r5, r2, r3
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 800be86:	f500 78c0 	add.w	r8, r0, #384	; 0x180
        while (blocks--) {
 800be8a:	42ac      	cmp	r4, r5
 800be8c:	d102      	bne.n	800be94 <wc_Des3_CbcEncrypt+0x24>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
 800be8e:	2000      	movs	r0, #0
    }
 800be90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 800be94:	4621      	mov	r1, r4
 800be96:	4640      	mov	r0, r8
 800be98:	f7ff ffb6 	bl	800be08 <xorbuf.constprop.0>
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
 800be9c:	4642      	mov	r2, r8
 800be9e:	4641      	mov	r1, r8
 800bea0:	4638      	mov	r0, r7
 800bea2:	f7ff ff73 	bl	800bd8c <Des3ProcessBlock>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
 800bea6:	4630      	mov	r0, r6
 800bea8:	2208      	movs	r2, #8
 800beaa:	4641      	mov	r1, r8
 800beac:	f011 fd7a 	bl	801d9a4 <memcpy>
            out += DES_BLOCK_SIZE;
 800beb0:	3608      	adds	r6, #8
            in  += DES_BLOCK_SIZE;
 800beb2:	3408      	adds	r4, #8
 800beb4:	e7e9      	b.n	800be8a <wc_Des3_CbcEncrypt+0x1a>
            return BAD_FUNC_ARG;
 800beb6:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800beba:	e7e9      	b.n	800be90 <wc_Des3_CbcEncrypt+0x20>

0800bebc <wc_Des3_CbcDecrypt>:


    int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
 800bebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec0:	460e      	mov	r6, r1
 800bec2:	4614      	mov	r4, r2
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
 800bec4:	4607      	mov	r7, r0
 800bec6:	b318      	cbz	r0, 800bf10 <wc_Des3_CbcDecrypt+0x54>
 800bec8:	b311      	cbz	r1, 800bf10 <wc_Des3_CbcDecrypt+0x54>
 800beca:	b30a      	cbz	r2, 800bf10 <wc_Des3_CbcDecrypt+0x54>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
        while (blocks--) {
 800becc:	f023 0307 	bic.w	r3, r3, #7
 800bed0:	18d5      	adds	r5, r2, r3
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 800bed2:	f500 78c4 	add.w	r8, r0, #392	; 0x188
            Des3ProcessBlock(des, (byte*)des->tmp, out);
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 800bed6:	f500 79c0 	add.w	r9, r0, #384	; 0x180
        while (blocks--) {
 800beda:	42ac      	cmp	r4, r5
 800bedc:	d102      	bne.n	800bee4 <wc_Des3_CbcDecrypt+0x28>
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
 800bede:	2000      	movs	r0, #0
    }
 800bee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 800bee4:	4621      	mov	r1, r4
 800bee6:	2208      	movs	r2, #8
 800bee8:	4640      	mov	r0, r8
 800beea:	f011 fd5b 	bl	801d9a4 <memcpy>
            Des3ProcessBlock(des, (byte*)des->tmp, out);
 800beee:	4632      	mov	r2, r6
 800bef0:	4641      	mov	r1, r8
 800bef2:	4638      	mov	r0, r7
 800bef4:	f7ff ff4a 	bl	800bd8c <Des3ProcessBlock>
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 800bef8:	4630      	mov	r0, r6
 800befa:	4649      	mov	r1, r9
 800befc:	f7ff ff84 	bl	800be08 <xorbuf.constprop.0>
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 800bf00:	2208      	movs	r2, #8
 800bf02:	4641      	mov	r1, r8
 800bf04:	4648      	mov	r0, r9
 800bf06:	f011 fd4d 	bl	801d9a4 <memcpy>
            out += DES_BLOCK_SIZE;
 800bf0a:	3608      	adds	r6, #8
            in  += DES_BLOCK_SIZE;
 800bf0c:	3408      	adds	r4, #8
 800bf0e:	e7e4      	b.n	800beda <wc_Des3_CbcDecrypt+0x1e>
            return BAD_FUNC_ARG;
 800bf10:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800bf14:	e7e4      	b.n	800bee0 <wc_Des3_CbcDecrypt+0x24>

0800bf16 <wc_Des3_SetIV>:
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
}

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
 800bf16:	b510      	push	{r4, lr}
    if (des == NULL) {
 800bf18:	b150      	cbz	r0, 800bf30 <wc_Des3_SetIV+0x1a>
        return BAD_FUNC_ARG;
    }
    if (iv) {
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 800bf1a:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800bf1e:	2208      	movs	r2, #8
    if (iv) {
 800bf20:	b119      	cbz	r1, 800bf2a <wc_Des3_SetIV+0x14>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 800bf22:	f011 fd3f 	bl	801d9a4 <memcpy>
    #endif
    }
    else
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);

    return 0;
 800bf26:	2000      	movs	r0, #0
}
 800bf28:	bd10      	pop	{r4, pc}
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
 800bf2a:	f011 fd63 	bl	801d9f4 <memset>
 800bf2e:	e7fa      	b.n	800bf26 <wc_Des3_SetIV+0x10>
        return BAD_FUNC_ARG;
 800bf30:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800bf34:	e7f8      	b.n	800bf28 <wc_Des3_SetIV+0x12>

0800bf36 <wc_Des3_SetKey>:
    {
 800bf36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf38:	460e      	mov	r6, r1
 800bf3a:	4617      	mov	r7, r2
 800bf3c:	461d      	mov	r5, r3
        if (des == NULL || key == NULL || dir < 0) {
 800bf3e:	4604      	mov	r4, r0
 800bf40:	b3b8      	cbz	r0, 800bfb2 <wc_Des3_SetKey+0x7c>
 800bf42:	b3b1      	cbz	r1, 800bfb2 <wc_Des3_SetKey+0x7c>
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	db34      	blt.n	800bfb2 <wc_Des3_SetKey+0x7c>
        XMEMSET(des->key, 0, sizeof(*(des->key)));
 800bf48:	2280      	movs	r2, #128	; 0x80
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	f011 fd52 	bl	801d9f4 <memset>
        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
 800bf50:	2204      	movs	r2, #4
 800bf52:	2100      	movs	r1, #0
 800bf54:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 800bf58:	f011 fd4c 	bl	801d9f4 <memset>
        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
 800bf5c:	2204      	movs	r2, #4
 800bf5e:	2100      	movs	r1, #0
 800bf60:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 800bf64:	f011 fd46 	bl	801d9f4 <memset>
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	bf0c      	ite	eq
 800bf6c:	2000      	moveq	r0, #0
 800bf6e:	2010      	movne	r0, #16
 800bf70:	4622      	mov	r2, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	4430      	add	r0, r6
 800bf76:	f7ff fe5d 	bl	800bc34 <DesSetKey>
        if (ret != 0)
 800bf7a:	b9e0      	cbnz	r0, 800bfb6 <wc_Des3_SetKey+0x80>
        ret = DesSetKey(key + 8, !dir, des->key[1]);
 800bf7c:	fab5 f185 	clz	r1, r5
 800bf80:	f104 0280 	add.w	r2, r4, #128	; 0x80
 800bf84:	0949      	lsrs	r1, r1, #5
 800bf86:	f106 0008 	add.w	r0, r6, #8
 800bf8a:	f7ff fe53 	bl	800bc34 <DesSetKey>
        if (ret != 0)
 800bf8e:	b990      	cbnz	r0, 800bfb6 <wc_Des3_SetKey+0x80>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
 800bf90:	2d01      	cmp	r5, #1
 800bf92:	bf0c      	ite	eq
 800bf94:	2000      	moveq	r0, #0
 800bf96:	2010      	movne	r0, #16
 800bf98:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	4430      	add	r0, r6
 800bfa0:	f7ff fe48 	bl	800bc34 <DesSetKey>
        if (ret != 0)
 800bfa4:	b938      	cbnz	r0, 800bfb6 <wc_Des3_SetKey+0x80>
        return wc_Des3_SetIV(des, iv);
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	4620      	mov	r0, r4
    }
 800bfaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return wc_Des3_SetIV(des, iv);
 800bfae:	f7ff bfb2 	b.w	800bf16 <wc_Des3_SetIV>
            return BAD_FUNC_ARG;
 800bfb2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }
 800bfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfb8 <wc_Des3Init>:

/* Initialize Des3 for use with async device */
int wc_Des3Init(Des3* des3, void* heap, int devId)
{
    int ret = 0;
    if (des3 == NULL)
 800bfb8:	b118      	cbz	r0, 800bfc2 <wc_Des3Init+0xa>
        return BAD_FUNC_ARG;

    des3->heap = heap;
 800bfba:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
#if defined(WOLFSSL_CHECK_MEM_ZERO) && (defined(WOLF_CRYPTO_CB) || \
        (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)))
    wc_MemZero_Add("DES3 devKey", &des3->devKey, sizeof(des3->devKey));
#endif

    return ret;
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800bfc2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800bfc6:	4770      	bx	lr

0800bfc8 <wc_Des3Free>:
    ForceZero(des3->devKey, sizeof(des3->devKey));
#endif
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(des3, sizeof(Des3));
#endif
}
 800bfc8:	4770      	bx	lr

0800bfca <wc_ecc_new_point_ex.constprop.0>:
/**
 * Allocate a new ECC point (if one not provided)
 * use a heap hint when creating new ecc_point
 * return an allocated point on success or NULL on failure
*/
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
 800bfca:	b573      	push	{r0, r1, r4, r5, r6, lr}

   if (point == NULL) {
       return BAD_FUNC_ARG;
   }

   p = *point;
 800bfcc:	6804      	ldr	r4, [r0, #0]
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
 800bfce:	4606      	mov	r6, r0
#ifndef WOLFSSL_NO_MALLOC
   if (p == NULL) {
 800bfd0:	b92c      	cbnz	r4, 800bfde <wc_ecc_new_point_ex.constprop.0+0x14>
      p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
 800bfd2:	f44f 709c 	mov.w	r0, #312	; 0x138
 800bfd6:	f011 fcc5 	bl	801d964 <malloc>
   }
#endif
   if (p == NULL) {
 800bfda:	4604      	mov	r4, r0
 800bfdc:	b1c8      	cbz	r0, 800c012 <wc_ecc_new_point_ex.constprop.0+0x48>
      return MEMORY_E;
   }
   XMEMSET(p, 0, sizeof(ecc_point));
 800bfde:	f44f 729c 	mov.w	r2, #312	; 0x138
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f011 fd05 	bl	801d9f4 <memset>

#ifndef ALT_ECC_SIZE
   err = mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL);
 800bfea:	2300      	movs	r3, #0
 800bfec:	e9cd 3300 	strd	r3, r3, [sp]
 800bff0:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 800bff4:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800bff8:	4620      	mov	r0, r4
 800bffa:	f00f ffe6 	bl	801bfca <mp_init_multi>
   if (err != MP_OKAY) {
 800bffe:	4605      	mov	r5, r0
 800c000:	b128      	cbz	r0, 800c00e <wc_ecc_new_point_ex.constprop.0+0x44>
   #ifndef WOLFSSL_NO_MALLOC
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 800c002:	4620      	mov	r0, r4
 800c004:	f011 fcb6 	bl	801d974 <free>
#endif

   *point = p;
   (void)heap;
   return err;
}
 800c008:	4628      	mov	r0, r5
 800c00a:	b002      	add	sp, #8
 800c00c:	bd70      	pop	{r4, r5, r6, pc}
   *point = p;
 800c00e:	6034      	str	r4, [r6, #0]
   return err;
 800c010:	e7fa      	b.n	800c008 <wc_ecc_new_point_ex.constprop.0+0x3e>
      return MEMORY_E;
 800c012:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 800c016:	e7f7      	b.n	800c008 <wc_ecc_new_point_ex.constprop.0+0x3e>

0800c018 <wc_ecc_del_point_ex.constprop.0>:
}

/** Free an ECC point from memory
  p   The point to free
*/
static void wc_ecc_del_point_ex(ecc_point* p, void* heap)
 800c018:	b510      	push	{r4, lr}
{
   if (p != NULL) {
 800c01a:	4604      	mov	r4, r0
 800c01c:	b170      	cbz	r0, 800c03c <wc_ecc_del_point_ex.constprop.0+0x24>
      mp_clear(p->x);
 800c01e:	f00f ffcf 	bl	801bfc0 <mp_clear>
      mp_clear(p->y);
 800c022:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c026:	f00f ffcb 	bl	801bfc0 <mp_clear>
      mp_clear(p->z);
 800c02a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c02e:	f00f ffc7 	bl	801bfc0 <mp_clear>
   #ifndef WOLFSSL_NO_MALLOC
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 800c032:	4620      	mov	r0, r4
   #endif
   }
   (void)heap;
}
 800c034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 800c038:	f011 bc9c 	b.w	801d974 <free>
}
 800c03c:	bd10      	pop	{r4, pc}

0800c03e <ecc_point_to_mont.constprop.0>:
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
 800c03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	4606      	mov	r6, r0
   NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 800c044:	2068      	movs	r0, #104	; 0x68
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
 800c046:	460f      	mov	r7, r1
 800c048:	4690      	mov	r8, r2
   NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 800c04a:	f011 fc8b 	bl	801d964 <malloc>
 800c04e:	4605      	mov	r5, r0
 800c050:	2800      	cmp	r0, #0
 800c052:	d04c      	beq.n	800c0ee <ecc_point_to_mont.constprop.0+0xb0>
 800c054:	2268      	movs	r2, #104	; 0x68
 800c056:	2100      	movs	r1, #0
 800c058:	f011 fccc 	bl	801d9f4 <memset>
       err = INIT_MP_INT_SIZE(mu, mp_bitsused(modulus));
 800c05c:	4628      	mov	r0, r5
 800c05e:	f00f ff9a 	bl	801bf96 <mp_init>
   if (err == MP_OKAY) {
 800c062:	4604      	mov	r4, r0
 800c064:	bb10      	cbnz	r0, 800c0ac <ecc_point_to_mont.constprop.0+0x6e>
       err = mp_montgomery_calc_normalization(mu, modulus);
 800c066:	4641      	mov	r1, r8
 800c068:	4628      	mov	r0, r5
 800c06a:	f010 ff68 	bl	801cf3e <mp_montgomery_calc_normalization>
       if (err == MP_OKAY) {
 800c06e:	4604      	mov	r4, r0
 800c070:	b9c8      	cbnz	r0, 800c0a6 <ecc_point_to_mont.constprop.0+0x68>
           if (mp_cmp_d(mu, 1) == MP_EQ) {
 800c072:	2101      	movs	r1, #1
 800c074:	4628      	mov	r0, r5
 800c076:	f00f ffd3 	bl	801c020 <mp_cmp_d>
 800c07a:	b9d8      	cbnz	r0, 800c0b4 <ecc_point_to_mont.constprop.0+0x76>
               err = mp_copy(p->x, r->x);
 800c07c:	4639      	mov	r1, r7
 800c07e:	4630      	mov	r0, r6
 800c080:	f010 ff4d 	bl	801cf1e <mp_copy>
               if (err == MP_OKAY)
 800c084:	4604      	mov	r4, r0
 800c086:	b970      	cbnz	r0, 800c0a6 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_copy(p->y, r->y);
 800c088:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800c08c:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800c090:	f010 ff45 	bl	801cf1e <mp_copy>
               if (err == MP_OKAY)
 800c094:	4604      	mov	r4, r0
 800c096:	b930      	cbnz	r0, 800c0a6 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_copy(p->z, r->z);
 800c098:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800c09c:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 800c0a0:	f010 ff3d 	bl	801cf1e <mp_copy>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 800c0a4:	4604      	mov	r4, r0
       mp_clear(mu);
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	f00f ff8a 	bl	801bfc0 <mp_clear>
   FREE_MP_INT_SIZE(mu, heap, DYNAMIC_TYPE_ECC);
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f011 fc61 	bl	801d974 <free>
 800c0b2:	e01e      	b.n	800c0f2 <ecc_point_to_mont.constprop.0+0xb4>
               err = mp_mulmod(p->x, mu, modulus, r->x);
 800c0b4:	463b      	mov	r3, r7
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f010 fb36 	bl	801c72c <mp_mulmod>
               if (err == MP_OKAY)
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d1ef      	bne.n	800c0a6 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_mulmod(p->y, mu, modulus, r->y);
 800c0c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c0ca:	4642      	mov	r2, r8
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800c0d2:	f010 fb2b 	bl	801c72c <mp_mulmod>
               if (err == MP_OKAY)
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d1e4      	bne.n	800c0a6 <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 800c0dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 800c0e8:	f010 fb20 	bl	801c72c <mp_mulmod>
 800c0ec:	e7da      	b.n	800c0a4 <ecc_point_to_mont.constprop.0+0x66>
       err = MEMORY_E;
 800c0ee:	f06f 047c 	mvn.w	r4, #124	; 0x7c
}
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0f8 <_ecc_projective_dbl_point.constprop.0>:
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
 800c0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	9001      	str	r0, [sp, #4]
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c0fe:	2068      	movs	r0, #104	; 0x68
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
 800c100:	4689      	mov	r9, r1
 800c102:	4616      	mov	r6, r2
 800c104:	469a      	mov	sl, r3
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c106:	f011 fc2d 	bl	801d964 <malloc>
 800c10a:	4605      	mov	r5, r0
 800c10c:	b118      	cbz	r0, 800c116 <_ecc_projective_dbl_point.constprop.0+0x1e>
 800c10e:	2268      	movs	r2, #104	; 0x68
 800c110:	2100      	movs	r1, #0
 800c112:	f011 fc6f 	bl	801d9f4 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c116:	2068      	movs	r0, #104	; 0x68
 800c118:	f011 fc24 	bl	801d964 <malloc>
 800c11c:	4607      	mov	r7, r0
 800c11e:	2800      	cmp	r0, #0
 800c120:	f000 8123 	beq.w	800c36a <_ecc_projective_dbl_point.constprop.0+0x272>
 800c124:	2268      	movs	r2, #104	; 0x68
 800c126:	2100      	movs	r1, #0
 800c128:	f011 fc64 	bl	801d9f4 <memset>
      if (t1 == NULL || t2 == NULL) {
 800c12c:	b92d      	cbnz	r5, 800c13a <_ecc_projective_dbl_point.constprop.0+0x42>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c12e:	4638      	mov	r0, r7
 800c130:	e000      	b.n	800c134 <_ecc_projective_dbl_point.constprop.0+0x3c>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800c132:	4628      	mov	r0, r5
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c134:	f011 fc1e 	bl	801d974 <free>
 800c138:	e11a      	b.n	800c370 <_ecc_projective_dbl_point.constprop.0+0x278>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 800c13a:	4628      	mov	r0, r5
 800c13c:	f00f ff2b 	bl	801bf96 <mp_init>
   if (err == MP_OKAY) {
 800c140:	4604      	mov	r4, r0
 800c142:	b920      	cbnz	r0, 800c14e <_ecc_projective_dbl_point.constprop.0+0x56>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 800c144:	4638      	mov	r0, r7
 800c146:	f00f ff26 	bl	801bf96 <mp_init>
   if (err != MP_OKAY) {
 800c14a:	4604      	mov	r4, r0
 800c14c:	b148      	cbz	r0, 800c162 <_ecc_projective_dbl_point.constprop.0+0x6a>
       FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c14e:	4638      	mov	r0, r7
 800c150:	f011 fc10 	bl	801d974 <free>
       FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800c154:	4628      	mov	r0, r5
 800c156:	f011 fc0d 	bl	801d974 <free>
}
 800c15a:	4620      	mov	r0, r4
 800c15c:	b003      	add	sp, #12
 800c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err = mp_copy(P->x, x);
 800c162:	9801      	ldr	r0, [sp, #4]
 800c164:	4649      	mov	r1, r9
 800c166:	f010 feda 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800c16a:	4604      	mov	r4, r0
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f040 80f5 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_copy(P->y, y);
 800c172:	9b01      	ldr	r3, [sp, #4]
   y = R->y;
 800c174:	f109 0868 	add.w	r8, r9, #104	; 0x68
       err = mp_copy(P->y, y);
 800c178:	4641      	mov	r1, r8
 800c17a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c17e:	f010 fece 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800c182:	4604      	mov	r4, r0
 800c184:	2800      	cmp	r0, #0
 800c186:	f040 80e9 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_copy(P->z, z);
 800c18a:	9801      	ldr	r0, [sp, #4]
   z = R->z;
 800c18c:	f109 0bd0 	add.w	fp, r9, #208	; 0xd0
       err = mp_copy(P->z, z);
 800c190:	4659      	mov	r1, fp
 800c192:	30d0      	adds	r0, #208	; 0xd0
 800c194:	f010 fec3 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800c198:	4604      	mov	r4, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	f040 80de 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(z, t1);
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4658      	mov	r0, fp
 800c1a4:	f010 ff80 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f040 80d6 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800c1b0:	4652      	mov	r2, sl
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f010 ff79 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	f040 80cd 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(z, y, z);
 800c1c2:	465a      	mov	r2, fp
 800c1c4:	4641      	mov	r1, r8
 800c1c6:	4658      	mov	r0, fp
 800c1c8:	f010 f82f 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f040 80c4 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(z, modulus, mp);
 800c1d4:	4652      	mov	r2, sl
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	4658      	mov	r0, fp
 800c1da:	f010 ff67 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c1de:	4604      	mov	r4, r0
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f040 80bb 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_addmod_ct(z, z, modulus, z);
 800c1e6:	465b      	mov	r3, fp
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	4659      	mov	r1, fp
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f00f ff13 	bl	801c018 <mp_addmod_ct>
      if (err == MP_OKAY)
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	f040 80b1 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_submod_ct(x, t1, modulus, t2);
 800c1fa:	463b      	mov	r3, r7
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	4629      	mov	r1, r5
 800c200:	4648      	mov	r0, r9
 800c202:	f00f ff07 	bl	801c014 <mp_submod_ct>
      if (err == MP_OKAY)
 800c206:	4604      	mov	r4, r0
 800c208:	2800      	cmp	r0, #0
 800c20a:	f040 80a7 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t1, x, modulus, t1);
 800c20e:	462b      	mov	r3, r5
 800c210:	4632      	mov	r2, r6
 800c212:	4649      	mov	r1, r9
 800c214:	4628      	mov	r0, r5
 800c216:	f00f feff 	bl	801c018 <mp_addmod_ct>
      if (err == MP_OKAY)
 800c21a:	4604      	mov	r4, r0
 800c21c:	2800      	cmp	r0, #0
 800c21e:	f040 809d 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_mul(t1, t2, t2);
 800c222:	463a      	mov	r2, r7
 800c224:	4639      	mov	r1, r7
 800c226:	4628      	mov	r0, r5
 800c228:	f00f ffff 	bl	801c22a <mp_mul>
      if (err == MP_OKAY)
 800c22c:	4604      	mov	r4, r0
 800c22e:	2800      	cmp	r0, #0
 800c230:	f040 8094 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_montgomery_reduce(t2, modulus, mp);
 800c234:	4652      	mov	r2, sl
 800c236:	4631      	mov	r1, r6
 800c238:	4638      	mov	r0, r7
 800c23a:	f010 ff37 	bl	801d0ac <mp_montgomery_reduce>
      if (err == MP_OKAY)
 800c23e:	4604      	mov	r4, r0
 800c240:	2800      	cmp	r0, #0
 800c242:	f040 808b 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t2, t2, modulus, t1);
 800c246:	462b      	mov	r3, r5
 800c248:	4632      	mov	r2, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	4638      	mov	r0, r7
 800c24e:	f00f fee3 	bl	801c018 <mp_addmod_ct>
      if (err == MP_OKAY)
 800c252:	4604      	mov	r4, r0
 800c254:	2800      	cmp	r0, #0
 800c256:	f040 8081 	bne.w	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t1, t2, modulus, t1);
 800c25a:	462b      	mov	r3, r5
 800c25c:	4632      	mov	r2, r6
 800c25e:	4639      	mov	r1, r7
 800c260:	4628      	mov	r0, r5
 800c262:	f00f fed9 	bl	801c018 <mp_addmod_ct>
   if (err == MP_OKAY)
 800c266:	4604      	mov	r4, r0
 800c268:	2800      	cmp	r0, #0
 800c26a:	d177      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_addmod_ct(y, y, modulus, y);
 800c26c:	4643      	mov	r3, r8
 800c26e:	4632      	mov	r2, r6
 800c270:	4641      	mov	r1, r8
 800c272:	4640      	mov	r0, r8
 800c274:	f00f fed0 	bl	801c018 <mp_addmod_ct>
   if (err == MP_OKAY)
 800c278:	4604      	mov	r4, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d16e      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(y, y);
 800c27e:	4641      	mov	r1, r8
 800c280:	4640      	mov	r0, r8
 800c282:	f010 ff11 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c286:	4604      	mov	r4, r0
 800c288:	2800      	cmp	r0, #0
 800c28a:	d167      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 800c28c:	4652      	mov	r2, sl
 800c28e:	4631      	mov	r1, r6
 800c290:	4640      	mov	r0, r8
 800c292:	f010 ff0b 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c296:	4604      	mov	r4, r0
 800c298:	2800      	cmp	r0, #0
 800c29a:	d15f      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(y, t2);
 800c29c:	4639      	mov	r1, r7
 800c29e:	4640      	mov	r0, r8
 800c2a0:	f010 ff02 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d158      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(t2, modulus, mp);
 800c2aa:	4652      	mov	r2, sl
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f010 fefc 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d150      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_div_2_mod_ct(t2, modulus, t2);
 800c2ba:	463a      	mov	r2, r7
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f010 fef8 	bl	801d0b4 <mp_div_2_mod_ct>
   if (err == MP_OKAY)
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d148      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(y, x, y);
 800c2ca:	4642      	mov	r2, r8
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	f00f ffab 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d140      	bne.n	800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 800c2da:	4652      	mov	r2, sl
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4640      	mov	r0, r8
 800c2e0:	f010 fee4 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	bbc8      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(t1, x);
 800c2e8:	4649      	mov	r1, r9
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f010 fedc 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	bb98      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(x, modulus, mp);
 800c2f4:	4652      	mov	r2, sl
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4648      	mov	r0, r9
 800c2fa:	f010 fed7 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c2fe:	4604      	mov	r4, r0
 800c300:	bb60      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(x, y, modulus, x);
 800c302:	464b      	mov	r3, r9
 800c304:	4632      	mov	r2, r6
 800c306:	4641      	mov	r1, r8
 800c308:	4648      	mov	r0, r9
 800c30a:	f00f fe83 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c30e:	4604      	mov	r4, r0
 800c310:	bb20      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(x, y, modulus, x);
 800c312:	464b      	mov	r3, r9
 800c314:	4632      	mov	r2, r6
 800c316:	4641      	mov	r1, r8
 800c318:	4648      	mov	r0, r9
 800c31a:	f00f fe7b 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c31e:	4604      	mov	r4, r0
 800c320:	b9e0      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(y, x, modulus, y);
 800c322:	4643      	mov	r3, r8
 800c324:	4632      	mov	r2, r6
 800c326:	4649      	mov	r1, r9
 800c328:	4640      	mov	r0, r8
 800c32a:	f00f fe73 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c32e:	4604      	mov	r4, r0
 800c330:	b9a0      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(y, t1, y);
 800c332:	4642      	mov	r2, r8
 800c334:	4629      	mov	r1, r5
 800c336:	4640      	mov	r0, r8
 800c338:	f00f ff77 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c33c:	4604      	mov	r4, r0
 800c33e:	b968      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 800c340:	4652      	mov	r2, sl
 800c342:	4631      	mov	r1, r6
 800c344:	4640      	mov	r0, r8
 800c346:	f010 feb1 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c34a:	4604      	mov	r4, r0
 800c34c:	b930      	cbnz	r0, 800c35c <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(y, t2, modulus, y);
 800c34e:	4643      	mov	r3, r8
 800c350:	4632      	mov	r2, r6
 800c352:	4639      	mov	r1, r7
 800c354:	4640      	mov	r0, r8
 800c356:	f00f fe5d 	bl	801c014 <mp_submod_ct>
 800c35a:	4604      	mov	r4, r0
   mp_clear(t1);
 800c35c:	4628      	mov	r0, r5
 800c35e:	f00f fe2f 	bl	801bfc0 <mp_clear>
   mp_clear(t2);
 800c362:	4638      	mov	r0, r7
 800c364:	f00f fe2c 	bl	801bfc0 <mp_clear>
 800c368:	e6f1      	b.n	800c14e <_ecc_projective_dbl_point.constprop.0+0x56>
      if (t1 == NULL || t2 == NULL) {
 800c36a:	2d00      	cmp	r5, #0
 800c36c:	f47f aee1 	bne.w	800c132 <_ecc_projective_dbl_point.constprop.0+0x3a>
         return MEMORY_E;
 800c370:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800c374:	e6f1      	b.n	800c15a <_ecc_projective_dbl_point.constprop.0+0x62>

0800c376 <wc_ecc_curve_cache_load_item>:
{
 800c376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c378:	4616      	mov	r6, r2
 800c37a:	461d      	mov	r5, r3
    if (curve->spec_use >= curve->spec_count) {
 800c37c:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800c380:	4293      	cmp	r3, r2
{
 800c382:	4604      	mov	r4, r0
 800c384:	460f      	mov	r7, r1
    if (curve->spec_use >= curve->spec_count) {
 800c386:	d215      	bcs.n	800c3b4 <wc_ecc_curve_cache_load_item+0x3e>
    *dst = &curve->spec_ints[curve->spec_use++];
 800c388:	6980      	ldr	r0, [r0, #24]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	6222      	str	r2, [r4, #32]
 800c38e:	2268      	movs	r2, #104	; 0x68
 800c390:	fb02 0003 	mla	r0, r2, r3, r0
 800c394:	6030      	str	r0, [r6, #0]
    err = mp_init(*dst);
 800c396:	f00f fdfe 	bl	801bf96 <mp_init>
    if (err == MP_OKAY) {
 800c39a:	b968      	cbnz	r0, 800c3b8 <wc_ecc_curve_cache_load_item+0x42>
        curve->load_mask |= mask;
 800c39c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c3a0:	6830      	ldr	r0, [r6, #0]
 800c3a2:	431d      	orrs	r5, r3
 800c3a4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	2210      	movs	r2, #16
}
 800c3ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 800c3b0:	f010 bde6 	b.w	801cf80 <mp_read_radix>
        return ECC_BAD_ARG_E;
 800c3b4:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
 800c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3ba <_ecc_projective_add_point.isra.0>:
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 800c3ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (Q == R) {
 800c3be:	4291      	cmp	r1, r2
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 800c3c0:	4681      	mov	r9, r0
 800c3c2:	9100      	str	r1, [sp, #0]
      Q = tPt;
 800c3c4:	bf08      	it	eq
 800c3c6:	9000      	streq	r0, [sp, #0]
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c3c8:	f04f 0068 	mov.w	r0, #104	; 0x68
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 800c3cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c3d0:	4617      	mov	r7, r2
 800c3d2:	461d      	mov	r5, r3
   if (Q == R) {
 800c3d4:	bf08      	it	eq
 800c3d6:	4691      	moveq	r9, r2
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c3d8:	f011 fac4 	bl	801d964 <malloc>
 800c3dc:	4604      	mov	r4, r0
 800c3de:	b118      	cbz	r0, 800c3e8 <_ecc_projective_add_point.isra.0+0x2e>
 800c3e0:	2268      	movs	r2, #104	; 0x68
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	f011 fb06 	bl	801d9f4 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c3e8:	2068      	movs	r0, #104	; 0x68
 800c3ea:	f011 fabb 	bl	801d964 <malloc>
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f000 8208 	beq.w	800c806 <_ecc_projective_add_point.isra.0+0x44c>
 800c3f6:	2268      	movs	r2, #104	; 0x68
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	f011 fafb 	bl	801d9f4 <memset>
      if (t1 == NULL || t2 == NULL) {
 800c3fe:	b92c      	cbnz	r4, 800c40c <_ecc_projective_add_point.isra.0+0x52>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c400:	4630      	mov	r0, r6
 800c402:	e000      	b.n	800c406 <_ecc_projective_add_point.isra.0+0x4c>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800c404:	4620      	mov	r0, r4
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c406:	f011 fab5 	bl	801d974 <free>
 800c40a:	e1ff      	b.n	800c80c <_ecc_projective_add_point.isra.0+0x452>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 800c40c:	4620      	mov	r0, r4
 800c40e:	f00f fdc2 	bl	801bf96 <mp_init>
   if (err == MP_OKAY) {
 800c412:	4603      	mov	r3, r0
 800c414:	b920      	cbnz	r0, 800c420 <_ecc_projective_add_point.isra.0+0x66>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 800c416:	4630      	mov	r0, r6
 800c418:	f00f fdbd 	bl	801bf96 <mp_init>
   if (err != MP_OKAY) {
 800c41c:	4603      	mov	r3, r0
 800c41e:	b158      	cbz	r0, 800c438 <_ecc_projective_add_point.isra.0+0x7e>
 800c420:	9300      	str	r3, [sp, #0]
      FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c422:	4630      	mov	r0, r6
 800c424:	f011 faa6 	bl	801d974 <free>
      FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800c428:	4620      	mov	r0, r4
 800c42a:	f011 faa3 	bl	801d974 <free>
   return err;
 800c42e:	9b00      	ldr	r3, [sp, #0]
}
 800c430:	4618      	mov	r0, r3
 800c432:	b003      	add	sp, #12
 800c434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      err = mp_submod_ct(modulus, Q->y, modulus, t1);
 800c438:	9b00      	ldr	r3, [sp, #0]
 800c43a:	3368      	adds	r3, #104	; 0x68
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	9901      	ldr	r1, [sp, #4]
 800c440:	4623      	mov	r3, r4
 800c442:	462a      	mov	r2, r5
 800c444:	4628      	mov	r0, r5
 800c446:	f00f fde5 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY) {
 800c44a:	4603      	mov	r3, r0
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d159      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
      if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 800c450:	9900      	ldr	r1, [sp, #0]
 800c452:	4648      	mov	r0, r9
 800c454:	f00f fde2 	bl	801c01c <mp_cmp>
 800c458:	bb70      	cbnz	r0, 800c4b8 <_ecc_projective_add_point.isra.0+0xfe>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 800c45a:	9b00      	ldr	r3, [sp, #0]
 800c45c:	f103 0ad0 	add.w	sl, r3, #208	; 0xd0
 800c460:	4650      	mov	r0, sl
 800c462:	f010 fee7 	bl	801d234 <get_digit_count>
      if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 800c466:	b338      	cbz	r0, 800c4b8 <_ecc_projective_add_point.isra.0+0xfe>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 800c468:	4651      	mov	r1, sl
 800c46a:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 800c46e:	f00f fdd5 	bl	801c01c <mp_cmp>
 800c472:	bb08      	cbnz	r0, 800c4b8 <_ecc_projective_add_point.isra.0+0xfe>
           (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 800c474:	f109 0a68 	add.w	sl, r9, #104	; 0x68
 800c478:	9901      	ldr	r1, [sp, #4]
 800c47a:	4650      	mov	r0, sl
 800c47c:	f00f fdce 	bl	801c01c <mp_cmp>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 800c480:	b9a0      	cbnz	r0, 800c4ac <_ecc_projective_add_point.isra.0+0xf2>
          mp_clear(t1);
 800c482:	4620      	mov	r0, r4
 800c484:	f00f fd9c 	bl	801bfc0 <mp_clear>
          mp_clear(t2);
 800c488:	4630      	mov	r0, r6
 800c48a:	f00f fd99 	bl	801bfc0 <mp_clear>
            FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800c48e:	4630      	mov	r0, r6
 800c490:	f011 fa70 	bl	801d974 <free>
            FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800c494:	4620      	mov	r0, r4
 800c496:	f011 fa6d 	bl	801d974 <free>
         return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800c49a:	4643      	mov	r3, r8
 800c49c:	462a      	mov	r2, r5
 800c49e:	4639      	mov	r1, r7
 800c4a0:	4648      	mov	r0, r9
}
 800c4a2:	b003      	add	sp, #12
 800c4a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
         return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800c4a8:	f7ff be26 	b.w	800c0f8 <_ecc_projective_dbl_point.constprop.0>
           (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4650      	mov	r0, sl
 800c4b0:	f00f fdb4 	bl	801c01c <mp_cmp>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d0e4      	beq.n	800c482 <_ecc_projective_add_point.isra.0+0xc8>
       err = mp_copy(P->x, x);
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	4648      	mov	r0, r9
 800c4bc:	f010 fd2f 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	b9f8      	cbnz	r0, 800c504 <_ecc_projective_add_point.isra.0+0x14a>
   y = R->y;
 800c4c4:	f107 0a68 	add.w	sl, r7, #104	; 0x68
       err = mp_copy(P->y, y);
 800c4c8:	4651      	mov	r1, sl
 800c4ca:	f109 0068 	add.w	r0, r9, #104	; 0x68
 800c4ce:	f010 fd26 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	b9b0      	cbnz	r0, 800c504 <_ecc_projective_add_point.isra.0+0x14a>
   z = R->z;
 800c4d6:	f107 0bd0 	add.w	fp, r7, #208	; 0xd0
       err = mp_copy(P->z, z);
 800c4da:	4659      	mov	r1, fp
 800c4dc:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 800c4e0:	f010 fd1d 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY) {
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	b968      	cbnz	r0, 800c504 <_ecc_projective_add_point.isra.0+0x14a>
       if (!mp_iszero(Q->z)) {
 800c4e8:	9b00      	ldr	r3, [sp, #0]
 800c4ea:	f103 09d0 	add.w	r9, r3, #208	; 0xd0
 800c4ee:	4648      	mov	r0, r9
 800c4f0:	f010 fd1a 	bl	801cf28 <mp_iszero>
 800c4f4:	b170      	cbz	r0, 800c514 <_ecc_projective_add_point.isra.0+0x15a>
       err = mp_sqr(z, t1);
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4658      	mov	r0, fp
 800c4fa:	f010 fdd5 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c4fe:	4603      	mov	r3, r0
 800c500:	2800      	cmp	r0, #0
 800c502:	d047      	beq.n	800c594 <_ecc_projective_add_point.isra.0+0x1da>
   mp_clear(t1);
 800c504:	4620      	mov	r0, r4
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	f00f fd5a 	bl	801bfc0 <mp_clear>
   mp_clear(t2);
 800c50c:	4630      	mov	r0, r6
 800c50e:	f00f fd57 	bl	801bfc0 <mp_clear>
 800c512:	e786      	b.n	800c422 <_ecc_projective_add_point.isra.0+0x68>
           err = mp_sqr(Q->z, t1);
 800c514:	4621      	mov	r1, r4
 800c516:	4648      	mov	r0, r9
 800c518:	f010 fdc6 	bl	801d0a8 <mp_sqr>
           if (err == MP_OKAY)
 800c51c:	4603      	mov	r3, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d1f0      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(t1, modulus, mp);
 800c522:	4642      	mov	r2, r8
 800c524:	4629      	mov	r1, r5
 800c526:	4620      	mov	r0, r4
 800c528:	f010 fdc0 	bl	801d0ac <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800c52c:	4603      	mov	r3, r0
 800c52e:	2800      	cmp	r0, #0
 800c530:	d1e8      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(t1, x, x);
 800c532:	463a      	mov	r2, r7
 800c534:	4639      	mov	r1, r7
 800c536:	4620      	mov	r0, r4
 800c538:	f00f fe77 	bl	801c22a <mp_mul>
           if (err == MP_OKAY)
 800c53c:	4603      	mov	r3, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	d1e0      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(x, modulus, mp);
 800c542:	4642      	mov	r2, r8
 800c544:	4629      	mov	r1, r5
 800c546:	4638      	mov	r0, r7
 800c548:	f010 fdb0 	bl	801d0ac <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800c54c:	4603      	mov	r3, r0
 800c54e:	2800      	cmp	r0, #0
 800c550:	d1d8      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(Q->z, t1, t1);
 800c552:	4622      	mov	r2, r4
 800c554:	4621      	mov	r1, r4
 800c556:	4648      	mov	r0, r9
 800c558:	f00f fe67 	bl	801c22a <mp_mul>
           if (err == MP_OKAY)
 800c55c:	4603      	mov	r3, r0
 800c55e:	2800      	cmp	r0, #0
 800c560:	d1d0      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(t1, modulus, mp);
 800c562:	4642      	mov	r2, r8
 800c564:	4629      	mov	r1, r5
 800c566:	4620      	mov	r0, r4
 800c568:	f010 fda0 	bl	801d0ac <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800c56c:	4603      	mov	r3, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d1c8      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(t1, y, y);
 800c572:	4652      	mov	r2, sl
 800c574:	4651      	mov	r1, sl
 800c576:	4620      	mov	r0, r4
 800c578:	f00f fe57 	bl	801c22a <mp_mul>
           if (err == MP_OKAY)
 800c57c:	4603      	mov	r3, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	d1c0      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(y, modulus, mp);
 800c582:	4642      	mov	r2, r8
 800c584:	4629      	mov	r1, r5
 800c586:	4650      	mov	r0, sl
 800c588:	f010 fd90 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c58c:	4603      	mov	r3, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	d0b1      	beq.n	800c4f6 <_ecc_projective_add_point.isra.0+0x13c>
 800c592:	e7b7      	b.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800c594:	4642      	mov	r2, r8
 800c596:	4629      	mov	r1, r5
 800c598:	4620      	mov	r0, r4
 800c59a:	f010 fd87 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1af      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(Q->x, t1, t2);
 800c5a4:	9800      	ldr	r0, [sp, #0]
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	f00f fe3e 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d1a7      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 800c5b4:	4642      	mov	r2, r8
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f010 fd77 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d19f      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(z, t1, t1);
 800c5c4:	4622      	mov	r2, r4
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	4658      	mov	r0, fp
 800c5ca:	f00f fe2e 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d197      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800c5d4:	4642      	mov	r2, r8
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f010 fd67 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d18f      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(Q->y, t1, t1);
 800c5e4:	9801      	ldr	r0, [sp, #4]
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	f00f fe1e 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d187      	bne.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800c5f4:	4642      	mov	r2, r8
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f010 fd57 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c5fe:	4603      	mov	r3, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	f47f af7f 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(y, t1, modulus, y);
 800c606:	4653      	mov	r3, sl
 800c608:	462a      	mov	r2, r5
 800c60a:	4621      	mov	r1, r4
 800c60c:	4650      	mov	r0, sl
 800c60e:	f00f fd01 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c612:	4603      	mov	r3, r0
 800c614:	2800      	cmp	r0, #0
 800c616:	f47f af75 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t1, t1, modulus, t1);
 800c61a:	4623      	mov	r3, r4
 800c61c:	462a      	mov	r2, r5
 800c61e:	4621      	mov	r1, r4
 800c620:	4620      	mov	r0, r4
 800c622:	f00f fcf9 	bl	801c018 <mp_addmod_ct>
   if (err == MP_OKAY)
 800c626:	4603      	mov	r3, r0
 800c628:	2800      	cmp	r0, #0
 800c62a:	f47f af6b 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t1, y, modulus, t1);
 800c62e:	4623      	mov	r3, r4
 800c630:	462a      	mov	r2, r5
 800c632:	4651      	mov	r1, sl
 800c634:	4620      	mov	r0, r4
 800c636:	f00f fcef 	bl	801c018 <mp_addmod_ct>
   if (err == MP_OKAY)
 800c63a:	4603      	mov	r3, r0
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f47f af61 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(x, t2, modulus, x);
 800c642:	463b      	mov	r3, r7
 800c644:	462a      	mov	r2, r5
 800c646:	4631      	mov	r1, r6
 800c648:	4638      	mov	r0, r7
 800c64a:	f00f fce3 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c64e:	4603      	mov	r3, r0
 800c650:	2800      	cmp	r0, #0
 800c652:	f47f af57 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t2, t2, modulus, t2);
 800c656:	4633      	mov	r3, r6
 800c658:	462a      	mov	r2, r5
 800c65a:	4631      	mov	r1, r6
 800c65c:	4630      	mov	r0, r6
 800c65e:	f00f fcdb 	bl	801c018 <mp_addmod_ct>
   if (err == MP_OKAY)
 800c662:	4603      	mov	r3, r0
 800c664:	2800      	cmp	r0, #0
 800c666:	f47f af4d 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t2, x, modulus, t2);
 800c66a:	4633      	mov	r3, r6
 800c66c:	462a      	mov	r2, r5
 800c66e:	4639      	mov	r1, r7
 800c670:	4630      	mov	r0, r6
 800c672:	f00f fcd1 	bl	801c018 <mp_addmod_ct>
   if (err == MP_OKAY) {
 800c676:	4603      	mov	r3, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	f47f af43 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       if (!mp_iszero(Q->z)) {
 800c67e:	4648      	mov	r0, r9
 800c680:	f010 fc52 	bl	801cf28 <mp_iszero>
 800c684:	2800      	cmp	r0, #0
 800c686:	f000 80ab 	beq.w	800c7e0 <_ecc_projective_add_point.isra.0+0x426>
       err = mp_mul(z, x, z);
 800c68a:	465a      	mov	r2, fp
 800c68c:	4639      	mov	r1, r7
 800c68e:	4658      	mov	r0, fp
 800c690:	f00f fdcb 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c694:	4603      	mov	r3, r0
 800c696:	2800      	cmp	r0, #0
 800c698:	f47f af34 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(z, modulus, mp);
 800c69c:	4642      	mov	r2, r8
 800c69e:	4629      	mov	r1, r5
 800c6a0:	4658      	mov	r0, fp
 800c6a2:	f010 fd03 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f47f af2b 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t1, x, t1);
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f00f fdb9 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f47f af22 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800c6c0:	4642      	mov	r2, r8
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f010 fcf1 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f47f af19 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_sqr(x, x);
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f010 fce7 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	f47f af11 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(x, modulus, mp);
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	f010 fce0 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f47f af08 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t2, x, t2);
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	4639      	mov	r1, r7
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f00f fd96 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c6fe:	4603      	mov	r3, r0
 800c700:	2800      	cmp	r0, #0
 800c702:	f47f aeff 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 800c706:	4642      	mov	r2, r8
 800c708:	4629      	mov	r1, r5
 800c70a:	4630      	mov	r0, r6
 800c70c:	f010 fcce 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c710:	4603      	mov	r3, r0
 800c712:	2800      	cmp	r0, #0
 800c714:	f47f aef6 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t1, x, t1);
 800c718:	4622      	mov	r2, r4
 800c71a:	4639      	mov	r1, r7
 800c71c:	4620      	mov	r0, r4
 800c71e:	f00f fd84 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c722:	4603      	mov	r3, r0
 800c724:	2800      	cmp	r0, #0
 800c726:	f47f aeed 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800c72a:	4642      	mov	r2, r8
 800c72c:	4629      	mov	r1, r5
 800c72e:	4620      	mov	r0, r4
 800c730:	f010 fcbc 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c734:	4603      	mov	r3, r0
 800c736:	2800      	cmp	r0, #0
 800c738:	f47f aee4 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_sqr(y, x);
 800c73c:	4639      	mov	r1, r7
 800c73e:	4650      	mov	r0, sl
 800c740:	f010 fcb2 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800c744:	4603      	mov	r3, r0
 800c746:	2800      	cmp	r0, #0
 800c748:	f47f aedc 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(x, modulus, mp);
 800c74c:	4642      	mov	r2, r8
 800c74e:	4629      	mov	r1, r5
 800c750:	4638      	mov	r0, r7
 800c752:	f010 fcab 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c756:	4603      	mov	r3, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	f47f aed3 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(x, t2, modulus, x);
 800c75e:	463b      	mov	r3, r7
 800c760:	462a      	mov	r2, r5
 800c762:	4631      	mov	r1, r6
 800c764:	4638      	mov	r0, r7
 800c766:	f00f fc55 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c76a:	4603      	mov	r3, r0
 800c76c:	2800      	cmp	r0, #0
 800c76e:	f47f aec9 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, x, modulus, t2);
 800c772:	4633      	mov	r3, r6
 800c774:	462a      	mov	r2, r5
 800c776:	4639      	mov	r1, r7
 800c778:	4630      	mov	r0, r6
 800c77a:	f00f fc4b 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c77e:	4603      	mov	r3, r0
 800c780:	2800      	cmp	r0, #0
 800c782:	f47f aebf 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, x, modulus, t2);
 800c786:	4633      	mov	r3, r6
 800c788:	462a      	mov	r2, r5
 800c78a:	4639      	mov	r1, r7
 800c78c:	4630      	mov	r0, r6
 800c78e:	f00f fc41 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c792:	4603      	mov	r3, r0
 800c794:	2800      	cmp	r0, #0
 800c796:	f47f aeb5 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t2, y, t2);
 800c79a:	4632      	mov	r2, r6
 800c79c:	4651      	mov	r1, sl
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f00f fd43 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f47f aeac 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 800c7ac:	4642      	mov	r2, r8
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f010 fc7b 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	f47f aea3 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, t1, modulus, y);
 800c7be:	4653      	mov	r3, sl
 800c7c0:	462a      	mov	r2, r5
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f00f fc25 	bl	801c014 <mp_submod_ct>
   if (err == MP_OKAY)
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f47f ae99 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_div_2_mod_ct(y, modulus, y);
 800c7d2:	4652      	mov	r2, sl
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	4650      	mov	r0, sl
 800c7d8:	f010 fc6c 	bl	801d0b4 <mp_div_2_mod_ct>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	e691      	b.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
           err = mp_mul(z, Q->z, z);
 800c7e0:	465a      	mov	r2, fp
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	4658      	mov	r0, fp
 800c7e6:	f00f fd20 	bl	801c22a <mp_mul>
           if (err == MP_OKAY)
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	f47f ae89 	bne.w	800c504 <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(z, modulus, mp);
 800c7f2:	4642      	mov	r2, r8
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4658      	mov	r0, fp
 800c7f8:	f010 fc58 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f43f af43 	beq.w	800c68a <_ecc_projective_add_point.isra.0+0x2d0>
 800c804:	e67e      	b.n	800c504 <_ecc_projective_add_point.isra.0+0x14a>
      if (t1 == NULL || t2 == NULL) {
 800c806:	2c00      	cmp	r4, #0
 800c808:	f47f adfc 	bne.w	800c404 <_ecc_projective_add_point.isra.0+0x4a>
         return MEMORY_E;
 800c80c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c810:	e60e      	b.n	800c430 <_ecc_projective_add_point.isra.0+0x76>

0800c812 <wc_ecc_curve_free>:
{
 800c812:	b510      	push	{r4, lr}
    if (curve) {
 800c814:	4604      	mov	r4, r0
 800c816:	2800      	cmp	r0, #0
 800c818:	d042      	beq.n	800c8a0 <wc_ecc_curve_free+0x8e>
    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 800c81a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c81e:	07db      	lsls	r3, r3, #31
 800c820:	d509      	bpl.n	800c836 <wc_ecc_curve_free+0x24>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 800c822:	6840      	ldr	r0, [r0, #4]
    if (item) {
 800c824:	b108      	cbz	r0, 800c82a <wc_ecc_curve_free+0x18>
        mp_clear(item);
 800c826:	f00f fbcb 	bl	801bfc0 <mp_clear>
    curve->load_mask &= ~mask;
 800c82a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c82e:	f023 0301 	bic.w	r3, r3, #1
 800c832:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 800c836:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c83a:	0798      	lsls	r0, r3, #30
 800c83c:	d509      	bpl.n	800c852 <wc_ecc_curve_free+0x40>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 800c83e:	68a0      	ldr	r0, [r4, #8]
    if (item) {
 800c840:	b108      	cbz	r0, 800c846 <wc_ecc_curve_free+0x34>
        mp_clear(item);
 800c842:	f00f fbbd 	bl	801bfc0 <mp_clear>
    curve->load_mask &= ~mask;
 800c846:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c84a:	f023 0302 	bic.w	r3, r3, #2
 800c84e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 800c852:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c856:	0719      	lsls	r1, r3, #28
 800c858:	d509      	bpl.n	800c86e <wc_ecc_curve_free+0x5c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 800c85a:	68e0      	ldr	r0, [r4, #12]
    if (item) {
 800c85c:	b108      	cbz	r0, 800c862 <wc_ecc_curve_free+0x50>
        mp_clear(item);
 800c85e:	f00f fbaf 	bl	801bfc0 <mp_clear>
    curve->load_mask &= ~mask;
 800c862:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c866:	f023 0308 	bic.w	r3, r3, #8
 800c86a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 800c86e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c872:	06da      	lsls	r2, r3, #27
 800c874:	d509      	bpl.n	800c88a <wc_ecc_curve_free+0x78>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 800c876:	6920      	ldr	r0, [r4, #16]
    if (item) {
 800c878:	b108      	cbz	r0, 800c87e <wc_ecc_curve_free+0x6c>
        mp_clear(item);
 800c87a:	f00f fba1 	bl	801bfc0 <mp_clear>
    curve->load_mask &= ~mask;
 800c87e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c882:	f023 0310 	bic.w	r3, r3, #16
 800c886:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 800c88a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c88e:	069b      	lsls	r3, r3, #26
 800c890:	d503      	bpl.n	800c89a <wc_ecc_curve_free+0x88>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 800c892:	6960      	ldr	r0, [r4, #20]
    if (item) {
 800c894:	b108      	cbz	r0, 800c89a <wc_ecc_curve_free+0x88>
        mp_clear(item);
 800c896:	f00f fb93 	bl	801bfc0 <mp_clear>
    curve->load_mask = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800c8a0:	bd10      	pop	{r4, pc}

0800c8a2 <wc_ecc_curve_load>:
{
 800c8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (dp == NULL || pCurve == NULL)
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d048      	beq.n	800c93c <wc_ecc_curve_load+0x9a>
    curve = *pCurve;
 800c8aa:	680d      	ldr	r5, [r1, #0]
    if (curve->dp != dp) {
 800c8ac:	682b      	ldr	r3, [r5, #0]
    curve->dp = dp; /* set dp info */
 800c8ae:	6028      	str	r0, [r5, #0]
    if (curve->dp != dp) {
 800c8b0:	4283      	cmp	r3, r0
        curve->load_mask = 0;
 800c8b2:	bf1c      	itt	ne
 800c8b4:	2300      	movne	r3, #0
 800c8b6:	f885 3024 	strbne.w	r3, [r5, #36]	; 0x24
    load_items = (byte)(((byte)~(word32)curve->load_mask) & load_mask);
 800c8ba:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800c8be:	ea22 0703 	bic.w	r7, r2, r3
    if (load_items & ECC_CURVE_FIELD_PRIME)
 800c8c2:	f017 0401 	ands.w	r4, r7, #1
    curve->load_mask |= load_items;
 800c8c6:	ea43 0302 	orr.w	r3, r3, r2
 800c8ca:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (load_items & ECC_CURVE_FIELD_PRIME)
 800c8ce:	d006      	beq.n	800c8de <wc_ecc_curve_load+0x3c>
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 800c8d0:	68c1      	ldr	r1, [r0, #12]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	1d2a      	adds	r2, r5, #4
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f7ff fd4d 	bl	800c376 <wc_ecc_curve_cache_load_item>
 800c8dc:	4604      	mov	r4, r0
    if (load_items & ECC_CURVE_FIELD_AF)
 800c8de:	07b8      	lsls	r0, r7, #30
 800c8e0:	d507      	bpl.n	800c8f2 <wc_ecc_curve_load+0x50>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 800c8e2:	6931      	ldr	r1, [r6, #16]
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	f105 0208 	add.w	r2, r5, #8
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff fd43 	bl	800c376 <wc_ecc_curve_cache_load_item>
 800c8f0:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_ORDER)
 800c8f2:	0739      	lsls	r1, r7, #28
 800c8f4:	d507      	bpl.n	800c906 <wc_ecc_curve_load+0x64>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 800c8f6:	69b1      	ldr	r1, [r6, #24]
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	f105 020c 	add.w	r2, r5, #12
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7ff fd39 	bl	800c376 <wc_ecc_curve_cache_load_item>
 800c904:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_GX)
 800c906:	06fa      	lsls	r2, r7, #27
 800c908:	d506      	bpl.n	800c918 <wc_ecc_curve_load+0x76>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 800c90a:	2310      	movs	r3, #16
 800c90c:	69f1      	ldr	r1, [r6, #28]
 800c90e:	18ea      	adds	r2, r5, r3
 800c910:	4628      	mov	r0, r5
 800c912:	f7ff fd30 	bl	800c376 <wc_ecc_curve_cache_load_item>
 800c916:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_GY)
 800c918:	06bb      	lsls	r3, r7, #26
 800c91a:	d507      	bpl.n	800c92c <wc_ecc_curve_load+0x8a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 800c91c:	6a31      	ldr	r1, [r6, #32]
 800c91e:	2320      	movs	r3, #32
 800c920:	f105 0214 	add.w	r2, r5, #20
 800c924:	4628      	mov	r0, r5
 800c926:	f7ff fd26 	bl	800c376 <wc_ecc_curve_cache_load_item>
 800c92a:	4404      	add	r4, r0
    if (ret != 0) {
 800c92c:	b124      	cbz	r4, 800c938 <wc_ecc_curve_load+0x96>
        wc_ecc_curve_free(curve);
 800c92e:	4628      	mov	r0, r5
 800c930:	f7ff ff6f 	bl	800c812 <wc_ecc_curve_free>
        ret = MP_READ_E;
 800c934:	f06f 046e 	mvn.w	r4, #110	; 0x6e
}
 800c938:	4620      	mov	r0, r4
 800c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 800c93c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800c940:	e7fa      	b.n	800c938 <wc_ecc_curve_load+0x96>
	...

0800c944 <wc_ecc_set_curve>:
    if (key == NULL || (keysize <= 0 && curve_id < 0)) {
 800c944:	4603      	mov	r3, r0
 800c946:	b118      	cbz	r0, 800c950 <wc_ecc_set_curve+0xc>
 800c948:	2900      	cmp	r1, #0
 800c94a:	dc04      	bgt.n	800c956 <wc_ecc_set_curve+0x12>
 800c94c:	2a00      	cmp	r2, #0
 800c94e:	da04      	bge.n	800c95a <wc_ecc_set_curve+0x16>
        return BAD_FUNC_ARG;
 800c950:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c954:	4770      	bx	lr
    if (keysize > ECC_MAXSIZE) {
 800c956:	2942      	cmp	r1, #66	; 0x42
 800c958:	dc13      	bgt.n	800c982 <wc_ecc_set_curve+0x3e>
    if (key->idx != ECC_CUSTOM_IDX) {
 800c95a:	6858      	ldr	r0, [r3, #4]
 800c95c:	3001      	adds	r0, #1
 800c95e:	f04f 0000 	mov.w	r0, #0
 800c962:	d007      	beq.n	800c974 <wc_ecc_set_curve+0x30>
            if (curve_id > ECC_CURVE_DEF) {
 800c964:	4282      	cmp	r2, r0
        key->idx = 0;
 800c966:	6058      	str	r0, [r3, #4]
        key->dp = NULL;
 800c968:	6118      	str	r0, [r3, #16]
            if (curve_id > ECC_CURVE_DEF) {
 800c96a:	dc04      	bgt.n	800c976 <wc_ecc_set_curve+0x32>
            else if (keysize <= ecc_sets[x].size) {
 800c96c:	2920      	cmp	r1, #32
 800c96e:	dd04      	ble.n	800c97a <wc_ecc_set_curve+0x36>
            return ECC_CURVE_OID_E;
 800c970:	f06f 00ab 	mvn.w	r0, #171	; 0xab
}
 800c974:	4770      	bx	lr
                if (curve_id == ecc_sets[x].id)
 800c976:	2a07      	cmp	r2, #7
 800c978:	d1fa      	bne.n	800c970 <wc_ecc_set_curve+0x2c>
        key->dp  = &ecc_sets[x];
 800c97a:	4a03      	ldr	r2, [pc, #12]	; (800c988 <wc_ecc_set_curve+0x44>)
 800c97c:	611a      	str	r2, [r3, #16]
    return 0;
 800c97e:	2000      	movs	r0, #0
 800c980:	4770      	bx	lr
        return ECC_BAD_ARG_E;
 800c982:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800c986:	4770      	bx	lr
 800c988:	08022784 	.word	0x08022784

0800c98c <ecc_map_ex>:
{
 800c98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c990:	460f      	mov	r7, r1
 800c992:	4691      	mov	r9, r2
 800c994:	461c      	mov	r4, r3
   if (P == NULL || modulus == NULL)
 800c996:	4682      	mov	sl, r0
 800c998:	2800      	cmp	r0, #0
 800c99a:	f000 80b5 	beq.w	800cb08 <ecc_map_ex+0x17c>
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	f000 80b2 	beq.w	800cb08 <ecc_map_ex+0x17c>
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
 800c9a4:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	f00f fb38 	bl	801c020 <mp_cmp_d>
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	b9a8      	cbnz	r0, 800c9e0 <ecc_map_ex+0x54>
       err = mp_set(P->x, 0);
 800c9b4:	4650      	mov	r0, sl
 800c9b6:	f010 fb7f 	bl	801d0b8 <mp_set>
       if (err == MP_OKAY)
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f040 8092 	bne.w	800cae6 <ecc_map_ex+0x15a>
           err = mp_set(P->y, 0);
 800c9c2:	4601      	mov	r1, r0
 800c9c4:	f10a 0068 	add.w	r0, sl, #104	; 0x68
 800c9c8:	f010 fb76 	bl	801d0b8 <mp_set>
       if (err == MP_OKAY)
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	f040 8089 	bne.w	800cae6 <ecc_map_ex+0x15a>
           err = mp_set(P->z, 1);
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	2101      	movs	r1, #1
}
 800c9d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
           err = mp_set(P->z, 1);
 800c9dc:	f010 bb6c 	b.w	801d0b8 <mp_set>
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c9e0:	2068      	movs	r0, #104	; 0x68
 800c9e2:	f010 ffbf 	bl	801d964 <malloc>
 800c9e6:	4605      	mov	r5, r0
 800c9e8:	b118      	cbz	r0, 800c9f2 <ecc_map_ex+0x66>
 800c9ea:	2268      	movs	r2, #104	; 0x68
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	f011 f801 	bl	801d9f4 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800c9f2:	2068      	movs	r0, #104	; 0x68
 800c9f4:	f010 ffb6 	bl	801d964 <malloc>
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f000 8087 	beq.w	800cb0e <ecc_map_ex+0x182>
 800ca00:	2268      	movs	r2, #104	; 0x68
 800ca02:	2100      	movs	r1, #0
 800ca04:	f010 fff6 	bl	801d9f4 <memset>
      if (t1 == NULL || t2 == NULL) {
 800ca08:	b90d      	cbnz	r5, 800ca0e <ecc_map_ex+0x82>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	e007      	b.n	800ca1e <ecc_map_ex+0x92>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f00f fac1 	bl	801bf96 <mp_init>
   if (err == MP_OKAY) {
 800ca14:	b130      	cbz	r0, 800ca24 <ecc_map_ex+0x98>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800ca16:	4630      	mov	r0, r6
 800ca18:	f010 ffac 	bl	801d974 <free>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800ca1c:	4628      	mov	r0, r5
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800ca1e:	f010 ffa9 	bl	801d974 <free>
 800ca22:	e076      	b.n	800cb12 <ecc_map_ex+0x186>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 800ca24:	4630      	mov	r0, r6
 800ca26:	f00f fab6 	bl	801bf96 <mp_init>
   if (err != MP_OKAY) {
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d1f3      	bne.n	800ca16 <ecc_map_ex+0x8a>
       if (ct) {
 800ca2e:	2c00      	cmp	r4, #0
 800ca30:	d05c      	beq.n	800caec <ecc_map_ex+0x160>
           err = mp_invmod_mont_ct(z, modulus, t1, mp);
 800ca32:	464b      	mov	r3, r9
 800ca34:	462a      	mov	r2, r5
 800ca36:	4639      	mov	r1, r7
 800ca38:	4640      	mov	r0, r8
 800ca3a:	f010 fa42 	bl	801cec2 <mp_invmod_mont_ct>
           if (err == MP_OKAY)
 800ca3e:	4604      	mov	r4, r0
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d144      	bne.n	800cace <ecc_map_ex+0x142>
               err = mp_montgomery_reduce(t1, modulus, mp);
 800ca44:	464a      	mov	r2, r9
 800ca46:	4639      	mov	r1, r7
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f010 fb2f 	bl	801d0ac <mp_montgomery_reduce>
               err = mp_invmod(z, modulus, t1);
 800ca4e:	4604      	mov	r4, r0
   if (err == MP_OKAY)
 800ca50:	bbe8      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_sqr(t1, t2);
 800ca52:	4631      	mov	r1, r6
 800ca54:	4628      	mov	r0, r5
 800ca56:	f010 fb27 	bl	801d0a8 <mp_sqr>
   if (err == MP_OKAY)
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	bbb8      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_mod(t2, modulus, t2);
 800ca5e:	4632      	mov	r2, r6
 800ca60:	4639      	mov	r1, r7
 800ca62:	4630      	mov	r0, r6
 800ca64:	f00f fe64 	bl	801c730 <mp_mod>
   if (err == MP_OKAY)
 800ca68:	4604      	mov	r4, r0
 800ca6a:	bb80      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_mul(t1, t2, t1);
 800ca6c:	462a      	mov	r2, r5
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	f00f fbda 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800ca76:	4604      	mov	r4, r0
 800ca78:	bb48      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_mod(t1, modulus, t1);
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f00f fe56 	bl	801c730 <mp_mod>
   if (err == MP_OKAY)
 800ca84:	4604      	mov	r4, r0
 800ca86:	bb10      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_mul(x, t2, x);
 800ca88:	4652      	mov	r2, sl
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4650      	mov	r0, sl
 800ca8e:	f00f fbcc 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800ca92:	4604      	mov	r4, r0
 800ca94:	b9d8      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_montgomery_reduce(x, modulus, mp);
 800ca96:	464a      	mov	r2, r9
 800ca98:	4639      	mov	r1, r7
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	f010 fb06 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800caa0:	4604      	mov	r4, r0
 800caa2:	b9a0      	cbnz	r0, 800cace <ecc_map_ex+0x142>
   y = P->y;
 800caa4:	f10a 0a68 	add.w	sl, sl, #104	; 0x68
       err = mp_mul(y, t1, y);
 800caa8:	4652      	mov	r2, sl
 800caaa:	4629      	mov	r1, r5
 800caac:	4650      	mov	r0, sl
 800caae:	f00f fbbc 	bl	801c22a <mp_mul>
   if (err == MP_OKAY)
 800cab2:	4604      	mov	r4, r0
 800cab4:	b958      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_montgomery_reduce(y, modulus, mp);
 800cab6:	464a      	mov	r2, r9
 800cab8:	4639      	mov	r1, r7
 800caba:	4650      	mov	r0, sl
 800cabc:	f010 faf6 	bl	801d0ac <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800cac0:	4604      	mov	r4, r0
 800cac2:	b920      	cbnz	r0, 800cace <ecc_map_ex+0x142>
       err = mp_set(z, 1);
 800cac4:	2101      	movs	r1, #1
 800cac6:	4640      	mov	r0, r8
 800cac8:	f010 faf6 	bl	801d0b8 <mp_set>
 800cacc:	4604      	mov	r4, r0
   mp_clear(t1);
 800cace:	4628      	mov	r0, r5
 800cad0:	f00f fa76 	bl	801bfc0 <mp_clear>
   mp_clear(t2);
 800cad4:	4630      	mov	r0, r6
 800cad6:	f00f fa73 	bl	801bfc0 <mp_clear>
      FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 800cada:	4630      	mov	r0, r6
 800cadc:	f010 ff4a 	bl	801d974 <free>
      FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800cae0:	4628      	mov	r0, r5
 800cae2:	f010 ff47 	bl	801d974 <free>
}
 800cae6:	4620      	mov	r0, r4
 800cae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
           err = mp_montgomery_reduce(z, modulus, mp);
 800caec:	464a      	mov	r2, r9
 800caee:	4639      	mov	r1, r7
 800caf0:	4640      	mov	r0, r8
 800caf2:	f010 fadb 	bl	801d0ac <mp_montgomery_reduce>
           if (err == MP_OKAY)
 800caf6:	4604      	mov	r4, r0
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d1e8      	bne.n	800cace <ecc_map_ex+0x142>
               err = mp_invmod(z, modulus, t1);
 800cafc:	462a      	mov	r2, r5
 800cafe:	4639      	mov	r1, r7
 800cb00:	4640      	mov	r0, r8
 800cb02:	f010 f84f 	bl	801cba4 <mp_invmod>
 800cb06:	e7a2      	b.n	800ca4e <ecc_map_ex+0xc2>
       return ECC_BAD_ARG_E;
 800cb08:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800cb0c:	e7eb      	b.n	800cae6 <ecc_map_ex+0x15a>
      if (t1 == NULL || t2 == NULL) {
 800cb0e:	2d00      	cmp	r5, #0
 800cb10:	d184      	bne.n	800ca1c <ecc_map_ex+0x90>
         return MEMORY_E;
 800cb12:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800cb16:	e7e6      	b.n	800cae6 <ecc_map_ex+0x15a>

0800cb18 <ecc_map>:
    return ecc_map_ex(P, modulus, mp, 0);
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f7ff bf37 	b.w	800c98c <ecc_map_ex>

0800cb1e <wc_ecc_copy_point>:
/** Copy the value of a point to an other one
  p    The point to copy
  r    The created point
*/
int wc_ecc_copy_point(const ecc_point* p, ecc_point *r)
{
 800cb1e:	b538      	push	{r3, r4, r5, lr}
 800cb20:	460d      	mov	r5, r1
    int ret;

    /* prevents null arguments */
    if (p == NULL || r == NULL)
 800cb22:	4604      	mov	r4, r0
 800cb24:	b190      	cbz	r0, 800cb4c <wc_ecc_copy_point+0x2e>
 800cb26:	b189      	cbz	r1, 800cb4c <wc_ecc_copy_point+0x2e>
        return ECC_BAD_ARG_E;

    ret = mp_copy(p->x, r->x);
 800cb28:	f010 f9f9 	bl	801cf1e <mp_copy>
    if (ret != MP_OKAY)
 800cb2c:	b980      	cbnz	r0, 800cb50 <wc_ecc_copy_point+0x32>
        return ret;
    ret = mp_copy(p->y, r->y);
 800cb2e:	f105 0168 	add.w	r1, r5, #104	; 0x68
 800cb32:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb36:	f010 f9f2 	bl	801cf1e <mp_copy>
    if (ret != MP_OKAY)
 800cb3a:	b948      	cbnz	r0, 800cb50 <wc_ecc_copy_point+0x32>
        return ret;
    ret = mp_copy(p->z, r->z);
 800cb3c:	f105 01d0 	add.w	r1, r5, #208	; 0xd0
 800cb40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    if (ret != MP_OKAY)
        return ret;

    return MP_OKAY;
}
 800cb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = mp_copy(p->z, r->z);
 800cb48:	f010 b9e9 	b.w	801cf1e <mp_copy>
        return ECC_BAD_ARG_E;
 800cb4c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
 800cb50:	bd38      	pop	{r3, r4, r5, pc}

0800cb52 <wc_ecc_is_valid_idx>:
*/
int wc_ecc_is_valid_idx(int n)
{
   int x;

   if (n >= (int)ECC_SET_COUNT)
 800cb52:	3001      	adds	r0, #1
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
      return 1;
   }

   return 0;
}
 800cb54:	2801      	cmp	r0, #1
 800cb56:	bf8c      	ite	hi
 800cb58:	2000      	movhi	r0, #0
 800cb5a:	2001      	movls	r0, #1
 800cb5c:	4770      	bx	lr

0800cb5e <wc_ecc_gen_k>:
}
#endif /* !WOLFSSL_ATECC508A && !WOLFSSL_CRYPTOCELL */

/* generate random and ensure its greater than 0 and less than order */
int wc_ecc_gen_k(WC_RNG* rng, int size, mp_int* k, mp_int* order)
{
 800cb5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb60:	4615      	mov	r5, r2
 800cb62:	b095      	sub	sp, #84	; 0x54
 800cb64:	461f      	mov	r7, r3
#ifndef WC_NO_RNG
    int err;
    byte buf[ECC_MAXSIZE_GEN];

    if (rng == NULL || size < 0 || size + 8 > ECC_MAXSIZE_GEN || k == NULL ||
 800cb66:	b3a0      	cbz	r0, 800cbd2 <wc_ecc_gen_k+0x74>
 800cb68:	2942      	cmp	r1, #66	; 0x42
 800cb6a:	d832      	bhi.n	800cbd2 <wc_ecc_gen_k+0x74>
 800cb6c:	b38a      	cbz	r2, 800cbd2 <wc_ecc_gen_k+0x74>
 800cb6e:	b383      	cbz	r3, 800cbd2 <wc_ecc_gen_k+0x74>
        return BAD_FUNC_ARG;
    }

    /* generate 8 extra bytes to mitigate bias from the modulo operation below */
    /* see section A.1.2 in 'Suite B Implementor's Guide to FIPS 186-3 (ECDSA)' */
    size += 8;
 800cb70:	f101 0608 	add.w	r6, r1, #8

    /* make up random string */
    err = wc_RNG_GenerateBlock(rng, buf, (word32)size);
 800cb74:	4632      	mov	r2, r6
 800cb76:	a901      	add	r1, sp, #4
 800cb78:	f001 ffda 	bl	800eb30 <wc_RNG_GenerateBlock>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_ecc_gen_k buf", buf, size);
#endif

    /* load random buffer data into k */
    if (err == 0)
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	b998      	cbnz	r0, 800cba8 <wc_ecc_gen_k+0x4a>
        err = mp_read_unsigned_bin(k, buf, (word32)size);
 800cb80:	4632      	mov	r2, r6
 800cb82:	a901      	add	r1, sp, #4
 800cb84:	4628      	mov	r0, r5
 800cb86:	f00f fa4f 	bl	801c028 <mp_read_unsigned_bin>

    /* the key should be smaller than the order of base point */
    if (err == MP_OKAY) {
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	b960      	cbnz	r0, 800cba8 <wc_ecc_gen_k+0x4a>
        if (mp_cmp(k, order) != MP_LT) {
 800cb8e:	4639      	mov	r1, r7
 800cb90:	4628      	mov	r0, r5
 800cb92:	f00f fa43 	bl	801c01c <mp_cmp>
 800cb96:	3001      	adds	r0, #1
 800cb98:	d110      	bne.n	800cbbc <wc_ecc_gen_k+0x5e>
        }
    }

    /* quick sanity check to make sure we're not dealing with a 0 key */
    if (err == MP_OKAY) {
        if (mp_iszero(k) == MP_YES)
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f010 f9c4 	bl	801cf28 <mp_iszero>
          err = MP_ZERO_E;
 800cba0:	2801      	cmp	r0, #1
 800cba2:	bf08      	it	eq
 800cba4:	f06f 0478 	mvneq.w	r4, #120	; 0x78
    while (len--) *z++ = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4619      	mov	r1, r3
 800cbac:	aa01      	add	r2, sp, #4
 800cbae:	441a      	add	r2, r3
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	2b4b      	cmp	r3, #75	; 0x4b
 800cbb4:	d10b      	bne.n	800cbce <wc_ecc_gen_k+0x70>
    (void)size;
    (void)k;
    (void)order;
    return NOT_COMPILED_IN;
#endif /* !WC_NO_RNG */
}
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	b015      	add	sp, #84	; 0x54
 800cbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err = mp_mod(k, order, k);
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f00f fdb5 	bl	801c730 <mp_mod>
    if (err == MP_OKAY) {
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0e7      	beq.n	800cb9a <wc_ecc_gen_k+0x3c>
 800cbca:	4604      	mov	r4, r0
 800cbcc:	e7ec      	b.n	800cba8 <wc_ecc_gen_k+0x4a>
 800cbce:	7011      	strb	r1, [r2, #0]
 800cbd0:	e7ec      	b.n	800cbac <wc_ecc_gen_k+0x4e>
        return BAD_FUNC_ARG;
 800cbd2:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800cbd6:	e7ee      	b.n	800cbb6 <wc_ecc_gen_k+0x58>

0800cbd8 <wc_ecc_gen_z>:
{
 800cbd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	e9dd 6b0c 	ldrd	r6, fp, [sp, #48]	; 0x30
 800cbe0:	4681      	mov	r9, r0
 800cbe2:	468a      	mov	sl, r1
    err = mp_montgomery_calc_normalization(mu, modulus);
 800cbe4:	4658      	mov	r0, fp
 800cbe6:	4619      	mov	r1, r3
{
 800cbe8:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 800cbec:	4614      	mov	r4, r2
 800cbee:	461d      	mov	r5, r3
    err = mp_montgomery_calc_normalization(mu, modulus);
 800cbf0:	f010 f9a5 	bl	801cf3e <mp_montgomery_calc_normalization>
    if (err == MP_OKAY)
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d14d      	bne.n	800cc94 <wc_ecc_gen_z+0xbc>
        err = wc_ecc_gen_k(rng, size, ty, modulus);
 800cbf8:	462b      	mov	r3, r5
 800cbfa:	4632      	mov	r2, r6
 800cbfc:	4651      	mov	r1, sl
 800cbfe:	4648      	mov	r0, r9
 800cc00:	f7ff ffad 	bl	800cb5e <wc_ecc_gen_k>
    if (err == MP_OKAY)
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d145      	bne.n	800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_mulmod(ty, mu, modulus, ty);
 800cc08:	4633      	mov	r3, r6
 800cc0a:	462a      	mov	r2, r5
 800cc0c:	4659      	mov	r1, fp
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f00f fd8c 	bl	801c72c <mp_mulmod>
    if (err == MP_OKAY)
 800cc14:	bbf0      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->z, ty, p->z);
 800cc16:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
 800cc1a:	464a      	mov	r2, r9
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4648      	mov	r0, r9
 800cc20:	f00f fb03 	bl	801c22a <mp_mul>
    if (err == MP_OKAY)
 800cc24:	bbb0      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->z, modulus, mp);
 800cc26:	463a      	mov	r2, r7
 800cc28:	4629      	mov	r1, r5
 800cc2a:	4648      	mov	r0, r9
 800cc2c:	f010 fa3e 	bl	801d0ac <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800cc30:	bb80      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_sqr(ty, tx);
 800cc32:	4641      	mov	r1, r8
 800cc34:	4630      	mov	r0, r6
 800cc36:	f010 fa37 	bl	801d0a8 <mp_sqr>
    if (err == MP_OKAY)
 800cc3a:	bb58      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(tx, modulus, mp);
 800cc3c:	463a      	mov	r2, r7
 800cc3e:	4629      	mov	r1, r5
 800cc40:	4640      	mov	r0, r8
 800cc42:	f010 fa33 	bl	801d0ac <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800cc46:	bb28      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_mul(ty, tx, ty);
 800cc48:	4632      	mov	r2, r6
 800cc4a:	4641      	mov	r1, r8
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	f00f faec 	bl	801c22a <mp_mul>
    if (err == MP_OKAY)
 800cc52:	b9f8      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(ty, modulus, mp);
 800cc54:	463a      	mov	r2, r7
 800cc56:	4629      	mov	r1, r5
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f010 fa27 	bl	801d0ac <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800cc5e:	b9c8      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->x, tx, p->x);
 800cc60:	4622      	mov	r2, r4
 800cc62:	4641      	mov	r1, r8
 800cc64:	4620      	mov	r0, r4
 800cc66:	f00f fae0 	bl	801c22a <mp_mul>
    if (err == MP_OKAY)
 800cc6a:	b998      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->x, modulus, mp);
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4620      	mov	r0, r4
 800cc72:	f010 fa1b 	bl	801d0ac <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800cc76:	b968      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->y, ty, p->y);
 800cc78:	3468      	adds	r4, #104	; 0x68
 800cc7a:	4622      	mov	r2, r4
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f00f fad3 	bl	801c22a <mp_mul>
    if (err == MP_OKAY)
 800cc84:	b930      	cbnz	r0, 800cc94 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->y, modulus, mp);
 800cc86:	463a      	mov	r2, r7
 800cc88:	4629      	mov	r1, r5
 800cc8a:	4620      	mov	r0, r4
}
 800cc8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        err = mp_montgomery_reduce(p->y, modulus, mp);
 800cc90:	f010 ba0c 	b.w	801d0ac <mp_montgomery_reduce>
}
 800cc94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc98 <wc_ecc_init_ex>:
}

/* Setup dynamic pointers if using normal math for proper freeing */
WOLFSSL_ABI
int wc_ecc_init_ex(ecc_key* key, void* heap, int devId)
{
 800cc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc9a:	460d      	mov	r5, r1
    int ret      = 0;
#if defined(HAVE_PKCS11)
    int isPkcs11 = 0;
#endif

    if (key == NULL) {
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	b1b0      	cbz	r0, 800ccce <wc_ecc_init_ex+0x36>

#ifdef ECC_DUMP_OID
    wc_ecc_dump_oids();
#endif

    XMEMSET(key, 0, sizeof(ecc_key));
 800cca0:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800cca4:	2100      	movs	r1, #0
 800cca6:	f010 fea5 	bl	801d9f4 <memset>
    key->state = ECC_STATE_NONE;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60a3      	str	r3, [r4, #8]
    alt_fp_init(key->pubkey.y);
    alt_fp_init(key->pubkey.z);
    key->k = (mp_int*)key->ka;
    alt_fp_init(key->k);
#else
    ret = mp_init_multi(key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 800ccae:	f104 0280 	add.w	r2, r4, #128	; 0x80
 800ccb2:	e9cd 3300 	strd	r3, r3, [sp]
 800ccb6:	f104 0118 	add.w	r1, r4, #24
 800ccba:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
 800ccbe:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ccc2:	f00f f982 	bl	801bfca <mp_init_multi>
                                                                    NULL, NULL);
    if (ret != MP_OKAY) {
 800ccc6:	b928      	cbnz	r0, 800ccd4 <wc_ecc_init_ex+0x3c>
#endif

#ifdef WOLFSSL_HEAP_TEST
    key->heap = (void*)WOLFSSL_HEAP_TEST;
#else
    key->heap = heap;
 800ccc8:	6165      	str	r5, [r4, #20]
        return WC_HW_E;
    }
#endif

    return ret;
}
 800ccca:	b003      	add	sp, #12
 800cccc:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 800ccce:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800ccd2:	e7fa      	b.n	800ccca <wc_ecc_init_ex+0x32>
        return MEMORY_E;
 800ccd4:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800ccd8:	e7f7      	b.n	800ccca <wc_ecc_init_ex+0x32>

0800ccda <wc_ecc_free>:
  Free an ECC key from memory
  key   The key you wish to free
*/
WOLFSSL_ABI
int wc_ecc_free(ecc_key* key)
{
 800ccda:	b510      	push	{r4, lr}
    if (key == NULL) {
 800ccdc:	4604      	mov	r4, r0
 800ccde:	b170      	cbz	r0, 800ccfe <wc_ecc_free+0x24>

#ifdef WOLFSSL_MAXQ10XX_CRYPTO
    wc_MAXQ10XX_EccFree(key);
#endif

    mp_clear(key->pubkey.x);
 800cce0:	3018      	adds	r0, #24
 800cce2:	f00f f96d 	bl	801bfc0 <mp_clear>
    mp_clear(key->pubkey.y);
 800cce6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800ccea:	f00f f969 	bl	801bfc0 <mp_clear>
    mp_clear(key->pubkey.z);
 800ccee:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800ccf2:	f00f f965 	bl	801bfc0 <mp_clear>

#ifdef ALT_ECC_SIZE
    if (key->k)
#endif
        mp_forcezero(key->k);
 800ccf6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800ccfa:	f00f f95f 	bl	801bfbc <mp_forcezero>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(ecc_key));
#endif

    return 0;
}
 800ccfe:	2000      	movs	r0, #0
 800cd00:	bd10      	pop	{r4, pc}

0800cd02 <ecc_projective_add_point_safe>:
 *           (Result was: z == 0, x and/or y not 0)
 *        -> Need to set result to infinity.
 */
int ecc_projective_add_point_safe(ecc_point* A, ecc_point* B, ecc_point* R,
    mp_int* a, mp_int* modulus, mp_digit mp, int* infinity)
{
 800cd02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cd08:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28
 800cd0c:	4606      	mov	r6, r0
 800cd0e:	4689      	mov	r9, r1
 800cd10:	4614      	mov	r4, r2
    int err;

    if (mp_iszero(A->x) && mp_iszero(A->y)) {
 800cd12:	f010 f909 	bl	801cf28 <mp_iszero>
 800cd16:	b158      	cbz	r0, 800cd30 <ecc_projective_add_point_safe+0x2e>
 800cd18:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800cd1c:	f010 f904 	bl	801cf28 <mp_iszero>
 800cd20:	b130      	cbz	r0, 800cd30 <ecc_projective_add_point_safe+0x2e>
        /* A is infinity. */
        err = wc_ecc_copy_point(B, R);
 800cd22:	4621      	mov	r1, r4
 800cd24:	4648      	mov	r0, r9
            }
        }
    }

    return err;
}
 800cd26:	b002      	add	sp, #8
 800cd28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        err = wc_ecc_copy_point(A, R);
 800cd2c:	f7ff bef7 	b.w	800cb1e <wc_ecc_copy_point>
    else if (mp_iszero(B->x) && mp_iszero(B->y)) {
 800cd30:	4648      	mov	r0, r9
 800cd32:	f010 f8f9 	bl	801cf28 <mp_iszero>
 800cd36:	b138      	cbz	r0, 800cd48 <ecc_projective_add_point_safe+0x46>
 800cd38:	f109 0068 	add.w	r0, r9, #104	; 0x68
 800cd3c:	f010 f8f4 	bl	801cf28 <mp_iszero>
 800cd40:	b110      	cbz	r0, 800cd48 <ecc_projective_add_point_safe+0x46>
        err = wc_ecc_copy_point(A, R);
 800cd42:	4621      	mov	r1, r4
 800cd44:	4630      	mov	r0, r6
 800cd46:	e7ee      	b.n	800cd26 <ecc_projective_add_point_safe+0x24>
    else if ((mp_cmp(A->x, B->x) == MP_EQ) && (mp_cmp(A->z, B->z) == MP_EQ)) {
 800cd48:	4649      	mov	r1, r9
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f00f f966 	bl	801c01c <mp_cmp>
 800cd50:	bb60      	cbnz	r0, 800cdac <ecc_projective_add_point_safe+0xaa>
 800cd52:	f109 01d0 	add.w	r1, r9, #208	; 0xd0
 800cd56:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 800cd5a:	f00f f95f 	bl	801c01c <mp_cmp>
 800cd5e:	4682      	mov	sl, r0
 800cd60:	bb20      	cbnz	r0, 800cdac <ecc_projective_add_point_safe+0xaa>
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 800cd62:	f109 0168 	add.w	r1, r9, #104	; 0x68
 800cd66:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800cd6a:	f00f f957 	bl	801c01c <mp_cmp>
 800cd6e:	b920      	cbnz	r0, 800cd7a <ecc_projective_add_point_safe+0x78>
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 800cd70:	4643      	mov	r3, r8
 800cd72:	462a      	mov	r2, r5
 800cd74:	4621      	mov	r1, r4
 800cd76:	4648      	mov	r0, r9
 800cd78:	e048      	b.n	800ce0c <ecc_projective_add_point_safe+0x10a>
            err = mp_set(R->x, 0);
 800cd7a:	4651      	mov	r1, sl
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f010 f99b 	bl	801d0b8 <mp_set>
            if (err == MP_OKAY)
 800cd82:	b968      	cbnz	r0, 800cda0 <ecc_projective_add_point_safe+0x9e>
                err = mp_set(R->y, 0);
 800cd84:	4601      	mov	r1, r0
 800cd86:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd8a:	f010 f995 	bl	801d0b8 <mp_set>
            if (err == MP_OKAY)
 800cd8e:	b938      	cbnz	r0, 800cda0 <ecc_projective_add_point_safe+0x9e>
                err = mp_set(R->z, 1);
 800cd90:	2101      	movs	r1, #1
 800cd92:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd96:	f010 f98f 	bl	801d0b8 <mp_set>
            if ((err == MP_OKAY) && (infinity != NULL))
 800cd9a:	b908      	cbnz	r0, 800cda0 <ecc_projective_add_point_safe+0x9e>
 800cd9c:	b91f      	cbnz	r7, 800cda6 <ecc_projective_add_point_safe+0xa4>
                *infinity = 1;
 800cd9e:	2000      	movs	r0, #0
}
 800cda0:	b002      	add	sp, #8
 800cda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                *infinity = 1;
 800cda6:	2301      	movs	r3, #1
 800cda8:	603b      	str	r3, [r7, #0]
 800cdaa:	e7f8      	b.n	800cd9e <ecc_projective_add_point_safe+0x9c>
        err = _ecc_projective_add_point(A, B, R, a, modulus, mp);
 800cdac:	f8cd 8000 	str.w	r8, [sp]
 800cdb0:	462b      	mov	r3, r5
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7ff faff 	bl	800c3ba <_ecc_projective_add_point.isra.0>
        if ((err == MP_OKAY) && mp_iszero(R->z)) {
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d1ef      	bne.n	800cda0 <ecc_projective_add_point_safe+0x9e>
 800cdc0:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f010 f8af 	bl	801cf28 <mp_iszero>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d0e7      	beq.n	800cd9e <ecc_projective_add_point_safe+0x9c>
            if (mp_iszero(R->x) && mp_iszero(R->y)) {
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f010 f8aa 	bl	801cf28 <mp_iszero>
 800cdd4:	b1f8      	cbz	r0, 800ce16 <ecc_projective_add_point_safe+0x114>
 800cdd6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cdda:	f010 f8a5 	bl	801cf28 <mp_iszero>
 800cdde:	b1d0      	cbz	r0, 800ce16 <ecc_projective_add_point_safe+0x114>
                if (mp_iszero(B->z)) {
 800cde0:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 800cde4:	f010 f8a0 	bl	801cf28 <mp_iszero>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d0c1      	beq.n	800cd70 <ecc_projective_add_point_safe+0x6e>
                    err = wc_ecc_copy_point(B, R);
 800cdec:	4621      	mov	r1, r4
 800cdee:	4648      	mov	r0, r9
 800cdf0:	f7ff fe95 	bl	800cb1e <wc_ecc_copy_point>
                    if (err == MP_OKAY) {
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d1d3      	bne.n	800cda0 <ecc_projective_add_point_safe+0x9e>
                        err = mp_montgomery_calc_normalization(R->z, modulus);
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f010 f89f 	bl	801cf3e <mp_montgomery_calc_normalization>
                    if (err == MP_OKAY) {
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d1cd      	bne.n	800cda0 <ecc_projective_add_point_safe+0x9e>
                        err = _ecc_projective_dbl_point(R, R, a, modulus, mp);
 800ce04:	4643      	mov	r3, r8
 800ce06:	462a      	mov	r2, r5
 800ce08:	4621      	mov	r1, r4
 800ce0a:	4620      	mov	r0, r4
}
 800ce0c:	b002      	add	sp, #8
 800ce0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 800ce12:	f7ff b971 	b.w	800c0f8 <_ecc_projective_dbl_point.constprop.0>
                err = mp_set(R->x, 0);
 800ce16:	2100      	movs	r1, #0
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f010 f94d 	bl	801d0b8 <mp_set>
                if (err == MP_OKAY)
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d1be      	bne.n	800cda0 <ecc_projective_add_point_safe+0x9e>
                    err = mp_set(R->y, 0);
 800ce22:	4601      	mov	r1, r0
 800ce24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ce28:	f010 f946 	bl	801d0b8 <mp_set>
                if (err == MP_OKAY)
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d1b7      	bne.n	800cda0 <ecc_projective_add_point_safe+0x9e>
                    err = mp_set(R->z, 1);
 800ce30:	2101      	movs	r1, #1
 800ce32:	4630      	mov	r0, r6
 800ce34:	e7af      	b.n	800cd96 <ecc_projective_add_point_safe+0x94>

0800ce36 <ecc_projective_dbl_point_safe>:
 * Double infinity -> infinity.
 * Otherwise do normal double - which can't lead to infinity as odd order.
 */
int ecc_projective_dbl_point_safe(ecc_point *P, ecc_point *R, mp_int* a,
                                  mp_int* modulus, mp_digit mp)
{
 800ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	9f06      	ldr	r7, [sp, #24]
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	461e      	mov	r6, r3
    int err;

    if (mp_iszero(P->x) && mp_iszero(P->y)) {
 800ce42:	f010 f871 	bl	801cf28 <mp_iszero>
 800ce46:	b150      	cbz	r0, 800ce5e <ecc_projective_dbl_point_safe+0x28>
 800ce48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ce4c:	f010 f86c 	bl	801cf28 <mp_iszero>
 800ce50:	b128      	cbz	r0, 800ce5e <ecc_projective_dbl_point_safe+0x28>
        /* P is infinity. */
        err = wc_ecc_copy_point(P, R);
 800ce52:	4629      	mov	r1, r5
 800ce54:	4620      	mov	r0, r4
    else {
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
    }

    return err;
}
 800ce56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = wc_ecc_copy_point(P, R);
 800ce5a:	f7ff be60 	b.w	800cb1e <wc_ecc_copy_point>
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800ce5e:	463b      	mov	r3, r7
 800ce60:	4632      	mov	r2, r6
 800ce62:	4629      	mov	r1, r5
 800ce64:	4620      	mov	r0, r4
}
 800ce66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800ce6a:	f7ff b945 	b.w	800c0f8 <_ecc_projective_dbl_point.constprop.0>

0800ce6e <ecc_mulmod>:
{
 800ce6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce72:	b08d      	sub	sp, #52	; 0x34
 800ce74:	4688      	mov	r8, r1
 800ce76:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ce78:	9005      	str	r0, [sp, #20]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800ce7a:	4628      	mov	r0, r5
{
 800ce7c:	9206      	str	r2, [sp, #24]
 800ce7e:	461c      	mov	r4, r3
 800ce80:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800ce84:	f010 f855 	bl	801cf32 <mp_count_bits>
    mp_int*  kt = R[2]->x;
 800ce88:	68a3      	ldr	r3, [r4, #8]
 800ce8a:	9304      	str	r3, [sp, #16]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800ce8c:	4607      	mov	r7, r0
    tmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 800ce8e:	2068      	movs	r0, #104	; 0x68
 800ce90:	f010 fd68 	bl	801d964 <malloc>
    if (tmp == NULL) {
 800ce94:	4606      	mov	r6, r0
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f000 818a 	beq.w	800d1b0 <ecc_mulmod+0x342>
        err = mp_init(tmp);
 800ce9c:	f00f f87b 	bl	801bf96 <mp_init>
    if (err == MP_OKAY)
 800cea0:	4602      	mov	r2, r0
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d147      	bne.n	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[0]->x);
 800cea6:	6821      	ldr	r1, [r4, #0]
 800cea8:	4640      	mov	r0, r8
 800ceaa:	f010 f838 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800ceae:	4602      	mov	r2, r0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d140      	bne.n	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->y, R[0]->y);
 800ceb4:	6821      	ldr	r1, [r4, #0]
 800ceb6:	f108 0b68 	add.w	fp, r8, #104	; 0x68
 800ceba:	3168      	adds	r1, #104	; 0x68
 800cebc:	4658      	mov	r0, fp
 800cebe:	f010 f82e 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800cec2:	4602      	mov	r2, r0
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d136      	bne.n	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[0]->z);
 800cec8:	6821      	ldr	r1, [r4, #0]
 800ceca:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
 800cece:	31d0      	adds	r1, #208	; 0xd0
 800ced0:	4650      	mov	r0, sl
 800ced2:	f010 f824 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800ced6:	4602      	mov	r2, r0
 800ced8:	bb68      	cbnz	r0, 800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[1]->x);
 800ceda:	6861      	ldr	r1, [r4, #4]
 800cedc:	4640      	mov	r0, r8
 800cede:	f010 f81e 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800cee2:	4602      	mov	r2, r0
 800cee4:	bb38      	cbnz	r0, 800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->y, R[1]->y);
 800cee6:	6861      	ldr	r1, [r4, #4]
 800cee8:	4658      	mov	r0, fp
 800ceea:	3168      	adds	r1, #104	; 0x68
 800ceec:	f010 f817 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800cef0:	4602      	mov	r2, r0
 800cef2:	bb00      	cbnz	r0, 800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[1]->z);
 800cef4:	6861      	ldr	r1, [r4, #4]
 800cef6:	4650      	mov	r0, sl
 800cef8:	31d0      	adds	r1, #208	; 0xd0
 800cefa:	f010 f810 	bl	801cf1e <mp_copy>
    if ((err == MP_OKAY) && (rng != NULL))
 800cefe:	4602      	mov	r2, r0
 800cf00:	b9c8      	cbnz	r0, 800cf36 <ecc_mulmod+0xc8>
 800cf02:	f1b9 0f00 	cmp.w	r9, #0
 800cf06:	d11c      	bne.n	800cf42 <ecc_mulmod+0xd4>
        t = mp_count_bits(modulus) + 1;
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f010 f812 	bl	801cf32 <mp_count_bits>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	9307      	str	r3, [sp, #28]
    int      cnt = DIGIT_BIT;
 800cf12:	f8dd 901c 	ldr.w	r9, [sp, #28]
        v = k->dp[0] >> 1;
 800cf16:	9b05      	ldr	r3, [sp, #20]
        err = mp_copy(k, kt);
 800cf18:	9904      	ldr	r1, [sp, #16]
        v = k->dp[0] >> 1;
 800cf1a:	689f      	ldr	r7, [r3, #8]
    int      cnt = DIGIT_BIT;
 800cf1c:	f1b9 0f20 	cmp.w	r9, #32
        err = mp_copy(k, kt);
 800cf20:	4618      	mov	r0, r3
    int      cnt = DIGIT_BIT;
 800cf22:	bfa8      	it	ge
 800cf24:	f04f 0920 	movge.w	r9, #32
        err = mp_copy(k, kt);
 800cf28:	f00f fff9 	bl	801cf1e <mp_copy>
        v = k->dp[0] >> 1;
 800cf2c:	087f      	lsrs	r7, r7, #1
    if (err == MP_OKAY) {
 800cf2e:	4602      	mov	r2, r0
 800cf30:	2800      	cmp	r0, #0
 800cf32:	f000 8139 	beq.w	800d1a8 <ecc_mulmod+0x33a>
    XFREE(tmp, NULL, DYNAMIC_TYPE_ECC);
 800cf36:	4630      	mov	r0, r6
 800cf38:	9204      	str	r2, [sp, #16]
 800cf3a:	f010 fd1b 	bl	801d974 <free>
 800cf3e:	9a04      	ldr	r2, [sp, #16]
 800cf40:	e138      	b.n	800d1b4 <ecc_mulmod+0x346>
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800cf42:	68a3      	ldr	r3, [r4, #8]
 800cf44:	9a04      	ldr	r2, [sp, #16]
 800cf46:	9203      	str	r2, [sp, #12]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800cf48:	3707      	adds	r7, #7
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800cf4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800cf4e:	bf48      	it	mi
 800cf50:	3707      	addmi	r7, #7
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800cf52:	e9cd 3201 	strd	r3, r2, [sp, #4]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800cf56:	10ff      	asrs	r7, r7, #3
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800cf58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	4639      	mov	r1, r7
 800cf60:	462b      	mov	r3, r5
 800cf62:	4648      	mov	r0, r9
 800cf64:	f7ff fe38 	bl	800cbd8 <wc_ecc_gen_z>
    if ((err == MP_OKAY) && (rng != NULL))
 800cf68:	4602      	mov	r2, r0
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d1e3      	bne.n	800cf36 <ecc_mulmod+0xc8>
        err = wc_ecc_gen_z(rng, bytes, R[1], modulus, mp, R[2]->x, R[2]->y, kt);
 800cf6e:	68a3      	ldr	r3, [r4, #8]
 800cf70:	9a04      	ldr	r2, [sp, #16]
 800cf72:	9203      	str	r2, [sp, #12]
 800cf74:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cf78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cf7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf7e:	6862      	ldr	r2, [r4, #4]
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	4639      	mov	r1, r7
 800cf84:	462b      	mov	r3, r5
 800cf86:	4648      	mov	r0, r9
 800cf88:	f7ff fe26 	bl	800cbd8 <wc_ecc_gen_z>
    if (err == MP_OKAY) {
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d1d1      	bne.n	800cf36 <ecc_mulmod+0xc8>
 800cf92:	e7b9      	b.n	800cf08 <ecc_mulmod+0x9a>
        if (--cnt == 0) {
 800cf94:	f1b9 0901 	subs.w	r9, r9, #1
 800cf98:	d108      	bne.n	800cfac <ecc_mulmod+0x13e>
            v = kt->dp[j++];
 800cf9a:	f10a 0202 	add.w	r2, sl, #2
 800cf9e:	9904      	ldr	r1, [sp, #16]
 800cfa0:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
 800cfa4:	f10a 0a01 	add.w	sl, sl, #1
            cnt = DIGIT_BIT;
 800cfa8:	f04f 0920 	mov.w	r9, #32
        b = v & 1;
 800cfac:	f007 0201 	and.w	r2, r7, #1
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800cfb0:	9600      	str	r6, [sp, #0]
        swap ^= (int)b;
 800cfb2:	4053      	eors	r3, r2
        b = v & 1;
 800cfb4:	9208      	str	r2, [sp, #32]
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800cfb6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cfba:	682a      	ldr	r2, [r5, #0]
 800cfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfbe:	f00f ffc0 	bl	801cf42 <mp_cond_swap_ct_ex>
        v >>= 1;
 800cfc2:	087f      	lsrs	r7, r7, #1
        if (err == MP_OKAY) {
 800cfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	bb50      	cbnz	r0, 800d020 <ecc_mulmod+0x1b2>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used, swap,
 800cfca:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cfce:	9600      	str	r6, [sp, #0]
 800cfd0:	682a      	ldr	r2, [r5, #0]
 800cfd2:	3168      	adds	r1, #104	; 0x68
 800cfd4:	3068      	adds	r0, #104	; 0x68
 800cfd6:	f00f ffb4 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800cfda:	4602      	mov	r2, r0
 800cfdc:	bb00      	cbnz	r0, 800d020 <ecc_mulmod+0x1b2>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used, swap,
 800cfde:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cfe2:	9600      	str	r6, [sp, #0]
 800cfe4:	682a      	ldr	r2, [r5, #0]
 800cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe8:	31d0      	adds	r1, #208	; 0xd0
 800cfea:	30d0      	adds	r0, #208	; 0xd0
 800cfec:	f00f ffa9 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY)
 800cff0:	4602      	mov	r2, r0
 800cff2:	b9a8      	cbnz	r0, 800d020 <ecc_mulmod+0x1b2>
            err = ecc_projective_dbl_point_safe(R[0], R[0], a, modulus, mp);
 800cff4:	6821      	ldr	r1, [r4, #0]
 800cff6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cff8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	4608      	mov	r0, r1
 800cffe:	462b      	mov	r3, r5
 800d000:	f7ff ff19 	bl	800ce36 <ecc_projective_dbl_point_safe>
        if (err == MP_OKAY) {
 800d004:	4602      	mov	r2, r0
 800d006:	b958      	cbnz	r0, 800d020 <ecc_mulmod+0x1b2>
            err = ecc_projective_add_point_safe(R[0], R[1], R[0], a, modulus,
 800d008:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d00c:	ab0b      	add	r3, sp, #44	; 0x2c
 800d00e:	9302      	str	r3, [sp, #8]
 800d010:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d012:	4610      	mov	r0, r2
 800d014:	e9cd 5300 	strd	r5, r3, [sp]
 800d018:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d01a:	f7ff fe72 	bl	800cd02 <ecc_projective_add_point_safe>
 800d01e:	4602      	mov	r2, r0
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 800d020:	f10b 0b01 	add.w	fp, fp, #1
 800d024:	2a00      	cmp	r2, #0
 800d026:	d186      	bne.n	800cf36 <ecc_mulmod+0xc8>
        swap = (int)b;
 800d028:	9b08      	ldr	r3, [sp, #32]
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 800d02a:	9a07      	ldr	r2, [sp, #28]
 800d02c:	455a      	cmp	r2, fp
 800d02e:	dcb1      	bgt.n	800cf94 <ecc_mulmod+0x126>
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800d030:	9600      	str	r6, [sp, #0]
    swap ^= 1;
 800d032:	f083 0701 	eor.w	r7, r3, #1
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800d036:	682a      	ldr	r2, [r5, #0]
 800d038:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d03c:	463b      	mov	r3, r7
 800d03e:	f00f ff80 	bl	801cf42 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY) {
 800d042:	4602      	mov	r2, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	f47f af76 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used, swap,
 800d04a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d04e:	9600      	str	r6, [sp, #0]
 800d050:	682a      	ldr	r2, [r5, #0]
 800d052:	463b      	mov	r3, r7
 800d054:	3168      	adds	r1, #104	; 0x68
 800d056:	3068      	adds	r0, #104	; 0x68
 800d058:	f00f ff73 	bl	801cf42 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY) {
 800d05c:	4602      	mov	r2, r0
 800d05e:	2800      	cmp	r0, #0
 800d060:	f47f af69 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used, swap,
 800d064:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d068:	9600      	str	r6, [sp, #0]
 800d06a:	682a      	ldr	r2, [r5, #0]
 800d06c:	463b      	mov	r3, r7
 800d06e:	31d0      	adds	r1, #208	; 0xd0
 800d070:	30d0      	adds	r0, #208	; 0xd0
 800d072:	f00f ff66 	bl	801cf42 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY)
 800d076:	4602      	mov	r2, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	f47f af5c 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[2]->x);
 800d07e:	68a1      	ldr	r1, [r4, #8]
 800d080:	4640      	mov	r0, r8
 800d082:	f00f ff4c 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800d086:	4602      	mov	r2, r0
 800d088:	2800      	cmp	r0, #0
 800d08a:	f47f af54 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_sub(modulus, P->y, R[2]->y);
 800d08e:	68a2      	ldr	r2, [r4, #8]
 800d090:	f108 0168 	add.w	r1, r8, #104	; 0x68
 800d094:	3268      	adds	r2, #104	; 0x68
 800d096:	4628      	mov	r0, r5
 800d098:	f00e ffba 	bl	801c010 <mp_sub>
    if (err == MP_OKAY)
 800d09c:	4602      	mov	r2, r0
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f47f af49 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[2]->z);
 800d0a4:	68a1      	ldr	r1, [r4, #8]
 800d0a6:	f108 00d0 	add.w	r0, r8, #208	; 0xd0
 800d0aa:	31d0      	adds	r1, #208	; 0xd0
 800d0ac:	f00f ff37 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY) {
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	f47f af3f 	bne.w	800cf36 <ecc_mulmod+0xc8>
        b = k->dp[0] & 1;
 800d0b8:	9b05      	ldr	r3, [sp, #20]
 800d0ba:	689f      	ldr	r7, [r3, #8]
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, (int)b,
 800d0bc:	9600      	str	r6, [sp, #0]
        b = k->dp[0] & 1;
 800d0be:	f007 0701 	and.w	r7, r7, #1
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, (int)b,
 800d0c2:	682a      	ldr	r2, [r5, #0]
 800d0c4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d0c8:	463b      	mov	r3, r7
 800d0ca:	f00f ff3a 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	f47f af30 	bne.w	800cf36 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used,
 800d0d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d0da:	9600      	str	r6, [sp, #0]
 800d0dc:	682a      	ldr	r2, [r5, #0]
 800d0de:	463b      	mov	r3, r7
 800d0e0:	3168      	adds	r1, #104	; 0x68
 800d0e2:	3068      	adds	r0, #104	; 0x68
 800d0e4:	f00f ff2d 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	f47f af23 	bne.w	800cf36 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used,
 800d0f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d0f4:	9600      	str	r6, [sp, #0]
 800d0f6:	682a      	ldr	r2, [r5, #0]
 800d0f8:	463b      	mov	r3, r7
 800d0fa:	31d0      	adds	r1, #208	; 0xd0
 800d0fc:	30d0      	adds	r0, #208	; 0xd0
 800d0fe:	f00f ff20 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY)
 800d102:	4602      	mov	r2, r0
 800d104:	2800      	cmp	r0, #0
 800d106:	f47f af16 	bne.w	800cf36 <ecc_mulmod+0xc8>
            err = ecc_projective_add_point_safe(R[0], R[2], R[0], a, modulus,
 800d10a:	ab0b      	add	r3, sp, #44	; 0x2c
 800d10c:	6822      	ldr	r2, [r4, #0]
 800d10e:	9302      	str	r3, [sp, #8]
 800d110:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d112:	68a1      	ldr	r1, [r4, #8]
 800d114:	e9cd 5300 	strd	r5, r3, [sp]
 800d118:	4610      	mov	r0, r2
 800d11a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d11c:	f7ff fdf1 	bl	800cd02 <ecc_projective_add_point_safe>
        if (err == MP_OKAY) {
 800d120:	4602      	mov	r2, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	f47f af07 	bne.w	800cf36 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used,
 800d128:	9600      	str	r6, [sp, #0]
 800d12a:	682a      	ldr	r2, [r5, #0]
 800d12c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d130:	463b      	mov	r3, r7
 800d132:	f00f ff06 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800d136:	4602      	mov	r2, r0
 800d138:	2800      	cmp	r0, #0
 800d13a:	f47f aefc 	bne.w	800cf36 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used,
 800d13e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d142:	9600      	str	r6, [sp, #0]
 800d144:	682a      	ldr	r2, [r5, #0]
 800d146:	463b      	mov	r3, r7
 800d148:	3168      	adds	r1, #104	; 0x68
 800d14a:	3068      	adds	r0, #104	; 0x68
 800d14c:	f00f fef9 	bl	801cf42 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800d150:	4602      	mov	r2, r0
 800d152:	2800      	cmp	r0, #0
 800d154:	f47f aeef 	bne.w	800cf36 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used,
 800d158:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d15c:	9600      	str	r6, [sp, #0]
 800d15e:	682a      	ldr	r2, [r5, #0]
 800d160:	463b      	mov	r3, r7
 800d162:	31d0      	adds	r1, #208	; 0xd0
 800d164:	30d0      	adds	r0, #208	; 0xd0
 800d166:	f00f feec 	bl	801cf42 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY)
 800d16a:	4602      	mov	r2, r0
 800d16c:	2800      	cmp	r0, #0
 800d16e:	f47f aee2 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->x, Q->x);
 800d172:	9906      	ldr	r1, [sp, #24]
 800d174:	6820      	ldr	r0, [r4, #0]
 800d176:	f00f fed2 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800d17a:	4602      	mov	r2, r0
 800d17c:	2800      	cmp	r0, #0
 800d17e:	f47f aeda 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->y, Q->y);
 800d182:	6820      	ldr	r0, [r4, #0]
 800d184:	9b06      	ldr	r3, [sp, #24]
 800d186:	3068      	adds	r0, #104	; 0x68
 800d188:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d18c:	f00f fec7 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY)
 800d190:	4602      	mov	r2, r0
 800d192:	2800      	cmp	r0, #0
 800d194:	f47f aecf 	bne.w	800cf36 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->z, Q->z);
 800d198:	6820      	ldr	r0, [r4, #0]
 800d19a:	9906      	ldr	r1, [sp, #24]
 800d19c:	30d0      	adds	r0, #208	; 0xd0
 800d19e:	31d0      	adds	r1, #208	; 0xd0
 800d1a0:	f00f febd 	bl	801cf1e <mp_copy>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	e6c6      	b.n	800cf36 <ecc_mulmod+0xc8>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	469a      	mov	sl, r3
 800d1ac:	469b      	mov	fp, r3
 800d1ae:	e73c      	b.n	800d02a <ecc_mulmod+0x1bc>
        err = MEMORY_E;
 800d1b0:	f06f 027c 	mvn.w	r2, #124	; 0x7c
}
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	b00d      	add	sp, #52	; 0x34
 800d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1bc <wc_ecc_mulmod_ex2>:
{
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	b08d      	sub	sp, #52	; 0x34
 800d1c2:	e9dd 7b16 	ldrd	r7, fp, [sp, #88]	; 0x58
 800d1c6:	460d      	mov	r5, r1
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	9305      	str	r3, [sp, #20]
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	f000 80af 	beq.w	800d332 <wc_ecc_mulmod_ex2+0x176>
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	f000 80ac 	beq.w	800d332 <wc_ecc_mulmod_ex2+0x176>
 800d1da:	2a00      	cmp	r2, #0
 800d1dc:	f000 80a9 	beq.w	800d332 <wc_ecc_mulmod_ex2+0x176>
 800d1e0:	2f00      	cmp	r7, #0
 800d1e2:	f000 80a6 	beq.w	800d332 <wc_ecc_mulmod_ex2+0x176>
   if (mp_count_bits(k) > mp_count_bits(order)) {
 800d1e6:	f00f fea4 	bl	801cf32 <mp_count_bits>
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4658      	mov	r0, fp
 800d1ee:	f00f fea0 	bl	801cf32 <mp_count_bits>
 800d1f2:	4284      	cmp	r4, r0
 800d1f4:	f300 80a0 	bgt.w	800d338 <wc_ecc_mulmod_ex2+0x17c>
   tG = NULL;
 800d1f8:	2400      	movs	r4, #0
   XMEMSET(M, 0, sizeof(M));
 800d1fa:	220c      	movs	r2, #12
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	a809      	add	r0, sp, #36	; 0x24
   tG = NULL;
 800d200:	9407      	str	r4, [sp, #28]
   XMEMSET(M, 0, sizeof(M));
 800d202:	f010 fbf7 	bl	801d9f4 <memset>
   for (i = 0; i < M_POINTS; i++) {
 800d206:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800d20a:	46a1      	mov	r9, r4
      err = wc_ecc_new_point_ex(&M[i], heap);
 800d20c:	4650      	mov	r0, sl
 800d20e:	f7fe fedc 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
      if (err != MP_OKAY) {
 800d212:	4604      	mov	r4, r0
 800d214:	2800      	cmp	r0, #0
 800d216:	d179      	bne.n	800d30c <wc_ecc_mulmod_ex2+0x150>
   for (i = 0; i < M_POINTS; i++) {
 800d218:	f109 0901 	add.w	r9, r9, #1
 800d21c:	f1b9 0f03 	cmp.w	r9, #3
 800d220:	f10a 0a04 	add.w	sl, sl, #4
 800d224:	d1f2      	bne.n	800d20c <wc_ecc_mulmod_ex2+0x50>
   err = wc_ecc_new_point_ex(&tG, heap);
 800d226:	a807      	add	r0, sp, #28
 800d228:	f7fe fecf 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
   if (err != MP_OKAY) {
 800d22c:	4604      	mov	r4, r0
 800d22e:	2800      	cmp	r0, #0
 800d230:	d16c      	bne.n	800d30c <wc_ecc_mulmod_ex2+0x150>
   if ((err = ecc_point_to_mont(G, tG, modulus, heap)) != MP_OKAY) {
 800d232:	9907      	ldr	r1, [sp, #28]
 800d234:	463a      	mov	r2, r7
 800d236:	4628      	mov	r0, r5
 800d238:	f7fe ff01 	bl	800c03e <ecc_point_to_mont.constprop.0>
 800d23c:	4604      	mov	r4, r0
 800d23e:	2800      	cmp	r0, #0
 800d240:	d164      	bne.n	800d30c <wc_ecc_mulmod_ex2+0x150>
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
 800d242:	a908      	add	r1, sp, #32
 800d244:	4638      	mov	r0, r7
 800d246:	f00f ff33 	bl	801d0b0 <mp_montgomery_setup>
 800d24a:	4604      	mov	r4, r0
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d15d      	bne.n	800d30c <wc_ecc_mulmod_ex2+0x150>
   err = ecc_mulmod(k, tG, R, M, a, modulus, mp, rng);
 800d250:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	9b08      	ldr	r3, [sp, #32]
 800d256:	9907      	ldr	r1, [sp, #28]
 800d258:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800d25c:	9b05      	ldr	r3, [sp, #20]
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	4632      	mov	r2, r6
 800d262:	ab09      	add	r3, sp, #36	; 0x24
 800d264:	4640      	mov	r0, r8
 800d266:	f7ff fe02 	bl	800ce6e <ecc_mulmod>
   if (err == MP_OKAY) {
 800d26a:	4604      	mov	r4, r0
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d14d      	bne.n	800d30c <wc_ecc_mulmod_ex2+0x150>
    NEW_MP_INT_SIZE(t, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800d270:	2068      	movs	r0, #104	; 0x68
       err = ecc_check_order_minus_1(k, tG, R, modulus, order);
 800d272:	f8dd a01c 	ldr.w	sl, [sp, #28]
    NEW_MP_INT_SIZE(t, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800d276:	f010 fb75 	bl	801d964 <malloc>
 800d27a:	4605      	mov	r5, r0
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d055      	beq.n	800d32c <wc_ecc_mulmod_ex2+0x170>
 800d280:	4621      	mov	r1, r4
 800d282:	2268      	movs	r2, #104	; 0x68
 800d284:	f010 fbb6 	bl	801d9f4 <memset>
        err = INIT_MP_INT_SIZE(t, mp_bitsused(modulus));
 800d288:	4628      	mov	r0, r5
 800d28a:	f00e fe84 	bl	801bf96 <mp_init>
    if (err == MP_OKAY) {
 800d28e:	4604      	mov	r4, r0
 800d290:	bb80      	cbnz	r0, 800d2f4 <wc_ecc_mulmod_ex2+0x138>
        err = mp_sub_d(order, 1, t);
 800d292:	462a      	mov	r2, r5
 800d294:	2101      	movs	r1, #1
 800d296:	4658      	mov	r0, fp
 800d298:	f00e fec8 	bl	801c02c <mp_sub_d>
        if (err == MP_OKAY) {
 800d29c:	4604      	mov	r4, r0
 800d29e:	bb30      	cbnz	r0, 800d2ee <wc_ecc_mulmod_ex2+0x132>
            int kIsMinusOne = (mp_cmp((mp_int*)k, t) == MP_EQ);
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f00e feba 	bl	801c01c <mp_cmp>
 800d2a8:	fab0 f880 	clz	r8, r0
 800d2ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
            err = mp_cond_copy(tG->x, kIsMinusOne, R->x);
 800d2b0:	4632      	mov	r2, r6
 800d2b2:	4641      	mov	r1, r8
 800d2b4:	4650      	mov	r0, sl
 800d2b6:	f00f ffcc 	bl	801d252 <mp_cond_copy>
            if (err == MP_OKAY) {
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	b9b8      	cbnz	r0, 800d2ee <wc_ecc_mulmod_ex2+0x132>
                err = mp_sub(modulus, tG->y, t);
 800d2be:	462a      	mov	r2, r5
 800d2c0:	f10a 0168 	add.w	r1, sl, #104	; 0x68
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	f00e fea3 	bl	801c010 <mp_sub>
            if (err == MP_OKAY) {
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	b978      	cbnz	r0, 800d2ee <wc_ecc_mulmod_ex2+0x132>
                err = mp_cond_copy(t, kIsMinusOne, R->y);
 800d2ce:	f106 0268 	add.w	r2, r6, #104	; 0x68
 800d2d2:	4641      	mov	r1, r8
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	f00f ffbc 	bl	801d252 <mp_cond_copy>
            if (err == MP_OKAY) {
 800d2da:	4604      	mov	r4, r0
 800d2dc:	b938      	cbnz	r0, 800d2ee <wc_ecc_mulmod_ex2+0x132>
                err = mp_cond_copy(tG->z, kIsMinusOne, R->z);
 800d2de:	f106 02d0 	add.w	r2, r6, #208	; 0xd0
 800d2e2:	4641      	mov	r1, r8
 800d2e4:	f10a 00d0 	add.w	r0, sl, #208	; 0xd0
 800d2e8:	f00f ffb3 	bl	801d252 <mp_cond_copy>
 800d2ec:	4604      	mov	r4, r0
        mp_free(t);
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f00e fe6a 	bl	801bfc8 <mp_free>
    FREE_MP_INT_SIZE(t, NULL, DYNAMIC_TYPE_ECC);
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	f010 fb3d 	bl	801d974 <free>
   if (err == MP_OKAY && map)
 800d2fa:	b93c      	cbnz	r4, 800d30c <wc_ecc_mulmod_ex2+0x150>
 800d2fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2fe:	b12b      	cbz	r3, 800d30c <wc_ecc_mulmod_ex2+0x150>
      err = ecc_map(R, modulus, mp);
 800d300:	9a08      	ldr	r2, [sp, #32]
 800d302:	4639      	mov	r1, r7
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff fc07 	bl	800cb18 <ecc_map>
 800d30a:	4604      	mov	r4, r0
   wc_ecc_del_point_ex(tG, heap);
 800d30c:	9807      	ldr	r0, [sp, #28]
 800d30e:	f7fe fe83 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
      wc_ecc_del_point_ex(M[i], heap);
 800d312:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d314:	f7fe fe80 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
 800d318:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d31a:	f7fe fe7d 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
 800d31e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d320:	f7fe fe7a 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
}
 800d324:	4620      	mov	r0, r4
 800d326:	b00d      	add	sp, #52	; 0x34
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = MEMORY_E;
 800d32c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800d330:	e7ec      	b.n	800d30c <wc_ecc_mulmod_ex2+0x150>
      return ECC_BAD_ARG_E;
 800d332:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800d336:	e7f5      	b.n	800d324 <wc_ecc_mulmod_ex2+0x168>
      return ECC_OUT_OF_RANGE_E;
 800d338:	f06f 04d8 	mvn.w	r4, #216	; 0xd8
 800d33c:	e7f2      	b.n	800d324 <wc_ecc_mulmod_ex2+0x168>

0800d33e <wc_ecc_shared_secret_gen_sync>:
{
 800d33e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ecc_point* result = NULL;
 800d342:	f04f 0900 	mov.w	r9, #0
{
 800d346:	b094      	sub	sp, #80	; 0x50
 800d348:	4605      	mov	r5, r0
 800d34a:	468a      	mov	sl, r1
        DECLARE_CURVE_SPECS(3);
 800d34c:	a80a      	add	r0, sp, #40	; 0x28
 800d34e:	4649      	mov	r1, r9
{
 800d350:	4617      	mov	r7, r2
        DECLARE_CURVE_SPECS(3);
 800d352:	2228      	movs	r2, #40	; 0x28
{
 800d354:	4698      	mov	r8, r3
        mp_digit mp = 0;
 800d356:	e9cd 9907 	strd	r9, r9, [sp, #28]
        DECLARE_CURVE_SPECS(3);
 800d35a:	9009      	str	r0, [sp, #36]	; 0x24
 800d35c:	f010 fb4a 	bl	801d9f4 <memset>
 800d360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d362:	2203      	movs	r2, #3
 800d364:	61da      	str	r2, [r3, #28]
        ALLOC_CURVE_SPECS(3, err);
 800d366:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d36a:	f010 fafb 	bl	801d964 <malloc>
 800d36e:	4606      	mov	r6, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d067      	beq.n	800d444 <wc_ecc_shared_secret_gen_sync+0x106>
 800d374:	9b09      	ldr	r3, [sp, #36]	; 0x24
            err = wc_ecc_curve_load(private_key->dp, &curve,
 800d376:	220b      	movs	r2, #11
        ALLOC_CURVE_SPECS(3, err);
 800d378:	6198      	str	r0, [r3, #24]
            err = wc_ecc_curve_load(private_key->dp, &curve,
 800d37a:	a909      	add	r1, sp, #36	; 0x24
 800d37c:	6928      	ldr	r0, [r5, #16]
 800d37e:	f7ff fa90 	bl	800c8a2 <wc_ecc_curve_load>
        if (err != MP_OKAY) {
 800d382:	4604      	mov	r4, r0
 800d384:	b938      	cbnz	r0, 800d396 <wc_ecc_shared_secret_gen_sync+0x58>
        err = wc_ecc_new_point_ex(&result, private_key->heap);
 800d386:	a807      	add	r0, sp, #28
 800d388:	f7fe fe1f 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
        if (err != MP_OKAY) {
 800d38c:	4604      	mov	r4, r0
 800d38e:	b130      	cbz	r0, 800d39e <wc_ecc_shared_secret_gen_sync+0x60>
            wc_ecc_curve_free(curve);
 800d390:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d392:	f7ff fa3e 	bl	800c812 <wc_ecc_curve_free>
            FREE_CURVE_SPECS();
 800d396:	4630      	mov	r0, r6
 800d398:	f010 faec 	bl	801d974 <free>
 800d39c:	e04b      	b.n	800d436 <wc_ecc_shared_secret_gen_sync+0xf8>
        if (private_key->rng == NULL) {
 800d39e:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	d032      	beq.n	800d40c <wc_ecc_shared_secret_gen_sync+0xce>
            err = wc_ecc_mulmod_ex2(k, point, result, curve->Af, curve->prime,
 800d3a6:	6969      	ldr	r1, [r5, #20]
 800d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3aa:	9202      	str	r2, [sp, #8]
 800d3ac:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	9201      	str	r2, [sp, #4]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	9200      	str	r2, [sp, #0]
 800d3b8:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	9a07      	ldr	r2, [sp, #28]
 800d3c0:	4651      	mov	r1, sl
 800d3c2:	f7ff fefb 	bl	800d1bc <wc_ecc_mulmod_ex2>
        if (err == MP_OKAY) {
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	bb10      	cbnz	r0, 800d410 <wc_ecc_shared_secret_gen_sync+0xd2>
            err = mp_montgomery_setup(curve->prime, &mp);
 800d3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3cc:	a908      	add	r1, sp, #32
 800d3ce:	6858      	ldr	r0, [r3, #4]
 800d3d0:	f00f fe6e 	bl	801d0b0 <mp_montgomery_setup>
        if (err == MP_OKAY) {
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	bb90      	cbnz	r0, 800d43e <wc_ecc_shared_secret_gen_sync+0x100>
            err = ecc_map_ex(result, curve->prime, mp, 1);
 800d3d8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800d3dc:	9807      	ldr	r0, [sp, #28]
 800d3de:	6849      	ldr	r1, [r1, #4]
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	f7ff fad3 	bl	800c98c <ecc_map_ex>
        if (err == MP_OKAY) {
 800d3e6:	4605      	mov	r5, r0
 800d3e8:	b990      	cbnz	r0, 800d410 <wc_ecc_shared_secret_gen_sync+0xd2>
            x = mp_unsigned_bin_size(curve->prime);
 800d3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ec:	6858      	ldr	r0, [r3, #4]
 800d3ee:	f00e fe19 	bl	801c024 <mp_unsigned_bin_size>
            if (*outlen < (word32)x || x < mp_unsigned_bin_size(result->x)) {
 800d3f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d3f6:	4283      	cmp	r3, r0
            x = mp_unsigned_bin_size(curve->prime);
 800d3f8:	4604      	mov	r4, r0
            if (*outlen < (word32)x || x < mp_unsigned_bin_size(result->x)) {
 800d3fa:	d304      	bcc.n	800d406 <wc_ecc_shared_secret_gen_sync+0xc8>
 800d3fc:	9807      	ldr	r0, [sp, #28]
 800d3fe:	f00e fe11 	bl	801c024 <mp_unsigned_bin_size>
 800d402:	42a0      	cmp	r0, r4
 800d404:	dd21      	ble.n	800d44a <wc_ecc_shared_secret_gen_sync+0x10c>
                err = BUFFER_E;
 800d406:	f06f 0583 	mvn.w	r5, #131	; 0x83
 800d40a:	e001      	b.n	800d410 <wc_ecc_shared_secret_gen_sync+0xd2>
            err = MISSING_RNG_E;
 800d40c:	f06f 05eb 	mvn.w	r5, #235	; 0xeb
        mp_forcezero(result->x);
 800d410:	9807      	ldr	r0, [sp, #28]
        *outlen = (word32)x;
 800d412:	f8c8 4000 	str.w	r4, [r8]
        mp_forcezero(result->x);
 800d416:	f00e fdd1 	bl	801bfbc <mp_forcezero>
        mp_forcezero(result->y);
 800d41a:	9807      	ldr	r0, [sp, #28]
 800d41c:	3068      	adds	r0, #104	; 0x68
 800d41e:	f00e fdcd 	bl	801bfbc <mp_forcezero>
        wc_ecc_del_point_ex(result, private_key->heap);
 800d422:	9807      	ldr	r0, [sp, #28]
 800d424:	f7fe fdf8 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
        wc_ecc_curve_free(curve);
 800d428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d42a:	f7ff f9f2 	bl	800c812 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 800d42e:	4630      	mov	r0, r6
 800d430:	f010 faa0 	bl	801d974 <free>
 800d434:	462c      	mov	r4, r5
}
 800d436:	4620      	mov	r0, r4
 800d438:	b014      	add	sp, #80	; 0x50
 800d43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43e:	4605      	mov	r5, r0
        int x = 0;
 800d440:	464c      	mov	r4, r9
 800d442:	e7e5      	b.n	800d410 <wc_ecc_shared_secret_gen_sync+0xd2>
        ALLOC_CURVE_SPECS(3, err);
 800d444:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    return err;
 800d448:	e7f5      	b.n	800d436 <wc_ecc_shared_secret_gen_sync+0xf8>
            XMEMSET(out, 0, (size_t)x);
 800d44a:	4629      	mov	r1, r5
 800d44c:	4622      	mov	r2, r4
 800d44e:	4638      	mov	r0, r7
 800d450:	f010 fad0 	bl	801d9f4 <memset>
            err = mp_to_unsigned_bin(result->x, out +
 800d454:	9d07      	ldr	r5, [sp, #28]
                                     (x - mp_unsigned_bin_size(result->x)));
 800d456:	4628      	mov	r0, r5
 800d458:	f00e fde4 	bl	801c024 <mp_unsigned_bin_size>
 800d45c:	1a21      	subs	r1, r4, r0
            err = mp_to_unsigned_bin(result->x, out +
 800d45e:	4439      	add	r1, r7
 800d460:	4628      	mov	r0, r5
 800d462:	f00f fd5a 	bl	801cf1a <mp_to_unsigned_bin>
 800d466:	4605      	mov	r5, r0
 800d468:	e7d2      	b.n	800d410 <wc_ecc_shared_secret_gen_sync+0xd2>

0800d46a <wc_ecc_shared_secret_ex>:
{
 800d46a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (private_key == NULL || point == NULL || out == NULL ||
 800d46c:	4604      	mov	r4, r0
 800d46e:	b348      	cbz	r0, 800d4c4 <wc_ecc_shared_secret_ex+0x5a>
 800d470:	b341      	cbz	r1, 800d4c4 <wc_ecc_shared_secret_ex+0x5a>
 800d472:	b33a      	cbz	r2, 800d4c4 <wc_ecc_shared_secret_ex+0x5a>
 800d474:	b333      	cbz	r3, 800d4c4 <wc_ecc_shared_secret_ex+0x5a>
    if (private_key->type != ECC_PRIVATEKEY &&
 800d476:	6800      	ldr	r0, [r0, #0]
 800d478:	3802      	subs	r0, #2
 800d47a:	2801      	cmp	r0, #1
 800d47c:	d825      	bhi.n	800d4ca <wc_ecc_shared_secret_ex+0x60>
    if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL) {
 800d47e:	6860      	ldr	r0, [r4, #4]
 800d480:	f7ff fb67 	bl	800cb52 <wc_ecc_is_valid_idx>
 800d484:	b308      	cbz	r0, 800d4ca <wc_ecc_shared_secret_ex+0x60>
 800d486:	6920      	ldr	r0, [r4, #16]
 800d488:	b1f8      	cbz	r0, 800d4ca <wc_ecc_shared_secret_ex+0x60>
    switch (private_key->state) {
 800d48a:	68a0      	ldr	r0, [r4, #8]
 800d48c:	2801      	cmp	r0, #1
 800d48e:	dc06      	bgt.n	800d49e <wc_ecc_shared_secret_ex+0x34>
 800d490:	2800      	cmp	r0, #0
 800d492:	da0a      	bge.n	800d4aa <wc_ecc_shared_secret_ex+0x40>
            err = BAD_STATE_E;
 800d494:	f06f 00bf 	mvn.w	r0, #191	; 0xbf
    private_key->state = ECC_STATE_NONE;
 800d498:	2300      	movs	r3, #0
 800d49a:	60a3      	str	r3, [r4, #8]
    return err;
 800d49c:	e00f      	b.n	800d4be <wc_ecc_shared_secret_ex+0x54>
    switch (private_key->state) {
 800d49e:	2802      	cmp	r0, #2
 800d4a0:	bf14      	ite	ne
 800d4a2:	f06f 00bf 	mvnne.w	r0, #191	; 0xbf
 800d4a6:	2000      	moveq	r0, #0
 800d4a8:	e7f6      	b.n	800d498 <wc_ecc_shared_secret_ex+0x2e>
            private_key->state = ECC_STATE_SHARED_SEC_GEN;
 800d4aa:	2001      	movs	r0, #1
 800d4ac:	60a0      	str	r0, [r4, #8]
                err = wc_ecc_shared_secret_gen_sync(private_key, point,
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f7ff ff45 	bl	800d33e <wc_ecc_shared_secret_gen_sync>
            if (err < 0) {
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	da03      	bge.n	800d4c0 <wc_ecc_shared_secret_ex+0x56>
    if (err == WC_PENDING_E) {
 800d4b8:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 800d4bc:	d1ec      	bne.n	800d498 <wc_ecc_shared_secret_ex+0x2e>
}
 800d4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            err = 0;
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e7e9      	b.n	800d498 <wc_ecc_shared_secret_ex+0x2e>
        return BAD_FUNC_ARG;
 800d4c4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800d4c8:	e7f9      	b.n	800d4be <wc_ecc_shared_secret_ex+0x54>
        return ECC_BAD_ARG_E;
 800d4ca:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800d4ce:	e7f6      	b.n	800d4be <wc_ecc_shared_secret_ex+0x54>

0800d4d0 <wc_ecc_shared_secret>:
{
 800d4d0:	b570      	push	{r4, r5, r6, lr}
   if (private_key == NULL || public_key == NULL || out == NULL ||
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	b1e0      	cbz	r0, 800d510 <wc_ecc_shared_secret+0x40>
 800d4d6:	b1d9      	cbz	r1, 800d510 <wc_ecc_shared_secret+0x40>
 800d4d8:	b1d2      	cbz	r2, 800d510 <wc_ecc_shared_secret+0x40>
 800d4da:	b1cb      	cbz	r3, 800d510 <wc_ecc_shared_secret+0x40>
   if (private_key->type != ECC_PRIVATEKEY &&
 800d4dc:	6800      	ldr	r0, [r0, #0]
 800d4de:	3802      	subs	r0, #2
 800d4e0:	2801      	cmp	r0, #1
 800d4e2:	d818      	bhi.n	800d516 <wc_ecc_shared_secret+0x46>
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL ||
 800d4e4:	6860      	ldr	r0, [r4, #4]
 800d4e6:	f7ff fb34 	bl	800cb52 <wc_ecc_is_valid_idx>
 800d4ea:	b1a0      	cbz	r0, 800d516 <wc_ecc_shared_secret+0x46>
 800d4ec:	6925      	ldr	r5, [r4, #16]
 800d4ee:	b195      	cbz	r5, 800d516 <wc_ecc_shared_secret+0x46>
       wc_ecc_is_valid_idx(public_key->idx)  == 0 || public_key->dp == NULL) {
 800d4f0:	6848      	ldr	r0, [r1, #4]
 800d4f2:	f7ff fb2e 	bl	800cb52 <wc_ecc_is_valid_idx>
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL ||
 800d4f6:	b170      	cbz	r0, 800d516 <wc_ecc_shared_secret+0x46>
       wc_ecc_is_valid_idx(public_key->idx)  == 0 || public_key->dp == NULL) {
 800d4f8:	6908      	ldr	r0, [r1, #16]
 800d4fa:	b160      	cbz	r0, 800d516 <wc_ecc_shared_secret+0x46>
   if (private_key->dp->id != public_key->dp->id) {
 800d4fc:	686d      	ldr	r5, [r5, #4]
 800d4fe:	6840      	ldr	r0, [r0, #4]
 800d500:	4285      	cmp	r5, r0
 800d502:	d108      	bne.n	800d516 <wc_ecc_shared_secret+0x46>
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
 800d504:	4620      	mov	r0, r4
 800d506:	3118      	adds	r1, #24
}
 800d508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
 800d50c:	f7ff bfad 	b.w	800d46a <wc_ecc_shared_secret_ex>
       return BAD_FUNC_ARG;
 800d510:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800d514:	bd70      	pop	{r4, r5, r6, pc}
      return ECC_BAD_ARG_E;
 800d516:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800d51a:	e7fb      	b.n	800d514 <wc_ecc_shared_secret+0x44>

0800d51c <ecc_make_pub_ex>:
{
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	460c      	mov	r4, r1
 800d522:	b08b      	sub	sp, #44	; 0x2c
 800d524:	4617      	mov	r7, r2
 800d526:	4699      	mov	r9, r3
    if (key == NULL) {
 800d528:	4605      	mov	r5, r0
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f000 8085 	beq.w	800d63a <ecc_make_pub_ex+0x11e>
    if (pubOut != NULL) {
 800d530:	b9da      	cbnz	r2, 800d56a <ecc_make_pub_ex+0x4e>
        pub = &key->pubkey;
 800d532:	4606      	mov	r6, r0
        key->type = ECC_PRIVATEKEY_ONLY;
 800d534:	2303      	movs	r3, #3
 800d536:	f846 3b18 	str.w	r3, [r6], #24
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800d53a:	f505 78a8 	add.w	r8, r5, #336	; 0x150
 800d53e:	4640      	mov	r0, r8
 800d540:	f00f fcf2 	bl	801cf28 <mp_iszero>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 800d544:	f106 0b68 	add.w	fp, r6, #104	; 0x68
 800d548:	f106 0ad0 	add.w	sl, r6, #208	; 0xd0
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800d54c:	b178      	cbz	r0, 800d56e <ecc_make_pub_ex+0x52>
        err = ECC_PRIV_KEY_E;
 800d54e:	f06f 03d7 	mvn.w	r3, #215	; 0xd7
        mp_clear(pub->x);
 800d552:	4630      	mov	r0, r6
 800d554:	9307      	str	r3, [sp, #28]
 800d556:	f00e fd33 	bl	801bfc0 <mp_clear>
        mp_clear(pub->y);
 800d55a:	4658      	mov	r0, fp
 800d55c:	f00e fd30 	bl	801bfc0 <mp_clear>
        mp_clear(pub->z);
 800d560:	4650      	mov	r0, sl
 800d562:	f00e fd2d 	bl	801bfc0 <mp_clear>
 800d566:	9b07      	ldr	r3, [sp, #28]
 800d568:	e05a      	b.n	800d620 <ecc_make_pub_ex+0x104>
 800d56a:	4616      	mov	r6, r2
 800d56c:	e7e5      	b.n	800d53a <ecc_make_pub_ex+0x1e>
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800d56e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1eb      	bne.n	800d54e <ecc_make_pub_ex+0x32>
                                      (mp_cmp(key->k, curve->order) != MP_LT)))
 800d576:	68e1      	ldr	r1, [r4, #12]
 800d578:	9307      	str	r3, [sp, #28]
 800d57a:	4640      	mov	r0, r8
 800d57c:	f00e fd4e 	bl	801c01c <mp_cmp>
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800d580:	3001      	adds	r0, #1
 800d582:	9b07      	ldr	r3, [sp, #28]
 800d584:	d1e3      	bne.n	800d54e <ecc_make_pub_ex+0x32>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 800d586:	e9cd 3300 	strd	r3, r3, [sp]
 800d58a:	4652      	mov	r2, sl
 800d58c:	4659      	mov	r1, fp
 800d58e:	4630      	mov	r0, r6
 800d590:	f00e fd1b 	bl	801bfca <mp_init_multi>
    if (err == MP_OKAY) {
 800d594:	4603      	mov	r3, r0
 800d596:	2800      	cmp	r0, #0
 800d598:	d1db      	bne.n	800d552 <ecc_make_pub_ex+0x36>
        ecc_point* base = NULL;
 800d59a:	e9cd 0008 	strd	r0, r0, [sp, #32]
        err = wc_ecc_new_point_ex(&base, key->heap);
 800d59e:	a809      	add	r0, sp, #36	; 0x24
 800d5a0:	f7fe fd13 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
        if (err == MP_OKAY)
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d133      	bne.n	800d612 <ecc_make_pub_ex+0xf6>
            err = mp_copy(curve->Gx, base->x);
 800d5aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5ac:	6920      	ldr	r0, [r4, #16]
 800d5ae:	f00f fcb6 	bl	801cf1e <mp_copy>
        if (err == MP_OKAY)
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	bb68      	cbnz	r0, 800d612 <ecc_make_pub_ex+0xf6>
            err = mp_copy(curve->Gy, base->y);
 800d5b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5b8:	6960      	ldr	r0, [r4, #20]
 800d5ba:	3168      	adds	r1, #104	; 0x68
 800d5bc:	f00f fcaf 	bl	801cf1e <mp_copy>
        if (err == MP_OKAY)
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	bb30      	cbnz	r0, 800d612 <ecc_make_pub_ex+0xf6>
            err = mp_montgomery_setup(curve->prime, &mp);
 800d5c4:	6860      	ldr	r0, [r4, #4]
 800d5c6:	a908      	add	r1, sp, #32
 800d5c8:	f00f fd72 	bl	801d0b0 <mp_montgomery_setup>
        if (err == MP_OKAY)
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	bb00      	cbnz	r0, 800d612 <ecc_make_pub_ex+0xf6>
            err = mp_set(base->z, 1);
 800d5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5d2:	2101      	movs	r1, #1
 800d5d4:	30d0      	adds	r0, #208	; 0xd0
 800d5d6:	f00f fd6f 	bl	801d0b8 <mp_set>
        if (err == MP_OKAY) {
 800d5da:	4603      	mov	r3, r0
 800d5dc:	b9c8      	cbnz	r0, 800d612 <ecc_make_pub_ex+0xf6>
            err = wc_ecc_mulmod_ex2(key->k, base, pub, curve->Af, curve->prime,
 800d5de:	696a      	ldr	r2, [r5, #20]
 800d5e0:	68e3      	ldr	r3, [r4, #12]
 800d5e2:	9301      	str	r3, [sp, #4]
 800d5e4:	6863      	ldr	r3, [r4, #4]
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800d5ec:	68a3      	ldr	r3, [r4, #8]
 800d5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	f7ff fde0 	bl	800d1bc <wc_ecc_mulmod_ex2>
            if (err == MP_MEM) {
 800d5fc:	1c82      	adds	r2, r0, #2
            err = wc_ecc_mulmod_ex2(key->k, base, pub, curve->Af, curve->prime,
 800d5fe:	4603      	mov	r3, r0
            if (err == MP_MEM) {
 800d600:	d018      	beq.n	800d634 <ecc_make_pub_ex+0x118>
        if (err == MP_OKAY) {
 800d602:	b930      	cbnz	r0, 800d612 <ecc_make_pub_ex+0xf6>
            err = ecc_map_ex(pub, curve->prime, mp, 1);
 800d604:	2301      	movs	r3, #1
 800d606:	9a08      	ldr	r2, [sp, #32]
 800d608:	6861      	ldr	r1, [r4, #4]
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7ff f9be 	bl	800c98c <ecc_map_ex>
 800d610:	4603      	mov	r3, r0
        wc_ecc_del_point_ex(base, key->heap);
 800d612:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d614:	9307      	str	r3, [sp, #28]
 800d616:	f7fe fcff 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
    if (err != MP_OKAY
 800d61a:	9b07      	ldr	r3, [sp, #28]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d198      	bne.n	800d552 <ecc_make_pub_ex+0x36>
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 800d620:	682a      	ldr	r2, [r5, #0]
 800d622:	2a03      	cmp	r2, #3
 800d624:	d102      	bne.n	800d62c <ecc_make_pub_ex+0x110>
 800d626:	b90f      	cbnz	r7, 800d62c <ecc_make_pub_ex+0x110>
        key->type = ECC_PRIVATEKEY;
 800d628:	2202      	movs	r2, #2
 800d62a:	602a      	str	r2, [r5, #0]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	b00b      	add	sp, #44	; 0x2c
 800d630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
               err = MEMORY_E;
 800d634:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800d638:	e7eb      	b.n	800d612 <ecc_make_pub_ex+0xf6>
        return BAD_FUNC_ARG;
 800d63a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800d63e:	e7f5      	b.n	800d62c <ecc_make_pub_ex+0x110>

0800d640 <_ecc_make_key_ex>:
{
 800d640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d644:	4606      	mov	r6, r0
 800d646:	b08c      	sub	sp, #48	; 0x30
    if (key == NULL || rng == NULL) {
 800d648:	4615      	mov	r5, r2
 800d64a:	2a00      	cmp	r2, #0
 800d64c:	d055      	beq.n	800d6fa <_ecc_make_key_ex+0xba>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d053      	beq.n	800d6fa <_ecc_make_key_ex+0xba>
    key->state = ECC_STATE_NONE;
 800d652:	f04f 0800 	mov.w	r8, #0
 800d656:	f8c2 8008 	str.w	r8, [r2, #8]
    err = wc_ecc_set_curve(key, keysize, curve_id);
 800d65a:	4628      	mov	r0, r5
 800d65c:	461a      	mov	r2, r3
 800d65e:	f7ff f971 	bl	800c944 <wc_ecc_set_curve>
    if (err != 0) {
 800d662:	4604      	mov	r4, r0
 800d664:	2800      	cmp	r0, #0
 800d666:	d13e      	bne.n	800d6e6 <_ecc_make_key_ex+0xa6>
    key->flags = (byte)flags;
 800d668:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d66c:	60eb      	str	r3, [r5, #12]
        DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800d66e:	4621      	mov	r1, r4
 800d670:	a802      	add	r0, sp, #8
 800d672:	2228      	movs	r2, #40	; 0x28
 800d674:	9001      	str	r0, [sp, #4]
 800d676:	f010 f9bd 	bl	801d9f4 <memset>
 800d67a:	9b01      	ldr	r3, [sp, #4]
 800d67c:	2205      	movs	r2, #5
        err = mp_init(key->k);
 800d67e:	f505 77a8 	add.w	r7, r5, #336	; 0x150
        DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800d682:	61da      	str	r2, [r3, #28]
        err = mp_init(key->k);
 800d684:	4638      	mov	r0, r7
 800d686:	f00e fc86 	bl	801bf96 <mp_init>
        if (err == MP_OKAY) {
 800d68a:	4604      	mov	r4, r0
 800d68c:	bb88      	cbnz	r0, 800d6f2 <_ecc_make_key_ex+0xb2>
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800d68e:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d692:	f010 f967 	bl	801d964 <malloc>
 800d696:	4680      	mov	r8, r0
 800d698:	b348      	cbz	r0, 800d6ee <_ecc_make_key_ex+0xae>
 800d69a:	9b01      	ldr	r3, [sp, #4]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800d69c:	223b      	movs	r2, #59	; 0x3b
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800d69e:	6198      	str	r0, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800d6a0:	a901      	add	r1, sp, #4
 800d6a2:	6928      	ldr	r0, [r5, #16]
 800d6a4:	f7ff f8fd 	bl	800c8a2 <wc_ecc_curve_load>
        if (err == MP_OKAY) {
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	bb10      	cbnz	r0, 800d6f2 <_ecc_make_key_ex+0xb2>
            err = wc_ecc_gen_k(rng, key->dp->size, key->k, curve->order);
 800d6ac:	6929      	ldr	r1, [r5, #16]
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	6809      	ldr	r1, [r1, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	463a      	mov	r2, r7
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f7ff fa51 	bl	800cb5e <wc_ecc_gen_k>
        if (err == MP_OKAY) {
 800d6bc:	4604      	mov	r4, r0
 800d6be:	b9c0      	cbnz	r0, 800d6f2 <_ecc_make_key_ex+0xb2>
            err = ecc_make_pub_ex(key, curve, NULL, rng);
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	9901      	ldr	r1, [sp, #4]
 800d6c4:	4633      	mov	r3, r6
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f7ff ff28 	bl	800d51c <ecc_make_pub_ex>
        if (err == MP_OKAY
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	b980      	cbnz	r0, 800d6f2 <_ecc_make_key_ex+0xb2>
            key->type = ECC_PRIVATEKEY;
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	602b      	str	r3, [r5, #0]
        wc_ecc_curve_free(curve);
 800d6d4:	9801      	ldr	r0, [sp, #4]
 800d6d6:	f7ff f89c 	bl	800c812 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 800d6da:	f1b8 0f00 	cmp.w	r8, #0
 800d6de:	d002      	beq.n	800d6e6 <_ecc_make_key_ex+0xa6>
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	f010 f947 	bl	801d974 <free>
}
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	b00c      	add	sp, #48	; 0x30
 800d6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800d6ee:	f06f 047c 	mvn.w	r4, #124	; 0x7c
            mp_forcezero(key->k);
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	f00e fc62 	bl	801bfbc <mp_forcezero>
 800d6f8:	e7ec      	b.n	800d6d4 <_ecc_make_key_ex+0x94>
        return BAD_FUNC_ARG;
 800d6fa:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800d6fe:	e7f2      	b.n	800d6e6 <_ecc_make_key_ex+0xa6>

0800d700 <wc_ecc_make_key_ex>:
{
 800d700:	b513      	push	{r0, r1, r4, lr}
    err = _ecc_make_key_ex(rng, keysize, key, curve_id, flags);
 800d702:	2400      	movs	r4, #0
 800d704:	9400      	str	r4, [sp, #0]
 800d706:	f7ff ff9b 	bl	800d640 <_ecc_make_key_ex>
}
 800d70a:	b002      	add	sp, #8
 800d70c:	bd10      	pop	{r4, pc}

0800d70e <wc_ecc_sign_hash_ex>:
{
 800d70e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d712:	b095      	sub	sp, #84	; 0x54
 800d714:	4607      	mov	r7, r0
 800d716:	9203      	str	r2, [sp, #12]
   DECLARE_CURVE_SPECS(1);
 800d718:	a80a      	add	r0, sp, #40	; 0x28
 800d71a:	2228      	movs	r2, #40	; 0x28
{
 800d71c:	460e      	mov	r6, r1
   DECLARE_CURVE_SPECS(1);
 800d71e:	2100      	movs	r1, #0
{
 800d720:	461c      	mov	r4, r3
 800d722:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   DECLARE_CURVE_SPECS(1);
 800d726:	9009      	str	r0, [sp, #36]	; 0x24
 800d728:	f010 f964 	bl	801d9f4 <memset>
 800d72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d72e:	2201      	movs	r2, #1
 800d730:	61da      	str	r2, [r3, #28]
   if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL) {
 800d732:	2f00      	cmp	r7, #0
 800d734:	f000 8141 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
 800d738:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f000 813d 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
 800d740:	f1b8 0f00 	cmp.w	r8, #0
 800d744:	f000 8139 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
 800d748:	2c00      	cmp	r4, #0
 800d74a:	f000 8136 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
 800d74e:	9b03      	ldr	r3, [sp, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 8132 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
   if (key->type != ECC_PRIVATEKEY && key->type != ECC_PRIVATEKEY_ONLY) {
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	3b02      	subs	r3, #2
 800d75a:	4293      	cmp	r3, r2
 800d75c:	f200 812d 	bhi.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 800d760:	6860      	ldr	r0, [r4, #4]
 800d762:	f7ff f9f6 	bl	800cb52 <wc_ecc_is_valid_idx>
 800d766:	2800      	cmp	r0, #0
 800d768:	f000 8127 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
 800d76c:	6923      	ldr	r3, [r4, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8123 	beq.w	800d9ba <wc_ecc_sign_hash_ex+0x2ac>
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800d774:	2068      	movs	r0, #104	; 0x68
 800d776:	f010 f8f5 	bl	801d964 <malloc>
 800d77a:	4605      	mov	r5, r0
 800d77c:	2800      	cmp	r0, #0
 800d77e:	f000 811f 	beq.w	800d9c0 <wc_ecc_sign_hash_ex+0x2b2>
 800d782:	2268      	movs	r2, #104	; 0x68
 800d784:	2100      	movs	r1, #0
 800d786:	f010 f935 	bl	801d9f4 <memset>
   if ((err = INIT_MP_INT_SIZE(e, ECC_KEY_MAX_BITS(key))) != MP_OKAY) {
 800d78a:	4628      	mov	r0, r5
 800d78c:	f00e fc03 	bl	801bf96 <mp_init>
 800d790:	4683      	mov	fp, r0
 800d792:	b130      	cbz	r0, 800d7a2 <wc_ecc_sign_hash_ex+0x94>
      FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800d794:	4628      	mov	r0, r5
   FREE_CURVE_SPECS();
 800d796:	f010 f8ed 	bl	801d974 <free>
}
 800d79a:	4658      	mov	r0, fp
 800d79c:	b015      	add	sp, #84	; 0x54
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ALLOC_CURVE_SPECS(1, err);
 800d7a2:	2068      	movs	r0, #104	; 0x68
 800d7a4:	f010 f8de 	bl	801d964 <malloc>
 800d7a8:	9002      	str	r0, [sp, #8]
 800d7aa:	b978      	cbnz	r0, 800d7cc <wc_ecc_sign_hash_ex+0xbe>
 800d7ac:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
   mp_clear(e);
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f00e fc05 	bl	801bfc0 <mp_clear>
   wc_ecc_curve_free(curve);
 800d7b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7b8:	f7ff f82b 	bl	800c812 <wc_ecc_curve_free>
   FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800d7bc:	4628      	mov	r0, r5
 800d7be:	f010 f8d9 	bl	801d974 <free>
   FREE_CURVE_SPECS();
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0e8      	beq.n	800d79a <wc_ecc_sign_hash_ex+0x8c>
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	e7e4      	b.n	800d796 <wc_ecc_sign_hash_ex+0x88>
        ALLOC_CURVE_SPECS(1, err);
 800d7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ce:	9a02      	ldr	r2, [sp, #8]
 800d7d0:	619a      	str	r2, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800d7d2:	6920      	ldr	r0, [r4, #16]
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	a909      	add	r1, sp, #36	; 0x24
 800d7d8:	f7ff f863 	bl	800c8a2 <wc_ecc_curve_load>
   if (err == MP_OKAY) {
 800d7dc:	4683      	mov	fp, r0
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d1e6      	bne.n	800d7b0 <wc_ecc_sign_hash_ex+0xa2>
       word32 orderBits = (word32)mp_count_bits(curve->order);
 800d7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e4:	68d8      	ldr	r0, [r3, #12]
 800d7e6:	f00f fba4 	bl	801cf32 <mp_count_bits>
       if ((WOLFSSL_BIT_SIZE * inlen) > orderBits)
 800d7ea:	ebb0 0fc6 	cmp.w	r0, r6, lsl #3
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 800d7ee:	bf3c      	itt	cc
 800d7f0:	1dc6      	addcc	r6, r0, #7
 800d7f2:	08f6      	lsrcc	r6, r6, #3
       word32 orderBits = (word32)mp_count_bits(curve->order);
 800d7f4:	4681      	mov	r9, r0
       err = mp_read_unsigned_bin(e, in, inlen);
 800d7f6:	4632      	mov	r2, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f00e fc14 	bl	801c028 <mp_read_unsigned_bin>
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
 800d800:	4683      	mov	fp, r0
 800d802:	2800      	cmp	r0, #0
 800d804:	d1d4      	bne.n	800d7b0 <wc_ecc_sign_hash_ex+0xa2>
 800d806:	ebb9 0fc6 	cmp.w	r9, r6, lsl #3
 800d80a:	d206      	bcs.n	800d81a <wc_ecc_sign_hash_ex+0x10c>
           mp_rshb(e, (int)(WOLFSSL_BIT_SIZE - (orderBits & 0x7)));
 800d80c:	f009 0107 	and.w	r1, r9, #7
 800d810:	f1c1 0108 	rsb	r1, r1, #8
 800d814:	4628      	mov	r0, r5
 800d816:	f00f fb90 	bl	801cf3a <mp_rshb>
       pubkey = (ecc_key*)XMALLOC(sizeof(ecc_key), key->heap, DYNAMIC_TYPE_ECC);
 800d81a:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800d81e:	f010 f8a1 	bl	801d964 <malloc>
       if (pubkey == NULL)
 800d822:	4606      	mov	r6, r0
 800d824:	2800      	cmp	r0, #0
 800d826:	d0c1      	beq.n	800d7ac <wc_ecc_sign_hash_ex+0x9e>
           err = wc_ecc_init_ex(pubkey, key->heap, INVALID_DEVID);
 800d828:	6961      	ldr	r1, [r4, #20]
 800d82a:	f06f 0201 	mvn.w	r2, #1
 800d82e:	f7ff fa33 	bl	800cc98 <wc_ecc_init_ex>
           if (err == MP_OKAY) {
 800d832:	4683      	mov	fp, r0
 800d834:	2800      	cmp	r0, #0
 800d836:	d1bb      	bne.n	800d7b0 <wc_ecc_sign_hash_ex+0xa2>
    NEW_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800d838:	2068      	movs	r0, #104	; 0x68
              err = ecc_sign_hash_sw(key, pubkey, rng, curve, e, r, s);
 800d83a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    NEW_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800d83e:	f010 f891 	bl	801d964 <malloc>
 800d842:	4607      	mov	r7, r0
 800d844:	2800      	cmp	r0, #0
 800d846:	f000 80b5 	beq.w	800d9b4 <wc_ecc_sign_hash_ex+0x2a6>
 800d84a:	4659      	mov	r1, fp
 800d84c:	2268      	movs	r2, #104	; 0x68
 800d84e:	f010 f8d1 	bl	801d9f4 <memset>
        err = INIT_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key));
 800d852:	4638      	mov	r0, r7
 800d854:	f00e fb9f 	bl	801bf96 <mp_init>
    if (err == MP_OKAY) {
 800d858:	4683      	mov	fp, r0
 800d85a:	b930      	cbnz	r0, 800d86a <wc_ecc_sign_hash_ex+0x15c>
 800d85c:	f04f 0a41 	mov.w	sl, #65	; 0x41
            if (++loop_check > 64) {
 800d860:	f1ba 0a01 	subs.w	sl, sl, #1
 800d864:	d10f      	bne.n	800d886 <wc_ecc_sign_hash_ex+0x178>
                 err = RNG_FAILURE_E;
 800d866:	f06f 0bc6 	mvn.w	fp, #198	; 0xc6
    mp_forcezero(b);
 800d86a:	4638      	mov	r0, r7
 800d86c:	f00e fba6 	bl	801bfbc <mp_forcezero>
    FREE_MP_INT_SIZE(b, key->heap, DYNAMIC_TYPE_ECC);
 800d870:	b117      	cbz	r7, 800d878 <wc_ecc_sign_hash_ex+0x16a>
 800d872:	4638      	mov	r0, r7
 800d874:	f010 f87e 	bl	801d974 <free>
              wc_ecc_free(pubkey);
 800d878:	4630      	mov	r0, r6
 800d87a:	f7ff fa2e 	bl	800ccda <wc_ecc_free>
              XFREE(pubkey, key->heap, DYNAMIC_TYPE_ECC);
 800d87e:	4630      	mov	r0, r6
 800d880:	f010 f878 	bl	801d974 <free>
 800d884:	e794      	b.n	800d7b0 <wc_ecc_sign_hash_ex+0xa2>
            err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);
 800d886:	6921      	ldr	r1, [r4, #16]
 800d888:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d88c:	6809      	ldr	r1, [r1, #0]
 800d88e:	9803      	ldr	r0, [sp, #12]
 800d890:	463a      	mov	r2, r7
 800d892:	f7ff f964 	bl	800cb5e <wc_ecc_gen_k>
        while (err == MP_ZERO_E);
 800d896:	f110 0f79 	cmn.w	r0, #121	; 0x79
            err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);
 800d89a:	4683      	mov	fp, r0
        while (err == MP_ZERO_E);
 800d89c:	d0e0      	beq.n	800d860 <wc_ecc_sign_hash_ex+0x152>
    for (; err == MP_OKAY;) {
 800d89e:	f1bb 0f00 	cmp.w	fp, #0
 800d8a2:	d1e2      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
 800d8a4:	2341      	movs	r3, #65	; 0x41
 800d8a6:	9304      	str	r3, [sp, #16]
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 800d8a8:	f106 0318 	add.w	r3, r6, #24
            err = _ecc_make_key_ex(rng, key->dp->size, pubkey, key->dp->id,
 800d8ac:	f8cd b018 	str.w	fp, [sp, #24]
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 800d8b0:	9305      	str	r3, [sp, #20]
            mp_int* ep = pubkey->k;
 800d8b2:	f506 7aa8 	add.w	sl, r6, #336	; 0x150
        if (++loop_check > 64) {
 800d8b6:	9b04      	ldr	r3, [sp, #16]
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	9304      	str	r3, [sp, #16]
 800d8bc:	d0d3      	beq.n	800d866 <wc_ecc_sign_hash_ex+0x158>
            err = _ecc_make_key_ex(rng, key->dp->size, pubkey, key->dp->id,
 800d8be:	6921      	ldr	r1, [r4, #16]
 800d8c0:	9b06      	ldr	r3, [sp, #24]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	684b      	ldr	r3, [r1, #4]
 800d8c6:	9803      	ldr	r0, [sp, #12]
 800d8c8:	6809      	ldr	r1, [r1, #0]
 800d8ca:	4632      	mov	r2, r6
 800d8cc:	f7ff feb8 	bl	800d640 <_ecc_make_key_ex>
        if (err != MP_OKAY) break;
 800d8d0:	4683      	mov	fp, r0
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d1c9      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 800d8d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d8d8:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800d8dc:	9805      	ldr	r0, [sp, #20]
 800d8de:	f00e ff27 	bl	801c730 <mp_mod>
        if (err != MP_OKAY) break;
 800d8e2:	4683      	mov	fp, r0
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d1c0      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
        if (mp_iszero(r) == MP_NO) {
 800d8e8:	981e      	ldr	r0, [sp, #120]	; 0x78
 800d8ea:	f00f fb1d 	bl	801cf28 <mp_iszero>
 800d8ee:	b170      	cbz	r0, 800d90e <wc_ecc_sign_hash_ex+0x200>
         mp_clear(pubkey->pubkey.x);
 800d8f0:	9805      	ldr	r0, [sp, #20]
 800d8f2:	f00e fb65 	bl	801bfc0 <mp_clear>
         mp_clear(pubkey->pubkey.y);
 800d8f6:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800d8fa:	f00e fb61 	bl	801bfc0 <mp_clear>
         mp_clear(pubkey->pubkey.z);
 800d8fe:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
 800d902:	f00e fb5d 	bl	801bfc0 <mp_clear>
         mp_forcezero(pubkey->k);
 800d906:	4650      	mov	r0, sl
 800d908:	f00e fb58 	bl	801bfbc <mp_forcezero>
    for (; err == MP_OKAY;) {
 800d90c:	e7d3      	b.n	800d8b6 <wc_ecc_sign_hash_ex+0x1a8>
            mp_int* x  = key->k;
 800d90e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 800d912:	9307      	str	r3, [sp, #28]
            err = mp_mulmod(pubkey->k, b, curve->order, kp);
 800d914:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d918:	4653      	mov	r3, sl
 800d91a:	4639      	mov	r1, r7
 800d91c:	4650      	mov	r0, sl
 800d91e:	f00e ff05 	bl	801c72c <mp_mulmod>
            if (err != MP_OKAY) break;
 800d922:	4683      	mov	fp, r0
 800d924:	2800      	cmp	r0, #0
 800d926:	d1a0      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
            err = mp_invmod(kp, curve->order, kp);
 800d928:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800d92c:	4652      	mov	r2, sl
 800d92e:	4650      	mov	r0, sl
 800d930:	f00f f938 	bl	801cba4 <mp_invmod>
            if (err != MP_OKAY) break;
 800d934:	4683      	mov	fp, r0
 800d936:	2800      	cmp	r0, #0
 800d938:	d197      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(x, r, curve->order, s);
 800d93a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d93e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d940:	4643      	mov	r3, r8
 800d942:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800d946:	f00e fef1 	bl	801c72c <mp_mulmod>
            if (err != MP_OKAY) break;
 800d94a:	4683      	mov	fp, r0
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d18c      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(kp, s, curve->order, s);
 800d950:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d954:	4643      	mov	r3, r8
 800d956:	4641      	mov	r1, r8
 800d958:	4650      	mov	r0, sl
 800d95a:	f00e fee7 	bl	801c72c <mp_mulmod>
            if (err != MP_OKAY) break;
 800d95e:	4683      	mov	fp, r0
 800d960:	2800      	cmp	r0, #0
 800d962:	d182      	bne.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(kp, e, curve->order, ep);
 800d964:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d968:	4653      	mov	r3, sl
 800d96a:	4629      	mov	r1, r5
 800d96c:	4650      	mov	r0, sl
 800d96e:	f00e fedd 	bl	801c72c <mp_mulmod>
            if (err != MP_OKAY) break;
 800d972:	4683      	mov	fp, r0
 800d974:	2800      	cmp	r0, #0
 800d976:	f47f af78 	bne.w	800d86a <wc_ecc_sign_hash_ex+0x15c>
            err = mp_addmod_ct(ep, s, curve->order, s);
 800d97a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d97e:	4643      	mov	r3, r8
 800d980:	4641      	mov	r1, r8
 800d982:	4650      	mov	r0, sl
 800d984:	f00e fb48 	bl	801c018 <mp_addmod_ct>
            if (err != MP_OKAY) break;
 800d988:	4683      	mov	fp, r0
 800d98a:	2800      	cmp	r0, #0
 800d98c:	f47f af6d 	bne.w	800d86a <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(s, b, curve->order, s);
 800d990:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d994:	4643      	mov	r3, r8
 800d996:	4639      	mov	r1, r7
 800d998:	4640      	mov	r0, r8
 800d99a:	f00e fec7 	bl	801c72c <mp_mulmod>
            if (err != MP_OKAY) break;
 800d99e:	4683      	mov	fp, r0
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	f47f af62 	bne.w	800d86a <wc_ecc_sign_hash_ex+0x15c>
            if (mp_iszero(s) == MP_NO) {
 800d9a6:	4640      	mov	r0, r8
 800d9a8:	f00f fabe 	bl	801cf28 <mp_iszero>
 800d9ac:	4683      	mov	fp, r0
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d19e      	bne.n	800d8f0 <wc_ecc_sign_hash_ex+0x1e2>
 800d9b2:	e75a      	b.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
        err = MEMORY_E;
 800d9b4:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800d9b8:	e757      	b.n	800d86a <wc_ecc_sign_hash_ex+0x15c>
       return ECC_BAD_ARG_E;
 800d9ba:	f06f 0ba9 	mvn.w	fp, #169	; 0xa9
 800d9be:	e6ec      	b.n	800d79a <wc_ecc_sign_hash_ex+0x8c>
      return MEMORY_E;
 800d9c0:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800d9c4:	e6e9      	b.n	800d79a <wc_ecc_sign_hash_ex+0x8c>

0800d9c6 <wc_ecc_sign_hash>:
{
 800d9c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ca:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	4616      	mov	r6, r2
 800d9d2:	461f      	mov	r7, r3
    if (in == NULL || out == NULL || outlen == NULL || key == NULL) {
 800d9d4:	4680      	mov	r8, r0
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d04d      	beq.n	800da76 <wc_ecc_sign_hash+0xb0>
 800d9da:	2a00      	cmp	r2, #0
 800d9dc:	d04b      	beq.n	800da76 <wc_ecc_sign_hash+0xb0>
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d049      	beq.n	800da76 <wc_ecc_sign_hash+0xb0>
 800d9e2:	f1bb 0f00 	cmp.w	fp, #0
 800d9e6:	d046      	beq.n	800da76 <wc_ecc_sign_hash+0xb0>
    if (rng == NULL) {
 800d9e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d043      	beq.n	800da76 <wc_ecc_sign_hash+0xb0>
    NEW_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800d9ee:	2068      	movs	r0, #104	; 0x68
 800d9f0:	f00f ffb8 	bl	801d964 <malloc>
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d043      	beq.n	800da82 <wc_ecc_sign_hash+0xbc>
 800d9fa:	2268      	movs	r2, #104	; 0x68
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	f00f fff9 	bl	801d9f4 <memset>
    NEW_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800da02:	2068      	movs	r0, #104	; 0x68
 800da04:	f00f ffae 	bl	801d964 <malloc>
 800da08:	4605      	mov	r5, r0
 800da0a:	b3b8      	cbz	r0, 800da7c <wc_ecc_sign_hash+0xb6>
 800da0c:	2268      	movs	r2, #104	; 0x68
 800da0e:	2100      	movs	r1, #0
 800da10:	f00f fff0 	bl	801d9f4 <memset>
    err = INIT_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key));
 800da14:	4620      	mov	r0, r4
 800da16:	f00e fabe 	bl	801bf96 <mp_init>
    if (err != 0) {
 800da1a:	4682      	mov	sl, r0
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800da1c:	4628      	mov	r0, r5
    if (err != 0) {
 800da1e:	f1ba 0f00 	cmp.w	sl, #0
 800da22:	d008      	beq.n	800da36 <wc_ecc_sign_hash+0x70>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800da24:	f00f ffa6 	bl	801d974 <free>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800da28:	4620      	mov	r0, r4
 800da2a:	f00f ffa3 	bl	801d974 <free>
}
 800da2e:	4650      	mov	r0, sl
 800da30:	b003      	add	sp, #12
 800da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = INIT_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key));
 800da36:	f00e faae 	bl	801bf96 <mp_init>
    if (err != 0) {
 800da3a:	4682      	mov	sl, r0
 800da3c:	b108      	cbz	r0, 800da42 <wc_ecc_sign_hash+0x7c>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800da3e:	4628      	mov	r0, r5
 800da40:	e7f0      	b.n	800da24 <wc_ecc_sign_hash+0x5e>
    err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
 800da42:	e9cd 4500 	strd	r4, r5, [sp]
 800da46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da48:	465b      	mov	r3, fp
 800da4a:	4649      	mov	r1, r9
 800da4c:	4640      	mov	r0, r8
 800da4e:	f7ff fe5e 	bl	800d70e <wc_ecc_sign_hash_ex>
    if (err < 0) {
 800da52:	f1b0 0a00 	subs.w	sl, r0, #0
 800da56:	da06      	bge.n	800da66 <wc_ecc_sign_hash+0xa0>
    mp_clear(r);
 800da58:	4620      	mov	r0, r4
 800da5a:	f00e fab1 	bl	801bfc0 <mp_clear>
    mp_clear(s);
 800da5e:	4628      	mov	r0, r5
 800da60:	f00e faae 	bl	801bfc0 <mp_clear>
    FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800da64:	e7eb      	b.n	800da3e <wc_ecc_sign_hash+0x78>
    err = StoreECC_DSA_Sig(out, outlen, r, s);
 800da66:	462b      	mov	r3, r5
 800da68:	4622      	mov	r2, r4
 800da6a:	4639      	mov	r1, r7
 800da6c:	4630      	mov	r0, r6
 800da6e:	f006 faa1 	bl	8013fb4 <StoreECC_DSA_Sig>
 800da72:	4682      	mov	sl, r0
 800da74:	e7f0      	b.n	800da58 <wc_ecc_sign_hash+0x92>
        return ECC_BAD_ARG_E;
 800da76:	f06f 0aa9 	mvn.w	sl, #169	; 0xa9
 800da7a:	e7d8      	b.n	800da2e <wc_ecc_sign_hash+0x68>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800da7c:	4620      	mov	r0, r4
 800da7e:	f00f ff79 	bl	801d974 <free>
        return MEMORY_E;
 800da82:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 800da86:	e7d2      	b.n	800da2e <wc_ecc_sign_hash+0x68>

0800da88 <ecc_mul2add>:
int ecc_mul2add(ecc_point* A, mp_int* kA,
                    ecc_point* B, mp_int* kB,
                    ecc_point* C, mp_int* a, mp_int* modulus,
                    void* heap)
#endif
{
 800da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	b08d      	sub	sp, #52	; 0x34
#else
  unsigned char* tA = NULL;
  unsigned char* tB = NULL;
#endif
  int            err = MP_OKAY, first, x, y;
  mp_digit       mp = 0;
 800da8e:	f04f 0b00 	mov.w	fp, #0
{
 800da92:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800da94:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800da96:	9205      	str	r2, [sp, #20]
 800da98:	468a      	mov	sl, r1
 800da9a:	461e      	mov	r6, r3
  mp_digit       mp = 0;
 800da9c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c

  /* argchks */
  if (A == NULL || kA == NULL || B == NULL || kB == NULL || C == NULL ||
 800daa0:	4680      	mov	r8, r0
 800daa2:	2800      	cmp	r0, #0
 800daa4:	f000 81b0 	beq.w	800de08 <ecc_mul2add+0x380>
 800daa8:	2900      	cmp	r1, #0
 800daaa:	f000 81ad 	beq.w	800de08 <ecc_mul2add+0x380>
 800daae:	2a00      	cmp	r2, #0
 800dab0:	f000 81aa 	beq.w	800de08 <ecc_mul2add+0x380>
 800dab4:	2e00      	cmp	r6, #0
 800dab6:	f000 81a7 	beq.w	800de08 <ecc_mul2add+0x380>
 800daba:	2f00      	cmp	r7, #0
 800dabc:	f000 81a4 	beq.w	800de08 <ecc_mul2add+0x380>
 800dac0:	2d00      	cmp	r5, #0
 800dac2:	f000 81a1 	beq.w	800de08 <ecc_mul2add+0x380>
     return ECC_BAD_ARG_E;
  }

#ifndef WOLFSSL_NO_MALLOC
  /* allocate memory */
  tA = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800dac6:	f240 1001 	movw	r0, #257	; 0x101
 800daca:	f00f ff4b 	bl	801d964 <malloc>
  if (tA == NULL) {
 800dace:	4681      	mov	r9, r0
 800dad0:	b140      	cbz	r0, 800dae4 <ecc_mul2add+0x5c>
     return GEN_MEM_ERR;
  }
  tB = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800dad2:	f240 1001 	movw	r0, #257	; 0x101
 800dad6:	f00f ff45 	bl	801d964 <malloc>
  if (tB == NULL) {
 800dada:	9004      	str	r0, [sp, #16]
 800dadc:	b928      	cbnz	r0, 800daea <ecc_mul2add+0x62>
#ifdef WOLFSSL_SMALL_STACK
  precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,
                                                       DYNAMIC_TYPE_ECC_BUFFER);
  if (precomp == NULL) {
     XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
     XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800dade:	4648      	mov	r0, r9
 800dae0:	f00f ff48 	bl	801d974 <free>
     return GEN_MEM_ERR;
 800dae4:	f06f 0101 	mvn.w	r1, #1
 800dae8:	e109      	b.n	800dcfe <ecc_mul2add+0x276>
  precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,
 800daea:	2040      	movs	r0, #64	; 0x40
 800daec:	f00f ff3a 	bl	801d964 <malloc>
  if (precomp == NULL) {
 800daf0:	4604      	mov	r4, r0
 800daf2:	b918      	cbnz	r0, 800dafc <ecc_mul2add+0x74>
     XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800daf4:	9804      	ldr	r0, [sp, #16]
 800daf6:	f00f ff3d 	bl	801d974 <free>
 800dafa:	e7f0      	b.n	800dade <ecc_mul2add+0x56>
  }
  C->key = key;
#endif /* WOLFSSL_SMALL_STACK_CACHE */

  /* init variables */
  XMEMSET(tA, 0, ECC_BUFSIZE);
 800dafc:	4659      	mov	r1, fp
 800dafe:	f240 1201 	movw	r2, #257	; 0x101
 800db02:	4648      	mov	r0, r9
 800db04:	f00f ff76 	bl	801d9f4 <memset>
  XMEMSET(tB, 0, ECC_BUFSIZE);
 800db08:	4659      	mov	r1, fp
 800db0a:	f240 1201 	movw	r2, #257	; 0x101
 800db0e:	9804      	ldr	r0, [sp, #16]
 800db10:	f00f ff70 	bl	801d9f4 <memset>
#ifndef WOLFSSL_SMALL_STACK
  XMEMSET(precomp, 0, sizeof(precomp));
#else
  XMEMSET(precomp, 0, sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ);
 800db14:	4659      	mov	r1, fp
 800db16:	2240      	movs	r2, #64	; 0x40
 800db18:	4620      	mov	r0, r4
 800db1a:	f00f ff6b 	bl	801d9f4 <memset>
  wc_MemZero_Add("ecc_mul2add tA", tA, ECC_BUFSIZE);
  wc_MemZero_Add("ecc_mul2add tB", tB, ECC_BUFSIZE);
#endif

  /* get sizes */
  lenA = (unsigned int)mp_unsigned_bin_size(kA);
 800db1e:	4650      	mov	r0, sl
 800db20:	f00e fa80 	bl	801c024 <mp_unsigned_bin_size>
 800db24:	9006      	str	r0, [sp, #24]
  lenB = (unsigned int)mp_unsigned_bin_size(kB);
 800db26:	4630      	mov	r0, r6
 800db28:	f00e fa7c 	bl	801c024 <mp_unsigned_bin_size>
  len  = MAX(lenA, lenB);

  /* sanity check */
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 800db2c:	9906      	ldr	r1, [sp, #24]
 800db2e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
  lenB = (unsigned int)mp_unsigned_bin_size(kB);
 800db32:	4683      	mov	fp, r0
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 800db34:	f080 815c 	bcs.w	800ddf0 <ecc_mul2add+0x368>
 800db38:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800db3c:	f080 8158 	bcs.w	800ddf0 <ecc_mul2add+0x368>
  len  = MAX(lenA, lenB);
 800db40:	4281      	cmp	r1, r0
 800db42:	460b      	mov	r3, r1
 800db44:	bf38      	it	cc
 800db46:	4603      	movcc	r3, r0
    err = BAD_FUNC_ARG;
  }

  if (err == MP_OKAY) {
    /* extract and justify kA */
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 800db48:	1a59      	subs	r1, r3, r1
 800db4a:	4449      	add	r1, r9
 800db4c:	4650      	mov	r0, sl
  len  = MAX(lenA, lenB);
 800db4e:	9306      	str	r3, [sp, #24]
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 800db50:	f00f f9e3 	bl	801cf1a <mp_to_unsigned_bin>

    /* extract and justify kB */
    if (err == MP_OKAY)
 800db54:	4601      	mov	r1, r0
 800db56:	2800      	cmp	r0, #0
 800db58:	f040 80ad 	bne.w	800dcb6 <ecc_mul2add+0x22e>
        err = mp_to_unsigned_bin(kB, (len - lenB) + tB);
 800db5c:	9b06      	ldr	r3, [sp, #24]
 800db5e:	eba3 010b 	sub.w	r1, r3, fp
 800db62:	9b04      	ldr	r3, [sp, #16]
 800db64:	4630      	mov	r0, r6
 800db66:	4419      	add	r1, r3
 800db68:	f00f f9d7 	bl	801cf1a <mp_to_unsigned_bin>

    /* allocate the table */
    if (err == MP_OKAY) {
 800db6c:	4601      	mov	r1, r0
 800db6e:	2800      	cmp	r0, #0
 800db70:	f040 80a1 	bne.w	800dcb6 <ecc_mul2add+0x22e>
 800db74:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800db78:	4626      	mov	r6, r4
 800db7a:	9307      	str	r3, [sp, #28]
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
        #ifdef WOLFSSL_NO_MALLOC
            precomp[x] = &lcl_precomp[x];
        #endif
            err = wc_ecc_new_point_ex(&precomp[x], heap);
 800db7c:	4630      	mov	r0, r6
 800db7e:	f7fe fa24 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
            if (err != MP_OKAY)
 800db82:	4601      	mov	r1, r0
 800db84:	2800      	cmp	r0, #0
 800db86:	f040 8096 	bne.w	800dcb6 <ecc_mul2add+0x22e>
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 800db8a:	9b07      	ldr	r3, [sp, #28]
 800db8c:	3604      	adds	r6, #4
 800db8e:	429e      	cmp	r6, r3
 800db90:	d1f4      	bne.n	800db7c <ecc_mul2add+0xf4>
    }
  }

  if (err == MP_OKAY)
    /* init montgomery reduction */
    err = mp_montgomery_setup(modulus, &mp);
 800db92:	a90b      	add	r1, sp, #44	; 0x2c
 800db94:	4628      	mov	r0, r5
 800db96:	f00f fa8b 	bl	801d0b0 <mp_montgomery_setup>

  if (err == MP_OKAY) {
 800db9a:	4601      	mov	r1, r0
 800db9c:	2800      	cmp	r0, #0
 800db9e:	f040 808a 	bne.w	800dcb6 <ecc_mul2add+0x22e>
    NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 800dba2:	2068      	movs	r0, #104	; 0x68
    err = ecc_mont_norm_points(A, precomp[1], B, precomp[1<<2], modulus, heap);
 800dba4:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800dba8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dbac:	9108      	str	r1, [sp, #32]
    NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 800dbae:	f00f fed9 	bl	801d964 <malloc>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	f000 811e 	beq.w	800ddf6 <ecc_mul2add+0x36e>
 800dbba:	9908      	ldr	r1, [sp, #32]
 800dbbc:	2268      	movs	r2, #104	; 0x68
 800dbbe:	f00f ff19 	bl	801d9f4 <memset>
        err = INIT_MP_INT_SIZE(mu, mp_bitsused(modulus));
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f00e f9e7 	bl	801bf96 <mp_init>
    if (err == MP_OKAY) {
 800dbc8:	4601      	mov	r1, r0
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d141      	bne.n	800dc52 <ecc_mul2add+0x1ca>
        err = mp_montgomery_calc_normalization(mu, modulus);
 800dbce:	4629      	mov	r1, r5
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f00f f9b4 	bl	801cf3e <mp_montgomery_calc_normalization>
        if (err == MP_OKAY) {
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	bbb0      	cbnz	r0, 800dc48 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->x, mu, modulus, Am->x);
 800dbda:	4631      	mov	r1, r6
 800dbdc:	465b      	mov	r3, fp
 800dbde:	462a      	mov	r2, r5
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	f00e fda3 	bl	801c72c <mp_mulmod>
        if (err == MP_OKAY)
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	bb70      	cbnz	r0, 800dc48 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->y, mu, modulus, Am->y);
 800dbea:	4631      	mov	r1, r6
 800dbec:	f10b 0368 	add.w	r3, fp, #104	; 0x68
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	f108 0068 	add.w	r0, r8, #104	; 0x68
 800dbf6:	f00e fd99 	bl	801c72c <mp_mulmod>
        if (err == MP_OKAY)
 800dbfa:	4601      	mov	r1, r0
 800dbfc:	bb20      	cbnz	r0, 800dc48 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->z, mu, modulus, Am->z);
 800dbfe:	4631      	mov	r1, r6
 800dc00:	f10b 03d0 	add.w	r3, fp, #208	; 0xd0
 800dc04:	462a      	mov	r2, r5
 800dc06:	f108 00d0 	add.w	r0, r8, #208	; 0xd0
 800dc0a:	f00e fd8f 	bl	801c72c <mp_mulmod>
        if (err == MP_OKAY)
 800dc0e:	4601      	mov	r1, r0
 800dc10:	b9d0      	cbnz	r0, 800dc48 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->x, mu, modulus, Bm->x);
 800dc12:	4631      	mov	r1, r6
 800dc14:	9805      	ldr	r0, [sp, #20]
 800dc16:	4653      	mov	r3, sl
 800dc18:	462a      	mov	r2, r5
 800dc1a:	f00e fd87 	bl	801c72c <mp_mulmod>
        if (err == MP_OKAY)
 800dc1e:	4601      	mov	r1, r0
 800dc20:	b990      	cbnz	r0, 800dc48 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->y, mu, modulus, Bm->y);
 800dc22:	9805      	ldr	r0, [sp, #20]
 800dc24:	4631      	mov	r1, r6
 800dc26:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 800dc2a:	462a      	mov	r2, r5
 800dc2c:	3068      	adds	r0, #104	; 0x68
 800dc2e:	f00e fd7d 	bl	801c72c <mp_mulmod>
        if (err == MP_OKAY)
 800dc32:	4601      	mov	r1, r0
 800dc34:	b940      	cbnz	r0, 800dc48 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->z, mu, modulus, Bm->z);
 800dc36:	9805      	ldr	r0, [sp, #20]
 800dc38:	4631      	mov	r1, r6
 800dc3a:	f10a 03d0 	add.w	r3, sl, #208	; 0xd0
 800dc3e:	462a      	mov	r2, r5
 800dc40:	30d0      	adds	r0, #208	; 0xd0
 800dc42:	f00e fd73 	bl	801c72c <mp_mulmod>
 800dc46:	4601      	mov	r1, r0
        mp_clear(mu);
 800dc48:	4630      	mov	r0, r6
 800dc4a:	9105      	str	r1, [sp, #20]
 800dc4c:	f00e f9b8 	bl	801bfc0 <mp_clear>
 800dc50:	9905      	ldr	r1, [sp, #20]
 800dc52:	9105      	str	r1, [sp, #20]
    FREE_MP_INT_SIZE(mu, heap, DYNAMIC_TYPE_ECC);
 800dc54:	4630      	mov	r0, r6
 800dc56:	f00f fe8d 	bl	801d974 <free>
  }

  if (err == MP_OKAY) {
 800dc5a:	9905      	ldr	r1, [sp, #20]
 800dc5c:	bb59      	cbnz	r1, 800dcb6 <ecc_mul2add+0x22e>
    /* precomp [i,0](A + B) table */
    err = ecc_projective_dbl_point_safe(precomp[1], precomp[2], a, modulus, mp);
 800dc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800dc66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc68:	462b      	mov	r3, r5
 800dc6a:	f7ff f8e4 	bl	800ce36 <ecc_projective_dbl_point_safe>
  }
  if (err == MP_OKAY) {
 800dc6e:	4601      	mov	r1, r0
 800dc70:	bb08      	cbnz	r0, 800dcb6 <ecc_mul2add+0x22e>
    err = ecc_projective_add_point_safe(precomp[1], precomp[2], precomp[3],
 800dc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc74:	9002      	str	r0, [sp, #8]
 800dc76:	e9cd 5300 	strd	r5, r3, [sp]
 800dc7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc7c:	6860      	ldr	r0, [r4, #4]
 800dc7e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800dc82:	f7ff f83e 	bl	800cd02 <ecc_projective_add_point_safe>
                                                          a, modulus, mp, NULL);
  }

  if (err == MP_OKAY) {
 800dc86:	4601      	mov	r1, r0
 800dc88:	b9a8      	cbnz	r0, 800dcb6 <ecc_mul2add+0x22e>
    /* precomp [0,i](A + B) table */
    err = ecc_projective_dbl_point_safe(precomp[4], precomp[8], a, modulus, mp);
 800dc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	6a21      	ldr	r1, [r4, #32]
 800dc90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc92:	6920      	ldr	r0, [r4, #16]
 800dc94:	462b      	mov	r3, r5
 800dc96:	f7ff f8ce 	bl	800ce36 <ecc_projective_dbl_point_safe>
  }
  if (err == MP_OKAY) {
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	b958      	cbnz	r0, 800dcb6 <ecc_mul2add+0x22e>
    err = ecc_projective_add_point_safe(precomp[4], precomp[8], precomp[12], a,
 800dc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dca0:	9002      	str	r0, [sp, #8]
 800dca2:	e9cd 5300 	strd	r5, r3, [sp]
 800dca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dca8:	6a21      	ldr	r1, [r4, #32]
 800dcaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dcac:	6920      	ldr	r0, [r4, #16]
 800dcae:	f7ff f828 	bl	800cd02 <ecc_projective_add_point_safe>
                                                             modulus, mp, NULL);
  }

  if (err == MP_OKAY) {
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	b338      	cbz	r0, 800dd06 <ecc_mul2add+0x27e>
  /* reduce to affine */
  if (err == MP_OKAY)
    err = ecc_map(C, modulus, mp);

  /* clean up */
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 800dcb6:	1f25      	subs	r5, r4, #4
 800dcb8:	f104 063c 	add.w	r6, r4, #60	; 0x3c
     wc_ecc_del_point_ex(precomp[x], heap);
 800dcbc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800dcc0:	9105      	str	r1, [sp, #20]
 800dcc2:	f7fe f9a9 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 800dcc6:	42ae      	cmp	r6, r5
 800dcc8:	9905      	ldr	r1, [sp, #20]
 800dcca:	d1f7      	bne.n	800dcbc <ecc_mul2add+0x234>
 800dccc:	f209 1201 	addw	r2, r9, #257	; 0x101
 800dcd0:	464b      	mov	r3, r9
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	f040 8091 	bne.w	800ddfc <ecc_mul2add+0x374>
 800dcda:	9b04      	ldr	r3, [sp, #16]
 800dcdc:	2000      	movs	r0, #0
 800dcde:	f203 1201 	addw	r2, r3, #257	; 0x101
 800dce2:	4293      	cmp	r3, r2
 800dce4:	f040 808d 	bne.w	800de02 <ecc_mul2add+0x37a>
  XFREE(key->t1, heap, DYNAMIC_TYPE_ECC);
  XFREE(key, heap, DYNAMIC_TYPE_ECC_BUFFER);
  C->key = NULL;
#endif
#ifdef WOLFSSL_SMALL_STACK
  XFREE(precomp, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800dce8:	4620      	mov	r0, r4
 800dcea:	9105      	str	r1, [sp, #20]
 800dcec:	f00f fe42 	bl	801d974 <free>
#endif
#ifndef WOLFSSL_NO_MALLOC
  XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800dcf0:	9804      	ldr	r0, [sp, #16]
 800dcf2:	f00f fe3f 	bl	801d974 <free>
  XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800dcf6:	4648      	mov	r0, r9
 800dcf8:	f00f fe3c 	bl	801d974 <free>
#elif defined(WOLFSSL_CHECK_MEM_ZERO)
  wc_MemZero_Check(tB, ECC_BUFSIZE);
  wc_MemZero_Check(tA, ECC_BUFSIZE);
#endif
  return err;
 800dcfc:	9905      	ldr	r1, [sp, #20]
}
 800dcfe:	4608      	mov	r0, r1
 800dd00:	b00d      	add	sp, #52	; 0x34
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (x = 1; x < 4; x++) {
 800dd06:	f04f 0801 	mov.w	r8, #1
      for (y = 1; y < 4; y++) {
 800dd0a:	f104 0610 	add.w	r6, r4, #16
        if (err == MP_OKAY) {
 800dd0e:	b961      	cbnz	r1, 800dd2a <ecc_mul2add+0x2a2>
          err = ecc_projective_add_point_safe(precomp[x], precomp[(y<<2)],
 800dd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd12:	9102      	str	r1, [sp, #8]
 800dd14:	e9cd 5300 	strd	r5, r3, [sp]
 800dd18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd1a:	6831      	ldr	r1, [r6, #0]
 800dd1c:	f856 2028 	ldr.w	r2, [r6, r8, lsl #2]
 800dd20:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 800dd24:	f7fe ffed 	bl	800cd02 <ecc_projective_add_point_safe>
 800dd28:	4601      	mov	r1, r0
      for (y = 1; y < 4; y++) {
 800dd2a:	9b07      	ldr	r3, [sp, #28]
 800dd2c:	3610      	adds	r6, #16
 800dd2e:	42b3      	cmp	r3, r6
 800dd30:	d1ed      	bne.n	800dd0e <ecc_mul2add+0x286>
    for (x = 1; x < 4; x++) {
 800dd32:	f108 0801 	add.w	r8, r8, #1
 800dd36:	f1b8 0f04 	cmp.w	r8, #4
 800dd3a:	d1e6      	bne.n	800dd0a <ecc_mul2add+0x282>
  if (err == MP_OKAY) {
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	d1ba      	bne.n	800dcb6 <ecc_mul2add+0x22e>
    first   = 1;
 800dd40:	2301      	movs	r3, #1
 800dd42:	930a      	str	r3, [sp, #40]	; 0x28
    bitbufB = tB[0];
 800dd44:	9b04      	ldr	r3, [sp, #16]
    bitbufA = tA[0];
 800dd46:	f899 a000 	ldrb.w	sl, [r9]
    bitbufB = tB[0];
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	9305      	str	r3, [sp, #20]
                    err = mp_copy(precomp[i]->y, C->y);
 800dd4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
    for (x = 0; x < (int)len || nibble != 3; ) {
 800dd52:	4688      	mov	r8, r1
    nibble  = 3;
 800dd54:	f04f 0b03 	mov.w	fp, #3
                    err = mp_copy(precomp[i]->y, C->y);
 800dd58:	9309      	str	r3, [sp, #36]	; 0x24
    for (x = 0; x < (int)len || nibble != 3; ) {
 800dd5a:	9b06      	ldr	r3, [sp, #24]
 800dd5c:	4543      	cmp	r3, r8
 800dd5e:	dc0b      	bgt.n	800dd78 <ecc_mul2add+0x2f0>
 800dd60:	f1bb 0f03 	cmp.w	fp, #3
 800dd64:	d108      	bne.n	800dd78 <ecc_mul2add+0x2f0>
  if (err == MP_OKAY)
 800dd66:	2900      	cmp	r1, #0
 800dd68:	d1a5      	bne.n	800dcb6 <ecc_mul2add+0x22e>
    err = ecc_map(C, modulus, mp);
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd6e:	4638      	mov	r0, r7
 800dd70:	f7fe fed2 	bl	800cb18 <ecc_map>
 800dd74:	4601      	mov	r1, r0
 800dd76:	e79e      	b.n	800dcb6 <ecc_mul2add+0x22e>
        if (++nibble == 4) {
 800dd78:	f10b 0b01 	add.w	fp, fp, #1
 800dd7c:	f1bb 0f04 	cmp.w	fp, #4
 800dd80:	d10c      	bne.n	800dd9c <ecc_mul2add+0x314>
            if (x == (int)len) break;
 800dd82:	9b06      	ldr	r3, [sp, #24]
 800dd84:	4543      	cmp	r3, r8
 800dd86:	d0ee      	beq.n	800dd66 <ecc_mul2add+0x2de>
            bitbufB = tB[x];
 800dd88:	9b04      	ldr	r3, [sp, #16]
            bitbufA = tA[x];
 800dd8a:	f819 a008 	ldrb.w	sl, [r9, r8]
            bitbufB = tB[x];
 800dd8e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800dd92:	9305      	str	r3, [sp, #20]
            x++;
 800dd94:	f108 0801 	add.w	r8, r8, #1
            nibble  = 0;
 800dd98:	f04f 0b00 	mov.w	fp, #0
        nA = (bitbufA >> 6) & 0x03;
 800dd9c:	ea4f 139a 	mov.w	r3, sl, lsr #6
 800dda0:	9307      	str	r3, [sp, #28]
        nB = (bitbufB >> 6) & 0x03;
 800dda2:	9b05      	ldr	r3, [sp, #20]
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 800dda4:	9a07      	ldr	r2, [sp, #28]
        nB = (bitbufB >> 6) & 0x03;
 800dda6:	099e      	lsrs	r6, r3, #6
        bitbufA = (bitbufA << 2) & 0xFF;
 800dda8:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800ddac:	fa5f fa83 	uxtb.w	sl, r3
        bitbufB = (bitbufB << 2) & 0xFF;
 800ddb0:	9b05      	ldr	r3, [sp, #20]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	b2db      	uxtb	r3, r3
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 800ddb6:	4332      	orrs	r2, r6
        bitbufB = (bitbufB << 2) & 0xFF;
 800ddb8:	9305      	str	r3, [sp, #20]
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 800ddba:	9208      	str	r2, [sp, #32]
 800ddbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddbe:	d126      	bne.n	800de0e <ecc_mul2add+0x386>
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d0ca      	beq.n	800dd5a <ecc_mul2add+0x2d2>
        if (first == 0) {
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1c8      	bne.n	800dd5a <ecc_mul2add+0x2d2>
 800ddc8:	e022      	b.n	800de10 <ecc_mul2add+0x388>
                if (err == MP_OKAY)
 800ddca:	2900      	cmp	r1, #0
 800ddcc:	f47f af73 	bne.w	800dcb6 <ecc_mul2add+0x22e>
                    err = ecc_projective_add_point_safe(C, precomp[i],
 800ddd0:	ab0a      	add	r3, sp, #40	; 0x28
 800ddd2:	9302      	str	r3, [sp, #8]
 800ddd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddd6:	e9cd 5300 	strd	r5, r3, [sp]
 800ddda:	463a      	mov	r2, r7
 800dddc:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 800dde0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dde2:	4638      	mov	r0, r7
 800dde4:	f7fe ff8d 	bl	800cd02 <ecc_projective_add_point_safe>
                if (err != MP_OKAY)
 800dde8:	4601      	mov	r1, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d0b5      	beq.n	800dd5a <ecc_mul2add+0x2d2>
 800ddee:	e762      	b.n	800dcb6 <ecc_mul2add+0x22e>
    err = BAD_FUNC_ARG;
 800ddf0:	f06f 01ac 	mvn.w	r1, #172	; 0xac
 800ddf4:	e75f      	b.n	800dcb6 <ecc_mul2add+0x22e>
       err = MEMORY_E;
 800ddf6:	f06f 017c 	mvn.w	r1, #124	; 0x7c
 800ddfa:	e75c      	b.n	800dcb6 <ecc_mul2add+0x22e>
 800ddfc:	f803 0b01 	strb.w	r0, [r3], #1
 800de00:	e768      	b.n	800dcd4 <ecc_mul2add+0x24c>
 800de02:	f803 0b01 	strb.w	r0, [r3], #1
 800de06:	e76c      	b.n	800dce2 <ecc_mul2add+0x25a>
     return ECC_BAD_ARG_E;
 800de08:	f06f 01a9 	mvn.w	r1, #169	; 0xa9
 800de0c:	e777      	b.n	800dcfe <ecc_mul2add+0x276>
        if (first == 0) {
 800de0e:	b9d3      	cbnz	r3, 800de46 <ecc_mul2add+0x3be>
            if (err == MP_OKAY)
 800de10:	2900      	cmp	r1, #0
 800de12:	f47f af50 	bne.w	800dcb6 <ecc_mul2add+0x22e>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800de16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	4639      	mov	r1, r7
 800de1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800de1e:	462b      	mov	r3, r5
 800de20:	4638      	mov	r0, r7
 800de22:	f7ff f808 	bl	800ce36 <ecc_projective_dbl_point_safe>
            if (err == MP_OKAY)
 800de26:	4601      	mov	r1, r0
 800de28:	2800      	cmp	r0, #0
 800de2a:	f47f af44 	bne.w	800dcb6 <ecc_mul2add+0x22e>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800de2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	4639      	mov	r1, r7
 800de34:	462b      	mov	r3, r5
 800de36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800de38:	4638      	mov	r0, r7
 800de3a:	f7fe fffc 	bl	800ce36 <ecc_projective_dbl_point_safe>
        if ((nA != 0) || (nB != 0)) {
 800de3e:	9b08      	ldr	r3, [sp, #32]
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800de40:	4601      	mov	r1, r0
        if ((nA != 0) || (nB != 0)) {
 800de42:	2b00      	cmp	r3, #0
 800de44:	d089      	beq.n	800dd5a <ecc_mul2add+0x2d2>
            unsigned int i = nA + (nB<<2);
 800de46:	9b07      	ldr	r3, [sp, #28]
 800de48:	eb03 0686 	add.w	r6, r3, r6, lsl #2
            if (first == 1) {
 800de4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d1bb      	bne.n	800ddca <ecc_mul2add+0x342>
                first = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	930a      	str	r3, [sp, #40]	; 0x28
                if (err == MP_OKAY)
 800de56:	2900      	cmp	r1, #0
 800de58:	f47f af2d 	bne.w	800dcb6 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->x, C->x);
 800de5c:	4639      	mov	r1, r7
 800de5e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800de62:	f00f f85c 	bl	801cf1e <mp_copy>
                if (err == MP_OKAY)
 800de66:	4601      	mov	r1, r0
 800de68:	2800      	cmp	r0, #0
 800de6a:	f47f af24 	bne.w	800dcb6 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->y, C->y);
 800de6e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800de72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de74:	3068      	adds	r0, #104	; 0x68
 800de76:	f00f f852 	bl	801cf1e <mp_copy>
                if (err == MP_OKAY)
 800de7a:	4601      	mov	r1, r0
 800de7c:	2800      	cmp	r0, #0
 800de7e:	f47f af1a 	bne.w	800dcb6 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->z, C->z);
 800de82:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800de86:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800de8a:	30d0      	adds	r0, #208	; 0xd0
 800de8c:	f00f f847 	bl	801cf1e <mp_copy>
 800de90:	4601      	mov	r1, r0
 800de92:	e762      	b.n	800dd5a <ecc_mul2add+0x2d2>

0800de94 <wc_ecc_verify_hash_ex>:
               Caller should check the *res value to determine if the signature
               is valid or invalid. Other negative values are returned on error.
*/
int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash,
                    word32 hashlen, int* res, ecc_key* key)
{
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	b09f      	sub	sp, #124	; 0x7c
 800de9a:	4681      	mov	r9, r0
 800de9c:	9206      	str	r2, [sp, #24]
#elif defined(WOLFSSL_XILINX_CRYPT_VERSAL)
   byte sigRS[ECC_MAX_CRYPTO_HW_SIZE * 2];
   byte hashcopy[ECC_MAX_CRYPTO_HW_SIZE] = {0};
#else
   int curveLoaded = 0;
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800de9e:	a80a      	add	r0, sp, #40	; 0x28
 800dea0:	2228      	movs	r2, #40	; 0x28
{
 800dea2:	468a      	mov	sl, r1
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800dea4:	2100      	movs	r1, #0
{
 800dea6:	4698      	mov	r8, r3
 800dea8:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800deaa:	9008      	str	r0, [sp, #32]
 800deac:	f00f fda2 	bl	801d9f4 <memset>
 800deb0:	9b08      	ldr	r3, [sp, #32]
 800deb2:	2205      	movs	r2, #5
 800deb4:	61da      	str	r2, [r3, #28]
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 800deb6:	f1b9 0f00 	cmp.w	r9, #0
 800deba:	d105      	bne.n	800dec8 <wc_ecc_verify_hash_ex+0x34>
       return ECC_BAD_ARG_E;
 800debc:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
   (void)keySz;
   (void)hashlen;

   return err;
#endif /* WOLFSSL_STM32_PKA */
}
 800dec0:	4620      	mov	r0, r4
 800dec2:	b01f      	add	sp, #124	; 0x7c
 800dec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 800dec8:	f1ba 0f00 	cmp.w	sl, #0
 800decc:	d0f6      	beq.n	800debc <wc_ecc_verify_hash_ex+0x28>
 800dece:	9b06      	ldr	r3, [sp, #24]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d0f3      	beq.n	800debc <wc_ecc_verify_hash_ex+0x28>
 800ded4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0f0      	beq.n	800debc <wc_ecc_verify_hash_ex+0x28>
 800deda:	2e00      	cmp	r6, #0
 800dedc:	d0ee      	beq.n	800debc <wc_ecc_verify_hash_ex+0x28>
   *res = 0;
 800dede:	2100      	movs	r1, #0
 800dee0:	6019      	str	r1, [r3, #0]
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 800dee2:	6870      	ldr	r0, [r6, #4]
 800dee4:	f7fe fe35 	bl	800cb52 <wc_ecc_is_valid_idx>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d0e7      	beq.n	800debc <wc_ecc_verify_hash_ex+0x28>
 800deec:	6933      	ldr	r3, [r6, #16]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d0e4      	beq.n	800debc <wc_ecc_verify_hash_ex+0x28>
    DECLARE_CURVE_SPECS(1);
 800def2:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800def6:	2228      	movs	r2, #40	; 0x28
 800def8:	4658      	mov	r0, fp
 800defa:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800defe:	f00f fd79 	bl	801d9f4 <memset>
 800df02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df04:	2201      	movs	r2, #1
 800df06:	61da      	str	r2, [r3, #28]
    ALLOC_CURVE_SPECS(1, err);
 800df08:	2068      	movs	r0, #104	; 0x68
 800df0a:	f00f fd2b 	bl	801d964 <malloc>
 800df0e:	4605      	mov	r5, r0
 800df10:	b308      	cbz	r0, 800df56 <wc_ecc_verify_hash_ex+0xc2>
 800df12:	9b09      	ldr	r3, [sp, #36]	; 0x24
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800df14:	2208      	movs	r2, #8
    ALLOC_CURVE_SPECS(1, err);
 800df16:	6198      	str	r0, [r3, #24]
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800df18:	a909      	add	r1, sp, #36	; 0x24
 800df1a:	6930      	ldr	r0, [r6, #16]
 800df1c:	f7fe fcc1 	bl	800c8a2 <wc_ecc_curve_load>
    if (err != 0) {
 800df20:	4604      	mov	r4, r0
 800df22:	2800      	cmp	r0, #0
 800df24:	d13c      	bne.n	800dfa0 <wc_ecc_verify_hash_ex+0x10c>
    if (mp_iszero(r) || mp_iszero(s)) {
 800df26:	4648      	mov	r0, r9
 800df28:	f00e fffe 	bl	801cf28 <mp_iszero>
 800df2c:	b1b0      	cbz	r0, 800df5c <wc_ecc_verify_hash_ex+0xc8>
        err = MP_ZERO_E;
 800df2e:	f06f 0478 	mvn.w	r4, #120	; 0x78
    wc_ecc_curve_free(curve);
 800df32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df34:	f7fe fc6d 	bl	800c812 <wc_ecc_curve_free>
    FREE_CURVE_SPECS();
 800df38:	4628      	mov	r0, r5
 800df3a:	f00f fd1b 	bl	801d974 <free>
   if (err != MP_OKAY) {
 800df3e:	2c00      	cmp	r4, #0
 800df40:	d1be      	bne.n	800dec0 <wc_ecc_verify_hash_ex+0x2c>
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 800df42:	6833      	ldr	r3, [r6, #0]
 800df44:	2b03      	cmp	r3, #3
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800df46:	f44f 7002 	mov.w	r0, #520	; 0x208
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 800df4a:	d137      	bne.n	800dfbc <wc_ecc_verify_hash_ex+0x128>
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800df4c:	f00f fd0a 	bl	801d964 <malloc>
 800df50:	4605      	mov	r5, r0
 800df52:	9005      	str	r0, [sp, #20]
 800df54:	b9d8      	cbnz	r0, 800df8e <wc_ecc_verify_hash_ex+0xfa>
    ALLOC_CURVE_SPECS(1, err);
 800df56:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   if (err != MP_OKAY) {
 800df5a:	e7b1      	b.n	800dec0 <wc_ecc_verify_hash_ex+0x2c>
    if (mp_iszero(r) || mp_iszero(s)) {
 800df5c:	4650      	mov	r0, sl
 800df5e:	f00e ffe3 	bl	801cf28 <mp_iszero>
 800df62:	2800      	cmp	r0, #0
 800df64:	d1e3      	bne.n	800df2e <wc_ecc_verify_hash_ex+0x9a>
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 800df66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df68:	4648      	mov	r0, r9
 800df6a:	68d9      	ldr	r1, [r3, #12]
 800df6c:	f00e f856 	bl	801c01c <mp_cmp>
 800df70:	3001      	adds	r0, #1
 800df72:	d109      	bne.n	800df88 <wc_ecc_verify_hash_ex+0xf4>
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 800df74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df76:	4650      	mov	r0, sl
 800df78:	68d9      	ldr	r1, [r3, #12]
 800df7a:	f00e f84f 	bl	801c01c <mp_cmp>
 800df7e:	1c44      	adds	r4, r0, #1
 800df80:	bf18      	it	ne
 800df82:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 800df86:	e7d4      	b.n	800df32 <wc_ecc_verify_hash_ex+0x9e>
        err = MP_VAL;
 800df88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800df8c:	e7d1      	b.n	800df32 <wc_ecc_verify_hash_ex+0x9e>
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800df8e:	9b08      	ldr	r3, [sp, #32]
      err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800df90:	223b      	movs	r2, #59	; 0x3b
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800df92:	6198      	str	r0, [r3, #24]
      err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800df94:	a908      	add	r1, sp, #32
 800df96:	6930      	ldr	r0, [r6, #16]
 800df98:	f7fe fc83 	bl	800c8a2 <wc_ecc_curve_load>
      if (err != MP_OKAY) {
 800df9c:	4604      	mov	r4, r0
 800df9e:	b108      	cbz	r0, 800dfa4 <wc_ecc_verify_hash_ex+0x110>
        FREE_CURVE_SPECS();
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	e072      	b.n	800e08a <wc_ecc_verify_hash_ex+0x1f6>
      err = ecc_make_pub_ex(key, curve, NULL, NULL);
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	9908      	ldr	r1, [sp, #32]
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f7ff fab6 	bl	800d51c <ecc_make_pub_ex>
      if (err != MP_OKAY) {
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	b198      	cbz	r0, 800dfdc <wc_ecc_verify_hash_ex+0x148>
           wc_ecc_curve_free(curve);
 800dfb4:	9808      	ldr	r0, [sp, #32]
 800dfb6:	f7fe fc2c 	bl	800c812 <wc_ecc_curve_free>
           FREE_CURVE_SPECS();
 800dfba:	e7f1      	b.n	800dfa0 <wc_ecc_verify_hash_ex+0x10c>
       ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800dfbc:	f00f fcd2 	bl	801d964 <malloc>
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	9005      	str	r0, [sp, #20]
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0c6      	beq.n	800df56 <wc_ecc_verify_hash_ex+0xc2>
 800dfc8:	9b08      	ldr	r3, [sp, #32]
       err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800dfca:	223b      	movs	r2, #59	; 0x3b
       ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800dfcc:	6198      	str	r0, [r3, #24]
       err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800dfce:	a908      	add	r1, sp, #32
 800dfd0:	6930      	ldr	r0, [r6, #16]
 800dfd2:	f7fe fc66 	bl	800c8a2 <wc_ecc_curve_load>
       if (err != 0) {
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d1e1      	bne.n	800dfa0 <wc_ecc_verify_hash_ex+0x10c>
   ecc_point* mG = NULL;
 800dfdc:	2400      	movs	r4, #0
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800dfde:	2068      	movs	r0, #104	; 0x68
   err = ecc_verify_hash(r, s, hash, hashlen, res, key, curve);
 800dfe0:	9f08      	ldr	r7, [sp, #32]
   ecc_point* mG = NULL;
 800dfe2:	9409      	str	r4, [sp, #36]	; 0x24
   ecc_point* mQ = NULL;
 800dfe4:	9414      	str	r4, [sp, #80]	; 0x50
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800dfe6:	f00f fcbd 	bl	801d964 <malloc>
 800dfea:	4605      	mov	r5, r0
 800dfec:	b150      	cbz	r0, 800e004 <wc_ecc_verify_hash_ex+0x170>
 800dfee:	2268      	movs	r2, #104	; 0x68
 800dff0:	4621      	mov	r1, r4
 800dff2:	f00f fcff 	bl	801d9f4 <memset>
   err = INIT_MP_INT_SIZE(e, ECC_KEY_MAX_BITS(key));
 800dff6:	4628      	mov	r0, r5
 800dff8:	f00d ffcd 	bl	801bf96 <mp_init>
   if (err != MP_OKAY) {
 800dffc:	b128      	cbz	r0, 800e00a <wc_ecc_verify_hash_ex+0x176>
      XFREE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800dffe:	4628      	mov	r0, r5
 800e000:	f00f fcb8 	bl	801d974 <free>
       return MEMORY_E;
 800e004:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800e008:	e03b      	b.n	800e082 <wc_ecc_verify_hash_ex+0x1ee>
       unsigned int orderBits = (unsigned int)mp_count_bits(curve->order);
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f00e ff91 	bl	801cf32 <mp_count_bits>
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 800e010:	ebb0 0fc8 	cmp.w	r0, r8, lsl #3
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 800e014:	bf3c      	itt	cc
 800e016:	f100 0807 	addcc.w	r8, r0, #7
 800e01a:	ea4f 08d8 	movcc.w	r8, r8, lsr #3
 800e01e:	9007      	str	r0, [sp, #28]
       err = mp_read_unsigned_bin(e, hash, hashlen);
 800e020:	9906      	ldr	r1, [sp, #24]
 800e022:	4642      	mov	r2, r8
 800e024:	4628      	mov	r0, r5
 800e026:	f00d ffff 	bl	801c028 <mp_read_unsigned_bin>
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 800e02a:	4604      	mov	r4, r0
 800e02c:	b950      	cbnz	r0, 800e044 <wc_ecc_verify_hash_ex+0x1b0>
 800e02e:	9b07      	ldr	r3, [sp, #28]
 800e030:	ebb3 0fc8 	cmp.w	r3, r8, lsl #3
 800e034:	d206      	bcs.n	800e044 <wc_ecc_verify_hash_ex+0x1b0>
           mp_rshb(e, (int)(WOLFSSL_BIT_SIZE - (orderBits & 0x7)));
 800e036:	f003 0107 	and.w	r1, r3, #7
 800e03a:	f1c1 0108 	rsb	r1, r1, #8
 800e03e:	4628      	mov	r0, r5
 800e040:	f00e ff7b 	bl	801cf3a <mp_rshb>
   NEW_MP_INT_SIZE(w, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800e044:	2068      	movs	r0, #104	; 0x68
 800e046:	f00f fc8d 	bl	801d964 <malloc>
 800e04a:	4680      	mov	r8, r0
 800e04c:	b300      	cbz	r0, 800e090 <wc_ecc_verify_hash_ex+0x1fc>
 800e04e:	2268      	movs	r2, #104	; 0x68
 800e050:	2100      	movs	r1, #0
 800e052:	f00f fccf 	bl	801d9f4 <memset>
   if (err == MP_OKAY) {
 800e056:	b1f4      	cbz	r4, 800e096 <wc_ecc_verify_hash_ex+0x202>
   wc_ecc_del_point_ex(mG, key->heap);
 800e058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e05a:	f7fd ffdd 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
   wc_ecc_del_point_ex(mQ, key->heap);
 800e05e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e060:	f7fd ffda 	bl	800c018 <wc_ecc_del_point_ex.constprop.0>
   mp_clear(e);
 800e064:	4628      	mov	r0, r5
 800e066:	f00d ffab 	bl	801bfc0 <mp_clear>
   mp_clear(w);
 800e06a:	4640      	mov	r0, r8
 800e06c:	f00d ffa8 	bl	801bfc0 <mp_clear>
   FREE_MP_INT_SIZE(w, key->heap, DYNAMIC_TYPE_ECC);
 800e070:	f1b8 0f00 	cmp.w	r8, #0
 800e074:	d002      	beq.n	800e07c <wc_ecc_verify_hash_ex+0x1e8>
 800e076:	4640      	mov	r0, r8
 800e078:	f00f fc7c 	bl	801d974 <free>
   FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800e07c:	4628      	mov	r0, r5
 800e07e:	f00f fc79 	bl	801d974 <free>
   wc_ecc_curve_free(curve);
 800e082:	9808      	ldr	r0, [sp, #32]
 800e084:	f7fe fbc5 	bl	800c812 <wc_ecc_curve_free>
   FREE_CURVE_SPECS();
 800e088:	9805      	ldr	r0, [sp, #20]
        FREE_CURVE_SPECS();
 800e08a:	f00f fc73 	bl	801d974 <free>
 800e08e:	e717      	b.n	800dec0 <wc_ecc_verify_hash_ex+0x2c>
       err = MEMORY_E;
 800e090:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800e094:	e7e0      	b.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = INIT_MP_INT_SIZE(w, ECC_KEY_MAX_BITS(key));
 800e096:	4640      	mov	r0, r8
 800e098:	f00d ff7d 	bl	801bf96 <mp_init>
   if (err == MP_OKAY) {
 800e09c:	4604      	mov	r4, r0
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d1da      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = wc_ecc_new_point_ex(&mG, key->heap);
 800e0a2:	a809      	add	r0, sp, #36	; 0x24
 800e0a4:	f7fd ff91 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
   if (err == MP_OKAY) {
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d1d4      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = wc_ecc_new_point_ex(&mQ, key->heap);
 800e0ae:	4658      	mov	r0, fp
 800e0b0:	f7fd ff8b 	bl	800bfca <wc_ecc_new_point_ex.constprop.0>
   if (err == MP_OKAY)
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d1ce      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_invmod(s, curve->order, w);
 800e0ba:	68f9      	ldr	r1, [r7, #12]
 800e0bc:	4642      	mov	r2, r8
 800e0be:	4650      	mov	r0, sl
 800e0c0:	f00e fd70 	bl	801cba4 <mp_invmod>
   if (err == MP_OKAY)
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d1c6      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mulmod(e, w, curve->order, u1);
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	4641      	mov	r1, r8
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f00e fb2b 	bl	801c72c <mp_mulmod>
   if (err == MP_OKAY)
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d1bd      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mulmod(r, w, curve->order, u2);
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	4643      	mov	r3, r8
 800e0e0:	4641      	mov	r1, r8
 800e0e2:	4648      	mov	r0, r9
 800e0e4:	f00e fb22 	bl	801c72c <mp_mulmod>
   if (err == MP_OKAY)
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d1b4      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(curve->Gx, mG->x);
 800e0ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0f0:	6938      	ldr	r0, [r7, #16]
 800e0f2:	f00e ff14 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d1ad      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(curve->Gy, mG->y);
 800e0fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0fe:	6978      	ldr	r0, [r7, #20]
 800e100:	3168      	adds	r1, #104	; 0x68
 800e102:	f00e ff0c 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800e106:	4604      	mov	r4, r0
 800e108:	2800      	cmp	r0, #0
 800e10a:	d1a5      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_set(mG->z, 1);
 800e10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e10e:	2101      	movs	r1, #1
 800e110:	30d0      	adds	r0, #208	; 0xd0
 800e112:	f00e ffd1 	bl	801d0b8 <mp_set>
   if (err == MP_OKAY)
 800e116:	4604      	mov	r4, r0
 800e118:	2800      	cmp	r0, #0
 800e11a:	d19d      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.x, mQ->x);
 800e11c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e11e:	f106 0018 	add.w	r0, r6, #24
 800e122:	f00e fefc 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800e126:	4604      	mov	r4, r0
 800e128:	2800      	cmp	r0, #0
 800e12a:	d195      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.y, mQ->y);
 800e12c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e12e:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800e132:	3168      	adds	r1, #104	; 0x68
 800e134:	f00e fef3 	bl	801cf1e <mp_copy>
   if (err == MP_OKAY)
 800e138:	4604      	mov	r4, r0
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d18c      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.z, mQ->z);
 800e13e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e140:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
 800e144:	31d0      	adds	r1, #208	; 0xd0
 800e146:	f00e feea 	bl	801cf1e <mp_copy>
    if (err == MP_OKAY) {
 800e14a:	4604      	mov	r4, r0
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d183      	bne.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>
        err = ecc_mul2add(mG, u1, mQ, u2, mG, curve->Af, curve->prime,
 800e150:	6973      	ldr	r3, [r6, #20]
 800e152:	9303      	str	r3, [sp, #12]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	9302      	str	r3, [sp, #8]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e15c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e15e:	e9cd 0300 	strd	r0, r3, [sp]
 800e162:	4629      	mov	r1, r5
 800e164:	4643      	mov	r3, r8
 800e166:	f7ff fc8f 	bl	800da88 <ecc_mul2add>
   if (err == MP_OKAY)
 800e16a:	4604      	mov	r4, r0
 800e16c:	2800      	cmp	r0, #0
 800e16e:	f47f af73 	bne.w	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mod(mG->x, curve->order, v);
 800e172:	68f9      	ldr	r1, [r7, #12]
 800e174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e176:	4642      	mov	r2, r8
 800e178:	f00e fada 	bl	801c730 <mp_mod>
   if (err == MP_OKAY) {
 800e17c:	4604      	mov	r4, r0
 800e17e:	2800      	cmp	r0, #0
 800e180:	f47f af6a 	bne.w	800e058 <wc_ecc_verify_hash_ex+0x1c4>
       if (mp_cmp(v, r) == MP_EQ)
 800e184:	4649      	mov	r1, r9
 800e186:	4640      	mov	r0, r8
 800e188:	f00d ff48 	bl	801c01c <mp_cmp>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f47f af63 	bne.w	800e058 <wc_ecc_verify_hash_ex+0x1c4>
           *res = 1;
 800e192:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e194:	2301      	movs	r3, #1
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	e75e      	b.n	800e058 <wc_ecc_verify_hash_ex+0x1c4>

0800e19a <wc_ecc_verify_hash>:
{
 800e19a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e1a0:	468b      	mov	fp, r1
 800e1a2:	4617      	mov	r7, r2
 800e1a4:	4699      	mov	r9, r3
    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
 800e1a6:	4680      	mov	r8, r0
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d078      	beq.n	800e29e <wc_ecc_verify_hash+0x104>
 800e1ac:	2a00      	cmp	r2, #0
 800e1ae:	d076      	beq.n	800e29e <wc_ecc_verify_hash+0x104>
 800e1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d073      	beq.n	800e29e <wc_ecc_verify_hash+0x104>
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	d071      	beq.n	800e29e <wc_ecc_verify_hash+0x104>
    NEW_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800e1ba:	2068      	movs	r0, #104	; 0x68
 800e1bc:	f00f fbd2 	bl	801d964 <malloc>
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d071      	beq.n	800e2aa <wc_ecc_verify_hash+0x110>
 800e1c6:	2268      	movs	r2, #104	; 0x68
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	f00f fc13 	bl	801d9f4 <memset>
    NEW_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800e1ce:	2068      	movs	r0, #104	; 0x68
 800e1d0:	f00f fbc8 	bl	801d964 <malloc>
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d064      	beq.n	800e2a4 <wc_ecc_verify_hash+0x10a>
 800e1da:	2268      	movs	r2, #104	; 0x68
 800e1dc:	2100      	movs	r1, #0
 800e1de:	f00f fc09 	bl	801d9f4 <memset>
    err = INIT_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key));
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f00d fed7 	bl	801bf96 <mp_init>
    if (err != 0) {
 800e1e8:	4682      	mov	sl, r0
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800e1ea:	4628      	mov	r0, r5
    if (err != 0) {
 800e1ec:	f1ba 0f00 	cmp.w	sl, #0
 800e1f0:	d008      	beq.n	800e204 <wc_ecc_verify_hash+0x6a>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800e1f2:	f00f fbbf 	bl	801d974 <free>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f00f fbbc 	bl	801d974 <free>
}
 800e1fc:	4650      	mov	r0, sl
 800e1fe:	b003      	add	sp, #12
 800e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = INIT_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key));
 800e204:	f00d fec7 	bl	801bf96 <mp_init>
    if (err != 0) {
 800e208:	4682      	mov	sl, r0
 800e20a:	b108      	cbz	r0, 800e210 <wc_ecc_verify_hash+0x76>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800e20c:	4628      	mov	r0, r5
 800e20e:	e7f0      	b.n	800e1f2 <wc_ecc_verify_hash+0x58>
    switch (key->state) {
 800e210:	68b3      	ldr	r3, [r6, #8]
 800e212:	2b07      	cmp	r3, #7
 800e214:	d840      	bhi.n	800e298 <wc_ecc_verify_hash+0xfe>
 800e216:	e8df f003 	tbb	[pc, r3]
 800e21a:	3f04      	.short	0x3f04
 800e21c:	043f3f3f 	.word	0x043f3f3f
 800e220:	3013      	.short	0x3013
            *res = 0;
 800e222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            key->state = ECC_STATE_VERIFY_DECODE;
 800e224:	2305      	movs	r3, #5
 800e226:	60b3      	str	r3, [r6, #8]
            *res = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	6013      	str	r3, [r2, #0]
            err = DecodeECC_DSA_Sig_Ex(sig, siglen, r, s, 0);
 800e22c:	4659      	mov	r1, fp
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	4622      	mov	r2, r4
 800e232:	462b      	mov	r3, r5
 800e234:	4640      	mov	r0, r8
 800e236:	f005 fef9 	bl	801402c <DecodeECC_DSA_Sig_Ex>
            if (err < 0) {
 800e23a:	f1b0 0a00 	subs.w	sl, r0, #0
 800e23e:	db21      	blt.n	800e284 <wc_ecc_verify_hash+0xea>
            key->state = ECC_STATE_VERIFY_DO;
 800e240:	2306      	movs	r3, #6
 800e242:	60b3      	str	r3, [r6, #8]
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
 800e244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	463a      	mov	r2, r7
 800e24a:	464b      	mov	r3, r9
 800e24c:	4629      	mov	r1, r5
 800e24e:	9601      	str	r6, [sp, #4]
 800e250:	4620      	mov	r0, r4
 800e252:	f7ff fe1f 	bl	800de94 <wc_ecc_verify_hash_ex>
 800e256:	4682      	mov	sl, r0
            mp_clear(r);
 800e258:	4620      	mov	r0, r4
 800e25a:	f00d feb1 	bl	801bfc0 <mp_clear>
            mp_clear(s);
 800e25e:	4628      	mov	r0, r5
 800e260:	f00d feae 	bl	801bfc0 <mp_clear>
            FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800e264:	4628      	mov	r0, r5
 800e266:	f00f fb85 	bl	801d974 <free>
            FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800e26a:	4620      	mov	r0, r4
 800e26c:	f00f fb82 	bl	801d974 <free>
            if (err < 0) {
 800e270:	f1ba 0f00 	cmp.w	sl, #0
 800e274:	db0d      	blt.n	800e292 <wc_ecc_verify_hash+0xf8>
            s = NULL;
 800e276:	2500      	movs	r5, #0
            r = NULL;
 800e278:	462c      	mov	r4, r5
            key->state = ECC_STATE_VERIFY_RES;
 800e27a:	2307      	movs	r3, #7
 800e27c:	60b3      	str	r3, [r6, #8]
            err = 0;
 800e27e:	f04f 0a00 	mov.w	sl, #0
    FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800e282:	b115      	cbz	r5, 800e28a <wc_ecc_verify_hash+0xf0>
 800e284:	4628      	mov	r0, r5
 800e286:	f00f fb75 	bl	801d974 <free>
    FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800e28a:	b114      	cbz	r4, 800e292 <wc_ecc_verify_hash+0xf8>
 800e28c:	4620      	mov	r0, r4
 800e28e:	f00f fb71 	bl	801d974 <free>
    key->state = ECC_STATE_NONE;
 800e292:	2300      	movs	r3, #0
 800e294:	60b3      	str	r3, [r6, #8]
    return err;
 800e296:	e7b1      	b.n	800e1fc <wc_ecc_verify_hash+0x62>
    switch (key->state) {
 800e298:	f06f 0abf 	mvn.w	sl, #191	; 0xbf
 800e29c:	e7f1      	b.n	800e282 <wc_ecc_verify_hash+0xe8>
        return ECC_BAD_ARG_E;
 800e29e:	f06f 0aa9 	mvn.w	sl, #169	; 0xa9
 800e2a2:	e7ab      	b.n	800e1fc <wc_ecc_verify_hash+0x62>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f00f fb65 	bl	801d974 <free>
        return MEMORY_E;
 800e2aa:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 800e2ae:	e7a5      	b.n	800e1fc <wc_ecc_verify_hash+0x62>

0800e2b0 <wc_ecc_export_x963>:
#endif /* HAVE_COMP_KEY */

/* export public ECC key in ANSI X9.63 format */
WOLFSSL_ABI
int wc_ecc_export_x963(ecc_key* key, byte* out, word32* outLen)
{
 800e2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	4688      	mov	r8, r1
 800e2b6:	4616      	mov	r6, r2
   byte   buf[ECC_BUFSIZE];
#endif
   word32 pubxlen, pubylen;

   /* return length needed only */
   if (key != NULL && out == NULL && outLen != NULL) {
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d074      	beq.n	800e3a8 <wc_ecc_export_x963+0xf8>
 800e2be:	b979      	cbnz	r1, 800e2e0 <wc_ecc_export_x963+0x30>
 800e2c0:	2a00      	cmp	r2, #0
 800e2c2:	d071      	beq.n	800e3a8 <wc_ecc_export_x963+0xf8>
      /* if key hasn't been setup assume max bytes for size estimation */
      numlen = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 800e2c4:	6903      	ldr	r3, [r0, #16]
 800e2c6:	b14b      	cbz	r3, 800e2dc <wc_ecc_export_x963+0x2c>
 800e2c8:	681b      	ldr	r3, [r3, #0]
      *outLen = 1 + 2 * numlen;
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	6033      	str	r3, [r6, #0]
      return LENGTH_ONLY_E;
 800e2d0:	f06f 09c9 	mvn.w	r9, #201	; 0xc9
#ifdef WOLFSSL_SMALL_STACK
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
#endif

   return ret;
}
 800e2d4:	4648      	mov	r0, r9
 800e2d6:	b003      	add	sp, #12
 800e2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      numlen = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 800e2dc:	2320      	movs	r3, #32
 800e2de:	e7f4      	b.n	800e2ca <wc_ecc_export_x963+0x1a>
   if (key == NULL || out == NULL || outLen == NULL)
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	d061      	beq.n	800e3a8 <wc_ecc_export_x963+0xf8>
   if (key->type == ECC_PRIVATEKEY_ONLY)
 800e2e4:	6803      	ldr	r3, [r0, #0]
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d05b      	beq.n	800e3a2 <wc_ecc_export_x963+0xf2>
   if (key->type == 0 || wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL){
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d05c      	beq.n	800e3a8 <wc_ecc_export_x963+0xf8>
 800e2ee:	6840      	ldr	r0, [r0, #4]
 800e2f0:	f7fe fc2f 	bl	800cb52 <wc_ecc_is_valid_idx>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d057      	beq.n	800e3a8 <wc_ecc_export_x963+0xf8>
 800e2f8:	6923      	ldr	r3, [r4, #16]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d054      	beq.n	800e3a8 <wc_ecc_export_x963+0xf8>
   numlen = (word32)key->dp->size;
 800e2fe:	681f      	ldr	r7, [r3, #0]
   if (*outLen < (1 + 2*numlen)) {
 800e300:	6813      	ldr	r3, [r2, #0]
 800e302:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800e306:	f10a 0a01 	add.w	sl, sl, #1
 800e30a:	4553      	cmp	r3, sl
 800e30c:	d204      	bcs.n	800e318 <wc_ecc_export_x963+0x68>
      *outLen = 1 + 2*numlen;
 800e30e:	f8c2 a000 	str.w	sl, [r2]
      return BUFFER_E;
 800e312:	f06f 0983 	mvn.w	r9, #131	; 0x83
 800e316:	e7dd      	b.n	800e2d4 <wc_ecc_export_x963+0x24>
   pubxlen = (word32)mp_unsigned_bin_size(key->pubkey.x);
 800e318:	f104 0b18 	add.w	fp, r4, #24
 800e31c:	4658      	mov	r0, fp
 800e31e:	f00d fe81 	bl	801c024 <mp_unsigned_bin_size>
   pubylen = (word32)mp_unsigned_bin_size(key->pubkey.y);
 800e322:	3480      	adds	r4, #128	; 0x80
   pubxlen = (word32)mp_unsigned_bin_size(key->pubkey.x);
 800e324:	4681      	mov	r9, r0
   pubylen = (word32)mp_unsigned_bin_size(key->pubkey.y);
 800e326:	4620      	mov	r0, r4
 800e328:	f00d fe7c 	bl	801c024 <mp_unsigned_bin_size>
   if ((pubxlen > numlen) || (pubylen > numlen)) {
 800e32c:	454f      	cmp	r7, r9
   pubylen = (word32)mp_unsigned_bin_size(key->pubkey.y);
 800e32e:	9001      	str	r0, [sp, #4]
   if ((pubxlen > numlen) || (pubylen > numlen)) {
 800e330:	d3ef      	bcc.n	800e312 <wc_ecc_export_x963+0x62>
 800e332:	4287      	cmp	r7, r0
 800e334:	d3ed      	bcc.n	800e312 <wc_ecc_export_x963+0x62>
   out[0] = ECC_POINT_UNCOMP;
 800e336:	2304      	movs	r3, #4
 800e338:	f888 3000 	strb.w	r3, [r8]
   buf = (byte*)XMALLOC(ECC_BUFSIZE, NULL, DYNAMIC_TYPE_ECC_BUFFER);
 800e33c:	f240 1001 	movw	r0, #257	; 0x101
 800e340:	f00f fb10 	bl	801d964 <malloc>
   if (buf == NULL)
 800e344:	4605      	mov	r5, r0
 800e346:	b390      	cbz	r0, 800e3ae <wc_ecc_export_x963+0xfe>
   XMEMSET(buf, 0, ECC_BUFSIZE);
 800e348:	f240 1201 	movw	r2, #257	; 0x101
 800e34c:	2100      	movs	r1, #0
 800e34e:	f00f fb51 	bl	801d9f4 <memset>
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
 800e352:	eba7 0109 	sub.w	r1, r7, r9
 800e356:	4429      	add	r1, r5
 800e358:	4658      	mov	r0, fp
 800e35a:	f00e fdde 	bl	801cf1a <mp_to_unsigned_bin>
   if (ret != MP_OKAY)
 800e35e:	4681      	mov	r9, r0
 800e360:	b9d8      	cbnz	r0, 800e39a <wc_ecc_export_x963+0xea>
   XMEMCPY(out+1, buf, numlen);
 800e362:	463a      	mov	r2, r7
 800e364:	4629      	mov	r1, r5
 800e366:	f108 0001 	add.w	r0, r8, #1
 800e36a:	f00f fb1b 	bl	801d9a4 <memcpy>
   XMEMSET(buf, 0, ECC_BUFSIZE);
 800e36e:	4649      	mov	r1, r9
 800e370:	f240 1201 	movw	r2, #257	; 0x101
 800e374:	4628      	mov	r0, r5
 800e376:	f00f fb3d 	bl	801d9f4 <memset>
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
 800e37a:	9b01      	ldr	r3, [sp, #4]
 800e37c:	1af9      	subs	r1, r7, r3
 800e37e:	4429      	add	r1, r5
 800e380:	4620      	mov	r0, r4
 800e382:	f00e fdca 	bl	801cf1a <mp_to_unsigned_bin>
   if (ret != MP_OKAY)
 800e386:	4681      	mov	r9, r0
 800e388:	b938      	cbnz	r0, 800e39a <wc_ecc_export_x963+0xea>
   XMEMCPY(out+1+numlen, buf, numlen);
 800e38a:	1c78      	adds	r0, r7, #1
 800e38c:	463a      	mov	r2, r7
 800e38e:	4629      	mov	r1, r5
 800e390:	4440      	add	r0, r8
 800e392:	f00f fb07 	bl	801d9a4 <memcpy>
   *outLen = 1 + 2*numlen;
 800e396:	f8c6 a000 	str.w	sl, [r6]
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
 800e39a:	4628      	mov	r0, r5
 800e39c:	f00f faea 	bl	801d974 <free>
   return ret;
 800e3a0:	e798      	b.n	800e2d4 <wc_ecc_export_x963+0x24>
       return ECC_PRIVATEONLY_E;
 800e3a2:	f06f 09f5 	mvn.w	r9, #245	; 0xf5
 800e3a6:	e795      	b.n	800e2d4 <wc_ecc_export_x963+0x24>
      return ECC_BAD_ARG_E;
 800e3a8:	f06f 09a9 	mvn.w	r9, #169	; 0xa9
 800e3ac:	e792      	b.n	800e2d4 <wc_ecc_export_x963+0x24>
      return MEMORY_E;
 800e3ae:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 800e3b2:	e78f      	b.n	800e2d4 <wc_ecc_export_x963+0x24>

0800e3b4 <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	4615      	mov	r5, r2
 800e3be:	469a      	mov	sl, r3
    byte pointType;
#ifdef WOLFSSL_CRYPTOCELL
    const CRYS_ECPKI_Domain_t* pDomain;
    CRYS_ECPKI_BUILD_TempData_t tempBuff;
#endif
    if (in == NULL || key == NULL)
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d05c      	beq.n	800e480 <wc_ecc_import_x963_ex+0xcc>
 800e3c6:	2a00      	cmp	r2, #0
 800e3c8:	d05a      	beq.n	800e480 <wc_ecc_import_x963_ex+0xcc>
        return BAD_FUNC_ARG;

    /* must be odd */
    if ((inLen & 1) == 0) {
 800e3ca:	07cb      	lsls	r3, r1, #31
 800e3cc:	d55b      	bpl.n	800e486 <wc_ecc_import_x963_ex+0xd2>
    key->state = ECC_STATE_NONE;
 800e3ce:	2300      	movs	r3, #0
        alt_fp_init(key->pubkey.y);
        alt_fp_init(key->pubkey.z);
        key->k = (mp_int*)key->ka;
        alt_fp_init(key->k);
    #else
        err = mp_init_multi(key->k,
 800e3d0:	f502 7ba8 	add.w	fp, r2, #336	; 0x150
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
 800e3d4:	f102 0918 	add.w	r9, r2, #24
 800e3d8:	f102 07e8 	add.w	r7, r2, #232	; 0xe8
 800e3dc:	f102 0880 	add.w	r8, r2, #128	; 0x80
    key->state = ECC_STATE_NONE;
 800e3e0:	6093      	str	r3, [r2, #8]
        err = mp_init_multi(key->k,
 800e3e2:	4649      	mov	r1, r9
 800e3e4:	e9cd 3300 	strd	r3, r3, [sp]
 800e3e8:	4642      	mov	r2, r8
 800e3ea:	463b      	mov	r3, r7
 800e3ec:	4658      	mov	r0, fp
 800e3ee:	f00d fdec 	bl	801bfca <mp_init_multi>
    #endif
    if (err != MP_OKAY)
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d149      	bne.n	800e48c <wc_ecc_import_x963_ex+0xd8>
        return MEMORY_E;

    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    /* check for point type (4, 2, or 3) */
    pointType = in[0];
 800e3f8:	7832      	ldrb	r2, [r6, #0]
    if (pointType != ECC_POINT_UNCOMP && pointType != ECC_POINT_COMP_EVEN &&
 800e3fa:	2a04      	cmp	r2, #4
 800e3fc:	d005      	beq.n	800e40a <wc_ecc_import_x963_ex+0x56>
 800e3fe:	2a02      	cmp	r2, #2
 800e400:	d003      	beq.n	800e40a <wc_ecc_import_x963_ex+0x56>
                                         pointType != ECC_POINT_COMP_ODD) {
        err = ASN_PARSE_E;
 800e402:	2a03      	cmp	r2, #3
 800e404:	bf18      	it	ne
 800e406:	f06f 038b 	mvnne.w	r3, #139	; 0x8b
    }

    if (pointType == ECC_POINT_COMP_EVEN || pointType == ECC_POINT_COMP_ODD) {
 800e40a:	3a02      	subs	r2, #2
 800e40c:	2a01      	cmp	r2, #1
 800e40e:	d934      	bls.n	800e47a <wc_ecc_import_x963_ex+0xc6>
    }
#elif defined(WOLFSSL_KCAPI_ECC)
    XMEMCPY(key->pubkey_raw, (byte*)in, inLen);
#endif

    if (err == MP_OKAY) {
 800e410:	bb0b      	cbnz	r3, 800e456 <wc_ecc_import_x963_ex+0xa2>
    inLen -= 1;
 800e412:	3c01      	subs	r4, #1
        if (compressed)
            inLen = inLen*2 + 1;  /* used uncompressed len */
    #endif

        /* determine key size */
        keysize = (int)(inLen>>1);
 800e414:	0864      	lsrs	r4, r4, #1
        err = wc_ecc_set_curve(key, keysize, curve_id);
 800e416:	4652      	mov	r2, sl
 800e418:	4621      	mov	r1, r4
 800e41a:	4628      	mov	r0, r5
 800e41c:	f7fe fa92 	bl	800c944 <wc_ecc_set_curve>
        key->type = ECC_PUBLICKEY;
 800e420:	f04f 0a01 	mov.w	sl, #1
 800e424:	f8c5 a000 	str.w	sl, [r5]
    }

    /* read data */
    if (err == MP_OKAY)
 800e428:	4603      	mov	r3, r0
 800e42a:	b9a0      	cbnz	r0, 800e456 <wc_ecc_import_x963_ex+0xa2>
    in += 1;
 800e42c:	4456      	add	r6, sl
        err = mp_read_unsigned_bin(key->pubkey.x, in, (word32)keysize);
 800e42e:	4622      	mov	r2, r4
 800e430:	4631      	mov	r1, r6
 800e432:	4648      	mov	r0, r9
 800e434:	f00d fdf8 	bl	801c028 <mp_read_unsigned_bin>
        }
#endif
    }
#endif /* HAVE_COMP_KEY */

    if (err == MP_OKAY) {
 800e438:	4603      	mov	r3, r0
 800e43a:	b960      	cbnz	r0, 800e456 <wc_ecc_import_x963_ex+0xa2>
    #ifdef HAVE_COMP_KEY
        if (compressed == 0)
    #endif
        {
            err = mp_read_unsigned_bin(key->pubkey.y, in + keysize,
 800e43c:	4622      	mov	r2, r4
 800e43e:	1931      	adds	r1, r6, r4
 800e440:	4640      	mov	r0, r8
 800e442:	f00d fdf1 	bl	801c028 <mp_read_unsigned_bin>
                (word32)keysize);
        }
    }
    if (err == MP_OKAY)
 800e446:	4603      	mov	r3, r0
 800e448:	b928      	cbnz	r0, 800e456 <wc_ecc_import_x963_ex+0xa2>
        err = mp_set(key->pubkey.z, 1);
 800e44a:	4651      	mov	r1, sl
 800e44c:	4638      	mov	r0, r7
 800e44e:	f00e fe33 	bl	801d0b8 <mp_set>
    if (err == MP_OKAY) {
        err = wc_MAXQ10XX_EccSetKey(key, keysize);
    }
#endif

    if (err != MP_OKAY) {
 800e452:	4603      	mov	r3, r0
 800e454:	b168      	cbz	r0, 800e472 <wc_ecc_import_x963_ex+0xbe>
        mp_clear(key->pubkey.x);
 800e456:	4648      	mov	r0, r9
 800e458:	9303      	str	r3, [sp, #12]
 800e45a:	f00d fdb1 	bl	801bfc0 <mp_clear>
        mp_clear(key->pubkey.y);
 800e45e:	4640      	mov	r0, r8
 800e460:	f00d fdae 	bl	801bfc0 <mp_clear>
        mp_clear(key->pubkey.z);
 800e464:	4638      	mov	r0, r7
 800e466:	f00d fdab 	bl	801bfc0 <mp_clear>
        mp_clear(key->k);
 800e46a:	4658      	mov	r0, fp
 800e46c:	f00d fda8 	bl	801bfc0 <mp_clear>
 800e470:	9b03      	ldr	r3, [sp, #12]
    }

    RESTORE_VECTOR_REGISTERS();

    return err;
}
 800e472:	4618      	mov	r0, r3
 800e474:	b005      	add	sp, #20
 800e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = NOT_COMPILED_IN;
 800e47a:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 800e47e:	e7ea      	b.n	800e456 <wc_ecc_import_x963_ex+0xa2>
        return BAD_FUNC_ARG;
 800e480:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800e484:	e7f5      	b.n	800e472 <wc_ecc_import_x963_ex+0xbe>
        return ECC_BAD_ARG_E;
 800e486:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 800e48a:	e7f2      	b.n	800e472 <wc_ecc_import_x963_ex+0xbe>
        return MEMORY_E;
 800e48c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800e490:	e7ef      	b.n	800e472 <wc_ecc_import_x963_ex+0xbe>

0800e492 <wc_ecc_import_private_key_ex>:
#ifdef HAVE_ECC_KEY_IMPORT
/* import private key, public part optional if (pub) passed as NULL */
int wc_ecc_import_private_key_ex(const byte* priv, word32 privSz,
                                 const byte* pub, word32 pubSz, ecc_key* key,
                                 int curve_id)
{
 800e492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e496:	4698      	mov	r8, r3
 800e498:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
 800e49c:	4606      	mov	r6, r0
 800e49e:	460f      	mov	r7, r1
 800e4a0:	4615      	mov	r5, r2
    int ret;
#ifdef WOLFSSL_CRYPTOCELL
    const CRYS_ECPKI_Domain_t* pDomain;
#endif
    if (key == NULL || priv == NULL)
 800e4a2:	b31c      	cbz	r4, 800e4ec <wc_ecc_import_private_key_ex+0x5a>
 800e4a4:	b310      	cbz	r0, 800e4ec <wc_ecc_import_private_key_ex+0x5a>
        return BAD_FUNC_ARG;

    /* public optional, NULL if only importing private */
    if (pub != NULL) {
 800e4a6:	b1d2      	cbz	r2, 800e4de <wc_ecc_import_private_key_ex+0x4c>
    #ifndef NO_ASN
        word32 idx = 0;
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	9201      	str	r2, [sp, #4]
        ret = wc_ecc_import_x963_ex(pub, pubSz, key, curve_id);
 800e4ac:	4641      	mov	r1, r8
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f7ff ff7f 	bl	800e3b4 <wc_ecc_import_x963_ex>
        if (ret < 0)
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	da05      	bge.n	800e4c6 <wc_ecc_import_private_key_ex+0x34>
            ret = wc_EccPublicKeyDecode(pub, &idx, key, pubSz);
 800e4ba:	4643      	mov	r3, r8
 800e4bc:	4622      	mov	r2, r4
 800e4be:	a901      	add	r1, sp, #4
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f005 fed2 	bl	801426a <wc_EccPublicKeyDecode>
        key->type = ECC_PRIVATEKEY;
 800e4c6:	2302      	movs	r3, #2
        /* make sure required variables are reset */
        wc_ecc_reset(key);

        /* set key size */
        ret = wc_ecc_set_curve(key, (int)privSz, curve_id);
        key->type = ECC_PRIVATEKEY_ONLY;
 800e4c8:	6023      	str	r3, [r4, #0]
    }

    if (ret != 0)
 800e4ca:	b988      	cbnz	r0, 800e4f0 <wc_ecc_import_private_key_ex+0x5e>

#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    SAVE_VECTOR_REGISTERS(return _svr_ret;);
#endif

    ret = mp_read_unsigned_bin(key->k, priv, privSz);
 800e4cc:	463a      	mov	r2, r7
 800e4ce:	4631      	mov	r1, r6
 800e4d0:	f504 70a8 	add.w	r0, r4, #336	; 0x150
        ret = silabs_ecc_import(key, key->dp->size, (pub != NULL), 1);
    }
#endif

    return ret;
}
 800e4d4:	b002      	add	sp, #8
 800e4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ret = mp_read_unsigned_bin(key->k, priv, privSz);
 800e4da:	f00d bda5 	b.w	801c028 <mp_read_unsigned_bin>
    key->state = ECC_STATE_NONE;
 800e4de:	60a2      	str	r2, [r4, #8]
        ret = wc_ecc_set_curve(key, (int)privSz, curve_id);
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f7fe fa2e 	bl	800c944 <wc_ecc_set_curve>
        key->type = ECC_PRIVATEKEY_ONLY;
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	e7ed      	b.n	800e4c8 <wc_ecc_import_private_key_ex+0x36>
        return BAD_FUNC_ARG;
 800e4ec:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800e4f0:	b002      	add	sp, #8
 800e4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e4f6 <wc_ecc_size>:

/* key size in octets */
WOLFSSL_ABI
int wc_ecc_size(ecc_key* key)
{
    if (key == NULL || key->dp == NULL)
 800e4f6:	b110      	cbz	r0, 800e4fe <wc_ecc_size+0x8>
 800e4f8:	6900      	ldr	r0, [r0, #16]
 800e4fa:	b100      	cbz	r0, 800e4fe <wc_ecc_size+0x8>
        return 0;

    return key->dp->size;
 800e4fc:	6800      	ldr	r0, [r0, #0]
}
 800e4fe:	4770      	bx	lr

0800e500 <wc_ecc_sig_size>:
}

/* maximum signature size based on actual key curve */
WOLFSSL_ABI
int wc_ecc_sig_size(const ecc_key* key)
{
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	b08c      	sub	sp, #48	; 0x30
    int maxSigSz;
    int orderBits, keySz;

    if (key == NULL || key->dp == NULL)
 800e504:	2800      	cmp	r0, #0
 800e506:	d03a      	beq.n	800e57e <wc_ecc_sig_size+0x7e>
 800e508:	6904      	ldr	r4, [r0, #16]
 800e50a:	2c00      	cmp	r4, #0
 800e50c:	d039      	beq.n	800e582 <wc_ecc_sig_size+0x82>
    DECLARE_CURVE_SPECS(1);
 800e50e:	a802      	add	r0, sp, #8
 800e510:	2228      	movs	r2, #40	; 0x28
 800e512:	2100      	movs	r1, #0
        return 0;

    /* the signature r and s will always be less than order */
    /* if the order MSB (top bit of byte) is set then ASN encoding needs
        extra byte for r and s, so add 2 */
    keySz = key->dp->size;
 800e514:	6826      	ldr	r6, [r4, #0]
    DECLARE_CURVE_SPECS(1);
 800e516:	9001      	str	r0, [sp, #4]
 800e518:	f00f fa6c 	bl	801d9f4 <memset>
 800e51c:	9b01      	ldr	r3, [sp, #4]
 800e51e:	2201      	movs	r2, #1
 800e520:	61da      	str	r2, [r3, #28]
    ALLOC_CURVE_SPECS(1, err);
 800e522:	2068      	movs	r0, #104	; 0x68
 800e524:	f00f fa1e 	bl	801d964 <malloc>
 800e528:	4605      	mov	r5, r0
 800e52a:	b1a0      	cbz	r0, 800e556 <wc_ecc_sig_size+0x56>
 800e52c:	9b01      	ldr	r3, [sp, #4]
        err = wc_ecc_curve_load(dp, &curve, ECC_CURVE_FIELD_ORDER);
 800e52e:	2208      	movs	r2, #8
    ALLOC_CURVE_SPECS(1, err);
 800e530:	6198      	str	r0, [r3, #24]
        err = wc_ecc_curve_load(dp, &curve, ECC_CURVE_FIELD_ORDER);
 800e532:	a901      	add	r1, sp, #4
 800e534:	4620      	mov	r0, r4
 800e536:	f7fe f9b4 	bl	800c8a2 <wc_ecc_curve_load>
    if (err != 0) {
 800e53a:	4604      	mov	r4, r0
 800e53c:	b938      	cbnz	r0, 800e54e <wc_ecc_sig_size+0x4e>
    orderBits = mp_count_bits(curve->order);
 800e53e:	9b01      	ldr	r3, [sp, #4]
 800e540:	68d8      	ldr	r0, [r3, #12]
 800e542:	f00e fcf6 	bl	801cf32 <mp_count_bits>
 800e546:	4604      	mov	r4, r0
    wc_ecc_curve_free(curve);
 800e548:	9801      	ldr	r0, [sp, #4]
 800e54a:	f7fe f962 	bl	800c812 <wc_ecc_curve_free>
       FREE_CURVE_SPECS();
 800e54e:	4628      	mov	r0, r5
 800e550:	f00f fa10 	bl	801d974 <free>
 800e554:	e001      	b.n	800e55a <wc_ecc_sig_size+0x5a>
    ALLOC_CURVE_SPECS(1, err);
 800e556:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    orderBits = wc_ecc_get_curve_order_bit_count(key->dp);
    if (orderBits > keySz * 8) {
 800e55a:	ebb4 0fc6 	cmp.w	r4, r6, lsl #3
 800e55e:	dd04      	ble.n	800e56a <wc_ecc_sig_size+0x6a>
        keySz = (orderBits + 7) / 8;
 800e560:	1de3      	adds	r3, r4, #7
 800e562:	bf48      	it	mi
 800e564:	f104 030e 	addmi.w	r3, r4, #14
 800e568:	10de      	asrs	r6, r3, #3
    }
    /* maximum possible signature header size is 7 bytes */
    maxSigSz = (keySz * 2) + SIG_HEADER_SZ;
    if ((orderBits % 8) == 0) {
 800e56a:	0762      	lsls	r2, r4, #29
    maxSigSz = (keySz * 2) + SIG_HEADER_SZ;
 800e56c:	ea4f 0346 	mov.w	r3, r6, lsl #1
 800e570:	bf14      	ite	ne
 800e572:	1dd8      	addne	r0, r3, #7
        /* MSB can be set, so add 2 */
        maxSigSz += ECC_MAX_PAD_SZ;
 800e574:	f103 0009 	addeq.w	r0, r3, #9
    }
    /* if total length is less than 128 + SEQ(1)+LEN(1) then subtract 1 */
    if (maxSigSz < (128 + 2)) {
 800e578:	2881      	cmp	r0, #129	; 0x81
 800e57a:	dc00      	bgt.n	800e57e <wc_ecc_sig_size+0x7e>
        maxSigSz -= 1;
 800e57c:	3801      	subs	r0, #1
    }

    return maxSigSz;
}
 800e57e:	b00c      	add	sp, #48	; 0x30
 800e580:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 800e582:	4620      	mov	r0, r4
 800e584:	e7fb      	b.n	800e57e <wc_ecc_sig_size+0x7e>

0800e586 <wc_ecc_set_rng>:
int wc_ecc_set_rng(ecc_key* key, WC_RNG* rng)
{
    int err = 0;

#ifdef ECC_TIMING_RESISTANT
    if (key == NULL) {
 800e586:	b118      	cbz	r0, 800e590 <wc_ecc_set_rng+0xa>
        err = BAD_FUNC_ARG;
    }
    else {
        key->rng = rng;
 800e588:	f8c0 11b8 	str.w	r1, [r0, #440]	; 0x1b8
    int err = 0;
 800e58c:	2000      	movs	r0, #0
 800e58e:	4770      	bx	lr
        err = BAD_FUNC_ARG;
 800e590:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    (void)rng;
    /* report success, not an error if ECC_TIMING_RESISTANT is not defined */
#endif

    return err;
}
 800e594:	4770      	bx	lr
	...

0800e598 <wc_ecc_get_oid>:

int wc_ecc_get_oid(word32 oidSum, const byte** oid, word32* oidSz)
{
    int x;

    if (oidSum == 0) {
 800e598:	b158      	cbz	r0, 800e5b2 <wc_ecc_get_oid+0x1a>
        return BAD_FUNC_ARG;
    }

    /* find matching OID sum (based on encoded value) */
    for (x = 0; ecc_sets[x].size != 0; x++) {
        if (ecc_sets[x].oidSum == oidSum) {
 800e59a:	f240 230e 	movw	r3, #526	; 0x20e
 800e59e:	4298      	cmp	r0, r3
 800e5a0:	d10a      	bne.n	800e5b8 <wc_ecc_get_oid+0x20>
            /* on success return curve id */
            if (ret == 0) {
                ret = ecc_sets[x].id;
            }
        #else
            if (oidSz) {
 800e5a2:	b10a      	cbz	r2, 800e5a8 <wc_ecc_get_oid+0x10>
                *oidSz = ecc_sets[x].oidSz;
 800e5a4:	2308      	movs	r3, #8
 800e5a6:	6013      	str	r3, [r2, #0]
            }
            if (oid) {
 800e5a8:	b109      	cbz	r1, 800e5ae <wc_ecc_get_oid+0x16>
                *oid = ecc_sets[x].oid;
 800e5aa:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <wc_ecc_get_oid+0x28>)
 800e5ac:	600b      	str	r3, [r1, #0]
            }
            ret = ecc_sets[x].id;
        #endif
            return ret;
 800e5ae:	2007      	movs	r0, #7
        }
    }

    return NOT_COMPILED_IN;
}
 800e5b0:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800e5b2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800e5b6:	4770      	bx	lr
    return NOT_COMPILED_IN;
 800e5b8:	f06f 00ad 	mvn.w	r0, #173	; 0xad
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	0802277a 	.word	0x0802277a

0800e5c4 <HmacKeyInnerHash>:
#endif /* WOLFSSL_MAXQ108X */
}


static int HmacKeyInnerHash(Hmac* hmac)
{
 800e5c4:	b510      	push	{r4, lr}
    int ret = 0;

    switch (hmac->macType) {
 800e5c6:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 800e5ca:	2b06      	cmp	r3, #6
{
 800e5cc:	4604      	mov	r4, r0
    switch (hmac->macType) {
 800e5ce:	d00e      	beq.n	800e5ee <HmacKeyInnerHash+0x2a>
 800e5d0:	2b08      	cmp	r3, #8
 800e5d2:	d012      	beq.n	800e5fa <HmacKeyInnerHash+0x36>
 800e5d4:	2b04      	cmp	r3, #4
 800e5d6:	d105      	bne.n	800e5e4 <HmacKeyInnerHash+0x20>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
 800e5d8:	2240      	movs	r2, #64	; 0x40
 800e5da:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800e5de:	f001 f9dd 	bl	800f99c <wc_ShaUpdate>

        default:
            break;
    }

    if (ret == 0)
 800e5e2:	b918      	cbnz	r0, 800e5ec <HmacKeyInnerHash+0x28>
        hmac->innerHashKeyed = WC_HMAC_INNER_HASH_KEYED_SW;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
 800e5ea:	2000      	movs	r0, #0

    return ret;
}
 800e5ec:	bd10      	pop	{r4, pc}
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
 800e5ee:	2240      	movs	r2, #64	; 0x40
 800e5f0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800e5f4:	f001 fcd8 	bl	800ffa8 <wc_Sha256Update>
            break;
 800e5f8:	e7f3      	b.n	800e5e2 <HmacKeyInnerHash+0x1e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
 800e5fa:	2280      	movs	r2, #128	; 0x80
 800e5fc:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800e600:	f003 ffcc 	bl	801259c <wc_Sha512Update>
            break;
 800e604:	e7ed      	b.n	800e5e2 <HmacKeyInnerHash+0x1e>

0800e606 <_InitHmac>:
    switch (type) {
 800e606:	2906      	cmp	r1, #6
{
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	4605      	mov	r5, r0
 800e60c:	4614      	mov	r4, r2
    switch (type) {
 800e60e:	d00b      	beq.n	800e628 <_InitHmac+0x22>
 800e610:	2908      	cmp	r1, #8
 800e612:	d00f      	beq.n	800e634 <_InitHmac+0x2e>
 800e614:	2904      	cmp	r1, #4
 800e616:	d113      	bne.n	800e640 <_InitHmac+0x3a>
            ret = wc_InitSha_ex(&hmac->hash.sha, heap, devId);
 800e618:	f06f 0201 	mvn.w	r2, #1
 800e61c:	4621      	mov	r1, r4
 800e61e:	f001 f99d 	bl	800f95c <wc_InitSha_ex>
    hmac->heap = heap;
 800e622:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
}
 800e626:	bd38      	pop	{r3, r4, r5, pc}
            ret = wc_InitSha256_ex(&hmac->hash.sha256, heap, devId);
 800e628:	f06f 0201 	mvn.w	r2, #1
 800e62c:	4621      	mov	r1, r4
 800e62e:	f001 fc87 	bl	800ff40 <wc_InitSha256_ex>
            break;
 800e632:	e7f6      	b.n	800e622 <_InitHmac+0x1c>
            ret = wc_InitSha512_ex(&hmac->hash.sha512, heap, devId);
 800e634:	f06f 0201 	mvn.w	r2, #1
 800e638:	4621      	mov	r1, r4
 800e63a:	f003 ff97 	bl	801256c <wc_InitSha512_ex>
            break;
 800e63e:	e7f0      	b.n	800e622 <_InitHmac+0x1c>
    switch (type) {
 800e640:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800e644:	e7ed      	b.n	800e622 <_InitHmac+0x1c>

0800e646 <wc_HmacUpdate>:


int wc_HmacUpdate(Hmac* hmac, const byte* msg, word32 length)
{
 800e646:	b570      	push	{r4, r5, r6, lr}
 800e648:	460d      	mov	r5, r1
 800e64a:	4616      	mov	r6, r2
    int ret = 0;

    if (hmac == NULL || (msg == NULL && length > 0)) {
 800e64c:	4604      	mov	r4, r0
 800e64e:	b348      	cbz	r0, 800e6a4 <wc_HmacUpdate+0x5e>
 800e650:	b901      	cbnz	r1, 800e654 <wc_HmacUpdate+0xe>
 800e652:	bb3a      	cbnz	r2, 800e6a4 <wc_HmacUpdate+0x5e>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 800e654:	f894 3225 	ldrb.w	r3, [r4, #549]	; 0x225
 800e658:	b14b      	cbz	r3, 800e66e <wc_HmacUpdate+0x28>
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
 800e65a:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800e65e:	2b06      	cmp	r3, #6
 800e660:	d012      	beq.n	800e688 <wc_HmacUpdate+0x42>
 800e662:	2b08      	cmp	r3, #8
 800e664:	d017      	beq.n	800e696 <wc_HmacUpdate+0x50>
 800e666:	2b04      	cmp	r3, #4
 800e668:	d007      	beq.n	800e67a <wc_HmacUpdate+0x34>
 800e66a:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
        ret = HmacKeyInnerHash(hmac);
 800e66e:	4620      	mov	r0, r4
 800e670:	f7ff ffa8 	bl	800e5c4 <HmacKeyInnerHash>
        if (ret != 0)
 800e674:	2800      	cmp	r0, #0
 800e676:	d0f0      	beq.n	800e65a <wc_HmacUpdate+0x14>
 800e678:	e7f8      	b.n	800e66c <wc_HmacUpdate+0x26>
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 800e67a:	4632      	mov	r2, r6
 800e67c:	4629      	mov	r1, r5
 800e67e:	4620      	mov	r0, r4
}
 800e680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 800e684:	f001 b98a 	b.w	800f99c <wc_ShaUpdate>
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 800e688:	4632      	mov	r2, r6
 800e68a:	4629      	mov	r1, r5
 800e68c:	4620      	mov	r0, r4
}
 800e68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 800e692:	f001 bc89 	b.w	800ffa8 <wc_Sha256Update>
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 800e696:	4632      	mov	r2, r6
 800e698:	4629      	mov	r1, r5
 800e69a:	4620      	mov	r0, r4
}
 800e69c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 800e6a0:	f003 bf7c 	b.w	801259c <wc_Sha512Update>
        return BAD_FUNC_ARG;
 800e6a4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800e6a8:	e7e0      	b.n	800e66c <wc_HmacUpdate+0x26>

0800e6aa <wc_HmacFinal>:


int wc_HmacFinal(Hmac* hmac, byte* hash)
{
 800e6aa:	b570      	push	{r4, r5, r6, lr}
 800e6ac:	460d      	mov	r5, r1
    int ret;

    if (hmac == NULL || hash == NULL) {
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	b158      	cbz	r0, 800e6ca <wc_HmacFinal+0x20>
 800e6b2:	b151      	cbz	r1, 800e6ca <wc_HmacFinal+0x20>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 800e6b4:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
 800e6b8:	b153      	cbz	r3, 800e6d0 <wc_HmacFinal+0x26>
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
 800e6ba:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800e6be:	2b06      	cmp	r3, #6
 800e6c0:	d02b      	beq.n	800e71a <wc_HmacFinal+0x70>
 800e6c2:	2b08      	cmp	r3, #8
 800e6c4:	d045      	beq.n	800e752 <wc_HmacFinal+0xa8>
 800e6c6:	2b04      	cmp	r3, #4
 800e6c8:	d007      	beq.n	800e6da <wc_HmacFinal+0x30>
        return BAD_FUNC_ARG;
 800e6ca:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800e6ce:	e003      	b.n	800e6d8 <wc_HmacFinal+0x2e>
        ret = HmacKeyInnerHash(hmac);
 800e6d0:	f7ff ff78 	bl	800e5c4 <HmacKeyInnerHash>
        if (ret != 0)
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d0f0      	beq.n	800e6ba <wc_HmacFinal+0x10>
    if (ret == 0) {
        hmac->innerHashKeyed = 0;
    }

    return ret;
}
 800e6d8:	bd70      	pop	{r4, r5, r6, pc}
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
 800e6da:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f001 f9d9 	bl	800fa98 <wc_ShaFinal>
            if (ret != 0)
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d1f6      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
 800e6ea:	2240      	movs	r2, #64	; 0x40
 800e6ec:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	f001 f953 	bl	800f99c <wc_ShaUpdate>
            if (ret != 0)
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d1ee      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
 800e6fa:	2214      	movs	r2, #20
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4620      	mov	r0, r4
 800e700:	f001 f94c 	bl	800f99c <wc_ShaUpdate>
            if (ret != 0)
 800e704:	2800      	cmp	r0, #0
 800e706:	d1e7      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
 800e708:	4629      	mov	r1, r5
 800e70a:	4620      	mov	r0, r4
 800e70c:	f001 f9c4 	bl	800fa98 <wc_ShaFinal>
    if (ret == 0) {
 800e710:	2800      	cmp	r0, #0
 800e712:	d1e1      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
        hmac->innerHashKeyed = 0;
 800e714:	f884 0225 	strb.w	r0, [r4, #549]	; 0x225
 800e718:	e7de      	b.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
 800e71a:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 800e71e:	4631      	mov	r1, r6
 800e720:	4620      	mov	r0, r4
 800e722:	f001 fcad 	bl	8010080 <wc_Sha256Final>
            if (ret != 0)
 800e726:	2800      	cmp	r0, #0
 800e728:	d1d6      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
 800e72a:	2240      	movs	r2, #64	; 0x40
 800e72c:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800e730:	4620      	mov	r0, r4
 800e732:	f001 fc39 	bl	800ffa8 <wc_Sha256Update>
            if (ret != 0)
 800e736:	2800      	cmp	r0, #0
 800e738:	d1ce      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
 800e73a:	2220      	movs	r2, #32
 800e73c:	4631      	mov	r1, r6
 800e73e:	4620      	mov	r0, r4
 800e740:	f001 fc32 	bl	800ffa8 <wc_Sha256Update>
            if (ret != 0)
 800e744:	2800      	cmp	r0, #0
 800e746:	d1c7      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
 800e748:	4629      	mov	r1, r5
 800e74a:	4620      	mov	r0, r4
 800e74c:	f001 fc98 	bl	8010080 <wc_Sha256Final>
            break;
 800e750:	e7de      	b.n	800e710 <wc_HmacFinal+0x66>
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
 800e752:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 800e756:	4631      	mov	r1, r6
 800e758:	4620      	mov	r0, r4
 800e75a:	f003 fef5 	bl	8012548 <wc_Sha512Final>
            if (ret != 0)
 800e75e:	2800      	cmp	r0, #0
 800e760:	d1ba      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
 800e762:	2280      	movs	r2, #128	; 0x80
 800e764:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800e768:	4620      	mov	r0, r4
 800e76a:	f003 ff17 	bl	801259c <wc_Sha512Update>
            if (ret != 0)
 800e76e:	2800      	cmp	r0, #0
 800e770:	d1b2      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
 800e772:	2240      	movs	r2, #64	; 0x40
 800e774:	4631      	mov	r1, r6
 800e776:	4620      	mov	r0, r4
 800e778:	f003 ff10 	bl	801259c <wc_Sha512Update>
            if (ret != 0)
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d1ab      	bne.n	800e6d8 <wc_HmacFinal+0x2e>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
 800e780:	4629      	mov	r1, r5
 800e782:	4620      	mov	r0, r4
 800e784:	f003 fee0 	bl	8012548 <wc_Sha512Final>
            break;
 800e788:	e7c2      	b.n	800e710 <wc_HmacFinal+0x66>

0800e78a <wc_HmacInit>:
    #undef wc_HmacFinal

#else
/* Initialize Hmac for use with async device */
int wc_HmacInit(Hmac* hmac, void* heap, int devId)
{
 800e78a:	b538      	push	{r3, r4, r5, lr}
 800e78c:	460d      	mov	r5, r1
    int ret = 0;

    if (hmac == NULL)
 800e78e:	4604      	mov	r4, r0
 800e790:	b150      	cbz	r0, 800e7a8 <wc_HmacInit+0x1e>
        return BAD_FUNC_ARG;

    XMEMSET(hmac, 0, sizeof(Hmac));
 800e792:	f44f 720a 	mov.w	r2, #552	; 0x228
 800e796:	2100      	movs	r1, #0
 800e798:	f00f f92c 	bl	801d9f4 <memset>
    hmac->macType = WC_HASH_TYPE_NONE;
 800e79c:	2000      	movs	r0, #0
 800e79e:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
    hmac->heap = heap;
 800e7a2:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
 800e7a6:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 800e7a8:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800e7ac:	e7fb      	b.n	800e7a6 <wc_HmacInit+0x1c>

0800e7ae <wc_HmacFree>:
}
#endif /* WOLF_PRIVATE_KEY_ID */

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
 800e7ae:	b510      	push	{r4, lr}
    if (hmac == NULL)
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	b170      	cbz	r0, 800e7d2 <wc_HmacFree+0x24>

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
    wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (hmac->macType) {
 800e7b4:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 800e7b8:	2b06      	cmp	r3, #6
 800e7ba:	d00b      	beq.n	800e7d4 <wc_HmacFree+0x26>
 800e7bc:	2b08      	cmp	r3, #8
 800e7be:	d00c      	beq.n	800e7da <wc_HmacFree+0x2c>
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	d101      	bne.n	800e7c8 <wc_HmacFree+0x1a>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            wc_ShaFree(&hmac->hash.sha);
 800e7c4:	f001 f9e0 	bl	800fb88 <wc_ShaFree>
            break;
 800e7c8:	f504 730a 	add.w	r3, r4, #552	; 0x228
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	429c      	cmp	r4, r3
 800e7d0:	d106      	bne.n	800e7e0 <wc_HmacFree+0x32>
        default:
            break;
    }

    ForceZero(hmac, sizeof(*hmac));
}
 800e7d2:	bd10      	pop	{r4, pc}
            wc_Sha256Free(&hmac->hash.sha256);
 800e7d4:	f001 fcde 	bl	8010194 <wc_Sha256Free>
            break;
 800e7d8:	e7f6      	b.n	800e7c8 <wc_HmacFree+0x1a>
            wc_Sha512Free(&hmac->hash.sha512);
 800e7da:	f003 ff51 	bl	8012680 <wc_Sha512Free>
            break;
 800e7de:	e7f3      	b.n	800e7c8 <wc_HmacFree+0x1a>
 800e7e0:	f804 2b01 	strb.w	r2, [r4], #1
 800e7e4:	e7f3      	b.n	800e7ce <wc_HmacFree+0x20>

0800e7e6 <wc_HmacSetKey>:
{
 800e7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ea:	460f      	mov	r7, r1
 800e7ec:	4616      	mov	r6, r2
 800e7ee:	461d      	mov	r5, r3
    if (hmac == NULL || (key == NULL && length != 0) ||
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d07c      	beq.n	800e8f0 <wc_HmacSetKey+0x10a>
 800e7f6:	b90a      	cbnz	r2, 800e7fc <wc_HmacSetKey+0x16>
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d179      	bne.n	800e8f0 <wc_HmacSetKey+0x10a>
            type == WC_SHA384 || type == WC_SHA512 ||
 800e7fc:	1efb      	subs	r3, r7, #3
    if (hmac == NULL || (key == NULL && length != 0) ||
 800e7fe:	2b05      	cmp	r3, #5
 800e800:	d903      	bls.n	800e80a <wc_HmacSetKey+0x24>
            type == WC_SHA384 || type == WC_SHA512 ||
 800e802:	f1a7 030a 	sub.w	r3, r7, #10
 800e806:	2b03      	cmp	r3, #3
 800e808:	d872      	bhi.n	800e8f0 <wc_HmacSetKey+0x10a>
    if (hmac->macType != WC_HASH_TYPE_NONE) {
 800e80a:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800e80e:	b113      	cbz	r3, 800e816 <wc_HmacSetKey+0x30>
        wc_HmacFree(hmac);
 800e810:	4620      	mov	r0, r4
 800e812:	f7ff ffcc 	bl	800e7ae <wc_HmacFree>
    hmac->innerHashKeyed = 0;
 800e816:	2200      	movs	r2, #0
 800e818:	f884 2225 	strb.w	r2, [r4, #549]	; 0x225
    hmac->macType = (byte)type;
 800e81c:	f884 7224 	strb.w	r7, [r4, #548]	; 0x224
    ret = _InitHmac(hmac, type, heap);
 800e820:	4639      	mov	r1, r7
 800e822:	4620      	mov	r0, r4
 800e824:	f7ff feef 	bl	800e606 <_InitHmac>
    if (ret != 0)
 800e828:	4680      	mov	r8, r0
 800e82a:	bbb0      	cbnz	r0, 800e89a <wc_HmacSetKey+0xb4>
    switch (hmac->macType) {
 800e82c:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800e830:	2b06      	cmp	r3, #6
    ip = (byte*)hmac->ipad;
 800e832:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
    switch (hmac->macType) {
 800e836:	d033      	beq.n	800e8a0 <wc_HmacSetKey+0xba>
 800e838:	2b08      	cmp	r3, #8
 800e83a:	d041      	beq.n	800e8c0 <wc_HmacSetKey+0xda>
 800e83c:	2b04      	cmp	r3, #4
 800e83e:	d157      	bne.n	800e8f0 <wc_HmacSetKey+0x10a>
            if (length <= WC_SHA_BLOCK_SIZE) {
 800e840:	2d40      	cmp	r5, #64	; 0x40
 800e842:	d809      	bhi.n	800e858 <wc_HmacSetKey+0x72>
                if (key != NULL) {
 800e844:	b126      	cbz	r6, 800e850 <wc_HmacSetKey+0x6a>
                    XMEMCPY(ip, key, length);
 800e846:	462a      	mov	r2, r5
 800e848:	4631      	mov	r1, r6
 800e84a:	4638      	mov	r0, r7
 800e84c:	f00f f8aa 	bl	801d9a4 <memcpy>
            hmac_block_size = WC_SHA_BLOCK_SIZE;
 800e850:	2640      	movs	r6, #64	; 0x40
        if (length < hmac_block_size)
 800e852:	42b5      	cmp	r5, r6
 800e854:	d214      	bcs.n	800e880 <wc_HmacSetKey+0x9a>
 800e856:	e00e      	b.n	800e876 <wc_HmacSetKey+0x90>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
 800e858:	462a      	mov	r2, r5
 800e85a:	4631      	mov	r1, r6
 800e85c:	4620      	mov	r0, r4
 800e85e:	f001 f89d 	bl	800f99c <wc_ShaUpdate>
                if (ret != 0)
 800e862:	2800      	cmp	r0, #0
 800e864:	d147      	bne.n	800e8f6 <wc_HmacSetKey+0x110>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
 800e866:	4639      	mov	r1, r7
 800e868:	4620      	mov	r0, r4
 800e86a:	f001 f915 	bl	800fa98 <wc_ShaFinal>
                if (ret != 0)
 800e86e:	2800      	cmp	r0, #0
 800e870:	d141      	bne.n	800e8f6 <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA_BLOCK_SIZE;
 800e872:	2640      	movs	r6, #64	; 0x40
                length = WC_SHA_DIGEST_SIZE;
 800e874:	2514      	movs	r5, #20
            XMEMSET(ip + length, 0, hmac_block_size - length);
 800e876:	1b72      	subs	r2, r6, r5
 800e878:	2100      	movs	r1, #0
 800e87a:	1978      	adds	r0, r7, r5
 800e87c:	f00f f8ba 	bl	801d9f4 <memset>
 800e880:	34df      	adds	r4, #223	; 0xdf
 800e882:	4426      	add	r6, r4
            op[i] = (byte)(ip[i] ^ OPAD);
 800e884:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e888:	f083 025c 	eor.w	r2, r3, #92	; 0x5c
        for(i = 0; i < hmac_block_size; i++) {
 800e88c:	42b4      	cmp	r4, r6
            ip[i] ^= IPAD;
 800e88e:	f083 0336 	eor.w	r3, r3, #54	; 0x36
            op[i] = (byte)(ip[i] ^ OPAD);
 800e892:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
            ip[i] ^= IPAD;
 800e896:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < hmac_block_size; i++) {
 800e898:	d1f4      	bne.n	800e884 <wc_HmacSetKey+0x9e>
}
 800e89a:	4640      	mov	r0, r8
 800e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (length <= WC_SHA256_BLOCK_SIZE) {
 800e8a0:	2d40      	cmp	r5, #64	; 0x40
 800e8a2:	d9cf      	bls.n	800e844 <wc_HmacSetKey+0x5e>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f001 fb7d 	bl	800ffa8 <wc_Sha256Update>
                if (ret != 0)
 800e8ae:	bb10      	cbnz	r0, 800e8f6 <wc_HmacSetKey+0x110>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
 800e8b0:	4639      	mov	r1, r7
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f001 fbe4 	bl	8010080 <wc_Sha256Final>
                if (ret != 0)
 800e8b8:	b9e8      	cbnz	r0, 800e8f6 <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA256_BLOCK_SIZE;
 800e8ba:	2640      	movs	r6, #64	; 0x40
                length = WC_SHA256_DIGEST_SIZE;
 800e8bc:	2520      	movs	r5, #32
 800e8be:	e7da      	b.n	800e876 <wc_HmacSetKey+0x90>
            if (length <= WC_SHA512_BLOCK_SIZE) {
 800e8c0:	2d80      	cmp	r5, #128	; 0x80
 800e8c2:	d807      	bhi.n	800e8d4 <wc_HmacSetKey+0xee>
                if (key != NULL) {
 800e8c4:	b126      	cbz	r6, 800e8d0 <wc_HmacSetKey+0xea>
                    XMEMCPY(ip, key, length);
 800e8c6:	462a      	mov	r2, r5
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	f00f f86a 	bl	801d9a4 <memcpy>
            hmac_block_size = WC_SHA512_BLOCK_SIZE;
 800e8d0:	2680      	movs	r6, #128	; 0x80
 800e8d2:	e7be      	b.n	800e852 <wc_HmacSetKey+0x6c>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	4631      	mov	r1, r6
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f003 fe5f 	bl	801259c <wc_Sha512Update>
                if (ret != 0)
 800e8de:	b950      	cbnz	r0, 800e8f6 <wc_HmacSetKey+0x110>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f003 fe30 	bl	8012548 <wc_Sha512Final>
                if (ret != 0)
 800e8e8:	b928      	cbnz	r0, 800e8f6 <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA512_BLOCK_SIZE;
 800e8ea:	2680      	movs	r6, #128	; 0x80
                length = WC_SHA512_DIGEST_SIZE;
 800e8ec:	2540      	movs	r5, #64	; 0x40
 800e8ee:	e7c2      	b.n	800e876 <wc_HmacSetKey+0x90>
    switch (hmac->macType) {
 800e8f0:	f06f 08ac 	mvn.w	r8, #172	; 0xac
 800e8f4:	e7d1      	b.n	800e89a <wc_HmacSetKey+0xb4>
    if (ret == 0) {
 800e8f6:	4680      	mov	r8, r0
 800e8f8:	e7cf      	b.n	800e89a <wc_HmacSetKey+0xb4>

0800e8fa <wc_PRF>:

/* Pseudo Random Function for MD5, SHA-1, SHA-256, SHA-384, or SHA-512 */
int wc_PRF(byte* result, word32 resLen, const byte* secret,
                  word32 secLen, const byte* seed, word32 seedLen, int hash,
                  void* heap, int devId)
{
 800e8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fe:	b085      	sub	sp, #20
 800e900:	4692      	mov	sl, r2
 800e902:	9302      	str	r3, [sp, #8]
 800e904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e906:	9003      	str	r0, [sp, #12]
    byte   previous[P_HASH_MAX_SIZE];  /* max size */
    byte   current[P_HASH_MAX_SIZE];   /* max size */
    Hmac   hmac[1];
#endif

    switch (hash) {
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d02d      	beq.n	800e968 <wc_PRF+0x6e>
 800e90c:	2b06      	cmp	r3, #6
 800e90e:	d02f      	beq.n	800e970 <wc_PRF+0x76>
 800e910:	2b02      	cmp	r3, #2
 800e912:	f040 80b9 	bne.w	800ea88 <wc_PRF+0x18e>
    #endif

    #ifndef NO_SHA
        case sha_mac:
            hash = WC_SHA;
            len  = WC_SHA_DIGEST_SIZE;
 800e916:	2714      	movs	r7, #20
            hash = WC_SHA;
 800e918:	f04f 0904 	mov.w	r9, #4
    #endif
        default:
            return HASH_TYPE_E;
    }

    times   = resLen / len;
 800e91c:	fbb1 f8f7 	udiv	r8, r1, r7
    lastLen = resLen % len;
 800e920:	fb07 1318 	mls	r3, r7, r8, r1
 800e924:	9301      	str	r3, [sp, #4]

    if (lastLen)
 800e926:	b33b      	cbz	r3, 800e978 <wc_PRF+0x7e>
        times += 1;
 800e928:	f108 0801 	add.w	r8, r8, #1
        return BAD_FUNC_ARG;

    lastTime = times - 1;

#ifdef WOLFSSL_SMALL_STACK
    previous = (byte*)XMALLOC(P_HASH_MAX_SIZE, heap, DYNAMIC_TYPE_DIGEST);
 800e92c:	2040      	movs	r0, #64	; 0x40
 800e92e:	f00f f819 	bl	801d964 <malloc>
 800e932:	4606      	mov	r6, r0
    current  = (byte*)XMALLOC(P_HASH_MAX_SIZE, heap, DYNAMIC_TYPE_DIGEST);
 800e934:	2040      	movs	r0, #64	; 0x40
 800e936:	f00f f815 	bl	801d964 <malloc>
 800e93a:	4605      	mov	r5, r0
    hmac     = (Hmac*)XMALLOC(sizeof(Hmac),    heap, DYNAMIC_TYPE_HMAC);
 800e93c:	f44f 700a 	mov.w	r0, #552	; 0x228
 800e940:	f00f f810 	bl	801d964 <malloc>
 800e944:	4604      	mov	r4, r0
    if (previous == NULL || current == NULL || hmac == NULL) {
 800e946:	b126      	cbz	r6, 800e952 <wc_PRF+0x58>
 800e948:	b105      	cbz	r5, 800e94c <wc_PRF+0x52>
 800e94a:	b9d0      	cbnz	r0, 800e982 <wc_PRF+0x88>
        if (previous) XFREE(previous, heap, DYNAMIC_TYPE_DIGEST);
 800e94c:	4630      	mov	r0, r6
 800e94e:	f00f f811 	bl	801d974 <free>
        if (current)  XFREE(current,  heap, DYNAMIC_TYPE_DIGEST);
 800e952:	b115      	cbz	r5, 800e95a <wc_PRF+0x60>
 800e954:	4628      	mov	r0, r5
 800e956:	f00f f80d 	bl	801d974 <free>
        if (hmac)     XFREE(hmac,     heap, DYNAMIC_TYPE_HMAC);
 800e95a:	b114      	cbz	r4, 800e962 <wc_PRF+0x68>
 800e95c:	4620      	mov	r0, r4
 800e95e:	f00f f809 	bl	801d974 <free>
        return MEMORY_E;
 800e962:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800e966:	e06f      	b.n	800ea48 <wc_PRF+0x14e>
            len  = WC_SHA256_DIGEST_SIZE;
 800e968:	2720      	movs	r7, #32
            hash = WC_SHA256;
 800e96a:	f04f 0906 	mov.w	r9, #6
 800e96e:	e7d5      	b.n	800e91c <wc_PRF+0x22>
    switch (hash) {
 800e970:	2740      	movs	r7, #64	; 0x40
 800e972:	f04f 0908 	mov.w	r9, #8
 800e976:	e7d1      	b.n	800e91c <wc_PRF+0x22>
    if (times == 0)
 800e978:	428f      	cmp	r7, r1
 800e97a:	d9d7      	bls.n	800e92c <wc_PRF+0x32>
        return BAD_FUNC_ARG;
 800e97c:	f06f 0bac 	mvn.w	fp, #172	; 0xac
 800e980:	e062      	b.n	800ea48 <wc_PRF+0x14e>
    wc_MemZero_Add("wc_PRF previous", previous, P_HASH_MAX_SIZE);
    wc_MemZero_Add("wc_PRF current", current, P_HASH_MAX_SIZE);
    wc_MemZero_Add("wc_PRF hmac", hmac, sizeof(Hmac));
#endif

    ret = wc_HmacInit(hmac, heap, devId);
 800e982:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800e986:	f7ff ff00 	bl	800e78a <wc_HmacInit>
    if (ret == 0) {
 800e98a:	4683      	mov	fp, r0
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d140      	bne.n	800ea12 <wc_PRF+0x118>
        ret = wc_HmacSetKey(hmac, hash, secret, secLen);
 800e990:	9b02      	ldr	r3, [sp, #8]
 800e992:	4652      	mov	r2, sl
 800e994:	4649      	mov	r1, r9
 800e996:	4620      	mov	r0, r4
 800e998:	f7ff ff25 	bl	800e7e6 <wc_HmacSetKey>
        if (ret == 0)
 800e99c:	4683      	mov	fp, r0
 800e99e:	bba8      	cbnz	r0, 800ea0c <wc_PRF+0x112>
            ret = wc_HmacUpdate(hmac, seed, seedLen); /* A0 = seed */
 800e9a0:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f7ff fe4e 	bl	800e646 <wc_HmacUpdate>
        if (ret == 0)
 800e9aa:	4683      	mov	fp, r0
 800e9ac:	bb70      	cbnz	r0, 800ea0c <wc_PRF+0x112>
            ret = wc_HmacFinal(hmac, previous);       /* A1 */
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f7ff fe7a 	bl	800e6aa <wc_HmacFinal>
        if (ret == 0) {
 800e9b6:	4683      	mov	fp, r0
 800e9b8:	bb40      	cbnz	r0, 800ea0c <wc_PRF+0x112>
    lastTime = times - 1;
 800e9ba:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800e9be:	9302      	str	r3, [sp, #8]
            word32 i;
            word32 idx = 0;
 800e9c0:	4682      	mov	sl, r0

            for (i = 0; i < times; i++) {
 800e9c2:	4681      	mov	r9, r0
                ret = wc_HmacUpdate(hmac, previous, len);
 800e9c4:	463a      	mov	r2, r7
 800e9c6:	4631      	mov	r1, r6
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f7ff fe3c 	bl	800e646 <wc_HmacUpdate>
                if (ret != 0)
 800e9ce:	4683      	mov	fp, r0
 800e9d0:	b9e0      	cbnz	r0, 800ea0c <wc_PRF+0x112>
                    break;
                ret = wc_HmacUpdate(hmac, seed, seedLen);
 800e9d2:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f7ff fe35 	bl	800e646 <wc_HmacUpdate>
                if (ret != 0)
 800e9dc:	4683      	mov	fp, r0
 800e9de:	b9a8      	cbnz	r0, 800ea0c <wc_PRF+0x112>
                    break;
                ret = wc_HmacFinal(hmac, current);
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f7ff fe61 	bl	800e6aa <wc_HmacFinal>
                if (ret != 0)
 800e9e8:	4683      	mov	fp, r0
 800e9ea:	b978      	cbnz	r0, 800ea0c <wc_PRF+0x112>
                    break;

                if ((i == lastTime) && lastLen)
                    XMEMCPY(&result[idx], current,
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	eb03 000a 	add.w	r0, r3, sl
                if ((i == lastTime) && lastLen)
 800e9f2:	9b02      	ldr	r3, [sp, #8]
 800e9f4:	454b      	cmp	r3, r9
 800e9f6:	d12b      	bne.n	800ea50 <wc_PRF+0x156>
 800e9f8:	9b01      	ldr	r3, [sp, #4]
 800e9fa:	b34b      	cbz	r3, 800ea50 <wc_PRF+0x156>
                    XMEMCPY(&result[idx], current,
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	4629      	mov	r1, r5
 800ea00:	f00e ffd0 	bl	801d9a4 <memcpy>
            for (i = 0; i < times; i++) {
 800ea04:	f109 0901 	add.w	r9, r9, #1
 800ea08:	45c1      	cmp	r9, r8
 800ea0a:	d3db      	bcc.n	800e9c4 <wc_PRF+0xca>
                    if (ret != 0)
                        break;
                }
            }
        }
        wc_HmacFree(hmac);
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f7ff fece 	bl	800e7ae <wc_HmacFree>
 800ea12:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800ea16:	4632      	mov	r2, r6
 800ea18:	2000      	movs	r0, #0
 800ea1a:	4291      	cmp	r1, r2
 800ea1c:	d12b      	bne.n	800ea76 <wc_PRF+0x17c>
 800ea1e:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800ea22:	462a      	mov	r2, r5
 800ea24:	2000      	movs	r0, #0
 800ea26:	428a      	cmp	r2, r1
 800ea28:	d128      	bne.n	800ea7c <wc_PRF+0x182>
 800ea2a:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800ea2e:	4622      	mov	r2, r4
 800ea30:	2000      	movs	r0, #0
 800ea32:	428a      	cmp	r2, r1
 800ea34:	d125      	bne.n	800ea82 <wc_PRF+0x188>
    wc_MemZero_Check(current,  P_HASH_MAX_SIZE);
    wc_MemZero_Check(hmac,     sizeof(Hmac));
#endif

#ifdef WOLFSSL_SMALL_STACK
    XFREE(previous, heap, DYNAMIC_TYPE_DIGEST);
 800ea36:	4630      	mov	r0, r6
 800ea38:	f00e ff9c 	bl	801d974 <free>
    XFREE(current,  heap, DYNAMIC_TYPE_DIGEST);
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f00e ff99 	bl	801d974 <free>
    XFREE(hmac,     heap, DYNAMIC_TYPE_HMAC);
 800ea42:	4620      	mov	r0, r4
 800ea44:	f00e ff96 	bl	801d974 <free>
#endif

    return ret;
}
 800ea48:	4658      	mov	r0, fp
 800ea4a:	b005      	add	sp, #20
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    XMEMCPY(&result[idx], current, len);
 800ea50:	463a      	mov	r2, r7
 800ea52:	4629      	mov	r1, r5
 800ea54:	f00e ffa6 	bl	801d9a4 <memcpy>
                    ret = wc_HmacUpdate(hmac, previous, len);
 800ea58:	463a      	mov	r2, r7
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4620      	mov	r0, r4
                    idx += len;
 800ea5e:	44ba      	add	sl, r7
                    ret = wc_HmacUpdate(hmac, previous, len);
 800ea60:	f7ff fdf1 	bl	800e646 <wc_HmacUpdate>
                    if (ret != 0)
 800ea64:	b928      	cbnz	r0, 800ea72 <wc_PRF+0x178>
                    ret = wc_HmacFinal(hmac, previous);
 800ea66:	4631      	mov	r1, r6
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f7ff fe1e 	bl	800e6aa <wc_HmacFinal>
                    if (ret != 0)
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d0c8      	beq.n	800ea04 <wc_PRF+0x10a>
 800ea72:	4683      	mov	fp, r0
 800ea74:	e7ca      	b.n	800ea0c <wc_PRF+0x112>
 800ea76:	f802 0b01 	strb.w	r0, [r2], #1
 800ea7a:	e7ce      	b.n	800ea1a <wc_PRF+0x120>
 800ea7c:	f802 0b01 	strb.w	r0, [r2], #1
 800ea80:	e7d1      	b.n	800ea26 <wc_PRF+0x12c>
 800ea82:	f802 0b01 	strb.w	r0, [r2], #1
 800ea86:	e7d4      	b.n	800ea32 <wc_PRF+0x138>
    switch (hash) {
 800ea88:	f06f 0be7 	mvn.w	fp, #231	; 0xe7
 800ea8c:	e7dc      	b.n	800ea48 <wc_PRF+0x14e>

0800ea8e <wc_PRF_TLS>:
/* Wrapper for TLS 1.2 and TLSv1 cases to calculate PRF */
/* In TLS 1.2 case call straight thru to wc_PRF */
int wc_PRF_TLS(byte* digest, word32 digLen, const byte* secret, word32 secLen,
            const byte* label, word32 labLen, const byte* seed, word32 seedLen,
            int useAtLeastSha256, int hash_type, void* heap, int devId)
{
 800ea8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea92:	b087      	sub	sp, #28
 800ea94:	4617      	mov	r7, r2
 800ea96:	e9dd 2b14 	ldrd	r2, fp, [sp, #80]	; 0x50
 800ea9a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	460e      	mov	r6, r1
 800eaa2:	4698      	mov	r8, r3
    int ret = 0;

    if (useAtLeastSha256) {
 800eaa4:	b3a2      	cbz	r2, 800eb10 <wc_PRF_TLS+0x82>
        byte* labelSeed;
    #else
        byte  labelSeed[MAX_PRF_LABSEED];
    #endif

        if (labLen + seedLen > MAX_PRF_LABSEED) {
 800eaa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eaa8:	eb09 0a03 	add.w	sl, r9, r3
 800eaac:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
 800eab0:	d831      	bhi.n	800eb16 <wc_PRF_TLS+0x88>
            return BUFFER_E;
        }

    #ifdef WOLFSSL_SMALL_STACK
        labelSeed = (byte*)XMALLOC(MAX_PRF_LABSEED, heap, DYNAMIC_TYPE_DIGEST);
 800eab2:	2080      	movs	r0, #128	; 0x80
 800eab4:	f00e ff56 	bl	801d964 <malloc>
        if (labelSeed == NULL) {
 800eab8:	4605      	mov	r5, r0
 800eaba:	b378      	cbz	r0, 800eb1c <wc_PRF_TLS+0x8e>
            return MEMORY_E;
        }
    #endif

        XMEMCPY(labelSeed, label, labLen);
 800eabc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eabe:	464a      	mov	r2, r9
 800eac0:	f00e ff70 	bl	801d9a4 <memcpy>
        XMEMCPY(labelSeed + labLen, seed, seedLen);
 800eac4:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 800eac8:	eb05 0009 	add.w	r0, r5, r9
 800eacc:	f00e ff6a 	bl	801d9a4 <memcpy>

        /* If a cipher suite wants an algorithm better than sha256, it
         * should use better. */
        if (hash_type < sha256_mac || hash_type == blake2b_mac) {
 800ead0:	f1bb 0f03 	cmp.w	fp, #3
 800ead4:	dd19      	ble.n	800eb0a <wc_PRF_TLS+0x7c>
            hash_type = sha256_mac;
 800ead6:	f1bb 0f08 	cmp.w	fp, #8
 800eada:	bf08      	it	eq
 800eadc:	f04f 0b04 	moveq.w	fp, #4
        }
        /* compute PRF for MD5, SHA-1, SHA-256, or SHA-384 for TLSv1.2 PRF */
        ret = wc_PRF(digest, digLen, secret, secLen, labelSeed,
 800eae0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eae2:	9204      	str	r2, [sp, #16]
 800eae4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eae6:	4620      	mov	r0, r4
 800eae8:	e9cd b202 	strd	fp, r2, [sp, #8]
 800eaec:	e9cd 5a00 	strd	r5, sl, [sp]
 800eaf0:	4643      	mov	r3, r8
 800eaf2:	463a      	mov	r2, r7
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	f7ff ff00 	bl	800e8fa <wc_PRF>
 800eafa:	4604      	mov	r4, r0
                     labLen + seedLen, hash_type, heap, devId);

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(labelSeed, heap, DYNAMIC_TYPE_DIGEST);
 800eafc:	4628      	mov	r0, r5
 800eafe:	f00e ff39 	bl	801d974 <free>
        ret = BAD_FUNC_ARG;
#endif
    }

    return ret;
}
 800eb02:	4620      	mov	r0, r4
 800eb04:	b007      	add	sp, #28
 800eb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            hash_type = sha256_mac;
 800eb0a:	f04f 0b04 	mov.w	fp, #4
 800eb0e:	e7e7      	b.n	800eae0 <wc_PRF_TLS+0x52>
        ret = BAD_FUNC_ARG;
 800eb10:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800eb14:	e7f5      	b.n	800eb02 <wc_PRF_TLS+0x74>
            return BUFFER_E;
 800eb16:	f06f 0483 	mvn.w	r4, #131	; 0x83
 800eb1a:	e7f2      	b.n	800eb02 <wc_PRF_TLS+0x74>
            return MEMORY_E;
 800eb1c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800eb20:	e7ef      	b.n	800eb02 <wc_PRF_TLS+0x74>

0800eb22 <wc_InitRng_ex>:
#endif

    (void)nonce;
    (void)nonceSz;

    if (rng == NULL)
 800eb22:	b110      	cbz	r0, 800eb2a <wc_InitRng_ex+0x8>

#ifdef WOLFSSL_HEAP_TEST
    rng->heap = (void*)WOLFSSL_HEAP_TEST;
    (void)heap;
#else
    rng->heap = heap;
 800eb24:	6041      	str	r1, [r0, #4]
        rng->status = DRBG_FAILED;
    }
#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
 800eb26:	2000      	movs	r0, #0
 800eb28:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800eb2a:	f06f 00ac 	mvn.w	r0, #172	; 0xac


int wc_InitRng_ex(WC_RNG* rng, void* heap, int devId)
{
    return _InitRng(rng, NULL, 0, heap, devId);
}
 800eb2e:	4770      	bx	lr

0800eb30 <wc_RNG_GenerateBlock>:


/* place a generated block in output */
WOLFSSL_ABI
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	460d      	mov	r5, r1
 800eb34:	4614      	mov	r4, r2
    int ret;

    if (rng == NULL || output == NULL)
 800eb36:	b158      	cbz	r0, 800eb50 <wc_RNG_GenerateBlock+0x20>
 800eb38:	b151      	cbz	r1, 800eb50 <wc_RNG_GenerateBlock+0x20>
        return BAD_FUNC_ARG;

    if (sz == 0)
 800eb3a:	b162      	cbz	r2, 800eb56 <wc_RNG_GenerateBlock+0x26>
    #endif
    }
#endif

#ifdef CUSTOM_RAND_GENERATE_BLOCK
    XMEMSET(output, 0, sz);
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f00e ff58 	bl	801d9f4 <memset>
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
 800eb44:	4621      	mov	r1, r4
 800eb46:	4628      	mov	r0, r5

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
}
 800eb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
 800eb4c:	f7f1 bb14 	b.w	8000178 <my_rng_gen_block>
        return BAD_FUNC_ARG;
 800eb50:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800eb54:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 800eb56:	4610      	mov	r0, r2
 800eb58:	e7fc      	b.n	800eb54 <wc_RNG_GenerateBlock+0x24>

0800eb5a <wc_FreeRng>:
int wc_FreeRng(WC_RNG* rng)
{
    int ret = 0;

    if (rng == NULL)
        return BAD_FUNC_ARG;
 800eb5a:	2800      	cmp	r0, #0
    if (wc_VersalTrngReset() && !ret)
        ret = WC_HW_E;
#endif

    return ret;
}
 800eb5c:	bf0c      	ite	eq
 800eb5e:	f06f 00ac 	mvneq.w	r0, #172	; 0xac
 800eb62:	2000      	movne	r0, #0
 800eb64:	4770      	bx	lr

0800eb66 <ByteReverseWords>:
{
 800eb66:	b510      	push	{r4, lr}
        word32 count = byteCount/(word32)sizeof(word32);
 800eb68:	0892      	lsrs	r2, r2, #2
        for (i = 0; i < count; i++)
 800eb6a:	2300      	movs	r3, #0
            out[i] = ByteReverseWord32(in[i]);
 800eb6c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800eb70:	ba24      	rev	r4, r4
 800eb72:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (i = 0; i < count; i++)
 800eb76:	3301      	adds	r3, #1
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d1f7      	bne.n	800eb6c <ByteReverseWords+0x6>
}
 800eb7c:	bd10      	pop	{r4, pc}
	...

0800eb80 <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static int Transform(wc_Sha* sha, const byte* data)
    {
 800eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	b097      	sub	sp, #92	; 0x5c
        word32 W[WC_SHA_BLOCK_SIZE / sizeof(word32)];

        /* Copy context->state[] to working vars */
        word32 a = sha->digest[0];
 800eb86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800eb88:	930d      	str	r3, [sp, #52]	; 0x34
        word32 b = sha->digest[1];
 800eb8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800eb8c:	9301      	str	r3, [sp, #4]
        word32 c = sha->digest[2];
 800eb8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800eb90:	9305      	str	r3, [sp, #20]
        word32 d = sha->digest[3];
 800eb92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800eb94:	930e      	str	r3, [sp, #56]	; 0x38
        word32 e = sha->digest[4];
 800eb96:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb98:	9312      	str	r3, [sp, #72]	; 0x48
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800eb9a:	680b      	ldr	r3, [r1, #0]
 800eb9c:	9306      	str	r3, [sp, #24]
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 800eb9e:	9a06      	ldr	r2, [sp, #24]
 800eba0:	4bd9      	ldr	r3, [pc, #868]	; (800ef08 <Transform+0x388>)
 800eba2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    {
 800eba4:	9000      	str	r0, [sp, #0]
 800eba6:	eb02 0e03 	add.w	lr, r2, r3
 800ebaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800ebac:	9805      	ldr	r0, [sp, #20]
 800ebae:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800ebb2:	9d05      	ldr	r5, [sp, #20]
 800ebb4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800ebb8:	4496      	add	lr, r2
 800ebba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebbc:	eb0e 62f2 	add.w	r2, lr, r2, ror #27
 800ebc0:	ea80 0e04 	eor.w	lr, r0, r4
 800ebc4:	9801      	ldr	r0, [sp, #4]
 800ebc6:	ea0e 0e00 	and.w	lr, lr, r0
 800ebca:	ea8e 0e04 	eor.w	lr, lr, r4
 800ebce:	4496      	add	lr, r2
 800ebd0:	684a      	ldr	r2, [r1, #4]
 800ebd2:	9207      	str	r2, [sp, #28]
 800ebd4:	9801      	ldr	r0, [sp, #4]
 800ebd6:	9a05      	ldr	r2, [sp, #20]
 800ebd8:	ea82 00b0 	eor.w	r0, r2, r0, ror #2
 800ebdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebde:	4010      	ands	r0, r2
 800ebe0:	9a05      	ldr	r2, [sp, #20]
 800ebe2:	4050      	eors	r0, r2
 800ebe4:	9a07      	ldr	r2, [sp, #28]
 800ebe6:	441a      	add	r2, r3
 800ebe8:	4422      	add	r2, r4
 800ebea:	4410      	add	r0, r2
 800ebec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebee:	ea4f 04b2 	mov.w	r4, r2, ror #2
 800ebf2:	9a01      	ldr	r2, [sp, #4]
 800ebf4:	ea84 07b2 	eor.w	r7, r4, r2, ror #2
 800ebf8:	ea07 070e 	and.w	r7, r7, lr
 800ebfc:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 800ec00:	eb0a 0203 	add.w	r2, sl, r3
 800ec04:	442a      	add	r2, r5
 800ec06:	eb00 60fe 	add.w	r0, r0, lr, ror #27
 800ec0a:	9d01      	ldr	r5, [sp, #4]
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800ec0c:	f8d1 b010 	ldr.w	fp, [r1, #16]
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800ec10:	ea84 0cbe 	eor.w	ip, r4, lr, ror #2
 800ec14:	4417      	add	r7, r2
 800ec16:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 800ec1a:	eb09 0203 	add.w	r2, r9, r3
 800ec1e:	ea0c 0c00 	and.w	ip, ip, r0
 800ec22:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800ec26:	eb02 02b5 	add.w	r2, r2, r5, ror #2
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800ec2a:	ea80 06be 	eor.w	r6, r0, lr, ror #2
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800ec2e:	ea8c 0c04 	eor.w	ip, ip, r4
 800ec32:	4494      	add	ip, r2
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800ec34:	403e      	ands	r6, r7
 800ec36:	eb0b 0203 	add.w	r2, fp, r3
 800ec3a:	4422      	add	r2, r4
 800ec3c:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 800ec40:	4416      	add	r6, r2
 800ec42:	694a      	ldr	r2, [r1, #20]
 800ec44:	920f      	str	r2, [sp, #60]	; 0x3c
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800ec46:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800ec4a:	ea80 04b7 	eor.w	r4, r0, r7, ror #2
 800ec4e:	ea04 040c 	and.w	r4, r4, ip
 800ec52:	441a      	add	r2, r3
 800ec54:	eb02 02be 	add.w	r2, r2, lr, ror #2
 800ec58:	4044      	eors	r4, r0
 800ec5a:	eb06 66fc 	add.w	r6, r6, ip, ror #27
 800ec5e:	4414      	add	r4, r2
 800ec60:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800ec64:	698a      	ldr	r2, [r1, #24]
 800ec66:	9210      	str	r2, [sp, #64]	; 0x40
 800ec68:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
 800ec6c:	4035      	ands	r5, r6
 800ec6e:	441a      	add	r2, r3
 800ec70:	4402      	add	r2, r0
 800ec72:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 800ec76:	4415      	add	r5, r2
 800ec78:	69ca      	ldr	r2, [r1, #28]
 800ec7a:	9211      	str	r2, [sp, #68]	; 0x44
 800ec7c:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 800ec80:	ea8c 00b6 	eor.w	r0, ip, r6, ror #2
 800ec84:	4020      	ands	r0, r4
 800ec86:	441a      	add	r2, r3
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800ec88:	f8d1 e020 	ldr.w	lr, [r1, #32]
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800ec8c:	eb05 65f4 	add.w	r5, r5, r4, ror #27
 800ec90:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 800ec94:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800ec98:	ea80 000c 	eor.w	r0, r0, ip
 800ec9c:	4410      	add	r0, r2
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800ec9e:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 800eca2:	eb0e 0703 	add.w	r7, lr, r3
 800eca6:	402a      	ands	r2, r5
 800eca8:	4467      	add	r7, ip
 800ecaa:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 800ecae:	443a      	add	r2, r7
 800ecb0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 800ecb2:	9709      	str	r7, [sp, #36]	; 0x24
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800ecb4:	eb00 60f5 	add.w	r0, r0, r5, ror #27
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800ecb8:	ea84 0cb5 	eor.w	ip, r4, r5, ror #2
 800ecbc:	441f      	add	r7, r3
 800ecbe:	ea0c 0c00 	and.w	ip, ip, r0
 800ecc2:	eb07 06b6 	add.w	r6, r7, r6, ror #2
 800ecc6:	ea8c 0c04 	eor.w	ip, ip, r4
 800ecca:	eb02 62f0 	add.w	r2, r2, r0, ror #27
 800ecce:	44b4      	add	ip, r6
 800ecd0:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800ecd4:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800ecd6:	960a      	str	r6, [sp, #40]	; 0x28
 800ecd8:	ea80 08b5 	eor.w	r8, r0, r5, ror #2
 800ecdc:	441e      	add	r6, r3
 800ecde:	ea08 0802 	and.w	r8, r8, r2
 800ece2:	4434      	add	r4, r6
 800ece4:	ea88 08b5 	eor.w	r8, r8, r5, ror #2
 800ece8:	44a0      	add	r8, r4
 800ecea:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800ecec:	940b      	str	r4, [sp, #44]	; 0x2c
 800ecee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ecf0:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 800ecf4:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
 800ecf8:	441e      	add	r6, r3
 800ecfa:	ea04 040c 	and.w	r4, r4, ip
 800ecfe:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 800ed02:	4044      	eors	r4, r0
 800ed04:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 800ed08:	442c      	add	r4, r5
 800ed0a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800ed0e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800ed10:	950c      	str	r5, [sp, #48]	; 0x30
 800ed12:	ea8c 07b2 	eor.w	r7, ip, r2, ror #2
 800ed16:	441d      	add	r5, r3
 800ed18:	ea07 0708 	and.w	r7, r7, r8
 800ed1c:	4428      	add	r0, r5
 800ed1e:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 800ed22:	4407      	add	r7, r0
 800ed24:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800ed26:	9002      	str	r0, [sp, #8]
 800ed28:	9d02      	ldr	r5, [sp, #8]
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800ed2a:	eb04 64f8 	add.w	r4, r4, r8, ror #27
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800ed2e:	ea8c 00b8 	eor.w	r0, ip, r8, ror #2
 800ed32:	441d      	add	r5, r3
 800ed34:	4020      	ands	r0, r4
 800ed36:	eb05 02b2 	add.w	r2, r5, r2, ror #2
 800ed3a:	ea80 000c 	eor.w	r0, r0, ip
 800ed3e:	eb07 67f4 	add.w	r7, r7, r4, ror #27
 800ed42:	4410      	add	r0, r2
 800ed44:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800ed48:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800ed4a:	9203      	str	r2, [sp, #12]
 800ed4c:	ea84 06b8 	eor.w	r6, r4, r8, ror #2
 800ed50:	403e      	ands	r6, r7
 800ed52:	441a      	add	r2, r3
 800ed54:	4462      	add	r2, ip
 800ed56:	ea86 06b8 	eor.w	r6, r6, r8, ror #2
 800ed5a:	4416      	add	r6, r2
 800ed5c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800ed5e:	9204      	str	r2, [sp, #16]
 800ed60:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 800ed64:	ea84 01b7 	eor.w	r1, r4, r7, ror #2
 800ed68:	4001      	ands	r1, r0
 800ed6a:	441a      	add	r2, r3
 800ed6c:	eb02 02b8 	add.w	r2, r2, r8, ror #2
 800ed70:	4061      	eors	r1, r4
 800ed72:	4411      	add	r1, r2

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800ed74:	9a06      	ldr	r2, [sp, #24]
 800ed76:	9d02      	ldr	r5, [sp, #8]
 800ed78:	ea82 020a 	eor.w	r2, r2, sl
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800ed7c:	eb06 66f0 	add.w	r6, r6, r0, ror #27
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800ed80:	ea82 020e 	eor.w	r2, r2, lr
 800ed84:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800ed88:	406a      	eors	r2, r5
 800ed8a:	ea80 05b7 	eor.w	r5, r0, r7, ror #2
 800ed8e:	9206      	str	r2, [sp, #24]
 800ed90:	4035      	ands	r5, r6
 800ed92:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800ed96:	4422      	add	r2, r4
 800ed98:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 800ed9c:	4415      	add	r5, r2
 800ed9e:	9a07      	ldr	r2, [sp, #28]
 800eda0:	ea82 0c09 	eor.w	ip, r2, r9
 800eda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eda6:	ea8c 0c02 	eor.w	ip, ip, r2
 800edaa:	9a03      	ldr	r2, [sp, #12]
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800edac:	eb01 61f6 	add.w	r1, r1, r6, ror #27
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800edb0:	ea8c 0202 	eor.w	r2, ip, r2
 800edb4:	ea80 04b6 	eor.w	r4, r0, r6, ror #2
 800edb8:	9207      	str	r2, [sp, #28]
 800edba:	400c      	ands	r4, r1
 800edbc:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800edc0:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 800edc4:	4044      	eors	r4, r0
 800edc6:	4414      	add	r4, r2
 800edc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edca:	ea8a 0a0b 	eor.w	sl, sl, fp
 800edce:	ea8a 0a02 	eor.w	sl, sl, r2
 800edd2:	9a04      	ldr	r2, [sp, #16]
 800edd4:	ea8a 0a02 	eor.w	sl, sl, r2
 800edd8:	eb05 65f1 	add.w	r5, r5, r1, ror #27
 800eddc:	ea4f 72fa 	mov.w	r2, sl, ror #31
 800ede0:	ea4f 01b1 	mov.w	r1, r1, ror #2
 800ede4:	9213      	str	r2, [sp, #76]	; 0x4c
 800ede6:	ea81 02b6 	eor.w	r2, r1, r6, ror #2
 800edea:	eb03 77fa 	add.w	r7, r3, sl, ror #31
 800edee:	402a      	ands	r2, r5
 800edf0:	4438      	add	r0, r7
 800edf2:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 800edf6:	4402      	add	r2, r0
 800edf8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800edfa:	ea89 0700 	eor.w	r7, r9, r0
 800edfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee00:	4047      	eors	r7, r0
 800ee02:	9806      	ldr	r0, [sp, #24]
 800ee04:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
 800ee08:	ea4f 70f7 	mov.w	r0, r7, ror #31
 800ee0c:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 800ee10:	9014      	str	r0, [sp, #80]	; 0x50
 800ee12:	ea81 00b5 	eor.w	r0, r1, r5, ror #2
 800ee16:	4020      	ands	r0, r4
 800ee18:	eb03 73f7 	add.w	r3, r3, r7, ror #31
 800ee1c:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 800ee20:	4048      	eors	r0, r1
 800ee22:	4418      	add	r0, r3

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800ee24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ee28:	ea8b 0303 	eor.w	r3, fp, r3
 800ee2c:	4073      	eors	r3, r6
 800ee2e:	9e07      	ldr	r6, [sp, #28]
 800ee30:	ea83 73f6 	eor.w	r3, r3, r6, ror #31
 800ee34:	9308      	str	r3, [sp, #32]
 800ee36:	9e08      	ldr	r6, [sp, #32]
 800ee38:	4b34      	ldr	r3, [pc, #208]	; (800ef0c <Transform+0x38c>)
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800ee3a:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 800ee3e:	ea4f 04b4 	mov.w	r4, r4, ror #2
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800ee42:	ea84 0bb5 	eor.w	fp, r4, r5, ror #2
 800ee46:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 800ee4a:	4431      	add	r1, r6
 800ee4c:	ea8b 0b02 	eor.w	fp, fp, r2
 800ee50:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ee52:	448b      	add	fp, r1
 800ee54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee56:	4071      	eors	r1, r6
 800ee58:	9e02      	ldr	r6, [sp, #8]
 800ee5a:	4071      	eors	r1, r6
 800ee5c:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800ee60:	eb00 60f2 	add.w	r0, r0, r2, ror #27
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800ee64:	eb03 76f1 	add.w	r6, r3, r1, ror #31
 800ee68:	ea84 0cb2 	eor.w	ip, r4, r2, ror #2
 800ee6c:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 800ee70:	ea8c 0c00 	eor.w	ip, ip, r0
 800ee74:	44ac      	add	ip, r5
 800ee76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ee78:	9e03      	ldr	r6, [sp, #12]
 800ee7a:	ea85 050e 	eor.w	r5, r5, lr
 800ee7e:	4075      	eors	r5, r6
 800ee80:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 800ee84:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
 800ee88:	ea4f 76f5 	mov.w	r6, r5, ror #31
 800ee8c:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800ee90:	9610      	str	r6, [sp, #64]	; 0x40
 800ee92:	ea80 08b2 	eor.w	r8, r0, r2, ror #2
 800ee96:	eb03 76f5 	add.w	r6, r3, r5, ror #31
 800ee9a:	4434      	add	r4, r6
 800ee9c:	ea88 080b 	eor.w	r8, r8, fp
 800eea0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800eea2:	44a0      	add	r8, r4
 800eea4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800eea6:	4066      	eors	r6, r4
 800eea8:	9c04      	ldr	r4, [sp, #16]
 800eeaa:	4066      	eors	r6, r4
 800eeac:	9c08      	ldr	r4, [sp, #32]
 800eeae:	ea86 76f4 	eor.w	r6, r6, r4, ror #31
 800eeb2:	ea4f 74f6 	mov.w	r4, r6, ror #31
 800eeb6:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
 800eeba:	9411      	str	r4, [sp, #68]	; 0x44
 800eebc:	ea80 09bb 	eor.w	r9, r0, fp, ror #2
 800eec0:	eb03 74f6 	add.w	r4, r3, r6, ror #31
 800eec4:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800eec8:	ea89 090c 	eor.w	r9, r9, ip
 800eecc:	4491      	add	r9, r2
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800eece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eed0:	9c06      	ldr	r4, [sp, #24]
 800eed2:	ea8e 0202 	eor.w	r2, lr, r2
 800eed6:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800eeda:	eb08 68fc 	add.w	r8, r8, ip, ror #27
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800eede:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 800eee2:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800eee6:	eb03 7ef2 	add.w	lr, r3, r2, ror #31
 800eeea:	ea8c 04bb 	eor.w	r4, ip, fp, ror #2
 800eeee:	4470      	add	r0, lr
 800eef0:	ea84 0408 	eor.w	r4, r4, r8
 800eef4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800eef8:	4404      	add	r4, r0
 800eefa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eefc:	ea80 000e 	eor.w	r0, r0, lr
 800ef00:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800ef04:	e004      	b.n	800ef10 <Transform+0x390>
 800ef06:	bf00      	nop
 800ef08:	5a827999 	.word	0x5a827999
 800ef0c:	6ed9eba1 	.word	0x6ed9eba1
 800ef10:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 800ef14:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800ef18:	eb09 69f8 	add.w	r9, r9, r8, ror #27
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800ef1c:	9009      	str	r0, [sp, #36]	; 0x24
 800ef1e:	ea8c 0eb8 	eor.w	lr, ip, r8, ror #2
 800ef22:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800ef26:	eb00 00bb 	add.w	r0, r0, fp, ror #2
 800ef2a:	ea8e 0e09 	eor.w	lr, lr, r9
 800ef2e:	4486      	add	lr, r0
 800ef30:	ea4f 00b9 	mov.w	r0, r9, ror #2
 800ef34:	eb04 64f9 	add.w	r4, r4, r9, ror #27
 800ef38:	900f      	str	r0, [sp, #60]	; 0x3c
 800ef3a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ef3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef40:	ea80 0909 	eor.w	r9, r0, r9
 800ef44:	ea89 7afa 	eor.w	sl, r9, sl, ror #31
 800ef48:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
 800ef4c:	ea4f 70fa 	mov.w	r0, sl, ror #31
 800ef50:	9015      	str	r0, [sp, #84]	; 0x54
 800ef52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ef54:	eb03 79fa 	add.w	r9, r3, sl, ror #31
 800ef58:	ea80 0bb8 	eor.w	fp, r0, r8, ror #2
 800ef5c:	44cc      	add	ip, r9
 800ef5e:	ea8b 0b04 	eor.w	fp, fp, r4
 800ef62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef64:	44e3      	add	fp, ip
 800ef66:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ef6a:	ea80 090c 	eor.w	r9, r0, ip
 800ef6e:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 800ef72:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 800ef76:	ea4f 70f7 	mov.w	r0, r7, ror #31
 800ef7a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ef7e:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
 800ef82:	eb03 79f7 	add.w	r9, r3, r7, ror #31
 800ef86:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
 800ef8a:	eb09 08b8 	add.w	r8, r9, r8, ror #2
 800ef8e:	ea8c 0c0e 	eor.w	ip, ip, lr
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800ef92:	980c      	ldr	r0, [sp, #48]	; 0x30
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800ef94:	44c4      	add	ip, r8
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800ef96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ef9a:	ea80 0808 	eor.w	r8, r0, r8
 800ef9e:	9808      	ldr	r0, [sp, #32]
 800efa0:	ea88 78f0 	eor.w	r8, r8, r0, ror #31
 800efa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efa6:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800efaa:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800efae:	900a      	str	r0, [sp, #40]	; 0x28
 800efb0:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 800efb4:	eb03 79f0 	add.w	r9, r3, r0, ror #31
 800efb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800efba:	ea8e 08b4 	eor.w	r8, lr, r4, ror #2
 800efbe:	4448      	add	r0, r9
 800efc0:	ea88 080b 	eor.w	r8, r8, fp
 800efc4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800efc8:	4480      	add	r8, r0
 800efca:	9802      	ldr	r0, [sp, #8]
 800efcc:	ea80 0009 	eor.w	r0, r0, r9
 800efd0:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 800efd4:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800efd8:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800efdc:	9002      	str	r0, [sp, #8]
 800efde:	ea8e 09bb 	eor.w	r9, lr, fp, ror #2
 800efe2:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800efe6:	eb00 00b4 	add.w	r0, r0, r4, ror #2
 800efea:	ea89 090c 	eor.w	r9, r9, ip
 800efee:	9c06      	ldr	r4, [sp, #24]
 800eff0:	4481      	add	r9, r0
 800eff2:	9803      	ldr	r0, [sp, #12]
 800eff4:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800eff8:	ea80 75f5 	eor.w	r5, r0, r5, ror #31
 800effc:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 800f000:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 800f004:	ea4f 70f5 	mov.w	r0, r5, ror #31
 800f008:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800f00c:	900c      	str	r0, [sp, #48]	; 0x30
 800f00e:	ea8c 04bb 	eor.w	r4, ip, fp, ror #2
 800f012:	eb03 70f5 	add.w	r0, r3, r5, ror #31
 800f016:	4470      	add	r0, lr
 800f018:	ea84 0408 	eor.w	r4, r4, r8
 800f01c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800f020:	4404      	add	r4, r0
 800f022:	9804      	ldr	r0, [sp, #16]
 800f024:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 800f028:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800f02c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f02e:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800f032:	ea4f 76f0 	mov.w	r6, r0, ror #31
 800f036:	eb09 69f8 	add.w	r9, r9, r8, ror #27
 800f03a:	960f      	str	r6, [sp, #60]	; 0x3c
 800f03c:	eb03 7ef0 	add.w	lr, r3, r0, ror #31
 800f040:	ea8c 06b8 	eor.w	r6, ip, r8, ror #2
 800f044:	eb0e 0ebb 	add.w	lr, lr, fp, ror #2
 800f048:	ea86 0609 	eor.w	r6, r6, r9
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f04c:	f8dd b018 	ldr.w	fp, [sp, #24]
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800f050:	4476      	add	r6, lr
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f052:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800f056:	ea8e 7efb 	eor.w	lr, lr, fp, ror #31
 800f05a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f05e:	ea8e 7ef2 	eor.w	lr, lr, r2, ror #31
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800f062:	eb04 64f9 	add.w	r4, r4, r9, ror #27
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f066:	ea8e 7efb 	eor.w	lr, lr, fp, ror #31
 800f06a:	ea4f 09b9 	mov.w	r9, r9, ror #2
 800f06e:	f8cd e00c 	str.w	lr, [sp, #12]
 800f072:	ea89 0bb8 	eor.w	fp, r9, r8, ror #2
 800f076:	eb03 7efe 	add.w	lr, r3, lr, ror #31
 800f07a:	44f4      	add	ip, lr
 800f07c:	ea8b 0b04 	eor.w	fp, fp, r4
 800f080:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800f084:	44e3      	add	fp, ip
 800f086:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800f08a:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 800f08e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800f092:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 800f096:	ea8c 7cf5 	eor.w	ip, ip, r5, ror #31
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800f09a:	eb06 66f4 	add.w	r6, r6, r4, ror #27
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f09e:	f8cd c010 	str.w	ip, [sp, #16]
 800f0a2:	ea89 0eb4 	eor.w	lr, r9, r4, ror #2
 800f0a6:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 800f0aa:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
 800f0ae:	ea8e 0e06 	eor.w	lr, lr, r6
 800f0b2:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
 800f0b6:	ea4f 08b6 	mov.w	r8, r6, ror #2
 800f0ba:	44e6      	add	lr, ip
 800f0bc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f0be:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f0c2:	ea86 76fc 	eor.w	r6, r6, ip, ror #31
 800f0c6:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
 800f0ca:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 800f0ce:	ea4f 76fa 	mov.w	r6, sl, ror #31
 800f0d2:	9613      	str	r6, [sp, #76]	; 0x4c
 800f0d4:	eb03 7cfa 	add.w	ip, r3, sl, ror #31
 800f0d8:	ea88 06b4 	eor.w	r6, r8, r4, ror #2
 800f0dc:	44cc      	add	ip, r9
 800f0de:	ea86 060b 	eor.w	r6, r6, fp
 800f0e2:	4466      	add	r6, ip
 800f0e4:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800f0e8:	ea8c 79f1 	eor.w	r9, ip, r1, ror #31
 800f0ec:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 800f0f0:	9f03      	ldr	r7, [sp, #12]
 800f0f2:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 800f0f6:	ea4f 77f9 	mov.w	r7, r9, ror #31
 800f0fa:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
 800f0fe:	eb03 7cf9 	add.w	ip, r3, r9, ror #31
 800f102:	9714      	str	r7, [sp, #80]	; 0x50
 800f104:	ea88 07bb 	eor.w	r7, r8, fp, ror #2
 800f108:	eb0c 04b4 	add.w	r4, ip, r4, ror #2
 800f10c:	ea87 070e 	eor.w	r7, r7, lr
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800f110:	f8dd c020 	ldr.w	ip, [sp, #32]
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f114:	4427      	add	r7, r4
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800f116:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f118:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800f11c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800f120:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800f124:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f128:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800f12c:	9406      	str	r4, [sp, #24]
 800f12e:	f8dd c018 	ldr.w	ip, [sp, #24]
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f132:	eb06 66fe 	add.w	r6, r6, lr, ror #27
 800f136:	ea4f 0ebe 	mov.w	lr, lr, ror #2
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800f13a:	ea8e 04bb 	eor.w	r4, lr, fp, ror #2
 800f13e:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 800f142:	44c4      	add	ip, r8
 800f144:	4074      	eors	r4, r6
 800f146:	4464      	add	r4, ip
 800f148:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800f14c:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
 800f150:	f8dd c008 	ldr.w	ip, [sp, #8]
 800f154:	ea81 71fc 	eor.w	r1, r1, ip, ror #31
 800f158:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800f15c:	eb07 67f6 	add.w	r7, r7, r6, ror #27
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800f160:	9107      	str	r1, [sp, #28]
 800f162:	ea8e 0cb6 	eor.w	ip, lr, r6, ror #2
 800f166:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800f16a:	eb01 01bb 	add.w	r1, r1, fp, ror #2
 800f16e:	ea8c 0c07 	eor.w	ip, ip, r7
 800f172:	448c      	add	ip, r1
 800f174:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f176:	ea81 78f2 	eor.w	r8, r1, r2, ror #31
 800f17a:	ea88 78f5 	eor.w	r8, r8, r5, ror #31
 800f17e:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800f182:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 800f186:	ea4f 71f8 	mov.w	r1, r8, ror #31
 800f18a:	ea4f 07b7 	mov.w	r7, r7, ror #2
 800f18e:	9110      	str	r1, [sp, #64]	; 0x40
 800f190:	ea87 0bb6 	eor.w	fp, r7, r6, ror #2
 800f194:	eb03 71f8 	add.w	r1, r3, r8, ror #31
 800f198:	4471      	add	r1, lr
 800f19a:	ea8b 0b04 	eor.w	fp, fp, r4
 800f19e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f1a0:	448b      	add	fp, r1
 800f1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f1a4:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 800f1a8:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 800f1ac:	9906      	ldr	r1, [sp, #24]
 800f1ae:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 800f1b2:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
 800f1b6:	ea87 0eb4 	eor.w	lr, r7, r4, ror #2
 800f1ba:	eb03 73f0 	add.w	r3, r3, r0, ror #31
 800f1be:	ea8e 0e0c 	eor.w	lr, lr, ip
 800f1c2:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 800f1c6:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
 800f1ca:	4473      	add	r3, lr
 800f1cc:	eb03 6efb 	add.w	lr, r3, fp, ror #27

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800f1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1d2:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 800f1d6:	9b03      	ldr	r3, [sp, #12]
 800f1d8:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
 800f1dc:	9b07      	ldr	r3, [sp, #28]
 800f1de:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 800f1e2:	ea4b 02bc 	orr.w	r2, fp, ip, ror #2
 800f1e6:	9308      	str	r3, [sp, #32]
 800f1e8:	ea4f 71f0 	mov.w	r1, r0, ror #31
 800f1ec:	ea0b 03bc 	and.w	r3, fp, ip, ror #2
 800f1f0:	ea02 02b4 	and.w	r2, r2, r4, ror #2
 800f1f4:	9111      	str	r1, [sp, #68]	; 0x44
 800f1f6:	431a      	orrs	r2, r3
 800f1f8:	9908      	ldr	r1, [sp, #32]
 800f1fa:	4bd9      	ldr	r3, [pc, #868]	; (800f560 <Transform+0x9e0>)
 800f1fc:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800f200:	4439      	add	r1, r7
 800f202:	440a      	add	r2, r1
 800f204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f206:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
 800f20a:	9904      	ldr	r1, [sp, #16]
 800f20c:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 800f210:	ea86 71f8 	eor.w	r1, r6, r8, ror #31
 800f214:	9109      	str	r1, [sp, #36]	; 0x24
 800f216:	ea4e 01bb 	orr.w	r1, lr, fp, ror #2
 800f21a:	ea01 05bc 	and.w	r5, r1, ip, ror #2
 800f21e:	ea0e 01bb 	and.w	r1, lr, fp, ror #2
 800f222:	4329      	orrs	r1, r5
 800f224:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f226:	eb03 75f5 	add.w	r5, r3, r5, ror #31
 800f22a:	eb05 04b4 	add.w	r4, r5, r4, ror #2
 800f22e:	4421      	add	r1, r4
 800f230:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f232:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f234:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800f238:	ea84 7afa 	eor.w	sl, r4, sl, ror #31
 800f23c:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 800f240:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 800f244:	ea42 07be 	orr.w	r7, r2, lr, ror #2
 800f248:	ea4f 74fa 	mov.w	r4, sl, ror #31
 800f24c:	9415      	str	r4, [sp, #84]	; 0x54
 800f24e:	ea07 04bb 	and.w	r4, r7, fp, ror #2
 800f252:	ea02 07be 	and.w	r7, r2, lr, ror #2
 800f256:	4327      	orrs	r7, r4
 800f258:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 800f25c:	9d02      	ldr	r5, [sp, #8]
 800f25e:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 800f262:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f264:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800f268:	ea84 79f9 	eor.w	r9, r4, r9, ror #31
 800f26c:	9c08      	ldr	r4, [sp, #32]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f26e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800f270:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 800f274:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 800f278:	ea41 06b2 	orr.w	r6, r1, r2, ror #2
 800f27c:	ea4f 74f9 	mov.w	r4, r9, ror #31
 800f280:	940b      	str	r4, [sp, #44]	; 0x2c
 800f282:	ea06 04be 	and.w	r4, r6, lr, ror #2
 800f286:	ea01 06b2 	and.w	r6, r1, r2, ror #2
 800f28a:	4326      	orrs	r6, r4
 800f28c:	eb03 74f9 	add.w	r4, r3, r9, ror #31
 800f290:	eb04 04bb 	add.w	r4, r4, fp, ror #2
 800f294:	4426      	add	r6, r4
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f296:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f298:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800f29c:	9d06      	ldr	r5, [sp, #24]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800f29e:	4467      	add	r7, ip
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f2a0:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800f2a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f2a6:	f8dd c008 	ldr.w	ip, [sp, #8]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800f2aa:	eb07 67f1 	add.w	r7, r7, r1, ror #27
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f2ae:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800f2b2:	ea47 05b1 	orr.w	r5, r7, r1, ror #2
 800f2b6:	940a      	str	r4, [sp, #40]	; 0x28
 800f2b8:	ea05 04b2 	and.w	r4, r5, r2, ror #2
 800f2bc:	ea07 05b1 	and.w	r5, r7, r1, ror #2
 800f2c0:	4325      	orrs	r5, r4
 800f2c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f2c4:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800f2c8:	eb04 04be 	add.w	r4, r4, lr, ror #2
 800f2cc:	4425      	add	r5, r4
 800f2ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f2d0:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800f2d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800f2d8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f2dc:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800f2e0:	ea46 0eb7 	orr.w	lr, r6, r7, ror #2
 800f2e4:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
 800f2e8:	9402      	str	r4, [sp, #8]
 800f2ea:	ea0e 04b1 	and.w	r4, lr, r1, ror #2
 800f2ee:	ea06 0eb7 	and.w	lr, r6, r7, ror #2
 800f2f2:	ea44 0e0e 	orr.w	lr, r4, lr
 800f2f6:	9c02      	ldr	r4, [sp, #8]
 800f2f8:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800f2fc:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800f300:	4496      	add	lr, r2
 800f302:	9c03      	ldr	r4, [sp, #12]
 800f304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f306:	ea82 7cf4 	eor.w	ip, r2, r4, ror #31
 800f30a:	ea8c 78f8 	eor.w	r8, ip, r8, ror #31
 800f30e:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 800f312:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800f316:	ea45 04b6 	orr.w	r4, r5, r6, ror #2
 800f31a:	ea4f 72f8 	mov.w	r2, r8, ror #31
 800f31e:	920c      	str	r2, [sp, #48]	; 0x30
 800f320:	ea04 02b7 	and.w	r2, r4, r7, ror #2
 800f324:	ea05 04b6 	and.w	r4, r5, r6, ror #2
 800f328:	4314      	orrs	r4, r2
 800f32a:	eb03 72f8 	add.w	r2, r3, r8, ror #31
 800f32e:	eb02 02b1 	add.w	r2, r2, r1, ror #2
 800f332:	4414      	add	r4, r2
 800f334:	9904      	ldr	r1, [sp, #16]
 800f336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f338:	ea82 71f1 	eor.w	r1, r2, r1, ror #31
 800f33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f33e:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 800f342:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 800f346:	ea81 71f2 	eor.w	r1, r1, r2, ror #31
 800f34a:	ea4e 0cb5 	orr.w	ip, lr, r5, ror #2
 800f34e:	ea4f 72f1 	mov.w	r2, r1, ror #31
 800f352:	920f      	str	r2, [sp, #60]	; 0x3c
 800f354:	ea0c 02b6 	and.w	r2, ip, r6, ror #2
 800f358:	ea0e 0cb5 	and.w	ip, lr, r5, ror #2
 800f35c:	ea42 0c0c 	orr.w	ip, r2, ip
 800f360:	eb03 72f1 	add.w	r2, r3, r1, ror #31
 800f364:	eb02 02b7 	add.w	r2, r2, r7, ror #2
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800f368:	9803      	ldr	r0, [sp, #12]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f36a:	4494      	add	ip, r2
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800f36c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f36e:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f372:	9808      	ldr	r0, [sp, #32]
 800f374:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f378:	9802      	ldr	r0, [sp, #8]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f37a:	eb04 64fe 	add.w	r4, r4, lr, ror #27
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800f37e:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f382:	9203      	str	r2, [sp, #12]
 800f384:	ea44 02be 	orr.w	r2, r4, lr, ror #2
 800f388:	ea02 00b5 	and.w	r0, r2, r5, ror #2
 800f38c:	ea04 02be 	and.w	r2, r4, lr, ror #2
 800f390:	4302      	orrs	r2, r0
 800f392:	9803      	ldr	r0, [sp, #12]
 800f394:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800f398:	eb00 00b6 	add.w	r0, r0, r6, ror #2
 800f39c:	4402      	add	r2, r0
 800f39e:	9e04      	ldr	r6, [sp, #16]
 800f3a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f3a2:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800f3a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800f3a8:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800f3ac:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800f3b0:	ea4c 0bb4 	orr.w	fp, ip, r4, ror #2
 800f3b4:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 800f3b8:	9004      	str	r0, [sp, #16]
 800f3ba:	ea0b 00be 	and.w	r0, fp, lr, ror #2
 800f3be:	ea0c 0bb4 	and.w	fp, ip, r4, ror #2
 800f3c2:	ea40 0b0b 	orr.w	fp, r0, fp
 800f3c6:	9804      	ldr	r0, [sp, #16]
 800f3c8:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800f3cc:	eb00 00b5 	add.w	r0, r0, r5, ror #2
 800f3d0:	4483      	add	fp, r0
 800f3d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f3d4:	9d06      	ldr	r5, [sp, #24]
 800f3d6:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
 800f3da:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
 800f3de:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 800f3e2:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
 800f3e6:	ea42 07bc 	orr.w	r7, r2, ip, ror #2
 800f3ea:	ea4f 70fa 	mov.w	r0, sl, ror #31
 800f3ee:	9013      	str	r0, [sp, #76]	; 0x4c
 800f3f0:	ea07 00b4 	and.w	r0, r7, r4, ror #2
 800f3f4:	ea02 07bc 	and.w	r7, r2, ip, ror #2
 800f3f8:	4307      	orrs	r7, r0
 800f3fa:	eb03 70fa 	add.w	r0, r3, sl, ror #31
 800f3fe:	eb00 00be 	add.w	r0, r0, lr, ror #2
 800f402:	9d07      	ldr	r5, [sp, #28]
 800f404:	4407      	add	r7, r0
 800f406:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f408:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
 800f40c:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 800f410:	9803      	ldr	r0, [sp, #12]
 800f412:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 800f416:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 800f41a:	ea4b 06b2 	orr.w	r6, fp, r2, ror #2
 800f41e:	ea4f 70f9 	mov.w	r0, r9, ror #31
 800f422:	9014      	str	r0, [sp, #80]	; 0x50
 800f424:	ea06 00bc 	and.w	r0, r6, ip, ror #2
 800f428:	ea0b 06b2 	and.w	r6, fp, r2, ror #2
 800f42c:	4306      	orrs	r6, r0
 800f42e:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 800f432:	eb00 00b4 	add.w	r0, r0, r4, ror #2
 800f436:	4406      	add	r6, r0
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f438:	9c06      	ldr	r4, [sp, #24]
 800f43a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f43c:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 800f440:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f442:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 800f446:	9804      	ldr	r0, [sp, #16]
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800f448:	eb07 67fb 	add.w	r7, r7, fp, ror #27
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f44c:	ea47 05bb 	orr.w	r5, r7, fp, ror #2
 800f450:	ea84 70f0 	eor.w	r0, r4, r0, ror #31
 800f454:	9006      	str	r0, [sp, #24]
 800f456:	ea05 00b2 	and.w	r0, r5, r2, ror #2
 800f45a:	ea07 05bb 	and.w	r5, r7, fp, ror #2
 800f45e:	4305      	orrs	r5, r0
 800f460:	9806      	ldr	r0, [sp, #24]
 800f462:	9c07      	ldr	r4, [sp, #28]
 800f464:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800f468:	eb00 00bc 	add.w	r0, r0, ip, ror #2
 800f46c:	4405      	add	r5, r0
 800f46e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f470:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800f474:	9c02      	ldr	r4, [sp, #8]
 800f476:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800f47a:	eb06 66f7 	add.w	r6, r6, r7, ror #27
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f47e:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
 800f482:	9007      	str	r0, [sp, #28]
 800f484:	ea46 00b7 	orr.w	r0, r6, r7, ror #2
 800f488:	ea00 04bb 	and.w	r4, r0, fp, ror #2
 800f48c:	ea06 00b7 	and.w	r0, r6, r7, ror #2
 800f490:	4320      	orrs	r0, r4
 800f492:	9c07      	ldr	r4, [sp, #28]
 800f494:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800f498:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800f49c:	4410      	add	r0, r2
 800f49e:	9c08      	ldr	r4, [sp, #32]
 800f4a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4a2:	ea82 7cf4 	eor.w	ip, r2, r4, ror #31
 800f4a6:	ea8c 7cf8 	eor.w	ip, ip, r8, ror #31
 800f4aa:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 800f4ae:	ea8c 7cf9 	eor.w	ip, ip, r9, ror #31
 800f4b2:	ea45 08b6 	orr.w	r8, r5, r6, ror #2
 800f4b6:	ea4f 72fc 	mov.w	r2, ip, ror #31
 800f4ba:	9210      	str	r2, [sp, #64]	; 0x40
 800f4bc:	ea08 02b7 	and.w	r2, r8, r7, ror #2
 800f4c0:	ea05 08b6 	and.w	r8, r5, r6, ror #2
 800f4c4:	ea42 0808 	orr.w	r8, r2, r8
 800f4c8:	eb03 72fc 	add.w	r2, r3, ip, ror #31
 800f4cc:	eb02 02bb 	add.w	r2, r2, fp, ror #2
 800f4d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f4d2:	4490      	add	r8, r2
 800f4d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f4d6:	ea82 7bf4 	eor.w	fp, r2, r4, ror #31
 800f4da:	9a06      	ldr	r2, [sp, #24]
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f4dc:	9c08      	ldr	r4, [sp, #32]
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f4de:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 800f4e2:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 800f4e6:	ea8b 7bf2 	eor.w	fp, fp, r2, ror #31
 800f4ea:	ea40 01b5 	orr.w	r1, r0, r5, ror #2
 800f4ee:	ea4f 72fb 	mov.w	r2, fp, ror #31
 800f4f2:	9211      	str	r2, [sp, #68]	; 0x44
 800f4f4:	ea01 02b6 	and.w	r2, r1, r6, ror #2
 800f4f8:	ea00 01b5 	and.w	r1, r0, r5, ror #2
 800f4fc:	4311      	orrs	r1, r2
 800f4fe:	eb03 72fb 	add.w	r2, r3, fp, ror #31
 800f502:	eb02 07b7 	add.w	r7, r2, r7, ror #2
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f506:	9a15      	ldr	r2, [sp, #84]	; 0x54
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f508:	4439      	add	r1, r7
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f50a:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
 800f50e:	9a03      	ldr	r2, [sp, #12]
 800f510:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f512:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 800f516:	9a07      	ldr	r2, [sp, #28]
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f518:	eb08 68f0 	add.w	r8, r8, r0, ror #27
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f51c:	ea48 0eb0 	orr.w	lr, r8, r0, ror #2
 800f520:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
 800f524:	9208      	str	r2, [sp, #32]
 800f526:	ea0e 02b5 	and.w	r2, lr, r5, ror #2
 800f52a:	ea08 0eb0 	and.w	lr, r8, r0, ror #2
 800f52e:	ea42 0e0e 	orr.w	lr, r2, lr
 800f532:	9a08      	ldr	r2, [sp, #32]
 800f534:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800f538:	eb02 02b6 	add.w	r2, r2, r6, ror #2
 800f53c:	4496      	add	lr, r2
 800f53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f540:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
 800f544:	9a04      	ldr	r2, [sp, #16]
 800f546:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800f54a:	eb01 61f8 	add.w	r1, r1, r8, ror #27
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f54e:	ea86 72fc 	eor.w	r2, r6, ip, ror #31
 800f552:	9209      	str	r2, [sp, #36]	; 0x24
 800f554:	ea41 02b8 	orr.w	r2, r1, r8, ror #2
 800f558:	ea02 04b0 	and.w	r4, r2, r0, ror #2
 800f55c:	e002      	b.n	800f564 <Transform+0x9e4>
 800f55e:	bf00      	nop
 800f560:	8f1bbcdc 	.word	0x8f1bbcdc
 800f564:	ea01 02b8 	and.w	r2, r1, r8, ror #2
 800f568:	4322      	orrs	r2, r4
 800f56a:	9c09      	ldr	r4, [sp, #36]	; 0x24

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800f56c:	9e03      	ldr	r6, [sp, #12]
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f56e:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800f572:	eb04 05b5 	add.w	r5, r4, r5, ror #2
 800f576:	4415      	add	r5, r2
 800f578:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f57a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f57c:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 800f580:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 800f584:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 800f588:	eb0e 6ef1 	add.w	lr, lr, r1, ror #27
 800f58c:	ea4f 72fa 	mov.w	r2, sl, ror #31
 800f590:	9215      	str	r2, [sp, #84]	; 0x54
 800f592:	ea4e 02b1 	orr.w	r2, lr, r1, ror #2
 800f596:	ea02 04b8 	and.w	r4, r2, r8, ror #2
 800f59a:	ea0e 02b1 	and.w	r2, lr, r1, ror #2
 800f59e:	4322      	orrs	r2, r4
 800f5a0:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 800f5a4:	eb04 00b0 	add.w	r0, r4, r0, ror #2
 800f5a8:	4402      	add	r2, r0
 800f5aa:	9c02      	ldr	r4, [sp, #8]
 800f5ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f5ae:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800f5b2:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 800f5b6:	9808      	ldr	r0, [sp, #32]
 800f5b8:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 800f5bc:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 800f5c0:	ea4f 70f9 	mov.w	r0, r9, ror #31
 800f5c4:	ea45 04be 	orr.w	r4, r5, lr, ror #2
 800f5c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5ca:	ea04 04b1 	and.w	r4, r4, r1, ror #2
 800f5ce:	ea05 00be 	and.w	r0, r5, lr, ror #2
 800f5d2:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 800f5d6:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 800f5da:	4320      	orrs	r0, r4
 800f5dc:	4418      	add	r0, r3
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800f5de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f5e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5e2:	ea83 78f4 	eor.w	r8, r3, r4, ror #31
 800f5e6:	9b06      	ldr	r3, [sp, #24]
 800f5e8:	ea88 78f3 	eor.w	r8, r8, r3, ror #31
 800f5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ee:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
 800f5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f5f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f5f6:	4bd8      	ldr	r3, [pc, #864]	; (800f958 <Transform+0xdd8>)
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f5f8:	eb02 62f5 	add.w	r2, r2, r5, ror #27
 800f5fc:	ea4f 05b5 	mov.w	r5, r5, ror #2
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800f600:	ea85 07be 	eor.w	r7, r5, lr, ror #2
 800f604:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800f608:	eb04 01b1 	add.w	r1, r4, r1, ror #2
 800f60c:	4057      	eors	r7, r2
 800f60e:	9c02      	ldr	r4, [sp, #8]
 800f610:	440f      	add	r7, r1
 800f612:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f614:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800f618:	9c07      	ldr	r4, [sp, #28]
 800f61a:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800f61e:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800f622:	eb00 60f2 	add.w	r0, r0, r2, ror #27
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800f626:	9102      	str	r1, [sp, #8]
 800f628:	ea85 04b2 	eor.w	r4, r5, r2, ror #2
 800f62c:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800f630:	eb01 01be 	add.w	r1, r1, lr, ror #2
 800f634:	4044      	eors	r4, r0
 800f636:	440c      	add	r4, r1
 800f638:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f63a:	ea81 7ef6 	eor.w	lr, r1, r6, ror #31
 800f63e:	ea8e 7efc 	eor.w	lr, lr, ip, ror #31
 800f642:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 800f646:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 800f64a:	ea4f 71fe 	mov.w	r1, lr, ror #31
 800f64e:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800f652:	910c      	str	r1, [sp, #48]	; 0x30
 800f654:	ea80 0cb2 	eor.w	ip, r0, r2, ror #2
 800f658:	eb03 71fe 	add.w	r1, r3, lr, ror #31
 800f65c:	4429      	add	r1, r5
 800f65e:	ea8c 0c07 	eor.w	ip, ip, r7
 800f662:	9d04      	ldr	r5, [sp, #16]
 800f664:	448c      	add	ip, r1
 800f666:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f668:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 800f66c:	ea81 7bfb 	eor.w	fp, r1, fp, ror #31
 800f670:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f672:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 800f676:	ea4f 71fb 	mov.w	r1, fp, ror #31
 800f67a:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 800f67e:	eb03 75fb 	add.w	r5, r3, fp, ror #31
 800f682:	910f      	str	r1, [sp, #60]	; 0x3c
 800f684:	ea80 01b7 	eor.w	r1, r0, r7, ror #2
 800f688:	eb05 02b2 	add.w	r2, r5, r2, ror #2
 800f68c:	4061      	eors	r1, r4
 800f68e:	4411      	add	r1, r2
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800f690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f692:	9d08      	ldr	r5, [sp, #32]
 800f694:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 800f698:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 800f69c:	9d02      	ldr	r5, [sp, #8]
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800f69e:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800f6a2:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 800f6a6:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800f6aa:	9203      	str	r2, [sp, #12]
 800f6ac:	ea84 08b7 	eor.w	r8, r4, r7, ror #2
 800f6b0:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800f6b4:	4402      	add	r2, r0
 800f6b6:	ea88 080c 	eor.w	r8, r8, ip
 800f6ba:	4490      	add	r8, r2
 800f6bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6be:	9804      	ldr	r0, [sp, #16]
 800f6c0:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6c6:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f6ca:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
 800f6ce:	9204      	str	r2, [sp, #16]
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800f6d0:	eb01 61fc 	add.w	r1, r1, ip, ror #27
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800f6d4:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 800f6d8:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800f6dc:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 800f6e0:	404e      	eors	r6, r1
 800f6e2:	9806      	ldr	r0, [sp, #24]
 800f6e4:	4416      	add	r6, r2
 800f6e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f6e8:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f6ec:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 800f6f0:	eb08 68f1 	add.w	r8, r8, r1, ror #27
 800f6f4:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 800f6f8:	ea4f 01b1 	mov.w	r1, r1, ror #2
 800f6fc:	ea81 07bc 	eor.w	r7, r1, ip, ror #2
 800f700:	eb03 72fa 	add.w	r2, r3, sl, ror #31
 800f704:	4422      	add	r2, r4
 800f706:	ea87 0708 	eor.w	r7, r7, r8
 800f70a:	9807      	ldr	r0, [sp, #28]
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f70c:	9c06      	ldr	r4, [sp, #24]
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800f70e:	4417      	add	r7, r2
 800f710:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f712:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800f716:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 800f71a:	9a03      	ldr	r2, [sp, #12]
 800f71c:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 800f720:	eb06 66f8 	add.w	r6, r6, r8, ror #27
 800f724:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
 800f728:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 800f72c:	eb00 00bc 	add.w	r0, r0, ip, ror #2
 800f730:	4072      	eors	r2, r6
 800f732:	4402      	add	r2, r0
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f734:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f736:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 800f73a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f73c:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 800f740:	9804      	ldr	r0, [sp, #16]
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800f742:	eb07 67f6 	add.w	r7, r7, r6, ror #27
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f746:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 800f74a:	ea4f 06b6 	mov.w	r6, r6, ror #2
 800f74e:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 800f752:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 800f756:	4401      	add	r1, r0
 800f758:	ea8c 0c07 	eor.w	ip, ip, r7
 800f75c:	9807      	ldr	r0, [sp, #28]
 800f75e:	448c      	add	ip, r1
 800f760:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f762:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 800f766:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 800f76a:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800f76e:	eb02 62f7 	add.w	r2, r2, r7, ror #27
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f772:	ea86 05b7 	eor.w	r5, r6, r7, ror #2
 800f776:	eb03 70f1 	add.w	r0, r3, r1, ror #31
 800f77a:	eb00 00b8 	add.w	r0, r0, r8, ror #2
 800f77e:	4055      	eors	r5, r2
 800f780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f784:	4405      	add	r5, r0
 800f786:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f788:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 800f78c:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 800f790:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 800f794:	ea80 70f9 	eor.w	r0, r0, r9, ror #31
 800f798:	ea4f 02b2 	mov.w	r2, r2, ror #2
 800f79c:	9006      	str	r0, [sp, #24]
 800f79e:	ea82 08b7 	eor.w	r8, r2, r7, ror #2
 800f7a2:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800f7a6:	4430      	add	r0, r6
 800f7a8:	ea88 080c 	eor.w	r8, r8, ip
 800f7ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f7ae:	4480      	add	r8, r0
 800f7b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f7b2:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800f7b6:	ea80 70fb 	eor.w	r0, r0, fp, ror #31
 800f7ba:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800f7be:	9007      	str	r0, [sp, #28]
 800f7c0:	9e07      	ldr	r6, [sp, #28]
 800f7c2:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 800f7c6:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
 800f7ca:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 800f7ce:	eb06 06b7 	add.w	r6, r6, r7, ror #2
 800f7d2:	4068      	eors	r0, r5
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f7d4:	9f08      	ldr	r7, [sp, #32]
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f7d6:	4430      	add	r0, r6
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f7d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f7da:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 800f7de:	9e03      	ldr	r6, [sp, #12]
 800f7e0:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f7e4:	eb08 68f5 	add.w	r8, r8, r5, ror #27
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f7e8:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 800f7ec:	ea4f 05b5 	mov.w	r5, r5, ror #2
 800f7f0:	eb03 76f7 	add.w	r6, r3, r7, ror #31
 800f7f4:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 800f7f8:	4432      	add	r2, r6
 800f7fa:	ea8e 0e08 	eor.w	lr, lr, r8
 800f7fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f800:	4496      	add	lr, r2
 800f802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f804:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
 800f808:	9a04      	ldr	r2, [sp, #16]
 800f80a:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 800f80e:	9a06      	ldr	r2, [sp, #24]
 800f810:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800f814:	eb00 60f8 	add.w	r0, r0, r8, ror #27
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f818:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
 800f81c:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
 800f820:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
 800f824:	4042      	eors	r2, r0
 800f826:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800f82a:	4462      	add	r2, ip
 800f82c:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800f830:	ea8c 7cfb 	eor.w	ip, ip, fp, ror #31
 800f834:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
 800f838:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f83c:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
 800f840:	ea8a 7afc 	eor.w	sl, sl, ip, ror #31
 800f844:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800f848:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 800f84c:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
 800f850:	44ab      	add	fp, r5
 800f852:	ea8c 0c0e 	eor.w	ip, ip, lr
 800f856:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f858:	44dc      	add	ip, fp
 800f85a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f85e:	ea85 75fb 	eor.w	r5, r5, fp, ror #31
 800f862:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 800f866:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 800f86a:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 800f86e:	ea80 05be 	eor.w	r5, r0, lr, ror #2
 800f872:	eb03 79f7 	add.w	r9, r3, r7, ror #31
 800f876:	eb09 09b8 	add.w	r9, r9, r8, ror #2
 800f87a:	4055      	eors	r5, r2
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f87c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f880:	444d      	add	r5, r9
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f882:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800f886:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800f88a:	ea88 74f4 	eor.w	r4, r8, r4, ror #31
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f88e:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f892:	ea84 76f6 	eor.w	r6, r4, r6, ror #31
 800f896:	ea4f 02b2 	mov.w	r2, r2, ror #2
 800f89a:	eb03 78f6 	add.w	r8, r3, r6, ror #31
 800f89e:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 800f8a2:	ea84 040c 	eor.w	r4, r4, ip
 800f8a6:	4440      	add	r0, r8
 800f8a8:	4420      	add	r0, r4
 800f8aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f8ac:	ea84 74fb 	eor.w	r4, r4, fp, ror #31
 800f8b0:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 800f8b4:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 800f8b8:	eb03 71f1 	add.w	r1, r3, r1, ror #31
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800f8bc:	eb05 65fc 	add.w	r5, r5, ip, ror #27
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f8c0:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
 800f8c4:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 800f8c8:	4069      	eors	r1, r5
 800f8ca:	9c03      	ldr	r4, [sp, #12]
 800f8cc:	448e      	add	lr, r1
 800f8ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f8d0:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800f8d4:	9c06      	ldr	r4, [sp, #24]
 800f8d6:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800f8da:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 800f8de:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 800f8e2:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800f8e6:	ea4f 05b5 	mov.w	r5, r5, ror #2
 800f8ea:	440a      	add	r2, r1
 800f8ec:	ea85 01bc 	eor.w	r1, r5, ip, ror #2
 800f8f0:	4041      	eors	r1, r0
 800f8f2:	9c04      	ldr	r4, [sp, #16]
 800f8f4:	440a      	add	r2, r1
 800f8f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f8f8:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800f8fc:	9c07      	ldr	r4, [sp, #28]
 800f8fe:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800f902:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
 800f906:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f908:	440b      	add	r3, r1
 800f90a:	eb03 73f6 	add.w	r3, r3, r6, ror #31
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f90e:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
        sha->digest[0] += a;
 800f912:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f916:	ea85 03b0 	eor.w	r3, r5, r0, ror #2
 800f91a:	ea83 030e 	eor.w	r3, r3, lr
        sha->digest[0] += a;
 800f91e:	9900      	ldr	r1, [sp, #0]
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800f920:	eb02 62fe 	add.w	r2, r2, lr, ror #27
        sha->digest[0] += a;
 800f924:	4463      	add	r3, ip
 800f926:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 800f92a:	64cb      	str	r3, [r1, #76]	; 0x4c
        sha->digest[1] += b;
 800f92c:	9b01      	ldr	r3, [sp, #4]
 800f92e:	441a      	add	r2, r3
        sha->digest[2] += c;
 800f930:	9b05      	ldr	r3, [sp, #20]
        sha->digest[1] += b;
 800f932:	650a      	str	r2, [r1, #80]	; 0x50
        sha->digest[2] += c;
 800f934:	eb03 01be 	add.w	r1, r3, lr, ror #2
 800f938:	9b00      	ldr	r3, [sp, #0]
 800f93a:	6559      	str	r1, [r3, #84]	; 0x54
        sha->digest[3] += d;
 800f93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f93e:	eb03 00b0 	add.w	r0, r3, r0, ror #2
 800f942:	9b00      	ldr	r3, [sp, #0]
 800f944:	6598      	str	r0, [r3, #88]	; 0x58
        sha->digest[4] += e;
 800f946:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f948:	441d      	add	r5, r3
 800f94a:	9b00      	ldr	r3, [sp, #0]

        (void)data; /* Not used */

        return 0;
    }
 800f94c:	2000      	movs	r0, #0
        sha->digest[4] += e;
 800f94e:	65dd      	str	r5, [r3, #92]	; 0x5c
    }
 800f950:	b017      	add	sp, #92	; 0x5c
 800f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f956:	bf00      	nop
 800f958:	ca62c1d6 	.word	0xca62c1d6

0800f95c <wc_InitSha_ex>:
** we'll assume this is ALWAYS for a new, uninitialized sha256
*/
int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
{
    int ret = 0;
    if (sha == NULL) {
 800f95c:	b1b8      	cbz	r0, 800f98e <wc_InitSha_ex+0x32>
        sha->digest[0] = 0x67452301L;
 800f95e:	4b0d      	ldr	r3, [pc, #52]	; (800f994 <wc_InitSha_ex+0x38>)
 800f960:	64c3      	str	r3, [r0, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 800f962:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800f966:	6503      	str	r3, [r0, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 800f968:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 800f96c:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 800f970:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 800f974:	6543      	str	r3, [r0, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 800f976:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 800f97a:	6583      	str	r3, [r0, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 800f97c:	4b06      	ldr	r3, [pc, #24]	; (800f998 <wc_InitSha_ex+0x3c>)
 800f97e:	65c3      	str	r3, [r0, #92]	; 0x5c
        sha->buffLen = 0;
 800f980:	2300      	movs	r3, #0
        sha->loLen   = 0;
 800f982:	e9c0 3300 	strd	r3, r3, [r0]
        return BAD_FUNC_ARG;
    }

    sha->heap = heap;
 800f986:	6601      	str	r1, [r0, #96]	; 0x60
        sha->hiLen   = 0;
 800f988:	6083      	str	r3, [r0, #8]
# endif /* WOLFSSL_ASYNC_CRYPT */
#ifdef WOLFSSL_IMXRT1170_CAAM
   ret = wc_CAAM_HashInit(&sha->hndl, &sha->ctx, WC_HASH_TYPE_SHA);
#endif

    return ret;
 800f98a:	4618      	mov	r0, r3
 800f98c:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800f98e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
} /* wc_InitSha_ex */
 800f992:	4770      	bx	lr
 800f994:	67452301 	.word	0x67452301
 800f998:	c3d2e1f0 	.word	0xc3d2e1f0

0800f99c <wc_ShaUpdate>:

/* do block size increments/updates */
int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
{
 800f99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9a0:	460f      	mov	r7, r1
 800f9a2:	4614      	mov	r4, r2
    int ret = 0;
    word32 blocksLen;
    byte* local;

    if (sha == NULL || (data == NULL && len > 0)) {
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d05a      	beq.n	800fa60 <wc_ShaUpdate+0xc4>
 800f9aa:	b939      	cbnz	r1, 800f9bc <wc_ShaUpdate+0x20>
        return BAD_FUNC_ARG;
    }

    if (data == NULL && len == 0) {
        /* valid, but do nothing */
        return 0;
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	bf14      	ite	ne
 800f9b0:	f06f 06ac 	mvnne.w	r6, #172	; 0xac
 800f9b4:	2600      	moveq	r6, #0
        XMEMCPY(local, data, len);
        sha->buffLen = len;
    }

    return ret;
}
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sha->buffLen >= WC_SHA_BLOCK_SIZE) {
 800f9bc:	6800      	ldr	r0, [r0, #0]
 800f9be:	283f      	cmp	r0, #63	; 0x3f
 800f9c0:	d851      	bhi.n	800fa66 <wc_ShaUpdate+0xca>
        sha->hiLen++;                       /* carry low to high */
 800f9c2:	686b      	ldr	r3, [r5, #4]
 800f9c4:	18d3      	adds	r3, r2, r3
    if ((sha->loLen += len) < tmp)
 800f9c6:	606b      	str	r3, [r5, #4]
        sha->hiLen++;                       /* carry low to high */
 800f9c8:	bf22      	ittt	cs
 800f9ca:	68ab      	ldrcs	r3, [r5, #8]
 800f9cc:	3301      	addcs	r3, #1
 800f9ce:	60ab      	strcs	r3, [r5, #8]
    local = (byte*)sha->buffer;
 800f9d0:	f105 080c 	add.w	r8, r5, #12
    if (sha->buffLen > 0) {
 800f9d4:	b1d8      	cbz	r0, 800fa0e <wc_ShaUpdate+0x72>
        blocksLen = min(len, WC_SHA_BLOCK_SIZE - sha->buffLen);
 800f9d6:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
        return a > b ? b : a;
 800f9da:	4296      	cmp	r6, r2
 800f9dc:	bf28      	it	cs
 800f9de:	4616      	movcs	r6, r2
        XMEMCPY(&local[sha->buffLen], data, blocksLen);
 800f9e0:	4632      	mov	r2, r6
 800f9e2:	4440      	add	r0, r8
 800f9e4:	f00d ffde 	bl	801d9a4 <memcpy>
        sha->buffLen += blocksLen;
 800f9e8:	682a      	ldr	r2, [r5, #0]
 800f9ea:	4432      	add	r2, r6
        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 800f9ec:	2a40      	cmp	r2, #64	; 0x40
        sha->buffLen += blocksLen;
 800f9ee:	602a      	str	r2, [r5, #0]
        data         += blocksLen;
 800f9f0:	4437      	add	r7, r6
        len          -= blocksLen;
 800f9f2:	eba4 0406 	sub.w	r4, r4, r6
        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 800f9f6:	d10a      	bne.n	800fa0e <wc_ShaUpdate+0x72>
            ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 800f9f8:	4641      	mov	r1, r8
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	f7ff f8b3 	bl	800eb66 <ByteReverseWords>
            ret = XTRANSFORM(sha, (const byte*)local);
 800fa00:	4628      	mov	r0, r5
 800fa02:	f7ff f8bd 	bl	800eb80 <Transform>
            if (ret != 0) {
 800fa06:	4606      	mov	r6, r0
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d1d4      	bne.n	800f9b6 <wc_ShaUpdate+0x1a>
            sha->buffLen = 0; /* Nothing left to do, so set to zero. */
 800fa0c:	6028      	str	r0, [r5, #0]
{
 800fa0e:	46a1      	mov	r9, r4
 800fa10:	2600      	movs	r6, #0
 800fa12:	eb07 0a04 	add.w	sl, r7, r4
    while (len >= WC_SHA_BLOCK_SIZE) {
 800fa16:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 800fa1a:	ebaa 0109 	sub.w	r1, sl, r9
 800fa1e:	d80f      	bhi.n	800fa40 <wc_ShaUpdate+0xa4>
 800fa20:	09a2      	lsrs	r2, r4, #6
 800fa22:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800fa26:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 800fa2a:	fb03 4402 	mla	r4, r3, r2, r4
    if (len > 0) {
 800fa2e:	4439      	add	r1, r7
 800fa30:	2c00      	cmp	r4, #0
 800fa32:	d0c0      	beq.n	800f9b6 <wc_ShaUpdate+0x1a>
        XMEMCPY(local, data, len);
 800fa34:	4622      	mov	r2, r4
 800fa36:	4640      	mov	r0, r8
 800fa38:	f00d ffb4 	bl	801d9a4 <memcpy>
        sha->buffLen = len;
 800fa3c:	602c      	str	r4, [r5, #0]
 800fa3e:	e7ba      	b.n	800f9b6 <wc_ShaUpdate+0x1a>
            XMEMCPY(local32, data, WC_SHA_BLOCK_SIZE);
 800fa40:	2240      	movs	r2, #64	; 0x40
 800fa42:	4640      	mov	r0, r8
 800fa44:	f00d ffae 	bl	801d9a4 <memcpy>
        ByteReverseWords(local32, local32, WC_SHA_BLOCK_SIZE);
 800fa48:	2240      	movs	r2, #64	; 0x40
 800fa4a:	4641      	mov	r1, r8
 800fa4c:	4640      	mov	r0, r8
 800fa4e:	f7ff f88a 	bl	800eb66 <ByteReverseWords>
        ret = XTRANSFORM(sha, (const byte*)local32);
 800fa52:	4628      	mov	r0, r5
 800fa54:	f7ff f894 	bl	800eb80 <Transform>
        len  -= WC_SHA_BLOCK_SIZE;
 800fa58:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        ret = XTRANSFORM(sha, (const byte*)local32);
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	e7da      	b.n	800fa16 <wc_ShaUpdate+0x7a>
        return BAD_FUNC_ARG;
 800fa60:	f06f 06ac 	mvn.w	r6, #172	; 0xac
 800fa64:	e7a7      	b.n	800f9b6 <wc_ShaUpdate+0x1a>
        return BUFFER_E;
 800fa66:	f06f 0683 	mvn.w	r6, #131	; 0x83
 800fa6a:	e7a4      	b.n	800f9b6 <wc_ShaUpdate+0x1a>

0800fa6c <wc_ShaFinalRaw>:

int wc_ShaFinalRaw(wc_Sha* sha, byte* hash)
{
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	460c      	mov	r4, r1
 800fa70:	b086      	sub	sp, #24
#ifdef LITTLE_ENDIAN_ORDER
    word32 digest[WC_SHA_DIGEST_SIZE / sizeof(word32)];
#endif

    if (sha == NULL || hash == NULL) {
 800fa72:	b170      	cbz	r0, 800fa92 <wc_ShaFinalRaw+0x26>
 800fa74:	b169      	cbz	r1, 800fa92 <wc_ShaFinalRaw+0x26>
        return BAD_FUNC_ARG;
    }

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords((word32*)digest, (word32*)sha->digest, WC_SHA_DIGEST_SIZE);
 800fa76:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800fa7a:	2214      	movs	r2, #20
 800fa7c:	a801      	add	r0, sp, #4
 800fa7e:	f7ff f872 	bl	800eb66 <ByteReverseWords>
    XMEMCPY(hash, (byte *)&digest[0], WC_SHA_DIGEST_SIZE);
 800fa82:	4601      	mov	r1, r0
 800fa84:	2214      	movs	r2, #20
 800fa86:	4620      	mov	r0, r4
 800fa88:	f00d ff8c 	bl	801d9a4 <memcpy>
#else
    XMEMCPY(hash, sha->digest, WC_SHA_DIGEST_SIZE);
#endif

    return 0;
 800fa8c:	2000      	movs	r0, #0
}
 800fa8e:	b006      	add	sp, #24
 800fa90:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 800fa92:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800fa96:	e7fa      	b.n	800fa8e <wc_ShaFinalRaw+0x22>

0800fa98 <wc_ShaFinal>:
/*
** Finalizes hashing of data. Result is placed into hash.
** Resets state of sha struct.
*/
int wc_ShaFinal(wc_Sha* sha, byte* hash)
{
 800fa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9a:	460f      	mov	r7, r1
    int ret;
    byte* local;

    if (sha == NULL || hash == NULL) {
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d067      	beq.n	800fb72 <wc_ShaFinal+0xda>
 800faa2:	2900      	cmp	r1, #0
 800faa4:	d065      	beq.n	800fb72 <wc_ShaFinal+0xda>
        return BAD_FUNC_ARG;
    }

    local = (byte*)sha->buffer;
 800faa6:	4606      	mov	r6, r0
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* we'll add a 0x80 byte at the end,
    ** so make sure we have appropriate buffer length. */
    if (sha->buffLen > WC_SHA_BLOCK_SIZE - 1) {
 800faa8:	f856 3b0c 	ldr.w	r3, [r6], #12
 800faac:	2b3f      	cmp	r3, #63	; 0x3f
 800faae:	d863      	bhi.n	800fb78 <wc_ShaFinal+0xe0>
        /* exit with error code if there's a bad buffer size in buffLen */
        return BAD_STATE_E;
    } /* buffLen check */

    local[sha->buffLen++] = 0x80;  /* add 1 */
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	6002      	str	r2, [r0, #0]
 800fab4:	2280      	movs	r2, #128	; 0x80
 800fab6:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (sha->buffLen > WC_SHA_PAD_SIZE) {
 800fab8:	6800      	ldr	r0, [r0, #0]
 800faba:	2838      	cmp	r0, #56	; 0x38
 800fabc:	d912      	bls.n	800fae4 <wc_ShaFinal+0x4c>
        XMEMSET(&local[sha->buffLen], 0, WC_SHA_BLOCK_SIZE - sha->buffLen);
 800fabe:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800fac2:	2100      	movs	r1, #0
 800fac4:	4430      	add	r0, r6
 800fac6:	f00d ff95 	bl	801d9f4 <memset>
        sha->buffLen += WC_SHA_BLOCK_SIZE - sha->buffLen;
 800faca:	2240      	movs	r2, #64	; 0x40
 800facc:	6022      	str	r2, [r4, #0]

    #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 800face:	4631      	mov	r1, r6
 800fad0:	4630      	mov	r0, r6
 800fad2:	f7ff f848 	bl	800eb66 <ByteReverseWords>
    #else
        /*
        ** The #if defined(WOLFSSL_USE_ESP32C3_CRYPT_HASH_HW) also falls
        ** though here to SW, as it's not yet implemented for HW.
        */
        ret = XTRANSFORM(sha, (const byte*)local);
 800fad6:	4620      	mov	r0, r4
 800fad8:	f7ff f852 	bl	800eb80 <Transform>
    #endif
        if (ret != 0) {
 800fadc:	4605      	mov	r5, r0
 800fade:	2800      	cmp	r0, #0
 800fae0:	d145      	bne.n	800fb6e <wc_ShaFinal+0xd6>
            return ret;
        }

        sha->buffLen = 0;
 800fae2:	6020      	str	r0, [r4, #0]
    } /*  (sha->buffLen > WC_SHA_PAD_SIZE) */

    XMEMSET(&local[sha->buffLen], 0, WC_SHA_PAD_SIZE - sha->buffLen);
 800fae4:	6820      	ldr	r0, [r4, #0]
 800fae6:	2100      	movs	r1, #0
 800fae8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800faec:	4430      	add	r0, r6
 800faee:	f00d ff81 	bl	801d9f4 <memset>

#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 800faf2:	2240      	movs	r2, #64	; 0x40
 800faf4:	4631      	mov	r1, r6
 800faf6:	4630      	mov	r0, r6
 800faf8:	f7ff f835 	bl	800eb66 <ByteReverseWords>
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 800fafc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800fb00:	0f5a      	lsrs	r2, r3, #29
 800fb02:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    sha->loLen = sha->loLen << 3;
 800fb06:	00db      	lsls	r3, r3, #3
 800fb08:	6063      	str	r3, [r4, #4]
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 800fb0a:	60a2      	str	r2, [r4, #8]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
 800fb0c:	f104 0108 	add.w	r1, r4, #8
 800fb10:	2204      	movs	r2, #4
 800fb12:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800fb16:	f00d ff45 	bl	801d9a4 <memcpy>
    XMEMCPY(&local[WC_SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
 800fb1a:	2204      	movs	r2, #4
 800fb1c:	18a1      	adds	r1, r4, r2
 800fb1e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800fb22:	f00d ff3f 	bl	801d9a4 <memcpy>
/*
** The #if defined(WOLFSSL_USE_ESP32C3_CRYPT_HASH_HW) also falls
** though here to SW, as it's not yet implemented for HW.
*/
#else
    ret = XTRANSFORM(sha, (const byte*)local);
 800fb26:	4631      	mov	r1, r6
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f7ff f829 	bl	800eb80 <Transform>
#endif

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 800fb2e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800fb32:	2214      	movs	r2, #20
    ret = XTRANSFORM(sha, (const byte*)local);
 800fb34:	4605      	mov	r5, r0
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 800fb36:	4608      	mov	r0, r1
 800fb38:	f7ff f815 	bl	800eb66 <ByteReverseWords>
#endif

    XMEMCPY(hash, (byte *)&sha->digest[0], WC_SHA_DIGEST_SIZE);
 800fb3c:	2214      	movs	r2, #20
 800fb3e:	4638      	mov	r0, r7
 800fb40:	f00d ff30 	bl	801d9a4 <memcpy>
        sha->digest[0] = 0x67452301L;
 800fb44:	4b0e      	ldr	r3, [pc, #56]	; (800fb80 <wc_ShaFinal+0xe8>)
 800fb46:	64e3      	str	r3, [r4, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 800fb48:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800fb4c:	6523      	str	r3, [r4, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 800fb4e:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 800fb52:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 800fb56:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 800fb5a:	6563      	str	r3, [r4, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 800fb5c:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 800fb60:	65a3      	str	r3, [r4, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 800fb62:	4b08      	ldr	r3, [pc, #32]	; (800fb84 <wc_ShaFinal+0xec>)
 800fb64:	65e3      	str	r3, [r4, #92]	; 0x5c
        sha->buffLen = 0;
 800fb66:	2300      	movs	r3, #0
        sha->loLen   = 0;
 800fb68:	e9c4 3300 	strd	r3, r3, [r4]
        sha->hiLen   = 0;
 800fb6c:	60a3      	str	r3, [r4, #8]
     * which may cause fall back to SW if HW is busy. we do not return result
     * of initSha here */
    (void)InitSha(sha); /* reset state */

    return ret;
}
 800fb6e:	4628      	mov	r0, r5
 800fb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 800fb72:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800fb76:	e7fa      	b.n	800fb6e <wc_ShaFinal+0xd6>
        return BAD_STATE_E;
 800fb78:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 800fb7c:	e7f7      	b.n	800fb6e <wc_ShaFinal+0xd6>
 800fb7e:	bf00      	nop
 800fb80:	67452301 	.word	0x67452301
 800fb84:	c3d2e1f0 	.word	0xc3d2e1f0

0800fb88 <wc_ShaFree>:
    }
#endif
#ifdef WOLFSSL_IMXRT_DCP
    DCPShaFree(sha);
#endif
}
 800fb88:	4770      	bx	lr

0800fb8a <wc_ShaCopy>:

    return ret;
}

int wc_ShaCopy(wc_Sha* src, wc_Sha* dst)
{
 800fb8a:	b508      	push	{r3, lr}
 800fb8c:	460b      	mov	r3, r1
    int ret = 0;

    if (src == NULL || dst == NULL)
 800fb8e:	4601      	mov	r1, r0
 800fb90:	b130      	cbz	r0, 800fba0 <wc_ShaCopy+0x16>
 800fb92:	b12b      	cbz	r3, 800fba0 <wc_ShaCopy+0x16>
        return BAD_FUNC_ARG;

    XMEMCPY(dst, src, sizeof(wc_Sha));
 800fb94:	2264      	movs	r2, #100	; 0x64
 800fb96:	4618      	mov	r0, r3
 800fb98:	f00d ff04 	bl	801d9a4 <memcpy>
#endif

#ifdef WOLFSSL_HASH_FLAGS
    dst->flags |= WC_HASH_FLAG_ISCOPY;
#endif
    return ret;
 800fb9c:	2000      	movs	r0, #0
}
 800fb9e:	bd08      	pop	{r3, pc}
        return BAD_FUNC_ARG;
 800fba0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800fba4:	e7fb      	b.n	800fb9e <wc_ShaCopy+0x14>

0800fba6 <wc_ShaGetHash>:
{
 800fba6:	b570      	push	{r4, r5, r6, lr}
 800fba8:	460e      	mov	r6, r1
    if (sha == NULL || hash == NULL) {
 800fbaa:	4604      	mov	r4, r0
 800fbac:	b1a8      	cbz	r0, 800fbda <wc_ShaGetHash+0x34>
 800fbae:	b1a1      	cbz	r1, 800fbda <wc_ShaGetHash+0x34>
    tmpSha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL,
 800fbb0:	2064      	movs	r0, #100	; 0x64
 800fbb2:	f00d fed7 	bl	801d964 <malloc>
    if (tmpSha == NULL) {
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	b190      	cbz	r0, 800fbe0 <wc_ShaGetHash+0x3a>
    ret = wc_ShaCopy(sha, tmpSha);
 800fbba:	4601      	mov	r1, r0
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f7ff ffe4 	bl	800fb8a <wc_ShaCopy>
    if (ret == 0) {
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	b920      	cbnz	r0, 800fbd0 <wc_ShaGetHash+0x2a>
        ret = wc_ShaFinal(tmpSha, hash);
 800fbc6:	4631      	mov	r1, r6
 800fbc8:	4628      	mov	r0, r5
 800fbca:	f7ff ff65 	bl	800fa98 <wc_ShaFinal>
 800fbce:	4604      	mov	r4, r0
    XFREE(tmpSha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	f00d fecf 	bl	801d974 <free>
}
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 800fbda:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800fbde:	e7fa      	b.n	800fbd6 <wc_ShaGetHash+0x30>
        return MEMORY_E;
 800fbe0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800fbe4:	e7f7      	b.n	800fbd6 <wc_ShaGetHash+0x30>

0800fbe6 <ByteReverseWords>:
{
 800fbe6:	b510      	push	{r4, lr}
        word32 count = byteCount/(word32)sizeof(word32);
 800fbe8:	0892      	lsrs	r2, r2, #2
        for (i = 0; i < count; i++)
 800fbea:	2300      	movs	r3, #0
            out[i] = ByteReverseWord32(in[i]);
 800fbec:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800fbf0:	ba24      	rev	r4, r4
 800fbf2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (i = 0; i < count; i++)
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d1f7      	bne.n	800fbec <ByteReverseWords+0x6>
}
 800fbfc:	bd10      	pop	{r4, pc}
	...

0800fc00 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 800fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc04:	4604      	mov	r4, r0
 800fc06:	b08d      	sub	sp, #52	; 0x34
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 800fc08:	f44f 7080 	mov.w	r0, #256	; 0x100
    {
 800fc0c:	460d      	mov	r5, r1
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 800fc0e:	f00d fea9 	bl	801d964 <malloc>
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 800fc12:	4682      	mov	sl, r0
 800fc14:	2800      	cmp	r0, #0
 800fc16:	f000 818e 	beq.w	800ff36 <Transform_Sha256+0x336>
 800fc1a:	1f23      	subs	r3, r4, #4
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	ab04      	add	r3, sp, #16
 800fc20:	9301      	str	r3, [sp, #4]
 800fc22:	f104 031c 	add.w	r3, r4, #28
 800fc26:	9302      	str	r3, [sp, #8]
 800fc28:	e9dd 3200 	ldrd	r3, r2, [sp]
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];
 800fc2c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800fc30:	f842 1b04 	str.w	r1, [r2], #4
        for (i = 0; i < 8; i++)
 800fc34:	9902      	ldr	r1, [sp, #8]
 800fc36:	4299      	cmp	r1, r3
 800fc38:	d1f8      	bne.n	800fc2c <Transform_Sha256+0x2c>

        for (i = 0; i < 16; i++)
 800fc3a:	2300      	movs	r3, #0
            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
 800fc3c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800fc40:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
        for (i = 0; i < 16; i++)
 800fc44:	3301      	adds	r3, #1
 800fc46:	2b10      	cmp	r3, #16
 800fc48:	d1f8      	bne.n	800fc3c <Transform_Sha256+0x3c>
 800fc4a:	46d0      	mov	r8, sl
 800fc4c:	f10a 00c0 	add.w	r0, sl, #192	; 0xc0
 800fc50:	4652      	mov	r2, sl

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 800fc52:	6b91      	ldr	r1, [r2, #56]	; 0x38
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 800fc54:	4615      	mov	r5, r2
 800fc56:	ea4f 43f1 	mov.w	r3, r1, ror #19
 800fc5a:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 800fc5e:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 800fc62:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800fc64:	682d      	ldr	r5, [r5, #0]
 800fc66:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800fc6a:	4429      	add	r1, r5
 800fc6c:	440b      	add	r3, r1
 800fc6e:	ea4f 41b4 	mov.w	r1, r4, ror #18
 800fc72:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
 800fc76:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
 800fc7a:	440b      	add	r3, r1
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800fc7c:	4290      	cmp	r0, r2
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 800fc7e:	63d3      	str	r3, [r2, #60]	; 0x3c
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800fc80:	d1e7      	bne.n	800fc52 <Transform_Sha256+0x52>
 800fc82:	e9dd 1009 	ldrd	r1, r0, [sp, #36]	; 0x24
 800fc86:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 800fc8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc8e:	f50a 7680 	add.w	r6, sl, #256	; 0x100
 800fc92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fc94:	9c08      	ldr	r4, [sp, #32]
 800fc96:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 800ff3c <Transform_Sha256+0x33c>
 800fc9a:	9603      	str	r6, [sp, #12]
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
            RND(0); RND(1); RND(2); RND(3);
 800fc9c:	f8d8 7000 	ldr.w	r7, [r8]
 800fca0:	f8d9 6000 	ldr.w	r6, [r9]
 800fca4:	ea4f 2bf4 	mov.w	fp, r4, ror #11
 800fca8:	ea8b 1bb4 	eor.w	fp, fp, r4, ror #6
 800fcac:	443e      	add	r6, r7
 800fcae:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
 800fcb2:	44b3      	add	fp, r6
 800fcb4:	ea80 0601 	eor.w	r6, r0, r1
 800fcb8:	4026      	ands	r6, r4
 800fcba:	4046      	eors	r6, r0
 800fcbc:	44b3      	add	fp, r6
 800fcbe:	ea4e 070c 	orr.w	r7, lr, ip
 800fcc2:	ea4f 06be 	mov.w	r6, lr, ror #2
 800fcc6:	445d      	add	r5, fp
 800fcc8:	ea86 367e 	eor.w	r6, r6, lr, ror #13
 800fccc:	ea0e 0b0c 	and.w	fp, lr, ip
 800fcd0:	4017      	ands	r7, r2
 800fcd2:	ea86 56be 	eor.w	r6, r6, lr, ror #22
 800fcd6:	ea47 070b 	orr.w	r7, r7, fp
 800fcda:	4437      	add	r7, r6
 800fcdc:	442b      	add	r3, r5
 800fcde:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800fce2:	443d      	add	r5, r7
 800fce4:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fce8:	ea84 0b01 	eor.w	fp, r4, r1
 800fcec:	443e      	add	r6, r7
 800fcee:	4430      	add	r0, r6
 800fcf0:	ea0b 0b03 	and.w	fp, fp, r3
 800fcf4:	ea4f 26f3 	mov.w	r6, r3, ror #11
 800fcf8:	ea8b 0b01 	eor.w	fp, fp, r1
 800fcfc:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
 800fd00:	4458      	add	r0, fp
 800fd02:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 800fd06:	4406      	add	r6, r0
 800fd08:	ea45 070e 	orr.w	r7, r5, lr
 800fd0c:	ea4f 3075 	mov.w	r0, r5, ror #13
 800fd10:	ea05 0b0e 	and.w	fp, r5, lr
 800fd14:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 800fd18:	ea07 070c 	and.w	r7, r7, ip
 800fd1c:	ea47 070b 	orr.w	r7, r7, fp
 800fd20:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 800fd24:	4438      	add	r0, r7
 800fd26:	4430      	add	r0, r6
 800fd28:	4432      	add	r2, r6
 800fd2a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800fd2e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800fd32:	ea84 0b03 	eor.w	fp, r4, r3
 800fd36:	443e      	add	r6, r7
 800fd38:	4431      	add	r1, r6
 800fd3a:	ea0b 0b02 	and.w	fp, fp, r2
 800fd3e:	ea4f 26f2 	mov.w	r6, r2, ror #11
 800fd42:	ea8b 0b04 	eor.w	fp, fp, r4
 800fd46:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
 800fd4a:	4459      	add	r1, fp
 800fd4c:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 800fd50:	440e      	add	r6, r1
 800fd52:	ea45 0700 	orr.w	r7, r5, r0
 800fd56:	ea4f 3170 	mov.w	r1, r0, ror #13
 800fd5a:	ea05 0b00 	and.w	fp, r5, r0
 800fd5e:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 800fd62:	ea07 070e 	and.w	r7, r7, lr
 800fd66:	ea47 070b 	orr.w	r7, r7, fp
 800fd6a:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 800fd6e:	4439      	add	r1, r7
 800fd70:	4431      	add	r1, r6
 800fd72:	44b4      	add	ip, r6
 800fd74:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800fd78:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800fd7c:	ea83 0b02 	eor.w	fp, r3, r2
 800fd80:	443e      	add	r6, r7
 800fd82:	4434      	add	r4, r6
 800fd84:	ea0b 0b0c 	and.w	fp, fp, ip
 800fd88:	ea4f 26fc 	mov.w	r6, ip, ror #11
 800fd8c:	ea8b 0b03 	eor.w	fp, fp, r3
 800fd90:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 800fd94:	445c      	add	r4, fp
 800fd96:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 800fd9a:	4426      	add	r6, r4
 800fd9c:	ea40 0701 	orr.w	r7, r0, r1
 800fda0:	ea4f 3471 	mov.w	r4, r1, ror #13
 800fda4:	ea00 0b01 	and.w	fp, r0, r1
 800fda8:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 800fdac:	402f      	ands	r7, r5
 800fdae:	ea47 070b 	orr.w	r7, r7, fp
 800fdb2:	ea84 54b1 	eor.w	r4, r4, r1, ror #22
 800fdb6:	443c      	add	r4, r7
 800fdb8:	4434      	add	r4, r6
 800fdba:	44b6      	add	lr, r6
            RND(4); RND(5); RND(6); RND(7);
 800fdbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fdc0:	f8d9 6010 	ldr.w	r6, [r9, #16]
 800fdc4:	ea82 0b0c 	eor.w	fp, r2, ip
 800fdc8:	443e      	add	r6, r7
 800fdca:	4433      	add	r3, r6
 800fdcc:	ea0b 0b0e 	and.w	fp, fp, lr
 800fdd0:	ea4f 26fe 	mov.w	r6, lr, ror #11
 800fdd4:	ea8b 0b02 	eor.w	fp, fp, r2
 800fdd8:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 800fddc:	445b      	add	r3, fp
 800fdde:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 800fde2:	441e      	add	r6, r3
 800fde4:	ea41 0704 	orr.w	r7, r1, r4
 800fde8:	ea4f 3374 	mov.w	r3, r4, ror #13
 800fdec:	ea01 0b04 	and.w	fp, r1, r4
 800fdf0:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 800fdf4:	4007      	ands	r7, r0
 800fdf6:	ea47 070b 	orr.w	r7, r7, fp
 800fdfa:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 800fdfe:	443b      	add	r3, r7
 800fe00:	4433      	add	r3, r6
 800fe02:	4435      	add	r5, r6
 800fe04:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800fe08:	f8d9 6014 	ldr.w	r6, [r9, #20]
 800fe0c:	ea8c 0b0e 	eor.w	fp, ip, lr
 800fe10:	443e      	add	r6, r7
 800fe12:	4432      	add	r2, r6
 800fe14:	ea0b 0b05 	and.w	fp, fp, r5
 800fe18:	ea4f 26f5 	mov.w	r6, r5, ror #11
 800fe1c:	ea8b 0b0c 	eor.w	fp, fp, ip
 800fe20:	ea86 16b5 	eor.w	r6, r6, r5, ror #6
 800fe24:	445a      	add	r2, fp
 800fe26:	ea86 6675 	eor.w	r6, r6, r5, ror #25
 800fe2a:	4416      	add	r6, r2
 800fe2c:	ea44 0703 	orr.w	r7, r4, r3
 800fe30:	ea4f 3273 	mov.w	r2, r3, ror #13
 800fe34:	ea04 0b03 	and.w	fp, r4, r3
 800fe38:	400f      	ands	r7, r1
 800fe3a:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 800fe3e:	ea47 070b 	orr.w	r7, r7, fp
 800fe42:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 800fe46:	443a      	add	r2, r7
 800fe48:	4432      	add	r2, r6
 800fe4a:	4430      	add	r0, r6
 800fe4c:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800fe50:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800fe54:	ea8e 0b05 	eor.w	fp, lr, r5
 800fe58:	443e      	add	r6, r7
 800fe5a:	44b4      	add	ip, r6
 800fe5c:	ea0b 0b00 	and.w	fp, fp, r0
 800fe60:	ea4f 26f0 	mov.w	r6, r0, ror #11
 800fe64:	ea8b 0b0e 	eor.w	fp, fp, lr
 800fe68:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 800fe6c:	44dc      	add	ip, fp
 800fe6e:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 800fe72:	4466      	add	r6, ip
 800fe74:	ea43 0702 	orr.w	r7, r3, r2
 800fe78:	ea4f 3c72 	mov.w	ip, r2, ror #13
 800fe7c:	4027      	ands	r7, r4
 800fe7e:	ea03 0b02 	and.w	fp, r3, r2
 800fe82:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 800fe86:	ea47 070b 	orr.w	r7, r7, fp
 800fe8a:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 800fe8e:	44bc      	add	ip, r7
 800fe90:	44b4      	add	ip, r6
 800fe92:	4431      	add	r1, r6
 800fe94:	f8d8 701c 	ldr.w	r7, [r8, #28]
 800fe98:	f8d9 601c 	ldr.w	r6, [r9, #28]
 800fe9c:	ea85 0b00 	eor.w	fp, r5, r0
 800fea0:	443e      	add	r6, r7
 800fea2:	44b6      	add	lr, r6
 800fea4:	ea0b 0b01 	and.w	fp, fp, r1
 800fea8:	ea4f 26f1 	mov.w	r6, r1, ror #11
 800feac:	ea8b 0b05 	eor.w	fp, fp, r5
 800feb0:	ea86 16b1 	eor.w	r6, r6, r1, ror #6
 800feb4:	44de      	add	lr, fp
 800feb6:	ea86 6671 	eor.w	r6, r6, r1, ror #25
 800feba:	4476      	add	r6, lr
 800febc:	ea42 070c 	orr.w	r7, r2, ip
 800fec0:	ea4f 3e7c 	mov.w	lr, ip, ror #13
 800fec4:	ea8e 0ebc 	eor.w	lr, lr, ip, ror #2
 800fec8:	401f      	ands	r7, r3
 800feca:	ea02 0b0c 	and.w	fp, r2, ip
 800fece:	ea8e 5ebc 	eor.w	lr, lr, ip, ror #22
 800fed2:	ea47 070b 	orr.w	r7, r7, fp
 800fed6:	44be      	add	lr, r7
 800fed8:	4434      	add	r4, r6
 800feda:	44b6      	add	lr, r6
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 800fedc:	9e03      	ldr	r6, [sp, #12]
 800fede:	f108 0820 	add.w	r8, r8, #32
 800fee2:	4546      	cmp	r6, r8
 800fee4:	f109 0920 	add.w	r9, r9, #32
 800fee8:	f47f aed8 	bne.w	800fc9c <Transform_Sha256+0x9c>
 800feec:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
 800fef0:	e9cd ec04 	strd	lr, ip, [sp, #16]
 800fef4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fef8:	950b      	str	r5, [sp, #44]	; 0x2c
 800fefa:	9408      	str	r4, [sp, #32]
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
            sha256->digest[i] += S[i];
 800fefc:	9b01      	ldr	r3, [sp, #4]
 800fefe:	9900      	ldr	r1, [sp, #0]
 800ff00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff04:	9301      	str	r3, [sp, #4]
 800ff06:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800ff0a:	9100      	str	r1, [sp, #0]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	600b      	str	r3, [r1, #0]
        for (i = 0; i < 8; i++) {
 800ff10:	9b02      	ldr	r3, [sp, #8]
 800ff12:	428b      	cmp	r3, r1
 800ff14:	d1f2      	bne.n	800fefc <Transform_Sha256+0x2fc>
 800ff16:	f50a 7280 	add.w	r2, sl, #256	; 0x100
 800ff1a:	4653      	mov	r3, sl
 800ff1c:	2100      	movs	r1, #0
    while (len--) *z++ = 0;
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d106      	bne.n	800ff30 <Transform_Sha256+0x330>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        ForceZero(W, sizeof(word32) * WC_SHA256_BLOCK_SIZE);
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800ff22:	4650      	mov	r0, sl
 800ff24:	f00d fd26 	bl	801d974 <free>
    #endif
        return 0;
 800ff28:	2000      	movs	r0, #0
    }
 800ff2a:	b00d      	add	sp, #52	; 0x34
 800ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff30:	f803 1b01 	strb.w	r1, [r3], #1
 800ff34:	e7f3      	b.n	800ff1e <Transform_Sha256+0x31e>
            return MEMORY_E;
 800ff36:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800ff3a:	e7f6      	b.n	800ff2a <Transform_Sha256+0x32a>
 800ff3c:	080227ec 	.word	0x080227ec

0800ff40 <wc_InitSha256_ex>:
    {
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	460d      	mov	r5, r1
        if (sha256 == NULL)
 800ff44:	4604      	mov	r4, r0
 800ff46:	b1f0      	cbz	r0, 800ff86 <wc_InitSha256_ex+0x46>
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 800ff48:	2220      	movs	r2, #32
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	f00d fd52 	bl	801d9f4 <memset>
    sha256->digest[1] = 0xBB67AE85L;
 800ff50:	4b0e      	ldr	r3, [pc, #56]	; (800ff8c <wc_InitSha256_ex+0x4c>)
 800ff52:	4a0f      	ldr	r2, [pc, #60]	; (800ff90 <wc_InitSha256_ex+0x50>)
    sha256->digest[3] = 0xA54FF53AL;
 800ff54:	490f      	ldr	r1, [pc, #60]	; (800ff94 <wc_InitSha256_ex+0x54>)
    sha256->digest[5] = 0x9B05688CL;
 800ff56:	4810      	ldr	r0, [pc, #64]	; (800ff98 <wc_InitSha256_ex+0x58>)
    sha256->digest[1] = 0xBB67AE85L;
 800ff58:	e9c4 2300 	strd	r2, r3, [r4]
    sha256->digest[3] = 0xA54FF53AL;
 800ff5c:	4b0f      	ldr	r3, [pc, #60]	; (800ff9c <wc_InitSha256_ex+0x5c>)
 800ff5e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    sha256->digest[5] = 0x9B05688CL;
 800ff62:	4b0f      	ldr	r3, [pc, #60]	; (800ffa0 <wc_InitSha256_ex+0x60>)
 800ff64:	e9c4 0304 	strd	r0, r3, [r4, #16]
    sha256->digest[6] = 0x1F83D9ABL;
 800ff68:	4b0e      	ldr	r3, [pc, #56]	; (800ffa4 <wc_InitSha256_ex+0x64>)
 800ff6a:	61a3      	str	r3, [r4, #24]
    sha256->buffLen = 0;
 800ff6c:	2000      	movs	r0, #0
    sha256->digest[7] = 0x5BE0CD19L;
 800ff6e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800ff72:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    sha256->loLen   = 0;
 800ff76:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
        sha256->heap = heap;
 800ff7a:	e9c4 051a 	strd	r0, r5, [r4, #104]	; 0x68
    sha256->digest[7] = 0x5BE0CD19L;
 800ff7e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800ff82:	61e3      	str	r3, [r4, #28]
    }
 800ff84:	bd38      	pop	{r3, r4, r5, pc}
            return BAD_FUNC_ARG;
 800ff86:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800ff8a:	e7fb      	b.n	800ff84 <wc_InitSha256_ex+0x44>
 800ff8c:	bb67ae85 	.word	0xbb67ae85
 800ff90:	6a09e667 	.word	0x6a09e667
 800ff94:	3c6ef372 	.word	0x3c6ef372
 800ff98:	510e527f 	.word	0x510e527f
 800ff9c:	a54ff53a 	.word	0xa54ff53a
 800ffa0:	9b05688c 	.word	0x9b05688c
 800ffa4:	1f83d9ab 	.word	0x1f83d9ab

0800ffa8 <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 800ffa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffac:	460e      	mov	r6, r1
 800ffae:	4614      	mov	r4, r2
        if (sha256 == NULL || (data == NULL && len > 0)) {
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d049      	beq.n	801004a <wc_Sha256Update+0xa2>
 800ffb6:	b919      	cbnz	r1, 800ffc0 <wc_Sha256Update+0x18>
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	d146      	bne.n	801004a <wc_Sha256Update+0xa2>
            sha256->buffLen = len;
 800ffbc:	2000      	movs	r0, #0
 800ffbe:	e042      	b.n	8010046 <wc_Sha256Update+0x9e>
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 800ffc0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ffc2:	283f      	cmp	r0, #63	; 0x3f
 800ffc4:	d844      	bhi.n	8010050 <wc_Sha256Update+0xa8>
            sha256->hiLen++;                       /* carry low to high */
 800ffc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffc8:	18d3      	adds	r3, r2, r3
        if ((sha256->loLen += len) < tmp) {
 800ffca:	666b      	str	r3, [r5, #100]	; 0x64
            sha256->hiLen++;                       /* carry low to high */
 800ffcc:	bf22      	ittt	cs
 800ffce:	6eab      	ldrcs	r3, [r5, #104]	; 0x68
 800ffd0:	3301      	addcs	r3, #1
 800ffd2:	66ab      	strcs	r3, [r5, #104]	; 0x68
        local = (byte*)sha256->buffer;
 800ffd4:	f105 0720 	add.w	r7, r5, #32
        if (sha256->buffLen > 0) {
 800ffd8:	b1c8      	cbz	r0, 801000e <wc_Sha256Update+0x66>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 800ffda:	f1c0 0840 	rsb	r8, r0, #64	; 0x40
        return a > b ? b : a;
 800ffde:	4590      	cmp	r8, r2
 800ffe0:	bf28      	it	cs
 800ffe2:	4690      	movcs	r8, r2
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 800ffe4:	4642      	mov	r2, r8
 800ffe6:	4438      	add	r0, r7
 800ffe8:	f00d fcdc 	bl	801d9a4 <memcpy>
            sha256->buffLen += blocksLen;
 800ffec:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800ffee:	4442      	add	r2, r8
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 800fff0:	2a40      	cmp	r2, #64	; 0x40
            sha256->buffLen += blocksLen;
 800fff2:	662a      	str	r2, [r5, #96]	; 0x60
            data            += blocksLen;
 800fff4:	4446      	add	r6, r8
            len             -= blocksLen;
 800fff6:	eba4 0408 	sub.w	r4, r4, r8
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 800fffa:	d108      	bne.n	801000e <wc_Sha256Update+0x66>
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 800fffc:	4638      	mov	r0, r7
 800fffe:	4639      	mov	r1, r7
 8010000:	f7ff fdf1 	bl	800fbe6 <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local);
 8010004:	4628      	mov	r0, r5
 8010006:	f7ff fdfb 	bl	800fc00 <Transform_Sha256>
                if (ret == 0)
 801000a:	b9e0      	cbnz	r0, 8010046 <wc_Sha256Update+0x9e>
                    sha256->buffLen = 0;
 801000c:	6628      	str	r0, [r5, #96]	; 0x60
 801000e:	4426      	add	r6, r4
            while (len >= WC_SHA256_BLOCK_SIZE) {
 8010010:	2c3f      	cmp	r4, #63	; 0x3f
 8010012:	eba6 0104 	sub.w	r1, r6, r4
 8010016:	d807      	bhi.n	8010028 <wc_Sha256Update+0x80>
        if (ret == 0 && len > 0) {
 8010018:	2c00      	cmp	r4, #0
 801001a:	d0cf      	beq.n	800ffbc <wc_Sha256Update+0x14>
            XMEMCPY(local, data, len);
 801001c:	4622      	mov	r2, r4
 801001e:	4638      	mov	r0, r7
 8010020:	f00d fcc0 	bl	801d9a4 <memcpy>
            sha256->buffLen = len;
 8010024:	662c      	str	r4, [r5, #96]	; 0x60
 8010026:	e7c9      	b.n	800ffbc <wc_Sha256Update+0x14>
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 8010028:	2240      	movs	r2, #64	; 0x40
 801002a:	4638      	mov	r0, r7
 801002c:	f00d fcba 	bl	801d9a4 <memcpy>
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 8010030:	4638      	mov	r0, r7
 8010032:	2240      	movs	r2, #64	; 0x40
 8010034:	4639      	mov	r1, r7
 8010036:	f7ff fdd6 	bl	800fbe6 <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local32);
 801003a:	4628      	mov	r0, r5
                len  -= WC_SHA256_BLOCK_SIZE;
 801003c:	3c40      	subs	r4, #64	; 0x40
                ret = XTRANSFORM(sha256, (const byte*)local32);
 801003e:	f7ff fddf 	bl	800fc00 <Transform_Sha256>
                if (ret != 0)
 8010042:	2800      	cmp	r0, #0
 8010044:	d0e4      	beq.n	8010010 <wc_Sha256Update+0x68>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
    }
 8010046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BAD_FUNC_ARG;
 801004a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801004e:	e7fa      	b.n	8010046 <wc_Sha256Update+0x9e>
            return BUFFER_E;
 8010050:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8010054:	e7f7      	b.n	8010046 <wc_Sha256Update+0x9e>

08010056 <wc_Sha256FinalRaw>:
    }

#if !defined(WOLFSSL_KCAPI_HASH)

    int wc_Sha256FinalRaw(wc_Sha256* sha256, byte* hash)
    {
 8010056:	b510      	push	{r4, lr}
 8010058:	460c      	mov	r4, r1
 801005a:	b088      	sub	sp, #32
    #ifdef LITTLE_ENDIAN_ORDER
        word32 digest[WC_SHA256_DIGEST_SIZE / sizeof(word32)];
    #endif

        if (sha256 == NULL || hash == NULL) {
 801005c:	4601      	mov	r1, r0
 801005e:	b160      	cbz	r0, 801007a <wc_Sha256FinalRaw+0x24>
 8010060:	b15c      	cbz	r4, 801007a <wc_Sha256FinalRaw+0x24>
            return BAD_FUNC_ARG;
        }

    #ifdef LITTLE_ENDIAN_ORDER
        ByteReverseWords((word32*)digest, (word32*)sha256->digest,
 8010062:	4668      	mov	r0, sp
 8010064:	2220      	movs	r2, #32
 8010066:	f7ff fdbe 	bl	800fbe6 <ByteReverseWords>
                                                         WC_SHA256_DIGEST_SIZE);
        XMEMCPY(hash, digest, WC_SHA256_DIGEST_SIZE);
 801006a:	4601      	mov	r1, r0
 801006c:	2220      	movs	r2, #32
 801006e:	4620      	mov	r0, r4
 8010070:	f00d fc98 	bl	801d9a4 <memcpy>
    #else
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
    #endif

        return 0;
 8010074:	2000      	movs	r0, #0
    }
 8010076:	b008      	add	sp, #32
 8010078:	bd10      	pop	{r4, pc}
            return BAD_FUNC_ARG;
 801007a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801007e:	e7fa      	b.n	8010076 <wc_Sha256FinalRaw+0x20>

08010080 <wc_Sha256Final>:

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 8010080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010082:	460f      	mov	r7, r1
        int ret;

        if (sha256 == NULL || hash == NULL) {
 8010084:	4604      	mov	r4, r0
 8010086:	2800      	cmp	r0, #0
 8010088:	d070      	beq.n	801016c <wc_Sha256Final+0xec>
 801008a:	2900      	cmp	r1, #0
 801008c:	d06e      	beq.n	801016c <wc_Sha256Final+0xec>
        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
 801008e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010090:	2b3f      	cmp	r3, #63	; 0x3f
 8010092:	d86e      	bhi.n	8010172 <wc_Sha256Final+0xf2>
        local = (byte*)sha256->buffer;
 8010094:	f100 0620 	add.w	r6, r0, #32
        local[sha256->buffLen++] = 0x80; /* add 1 */
 8010098:	1c5a      	adds	r2, r3, #1
 801009a:	6602      	str	r2, [r0, #96]	; 0x60
 801009c:	2280      	movs	r2, #128	; 0x80
 801009e:	54f2      	strb	r2, [r6, r3]
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 80100a0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80100a2:	2838      	cmp	r0, #56	; 0x38
 80100a4:	d912      	bls.n	80100cc <wc_Sha256Final+0x4c>
            XMEMSET(&local[sha256->buffLen], 0,
 80100a6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80100aa:	2100      	movs	r1, #0
 80100ac:	4430      	add	r0, r6
 80100ae:	f00d fca1 	bl	801d9f4 <memset>
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 80100b2:	2240      	movs	r2, #64	; 0x40
 80100b4:	6622      	str	r2, [r4, #96]	; 0x60
                ByteReverseWords(sha256->buffer, sha256->buffer,
 80100b6:	4631      	mov	r1, r6
 80100b8:	4630      	mov	r0, r6
 80100ba:	f7ff fd94 	bl	800fbe6 <ByteReverseWords>
            ret = XTRANSFORM(sha256, (const byte*)local);
 80100be:	4620      	mov	r0, r4
 80100c0:	f7ff fd9e 	bl	800fc00 <Transform_Sha256>
            if (ret != 0)
 80100c4:	4605      	mov	r5, r0
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d14e      	bne.n	8010168 <wc_Sha256Final+0xe8>
            sha256->buffLen = 0;
 80100ca:	6620      	str	r0, [r4, #96]	; 0x60
        XMEMSET(&local[sha256->buffLen], 0,
 80100cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80100ce:	2100      	movs	r1, #0
 80100d0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80100d4:	4430      	add	r0, r6
 80100d6:	f00d fc8d 	bl	801d9f4 <memset>
                                                         (sha256->hiLen << 3);
 80100da:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 80100de:	0f5a      	lsrs	r2, r3, #29
 80100e0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
        sha256->loLen = sha256->loLen << 3;
 80100e4:	00db      	lsls	r3, r3, #3
 80100e6:	6663      	str	r3, [r4, #100]	; 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 80100e8:	66a2      	str	r2, [r4, #104]	; 0x68
            ByteReverseWords(sha256->buffer, sha256->buffer,
 80100ea:	4631      	mov	r1, r6
 80100ec:	2240      	movs	r2, #64	; 0x40
 80100ee:	4630      	mov	r0, r6
 80100f0:	f7ff fd79 	bl	800fbe6 <ByteReverseWords>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 80100f4:	2204      	movs	r2, #4
 80100f6:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80100fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100fe:	f00d fc51 	bl	801d9a4 <memcpy>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 8010102:	2204      	movs	r2, #4
 8010104:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8010108:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801010c:	f00d fc4a 	bl	801d9a4 <memcpy>
        ret = XTRANSFORM(sha256, (const byte*)local);
 8010110:	4631      	mov	r1, r6
 8010112:	4620      	mov	r0, r4
 8010114:	f7ff fd74 	bl	800fc00 <Transform_Sha256>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
        if (ret != 0) {
 8010118:	4605      	mov	r5, r0
 801011a:	bb28      	cbnz	r0, 8010168 <wc_Sha256Final+0xe8>
            return ret;
        }

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 801011c:	4621      	mov	r1, r4
 801011e:	2220      	movs	r2, #32
 8010120:	4620      	mov	r0, r4
 8010122:	f7ff fd60 	bl	800fbe6 <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 8010126:	2220      	movs	r2, #32
 8010128:	4638      	mov	r0, r7
 801012a:	f00d fc3b 	bl	801d9a4 <memcpy>
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 801012e:	2220      	movs	r2, #32
 8010130:	4629      	mov	r1, r5
 8010132:	4620      	mov	r0, r4
 8010134:	f00d fc5e 	bl	801d9f4 <memset>
    sha256->digest[1] = 0xBB67AE85L;
 8010138:	4b0f      	ldr	r3, [pc, #60]	; (8010178 <wc_Sha256Final+0xf8>)
 801013a:	4a10      	ldr	r2, [pc, #64]	; (801017c <wc_Sha256Final+0xfc>)
    sha256->digest[3] = 0xA54FF53AL;
 801013c:	4910      	ldr	r1, [pc, #64]	; (8010180 <wc_Sha256Final+0x100>)
    sha256->digest[5] = 0x9B05688CL;
 801013e:	4811      	ldr	r0, [pc, #68]	; (8010184 <wc_Sha256Final+0x104>)
    sha256->hiLen   = 0;
 8010140:	66a5      	str	r5, [r4, #104]	; 0x68
    sha256->digest[1] = 0xBB67AE85L;
 8010142:	e9c4 2300 	strd	r2, r3, [r4]
    sha256->digest[3] = 0xA54FF53AL;
 8010146:	4b10      	ldr	r3, [pc, #64]	; (8010188 <wc_Sha256Final+0x108>)
 8010148:	e9c4 1302 	strd	r1, r3, [r4, #8]
    sha256->digest[5] = 0x9B05688CL;
 801014c:	4b0f      	ldr	r3, [pc, #60]	; (801018c <wc_Sha256Final+0x10c>)
 801014e:	e9c4 0304 	strd	r0, r3, [r4, #16]
    sha256->digest[6] = 0x1F83D9ABL;
 8010152:	4b0f      	ldr	r3, [pc, #60]	; (8010190 <wc_Sha256Final+0x110>)
 8010154:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 8010156:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 801015a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    sha256->loLen   = 0;
 801015e:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    sha256->digest[7] = 0x5BE0CD19L;
 8010162:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8010166:	61e3      	str	r3, [r4, #28]

        return InitSha256(sha256);  /* reset state */
    }
 8010168:	4628      	mov	r0, r5
 801016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
 801016c:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8010170:	e7fa      	b.n	8010168 <wc_Sha256Final+0xe8>
            return BAD_STATE_E;
 8010172:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 8010176:	e7f7      	b.n	8010168 <wc_Sha256Final+0xe8>
 8010178:	bb67ae85 	.word	0xbb67ae85
 801017c:	6a09e667 	.word	0x6a09e667
 8010180:	3c6ef372 	.word	0x3c6ef372
 8010184:	510e527f 	.word	0x510e527f
 8010188:	a54ff53a 	.word	0xa54ff53a
 801018c:	9b05688c 	.word	0x9b05688c
 8010190:	1f83d9ab 	.word	0x1f83d9ab

08010194 <wc_Sha256Free>:
#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
    if (sha256 == NULL)
 8010194:	b120      	cbz	r0, 80101a0 <wc_Sha256Free+0xc>
 8010196:	f100 0370 	add.w	r3, r0, #112	; 0x70
    while (len--) *z++ = 0;
 801019a:	2200      	movs	r2, #0
 801019c:	4298      	cmp	r0, r3
 801019e:	d100      	bne.n	80101a2 <wc_Sha256Free+0xe>
    else {
        ESP_LOGV(TAG, "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
    ForceZero(sha256, sizeof(*sha256));
}
 80101a0:	4770      	bx	lr
 80101a2:	f800 2b01 	strb.w	r2, [r0], #1
 80101a6:	e7f9      	b.n	801019c <wc_Sha256Free+0x8>

080101a8 <wc_Sha256Copy>:
#endif

    return ret;
}
int wc_Sha256Copy(wc_Sha256* src, wc_Sha256* dst)
{
 80101a8:	b508      	push	{r3, lr}
 80101aa:	460b      	mov	r3, r1
    int ret = 0;

    if (src == NULL || dst == NULL) {
 80101ac:	4601      	mov	r1, r0
 80101ae:	b130      	cbz	r0, 80101be <wc_Sha256Copy+0x16>
 80101b0:	b12b      	cbz	r3, 80101be <wc_Sha256Copy+0x16>
        return BAD_FUNC_ARG;
    }

    XMEMCPY(dst, src, sizeof(wc_Sha256));
 80101b2:	2270      	movs	r2, #112	; 0x70
 80101b4:	4618      	mov	r0, r3
 80101b6:	f00d fbf5 	bl	801d9a4 <memcpy>
            return MEMORY_E;
        XMEMCPY(dst->msg, src->msg, src->len);
    }
#endif

    return ret;
 80101ba:	2000      	movs	r0, #0
}
 80101bc:	bd08      	pop	{r3, pc}
        return BAD_FUNC_ARG;
 80101be:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80101c2:	e7fb      	b.n	80101bc <wc_Sha256Copy+0x14>

080101c4 <wc_Sha256GetHash>:
{
 80101c4:	b570      	push	{r4, r5, r6, lr}
 80101c6:	460e      	mov	r6, r1
    if (sha256 == NULL || hash == NULL) {
 80101c8:	4604      	mov	r4, r0
 80101ca:	b1c0      	cbz	r0, 80101fe <wc_Sha256GetHash+0x3a>
 80101cc:	b1b9      	cbz	r1, 80101fe <wc_Sha256GetHash+0x3a>
    tmpSha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 80101ce:	2070      	movs	r0, #112	; 0x70
 80101d0:	f00d fbc8 	bl	801d964 <malloc>
    if (tmpSha256 == NULL) {
 80101d4:	4605      	mov	r5, r0
 80101d6:	b1a8      	cbz	r0, 8010204 <wc_Sha256GetHash+0x40>
    ret = wc_Sha256Copy(sha256, tmpSha256);
 80101d8:	4601      	mov	r1, r0
 80101da:	4620      	mov	r0, r4
 80101dc:	f7ff ffe4 	bl	80101a8 <wc_Sha256Copy>
    if (ret == 0) {
 80101e0:	4604      	mov	r4, r0
 80101e2:	b938      	cbnz	r0, 80101f4 <wc_Sha256GetHash+0x30>
        ret = wc_Sha256Final(tmpSha256, hash);
 80101e4:	4631      	mov	r1, r6
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7ff ff4a 	bl	8010080 <wc_Sha256Final>
 80101ec:	4604      	mov	r4, r0
        wc_Sha256Free(tmpSha256); /* TODO move outside brackets? */
 80101ee:	4628      	mov	r0, r5
 80101f0:	f7ff ffd0 	bl	8010194 <wc_Sha256Free>
    XFREE(tmpSha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80101f4:	4628      	mov	r0, r5
 80101f6:	f00d fbbd 	bl	801d974 <free>
}
 80101fa:	4620      	mov	r0, r4
 80101fc:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 80101fe:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8010202:	e7fa      	b.n	80101fa <wc_Sha256GetHash+0x36>
        return MEMORY_E;
 8010204:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8010208:	e7f7      	b.n	80101fa <wc_Sha256GetHash+0x36>
 801020a:	0000      	movs	r0, r0
 801020c:	0000      	movs	r0, r0
	...

08010210 <InitSha512>:
#else

#ifdef WOLFSSL_SHA512

static int InitSha512(wc_Sha512* sha512)
{
 8010210:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 8010212:	2800      	cmp	r0, #0
 8010214:	d032      	beq.n	801027c <InitSha512+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
 8010216:	a31c      	add	r3, pc, #112	; (adr r3, 8010288 <InitSha512+0x78>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
 8010220:	a31b      	add	r3, pc, #108	; (adr r3, 8010290 <InitSha512+0x80>)
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
 801022a:	a31b      	add	r3, pc, #108	; (adr r3, 8010298 <InitSha512+0x88>)
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
 8010234:	a31a      	add	r3, pc, #104	; (adr r3, 80102a0 <InitSha512+0x90>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
 801023e:	a31a      	add	r3, pc, #104	; (adr r3, 80102a8 <InitSha512+0x98>)
 8010240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010244:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
 8010248:	a319      	add	r3, pc, #100	; (adr r3, 80102b0 <InitSha512+0xa0>)
 801024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024e:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
 8010252:	a319      	add	r3, pc, #100	; (adr r3, 80102b8 <InitSha512+0xa8>)
 8010254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010258:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 801025c:	a318      	add	r3, pc, #96	; (adr r3, 80102c0 <InitSha512+0xb0>)
 801025e:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 8010262:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 8010264:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 8010268:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 801026a:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 801026c:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 8010270:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 8010274:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8010278:	4618      	mov	r0, r3
}
 801027a:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 801027c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010280:	e7fb      	b.n	801027a <InitSha512+0x6a>
 8010282:	bf00      	nop
 8010284:	f3af 8000 	nop.w
 8010288:	f3bcc908 	.word	0xf3bcc908
 801028c:	6a09e667 	.word	0x6a09e667
 8010290:	84caa73b 	.word	0x84caa73b
 8010294:	bb67ae85 	.word	0xbb67ae85
 8010298:	fe94f82b 	.word	0xfe94f82b
 801029c:	3c6ef372 	.word	0x3c6ef372
 80102a0:	5f1d36f1 	.word	0x5f1d36f1
 80102a4:	a54ff53a 	.word	0xa54ff53a
 80102a8:	ade682d1 	.word	0xade682d1
 80102ac:	510e527f 	.word	0x510e527f
 80102b0:	2b3e6c1f 	.word	0x2b3e6c1f
 80102b4:	9b05688c 	.word	0x9b05688c
 80102b8:	fb41bd6b 	.word	0xfb41bd6b
 80102bc:	1f83d9ab 	.word	0x1f83d9ab
 80102c0:	137e2179 	.word	0x137e2179
 80102c4:	5be0cd19 	.word	0x5be0cd19

080102c8 <InitSha512_224>:
 * Note that sha512/224 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_224(wc_Sha512* sha512)
{
 80102c8:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 80102ca:	2800      	cmp	r0, #0
 80102cc:	d032      	beq.n	8010334 <InitSha512_224+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x8c3d37c819544da2);
 80102ce:	a31c      	add	r3, pc, #112	; (adr r3, 8010340 <InitSha512_224+0x78>)
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0x73e1996689dcd4d6);
 80102d8:	a31b      	add	r3, pc, #108	; (adr r3, 8010348 <InitSha512_224+0x80>)
 80102da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102de:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x1dfab7ae32ff9c82);
 80102e2:	a31b      	add	r3, pc, #108	; (adr r3, 8010350 <InitSha512_224+0x88>)
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0x679dd514582f9fcf);
 80102ec:	a31a      	add	r3, pc, #104	; (adr r3, 8010358 <InitSha512_224+0x90>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x0f6d2b697bd44da8);
 80102f6:	a31a      	add	r3, pc, #104	; (adr r3, 8010360 <InitSha512_224+0x98>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0x77e36f7304c48942);
 8010300:	a319      	add	r3, pc, #100	; (adr r3, 8010368 <InitSha512_224+0xa0>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x3f9d85a86a1d36c8);
 801030a:	a319      	add	r3, pc, #100	; (adr r3, 8010370 <InitSha512_224+0xa8>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 8010314:	a318      	add	r3, pc, #96	; (adr r3, 8010378 <InitSha512_224+0xb0>)
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 801031a:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 801031c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 8010320:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 8010322:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 8010324:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 8010328:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 801032c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8010330:	4618      	mov	r0, r3
}
 8010332:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8010334:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010338:	e7fb      	b.n	8010332 <InitSha512_224+0x6a>
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w
 8010340:	19544da2 	.word	0x19544da2
 8010344:	8c3d37c8 	.word	0x8c3d37c8
 8010348:	89dcd4d6 	.word	0x89dcd4d6
 801034c:	73e19966 	.word	0x73e19966
 8010350:	32ff9c82 	.word	0x32ff9c82
 8010354:	1dfab7ae 	.word	0x1dfab7ae
 8010358:	582f9fcf 	.word	0x582f9fcf
 801035c:	679dd514 	.word	0x679dd514
 8010360:	7bd44da8 	.word	0x7bd44da8
 8010364:	0f6d2b69 	.word	0x0f6d2b69
 8010368:	04c48942 	.word	0x04c48942
 801036c:	77e36f73 	.word	0x77e36f73
 8010370:	6a1d36c8 	.word	0x6a1d36c8
 8010374:	3f9d85a8 	.word	0x3f9d85a8
 8010378:	91d692a1 	.word	0x91d692a1
 801037c:	1112e6ad 	.word	0x1112e6ad

08010380 <InitSha512_256>:
 * Note that sha512/256 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_256(wc_Sha512* sha512)
{
 8010380:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 8010382:	2800      	cmp	r0, #0
 8010384:	d032      	beq.n	80103ec <InitSha512_256+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x22312194fc2bf72c);
 8010386:	a31c      	add	r3, pc, #112	; (adr r3, 80103f8 <InitSha512_256+0x78>)
 8010388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038c:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0x9f555fa3c84c64c2);
 8010390:	a31b      	add	r3, pc, #108	; (adr r3, 8010400 <InitSha512_256+0x80>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x2393b86b6f53b151);
 801039a:	a31b      	add	r3, pc, #108	; (adr r3, 8010408 <InitSha512_256+0x88>)
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0x963877195940eabd);
 80103a4:	a31a      	add	r3, pc, #104	; (adr r3, 8010410 <InitSha512_256+0x90>)
 80103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103aa:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x96283ee2a88effe3);
 80103ae:	a31a      	add	r3, pc, #104	; (adr r3, 8010418 <InitSha512_256+0x98>)
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0xbe5e1e2553863992);
 80103b8:	a319      	add	r3, pc, #100	; (adr r3, 8010420 <InitSha512_256+0xa0>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x2b0199fc2c85b8aa);
 80103c2:	a319      	add	r3, pc, #100	; (adr r3, 8010428 <InitSha512_256+0xa8>)
 80103c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c8:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 80103cc:	a318      	add	r3, pc, #96	; (adr r3, 8010430 <InitSha512_256+0xb0>)
 80103ce:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 80103d2:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 80103d4:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 80103d8:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 80103da:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 80103dc:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 80103e0:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 80103e4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 80103e8:	4618      	mov	r0, r3
}
 80103ea:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 80103ec:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80103f0:	e7fb      	b.n	80103ea <InitSha512_256+0x6a>
 80103f2:	bf00      	nop
 80103f4:	f3af 8000 	nop.w
 80103f8:	fc2bf72c 	.word	0xfc2bf72c
 80103fc:	22312194 	.word	0x22312194
 8010400:	c84c64c2 	.word	0xc84c64c2
 8010404:	9f555fa3 	.word	0x9f555fa3
 8010408:	6f53b151 	.word	0x6f53b151
 801040c:	2393b86b 	.word	0x2393b86b
 8010410:	5940eabd 	.word	0x5940eabd
 8010414:	96387719 	.word	0x96387719
 8010418:	a88effe3 	.word	0xa88effe3
 801041c:	96283ee2 	.word	0x96283ee2
 8010420:	53863992 	.word	0x53863992
 8010424:	be5e1e25 	.word	0xbe5e1e25
 8010428:	2c85b8aa 	.word	0x2c85b8aa
 801042c:	2b0199fc 	.word	0x2b0199fc
 8010430:	81c52ca2 	.word	0x81c52ca2
 8010434:	0eb72ddc 	.word	0x0eb72ddc

08010438 <ByteReverseWords64>:
{
 8010438:	b510      	push	{r4, lr}
 801043a:	f022 0207 	bic.w	r2, r2, #7
 801043e:	3808      	subs	r0, #8
 8010440:	440a      	add	r2, r1
        out[i] = ByteReverseWord64(in[i]);
 8010442:	e9d1 3400 	ldrd	r3, r4, [r1]
 8010446:	ba24      	rev	r4, r4
 8010448:	f840 4f08 	str.w	r4, [r0, #8]!
 801044c:	3108      	adds	r1, #8
 801044e:	ba1b      	rev	r3, r3
    for (i = 0; i < count; i++)
 8010450:	428a      	cmp	r2, r1
        out[i] = ByteReverseWord64(in[i]);
 8010452:	6043      	str	r3, [r0, #4]
    for (i = 0; i < count; i++)
 8010454:	d1f5      	bne.n	8010442 <ByteReverseWords64+0xa>
}
 8010456:	bd10      	pop	{r4, pc}

08010458 <Sha512FinalRaw>:
    /* functions defined in wolfcrypt/src/port/Renesas/renesas_fspsm_sha.c */

#else

static int Sha512FinalRaw(wc_Sha512* sha512, byte* hash, size_t digestSz)
{
 8010458:	b530      	push	{r4, r5, lr}
 801045a:	460c      	mov	r4, r1
 801045c:	b091      	sub	sp, #68	; 0x44
 801045e:	4615      	mov	r5, r2
#ifdef LITTLE_ENDIAN_ORDER
    word64 digest[WC_SHA512_DIGEST_SIZE / sizeof(word64)];
#endif

    if (sha512 == NULL || hash == NULL) {
 8010460:	4601      	mov	r1, r0
 8010462:	b160      	cbz	r0, 801047e <Sha512FinalRaw+0x26>
 8010464:	b15c      	cbz	r4, 801047e <Sha512FinalRaw+0x26>
        return BAD_FUNC_ARG;
    }

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords64((word64*)digest, (word64*)sha512->digest,
 8010466:	2240      	movs	r2, #64	; 0x40
 8010468:	4668      	mov	r0, sp
 801046a:	f7ff ffe5 	bl	8010438 <ByteReverseWords64>
                                                         WC_SHA512_DIGEST_SIZE);
    XMEMCPY(hash, digest, digestSz);
 801046e:	462a      	mov	r2, r5
 8010470:	4669      	mov	r1, sp
 8010472:	4620      	mov	r0, r4
 8010474:	f00d fa96 	bl	801d9a4 <memcpy>
#else
    XMEMCPY(hash, sha512->digest, digestSz);
#endif

    return 0;
 8010478:	2000      	movs	r0, #0
}
 801047a:	b011      	add	sp, #68	; 0x44
 801047c:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 801047e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010482:	e7fa      	b.n	801047a <Sha512FinalRaw+0x22>

08010484 <_Transform_Sha512>:
{
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010488:	4605      	mov	r5, r0
 801048a:	b0c3      	sub	sp, #268	; 0x10c
    W = (word64*) XMALLOC(sizeof(word64) * 16, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801048c:	2080      	movs	r0, #128	; 0x80
 801048e:	f00d fa69 	bl	801d964 <malloc>
    if (W == NULL)
 8010492:	4604      	mov	r4, r0
 8010494:	2800      	cmp	r0, #0
 8010496:	f001 87e2 	beq.w	801245e <_Transform_Sha512+0x1fda>
    XMEMCPY(T, sha512->digest, sizeof(T));
 801049a:	2240      	movs	r2, #64	; 0x40
 801049c:	4629      	mov	r1, r5
 801049e:	a832      	add	r0, sp, #200	; 0xc8
 80104a0:	f00d fa80 	bl	801d9a4 <memcpy>
    for (j = 0; j < 80; j += 16) {
 80104a4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80104a6:	932f      	str	r3, [sp, #188]	; 0xbc
 80104a8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80104aa:	932b      	str	r3, [sp, #172]	; 0xac
 80104ac:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80104ae:	932c      	str	r3, [sp, #176]	; 0xb0
 80104b0:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80104b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80104b4:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80104b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80104b8:	68a3      	ldr	r3, [r4, #8]
 80104ba:	9319      	str	r3, [sp, #100]	; 0x64
 80104bc:	68e3      	ldr	r3, [r4, #12]
 80104be:	9309      	str	r3, [sp, #36]	; 0x24
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	9318      	str	r3, [sp, #96]	; 0x60
 80104c4:	6863      	ldr	r3, [r4, #4]
 80104c6:	9308      	str	r3, [sp, #32]
 80104c8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80104ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80104cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80104ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80104d0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80104d2:	9322      	str	r3, [sp, #136]	; 0x88
 80104d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80104d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80104d8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80104da:	9328      	str	r3, [sp, #160]	; 0xa0
 80104dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80104de:	f8dd a0ec 	ldr.w	sl, [sp, #236]	; 0xec
 80104e2:	f8dd b0e4 	ldr.w	fp, [sp, #228]	; 0xe4
 80104e6:	9325      	str	r3, [sp, #148]	; 0x94
 80104e8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80104ea:	9326      	str	r3, [sp, #152]	; 0x98
 80104ec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80104ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80104f0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80104f2:	9324      	str	r3, [sp, #144]	; 0x90
 80104f4:	6923      	ldr	r3, [r4, #16]
 80104f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80104f8:	6963      	ldr	r3, [r4, #20]
 80104fa:	9307      	str	r3, [sp, #28]
 80104fc:	69a3      	ldr	r3, [r4, #24]
 80104fe:	9312      	str	r3, [sp, #72]	; 0x48
 8010500:	69e3      	ldr	r3, [r4, #28]
 8010502:	9302      	str	r3, [sp, #8]
 8010504:	6a23      	ldr	r3, [r4, #32]
 8010506:	931a      	str	r3, [sp, #104]	; 0x68
 8010508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801050a:	930a      	str	r3, [sp, #40]	; 0x28
 801050c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801050e:	9314      	str	r3, [sp, #80]	; 0x50
 8010510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010512:	9304      	str	r3, [sp, #16]
 8010514:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010516:	9320      	str	r3, [sp, #128]	; 0x80
 8010518:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801051a:	9310      	str	r3, [sp, #64]	; 0x40
 801051c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801051e:	9315      	str	r3, [sp, #84]	; 0x54
 8010520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010522:	9305      	str	r3, [sp, #20]
 8010524:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010526:	9321      	str	r3, [sp, #132]	; 0x84
 8010528:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801052a:	9311      	str	r3, [sp, #68]	; 0x44
 801052c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801052e:	9316      	str	r3, [sp, #88]	; 0x58
 8010530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010532:	9306      	str	r3, [sp, #24]
 8010534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010536:	931b      	str	r3, [sp, #108]	; 0x6c
 8010538:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801053a:	930b      	str	r3, [sp, #44]	; 0x2c
 801053c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801053e:	931c      	str	r3, [sp, #112]	; 0x70
 8010540:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010542:	930c      	str	r3, [sp, #48]	; 0x30
 8010544:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010546:	931d      	str	r3, [sp, #116]	; 0x74
 8010548:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801054a:	930d      	str	r3, [sp, #52]	; 0x34
 801054c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801054e:	931e      	str	r3, [sp, #120]	; 0x78
 8010550:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010552:	930e      	str	r3, [sp, #56]	; 0x38
 8010554:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8010556:	9313      	str	r3, [sp, #76]	; 0x4c
 8010558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801055a:	9303      	str	r3, [sp, #12]
 801055c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801055e:	931f      	str	r3, [sp, #124]	; 0x7c
 8010560:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010562:	930f      	str	r3, [sp, #60]	; 0x3c
 8010564:	2200      	movs	r2, #0
 8010566:	4bbf      	ldr	r3, [pc, #764]	; (8010864 <_Transform_Sha512+0x3e0>)
 8010568:	9201      	str	r2, [sp, #4]
    return (x >> y) | (x << (sizeof(y) * 8 - y));
 801056a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801056c:	992f      	ldr	r1, [sp, #188]	; 0xbc
 801056e:	ea4f 469a 	mov.w	r6, sl, lsr #18
 8010572:	ea4f 379a 	mov.w	r7, sl, lsr #14
 8010576:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 801057a:	ea46 3082 	orr.w	r0, r6, r2, lsl #14
 801057e:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 8010582:	0b89      	lsrs	r1, r1, #14
        R( 0); R( 1); R( 2); R( 3);
 8010584:	ea87 0600 	eor.w	r6, r7, r0
 8010588:	ea4c 3c8a 	orr.w	ip, ip, sl, lsl #14
 801058c:	05d0      	lsls	r0, r2, #23
 801058e:	ea41 418a 	orr.w	r1, r1, sl, lsl #18
 8010592:	ea81 010c 	eor.w	r1, r1, ip
 8010596:	ea40 205a 	orr.w	r0, r0, sl, lsr #9
 801059a:	ea4f 57ca 	mov.w	r7, sl, lsl #23
 801059e:	ea47 2752 	orr.w	r7, r7, r2, lsr #9
 80105a2:	4041      	eors	r1, r0
 80105a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80105a6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80105a8:	ea82 0c00 	eor.w	ip, r2, r0
 80105ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80105ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80105b0:	4077      	eors	r7, r6
 80105b2:	ea82 0600 	eor.w	r6, r2, r0
 80105b6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80105b8:	ea0c 0c02 	and.w	ip, ip, r2
 80105bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80105be:	ea06 060a 	and.w	r6, r6, sl
 80105c2:	ea8c 0c02 	eor.w	ip, ip, r2
 80105c6:	4070      	eors	r0, r6
 80105c8:	eb11 010c 	adds.w	r1, r1, ip
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	9230      	str	r2, [sp, #192]	; 0xc0
 80105d0:	eb47 0600 	adc.w	r6, r7, r0
 80105d4:	9801      	ldr	r0, [sp, #4]
 80105d6:	685a      	ldr	r2, [r3, #4]
 80105d8:	9231      	str	r2, [sp, #196]	; 0xc4
 80105da:	2800      	cmp	r0, #0
 80105dc:	f001 86d8 	beq.w	8012390 <_Transform_Sha512+0x1f0c>
 80105e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80105e2:	ea4f 4ed2 	mov.w	lr, r2, lsr #19
 80105e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80105e8:	ea4e 3e42 	orr.w	lr, lr, r2, lsl #13
 80105ec:	4610      	mov	r0, r2
 80105ee:	0cd7      	lsrs	r7, r2, #19
 80105f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80105f2:	ea47 3742 	orr.w	r7, r7, r2, lsl #13
 80105f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80105f8:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 80105fc:	ea4c 7c52 	orr.w	ip, ip, r2, lsr #29
 8010600:	ea87 0c0c 	eor.w	ip, r7, ip
 8010604:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010606:	00d0      	lsls	r0, r2, #3
 8010608:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801060a:	09bf      	lsrs	r7, r7, #6
 801060c:	ea47 6782 	orr.w	r7, r7, r2, lsl #26
 8010610:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8010614:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
 8010618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801061a:	ea4f 0952 	mov.w	r9, r2, lsr #1
 801061e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010620:	ea8e 0000 	eor.w	r0, lr, r0
 8010624:	4078      	eors	r0, r7
 8010626:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 801062a:	0857      	lsrs	r7, r2, #1
 801062c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801062e:	ea47 77c2 	orr.w	r7, r7, r2, lsl #31
 8010632:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8010636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010638:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 801063c:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8010640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010642:	ea89 0e0e 	eor.w	lr, r9, lr
 8010646:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 801064a:	ea4f 19d2 	mov.w	r9, r2, lsr #7
 801064e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010650:	ea87 0708 	eor.w	r7, r7, r8
 8010654:	ea49 6942 	orr.w	r9, r9, r2, lsl #25
 8010658:	ea87 17d2 	eor.w	r7, r7, r2, lsr #7
 801065c:	ea8e 0e09 	eor.w	lr, lr, r9
 8010660:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010662:	eb10 0e0e 	adds.w	lr, r0, lr
 8010666:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010668:	eb4c 0707 	adc.w	r7, ip, r7
 801066c:	eb1e 0e02 	adds.w	lr, lr, r2
 8010670:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010672:	eb40 0707 	adc.w	r7, r0, r7
 8010676:	9808      	ldr	r0, [sp, #32]
 8010678:	eb1e 0e02 	adds.w	lr, lr, r2
 801067c:	eb40 0007 	adc.w	r0, r0, r7
 8010680:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8010684:	9008      	str	r0, [sp, #32]
 8010686:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010688:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 801068c:	1809      	adds	r1, r1, r0
 801068e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8010690:	eb46 0600 	adc.w	r6, r6, r0
 8010694:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010696:	1809      	adds	r1, r1, r0
 8010698:	9808      	ldr	r0, [sp, #32]
 801069a:	eb40 0606 	adc.w	r6, r0, r6
 801069e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80106a0:	1809      	adds	r1, r1, r0
 80106a2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80106a4:	eb40 0606 	adc.w	r6, r0, r6
 80106a8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80106aa:	1808      	adds	r0, r1, r0
 80106ac:	eb46 020b 	adc.w	r2, r6, fp
 80106b0:	9230      	str	r2, [sp, #192]	; 0xc0
 80106b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80106b4:	902a      	str	r0, [sp, #168]	; 0xa8
 80106b6:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 80106ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80106bc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80106be:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 80106c2:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 80106c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80106c8:	0780      	lsls	r0, r0, #30
 80106ca:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 80106ce:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 80106d2:	0797      	lsls	r7, r2, #30
 80106d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80106d6:	ea8c 0c00 	eor.w	ip, ip, r0
 80106da:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 80106de:	0650      	lsls	r0, r2, #25
 80106e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80106e2:	ea8e 0e07 	eor.w	lr, lr, r7
 80106e6:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 80106ea:	0657      	lsls	r7, r2, #25
 80106ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80106ee:	ea8c 0c00 	eor.w	ip, ip, r0
 80106f2:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 80106f6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80106f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80106fa:	ea40 0802 	orr.w	r8, r0, r2
 80106fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010700:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010702:	ea8e 0e07 	eor.w	lr, lr, r7
 8010706:	4310      	orrs	r0, r2
 8010708:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801070a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801070c:	4038      	ands	r0, r7
 801070e:	ea08 0802 	and.w	r8, r8, r2
 8010712:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8010714:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010716:	4017      	ands	r7, r2
 8010718:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801071a:	ea48 0707 	orr.w	r7, r8, r7
 801071e:	ea02 0909 	and.w	r9, r2, r9
 8010722:	eb1e 0707 	adds.w	r7, lr, r7
 8010726:	ea40 0909 	orr.w	r9, r0, r9
 801072a:	eb4c 0909 	adc.w	r9, ip, r9
 801072e:	1879      	adds	r1, r7, r1
 8010730:	eb46 0209 	adc.w	r2, r6, r9
 8010734:	9229      	str	r2, [sp, #164]	; 0xa4
 8010736:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010738:	9122      	str	r1, [sp, #136]	; 0x88
 801073a:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 801073e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8010740:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8010744:	0b96      	lsrs	r6, r2, #14
 8010746:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010748:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 801074c:	0c90      	lsrs	r0, r2, #18
 801074e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8010750:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 8010754:	0c91      	lsrs	r1, r2, #18
 8010756:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010758:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801075c:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8010760:	404e      	eors	r6, r1
 8010762:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8010764:	05c9      	lsls	r1, r1, #23
 8010766:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 801076a:	ea8c 0c00 	eor.w	ip, ip, r0
 801076e:	05d0      	lsls	r0, r2, #23
 8010770:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8010772:	404e      	eors	r6, r1
 8010774:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 8010778:	992f      	ldr	r1, [sp, #188]	; 0xbc
 801077a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801077c:	ea8c 0c00 	eor.w	ip, ip, r0
 8010780:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8010782:	4051      	eors	r1, r2
 8010784:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010786:	4001      	ands	r1, r0
 8010788:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801078a:	ea82 070a 	eor.w	r7, r2, sl
 801078e:	4007      	ands	r7, r0
 8010790:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8010792:	4057      	eors	r7, r2
 8010794:	4041      	eors	r1, r0
 8010796:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010798:	6898      	ldr	r0, [r3, #8]
 801079a:	1810      	adds	r0, r2, r0
 801079c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801079e:	eb42 080e 	adc.w	r8, r2, lr
 80107a2:	180a      	adds	r2, r1, r0
 80107a4:	922b      	str	r2, [sp, #172]	; 0xac
 80107a6:	9a01      	ldr	r2, [sp, #4]
 80107a8:	eb47 0708 	adc.w	r7, r7, r8
 80107ac:	2a00      	cmp	r2, #0
 80107ae:	f001 85f5 	beq.w	801239c <_Transform_Sha512+0x1f18>
 80107b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80107b6:	ea4f 49d2 	mov.w	r9, r2, lsr #19
 80107ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80107bc:	ea49 3942 	orr.w	r9, r9, r2, lsl #13
 80107c0:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 80107c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107c6:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 80107ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80107cc:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 80107d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107d2:	ea4e 7e52 	orr.w	lr, lr, r2, lsr #29
 80107d6:	00d0      	lsls	r0, r2, #3
 80107d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80107da:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 80107de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107e0:	ea88 0e0e 	eor.w	lr, r8, lr
 80107e4:	ea4f 1892 	mov.w	r8, r2, lsr #6
 80107e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80107ea:	ea89 0000 	eor.w	r0, r9, r0
 80107ee:	ea48 6882 	orr.w	r8, r8, r2, lsl #26
 80107f2:	ea80 0008 	eor.w	r0, r0, r8
 80107f6:	ea8e 1e92 	eor.w	lr, lr, r2, lsr #6
 80107fa:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80107fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010800:	eb12 0b08 	adds.w	fp, r2, r8
 8010804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010806:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801080a:	eb42 0808 	adc.w	r8, r2, r8
 801080e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010810:	eb10 000b 	adds.w	r0, r0, fp
 8010814:	ea4f 0b52 	mov.w	fp, r2, lsr #1
 8010818:	9a07      	ldr	r2, [sp, #28]
 801081a:	eb4e 0e08 	adc.w	lr, lr, r8
 801081e:	ea4b 7bc2 	orr.w	fp, fp, r2, lsl #31
 8010822:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8010826:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010828:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 801082c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8010830:	9a07      	ldr	r2, [sp, #28]
 8010832:	ea49 6902 	orr.w	r9, r9, r2, lsl #24
 8010836:	0a12      	lsrs	r2, r2, #8
 8010838:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801083c:	ea88 0802 	eor.w	r8, r8, r2
 8010840:	9a07      	ldr	r2, [sp, #28]
 8010842:	ea8b 0909 	eor.w	r9, fp, r9
 8010846:	ea4f 1bd1 	mov.w	fp, r1, lsr #7
 801084a:	ea4b 6b42 	orr.w	fp, fp, r2, lsl #25
 801084e:	ea89 090b 	eor.w	r9, r9, fp
 8010852:	ea88 18d2 	eor.w	r8, r8, r2, lsr #7
 8010856:	eb10 0209 	adds.w	r2, r0, r9
 801085a:	9219      	str	r2, [sp, #100]	; 0x64
 801085c:	eb4e 0208 	adc.w	r2, lr, r8
 8010860:	e002      	b.n	8010868 <_Transform_Sha512+0x3e4>
 8010862:	bf00      	nop
 8010864:	080228f0 	.word	0x080228f0
 8010868:	9209      	str	r2, [sp, #36]	; 0x24
 801086a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801086c:	eb1c 0102 	adds.w	r1, ip, r2
 8010870:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010872:	eb46 0607 	adc.w	r6, r6, r7
 8010876:	1889      	adds	r1, r1, r2
 8010878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801087a:	eb42 0606 	adc.w	r6, r2, r6
 801087e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010880:	188a      	adds	r2, r1, r2
 8010882:	922b      	str	r2, [sp, #172]	; 0xac
 8010884:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010886:	eb46 0202 	adc.w	r2, r6, r2
 801088a:	922c      	str	r2, [sp, #176]	; 0xb0
 801088c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801088e:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 8010892:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010894:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8010898:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 801089c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801089e:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 80108a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80108a4:	0790      	lsls	r0, r2, #30
 80108a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80108a8:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 80108ac:	0797      	lsls	r7, r2, #30
 80108ae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80108b0:	ea8e 0e00 	eor.w	lr, lr, r0
 80108b4:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 80108b8:	0650      	lsls	r0, r2, #25
 80108ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80108bc:	ea8c 0c07 	eor.w	ip, ip, r7
 80108c0:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 80108c4:	0657      	lsls	r7, r2, #25
 80108c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80108c8:	ea8e 0e00 	eor.w	lr, lr, r0
 80108cc:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 80108d0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80108d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80108d4:	ea8c 0c07 	eor.w	ip, ip, r7
 80108d8:	ea42 0700 	orr.w	r7, r2, r0
 80108dc:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 80108e0:	ea42 0800 	orr.w	r8, r2, r0
 80108e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80108e6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80108e8:	4017      	ands	r7, r2
 80108ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80108ec:	ea08 0802 	and.w	r8, r8, r2
 80108f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80108f2:	4010      	ands	r0, r2
 80108f4:	e9dd 9228 	ldrd	r9, r2, [sp, #160]	; 0xa0
 80108f8:	4307      	orrs	r7, r0
 80108fa:	ea02 0909 	and.w	r9, r2, r9
 80108fe:	eb1c 0707 	adds.w	r7, ip, r7
 8010902:	ea48 0909 	orr.w	r9, r8, r9
 8010906:	eb4e 0909 	adc.w	r9, lr, r9
 801090a:	187a      	adds	r2, r7, r1
 801090c:	9223      	str	r2, [sp, #140]	; 0x8c
 801090e:	eb46 0209 	adc.w	r2, r6, r9
 8010912:	9224      	str	r2, [sp, #144]	; 0x90
 8010914:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010916:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 801091a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801091c:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8010920:	0b96      	lsrs	r6, r2, #14
 8010922:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010924:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 8010928:	0c90      	lsrs	r0, r2, #18
 801092a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801092c:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 8010930:	0c91      	lsrs	r1, r2, #18
 8010932:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010934:	f8d3 e014 	ldr.w	lr, [r3, #20]
 8010938:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 801093c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801093e:	404e      	eors	r6, r1
 8010940:	05d1      	lsls	r1, r2, #23
 8010942:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010944:	ea8c 0c00 	eor.w	ip, ip, r0
 8010948:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 801094c:	05d0      	lsls	r0, r2, #23
 801094e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010950:	404e      	eors	r6, r1
 8010952:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 8010956:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8010958:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801095a:	4051      	eors	r1, r2
 801095c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801095e:	ea82 070a 	eor.w	r7, r2, sl
 8010962:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010964:	4011      	ands	r1, r2
 8010966:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010968:	4017      	ands	r7, r2
 801096a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801096c:	ea8c 0c00 	eor.w	ip, ip, r0
 8010970:	4051      	eors	r1, r2
 8010972:	6918      	ldr	r0, [r3, #16]
 8010974:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010976:	1810      	adds	r0, r2, r0
 8010978:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801097a:	eb42 0e0e 	adc.w	lr, r2, lr
 801097e:	9a01      	ldr	r2, [sp, #4]
 8010980:	ea87 070a 	eor.w	r7, r7, sl
 8010984:	1809      	adds	r1, r1, r0
 8010986:	eb47 070e 	adc.w	r7, r7, lr
 801098a:	2a00      	cmp	r2, #0
 801098c:	f001 850b 	beq.w	80123a6 <_Transform_Sha512+0x1f22>
 8010990:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010992:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8010996:	9a02      	ldr	r2, [sp, #8]
 8010998:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 801099c:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80109a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80109a2:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 80109a6:	0a10      	lsrs	r0, r2, #8
 80109a8:	9a02      	ldr	r2, [sp, #8]
 80109aa:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80109ae:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 80109b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80109b4:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 80109b8:	ea88 0e0e 	eor.w	lr, r8, lr
 80109bc:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 80109c0:	9a02      	ldr	r2, [sp, #8]
 80109c2:	ea89 0000 	eor.w	r0, r9, r0
 80109c6:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 80109ca:	ea80 0008 	eor.w	r0, r0, r8
 80109ce:	ea8e 1ed2 	eor.w	lr, lr, r2, lsr #7
 80109d2:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80109d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109d8:	eb12 0b08 	adds.w	fp, r2, r8
 80109dc:	9a07      	ldr	r2, [sp, #28]
 80109de:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80109e2:	eb42 0808 	adc.w	r8, r2, r8
 80109e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80109e8:	eb10 000b 	adds.w	r0, r0, fp
 80109ec:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 80109f0:	9a08      	ldr	r2, [sp, #32]
 80109f2:	eb4e 0e08 	adc.w	lr, lr, r8
 80109f6:	ea4b 3b42 	orr.w	fp, fp, r2, lsl #13
 80109fa:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 80109fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a00:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8010a04:	9a08      	ldr	r2, [sp, #32]
 8010a06:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8010a0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a0c:	ea49 7252 	orr.w	r2, r9, r2, lsr #29
 8010a10:	9207      	str	r2, [sp, #28]
 8010a12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a14:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8010a18:	9a08      	ldr	r2, [sp, #32]
 8010a1a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8010a1e:	9a07      	ldr	r2, [sp, #28]
 8010a20:	ea88 0802 	eor.w	r8, r8, r2
 8010a24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a26:	ea8b 0909 	eor.w	r9, fp, r9
 8010a2a:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 8010a2e:	9a08      	ldr	r2, [sp, #32]
 8010a30:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 8010a34:	ea89 090b 	eor.w	r9, r9, fp
 8010a38:	ea88 1892 	eor.w	r8, r8, r2, lsr #6
 8010a3c:	eb10 0209 	adds.w	r2, r0, r9
 8010a40:	9217      	str	r2, [sp, #92]	; 0x5c
 8010a42:	eb4e 0208 	adc.w	r2, lr, r8
 8010a46:	9207      	str	r2, [sp, #28]
 8010a48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010a4a:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8010a4e:	eb1c 0101 	adds.w	r1, ip, r1
 8010a52:	eb46 0607 	adc.w	r6, r6, r7
 8010a56:	1889      	adds	r1, r1, r2
 8010a58:	9a07      	ldr	r2, [sp, #28]
 8010a5a:	eb42 0606 	adc.w	r6, r2, r6
 8010a5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010a60:	188a      	adds	r2, r1, r2
 8010a62:	922d      	str	r2, [sp, #180]	; 0xb4
 8010a64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010a66:	eb46 0202 	adc.w	r2, r6, r2
 8010a6a:	922e      	str	r2, [sp, #184]	; 0xb8
 8010a6c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a6e:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 8010a72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010a74:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8010a78:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 8010a7c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a7e:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 8010a82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010a84:	0790      	lsls	r0, r2, #30
 8010a86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a88:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 8010a8c:	0797      	lsls	r7, r2, #30
 8010a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010a90:	ea8e 0e00 	eor.w	lr, lr, r0
 8010a94:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 8010a98:	0650      	lsls	r0, r2, #25
 8010a9a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010a9c:	ea8c 0c07 	eor.w	ip, ip, r7
 8010aa0:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 8010aa4:	0657      	lsls	r7, r2, #25
 8010aa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010aa8:	ea8e 0e00 	eor.w	lr, lr, r0
 8010aac:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 8010ab0:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8010ab4:	ea8c 0c07 	eor.w	ip, ip, r7
 8010ab8:	ea42 0700 	orr.w	r7, r2, r0
 8010abc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010abe:	9824      	ldr	r0, [sp, #144]	; 0x90
 8010ac0:	ea42 0800 	orr.w	r8, r2, r0
 8010ac4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010ac6:	4017      	ands	r7, r2
 8010ac8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010aca:	ea08 0802 	and.w	r8, r8, r2
 8010ace:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8010ad2:	4010      	ands	r0, r2
 8010ad4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010ad6:	4338      	orrs	r0, r7
 8010ad8:	ea02 0909 	and.w	r9, r2, r9
 8010adc:	eb1c 0000 	adds.w	r0, ip, r0
 8010ae0:	ea48 0909 	orr.w	r9, r8, r9
 8010ae4:	eb4e 0909 	adc.w	r9, lr, r9
 8010ae8:	1842      	adds	r2, r0, r1
 8010aea:	9225      	str	r2, [sp, #148]	; 0x94
 8010aec:	eb46 0209 	adc.w	r2, r6, r9
 8010af0:	9226      	str	r2, [sp, #152]	; 0x98
 8010af2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010af4:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 8010af8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010afa:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8010afe:	0b96      	lsrs	r6, r2, #14
 8010b00:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010b02:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 8010b06:	0c90      	lsrs	r0, r2, #18
 8010b08:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010b0a:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 8010b0e:	0c91      	lsrs	r1, r2, #18
 8010b10:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010b12:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8010b16:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010b18:	404e      	eors	r6, r1
 8010b1a:	05d1      	lsls	r1, r2, #23
 8010b1c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010b1e:	ea8c 0c00 	eor.w	ip, ip, r0
 8010b22:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 8010b26:	05d0      	lsls	r0, r2, #23
 8010b28:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010b2a:	404e      	eors	r6, r1
 8010b2c:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 8010b30:	e9dd 212a 	ldrd	r2, r1, [sp, #168]	; 0xa8
 8010b34:	ea8c 0c00 	eor.w	ip, ip, r0
 8010b38:	4051      	eors	r1, r2
 8010b3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8010b3c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8010b3e:	ea82 0700 	eor.w	r7, r2, r0
 8010b42:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010b44:	6998      	ldr	r0, [r3, #24]
 8010b46:	4011      	ands	r1, r2
 8010b48:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8010b4a:	4017      	ands	r7, r2
 8010b4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010b4e:	4051      	eors	r1, r2
 8010b50:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8010b52:	4057      	eors	r7, r2
 8010b54:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010b56:	1810      	adds	r0, r2, r0
 8010b58:	69da      	ldr	r2, [r3, #28]
 8010b5a:	eb4a 0e02 	adc.w	lr, sl, r2
 8010b5e:	9a01      	ldr	r2, [sp, #4]
 8010b60:	1809      	adds	r1, r1, r0
 8010b62:	eb47 070e 	adc.w	r7, r7, lr
 8010b66:	2a00      	cmp	r2, #0
 8010b68:	f001 8422 	beq.w	80123b0 <_Transform_Sha512+0x1f2c>
 8010b6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010b6e:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8010b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b74:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 8010b78:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8010b7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010b7e:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 8010b82:	0a10      	lsrs	r0, r2, #8
 8010b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b86:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8010b8a:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8010b8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010b90:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8010b94:	ea88 0e0e 	eor.w	lr, r8, lr
 8010b98:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 8010b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b9e:	ea89 0000 	eor.w	r0, r9, r0
 8010ba2:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8010ba6:	ea80 0008 	eor.w	r0, r0, r8
 8010baa:	ea8e 1ed2 	eor.w	lr, lr, r2, lsr #7
 8010bae:	e9dd 2812 	ldrd	r2, r8, [sp, #72]	; 0x48
 8010bb2:	eb12 0b08 	adds.w	fp, r2, r8
 8010bb6:	e9dd 2802 	ldrd	r2, r8, [sp, #8]
 8010bba:	eb42 0808 	adc.w	r8, r2, r8
 8010bbe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bc0:	eb10 000b 	adds.w	r0, r0, fp
 8010bc4:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 8010bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bca:	eb4e 0e08 	adc.w	lr, lr, r8
 8010bce:	ea4b 3b42 	orr.w	fp, fp, r2, lsl #13
 8010bd2:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 8010bd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bd8:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8010bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bde:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8010be2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010be4:	ea4a 7a52 	orr.w	sl, sl, r2, lsr #29
 8010be8:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8010bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bee:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8010bf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bf4:	ea8b 0909 	eor.w	r9, fp, r9
 8010bf8:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 8010bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bfe:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 8010c02:	ea88 080a 	eor.w	r8, r8, sl
 8010c06:	ea89 090b 	eor.w	r9, r9, fp
 8010c0a:	ea88 1892 	eor.w	r8, r8, r2, lsr #6
 8010c0e:	eb10 0209 	adds.w	r2, r0, r9
 8010c12:	9212      	str	r2, [sp, #72]	; 0x48
 8010c14:	eb4e 0208 	adc.w	r2, lr, r8
 8010c18:	9202      	str	r2, [sp, #8]
 8010c1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010c1c:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8010c20:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010c24:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8010c28:	eb1c 0101 	adds.w	r1, ip, r1
 8010c2c:	eb46 0607 	adc.w	r6, r6, r7
 8010c30:	1889      	adds	r1, r1, r2
 8010c32:	9a02      	ldr	r2, [sp, #8]
 8010c34:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8010c36:	eb42 0606 	adc.w	r6, r2, r6
 8010c3a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010c3c:	188a      	adds	r2, r1, r2
 8010c3e:	922f      	str	r2, [sp, #188]	; 0xbc
 8010c40:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010c42:	eb46 0202 	adc.w	r2, r6, r2
 8010c46:	9231      	str	r2, [sp, #196]	; 0xc4
 8010c48:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010c4a:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 8010c4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010c50:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 8010c54:	0f10      	lsrs	r0, r2, #28
 8010c56:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010c58:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010c5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010c5e:	0792      	lsls	r2, r2, #30
 8010c60:	ea42 0297 	orr.w	r2, r2, r7, lsr #2
 8010c64:	07bf      	lsls	r7, r7, #30
 8010c66:	ea47 079e 	orr.w	r7, r7, lr, lsr #2
 8010c6a:	ea8c 0c07 	eor.w	ip, ip, r7
 8010c6e:	4050      	eors	r0, r2
 8010c70:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8010c72:	4672      	mov	r2, lr
 8010c74:	0652      	lsls	r2, r2, #25
 8010c76:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 8010c7a:	067f      	lsls	r7, r7, #25
 8010c7c:	ea47 17de 	orr.w	r7, r7, lr, lsr #7
 8010c80:	ea8c 0c07 	eor.w	ip, ip, r7
 8010c84:	4050      	eors	r0, r2
 8010c86:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8010c88:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010c8a:	4317      	orrs	r7, r2
 8010c8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010c8e:	ea42 0e0e 	orr.w	lr, r2, lr
 8010c92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c94:	4017      	ands	r7, r2
 8010c96:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010c98:	ea0e 0e02 	and.w	lr, lr, r2
 8010c9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010c9e:	ea02 0208 	and.w	r2, r2, r8
 8010ca2:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8010ca6:	433a      	orrs	r2, r7
 8010ca8:	ea08 0809 	and.w	r8, r8, r9
 8010cac:	eb1c 0202 	adds.w	r2, ip, r2
 8010cb0:	ea4e 0808 	orr.w	r8, lr, r8
 8010cb4:	eb40 0808 	adc.w	r8, r0, r8
 8010cb8:	eb12 0b01 	adds.w	fp, r2, r1
 8010cbc:	eb46 0208 	adc.w	r2, r6, r8
 8010cc0:	9227      	str	r2, [sp, #156]	; 0x9c
 8010cc2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010cc4:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8010cc6:	0b97      	lsrs	r7, r2, #14
 8010cc8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8010cca:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 8010cce:	0b90      	lsrs	r0, r2, #14
 8010cd0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010cd2:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 8010cd6:	0c91      	lsrs	r1, r2, #18
 8010cd8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8010cda:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8010cde:	0c92      	lsrs	r2, r2, #18
 8010ce0:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
        R( 4); R( 5); R( 6); R( 7);
 8010ce4:	4050      	eors	r0, r2
 8010ce6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8010ce8:	05d2      	lsls	r2, r2, #23
 8010cea:	404f      	eors	r7, r1
 8010cec:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8010cf0:	05f1      	lsls	r1, r6, #23
 8010cf2:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 8010cf4:	4042      	eors	r2, r0
 8010cf6:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8010cfa:	404f      	eors	r7, r1
 8010cfc:	9228      	str	r2, [sp, #160]	; 0xa0
 8010cfe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010d00:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8010d02:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8010d04:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8010d08:	404a      	eors	r2, r1
 8010d0a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8010d0c:	ea81 0600 	eor.w	r6, r1, r0
 8010d10:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8010d12:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8010d14:	400a      	ands	r2, r1
 8010d16:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8010d18:	400e      	ands	r6, r1
 8010d1a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010d1c:	404a      	eors	r2, r1
 8010d1e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8010d20:	404e      	eors	r6, r1
 8010d22:	6a19      	ldr	r1, [r3, #32]
 8010d24:	1841      	adds	r1, r0, r1
 8010d26:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010d28:	eb40 0c0c 	adc.w	ip, r0, ip
 8010d2c:	1852      	adds	r2, r2, r1
 8010d2e:	9901      	ldr	r1, [sp, #4]
 8010d30:	eb46 060c 	adc.w	r6, r6, ip
 8010d34:	2900      	cmp	r1, #0
 8010d36:	f001 8340 	beq.w	80123ba <_Transform_Sha512+0x1f36>
 8010d3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010d3c:	9804      	ldr	r0, [sp, #16]
 8010d3e:	ea4f 0851 	mov.w	r8, r1, lsr #1
 8010d42:	9904      	ldr	r1, [sp, #16]
 8010d44:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 8010d48:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8010d4c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010d4e:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 8010d52:	0a09      	lsrs	r1, r1, #8
 8010d54:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8010d58:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010d5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010d5e:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 8010d62:	ea8e 0c0c 	eor.w	ip, lr, ip
 8010d66:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 8010d6a:	9804      	ldr	r0, [sp, #16]
 8010d6c:	ea88 0101 	eor.w	r1, r8, r1
 8010d70:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 8010d74:	ea81 010e 	eor.w	r1, r1, lr
 8010d78:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 8010d7c:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8010d80:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010d82:	eb10 0a0e 	adds.w	sl, r0, lr
 8010d86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d88:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8010d8c:	eb40 0e0e 	adc.w	lr, r0, lr
 8010d90:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010d92:	eb11 010a 	adds.w	r1, r1, sl
 8010d96:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 8010d9a:	9807      	ldr	r0, [sp, #28]
 8010d9c:	eb4c 0c0e 	adc.w	ip, ip, lr
 8010da0:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 8010da4:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 8010da8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010daa:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 8010dae:	9807      	ldr	r0, [sp, #28]
 8010db0:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8010db4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010db6:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8010dba:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8010dbe:	9807      	ldr	r0, [sp, #28]
 8010dc0:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 8010dc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010dc6:	ea8a 0808 	eor.w	r8, sl, r8
 8010dca:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 8010dce:	9807      	ldr	r0, [sp, #28]
 8010dd0:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 8010dd4:	ea8e 0e09 	eor.w	lr, lr, r9
 8010dd8:	ea88 080a 	eor.w	r8, r8, sl
 8010ddc:	eb11 0108 	adds.w	r1, r1, r8
 8010de0:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 8010de4:	911a      	str	r1, [sp, #104]	; 0x68
 8010de6:	eb4c 010e 	adc.w	r1, ip, lr
 8010dea:	910a      	str	r1, [sp, #40]	; 0x28
 8010dec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010dee:	18ba      	adds	r2, r7, r2
 8010df0:	eb41 0006 	adc.w	r0, r1, r6
 8010df4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010df6:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8010df8:	1852      	adds	r2, r2, r1
 8010dfa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010dfc:	eb41 0000 	adc.w	r0, r1, r0
 8010e00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010e02:	1889      	adds	r1, r1, r2
 8010e04:	912a      	str	r1, [sp, #168]	; 0xa8
 8010e06:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010e08:	eb41 0100 	adc.w	r1, r1, r0
 8010e0c:	9129      	str	r1, [sp, #164]	; 0xa4
 8010e0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010e10:	ea4f 7e1b 	mov.w	lr, fp, lsr #28
 8010e14:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 8010e18:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 8010e1c:	0789      	lsls	r1, r1, #30
 8010e1e:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 8010e22:	ea4c 1c0b 	orr.w	ip, ip, fp, lsl #4
 8010e26:	ea8c 0c01 	eor.w	ip, ip, r1
 8010e2a:	ea4f 768b 	mov.w	r6, fp, lsl #30
 8010e2e:	0679      	lsls	r1, r7, #25
 8010e30:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 8010e34:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 8010e38:	ea8c 0c01 	eor.w	ip, ip, r1
 8010e3c:	ea8e 0e06 	eor.w	lr, lr, r6
 8010e40:	9925      	ldr	r1, [sp, #148]	; 0x94
 8010e42:	ea4f 664b 	mov.w	r6, fp, lsl #25
 8010e46:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 8010e4a:	ea8e 0e06 	eor.w	lr, lr, r6
 8010e4e:	ea41 060b 	orr.w	r6, r1, fp
 8010e52:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010e54:	430f      	orrs	r7, r1
 8010e56:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010e58:	400e      	ands	r6, r1
 8010e5a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010e5c:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 8010e60:	400f      	ands	r7, r1
 8010e62:	9925      	ldr	r1, [sp, #148]	; 0x94
 8010e64:	ea01 010b 	and.w	r1, r1, fp
 8010e68:	4331      	orrs	r1, r6
 8010e6a:	ea08 0809 	and.w	r8, r8, r9
 8010e6e:	eb1e 0101 	adds.w	r1, lr, r1
 8010e72:	ea47 0808 	orr.w	r8, r7, r8
 8010e76:	eb4c 0808 	adc.w	r8, ip, r8
 8010e7a:	188a      	adds	r2, r1, r2
 8010e7c:	9222      	str	r2, [sp, #136]	; 0x88
 8010e7e:	eb40 0208 	adc.w	r2, r0, r8
 8010e82:	9228      	str	r2, [sp, #160]	; 0xa0
 8010e84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010e86:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8010e88:	0b97      	lsrs	r7, r2, #14
 8010e8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010e8c:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 8010e90:	0b90      	lsrs	r0, r2, #14
 8010e92:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8010e94:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 8010e98:	0c91      	lsrs	r1, r2, #18
 8010e9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010e9c:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8010ea0:	0c92      	lsrs	r2, r2, #18
 8010ea2:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 8010ea6:	4050      	eors	r0, r2
 8010ea8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010eaa:	05d2      	lsls	r2, r2, #23
 8010eac:	404f      	eors	r7, r1
 8010eae:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8010eb2:	05f1      	lsls	r1, r6, #23
 8010eb4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8010eb6:	4042      	eors	r2, r0
 8010eb8:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8010ebc:	9230      	str	r2, [sp, #192]	; 0xc0
 8010ebe:	404f      	eors	r7, r1
 8010ec0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8010ec2:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8010ec4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8010ec6:	404a      	eors	r2, r1
 8010ec8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8010eca:	ea81 0600 	eor.w	r6, r1, r0
 8010ece:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010ed0:	400a      	ands	r2, r1
 8010ed2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010ed4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8010ed6:	f8d3 c02c 	ldr.w	ip, [r3, #44]	; 0x2c
 8010eda:	400e      	ands	r6, r1
 8010edc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8010ede:	404a      	eors	r2, r1
 8010ee0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8010ee2:	404e      	eors	r6, r1
 8010ee4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010ee6:	1841      	adds	r1, r0, r1
 8010ee8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8010eea:	eb40 0c0c 	adc.w	ip, r0, ip
 8010eee:	1852      	adds	r2, r2, r1
 8010ef0:	9901      	ldr	r1, [sp, #4]
 8010ef2:	eb46 060c 	adc.w	r6, r6, ip
 8010ef6:	2900      	cmp	r1, #0
 8010ef8:	f001 8264 	beq.w	80123c4 <_Transform_Sha512+0x1f40>
 8010efc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010efe:	9805      	ldr	r0, [sp, #20]
 8010f00:	ea4f 0851 	mov.w	r8, r1, lsr #1
 8010f04:	9905      	ldr	r1, [sp, #20]
 8010f06:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 8010f0a:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8010f0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010f10:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 8010f14:	0a09      	lsrs	r1, r1, #8
 8010f16:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8010f1a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010f1e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010f20:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 8010f24:	ea8e 0c0c 	eor.w	ip, lr, ip
 8010f28:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 8010f2c:	9805      	ldr	r0, [sp, #20]
 8010f2e:	ea88 0101 	eor.w	r1, r8, r1
 8010f32:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 8010f36:	ea81 010e 	eor.w	r1, r1, lr
 8010f3a:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 8010f3e:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8010f42:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010f44:	eb10 0a0e 	adds.w	sl, r0, lr
 8010f48:	9804      	ldr	r0, [sp, #16]
 8010f4a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8010f4e:	eb40 0e0e 	adc.w	lr, r0, lr
 8010f52:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010f54:	eb11 010a 	adds.w	r1, r1, sl
 8010f58:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 8010f5c:	9802      	ldr	r0, [sp, #8]
 8010f5e:	eb4c 0c0e 	adc.w	ip, ip, lr
 8010f62:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 8010f66:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 8010f6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010f6c:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 8010f70:	9802      	ldr	r0, [sp, #8]
 8010f72:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8010f76:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010f78:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8010f7c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8010f80:	9802      	ldr	r0, [sp, #8]
 8010f82:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 8010f86:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010f88:	ea8a 0808 	eor.w	r8, sl, r8
 8010f8c:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 8010f90:	9802      	ldr	r0, [sp, #8]
 8010f92:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 8010f96:	ea8e 0e09 	eor.w	lr, lr, r9
 8010f9a:	ea88 080a 	eor.w	r8, r8, sl
 8010f9e:	eb11 0108 	adds.w	r1, r1, r8
 8010fa2:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 8010fa6:	9114      	str	r1, [sp, #80]	; 0x50
 8010fa8:	eb4c 010e 	adc.w	r1, ip, lr
 8010fac:	9104      	str	r1, [sp, #16]
 8010fae:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8010fb0:	18ba      	adds	r2, r7, r2
 8010fb2:	eb41 0006 	adc.w	r0, r1, r6
 8010fb6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010fb8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8010fba:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8010fbc:	1852      	adds	r2, r2, r1
 8010fbe:	9904      	ldr	r1, [sp, #16]
 8010fc0:	eb41 0000 	adc.w	r0, r1, r0
 8010fc4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010fc6:	1889      	adds	r1, r1, r2
 8010fc8:	912b      	str	r1, [sp, #172]	; 0xac
 8010fca:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010fcc:	eb41 0100 	adc.w	r1, r1, r0
 8010fd0:	912c      	str	r1, [sp, #176]	; 0xb0
 8010fd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010fd4:	ea4f 7e11 	mov.w	lr, r1, lsr #28
 8010fd8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010fda:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 8010fde:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 8010fe2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8010fe4:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
 8010fe8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010fea:	0789      	lsls	r1, r1, #30
 8010fec:	ea41 0196 	orr.w	r1, r1, r6, lsr #2
 8010ff0:	07b6      	lsls	r6, r6, #30
 8010ff2:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 8010ff6:	ea8e 0e06 	eor.w	lr, lr, r6
 8010ffa:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8010ffc:	ea8c 0c01 	eor.w	ip, ip, r1
 8011000:	0679      	lsls	r1, r7, #25
 8011002:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 8011006:	ea8c 0c01 	eor.w	ip, ip, r1
 801100a:	0676      	lsls	r6, r6, #25
 801100c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801100e:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 8011012:	ea8e 0e06 	eor.w	lr, lr, r6
 8011016:	ea4b 0601 	orr.w	r6, fp, r1
 801101a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801101c:	430f      	orrs	r7, r1
 801101e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011020:	400e      	ands	r6, r1
 8011022:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011024:	e9dd 8927 	ldrd	r8, r9, [sp, #156]	; 0x9c
 8011028:	400f      	ands	r7, r1
 801102a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801102c:	ea0b 0101 	and.w	r1, fp, r1
 8011030:	4331      	orrs	r1, r6
 8011032:	ea08 0809 	and.w	r8, r8, r9
 8011036:	eb1e 0101 	adds.w	r1, lr, r1
 801103a:	ea47 0808 	orr.w	r8, r7, r8
 801103e:	eb4c 0808 	adc.w	r8, ip, r8
 8011042:	188a      	adds	r2, r1, r2
 8011044:	9223      	str	r2, [sp, #140]	; 0x8c
 8011046:	eb40 0208 	adc.w	r2, r0, r8
 801104a:	9224      	str	r2, [sp, #144]	; 0x90
 801104c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801104e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8011050:	0b97      	lsrs	r7, r2, #14
 8011052:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011054:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 8011058:	0b90      	lsrs	r0, r2, #14
 801105a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801105c:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 8011060:	0c91      	lsrs	r1, r2, #18
 8011062:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011064:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8011068:	0c92      	lsrs	r2, r2, #18
 801106a:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 801106e:	4050      	eors	r0, r2
 8011070:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011072:	05d2      	lsls	r2, r2, #23
 8011074:	404f      	eors	r7, r1
 8011076:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 801107a:	05f1      	lsls	r1, r6, #23
 801107c:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 801107e:	4042      	eors	r2, r0
 8011080:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8011084:	404f      	eors	r7, r1
 8011086:	9230      	str	r2, [sp, #192]	; 0xc0
 8011088:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801108a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801108c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801108e:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
 8011092:	404a      	eors	r2, r1
 8011094:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8011096:	ea81 0600 	eor.w	r6, r1, r0
 801109a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801109c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801109e:	400a      	ands	r2, r1
 80110a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80110a2:	400e      	ands	r6, r1
 80110a4:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80110a6:	404a      	eors	r2, r1
 80110a8:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80110aa:	404e      	eors	r6, r1
 80110ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80110ae:	1841      	adds	r1, r0, r1
 80110b0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80110b2:	eb40 0c0c 	adc.w	ip, r0, ip
 80110b6:	1852      	adds	r2, r2, r1
 80110b8:	9901      	ldr	r1, [sp, #4]
 80110ba:	eb46 060c 	adc.w	r6, r6, ip
 80110be:	2900      	cmp	r1, #0
 80110c0:	f001 8185 	beq.w	80123ce <_Transform_Sha512+0x1f4a>
 80110c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80110c6:	9806      	ldr	r0, [sp, #24]
 80110c8:	ea4f 0851 	mov.w	r8, r1, lsr #1
 80110cc:	9906      	ldr	r1, [sp, #24]
 80110ce:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 80110d2:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80110d6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80110d8:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 80110dc:	0a09      	lsrs	r1, r1, #8
 80110de:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80110e2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80110e6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80110e8:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 80110ec:	ea8e 0c0c 	eor.w	ip, lr, ip
 80110f0:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 80110f4:	9806      	ldr	r0, [sp, #24]
 80110f6:	ea88 0101 	eor.w	r1, r8, r1
 80110fa:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 80110fe:	ea81 010e 	eor.w	r1, r1, lr
 8011102:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 8011106:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 801110a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801110c:	eb10 0a0e 	adds.w	sl, r0, lr
 8011110:	9805      	ldr	r0, [sp, #20]
 8011112:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011116:	eb40 0e0e 	adc.w	lr, r0, lr
 801111a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801111c:	eb11 010a 	adds.w	r1, r1, sl
 8011120:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 8011124:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011126:	eb4c 0c0e 	adc.w	ip, ip, lr
 801112a:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 801112e:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 8011132:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011134:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 8011138:	980a      	ldr	r0, [sp, #40]	; 0x28
 801113a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 801113e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011140:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8011144:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 8011148:	980a      	ldr	r0, [sp, #40]	; 0x28
 801114a:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 801114e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011150:	ea8a 0808 	eor.w	r8, sl, r8
 8011154:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 8011158:	980a      	ldr	r0, [sp, #40]	; 0x28
 801115a:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 801115e:	ea8e 0e09 	eor.w	lr, lr, r9
 8011162:	ea88 080a 	eor.w	r8, r8, sl
 8011166:	eb11 0108 	adds.w	r1, r1, r8
 801116a:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 801116e:	9115      	str	r1, [sp, #84]	; 0x54
 8011170:	eb4c 010e 	adc.w	r1, ip, lr
 8011174:	9105      	str	r1, [sp, #20]
 8011176:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011178:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 801117c:	18ba      	adds	r2, r7, r2
 801117e:	eb41 0006 	adc.w	r0, r1, r6
 8011182:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011184:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8011186:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8011188:	1852      	adds	r2, r2, r1
 801118a:	9905      	ldr	r1, [sp, #20]
 801118c:	eb41 0000 	adc.w	r0, r1, r0
 8011190:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011192:	1889      	adds	r1, r1, r2
 8011194:	912d      	str	r1, [sp, #180]	; 0xb4
 8011196:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011198:	eb41 0100 	adc.w	r1, r1, r0
 801119c:	912e      	str	r1, [sp, #184]	; 0xb8
 801119e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80111a0:	ea4f 7e11 	mov.w	lr, r1, lsr #28
 80111a4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80111a6:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 80111aa:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 80111ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80111b0:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
 80111b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80111b6:	0789      	lsls	r1, r1, #30
 80111b8:	ea41 0196 	orr.w	r1, r1, r6, lsr #2
 80111bc:	07b6      	lsls	r6, r6, #30
 80111be:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 80111c2:	ea8e 0e06 	eor.w	lr, lr, r6
 80111c6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80111c8:	ea8c 0c01 	eor.w	ip, ip, r1
 80111cc:	0679      	lsls	r1, r7, #25
 80111ce:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 80111d2:	0676      	lsls	r6, r6, #25
 80111d4:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 80111d8:	ea8c 0c01 	eor.w	ip, ip, r1
 80111dc:	ea8e 0e06 	eor.w	lr, lr, r6
 80111e0:	e9dd 1622 	ldrd	r1, r6, [sp, #136]	; 0x88
 80111e4:	430e      	orrs	r6, r1
 80111e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80111e8:	430f      	orrs	r7, r1
 80111ea:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80111ec:	400f      	ands	r7, r1
 80111ee:	e9dd 1822 	ldrd	r1, r8, [sp, #136]	; 0x88
 80111f2:	ea01 0108 	and.w	r1, r1, r8
 80111f6:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 80111fa:	ea06 060b 	and.w	r6, r6, fp
 80111fe:	4331      	orrs	r1, r6
 8011200:	ea08 0809 	and.w	r8, r8, r9
 8011204:	eb1e 0101 	adds.w	r1, lr, r1
 8011208:	ea47 0808 	orr.w	r8, r7, r8
 801120c:	eb4c 0808 	adc.w	r8, ip, r8
 8011210:	188a      	adds	r2, r1, r2
 8011212:	9225      	str	r2, [sp, #148]	; 0x94
 8011214:	eb40 0208 	adc.w	r2, r0, r8
 8011218:	9226      	str	r2, [sp, #152]	; 0x98
 801121a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801121c:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 801121e:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 8011222:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011224:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 8011228:	0b90      	lsrs	r0, r2, #14
 801122a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801122c:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 8011230:	0c91      	lsrs	r1, r2, #18
 8011232:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011234:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8011238:	0c92      	lsrs	r2, r2, #18
 801123a:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 801123e:	4050      	eors	r0, r2
 8011240:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011242:	05d2      	lsls	r2, r2, #23
 8011244:	ea8c 0c01 	eor.w	ip, ip, r1
 8011248:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 801124c:	05f1      	lsls	r1, r6, #23
 801124e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 8011250:	4042      	eors	r2, r0
 8011252:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8011256:	9230      	str	r2, [sp, #192]	; 0xc0
 8011258:	ea8c 0c01 	eor.w	ip, ip, r1
 801125c:	e9dd 212a 	ldrd	r2, r1, [sp, #168]	; 0xa8
 8011260:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011262:	404a      	eors	r2, r1
 8011264:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011266:	ea81 0700 	eor.w	r7, r1, r0
 801126a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801126c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801126e:	400a      	ands	r2, r1
 8011270:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011272:	404a      	eors	r2, r1
 8011274:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011276:	4037      	ands	r7, r6
 8011278:	404f      	eors	r7, r1
 801127a:	e9d3 160e 	ldrd	r1, r6, [r3, #56]	; 0x38
 801127e:	1841      	adds	r1, r0, r1
 8011280:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8011282:	eb40 0606 	adc.w	r6, r0, r6
 8011286:	1852      	adds	r2, r2, r1
 8011288:	9901      	ldr	r1, [sp, #4]
 801128a:	eb47 0706 	adc.w	r7, r7, r6
 801128e:	2900      	cmp	r1, #0
 8011290:	f001 80a2 	beq.w	80123d8 <_Transform_Sha512+0x1f54>
 8011294:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011296:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011298:	ea4f 0851 	mov.w	r8, r1, lsr #1
 801129c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801129e:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 80112a2:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80112a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80112a8:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 80112ac:	0a09      	lsrs	r1, r1, #8
 80112ae:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80112b2:	0a06      	lsrs	r6, r0, #8
 80112b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80112b6:	ea88 0101 	eor.w	r1, r8, r1
 80112ba:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 80112be:	ea4f 18d0 	mov.w	r8, r0, lsr #7
 80112c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80112c4:	ea8e 0606 	eor.w	r6, lr, r6
 80112c8:	ea48 6840 	orr.w	r8, r8, r0, lsl #25
 80112cc:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
 80112d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80112d2:	ea81 0108 	eor.w	r1, r1, r8
 80112d6:	1809      	adds	r1, r1, r0
 80112d8:	9806      	ldr	r0, [sp, #24]
 80112da:	eb40 0606 	adc.w	r6, r0, r6
 80112de:	9818      	ldr	r0, [sp, #96]	; 0x60
 80112e0:	1809      	adds	r1, r1, r0
 80112e2:	9808      	ldr	r0, [sp, #32]
 80112e4:	eb40 0606 	adc.w	r6, r0, r6
 80112e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80112ea:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 80112ee:	9804      	ldr	r0, [sp, #16]
 80112f0:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 80112f4:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 80112f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80112fa:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 80112fe:	9804      	ldr	r0, [sp, #16]
 8011300:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 8011304:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011306:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 801130a:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 801130e:	9804      	ldr	r0, [sp, #16]
 8011310:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 8011314:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011316:	ea8a 0808 	eor.w	r8, sl, r8
 801131a:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 801131e:	9804      	ldr	r0, [sp, #16]
 8011320:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 8011324:	ea8e 0e09 	eor.w	lr, lr, r9
 8011328:	ea88 080a 	eor.w	r8, r8, sl
 801132c:	eb11 0108 	adds.w	r1, r1, r8
 8011330:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 8011334:	9116      	str	r1, [sp, #88]	; 0x58
 8011336:	eb46 010e 	adc.w	r1, r6, lr
 801133a:	9106      	str	r1, [sp, #24]
 801133c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801133e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011342:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8011346:	eb1c 0202 	adds.w	r2, ip, r2
 801134a:	eb41 0007 	adc.w	r0, r1, r7
 801134e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011350:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
 8011354:	1852      	adds	r2, r2, r1
 8011356:	9906      	ldr	r1, [sp, #24]
 8011358:	eb41 0000 	adc.w	r0, r1, r0
 801135c:	eb1b 0102 	adds.w	r1, fp, r2
 8011360:	912f      	str	r1, [sp, #188]	; 0xbc
 8011362:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011364:	eb41 0100 	adc.w	r1, r1, r0
 8011368:	9130      	str	r1, [sp, #192]	; 0xc0
 801136a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801136c:	078e      	lsls	r6, r1, #30
 801136e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011370:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 8011374:	ea4f 7e81 	mov.w	lr, r1, lsl #30
 8011378:	9926      	ldr	r1, [sp, #152]	; 0x98
 801137a:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 801137e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011380:	0f0f      	lsrs	r7, r1, #28
 8011382:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011384:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8011388:	0f09      	lsrs	r1, r1, #28
 801138a:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 801138e:	404e      	eors	r6, r1
 8011390:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011392:	0649      	lsls	r1, r1, #25
 8011394:	ea41 11dc 	orr.w	r1, r1, ip, lsr #7
 8011398:	ea8e 0e07 	eor.w	lr, lr, r7
 801139c:	4667      	mov	r7, ip
 801139e:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 80113a2:	067f      	lsls	r7, r7, #25
 80113a4:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 80113a8:	404e      	eors	r6, r1
 80113aa:	ea8e 0e07 	eor.w	lr, lr, r7
 80113ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80113b0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80113b2:	430f      	orrs	r7, r1
 80113b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80113b6:	ea41 0c0c 	orr.w	ip, r1, ip
 80113ba:	9922      	ldr	r1, [sp, #136]	; 0x88
 80113bc:	400f      	ands	r7, r1
 80113be:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80113c0:	ea0c 0c01 	and.w	ip, ip, r1
 80113c4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80113c6:	ea01 0108 	and.w	r1, r1, r8
 80113ca:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80113ce:	4339      	orrs	r1, r7
 80113d0:	ea08 0809 	and.w	r8, r8, r9
 80113d4:	eb1e 0101 	adds.w	r1, lr, r1
 80113d8:	ea4c 0808 	orr.w	r8, ip, r8
 80113dc:	eb46 0808 	adc.w	r8, r6, r8
 80113e0:	eb11 0b02 	adds.w	fp, r1, r2
 80113e4:	eb40 0208 	adc.w	r2, r0, r8
 80113e8:	9227      	str	r2, [sp, #156]	; 0x9c
 80113ea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80113ec:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 80113ee:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 80113f2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80113f4:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 80113f8:	0b90      	lsrs	r0, r2, #14
 80113fa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80113fc:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 8011400:	0c91      	lsrs	r1, r2, #18
 8011402:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8011404:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 8011408:	0c92      	lsrs	r2, r2, #18
 801140a:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
        R( 8); R( 9); R(10); R(11);
 801140e:	4050      	eors	r0, r2
 8011410:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8011412:	05d2      	lsls	r2, r2, #23
 8011414:	ea8c 0c01 	eor.w	ip, ip, r1
 8011418:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 801141c:	05f1      	lsls	r1, r6, #23
 801141e:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 8011420:	4042      	eors	r2, r0
 8011422:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 8011426:	9231      	str	r2, [sp, #196]	; 0xc4
 8011428:	ea8c 0c01 	eor.w	ip, ip, r1
 801142c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801142e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011430:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8011432:	404a      	eors	r2, r1
 8011434:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011436:	ea81 0700 	eor.w	r7, r1, r0
 801143a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 801143c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801143e:	400a      	ands	r2, r1
 8011440:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011442:	404a      	eors	r2, r1
 8011444:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011446:	4037      	ands	r7, r6
 8011448:	404f      	eors	r7, r1
 801144a:	e9d3 1610 	ldrd	r1, r6, [r3, #64]	; 0x40
 801144e:	1841      	adds	r1, r0, r1
 8011450:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8011452:	eb40 0606 	adc.w	r6, r0, r6
 8011456:	1852      	adds	r2, r2, r1
 8011458:	9901      	ldr	r1, [sp, #4]
 801145a:	eb47 0706 	adc.w	r7, r7, r6
 801145e:	2900      	cmp	r1, #0
 8011460:	f000 87bf 	beq.w	80123e2 <_Transform_Sha512+0x1f5e>
 8011464:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011466:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011468:	ea4f 2811 	mov.w	r8, r1, lsr #8
 801146c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801146e:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 8011472:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8011476:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011478:	ea4e 6e01 	orr.w	lr, lr, r1, lsl #24
 801147c:	0849      	lsrs	r1, r1, #1
 801147e:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8011482:	0846      	lsrs	r6, r0, #1
 8011484:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011486:	ea88 0101 	eor.w	r1, r8, r1
 801148a:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 801148e:	ea4f 18d0 	mov.w	r8, r0, lsr #7
 8011492:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011494:	ea8e 0606 	eor.w	r6, lr, r6
 8011498:	ea48 6840 	orr.w	r8, r8, r0, lsl #25
 801149c:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
 80114a0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80114a2:	ea81 0108 	eor.w	r1, r1, r8
 80114a6:	1809      	adds	r1, r1, r0
 80114a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80114aa:	eb40 0606 	adc.w	r6, r0, r6
 80114ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80114b0:	1809      	adds	r1, r1, r0
 80114b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114b4:	eb40 0606 	adc.w	r6, r0, r6
 80114b8:	9805      	ldr	r0, [sp, #20]
 80114ba:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 80114be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80114c0:	ea4e 7e50 	orr.w	lr, lr, r0, lsr #29
 80114c4:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 80114c8:	9805      	ldr	r0, [sp, #20]
 80114ca:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 80114ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80114d0:	ea4f 48d0 	mov.w	r8, r0, lsr #19
 80114d4:	9805      	ldr	r0, [sp, #20]
 80114d6:	ea48 3840 	orr.w	r8, r8, r0, lsl #13
 80114da:	ea4f 49d0 	mov.w	r9, r0, lsr #19
 80114de:	9815      	ldr	r0, [sp, #84]	; 0x54
 80114e0:	ea8a 0808 	eor.w	r8, sl, r8
 80114e4:	ea49 3940 	orr.w	r9, r9, r0, lsl #13
 80114e8:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 80114ec:	9805      	ldr	r0, [sp, #20]
 80114ee:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 80114f2:	ea8e 0e09 	eor.w	lr, lr, r9
 80114f6:	ea88 080a 	eor.w	r8, r8, sl
 80114fa:	eb11 0108 	adds.w	r1, r1, r8
 80114fe:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 8011502:	911b      	str	r1, [sp, #108]	; 0x6c
 8011504:	eb46 010e 	adc.w	r1, r6, lr
 8011508:	910b      	str	r1, [sp, #44]	; 0x2c
 801150a:	9931      	ldr	r1, [sp, #196]	; 0xc4
 801150c:	eb1c 0202 	adds.w	r2, ip, r2
 8011510:	eb41 0007 	adc.w	r0, r1, r7
 8011514:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011516:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 801151a:	1852      	adds	r2, r2, r1
 801151c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801151e:	eb41 0000 	adc.w	r0, r1, r0
 8011522:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011524:	1889      	adds	r1, r1, r2
 8011526:	9129      	str	r1, [sp, #164]	; 0xa4
 8011528:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801152a:	eb41 0100 	adc.w	r1, r1, r0
 801152e:	912a      	str	r1, [sp, #168]	; 0xa8
 8011530:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011532:	ea4f 7e8b 	mov.w	lr, fp, lsl #30
 8011536:	ea4f 771b 	mov.w	r7, fp, lsr #28
 801153a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 801153e:	078e      	lsls	r6, r1, #30
 8011540:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 8011544:	0f09      	lsrs	r1, r1, #28
 8011546:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 801154a:	ea46 069b 	orr.w	r6, r6, fp, lsr #2
 801154e:	404e      	eors	r6, r1
 8011550:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011552:	0649      	lsls	r1, r1, #25
 8011554:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 8011558:	404e      	eors	r6, r1
 801155a:	ea8e 0e07 	eor.w	lr, lr, r7
 801155e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011560:	ea4f 674b 	mov.w	r7, fp, lsl #25
 8011564:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 8011568:	ea8e 0e07 	eor.w	lr, lr, r7
 801156c:	ea41 070b 	orr.w	r7, r1, fp
 8011570:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011572:	ea41 0c0c 	orr.w	ip, r1, ip
 8011576:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011578:	400f      	ands	r7, r1
 801157a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801157c:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 8011580:	ea0c 0c01 	and.w	ip, ip, r1
 8011584:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011586:	ea01 010b 	and.w	r1, r1, fp
 801158a:	4339      	orrs	r1, r7
 801158c:	ea08 0809 	and.w	r8, r8, r9
 8011590:	eb1e 0101 	adds.w	r1, lr, r1
 8011594:	ea4c 0808 	orr.w	r8, ip, r8
 8011598:	eb46 0808 	adc.w	r8, r6, r8
 801159c:	188a      	adds	r2, r1, r2
 801159e:	9222      	str	r2, [sp, #136]	; 0x88
 80115a0:	eb40 0208 	adc.w	r2, r0, r8
 80115a4:	9228      	str	r2, [sp, #160]	; 0xa0
 80115a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80115a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80115aa:	0c97      	lsrs	r7, r2, #18
 80115ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80115ae:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 80115b2:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 80115b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80115b8:	ea4c 3c82 	orr.w	ip, ip, r2, lsl #14
 80115bc:	0b91      	lsrs	r1, r2, #14
 80115be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80115c0:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 80115c4:	0b92      	lsrs	r2, r2, #14
 80115c6:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 80115ca:	ea8c 0c02 	eor.w	ip, ip, r2
 80115ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80115d0:	05d2      	lsls	r2, r2, #23
 80115d2:	404f      	eors	r7, r1
 80115d4:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 80115d8:	05c1      	lsls	r1, r0, #23
 80115da:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80115dc:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80115e0:	4079      	eors	r1, r7
 80115e2:	9131      	str	r1, [sp, #196]	; 0xc4
 80115e4:	e9d3 1612 	ldrd	r1, r6, [r3, #72]	; 0x48
 80115e8:	ea8c 0c02 	eor.w	ip, ip, r2
 80115ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80115ee:	1851      	adds	r1, r2, r1
 80115f0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80115f2:	eb42 0606 	adc.w	r6, r2, r6
 80115f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80115f8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80115fa:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 80115fc:	4050      	eors	r0, r2
 80115fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011600:	407a      	eors	r2, r7
 8011602:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8011604:	4038      	ands	r0, r7
 8011606:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8011608:	403a      	ands	r2, r7
 801160a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 801160c:	4078      	eors	r0, r7
 801160e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011610:	1809      	adds	r1, r1, r0
 8011612:	ea82 0207 	eor.w	r2, r2, r7
 8011616:	eb46 0602 	adc.w	r6, r6, r2
 801161a:	9a01      	ldr	r2, [sp, #4]
 801161c:	2a00      	cmp	r2, #0
 801161e:	f000 86e7 	beq.w	80123f0 <_Transform_Sha512+0x1f6c>
 8011622:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011624:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011626:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011628:	ea4f 2812 	mov.w	r8, r2, lsr #8
 801162c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801162e:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8011632:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8011636:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011638:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 801163c:	0852      	lsrs	r2, r2, #1
 801163e:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 8011642:	0840      	lsrs	r0, r0, #1
 8011644:	ea40 70c7 	orr.w	r0, r0, r7, lsl #31
 8011648:	ea88 0202 	eor.w	r2, r8, r2
 801164c:	ea4f 18d7 	mov.w	r8, r7, lsr #7
 8011650:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011652:	ea8e 0000 	eor.w	r0, lr, r0
 8011656:	ea48 6847 	orr.w	r8, r8, r7, lsl #25
 801165a:	ea80 10d7 	eor.w	r0, r0, r7, lsr #7
 801165e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8011660:	ea82 0208 	eor.w	r2, r2, r8
 8011664:	19d2      	adds	r2, r2, r7
 8011666:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8011668:	eb47 0000 	adc.w	r0, r7, r0
 801166c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801166e:	19d2      	adds	r2, r2, r7
 8011670:	9f07      	ldr	r7, [sp, #28]
 8011672:	eb47 0000 	adc.w	r0, r7, r0
 8011676:	9f06      	ldr	r7, [sp, #24]
 8011678:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801167c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801167e:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 8011682:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
 8011686:	9f06      	ldr	r7, [sp, #24]
 8011688:	ea4a 7a57 	orr.w	sl, sl, r7, lsr #29
 801168c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801168e:	ea4f 48d7 	mov.w	r8, r7, lsr #19
 8011692:	9f06      	ldr	r7, [sp, #24]
 8011694:	ea48 3847 	orr.w	r8, r8, r7, lsl #13
 8011698:	ea4f 49d7 	mov.w	r9, r7, lsr #19
 801169c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801169e:	ea8a 0808 	eor.w	r8, sl, r8
 80116a2:	ea49 3947 	orr.w	r9, r9, r7, lsl #13
 80116a6:	ea4f 1a97 	mov.w	sl, r7, lsr #6
 80116aa:	9f06      	ldr	r7, [sp, #24]
 80116ac:	ea4a 6a87 	orr.w	sl, sl, r7, lsl #26
 80116b0:	ea8e 0e09 	eor.w	lr, lr, r9
 80116b4:	ea88 080a 	eor.w	r8, r8, sl
 80116b8:	eb12 0208 	adds.w	r2, r2, r8
 80116bc:	ea8e 1e97 	eor.w	lr, lr, r7, lsr #6
 80116c0:	921c      	str	r2, [sp, #112]	; 0x70
 80116c2:	eb40 020e 	adc.w	r2, r0, lr
 80116c6:	920c      	str	r2, [sp, #48]	; 0x30
 80116c8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80116ca:	1889      	adds	r1, r1, r2
 80116cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116ce:	eb46 060c 	adc.w	r6, r6, ip
 80116d2:	1889      	adds	r1, r1, r2
 80116d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116d6:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 80116da:	eb42 0606 	adc.w	r6, r2, r6
 80116de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80116e0:	1852      	adds	r2, r2, r1
 80116e2:	922b      	str	r2, [sp, #172]	; 0xac
 80116e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80116e6:	eb42 0206 	adc.w	r2, r2, r6
 80116ea:	922c      	str	r2, [sp, #176]	; 0xb0
 80116ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80116ee:	0790      	lsls	r0, r2, #30
 80116f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80116f2:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 80116f6:	ea4f 7e82 	mov.w	lr, r2, lsl #30
 80116fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80116fc:	ea4e 0e92 	orr.w	lr, lr, r2, lsr #2
 8011700:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011702:	0f17      	lsrs	r7, r2, #28
 8011704:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011706:	ea47 1702 	orr.w	r7, r7, r2, lsl #4
 801170a:	0f12      	lsrs	r2, r2, #28
 801170c:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 8011710:	4050      	eors	r0, r2
 8011712:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011714:	0652      	lsls	r2, r2, #25
 8011716:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 801171a:	ea8e 0e07 	eor.w	lr, lr, r7
 801171e:	4667      	mov	r7, ip
 8011720:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8011724:	4050      	eors	r0, r2
 8011726:	067f      	lsls	r7, r7, #25
 8011728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801172a:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 801172e:	ea8e 0e07 	eor.w	lr, lr, r7
 8011732:	ea4b 0c02 	orr.w	ip, fp, r2
 8011736:	e9dd 2727 	ldrd	r2, r7, [sp, #156]	; 0x9c
 801173a:	4317      	orrs	r7, r2
 801173c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801173e:	ea0c 0c02 	and.w	ip, ip, r2
 8011742:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011744:	e9dd 8927 	ldrd	r8, r9, [sp, #156]	; 0x9c
 8011748:	4017      	ands	r7, r2
 801174a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801174c:	ea0b 0202 	and.w	r2, fp, r2
 8011750:	ea08 0809 	and.w	r8, r8, r9
 8011754:	ea4c 0202 	orr.w	r2, ip, r2
 8011758:	ea47 0808 	orr.w	r8, r7, r8
 801175c:	eb1e 0202 	adds.w	r2, lr, r2
 8011760:	eb40 0808 	adc.w	r8, r0, r8
 8011764:	1852      	adds	r2, r2, r1
 8011766:	9223      	str	r2, [sp, #140]	; 0x8c
 8011768:	eb46 0208 	adc.w	r2, r6, r8
 801176c:	9224      	str	r2, [sp, #144]	; 0x90
 801176e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011770:	982b      	ldr	r0, [sp, #172]	; 0xac
 8011772:	0c97      	lsrs	r7, r2, #18
 8011774:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011776:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 801177a:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 801177e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011780:	ea4c 3c82 	orr.w	ip, ip, r2, lsl #14
 8011784:	0b91      	lsrs	r1, r2, #14
 8011786:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011788:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 801178c:	0b92      	lsrs	r2, r2, #14
 801178e:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8011792:	ea8c 0c02 	eor.w	ip, ip, r2
 8011796:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011798:	05d2      	lsls	r2, r2, #23
 801179a:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 801179e:	404f      	eors	r7, r1
 80117a0:	05c1      	lsls	r1, r0, #23
 80117a2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80117a4:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80117a8:	404f      	eors	r7, r1
 80117aa:	e9d3 1614 	ldrd	r1, r6, [r3, #80]	; 0x50
 80117ae:	ea8c 0c02 	eor.w	ip, ip, r2
 80117b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80117b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80117b6:	1851      	adds	r1, r2, r1
 80117b8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80117ba:	eb42 0906 	adc.w	r9, r2, r6
 80117be:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80117c0:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80117c2:	4050      	eors	r0, r2
 80117c4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80117c6:	4056      	eors	r6, r2
 80117c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80117ca:	4010      	ands	r0, r2
 80117cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80117ce:	4016      	ands	r6, r2
 80117d0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80117d2:	4050      	eors	r0, r2
 80117d4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80117d6:	1809      	adds	r1, r1, r0
 80117d8:	ea86 0202 	eor.w	r2, r6, r2
 80117dc:	eb49 0602 	adc.w	r6, r9, r2
 80117e0:	9a01      	ldr	r2, [sp, #4]
 80117e2:	912d      	str	r1, [sp, #180]	; 0xb4
 80117e4:	2a00      	cmp	r2, #0
 80117e6:	f000 860a 	beq.w	80123fe <_Transform_Sha512+0x1f7a>
 80117ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80117ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80117ee:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80117f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117f4:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 80117f8:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 80117fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80117fe:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 8011802:	0852      	lsrs	r2, r2, #1
 8011804:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011808:	0848      	lsrs	r0, r1, #1
 801180a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801180c:	ea88 0202 	eor.w	r2, r8, r2
 8011810:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8011814:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8011818:	990e      	ldr	r1, [sp, #56]	; 0x38
 801181a:	ea8e 0000 	eor.w	r0, lr, r0
 801181e:	ea48 6841 	orr.w	r8, r8, r1, lsl #25
 8011822:	ea80 10d1 	eor.w	r0, r0, r1, lsr #7
 8011826:	991d      	ldr	r1, [sp, #116]	; 0x74
 8011828:	ea82 0208 	eor.w	r2, r2, r8
 801182c:	1852      	adds	r2, r2, r1
 801182e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011830:	eb41 0000 	adc.w	r0, r1, r0
 8011834:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011836:	1852      	adds	r2, r2, r1
 8011838:	9902      	ldr	r1, [sp, #8]
 801183a:	eb41 0000 	adc.w	r0, r1, r0
 801183e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011840:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8011844:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011846:	ea4e 7e51 	orr.w	lr, lr, r1, lsr #29
 801184a:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 801184e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011850:	ea4a 7a51 	orr.w	sl, sl, r1, lsr #29
 8011854:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011856:	ea4f 48d1 	mov.w	r8, r1, lsr #19
 801185a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801185c:	ea48 3841 	orr.w	r8, r8, r1, lsl #13
 8011860:	ea4f 49d1 	mov.w	r9, r1, lsr #19
 8011864:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011866:	ea8a 0808 	eor.w	r8, sl, r8
 801186a:	ea49 3941 	orr.w	r9, r9, r1, lsl #13
 801186e:	ea4f 1a91 	mov.w	sl, r1, lsr #6
 8011872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011874:	ea4a 6a81 	orr.w	sl, sl, r1, lsl #26
 8011878:	ea8e 0e09 	eor.w	lr, lr, r9
 801187c:	ea88 080a 	eor.w	r8, r8, sl
 8011880:	eb12 0208 	adds.w	r2, r2, r8
 8011884:	ea8e 1e91 	eor.w	lr, lr, r1, lsr #6
 8011888:	921d      	str	r2, [sp, #116]	; 0x74
 801188a:	eb40 020e 	adc.w	r2, r0, lr
 801188e:	920d      	str	r2, [sp, #52]	; 0x34
 8011890:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011892:	19d1      	adds	r1, r2, r7
 8011894:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011896:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8011898:	eb46 060c 	adc.w	r6, r6, ip
 801189c:	1889      	adds	r1, r1, r2
 801189e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118a0:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 80118a4:	eb42 0606 	adc.w	r6, r2, r6
 80118a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80118aa:	1852      	adds	r2, r2, r1
 80118ac:	922d      	str	r2, [sp, #180]	; 0xb4
 80118ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80118b0:	eb42 0206 	adc.w	r2, r2, r6
 80118b4:	922e      	str	r2, [sp, #184]	; 0xb8
 80118b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80118b8:	ea4f 7e82 	mov.w	lr, r2, lsl #30
 80118bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80118be:	ea4e 0e92 	orr.w	lr, lr, r2, lsr #2
 80118c2:	ea4f 7882 	mov.w	r8, r2, lsl #30
 80118c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80118c8:	ea48 0892 	orr.w	r8, r8, r2, lsr #2
 80118cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80118ce:	0f10      	lsrs	r0, r2, #28
 80118d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80118d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80118d6:	0f12      	lsrs	r2, r2, #28
 80118d8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80118dc:	ea8e 0e02 	eor.w	lr, lr, r2
 80118e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80118e2:	0652      	lsls	r2, r2, #25
 80118e4:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 80118e8:	ea88 0800 	eor.w	r8, r8, r0
 80118ec:	0678      	lsls	r0, r7, #25
 80118ee:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80118f0:	ea40 10d7 	orr.w	r0, r0, r7, lsr #7
 80118f4:	ea8e 0e02 	eor.w	lr, lr, r2
 80118f8:	ea88 0800 	eor.w	r8, r8, r0
 80118fc:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8011900:	4310      	orrs	r0, r2
 8011902:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011904:	ea42 0907 	orr.w	r9, r2, r7
 8011908:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801190a:	ea09 0902 	and.w	r9, r9, r2
 801190e:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8011912:	403a      	ands	r2, r7
 8011914:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8011916:	ea00 000b 	and.w	r0, r0, fp
 801191a:	4310      	orrs	r0, r2
 801191c:	ea07 070c 	and.w	r7, r7, ip
 8011920:	eb18 0000 	adds.w	r0, r8, r0
 8011924:	ea49 0707 	orr.w	r7, r9, r7
 8011928:	eb4e 0707 	adc.w	r7, lr, r7
 801192c:	1842      	adds	r2, r0, r1
 801192e:	9225      	str	r2, [sp, #148]	; 0x94
 8011930:	eb46 0207 	adc.w	r2, r6, r7
 8011934:	9226      	str	r2, [sp, #152]	; 0x98
 8011936:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011938:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801193a:	ea4f 4992 	mov.w	r9, r2, lsr #18
 801193e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011940:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8011944:	ea4f 4e92 	mov.w	lr, r2, lsr #18
 8011948:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801194a:	ea4e 3e82 	orr.w	lr, lr, r2, lsl #14
 801194e:	0b91      	lsrs	r1, r2, #14
 8011950:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011952:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8011956:	0b92      	lsrs	r2, r2, #14
 8011958:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 801195c:	ea8e 0e02 	eor.w	lr, lr, r2
 8011960:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8011962:	05d2      	lsls	r2, r2, #23
 8011964:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8011968:	ea89 0901 	eor.w	r9, r9, r1
 801196c:	05c1      	lsls	r1, r0, #23
 801196e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8011970:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 8011972:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8011976:	ea89 0901 	eor.w	r9, r9, r1
 801197a:	ea8e 0e02 	eor.w	lr, lr, r2
 801197e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011980:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011982:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011984:	404a      	eors	r2, r1
 8011986:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011988:	ea81 0600 	eor.w	r6, r1, r0
 801198c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801198e:	400a      	ands	r2, r1
 8011990:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8011992:	400e      	ands	r6, r1
 8011994:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011996:	404a      	eors	r2, r1
 8011998:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801199a:	404e      	eors	r6, r1
 801199c:	e9d3 1016 	ldrd	r1, r0, [r3, #88]	; 0x58
 80119a0:	1879      	adds	r1, r7, r1
 80119a2:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 80119a4:	eb47 0000 	adc.w	r0, r7, r0
 80119a8:	1852      	adds	r2, r2, r1
 80119aa:	9901      	ldr	r1, [sp, #4]
 80119ac:	922f      	str	r2, [sp, #188]	; 0xbc
 80119ae:	eb46 0600 	adc.w	r6, r6, r0
 80119b2:	2900      	cmp	r1, #0
 80119b4:	f000 852a 	beq.w	801240c <_Transform_Sha512+0x1f88>
 80119b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80119ba:	9803      	ldr	r0, [sp, #12]
 80119bc:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80119c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80119c2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 80119c6:	9903      	ldr	r1, [sp, #12]
 80119c8:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
 80119cc:	0a0f      	lsrs	r7, r1, #8
 80119ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80119d0:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 80119d4:	0849      	lsrs	r1, r1, #1
 80119d6:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 80119da:	0840      	lsrs	r0, r0, #1
 80119dc:	ea40 70c8 	orr.w	r0, r0, r8, lsl #31
 80119e0:	4078      	eors	r0, r7
 80119e2:	9f03      	ldr	r7, [sp, #12]
 80119e4:	ea8c 0101 	eor.w	r1, ip, r1
 80119e8:	ea4f 1cd8 	mov.w	ip, r8, lsr #7
 80119ec:	ea4c 6c47 	orr.w	ip, ip, r7, lsl #25
 80119f0:	ea80 10d7 	eor.w	r0, r0, r7, lsr #7
 80119f4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80119f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80119fa:	ea81 010c 	eor.w	r1, r1, ip
 80119fe:	19c9      	adds	r1, r1, r7
 8011a00:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011a02:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8011a06:	eb47 0000 	adc.w	r0, r7, r0
 8011a0a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011a0c:	19c9      	adds	r1, r1, r7
 8011a0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011a10:	eb47 0000 	adc.w	r0, r7, r0
 8011a14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8011a16:	00ff      	lsls	r7, r7, #3
 8011a18:	ea47 775c 	orr.w	r7, r7, ip, lsr #29
 8011a1c:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8011a20:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8011a24:	ea4a 7a5c 	orr.w	sl, sl, ip, lsr #29
 8011a28:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8011a2c:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8011a30:	ea4c 3c48 	orr.w	ip, ip, r8, lsl #13
 8011a34:	ea4f 48d8 	mov.w	r8, r8, lsr #19
 8011a38:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8011a3c:	ea8a 0c0c 	eor.w	ip, sl, ip
 8011a40:	ea4f 1a92 	mov.w	sl, r2, lsr #6
 8011a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a46:	ea4a 6a82 	orr.w	sl, sl, r2, lsl #26
 8011a4a:	ea87 0708 	eor.w	r7, r7, r8
 8011a4e:	ea8c 0c0a 	eor.w	ip, ip, sl
 8011a52:	ea87 1792 	eor.w	r7, r7, r2, lsr #6
 8011a56:	eb11 020c 	adds.w	r2, r1, ip
 8011a5a:	eb40 0107 	adc.w	r1, r0, r7
 8011a5e:	921e      	str	r2, [sp, #120]	; 0x78
 8011a60:	910e      	str	r1, [sp, #56]	; 0x38
 8011a62:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011a64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a66:	eb19 0202 	adds.w	r2, r9, r2
 8011a6a:	eb4e 0e06 	adc.w	lr, lr, r6
 8011a6e:	1852      	adds	r2, r2, r1
 8011a70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011a72:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8011a74:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8011a78:	eb41 0e0e 	adc.w	lr, r1, lr
 8011a7c:	eb1b 0102 	adds.w	r1, fp, r2
 8011a80:	912f      	str	r1, [sp, #188]	; 0xbc
 8011a82:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011a84:	eb41 010e 	adc.w	r1, r1, lr
 8011a88:	9131      	str	r1, [sp, #196]	; 0xc4
 8011a8a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011a8c:	078f      	lsls	r7, r1, #30
 8011a8e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011a90:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 8011a94:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 8011a98:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011a9a:	ea4c 0c91 	orr.w	ip, ip, r1, lsr #2
 8011a9e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011aa0:	0f08      	lsrs	r0, r1, #28
 8011aa2:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011aa4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8011aa8:	0f09      	lsrs	r1, r1, #28
 8011aaa:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8011aae:	404f      	eors	r7, r1
 8011ab0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011ab2:	0649      	lsls	r1, r1, #25
 8011ab4:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 8011ab8:	ea8c 0c00 	eor.w	ip, ip, r0
 8011abc:	0670      	lsls	r0, r6, #25
 8011abe:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8011ac0:	ea40 10d6 	orr.w	r0, r0, r6, lsr #7
 8011ac4:	ea8c 0c00 	eor.w	ip, ip, r0
 8011ac8:	404f      	eors	r7, r1
 8011aca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8011acc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011ace:	4308      	orrs	r0, r1
 8011ad0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011ad2:	ea41 0806 	orr.w	r8, r1, r6
 8011ad6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011ad8:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8011ada:	4008      	ands	r0, r1
 8011adc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011ade:	ea08 0801 	and.w	r8, r8, r1
 8011ae2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011ae4:	4031      	ands	r1, r6
 8011ae6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8011ae8:	4308      	orrs	r0, r1
 8011aea:	ea06 0609 	and.w	r6, r6, r9
 8011aee:	eb1c 0000 	adds.w	r0, ip, r0
 8011af2:	ea48 0606 	orr.w	r6, r8, r6
 8011af6:	eb47 0606 	adc.w	r6, r7, r6
 8011afa:	1882      	adds	r2, r0, r2
 8011afc:	9227      	str	r2, [sp, #156]	; 0x9c
 8011afe:	eb4e 0206 	adc.w	r2, lr, r6
 8011b02:	9230      	str	r2, [sp, #192]	; 0xc0
 8011b04:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011b06:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8011b08:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 8011b0c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8011b0e:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 8011b12:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8011b16:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011b18:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8011b1c:	0b91      	lsrs	r1, r2, #14
 8011b1e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8011b20:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8011b24:	0b92      	lsrs	r2, r2, #14
 8011b26:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
        R(12); R(13); R(14); R(15);
 8011b2a:	ea89 0902 	eor.w	r9, r9, r2
 8011b2e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8011b30:	05d2      	lsls	r2, r2, #23
 8011b32:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8011b36:	ea8a 0a01 	eor.w	sl, sl, r1
 8011b3a:	05c1      	lsls	r1, r0, #23
 8011b3c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8011b3e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8011b42:	ea8a 0a01 	eor.w	sl, sl, r1
 8011b46:	ea89 0902 	eor.w	r9, r9, r2
 8011b4a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011b4c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011b4e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8011b50:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8011b52:	404a      	eors	r2, r1
 8011b54:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011b56:	ea81 0800 	eor.w	r8, r1, r0
 8011b5a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8011b5c:	400a      	ands	r2, r1
 8011b5e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8011b60:	ea08 0801 	and.w	r8, r8, r1
 8011b64:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011b66:	404a      	eors	r2, r1
 8011b68:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011b6a:	ea88 0801 	eor.w	r8, r8, r1
 8011b6e:	e9d3 1018 	ldrd	r1, r0, [r3, #96]	; 0x60
 8011b72:	1871      	adds	r1, r6, r1
 8011b74:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8011b76:	eb46 0000 	adc.w	r0, r6, r0
 8011b7a:	1852      	adds	r2, r2, r1
 8011b7c:	9901      	ldr	r1, [sp, #4]
 8011b7e:	eb48 0800 	adc.w	r8, r8, r0
 8011b82:	2900      	cmp	r1, #0
 8011b84:	f000 844a 	beq.w	801241c <_Transform_Sha512+0x1f98>
 8011b88:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011b8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011b8c:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 8011b90:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8011b94:	0a0f      	lsrs	r7, r1, #8
 8011b96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b98:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 8011b9c:	0a0e      	lsrs	r6, r1, #8
 8011b9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011ba0:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8011ba4:	0849      	lsrs	r1, r1, #1
 8011ba6:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8011baa:	0840      	lsrs	r0, r0, #1
 8011bac:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 8011bb0:	4070      	eors	r0, r6
 8011bb2:	4666      	mov	r6, ip
 8011bb4:	4079      	eors	r1, r7
 8011bb6:	09f7      	lsrs	r7, r6, #7
 8011bb8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011bba:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8011bbe:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 8011bc2:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 8011bc6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011bc8:	4079      	eors	r1, r7
 8011bca:	1989      	adds	r1, r1, r6
 8011bcc:	9e03      	ldr	r6, [sp, #12]
 8011bce:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011bd0:	eb46 0000 	adc.w	r0, r6, r0
 8011bd4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011bd6:	1989      	adds	r1, r1, r6
 8011bd8:	9e04      	ldr	r6, [sp, #16]
 8011bda:	eb46 0000 	adc.w	r0, r6, r0
 8011bde:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011be0:	00f6      	lsls	r6, r6, #3
 8011be2:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 8011be6:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8011bea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011bec:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 8011bf0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011bf2:	0cff      	lsrs	r7, r7, #19
 8011bf4:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 8011bf8:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8011bfc:	ea4c 3c4b 	orr.w	ip, ip, fp, lsl #13
 8011c00:	ea86 060c 	eor.w	r6, r6, ip
 8011c04:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8011c08:	ea8e 0707 	eor.w	r7, lr, r7
 8011c0c:	ea4f 1e9b 	mov.w	lr, fp, lsr #6
 8011c10:	ea4e 6e8c 	orr.w	lr, lr, ip, lsl #26
 8011c14:	ea87 070e 	eor.w	r7, r7, lr
 8011c18:	19c9      	adds	r1, r1, r7
 8011c1a:	ea86 169c 	eor.w	r6, r6, ip, lsr #6
 8011c1e:	9113      	str	r1, [sp, #76]	; 0x4c
 8011c20:	eb40 0106 	adc.w	r1, r0, r6
 8011c24:	9103      	str	r1, [sp, #12]
 8011c26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011c28:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 8011c2c:	eb1a 0202 	adds.w	r2, sl, r2
 8011c30:	eb49 0908 	adc.w	r9, r9, r8
 8011c34:	1852      	adds	r2, r2, r1
 8011c36:	9903      	ldr	r1, [sp, #12]
 8011c38:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8011c3c:	eb41 0909 	adc.w	r9, r1, r9
 8011c40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011c42:	1889      	adds	r1, r1, r2
 8011c44:	9129      	str	r1, [sp, #164]	; 0xa4
 8011c46:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011c48:	eb41 0109 	adc.w	r1, r1, r9
 8011c4c:	912a      	str	r1, [sp, #168]	; 0xa8
 8011c4e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011c50:	078e      	lsls	r6, r1, #30
 8011c52:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011c54:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 8011c58:	078f      	lsls	r7, r1, #30
 8011c5a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011c5c:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 8011c60:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011c62:	0f08      	lsrs	r0, r1, #28
 8011c64:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011c66:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8011c6a:	0f09      	lsrs	r1, r1, #28
 8011c6c:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 8011c70:	404e      	eors	r6, r1
 8011c72:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8011c74:	ea4f 6c41 	mov.w	ip, r1, lsl #25
 8011c78:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011c7a:	4047      	eors	r7, r0
 8011c7c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8011c7e:	ea4c 1cd1 	orr.w	ip, ip, r1, lsr #7
 8011c82:	0649      	lsls	r1, r1, #25
 8011c84:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 8011c88:	404f      	eors	r7, r1
 8011c8a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011c8c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011c8e:	ea86 060c 	eor.w	r6, r6, ip
 8011c92:	4301      	orrs	r1, r0
 8011c94:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
 8011c98:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011c9a:	ea40 0e0c 	orr.w	lr, r0, ip
 8011c9e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8011ca0:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 8011ca4:	4001      	ands	r1, r0
 8011ca6:	9824      	ldr	r0, [sp, #144]	; 0x90
 8011ca8:	ea0e 0e00 	and.w	lr, lr, r0
 8011cac:	9825      	ldr	r0, [sp, #148]	; 0x94
 8011cae:	ea00 000c 	and.w	r0, r0, ip
 8011cb2:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 8011cb6:	4301      	orrs	r1, r0
 8011cb8:	ea0c 0c08 	and.w	ip, ip, r8
 8011cbc:	1879      	adds	r1, r7, r1
 8011cbe:	ea4e 0c0c 	orr.w	ip, lr, ip
 8011cc2:	eb46 0c0c 	adc.w	ip, r6, ip
 8011cc6:	188a      	adds	r2, r1, r2
 8011cc8:	9222      	str	r2, [sp, #136]	; 0x88
 8011cca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011ccc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8011cce:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 8011cd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011cd4:	eb49 0b0c 	adc.w	fp, r9, ip
 8011cd8:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 8011cdc:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8011ce0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011ce2:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8011ce6:	0b91      	lsrs	r1, r2, #14
 8011ce8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011cea:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8011cee:	0b92      	lsrs	r2, r2, #14
 8011cf0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8011cf4:	ea89 0902 	eor.w	r9, r9, r2
 8011cf8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011cfa:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8011cfc:	05d2      	lsls	r2, r2, #23
 8011cfe:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8011d02:	ea8a 0a01 	eor.w	sl, sl, r1
 8011d06:	05c1      	lsls	r1, r0, #23
 8011d08:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8011d0a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8011d0e:	ea8a 0a01 	eor.w	sl, sl, r1
 8011d12:	ea89 0902 	eor.w	r9, r9, r2
 8011d16:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8011d18:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011d1a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8011d1c:	404a      	eors	r2, r1
 8011d1e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8011d20:	ea81 0800 	eor.w	r8, r1, r0
 8011d24:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011d26:	400a      	ands	r2, r1
 8011d28:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011d2a:	ea08 0801 	and.w	r8, r8, r1
 8011d2e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011d30:	404a      	eors	r2, r1
 8011d32:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8011d34:	ea88 0801 	eor.w	r8, r8, r1
 8011d38:	e9d3 101a 	ldrd	r1, r0, [r3, #104]	; 0x68
 8011d3c:	1871      	adds	r1, r6, r1
 8011d3e:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8011d40:	eb46 0000 	adc.w	r0, r6, r0
 8011d44:	1852      	adds	r2, r2, r1
 8011d46:	9901      	ldr	r1, [sp, #4]
 8011d48:	9228      	str	r2, [sp, #160]	; 0xa0
 8011d4a:	eb48 0800 	adc.w	r8, r8, r0
 8011d4e:	2900      	cmp	r1, #0
 8011d50:	f000 836b 	beq.w	801242a <_Transform_Sha512+0x1fa6>
 8011d54:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011d56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d58:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 8011d5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011d5e:	0a0f      	lsrs	r7, r1, #8
 8011d60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011d62:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 8011d66:	0a0e      	lsrs	r6, r1, #8
 8011d68:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011d6a:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8011d6e:	0849      	lsrs	r1, r1, #1
 8011d70:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8011d74:	0840      	lsrs	r0, r0, #1
 8011d76:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 8011d7a:	4070      	eors	r0, r6
 8011d7c:	4666      	mov	r6, ip
 8011d7e:	4079      	eors	r1, r7
 8011d80:	09f7      	lsrs	r7, r6, #7
 8011d82:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011d84:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8011d88:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 8011d8c:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 8011d90:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8011d92:	4079      	eors	r1, r7
 8011d94:	1989      	adds	r1, r1, r6
 8011d96:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011d98:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8011d9a:	eb46 0000 	adc.w	r0, r6, r0
 8011d9e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011da0:	1989      	adds	r1, r1, r6
 8011da2:	9e05      	ldr	r6, [sp, #20]
 8011da4:	eb46 0000 	adc.w	r0, r6, r0
 8011da8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011daa:	00f6      	lsls	r6, r6, #3
 8011dac:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 8011db0:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8011db4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011db6:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 8011dba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8011dbc:	0cff      	lsrs	r7, r7, #19
 8011dbe:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 8011dc2:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8011dc6:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 8011dca:	ea8e 0707 	eor.w	r7, lr, r7
 8011dce:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 8011dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dd4:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 8011dd8:	ea86 060c 	eor.w	r6, r6, ip
 8011ddc:	ea87 070e 	eor.w	r7, r7, lr
 8011de0:	19c9      	adds	r1, r1, r7
 8011de2:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 8011de6:	911f      	str	r1, [sp, #124]	; 0x7c
 8011de8:	eb40 0106 	adc.w	r1, r0, r6
 8011dec:	910f      	str	r1, [sp, #60]	; 0x3c
 8011dee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011df0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011df2:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8011df6:	eb1a 0202 	adds.w	r2, sl, r2
 8011dfa:	eb49 0908 	adc.w	r9, r9, r8
 8011dfe:	1852      	adds	r2, r2, r1
 8011e00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e02:	eb41 0909 	adc.w	r9, r1, r9
 8011e06:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011e08:	1889      	adds	r1, r1, r2
 8011e0a:	912b      	str	r1, [sp, #172]	; 0xac
 8011e0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011e0e:	eb41 0109 	adc.w	r1, r1, r9
 8011e12:	912c      	str	r1, [sp, #176]	; 0xb0
 8011e14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011e16:	ea4f 768b 	mov.w	r6, fp, lsl #30
 8011e1a:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 8011e1e:	078f      	lsls	r7, r1, #30
 8011e20:	0f08      	lsrs	r0, r1, #28
 8011e22:	ea4f 711b 	mov.w	r1, fp, lsr #28
 8011e26:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 8011e2a:	404e      	eors	r6, r1
 8011e2c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011e2e:	ea4f 6c4b 	mov.w	ip, fp, lsl #25
 8011e32:	ea4c 1cd1 	orr.w	ip, ip, r1, lsr #7
 8011e36:	ea40 100b 	orr.w	r0, r0, fp, lsl #4
 8011e3a:	ea47 079b 	orr.w	r7, r7, fp, lsr #2
 8011e3e:	0649      	lsls	r1, r1, #25
 8011e40:	4047      	eors	r7, r0
 8011e42:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 8011e46:	9822      	ldr	r0, [sp, #136]	; 0x88
 8011e48:	404f      	eors	r7, r1
 8011e4a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011e4c:	4301      	orrs	r1, r0
 8011e4e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8011e50:	ea40 0e0b 	orr.w	lr, r0, fp
 8011e54:	9825      	ldr	r0, [sp, #148]	; 0x94
 8011e56:	4001      	ands	r1, r0
 8011e58:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011e5a:	ea86 060c 	eor.w	r6, r6, ip
 8011e5e:	ea0e 0e00 	and.w	lr, lr, r0
 8011e62:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8011e66:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8011e68:	ea00 000c 	and.w	r0, r0, ip
 8011e6c:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
 8011e70:	4301      	orrs	r1, r0
 8011e72:	ea0c 0c0b 	and.w	ip, ip, fp
 8011e76:	1879      	adds	r1, r7, r1
 8011e78:	ea4e 0c0c 	orr.w	ip, lr, ip
 8011e7c:	eb46 0c0c 	adc.w	ip, r6, ip
 8011e80:	188a      	adds	r2, r1, r2
 8011e82:	9223      	str	r2, [sp, #140]	; 0x8c
 8011e84:	eb49 020c 	adc.w	r2, r9, ip
 8011e88:	9224      	str	r2, [sp, #144]	; 0x90
 8011e8a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011e8c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8011e8e:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 8011e92:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011e94:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 8011e98:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8011e9c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011e9e:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8011ea2:	0b91      	lsrs	r1, r2, #14
 8011ea4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011ea6:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 8011eaa:	0b92      	lsrs	r2, r2, #14
 8011eac:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8011eb0:	ea89 0902 	eor.w	r9, r9, r2
 8011eb4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8011eb6:	05d2      	lsls	r2, r2, #23
 8011eb8:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 8011ebc:	ea8a 0a01 	eor.w	sl, sl, r1
 8011ec0:	05c1      	lsls	r1, r0, #23
 8011ec2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011ec4:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8011ec8:	ea8a 0a01 	eor.w	sl, sl, r1
 8011ecc:	ea89 0902 	eor.w	r9, r9, r2
 8011ed0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011ed2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011ed4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8011ed6:	404a      	eors	r2, r1
 8011ed8:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8011eda:	ea81 0800 	eor.w	r8, r1, r0
 8011ede:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011ee0:	400a      	ands	r2, r1
 8011ee2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011ee4:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8011ee6:	ea08 0801 	and.w	r8, r8, r1
 8011eea:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8011eec:	404a      	eors	r2, r1
 8011eee:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8011ef0:	ea88 0801 	eor.w	r8, r8, r1
 8011ef4:	e9d3 101c 	ldrd	r1, r0, [r3, #112]	; 0x70
 8011ef8:	1871      	adds	r1, r6, r1
 8011efa:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 8011efc:	eb46 0000 	adc.w	r0, r6, r0
 8011f00:	1852      	adds	r2, r2, r1
 8011f02:	9901      	ldr	r1, [sp, #4]
 8011f04:	9228      	str	r2, [sp, #160]	; 0xa0
 8011f06:	eb48 0800 	adc.w	r8, r8, r0
 8011f0a:	2900      	cmp	r1, #0
 8011f0c:	f000 8294 	beq.w	8012438 <_Transform_Sha512+0x1fb4>
 8011f10:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011f12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011f14:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8011f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011f1a:	0a0f      	lsrs	r7, r1, #8
 8011f1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011f1e:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 8011f22:	0a0e      	lsrs	r6, r1, #8
 8011f24:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011f26:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8011f2a:	0849      	lsrs	r1, r1, #1
 8011f2c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8011f30:	0840      	lsrs	r0, r0, #1
 8011f32:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 8011f36:	4070      	eors	r0, r6
 8011f38:	4666      	mov	r6, ip
 8011f3a:	4079      	eors	r1, r7
 8011f3c:	09f7      	lsrs	r7, r6, #7
 8011f3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011f40:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011f44:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 8011f48:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 8011f4c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8011f4e:	4079      	eors	r1, r7
 8011f50:	1989      	adds	r1, r1, r6
 8011f52:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011f54:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011f56:	eb46 0000 	adc.w	r0, r6, r0
 8011f5a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8011f5c:	1989      	adds	r1, r1, r6
 8011f5e:	9e06      	ldr	r6, [sp, #24]
 8011f60:	eb46 0000 	adc.w	r0, r6, r0
 8011f64:	9e03      	ldr	r6, [sp, #12]
 8011f66:	00f6      	lsls	r6, r6, #3
 8011f68:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 8011f6c:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8011f70:	9f03      	ldr	r7, [sp, #12]
 8011f72:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 8011f76:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011f78:	0cff      	lsrs	r7, r7, #19
 8011f7a:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 8011f7e:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8011f82:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 8011f86:	ea8e 0707 	eor.w	r7, lr, r7
 8011f8a:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 8011f8e:	9a03      	ldr	r2, [sp, #12]
 8011f90:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 8011f94:	ea86 060c 	eor.w	r6, r6, ip
 8011f98:	ea87 070e 	eor.w	r7, r7, lr
 8011f9c:	19c9      	adds	r1, r1, r7
 8011f9e:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 8011fa2:	9120      	str	r1, [sp, #128]	; 0x80
 8011fa4:	eb40 0106 	adc.w	r1, r0, r6
 8011fa8:	9110      	str	r1, [sp, #64]	; 0x40
 8011faa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011fac:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011fae:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8011fb0:	eb1a 0202 	adds.w	r2, sl, r2
 8011fb4:	eb49 0908 	adc.w	r9, r9, r8
 8011fb8:	1852      	adds	r2, r2, r1
 8011fba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011fbc:	eb41 0909 	adc.w	r9, r1, r9
 8011fc0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011fc2:	1889      	adds	r1, r1, r2
 8011fc4:	912d      	str	r1, [sp, #180]	; 0xb4
 8011fc6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011fc8:	eb41 0109 	adc.w	r1, r1, r9
 8011fcc:	912e      	str	r1, [sp, #184]	; 0xb8
 8011fce:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011fd0:	078f      	lsls	r7, r1, #30
 8011fd2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011fd4:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 8011fd8:	ea4f 7e81 	mov.w	lr, r1, lsl #30
 8011fdc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011fde:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 8011fe2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8011fe4:	0f08      	lsrs	r0, r1, #28
 8011fe6:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011fe8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8011fec:	0f09      	lsrs	r1, r1, #28
 8011fee:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8011ff2:	404f      	eors	r7, r1
 8011ff4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011ff6:	ea8e 0e00 	eor.w	lr, lr, r0
 8011ffa:	9824      	ldr	r0, [sp, #144]	; 0x90
 8011ffc:	ea4f 6c41 	mov.w	ip, r1, lsl #25
 8012000:	0671      	lsls	r1, r6, #25
 8012002:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 8012006:	ea8e 0e01 	eor.w	lr, lr, r1
 801200a:	9824      	ldr	r0, [sp, #144]	; 0x90
 801200c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801200e:	ea4c 1cd6 	orr.w	ip, ip, r6, lsr #7
 8012012:	4331      	orrs	r1, r6
 8012014:	ea4b 0600 	orr.w	r6, fp, r0
 8012018:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801201a:	4001      	ands	r1, r0
 801201c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801201e:	ea87 070c 	eor.w	r7, r7, ip
 8012022:	4006      	ands	r6, r0
 8012024:	e9dd 0c22 	ldrd	r0, ip, [sp, #136]	; 0x88
 8012028:	ea00 000c 	and.w	r0, r0, ip
 801202c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 8012030:	4301      	orrs	r1, r0
 8012032:	ea0b 0c0c 	and.w	ip, fp, ip
 8012036:	eb1e 0101 	adds.w	r1, lr, r1
 801203a:	ea46 0c0c 	orr.w	ip, r6, ip
 801203e:	eb47 0c0c 	adc.w	ip, r7, ip
 8012042:	188a      	adds	r2, r1, r2
 8012044:	9225      	str	r2, [sp, #148]	; 0x94
 8012046:	eb49 020c 	adc.w	r2, r9, ip
 801204a:	9226      	str	r2, [sp, #152]	; 0x98
 801204c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801204e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8012050:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8012052:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 8012056:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8012058:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 801205c:	ea4f 4992 	mov.w	r9, r2, lsr #18
 8012060:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8012062:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 8012066:	0b92      	lsrs	r2, r2, #14
 8012068:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801206c:	ea8a 0a02 	eor.w	sl, sl, r2
 8012070:	0b89      	lsrs	r1, r1, #14
 8012072:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8012074:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 8012078:	ea89 0901 	eor.w	r9, r9, r1
 801207c:	05d1      	lsls	r1, r2, #23
 801207e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 8012082:	05c2      	lsls	r2, r0, #23
 8012084:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8012086:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 801208a:	ea8a 0a02 	eor.w	sl, sl, r2
 801208e:	ea89 0901 	eor.w	r9, r9, r1
 8012092:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012094:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012096:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012098:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 801209a:	404a      	eors	r2, r1
 801209c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801209e:	ea81 0800 	eor.w	r8, r1, r0
 80120a2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80120a4:	400a      	ands	r2, r1
 80120a6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80120a8:	ea08 0801 	and.w	r8, r8, r1
 80120ac:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80120ae:	404a      	eors	r2, r1
 80120b0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80120b2:	ea88 0801 	eor.w	r8, r8, r1
 80120b6:	e9d3 101e 	ldrd	r1, r0, [r3, #120]	; 0x78
 80120ba:	1871      	adds	r1, r6, r1
 80120bc:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80120be:	eb46 0000 	adc.w	r0, r6, r0
 80120c2:	1852      	adds	r2, r2, r1
 80120c4:	9901      	ldr	r1, [sp, #4]
 80120c6:	9228      	str	r2, [sp, #160]	; 0xa0
 80120c8:	eb48 0800 	adc.w	r8, r8, r0
 80120cc:	2900      	cmp	r1, #0
 80120ce:	f000 81ba 	beq.w	8012446 <_Transform_Sha512+0x1fc2>
 80120d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120d4:	9808      	ldr	r0, [sp, #32]
 80120d6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80120da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120dc:	0a0f      	lsrs	r7, r1, #8
 80120de:	9908      	ldr	r1, [sp, #32]
 80120e0:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 80120e4:	0a0e      	lsrs	r6, r1, #8
 80120e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120e8:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80120ec:	0849      	lsrs	r1, r1, #1
 80120ee:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 80120f2:	0840      	lsrs	r0, r0, #1
 80120f4:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 80120f8:	4070      	eors	r0, r6
 80120fa:	4666      	mov	r6, ip
 80120fc:	4079      	eors	r1, r7
 80120fe:	09f7      	lsrs	r7, r6, #7
 8012100:	9e08      	ldr	r6, [sp, #32]
 8012102:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8012106:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 801210a:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 801210e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8012110:	4079      	eors	r1, r7
 8012112:	1989      	adds	r1, r1, r6
 8012114:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012116:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8012118:	eb46 0000 	adc.w	r0, r6, r0
 801211c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801211e:	1989      	adds	r1, r1, r6
 8012120:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012122:	eb46 0000 	adc.w	r0, r6, r0
 8012126:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012128:	00f6      	lsls	r6, r6, #3
 801212a:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 801212e:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8012132:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012134:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 8012138:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801213a:	0cff      	lsrs	r7, r7, #19
 801213c:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 8012140:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8012144:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 8012148:	ea8e 0707 	eor.w	r7, lr, r7
 801214c:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 8012150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012152:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 8012156:	ea86 060c 	eor.w	r6, r6, ip
 801215a:	ea87 070e 	eor.w	r7, r7, lr
 801215e:	19c9      	adds	r1, r1, r7
 8012160:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 8012164:	9121      	str	r1, [sp, #132]	; 0x84
 8012166:	eb40 0106 	adc.w	r1, r0, r6
 801216a:	9111      	str	r1, [sp, #68]	; 0x44
 801216c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801216e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8012170:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012172:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8012176:	eb1a 0202 	adds.w	r2, sl, r2
 801217a:	eb49 0908 	adc.w	r9, r9, r8
 801217e:	eb12 0801 	adds.w	r8, r2, r1
 8012182:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012184:	9926      	ldr	r1, [sp, #152]	; 0x98
 8012186:	eb42 0909 	adc.w	r9, r2, r9
 801218a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801218c:	eb12 0208 	adds.w	r2, r2, r8
 8012190:	922f      	str	r2, [sp, #188]	; 0xbc
 8012192:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8012194:	eb42 0a09 	adc.w	sl, r2, r9
 8012198:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801219a:	0790      	lsls	r0, r2, #30
 801219c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801219e:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 80121a2:	0796      	lsls	r6, r2, #30
 80121a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80121a6:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 80121aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80121ac:	0f12      	lsrs	r2, r2, #28
 80121ae:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80121b2:	4056      	eors	r6, r2
 80121b4:	0f09      	lsrs	r1, r1, #28
 80121b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80121b8:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 80121bc:	4048      	eors	r0, r1
 80121be:	0651      	lsls	r1, r2, #25
 80121c0:	ea41 11d7 	orr.w	r1, r1, r7, lsr #7
 80121c4:	067a      	lsls	r2, r7, #25
 80121c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
 80121c8:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 80121cc:	4056      	eors	r6, r2
 80121ce:	4048      	eors	r0, r1
 80121d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80121d2:	9925      	ldr	r1, [sp, #148]	; 0x94
 80121d4:	ea42 0c01 	orr.w	ip, r2, r1
 80121d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80121da:	9925      	ldr	r1, [sp, #148]	; 0x94
 80121dc:	4317      	orrs	r7, r2
 80121de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80121e0:	ea0c 0c02 	and.w	ip, ip, r2
 80121e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80121e6:	4011      	ands	r1, r2
 80121e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80121ea:	ea07 070b 	and.w	r7, r7, fp
 80121ee:	ea02 0e0e 	and.w	lr, r2, lr
 80121f2:	ea4c 0101 	orr.w	r1, ip, r1
 80121f6:	1871      	adds	r1, r6, r1
 80121f8:	ea47 0e0e 	orr.w	lr, r7, lr
 80121fc:	eb40 0e0e 	adc.w	lr, r0, lr
 8012200:	eb11 0208 	adds.w	r2, r1, r8
    for (j = 0; j < 80; j += 16) {
 8012204:	9901      	ldr	r1, [sp, #4]
        R(12); R(13); R(14); R(15);
 8012206:	9227      	str	r2, [sp, #156]	; 0x9c
    for (j = 0; j < 80; j += 16) {
 8012208:	f101 0110 	add.w	r1, r1, #16
        R(12); R(13); R(14); R(15);
 801220c:	eb49 020e 	adc.w	r2, r9, lr
    for (j = 0; j < 80; j += 16) {
 8012210:	2950      	cmp	r1, #80	; 0x50
        R(12); R(13); R(14); R(15);
 8012212:	9228      	str	r2, [sp, #160]	; 0xa0
    for (j = 0; j < 80; j += 16) {
 8012214:	9101      	str	r1, [sp, #4]
 8012216:	f103 0380 	add.w	r3, r3, #128	; 0x80
 801221a:	f47e a9a6 	bne.w	801056a <_Transform_Sha512+0xe6>
 801221e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012220:	e9cd 3a3a 	strd	r3, sl, [sp, #232]	; 0xe8
 8012224:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8012226:	933e      	str	r3, [sp, #248]	; 0xf8
 8012228:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801222a:	933f      	str	r3, [sp, #252]	; 0xfc
 801222c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801222e:	933c      	str	r3, [sp, #240]	; 0xf0
 8012230:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012232:	933d      	str	r3, [sp, #244]	; 0xf4
 8012234:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012236:	6723      	str	r3, [r4, #112]	; 0x70
 8012238:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801223a:	6763      	str	r3, [r4, #116]	; 0x74
 801223c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801223e:	64a3      	str	r3, [r4, #72]	; 0x48
 8012240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012242:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012244:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012246:	60a3      	str	r3, [r4, #8]
 8012248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801224a:	60e3      	str	r3, [r4, #12]
 801224c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801224e:	6023      	str	r3, [r4, #0]
 8012250:	9b08      	ldr	r3, [sp, #32]
 8012252:	6063      	str	r3, [r4, #4]
 8012254:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012256:	9340      	str	r3, [sp, #256]	; 0x100
 8012258:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801225a:	9341      	str	r3, [sp, #260]	; 0x104
 801225c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801225e:	e9cd 3b38 	strd	r3, fp, [sp, #224]	; 0xe0
 8012262:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012264:	9332      	str	r3, [sp, #200]	; 0xc8
 8012266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012268:	9333      	str	r3, [sp, #204]	; 0xcc
 801226a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801226c:	9334      	str	r3, [sp, #208]	; 0xd0
 801226e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012270:	9335      	str	r3, [sp, #212]	; 0xd4
 8012272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012274:	9336      	str	r3, [sp, #216]	; 0xd8
 8012276:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012278:	9337      	str	r3, [sp, #220]	; 0xdc
 801227a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801227c:	67a3      	str	r3, [r4, #120]	; 0x78
 801227e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012280:	67e3      	str	r3, [r4, #124]	; 0x7c
 8012282:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012284:	6523      	str	r3, [r4, #80]	; 0x50
 8012286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012288:	6563      	str	r3, [r4, #84]	; 0x54
 801228a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801228c:	6123      	str	r3, [r4, #16]
 801228e:	9b07      	ldr	r3, [sp, #28]
 8012290:	6163      	str	r3, [r4, #20]
 8012292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012294:	65a3      	str	r3, [r4, #88]	; 0x58
 8012296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012298:	65e3      	str	r3, [r4, #92]	; 0x5c
 801229a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801229c:	61a3      	str	r3, [r4, #24]
 801229e:	9b02      	ldr	r3, [sp, #8]
 80122a0:	61e3      	str	r3, [r4, #28]
 80122a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80122a4:	6623      	str	r3, [r4, #96]	; 0x60
 80122a6:	9b03      	ldr	r3, [sp, #12]
 80122a8:	6663      	str	r3, [r4, #100]	; 0x64
 80122aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80122ac:	6223      	str	r3, [r4, #32]
 80122ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122b0:	6263      	str	r3, [r4, #36]	; 0x24
 80122b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122b4:	66a3      	str	r3, [r4, #104]	; 0x68
 80122b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122b8:	66e3      	str	r3, [r4, #108]	; 0x6c
 80122ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80122be:	9b04      	ldr	r3, [sp, #16]
 80122c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122c4:	6323      	str	r3, [r4, #48]	; 0x30
 80122c6:	9b05      	ldr	r3, [sp, #20]
 80122c8:	6363      	str	r3, [r4, #52]	; 0x34
 80122ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80122cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80122ce:	9b06      	ldr	r3, [sp, #24]
 80122d0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80122d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122d4:	6423      	str	r3, [r4, #64]	; 0x40
 80122d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122d8:	6463      	str	r3, [r4, #68]	; 0x44
    sha512->digest[0] += a(0);
 80122da:	e9d5 3100 	ldrd	r3, r1, [r5]
 80122de:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80122e0:	189b      	adds	r3, r3, r2
 80122e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80122e4:	eb42 0101 	adc.w	r1, r2, r1
 80122e8:	e9c5 3100 	strd	r3, r1, [r5]
    sha512->digest[1] += b(0);
 80122ec:	e9d5 1602 	ldrd	r1, r6, [r5, #8]
 80122f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80122f2:	18c9      	adds	r1, r1, r3
 80122f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80122f6:	eb43 0606 	adc.w	r6, r3, r6
 80122fa:	e9c5 1602 	strd	r1, r6, [r5, #8]
    sha512->digest[2] += c(0);
 80122fe:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
 8012302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012304:	18d2      	adds	r2, r2, r3
 8012306:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012308:	eb43 0606 	adc.w	r6, r3, r6
 801230c:	e9c5 2604 	strd	r2, r6, [r5, #16]
    sha512->digest[3] += d(0);
 8012310:	e9d5 2606 	ldrd	r2, r6, [r5, #24]
 8012314:	9b22      	ldr	r3, [sp, #136]	; 0x88
    sha512->digest[4] += e(0);
 8012316:	e9d5 0708 	ldrd	r0, r7, [r5, #32]
    sha512->digest[3] += d(0);
 801231a:	18d2      	adds	r2, r2, r3
    sha512->digest[4] += e(0);
 801231c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    sha512->digest[3] += d(0);
 801231e:	eb4b 0606 	adc.w	r6, fp, r6
    sha512->digest[4] += e(0);
 8012322:	18c0      	adds	r0, r0, r3
 8012324:	eb4a 0707 	adc.w	r7, sl, r7
 8012328:	e9c5 0708 	strd	r0, r7, [r5, #32]
    sha512->digest[5] += f(0);
 801232c:	e9d5 070a 	ldrd	r0, r7, [r5, #40]	; 0x28
 8012330:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012332:	18c0      	adds	r0, r0, r3
 8012334:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012336:	eb43 0707 	adc.w	r7, r3, r7
    sha512->digest[3] += d(0);
 801233a:	e9c5 2606 	strd	r2, r6, [r5, #24]
    sha512->digest[5] += f(0);
 801233e:	e9c5 070a 	strd	r0, r7, [r5, #40]	; 0x28
    sha512->digest[6] += g(0);
 8012342:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8012346:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8012348:	18c0      	adds	r0, r0, r3
 801234a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801234c:	eb43 0606 	adc.w	r6, r3, r6
 8012350:	e9c5 060c 	strd	r0, r6, [r5, #48]	; 0x30
    sha512->digest[7] += h(0);
 8012354:	e9d5 160e 	ldrd	r1, r6, [r5, #56]	; 0x38
 8012358:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801235a:	18c9      	adds	r1, r1, r3
 801235c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801235e:	eb43 0606 	adc.w	r6, r3, r6
 8012362:	e9c5 160e 	strd	r1, r6, [r5, #56]	; 0x38
    while (len--) *z++ = 0;
 8012366:	f104 0280 	add.w	r2, r4, #128	; 0x80
 801236a:	4623      	mov	r3, r4
 801236c:	2100      	movs	r1, #0
 801236e:	4293      	cmp	r3, r2
 8012370:	d170      	bne.n	8012454 <_Transform_Sha512+0x1fd0>
 8012372:	2300      	movs	r3, #0
 8012374:	4619      	mov	r1, r3
 8012376:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 801237a:	3301      	adds	r3, #1
 801237c:	2b41      	cmp	r3, #65	; 0x41
 801237e:	446a      	add	r2, sp
 8012380:	d16b      	bne.n	801245a <_Transform_Sha512+0x1fd6>
    XFREE(W, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8012382:	4620      	mov	r0, r4
 8012384:	f00b faf6 	bl	801d974 <free>
    return 0;
 8012388:	2000      	movs	r0, #0
}
 801238a:	b043      	add	sp, #268	; 0x10c
 801238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R( 0); R( 1); R( 2); R( 3);
 8012390:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8012392:	9218      	str	r2, [sp, #96]	; 0x60
 8012394:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8012396:	9208      	str	r2, [sp, #32]
 8012398:	f7fe b975 	b.w	8010686 <_Transform_Sha512+0x202>
 801239c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 801239e:	9219      	str	r2, [sp, #100]	; 0x64
 80123a0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80123a2:	f7fe ba61 	b.w	8010868 <_Transform_Sha512+0x3e4>
 80123a6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80123a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80123aa:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80123ac:	f7fe bb4b 	b.w	8010a46 <_Transform_Sha512+0x5c2>
 80123b0:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80123b2:	9212      	str	r2, [sp, #72]	; 0x48
 80123b4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80123b6:	f7fe bc2f 	b.w	8010c18 <_Transform_Sha512+0x794>
        R( 4); R( 5); R( 6); R( 7);
 80123ba:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80123bc:	911a      	str	r1, [sp, #104]	; 0x68
 80123be:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80123c0:	f7fe bd13 	b.w	8010dea <_Transform_Sha512+0x966>
 80123c4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80123c6:	9114      	str	r1, [sp, #80]	; 0x50
 80123c8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80123ca:	f7fe bdef 	b.w	8010fac <_Transform_Sha512+0xb28>
 80123ce:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80123d0:	9115      	str	r1, [sp, #84]	; 0x54
 80123d2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80123d4:	f7fe bece 	b.w	8011174 <_Transform_Sha512+0xcf0>
 80123d8:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80123da:	9116      	str	r1, [sp, #88]	; 0x58
 80123dc:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80123de:	f7fe bfac 	b.w	801133a <_Transform_Sha512+0xeb6>
        R( 8); R( 9); R(10); R(11);
 80123e2:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80123e6:	911b      	str	r1, [sp, #108]	; 0x6c
 80123e8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80123ec:	f7ff b88c 	b.w	8011508 <_Transform_Sha512+0x1084>
 80123f0:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80123f4:	921c      	str	r2, [sp, #112]	; 0x70
 80123f6:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 80123fa:	f7ff b964 	b.w	80116c6 <_Transform_Sha512+0x1242>
 80123fe:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8012402:	921d      	str	r2, [sp, #116]	; 0x74
 8012404:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8012408:	f7ff ba41 	b.w	801188e <_Transform_Sha512+0x140a>
 801240c:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8012410:	921e      	str	r2, [sp, #120]	; 0x78
 8012412:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 8012416:	920e      	str	r2, [sp, #56]	; 0x38
 8012418:	f7ff bb23 	b.w	8011a62 <_Transform_Sha512+0x15de>
        R(12); R(13); R(14); R(15);
 801241c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8012420:	9113      	str	r1, [sp, #76]	; 0x4c
 8012422:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8012426:	f7ff bbfd 	b.w	8011c24 <_Transform_Sha512+0x17a0>
 801242a:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 801242e:	921f      	str	r2, [sp, #124]	; 0x7c
 8012430:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8012434:	920f      	str	r2, [sp, #60]	; 0x3c
 8012436:	e4da      	b.n	8011dee <_Transform_Sha512+0x196a>
 8012438:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 801243c:	9220      	str	r2, [sp, #128]	; 0x80
 801243e:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 8012442:	9210      	str	r2, [sp, #64]	; 0x40
 8012444:	e5b1      	b.n	8011faa <_Transform_Sha512+0x1b26>
 8012446:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 801244a:	9221      	str	r2, [sp, #132]	; 0x84
 801244c:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 8012450:	9211      	str	r2, [sp, #68]	; 0x44
 8012452:	e68b      	b.n	801216c <_Transform_Sha512+0x1ce8>
 8012454:	f803 1b01 	strb.w	r1, [r3], #1
 8012458:	e789      	b.n	801236e <_Transform_Sha512+0x1eea>
 801245a:	7011      	strb	r1, [r2, #0]
 801245c:	e78b      	b.n	8012376 <_Transform_Sha512+0x1ef2>
        return MEMORY_E;
 801245e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8012462:	e792      	b.n	801238a <_Transform_Sha512+0x1f06>

08012464 <Sha512_Family_Final>:
    return Sha512FinalRaw(sha512, hash, WC_SHA512_DIGEST_SIZE);
}

static int Sha512_Family_Final(wc_Sha512* sha512, byte* hash, size_t digestSz,
                               int (*initfp)(wc_Sha512*))
{
 8012464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012468:	460e      	mov	r6, r1
 801246a:	4690      	mov	r8, r2
 801246c:	461f      	mov	r7, r3
    int ret;

    if (sha512 == NULL || hash == NULL) {
 801246e:	4604      	mov	r4, r0
 8012470:	2800      	cmp	r0, #0
 8012472:	d061      	beq.n	8012538 <Sha512_Family_Final+0xd4>
 8012474:	2900      	cmp	r1, #0
 8012476:	d05f      	beq.n	8012538 <Sha512_Family_Final+0xd4>
    if (sha512->buffLen > WC_SHA512_BLOCK_SIZE - 1) {
 8012478:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 801247c:	2b7f      	cmp	r3, #127	; 0x7f
    local = (byte*)sha512->buffer;
 801247e:	f100 0940 	add.w	r9, r0, #64	; 0x40
    if (sha512->buffLen > WC_SHA512_BLOCK_SIZE - 1) {
 8012482:	d85d      	bhi.n	8012540 <Sha512_Family_Final+0xdc>
    local[sha512->buffLen++] = 0x80;  /* add 1 */
 8012484:	1c5a      	adds	r2, r3, #1
 8012486:	2580      	movs	r5, #128	; 0x80
 8012488:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 801248c:	f809 5003 	strb.w	r5, [r9, r3]
    if (sha512->buffLen > WC_SHA512_PAD_SIZE) {
 8012490:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8012494:	2870      	cmp	r0, #112	; 0x70
 8012496:	d912      	bls.n	80124be <Sha512_Family_Final+0x5a>
        XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 8012498:	1a2a      	subs	r2, r5, r0
 801249a:	2100      	movs	r1, #0
 801249c:	4448      	add	r0, r9
 801249e:	f00b faa9 	bl	801d9f4 <memset>
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 80124a2:	4648      	mov	r0, r9
        sha512->buffLen += WC_SHA512_BLOCK_SIZE - sha512->buffLen;
 80124a4:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 80124a8:	462a      	mov	r2, r5
 80124aa:	4649      	mov	r1, r9
 80124ac:	f7fd ffc4 	bl	8010438 <ByteReverseWords64>
        ret = Transform_Sha512(sha512);
 80124b0:	4620      	mov	r0, r4
 80124b2:	f7fd ffe7 	bl	8010484 <_Transform_Sha512>
        if (ret != 0)
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d140      	bne.n	801253c <Sha512_Family_Final+0xd8>
        sha512->buffLen = 0;
 80124ba:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_PAD_SIZE - sha512->buffLen);
 80124be:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 80124c2:	2100      	movs	r1, #0
 80124c4:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 80124c8:	4448      	add	r0, r9
 80124ca:	f00b fa93 	bl	801d9f4 <memset>
                                                         (sha512->hiLen << 3);
 80124ce:	e9d4 5334 	ldrd	r5, r3, [r4, #208]	; 0xd0
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 80124d2:	e9d4 1232 	ldrd	r1, r2, [r4, #200]	; 0xc8
                                                         (sha512->hiLen << 3);
 80124d6:	00db      	lsls	r3, r3, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 80124d8:	0f50      	lsrs	r0, r2, #29
                                                         (sha512->hiLen << 3);
 80124da:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80124de:	00ed      	lsls	r5, r5, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 80124e0:	182d      	adds	r5, r5, r0
    sha512->loLen = sha512->loLen << 3;
 80124e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 80124e6:	f143 0300 	adc.w	r3, r3, #0
    sha512->loLen = sha512->loLen << 3;
 80124ea:	ea42 7251 	orr.w	r2, r2, r1, lsr #29
 80124ee:	00c9      	lsls	r1, r1, #3
 80124f0:	e9c4 1232 	strd	r1, r2, [r4, #200]	; 0xc8
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 80124f4:	e9c4 5334 	strd	r5, r3, [r4, #208]	; 0xd0
            ByteReverseWords64(sha512->buffer, sha512->buffer, WC_SHA512_PAD_SIZE);
 80124f8:	2270      	movs	r2, #112	; 0x70
 80124fa:	4648      	mov	r0, r9
 80124fc:	4649      	mov	r1, r9
 80124fe:	f7fd ff9b 	bl	8010438 <ByteReverseWords64>
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
 8012502:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	; 0xd0
 8012506:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 801250a:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
    ret = Transform_Sha512(sha512);
 801250e:	4620      	mov	r0, r4
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 8012510:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
    ret = Transform_Sha512(sha512);
 8012514:	f7fd ffb6 	bl	8010484 <_Transform_Sha512>
    if (ret != 0)
 8012518:	b980      	cbnz	r0, 801253c <Sha512_Family_Final+0xd8>
        ByteReverseWords64(sha512->digest, sha512->digest, WC_SHA512_DIGEST_SIZE);
 801251a:	4621      	mov	r1, r4
 801251c:	4620      	mov	r0, r4
 801251e:	2240      	movs	r2, #64	; 0x40
 8012520:	f7fd ff8a 	bl	8010438 <ByteReverseWords64>

    ret = Sha512Final(sha512);
    if (ret != 0)
        return ret;

    XMEMCPY(hash, sha512->digest, digestSz);
 8012524:	4642      	mov	r2, r8
 8012526:	4621      	mov	r1, r4
 8012528:	4630      	mov	r0, r6
 801252a:	f00b fa3b 	bl	801d9a4 <memcpy>

    /* initialize Sha512 structure for the next use */
    return initfp(sha512);
 801252e:	4620      	mov	r0, r4
 8012530:	463b      	mov	r3, r7
}
 8012532:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return initfp(sha512);
 8012536:	4718      	bx	r3
        return BAD_FUNC_ARG;
 8012538:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 801253c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_STATE_E;
 8012540:	f06f 00bf 	mvn.w	r0, #191	; 0xbf
 8012544:	e7fa      	b.n	801253c <Sha512_Family_Final+0xd8>
	...

08012548 <wc_Sha512Final>:

int wc_Sha512Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_DIGEST_SIZE, InitSha512);
 8012548:	4b01      	ldr	r3, [pc, #4]	; (8012550 <wc_Sha512Final+0x8>)
 801254a:	2240      	movs	r2, #64	; 0x40
 801254c:	f7ff bf8a 	b.w	8012464 <Sha512_Family_Final>
 8012550:	08010211 	.word	0x08010211

08012554 <wc_Sha512_224Final>:
    return Sha512FinalRaw(sha, hash, WC_SHA512_224_DIGEST_SIZE);
}

int wc_Sha512_224Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_224_DIGEST_SIZE,
 8012554:	4b01      	ldr	r3, [pc, #4]	; (801255c <wc_Sha512_224Final+0x8>)
 8012556:	221c      	movs	r2, #28
 8012558:	f7ff bf84 	b.w	8012464 <Sha512_Family_Final>
 801255c:	080102c9 	.word	0x080102c9

08012560 <wc_Sha512_256Final>:
    return Sha512FinalRaw(sha, hash, WC_SHA512_256_DIGEST_SIZE);
}

int wc_Sha512_256Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_256_DIGEST_SIZE,
 8012560:	4b01      	ldr	r3, [pc, #4]	; (8012568 <wc_Sha512_256Final+0x8>)
 8012562:	2220      	movs	r2, #32
 8012564:	f7ff bf7e 	b.w	8012464 <Sha512_Family_Final>
 8012568:	08010381 	.word	0x08010381

0801256c <wc_InitSha512_ex>:
    if (sha512 == NULL) {
 801256c:	b118      	cbz	r0, 8012576 <wc_InitSha512_ex+0xa>
    sha512->heap = heap;
 801256e:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 8012572:	f7fd be4d 	b.w	8010210 <InitSha512>
}
 8012576:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801257a:	4770      	bx	lr

0801257c <wc_InitSha512_224_ex>:
    if (sha512 == NULL) {
 801257c:	b118      	cbz	r0, 8012586 <wc_InitSha512_224_ex+0xa>
    sha512->heap = heap;
 801257e:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 8012582:	f7fd bea1 	b.w	80102c8 <InitSha512_224>
}
 8012586:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801258a:	4770      	bx	lr

0801258c <wc_InitSha512_256_ex>:
    if (sha512 == NULL) {
 801258c:	b118      	cbz	r0, 8012596 <wc_InitSha512_256_ex+0xa>
    sha512->heap = heap;
 801258e:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 8012592:	f7fd bef5 	b.w	8010380 <InitSha512_256>
}
 8012596:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801259a:	4770      	bx	lr

0801259c <wc_Sha512Update>:
{
 801259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a0:	460e      	mov	r6, r1
 80125a2:	4614      	mov	r4, r2
    if (sha512 == NULL || (data == NULL && len > 0)) {
 80125a4:	4605      	mov	r5, r0
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d05c      	beq.n	8012664 <wc_Sha512Update+0xc8>
 80125aa:	b909      	cbnz	r1, 80125b0 <wc_Sha512Update+0x14>
 80125ac:	2a00      	cmp	r2, #0
 80125ae:	d159      	bne.n	8012664 <wc_Sha512Update+0xc8>
    if (sha512->buffLen >= WC_SHA512_BLOCK_SIZE)
 80125b0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 80125b4:	287f      	cmp	r0, #127	; 0x7f
 80125b6:	d858      	bhi.n	801266a <wc_Sha512Update+0xce>
    if (len == 0)
 80125b8:	b90c      	cbnz	r4, 80125be <wc_Sha512Update+0x22>
        sha512->buffLen = len;
 80125ba:	2000      	movs	r0, #0
 80125bc:	e050      	b.n	8012660 <wc_Sha512Update+0xc4>
    if ( (sha512->loLen += len) < tmp)
 80125be:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
 80125c2:	191b      	adds	r3, r3, r4
 80125c4:	f152 0200 	adcs.w	r2, r2, #0
 80125c8:	f04f 0100 	mov.w	r1, #0
 80125cc:	bf28      	it	cs
 80125ce:	2101      	movcs	r1, #1
 80125d0:	e9c5 3232 	strd	r3, r2, [r5, #200]	; 0xc8
 80125d4:	b131      	cbz	r1, 80125e4 <wc_Sha512Update+0x48>
        sha512->hiLen++;                       /* carry low to high */
 80125d6:	e9d5 3234 	ldrd	r3, r2, [r5, #208]	; 0xd0
 80125da:	3301      	adds	r3, #1
 80125dc:	f142 0200 	adc.w	r2, r2, #0
 80125e0:	e9c5 3234 	strd	r3, r2, [r5, #208]	; 0xd0
    byte* local = (byte*)sha512->buffer;
 80125e4:	f105 0740 	add.w	r7, r5, #64	; 0x40
    if (sha512->buffLen > 0) {
 80125e8:	b1e8      	cbz	r0, 8012626 <wc_Sha512Update+0x8a>
        word32 add = min(len, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 80125ea:	f1c0 0880 	rsb	r8, r0, #128	; 0x80
        return a > b ? b : a;
 80125ee:	45a0      	cmp	r8, r4
 80125f0:	bf28      	it	cs
 80125f2:	46a0      	movcs	r8, r4
            XMEMCPY(&local[sha512->buffLen], data, add);
 80125f4:	4642      	mov	r2, r8
 80125f6:	4631      	mov	r1, r6
 80125f8:	4438      	add	r0, r7
 80125fa:	f00b f9d3 	bl	801d9a4 <memcpy>
            sha512->buffLen += add;
 80125fe:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8012602:	4442      	add	r2, r8
        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 8012604:	2a80      	cmp	r2, #128	; 0x80
            sha512->buffLen += add;
 8012606:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
            data            += add;
 801260a:	4446      	add	r6, r8
            len             -= add;
 801260c:	eba4 0408 	sub.w	r4, r4, r8
        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 8012610:	d109      	bne.n	8012626 <wc_Sha512Update+0x8a>
                ByteReverseWords64(sha512->buffer, sha512->buffer,
 8012612:	4638      	mov	r0, r7
 8012614:	4639      	mov	r1, r7
 8012616:	f7fd ff0f 	bl	8010438 <ByteReverseWords64>
            ret = Transform_Sha512(sha512);
 801261a:	4628      	mov	r0, r5
 801261c:	f7fd ff32 	bl	8010484 <_Transform_Sha512>
            if (ret == 0)
 8012620:	b9f0      	cbnz	r0, 8012660 <wc_Sha512Update+0xc4>
                sha512->buffLen = 0;
 8012622:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8012626:	4426      	add	r6, r4
        while (len >= WC_SHA512_BLOCK_SIZE) {
 8012628:	2c7f      	cmp	r4, #127	; 0x7f
 801262a:	eba6 0104 	sub.w	r1, r6, r4
 801262e:	d808      	bhi.n	8012642 <wc_Sha512Update+0xa6>
    if (ret == 0 && len > 0) {
 8012630:	2c00      	cmp	r4, #0
 8012632:	d0c2      	beq.n	80125ba <wc_Sha512Update+0x1e>
        XMEMCPY(local, data, len);
 8012634:	4622      	mov	r2, r4
 8012636:	4638      	mov	r0, r7
 8012638:	f00b f9b4 	bl	801d9a4 <memcpy>
        sha512->buffLen = len;
 801263c:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 8012640:	e7bb      	b.n	80125ba <wc_Sha512Update+0x1e>
            XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 8012642:	2280      	movs	r2, #128	; 0x80
 8012644:	4638      	mov	r0, r7
 8012646:	f00b f9ad 	bl	801d9a4 <memcpy>
            ByteReverseWords64(sha512->buffer, sha512->buffer,
 801264a:	4638      	mov	r0, r7
 801264c:	2280      	movs	r2, #128	; 0x80
 801264e:	4639      	mov	r1, r7
 8012650:	f7fd fef2 	bl	8010438 <ByteReverseWords64>
            ret = Transform_Sha512(sha512);
 8012654:	4628      	mov	r0, r5
            len  -= WC_SHA512_BLOCK_SIZE;
 8012656:	3c80      	subs	r4, #128	; 0x80
            ret = Transform_Sha512(sha512);
 8012658:	f7fd ff14 	bl	8010484 <_Transform_Sha512>
            if (ret != 0)
 801265c:	2800      	cmp	r0, #0
 801265e:	d0e3      	beq.n	8012628 <wc_Sha512Update+0x8c>
}
 8012660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BAD_FUNC_ARG;
 8012664:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012668:	e7fa      	b.n	8012660 <wc_Sha512Update+0xc4>
        return BUFFER_E;
 801266a:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801266e:	e7f7      	b.n	8012660 <wc_Sha512Update+0xc4>

08012670 <wc_Sha512FinalRaw>:
    return Sha512FinalRaw(sha512, hash, WC_SHA512_DIGEST_SIZE);
 8012670:	2240      	movs	r2, #64	; 0x40
 8012672:	f7fd bef1 	b.w	8010458 <Sha512FinalRaw>

08012676 <wc_InitSha512>:
    return wc_InitSha512_ex(sha512, NULL, devId);
 8012676:	f06f 0201 	mvn.w	r2, #1
 801267a:	2100      	movs	r1, #0
 801267c:	f7ff bf76 	b.w	801256c <wc_InitSha512_ex>

08012680 <wc_Sha512Free>:
    if (sha512 == NULL)
 8012680:	b120      	cbz	r0, 801268c <wc_Sha512Free+0xc>
 8012682:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    while (len--) *z++ = 0;
 8012686:	2200      	movs	r2, #0
 8012688:	4298      	cmp	r0, r3
 801268a:	d100      	bne.n	801268e <wc_Sha512Free+0xe>
}
 801268c:	4770      	bx	lr
 801268e:	f800 2b01 	strb.w	r2, [r0], #1
 8012692:	e7f9      	b.n	8012688 <wc_Sha512Free+0x8>

08012694 <wc_Sha512Copy>:
{
 8012694:	b508      	push	{r3, lr}
 8012696:	460b      	mov	r3, r1
    if (src == NULL || dst == NULL) {
 8012698:	4601      	mov	r1, r0
 801269a:	b130      	cbz	r0, 80126aa <wc_Sha512Copy+0x16>
 801269c:	b12b      	cbz	r3, 80126aa <wc_Sha512Copy+0x16>
    XMEMCPY(dst, src, sizeof(wc_Sha512));
 801269e:	22e0      	movs	r2, #224	; 0xe0
 80126a0:	4618      	mov	r0, r3
 80126a2:	f00b f97f 	bl	801d9a4 <memcpy>
    return ret;
 80126a6:	2000      	movs	r0, #0
}
 80126a8:	bd08      	pop	{r3, pc}
        return BAD_FUNC_ARG;
 80126aa:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80126ae:	e7fb      	b.n	80126a8 <wc_Sha512Copy+0x14>

080126b0 <Sha512_Family_GetHash>:
{
 80126b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b2:	460e      	mov	r6, r1
 80126b4:	4617      	mov	r7, r2
    if (sha512 == NULL || hash == NULL) {
 80126b6:	4604      	mov	r4, r0
 80126b8:	b1b8      	cbz	r0, 80126ea <Sha512_Family_GetHash+0x3a>
 80126ba:	b1b1      	cbz	r1, 80126ea <Sha512_Family_GetHash+0x3a>
    tmpSha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 80126bc:	20e0      	movs	r0, #224	; 0xe0
 80126be:	f00b f951 	bl	801d964 <malloc>
    if (tmpSha512 == NULL) {
 80126c2:	4605      	mov	r5, r0
 80126c4:	b1a0      	cbz	r0, 80126f0 <Sha512_Family_GetHash+0x40>
    ret = wc_Sha512Copy(sha512, tmpSha512);
 80126c6:	4601      	mov	r1, r0
 80126c8:	4620      	mov	r0, r4
 80126ca:	f7ff ffe3 	bl	8012694 <wc_Sha512Copy>
    if (ret == 0) {
 80126ce:	4604      	mov	r4, r0
 80126d0:	b930      	cbnz	r0, 80126e0 <Sha512_Family_GetHash+0x30>
        ret = finalfp(tmpSha512, hash);
 80126d2:	4631      	mov	r1, r6
 80126d4:	4628      	mov	r0, r5
 80126d6:	47b8      	blx	r7
 80126d8:	4604      	mov	r4, r0
        wc_Sha512Free(tmpSha512);
 80126da:	4628      	mov	r0, r5
 80126dc:	f7ff ffd0 	bl	8012680 <wc_Sha512Free>
    XFREE(tmpSha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80126e0:	4628      	mov	r0, r5
 80126e2:	f00b f947 	bl	801d974 <free>
}
 80126e6:	4620      	mov	r0, r4
 80126e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 80126ea:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80126ee:	e7fa      	b.n	80126e6 <Sha512_Family_GetHash+0x36>
        return MEMORY_E;
 80126f0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80126f4:	e7f7      	b.n	80126e6 <Sha512_Family_GetHash+0x36>
	...

080126f8 <wc_Sha512GetHash>:
    return Sha512_Family_GetHash(sha512, hash, wc_Sha512Final);
 80126f8:	4a01      	ldr	r2, [pc, #4]	; (8012700 <wc_Sha512GetHash+0x8>)
 80126fa:	f7ff bfd9 	b.w	80126b0 <Sha512_Family_GetHash>
 80126fe:	bf00      	nop
 8012700:	08012549 	.word	0x08012549

08012704 <wc_InitSha512_224>:
    return wc_InitSha512_224_ex(sha, NULL, INVALID_DEVID);
 8012704:	f06f 0201 	mvn.w	r2, #1
 8012708:	2100      	movs	r1, #0
 801270a:	f7ff bf37 	b.w	801257c <wc_InitSha512_224_ex>

0801270e <wc_Sha512_224Update>:
    return wc_Sha512Update(sha, data, len);
 801270e:	f7ff bf45 	b.w	801259c <wc_Sha512Update>

08012712 <wc_Sha512_224Free>:
    wc_Sha512Free(sha);
 8012712:	f7ff bfb5 	b.w	8012680 <wc_Sha512Free>

08012716 <wc_InitSha512_256>:
    return wc_InitSha512_256_ex(sha, NULL, INVALID_DEVID);
 8012716:	f06f 0201 	mvn.w	r2, #1
 801271a:	2100      	movs	r1, #0
 801271c:	f7ff bf36 	b.w	801258c <wc_InitSha512_256_ex>

08012720 <wc_Sha512_256Update>:
 8012720:	f7ff bf3c 	b.w	801259c <wc_Sha512Update>

08012724 <wc_Sha512_256Free>:
 8012724:	f7ff bfac 	b.w	8012680 <wc_Sha512Free>

08012728 <GetBoolean>:
 *         ASN_PARSE_E when the BOOLEAN tag is not found or length is not 1.
 *         Otherwise, 0 to indicate the value was false and 1 to indicate true.
 */
static int GetBoolean(const byte* input, word32* inOutIdx, word32 maxIdx)
{
    word32 idx = *inOutIdx;
 8012728:	680b      	ldr	r3, [r1, #0]
{
 801272a:	b530      	push	{r4, r5, lr}
    byte   b;

    if ((idx + 3) > maxIdx)
 801272c:	1cdc      	adds	r4, r3, #3
 801272e:	4294      	cmp	r4, r2
 8012730:	d80f      	bhi.n	8012752 <GetBoolean+0x2a>
        return BUFFER_E;

    b = input[idx++];
    if (b != ASN_BOOLEAN)
 8012732:	5cc5      	ldrb	r5, [r0, r3]
 8012734:	2d01      	cmp	r5, #1
    b = input[idx++];
 8012736:	f103 0201 	add.w	r2, r3, #1
    if (b != ASN_BOOLEAN)
 801273a:	d10d      	bne.n	8012758 <GetBoolean+0x30>
        return ASN_PARSE_E;

    if (input[idx++] != 1)
 801273c:	5c82      	ldrb	r2, [r0, r2]
 801273e:	2a01      	cmp	r2, #1
 8012740:	f103 0302 	add.w	r3, r3, #2
 8012744:	d108      	bne.n	8012758 <GetBoolean+0x30>
        return ASN_PARSE_E;

    b = input[idx++] != 0;
 8012746:	5cc0      	ldrb	r0, [r0, r3]

    *inOutIdx = idx;
 8012748:	600c      	str	r4, [r1, #0]
    return b;
 801274a:	3800      	subs	r0, #0
 801274c:	bf18      	it	ne
 801274e:	2001      	movne	r0, #1
}
 8012750:	bd30      	pop	{r4, r5, pc}
        return BUFFER_E;
 8012752:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8012756:	e7fb      	b.n	8012750 <GetBoolean+0x28>
        return ASN_PARSE_E;
 8012758:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 801275c:	e7f8      	b.n	8012750 <GetBoolean+0x28>

0801275e <GetTime>:

#ifndef NO_ASN_TIME

/* two byte date/time, add to value */
static WC_INLINE int GetTime(int* value, const byte* date, int* idx)
{
 801275e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i = *idx;
 8012760:	6813      	ldr	r3, [r2, #0]

    if (date[i] < 0x30 || date[i] > 0x39 || date[i+1] < 0x30 ||
 8012762:	5ccc      	ldrb	r4, [r1, r3]
 8012764:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8012768:	b2ec      	uxtb	r4, r5
 801276a:	2c09      	cmp	r4, #9
 801276c:	d811      	bhi.n	8012792 <GetTime+0x34>
 801276e:	1c5e      	adds	r6, r3, #1
 8012770:	5d8c      	ldrb	r4, [r1, r6]
 8012772:	3c30      	subs	r4, #48	; 0x30
 8012774:	2c09      	cmp	r4, #9
 8012776:	d80c      	bhi.n	8012792 <GetTime+0x34>
                                                             date[i+1] > 0x39) {
        return ASN_PARSE_E;
    }

    *value += (int)btoi(date[i++]) * 10;
 8012778:	6804      	ldr	r4, [r0, #0]
 801277a:	270a      	movs	r7, #10
 801277c:	fb07 4405 	mla	r4, r7, r5, r4
 8012780:	6004      	str	r4, [r0, #0]
    return (word32)(b - 0x30);
 8012782:	5d89      	ldrb	r1, [r1, r6]
 8012784:	3930      	subs	r1, #48	; 0x30
    *value += (int)btoi(date[i++]);
 8012786:	4421      	add	r1, r4
 8012788:	3302      	adds	r3, #2
 801278a:	6001      	str	r1, [r0, #0]

    *idx = i;
 801278c:	6013      	str	r3, [r2, #0]

    return 0;
 801278e:	2000      	movs	r0, #0
}
 8012790:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ASN_PARSE_E;
 8012792:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8012796:	e7fb      	b.n	8012790 <GetTime+0x32>

08012798 <CheckCurve>:
{
 8012798:	b507      	push	{r0, r1, r2, lr}
    ret = wc_ecc_get_oid(oid, NULL, &oidSz);
 801279a:	2100      	movs	r1, #0
 801279c:	aa01      	add	r2, sp, #4
 801279e:	f7fb fefb 	bl	800e598 <wc_ecc_get_oid>
    if ((ret < 0) || (oidSz == 0)) {
 80127a2:	2800      	cmp	r0, #0
 80127a4:	db07      	blt.n	80127b6 <CheckCurve+0x1e>
 80127a6:	9b01      	ldr	r3, [sp, #4]
        ret = ECC_CURVE_OID_E;
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	bf08      	it	eq
 80127ac:	f06f 00ab 	mvneq.w	r0, #171	; 0xab
}
 80127b0:	b003      	add	sp, #12
 80127b2:	f85d fb04 	ldr.w	pc, [sp], #4
        ret = ECC_CURVE_OID_E;
 80127b6:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 80127ba:	e7f9      	b.n	80127b0 <CheckCurve+0x18>

080127bc <MatchBaseName>:

#ifndef IGNORE_NAME_CONSTRAINTS

static int MatchBaseName(int type, const char* name, int nameSz,
                         const char* base, int baseSz)
{
 80127bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127be:	4605      	mov	r5, r0
 80127c0:	4614      	mov	r4, r2
 80127c2:	4608      	mov	r0, r1
 80127c4:	9a06      	ldr	r2, [sp, #24]
    if (base == NULL || baseSz <= 0 || name == NULL || nameSz <= 0 ||
 80127c6:	4619      	mov	r1, r3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d052      	beq.n	8012872 <MatchBaseName+0xb6>
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	dd50      	ble.n	8012872 <MatchBaseName+0xb6>
 80127d0:	b180      	cbz	r0, 80127f4 <MatchBaseName+0x38>
 80127d2:	2c00      	cmp	r4, #0
 80127d4:	dd4d      	ble.n	8012872 <MatchBaseName+0xb6>
 80127d6:	7803      	ldrb	r3, [r0, #0]
 80127d8:	2b2e      	cmp	r3, #46	; 0x2e
 80127da:	d04a      	beq.n	8012872 <MatchBaseName+0xb6>
            name[0] == '.' || nameSz < baseSz ||
 80127dc:	42a2      	cmp	r2, r4
 80127de:	dc48      	bgt.n	8012872 <MatchBaseName+0xb6>
            (type != ASN_RFC822_TYPE && type != ASN_DNS_TYPE &&
 80127e0:	1e6b      	subs	r3, r5, #1
            name[0] == '.' || nameSz < baseSz ||
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d907      	bls.n	80127f6 <MatchBaseName+0x3a>
            (type != ASN_RFC822_TYPE && type != ASN_DNS_TYPE &&
 80127e6:	2d04      	cmp	r5, #4
 80127e8:	d143      	bne.n	8012872 <MatchBaseName+0xb6>
             type != ASN_DIR_TYPE)) {
        return 0;
    }

    if (type == ASN_DIR_TYPE)
        return XMEMCMP(name, base, (size_t)baseSz) == 0;
 80127ea:	f00b f8cb 	bl	801d984 <memcmp>
 80127ee:	fab0 f080 	clz	r0, r0
 80127f2:	0940      	lsrs	r0, r0, #5
        base++;
        nameSz--;
    }

    return 1;
}
 80127f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (type == ASN_RFC822_TYPE) {
 80127f6:	2d01      	cmp	r5, #1
 80127f8:	d10f      	bne.n	801281a <MatchBaseName+0x5e>
        if (base[0] != '.') {
 80127fa:	780e      	ldrb	r6, [r1, #0]
 80127fc:	2e2e      	cmp	r6, #46	; 0x2e
 80127fe:	d117      	bne.n	8012830 <MatchBaseName+0x74>
 8012800:	4605      	mov	r5, r0
            count = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	462f      	mov	r7, r5
            while (*p != '@' && count < baseSz) {
 8012806:	3501      	adds	r5, #1
 8012808:	f897 c000 	ldrb.w	ip, [r7]
 801280c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8012810:	d031      	beq.n	8012876 <MatchBaseName+0xba>
 8012812:	4293      	cmp	r3, r2
 8012814:	d117      	bne.n	8012846 <MatchBaseName+0x8a>
    if (type == ASN_DNS_TYPE || (type == ASN_RFC822_TYPE && base[0] == '.')) {
 8012816:	2e2e      	cmp	r6, #46	; 0x2e
 8012818:	d10e      	bne.n	8012838 <MatchBaseName+0x7c>
        int szAdjust = nameSz - baseSz;
 801281a:	1aa4      	subs	r4, r4, r2
        name += szAdjust;
 801281c:	4420      	add	r0, r4
 801281e:	4614      	mov	r4, r2
 8012820:	e00a      	b.n	8012838 <MatchBaseName+0x7c>
                count++;
 8012822:	3301      	adds	r3, #1
            while (*p != '@' && count < baseSz) {
 8012824:	5ccd      	ldrb	r5, [r1, r3]
 8012826:	2d40      	cmp	r5, #64	; 0x40
 8012828:	d004      	beq.n	8012834 <MatchBaseName+0x78>
 801282a:	4293      	cmp	r3, r2
 801282c:	d1f9      	bne.n	8012822 <MatchBaseName+0x66>
 801282e:	e7e7      	b.n	8012800 <MatchBaseName+0x44>
            count = 0;
 8012830:	2300      	movs	r3, #0
 8012832:	e7f7      	b.n	8012824 <MatchBaseName+0x68>
            if (count >= baseSz)
 8012834:	4293      	cmp	r3, r2
 8012836:	dae3      	bge.n	8012800 <MatchBaseName+0x44>
        if (XTOLOWER((unsigned char)*name) !=
 8012838:	4b12      	ldr	r3, [pc, #72]	; (8012884 <MatchBaseName+0xc8>)
 801283a:	3901      	subs	r1, #1
 801283c:	3801      	subs	r0, #1
    while (nameSz > 0) {
 801283e:	2c00      	cmp	r4, #0
 8012840:	dc03      	bgt.n	801284a <MatchBaseName+0x8e>
    return 1;
 8012842:	2001      	movs	r0, #1
 8012844:	e7d6      	b.n	80127f4 <MatchBaseName+0x38>
                count++;
 8012846:	3301      	adds	r3, #1
                p++;
 8012848:	e7dc      	b.n	8012804 <MatchBaseName+0x48>
        if (XTOLOWER((unsigned char)*name) !=
 801284a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801284e:	5cea      	ldrb	r2, [r5, r3]
 8012850:	f002 0203 	and.w	r2, r2, #3
 8012854:	2a01      	cmp	r2, #1
                                               XTOLOWER((unsigned char)*base))
 8012856:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801285a:	5c9e      	ldrb	r6, [r3, r2]
 801285c:	f006 0603 	and.w	r6, r6, #3
        if (XTOLOWER((unsigned char)*name) !=
 8012860:	bf08      	it	eq
 8012862:	3520      	addeq	r5, #32
                                               XTOLOWER((unsigned char)*base))
 8012864:	2e01      	cmp	r6, #1
 8012866:	bf08      	it	eq
 8012868:	3220      	addeq	r2, #32
        if (XTOLOWER((unsigned char)*name) !=
 801286a:	4295      	cmp	r5, r2
 801286c:	d101      	bne.n	8012872 <MatchBaseName+0xb6>
        nameSz--;
 801286e:	3c01      	subs	r4, #1
 8012870:	e7e5      	b.n	801283e <MatchBaseName+0x82>
        return 0;
 8012872:	2000      	movs	r0, #0
 8012874:	e7be      	b.n	80127f4 <MatchBaseName+0x38>
            if (count < baseSz && *p == '@') {
 8012876:	4293      	cmp	r3, r2
 8012878:	dacd      	bge.n	8012816 <MatchBaseName+0x5a>
                nameSz -= count + 1;
 801287a:	3301      	adds	r3, #1
                name = p + 1;
 801287c:	1c78      	adds	r0, r7, #1
                nameSz -= count + 1;
 801287e:	1ae4      	subs	r4, r4, r3
 8012880:	e7c9      	b.n	8012816 <MatchBaseName+0x5a>
 8012882:	bf00      	nop
 8012884:	0802ab2d 	.word	0x0802ab2d

08012888 <IsInExcludedList>:
 * dnsList  The list to search through
 * nameType Type of DNS name to currently searching
 * return 1 if found in list and 0 if not found in the list
 */
static int IsInExcludedList(DNS_entry* name, Base_entry* dnsList, byte nameType)
{
 8012888:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801288a:	4605      	mov	r5, r0
 801288c:	460c      	mov	r4, r1
 801288e:	4616      	mov	r6, r2
    int ret = 0; /* default of not found in the list */
    Base_entry* current = dnsList;

    while (current != NULL) {
 8012890:	b914      	cbnz	r4, 8012898 <IsInExcludedList+0x10>
    int ret = 0; /* default of not found in the list */
 8012892:	4620      	mov	r0, r4
        }
        current = current->next;
    }

    return ret;
}
 8012894:	b002      	add	sp, #8
 8012896:	bd70      	pop	{r4, r5, r6, pc}
        if (current->type == nameType) {
 8012898:	7b23      	ldrb	r3, [r4, #12]
 801289a:	42b3      	cmp	r3, r6
 801289c:	d001      	beq.n	80128a2 <IsInExcludedList+0x1a>
        current = current->next;
 801289e:	6824      	ldr	r4, [r4, #0]
 80128a0:	e7f6      	b.n	8012890 <IsInExcludedList+0x8>
            if (name->len >= current->nameSz &&
 80128a2:	68aa      	ldr	r2, [r5, #8]
 80128a4:	68a3      	ldr	r3, [r4, #8]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	dbf9      	blt.n	801289e <IsInExcludedList+0x16>
                MatchBaseName(nameType, name->name, name->len,
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	6863      	ldr	r3, [r4, #4]
 80128ae:	68e9      	ldr	r1, [r5, #12]
 80128b0:	4630      	mov	r0, r6
 80128b2:	f7ff ff83 	bl	80127bc <MatchBaseName>
            if (name->len >= current->nameSz &&
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d0f1      	beq.n	801289e <IsInExcludedList+0x16>
                ret = 1;
 80128ba:	2001      	movs	r0, #1
    return ret;
 80128bc:	e7ea      	b.n	8012894 <IsInExcludedList+0xc>

080128be <PermittedListOk>:
{
 80128be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int need  = 0;
 80128c0:	2300      	movs	r3, #0
{
 80128c2:	4605      	mov	r5, r0
 80128c4:	460c      	mov	r4, r1
 80128c6:	4616      	mov	r6, r2
    while (current != NULL) {
 80128c8:	b91c      	cbnz	r4, 80128d2 <PermittedListOk+0x14>
    if (need && !match)
 80128ca:	f1c3 0001 	rsb	r0, r3, #1
}
 80128ce:	b002      	add	sp, #8
 80128d0:	bd70      	pop	{r4, r5, r6, pc}
        if (current->type == nameType) {
 80128d2:	7b22      	ldrb	r2, [r4, #12]
 80128d4:	42b2      	cmp	r2, r6
 80128d6:	d104      	bne.n	80128e2 <PermittedListOk+0x24>
            if (name->len >= current->nameSz &&
 80128d8:	68aa      	ldr	r2, [r5, #8]
 80128da:	68a3      	ldr	r3, [r4, #8]
 80128dc:	429a      	cmp	r2, r3
 80128de:	da02      	bge.n	80128e6 <PermittedListOk+0x28>
            need = 1; /* restriction on permitted names is set for this type */
 80128e0:	2301      	movs	r3, #1
        current = current->next;
 80128e2:	6824      	ldr	r4, [r4, #0]
 80128e4:	e7f0      	b.n	80128c8 <PermittedListOk+0xa>
                MatchBaseName(nameType, name->name, name->len,
 80128e6:	9300      	str	r3, [sp, #0]
 80128e8:	6863      	ldr	r3, [r4, #4]
 80128ea:	68e9      	ldr	r1, [r5, #12]
 80128ec:	4630      	mov	r0, r6
 80128ee:	f7ff ff65 	bl	80127bc <MatchBaseName>
            if (name->len >= current->nameSz &&
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d0f4      	beq.n	80128e0 <PermittedListOk+0x22>
                match = 1; /* found the current name in the permitted list*/
 80128f6:	2001      	movs	r0, #1
    return ret;
 80128f8:	e7e9      	b.n	80128ce <PermittedListOk+0x10>

080128fa <GetLength_ex>:
{
 80128fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    word32  idx = (word32)*inOutIdx;
 80128fc:	680f      	ldr	r7, [r1, #0]
    if ((idx + 1) > maxIdx) {
 80128fe:	1c7e      	adds	r6, r7, #1
    *len = 0;
 8012900:	2400      	movs	r4, #0
    if ((idx + 1) > maxIdx) {
 8012902:	429e      	cmp	r6, r3
{
 8012904:	4605      	mov	r5, r0
    *len = 0;
 8012906:	6014      	str	r4, [r2, #0]
    if ((idx + 1) > maxIdx) {
 8012908:	d82f      	bhi.n	801296a <GetLength_ex+0x70>
    if (b >= ASN_LONG_LENGTH) {
 801290a:	57ed      	ldrsb	r5, [r5, r7]
 801290c:	42a5      	cmp	r5, r4
    b = input[idx++];
 801290e:	eb00 0c07 	add.w	ip, r0, r7
 8012912:	5dc0      	ldrb	r0, [r0, r7]
    if (b >= ASN_LONG_LENGTH) {
 8012914:	da15      	bge.n	8012942 <GetLength_ex+0x48>
        if (b == ASN_INDEF_LENGTH) {
 8012916:	2880      	cmp	r0, #128	; 0x80
 8012918:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 801291c:	d007      	beq.n	801292e <GetLength_ex+0x34>
        else if (bytes == 1) {
 801291e:	2d01      	cmp	r5, #1
 8012920:	d019      	beq.n	8012956 <GetLength_ex+0x5c>
        else if (bytes > sizeof(length)) {
 8012922:	2d04      	cmp	r5, #4
 8012924:	d81e      	bhi.n	8012964 <GetLength_ex+0x6a>
            minLen = 1 << ((bytes - 1) * 8);
 8012926:	1e6c      	subs	r4, r5, #1
 8012928:	00e0      	lsls	r0, r4, #3
 801292a:	2401      	movs	r4, #1
 801292c:	4084      	lsls	r4, r0
        if ((idx + bytes) > maxIdx) {
 801292e:	442e      	add	r6, r5
 8012930:	429e      	cmp	r6, r3
 8012932:	d81a      	bhi.n	801296a <GetLength_ex+0x70>
    int     length = 0;
 8012934:	2000      	movs	r0, #0
        while (bytes--) {
 8012936:	3d01      	subs	r5, #1
 8012938:	d20f      	bcs.n	801295a <GetLength_ex+0x60>
        if (length < 0) {
 801293a:	2800      	cmp	r0, #0
 801293c:	db12      	blt.n	8012964 <GetLength_ex+0x6a>
        if (length < minLen) {
 801293e:	42a0      	cmp	r0, r4
 8012940:	db10      	blt.n	8012964 <GetLength_ex+0x6a>
    if (check && ((idx + (word32)length) > maxIdx)) {
 8012942:	9c05      	ldr	r4, [sp, #20]
 8012944:	b114      	cbz	r4, 801294c <GetLength_ex+0x52>
 8012946:	1984      	adds	r4, r0, r6
 8012948:	429c      	cmp	r4, r3
 801294a:	d80e      	bhi.n	801296a <GetLength_ex+0x70>
    if (length > 0) {
 801294c:	2800      	cmp	r0, #0
    *inOutIdx = idx;
 801294e:	600e      	str	r6, [r1, #0]
    if (length > 0) {
 8012950:	dd00      	ble.n	8012954 <GetLength_ex+0x5a>
        *len = length;
 8012952:	6010      	str	r0, [r2, #0]
}
 8012954:	bdf0      	pop	{r4, r5, r6, r7, pc}
            minLen = 0x80;
 8012956:	2480      	movs	r4, #128	; 0x80
 8012958:	e7e9      	b.n	801292e <GetLength_ex+0x34>
            length = (length << 8) | b;
 801295a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801295e:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
 8012962:	e7e8      	b.n	8012936 <GetLength_ex+0x3c>
            return ASN_PARSE_E;
 8012964:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8012968:	e7f4      	b.n	8012954 <GetLength_ex+0x5a>
        return BUFFER_E;
 801296a:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801296e:	e7f1      	b.n	8012954 <GetLength_ex+0x5a>

08012970 <GetLength>:
{
 8012970:	b513      	push	{r0, r1, r4, lr}
    return GetLength_ex(input, inOutIdx, len, maxIdx, 1);
 8012972:	2401      	movs	r4, #1
 8012974:	9400      	str	r4, [sp, #0]
 8012976:	f7ff ffc0 	bl	80128fa <GetLength_ex>
}
 801297a:	b002      	add	sp, #8
 801297c:	bd10      	pop	{r4, pc}

0801297e <GetDateInfo>:
{
 801297e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012982:	461f      	mov	r7, r3
 8012984:	460c      	mov	r4, r1
 8012986:	e9dd 830a 	ldrd	r8, r3, [sp, #40]	; 0x28
 801298a:	4616      	mov	r6, r2
    if (source == NULL || idx == NULL)
 801298c:	4605      	mov	r5, r0
 801298e:	b348      	cbz	r0, 80129e4 <GetDateInfo+0x66>
    if (*idx+1 > maxIdx)
 8012990:	f8d1 c000 	ldr.w	ip, [r1]
 8012994:	f10c 0201 	add.w	r2, ip, #1
 8012998:	429a      	cmp	r2, r3
 801299a:	d826      	bhi.n	80129ea <GetDateInfo+0x6c>
    format = source[*idx];
 801299c:	f810 900c 	ldrb.w	r9, [r0, ip]
    *idx += 1;
 80129a0:	600a      	str	r2, [r1, #0]
    if (format != ASN_UTC_TIME && format != ASN_GENERALIZED_TIME) {
 80129a2:	f1a9 0217 	sub.w	r2, r9, #23
 80129a6:	2a01      	cmp	r2, #1
 80129a8:	d822      	bhi.n	80129f0 <GetDateInfo+0x72>
    if (GetLength(source, idx, &length, maxIdx) < 0)
 80129aa:	aa01      	add	r2, sp, #4
 80129ac:	f7ff ffe0 	bl	8012970 <GetLength>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	db20      	blt.n	80129f6 <GetDateInfo+0x78>
    if (length > MAX_DATE_SIZE || length < MIN_DATE_SIZE)
 80129b4:	9a01      	ldr	r2, [sp, #4]
 80129b6:	f1a2 030c 	sub.w	r3, r2, #12
 80129ba:	2b14      	cmp	r3, #20
 80129bc:	d81e      	bhi.n	80129fc <GetDateInfo+0x7e>
    if (pFormat)
 80129be:	b10f      	cbz	r7, 80129c4 <GetDateInfo+0x46>
        *pFormat = format;
 80129c0:	f887 9000 	strb.w	r9, [r7]
    if (pDate)
 80129c4:	b116      	cbz	r6, 80129cc <GetDateInfo+0x4e>
        *pDate = &source[*idx];
 80129c6:	6820      	ldr	r0, [r4, #0]
 80129c8:	4405      	add	r5, r0
 80129ca:	6035      	str	r5, [r6, #0]
    if (pLength)
 80129cc:	f1b8 0f00 	cmp.w	r8, #0
 80129d0:	d001      	beq.n	80129d6 <GetDateInfo+0x58>
        *pLength = length;
 80129d2:	f8c8 2000 	str.w	r2, [r8]
    *idx += (word32)length;
 80129d6:	6823      	ldr	r3, [r4, #0]
 80129d8:	4413      	add	r3, r2
 80129da:	6023      	str	r3, [r4, #0]
    return 0;
 80129dc:	2000      	movs	r0, #0
}
 80129de:	b003      	add	sp, #12
 80129e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BAD_FUNC_ARG;
 80129e4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80129e8:	e7f9      	b.n	80129de <GetDateInfo+0x60>
        return BUFFER_E;
 80129ea:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80129ee:	e7f6      	b.n	80129de <GetDateInfo+0x60>
        return ASN_TIME_E;
 80129f0:	f06f 0098 	mvn.w	r0, #152	; 0x98
 80129f4:	e7f3      	b.n	80129de <GetDateInfo+0x60>
        return ASN_PARSE_E;
 80129f6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 80129fa:	e7f0      	b.n	80129de <GetDateInfo+0x60>
        return ASN_DATE_SZ_E;
 80129fc:	f06f 0094 	mvn.w	r0, #148	; 0x94
 8012a00:	e7ed      	b.n	80129de <GetDateInfo+0x60>

08012a02 <GetASNTag>:
{
 8012a02:	b530      	push	{r4, r5, lr}
    if ((tag == NULL) || (inOutIdx == NULL) || (input == NULL)) {
 8012a04:	b152      	cbz	r2, 8012a1c <GetASNTag+0x1a>
 8012a06:	b149      	cbz	r1, 8012a1c <GetASNTag+0x1a>
 8012a08:	b140      	cbz	r0, 8012a1c <GetASNTag+0x1a>
        idx = *inOutIdx;
 8012a0a:	680d      	ldr	r5, [r1, #0]
        if (idx + ASN_TAG_SZ > maxIdx) {
 8012a0c:	1c6c      	adds	r4, r5, #1
 8012a0e:	429c      	cmp	r4, r3
 8012a10:	d807      	bhi.n	8012a22 <GetASNTag+0x20>
        *tag = input[idx];
 8012a12:	5d43      	ldrb	r3, [r0, r5]
 8012a14:	7013      	strb	r3, [r2, #0]
        *inOutIdx = idx + ASN_TAG_SZ;
 8012a16:	2000      	movs	r0, #0
 8012a18:	600c      	str	r4, [r1, #0]
}
 8012a1a:	bd30      	pop	{r4, r5, pc}
        ret = BAD_FUNC_ARG;
 8012a1c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012a20:	e7fb      	b.n	8012a1a <GetASNTag+0x18>
            ret = BUFFER_E;
 8012a22:	f06f 0083 	mvn.w	r0, #131	; 0x83
    return ret;
 8012a26:	e7f8      	b.n	8012a1a <GetASNTag+0x18>

08012a28 <GetASNHeader_ex>:
{
 8012a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2c:	b086      	sub	sp, #24
 8012a2e:	461d      	mov	r5, r3
 8012a30:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    word32 idx = *inOutIdx;
 8012a34:	6813      	ldr	r3, [r2, #0]
 8012a36:	9304      	str	r3, [sp, #16]
    int    length = 0;
 8012a38:	2300      	movs	r3, #0
{
 8012a3a:	460f      	mov	r7, r1
 8012a3c:	4614      	mov	r4, r2
    int    length = 0;
 8012a3e:	9305      	str	r3, [sp, #20]
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 8012a40:	f10d 020f 	add.w	r2, sp, #15
 8012a44:	4643      	mov	r3, r8
 8012a46:	a904      	add	r1, sp, #16
{
 8012a48:	4606      	mov	r6, r0
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 8012a4a:	f7ff ffda 	bl	8012a02 <GetASNTag>
 8012a4e:	b120      	cbz	r0, 8012a5a <GetASNHeader_ex+0x32>
{
 8012a50:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8012a54:	b006      	add	sp, #24
 8012a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret == 0) && (tagFound != tag)) {
 8012a5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012a5e:	42bb      	cmp	r3, r7
 8012a60:	d1f6      	bne.n	8012a50 <GetASNHeader_ex+0x28>
    if ((ret == 0) && (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)) {
 8012a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	aa05      	add	r2, sp, #20
 8012a68:	4643      	mov	r3, r8
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f7ff ff45 	bl	80128fa <GetLength_ex>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	dbed      	blt.n	8012a50 <GetASNHeader_ex+0x28>
        *len      = length;
 8012a74:	9805      	ldr	r0, [sp, #20]
        *inOutIdx = idx;
 8012a76:	9b04      	ldr	r3, [sp, #16]
        *len      = length;
 8012a78:	6028      	str	r0, [r5, #0]
        *inOutIdx = idx;
 8012a7a:	6023      	str	r3, [r4, #0]
    return ret;
 8012a7c:	e7ea      	b.n	8012a54 <GetASNHeader_ex+0x2c>

08012a7e <GetSequence>:
{
 8012a7e:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8012a80:	2401      	movs	r4, #1
 8012a82:	e9cd 3400 	strd	r3, r4, [sp]
 8012a86:	4613      	mov	r3, r2
 8012a88:	460a      	mov	r2, r1
 8012a8a:	2130      	movs	r1, #48	; 0x30
 8012a8c:	f7ff ffcc 	bl	8012a28 <GetASNHeader_ex>
}
 8012a90:	b002      	add	sp, #8
 8012a92:	bd10      	pop	{r4, pc}

08012a94 <GetSet>:
{
 8012a94:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8012a96:	2401      	movs	r4, #1
 8012a98:	e9cd 3400 	strd	r3, r4, [sp]
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	460a      	mov	r2, r1
 8012aa0:	2131      	movs	r1, #49	; 0x31
 8012aa2:	f7ff ffc1 	bl	8012a28 <GetASNHeader_ex>
}
 8012aa6:	b002      	add	sp, #8
 8012aa8:	bd10      	pop	{r4, pc}

08012aaa <GetOctetString>:
{
 8012aaa:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8012aac:	2401      	movs	r4, #1
 8012aae:	e9cd 3400 	strd	r3, r4, [sp]
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	460a      	mov	r2, r1
 8012ab6:	2104      	movs	r1, #4
 8012ab8:	f7ff ffb6 	bl	8012a28 <GetASNHeader_ex>
}
 8012abc:	b002      	add	sp, #8
 8012abe:	bd10      	pop	{r4, pc}

08012ac0 <GetASNInt>:
{
 8012ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ac2:	4616      	mov	r6, r2
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	e9cd 3200 	strd	r3, r2, [sp]
{
 8012aca:	460d      	mov	r5, r1
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8012acc:	460a      	mov	r2, r1
 8012ace:	4633      	mov	r3, r6
 8012ad0:	2102      	movs	r1, #2
{
 8012ad2:	4607      	mov	r7, r0
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8012ad4:	f7ff ffa8 	bl	8012a28 <GetASNHeader_ex>
    if (ret < 0)
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	db0f      	blt.n	8012afc <GetASNInt+0x3c>
    if (*len > 0) {
 8012adc:	6832      	ldr	r2, [r6, #0]
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	dd1a      	ble.n	8012b18 <GetASNInt+0x58>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 8012ae2:	682c      	ldr	r4, [r5, #0]
        if (*len > 1) {
 8012ae4:	2a01      	cmp	r2, #1
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 8012ae6:	5d3b      	ldrb	r3, [r7, r4]
        if (*len > 1) {
 8012ae8:	d016      	beq.n	8012b18 <GetASNInt+0x58>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 8012aea:	2bff      	cmp	r3, #255	; 0xff
 8012aec:	d108      	bne.n	8012b00 <GetASNInt+0x40>
 8012aee:	443c      	add	r4, r7
 8012af0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	da0f      	bge.n	8012b18 <GetASNInt+0x58>
                return ASN_PARSE_E;
 8012af8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8012afc:	b003      	add	sp, #12
 8012afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
 8012b00:	b953      	cbnz	r3, 8012b18 <GetASNInt+0x58>
            (*inOutIdx)++;
 8012b02:	3401      	adds	r4, #1
 8012b04:	602c      	str	r4, [r5, #0]
            (*len)--;
 8012b06:	6833      	ldr	r3, [r6, #0]
 8012b08:	3b01      	subs	r3, #1
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 8012b0a:	2b00      	cmp	r3, #0
            (*len)--;
 8012b0c:	6033      	str	r3, [r6, #0]
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 8012b0e:	dd03      	ble.n	8012b18 <GetASNInt+0x58>
 8012b10:	682b      	ldr	r3, [r5, #0]
 8012b12:	56fb      	ldrsb	r3, [r7, r3]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	daef      	bge.n	8012af8 <GetASNInt+0x38>
    return 0;
 8012b18:	2000      	movs	r0, #0
 8012b1a:	e7ef      	b.n	8012afc <GetASNInt+0x3c>

08012b1c <GetIntPositive>:
{
 8012b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012b20:	460c      	mov	r4, r1
 8012b22:	4617      	mov	r7, r2
    word32 idx = *inOutIdx;
 8012b24:	6812      	ldr	r2, [r2, #0]
 8012b26:	9200      	str	r2, [sp, #0]
{
 8012b28:	4606      	mov	r6, r0
    ret = GetASNInt(input, &idx, &length, maxIdx);
 8012b2a:	aa01      	add	r2, sp, #4
 8012b2c:	4669      	mov	r1, sp
 8012b2e:	4620      	mov	r0, r4
{
 8012b30:	9d08      	ldr	r5, [sp, #32]
 8012b32:	4698      	mov	r8, r3
    ret = GetASNInt(input, &idx, &length, maxIdx);
 8012b34:	f7ff ffc4 	bl	8012ac0 <GetASNInt>
    if (ret != 0)
 8012b38:	b930      	cbnz	r0, 8012b48 <GetIntPositive+0x2c>
    if (idx + length > maxIdx) {
 8012b3a:	e9dd 1300 	ldrd	r1, r3, [sp]
 8012b3e:	440b      	add	r3, r1
 8012b40:	4543      	cmp	r3, r8
 8012b42:	d904      	bls.n	8012b4e <GetIntPositive+0x32>
        return MP_INIT_E;
 8012b44:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
 8012b48:	b002      	add	sp, #8
 8012b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((input[idx] & 0x80) == 0x80) {
 8012b4e:	5663      	ldrsb	r3, [r4, r1]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	da06      	bge.n	8012b62 <GetIntPositive+0x46>
        if (idx < 1) {
 8012b54:	2900      	cmp	r1, #0
 8012b56:	d0f5      	beq.n	8012b44 <GetIntPositive+0x28>
        if (input[idx - 1] != 0x00) {
 8012b58:	4421      	add	r1, r4
 8012b5a:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d1f0      	bne.n	8012b44 <GetIntPositive+0x28>
    if (initNum) {
 8012b62:	b965      	cbnz	r5, 8012b7e <GetIntPositive+0x62>
    if (mp_read_unsigned_bin(mpi, input + idx, (word32)length) != 0) {
 8012b64:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012b68:	4630      	mov	r0, r6
 8012b6a:	4421      	add	r1, r4
 8012b6c:	f009 fa5c 	bl	801c028 <mp_read_unsigned_bin>
 8012b70:	b158      	cbz	r0, 8012b8a <GetIntPositive+0x6e>
        mp_clear(mpi);
 8012b72:	4630      	mov	r0, r6
 8012b74:	f009 fa24 	bl	801bfc0 <mp_clear>
        return ASN_GETINT_E;
 8012b78:	f06f 008d 	mvn.w	r0, #141	; 0x8d
 8012b7c:	e7e4      	b.n	8012b48 <GetIntPositive+0x2c>
        if (mp_init(mpi) != MP_OKAY)
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f009 fa09 	bl	801bf96 <mp_init>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d0ed      	beq.n	8012b64 <GetIntPositive+0x48>
 8012b88:	e7dc      	b.n	8012b44 <GetIntPositive+0x28>
    *inOutIdx = idx + (word32)length;
 8012b8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012b8e:	4413      	add	r3, r2
 8012b90:	603b      	str	r3, [r7, #0]
    return 0;
 8012b92:	e7d9      	b.n	8012b48 <GetIntPositive+0x2c>

08012b94 <GetMyVersion>:
{
 8012b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b96:	4614      	mov	r4, r2
    word32 idx = *inOutIdx;
 8012b98:	680a      	ldr	r2, [r1, #0]
 8012b9a:	9201      	str	r2, [sp, #4]
    if ((idx + MIN_VERSION_SZ) > maxIdx)
 8012b9c:	3203      	adds	r2, #3
 8012b9e:	429a      	cmp	r2, r3
{
 8012ba0:	4606      	mov	r6, r0
 8012ba2:	460d      	mov	r5, r1
    if ((idx + MIN_VERSION_SZ) > maxIdx)
 8012ba4:	d903      	bls.n	8012bae <GetMyVersion+0x1a>
        return ASN_PARSE_E;
 8012ba6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8012baa:	b002      	add	sp, #8
 8012bac:	bd70      	pop	{r4, r5, r6, pc}
    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 8012bae:	f10d 0203 	add.w	r2, sp, #3
 8012bb2:	a901      	add	r1, sp, #4
 8012bb4:	f7ff ff25 	bl	8012a02 <GetASNTag>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d1f4      	bne.n	8012ba6 <GetMyVersion+0x12>
    if (tag != ASN_INTEGER)
 8012bbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012bc0:	2b02      	cmp	r3, #2
 8012bc2:	d1f0      	bne.n	8012ba6 <GetMyVersion+0x12>
    if (input[idx++] != 0x01)
 8012bc4:	9b01      	ldr	r3, [sp, #4]
 8012bc6:	5cf1      	ldrb	r1, [r6, r3]
 8012bc8:	1c5a      	adds	r2, r3, #1
 8012bca:	2901      	cmp	r1, #1
    *version  = input[idx++];
 8012bcc:	bf01      	itttt	eq
 8012bce:	5cb2      	ldrbeq	r2, [r6, r2]
 8012bd0:	6022      	streq	r2, [r4, #0]
 8012bd2:	3302      	addeq	r3, #2
    *inOutIdx = idx;
 8012bd4:	602b      	streq	r3, [r5, #0]
    return *version;
 8012bd6:	bf0c      	ite	eq
 8012bd8:	6820      	ldreq	r0, [r4, #0]
        return ASN_VERSION_E;
 8012bda:	f06f 008c 	mvnne.w	r0, #140	; 0x8c
 8012bde:	e7e4      	b.n	8012baa <GetMyVersion+0x16>

08012be0 <CheckBitString>:
{
 8012be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012be4:	4616      	mov	r6, r2
    word32 idx = *inOutIdx;
 8012be6:	680a      	ldr	r2, [r1, #0]
 8012be8:	9202      	str	r2, [sp, #8]
{
 8012bea:	4688      	mov	r8, r1
    if (GetASNTag(input, &idx, &b, maxIdx) != 0) {
 8012bec:	f10d 0207 	add.w	r2, sp, #7
 8012bf0:	a902      	add	r1, sp, #8
{
 8012bf2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	469a      	mov	sl, r3
    if (GetASNTag(input, &idx, &b, maxIdx) != 0) {
 8012bfa:	f7ff ff02 	bl	8012a02 <GetASNTag>
 8012bfe:	4604      	mov	r4, r0
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d138      	bne.n	8012c76 <CheckBitString+0x96>
    if (b != ASN_BIT_STRING) {
 8012c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c08:	2b03      	cmp	r3, #3
 8012c0a:	d134      	bne.n	8012c76 <CheckBitString+0x96>
    if (GetLength(input, &idx, &length, maxIdx) < 0)
 8012c0c:	4653      	mov	r3, sl
 8012c0e:	aa03      	add	r2, sp, #12
 8012c10:	4628      	mov	r0, r5
 8012c12:	f7ff fead 	bl	8012970 <GetLength>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	da05      	bge.n	8012c26 <CheckBitString+0x46>
        return ASN_PARSE_E;
 8012c1a:	f06f 048b 	mvn.w	r4, #139	; 0x8b
}
 8012c1e:	4620      	mov	r0, r4
 8012c20:	b004      	add	sp, #16
 8012c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (length <= 0) {
 8012c26:	9a03      	ldr	r2, [sp, #12]
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	dd27      	ble.n	8012c7c <CheckBitString+0x9c>
    if (idx + 1 > maxIdx) {
 8012c2c:	9902      	ldr	r1, [sp, #8]
 8012c2e:	1c48      	adds	r0, r1, #1
 8012c30:	4550      	cmp	r0, sl
 8012c32:	d823      	bhi.n	8012c7c <CheckBitString+0x9c>
    if (zeroBits && b != 0x00)
 8012c34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b = input[idx];
 8012c36:	5c6b      	ldrb	r3, [r5, r1]
 8012c38:	f88d 3007 	strb.w	r3, [sp, #7]
    if (zeroBits && b != 0x00)
 8012c3c:	b11f      	cbz	r7, 8012c46 <CheckBitString+0x66>
 8012c3e:	b17b      	cbz	r3, 8012c60 <CheckBitString+0x80>
        return ASN_EXPECT_0_E;
 8012c40:	f06f 0491 	mvn.w	r4, #145	; 0x91
 8012c44:	e7eb      	b.n	8012c1e <CheckBitString+0x3e>
    if (b >= 0x08)
 8012c46:	2b07      	cmp	r3, #7
 8012c48:	d8e7      	bhi.n	8012c1a <CheckBitString+0x3a>
    if (b != 0) {
 8012c4a:	b14b      	cbz	r3, 8012c60 <CheckBitString+0x80>
        if ((byte)(input[idx + (word32)length - 1] << (8 - b)) != 0)
 8012c4c:	4415      	add	r5, r2
 8012c4e:	440d      	add	r5, r1
 8012c50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012c54:	f1c3 0508 	rsb	r5, r3, #8
 8012c58:	40a9      	lsls	r1, r5
 8012c5a:	b2c9      	uxtb	r1, r1
 8012c5c:	2900      	cmp	r1, #0
 8012c5e:	d1dc      	bne.n	8012c1a <CheckBitString+0x3a>
    *inOutIdx = idx;
 8012c60:	f8c8 0000 	str.w	r0, [r8]
    if (len != NULL)
 8012c64:	b10e      	cbz	r6, 8012c6a <CheckBitString+0x8a>
    length--; /* length has been checked for greater than 0 */
 8012c66:	3a01      	subs	r2, #1
        *len = length;
 8012c68:	6032      	str	r2, [r6, #0]
    if (unusedBits != NULL)
 8012c6a:	f1b9 0f00 	cmp.w	r9, #0
 8012c6e:	d0d6      	beq.n	8012c1e <CheckBitString+0x3e>
        *unusedBits = b;
 8012c70:	f889 3000 	strb.w	r3, [r9]
 8012c74:	e7d3      	b.n	8012c1e <CheckBitString+0x3e>
        return ASN_BITSTR_E;
 8012c76:	f06f 0492 	mvn.w	r4, #146	; 0x92
 8012c7a:	e7d0      	b.n	8012c1e <CheckBitString+0x3e>
        return BUFFER_E;
 8012c7c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 8012c80:	e7cd      	b.n	8012c1e <CheckBitString+0x3e>
	...

08012c84 <OidFromId>:
{
 8012c84:	b507      	push	{r0, r1, r2, lr}
    const byte* oid = NULL;
 8012c86:	2300      	movs	r3, #0
 8012c88:	9301      	str	r3, [sp, #4]
    *oidSz = 0;
 8012c8a:	6013      	str	r3, [r2, #0]
    switch (type) {
 8012c8c:	290f      	cmp	r1, #15
 8012c8e:	d836      	bhi.n	8012cfe <OidFromId+0x7a>
 8012c90:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012c94:	002b0010 	.word	0x002b0010
 8012c98:	005b004c 	.word	0x005b004c
 8012c9c:	0035005f 	.word	0x0035005f
 8012ca0:	00dd0088 	.word	0x00dd0088
 8012ca4:	00ed00e6 	.word	0x00ed00e6
 8012ca8:	012100f2 	.word	0x012100f2
 8012cac:	01ba0144 	.word	0x01ba0144
 8012cb0:	01ca0127 	.word	0x01ca0127
            switch (id) {
 8012cb4:	2858      	cmp	r0, #88	; 0x58
 8012cb6:	d00a      	beq.n	8012cce <OidFromId+0x4a>
 8012cb8:	f5a0 70cf 	sub.w	r0, r0, #414	; 0x19e
 8012cbc:	2805      	cmp	r0, #5
 8012cbe:	d81e      	bhi.n	8012cfe <OidFromId+0x7a>
 8012cc0:	2805      	cmp	r0, #5
 8012cc2:	d81c      	bhi.n	8012cfe <OidFromId+0x7a>
 8012cc4:	e8df f000 	tbb	[pc, r0]
 8012cc8:	1b0f1b07 	.word	0x1b0f1b07
 8012ccc:	0d0b      	.short	0x0d0b
                    oid = hashSha1hOid;
 8012cce:	4b9d      	ldr	r3, [pc, #628]	; (8012f44 <OidFromId+0x2c0>)
                    oid = blkDesCbcOid;
 8012cd0:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(blkDesCbcOid);
 8012cd2:	2305      	movs	r3, #5
 8012cd4:	e020      	b.n	8012d18 <OidFromId+0x94>
                    oid = hashSha256hOid;
 8012cd6:	4b9c      	ldr	r3, [pc, #624]	; (8012f48 <OidFromId+0x2c4>)
                    oid = blkAes128CbcOid;
 8012cd8:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(blkAes128CbcOid);
 8012cda:	2309      	movs	r3, #9
 8012cdc:	e01c      	b.n	8012d18 <OidFromId+0x94>
                    oid = hashSha512_224hOid;
 8012cde:	4b9b      	ldr	r3, [pc, #620]	; (8012f4c <OidFromId+0x2c8>)
 8012ce0:	e7fa      	b.n	8012cd8 <OidFromId+0x54>
                    oid = hashSha512_256hOid;
 8012ce2:	4b9b      	ldr	r3, [pc, #620]	; (8012f50 <OidFromId+0x2cc>)
 8012ce4:	e7f8      	b.n	8012cd8 <OidFromId+0x54>
                    oid = hashSha512hOid;
 8012ce6:	4b9b      	ldr	r3, [pc, #620]	; (8012f54 <OidFromId+0x2d0>)
 8012ce8:	e7f6      	b.n	8012cd8 <OidFromId+0x54>
            switch (id) {
 8012cea:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 8012cee:	d015      	beq.n	8012d1c <OidFromId+0x98>
 8012cf0:	d809      	bhi.n	8012d06 <OidFromId+0x82>
 8012cf2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012cf6:	d015      	beq.n	8012d24 <OidFromId+0xa0>
 8012cf8:	f5b0 7f02 	cmp.w	r0, #520	; 0x208
 8012cfc:	d009      	beq.n	8012d12 <OidFromId+0x8e>
}
 8012cfe:	9801      	ldr	r0, [sp, #4]
 8012d00:	b003      	add	sp, #12
 8012d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d06:	f240 230e 	movw	r3, #526	; 0x20e
 8012d0a:	4298      	cmp	r0, r3
 8012d0c:	d1f7      	bne.n	8012cfe <OidFromId+0x7a>
                    oid = sigSha512wEcdsaOid;
 8012d0e:	4b92      	ldr	r3, [pc, #584]	; (8012f58 <OidFromId+0x2d4>)
 8012d10:	e005      	b.n	8012d1e <OidFromId+0x9a>
                    oid = sigSha1wEcdsaOid;
 8012d12:	4b92      	ldr	r3, [pc, #584]	; (8012f5c <OidFromId+0x2d8>)
                    oid = keyEcdsaOid;
 8012d14:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(keyEcdsaOid);
 8012d16:	2307      	movs	r3, #7
                    *oidSz = sizeof(hmacSha512Oid);
 8012d18:	6013      	str	r3, [r2, #0]
                    break;
 8012d1a:	e7f0      	b.n	8012cfe <OidFromId+0x7a>
                    oid = sigSha256wEcdsaOid;
 8012d1c:	4b90      	ldr	r3, [pc, #576]	; (8012f60 <OidFromId+0x2dc>)
                    oid = hmacSha512Oid;
 8012d1e:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(hmacSha512Oid);
 8012d20:	2308      	movs	r3, #8
 8012d22:	e7f9      	b.n	8012d18 <OidFromId+0x94>
                    oid = sigEd25519Oid;
 8012d24:	4b8f      	ldr	r3, [pc, #572]	; (8012f64 <OidFromId+0x2e0>)
                    oid = keyCurve25519Oid;
 8012d26:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(keyCurve25519Oid);
 8012d28:	2303      	movs	r3, #3
 8012d2a:	e7f5      	b.n	8012d18 <OidFromId+0x94>
            switch (id) {
 8012d2c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012d30:	d009      	beq.n	8012d46 <OidFromId+0xc2>
 8012d32:	f240 2306 	movw	r3, #518	; 0x206
 8012d36:	4298      	cmp	r0, r3
 8012d38:	d003      	beq.n	8012d42 <OidFromId+0xbe>
 8012d3a:	28fe      	cmp	r0, #254	; 0xfe
 8012d3c:	d1df      	bne.n	8012cfe <OidFromId+0x7a>
                    oid = keyCurve25519Oid;
 8012d3e:	4b8a      	ldr	r3, [pc, #552]	; (8012f68 <OidFromId+0x2e4>)
 8012d40:	e7f1      	b.n	8012d26 <OidFromId+0xa2>
                    oid = keyEcdsaOid;
 8012d42:	4b8a      	ldr	r3, [pc, #552]	; (8012f6c <OidFromId+0x2e8>)
 8012d44:	e7e6      	b.n	8012d14 <OidFromId+0x90>
                    oid = keyEd25519Oid;
 8012d46:	4b8a      	ldr	r3, [pc, #552]	; (8012f70 <OidFromId+0x2ec>)
 8012d48:	e7ed      	b.n	8012d26 <OidFromId+0xa2>
            if (wc_ecc_get_oid(id, &oid, oidSz) < 0) {
 8012d4a:	a901      	add	r1, sp, #4
 8012d4c:	f7fb fc24 	bl	800e598 <wc_ecc_get_oid>
            break;
 8012d50:	e7d5      	b.n	8012cfe <OidFromId+0x7a>
            switch (id) {
 8012d52:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
 8012d56:	d01d      	beq.n	8012d94 <OidFromId+0x110>
 8012d58:	d80f      	bhi.n	8012d7a <OidFromId+0xf6>
 8012d5a:	f5b0 7fd1 	cmp.w	r0, #418	; 0x1a2
 8012d5e:	d017      	beq.n	8012d90 <OidFromId+0x10c>
 8012d60:	d806      	bhi.n	8012d70 <OidFromId+0xec>
 8012d62:	2845      	cmp	r0, #69	; 0x45
 8012d64:	d01a      	beq.n	8012d9c <OidFromId+0x118>
 8012d66:	f5b0 7fcf 	cmp.w	r0, #414	; 0x19e
 8012d6a:	d1c8      	bne.n	8012cfe <OidFromId+0x7a>
                    oid = blkAes128CbcOid;
 8012d6c:	4b81      	ldr	r3, [pc, #516]	; (8012f74 <OidFromId+0x2f0>)
 8012d6e:	e7b3      	b.n	8012cd8 <OidFromId+0x54>
 8012d70:	f5b0 7fd9 	cmp.w	r0, #434	; 0x1b2
 8012d74:	d1c3      	bne.n	8012cfe <OidFromId+0x7a>
                    oid = blkAes192CbcOid;
 8012d76:	4b80      	ldr	r3, [pc, #512]	; (8012f78 <OidFromId+0x2f4>)
 8012d78:	e7ae      	b.n	8012cd8 <OidFromId+0x54>
 8012d7a:	f5b0 7fe5 	cmp.w	r0, #458	; 0x1ca
 8012d7e:	d00b      	beq.n	8012d98 <OidFromId+0x114>
 8012d80:	f5b0 7f23 	cmp.w	r0, #652	; 0x28c
 8012d84:	d00c      	beq.n	8012da0 <OidFromId+0x11c>
 8012d86:	f5b0 7fe3 	cmp.w	r0, #454	; 0x1c6
 8012d8a:	d1b8      	bne.n	8012cfe <OidFromId+0x7a>
                    oid = blkAes256CbcOid;
 8012d8c:	4b7b      	ldr	r3, [pc, #492]	; (8012f7c <OidFromId+0x2f8>)
 8012d8e:	e7a3      	b.n	8012cd8 <OidFromId+0x54>
                    oid = blkAes128GcmOid;
 8012d90:	4b7b      	ldr	r3, [pc, #492]	; (8012f80 <OidFromId+0x2fc>)
 8012d92:	e7a1      	b.n	8012cd8 <OidFromId+0x54>
                    oid = blkAes192GcmOid;
 8012d94:	4b7b      	ldr	r3, [pc, #492]	; (8012f84 <OidFromId+0x300>)
 8012d96:	e79f      	b.n	8012cd8 <OidFromId+0x54>
                    oid = blkAes256GcmOid;
 8012d98:	4b7b      	ldr	r3, [pc, #492]	; (8012f88 <OidFromId+0x304>)
 8012d9a:	e79d      	b.n	8012cd8 <OidFromId+0x54>
                    oid = blkDesCbcOid;
 8012d9c:	4b7b      	ldr	r3, [pc, #492]	; (8012f8c <OidFromId+0x308>)
 8012d9e:	e797      	b.n	8012cd0 <OidFromId+0x4c>
                    oid = blkDes3CbcOid;
 8012da0:	4b7b      	ldr	r3, [pc, #492]	; (8012f90 <OidFromId+0x30c>)
 8012da2:	e7bc      	b.n	8012d1e <OidFromId+0x9a>
            switch (id) {
 8012da4:	2897      	cmp	r0, #151	; 0x97
 8012da6:	d83b      	bhi.n	8012e20 <OidFromId+0x19c>
 8012da8:	287f      	cmp	r0, #127	; 0x7f
 8012daa:	d803      	bhi.n	8012db4 <OidFromId+0x130>
 8012dac:	2845      	cmp	r0, #69	; 0x45
 8012dae:	d1a6      	bne.n	8012cfe <OidFromId+0x7a>
                    oid = extAuthInfoOid;
 8012db0:	4b78      	ldr	r3, [pc, #480]	; (8012f94 <OidFromId+0x310>)
 8012db2:	e7b4      	b.n	8012d1e <OidFromId+0x9a>
 8012db4:	3880      	subs	r0, #128	; 0x80
 8012db6:	2817      	cmp	r0, #23
 8012db8:	d8a1      	bhi.n	8012cfe <OidFromId+0x7a>
 8012dba:	a301      	add	r3, pc, #4	; (adr r3, 8012dc0 <OidFromId+0x13c>)
 8012dbc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8012dc0:	08012e3b 	.word	0x08012e3b
 8012dc4:	08012e43 	.word	0x08012e43
 8012dc8:	08012cff 	.word	0x08012cff
 8012dcc:	08012e2f 	.word	0x08012e2f
 8012dd0:	08012cff 	.word	0x08012cff
 8012dd4:	08012e2b 	.word	0x08012e2b
 8012dd8:	08012cff 	.word	0x08012cff
 8012ddc:	08012cff 	.word	0x08012cff
 8012de0:	08012cff 	.word	0x08012cff
 8012de4:	08012cff 	.word	0x08012cff
 8012de8:	08012cff 	.word	0x08012cff
 8012dec:	08012cff 	.word	0x08012cff
 8012df0:	08012cff 	.word	0x08012cff
 8012df4:	08012cff 	.word	0x08012cff
 8012df8:	08012cff 	.word	0x08012cff
 8012dfc:	08012cff 	.word	0x08012cff
 8012e00:	08012e4b 	.word	0x08012e4b
 8012e04:	08012e33 	.word	0x08012e33
 8012e08:	08012e3f 	.word	0x08012e3f
 8012e0c:	08012cff 	.word	0x08012cff
 8012e10:	08012cff 	.word	0x08012cff
 8012e14:	08012e37 	.word	0x08012e37
 8012e18:	08012cff 	.word	0x08012cff
 8012e1c:	08012e47 	.word	0x08012e47
 8012e20:	28a8      	cmp	r0, #168	; 0xa8
 8012e22:	f47f af6c 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = extInhibitAnyOid;
 8012e26:	4b5c      	ldr	r3, [pc, #368]	; (8012f98 <OidFromId+0x314>)
 8012e28:	e77d      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extBasicCaOid;
 8012e2a:	4b5c      	ldr	r3, [pc, #368]	; (8012f9c <OidFromId+0x318>)
 8012e2c:	e77b      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extAltNamesOid;
 8012e2e:	4b5c      	ldr	r3, [pc, #368]	; (8012fa0 <OidFromId+0x31c>)
 8012e30:	e779      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extCrlDistOid;
 8012e32:	4b5c      	ldr	r3, [pc, #368]	; (8012fa4 <OidFromId+0x320>)
 8012e34:	e777      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extAuthKeyOid;
 8012e36:	4b5c      	ldr	r3, [pc, #368]	; (8012fa8 <OidFromId+0x324>)
 8012e38:	e775      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extSubjKeyOid;
 8012e3a:	4b5c      	ldr	r3, [pc, #368]	; (8012fac <OidFromId+0x328>)
 8012e3c:	e773      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extCertPolicyOid;
 8012e3e:	4b5c      	ldr	r3, [pc, #368]	; (8012fb0 <OidFromId+0x32c>)
 8012e40:	e771      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extKeyUsageOid;
 8012e42:	4b5c      	ldr	r3, [pc, #368]	; (8012fb4 <OidFromId+0x330>)
 8012e44:	e76f      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extExtKeyUsageOid;
 8012e46:	4b5c      	ldr	r3, [pc, #368]	; (8012fb8 <OidFromId+0x334>)
 8012e48:	e76d      	b.n	8012d26 <OidFromId+0xa2>
                    oid = extNameConsOid;
 8012e4a:	4b5c      	ldr	r3, [pc, #368]	; (8012fbc <OidFromId+0x338>)
 8012e4c:	e76b      	b.n	8012d26 <OidFromId+0xa2>
            switch (id) {
 8012e4e:	2874      	cmp	r0, #116	; 0x74
 8012e50:	d004      	beq.n	8012e5c <OidFromId+0x1d8>
 8012e52:	2875      	cmp	r0, #117	; 0x75
 8012e54:	f47f af53 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = extAuthInfoCaIssuerOid;
 8012e58:	4b59      	ldr	r3, [pc, #356]	; (8012fc0 <OidFromId+0x33c>)
 8012e5a:	e760      	b.n	8012d1e <OidFromId+0x9a>
                    oid = extAuthInfoOcspOid;
 8012e5c:	4b59      	ldr	r3, [pc, #356]	; (8012fc4 <OidFromId+0x340>)
 8012e5e:	e75e      	b.n	8012d1e <OidFromId+0x9a>
            switch (id) {
 8012e60:	2892      	cmp	r0, #146	; 0x92
 8012e62:	f47f af4c 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = extCertPolicyAnyOid;
 8012e66:	4b58      	ldr	r3, [pc, #352]	; (8012fc8 <OidFromId+0x344>)
                    oid = extExtKeyUsageAnyOid;
 8012e68:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(extExtKeyUsageAnyOid);
 8012e6a:	2304      	movs	r3, #4
 8012e6c:	e754      	b.n	8012d18 <OidFromId+0x94>
            switch (id) {
 8012e6e:	284f      	cmp	r0, #79	; 0x4f
 8012e70:	f47f af45 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = extAltNamesHwNameOid;
 8012e74:	4b55      	ldr	r3, [pc, #340]	; (8012fcc <OidFromId+0x348>)
 8012e76:	e752      	b.n	8012d1e <OidFromId+0x9a>
            switch (id) {
 8012e78:	284f      	cmp	r0, #79	; 0x4f
 8012e7a:	d81b      	bhi.n	8012eb4 <OidFromId+0x230>
 8012e7c:	2846      	cmp	r0, #70	; 0x46
 8012e7e:	f67f af3e 	bls.w	8012cfe <OidFromId+0x7a>
 8012e82:	3847      	subs	r0, #71	; 0x47
 8012e84:	2808      	cmp	r0, #8
 8012e86:	f63f af3a 	bhi.w	8012cfe <OidFromId+0x7a>
 8012e8a:	a301      	add	r3, pc, #4	; (adr r3, 8012e90 <OidFromId+0x20c>)
 8012e8c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8012e90:	08012ebf 	.word	0x08012ebf
 8012e94:	08012ec3 	.word	0x08012ec3
 8012e98:	08012ec7 	.word	0x08012ec7
 8012e9c:	08012ecb 	.word	0x08012ecb
 8012ea0:	08012cff 	.word	0x08012cff
 8012ea4:	08012cff 	.word	0x08012cff
 8012ea8:	08012cff 	.word	0x08012cff
 8012eac:	08012ecf 	.word	0x08012ecf
 8012eb0:	08012ed3 	.word	0x08012ed3
 8012eb4:	2897      	cmp	r0, #151	; 0x97
 8012eb6:	f47f af22 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = extExtKeyUsageAnyOid;
 8012eba:	4b45      	ldr	r3, [pc, #276]	; (8012fd0 <OidFromId+0x34c>)
 8012ebc:	e7d4      	b.n	8012e68 <OidFromId+0x1e4>
                    oid = extExtKeyUsageServerAuthOid;
 8012ebe:	4b45      	ldr	r3, [pc, #276]	; (8012fd4 <OidFromId+0x350>)
 8012ec0:	e72d      	b.n	8012d1e <OidFromId+0x9a>
                    oid = extExtKeyUsageClientAuthOid;
 8012ec2:	4b45      	ldr	r3, [pc, #276]	; (8012fd8 <OidFromId+0x354>)
 8012ec4:	e72b      	b.n	8012d1e <OidFromId+0x9a>
                    oid = extExtKeyUsageCodeSigningOid;
 8012ec6:	4b45      	ldr	r3, [pc, #276]	; (8012fdc <OidFromId+0x358>)
 8012ec8:	e729      	b.n	8012d1e <OidFromId+0x9a>
                    oid = extExtKeyUsageEmailProtectOid;
 8012eca:	4b45      	ldr	r3, [pc, #276]	; (8012fe0 <OidFromId+0x35c>)
 8012ecc:	e727      	b.n	8012d1e <OidFromId+0x9a>
                    oid = extExtKeyUsageTimestampOid;
 8012ece:	4b45      	ldr	r3, [pc, #276]	; (8012fe4 <OidFromId+0x360>)
 8012ed0:	e725      	b.n	8012d1e <OidFromId+0x9a>
                    oid = extExtKeyUsageOcspSignOid;
 8012ed2:	4b45      	ldr	r3, [pc, #276]	; (8012fe8 <OidFromId+0x364>)
 8012ed4:	e723      	b.n	8012d1e <OidFromId+0x9a>
            switch (id) {
 8012ed6:	f5b0 7f25 	cmp.w	r0, #660	; 0x294
 8012eda:	f47f af10 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = pbkdf2Oid;
 8012ede:	4b43      	ldr	r3, [pc, #268]	; (8012fec <OidFromId+0x368>)
 8012ee0:	e6fa      	b.n	8012cd8 <OidFromId+0x54>
            switch (id) {
 8012ee2:	f240 2392 	movw	r3, #658	; 0x292
 8012ee6:	4298      	cmp	r0, r3
 8012ee8:	d007      	beq.n	8012efa <OidFromId+0x276>
 8012eea:	d808      	bhi.n	8012efe <OidFromId+0x27a>
 8012eec:	2803      	cmp	r0, #3
 8012eee:	d011      	beq.n	8012f14 <OidFromId+0x290>
 8012ef0:	280d      	cmp	r0, #13
 8012ef2:	d00d      	beq.n	8012f10 <OidFromId+0x28c>
 8012ef4:	2802      	cmp	r0, #2
 8012ef6:	f47f af02 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = pbeSha1Des;
 8012efa:	4b3d      	ldr	r3, [pc, #244]	; (8012ff0 <OidFromId+0x36c>)
 8012efc:	e6ec      	b.n	8012cd8 <OidFromId+0x54>
 8012efe:	f240 2393 	movw	r3, #659	; 0x293
 8012f02:	4298      	cmp	r0, r3
 8012f04:	d006      	beq.n	8012f14 <OidFromId+0x290>
 8012f06:	f240 2395 	movw	r3, #661	; 0x295
 8012f0a:	4298      	cmp	r0, r3
 8012f0c:	f47f aef7 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = pbes2;
 8012f10:	4b38      	ldr	r3, [pc, #224]	; (8012ff4 <OidFromId+0x370>)
 8012f12:	e6e1      	b.n	8012cd8 <OidFromId+0x54>
                    oid = pbeSha1Des3;
 8012f14:	4b38      	ldr	r3, [pc, #224]	; (8012ff8 <OidFromId+0x374>)
 8012f16:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(pbeSha1Des3);
 8012f18:	230a      	movs	r3, #10
 8012f1a:	e6fd      	b.n	8012d18 <OidFromId+0x94>
            switch (id) {
 8012f1c:	f240 13b5 	movw	r3, #437	; 0x1b5
 8012f20:	4298      	cmp	r0, r3
 8012f22:	d00a      	beq.n	8012f3a <OidFromId+0x2b6>
 8012f24:	f240 13c9 	movw	r3, #457	; 0x1c9
 8012f28:	4298      	cmp	r0, r3
 8012f2a:	d008      	beq.n	8012f3e <OidFromId+0x2ba>
 8012f2c:	f240 13a1 	movw	r3, #417	; 0x1a1
 8012f30:	4298      	cmp	r0, r3
 8012f32:	f47f aee4 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = wrapAes128Oid;
 8012f36:	4b31      	ldr	r3, [pc, #196]	; (8012ffc <OidFromId+0x378>)
 8012f38:	e6ce      	b.n	8012cd8 <OidFromId+0x54>
                    oid = wrapAes192Oid;
 8012f3a:	4b31      	ldr	r3, [pc, #196]	; (8013000 <OidFromId+0x37c>)
 8012f3c:	e6cc      	b.n	8012cd8 <OidFromId+0x54>
                    oid = wrapAes256Oid;
 8012f3e:	4b31      	ldr	r3, [pc, #196]	; (8013004 <OidFromId+0x380>)
 8012f40:	e6ca      	b.n	8012cd8 <OidFromId+0x54>
 8012f42:	bf00      	nop
 8012f44:	08022cd0 	.word	0x08022cd0
 8012f48:	08022cd5 	.word	0x08022cd5
 8012f4c:	08022cde 	.word	0x08022cde
 8012f50:	08022ce7 	.word	0x08022ce7
 8012f54:	08022cf0 	.word	0x08022cf0
 8012f58:	08022d63 	.word	0x08022d63
 8012f5c:	08022d54 	.word	0x08022d54
 8012f60:	08022d5b 	.word	0x08022d5b
 8012f64:	08022d51 	.word	0x08022d51
 8012f68:	08022d09 	.word	0x08022d09
 8012f6c:	08022d0c 	.word	0x08022d0c
 8012f70:	08022d13 	.word	0x08022d13
 8012f74:	08022c02 	.word	0x08022c02
 8012f78:	08022c14 	.word	0x08022c14
 8012f7c:	08022c26 	.word	0x08022c26
 8012f80:	08022c0b 	.word	0x08022c0b
 8012f84:	08022c1d 	.word	0x08022c1d
 8012f88:	08022c2f 	.word	0x08022c2f
 8012f8c:	08022c40 	.word	0x08022c40
 8012f90:	08022c38 	.word	0x08022c38
 8012f94:	08022c75 	.word	0x08022c75
 8012f98:	08022cc4 	.word	0x08022cc4
 8012f9c:	08022c80 	.word	0x08022c80
 8012fa0:	08022c62 	.word	0x08022c62
 8012fa4:	08022c8a 	.word	0x08022c8a
 8012fa8:	08022c7d 	.word	0x08022c7d
 8012fac:	08022ccd 	.word	0x08022ccd
 8012fb0:	08022c87 	.word	0x08022c87
 8012fb4:	08022cc7 	.word	0x08022cc7
 8012fb8:	08022cb1 	.word	0x08022cb1
 8012fbc:	08022cca 	.word	0x08022cca
 8012fc0:	08022c65 	.word	0x08022c65
 8012fc4:	08022c6d 	.word	0x08022c6d
 8012fc8:	08022c83 	.word	0x08022c83
 8012fcc:	08022c5a 	.word	0x08022c5a
 8012fd0:	08022c8d 	.word	0x08022c8d
 8012fd4:	08022cb4 	.word	0x08022cb4
 8012fd8:	08022c91 	.word	0x08022c91
 8012fdc:	08022c99 	.word	0x08022c99
 8012fe0:	08022ca1 	.word	0x08022ca1
 8012fe4:	08022cbc 	.word	0x08022cbc
 8012fe8:	08022ca9 	.word	0x08022ca9
 8012fec:	08022d48 	.word	0x08022d48
 8012ff0:	08022d2c 	.word	0x08022d2c
 8012ff4:	08022d3f 	.word	0x08022d3f
 8012ff8:	08022d35 	.word	0x08022d35
 8012ffc:	08022d6b 	.word	0x08022d6b
 8013000:	08022d74 	.word	0x08022d74
 8013004:	08022d7d 	.word	0x08022d7d
            switch (id) {
 8013008:	28bf      	cmp	r0, #191	; 0xbf
 801300a:	d00b      	beq.n	8013024 <OidFromId+0x3a0>
 801300c:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 8013010:	d006      	beq.n	8013020 <OidFromId+0x39c>
 8013012:	28bd      	cmp	r0, #189	; 0xbd
 8013014:	f47f ae73 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = dhSinglePass_stdDH_sha256kdf_Oid;
 8013018:	4b0a      	ldr	r3, [pc, #40]	; (8013044 <OidFromId+0x3c0>)
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
 801301a:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
 801301c:	2306      	movs	r3, #6
 801301e:	e67b      	b.n	8012d18 <OidFromId+0x94>
                    oid = dhSinglePass_stdDH_sha1kdf_Oid;
 8013020:	4b09      	ldr	r3, [pc, #36]	; (8013048 <OidFromId+0x3c4>)
 8013022:	e659      	b.n	8012cd8 <OidFromId+0x54>
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
 8013024:	4b09      	ldr	r3, [pc, #36]	; (801304c <OidFromId+0x3c8>)
 8013026:	e7f8      	b.n	801301a <OidFromId+0x396>
            switch (id) {
 8013028:	f240 238d 	movw	r3, #653	; 0x28d
 801302c:	4298      	cmp	r0, r3
 801302e:	d006      	beq.n	801303e <OidFromId+0x3ba>
 8013030:	f240 238f 	movw	r3, #655	; 0x28f
 8013034:	4298      	cmp	r0, r3
 8013036:	f47f ae62 	bne.w	8012cfe <OidFromId+0x7a>
                    oid = hmacSha512Oid;
 801303a:	4b05      	ldr	r3, [pc, #20]	; (8013050 <OidFromId+0x3cc>)
 801303c:	e66f      	b.n	8012d1e <OidFromId+0x9a>
                    oid = hmacSha256Oid;
 801303e:	4b05      	ldr	r3, [pc, #20]	; (8013054 <OidFromId+0x3d0>)
 8013040:	e66d      	b.n	8012d1e <OidFromId+0x9a>
 8013042:	bf00      	nop
 8013044:	08022c4e 	.word	0x08022c4e
 8013048:	08022c45 	.word	0x08022c45
 801304c:	08022c54 	.word	0x08022c54
 8013050:	08022d01 	.word	0x08022d01
 8013054:	08022cf9 	.word	0x08022cf9

08013058 <GetASNObjectId>:
{
 8013058:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 801305a:	2401      	movs	r4, #1
 801305c:	e9cd 3400 	strd	r3, r4, [sp]
 8013060:	4613      	mov	r3, r2
 8013062:	460a      	mov	r2, r1
 8013064:	2106      	movs	r1, #6
 8013066:	f7ff fcdf 	bl	8012a28 <GetASNHeader_ex>
}
 801306a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 801306e:	b002      	add	sp, #8
 8013070:	bd10      	pop	{r4, pc}

08013072 <SkipObjectId>:
{
 8013072:	b513      	push	{r0, r1, r4, lr}
 8013074:	4613      	mov	r3, r2
    word32 idx = *inOutIdx;
 8013076:	680a      	ldr	r2, [r1, #0]
 8013078:	9200      	str	r2, [sp, #0]
{
 801307a:	460c      	mov	r4, r1
    ret = GetASNObjectId(input, &idx, &length, maxIdx);
 801307c:	aa01      	add	r2, sp, #4
 801307e:	4669      	mov	r1, sp
 8013080:	f7ff ffea 	bl	8013058 <GetASNObjectId>
    if (ret != 0)
 8013084:	b918      	cbnz	r0, 801308e <SkipObjectId+0x1c>
    idx += (word32)length;
 8013086:	e9dd 3200 	ldrd	r3, r2, [sp]
 801308a:	4413      	add	r3, r2
    *inOutIdx = idx;
 801308c:	6023      	str	r3, [r4, #0]
}
 801308e:	b002      	add	sp, #8
 8013090:	bd10      	pop	{r4, pc}

08013092 <GetObjectId>:
{
 8013092:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013096:	4615      	mov	r5, r2
 8013098:	461f      	mov	r7, r3
    ret = GetASNObjectId(input, inOutIdx, &length, maxIdx);
 801309a:	466a      	mov	r2, sp
 801309c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 801309e:	4606      	mov	r6, r0
 80130a0:	4688      	mov	r8, r1
    ret = GetASNObjectId(input, inOutIdx, &length, maxIdx);
 80130a2:	f7ff ffd9 	bl	8013058 <GetASNObjectId>
    if (ret != 0)
 80130a6:	4604      	mov	r4, r0
 80130a8:	bb00      	cbnz	r0, 80130ec <GetObjectId+0x5a>
    word32 idx = *inOutIdx;
 80130aa:	f8d8 2000 	ldr.w	r2, [r8]
    return GetOID(input, inOutIdx, oid, oidType, length);
 80130ae:	f8dd 9000 	ldr.w	r9, [sp]
    *oid = 0;
 80130b2:	6028      	str	r0, [r5, #0]
    while (length--) {
 80130b4:	eb06 0a02 	add.w	sl, r6, r2
 80130b8:	444a      	add	r2, r9
 80130ba:	4651      	mov	r1, sl
 80130bc:	4416      	add	r6, r2
 80130be:	42b1      	cmp	r1, r6
 80130c0:	d118      	bne.n	80130f4 <GetObjectId+0x62>
    if (oidType != oidIgnoreType) {
 80130c2:	2f15      	cmp	r7, #21
    *inOutIdx = idx;
 80130c4:	f8c8 2000 	str.w	r2, [r8]
    if (oidType != oidIgnoreType) {
 80130c8:	d010      	beq.n	80130ec <GetObjectId+0x5a>
        checkOid = OidFromId(*oid, oidType, &checkOidSz);
 80130ca:	4639      	mov	r1, r7
 80130cc:	6828      	ldr	r0, [r5, #0]
 80130ce:	aa01      	add	r2, sp, #4
 80130d0:	f7ff fdd8 	bl	8012c84 <OidFromId>
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 80130d4:	4601      	mov	r1, r0
 80130d6:	b148      	cbz	r0, 80130ec <GetObjectId+0x5a>
 80130d8:	9b01      	ldr	r3, [sp, #4]
 80130da:	454b      	cmp	r3, r9
 80130dc:	d104      	bne.n	80130e8 <GetObjectId+0x56>
                (XMEMCMP(actualOid, checkOid, checkOidSz) != 0))) {
 80130de:	464a      	mov	r2, r9
 80130e0:	4650      	mov	r0, sl
 80130e2:	f00a fc4f 	bl	801d984 <memcmp>
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 80130e6:	b108      	cbz	r0, 80130ec <GetObjectId+0x5a>
            ret = ASN_UNKNOWN_OID_E;
 80130e8:	f06f 0493 	mvn.w	r4, #147	; 0x93
}
 80130ec:	4620      	mov	r0, r4
 80130ee:	b002      	add	sp, #8
 80130f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *oid += (word32)input[idx];
 80130f4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80130f8:	682b      	ldr	r3, [r5, #0]
 80130fa:	4403      	add	r3, r0
 80130fc:	602b      	str	r3, [r5, #0]
        idx++;
 80130fe:	e7de      	b.n	80130be <GetObjectId+0x2c>

08013100 <GetSigAlg>:
{
 8013100:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 8013104:	f500 771e 	add.w	r7, r0, #632	; 0x278
 8013108:	4613      	mov	r3, r2
{
 801310a:	4604      	mov	r4, r0
 801310c:	4688      	mov	r8, r1
    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 801310e:	f8d0 0274 	ldr.w	r0, [r0, #628]	; 0x274
{
 8013112:	4616      	mov	r6, r2
    if (GetSequence(cert->source, &cert->srcIdx, &length, maxIdx) < 0)
 8013114:	4639      	mov	r1, r7
 8013116:	aa03      	add	r2, sp, #12
 8013118:	f7ff fcb1 	bl	8012a7e <GetSequence>
 801311c:	2800      	cmp	r0, #0
 801311e:	da04      	bge.n	801312a <GetSigAlg+0x2a>
                return ASN_PARSE_E;
 8013120:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8013124:	b004      	add	sp, #16
 8013126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    endSeqIdx = cert->srcIdx + (word32)length;
 801312a:	9b03      	ldr	r3, [sp, #12]
 801312c:	f8d4 5278 	ldr.w	r5, [r4, #632]	; 0x278
    if (GetObjectId(cert->source, &cert->srcIdx, sigOid, oidSigType,
 8013130:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8013134:	9600      	str	r6, [sp, #0]
    endSeqIdx = cert->srcIdx + (word32)length;
 8013136:	441d      	add	r5, r3
    if (GetObjectId(cert->source, &cert->srcIdx, sigOid, oidSigType,
 8013138:	4642      	mov	r2, r8
 801313a:	2301      	movs	r3, #1
 801313c:	4639      	mov	r1, r7
 801313e:	f7ff ffa8 	bl	8013092 <GetObjectId>
 8013142:	2800      	cmp	r0, #0
 8013144:	db18      	blt.n	8013178 <GetSigAlg+0x78>
    if (cert->srcIdx != endSeqIdx) {
 8013146:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 801314a:	42ab      	cmp	r3, r5
 801314c:	d010      	beq.n	8013170 <GetSigAlg+0x70>
        if  (endSeqIdx - cert->srcIdx != 2)
 801314e:	1aeb      	subs	r3, r5, r3
 8013150:	2b02      	cmp	r3, #2
 8013152:	d1e5      	bne.n	8013120 <GetSigAlg+0x20>
            if (GetASNTag(cert->source, &cert->srcIdx, &tag, endSeqIdx) != 0)
 8013154:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8013158:	462b      	mov	r3, r5
 801315a:	f10d 020b 	add.w	r2, sp, #11
 801315e:	4639      	mov	r1, r7
 8013160:	f7ff fc4f 	bl	8012a02 <GetASNTag>
 8013164:	2800      	cmp	r0, #0
 8013166:	d1db      	bne.n	8013120 <GetSigAlg+0x20>
            if (tag != ASN_TAG_NULL)
 8013168:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801316c:	2b05      	cmp	r3, #5
 801316e:	d1d7      	bne.n	8013120 <GetSigAlg+0x20>
    cert->srcIdx = endSeqIdx;
 8013170:	f8c4 5278 	str.w	r5, [r4, #632]	; 0x278
    return 0;
 8013174:	2000      	movs	r0, #0
 8013176:	e7d5      	b.n	8013124 <GetSigAlg+0x24>
        return ASN_OBJECT_ID_E;
 8013178:	f06f 008f 	mvn.w	r0, #143	; 0x8f
 801317c:	e7d2      	b.n	8013124 <GetSigAlg+0x24>

0801317e <GetAlgoId>:
{
 801317e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	4698      	mov	r8, r3
 8013186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    word32 idx = *inOutIdx;
 8013188:	680b      	ldr	r3, [r1, #0]
 801318a:	9304      	str	r3, [sp, #16]
    *oid = 0;
 801318c:	2300      	movs	r3, #0
 801318e:	6013      	str	r3, [r2, #0]
{
 8013190:	460e      	mov	r6, r1
 8013192:	4617      	mov	r7, r2
    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 8013194:	462b      	mov	r3, r5
 8013196:	aa03      	add	r2, sp, #12
 8013198:	a904      	add	r1, sp, #16
{
 801319a:	4604      	mov	r4, r0
    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 801319c:	f7ff fc6f 	bl	8012a7e <GetSequence>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	db32      	blt.n	801320a <GetAlgoId+0x8c>
    if (GetObjectId(input, &idx, oid, oidType, maxIdx) < 0)
 80131a4:	9500      	str	r5, [sp, #0]
 80131a6:	4643      	mov	r3, r8
 80131a8:	463a      	mov	r2, r7
 80131aa:	a904      	add	r1, sp, #16
 80131ac:	4620      	mov	r0, r4
 80131ae:	f7ff ff70 	bl	8013092 <GetObjectId>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	db2c      	blt.n	8013210 <GetAlgoId+0x92>
    if (idx < maxIdx) {
 80131b6:	9b04      	ldr	r3, [sp, #16]
 80131b8:	42ab      	cmp	r3, r5
 80131ba:	d217      	bcs.n	80131ec <GetAlgoId+0x6e>
        word32 localIdx = idx; /*use localIdx to not advance when checking tag*/
 80131bc:	9305      	str	r3, [sp, #20]
        if (GetASNTag(input, &localIdx, &tag, maxIdx) == 0) {
 80131be:	f10d 020b 	add.w	r2, sp, #11
 80131c2:	462b      	mov	r3, r5
 80131c4:	a905      	add	r1, sp, #20
 80131c6:	4620      	mov	r0, r4
 80131c8:	f7ff fc1b 	bl	8012a02 <GetASNTag>
 80131cc:	b970      	cbnz	r0, 80131ec <GetAlgoId+0x6e>
            if (tag == ASN_TAG_NULL) {
 80131ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80131d2:	2b05      	cmp	r3, #5
 80131d4:	d10a      	bne.n	80131ec <GetAlgoId+0x6e>
    word32 idx = *inOutIdx;
 80131d6:	9804      	ldr	r0, [sp, #16]
    if ((idx + 2) > maxIdx) {
 80131d8:	1c83      	adds	r3, r0, #2
 80131da:	429d      	cmp	r5, r3
 80131dc:	d30a      	bcc.n	80131f4 <GetAlgoId+0x76>
    if ((ret == 0) && (input[idx++] != ASN_TAG_NULL)) {
 80131de:	5c22      	ldrb	r2, [r4, r0]
 80131e0:	2a05      	cmp	r2, #5
 80131e2:	d10c      	bne.n	80131fe <GetAlgoId+0x80>
    if ((ret == 0) && (input[idx++] != 0)) {
 80131e4:	4404      	add	r4, r0
 80131e6:	7862      	ldrb	r2, [r4, #1]
 80131e8:	b962      	cbnz	r2, 8013204 <GetAlgoId+0x86>
        *inOutIdx = idx;
 80131ea:	9304      	str	r3, [sp, #16]
    *inOutIdx = idx;
 80131ec:	9b04      	ldr	r3, [sp, #16]
 80131ee:	6033      	str	r3, [r6, #0]
    return 0;
 80131f0:	2000      	movs	r0, #0
 80131f2:	e001      	b.n	80131f8 <GetAlgoId+0x7a>
 80131f4:	f06f 0083 	mvn.w	r0, #131	; 0x83
}
 80131f8:	b006      	add	sp, #24
 80131fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = ASN_TAG_NULL_E;
 80131fe:	f06f 0090 	mvn.w	r0, #144	; 0x90
 8013202:	e7f9      	b.n	80131f8 <GetAlgoId+0x7a>
        ret = ASN_EXPECT_0_E;
 8013204:	f06f 0091 	mvn.w	r0, #145	; 0x91
                    return ret;
 8013208:	e7f6      	b.n	80131f8 <GetAlgoId+0x7a>
        return ASN_PARSE_E;
 801320a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 801320e:	e7f3      	b.n	80131f8 <GetAlgoId+0x7a>
        return ASN_OBJECT_ID_E;
 8013210:	f06f 008f 	mvn.w	r0, #143	; 0x8f
 8013214:	e7f0      	b.n	80131f8 <GetAlgoId+0x7a>

08013216 <ToTraditionalInline_ex>:
{
 8013216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013218:	460e      	mov	r6, r1
 801321a:	b087      	sub	sp, #28
 801321c:	4615      	mov	r5, r2
 801321e:	461f      	mov	r7, r3
    if (input == NULL || inOutIdx == NULL)
 8013220:	4604      	mov	r4, r0
 8013222:	2800      	cmp	r0, #0
 8013224:	d042      	beq.n	80132ac <ToTraditionalInline_ex+0x96>
 8013226:	2900      	cmp	r1, #0
 8013228:	d040      	beq.n	80132ac <ToTraditionalInline_ex+0x96>
    idx = *inOutIdx;
 801322a:	680b      	ldr	r3, [r1, #0]
 801322c:	9303      	str	r3, [sp, #12]
    if (GetSequence(input, &idx, &length, sz) < 0)
 801322e:	a903      	add	r1, sp, #12
 8013230:	4613      	mov	r3, r2
 8013232:	aa05      	add	r2, sp, #20
 8013234:	f7ff fc23 	bl	8012a7e <GetSequence>
 8013238:	2800      	cmp	r0, #0
 801323a:	da03      	bge.n	8013244 <ToTraditionalInline_ex+0x2e>
        return ASN_PARSE_E;
 801323c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8013240:	b007      	add	sp, #28
 8013242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (GetMyVersion(input, &idx, &version, sz) < 0)
 8013244:	462b      	mov	r3, r5
 8013246:	aa04      	add	r2, sp, #16
 8013248:	a903      	add	r1, sp, #12
 801324a:	4620      	mov	r0, r4
 801324c:	f7ff fca2 	bl	8012b94 <GetMyVersion>
 8013250:	2800      	cmp	r0, #0
 8013252:	dbf3      	blt.n	801323c <ToTraditionalInline_ex+0x26>
    if (GetAlgoId(input, &idx, algId, oidKeyType, sz) < 0)
 8013254:	9500      	str	r5, [sp, #0]
 8013256:	2302      	movs	r3, #2
 8013258:	463a      	mov	r2, r7
 801325a:	a903      	add	r1, sp, #12
 801325c:	4620      	mov	r0, r4
 801325e:	f7ff ff8e 	bl	801317e <GetAlgoId>
 8013262:	2800      	cmp	r0, #0
 8013264:	dbea      	blt.n	801323c <ToTraditionalInline_ex+0x26>
    if (GetASNTag(input, &idx, &tag, sz) < 0)
 8013266:	462b      	mov	r3, r5
 8013268:	f10d 020b 	add.w	r2, sp, #11
 801326c:	a903      	add	r1, sp, #12
 801326e:	4620      	mov	r0, r4
 8013270:	f7ff fbc7 	bl	8012a02 <GetASNTag>
 8013274:	2800      	cmp	r0, #0
 8013276:	dbe1      	blt.n	801323c <ToTraditionalInline_ex+0x26>
    idx = idx - 1; /* reset idx after finding tag */
 8013278:	9b03      	ldr	r3, [sp, #12]
 801327a:	3b01      	subs	r3, #1
 801327c:	9303      	str	r3, [sp, #12]
    if (tag == ASN_OBJECT_ID) {
 801327e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013282:	2b06      	cmp	r3, #6
 8013284:	d00b      	beq.n	801329e <ToTraditionalInline_ex+0x88>
    ret = GetOctetString(input, &idx, &length, sz);
 8013286:	462b      	mov	r3, r5
 8013288:	aa05      	add	r2, sp, #20
 801328a:	a903      	add	r1, sp, #12
 801328c:	4620      	mov	r0, r4
 801328e:	f7ff fc0c 	bl	8012aaa <GetOctetString>
        if (ret == BUFFER_E)
 8013292:	3084      	adds	r0, #132	; 0x84
 8013294:	d0d2      	beq.n	801323c <ToTraditionalInline_ex+0x26>
    *inOutIdx = idx;
 8013296:	9b03      	ldr	r3, [sp, #12]
    return length;
 8013298:	9805      	ldr	r0, [sp, #20]
    *inOutIdx = idx;
 801329a:	6033      	str	r3, [r6, #0]
    return length;
 801329c:	e7d0      	b.n	8013240 <ToTraditionalInline_ex+0x2a>
        if (SkipObjectId(input, &idx, sz) < 0)
 801329e:	462a      	mov	r2, r5
 80132a0:	4620      	mov	r0, r4
 80132a2:	f7ff fee6 	bl	8013072 <SkipObjectId>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	daed      	bge.n	8013286 <ToTraditionalInline_ex+0x70>
 80132aa:	e7c7      	b.n	801323c <ToTraditionalInline_ex+0x26>
        return BAD_FUNC_ARG;
 80132ac:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80132b0:	e7c6      	b.n	8013240 <ToTraditionalInline_ex+0x2a>

080132b2 <FreeAltNames>:
{
 80132b2:	b538      	push	{r3, r4, r5, lr}
 80132b4:	4604      	mov	r4, r0
    while (altNames) {
 80132b6:	b904      	cbnz	r4, 80132ba <FreeAltNames+0x8>
}
 80132b8:	bd38      	pop	{r3, r4, r5, pc}
        XFREE(altNames->name, heap, DYNAMIC_TYPE_ALTNAME);
 80132ba:	68e0      	ldr	r0, [r4, #12]
        DNS_entry* tmp = altNames->next;
 80132bc:	6825      	ldr	r5, [r4, #0]
        XFREE(altNames->name, heap, DYNAMIC_TYPE_ALTNAME);
 80132be:	b108      	cbz	r0, 80132c4 <FreeAltNames+0x12>
 80132c0:	f00a fb58 	bl	801d974 <free>
        XFREE(altNames,       heap, DYNAMIC_TYPE_ALTNAME);
 80132c4:	4620      	mov	r0, r4
 80132c6:	f00a fb55 	bl	801d974 <free>
        altNames = tmp;
 80132ca:	462c      	mov	r4, r5
 80132cc:	e7f3      	b.n	80132b6 <FreeAltNames+0x4>

080132ce <AltNameNew>:
{
 80132ce:	b510      	push	{r4, lr}
    ret = (DNS_entry*)XMALLOC(sizeof(DNS_entry), heap, DYNAMIC_TYPE_ALTNAME);
 80132d0:	2010      	movs	r0, #16
 80132d2:	f00a fb47 	bl	801d964 <malloc>
    if (ret != NULL) {
 80132d6:	4604      	mov	r4, r0
 80132d8:	b118      	cbz	r0, 80132e2 <AltNameNew+0x14>
        XMEMSET(ret, 0, sizeof(DNS_entry));
 80132da:	2210      	movs	r2, #16
 80132dc:	2100      	movs	r1, #0
 80132de:	f00a fb89 	bl	801d9f4 <memset>
}
 80132e2:	4620      	mov	r0, r4
 80132e4:	bd10      	pop	{r4, pc}

080132e6 <FreeNameSubtrees>:
{
 80132e6:	b538      	push	{r3, r4, r5, lr}
 80132e8:	4604      	mov	r4, r0
    while (names) {
 80132ea:	b904      	cbnz	r4, 80132ee <FreeNameSubtrees+0x8>
}
 80132ec:	bd38      	pop	{r3, r4, r5, pc}
        XFREE(names->name, heap, DYNAMIC_TYPE_ALTNAME);
 80132ee:	e9d4 5000 	ldrd	r5, r0, [r4]
 80132f2:	b108      	cbz	r0, 80132f8 <FreeNameSubtrees+0x12>
 80132f4:	f00a fb3e 	bl	801d974 <free>
        XFREE(names,       heap, DYNAMIC_TYPE_ALTNAME);
 80132f8:	4620      	mov	r0, r4
 80132fa:	f00a fb3b 	bl	801d974 <free>
        names = tmp;
 80132fe:	462c      	mov	r4, r5
 8013300:	e7f3      	b.n	80132ea <FreeNameSubtrees+0x4>
	...

08013304 <GetName>:
{
 8013304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	b093      	sub	sp, #76	; 0x4c
 801330a:	4605      	mov	r5, r0
 801330c:	4616      	mov	r6, r2
    if (nameType == ISSUER) {
 801330e:	9105      	str	r1, [sp, #20]
 8013310:	b9d1      	cbnz	r1, 8013348 <GetName+0x44>
        full = cert->issuer;
 8013312:	f100 036d 	add.w	r3, r0, #109	; 0x6d
 8013316:	9304      	str	r3, [sp, #16]
        hash = cert->issuerHash;
 8013318:	f100 044c 	add.w	r4, r0, #76	; 0x4c
    if (cert->srcIdx >= (word32)maxIdx) {
 801331c:	f8d5 3278 	ldr.w	r3, [r5, #632]	; 0x278
 8013320:	42b3      	cmp	r3, r6
 8013322:	f080 8182 	bcs.w	801362a <GetName+0x326>
    localIdx = cert->srcIdx;
 8013326:	930a      	str	r3, [sp, #40]	; 0x28
    if (GetASNTag(cert->source, &localIdx, &tag, (word32)maxIdx) < 0) {
 8013328:	f8d5 0274 	ldr.w	r0, [r5, #628]	; 0x274
 801332c:	4633      	mov	r3, r6
 801332e:	f10d 021f 	add.w	r2, sp, #31
 8013332:	a90a      	add	r1, sp, #40	; 0x28
 8013334:	f7ff fb65 	bl	8012a02 <GetASNTag>
 8013338:	2800      	cmp	r0, #0
 801333a:	da0b      	bge.n	8013354 <GetName+0x50>
        return ASN_PARSE_E;
 801333c:	f06f 098b 	mvn.w	r9, #139	; 0x8b
}
 8013340:	4648      	mov	r0, r9
 8013342:	b013      	add	sp, #76	; 0x4c
 8013344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        full = cert->subject;
 8013348:	f200 136d 	addw	r3, r0, #365	; 0x16d
 801334c:	9304      	str	r3, [sp, #16]
        hash = cert->subjectHash;
 801334e:	f100 0438 	add.w	r4, r0, #56	; 0x38
 8013352:	e7e3      	b.n	801331c <GetName+0x18>
    if (tag == ASN_OBJECT_ID) {
 8013354:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013358:	2b06      	cmp	r3, #6
 801335a:	d04b      	beq.n	80133f4 <GetName+0xf0>
    localIdx = cert->srcIdx;
 801335c:	f8d5 3278 	ldr.w	r3, [r5, #632]	; 0x278
 8013360:	930a      	str	r3, [sp, #40]	; 0x28
    if (GetASNTag(cert->source, &localIdx, &tag, (word32)maxIdx) < 0) {
 8013362:	f8d5 0274 	ldr.w	r0, [r5, #628]	; 0x274
 8013366:	4633      	mov	r3, r6
 8013368:	f10d 021f 	add.w	r2, sp, #31
 801336c:	a90a      	add	r1, sp, #40	; 0x28
 801336e:	f7ff fb48 	bl	8012a02 <GetASNTag>
 8013372:	2800      	cmp	r0, #0
 8013374:	dbe2      	blt.n	801333c <GetName+0x38>
    localIdx = cert->srcIdx + 1;
 8013376:	f8d5 3278 	ldr.w	r3, [r5, #632]	; 0x278
    if (GetLength(cert->source, &localIdx, &length, (word32)maxIdx) < 0) {
 801337a:	f8d5 0274 	ldr.w	r0, [r5, #628]	; 0x274
    localIdx = cert->srcIdx + 1;
 801337e:	3301      	adds	r3, #1
 8013380:	930a      	str	r3, [sp, #40]	; 0x28
    if (GetLength(cert->source, &localIdx, &length, (word32)maxIdx) < 0) {
 8013382:	aa09      	add	r2, sp, #36	; 0x24
 8013384:	4633      	mov	r3, r6
 8013386:	f7ff faf3 	bl	8012970 <GetLength>
 801338a:	2800      	cmp	r0, #0
 801338c:	dbd6      	blt.n	801333c <GetName+0x38>
    length += (int)(localIdx - cert->srcIdx);
 801338e:	f8d5 0278 	ldr.w	r0, [r5, #632]	; 0x278
 8013392:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013394:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return GetCertName(cert, full, hash, nameType, cert->source, &cert->srcIdx,
 8013396:	f8d5 7274 	ldr.w	r7, [r5, #628]	; 0x274
    word32 srcIdx = *inOutIdx;
 801339a:	900d      	str	r0, [sp, #52]	; 0x34
    length += (int)(localIdx - cert->srcIdx);
 801339c:	1a09      	subs	r1, r1, r0
 801339e:	4419      	add	r1, r3
    return GetCertName(cert, full, hash, nameType, cert->source, &cert->srcIdx,
 80133a0:	eb00 0a01 	add.w	sl, r0, r1
        ret = wc_ShaHash(data, len, hash);
 80133a4:	4622      	mov	r2, r4
 80133a6:	4438      	add	r0, r7
    length += (int)(localIdx - cert->srcIdx);
 80133a8:	9109      	str	r1, [sp, #36]	; 0x24
        ret = wc_ShaHash(data, len, hash);
 80133aa:	f007 fb16 	bl	801a9da <wc_ShaHash>
    if (CalcHashId_ex(input + *inOutIdx, maxIdx - *inOutIdx, hash,
 80133ae:	4681      	mov	r9, r0
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d1c3      	bne.n	801333c <GetName+0x38>
    if (GetSequence(input, &srcIdx, &length, maxIdx) < 0) {
 80133b4:	4653      	mov	r3, sl
 80133b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80133b8:	a90d      	add	r1, sp, #52	; 0x34
 80133ba:	4638      	mov	r0, r7
 80133bc:	f7ff fb5f 	bl	8012a7e <GetSequence>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	dbbb      	blt.n	801333c <GetName+0x38>
    if (nameType == SUBJECT) {
 80133c4:	9905      	ldr	r1, [sp, #20]
        cert->subjectRaw = &input[srcIdx];
 80133c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        cert->subjectRawLen = length;
 80133c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    if (nameType == SUBJECT) {
 80133ca:	2901      	cmp	r1, #1
        cert->subjectRaw = &input[srcIdx];
 80133cc:	bf04      	itt	eq
 80133ce:	18f9      	addeq	r1, r7, r3
        cert->subjectRawLen = length;
 80133d0:	e9c5 12c4 	strdeq	r1, r2, [r5, #784]	; 0x310
    length += (int)srcIdx;
 80133d4:	4413      	add	r3, r2
 80133d6:	930b      	str	r3, [sp, #44]	; 0x2c
    idx = 0;
 80133d8:	f04f 0b00 	mov.w	fp, #0
    while (srcIdx < (word32)length) {
 80133dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133e0:	4293      	cmp	r3, r2
 80133e2:	f04f 0200 	mov.w	r2, #0
 80133e6:	d30f      	bcc.n	8013408 <GetName+0x104>
    full[idx++] = 0;
 80133e8:	9904      	ldr	r1, [sp, #16]
 80133ea:	f801 200b 	strb.w	r2, [r1, fp]
    *inOutIdx = srcIdx;
 80133ee:	f8c5 3278 	str.w	r3, [r5, #632]	; 0x278
    return GetCertName(cert, full, hash, nameType, cert->source, &cert->srcIdx,
 80133f2:	e7a5      	b.n	8013340 <GetName+0x3c>
        if (SkipObjectId(cert->source, &cert->srcIdx, (word32)maxIdx) < 0)
 80133f4:	f8d5 0274 	ldr.w	r0, [r5, #628]	; 0x274
 80133f8:	4632      	mov	r2, r6
 80133fa:	f505 711e 	add.w	r1, r5, #632	; 0x278
 80133fe:	f7ff fe38 	bl	8013072 <SkipObjectId>
 8013402:	2800      	cmp	r0, #0
 8013404:	daaa      	bge.n	801335c <GetName+0x58>
 8013406:	e799      	b.n	801333c <GetName+0x38>
        int         strLen  = 0;
 8013408:	920f      	str	r2, [sp, #60]	; 0x3c
        if (GetSet(input, &srcIdx, &dummy, maxIdx) < 0) {
 801340a:	4653      	mov	r3, sl
 801340c:	aa0c      	add	r2, sp, #48	; 0x30
 801340e:	a90d      	add	r1, sp, #52	; 0x34
 8013410:	4638      	mov	r0, r7
 8013412:	f7ff fb3f 	bl	8012a94 <GetSet>
        if (GetSequence(input, &srcIdx, &dummy, maxIdx) <= 0) {
 8013416:	4653      	mov	r3, sl
 8013418:	aa0c      	add	r2, sp, #48	; 0x30
 801341a:	a90d      	add	r1, sp, #52	; 0x34
 801341c:	4638      	mov	r0, r7
 801341e:	f7ff fb2e 	bl	8012a7e <GetSequence>
 8013422:	2800      	cmp	r0, #0
 8013424:	dd21      	ble.n	801346a <GetName+0x166>
        ret = GetASNObjectId(input, &srcIdx, &oidSz, maxIdx);
 8013426:	4653      	mov	r3, sl
 8013428:	aa0e      	add	r2, sp, #56	; 0x38
 801342a:	a90d      	add	r1, sp, #52	; 0x34
 801342c:	4638      	mov	r0, r7
 801342e:	f7ff fe13 	bl	8013058 <GetASNObjectId>
        if (ret != 0) {
 8013432:	4604      	mov	r4, r0
 8013434:	b9d8      	cbnz	r0, 801346e <GetName+0x16a>
        if ((srcIdx + sizeof(joint)) > (word32)maxIdx) {
 8013436:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013438:	1ccb      	adds	r3, r1, #3
 801343a:	459a      	cmp	sl, r3
 801343c:	d315      	bcc.n	801346a <GetName+0x166>
        XMEMCPY(joint, &input[srcIdx], sizeof(joint));
 801343e:	2203      	movs	r2, #3
 8013440:	4439      	add	r1, r7
 8013442:	a808      	add	r0, sp, #32
 8013444:	f00a faae 	bl	801d9a4 <memcpy>
        if (joint[0] == 0x55 && joint[1] == 0x04) {
 8013448:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801344c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801344e:	2a55      	cmp	r2, #85	; 0x55
 8013450:	d14b      	bne.n	80134ea <GetName+0x1e6>
 8013452:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8013456:	2a04      	cmp	r2, #4
 8013458:	f040 808c 	bne.w	8013574 <GetName+0x270>
            srcIdx += 3;
 801345c:	1cda      	adds	r2, r3, #3
    if ((idx + 1) > maxIdx)
 801345e:	3304      	adds	r3, #4
 8013460:	459a      	cmp	sl, r3
            id = joint[2];
 8013462:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
            srcIdx += 3;
 8013466:	920d      	str	r2, [sp, #52]	; 0x34
    if ((idx + 1) > maxIdx)
 8013468:	d203      	bcs.n	8013472 <GetName+0x16e>
                switch (id) {
 801346a:	f06f 048b 	mvn.w	r4, #139	; 0x8b
            return ASN_PARSE_E;
 801346e:	46a1      	mov	r9, r4
 8013470:	e766      	b.n	8013340 <GetName+0x3c>
    *tag = input[idx++];
 8013472:	9310      	str	r3, [sp, #64]	; 0x40
    if (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)
 8013474:	2301      	movs	r3, #1
    *tag = input[idx++];
 8013476:	f817 8002 	ldrb.w	r8, [r7, r2]
    if (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	aa11      	add	r2, sp, #68	; 0x44
 801347e:	4653      	mov	r3, sl
 8013480:	a910      	add	r1, sp, #64	; 0x40
 8013482:	4638      	mov	r0, r7
 8013484:	f7ff fa39 	bl	80128fa <GetLength_ex>
 8013488:	2800      	cmp	r0, #0
 801348a:	dbee      	blt.n	801346a <GetName+0x166>
    *len      = length;
 801348c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    *inOutIdx = idx;
 801348e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *len      = length;
 8013490:	920f      	str	r2, [sp, #60]	; 0x3c
            if (GetHeader(input, &b, &srcIdx, &strLen, maxIdx, 1) < 0) {
 8013492:	2a00      	cmp	r2, #0
    *inOutIdx = idx;
 8013494:	930d      	str	r3, [sp, #52]	; 0x34
            if (GetHeader(input, &b, &srcIdx, &strLen, maxIdx, 1) < 0) {
 8013496:	dbe8      	blt.n	801346a <GetName+0x166>
            if (id == ASN_COMMON_NAME) {
 8013498:	2e03      	cmp	r6, #3
 801349a:	d10a      	bne.n	80134b2 <GetName+0x1ae>
                if (nameType == SUBJECT) {
 801349c:	9905      	ldr	r1, [sp, #20]
 801349e:	2901      	cmp	r1, #1
 80134a0:	d104      	bne.n	80134ac <GetName+0x1a8>
                    cert->subjectCN = (char *)&input[srcIdx];
 80134a2:	443b      	add	r3, r7
                    cert->subjectCNLen = strLen;
 80134a4:	e9c5 3219 	strd	r3, r2, [r5, #100]	; 0x64
                    cert->subjectCNEnc = (char)b;
 80134a8:	f885 806c 	strb.w	r8, [r5, #108]	; 0x6c
                copy = WOLFSSL_COMMON_NAME;
 80134ac:	4960      	ldr	r1, [pc, #384]	; (8013630 <GetName+0x32c>)
                copyLen = sizeof(WOLFSSL_COMMON_NAME) - 1;
 80134ae:	2404      	movs	r4, #4
 80134b0:	e019      	b.n	80134e6 <GetName+0x1e2>
            else if (id == ASN_SUR_NAME) {
 80134b2:	2e04      	cmp	r6, #4
 80134b4:	f000 809c 	beq.w	80135f0 <GetName+0x2ec>
            else if (id == ASN_COUNTRY_NAME) {
 80134b8:	2e06      	cmp	r6, #6
 80134ba:	f000 809c 	beq.w	80135f6 <GetName+0x2f2>
            else if (id == ASN_LOCALITY_NAME) {
 80134be:	2e07      	cmp	r6, #7
 80134c0:	f000 809c 	beq.w	80135fc <GetName+0x2f8>
            else if (id == ASN_STATE_NAME) {
 80134c4:	2e08      	cmp	r6, #8
 80134c6:	f000 809c 	beq.w	8013602 <GetName+0x2fe>
            else if (id == ASN_ORG_NAME) {
 80134ca:	2e0a      	cmp	r6, #10
 80134cc:	f000 809c 	beq.w	8013608 <GetName+0x304>
            else if (id == ASN_ORGUNIT_NAME) {
 80134d0:	2e0b      	cmp	r6, #11
 80134d2:	f000 809c 	beq.w	801360e <GetName+0x30a>
            else if (id == ASN_SERIAL_NUMBER) {
 80134d6:	2e05      	cmp	r6, #5
 80134d8:	f000 809c 	beq.w	8013614 <GetName+0x310>
            else if (id == ASN_USER_ID) {
 80134dc:	2e12      	cmp	r6, #18
 80134de:	f040 809c 	bne.w	801361a <GetName+0x316>
                copy = WOLFSSL_USER_ID;
 80134e2:	4954      	ldr	r1, [pc, #336]	; (8013634 <GetName+0x330>)
                copyLen = sizeof(WOLFSSL_USER_ID) - 1;
 80134e4:	2405      	movs	r4, #5
        byte        tooBig  = FALSE;
 80134e6:	2600      	movs	r6, #0
 80134e8:	e064      	b.n	80135b4 <GetName+0x2b0>
            if (joint[0] == 0x2a && joint[1] == 0x86) {  /* email id hdr 42.134.* */
 80134ea:	2a2a      	cmp	r2, #42	; 0x2a
 80134ec:	d12e      	bne.n	801354c <GetName+0x248>
 80134ee:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                email = TRUE;
 80134f2:	9403      	str	r4, [sp, #12]
            if (joint[0] == 0x2a && joint[1] == 0x86) {  /* email id hdr 42.134.* */
 80134f4:	2a86      	cmp	r2, #134	; 0x86
                email = TRUE;
 80134f6:	bf15      	itete	ne
 80134f8:	4626      	movne	r6, r4
 80134fa:	2601      	moveq	r6, #1
 80134fc:	46a0      	movne	r8, r4
 80134fe:	f04f 0898 	moveq.w	r8, #152	; 0x98
            srcIdx += (word32)oidSz + 1;
 8013502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013504:	3301      	adds	r3, #1
 8013506:	4413      	add	r3, r2
 8013508:	930d      	str	r3, [sp, #52]	; 0x34
            if (GetLength(input, &srcIdx, &strLen, maxIdx) < 0) {
 801350a:	aa0f      	add	r2, sp, #60	; 0x3c
 801350c:	4653      	mov	r3, sl
 801350e:	a90d      	add	r1, sp, #52	; 0x34
 8013510:	4638      	mov	r0, r7
 8013512:	f7ff fa2d 	bl	8012970 <GetLength>
 8013516:	2800      	cmp	r0, #0
 8013518:	dba7      	blt.n	801346a <GetName+0x166>
            if (strLen > (int)(WC_ASN_NAME_MAX - idx)) {
 801351a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801351c:	f5cb 7180 	rsb	r1, fp, #256	; 0x100
                tooBig = TRUE;
 8013520:	4299      	cmp	r1, r3
 8013522:	bfac      	ite	ge
 8013524:	2200      	movge	r2, #0
 8013526:	2201      	movlt	r2, #1
            if (email) {
 8013528:	b366      	cbz	r6, 8013584 <GetName+0x280>
                if ((copyLen + strLen) > (int)(WC_ASN_NAME_MAX - idx)) {
 801352a:	f103 000e 	add.w	r0, r3, #14
 801352e:	4281      	cmp	r1, r0
 8013530:	bfa8      	it	ge
 8013532:	4616      	movge	r6, r2
                    if (nameType == SUBJECT) {
 8013534:	9a05      	ldr	r2, [sp, #20]
                if ((copyLen + strLen) > (int)(WC_ASN_NAME_MAX - idx)) {
 8013536:	4940      	ldr	r1, [pc, #256]	; (8013638 <GetName+0x334>)
 8013538:	bfb8      	it	lt
 801353a:	2100      	movlt	r1, #0
                    if (nameType == SUBJECT) {
 801353c:	2a01      	cmp	r2, #1
 801353e:	d103      	bne.n	8013548 <GetName+0x244>
                        cert->subjectEmail = (char*)&input[srcIdx];
 8013540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013542:	443a      	add	r2, r7
                        cert->subjectEmailLen = strLen;
 8013544:	e9c5 23c6 	strd	r2, r3, [r5, #792]	; 0x318
                copyLen = sizeof(WOLFSSL_EMAIL_ADDR) - 1;
 8013548:	240e      	movs	r4, #14
 801354a:	e01d      	b.n	8013588 <GetName+0x284>
            if (joint[0] == 0x9  && joint[1] == 0x92) { /* uid id hdr 9.146.* */
 801354c:	2a09      	cmp	r2, #9
 801354e:	d111      	bne.n	8013574 <GetName+0x270>
 8013550:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8013554:	2a92      	cmp	r2, #146	; 0x92
 8013556:	d10d      	bne.n	8013574 <GetName+0x270>
                id    = input[srcIdx + (word32)oidSz - 1];
 8013558:	990e      	ldr	r1, [sp, #56]	; 0x38
 801355a:	18fa      	adds	r2, r7, r3
 801355c:	440a      	add	r2, r1
 801355e:	f812 8c01 	ldrb.w	r8, [r2, #-1]
                if (id == 0x01)
 8013562:	f1b8 0f01 	cmp.w	r8, #1
 8013566:	d109      	bne.n	801357c <GetName+0x278>
                pilot = TRUE;
 8013568:	f8cd 800c 	str.w	r8, [sp, #12]
            byte email = FALSE;
 801356c:	4626      	mov	r6, r4
                    id = ASN_USER_ID;
 801356e:	f04f 0812 	mov.w	r8, #18
 8013572:	e7c6      	b.n	8013502 <GetName+0x1fe>
            byte email = FALSE;
 8013574:	4626      	mov	r6, r4
            byte pilot = FALSE;
 8013576:	9403      	str	r4, [sp, #12]
        byte        id      = 0;
 8013578:	46a0      	mov	r8, r4
 801357a:	e7c2      	b.n	8013502 <GetName+0x1fe>
                pilot = TRUE;
 801357c:	2201      	movs	r2, #1
            byte email = FALSE;
 801357e:	4626      	mov	r6, r4
                pilot = TRUE;
 8013580:	9203      	str	r2, [sp, #12]
 8013582:	e7be      	b.n	8013502 <GetName+0x1fe>
 8013584:	4616      	mov	r6, r2
        const char* copy    = NULL;
 8013586:	2100      	movs	r1, #0
            if (pilot) {
 8013588:	9b03      	ldr	r3, [sp, #12]
 801358a:	b19b      	cbz	r3, 80135b4 <GetName+0x2b0>
                switch (id) {
 801358c:	f1b8 0f19 	cmp.w	r8, #25
 8013590:	d045      	beq.n	801361e <GetName+0x31a>
 8013592:	d809      	bhi.n	80135a8 <GetName+0x2a4>
 8013594:	f1b8 0f12 	cmp.w	r8, #18
 8013598:	d044      	beq.n	8013624 <GetName+0x320>
 801359a:	f1b8 0f13 	cmp.w	r8, #19
 801359e:	f47f af64 	bne.w	801346a <GetName+0x166>
                        copy = WOLFSSL_FAVOURITE_DRINK;
 80135a2:	4926      	ldr	r1, [pc, #152]	; (801363c <GetName+0x338>)
                        copyLen = sizeof(WOLFSSL_FAVOURITE_DRINK) - 1;
 80135a4:	2410      	movs	r4, #16
 80135a6:	e005      	b.n	80135b4 <GetName+0x2b0>
                switch (id) {
 80135a8:	f1b8 0f97 	cmp.w	r8, #151	; 0x97
 80135ac:	f47f af5d 	bne.w	801346a <GetName+0x166>
                        copy = WOLFSSL_CONTENT_TYPE;
 80135b0:	4923      	ldr	r1, [pc, #140]	; (8013640 <GetName+0x33c>)
                        copyLen = sizeof(WOLFSSL_CONTENT_TYPE) - 1;
 80135b2:	240d      	movs	r4, #13
        if ((copyLen + strLen) > (int)(WC_ASN_NAME_MAX - idx))
 80135b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135b6:	f5cb 7280 	rsb	r2, fp, #256	; 0x100
 80135ba:	4423      	add	r3, r4
 80135bc:	4293      	cmp	r3, r2
 80135be:	dc12      	bgt.n	80135e6 <GetName+0x2e2>
        if ((copy != NULL) && !tooBig) {
 80135c0:	b189      	cbz	r1, 80135e6 <GetName+0x2e2>
 80135c2:	b986      	cbnz	r6, 80135e6 <GetName+0x2e2>
            XMEMCPY(&full[idx], copy, (size_t)copyLen);
 80135c4:	9b04      	ldr	r3, [sp, #16]
 80135c6:	4622      	mov	r2, r4
 80135c8:	eb03 000b 	add.w	r0, r3, fp
 80135cc:	f00a f9ea 	bl	801d9a4 <memcpy>
            XMEMCPY(&full[idx], &input[srcIdx], (size_t)strLen);
 80135d0:	9b04      	ldr	r3, [sp, #16]
 80135d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80135d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            idx += (word32)copyLen;
 80135d6:	44a3      	add	fp, r4
            XMEMCPY(&full[idx], &input[srcIdx], (size_t)strLen);
 80135d8:	eb03 000b 	add.w	r0, r3, fp
 80135dc:	4439      	add	r1, r7
 80135de:	f00a f9e1 	bl	801d9a4 <memcpy>
            idx += (word32)strLen;
 80135e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135e4:	449b      	add	fp, r3
        srcIdx += (word32)strLen;
 80135e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135ea:	4413      	add	r3, r2
 80135ec:	930d      	str	r3, [sp, #52]	; 0x34
 80135ee:	e6f5      	b.n	80133dc <GetName+0xd8>
                copy = WOLFSSL_SUR_NAME;
 80135f0:	4914      	ldr	r1, [pc, #80]	; (8013644 <GetName+0x340>)
                copyLen = sizeof(WOLFSSL_SUR_NAME) - 1;
 80135f2:	4634      	mov	r4, r6
 80135f4:	e777      	b.n	80134e6 <GetName+0x1e2>
                copy = WOLFSSL_COUNTRY_NAME;
 80135f6:	4914      	ldr	r1, [pc, #80]	; (8013648 <GetName+0x344>)
                copyLen = sizeof(WOLFSSL_COUNTRY_NAME) - 1;
 80135f8:	2403      	movs	r4, #3
 80135fa:	e774      	b.n	80134e6 <GetName+0x1e2>
                copy = WOLFSSL_LOCALITY_NAME;
 80135fc:	4913      	ldr	r1, [pc, #76]	; (801364c <GetName+0x348>)
                copyLen = sizeof(WOLFSSL_LOCALITY_NAME) - 1;
 80135fe:	2403      	movs	r4, #3
 8013600:	e771      	b.n	80134e6 <GetName+0x1e2>
                copy = WOLFSSL_STATE_NAME;
 8013602:	4913      	ldr	r1, [pc, #76]	; (8013650 <GetName+0x34c>)
                copyLen = sizeof(WOLFSSL_STATE_NAME) - 1;
 8013604:	2404      	movs	r4, #4
 8013606:	e76e      	b.n	80134e6 <GetName+0x1e2>
                copy = WOLFSSL_ORG_NAME;
 8013608:	4912      	ldr	r1, [pc, #72]	; (8013654 <GetName+0x350>)
                copyLen = sizeof(WOLFSSL_ORG_NAME) - 1;
 801360a:	2403      	movs	r4, #3
 801360c:	e76b      	b.n	80134e6 <GetName+0x1e2>
                copy = WOLFSSL_ORGUNIT_NAME;
 801360e:	4912      	ldr	r1, [pc, #72]	; (8013658 <GetName+0x354>)
                copyLen = sizeof(WOLFSSL_ORGUNIT_NAME) - 1;
 8013610:	2404      	movs	r4, #4
 8013612:	e768      	b.n	80134e6 <GetName+0x1e2>
                copy = WOLFSSL_SERIAL_NUMBER;
 8013614:	4911      	ldr	r1, [pc, #68]	; (801365c <GetName+0x358>)
                copyLen = sizeof(WOLFSSL_SERIAL_NUMBER) - 1;
 8013616:	240e      	movs	r4, #14
 8013618:	e765      	b.n	80134e6 <GetName+0x1e2>
        const char* copy    = NULL;
 801361a:	2100      	movs	r1, #0
 801361c:	e763      	b.n	80134e6 <GetName+0x1e2>
                switch (id) {
 801361e:	4910      	ldr	r1, [pc, #64]	; (8013660 <GetName+0x35c>)
 8013620:	2404      	movs	r4, #4
 8013622:	e7c7      	b.n	80135b4 <GetName+0x2b0>
                        copy = WOLFSSL_USER_ID;
 8013624:	4903      	ldr	r1, [pc, #12]	; (8013634 <GetName+0x330>)
                        copyLen = sizeof(WOLFSSL_USER_ID) - 1;
 8013626:	2405      	movs	r4, #5
 8013628:	e7c4      	b.n	80135b4 <GetName+0x2b0>
        return BUFFER_E;
 801362a:	f06f 0983 	mvn.w	r9, #131	; 0x83
 801362e:	e687      	b.n	8013340 <GetName+0x3c>
 8013630:	08022b90 	.word	0x08022b90
 8013634:	08022b95 	.word	0x08022b95
 8013638:	08022b70 	.word	0x08022b70
 801363c:	08022b7f 	.word	0x08022b7f
 8013640:	08022bca 	.word	0x08022bca
 8013644:	08022ba0 	.word	0x08022ba0
 8013648:	08022ba5 	.word	0x08022ba5
 801364c:	08022ba9 	.word	0x08022ba9
 8013650:	08022bad 	.word	0x08022bad
 8013654:	08022bb2 	.word	0x08022bb2
 8013658:	08022bb6 	.word	0x08022bb6
 801365c:	08022bbb 	.word	0x08022bbb
 8013660:	08022b9b 	.word	0x08022b9b

08013664 <ExtractDate>:
{
 8013664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013668:	4614      	mov	r4, r2
 801366a:	460f      	mov	r7, r1
 801366c:	4605      	mov	r5, r0
    XMEMSET(certTime, 0, sizeof(struct tm));
 801366e:	2224      	movs	r2, #36	; 0x24
 8013670:	2100      	movs	r1, #0
 8013672:	4620      	mov	r0, r4
{
 8013674:	461e      	mov	r6, r3
    XMEMSET(certTime, 0, sizeof(struct tm));
 8013676:	f00a f9bd 	bl	801d9f4 <memset>
    if (format == ASN_UTC_TIME) {
 801367a:	2f17      	cmp	r7, #23
        if (GetTime(&certTime->tm_year, date, idx) != 0) return 0;
 801367c:	f104 0814 	add.w	r8, r4, #20
    if (format == ASN_UTC_TIME) {
 8013680:	d135      	bne.n	80136ee <ExtractDate+0x8a>
        if (btoi(date[*idx]) >= 5)
 8013682:	6833      	ldr	r3, [r6, #0]
 8013684:	5ceb      	ldrb	r3, [r5, r3]
 8013686:	3b30      	subs	r3, #48	; 0x30
 8013688:	2b04      	cmp	r3, #4
            certTime->tm_year = 1900;
 801368a:	bf8c      	ite	hi
 801368c:	f240 736c 	movwhi	r3, #1900	; 0x76c
            certTime->tm_year = 2000;
 8013690:	f44f 63fa 	movls.w	r3, #2000	; 0x7d0
        certTime->tm_year *= 100;
 8013694:	6163      	str	r3, [r4, #20]
    if (GetTime(&certTime->tm_year, date, idx) != 0) return 0;
 8013696:	4632      	mov	r2, r6
 8013698:	4629      	mov	r1, r5
 801369a:	4640      	mov	r0, r8
 801369c:	f7ff f85f 	bl	801275e <GetTime>
 80136a0:	bb58      	cbnz	r0, 80136fa <ExtractDate+0x96>
    certTime->tm_year -= 1900;
 80136a2:	6963      	ldr	r3, [r4, #20]
 80136a4:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80136a8:	6163      	str	r3, [r4, #20]
    if (GetTime(&certTime->tm_mon , date, idx) != 0) return 0;
 80136aa:	4629      	mov	r1, r5
 80136ac:	f104 0010 	add.w	r0, r4, #16
 80136b0:	f7ff f855 	bl	801275e <GetTime>
 80136b4:	bb08      	cbnz	r0, 80136fa <ExtractDate+0x96>
    certTime->tm_mon  -= 1;
 80136b6:	6923      	ldr	r3, [r4, #16]
 80136b8:	3b01      	subs	r3, #1
 80136ba:	6123      	str	r3, [r4, #16]
    if (GetTime(&certTime->tm_mday, date, idx) != 0) return 0;
 80136bc:	4629      	mov	r1, r5
 80136be:	f104 000c 	add.w	r0, r4, #12
 80136c2:	f7ff f84c 	bl	801275e <GetTime>
 80136c6:	b9c0      	cbnz	r0, 80136fa <ExtractDate+0x96>
    if (GetTime(&certTime->tm_hour, date, idx) != 0) return 0;
 80136c8:	4629      	mov	r1, r5
 80136ca:	f104 0008 	add.w	r0, r4, #8
 80136ce:	f7ff f846 	bl	801275e <GetTime>
 80136d2:	b990      	cbnz	r0, 80136fa <ExtractDate+0x96>
    if (GetTime(&certTime->tm_min , date, idx) != 0) return 0;
 80136d4:	4629      	mov	r1, r5
 80136d6:	1d20      	adds	r0, r4, #4
 80136d8:	f7ff f841 	bl	801275e <GetTime>
 80136dc:	b968      	cbnz	r0, 80136fa <ExtractDate+0x96>
    if (GetTime(&certTime->tm_sec , date, idx) != 0) return 0;
 80136de:	4629      	mov	r1, r5
 80136e0:	4620      	mov	r0, r4
 80136e2:	f7ff f83c 	bl	801275e <GetTime>
 80136e6:	fab0 f080 	clz	r0, r0
 80136ea:	0940      	lsrs	r0, r0, #5
 80136ec:	e006      	b.n	80136fc <ExtractDate+0x98>
        if (GetTime(&certTime->tm_year, date, idx) != 0) return 0;
 80136ee:	4632      	mov	r2, r6
 80136f0:	4629      	mov	r1, r5
 80136f2:	4640      	mov	r0, r8
 80136f4:	f7ff f833 	bl	801275e <GetTime>
 80136f8:	b110      	cbz	r0, 8013700 <ExtractDate+0x9c>
 80136fa:	2000      	movs	r0, #0
}
 80136fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        certTime->tm_year *= 100;
 8013700:	6963      	ldr	r3, [r4, #20]
 8013702:	2264      	movs	r2, #100	; 0x64
 8013704:	4353      	muls	r3, r2
 8013706:	e7c5      	b.n	8013694 <ExtractDate+0x30>

08013708 <DateGreaterThan>:
    if (a->tm_year > b->tm_year)
 8013708:	6942      	ldr	r2, [r0, #20]
 801370a:	694b      	ldr	r3, [r1, #20]
 801370c:	429a      	cmp	r2, r3
{
 801370e:	b530      	push	{r4, r5, lr}
    if (a->tm_year > b->tm_year)
 8013710:	dc29      	bgt.n	8013766 <DateGreaterThan+0x5e>
    if (a->tm_year == b->tm_year && a->tm_mon > b->tm_mon)
 8013712:	d12a      	bne.n	801376a <DateGreaterThan+0x62>
 8013714:	6902      	ldr	r2, [r0, #16]
 8013716:	690b      	ldr	r3, [r1, #16]
 8013718:	429a      	cmp	r2, r3
 801371a:	dc24      	bgt.n	8013766 <DateGreaterThan+0x5e>
    if (a->tm_year == b->tm_year && a->tm_mon == b->tm_mon &&
 801371c:	d125      	bne.n	801376a <DateGreaterThan+0x62>
 801371e:	68c2      	ldr	r2, [r0, #12]
 8013720:	68cb      	ldr	r3, [r1, #12]
 8013722:	429a      	cmp	r2, r3
 8013724:	dc1f      	bgt.n	8013766 <DateGreaterThan+0x5e>
    if (a->tm_year == b->tm_year && a->tm_mon == b->tm_mon &&
 8013726:	d103      	bne.n	8013730 <DateGreaterThan+0x28>
        a->tm_mday == b->tm_mday && a->tm_hour > b->tm_hour)
 8013728:	6885      	ldr	r5, [r0, #8]
 801372a:	688c      	ldr	r4, [r1, #8]
 801372c:	42a5      	cmp	r5, r4
 801372e:	dc1a      	bgt.n	8013766 <DateGreaterThan+0x5e>
    if (a->tm_year == b->tm_year && a->tm_mon == b->tm_mon &&
 8013730:	429a      	cmp	r2, r3
 8013732:	d11a      	bne.n	801376a <DateGreaterThan+0x62>
        a->tm_mday == b->tm_mday && a->tm_hour == b->tm_hour &&
 8013734:	6885      	ldr	r5, [r0, #8]
 8013736:	688c      	ldr	r4, [r1, #8]
 8013738:	42a5      	cmp	r5, r4
 801373a:	d103      	bne.n	8013744 <DateGreaterThan+0x3c>
 801373c:	6845      	ldr	r5, [r0, #4]
 801373e:	684c      	ldr	r4, [r1, #4]
 8013740:	42a5      	cmp	r5, r4
 8013742:	dc10      	bgt.n	8013766 <DateGreaterThan+0x5e>
    if (a->tm_year == b->tm_year && a->tm_mon == b->tm_mon &&
 8013744:	429a      	cmp	r2, r3
 8013746:	d110      	bne.n	801376a <DateGreaterThan+0x62>
        a->tm_mday == b->tm_mday && a->tm_hour == b->tm_hour &&
 8013748:	6882      	ldr	r2, [r0, #8]
 801374a:	688b      	ldr	r3, [r1, #8]
 801374c:	429a      	cmp	r2, r3
 801374e:	d10c      	bne.n	801376a <DateGreaterThan+0x62>
 8013750:	6842      	ldr	r2, [r0, #4]
 8013752:	684b      	ldr	r3, [r1, #4]
 8013754:	429a      	cmp	r2, r3
 8013756:	d108      	bne.n	801376a <DateGreaterThan+0x62>
        a->tm_min  == b->tm_min  && a->tm_sec > b->tm_sec)
 8013758:	6800      	ldr	r0, [r0, #0]
 801375a:	680b      	ldr	r3, [r1, #0]
 801375c:	4298      	cmp	r0, r3
 801375e:	bfd4      	ite	le
 8013760:	2000      	movle	r0, #0
 8013762:	2001      	movgt	r0, #1
}
 8013764:	bd30      	pop	{r4, r5, pc}
        return 1;
 8013766:	2001      	movs	r0, #1
 8013768:	e7fc      	b.n	8013764 <DateGreaterThan+0x5c>
    return 0; /* false */
 801376a:	2000      	movs	r0, #0
 801376c:	e7fa      	b.n	8013764 <DateGreaterThan+0x5c>
	...

08013770 <wc_Time>:
    if (timeFunc != NULL) {
 8013770:	4b05      	ldr	r3, [pc, #20]	; (8013788 <wc_Time+0x18>)
{
 8013772:	b510      	push	{r4, lr}
    if (timeFunc != NULL) {
 8013774:	681c      	ldr	r4, [r3, #0]
 8013776:	b11c      	cbz	r4, 8013780 <wc_Time+0x10>
        return timeFunc(t);
 8013778:	4623      	mov	r3, r4
}
 801377a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return timeFunc(t);
 801377e:	4718      	bx	r3
    return XTIME(t);
 8013780:	f7ec fce2 	bl	8000148 <my_time>
}
 8013784:	4621      	mov	r1, r4
 8013786:	bd10      	pop	{r4, pc}
 8013788:	20000080 	.word	0x20000080

0801378c <wc_ValidateDate>:
{
 801378c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int    i = 0;
 801378e:	2400      	movs	r4, #0
{
 8013790:	b091      	sub	sp, #68	; 0x44
 8013792:	4605      	mov	r5, r0
    ltime = wc_Time(0);
 8013794:	4620      	mov	r0, r4
{
 8013796:	460f      	mov	r7, r1
 8013798:	4616      	mov	r6, r2
    int    diffHH = 0, diffMM = 0;
 801379a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801379e:	9403      	str	r4, [sp, #12]
    ltime = wc_Time(0);
 80137a0:	f7ff ffe6 	bl	8013770 <wc_Time>
    if (!ExtractDate(date, format, &certTime, &i)) {
 80137a4:	ab01      	add	r3, sp, #4
    ltime = wc_Time(0);
 80137a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    if (!ExtractDate(date, format, &certTime, &i)) {
 80137aa:	aa07      	add	r2, sp, #28
 80137ac:	4639      	mov	r1, r7
 80137ae:	4628      	mov	r0, r5
 80137b0:	f7ff ff58 	bl	8013664 <ExtractDate>
 80137b4:	b910      	cbnz	r0, 80137bc <wc_ValidateDate+0x30>
        return 0;
 80137b6:	2000      	movs	r0, #0
}
 80137b8:	b011      	add	sp, #68	; 0x44
 80137ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((date[i] == '+') || (date[i] == '-')) {
 80137bc:	9a01      	ldr	r2, [sp, #4]
 80137be:	5cab      	ldrb	r3, [r5, r2]
 80137c0:	2b2b      	cmp	r3, #43	; 0x2b
 80137c2:	d001      	beq.n	80137c8 <wc_ValidateDate+0x3c>
 80137c4:	2b2d      	cmp	r3, #45	; 0x2d
 80137c6:	d12f      	bne.n	8013828 <wc_ValidateDate+0x9c>
        diffSign = date[i++] == '+' ? 1 : -1 ;
 80137c8:	3201      	adds	r2, #1
 80137ca:	2b2b      	cmp	r3, #43	; 0x2b
 80137cc:	9201      	str	r2, [sp, #4]
        if (GetTime(&diffHH, date, &i) != 0)
 80137ce:	4629      	mov	r1, r5
 80137d0:	aa01      	add	r2, sp, #4
 80137d2:	a802      	add	r0, sp, #8
        diffSign = date[i++] == '+' ? 1 : -1 ;
 80137d4:	bf0c      	ite	eq
 80137d6:	2701      	moveq	r7, #1
 80137d8:	f04f 37ff 	movne.w	r7, #4294967295	; 0xffffffff
        if (GetTime(&diffHH, date, &i) != 0)
 80137dc:	f7fe ffbf 	bl	801275e <GetTime>
 80137e0:	2800      	cmp	r0, #0
 80137e2:	d1e8      	bne.n	80137b6 <wc_ValidateDate+0x2a>
        if (GetTime(&diffMM, date, &i) != 0)
 80137e4:	4629      	mov	r1, r5
 80137e6:	a803      	add	r0, sp, #12
 80137e8:	f7fe ffb9 	bl	801275e <GetTime>
 80137ec:	2800      	cmp	r0, #0
 80137ee:	d1e2      	bne.n	80137b6 <wc_ValidateDate+0x2a>
        timeDiff = diffSign * (diffHH*60 + diffMM) * 60 ;
 80137f0:	e9dd 4302 	ldrd	r4, r3, [sp, #8]
 80137f4:	223c      	movs	r2, #60	; 0x3c
 80137f6:	fb02 3404 	mla	r4, r2, r4, r3
 80137fa:	437c      	muls	r4, r7
 80137fc:	4354      	muls	r4, r2
    ltime -= (time_t)timeDiff;
 80137fe:	9b04      	ldr	r3, [sp, #16]
 8013800:	9a05      	ldr	r2, [sp, #20]
 8013802:	1b1b      	subs	r3, r3, r4
 8013804:	eb62 74e4 	sbc.w	r4, r2, r4, asr #31
    localTime = XGMTIME(&ltime, tmpTime);
 8013808:	a804      	add	r0, sp, #16
    ltime -= (time_t)timeDiff;
 801380a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    localTime = XGMTIME(&ltime, tmpTime);
 801380e:	f009 fc79 	bl	801d104 <gmtime>
 8013812:	4601      	mov	r1, r0
    if (localTime == NULL) {
 8013814:	2800      	cmp	r0, #0
 8013816:	d0ce      	beq.n	80137b6 <wc_ValidateDate+0x2a>
    if (dateType == BEFORE) {
 8013818:	b94e      	cbnz	r6, 801382e <wc_ValidateDate+0xa2>
    return DateGreaterThan(b,a);
 801381a:	a807      	add	r0, sp, #28
        if (DateGreaterThan(localTime, &certTime)) {
 801381c:	f7ff ff74 	bl	8013708 <DateGreaterThan>
 8013820:	fab0 f080 	clz	r0, r0
 8013824:	0940      	lsrs	r0, r0, #5
 8013826:	e7c7      	b.n	80137b8 <wc_ValidateDate+0x2c>
    } else if (date[i] != 'Z') {
 8013828:	2b5a      	cmp	r3, #90	; 0x5a
 801382a:	d1c4      	bne.n	80137b6 <wc_ValidateDate+0x2a>
 801382c:	e7e7      	b.n	80137fe <wc_ValidateDate+0x72>
        if (DateGreaterThan(localTime, &certTime)) {
 801382e:	a907      	add	r1, sp, #28
 8013830:	e7f4      	b.n	801381c <wc_ValidateDate+0x90>

08013832 <GetDate>:
{
 8013832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013834:	4604      	mov	r4, r0
        cert->beforeDate = &cert->source[cert->srcIdx];
 8013836:	e9d0 079d 	ldrd	r0, r7, [r0, #628]	; 0x274
{
 801383a:	b08f      	sub	sp, #60	; 0x3c
 801383c:	4616      	mov	r6, r2
    const byte *datePtr = NULL;
 801383e:	2200      	movs	r2, #0
 8013840:	9205      	str	r2, [sp, #20]
    if (dateType == BEFORE)
 8013842:	460d      	mov	r5, r1
        cert->beforeDate = &cert->source[cert->srcIdx];
 8013844:	19c2      	adds	r2, r0, r7
    if (dateType == BEFORE)
 8013846:	bb09      	cbnz	r1, 801388c <GetDate+0x5a>
        cert->beforeDate = &cert->source[cert->srcIdx];
 8013848:	f8c4 2300 	str.w	r2, [r4, #768]	; 0x300
    ret = GetDateInfo(cert->source, &cert->srcIdx, &datePtr, &format,
 801384c:	9301      	str	r3, [sp, #4]
 801384e:	ab04      	add	r3, sp, #16
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	aa05      	add	r2, sp, #20
 8013854:	f10d 030f 	add.w	r3, sp, #15
 8013858:	f504 711e 	add.w	r1, r4, #632	; 0x278
 801385c:	f7ff f88f 	bl	801297e <GetDateInfo>
    if (ret < 0)
 8013860:	2800      	cmp	r0, #0
 8013862:	db11      	blt.n	8013888 <GetDate+0x56>
    XMEMSET(date, 0, MAX_DATE_SIZE);
 8013864:	2220      	movs	r2, #32
 8013866:	2100      	movs	r1, #0
 8013868:	a806      	add	r0, sp, #24
 801386a:	f00a f8c3 	bl	801d9f4 <memset>
    XMEMCPY(date, datePtr, (size_t)length);
 801386e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013872:	a806      	add	r0, sp, #24
 8013874:	f00a f896 	bl	801d9a4 <memcpy>
    if (dateType == BEFORE)
 8013878:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
        cert->beforeDateLen = (int)(cert->srcIdx - startIdx);
 801387c:	1bdb      	subs	r3, r3, r7
    if (dateType == BEFORE)
 801387e:	b945      	cbnz	r5, 8013892 <GetDate+0x60>
        cert->beforeDateLen = (int)(cert->srcIdx - startIdx);
 8013880:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    if (verify != NO_VERIFY && verify != VERIFY_SKIP_DATE &&
 8013884:	b946      	cbnz	r6, 8013898 <GetDate+0x66>
    return 0;
 8013886:	2000      	movs	r0, #0
}
 8013888:	b00f      	add	sp, #60	; 0x3c
 801388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cert->afterDate = &cert->source[cert->srcIdx];
 801388c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
 8013890:	e7dc      	b.n	801384c <GetDate+0x1a>
        cert->afterDateLen  = (int)(cert->srcIdx - startIdx);
 8013892:	f8c4 330c 	str.w	r3, [r4, #780]	; 0x30c
 8013896:	e7f5      	b.n	8013884 <GetDate+0x52>
    if (verify != NO_VERIFY && verify != VERIFY_SKIP_DATE &&
 8013898:	2e05      	cmp	r6, #5
 801389a:	d0f4      	beq.n	8013886 <GetDate+0x54>
            !XVALIDATE_DATE(date, format, dateType)) {
 801389c:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80138a0:	462a      	mov	r2, r5
 80138a2:	a806      	add	r0, sp, #24
 80138a4:	f7ff ff72 	bl	801378c <wc_ValidateDate>
    if (verify != NO_VERIFY && verify != VERIFY_SKIP_DATE &&
 80138a8:	2800      	cmp	r0, #0
 80138aa:	d1ec      	bne.n	8013886 <GetDate+0x54>
        if (dateType == BEFORE) {
 80138ac:	f06f 0095 	mvn.w	r0, #149	; 0x95
 80138b0:	1b40      	subs	r0, r0, r5
 80138b2:	e7e9      	b.n	8013888 <GetDate+0x56>

080138b4 <SetLength>:
    if (length < ASN_LONG_LENGTH) {
 80138b4:	287f      	cmp	r0, #127	; 0x7f
{
 80138b6:	b570      	push	{r4, r5, r6, lr}
    if (length < ASN_LONG_LENGTH) {
 80138b8:	d91c      	bls.n	80138f4 <SetLength+0x40>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 80138ba:	0c03      	lsrs	r3, r0, #16
 80138bc:	d11e      	bne.n	80138fc <SetLength+0x48>
 80138be:	0a03      	lsrs	r3, r0, #8
 80138c0:	bf0c      	ite	eq
 80138c2:	2301      	moveq	r3, #1
 80138c4:	2302      	movne	r3, #2
        byte j = (byte)BytePrecision(length);
 80138c6:	b2da      	uxtb	r2, r3
        if (output) {
 80138c8:	b111      	cbz	r1, 80138d0 <SetLength+0x1c>
            output[i] = (byte)(j | ASN_LONG_LENGTH);
 80138ca:	f062 047f 	orn	r4, r2, #127	; 0x7f
 80138ce:	700c      	strb	r4, [r1, #0]
 80138d0:	3b01      	subs	r3, #1
 80138d2:	00db      	lsls	r3, r3, #3
 80138d4:	1c4d      	adds	r5, r1, #1
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 80138d6:	4614      	mov	r4, r2
            if (output) {
 80138d8:	b111      	cbz	r1, 80138e0 <SetLength+0x2c>
                output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
 80138da:	fa20 f603 	lsr.w	r6, r0, r3
 80138de:	702e      	strb	r6, [r5, #0]
        for (; j > 0; --j) {
 80138e0:	3c01      	subs	r4, #1
 80138e2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80138e6:	f1a3 0308 	sub.w	r3, r3, #8
 80138ea:	f105 0501 	add.w	r5, r5, #1
 80138ee:	d1f3      	bne.n	80138d8 <SetLength+0x24>
            i++;
 80138f0:	1c50      	adds	r0, r2, #1
}
 80138f2:	bd70      	pop	{r4, r5, r6, pc}
        if (output) {
 80138f4:	b101      	cbz	r1, 80138f8 <SetLength+0x44>
            output[i] = (byte)length;
 80138f6:	7008      	strb	r0, [r1, #0]
        i++;
 80138f8:	2001      	movs	r0, #1
    return i;
 80138fa:	e7fa      	b.n	80138f2 <SetLength+0x3e>
    for (i = (word32)sizeof(value) - 1; i; --i)
 80138fc:	2303      	movs	r3, #3
 80138fe:	e7e2      	b.n	80138c6 <SetLength+0x12>

08013900 <SetASNInt>:
{
 8013900:	b538      	push	{r3, r4, r5, lr}
    if (output) {
 8013902:	4614      	mov	r4, r2
 8013904:	b10a      	cbz	r2, 801390a <SetASNInt+0xa>
        output[idx] = ASN_INTEGER;
 8013906:	2302      	movs	r3, #2
 8013908:	7013      	strb	r3, [r2, #0]
    if (firstByte & 0x80) {
 801390a:	b24d      	sxtb	r5, r1
 801390c:	2d00      	cmp	r5, #0
        len++;
 801390e:	bfb8      	it	lt
 8013910:	3001      	addlt	r0, #1
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 8013912:	b164      	cbz	r4, 801392e <SetASNInt+0x2e>
 8013914:	1c61      	adds	r1, r4, #1
 8013916:	f7ff ffcd 	bl	80138b4 <SetLength>
    if (firstByte & 0x80) {
 801391a:	2d00      	cmp	r5, #0
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 801391c:	4603      	mov	r3, r0
 801391e:	f100 0001 	add.w	r0, r0, #1
    if (firstByte & 0x80) {
 8013922:	da03      	bge.n	801392c <SetASNInt+0x2c>
        if (output) {
 8013924:	b10c      	cbz	r4, 801392a <SetASNInt+0x2a>
            output[idx] = 0x00;
 8013926:	2200      	movs	r2, #0
 8013928:	5422      	strb	r2, [r4, r0]
        idx++;
 801392a:	1c98      	adds	r0, r3, #2
}
 801392c:	bd38      	pop	{r3, r4, r5, pc}
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 801392e:	4621      	mov	r1, r4
 8013930:	e7f1      	b.n	8013916 <SetASNInt+0x16>

08013932 <SetASNIntMP>:
{
 8013932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013936:	460d      	mov	r5, r1
 8013938:	4680      	mov	r8, r0
 801393a:	4617      	mov	r7, r2
    leadingBit = mp_leading_bit(n);
 801393c:	f009 fafb 	bl	801cf36 <mp_leading_bit>
 8013940:	4606      	mov	r6, r0
    length = mp_unsigned_bin_size(n);
 8013942:	4640      	mov	r0, r8
 8013944:	f008 fb6e 	bl	801c024 <mp_unsigned_bin_size>
    if (maxSz >= 0 && (1 + length + (leadingBit ? 1 : 0)) > maxSz)
 8013948:	2d00      	cmp	r5, #0
    length = mp_unsigned_bin_size(n);
 801394a:	4604      	mov	r4, r0
    if (maxSz >= 0 && (1 + length + (leadingBit ? 1 : 0)) > maxSz)
 801394c:	db09      	blt.n	8013962 <SetASNIntMP+0x30>
 801394e:	1c43      	adds	r3, r0, #1
 8013950:	2e00      	cmp	r6, #0
 8013952:	bf18      	it	ne
 8013954:	3301      	addne	r3, #1
 8013956:	42ab      	cmp	r3, r5
 8013958:	dd03      	ble.n	8013962 <SetASNIntMP+0x30>
        return BUFFER_E;
 801395a:	f06f 0083 	mvn.w	r0, #131	; 0x83
}
 801395e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    idx = SetASNInt(length, (byte)(leadingBit ? 0x80U : 0x00U), output);
 8013962:	2e00      	cmp	r6, #0
 8013964:	bf14      	ite	ne
 8013966:	2180      	movne	r1, #128	; 0x80
 8013968:	2100      	moveq	r1, #0
 801396a:	463a      	mov	r2, r7
 801396c:	4620      	mov	r0, r4
 801396e:	f7ff ffc7 	bl	8013900 <SetASNInt>
    if (maxSz >= 0 && (idx + length) > maxSz)
 8013972:	2d00      	cmp	r5, #0
    idx = SetASNInt(length, (byte)(leadingBit ? 0x80U : 0x00U), output);
 8013974:	4606      	mov	r6, r0
    if (maxSz >= 0 && (idx + length) > maxSz)
 8013976:	db02      	blt.n	801397e <SetASNIntMP+0x4c>
 8013978:	1823      	adds	r3, r4, r0
 801397a:	42ab      	cmp	r3, r5
 801397c:	dced      	bgt.n	801395a <SetASNIntMP+0x28>
    if (output) {
 801397e:	b90f      	cbnz	r7, 8013984 <SetASNIntMP+0x52>
    idx += length;
 8013980:	19a0      	adds	r0, r4, r6
    return idx;
 8013982:	e7ec      	b.n	801395e <SetASNIntMP+0x2c>
        int err = mp_to_unsigned_bin(n, output + idx);
 8013984:	19b9      	adds	r1, r7, r6
 8013986:	4640      	mov	r0, r8
 8013988:	f009 fac7 	bl	801cf1a <mp_to_unsigned_bin>
        if (err != MP_OKAY)
 801398c:	2800      	cmp	r0, #0
 801398e:	d0f7      	beq.n	8013980 <SetASNIntMP+0x4e>
            return MP_TO_E;
 8013990:	f06f 0070 	mvn.w	r0, #112	; 0x70
 8013994:	e7e3      	b.n	801395e <SetASNIntMP+0x2c>

08013996 <SetHeader>:
{
 8013996:	b508      	push	{r3, lr}
 8013998:	4603      	mov	r3, r0
 801399a:	4608      	mov	r0, r1
    if (output) {
 801399c:	4611      	mov	r1, r2
 801399e:	b10a      	cbz	r2, 80139a4 <SetHeader+0xe>
        output[0] = tag;
 80139a0:	f801 3b01 	strb.w	r3, [r1], #1
    return SetLength(len, output ? output + ASN_TAG_SZ : NULL) + ASN_TAG_SZ;
 80139a4:	f7ff ff86 	bl	80138b4 <SetLength>
}
 80139a8:	3001      	adds	r0, #1
 80139aa:	bd08      	pop	{r3, pc}

080139ac <SetSequence>:
{
 80139ac:	460a      	mov	r2, r1
    return SetHeader(ASN_SEQUENCE | ASN_CONSTRUCTED, len, output);
 80139ae:	4601      	mov	r1, r0
 80139b0:	2030      	movs	r0, #48	; 0x30
 80139b2:	f7ff bff0 	b.w	8013996 <SetHeader>

080139b6 <InitSignatureCtx>:
{
 80139b6:	b570      	push	{r4, r5, r6, lr}
 80139b8:	460d      	mov	r5, r1
 80139ba:	4616      	mov	r6, r2
    if (sigCtx) {
 80139bc:	4604      	mov	r4, r0
 80139be:	b128      	cbz	r0, 80139cc <InitSignatureCtx+0x16>
        XMEMSET(sigCtx, 0, sizeof(SignatureCtx));
 80139c0:	2224      	movs	r2, #36	; 0x24
 80139c2:	2100      	movs	r1, #0
 80139c4:	f00a f816 	bl	801d9f4 <memset>
        sigCtx->devId = devId;
 80139c8:	6126      	str	r6, [r4, #16]
        sigCtx->heap = heap;
 80139ca:	6025      	str	r5, [r4, #0]
}
 80139cc:	bd70      	pop	{r4, r5, r6, pc}

080139ce <InitDecodedCert_ex>:
{
 80139ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80139d6:	460f      	mov	r7, r1
 80139d8:	4616      	mov	r6, r2
 80139da:	461d      	mov	r5, r3
    if (cert != NULL) {
 80139dc:	4604      	mov	r4, r0
 80139de:	b1c8      	cbz	r0, 8013a14 <InitDecodedCert_ex+0x46>
        XMEMSET(cert, 0, sizeof(DecodedCert));
 80139e0:	f44f 7256 	mov.w	r2, #856	; 0x358
 80139e4:	2100      	movs	r1, #0
 80139e6:	f00a f805 	bl	801d9f4 <memset>
        cert->subjectCNEnc    = CTC_UTF8;
 80139ea:	230c      	movs	r3, #12
 80139ec:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        cert->subject[0]      = '\0';
 80139f0:	2300      	movs	r3, #0
 80139f2:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
        cert->maxPathLen      = WOLFSSL_MAX_PATH_LEN;
 80139f6:	237f      	movs	r3, #127	; 0x7f
 80139f8:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
        cert->heap            = heap;
 80139fc:	e9c4 659f 	strd	r6, r5, [r4, #636]	; 0x27c
        cert->source          = source;  /* don't own */
 8013a00:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
        InitSignatureCtx(&cert->sigCtx, heap, devId);
 8013a04:	4642      	mov	r2, r8
 8013a06:	4629      	mov	r1, r5
 8013a08:	f504 704a 	add.w	r0, r4, #808	; 0x328
}
 8013a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        InitSignatureCtx(&cert->sigCtx, heap, devId);
 8013a10:	f7ff bfd1 	b.w	80139b6 <InitSignatureCtx>
}
 8013a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a18 <InitDecodedCert>:
{
 8013a18:	b513      	push	{r0, r1, r4, lr}
    InitDecodedCert_ex(cert, source, inSz, heap, INVALID_DEVID);
 8013a1a:	f06f 0401 	mvn.w	r4, #1
 8013a1e:	9400      	str	r4, [sp, #0]
 8013a20:	f7ff ffd5 	bl	80139ce <InitDecodedCert_ex>
}
 8013a24:	b002      	add	sp, #8
 8013a26:	bd10      	pop	{r4, pc}

08013a28 <FreeSignatureCtx>:
{
 8013a28:	b510      	push	{r4, lr}
    if (sigCtx == NULL)
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	b1c8      	cbz	r0, 8013a62 <FreeSignatureCtx+0x3a>
    if (sigCtx->digest) {
 8013a2e:	6840      	ldr	r0, [r0, #4]
 8013a30:	b118      	cbz	r0, 8013a3a <FreeSignatureCtx+0x12>
        XFREE(sigCtx->digest, sigCtx->heap, DYNAMIC_TYPE_DIGEST);
 8013a32:	f009 ff9f 	bl	801d974 <free>
        sigCtx->digest = NULL;
 8013a36:	2300      	movs	r3, #0
 8013a38:	6063      	str	r3, [r4, #4]
    if (sigCtx->key.ptr) {
 8013a3a:	68e0      	ldr	r0, [r4, #12]
 8013a3c:	b178      	cbz	r0, 8013a5e <FreeSignatureCtx+0x36>
        switch (sigCtx->keyOID) {
 8013a3e:	6a23      	ldr	r3, [r4, #32]
 8013a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a44:	d00e      	beq.n	8013a64 <FreeSignatureCtx+0x3c>
 8013a46:	f240 2206 	movw	r2, #518	; 0x206
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d105      	bne.n	8013a5a <FreeSignatureCtx+0x32>
                wc_ecc_free(sigCtx->key.ecc);
 8013a4e:	f7f9 f944 	bl	800ccda <wc_ecc_free>
                XFREE(sigCtx->key.ed25519, sigCtx->heap, DYNAMIC_TYPE_ED25519);
 8013a52:	68e0      	ldr	r0, [r4, #12]
 8013a54:	b108      	cbz	r0, 8013a5a <FreeSignatureCtx+0x32>
 8013a56:	f009 ff8d 	bl	801d974 <free>
        sigCtx->key.ptr = NULL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	60e3      	str	r3, [r4, #12]
    sigCtx->state = SIG_STATE_BEGIN;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	6163      	str	r3, [r4, #20]
}
 8013a62:	bd10      	pop	{r4, pc}
                wc_ed25519_free(sigCtx->key.ed25519);
 8013a64:	f002 faef 	bl	8016046 <wc_ed25519_free>
 8013a68:	e7f3      	b.n	8013a52 <FreeSignatureCtx+0x2a>

08013a6a <FreeDecodedCert>:
{
 8013a6a:	b510      	push	{r4, lr}
    if (cert == NULL)
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d036      	beq.n	8013ae0 <FreeDecodedCert+0x76>
    if (cert->subjectCNStored == 1) {
 8013a72:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
 8013a76:	07da      	lsls	r2, r3, #31
 8013a78:	d503      	bpl.n	8013a82 <FreeDecodedCert+0x18>
        XFREE(cert->subjectCN, cert->heap, DYNAMIC_TYPE_SUBJECT_CN);
 8013a7a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8013a7c:	b108      	cbz	r0, 8013a82 <FreeDecodedCert+0x18>
 8013a7e:	f009 ff79 	bl	801d974 <free>
    if (cert->pubKeyStored == 1) {
 8013a82:	68a3      	ldr	r3, [r4, #8]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d103      	bne.n	8013a90 <FreeDecodedCert+0x26>
        XFREE((void*)cert->publicKey, cert->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8013a88:	6820      	ldr	r0, [r4, #0]
 8013a8a:	b108      	cbz	r0, 8013a90 <FreeDecodedCert+0x26>
 8013a8c:	f009 ff72 	bl	801d974 <free>
    if (cert->weOwnAltNames && cert->altNames)
 8013a90:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
 8013a94:	065b      	lsls	r3, r3, #25
 8013a96:	d505      	bpl.n	8013aa4 <FreeDecodedCert+0x3a>
 8013a98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013a9a:	b118      	cbz	r0, 8013aa4 <FreeDecodedCert+0x3a>
        FreeAltNames(cert->altNames, cert->heap);
 8013a9c:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
 8013aa0:	f7ff fc07 	bl	80132b2 <FreeAltNames>
    if (cert->altEmailNames)
 8013aa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013aa6:	b118      	cbz	r0, 8013ab0 <FreeDecodedCert+0x46>
        FreeAltNames(cert->altEmailNames, cert->heap);
 8013aa8:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
 8013aac:	f7ff fc01 	bl	80132b2 <FreeAltNames>
    if (cert->altDirNames)
 8013ab0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013ab2:	b118      	cbz	r0, 8013abc <FreeDecodedCert+0x52>
        FreeAltNames(cert->altDirNames, cert->heap);
 8013ab4:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
 8013ab8:	f7ff fbfb 	bl	80132b2 <FreeAltNames>
    if (cert->permittedNames)
 8013abc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013abe:	b118      	cbz	r0, 8013ac8 <FreeDecodedCert+0x5e>
        FreeNameSubtrees(cert->permittedNames, cert->heap);
 8013ac0:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
 8013ac4:	f7ff fc0f 	bl	80132e6 <FreeNameSubtrees>
    if (cert->excludedNames)
 8013ac8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013aca:	b118      	cbz	r0, 8013ad4 <FreeDecodedCert+0x6a>
        FreeNameSubtrees(cert->excludedNames, cert->heap);
 8013acc:	f8d4 1280 	ldr.w	r1, [r4, #640]	; 0x280
 8013ad0:	f7ff fc09 	bl	80132e6 <FreeNameSubtrees>
    FreeSignatureCtx(&cert->sigCtx);
 8013ad4:	f504 704a 	add.w	r0, r4, #808	; 0x328
}
 8013ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    FreeSignatureCtx(&cert->sigCtx);
 8013adc:	f7ff bfa4 	b.w	8013a28 <FreeSignatureCtx>
}
 8013ae0:	bd10      	pop	{r4, pc}
	...

08013ae4 <wc_CertGetPubKey>:
 * @return  BAD_FUNC_ARG when cert, pubKey or pubKeySz is NULL.
 * @return  ASN_PARSE_E when certificate encoding is invalid.
 */
int wc_CertGetPubKey(const byte* cert, word32 certSz,
    const unsigned char** pubKey, word32* pubKeySz)
{
 8013ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ae8:	461f      	mov	r7, r3
    int ret = 0;
    int l;
    word32 o = 0;
 8013aea:	2300      	movs	r3, #0
{
 8013aec:	4689      	mov	r9, r1
 8013aee:	4690      	mov	r8, r2
    word32 o = 0;
 8013af0:	9303      	str	r3, [sp, #12]
        /* PublicKey: BIT_STRING  */
        { ASN_BIT_STRING,                 DECODE_INSTR_IN  , 0 },
    };

    /* Validate parameters. */
    if ((cert == NULL) || (pubKey == NULL) || (pubKeySz == NULL)) {
 8013af2:	4604      	mov	r4, r0
 8013af4:	b1b8      	cbz	r0, 8013b26 <wc_CertGetPubKey+0x42>
 8013af6:	b1b2      	cbz	r2, 8013b26 <wc_CertGetPubKey+0x42>
        ret = BAD_FUNC_ARG;
 8013af8:	429f      	cmp	r7, r3
 8013afa:	bf14      	ite	ne
 8013afc:	461d      	movne	r5, r3
 8013afe:	f06f 05ac 	mvneq.w	r5, #172	; 0xac
    }

    /* Process each instruction to take us to public key data. */
    for (i = 0; (ret == 0) && (i < (int)(sizeof(ops) / sizeof(*ops))); i++) {
        DecodeInstr op = ops[i];
 8013b02:	f8df a070 	ldr.w	sl, [pc, #112]	; 8013b74 <wc_CertGetPubKey+0x90>

        /* Check the current ASN.1 item has the expected tag. */
        if (cert[o] != op.tag) {
            /* If not optional then error, otherwise skip op. */
            if (!op.optional) {
                ret = ASN_PARSE_E;
 8013b06:	2600      	movs	r6, #0
    for (i = 0; (ret == 0) && (i < (int)(sizeof(ops) / sizeof(*ops))); i++) {
 8013b08:	b94d      	cbnz	r5, 8013b1e <wc_CertGetPubKey+0x3a>
 8013b0a:	2e0b      	cmp	r6, #11
        if (cert[o] != op.tag) {
 8013b0c:	9803      	ldr	r0, [sp, #12]
    for (i = 0; (ret == 0) && (i < (int)(sizeof(ops) / sizeof(*ops))); i++) {
 8013b0e:	d10d      	bne.n	8013b2c <wc_CertGetPubKey+0x48>

    if (ret == 0) {
        /* Return the public key data and length.
         * Skip first byte of BIT_STRING data: unused bits. */
        *pubKey = cert + o + 1;
        *pubKeySz = (word32)(l - 1);
 8013b10:	9b02      	ldr	r3, [sp, #8]
        *pubKey = cert + o + 1;
 8013b12:	3001      	adds	r0, #1
 8013b14:	4420      	add	r0, r4
        *pubKeySz = (word32)(l - 1);
 8013b16:	3b01      	subs	r3, #1
        *pubKey = cert + o + 1;
 8013b18:	f8c8 0000 	str.w	r0, [r8]
        *pubKeySz = (word32)(l - 1);
 8013b1c:	603b      	str	r3, [r7, #0]
    }

    return ret;
}
 8013b1e:	4628      	mov	r0, r5
 8013b20:	b004      	add	sp, #16
 8013b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = BAD_FUNC_ARG;
 8013b26:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8013b2a:	e7ea      	b.n	8013b02 <wc_CertGetPubKey+0x1e>
        DecodeInstr op = ops[i];
 8013b2c:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
        if (cert[o] != op.tag) {
 8013b30:	5c22      	ldrb	r2, [r4, r0]
        DecodeInstr op = ops[i];
 8013b32:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (cert[o] != op.tag) {
 8013b36:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d007      	beq.n	8013b4e <wc_CertGetPubKey+0x6a>
            if (!op.optional) {
 8013b3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013b42:	079a      	lsls	r2, r3, #30
 8013b44:	d401      	bmi.n	8013b4a <wc_CertGetPubKey+0x66>
                ret = ASN_PARSE_E;
 8013b46:	f06f 058b 	mvn.w	r5, #139	; 0x8b
    for (i = 0; (ret == 0) && (i < (int)(sizeof(ops) / sizeof(*ops))); i++) {
 8013b4a:	3601      	adds	r6, #1
 8013b4c:	e7dc      	b.n	8013b08 <wc_CertGetPubKey+0x24>
            o++;
 8013b4e:	3001      	adds	r0, #1
 8013b50:	9003      	str	r0, [sp, #12]
            if (GetLength(cert, &o, &l, certSz) < 0) {
 8013b52:	464b      	mov	r3, r9
 8013b54:	aa02      	add	r2, sp, #8
 8013b56:	a903      	add	r1, sp, #12
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f7fe ff09 	bl	8012970 <GetLength>
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	dbf1      	blt.n	8013b46 <wc_CertGetPubKey+0x62>
            else if (op.op == DECODE_INSTR_OVER) {
 8013b62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013b66:	07db      	lsls	r3, r3, #31
                o += (word32)l;
 8013b68:	bf42      	ittt	mi
 8013b6a:	e9dd 2302 	ldrdmi	r2, r3, [sp, #8]
 8013b6e:	189b      	addmi	r3, r3, r2
 8013b70:	9303      	strmi	r3, [sp, #12]
 8013b72:	e7ea      	b.n	8013b4a <wc_CertGetPubKey+0x66>
 8013b74:	08022d16 	.word	0x08022d16

08013b78 <MakeSigner>:
    return ret;
}

/* Create and init an new signer */
Signer* MakeSigner(void* heap)
{
 8013b78:	b510      	push	{r4, lr}
    Signer* signer = (Signer*) XMALLOC(sizeof(Signer), heap,
 8013b7a:	204c      	movs	r0, #76	; 0x4c
 8013b7c:	f009 fef2 	bl	801d964 <malloc>
                                       DYNAMIC_TYPE_SIGNER);
    if (signer) {
 8013b80:	4604      	mov	r4, r0
 8013b82:	b118      	cbz	r0, 8013b8c <MakeSigner+0x14>
        XMEMSET(signer, 0, sizeof(Signer));
 8013b84:	224c      	movs	r2, #76	; 0x4c
 8013b86:	2100      	movs	r1, #0
 8013b88:	f009 ff34 	bl	801d9f4 <memset>
    }
    (void)heap;

    return signer;
}
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	bd10      	pop	{r4, pc}

08013b90 <FreeSigner>:
 * @param [in, out] signer  On in, signer object.
 *                          On out, pointer is no longer valid.
 * @param [in]      heap    Dynamic memory hint.
 */
void FreeSigner(Signer* signer, void* heap)
{
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4604      	mov	r4, r0
    (void)signer;
    (void)heap;
    XFREE(signer->name, heap, DYNAMIC_TYPE_SUBJECT_CN);
 8013b94:	6940      	ldr	r0, [r0, #20]
{
 8013b96:	460d      	mov	r5, r1
    XFREE(signer->name, heap, DYNAMIC_TYPE_SUBJECT_CN);
 8013b98:	b108      	cbz	r0, 8013b9e <FreeSigner+0xe>
 8013b9a:	f009 feeb 	bl	801d974 <free>
    XFREE((void*)signer->publicKey, heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8013b9e:	68e0      	ldr	r0, [r4, #12]
 8013ba0:	b108      	cbz	r0, 8013ba6 <FreeSigner+0x16>
 8013ba2:	f009 fee7 	bl	801d974 <free>
#ifndef IGNORE_NAME_CONSTRAINTS
    if (signer->permittedNames)
 8013ba6:	69a0      	ldr	r0, [r4, #24]
 8013ba8:	b110      	cbz	r0, 8013bb0 <FreeSigner+0x20>
        FreeNameSubtrees(signer->permittedNames, heap);
 8013baa:	4629      	mov	r1, r5
 8013bac:	f7ff fb9b 	bl	80132e6 <FreeNameSubtrees>
    if (signer->excludedNames)
 8013bb0:	69e0      	ldr	r0, [r4, #28]
 8013bb2:	b110      	cbz	r0, 8013bba <FreeSigner+0x2a>
        FreeNameSubtrees(signer->excludedNames, heap);
 8013bb4:	4629      	mov	r1, r5
 8013bb6:	f7ff fb96 	bl	80132e6 <FreeNameSubtrees>
#endif
#ifdef WOLFSSL_SIGNER_DER_CERT
    FreeDer(&signer->derCert);
#endif
    XFREE(signer, heap, DYNAMIC_TYPE_SIGNER);
 8013bba:	4620      	mov	r0, r4
}
 8013bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    XFREE(signer, heap, DYNAMIC_TYPE_SIGNER);
 8013bc0:	f009 bed8 	b.w	801d974 <free>

08013bc4 <FreeSignerTable>:
 * @param [in, out] table   Array of signer objects.
 * @param [in]      rows    Number of entries in table.
 * @param [in]      heap    Dynamic memory hint.
 */
void FreeSignerTable(Signer** table, int rows, void* heap)
{
 8013bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc8:	460d      	mov	r5, r1
 8013bca:	4617      	mov	r7, r2
 8013bcc:	1f04      	subs	r4, r0, #4
    int i;

    for (i = 0; i < rows; i++) {
 8013bce:	2600      	movs	r6, #0
 8013bd0:	42ae      	cmp	r6, r5
 8013bd2:	db01      	blt.n	8013bd8 <FreeSignerTable+0x14>
            FreeSigner(signer, heap);
            signer = next;
        }
        table[i] = NULL;
    }
}
 8013bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Signer* signer = table[i];
 8013bd8:	6860      	ldr	r0, [r4, #4]
        while (signer) {
 8013bda:	b918      	cbnz	r0, 8013be4 <FreeSignerTable+0x20>
        table[i] = NULL;
 8013bdc:	f844 0f04 	str.w	r0, [r4, #4]!
    for (i = 0; i < rows; i++) {
 8013be0:	3601      	adds	r6, #1
 8013be2:	e7f5      	b.n	8013bd0 <FreeSignerTable+0xc>
            Signer* next = signer->next;
 8013be4:	f8d0 8048 	ldr.w	r8, [r0, #72]	; 0x48
            FreeSigner(signer, heap);
 8013be8:	4639      	mov	r1, r7
 8013bea:	f7ff ffd1 	bl	8013b90 <FreeSigner>
            signer = next;
 8013bee:	4640      	mov	r0, r8
 8013bf0:	e7f3      	b.n	8013bda <FreeSignerTable+0x16>

08013bf2 <wc_GetSerialNumber>:
#endif

#ifndef WOLFSSL_ASN_TEMPLATE
int wc_GetSerialNumber(const byte* input, word32* inOutIdx,
    byte* serial, int* serialSz, word32 maxIdx)
{
 8013bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf6:	461e      	mov	r6, r3
 8013bf8:	4680      	mov	r8, r0
 8013bfa:	9b06      	ldr	r3, [sp, #24]
 8013bfc:	460d      	mov	r5, r1
    int result = 0;
    int ret;

    WOLFSSL_ENTER("wc_GetSerialNumber");

    if (serial == NULL || input == NULL || serialSz == NULL) {
 8013bfe:	4617      	mov	r7, r2
 8013c00:	b1d2      	cbz	r2, 8013c38 <wc_GetSerialNumber+0x46>
 8013c02:	b1c8      	cbz	r0, 8013c38 <wc_GetSerialNumber+0x46>
 8013c04:	b1c6      	cbz	r6, 8013c38 <wc_GetSerialNumber+0x46>
        return BAD_FUNC_ARG;
    }

    /* First byte is ASN type */
    if ((*inOutIdx+1) > maxIdx) {
 8013c06:	680a      	ldr	r2, [r1, #0]
 8013c08:	3201      	adds	r2, #1
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d817      	bhi.n	8013c3e <wc_GetSerialNumber+0x4c>
        WOLFSSL_MSG("Bad idx first");
        return BUFFER_E;
    }

    ret = GetASNInt(input, inOutIdx, serialSz, maxIdx);
 8013c0e:	4632      	mov	r2, r6
 8013c10:	f7fe ff56 	bl	8012ac0 <GetASNInt>
    if (ret != 0)
 8013c14:	4604      	mov	r4, r0
 8013c16:	b960      	cbnz	r0, 8013c32 <wc_GetSerialNumber+0x40>
        return ret;

    if (*serialSz > EXTERNAL_SERIAL_SIZE || *serialSz <= 0) {
 8013c18:	6832      	ldr	r2, [r6, #0]
 8013c1a:	1e53      	subs	r3, r2, #1
 8013c1c:	2b1f      	cmp	r3, #31
 8013c1e:	d811      	bhi.n	8013c44 <wc_GetSerialNumber+0x52>
        WOLFSSL_ERROR_VERBOSE(ASN_PARSE_E);
        return ASN_PARSE_E;
    }

    /* return serial */
    XMEMCPY(serial, &input[*inOutIdx], (size_t)*serialSz);
 8013c20:	6829      	ldr	r1, [r5, #0]
 8013c22:	4638      	mov	r0, r7
 8013c24:	4441      	add	r1, r8
 8013c26:	f009 febd 	bl	801d9a4 <memcpy>
    *inOutIdx += (word32)*serialSz;
 8013c2a:	682b      	ldr	r3, [r5, #0]
 8013c2c:	6832      	ldr	r2, [r6, #0]
 8013c2e:	4413      	add	r3, r2
 8013c30:	602b      	str	r3, [r5, #0]

    return result;
}
 8013c32:	4620      	mov	r0, r4
 8013c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BAD_FUNC_ARG;
 8013c38:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8013c3c:	e7f9      	b.n	8013c32 <wc_GetSerialNumber+0x40>
        return BUFFER_E;
 8013c3e:	f06f 0483 	mvn.w	r4, #131	; 0x83
 8013c42:	e7f6      	b.n	8013c32 <wc_GetSerialNumber+0x40>
        return ASN_PARSE_E;
 8013c44:	f06f 048b 	mvn.w	r4, #139	; 0x8b
 8013c48:	e7f3      	b.n	8013c32 <wc_GetSerialNumber+0x40>

08013c4a <wc_GetPubX509>:
{
 8013c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c4e:	4688      	mov	r8, r1
 8013c50:	b086      	sub	sp, #24
 8013c52:	4616      	mov	r6, r2
    if (cert == NULL || badDate == NULL)
 8013c54:	4604      	mov	r4, r0
 8013c56:	2800      	cmp	r0, #0
 8013c58:	f000 80a0 	beq.w	8013d9c <wc_GetPubX509+0x152>
 8013c5c:	2a00      	cmp	r2, #0
 8013c5e:	f000 809d 	beq.w	8013d9c <wc_GetPubX509+0x152>
    *badDate = 0;
 8013c62:	2300      	movs	r3, #0
 8013c64:	6013      	str	r3, [r2, #0]
    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 8013c66:	f500 771e 	add.w	r7, r0, #632	; 0x278
 8013c6a:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8013c6e:	f8d0 0274 	ldr.w	r0, [r0, #628]	; 0x274
 8013c72:	aa04      	add	r2, sp, #16
 8013c74:	4639      	mov	r1, r7
 8013c76:	f7fe ff02 	bl	8012a7e <GetSequence>
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	db25      	blt.n	8013cca <wc_GetPubX509+0x80>
    cert->maxIdx = (word32)len + cert->srcIdx;
 8013c7e:	f8d4 2278 	ldr.w	r2, [r4, #632]	; 0x278
 8013c82:	9b04      	ldr	r3, [sp, #16]
    cert->certBegin = cert->srcIdx;
 8013c84:	60e2      	str	r2, [r4, #12]
    cert->maxIdx = (word32)len + cert->srcIdx;
 8013c86:	4413      	add	r3, r2
    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 8013c88:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
    cert->maxIdx = (word32)len + cert->srcIdx;
 8013c8c:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
    if (GetSequence(cert->source, &cert->srcIdx, &len, cert->maxIdx) < 0)
 8013c90:	aa04      	add	r2, sp, #16
 8013c92:	4639      	mov	r1, r7
 8013c94:	f7fe fef3 	bl	8012a7e <GetSequence>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	db16      	blt.n	8013cca <wc_GetPubX509+0x80>
    cert->sigIndex = (word32)len + cert->srcIdx;
 8013c9c:	9a04      	ldr	r2, [sp, #16]
 8013c9e:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8013ca2:	eb03 0902 	add.w	r9, r3, r2
    if (cert->sigIndex > cert->maxIdx)
 8013ca6:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    cert->sigIndex = (word32)len + cert->srcIdx;
 8013caa:	f8c4 9010 	str.w	r9, [r4, #16]
    if (cert->sigIndex > cert->maxIdx)
 8013cae:	4591      	cmp	r9, r2
 8013cb0:	d80b      	bhi.n	8013cca <wc_GetPubX509+0x80>
    if (GetExplicitVersion(cert->source, &cert->srcIdx, &cert->version,
 8013cb2:	f8d4 a274 	ldr.w	sl, [r4, #628]	; 0x274
    word32 idx = *inOutIdx;
 8013cb6:	9305      	str	r3, [sp, #20]
    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 8013cb8:	f10d 020f 	add.w	r2, sp, #15
 8013cbc:	464b      	mov	r3, r9
 8013cbe:	a905      	add	r1, sp, #20
 8013cc0:	4650      	mov	r0, sl
 8013cc2:	f7fe fe9e 	bl	8012a02 <GetASNTag>
 8013cc6:	4605      	mov	r5, r0
 8013cc8:	b120      	cbz	r0, 8013cd4 <wc_GetPubX509+0x8a>
        return ASN_PARSE_E;
 8013cca:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8013cce:	b006      	add	sp, #24
 8013cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED)) {
 8013cd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013cd8:	2ba0      	cmp	r3, #160	; 0xa0
 8013cda:	d139      	bne.n	8013d50 <wc_GetPubX509+0x106>
        *inOutIdx = ++idx;  /* skip header */
 8013cdc:	9b05      	ldr	r3, [sp, #20]
 8013cde:	3301      	adds	r3, #1
 8013ce0:	9305      	str	r3, [sp, #20]
 8013ce2:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        ret = GetMyVersion(input, inOutIdx, version, maxIdx);
 8013ce6:	f104 0220 	add.w	r2, r4, #32
 8013cea:	464b      	mov	r3, r9
 8013cec:	4639      	mov	r1, r7
 8013cee:	4650      	mov	r0, sl
 8013cf0:	f7fe ff50 	bl	8012b94 <GetMyVersion>
        if (ret >= 0) {
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	dbe8      	blt.n	8013cca <wc_GetPubX509+0x80>
            if (*version > MAX_X509_VERSION || *version < MIN_X509_VERSION) {
 8013cf8:	6a23      	ldr	r3, [r4, #32]
 8013cfa:	2b03      	cmp	r3, #3
 8013cfc:	d8e5      	bhi.n	8013cca <wc_GetPubX509+0x80>
    if (wc_GetSerialNumber(cert->source, &cert->srcIdx, cert->serial,
 8013cfe:	6923      	ldr	r3, [r4, #16]
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8013d06:	f504 7329 	add.w	r3, r4, #676	; 0x2a4
 8013d0a:	f504 7221 	add.w	r2, r4, #644	; 0x284
 8013d0e:	4639      	mov	r1, r7
 8013d10:	f7ff ff6f 	bl	8013bf2 <wc_GetSerialNumber>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	dbd8      	blt.n	8013cca <wc_GetPubX509+0x80>
        if ((ret = GetSigAlg(cert, &cert->signatureOID, cert->sigIndex)) < 0)
 8013d18:	6922      	ldr	r2, [r4, #16]
 8013d1a:	f104 0118 	add.w	r1, r4, #24
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f7ff f9ee 	bl	8013100 <GetSigAlg>
 8013d24:	2800      	cmp	r0, #0
 8013d26:	dbd2      	blt.n	8013cce <wc_GetPubX509+0x84>
        if ( (ret = GetName(cert, ISSUER, (int)cert->sigIndex)) < 0)
 8013d28:	6922      	ldr	r2, [r4, #16]
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f7ff fae9 	bl	8013304 <GetName>
 8013d32:	2800      	cmp	r0, #0
 8013d34:	dbcb      	blt.n	8013cce <wc_GetPubX509+0x84>
    if (GetSequence(cert->source, &cert->srcIdx, &length, (word32)maxIdx) < 0)
 8013d36:	6923      	ldr	r3, [r4, #16]
 8013d38:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8013d3c:	aa05      	add	r2, sp, #20
 8013d3e:	4639      	mov	r1, r7
 8013d40:	f7fe fe9d 	bl	8012a7e <GetSequence>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	da05      	bge.n	8013d54 <wc_GetPubX509+0x10a>
        return ASN_PARSE_E;
 8013d48:	f06f 058b 	mvn.w	r5, #139	; 0x8b
            *badDate = ret;
 8013d4c:	6035      	str	r5, [r6, #0]
 8013d4e:	e01d      	b.n	8013d8c <wc_GetPubX509+0x142>
    *version = 0;
 8013d50:	6220      	str	r0, [r4, #32]
    return 0;
 8013d52:	e7d4      	b.n	8013cfe <wc_GetPubX509+0xb4>
    maxIdx = (int)cert->srcIdx + length;
 8013d54:	9b05      	ldr	r3, [sp, #20]
 8013d56:	f8d4 7278 	ldr.w	r7, [r4, #632]	; 0x278
 8013d5a:	441f      	add	r7, r3
    if (GetDate(cert, BEFORE, verify, maxIdx) < 0)
 8013d5c:	463b      	mov	r3, r7
 8013d5e:	4642      	mov	r2, r8
 8013d60:	2100      	movs	r1, #0
 8013d62:	4620      	mov	r0, r4
 8013d64:	f7ff fd65 	bl	8013832 <GetDate>
    if (GetDate(cert, AFTER, verify, maxIdx) < 0)
 8013d68:	463b      	mov	r3, r7
        badDate = ASN_BEFORE_DATE_E; /* continue parsing */
 8013d6a:	2800      	cmp	r0, #0
    if (GetDate(cert, AFTER, verify, maxIdx) < 0)
 8013d6c:	4642      	mov	r2, r8
 8013d6e:	f04f 0101 	mov.w	r1, #1
 8013d72:	4620      	mov	r0, r4
        badDate = ASN_BEFORE_DATE_E; /* continue parsing */
 8013d74:	bfb8      	it	lt
 8013d76:	f06f 0595 	mvnlt.w	r5, #149	; 0x95
    if (GetDate(cert, AFTER, verify, maxIdx) < 0)
 8013d7a:	f7ff fd5a 	bl	8013832 <GetDate>
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	da02      	bge.n	8013d88 <wc_GetPubX509+0x13e>
        return ASN_AFTER_DATE_E;
 8013d82:	f06f 0596 	mvn.w	r5, #150	; 0x96
 8013d86:	e7e1      	b.n	8013d4c <wc_GetPubX509+0x102>
    if (badDate != 0)
 8013d88:	2d00      	cmp	r5, #0
 8013d8a:	d1df      	bne.n	8013d4c <wc_GetPubX509+0x102>
    if ( (ret = GetName(cert, SUBJECT, (int)cert->sigIndex)) < 0)
 8013d8c:	6922      	ldr	r2, [r4, #16]
 8013d8e:	2101      	movs	r1, #1
 8013d90:	4620      	mov	r0, r4
}
 8013d92:	b006      	add	sp, #24
 8013d94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ( (ret = GetName(cert, SUBJECT, (int)cert->sigIndex)) < 0)
 8013d98:	f7ff bab4 	b.w	8013304 <GetName>
        return BAD_FUNC_ARG;
 8013d9c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8013da0:	e795      	b.n	8013cce <wc_GetPubX509+0x84>

08013da2 <DecodeToKey>:
{
 8013da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da6:	b089      	sub	sp, #36	; 0x24
    int badDate = 0;
 8013da8:	2700      	movs	r7, #0
    if ( (ret = wc_GetPubX509(cert, verify, &badDate)) < 0)
 8013daa:	aa03      	add	r2, sp, #12
{
 8013dac:	4605      	mov	r5, r0
    int badDate = 0;
 8013dae:	9703      	str	r7, [sp, #12]
    if ( (ret = wc_GetPubX509(cert, verify, &badDate)) < 0)
 8013db0:	f7ff ff4b 	bl	8013c4a <wc_GetPubX509>
 8013db4:	1e04      	subs	r4, r0, #0
 8013db6:	db18      	blt.n	8013dea <DecodeToKey+0x48>
        cert->selfSigned = XMEMCMP(cert->issuerHash, cert->subjectHash,
 8013db8:	2214      	movs	r2, #20
 8013dba:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013dbe:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8013dc2:	f009 fddf 	bl	801d984 <memcmp>
 8013dc6:	f895 3356 	ldrb.w	r3, [r5, #854]	; 0x356
    ret = GetCertKey(cert, cert->source, &cert->srcIdx, cert->maxIdx);
 8013dca:	f8d5 6274 	ldr.w	r6, [r5, #628]	; 0x274
            KEYID_SIZE) == 0 ? 1 : 0;
 8013dce:	fab0 f080 	clz	r0, r0
 8013dd2:	0940      	lsrs	r0, r0, #5
        cert->selfSigned = XMEMCMP(cert->issuerHash, cert->subjectHash,
 8013dd4:	f360 0341 	bfi	r3, r0, #1, #1
 8013dd8:	f885 3356 	strb.w	r3, [r5, #854]	; 0x356
    word32 srcIdx = *inOutIdx;
 8013ddc:	e9d5 b39e 	ldrd	fp, r3, [r5, #632]	; 0x278
 8013de0:	f8cd b010 	str.w	fp, [sp, #16]
    if (source == NULL) {
 8013de4:	b92e      	cbnz	r6, 8013df2 <DecodeToKey+0x50>
        return ASN_PARSE_E;
 8013de6:	f06f 048b 	mvn.w	r4, #139	; 0x8b
}
 8013dea:	4620      	mov	r0, r4
 8013dec:	b009      	add	sp, #36	; 0x24
 8013dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (GetSequence(source, &srcIdx, &length, maxIdx) < 0)
 8013df2:	aa05      	add	r2, sp, #20
 8013df4:	a904      	add	r1, sp, #16
 8013df6:	4630      	mov	r0, r6
 8013df8:	f7fe fe41 	bl	8012a7e <GetSequence>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	dbf2      	blt.n	8013de6 <DecodeToKey+0x44>
    pubLen = (int)srcIdx - pubIdx + length;
 8013e00:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
    maxIdx = srcIdx + (word32)length;
 8013e04:	eb0a 0904 	add.w	r9, sl, r4
    if (GetAlgoId(source, &srcIdx, &cert->keyOID, oidKeyType, maxIdx) < 0) {
 8013e08:	f8cd 9000 	str.w	r9, [sp]
 8013e0c:	2302      	movs	r3, #2
 8013e0e:	f105 021c 	add.w	r2, r5, #28
 8013e12:	a904      	add	r1, sp, #16
 8013e14:	4630      	mov	r0, r6
 8013e16:	f7ff f9b2 	bl	801317e <GetAlgoId>
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	dbe3      	blt.n	8013de6 <DecodeToKey+0x44>
    switch (cert->keyOID) {
 8013e1e:	69eb      	ldr	r3, [r5, #28]
 8013e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e24:	d055      	beq.n	8013ed2 <DecodeToKey+0x130>
 8013e26:	f240 2206 	movw	r2, #518	; 0x206
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d177      	bne.n	8013f1e <DecodeToKey+0x17c>
    localIdx = *srcIdx;
 8013e2e:	9b04      	ldr	r3, [sp, #16]
 8013e30:	9306      	str	r3, [sp, #24]
    if (GetASNTag(source, &localIdx, &tag, maxIdx) < 0)
 8013e32:	f10d 020b 	add.w	r2, sp, #11
 8013e36:	464b      	mov	r3, r9
 8013e38:	a906      	add	r1, sp, #24
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	f7fe fde1 	bl	8012a02 <GetASNTag>
    pubLen = (int)srcIdx - pubIdx + length;
 8013e40:	eba4 040b 	sub.w	r4, r4, fp
    if (GetASNTag(source, &localIdx, &tag, maxIdx) < 0)
 8013e44:	2800      	cmp	r0, #0
            ret = StoreEccKey(cert, source, &srcIdx, maxIdx, source + pubIdx,
 8013e46:	eb06 080b 	add.w	r8, r6, fp
    pubLen = (int)srcIdx - pubIdx + length;
 8013e4a:	eb04 070a 	add.w	r7, r4, sl
    if (GetASNTag(source, &localIdx, &tag, maxIdx) < 0)
 8013e4e:	da08      	bge.n	8013e62 <DecodeToKey+0xc0>
        return ASN_PARSE_E;
 8013e50:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    *inOutIdx = srcIdx;
 8013e54:	9b04      	ldr	r3, [sp, #16]
 8013e56:	f8c5 3278 	str.w	r3, [r5, #632]	; 0x278
    if (ret != 0)
 8013e5a:	2c00      	cmp	r4, #0
 8013e5c:	d1c5      	bne.n	8013dea <DecodeToKey+0x48>
    if (badDate != 0)
 8013e5e:	9c03      	ldr	r4, [sp, #12]
 8013e60:	e7c3      	b.n	8013dea <DecodeToKey+0x48>
    if (tag != (ASN_SEQUENCE | ASN_CONSTRUCTED)) {
 8013e62:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013e66:	2b30      	cmp	r3, #48	; 0x30
 8013e68:	d021      	beq.n	8013eae <DecodeToKey+0x10c>
        if (GetObjectId(source, srcIdx, &cert->pkCurveOID, oidCurveType,
 8013e6a:	f8cd 9000 	str.w	r9, [sp]
 8013e6e:	2303      	movs	r3, #3
 8013e70:	f505 723f 	add.w	r2, r5, #764	; 0x2fc
 8013e74:	a904      	add	r1, sp, #16
 8013e76:	4630      	mov	r0, r6
 8013e78:	f7ff f90b 	bl	8013092 <GetObjectId>
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	dbe7      	blt.n	8013e50 <DecodeToKey+0xae>
        if ((ret = CheckCurve(cert->pkCurveOID)) < 0)
 8013e80:	f8d5 02fc 	ldr.w	r0, [r5, #764]	; 0x2fc
 8013e84:	f7fe fc88 	bl	8012798 <CheckCurve>
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	db1f      	blt.n	8013ecc <DecodeToKey+0x12a>
        ret = CheckBitString(source, srcIdx, &length, maxIdx, 1, NULL);
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	2200      	movs	r2, #0
 8013e90:	e9cd 3200 	strd	r3, r2, [sp]
 8013e94:	a904      	add	r1, sp, #16
 8013e96:	464b      	mov	r3, r9
 8013e98:	aa07      	add	r2, sp, #28
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f7fe fea0 	bl	8012be0 <CheckBitString>
        if (ret != 0)
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d1d6      	bne.n	8013e54 <DecodeToKey+0xb2>
        *srcIdx += (word32)length;
 8013ea6:	9b04      	ldr	r3, [sp, #16]
 8013ea8:	9a07      	ldr	r2, [sp, #28]
 8013eaa:	4413      	add	r3, r2
 8013eac:	9304      	str	r3, [sp, #16]
    publicKey = (byte*)XMALLOC(pubKeyLen, cert->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 8013eae:	4638      	mov	r0, r7
 8013eb0:	f009 fd58 	bl	801d964 <malloc>
    if (publicKey == NULL)
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	b378      	cbz	r0, 8013f18 <DecodeToKey+0x176>
    XMEMCPY(publicKey, pubKey, pubKeyLen);
 8013eb8:	463a      	mov	r2, r7
 8013eba:	4641      	mov	r1, r8
 8013ebc:	f009 fd72 	bl	801d9a4 <memcpy>
    cert->pubKeyStored = 1;
 8013ec0:	2301      	movs	r3, #1
    cert->publicKey = publicKey;
 8013ec2:	602c      	str	r4, [r5, #0]
    cert->pubKeySize   = pubKeyLen;
 8013ec4:	e9c5 7301 	strd	r7, r3, [r5, #4]
    return 0;
 8013ec8:	2400      	movs	r4, #0
 8013eca:	e7c3      	b.n	8013e54 <DecodeToKey+0xb2>
            return ECC_CURVE_OID_E;
 8013ecc:	f06f 04ab 	mvn.w	r4, #171	; 0xab
 8013ed0:	e7c0      	b.n	8013e54 <DecodeToKey+0xb2>
    ret = CheckBitString(source, srcIdx, &length, maxIdx, 1, NULL);
 8013ed2:	f04f 0801 	mov.w	r8, #1
            cert->pkCurveOID = ED25519k;
 8013ed6:	f8c5 32fc 	str.w	r3, [r5, #764]	; 0x2fc
    ret = CheckBitString(source, srcIdx, &length, maxIdx, 1, NULL);
 8013eda:	9701      	str	r7, [sp, #4]
 8013edc:	f8cd 8000 	str.w	r8, [sp]
 8013ee0:	464b      	mov	r3, r9
 8013ee2:	aa07      	add	r2, sp, #28
 8013ee4:	a904      	add	r1, sp, #16
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	f7fe fe7a 	bl	8012be0 <CheckBitString>
    if (ret == 0) {
 8013eec:	4604      	mov	r4, r0
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d1b0      	bne.n	8013e54 <DecodeToKey+0xb2>
        publicKey = (byte*)XMALLOC((size_t)length, cert->heap,
 8013ef2:	9807      	ldr	r0, [sp, #28]
 8013ef4:	f009 fd36 	bl	801d964 <malloc>
        if (publicKey == NULL) {
 8013ef8:	4607      	mov	r7, r0
 8013efa:	b168      	cbz	r0, 8013f18 <DecodeToKey+0x176>
            XMEMCPY(publicKey, &source[*srcIdx], (size_t)length);
 8013efc:	9904      	ldr	r1, [sp, #16]
 8013efe:	9a07      	ldr	r2, [sp, #28]
 8013f00:	4431      	add	r1, r6
 8013f02:	f009 fd4f 	bl	801d9a4 <memcpy>
            cert->pubKeySize   = (word32)length;
 8013f06:	9a07      	ldr	r2, [sp, #28]
            *srcIdx += (word32)length;
 8013f08:	9b04      	ldr	r3, [sp, #16]
            cert->publicKey = publicKey;
 8013f0a:	602f      	str	r7, [r5, #0]
            *srcIdx += (word32)length;
 8013f0c:	4413      	add	r3, r2
            cert->pubKeyStored = 1;
 8013f0e:	f8c5 8008 	str.w	r8, [r5, #8]
            cert->pubKeySize   = (word32)length;
 8013f12:	606a      	str	r2, [r5, #4]
            *srcIdx += (word32)length;
 8013f14:	9304      	str	r3, [sp, #16]
 8013f16:	e79d      	b.n	8013e54 <DecodeToKey+0xb2>
            ret = MEMORY_E;
 8013f18:	f06f 047c 	mvn.w	r4, #124	; 0x7c
            break;
 8013f1c:	e79a      	b.n	8013e54 <DecodeToKey+0xb2>
    switch (cert->keyOID) {
 8013f1e:	f06f 0493 	mvn.w	r4, #147	; 0x93
 8013f22:	e797      	b.n	8013e54 <DecodeToKey+0xb2>

08013f24 <AllocDer>:
#ifndef NO_CERTS

/* TODO: consider moving PEM code out to a different file. */

int AllocDer(DerBuffer** pDer, word32 length, int type, void* heap)
{
 8013f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f28:	460e      	mov	r6, r1
 8013f2a:	4614      	mov	r4, r2
 8013f2c:	461f      	mov	r7, r3
    int ret = BAD_FUNC_ARG;
    if (pDer) {
 8013f2e:	4605      	mov	r5, r0
 8013f30:	b1e8      	cbz	r0, 8013f6e <AllocDer+0x4a>
        int dynType = 0;
        DerBuffer* der;

        /* Determine dynamic type */
        switch (type) {
 8013f32:	2a25      	cmp	r2, #37	; 0x25
 8013f34:	bf98      	it	ls
 8013f36:	4b11      	ldrls	r3, [pc, #68]	; (8013f7c <AllocDer+0x58>)
            case RSA_TYPE:  dynType = DYNAMIC_TYPE_RSA;  break;
            default:        dynType = DYNAMIC_TYPE_KEY;  break;
        }

        /* Setup new buffer */
        *pDer = (DerBuffer*)XMALLOC(sizeof(DerBuffer) + length, heap, dynType);
 8013f38:	f101 0914 	add.w	r9, r1, #20
 8013f3c:	4648      	mov	r0, r9
 8013f3e:	bf94      	ite	ls
 8013f40:	f913 8002 	ldrsbls.w	r8, [r3, r2]
    if (pDer) {
 8013f44:	f04f 0803 	movhi.w	r8, #3
        *pDer = (DerBuffer*)XMALLOC(sizeof(DerBuffer) + length, heap, dynType);
 8013f48:	f009 fd0c 	bl	801d964 <malloc>
 8013f4c:	6028      	str	r0, [r5, #0]
        if (*pDer == NULL) {
 8013f4e:	b188      	cbz	r0, 8013f74 <AllocDer+0x50>
            return MEMORY_E;
        }
        XMEMSET(*pDer, 0, sizeof(DerBuffer) + length);
 8013f50:	464a      	mov	r2, r9
 8013f52:	2100      	movs	r1, #0
 8013f54:	f009 fd4e 	bl	801d9f4 <memset>

        der = *pDer;
 8013f58:	6828      	ldr	r0, [r5, #0]
        der->type = type;
        der->dynType = dynType; /* Cache this for FreeDer */
        der->heap = heap;
        der->buffer = (byte*)der + sizeof(DerBuffer);
 8013f5a:	f100 0314 	add.w	r3, r0, #20
        der->dynType = dynType; /* Cache this for FreeDer */
 8013f5e:	e9c0 4803 	strd	r4, r8, [r0, #12]
        der->heap = heap;
 8013f62:	6047      	str	r7, [r0, #4]
        der->buffer = (byte*)der + sizeof(DerBuffer);
 8013f64:	6003      	str	r3, [r0, #0]
        der->length = length;
 8013f66:	6086      	str	r6, [r0, #8]
        ret = 0; /* Success */
 8013f68:	2000      	movs	r0, #0
    }
    return ret;
}
 8013f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int ret = BAD_FUNC_ARG;
 8013f6e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8013f72:	e7fa      	b.n	8013f6a <AllocDer+0x46>
            return MEMORY_E;
 8013f74:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8013f78:	e7f7      	b.n	8013f6a <AllocDer+0x46>
 8013f7a:	bf00      	nop
 8013f7c:	08022bdc 	.word	0x08022bdc

08013f80 <FreeDer>:

void FreeDer(DerBuffer** pDer)
{
 8013f80:	b538      	push	{r3, r4, r5, lr}
    if (pDer && *pDer)
 8013f82:	4604      	mov	r4, r0
 8013f84:	b150      	cbz	r0, 8013f9c <FreeDer+0x1c>
 8013f86:	6800      	ldr	r0, [r0, #0]
 8013f88:	b140      	cbz	r0, 8013f9c <FreeDer+0x1c>
    {
        DerBuffer* der = (DerBuffer*)*pDer;

        /* ForceZero private keys */
        if (der->type == PRIVATEKEY_TYPE && der->buffer != NULL) {
 8013f8a:	68c3      	ldr	r3, [r0, #12]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d006      	beq.n	8013f9e <FreeDer+0x1e>
            ForceZero(der->buffer, der->length);
        }
        der->buffer = NULL;
 8013f90:	2500      	movs	r5, #0
 8013f92:	6005      	str	r5, [r0, #0]
        der->length = 0;
 8013f94:	6085      	str	r5, [r0, #8]
        XFREE(der, der->heap, der->dynType);
 8013f96:	f009 fced 	bl	801d974 <free>

        *pDer = NULL;
 8013f9a:	6025      	str	r5, [r4, #0]
    }
}
 8013f9c:	bd38      	pop	{r3, r4, r5, pc}
        if (der->type == PRIVATEKEY_TYPE && der->buffer != NULL) {
 8013f9e:	6803      	ldr	r3, [r0, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d0f5      	beq.n	8013f90 <FreeDer+0x10>
    while (len--) *z++ = 0;
 8013fa4:	6882      	ldr	r2, [r0, #8]
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	441a      	add	r2, r3
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d0f0      	beq.n	8013f90 <FreeDer+0x10>
 8013fae:	f803 1b01 	strb.w	r1, [r3], #1
 8013fb2:	e7fa      	b.n	8013faa <FreeDer+0x2a>

08013fb4 <StoreECC_DSA_Sig>:
#define dsaSigASN_Length (sizeof(dsaSigASN) / sizeof(ASNItem))
#endif

/* Der Encode r & s ints into out, outLen is (in/out) size */
int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
{
 8013fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fb8:	4680      	mov	r8, r0
    int    rSz;                           /* encoding size */
    int    sSz;
    int    headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */

    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    int rLeadingZero = mp_leading_bit(r);
 8013fba:	4610      	mov	r0, r2
{
 8013fbc:	461f      	mov	r7, r3
 8013fbe:	460e      	mov	r6, r1
 8013fc0:	4691      	mov	r9, r2
    int rLeadingZero = mp_leading_bit(r);
 8013fc2:	f008 ffb8 	bl	801cf36 <mp_leading_bit>
 8013fc6:	4605      	mov	r5, r0
    int sLeadingZero = mp_leading_bit(s);
 8013fc8:	4638      	mov	r0, r7
 8013fca:	f008 ffb4 	bl	801cf36 <mp_leading_bit>
 8013fce:	4604      	mov	r4, r0
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
 8013fd0:	4648      	mov	r0, r9
 8013fd2:	f008 f827 	bl	801c024 <mp_unsigned_bin_size>
 8013fd6:	4682      	mov	sl, r0
    int sLen = mp_unsigned_bin_size(s);
 8013fd8:	4638      	mov	r0, r7
 8013fda:	f008 f823 	bl	801c024 <mp_unsigned_bin_size>

    if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
 8013fde:	4455      	add	r5, sl
 8013fe0:	4405      	add	r5, r0
 8013fe2:	442c      	add	r4, r5
 8013fe4:	6833      	ldr	r3, [r6, #0]
 8013fe6:	1d20      	adds	r0, r4, #4
            headerSz + 2)))  /* SEQ_TAG + LEN(ENUM) */
 8013fe8:	3406      	adds	r4, #6
    if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
 8013fea:	42a3      	cmp	r3, r4
 8013fec:	d31b      	bcc.n	8014026 <StoreECC_DSA_Sig+0x72>
        return BUFFER_E;

    idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
 8013fee:	4641      	mov	r1, r8
 8013ff0:	f7ff fcdc 	bl	80139ac <SetSequence>
        headerSz), out);

    /* store r */
    rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
 8013ff4:	6831      	ldr	r1, [r6, #0]
 8013ff6:	eb08 0200 	add.w	r2, r8, r0
 8013ffa:	1a09      	subs	r1, r1, r0
    idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
 8013ffc:	4604      	mov	r4, r0
    rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
 8013ffe:	4648      	mov	r0, r9
 8014000:	f7ff fc97 	bl	8013932 <SetASNIntMP>
    if (rSz < 0)
 8014004:	2800      	cmp	r0, #0
 8014006:	db0c      	blt.n	8014022 <StoreECC_DSA_Sig+0x6e>
        return rSz;
    idx += (word32)rSz;

    /* store s */
    sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
 8014008:	6831      	ldr	r1, [r6, #0]
    idx += (word32)rSz;
 801400a:	4404      	add	r4, r0
    sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
 801400c:	eb08 0204 	add.w	r2, r8, r4
 8014010:	1b09      	subs	r1, r1, r4
 8014012:	4638      	mov	r0, r7
 8014014:	f7ff fc8d 	bl	8013932 <SetASNIntMP>
    if (sSz < 0)
 8014018:	2800      	cmp	r0, #0
 801401a:	db02      	blt.n	8014022 <StoreECC_DSA_Sig+0x6e>
        return sSz;
    idx += (word32)sSz;
 801401c:	4420      	add	r0, r4

    *outLen = idx;
 801401e:	6030      	str	r0, [r6, #0]

    return 0;
 8014020:	2000      	movs	r0, #0
        }
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8014022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BUFFER_E;
 8014026:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801402a:	e7fa      	b.n	8014022 <StoreECC_DSA_Sig+0x6e>

0801402c <DecodeECC_DSA_Sig_Ex>:
    return DecodeECC_DSA_Sig_Ex(sig, sigLen, r, s, 1);
}

int DecodeECC_DSA_Sig_Ex(const byte* sig, word32 sigLen, mp_int* r, mp_int* s,
    int init)
{
 801402c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 8014030:	2400      	movs	r4, #0
{
 8014032:	4689      	mov	r9, r1
 8014034:	4616      	mov	r6, r2
 8014036:	461f      	mov	r7, r3
    int    len = 0;

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 8014038:	aa03      	add	r2, sp, #12
 801403a:	460b      	mov	r3, r1
 801403c:	a902      	add	r1, sp, #8
    int    len = 0;
 801403e:	e9cd 4402 	strd	r4, r4, [sp, #8]
{
 8014042:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014046:	4680      	mov	r8, r0
    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 8014048:	f7fe fd19 	bl	8012a7e <GetSequence>
 801404c:	42a0      	cmp	r0, r4
 801404e:	da04      	bge.n	801405a <DecodeECC_DSA_Sig_Ex+0x2e>
    /* sanity check that the index has been advanced all the way to the end of
     * the buffer */
    if (idx != sigLen) {
        mp_clear(r);
        mp_clear(s);
        return ASN_ECC_KEY_E;
 8014050:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
        mp_clear(s);
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8014054:	b004      	add	sp, #16
 8014056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sigLen != idx + (word32)len) {
 801405a:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
 801405e:	441d      	add	r5, r3
 8014060:	454d      	cmp	r5, r9
 8014062:	d1f5      	bne.n	8014050 <DecodeECC_DSA_Sig_Ex+0x24>
    if (GetIntPositive(r, sig, &idx, sigLen, init) < 0) {
 8014064:	f8cd a000 	str.w	sl, [sp]
 8014068:	462b      	mov	r3, r5
 801406a:	aa02      	add	r2, sp, #8
 801406c:	4641      	mov	r1, r8
 801406e:	4630      	mov	r0, r6
 8014070:	f7fe fd54 	bl	8012b1c <GetIntPositive>
 8014074:	2800      	cmp	r0, #0
 8014076:	dbeb      	blt.n	8014050 <DecodeECC_DSA_Sig_Ex+0x24>
    if (GetIntPositive(s, sig, &idx, sigLen, init) < 0) {
 8014078:	f8cd a000 	str.w	sl, [sp]
 801407c:	462b      	mov	r3, r5
 801407e:	aa02      	add	r2, sp, #8
 8014080:	4641      	mov	r1, r8
 8014082:	4638      	mov	r0, r7
 8014084:	f7fe fd4a 	bl	8012b1c <GetIntPositive>
 8014088:	2800      	cmp	r0, #0
 801408a:	da03      	bge.n	8014094 <DecodeECC_DSA_Sig_Ex+0x68>
        mp_clear(r);
 801408c:	4630      	mov	r0, r6
        mp_clear(s);
 801408e:	f007 ff97 	bl	801bfc0 <mp_clear>
 8014092:	e7dd      	b.n	8014050 <DecodeECC_DSA_Sig_Ex+0x24>
    if (idx != sigLen) {
 8014094:	9b02      	ldr	r3, [sp, #8]
 8014096:	42ab      	cmp	r3, r5
 8014098:	d004      	beq.n	80140a4 <DecodeECC_DSA_Sig_Ex+0x78>
        mp_clear(r);
 801409a:	4630      	mov	r0, r6
 801409c:	f007 ff90 	bl	801bfc0 <mp_clear>
        mp_clear(s);
 80140a0:	4638      	mov	r0, r7
 80140a2:	e7f4      	b.n	801408e <DecodeECC_DSA_Sig_Ex+0x62>
    return 0;
 80140a4:	4620      	mov	r0, r4
 80140a6:	e7d5      	b.n	8014054 <DecodeECC_DSA_Sig_Ex+0x28>

080140a8 <wc_EccPrivateKeyDecode>:
#endif

WOLFSSL_ABI
int wc_EccPrivateKeyDecode(const byte* input, word32* inOutIdx, ecc_key* key,
                        word32 inSz)
{
 80140a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ac:	b089      	sub	sp, #36	; 0x24
    byte* pub = NULL;
#else
    byte priv[ECC_MAXSIZE+1];
    byte pub[2*(ECC_MAXSIZE+1)]; /* public key has two parts plus header */
#endif
    word32 algId = 0;
 80140ae:	2400      	movs	r4, #0
{
 80140b0:	460d      	mov	r5, r1
 80140b2:	9203      	str	r2, [sp, #12]
 80140b4:	461e      	mov	r6, r3
    word32 algId = 0;
 80140b6:	9407      	str	r4, [sp, #28]
    byte* pubData = NULL;

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 80140b8:	4607      	mov	r7, r0
 80140ba:	2800      	cmp	r0, #0
 80140bc:	f000 80c9 	beq.w	8014252 <wc_EccPrivateKeyDecode+0x1aa>
 80140c0:	2900      	cmp	r1, #0
 80140c2:	f000 80c6 	beq.w	8014252 <wc_EccPrivateKeyDecode+0x1aa>
 80140c6:	2a00      	cmp	r2, #0
 80140c8:	f000 80c3 	beq.w	8014252 <wc_EccPrivateKeyDecode+0x1aa>
 80140cc:	2e00      	cmp	r6, #0
 80140ce:	f000 80c0 	beq.w	8014252 <wc_EccPrivateKeyDecode+0x1aa>
        return BAD_FUNC_ARG;

    /* if has pkcs8 header skip it */
    if (ToTraditionalInline_ex(input, inOutIdx, inSz, &algId) < 0) {
 80140d2:	ab07      	add	r3, sp, #28
 80140d4:	4632      	mov	r2, r6
 80140d6:	f7ff f89e 	bl	8013216 <ToTraditionalInline_ex>
 80140da:	42a0      	cmp	r0, r4
 80140dc:	db13      	blt.n	8014106 <wc_EccPrivateKeyDecode+0x5e>
        /* ignore error, did not have pkcs8 header */
    }
    else {
        curve_id = wc_ecc_get_oid(algId, NULL, NULL);
 80140de:	9807      	ldr	r0, [sp, #28]
 80140e0:	4622      	mov	r2, r4
 80140e2:	4621      	mov	r1, r4
 80140e4:	f7fa fa58 	bl	800e598 <wc_ecc_get_oid>
 80140e8:	4680      	mov	r8, r0
    }

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 80140ea:	4633      	mov	r3, r6
 80140ec:	aa06      	add	r2, sp, #24
 80140ee:	4629      	mov	r1, r5
 80140f0:	4638      	mov	r0, r7
 80140f2:	f7fe fcc4 	bl	8012a7e <GetSequence>
 80140f6:	2800      	cmp	r0, #0
 80140f8:	da07      	bge.n	801410a <wc_EccPrivateKeyDecode+0x62>
        return ASN_PARSE_E;
 80140fa:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif
}
 80140fe:	4620      	mov	r0, r4
 8014100:	b009      	add	sp, #36	; 0x24
 8014102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int    curve_id = ECC_CURVE_DEF;
 8014106:	46a0      	mov	r8, r4
 8014108:	e7ef      	b.n	80140ea <wc_EccPrivateKeyDecode+0x42>
    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 801410a:	4633      	mov	r3, r6
 801410c:	aa05      	add	r2, sp, #20
 801410e:	4629      	mov	r1, r5
 8014110:	4638      	mov	r0, r7
 8014112:	f7fe fd3f 	bl	8012b94 <GetMyVersion>
 8014116:	2800      	cmp	r0, #0
 8014118:	dbef      	blt.n	80140fa <wc_EccPrivateKeyDecode+0x52>
    if (*inOutIdx >= inSz)
 801411a:	682b      	ldr	r3, [r5, #0]
 801411c:	42b3      	cmp	r3, r6
 801411e:	d2ec      	bcs.n	80140fa <wc_EccPrivateKeyDecode+0x52>
    b = input[*inOutIdx];
 8014120:	5cfa      	ldrb	r2, [r7, r3]
    *inOutIdx += 1;
 8014122:	3301      	adds	r3, #1
    if (b != 4 && b != 6 && b != 7)
 8014124:	2a04      	cmp	r2, #4
    *inOutIdx += 1;
 8014126:	602b      	str	r3, [r5, #0]
    if (b != 4 && b != 6 && b != 7)
 8014128:	d002      	beq.n	8014130 <wc_EccPrivateKeyDecode+0x88>
 801412a:	3a06      	subs	r2, #6
 801412c:	2a01      	cmp	r2, #1
 801412e:	d8e4      	bhi.n	80140fa <wc_EccPrivateKeyDecode+0x52>
    if (GetLength(input, inOutIdx, &length, inSz) < 0)
 8014130:	4633      	mov	r3, r6
 8014132:	aa06      	add	r2, sp, #24
 8014134:	4629      	mov	r1, r5
 8014136:	4638      	mov	r0, r7
 8014138:	f7fe fc1a 	bl	8012970 <GetLength>
 801413c:	2800      	cmp	r0, #0
 801413e:	dbdc      	blt.n	80140fa <wc_EccPrivateKeyDecode+0x52>
    privSz = length;
 8014140:	f8dd a018 	ldr.w	sl, [sp, #24]
    if (privSz > ECC_MAXSIZE)
 8014144:	f1ba 0f42 	cmp.w	sl, #66	; 0x42
 8014148:	f300 8086 	bgt.w	8014258 <wc_EccPrivateKeyDecode+0x1b0>
    priv = (byte*)XMALLOC(privSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801414c:	4650      	mov	r0, sl
 801414e:	f009 fc09 	bl	801d964 <malloc>
    if (priv == NULL)
 8014152:	4681      	mov	r9, r0
 8014154:	2800      	cmp	r0, #0
 8014156:	f000 8082 	beq.w	801425e <wc_EccPrivateKeyDecode+0x1b6>
    XMEMCPY(priv, &input[*inOutIdx], (size_t)privSz);
 801415a:	6829      	ldr	r1, [r5, #0]
 801415c:	4652      	mov	r2, sl
 801415e:	4439      	add	r1, r7
 8014160:	f009 fc20 	bl	801d9a4 <memcpy>
    *inOutIdx += (word32)length;
 8014164:	682b      	ldr	r3, [r5, #0]
 8014166:	9a06      	ldr	r2, [sp, #24]
 8014168:	4413      	add	r3, r2
    if ((*inOutIdx + 1) < inSz) {
 801416a:	1c5a      	adds	r2, r3, #1
 801416c:	42b2      	cmp	r2, r6
    *inOutIdx += (word32)length;
 801416e:	602b      	str	r3, [r5, #0]
    if ((*inOutIdx + 1) < inSz) {
 8014170:	d21a      	bcs.n	80141a8 <wc_EccPrivateKeyDecode+0x100>
        if (b == ECC_PREFIX_0) {
 8014172:	5cfb      	ldrb	r3, [r7, r3]
 8014174:	2ba0      	cmp	r3, #160	; 0xa0
 8014176:	d117      	bne.n	80141a8 <wc_EccPrivateKeyDecode+0x100>
            *inOutIdx += 1;
 8014178:	602a      	str	r2, [r5, #0]
            if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 801417a:	4633      	mov	r3, r6
 801417c:	aa06      	add	r2, sp, #24
 801417e:	4629      	mov	r1, r5
 8014180:	4638      	mov	r0, r7
 8014182:	f7fe fbf5 	bl	8012970 <GetLength>
 8014186:	2800      	cmp	r0, #0
 8014188:	dd45      	ble.n	8014216 <wc_EccPrivateKeyDecode+0x16e>
                ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType,
 801418a:	9600      	str	r6, [sp, #0]
 801418c:	2315      	movs	r3, #21
 801418e:	aa04      	add	r2, sp, #16
 8014190:	4638      	mov	r0, r7
 8014192:	f7fe ff7e 	bl	8013092 <GetObjectId>
                if (ret == 0) {
 8014196:	4604      	mov	r4, r0
 8014198:	2800      	cmp	r0, #0
 801419a:	d149      	bne.n	8014230 <wc_EccPrivateKeyDecode+0x188>
                    if ((ret = CheckCurve(oidSum)) < 0)
 801419c:	9804      	ldr	r0, [sp, #16]
 801419e:	f7fe fafb 	bl	8012798 <CheckCurve>
 80141a2:	f1b0 0800 	subs.w	r8, r0, #0
 80141a6:	db45      	blt.n	8014234 <wc_EccPrivateKeyDecode+0x18c>
    if (ret == 0 && (*inOutIdx + 1) < inSz) {
 80141a8:	682a      	ldr	r2, [r5, #0]
 80141aa:	1c53      	adds	r3, r2, #1
 80141ac:	42b3      	cmp	r3, r6
 80141ae:	d259      	bcs.n	8014264 <wc_EccPrivateKeyDecode+0x1bc>
        b = input[*inOutIdx];
 80141b0:	5cba      	ldrb	r2, [r7, r2]
        *inOutIdx += 1;
 80141b2:	602b      	str	r3, [r5, #0]
        if (b != ECC_PREFIX_1) {
 80141b4:	2aa1      	cmp	r2, #161	; 0xa1
 80141b6:	d141      	bne.n	801423c <wc_EccPrivateKeyDecode+0x194>
        else if (GetLength(input, inOutIdx, &length, inSz) <= 0) {
 80141b8:	4633      	mov	r3, r6
 80141ba:	aa06      	add	r2, sp, #24
 80141bc:	4629      	mov	r1, r5
 80141be:	4638      	mov	r0, r7
 80141c0:	f7fe fbd6 	bl	8012970 <GetLength>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	dd26      	ble.n	8014216 <wc_EccPrivateKeyDecode+0x16e>
            ret = CheckBitString(input, inOutIdx, &length, inSz, 0, NULL);
 80141c8:	2600      	movs	r6, #0
 80141ca:	e9cd 6600 	strd	r6, r6, [sp]
 80141ce:	4638      	mov	r0, r7
 80141d0:	f7fe fd06 	bl	8012be0 <CheckBitString>
            if (ret == 0) {
 80141d4:	4604      	mov	r4, r0
 80141d6:	bb08      	cbnz	r0, 801421c <wc_EccPrivateKeyDecode+0x174>
                pubSz = length;
 80141d8:	f8dd b018 	ldr.w	fp, [sp, #24]
                if (pubSz > 2*(ECC_MAXSIZE+1))
 80141dc:	f1bb 0f86 	cmp.w	fp, #134	; 0x86
 80141e0:	dc30      	bgt.n	8014244 <wc_EccPrivateKeyDecode+0x19c>
                    pub = (byte*)XMALLOC(pubSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80141e2:	4658      	mov	r0, fp
 80141e4:	f009 fbbe 	bl	801d964 <malloc>
                    if (pub == NULL)
 80141e8:	4606      	mov	r6, r0
 80141ea:	b378      	cbz	r0, 801424c <wc_EccPrivateKeyDecode+0x1a4>
                        XMEMCPY(pub, &input[*inOutIdx], (size_t)pubSz);
 80141ec:	6829      	ldr	r1, [r5, #0]
 80141ee:	465a      	mov	r2, fp
 80141f0:	4439      	add	r1, r7
 80141f2:	f009 fbd7 	bl	801d9a4 <memcpy>
                        *inOutIdx += (word32)length;
 80141f6:	682a      	ldr	r2, [r5, #0]
 80141f8:	9906      	ldr	r1, [sp, #24]
 80141fa:	440a      	add	r2, r1
 80141fc:	602a      	str	r2, [r5, #0]
        ret = wc_ecc_import_private_key_ex(priv, (word32)privSz, pubData,
 80141fe:	9b03      	ldr	r3, [sp, #12]
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	f8cd 8004 	str.w	r8, [sp, #4]
 8014206:	465b      	mov	r3, fp
 8014208:	4632      	mov	r2, r6
 801420a:	4651      	mov	r1, sl
 801420c:	4648      	mov	r0, r9
 801420e:	f7fa f940 	bl	800e492 <wc_ecc_import_private_key_ex>
 8014212:	4604      	mov	r4, r0
 8014214:	e002      	b.n	801421c <wc_EccPrivateKeyDecode+0x174>
                        ret = ECC_CURVE_OID_E;
 8014216:	2600      	movs	r6, #0
                ret = ASN_PARSE_E;
 8014218:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    XFREE(priv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801421c:	4648      	mov	r0, r9
 801421e:	f009 fba9 	bl	801d974 <free>
    XFREE(pub,  key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8014222:	2e00      	cmp	r6, #0
 8014224:	f43f af6b 	beq.w	80140fe <wc_EccPrivateKeyDecode+0x56>
 8014228:	4630      	mov	r0, r6
 801422a:	f009 fba3 	bl	801d974 <free>
 801422e:	e766      	b.n	80140fe <wc_EccPrivateKeyDecode+0x56>
 8014230:	2600      	movs	r6, #0
 8014232:	e7f3      	b.n	801421c <wc_EccPrivateKeyDecode+0x174>
 8014234:	4626      	mov	r6, r4
                        ret = ECC_CURVE_OID_E;
 8014236:	f06f 04ab 	mvn.w	r4, #171	; 0xab
 801423a:	e7ef      	b.n	801421c <wc_EccPrivateKeyDecode+0x174>
 801423c:	2600      	movs	r6, #0
            ret = ASN_ECC_KEY_E;
 801423e:	f06f 04aa 	mvn.w	r4, #170	; 0xaa
 8014242:	e7eb      	b.n	801421c <wc_EccPrivateKeyDecode+0x174>
 8014244:	4606      	mov	r6, r0
                    ret = BUFFER_E;
 8014246:	f06f 0483 	mvn.w	r4, #131	; 0x83
 801424a:	e7e7      	b.n	801421c <wc_EccPrivateKeyDecode+0x174>
                        ret = MEMORY_E;
 801424c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8014250:	e7e4      	b.n	801421c <wc_EccPrivateKeyDecode+0x174>
        return BAD_FUNC_ARG;
 8014252:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8014256:	e752      	b.n	80140fe <wc_EccPrivateKeyDecode+0x56>
        return BUFFER_E;
 8014258:	f06f 0483 	mvn.w	r4, #131	; 0x83
 801425c:	e74f      	b.n	80140fe <wc_EccPrivateKeyDecode+0x56>
        return MEMORY_E;
 801425e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8014262:	e74c      	b.n	80140fe <wc_EccPrivateKeyDecode+0x56>
    byte* pub = NULL;
 8014264:	2600      	movs	r6, #0
    int    privSz, pubSz = 0;
 8014266:	46b3      	mov	fp, r6
 8014268:	e7c9      	b.n	80141fe <wc_EccPrivateKeyDecode+0x156>

0801426a <wc_EccPublicKeyDecode>:
#endif /* WOLFSSL_CUSTOM_CURVES */

WOLFSSL_ABI
int wc_EccPublicKeyDecode(const byte* input, word32* inOutIdx,
                          ecc_key* key, word32 inSz)
{
 801426a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801426e:	460c      	mov	r4, r1
 8014270:	b089      	sub	sp, #36	; 0x24
 8014272:	4617      	mov	r7, r2
 8014274:	461e      	mov	r6, r3
    int    version, length;
    int    curve_id = ECC_CURVE_DEF;
    word32 oidSum, localIdx;
    byte   tag, isPrivFormat = 0;

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 8014276:	4605      	mov	r5, r0
 8014278:	2800      	cmp	r0, #0
 801427a:	f000 80b2 	beq.w	80143e2 <wc_EccPublicKeyDecode+0x178>
 801427e:	2900      	cmp	r1, #0
 8014280:	f000 80af 	beq.w	80143e2 <wc_EccPublicKeyDecode+0x178>
 8014284:	2a00      	cmp	r2, #0
 8014286:	f000 80ac 	beq.w	80143e2 <wc_EccPublicKeyDecode+0x178>
 801428a:	2b00      	cmp	r3, #0
 801428c:	f000 80a9 	beq.w	80143e2 <wc_EccPublicKeyDecode+0x178>
        return BAD_FUNC_ARG;

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8014290:	aa05      	add	r2, sp, #20
 8014292:	f7fe fbf4 	bl	8012a7e <GetSequence>
 8014296:	2800      	cmp	r0, #0
 8014298:	da04      	bge.n	80142a4 <wc_EccPublicKeyDecode+0x3a>
        return ASN_PARSE_E;
 801429a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 801429e:	b009      	add	sp, #36	; 0x24
 80142a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (GetMyVersion(input, inOutIdx, &version, inSz) >= 0) {
 80142a4:	4633      	mov	r3, r6
 80142a6:	aa04      	add	r2, sp, #16
 80142a8:	4621      	mov	r1, r4
 80142aa:	4628      	mov	r0, r5
 80142ac:	f7fe fc72 	bl	8012b94 <GetMyVersion>
 80142b0:	2800      	cmp	r0, #0
 80142b2:	db6f      	blt.n	8014394 <wc_EccPublicKeyDecode+0x12a>
        if (*inOutIdx >= inSz)
 80142b4:	6822      	ldr	r2, [r4, #0]
 80142b6:	42b2      	cmp	r2, r6
 80142b8:	d2ef      	bcs.n	801429a <wc_EccPublicKeyDecode+0x30>
        tag = input[*inOutIdx];
 80142ba:	5cab      	ldrb	r3, [r5, r2]
 80142bc:	f88d 300f 	strb.w	r3, [sp, #15]
        *inOutIdx += 1;
 80142c0:	3201      	adds	r2, #1
        if (tag != 4 && tag != 6 && tag != 7)
 80142c2:	2b04      	cmp	r3, #4
        *inOutIdx += 1;
 80142c4:	6022      	str	r2, [r4, #0]
        if (tag != 4 && tag != 6 && tag != 7)
 80142c6:	d002      	beq.n	80142ce <wc_EccPublicKeyDecode+0x64>
 80142c8:	3b06      	subs	r3, #6
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d8e5      	bhi.n	801429a <wc_EccPublicKeyDecode+0x30>
        if (GetLength(input, inOutIdx, &length, inSz) < 0)
 80142ce:	4633      	mov	r3, r6
 80142d0:	aa05      	add	r2, sp, #20
 80142d2:	4621      	mov	r1, r4
 80142d4:	4628      	mov	r0, r5
 80142d6:	f7fe fb4b 	bl	8012970 <GetLength>
 80142da:	2800      	cmp	r0, #0
 80142dc:	dbdd      	blt.n	801429a <wc_EccPublicKeyDecode+0x30>
        if (length > ECC_MAXSIZE)
 80142de:	9805      	ldr	r0, [sp, #20]
 80142e0:	2842      	cmp	r0, #66	; 0x42
 80142e2:	dd02      	ble.n	80142ea <wc_EccPublicKeyDecode+0x80>
            return BUFFER_E;
 80142e4:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80142e8:	e7d9      	b.n	801429e <wc_EccPublicKeyDecode+0x34>
        *inOutIdx += (word32)length;
 80142ea:	f8d4 c000 	ldr.w	ip, [r4]
 80142ee:	4460      	add	r0, ip
        if (*inOutIdx >= inSz)
 80142f0:	42b0      	cmp	r0, r6
        *inOutIdx += (word32)length;
 80142f2:	6020      	str	r0, [r4, #0]
        if (*inOutIdx >= inSz)
 80142f4:	d2d1      	bcs.n	801429a <wc_EccPublicKeyDecode+0x30>
        tag = input[*inOutIdx];
 80142f6:	f815 c000 	ldrb.w	ip, [r5, r0]
 80142fa:	f88d c00f 	strb.w	ip, [sp, #15]
        *inOutIdx += 1;
 80142fe:	3001      	adds	r0, #1
        if (tag != ECC_PREFIX_0)
 8014300:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
        *inOutIdx += 1;
 8014304:	6020      	str	r0, [r4, #0]
        if (tag != ECC_PREFIX_0)
 8014306:	d002      	beq.n	801430e <wc_EccPublicKeyDecode+0xa4>
            return ASN_ECC_KEY_E;
 8014308:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
 801430c:	e7c7      	b.n	801429e <wc_EccPublicKeyDecode+0x34>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 801430e:	4628      	mov	r0, r5
 8014310:	f7fe fb2e 	bl	8012970 <GetLength>
 8014314:	2800      	cmp	r0, #0
 8014316:	ddc0      	ble.n	801429a <wc_EccPublicKeyDecode+0x30>
        isPrivFormat = 1;
 8014318:	f04f 0901 	mov.w	r9, #1
    if (*inOutIdx >= inSz) {
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	42b3      	cmp	r3, r6
 8014320:	d2e0      	bcs.n	80142e4 <wc_EccPublicKeyDecode+0x7a>
    localIdx = *inOutIdx;
 8014322:	9307      	str	r3, [sp, #28]
    if (GetASNTag(input, &localIdx, &tag, inSz) == 0 &&
 8014324:	f10d 020f 	add.w	r2, sp, #15
 8014328:	4633      	mov	r3, r6
 801432a:	a907      	add	r1, sp, #28
 801432c:	4628      	mov	r0, r5
 801432e:	f7fe fb68 	bl	8012a02 <GetASNTag>
 8014332:	b918      	cbnz	r0, 801433c <wc_EccPublicKeyDecode+0xd2>
 8014334:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014338:	2b30      	cmp	r3, #48	; 0x30
 801433a:	d0ae      	beq.n	801429a <wc_EccPublicKeyDecode+0x30>
        ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType, inSz);
 801433c:	9600      	str	r6, [sp, #0]
 801433e:	2315      	movs	r3, #21
 8014340:	aa06      	add	r2, sp, #24
 8014342:	4621      	mov	r1, r4
 8014344:	4628      	mov	r0, r5
 8014346:	f7fe fea4 	bl	8013092 <GetObjectId>
        if (ret != 0)
 801434a:	2800      	cmp	r0, #0
 801434c:	d1a7      	bne.n	801429e <wc_EccPublicKeyDecode+0x34>
        if ((ret = CheckCurve(oidSum)) < 0)
 801434e:	9806      	ldr	r0, [sp, #24]
 8014350:	f7fe fa22 	bl	8012798 <CheckCurve>
 8014354:	f1b0 0800 	subs.w	r8, r0, #0
 8014358:	db46      	blt.n	80143e8 <wc_EccPublicKeyDecode+0x17e>
    if (isPrivFormat) {
 801435a:	f1b9 0f00 	cmp.w	r9, #0
 801435e:	d12c      	bne.n	80143ba <wc_EccPublicKeyDecode+0x150>
    ret = CheckBitString(input, inOutIdx, &length, inSz, 1, NULL);
 8014360:	2301      	movs	r3, #1
 8014362:	2200      	movs	r2, #0
 8014364:	e9cd 3200 	strd	r3, r2, [sp]
 8014368:	4621      	mov	r1, r4
 801436a:	4633      	mov	r3, r6
 801436c:	aa05      	add	r2, sp, #20
 801436e:	4628      	mov	r0, r5
 8014370:	f7fe fc36 	bl	8012be0 <CheckBitString>
    if (ret != 0)
 8014374:	2800      	cmp	r0, #0
 8014376:	d192      	bne.n	801429e <wc_EccPublicKeyDecode+0x34>
    if (wc_ecc_import_x963_ex(input + *inOutIdx, (word32)length, key,
 8014378:	6820      	ldr	r0, [r4, #0]
 801437a:	9905      	ldr	r1, [sp, #20]
 801437c:	4643      	mov	r3, r8
 801437e:	463a      	mov	r2, r7
 8014380:	4428      	add	r0, r5
 8014382:	f7fa f817 	bl	800e3b4 <wc_ecc_import_x963_ex>
 8014386:	2800      	cmp	r0, #0
 8014388:	d1be      	bne.n	8014308 <wc_EccPublicKeyDecode+0x9e>
    *inOutIdx += (word32)length;
 801438a:	6823      	ldr	r3, [r4, #0]
 801438c:	9a05      	ldr	r2, [sp, #20]
 801438e:	4413      	add	r3, r2
 8014390:	6023      	str	r3, [r4, #0]
    return 0;
 8014392:	e784      	b.n	801429e <wc_EccPublicKeyDecode+0x34>
        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8014394:	4633      	mov	r3, r6
 8014396:	aa05      	add	r2, sp, #20
 8014398:	4621      	mov	r1, r4
 801439a:	4628      	mov	r0, r5
 801439c:	f7fe fb6f 	bl	8012a7e <GetSequence>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	f6ff af7a 	blt.w	801429a <wc_EccPublicKeyDecode+0x30>
        ret = SkipObjectId(input, inOutIdx, inSz);
 80143a6:	4632      	mov	r2, r6
 80143a8:	4621      	mov	r1, r4
 80143aa:	4628      	mov	r0, r5
 80143ac:	f7fe fe61 	bl	8013072 <SkipObjectId>
        if (ret != 0)
 80143b0:	2800      	cmp	r0, #0
 80143b2:	f47f af74 	bne.w	801429e <wc_EccPublicKeyDecode+0x34>
    byte   tag, isPrivFormat = 0;
 80143b6:	4681      	mov	r9, r0
 80143b8:	e7b0      	b.n	801431c <wc_EccPublicKeyDecode+0xb2>
        if (*inOutIdx >= inSz)
 80143ba:	6822      	ldr	r2, [r4, #0]
 80143bc:	42b2      	cmp	r2, r6
 80143be:	f4bf af6c 	bcs.w	801429a <wc_EccPublicKeyDecode+0x30>
        tag = input[*inOutIdx];
 80143c2:	5cab      	ldrb	r3, [r5, r2]
 80143c4:	f88d 300f 	strb.w	r3, [sp, #15]
        *inOutIdx += 1;
 80143c8:	3201      	adds	r2, #1
        if (tag != ECC_PREFIX_1)
 80143ca:	2ba1      	cmp	r3, #161	; 0xa1
        *inOutIdx += 1;
 80143cc:	6022      	str	r2, [r4, #0]
        if (tag != ECC_PREFIX_1)
 80143ce:	d19b      	bne.n	8014308 <wc_EccPublicKeyDecode+0x9e>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 80143d0:	4633      	mov	r3, r6
 80143d2:	aa05      	add	r2, sp, #20
 80143d4:	4621      	mov	r1, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	f7fe faca 	bl	8012970 <GetLength>
 80143dc:	2800      	cmp	r0, #0
 80143de:	dcbf      	bgt.n	8014360 <wc_EccPublicKeyDecode+0xf6>
 80143e0:	e75b      	b.n	801429a <wc_EccPublicKeyDecode+0x30>
        return BAD_FUNC_ARG;
 80143e2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80143e6:	e75a      	b.n	801429e <wc_EccPublicKeyDecode+0x34>
            return ECC_CURVE_OID_E;
 80143e8:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 80143ec:	e757      	b.n	801429e <wc_EccPublicKeyDecode+0x34>
	...

080143f0 <ParseCertRelative>:
{
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	b09b      	sub	sp, #108	; 0x6c
    word32 confirmOID = 0;
 80143f6:	2400      	movs	r4, #0
{
 80143f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80143fc:	9306      	str	r3, [sp, #24]
    word32 confirmOID = 0;
 80143fe:	940c      	str	r4, [sp, #48]	; 0x30
    if (cert == NULL) {
 8014400:	4681      	mov	r9, r0
 8014402:	b918      	cbnz	r0, 801440c <ParseCertRelative+0x1c>
        return BAD_FUNC_ARG;
 8014404:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8014408:	f000 bed3 	b.w	80151b2 <ParseCertRelative+0xdc2>
    if (cert->sigCtx.state == SIG_STATE_BEGIN) {
 801440c:	f8d0 333c 	ldr.w	r3, [r0, #828]	; 0x33c
 8014410:	2b00      	cmp	r3, #0
 8014412:	f040 8721 	bne.w	8015258 <ParseCertRelative+0xe68>
        cert->criticalExt = 0;
 8014416:	e9c0 33d3 	strd	r3, r3, [r0, #844]	; 0x34c
        if ((ret = DecodeToKey(cert, verify)) < 0) {
 801441a:	9902      	ldr	r1, [sp, #8]
 801441c:	f7ff fcc1 	bl	8013da2 <DecodeToKey>
 8014420:	1e04      	subs	r4, r0, #0
 8014422:	da06      	bge.n	8014432 <ParseCertRelative+0x42>
            if (ret == ASN_BEFORE_DATE_E || ret == ASN_AFTER_DATE_E) {
 8014424:	f104 0397 	add.w	r3, r4, #151	; 0x97
 8014428:	2b01      	cmp	r3, #1
 801442a:	f200 86c2 	bhi.w	80151b2 <ParseCertRelative+0xdc2>
                cert->badDate = ret;
 801442e:	f8c9 434c 	str.w	r4, [r9, #844]	; 0x34c
        if (cert->srcIdx < cert->sigIndex) {
 8014432:	f8d9 3278 	ldr.w	r3, [r9, #632]	; 0x278
 8014436:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801443a:	4293      	cmp	r3, r2
 801443c:	d241      	bcs.n	80144c2 <ParseCertRelative+0xd2>
            if (cert->version < 2) {
 801443e:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8014442:	2901      	cmp	r1, #1
 8014444:	f341 80dc 	ble.w	8015600 <ParseCertRelative+0x1210>
            cert->extensions    = &cert->source[cert->srcIdx];
 8014448:	f8d9 1274 	ldr.w	r1, [r9, #628]	; 0x274
    word32 idx = 0;
 801444c:	2400      	movs	r4, #0
            cert->extensions    = &cert->source[cert->srcIdx];
 801444e:	eb01 0b03 	add.w	fp, r1, r3
            cert->extensionsSz  = (int)(cert->sigIndex - cert->srcIdx);
 8014452:	eba2 0a03 	sub.w	sl, r2, r3
            cert->extensionsIdx = cert->srcIdx;   /* for potential later use */
 8014456:	e9c9 a3ab 	strd	sl, r3, [r9, #684]	; 0x2ac
            cert->extensions    = &cert->source[cert->srcIdx];
 801445a:	f8c9 b2a8 	str.w	fp, [r9, #680]	; 0x2a8
    word32 idx = 0;
 801445e:	940d      	str	r4, [sp, #52]	; 0x34
    byte tag = 0;
 8014460:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
    if (input == NULL || sz == 0)
 8014464:	f1bb 0f00 	cmp.w	fp, #0
 8014468:	d0cc      	beq.n	8014404 <ParseCertRelative+0x14>
        if (GetASNTag(input, &idx, &tag, sz) < 0) {
 801446a:	4653      	mov	r3, sl
 801446c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 8014470:	a90d      	add	r1, sp, #52	; 0x34
 8014472:	4658      	mov	r0, fp
 8014474:	f7fe fac5 	bl	8012a02 <GetASNTag>
 8014478:	42a0      	cmp	r0, r4
 801447a:	f2c0 8293 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        if (tag != ASN_EXTENSIONS) {
 801447e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8014482:	2ba3      	cmp	r3, #163	; 0xa3
 8014484:	f040 828e 	bne.w	80149a4 <ParseCertRelative+0x5b4>
        if (GetLength(input, &idx, &length, sz) < 0) {
 8014488:	4653      	mov	r3, sl
 801448a:	aa0e      	add	r2, sp, #56	; 0x38
 801448c:	4658      	mov	r0, fp
 801448e:	f7fe fa6f 	bl	8012970 <GetLength>
 8014492:	42a0      	cmp	r0, r4
 8014494:	f2c0 8286 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014498:	4658      	mov	r0, fp
 801449a:	f7fe faf0 	bl	8012a7e <GetSequence>
 801449e:	42a0      	cmp	r0, r4
 80144a0:	f2c0 8280 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    byte criticalFail = 0;
 80144a4:	9407      	str	r4, [sp, #28]
    while (idx < (word32)sz) {
 80144a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144a8:	459a      	cmp	sl, r3
 80144aa:	f200 809a 	bhi.w	80145e2 <ParseCertRelative+0x1f2>
    ret = criticalFail ? ASN_CRIT_EXT_E : 0;
 80144ae:	9b07      	ldr	r3, [sp, #28]
 80144b0:	b11b      	cbz	r3, 80144ba <ParseCertRelative+0xca>
                    cert->criticalExt = ret;
 80144b2:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 80144b6:	f8c9 3350 	str.w	r3, [r9, #848]	; 0x350
            cert->srcIdx = cert->sigIndex;
 80144ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80144be:	f8c9 3278 	str.w	r3, [r9, #632]	; 0x278
        if ((ret = GetSigAlg(cert,
 80144c2:	f8d9 227c 	ldr.w	r2, [r9, #636]	; 0x27c
 80144c6:	a90c      	add	r1, sp, #48	; 0x30
 80144c8:	4648      	mov	r0, r9
 80144ca:	f7fe fe19 	bl	8013100 <GetSigAlg>
 80144ce:	1e04      	subs	r4, r0, #0
 80144d0:	f2c0 866f 	blt.w	80151b2 <ParseCertRelative+0xdc2>
    ret = CheckBitString(cert->source, &cert->srcIdx, &length, cert->maxIdx, 1,
 80144d4:	2301      	movs	r3, #1
 80144d6:	2000      	movs	r0, #0
 80144d8:	e9cd 3000 	strd	r3, r0, [sp]
 80144dc:	aa16      	add	r2, sp, #88	; 0x58
 80144de:	f8d9 327c 	ldr.w	r3, [r9, #636]	; 0x27c
 80144e2:	f8d9 0274 	ldr.w	r0, [r9, #628]	; 0x274
 80144e6:	f509 711e 	add.w	r1, r9, #632	; 0x278
 80144ea:	f7fe fb79 	bl	8012be0 <CheckBitString>
    if (ret != 0)
 80144ee:	1e04      	subs	r4, r0, #0
 80144f0:	f040 8663 	bne.w	80151ba <ParseCertRelative+0xdca>
    cert->signature = &cert->source[cert->srcIdx];
 80144f4:	e9d9 219d 	ldrd	r2, r1, [r9, #628]	; 0x274
    cert->sigLength = (word32)length;
 80144f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80144fa:	f8c9 3014 	str.w	r3, [r9, #20]
    cert->signature = &cert->source[cert->srcIdx];
 80144fe:	440a      	add	r2, r1
 8014500:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
    if (cert->srcIdx != cert->maxIdx)
 8014504:	f8d9 227c 	ldr.w	r2, [r9, #636]	; 0x27c
    cert->srcIdx += cert->sigLength;
 8014508:	440b      	add	r3, r1
    if (cert->srcIdx != cert->maxIdx)
 801450a:	4293      	cmp	r3, r2
    cert->srcIdx += cert->sigLength;
 801450c:	f8c9 3278 	str.w	r3, [r9, #632]	; 0x278
    if (cert->srcIdx != cert->maxIdx)
 8014510:	f040 8248 	bne.w	80149a4 <ParseCertRelative+0x5b4>
        if (confirmOID != cert->signatureOID
 8014514:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8014518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801451a:	4293      	cmp	r3, r2
 801451c:	f041 8073 	bne.w	8015606 <ParseCertRelative+0x1216>
        if (!cert->isCA && cert->extKeyUsageSet &&
 8014520:	f899 2354 	ldrb.w	r2, [r9, #852]	; 0x354
 8014524:	f002 0190 	and.w	r1, r2, #144	; 0x90
 8014528:	2980      	cmp	r1, #128	; 0x80
 801452a:	d104      	bne.n	8014536 <ParseCertRelative+0x146>
 801452c:	f8b9 12f8 	ldrh.w	r1, [r9, #760]	; 0x2f8
 8014530:	0749      	lsls	r1, r1, #29
 8014532:	f101 806b 	bmi.w	801560c <ParseCertRelative+0x121c>
        if (cert->extSubjKeyIdSet == 0 && cert->publicKey != NULL &&
 8014536:	0792      	lsls	r2, r2, #30
 8014538:	d415      	bmi.n	8014566 <ParseCertRelative+0x176>
 801453a:	f8d9 0000 	ldr.w	r0, [r9]
 801453e:	b190      	cbz	r0, 8014566 <ParseCertRelative+0x176>
                                                         cert->pubKeySize > 0) {
 8014540:	f8d9 1004 	ldr.w	r1, [r9, #4]
        if (cert->extSubjKeyIdSet == 0 && cert->publicKey != NULL &&
 8014544:	b179      	cbz	r1, 8014566 <ParseCertRelative+0x176>
            if (cert->signatureOID == CTC_SM3wSM2) {
 8014546:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
                ret = CalcHashId_ex(cert->publicKey + cert->pubKeySize - 65, 65,
 801454a:	bf08      	it	eq
 801454c:	f1a1 0341 	subeq.w	r3, r1, #65	; 0x41
        ret = GetHashId(input + idx, length, cert->extSubjKeyId,
 8014550:	f509 7233 	add.w	r2, r9, #716	; 0x2cc
        ret = wc_ShaHash(data, len, hash);
 8014554:	bf04      	itt	eq
 8014556:	2141      	moveq	r1, #65	; 0x41
 8014558:	18c0      	addeq	r0, r0, r3
 801455a:	f006 fa3e 	bl	801a9da <wc_ShaHash>
 801455e:	4604      	mov	r4, r0
            if (ret != 0) {
 8014560:	2800      	cmp	r0, #0
 8014562:	f040 8626 	bne.w	80151b2 <ParseCertRelative+0xdc2>
        if (!cert->selfSigned || (verify != NO_VERIFY && type != CA_TYPE &&
 8014566:	f899 3356 	ldrb.w	r3, [r9, #854]	; 0x356
 801456a:	079b      	lsls	r3, r3, #30
 801456c:	d50a      	bpl.n	8014584 <ParseCertRelative+0x194>
 801456e:	9b02      	ldr	r3, [sp, #8]
 8014570:	2b00      	cmp	r3, #0
 8014572:	f000 8643 	beq.w	80151fc <ParseCertRelative+0xe0c>
 8014576:	9b03      	ldr	r3, [sp, #12]
 8014578:	2b05      	cmp	r3, #5
 801457a:	f000 863f 	beq.w	80151fc <ParseCertRelative+0xe0c>
 801457e:	2b0f      	cmp	r3, #15
 8014580:	f000 863c 	beq.w	80151fc <ParseCertRelative+0xe0c>
            cert->ca = NULL;
 8014584:	2300      	movs	r3, #0
 8014586:	f8c9 3324 	str.w	r3, [r9, #804]	; 0x324
            if (cert->extAuthKeyIdSet) {
 801458a:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 801458e:	075f      	lsls	r7, r3, #29
 8014590:	f100 8616 	bmi.w	80151c0 <ParseCertRelative+0xdd0>
            if (cert->ca == NULL && cert->extSubjKeyIdSet
 8014594:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 8014598:	079e      	lsls	r6, r3, #30
 801459a:	f100 861d 	bmi.w	80151d8 <ParseCertRelative+0xde8>
            if (cert->ca != NULL && XMEMCMP(cert->issuerHash,
 801459e:	f8d9 1324 	ldr.w	r1, [r9, #804]	; 0x324
 80145a2:	f109 054c 	add.w	r5, r9, #76	; 0x4c
 80145a6:	b151      	cbz	r1, 80145be <ParseCertRelative+0x1ce>
 80145a8:	2214      	movs	r2, #20
 80145aa:	3120      	adds	r1, #32
 80145ac:	4628      	mov	r0, r5
 80145ae:	f009 f9e9 	bl	801d984 <memcmp>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	f000 861d 	beq.w	80151f2 <ParseCertRelative+0xe02>
                cert->ca = NULL;
 80145b8:	2300      	movs	r3, #0
 80145ba:	f8c9 3324 	str.w	r3, [r9, #804]	; 0x324
                cert->ca = GetCAByName(cm, cert->issuerHash);
 80145be:	9806      	ldr	r0, [sp, #24]
 80145c0:	4629      	mov	r1, r5
 80145c2:	f7f2 ff89 	bl	80074d8 <GetCAByName>
 80145c6:	f8c9 0324 	str.w	r0, [r9, #804]	; 0x324
                if (cert->ca && cert->extAuthKeyIdSet) {
 80145ca:	2800      	cmp	r0, #0
 80145cc:	f000 8616 	beq.w	80151fc <ParseCertRelative+0xe0c>
 80145d0:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 80145d4:	075d      	lsls	r5, r3, #29
                    cert->ca = NULL;
 80145d6:	bf44      	itt	mi
 80145d8:	2300      	movmi	r3, #0
 80145da:	f8c9 3324 	strmi.w	r3, [r9, #804]	; 0x324
 80145de:	f000 be0d 	b.w	80151fc <ParseCertRelative+0xe0c>
        if (GetSequence(input, &idx, &length, sz) < 0) {
 80145e2:	4653      	mov	r3, sl
 80145e4:	aa0e      	add	r2, sp, #56	; 0x38
 80145e6:	a90d      	add	r1, sp, #52	; 0x34
 80145e8:	4658      	mov	r0, fp
 80145ea:	f7fe fa48 	bl	8012a7e <GetSequence>
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f2c0 81d8 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        oid = 0;
 80145f4:	2500      	movs	r5, #0
        if ((ret = GetObjectId(input, &idx, &oid, oidCertExtType, sz)) < 0) {
 80145f6:	f8cd a000 	str.w	sl, [sp]
 80145fa:	2306      	movs	r3, #6
 80145fc:	aa0f      	add	r2, sp, #60	; 0x3c
 80145fe:	a90d      	add	r1, sp, #52	; 0x34
 8014600:	4658      	mov	r0, fp
        oid = 0;
 8014602:	950f      	str	r5, [sp, #60]	; 0x3c
        if ((ret = GetObjectId(input, &idx, &oid, oidCertExtType, sz)) < 0) {
 8014604:	f7fe fd45 	bl	8013092 <GetObjectId>
 8014608:	1e04      	subs	r4, r0, #0
 801460a:	f2c0 84f1 	blt.w	8014ff0 <ParseCertRelative+0xc00>
        if ((idx + 1) > (word32)sz) {
 801460e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014610:	1c5a      	adds	r2, r3, #1
 8014612:	4592      	cmp	sl, r2
 8014614:	f0c1 8017 	bcc.w	8015646 <ParseCertRelative+0x1256>
        localIdx = idx;
 8014618:	9310      	str	r3, [sp, #64]	; 0x40
        if (GetASNTag(input, &localIdx, &tag, sz) == 0) {
 801461a:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 801461e:	4653      	mov	r3, sl
 8014620:	a910      	add	r1, sp, #64	; 0x40
 8014622:	4658      	mov	r0, fp
 8014624:	f7fe f9ed 	bl	8012a02 <GetASNTag>
 8014628:	4607      	mov	r7, r0
 801462a:	bb30      	cbnz	r0, 801467a <ParseCertRelative+0x28a>
            if (tag == ASN_BOOLEAN) {
 801462c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8014630:	2b01      	cmp	r3, #1
 8014632:	d108      	bne.n	8014646 <ParseCertRelative+0x256>
                ret = GetBoolean(input, &idx, sz);
 8014634:	4652      	mov	r2, sl
 8014636:	a90d      	add	r1, sp, #52	; 0x34
 8014638:	4658      	mov	r0, fp
 801463a:	f7fe f875 	bl	8012728 <GetBoolean>
                if (ret < 0) {
 801463e:	1e04      	subs	r4, r0, #0
 8014640:	f2c0 84d6 	blt.w	8014ff0 <ParseCertRelative+0xc00>
                critical = (byte)ret;
 8014644:	b2e7      	uxtb	r7, r4
        ret = GetOctetString(input, &idx, &length, sz);
 8014646:	4653      	mov	r3, sl
 8014648:	aa0e      	add	r2, sp, #56	; 0x38
 801464a:	a90d      	add	r1, sp, #52	; 0x34
 801464c:	4658      	mov	r0, fp
 801464e:	f7fe fa2c 	bl	8012aaa <GetOctetString>
        if (ret < 0) {
 8014652:	1e04      	subs	r4, r0, #0
 8014654:	f2c0 84cc 	blt.w	8014ff0 <ParseCertRelative+0xc00>
        ret = DecodeExtensionType(input + idx, (word32)length, oid, critical,
 8014658:	e9dd 630e 	ldrd	r6, r3, [sp, #56]	; 0x38
 801465c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    switch (oid) {
 801465e:	2b97      	cmp	r3, #151	; 0x97
        ret = DecodeExtensionType(input + idx, (word32)length, oid, critical,
 8014660:	445d      	add	r5, fp
    switch (oid) {
 8014662:	d843      	bhi.n	80146ec <ParseCertRelative+0x2fc>
 8014664:	2b7f      	cmp	r3, #127	; 0x7f
 8014666:	d80a      	bhi.n	801467e <ParseCertRelative+0x28e>
 8014668:	2b45      	cmp	r3, #69	; 0x45
 801466a:	f000 8173 	beq.w	8014954 <ParseCertRelative+0x564>
            if (critical) {
 801466e:	2f00      	cmp	r7, #0
 8014670:	f000 81d0 	beq.w	8014a14 <ParseCertRelative+0x624>
            criticalFail = 1;
 8014674:	2301      	movs	r3, #1
 8014676:	9307      	str	r3, [sp, #28]
 8014678:	e1cc      	b.n	8014a14 <ParseCertRelative+0x624>
        critical = 0;
 801467a:	462f      	mov	r7, r5
 801467c:	e7e3      	b.n	8014646 <ParseCertRelative+0x256>
    switch (oid) {
 801467e:	3b80      	subs	r3, #128	; 0x80
 8014680:	2b17      	cmp	r3, #23
 8014682:	d8f4      	bhi.n	801466e <ParseCertRelative+0x27e>
 8014684:	a201      	add	r2, pc, #4	; (adr r2, 801468c <ParseCertRelative+0x29c>)
 8014686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468a:	bf00      	nop
 801468c:	08014de9 	.word	0x08014de9
 8014690:	08014e3d 	.word	0x08014e3d
 8014694:	0801466f 	.word	0x0801466f
 8014698:	08014a1f 	.word	0x08014a1f
 801469c:	0801466f 	.word	0x0801466f
 80146a0:	08014727 	.word	0x08014727
 80146a4:	0801466f 	.word	0x0801466f
 80146a8:	0801466f 	.word	0x0801466f
 80146ac:	0801466f 	.word	0x0801466f
 80146b0:	0801466f 	.word	0x0801466f
 80146b4:	0801466f 	.word	0x0801466f
 80146b8:	0801466f 	.word	0x0801466f
 80146bc:	0801466f 	.word	0x0801466f
 80146c0:	0801466f 	.word	0x0801466f
 80146c4:	0801466f 	.word	0x0801466f
 80146c8:	0801466f 	.word	0x0801466f
 80146cc:	08014f95 	.word	0x08014f95
 80146d0:	080147db 	.word	0x080147db
 80146d4:	08014a15 	.word	0x08014a15
 80146d8:	0801466f 	.word	0x0801466f
 80146dc:	0801466f 	.word	0x0801466f
 80146e0:	08014d4b 	.word	0x08014d4b
 80146e4:	08015107 	.word	0x08015107
 80146e8:	08014ea7 	.word	0x08014ea7
 80146ec:	2ba8      	cmp	r3, #168	; 0xa8
 80146ee:	f000 8501 	beq.w	80150f4 <ParseCertRelative+0xd04>
 80146f2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80146f6:	4293      	cmp	r3, r2
 80146f8:	d1b9      	bne.n	801466e <ParseCertRelative+0x27e>
    word32 idx = 0;
 80146fa:	2300      	movs	r3, #0
    int len = 0;
 80146fc:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    if (CheckBitString(input, &idx, &len, (word32)sz, 0, NULL) < 0)
 8014700:	e9cd 3300 	strd	r3, r3, [sp]
 8014704:	aa16      	add	r2, sp, #88	; 0x58
 8014706:	4633      	mov	r3, r6
 8014708:	a915      	add	r1, sp, #84	; 0x54
 801470a:	4628      	mov	r0, r5
 801470c:	f7fe fa68 	bl	8012be0 <CheckBitString>
 8014710:	2800      	cmp	r0, #0
 8014712:	f2c0 8147 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (idx < (word32)sz)
 8014716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014718:	429e      	cmp	r6, r3
 801471a:	f240 8143 	bls.w	80149a4 <ParseCertRelative+0x5b4>
        cert->nsCertType = input[idx];
 801471e:	5ceb      	ldrb	r3, [r5, r3]
 8014720:	f889 3320 	strb.w	r3, [r9, #800]	; 0x320
        if (ret == ASN_CRIT_EXT_E) {
 8014724:	e176      	b.n	8014a14 <ParseCertRelative+0x624>
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 8014726:	f899 3355 	ldrb.w	r3, [r9, #853]	; 0x355
 801472a:	f013 0308 	ands.w	r3, r3, #8
 801472e:	f040 853e 	bne.w	80151ae <ParseCertRelative+0xdbe>
            cert->extBasicConstCrit = critical ? 1 : 0;
 8014732:	3f00      	subs	r7, #0
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 8014734:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
            cert->extBasicConstCrit = critical ? 1 : 0;
 8014738:	bf18      	it	ne
 801473a:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 801473c:	053f      	lsls	r7, r7, #20
 801473e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8014742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014746:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
 801474a:	4317      	orrs	r7, r2
    int length = 0;
 801474c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 8014750:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    if (GetSequence(input, &idx, &length, (word32)sz) < 0) {
 8014754:	4633      	mov	r3, r6
 8014756:	aa15      	add	r2, sp, #84	; 0x54
 8014758:	a914      	add	r1, sp, #80	; 0x50
 801475a:	4628      	mov	r0, r5
 801475c:	f7fe f98f 	bl	8012a7e <GetSequence>
 8014760:	2800      	cmp	r0, #0
 8014762:	f2c0 811f 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (length == 0)
 8014766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014768:	2b00      	cmp	r3, #0
 801476a:	f000 8153 	beq.w	8014a14 <ParseCertRelative+0x624>
    ret = GetBoolean(input, &idx, (word32)sz);
 801476e:	4632      	mov	r2, r6
 8014770:	a914      	add	r1, sp, #80	; 0x50
 8014772:	4628      	mov	r0, r5
 8014774:	f7fd ffd8 	bl	8012728 <GetBoolean>
    cert->isCA = ret ? 1 : 0;
 8014778:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 801477c:	2800      	cmp	r0, #0
 801477e:	bfd4      	ite	le
 8014780:	2000      	movle	r0, #0
 8014782:	2001      	movgt	r0, #1
 8014784:	f360 1304 	bfi	r3, r0, #4, #1
 8014788:	f889 3354 	strb.w	r3, [r9, #852]	; 0x354
    if (idx >= (word32)sz) {
 801478c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801478e:	429e      	cmp	r6, r3
 8014790:	f240 8140 	bls.w	8014a14 <ParseCertRelative+0x624>
    word32 idx = *inOutIdx;
 8014794:	9316      	str	r3, [sp, #88]	; 0x58
    if ((idx + 3) > maxIdx)
 8014796:	3303      	adds	r3, #3
 8014798:	429e      	cmp	r6, r3
 801479a:	f0c0 8103 	bcc.w	80149a4 <ParseCertRelative+0x5b4>
    if (GetASNTag(input, &idx, &b, maxIdx) != 0)
 801479e:	4633      	mov	r3, r6
 80147a0:	aa13      	add	r2, sp, #76	; 0x4c
 80147a2:	a916      	add	r1, sp, #88	; 0x58
 80147a4:	4628      	mov	r0, r5
 80147a6:	f7fe f92c 	bl	8012a02 <GetASNTag>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	f040 80fa 	bne.w	80149a4 <ParseCertRelative+0x5b4>
    if (b != ASN_INTEGER)
 80147b0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80147b4:	2b02      	cmp	r3, #2
 80147b6:	f040 80f5 	bne.w	80149a4 <ParseCertRelative+0x5b4>
    if (input[idx++] != 1)
 80147ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80147bc:	1c5a      	adds	r2, r3, #1
 80147be:	5ceb      	ldrb	r3, [r5, r3]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	f040 80ef 	bne.w	80149a4 <ParseCertRelative+0x5b4>
    b = input[idx++];
 80147c6:	5cab      	ldrb	r3, [r5, r2]
    cert->pathLength = (byte)ret;
 80147c8:	f889 32f4 	strb.w	r3, [r9, #756]	; 0x2f4
    cert->pathLengthSet = 1;
 80147cc:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 80147d0:	f043 0320 	orr.w	r3, r3, #32
        cert->extAuthKeyIdSet = 0;
 80147d4:	f889 3354 	strb.w	r3, [r9, #852]	; 0x354
        return 0;
 80147d8:	e11c      	b.n	8014a14 <ParseCertRelative+0x624>
            VERIFY_AND_SET_OID(cert->extCRLdistSet);
 80147da:	f899 3355 	ldrb.w	r3, [r9, #853]	; 0x355
 80147de:	f013 0302 	ands.w	r3, r3, #2
 80147e2:	f040 84e4 	bne.w	80151ae <ParseCertRelative+0xdbe>
            cert->extCRLdistCrit = critical ? 1 : 0;
 80147e6:	3f00      	subs	r7, #0
            VERIFY_AND_SET_OID(cert->extCRLdistSet);
 80147e8:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
    word32 idx = 0, localIdx;
 80147ec:	9314      	str	r3, [sp, #80]	; 0x50
            cert->extCRLdistCrit = critical ? 1 : 0;
 80147ee:	bf18      	it	ne
 80147f0:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extCRLdistSet);
 80147f2:	04bf      	lsls	r7, r7, #18
 80147f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80147f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80147fc:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8014800:	4317      	orrs	r7, r2
    int length = 0;
 8014802:	9316      	str	r3, [sp, #88]	; 0x58
    byte tag   = 0;
 8014804:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    cert->extCrlInfoRawSz = (int)sz;
 8014808:	e9c9 56af 	strd	r5, r6, [r9, #700]	; 0x2bc
            VERIFY_AND_SET_OID(cert->extCRLdistSet);
 801480c:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    if (GetSequence(input, &idx, &length, sz) < 0)
 8014810:	4633      	mov	r3, r6
 8014812:	aa16      	add	r2, sp, #88	; 0x58
 8014814:	a914      	add	r1, sp, #80	; 0x50
 8014816:	4628      	mov	r0, r5
 8014818:	f7fe f931 	bl	8012a7e <GetSequence>
 801481c:	2800      	cmp	r0, #0
 801481e:	f2c0 80c1 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (GetSequence(input, &idx, &length, sz) < 0)
 8014822:	4633      	mov	r3, r6
 8014824:	aa16      	add	r2, sp, #88	; 0x58
 8014826:	a914      	add	r1, sp, #80	; 0x50
 8014828:	4628      	mov	r0, r5
 801482a:	f7fe f928 	bl	8012a7e <GetSequence>
 801482e:	2800      	cmp	r0, #0
 8014830:	f2c0 80b8 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    localIdx = idx;
 8014834:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014836:	9315      	str	r3, [sp, #84]	; 0x54
    if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8014838:	aa13      	add	r2, sp, #76	; 0x4c
 801483a:	4633      	mov	r3, r6
 801483c:	a915      	add	r1, sp, #84	; 0x54
 801483e:	4628      	mov	r0, r5
 8014840:	f7fe f8df 	bl	8012a02 <GetASNTag>
 8014844:	2800      	cmp	r0, #0
 8014846:	d149      	bne.n	80148dc <ParseCertRelative+0x4ec>
 8014848:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801484c:	2ba0      	cmp	r3, #160	; 0xa0
 801484e:	d145      	bne.n	80148dc <ParseCertRelative+0x4ec>
        idx++;
 8014850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014852:	3301      	adds	r3, #1
 8014854:	9314      	str	r3, [sp, #80]	; 0x50
        if (GetLength(input, &idx, &length, sz) < 0)
 8014856:	aa16      	add	r2, sp, #88	; 0x58
 8014858:	4633      	mov	r3, r6
 801485a:	a914      	add	r1, sp, #80	; 0x50
 801485c:	4628      	mov	r0, r5
 801485e:	f7fe f887 	bl	8012970 <GetLength>
 8014862:	2800      	cmp	r0, #0
 8014864:	f2c0 809e 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        localIdx = idx;
 8014868:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801486a:	9215      	str	r2, [sp, #84]	; 0x54
        if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 801486c:	a915      	add	r1, sp, #84	; 0x54
 801486e:	aa13      	add	r2, sp, #76	; 0x4c
 8014870:	4628      	mov	r0, r5
 8014872:	f7fe f8c6 	bl	8012a02 <GetASNTag>
 8014876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014878:	2800      	cmp	r0, #0
 801487a:	d169      	bne.n	8014950 <ParseCertRelative+0x560>
 801487c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8014880:	2aa0      	cmp	r2, #160	; 0xa0
 8014882:	d165      	bne.n	8014950 <ParseCertRelative+0x560>
            idx++;
 8014884:	3301      	adds	r3, #1
 8014886:	9314      	str	r3, [sp, #80]	; 0x50
            if (GetLength(input, &idx, &length, sz) < 0)
 8014888:	aa16      	add	r2, sp, #88	; 0x58
 801488a:	4633      	mov	r3, r6
 801488c:	a914      	add	r1, sp, #80	; 0x50
 801488e:	4628      	mov	r0, r5
 8014890:	f7fe f86e 	bl	8012970 <GetLength>
 8014894:	2800      	cmp	r0, #0
 8014896:	f2c0 8085 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            localIdx = idx;
 801489a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801489c:	9215      	str	r2, [sp, #84]	; 0x54
            if (GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 801489e:	a915      	add	r1, sp, #84	; 0x54
 80148a0:	aa13      	add	r2, sp, #76	; 0x4c
 80148a2:	4628      	mov	r0, r5
 80148a4:	f7fe f8ad 	bl	8012a02 <GetASNTag>
 80148a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d150      	bne.n	8014950 <ParseCertRelative+0x560>
 80148ae:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80148b2:	2a86      	cmp	r2, #134	; 0x86
 80148b4:	d14c      	bne.n	8014950 <ParseCertRelative+0x560>
                idx++;
 80148b6:	3301      	adds	r3, #1
 80148b8:	9314      	str	r3, [sp, #80]	; 0x50
                if (GetLength(input, &idx, &length, sz) < 0)
 80148ba:	aa16      	add	r2, sp, #88	; 0x58
 80148bc:	4633      	mov	r3, r6
 80148be:	a914      	add	r1, sp, #80	; 0x50
 80148c0:	4628      	mov	r0, r5
 80148c2:	f7fe f855 	bl	8012970 <GetLength>
 80148c6:	2800      	cmp	r0, #0
 80148c8:	db6c      	blt.n	80149a4 <ParseCertRelative+0x5b4>
                cert->extCrlInfo = input + idx;
 80148ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
                cert->extCrlInfoSz = length;
 80148cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80148ce:	f8c9 32c8 	str.w	r3, [r9, #712]	; 0x2c8
                cert->extCrlInfo = input + idx;
 80148d2:	18a9      	adds	r1, r5, r2
 80148d4:	f8c9 12c4 	str.w	r1, [r9, #708]	; 0x2c4
            idx += (word32)length;
 80148d8:	4413      	add	r3, r2
 80148da:	9314      	str	r3, [sp, #80]	; 0x50
    localIdx = idx;
 80148dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148de:	9315      	str	r3, [sp, #84]	; 0x54
    if (idx < (word32)sz &&
 80148e0:	429e      	cmp	r6, r3
 80148e2:	d919      	bls.n	8014918 <ParseCertRelative+0x528>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 80148e4:	4633      	mov	r3, r6
 80148e6:	aa13      	add	r2, sp, #76	; 0x4c
 80148e8:	a915      	add	r1, sp, #84	; 0x54
 80148ea:	4628      	mov	r0, r5
 80148ec:	f7fe f889 	bl	8012a02 <GetASNTag>
    if (idx < (word32)sz &&
 80148f0:	b990      	cbnz	r0, 8014918 <ParseCertRelative+0x528>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 80148f2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80148f6:	2ba1      	cmp	r3, #161	; 0xa1
 80148f8:	d10e      	bne.n	8014918 <ParseCertRelative+0x528>
        idx++;
 80148fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148fc:	3301      	adds	r3, #1
 80148fe:	9314      	str	r3, [sp, #80]	; 0x50
        if (GetLength(input, &idx, &length, sz) < 0)
 8014900:	aa16      	add	r2, sp, #88	; 0x58
 8014902:	4633      	mov	r3, r6
 8014904:	a914      	add	r1, sp, #80	; 0x50
 8014906:	4628      	mov	r0, r5
 8014908:	f7fe f832 	bl	8012970 <GetLength>
 801490c:	2800      	cmp	r0, #0
 801490e:	db49      	blt.n	80149a4 <ParseCertRelative+0x5b4>
        idx += (word32)length;
 8014910:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014912:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014914:	4413      	add	r3, r2
 8014916:	9314      	str	r3, [sp, #80]	; 0x50
    localIdx = idx;
 8014918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801491a:	9315      	str	r3, [sp, #84]	; 0x54
    if (idx < (word32)sz &&
 801491c:	429e      	cmp	r6, r3
 801491e:	d979      	bls.n	8014a14 <ParseCertRelative+0x624>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8014920:	4633      	mov	r3, r6
 8014922:	aa13      	add	r2, sp, #76	; 0x4c
 8014924:	a915      	add	r1, sp, #84	; 0x54
 8014926:	4628      	mov	r0, r5
 8014928:	f7fe f86b 	bl	8012a02 <GetASNTag>
    if (idx < (word32)sz &&
 801492c:	2800      	cmp	r0, #0
 801492e:	d171      	bne.n	8014a14 <ParseCertRelative+0x624>
        GetASNTag(input, &localIdx, &tag, sz) == 0 &&
 8014930:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014934:	2ba2      	cmp	r3, #162	; 0xa2
 8014936:	d16d      	bne.n	8014a14 <ParseCertRelative+0x624>
        idx++;
 8014938:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801493a:	3301      	adds	r3, #1
 801493c:	9314      	str	r3, [sp, #80]	; 0x50
        if (GetLength(input, &idx, &length, sz) < 0)
 801493e:	aa16      	add	r2, sp, #88	; 0x58
 8014940:	4633      	mov	r3, r6
 8014942:	a914      	add	r1, sp, #80	; 0x50
 8014944:	4628      	mov	r0, r5
 8014946:	f7fe f813 	bl	8012970 <GetLength>
            if ((ret == 0) && (DecodeAuthKeyId(input, length, cert) < 0)) {
 801494a:	2800      	cmp	r0, #0
 801494c:	da62      	bge.n	8014a14 <ParseCertRelative+0x624>
 801494e:	e029      	b.n	80149a4 <ParseCertRelative+0x5b4>
            idx += (word32)length;
 8014950:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014952:	e7c1      	b.n	80148d8 <ParseCertRelative+0x4e8>
            VERIFY_AND_SET_OID(cert->extAuthInfoSet);
 8014954:	f899 3355 	ldrb.w	r3, [r9, #853]	; 0x355
 8014958:	0758      	lsls	r0, r3, #29
 801495a:	f100 8428 	bmi.w	80151ae <ParseCertRelative+0xdbe>
 801495e:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
            cert->extAuthInfoCrit = critical ? 1 : 0;
 8014962:	2f00      	cmp	r7, #0
 8014964:	bf14      	ite	ne
 8014966:	2301      	movne	r3, #1
 8014968:	2300      	moveq	r3, #0
            VERIFY_AND_SET_OID(cert->extAuthInfoSet);
 801496a:	ea4f 43c3 	mov.w	r3, r3, lsl #19
 801496e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8014972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801497a:	ea43 0302 	orr.w	r3, r3, r2
 801497e:	f8c9 3354 	str.w	r3, [r9, #852]	; 0x354
            if (critical) {
 8014982:	f47f ae77 	bne.w	8014674 <ParseCertRelative+0x284>
    if (GetSequence(input, &idx, &length, sz) < 0)
 8014986:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 801498a:	ac14      	add	r4, sp, #80	; 0x50
 801498c:	4633      	mov	r3, r6
 801498e:	4642      	mov	r2, r8
 8014990:	4621      	mov	r1, r4
 8014992:	4628      	mov	r0, r5
    int length = 0;
 8014994:	e9cd 7714 	strd	r7, r7, [sp, #80]	; 0x50
    byte b = 0;
 8014998:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
    if (GetSequence(input, &idx, &length, sz) < 0)
 801499c:	f7fe f86f 	bl	8012a7e <GetSequence>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	da05      	bge.n	80149b0 <ParseCertRelative+0x5c0>
                return ASN_PARSE_E;
 80149a4:	f06f 048b 	mvn.w	r4, #139	; 0x8b
 80149a8:	f000 bc03 	b.w	80151b2 <ParseCertRelative+0xdc2>
        idx += (word32)length;
 80149ac:	4418      	add	r0, r3
 80149ae:	9014      	str	r0, [sp, #80]	; 0x50
    while ((idx < (word32)sz) && (count < MAX_AIA_SZ)) {
 80149b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149b2:	429e      	cmp	r6, r3
 80149b4:	d92e      	bls.n	8014a14 <ParseCertRelative+0x624>
        if (GetSequence(input, &idx, &length, sz) < 0)
 80149b6:	4633      	mov	r3, r6
 80149b8:	4642      	mov	r2, r8
 80149ba:	4621      	mov	r1, r4
 80149bc:	4628      	mov	r0, r5
 80149be:	f7fe f85e 	bl	8012a7e <GetSequence>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	dbee      	blt.n	80149a4 <ParseCertRelative+0x5b4>
        if (GetObjectId(input, &idx, &oid, oidCertAuthInfoType, sz) < 0) {
 80149c6:	9600      	str	r6, [sp, #0]
 80149c8:	2307      	movs	r3, #7
 80149ca:	aa16      	add	r2, sp, #88	; 0x58
 80149cc:	4621      	mov	r1, r4
 80149ce:	4628      	mov	r0, r5
        oid = 0;
 80149d0:	9716      	str	r7, [sp, #88]	; 0x58
        if (GetObjectId(input, &idx, &oid, oidCertAuthInfoType, sz) < 0) {
 80149d2:	f7fe fb5e 	bl	8013092 <GetObjectId>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	dbe4      	blt.n	80149a4 <ParseCertRelative+0x5b4>
        if (GetASNTag(input, &idx, &b, sz) < 0)
 80149da:	4633      	mov	r3, r6
 80149dc:	aa13      	add	r2, sp, #76	; 0x4c
 80149de:	4621      	mov	r1, r4
 80149e0:	4628      	mov	r0, r5
 80149e2:	f7fe f80e 	bl	8012a02 <GetASNTag>
 80149e6:	2800      	cmp	r0, #0
 80149e8:	dbdc      	blt.n	80149a4 <ParseCertRelative+0x5b4>
        if (GetLength(input, &idx, &length, sz) < 0)
 80149ea:	4633      	mov	r3, r6
 80149ec:	4642      	mov	r2, r8
 80149ee:	4628      	mov	r0, r5
 80149f0:	f7fd ffbe 	bl	8012970 <GetLength>
 80149f4:	2800      	cmp	r0, #0
 80149f6:	dbd5      	blt.n	80149a4 <ParseCertRelative+0x5b4>
        if (b == GENERALNAME_URI && oid == AIA_OCSP_OID)
 80149f8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80149fc:	2b86      	cmp	r3, #134	; 0x86
 80149fe:	e9dd 0314 	ldrd	r0, r3, [sp, #80]	; 0x50
 8014a02:	d1d3      	bne.n	80149ac <ParseCertRelative+0x5bc>
 8014a04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014a06:	2a74      	cmp	r2, #116	; 0x74
 8014a08:	d1d0      	bne.n	80149ac <ParseCertRelative+0x5bc>
            cert->extAuthInfo = input + idx;
 8014a0a:	4428      	add	r0, r5
            cert->extAuthInfoSz = length;
 8014a0c:	f8c9 32b8 	str.w	r3, [r9, #696]	; 0x2b8
            cert->extAuthInfo = input + idx;
 8014a10:	f8c9 02b4 	str.w	r0, [r9, #692]	; 0x2b4
        idx += (word32)length;
 8014a14:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014a18:	4413      	add	r3, r2
 8014a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8014a1c:	e543      	b.n	80144a6 <ParseCertRelative+0xb6>
            VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 8014a1e:	f999 3355 	ldrsb.w	r3, [r9, #853]	; 0x355
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f2c0 83c3 	blt.w	80151ae <ParseCertRelative+0xdbe>
            cert->extSubjAltNameCrit = critical ? 1 : 0;
 8014a28:	3f00      	subs	r7, #0
            VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 8014a2a:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
            cert->extSubjAltNameCrit = critical ? 1 : 0;
 8014a2e:	bf18      	it	ne
 8014a30:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 8014a32:	05bf      	lsls	r7, r7, #22
 8014a34:	f423 0381 	bic.w	r3, r3, #4227072	; 0x408000
 8014a38:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8014a3c:	431f      	orrs	r7, r3
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014a3e:	ac12      	add	r4, sp, #72	; 0x48
    word32 idx = 0;
 8014a40:	2300      	movs	r3, #0
    int length = 0;
 8014a42:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
            VERIFY_AND_SET_OID(cert->extSubjAltNameSet);
 8014a46:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014a4a:	4633      	mov	r3, r6
 8014a4c:	aa13      	add	r2, sp, #76	; 0x4c
 8014a4e:	4621      	mov	r1, r4
 8014a50:	4628      	mov	r0, r5
 8014a52:	f7fe f814 	bl	8012a7e <GetSequence>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	dba4      	blt.n	80149a4 <ParseCertRelative+0x5b4>
    if (length == 0) {
 8014a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d0a1      	beq.n	80149a4 <ParseCertRelative+0x5b4>
    cert->weOwnAltNames = 1;
 8014a60:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 8014a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a68:	f889 3354 	strb.w	r3, [r9, #852]	; 0x354
    while (length > 0) {
 8014a6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014a6e:	2a00      	cmp	r2, #0
 8014a70:	ddd0      	ble.n	8014a14 <ParseCertRelative+0x624>
        if (idx >= (word32)sz) {
 8014a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a74:	429e      	cmp	r6, r3
 8014a76:	f240 85e6 	bls.w	8015646 <ParseCertRelative+0x1256>
        current_byte = input[idx++];
 8014a7a:	1c5f      	adds	r7, r3, #1
 8014a7c:	9712      	str	r7, [sp, #72]	; 0x48
 8014a7e:	5ceb      	ldrb	r3, [r5, r3]
        length--;
 8014a80:	3a01      	subs	r2, #1
        if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_DNS_TYPE)) {
 8014a82:	2b82      	cmp	r3, #130	; 0x82
        length--;
 8014a84:	9213      	str	r2, [sp, #76]	; 0x4c
        if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_DNS_TYPE)) {
 8014a86:	d12c      	bne.n	8014ae2 <ParseCertRelative+0x6f2>
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014a88:	4633      	mov	r3, r6
 8014a8a:	aa16      	add	r2, sp, #88	; 0x58
 8014a8c:	4621      	mov	r1, r4
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f7fd ff6e 	bl	8012970 <GetLength>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	db85      	blt.n	80149a4 <ParseCertRelative+0x5b4>
            length -= (int)(idx - lenStartIdx);
 8014a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
            dnsEntry = AltNameNew(cert->heap);
 8014a9a:	f8d9 0280 	ldr.w	r0, [r9, #640]	; 0x280
            length -= (int)(idx - lenStartIdx);
 8014a9e:	1bdf      	subs	r7, r3, r7
 8014aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa2:	1bdb      	subs	r3, r3, r7
 8014aa4:	9313      	str	r3, [sp, #76]	; 0x4c
            dnsEntry = AltNameNew(cert->heap);
 8014aa6:	f7fe fc12 	bl	80132ce <AltNameNew>
            if (dnsEntry == NULL) {
 8014aaa:	4607      	mov	r7, r0
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d03f      	beq.n	8014b30 <ParseCertRelative+0x740>
            dnsEntry->type = ASN_DNS_TYPE;
 8014ab0:	2302      	movs	r3, #2
            uriEntry->type = ASN_URI_TYPE;
 8014ab2:	607b      	str	r3, [r7, #4]
            uriEntry->name = (char*)XMALLOC((size_t)strLen + 1, cert->heap,
 8014ab4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014ab6:	3001      	adds	r0, #1
 8014ab8:	f008 ff54 	bl	801d964 <malloc>
 8014abc:	60f8      	str	r0, [r7, #12]
            if (uriEntry->name == NULL) {
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	d033      	beq.n	8014b2a <ParseCertRelative+0x73a>
            uriEntry->len = strLen;
 8014ac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ac4:	60ba      	str	r2, [r7, #8]
            XMEMCPY(uriEntry->name, &input[idx], (size_t)strLen);
 8014ac6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014ac8:	4429      	add	r1, r5
 8014aca:	f008 ff6b 	bl	801d9a4 <memcpy>
            uriEntry->name[strLen] = '\0';
 8014ace:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	2100      	movs	r1, #0
 8014ad4:	54d1      	strb	r1, [r2, r3]
    dnsEntry->next = cert->altNames;
 8014ad6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8014ada:	603b      	str	r3, [r7, #0]
    cert->altNames = dnsEntry;
 8014adc:	f8c9 7024 	str.w	r7, [r9, #36]	; 0x24
 8014ae0:	e038      	b.n	8014b54 <ParseCertRelative+0x764>
        else if (current_byte ==
 8014ae2:	2ba4      	cmp	r3, #164	; 0xa4
 8014ae4:	d13e      	bne.n	8014b64 <ParseCertRelative+0x774>
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014ae6:	4633      	mov	r3, r6
 8014ae8:	aa16      	add	r2, sp, #88	; 0x58
 8014aea:	4621      	mov	r1, r4
 8014aec:	4628      	mov	r0, r5
 8014aee:	f7fd ff3f 	bl	8012970 <GetLength>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	f6ff af56 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            if (GetSequence(input, &idx, &strLen, sz) < 0) {
 8014af8:	4628      	mov	r0, r5
 8014afa:	f7fd ffc0 	bl	8012a7e <GetSequence>
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f6ff af50 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            length -= (int)(idx - lenStartIdx);
 8014b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
            dirEntry = AltNameNew(cert->heap);
 8014b06:	f8d9 0280 	ldr.w	r0, [r9, #640]	; 0x280
            length -= (int)(idx - lenStartIdx);
 8014b0a:	1bdf      	subs	r7, r3, r7
 8014b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b0e:	1bdb      	subs	r3, r3, r7
 8014b10:	9313      	str	r3, [sp, #76]	; 0x4c
            dirEntry = AltNameNew(cert->heap);
 8014b12:	f7fe fbdc 	bl	80132ce <AltNameNew>
            if (dirEntry == NULL) {
 8014b16:	4607      	mov	r7, r0
 8014b18:	b150      	cbz	r0, 8014b30 <ParseCertRelative+0x740>
            dirEntry->type = ASN_DIR_TYPE;
 8014b1a:	2304      	movs	r3, #4
 8014b1c:	6043      	str	r3, [r0, #4]
            dirEntry->name = (char*)XMALLOC((size_t)strLen + 1, cert->heap,
 8014b1e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014b20:	3001      	adds	r0, #1
 8014b22:	f008 ff1f 	bl	801d964 <malloc>
 8014b26:	60f8      	str	r0, [r7, #12]
            if (dirEntry->name == NULL) {
 8014b28:	b928      	cbnz	r0, 8014b36 <ParseCertRelative+0x746>
                XFREE(uriEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	f008 ff22 	bl	801d974 <free>
                return MEMORY_E;
 8014b30:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8014b34:	e33d      	b.n	80151b2 <ParseCertRelative+0xdc2>
            dirEntry->len = strLen;
 8014b36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b38:	60ba      	str	r2, [r7, #8]
            XMEMCPY(dirEntry->name, &input[idx], (size_t)strLen);
 8014b3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014b3c:	4429      	add	r1, r5
 8014b3e:	f008 ff31 	bl	801d9a4 <memcpy>
            dirEntry->name[strLen] = '\0';
 8014b42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	2100      	movs	r1, #0
 8014b48:	54d1      	strb	r1, [r2, r3]
            dirEntry->next = cert->altDirNames;
 8014b4a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8014b4e:	603b      	str	r3, [r7, #0]
            cert->altDirNames = dirEntry;
 8014b50:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
            length -= strLen;
 8014b54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014b56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            idx    += (word32)strLen;
 8014b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
            length -= strLen;
 8014b5a:	1a52      	subs	r2, r2, r1
 8014b5c:	9213      	str	r2, [sp, #76]	; 0x4c
            idx    += (word32)strLen;
 8014b5e:	440b      	add	r3, r1
            idx += (word32)strLen;
 8014b60:	9312      	str	r3, [sp, #72]	; 0x48
 8014b62:	e783      	b.n	8014a6c <ParseCertRelative+0x67c>
        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_RFC822_TYPE)) {
 8014b64:	2b81      	cmp	r3, #129	; 0x81
 8014b66:	d12d      	bne.n	8014bc4 <ParseCertRelative+0x7d4>
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014b68:	4633      	mov	r3, r6
 8014b6a:	aa16      	add	r2, sp, #88	; 0x58
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	4628      	mov	r0, r5
 8014b70:	f7fd fefe 	bl	8012970 <GetLength>
 8014b74:	2800      	cmp	r0, #0
 8014b76:	f6ff af15 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            length -= (int)(idx - lenStartIdx);
 8014b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
            emailEntry = AltNameNew(cert->heap);
 8014b7c:	f8d9 0280 	ldr.w	r0, [r9, #640]	; 0x280
            length -= (int)(idx - lenStartIdx);
 8014b80:	1bdf      	subs	r7, r3, r7
 8014b82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b84:	1bdb      	subs	r3, r3, r7
 8014b86:	9313      	str	r3, [sp, #76]	; 0x4c
            emailEntry = AltNameNew(cert->heap);
 8014b88:	f7fe fba1 	bl	80132ce <AltNameNew>
            if (emailEntry == NULL) {
 8014b8c:	4607      	mov	r7, r0
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d0ce      	beq.n	8014b30 <ParseCertRelative+0x740>
            emailEntry->type = ASN_RFC822_TYPE;
 8014b92:	2301      	movs	r3, #1
 8014b94:	6043      	str	r3, [r0, #4]
            emailEntry->name = (char*)XMALLOC((size_t)strLen + 1, cert->heap,
 8014b96:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014b98:	4418      	add	r0, r3
 8014b9a:	f008 fee3 	bl	801d964 <malloc>
 8014b9e:	60f8      	str	r0, [r7, #12]
            if (emailEntry->name == NULL) {
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	d0c2      	beq.n	8014b2a <ParseCertRelative+0x73a>
            emailEntry->len = strLen;
 8014ba4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ba6:	60ba      	str	r2, [r7, #8]
            XMEMCPY(emailEntry->name, &input[idx], (size_t)strLen);
 8014ba8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014baa:	4429      	add	r1, r5
 8014bac:	f008 fefa 	bl	801d9a4 <memcpy>
            emailEntry->name[strLen] = '\0';
 8014bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014bb2:	68fa      	ldr	r2, [r7, #12]
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	54d1      	strb	r1, [r2, r3]
            emailEntry->next = cert->altEmailNames;
 8014bb8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8014bbc:	603b      	str	r3, [r7, #0]
            cert->altEmailNames = emailEntry;
 8014bbe:	f8c9 7028 	str.w	r7, [r9, #40]	; 0x28
            length -= strLen;
 8014bc2:	e7c7      	b.n	8014b54 <ParseCertRelative+0x764>
        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_URI_TYPE)) {
 8014bc4:	2b86      	cmp	r3, #134	; 0x86
 8014bc6:	d122      	bne.n	8014c0e <ParseCertRelative+0x81e>
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014bc8:	4633      	mov	r3, r6
 8014bca:	aa16      	add	r2, sp, #88	; 0x58
 8014bcc:	4621      	mov	r1, r4
 8014bce:	4628      	mov	r0, r5
 8014bd0:	f7fd fece 	bl	8012970 <GetLength>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	f6ff aee5 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            length -= (int)(idx - lenStartIdx);
 8014bda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014bdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            if ((word32)strLen + idx > sz) {
 8014bde:	9916      	ldr	r1, [sp, #88]	; 0x58
            length -= (int)(idx - lenStartIdx);
 8014be0:	1bdf      	subs	r7, r3, r7
 8014be2:	1bd2      	subs	r2, r2, r7
 8014be4:	9213      	str	r2, [sp, #76]	; 0x4c
            if ((word32)strLen + idx > sz) {
 8014be6:	185a      	adds	r2, r3, r1
 8014be8:	4296      	cmp	r6, r2
 8014bea:	f0c0 852c 	bcc.w	8015646 <ParseCertRelative+0x1256>
 8014bee:	442b      	add	r3, r5
                for (i = 0; i < (word32)strLen; i++) {
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	4291      	cmp	r1, r2
 8014bf4:	d102      	bne.n	8014bfc <ParseCertRelative+0x80c>
                        return ASN_ALT_NAME_E;
 8014bf6:	f06f 04a0 	mvn.w	r4, #160	; 0xa0
        if (ret == ASN_CRIT_EXT_E) {
 8014bfa:	e2da      	b.n	80151b2 <ParseCertRelative+0xdc2>
                    if (input[idx + i] == ':') {
 8014bfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014c00:	283a      	cmp	r0, #58	; 0x3a
 8014c02:	f000 850d 	beq.w	8015620 <ParseCertRelative+0x1230>
                    if (input[idx + i] == '/') {
 8014c06:	282f      	cmp	r0, #47	; 0x2f
 8014c08:	d0f5      	beq.n	8014bf6 <ParseCertRelative+0x806>
                for (i = 0; i < (word32)strLen; i++) {
 8014c0a:	3201      	adds	r2, #1
 8014c0c:	e7f1      	b.n	8014bf2 <ParseCertRelative+0x802>
        else if (current_byte ==
 8014c0e:	2ba0      	cmp	r3, #160	; 0xa0
 8014c10:	f040 808a 	bne.w	8014d28 <ParseCertRelative+0x938>
            word32 oid = 0;
 8014c14:	2300      	movs	r3, #0
 8014c16:	9315      	str	r3, [sp, #84]	; 0x54
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014c18:	aa14      	add	r2, sp, #80	; 0x50
 8014c1a:	4633      	mov	r3, r6
 8014c1c:	4621      	mov	r1, r4
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f7fd fea6 	bl	8012970 <GetLength>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	f6ff aebd 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            length -= (int)(((word32)strLen + idx - lenStartIdx));
 8014c2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
            if (GetObjectId(input, &idx, &oid, oidCertAltNameType, sz) < 0) {
 8014c2e:	9600      	str	r6, [sp, #0]
            length -= (int)(((word32)strLen + idx - lenStartIdx));
 8014c30:	4413      	add	r3, r2
 8014c32:	1bdf      	subs	r7, r3, r7
 8014c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            if (GetObjectId(input, &idx, &oid, oidCertAltNameType, sz) < 0) {
 8014c36:	aa15      	add	r2, sp, #84	; 0x54
            length -= (int)(((word32)strLen + idx - lenStartIdx));
 8014c38:	1bdf      	subs	r7, r3, r7
            if (GetObjectId(input, &idx, &oid, oidCertAltNameType, sz) < 0) {
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	2309      	movs	r3, #9
            length -= (int)(((word32)strLen + idx - lenStartIdx));
 8014c3e:	9713      	str	r7, [sp, #76]	; 0x4c
            if (GetObjectId(input, &idx, &oid, oidCertAltNameType, sz) < 0) {
 8014c40:	f7fe fa27 	bl	8013092 <GetObjectId>
 8014c44:	2800      	cmp	r0, #0
 8014c46:	f6ff aead 	blt.w	80149a4 <ParseCertRelative+0x5b4>
                    if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014c4a:	4633      	mov	r3, r6
 8014c4c:	aa14      	add	r2, sp, #80	; 0x50
 8014c4e:	4621      	mov	r1, r4
 8014c50:	4628      	mov	r0, r5
 8014c52:	f7fd fe8d 	bl	8012970 <GetLength>
 8014c56:	2800      	cmp	r0, #0
 8014c58:	da63      	bge.n	8014d22 <ParseCertRelative+0x932>
    int strLen = 0;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	9316      	str	r3, [sp, #88]	; 0x58
    if (GetASNTag(input, idx, &tag, sz) < 0) {
 8014c5e:	aa11      	add	r2, sp, #68	; 0x44
 8014c60:	4633      	mov	r3, r6
 8014c62:	4628      	mov	r0, r5
                        if (DecodeConstructedOtherName(cert, input, &idx, sz,
 8014c64:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    if (GetASNTag(input, idx, &tag, sz) < 0) {
 8014c68:	f7fd fecb 	bl	8012a02 <GetASNTag>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	f6ff ae99 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (ret == 0 && (tag != (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED))) {
 8014c72:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014c76:	2ba0      	cmp	r3, #160	; 0xa0
 8014c78:	f47f ae94 	bne.w	80149a4 <ParseCertRelative+0x5b4>
    if (ret == 0 && (GetLength(input, idx, &strLen, sz) < 0)) {
 8014c7c:	4633      	mov	r3, r6
 8014c7e:	aa16      	add	r2, sp, #88	; 0x58
 8014c80:	4628      	mov	r0, r5
 8014c82:	f7fd fe75 	bl	8012970 <GetLength>
 8014c86:	2800      	cmp	r0, #0
 8014c88:	f6ff ae8c 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        dnsEntry = AltNameNew(cert->heap);
 8014c8c:	f8d9 0280 	ldr.w	r0, [r9, #640]	; 0x280
 8014c90:	f7fe fb1d 	bl	80132ce <AltNameNew>
        if (dnsEntry == NULL) {
 8014c94:	4607      	mov	r7, r0
 8014c96:	2800      	cmp	r0, #0
 8014c98:	f43f ae84 	beq.w	80149a4 <ParseCertRelative+0x5b4>
        switch (oid) {
 8014c9c:	f240 1309 	movw	r3, #265	; 0x109
 8014ca0:	4598      	cmp	r8, r3
 8014ca2:	d11f      	bne.n	8014ce4 <ParseCertRelative+0x8f4>
                if (GetASNTag(input, idx, &tag, sz) < 0) {
 8014ca4:	4633      	mov	r3, r6
 8014ca6:	aa11      	add	r2, sp, #68	; 0x44
 8014ca8:	4621      	mov	r1, r4
 8014caa:	4628      	mov	r0, r5
 8014cac:	f7fd fea9 	bl	8012a02 <GetASNTag>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	db13      	blt.n	8014cdc <ParseCertRelative+0x8ec>
                        tag != ASN_PRINTABLE_STRING && tag != ASN_UTF8STRING &&
 8014cb4:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
 8014cb8:	f1b8 0f16 	cmp.w	r8, #22
 8014cbc:	d80e      	bhi.n	8014cdc <ParseCertRelative+0x8ec>
 8014cbe:	4bb4      	ldr	r3, [pc, #720]	; (8014f90 <ParseCertRelative+0xba0>)
 8014cc0:	fa23 f808 	lsr.w	r8, r3, r8
 8014cc4:	ea6f 0808 	mvn.w	r8, r8
 8014cc8:	f018 0801 	ands.w	r8, r8, #1
 8014ccc:	d106      	bne.n	8014cdc <ParseCertRelative+0x8ec>
                if (ret == 0 && (GetLength(input, idx, &strLen, sz) < 0)) {
 8014cce:	4633      	mov	r3, r6
 8014cd0:	aa16      	add	r2, sp, #88	; 0x58
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f7fd fe4c 	bl	8012970 <GetLength>
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	da09      	bge.n	8014cf0 <ParseCertRelative+0x900>
        XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 8014cdc:	4638      	mov	r0, r7
                XFREE(entry, heap, DYNAMIC_TYPE_ALTNAME);
 8014cde:	f008 fe49 	bl	801d974 <free>
                return MEMORY_E;
 8014ce2:	e65f      	b.n	80149a4 <ParseCertRelative+0x5b4>
                XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
 8014ce4:	f008 fe46 	bl	801d974 <free>
        *idx += (word32)strLen;
 8014ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cea:	9a16      	ldr	r2, [sp, #88]	; 0x58
                        idx += (word32)strLen;
 8014cec:	4413      	add	r3, r2
 8014cee:	e737      	b.n	8014b60 <ParseCertRelative+0x770>
        dnsEntry->type = ASN_OTHER_TYPE;
 8014cf0:	f8c7 8004 	str.w	r8, [r7, #4]
        dnsEntry->len = strLen;
 8014cf4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014cf6:	60b8      	str	r0, [r7, #8]
        dnsEntry->name = (char*)XMALLOC((size_t)strLen + 1, cert->heap,
 8014cf8:	3001      	adds	r0, #1
 8014cfa:	f008 fe33 	bl	801d964 <malloc>
 8014cfe:	60f8      	str	r0, [r7, #12]
        if (dnsEntry->name == NULL) {
 8014d00:	2800      	cmp	r0, #0
 8014d02:	d0eb      	beq.n	8014cdc <ParseCertRelative+0x8ec>
            XMEMCPY(dnsEntry->name, &input[*idx], (size_t)strLen);
 8014d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014d06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014d08:	4429      	add	r1, r5
 8014d0a:	f008 fe4b 	bl	801d9a4 <memcpy>
            dnsEntry->name[strLen] = '\0';
 8014d0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014d10:	68fa      	ldr	r2, [r7, #12]
 8014d12:	2100      	movs	r1, #0
 8014d14:	54d1      	strb	r1, [r2, r3]
    dnsEntry->next = cert->altNames;
 8014d16:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8014d1a:	603b      	str	r3, [r7, #0]
    cert->altNames = dnsEntry;
 8014d1c:	f8c9 7024 	str.w	r7, [r9, #36]	; 0x24
    if (ret == 0) {
 8014d20:	e7e2      	b.n	8014ce8 <ParseCertRelative+0x8f8>
                        idx += (word32)strLen;
 8014d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d26:	e7e1      	b.n	8014cec <ParseCertRelative+0x8fc>
            if (GetLength(input, &idx, &strLen, sz) < 0) {
 8014d28:	4633      	mov	r3, r6
 8014d2a:	aa16      	add	r2, sp, #88	; 0x58
 8014d2c:	4621      	mov	r1, r4
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f7fd fe1e 	bl	8012970 <GetLength>
 8014d34:	2800      	cmp	r0, #0
 8014d36:	f6ff ae35 	blt.w	80149a4 <ParseCertRelative+0x5b4>
            length -= (int)((word32)strLen + idx - lenStartIdx);
 8014d3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014d3e:	4413      	add	r3, r2
 8014d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d42:	1bdf      	subs	r7, r3, r7
 8014d44:	1bd7      	subs	r7, r2, r7
 8014d46:	9713      	str	r7, [sp, #76]	; 0x4c
 8014d48:	e70a      	b.n	8014b60 <ParseCertRelative+0x770>
            VERIFY_AND_SET_OID(cert->extAuthKeyIdSet);
 8014d4a:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 8014d4e:	0759      	lsls	r1, r3, #29
 8014d50:	f100 822d 	bmi.w	80151ae <ParseCertRelative+0xdbe>
 8014d54:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
            cert->extAuthKeyIdCrit = critical ? 1 : 0;
 8014d58:	2f00      	cmp	r7, #0
 8014d5a:	bf14      	ite	ne
 8014d5c:	2301      	movne	r3, #1
 8014d5e:	2300      	moveq	r3, #0
            VERIFY_AND_SET_OID(cert->extAuthKeyIdSet);
 8014d60:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8014d64:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014d68:	f043 0304 	orr.w	r3, r3, #4
 8014d6c:	f022 0204 	bic.w	r2, r2, #4
 8014d70:	ea43 0302 	orr.w	r3, r3, r2
 8014d74:	f8c9 3354 	str.w	r3, [r9, #852]	; 0x354
            if (critical) {
 8014d78:	f47f ac7c 	bne.w	8014674 <ParseCertRelative+0x284>
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014d7c:	4633      	mov	r3, r6
 8014d7e:	aa16      	add	r2, sp, #88	; 0x58
 8014d80:	a915      	add	r1, sp, #84	; 0x54
 8014d82:	4628      	mov	r0, r5
    int length = 0;
 8014d84:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014d88:	f7fd fe79 	bl	8012a7e <GetSequence>
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	f6ff ae09 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (GetASNTag(input, &idx, &tag, sz) < 0) {
 8014d92:	4633      	mov	r3, r6
 8014d94:	aa14      	add	r2, sp, #80	; 0x50
 8014d96:	a915      	add	r1, sp, #84	; 0x54
 8014d98:	4628      	mov	r0, r5
 8014d9a:	f7fd fe32 	bl	8012a02 <GetASNTag>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	f6ff ae00 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (tag != (ASN_CONTEXT_SPECIFIC | 0)) {
 8014da4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014da8:	2b80      	cmp	r3, #128	; 0x80
 8014daa:	d004      	beq.n	8014db6 <ParseCertRelative+0x9c6>
        cert->extAuthKeyIdSet = 0;
 8014dac:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 8014db0:	f367 0382 	bfi	r3, r7, #2, #1
 8014db4:	e50e      	b.n	80147d4 <ParseCertRelative+0x3e4>
    if (GetLength(input, &idx, &length, sz) <= 0) {
 8014db6:	4633      	mov	r3, r6
 8014db8:	aa16      	add	r2, sp, #88	; 0x58
 8014dba:	4628      	mov	r0, r5
 8014dbc:	f7fd fdd8 	bl	8012970 <GetLength>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	f77f adef 	ble.w	80149a4 <ParseCertRelative+0x5b4>
    return GetHashId(input + idx, length, cert->extAuthKeyId,
 8014dc6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014dc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014dca:	4405      	add	r5, r0
 8014dcc:	f509 7038 	add.w	r0, r9, #736	; 0x2e0
    if (length == KEYID_SIZE)
 8014dd0:	2914      	cmp	r1, #20
 8014dd2:	d104      	bne.n	8014dde <ParseCertRelative+0x9ee>
        XMEMCPY(hash, id, (size_t)length);
 8014dd4:	460a      	mov	r2, r1
 8014dd6:	4629      	mov	r1, r5
 8014dd8:	f008 fde4 	bl	801d9a4 <memcpy>
    return ret;
 8014ddc:	e61a      	b.n	8014a14 <ParseCertRelative+0x624>
        ret = wc_ShaHash(data, len, hash);
 8014dde:	4602      	mov	r2, r0
 8014de0:	4628      	mov	r0, r5
 8014de2:	f005 fdfa 	bl	801a9da <wc_ShaHash>
 8014de6:	e5b0      	b.n	801494a <ParseCertRelative+0x55a>
            VERIFY_AND_SET_OID(cert->extSubjKeyIdSet);
 8014de8:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 8014dec:	079a      	lsls	r2, r3, #30
 8014dee:	f100 81de 	bmi.w	80151ae <ParseCertRelative+0xdbe>
 8014df2:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
            cert->extSubjKeyIdCrit = critical ? 1 : 0;
 8014df6:	2f00      	cmp	r7, #0
 8014df8:	bf14      	ite	ne
 8014dfa:	2301      	movne	r3, #1
 8014dfc:	2300      	moveq	r3, #0
            VERIFY_AND_SET_OID(cert->extSubjKeyIdSet);
 8014dfe:	ea4f 6343 	mov.w	r3, r3, lsl #25
 8014e02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8014e06:	f043 0302 	orr.w	r3, r3, #2
 8014e0a:	f022 0202 	bic.w	r2, r2, #2
 8014e0e:	ea43 0302 	orr.w	r3, r3, r2
 8014e12:	f8c9 3354 	str.w	r3, [r9, #852]	; 0x354
            if (critical) {
 8014e16:	f47f ac2d 	bne.w	8014674 <ParseCertRelative+0x284>
    ret = GetOctetString(input, &idx, &length, sz);
 8014e1a:	4633      	mov	r3, r6
 8014e1c:	aa16      	add	r2, sp, #88	; 0x58
 8014e1e:	a915      	add	r1, sp, #84	; 0x54
 8014e20:	4628      	mov	r0, r5
    int length = 0;
 8014e22:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
    ret = GetOctetString(input, &idx, &length, sz);
 8014e26:	f7fd fe40 	bl	8012aaa <GetOctetString>
    if (ret > 0) {
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	f77f ad8d 	ble.w	801494a <ParseCertRelative+0x55a>
        ret = GetHashId(input + idx, length, cert->extSubjKeyId,
 8014e30:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014e32:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e34:	4405      	add	r5, r0
 8014e36:	f509 7033 	add.w	r0, r9, #716	; 0x2cc
 8014e3a:	e7c9      	b.n	8014dd0 <ParseCertRelative+0x9e0>
            VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 8014e3c:	f999 3354 	ldrsb.w	r3, [r9, #852]	; 0x354
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	f2c0 81b4 	blt.w	80151ae <ParseCertRelative+0xdbe>
 8014e46:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
            cert->extKeyUsageCrit = critical ? 1 : 0;
 8014e4a:	3f00      	subs	r7, #0
 8014e4c:	bf18      	it	ne
 8014e4e:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 8014e50:	06bf      	lsls	r7, r7, #26
 8014e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014e5a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8014e5e:	431f      	orrs	r7, r3
    word32 idx = 0;
 8014e60:	2300      	movs	r3, #0
            VERIFY_AND_SET_OID(cert->extKeyUsageSet);
 8014e62:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    word32 idx = 0;
 8014e66:	9315      	str	r3, [sp, #84]	; 0x54
    ret = CheckBitString(input, &idx, &length, sz, 0, NULL);
 8014e68:	e9cd 3300 	strd	r3, r3, [sp]
 8014e6c:	aa16      	add	r2, sp, #88	; 0x58
 8014e6e:	4633      	mov	r3, r6
 8014e70:	a915      	add	r1, sp, #84	; 0x54
 8014e72:	4628      	mov	r0, r5
 8014e74:	f7fd feb4 	bl	8012be0 <CheckBitString>
    if (ret != 0)
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	f47f ad67 	bne.w	801494c <ParseCertRelative+0x55c>
    if (length == 0 || length > 2)
 8014e7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	f43f ad8f 	beq.w	80149a4 <ParseCertRelative+0x5b4>
 8014e86:	2b02      	cmp	r3, #2
 8014e88:	f73f ad8c 	bgt.w	80149a4 <ParseCertRelative+0x5b4>
    cert->extKeyUsage = (word16)(input[idx]);
 8014e8c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014e8e:	5c2b      	ldrb	r3, [r5, r0]
 8014e90:	f8a9 32f8 	strh.w	r3, [r9, #760]	; 0x2f8
    if (length == 2)
 8014e94:	f47f adbe 	bne.w	8014a14 <ParseCertRelative+0x624>
        cert->extKeyUsage |= (word16)(input[idx+1] << 8);
 8014e98:	4428      	add	r0, r5
 8014e9a:	7842      	ldrb	r2, [r0, #1]
 8014e9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014ea0:	f8a9 32f8 	strh.w	r3, [r9, #760]	; 0x2f8
 8014ea4:	e5b6      	b.n	8014a14 <ParseCertRelative+0x624>
            VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 8014ea6:	f899 2355 	ldrb.w	r2, [r9, #853]	; 0x355
 8014eaa:	f012 0201 	ands.w	r2, r2, #1
 8014eae:	f040 817e 	bne.w	80151ae <ParseCertRelative+0xdbe>
            cert->extExtKeyUsageCrit = critical ? 1 : 0;
 8014eb2:	3f00      	subs	r7, #0
            VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 8014eb4:	f8d9 3354 	ldr.w	r3, [r9, #852]	; 0x354
    word32 idx = 0, oid;
 8014eb8:	9214      	str	r2, [sp, #80]	; 0x50
            cert->extExtKeyUsageCrit = critical ? 1 : 0;
 8014eba:	bf18      	it	ne
 8014ebc:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extExtKeyUsageSet);
 8014ebe:	06ff      	lsls	r7, r7, #27
 8014ec0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8014ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ec8:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8014ecc:	431f      	orrs	r7, r3
 8014ece:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014ed2:	4633      	mov	r3, r6
 8014ed4:	aa16      	add	r2, sp, #88	; 0x58
 8014ed6:	a914      	add	r1, sp, #80	; 0x50
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f7fd fdd0 	bl	8012a7e <GetSequence>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	f6ff ad60 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    while (idx < (word32)sz) {
 8014ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ee6:	429e      	cmp	r6, r3
 8014ee8:	f67f ad94 	bls.w	8014a14 <ParseCertRelative+0x624>
        ret = GetObjectId(input, &idx, &oid, oidCertKeyUseType, sz);
 8014eec:	9600      	str	r6, [sp, #0]
 8014eee:	230a      	movs	r3, #10
 8014ef0:	aa15      	add	r2, sp, #84	; 0x54
 8014ef2:	a914      	add	r1, sp, #80	; 0x50
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	f7fe f8cc 	bl	8013092 <GetObjectId>
        if (ret == ASN_UNKNOWN_OID_E)
 8014efa:	f110 0f94 	cmn.w	r0, #148	; 0x94
 8014efe:	d0f1      	beq.n	8014ee4 <ParseCertRelative+0xaf4>
        else if (ret < 0)
 8014f00:	2800      	cmp	r0, #0
 8014f02:	f6ff ad4f 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        switch (oid) {
 8014f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f08:	2b4f      	cmp	r3, #79	; 0x4f
 8014f0a:	d819      	bhi.n	8014f40 <ParseCertRelative+0xb50>
 8014f0c:	2b46      	cmp	r3, #70	; 0x46
 8014f0e:	d9e9      	bls.n	8014ee4 <ParseCertRelative+0xaf4>
 8014f10:	3b47      	subs	r3, #71	; 0x47
 8014f12:	2b08      	cmp	r3, #8
 8014f14:	d8e6      	bhi.n	8014ee4 <ParseCertRelative+0xaf4>
 8014f16:	a201      	add	r2, pc, #4	; (adr r2, 8014f1c <ParseCertRelative+0xb2c>)
 8014f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f1c:	08014f53 	.word	0x08014f53
 8014f20:	08014f5d 	.word	0x08014f5d
 8014f24:	08014f67 	.word	0x08014f67
 8014f28:	08014f71 	.word	0x08014f71
 8014f2c:	08014ee5 	.word	0x08014ee5
 8014f30:	08014ee5 	.word	0x08014ee5
 8014f34:	08014ee5 	.word	0x08014ee5
 8014f38:	08014f7b 	.word	0x08014f7b
 8014f3c:	08014f85 	.word	0x08014f85
 8014f40:	2b97      	cmp	r3, #151	; 0x97
 8014f42:	d1cf      	bne.n	8014ee4 <ParseCertRelative+0xaf4>
                cert->extExtKeyUsage |= EXTKEYUSE_ANY;
 8014f44:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f48:	f043 0301 	orr.w	r3, r3, #1
                cert->extExtKeyUsage |= EXTKEYUSE_OCSP_SIGN;
 8014f4c:	f889 32fa 	strb.w	r3, [r9, #762]	; 0x2fa
                break;
 8014f50:	e7c8      	b.n	8014ee4 <ParseCertRelative+0xaf4>
                cert->extExtKeyUsage |= EXTKEYUSE_SERVER_AUTH;
 8014f52:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f56:	f043 0302 	orr.w	r3, r3, #2
 8014f5a:	e7f7      	b.n	8014f4c <ParseCertRelative+0xb5c>
                cert->extExtKeyUsage |= EXTKEYUSE_CLIENT_AUTH;
 8014f5c:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f60:	f043 0304 	orr.w	r3, r3, #4
 8014f64:	e7f2      	b.n	8014f4c <ParseCertRelative+0xb5c>
                cert->extExtKeyUsage |= EXTKEYUSE_CODESIGN;
 8014f66:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f6a:	f043 0308 	orr.w	r3, r3, #8
 8014f6e:	e7ed      	b.n	8014f4c <ParseCertRelative+0xb5c>
                cert->extExtKeyUsage |= EXTKEYUSE_EMAILPROT;
 8014f70:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f74:	f043 0310 	orr.w	r3, r3, #16
 8014f78:	e7e8      	b.n	8014f4c <ParseCertRelative+0xb5c>
                cert->extExtKeyUsage |= EXTKEYUSE_TIMESTAMP;
 8014f7a:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f7e:	f043 0320 	orr.w	r3, r3, #32
 8014f82:	e7e3      	b.n	8014f4c <ParseCertRelative+0xb5c>
                cert->extExtKeyUsage |= EXTKEYUSE_OCSP_SIGN;
 8014f84:	f899 32fa 	ldrb.w	r3, [r9, #762]	; 0x2fa
 8014f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f8c:	e7de      	b.n	8014f4c <ParseCertRelative+0xb5c>
 8014f8e:	bf00      	nop
 8014f90:	00481000 	.word	0x00481000
            if (!cert->isCA) {
 8014f94:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
                ret = ASN_NAME_INVALID_E;
 8014f98:	f013 0f10 	tst.w	r3, #16
 8014f9c:	bf14      	ite	ne
 8014f9e:	2400      	movne	r4, #0
 8014fa0:	f06f 04c5 	mvneq.w	r4, #197	; 0xc5
            VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 8014fa4:	f013 0308 	ands.w	r3, r3, #8
 8014fa8:	f040 8101 	bne.w	80151ae <ParseCertRelative+0xdbe>
            cert->extNameConstraintCrit = critical ? 1 : 0;
 8014fac:	3f00      	subs	r7, #0
            VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 8014fae:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
            cert->extNameConstraintCrit = critical ? 1 : 0;
 8014fb2:	bf18      	it	ne
 8014fb4:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extNameConstraintSet);
 8014fb6:	063f      	lsls	r7, r7, #24
 8014fb8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8014fbc:	f022 0208 	bic.w	r2, r2, #8
 8014fc0:	f047 0708 	orr.w	r7, r7, #8
 8014fc4:	4317      	orrs	r7, r2
 8014fc6:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014fca:	af12      	add	r7, sp, #72	; 0x48
    int length = 0;
 8014fcc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    if (GetSequence(input, &idx, &length, sz) < 0) {
 8014fd0:	463a      	mov	r2, r7
 8014fd2:	4633      	mov	r3, r6
 8014fd4:	a911      	add	r1, sp, #68	; 0x44
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	f7fd fd51 	bl	8012a7e <GetSequence>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	f6ff ace1 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        if (GetLength(input, &idx, &length, sz) <= 0) {
 8014fe2:	9709      	str	r7, [sp, #36]	; 0x24
    while (idx < (word32)sz) {
 8014fe4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fe6:	429e      	cmp	r6, r3
 8014fe8:	d807      	bhi.n	8014ffa <ParseCertRelative+0xc0a>
        if (ret < 0)
 8014fea:	2c00      	cmp	r4, #0
 8014fec:	f43f ad12 	beq.w	8014a14 <ParseCertRelative+0x624>
                if (ret == ASN_CRIT_EXT_E)
 8014ff0:	f114 0fa0 	cmn.w	r4, #160	; 0xa0
 8014ff4:	f43f aa5d 	beq.w	80144b2 <ParseCertRelative+0xc2>
 8014ff8:	e0db      	b.n	80151b2 <ParseCertRelative+0xdc2>
        byte b = input[idx++];
 8014ffa:	1c5a      	adds	r2, r3, #1
 8014ffc:	9211      	str	r2, [sp, #68]	; 0x44
 8014ffe:	5cef      	ldrb	r7, [r5, r3]
        if (GetLength(input, &idx, &length, sz) <= 0) {
 8015000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015002:	4633      	mov	r3, r6
 8015004:	a911      	add	r1, sp, #68	; 0x44
 8015006:	4628      	mov	r0, r5
 8015008:	f7fd fcb2 	bl	8012970 <GetLength>
 801500c:	2800      	cmp	r0, #0
 801500e:	f77f acc9 	ble.w	80149a4 <ParseCertRelative+0x5b4>
        if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 0))
 8015012:	2fa0      	cmp	r7, #160	; 0xa0
 8015014:	d110      	bne.n	8015038 <ParseCertRelative+0xc48>
            subtree = &cert->permittedNames;
 8015016:	f109 0330 	add.w	r3, r9, #48	; 0x30
        if (DecodeSubtree(input + idx, (word32)length, subtree,
 801501a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801501c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
            subtree = &cert->excludedNames;
 8015020:	9304      	str	r3, [sp, #16]
        if (DecodeSubtree(input + idx, (word32)length, subtree,
 8015022:	442f      	add	r7, r5
    word32 idx = 0;
 8015024:	2300      	movs	r3, #0
        idx += (word32)seqLength;
 8015026:	9313      	str	r3, [sp, #76]	; 0x4c
    while (idx < (word32)sz) {
 8015028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801502a:	4598      	cmp	r8, r3
 801502c:	d80a      	bhi.n	8015044 <ParseCertRelative+0xc54>
        idx += (word32)length;
 801502e:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 8015032:	4413      	add	r3, r2
 8015034:	9311      	str	r3, [sp, #68]	; 0x44
 8015036:	e7d5      	b.n	8014fe4 <ParseCertRelative+0xbf4>
        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 1))
 8015038:	2fa1      	cmp	r7, #161	; 0xa1
 801503a:	f47f acb3 	bne.w	80149a4 <ParseCertRelative+0x5b4>
            subtree = &cert->excludedNames;
 801503e:	f109 0334 	add.w	r3, r9, #52	; 0x34
 8015042:	e7ea      	b.n	801501a <ParseCertRelative+0xc2a>
        if (GetSequence(input, &idx, &seqLength, sz) < 0) {
 8015044:	4643      	mov	r3, r8
 8015046:	aa14      	add	r2, sp, #80	; 0x50
 8015048:	a913      	add	r1, sp, #76	; 0x4c
 801504a:	4638      	mov	r0, r7
 801504c:	f7fd fd17 	bl	8012a7e <GetSequence>
 8015050:	2800      	cmp	r0, #0
 8015052:	f6ff aca7 	blt.w	80149a4 <ParseCertRelative+0x5b4>
        if (idx >= (word32)sz) {
 8015056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015058:	4598      	cmp	r8, r3
 801505a:	f67f aca3 	bls.w	80149a4 <ParseCertRelative+0x5b4>
        b = input[nameIdx++];
 801505e:	1c5a      	adds	r2, r3, #1
 8015060:	9216      	str	r2, [sp, #88]	; 0x58
 8015062:	5cfb      	ldrb	r3, [r7, r3]
 8015064:	9308      	str	r3, [sp, #32]
        if (GetLength(input, &nameIdx, &strLength, sz) <= 0) {
 8015066:	aa15      	add	r2, sp, #84	; 0x54
 8015068:	4643      	mov	r3, r8
 801506a:	a916      	add	r1, sp, #88	; 0x58
 801506c:	4638      	mov	r0, r7
 801506e:	f7fd fc7f 	bl	8012970 <GetLength>
 8015072:	2800      	cmp	r0, #0
 8015074:	f77f ac96 	ble.w	80149a4 <ParseCertRelative+0x5b4>
        bType = (byte)(b & ASN_TYPE_MASK);
 8015078:	9b08      	ldr	r3, [sp, #32]
 801507a:	f003 031f 	and.w	r3, r3, #31
 801507e:	9305      	str	r3, [sp, #20]
        if (bType == ASN_DNS_TYPE || bType == ASN_RFC822_TYPE ||
 8015080:	3b01      	subs	r3, #1
 8015082:	2b01      	cmp	r3, #1
 8015084:	d902      	bls.n	801508c <ParseCertRelative+0xc9c>
 8015086:	9b05      	ldr	r3, [sp, #20]
 8015088:	2b04      	cmp	r3, #4
 801508a:	d12f      	bne.n	80150ec <ParseCertRelative+0xcfc>
            if (b & ASN_CONSTRUCTED) {
 801508c:	9b08      	ldr	r3, [sp, #32]
 801508e:	069b      	lsls	r3, r3, #26
 8015090:	d40f      	bmi.n	80150b2 <ParseCertRelative+0xcc2>
            entry = (Base_entry*)XMALLOC(sizeof(Base_entry), heap,
 8015092:	2010      	movs	r0, #16
 8015094:	f008 fc66 	bl	801d964 <malloc>
            if (entry == NULL) {
 8015098:	2800      	cmp	r0, #0
 801509a:	f43f ac83 	beq.w	80149a4 <ParseCertRelative+0x5b4>
 801509e:	9008      	str	r0, [sp, #32]
            entry->name = (char*)XMALLOC((size_t)strLength+1, heap,
 80150a0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80150a2:	3001      	adds	r0, #1
 80150a4:	f008 fc5e 	bl	801d964 <malloc>
 80150a8:	9b08      	ldr	r3, [sp, #32]
 80150aa:	6058      	str	r0, [r3, #4]
            if (entry->name == NULL) {
 80150ac:	b950      	cbnz	r0, 80150c4 <ParseCertRelative+0xcd4>
                XFREE(entry, heap, DYNAMIC_TYPE_ALTNAME);
 80150ae:	4618      	mov	r0, r3
 80150b0:	e615      	b.n	8014cde <ParseCertRelative+0x8ee>
                if (GetSequence(input, &nameIdx, &strLength, sz) < 0) {
 80150b2:	4643      	mov	r3, r8
 80150b4:	aa15      	add	r2, sp, #84	; 0x54
 80150b6:	a916      	add	r1, sp, #88	; 0x58
 80150b8:	4638      	mov	r0, r7
 80150ba:	f7fd fce0 	bl	8012a7e <GetSequence>
 80150be:	2800      	cmp	r0, #0
 80150c0:	dae7      	bge.n	8015092 <ParseCertRelative+0xca2>
 80150c2:	e46f      	b.n	80149a4 <ParseCertRelative+0x5b4>
            XMEMCPY(entry->name, &input[nameIdx], (size_t)strLength);
 80150c4:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 80150c8:	4439      	add	r1, r7
 80150ca:	9308      	str	r3, [sp, #32]
 80150cc:	f008 fc6a 	bl	801d9a4 <memcpy>
            entry->name[strLength] = '\0';
 80150d0:	9b08      	ldr	r3, [sp, #32]
 80150d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80150d4:	685a      	ldr	r2, [r3, #4]
 80150d6:	2100      	movs	r1, #0
 80150d8:	5411      	strb	r1, [r2, r0]
            entry->nameSz = strLength;
 80150da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150dc:	609a      	str	r2, [r3, #8]
            entry->type = bType;
 80150de:	9a05      	ldr	r2, [sp, #20]
 80150e0:	731a      	strb	r2, [r3, #12]
            entry->next = *head;
 80150e2:	9a04      	ldr	r2, [sp, #16]
 80150e4:	6812      	ldr	r2, [r2, #0]
 80150e6:	601a      	str	r2, [r3, #0]
            *head = entry;
 80150e8:	9a04      	ldr	r2, [sp, #16]
 80150ea:	6013      	str	r3, [r2, #0]
        idx += (word32)seqLength;
 80150ec:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80150f0:	4413      	add	r3, r2
 80150f2:	e798      	b.n	8015026 <ParseCertRelative+0xc36>
            VERIFY_AND_SET_OID(cert->inhibitAnyOidSet);
 80150f4:	f899 3356 	ldrb.w	r3, [r9, #854]	; 0x356
 80150f8:	07dc      	lsls	r4, r3, #31
 80150fa:	d458      	bmi.n	80151ae <ParseCertRelative+0xdbe>
 80150fc:	f043 0301 	orr.w	r3, r3, #1
 8015100:	f889 3356 	strb.w	r3, [r9, #854]	; 0x356
        if (ret == ASN_CRIT_EXT_E) {
 8015104:	e486      	b.n	8014a14 <ParseCertRelative+0x624>
            VERIFY_AND_SET_OID(cert->extPolicyConstSet);
 8015106:	f899 3355 	ldrb.w	r3, [r9, #853]	; 0x355
 801510a:	f013 0310 	ands.w	r3, r3, #16
 801510e:	d14e      	bne.n	80151ae <ParseCertRelative+0xdbe>
            cert->extPolicyConstCrit = critical ? 1 : 0;
 8015110:	3f00      	subs	r7, #0
            VERIFY_AND_SET_OID(cert->extPolicyConstSet);
 8015112:	f8d9 2354 	ldr.w	r2, [r9, #852]	; 0x354
    int skipLength = 0;
 8015116:	9316      	str	r3, [sp, #88]	; 0x58
            cert->extPolicyConstCrit = critical ? 1 : 0;
 8015118:	bf18      	it	ne
 801511a:	2701      	movne	r7, #1
            VERIFY_AND_SET_OID(cert->extPolicyConstSet);
 801511c:	057f      	lsls	r7, r7, #21
 801511e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8015122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015126:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 801512a:	4317      	orrs	r7, r2
    int length = 0;
 801512c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
            VERIFY_AND_SET_OID(cert->extPolicyConstSet);
 8015130:	f8c9 7354 	str.w	r7, [r9, #852]	; 0x354
    if (GetSequence(input, &idx, &length, (word32)sz) < 0) {
 8015134:	4633      	mov	r3, r6
 8015136:	aa15      	add	r2, sp, #84	; 0x54
 8015138:	a914      	add	r1, sp, #80	; 0x50
 801513a:	4628      	mov	r0, r5
 801513c:	f7fd fc9f 	bl	8012a7e <GetSequence>
 8015140:	2800      	cmp	r0, #0
 8015142:	f6ff ac2f 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (length == 0)
 8015146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015148:	2b00      	cmp	r3, #0
 801514a:	f43f ac2b 	beq.w	80149a4 <ParseCertRelative+0x5b4>
    if (GetASNTag(input, &idx, &tag, (word32)sz) < 0) {
 801514e:	4633      	mov	r3, r6
 8015150:	aa13      	add	r2, sp, #76	; 0x4c
 8015152:	a914      	add	r1, sp, #80	; 0x50
 8015154:	4628      	mov	r0, r5
 8015156:	f7fd fc54 	bl	8012a02 <GetASNTag>
 801515a:	2800      	cmp	r0, #0
 801515c:	f6ff ac22 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (tag == (ASN_CONTEXT_SPECIFIC | 0)) {
 8015160:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015164:	2b80      	cmp	r3, #128	; 0x80
 8015166:	d11a      	bne.n	801519e <ParseCertRelative+0xdae>
        cert->extPolicyConstRxpSet = 1;
 8015168:	f899 3355 	ldrb.w	r3, [r9, #853]	; 0x355
 801516c:	f043 0320 	orr.w	r3, r3, #32
        cert->extPolicyConstIpmSet = 1;
 8015170:	f889 3355 	strb.w	r3, [r9, #853]	; 0x355
    ret = GetLength(input, &idx, &skipLength, (word32)sz);
 8015174:	aa16      	add	r2, sp, #88	; 0x58
 8015176:	4633      	mov	r3, r6
 8015178:	a914      	add	r1, sp, #80	; 0x50
 801517a:	4628      	mov	r0, r5
 801517c:	f7fd fbf8 	bl	8012970 <GetLength>
    if (ret < 0) {
 8015180:	2800      	cmp	r0, #0
 8015182:	f6ff ac0f 	blt.w	80149a4 <ParseCertRelative+0x5b4>
    if (skipLength > 1) {
 8015186:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015188:	2b01      	cmp	r3, #1
 801518a:	f73f ac0b 	bgt.w	80149a4 <ParseCertRelative+0x5b4>
    if (idx >= (word32)sz) {
 801518e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015190:	429e      	cmp	r6, r3
 8015192:	f67f ac07 	bls.w	80149a4 <ParseCertRelative+0x5b4>
    cert->policyConstSkip = input[idx];
 8015196:	5ceb      	ldrb	r3, [r5, r3]
 8015198:	f889 32f6 	strb.w	r3, [r9, #758]	; 0x2f6
        if (ret == ASN_CRIT_EXT_E) {
 801519c:	e43a      	b.n	8014a14 <ParseCertRelative+0x624>
    else if (tag == (ASN_CONTEXT_SPECIFIC | 1)) {
 801519e:	2b81      	cmp	r3, #129	; 0x81
 80151a0:	f47f ac00 	bne.w	80149a4 <ParseCertRelative+0x5b4>
        cert->extPolicyConstIpmSet = 1;
 80151a4:	f899 3355 	ldrb.w	r3, [r9, #853]	; 0x355
 80151a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151ac:	e7e0      	b.n	8015170 <ParseCertRelative+0xd80>
            VERIFY_AND_SET_OID(cert->extBasicConstSet);
 80151ae:	f06f 048f 	mvn.w	r4, #143	; 0x8f
}
 80151b2:	4620      	mov	r0, r4
 80151b4:	b01b      	add	sp, #108	; 0x6c
 80151b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = GetSignature(cert)) < 0) {
 80151ba:	dbfa      	blt.n	80151b2 <ParseCertRelative+0xdc2>
 80151bc:	f7ff b9aa 	b.w	8014514 <ParseCertRelative+0x124>
                cert->ca = GetCA(cm, cert->extAuthKeyId);
 80151c0:	9806      	ldr	r0, [sp, #24]
 80151c2:	f509 7138 	add.w	r1, r9, #736	; 0x2e0
 80151c6:	f7f2 f962 	bl	800748e <GetCA>
 80151ca:	f8c9 0324 	str.w	r0, [r9, #804]	; 0x324
            if (cert->ca == NULL && cert->extSubjKeyIdSet
 80151ce:	2800      	cmp	r0, #0
 80151d0:	f47f a9e5 	bne.w	801459e <ParseCertRelative+0x1ae>
 80151d4:	f7ff b9de 	b.w	8014594 <ParseCertRelative+0x1a4>
                                 && verify != VERIFY_OCSP) {
 80151d8:	9b02      	ldr	r3, [sp, #8]
 80151da:	2b03      	cmp	r3, #3
 80151dc:	f43f a9df 	beq.w	801459e <ParseCertRelative+0x1ae>
                cert->ca = GetCA(cm, cert->extSubjKeyId);
 80151e0:	9806      	ldr	r0, [sp, #24]
 80151e2:	f509 7133 	add.w	r1, r9, #716	; 0x2cc
 80151e6:	f7f2 f952 	bl	800748e <GetCA>
 80151ea:	f8c9 0324 	str.w	r0, [r9, #804]	; 0x324
 80151ee:	f7ff b9d6 	b.w	801459e <ParseCertRelative+0x1ae>
            if (cert->ca == NULL) {
 80151f2:	f8d9 3324 	ldr.w	r3, [r9, #804]	; 0x324
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f43f a9e1 	beq.w	80145be <ParseCertRelative+0x1ce>
        if (cert->pathLengthSet)
 80151fc:	f899 3354 	ldrb.w	r3, [r9, #852]	; 0x354
 8015200:	0698      	lsls	r0, r3, #26
            cert->maxPathLen = cert->pathLength;
 8015202:	bf44      	itt	mi
 8015204:	f899 22f4 	ldrbmi.w	r2, [r9, #756]	; 0x2f4
 8015208:	f889 22f5 	strbmi.w	r2, [r9, #757]	; 0x2f5
        if (!cert->selfSigned) {
 801520c:	f899 2356 	ldrb.w	r2, [r9, #854]	; 0x356
 8015210:	0791      	lsls	r1, r2, #30
 8015212:	d421      	bmi.n	8015258 <ParseCertRelative+0xe68>
            if (type != CERT_TYPE && cert->isCA && cert->extKeyUsageSet &&
 8015214:	9a03      	ldr	r2, [sp, #12]
 8015216:	2a00      	cmp	r2, #0
 8015218:	f000 8210 	beq.w	801563c <ParseCertRelative+0x124c>
 801521c:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8015220:	2b90      	cmp	r3, #144	; 0x90
 8015222:	d119      	bne.n	8015258 <ParseCertRelative+0xe68>
 8015224:	f8b9 32f8 	ldrh.w	r3, [r9, #760]	; 0x2f8
 8015228:	075a      	lsls	r2, r3, #29
 801522a:	d515      	bpl.n	8015258 <ParseCertRelative+0xe68>
                (cert->extKeyUsage & KEYUSE_KEY_CERT_SIGN) != 0 && cert->ca) {
 801522c:	f8d9 3324 	ldr.w	r3, [r9, #804]	; 0x324
 8015230:	b193      	cbz	r3, 8015258 <ParseCertRelative+0xe68>
                if (cert->ca->maxPathLen == 0) {
 8015232:	7a9b      	ldrb	r3, [r3, #10]
 8015234:	b943      	cbnz	r3, 8015248 <ParseCertRelative+0xe58>
                    cert->maxPathLen = 0;
 8015236:	f889 32f5 	strb.w	r3, [r9, #757]	; 0x2f5
                    if (verify != NO_VERIFY) {
 801523a:	9b02      	ldr	r3, [sp, #8]
 801523c:	2b00      	cmp	r3, #0
 801523e:	f000 81a2 	beq.w	8015586 <ParseCertRelative+0x1196>
                        return ASN_PATHLEN_INV_E;
 8015242:	f06f 04ed 	mvn.w	r4, #237	; 0xed
 8015246:	e7b4      	b.n	80151b2 <ParseCertRelative+0xdc2>
                    cert->maxPathLen = (byte)min(cert->ca->maxPathLen - 1,
 8015248:	f899 22f5 	ldrb.w	r2, [r9, #757]	; 0x2f5
 801524c:	3b01      	subs	r3, #1
        return a > b ? b : a;
 801524e:	4293      	cmp	r3, r2
 8015250:	bf28      	it	cs
 8015252:	4613      	movcs	r3, r2
 8015254:	f889 32f5 	strb.w	r3, [r9, #757]	; 0x2f5
    if (verify != NO_VERIFY && type != CA_TYPE && type != TRUSTED_PEER_TYPE) {
 8015258:	9b02      	ldr	r3, [sp, #8]
 801525a:	2b00      	cmp	r3, #0
 801525c:	f000 8193 	beq.w	8015586 <ParseCertRelative+0x1196>
 8015260:	9b03      	ldr	r3, [sp, #12]
 8015262:	2b05      	cmp	r3, #5
 8015264:	f000 818f 	beq.w	8015586 <ParseCertRelative+0x1196>
 8015268:	2b0f      	cmp	r3, #15
 801526a:	f000 818c 	beq.w	8015586 <ParseCertRelative+0x1196>
        if (cert->ca) {
 801526e:	f8d9 3324 	ldr.w	r3, [r9, #804]	; 0x324
 8015272:	2b00      	cmp	r3, #0
 8015274:	f000 81cd 	beq.w	8015612 <ParseCertRelative+0x1222>
            if (verify == VERIFY || verify == VERIFY_OCSP ||
 8015278:	9a02      	ldr	r2, [sp, #8]
 801527a:	f022 0202 	bic.w	r2, r2, #2
 801527e:	2a01      	cmp	r2, #1
 8015280:	9204      	str	r2, [sp, #16]
 8015282:	d002      	beq.n	801528a <ParseCertRelative+0xe9a>
 8015284:	9a02      	ldr	r2, [sp, #8]
 8015286:	2a05      	cmp	r2, #5
 8015288:	d147      	bne.n	801531a <ParseCertRelative+0xf2a>
                        cert->source + cert->certBegin,
 801528a:	f8d9 200c 	ldr.w	r2, [r9, #12]
                if ((ret = ConfirmSignature(&cert->sigCtx,
 801528e:	f8d9 6274 	ldr.w	r6, [r9, #628]	; 0x274
 8015292:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015296:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801529a:	f8d9 8060 	ldr.w	r8, [r9, #96]	; 0x60
 801529e:	f8d9 4018 	ldr.w	r4, [r9, #24]
 80152a2:	e9d3 b500 	ldrd	fp, r5, [r3]
    if (sigCtx == NULL || buf == NULL || bufSz == 0 || key == NULL ||
 80152a6:	18b6      	adds	r6, r6, r2
                if ((ret = ConfirmSignature(&cert->sigCtx,
 80152a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80152ac:	9303      	str	r3, [sp, #12]
 80152ae:	eba7 0702 	sub.w	r7, r7, r2
    if (sigCtx == NULL || buf == NULL || bufSz == 0 || key == NULL ||
 80152b2:	f43f a8a7 	beq.w	8014404 <ParseCertRelative+0x14>
 80152b6:	2f00      	cmp	r7, #0
 80152b8:	f43f a8a4 	beq.w	8014404 <ParseCertRelative+0x14>
 80152bc:	f1ba 0f00 	cmp.w	sl, #0
 80152c0:	f43f a8a0 	beq.w	8014404 <ParseCertRelative+0x14>
 80152c4:	f1bb 0f00 	cmp.w	fp, #0
 80152c8:	f43f a89c 	beq.w	8014404 <ParseCertRelative+0x14>
        keySz == 0 || sig == NULL || sigSz == 0) {
 80152cc:	f1b8 0f00 	cmp.w	r8, #0
 80152d0:	f43f a898 	beq.w	8014404 <ParseCertRelative+0x14>
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f43f a895 	beq.w	8014404 <ParseCertRelative+0x14>
    switch (sigCtx->state) {
 80152da:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 80152de:	2b04      	cmp	r3, #4
 80152e0:	f200 811b 	bhi.w	801551a <ParseCertRelative+0x112a>
 80152e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80152e8:	00300005 	.word	0x00300005
 80152ec:	00aa007c 	.word	0x00aa007c
 80152f0:	011b      	.short	0x011b
            sigCtx->keyOID = keyOID; /* must set early for cleanup */
 80152f2:	f8c9 5348 	str.w	r5, [r9, #840]	; 0x348
            sigCtx->digest = (byte*)XMALLOC(WC_MAX_DIGEST_SIZE, sigCtx->heap,
 80152f6:	2040      	movs	r0, #64	; 0x40
 80152f8:	f008 fb34 	bl	801d964 <malloc>
 80152fc:	f8c9 032c 	str.w	r0, [r9, #812]	; 0x32c
            if (sigCtx->digest == NULL) {
 8015300:	b9f8      	cbnz	r0, 8015342 <ParseCertRelative+0xf52>
                        ERROR_OUT(MEMORY_E, exit_cs);
 8015302:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    FreeSignatureCtx(sigCtx);
 8015306:	f509 704a 	add.w	r0, r9, #808	; 0x328
 801530a:	f7fe fb8d 	bl	8013a28 <FreeSignatureCtx>
                if ((ret = ConfirmSignature(&cert->sigCtx,
 801530e:	2c00      	cmp	r4, #0
 8015310:	f47f af4f 	bne.w	80151b2 <ParseCertRelative+0xdc2>
            if (verify == VERIFY || verify == VERIFY_OCSP ||
 8015314:	9b04      	ldr	r3, [sp, #16]
 8015316:	2b01      	cmp	r3, #1
 8015318:	d004      	beq.n	8015324 <ParseCertRelative+0xf34>
 801531a:	9b02      	ldr	r3, [sp, #8]
 801531c:	3b04      	subs	r3, #4
 801531e:	2b01      	cmp	r3, #1
 8015320:	f200 8131 	bhi.w	8015586 <ParseCertRelative+0x1196>
    const byte nameTypes[] = {ASN_RFC822_TYPE, ASN_DNS_TYPE, ASN_DIR_TYPE};
 8015324:	4bbd      	ldr	r3, [pc, #756]	; (801561c <ParseCertRelative+0x122c>)
                if (!ConfirmNameConstraints(cert->ca, cert)) {
 8015326:	f8d9 6324 	ldr.w	r6, [r9, #804]	; 0x324
    const byte nameTypes[] = {ASN_RFC822_TYPE, ASN_DNS_TYPE, ASN_DIR_TYPE};
 801532a:	881a      	ldrh	r2, [r3, #0]
 801532c:	789b      	ldrb	r3, [r3, #2]
 801532e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
 8015332:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    if (signer == NULL || cert == NULL)
 8015336:	2e00      	cmp	r6, #0
 8015338:	f040 80f6 	bne.w	8015528 <ParseCertRelative+0x1138>
                    return ASN_NAME_INVALID_E;
 801533c:	f06f 04c5 	mvn.w	r4, #197	; 0xc5
 8015340:	e737      	b.n	80151b2 <ParseCertRelative+0xdc2>
            sigCtx->state = SIG_STATE_HASH;
 8015342:	2301      	movs	r3, #1
 8015344:	f8c9 333c 	str.w	r3, [r9, #828]	; 0x33c
    switch (sigOID) {
 8015348:	f240 230e 	movw	r3, #526	; 0x20e
 801534c:	429c      	cmp	r4, r3
                ret = HashForSignature(buf, bufSz, sigOID, sigCtx->digest,
 801534e:	f8d9 232c 	ldr.w	r2, [r9, #812]	; 0x32c
    switch (sigOID) {
 8015352:	d829      	bhi.n	80153a8 <ParseCertRelative+0xfb8>
 8015354:	f5b4 7f01 	cmp.w	r4, #516	; 0x204
 8015358:	d809      	bhi.n	801536e <ParseCertRelative+0xf7e>
 801535a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801535e:	d03c      	beq.n	80153da <ParseCertRelative+0xfea>
 8015360:	f5b4 7fd0 	cmp.w	r4, #416	; 0x1a0
 8015364:	f000 8085 	beq.w	8015472 <ParseCertRelative+0x1082>
 8015368:	f06f 04e7 	mvn.w	r4, #231	; 0xe7
 801536c:	e7cb      	b.n	8015306 <ParseCertRelative+0xf16>
 801536e:	f46f 7301 	mvn.w	r3, #516	; 0x204
 8015372:	441c      	add	r4, r3
 8015374:	2c09      	cmp	r4, #9
 8015376:	d8f7      	bhi.n	8015368 <ParseCertRelative+0xf78>
 8015378:	a301      	add	r3, pc, #4	; (adr r3, 8015380 <ParseCertRelative+0xf90>)
 801537a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 801537e:	bf00      	nop
 8015380:	080153c1 	.word	0x080153c1
 8015384:	08015369 	.word	0x08015369
 8015388:	08015369 	.word	0x08015369
 801538c:	080153c1 	.word	0x080153c1
 8015390:	08015369 	.word	0x08015369
 8015394:	08015369 	.word	0x08015369
 8015398:	08015369 	.word	0x08015369
 801539c:	08015473 	.word	0x08015473
 80153a0:	08015369 	.word	0x08015369
 80153a4:	0801548f 	.word	0x0801548f
 80153a8:	f240 238f 	movw	r3, #655	; 0x28f
 80153ac:	429c      	cmp	r4, r3
 80153ae:	d060      	beq.n	8015472 <ParseCertRelative+0x1082>
 80153b0:	f240 2391 	movw	r3, #657	; 0x291
 80153b4:	429c      	cmp	r4, r3
 80153b6:	d06a      	beq.n	801548e <ParseCertRelative+0x109e>
 80153b8:	f240 2389 	movw	r3, #649	; 0x289
 80153bc:	429c      	cmp	r4, r3
 80153be:	d1d3      	bne.n	8015368 <ParseCertRelative+0xf78>
            if ((ret = wc_ShaHash(buf, bufSz, digest)) == 0) {
 80153c0:	4639      	mov	r1, r7
 80153c2:	4630      	mov	r0, r6
 80153c4:	f005 fb09 	bl	801a9da <wc_ShaHash>
 80153c8:	4604      	mov	r4, r0
 80153ca:	2800      	cmp	r0, #0
 80153cc:	d19b      	bne.n	8015306 <ParseCertRelative+0xf16>
                *typeH    = SHAh;
 80153ce:	2358      	movs	r3, #88	; 0x58
 80153d0:	f8c9 3340 	str.w	r3, [r9, #832]	; 0x340
                *digestSz = WC_SHA_DIGEST_SIZE;
 80153d4:	2314      	movs	r3, #20
                *digestSz = WC_SHA512_DIGEST_SIZE;
 80153d6:	f8c9 3344 	str.w	r3, [r9, #836]	; 0x344
            sigCtx->state = SIG_STATE_KEY;
 80153da:	2302      	movs	r3, #2
 80153dc:	f8c9 333c 	str.w	r3, [r9, #828]	; 0x33c
            switch (keyOID) {
 80153e0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80153e4:	d061      	beq.n	80154aa <ParseCertRelative+0x10ba>
 80153e6:	f240 2306 	movw	r3, #518	; 0x206
 80153ea:	429d      	cmp	r5, r3
 80153ec:	f040 8099 	bne.w	8015522 <ParseCertRelative+0x1132>
                    word32 idx = 0;
 80153f0:	2300      	movs	r3, #0
                    sigCtx->verify = 0;
 80153f2:	f8c9 3330 	str.w	r3, [r9, #816]	; 0x330
                    sigCtx->key.ecc = (ecc_key*)XMALLOC(sizeof(ecc_key),
 80153f6:	f44f 70de 	mov.w	r0, #444	; 0x1bc
                    word32 idx = 0;
 80153fa:	9316      	str	r3, [sp, #88]	; 0x58
                    sigCtx->key.ecc = (ecc_key*)XMALLOC(sizeof(ecc_key),
 80153fc:	f008 fab2 	bl	801d964 <malloc>
 8015400:	f8c9 0334 	str.w	r0, [r9, #820]	; 0x334
                    if (sigCtx->key.ecc == NULL) {
 8015404:	2800      	cmp	r0, #0
 8015406:	f43f af7c 	beq.w	8015302 <ParseCertRelative+0xf12>
                    if ((ret = wc_ecc_init_ex(sigCtx->key.ecc, sigCtx->heap,
 801540a:	f8d9 2338 	ldr.w	r2, [r9, #824]	; 0x338
 801540e:	f8d9 1328 	ldr.w	r1, [r9, #808]	; 0x328
 8015412:	f7f7 fc41 	bl	800cc98 <wc_ecc_init_ex>
 8015416:	1e04      	subs	r4, r0, #0
 8015418:	f6ff af75 	blt.w	8015306 <ParseCertRelative+0xf16>
                    ret = wc_EccPublicKeyDecode(key, &idx, sigCtx->key.ecc,
 801541c:	f8d9 2334 	ldr.w	r2, [r9, #820]	; 0x334
 8015420:	465b      	mov	r3, fp
 8015422:	a916      	add	r1, sp, #88	; 0x58
 8015424:	4650      	mov	r0, sl
 8015426:	f7fe ff20 	bl	801426a <wc_EccPublicKeyDecode>
                    if ((ret = wc_ed25519_import_public(key, keySz,
 801542a:	1e04      	subs	r4, r0, #0
 801542c:	f6ff af6b 	blt.w	8015306 <ParseCertRelative+0xf16>
            if (ret != 0) {
 8015430:	2c00      	cmp	r4, #0
 8015432:	f47f af68 	bne.w	8015306 <ParseCertRelative+0xf16>
            sigCtx->state = SIG_STATE_DO;
 8015436:	2303      	movs	r3, #3
 8015438:	f8c9 333c 	str.w	r3, [r9, #828]	; 0x33c
            switch (keyOID) {
 801543c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8015440:	d04e      	beq.n	80154e0 <ParseCertRelative+0x10f0>
 8015442:	f240 2306 	movw	r3, #518	; 0x206
 8015446:	429d      	cmp	r5, r3
 8015448:	d157      	bne.n	80154fa <ParseCertRelative+0x110a>
                        ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
 801544a:	f8d9 3334 	ldr.w	r3, [r9, #820]	; 0x334
 801544e:	9301      	str	r3, [sp, #4]
 8015450:	f509 734c 	add.w	r3, r9, #816	; 0x330
 8015454:	9300      	str	r3, [sp, #0]
 8015456:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 801545a:	f8d9 232c 	ldr.w	r2, [r9, #812]	; 0x32c
 801545e:	9903      	ldr	r1, [sp, #12]
 8015460:	4640      	mov	r0, r8
 8015462:	f7f8 fe9a 	bl	800e19a <wc_ecc_verify_hash>
            if (ret < 0) {
 8015466:	2800      	cmp	r0, #0
                    ret = wc_ed25519_verify_msg(sig, sigSz, buf, bufSz,
 8015468:	4604      	mov	r4, r0
            if (ret < 0) {
 801546a:	da47      	bge.n	80154fc <ParseCertRelative+0x110c>
                ret = ASN_SIG_CONFIRM_E;
 801546c:	f06f 049a 	mvn.w	r4, #154	; 0x9a
 8015470:	e749      	b.n	8015306 <ParseCertRelative+0xf16>
            if ((ret = wc_Sha256Hash(buf, bufSz, digest)) == 0) {
 8015472:	4639      	mov	r1, r7
 8015474:	4630      	mov	r0, r6
 8015476:	f005 fad9 	bl	801aa2c <wc_Sha256Hash>
 801547a:	4604      	mov	r4, r0
 801547c:	2800      	cmp	r0, #0
 801547e:	f47f af42 	bne.w	8015306 <ParseCertRelative+0xf16>
                *typeH    = SHA256h;
 8015482:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8015486:	f8c9 3340 	str.w	r3, [r9, #832]	; 0x340
                *digestSz = WC_SHA256_DIGEST_SIZE;
 801548a:	2320      	movs	r3, #32
 801548c:	e7a3      	b.n	80153d6 <ParseCertRelative+0xfe6>
            if ((ret = wc_Sha512Hash(buf, bufSz, digest)) == 0) {
 801548e:	4639      	mov	r1, r7
 8015490:	4630      	mov	r0, r6
 8015492:	f005 faf4 	bl	801aa7e <wc_Sha512Hash>
 8015496:	4604      	mov	r4, r0
 8015498:	2800      	cmp	r0, #0
 801549a:	f47f af34 	bne.w	8015306 <ParseCertRelative+0xf16>
                *typeH    = SHA512h;
 801549e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80154a2:	f8c9 3340 	str.w	r3, [r9, #832]	; 0x340
                *digestSz = WC_SHA512_DIGEST_SIZE;
 80154a6:	2340      	movs	r3, #64	; 0x40
 80154a8:	e795      	b.n	80153d6 <ParseCertRelative+0xfe6>
                    sigCtx->verify = 0;
 80154aa:	2300      	movs	r3, #0
 80154ac:	f8c9 3330 	str.w	r3, [r9, #816]	; 0x330
                    sigCtx->key.ed25519 = (ed25519_key*)XMALLOC(
 80154b0:	2068      	movs	r0, #104	; 0x68
 80154b2:	f008 fa57 	bl	801d964 <malloc>
 80154b6:	f8c9 0334 	str.w	r0, [r9, #820]	; 0x334
                    if (sigCtx->key.ed25519 == NULL) {
 80154ba:	2800      	cmp	r0, #0
 80154bc:	f43f af21 	beq.w	8015302 <ParseCertRelative+0xf12>
                    if ((ret = wc_ed25519_init_ex(sigCtx->key.ed25519,
 80154c0:	f8d9 2338 	ldr.w	r2, [r9, #824]	; 0x338
 80154c4:	f8d9 1328 	ldr.w	r1, [r9, #808]	; 0x328
 80154c8:	f000 fdad 	bl	8016026 <wc_ed25519_init_ex>
 80154cc:	1e04      	subs	r4, r0, #0
 80154ce:	f6ff af1a 	blt.w	8015306 <ParseCertRelative+0xf16>
                    if ((ret = wc_ed25519_import_public(key, keySz,
 80154d2:	f8d9 2334 	ldr.w	r2, [r9, #820]	; 0x334
 80154d6:	4659      	mov	r1, fp
 80154d8:	4650      	mov	r0, sl
 80154da:	f000 fe19 	bl	8016110 <wc_ed25519_import_public>
 80154de:	e7a4      	b.n	801542a <ParseCertRelative+0x103a>
                    ret = wc_ed25519_verify_msg(sig, sigSz, buf, bufSz,
 80154e0:	f8d9 3334 	ldr.w	r3, [r9, #820]	; 0x334
 80154e4:	9301      	str	r3, [sp, #4]
 80154e6:	f509 734c 	add.w	r3, r9, #816	; 0x330
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	9903      	ldr	r1, [sp, #12]
 80154ee:	463b      	mov	r3, r7
 80154f0:	4632      	mov	r2, r6
 80154f2:	4640      	mov	r0, r8
 80154f4:	f000 fd88 	bl	8016008 <wc_ed25519_verify_msg>
 80154f8:	e7b5      	b.n	8015466 <ParseCertRelative+0x1076>
 80154fa:	2400      	movs	r4, #0
            sigCtx->state = SIG_STATE_CHECK;
 80154fc:	2304      	movs	r3, #4
 80154fe:	f8c9 333c 	str.w	r3, [r9, #828]	; 0x33c
            switch (keyOID) {
 8015502:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8015506:	d004      	beq.n	8015512 <ParseCertRelative+0x1122>
 8015508:	f240 2306 	movw	r3, #518	; 0x206
 801550c:	429d      	cmp	r5, r3
 801550e:	f47f aefa 	bne.w	8015306 <ParseCertRelative+0xf16>
                    if (sigCtx->verify == 1) {
 8015512:	f8d9 3330 	ldr.w	r3, [r9, #816]	; 0x330
 8015516:	2b01      	cmp	r3, #1
 8015518:	d1a8      	bne.n	801546c <ParseCertRelative+0x107c>
    switch (sigCtx->state) {
 801551a:	2400      	movs	r4, #0
 801551c:	e6f3      	b.n	8015306 <ParseCertRelative+0xf16>
 801551e:	2400      	movs	r4, #0
 8015520:	e7ef      	b.n	8015502 <ParseCertRelative+0x1112>
 8015522:	f06f 0493 	mvn.w	r4, #147	; 0x93
 8015526:	e6ee      	b.n	8015306 <ParseCertRelative+0xf16>
    if (signer->excludedNames == NULL && signer->permittedNames == NULL)
 8015528:	69f3      	ldr	r3, [r6, #28]
 801552a:	b90b      	cbnz	r3, 8015530 <ParseCertRelative+0x1140>
 801552c:	69b3      	ldr	r3, [r6, #24]
 801552e:	b353      	cbz	r3, 8015586 <ParseCertRelative+0x1196>
                        ret = 0;
 8015530:	f04f 0800 	mov.w	r8, #0
 8015534:	af15      	add	r7, sp, #84	; 0x54
        XMEMSET(&subjectDnsName, 0, sizeof(DNS_entry));
 8015536:	46c3      	mov	fp, r8
        byte nameType = nameTypes[i];
 8015538:	f817 5b01 	ldrb.w	r5, [r7], #1
        XMEMSET(&subjectDnsName, 0, sizeof(DNS_entry));
 801553c:	2210      	movs	r2, #16
 801553e:	2100      	movs	r1, #0
 8015540:	a816      	add	r0, sp, #88	; 0x58
 8015542:	f008 fa57 	bl	801d9f4 <memset>
        switch (nameType) {
 8015546:	2d02      	cmp	r5, #2
 8015548:	d010      	beq.n	801556c <ParseCertRelative+0x117c>
 801554a:	2d04      	cmp	r5, #4
 801554c:	d027      	beq.n	801559e <ParseCertRelative+0x11ae>
 801554e:	2d01      	cmp	r5, #1
 8015550:	f47f aef4 	bne.w	801533c <ParseCertRelative+0xf4c>
                if (cert->subjectEmail != NULL) {
 8015554:	f8d9 3318 	ldr.w	r3, [r9, #792]	; 0x318
                name = cert->altEmailNames;
 8015558:	f8d9 a028 	ldr.w	sl, [r9, #40]	; 0x28
                if (cert->subjectEmail != NULL) {
 801555c:	b143      	cbz	r3, 8015570 <ParseCertRelative+0x1180>
                    subjectDnsName.type = ASN_RFC822_TYPE;
 801555e:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
                    subjectDnsName.len  = cert->subjectEmailLen;
 8015562:	f8d9 231c 	ldr.w	r2, [r9, #796]	; 0x31c
                    subjectDnsName.name = (char *)cert->subjectRaw;
 8015566:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 801556a:	e001      	b.n	8015570 <ParseCertRelative+0x1180>
                name = cert->altNames;
 801556c:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
        while (name != NULL) {
 8015570:	f1ba 0f00 	cmp.w	sl, #0
 8015574:	d11e      	bne.n	80155b4 <ParseCertRelative+0x11c4>
        if (subjectDnsName.len > 0 && subjectDnsName.name != NULL) {
 8015576:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015578:	2b00      	cmp	r3, #0
 801557a:	dc2e      	bgt.n	80155da <ParseCertRelative+0x11ea>
    for (i=0; i < (int)sizeof(nameTypes); i++) {
 801557c:	f108 0801 	add.w	r8, r8, #1
 8015580:	f1b8 0f03 	cmp.w	r8, #3
 8015584:	d1d8      	bne.n	8015538 <ParseCertRelative+0x1148>
    if (cert->badDate != 0) {
 8015586:	f8d9 334c 	ldr.w	r3, [r9, #844]	; 0x34c
 801558a:	b113      	cbz	r3, 8015592 <ParseCertRelative+0x11a2>
        if (verify != VERIFY_SKIP_DATE) {
 801558c:	9a02      	ldr	r2, [sp, #8]
 801558e:	2a05      	cmp	r2, #5
 8015590:	d142      	bne.n	8015618 <ParseCertRelative+0x1228>
    if (cert->criticalExt != 0)
 8015592:	f8d9 3350 	ldr.w	r3, [r9, #848]	; 0x350
 8015596:	2b00      	cmp	r3, #0
 8015598:	bf18      	it	ne
 801559a:	461c      	movne	r4, r3
 801559c:	e609      	b.n	80151b2 <ParseCertRelative+0xdc2>
                if (cert->subjectRaw != NULL) {
 801559e:	f8d9 3310 	ldr.w	r3, [r9, #784]	; 0x310
                name = cert->altDirNames;
 80155a2:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
                if (cert->subjectRaw != NULL) {
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d0e2      	beq.n	8015570 <ParseCertRelative+0x1180>
                    subjectDnsName.type = ASN_DIR_TYPE;
 80155aa:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
                    subjectDnsName.len = cert->subjectRawLen;
 80155ae:	f8d9 2314 	ldr.w	r2, [r9, #788]	; 0x314
 80155b2:	e7d8      	b.n	8015566 <ParseCertRelative+0x1176>
            if (IsInExcludedList(name, signer->excludedNames, nameType) == 1) {
 80155b4:	69f1      	ldr	r1, [r6, #28]
 80155b6:	462a      	mov	r2, r5
 80155b8:	4650      	mov	r0, sl
 80155ba:	f7fd f965 	bl	8012888 <IsInExcludedList>
 80155be:	2801      	cmp	r0, #1
 80155c0:	f43f aebc 	beq.w	801533c <ParseCertRelative+0xf4c>
            if (PermittedListOk(name, signer->permittedNames, nameType) != 1) {
 80155c4:	69b1      	ldr	r1, [r6, #24]
 80155c6:	462a      	mov	r2, r5
 80155c8:	4650      	mov	r0, sl
 80155ca:	f7fd f978 	bl	80128be <PermittedListOk>
 80155ce:	2801      	cmp	r0, #1
 80155d0:	f47f aeb4 	bne.w	801533c <ParseCertRelative+0xf4c>
            name = name->next;
 80155d4:	f8da a000 	ldr.w	sl, [sl]
 80155d8:	e7ca      	b.n	8015570 <ParseCertRelative+0x1180>
        if (subjectDnsName.len > 0 && subjectDnsName.name != NULL) {
 80155da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d0cd      	beq.n	801557c <ParseCertRelative+0x118c>
            if (IsInExcludedList(&subjectDnsName, signer->excludedNames,
 80155e0:	69f1      	ldr	r1, [r6, #28]
 80155e2:	462a      	mov	r2, r5
 80155e4:	a816      	add	r0, sp, #88	; 0x58
 80155e6:	f7fd f94f 	bl	8012888 <IsInExcludedList>
 80155ea:	2801      	cmp	r0, #1
 80155ec:	f43f aea6 	beq.w	801533c <ParseCertRelative+0xf4c>
            if (PermittedListOk(&subjectDnsName, signer->permittedNames,
 80155f0:	69b1      	ldr	r1, [r6, #24]
 80155f2:	462a      	mov	r2, r5
 80155f4:	a816      	add	r0, sp, #88	; 0x58
 80155f6:	f7fd f962 	bl	80128be <PermittedListOk>
 80155fa:	2801      	cmp	r0, #1
 80155fc:	d0be      	beq.n	801557c <ParseCertRelative+0x118c>
 80155fe:	e69d      	b.n	801533c <ParseCertRelative+0xf4c>
                return ASN_VERSION_E;
 8015600:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 8015604:	e5d5      	b.n	80151b2 <ParseCertRelative+0xdc2>
            return ASN_SIG_OID_E;
 8015606:	f06f 0497 	mvn.w	r4, #151	; 0x97
 801560a:	e5d2      	b.n	80151b2 <ParseCertRelative+0xdc2>
            return KEYUSAGE_E;
 801560c:	f06f 04e1 	mvn.w	r4, #225	; 0xe1
 8015610:	e5cf      	b.n	80151b2 <ParseCertRelative+0xdc2>
                return ASN_NO_SIGNER_E;
 8015612:	f06f 04bb 	mvn.w	r4, #187	; 0xbb
 8015616:	e5cc      	b.n	80151b2 <ParseCertRelative+0xdc2>
 8015618:	461c      	mov	r4, r3
 801561a:	e5ca      	b.n	80151b2 <ParseCertRelative+0xdc2>
 801561c:	08022bd8 	.word	0x08022bd8
                if (i == 0 || i == (word32)strLen) {
 8015620:	2a00      	cmp	r2, #0
 8015622:	f43f aae8 	beq.w	8014bf6 <ParseCertRelative+0x806>
            uriEntry = AltNameNew(cert->heap);
 8015626:	f8d9 0280 	ldr.w	r0, [r9, #640]	; 0x280
 801562a:	f7fd fe50 	bl	80132ce <AltNameNew>
            if (uriEntry == NULL) {
 801562e:	4607      	mov	r7, r0
 8015630:	2800      	cmp	r0, #0
 8015632:	f43f aa7d 	beq.w	8014b30 <ParseCertRelative+0x740>
            uriEntry->type = ASN_URI_TYPE;
 8015636:	2306      	movs	r3, #6
 8015638:	f7ff ba3b 	b.w	8014ab2 <ParseCertRelative+0x6c2>
    if (verify != NO_VERIFY && type != CA_TYPE && type != TRUSTED_PEER_TYPE) {
 801563c:	9b02      	ldr	r3, [sp, #8]
 801563e:	2b00      	cmp	r3, #0
 8015640:	f47f ae15 	bne.w	801526e <ParseCertRelative+0xe7e>
 8015644:	e79f      	b.n	8015586 <ParseCertRelative+0x1196>
                return BUFFER_E;
 8015646:	f06f 0483 	mvn.w	r4, #131	; 0x83
 801564a:	e5b2      	b.n	80151b2 <ParseCertRelative+0xdc2>

0801564c <ParseCert>:
{
 801564c:	b570      	push	{r4, r5, r6, lr}
 801564e:	4604      	mov	r4, r0
    ret = ParseCertRelative(cert, type, verify, cm);
 8015650:	f7fe fece 	bl	80143f0 <ParseCertRelative>
    if (ret < 0)
 8015654:	1e05      	subs	r5, r0, #0
 8015656:	db09      	blt.n	801566c <ParseCert+0x20>
    if (cert->subjectCNLen > 0) {
 8015658:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 801565a:	2800      	cmp	r0, #0
 801565c:	dd16      	ble.n	801568c <ParseCert+0x40>
        ptr = (char*)XMALLOC((size_t)cert->subjectCNLen + 1, cert->heap,
 801565e:	3001      	adds	r0, #1
 8015660:	f008 f980 	bl	801d964 <malloc>
        if (ptr == NULL)
 8015664:	4606      	mov	r6, r0
 8015666:	b918      	cbnz	r0, 8015670 <ParseCert+0x24>
            return MEMORY_E;
 8015668:	f06f 057c 	mvn.w	r5, #124	; 0x7c
}
 801566c:	4628      	mov	r0, r5
 801566e:	bd70      	pop	{r4, r5, r6, pc}
        XMEMCPY(ptr, cert->subjectCN, (size_t)cert->subjectCNLen);
 8015670:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
 8015674:	f008 f996 	bl	801d9a4 <memcpy>
        ptr[cert->subjectCNLen] = '\0';
 8015678:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        cert->subjectCN = ptr;
 801567a:	6666      	str	r6, [r4, #100]	; 0x64
        ptr[cert->subjectCNLen] = '\0';
 801567c:	2200      	movs	r2, #0
 801567e:	54f2      	strb	r2, [r6, r3]
        cert->subjectCNStored = 1;
 8015680:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
 8015684:	f043 0301 	orr.w	r3, r3, #1
 8015688:	f884 3354 	strb.w	r3, [r4, #852]	; 0x354
    if ((cert->keyOID == RSAk
 801568c:	69e2      	ldr	r2, [r4, #28]
 801568e:	f240 2385 	movw	r3, #645	; 0x285
 8015692:	429a      	cmp	r2, r3
 8015694:	d1ea      	bne.n	801566c <ParseCert+0x20>
         ) && cert->publicKey != NULL && cert->pubKeySize > 0) {
 8015696:	6823      	ldr	r3, [r4, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d0e7      	beq.n	801566c <ParseCert+0x20>
 801569c:	6860      	ldr	r0, [r4, #4]
 801569e:	2800      	cmp	r0, #0
 80156a0:	d0e4      	beq.n	801566c <ParseCert+0x20>
        ptr = (char*)XMALLOC(cert->pubKeySize, cert->heap,
 80156a2:	f008 f95f 	bl	801d964 <malloc>
        if (ptr == NULL)
 80156a6:	4606      	mov	r6, r0
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d0dd      	beq.n	8015668 <ParseCert+0x1c>
        XMEMCPY(ptr, cert->publicKey, cert->pubKeySize);
 80156ac:	e9d4 1200 	ldrd	r1, r2, [r4]
 80156b0:	f008 f978 	bl	801d9a4 <memcpy>
        cert->pubKeyStored = 1;
 80156b4:	2301      	movs	r3, #1
        cert->publicKey = (byte *)ptr;
 80156b6:	6026      	str	r6, [r4, #0]
        cert->pubKeyStored = 1;
 80156b8:	60a3      	str	r3, [r4, #8]
 80156ba:	e7d7      	b.n	801566c <ParseCert+0x20>

080156bc <DecodeAsymKey>:
    || (defined(HAVE_PQC) && defined(HAVE_SPHINCS)))

int DecodeAsymKey(const byte* input, word32* inOutIdx, word32 inSz,
    byte* privKey, word32* privKeyLen,
    byte* pubKey, word32* pubKeyLen, int keyType)
{
 80156bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c0:	b089      	sub	sp, #36	; 0x24
 80156c2:	460c      	mov	r4, r1
 80156c4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 80156c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80156cc:	4617      	mov	r7, r2
 80156ce:	4699      	mov	r9, r3
    int ret = 0;
    DECL_ASNGETDATA(dataASN, edKeyASN_Length);
    CALLOC_ASNGETDATA(dataASN, edKeyASN_Length, ret, NULL);
#endif

    if (input == NULL || inOutIdx == NULL || inSz == 0 ||
 80156d0:	4605      	mov	r5, r0
 80156d2:	b920      	cbnz	r0, 80156de <DecodeAsymKey+0x22>
        privKey == NULL || privKeyLen == NULL) {
    #ifdef WOLFSSL_ASN_TEMPLATE
        FREE_ASNGETDATA(dataASN, NULL);
    #endif
        return BAD_FUNC_ARG;
 80156d4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 80156d8:	b009      	add	sp, #36	; 0x24
 80156da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL || inOutIdx == NULL || inSz == 0 ||
 80156de:	2900      	cmp	r1, #0
 80156e0:	d0f8      	beq.n	80156d4 <DecodeAsymKey+0x18>
 80156e2:	2a00      	cmp	r2, #0
 80156e4:	d0f6      	beq.n	80156d4 <DecodeAsymKey+0x18>
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d0f4      	beq.n	80156d4 <DecodeAsymKey+0x18>
        privKey == NULL || privKeyLen == NULL) {
 80156ea:	f1ba 0f00 	cmp.w	sl, #0
 80156ee:	d0f1      	beq.n	80156d4 <DecodeAsymKey+0x18>
    if (GetSequence(input, inOutIdx, &length, inSz) >= 0) {
 80156f0:	4613      	mov	r3, r2
 80156f2:	aa05      	add	r2, sp, #20
 80156f4:	f7fd f9c3 	bl	8012a7e <GetSequence>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	db38      	blt.n	801576e <DecodeAsymKey+0xb2>
        endKeyIdx = (int)*inOutIdx + length;
 80156fc:	9b05      	ldr	r3, [sp, #20]
 80156fe:	6826      	ldr	r6, [r4, #0]
        if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 8015700:	aa04      	add	r2, sp, #16
        endKeyIdx = (int)*inOutIdx + length;
 8015702:	441e      	add	r6, r3
        if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 8015704:	4621      	mov	r1, r4
 8015706:	463b      	mov	r3, r7
 8015708:	4628      	mov	r0, r5
 801570a:	f7fd fa43 	bl	8012b94 <GetMyVersion>
 801570e:	2800      	cmp	r0, #0
 8015710:	db4e      	blt.n	80157b0 <DecodeAsymKey+0xf4>
        if (version != 0) {
 8015712:	9b04      	ldr	r3, [sp, #16]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d14b      	bne.n	80157b0 <DecodeAsymKey+0xf4>
        if (GetAlgoId(input, inOutIdx, &oid, oidKeyType, inSz) < 0)
 8015718:	9700      	str	r7, [sp, #0]
 801571a:	2302      	movs	r3, #2
 801571c:	aa03      	add	r2, sp, #12
 801571e:	4621      	mov	r1, r4
 8015720:	4628      	mov	r0, r5
 8015722:	f7fd fd2c 	bl	801317e <GetAlgoId>
 8015726:	2800      	cmp	r0, #0
 8015728:	db42      	blt.n	80157b0 <DecodeAsymKey+0xf4>
        if (oid != (word32)keyType)
 801572a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801572c:	9a03      	ldr	r2, [sp, #12]
 801572e:	429a      	cmp	r2, r3
 8015730:	d13e      	bne.n	80157b0 <DecodeAsymKey+0xf4>
        if (GetOctetString(input, inOutIdx, &length, inSz) < 0)
 8015732:	463b      	mov	r3, r7
 8015734:	aa05      	add	r2, sp, #20
 8015736:	4621      	mov	r1, r4
 8015738:	4628      	mov	r0, r5
 801573a:	f7fd f9b6 	bl	8012aaa <GetOctetString>
 801573e:	2800      	cmp	r0, #0
 8015740:	db36      	blt.n	80157b0 <DecodeAsymKey+0xf4>
        if (GetOctetString(input, inOutIdx, &privSz, inSz) < 0)
 8015742:	463b      	mov	r3, r7
 8015744:	aa06      	add	r2, sp, #24
 8015746:	4621      	mov	r1, r4
 8015748:	4628      	mov	r0, r5
 801574a:	f7fd f9ae 	bl	8012aaa <GetOctetString>
 801574e:	2800      	cmp	r0, #0
 8015750:	db2e      	blt.n	80157b0 <DecodeAsymKey+0xf4>
        priv = input + *inOutIdx;
 8015752:	6822      	ldr	r2, [r4, #0]
        *inOutIdx += (word32)privSz;
 8015754:	9b06      	ldr	r3, [sp, #24]
 8015756:	4413      	add	r3, r2
        priv = input + *inOutIdx;
 8015758:	eb05 0b02 	add.w	fp, r5, r2
        *inOutIdx += (word32)privSz;
 801575c:	6023      	str	r3, [r4, #0]
    if ((word32)privSz > *privKeyLen)
 801575e:	9a06      	ldr	r2, [sp, #24]
 8015760:	f8da 3000 	ldr.w	r3, [sl]
 8015764:	4293      	cmp	r3, r2
 8015766:	d211      	bcs.n	801578c <DecodeAsymKey+0xd0>
        return BUFFER_E;
 8015768:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801576c:	e7b4      	b.n	80156d8 <DecodeAsymKey+0x1c>
        if (GetOctetString(input, inOutIdx, &privSz, inSz) < 0)
 801576e:	463b      	mov	r3, r7
 8015770:	aa06      	add	r2, sp, #24
 8015772:	4621      	mov	r1, r4
 8015774:	4628      	mov	r0, r5
 8015776:	f7fd f998 	bl	8012aaa <GetOctetString>
 801577a:	2800      	cmp	r0, #0
 801577c:	db18      	blt.n	80157b0 <DecodeAsymKey+0xf4>
        priv = input + *inOutIdx;
 801577e:	6826      	ldr	r6, [r4, #0]
        *inOutIdx += (word32)privSz;
 8015780:	9b06      	ldr	r3, [sp, #24]
        priv = input + *inOutIdx;
 8015782:	eb05 0b06 	add.w	fp, r5, r6
        *inOutIdx += (word32)privSz;
 8015786:	441e      	add	r6, r3
 8015788:	6026      	str	r6, [r4, #0]
        endKeyIdx = (int)*inOutIdx;
 801578a:	e7e8      	b.n	801575e <DecodeAsymKey+0xa2>
    if (endKeyIdx == (int)*inOutIdx) {
 801578c:	6823      	ldr	r3, [r4, #0]
 801578e:	42b3      	cmp	r3, r6
 8015790:	d111      	bne.n	80157b6 <DecodeAsymKey+0xfa>
        *privKeyLen = (word32)privSz;
 8015792:	f8ca 2000 	str.w	r2, [sl]
        XMEMCPY(privKey, priv, *privKeyLen);
 8015796:	4659      	mov	r1, fp
 8015798:	4648      	mov	r0, r9
 801579a:	f008 f903 	bl	801d9a4 <memcpy>
        if (pubKeyLen != NULL)
 801579e:	f1b8 0f00 	cmp.w	r8, #0
 80157a2:	d002      	beq.n	80157aa <DecodeAsymKey+0xee>
            *pubKeyLen = 0;
 80157a4:	2300      	movs	r3, #0
 80157a6:	f8c8 3000 	str.w	r3, [r8]
    if (endKeyIdx != (int)*inOutIdx)
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	42b3      	cmp	r3, r6
 80157ae:	d02a      	beq.n	8015806 <DecodeAsymKey+0x14a>
        return ASN_PARSE_E;
 80157b0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 80157b4:	e790      	b.n	80156d8 <DecodeAsymKey+0x1c>
        if (pubKeyLen == NULL) {
 80157b6:	f1b8 0f00 	cmp.w	r8, #0
 80157ba:	d08b      	beq.n	80156d4 <DecodeAsymKey+0x18>
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 80157bc:	2301      	movs	r3, #1
 80157be:	e9cd 7300 	strd	r7, r3, [sp]
 80157c2:	4622      	mov	r2, r4
 80157c4:	ab07      	add	r3, sp, #28
 80157c6:	2181      	movs	r1, #129	; 0x81
 80157c8:	4628      	mov	r0, r5
 80157ca:	f7fd f92d 	bl	8012a28 <GetASNHeader_ex>
        if (GetASNHeader(input, ASN_CONTEXT_SPECIFIC | ASN_ASYMKEY_PUBKEY | 1,
 80157ce:	2800      	cmp	r0, #0
 80157d0:	dbee      	blt.n	80157b0 <DecodeAsymKey+0xf4>
        if ((word32)pubSz > *pubKeyLen)
 80157d2:	9b07      	ldr	r3, [sp, #28]
 80157d4:	f8d8 2000 	ldr.w	r2, [r8]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d3c5      	bcc.n	8015768 <DecodeAsymKey+0xac>
        pub = input + *inOutIdx;
 80157dc:	6827      	ldr	r7, [r4, #0]
        *privKeyLen = (word32)privSz;
 80157de:	9a06      	ldr	r2, [sp, #24]
        *inOutIdx += (word32)pubSz;
 80157e0:	443b      	add	r3, r7
 80157e2:	6023      	str	r3, [r4, #0]
        XMEMCPY(privKey, priv, *privKeyLen);
 80157e4:	4659      	mov	r1, fp
        *privKeyLen = (word32)privSz;
 80157e6:	f8ca 2000 	str.w	r2, [sl]
        XMEMCPY(privKey, priv, *privKeyLen);
 80157ea:	4648      	mov	r0, r9
 80157ec:	f008 f8da 	bl	801d9a4 <memcpy>
        if (pubKey != NULL)
 80157f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        *pubKeyLen = (word32)pubSz;
 80157f2:	9a07      	ldr	r2, [sp, #28]
 80157f4:	f8c8 2000 	str.w	r2, [r8]
        if (pubKey != NULL)
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d0d6      	beq.n	80157aa <DecodeAsymKey+0xee>
            XMEMCPY(pubKey, pub, *pubKeyLen);
 80157fc:	19e9      	adds	r1, r5, r7
 80157fe:	4618      	mov	r0, r3
 8015800:	f008 f8d0 	bl	801d9a4 <memcpy>
 8015804:	e7d1      	b.n	80157aa <DecodeAsymKey+0xee>
    return 0;
 8015806:	2000      	movs	r0, #0
 8015808:	e766      	b.n	80156d8 <DecodeAsymKey+0x1c>

0801580a <wc_Ed25519PrivateKeyDecode>:
#endif /* WC_ENABLE_ASYM_KEY_IMPORT */

#if defined(HAVE_ED25519) && defined(HAVE_ED25519_KEY_IMPORT)
int wc_Ed25519PrivateKeyDecode(const byte* input, word32* inOutIdx,
                               ed25519_key* key, word32 inSz)
{
 801580a:	b530      	push	{r4, r5, lr}
    int ret;
    byte privKey[ED25519_KEY_SIZE], pubKey[2*ED25519_PUB_KEY_SIZE+1];
    word32 privKeyLen = (word32)sizeof(privKey);
    word32 pubKeyLen = (word32)sizeof(pubKey);
 801580c:	f04f 0c20 	mov.w	ip, #32
{
 8015810:	b0a1      	sub	sp, #132	; 0x84
 8015812:	4614      	mov	r4, r2
 8015814:	461a      	mov	r2, r3
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8015816:	2341      	movs	r3, #65	; 0x41
 8015818:	e9cd c305 	strd	ip, r3, [sp, #20]

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0) {
 801581c:	b1f0      	cbz	r0, 801585c <wc_Ed25519PrivateKeyDecode+0x52>
 801581e:	b1e9      	cbz	r1, 801585c <wc_Ed25519PrivateKeyDecode+0x52>
 8015820:	b1e4      	cbz	r4, 801585c <wc_Ed25519PrivateKeyDecode+0x52>
 8015822:	b1da      	cbz	r2, 801585c <wc_Ed25519PrivateKeyDecode+0x52>
        return BAD_FUNC_ARG;
    }

    ret = DecodeAsymKey(input, inOutIdx, inSz, privKey, &privKeyLen,
 8015824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015828:	9303      	str	r3, [sp, #12]
 801582a:	ab06      	add	r3, sp, #24
 801582c:	9302      	str	r3, [sp, #8]
 801582e:	ad0f      	add	r5, sp, #60	; 0x3c
 8015830:	ab05      	add	r3, sp, #20
 8015832:	9300      	str	r3, [sp, #0]
 8015834:	9501      	str	r5, [sp, #4]
 8015836:	ab07      	add	r3, sp, #28
 8015838:	f7ff ff40 	bl	80156bc <DecodeAsymKey>
        pubKey, &pubKeyLen, ED25519k);
    if (ret == 0) {
 801583c:	b930      	cbnz	r0, 801584c <wc_Ed25519PrivateKeyDecode+0x42>
        if (pubKeyLen == 0) {
            ret = wc_ed25519_import_private_only(privKey, privKeyLen, key);
 801583e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
        if (pubKeyLen == 0) {
 8015842:	b92b      	cbnz	r3, 8015850 <wc_Ed25519PrivateKeyDecode+0x46>
            ret = wc_ed25519_import_private_only(privKey, privKeyLen, key);
 8015844:	4622      	mov	r2, r4
 8015846:	a807      	add	r0, sp, #28
 8015848:	f000 fcb3 	bl	80161b2 <wc_ed25519_import_private_only>
            ret = wc_ed25519_import_private_key(privKey, privKeyLen,
                pubKey, pubKeyLen, key);
        }
    }
    return ret;
}
 801584c:	b021      	add	sp, #132	; 0x84
 801584e:	bd30      	pop	{r4, r5, pc}
            ret = wc_ed25519_import_private_key(privKey, privKeyLen,
 8015850:	9400      	str	r4, [sp, #0]
 8015852:	462a      	mov	r2, r5
 8015854:	a807      	add	r0, sp, #28
 8015856:	f000 fca3 	bl	80161a0 <wc_ed25519_import_private_key>
 801585a:	e7f7      	b.n	801584c <wc_Ed25519PrivateKeyDecode+0x42>
        return BAD_FUNC_ARG;
 801585c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8015860:	e7f4      	b.n	801584c <wc_Ed25519PrivateKeyDecode+0x42>

08015862 <curve25519_copy_point>:
}

static WC_INLINE void curve25519_copy_point(byte* out, const byte* point,
    int endian)
{
    if (endian == EC25519_BIG_ENDIAN) {
 8015862:	2a01      	cmp	r2, #1
{
 8015864:	b410      	push	{r4}
 8015866:	460c      	mov	r4, r1
    if (endian == EC25519_BIG_ENDIAN) {
 8015868:	d10a      	bne.n	8015880 <curve25519_copy_point+0x1e>
 801586a:	f101 0220 	add.w	r2, r1, #32
 801586e:	3801      	subs	r0, #1
        int i;
        /* put shared secret key in Big Endian format */
        for (i = 0; i < CURVE25519_KEYSIZE; i++) {
            out[i] = point[CURVE25519_KEYSIZE - i -1];
 8015870:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8015874:	f800 3f01 	strb.w	r3, [r0, #1]!
        for (i = 0; i < CURVE25519_KEYSIZE; i++) {
 8015878:	42a2      	cmp	r2, r4
 801587a:	d1f9      	bne.n	8015870 <curve25519_copy_point+0xe>
        }
    }
    else { /* put shared secret key in Little Endian format */
        XMEMCPY(out, point, CURVE25519_KEYSIZE);
    }
}
 801587c:	bc10      	pop	{r4}
 801587e:	4770      	bx	lr
 8015880:	bc10      	pop	{r4}
        XMEMCPY(out, point, CURVE25519_KEYSIZE);
 8015882:	2220      	movs	r2, #32
 8015884:	f008 b88e 	b.w	801d9a4 <memcpy>

08015888 <wc_curve25519_make_pub>:
#ifdef FREESCALE_LTC_ECC
    const ECPoint* basepoint = nxp_ltc_curve25519_GetBasePoint();
    ECPoint wc_pub;
#endif

    if ( (public_size != CURVE25519_KEYSIZE) ||
 8015888:	2820      	cmp	r0, #32
{
 801588a:	b538      	push	{r3, r4, r5, lr}
 801588c:	460d      	mov	r5, r1
 801588e:	461c      	mov	r4, r3
    if ( (public_size != CURVE25519_KEYSIZE) ||
 8015890:	d113      	bne.n	80158ba <wc_curve25519_make_pub+0x32>
 8015892:	2a20      	cmp	r2, #32
 8015894:	d111      	bne.n	80158ba <wc_curve25519_make_pub+0x32>
        (private_size != CURVE25519_KEYSIZE)) {
        return ECC_BAD_ARG_E;
    }
    if ((pub == NULL) || (priv == NULL)) {
 8015896:	b181      	cbz	r1, 80158ba <wc_curve25519_make_pub+0x32>
 8015898:	b17b      	cbz	r3, 80158ba <wc_curve25519_make_pub+0x32>
    if ((priv[0] & ~248) ||
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	075b      	lsls	r3, r3, #29
 801589e:	d10c      	bne.n	80158ba <wc_curve25519_make_pub+0x32>
 80158a0:	f994 301f 	ldrsb.w	r3, [r4, #31]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	db08      	blt.n	80158ba <wc_curve25519_make_pub+0x32>
    ret = nxp_ltc_curve25519(&wc_pub, priv, basepoint, kLTC_Weierstrass);
    if (ret == 0) {
        XMEMCPY(pub, wc_pub.point, CURVE25519_KEYSIZE);
    }
#else
    fe_init();
 80158a8:	f000 fcd6 	bl	8016258 <fe_init>

    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    ret = curve25519(pub, priv, (byte*)kCurve25519BasePoint);
 80158ac:	4621      	mov	r1, r4
 80158ae:	4628      	mov	r0, r5
 80158b0:	4a03      	ldr	r2, [pc, #12]	; (80158c0 <wc_curve25519_make_pub+0x38>)

    RESTORE_VECTOR_REGISTERS();
#endif

    return ret;
}
 80158b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = curve25519(pub, priv, (byte*)kCurve25519BasePoint);
 80158b6:	f001 bddf 	b.w	8017478 <curve25519>
}
 80158ba:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80158be:	bd38      	pop	{r3, r4, r5, pc}
 80158c0:	08022d90 	.word	0x08022d90

080158c4 <wc_curve25519_make_priv>:
 *
 * return value is propagated from wc_RNG_GenerateBlock(() (0 on success),
 * or BAD_FUNC_ARG/ECC_BAD_ARG_E, and the byte vector is little endian.
 */
int wc_curve25519_make_priv(WC_RNG* rng, int keysize, byte* key)
{
 80158c4:	b510      	push	{r4, lr}
    int ret;

    if (key == NULL || rng == NULL)
 80158c6:	4614      	mov	r4, r2
 80158c8:	b192      	cbz	r2, 80158f0 <wc_curve25519_make_priv+0x2c>
 80158ca:	b188      	cbz	r0, 80158f0 <wc_curve25519_make_priv+0x2c>
        return BAD_FUNC_ARG;

    /* currently only a key size of 32 bytes is used */
    if (keysize != CURVE25519_KEYSIZE)
 80158cc:	2920      	cmp	r1, #32
 80158ce:	d112      	bne.n	80158f6 <wc_curve25519_make_priv+0x32>
        return ECC_BAD_ARG_E;

    /* random number for private key */
    ret = wc_RNG_GenerateBlock(rng, key, (word32)keysize);
 80158d0:	460a      	mov	r2, r1
 80158d2:	4621      	mov	r1, r4
 80158d4:	f7f9 f92c 	bl	800eb30 <wc_RNG_GenerateBlock>
    if (ret == 0) {
 80158d8:	b948      	cbnz	r0, 80158ee <wc_curve25519_make_priv+0x2a>
    priv[0]  &= 248;
 80158da:	7823      	ldrb	r3, [r4, #0]
 80158dc:	f023 0307 	bic.w	r3, r3, #7
 80158e0:	7023      	strb	r3, [r4, #0]
    priv[CURVE25519_KEYSIZE-1] &= 127;
 80158e2:	7fe3      	ldrb	r3, [r4, #31]
 80158e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    priv[CURVE25519_KEYSIZE-1] |= 64;
 80158e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158ec:	77e3      	strb	r3, [r4, #31]
        /* Clamp the private key */
        ret = curve25519_priv_clamp(key);
    }

    return ret;
}
 80158ee:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 80158f0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80158f4:	e7fb      	b.n	80158ee <wc_curve25519_make_priv+0x2a>
        return ECC_BAD_ARG_E;
 80158f6:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80158fa:	e7f8      	b.n	80158ee <wc_curve25519_make_priv+0x2a>

080158fc <wc_curve25519_make_key>:
 *
 * return value is propagated from wc_curve25519_make_private() or
 * wc_curve25519_make_pub() (0 on success).
 */
int wc_curve25519_make_key(WC_RNG* rng, int keysize, curve25519_key* key)
{
 80158fc:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if (key == NULL || rng == NULL)
 80158fe:	4614      	mov	r4, r2
 8015900:	b1ea      	cbz	r2, 801593e <wc_curve25519_make_key+0x42>
 8015902:	b1e0      	cbz	r0, 801593e <wc_curve25519_make_key+0x42>
#endif

#ifdef WOLFSSL_SE050
    ret = se050_curve25519_create_key(key, keysize);
#else
    ret = wc_curve25519_make_priv(rng, keysize, key->k);
 8015904:	f102 0529 	add.w	r5, r2, #41	; 0x29
 8015908:	462a      	mov	r2, r5
 801590a:	f7ff ffdb 	bl	80158c4 <wc_curve25519_make_priv>
    if (ret == 0) {
 801590e:	b9a8      	cbnz	r0, 801593c <wc_curve25519_make_key+0x40>
        key->privSet = 1;
 8015910:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 8015914:	2220      	movs	r2, #32
        key->privSet = 1;
 8015916:	f041 0102 	orr.w	r1, r1, #2
 801591a:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 801591e:	462b      	mov	r3, r5
 8015920:	4610      	mov	r0, r2
 8015922:	f104 0108 	add.w	r1, r4, #8
 8015926:	f7ff ffaf 	bl	8015888 <wc_curve25519_make_pub>
                                     (int)sizeof(key->k), key->k);
        key->pubSet = (ret == 0);
 801592a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 801592e:	fab0 f380 	clz	r3, r0
 8015932:	095b      	lsrs	r3, r3, #5
 8015934:	f363 0200 	bfi	r2, r3, #0, #1
 8015938:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    }
#endif
    return ret;
}
 801593c:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 801593e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8015942:	e7fb      	b.n	801593c <wc_curve25519_make_key+0x40>

08015944 <wc_curve25519_shared_secret_ex>:
}

int wc_curve25519_shared_secret_ex(curve25519_key* private_key,
                                   curve25519_key* public_key,
                                   byte* out, word32* outlen, int endian)
{
 8015944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015946:	460c      	mov	r4, r1
 8015948:	b08b      	sub	sp, #44	; 0x2c
 801594a:	4617      	mov	r7, r2
 801594c:	461d      	mov	r5, r3
    int ret;
    ECPoint o;

    /* sanity check */
    if (private_key == NULL || public_key == NULL ||
 801594e:	4606      	mov	r6, r0
 8015950:	b390      	cbz	r0, 80159b8 <wc_curve25519_shared_secret_ex+0x74>
 8015952:	b389      	cbz	r1, 80159b8 <wc_curve25519_shared_secret_ex+0x74>
 8015954:	b382      	cbz	r2, 80159b8 <wc_curve25519_shared_secret_ex+0x74>
        out == NULL || outlen == NULL || *outlen < CURVE25519_KEYSIZE) {
 8015956:	b37b      	cbz	r3, 80159b8 <wc_curve25519_shared_secret_ex+0x74>
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	2b1f      	cmp	r3, #31
 801595c:	d92c      	bls.n	80159b8 <wc_curve25519_shared_secret_ex+0x74>
        return BAD_FUNC_ARG;
    }

    /* make sure we have a populated private and public key */
    if (!public_key->pubSet
 801595e:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
 8015962:	07da      	lsls	r2, r3, #31
 8015964:	d52b      	bpl.n	80159be <wc_curve25519_shared_secret_ex+0x7a>
    #ifndef WOLFSSL_SE050
        || !private_key->privSet
 8015966:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 801596a:	079b      	lsls	r3, r3, #30
 801596c:	d527      	bpl.n	80159be <wc_curve25519_shared_secret_ex+0x7a>
    ) {
        return ECC_BAD_ARG_E;
    }

    /* avoid implementation fingerprinting - make sure signed bit is not set */
    if (public_key->p.point[CURVE25519_KEYSIZE-1] & 0x80) {
 801596e:	f991 3027 	ldrsb.w	r3, [r1, #39]	; 0x27
 8015972:	2b00      	cmp	r3, #0
 8015974:	db23      	blt.n	80159be <wc_curve25519_shared_secret_ex+0x7a>
            return ret;
        /* fall-through when unavailable */
    }
#endif

    XMEMSET(&o, 0, sizeof(o));
 8015976:	2221      	movs	r2, #33	; 0x21
 8015978:	2100      	movs	r1, #0
 801597a:	a801      	add	r0, sp, #4
 801597c:	f008 f83a 	bl	801d9f4 <memset>
    else
    #endif
    {
    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    ret = curve25519(o.point, private_key->k, public_key->p.point);
 8015980:	f104 0208 	add.w	r2, r4, #8
 8015984:	f106 0129 	add.w	r1, r6, #41	; 0x29
 8015988:	a801      	add	r0, sp, #4
 801598a:	f001 fd75 	bl	8017478 <curve25519>
        if (t == 0) {
            ret = ECC_OUT_OF_RANGE_E;
        }
    }
#endif
    if (ret == 0) {
 801598e:	4604      	mov	r4, r0
 8015990:	b930      	cbnz	r0, 80159a0 <wc_curve25519_shared_secret_ex+0x5c>
        curve25519_copy_point(out, o.point, endian);
 8015992:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015994:	a901      	add	r1, sp, #4
 8015996:	4638      	mov	r0, r7
 8015998:	f7ff ff63 	bl	8015862 <curve25519_copy_point>
        *outlen = CURVE25519_KEYSIZE;
 801599c:	2320      	movs	r3, #32
 801599e:	602b      	str	r3, [r5, #0]
{
 80159a0:	2300      	movs	r3, #0
    while (len--) *z++ = 0;
 80159a2:	4619      	mov	r1, r3
 80159a4:	aa01      	add	r2, sp, #4
 80159a6:	441a      	add	r2, r3
 80159a8:	3301      	adds	r3, #1
 80159aa:	2b22      	cmp	r3, #34	; 0x22
 80159ac:	d102      	bne.n	80159b4 <wc_curve25519_shared_secret_ex+0x70>
    }

    ForceZero(&o, sizeof(o));

    return ret;
}
 80159ae:	4620      	mov	r0, r4
 80159b0:	b00b      	add	sp, #44	; 0x2c
 80159b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b4:	7011      	strb	r1, [r2, #0]
 80159b6:	e7f5      	b.n	80159a4 <wc_curve25519_shared_secret_ex+0x60>
        return BAD_FUNC_ARG;
 80159b8:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80159bc:	e7f7      	b.n	80159ae <wc_curve25519_shared_secret_ex+0x6a>
        return ECC_BAD_ARG_E;
 80159be:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 80159c2:	e7f4      	b.n	80159ae <wc_curve25519_shared_secret_ex+0x6a>

080159c4 <wc_curve25519_export_public_ex>:

/* export curve25519 public key (Big or Little endian)
 * return 0 on success */
int wc_curve25519_export_public_ex(curve25519_key* key, byte* out,
                                   word32* outLen, int endian)
{
 80159c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159c8:	460f      	mov	r7, r1
 80159ca:	4616      	mov	r6, r2
 80159cc:	4698      	mov	r8, r3
    int ret = 0;

    if (key == NULL || out == NULL || outLen == NULL) {
 80159ce:	4604      	mov	r4, r0
 80159d0:	b360      	cbz	r0, 8015a2c <wc_curve25519_export_public_ex+0x68>
 80159d2:	b359      	cbz	r1, 8015a2c <wc_curve25519_export_public_ex+0x68>
 80159d4:	b352      	cbz	r2, 8015a2c <wc_curve25519_export_public_ex+0x68>
        return BAD_FUNC_ARG;
    }

    /* check and set outgoing key size */
    if (*outLen < CURVE25519_KEYSIZE) {
 80159d6:	6813      	ldr	r3, [r2, #0]
 80159d8:	2b1f      	cmp	r3, #31
 80159da:	d806      	bhi.n	80159ea <wc_curve25519_export_public_ex+0x26>
        *outLen = CURVE25519_KEYSIZE;
 80159dc:	2320      	movs	r3, #32
 80159de:	6013      	str	r3, [r2, #0]
        return ECC_BAD_ARG_E;
 80159e0:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
    /* export public point with endianness */
    curve25519_copy_point(out, key->p.point, endian);
    *outLen = CURVE25519_KEYSIZE;

    return ret;
}
 80159e4:	4628      	mov	r0, r5
 80159e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (!key->pubSet) {
 80159ea:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80159ee:	07db      	lsls	r3, r3, #31
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 80159f0:	f100 0908 	add.w	r9, r0, #8
    if (!key->pubSet) {
 80159f4:	d418      	bmi.n	8015a28 <wc_curve25519_export_public_ex+0x64>
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 80159f6:	2220      	movs	r2, #32
 80159f8:	f100 0329 	add.w	r3, r0, #41	; 0x29
 80159fc:	4649      	mov	r1, r9
 80159fe:	4610      	mov	r0, r2
 8015a00:	f7ff ff42 	bl	8015888 <wc_curve25519_make_pub>
        key->pubSet = (ret == 0);
 8015a04:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8015a08:	4605      	mov	r5, r0
 8015a0a:	fab0 f080 	clz	r0, r0
 8015a0e:	0940      	lsrs	r0, r0, #5
 8015a10:	f360 0300 	bfi	r3, r0, #0, #1
 8015a14:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    curve25519_copy_point(out, key->p.point, endian);
 8015a18:	4642      	mov	r2, r8
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	4638      	mov	r0, r7
 8015a1e:	f7ff ff20 	bl	8015862 <curve25519_copy_point>
    *outLen = CURVE25519_KEYSIZE;
 8015a22:	2320      	movs	r3, #32
 8015a24:	6033      	str	r3, [r6, #0]
    return ret;
 8015a26:	e7dd      	b.n	80159e4 <wc_curve25519_export_public_ex+0x20>
    int ret = 0;
 8015a28:	2500      	movs	r5, #0
 8015a2a:	e7f5      	b.n	8015a18 <wc_curve25519_export_public_ex+0x54>
        return BAD_FUNC_ARG;
 8015a2c:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8015a30:	e7d8      	b.n	80159e4 <wc_curve25519_export_public_ex+0x20>
	...

08015a34 <wc_curve25519_import_public_ex>:

/* import curve25519 public key (Big or Little endian)
 * return 0 on success */
int wc_curve25519_import_public_ex(const byte* in, word32 inLen,
                                curve25519_key* key, int endian)
{
 8015a34:	b510      	push	{r4, lr}
 8015a36:	4614      	mov	r4, r2
 8015a38:	461a      	mov	r2, r3
#ifdef FREESCALE_LTC_ECC
    ltc_pkha_ecc_point_t ltcPoint;
#endif

    /* sanity check */
    if (key == NULL || in == NULL) {
 8015a3a:	b18c      	cbz	r4, 8015a60 <wc_curve25519_import_public_ex+0x2c>
 8015a3c:	b180      	cbz	r0, 8015a60 <wc_curve25519_import_public_ex+0x2c>
        return BAD_FUNC_ARG;
    }

    /* check size of incoming keys */
    if (inLen != CURVE25519_KEYSIZE) {
 8015a3e:	2920      	cmp	r1, #32
 8015a40:	d111      	bne.n	8015a66 <wc_curve25519_import_public_ex+0x32>
       return ECC_BAD_ARG_E;
    }

    /* import public point with endianness */
    curve25519_copy_point(key->p.point, in, endian);
 8015a42:	4601      	mov	r1, r0
 8015a44:	f104 0008 	add.w	r0, r4, #8
 8015a48:	f7ff ff0b 	bl	8015862 <curve25519_copy_point>
    key->pubSet = 1;
 8015a4c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8015a50:	f043 0301 	orr.w	r3, r3, #1
 8015a54:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49

    key->dp = &curve25519_sets[0];
 8015a58:	4b04      	ldr	r3, [pc, #16]	; (8015a6c <wc_curve25519_import_public_ex+0x38>)
 8015a5a:	6063      	str	r3, [r4, #4]
    ltcPoint.X = &key->p.point[0];
    ltcPoint.Y = &key->p.pointY[0];
    LTC_PKHA_Curve25519ComputeY(&ltcPoint);
#endif

    return 0;
 8015a5c:	2000      	movs	r0, #0
}
 8015a5e:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 8015a60:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8015a64:	e7fb      	b.n	8015a5e <wc_curve25519_import_public_ex+0x2a>
       return ECC_BAD_ARG_E;
 8015a66:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8015a6a:	e7f8      	b.n	8015a5e <wc_curve25519_import_public_ex+0x2a>
 8015a6c:	08022d88 	.word	0x08022d88

08015a70 <wc_curve25519_check_public>:
 *         ECC_BAD_ARG_E if key length is not 32 bytes, public key value is
 *         zero or one; and
 *         0 otherwise.
 */
int wc_curve25519_check_public(const byte* pub, word32 pubSz, int endian)
{
 8015a70:	b510      	push	{r4, lr}
    word32 i;

    if (pub == NULL)
 8015a72:	4603      	mov	r3, r0
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d042      	beq.n	8015afe <wc_curve25519_check_public+0x8e>
        return BAD_FUNC_ARG;

    /* Check for empty key data */
    if (pubSz == 0)
 8015a78:	2900      	cmp	r1, #0
 8015a7a:	d044      	beq.n	8015b06 <wc_curve25519_check_public+0x96>
        return BUFFER_E;

    /* Check key length */
    if (pubSz != CURVE25519_KEYSIZE)
 8015a7c:	2920      	cmp	r1, #32
 8015a7e:	d10a      	bne.n	8015a96 <wc_curve25519_check_public+0x26>
        return ECC_BAD_ARG_E;


    if (endian == EC25519_LITTLE_ENDIAN) {
 8015a80:	bb0a      	cbnz	r2, 8015ac6 <wc_curve25519_check_public+0x56>
 8015a82:	f100 011f 	add.w	r1, r0, #31
        /* Check for value of zero or one */
        for (i = CURVE25519_KEYSIZE - 1; i > 0; i--) {
            if (pub[i] != 0)
 8015a86:	f811 0901 	ldrb.w	r0, [r1], #-1
 8015a8a:	b938      	cbnz	r0, 8015a9c <wc_curve25519_check_public+0x2c>
        for (i = CURVE25519_KEYSIZE - 1; i > 0; i--) {
 8015a8c:	428b      	cmp	r3, r1
 8015a8e:	d1fa      	bne.n	8015a86 <wc_curve25519_check_public+0x16>
                break;
        }
        if (i == 0 && (pub[0] == 0 || pub[0] == 1))
 8015a90:	7819      	ldrb	r1, [r3, #0]
 8015a92:	2901      	cmp	r1, #1
 8015a94:	d802      	bhi.n	8015a9c <wc_curve25519_check_public+0x2c>
            for (i = CURVE25519_KEYSIZE - 2; i > 0; i--) {
                if (pub[i] != 0xff)
                    break;
            }
            if (i == 0 && (pub[0] >= 0xec))
                return ECC_BAD_ARG_E;
 8015a96:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8015a9a:	e032      	b.n	8015b02 <wc_curve25519_check_public+0x92>
        if (pub[CURVE25519_KEYSIZE - 1] & 0x80)
 8015a9c:	f993 001f 	ldrsb.w	r0, [r3, #31]
 8015aa0:	7fd9      	ldrb	r1, [r3, #31]
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	db32      	blt.n	8015b0c <wc_curve25519_check_public+0x9c>
        if (pub[CURVE25519_KEYSIZE - 1] == 0x7f) {
 8015aa6:	297f      	cmp	r1, #127	; 0x7f
 8015aa8:	d12b      	bne.n	8015b02 <wc_curve25519_check_public+0x92>
 8015aaa:	f103 011e 	add.w	r1, r3, #30
                if (pub[i] != 0xff)
 8015aae:	f811 0901 	ldrb.w	r0, [r1], #-1
 8015ab2:	28ff      	cmp	r0, #255	; 0xff
 8015ab4:	d125      	bne.n	8015b02 <wc_curve25519_check_public+0x92>
            for (i = CURVE25519_KEYSIZE - 2; i > 0; i--) {
 8015ab6:	428b      	cmp	r3, r1
 8015ab8:	d1f9      	bne.n	8015aae <wc_curve25519_check_public+0x3e>
            if (i == 0 && (pub[0] >= 0xec))
 8015aba:	781b      	ldrb	r3, [r3, #0]
                return ECC_BAD_ARG_E;
 8015abc:	2bec      	cmp	r3, #236	; 0xec
 8015abe:	bf28      	it	cs
 8015ac0:	f06f 02a9 	mvncs.w	r2, #169	; 0xa9
 8015ac4:	e01d      	b.n	8015b02 <wc_curve25519_check_public+0x92>
 8015ac6:	1e41      	subs	r1, r0, #1
 8015ac8:	4602      	mov	r2, r0
 8015aca:	301e      	adds	r0, #30
         }
    }
    else {
        /* Check for value of zero or one */
        for (i = 0; i < CURVE25519_KEYSIZE - 1; i++) {
            if (pub[i] != 0)
 8015acc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015ad0:	b924      	cbnz	r4, 8015adc <wc_curve25519_check_public+0x6c>
        for (i = 0; i < CURVE25519_KEYSIZE - 1; i++) {
 8015ad2:	4288      	cmp	r0, r1
 8015ad4:	d1fa      	bne.n	8015acc <wc_curve25519_check_public+0x5c>
                break;
        }
        if (i == CURVE25519_KEYSIZE - 1 && (pub[i] == 0 || pub[i] == 1))
 8015ad6:	7fd9      	ldrb	r1, [r3, #31]
 8015ad8:	2901      	cmp	r1, #1
 8015ada:	d9dc      	bls.n	8015a96 <wc_curve25519_check_public+0x26>
            return ECC_BAD_ARG_E;

        /* Check high bit set */
        if (pub[0] & 0x80)
 8015adc:	f993 4000 	ldrsb.w	r4, [r3]
 8015ae0:	7819      	ldrb	r1, [r3, #0]
 8015ae2:	2c00      	cmp	r4, #0
 8015ae4:	db12      	blt.n	8015b0c <wc_curve25519_check_public+0x9c>
            return ECC_OUT_OF_RANGE_E;

        /* Check for order-1 or higher. */
        if (pub[0] == 0x7f) {
 8015ae6:	297f      	cmp	r1, #127	; 0x7f
 8015ae8:	d113      	bne.n	8015b12 <wc_curve25519_check_public+0xa2>
            for (i = 1; i < CURVE25519_KEYSIZE - 1; i++) {
                if (pub[i] != 0)
 8015aea:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8015aee:	b981      	cbnz	r1, 8015b12 <wc_curve25519_check_public+0xa2>
            for (i = 1; i < CURVE25519_KEYSIZE - 1; i++) {
 8015af0:	4290      	cmp	r0, r2
 8015af2:	d1fa      	bne.n	8015aea <wc_curve25519_check_public+0x7a>
                    break;
            }
            if (i == CURVE25519_KEYSIZE - 1 && (pub[i] >= 0xec))
 8015af4:	7fdb      	ldrb	r3, [r3, #31]
                return ECC_BAD_ARG_E;
 8015af6:	2bec      	cmp	r3, #236	; 0xec
 8015af8:	bf38      	it	cc
 8015afa:	2200      	movcc	r2, #0
 8015afc:	e7df      	b.n	8015abe <wc_curve25519_check_public+0x4e>
        return BAD_FUNC_ARG;
 8015afe:	f06f 02ac 	mvn.w	r2, #172	; 0xac
                return ECC_BAD_ARG_E;
         }
    }

    return 0;
}
 8015b02:	4610      	mov	r0, r2
 8015b04:	bd10      	pop	{r4, pc}
        return BUFFER_E;
 8015b06:	f06f 0283 	mvn.w	r2, #131	; 0x83
 8015b0a:	e7fa      	b.n	8015b02 <wc_curve25519_check_public+0x92>
            return ECC_OUT_OF_RANGE_E;
 8015b0c:	f06f 02d8 	mvn.w	r2, #216	; 0xd8
 8015b10:	e7f7      	b.n	8015b02 <wc_curve25519_check_public+0x92>
    return 0;
 8015b12:	2200      	movs	r2, #0
 8015b14:	e7f5      	b.n	8015b02 <wc_curve25519_check_public+0x92>
	...

08015b18 <wc_curve25519_init_ex>:
}

#endif /* HAVE_CURVE25519_KEY_IMPORT */

int wc_curve25519_init_ex(curve25519_key* key, void* heap, int devId)
{
 8015b18:	b510      	push	{r4, lr}
    if (key == NULL)
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	b148      	cbz	r0, 8015b32 <wc_curve25519_init_ex+0x1a>
       return BAD_FUNC_ARG;

    XMEMSET(key, 0, sizeof(*key));
 8015b1e:	224c      	movs	r2, #76	; 0x4c
 8015b20:	2100      	movs	r1, #0
 8015b22:	f007 ff67 	bl	801d9f4 <memset>

    /* currently the format for curve25519 */
    key->dp = &curve25519_sets[0];
 8015b26:	4b04      	ldr	r3, [pc, #16]	; (8015b38 <wc_curve25519_init_ex+0x20>)
 8015b28:	6063      	str	r3, [r4, #4]
    (void)devId;
#endif
    (void)heap; /* if needed for XMALLOC/XFREE in future */

#ifndef FREESCALE_LTC_ECC
    fe_init();
 8015b2a:	f000 fb95 	bl	8016258 <fe_init>

#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_curve25519_init_ex key->k", key->k, CURVE25519_KEYSIZE);
#endif

    return 0;
 8015b2e:	2000      	movs	r0, #0
}
 8015b30:	bd10      	pop	{r4, pc}
       return BAD_FUNC_ARG;
 8015b32:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8015b36:	e7fb      	b.n	8015b30 <wc_curve25519_init_ex+0x18>
 8015b38:	08022d88 	.word	0x08022d88

08015b3c <wc_curve25519_free>:
    return wc_curve25519_init_ex(key, NULL, INVALID_DEVID);
}

/* Clean the memory of a key */
void wc_curve25519_free(curve25519_key* key)
{
 8015b3c:	b510      	push	{r4, lr}
    if (key == NULL)
 8015b3e:	4604      	mov	r4, r0
 8015b40:	b198      	cbz	r0, 8015b6a <wc_curve25519_free+0x2e>

#ifdef WOLFSSL_SE050
    se050_curve25519_free_key(key);
#endif

    key->dp = NULL;
 8015b42:	2200      	movs	r2, #0
 8015b44:	6042      	str	r2, [r0, #4]
    ForceZero(key->k, sizeof(key->k));
 8015b46:	f100 0329 	add.w	r3, r0, #41	; 0x29
 8015b4a:	f100 0149 	add.w	r1, r0, #73	; 0x49
 8015b4e:	428b      	cmp	r3, r1
 8015b50:	d10c      	bne.n	8015b6c <wc_curve25519_free+0x30>
    XMEMSET(&key->p, 0, sizeof(key->p));
 8015b52:	2221      	movs	r2, #33	; 0x21
 8015b54:	2100      	movs	r1, #0
 8015b56:	f104 0008 	add.w	r0, r4, #8
 8015b5a:	f007 ff4b 	bl	801d9f4 <memset>
    key->pubSet = 0;
 8015b5e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8015b62:	f023 0303 	bic.w	r3, r3, #3
 8015b66:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    key->privSet = 0;
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(curve25519_key));
#endif
}
 8015b6a:	bd10      	pop	{r4, pc}
 8015b6c:	f803 2b01 	strb.w	r2, [r3], #1
 8015b70:	e7ed      	b.n	8015b4e <wc_curve25519_free+0x12>

08015b72 <ed25519_hash_init>:
    ** more char for saving the line ending in our ed25519Ctx[] here: */
    static const byte ed25519Ctx[ED25519CTX_SIZE + 1] = ED25519CTX_SNC_MESSAGE;
#endif

static int ed25519_hash_init(ed25519_key* key, wc_Sha512 *sha)
{
 8015b72:	b538      	push	{r3, r4, r5, lr}
 8015b74:	460c      	mov	r4, r1
 8015b76:	4605      	mov	r5, r0
    int ret;

#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    /* when not using persistent SHA, we'll zero the sha param */
    XMEMSET(sha, 0, sizeof(wc_Sha512));
 8015b78:	22e0      	movs	r2, #224	; 0xe0
 8015b7a:	2100      	movs	r1, #0
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	f007 ff39 	bl	801d9f4 <memset>
#endif

    ret = wc_InitSha512_ex(sha, key->heap,
 8015b82:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8015b84:	4620      	mov	r0, r4
 8015b86:	f06f 0201 	mvn.w	r2, #1
    if (ret == 0)
        key->sha_clean_flag = 1;
#endif

    return ret;
}
 8015b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = wc_InitSha512_ex(sha, key->heap,
 8015b8e:	f7fc bced 	b.w	801256c <wc_InitSha512_ex>

08015b92 <ed25519_hash>:
}


static int ed25519_hash(ed25519_key* key, const byte* in, word32 inLen,
    byte* hash)
{
 8015b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b94:	460d      	mov	r5, r1
 8015b96:	b0b9      	sub	sp, #228	; 0xe4
 8015b98:	4616      	mov	r6, r2
 8015b9a:	461f      	mov	r7, r3
    wc_Sha512 sha[1];
#else
    wc_Sha512 *sha;
#endif

    if (key == NULL || (in == NULL && inLen > 0) || hash == NULL) {
 8015b9c:	b1c0      	cbz	r0, 8015bd0 <ed25519_hash+0x3e>
 8015b9e:	b901      	cbnz	r1, 8015ba2 <ed25519_hash+0x10>
 8015ba0:	b9b2      	cbnz	r2, 8015bd0 <ed25519_hash+0x3e>

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    sha = &key->sha;
    ret = ed25519_hash_reset(key);
#else
    ret = ed25519_hash_init(key, sha);
 8015ba2:	4669      	mov	r1, sp
 8015ba4:	f7ff ffe5 	bl	8015b72 <ed25519_hash_init>
#endif
    if (ret < 0)
 8015ba8:	1e04      	subs	r4, r0, #0
 8015baa:	db0e      	blt.n	8015bca <ed25519_hash+0x38>
    return wc_Sha512Update(sha, data, len);
 8015bac:	4632      	mov	r2, r6
 8015bae:	4629      	mov	r1, r5
 8015bb0:	4668      	mov	r0, sp
 8015bb2:	f7fc fcf3 	bl	801259c <wc_Sha512Update>
        return ret;

    ret = ed25519_hash_update(key, sha, in, inLen);
    if (ret == 0)
 8015bb6:	4604      	mov	r4, r0
 8015bb8:	b920      	cbnz	r0, 8015bc4 <ed25519_hash+0x32>
    int ret = wc_Sha512Final(sha, hash);
 8015bba:	4639      	mov	r1, r7
 8015bbc:	4668      	mov	r0, sp
 8015bbe:	f7fc fcc3 	bl	8012548 <wc_Sha512Final>
 8015bc2:	4604      	mov	r4, r0
    wc_Sha512Free(sha);
 8015bc4:	4668      	mov	r0, sp
 8015bc6:	f7fc fd5b 	bl	8012680 <wc_Sha512Free>
#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    ed25519_hash_free(key, sha);
#endif

    return ret;
}
 8015bca:	4620      	mov	r0, r4
 8015bcc:	b039      	add	sp, #228	; 0xe4
 8015bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 8015bd0:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8015bd4:	e7f9      	b.n	8015bca <ed25519_hash+0x38>

08015bd6 <wc_ed25519_make_public>:

#ifdef HAVE_ED25519_MAKE_KEY
int wc_ed25519_make_public(ed25519_key* key, unsigned char* pubKey,
                           word32 pubKeySz)
{
 8015bd6:	b570      	push	{r4, r5, r6, lr}
 8015bd8:	460e      	mov	r6, r1
 8015bda:	b0b8      	sub	sp, #224	; 0xe0
    ALIGN16 byte az[ED25519_PRV_KEY_SIZE];
#if !defined(FREESCALE_LTC_ECC)
    ge_p3 A;
#endif

    if (key == NULL || pubKey == NULL || pubKeySz != ED25519_PUB_KEY_SIZE)
 8015bdc:	4605      	mov	r5, r0
 8015bde:	b360      	cbz	r0, 8015c3a <wc_ed25519_make_public+0x64>
 8015be0:	b359      	cbz	r1, 8015c3a <wc_ed25519_make_public+0x64>
 8015be2:	2a20      	cmp	r2, #32
 8015be4:	d129      	bne.n	8015c3a <wc_ed25519_make_public+0x64>
        ret = BAD_FUNC_ARG;

    if ((ret == 0) && (!key->privKeySet)) {
 8015be6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8015bea:	07db      	lsls	r3, r3, #31
 8015bec:	d528      	bpl.n	8015c40 <wc_ed25519_make_public+0x6a>
        ret = ECC_PRIV_KEY_E;
    }

    if (ret == 0)
        ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 8015bee:	466b      	mov	r3, sp
 8015bf0:	f100 0120 	add.w	r1, r0, #32
 8015bf4:	f7ff ffcd 	bl	8015b92 <ed25519_hash>
    if (ret == 0) {
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	b9d8      	cbnz	r0, 8015c34 <wc_ed25519_make_public+0x5e>
        /* apply clamp */
        az[0]  &= 248;
 8015bfc:	f89d 3000 	ldrb.w	r3, [sp]
 8015c00:	f023 0307 	bic.w	r3, r3, #7
 8015c04:	f88d 3000 	strb.w	r3, [sp]
        az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 8015c08:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        az[31] |= 64;
 8015c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        publicKey.Y = key->pointY;
        LTC_PKHA_Ed25519_PointMul(LTC_PKHA_Ed25519_BasePoint(), az,
            ED25519_KEY_SIZE, &publicKey, kLTC_Ed25519 /* result on Ed25519 */);
        LTC_PKHA_Ed25519_Compress(&publicKey, pubKey);
    #else
        ge_scalarmult_base(&A, az);
 8015c14:	4669      	mov	r1, sp
 8015c16:	a810      	add	r0, sp, #64	; 0x40
        az[31] |= 64;
 8015c18:	f88d 301f 	strb.w	r3, [sp, #31]
        ge_scalarmult_base(&A, az);
 8015c1c:	f004 fad2 	bl	801a1c4 <ge_scalarmult_base>
        ge_p3_tobytes(pubKey, &A);
 8015c20:	a910      	add	r1, sp, #64	; 0x40
 8015c22:	4630      	mov	r0, r6
 8015c24:	f004 fdda 	bl	801a7dc <ge_tobytes>
    #endif

        key->pubKeySet = 1;
 8015c28:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8015c2c:	f043 0302 	orr.w	r3, r3, #2
 8015c30:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    }

    return ret;
}
 8015c34:	4620      	mov	r0, r4
 8015c36:	b038      	add	sp, #224	; 0xe0
 8015c38:	bd70      	pop	{r4, r5, r6, pc}
 8015c3a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8015c3e:	e7f9      	b.n	8015c34 <wc_ed25519_make_public+0x5e>
        ret = ECC_PRIV_KEY_E;
 8015c40:	f06f 04d7 	mvn.w	r4, #215	; 0xd7
    return ret;
 8015c44:	e7f6      	b.n	8015c34 <wc_ed25519_make_public+0x5e>
	...

08015c48 <wc_ed25519_sign_msg_ex>:
    return 0 on success
 */
int wc_ed25519_sign_msg_ex(const byte* in, word32 inLen, byte* out,
                            word32 *outLen, ed25519_key* key, byte type,
                            const byte* context, byte contextLen)
{
 8015c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c4c:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8015c50:	460f      	mov	r7, r1
 8015c52:	f8dd 8260 	ldr.w	r8, [sp, #608]	; 0x260
 8015c56:	f8dd 9268 	ldr.w	r9, [sp, #616]	; 0x268
 8015c5a:	4615      	mov	r5, r2
    ALIGN16 byte nonce[WC_SHA512_DIGEST_SIZE];
    ALIGN16 byte hram[WC_SHA512_DIGEST_SIZE];
    ALIGN16 byte az[ED25519_PRV_KEY_SIZE];

    /* sanity check on arguments */
    if (in == NULL || out == NULL || outLen == NULL || key == NULL ||
 8015c5c:	4606      	mov	r6, r0
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	f000 80e9 	beq.w	8015e36 <wc_ed25519_sign_msg_ex+0x1ee>
 8015c64:	2a00      	cmp	r2, #0
 8015c66:	f000 80e6 	beq.w	8015e36 <wc_ed25519_sign_msg_ex+0x1ee>
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	f000 80e3 	beq.w	8015e36 <wc_ed25519_sign_msg_ex+0x1ee>
 8015c70:	f1b8 0f00 	cmp.w	r8, #0
 8015c74:	f000 80df 	beq.w	8015e36 <wc_ed25519_sign_msg_ex+0x1ee>
 8015c78:	f1b9 0f00 	cmp.w	r9, #0
 8015c7c:	d104      	bne.n	8015c88 <wc_ed25519_sign_msg_ex+0x40>
                                         (context == NULL && contextLen != 0)) {
 8015c7e:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 8015c82:	2a00      	cmp	r2, #0
 8015c84:	f040 80d7 	bne.w	8015e36 <wc_ed25519_sign_msg_ex+0x1ee>
            return ret;
        /* fall-through when unavailable */
    }
#endif

    if (!key->pubKeySet)
 8015c88:	f898 2060 	ldrb.w	r2, [r8, #96]	; 0x60
 8015c8c:	0792      	lsls	r2, r2, #30
 8015c8e:	f140 80d2 	bpl.w	8015e36 <wc_ed25519_sign_msg_ex+0x1ee>
        return BAD_FUNC_ARG;

    /* check and set up out length */
    if (*outLen < ED25519_SIG_SIZE) {
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	2a3f      	cmp	r2, #63	; 0x3f
 8015c96:	f04f 0240 	mov.w	r2, #64	; 0x40
        *outLen = ED25519_SIG_SIZE;
 8015c9a:	601a      	str	r2, [r3, #0]
    if (*outLen < ED25519_SIG_SIZE) {
 8015c9c:	d806      	bhi.n	8015cac <wc_ed25519_sign_msg_ex+0x64>
        return BUFFER_E;
 8015c9e:	f06f 0483 	mvn.w	r4, #131	; 0x83
    sc_reduce(hram);
    sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
#endif
#endif /* WOLFSSL_SE050 */
    return ret;
}
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8015ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 8015cac:	2220      	movs	r2, #32
 8015cae:	ab20      	add	r3, sp, #128	; 0x80
 8015cb0:	eb08 0102 	add.w	r1, r8, r2
 8015cb4:	4640      	mov	r0, r8
 8015cb6:	f7ff ff6c 	bl	8015b92 <ed25519_hash>
    if (ret != 0)
 8015cba:	4604      	mov	r4, r0
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	d1f0      	bne.n	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
    az[0]  &= 248;
 8015cc0:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8015cc4:	f023 0307 	bic.w	r3, r3, #7
 8015cc8:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 8015ccc:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
 8015cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    az[31] |= 64;
 8015cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        ret = ed25519_hash_init(key, sha);
 8015cd8:	a958      	add	r1, sp, #352	; 0x160
 8015cda:	4640      	mov	r0, r8
    az[31] |= 64;
 8015cdc:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
        ret = ed25519_hash_init(key, sha);
 8015ce0:	f7ff ff47 	bl	8015b72 <ed25519_hash_init>
        if (ret < 0) {
 8015ce4:	1e04      	subs	r4, r0, #0
 8015ce6:	dbdc      	blt.n	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
        if (type == Ed25519ctx || type == Ed25519ph) {
 8015ce8:	f89d 3264 	ldrb.w	r3, [sp, #612]	; 0x264
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d871      	bhi.n	8015dd4 <wc_ed25519_sign_msg_ex+0x18c>
    return wc_Sha512Update(sha, data, len);
 8015cf0:	4952      	ldr	r1, [pc, #328]	; (8015e3c <wc_ed25519_sign_msg_ex+0x1f4>)
 8015cf2:	2220      	movs	r2, #32
 8015cf4:	a858      	add	r0, sp, #352	; 0x160
 8015cf6:	f7fc fc51 	bl	801259c <wc_Sha512Update>
            if (ret == 0)
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	b9c0      	cbnz	r0, 8015d30 <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 8015cfe:	2201      	movs	r2, #1
 8015d00:	a999      	add	r1, sp, #612	; 0x264
 8015d02:	a858      	add	r0, sp, #352	; 0x160
 8015d04:	f7fc fc4a 	bl	801259c <wc_Sha512Update>
            if (ret == 0)
 8015d08:	4604      	mov	r4, r0
 8015d0a:	b988      	cbnz	r0, 8015d30 <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 8015d0c:	2201      	movs	r2, #1
 8015d0e:	a99b      	add	r1, sp, #620	; 0x26c
 8015d10:	a858      	add	r0, sp, #352	; 0x160
 8015d12:	f7fc fc43 	bl	801259c <wc_Sha512Update>
            if (ret == 0 && context != NULL)
 8015d16:	4604      	mov	r4, r0
 8015d18:	b950      	cbnz	r0, 8015d30 <wc_ed25519_sign_msg_ex+0xe8>
 8015d1a:	f1b9 0f00 	cmp.w	r9, #0
 8015d1e:	d152      	bne.n	8015dc6 <wc_ed25519_sign_msg_ex+0x17e>
    return wc_Sha512Update(sha, data, len);
 8015d20:	2220      	movs	r2, #32
 8015d22:	a928      	add	r1, sp, #160	; 0xa0
 8015d24:	a858      	add	r0, sp, #352	; 0x160
 8015d26:	f7fc fc39 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d054      	beq.n	8015dda <wc_ed25519_sign_msg_ex+0x192>
    wc_Sha512Free(sha);
 8015d30:	a858      	add	r0, sp, #352	; 0x160
 8015d32:	f7fc fca5 	bl	8012680 <wc_Sha512Free>
    if (ret != 0)
 8015d36:	2c00      	cmp	r4, #0
 8015d38:	d1b3      	bne.n	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
    sc_reduce(nonce);
 8015d3a:	4668      	mov	r0, sp
 8015d3c:	f002 f9da 	bl	80180f4 <sc_reduce>
    ge_scalarmult_base(&R,nonce);
 8015d40:	4669      	mov	r1, sp
 8015d42:	a830      	add	r0, sp, #192	; 0xc0
 8015d44:	f004 fa3e 	bl	801a1c4 <ge_scalarmult_base>
    ge_p3_tobytes(out,&R);
 8015d48:	a930      	add	r1, sp, #192	; 0xc0
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	f004 fd46 	bl	801a7dc <ge_tobytes>
        ret = ed25519_hash_init(key, sha);
 8015d50:	a958      	add	r1, sp, #352	; 0x160
 8015d52:	4640      	mov	r0, r8
 8015d54:	f7ff ff0d 	bl	8015b72 <ed25519_hash_init>
        if (ret < 0)
 8015d58:	1e04      	subs	r4, r0, #0
 8015d5a:	dba2      	blt.n	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
        if (type == Ed25519ctx || type == Ed25519ph) {
 8015d5c:	f89d 3264 	ldrb.w	r3, [sp, #612]	; 0x264
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d84f      	bhi.n	8015e04 <wc_ed25519_sign_msg_ex+0x1bc>
    return wc_Sha512Update(sha, data, len);
 8015d64:	4935      	ldr	r1, [pc, #212]	; (8015e3c <wc_ed25519_sign_msg_ex+0x1f4>)
 8015d66:	2220      	movs	r2, #32
 8015d68:	a858      	add	r0, sp, #352	; 0x160
 8015d6a:	f7fc fc17 	bl	801259c <wc_Sha512Update>
            if (ret == 0)
 8015d6e:	4604      	mov	r4, r0
 8015d70:	b9c0      	cbnz	r0, 8015da4 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 8015d72:	2201      	movs	r2, #1
 8015d74:	a999      	add	r1, sp, #612	; 0x264
 8015d76:	a858      	add	r0, sp, #352	; 0x160
 8015d78:	f7fc fc10 	bl	801259c <wc_Sha512Update>
            if (ret == 0)
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	b988      	cbnz	r0, 8015da4 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 8015d80:	2201      	movs	r2, #1
 8015d82:	a99b      	add	r1, sp, #620	; 0x26c
 8015d84:	a858      	add	r0, sp, #352	; 0x160
 8015d86:	f7fc fc09 	bl	801259c <wc_Sha512Update>
            if (ret == 0 && context != NULL)
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	b950      	cbnz	r0, 8015da4 <wc_ed25519_sign_msg_ex+0x15c>
 8015d8e:	f1b9 0f00 	cmp.w	r9, #0
 8015d92:	d130      	bne.n	8015df6 <wc_ed25519_sign_msg_ex+0x1ae>
    return wc_Sha512Update(sha, data, len);
 8015d94:	2220      	movs	r2, #32
 8015d96:	4629      	mov	r1, r5
 8015d98:	a858      	add	r0, sp, #352	; 0x160
 8015d9a:	f7fc fbff 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015d9e:	4604      	mov	r4, r0
 8015da0:	2800      	cmp	r0, #0
 8015da2:	d032      	beq.n	8015e0a <wc_ed25519_sign_msg_ex+0x1c2>
    wc_Sha512Free(sha);
 8015da4:	a858      	add	r0, sp, #352	; 0x160
 8015da6:	f7fc fc6b 	bl	8012680 <wc_Sha512Free>
    if (ret != 0)
 8015daa:	2c00      	cmp	r4, #0
 8015dac:	f47f af79 	bne.w	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
    sc_reduce(hram);
 8015db0:	a810      	add	r0, sp, #64	; 0x40
 8015db2:	f002 f99f 	bl	80180f4 <sc_reduce>
    sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
 8015db6:	466b      	mov	r3, sp
 8015db8:	aa20      	add	r2, sp, #128	; 0x80
 8015dba:	a910      	add	r1, sp, #64	; 0x40
 8015dbc:	f105 0020 	add.w	r0, r5, #32
 8015dc0:	f002 ff94 	bl	8018cec <sc_muladd>
    return ret;
 8015dc4:	e76d      	b.n	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
    return wc_Sha512Update(sha, data, len);
 8015dc6:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 8015dca:	4649      	mov	r1, r9
 8015dcc:	a858      	add	r0, sp, #352	; 0x160
 8015dce:	f7fc fbe5 	bl	801259c <wc_Sha512Update>
 8015dd2:	4604      	mov	r4, r0
        if (ret == 0)
 8015dd4:	2c00      	cmp	r4, #0
 8015dd6:	d1ab      	bne.n	8015d30 <wc_ed25519_sign_msg_ex+0xe8>
 8015dd8:	e7a2      	b.n	8015d20 <wc_ed25519_sign_msg_ex+0xd8>
    return wc_Sha512Update(sha, data, len);
 8015dda:	463a      	mov	r2, r7
 8015ddc:	4631      	mov	r1, r6
 8015dde:	a858      	add	r0, sp, #352	; 0x160
 8015de0:	f7fc fbdc 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015de4:	4604      	mov	r4, r0
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d1a2      	bne.n	8015d30 <wc_ed25519_sign_msg_ex+0xe8>
    int ret = wc_Sha512Final(sha, hash);
 8015dea:	4669      	mov	r1, sp
 8015dec:	a858      	add	r0, sp, #352	; 0x160
 8015dee:	f7fc fbab 	bl	8012548 <wc_Sha512Final>
 8015df2:	4604      	mov	r4, r0
    return ret;
 8015df4:	e79c      	b.n	8015d30 <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 8015df6:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	a858      	add	r0, sp, #352	; 0x160
 8015dfe:	f7fc fbcd 	bl	801259c <wc_Sha512Update>
 8015e02:	4604      	mov	r4, r0
        if (ret == 0)
 8015e04:	2c00      	cmp	r4, #0
 8015e06:	d1cd      	bne.n	8015da4 <wc_ed25519_sign_msg_ex+0x15c>
 8015e08:	e7c4      	b.n	8015d94 <wc_ed25519_sign_msg_ex+0x14c>
    return wc_Sha512Update(sha, data, len);
 8015e0a:	2220      	movs	r2, #32
 8015e0c:	4641      	mov	r1, r8
 8015e0e:	a858      	add	r0, sp, #352	; 0x160
 8015e10:	f7fc fbc4 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015e14:	4604      	mov	r4, r0
 8015e16:	2800      	cmp	r0, #0
 8015e18:	d1c4      	bne.n	8015da4 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 8015e1a:	463a      	mov	r2, r7
 8015e1c:	4631      	mov	r1, r6
 8015e1e:	a858      	add	r0, sp, #352	; 0x160
 8015e20:	f7fc fbbc 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015e24:	4604      	mov	r4, r0
 8015e26:	2800      	cmp	r0, #0
 8015e28:	d1bc      	bne.n	8015da4 <wc_ed25519_sign_msg_ex+0x15c>
    int ret = wc_Sha512Final(sha, hash);
 8015e2a:	a910      	add	r1, sp, #64	; 0x40
 8015e2c:	a858      	add	r0, sp, #352	; 0x160
 8015e2e:	f7fc fb8b 	bl	8012548 <wc_Sha512Final>
 8015e32:	4604      	mov	r4, r0
    return ret;
 8015e34:	e7b6      	b.n	8015da4 <wc_ed25519_sign_msg_ex+0x15c>
        return BAD_FUNC_ARG;
 8015e36:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8015e3a:	e732      	b.n	8015ca2 <wc_ed25519_sign_msg_ex+0x5a>
 8015e3c:	08022db0 	.word	0x08022db0

08015e40 <wc_ed25519_sign_msg>:
    key    is the ed25519 key to use when signing
    return 0 on success
 */
int wc_ed25519_sign_msg(const byte* in, word32 inLen, byte* out,
                        word32 *outLen, ed25519_key* key)
{
 8015e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ed25519_sign_msg_ex(in, inLen, out, outLen, key, (byte)Ed25519,
 8015e42:	2400      	movs	r4, #0
 8015e44:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015e48:	24ff      	movs	r4, #255	; 0xff
 8015e4a:	9401      	str	r4, [sp, #4]
 8015e4c:	9c06      	ldr	r4, [sp, #24]
 8015e4e:	9400      	str	r4, [sp, #0]
 8015e50:	f7ff fefa 	bl	8015c48 <wc_ed25519_sign_msg_ex>
        NULL, 0);
}
 8015e54:	b004      	add	sp, #16
 8015e56:	bd10      	pop	{r4, pc}

08015e58 <wc_ed25519_verify_msg_ex>:
   return  0 and res of 1 on success
*/
int wc_ed25519_verify_msg_ex(const byte* sig, word32 sigLen, const byte* msg,
                              word32 msgLen, int* res, ed25519_key* key,
                              byte type, const byte* context, byte contextLen)
{
 8015e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e5c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8015e60:	469a      	mov	sl, r3
 8015e62:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
 8015e64:	f89d 8290 	ldrb.w	r8, [sp, #656]	; 0x290
 8015e68:	f8dd 9294 	ldr.w	r9, [sp, #660]	; 0x294
 8015e6c:	f89d 3298 	ldrb.w	r3, [sp, #664]	; 0x298
 8015e70:	468b      	mov	fp, r1
 8015e72:	4617      	mov	r7, r2
#else
    wc_Sha512 sha[1];
#endif

    /* sanity check on arguments */
    if (sig == NULL || msg == NULL || res == NULL || key == NULL ||
 8015e74:	4605      	mov	r5, r0
 8015e76:	2800      	cmp	r0, #0
 8015e78:	f000 80bf 	beq.w	8015ffa <wc_ed25519_verify_msg_ex+0x1a2>
 8015e7c:	2a00      	cmp	r2, #0
 8015e7e:	f000 80bc 	beq.w	8015ffa <wc_ed25519_verify_msg_ex+0x1a2>
 8015e82:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8015e84:	2a00      	cmp	r2, #0
 8015e86:	f000 80b8 	beq.w	8015ffa <wc_ed25519_verify_msg_ex+0x1a2>
 8015e8a:	2e00      	cmp	r6, #0
 8015e8c:	f000 80b5 	beq.w	8015ffa <wc_ed25519_verify_msg_ex+0x1a2>
 8015e90:	f1b9 0f00 	cmp.w	r9, #0
 8015e94:	d102      	bne.n	8015e9c <wc_ed25519_verify_msg_ex+0x44>
                                         (context == NULL && contextLen != 0))
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f040 80af 	bne.w	8015ffa <wc_ed25519_verify_msg_ex+0x1a2>
#endif

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    sha = &key->sha;
#else
    ret = ed25519_hash_init(key, sha);
 8015e9c:	a960      	add	r1, sp, #384	; 0x180
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	9301      	str	r3, [sp, #4]
 8015ea2:	f7ff fe66 	bl	8015b72 <ed25519_hash_init>
    if (ret < 0) {
 8015ea6:	1e04      	subs	r4, r0, #0
 8015ea8:	db6f      	blt.n	8015f8a <wc_ed25519_verify_msg_ex+0x132>
        return ret;
    }
#endif /* WOLFSSL_ED25519_PERSISTENT_SHA */

    ret = ed25519_verify_msg_init_with_sha(sig, sigLen, key, sha, type, context,
 8015eaa:	9b01      	ldr	r3, [sp, #4]
 8015eac:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
 8015eb0:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
    if (sig == NULL || key == NULL ||
 8015eb4:	f1b9 0f00 	cmp.w	r9, #0
 8015eb8:	d103      	bne.n	8015ec2 <wc_ed25519_verify_msg_ex+0x6a>
        (context == NULL && contextLen != 0)) {
 8015eba:	b113      	cbz	r3, 8015ec2 <wc_ed25519_verify_msg_ex+0x6a>
        return BAD_FUNC_ARG;
 8015ebc:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8015ec0:	e060      	b.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    if (sigLen != ED25519_SIG_SIZE || (sig[ED25519_SIG_SIZE-1] & 224))
 8015ec2:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8015ec6:	d1f9      	bne.n	8015ebc <wc_ed25519_verify_msg_ex+0x64>
 8015ec8:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8015ecc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8015ed0:	d1f4      	bne.n	8015ebc <wc_ed25519_verify_msg_ex+0x64>
    if (type == Ed25519ctx || type == Ed25519ph) {
 8015ed2:	f1b8 0f01 	cmp.w	r8, #1
 8015ed6:	d934      	bls.n	8015f42 <wc_ed25519_verify_msg_ex+0xea>
    return wc_Sha512Update(sha, data, len);
 8015ed8:	2220      	movs	r2, #32
 8015eda:	4629      	mov	r1, r5
 8015edc:	a860      	add	r0, sp, #384	; 0x180
 8015ede:	f7fc fb5d 	bl	801259c <wc_Sha512Update>
    if (ret == 0)
 8015ee2:	4604      	mov	r4, r0
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d14d      	bne.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8015ee8:	2220      	movs	r2, #32
 8015eea:	4631      	mov	r1, r6
 8015eec:	a860      	add	r0, sp, #384	; 0x180
 8015eee:	f7fc fb55 	bl	801259c <wc_Sha512Update>
        contextLen);
    if (ret == 0)
 8015ef2:	4604      	mov	r4, r0
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	d145      	bne.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8015ef8:	4652      	mov	r2, sl
 8015efa:	4639      	mov	r1, r7
 8015efc:	a860      	add	r0, sp, #384	; 0x180
 8015efe:	f7fc fb4d 	bl	801259c <wc_Sha512Update>
        ret = ed25519_verify_msg_update_with_sha(msg, msgLen, key, sha);
    if (ret == 0)
 8015f02:	4604      	mov	r4, r0
 8015f04:	2800      	cmp	r0, #0
 8015f06:	d13d      	bne.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    *res = 0;
 8015f08:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8015f0a:	6018      	str	r0, [r3, #0]
    if (sig[ED25519_SIG_SIZE-1] > 0x10)
 8015f0c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8015f10:	2b10      	cmp	r3, #16
 8015f12:	d8d3      	bhi.n	8015ebc <wc_ed25519_verify_msg_ex+0x64>
    if (sig[ED25519_SIG_SIZE-1] == 0x10) {
 8015f14:	d13e      	bne.n	8015f94 <wc_ed25519_verify_msg_ex+0x13c>
 8015f16:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8015f1a:	f105 0230 	add.w	r2, r5, #48	; 0x30
            if (sig[i] > 0x00)
 8015f1e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8015f22:	2900      	cmp	r1, #0
 8015f24:	d136      	bne.n	8015f94 <wc_ed25519_verify_msg_ex+0x13c>
        for (--i; i > ED25519_SIG_LOW_ORDER_IDX; i--) {
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d1f9      	bne.n	8015f1e <wc_ed25519_verify_msg_ex+0xc6>
 8015f2a:	4a35      	ldr	r2, [pc, #212]	; (8016000 <wc_ed25519_verify_msg_ex+0x1a8>)
 8015f2c:	232f      	movs	r3, #47	; 0x2f
                if (sig[i] < ed25519_low_order[j])
 8015f2e:	5ce8      	ldrb	r0, [r5, r3]
 8015f30:	f812 1b01 	ldrb.w	r1, [r2], #1
 8015f34:	4288      	cmp	r0, r1
 8015f36:	d32d      	bcc.n	8015f94 <wc_ed25519_verify_msg_ex+0x13c>
                if (sig[i] > ed25519_low_order[j])
 8015f38:	d8c0      	bhi.n	8015ebc <wc_ed25519_verify_msg_ex+0x64>
            for (j = 0; j < (int)sizeof(ed25519_low_order); j++, i--) {
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	2b1f      	cmp	r3, #31
 8015f3e:	d1f6      	bne.n	8015f2e <wc_ed25519_verify_msg_ex+0xd6>
 8015f40:	e7bc      	b.n	8015ebc <wc_ed25519_verify_msg_ex+0x64>
    return wc_Sha512Update(sha, data, len);
 8015f42:	4930      	ldr	r1, [pc, #192]	; (8016004 <wc_ed25519_verify_msg_ex+0x1ac>)
 8015f44:	2220      	movs	r2, #32
 8015f46:	a860      	add	r0, sp, #384	; 0x180
 8015f48:	f7fc fb28 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	b9c8      	cbnz	r0, 8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8015f50:	2201      	movs	r2, #1
 8015f52:	a91a      	add	r1, sp, #104	; 0x68
 8015f54:	a860      	add	r0, sp, #384	; 0x180
 8015f56:	f7fc fb21 	bl	801259c <wc_Sha512Update>
        if (ret == 0)
 8015f5a:	4604      	mov	r4, r0
 8015f5c:	b990      	cbnz	r0, 8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8015f5e:	2201      	movs	r2, #1
 8015f60:	a938      	add	r1, sp, #224	; 0xe0
 8015f62:	a860      	add	r0, sp, #384	; 0x180
 8015f64:	f7fc fb1a 	bl	801259c <wc_Sha512Update>
        if (ret == 0 && context != NULL)
 8015f68:	4604      	mov	r4, r0
 8015f6a:	b958      	cbnz	r0, 8015f84 <wc_ed25519_verify_msg_ex+0x12c>
 8015f6c:	f1b9 0f00 	cmp.w	r9, #0
 8015f70:	d0b2      	beq.n	8015ed8 <wc_ed25519_verify_msg_ex+0x80>
    return wc_Sha512Update(sha, data, len);
 8015f72:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
 8015f76:	4649      	mov	r1, r9
 8015f78:	a860      	add	r0, sp, #384	; 0x180
 8015f7a:	f7fc fb0f 	bl	801259c <wc_Sha512Update>
    if (ret == 0)
 8015f7e:	4604      	mov	r4, r0
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d0a9      	beq.n	8015ed8 <wc_ed25519_verify_msg_ex+0x80>
    wc_Sha512Free(sha);
 8015f84:	a860      	add	r0, sp, #384	; 0x180
 8015f86:	f7fc fb7b 	bl	8012680 <wc_Sha512Free>
#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    ed25519_hash_free(key, sha);
#endif
#endif /* WOLFSSL_SE050 */
    return ret;
}
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8015f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ge_frombytes_negate_vartime(&A, key->p) != 0)
 8015f94:	4631      	mov	r1, r6
 8015f96:	a838      	add	r0, sp, #224	; 0xe0
 8015f98:	f004 fb9e 	bl	801a6d8 <ge_frombytes_negate_vartime>
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d18d      	bne.n	8015ebc <wc_ed25519_verify_msg_ex+0x64>
    int ret = wc_Sha512Final(sha, hash);
 8015fa0:	a90a      	add	r1, sp, #40	; 0x28
 8015fa2:	a860      	add	r0, sp, #384	; 0x180
 8015fa4:	f7fc fad0 	bl	8012548 <wc_Sha512Final>
    if (ret != 0)
 8015fa8:	4604      	mov	r4, r0
 8015faa:	2800      	cmp	r0, #0
 8015fac:	d1ea      	bne.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    sc_reduce(h);
 8015fae:	a80a      	add	r0, sp, #40	; 0x28
 8015fb0:	f002 f8a0 	bl	80180f4 <sc_reduce>
    ret = ge_double_scalarmult_vartime(&R, h, &A, sig + (ED25519_SIG_SIZE/2));
 8015fb4:	f105 0320 	add.w	r3, r5, #32
 8015fb8:	aa38      	add	r2, sp, #224	; 0xe0
 8015fba:	a90a      	add	r1, sp, #40	; 0x28
 8015fbc:	a81a      	add	r0, sp, #104	; 0x68
 8015fbe:	f004 f997 	bl	801a2f0 <ge_double_scalarmult_vartime>
    if (ret != 0)
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d1dd      	bne.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
    ge_tobytes(rcheck, &R);
 8015fc8:	a91a      	add	r1, sp, #104	; 0x68
 8015fca:	a802      	add	r0, sp, #8
 8015fcc:	f004 fc06 	bl	801a7dc <ge_tobytes>
    for (i = 0; i < length; i++) {
 8015fd0:	1e6a      	subs	r2, r5, #1
 8015fd2:	ab02      	add	r3, sp, #8
 8015fd4:	351f      	adds	r5, #31
        compareSum |= a[i] ^ b[i];
 8015fd6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015fda:	f813 1b01 	ldrb.w	r1, [r3], #1
    for (i = 0; i < length; i++) {
 8015fde:	4295      	cmp	r5, r2
        compareSum |= a[i] ^ b[i];
 8015fe0:	ea81 0100 	eor.w	r1, r1, r0
 8015fe4:	ea44 0401 	orr.w	r4, r4, r1
    for (i = 0; i < length; i++) {
 8015fe8:	d1f5      	bne.n	8015fd6 <wc_ed25519_verify_msg_ex+0x17e>
    if (ret != 0) {
 8015fea:	b91c      	cbnz	r4, 8015ff4 <wc_ed25519_verify_msg_ex+0x19c>
        *res = 1;
 8015fec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8015fee:	2301      	movs	r3, #1
 8015ff0:	6013      	str	r3, [r2, #0]
 8015ff2:	e7c7      	b.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
        ret = SIG_VERIFY_E;
 8015ff4:	f06f 04e4 	mvn.w	r4, #228	; 0xe4
 8015ff8:	e7c4      	b.n	8015f84 <wc_ed25519_verify_msg_ex+0x12c>
        return BAD_FUNC_ARG;
 8015ffa:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8015ffe:	e7c4      	b.n	8015f8a <wc_ed25519_verify_msg_ex+0x132>
 8016000:	08022dd1 	.word	0x08022dd1
 8016004:	08022db0 	.word	0x08022db0

08016008 <wc_ed25519_verify_msg>:
   key     Ed25519 public key
   return  0 and res of 1 on success
*/
int wc_ed25519_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
                          word32 msgLen, int* res, ed25519_key* key)
{
 8016008:	b510      	push	{r4, lr}
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 801600a:	2400      	movs	r4, #0
{
 801600c:	b086      	sub	sp, #24
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 801600e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8016012:	24ff      	movs	r4, #255	; 0xff
 8016014:	9402      	str	r4, [sp, #8]
 8016016:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016018:	9401      	str	r4, [sp, #4]
 801601a:	9c08      	ldr	r4, [sp, #32]
 801601c:	9400      	str	r4, [sp, #0]
 801601e:	f7ff ff1b 	bl	8015e58 <wc_ed25519_verify_msg_ex>
                                    (byte)Ed25519, NULL, 0);
}
 8016022:	b006      	add	sp, #24
 8016024:	bd10      	pop	{r4, pc}

08016026 <wc_ed25519_init_ex>:
#endif /* HAVE_ED25519_VERIFY */


/* initialize information and memory for key */
int wc_ed25519_init_ex(ed25519_key* key, void* heap, int devId)
{
 8016026:	b538      	push	{r3, r4, r5, lr}
 8016028:	460d      	mov	r5, r1
    if (key == NULL)
 801602a:	4604      	mov	r4, r0
 801602c:	b140      	cbz	r0, 8016040 <wc_ed25519_init_ex+0x1a>
        return BAD_FUNC_ARG;

    /* for init, ensure the key is zeroed*/
    XMEMSET(key, 0, sizeof(ed25519_key));
 801602e:	2268      	movs	r2, #104	; 0x68
 8016030:	2100      	movs	r1, #0
 8016032:	f007 fcdf 	bl	801d9f4 <memset>
#ifdef WOLF_CRYPTO_CB
    key->devId = devId;
#else
    (void)devId;
#endif
    key->heap = heap;
 8016036:	6665      	str	r5, [r4, #100]	; 0x64

#ifndef FREESCALE_LTC_ECC
    fe_init();
 8016038:	f000 f90e 	bl	8016258 <fe_init>
#endif

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    return ed25519_hash_init(key, &key->sha);
#else /* !WOLFSSL_ED25519_PERSISTENT_SHA */
    return 0;
 801603c:	2000      	movs	r0, #0
#endif /* WOLFSSL_ED25519_PERSISTENT_SHA */
}
 801603e:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 8016040:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8016044:	e7fb      	b.n	801603e <wc_ed25519_init_ex+0x18>

08016046 <wc_ed25519_free>:
}

/* clear memory of key */
void wc_ed25519_free(ed25519_key* key)
{
    if (key == NULL)
 8016046:	b120      	cbz	r0, 8016052 <wc_ed25519_free+0xc>
 8016048:	f100 0368 	add.w	r3, r0, #104	; 0x68
    while (len--) *z++ = 0;
 801604c:	2200      	movs	r2, #0
 801604e:	4298      	cmp	r0, r3
 8016050:	d100      	bne.n	8016054 <wc_ed25519_free+0xe>

    ForceZero(key, sizeof(ed25519_key));
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(ed25519_key));
#endif
}
 8016052:	4770      	bx	lr
 8016054:	f800 2b01 	strb.w	r2, [r0], #1
 8016058:	e7f9      	b.n	801604e <wc_ed25519_free+0x8>

0801605a <wc_ed25519_check_key>:

#endif /* HAVE_ED25519_KEY_EXPORT */

/* check the private and public keys match */
int wc_ed25519_check_key(ed25519_key* key)
{
 801605a:	b510      	push	{r4, lr}
    int ret = 0;
#ifdef HAVE_ED25519_MAKE_KEY
    ALIGN16 unsigned char pubKey[ED25519_PUB_KEY_SIZE];

    if (!key->pubKeySet)
 801605c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8016060:	079b      	lsls	r3, r3, #30
{
 8016062:	b088      	sub	sp, #32
 8016064:	4604      	mov	r4, r0
    if (!key->pubKeySet)
 8016066:	d50a      	bpl.n	801607e <wc_ed25519_check_key+0x24>
        ret = PUBLIC_KEY_E;
    if (ret == 0)
        ret = wc_ed25519_make_public(key, pubKey, sizeof(pubKey));
 8016068:	2220      	movs	r2, #32
 801606a:	4669      	mov	r1, sp
 801606c:	f7ff fdb3 	bl	8015bd6 <wc_ed25519_make_public>
    if (ret == 0 && XMEMCMP(pubKey, key->p, ED25519_PUB_KEY_SIZE) != 0)
 8016070:	b938      	cbnz	r0, 8016082 <wc_ed25519_check_key+0x28>
 8016072:	2220      	movs	r2, #32
 8016074:	4621      	mov	r1, r4
 8016076:	4668      	mov	r0, sp
 8016078:	f007 fc84 	bl	801d984 <memcmp>
 801607c:	b108      	cbz	r0, 8016082 <wc_ed25519_check_key+0x28>
        ret = PUBLIC_KEY_E;
 801607e:	f06f 0085 	mvn.w	r0, #133	; 0x85
#else
     (void)key;
#endif /* HAVE_ED25519_MAKE_KEY */

    return ret;
}
 8016082:	b008      	add	sp, #32
 8016084:	bd10      	pop	{r4, pc}

08016086 <wc_ed25519_import_public_ex>:
{
 8016086:	b570      	push	{r4, r5, r6, lr}
 8016088:	460d      	mov	r5, r1
 801608a:	4614      	mov	r4, r2
 801608c:	461e      	mov	r6, r3
    if (in == NULL || key == NULL)
 801608e:	4601      	mov	r1, r0
 8016090:	2800      	cmp	r0, #0
 8016092:	d03a      	beq.n	801610a <wc_ed25519_import_public_ex+0x84>
 8016094:	2a00      	cmp	r2, #0
 8016096:	d038      	beq.n	801610a <wc_ed25519_import_public_ex+0x84>
    if (inLen < ED25519_PUB_KEY_SIZE)
 8016098:	2d1f      	cmp	r5, #31
 801609a:	d936      	bls.n	801610a <wc_ed25519_import_public_ex+0x84>
    if (in[0] == 0x40 && inLen == ED25519_PUB_KEY_SIZE + 1) {
 801609c:	7803      	ldrb	r3, [r0, #0]
 801609e:	2b40      	cmp	r3, #64	; 0x40
 80160a0:	d110      	bne.n	80160c4 <wc_ed25519_import_public_ex+0x3e>
 80160a2:	2d21      	cmp	r5, #33	; 0x21
 80160a4:	d122      	bne.n	80160ec <wc_ed25519_import_public_ex+0x66>
        XMEMCPY(key->p, (in + 1), ED25519_PUB_KEY_SIZE);
 80160a6:	2220      	movs	r2, #32
 80160a8:	3101      	adds	r1, #1
        XMEMCPY(key->p, in, ED25519_PUB_KEY_SIZE);
 80160aa:	4620      	mov	r0, r4
 80160ac:	f007 fc7a 	bl	801d9a4 <memcpy>
        key->pubKeySet = 1;
 80160b0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 80160b4:	f042 0202 	orr.w	r2, r2, #2
        if (key->privKeySet && (!trusted)) {
 80160b8:	07d3      	lsls	r3, r2, #31
        key->pubKeySet = 1;
 80160ba:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
        if (key->privKeySet && (!trusted)) {
 80160be:	d419      	bmi.n	80160f4 <wc_ed25519_import_public_ex+0x6e>
        return BAD_FUNC_ARG;
 80160c0:	2000      	movs	r0, #0
}
 80160c2:	bd70      	pop	{r4, r5, r6, pc}
    else if (in[0] == 0x04 && inLen > 2*ED25519_PUB_KEY_SIZE) {
 80160c4:	2b04      	cmp	r3, #4
 80160c6:	d111      	bne.n	80160ec <wc_ed25519_import_public_ex+0x66>
 80160c8:	2d40      	cmp	r5, #64	; 0x40
 80160ca:	d90f      	bls.n	80160ec <wc_ed25519_import_public_ex+0x66>
        ret = ge_compress_key(key->p, in+1,
 80160cc:	f100 0221 	add.w	r2, r0, #33	; 0x21
 80160d0:	2320      	movs	r3, #32
 80160d2:	3101      	adds	r1, #1
 80160d4:	4620      	mov	r0, r4
 80160d6:	f004 fba1 	bl	801a81c <ge_compress_key>
    if (ret == 0) {
 80160da:	2800      	cmp	r0, #0
 80160dc:	d0e8      	beq.n	80160b0 <wc_ed25519_import_public_ex+0x2a>
        key->pubKeySet = 0;
 80160de:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80160e2:	f36f 0341 	bfc	r3, #1, #1
 80160e6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80160ea:	e7ea      	b.n	80160c2 <wc_ed25519_import_public_ex+0x3c>
    else if (inLen == ED25519_PUB_KEY_SIZE) {
 80160ec:	2d20      	cmp	r5, #32
 80160ee:	d109      	bne.n	8016104 <wc_ed25519_import_public_ex+0x7e>
        XMEMCPY(key->p, in, ED25519_PUB_KEY_SIZE);
 80160f0:	462a      	mov	r2, r5
 80160f2:	e7da      	b.n	80160aa <wc_ed25519_import_public_ex+0x24>
        if (key->privKeySet && (!trusted)) {
 80160f4:	2e00      	cmp	r6, #0
 80160f6:	d1e3      	bne.n	80160c0 <wc_ed25519_import_public_ex+0x3a>
            ret = wc_ed25519_check_key(key);
 80160f8:	4620      	mov	r0, r4
 80160fa:	f7ff ffae 	bl	801605a <wc_ed25519_check_key>
    if (ret != 0) {
 80160fe:	2800      	cmp	r0, #0
 8016100:	d0de      	beq.n	80160c0 <wc_ed25519_import_public_ex+0x3a>
 8016102:	e7ec      	b.n	80160de <wc_ed25519_import_public_ex+0x58>
        ret = BAD_FUNC_ARG;
 8016104:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8016108:	e7e9      	b.n	80160de <wc_ed25519_import_public_ex+0x58>
        return BAD_FUNC_ARG;
 801610a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801610e:	e7d8      	b.n	80160c2 <wc_ed25519_import_public_ex+0x3c>

08016110 <wc_ed25519_import_public>:
    return wc_ed25519_import_public_ex(in, inLen, key, 0);
 8016110:	2300      	movs	r3, #0
 8016112:	f7ff bfb8 	b.w	8016086 <wc_ed25519_import_public_ex>

08016116 <wc_ed25519_import_private_key_ex>:
{
 8016116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801611a:	9d06      	ldr	r5, [sp, #24]
 801611c:	460c      	mov	r4, r1
 801611e:	4690      	mov	r8, r2
 8016120:	461f      	mov	r7, r3
    if (priv == NULL || key == NULL)
 8016122:	4601      	mov	r1, r0
 8016124:	b388      	cbz	r0, 801618a <wc_ed25519_import_private_key_ex+0x74>
 8016126:	b385      	cbz	r5, 801618a <wc_ed25519_import_private_key_ex+0x74>
    if (privSz != ED25519_KEY_SIZE && privSz != ED25519_PRV_KEY_SIZE)
 8016128:	2c20      	cmp	r4, #32
 801612a:	d001      	beq.n	8016130 <wc_ed25519_import_private_key_ex+0x1a>
 801612c:	2c40      	cmp	r4, #64	; 0x40
 801612e:	d12c      	bne.n	801618a <wc_ed25519_import_private_key_ex+0x74>
    if (pub == NULL) {
 8016130:	f1b8 0f00 	cmp.w	r8, #0
 8016134:	d127      	bne.n	8016186 <wc_ed25519_import_private_key_ex+0x70>
        if (pubSz != 0)
 8016136:	bb47      	cbnz	r7, 801618a <wc_ed25519_import_private_key_ex+0x74>
        if (privSz != ED25519_PRV_KEY_SIZE)
 8016138:	2c40      	cmp	r4, #64	; 0x40
 801613a:	d126      	bne.n	801618a <wc_ed25519_import_private_key_ex+0x74>
        pub = priv + ED25519_KEY_SIZE;
 801613c:	f101 0820 	add.w	r8, r1, #32
        pubSz = ED25519_PUB_KEY_SIZE;
 8016140:	2720      	movs	r7, #32
    XMEMCPY(key->k, priv, ED25519_KEY_SIZE);
 8016142:	f105 0620 	add.w	r6, r5, #32
 8016146:	2220      	movs	r2, #32
 8016148:	4630      	mov	r0, r6
 801614a:	f007 fc2b 	bl	801d9a4 <memcpy>
    key->privKeySet = 1;
 801614e:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8016152:	f043 0301 	orr.w	r3, r3, #1
 8016156:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    ret = wc_ed25519_import_public_ex(pub, pubSz, key, trusted);
 801615a:	462a      	mov	r2, r5
 801615c:	9b07      	ldr	r3, [sp, #28]
 801615e:	4639      	mov	r1, r7
 8016160:	4640      	mov	r0, r8
 8016162:	f7ff ff90 	bl	8016086 <wc_ed25519_import_public_ex>
    if (ret != 0) {
 8016166:	4604      	mov	r4, r0
 8016168:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801616c:	b19c      	cbz	r4, 8016196 <wc_ed25519_import_private_key_ex+0x80>
        key->privKeySet = 0;
 801616e:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8016172:	f36f 0300 	bfc	r3, #0, #1
 8016176:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 801617a:	2300      	movs	r3, #0
 801617c:	4286      	cmp	r6, r0
 801617e:	d107      	bne.n	8016190 <wc_ed25519_import_private_key_ex+0x7a>
}
 8016180:	4620      	mov	r0, r4
 8016182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (pubSz < ED25519_PUB_KEY_SIZE) {
 8016186:	2f1f      	cmp	r7, #31
 8016188:	d8db      	bhi.n	8016142 <wc_ed25519_import_private_key_ex+0x2c>
        return BAD_FUNC_ARG;
 801618a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 801618e:	e7f7      	b.n	8016180 <wc_ed25519_import_private_key_ex+0x6a>
 8016190:	f806 3b01 	strb.w	r3, [r6], #1
 8016194:	e7f2      	b.n	801617c <wc_ed25519_import_private_key_ex+0x66>
    XMEMCPY(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);
 8016196:	2220      	movs	r2, #32
 8016198:	4629      	mov	r1, r5
 801619a:	f007 fc03 	bl	801d9a4 <memcpy>
    return ret;
 801619e:	e7ef      	b.n	8016180 <wc_ed25519_import_private_key_ex+0x6a>

080161a0 <wc_ed25519_import_private_key>:
{
 80161a0:	b513      	push	{r0, r1, r4, lr}
    return wc_ed25519_import_private_key_ex(priv, privSz, pub, pubSz, key, 0);
 80161a2:	2400      	movs	r4, #0
 80161a4:	9401      	str	r4, [sp, #4]
 80161a6:	9c04      	ldr	r4, [sp, #16]
 80161a8:	9400      	str	r4, [sp, #0]
 80161aa:	f7ff ffb4 	bl	8016116 <wc_ed25519_import_private_key_ex>
}
 80161ae:	b002      	add	sp, #8
 80161b0:	bd10      	pop	{r4, pc}

080161b2 <wc_ed25519_import_private_only>:
{
 80161b2:	b538      	push	{r3, r4, r5, lr}
 80161b4:	460b      	mov	r3, r1
 80161b6:	4614      	mov	r4, r2
    if (priv == NULL || key == NULL)
 80161b8:	4601      	mov	r1, r0
 80161ba:	b320      	cbz	r0, 8016206 <wc_ed25519_import_private_only+0x54>
 80161bc:	b31a      	cbz	r2, 8016206 <wc_ed25519_import_private_only+0x54>
    if (privSz != ED25519_KEY_SIZE)
 80161be:	2b20      	cmp	r3, #32
 80161c0:	d121      	bne.n	8016206 <wc_ed25519_import_private_only+0x54>
    XMEMCPY(key->k, priv, ED25519_KEY_SIZE);
 80161c2:	f102 0520 	add.w	r5, r2, #32
 80161c6:	4628      	mov	r0, r5
 80161c8:	461a      	mov	r2, r3
 80161ca:	f007 fbeb 	bl	801d9a4 <memcpy>
    key->privKeySet = 1;
 80161ce:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80161d2:	f043 0301 	orr.w	r3, r3, #1
 80161d6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (key->pubKeySet) {
 80161da:	079b      	lsls	r3, r3, #30
 80161dc:	d401      	bmi.n	80161e2 <wc_ed25519_import_private_only+0x30>
    int ret = 0;
 80161de:	2000      	movs	r0, #0
}
 80161e0:	bd38      	pop	{r3, r4, r5, pc}
        ret = wc_ed25519_check_key(key);
 80161e2:	4620      	mov	r0, r4
 80161e4:	f7ff ff39 	bl	801605a <wc_ed25519_check_key>
    if (ret != 0) {
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d0f8      	beq.n	80161de <wc_ed25519_import_private_only+0x2c>
        key->privKeySet = 0;
 80161ec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80161f0:	f36f 0300 	bfc	r3, #0, #1
 80161f4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80161f8:	3440      	adds	r4, #64	; 0x40
 80161fa:	2300      	movs	r3, #0
 80161fc:	42a5      	cmp	r5, r4
 80161fe:	d0ef      	beq.n	80161e0 <wc_ed25519_import_private_only+0x2e>
 8016200:	f805 3b01 	strb.w	r3, [r5], #1
 8016204:	e7fa      	b.n	80161fc <wc_ed25519_import_private_only+0x4a>
        return BAD_FUNC_ARG;
 8016206:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801620a:	e7e9      	b.n	80161e0 <wc_ed25519_import_private_only+0x2e>

0801620c <load_3>:
word64 load_3(const unsigned char *in)
{
  word64 result;
  result = (word64) in[0];
  result |= ((word64) in[1]) << 8;
  result |= ((word64) in[2]) << 16;
 801620c:	7883      	ldrb	r3, [r0, #2]
  result |= ((word64) in[1]) << 8;
 801620e:	7841      	ldrb	r1, [r0, #1]
  result = (word64) in[0];
 8016210:	7802      	ldrb	r2, [r0, #0]
  result |= ((word64) in[2]) << 16;
 8016212:	041b      	lsls	r3, r3, #16
 8016214:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  return result;
}
 8016218:	ea43 0002 	orr.w	r0, r3, r2
 801621c:	2100      	movs	r1, #0
 801621e:	4770      	bx	lr

08016220 <load_4>:
  result = (word64) in[0];
  result |= ((word64) in[1]) << 8;
  result |= ((word64) in[2]) << 16;
  result |= ((word64) in[3]) << 24;
  return result;
}
 8016220:	6800      	ldr	r0, [r0, #0]
 8016222:	2100      	movs	r1, #0
 8016224:	4770      	bx	lr

08016226 <fe_1>:
*/

void fe_1(fe h)
{
  h[0] = 1;
  h[1] = 0;
 8016226:	2300      	movs	r3, #0
 8016228:	2201      	movs	r2, #1
 801622a:	e9c0 2300 	strd	r2, r3, [r0]
  h[2] = 0;
  h[3] = 0;
 801622e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  h[4] = 0;
  h[5] = 0;
 8016232:	e9c0 3304 	strd	r3, r3, [r0, #16]
  h[6] = 0;
  h[7] = 0;
 8016236:	e9c0 3306 	strd	r3, r3, [r0, #24]
  h[8] = 0;
  h[9] = 0;
 801623a:	e9c0 3308 	strd	r3, r3, [r0, #32]
}
 801623e:	4770      	bx	lr

08016240 <fe_0>:
h = 0
*/

void fe_0(fe h)
{
  h[0] = 0;
 8016240:	2300      	movs	r3, #0
  h[1] = 0;
 8016242:	e9c0 3300 	strd	r3, r3, [r0]
  h[2] = 0;
  h[3] = 0;
 8016246:	e9c0 3302 	strd	r3, r3, [r0, #8]
  h[4] = 0;
  h[5] = 0;
 801624a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  h[6] = 0;
  h[7] = 0;
 801624e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  h[8] = 0;
  h[9] = 0;
 8016252:	e9c0 3308 	strd	r3, r3, [r0, #32]
}
 8016256:	4770      	bx	lr

08016258 <fe_init>:
     (defined(HAVE_ED25519) && !defined(ED25519_SMALL))) && \
    !defined(FREESCALE_LTC_ECC)
/* to be Complementary to fe_low_mem.c */
void fe_init(void)
{
}
 8016258:	4770      	bx	lr

0801625a <fe_sq>:
/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h,const fe f)
{
 801625a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625e:	460b      	mov	r3, r1
  sword32 f0 = f[0];
  sword32 f1 = f[1];
 8016260:	e9d1 5200 	ldrd	r5, r2, [r1]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 8016264:	e9d1 c102 	ldrd	ip, r1, [r1, #8]
{
 8016268:	b097      	sub	sp, #92	; 0x5c
  sword32 f5_2 = 2 * f5;
  sword32 f6_2 = 2 * f6;
  sword32 f7_2 = 2 * f7;
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 801626a:	f04f 0926 	mov.w	r9, #38	; 0x26
  sword32 f3 = f[3];
 801626e:	9107      	str	r1, [sp, #28]
  sword32 f5 = f[5];
 8016270:	e9d3 e104 	ldrd	lr, r1, [r3, #16]
 8016274:	9101      	str	r1, [sp, #4]
  sword32 f7 = f[7];
 8016276:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
 801627a:	9103      	str	r1, [sp, #12]
  sword32 f8 = f[8];
 801627c:	6a19      	ldr	r1, [r3, #32]
  sword32 f9 = f[9];
 801627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016280:	9308      	str	r3, [sp, #32]
  sword32 f2_2 = 2 * f2;
 8016282:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8016286:	9305      	str	r3, [sp, #20]
  sword32 f3_2 = 2 * f3;
 8016288:	9b07      	ldr	r3, [sp, #28]
  sword32 f8 = f[8];
 801628a:	9104      	str	r1, [sp, #16]
  sword32 f3_2 = 2 * f3;
 801628c:	ea4f 0b43 	mov.w	fp, r3, lsl #1
  sword32 f4_2 = 2 * f4;
 8016290:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8016294:	930b      	str	r3, [sp, #44]	; 0x2c
  sword32 f5_2 = 2 * f5;
 8016296:	9b01      	ldr	r3, [sp, #4]
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 8016298:	9903      	ldr	r1, [sp, #12]
{
 801629a:	9000      	str	r0, [sp, #0]
  sword32 f5_2 = 2 * f5;
 801629c:	005b      	lsls	r3, r3, #1
 801629e:	9302      	str	r3, [sp, #8]
  sword32 f7_2 = 2 * f7;
 80162a0:	9b03      	ldr	r3, [sp, #12]
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 80162a2:	9808      	ldr	r0, [sp, #32]
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 80162a4:	9e01      	ldr	r6, [sp, #4]
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 80162a6:	fb09 f101 	mul.w	r1, r9, r1
 80162aa:	9106      	str	r1, [sp, #24]
  sword32 f7_2 = 2 * f7;
 80162ac:	005b      	lsls	r3, r3, #1
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 80162ae:	9904      	ldr	r1, [sp, #16]
  sword32 f7_2 = 2 * f7;
 80162b0:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 f1_2 = 2 * f1;
 80162b2:	ea4f 0842 	mov.w	r8, r2, lsl #1
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 80162b6:	fb09 f000 	mul.w	r0, r9, r0
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 80162ba:	2313      	movs	r3, #19
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 80162bc:	4359      	muls	r1, r3
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 80162be:	fb03 fa04 	mul.w	sl, r3, r4
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 80162c2:	fb09 f906 	mul.w	r9, r9, r6
  sword64 f1f4_2  = f1_2 * (sword64) f4;
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
  sword64 f1f6_2  = f1_2 * (sword64) f6;
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
  sword64 f1f8_2  = f1_2 * (sword64) f8;
  sword64 f1f9_76 = f1_2 * (sword64) f9_38;
 80162c6:	fb88 3600 	smull	r3, r6, r8, r0
  sword32 f0_2 = 2 * f0;
 80162ca:	006f      	lsls	r7, r5, #1
  sword64 f7f8_38 = f7_2 * (sword64) f8_19;
  sword64 f7f9_76 = f7_2 * (sword64) f9_38;
  sword64 f8f8_19 = f8   * (sword64) f8_19;
  sword64 f8f9_38 = f8   * (sword64) f9_38;
  sword64 f9f9_38 = f9   * (sword64) f9_38;
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 80162cc:	fbc5 3605 	smlal	r3, r6, r5, r5
 80162d0:	ea4f 054c 	mov.w	r5, ip, lsl #1
 80162d4:	fbc5 3601 	smlal	r3, r6, r5, r1
 80162d8:	9d06      	ldr	r5, [sp, #24]
 80162da:	fbcb 3605 	smlal	r3, r6, fp, r5
 80162de:	ea4f 054e 	mov.w	r5, lr, lsl #1
 80162e2:	fbc5 360a 	smlal	r3, r6, r5, sl
 80162e6:	461d      	mov	r5, r3
 80162e8:	9b01      	ldr	r3, [sp, #4]
 80162ea:	fbc3 5609 	smlal	r5, r6, r3, r9
 80162ee:	950a      	str	r5, [sp, #40]	; 0x28
  sword64 f2f9_38 = f2   * (sword64) f9_38;
 80162f0:	fb8c 5900 	smull	r5, r9, ip, r0
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
 80162f4:	9b06      	ldr	r3, [sp, #24]
 80162f6:	fbc7 5902 	smlal	r5, r9, r7, r2
 80162fa:	fbcb 5901 	smlal	r5, r9, fp, r1
 80162fe:	fbce 5903 	smlal	r5, r9, lr, r3
 8016302:	9b02      	ldr	r3, [sp, #8]
 8016304:	fbc3 590a 	smlal	r5, r9, r3, sl
 8016308:	e9cd 590c 	strd	r5, r9, [sp, #48]	; 0x30
  sword64 f1f1_2  = f1_2 * (sword64) f1;
 801630c:	fb82 5308 	smull	r5, r3, r2, r8
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 8016310:	fbc7 530c 	smlal	r5, r3, r7, ip
 8016314:	fbcb 5300 	smlal	r5, r3, fp, r0
 8016318:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801631c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016320:	fbc1 5302 	smlal	r5, r3, r1, r2
 8016324:	9a02      	ldr	r2, [sp, #8]
 8016326:	fbc2 5309 	smlal	r5, r3, r2, r9
 801632a:	461a      	mov	r2, r3
 801632c:	fbc4 520a 	smlal	r5, r2, r4, sl
 8016330:	e9cd 520e 	strd	r5, r2, [sp, #56]	; 0x38
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 8016334:	9a07      	ldr	r2, [sp, #28]
  sword64 f1f2_2  = f1_2 * (sword64) f2;
 8016336:	fb8c 5308 	smull	r5, r3, ip, r8
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 801633a:	fbc7 5302 	smlal	r5, r3, r7, r2
 801633e:	9a02      	ldr	r2, [sp, #8]
 8016340:	fbce 5300 	smlal	r5, r3, lr, r0
 8016344:	fbc2 5301 	smlal	r5, r3, r2, r1
 8016348:	461a      	mov	r2, r3
 801634a:	fbc4 5209 	smlal	r5, r2, r4, r9
 801634e:	e9cd 5210 	strd	r5, r2, [sp, #64]	; 0x40
  sword64 f1f3_4  = f1_2 * (sword64) f3_2;
 8016352:	fb88 2a0b 	smull	r2, sl, r8, fp
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8016356:	fbc7 2a0e 	smlal	r2, sl, r7, lr
 801635a:	fbcc 2a0c 	smlal	r2, sl, ip, ip
 801635e:	f8dd c008 	ldr.w	ip, [sp, #8]
  sword32 f6_2 = 2 * f6;
 8016362:	0065      	lsls	r5, r4, #1
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8016364:	fbcc 2a00 	smlal	r2, sl, ip, r0
 8016368:	fbc1 2a05 	smlal	r2, sl, r1, r5
 801636c:	9d03      	ldr	r5, [sp, #12]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 801636e:	f8dd c014 	ldr.w	ip, [sp, #20]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8016372:	fbc5 2a09 	smlal	r2, sl, r5, r9
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 8016376:	9d01      	ldr	r5, [sp, #4]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8016378:	9206      	str	r2, [sp, #24]
  sword64 f1f4_2  = f1_2 * (sword64) f4;
 801637a:	fb8e 3208 	smull	r3, r2, lr, r8
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 801637e:	fbc7 3205 	smlal	r3, r2, r7, r5
 8016382:	9d07      	ldr	r5, [sp, #28]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 8016384:	f8dd 9010 	ldr.w	r9, [sp, #16]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 8016388:	fbc5 320c 	smlal	r3, r2, r5, ip
 801638c:	fbc4 3200 	smlal	r3, r2, r4, r0
 8016390:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8016394:	461d      	mov	r5, r3
 8016396:	fbcc 5201 	smlal	r5, r2, ip, r1
 801639a:	9512      	str	r5, [sp, #72]	; 0x48
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 801639c:	9d02      	ldr	r5, [sp, #8]
 801639e:	fb88 3c05 	smull	r3, ip, r8, r5
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80163a2:	9d05      	ldr	r5, [sp, #20]
 80163a4:	fbc7 3c04 	smlal	r3, ip, r7, r4
 80163a8:	fbce 3c05 	smlal	r3, ip, lr, r5
 80163ac:	9d07      	ldr	r5, [sp, #28]
 80163ae:	fbc5 3c0b 	smlal	r3, ip, r5, fp
 80163b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80163b4:	fbc5 3c00 	smlal	r3, ip, r5, r0
 80163b8:	461d      	mov	r5, r3
 80163ba:	fbc9 5c01 	smlal	r5, ip, r9, r1
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 80163be:	9903      	ldr	r1, [sp, #12]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80163c0:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 80163c4:	fb84 3c08 	smull	r3, ip, r4, r8
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80163c8:	9507      	str	r5, [sp, #28]
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 80163ca:	fbc7 3c01 	smlal	r3, ip, r7, r1
 80163ce:	9d05      	ldr	r5, [sp, #20]
 80163d0:	9901      	ldr	r1, [sp, #4]
 80163d2:	fbc1 3c05 	smlal	r3, ip, r1, r5
 80163d6:	fbce 3c0b 	smlal	r3, ip, lr, fp
 80163da:	4619      	mov	r1, r3
 80163dc:	fbc9 1c00 	smlal	r1, ip, r9, r0
 80163e0:	e9cd 1c14 	strd	r1, ip, [sp, #80]	; 0x50
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 80163e4:	9909      	ldr	r1, [sp, #36]	; 0x24
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80163e6:	9d05      	ldr	r5, [sp, #20]
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80163e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 80163ea:	fb88 1c01 	smull	r1, ip, r8, r1
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80163ee:	fbc7 1c09 	smlal	r1, ip, r7, r9
 80163f2:	fbc4 1c05 	smlal	r1, ip, r4, r5
 80163f6:	9d02      	ldr	r5, [sp, #8]
 80163f8:	fbcb 1c05 	smlal	r1, ip, fp, r5
 80163fc:	9d08      	ldr	r5, [sp, #32]
 80163fe:	fbce 1c0e 	smlal	r1, ip, lr, lr
 8016402:	fbc5 1c00 	smlal	r1, ip, r5, r0
 8016406:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 801640a:	fb89 0c08 	smull	r0, ip, r9, r8
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 801640e:	468e      	mov	lr, r1
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 8016410:	fbc7 0c05 	smlal	r0, ip, r7, r5
 8016414:	9903      	ldr	r1, [sp, #12]
 8016416:	9d05      	ldr	r5, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8016418:	9f07      	ldr	r7, [sp, #28]
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 801641a:	fbc1 0c05 	smlal	r0, ip, r1, r5
 801641e:	fbc4 0c0b 	smlal	r0, ip, r4, fp
 8016422:	9901      	ldr	r1, [sp, #4]
 8016424:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016426:	fbc1 0c04 	smlal	r0, ip, r1, r4
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801642a:	990a      	ldr	r1, [sp, #40]	; 0x28
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 801642c:	9008      	str	r0, [sp, #32]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801642e:	f111 7b00 	adds.w	fp, r1, #33554432	; 0x2000000
 8016432:	f146 0500 	adc.w	r5, r6, #0
 8016436:	990c      	ldr	r1, [sp, #48]	; 0x30
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 8016438:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801643c:	ea4f 689b 	mov.w	r8, fp, lsr #26
 8016440:	ea48 1885 	orr.w	r8, r8, r5, lsl #6
 8016444:	eb18 0801 	adds.w	r8, r8, r1
 8016448:	990a      	ldr	r1, [sp, #40]	; 0x28
 801644a:	f00b 4b7c 	and.w	fp, fp, #4227858432	; 0xfc000000
 801644e:	eb43 69a5 	adc.w	r9, r3, r5, asr #26
 8016452:	ebb1 0b0b 	subs.w	fp, r1, fp
 8016456:	eb66 0105 	sbc.w	r1, r6, r5
 801645a:	910a      	str	r1, [sp, #40]	; 0x28
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801645c:	9906      	ldr	r1, [sp, #24]
 801645e:	f111 7400 	adds.w	r4, r1, #33554432	; 0x2000000
 8016462:	f14a 0300 	adc.w	r3, sl, #0
 8016466:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016468:	0ea0      	lsrs	r0, r4, #26
 801646a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801646e:	1840      	adds	r0, r0, r1
 8016470:	eb42 6ca3 	adc.w	ip, r2, r3, asr #26
 8016474:	9a06      	ldr	r2, [sp, #24]
 8016476:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 801647a:	1b14      	subs	r4, r2, r4
 801647c:	eb6a 0103 	sbc.w	r1, sl, r3
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8016480:	f118 7680 	adds.w	r6, r8, #16777216	; 0x1000000
 8016484:	f149 0300 	adc.w	r3, r9, #0
 8016488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801648a:	0e75      	lsrs	r5, r6, #25
 801648c:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
 8016490:	18aa      	adds	r2, r5, r2
 8016492:	9203      	str	r2, [sp, #12]
 8016494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016496:	f006 457e 	and.w	r5, r6, #4261412864	; 0xfe000000
 801649a:	eb42 6363 	adc.w	r3, r2, r3, asr #25
 801649e:	ebb8 0205 	subs.w	r2, r8, r5
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80164a2:	f110 7580 	adds.w	r5, r0, #16777216	; 0x1000000
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 80164a6:	920c      	str	r2, [sp, #48]	; 0x30
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80164a8:	ea4f 6655 	mov.w	r6, r5, lsr #25
 80164ac:	f14c 0200 	adc.w	r2, ip, #0
 80164b0:	ea46 16c2 	orr.w	r6, r6, r2, lsl #7
 80164b4:	19f6      	adds	r6, r6, r7
 80164b6:	9604      	str	r6, [sp, #16]
 80164b8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80164ba:	f005 457e 	and.w	r5, r5, #4261412864	; 0xfe000000
 80164be:	eb46 6c62 	adc.w	ip, r6, r2, asr #25
 80164c2:	1b42      	subs	r2, r0, r5
 80164c4:	9207      	str	r2, [sp, #28]

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80164c6:	9a03      	ldr	r2, [sp, #12]
 80164c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80164ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80164ce:	9201      	str	r2, [sp, #4]
 80164d0:	f143 0300 	adc.w	r3, r3, #0
 80164d4:	0e92      	lsrs	r2, r2, #26
 80164d6:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 80164da:	1812      	adds	r2, r2, r0
 80164dc:	9205      	str	r2, [sp, #20]
 80164de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80164e0:	eb42 63a3 	adc.w	r3, r2, r3, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80164e4:	9a04      	ldr	r2, [sp, #16]

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80164e6:	9d08      	ldr	r5, [sp, #32]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80164e8:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80164ec:	9202      	str	r2, [sp, #8]
 80164ee:	f14c 0c00 	adc.w	ip, ip, #0
 80164f2:	0e90      	lsrs	r0, r2, #26
 80164f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164f6:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 80164fa:	1880      	adds	r0, r0, r2
 80164fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164fe:	eb42 6cac 	adc.w	ip, r2, ip, asr #26
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016502:	9a05      	ldr	r2, [sp, #20]
 8016504:	f112 7a80 	adds.w	sl, r2, #16777216	; 0x1000000
 8016508:	f143 0200 	adc.w	r2, r3, #0
 801650c:	ea4f 635a 	mov.w	r3, sl, lsr #25
 8016510:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016514:	191c      	adds	r4, r3, r4
 8016516:	eb41 6362 	adc.w	r3, r1, r2, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 801651a:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 801651e:	f14c 0c00 	adc.w	ip, ip, #0
 8016522:	ea4f 6159 	mov.w	r1, r9, lsr #25
 8016526:	4672      	mov	r2, lr
 8016528:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 801652c:	1889      	adds	r1, r1, r2
 801652e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016530:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016534:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 8016538:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801653c:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 8016540:	f14c 0c00 	adc.w	ip, ip, #0
 8016544:	ea4f 6298 	mov.w	r2, r8, lsr #26
 8016548:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 801654c:	1952      	adds	r2, r2, r5
 801654e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016550:	9306      	str	r3, [sp, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016552:	eb45 6cac 	adc.w	ip, r5, ip, asr #26

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8016556:	f112 7e80 	adds.w	lr, r2, #16777216	; 0x1000000
 801655a:	f14c 0c00 	adc.w	ip, ip, #0
 801655e:	ea4f 655e 	mov.w	r5, lr, lsr #25
 8016562:	2313      	movs	r3, #19
 8016564:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 8016568:	fba5 6503 	umull	r6, r5, r5, r3
 801656c:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 8016570:	fb03 550c 	mla	r5, r3, ip, r5
 8016574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016576:	eb16 060b 	adds.w	r6, r6, fp
 801657a:	eb45 0503 	adc.w	r5, r5, r3

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801657e:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000

  h[0] = (sword32)h0;
 8016582:	9b00      	ldr	r3, [sp, #0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016584:	f00c 4b7c 	and.w	fp, ip, #4227858432	; 0xfc000000
 8016588:	f145 0500 	adc.w	r5, r5, #0
 801658c:	ebb6 060b 	subs.w	r6, r6, fp
  h[0] = (sword32)h0;
 8016590:	601e      	str	r6, [r3, #0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016592:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 8016596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016598:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 801659c:	eb1c 0503 	adds.w	r5, ip, r3
  h[1] = (sword32)h1;
 80165a0:	9b00      	ldr	r3, [sp, #0]
 80165a2:	605d      	str	r5, [r3, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80165a4:	9b01      	ldr	r3, [sp, #4]
 80165a6:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 80165aa:	9b03      	ldr	r3, [sp, #12]
 80165ac:	1b5d      	subs	r5, r3, r5
  h[2] = (sword32)h2;
 80165ae:	9b00      	ldr	r3, [sp, #0]
 80165b0:	609d      	str	r5, [r3, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80165b2:	9b05      	ldr	r3, [sp, #20]
 80165b4:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 80165b8:	ebb3 050a 	subs.w	r5, r3, sl
  h[3] = (sword32)h3;
 80165bc:	9b00      	ldr	r3, [sp, #0]
 80165be:	60dd      	str	r5, [r3, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80165c0:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 80165c4:	1b64      	subs	r4, r4, r5
  h[4] = (sword32)h4;
 80165c6:	611c      	str	r4, [r3, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80165c8:	9b06      	ldr	r3, [sp, #24]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80165ca:	9c04      	ldr	r4, [sp, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80165cc:	0ebf      	lsrs	r7, r7, #26
 80165ce:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 80165d2:	9b07      	ldr	r3, [sp, #28]
 80165d4:	18ff      	adds	r7, r7, r3
  h[5] = (sword32)h5;
 80165d6:	9b00      	ldr	r3, [sp, #0]
 80165d8:	615f      	str	r7, [r3, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80165da:	9b02      	ldr	r3, [sp, #8]
 80165dc:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 80165e0:	1ae3      	subs	r3, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80165e2:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  h[6] = (sword32)h6;
 80165e6:	9c00      	ldr	r4, [sp, #0]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80165e8:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 80165ec:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80165f0:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80165f4:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 80165f8:	ebb2 020e 	subs.w	r2, r2, lr
  h[6] = (sword32)h6;
 80165fc:	61a3      	str	r3, [r4, #24]
  h[7] = (sword32)h7;
 80165fe:	61e0      	str	r0, [r4, #28]
  h[8] = (sword32)h8;
 8016600:	6221      	str	r1, [r4, #32]
  h[9] = (sword32)h9;
 8016602:	6262      	str	r2, [r4, #36]	; 0x24
}
 8016604:	b017      	add	sp, #92	; 0x5c
 8016606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801660a <fe_add>:
Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h,const fe f,const fe g)
{
 801660a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 h0 = f0 + g0;
  sword32 h1 = f1 + g1;
 801660e:	6853      	ldr	r3, [r2, #4]
 8016610:	684e      	ldr	r6, [r1, #4]
  sword32 h2 = f2 + g2;
 8016612:	688d      	ldr	r5, [r1, #8]
  sword32 h3 = f3 + g3;
 8016614:	68cc      	ldr	r4, [r1, #12]
  sword32 h4 = f4 + g4;
 8016616:	690f      	ldr	r7, [r1, #16]
  sword32 h5 = f5 + g5;
  sword32 h6 = f6 + g6;
  sword32 h7 = f7 + g7;
  sword32 h8 = f8 + g8;
  sword32 h9 = f9 + g9;
 8016618:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
  sword32 h1 = f1 + g1;
 801661c:	441e      	add	r6, r3
  sword32 h2 = f2 + g2;
 801661e:	6893      	ldr	r3, [r2, #8]
 8016620:	441d      	add	r5, r3
  sword32 h3 = f3 + g3;
 8016622:	68d3      	ldr	r3, [r2, #12]
 8016624:	441c      	add	r4, r3
  sword32 h4 = f4 + g4;
 8016626:	6913      	ldr	r3, [r2, #16]
 8016628:	eb07 0c03 	add.w	ip, r7, r3
  sword32 h5 = f5 + g5;
 801662c:	694f      	ldr	r7, [r1, #20]
 801662e:	6953      	ldr	r3, [r2, #20]
 8016630:	eb07 0e03 	add.w	lr, r7, r3
  sword32 h6 = f6 + g6;
 8016634:	698f      	ldr	r7, [r1, #24]
 8016636:	6993      	ldr	r3, [r2, #24]
 8016638:	eb07 0803 	add.w	r8, r7, r3
  sword32 h7 = f7 + g7;
 801663c:	69cf      	ldr	r7, [r1, #28]
 801663e:	69d3      	ldr	r3, [r2, #28]
 8016640:	eb07 0903 	add.w	r9, r7, r3
  sword32 h8 = f8 + g8;
 8016644:	6a13      	ldr	r3, [r2, #32]
 8016646:	6a0f      	ldr	r7, [r1, #32]
  sword32 h0 = f0 + g0;
 8016648:	6809      	ldr	r1, [r1, #0]
  sword32 h8 = f8 + g8;
 801664a:	441f      	add	r7, r3
  sword32 h9 = f9 + g9;
 801664c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 h0 = f0 + g0;
 801664e:	6812      	ldr	r2, [r2, #0]
  sword32 h9 = f9 + g9;
 8016650:	4453      	add	r3, sl
  sword32 h0 = f0 + g0;
 8016652:	440a      	add	r2, r1
  h[0] = h0;
  h[1] = h1;
 8016654:	e9c0 2600 	strd	r2, r6, [r0]
  h[2] = h2;
  h[3] = h3;
 8016658:	e9c0 5402 	strd	r5, r4, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 801665c:	e9c0 ce04 	strd	ip, lr, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 8016660:	e9c0 8906 	strd	r8, r9, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 8016664:	e9c0 7308 	strd	r7, r3, [r0, #32]
}
 8016668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801666c <fe_tobytes>:
  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s,const fe h)
{
 801666c:	460b      	mov	r3, r1
 801666e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 h4 = h[4];
  sword32 h5 = h[5];
  sword32 h6 = h[6];
  sword32 h7 = h[7];
  sword32 h8 = h[8];
  sword32 h9 = h[9];
 8016672:	e9d3 9208 	ldrd	r9, r2, [r3, #32]
  sword32 h1 = h[1];
 8016676:	e9d1 8e00 	ldrd	r8, lr, [r1]
  sword32 carry6;
  sword32 carry7;
  sword32 carry8;
  sword32 carry9;

  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 801667a:	f04f 0a13 	mov.w	sl, #19
  sword32 h5 = h[5];
 801667e:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
  sword32 h7 = h[7];
 8016682:	e9d3 5406 	ldrd	r5, r4, [r3, #24]
  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 8016686:	fb0a f302 	mul.w	r3, sl, r2
  sword32 h3 = h[3];
 801668a:	e9d1 c102 	ldrd	ip, r1, [r1, #8]
  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 801668e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  q = (h0 + q) >> 26;
 8016692:	eb08 6363 	add.w	r3, r8, r3, asr #25
  q = (h1 + q) >> 25;
 8016696:	eb0e 63a3 	add.w	r3, lr, r3, asr #26
  q = (h2 + q) >> 26;
 801669a:	eb0c 6363 	add.w	r3, ip, r3, asr #25
  q = (h3 + q) >> 25;
 801669e:	eb01 63a3 	add.w	r3, r1, r3, asr #26
  q = (h4 + q) >> 26;
 80166a2:	eb07 6363 	add.w	r3, r7, r3, asr #25
  q = (h5 + q) >> 25;
 80166a6:	eb06 63a3 	add.w	r3, r6, r3, asr #26
  q = (h6 + q) >> 26;
 80166aa:	eb05 6363 	add.w	r3, r5, r3, asr #25
  q = (h7 + q) >> 25;
 80166ae:	eb04 63a3 	add.w	r3, r4, r3, asr #26
  q = (h8 + q) >> 26;
 80166b2:	eb09 6363 	add.w	r3, r9, r3, asr #25
  q = (h9 + q) >> 25;
 80166b6:	eb02 63a3 	add.w	r3, r2, r3, asr #26
 80166ba:	165b      	asrs	r3, r3, #25

  /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
  h0 += 19 * q;
 80166bc:	fb0a 8803 	mla	r8, sl, r3, r8
  /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */

  carry0 = h0 >> 26; h1 += carry0; h0 -= carry0 << 26;
 80166c0:	eb0e 6ea8 	add.w	lr, lr, r8, asr #26
 80166c4:	f028 487c 	bic.w	r8, r8, #4227858432	; 0xfc000000
  evidently 2^255 h10-2^255 q = 0.
  Goal: Output h0+...+2^230 h9.
  */

  s[0] = (byte)(h0 >> 0);
  s[1] = (byte)(h0 >> 8);
 80166c8:	ea4f 2328 	mov.w	r3, r8, asr #8
  carry1 = h1 >> 25; h2 += carry1; h1 -= carry1 << 25;
 80166cc:	eb0c 6c6e 	add.w	ip, ip, lr, asr #25
  s[1] = (byte)(h0 >> 8);
 80166d0:	7043      	strb	r3, [r0, #1]
 80166d2:	f02e 4e7e 	bic.w	lr, lr, #4261412864	; 0xfe000000
  s[2] = (byte)(h0 >> 16);
 80166d6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80166da:	7083      	strb	r3, [r0, #2]
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 80166dc:	ea4f 038e 	mov.w	r3, lr, lsl #2
  s[0] = (byte)(h0 >> 0);
 80166e0:	f880 8000 	strb.w	r8, [r0]
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 80166e4:	ea43 6818 	orr.w	r8, r3, r8, lsr #24
  s[4] = (byte)(h1 >> 6);
 80166e8:	ea4f 13ae 	mov.w	r3, lr, asr #6
  carry2 = h2 >> 26; h3 += carry2; h2 -= carry2 << 26;
 80166ec:	eb01 61ac 	add.w	r1, r1, ip, asr #26
  s[4] = (byte)(h1 >> 6);
 80166f0:	7103      	strb	r3, [r0, #4]
 80166f2:	f02c 4c7c 	bic.w	ip, ip, #4227858432	; 0xfc000000
  s[5] = (byte)(h1 >> 14);
 80166f6:	ea4f 33ae 	mov.w	r3, lr, asr #14
 80166fa:	7143      	strb	r3, [r0, #5]
  s[6] = (byte)((h1 >> 22) | (h2 << 3));
 80166fc:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8016700:	ea43 5e9e 	orr.w	lr, r3, lr, lsr #22
  s[7] = (byte)(h2 >> 5);
 8016704:	ea4f 136c 	mov.w	r3, ip, asr #5
  carry3 = h3 >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016708:	eb07 6761 	add.w	r7, r7, r1, asr #25
  s[7] = (byte)(h2 >> 5);
 801670c:	71c3      	strb	r3, [r0, #7]
 801670e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
  s[8] = (byte)(h2 >> 13);
 8016712:	ea4f 336c 	mov.w	r3, ip, asr #13
 8016716:	7203      	strb	r3, [r0, #8]
  s[9] = (byte)((h2 >> 21) | (h3 << 5));
 8016718:	014b      	lsls	r3, r1, #5
 801671a:	ea43 5c5c 	orr.w	ip, r3, ip, lsr #21
  s[10] = (byte)(h3 >> 3);
 801671e:	10cb      	asrs	r3, r1, #3
 8016720:	7283      	strb	r3, [r0, #10]
  s[11] = (byte)(h3 >> 11);
 8016722:	12cb      	asrs	r3, r1, #11
 8016724:	72c3      	strb	r3, [r0, #11]
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 8016726:	01bb      	lsls	r3, r7, #6
  carry4 = h4 >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016728:	eb06 66a7 	add.w	r6, r6, r7, asr #26
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 801672c:	ea43 41d1 	orr.w	r1, r3, r1, lsr #19
  s[13] = (byte)(h4 >> 2);
 8016730:	f3c7 0397 	ubfx	r3, r7, #2, #24
  carry5 = h5 >> 25; h6 += carry5; h5 -= carry5 << 25;
 8016734:	eb05 6566 	add.w	r5, r5, r6, asr #25
  s[13] = (byte)(h4 >> 2);
 8016738:	7343      	strb	r3, [r0, #13]
 801673a:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
  s[14] = (byte)(h4 >> 10);
 801673e:	f3c7 238f 	ubfx	r3, r7, #10, #16
 8016742:	7383      	strb	r3, [r0, #14]
  s[15] = (byte)(h4 >> 18);
  s[16] = (byte)(h5 >> 0);
  s[17] = (byte)(h5 >> 8);
 8016744:	1233      	asrs	r3, r6, #8
  carry6 = h6 >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016746:	eb04 64a5 	add.w	r4, r4, r5, asr #26
  s[17] = (byte)(h5 >> 8);
 801674a:	7443      	strb	r3, [r0, #17]
 801674c:	f025 457c 	bic.w	r5, r5, #4227858432	; 0xfc000000
  s[18] = (byte)(h5 >> 16);
 8016750:	1433      	asrs	r3, r6, #16
 8016752:	7483      	strb	r3, [r0, #18]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 8016754:	006b      	lsls	r3, r5, #1
  s[16] = (byte)(h5 >> 0);
 8016756:	7406      	strb	r6, [r0, #16]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 8016758:	ea43 6616 	orr.w	r6, r3, r6, lsr #24
  s[20] = (byte)(h6 >> 7);
 801675c:	11eb      	asrs	r3, r5, #7
  carry7 = h7 >> 25; h8 += carry7; h7 -= carry7 << 25;
 801675e:	eb09 6964 	add.w	r9, r9, r4, asr #25
  s[20] = (byte)(h6 >> 7);
 8016762:	7503      	strb	r3, [r0, #20]
 8016764:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
  s[21] = (byte)(h6 >> 15);
 8016768:	13eb      	asrs	r3, r5, #15
  s[15] = (byte)(h4 >> 18);
 801676a:	f3c7 4787 	ubfx	r7, r7, #18, #8
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 801676e:	f880 8003 	strb.w	r8, [r0, #3]
  s[6] = (byte)((h1 >> 22) | (h2 << 3));
 8016772:	f880 e006 	strb.w	lr, [r0, #6]
  s[9] = (byte)((h2 >> 21) | (h3 << 5));
 8016776:	f880 c009 	strb.w	ip, [r0, #9]
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 801677a:	7301      	strb	r1, [r0, #12]
  s[15] = (byte)(h4 >> 18);
 801677c:	73c7      	strb	r7, [r0, #15]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 801677e:	74c6      	strb	r6, [r0, #19]
  s[21] = (byte)(h6 >> 15);
 8016780:	7543      	strb	r3, [r0, #21]
  s[22] = (byte)((h6 >> 23) | (h7 << 3));
 8016782:	00e3      	lsls	r3, r4, #3
 8016784:	ea43 55d5 	orr.w	r5, r3, r5, lsr #23
  s[23] = (byte)(h7 >> 5);
 8016788:	1163      	asrs	r3, r4, #5
 801678a:	f029 4b7c 	bic.w	fp, r9, #4227858432	; 0xfc000000
 801678e:	75c3      	strb	r3, [r0, #23]
  s[24] = (byte)(h7 >> 13);
 8016790:	1363      	asrs	r3, r4, #13
 8016792:	7603      	strb	r3, [r0, #24]
  s[25] = (byte)((h7 >> 21) | (h8 << 4));
 8016794:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8016798:	ea43 5454 	orr.w	r4, r3, r4, lsr #21
  carry8 = h8 >> 26; h9 += carry8; h8 -= carry8 << 26;
 801679c:	eb02 62a9 	add.w	r2, r2, r9, asr #26
  s[26] = (byte)(h8 >> 4);
 80167a0:	ea4f 132b 	mov.w	r3, fp, asr #4
 80167a4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
 80167a8:	7683      	strb	r3, [r0, #26]
  s[27] = (byte)(h8 >> 12);
 80167aa:	ea4f 332b 	mov.w	r3, fp, asr #12
 80167ae:	76c3      	strb	r3, [r0, #27]
  s[28] = (byte)((h8 >> 20) | (h9 << 6));
 80167b0:	0193      	lsls	r3, r2, #6
 80167b2:	ea43 5b1b 	orr.w	fp, r3, fp, lsr #20
  s[29] = (byte)(h9 >> 2);
 80167b6:	1093      	asrs	r3, r2, #2
 80167b8:	7743      	strb	r3, [r0, #29]
  s[30] = (byte)(h9 >> 10);
 80167ba:	1293      	asrs	r3, r2, #10
  s[31] = (byte)(h9 >> 18);
 80167bc:	1492      	asrs	r2, r2, #18
  s[22] = (byte)((h6 >> 23) | (h7 << 3));
 80167be:	7585      	strb	r5, [r0, #22]
  s[25] = (byte)((h7 >> 21) | (h8 << 4));
 80167c0:	7644      	strb	r4, [r0, #25]
  s[28] = (byte)((h8 >> 20) | (h9 << 6));
 80167c2:	f880 b01c 	strb.w	fp, [r0, #28]
  s[30] = (byte)(h9 >> 10);
 80167c6:	7783      	strb	r3, [r0, #30]
  s[31] = (byte)(h9 >> 18);
 80167c8:	77c2      	strb	r2, [r0, #31]
}
 80167ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167ce <fe_sub>:
Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h,const fe f,const fe g)
{
 80167ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 h0 = f0 - g0;
  sword32 h1 = f1 - g1;
 80167d2:	6853      	ldr	r3, [r2, #4]
 80167d4:	684e      	ldr	r6, [r1, #4]
  sword32 h2 = f2 - g2;
 80167d6:	688d      	ldr	r5, [r1, #8]
  sword32 h3 = f3 - g3;
 80167d8:	68cc      	ldr	r4, [r1, #12]
  sword32 h4 = f4 - g4;
 80167da:	690f      	ldr	r7, [r1, #16]
  sword32 h1 = f1 - g1;
 80167dc:	1af6      	subs	r6, r6, r3
  sword32 h2 = f2 - g2;
 80167de:	6893      	ldr	r3, [r2, #8]
 80167e0:	1aed      	subs	r5, r5, r3
  sword32 h3 = f3 - g3;
 80167e2:	68d3      	ldr	r3, [r2, #12]
 80167e4:	eba4 0a03 	sub.w	sl, r4, r3
  sword32 h4 = f4 - g4;
 80167e8:	6913      	ldr	r3, [r2, #16]
  sword32 h5 = f5 - g5;
  sword32 h6 = f6 - g6;
  sword32 h7 = f7 - g7;
  sword32 h8 = f8 - g8;
  sword32 h9 = f9 - g9;
 80167ea:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  sword32 h4 = f4 - g4;
 80167ec:	eba7 0c03 	sub.w	ip, r7, r3
  sword32 h5 = f5 - g5;
 80167f0:	694f      	ldr	r7, [r1, #20]
 80167f2:	6953      	ldr	r3, [r2, #20]
 80167f4:	eba7 0e03 	sub.w	lr, r7, r3
  sword32 h6 = f6 - g6;
 80167f8:	698f      	ldr	r7, [r1, #24]
 80167fa:	6993      	ldr	r3, [r2, #24]
 80167fc:	eba7 0803 	sub.w	r8, r7, r3
  sword32 h7 = f7 - g7;
 8016800:	69cf      	ldr	r7, [r1, #28]
 8016802:	69d3      	ldr	r3, [r2, #28]
 8016804:	eba7 0903 	sub.w	r9, r7, r3
  sword32 h8 = f8 - g8;
 8016808:	6a13      	ldr	r3, [r2, #32]
 801680a:	6a0f      	ldr	r7, [r1, #32]
  sword32 h0 = f0 - g0;
 801680c:	6809      	ldr	r1, [r1, #0]
  sword32 h8 = f8 - g8;
 801680e:	1aff      	subs	r7, r7, r3
  sword32 h9 = f9 - g9;
 8016810:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 h0 = f0 - g0;
 8016812:	6812      	ldr	r2, [r2, #0]
  sword32 h9 = f9 - g9;
 8016814:	1ae3      	subs	r3, r4, r3
  sword32 h0 = f0 - g0;
 8016816:	1a8a      	subs	r2, r1, r2
  h[0] = h0;
  h[1] = h1;
 8016818:	e9c0 2600 	strd	r2, r6, [r0]
  h[2] = h2;
  h[3] = h3;
 801681c:	e9c0 5a02 	strd	r5, sl, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 8016820:	e9c0 ce04 	strd	ip, lr, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 8016824:	e9c0 8906 	strd	r8, r9, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 8016828:	e9c0 7308 	strd	r7, r3, [r0, #32]
}
 801682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016830 <fe_frombytes>:
/*
Ignores top bit of h.
*/

void fe_frombytes(fe h,const unsigned char *s)
{
 8016830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016834:	4604      	mov	r4, r0
 8016836:	b08d      	sub	sp, #52	; 0x34
  sword64 h0 = load_4(s);
 8016838:	4608      	mov	r0, r1
{
 801683a:	460e      	mov	r6, r1
  sword64 h0 = load_4(s);
 801683c:	f7ff fcf0 	bl	8016220 <load_4>
 8016840:	9004      	str	r0, [sp, #16]
  sword64 h1 = load_3(s + 4) << 6;
 8016842:	1d30      	adds	r0, r6, #4
  sword64 h0 = load_4(s);
 8016844:	9109      	str	r1, [sp, #36]	; 0x24
  sword64 h1 = load_3(s + 4) << 6;
 8016846:	f7ff fce1 	bl	801620c <load_3>
 801684a:	018b      	lsls	r3, r1, #6
 801684c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016850:	930a      	str	r3, [sp, #40]	; 0x28
 8016852:	0183      	lsls	r3, r0, #6
  sword64 h2 = load_3(s + 7) << 5;
 8016854:	1df0      	adds	r0, r6, #7
  sword64 h1 = load_3(s + 4) << 6;
 8016856:	9301      	str	r3, [sp, #4]
  sword64 h2 = load_3(s + 7) << 5;
 8016858:	f7ff fcd8 	bl	801620c <load_3>
 801685c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8016860:	0143      	lsls	r3, r0, #5
 8016862:	ea4a 6ad0 	orr.w	sl, sl, r0, lsr #27
  sword64 h3 = load_3(s + 10) << 3;
 8016866:	f106 000a 	add.w	r0, r6, #10
  sword64 h2 = load_3(s + 7) << 5;
 801686a:	9305      	str	r3, [sp, #20]
  sword64 h3 = load_3(s + 10) << 3;
 801686c:	f7ff fcce 	bl	801620c <load_3>
 8016870:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 8016874:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 8016878:	ea4f 0bc0 	mov.w	fp, r0, lsl #3
  sword64 h4 = load_3(s + 13) << 2;
 801687c:	f106 000d 	add.w	r0, r6, #13
 8016880:	f7ff fcc4 	bl	801620c <load_3>
 8016884:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8016888:	0083      	lsls	r3, r0, #2
 801688a:	ea48 7890 	orr.w	r8, r8, r0, lsr #30
  sword64 h5 = load_4(s + 16);
 801688e:	f106 0010 	add.w	r0, r6, #16
  sword64 h4 = load_3(s + 13) << 2;
 8016892:	9306      	str	r3, [sp, #24]
  sword64 h5 = load_4(s + 16);
 8016894:	f7ff fcc4 	bl	8016220 <load_4>
 8016898:	9002      	str	r0, [sp, #8]
  sword64 h6 = load_3(s + 20) << 7;
 801689a:	f106 0014 	add.w	r0, r6, #20
  sword64 h5 = load_4(s + 16);
 801689e:	910b      	str	r1, [sp, #44]	; 0x2c
  sword64 h6 = load_3(s + 20) << 7;
 80168a0:	f7ff fcb4 	bl	801620c <load_3>
 80168a4:	01cb      	lsls	r3, r1, #7
 80168a6:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80168aa:	9300      	str	r3, [sp, #0]
 80168ac:	01c3      	lsls	r3, r0, #7
  sword64 h7 = load_3(s + 23) << 5;
 80168ae:	f106 0017 	add.w	r0, r6, #23
  sword64 h6 = load_3(s + 20) << 7;
 80168b2:	9307      	str	r3, [sp, #28]
  sword64 h7 = load_3(s + 23) << 5;
 80168b4:	f7ff fcaa 	bl	801620c <load_3>
 80168b8:	014f      	lsls	r7, r1, #5
 80168ba:	0143      	lsls	r3, r0, #5
 80168bc:	ea47 67d0 	orr.w	r7, r7, r0, lsr #27
  sword64 h8 = load_3(s + 26) << 4;
 80168c0:	f106 001a 	add.w	r0, r6, #26
  sword64 h7 = load_3(s + 23) << 5;
 80168c4:	9303      	str	r3, [sp, #12]
  sword64 h8 = load_3(s + 26) << 4;
 80168c6:	f7ff fca1 	bl	801620c <load_3>
 80168ca:	010d      	lsls	r5, r1, #4
 80168cc:	0103      	lsls	r3, r0, #4
 80168ce:	ea45 7510 	orr.w	r5, r5, r0, lsr #28
  sword64 h9 = (load_3(s + 29) & 8388607) << 2;
 80168d2:	f106 001d 	add.w	r0, r6, #29
  sword64 h8 = load_3(s + 26) << 4;
 80168d6:	9308      	str	r3, [sp, #32]
  sword64 h9 = (load_3(s + 29) & 8388607) << 2;
 80168d8:	f7ff fc98 	bl	801620c <load_3>
 80168dc:	0080      	lsls	r0, r0, #2
 80168de:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80168e2:	f020 0003 	bic.w	r0, r0, #3
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 80168e6:	f100 7280 	add.w	r2, r0, #16777216	; 0x1000000
 80168ea:	9b04      	ldr	r3, [sp, #16]
 80168ec:	0e51      	lsrs	r1, r2, #25
 80168ee:	2613      	movs	r6, #19
 80168f0:	fba1 1606 	umull	r1, r6, r1, r6
 80168f4:	18cb      	adds	r3, r1, r3
 80168f6:	9304      	str	r3, [sp, #16]
 80168f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80168fa:	9908      	ldr	r1, [sp, #32]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 80168fc:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
 8016900:	f143 0600 	adc.w	r6, r3, #0
 8016904:	1a83      	subs	r3, r0, r2
 8016906:	9309      	str	r3, [sp, #36]	; 0x24
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8016908:	9b01      	ldr	r3, [sp, #4]
 801690a:	f113 7280 	adds.w	r2, r3, #16777216	; 0x1000000
 801690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016910:	ea4f 6052 	mov.w	r0, r2, lsr #25
 8016914:	f143 0e00 	adc.w	lr, r3, #0
 8016918:	9b05      	ldr	r3, [sp, #20]
 801691a:	ea40 10ce 	orr.w	r0, r0, lr, lsl #7
 801691e:	18c3      	adds	r3, r0, r3
 8016920:	9305      	str	r3, [sp, #20]
 8016922:	9b01      	ldr	r3, [sp, #4]
 8016924:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
 8016928:	eb4a 6e6e 	adc.w	lr, sl, lr, asr #25
 801692c:	1a9b      	subs	r3, r3, r2
 801692e:	930a      	str	r3, [sp, #40]	; 0x28
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016930:	f11b 7380 	adds.w	r3, fp, #16777216	; 0x1000000
 8016934:	9a06      	ldr	r2, [sp, #24]
 8016936:	f149 0c00 	adc.w	ip, r9, #0
 801693a:	0e58      	lsrs	r0, r3, #25
 801693c:	ea40 10cc 	orr.w	r0, r0, ip, lsl #7
 8016940:	1882      	adds	r2, r0, r2
 8016942:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
 8016946:	eb48 6c6c 	adc.w	ip, r8, ip, asr #25
 801694a:	ebbb 0b03 	subs.w	fp, fp, r3
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 801694e:	9b02      	ldr	r3, [sp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016950:	9201      	str	r2, [sp, #4]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8016952:	f113 7080 	adds.w	r0, r3, #16777216	; 0x1000000
 8016956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016958:	ea4f 6250 	mov.w	r2, r0, lsr #25
 801695c:	f143 0900 	adc.w	r9, r3, #0
 8016960:	9b07      	ldr	r3, [sp, #28]
 8016962:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 8016966:	18d2      	adds	r2, r2, r3
 8016968:	9b00      	ldr	r3, [sp, #0]
 801696a:	eb43 6969 	adc.w	r9, r3, r9, asr #25
 801696e:	9b02      	ldr	r3, [sp, #8]
 8016970:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 8016974:	1a1b      	subs	r3, r3, r0
 8016976:	9306      	str	r3, [sp, #24]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8016978:	9b03      	ldr	r3, [sp, #12]
 801697a:	f113 7080 	adds.w	r0, r3, #16777216	; 0x1000000
 801697e:	f147 0800 	adc.w	r8, r7, #0
 8016982:	0e43      	lsrs	r3, r0, #25
 8016984:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
 8016988:	185b      	adds	r3, r3, r1
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	9b03      	ldr	r3, [sp, #12]
 801698e:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 8016992:	eb45 6868 	adc.w	r8, r5, r8, asr #25
 8016996:	1a1b      	subs	r3, r3, r0
 8016998:	9303      	str	r3, [sp, #12]

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801699a:	9b04      	ldr	r3, [sp, #16]
 801699c:	f113 7700 	adds.w	r7, r3, #33554432	; 0x2000000
 80169a0:	f146 0300 	adc.w	r3, r6, #0
 80169a4:	9302      	str	r3, [sp, #8]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80169a6:	9b05      	ldr	r3, [sp, #20]
 80169a8:	f113 7600 	adds.w	r6, r3, #33554432	; 0x2000000
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80169ac:	9b01      	ldr	r3, [sp, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80169ae:	f14e 0e00 	adc.w	lr, lr, #0
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80169b2:	f113 7000 	adds.w	r0, r3, #33554432	; 0x2000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80169b6:	9b00      	ldr	r3, [sp, #0]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80169b8:	f14c 0c00 	adc.w	ip, ip, #0
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80169bc:	f112 7500 	adds.w	r5, r2, #33554432	; 0x2000000
 80169c0:	f149 0900 	adc.w	r9, r9, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80169c4:	f113 7100 	adds.w	r1, r3, #33554432	; 0x2000000
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80169c8:	9b04      	ldr	r3, [sp, #16]
 80169ca:	f007 4a7c 	and.w	sl, r7, #4227858432	; 0xfc000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80169ce:	f148 0800 	adc.w	r8, r8, #0
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80169d2:	ebb3 0a0a 	subs.w	sl, r3, sl
 80169d6:	9b02      	ldr	r3, [sp, #8]

  h[0] = (sword32)h0;
 80169d8:	f8c4 a000 	str.w	sl, [r4]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80169dc:	0ebf      	lsrs	r7, r7, #26
 80169de:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 80169e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169e4:	18ff      	adds	r7, r7, r3
  h[1] = (sword32)h1;
 80169e6:	6067      	str	r7, [r4, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80169e8:	9b05      	ldr	r3, [sp, #20]
 80169ea:	f006 477c 	and.w	r7, r6, #4227858432	; 0xfc000000
 80169ee:	0eb6      	lsrs	r6, r6, #26
 80169f0:	ea46 168e 	orr.w	r6, r6, lr, lsl #6
 80169f4:	1bdf      	subs	r7, r3, r7
 80169f6:	eb16 060b 	adds.w	r6, r6, fp
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80169fa:	9b01      	ldr	r3, [sp, #4]
  h[2] = (sword32)h2;
  h[3] = (sword32)h3;
 80169fc:	60e6      	str	r6, [r4, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80169fe:	f000 467c 	and.w	r6, r0, #4227858432	; 0xfc000000
 8016a02:	1b9e      	subs	r6, r3, r6
 8016a04:	0e80      	lsrs	r0, r0, #26
 8016a06:	9b06      	ldr	r3, [sp, #24]
  h[2] = (sword32)h2;
 8016a08:	60a7      	str	r7, [r4, #8]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016a0a:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 8016a0e:	18c0      	adds	r0, r0, r3
  h[4] = (sword32)h4;
  h[5] = (sword32)h5;
 8016a10:	6160      	str	r0, [r4, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016a12:	9b03      	ldr	r3, [sp, #12]
  h[4] = (sword32)h4;
 8016a14:	6126      	str	r6, [r4, #16]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016a16:	f005 407c 	and.w	r0, r5, #4227858432	; 0xfc000000
 8016a1a:	0ead      	lsrs	r5, r5, #26
 8016a1c:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 8016a20:	1a12      	subs	r2, r2, r0
 8016a22:	18ed      	adds	r5, r5, r3
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016a24:	9b00      	ldr	r3, [sp, #0]
  h[6] = (sword32)h6;
 8016a26:	61a2      	str	r2, [r4, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016a28:	f001 427c 	and.w	r2, r1, #4227858432	; 0xfc000000
 8016a2c:	1a9b      	subs	r3, r3, r2
  h[7] = (sword32)h7;
  h[8] = (sword32)h8;
 8016a2e:	6223      	str	r3, [r4, #32]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016a30:	0e89      	lsrs	r1, r1, #26
 8016a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  h[7] = (sword32)h7;
 8016a34:	61e5      	str	r5, [r4, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016a36:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8016a3a:	18c9      	adds	r1, r1, r3
  h[9] = (sword32)h9;
 8016a3c:	6261      	str	r1, [r4, #36]	; 0x24
}
 8016a3e:	b00d      	add	sp, #52	; 0x34
 8016a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a44 <fe_copy>:
/*
h = f
*/

void fe_copy(fe h,const fe f)
{
 8016a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sword32 f0 = f[0];
  sword32 f1 = f[1];
 8016a48:	e9d1 9800 	ldrd	r9, r8, [r1]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 8016a4c:	e9d1 e302 	ldrd	lr, r3, [r1, #8]
  sword32 f4 = f[4];
  sword32 f5 = f[5];
 8016a50:	e9d1 7604 	ldrd	r7, r6, [r1, #16]
  sword32 f6 = f[6];
  sword32 f7 = f[7];
 8016a54:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  sword32 f8 = f[8];
  sword32 f9 = f[9];
 8016a58:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
  h[0] = f0;
  h[1] = f1;
 8016a5c:	e9c0 9800 	strd	r9, r8, [r0]
  h[2] = f2;
  h[3] = f3;
 8016a60:	e9c0 e302 	strd	lr, r3, [r0, #8]
  h[4] = f4;
  h[5] = f5;
 8016a64:	e9c0 7604 	strd	r7, r6, [r0, #16]
  h[6] = f6;
  h[7] = f7;
 8016a68:	e9c0 5406 	strd	r5, r4, [r0, #24]
  h[8] = f8;
  h[9] = f9;
 8016a6c:	e9c0 2108 	strd	r2, r1, [r0, #32]
}
 8016a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016a74 <fe_mul>:

With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h,const fe f,const fe g)
{
 8016a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a78:	b0a5      	sub	sp, #148	; 0x94
  sword32 f0 = f[0];
 8016a7a:	680b      	ldr	r3, [r1, #0]
 8016a7c:	9301      	str	r3, [sp, #4]
  sword32 f1 = f[1];
 8016a7e:	684b      	ldr	r3, [r1, #4]
 8016a80:	9308      	str	r3, [sp, #32]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 8016a82:	e9d1 9302 	ldrd	r9, r3, [r1, #8]
 8016a86:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 f4 = f[4];
  sword32 f5 = f[5];
 8016a88:	e9d1 7304 	ldrd	r7, r3, [r1, #16]
 8016a8c:	930a      	str	r3, [sp, #40]	; 0x28
  sword32 f6 = f[6];
  sword32 f7 = f[7];
 8016a8e:	e9d1 a306 	ldrd	sl, r3, [r1, #24]
 8016a92:	930b      	str	r3, [sp, #44]	; 0x2c
  sword32 f8 = f[8];
  sword32 f9 = f[9];
 8016a94:	e9d1 8308 	ldrd	r8, r3, [r1, #32]
 8016a98:	930c      	str	r3, [sp, #48]	; 0x30
  sword32 g0 = g[0];
  sword32 g1 = g[1];
  sword32 g2 = g[2];
 8016a9a:	6893      	ldr	r3, [r2, #8]
 8016a9c:	9302      	str	r3, [sp, #8]
  sword32 g3 = g[3];
 8016a9e:	68d3      	ldr	r3, [r2, #12]
 8016aa0:	9304      	str	r3, [sp, #16]
  sword32 g4 = g[4];
 8016aa2:	6913      	ldr	r3, [r2, #16]
 8016aa4:	9306      	str	r3, [sp, #24]
  sword32 g5 = g[5];
 8016aa6:	6953      	ldr	r3, [r2, #20]
 8016aa8:	930d      	str	r3, [sp, #52]	; 0x34
  sword32 g6 = g[6];
 8016aaa:	6993      	ldr	r3, [r2, #24]
 8016aac:	930f      	str	r3, [sp, #60]	; 0x3c
  sword32 g7 = g[7];
 8016aae:	69d3      	ldr	r3, [r2, #28]
 8016ab0:	9316      	str	r3, [sp, #88]	; 0x58
  sword32 g8 = g[8];
 8016ab2:	6a13      	ldr	r3, [r2, #32]
  sword32 g1 = g[1];
 8016ab4:	e9d2 1400 	ldrd	r1, r4, [r2]
  sword32 g8 = g[8];
 8016ab8:	9317      	str	r3, [sp, #92]	; 0x5c
  sword32 g9 = g[9];
 8016aba:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 g1_19 = 19 * g1; /* 1.959375*2^29 */
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
  sword32 g3_19 = 19 * g3;
  sword32 g4_19 = 19 * g4;
  sword32 g5_19 = 19 * g5;
 8016abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  sword32 g9 = g[9];
 8016abe:	9319      	str	r3, [sp, #100]	; 0x64
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8016ac0:	f04f 0b13 	mov.w	fp, #19
  sword32 g5_19 = 19 * g5;
 8016ac4:	fb0b f202 	mul.w	r2, fp, r2
 8016ac8:	9210      	str	r2, [sp, #64]	; 0x40
  sword32 g6_19 = 19 * g6;
 8016aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8016acc:	9b02      	ldr	r3, [sp, #8]
  sword64 f9g5_38 = f9_2 * (sword64) g5_19;
  sword64 f9g6_19 = f9   * (sword64) g6_19;
  sword64 f9g7_38 = f9_2 * (sword64) g7_19;
  sword64 f9g8_19 = f9   * (sword64) g8_19;
  sword64 f9g9_38 = f9_2 * (sword64) g9_19;
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8016ace:	f8dd c004 	ldr.w	ip, [sp, #4]
  sword32 g6_19 = 19 * g6;
 8016ad2:	fb0b f202 	mul.w	r2, fp, r2
 8016ad6:	920e      	str	r2, [sp, #56]	; 0x38
  sword32 g7_19 = 19 * g7;
 8016ad8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016ada:	fb0b f202 	mul.w	r2, fp, r2
 8016ade:	9207      	str	r2, [sp, #28]
  sword32 g8_19 = 19 * g8;
 8016ae0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ae2:	fb0b f202 	mul.w	r2, fp, r2
 8016ae6:	9205      	str	r2, [sp, #20]
  sword32 g9_19 = 19 * g9;
 8016ae8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016aea:	fb0b f202 	mul.w	r2, fp, r2
 8016aee:	9203      	str	r2, [sp, #12]
  sword32 f1_2 = 2 * f1;
 8016af0:	9a08      	ldr	r2, [sp, #32]
 8016af2:	0052      	lsls	r2, r2, #1
 8016af4:	9211      	str	r2, [sp, #68]	; 0x44
  sword32 f3_2 = 2 * f3;
 8016af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 8016af8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  sword32 f3_2 = 2 * f3;
 8016afa:	0052      	lsls	r2, r2, #1
 8016afc:	9212      	str	r2, [sp, #72]	; 0x48
  sword32 f5_2 = 2 * f5;
 8016afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b00:	0052      	lsls	r2, r2, #1
 8016b02:	9213      	str	r2, [sp, #76]	; 0x4c
  sword32 f7_2 = 2 * f7;
 8016b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
{
 8016b06:	4686      	mov	lr, r0
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 8016b08:	9803      	ldr	r0, [sp, #12]
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8016b0a:	fb0b f303 	mul.w	r3, fp, r3
  sword32 f7_2 = 2 * f7;
 8016b0e:	0052      	lsls	r2, r2, #1
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8016b10:	931a      	str	r3, [sp, #104]	; 0x68
  sword32 f7_2 = 2 * f7;
 8016b12:	9214      	str	r2, [sp, #80]	; 0x50
  sword32 g3_19 = 19 * g3;
 8016b14:	9b04      	ldr	r3, [sp, #16]
  sword32 f9_2 = 2 * f9;
 8016b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 8016b18:	fb85 6500 	smull	r6, r5, r5, r0
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8016b1c:	fbcc 6501 	smlal	r6, r5, ip, r1
 8016b20:	f8dd c014 	ldr.w	ip, [sp, #20]
  sword32 g3_19 = 19 * g3;
 8016b24:	fb0b f303 	mul.w	r3, fp, r3
  sword32 f9_2 = 2 * f9;
 8016b28:	0052      	lsls	r2, r2, #1
  sword32 g3_19 = 19 * g3;
 8016b2a:	9318      	str	r3, [sp, #96]	; 0x60
  sword32 f9_2 = 2 * f9;
 8016b2c:	9215      	str	r2, [sp, #84]	; 0x54
  sword32 g4_19 = 19 * g4;
 8016b2e:	9b06      	ldr	r3, [sp, #24]
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8016b30:	fbc9 650c 	smlal	r6, r5, r9, ip
 8016b34:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8016b38:	9807      	ldr	r0, [sp, #28]
 8016b3a:	fbcc 6500 	smlal	r6, r5, ip, r0
 8016b3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016b40:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8016b44:	fbc7 6500 	smlal	r6, r5, r7, r0
 8016b48:	9813      	ldr	r0, [sp, #76]	; 0x4c
  sword32 g4_19 = 19 * g4;
 8016b4a:	fb0b f303 	mul.w	r3, fp, r3
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8016b4e:	fbc0 650c 	smlal	r6, r5, r0, ip
 8016b52:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016b54:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016b58:	fbca 6503 	smlal	r6, r5, sl, r3
 8016b5c:	fbc0 650c 	smlal	r6, r5, r0, ip
 8016b60:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016b62:	fbc8 6500 	smlal	r6, r5, r8, r0
 8016b66:	9815      	ldr	r0, [sp, #84]	; 0x54
  sword32 g1_19 = 19 * g1; /* 1.959375*2^29 */
 8016b68:	fb0b f204 	mul.w	r2, fp, r4
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8016b6c:	fbc0 6502 	smlal	r6, r5, r0, r2
  sword64 f1g0    = f1   * (sword64) g0;
 8016b70:	9a08      	ldr	r2, [sp, #32]
  sword64 h1 = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
 8016b72:	9801      	ldr	r0, [sp, #4]
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8016b74:	961b      	str	r6, [sp, #108]	; 0x6c
  sword64 f1g0    = f1   * (sword64) g0;
 8016b76:	fb81 c202 	smull	ip, r2, r1, r2
  sword64 h1 = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
 8016b7a:	fbc0 c204 	smlal	ip, r2, r0, r4
 8016b7e:	9803      	ldr	r0, [sp, #12]
 8016b80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016b82:	fbc0 c209 	smlal	ip, r2, r0, r9
 8016b86:	9805      	ldr	r0, [sp, #20]
 8016b88:	fbc0 c206 	smlal	ip, r2, r0, r6
 8016b8c:	9807      	ldr	r0, [sp, #28]
 8016b8e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016b90:	fbc0 c207 	smlal	ip, r2, r0, r7
 8016b94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016b96:	fbc0 c206 	smlal	ip, r2, r0, r6
 8016b9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016b9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016b9e:	fbc0 c20a 	smlal	ip, r2, r0, sl
 8016ba2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ba4:	fbc3 c200 	smlal	ip, r2, r3, r0
 8016ba8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016baa:	fbc0 c208 	smlal	ip, r2, r0, r8
 8016bae:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016bb0:	fbc0 c206 	smlal	ip, r2, r0, r6
 8016bb4:	921c      	str	r2, [sp, #112]	; 0x70
 8016bb6:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
  sword64 f1g1_2  = f1_2 * (sword64) g1;
 8016bba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 8016bbc:	e9dd 0c01 	ldrd	r0, ip, [sp, #4]
  sword64 f1g1_2  = f1_2 * (sword64) g1;
 8016bc0:	fb84 6202 	smull	r6, r2, r4, r2
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 8016bc4:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016bc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016bca:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016bce:	fbc1 6209 	smlal	r6, r2, r1, r9
 8016bd2:	fbcc 6200 	smlal	r6, r2, ip, r0
 8016bd6:	9805      	ldr	r0, [sp, #20]
 8016bd8:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8016bdc:	fbc0 6207 	smlal	r6, r2, r0, r7
 8016be0:	9807      	ldr	r0, [sp, #28]
 8016be2:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016be6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016be8:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016bec:	fbc0 620a 	smlal	r6, r2, r0, sl
 8016bf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016bf2:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016bf6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016bf8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8016bfc:	fbc3 6208 	smlal	r6, r2, r3, r8
 8016c00:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016c04:	921d      	str	r2, [sp, #116]	; 0x74
  sword64 f1g2    = f1   * (sword64) g2;
 8016c06:	9808      	ldr	r0, [sp, #32]
 8016c08:	9a02      	ldr	r2, [sp, #8]
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 8016c0a:	f8dd c010 	ldr.w	ip, [sp, #16]
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 8016c0e:	9618      	str	r6, [sp, #96]	; 0x60
  sword64 f1g2    = f1   * (sword64) g2;
 8016c10:	fb82 6200 	smull	r6, r2, r2, r0
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 8016c14:	9801      	ldr	r0, [sp, #4]
 8016c16:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c1c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8016c20:	fbc4 6209 	smlal	r6, r2, r4, r9
 8016c24:	fbc1 6200 	smlal	r6, r2, r1, r0
 8016c28:	9803      	ldr	r0, [sp, #12]
 8016c2a:	fbc0 6207 	smlal	r6, r2, r0, r7
 8016c2e:	9805      	ldr	r0, [sp, #20]
 8016c30:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016c34:	9807      	ldr	r0, [sp, #28]
 8016c36:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8016c3a:	fbc0 620a 	smlal	r6, r2, r0, sl
 8016c3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c40:	fbc0 620c 	smlal	r6, r2, r0, ip
 8016c44:	9810      	ldr	r0, [sp, #64]	; 0x40
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8016c46:	f8dd c018 	ldr.w	ip, [sp, #24]
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 8016c4a:	fbc0 6208 	smlal	r6, r2, r0, r8
 8016c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016c50:	fbc3 6200 	smlal	r6, r2, r3, r0
 8016c54:	e9cd 621e 	strd	r6, r2, [sp, #120]	; 0x78
  sword64 f1g3_2  = f1_2 * (sword64) g3;
 8016c58:	9b04      	ldr	r3, [sp, #16]
 8016c5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8016c5c:	9801      	ldr	r0, [sp, #4]
 8016c5e:	9e03      	ldr	r6, [sp, #12]
  sword64 f1g3_2  = f1_2 * (sword64) g3;
 8016c60:	fb83 2302 	smull	r2, r3, r3, r2
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8016c64:	fbc0 230c 	smlal	r2, r3, r0, ip
 8016c68:	9802      	ldr	r0, [sp, #8]
 8016c6a:	fbc0 2309 	smlal	r2, r3, r0, r9
 8016c6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016c70:	fbc4 2300 	smlal	r2, r3, r4, r0
 8016c74:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016c76:	fbc1 2307 	smlal	r2, r3, r1, r7
 8016c7a:	fbc6 2300 	smlal	r2, r3, r6, r0
 8016c7e:	9805      	ldr	r0, [sp, #20]
 8016c80:	fbc0 230a 	smlal	r2, r3, r0, sl
 8016c84:	9807      	ldr	r0, [sp, #28]
 8016c86:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 8016c8a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8016c8c:	fbc0 230c 	smlal	r2, r3, r0, ip
 8016c90:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c92:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8016c96:	fbc0 2308 	smlal	r2, r3, r0, r8
 8016c9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016c9c:	fbc0 230c 	smlal	r2, r3, r0, ip
 8016ca0:	9210      	str	r2, [sp, #64]	; 0x40
  sword64 f1g4    = f1   * (sword64) g4;
 8016ca2:	9808      	ldr	r0, [sp, #32]
 8016ca4:	9a06      	ldr	r2, [sp, #24]
 8016ca6:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 8016caa:	9801      	ldr	r0, [sp, #4]
 8016cac:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016cb0:	9804      	ldr	r0, [sp, #16]
 8016cb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016cb4:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8016cb8:	9802      	ldr	r0, [sp, #8]
 8016cba:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cc0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8016cc2:	fbc4 2c07 	smlal	r2, ip, r4, r7
 8016cc6:	fbc1 2c00 	smlal	r2, ip, r1, r0
 8016cca:	9803      	ldr	r0, [sp, #12]
 8016ccc:	fbc0 2c0a 	smlal	r2, ip, r0, sl
 8016cd0:	9805      	ldr	r0, [sp, #20]
 8016cd2:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016cd6:	9807      	ldr	r0, [sp, #28]
 8016cd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016cda:	fbc0 2c08 	smlal	r2, ip, r0, r8
 8016cde:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016ce0:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016ce4:	920e      	str	r2, [sp, #56]	; 0x38
  sword64 f1g5_2  = f1_2 * (sword64) g5;
 8016ce6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 8016cea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 8016cec:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
  sword64 f1g5_2  = f1_2 * (sword64) g5;
 8016cf0:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 8016cf4:	9801      	ldr	r0, [sp, #4]
 8016cf6:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016cfa:	9806      	ldr	r0, [sp, #24]
 8016cfc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016cfe:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8016d02:	9804      	ldr	r0, [sp, #16]
 8016d04:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d08:	9802      	ldr	r0, [sp, #8]
 8016d0a:	9e03      	ldr	r6, [sp, #12]
 8016d0c:	fbc0 2c07 	smlal	r2, ip, r0, r7
 8016d10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016d12:	fbc4 2c00 	smlal	r2, ip, r4, r0
 8016d16:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016d18:	fbc1 2c0a 	smlal	r2, ip, r1, sl
 8016d1c:	fbc6 2c00 	smlal	r2, ip, r6, r0
 8016d20:	9805      	ldr	r0, [sp, #20]
 8016d22:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016d24:	fbc0 2c08 	smlal	r2, ip, r0, r8
 8016d28:	9807      	ldr	r0, [sp, #28]
 8016d2a:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d2e:	9207      	str	r2, [sp, #28]
  sword64 f1g6    = f1   * (sword64) g6;
 8016d30:	9808      	ldr	r0, [sp, #32]
 8016d32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  sword64 h7 = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
 8016d34:	9e16      	ldr	r6, [sp, #88]	; 0x58
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 8016d36:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
  sword64 f1g6    = f1   * (sword64) g6;
 8016d3a:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h7 = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
 8016d3e:	9801      	ldr	r0, [sp, #4]
 8016d40:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016d46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016d48:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8016d4c:	9806      	ldr	r0, [sp, #24]
 8016d4e:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d52:	9804      	ldr	r0, [sp, #16]
 8016d54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016d56:	fbc0 2c07 	smlal	r2, ip, r0, r7
 8016d5a:	9802      	ldr	r0, [sp, #8]
 8016d5c:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016d62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016d64:	fbc4 2c0a 	smlal	r2, ip, r4, sl
 8016d68:	fbc1 2c00 	smlal	r2, ip, r1, r0
 8016d6c:	9803      	ldr	r0, [sp, #12]
 8016d6e:	fbc0 2c08 	smlal	r2, ip, r0, r8
 8016d72:	9805      	ldr	r0, [sp, #20]
 8016d74:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d78:	e9cd 2c22 	strd	r2, ip, [sp, #136]	; 0x88
  sword64 f1g7_2  = f1_2 * (sword64) g7;
 8016d7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016d7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 8016d80:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  sword64 f1g7_2  = f1_2 * (sword64) g7;
 8016d82:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 8016d86:	9801      	ldr	r0, [sp, #4]
 8016d88:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d8c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016d8e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016d90:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8016d94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016d96:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016d9a:	9806      	ldr	r0, [sp, #24]
 8016d9c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016d9e:	fbc0 2c07 	smlal	r2, ip, r0, r7
 8016da2:	9804      	ldr	r0, [sp, #16]
 8016da4:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8016da8:	9802      	ldr	r0, [sp, #8]
 8016daa:	fbc0 2c0a 	smlal	r2, ip, r0, sl
 8016dae:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016db0:	9e03      	ldr	r6, [sp, #12]
 8016db2:	fbc4 2c00 	smlal	r2, ip, r4, r0
 8016db6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016db8:	fbc1 2c08 	smlal	r2, ip, r1, r8
 8016dbc:	fbc6 2c00 	smlal	r2, ip, r6, r0
 8016dc0:	9203      	str	r2, [sp, #12]
  sword64 f1g8    = f1   * (sword64) g8;
 8016dc2:	9808      	ldr	r0, [sp, #32]
 8016dc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8016dc6:	9e01      	ldr	r6, [sp, #4]
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 8016dc8:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8016dcc:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  sword64 f1g8    = f1   * (sword64) g8;
 8016dd0:	fb82 2000 	smull	r2, r0, r2, r0
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8016dd4:	fbc6 200c 	smlal	r2, r0, r6, ip
 8016dd8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8016dda:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8016dde:	fbc6 2009 	smlal	r2, r0, r6, r9
 8016de2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016de4:	fbc6 200c 	smlal	r2, r0, r6, ip
 8016de8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016dea:	fbc6 2007 	smlal	r2, r0, r6, r7
 8016dee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016df0:	9e06      	ldr	r6, [sp, #24]
 8016df2:	fbc6 2007 	smlal	r2, r0, r6, r7
 8016df6:	9e04      	ldr	r6, [sp, #16]
 8016df8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016dfa:	fbc6 200a 	smlal	r2, r0, r6, sl
 8016dfe:	9e02      	ldr	r6, [sp, #8]
 8016e00:	fbc6 2007 	smlal	r2, r0, r6, r7
 8016e04:	fbc4 2008 	smlal	r2, r0, r4, r8
 8016e08:	4684      	mov	ip, r0
 8016e0a:	980c      	ldr	r0, [sp, #48]	; 0x30
    i.e. |h0| <= 1.4*2^60; narrower ranges for h2, h4, h6, h8
  |h1| <= (1.65*1.65*2^51*(1+1+19+19+19+19+19+19+19+19))
    i.e. |h1| <= 1.7*2^59; narrower ranges for h3, h5, h7, h9
  */

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016e0c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  /* |h0| <= 2^25 */
  /* |h4| <= 2^25 */
  /* |h1| <= 1.71*2^59 */
  /* |h5| <= 1.71*2^59 */

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8016e0e:	9f18      	ldr	r7, [sp, #96]	; 0x60
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8016e10:	fbc1 2c00 	smlal	r2, ip, r1, r0
 8016e14:	4616      	mov	r6, r2
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016e16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8016e18:	f8cd c020 	str.w	ip, [sp, #32]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016e1c:	f112 7000 	adds.w	r0, r2, #33554432	; 0x2000000
 8016e20:	f145 0100 	adc.w	r1, r5, #0
 8016e24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016e26:	ea4f 6890 	mov.w	r8, r0, lsr #26
 8016e2a:	ea48 1881 	orr.w	r8, r8, r1, lsl #6
 8016e2e:	eb18 0802 	adds.w	r8, r8, r2
 8016e32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e34:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8016e38:	eb42 62a1 	adc.w	r2, r2, r1, asr #26
 8016e3c:	1a20      	subs	r0, r4, r0
 8016e3e:	eb65 0101 	sbc.w	r1, r5, r1
 8016e42:	910a      	str	r1, [sp, #40]	; 0x28
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016e44:	9910      	ldr	r1, [sp, #64]	; 0x40
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016e46:	9009      	str	r0, [sp, #36]	; 0x24
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016e48:	f111 7400 	adds.w	r4, r1, #33554432	; 0x2000000
 8016e4c:	f143 0500 	adc.w	r5, r3, #0
 8016e50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016e52:	0ea0      	lsrs	r0, r4, #26
 8016e54:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
 8016e58:	1840      	adds	r0, r0, r1
 8016e5a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016e5c:	eb41 6ca5 	adc.w	ip, r1, r5, asr #26
 8016e60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016e62:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8016e66:	1b09      	subs	r1, r1, r4
 8016e68:	eb63 0305 	sbc.w	r3, r3, r5
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8016e6c:	f118 7580 	adds.w	r5, r8, #16777216	; 0x1000000
 8016e70:	f142 0200 	adc.w	r2, r2, #0
 8016e74:	0e6c      	lsrs	r4, r5, #25
 8016e76:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 8016e7a:	19e4      	adds	r4, r4, r7
 8016e7c:	9404      	str	r4, [sp, #16]
 8016e7e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8016e80:	9f07      	ldr	r7, [sp, #28]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8016e82:	f005 457e 	and.w	r5, r5, #4261412864	; 0xfe000000
 8016e86:	eb44 6262 	adc.w	r2, r4, r2, asr #25
 8016e8a:	ebb8 0405 	subs.w	r4, r8, r5
 8016e8e:	940b      	str	r4, [sp, #44]	; 0x2c
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8016e90:	f110 7480 	adds.w	r4, r0, #16777216	; 0x1000000
 8016e94:	f14c 0c00 	adc.w	ip, ip, #0
 8016e98:	0e65      	lsrs	r5, r4, #25
 8016e9a:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 8016e9e:	19ed      	adds	r5, r5, r7
 8016ea0:	9505      	str	r5, [sp, #20]
 8016ea2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8016ea4:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 8016ea8:	eb45 6c6c 	adc.w	ip, r5, ip, asr #25
 8016eac:	1b00      	subs	r0, r0, r4
 8016eae:	900c      	str	r0, [sp, #48]	; 0x30
  /* |h1| <= 2^24; from now on fits into int32 */
  /* |h5| <= 2^24; from now on fits into int32 */
  /* |h2| <= 1.41*2^60 */
  /* |h6| <= 1.41*2^60 */

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8016eb0:	9804      	ldr	r0, [sp, #16]
 8016eb2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8016eb4:	f110 7000 	adds.w	r0, r0, #33554432	; 0x2000000
 8016eb8:	9001      	str	r0, [sp, #4]
 8016eba:	f142 0200 	adc.w	r2, r2, #0
 8016ebe:	0e80      	lsrs	r0, r0, #26
 8016ec0:	ea40 1082 	orr.w	r0, r0, r2, lsl #6
 8016ec4:	1900      	adds	r0, r0, r4
 8016ec6:	9006      	str	r0, [sp, #24]
 8016ec8:	981f      	ldr	r0, [sp, #124]	; 0x7c
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016eca:	9c22      	ldr	r4, [sp, #136]	; 0x88
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8016ecc:	eb40 62a2 	adc.w	r2, r0, r2, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016ed0:	9805      	ldr	r0, [sp, #20]
 8016ed2:	f110 7000 	adds.w	r0, r0, #33554432	; 0x2000000
 8016ed6:	9002      	str	r0, [sp, #8]
 8016ed8:	f14c 0c00 	adc.w	ip, ip, #0
 8016edc:	0e80      	lsrs	r0, r0, #26
 8016ede:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 8016ee2:	1900      	adds	r0, r0, r4
 8016ee4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8016ee6:	eb44 6cac 	adc.w	ip, r4, ip, asr #26
  /* |h2| <= 2^25; from now on fits into int32 unchanged */
  /* |h6| <= 2^25; from now on fits into int32 unchanged */
  /* |h3| <= 1.71*2^59 */
  /* |h7| <= 1.71*2^59 */

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016eea:	9c06      	ldr	r4, [sp, #24]
 8016eec:	f114 7a80 	adds.w	sl, r4, #16777216	; 0x1000000
 8016ef0:	f142 0200 	adc.w	r2, r2, #0
 8016ef4:	ea4f 645a 	mov.w	r4, sl, lsr #25
 8016ef8:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 8016efc:	1864      	adds	r4, r4, r1
 8016efe:	eb43 6362 	adc.w	r3, r3, r2, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8016f02:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 8016f06:	9a03      	ldr	r2, [sp, #12]
 8016f08:	f14c 0c00 	adc.w	ip, ip, #0
 8016f0c:	ea4f 6159 	mov.w	r1, r9, lsr #25
 8016f10:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 8016f14:	1889      	adds	r1, r1, r2
 8016f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f18:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  /* |h3| <= 2^24; from now on fits into int32 unchanged */
  /* |h7| <= 2^24; from now on fits into int32 unchanged */
  /* |h4| <= 1.72*2^34 */
  /* |h8| <= 1.41*2^60 */

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016f1c:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 8016f20:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016f24:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 8016f28:	f14c 0c00 	adc.w	ip, ip, #0
 8016f2c:	ea4f 6298 	mov.w	r2, r8, lsr #26
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016f30:	9307      	str	r3, [sp, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016f32:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8016f36:	9b08      	ldr	r3, [sp, #32]
 8016f38:	1992      	adds	r2, r2, r6
 8016f3a:	eb43 6cac 	adc.w	ip, r3, ip, asr #26
  /* |h4| <= 2^25; from now on fits into int32 unchanged */
  /* |h8| <= 2^25; from now on fits into int32 unchanged */
  /* |h5| <= 1.01*2^24 */
  /* |h9| <= 1.71*2^59 */

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8016f3e:	f112 7380 	adds.w	r3, r2, #16777216	; 0x1000000
 8016f42:	f14c 0c00 	adc.w	ip, ip, #0
 8016f46:	0e5d      	lsrs	r5, r3, #25
 8016f48:	9303      	str	r3, [sp, #12]
 8016f4a:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 8016f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f50:	fba5 650b 	umull	r6, r5, r5, fp
 8016f54:	18f6      	adds	r6, r6, r3
 8016f56:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 8016f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f5c:	fb0b 550c 	mla	r5, fp, ip, r5
 8016f60:	eb45 0503 	adc.w	r5, r5, r3
  /* |h9| <= 2^24; from now on fits into int32 unchanged */
  /* |h0| <= 1.1*2^39 */

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8016f64:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000
 8016f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f6a:	f145 0500 	adc.w	r5, r5, #0
 8016f6e:	f00c 4b7c 	and.w	fp, ip, #4227858432	; 0xfc000000
 8016f72:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 8016f76:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 8016f7a:	ebb6 060b 	subs.w	r6, r6, fp
 8016f7e:	eb1c 0503 	adds.w	r5, ip, r3
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8016f82:	9b01      	ldr	r3, [sp, #4]
  /* |h0| <= 2^25; from now on fits into int32 unchanged */
  /* |h1| <= 1.01*2^24 */

  h[0] = (sword32)h0;
  h[1] = (sword32)h1;
 8016f84:	f8ce 5004 	str.w	r5, [lr, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8016f88:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 8016f8c:	9b04      	ldr	r3, [sp, #16]
  h[0] = (sword32)h0;
 8016f8e:	f8ce 6000 	str.w	r6, [lr]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8016f92:	1b5d      	subs	r5, r3, r5
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016f94:	9b06      	ldr	r3, [sp, #24]
  h[2] = (sword32)h2;
 8016f96:	f8ce 5008 	str.w	r5, [lr, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8016f9a:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 8016f9e:	ebb3 050a 	subs.w	r5, r3, sl
  h[3] = (sword32)h3;
 8016fa2:	f8ce 500c 	str.w	r5, [lr, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016fa6:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 8016faa:	1b64      	subs	r4, r4, r5
  h[4] = (sword32)h4;
 8016fac:	f8ce 4010 	str.w	r4, [lr, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016fb0:	9b07      	ldr	r3, [sp, #28]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016fb2:	9c05      	ldr	r4, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8016fb4:	0ebf      	lsrs	r7, r7, #26
 8016fb6:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 8016fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fbc:	18ff      	adds	r7, r7, r3
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016fbe:	9b02      	ldr	r3, [sp, #8]
  h[5] = (sword32)h5;
 8016fc0:	f8ce 7014 	str.w	r7, [lr, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8016fc4:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8016fc8:	1ae3      	subs	r3, r4, r3
  h[6] = (sword32)h6;
 8016fca:	f8ce 3018 	str.w	r3, [lr, #24]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8016fce:	9b03      	ldr	r3, [sp, #12]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8016fd0:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016fd4:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8016fd8:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8016fdc:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8016fe0:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8016fe4:	1ad2      	subs	r2, r2, r3
  h[7] = (sword32)h7;
 8016fe6:	f8ce 001c 	str.w	r0, [lr, #28]
  h[8] = (sword32)h8;
 8016fea:	f8ce 1020 	str.w	r1, [lr, #32]
  h[9] = (sword32)h9;
 8016fee:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
}
 8016ff2:	b025      	add	sp, #148	; 0x94
 8016ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ff8 <fe_invert>:
{
 8016ff8:	b530      	push	{r4, r5, lr}
 8016ffa:	b0a9      	sub	sp, #164	; 0xa4
 8016ffc:	460c      	mov	r4, r1
  fe t0 = {0};
 8016ffe:	2228      	movs	r2, #40	; 0x28
 8017000:	2100      	movs	r1, #0
{
 8017002:	4605      	mov	r5, r0
  fe t0 = {0};
 8017004:	4668      	mov	r0, sp
 8017006:	f006 fcf5 	bl	801d9f4 <memset>
  fe t1 = {0};
 801700a:	2228      	movs	r2, #40	; 0x28
 801700c:	2100      	movs	r1, #0
 801700e:	eb0d 0002 	add.w	r0, sp, r2
 8017012:	f006 fcef 	bl	801d9f4 <memset>
  fe t2 = {0};
 8017016:	2228      	movs	r2, #40	; 0x28
 8017018:	2100      	movs	r1, #0
 801701a:	a814      	add	r0, sp, #80	; 0x50
 801701c:	f006 fcea 	bl	801d9f4 <memset>
  fe t3 = {0};
 8017020:	2228      	movs	r2, #40	; 0x28
 8017022:	2100      	movs	r1, #0
 8017024:	a81e      	add	r0, sp, #120	; 0x78
 8017026:	f006 fce5 	bl	801d9f4 <memset>
  fe_sq(t0,z); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 801702a:	4621      	mov	r1, r4
 801702c:	4668      	mov	r0, sp
 801702e:	f7ff f914 	bl	801625a <fe_sq>
  fe_sq(t1,t0); for (i = 1;i < 2;++i) fe_sq(t1,t1);
 8017032:	4669      	mov	r1, sp
 8017034:	a80a      	add	r0, sp, #40	; 0x28
 8017036:	f7ff f910 	bl	801625a <fe_sq>
 801703a:	a90a      	add	r1, sp, #40	; 0x28
 801703c:	4608      	mov	r0, r1
 801703e:	f7ff f90c 	bl	801625a <fe_sq>
  fe_mul(t1,z,t1);
 8017042:	aa0a      	add	r2, sp, #40	; 0x28
 8017044:	4621      	mov	r1, r4
 8017046:	4610      	mov	r0, r2
 8017048:	f7ff fd14 	bl	8016a74 <fe_mul>
  fe_mul(t0,t0,t1);
 801704c:	aa0a      	add	r2, sp, #40	; 0x28
 801704e:	4669      	mov	r1, sp
 8017050:	4668      	mov	r0, sp
 8017052:	f7ff fd0f 	bl	8016a74 <fe_mul>
  fe_sq(t2,t0); for (i = 1;i < 1;++i) fe_sq(t2,t2);
 8017056:	4669      	mov	r1, sp
 8017058:	a814      	add	r0, sp, #80	; 0x50
 801705a:	f7ff f8fe 	bl	801625a <fe_sq>
  fe_mul(t1,t1,t2);
 801705e:	a90a      	add	r1, sp, #40	; 0x28
 8017060:	4608      	mov	r0, r1
 8017062:	aa14      	add	r2, sp, #80	; 0x50
 8017064:	f7ff fd06 	bl	8016a74 <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 5;++i) fe_sq(t2,t2);
 8017068:	a90a      	add	r1, sp, #40	; 0x28
 801706a:	a814      	add	r0, sp, #80	; 0x50
 801706c:	f7ff f8f5 	bl	801625a <fe_sq>
 8017070:	2404      	movs	r4, #4
 8017072:	a914      	add	r1, sp, #80	; 0x50
 8017074:	4608      	mov	r0, r1
 8017076:	f7ff f8f0 	bl	801625a <fe_sq>
 801707a:	3c01      	subs	r4, #1
 801707c:	d1f9      	bne.n	8017072 <fe_invert+0x7a>
  fe_mul(t1,t2,t1);
 801707e:	aa0a      	add	r2, sp, #40	; 0x28
 8017080:	4610      	mov	r0, r2
 8017082:	a914      	add	r1, sp, #80	; 0x50
 8017084:	f7ff fcf6 	bl	8016a74 <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 10;++i) fe_sq(t2,t2);
 8017088:	a90a      	add	r1, sp, #40	; 0x28
 801708a:	a814      	add	r0, sp, #80	; 0x50
 801708c:	f7ff f8e5 	bl	801625a <fe_sq>
 8017090:	2409      	movs	r4, #9
 8017092:	a914      	add	r1, sp, #80	; 0x50
 8017094:	4608      	mov	r0, r1
 8017096:	f7ff f8e0 	bl	801625a <fe_sq>
 801709a:	3c01      	subs	r4, #1
 801709c:	d1f9      	bne.n	8017092 <fe_invert+0x9a>
  fe_mul(t2,t2,t1);
 801709e:	a914      	add	r1, sp, #80	; 0x50
 80170a0:	4608      	mov	r0, r1
 80170a2:	aa0a      	add	r2, sp, #40	; 0x28
 80170a4:	f7ff fce6 	bl	8016a74 <fe_mul>
  fe_sq(t3,t2); for (i = 1;i < 20;++i) fe_sq(t3,t3);
 80170a8:	a914      	add	r1, sp, #80	; 0x50
 80170aa:	a81e      	add	r0, sp, #120	; 0x78
 80170ac:	f7ff f8d5 	bl	801625a <fe_sq>
 80170b0:	2413      	movs	r4, #19
 80170b2:	a91e      	add	r1, sp, #120	; 0x78
 80170b4:	4608      	mov	r0, r1
 80170b6:	f7ff f8d0 	bl	801625a <fe_sq>
 80170ba:	3c01      	subs	r4, #1
 80170bc:	d1f9      	bne.n	80170b2 <fe_invert+0xba>
  fe_mul(t2,t3,t2);
 80170be:	aa14      	add	r2, sp, #80	; 0x50
 80170c0:	4610      	mov	r0, r2
 80170c2:	a91e      	add	r1, sp, #120	; 0x78
 80170c4:	f7ff fcd6 	bl	8016a74 <fe_mul>
  fe_sq(t2,t2); for (i = 1;i < 10;++i) fe_sq(t2,t2);
 80170c8:	a914      	add	r1, sp, #80	; 0x50
 80170ca:	4608      	mov	r0, r1
 80170cc:	f7ff f8c5 	bl	801625a <fe_sq>
 80170d0:	2409      	movs	r4, #9
 80170d2:	a914      	add	r1, sp, #80	; 0x50
 80170d4:	4608      	mov	r0, r1
 80170d6:	f7ff f8c0 	bl	801625a <fe_sq>
 80170da:	3c01      	subs	r4, #1
 80170dc:	d1f9      	bne.n	80170d2 <fe_invert+0xda>
  fe_mul(t1,t2,t1);
 80170de:	aa0a      	add	r2, sp, #40	; 0x28
 80170e0:	4610      	mov	r0, r2
 80170e2:	a914      	add	r1, sp, #80	; 0x50
 80170e4:	f7ff fcc6 	bl	8016a74 <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 50;++i) fe_sq(t2,t2);
 80170e8:	a90a      	add	r1, sp, #40	; 0x28
 80170ea:	a814      	add	r0, sp, #80	; 0x50
 80170ec:	f7ff f8b5 	bl	801625a <fe_sq>
 80170f0:	2431      	movs	r4, #49	; 0x31
 80170f2:	a914      	add	r1, sp, #80	; 0x50
 80170f4:	4608      	mov	r0, r1
 80170f6:	f7ff f8b0 	bl	801625a <fe_sq>
 80170fa:	3c01      	subs	r4, #1
 80170fc:	d1f9      	bne.n	80170f2 <fe_invert+0xfa>
  fe_mul(t2,t2,t1);
 80170fe:	a914      	add	r1, sp, #80	; 0x50
 8017100:	4608      	mov	r0, r1
 8017102:	aa0a      	add	r2, sp, #40	; 0x28
 8017104:	f7ff fcb6 	bl	8016a74 <fe_mul>
  fe_sq(t3,t2); for (i = 1;i < 100;++i) fe_sq(t3,t3);
 8017108:	a914      	add	r1, sp, #80	; 0x50
 801710a:	a81e      	add	r0, sp, #120	; 0x78
 801710c:	f7ff f8a5 	bl	801625a <fe_sq>
 8017110:	2463      	movs	r4, #99	; 0x63
 8017112:	a91e      	add	r1, sp, #120	; 0x78
 8017114:	4608      	mov	r0, r1
 8017116:	f7ff f8a0 	bl	801625a <fe_sq>
 801711a:	3c01      	subs	r4, #1
 801711c:	d1f9      	bne.n	8017112 <fe_invert+0x11a>
  fe_mul(t2,t3,t2);
 801711e:	aa14      	add	r2, sp, #80	; 0x50
 8017120:	4610      	mov	r0, r2
 8017122:	a91e      	add	r1, sp, #120	; 0x78
 8017124:	f7ff fca6 	bl	8016a74 <fe_mul>
  fe_sq(t2,t2); for (i = 1;i < 50;++i) fe_sq(t2,t2);
 8017128:	a914      	add	r1, sp, #80	; 0x50
 801712a:	4608      	mov	r0, r1
 801712c:	f7ff f895 	bl	801625a <fe_sq>
 8017130:	2431      	movs	r4, #49	; 0x31
 8017132:	a914      	add	r1, sp, #80	; 0x50
 8017134:	4608      	mov	r0, r1
 8017136:	f7ff f890 	bl	801625a <fe_sq>
 801713a:	3c01      	subs	r4, #1
 801713c:	d1f9      	bne.n	8017132 <fe_invert+0x13a>
  fe_mul(t1,t2,t1);
 801713e:	aa0a      	add	r2, sp, #40	; 0x28
 8017140:	4610      	mov	r0, r2
 8017142:	a914      	add	r1, sp, #80	; 0x50
 8017144:	f7ff fc96 	bl	8016a74 <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 5;++i) fe_sq(t1,t1);
 8017148:	a90a      	add	r1, sp, #40	; 0x28
 801714a:	4608      	mov	r0, r1
 801714c:	f7ff f885 	bl	801625a <fe_sq>
 8017150:	2404      	movs	r4, #4
 8017152:	a90a      	add	r1, sp, #40	; 0x28
 8017154:	4608      	mov	r0, r1
 8017156:	f7ff f880 	bl	801625a <fe_sq>
 801715a:	3c01      	subs	r4, #1
 801715c:	d1f9      	bne.n	8017152 <fe_invert+0x15a>
  fe_mul(out,t1,t0);
 801715e:	466a      	mov	r2, sp
 8017160:	a90a      	add	r1, sp, #40	; 0x28
 8017162:	4628      	mov	r0, r5
 8017164:	f7ff fc86 	bl	8016a74 <fe_mul>
}
 8017168:	b029      	add	sp, #164	; 0xa4
 801716a:	bd30      	pop	{r4, r5, pc}

0801716c <fe_cswap>:

Preconditions: b in {0,1}.
*/

void fe_cswap(fe f, fe g, int b)
{
 801716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017170:	b08b      	sub	sp, #44	; 0x2c
  sword32 f5 = f[5];
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword32 g0 = g[0];
 8017172:	680b      	ldr	r3, [r1, #0]
 8017174:	9301      	str	r3, [sp, #4]
  sword32 g5 = g[5];
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 x0 = f0 ^ g0;
 8017176:	6804      	ldr	r4, [r0, #0]
  sword32 g1 = g[1];
 8017178:	684b      	ldr	r3, [r1, #4]
  sword32 x0 = f0 ^ g0;
 801717a:	9d01      	ldr	r5, [sp, #4]
  sword32 g1 = g[1];
 801717c:	9302      	str	r3, [sp, #8]
  sword32 x0 = f0 ^ g0;
 801717e:	ea84 0a05 	eor.w	sl, r4, r5
  sword32 g2 = g[2];
 8017182:	688b      	ldr	r3, [r1, #8]
  sword32 x1 = f1 ^ g1;
 8017184:	6844      	ldr	r4, [r0, #4]
 8017186:	9d02      	ldr	r5, [sp, #8]
  sword32 g2 = g[2];
 8017188:	9303      	str	r3, [sp, #12]
  sword32 x1 = f1 ^ g1;
 801718a:	ea84 0905 	eor.w	r9, r4, r5
  sword32 g3 = g[3];
 801718e:	68cb      	ldr	r3, [r1, #12]
  sword32 x2 = f2 ^ g2;
 8017190:	6884      	ldr	r4, [r0, #8]
 8017192:	9d03      	ldr	r5, [sp, #12]
  sword32 g3 = g[3];
 8017194:	9304      	str	r3, [sp, #16]
  sword32 x2 = f2 ^ g2;
 8017196:	ea84 0805 	eor.w	r8, r4, r5
  sword32 g4 = g[4];
 801719a:	690b      	ldr	r3, [r1, #16]
  sword32 x3 = f3 ^ g3;
 801719c:	68c4      	ldr	r4, [r0, #12]
 801719e:	9d04      	ldr	r5, [sp, #16]
  sword32 g4 = g[4];
 80171a0:	9305      	str	r3, [sp, #20]
  sword32 x3 = f3 ^ g3;
 80171a2:	ea84 0e05 	eor.w	lr, r4, r5
  sword32 g5 = g[5];
 80171a6:	694b      	ldr	r3, [r1, #20]
  sword32 x4 = f4 ^ g4;
 80171a8:	6904      	ldr	r4, [r0, #16]
 80171aa:	9d05      	ldr	r5, [sp, #20]
  sword32 g5 = g[5];
 80171ac:	9306      	str	r3, [sp, #24]
  sword32 g6 = g[6];
 80171ae:	698b      	ldr	r3, [r1, #24]
 80171b0:	9307      	str	r3, [sp, #28]
  sword32 x4 = f4 ^ g4;
 80171b2:	ea84 0c05 	eor.w	ip, r4, r5
  sword32 g7 = g[7];
 80171b6:	69cb      	ldr	r3, [r1, #28]
  sword32 x5 = f5 ^ g5;
 80171b8:	9d06      	ldr	r5, [sp, #24]
 80171ba:	6944      	ldr	r4, [r0, #20]
  sword32 g7 = g[7];
 80171bc:	9308      	str	r3, [sp, #32]
  sword32 g8 = g[8];
 80171be:	6a0b      	ldr	r3, [r1, #32]
 80171c0:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 x5 = f5 ^ g5;
 80171c2:	ea84 0705 	eor.w	r7, r4, r5
  sword32 g9 = g[9];
 80171c6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  sword32 x6 = f6 ^ g6;
 80171c8:	6984      	ldr	r4, [r0, #24]
 80171ca:	9d07      	ldr	r5, [sp, #28]
  sword32 x7 = f7 ^ g7;
  sword32 x8 = f8 ^ g8;
 80171cc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  sword32 x6 = f6 ^ g6;
 80171d0:	ea84 0605 	eor.w	r6, r4, r5
  sword32 x7 = f7 ^ g7;
 80171d4:	69c4      	ldr	r4, [r0, #28]
 80171d6:	9d08      	ldr	r5, [sp, #32]
 80171d8:	4065      	eors	r5, r4
  sword32 x8 = f8 ^ g8;
 80171da:	6a04      	ldr	r4, [r0, #32]
 80171dc:	ea84 040b 	eor.w	r4, r4, fp
  sword32 x9 = f9 ^ g9;
 80171e0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  b = -b;
 80171e4:	4252      	negs	r2, r2
  sword32 x9 = f9 ^ g9;
 80171e6:	ea8b 0b03 	eor.w	fp, fp, r3
  x0 &= b;
 80171ea:	ea0a 0a02 	and.w	sl, sl, r2
  x1 &= b;
 80171ee:	ea09 0902 	and.w	r9, r9, r2
  x2 &= b;
 80171f2:	ea08 0802 	and.w	r8, r8, r2
  x3 &= b;
 80171f6:	ea0e 0e02 	and.w	lr, lr, r2
  x4 &= b;
 80171fa:	ea0c 0c02 	and.w	ip, ip, r2
  x5 &= b;
 80171fe:	4017      	ands	r7, r2
  x6 &= b;
 8017200:	4016      	ands	r6, r2
  x7 &= b;
 8017202:	4015      	ands	r5, r2
  x8 &= b;
 8017204:	4014      	ands	r4, r2
  x9 &= b;
 8017206:	ea0b 0202 	and.w	r2, fp, r2
  f[0] = f0 ^ x0;
 801720a:	f8d0 b000 	ldr.w	fp, [r0]
 801720e:	ea8b 0b0a 	eor.w	fp, fp, sl
 8017212:	f8c0 b000 	str.w	fp, [r0]
  f[1] = f1 ^ x1;
 8017216:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801721a:	ea8b 0b09 	eor.w	fp, fp, r9
 801721e:	f8c0 b004 	str.w	fp, [r0, #4]
  f[2] = f2 ^ x2;
 8017222:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8017226:	ea8b 0b08 	eor.w	fp, fp, r8
 801722a:	f8c0 b008 	str.w	fp, [r0, #8]
  f[3] = f3 ^ x3;
 801722e:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8017232:	ea8b 0b0e 	eor.w	fp, fp, lr
 8017236:	f8c0 b00c 	str.w	fp, [r0, #12]
  f[4] = f4 ^ x4;
 801723a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 801723e:	ea8b 0b0c 	eor.w	fp, fp, ip
 8017242:	f8c0 b010 	str.w	fp, [r0, #16]
  f[5] = f5 ^ x5;
 8017246:	f8d0 b014 	ldr.w	fp, [r0, #20]
 801724a:	ea8b 0b07 	eor.w	fp, fp, r7
 801724e:	f8c0 b014 	str.w	fp, [r0, #20]
  f[6] = f6 ^ x6;
 8017252:	f8d0 b018 	ldr.w	fp, [r0, #24]
 8017256:	ea8b 0b06 	eor.w	fp, fp, r6
 801725a:	f8c0 b018 	str.w	fp, [r0, #24]
  f[7] = f7 ^ x7;
 801725e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8017262:	ea8b 0b05 	eor.w	fp, fp, r5
 8017266:	f8c0 b01c 	str.w	fp, [r0, #28]
  f[8] = f8 ^ x8;
 801726a:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801726e:	ea8b 0b04 	eor.w	fp, fp, r4
 8017272:	f8c0 b020 	str.w	fp, [r0, #32]
  f[9] = f9 ^ x9;
 8017276:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 801727a:	ea8b 0b02 	eor.w	fp, fp, r2
 801727e:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
  g[0] = g0 ^ x0;
 8017282:	9801      	ldr	r0, [sp, #4]
 8017284:	ea80 000a 	eor.w	r0, r0, sl
 8017288:	6008      	str	r0, [r1, #0]
  g[1] = g1 ^ x1;
 801728a:	9802      	ldr	r0, [sp, #8]
 801728c:	ea80 0009 	eor.w	r0, r0, r9
 8017290:	6048      	str	r0, [r1, #4]
  g[2] = g2 ^ x2;
 8017292:	9803      	ldr	r0, [sp, #12]
 8017294:	ea80 0008 	eor.w	r0, r0, r8
 8017298:	6088      	str	r0, [r1, #8]
  g[3] = g3 ^ x3;
 801729a:	9804      	ldr	r0, [sp, #16]
 801729c:	ea80 000e 	eor.w	r0, r0, lr
 80172a0:	60c8      	str	r0, [r1, #12]
  g[4] = g4 ^ x4;
 80172a2:	9805      	ldr	r0, [sp, #20]
 80172a4:	ea80 000c 	eor.w	r0, r0, ip
 80172a8:	6108      	str	r0, [r1, #16]
  g[5] = g5 ^ x5;
 80172aa:	9806      	ldr	r0, [sp, #24]
 80172ac:	4047      	eors	r7, r0
  g[6] = g6 ^ x6;
 80172ae:	9807      	ldr	r0, [sp, #28]
  g[5] = g5 ^ x5;
 80172b0:	614f      	str	r7, [r1, #20]
  g[6] = g6 ^ x6;
 80172b2:	4046      	eors	r6, r0
  g[7] = g7 ^ x7;
 80172b4:	9808      	ldr	r0, [sp, #32]
  g[6] = g6 ^ x6;
 80172b6:	618e      	str	r6, [r1, #24]
  g[7] = g7 ^ x7;
 80172b8:	4045      	eors	r5, r0
  g[8] = g8 ^ x8;
 80172ba:	9809      	ldr	r0, [sp, #36]	; 0x24
  g[7] = g7 ^ x7;
 80172bc:	61cd      	str	r5, [r1, #28]
  g[8] = g8 ^ x8;
 80172be:	4044      	eors	r4, r0
  g[9] = g9 ^ x9;
 80172c0:	405a      	eors	r2, r3
  g[8] = g8 ^ x8;
 80172c2:	620c      	str	r4, [r1, #32]
  g[9] = g9 ^ x9;
 80172c4:	624a      	str	r2, [r1, #36]	; 0x24
}
 80172c6:	b00b      	add	sp, #44	; 0x2c
 80172c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172cc <fe_mul121666>:
Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_mul121666(fe h,fe f)
{
 80172cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 f5 = f[5];
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword64 h0 = f0 * (sword64) 121666;
 80172d0:	4b68      	ldr	r3, [pc, #416]	; (8017474 <fe_mul121666+0x1a8>)
 80172d2:	680a      	ldr	r2, [r1, #0]
  sword64 h1 = f1 * (sword64) 121666;
 80172d4:	684e      	ldr	r6, [r1, #4]
  sword64 h2 = f2 * (sword64) 121666;
  sword64 h3 = f3 * (sword64) 121666;
 80172d6:	68cd      	ldr	r5, [r1, #12]
{
 80172d8:	b08b      	sub	sp, #44	; 0x2c
  sword64 h0 = f0 * (sword64) 121666;
 80172da:	fb82 9803 	smull	r9, r8, r2, r3
  sword64 h1 = f1 * (sword64) 121666;
 80172de:	fb86 6203 	smull	r6, r2, r6, r3
 80172e2:	9202      	str	r2, [sp, #8]
  sword64 h3 = f3 * (sword64) 121666;
 80172e4:	fb85 5203 	smull	r5, r2, r5, r3
 80172e8:	9203      	str	r2, [sp, #12]
  sword64 h4 = f4 * (sword64) 121666;
  sword64 h5 = f5 * (sword64) 121666;
 80172ea:	694a      	ldr	r2, [r1, #20]
 80172ec:	fb82 c203 	smull	ip, r2, r2, r3
 80172f0:	9204      	str	r2, [sp, #16]
  sword64 h6 = f6 * (sword64) 121666;
  sword64 h7 = f7 * (sword64) 121666;
 80172f2:	69ca      	ldr	r2, [r1, #28]
 80172f4:	fb82 2403 	smull	r2, r4, r2, r3
 80172f8:	9201      	str	r2, [sp, #4]
  sword64 h8 = f8 * (sword64) 121666;
  sword64 h9 = f9 * (sword64) 121666;
 80172fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  sword64 h7 = f7 * (sword64) 121666;
 80172fc:	9405      	str	r4, [sp, #20]
  sword64 h9 = f9 * (sword64) 121666;
 80172fe:	fb82 a403 	smull	sl, r4, r2, r3
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8017302:	f11a 7e80 	adds.w	lr, sl, #16777216	; 0x1000000
 8017306:	f144 0400 	adc.w	r4, r4, #0
 801730a:	ea4f 675e 	mov.w	r7, lr, lsr #25
 801730e:	f04f 0b13 	mov.w	fp, #19
 8017312:	ea47 17c4 	orr.w	r7, r7, r4, lsl #7
 8017316:	fba7 720b 	umull	r7, r2, r7, fp
 801731a:	1664      	asrs	r4, r4, #25
 801731c:	eb17 0909 	adds.w	r9, r7, r9
 8017320:	fb0b 2204 	mla	r2, fp, r4, r2
 8017324:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
 8017328:	eb42 0808 	adc.w	r8, r2, r8
 801732c:	ebba 020e 	subs.w	r2, sl, lr
 8017330:	9206      	str	r2, [sp, #24]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8017332:	9a02      	ldr	r2, [sp, #8]
 8017334:	f116 7480 	adds.w	r4, r6, #16777216	; 0x1000000
 8017338:	f142 0b00 	adc.w	fp, r2, #0
 801733c:	0e67      	lsrs	r7, r4, #25
 801733e:	688a      	ldr	r2, [r1, #8]
 8017340:	ea47 17cb 	orr.w	r7, r7, fp, lsl #7
 8017344:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 8017348:	ea4f 6b6b 	mov.w	fp, fp, asr #25
 801734c:	fbc2 7b03 	smlal	r7, fp, r2, r3
 8017350:	1b32      	subs	r2, r6, r4
 8017352:	9207      	str	r2, [sp, #28]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8017354:	9a03      	ldr	r2, [sp, #12]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8017356:	9702      	str	r7, [sp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8017358:	f115 7480 	adds.w	r4, r5, #16777216	; 0x1000000
 801735c:	f142 0e00 	adc.w	lr, r2, #0
 8017360:	0e66      	lsrs	r6, r4, #25
 8017362:	690a      	ldr	r2, [r1, #16]
 8017364:	ea46 16ce 	orr.w	r6, r6, lr, lsl #7
 8017368:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 801736c:	ea4f 6e6e 	mov.w	lr, lr, asr #25
 8017370:	fbc2 6e03 	smlal	r6, lr, r2, r3
 8017374:	1b2a      	subs	r2, r5, r4
 8017376:	9208      	str	r2, [sp, #32]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8017378:	9a04      	ldr	r2, [sp, #16]
 801737a:	698c      	ldr	r4, [r1, #24]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 801737c:	9603      	str	r6, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 801737e:	f11c 7580 	adds.w	r5, ip, #16777216	; 0x1000000
 8017382:	f142 0700 	adc.w	r7, r2, #0
 8017386:	f005 427e 	and.w	r2, r5, #4261412864	; 0xfe000000
 801738a:	ebbc 0202 	subs.w	r2, ip, r2
 801738e:	9209      	str	r2, [sp, #36]	; 0x24
 8017390:	0e6e      	lsrs	r6, r5, #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8017392:	9a01      	ldr	r2, [sp, #4]
 8017394:	f8d1 c020 	ldr.w	ip, [r1, #32]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8017398:	ea46 16c7 	orr.w	r6, r6, r7, lsl #7
 801739c:	167f      	asrs	r7, r7, #25
 801739e:	fbc4 6703 	smlal	r6, r7, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80173a2:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 80173a6:	9a05      	ldr	r2, [sp, #20]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80173a8:	9604      	str	r6, [sp, #16]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80173aa:	f142 0500 	adc.w	r5, r2, #0
 80173ae:	0e66      	lsrs	r6, r4, #25
 80173b0:	ea46 16c5 	orr.w	r6, r6, r5, lsl #7
 80173b4:	166d      	asrs	r5, r5, #25
 80173b6:	4629      	mov	r1, r5
 80173b8:	fbcc 6103 	smlal	r6, r1, ip, r3
 80173bc:	9b01      	ldr	r3, [sp, #4]
 80173be:	9605      	str	r6, [sp, #20]
 80173c0:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 80173c4:	1b1c      	subs	r4, r3, r4

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80173c6:	9b02      	ldr	r3, [sp, #8]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80173c8:	f119 7600 	adds.w	r6, r9, #33554432	; 0x2000000
 80173cc:	f148 0800 	adc.w	r8, r8, #0
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80173d0:	f113 7500 	adds.w	r5, r3, #33554432	; 0x2000000
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80173d4:	9b03      	ldr	r3, [sp, #12]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80173d6:	f14b 0b00 	adc.w	fp, fp, #0
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80173da:	f113 7c00 	adds.w	ip, r3, #33554432	; 0x2000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80173de:	9b04      	ldr	r3, [sp, #16]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80173e0:	9a05      	ldr	r2, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80173e2:	f14e 0e00 	adc.w	lr, lr, #0
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80173e6:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 80173ea:	f147 0700 	adc.w	r7, r7, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80173ee:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80173f2:	f006 427c 	and.w	r2, r6, #4227858432	; 0xfc000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80173f6:	f141 0100 	adc.w	r1, r1, #0
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80173fa:	0eb6      	lsrs	r6, r6, #26
 80173fc:	ebb9 0902 	subs.w	r9, r9, r2
 8017400:	9a07      	ldr	r2, [sp, #28]

  h[0] = (sword32)h0;
 8017402:	f8c0 9000 	str.w	r9, [r0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8017406:	ea46 1688 	orr.w	r6, r6, r8, lsl #6
 801740a:	18b6      	adds	r6, r6, r2
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 801740c:	9a02      	ldr	r2, [sp, #8]
  h[1] = (sword32)h1;
 801740e:	6046      	str	r6, [r0, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8017410:	f005 467c 	and.w	r6, r5, #4227858432	; 0xfc000000
 8017414:	1b96      	subs	r6, r2, r6
 8017416:	0ead      	lsrs	r5, r5, #26
 8017418:	9a08      	ldr	r2, [sp, #32]
  h[2] = (sword32)h2;
 801741a:	6086      	str	r6, [r0, #8]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 801741c:	ea45 158b 	orr.w	r5, r5, fp, lsl #6
 8017420:	18ad      	adds	r5, r5, r2
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8017422:	9a03      	ldr	r2, [sp, #12]
  h[3] = (sword32)h3;
 8017424:	60c5      	str	r5, [r0, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8017426:	f00c 467c 	and.w	r6, ip, #4227858432	; 0xfc000000
 801742a:	1b96      	subs	r6, r2, r6
 801742c:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 8017430:	9a09      	ldr	r2, [sp, #36]	; 0x24
  h[4] = (sword32)h4;
 8017432:	6106      	str	r6, [r0, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8017434:	ea4c 1c8e 	orr.w	ip, ip, lr, lsl #6
 8017438:	eb1c 0202 	adds.w	r2, ip, r2
  h[5] = (sword32)h5;
 801743c:	6142      	str	r2, [r0, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801743e:	f003 467c 	and.w	r6, r3, #4227858432	; 0xfc000000
 8017442:	9a04      	ldr	r2, [sp, #16]
 8017444:	0e9b      	lsrs	r3, r3, #26
 8017446:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 801744a:	1b96      	subs	r6, r2, r6
 801744c:	191b      	adds	r3, r3, r4
  h[6] = (sword32)h6;
  h[7] = (sword32)h7;
 801744e:	61c3      	str	r3, [r0, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8017450:	9b05      	ldr	r3, [sp, #20]
  h[6] = (sword32)h6;
 8017452:	6186      	str	r6, [r0, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8017454:	f00a 467c 	and.w	r6, sl, #4227858432	; 0xfc000000
 8017458:	1b9e      	subs	r6, r3, r6
 801745a:	ea4f 6a9a 	mov.w	sl, sl, lsr #26
 801745e:	9b06      	ldr	r3, [sp, #24]
  h[8] = (sword32)h8;
 8017460:	6206      	str	r6, [r0, #32]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8017462:	ea4a 1a81 	orr.w	sl, sl, r1, lsl #6
 8017466:	eb1a 0203 	adds.w	r2, sl, r3
  h[9] = (sword32)h9;
 801746a:	6242      	str	r2, [r0, #36]	; 0x24
}
 801746c:	b00b      	add	sp, #44	; 0x2c
 801746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017472:	bf00      	nop
 8017474:	0001db42 	.word	0x0001db42

08017478 <curve25519>:
{
 8017478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747c:	b0c7      	sub	sp, #284	; 0x11c
 801747e:	4616      	mov	r6, r2
  fe x2 = {0};
 8017480:	ac0a      	add	r4, sp, #40	; 0x28
  fe x1 = {0};
 8017482:	2228      	movs	r2, #40	; 0x28
{
 8017484:	4682      	mov	sl, r0
 8017486:	468b      	mov	fp, r1
  fe x1 = {0};
 8017488:	4668      	mov	r0, sp
 801748a:	2100      	movs	r1, #0
 801748c:	f006 fab2 	bl	801d9f4 <memset>
  fe x2 = {0};
 8017490:	2228      	movs	r2, #40	; 0x28
 8017492:	2100      	movs	r1, #0
 8017494:	4620      	mov	r0, r4
 8017496:	f006 faad 	bl	801d9f4 <memset>
  fe x3 = {0};
 801749a:	ad1e      	add	r5, sp, #120	; 0x78
  fe z2 = {0};
 801749c:	2228      	movs	r2, #40	; 0x28
 801749e:	2100      	movs	r1, #0
 80174a0:	a814      	add	r0, sp, #80	; 0x50
 80174a2:	f006 faa7 	bl	801d9f4 <memset>
  fe x3 = {0};
 80174a6:	2228      	movs	r2, #40	; 0x28
 80174a8:	2100      	movs	r1, #0
 80174aa:	4628      	mov	r0, r5
 80174ac:	f006 faa2 	bl	801d9f4 <memset>
  fe z3 = {0};
 80174b0:	2228      	movs	r2, #40	; 0x28
 80174b2:	2100      	movs	r1, #0
 80174b4:	a828      	add	r0, sp, #160	; 0xa0
 80174b6:	f006 fa9d 	bl	801d9f4 <memset>
  fe tmp0 = {0};
 80174ba:	2228      	movs	r2, #40	; 0x28
 80174bc:	2100      	movs	r1, #0
 80174be:	a832      	add	r0, sp, #200	; 0xc8
 80174c0:	f006 fa98 	bl	801d9f4 <memset>
  fe tmp1 = {0};
 80174c4:	2228      	movs	r2, #40	; 0x28
 80174c6:	2100      	movs	r1, #0
 80174c8:	a83c      	add	r0, sp, #240	; 0xf0
 80174ca:	f006 fa93 	bl	801d9f4 <memset>
  fe_frombytes(x1,p);
 80174ce:	4631      	mov	r1, r6
 80174d0:	4668      	mov	r0, sp
 80174d2:	f7ff f9ad 	bl	8016830 <fe_frombytes>
  fe_1(x2);
 80174d6:	4620      	mov	r0, r4
 80174d8:	f7fe fea5 	bl	8016226 <fe_1>
  fe_0(z2);
 80174dc:	a814      	add	r0, sp, #80	; 0x50
 80174de:	f7fe feaf 	bl	8016240 <fe_0>
  fe_copy(x3,x1);
 80174e2:	4669      	mov	r1, sp
 80174e4:	4628      	mov	r0, r5
 80174e6:	f7ff faad 	bl	8016a44 <fe_copy>
  fe_1(z3);
 80174ea:	a828      	add	r0, sp, #160	; 0xa0
 80174ec:	f7fe fe9b 	bl	8016226 <fe_1>
  swap = 0;
 80174f0:	2700      	movs	r7, #0
  for (pos = 254;pos >= 0;--pos) {
 80174f2:	f04f 08fe 	mov.w	r8, #254	; 0xfe
    fe_cswap(z2,z3,swap);
 80174f6:	4606      	mov	r6, r0
    b = n[pos / 8] >> (pos & 7);
 80174f8:	ea4f 03e8 	mov.w	r3, r8, asr #3
 80174fc:	f008 0207 	and.w	r2, r8, #7
 8017500:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8017504:	4113      	asrs	r3, r2
    b &= 1;
 8017506:	46b9      	mov	r9, r7
 8017508:	f003 0701 	and.w	r7, r3, #1
    swap ^= b;
 801750c:	ea87 0909 	eor.w	r9, r7, r9
    fe_cswap(x2,x3,swap);
 8017510:	464a      	mov	r2, r9
 8017512:	4629      	mov	r1, r5
 8017514:	4620      	mov	r0, r4
 8017516:	f7ff fe29 	bl	801716c <fe_cswap>
    fe_cswap(z2,z3,swap);
 801751a:	464a      	mov	r2, r9
 801751c:	4631      	mov	r1, r6
 801751e:	a814      	add	r0, sp, #80	; 0x50
 8017520:	f7ff fe24 	bl	801716c <fe_cswap>
    fe_sub(tmp0,x3,z3);
 8017524:	4632      	mov	r2, r6
 8017526:	4629      	mov	r1, r5
 8017528:	a832      	add	r0, sp, #200	; 0xc8
 801752a:	f7ff f950 	bl	80167ce <fe_sub>
    fe_sub(tmp1,x2,z2);
 801752e:	aa14      	add	r2, sp, #80	; 0x50
 8017530:	4621      	mov	r1, r4
 8017532:	a83c      	add	r0, sp, #240	; 0xf0
 8017534:	f7ff f94b 	bl	80167ce <fe_sub>
    fe_add(x2,x2,z2);
 8017538:	aa14      	add	r2, sp, #80	; 0x50
 801753a:	4621      	mov	r1, r4
 801753c:	4620      	mov	r0, r4
 801753e:	f7ff f864 	bl	801660a <fe_add>
    fe_add(z2,x3,z3);
 8017542:	4632      	mov	r2, r6
 8017544:	4629      	mov	r1, r5
 8017546:	a814      	add	r0, sp, #80	; 0x50
 8017548:	f7ff f85f 	bl	801660a <fe_add>
    fe_mul(z3,tmp0,x2);
 801754c:	4622      	mov	r2, r4
 801754e:	a932      	add	r1, sp, #200	; 0xc8
 8017550:	4630      	mov	r0, r6
 8017552:	f7ff fa8f 	bl	8016a74 <fe_mul>
    fe_mul(z2,z2,tmp1);
 8017556:	a914      	add	r1, sp, #80	; 0x50
 8017558:	aa3c      	add	r2, sp, #240	; 0xf0
 801755a:	4608      	mov	r0, r1
 801755c:	f7ff fa8a 	bl	8016a74 <fe_mul>
    fe_sq(tmp0,tmp1);
 8017560:	a93c      	add	r1, sp, #240	; 0xf0
 8017562:	a832      	add	r0, sp, #200	; 0xc8
 8017564:	f7fe fe79 	bl	801625a <fe_sq>
    fe_sq(tmp1,x2);
 8017568:	4621      	mov	r1, r4
 801756a:	a83c      	add	r0, sp, #240	; 0xf0
 801756c:	f7fe fe75 	bl	801625a <fe_sq>
    fe_add(x3,z3,z2);
 8017570:	aa14      	add	r2, sp, #80	; 0x50
 8017572:	4631      	mov	r1, r6
 8017574:	4628      	mov	r0, r5
 8017576:	f7ff f848 	bl	801660a <fe_add>
    fe_sub(z2,z3,z2);
 801757a:	aa14      	add	r2, sp, #80	; 0x50
 801757c:	4610      	mov	r0, r2
 801757e:	4631      	mov	r1, r6
 8017580:	f7ff f925 	bl	80167ce <fe_sub>
    fe_mul(x2,tmp1,tmp0);
 8017584:	aa32      	add	r2, sp, #200	; 0xc8
 8017586:	a93c      	add	r1, sp, #240	; 0xf0
 8017588:	4620      	mov	r0, r4
 801758a:	f7ff fa73 	bl	8016a74 <fe_mul>
    fe_sub(tmp1,tmp1,tmp0);
 801758e:	a93c      	add	r1, sp, #240	; 0xf0
 8017590:	aa32      	add	r2, sp, #200	; 0xc8
 8017592:	4608      	mov	r0, r1
 8017594:	f7ff f91b 	bl	80167ce <fe_sub>
    fe_sq(z2,z2);
 8017598:	a914      	add	r1, sp, #80	; 0x50
 801759a:	4608      	mov	r0, r1
 801759c:	f7fe fe5d 	bl	801625a <fe_sq>
    fe_mul121666(z3,tmp1);
 80175a0:	a93c      	add	r1, sp, #240	; 0xf0
 80175a2:	4630      	mov	r0, r6
 80175a4:	f7ff fe92 	bl	80172cc <fe_mul121666>
    fe_sq(x3,x3);
 80175a8:	4629      	mov	r1, r5
 80175aa:	4628      	mov	r0, r5
 80175ac:	f7fe fe55 	bl	801625a <fe_sq>
    fe_add(tmp0,tmp0,z3);
 80175b0:	a932      	add	r1, sp, #200	; 0xc8
 80175b2:	4608      	mov	r0, r1
 80175b4:	4632      	mov	r2, r6
 80175b6:	f7ff f828 	bl	801660a <fe_add>
    fe_mul(z3,x1,z2);
 80175ba:	aa14      	add	r2, sp, #80	; 0x50
 80175bc:	4669      	mov	r1, sp
 80175be:	4630      	mov	r0, r6
 80175c0:	f7ff fa58 	bl	8016a74 <fe_mul>
    fe_mul(z2,tmp1,tmp0);
 80175c4:	aa32      	add	r2, sp, #200	; 0xc8
 80175c6:	a93c      	add	r1, sp, #240	; 0xf0
 80175c8:	a814      	add	r0, sp, #80	; 0x50
 80175ca:	f7ff fa53 	bl	8016a74 <fe_mul>
  for (pos = 254;pos >= 0;--pos) {
 80175ce:	f1b8 0801 	subs.w	r8, r8, #1
 80175d2:	d291      	bcs.n	80174f8 <curve25519+0x80>
  fe_cswap(x2,x3,swap);
 80175d4:	463a      	mov	r2, r7
 80175d6:	4629      	mov	r1, r5
 80175d8:	4620      	mov	r0, r4
 80175da:	f7ff fdc7 	bl	801716c <fe_cswap>
  fe_cswap(z2,z3,swap);
 80175de:	463a      	mov	r2, r7
 80175e0:	4631      	mov	r1, r6
 80175e2:	a814      	add	r0, sp, #80	; 0x50
 80175e4:	f7ff fdc2 	bl	801716c <fe_cswap>
  fe_invert(z2,z2);
 80175e8:	a914      	add	r1, sp, #80	; 0x50
 80175ea:	4608      	mov	r0, r1
 80175ec:	f7ff fd04 	bl	8016ff8 <fe_invert>
  fe_mul(x2,x2,z2);
 80175f0:	aa14      	add	r2, sp, #80	; 0x50
 80175f2:	4621      	mov	r1, r4
 80175f4:	4620      	mov	r0, r4
 80175f6:	f7ff fa3d 	bl	8016a74 <fe_mul>
  fe_tobytes(q,x2);
 80175fa:	4650      	mov	r0, sl
 80175fc:	4621      	mov	r1, r4
 80175fe:	f7ff f835 	bl	801666c <fe_tobytes>
}
 8017602:	2000      	movs	r0, #0
 8017604:	b047      	add	sp, #284	; 0x11c
 8017606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801760a <fe_sq2>:
/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h,const fe f)
{
 801760a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 f0 = f[0];
  sword32 f1 = f[1];
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 801760e:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
{
 8017612:	b097      	sub	sp, #92	; 0x5c
 8017614:	4683      	mov	fp, r0
  sword32 f3 = f[3];
 8017616:	9409      	str	r4, [sp, #36]	; 0x24
  sword32 f4 = f[4];
 8017618:	690c      	ldr	r4, [r1, #16]
 801761a:	9402      	str	r4, [sp, #8]
  sword32 f5 = f[5];
 801761c:	694c      	ldr	r4, [r1, #20]
 801761e:	9404      	str	r4, [sp, #16]
  sword32 f6 = f[6];
 8017620:	698c      	ldr	r4, [r1, #24]
 8017622:	9401      	str	r4, [sp, #4]
  sword32 f7 = f[7];
 8017624:	69cc      	ldr	r4, [r1, #28]
 8017626:	9406      	str	r4, [sp, #24]
  sword32 f1 = f[1];
 8017628:	e9d1 0300 	ldrd	r0, r3, [r1]
  sword32 f8 = f[8];
 801762c:	6a0c      	ldr	r4, [r1, #32]
  sword32 f9 = f[9];
 801762e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8017630:	910a      	str	r1, [sp, #40]	; 0x28
  sword32 f0_2 = 2 * f0;
  sword32 f1_2 = 2 * f1;
  sword32 f2_2 = 2 * f2;
 8017632:	0051      	lsls	r1, r2, #1
 8017634:	9108      	str	r1, [sp, #32]
  sword32 f3_2 = 2 * f3;
 8017636:	9909      	ldr	r1, [sp, #36]	; 0x24
  sword32 f5_2 = 2 * f5;
  sword32 f6_2 = 2 * f6;
  sword32 f7_2 = 2 * f7;
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 8017638:	9e06      	ldr	r6, [sp, #24]
  sword32 f8 = f[8];
 801763a:	9407      	str	r4, [sp, #28]
  sword32 f3_2 = 2 * f3;
 801763c:	0049      	lsls	r1, r1, #1
 801763e:	9103      	str	r1, [sp, #12]
  sword32 f4_2 = 2 * f4;
 8017640:	9902      	ldr	r1, [sp, #8]
 8017642:	0049      	lsls	r1, r1, #1
 8017644:	910b      	str	r1, [sp, #44]	; 0x2c
  sword32 f5_2 = 2 * f5;
 8017646:	9904      	ldr	r1, [sp, #16]
 8017648:	0049      	lsls	r1, r1, #1
 801764a:	9105      	str	r1, [sp, #20]
  sword32 f7_2 = 2 * f7;
 801764c:	9906      	ldr	r1, [sp, #24]
 801764e:	0049      	lsls	r1, r1, #1
 8017650:	910c      	str	r1, [sp, #48]	; 0x30
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 8017652:	9901      	ldr	r1, [sp, #4]
 8017654:	2513      	movs	r5, #19
 8017656:	fb05 f401 	mul.w	r4, r5, r1
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 801765a:	2126      	movs	r1, #38	; 0x26
 801765c:	fb01 fe06 	mul.w	lr, r1, r6
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 8017660:	9e07      	ldr	r6, [sp, #28]
 8017662:	fb05 f706 	mul.w	r7, r5, r6
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 8017666:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 8017668:	9d04      	ldr	r5, [sp, #16]
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 801766a:	fb01 f806 	mul.w	r8, r1, r6
  sword32 f1_2 = 2 * f1;
 801766e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 8017672:	4369      	muls	r1, r5
  sword64 f1f4_2  = f1_2 * (sword64) f4;
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
  sword64 f1f6_2  = f1_2 * (sword64) f6;
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
  sword64 f1f8_2  = f1_2 * (sword64) f8;
  sword64 f1f9_76 = f1_2 * (sword64) f9_38;
 8017674:	fb8c 6508 	smull	r6, r5, ip, r8
  sword32 f0_2 = 2 * f0;
 8017678:	ea4f 0940 	mov.w	r9, r0, lsl #1
  sword64 f7f8_38 = f7_2 * (sword64) f8_19;
  sword64 f7f9_76 = f7_2 * (sword64) f9_38;
  sword64 f8f8_19 = f8   * (sword64) f8_19;
  sword64 f8f9_38 = f8   * (sword64) f9_38;
  sword64 f9f9_38 = f9   * (sword64) f9_38;
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 801767c:	fbc0 6500 	smlal	r6, r5, r0, r0
 8017680:	0050      	lsls	r0, r2, #1
 8017682:	fbc0 6507 	smlal	r6, r5, r0, r7
 8017686:	9803      	ldr	r0, [sp, #12]
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 8017688:	f8dd a00c 	ldr.w	sl, [sp, #12]
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 801768c:	fbc0 650e 	smlal	r6, r5, r0, lr
 8017690:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017692:	fbc0 6504 	smlal	r6, r5, r0, r4
 8017696:	9804      	ldr	r0, [sp, #16]
 8017698:	fbc0 6501 	smlal	r6, r5, r0, r1
 801769c:	960e      	str	r6, [sp, #56]	; 0x38
  sword64 f2f9_38 = f2   * (sword64) f9_38;
 801769e:	fb82 1008 	smull	r1, r0, r2, r8
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
 80176a2:	9e03      	ldr	r6, [sp, #12]
 80176a4:	fbc9 1003 	smlal	r1, r0, r9, r3
 80176a8:	fbc6 1007 	smlal	r1, r0, r6, r7
 80176ac:	9e02      	ldr	r6, [sp, #8]
 80176ae:	fbc6 100e 	smlal	r1, r0, r6, lr
 80176b2:	9e05      	ldr	r6, [sp, #20]
 80176b4:	fbc6 1004 	smlal	r1, r0, r6, r4
 80176b8:	910f      	str	r1, [sp, #60]	; 0x3c
  sword64 f1f1_2  = f1_2 * (sword64) f1;
 80176ba:	fb83 610c 	smull	r6, r1, r3, ip
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 80176be:	fbc9 6102 	smlal	r6, r1, r9, r2
 80176c2:	fbca 6108 	smlal	r6, r1, sl, r8
 80176c6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80176ca:	fbc7 610a 	smlal	r6, r1, r7, sl
 80176ce:	f8dd a014 	ldr.w	sl, [sp, #20]
 80176d2:	fbca 610e 	smlal	r6, r1, sl, lr
 80176d6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80176da:	fbca 6104 	smlal	r6, r1, sl, r4
 80176de:	9610      	str	r6, [sp, #64]	; 0x40
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 80176e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 80176e2:	910d      	str	r1, [sp, #52]	; 0x34
  sword64 f1f2_2  = f1_2 * (sword64) f2;
 80176e4:	fb82 4a0c 	smull	r4, sl, r2, ip
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 80176e8:	fbc9 4a06 	smlal	r4, sl, r9, r6
 80176ec:	9e02      	ldr	r6, [sp, #8]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 80176ee:	9902      	ldr	r1, [sp, #8]
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 80176f0:	fbc6 4a08 	smlal	r4, sl, r6, r8
 80176f4:	9e05      	ldr	r6, [sp, #20]
 80176f6:	fbc6 4a07 	smlal	r4, sl, r6, r7
 80176fa:	9e01      	ldr	r6, [sp, #4]
 80176fc:	fbc6 4a0e 	smlal	r4, sl, r6, lr
 8017700:	9411      	str	r4, [sp, #68]	; 0x44
  sword64 f1f3_4  = f1_2 * (sword64) f3_2;
 8017702:	9c03      	ldr	r4, [sp, #12]
 8017704:	fb8c 4304 	smull	r4, r3, ip, r4
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8017708:	fbc9 4301 	smlal	r4, r3, r9, r1
 801770c:	fbc2 4302 	smlal	r4, r3, r2, r2
 8017710:	9a05      	ldr	r2, [sp, #20]
  sword32 f6_2 = 2 * f6;
 8017712:	0076      	lsls	r6, r6, #1
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8017714:	fbc2 4308 	smlal	r4, r3, r2, r8
 8017718:	9a06      	ldr	r2, [sp, #24]
 801771a:	fbc7 4306 	smlal	r4, r3, r7, r6
 801771e:	fbc2 430e 	smlal	r4, r3, r2, lr
 8017722:	9412      	str	r4, [sp, #72]	; 0x48
  sword64 f1f4_2  = f1_2 * (sword64) f4;
 8017724:	fb81 420c 	smull	r4, r2, r1, ip
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 8017728:	9904      	ldr	r1, [sp, #16]
 801772a:	fbc9 4201 	smlal	r4, r2, r9, r1
 801772e:	e9dd 6108 	ldrd	r6, r1, [sp, #32]
 8017732:	fbc1 4206 	smlal	r4, r2, r1, r6
 8017736:	9901      	ldr	r1, [sp, #4]
 8017738:	fbc1 4208 	smlal	r4, r2, r1, r8
 801773c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801773e:	fbc1 4207 	smlal	r4, r2, r1, r7
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 8017742:	9905      	ldr	r1, [sp, #20]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 8017744:	9413      	str	r4, [sp, #76]	; 0x4c
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 8017746:	fb8c 4e01 	smull	r4, lr, ip, r1
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 801774a:	9901      	ldr	r1, [sp, #4]
 801774c:	fbc9 4e01 	smlal	r4, lr, r9, r1
 8017750:	9902      	ldr	r1, [sp, #8]
 8017752:	fbc1 4e06 	smlal	r4, lr, r1, r6
 8017756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017758:	9e03      	ldr	r6, [sp, #12]
 801775a:	fbc1 4e06 	smlal	r4, lr, r1, r6
 801775e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017760:	fbc1 4e08 	smlal	r4, lr, r1, r8
 8017764:	9907      	ldr	r1, [sp, #28]
 8017766:	fbc1 4e07 	smlal	r4, lr, r1, r7
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 801776a:	9901      	ldr	r1, [sp, #4]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 801776c:	9414      	str	r4, [sp, #80]	; 0x50
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 801776e:	fb81 640c 	smull	r6, r4, r1, ip
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 8017772:	9906      	ldr	r1, [sp, #24]
 8017774:	9f08      	ldr	r7, [sp, #32]
 8017776:	fbc9 6401 	smlal	r6, r4, r9, r1
 801777a:	9904      	ldr	r1, [sp, #16]
 801777c:	fbc1 6407 	smlal	r6, r4, r1, r7
 8017780:	e9dd 1702 	ldrd	r1, r7, [sp, #8]
 8017784:	fbc1 6407 	smlal	r6, r4, r1, r7
 8017788:	9907      	ldr	r1, [sp, #28]
 801778a:	fbc1 6408 	smlal	r6, r4, r1, r8
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 801778e:	990c      	ldr	r1, [sp, #48]	; 0x30
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 8017790:	9615      	str	r6, [sp, #84]	; 0x54
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 8017792:	fb8c 6701 	smull	r6, r7, ip, r1
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 8017796:	9907      	ldr	r1, [sp, #28]
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 8017798:	9409      	str	r4, [sp, #36]	; 0x24
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 801779a:	fbc9 6701 	smlal	r6, r7, r9, r1
 801779e:	9c08      	ldr	r4, [sp, #32]
 80177a0:	9901      	ldr	r1, [sp, #4]
 80177a2:	fbc1 6704 	smlal	r6, r7, r1, r4
 80177a6:	9903      	ldr	r1, [sp, #12]
 80177a8:	9c05      	ldr	r4, [sp, #20]
 80177aa:	fbc1 6704 	smlal	r6, r7, r1, r4
 80177ae:	9902      	ldr	r1, [sp, #8]
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 80177b0:	9c08      	ldr	r4, [sp, #32]
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80177b2:	fbc1 6701 	smlal	r6, r7, r1, r1
 80177b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80177b8:	fbc1 6708 	smlal	r6, r7, r1, r8
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 80177bc:	9907      	ldr	r1, [sp, #28]
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80177be:	9602      	str	r6, [sp, #8]
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 80177c0:	fb81 6c0c 	smull	r6, ip, r1, ip
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 80177c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80177c6:	fbc9 6c01 	smlal	r6, ip, r9, r1
 80177ca:	9906      	ldr	r1, [sp, #24]
 80177cc:	fbc1 6c04 	smlal	r6, ip, r1, r4
 80177d0:	9901      	ldr	r1, [sp, #4]
 80177d2:	9c03      	ldr	r4, [sp, #12]
 80177d4:	fbc1 6c04 	smlal	r6, ip, r1, r4
 80177d8:	9904      	ldr	r1, [sp, #16]
 80177da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177dc:	fbc1 6c04 	smlal	r6, ip, r1, r4
 80177e0:	46b1      	mov	r9, r6
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  h0 += h0;
 80177e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  h1 += h1;
 80177e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  h2 += h2;
 80177e6:	990d      	ldr	r1, [sp, #52]	; 0x34
  h0 += h0;
 80177e8:	19b6      	adds	r6, r6, r6
 80177ea:	416d      	adcs	r5, r5
  h1 += h1;
 80177ec:	1924      	adds	r4, r4, r4
 80177ee:	9401      	str	r4, [sp, #4]
  h2 += h2;
 80177f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  h1 += h1;
 80177f2:	4140      	adcs	r0, r0
  h2 += h2;
 80177f4:	1924      	adds	r4, r4, r4
 80177f6:	9403      	str	r4, [sp, #12]
  h3 += h3;
 80177f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
  h2 += h2;
 80177fa:	4149      	adcs	r1, r1
  h3 += h3;
 80177fc:	1924      	adds	r4, r4, r4
 80177fe:	9405      	str	r4, [sp, #20]
 8017800:	eb4a 040a 	adc.w	r4, sl, sl
 8017804:	9406      	str	r4, [sp, #24]
  h4 += h4;
 8017806:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017808:	eb14 0804 	adds.w	r8, r4, r4
  h5 += h5;
 801780c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  h4 += h4;
 801780e:	415b      	adcs	r3, r3
  h5 += h5;
 8017810:	eb14 0a04 	adds.w	sl, r4, r4
  h6 += h6;
 8017814:	9c14      	ldr	r4, [sp, #80]	; 0x50
  h5 += h5;
 8017816:	4152      	adcs	r2, r2
  h6 += h6;
 8017818:	1924      	adds	r4, r4, r4
 801781a:	9404      	str	r4, [sp, #16]
  h7 += h7;
 801781c:	9c15      	ldr	r4, [sp, #84]	; 0x54
  h6 += h6;
 801781e:	eb4e 0e0e 	adc.w	lr, lr, lr
  h7 += h7;
 8017822:	1924      	adds	r4, r4, r4
 8017824:	940b      	str	r4, [sp, #44]	; 0x2c
 8017826:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017828:	4164      	adcs	r4, r4
 801782a:	940c      	str	r4, [sp, #48]	; 0x30
  h8 += h8;
 801782c:	9c02      	ldr	r4, [sp, #8]
 801782e:	1924      	adds	r4, r4, r4
 8017830:	940d      	str	r4, [sp, #52]	; 0x34
 8017832:	eb47 0407 	adc.w	r4, r7, r7
 8017836:	940e      	str	r4, [sp, #56]	; 0x38
  h9 += h9;
 8017838:	eb19 0409 	adds.w	r4, r9, r9
 801783c:	940f      	str	r4, [sp, #60]	; 0x3c
 801783e:	eb4c 040c 	adc.w	r4, ip, ip

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8017842:	f116 7700 	adds.w	r7, r6, #33554432	; 0x2000000
 8017846:	f145 0c00 	adc.w	ip, r5, #0
 801784a:	f8dd 9004 	ldr.w	r9, [sp, #4]
  h9 += h9;
 801784e:	9410      	str	r4, [sp, #64]	; 0x40
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8017850:	0ebc      	lsrs	r4, r7, #26
 8017852:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
 8017856:	eb14 0909 	adds.w	r9, r4, r9
 801785a:	f007 477c 	and.w	r7, r7, #4227858432	; 0xfc000000
 801785e:	eb40 60ac 	adc.w	r0, r0, ip, asr #26
 8017862:	1bf4      	subs	r4, r6, r7
 8017864:	9407      	str	r4, [sp, #28]
 8017866:	eb65 040c 	sbc.w	r4, r5, ip
 801786a:	9408      	str	r4, [sp, #32]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801786c:	f118 7400 	adds.w	r4, r8, #33554432	; 0x2000000
 8017870:	f143 0500 	adc.w	r5, r3, #0
 8017874:	0ea6      	lsrs	r6, r4, #26
 8017876:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 801787a:	eb16 0a0a 	adds.w	sl, r6, sl
 801787e:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8017882:	eb42 62a5 	adc.w	r2, r2, r5, asr #26
 8017886:	ebb8 0804 	subs.w	r8, r8, r4
 801788a:	eb63 0305 	sbc.w	r3, r3, r5

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 801788e:	f119 7480 	adds.w	r4, r9, #16777216	; 0x1000000
 8017892:	9e03      	ldr	r6, [sp, #12]
 8017894:	f140 0000 	adc.w	r0, r0, #0
 8017898:	0e65      	lsrs	r5, r4, #25
 801789a:	ea45 15c0 	orr.w	r5, r5, r0, lsl #7
 801789e:	19ad      	adds	r5, r5, r6
 80178a0:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 80178a4:	eb41 6160 	adc.w	r1, r1, r0, asr #25
 80178a8:	ebb9 0004 	subs.w	r0, r9, r4
 80178ac:	9009      	str	r0, [sp, #36]	; 0x24
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80178ae:	f11a 7080 	adds.w	r0, sl, #16777216	; 0x1000000
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 80178b2:	9503      	str	r5, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80178b4:	f142 0200 	adc.w	r2, r2, #0
 80178b8:	9d04      	ldr	r5, [sp, #16]
 80178ba:	0e44      	lsrs	r4, r0, #25
 80178bc:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 80178c0:	1964      	adds	r4, r4, r5
 80178c2:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 80178c6:	eb4e 6e62 	adc.w	lr, lr, r2, asr #25
 80178ca:	ebba 0200 	subs.w	r2, sl, r0
 80178ce:	920a      	str	r2, [sp, #40]	; 0x28

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80178d0:	9a03      	ldr	r2, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80178d2:	9404      	str	r4, [sp, #16]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80178d4:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80178d8:	9201      	str	r2, [sp, #4]
 80178da:	f141 0100 	adc.w	r1, r1, #0
 80178de:	9805      	ldr	r0, [sp, #20]

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80178e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80178e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80178e4:	0e92      	lsrs	r2, r2, #26
 80178e6:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80178ea:	1812      	adds	r2, r2, r0
 80178ec:	9205      	str	r2, [sp, #20]
 80178ee:	9a06      	ldr	r2, [sp, #24]
 80178f0:	eb42 61a1 	adc.w	r1, r2, r1, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80178f4:	f114 7200 	adds.w	r2, r4, #33554432	; 0x2000000
 80178f8:	f14e 0e00 	adc.w	lr, lr, #0
 80178fc:	9202      	str	r2, [sp, #8]
 80178fe:	0e90      	lsrs	r0, r2, #26
 8017900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017902:	ea40 108e 	orr.w	r0, r0, lr, lsl #6
 8017906:	1880      	adds	r0, r0, r2
 8017908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801790a:	eb42 6cae 	adc.w	ip, r2, lr, asr #26
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 801790e:	9a05      	ldr	r2, [sp, #20]
 8017910:	f112 7a80 	adds.w	sl, r2, #16777216	; 0x1000000
 8017914:	f141 0100 	adc.w	r1, r1, #0
 8017918:	ea4f 645a 	mov.w	r4, sl, lsr #25
 801791c:	ea44 14c1 	orr.w	r4, r4, r1, lsl #7
 8017920:	eb14 0408 	adds.w	r4, r4, r8
 8017924:	eb43 6361 	adc.w	r3, r3, r1, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8017928:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 801792c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801792e:	f14c 0c00 	adc.w	ip, ip, #0
 8017932:	ea4f 6159 	mov.w	r1, r9, lsr #25
 8017936:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 801793a:	1889      	adds	r1, r1, r2
 801793c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801793e:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8017942:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 8017946:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801794a:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 801794e:	f14c 0c00 	adc.w	ip, ip, #0
 8017952:	ea4f 6298 	mov.w	r2, r8, lsr #26
 8017956:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 801795a:	1952      	adds	r2, r2, r5
 801795c:	eb46 6cac 	adc.w	ip, r6, ip, asr #26

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8017960:	f112 7e80 	adds.w	lr, r2, #16777216	; 0x1000000
 8017964:	f14c 0c00 	adc.w	ip, ip, #0
 8017968:	ea4f 655e 	mov.w	r5, lr, lsr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801796c:	9306      	str	r3, [sp, #24]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 801796e:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 8017972:	2313      	movs	r3, #19
 8017974:	fba5 6503 	umull	r6, r5, r5, r3
 8017978:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 801797c:	fb03 550c 	mla	r5, r3, ip, r5
 8017980:	9b07      	ldr	r3, [sp, #28]
 8017982:	18f6      	adds	r6, r6, r3
 8017984:	9b08      	ldr	r3, [sp, #32]
 8017986:	eb45 0503 	adc.w	r5, r5, r3

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801798a:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000
 801798e:	f00c 437c 	and.w	r3, ip, #4227858432	; 0xfc000000
 8017992:	f145 0500 	adc.w	r5, r5, #0
 8017996:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 801799a:	1af6      	subs	r6, r6, r3
 801799c:	9b09      	ldr	r3, [sp, #36]	; 0x24

  h[0] = (sword32)h0;
 801799e:	f8cb 6000 	str.w	r6, [fp]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80179a2:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 80179a6:	eb1c 0503 	adds.w	r5, ip, r3
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80179aa:	9b01      	ldr	r3, [sp, #4]
  h[1] = (sword32)h1;
 80179ac:	f8cb 5004 	str.w	r5, [fp, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80179b0:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 80179b4:	9b03      	ldr	r3, [sp, #12]
 80179b6:	1b5d      	subs	r5, r3, r5
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80179b8:	9b05      	ldr	r3, [sp, #20]
  h[2] = (sword32)h2;
 80179ba:	f8cb 5008 	str.w	r5, [fp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80179be:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 80179c2:	ebb3 050a 	subs.w	r5, r3, sl
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80179c6:	9b06      	ldr	r3, [sp, #24]
  h[3] = (sword32)h3;
 80179c8:	f8cb 500c 	str.w	r5, [fp, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80179cc:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 80179d0:	0ebf      	lsrs	r7, r7, #26
 80179d2:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 80179d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179d8:	1b64      	subs	r4, r4, r5
 80179da:	18ff      	adds	r7, r7, r3
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80179dc:	9b02      	ldr	r3, [sp, #8]
  h[4] = (sword32)h4;
 80179de:	f8cb 4010 	str.w	r4, [fp, #16]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80179e2:	9c04      	ldr	r4, [sp, #16]
  h[5] = (sword32)h5;
 80179e4:	f8cb 7014 	str.w	r7, [fp, #20]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80179e8:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80179ec:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 80179f0:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80179f4:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 80179f8:	1ae3      	subs	r3, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80179fa:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80179fe:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8017a02:	ebb2 020e 	subs.w	r2, r2, lr
  h[6] = (sword32)h6;
 8017a06:	f8cb 3018 	str.w	r3, [fp, #24]
  h[7] = (sword32)h7;
 8017a0a:	f8cb 001c 	str.w	r0, [fp, #28]
  h[8] = (sword32)h8;
 8017a0e:	f8cb 1020 	str.w	r1, [fp, #32]
  h[9] = (sword32)h9;
 8017a12:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
}
 8017a16:	b017      	add	sp, #92	; 0x5c
 8017a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a1c <fe_pow22523>:


void fe_pow22523(fe out,const fe z)
{
 8017a1c:	b570      	push	{r4, r5, r6, lr}
 8017a1e:	b09e      	sub	sp, #120	; 0x78
 8017a20:	460c      	mov	r4, r1
  fe t0 = {0};
 8017a22:	2228      	movs	r2, #40	; 0x28
 8017a24:	2100      	movs	r1, #0
{
 8017a26:	4605      	mov	r5, r0
  fe t0 = {0};
 8017a28:	4668      	mov	r0, sp
 8017a2a:	f005 ffe3 	bl	801d9f4 <memset>
  fe t1 = {0};
 8017a2e:	2228      	movs	r2, #40	; 0x28
 8017a30:	2100      	movs	r1, #0
 8017a32:	eb0d 0002 	add.w	r0, sp, r2
 8017a36:	f005 ffdd 	bl	801d9f4 <memset>
  fe t2 = {0};
 8017a3a:	2228      	movs	r2, #40	; 0x28
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	a814      	add	r0, sp, #80	; 0x50
 8017a40:	f005 ffd8 	bl	801d9f4 <memset>
  int i = 0;

  fe_sq(t0,z); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 8017a44:	4621      	mov	r1, r4
 8017a46:	4668      	mov	r0, sp
 8017a48:	f7fe fc07 	bl	801625a <fe_sq>
  fe_sq(t1,t0); for (i = 1;i < 2;++i) fe_sq(t1,t1);
 8017a4c:	4669      	mov	r1, sp
 8017a4e:	a80a      	add	r0, sp, #40	; 0x28
 8017a50:	f7fe fc03 	bl	801625a <fe_sq>
 8017a54:	a90a      	add	r1, sp, #40	; 0x28
 8017a56:	4608      	mov	r0, r1
 8017a58:	f7fe fbff 	bl	801625a <fe_sq>
  fe_mul(t1,z,t1);
 8017a5c:	aa0a      	add	r2, sp, #40	; 0x28
 8017a5e:	4610      	mov	r0, r2
 8017a60:	4621      	mov	r1, r4
 8017a62:	f7ff f807 	bl	8016a74 <fe_mul>
  fe_mul(t0,t0,t1);
 8017a66:	aa0a      	add	r2, sp, #40	; 0x28
 8017a68:	4669      	mov	r1, sp
 8017a6a:	4668      	mov	r0, sp
 8017a6c:	f7ff f802 	bl	8016a74 <fe_mul>
  fe_sq(t0,t0); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 8017a70:	4669      	mov	r1, sp
 8017a72:	4668      	mov	r0, sp
 8017a74:	f7fe fbf1 	bl	801625a <fe_sq>
  fe_mul(t0,t1,t0);
 8017a78:	466a      	mov	r2, sp
 8017a7a:	a90a      	add	r1, sp, #40	; 0x28
 8017a7c:	4668      	mov	r0, sp
 8017a7e:	f7fe fff9 	bl	8016a74 <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 5;++i) fe_sq(t1,t1);
 8017a82:	4669      	mov	r1, sp
 8017a84:	a80a      	add	r0, sp, #40	; 0x28
 8017a86:	f7fe fbe8 	bl	801625a <fe_sq>
 8017a8a:	2604      	movs	r6, #4
 8017a8c:	a90a      	add	r1, sp, #40	; 0x28
 8017a8e:	4608      	mov	r0, r1
 8017a90:	f7fe fbe3 	bl	801625a <fe_sq>
 8017a94:	3e01      	subs	r6, #1
 8017a96:	d1f9      	bne.n	8017a8c <fe_pow22523+0x70>
  fe_mul(t0,t1,t0);
 8017a98:	466a      	mov	r2, sp
 8017a9a:	a90a      	add	r1, sp, #40	; 0x28
 8017a9c:	4668      	mov	r0, sp
 8017a9e:	f7fe ffe9 	bl	8016a74 <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 10;++i) fe_sq(t1,t1);
 8017aa2:	4669      	mov	r1, sp
 8017aa4:	a80a      	add	r0, sp, #40	; 0x28
 8017aa6:	f7fe fbd8 	bl	801625a <fe_sq>
 8017aaa:	2609      	movs	r6, #9
 8017aac:	a90a      	add	r1, sp, #40	; 0x28
 8017aae:	4608      	mov	r0, r1
 8017ab0:	f7fe fbd3 	bl	801625a <fe_sq>
 8017ab4:	3e01      	subs	r6, #1
 8017ab6:	d1f9      	bne.n	8017aac <fe_pow22523+0x90>
  fe_mul(t1,t1,t0);
 8017ab8:	a90a      	add	r1, sp, #40	; 0x28
 8017aba:	4608      	mov	r0, r1
 8017abc:	466a      	mov	r2, sp
 8017abe:	f7fe ffd9 	bl	8016a74 <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 20;++i) fe_sq(t2,t2);
 8017ac2:	a90a      	add	r1, sp, #40	; 0x28
 8017ac4:	a814      	add	r0, sp, #80	; 0x50
 8017ac6:	f7fe fbc8 	bl	801625a <fe_sq>
 8017aca:	2613      	movs	r6, #19
 8017acc:	a914      	add	r1, sp, #80	; 0x50
 8017ace:	4608      	mov	r0, r1
 8017ad0:	f7fe fbc3 	bl	801625a <fe_sq>
 8017ad4:	3e01      	subs	r6, #1
 8017ad6:	d1f9      	bne.n	8017acc <fe_pow22523+0xb0>
  fe_mul(t1,t2,t1);
 8017ad8:	aa0a      	add	r2, sp, #40	; 0x28
 8017ada:	4610      	mov	r0, r2
 8017adc:	a914      	add	r1, sp, #80	; 0x50
 8017ade:	f7fe ffc9 	bl	8016a74 <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 10;++i) fe_sq(t1,t1);
 8017ae2:	a90a      	add	r1, sp, #40	; 0x28
 8017ae4:	4608      	mov	r0, r1
 8017ae6:	f7fe fbb8 	bl	801625a <fe_sq>
 8017aea:	2609      	movs	r6, #9
 8017aec:	a90a      	add	r1, sp, #40	; 0x28
 8017aee:	4608      	mov	r0, r1
 8017af0:	f7fe fbb3 	bl	801625a <fe_sq>
 8017af4:	3e01      	subs	r6, #1
 8017af6:	d1f9      	bne.n	8017aec <fe_pow22523+0xd0>
  fe_mul(t0,t1,t0);
 8017af8:	466a      	mov	r2, sp
 8017afa:	a90a      	add	r1, sp, #40	; 0x28
 8017afc:	4668      	mov	r0, sp
 8017afe:	f7fe ffb9 	bl	8016a74 <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 50;++i) fe_sq(t1,t1);
 8017b02:	4669      	mov	r1, sp
 8017b04:	a80a      	add	r0, sp, #40	; 0x28
 8017b06:	f7fe fba8 	bl	801625a <fe_sq>
 8017b0a:	2631      	movs	r6, #49	; 0x31
 8017b0c:	a90a      	add	r1, sp, #40	; 0x28
 8017b0e:	4608      	mov	r0, r1
 8017b10:	f7fe fba3 	bl	801625a <fe_sq>
 8017b14:	3e01      	subs	r6, #1
 8017b16:	d1f9      	bne.n	8017b0c <fe_pow22523+0xf0>
  fe_mul(t1,t1,t0);
 8017b18:	a90a      	add	r1, sp, #40	; 0x28
 8017b1a:	4608      	mov	r0, r1
 8017b1c:	466a      	mov	r2, sp
 8017b1e:	f7fe ffa9 	bl	8016a74 <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 100;++i) fe_sq(t2,t2);
 8017b22:	a90a      	add	r1, sp, #40	; 0x28
 8017b24:	a814      	add	r0, sp, #80	; 0x50
 8017b26:	f7fe fb98 	bl	801625a <fe_sq>
 8017b2a:	2663      	movs	r6, #99	; 0x63
 8017b2c:	a914      	add	r1, sp, #80	; 0x50
 8017b2e:	4608      	mov	r0, r1
 8017b30:	f7fe fb93 	bl	801625a <fe_sq>
 8017b34:	3e01      	subs	r6, #1
 8017b36:	d1f9      	bne.n	8017b2c <fe_pow22523+0x110>
  fe_mul(t1,t2,t1);
 8017b38:	aa0a      	add	r2, sp, #40	; 0x28
 8017b3a:	4610      	mov	r0, r2
 8017b3c:	a914      	add	r1, sp, #80	; 0x50
 8017b3e:	f7fe ff99 	bl	8016a74 <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 50;++i) fe_sq(t1,t1);
 8017b42:	a90a      	add	r1, sp, #40	; 0x28
 8017b44:	4608      	mov	r0, r1
 8017b46:	f7fe fb88 	bl	801625a <fe_sq>
 8017b4a:	2631      	movs	r6, #49	; 0x31
 8017b4c:	a90a      	add	r1, sp, #40	; 0x28
 8017b4e:	4608      	mov	r0, r1
 8017b50:	f7fe fb83 	bl	801625a <fe_sq>
 8017b54:	3e01      	subs	r6, #1
 8017b56:	d1f9      	bne.n	8017b4c <fe_pow22523+0x130>
  fe_mul(t0,t1,t0);
 8017b58:	466a      	mov	r2, sp
 8017b5a:	a90a      	add	r1, sp, #40	; 0x28
 8017b5c:	4668      	mov	r0, sp
 8017b5e:	f7fe ff89 	bl	8016a74 <fe_mul>
  fe_sq(t0,t0); for (i = 1;i < 2;++i) fe_sq(t0,t0);
 8017b62:	4669      	mov	r1, sp
 8017b64:	4668      	mov	r0, sp
 8017b66:	f7fe fb78 	bl	801625a <fe_sq>
 8017b6a:	4669      	mov	r1, sp
 8017b6c:	4668      	mov	r0, sp
 8017b6e:	f7fe fb74 	bl	801625a <fe_sq>
  fe_mul(out,t0,z);
 8017b72:	4622      	mov	r2, r4
 8017b74:	4669      	mov	r1, sp
 8017b76:	4628      	mov	r0, r5
 8017b78:	f7fe ff7c 	bl	8016a74 <fe_mul>

  return;
}
 8017b7c:	b01e      	add	sp, #120	; 0x78
 8017b7e:	bd70      	pop	{r4, r5, r6, pc}

08017b80 <fe_neg>:
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword32 h0 = -f0;
  sword32 h1 = -f1;
 8017b80:	684b      	ldr	r3, [r1, #4]
{
 8017b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sword32 h1 = -f1;
 8017b86:	f1c3 0e00 	rsb	lr, r3, #0
  sword32 h2 = -f2;
 8017b8a:	688b      	ldr	r3, [r1, #8]
  sword32 h3 = -f3;
 8017b8c:	68cf      	ldr	r7, [r1, #12]
  sword32 h4 = -f4;
 8017b8e:	690e      	ldr	r6, [r1, #16]
  sword32 h5 = -f5;
 8017b90:	694d      	ldr	r5, [r1, #20]
  sword32 h6 = -f6;
 8017b92:	698c      	ldr	r4, [r1, #24]
  sword32 h2 = -f2;
 8017b94:	f1c3 0c00 	rsb	ip, r3, #0
  sword32 h7 = -f7;
 8017b98:	69cb      	ldr	r3, [r1, #28]
 8017b9a:	f1c3 0800 	rsb	r8, r3, #0
  sword32 h8 = -f8;
 8017b9e:	6a0b      	ldr	r3, [r1, #32]
 8017ba0:	425a      	negs	r2, r3
  sword32 h9 = -f9;
 8017ba2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  sword32 h0 = -f0;
 8017ba4:	6809      	ldr	r1, [r1, #0]
  sword32 h3 = -f3;
 8017ba6:	427f      	negs	r7, r7
  sword32 h4 = -f4;
 8017ba8:	4276      	negs	r6, r6
  sword32 h5 = -f5;
 8017baa:	426d      	negs	r5, r5
  sword32 h6 = -f6;
 8017bac:	4264      	negs	r4, r4
  sword32 h9 = -f9;
 8017bae:	425b      	negs	r3, r3
  sword32 h0 = -f0;
 8017bb0:	4249      	negs	r1, r1
  h[0] = h0;
  h[1] = h1;
 8017bb2:	e9c0 1e00 	strd	r1, lr, [r0]
  h[2] = h2;
  h[3] = h3;
 8017bb6:	e9c0 c702 	strd	ip, r7, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 8017bba:	e9c0 6504 	strd	r6, r5, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 8017bbe:	e9c0 4806 	strd	r4, r8, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 8017bc2:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8017bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017bcc <fe_isnonzero>:
*/

static const unsigned char zero[32] = {0};

int fe_isnonzero(const fe f)
{
 8017bcc:	b530      	push	{r4, r5, lr}
 8017bce:	b089      	sub	sp, #36	; 0x24
 8017bd0:	4601      	mov	r1, r0
  unsigned char s[32];
  fe_tobytes(s,f);
 8017bd2:	4668      	mov	r0, sp
 8017bd4:	f7fe fd4a 	bl	801666c <fe_tobytes>
    for (i = 0; i < length; i++) {
 8017bd8:	4c07      	ldr	r4, [pc, #28]	; (8017bf8 <fe_isnonzero+0x2c>)
    int compareSum = 0;
 8017bda:	2300      	movs	r3, #0
    for (i = 0; i < length; i++) {
 8017bdc:	461a      	mov	r2, r3
        compareSum |= a[i] ^ b[i];
 8017bde:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017be2:	f814 5b01 	ldrb.w	r5, [r4], #1
    for (i = 0; i < length; i++) {
 8017be6:	3201      	adds	r2, #1
        compareSum |= a[i] ^ b[i];
 8017be8:	4069      	eors	r1, r5
    for (i = 0; i < length; i++) {
 8017bea:	2a20      	cmp	r2, #32
        compareSum |= a[i] ^ b[i];
 8017bec:	ea43 0301 	orr.w	r3, r3, r1
    for (i = 0; i < length; i++) {
 8017bf0:	d1f5      	bne.n	8017bde <fe_isnonzero+0x12>
  return ConstantCompare(s,zero,32);
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	b009      	add	sp, #36	; 0x24
 8017bf6:	bd30      	pop	{r4, r5, pc}
 8017bf8:	08022de1 	.word	0x08022de1

08017bfc <fe_isnegative>:
Preconditions:
   |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f)
{
 8017bfc:	b500      	push	{lr}
 8017bfe:	b089      	sub	sp, #36	; 0x24
 8017c00:	4601      	mov	r1, r0
  unsigned char s[32];
  fe_tobytes(s,f);
 8017c02:	4668      	mov	r0, sp
 8017c04:	f7fe fd32 	bl	801666c <fe_tobytes>
  return s[0] & 1;
 8017c08:	f89d 0000 	ldrb.w	r0, [sp]
}
 8017c0c:	f000 0001 	and.w	r0, r0, #1
 8017c10:	b009      	add	sp, #36	; 0x24
 8017c12:	f85d fb04 	ldr.w	pc, [sp], #4

08017c16 <fe_cmov>:

Preconditions: b in {0,1}.
*/

void fe_cmov(fe f, const fe g, int b)
{
 8017c16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 x0 = f0 ^ g0;
  sword32 x1 = f1 ^ g1;
  sword32 x2 = f2 ^ g2;
 8017c1a:	6883      	ldr	r3, [r0, #8]
 8017c1c:	688c      	ldr	r4, [r1, #8]
{
 8017c1e:	9201      	str	r2, [sp, #4]
  sword32 x2 = f2 ^ g2;
 8017c20:	405c      	eors	r4, r3
  sword32 x3 = f3 ^ g3;
 8017c22:	68c2      	ldr	r2, [r0, #12]
 8017c24:	68cb      	ldr	r3, [r1, #12]
  sword32 x0 = f0 ^ g0;
 8017c26:	680e      	ldr	r6, [r1, #0]
  sword32 x1 = f1 ^ g1;
 8017c28:	684d      	ldr	r5, [r1, #4]
  sword32 x3 = f3 ^ g3;
 8017c2a:	ea82 0e03 	eor.w	lr, r2, r3
  sword32 x4 = f4 ^ g4;
 8017c2e:	690b      	ldr	r3, [r1, #16]
 8017c30:	6902      	ldr	r2, [r0, #16]
 8017c32:	ea82 0803 	eor.w	r8, r2, r3
  sword32 x5 = f5 ^ g5;
 8017c36:	694b      	ldr	r3, [r1, #20]
 8017c38:	6942      	ldr	r2, [r0, #20]
 8017c3a:	ea82 0903 	eor.w	r9, r2, r3
  sword32 x6 = f6 ^ g6;
 8017c3e:	698b      	ldr	r3, [r1, #24]
 8017c40:	6982      	ldr	r2, [r0, #24]
 8017c42:	ea82 0a03 	eor.w	sl, r2, r3
  sword32 x7 = f7 ^ g7;
 8017c46:	69cb      	ldr	r3, [r1, #28]
 8017c48:	69c2      	ldr	r2, [r0, #28]
 8017c4a:	ea82 0b03 	eor.w	fp, r2, r3
  sword32 x8 = f8 ^ g8;
 8017c4e:	6a0b      	ldr	r3, [r1, #32]
 8017c50:	6a02      	ldr	r2, [r0, #32]
  sword32 x9 = f9 ^ g9;
 8017c52:	6a49      	ldr	r1, [r1, #36]	; 0x24
  sword32 x8 = f8 ^ g8;
 8017c54:	4053      	eors	r3, r2
  sword32 x9 = f9 ^ g9;
 8017c56:	6a42      	ldr	r2, [r0, #36]	; 0x24
  sword32 f1 = f[1];
 8017c58:	e9d0 c700 	ldrd	ip, r7, [r0]
  sword32 x9 = f9 ^ g9;
 8017c5c:	4051      	eors	r1, r2
  b = -b;
 8017c5e:	9a01      	ldr	r2, [sp, #4]
  sword32 x1 = f1 ^ g1;
 8017c60:	407d      	eors	r5, r7
  b = -b;
 8017c62:	4252      	negs	r2, r2
  x0 &= b;
  x1 &= b;
 8017c64:	4015      	ands	r5, r2
  x6 &= b;
  x7 &= b;
  x8 &= b;
  x9 &= b;
  f[0] = f0 ^ x0;
  f[1] = f1 ^ x1;
 8017c66:	407d      	eors	r5, r7
 8017c68:	6045      	str	r5, [r0, #4]
  f[2] = f2 ^ x2;
 8017c6a:	6885      	ldr	r5, [r0, #8]
  x2 &= b;
 8017c6c:	4014      	ands	r4, r2
  f[2] = f2 ^ x2;
 8017c6e:	406c      	eors	r4, r5
 8017c70:	6084      	str	r4, [r0, #8]
  f[3] = f3 ^ x3;
 8017c72:	68c4      	ldr	r4, [r0, #12]
  x3 &= b;
 8017c74:	ea0e 0e02 	and.w	lr, lr, r2
  f[3] = f3 ^ x3;
 8017c78:	ea8e 0404 	eor.w	r4, lr, r4
 8017c7c:	60c4      	str	r4, [r0, #12]
  f[4] = f4 ^ x4;
 8017c7e:	6904      	ldr	r4, [r0, #16]
  x4 &= b;
 8017c80:	ea08 0802 	and.w	r8, r8, r2
  f[4] = f4 ^ x4;
 8017c84:	ea88 0404 	eor.w	r4, r8, r4
 8017c88:	6104      	str	r4, [r0, #16]
  sword32 x0 = f0 ^ g0;
 8017c8a:	ea8c 0606 	eor.w	r6, ip, r6
  f[5] = f5 ^ x5;
 8017c8e:	6944      	ldr	r4, [r0, #20]
  x5 &= b;
 8017c90:	ea09 0902 	and.w	r9, r9, r2
  x0 &= b;
 8017c94:	4016      	ands	r6, r2
  f[5] = f5 ^ x5;
 8017c96:	ea89 0404 	eor.w	r4, r9, r4
  f[0] = f0 ^ x0;
 8017c9a:	ea86 060c 	eor.w	r6, r6, ip
 8017c9e:	6006      	str	r6, [r0, #0]
  f[5] = f5 ^ x5;
 8017ca0:	6144      	str	r4, [r0, #20]
  f[6] = f6 ^ x6;
 8017ca2:	6984      	ldr	r4, [r0, #24]
  x6 &= b;
 8017ca4:	ea0a 0a02 	and.w	sl, sl, r2
  f[6] = f6 ^ x6;
 8017ca8:	ea8a 0404 	eor.w	r4, sl, r4
 8017cac:	6184      	str	r4, [r0, #24]
  f[7] = f7 ^ x7;
 8017cae:	69c4      	ldr	r4, [r0, #28]
  x7 &= b;
 8017cb0:	ea0b 0b02 	and.w	fp, fp, r2
  f[7] = f7 ^ x7;
 8017cb4:	ea8b 0404 	eor.w	r4, fp, r4
 8017cb8:	61c4      	str	r4, [r0, #28]
  f[8] = f8 ^ x8;
 8017cba:	6a04      	ldr	r4, [r0, #32]
  x8 &= b;
 8017cbc:	4013      	ands	r3, r2
  f[8] = f8 ^ x8;
 8017cbe:	4063      	eors	r3, r4
 8017cc0:	6203      	str	r3, [r0, #32]
  f[9] = f9 ^ x9;
 8017cc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  x9 &= b;
 8017cc4:	400a      	ands	r2, r1
  f[9] = f9 ^ x9;
 8017cc6:	405a      	eors	r2, r3
 8017cc8:	6242      	str	r2, [r0, #36]	; 0x24
}
 8017cca:	b003      	add	sp, #12
 8017ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017cd0 <slide>:

#define SLIDE_SIZE 256

/* ge double scalar mult */
static void slide(signed char *r,const unsigned char *a)
{
 8017cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int i;
  int b;
  int k;

  for (i = 0;i < SLIDE_SIZE;++i)
 8017cd4:	2300      	movs	r3, #0
    r[i] = 1 & (a[i >> 3] >> (i & 7));
 8017cd6:	10da      	asrs	r2, r3, #3
 8017cd8:	f003 0407 	and.w	r4, r3, #7
 8017cdc:	5c8a      	ldrb	r2, [r1, r2]
 8017cde:	4122      	asrs	r2, r4
 8017ce0:	f002 0201 	and.w	r2, r2, #1
 8017ce4:	54c2      	strb	r2, [r0, r3]
  for (i = 0;i < SLIDE_SIZE;++i)
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017cec:	d1f3      	bne.n	8017cd6 <slide+0x6>
 8017cee:	2201      	movs	r2, #1
 8017cf0:	1e41      	subs	r1, r0, #1
 8017cf2:	f500 7c80 	add.w	ip, r0, #256	; 0x100
            for (k = i + b;k < SLIDE_SIZE;++k) {
              if (!r[k]) {
                r[k] = 1;
                break;
              }
              r[k] = 0;
 8017cf6:	2700      	movs	r7, #0
                r[k] = 1;
 8017cf8:	4696      	mov	lr, r2
  for (i = 0;i < SLIDE_SIZE;++i)
 8017cfa:	f240 1801 	movw	r8, #257	; 0x101
    if (r[i]) {
 8017cfe:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 8017d02:	bb73      	cbnz	r3, 8017d62 <slide+0x92>
  for (i = 0;i < SLIDE_SIZE;++i)
 8017d04:	3201      	adds	r2, #1
 8017d06:	4542      	cmp	r2, r8
 8017d08:	d1f9      	bne.n	8017cfe <slide+0x2e>
          } else
            break;
        }
      }
    }
}
 8017d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (r[i + b]) {
 8017d0e:	56c5      	ldrsb	r5, [r0, r3]
 8017d10:	b155      	cbz	r5, 8017d28 <slide+0x58>
          if (r[i] + (r[i + b] << b) <= 15) {
 8017d12:	f991 4000 	ldrsb.w	r4, [r1]
 8017d16:	40b5      	lsls	r5, r6
 8017d18:	eb04 0905 	add.w	r9, r4, r5
 8017d1c:	f1b9 0f0f 	cmp.w	r9, #15
 8017d20:	dc0a      	bgt.n	8017d38 <slide+0x68>
            r[i] += (signed char)(r[i + b] << b); r[i + b] = 0;
 8017d22:	f881 9000 	strb.w	r9, [r1]
 8017d26:	54c7      	strb	r7, [r0, r3]
      for (b = 1;b <= 6 && i + b < SLIDE_SIZE;++b) {
 8017d28:	3601      	adds	r6, #1
 8017d2a:	2e07      	cmp	r6, #7
 8017d2c:	f103 0301 	add.w	r3, r3, #1
 8017d30:	d0e8      	beq.n	8017d04 <slide+0x34>
 8017d32:	2bff      	cmp	r3, #255	; 0xff
 8017d34:	ddeb      	ble.n	8017d0e <slide+0x3e>
 8017d36:	e7e5      	b.n	8017d04 <slide+0x34>
          } else if (r[i] - (r[i + b] << b) >= -15) {
 8017d38:	1b64      	subs	r4, r4, r5
 8017d3a:	f114 0f0f 	cmn.w	r4, #15
 8017d3e:	dbe1      	blt.n	8017d04 <slide+0x34>
            r[i] -= (signed char)(r[i + b] << b);
 8017d40:	700c      	strb	r4, [r1, #0]
            for (k = i + b;k < SLIDE_SIZE;++k) {
 8017d42:	181c      	adds	r4, r3, r0
              if (!r[k]) {
 8017d44:	4625      	mov	r5, r4
 8017d46:	3401      	adds	r4, #1
 8017d48:	f995 9000 	ldrsb.w	r9, [r5]
 8017d4c:	f1b9 0f00 	cmp.w	r9, #0
 8017d50:	d102      	bne.n	8017d58 <slide+0x88>
                r[k] = 1;
 8017d52:	f885 e000 	strb.w	lr, [r5]
                break;
 8017d56:	e7e7      	b.n	8017d28 <slide+0x58>
            for (k = i + b;k < SLIDE_SIZE;++k) {
 8017d58:	45a4      	cmp	ip, r4
              r[k] = 0;
 8017d5a:	f804 7c01 	strb.w	r7, [r4, #-1]
            for (k = i + b;k < SLIDE_SIZE;++k) {
 8017d5e:	d1f1      	bne.n	8017d44 <slide+0x74>
 8017d60:	e7e2      	b.n	8017d28 <slide+0x58>
 8017d62:	4613      	mov	r3, r2
      for (b = 1;b <= 6 && i + b < SLIDE_SIZE;++b) {
 8017d64:	2601      	movs	r6, #1
 8017d66:	e7e4      	b.n	8017d32 <slide+0x62>

08017d68 <ge_p1p1_to_p2>:
r = p
*/

#ifndef CURVED25519_ASM
static void ge_p1p1_to_p2(ge_p2 *r,const ge_p1p1 *p)
{
 8017d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  fe_mul(r->X,p->X,p->T);
 8017d6a:	f101 0778 	add.w	r7, r1, #120	; 0x78
{
 8017d6e:	460c      	mov	r4, r1
 8017d70:	4605      	mov	r5, r0
  fe_mul(r->X,p->X,p->T);
 8017d72:	463a      	mov	r2, r7
  fe_mul(r->Y,p->Y,p->Z);
 8017d74:	f104 0650 	add.w	r6, r4, #80	; 0x50
  fe_mul(r->X,p->X,p->T);
 8017d78:	f7fe fe7c 	bl	8016a74 <fe_mul>
  fe_mul(r->Y,p->Y,p->Z);
 8017d7c:	4632      	mov	r2, r6
 8017d7e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017d82:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017d86:	f7fe fe75 	bl	8016a74 <fe_mul>
  fe_mul(r->Z,p->Z,p->T);
 8017d8a:	463a      	mov	r2, r7
 8017d8c:	4631      	mov	r1, r6
 8017d8e:	f105 0050 	add.w	r0, r5, #80	; 0x50
}
 8017d92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  fe_mul(r->Z,p->Z,p->T);
 8017d96:	f7fe be6d 	b.w	8016a74 <fe_mul>

08017d9a <ge_madd>:
{
 8017d9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d9e:	4605      	mov	r5, r0
    fe_add(r->X,p->Y,p->X);
 8017da0:	f101 0828 	add.w	r8, r1, #40	; 0x28
{
 8017da4:	b08b      	sub	sp, #44	; 0x2c
    fe_sub(r->Y,p->Y,p->X);
 8017da6:	f105 0628 	add.w	r6, r5, #40	; 0x28
{
 8017daa:	460c      	mov	r4, r1
 8017dac:	4617      	mov	r7, r2
    fe_add(r->X,p->Y,p->X);
 8017dae:	460a      	mov	r2, r1
 8017db0:	4641      	mov	r1, r8
 8017db2:	f7fe fc2a 	bl	801660a <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 8017db6:	4622      	mov	r2, r4
 8017db8:	4641      	mov	r1, r8
 8017dba:	4630      	mov	r0, r6
    fe_mul(r->Z,r->X,q->yplusx);
 8017dbc:	f105 0850 	add.w	r8, r5, #80	; 0x50
    fe_sub(r->Y,p->Y,p->X);
 8017dc0:	f7fe fd05 	bl	80167ce <fe_sub>
    fe_mul(r->Z,r->X,q->yplusx);
 8017dc4:	463a      	mov	r2, r7
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	4640      	mov	r0, r8
 8017dca:	f7fe fe53 	bl	8016a74 <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 8017dce:	f105 0978 	add.w	r9, r5, #120	; 0x78
    fe_mul(r->Y,r->Y,q->yminusx);
 8017dd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017dd6:	4631      	mov	r1, r6
 8017dd8:	4630      	mov	r0, r6
 8017dda:	f7fe fe4b 	bl	8016a74 <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 8017dde:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8017de2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017de6:	4648      	mov	r0, r9
 8017de8:	f7fe fe44 	bl	8016a74 <fe_mul>
    fe_add(t0,p->Z,p->Z);
 8017dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017df0:	4611      	mov	r1, r2
 8017df2:	4668      	mov	r0, sp
 8017df4:	f7fe fc09 	bl	801660a <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 8017df8:	4632      	mov	r2, r6
 8017dfa:	4641      	mov	r1, r8
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	f7fe fce6 	bl	80167ce <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 8017e02:	4632      	mov	r2, r6
 8017e04:	4641      	mov	r1, r8
 8017e06:	4630      	mov	r0, r6
 8017e08:	f7fe fbff 	bl	801660a <fe_add>
    fe_add(r->Z,t0,r->T);
 8017e0c:	464a      	mov	r2, r9
 8017e0e:	4669      	mov	r1, sp
 8017e10:	4640      	mov	r0, r8
 8017e12:	f7fe fbfa 	bl	801660a <fe_add>
    fe_sub(r->T,t0,r->T);
 8017e16:	464a      	mov	r2, r9
 8017e18:	4669      	mov	r1, sp
 8017e1a:	4648      	mov	r0, r9
 8017e1c:	f7fe fcd7 	bl	80167ce <fe_sub>
}
 8017e20:	b00b      	add	sp, #44	; 0x2c
 8017e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017e26 <ge_p1p1_to_p3>:
r = p
*/

#ifndef CURVED25519_ASM
static WC_INLINE void ge_p1p1_to_p3(ge_p3 *r,const ge_p1p1 *p)
{
 8017e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e2a:	460c      	mov	r4, r1
  fe_mul(r->X,p->X,p->T);
 8017e2c:	f101 0878 	add.w	r8, r1, #120	; 0x78
{
 8017e30:	4605      	mov	r5, r0
  fe_mul(r->X,p->X,p->T);
 8017e32:	4642      	mov	r2, r8
  fe_mul(r->Y,p->Y,p->Z);
 8017e34:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8017e38:	f104 0750 	add.w	r7, r4, #80	; 0x50
  fe_mul(r->X,p->X,p->T);
 8017e3c:	f7fe fe1a 	bl	8016a74 <fe_mul>
  fe_mul(r->Y,p->Y,p->Z);
 8017e40:	463a      	mov	r2, r7
 8017e42:	4631      	mov	r1, r6
 8017e44:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017e48:	f7fe fe14 	bl	8016a74 <fe_mul>
  fe_mul(r->Z,p->Z,p->T);
 8017e4c:	4642      	mov	r2, r8
 8017e4e:	4639      	mov	r1, r7
 8017e50:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8017e54:	f7fe fe0e 	bl	8016a74 <fe_mul>
  fe_mul(r->T,p->X,p->Y);
 8017e58:	4632      	mov	r2, r6
 8017e5a:	4621      	mov	r1, r4
 8017e5c:	f105 0078 	add.w	r0, r5, #120	; 0x78
}
 8017e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  fe_mul(r->T,p->X,p->Y);
 8017e64:	f7fe be06 	b.w	8016a74 <fe_mul>

08017e68 <ge_add>:
{
 8017e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e6c:	4604      	mov	r4, r0
    fe_add(r->X,p->Y,p->X);
 8017e6e:	f101 0828 	add.w	r8, r1, #40	; 0x28
{
 8017e72:	b08b      	sub	sp, #44	; 0x2c
    fe_sub(r->Y,p->Y,p->X);
 8017e74:	f104 0728 	add.w	r7, r4, #40	; 0x28
{
 8017e78:	4616      	mov	r6, r2
 8017e7a:	460d      	mov	r5, r1
    fe_add(r->X,p->Y,p->X);
 8017e7c:	460a      	mov	r2, r1
 8017e7e:	4641      	mov	r1, r8
 8017e80:	f7fe fbc3 	bl	801660a <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 8017e84:	462a      	mov	r2, r5
 8017e86:	4641      	mov	r1, r8
 8017e88:	4638      	mov	r0, r7
    fe_mul(r->Z,r->X,q->YplusX);
 8017e8a:	f104 0850 	add.w	r8, r4, #80	; 0x50
    fe_sub(r->Y,p->Y,p->X);
 8017e8e:	f7fe fc9e 	bl	80167ce <fe_sub>
    fe_mul(r->Z,r->X,q->YplusX);
 8017e92:	4632      	mov	r2, r6
 8017e94:	4621      	mov	r1, r4
 8017e96:	4640      	mov	r0, r8
 8017e98:	f7fe fdec 	bl	8016a74 <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 8017e9c:	f104 0978 	add.w	r9, r4, #120	; 0x78
    fe_mul(r->Y,r->Y,q->YminusX);
 8017ea0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8017ea4:	4639      	mov	r1, r7
 8017ea6:	4638      	mov	r0, r7
 8017ea8:	f7fe fde4 	bl	8016a74 <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 8017eac:	f105 0278 	add.w	r2, r5, #120	; 0x78
 8017eb0:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8017eb4:	4648      	mov	r0, r9
 8017eb6:	f7fe fddd 	bl	8016a74 <fe_mul>
    fe_mul(r->X,p->Z,q->Z);
 8017eba:	f106 0250 	add.w	r2, r6, #80	; 0x50
 8017ebe:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f7fe fdd6 	bl	8016a74 <fe_mul>
    fe_add(t0,r->X,r->X);
 8017ec8:	4622      	mov	r2, r4
 8017eca:	4621      	mov	r1, r4
 8017ecc:	4668      	mov	r0, sp
 8017ece:	f7fe fb9c 	bl	801660a <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 8017ed2:	463a      	mov	r2, r7
 8017ed4:	4641      	mov	r1, r8
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f7fe fc79 	bl	80167ce <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 8017edc:	463a      	mov	r2, r7
 8017ede:	4641      	mov	r1, r8
 8017ee0:	4638      	mov	r0, r7
 8017ee2:	f7fe fb92 	bl	801660a <fe_add>
    fe_add(r->Z,t0,r->T);
 8017ee6:	464a      	mov	r2, r9
 8017ee8:	4669      	mov	r1, sp
 8017eea:	4640      	mov	r0, r8
 8017eec:	f7fe fb8d 	bl	801660a <fe_add>
    fe_sub(r->T,t0,r->T);
 8017ef0:	464a      	mov	r2, r9
 8017ef2:	4669      	mov	r1, sp
 8017ef4:	4648      	mov	r0, r9
 8017ef6:	f7fe fc6a 	bl	80167ce <fe_sub>
}
 8017efa:	b00b      	add	sp, #44	; 0x2c
 8017efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017f00 <ge_p3_to_cached>:
} ;
#endif


static WC_INLINE void ge_p3_to_cached(ge_cached *r,const ge_p3 *p)
{
 8017f00:	b570      	push	{r4, r5, r6, lr}
  fe_add(r->YplusX,p->Y,p->X);
 8017f02:	f101 0628 	add.w	r6, r1, #40	; 0x28
{
 8017f06:	4605      	mov	r5, r0
 8017f08:	460c      	mov	r4, r1
  fe_add(r->YplusX,p->Y,p->X);
 8017f0a:	460a      	mov	r2, r1
 8017f0c:	4631      	mov	r1, r6
 8017f0e:	f7fe fb7c 	bl	801660a <fe_add>
  fe_sub(r->YminusX,p->Y,p->X);
 8017f12:	4622      	mov	r2, r4
 8017f14:	4631      	mov	r1, r6
 8017f16:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017f1a:	f7fe fc58 	bl	80167ce <fe_sub>
  fe_copy(r->Z,p->Z);
 8017f1e:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8017f22:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8017f26:	f7fe fd8d 	bl	8016a44 <fe_copy>
  fe_mul(r->T2d,p->T,d2);
 8017f2a:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8017f2e:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8017f32:	4a02      	ldr	r2, [pc, #8]	; (8017f3c <ge_p3_to_cached+0x3c>)
}
 8017f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fe_mul(r->T2d,p->T,d2);
 8017f38:	f7fe bd9c 	b.w	8016a74 <fe_mul>
 8017f3c:	0802a9ec 	.word	0x0802a9ec

08017f40 <ge_p2_dbl>:
{
 8017f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f44:	4604      	mov	r4, r0
 8017f46:	460e      	mov	r6, r1
 8017f48:	b08b      	sub	sp, #44	; 0x2c
    fe_sq(r->Z,p->Y);
 8017f4a:	f104 0550 	add.w	r5, r4, #80	; 0x50
 8017f4e:	f106 0928 	add.w	r9, r6, #40	; 0x28
    fe_sq(r->X,p->X);
 8017f52:	f7fe f982 	bl	801625a <fe_sq>
    fe_sq2(r->T,p->Z);
 8017f56:	f104 0878 	add.w	r8, r4, #120	; 0x78
    fe_sq(r->Z,p->Y);
 8017f5a:	4649      	mov	r1, r9
 8017f5c:	4628      	mov	r0, r5
 8017f5e:	f7fe f97c 	bl	801625a <fe_sq>
    fe_add(r->Y,p->X,p->Y);
 8017f62:	f104 0728 	add.w	r7, r4, #40	; 0x28
    fe_sq2(r->T,p->Z);
 8017f66:	f106 0150 	add.w	r1, r6, #80	; 0x50
 8017f6a:	4640      	mov	r0, r8
 8017f6c:	f7ff fb4d 	bl	801760a <fe_sq2>
    fe_add(r->Y,p->X,p->Y);
 8017f70:	464a      	mov	r2, r9
 8017f72:	4631      	mov	r1, r6
 8017f74:	4638      	mov	r0, r7
 8017f76:	f7fe fb48 	bl	801660a <fe_add>
    fe_sq(t0,r->Y);
 8017f7a:	4639      	mov	r1, r7
 8017f7c:	4668      	mov	r0, sp
 8017f7e:	f7fe f96c 	bl	801625a <fe_sq>
    fe_add(r->Y,r->Z,r->X);
 8017f82:	4622      	mov	r2, r4
 8017f84:	4629      	mov	r1, r5
 8017f86:	4638      	mov	r0, r7
 8017f88:	f7fe fb3f 	bl	801660a <fe_add>
    fe_sub(r->Z,r->Z,r->X);
 8017f8c:	4622      	mov	r2, r4
 8017f8e:	4629      	mov	r1, r5
 8017f90:	4628      	mov	r0, r5
 8017f92:	f7fe fc1c 	bl	80167ce <fe_sub>
    fe_sub(r->X,t0,r->Y);
 8017f96:	463a      	mov	r2, r7
 8017f98:	4669      	mov	r1, sp
 8017f9a:	4620      	mov	r0, r4
 8017f9c:	f7fe fc17 	bl	80167ce <fe_sub>
    fe_sub(r->T,r->T,r->Z);
 8017fa0:	462a      	mov	r2, r5
 8017fa2:	4641      	mov	r1, r8
 8017fa4:	4640      	mov	r0, r8
 8017fa6:	f7fe fc12 	bl	80167ce <fe_sub>
}
 8017faa:	b00b      	add	sp, #44	; 0x2c
 8017fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017fb0 <ge_p3_dbl>:
{
 8017fb0:	b530      	push	{r4, r5, lr}
 8017fb2:	b09f      	sub	sp, #124	; 0x7c
 8017fb4:	460c      	mov	r4, r1
 8017fb6:	4605      	mov	r5, r0
*/

#ifndef CURVED25519_ASM
static void ge_p3_to_p2(ge_p2 *r,const ge_p3 *p)
{
  fe_copy(r->X,p->X);
 8017fb8:	4668      	mov	r0, sp
 8017fba:	f7fe fd43 	bl	8016a44 <fe_copy>
  fe_copy(r->Y,p->Y);
 8017fbe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017fc2:	a80a      	add	r0, sp, #40	; 0x28
 8017fc4:	f7fe fd3e 	bl	8016a44 <fe_copy>
  fe_copy(r->Z,p->Z);
 8017fc8:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8017fcc:	a814      	add	r0, sp, #80	; 0x50
 8017fce:	f7fe fd39 	bl	8016a44 <fe_copy>
    ge_p2_dbl(r,&q);
 8017fd2:	4669      	mov	r1, sp
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	f7ff ffb3 	bl	8017f40 <ge_p2_dbl>
}
 8017fda:	b01f      	add	sp, #124	; 0x7c
 8017fdc:	bd30      	pop	{r4, r5, pc}

08017fde <cmov>:
{
 8017fde:	b570      	push	{r4, r5, r6, lr}
  word32 y = x; /* 0: yes; 1..255: no */
 8017fe0:	ea82 0403 	eor.w	r4, r2, r3
  y -= 1; /* 4294967295: yes; 0..254: no */
 8017fe4:	3c01      	subs	r4, #1
  y >>= 31; /* 1: yes; 0: no */
 8017fe6:	0fe4      	lsrs	r4, r4, #31
{
 8017fe8:	4605      	mov	r5, r0
 8017fea:	460e      	mov	r6, r1
  fe_cmov(t->yplusx,u->yplusx,b);
 8017fec:	4622      	mov	r2, r4
 8017fee:	f7ff fe12 	bl	8017c16 <fe_cmov>
  fe_cmov(t->yminusx,u->yminusx,b);
 8017ff2:	4622      	mov	r2, r4
 8017ff4:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8017ff8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017ffc:	f7ff fe0b 	bl	8017c16 <fe_cmov>
  fe_cmov(t->xy2d,u->xy2d,b);
 8018000:	4622      	mov	r2, r4
 8018002:	f106 0150 	add.w	r1, r6, #80	; 0x50
 8018006:	f105 0050 	add.w	r0, r5, #80	; 0x50
}
 801800a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fe_cmov(t->xy2d,u->xy2d,b);
 801800e:	f7ff be02 	b.w	8017c16 <fe_cmov>
	...

08018014 <ge_select>:
{
 8018014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018018:	4606      	mov	r6, r0
  unsigned char babs = (unsigned char)(b - (((-bnegative) & b) << 1));
 801801a:	ea02 74e2 	and.w	r4, r2, r2, asr #31
{
 801801e:	b09e      	sub	sp, #120	; 0x78
  return ((unsigned char)b) >> 7;
 8018020:	0fd7      	lsrs	r7, r2, #31
#if defined(HAVE_ED25519_SIGN) || defined(HAVE_ED25519_MAKE_KEY)
/* ge_precomp_0 */
static void ge_precomp_0(ge_precomp *h)
{
  fe_1(h->yplusx);
  fe_1(h->yminusx);
 8018022:	f106 0928 	add.w	r9, r6, #40	; 0x28
  unsigned char babs = (unsigned char)(b - (((-bnegative) & b) << 1));
 8018026:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 801802a:	f002 04ff 	and.w	r4, r2, #255	; 0xff
{
 801802e:	460d      	mov	r5, r1
  fe_0(h->xy2d);
 8018030:	f106 0850 	add.w	r8, r6, #80	; 0x50
  fe_1(h->yplusx);
 8018034:	f7fe f8f7 	bl	8016226 <fe_1>
  fe_1(h->yminusx);
 8018038:	4648      	mov	r0, r9
 801803a:	f7fe f8f4 	bl	8016226 <fe_1>
  fe_0(h->xy2d);
 801803e:	4640      	mov	r0, r8
  cmov(t,&base[pos][0],babs,1);
 8018040:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80180f0 <ge_select+0xdc>
  fe_0(h->xy2d);
 8018044:	f7fe f8fc 	bl	8016240 <fe_0>
  cmov(t,&base[pos][0],babs,1);
 8018048:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 801804c:	434d      	muls	r5, r1
 801804e:	4622      	mov	r2, r4
 8018050:	eb0a 0105 	add.w	r1, sl, r5
 8018054:	4630      	mov	r0, r6
 8018056:	2301      	movs	r3, #1
 8018058:	f7ff ffc1 	bl	8017fde <cmov>
  cmov(t,&base[pos][1],babs,2);
 801805c:	f105 0178 	add.w	r1, r5, #120	; 0x78
 8018060:	4622      	mov	r2, r4
 8018062:	4451      	add	r1, sl
 8018064:	4630      	mov	r0, r6
 8018066:	2302      	movs	r3, #2
 8018068:	f7ff ffb9 	bl	8017fde <cmov>
  cmov(t,&base[pos][2],babs,3);
 801806c:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 8018070:	4622      	mov	r2, r4
 8018072:	4451      	add	r1, sl
 8018074:	4630      	mov	r0, r6
 8018076:	2303      	movs	r3, #3
 8018078:	f7ff ffb1 	bl	8017fde <cmov>
  cmov(t,&base[pos][3],babs,4);
 801807c:	f505 71b4 	add.w	r1, r5, #360	; 0x168
 8018080:	4622      	mov	r2, r4
 8018082:	4451      	add	r1, sl
 8018084:	4630      	mov	r0, r6
 8018086:	2304      	movs	r3, #4
 8018088:	f7ff ffa9 	bl	8017fde <cmov>
  cmov(t,&base[pos][4],babs,5);
 801808c:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
 8018090:	4622      	mov	r2, r4
 8018092:	4451      	add	r1, sl
 8018094:	4630      	mov	r0, r6
 8018096:	2305      	movs	r3, #5
 8018098:	f7ff ffa1 	bl	8017fde <cmov>
  cmov(t,&base[pos][5],babs,6);
 801809c:	f505 7116 	add.w	r1, r5, #600	; 0x258
 80180a0:	4622      	mov	r2, r4
 80180a2:	4451      	add	r1, sl
 80180a4:	4630      	mov	r0, r6
 80180a6:	2306      	movs	r3, #6
 80180a8:	f7ff ff99 	bl	8017fde <cmov>
  cmov(t,&base[pos][6],babs,7);
 80180ac:	f505 7134 	add.w	r1, r5, #720	; 0x2d0
 80180b0:	4622      	mov	r2, r4
 80180b2:	4451      	add	r1, sl
 80180b4:	4630      	mov	r0, r6
 80180b6:	2307      	movs	r3, #7
 80180b8:	f7ff ff91 	bl	8017fde <cmov>
  cmov(t,&base[pos][7],babs,8);
 80180bc:	f505 7152 	add.w	r1, r5, #840	; 0x348
 80180c0:	2308      	movs	r3, #8
 80180c2:	4622      	mov	r2, r4
 80180c4:	4451      	add	r1, sl
 80180c6:	4630      	mov	r0, r6
 80180c8:	f7ff ff89 	bl	8017fde <cmov>
  fe_cswap(t->yminusx, t->yplusx, bnegative);
 80180cc:	463a      	mov	r2, r7
 80180ce:	4631      	mov	r1, r6
 80180d0:	4648      	mov	r0, r9
 80180d2:	f7ff f84b 	bl	801716c <fe_cswap>
  fe_neg(minust.xy2d,t->xy2d);
 80180d6:	4641      	mov	r1, r8
 80180d8:	a814      	add	r0, sp, #80	; 0x50
 80180da:	f7ff fd51 	bl	8017b80 <fe_neg>
  fe_cmov(t->xy2d,minust.xy2d,bnegative);
 80180de:	463a      	mov	r2, r7
 80180e0:	a914      	add	r1, sp, #80	; 0x50
 80180e2:	4640      	mov	r0, r8
 80180e4:	f7ff fd97 	bl	8017c16 <fe_cmov>
}
 80180e8:	b01e      	add	sp, #120	; 0x78
 80180ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ee:	bf00      	nop
 80180f0:	080231c4 	.word	0x080231c4

080180f4 <sc_reduce>:
{
 80180f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f8:	b099      	sub	sp, #100	; 0x64
 80180fa:	4604      	mov	r4, r0
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 80180fc:	f7fe f886 	bl	801620c <load_3>
 8018100:	900f      	str	r0, [sp, #60]	; 0x3c
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 8018102:	1ca0      	adds	r0, r4, #2
 8018104:	f7fe f88c 	bl	8016220 <load_4>
 8018108:	9010      	str	r0, [sp, #64]	; 0x40
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 801810a:	1d60      	adds	r0, r4, #5
 801810c:	f7fe f87e 	bl	801620c <load_3>
 8018110:	9011      	str	r0, [sp, #68]	; 0x44
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 8018112:	1de0      	adds	r0, r4, #7
 8018114:	f7fe f884 	bl	8016220 <load_4>
 8018118:	9012      	str	r0, [sp, #72]	; 0x48
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 801811a:	f104 000a 	add.w	r0, r4, #10
 801811e:	f7fe f87f 	bl	8016220 <load_4>
 8018122:	9013      	str	r0, [sp, #76]	; 0x4c
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 8018124:	f104 000d 	add.w	r0, r4, #13
 8018128:	f7fe f870 	bl	801620c <load_3>
 801812c:	9014      	str	r0, [sp, #80]	; 0x50
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 801812e:	f104 000f 	add.w	r0, r4, #15
 8018132:	f7fe f875 	bl	8016220 <load_4>
 8018136:	9007      	str	r0, [sp, #28]
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 8018138:	f104 0012 	add.w	r0, r4, #18
 801813c:	f7fe f866 	bl	801620c <load_3>
 8018140:	900a      	str	r0, [sp, #40]	; 0x28
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 8018142:	f104 0015 	add.w	r0, r4, #21
 8018146:	f7fe f861 	bl	801620c <load_3>
 801814a:	9008      	str	r0, [sp, #32]
    t[ 9] = MASK_21 & (load_4(s + 23) >> 5);
 801814c:	f104 0017 	add.w	r0, r4, #23
 8018150:	f7fe f866 	bl	8016220 <load_4>
 8018154:	900c      	str	r0, [sp, #48]	; 0x30
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 8018156:	f104 001a 	add.w	r0, r4, #26
 801815a:	f7fe f857 	bl	801620c <load_3>
 801815e:	9009      	str	r0, [sp, #36]	; 0x24
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 8018160:	f104 001c 	add.w	r0, r4, #28
 8018164:	f7fe f85c 	bl	8016220 <load_4>
 8018168:	900e      	str	r0, [sp, #56]	; 0x38
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 801816a:	f104 001f 	add.w	r0, r4, #31
 801816e:	f7fe f857 	bl	8016220 <load_4>
 8018172:	9005      	str	r0, [sp, #20]
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 8018174:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8018178:	f7fe f848 	bl	801620c <load_3>
 801817c:	9015      	str	r0, [sp, #84]	; 0x54
    t[14] = MASK_21 & (load_4(s + 36) >> 6);
 801817e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018182:	f7fe f84d 	bl	8016220 <load_4>
 8018186:	4605      	mov	r5, r0
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 8018188:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801818c:	f7fe f83e 	bl	801620c <load_3>
 8018190:	9016      	str	r0, [sp, #88]	; 0x58
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 8018192:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8018196:	f7fe f839 	bl	801620c <load_3>
 801819a:	9001      	str	r0, [sp, #4]
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 801819c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80181a0:	f7fe f83e 	bl	8016220 <load_4>
 80181a4:	9017      	str	r0, [sp, #92]	; 0x5c
    t[18] = MASK_21 & (load_3(s + 47) >> 2);
 80181a6:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80181aa:	f7fe f82f 	bl	801620c <load_3>
 80181ae:	f3c0 0994 	ubfx	r9, r0, #2, #21
    t[19] = MASK_21 & (load_4(s + 49) >> 7);
 80181b2:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80181b6:	f7fe f833 	bl	8016220 <load_4>
 80181ba:	f3c0 1ad4 	ubfx	sl, r0, #7, #21
    t[20] = MASK_21 & (load_4(s + 52) >> 4);
 80181be:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80181c2:	f7fe f82d 	bl	8016220 <load_4>
 80181c6:	f3c0 1714 	ubfx	r7, r0, #4, #21
    t[21] = MASK_21 & (load_3(s + 55) >> 1);
 80181ca:	f104 0037 	add.w	r0, r4, #55	; 0x37
 80181ce:	f7fe f81d 	bl	801620c <load_3>
 80181d2:	f3c0 0854 	ubfx	r8, r0, #1, #21
    t[22] = MASK_21 & (load_4(s + 57) >> 6);
 80181d6:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80181da:	f7fe f821 	bl	8016220 <load_4>
 80181de:	f3c0 1694 	ubfx	r6, r0, #6, #21
    t[23] =           (load_4(s + 60) >> 3);
 80181e2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80181e6:	f7fe f81b 	bl	8016220 <load_4>
 80181ea:	08cb      	lsrs	r3, r1, #3
 80181ec:	9300      	str	r3, [sp, #0]
 80181ee:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 80181f2:	9b01      	ldr	r3, [sp, #4]
    t[16] -= t[23] * ORDER_5;
 80181f4:	f8df c378 	ldr.w	ip, [pc, #888]	; 8018570 <sc_reduce+0x47c>
 80181f8:	9a00      	ldr	r2, [sp, #0]
    t[14] -= t[23] * ORDER_3;
 80181fa:	f8df e378 	ldr.w	lr, [pc, #888]	; 8018574 <sc_reduce+0x480>
    t[23] =           (load_4(s + 60) >> 3);
 80181fe:	ea4b 7b41 	orr.w	fp, fp, r1, lsl #29
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 8018202:	f3c3 0014 	ubfx	r0, r3, #0, #21
    t[16] -= t[23] * ORDER_5;
 8018206:	f1cb 0300 	rsb	r3, fp, #0
 801820a:	fb0c 3202 	mla	r2, ip, r2, r3
 801820e:	fbab 310c 	umull	r3, r1, fp, ip
 8018212:	18c3      	adds	r3, r0, r3
 8018214:	9302      	str	r3, [sp, #8]
 8018216:	eb42 0301 	adc.w	r3, r2, r1
    t[14] -= t[23] * ORDER_3;
 801821a:	9a00      	ldr	r2, [sp, #0]
    t[16] -= t[23] * ORDER_5;
 801821c:	9301      	str	r3, [sp, #4]
    t[14] -= t[23] * ORDER_3;
 801821e:	f1cb 0300 	rsb	r3, fp, #0
 8018222:	fb0e 3202 	mla	r2, lr, r2, r3
    t[14] = MASK_21 & (load_4(s + 36) >> 6);
 8018226:	f3c5 1194 	ubfx	r1, r5, #6, #21
    t[14] -= t[23] * ORDER_3;
 801822a:	fbab 030e 	umull	r0, r3, fp, lr
 801822e:	1809      	adds	r1, r1, r0
 8018230:	eb42 0203 	adc.w	r2, r2, r3
    t[14] -= t[22] * ORDER_4;
 8018234:	4bd0      	ldr	r3, [pc, #832]	; (8018578 <sc_reduce+0x484>)
    t[12] -= t[23] * ORDER_1;
 8018236:	9d00      	ldr	r5, [sp, #0]
    t[14] -= t[22] * ORDER_4;
 8018238:	fba6 0303 	umull	r0, r3, r6, r3
 801823c:	1809      	adds	r1, r1, r0
 801823e:	eba3 0306 	sub.w	r3, r3, r6
 8018242:	eb43 0302 	adc.w	r3, r3, r2
    t[14] -= t[21] * ORDER_5;
 8018246:	fba8 020c 	umull	r0, r2, r8, ip
 801824a:	1809      	adds	r1, r1, r0
 801824c:	eba2 0208 	sub.w	r2, r2, r8
 8018250:	eb42 0303 	adc.w	r3, r2, r3
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 8018254:	9a05      	ldr	r2, [sp, #20]
    t[14] -= t[21] * ORDER_5;
 8018256:	9304      	str	r3, [sp, #16]
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 8018258:	f3c2 1314 	ubfx	r3, r2, #4, #21
    t[12] -= t[23] * ORDER_1;
 801825c:	4ac7      	ldr	r2, [pc, #796]	; (801857c <sc_reduce+0x488>)
    t[14] -= t[21] * ORDER_5;
 801825e:	9103      	str	r1, [sp, #12]
    t[12] -= t[23] * ORDER_1;
 8018260:	f1cb 0000 	rsb	r0, fp, #0
 8018264:	fb02 0105 	mla	r1, r2, r5, r0
 8018268:	fbab 0202 	umull	r0, r2, fp, r2
    t[12] -= t[22] * ORDER_2;
 801826c:	4dc4      	ldr	r5, [pc, #784]	; (8018580 <sc_reduce+0x48c>)
    t[12] -= t[23] * ORDER_1;
 801826e:	181b      	adds	r3, r3, r0
 8018270:	eb41 0002 	adc.w	r0, r1, r2
    t[12] -= t[22] * ORDER_2;
 8018274:	fba6 5205 	umull	r5, r2, r6, r5
 8018278:	1b92      	subs	r2, r2, r6
 801827a:	195b      	adds	r3, r3, r5
 801827c:	eb42 0100 	adc.w	r1, r2, r0
    t[12] -= t[21] * ORDER_3;
 8018280:	fba8 020e 	umull	r0, r2, r8, lr
 8018284:	181b      	adds	r3, r3, r0
 8018286:	eba2 0208 	sub.w	r2, r2, r8
 801828a:	eb42 0201 	adc.w	r2, r2, r1
    t[12] -= t[20] * ORDER_4;
 801828e:	49ba      	ldr	r1, [pc, #744]	; (8018578 <sc_reduce+0x484>)
 8018290:	fba7 0101 	umull	r0, r1, r7, r1
 8018294:	1bc9      	subs	r1, r1, r7
 8018296:	181b      	adds	r3, r3, r0
 8018298:	eb41 0202 	adc.w	r2, r1, r2
    t[12] -= t[19] * ORDER_5;
 801829c:	fbaa 010c 	umull	r0, r1, sl, ip
 80182a0:	181b      	adds	r3, r3, r0
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 80182a2:	9807      	ldr	r0, [sp, #28]
    t[12] -= t[19] * ORDER_5;
 80182a4:	9305      	str	r3, [sp, #20]
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 80182a6:	f3c0 1e94 	ubfx	lr, r0, #6, #21
    t[ 6] -= t[18] * ORDER_0;
 80182aa:	48b6      	ldr	r0, [pc, #728]	; (8018584 <sc_reduce+0x490>)
    t[12] -= t[19] * ORDER_5;
 80182ac:	eba1 010a 	sub.w	r1, r1, sl
 80182b0:	eb41 0302 	adc.w	r3, r1, r2
    t[ 6] -= t[18] * ORDER_0;
 80182b4:	fba9 c100 	umull	ip, r1, r9, r0
    t[12] -= t[19] * ORDER_5;
 80182b8:	9306      	str	r3, [sp, #24]
    t[ 6] -= t[18] * ORDER_0;
 80182ba:	eb1e 030c 	adds.w	r3, lr, ip
 80182be:	9307      	str	r3, [sp, #28]
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 80182c0:	9b08      	ldr	r3, [sp, #32]
    t[ 8] -= t[19] * ORDER_1;
 80182c2:	4aae      	ldr	r2, [pc, #696]	; (801857c <sc_reduce+0x488>)
    t[ 8] -= t[20] * ORDER_0;
 80182c4:	4684      	mov	ip, r0
    t[ 6] -= t[18] * ORDER_0;
 80182c6:	eba1 0109 	sub.w	r1, r1, r9
    t[ 8] -= t[20] * ORDER_0;
 80182ca:	fba7 5000 	umull	r5, r0, r7, r0
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 80182ce:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 6] -= t[18] * ORDER_0;
 80182d2:	f141 0100 	adc.w	r1, r1, #0
    t[ 8] -= t[20] * ORDER_0;
 80182d6:	1bc0      	subs	r0, r0, r7
 80182d8:	195b      	adds	r3, r3, r5
    t[ 8] -= t[19] * ORDER_1;
 80182da:	fbaa 5202 	umull	r5, r2, sl, r2
    t[ 8] -= t[20] * ORDER_0;
 80182de:	f140 0000 	adc.w	r0, r0, #0
    t[ 8] -= t[19] * ORDER_1;
 80182e2:	195b      	adds	r3, r3, r5
    t[ 8] -= t[18] * ORDER_2;
 80182e4:	4da6      	ldr	r5, [pc, #664]	; (8018580 <sc_reduce+0x48c>)
    t[ 8] -= t[19] * ORDER_1;
 80182e6:	eba2 020a 	sub.w	r2, r2, sl
 80182ea:	eb42 0000 	adc.w	r0, r2, r0
    t[ 8] -= t[18] * ORDER_2;
 80182ee:	fba9 5205 	umull	r5, r2, r9, r5
 80182f2:	195b      	adds	r3, r3, r5
 80182f4:	eba2 0209 	sub.w	r2, r2, r9
 80182f8:	eb42 0200 	adc.w	r2, r2, r0
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 80182fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    t[10] -= t[21] * ORDER_1;
 80182fe:	4d9f      	ldr	r5, [pc, #636]	; (801857c <sc_reduce+0x488>)
    t[ 8] -= t[18] * ORDER_2;
 8018300:	9308      	str	r3, [sp, #32]
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 8018302:	f3c0 0094 	ubfx	r0, r0, #2, #21
    t[10] -= t[22] * ORDER_0;
 8018306:	fba6 3e0c 	umull	r3, lr, r6, ip
 801830a:	ebae 0e06 	sub.w	lr, lr, r6
 801830e:	18c0      	adds	r0, r0, r3
    t[10] -= t[21] * ORDER_1;
 8018310:	fba8 3505 	umull	r3, r5, r8, r5
    t[10] -= t[22] * ORDER_0;
 8018314:	f14e 0c00 	adc.w	ip, lr, #0
    t[10] -= t[21] * ORDER_1;
 8018318:	18c0      	adds	r0, r0, r3
    t[10] -= t[20] * ORDER_2;
 801831a:	4b99      	ldr	r3, [pc, #612]	; (8018580 <sc_reduce+0x48c>)
    t[10] -= t[21] * ORDER_1;
 801831c:	eba5 0508 	sub.w	r5, r5, r8
 8018320:	eb45 0e0c 	adc.w	lr, r5, ip
    t[10] -= t[20] * ORDER_2;
 8018324:	fba7 3c03 	umull	r3, ip, r7, r3
 8018328:	ebac 0c07 	sub.w	ip, ip, r7
 801832c:	18c0      	adds	r0, r0, r3
 801832e:	eb4c 050e 	adc.w	r5, ip, lr
    t[10] -= t[19] * ORDER_3;
 8018332:	f8df e240 	ldr.w	lr, [pc, #576]	; 8018574 <sc_reduce+0x480>
 8018336:	fbaa e30e 	umull	lr, r3, sl, lr
 801833a:	eba3 030a 	sub.w	r3, r3, sl
 801833e:	eb10 000e 	adds.w	r0, r0, lr
 8018342:	eb43 0c05 	adc.w	ip, r3, r5
    t[10] -= t[18] * ORDER_4;
 8018346:	4b8c      	ldr	r3, [pc, #560]	; (8018578 <sc_reduce+0x484>)
 8018348:	fba9 e303 	umull	lr, r3, r9, r3
 801834c:	eb10 000e 	adds.w	r0, r0, lr
 8018350:	eba3 0309 	sub.w	r3, r3, r9
 8018354:	eb43 030c 	adc.w	r3, r3, ip
 8018358:	9009      	str	r0, [sp, #36]	; 0x24
    t[ 7] -= t[19] * ORDER_0;
 801835a:	f8df c228 	ldr.w	ip, [pc, #552]	; 8018584 <sc_reduce+0x490>
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 801835e:	980a      	ldr	r0, [sp, #40]	; 0x28
    t[ 7] -= t[19] * ORDER_0;
 8018360:	fbaa 5e0c 	umull	r5, lr, sl, ip
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 8018364:	f3c0 00d4 	ubfx	r0, r0, #3, #21
    t[ 7] -= t[19] * ORDER_0;
 8018368:	1940      	adds	r0, r0, r5
    t[ 7] -= t[18] * ORDER_1;
 801836a:	4d84      	ldr	r5, [pc, #528]	; (801857c <sc_reduce+0x488>)
    t[ 7] -= t[19] * ORDER_0;
 801836c:	ebae 0e0a 	sub.w	lr, lr, sl
    t[ 7] -= t[18] * ORDER_1;
 8018370:	fba9 5c05 	umull	r5, ip, r9, r5
    t[ 7] -= t[19] * ORDER_0;
 8018374:	f14e 0e00 	adc.w	lr, lr, #0
    t[ 7] -= t[18] * ORDER_1;
 8018378:	1940      	adds	r0, r0, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801837a:	9d07      	ldr	r5, [sp, #28]
 801837c:	ea4f 5555 	mov.w	r5, r5, lsr #21
 8018380:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
    t[ 7] -= t[18] * ORDER_1;
 8018384:	ebac 0c09 	sub.w	ip, ip, r9
 8018388:	eb4c 0c0e 	adc.w	ip, ip, lr
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801838c:	1940      	adds	r0, r0, r5
 801838e:	900a      	str	r0, [sp, #40]	; 0x28
 8018390:	eb4c 5061 	adc.w	r0, ip, r1, asr #21
 8018394:	900b      	str	r0, [sp, #44]	; 0x2c
    t[ 9] -= t[21] * ORDER_0;
 8018396:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8018584 <sc_reduce+0x490>
    t[ 9] = MASK_21 & (load_4(s + 23) >> 5);
 801839a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801839c:	f3c0 1154 	ubfx	r1, r0, #5, #21
    t[ 9] -= t[21] * ORDER_0;
 80183a0:	fba8 e00c 	umull	lr, r0, r8, ip
 80183a4:	eba0 0008 	sub.w	r0, r0, r8
 80183a8:	eb11 010e 	adds.w	r1, r1, lr
 80183ac:	f140 0500 	adc.w	r5, r0, #0
    t[ 9] -= t[20] * ORDER_1;
 80183b0:	4872      	ldr	r0, [pc, #456]	; (801857c <sc_reduce+0x488>)
 80183b2:	fba7 ec00 	umull	lr, ip, r7, r0
 80183b6:	ebac 0c07 	sub.w	ip, ip, r7
 80183ba:	eb11 010e 	adds.w	r1, r1, lr
 80183be:	eb4c 0005 	adc.w	r0, ip, r5
    t[ 9] -= t[19] * ORDER_2;
 80183c2:	4d6f      	ldr	r5, [pc, #444]	; (8018580 <sc_reduce+0x48c>)
    t[ 9] -= t[18] * ORDER_3;
 80183c4:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8018574 <sc_reduce+0x480>
    t[ 9] -= t[19] * ORDER_2;
 80183c8:	fbaa 5c05 	umull	r5, ip, sl, r5
 80183cc:	1949      	adds	r1, r1, r5
 80183ce:	ebac 0c0a 	sub.w	ip, ip, sl
 80183d2:	eb4c 0c00 	adc.w	ip, ip, r0
    t[ 9] -= t[18] * ORDER_3;
 80183d6:	fba9 050e 	umull	r0, r5, r9, lr
 80183da:	1809      	adds	r1, r1, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80183dc:	9808      	ldr	r0, [sp, #32]
 80183de:	ea4f 5050 	mov.w	r0, r0, lsr #21
 80183e2:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
    t[ 9] -= t[18] * ORDER_3;
 80183e6:	eba5 0509 	sub.w	r5, r5, r9
 80183ea:	eb45 050c 	adc.w	r5, r5, ip
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80183ee:	1809      	adds	r1, r1, r0
 80183f0:	eb45 5262 	adc.w	r2, r5, r2, asr #21
 80183f4:	910c      	str	r1, [sp, #48]	; 0x30
    t[11] -= t[23] * ORDER_0;
 80183f6:	9d00      	ldr	r5, [sp, #0]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80183f8:	920d      	str	r2, [sp, #52]	; 0x34
    t[11] -= t[23] * ORDER_0;
 80183fa:	4962      	ldr	r1, [pc, #392]	; (8018584 <sc_reduce+0x490>)
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 80183fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    t[11] -= t[23] * ORDER_0;
 80183fe:	f1cb 0000 	rsb	r0, fp, #0
 8018402:	fb01 0005 	mla	r0, r1, r5, r0
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 8018406:	f3c2 12d4 	ubfx	r2, r2, #7, #21
    t[11] -= t[23] * ORDER_0;
 801840a:	fbab 5101 	umull	r5, r1, fp, r1
 801840e:	1952      	adds	r2, r2, r5
    t[11] -= t[22] * ORDER_1;
 8018410:	4d5a      	ldr	r5, [pc, #360]	; (801857c <sc_reduce+0x488>)
    t[11] -= t[23] * ORDER_0;
 8018412:	eb40 0001 	adc.w	r0, r0, r1
    t[11] -= t[22] * ORDER_1;
 8018416:	fba6 5105 	umull	r5, r1, r6, r5
 801841a:	1952      	adds	r2, r2, r5
 801841c:	eba1 0106 	sub.w	r1, r1, r6
 8018420:	eb41 0100 	adc.w	r1, r1, r0
    t[11] -= t[21] * ORDER_2;
 8018424:	4856      	ldr	r0, [pc, #344]	; (8018580 <sc_reduce+0x48c>)
 8018426:	fba8 0500 	umull	r0, r5, r8, r0
 801842a:	eba5 0508 	sub.w	r5, r5, r8
 801842e:	1812      	adds	r2, r2, r0
 8018430:	eb45 0101 	adc.w	r1, r5, r1
    t[11] -= t[20] * ORDER_3;
 8018434:	fba7 050e 	umull	r0, r5, r7, lr
 8018438:	1812      	adds	r2, r2, r0
 801843a:	eba5 0507 	sub.w	r5, r5, r7
 801843e:	eb45 0501 	adc.w	r5, r5, r1
    t[11] -= t[19] * ORDER_4;
 8018442:	494d      	ldr	r1, [pc, #308]	; (8018578 <sc_reduce+0x484>)
 8018444:	fbaa 1001 	umull	r1, r0, sl, r1
 8018448:	1852      	adds	r2, r2, r1
 801844a:	eba0 000a 	sub.w	r0, r0, sl
    t[11] -= t[18] * ORDER_5;
 801844e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8018570 <sc_reduce+0x47c>
    t[11] -= t[19] * ORDER_4;
 8018452:	eb40 0005 	adc.w	r0, r0, r5
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018456:	9d09      	ldr	r5, [sp, #36]	; 0x24
    t[11] -= t[18] * ORDER_5;
 8018458:	fba9 ec0a 	umull	lr, ip, r9, sl
 801845c:	eb12 020e 	adds.w	r2, r2, lr
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018460:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    t[11] -= t[18] * ORDER_5;
 8018464:	ebac 0c09 	sub.w	ip, ip, r9
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018468:	ea4e 2ec3 	orr.w	lr, lr, r3, lsl #11
    t[11] -= t[18] * ORDER_5;
 801846c:	eb4c 0000 	adc.w	r0, ip, r0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018470:	eb12 020e 	adds.w	r2, r2, lr
 8018474:	eb40 5563 	adc.w	r5, r0, r3, asr #21
    t[13] -= t[23] * ORDER_2;
 8018478:	f8df c104 	ldr.w	ip, [pc, #260]	; 8018580 <sc_reduce+0x48c>
 801847c:	9800      	ldr	r0, [sp, #0]
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 801847e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018480:	920e      	str	r2, [sp, #56]	; 0x38
    t[13] -= t[23] * ORDER_2;
 8018482:	f1cb 0200 	rsb	r2, fp, #0
 8018486:	fb0c 2100 	mla	r1, ip, r0, r2
    t[13] -= t[22] * ORDER_3;
 801848a:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8018574 <sc_reduce+0x480>
    t[13] -= t[21] * ORDER_4;
 801848e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8018578 <sc_reduce+0x484>
    t[13] -= t[23] * ORDER_2;
 8018492:	fbab 020c 	umull	r0, r2, fp, ip
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 8018496:	f3c3 0354 	ubfx	r3, r3, #1, #21
    t[13] -= t[23] * ORDER_2;
 801849a:	181b      	adds	r3, r3, r0
 801849c:	eb41 0002 	adc.w	r0, r1, r2
    t[13] -= t[22] * ORDER_3;
 80184a0:	fba6 210e 	umull	r2, r1, r6, lr
 80184a4:	189b      	adds	r3, r3, r2
 80184a6:	eba1 0106 	sub.w	r1, r1, r6
 80184aa:	eb41 0100 	adc.w	r1, r1, r0
    t[13] -= t[21] * ORDER_4;
 80184ae:	fba8 2009 	umull	r2, r0, r8, r9
 80184b2:	189a      	adds	r2, r3, r2
 80184b4:	eba0 0008 	sub.w	r0, r0, r8
    t[13] -= t[20] * ORDER_5;
 80184b8:	fba7 c30a 	umull	ip, r3, r7, sl
    t[13] -= t[21] * ORDER_4;
 80184bc:	eb40 0001 	adc.w	r0, r0, r1
    t[13] -= t[20] * ORDER_5;
 80184c0:	1bdf      	subs	r7, r3, r7
 80184c2:	eb12 020c 	adds.w	r2, r2, ip
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80184c6:	9b05      	ldr	r3, [sp, #20]
    t[15] -= t[23] * ORDER_4;
 80184c8:	f8dd 8000 	ldr.w	r8, [sp]
    t[13] -= t[20] * ORDER_5;
 80184cc:	eb47 0700 	adc.w	r7, r7, r0
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80184d0:	9806      	ldr	r0, [sp, #24]
 80184d2:	0d5b      	lsrs	r3, r3, #21
 80184d4:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 80184d8:	18d2      	adds	r2, r2, r3
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 80184da:	9b16      	ldr	r3, [sp, #88]	; 0x58
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80184dc:	eb47 5760 	adc.w	r7, r7, r0, asr #21
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 80184e0:	f3c3 00d4 	ubfx	r0, r3, #3, #21
    t[15] -= t[23] * ORDER_4;
 80184e4:	f1cb 0300 	rsb	r3, fp, #0
 80184e8:	fb09 3108 	mla	r1, r9, r8, r3
 80184ec:	fbab 3c09 	umull	r3, ip, fp, r9
 80184f0:	18c3      	adds	r3, r0, r3
    t[15] -= t[22] * ORDER_5;
 80184f2:	fba6 e00a 	umull	lr, r0, r6, sl
    t[15] -= t[23] * ORDER_4;
 80184f6:	eb41 010c 	adc.w	r1, r1, ip
    t[15] -= t[22] * ORDER_5;
 80184fa:	1b86      	subs	r6, r0, r6
 80184fc:	eb13 030e 	adds.w	r3, r3, lr
 8018500:	eb46 0601 	adc.w	r6, r6, r1
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8018504:	9903      	ldr	r1, [sp, #12]
 8018506:	9804      	ldr	r0, [sp, #16]
    t[ 0] -= t[12] * ORDER_0;
 8018508:	f8df e078 	ldr.w	lr, [pc, #120]	; 8018584 <sc_reduce+0x490>
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 801850c:	0d49      	lsrs	r1, r1, #21
 801850e:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 8018512:	185b      	adds	r3, r3, r1
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8018514:	9902      	ldr	r1, [sp, #8]
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8018516:	eb46 5660 	adc.w	r6, r6, r0, asr #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 801851a:	ea4f 5c51 	mov.w	ip, r1, lsr #21
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 801851e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8018520:	9901      	ldr	r1, [sp, #4]
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 8018522:	f3c0 1054 	ubfx	r0, r0, #5, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8018526:	ea4c 2cc1 	orr.w	ip, ip, r1, lsl #11
 801852a:	eb10 000c 	adds.w	r0, r0, ip
 801852e:	ea4f 5161 	mov.w	r1, r1, asr #21
 8018532:	9000      	str	r0, [sp, #0]
 8018534:	f141 0000 	adc.w	r0, r1, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018538:	990e      	ldr	r1, [sp, #56]	; 0x38
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 801853a:	9004      	str	r0, [sp, #16]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 801853c:	9805      	ldr	r0, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801853e:	0d49      	lsrs	r1, r1, #21
 8018540:	ea41 21c5 	orr.w	r1, r1, r5, lsl #11
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8018544:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018548:	1840      	adds	r0, r0, r1
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 801854a:	9903      	ldr	r1, [sp, #12]
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 801854c:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 8018550:	ea4c 2cc7 	orr.w	ip, ip, r7, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018554:	ea4f 5565 	mov.w	r5, r5, asr #21
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8018558:	f3c1 0114 	ubfx	r1, r1, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801855c:	f145 0500 	adc.w	r5, r5, #0
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8018560:	157f      	asrs	r7, r7, #21
 8018562:	eb11 010c 	adds.w	r1, r1, ip
 8018566:	f147 0700 	adc.w	r7, r7, #0
 801856a:	9705      	str	r7, [sp, #20]
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 801856c:	9f02      	ldr	r7, [sp, #8]
 801856e:	e00b      	b.n	8018588 <sc_reduce+0x494>
 8018570:	fff59084 	.word	0xfff59084
 8018574:	fff0c654 	.word	0xfff0c654
 8018578:	ffe215d1 	.word	0xffe215d1
 801857c:	ffe72d19 	.word	0xffe72d19
 8018580:	ffe9fb68 	.word	0xffe9fb68
 8018584:	ffea2c13 	.word	0xffea2c13
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8018588:	9101      	str	r1, [sp, #4]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 801858a:	0d59      	lsrs	r1, r3, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 801858c:	f3c7 0714 	ubfx	r7, r7, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8018590:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8018594:	1879      	adds	r1, r7, r1
 8018596:	ea4f 5666 	mov.w	r6, r6, asr #21
 801859a:	f146 0700 	adc.w	r7, r6, #0
 801859e:	9706      	str	r7, [sp, #24]
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 80185a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80185a2:	9102      	str	r1, [sp, #8]
    t[ 0] -= t[12] * ORDER_0;
 80185a4:	fba0 c60e 	umull	ip, r6, r0, lr
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 80185a8:	f3c7 0114 	ubfx	r1, r7, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 80185ac:	eb11 010c 	adds.w	r1, r1, ip
 80185b0:	f1c0 0700 	rsb	r7, r0, #0
 80185b4:	fb0e 7b05 	mla	fp, lr, r5, r7
 80185b8:	910f      	str	r1, [sp, #60]	; 0x3c
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 80185ba:	9910      	ldr	r1, [sp, #64]	; 0x40
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80185bc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80185c0:	f3c2 0214 	ubfx	r2, r2, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 80185c4:	eb4b 0b06 	adc.w	fp, fp, r6
    t[ 1] -= t[12] * ORDER_1;
 80185c8:	4eeb      	ldr	r6, [pc, #940]	; (8018978 <sc_reduce+0x884>)
    t[ 1] -= t[13] * ORDER_0;
 80185ca:	fba2 ca0e 	umull	ip, sl, r2, lr
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 80185ce:	f3c1 1154 	ubfx	r1, r1, #5, #21
    t[ 1] -= t[12] * ORDER_1;
 80185d2:	fb06 7905 	mla	r9, r6, r5, r7
    t[ 1] -= t[13] * ORDER_0;
 80185d6:	eb11 010c 	adds.w	r1, r1, ip
 80185da:	ebaa 0a02 	sub.w	sl, sl, r2
    t[ 1] -= t[12] * ORDER_1;
 80185de:	fba0 c606 	umull	ip, r6, r0, r6
    t[ 1] -= t[13] * ORDER_0;
 80185e2:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 1] -= t[12] * ORDER_1;
 80185e6:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80185ea:	ea4f 5c58 	mov.w	ip, r8, lsr #21
 80185ee:	ea4c 2ccb 	orr.w	ip, ip, fp, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 80185f2:	444e      	add	r6, r9
 80185f4:	eb46 060a 	adc.w	r6, r6, sl
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80185f8:	eb11 010c 	adds.w	r1, r1, ip
 80185fc:	9110      	str	r1, [sp, #64]	; 0x40
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 80185fe:	9911      	ldr	r1, [sp, #68]	; 0x44
    t[ 2] -= t[14] * ORDER_0;
 8018600:	f8dd 9014 	ldr.w	r9, [sp, #20]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8018604:	eb46 566b 	adc.w	r6, r6, fp, asr #21
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 8018608:	f3c1 0b94 	ubfx	fp, r1, #2, #21
    t[ 2] -= t[14] * ORDER_0;
 801860c:	9901      	ldr	r1, [sp, #4]
 801860e:	4249      	negs	r1, r1
 8018610:	4688      	mov	r8, r1
 8018612:	9103      	str	r1, [sp, #12]
 8018614:	fb0e 8809 	mla	r8, lr, r9, r8
 8018618:	4671      	mov	r1, lr
 801861a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801861e:	fbae ec01 	umull	lr, ip, lr, r1
 8018622:	468a      	mov	sl, r1
 8018624:	eb1b 010e 	adds.w	r1, fp, lr
    t[ 2] -= t[13] * ORDER_1;
 8018628:	f8df b34c 	ldr.w	fp, [pc, #844]	; 8018978 <sc_reduce+0x884>
    t[ 2] -= t[14] * ORDER_0;
 801862c:	eb48 0c0c 	adc.w	ip, r8, ip
    t[ 2] -= t[13] * ORDER_1;
 8018630:	fba2 980b 	umull	r9, r8, r2, fp
 8018634:	eb11 0109 	adds.w	r1, r1, r9
 8018638:	eba8 0802 	sub.w	r8, r8, r2
 801863c:	eb48 080c 	adc.w	r8, r8, ip
    t[ 2] -= t[12] * ORDER_2;
 8018640:	f8df c338 	ldr.w	ip, [pc, #824]	; 801897c <sc_reduce+0x888>
 8018644:	fb0c 7905 	mla	r9, ip, r5, r7
 8018648:	fba0 ce0c 	umull	ip, lr, r0, ip
 801864c:	eb11 010c 	adds.w	r1, r1, ip
 8018650:	44ce      	add	lr, r9
 8018652:	eb4e 0e08 	adc.w	lr, lr, r8
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8018656:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801865a:	ea4f 5c58 	mov.w	ip, r8, lsr #21
 801865e:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
 8018662:	eb11 010c 	adds.w	r1, r1, ip
 8018666:	eb4e 5666 	adc.w	r6, lr, r6, asr #21
 801866a:	9111      	str	r1, [sp, #68]	; 0x44
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 801866c:	9912      	ldr	r1, [sp, #72]	; 0x48
    t[ 3] -= t[14] * ORDER_1;
 801866e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8018672:	f8dd 9014 	ldr.w	r9, [sp, #20]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8018676:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 801867a:	f3c1 1cd4 	ubfx	ip, r1, #7, #21
    t[ 3] -= t[15] * ORDER_0;
 801867e:	fba3 180a 	umull	r1, r8, r3, sl
    t[ 3] -= t[14] * ORDER_1;
 8018682:	fb0b ea09 	mla	sl, fp, r9, lr
 8018686:	f8dd e004 	ldr.w	lr, [sp, #4]
    t[ 3] -= t[15] * ORDER_0;
 801868a:	eb1c 0c01 	adds.w	ip, ip, r1
 801868e:	eba8 0803 	sub.w	r8, r8, r3
    t[ 3] -= t[14] * ORDER_1;
 8018692:	fbae 1e0b 	umull	r1, lr, lr, fp
    t[ 3] -= t[15] * ORDER_0;
 8018696:	f148 0800 	adc.w	r8, r8, #0
    t[ 3] -= t[14] * ORDER_1;
 801869a:	eb1c 0101 	adds.w	r1, ip, r1
    t[ 3] -= t[13] * ORDER_2;
 801869e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 801897c <sc_reduce+0x888>
    t[ 3] -= t[12] * ORDER_3;
 80186a2:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8018980 <sc_reduce+0x88c>
    t[ 3] -= t[13] * ORDER_2;
 80186a6:	fba2 c90c 	umull	ip, r9, r2, ip
    t[ 3] -= t[14] * ORDER_1;
 80186aa:	44f2      	add	sl, lr
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 80186ac:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
    t[ 3] -= t[14] * ORDER_1;
 80186b0:	eb4a 0a08 	adc.w	sl, sl, r8
    t[ 3] -= t[13] * ORDER_2;
 80186b4:	eba9 0902 	sub.w	r9, r9, r2
 80186b8:	eb11 010c 	adds.w	r1, r1, ip
    t[ 3] -= t[12] * ORDER_3;
 80186bc:	fba0 c80b 	umull	ip, r8, r0, fp
    t[ 3] -= t[13] * ORDER_2;
 80186c0:	eb49 0a0a 	adc.w	sl, r9, sl
    t[ 3] -= t[12] * ORDER_3;
 80186c4:	fb0b 7905 	mla	r9, fp, r5, r7
 80186c8:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 80186cc:	ea4f 5c5e 	mov.w	ip, lr, lsr #21
 80186d0:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 80186d4:	44c8      	add	r8, r9
 80186d6:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 80186da:	eb11 0e0c 	adds.w	lr, r1, ip
 80186de:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80186e2:	eb48 5e66 	adc.w	lr, r8, r6, asr #21
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 80186e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    t[ 4] -= t[16] * ORDER_0;
 80186e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80186ec:	f8dd c008 	ldr.w	ip, [sp, #8]
 80186f0:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8018984 <sc_reduce+0x890>
    t[ 4] -= t[14] * ORDER_2;
 80186f4:	f8dd a014 	ldr.w	sl, [sp, #20]
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 80186f8:	f3c6 1114 	ubfx	r1, r6, #4, #21
    t[ 4] -= t[16] * ORDER_0;
 80186fc:	9e02      	ldr	r6, [sp, #8]
 80186fe:	4276      	negs	r6, r6
 8018700:	fb08 6909 	mla	r9, r8, r9, r6
 8018704:	fbac 8c08 	umull	r8, ip, ip, r8
 8018708:	eb11 0108 	adds.w	r1, r1, r8
 801870c:	eb49 0c0c 	adc.w	ip, r9, ip
    t[ 4] -= t[15] * ORDER_1;
 8018710:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8018978 <sc_reduce+0x884>
 8018714:	fba3 8909 	umull	r8, r9, r3, r9
 8018718:	eb11 0108 	adds.w	r1, r1, r8
 801871c:	eba9 0903 	sub.w	r9, r9, r3
    t[ 4] -= t[14] * ORDER_2;
 8018720:	f8dd 800c 	ldr.w	r8, [sp, #12]
    t[ 4] -= t[15] * ORDER_1;
 8018724:	eb49 090c 	adc.w	r9, r9, ip
    t[ 4] -= t[14] * ORDER_2;
 8018728:	f8df c250 	ldr.w	ip, [pc, #592]	; 801897c <sc_reduce+0x888>
 801872c:	fb0c 8a0a 	mla	sl, ip, sl, r8
 8018730:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018734:	fba8 c80c 	umull	ip, r8, r8, ip
 8018738:	eb11 010c 	adds.w	r1, r1, ip
 801873c:	44c2      	add	sl, r8
    t[ 4] -= t[13] * ORDER_3;
 801873e:	fba2 cb0b 	umull	ip, fp, r2, fp
    t[ 4] -= t[14] * ORDER_2;
 8018742:	eb4a 0a09 	adc.w	sl, sl, r9
    t[ 4] -= t[13] * ORDER_3;
 8018746:	ebab 0b02 	sub.w	fp, fp, r2
 801874a:	eb11 010c 	adds.w	r1, r1, ip
    t[ 4] -= t[12] * ORDER_4;
 801874e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8018988 <sc_reduce+0x894>
    t[ 4] -= t[13] * ORDER_3;
 8018752:	eb4b 0a0a 	adc.w	sl, fp, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018756:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    t[ 4] -= t[12] * ORDER_4;
 801875a:	fb08 7905 	mla	r9, r8, r5, r7
 801875e:	fba0 c808 	umull	ip, r8, r0, r8
 8018762:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018766:	ea4f 5c5b 	mov.w	ip, fp, lsr #21
 801876a:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 801876e:	44c8      	add	r8, r9
 8018770:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018774:	eb11 010c 	adds.w	r1, r1, ip
 8018778:	9113      	str	r1, [sp, #76]	; 0x4c
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 801877a:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[ 5] -= t[17] * ORDER_0;
 801877c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8018780:	f8dd 9000 	ldr.w	r9, [sp]
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 8018784:	f3c1 0c54 	ubfx	ip, r1, #1, #21
    t[ 5] -= t[17] * ORDER_0;
 8018788:	9900      	ldr	r1, [sp, #0]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 801878a:	eb48 586e 	adc.w	r8, r8, lr, asr #21
    t[ 5] -= t[17] * ORDER_0;
 801878e:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8018984 <sc_reduce+0x890>
 8018792:	4249      	negs	r1, r1
 8018794:	fb0e 1b0b 	mla	fp, lr, fp, r1
 8018798:	fba9 e90e 	umull	lr, r9, r9, lr
 801879c:	eb1c 0c0e 	adds.w	ip, ip, lr
 80187a0:	eb4b 0b09 	adc.w	fp, fp, r9
    t[ 5] -= t[16] * ORDER_1;
 80187a4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80187a8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8018978 <sc_reduce+0x884>
 80187ac:	fb09 6a0e 	mla	sl, r9, lr, r6
 80187b0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80187b4:	fbae e909 	umull	lr, r9, lr, r9
 80187b8:	eb1c 0e0e 	adds.w	lr, ip, lr
    t[ 5] -= t[15] * ORDER_2;
 80187bc:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 801897c <sc_reduce+0x888>
    t[ 5] -= t[16] * ORDER_1;
 80187c0:	44ca      	add	sl, r9
    t[ 5] -= t[15] * ORDER_2;
 80187c2:	fba3 9c0c 	umull	r9, ip, r3, ip
    t[ 5] -= t[16] * ORDER_1;
 80187c6:	eb4a 0a0b 	adc.w	sl, sl, fp
    t[ 5] -= t[15] * ORDER_2;
 80187ca:	ebac 0c03 	sub.w	ip, ip, r3
 80187ce:	eb1e 0e09 	adds.w	lr, lr, r9
 80187d2:	eb4c 0a0a 	adc.w	sl, ip, sl
    t[ 5] -= t[14] * ORDER_3;
 80187d6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80187da:	f8dd b014 	ldr.w	fp, [sp, #20]
 80187de:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8018980 <sc_reduce+0x88c>
 80187e2:	fb0c 9b0b 	mla	fp, ip, fp, r9
 80187e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187ea:	fba9 c90c 	umull	ip, r9, r9, ip
 80187ee:	eb1e 0c0c 	adds.w	ip, lr, ip
    t[ 5] -= t[13] * ORDER_4;
 80187f2:	f8df e194 	ldr.w	lr, [pc, #404]	; 8018988 <sc_reduce+0x894>
    t[ 5] -= t[14] * ORDER_3;
 80187f6:	44d9      	add	r9, fp
 80187f8:	eb49 090a 	adc.w	r9, r9, sl
    t[ 5] -= t[13] * ORDER_4;
 80187fc:	fba2 ea0e 	umull	lr, sl, r2, lr
 8018800:	ebaa 0a02 	sub.w	sl, sl, r2
 8018804:	eb1c 0c0e 	adds.w	ip, ip, lr
 8018808:	eb4a 0909 	adc.w	r9, sl, r9
    t[ 5] -= t[12] * ORDER_5;
 801880c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 801898c <sc_reduce+0x898>
    t[ 6] -= t[15] * ORDER_3;
 8018810:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8018980 <sc_reduce+0x88c>
    t[ 5] -= t[12] * ORDER_5;
 8018814:	fb0a 7505 	mla	r5, sl, r5, r7
 8018818:	fba0 070a 	umull	r0, r7, r0, sl
 801881c:	eb1c 0c00 	adds.w	ip, ip, r0
 8018820:	443d      	add	r5, r7
 8018822:	eb45 0909 	adc.w	r9, r5, r9
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8018826:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    t[ 6] -= t[17] * ORDER_1;
 8018828:	9f00      	ldr	r7, [sp, #0]
 801882a:	4853      	ldr	r0, [pc, #332]	; (8018978 <sc_reduce+0x884>)
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801882c:	ea4f 5e55 	mov.w	lr, r5, lsr #21
 8018830:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
 8018834:	eb1c 050e 	adds.w	r5, ip, lr
 8018838:	9514      	str	r5, [sp, #80]	; 0x50
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801883a:	9d07      	ldr	r5, [sp, #28]
 801883c:	f3c5 0e14 	ubfx	lr, r5, #0, #21
    t[ 6] -= t[17] * ORDER_1;
 8018840:	9d04      	ldr	r5, [sp, #16]
 8018842:	fb00 1505 	mla	r5, r0, r5, r1
 8018846:	fba7 c000 	umull	ip, r0, r7, r0
    t[ 6] -= t[16] * ORDER_2;
 801884a:	4f4c      	ldr	r7, [pc, #304]	; (801897c <sc_reduce+0x888>)
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801884c:	eb49 5868 	adc.w	r8, r9, r8, asr #21
    t[ 6] -= t[16] * ORDER_2;
 8018850:	f8dd 9018 	ldr.w	r9, [sp, #24]
    t[ 6] -= t[17] * ORDER_1;
 8018854:	eb1e 0e0c 	adds.w	lr, lr, ip
    t[ 6] -= t[16] * ORDER_2;
 8018858:	f8dd c008 	ldr.w	ip, [sp, #8]
    t[ 6] -= t[17] * ORDER_1;
 801885c:	eb45 0500 	adc.w	r5, r5, r0
    t[ 6] -= t[16] * ORDER_2;
 8018860:	4638      	mov	r0, r7
 8018862:	fbac c000 	umull	ip, r0, ip, r0
 8018866:	fb07 6709 	mla	r7, r7, r9, r6
 801886a:	eb1e 0c0c 	adds.w	ip, lr, ip
 801886e:	4407      	add	r7, r0
    t[ 6] -= t[15] * ORDER_3;
 8018870:	fba3 090b 	umull	r0, r9, r3, fp
    t[ 6] -= t[16] * ORDER_2;
 8018874:	eb47 0705 	adc.w	r7, r7, r5
    t[ 6] -= t[15] * ORDER_3;
 8018878:	eba9 0903 	sub.w	r9, r9, r3
 801887c:	eb1c 0c00 	adds.w	ip, ip, r0
 8018880:	eb49 0707 	adc.w	r7, r9, r7
    t[ 6] -= t[14] * ORDER_4;
 8018884:	9d03      	ldr	r5, [sp, #12]
 8018886:	f8dd e014 	ldr.w	lr, [sp, #20]
 801888a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8018988 <sc_reduce+0x894>
 801888e:	fb09 5e0e 	mla	lr, r9, lr, r5
 8018892:	9d01      	ldr	r5, [sp, #4]
 8018894:	fba5 0509 	umull	r0, r5, r5, r9
 8018898:	eb1c 0000 	adds.w	r0, ip, r0
 801889c:	4475      	add	r5, lr
    t[ 6] -= t[13] * ORDER_5;
 801889e:	fba2 c90a 	umull	ip, r9, r2, sl
    t[ 6] -= t[14] * ORDER_4;
 80188a2:	eb45 0507 	adc.w	r5, r5, r7
    t[ 6] -= t[13] * ORDER_5;
 80188a6:	eba9 0202 	sub.w	r2, r9, r2
 80188aa:	eb10 0c0c 	adds.w	ip, r0, ip
 80188ae:	eb42 0505 	adc.w	r5, r2, r5
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80188b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    t[ 7] -= t[17] * ORDER_2;
 80188b4:	9f04      	ldr	r7, [sp, #16]
    t[ 7] -= t[15] * ORDER_4;
 80188b6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8018988 <sc_reduce+0x894>
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80188ba:	0d50      	lsrs	r0, r2, #21
 80188bc:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
 80188c0:	eb1c 0200 	adds.w	r2, ip, r0
 80188c4:	9207      	str	r2, [sp, #28]
    t[ 7] -= t[17] * ORDER_2;
 80188c6:	f8dd c000 	ldr.w	ip, [sp]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80188ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80188cc:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    t[ 7] -= t[17] * ORDER_2;
 80188d0:	4d2a      	ldr	r5, [pc, #168]	; (801897c <sc_reduce+0x888>)
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80188d2:	f3c2 0214 	ubfx	r2, r2, #0, #21
    t[ 7] -= t[17] * ORDER_2;
 80188d6:	fb05 1707 	mla	r7, r5, r7, r1
 80188da:	fbac 5005 	umull	r5, r0, ip, r5
 80188de:	1952      	adds	r2, r2, r5
    t[ 7] -= t[16] * ORDER_3;
 80188e0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80188e4:	9d02      	ldr	r5, [sp, #8]
    t[ 7] -= t[17] * ORDER_2;
 80188e6:	eb47 0700 	adc.w	r7, r7, r0
    t[ 7] -= t[16] * ORDER_3;
 80188ea:	fb0b 6c0c 	mla	ip, fp, ip, r6
 80188ee:	fba5 050b 	umull	r0, r5, r5, fp
 80188f2:	1812      	adds	r2, r2, r0
 80188f4:	4465      	add	r5, ip
 80188f6:	eb45 0507 	adc.w	r5, r5, r7
    t[ 7] -= t[14] * ORDER_5;
 80188fa:	f8dd c014 	ldr.w	ip, [sp, #20]
 80188fe:	9f03      	ldr	r7, [sp, #12]
    t[ 7] -= t[15] * ORDER_4;
 8018900:	fba3 e909 	umull	lr, r9, r3, r9
    t[ 7] -= t[14] * ORDER_5;
 8018904:	fb0a 770c 	mla	r7, sl, ip, r7
 8018908:	f8dd c004 	ldr.w	ip, [sp, #4]
    t[ 7] -= t[15] * ORDER_4;
 801890c:	eba9 0903 	sub.w	r9, r9, r3
 8018910:	eb12 020e 	adds.w	r2, r2, lr
 8018914:	eb49 0505 	adc.w	r5, r9, r5
    t[ 7] -= t[14] * ORDER_5;
 8018918:	fbac 090a 	umull	r0, r9, ip, sl
 801891c:	1812      	adds	r2, r2, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801891e:	9807      	ldr	r0, [sp, #28]
 8018920:	ea4f 5050 	mov.w	r0, r0, lsr #21
    t[ 7] -= t[14] * ORDER_5;
 8018924:	444f      	add	r7, r9
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018926:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
    t[ 7] -= t[14] * ORDER_5;
 801892a:	eb47 0505 	adc.w	r5, r7, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801892e:	1812      	adds	r2, r2, r0
 8018930:	9201      	str	r2, [sp, #4]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8018932:	9a08      	ldr	r2, [sp, #32]
    t[ 8] -= t[17] * ORDER_3;
 8018934:	9f00      	ldr	r7, [sp, #0]
    t[ 8] -= t[16] * ORDER_4;
 8018936:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8018988 <sc_reduce+0x894>
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801893a:	f3c2 0014 	ubfx	r0, r2, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801893e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018940:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018944:	0d55      	lsrs	r5, r2, #21
 8018946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018948:	ea45 25c2 	orr.w	r5, r5, r2, lsl #11
 801894c:	ea4f 5c62 	mov.w	ip, r2, asr #21
    t[ 8] -= t[17] * ORDER_3;
 8018950:	9a04      	ldr	r2, [sp, #16]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018952:	1940      	adds	r0, r0, r5
 8018954:	f14c 0e00 	adc.w	lr, ip, #0
    t[ 8] -= t[17] * ORDER_3;
 8018958:	fb0b 1202 	mla	r2, fp, r2, r1
 801895c:	fba7 5c0b 	umull	r5, ip, r7, fp
 8018960:	4494      	add	ip, r2
    t[ 8] -= t[16] * ORDER_4;
 8018962:	9f06      	ldr	r7, [sp, #24]
 8018964:	9a02      	ldr	r2, [sp, #8]
 8018966:	fb09 6707 	mla	r7, r9, r7, r6
    t[ 8] -= t[17] * ORDER_3;
 801896a:	1940      	adds	r0, r0, r5
    t[ 8] -= t[16] * ORDER_4;
 801896c:	fba2 2509 	umull	r2, r5, r2, r9
    t[ 8] -= t[17] * ORDER_3;
 8018970:	eb4c 0c0e 	adc.w	ip, ip, lr
    t[ 8] -= t[16] * ORDER_4;
 8018974:	443d      	add	r5, r7
 8018976:	e00b      	b.n	8018990 <sc_reduce+0x89c>
 8018978:	ffe72d19 	.word	0xffe72d19
 801897c:	ffe9fb68 	.word	0xffe9fb68
 8018980:	fff0c654 	.word	0xfff0c654
 8018984:	ffea2c13 	.word	0xffea2c13
 8018988:	ffe215d1 	.word	0xffe215d1
 801898c:	fff59084 	.word	0xfff59084
 8018990:	1880      	adds	r0, r0, r2
    t[ 8] -= t[15] * ORDER_5;
 8018992:	fba3 2e0a 	umull	r2, lr, r3, sl
    t[ 8] -= t[16] * ORDER_4;
 8018996:	eb45 050c 	adc.w	r5, r5, ip
    t[ 8] -= t[15] * ORDER_5;
 801899a:	ebae 0303 	sub.w	r3, lr, r3
 801899e:	1880      	adds	r0, r0, r2
 80189a0:	eb43 0505 	adc.w	r5, r3, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80189a4:	9b01      	ldr	r3, [sp, #4]
    t[ 9] -= t[17] * ORDER_4;
 80189a6:	9f04      	ldr	r7, [sp, #16]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80189a8:	0d5a      	lsrs	r2, r3, #21
 80189aa:	ea42 22c8 	orr.w	r2, r2, r8, lsl #11
 80189ae:	1883      	adds	r3, r0, r2
 80189b0:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    t[ 9] -= t[17] * ORDER_4;
 80189b4:	fb09 1507 	mla	r5, r9, r7, r1
 80189b8:	9f00      	ldr	r7, [sp, #0]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80189ba:	9303      	str	r3, [sp, #12]
    t[ 9] -= t[17] * ORDER_4;
 80189bc:	fba7 0209 	umull	r0, r2, r7, r9
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 80189c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    t[ 9] -= t[16] * ORDER_5;
 80189c2:	9f06      	ldr	r7, [sp, #24]
    t[ 8] -= t[15] * ORDER_5;
 80189c4:	46d4      	mov	ip, sl
    t[ 9] -= t[16] * ORDER_5;
 80189c6:	fb0c 6607 	mla	r6, ip, r7, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 80189ca:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 9] -= t[16] * ORDER_5;
 80189ce:	9f02      	ldr	r7, [sp, #8]
    t[ 9] -= t[17] * ORDER_4;
 80189d0:	181b      	adds	r3, r3, r0
 80189d2:	eb45 0202 	adc.w	r2, r5, r2
    t[ 9] -= t[16] * ORDER_5;
 80189d6:	fba7 750c 	umull	r7, r5, r7, ip
 80189da:	19db      	adds	r3, r3, r7
 80189dc:	442e      	add	r6, r5
 80189de:	eb46 0602 	adc.w	r6, r6, r2
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80189e2:	9a03      	ldr	r2, [sp, #12]
 80189e4:	0d50      	lsrs	r0, r2, #21
 80189e6:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
 80189ea:	181b      	adds	r3, r3, r0
 80189ec:	9302      	str	r3, [sp, #8]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80189ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    t[ 9] -= t[17] * ORDER_4;
 80189f0:	46ca      	mov	sl, r9
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80189f2:	f3c3 0914 	ubfx	r9, r3, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 80189f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189f8:	ea4f 5053 	mov.w	r0, r3, lsr #21
 80189fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189fe:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8018a02:	ea4f 5563 	mov.w	r5, r3, asr #21
    t[10] -= t[17] * ORDER_5;
 8018a06:	9b04      	ldr	r3, [sp, #16]
 8018a08:	fb0c 1103 	mla	r1, ip, r3, r1
 8018a0c:	9b00      	ldr	r3, [sp, #0]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8018a0e:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018a12:	eb19 0900 	adds.w	r9, r9, r0
    t[10] -= t[17] * ORDER_5;
 8018a16:	fba3 0c0c 	umull	r0, ip, r3, ip
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018a1a:	9b02      	ldr	r3, [sp, #8]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018a1c:	f145 0500 	adc.w	r5, r5, #0
    t[10] -= t[17] * ORDER_5;
 8018a20:	eb19 0900 	adds.w	r9, r9, r0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018a24:	ea4f 5053 	mov.w	r0, r3, lsr #21
 8018a28:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
    t[10] -= t[17] * ORDER_5;
 8018a2c:	4461      	add	r1, ip
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    t[10] -= t[17] * ORDER_5;
 8018a30:	eb41 0105 	adc.w	r1, r1, r5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018a34:	eb19 0900 	adds.w	r9, r9, r0
 8018a38:	eb41 5868 	adc.w	r8, r1, r8, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018a3c:	ea4f 5759 	mov.w	r7, r9, lsr #21
 8018a40:	ea47 27c8 	orr.w	r7, r7, r8, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018a44:	f3c3 0b14 	ubfx	fp, r3, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018a48:	eb1b 0b07 	adds.w	fp, fp, r7
 8018a4c:	ea4f 5668 	mov.w	r6, r8, asr #21
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8018a50:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    t[ 0] -= t[12] * ORDER_0;
 8018a52:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8018cd8 <sc_reduce+0xbe4>
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018a56:	f146 0600 	adc.w	r6, r6, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018a5a:	ea4f 535b 	mov.w	r3, fp, lsr #21
 8018a5e:	ea43 23c6 	orr.w	r3, r3, r6, lsl #11
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8018a62:	f3c7 0014 	ubfx	r0, r7, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018a66:	1576      	asrs	r6, r6, #21
    t[ 0] -= t[12] * ORDER_0;
 8018a68:	425f      	negs	r7, r3
 8018a6a:	fb08 7206 	mla	r2, r8, r6, r7
 8018a6e:	fba3 1808 	umull	r1, r8, r3, r8
 8018a72:	1840      	adds	r0, r0, r1
 8018a74:	eb42 0808 	adc.w	r8, r2, r8
    t[ 1] -= t[12] * ORDER_1;
 8018a78:	4998      	ldr	r1, [pc, #608]	; (8018cdc <sc_reduce+0xbe8>)
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8018a7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a7c:	f3c2 0c14 	ubfx	ip, r2, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 8018a80:	fb01 7206 	mla	r2, r1, r6, r7
 8018a84:	fba3 1e01 	umull	r1, lr, r3, r1
 8018a88:	eb1c 0101 	adds.w	r1, ip, r1
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8018a8c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
 8018a90:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 8018a94:	eb42 020e 	adc.w	r2, r2, lr
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8018a98:	eb11 010c 	adds.w	r1, r1, ip
 8018a9c:	eb42 5268 	adc.w	r2, r2, r8, asr #21
 8018aa0:	f3c0 0814 	ubfx	r8, r0, #0, #21
 8018aa4:	f8cd 8000 	str.w	r8, [sp]
    t[ 2] -= t[12] * ORDER_2;
 8018aa8:	488d      	ldr	r0, [pc, #564]	; (8018ce0 <sc_reduce+0xbec>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8018aaa:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    t[ 2] -= t[12] * ORDER_2;
 8018aae:	fb00 7506 	mla	r5, r0, r6, r7
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8018ab2:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 2] -= t[12] * ORDER_2;
 8018ab6:	fba3 0e00 	umull	r0, lr, r3, r0
 8018aba:	eb1c 0000 	adds.w	r0, ip, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8018abe:	ea4f 5c51 	mov.w	ip, r1, lsr #21
 8018ac2:	ea4c 2cc2 	orr.w	ip, ip, r2, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 8018ac6:	eb45 0e0e 	adc.w	lr, r5, lr
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8018aca:	eb10 000c 	adds.w	r0, r0, ip
 8018ace:	eb4e 5e62 	adc.w	lr, lr, r2, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018ad2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    t[ 3] -= t[12] * ORDER_3;
 8018ad6:	4a83      	ldr	r2, [pc, #524]	; (8018ce4 <sc_reduce+0xbf0>)
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018ad8:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 3] -= t[12] * ORDER_3;
 8018adc:	fb02 7506 	mla	r5, r2, r6, r7
 8018ae0:	fba3 2802 	umull	r2, r8, r3, r2
 8018ae4:	eb1c 0202 	adds.w	r2, ip, r2
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8018ae8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    t[ 3] -= t[12] * ORDER_3;
 8018aec:	eb45 0508 	adc.w	r5, r5, r8
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8018af0:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8018af4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8018af8:	eb12 020c 	adds.w	r2, r2, ip
 8018afc:	eb45 556e 	adc.w	r5, r5, lr, asr #21
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8018b00:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 4] -= t[12] * ORDER_4;
 8018b04:	fb0a 7806 	mla	r8, sl, r6, r7
 8018b08:	fba3 ea0a 	umull	lr, sl, r3, sl
 8018b0c:	eb1c 0c0e 	adds.w	ip, ip, lr
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018b10:	ea4f 5e52 	mov.w	lr, r2, lsr #21
 8018b14:	ea4e 2ec5 	orr.w	lr, lr, r5, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 8018b18:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018b1c:	eb1c 0e0e 	adds.w	lr, ip, lr
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8018b20:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018b24:	eb48 5865 	adc.w	r8, r8, r5, asr #21
    t[ 5] -= t[12] * ORDER_5;
 8018b28:	4d6f      	ldr	r5, [pc, #444]	; (8018ce8 <sc_reduce+0xbf4>)
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8018b2a:	f3ca 0c14 	ubfx	ip, sl, #0, #21
    t[ 5] -= t[12] * ORDER_5;
 8018b2e:	fb05 7606 	mla	r6, r5, r6, r7
 8018b32:	fba3 3705 	umull	r3, r7, r3, r5
 8018b36:	eb1c 0503 	adds.w	r5, ip, r3
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8018b3a:	ea4f 5c5e 	mov.w	ip, lr, lsr #21
 8018b3e:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018b42:	9b07      	ldr	r3, [sp, #28]
    t[ 5] -= t[12] * ORDER_5;
 8018b44:	eb46 0607 	adc.w	r6, r6, r7
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8018b48:	eb15 050c 	adds.w	r5, r5, ip
 8018b4c:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8018b50:	ea4f 5c55 	mov.w	ip, r5, lsr #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018b54:	9f01      	ldr	r7, [sp, #4]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8018b56:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018b5a:	f3c3 0614 	ubfx	r6, r3, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8018b5e:	eb16 060c 	adds.w	r6, r6, ip
 8018b62:	ea4f 5368 	mov.w	r3, r8, asr #21
 8018b66:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018b6a:	f3c7 0c14 	ubfx	ip, r7, #0, #21
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018b6e:	0d77      	lsrs	r7, r6, #21
 8018b70:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 8018b74:	eb1c 0c07 	adds.w	ip, ip, r7
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8018b78:	9f03      	ldr	r7, [sp, #12]
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018b7a:	ea4f 5363 	mov.w	r3, r3, asr #21
 8018b7e:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8018b82:	f3c7 0a14 	ubfx	sl, r7, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018b86:	ea4f 575c 	mov.w	r7, ip, lsr #21
 8018b8a:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 8018b8e:	eb1a 0a07 	adds.w	sl, sl, r7
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018b92:	9f02      	ldr	r7, [sp, #8]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018b94:	ea4f 5363 	mov.w	r3, r3, asr #21
 8018b98:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018b9c:	f3c7 0814 	ubfx	r8, r7, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8018ba0:	ea4f 575a 	mov.w	r7, sl, lsr #21
 8018ba4:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 8018ba8:	eb18 0807 	adds.w	r8, r8, r7
 8018bac:	ea4f 5363 	mov.w	r3, r3, asr #21
 8018bb0:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018bb4:	ea4f 5758 	mov.w	r7, r8, lsr #21
 8018bb8:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018bbc:	f3c9 0914 	ubfx	r9, r9, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018bc0:	eb19 0907 	adds.w	r9, r9, r7
 8018bc4:	ea4f 5363 	mov.w	r3, r3, asr #21
 8018bc8:	f143 0300 	adc.w	r3, r3, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8018bcc:	f3cb 0714 	ubfx	r7, fp, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018bd0:	ea4f 5b59 	mov.w	fp, r9, lsr #21
 8018bd4:	ea4b 2bc3 	orr.w	fp, fp, r3, lsl #11
    s[ 0] = (byte)(t[ 0] >>  0);
 8018bd8:	9b00      	ldr	r3, [sp, #0]
 8018bda:	7023      	strb	r3, [r4, #0]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018bdc:	eb17 070b 	adds.w	r7, r7, fp
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8018be0:	f3c1 0114 	ubfx	r1, r1, #0, #21
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 8018be4:	f8dd b000 	ldr.w	fp, [sp]
    s[ 1] = (byte)(t[ 0] >>  8);
 8018be8:	0a1b      	lsrs	r3, r3, #8
 8018bea:	7063      	strb	r3, [r4, #1]
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 8018bec:	014b      	lsls	r3, r1, #5
 8018bee:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8018bf2:	70a3      	strb	r3, [r4, #2]
    s[ 3] = (byte)(t[ 1] >>  3);
 8018bf4:	08cb      	lsrs	r3, r1, #3
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8018bf6:	f3c0 0014 	ubfx	r0, r0, #0, #21
    s[ 3] = (byte)(t[ 1] >>  3);
 8018bfa:	70e3      	strb	r3, [r4, #3]
    s[ 4] = (byte)(t[ 1] >> 11);
 8018bfc:	0acb      	lsrs	r3, r1, #11
 8018bfe:	7123      	strb	r3, [r4, #4]
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8018c00:	0083      	lsls	r3, r0, #2
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8018c02:	f3c2 0214 	ubfx	r2, r2, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8018c06:	ea43 41d1 	orr.w	r1, r3, r1, lsr #19
    s[ 6] = (byte)(t[ 2] >>  6);
 8018c0a:	0983      	lsrs	r3, r0, #6
 8018c0c:	71a3      	strb	r3, [r4, #6]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 8018c0e:	01d3      	lsls	r3, r2, #7
 8018c10:	ea43 3090 	orr.w	r0, r3, r0, lsr #14
    s[ 8] = (byte)(t[ 3] >>  1);
 8018c14:	0853      	lsrs	r3, r2, #1
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8018c16:	f3ce 0e14 	ubfx	lr, lr, #0, #21
    s[ 8] = (byte)(t[ 3] >>  1);
 8018c1a:	7223      	strb	r3, [r4, #8]
    s[ 9] = (byte)(t[ 3] >>  9);
 8018c1c:	0a53      	lsrs	r3, r2, #9
 8018c1e:	7263      	strb	r3, [r4, #9]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 8018c20:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8018c24:	ea43 4252 	orr.w	r2, r3, r2, lsr #17
    s[11] = (byte)(t[ 4] >>  4);
 8018c28:	ea4f 131e 	mov.w	r3, lr, lsr #4
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8018c2c:	f3c5 0514 	ubfx	r5, r5, #0, #21
    s[11] = (byte)(t[ 4] >>  4);
 8018c30:	72e3      	strb	r3, [r4, #11]
    s[12] = (byte)(t[ 4] >> 12);
 8018c32:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8018c36:	7323      	strb	r3, [r4, #12]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8018c38:	196b      	adds	r3, r5, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8018c3a:	f3c6 0614 	ubfx	r6, r6, #0, #21
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8018c3e:	ea43 5e1e 	orr.w	lr, r3, lr, lsr #20
    s[14] = (byte)(t[ 5] >>  7);
 8018c42:	09eb      	lsrs	r3, r5, #7
 8018c44:	73a3      	strb	r3, [r4, #14]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 8018c46:	01b3      	lsls	r3, r6, #6
 8018c48:	ea43 35d5 	orr.w	r5, r3, r5, lsr #15
    s[16] = (byte)(t[ 6] >>  2);
 8018c4c:	08b3      	lsrs	r3, r6, #2
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8018c4e:	f3cc 0c14 	ubfx	ip, ip, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8018c52:	7161      	strb	r1, [r4, #5]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 8018c54:	71e0      	strb	r0, [r4, #7]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 8018c56:	72a2      	strb	r2, [r4, #10]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8018c58:	f884 e00d 	strb.w	lr, [r4, #13]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 8018c5c:	73e5      	strb	r5, [r4, #15]
    s[16] = (byte)(t[ 6] >>  2);
 8018c5e:	7423      	strb	r3, [r4, #16]
    s[17] = (byte)(t[ 6] >> 10);
 8018c60:	0ab3      	lsrs	r3, r6, #10
 8018c62:	7463      	strb	r3, [r4, #17]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8018c64:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8018c68:	f3ca 0a14 	ubfx	sl, sl, #0, #21
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8018c6c:	ea43 4696 	orr.w	r6, r3, r6, lsr #18
    s[19] = (byte)(t[ 7] >>  5);
 8018c70:	ea4f 135c 	mov.w	r3, ip, lsr #5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8018c74:	f3c8 0814 	ubfx	r8, r8, #0, #21
    s[19] = (byte)(t[ 7] >>  5);
 8018c78:	74e3      	strb	r3, [r4, #19]
    s[22] = (byte)(t[ 8] >>  8);
 8018c7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018c7e:	75a3      	strb	r3, [r4, #22]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8018c80:	ea4f 1348 	mov.w	r3, r8, lsl #5
    s[21] = (byte)(t[ 8] >>  0);
 8018c84:	f884 a015 	strb.w	sl, [r4, #21]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8018c88:	ea43 4a1a 	orr.w	sl, r3, sl, lsr #16
    s[24] = (byte)(t[ 9] >>  3);
 8018c8c:	ea4f 03d8 	mov.w	r3, r8, lsr #3
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8018c90:	f3c9 0914 	ubfx	r9, r9, #0, #21
    s[24] = (byte)(t[ 9] >>  3);
 8018c94:	7623      	strb	r3, [r4, #24]
    s[25] = (byte)(t[ 9] >> 11);
 8018c96:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 8018c9a:	7663      	strb	r3, [r4, #25]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 8018c9c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8018ca0:	ea43 48d8 	orr.w	r8, r3, r8, lsr #19
    s[27] = (byte)(t[10] >>  6);
 8018ca4:	ea4f 1399 	mov.w	r3, r9, lsr #6
 8018ca8:	76e3      	strb	r3, [r4, #27]
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 8018caa:	01fb      	lsls	r3, r7, #7
 8018cac:	ea43 3999 	orr.w	r9, r3, r9, lsr #14
    s[29] = (byte)(t[11] >>  1);
 8018cb0:	087b      	lsrs	r3, r7, #1
    s[20] = (byte)(t[ 7] >> 13);
 8018cb2:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
    s[29] = (byte)(t[11] >>  1);
 8018cb6:	7763      	strb	r3, [r4, #29]
    s[30] = (byte)(t[11] >>  9);
 8018cb8:	0a7b      	lsrs	r3, r7, #9
    s[31] = (byte)(t[11] >> 17);
 8018cba:	0c7f      	lsrs	r7, r7, #17
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8018cbc:	74a6      	strb	r6, [r4, #18]
    s[20] = (byte)(t[ 7] >> 13);
 8018cbe:	f884 c014 	strb.w	ip, [r4, #20]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8018cc2:	f884 a017 	strb.w	sl, [r4, #23]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 8018cc6:	f884 801a 	strb.w	r8, [r4, #26]
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 8018cca:	f884 901c 	strb.w	r9, [r4, #28]
    s[30] = (byte)(t[11] >>  9);
 8018cce:	77a3      	strb	r3, [r4, #30]
    s[31] = (byte)(t[11] >> 17);
 8018cd0:	77e7      	strb	r7, [r4, #31]
}
 8018cd2:	b019      	add	sp, #100	; 0x64
 8018cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd8:	ffea2c13 	.word	0xffea2c13
 8018cdc:	ffe72d19 	.word	0xffe72d19
 8018ce0:	ffe9fb68 	.word	0xffe9fb68
 8018ce4:	fff0c654 	.word	0xfff0c654
 8018ce8:	fff59084 	.word	0xfff59084

08018cec <sc_muladd>:
{
 8018cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf0:	b0b5      	sub	sp, #212	; 0xd4
 8018cf2:	4617      	mov	r7, r2
 8018cf4:	9000      	str	r0, [sp, #0]
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 8018cf6:	4608      	mov	r0, r1
{
 8018cf8:	461e      	mov	r6, r3
 8018cfa:	460c      	mov	r4, r1
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 8018cfc:	f7fd fa86 	bl	801620c <load_3>
 8018d00:	f3c0 0314 	ubfx	r3, r0, #0, #21
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 8018d04:	1ca0      	adds	r0, r4, #2
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 8018d06:	9301      	str	r3, [sp, #4]
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 8018d08:	f7fd fa8a 	bl	8016220 <load_4>
 8018d0c:	f3c0 1354 	ubfx	r3, r0, #5, #21
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 8018d10:	1d60      	adds	r0, r4, #5
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 8018d12:	9302      	str	r3, [sp, #8]
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 8018d14:	f7fd fa7a 	bl	801620c <load_3>
 8018d18:	f3c0 0394 	ubfx	r3, r0, #2, #21
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 8018d1c:	1de0      	adds	r0, r4, #7
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 8018d1e:	9303      	str	r3, [sp, #12]
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 8018d20:	f7fd fa7e 	bl	8016220 <load_4>
 8018d24:	f3c0 13d4 	ubfx	r3, r0, #7, #21
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 8018d28:	f104 000a 	add.w	r0, r4, #10
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 8018d2c:	9304      	str	r3, [sp, #16]
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 8018d2e:	f7fd fa77 	bl	8016220 <load_4>
 8018d32:	f3c0 1314 	ubfx	r3, r0, #4, #21
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 8018d36:	f104 000d 	add.w	r0, r4, #13
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 8018d3a:	9305      	str	r3, [sp, #20]
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 8018d3c:	f7fd fa66 	bl	801620c <load_3>
 8018d40:	f3c0 0354 	ubfx	r3, r0, #1, #21
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 8018d44:	f104 000f 	add.w	r0, r4, #15
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 8018d48:	9306      	str	r3, [sp, #24]
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 8018d4a:	f7fd fa69 	bl	8016220 <load_4>
 8018d4e:	f3c0 1394 	ubfx	r3, r0, #6, #21
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 8018d52:	f104 0012 	add.w	r0, r4, #18
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 8018d56:	9307      	str	r3, [sp, #28]
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 8018d58:	f7fd fa58 	bl	801620c <load_3>
 8018d5c:	f3c0 03d4 	ubfx	r3, r0, #3, #21
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 8018d60:	f104 0015 	add.w	r0, r4, #21
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 8018d64:	9308      	str	r3, [sp, #32]
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 8018d66:	f7fd fa51 	bl	801620c <load_3>
 8018d6a:	f3c0 0314 	ubfx	r3, r0, #0, #21
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 8018d6e:	f104 0017 	add.w	r0, r4, #23
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 8018d72:	9309      	str	r3, [sp, #36]	; 0x24
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 8018d74:	f7fd fa54 	bl	8016220 <load_4>
 8018d78:	f3c0 1354 	ubfx	r3, r0, #5, #21
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 8018d7c:	f104 001a 	add.w	r0, r4, #26
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 8018d80:	930a      	str	r3, [sp, #40]	; 0x28
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 8018d82:	f7fd fa43 	bl	801620c <load_3>
 8018d86:	f3c0 0394 	ubfx	r3, r0, #2, #21
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8018d8a:	f104 001c 	add.w	r0, r4, #28
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 8018d8e:	930b      	str	r3, [sp, #44]	; 0x2c
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8018d90:	f7fd fa46 	bl	8016220 <load_4>
 8018d94:	4680      	mov	r8, r0
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 8018d96:	4638      	mov	r0, r7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8018d98:	911f      	str	r1, [sp, #124]	; 0x7c
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 8018d9a:	f7fd fa37 	bl	801620c <load_3>
 8018d9e:	f3c0 0314 	ubfx	r3, r0, #0, #21
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 8018da2:	1cb8      	adds	r0, r7, #2
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 8018da4:	930c      	str	r3, [sp, #48]	; 0x30
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 8018da6:	f7fd fa3b 	bl	8016220 <load_4>
 8018daa:	f3c0 1354 	ubfx	r3, r0, #5, #21
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 8018dae:	1d78      	adds	r0, r7, #5
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 8018db0:	930d      	str	r3, [sp, #52]	; 0x34
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 8018db2:	f7fd fa2b 	bl	801620c <load_3>
 8018db6:	f3c0 0394 	ubfx	r3, r0, #2, #21
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 8018dba:	1df8      	adds	r0, r7, #7
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 8018dbc:	930e      	str	r3, [sp, #56]	; 0x38
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 8018dbe:	f7fd fa2f 	bl	8016220 <load_4>
 8018dc2:	f3c0 13d4 	ubfx	r3, r0, #7, #21
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 8018dc6:	f107 000a 	add.w	r0, r7, #10
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 8018dca:	930f      	str	r3, [sp, #60]	; 0x3c
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 8018dcc:	f7fd fa28 	bl	8016220 <load_4>
 8018dd0:	f3c0 1314 	ubfx	r3, r0, #4, #21
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 8018dd4:	f107 000d 	add.w	r0, r7, #13
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 8018dd8:	9310      	str	r3, [sp, #64]	; 0x40
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 8018dda:	f7fd fa17 	bl	801620c <load_3>
 8018dde:	f3c0 0354 	ubfx	r3, r0, #1, #21
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 8018de2:	f107 000f 	add.w	r0, r7, #15
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 8018de6:	9311      	str	r3, [sp, #68]	; 0x44
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 8018de8:	f7fd fa1a 	bl	8016220 <load_4>
 8018dec:	f3c0 1394 	ubfx	r3, r0, #6, #21
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 8018df0:	f107 0012 	add.w	r0, r7, #18
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 8018df4:	9312      	str	r3, [sp, #72]	; 0x48
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 8018df6:	f7fd fa09 	bl	801620c <load_3>
 8018dfa:	f3c0 03d4 	ubfx	r3, r0, #3, #21
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 8018dfe:	f107 0015 	add.w	r0, r7, #21
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 8018e02:	9313      	str	r3, [sp, #76]	; 0x4c
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 8018e04:	f7fd fa02 	bl	801620c <load_3>
 8018e08:	f3c0 0314 	ubfx	r3, r0, #0, #21
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 8018e0c:	f107 0017 	add.w	r0, r7, #23
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 8018e10:	9314      	str	r3, [sp, #80]	; 0x50
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 8018e12:	f7fd fa05 	bl	8016220 <load_4>
 8018e16:	f3c0 1354 	ubfx	r3, r0, #5, #21
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 8018e1a:	f107 001a 	add.w	r0, r7, #26
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 8018e1e:	9315      	str	r3, [sp, #84]	; 0x54
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 8018e20:	f7fd f9f4 	bl	801620c <load_3>
 8018e24:	f3c0 0394 	ubfx	r3, r0, #2, #21
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8018e28:	f107 001c 	add.w	r0, r7, #28
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 8018e2c:	9316      	str	r3, [sp, #88]	; 0x58
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8018e2e:	f7fd f9f7 	bl	8016220 <load_4>
 8018e32:	4681      	mov	r9, r0
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8018e34:	4630      	mov	r0, r6
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8018e36:	460c      	mov	r4, r1
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8018e38:	f7fd f9e8 	bl	801620c <load_3>
 8018e3c:	9017      	str	r0, [sp, #92]	; 0x5c
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 8018e3e:	1cb0      	adds	r0, r6, #2
 8018e40:	f7fd f9ee 	bl	8016220 <load_4>
 8018e44:	902a      	str	r0, [sp, #168]	; 0xa8
    cd[ 2] = MASK_21 & (load_3(c +  5) >> 2);
 8018e46:	1d70      	adds	r0, r6, #5
 8018e48:	f7fd f9e0 	bl	801620c <load_3>
 8018e4c:	4682      	mov	sl, r0
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 8018e4e:	1df0      	adds	r0, r6, #7
 8018e50:	f7fd f9e6 	bl	8016220 <load_4>
 8018e54:	902b      	str	r0, [sp, #172]	; 0xac
    cd[ 4] = MASK_21 & (load_4(c + 10) >> 4);
 8018e56:	f106 000a 	add.w	r0, r6, #10
 8018e5a:	f7fd f9e1 	bl	8016220 <load_4>
 8018e5e:	4683      	mov	fp, r0
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 8018e60:	f106 000d 	add.w	r0, r6, #13
 8018e64:	f7fd f9d2 	bl	801620c <load_3>
 8018e68:	902d      	str	r0, [sp, #180]	; 0xb4
    cd[ 6] = MASK_21 & (load_4(c + 15) >> 6);
 8018e6a:	f106 000f 	add.w	r0, r6, #15
 8018e6e:	f7fd f9d7 	bl	8016220 <load_4>
 8018e72:	4605      	mov	r5, r0
    cd[ 7] = MASK_21 & (load_3(c + 18) >> 3);
 8018e74:	f106 0012 	add.w	r0, r6, #18
 8018e78:	f7fd f9c8 	bl	801620c <load_3>
 8018e7c:	902f      	str	r0, [sp, #188]	; 0xbc
    cd[ 8] = MASK_21 & (load_3(c + 21) >> 0);
 8018e7e:	f106 0015 	add.w	r0, r6, #21
 8018e82:	f7fd f9c3 	bl	801620c <load_3>
 8018e86:	901c      	str	r0, [sp, #112]	; 0x70
    cd[ 9] = MASK_21 & (load_4(c + 23) >> 5);
 8018e88:	f106 0017 	add.w	r0, r6, #23
 8018e8c:	f7fd f9c8 	bl	8016220 <load_4>
 8018e90:	9031      	str	r0, [sp, #196]	; 0xc4
    cd[10] = MASK_21 & (load_3(c + 26) >> 2);
 8018e92:	f106 001a 	add.w	r0, r6, #26
 8018e96:	f7fd f9b9 	bl	801620c <load_3>
 8018e9a:	4607      	mov	r7, r0
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8018e9c:	f106 001c 	add.w	r0, r6, #28
 8018ea0:	f7fd f9be 	bl	8016220 <load_4>
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8018ea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    t[ 0] = cd[ 0] + (sword64)ad[ 0] * bd[ 0];
 8018ea6:	9e01      	ldr	r6, [sp, #4]
 8018ea8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8018eac:	9033      	str	r0, [sp, #204]	; 0xcc
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8018eae:	f3c3 0014 	ubfx	r0, r3, #0, #21
    t[ 0] = cd[ 0] + (sword64)ad[ 0] * bd[ 0];
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	461a      	mov	r2, r3
 8018eb6:	fbe6 020c 	umlal	r0, r2, r6, ip
 8018eba:	e9cd 0217 	strd	r0, r2, [sp, #92]	; 0x5c
    t[ 2] = cd[ 2] + (sword64)ad[ 0] * bd[ 2] + (sword64)ad[ 1] * bd[ 1] +
 8018ebe:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8018ec2:	9a01      	ldr	r2, [sp, #4]
    cd[ 2] = MASK_21 & (load_3(c +  5) >> 2);
 8018ec4:	f3ca 0094 	ubfx	r0, sl, #2, #21
    t[ 2] = cd[ 2] + (sword64)ad[ 0] * bd[ 2] + (sword64)ad[ 1] * bd[ 1] +
 8018ec8:	461e      	mov	r6, r3
 8018eca:	fbe2 060c 	umlal	r0, r6, r2, ip
 8018ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ed0:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018ed4:	fbe2 060c 	umlal	r0, r6, r2, ip
 8018ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018eda:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018ede:	fbe2 060c 	umlal	r0, r6, r2, ip
 8018ee2:	9019      	str	r0, [sp, #100]	; 0x64
    t[ 4] = cd[ 4] + (sword64)ad[ 0] * bd[ 4] + (sword64)ad[ 1] * bd[ 3] +
 8018ee4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8018ee8:	9801      	ldr	r0, [sp, #4]
    cd[ 4] = MASK_21 & (load_4(c + 10) >> 4);
 8018eea:	f3cb 1214 	ubfx	r2, fp, #4, #21
    t[ 4] = cd[ 4] + (sword64)ad[ 0] * bd[ 4] + (sword64)ad[ 1] * bd[ 3] +
 8018eee:	469b      	mov	fp, r3
 8018ef0:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8018ef4:	9802      	ldr	r0, [sp, #8]
 8018ef6:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8018efa:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8018efe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018f00:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018f04:	fbe0 2b0c 	umlal	r2, fp, r0, ip
                     (sword64)ad[ 2] * bd[ 2] + (sword64)ad[ 3] * bd[ 1] +
 8018f08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018f0a:	f8dd c010 	ldr.w	ip, [sp, #16]
 8018f0e:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8018f12:	f8dd c014 	ldr.w	ip, [sp, #20]
 8018f16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018f18:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8018f1c:	921a      	str	r2, [sp, #104]	; 0x68
    t[ 6] = cd[ 6] + (sword64)ad[ 0] * bd[ 6] + (sword64)ad[ 1] * bd[ 5] +
 8018f1e:	9801      	ldr	r0, [sp, #4]
    cd[ 6] = MASK_21 & (load_4(c + 15) >> 6);
 8018f20:	f3c5 1294 	ubfx	r2, r5, #6, #21
    t[ 6] = cd[ 6] + (sword64)ad[ 0] * bd[ 6] + (sword64)ad[ 1] * bd[ 5] +
 8018f24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018f26:	469e      	mov	lr, r3
 8018f28:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8018f2c:	9802      	ldr	r0, [sp, #8]
 8018f2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018f30:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8018f34:	9803      	ldr	r0, [sp, #12]
 8018f36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018f38:	fbe0 2e05 	umlal	r2, lr, r0, r5
                     (sword64)ad[ 2] * bd[ 4] + (sword64)ad[ 3] * bd[ 3] +
 8018f3c:	9d04      	ldr	r5, [sp, #16]
 8018f3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018f40:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8018f44:	980e      	ldr	r0, [sp, #56]	; 0x38
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 8018f46:	9d06      	ldr	r5, [sp, #24]
                     (sword64)ad[ 2] * bd[ 4] + (sword64)ad[ 3] * bd[ 3] +
 8018f48:	fbe0 2e0c 	umlal	r2, lr, r0, ip
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 8018f4c:	980d      	ldr	r0, [sp, #52]	; 0x34
    t[ 8] = cd[ 8] + (sword64)ad[ 0] * bd[ 8] + (sword64)ad[ 1] * bd[ 7] +
 8018f4e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 8018f52:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8018f56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018f58:	9d07      	ldr	r5, [sp, #28]
 8018f5a:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8018f5e:	921b      	str	r2, [sp, #108]	; 0x6c
    cd[ 8] = MASK_21 & (load_3(c + 21) >> 0);
 8018f60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018f62:	f3c2 0014 	ubfx	r0, r2, #0, #21
    t[ 8] = cd[ 8] + (sword64)ad[ 0] * bd[ 8] + (sword64)ad[ 1] * bd[ 7] +
 8018f66:	9a01      	ldr	r2, [sp, #4]
 8018f68:	461d      	mov	r5, r3
 8018f6a:	fbe2 050c 	umlal	r0, r5, r2, ip
 8018f6e:	9a02      	ldr	r2, [sp, #8]
 8018f70:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8018f74:	fbe2 050c 	umlal	r0, r5, r2, ip
 8018f78:	9a03      	ldr	r2, [sp, #12]
 8018f7a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8018f7e:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 2] * bd[ 6] + (sword64)ad[ 3] * bd[ 5] +
 8018f82:	9a04      	ldr	r2, [sp, #16]
 8018f84:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018f88:	fbe2 050c 	umlal	r0, r5, r2, ip
 8018f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018f8e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8018f92:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 4] * bd[ 4] + (sword64)ad[ 5] * bd[ 3] +
 8018f96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f98:	f8dd c018 	ldr.w	ip, [sp, #24]
 8018f9c:	fbe2 050c 	umlal	r0, r5, r2, ip
 8018fa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018fa2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018fa6:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 6] * bd[ 2] + (sword64)ad[ 7] * bd[ 1] +
 8018faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fac:	f8dd c020 	ldr.w	ip, [sp, #32]
 8018fb0:	fbe2 050c 	umlal	r0, r5, r2, ip
 8018fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018fb6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8018fba:	fbe2 050c 	umlal	r0, r5, r2, ip
 8018fbe:	901c      	str	r0, [sp, #112]	; 0x70
    t[10] = cd[10] + (sword64)ad[ 0] * bd[10] + (sword64)ad[ 1] * bd[ 9] +
 8018fc0:	9a01      	ldr	r2, [sp, #4]
    cd[10] = MASK_21 & (load_3(c + 26) >> 2);
 8018fc2:	f3c7 0094 	ubfx	r0, r7, #2, #21
    t[10] = cd[10] + (sword64)ad[ 0] * bd[10] + (sword64)ad[ 1] * bd[ 9] +
 8018fc6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8018fc8:	469c      	mov	ip, r3
 8018fca:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8018fce:	9a02      	ldr	r2, [sp, #8]
 8018fd0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8018fd2:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8018fd6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018fd8:	9a03      	ldr	r2, [sp, #12]
 8018fda:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 2] * bd[ 8] + (sword64)ad[ 3] * bd[ 7] +
 8018fde:	9a04      	ldr	r2, [sp, #16]
 8018fe0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8018fe2:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8018fe6:	9a05      	ldr	r2, [sp, #20]
 8018fe8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018fea:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 4] * bd[ 6] + (sword64)ad[ 5] * bd[ 5] +
 8018fee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018ff0:	9f06      	ldr	r7, [sp, #24]
 8018ff2:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8018ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ff8:	9f07      	ldr	r7, [sp, #28]
 8018ffa:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 6] * bd[ 4] + (sword64)ad[ 7] * bd[ 3] +
 8018ffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019000:	9f08      	ldr	r7, [sp, #32]
 8019002:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8019006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019008:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801900a:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 8] * bd[ 2] + (sword64)ad[ 9] * bd[ 1] +
 801900e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019010:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019012:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8019016:	e9dd 720b 	ldrd	r7, r2, [sp, #44]	; 0x2c
 801901a:	fbe2 0c07 	umlal	r0, ip, r2, r7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 801901e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 8019020:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8019022:	ea4f 19d9 	mov.w	r9, r9, lsr #7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8019026:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 801902a:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
    bd[11] = (word32)(load_4(b + 28) >> 7);
 801902e:	ea49 6944 	orr.w	r9, r9, r4, lsl #25
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 8019032:	9a02      	ldr	r2, [sp, #8]
 8019034:	9c03      	ldr	r4, [sp, #12]
                     (sword64)ad[ 8] * bd[ 2] + (sword64)ad[ 9] * bd[ 1] +
 8019036:	e9cd 0c1d 	strd	r0, ip, [sp, #116]	; 0x74
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 801903a:	fba4 4707 	umull	r4, r7, r4, r7
 801903e:	fba2 2009 	umull	r2, r0, r2, r9
 8019042:	1912      	adds	r2, r2, r4
 8019044:	eb40 0707 	adc.w	r7, r0, r7
 8019048:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801904a:	9804      	ldr	r0, [sp, #16]
 801904c:	fbe0 2704 	umlal	r2, r7, r0, r4
 8019050:	4610      	mov	r0, r2
                     (sword64)ad[ 3] * bd[ 9] + (sword64)ad[ 4] * bd[ 8] +
 8019052:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019054:	9a05      	ldr	r2, [sp, #20]
 8019056:	fbe2 0704 	umlal	r0, r7, r2, r4
 801905a:	9a06      	ldr	r2, [sp, #24]
 801905c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801905e:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 5] * bd[ 7] + (sword64)ad[ 6] * bd[ 6] +
 8019062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019064:	9c07      	ldr	r4, [sp, #28]
 8019066:	fbe2 0704 	umlal	r0, r7, r2, r4
 801906a:	9c08      	ldr	r4, [sp, #32]
 801906c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801906e:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 7] * bd[ 5] + (sword64)ad[ 8] * bd[ 4] +
 8019072:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019074:	9c09      	ldr	r4, [sp, #36]	; 0x24
    t[14] =          (sword64)ad[ 3] * bd[11] + (sword64)ad[ 4] * bd[10] +
 8019076:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
                     (sword64)ad[ 7] * bd[ 5] + (sword64)ad[ 8] * bd[ 4] +
 801907a:	fbe2 0704 	umlal	r0, r7, r2, r4
 801907e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019082:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 9] * bd[ 3] + (sword64)ad[10] * bd[ 2] +
 8019086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019088:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801908a:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[11] * bd[ 1];
 801908e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019090:	fba2 2408 	umull	r2, r4, r2, r8
                     (sword64)ad[ 9] * bd[ 3] + (sword64)ad[10] * bd[ 2] +
 8019094:	1882      	adds	r2, r0, r2
 8019096:	eb47 0704 	adc.w	r7, r7, r4
 801909a:	921f      	str	r2, [sp, #124]	; 0x7c
    t[14] =          (sword64)ad[ 3] * bd[11] + (sword64)ad[ 4] * bd[10] +
 801909c:	9c05      	ldr	r4, [sp, #20]
 801909e:	9a04      	ldr	r2, [sp, #16]
 80190a0:	fba4 4c0c 	umull	r4, ip, r4, ip
 80190a4:	fba2 2009 	umull	r2, r0, r2, r9
 80190a8:	1912      	adds	r2, r2, r4
 80190aa:	eb40 000c 	adc.w	r0, r0, ip
 80190ae:	9c06      	ldr	r4, [sp, #24]
 80190b0:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 80190b4:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 5] * bd[ 9] + (sword64)ad[ 6] * bd[ 8] +
 80190b8:	9c07      	ldr	r4, [sp, #28]
 80190ba:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80190be:	fbe4 200c 	umlal	r2, r0, r4, ip
 80190c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80190c4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80190c8:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 7] * bd[ 7] + (sword64)ad[ 8] * bd[ 6] +
 80190cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80190ce:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80190d2:	fbe4 200c 	umlal	r2, r0, r4, ip
 80190d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80190d8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80190dc:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 80190e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80190e2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80190e6:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[11] * bd[ 3];
 80190ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80190ec:	fba4 4c08 	umull	r4, ip, r4, r8
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 80190f0:	1912      	adds	r2, r2, r4
 80190f2:	9220      	str	r2, [sp, #128]	; 0x80
 80190f4:	eb40 020c 	adc.w	r2, r0, ip
    t[16] =          (sword64)ad[ 5] * bd[11] + (sword64)ad[ 6] * bd[10] +
 80190f8:	9c07      	ldr	r4, [sp, #28]
 80190fa:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 80190fe:	9221      	str	r2, [sp, #132]	; 0x84
    t[16] =          (sword64)ad[ 5] * bd[11] + (sword64)ad[ 6] * bd[10] +
 8019100:	9a06      	ldr	r2, [sp, #24]
 8019102:	fba4 c40c 	umull	ip, r4, r4, ip
 8019106:	fba2 2009 	umull	r2, r0, r2, r9
 801910a:	eb12 020c 	adds.w	r2, r2, ip
 801910e:	eb40 0404 	adc.w	r4, r0, r4
 8019112:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8019116:	9808      	ldr	r0, [sp, #32]
 8019118:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[ 7] * bd[ 9] + (sword64)ad[ 8] * bd[ 8] +
 801911c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801911e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8019122:	fbe0 240c 	umlal	r2, r4, r0, ip
 8019126:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019128:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801912c:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 8019130:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019132:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8019136:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[11] * bd[ 5];
 801913a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801913c:	fba0 0c08 	umull	r0, ip, r0, r8
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 8019140:	1812      	adds	r2, r2, r0
 8019142:	9222      	str	r2, [sp, #136]	; 0x88
 8019144:	eb44 020c 	adc.w	r2, r4, ip
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 8019148:	9809      	ldr	r0, [sp, #36]	; 0x24
 801914a:	9c16      	ldr	r4, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 801914c:	9223      	str	r2, [sp, #140]	; 0x8c
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 801914e:	9a08      	ldr	r2, [sp, #32]
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 8019150:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 8019154:	fba0 0404 	umull	r0, r4, r0, r4
 8019158:	fba2 2a09 	umull	r2, sl, r2, r9
 801915c:	1812      	adds	r2, r2, r0
 801915e:	eb4a 0a04 	adc.w	sl, sl, r4
 8019162:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019166:	fbe0 2a04 	umlal	r2, sl, r0, r4
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 801916a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801916c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801916e:	fbe0 2a04 	umlal	r2, sl, r0, r4
                     (sword64)ad[11] * bd[ 7];
 8019172:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019174:	fba0 0408 	umull	r0, r4, r0, r8
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 8019178:	1812      	adds	r2, r2, r0
 801917a:	9224      	str	r2, [sp, #144]	; 0x90
 801917c:	eb4a 0204 	adc.w	r2, sl, r4
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 8019180:	9816      	ldr	r0, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 8019182:	9225      	str	r2, [sp, #148]	; 0x94
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 8019184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019186:	fba0 c00c 	umull	ip, r0, r0, ip
 801918a:	fba2 2409 	umull	r2, r4, r2, r9
 801918e:	eb12 020c 	adds.w	r2, r2, ip
 8019192:	eb44 0400 	adc.w	r4, r4, r0
                     (sword64)ad[11] * bd[ 9];
 8019196:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019198:	fba0 0c08 	umull	r0, ip, r0, r8
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 801919c:	1812      	adds	r2, r2, r0
 801919e:	9226      	str	r2, [sp, #152]	; 0x98
 80191a0:	eb44 020c 	adc.w	r2, r4, ip
 80191a4:	9227      	str	r2, [sp, #156]	; 0x9c
    t[22] =          (sword64)ad[11] * bd[11];
 80191a6:	fba9 2008 	umull	r2, r0, r9, r8
 80191aa:	e9cd 2028 	strd	r2, r0, [sp, #160]	; 0xa0
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 80191ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    t[ 1] = cd[ 1] + (sword64)ad[ 0] * bd[ 1] + (sword64)ad[ 1] * bd[ 0];
 80191b0:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 80191b4:	f3c2 1454 	ubfx	r4, r2, #5, #21
    t[ 1] = cd[ 1] + (sword64)ad[ 0] * bd[ 1] + (sword64)ad[ 1] * bd[ 0];
 80191b8:	9a01      	ldr	r2, [sp, #4]
 80191ba:	4618      	mov	r0, r3
 80191bc:	fbe2 400c 	umlal	r4, r0, r2, ip
 80191c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191c2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80191c6:	fbe2 400c 	umlal	r4, r0, r2, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80191ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80191cc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80191d0:	0d52      	lsrs	r2, r2, #21
 80191d2:	ea42 22cc 	orr.w	r2, r2, ip, lsl #11
 80191d6:	18a2      	adds	r2, r4, r2
 80191d8:	922a      	str	r2, [sp, #168]	; 0xa8
 80191da:	eb40 526c 	adc.w	r2, r0, ip, asr #21
 80191de:	9218      	str	r2, [sp, #96]	; 0x60
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 80191e0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    t[ 3] = cd[ 3] + (sword64)ad[ 0] * bd[ 3] + (sword64)ad[ 1] * bd[ 2] +
 80191e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 80191e4:	f3c2 14d4 	ubfx	r4, r2, #7, #21
    t[ 3] = cd[ 3] + (sword64)ad[ 0] * bd[ 3] + (sword64)ad[ 1] * bd[ 2] +
 80191e8:	9a01      	ldr	r2, [sp, #4]
 80191ea:	469a      	mov	sl, r3
 80191ec:	fbe2 4a00 	umlal	r4, sl, r2, r0
 80191f0:	9a02      	ldr	r2, [sp, #8]
 80191f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80191f4:	fbe2 4a00 	umlal	r4, sl, r2, r0
 80191f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80191fa:	9803      	ldr	r0, [sp, #12]
 80191fc:	fbe2 4a00 	umlal	r4, sl, r2, r0
                     (sword64)ad[ 2] * bd[ 1] + (sword64)ad[ 3] * bd[ 0];
 8019200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019202:	9804      	ldr	r0, [sp, #16]
 8019204:	fbe2 4a00 	umlal	r4, sl, r2, r0
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801920a:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 801920e:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
 8019212:	eb14 020c 	adds.w	r2, r4, ip
 8019216:	922b      	str	r2, [sp, #172]	; 0xac
 8019218:	eb4a 5266 	adc.w	r2, sl, r6, asr #21
 801921c:	922c      	str	r2, [sp, #176]	; 0xb0
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 801921e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    t[ 5] = cd[ 5] + (sword64)ad[ 0] * bd[ 5] + (sword64)ad[ 1] * bd[ 4] +
 8019220:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 8019222:	f3c2 0c54 	ubfx	ip, r2, #1, #21
    t[ 5] = cd[ 5] + (sword64)ad[ 0] * bd[ 5] + (sword64)ad[ 1] * bd[ 4] +
 8019226:	9a01      	ldr	r2, [sp, #4]
 8019228:	4618      	mov	r0, r3
 801922a:	fbe2 c004 	umlal	ip, r0, r2, r4
 801922e:	9a02      	ldr	r2, [sp, #8]
 8019230:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019232:	fbe2 c004 	umlal	ip, r0, r2, r4
 8019236:	9a03      	ldr	r2, [sp, #12]
 8019238:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801923a:	fbe2 c004 	umlal	ip, r0, r2, r4
                     (sword64)ad[ 2] * bd[ 3] + (sword64)ad[ 3] * bd[ 2] +
 801923e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019240:	9c04      	ldr	r4, [sp, #16]
 8019242:	fbe2 c004 	umlal	ip, r0, r2, r4
 8019246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019248:	9c05      	ldr	r4, [sp, #20]
 801924a:	fbe2 c004 	umlal	ip, r0, r2, r4
                     (sword64)ad[ 4] * bd[ 1] + (sword64)ad[ 5] * bd[ 0];
 801924e:	9c06      	ldr	r4, [sp, #24]
 8019250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019252:	fbe2 c004 	umlal	ip, r0, r2, r4
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019256:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019258:	0d52      	lsrs	r2, r2, #21
 801925a:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 801925e:	eb1c 0202 	adds.w	r2, ip, r2
 8019262:	922d      	str	r2, [sp, #180]	; 0xb4
 8019264:	eb40 526b 	adc.w	r2, r0, fp, asr #21
 8019268:	922e      	str	r2, [sp, #184]	; 0xb8
    cd[ 7] = MASK_21 & (load_3(c + 18) >> 3);
 801926a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801926c:	f3c2 06d4 	ubfx	r6, r2, #3, #21
    t[ 7] = cd[ 7] + (sword64)ad[ 0] * bd[ 7] + (sword64)ad[ 1] * bd[ 6] +
 8019270:	9a01      	ldr	r2, [sp, #4]
 8019272:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019274:	469a      	mov	sl, r3
 8019276:	fbe2 6a00 	umlal	r6, sl, r2, r0
 801927a:	9a02      	ldr	r2, [sp, #8]
 801927c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801927e:	fbe2 6a00 	umlal	r6, sl, r2, r0
 8019282:	9a03      	ldr	r2, [sp, #12]
 8019284:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019286:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 2] * bd[ 5] + (sword64)ad[ 3] * bd[ 4] +
 801928a:	9a04      	ldr	r2, [sp, #16]
 801928c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801928e:	fbe2 6a00 	umlal	r6, sl, r2, r0
 8019292:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019294:	9805      	ldr	r0, [sp, #20]
 8019296:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 4] * bd[ 3] + (sword64)ad[ 5] * bd[ 2] +
 801929a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801929c:	9807      	ldr	r0, [sp, #28]
 801929e:	fbe2 6a04 	umlal	r6, sl, r2, r4
 80192a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    t[ 9] = cd[ 9] + (sword64)ad[ 0] * bd[ 9] + (sword64)ad[ 1] * bd[ 8] +
 80192a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
                     (sword64)ad[ 4] * bd[ 3] + (sword64)ad[ 5] * bd[ 2] +
 80192a6:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 6] * bd[ 1] + (sword64)ad[ 7] * bd[ 0];
 80192aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192ac:	9808      	ldr	r0, [sp, #32]
 80192ae:	fbe2 6a00 	umlal	r6, sl, r2, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80192b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80192b4:	0d50      	lsrs	r0, r2, #21
 80192b6:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
 80192ba:	1832      	adds	r2, r6, r0
 80192bc:	922f      	str	r2, [sp, #188]	; 0xbc
 80192be:	eb4a 526e 	adc.w	r2, sl, lr, asr #21
 80192c2:	9230      	str	r2, [sp, #192]	; 0xc0
    cd[ 9] = MASK_21 & (load_4(c + 23) >> 5);
 80192c4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80192c6:	f3c2 1054 	ubfx	r0, r2, #5, #21
    t[ 9] = cd[ 9] + (sword64)ad[ 0] * bd[ 9] + (sword64)ad[ 1] * bd[ 8] +
 80192ca:	9a01      	ldr	r2, [sp, #4]
 80192cc:	fbe2 0304 	umlal	r0, r3, r2, r4
 80192d0:	469b      	mov	fp, r3
 80192d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80192d4:	9b02      	ldr	r3, [sp, #8]
 80192d6:	fbe3 0b02 	umlal	r0, fp, r3, r2
 80192da:	9b03      	ldr	r3, [sp, #12]
 80192dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80192de:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 2] * bd[ 7] + (sword64)ad[ 3] * bd[ 6] +
 80192e2:	9b04      	ldr	r3, [sp, #16]
 80192e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80192e6:	fbe3 0b02 	umlal	r0, fp, r3, r2
 80192ea:	9b05      	ldr	r3, [sp, #20]
 80192ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80192ee:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 4] * bd[ 5] + (sword64)ad[ 5] * bd[ 4] +
 80192f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192f4:	9a06      	ldr	r2, [sp, #24]
 80192f6:	fbe3 0b02 	umlal	r0, fp, r3, r2
 80192fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80192fc:	9a07      	ldr	r2, [sp, #28]
 80192fe:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 6] * bd[ 3] + (sword64)ad[ 7] * bd[ 2] +
 8019302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019304:	9a08      	ldr	r2, [sp, #32]
 8019306:	fbe3 0b02 	umlal	r0, fp, r3, r2
 801930a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801930c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801930e:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 8] * bd[ 1] + (sword64)ad[ 9] * bd[ 0];
 8019312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019316:	fbe3 0b02 	umlal	r0, fp, r3, r2
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801931a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801931c:	0d5b      	lsrs	r3, r3, #21
 801931e:	ea43 23c5 	orr.w	r3, r3, r5, lsl #11
 8019322:	18c3      	adds	r3, r0, r3
 8019324:	9331      	str	r3, [sp, #196]	; 0xc4
 8019326:	eb4b 5365 	adc.w	r3, fp, r5, asr #21
 801932a:	9332      	str	r3, [sp, #200]	; 0xc8
    cd[11] = (word32)(load_4(c + 28) >> 7);
 801932c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    t[16] -= t[23] * ORDER_5;
 801932e:	f8df b304 	ldr.w	fp, [pc, #772]	; 8019634 <sc_muladd+0x948>
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8019332:	09da      	lsrs	r2, r3, #7
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 8019334:	9b01      	ldr	r3, [sp, #4]
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8019336:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 801933a:	fba3 0309 	umull	r0, r3, r3, r9
 801933e:	1815      	adds	r5, r2, r0
 8019340:	f143 0c00 	adc.w	ip, r3, #0
 8019344:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019346:	9b02      	ldr	r3, [sp, #8]
 8019348:	fbe3 5c02 	umlal	r5, ip, r3, r2
 801934c:	9b03      	ldr	r3, [sp, #12]
                     (sword64)ad[ 2] * bd[ 9] + (sword64)ad[ 3] * bd[ 8] +
 801934e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 8019350:	fbe3 5c04 	umlal	r5, ip, r3, r4
                     (sword64)ad[ 2] * bd[ 9] + (sword64)ad[ 3] * bd[ 8] +
 8019354:	9b04      	ldr	r3, [sp, #16]
 8019356:	fbe3 5c02 	umlal	r5, ip, r3, r2
 801935a:	9b05      	ldr	r3, [sp, #20]
 801935c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801935e:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 4] * bd[ 7] + (sword64)ad[ 5] * bd[ 6] +
 8019362:	9b06      	ldr	r3, [sp, #24]
 8019364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019366:	fbe3 5c02 	umlal	r5, ip, r3, r2
 801936a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801936c:	9a07      	ldr	r2, [sp, #28]
 801936e:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 6] * bd[ 5] + (sword64)ad[ 7] * bd[ 4] +
 8019372:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019374:	9a08      	ldr	r2, [sp, #32]
 8019376:	fbe3 5c02 	umlal	r5, ip, r3, r2
 801937a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801937c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801937e:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 8] * bd[ 3] + (sword64)ad[ 9] * bd[ 2] +
 8019382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019386:	fbe3 5c02 	umlal	r5, ip, r3, r2
 801938a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801938c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801938e:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 8019392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019394:	fba3 0e08 	umull	r0, lr, r3, r8
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 801939a:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 801939c:	182d      	adds	r5, r5, r0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801939e:	ea4f 5053 	mov.w	r0, r3, lsr #21
 80193a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80193a4:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 80193a8:	eb4c 0c0e 	adc.w	ip, ip, lr
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80193ac:	182b      	adds	r3, r5, r0
 80193ae:	9333      	str	r3, [sp, #204]	; 0xcc
 80193b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80193b2:	eb4c 5e63 	adc.w	lr, ip, r3, asr #21
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 80193b6:	9b03      	ldr	r3, [sp, #12]
 80193b8:	fba3 0209 	umull	r0, r2, r3, r9
 80193bc:	9b04      	ldr	r3, [sp, #16]
 80193be:	fba3 3101 	umull	r3, r1, r3, r1
 80193c2:	18c0      	adds	r0, r0, r3
 80193c4:	eb42 0601 	adc.w	r6, r2, r1
 80193c8:	9a05      	ldr	r2, [sp, #20]
                     (sword64)ad[ 4] * bd[ 9] + (sword64)ad[ 5] * bd[ 8] +
 80193ca:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 80193cc:	4603      	mov	r3, r0
 80193ce:	fbe2 3604 	umlal	r3, r6, r2, r4
                     (sword64)ad[ 4] * bd[ 9] + (sword64)ad[ 5] * bd[ 8] +
 80193d2:	9a06      	ldr	r2, [sp, #24]
 80193d4:	fbe2 3601 	umlal	r3, r6, r2, r1
 80193d8:	9a07      	ldr	r2, [sp, #28]
 80193da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80193dc:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[ 6] * bd[ 7] + (sword64)ad[ 7] * bd[ 6] +
 80193e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80193e2:	9908      	ldr	r1, [sp, #32]
 80193e4:	fbe2 3601 	umlal	r3, r6, r2, r1
 80193e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80193ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80193ec:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[ 8] * bd[ 5] + (sword64)ad[ 9] * bd[ 4] +
 80193f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80193f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80193f4:	fbe2 3601 	umlal	r3, r6, r2, r1
 80193f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80193fc:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 8019400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 8019402:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 8019404:	fba2 0508 	umull	r0, r5, r2, r8
 8019408:	1818      	adds	r0, r3, r0
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 801940a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801940c:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8019410:	ea43 23c7 	orr.w	r3, r3, r7, lsl #11
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 8019414:	eb46 0605 	adc.w	r6, r6, r5
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8019418:	18c3      	adds	r3, r0, r3
 801941a:	931e      	str	r3, [sp, #120]	; 0x78
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 801941c:	9b05      	ldr	r3, [sp, #20]
 801941e:	fba3 0209 	umull	r0, r2, r3, r9
 8019422:	9b06      	ldr	r3, [sp, #24]
 8019424:	fba3 3101 	umull	r3, r1, r3, r1
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8019428:	eb46 5667 	adc.w	r6, r6, r7, asr #21
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 801942c:	18c0      	adds	r0, r0, r3
 801942e:	9b07      	ldr	r3, [sp, #28]
 8019430:	eb42 0201 	adc.w	r2, r2, r1
 8019434:	fbe3 0204 	umlal	r0, r2, r3, r4
                     (sword64)ad[ 6] * bd[ 9] + (sword64)ad[ 7] * bd[ 8] +
 8019438:	9914      	ldr	r1, [sp, #80]	; 0x50
 801943a:	9b08      	ldr	r3, [sp, #32]
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 801943c:	4605      	mov	r5, r0
                     (sword64)ad[ 6] * bd[ 9] + (sword64)ad[ 7] * bd[ 8] +
 801943e:	fbe3 5201 	umlal	r5, r2, r3, r1
 8019442:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019446:	fbe3 5201 	umlal	r5, r2, r3, r1
                     (sword64)ad[ 8] * bd[ 7] + (sword64)ad[ 9] * bd[ 6] +
 801944a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801944c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801944e:	fbe3 5201 	umlal	r5, r2, r3, r1
 8019452:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019456:	fbe3 5201 	umlal	r5, r2, r3, r1
                     (sword64)ad[10] * bd[ 5] + (sword64)ad[11] * bd[ 4];
 801945a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 801945c:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 5] + (sword64)ad[11] * bd[ 4];
 801945e:	fba3 0308 	umull	r0, r3, r3, r8
 8019462:	182d      	adds	r5, r5, r0
 8019464:	eb42 0203 	adc.w	r2, r2, r3
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8019468:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801946a:	0d58      	lsrs	r0, r3, #21
 801946c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801946e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8019472:	182b      	adds	r3, r5, r0
 8019474:	9310      	str	r3, [sp, #64]	; 0x40
 8019476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019478:	eb42 5263 	adc.w	r2, r2, r3, asr #21
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 801947c:	9b07      	ldr	r3, [sp, #28]
 801947e:	fba3 0c09 	umull	r0, ip, r3, r9
 8019482:	9b08      	ldr	r3, [sp, #32]
 8019484:	fba3 3101 	umull	r3, r1, r3, r1
 8019488:	18c3      	adds	r3, r0, r3
 801948a:	eb4c 0c01 	adc.w	ip, ip, r1
 801948e:	9909      	ldr	r1, [sp, #36]	; 0x24
                     (sword64)ad[ 8] * bd[ 9] + (sword64)ad[ 9] * bd[ 8] +
 8019490:	980a      	ldr	r0, [sp, #40]	; 0x28
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 8019492:	fbe1 3c04 	umlal	r3, ip, r1, r4
                     (sword64)ad[ 8] * bd[ 9] + (sword64)ad[ 9] * bd[ 8] +
 8019496:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019498:	fbe1 3c00 	umlal	r3, ip, r1, r0
 801949c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801949e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80194a0:	fbe1 3c00 	umlal	r3, ip, r1, r0
                     (sword64)ad[10] * bd[ 7] + (sword64)ad[11] * bd[ 6];
 80194a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80194a6:	fba1 0108 	umull	r0, r1, r1, r8
 80194aa:	1818      	adds	r0, r3, r0
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80194ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
                     (sword64)ad[10] * bd[ 7] + (sword64)ad[11] * bd[ 6];
 80194ae:	eb4c 0c01 	adc.w	ip, ip, r1
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80194b2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80194b4:	0d5b      	lsrs	r3, r3, #21
 80194b6:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 80194ba:	18c3      	adds	r3, r0, r3
 80194bc:	eb4c 5c61 	adc.w	ip, ip, r1, asr #21
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 80194c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80194c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80194c4:	9311      	str	r3, [sp, #68]	; 0x44
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 80194c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194c8:	fba1 0100 	umull	r0, r1, r1, r0
 80194cc:	fba3 3a09 	umull	r3, sl, r3, r9
 80194d0:	181b      	adds	r3, r3, r0
 80194d2:	eb4a 0a01 	adc.w	sl, sl, r1
 80194d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
                     (sword64)ad[10] * bd[ 9] + (sword64)ad[11] * bd[ 8];
 80194d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 80194da:	fbe4 3a00 	umlal	r3, sl, r4, r0
                     (sword64)ad[10] * bd[ 9] + (sword64)ad[11] * bd[ 8];
 80194de:	fba1 0108 	umull	r0, r1, r1, r8
 80194e2:	181b      	adds	r3, r3, r0
 80194e4:	eb4a 0a01 	adc.w	sl, sl, r1
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 80194e8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80194ea:	9825      	ldr	r0, [sp, #148]	; 0x94
 80194ec:	0d49      	lsrs	r1, r1, #21
 80194ee:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 80194f2:	185b      	adds	r3, r3, r1
    t[21] =          (sword64)ad[10] * bd[11] + (sword64)ad[11] * bd[10];
 80194f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80194f6:	fba1 9509 	umull	r9, r5, r1, r9
 80194fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80194fc:	fba1 1408 	umull	r1, r4, r1, r8
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 8019500:	eb4a 5a60 	adc.w	sl, sl, r0, asr #21
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 8019504:	9826      	ldr	r0, [sp, #152]	; 0x98
    t[21] =          (sword64)ad[10] * bd[11] + (sword64)ad[11] * bd[10];
 8019506:	eb19 0101 	adds.w	r1, r9, r1
 801950a:	eb45 0404 	adc.w	r4, r5, r4
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 801950e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    t[12] -= t[22] * ORDER_2;
 8019510:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8019638 <sc_muladd+0x94c>
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 8019514:	0d40      	lsrs	r0, r0, #21
 8019516:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 801951a:	1809      	adds	r1, r1, r0
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 801951c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 801951e:	eb44 5465 	adc.w	r4, r4, r5, asr #21
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 8019522:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8019524:	0d40      	lsrs	r0, r0, #21
 8019526:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 801952a:	9005      	str	r0, [sp, #20]
 801952c:	1568      	asrs	r0, r5, #21
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 801952e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 8019530:	900f      	str	r0, [sp, #60]	; 0x3c
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 8019532:	9824      	ldr	r0, [sp, #144]	; 0x90
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 8019534:	0d6d      	lsrs	r5, r5, #21
 8019536:	ea45 25cc 	orr.w	r5, r5, ip, lsl #11
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 801953a:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 801953e:	1940      	adds	r0, r0, r5
 8019540:	ea4f 5c6c 	mov.w	ip, ip, asr #21
 8019544:	9006      	str	r0, [sp, #24]
 8019546:	f14c 0000 	adc.w	r0, ip, #0
 801954a:	900c      	str	r0, [sp, #48]	; 0x30
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 801954c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801954e:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[19] >> 21; t[20] += carry; t[19] &= MASK_21;
 8019552:	0d58      	lsrs	r0, r3, #21
 8019554:	ea40 20ca 	orr.w	r0, r0, sl, lsl #11
 8019558:	1828      	adds	r0, r5, r0
 801955a:	ea4f 5a6a 	mov.w	sl, sl, asr #21
 801955e:	9007      	str	r0, [sp, #28]
 8019560:	f14a 0000 	adc.w	r0, sl, #0
 8019564:	900d      	str	r0, [sp, #52]	; 0x34
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 8019566:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8019568:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[21] >> 21; t[22] += carry; t[21] &= MASK_21;
 801956c:	0d48      	lsrs	r0, r1, #21
 801956e:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 8019572:	1828      	adds	r0, r5, r0
 8019574:	ea4f 5464 	mov.w	r4, r4, asr #21
 8019578:	9008      	str	r0, [sp, #32]
 801957a:	f144 0000 	adc.w	r0, r4, #0
 801957e:	900e      	str	r0, [sp, #56]	; 0x38
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8019580:	9822      	ldr	r0, [sp, #136]	; 0x88
    t[16] -= t[23] * ORDER_5;
 8019582:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8019584:	f3c0 0714 	ubfx	r7, r0, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8019588:	9810      	ldr	r0, [sp, #64]	; 0x40
 801958a:	0d40      	lsrs	r0, r0, #21
 801958c:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
 8019590:	183f      	adds	r7, r7, r0
    t[16] -= t[23] * ORDER_5;
 8019592:	9805      	ldr	r0, [sp, #20]
 8019594:	f1c0 0000 	rsb	r0, r0, #0
 8019598:	9009      	str	r0, [sp, #36]	; 0x24
 801959a:	fb0b 0504 	mla	r5, fp, r4, r0
 801959e:	9805      	ldr	r0, [sp, #20]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80195a0:	ea4f 5262 	mov.w	r2, r2, asr #21
    t[16] -= t[23] * ORDER_5;
 80195a4:	fba0 040b 	umull	r0, r4, r0, fp
 80195a8:	4425      	add	r5, r4
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80195aa:	f142 0200 	adc.w	r2, r2, #0
    t[16] -= t[23] * ORDER_5;
 80195ae:	1838      	adds	r0, r7, r0
 80195b0:	eb45 0202 	adc.w	r2, r5, r2
 80195b4:	9012      	str	r0, [sp, #72]	; 0x48
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80195b6:	981e      	ldr	r0, [sp, #120]	; 0x78
    t[16] -= t[23] * ORDER_5;
 80195b8:	9213      	str	r2, [sp, #76]	; 0x4c
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 80195ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
    t[14] -= t[23] * ORDER_3;
 80195bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    t[14] -= t[22] * ORDER_4;
 80195be:	4f1f      	ldr	r7, [pc, #124]	; (801963c <sc_muladd+0x950>)
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80195c0:	ea4f 5850 	mov.w	r8, r0, lsr #21
 80195c4:	ea48 28c6 	orr.w	r8, r8, r6, lsl #11
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 80195c8:	f3c2 0214 	ubfx	r2, r2, #0, #21
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80195cc:	1575      	asrs	r5, r6, #21
 80195ce:	eb12 0208 	adds.w	r2, r2, r8
 80195d2:	f145 0000 	adc.w	r0, r5, #0
    t[14] -= t[23] * ORDER_3;
 80195d6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8019640 <sc_muladd+0x954>
 80195da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80195dc:	fb08 4605 	mla	r6, r8, r5, r4
 80195e0:	9c05      	ldr	r4, [sp, #20]
 80195e2:	fba4 4508 	umull	r4, r5, r4, r8
 80195e6:	1912      	adds	r2, r2, r4
 80195e8:	4435      	add	r5, r6
 80195ea:	eb45 0500 	adc.w	r5, r5, r0
    t[14] -= t[22] * ORDER_4;
 80195ee:	9808      	ldr	r0, [sp, #32]
 80195f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80195f2:	4240      	negs	r0, r0
 80195f4:	fb07 0604 	mla	r6, r7, r4, r0
 80195f8:	900a      	str	r0, [sp, #40]	; 0x28
 80195fa:	9808      	ldr	r0, [sp, #32]
    carry = t[21] >> 21; t[22] += carry; t[21] &= MASK_21;
 80195fc:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[14] -= t[22] * ORDER_4;
 8019600:	fba0 0407 	umull	r0, r4, r0, r7
 8019604:	1810      	adds	r0, r2, r0
 8019606:	4426      	add	r6, r4
    t[14] -= t[21] * ORDER_5;
 8019608:	fba1 2c0b 	umull	r2, ip, r1, fp
    t[14] -= t[22] * ORDER_4;
 801960c:	eb46 0605 	adc.w	r6, r6, r5
    t[14] -= t[21] * ORDER_5;
 8019610:	ebac 0c01 	sub.w	ip, ip, r1
 8019614:	1882      	adds	r2, r0, r2
 8019616:	9214      	str	r2, [sp, #80]	; 0x50
 8019618:	eb4c 0206 	adc.w	r2, ip, r6
 801961c:	9215      	str	r2, [sp, #84]	; 0x54
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 801961e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    t[12] -= t[23] * ORDER_1;
 8019620:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019622:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8019624:	f3c2 0014 	ubfx	r0, r2, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8019628:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801962a:	0d52      	lsrs	r2, r2, #21
 801962c:	ea42 22ce 	orr.w	r2, r2, lr, lsl #11
 8019630:	1880      	adds	r0, r0, r2
 8019632:	e007      	b.n	8019644 <sc_muladd+0x958>
 8019634:	fff59084 	.word	0xfff59084
 8019638:	ffe9fb68 	.word	0xffe9fb68
 801963c:	ffe215d1 	.word	0xffe215d1
 8019640:	fff0c654 	.word	0xfff0c654
    t[12] -= t[23] * ORDER_1;
 8019644:	4ad1      	ldr	r2, [pc, #836]	; (801998c <sc_muladd+0xca0>)
 8019646:	fb02 5606 	mla	r6, r2, r6, r5
 801964a:	9d05      	ldr	r5, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801964c:	ea4f 5c6e 	mov.w	ip, lr, asr #21
 8019650:	f14c 0400 	adc.w	r4, ip, #0
    t[12] -= t[23] * ORDER_1;
 8019654:	fba5 5c02 	umull	r5, ip, r5, r2
 8019658:	1940      	adds	r0, r0, r5
 801965a:	44b4      	add	ip, r6
    t[12] -= t[22] * ORDER_2;
 801965c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    t[12] -= t[23] * ORDER_1;
 801965e:	eb4c 0c04 	adc.w	ip, ip, r4
    t[12] -= t[22] * ORDER_2;
 8019662:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019664:	fb09 4605 	mla	r6, r9, r5, r4
 8019668:	9c08      	ldr	r4, [sp, #32]
 801966a:	fba4 4509 	umull	r4, r5, r4, r9
 801966e:	1900      	adds	r0, r0, r4
 8019670:	442e      	add	r6, r5
    t[12] -= t[20] * ORDER_4;
 8019672:	9c07      	ldr	r4, [sp, #28]
    t[12] -= t[21] * ORDER_3;
 8019674:	fba1 5a08 	umull	r5, sl, r1, r8
    t[12] -= t[22] * ORDER_2;
 8019678:	eb46 060c 	adc.w	r6, r6, ip
    t[12] -= t[21] * ORDER_3;
 801967c:	1940      	adds	r0, r0, r5
    t[12] -= t[20] * ORDER_4;
 801967e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    t[12] -= t[21] * ORDER_3;
 8019680:	ebaa 0a01 	sub.w	sl, sl, r1
    t[12] -= t[20] * ORDER_4;
 8019684:	f1c4 0400 	rsb	r4, r4, #0
    t[12] -= t[21] * ORDER_3;
 8019688:	eb4a 0606 	adc.w	r6, sl, r6
    t[12] -= t[20] * ORDER_4;
 801968c:	940b      	str	r4, [sp, #44]	; 0x2c
 801968e:	fb07 4a05 	mla	sl, r7, r5, r4
 8019692:	9c07      	ldr	r4, [sp, #28]
    carry = t[19] >> 21; t[20] += carry; t[19] &= MASK_21;
 8019694:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[12] -= t[20] * ORDER_4;
 8019698:	fba4 5407 	umull	r5, r4, r4, r7
 801969c:	1945      	adds	r5, r0, r5
 801969e:	44a2      	add	sl, r4
    t[12] -= t[19] * ORDER_5;
 80196a0:	fba3 0c0b 	umull	r0, ip, r3, fp
    t[12] -= t[20] * ORDER_4;
 80196a4:	eb4a 0a06 	adc.w	sl, sl, r6
    t[12] -= t[19] * ORDER_5;
 80196a8:	ebac 0c03 	sub.w	ip, ip, r3
 80196ac:	1828      	adds	r0, r5, r0
 80196ae:	9016      	str	r0, [sp, #88]	; 0x58
 80196b0:	eb4c 000a 	adc.w	r0, ip, sl
 80196b4:	901f      	str	r0, [sp, #124]	; 0x7c
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80196b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80196b8:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    t[ 6] -= t[18] * ORDER_0;
 80196ba:	4eb5      	ldr	r6, [pc, #724]	; (8019990 <sc_muladd+0xca4>)
 80196bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80196be:	f3c0 0e14 	ubfx	lr, r0, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80196c2:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80196c4:	0d40      	lsrs	r0, r0, #21
 80196c6:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 80196ca:	ea4f 5c64 	mov.w	ip, r4, asr #21
    t[ 6] -= t[18] * ORDER_0;
 80196ce:	9c06      	ldr	r4, [sp, #24]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80196d0:	eb1e 0e00 	adds.w	lr, lr, r0
    t[ 6] -= t[18] * ORDER_0;
 80196d4:	f1c4 0400 	rsb	r4, r4, #0
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80196d8:	f14c 0000 	adc.w	r0, ip, #0
    t[ 6] -= t[18] * ORDER_0;
 80196dc:	fb06 4c05 	mla	ip, r6, r5, r4
 80196e0:	9d06      	ldr	r5, [sp, #24]
 80196e2:	fba5 a506 	umull	sl, r5, r5, r6
 80196e6:	44ac      	add	ip, r5
 80196e8:	eb1e 050a 	adds.w	r5, lr, sl
 80196ec:	eb4c 0c00 	adc.w	ip, ip, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80196f0:	981c      	ldr	r0, [sp, #112]	; 0x70
    t[ 6] -= t[18] * ORDER_0;
 80196f2:	951b      	str	r5, [sp, #108]	; 0x6c
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80196f4:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80196f8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80196fa:	f8dd e0c0 	ldr.w	lr, [sp, #192]	; 0xc0
 80196fe:	0d40      	lsrs	r0, r0, #21
 8019700:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
 8019704:	182d      	adds	r5, r5, r0
 8019706:	ea4f 5a6e 	mov.w	sl, lr, asr #21
    t[ 8] -= t[20] * ORDER_0;
 801970a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801970c:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8019710:	fb06 0b0e 	mla	fp, r6, lr, r0
 8019714:	9807      	ldr	r0, [sp, #28]
 8019716:	fba0 0e06 	umull	r0, lr, r0, r6
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801971a:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 8] -= t[20] * ORDER_0;
 801971e:	44de      	add	lr, fp
 8019720:	1828      	adds	r0, r5, r0
 8019722:	eb4e 0e0a 	adc.w	lr, lr, sl
    t[ 8] -= t[19] * ORDER_1;
 8019726:	fba3 a502 	umull	sl, r5, r3, r2
 801972a:	eb10 000a 	adds.w	r0, r0, sl
 801972e:	eba5 0503 	sub.w	r5, r5, r3
 8019732:	eb45 050e 	adc.w	r5, r5, lr
    t[ 8] -= t[18] * ORDER_2;
 8019736:	f8dd a018 	ldr.w	sl, [sp, #24]
 801973a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801973e:	fbaa ab09 	umull	sl, fp, sl, r9
 8019742:	fb09 4e0e 	mla	lr, r9, lr, r4
 8019746:	eb10 000a 	adds.w	r0, r0, sl
 801974a:	44de      	add	lr, fp
 801974c:	901c      	str	r0, [sp, #112]	; 0x70
 801974e:	eb4e 0005 	adc.w	r0, lr, r5
 8019752:	9020      	str	r0, [sp, #128]	; 0x80
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019754:	981d      	ldr	r0, [sp, #116]	; 0x74
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019756:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8019758:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
    t[10] -= t[20] * ORDER_2;
 801975c:	f8cd 900c 	str.w	r9, [sp, #12]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019760:	0d6d      	lsrs	r5, r5, #21
 8019762:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019766:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801976a:	1940      	adds	r0, r0, r5
 801976c:	ea4f 5b6e 	mov.w	fp, lr, asr #21
    t[10] -= t[22] * ORDER_0;
 8019770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019772:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    t[10] -= t[18] * ORDER_4;
 8019776:	9702      	str	r7, [sp, #8]
    t[10] -= t[22] * ORDER_0;
 8019778:	fb06 5e0e 	mla	lr, r6, lr, r5
 801977c:	9d08      	ldr	r5, [sp, #32]
    t[10] -= t[18] * ORDER_4;
 801977e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    t[10] -= t[19] * ORDER_3;
 8019780:	f8cd 8004 	str.w	r8, [sp, #4]
    t[10] -= t[22] * ORDER_0;
 8019784:	fba5 5a06 	umull	r5, sl, r5, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019788:	f14b 0b00 	adc.w	fp, fp, #0
    t[10] -= t[22] * ORDER_0;
 801978c:	44d6      	add	lr, sl
 801978e:	1940      	adds	r0, r0, r5
 8019790:	eb4e 0e0b 	adc.w	lr, lr, fp
    t[10] -= t[21] * ORDER_1;
 8019794:	fba1 ab02 	umull	sl, fp, r1, r2
    t[10] -= t[20] * ORDER_2;
 8019798:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t[ 7] -= t[19] * ORDER_0;
 801979a:	9604      	str	r6, [sp, #16]
    t[10] -= t[21] * ORDER_1;
 801979c:	eb10 000a 	adds.w	r0, r0, sl
    t[10] -= t[20] * ORDER_2;
 80197a0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80197a4:	fb09 5a0a 	mla	sl, r9, sl, r5
 80197a8:	9d07      	ldr	r5, [sp, #28]
    t[10] -= t[21] * ORDER_1;
 80197aa:	ebab 0b01 	sub.w	fp, fp, r1
    t[10] -= t[20] * ORDER_2;
 80197ae:	fba5 5909 	umull	r5, r9, r5, r9
    t[10] -= t[21] * ORDER_1;
 80197b2:	eb4b 0e0e 	adc.w	lr, fp, lr
    t[10] -= t[20] * ORDER_2;
 80197b6:	44d1      	add	r9, sl
 80197b8:	1940      	adds	r0, r0, r5
 80197ba:	eb49 090e 	adc.w	r9, r9, lr
    t[10] -= t[19] * ORDER_3;
 80197be:	fba3 e508 	umull	lr, r5, r3, r8
 80197c2:	eb10 000e 	adds.w	r0, r0, lr
    t[10] -= t[18] * ORDER_4;
 80197c6:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8019994 <sc_muladd+0xca8>
 80197ca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8019994 <sc_muladd+0xca8>
 80197ce:	fb0e 4707 	mla	r7, lr, r7, r4
 80197d2:	f8dd e018 	ldr.w	lr, [sp, #24]
    t[10] -= t[19] * ORDER_3;
 80197d6:	eba5 0503 	sub.w	r5, r5, r3
    t[10] -= t[18] * ORDER_4;
 80197da:	fbae e808 	umull	lr, r8, lr, r8
    t[10] -= t[19] * ORDER_3;
 80197de:	eb45 0509 	adc.w	r5, r5, r9
    t[10] -= t[18] * ORDER_4;
 80197e2:	eb10 000e 	adds.w	r0, r0, lr
 80197e6:	901d      	str	r0, [sp, #116]	; 0x74
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80197e8:	982f      	ldr	r0, [sp, #188]	; 0xbc
    t[10] -= t[18] * ORDER_4;
 80197ea:	4447      	add	r7, r8
 80197ec:	eb47 0805 	adc.w	r8, r7, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80197f0:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[ 7] -= t[19] * ORDER_0;
 80197f4:	fba3 6706 	umull	r6, r7, r3, r6
 80197f8:	1986      	adds	r6, r0, r6
    t[ 7] -= t[18] * ORDER_1;
 80197fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80197fc:	fb02 4500 	mla	r5, r2, r0, r4
 8019800:	9806      	ldr	r0, [sp, #24]
    t[ 7] -= t[19] * ORDER_0;
 8019802:	eba7 0703 	sub.w	r7, r7, r3
    t[ 7] -= t[18] * ORDER_1;
 8019806:	fba0 0e02 	umull	r0, lr, r0, r2
    t[ 7] -= t[19] * ORDER_0;
 801980a:	f147 0700 	adc.w	r7, r7, #0
    t[ 7] -= t[18] * ORDER_1;
 801980e:	1830      	adds	r0, r6, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019810:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8019812:	ea4f 5656 	mov.w	r6, r6, lsr #21
 8019816:	ea46 26cc 	orr.w	r6, r6, ip, lsl #11
    t[ 7] -= t[18] * ORDER_1;
 801981a:	4475      	add	r5, lr
 801981c:	eb45 0507 	adc.w	r5, r5, r7
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019820:	1980      	adds	r0, r0, r6
 8019822:	9021      	str	r0, [sp, #132]	; 0x84
 8019824:	eb45 506c 	adc.w	r0, r5, ip, asr #21
 8019828:	9022      	str	r0, [sp, #136]	; 0x88
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801982a:	9831      	ldr	r0, [sp, #196]	; 0xc4
    t[ 9] -= t[20] * ORDER_1;
 801982c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801982e:	f3c0 0514 	ubfx	r5, r0, #0, #21
    t[ 9] -= t[21] * ORDER_0;
 8019832:	9804      	ldr	r0, [sp, #16]
 8019834:	fba1 0c00 	umull	r0, ip, r1, r0
 8019838:	182d      	adds	r5, r5, r0
    t[ 9] -= t[20] * ORDER_1;
 801983a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801983c:	fb02 0706 	mla	r7, r2, r6, r0
 8019840:	9807      	ldr	r0, [sp, #28]
    t[ 9] -= t[21] * ORDER_0;
 8019842:	ebac 0c01 	sub.w	ip, ip, r1
    t[ 9] -= t[20] * ORDER_1;
 8019846:	fba0 0602 	umull	r0, r6, r0, r2
    t[ 9] -= t[21] * ORDER_0;
 801984a:	f14c 0c00 	adc.w	ip, ip, #0
    t[ 9] -= t[20] * ORDER_1;
 801984e:	1828      	adds	r0, r5, r0
    t[ 9] -= t[19] * ORDER_2;
 8019850:	4d51      	ldr	r5, [pc, #324]	; (8019998 <sc_muladd+0xcac>)
    t[ 9] -= t[20] * ORDER_1;
 8019852:	4437      	add	r7, r6
    t[ 9] -= t[19] * ORDER_2;
 8019854:	fba3 5e05 	umull	r5, lr, r3, r5
    t[ 9] -= t[20] * ORDER_1;
 8019858:	eb47 070c 	adc.w	r7, r7, ip
    t[ 9] -= t[18] * ORDER_3;
 801985c:	4e4f      	ldr	r6, [pc, #316]	; (801999c <sc_muladd+0xcb0>)
 801985e:	f8df c13c 	ldr.w	ip, [pc, #316]	; 801999c <sc_muladd+0xcb0>
    t[ 9] -= t[19] * ORDER_2;
 8019862:	1940      	adds	r0, r0, r5
    t[ 9] -= t[18] * ORDER_3;
 8019864:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019866:	fb06 4505 	mla	r5, r6, r5, r4
 801986a:	9e06      	ldr	r6, [sp, #24]
    t[ 9] -= t[19] * ORDER_2;
 801986c:	ebae 0e03 	sub.w	lr, lr, r3
    t[ 9] -= t[18] * ORDER_3;
 8019870:	fba6 6c0c 	umull	r6, ip, r6, ip
    t[ 9] -= t[19] * ORDER_2;
 8019874:	eb4e 0707 	adc.w	r7, lr, r7
    t[ 9] -= t[18] * ORDER_3;
 8019878:	4465      	add	r5, ip
 801987a:	1980      	adds	r0, r0, r6
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801987c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    t[ 9] -= t[18] * ORDER_3;
 801987e:	eb45 0507 	adc.w	r5, r5, r7
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8019882:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8019884:	0d76      	lsrs	r6, r6, #21
 8019886:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
 801988a:	1980      	adds	r0, r0, r6
 801988c:	9023      	str	r0, [sp, #140]	; 0x8c
 801988e:	eb45 5067 	adc.w	r0, r5, r7, asr #21
 8019892:	9020      	str	r0, [sp, #128]	; 0x80
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8019894:	9833      	ldr	r0, [sp, #204]	; 0xcc
    t[11] -= t[23] * ORDER_0;
 8019896:	9f04      	ldr	r7, [sp, #16]
 8019898:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801989a:	f3c0 0514 	ubfx	r5, r0, #0, #21
    t[11] -= t[23] * ORDER_0;
 801989e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198a0:	fb07 0c06 	mla	ip, r7, r6, r0
 80198a4:	9805      	ldr	r0, [sp, #20]
 80198a6:	fba0 0607 	umull	r0, r6, r0, r7
 80198aa:	182d      	adds	r5, r5, r0
 80198ac:	eb4c 0c06 	adc.w	ip, ip, r6
    t[11] -= t[22] * ORDER_1;
 80198b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80198b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80198b4:	fb02 0706 	mla	r7, r2, r6, r0
 80198b8:	9808      	ldr	r0, [sp, #32]
 80198ba:	fba0 0602 	umull	r0, r6, r0, r2
 80198be:	1828      	adds	r0, r5, r0
    t[11] -= t[21] * ORDER_2;
 80198c0:	4d35      	ldr	r5, [pc, #212]	; (8019998 <sc_muladd+0xcac>)
    t[11] -= t[22] * ORDER_1;
 80198c2:	4437      	add	r7, r6
    t[11] -= t[21] * ORDER_2;
 80198c4:	fba1 5e05 	umull	r5, lr, r1, r5
    t[11] -= t[20] * ORDER_3;
 80198c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    t[11] -= t[22] * ORDER_1;
 80198ca:	eb47 070c 	adc.w	r7, r7, ip
    t[11] -= t[21] * ORDER_2;
 80198ce:	1940      	adds	r0, r0, r5
    t[11] -= t[20] * ORDER_3;
 80198d0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 801999c <sc_muladd+0xcb0>
 80198d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80198d6:	fb0c 5c06 	mla	ip, ip, r6, r5
 80198da:	9d07      	ldr	r5, [sp, #28]
 80198dc:	4e2f      	ldr	r6, [pc, #188]	; (801999c <sc_muladd+0xcb0>)
    t[11] -= t[21] * ORDER_2;
 80198de:	ebae 0e01 	sub.w	lr, lr, r1
    t[11] -= t[20] * ORDER_3;
 80198e2:	fba5 5606 	umull	r5, r6, r5, r6
    t[11] -= t[21] * ORDER_2;
 80198e6:	eb4e 0707 	adc.w	r7, lr, r7
    t[11] -= t[20] * ORDER_3;
 80198ea:	1940      	adds	r0, r0, r5
    t[11] -= t[19] * ORDER_4;
 80198ec:	4d29      	ldr	r5, [pc, #164]	; (8019994 <sc_muladd+0xca8>)
    t[11] -= t[20] * ORDER_3;
 80198ee:	4466      	add	r6, ip
    t[11] -= t[19] * ORDER_4;
 80198f0:	fba3 e505 	umull	lr, r5, r3, r5
    t[11] -= t[20] * ORDER_3;
 80198f4:	eb46 0607 	adc.w	r6, r6, r7
    t[11] -= t[19] * ORDER_4;
 80198f8:	1aeb      	subs	r3, r5, r3
 80198fa:	eb10 000e 	adds.w	r0, r0, lr
    t[11] -= t[18] * ORDER_5;
 80198fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t[13] -= t[22] * ORDER_3;
 8019900:	f8df c098 	ldr.w	ip, [pc, #152]	; 801999c <sc_muladd+0xcb0>
    t[11] -= t[19] * ORDER_4;
 8019904:	eb43 0606 	adc.w	r6, r3, r6
    t[11] -= t[18] * ORDER_5;
 8019908:	4b25      	ldr	r3, [pc, #148]	; (80199a0 <sc_muladd+0xcb4>)
 801990a:	fb03 4405 	mla	r4, r3, r5, r4
 801990e:	9d06      	ldr	r5, [sp, #24]
 8019910:	fba5 e703 	umull	lr, r7, r5, r3
 8019914:	eb10 000e 	adds.w	r0, r0, lr
 8019918:	443c      	add	r4, r7
 801991a:	eb44 0706 	adc.w	r7, r4, r6
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801991e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    t[13] -= t[23] * ORDER_2;
 8019920:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019922:	4e1d      	ldr	r6, [pc, #116]	; (8019998 <sc_muladd+0xcac>)
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019924:	ea4f 5e54 	mov.w	lr, r4, lsr #21
 8019928:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
    t[13] -= t[23] * ORDER_2;
 801992c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801992e:	eb10 000e 	adds.w	r0, r0, lr
 8019932:	9024      	str	r0, [sp, #144]	; 0x90
    t[13] -= t[23] * ORDER_2;
 8019934:	fb06 4605 	mla	r6, r6, r5, r4
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8019938:	981e      	ldr	r0, [sp, #120]	; 0x78
    t[13] -= t[23] * ORDER_2;
 801993a:	9c05      	ldr	r4, [sp, #20]
 801993c:	4d16      	ldr	r5, [pc, #88]	; (8019998 <sc_muladd+0xcac>)
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 801993e:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[13] -= t[23] * ORDER_2;
 8019942:	fba4 5405 	umull	r5, r4, r4, r5
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019946:	eb47 5768 	adc.w	r7, r7, r8, asr #21
    t[13] -= t[23] * ORDER_2;
 801994a:	1940      	adds	r0, r0, r5
 801994c:	eb46 0604 	adc.w	r6, r6, r4
    t[13] -= t[22] * ORDER_3;
 8019950:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019954:	fb0c 4c05 	mla	ip, ip, r5, r4
 8019958:	9c08      	ldr	r4, [sp, #32]
 801995a:	4d10      	ldr	r5, [pc, #64]	; (801999c <sc_muladd+0xcb0>)
 801995c:	fba4 4505 	umull	r4, r5, r4, r5
 8019960:	1900      	adds	r0, r0, r4
    t[13] -= t[21] * ORDER_4;
 8019962:	4c0c      	ldr	r4, [pc, #48]	; (8019994 <sc_muladd+0xca8>)
    t[13] -= t[22] * ORDER_3;
 8019964:	4465      	add	r5, ip
    t[13] -= t[21] * ORDER_4;
 8019966:	fba1 e404 	umull	lr, r4, r1, r4
    t[13] -= t[22] * ORDER_3;
 801996a:	eb45 0506 	adc.w	r5, r5, r6
    t[13] -= t[21] * ORDER_4;
 801996e:	1a61      	subs	r1, r4, r1
 8019970:	eb10 000e 	adds.w	r0, r0, lr
    t[13] -= t[20] * ORDER_5;
 8019974:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    t[15] -= t[23] * ORDER_4;
 8019976:	4e07      	ldr	r6, [pc, #28]	; (8019994 <sc_muladd+0xca8>)
    t[13] -= t[21] * ORDER_4;
 8019978:	eb41 0505 	adc.w	r5, r1, r5
    t[13] -= t[20] * ORDER_5;
 801997c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801997e:	fb03 1a04 	mla	sl, r3, r4, r1
 8019982:	9907      	ldr	r1, [sp, #28]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8019984:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    t[13] -= t[20] * ORDER_5;
 8019986:	fba1 e103 	umull	lr, r1, r1, r3
 801998a:	e00b      	b.n	80199a4 <sc_muladd+0xcb8>
 801998c:	ffe72d19 	.word	0xffe72d19
 8019990:	ffea2c13 	.word	0xffea2c13
 8019994:	ffe215d1 	.word	0xffe215d1
 8019998:	ffe9fb68 	.word	0xffe9fb68
 801999c:	fff0c654 	.word	0xfff0c654
 80199a0:	fff59084 	.word	0xfff59084
 80199a4:	448a      	add	sl, r1
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80199a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80199a8:	0d49      	lsrs	r1, r1, #21
    t[13] -= t[20] * ORDER_5;
 80199aa:	eb10 000e 	adds.w	r0, r0, lr
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80199ae:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
    t[13] -= t[20] * ORDER_5;
 80199b2:	eb4a 0a05 	adc.w	sl, sl, r5
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80199b6:	1840      	adds	r0, r0, r1
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80199b8:	9910      	ldr	r1, [sp, #64]	; 0x40
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80199ba:	eb4a 5a64 	adc.w	sl, sl, r4, asr #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80199be:	f3c1 0514 	ubfx	r5, r1, #0, #21
    t[15] -= t[23] * ORDER_4;
 80199c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80199c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80199c6:	fb06 1404 	mla	r4, r6, r4, r1
 80199ca:	9905      	ldr	r1, [sp, #20]
 80199cc:	fba1 1606 	umull	r1, r6, r1, r6
 80199d0:	1869      	adds	r1, r5, r1
 80199d2:	eb44 0606 	adc.w	r6, r4, r6
    t[15] -= t[22] * ORDER_5;
 80199d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80199d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80199da:	fb03 4405 	mla	r4, r3, r5, r4
 80199de:	9d08      	ldr	r5, [sp, #32]
 80199e0:	fba5 5c03 	umull	r5, ip, r5, r3
 80199e4:	4464      	add	r4, ip
 80199e6:	1949      	adds	r1, r1, r5
 80199e8:	eb44 0606 	adc.w	r6, r4, r6
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 80199ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80199ee:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80199f0:	0d64      	lsrs	r4, r4, #21
 80199f2:	ea44 24c5 	orr.w	r4, r4, r5, lsl #11
 80199f6:	1909      	adds	r1, r1, r4
 80199f8:	eb46 5665 	adc.w	r6, r6, r5, asr #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80199fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 80199fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8019a00:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 8019a04:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 8019a06:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8019a0a:	ea4c 2cc5 	orr.w	ip, ip, r5, lsl #11
 8019a0e:	eb14 040c 	adds.w	r4, r4, ip
 8019a12:	ea4f 5565 	mov.w	r5, r5, asr #21
 8019a16:	9405      	str	r4, [sp, #20]
 8019a18:	f145 0400 	adc.w	r4, r5, #0
 8019a1c:	9409      	str	r4, [sp, #36]	; 0x24
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8019a1e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    t[ 0] -= t[12] * ORDER_0;
 8019a20:	f8dd c010 	ldr.w	ip, [sp, #16]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8019a24:	f3c4 0514 	ubfx	r5, r4, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8019a28:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8019a2a:	0d64      	lsrs	r4, r4, #21
 8019a2c:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
 8019a30:	192d      	adds	r5, r5, r4
 8019a32:	ea4f 5767 	mov.w	r7, r7, asr #21
 8019a36:	f147 0400 	adc.w	r4, r7, #0
 8019a3a:	940a      	str	r4, [sp, #40]	; 0x28
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8019a3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8019a3e:	ea4f 5950 	mov.w	r9, r0, lsr #21
 8019a42:	ea49 29ca 	orr.w	r9, r9, sl, lsl #11
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8019a46:	f3c4 0814 	ubfx	r8, r4, #0, #21
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8019a4a:	eb18 0409 	adds.w	r4, r8, r9
 8019a4e:	ea4f 5a6a 	mov.w	sl, sl, asr #21
 8019a52:	9406      	str	r4, [sp, #24]
 8019a54:	f14a 0400 	adc.w	r4, sl, #0
 8019a58:	940b      	str	r4, [sp, #44]	; 0x2c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8019a5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019a5c:	f3c4 0714 	ubfx	r7, r4, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8019a60:	0d4c      	lsrs	r4, r1, #21
 8019a62:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
 8019a66:	193c      	adds	r4, r7, r4
 8019a68:	ea4f 5666 	mov.w	r6, r6, asr #21
 8019a6c:	9407      	str	r4, [sp, #28]
 8019a6e:	f146 0400 	adc.w	r4, r6, #0
    t[ 0] -= t[12] * ORDER_0;
 8019a72:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8019a74:	940c      	str	r4, [sp, #48]	; 0x30
    t[ 0] -= t[12] * ORDER_0;
 8019a76:	426f      	negs	r7, r5
 8019a78:	fb0c 7c06 	mla	ip, ip, r6, r7
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019a7c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    t[ 0] -= t[12] * ORDER_0;
 8019a7e:	9e04      	ldr	r6, [sp, #16]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019a80:	f3c4 0414 	ubfx	r4, r4, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 8019a84:	fba5 9606 	umull	r9, r6, r5, r6
 8019a88:	eb14 0409 	adds.w	r4, r4, r9
 8019a8c:	eb4c 0806 	adc.w	r8, ip, r6
    t[ 1] -= t[13] * ORDER_0;
 8019a90:	9e04      	ldr	r6, [sp, #16]
    t[ 0] -= t[12] * ORDER_0;
 8019a92:	940d      	str	r4, [sp, #52]	; 0x34
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8019a94:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019a98:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019a9a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    t[ 1] -= t[13] * ORDER_0;
 8019a9e:	fba0 eb06 	umull	lr, fp, r0, r6
    t[ 1] -= t[12] * ORDER_1;
 8019aa2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019aa4:	f3c4 0414 	ubfx	r4, r4, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 8019aa8:	fb02 7a06 	mla	sl, r2, r6, r7
    t[ 1] -= t[13] * ORDER_0;
 8019aac:	eb14 040e 	adds.w	r4, r4, lr
    t[ 1] -= t[12] * ORDER_1;
 8019ab0:	fba5 9602 	umull	r9, r6, r5, r2
    t[ 1] -= t[13] * ORDER_0;
 8019ab4:	ebab 0b00 	sub.w	fp, fp, r0
 8019ab8:	f14b 0b00 	adc.w	fp, fp, #0
    t[ 1] -= t[12] * ORDER_1;
 8019abc:	eb14 0409 	adds.w	r4, r4, r9
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019ac0:	ea4f 595c 	mov.w	r9, ip, lsr #21
 8019ac4:	ea49 29c8 	orr.w	r9, r9, r8, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 8019ac8:	4456      	add	r6, sl
 8019aca:	eb46 060b 	adc.w	r6, r6, fp
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019ace:	eb14 0409 	adds.w	r4, r4, r9
 8019ad2:	940e      	str	r4, [sp, #56]	; 0x38
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019ad4:	9c19      	ldr	r4, [sp, #100]	; 0x64
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019ad6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019ada:	eb46 5c68 	adc.w	ip, r6, r8, asr #21
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019ade:	f3c4 0614 	ubfx	r6, r4, #0, #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019ae2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8019ae4:	0d64      	lsrs	r4, r4, #21
 8019ae6:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
 8019aea:	1936      	adds	r6, r6, r4
    t[ 2] -= t[14] * ORDER_0;
 8019aec:	9c06      	ldr	r4, [sp, #24]
 8019aee:	f1c4 0400 	rsb	r4, r4, #0
 8019af2:	9408      	str	r4, [sp, #32]
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019af4:	ea4f 596e 	mov.w	r9, lr, asr #21
    t[ 2] -= t[14] * ORDER_0;
 8019af8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019afc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8019b00:	fb08 480e 	mla	r8, r8, lr, r4
 8019b04:	9c06      	ldr	r4, [sp, #24]
 8019b06:	f8dd e010 	ldr.w	lr, [sp, #16]
 8019b0a:	fba4 4e0e 	umull	r4, lr, r4, lr
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019b0e:	f149 0900 	adc.w	r9, r9, #0
    t[ 2] -= t[14] * ORDER_0;
 8019b12:	44f0      	add	r8, lr
 8019b14:	1934      	adds	r4, r6, r4
 8019b16:	eb48 0809 	adc.w	r8, r8, r9
    t[ 2] -= t[12] * ORDER_2;
 8019b1a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019b1c:	f8df e388 	ldr.w	lr, [pc, #904]	; 8019ea8 <sc_muladd+0x11bc>
    t[ 2] -= t[13] * ORDER_1;
 8019b20:	fba0 9a02 	umull	r9, sl, r0, r2
 8019b24:	ebaa 0a00 	sub.w	sl, sl, r0
 8019b28:	eb14 0409 	adds.w	r4, r4, r9
 8019b2c:	eb4a 0808 	adc.w	r8, sl, r8
    t[ 2] -= t[12] * ORDER_2;
 8019b30:	fb0e 7a06 	mla	sl, lr, r6, r7
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019b34:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    t[ 2] -= t[12] * ORDER_2;
 8019b36:	fba5 9e0e 	umull	r9, lr, r5, lr
 8019b3a:	eb14 0409 	adds.w	r4, r4, r9
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019b3e:	ea4f 5956 	mov.w	r9, r6, lsr #21
 8019b42:	ea49 29cc 	orr.w	r9, r9, ip, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 8019b46:	44d6      	add	lr, sl
 8019b48:	eb4e 0e08 	adc.w	lr, lr, r8
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019b4c:	eb14 0409 	adds.w	r4, r4, r9
 8019b50:	940f      	str	r4, [sp, #60]	; 0x3c
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019b52:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019b54:	eb4e 566c 	adc.w	r6, lr, ip, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019b58:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 3] -= t[15] * ORDER_0;
 8019b5c:	9c04      	ldr	r4, [sp, #16]
    t[ 3] -= t[14] * ORDER_1;
 8019b5e:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8019b62:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[ 3] -= t[15] * ORDER_0;
 8019b66:	fba1 4804 	umull	r4, r8, r1, r4
 8019b6a:	eb1c 0c04 	adds.w	ip, ip, r4
    t[ 3] -= t[14] * ORDER_1;
 8019b6e:	9c08      	ldr	r4, [sp, #32]
 8019b70:	fb02 4a0e 	mla	sl, r2, lr, r4
 8019b74:	9c06      	ldr	r4, [sp, #24]
    t[ 3] -= t[15] * ORDER_0;
 8019b76:	eba8 0801 	sub.w	r8, r8, r1
    t[ 3] -= t[14] * ORDER_1;
 8019b7a:	fba4 4e02 	umull	r4, lr, r4, r2
    t[ 3] -= t[15] * ORDER_0;
 8019b7e:	f148 0800 	adc.w	r8, r8, #0
    t[ 3] -= t[14] * ORDER_1;
 8019b82:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 3] -= t[13] * ORDER_2;
 8019b86:	f8df c320 	ldr.w	ip, [pc, #800]	; 8019ea8 <sc_muladd+0x11bc>
    t[ 3] -= t[14] * ORDER_1;
 8019b8a:	44f2      	add	sl, lr
    t[ 3] -= t[13] * ORDER_2;
 8019b8c:	fba0 c90c 	umull	ip, r9, r0, ip
    t[ 3] -= t[12] * ORDER_3;
 8019b90:	f8df e318 	ldr.w	lr, [pc, #792]	; 8019eac <sc_muladd+0x11c0>
    t[ 3] -= t[14] * ORDER_1;
 8019b94:	eb4a 0a08 	adc.w	sl, sl, r8
    t[ 3] -= t[13] * ORDER_2;
 8019b98:	eb14 040c 	adds.w	r4, r4, ip
    t[ 3] -= t[12] * ORDER_3;
 8019b9c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    t[ 3] -= t[13] * ORDER_2;
 8019ba0:	eba9 0900 	sub.w	r9, r9, r0
 8019ba4:	eb49 0a0a 	adc.w	sl, r9, sl
    t[ 3] -= t[12] * ORDER_3;
 8019ba8:	fb0e 790c 	mla	r9, lr, ip, r7
 8019bac:	fba5 c80e 	umull	ip, r8, r5, lr
 8019bb0:	eb14 040c 	adds.w	r4, r4, ip
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019bb4:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8019bb8:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 8019bbc:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 8019bc0:	44c8      	add	r8, r9
 8019bc2:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019bc6:	eb14 040c 	adds.w	r4, r4, ip
 8019bca:	9410      	str	r4, [sp, #64]	; 0x40
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019bcc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019bce:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019bd2:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019bd4:	eb48 5e66 	adc.w	lr, r8, r6, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019bd8:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    t[ 4] -= t[16] * ORDER_0;
 8019bda:	f8dd 8010 	ldr.w	r8, [sp, #16]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019bde:	0d64      	lsrs	r4, r4, #21
 8019be0:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
 8019be4:	ea4f 5a66 	mov.w	sl, r6, asr #21
    t[ 4] -= t[16] * ORDER_0;
 8019be8:	9e07      	ldr	r6, [sp, #28]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019bea:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 4] -= t[16] * ORDER_0;
 8019bee:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8019bf2:	f1c6 0600 	rsb	r6, r6, #0
 8019bf6:	fb08 690c 	mla	r9, r8, ip, r6
 8019bfa:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019bfe:	fbac c808 	umull	ip, r8, ip, r8
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019c02:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 4] -= t[16] * ORDER_0;
 8019c06:	44c1      	add	r9, r8
 8019c08:	eb14 0c0c 	adds.w	ip, r4, ip
    t[ 4] -= t[15] * ORDER_1;
 8019c0c:	fba1 4b02 	umull	r4, fp, r1, r2
    t[ 4] -= t[14] * ORDER_2;
 8019c10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    t[ 4] -= t[16] * ORDER_0;
 8019c14:	eb49 090a 	adc.w	r9, r9, sl
    t[ 4] -= t[15] * ORDER_1;
 8019c18:	eb1c 0c04 	adds.w	ip, ip, r4
    t[ 4] -= t[14] * ORDER_2;
 8019c1c:	f8df a288 	ldr.w	sl, [pc, #648]	; 8019ea8 <sc_muladd+0x11bc>
 8019c20:	9c08      	ldr	r4, [sp, #32]
 8019c22:	fb0a 4a08 	mla	sl, sl, r8, r4
 8019c26:	9c06      	ldr	r4, [sp, #24]
 8019c28:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8019ea8 <sc_muladd+0x11bc>
    t[ 4] -= t[15] * ORDER_1;
 8019c2c:	ebab 0b01 	sub.w	fp, fp, r1
    t[ 4] -= t[14] * ORDER_2;
 8019c30:	fba4 4808 	umull	r4, r8, r4, r8
    t[ 4] -= t[15] * ORDER_1;
 8019c34:	eb4b 0909 	adc.w	r9, fp, r9
    t[ 4] -= t[14] * ORDER_2;
 8019c38:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 4] -= t[13] * ORDER_3;
 8019c3c:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8019eac <sc_muladd+0x11c0>
    t[ 4] -= t[14] * ORDER_2;
 8019c40:	44c2      	add	sl, r8
    t[ 4] -= t[13] * ORDER_3;
 8019c42:	fba0 cb0c 	umull	ip, fp, r0, ip
    t[ 4] -= t[14] * ORDER_2;
 8019c46:	eb4a 0a09 	adc.w	sl, sl, r9
    t[ 4] -= t[12] * ORDER_4;
 8019c4a:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8019eb0 <sc_muladd+0x11c4>
    t[ 4] -= t[13] * ORDER_3;
 8019c4e:	eb14 040c 	adds.w	r4, r4, ip
    t[ 4] -= t[12] * ORDER_4;
 8019c52:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    t[ 4] -= t[13] * ORDER_3;
 8019c56:	ebab 0b00 	sub.w	fp, fp, r0
    t[ 4] -= t[12] * ORDER_4;
 8019c5a:	fb08 790c 	mla	r9, r8, ip, r7
 8019c5e:	fba5 c808 	umull	ip, r8, r5, r8
    t[ 4] -= t[13] * ORDER_3;
 8019c62:	eb4b 0a0a 	adc.w	sl, fp, sl
    t[ 4] -= t[12] * ORDER_4;
 8019c66:	eb14 040c 	adds.w	r4, r4, ip
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019c6a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8019c6e:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 8019c72:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 8019c76:	44c8      	add	r8, r9
 8019c78:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019c7c:	eb14 040c 	adds.w	r4, r4, ip
 8019c80:	9411      	str	r4, [sp, #68]	; 0x44
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8019c82:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
    t[ 5] -= t[17] * ORDER_0;
 8019c84:	f8dd 9010 	ldr.w	r9, [sp, #16]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8019c88:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 5] -= t[17] * ORDER_0;
 8019c8c:	9c05      	ldr	r4, [sp, #20]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019c8e:	eb48 586e 	adc.w	r8, r8, lr, asr #21
    t[ 5] -= t[17] * ORDER_0;
 8019c92:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8019c96:	4264      	negs	r4, r4
 8019c98:	fb09 4b0e 	mla	fp, r9, lr, r4
 8019c9c:	f8dd e014 	ldr.w	lr, [sp, #20]
 8019ca0:	fbae e909 	umull	lr, r9, lr, r9
 8019ca4:	eb1c 0c0e 	adds.w	ip, ip, lr
    t[ 5] -= t[16] * ORDER_1;
 8019ca8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8019cac:	fb02 6a0e 	mla	sl, r2, lr, r6
 8019cb0:	f8dd e01c 	ldr.w	lr, [sp, #28]
    t[ 5] -= t[17] * ORDER_0;
 8019cb4:	eb4b 0b09 	adc.w	fp, fp, r9
    t[ 5] -= t[16] * ORDER_1;
 8019cb8:	fbae e902 	umull	lr, r9, lr, r2
 8019cbc:	eb1c 0e0e 	adds.w	lr, ip, lr
    t[ 5] -= t[15] * ORDER_2;
 8019cc0:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8019ea8 <sc_muladd+0x11bc>
    t[ 5] -= t[16] * ORDER_1;
 8019cc4:	44ca      	add	sl, r9
    t[ 5] -= t[15] * ORDER_2;
 8019cc6:	fba1 9c0c 	umull	r9, ip, r1, ip
    t[ 5] -= t[16] * ORDER_1;
 8019cca:	eb4a 0a0b 	adc.w	sl, sl, fp
    t[ 5] -= t[15] * ORDER_2;
 8019cce:	ebac 0c01 	sub.w	ip, ip, r1
 8019cd2:	eb1e 0e09 	adds.w	lr, lr, r9
 8019cd6:	eb4c 0a0a 	adc.w	sl, ip, sl
    t[ 5] -= t[14] * ORDER_3;
 8019cda:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8019cde:	f8dd c020 	ldr.w	ip, [sp, #32]
 8019ce2:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8019eac <sc_muladd+0x11c0>
 8019ce6:	fb0b cb09 	mla	fp, fp, r9, ip
 8019cea:	f8dd c018 	ldr.w	ip, [sp, #24]
 8019cee:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8019eac <sc_muladd+0x11c0>
 8019cf2:	fbac c909 	umull	ip, r9, ip, r9
 8019cf6:	eb1e 0c0c 	adds.w	ip, lr, ip
    t[ 5] -= t[13] * ORDER_4;
 8019cfa:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8019eb0 <sc_muladd+0x11c4>
    t[ 5] -= t[14] * ORDER_3;
 8019cfe:	44d9      	add	r9, fp
 8019d00:	eb49 090a 	adc.w	r9, r9, sl
    t[ 5] -= t[13] * ORDER_4;
 8019d04:	fba0 ea0e 	umull	lr, sl, r0, lr
 8019d08:	ebaa 0a00 	sub.w	sl, sl, r0
 8019d0c:	eb1c 0c0e 	adds.w	ip, ip, lr
 8019d10:	eb4a 0909 	adc.w	r9, sl, r9
    t[ 5] -= t[12] * ORDER_5;
 8019d14:	fba5 5a03 	umull	r5, sl, r5, r3
 8019d18:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8019d1c:	eb1c 0c05 	adds.w	ip, ip, r5
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019d20:	9d11      	ldr	r5, [sp, #68]	; 0x44
    t[ 5] -= t[12] * ORDER_5;
 8019d22:	fb03 770e 	mla	r7, r3, lr, r7
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019d26:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    t[ 5] -= t[12] * ORDER_5;
 8019d2a:	4457      	add	r7, sl
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019d2c:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
    t[ 5] -= t[12] * ORDER_5;
 8019d30:	eb47 0909 	adc.w	r9, r7, r9
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019d34:	eb1c 050e 	adds.w	r5, ip, lr
 8019d38:	950a      	str	r5, [sp, #40]	; 0x28
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019d3a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8019d3c:	f3c5 0e14 	ubfx	lr, r5, #0, #21
    t[ 6] -= t[17] * ORDER_1;
 8019d40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019d42:	fb02 4705 	mla	r7, r2, r5, r4
 8019d46:	9d05      	ldr	r5, [sp, #20]
 8019d48:	fba5 c502 	umull	ip, r5, r5, r2
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019d4c:	eb49 5868 	adc.w	r8, r9, r8, asr #21
    t[ 6] -= t[17] * ORDER_1;
 8019d50:	eb1e 0e0c 	adds.w	lr, lr, ip
 8019d54:	eb47 0705 	adc.w	r7, r7, r5
    t[ 6] -= t[16] * ORDER_2;
 8019d58:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8019ea8 <sc_muladd+0x11bc>
 8019d5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019d5e:	fb0c 6905 	mla	r9, ip, r5, r6
 8019d62:	9d07      	ldr	r5, [sp, #28]
 8019d64:	fba5 c50c 	umull	ip, r5, r5, ip
 8019d68:	eb1e 0c0c 	adds.w	ip, lr, ip
 8019d6c:	444d      	add	r5, r9
 8019d6e:	eb45 0507 	adc.w	r5, r5, r7
    t[ 6] -= t[15] * ORDER_3;
 8019d72:	4f4e      	ldr	r7, [pc, #312]	; (8019eac <sc_muladd+0x11c0>)
    t[ 6] -= t[14] * ORDER_4;
 8019d74:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8019eb0 <sc_muladd+0x11c4>
    t[ 6] -= t[15] * ORDER_3;
 8019d78:	fba1 7e07 	umull	r7, lr, r1, r7
 8019d7c:	eb1c 0c07 	adds.w	ip, ip, r7
 8019d80:	ebae 0e01 	sub.w	lr, lr, r1
    t[ 6] -= t[14] * ORDER_4;
 8019d84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    t[ 6] -= t[15] * ORDER_3;
 8019d86:	eb4e 0e05 	adc.w	lr, lr, r5
    t[ 6] -= t[14] * ORDER_4;
 8019d8a:	9d08      	ldr	r5, [sp, #32]
 8019d8c:	fb09 5907 	mla	r9, r9, r7, r5
 8019d90:	9d06      	ldr	r5, [sp, #24]
 8019d92:	4f47      	ldr	r7, [pc, #284]	; (8019eb0 <sc_muladd+0x11c4>)
 8019d94:	fba5 5707 	umull	r5, r7, r5, r7
 8019d98:	eb1c 0505 	adds.w	r5, ip, r5
 8019d9c:	444f      	add	r7, r9
    t[ 6] -= t[13] * ORDER_5;
 8019d9e:	fba0 ca03 	umull	ip, sl, r0, r3
    t[ 6] -= t[14] * ORDER_4;
 8019da2:	eb47 070e 	adc.w	r7, r7, lr
    t[ 6] -= t[13] * ORDER_5;
 8019da6:	ebaa 0000 	sub.w	r0, sl, r0
 8019daa:	eb15 0c0c 	adds.w	ip, r5, ip
 8019dae:	eb40 0707 	adc.w	r7, r0, r7
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8019db2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019db4:	0d45      	lsrs	r5, r0, #21
 8019db6:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
 8019dba:	eb1c 0005 	adds.w	r0, ip, r5
 8019dbe:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    t[ 7] -= t[17] * ORDER_2;
 8019dc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019dc4:	4f38      	ldr	r7, [pc, #224]	; (8019ea8 <sc_muladd+0x11bc>)
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8019dc6:	9012      	str	r0, [sp, #72]	; 0x48
    t[ 7] -= t[17] * ORDER_2;
 8019dc8:	fb07 4c05 	mla	ip, r7, r5, r4
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019dcc:	9821      	ldr	r0, [sp, #132]	; 0x84
    t[ 7] -= t[17] * ORDER_2;
 8019dce:	9d05      	ldr	r5, [sp, #20]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019dd0:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[ 7] -= t[17] * ORDER_2;
 8019dd4:	fba5 7507 	umull	r7, r5, r5, r7
 8019dd8:	19c0      	adds	r0, r0, r7
 8019dda:	eb4c 0c05 	adc.w	ip, ip, r5
    t[ 7] -= t[16] * ORDER_3;
 8019dde:	4f33      	ldr	r7, [pc, #204]	; (8019eac <sc_muladd+0x11c0>)
 8019de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019de2:	fb07 6e05 	mla	lr, r7, r5, r6
 8019de6:	9d07      	ldr	r5, [sp, #28]
 8019de8:	fba5 5707 	umull	r5, r7, r5, r7
 8019dec:	1940      	adds	r0, r0, r5
    t[ 7] -= t[15] * ORDER_4;
 8019dee:	4d30      	ldr	r5, [pc, #192]	; (8019eb0 <sc_muladd+0x11c4>)
    t[ 7] -= t[16] * ORDER_3;
 8019df0:	4477      	add	r7, lr
    t[ 7] -= t[15] * ORDER_4;
 8019df2:	fba1 5905 	umull	r5, r9, r1, r5
    t[ 7] -= t[16] * ORDER_3;
 8019df6:	eb47 070c 	adc.w	r7, r7, ip
    t[ 7] -= t[14] * ORDER_5;
 8019dfa:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    t[ 7] -= t[15] * ORDER_4;
 8019dfe:	1945      	adds	r5, r0, r5
    t[ 7] -= t[14] * ORDER_5;
 8019e00:	9808      	ldr	r0, [sp, #32]
 8019e02:	fb03 0a0c 	mla	sl, r3, ip, r0
 8019e06:	9806      	ldr	r0, [sp, #24]
    t[ 8] -= t[17] * ORDER_3;
 8019e08:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8019eac <sc_muladd+0x11c0>
    t[ 7] -= t[15] * ORDER_4;
 8019e0c:	eba9 0901 	sub.w	r9, r9, r1
 8019e10:	eb49 0707 	adc.w	r7, r9, r7
    t[ 7] -= t[14] * ORDER_5;
 8019e14:	fba0 9003 	umull	r9, r0, r0, r3
 8019e18:	4482      	add	sl, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019e1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019e1c:	ea4f 5b50 	mov.w	fp, r0, lsr #21
    t[ 7] -= t[14] * ORDER_5;
 8019e20:	eb15 0509 	adds.w	r5, r5, r9
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019e24:	ea4b 2bc8 	orr.w	fp, fp, r8, lsl #11
    t[ 7] -= t[14] * ORDER_5;
 8019e28:	eb4a 0707 	adc.w	r7, sl, r7
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019e2c:	eb15 000b 	adds.w	r0, r5, fp
 8019e30:	9006      	str	r0, [sp, #24]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8019e32:	981c      	ldr	r0, [sp, #112]	; 0x70
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e34:	9d22      	ldr	r5, [sp, #136]	; 0x88
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8019e36:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8019e3a:	f3c0 0a14 	ubfx	sl, r0, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e3e:	9821      	ldr	r0, [sp, #132]	; 0x84
    t[ 8] -= t[17] * ORDER_3;
 8019e40:	9f09      	ldr	r7, [sp, #36]	; 0x24
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e42:	0d40      	lsrs	r0, r0, #21
    t[ 8] -= t[17] * ORDER_3;
 8019e44:	fb0c 4e07 	mla	lr, ip, r7, r4
 8019e48:	9f05      	ldr	r7, [sp, #20]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e4a:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 8019e4e:	eb1a 0000 	adds.w	r0, sl, r0
    t[ 8] -= t[17] * ORDER_3;
 8019e52:	fba7 7c0c 	umull	r7, ip, r7, ip
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e56:	ea4f 5565 	mov.w	r5, r5, asr #21
 8019e5a:	f145 0500 	adc.w	r5, r5, #0
    t[ 8] -= t[17] * ORDER_3;
 8019e5e:	44f4      	add	ip, lr
 8019e60:	19c0      	adds	r0, r0, r7
 8019e62:	eb4c 0c05 	adc.w	ip, ip, r5
    t[ 8] -= t[16] * ORDER_4;
 8019e66:	4f12      	ldr	r7, [pc, #72]	; (8019eb0 <sc_muladd+0x11c4>)
 8019e68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019e6a:	fb07 6e05 	mla	lr, r7, r5, r6
 8019e6e:	9d07      	ldr	r5, [sp, #28]
 8019e70:	fba5 5707 	umull	r5, r7, r5, r7
 8019e74:	1940      	adds	r0, r0, r5
 8019e76:	4477      	add	r7, lr
    t[ 8] -= t[15] * ORDER_5;
 8019e78:	fba1 5903 	umull	r5, r9, r1, r3
    t[ 8] -= t[16] * ORDER_4;
 8019e7c:	eb47 070c 	adc.w	r7, r7, ip
    t[ 8] -= t[15] * ORDER_5;
 8019e80:	eba9 0101 	sub.w	r1, r9, r1
 8019e84:	1940      	adds	r0, r0, r5
 8019e86:	eb41 0707 	adc.w	r7, r1, r7
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e8a:	9906      	ldr	r1, [sp, #24]
 8019e8c:	0d4d      	lsrs	r5, r1, #21
 8019e8e:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
 8019e92:	1941      	adds	r1, r0, r5
    t[ 9] -= t[17] * ORDER_4;
 8019e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e96:	4d06      	ldr	r5, [pc, #24]	; (8019eb0 <sc_muladd+0x11c4>)
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8019e98:	9108      	str	r1, [sp, #32]
 8019e9a:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019e9e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    t[ 9] -= t[17] * ORDER_4;
 8019ea0:	fb05 4700 	mla	r7, r5, r0, r4
 8019ea4:	e006      	b.n	8019eb4 <sc_muladd+0x11c8>
 8019ea6:	bf00      	nop
 8019ea8:	ffe9fb68 	.word	0xffe9fb68
 8019eac:	fff0c654 	.word	0xfff0c654
 8019eb0:	ffe215d1 	.word	0xffe215d1
 8019eb4:	9805      	ldr	r0, [sp, #20]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019eb6:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[ 9] -= t[17] * ORDER_4;
 8019eba:	fba0 5005 	umull	r5, r0, r0, r5
 8019ebe:	1949      	adds	r1, r1, r5
    t[ 9] -= t[16] * ORDER_5;
 8019ec0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019ec2:	fb03 6605 	mla	r6, r3, r5, r6
 8019ec6:	9d07      	ldr	r5, [sp, #28]
    t[ 9] -= t[17] * ORDER_4;
 8019ec8:	eb47 0000 	adc.w	r0, r7, r0
    t[ 9] -= t[16] * ORDER_5;
 8019ecc:	fba5 7503 	umull	r7, r5, r5, r3
 8019ed0:	19c9      	adds	r1, r1, r7
 8019ed2:	442e      	add	r6, r5
 8019ed4:	eb46 0600 	adc.w	r6, r6, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8019ed8:	9808      	ldr	r0, [sp, #32]
 8019eda:	0d47      	lsrs	r7, r0, #21
 8019edc:	ea47 27c8 	orr.w	r7, r7, r8, lsl #11
 8019ee0:	19c9      	adds	r1, r1, r7
 8019ee2:	9107      	str	r1, [sp, #28]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019ee4:	991d      	ldr	r1, [sp, #116]	; 0x74
    t[ 0] -= t[12] * ORDER_0;
 8019ee6:	9804      	ldr	r0, [sp, #16]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019ee8:	f3c1 0e14 	ubfx	lr, r1, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019eec:	9923      	ldr	r1, [sp, #140]	; 0x8c
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8019eee:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019ef2:	0d4e      	lsrs	r6, r1, #21
 8019ef4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019ef6:	ea46 26c1 	orr.w	r6, r6, r1, lsl #11
 8019efa:	154d      	asrs	r5, r1, #21
    t[10] -= t[17] * ORDER_5;
 8019efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019efe:	fb03 4401 	mla	r4, r3, r1, r4
 8019f02:	9905      	ldr	r1, [sp, #20]
 8019f04:	fba1 a103 	umull	sl, r1, r1, r3
 8019f08:	440c      	add	r4, r1
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f0a:	9907      	ldr	r1, [sp, #28]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f0c:	eb1e 0e06 	adds.w	lr, lr, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f10:	ea4f 5151 	mov.w	r1, r1, lsr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f14:	f145 0500 	adc.w	r5, r5, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f18:	ea41 21c8 	orr.w	r1, r1, r8, lsl #11
    t[10] -= t[17] * ORDER_5;
 8019f1c:	eb1e 0e0a 	adds.w	lr, lr, sl
 8019f20:	eb44 0405 	adc.w	r4, r4, r5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f24:	eb1e 0101 	adds.w	r1, lr, r1
 8019f28:	9105      	str	r1, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8019f2a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019f2c:	f3c1 0a14 	ubfx	sl, r1, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019f30:	9905      	ldr	r1, [sp, #20]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8019f32:	eb44 5868 	adc.w	r8, r4, r8, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019f36:	ea4f 5c51 	mov.w	ip, r1, lsr #21
 8019f3a:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
 8019f3e:	eb1a 0a0c 	adds.w	sl, sl, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019f42:	990d      	ldr	r1, [sp, #52]	; 0x34
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8019f44:	ea4f 5768 	mov.w	r7, r8, asr #21
 8019f48:	f147 0700 	adc.w	r7, r7, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8019f4c:	ea4f 565a 	mov.w	r6, sl, lsr #21
 8019f50:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019f54:	f3c1 0b14 	ubfx	fp, r1, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 8019f58:	9904      	ldr	r1, [sp, #16]
 8019f5a:	f1c6 0800 	rsb	r8, r6, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8019f5e:	157f      	asrs	r7, r7, #21
    t[ 0] -= t[12] * ORDER_0;
 8019f60:	fba6 4000 	umull	r4, r0, r6, r0
 8019f64:	fb01 8107 	mla	r1, r1, r7, r8
 8019f68:	eb1b 0b04 	adds.w	fp, fp, r4
 8019f6c:	eb41 0000 	adc.w	r0, r1, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019f70:	990e      	ldr	r1, [sp, #56]	; 0x38
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019f72:	ea4f 545b 	mov.w	r4, fp, lsr #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019f76:	f3c1 0914 	ubfx	r9, r1, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 8019f7a:	fb02 8107 	mla	r1, r2, r7, r8
 8019f7e:	fba6 2502 	umull	r2, r5, r6, r2
 8019f82:	eb19 0202 	adds.w	r2, r9, r2
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019f86:	ea44 24c0 	orr.w	r4, r4, r0, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 8019f8a:	eb41 0105 	adc.w	r1, r1, r5
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8019f8e:	1912      	adds	r2, r2, r4
 8019f90:	eb41 5160 	adc.w	r1, r1, r0, asr #21
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019f94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019f96:	f3c0 0414 	ubfx	r4, r0, #0, #21
    t[ 2] -= t[12] * ORDER_2;
 8019f9a:	4887      	ldr	r0, [pc, #540]	; (801a1b8 <sc_muladd+0x14cc>)
 8019f9c:	fb00 8507 	mla	r5, r0, r7, r8
 8019fa0:	fba6 0900 	umull	r0, r9, r6, r0
 8019fa4:	1820      	adds	r0, r4, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019fa6:	ea4f 5452 	mov.w	r4, r2, lsr #21
 8019faa:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 8019fae:	eb45 0509 	adc.w	r5, r5, r9
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8019fb2:	1900      	adds	r0, r0, r4
 8019fb4:	eb45 5561 	adc.w	r5, r5, r1, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019fb8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8019fba:	f3c1 0c14 	ubfx	ip, r1, #0, #21
    t[ 3] -= t[12] * ORDER_3;
 8019fbe:	497f      	ldr	r1, [pc, #508]	; (801a1bc <sc_muladd+0x14d0>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019fc0:	0d44      	lsrs	r4, r0, #21
    t[ 3] -= t[12] * ORDER_3;
 8019fc2:	fb01 8e07 	mla	lr, r1, r7, r8
 8019fc6:	fba6 1901 	umull	r1, r9, r6, r1
 8019fca:	eb1c 0101 	adds.w	r1, ip, r1
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019fce:	ea44 24c5 	orr.w	r4, r4, r5, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 8019fd2:	eb4e 0909 	adc.w	r9, lr, r9
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019fd6:	1909      	adds	r1, r1, r4
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8019fd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019fda:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 4] -= t[12] * ORDER_4;
 8019fde:	4c78      	ldr	r4, [pc, #480]	; (801a1c0 <sc_muladd+0x14d4>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8019fe0:	eb49 5965 	adc.w	r9, r9, r5, asr #21
    t[ 4] -= t[12] * ORDER_4;
 8019fe4:	fb04 8e07 	mla	lr, r4, r7, r8
 8019fe8:	fba6 5404 	umull	r5, r4, r6, r4
 8019fec:	eb1c 0c05 	adds.w	ip, ip, r5
 8019ff0:	eb4e 0e04 	adc.w	lr, lr, r4
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019ff4:	0d4d      	lsrs	r5, r1, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8019ff6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8019ff8:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
 8019ffc:	eb1c 0c05 	adds.w	ip, ip, r5
    t[ 5] -= t[12] * ORDER_5;
 801a000:	fb03 8707 	mla	r7, r3, r7, r8
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 801a004:	f3c4 0514 	ubfx	r5, r4, #0, #21
    t[ 5] -= t[12] * ORDER_5;
 801a008:	fba6 3803 	umull	r3, r8, r6, r3
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 801a00c:	eb4e 5e69 	adc.w	lr, lr, r9, asr #21
    t[ 5] -= t[12] * ORDER_5;
 801a010:	18eb      	adds	r3, r5, r3
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801a012:	ea4f 555c 	mov.w	r5, ip, lsr #21
 801a016:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801a01a:	9c12      	ldr	r4, [sp, #72]	; 0x48
    t[ 5] -= t[12] * ORDER_5;
 801a01c:	eb47 0708 	adc.w	r7, r7, r8
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801a020:	195b      	adds	r3, r3, r5
 801a022:	eb47 5e6e 	adc.w	lr, r7, lr, asr #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 801a026:	0d5d      	lsrs	r5, r3, #21
 801a028:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801a02c:	f3c4 0614 	ubfx	r6, r4, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 801a030:	1976      	adds	r6, r6, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801a032:	9c06      	ldr	r4, [sp, #24]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 801a034:	ea4f 576e 	mov.w	r7, lr, asr #21
 801a038:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801a03c:	ea4f 5856 	mov.w	r8, r6, lsr #21
 801a040:	ea48 28c7 	orr.w	r8, r8, r7, lsl #11
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801a044:	f3c4 0914 	ubfx	r9, r4, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801a048:	9c08      	ldr	r4, [sp, #32]
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801a04a:	eb19 0908 	adds.w	r9, r9, r8
 801a04e:	ea4f 5767 	mov.w	r7, r7, asr #21
 801a052:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801a056:	f3c4 0514 	ubfx	r5, r4, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801a05a:	ea4f 5459 	mov.w	r4, r9, lsr #21
 801a05e:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
 801a062:	192d      	adds	r5, r5, r4
 801a064:	ea4f 5767 	mov.w	r7, r7, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801a068:	9c07      	ldr	r4, [sp, #28]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801a06a:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801a06e:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801a072:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801a076:	ea4e 2ec7 	orr.w	lr, lr, r7, lsl #11
 801a07a:	eb14 0e0e 	adds.w	lr, r4, lr
 801a07e:	ea4f 5767 	mov.w	r7, r7, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801a082:	9c05      	ldr	r4, [sp, #20]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801a084:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801a088:	ea4f 585e 	mov.w	r8, lr, lsr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801a08c:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801a090:	ea48 28c7 	orr.w	r8, r8, r7, lsl #11
 801a094:	eb14 0808 	adds.w	r8, r4, r8
 801a098:	ea4f 5767 	mov.w	r7, r7, asr #21
 801a09c:	f147 0700 	adc.w	r7, r7, #0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801a0a0:	ea4f 5458 	mov.w	r4, r8, lsr #21
 801a0a4:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801a0a8:	f3ca 0a14 	ubfx	sl, sl, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801a0ac:	eb1a 0a04 	adds.w	sl, sl, r4
    s[ 0] = (byte)(t[ 0] >>  0);
 801a0b0:	9c00      	ldr	r4, [sp, #0]
    s[ 1] = (byte)(t[ 0] >>  8);
 801a0b2:	9f00      	ldr	r7, [sp, #0]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 801a0b4:	f3cb 0b14 	ubfx	fp, fp, #0, #21
    s[ 0] = (byte)(t[ 0] >>  0);
 801a0b8:	f884 b000 	strb.w	fp, [r4]
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 801a0bc:	f3c2 0214 	ubfx	r2, r2, #0, #21
    s[ 1] = (byte)(t[ 0] >>  8);
 801a0c0:	ea4f 241b 	mov.w	r4, fp, lsr #8
 801a0c4:	707c      	strb	r4, [r7, #1]
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 801a0c6:	0154      	lsls	r4, r2, #5
 801a0c8:	ea44 4b1b 	orr.w	fp, r4, fp, lsr #16
    s[ 3] = (byte)(t[ 1] >>  3);
 801a0cc:	08d4      	lsrs	r4, r2, #3
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 801a0ce:	f3c0 0014 	ubfx	r0, r0, #0, #21
    s[ 3] = (byte)(t[ 1] >>  3);
 801a0d2:	70fc      	strb	r4, [r7, #3]
    s[ 4] = (byte)(t[ 1] >> 11);
 801a0d4:	0ad4      	lsrs	r4, r2, #11
 801a0d6:	713c      	strb	r4, [r7, #4]
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 801a0d8:	0084      	lsls	r4, r0, #2
 801a0da:	ea44 42d2 	orr.w	r2, r4, r2, lsr #19
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 801a0de:	f3c1 0114 	ubfx	r1, r1, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 801a0e2:	717a      	strb	r2, [r7, #5]
    s[ 6] = (byte)(t[ 2] >>  6);
 801a0e4:	0982      	lsrs	r2, r0, #6
 801a0e6:	71ba      	strb	r2, [r7, #6]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 801a0e8:	01ca      	lsls	r2, r1, #7
 801a0ea:	ea42 3090 	orr.w	r0, r2, r0, lsr #14
    s[ 8] = (byte)(t[ 3] >>  1);
 801a0ee:	084a      	lsrs	r2, r1, #1
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801a0f0:	f3cc 0c14 	ubfx	ip, ip, #0, #21
    s[ 8] = (byte)(t[ 3] >>  1);
 801a0f4:	723a      	strb	r2, [r7, #8]
    s[ 9] = (byte)(t[ 3] >>  9);
 801a0f6:	0a4a      	lsrs	r2, r1, #9
 801a0f8:	727a      	strb	r2, [r7, #9]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 801a0fa:	ea4f 120c 	mov.w	r2, ip, lsl #4
 801a0fe:	ea42 4151 	orr.w	r1, r2, r1, lsr #17
    s[11] = (byte)(t[ 4] >>  4);
 801a102:	ea4f 121c 	mov.w	r2, ip, lsr #4
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 801a106:	f3c3 0314 	ubfx	r3, r3, #0, #21
    s[11] = (byte)(t[ 4] >>  4);
 801a10a:	72fa      	strb	r2, [r7, #11]
    s[12] = (byte)(t[ 4] >> 12);
 801a10c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801a110:	733a      	strb	r2, [r7, #12]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 801a112:	18da      	adds	r2, r3, r3
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801a114:	f3c6 0614 	ubfx	r6, r6, #0, #21
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 801a118:	ea42 5c1c 	orr.w	ip, r2, ip, lsr #20
    s[14] = (byte)(t[ 5] >>  7);
 801a11c:	09da      	lsrs	r2, r3, #7
 801a11e:	73ba      	strb	r2, [r7, #14]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 801a120:	01b2      	lsls	r2, r6, #6
 801a122:	ea42 33d3 	orr.w	r3, r2, r3, lsr #15
 801a126:	73fb      	strb	r3, [r7, #15]
    s[16] = (byte)(t[ 6] >>  2);
 801a128:	08b3      	lsrs	r3, r6, #2
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801a12a:	f3c9 0914 	ubfx	r9, r9, #0, #21
    s[16] = (byte)(t[ 6] >>  2);
 801a12e:	743b      	strb	r3, [r7, #16]
    s[17] = (byte)(t[ 6] >> 10);
 801a130:	0ab3      	lsrs	r3, r6, #10
 801a132:	747b      	strb	r3, [r7, #17]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 801a134:	ea4f 03c9 	mov.w	r3, r9, lsl #3
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801a138:	f3c5 0514 	ubfx	r5, r5, #0, #21
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 801a13c:	ea43 4696 	orr.w	r6, r3, r6, lsr #18
    s[19] = (byte)(t[ 7] >>  5);
 801a140:	ea4f 1359 	mov.w	r3, r9, lsr #5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801a144:	f3ce 0e14 	ubfx	lr, lr, #0, #21
    s[19] = (byte)(t[ 7] >>  5);
 801a148:	74fb      	strb	r3, [r7, #19]
    s[22] = (byte)(t[ 8] >>  8);
 801a14a:	0a2b      	lsrs	r3, r5, #8
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801a14c:	f3c8 0814 	ubfx	r8, r8, #0, #21
    s[22] = (byte)(t[ 8] >>  8);
 801a150:	75bb      	strb	r3, [r7, #22]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 801a152:	ea4f 144e 	mov.w	r4, lr, lsl #5
    s[24] = (byte)(t[ 9] >>  3);
 801a156:	ea4f 03de 	mov.w	r3, lr, lsr #3
    s[21] = (byte)(t[ 8] >>  0);
 801a15a:	757d      	strb	r5, [r7, #21]
    s[24] = (byte)(t[ 9] >>  3);
 801a15c:	763b      	strb	r3, [r7, #24]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 801a15e:	ea44 4515 	orr.w	r5, r4, r5, lsr #16
    s[25] = (byte)(t[ 9] >> 11);
 801a162:	ea4f 23de 	mov.w	r3, lr, lsr #11
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 801a166:	ea4f 0488 	mov.w	r4, r8, lsl #2
    s[25] = (byte)(t[ 9] >> 11);
 801a16a:	767b      	strb	r3, [r7, #25]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 801a16c:	ea44 4ede 	orr.w	lr, r4, lr, lsr #19
    s[27] = (byte)(t[10] >>  6);
 801a170:	ea4f 1398 	mov.w	r3, r8, lsr #6
    s[20] = (byte)(t[ 7] >> 13);
 801a174:	ea4f 3959 	mov.w	r9, r9, lsr #13
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 801a178:	ea4f 14ca 	mov.w	r4, sl, lsl #7
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 801a17c:	f887 b002 	strb.w	fp, [r7, #2]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 801a180:	71f8      	strb	r0, [r7, #7]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 801a182:	72b9      	strb	r1, [r7, #10]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 801a184:	f887 c00d 	strb.w	ip, [r7, #13]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 801a188:	74be      	strb	r6, [r7, #18]
    s[20] = (byte)(t[ 7] >> 13);
 801a18a:	f887 9014 	strb.w	r9, [r7, #20]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 801a18e:	75fd      	strb	r5, [r7, #23]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 801a190:	f887 e01a 	strb.w	lr, [r7, #26]
    s[27] = (byte)(t[10] >>  6);
 801a194:	76fb      	strb	r3, [r7, #27]
    s[29] = (byte)(t[11] >>  1);
 801a196:	ea4f 035a 	mov.w	r3, sl, lsr #1
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 801a19a:	ea44 3898 	orr.w	r8, r4, r8, lsr #14
    s[29] = (byte)(t[11] >>  1);
 801a19e:	777b      	strb	r3, [r7, #29]
    s[30] = (byte)(t[11] >>  9);
 801a1a0:	ea4f 235a 	mov.w	r3, sl, lsr #9
    s[31] = (byte)(t[11] >> 17);
 801a1a4:	ea4f 4a5a 	mov.w	sl, sl, lsr #17
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 801a1a8:	f887 801c 	strb.w	r8, [r7, #28]
    s[30] = (byte)(t[11] >>  9);
 801a1ac:	77bb      	strb	r3, [r7, #30]
    s[31] = (byte)(t[11] >> 17);
 801a1ae:	f887 a01f 	strb.w	sl, [r7, #31]
}
 801a1b2:	b035      	add	sp, #212	; 0xd4
 801a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b8:	ffe9fb68 	.word	0xffe9fb68
 801a1bc:	fff0c654 	.word	0xfff0c654
 801a1c0:	ffe215d1 	.word	0xffe215d1

0801a1c4 <ge_scalarmult_base>:
{
 801a1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1c6:	b0f5      	sub	sp, #468	; 0x1d4
 801a1c8:	4604      	mov	r4, r0
  for (i = 0;i < 32;++i) {
 801a1ca:	4668      	mov	r0, sp
 801a1cc:	1e4e      	subs	r6, r1, #1
{
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	311f      	adds	r1, #31
 801a1d2:	4605      	mov	r5, r0
    e[2 * i + 0] = (a[i] >> 0) & 15;
 801a1d4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801a1d8:	f002 070f 	and.w	r7, r2, #15
  for (i = 0;i < 32;++i) {
 801a1dc:	42b1      	cmp	r1, r6
    e[2 * i + 1] = (a[i] >> 4) & 15;
 801a1de:	ea4f 1212 	mov.w	r2, r2, lsr #4
    e[2 * i + 0] = (a[i] >> 0) & 15;
 801a1e2:	701f      	strb	r7, [r3, #0]
    e[2 * i + 1] = (a[i] >> 4) & 15;
 801a1e4:	705a      	strb	r2, [r3, #1]
  for (i = 0;i < 32;++i) {
 801a1e6:	f103 0302 	add.w	r3, r3, #2
 801a1ea:	d1f3      	bne.n	801a1d4 <ge_scalarmult_base+0x10>
 801a1ec:	213f      	movs	r1, #63	; 0x3f
  carry = 0;
 801a1ee:	2200      	movs	r2, #0
    e[i] += carry;
 801a1f0:	f990 3000 	ldrsb.w	r3, [r0]
 801a1f4:	4413      	add	r3, r2
 801a1f6:	b2db      	uxtb	r3, r3
    carry = e[i] + 8;
 801a1f8:	f103 0208 	add.w	r2, r3, #8
    carry >>= 4;
 801a1fc:	f342 1203 	sbfx	r2, r2, #4, #4
    e[i] -= (signed char)(carry << 4);
 801a200:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
  for (i = 0;i < 63;++i) {
 801a204:	3901      	subs	r1, #1
    e[i] -= (signed char)(carry << 4);
 801a206:	f800 3b01 	strb.w	r3, [r0], #1
  for (i = 0;i < 63;++i) {
 801a20a:	d1f1      	bne.n	801a1f0 <ge_scalarmult_base+0x2c>
  e[63] += carry;
 801a20c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 801a210:	4413      	add	r3, r2
 801a212:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
  ge_select(&t,0,e[1]);
 801a216:	f995 2001 	ldrsb.w	r2, [r5, #1]
 801a21a:	a82e      	add	r0, sp, #184	; 0xb8
  fe_add(h->Y, t.yplusx, t.yminusx);
 801a21c:	f104 0628 	add.w	r6, r4, #40	; 0x28
  ge_select(&t,0,e[1]);
 801a220:	f7fd fef8 	bl	8018014 <ge_select>
  fe_sub(h->X, t.yplusx, t.yminusx);
 801a224:	aa38      	add	r2, sp, #224	; 0xe0
 801a226:	a92e      	add	r1, sp, #184	; 0xb8
 801a228:	4620      	mov	r0, r4
 801a22a:	f7fc fad0 	bl	80167ce <fe_sub>
  fe_add(h->Y, t.yplusx, t.yminusx);
 801a22e:	aa38      	add	r2, sp, #224	; 0xe0
 801a230:	a92e      	add	r1, sp, #184	; 0xb8
 801a232:	4630      	mov	r0, r6
 801a234:	f7fc f9e9 	bl	801660a <fe_add>
  fe_0(h->Z);
 801a238:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a23c:	f7fc f800 	bl	8016240 <fe_0>
  h->Z[0] = 4;
 801a240:	2304      	movs	r3, #4
 801a242:	6523      	str	r3, [r4, #80]	; 0x50
  fe_mul(h->T,h->X,h->Y);
 801a244:	4632      	mov	r2, r6
 801a246:	4621      	mov	r1, r4
 801a248:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801a24c:	f7fc fc12 	bl	8016a74 <fe_mul>
  fe_add(h->X, h->X, h->X);
 801a250:	4622      	mov	r2, r4
 801a252:	4621      	mov	r1, r4
 801a254:	4620      	mov	r0, r4
 801a256:	f7fc f9d8 	bl	801660a <fe_add>
  fe_add(h->Y, h->Y, h->Y);
 801a25a:	4632      	mov	r2, r6
 801a25c:	4631      	mov	r1, r6
 801a25e:	4630      	mov	r0, r6
 801a260:	f7fc f9d3 	bl	801660a <fe_add>
  for (i = 3;i < 64;i += 2) {
 801a264:	2603      	movs	r6, #3
    ge_select(&t,i / 2,e[i]);
 801a266:	57aa      	ldrsb	r2, [r5, r6]
 801a268:	1071      	asrs	r1, r6, #1
 801a26a:	a82e      	add	r0, sp, #184	; 0xb8
 801a26c:	f7fd fed2 	bl	8018014 <ge_select>
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 801a270:	aa2e      	add	r2, sp, #184	; 0xb8
 801a272:	4621      	mov	r1, r4
 801a274:	a84c      	add	r0, sp, #304	; 0x130
 801a276:	f7fd fd90 	bl	8017d9a <ge_madd>
  for (i = 3;i < 64;i += 2) {
 801a27a:	3602      	adds	r6, #2
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 801a27c:	a94c      	add	r1, sp, #304	; 0x130
 801a27e:	4620      	mov	r0, r4
 801a280:	f7fd fdd1 	bl	8017e26 <ge_p1p1_to_p3>
  for (i = 3;i < 64;i += 2) {
 801a284:	2e41      	cmp	r6, #65	; 0x41
 801a286:	d1ee      	bne.n	801a266 <ge_scalarmult_base+0xa2>
  ge_p3_dbl(&r,h);  ge_p1p1_to_p2(&s,&r);
 801a288:	4621      	mov	r1, r4
 801a28a:	a84c      	add	r0, sp, #304	; 0x130
 801a28c:	f7fd fe90 	bl	8017fb0 <ge_p3_dbl>
 801a290:	a94c      	add	r1, sp, #304	; 0x130
 801a292:	a810      	add	r0, sp, #64	; 0x40
 801a294:	f7fd fd68 	bl	8017d68 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p2(&s,&r);
 801a298:	a910      	add	r1, sp, #64	; 0x40
 801a29a:	a84c      	add	r0, sp, #304	; 0x130
 801a29c:	f7fd fe50 	bl	8017f40 <ge_p2_dbl>
 801a2a0:	a94c      	add	r1, sp, #304	; 0x130
 801a2a2:	a810      	add	r0, sp, #64	; 0x40
 801a2a4:	f7fd fd60 	bl	8017d68 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p2(&s,&r);
 801a2a8:	a910      	add	r1, sp, #64	; 0x40
 801a2aa:	a84c      	add	r0, sp, #304	; 0x130
 801a2ac:	f7fd fe48 	bl	8017f40 <ge_p2_dbl>
 801a2b0:	a94c      	add	r1, sp, #304	; 0x130
 801a2b2:	a810      	add	r0, sp, #64	; 0x40
 801a2b4:	f7fd fd58 	bl	8017d68 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p3(h,&r);
 801a2b8:	a910      	add	r1, sp, #64	; 0x40
 801a2ba:	a84c      	add	r0, sp, #304	; 0x130
 801a2bc:	f7fd fe40 	bl	8017f40 <ge_p2_dbl>
 801a2c0:	a94c      	add	r1, sp, #304	; 0x130
 801a2c2:	4620      	mov	r0, r4
 801a2c4:	f7fd fdaf 	bl	8017e26 <ge_p1p1_to_p3>
  for (i = 0;i < 64;i += 2) {
 801a2c8:	2600      	movs	r6, #0
    ge_select(&t,i / 2,e[i]);
 801a2ca:	57aa      	ldrsb	r2, [r5, r6]
 801a2cc:	1071      	asrs	r1, r6, #1
 801a2ce:	a82e      	add	r0, sp, #184	; 0xb8
 801a2d0:	f7fd fea0 	bl	8018014 <ge_select>
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 801a2d4:	aa2e      	add	r2, sp, #184	; 0xb8
 801a2d6:	4621      	mov	r1, r4
 801a2d8:	a84c      	add	r0, sp, #304	; 0x130
 801a2da:	f7fd fd5e 	bl	8017d9a <ge_madd>
  for (i = 0;i < 64;i += 2) {
 801a2de:	3602      	adds	r6, #2
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 801a2e0:	a94c      	add	r1, sp, #304	; 0x130
 801a2e2:	4620      	mov	r0, r4
 801a2e4:	f7fd fd9f 	bl	8017e26 <ge_p1p1_to_p3>
  for (i = 0;i < 64;i += 2) {
 801a2e8:	2e40      	cmp	r6, #64	; 0x40
 801a2ea:	d1ee      	bne.n	801a2ca <ge_scalarmult_base+0x106>
}
 801a2ec:	b075      	add	sp, #468	; 0x1d4
 801a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a2f0 <ge_double_scalarmult_vartime>:
{
 801a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f4:	b091      	sub	sp, #68	; 0x44
 801a2f6:	468b      	mov	fp, r1
 801a2f8:	9003      	str	r0, [sp, #12]
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a2fa:	f44f 7080 	mov.w	r0, #256	; 0x100
{
 801a2fe:	4691      	mov	r9, r2
 801a300:	469a      	mov	sl, r3
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a302:	f003 fb2f 	bl	801d964 <malloc>
 801a306:	9001      	str	r0, [sp, #4]
 801a308:	2800      	cmp	r0, #0
 801a30a:	f000 81cd 	beq.w	801a6a8 <ge_double_scalarmult_vartime+0x3b8>
      ((bslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a30e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a312:	f003 fb27 	bl	801d964 <malloc>
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a316:	4680      	mov	r8, r0
 801a318:	2800      	cmp	r0, #0
 801a31a:	f000 81cb 	beq.w	801a6b4 <ge_double_scalarmult_vartime+0x3c4>
      ((Ai = (ge_cached *)XMALLOC(8 * sizeof(*Ai), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a31e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a322:	f003 fb1f 	bl	801d964 <malloc>
      ((bslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a326:	4606      	mov	r6, r0
 801a328:	2800      	cmp	r0, #0
 801a32a:	f000 81ca 	beq.w	801a6c2 <ge_double_scalarmult_vartime+0x3d2>
      ((t = (ge_p1p1 *)XMALLOC(sizeof(*t), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a32e:	20a0      	movs	r0, #160	; 0xa0
 801a330:	f003 fb18 	bl	801d964 <malloc>
      ((Ai = (ge_cached *)XMALLOC(8 * sizeof(*Ai), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a334:	4604      	mov	r4, r0
 801a336:	2800      	cmp	r0, #0
 801a338:	f000 81c7 	beq.w	801a6ca <ge_double_scalarmult_vartime+0x3da>
      ((u = (ge_p3 *)XMALLOC(sizeof(*u), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a33c:	20a0      	movs	r0, #160	; 0xa0
 801a33e:	f003 fb11 	bl	801d964 <malloc>
      ((t = (ge_p1p1 *)XMALLOC(sizeof(*t), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a342:	4605      	mov	r5, r0
 801a344:	2800      	cmp	r0, #0
 801a346:	f000 81c3 	beq.w	801a6d0 <ge_double_scalarmult_vartime+0x3e0>
      ((A2 = (ge_p3 *)XMALLOC(sizeof(*A2), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL))
 801a34a:	20a0      	movs	r0, #160	; 0xa0
 801a34c:	f003 fb0a 	bl	801d964 <malloc>
      ((u = (ge_p3 *)XMALLOC(sizeof(*u), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801a350:	4607      	mov	r7, r0
 801a352:	2800      	cmp	r0, #0
 801a354:	f000 81b2 	beq.w	801a6bc <ge_double_scalarmult_vartime+0x3cc>
  slide(aslide,a);
 801a358:	9801      	ldr	r0, [sp, #4]
 801a35a:	4659      	mov	r1, fp
 801a35c:	f7fd fcb8 	bl	8017cd0 <slide>
  slide(bslide,b);
 801a360:	4651      	mov	r1, sl
 801a362:	4640      	mov	r0, r8
 801a364:	f7fd fcb4 	bl	8017cd0 <slide>
  ge_p3_to_cached(&Ai[0],A);
 801a368:	4649      	mov	r1, r9
 801a36a:	4630      	mov	r0, r6
 801a36c:	f7fd fdc8 	bl	8017f00 <ge_p3_to_cached>
  ge_p3_dbl(t,A); ge_p1p1_to_p3(A2,t);
 801a370:	4649      	mov	r1, r9
 801a372:	4620      	mov	r0, r4
 801a374:	f7fd fe1c 	bl	8017fb0 <ge_p3_dbl>
 801a378:	4621      	mov	r1, r4
 801a37a:	4638      	mov	r0, r7
 801a37c:	f7fd fd53 	bl	8017e26 <ge_p1p1_to_p3>
  ge_add(t,A2,&Ai[0]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[1],u);
 801a380:	4632      	mov	r2, r6
 801a382:	4639      	mov	r1, r7
 801a384:	4620      	mov	r0, r4
 801a386:	f7fd fd6f 	bl	8017e68 <ge_add>
 801a38a:	f106 09a0 	add.w	r9, r6, #160	; 0xa0
 801a38e:	4621      	mov	r1, r4
 801a390:	4628      	mov	r0, r5
 801a392:	f7fd fd48 	bl	8017e26 <ge_p1p1_to_p3>
 801a396:	4648      	mov	r0, r9
 801a398:	4629      	mov	r1, r5
 801a39a:	f7fd fdb1 	bl	8017f00 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[1]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[2],u);
 801a39e:	464a      	mov	r2, r9
 801a3a0:	4639      	mov	r1, r7
 801a3a2:	4620      	mov	r0, r4
 801a3a4:	f7fd fd60 	bl	8017e68 <ge_add>
 801a3a8:	f506 79a0 	add.w	r9, r6, #320	; 0x140
 801a3ac:	4621      	mov	r1, r4
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	f7fd fd39 	bl	8017e26 <ge_p1p1_to_p3>
 801a3b4:	4648      	mov	r0, r9
 801a3b6:	4629      	mov	r1, r5
 801a3b8:	f7fd fda2 	bl	8017f00 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[2]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[3],u);
 801a3bc:	464a      	mov	r2, r9
 801a3be:	4639      	mov	r1, r7
 801a3c0:	4620      	mov	r0, r4
 801a3c2:	f7fd fd51 	bl	8017e68 <ge_add>
 801a3c6:	f506 79f0 	add.w	r9, r6, #480	; 0x1e0
 801a3ca:	4621      	mov	r1, r4
 801a3cc:	4628      	mov	r0, r5
 801a3ce:	f7fd fd2a 	bl	8017e26 <ge_p1p1_to_p3>
 801a3d2:	4648      	mov	r0, r9
 801a3d4:	4629      	mov	r1, r5
 801a3d6:	f7fd fd93 	bl	8017f00 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[3]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[4],u);
 801a3da:	464a      	mov	r2, r9
 801a3dc:	4639      	mov	r1, r7
 801a3de:	4620      	mov	r0, r4
 801a3e0:	f7fd fd42 	bl	8017e68 <ge_add>
 801a3e4:	f506 7920 	add.w	r9, r6, #640	; 0x280
 801a3e8:	4621      	mov	r1, r4
 801a3ea:	4628      	mov	r0, r5
 801a3ec:	f7fd fd1b 	bl	8017e26 <ge_p1p1_to_p3>
 801a3f0:	4648      	mov	r0, r9
 801a3f2:	4629      	mov	r1, r5
 801a3f4:	f7fd fd84 	bl	8017f00 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[4]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[5],u);
 801a3f8:	464a      	mov	r2, r9
 801a3fa:	4639      	mov	r1, r7
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	f7fd fd33 	bl	8017e68 <ge_add>
 801a402:	f506 7948 	add.w	r9, r6, #800	; 0x320
 801a406:	4621      	mov	r1, r4
 801a408:	4628      	mov	r0, r5
 801a40a:	f7fd fd0c 	bl	8017e26 <ge_p1p1_to_p3>
 801a40e:	4648      	mov	r0, r9
 801a410:	4629      	mov	r1, r5
 801a412:	f7fd fd75 	bl	8017f00 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[5]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[6],u);
 801a416:	464a      	mov	r2, r9
 801a418:	4639      	mov	r1, r7
 801a41a:	4620      	mov	r0, r4
 801a41c:	f7fd fd24 	bl	8017e68 <ge_add>
 801a420:	f506 7970 	add.w	r9, r6, #960	; 0x3c0
 801a424:	4621      	mov	r1, r4
 801a426:	4628      	mov	r0, r5
 801a428:	f7fd fcfd 	bl	8017e26 <ge_p1p1_to_p3>
 801a42c:	4629      	mov	r1, r5
 801a42e:	4648      	mov	r0, r9
 801a430:	f7fd fd66 	bl	8017f00 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[6]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[7],u);
 801a434:	464a      	mov	r2, r9
 801a436:	4639      	mov	r1, r7
 801a438:	4620      	mov	r0, r4
 801a43a:	f7fd fd15 	bl	8017e68 <ge_add>
 801a43e:	4621      	mov	r1, r4
 801a440:	4628      	mov	r0, r5
 801a442:	f7fd fcf0 	bl	8017e26 <ge_p1p1_to_p3>
 801a446:	4629      	mov	r1, r5
 801a448:	f506 608c 	add.w	r0, r6, #1120	; 0x460
 801a44c:	f7fd fd58 	bl	8017f00 <ge_p3_to_cached>
  fe_0(h->X);
 801a450:	9803      	ldr	r0, [sp, #12]
 801a452:	f7fb fef5 	bl	8016240 <fe_0>
  fe_1(h->Y);
 801a456:	9b03      	ldr	r3, [sp, #12]
 801a458:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801a45c:	f7fb fee3 	bl	8016226 <fe_1>
  fe_1(h->Z);
 801a460:	9b03      	ldr	r3, [sp, #12]
 801a462:	f103 0050 	add.w	r0, r3, #80	; 0x50
 801a466:	f7fb fede 	bl	8016226 <fe_1>
  for (i = 255;i >= 0;--i) {
 801a46a:	22ff      	movs	r2, #255	; 0xff
    if (aslide[i] || bslide[i]) break;
 801a46c:	9b01      	ldr	r3, [sp, #4]
 801a46e:	569b      	ldrsb	r3, [r3, r2]
 801a470:	b91b      	cbnz	r3, 801a47a <ge_double_scalarmult_vartime+0x18a>
 801a472:	f918 3002 	ldrsb.w	r3, [r8, r2]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d04b      	beq.n	801a512 <ge_double_scalarmult_vartime+0x222>
 801a47a:	eb08 0302 	add.w	r3, r8, r2
 801a47e:	9300      	str	r3, [sp, #0]
 801a480:	9b01      	ldr	r3, [sp, #4]
 801a482:	4413      	add	r3, r2
 801a484:	9302      	str	r3, [sp, #8]

#ifndef CURVED25519_ASM
static WC_INLINE void ge_sub(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)
{
    ge t0;
    fe_add(r->X,p->Y,p->X);
 801a486:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801a48a:	9304      	str	r3, [sp, #16]
  for (;i >= 0;--i) {
 801a48c:	9b00      	ldr	r3, [sp, #0]
 801a48e:	eba3 0308 	sub.w	r3, r3, r8
 801a492:	2b00      	cmp	r3, #0
 801a494:	db3f      	blt.n	801a516 <ge_double_scalarmult_vartime+0x226>
    ge_p2_dbl(t,r);
 801a496:	9903      	ldr	r1, [sp, #12]
 801a498:	4620      	mov	r0, r4
 801a49a:	f7fd fd51 	bl	8017f40 <ge_p2_dbl>
    if (aslide[i] > 0) {
 801a49e:	9b02      	ldr	r3, [sp, #8]
 801a4a0:	f993 3000 	ldrsb.w	r3, [r3]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	dd54      	ble.n	801a552 <ge_double_scalarmult_vartime+0x262>
      ge_p1p1_to_p3(u,t);
 801a4a8:	4621      	mov	r1, r4
 801a4aa:	4628      	mov	r0, r5
 801a4ac:	f7fd fcbb 	bl	8017e26 <ge_p1p1_to_p3>
      ge_add(t,u,&Ai[aslide[i]/2]);
 801a4b0:	9b02      	ldr	r3, [sp, #8]
 801a4b2:	f993 2000 	ldrsb.w	r2, [r3]
 801a4b6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801a4ba:	1052      	asrs	r2, r2, #1
 801a4bc:	23a0      	movs	r3, #160	; 0xa0
 801a4be:	fb03 6202 	mla	r2, r3, r2, r6
 801a4c2:	4629      	mov	r1, r5
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	f7fd fccf 	bl	8017e68 <ge_add>
    if (bslide[i] > 0) {
 801a4ca:	9b00      	ldr	r3, [sp, #0]
 801a4cc:	f993 3000 	ldrsb.w	r3, [r3]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	f340 8093 	ble.w	801a5fc <ge_double_scalarmult_vartime+0x30c>
      ge_p1p1_to_p3(u,t);
 801a4d6:	4621      	mov	r1, r4
 801a4d8:	4628      	mov	r0, r5
 801a4da:	f7fd fca4 	bl	8017e26 <ge_p1p1_to_p3>
      ge_madd(t,u,&Bi[bslide[i]/2]);
 801a4de:	9b00      	ldr	r3, [sp, #0]
 801a4e0:	f993 2000 	ldrsb.w	r2, [r3]
 801a4e4:	4b7b      	ldr	r3, [pc, #492]	; (801a6d4 <ge_double_scalarmult_vartime+0x3e4>)
 801a4e6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801a4ea:	1052      	asrs	r2, r2, #1
 801a4ec:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 801a4f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801a4f4:	4629      	mov	r1, r5
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	f7fd fc4f 	bl	8017d9a <ge_madd>
    ge_p1p1_to_p2(r,t);
 801a4fc:	9803      	ldr	r0, [sp, #12]
 801a4fe:	4621      	mov	r1, r4
 801a500:	f7fd fc32 	bl	8017d68 <ge_p1p1_to_p2>
  for (;i >= 0;--i) {
 801a504:	9b00      	ldr	r3, [sp, #0]
 801a506:	3b01      	subs	r3, #1
 801a508:	9300      	str	r3, [sp, #0]
 801a50a:	9b02      	ldr	r3, [sp, #8]
 801a50c:	3b01      	subs	r3, #1
 801a50e:	9302      	str	r3, [sp, #8]
 801a510:	e7bc      	b.n	801a48c <ge_double_scalarmult_vartime+0x19c>
  for (i = 255;i >= 0;--i) {
 801a512:	3a01      	subs	r2, #1
 801a514:	d2aa      	bcs.n	801a46c <ge_double_scalarmult_vartime+0x17c>
      ret = 0;
 801a516:	f04f 0900 	mov.w	r9, #0
      XFREE(aslide, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a51a:	9801      	ldr	r0, [sp, #4]
 801a51c:	f003 fa2a 	bl	801d974 <free>
  if (bslide != NULL)
 801a520:	f1b8 0f00 	cmp.w	r8, #0
 801a524:	d002      	beq.n	801a52c <ge_double_scalarmult_vartime+0x23c>
      XFREE(bslide, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a526:	4640      	mov	r0, r8
 801a528:	f003 fa24 	bl	801d974 <free>
  if (Ai != NULL)
 801a52c:	b116      	cbz	r6, 801a534 <ge_double_scalarmult_vartime+0x244>
      XFREE(Ai, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a52e:	4630      	mov	r0, r6
 801a530:	f003 fa20 	bl	801d974 <free>
  if (t != NULL)
 801a534:	b114      	cbz	r4, 801a53c <ge_double_scalarmult_vartime+0x24c>
      XFREE(t, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a536:	4620      	mov	r0, r4
 801a538:	f003 fa1c 	bl	801d974 <free>
  if (u != NULL)
 801a53c:	b115      	cbz	r5, 801a544 <ge_double_scalarmult_vartime+0x254>
      XFREE(u, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a53e:	4628      	mov	r0, r5
 801a540:	f003 fa18 	bl	801d974 <free>
  if (A2 != NULL)
 801a544:	2f00      	cmp	r7, #0
 801a546:	f000 80b1 	beq.w	801a6ac <ge_double_scalarmult_vartime+0x3bc>
      XFREE(A2, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a54a:	4638      	mov	r0, r7
 801a54c:	f003 fa12 	bl	801d974 <free>
  return ret;
 801a550:	e0ac      	b.n	801a6ac <ge_double_scalarmult_vartime+0x3bc>
    } else if (aslide[i] < 0) {
 801a552:	d0ba      	beq.n	801a4ca <ge_double_scalarmult_vartime+0x1da>
      ge_p1p1_to_p3(u,t);
 801a554:	4621      	mov	r1, r4
 801a556:	4628      	mov	r0, r5
 801a558:	f7fd fc65 	bl	8017e26 <ge_p1p1_to_p3>
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 801a55c:	9b02      	ldr	r3, [sp, #8]
    fe_add(r->X,p->Y,p->X);
 801a55e:	9904      	ldr	r1, [sp, #16]
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 801a560:	f993 9000 	ldrsb.w	r9, [r3]
 801a564:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    fe_sub(r->Y,p->Y,p->X);
 801a568:	f104 0a28 	add.w	sl, r4, #40	; 0x28
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 801a56c:	23a0      	movs	r3, #160	; 0xa0
    fe_add(r->X,p->Y,p->X);
 801a56e:	462a      	mov	r2, r5
 801a570:	4620      	mov	r0, r4
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 801a572:	ea4f 0969 	mov.w	r9, r9, asr #1
 801a576:	fb09 6913 	mls	r9, r9, r3, r6
    fe_mul(r->Z,r->X,q->YminusX);
 801a57a:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    fe_add(r->X,p->Y,p->X);
 801a57e:	f7fc f844 	bl	801660a <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 801a582:	9904      	ldr	r1, [sp, #16]
 801a584:	462a      	mov	r2, r5
 801a586:	4650      	mov	r0, sl
 801a588:	f7fc f921 	bl	80167ce <fe_sub>
    fe_mul(r->Z,r->X,q->YminusX);
 801a58c:	f109 0228 	add.w	r2, r9, #40	; 0x28
 801a590:	4621      	mov	r1, r4
 801a592:	4658      	mov	r0, fp
 801a594:	f7fc fa6e 	bl	8016a74 <fe_mul>
    fe_mul(r->Y,r->Y,q->YplusX);
 801a598:	464a      	mov	r2, r9
 801a59a:	4651      	mov	r1, sl
 801a59c:	4650      	mov	r0, sl
 801a59e:	f7fc fa69 	bl	8016a74 <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 801a5a2:	f104 0378 	add.w	r3, r4, #120	; 0x78
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f105 0278 	add.w	r2, r5, #120	; 0x78
 801a5ac:	f109 0178 	add.w	r1, r9, #120	; 0x78
 801a5b0:	9305      	str	r3, [sp, #20]
 801a5b2:	f7fc fa5f 	bl	8016a74 <fe_mul>
    fe_mul(r->X,p->Z,q->Z);
 801a5b6:	f109 0250 	add.w	r2, r9, #80	; 0x50
 801a5ba:	f105 0150 	add.w	r1, r5, #80	; 0x50
 801a5be:	4620      	mov	r0, r4
 801a5c0:	f7fc fa58 	bl	8016a74 <fe_mul>
    fe_add(t0,r->X,r->X);
 801a5c4:	4622      	mov	r2, r4
 801a5c6:	4621      	mov	r1, r4
 801a5c8:	a806      	add	r0, sp, #24
 801a5ca:	f7fc f81e 	bl	801660a <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 801a5ce:	4652      	mov	r2, sl
 801a5d0:	4659      	mov	r1, fp
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	f7fc f8fb 	bl	80167ce <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 801a5d8:	4652      	mov	r2, sl
 801a5da:	4659      	mov	r1, fp
 801a5dc:	4650      	mov	r0, sl
 801a5de:	f7fc f814 	bl	801660a <fe_add>
    fe_sub(r->Z,t0,r->T);
 801a5e2:	9b05      	ldr	r3, [sp, #20]
 801a5e4:	a906      	add	r1, sp, #24
 801a5e6:	461a      	mov	r2, r3
 801a5e8:	4658      	mov	r0, fp
 801a5ea:	f7fc f8f0 	bl	80167ce <fe_sub>
    fe_add(r->T,t0,r->T);
 801a5ee:	9b05      	ldr	r3, [sp, #20]
 801a5f0:	a906      	add	r1, sp, #24
 801a5f2:	461a      	mov	r2, r3
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	f7fc f808 	bl	801660a <fe_add>
}
 801a5fa:	e766      	b.n	801a4ca <ge_double_scalarmult_vartime+0x1da>
    } else if (bslide[i] < 0) {
 801a5fc:	f43f af7e 	beq.w	801a4fc <ge_double_scalarmult_vartime+0x20c>
      ge_p1p1_to_p3(u,t);
 801a600:	4621      	mov	r1, r4
 801a602:	4628      	mov	r0, r5
 801a604:	f7fd fc0f 	bl	8017e26 <ge_p1p1_to_p3>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 801a608:	9b00      	ldr	r3, [sp, #0]
    fe_add(r->X,p->Y,p->X);
 801a60a:	9904      	ldr	r1, [sp, #16]
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 801a60c:	f993 9000 	ldrsb.w	r9, [r3]
    fe_sub(r->Y,p->Y,p->X);
 801a610:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    fe_add(r->X,p->Y,p->X);
 801a614:	462a      	mov	r2, r5
 801a616:	4620      	mov	r0, r4
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 801a618:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    fe_add(r->X,p->Y,p->X);
 801a61c:	f7fb fff5 	bl	801660a <fe_add>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 801a620:	ea4f 0969 	mov.w	r9, r9, asr #1
    fe_sub(r->Y,p->Y,p->X);
 801a624:	9904      	ldr	r1, [sp, #16]
 801a626:	462a      	mov	r2, r5
 801a628:	4650      	mov	r0, sl
 801a62a:	f7fc f8d0 	bl	80167ce <fe_sub>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 801a62e:	f1c9 0900 	rsb	r9, r9, #0
    fe_mul(r->Z,r->X,q->yminusx);
 801a632:	2178      	movs	r1, #120	; 0x78
 801a634:	fb01 f909 	mul.w	r9, r1, r9
 801a638:	4b26      	ldr	r3, [pc, #152]	; (801a6d4 <ge_double_scalarmult_vartime+0x3e4>)
 801a63a:	f104 0b50 	add.w	fp, r4, #80	; 0x50
 801a63e:	f109 0228 	add.w	r2, r9, #40	; 0x28
 801a642:	441a      	add	r2, r3
 801a644:	4621      	mov	r1, r4
 801a646:	4658      	mov	r0, fp
 801a648:	f7fc fa14 	bl	8016a74 <fe_mul>
    fe_mul(r->Y,r->Y,q->yplusx);
 801a64c:	4b21      	ldr	r3, [pc, #132]	; (801a6d4 <ge_double_scalarmult_vartime+0x3e4>)
 801a64e:	4651      	mov	r1, sl
 801a650:	eb03 0209 	add.w	r2, r3, r9
 801a654:	4650      	mov	r0, sl
 801a656:	f7fc fa0d 	bl	8016a74 <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 801a65a:	481e      	ldr	r0, [pc, #120]	; (801a6d4 <ge_double_scalarmult_vartime+0x3e4>)
 801a65c:	f104 0378 	add.w	r3, r4, #120	; 0x78
 801a660:	f109 0150 	add.w	r1, r9, #80	; 0x50
 801a664:	f105 0278 	add.w	r2, r5, #120	; 0x78
 801a668:	4401      	add	r1, r0
 801a66a:	4618      	mov	r0, r3
 801a66c:	4699      	mov	r9, r3
 801a66e:	f7fc fa01 	bl	8016a74 <fe_mul>
    fe_add(t0,p->Z,p->Z);
 801a672:	f105 0250 	add.w	r2, r5, #80	; 0x50
 801a676:	4611      	mov	r1, r2
 801a678:	a806      	add	r0, sp, #24
 801a67a:	f7fb ffc6 	bl	801660a <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 801a67e:	4652      	mov	r2, sl
 801a680:	4659      	mov	r1, fp
 801a682:	4620      	mov	r0, r4
 801a684:	f7fc f8a3 	bl	80167ce <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 801a688:	4652      	mov	r2, sl
 801a68a:	4659      	mov	r1, fp
 801a68c:	4650      	mov	r0, sl
 801a68e:	f7fb ffbc 	bl	801660a <fe_add>
    fe_sub(r->Z,t0,r->T);
 801a692:	464a      	mov	r2, r9
 801a694:	a906      	add	r1, sp, #24
 801a696:	4658      	mov	r0, fp
 801a698:	f7fc f899 	bl	80167ce <fe_sub>
    fe_add(r->T,t0,r->T);
 801a69c:	464a      	mov	r2, r9
 801a69e:	a906      	add	r1, sp, #24
 801a6a0:	4648      	mov	r0, r9
 801a6a2:	f7fb ffb2 	bl	801660a <fe_add>
}
 801a6a6:	e729      	b.n	801a4fc <ge_double_scalarmult_vartime+0x20c>
      ret = MEMORY_E;
 801a6a8:	f06f 097c 	mvn.w	r9, #124	; 0x7c
}
 801a6ac:	4648      	mov	r0, r9
 801a6ae:	b011      	add	sp, #68	; 0x44
 801a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ge_p3 *A2 = NULL;
 801a6b4:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 801a6b6:	4605      	mov	r5, r0
  ge_p1p1 *t = NULL;
 801a6b8:	4604      	mov	r4, r0
  ge_cached *Ai = NULL; /* A,3A,5A,7A,9A,11A,13A,15A */
 801a6ba:	4606      	mov	r6, r0
      ret = MEMORY_E;
 801a6bc:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 801a6c0:	e72b      	b.n	801a51a <ge_double_scalarmult_vartime+0x22a>
  ge_p3 *A2 = NULL;
 801a6c2:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 801a6c4:	4605      	mov	r5, r0
  ge_p1p1 *t = NULL;
 801a6c6:	4604      	mov	r4, r0
 801a6c8:	e7f8      	b.n	801a6bc <ge_double_scalarmult_vartime+0x3cc>
  ge_p3 *A2 = NULL;
 801a6ca:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 801a6cc:	4605      	mov	r5, r0
 801a6ce:	e7f5      	b.n	801a6bc <ge_double_scalarmult_vartime+0x3cc>
  ge_p3 *A2 = NULL;
 801a6d0:	4607      	mov	r7, r0
 801a6d2:	e7f3      	b.n	801a6bc <ge_double_scalarmult_vartime+0x3cc>
 801a6d4:	08022e04 	.word	0x08022e04

0801a6d8 <ge_frombytes_negate_vartime>:
{
 801a6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6da:	4604      	mov	r4, r0
  fe_frombytes(h->Y,s);
 801a6dc:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 801a6e0:	b0b3      	sub	sp, #204	; 0xcc
  fe_1(h->Z);
 801a6e2:	f104 0750 	add.w	r7, r4, #80	; 0x50
  fe_frombytes(h->Y,s);
 801a6e6:	4628      	mov	r0, r5
{
 801a6e8:	460e      	mov	r6, r1
  fe_frombytes(h->Y,s);
 801a6ea:	f7fc f8a1 	bl	8016830 <fe_frombytes>
  fe_1(h->Z);
 801a6ee:	4638      	mov	r0, r7
 801a6f0:	f7fb fd99 	bl	8016226 <fe_1>
  fe_sq(u,h->Y);
 801a6f4:	4629      	mov	r1, r5
 801a6f6:	4668      	mov	r0, sp
 801a6f8:	f7fb fdaf 	bl	801625a <fe_sq>
  fe_mul(v,u,d);
 801a6fc:	4a35      	ldr	r2, [pc, #212]	; (801a7d4 <ge_frombytes_negate_vartime+0xfc>)
 801a6fe:	4669      	mov	r1, sp
 801a700:	a80a      	add	r0, sp, #40	; 0x28
 801a702:	f7fc f9b7 	bl	8016a74 <fe_mul>
  fe_sub(u,u,h->Z);       /* u = y^2-1 */
 801a706:	463a      	mov	r2, r7
 801a708:	4669      	mov	r1, sp
 801a70a:	4668      	mov	r0, sp
 801a70c:	f7fc f85f 	bl	80167ce <fe_sub>
  fe_add(v,v,h->Z);       /* v = dy^2+1 */
 801a710:	a90a      	add	r1, sp, #40	; 0x28
 801a712:	463a      	mov	r2, r7
 801a714:	4608      	mov	r0, r1
 801a716:	f7fb ff78 	bl	801660a <fe_add>
  fe_sq(v3,v);
 801a71a:	a90a      	add	r1, sp, #40	; 0x28
 801a71c:	a814      	add	r0, sp, #80	; 0x50
 801a71e:	f7fb fd9c 	bl	801625a <fe_sq>
  fe_mul(v3,v3,v);        /* v3 = v^3 */
 801a722:	a914      	add	r1, sp, #80	; 0x50
 801a724:	aa0a      	add	r2, sp, #40	; 0x28
 801a726:	4608      	mov	r0, r1
 801a728:	f7fc f9a4 	bl	8016a74 <fe_mul>
  fe_sq(h->X,v3);
 801a72c:	a914      	add	r1, sp, #80	; 0x50
 801a72e:	4620      	mov	r0, r4
 801a730:	f7fb fd93 	bl	801625a <fe_sq>
  fe_mul(h->X,h->X,v);
 801a734:	aa0a      	add	r2, sp, #40	; 0x28
 801a736:	4621      	mov	r1, r4
 801a738:	4620      	mov	r0, r4
 801a73a:	f7fc f99b 	bl	8016a74 <fe_mul>
  fe_mul(h->X,h->X,u);    /* x = uv^7 */
 801a73e:	466a      	mov	r2, sp
 801a740:	4621      	mov	r1, r4
 801a742:	4620      	mov	r0, r4
 801a744:	f7fc f996 	bl	8016a74 <fe_mul>
  fe_pow22523(h->X,h->X); /* x = (uv^7)^((q-5)/8) */
 801a748:	4621      	mov	r1, r4
 801a74a:	4620      	mov	r0, r4
 801a74c:	f7fd f966 	bl	8017a1c <fe_pow22523>
  fe_mul(h->X,h->X,v3);
 801a750:	aa14      	add	r2, sp, #80	; 0x50
 801a752:	4621      	mov	r1, r4
 801a754:	4620      	mov	r0, r4
 801a756:	f7fc f98d 	bl	8016a74 <fe_mul>
  fe_mul(h->X,h->X,u);    /* x = uv^3(uv^7)^((q-5)/8) */
 801a75a:	466a      	mov	r2, sp
 801a75c:	4621      	mov	r1, r4
 801a75e:	4620      	mov	r0, r4
 801a760:	f7fc f988 	bl	8016a74 <fe_mul>
  fe_sq(vxx,h->X);
 801a764:	4621      	mov	r1, r4
 801a766:	a81e      	add	r0, sp, #120	; 0x78
 801a768:	f7fb fd77 	bl	801625a <fe_sq>
  fe_mul(vxx,vxx,v);
 801a76c:	a91e      	add	r1, sp, #120	; 0x78
 801a76e:	4608      	mov	r0, r1
 801a770:	aa0a      	add	r2, sp, #40	; 0x28
 801a772:	f7fc f97f 	bl	8016a74 <fe_mul>
  fe_sub(check,vxx,u);    /* vx^2-u */
 801a776:	a828      	add	r0, sp, #160	; 0xa0
 801a778:	466a      	mov	r2, sp
 801a77a:	a91e      	add	r1, sp, #120	; 0x78
 801a77c:	f7fc f827 	bl	80167ce <fe_sub>
  if (fe_isnonzero(check)) {
 801a780:	a828      	add	r0, sp, #160	; 0xa0
 801a782:	f7fd fa23 	bl	8017bcc <fe_isnonzero>
 801a786:	b168      	cbz	r0, 801a7a4 <ge_frombytes_negate_vartime+0xcc>
    fe_add(check,vxx,u);  /* vx^2+u */
 801a788:	a828      	add	r0, sp, #160	; 0xa0
 801a78a:	466a      	mov	r2, sp
 801a78c:	a91e      	add	r1, sp, #120	; 0x78
 801a78e:	f7fb ff3c 	bl	801660a <fe_add>
    if (fe_isnonzero(check)) return -1;
 801a792:	a828      	add	r0, sp, #160	; 0xa0
 801a794:	f7fd fa1a 	bl	8017bcc <fe_isnonzero>
 801a798:	b9c0      	cbnz	r0, 801a7cc <ge_frombytes_negate_vartime+0xf4>
    fe_mul(h->X,h->X,sqrtm1);
 801a79a:	4a0f      	ldr	r2, [pc, #60]	; (801a7d8 <ge_frombytes_negate_vartime+0x100>)
 801a79c:	4621      	mov	r1, r4
 801a79e:	4620      	mov	r0, r4
 801a7a0:	f7fc f968 	bl	8016a74 <fe_mul>
  if (fe_isnegative(h->X) == (s[31] >> 7))
 801a7a4:	4620      	mov	r0, r4
 801a7a6:	f7fd fa29 	bl	8017bfc <fe_isnegative>
 801a7aa:	7ff3      	ldrb	r3, [r6, #31]
 801a7ac:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 801a7b0:	d103      	bne.n	801a7ba <ge_frombytes_negate_vartime+0xe2>
    fe_neg(h->X,h->X);
 801a7b2:	4621      	mov	r1, r4
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	f7fd f9e3 	bl	8017b80 <fe_neg>
  fe_mul(h->T,h->X,h->Y);
 801a7ba:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801a7be:	462a      	mov	r2, r5
 801a7c0:	4621      	mov	r1, r4
 801a7c2:	f7fc f957 	bl	8016a74 <fe_mul>
  return 0;
 801a7c6:	2000      	movs	r0, #0
}
 801a7c8:	b033      	add	sp, #204	; 0xcc
 801a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (fe_isnonzero(check)) return -1;
 801a7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7d0:	e7fa      	b.n	801a7c8 <ge_frombytes_negate_vartime+0xf0>
 801a7d2:	bf00      	nop
 801a7d4:	0802a9c4 	.word	0x0802a9c4
 801a7d8:	0802aa14 	.word	0x0802aa14

0801a7dc <ge_tobytes>:
#endif

/* ge tobytes */
void ge_tobytes(unsigned char *s,const ge_p2 *h)
{
 801a7dc:	b530      	push	{r4, r5, lr}
 801a7de:	b09f      	sub	sp, #124	; 0x7c
 801a7e0:	4604      	mov	r4, r0
 801a7e2:	460d      	mov	r5, r1
  ge recip;
  ge x;
  ge y;

  fe_invert(recip,h->Z);
 801a7e4:	4668      	mov	r0, sp
 801a7e6:	3150      	adds	r1, #80	; 0x50
 801a7e8:	f7fc fc06 	bl	8016ff8 <fe_invert>
  fe_mul(x,h->X,recip);
 801a7ec:	466a      	mov	r2, sp
 801a7ee:	4629      	mov	r1, r5
 801a7f0:	a80a      	add	r0, sp, #40	; 0x28
 801a7f2:	f7fc f93f 	bl	8016a74 <fe_mul>
  fe_mul(y,h->Y,recip);
 801a7f6:	466a      	mov	r2, sp
 801a7f8:	f105 0128 	add.w	r1, r5, #40	; 0x28
 801a7fc:	a814      	add	r0, sp, #80	; 0x50
 801a7fe:	f7fc f939 	bl	8016a74 <fe_mul>
  fe_tobytes(s,y);
 801a802:	a914      	add	r1, sp, #80	; 0x50
 801a804:	4620      	mov	r0, r4
 801a806:	f7fb ff31 	bl	801666c <fe_tobytes>
  s[31] ^= (unsigned char)(fe_isnegative(x) << 7);
 801a80a:	a80a      	add	r0, sp, #40	; 0x28
 801a80c:	f7fd f9f6 	bl	8017bfc <fe_isnegative>
 801a810:	7fe3      	ldrb	r3, [r4, #31]
 801a812:	ea83 13c0 	eor.w	r3, r3, r0, lsl #7
 801a816:	77e3      	strb	r3, [r4, #31]
}
 801a818:	b01f      	add	sp, #124	; 0x7c
 801a81a:	bd30      	pop	{r4, r5, pc}

0801a81c <ge_compress_key>:
{
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	4616      	mov	r6, r2
 801a820:	b0b6      	sub	sp, #216	; 0xd8
    XMEMCPY(x, xIn, ED25519_PUB_KEY_SIZE);
 801a822:	2220      	movs	r2, #32
{
 801a824:	4605      	mov	r5, r0
    XMEMCPY(x, xIn, ED25519_PUB_KEY_SIZE);
 801a826:	eb0d 0002 	add.w	r0, sp, r2
{
 801a82a:	461c      	mov	r4, r3
    XMEMCPY(x, xIn, ED25519_PUB_KEY_SIZE);
 801a82c:	f003 f8ba 	bl	801d9a4 <memcpy>
    XMEMCPY(y, yIn, ED25519_PUB_KEY_SIZE);
 801a830:	2220      	movs	r2, #32
 801a832:	4631      	mov	r1, r6
 801a834:	a810      	add	r0, sp, #64	; 0x40
 801a836:	f003 f8b5 	bl	801d9a4 <memcpy>
    fe_frombytes(g.X, x);
 801a83a:	a908      	add	r1, sp, #32
 801a83c:	a818      	add	r0, sp, #96	; 0x60
 801a83e:	f7fb fff7 	bl	8016830 <fe_frombytes>
    fe_frombytes(g.Y, y);
 801a842:	a910      	add	r1, sp, #64	; 0x40
 801a844:	a822      	add	r0, sp, #136	; 0x88
 801a846:	f7fb fff3 	bl	8016830 <fe_frombytes>
    fe_1(g.Z);
 801a84a:	a82c      	add	r0, sp, #176	; 0xb0
 801a84c:	f7fb fceb 	bl	8016226 <fe_1>
    ge_tobytes(bArray, &g);
 801a850:	a918      	add	r1, sp, #96	; 0x60
 801a852:	4668      	mov	r0, sp
 801a854:	f7ff ffc2 	bl	801a7dc <ge_tobytes>
    for (i = 0; i < keySz; i++) {
 801a858:	466a      	mov	r2, sp
 801a85a:	192b      	adds	r3, r5, r4
 801a85c:	42ab      	cmp	r3, r5
 801a85e:	d102      	bne.n	801a866 <ge_compress_key+0x4a>
}
 801a860:	2000      	movs	r0, #0
 801a862:	b036      	add	sp, #216	; 0xd8
 801a864:	bd70      	pop	{r4, r5, r6, pc}
        out[keySz - 1 - i] = bArray[i];
 801a866:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a86a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    for (i = 0; i < keySz; i++) {
 801a86e:	e7f5      	b.n	801a85c <ge_compress_key+0x40>

0801a870 <wc_HashGetDigestSize>:

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
    switch(hash_type)
 801a870:	3801      	subs	r0, #1
 801a872:	b2c0      	uxtb	r0, r0
 801a874:	2810      	cmp	r0, #16
 801a876:	bf9a      	itte	ls
 801a878:	4b02      	ldrls	r3, [pc, #8]	; (801a884 <wc_HashGetDigestSize+0x14>)
 801a87a:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
 801a87e:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
        default:
            dig_size = BAD_FUNC_ARG;
            break;
    }
    return dig_size;
}
 801a882:	4770      	bx	lr
 801a884:	0802aa3c 	.word	0x0802aa3c

0801a888 <wc_HashGetBlockSize>:

/* Get Hash block size */
int wc_HashGetBlockSize(enum wc_HashType hash_type)
{
    int block_size = HASH_TYPE_E; /* Default to hash type error */
    switch (hash_type)
 801a888:	3801      	subs	r0, #1
 801a88a:	b2c0      	uxtb	r0, r0
 801a88c:	2810      	cmp	r0, #16
 801a88e:	bf9a      	itte	ls
 801a890:	4b02      	ldrls	r3, [pc, #8]	; (801a89c <wc_HashGetBlockSize+0x14>)
 801a892:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
 801a896:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
        default:
            block_size = BAD_FUNC_ARG;
            break;
    }
    return block_size;
}
 801a89a:	4770      	bx	lr
 801a89c:	0802aa5e 	.word	0x0802aa5e

0801a8a0 <wc_HashInit_ex>:
    return ret;
}

int wc_HashInit_ex(wc_HashAlg* hash, enum wc_HashType type, void* heap,
    int devId)
{
 801a8a0:	b410      	push	{r4}
 801a8a2:	460c      	mov	r4, r1
 801a8a4:	4611      	mov	r1, r2
 801a8a6:	461a      	mov	r2, r3
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL)
 801a8a8:	b1d8      	cbz	r0, 801a8e2 <wc_HashInit_ex+0x42>
        return BAD_FUNC_ARG;

    switch (type) {
 801a8aa:	1ee3      	subs	r3, r4, #3
 801a8ac:	2b0e      	cmp	r3, #14
 801a8ae:	d818      	bhi.n	801a8e2 <wc_HashInit_ex+0x42>
 801a8b0:	e8df f003 	tbb	[pc, r3]
 801a8b4:	0b1b081b 	.word	0x0b1b081b
 801a8b8:	1b170e1b 	.word	0x1b170e1b
 801a8bc:	171b1b1b 	.word	0x171b1b1b
 801a8c0:	1117      	.short	0x1117
 801a8c2:	14          	.byte	0x14
 801a8c3:	00          	.byte	0x00

    (void)heap;
    (void)devId;

    return ret;
}
 801a8c4:	bc10      	pop	{r4}
            ret = wc_InitSha_ex(&hash->sha, heap, devId);
 801a8c6:	f7f5 b849 	b.w	800f95c <wc_InitSha_ex>
}
 801a8ca:	bc10      	pop	{r4}
            ret = wc_InitSha256_ex(&hash->sha256, heap, devId);
 801a8cc:	f7f5 bb38 	b.w	800ff40 <wc_InitSha256_ex>
}
 801a8d0:	bc10      	pop	{r4}
            ret = wc_InitSha512_ex(&hash->sha512, heap, devId);
 801a8d2:	f7f7 be4b 	b.w	801256c <wc_InitSha512_ex>
}
 801a8d6:	bc10      	pop	{r4}
            ret = wc_InitSha512_224_ex(&hash->sha512, heap, devId);
 801a8d8:	f7f7 be50 	b.w	801257c <wc_InitSha512_224_ex>
}
 801a8dc:	bc10      	pop	{r4}
            ret = wc_InitSha512_256_ex(&hash->sha512, heap, devId);
 801a8de:	f7f7 be55 	b.w	801258c <wc_InitSha512_256_ex>
        return BAD_FUNC_ARG;
 801a8e2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 801a8e6:	bc10      	pop	{r4}
 801a8e8:	4770      	bx	lr
    int ret = HASH_TYPE_E; /* Default to hash type error */
 801a8ea:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 801a8ee:	e7fa      	b.n	801a8e6 <wc_HashInit_ex+0x46>

0801a8f0 <wc_HashInit>:

int wc_HashInit(wc_HashAlg* hash, enum wc_HashType type)
{
    return wc_HashInit_ex(hash, type, NULL, INVALID_DEVID);
 801a8f0:	f06f 0301 	mvn.w	r3, #1
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	f7ff bfd3 	b.w	801a8a0 <wc_HashInit_ex>

0801a8fa <wc_HashUpdate>:
}

int wc_HashUpdate(wc_HashAlg* hash, enum wc_HashType type, const byte* data,
                  word32 dataSz)
{
 801a8fa:	b410      	push	{r4}
 801a8fc:	460c      	mov	r4, r1
 801a8fe:	4611      	mov	r1, r2
 801a900:	461a      	mov	r2, r3
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL || (data == NULL && dataSz > 0))
 801a902:	b1e8      	cbz	r0, 801a940 <wc_HashUpdate+0x46>
 801a904:	b901      	cbnz	r1, 801a908 <wc_HashUpdate+0xe>
 801a906:	b9db      	cbnz	r3, 801a940 <wc_HashUpdate+0x46>
        return BAD_FUNC_ARG;

    switch (type) {
 801a908:	1ee3      	subs	r3, r4, #3
 801a90a:	2b0e      	cmp	r3, #14
 801a90c:	d818      	bhi.n	801a940 <wc_HashUpdate+0x46>
 801a90e:	e8df f003 	tbb	[pc, r3]
 801a912:	081b      	.short	0x081b
 801a914:	0e1b0b1b 	.word	0x0e1b0b1b
 801a918:	1b1b1b17 	.word	0x1b1b1b17
 801a91c:	1117171b 	.word	0x1117171b
 801a920:	14          	.byte	0x14
 801a921:	00          	.byte	0x00
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
}
 801a922:	bc10      	pop	{r4}
            ret = wc_ShaUpdate(&hash->sha, data, dataSz);
 801a924:	f7f5 b83a 	b.w	800f99c <wc_ShaUpdate>
}
 801a928:	bc10      	pop	{r4}
            ret = wc_Sha256Update(&hash->sha256, data, dataSz);
 801a92a:	f7f5 bb3d 	b.w	800ffa8 <wc_Sha256Update>
}
 801a92e:	bc10      	pop	{r4}
            ret = wc_Sha512Update(&hash->sha512, data, dataSz);
 801a930:	f7f7 be34 	b.w	801259c <wc_Sha512Update>
}
 801a934:	bc10      	pop	{r4}
            ret = wc_Sha512_224Update(&hash->sha512, data, dataSz);
 801a936:	f7f7 beea 	b.w	801270e <wc_Sha512_224Update>
}
 801a93a:	bc10      	pop	{r4}
            ret = wc_Sha512_256Update(&hash->sha512, data, dataSz);
 801a93c:	f7f7 bef0 	b.w	8012720 <wc_Sha512_256Update>
        return BAD_FUNC_ARG;
 801a940:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 801a944:	bc10      	pop	{r4}
 801a946:	4770      	bx	lr
    int ret = HASH_TYPE_E; /* Default to hash type error */
 801a948:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 801a94c:	e7fa      	b.n	801a944 <wc_HashUpdate+0x4a>

0801a94e <wc_HashFinal>:

int wc_HashFinal(wc_HashAlg* hash, enum wc_HashType type, byte* out)
{
 801a94e:	460b      	mov	r3, r1
 801a950:	4611      	mov	r1, r2
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL || out == NULL)
 801a952:	b1b8      	cbz	r0, 801a984 <wc_HashFinal+0x36>
 801a954:	b1b2      	cbz	r2, 801a984 <wc_HashFinal+0x36>
        return BAD_FUNC_ARG;

    switch (type) {
 801a956:	3b03      	subs	r3, #3
 801a958:	2b0e      	cmp	r3, #14
 801a95a:	d813      	bhi.n	801a984 <wc_HashFinal+0x36>
 801a95c:	e8df f003 	tbb	[pc, r3]
 801a960:	0a150815 	.word	0x0a150815
 801a964:	15120c15 	.word	0x15120c15
 801a968:	12151515 	.word	0x12151515
 801a96c:	0e12      	.short	0x0e12
 801a96e:	10          	.byte	0x10
 801a96f:	00          	.byte	0x00
            ret = wc_Md5Final(&hash->md5, out);
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_ShaFinal(&hash->sha, out);
 801a970:	f7f5 b892 	b.w	800fa98 <wc_ShaFinal>
            ret = wc_Sha224Final(&hash->sha224, out);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Final(&hash->sha256, out);
 801a974:	f7f5 bb84 	b.w	8010080 <wc_Sha256Final>
            ret = wc_Sha384Final(&hash->sha384, out);
#endif
            break;
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            ret = wc_Sha512Final(&hash->sha512, out);
 801a978:	f7f7 bde6 	b.w	8012548 <wc_Sha512Final>
            break;
    #ifndef WOLFSSL_NOSHA512_224
        case WC_HASH_TYPE_SHA512_224:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
            ret = wc_Sha512_224Final(&hash->sha512, out);
 801a97c:	f7f7 bdea 	b.w	8012554 <wc_Sha512_224Final>
    #endif
    #ifndef WOLFSSL_NOSHA512_256
        case WC_HASH_TYPE_SHA512_256:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
            ret = wc_Sha512_256Final(&hash->sha512, out);
 801a980:	f7f7 bdee 	b.w	8012560 <wc_Sha512_256Final>
        return BAD_FUNC_ARG;
 801a984:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801a988:	4770      	bx	lr
    int ret = HASH_TYPE_E; /* Default to hash type error */
 801a98a:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
}
 801a98e:	4770      	bx	lr

0801a990 <wc_HashFree>:

int wc_HashFree(wc_HashAlg* hash, enum wc_HashType type)
{
 801a990:	b508      	push	{r3, lr}
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL)
 801a992:	b1e0      	cbz	r0, 801a9ce <wc_HashFree+0x3e>
        return BAD_FUNC_ARG;

    switch (type) {
 801a994:	3903      	subs	r1, #3
 801a996:	290e      	cmp	r1, #14
 801a998:	d819      	bhi.n	801a9ce <wc_HashFree+0x3e>
 801a99a:	e8df f001 	tbb	[pc, r1]
 801a99e:	081b      	.short	0x081b
 801a9a0:	0f1b0c1b 	.word	0x0f1b0c1b
 801a9a4:	1b1b1b18 	.word	0x1b1b1b18
 801a9a8:	1218181b 	.word	0x1218181b
 801a9ac:	15          	.byte	0x15
 801a9ad:	00          	.byte	0x00
            ret = 0;
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            wc_ShaFree(&hash->sha);
 801a9ae:	f7f5 f8eb 	bl	800fb88 <wc_ShaFree>
    #ifndef WOLFSSL_NOSHA512_256
        case WC_HASH_TYPE_SHA512_256:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
            wc_Sha512_256Free(&hash->sha512);
            ret = 0;
 801a9b2:	2000      	movs	r0, #0
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
}
 801a9b4:	bd08      	pop	{r3, pc}
            wc_Sha256Free(&hash->sha256);
 801a9b6:	f7f5 fbed 	bl	8010194 <wc_Sha256Free>
            break;
 801a9ba:	e7fa      	b.n	801a9b2 <wc_HashFree+0x22>
            wc_Sha512Free(&hash->sha512);
 801a9bc:	f7f7 fe60 	bl	8012680 <wc_Sha512Free>
            break;
 801a9c0:	e7f7      	b.n	801a9b2 <wc_HashFree+0x22>
            wc_Sha512_224Free(&hash->sha512);
 801a9c2:	f7f7 fea6 	bl	8012712 <wc_Sha512_224Free>
            break;
 801a9c6:	e7f4      	b.n	801a9b2 <wc_HashFree+0x22>
            wc_Sha512_256Free(&hash->sha512);
 801a9c8:	f7f7 feac 	bl	8012724 <wc_Sha512_256Free>
 801a9cc:	e7f1      	b.n	801a9b2 <wc_HashFree+0x22>
        return BAD_FUNC_ARG;
 801a9ce:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801a9d2:	e7ef      	b.n	801a9b4 <wc_HashFree+0x24>
    int ret = HASH_TYPE_E; /* Default to hash type error */
 801a9d4:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 801a9d8:	e7ec      	b.n	801a9b4 <wc_HashFree+0x24>

0801a9da <wc_ShaHash>:
    }
#endif /* !NO_MD5 */

#if !defined(NO_SHA)
    int wc_ShaHash(const byte* data, word32 len, byte* hash)
    {
 801a9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9de:	4607      	mov	r7, r0
        wc_Sha sha[1];
    #endif
        int devId = INVALID_DEVID;

    #ifdef WOLFSSL_SMALL_STACK
        sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a9e0:	2064      	movs	r0, #100	; 0x64
    {
 801a9e2:	4688      	mov	r8, r1
 801a9e4:	4616      	mov	r6, r2
        sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a9e6:	f002 ffbd 	bl	801d964 <malloc>
        if (sha == NULL)
 801a9ea:	4605      	mov	r5, r0
 801a9ec:	b1d8      	cbz	r0, 801aa26 <wc_ShaHash+0x4c>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha_ex(sha, NULL, devId)) != 0) {
 801a9ee:	f06f 0201 	mvn.w	r2, #1
 801a9f2:	2100      	movs	r1, #0
 801a9f4:	f7f4 ffb2 	bl	800f95c <wc_InitSha_ex>
 801a9f8:	4604      	mov	r4, r0
 801a9fa:	b970      	cbnz	r0, 801aa1a <wc_ShaHash+0x40>
            WOLFSSL_MSG("InitSha failed");
        }
        else {
            if ((ret = wc_ShaUpdate(sha, data, len)) != 0) {
 801a9fc:	4642      	mov	r2, r8
 801a9fe:	4639      	mov	r1, r7
 801aa00:	4628      	mov	r0, r5
 801aa02:	f7f4 ffcb 	bl	800f99c <wc_ShaUpdate>
 801aa06:	4604      	mov	r4, r0
 801aa08:	b920      	cbnz	r0, 801aa14 <wc_ShaHash+0x3a>
                WOLFSSL_MSG("ShaUpdate failed");
            }
            else if ((ret = wc_ShaFinal(sha, hash)) != 0) {
 801aa0a:	4631      	mov	r1, r6
 801aa0c:	4628      	mov	r0, r5
 801aa0e:	f7f5 f843 	bl	800fa98 <wc_ShaFinal>
 801aa12:	4604      	mov	r4, r0
                WOLFSSL_MSG("ShaFinal failed");
            }
            wc_ShaFree(sha);
 801aa14:	4628      	mov	r0, r5
 801aa16:	f7f5 f8b7 	bl	800fb88 <wc_ShaFree>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801aa1a:	4628      	mov	r0, r5
 801aa1c:	f002 ffaa 	bl	801d974 <free>
    #endif

        return ret;
    }
 801aa20:	4620      	mov	r0, r4
 801aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 801aa26:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801aa2a:	e7f9      	b.n	801aa20 <wc_ShaHash+0x46>

0801aa2c <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
 801aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa30:	4607      	mov	r7, r0
        wc_Sha256 sha256[1];
    #endif
        int devId = INVALID_DEVID;

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 801aa32:	2070      	movs	r0, #112	; 0x70
    {
 801aa34:	4688      	mov	r8, r1
 801aa36:	4616      	mov	r6, r2
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 801aa38:	f002 ff94 	bl	801d964 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
 801aa3c:	4605      	mov	r5, r0
 801aa3e:	b1d8      	cbz	r0, 801aa78 <wc_Sha256Hash+0x4c>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 801aa40:	f06f 0201 	mvn.w	r2, #1
 801aa44:	2100      	movs	r1, #0
 801aa46:	f7f5 fa7b 	bl	800ff40 <wc_InitSha256_ex>
 801aa4a:	4604      	mov	r4, r0
 801aa4c:	b970      	cbnz	r0, 801aa6c <wc_Sha256Hash+0x40>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 801aa4e:	4642      	mov	r2, r8
 801aa50:	4639      	mov	r1, r7
 801aa52:	4628      	mov	r0, r5
 801aa54:	f7f5 faa8 	bl	800ffa8 <wc_Sha256Update>
 801aa58:	4604      	mov	r4, r0
 801aa5a:	b920      	cbnz	r0, 801aa66 <wc_Sha256Hash+0x3a>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 801aa5c:	4631      	mov	r1, r6
 801aa5e:	4628      	mov	r0, r5
 801aa60:	f7f5 fb0e 	bl	8010080 <wc_Sha256Final>
 801aa64:	4604      	mov	r4, r0
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
 801aa66:	4628      	mov	r0, r5
 801aa68:	f7f5 fb94 	bl	8010194 <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801aa6c:	4628      	mov	r0, r5
 801aa6e:	f002 ff81 	bl	801d974 <free>
    #endif

        return ret;
    }
 801aa72:	4620      	mov	r0, r4
 801aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 801aa78:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801aa7c:	e7f9      	b.n	801aa72 <wc_Sha256Hash+0x46>

0801aa7e <wc_Sha512Hash>:
#endif /* !defined(WOLFSSL_TI_HASH) */


#if defined(WOLFSSL_SHA512)
    int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
    {
 801aa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa82:	4607      	mov	r7, r0
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801aa84:	20e0      	movs	r0, #224	; 0xe0
    {
 801aa86:	4688      	mov	r8, r1
 801aa88:	4616      	mov	r6, r2
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801aa8a:	f002 ff6b 	bl	801d964 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 801aa8e:	4605      	mov	r5, r0
 801aa90:	b1c0      	cbz	r0, 801aac4 <wc_Sha512Hash+0x46>
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512(sha512)) != 0) {
 801aa92:	f7f7 fdf0 	bl	8012676 <wc_InitSha512>
 801aa96:	4604      	mov	r4, r0
 801aa98:	b970      	cbnz	r0, 801aab8 <wc_Sha512Hash+0x3a>
            WOLFSSL_MSG("InitSha512 failed");
        }
        else {
            if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
 801aa9a:	4642      	mov	r2, r8
 801aa9c:	4639      	mov	r1, r7
 801aa9e:	4628      	mov	r0, r5
 801aaa0:	f7f7 fd7c 	bl	801259c <wc_Sha512Update>
 801aaa4:	4604      	mov	r4, r0
 801aaa6:	b920      	cbnz	r0, 801aab2 <wc_Sha512Hash+0x34>
                WOLFSSL_MSG("Sha512Update failed");
            }
            else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
 801aaa8:	4631      	mov	r1, r6
 801aaaa:	4628      	mov	r0, r5
 801aaac:	f7f7 fd4c 	bl	8012548 <wc_Sha512Final>
 801aab0:	4604      	mov	r4, r0
                WOLFSSL_MSG("Sha512Final failed");
            }
            wc_Sha512Free(sha512);
 801aab2:	4628      	mov	r0, r5
 801aab4:	f7f7 fde4 	bl	8012680 <wc_Sha512Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801aab8:	4628      	mov	r0, r5
 801aaba:	f002 ff5b 	bl	801d974 <free>
    #endif

        return ret;
    }
 801aabe:	4620      	mov	r0, r4
 801aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 801aac4:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801aac8:	e7f9      	b.n	801aabe <wc_Sha512Hash+0x40>

0801aaca <wc_Sha512_224Hash>:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#ifndef WOLFSSL_NOSHA512_224
    int wc_Sha512_224Hash(const byte* data, word32 len, byte* hash)
    {
 801aaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aace:	4607      	mov	r7, r0
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801aad0:	20e0      	movs	r0, #224	; 0xe0
    {
 801aad2:	4688      	mov	r8, r1
 801aad4:	4616      	mov	r6, r2
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801aad6:	f002 ff45 	bl	801d964 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 801aada:	4605      	mov	r5, r0
 801aadc:	b1c0      	cbz	r0, 801ab10 <wc_Sha512_224Hash+0x46>
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512_224(sha512)) != 0) {
 801aade:	f7f7 fe11 	bl	8012704 <wc_InitSha512_224>
 801aae2:	4604      	mov	r4, r0
 801aae4:	b970      	cbnz	r0, 801ab04 <wc_Sha512_224Hash+0x3a>
            WOLFSSL_MSG("wc_InitSha512_224 failed");
        }
        else {
            if ((ret = wc_Sha512_224Update(sha512, data, len)) != 0) {
 801aae6:	4642      	mov	r2, r8
 801aae8:	4639      	mov	r1, r7
 801aaea:	4628      	mov	r0, r5
 801aaec:	f7f7 fe0f 	bl	801270e <wc_Sha512_224Update>
 801aaf0:	4604      	mov	r4, r0
 801aaf2:	b920      	cbnz	r0, 801aafe <wc_Sha512_224Hash+0x34>
                WOLFSSL_MSG("wc_Sha512_224_Update failed");
            }
            else if ((ret = wc_Sha512_224Final(sha512, hash)) != 0) {
 801aaf4:	4631      	mov	r1, r6
 801aaf6:	4628      	mov	r0, r5
 801aaf8:	f7f7 fd2c 	bl	8012554 <wc_Sha512_224Final>
 801aafc:	4604      	mov	r4, r0
                WOLFSSL_MSG("wc_Sha512_224_Final failed");
            }
            wc_Sha512_224Free(sha512);
 801aafe:	4628      	mov	r0, r5
 801ab00:	f7f7 fe07 	bl	8012712 <wc_Sha512_224Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ab04:	4628      	mov	r0, r5
 801ab06:	f002 ff35 	bl	801d974 <free>
    #endif

        return ret;
    }
 801ab0a:	4620      	mov	r0, r4
 801ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 801ab10:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801ab14:	e7f9      	b.n	801ab0a <wc_Sha512_224Hash+0x40>

0801ab16 <wc_Sha512_256Hash>:
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */

#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#ifndef WOLFSSL_NOSHA512_256
    int wc_Sha512_256Hash(const byte* data, word32 len, byte* hash)
    {
 801ab16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab1a:	4607      	mov	r7, r0
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801ab1c:	20e0      	movs	r0, #224	; 0xe0
    {
 801ab1e:	4688      	mov	r8, r1
 801ab20:	4616      	mov	r6, r2
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801ab22:	f002 ff1f 	bl	801d964 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 801ab26:	4605      	mov	r5, r0
 801ab28:	b1c0      	cbz	r0, 801ab5c <wc_Sha512_256Hash+0x46>
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512_256(sha512)) != 0) {
 801ab2a:	f7f7 fdf4 	bl	8012716 <wc_InitSha512_256>
 801ab2e:	4604      	mov	r4, r0
 801ab30:	b970      	cbnz	r0, 801ab50 <wc_Sha512_256Hash+0x3a>
            WOLFSSL_MSG("wc_InitSha512_256 failed");
        }
        else {
            if ((ret = wc_Sha512_256Update(sha512, data, len)) != 0) {
 801ab32:	4642      	mov	r2, r8
 801ab34:	4639      	mov	r1, r7
 801ab36:	4628      	mov	r0, r5
 801ab38:	f7f7 fdf2 	bl	8012720 <wc_Sha512_256Update>
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	b920      	cbnz	r0, 801ab4a <wc_Sha512_256Hash+0x34>
                WOLFSSL_MSG("wc_Sha512_256_Update failed");
            }
            else if ((ret = wc_Sha512_256Final(sha512, hash)) != 0) {
 801ab40:	4631      	mov	r1, r6
 801ab42:	4628      	mov	r0, r5
 801ab44:	f7f7 fd0c 	bl	8012560 <wc_Sha512_256Final>
 801ab48:	4604      	mov	r4, r0
                WOLFSSL_MSG("wc_Sha512_256_Final failed");
            }
            wc_Sha512_256Free(sha512);
 801ab4a:	4628      	mov	r0, r5
 801ab4c:	f7f7 fdea 	bl	8012724 <wc_Sha512_256Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ab50:	4628      	mov	r0, r5
 801ab52:	f002 ff0f 	bl	801d974 <free>
    #endif

        return ret;
    }
 801ab56:	4620      	mov	r0, r4
 801ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 801ab5c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801ab60:	e7f9      	b.n	801ab56 <wc_Sha512_256Hash+0x40>

0801ab62 <wc_Hash>:
{
 801ab62:	b570      	push	{r4, r5, r6, lr}
 801ab64:	4605      	mov	r5, r0
 801ab66:	460c      	mov	r4, r1
 801ab68:	4611      	mov	r1, r2
 801ab6a:	461a      	mov	r2, r3
    dig_size = wc_HashGetDigestSize(hash_type);
 801ab6c:	f7ff fe80 	bl	801a870 <wc_HashGetDigestSize>
    if (dig_size < 0) {
 801ab70:	2800      	cmp	r0, #0
{
 801ab72:	9e04      	ldr	r6, [sp, #16]
    if (dig_size < 0) {
 801ab74:	db10      	blt.n	801ab98 <wc_Hash+0x36>
    if (hash_len < (word32)dig_size) {
 801ab76:	42b0      	cmp	r0, r6
 801ab78:	d828      	bhi.n	801abcc <wc_Hash+0x6a>
    switch(hash_type)
 801ab7a:	1ee8      	subs	r0, r5, #3
 801ab7c:	280e      	cmp	r0, #14
 801ab7e:	d809      	bhi.n	801ab94 <wc_Hash+0x32>
 801ab80:	e8df f000 	tbb	[pc, r0]
 801ab84:	10270b27 	.word	0x10270b27
 801ab88:	27271527 	.word	0x27271527
 801ab8c:	08272727 	.word	0x08272727
 801ab90:	1a08      	.short	0x1a08
 801ab92:	1f          	.byte	0x1f
 801ab93:	00          	.byte	0x00
 801ab94:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 801ab98:	bd70      	pop	{r4, r5, r6, pc}
            ret = wc_ShaHash(data, data_len, hash);
 801ab9a:	4620      	mov	r0, r4
}
 801ab9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_ShaHash(data, data_len, hash);
 801aba0:	f7ff bf1b 	b.w	801a9da <wc_ShaHash>
            ret = wc_Sha256Hash(data, data_len, hash);
 801aba4:	4620      	mov	r0, r4
}
 801aba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha256Hash(data, data_len, hash);
 801abaa:	f7ff bf3f 	b.w	801aa2c <wc_Sha256Hash>
            ret = wc_Sha512Hash(data, data_len, hash);
 801abae:	4620      	mov	r0, r4
}
 801abb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512Hash(data, data_len, hash);
 801abb4:	f7ff bf63 	b.w	801aa7e <wc_Sha512Hash>
            ret = wc_Sha512_224Hash(data, data_len, hash);
 801abb8:	4620      	mov	r0, r4
}
 801abba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512_224Hash(data, data_len, hash);
 801abbe:	f7ff bf84 	b.w	801aaca <wc_Sha512_224Hash>
            ret = wc_Sha512_256Hash(data, data_len, hash);
 801abc2:	4620      	mov	r0, r4
}
 801abc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512_256Hash(data, data_len, hash);
 801abc8:	f7ff bfa5 	b.w	801ab16 <wc_Sha512_256Hash>
        return BUFFER_E;
 801abcc:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801abd0:	e7e2      	b.n	801ab98 <wc_Hash+0x36>
    int ret = HASH_TYPE_E; /* Default to hash type error */
 801abd2:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 801abd6:	e7df      	b.n	801ab98 <wc_Hash+0x36>

0801abd8 <fp_cond_swap_ct_ex>:
}

#endif /* WOLFSSL_KEY_GEN || HAVE_ECC */

static int fp_cond_swap_ct_ex(mp_int* a, mp_int* b, int c, int m, mp_int* t)
{
 801abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    mp_digit mask = (mp_digit)0 - m;

    t->used = (a->used ^ b->used) & mask;
 801abda:	680d      	ldr	r5, [r1, #0]
 801abdc:	6804      	ldr	r4, [r0, #0]
{
 801abde:	9e05      	ldr	r6, [sp, #20]
    t->used = (a->used ^ b->used) & mask;
 801abe0:	406c      	eors	r4, r5
    mp_digit mask = (mp_digit)0 - m;
 801abe2:	425b      	negs	r3, r3
    t->used = (a->used ^ b->used) & mask;
 801abe4:	401c      	ands	r4, r3
 801abe6:	6034      	str	r4, [r6, #0]
    for (i = 0; i < c; i++) {
 801abe8:	2501      	movs	r5, #1
 801abea:	f105 0c01 	add.w	ip, r5, #1
 801abee:	3d01      	subs	r5, #1
 801abf0:	42aa      	cmp	r2, r5
 801abf2:	dc13      	bgt.n	801ac1c <fp_cond_swap_ct_ex+0x44>
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
    }
    a->used ^= t->used;
 801abf4:	6803      	ldr	r3, [r0, #0]
 801abf6:	4063      	eors	r3, r4
 801abf8:	f106 0408 	add.w	r4, r6, #8
 801abfc:	f840 3b08 	str.w	r3, [r0], #8
    for (i = 0; i < c; i++) {
 801ac00:	46a4      	mov	ip, r4
 801ac02:	2300      	movs	r3, #0
 801ac04:	4293      	cmp	r3, r2
 801ac06:	db13      	blt.n	801ac30 <fp_cond_swap_ct_ex+0x58>
        a->dp[i] ^= t->dp[i];
    }
    b->used ^= t->used;
 801ac08:	680b      	ldr	r3, [r1, #0]
 801ac0a:	6830      	ldr	r0, [r6, #0]
 801ac0c:	4043      	eors	r3, r0
 801ac0e:	f841 3b08 	str.w	r3, [r1], #8
    for (i = 0; i < c; i++) {
 801ac12:	2300      	movs	r3, #0
 801ac14:	4293      	cmp	r3, r2
 801ac16:	db13      	blt.n	801ac40 <fp_cond_swap_ct_ex+0x68>
        b->dp[i] ^= t->dp[i];
    }

    return FP_OKAY;
}
 801ac18:	2000      	movs	r0, #0
 801ac1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 801ac1c:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
 801ac20:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 801ac24:	407d      	eors	r5, r7
 801ac26:	401d      	ands	r5, r3
 801ac28:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 801ac2c:	4665      	mov	r5, ip
 801ac2e:	e7dc      	b.n	801abea <fp_cond_swap_ct_ex+0x12>
        a->dp[i] ^= t->dp[i];
 801ac30:	f85c 5b04 	ldr.w	r5, [ip], #4
 801ac34:	6807      	ldr	r7, [r0, #0]
 801ac36:	407d      	eors	r5, r7
 801ac38:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < c; i++) {
 801ac3c:	3301      	adds	r3, #1
 801ac3e:	e7e1      	b.n	801ac04 <fp_cond_swap_ct_ex+0x2c>
        b->dp[i] ^= t->dp[i];
 801ac40:	6808      	ldr	r0, [r1, #0]
 801ac42:	f854 5b04 	ldr.w	r5, [r4], #4
 801ac46:	4068      	eors	r0, r5
 801ac48:	f841 0b04 	str.w	r0, [r1], #4
    for (i = 0; i < c; i++) {
 801ac4c:	3301      	adds	r3, #1
 801ac4e:	e7e1      	b.n	801ac14 <fp_cond_swap_ct_ex+0x3c>

0801ac50 <fp_sqr_comba8>:



#ifdef TFM_SQR8
int fp_sqr_comba8(fp_int *A, fp_int *B)
{
 801ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac54:	b089      	sub	sp, #36	; 0x24
 801ac56:	4607      	mov	r7, r0
#else
   fp_digit *b;
#endif

#ifdef WOLFSSL_SMALL_STACK
   b = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ac58:	2040      	movs	r0, #64	; 0x40
{
 801ac5a:	9102      	str	r1, [sp, #8]
   b = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ac5c:	f002 fe82 	bl	801d964 <malloc>
   if (b == NULL)
 801ac60:	4606      	mov	r6, r0
 801ac62:	2800      	cmp	r0, #0
 801ac64:	f000 821d 	beq.w	801b0a2 <fp_sqr_comba8+0x452>

   /* clear carries */
   CLEAR_CARRY;

   /* output 0 */
   SQRADD(a[0],a[0]);
 801ac68:	68b8      	ldr	r0, [r7, #8]
   COMBA_STORE(b[0]);

   /* output 1 */
   CARRY_FORWARD;
   SQRADD2(a[0], a[1]); 
 801ac6a:	68f9      	ldr	r1, [r7, #12]
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
   COMBA_STORE(b[3]);

   /* output 4 */
   CARRY_FORWARD;
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801ac6c:	f8d7 8018 	ldr.w	r8, [r7, #24]
   SQRADD2(a[0], a[1]); 
 801ac70:	fba0 c501 	umull	ip, r5, r0, r1
   SQRADD(a[0],a[0]);
 801ac74:	fba0 3400 	umull	r3, r4, r0, r0
   SQRADD2(a[0], a[1]); 
 801ac78:	eb14 040c 	adds.w	r4, r4, ip
 801ac7c:	f145 0200 	adc.w	r2, r5, #0
 801ac80:	eb14 040c 	adds.w	r4, r4, ip
 801ac84:	6074      	str	r4, [r6, #4]
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 801ac86:	693c      	ldr	r4, [r7, #16]
   SQRADD(a[0],a[0]);
 801ac88:	6033      	str	r3, [r6, #0]
   SQRADD2(a[0], a[1]); 
 801ac8a:	f145 0500 	adc.w	r5, r5, #0
   SQRADD(a[0],a[0]);
 801ac8e:	2300      	movs	r3, #0
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 801ac90:	fba0 ec04 	umull	lr, ip, r0, r4
   SQRADD2(a[0], a[1]); 
 801ac94:	1952      	adds	r2, r2, r5
 801ac96:	eb43 0503 	adc.w	r5, r3, r3
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 801ac9a:	eb12 020e 	adds.w	r2, r2, lr
 801ac9e:	9400      	str	r4, [sp, #0]
 801aca0:	f14c 0400 	adc.w	r4, ip, #0
 801aca4:	192d      	adds	r5, r5, r4
 801aca6:	eb43 0403 	adc.w	r4, r3, r3
 801acaa:	eb12 020e 	adds.w	r2, r2, lr
 801acae:	f14c 0c00 	adc.w	ip, ip, #0
 801acb2:	eb1c 0c05 	adds.w	ip, ip, r5
 801acb6:	461d      	mov	r5, r3
 801acb8:	fbe1 2501 	umlal	r2, r5, r1, r1
 801acbc:	60b2      	str	r2, [r6, #8]
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 801acbe:	697a      	ldr	r2, [r7, #20]
 801acc0:	9201      	str	r2, [sp, #4]
 801acc2:	fba0 a902 	umull	sl, r9, r0, r2
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 801acc6:	f144 0400 	adc.w	r4, r4, #0
 801acca:	eb1c 0c05 	adds.w	ip, ip, r5
 801acce:	eb43 0503 	adc.w	r5, r3, r3
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 801acd2:	eb1c 0c0a 	adds.w	ip, ip, sl
 801acd6:	f149 0200 	adc.w	r2, r9, #0
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 801acda:	eb04 0e05 	add.w	lr, r4, r5
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 801acde:	eb1e 0e02 	adds.w	lr, lr, r2
 801ace2:	eb43 0503 	adc.w	r5, r3, r3
 801ace6:	9a00      	ldr	r2, [sp, #0]
 801ace8:	eb1c 0c0a 	adds.w	ip, ip, sl
 801acec:	f149 0900 	adc.w	r9, r9, #0
 801acf0:	eb1e 0e09 	adds.w	lr, lr, r9
 801acf4:	fba1 a902 	umull	sl, r9, r1, r2
 801acf8:	f145 0500 	adc.w	r5, r5, #0
 801acfc:	eb1c 0c0a 	adds.w	ip, ip, sl
 801ad00:	f149 0200 	adc.w	r2, r9, #0
 801ad04:	eb1e 0e02 	adds.w	lr, lr, r2
 801ad08:	f145 0500 	adc.w	r5, r5, #0
 801ad0c:	eb1c 0c0a 	adds.w	ip, ip, sl
 801ad10:	f149 0200 	adc.w	r2, r9, #0
 801ad14:	eb12 020e 	adds.w	r2, r2, lr
 801ad18:	f8c6 c00c 	str.w	ip, [r6, #12]
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801ad1c:	fba0 ec08 	umull	lr, ip, r0, r8
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 801ad20:	eb43 0403 	adc.w	r4, r3, r3
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801ad24:	eb12 020e 	adds.w	r2, r2, lr
 801ad28:	f14c 0900 	adc.w	r9, ip, #0
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 801ad2c:	442c      	add	r4, r5
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801ad2e:	eb14 0409 	adds.w	r4, r4, r9
 801ad32:	eb43 0b03 	adc.w	fp, r3, r3
 801ad36:	9d01      	ldr	r5, [sp, #4]
   COMBA_STORE(b[4]);

   /* output 5 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801ad38:	f8d7 901c 	ldr.w	r9, [r7, #28]
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801ad3c:	eb12 020e 	adds.w	r2, r2, lr
 801ad40:	f14c 0c00 	adc.w	ip, ip, #0
 801ad44:	fba1 e505 	umull	lr, r5, r1, r5
 801ad48:	eb14 040c 	adds.w	r4, r4, ip
 801ad4c:	f14b 0b00 	adc.w	fp, fp, #0
 801ad50:	eb12 020e 	adds.w	r2, r2, lr
 801ad54:	f145 0c00 	adc.w	ip, r5, #0
 801ad58:	eb14 040c 	adds.w	r4, r4, ip
 801ad5c:	f14b 0b00 	adc.w	fp, fp, #0
 801ad60:	eb12 020e 	adds.w	r2, r2, lr
 801ad64:	f8dd c000 	ldr.w	ip, [sp]
 801ad68:	f145 0500 	adc.w	r5, r5, #0
 801ad6c:	192c      	adds	r4, r5, r4
 801ad6e:	461d      	mov	r5, r3
 801ad70:	fbec 250c 	umlal	r2, r5, ip, ip
 801ad74:	f14b 0b00 	adc.w	fp, fp, #0
 801ad78:	6132      	str	r2, [r6, #16]
 801ad7a:	1964      	adds	r4, r4, r5
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801ad7c:	fba0 2e09 	umull	r2, lr, r0, r9
 801ad80:	461d      	mov	r5, r3
 801ad82:	fbe1 2508 	umlal	r2, r5, r1, r8
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801ad86:	9403      	str	r4, [sp, #12]
 801ad88:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801ad8c:	e9dd a400 	ldrd	sl, r4, [sp]
 801ad90:	eb1e 0e05 	adds.w	lr, lr, r5
 801ad94:	eb43 0503 	adc.w	r5, r3, r3
 801ad98:	9504      	str	r5, [sp, #16]
 801ad9a:	461d      	mov	r5, r3
 801ad9c:	fbea 2504 	umlal	r2, r5, sl, r4
 801ada0:	eb1e 0e05 	adds.w	lr, lr, r5
 801ada4:	eb43 0403 	adc.w	r4, r3, r3
 801ada8:	9405      	str	r4, [sp, #20]
 801adaa:	9c03      	ldr	r4, [sp, #12]
 801adac:	1892      	adds	r2, r2, r2
 801adae:	eb43 0503 	adc.w	r5, r3, r3
 801adb2:	1914      	adds	r4, r2, r4
 801adb4:	f145 0500 	adc.w	r5, r5, #0
 801adb8:	6174      	str	r4, [r6, #20]
 801adba:	eb1e 0e0e 	adds.w	lr, lr, lr
   COMBA_STORE(b[5]);

   /* output 6 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801adbe:	6a3c      	ldr	r4, [r7, #32]
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801adc0:	eb43 0a03 	adc.w	sl, r3, r3
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801adc4:	44dc      	add	ip, fp
 801adc6:	eb1e 0e05 	adds.w	lr, lr, r5
 801adca:	f14a 0a00 	adc.w	sl, sl, #0
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801adce:	461a      	mov	r2, r3
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801add0:	eb1c 0c0e 	adds.w	ip, ip, lr
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801add4:	fba0 5e04 	umull	r5, lr, r0, r4
 801add8:	fbe1 5209 	umlal	r5, r2, r1, r9
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801addc:	f14a 0a00 	adc.w	sl, sl, #0
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801ade0:	eb1e 0e02 	adds.w	lr, lr, r2
 801ade4:	eb43 0203 	adc.w	r2, r3, r3
 801ade8:	f8dd b000 	ldr.w	fp, [sp]
 801adec:	9206      	str	r2, [sp, #24]
 801adee:	461a      	mov	r2, r3
 801adf0:	fbeb 5208 	umlal	r5, r2, fp, r8
 801adf4:	eb1e 0e02 	adds.w	lr, lr, r2
 801adf8:	eb43 0203 	adc.w	r2, r3, r3
 801adfc:	196d      	adds	r5, r5, r5
 801adfe:	9207      	str	r2, [sp, #28]
 801ae00:	eb43 0203 	adc.w	r2, r3, r3
 801ae04:	eb15 0c0c 	adds.w	ip, r5, ip
 801ae08:	f142 0200 	adc.w	r2, r2, #0
 801ae0c:	eb1e 0e0e 	adds.w	lr, lr, lr
 801ae10:	eb43 0503 	adc.w	r5, r3, r3
 801ae14:	eb1e 0e02 	adds.w	lr, lr, r2
 801ae18:	f145 0b00 	adc.w	fp, r5, #0
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 801ae1c:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
 801ae20:	442a      	add	r2, r5
 801ae22:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801ae26:	eb1a 020e 	adds.w	r2, sl, lr
 801ae2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ae2e:	469a      	mov	sl, r3
 801ae30:	fbee ca0e 	umlal	ip, sl, lr, lr
 801ae34:	f14b 0500 	adc.w	r5, fp, #0
 801ae38:	eb12 0a0a 	adds.w	sl, r2, sl
 801ae3c:	eb43 0203 	adc.w	r2, r3, r3
 801ae40:	9204      	str	r2, [sp, #16]
 801ae42:	f8c6 c018 	str.w	ip, [r6, #24]
   COMBA_STORE(b[6]);

   /* output 7 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801ae46:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 801ae48:	f8dd e000 	ldr.w	lr, [sp]
 801ae4c:	fba0 2c07 	umull	r2, ip, r0, r7
 801ae50:	4618      	mov	r0, r3
 801ae52:	fbe1 2004 	umlal	r2, r0, r1, r4
 801ae56:	eb1c 0c00 	adds.w	ip, ip, r0
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	fbee 2009 	umlal	r2, r0, lr, r9
 801ae60:	eb43 0b03 	adc.w	fp, r3, r3
 801ae64:	eb1c 0000 	adds.w	r0, ip, r0
 801ae68:	f14b 0c00 	adc.w	ip, fp, #0
 801ae6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ae70:	f8cd c00c 	str.w	ip, [sp, #12]
 801ae74:	469c      	mov	ip, r3
 801ae76:	fbee 2c08 	umlal	r2, ip, lr, r8
 801ae7a:	eb10 000c 	adds.w	r0, r0, ip
 801ae7e:	eb43 0e03 	adc.w	lr, r3, r3
 801ae82:	1892      	adds	r2, r2, r2
 801ae84:	eb43 0c03 	adc.w	ip, r3, r3
 801ae88:	eb12 020a 	adds.w	r2, r2, sl
 801ae8c:	f14c 0c00 	adc.w	ip, ip, #0
 801ae90:	1800      	adds	r0, r0, r0
 801ae92:	eb43 0b03 	adc.w	fp, r3, r3
 801ae96:	eb10 000c 	adds.w	r0, r0, ip
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801ae9a:	e9dd ca06 	ldrd	ip, sl, [sp, #24]
 801ae9e:	44d4      	add	ip, sl
 801aea0:	eb05 0c4c 	add.w	ip, r5, ip, lsl #1
 801aea4:	9d04      	ldr	r5, [sp, #16]
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801aea6:	61f2      	str	r2, [r6, #28]
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801aea8:	44ac      	add	ip, r5
 801aeaa:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801aeae:	eb1c 0000 	adds.w	r0, ip, r0
   COMBA_STORE(b[7]);

   /* output 8 */
   CARRY_FORWARD;
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801aeb2:	f8dd c000 	ldr.w	ip, [sp]
 801aeb6:	fba1 1207 	umull	r1, r2, r1, r7
 801aeba:	461d      	mov	r5, r3
 801aebc:	fbec 1504 	umlal	r1, r5, ip, r4
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801aec0:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801aec4:	1952      	adds	r2, r2, r5
 801aec6:	eb43 0503 	adc.w	r5, r3, r3
 801aeca:	f8dd c004 	ldr.w	ip, [sp, #4]
 801aece:	9504      	str	r5, [sp, #16]
 801aed0:	461d      	mov	r5, r3
 801aed2:	fbec 1509 	umlal	r1, r5, ip, r9
 801aed6:	1952      	adds	r2, r2, r5
 801aed8:	eb43 0a03 	adc.w	sl, r3, r3
 801aedc:	1849      	adds	r1, r1, r1
 801aede:	eb43 0503 	adc.w	r5, r3, r3
 801aee2:	1808      	adds	r0, r1, r0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801aee4:	9903      	ldr	r1, [sp, #12]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801aee6:	f145 0500 	adc.w	r5, r5, #0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801aeea:	448e      	add	lr, r1
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801aeec:	1892      	adds	r2, r2, r2
 801aeee:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801aef2:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 801aef6:	1952      	adds	r2, r2, r5
 801aef8:	f14c 0c00 	adc.w	ip, ip, #0
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801aefc:	eb1b 0202 	adds.w	r2, fp, r2
 801af00:	469b      	mov	fp, r3
 801af02:	fbe8 0b08 	umlal	r0, fp, r8, r8
 801af06:	f14c 0500 	adc.w	r5, ip, #0
 801af0a:	eb12 0b0b 	adds.w	fp, r2, fp
 801af0e:	eb43 0203 	adc.w	r2, r3, r3
 801af12:	9203      	str	r2, [sp, #12]
   COMBA_STORE(b[8]);

   /* output 9 */
   CARRY_FORWARD;
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801af14:	9a00      	ldr	r2, [sp, #0]
 801af16:	f8dd c004 	ldr.w	ip, [sp, #4]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801af1a:	6230      	str	r0, [r6, #32]
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801af1c:	4619      	mov	r1, r3
 801af1e:	fba2 2007 	umull	r2, r0, r2, r7
 801af22:	fbec 2104 	umlal	r2, r1, ip, r4
 801af26:	1840      	adds	r0, r0, r1
 801af28:	4619      	mov	r1, r3
 801af2a:	fbe8 2109 	umlal	r2, r1, r8, r9
 801af2e:	eb43 0c03 	adc.w	ip, r3, r3
 801af32:	1840      	adds	r0, r0, r1
 801af34:	eb43 0e03 	adc.w	lr, r3, r3
 801af38:	1892      	adds	r2, r2, r2
 801af3a:	eb43 0103 	adc.w	r1, r3, r3
 801af3e:	eb12 020b 	adds.w	r2, r2, fp
 801af42:	f141 0100 	adc.w	r1, r1, #0
 801af46:	1800      	adds	r0, r0, r0
 801af48:	eb43 0b03 	adc.w	fp, r3, r3
 801af4c:	1840      	adds	r0, r0, r1
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801af4e:	9904      	ldr	r1, [sp, #16]
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801af50:	6272      	str	r2, [r6, #36]	; 0x24
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801af52:	448a      	add	sl, r1
 801af54:	9903      	ldr	r1, [sp, #12]
   COMBA_STORE(b[9]);

   /* output 10 */
   CARRY_FORWARD;
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801af56:	9a01      	ldr	r2, [sp, #4]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801af58:	eb05 0a4a 	add.w	sl, r5, sl, lsl #1
 801af5c:	448a      	add	sl, r1
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801af5e:	fba2 5207 	umull	r5, r2, r2, r7
 801af62:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801af66:	eb1a 0000 	adds.w	r0, sl, r0
 801af6a:	44f4      	add	ip, lr
 801af6c:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801af70:	1940      	adds	r0, r0, r5
 801af72:	f142 0100 	adc.w	r1, r2, #0
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801af76:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801af7a:	eb1b 0b01 	adds.w	fp, fp, r1
 801af7e:	eb43 0c03 	adc.w	ip, r3, r3
 801af82:	1828      	adds	r0, r5, r0
 801af84:	f142 0200 	adc.w	r2, r2, #0
 801af88:	eb12 0b0b 	adds.w	fp, r2, fp
 801af8c:	fba8 5204 	umull	r5, r2, r8, r4
 801af90:	f14c 0c00 	adc.w	ip, ip, #0
 801af94:	1828      	adds	r0, r5, r0
 801af96:	f142 0100 	adc.w	r1, r2, #0
 801af9a:	eb11 0b0b 	adds.w	fp, r1, fp
 801af9e:	f14c 0c00 	adc.w	ip, ip, #0
 801afa2:	182d      	adds	r5, r5, r0
 801afa4:	4619      	mov	r1, r3
 801afa6:	f142 0200 	adc.w	r2, r2, #0
 801afaa:	fbe9 5109 	umlal	r5, r1, r9, r9
 801afae:	eb12 020b 	adds.w	r2, r2, fp
 801afb2:	f14c 0000 	adc.w	r0, ip, #0
 801afb6:	1852      	adds	r2, r2, r1
   COMBA_STORE(b[10]);

   /* output 11 */
   CARRY_FORWARD;
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801afb8:	fba8 c107 	umull	ip, r1, r8, r7
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801afbc:	eb43 0e03 	adc.w	lr, r3, r3
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801afc0:	eb12 020c 	adds.w	r2, r2, ip
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801afc4:	4470      	add	r0, lr
 801afc6:	62b5      	str	r5, [r6, #40]	; 0x28
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801afc8:	f141 0500 	adc.w	r5, r1, #0
 801afcc:	1940      	adds	r0, r0, r5
 801afce:	eb43 0503 	adc.w	r5, r3, r3
 801afd2:	eb1c 0202 	adds.w	r2, ip, r2
 801afd6:	f141 0100 	adc.w	r1, r1, #0
 801afda:	1809      	adds	r1, r1, r0
 801afdc:	fba9 e004 	umull	lr, r0, r9, r4
 801afe0:	f145 0500 	adc.w	r5, r5, #0
 801afe4:	eb1e 0202 	adds.w	r2, lr, r2
 801afe8:	f140 0c00 	adc.w	ip, r0, #0
 801afec:	eb1c 0c01 	adds.w	ip, ip, r1
 801aff0:	f145 0500 	adc.w	r5, r5, #0
 801aff4:	eb1e 0202 	adds.w	r2, lr, r2
 801aff8:	f140 0100 	adc.w	r1, r0, #0
 801affc:	eb11 010c 	adds.w	r1, r1, ip
 801b000:	62f2      	str	r2, [r6, #44]	; 0x2c
   COMBA_STORE(b[11]);

   /* output 12 */
   CARRY_FORWARD;
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 801b002:	fba9 0207 	umull	r0, r2, r9, r7
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801b006:	eb43 0e03 	adc.w	lr, r3, r3
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 801b00a:	1841      	adds	r1, r0, r1
 801b00c:	f142 0c00 	adc.w	ip, r2, #0
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801b010:	4475      	add	r5, lr
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 801b012:	eb15 050c 	adds.w	r5, r5, ip
 801b016:	eb43 0c03 	adc.w	ip, r3, r3
 801b01a:	1841      	adds	r1, r0, r1
 801b01c:	f142 0200 	adc.w	r2, r2, #0
 801b020:	1952      	adds	r2, r2, r5
 801b022:	461d      	mov	r5, r3
 801b024:	fbe4 1504 	umlal	r1, r5, r4, r4
 801b028:	f14c 0000 	adc.w	r0, ip, #0
 801b02c:	6331      	str	r1, [r6, #48]	; 0x30
 801b02e:	1952      	adds	r2, r2, r5
   COMBA_STORE(b[12]);

   /* output 13 */
   CARRY_FORWARD;
   SQRADD2(a[6], a[7]); 
 801b030:	fba4 4107 	umull	r4, r1, r4, r7
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 801b034:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADD2(a[6], a[7]); 
 801b038:	1912      	adds	r2, r2, r4
 801b03a:	f141 0500 	adc.w	r5, r1, #0
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 801b03e:	4460      	add	r0, ip
   SQRADD2(a[6], a[7]); 
 801b040:	1940      	adds	r0, r0, r5
 801b042:	eb43 0503 	adc.w	r5, r3, r3
 801b046:	18a4      	adds	r4, r4, r2
 801b048:	f141 0200 	adc.w	r2, r1, #0
 801b04c:	1812      	adds	r2, r2, r0
   COMBA_STORE(b[13]);

   /* output 14 */
   CARRY_FORWARD;
   SQRADD(a[7], a[7]); 
 801b04e:	4619      	mov	r1, r3
 801b050:	fbe7 2107 	umlal	r2, r1, r7, r7
 801b054:	eb45 0101 	adc.w	r1, r5, r1
 801b058:	63f1      	str	r1, [r6, #60]	; 0x3c
   COMBA_STORE(b[14]);
   COMBA_STORE2(b[15]);
   COMBA_FINI;

   B->used = 16;
 801b05a:	9902      	ldr	r1, [sp, #8]
   SQRADD(a[7], a[7]); 
 801b05c:	63b2      	str	r2, [r6, #56]	; 0x38
   B->sign = FP_ZPOS;
 801b05e:	604b      	str	r3, [r1, #4]
   XMEMCPY(B->dp, b, 16 * sizeof(fp_digit));
 801b060:	9b02      	ldr	r3, [sp, #8]
   SQRADD2(a[6], a[7]); 
 801b062:	6374      	str	r4, [r6, #52]	; 0x34
   B->used = 16;
 801b064:	2210      	movs	r2, #16
 801b066:	600a      	str	r2, [r1, #0]
   XMEMCPY(B->dp, b, 16 * sizeof(fp_digit));
 801b068:	f103 0008 	add.w	r0, r3, #8
 801b06c:	2240      	movs	r2, #64	; 0x40
 801b06e:	4631      	mov	r1, r6
 801b070:	f002 fc98 	bl	801d9a4 <memcpy>
   fp_clamp(B);
 801b074:	9b02      	ldr	r3, [sp, #8]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	b13b      	cbz	r3, 801b08a <fp_sqr_comba8+0x43a>
 801b07a:	9902      	ldr	r1, [sp, #8]
 801b07c:	1e5a      	subs	r2, r3, #1
 801b07e:	3301      	adds	r3, #1
 801b080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b084:	b153      	cbz	r3, 801b09c <fp_sqr_comba8+0x44c>
 801b086:	9b02      	ldr	r3, [sp, #8]
 801b088:	685b      	ldr	r3, [r3, #4]
 801b08a:	9a02      	ldr	r2, [sp, #8]

#ifdef WOLFSSL_SMALL_STACK
   XFREE(b, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801b08c:	4630      	mov	r0, r6
   fp_clamp(B);
 801b08e:	6053      	str	r3, [r2, #4]
   XFREE(b, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801b090:	f002 fc70 	bl	801d974 <free>
#endif
   return FP_OKAY;
 801b094:	2000      	movs	r0, #0
}
 801b096:	b009      	add	sp, #36	; 0x24
 801b098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   fp_clamp(B);
 801b09c:	9b02      	ldr	r3, [sp, #8]
 801b09e:	601a      	str	r2, [r3, #0]
 801b0a0:	e7e8      	b.n	801b074 <fp_sqr_comba8+0x424>
      return FP_MEM;
 801b0a2:	f06f 0001 	mvn.w	r0, #1
 801b0a6:	e7f6      	b.n	801b096 <fp_sqr_comba8+0x446>

0801b0a8 <fp_mul_comba8>:



#ifdef TFM_MUL8
int fp_mul_comba8(fp_int *A, fp_int *B, fp_int *C)
{
 801b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0ac:	b085      	sub	sp, #20
 801b0ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
#else
   fp_digit *at;
#endif

#ifdef WOLFSSL_SMALL_STACK
   at = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801b0b2:	2040      	movs	r0, #64	; 0x40
{
 801b0b4:	4617      	mov	r7, r2
   at = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801b0b6:	f002 fc55 	bl	801d964 <malloc>
   if (at == NULL)
 801b0ba:	4680      	mov	r8, r0
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	f000 824f 	beq.w	801b560 <fp_mul_comba8+0x4b8>
       return FP_MEM;
#endif

   XMEMCPY(at, A->dp, 8 * sizeof(fp_digit));
 801b0c2:	9b01      	ldr	r3, [sp, #4]
 801b0c4:	2220      	movs	r2, #32
 801b0c6:	f103 0108 	add.w	r1, r3, #8
 801b0ca:	f002 fc6b 	bl	801d9a4 <memcpy>
   XMEMCPY(at+8, B->dp, 8 * sizeof(fp_digit));
 801b0ce:	9b02      	ldr	r3, [sp, #8]
 801b0d0:	2220      	movs	r2, #32
 801b0d2:	f103 0108 	add.w	r1, r3, #8
 801b0d6:	eb08 0002 	add.w	r0, r8, r2
 801b0da:	f002 fc63 	bl	801d9a4 <memcpy>
   COMBA_START;

   COMBA_CLEAR;
   /* 0 */
   MULADD(at[0], at[8]); 
 801b0de:	f8d8 4000 	ldr.w	r4, [r8]
 801b0e2:	f8d8 e020 	ldr.w	lr, [r8, #32]
   COMBA_STORE(C->dp[0]);
   /* 1 */
   COMBA_FORWARD;
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 801b0e6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[1]);
   /* 2 */
   COMBA_FORWARD;
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b0ea:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[2]);
   /* 3 */
   COMBA_FORWARD;
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801b0ee:	f8d8 9008 	ldr.w	r9, [r8, #8]
   COMBA_FORWARD;
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
   COMBA_STORE(C->dp[4]);
   /* 5 */
   COMBA_FORWARD;
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b0f2:	f8d8 a02c 	ldr.w	sl, [r8, #44]	; 0x2c
   MULADD(at[0], at[8]); 
 801b0f6:	fba4 320e 	umull	r3, r2, r4, lr
 801b0fa:	60bb      	str	r3, [r7, #8]
 801b0fc:	2300      	movs	r3, #0
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 801b0fe:	4619      	mov	r1, r3
 801b100:	fbe4 2100 	umlal	r2, r1, r4, r0
 801b104:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b108:	9000      	str	r0, [sp, #0]
 801b10a:	9d00      	ldr	r5, [sp, #0]
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b10c:	f8dd c000 	ldr.w	ip, [sp]
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 801b110:	4618      	mov	r0, r3
 801b112:	fbee 2005 	umlal	r2, r0, lr, r5
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b116:	f8d8 5028 	ldr.w	r5, [r8, #40]	; 0x28
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 801b11a:	60fa      	str	r2, [r7, #12]
 801b11c:	1809      	adds	r1, r1, r0
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b11e:	461a      	mov	r2, r3
 801b120:	fbe4 1205 	umlal	r1, r2, r4, r5
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 801b124:	eb43 0003 	adc.w	r0, r3, r3
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b128:	461d      	mov	r5, r3
 801b12a:	fbe6 150c 	umlal	r1, r5, r6, ip
 801b12e:	1882      	adds	r2, r0, r2
 801b130:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b134:	eb43 0003 	adc.w	r0, r3, r3
 801b138:	1952      	adds	r2, r2, r5
 801b13a:	461d      	mov	r5, r3
 801b13c:	fbee 1506 	umlal	r1, r5, lr, r6
 801b140:	6139      	str	r1, [r7, #16]
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801b142:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801b146:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b14a:	f140 0000 	adc.w	r0, r0, #0
 801b14e:	1952      	adds	r2, r2, r5
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801b150:	461d      	mov	r5, r3
 801b152:	fbe4 2501 	umlal	r2, r5, r4, r1
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801b156:	f140 0100 	adc.w	r1, r0, #0
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801b15a:	1949      	adds	r1, r1, r5
 801b15c:	461d      	mov	r5, r3
 801b15e:	fbec 2506 	umlal	r2, r5, ip, r6
 801b162:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 801b166:	eb43 0003 	adc.w	r0, r3, r3
 801b16a:	1949      	adds	r1, r1, r5
 801b16c:	461d      	mov	r5, r3
 801b16e:	fbe6 2509 	umlal	r2, r5, r6, r9
 801b172:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801b176:	f140 0000 	adc.w	r0, r0, #0
 801b17a:	1949      	adds	r1, r1, r5
 801b17c:	461d      	mov	r5, r3
 801b17e:	fbee 2506 	umlal	r2, r5, lr, r6
 801b182:	f140 0000 	adc.w	r0, r0, #0
 801b186:	1949      	adds	r1, r1, r5
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801b188:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 801b18c:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801b190:	617a      	str	r2, [r7, #20]
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801b192:	461a      	mov	r2, r3
 801b194:	fbe4 1205 	umlal	r1, r2, r4, r5
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801b198:	f140 0000 	adc.w	r0, r0, #0
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801b19c:	461d      	mov	r5, r3
 801b19e:	fbec 1506 	umlal	r1, r5, ip, r6
 801b1a2:	1880      	adds	r0, r0, r2
 801b1a4:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 801b1a8:	eb43 0203 	adc.w	r2, r3, r3
 801b1ac:	1940      	adds	r0, r0, r5
 801b1ae:	461d      	mov	r5, r3
 801b1b0:	fbe6 1509 	umlal	r1, r5, r6, r9
 801b1b4:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 801b1b8:	f8d8 900c 	ldr.w	r9, [r8, #12]
 801b1bc:	f142 0200 	adc.w	r2, r2, #0
 801b1c0:	1940      	adds	r0, r0, r5
 801b1c2:	460d      	mov	r5, r1
 801b1c4:	4619      	mov	r1, r3
 801b1c6:	fbe6 5109 	umlal	r5, r1, r6, r9
 801b1ca:	f8d8 6010 	ldr.w	r6, [r8, #16]
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b1ce:	f8d8 9034 	ldr.w	r9, [r8, #52]	; 0x34
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801b1d2:	f142 0200 	adc.w	r2, r2, #0
 801b1d6:	1841      	adds	r1, r0, r1
 801b1d8:	4618      	mov	r0, r3
 801b1da:	fbee 5006 	umlal	r5, r0, lr, r6
 801b1de:	f142 0200 	adc.w	r2, r2, #0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b1e2:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801b1e6:	61bd      	str	r5, [r7, #24]
 801b1e8:	1809      	adds	r1, r1, r0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	fbe4 1009 	umlal	r1, r0, r4, r9
 801b1f0:	461d      	mov	r5, r3
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801b1f2:	f142 0200 	adc.w	r2, r2, #0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b1f6:	fbec 1506 	umlal	r1, r5, ip, r6
 801b1fa:	1812      	adds	r2, r2, r0
 801b1fc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b200:	eb43 0003 	adc.w	r0, r3, r3
 801b204:	1952      	adds	r2, r2, r5
 801b206:	461d      	mov	r5, r3
 801b208:	fbe6 150a 	umlal	r1, r5, r6, sl
 801b20c:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 801b210:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 801b214:	f140 0000 	adc.w	r0, r0, #0
 801b218:	1952      	adds	r2, r2, r5
 801b21a:	461d      	mov	r5, r3
 801b21c:	fbe6 150a 	umlal	r1, r5, r6, sl
 801b220:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 801b224:	f8d8 a010 	ldr.w	sl, [r8, #16]
   COMBA_STORE(C->dp[5]);
   /* 6 */
   COMBA_FORWARD;
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b228:	f8d8 b038 	ldr.w	fp, [r8, #56]	; 0x38
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b22c:	f140 0000 	adc.w	r0, r0, #0
 801b230:	1952      	adds	r2, r2, r5
 801b232:	461d      	mov	r5, r3
 801b234:	fbe6 150a 	umlal	r1, r5, r6, sl
 801b238:	f8d8 a014 	ldr.w	sl, [r8, #20]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b23c:	f8d8 6008 	ldr.w	r6, [r8, #8]
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b240:	f140 0000 	adc.w	r0, r0, #0
 801b244:	1952      	adds	r2, r2, r5
 801b246:	461d      	mov	r5, r3
 801b248:	fbee 150a 	umlal	r1, r5, lr, sl
 801b24c:	f140 0000 	adc.w	r0, r0, #0
 801b250:	1952      	adds	r2, r2, r5
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b252:	461d      	mov	r5, r3
 801b254:	fbe4 250b 	umlal	r2, r5, r4, fp
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b258:	61f9      	str	r1, [r7, #28]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b25a:	4611      	mov	r1, r2
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801b25c:	f140 0200 	adc.w	r2, r0, #0
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b260:	4618      	mov	r0, r3
 801b262:	fbec 1009 	umlal	r1, r0, ip, r9
 801b266:	1952      	adds	r2, r2, r5
 801b268:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 801b26c:	eb43 0503 	adc.w	r5, r3, r3
 801b270:	1812      	adds	r2, r2, r0
 801b272:	4618      	mov	r0, r3
 801b274:	fbe6 100c 	umlal	r1, r0, r6, ip
 801b278:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 801b27c:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801b280:	f145 0500 	adc.w	r5, r5, #0
 801b284:	1812      	adds	r2, r2, r0
 801b286:	4618      	mov	r0, r3
 801b288:	fbe6 100c 	umlal	r1, r0, r6, ip
 801b28c:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 801b290:	f8d8 c010 	ldr.w	ip, [r8, #16]
 801b294:	f145 0500 	adc.w	r5, r5, #0
 801b298:	1812      	adds	r2, r2, r0
 801b29a:	4618      	mov	r0, r3
 801b29c:	fbe6 100c 	umlal	r1, r0, r6, ip
 801b2a0:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[6]);
   /* 7 */
   COMBA_FORWARD;
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801b2a4:	f8dd c000 	ldr.w	ip, [sp]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b2a8:	f145 0500 	adc.w	r5, r5, #0
 801b2ac:	1812      	adds	r2, r2, r0
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	fbe6 100a 	umlal	r1, r0, r6, sl
 801b2b4:	f145 0500 	adc.w	r5, r5, #0
 801b2b8:	1812      	adds	r2, r2, r0
 801b2ba:	f8d8 0018 	ldr.w	r0, [r8, #24]
 801b2be:	461e      	mov	r6, r3
 801b2c0:	fbee 1600 	umlal	r1, r6, lr, r0
 801b2c4:	6239      	str	r1, [r7, #32]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801b2c6:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b2ca:	f145 0500 	adc.w	r5, r5, #0
 801b2ce:	1996      	adds	r6, r2, r6
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801b2d0:	461a      	mov	r2, r3
 801b2d2:	fbe4 6201 	umlal	r6, r2, r4, r1
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801b2d6:	f145 0400 	adc.w	r4, r5, #0
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801b2da:	18a4      	adds	r4, r4, r2
 801b2dc:	461a      	mov	r2, r3
 801b2de:	fbec 620b 	umlal	r6, r2, ip, fp
 801b2e2:	f8d8 c008 	ldr.w	ip, [r8, #8]
 801b2e6:	eb43 0503 	adc.w	r5, r3, r3
 801b2ea:	18a4      	adds	r4, r4, r2
 801b2ec:	461a      	mov	r2, r3
 801b2ee:	fbec 6209 	umlal	r6, r2, ip, r9
 801b2f2:	f145 0500 	adc.w	r5, r5, #0
 801b2f6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801b2fa:	18a2      	adds	r2, r4, r2
 801b2fc:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 801b300:	9203      	str	r2, [sp, #12]
 801b302:	461a      	mov	r2, r3
 801b304:	fbec 6204 	umlal	r6, r2, ip, r4
 801b308:	9c03      	ldr	r4, [sp, #12]
 801b30a:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 801b30e:	f145 0500 	adc.w	r5, r5, #0
 801b312:	18a2      	adds	r2, r4, r2
 801b314:	f8d8 4010 	ldr.w	r4, [r8, #16]
 801b318:	9203      	str	r2, [sp, #12]
 801b31a:	461a      	mov	r2, r3
 801b31c:	fbec 6204 	umlal	r6, r2, ip, r4
 801b320:	9c03      	ldr	r4, [sp, #12]
 801b322:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
 801b326:	f145 0500 	adc.w	r5, r5, #0
 801b32a:	18a4      	adds	r4, r4, r2
 801b32c:	461a      	mov	r2, r3
 801b32e:	fbec 620a 	umlal	r6, r2, ip, sl
 801b332:	f8d8 c024 	ldr.w	ip, [r8, #36]	; 0x24
 801b336:	f145 0500 	adc.w	r5, r5, #0
 801b33a:	18a4      	adds	r4, r4, r2
 801b33c:	461a      	mov	r2, r3
 801b33e:	fbec 6200 	umlal	r6, r2, ip, r0
 801b342:	f145 0500 	adc.w	r5, r5, #0
 801b346:	18a4      	adds	r4, r4, r2
 801b348:	f8d8 201c 	ldr.w	r2, [r8, #28]
 801b34c:	f145 0c00 	adc.w	ip, r5, #0
 801b350:	461d      	mov	r5, r3
 801b352:	fbee 6502 	umlal	r6, r5, lr, r2
 801b356:	1964      	adds	r4, r4, r5
   COMBA_STORE(C->dp[7]);
   /* 8 */
   COMBA_FORWARD;
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801b358:	9d00      	ldr	r5, [sp, #0]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801b35a:	627e      	str	r6, [r7, #36]	; 0x24
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801b35c:	4626      	mov	r6, r4
 801b35e:	461c      	mov	r4, r3
 801b360:	fbe5 6401 	umlal	r6, r4, r5, r1
 801b364:	f8d8 e008 	ldr.w	lr, [r8, #8]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801b368:	f14c 0c00 	adc.w	ip, ip, #0
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801b36c:	eb1c 0c04 	adds.w	ip, ip, r4
 801b370:	461c      	mov	r4, r3
 801b372:	fbee 640b 	umlal	r6, r4, lr, fp
 801b376:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 801b37a:	eb43 0503 	adc.w	r5, r3, r3
 801b37e:	eb1c 0c04 	adds.w	ip, ip, r4
 801b382:	461c      	mov	r4, r3
 801b384:	fbee 6409 	umlal	r6, r4, lr, r9
 801b388:	f145 0500 	adc.w	r5, r5, #0
 801b38c:	eb1c 0c04 	adds.w	ip, ip, r4
 801b390:	f145 0400 	adc.w	r4, r5, #0
 801b394:	9400      	str	r4, [sp, #0]
 801b396:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 801b39a:	f8d8 5010 	ldr.w	r5, [r8, #16]
 801b39e:	461c      	mov	r4, r3
 801b3a0:	fbee 6405 	umlal	r6, r4, lr, r5
 801b3a4:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 801b3a8:	9d00      	ldr	r5, [sp, #0]
 801b3aa:	eb1c 0404 	adds.w	r4, ip, r4
 801b3ae:	469c      	mov	ip, r3
 801b3b0:	fbee 6c0a 	umlal	r6, ip, lr, sl
 801b3b4:	f8d8 e028 	ldr.w	lr, [r8, #40]	; 0x28
 801b3b8:	f145 0500 	adc.w	r5, r5, #0
 801b3bc:	eb14 0c0c 	adds.w	ip, r4, ip
 801b3c0:	461c      	mov	r4, r3
 801b3c2:	fbee 6400 	umlal	r6, r4, lr, r0
 801b3c6:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 801b3ca:	f145 0500 	adc.w	r5, r5, #0
 801b3ce:	eb1c 0404 	adds.w	r4, ip, r4
 801b3d2:	469c      	mov	ip, r3
 801b3d4:	fbee 6c02 	umlal	r6, ip, lr, r2
 801b3d8:	f145 0500 	adc.w	r5, r5, #0
 801b3dc:	eb14 040c 	adds.w	r4, r4, ip
   COMBA_STORE(C->dp[8]);
   /* 9 */
   COMBA_FORWARD;
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801b3e0:	f8d8 c008 	ldr.w	ip, [r8, #8]
 801b3e4:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801b3e8:	62be      	str	r6, [r7, #40]	; 0x28
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801b3ea:	461e      	mov	r6, r3
 801b3ec:	fbec 4601 	umlal	r4, r6, ip, r1
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801b3f0:	f145 0500 	adc.w	r5, r5, #0
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801b3f4:	469c      	mov	ip, r3
 801b3f6:	fbee 4c0b 	umlal	r4, ip, lr, fp
 801b3fa:	19ad      	adds	r5, r5, r6
 801b3fc:	f8d8 e010 	ldr.w	lr, [r8, #16]
 801b400:	eb43 0603 	adc.w	r6, r3, r3
 801b404:	eb15 050c 	adds.w	r5, r5, ip
 801b408:	469c      	mov	ip, r3
 801b40a:	fbee 4c09 	umlal	r4, ip, lr, r9
 801b40e:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 801b412:	f146 0600 	adc.w	r6, r6, #0
 801b416:	eb15 050c 	adds.w	r5, r5, ip
 801b41a:	469c      	mov	ip, r3
 801b41c:	fbee 4c0a 	umlal	r4, ip, lr, sl
 801b420:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 801b424:	f146 0600 	adc.w	r6, r6, #0
 801b428:	eb15 050c 	adds.w	r5, r5, ip
 801b42c:	469c      	mov	ip, r3
 801b42e:	fbee 4c00 	umlal	r4, ip, lr, r0
 801b432:	f8d8 e028 	ldr.w	lr, [r8, #40]	; 0x28
 801b436:	f146 0600 	adc.w	r6, r6, #0
 801b43a:	eb15 050c 	adds.w	r5, r5, ip
 801b43e:	469c      	mov	ip, r3
 801b440:	fbee 4c02 	umlal	r4, ip, lr, r2
 801b444:	f146 0600 	adc.w	r6, r6, #0
 801b448:	eb15 050c 	adds.w	r5, r5, ip
   COMBA_STORE(C->dp[9]);
   /* 10 */
   COMBA_FORWARD;
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801b44c:	f8d8 c00c 	ldr.w	ip, [r8, #12]
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801b450:	62fc      	str	r4, [r7, #44]	; 0x2c
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801b452:	461c      	mov	r4, r3
 801b454:	fbec 5401 	umlal	r5, r4, ip, r1
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801b458:	f146 0600 	adc.w	r6, r6, #0
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801b45c:	f8d8 c010 	ldr.w	ip, [r8, #16]
 801b460:	1934      	adds	r4, r6, r4
 801b462:	461e      	mov	r6, r3
 801b464:	fbec 560b 	umlal	r5, r6, ip, fp
 801b468:	eb43 0e03 	adc.w	lr, r3, r3
 801b46c:	19a4      	adds	r4, r4, r6
 801b46e:	461e      	mov	r6, r3
 801b470:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 801b474:	fbe9 560a 	umlal	r5, r6, r9, sl
 801b478:	f14e 0e00 	adc.w	lr, lr, #0
 801b47c:	19a6      	adds	r6, r4, r6
 801b47e:	461c      	mov	r4, r3
 801b480:	fbec 5400 	umlal	r5, r4, ip, r0
 801b484:	f14e 0e00 	adc.w	lr, lr, #0
 801b488:	1934      	adds	r4, r6, r4
 801b48a:	f14e 0600 	adc.w	r6, lr, #0
 801b48e:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 801b492:	469c      	mov	ip, r3
 801b494:	fbee 5c02 	umlal	r5, ip, lr, r2
 801b498:	eb14 040c 	adds.w	r4, r4, ip
   COMBA_STORE(C->dp[10]);
   /* 11 */
   COMBA_FORWARD;
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 801b49c:	f8d8 c010 	ldr.w	ip, [r8, #16]
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801b4a0:	633d      	str	r5, [r7, #48]	; 0x30
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 801b4a2:	461d      	mov	r5, r3
 801b4a4:	fbec 4501 	umlal	r4, r5, ip, r1
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801b4a8:	f146 0600 	adc.w	r6, r6, #0
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 801b4ac:	469c      	mov	ip, r3
 801b4ae:	fbea 4c0b 	umlal	r4, ip, sl, fp
 801b4b2:	1976      	adds	r6, r6, r5
 801b4b4:	eb43 0503 	adc.w	r5, r3, r3
 801b4b8:	eb16 060c 	adds.w	r6, r6, ip
 801b4bc:	469c      	mov	ip, r3
 801b4be:	fbe9 4c00 	umlal	r4, ip, r9, r0
 801b4c2:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 801b4c6:	f145 0500 	adc.w	r5, r5, #0
 801b4ca:	eb16 060c 	adds.w	r6, r6, ip
 801b4ce:	469c      	mov	ip, r3
 801b4d0:	fbee 4c02 	umlal	r4, ip, lr, r2
 801b4d4:	f145 0500 	adc.w	r5, r5, #0
 801b4d8:	637c      	str	r4, [r7, #52]	; 0x34
 801b4da:	eb16 060c 	adds.w	r6, r6, ip
   COMBA_STORE(C->dp[11]);
   /* 12 */
   COMBA_FORWARD;
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 801b4de:	461c      	mov	r4, r3
 801b4e0:	fbea 6401 	umlal	r6, r4, sl, r1
 801b4e4:	469c      	mov	ip, r3
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 801b4e6:	f145 0500 	adc.w	r5, r5, #0
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 801b4ea:	fbeb 6c00 	umlal	r6, ip, fp, r0
 801b4ee:	192d      	adds	r5, r5, r4
 801b4f0:	eb43 0403 	adc.w	r4, r3, r3
 801b4f4:	eb15 050c 	adds.w	r5, r5, ip
 801b4f8:	469c      	mov	ip, r3
 801b4fa:	fbe9 6c02 	umlal	r6, ip, r9, r2
 801b4fe:	f144 0400 	adc.w	r4, r4, #0
 801b502:	63be      	str	r6, [r7, #56]	; 0x38
 801b504:	eb15 050c 	adds.w	r5, r5, ip
   COMBA_STORE(C->dp[12]);
   /* 13 */
   COMBA_FORWARD;
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 801b508:	461e      	mov	r6, r3
 801b50a:	fbe0 5601 	umlal	r5, r6, r0, r1
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 801b50e:	f144 0000 	adc.w	r0, r4, #0
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 801b512:	1980      	adds	r0, r0, r6
 801b514:	461e      	mov	r6, r3
 801b516:	fbeb 5602 	umlal	r5, r6, fp, r2
 801b51a:	eb43 0403 	adc.w	r4, r3, r3
 801b51e:	1980      	adds	r0, r0, r6
   COMBA_STORE(C->dp[13]);
   /* 14 */
   COMBA_FORWARD;
   MULADD(at[7], at[15]); 
 801b520:	fbe1 0302 	umlal	r0, r3, r1, r2
 801b524:	eb44 0303 	adc.w	r3, r4, r3
 801b528:	647b      	str	r3, [r7, #68]	; 0x44
   COMBA_STORE(C->dp[14]);
   COMBA_STORE2(C->dp[15]);
   C->used = 16;
 801b52a:	2310      	movs	r3, #16
 801b52c:	603b      	str	r3, [r7, #0]
   C->sign = A->sign ^ B->sign;
 801b52e:	9b01      	ldr	r3, [sp, #4]
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 801b530:	63fd      	str	r5, [r7, #60]	; 0x3c
   C->sign = A->sign ^ B->sign;
 801b532:	6859      	ldr	r1, [r3, #4]
 801b534:	9b02      	ldr	r3, [sp, #8]
   MULADD(at[7], at[15]); 
 801b536:	6438      	str	r0, [r7, #64]	; 0x40
   C->sign = A->sign ^ B->sign;
 801b538:	685a      	ldr	r2, [r3, #4]
   fp_clamp(C);
 801b53a:	683b      	ldr	r3, [r7, #0]
 801b53c:	b133      	cbz	r3, 801b54c <fp_mul_comba8+0x4a4>
 801b53e:	1e58      	subs	r0, r3, #1
 801b540:	3301      	adds	r3, #1
 801b542:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801b546:	b14b      	cbz	r3, 801b55c <fp_mul_comba8+0x4b4>
   C->sign = A->sign ^ B->sign;
 801b548:	ea81 0302 	eor.w	r3, r1, r2
   COMBA_FINI;

#ifdef WOLFSSL_SMALL_STACK
   XFREE(at, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801b54c:	4640      	mov	r0, r8
   fp_clamp(C);
 801b54e:	607b      	str	r3, [r7, #4]
   XFREE(at, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801b550:	f002 fa10 	bl	801d974 <free>
#endif
   return FP_OKAY;
 801b554:	2000      	movs	r0, #0
}
 801b556:	b005      	add	sp, #20
 801b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   fp_clamp(C);
 801b55c:	6038      	str	r0, [r7, #0]
 801b55e:	e7ec      	b.n	801b53a <fp_mul_comba8+0x492>
       return FP_MEM;
 801b560:	f06f 0001 	mvn.w	r0, #1
 801b564:	e7f7      	b.n	801b556 <fp_mul_comba8+0x4ae>

0801b566 <s_fp_add>:
{
 801b566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  y       = MAX(a->used, b->used);
 801b56a:	6803      	ldr	r3, [r0, #0]
 801b56c:	680c      	ldr	r4, [r1, #0]
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801b56e:	6817      	ldr	r7, [r2, #0]
  y       = MAX(a->used, b->used);
 801b570:	42a3      	cmp	r3, r4
 801b572:	bfb8      	it	lt
 801b574:	4623      	movlt	r3, r4
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801b576:	2f18      	cmp	r7, #24
 801b578:	bfa8      	it	ge
 801b57a:	2718      	movge	r7, #24
  t = 0;
 801b57c:	2500      	movs	r5, #0
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801b57e:	46b8      	mov	r8, r7
  c->used = y;
 801b580:	6013      	str	r3, [r2, #0]
  for (x = 0; x < y; x++) {
 801b582:	2401      	movs	r4, #1
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 801b584:	46ac      	mov	ip, r5
  for (x = 0; x < y; x++) {
 801b586:	1c66      	adds	r6, r4, #1
 801b588:	3c01      	subs	r4, #1
 801b58a:	42a3      	cmp	r3, r4
 801b58c:	dc1b      	bgt.n	801b5c6 <s_fp_add+0x60>
 801b58e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
  if (t != 0) {
 801b592:	b135      	cbz	r5, 801b5a2 <s_fp_add+0x3c>
     if (x == FP_SIZE)
 801b594:	2b18      	cmp	r3, #24
 801b596:	d02a      	beq.n	801b5ee <s_fp_add+0x88>
     c->dp[c->used++] = (fp_digit)t;
 801b598:	3302      	adds	r3, #2
 801b59a:	2001      	movs	r0, #1
 801b59c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     ++x;
 801b5a0:	4401      	add	r1, r0
  c->used = x;
 801b5a2:	4613      	mov	r3, r2
     c->dp[x] = 0;
 801b5a4:	2000      	movs	r0, #0
  c->used = x;
 801b5a6:	f843 1b08 	str.w	r1, [r3], #8
  for (; x < oldused; x++) {
 801b5aa:	4541      	cmp	r1, r8
 801b5ac:	db19      	blt.n	801b5e2 <s_fp_add+0x7c>
  fp_clamp(c);
 801b5ae:	6813      	ldr	r3, [r2, #0]
 801b5b0:	b12b      	cbz	r3, 801b5be <s_fp_add+0x58>
 801b5b2:	1e59      	subs	r1, r3, #1
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b5ba:	b1b3      	cbz	r3, 801b5ea <s_fp_add+0x84>
 801b5bc:	6853      	ldr	r3, [r2, #4]
 801b5be:	6053      	str	r3, [r2, #4]
  return FP_OKAY;
 801b5c0:	2000      	movs	r0, #0
}
 801b5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 801b5c6:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 801b5ca:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 801b5ce:	19e4      	adds	r4, r4, r7
 801b5d0:	eb4c 0e0c 	adc.w	lr, ip, ip
 801b5d4:	1964      	adds	r4, r4, r5
      c->dp[x]   = (fp_digit)t;
 801b5d6:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
      t        >>= DIGIT_BIT;
 801b5da:	f14e 0500 	adc.w	r5, lr, #0
 801b5de:	4634      	mov	r4, r6
 801b5e0:	e7d1      	b.n	801b586 <s_fp_add+0x20>
     c->dp[x] = 0;
 801b5e2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  for (; x < oldused; x++) {
 801b5e6:	3101      	adds	r1, #1
 801b5e8:	e7df      	b.n	801b5aa <s_fp_add+0x44>
  fp_clamp(c);
 801b5ea:	6011      	str	r1, [r2, #0]
 801b5ec:	e7df      	b.n	801b5ae <s_fp_add+0x48>
         return FP_VAL;
 801b5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5f2:	e7e6      	b.n	801b5c2 <s_fp_add+0x5c>

0801b5f4 <s_fp_sub>:
{
 801b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  c->used  = a->used;
 801b5f6:	6807      	ldr	r7, [r0, #0]
  oldused  = c->used;
 801b5f8:	6816      	ldr	r6, [r2, #0]
  oldbused = b->used;
 801b5fa:	680b      	ldr	r3, [r1, #0]
  c->used  = a->used;
 801b5fc:	6017      	str	r7, [r2, #0]
  for (x = 0; x < oldbused; x++) {
 801b5fe:	2401      	movs	r4, #1
  t       = 0;
 801b600:	2500      	movs	r5, #0
  for (x = 0; x < oldbused; x++) {
 801b602:	f104 0c01 	add.w	ip, r4, #1
 801b606:	3c01      	subs	r4, #1
 801b608:	42a3      	cmp	r3, r4
 801b60a:	dc1b      	bgt.n	801b644 <s_fp_sub+0x50>
 801b60c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b610:	1c59      	adds	r1, r3, #1
  for (; x < a->used; x++) {
 801b612:	f101 0c01 	add.w	ip, r1, #1
 801b616:	3901      	subs	r1, #1
 801b618:	428f      	cmp	r7, r1
 801b61a:	dc24      	bgt.n	801b666 <s_fp_sub+0x72>
 801b61c:	1af9      	subs	r1, r7, r3
 801b61e:	429f      	cmp	r7, r3
 801b620:	bfb8      	it	lt
 801b622:	2100      	movlt	r1, #0
 801b624:	440b      	add	r3, r1
     c->dp[x] = 0;
 801b626:	2000      	movs	r0, #0
 801b628:	f102 0108 	add.w	r1, r2, #8
  for (; x < oldused; x++) {
 801b62c:	42b3      	cmp	r3, r6
 801b62e:	db24      	blt.n	801b67a <s_fp_sub+0x86>
  fp_clamp(c);
 801b630:	6813      	ldr	r3, [r2, #0]
 801b632:	b12b      	cbz	r3, 801b640 <s_fp_sub+0x4c>
 801b634:	1e59      	subs	r1, r3, #1
 801b636:	3301      	adds	r3, #1
 801b638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b63c:	b30b      	cbz	r3, 801b682 <s_fp_sub+0x8e>
 801b63e:	6853      	ldr	r3, [r2, #4]
 801b640:	6053      	str	r3, [r2, #4]
}
 801b642:	bdf0      	pop	{r4, r5, r6, r7, pc}
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
 801b644:	f851 e02c 	ldr.w	lr, [r1, ip, lsl #2]
 801b648:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 801b64c:	ebb4 040e 	subs.w	r4, r4, lr
 801b650:	eb6e 0e0e 	sbc.w	lr, lr, lr
 801b654:	1b64      	subs	r4, r4, r5
 801b656:	f16e 0500 	sbc.w	r5, lr, #0
     c->dp[x]  = (fp_digit)t;
 801b65a:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 801b65e:	f005 0501 	and.w	r5, r5, #1
 801b662:	4664      	mov	r4, ip
 801b664:	e7cd      	b.n	801b602 <s_fp_sub+0xe>
     t         = ((fp_word)a->dp[x]) - t;
 801b666:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 801b66a:	1b64      	subs	r4, r4, r5
     c->dp[x]  = (fp_digit)t;
 801b66c:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 801b670:	bf34      	ite	cc
 801b672:	2501      	movcc	r5, #1
 801b674:	2500      	movcs	r5, #0
 801b676:	4661      	mov	r1, ip
 801b678:	e7cb      	b.n	801b612 <s_fp_sub+0x1e>
     c->dp[x] = 0;
 801b67a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  for (; x < oldused; x++) {
 801b67e:	3301      	adds	r3, #1
 801b680:	e7d4      	b.n	801b62c <s_fp_sub+0x38>
  fp_clamp(c);
 801b682:	6011      	str	r1, [r2, #0]
 801b684:	e7d4      	b.n	801b630 <s_fp_sub+0x3c>

0801b686 <fp_mul_2>:
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 801b686:	6802      	ldr	r2, [r0, #0]
 801b688:	2a17      	cmp	r2, #23
{
 801b68a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 801b68c:	dc2d      	bgt.n	801b6ea <fp_mul_2+0x64>
 801b68e:	d102      	bne.n	801b696 <fp_mul_2+0x10>
 801b690:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801b692:	2b00      	cmp	r3, #0
 801b694:	db29      	blt.n	801b6ea <fp_mul_2+0x64>
  b->used = a->used;
 801b696:	460b      	mov	r3, r1
  oldused = b->used;
 801b698:	f8d1 c000 	ldr.w	ip, [r1]
  b->used = a->used;
 801b69c:	f843 2b08 	str.w	r2, [r3], #8
    r = 0;
 801b6a0:	2200      	movs	r2, #0
    tmpa = a->dp;
 801b6a2:	f100 0608 	add.w	r6, r0, #8
    tmpb = b->dp;
 801b6a6:	461c      	mov	r4, r3
    for (x = 0; x < a->used; x++) {
 801b6a8:	4615      	mov	r5, r2
 801b6aa:	6807      	ldr	r7, [r0, #0]
 801b6ac:	42af      	cmp	r7, r5
 801b6ae:	dc0f      	bgt.n	801b6d0 <fp_mul_2+0x4a>
    if (r != 0) {
 801b6b0:	b122      	cbz	r2, 801b6bc <fp_mul_2+0x36>
      *tmpb = 1;
 801b6b2:	2201      	movs	r2, #1
 801b6b4:	6022      	str	r2, [r4, #0]
      ++(b->used);
 801b6b6:	680a      	ldr	r2, [r1, #0]
 801b6b8:	3201      	adds	r2, #1
 801b6ba:	600a      	str	r2, [r1, #0]
    tmpb = b->dp + b->used;
 801b6bc:	680a      	ldr	r2, [r1, #0]
 801b6be:	2400      	movs	r4, #0
 801b6c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (x = b->used; x < oldused; x++) {
 801b6c4:	4562      	cmp	r2, ip
 801b6c6:	db0c      	blt.n	801b6e2 <fp_mul_2+0x5c>
  b->sign = a->sign;
 801b6c8:	6843      	ldr	r3, [r0, #4]
 801b6ca:	604b      	str	r3, [r1, #4]
  return FP_OKAY;
 801b6cc:	2000      	movs	r0, #0
}
 801b6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
 801b6d0:	f856 7b04 	ldr.w	r7, [r6], #4
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
 801b6d4:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 801b6d8:	f844 2b04 	str.w	r2, [r4], #4
    for (x = 0; x < a->used; x++) {
 801b6dc:	3501      	adds	r5, #1
      r = rr;
 801b6de:	0ffa      	lsrs	r2, r7, #31
 801b6e0:	e7e3      	b.n	801b6aa <fp_mul_2+0x24>
      *tmpb++ = 0;
 801b6e2:	f843 4b04 	str.w	r4, [r3], #4
    for (x = b->used; x < oldused; x++) {
 801b6e6:	3201      	adds	r2, #1
 801b6e8:	e7ec      	b.n	801b6c4 <fp_mul_2+0x3e>
    return FP_VAL;
 801b6ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b6ee:	e7ee      	b.n	801b6ce <fp_mul_2+0x48>

0801b6f0 <fp_mul_d>:
{
 801b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c->used = a->used;
 801b6f2:	6803      	ldr	r3, [r0, #0]
   c->sign = a->sign;
 801b6f4:	6847      	ldr	r7, [r0, #4]
   oldused = c->used;
 801b6f6:	f8d2 c000 	ldr.w	ip, [r2]
   c->sign = a->sign;
 801b6fa:	6057      	str	r7, [r2, #4]
   w       = 0;
 801b6fc:	2400      	movs	r4, #0
   c->used = a->used;
 801b6fe:	6013      	str	r3, [r2, #0]
   for (x = 0; x < a->used; x++) {
 801b700:	2501      	movs	r5, #1
   w       = 0;
 801b702:	4626      	mov	r6, r4
   for (x = 0; x < a->used; x++) {
 801b704:	f105 0e01 	add.w	lr, r5, #1
 801b708:	3d01      	subs	r5, #1
 801b70a:	42ab      	cmp	r3, r5
 801b70c:	dc1c      	bgt.n	801b748 <fp_mul_d+0x58>
 801b70e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   if (w != 0) {
 801b712:	b13c      	cbz	r4, 801b724 <fp_mul_d+0x34>
      if (a->used == FP_SIZE)
 801b714:	2b18      	cmp	r3, #24
 801b716:	d027      	beq.n	801b768 <fp_mul_d+0x78>
      c->dp[c->used++] = (fp_digit) w;
 801b718:	1c58      	adds	r0, r3, #1
 801b71a:	3302      	adds	r3, #2
 801b71c:	6010      	str	r0, [r2, #0]
 801b71e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      ++x;
 801b722:	3101      	adds	r1, #1
      c->dp[x] = 0;
 801b724:	f102 0308 	add.w	r3, r2, #8
 801b728:	2000      	movs	r0, #0
   for (; x < oldused && x < FP_SIZE; x++) {
 801b72a:	4561      	cmp	r1, ip
 801b72c:	da01      	bge.n	801b732 <fp_mul_d+0x42>
 801b72e:	2917      	cmp	r1, #23
 801b730:	dd14      	ble.n	801b75c <fp_mul_d+0x6c>
   fp_clamp(c);
 801b732:	6813      	ldr	r3, [r2, #0]
 801b734:	b12b      	cbz	r3, 801b742 <fp_mul_d+0x52>
 801b736:	1e59      	subs	r1, r3, #1
 801b738:	3301      	adds	r3, #1
 801b73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b73e:	b18b      	cbz	r3, 801b764 <fp_mul_d+0x74>
 801b740:	463b      	mov	r3, r7
 801b742:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 801b744:	2000      	movs	r0, #0
}
 801b746:	bdf0      	pop	{r4, r5, r6, r7, pc}
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
 801b748:	f850 502e 	ldr.w	r5, [r0, lr, lsl #2]
 801b74c:	fbe5 4601 	umlal	r4, r6, r5, r1
       c->dp[x]  = (fp_digit)w;
 801b750:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
       w         = w >> DIGIT_BIT;
 801b754:	4675      	mov	r5, lr
 801b756:	4634      	mov	r4, r6
 801b758:	2600      	movs	r6, #0
   for (x = 0; x < a->used; x++) {
 801b75a:	e7d3      	b.n	801b704 <fp_mul_d+0x14>
      c->dp[x] = 0;
 801b75c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
   for (; x < oldused && x < FP_SIZE; x++) {
 801b760:	3101      	adds	r1, #1
 801b762:	e7e2      	b.n	801b72a <fp_mul_d+0x3a>
   fp_clamp(c);
 801b764:	6011      	str	r1, [r2, #0]
 801b766:	e7e4      	b.n	801b732 <fp_mul_d+0x42>
          return FP_VAL;
 801b768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b76c:	e7eb      	b.n	801b746 <fp_mul_d+0x56>

0801b76e <fp_div_2>:
{
 801b76e:	b5f0      	push	{r4, r5, r6, r7, lr}
  b->used = a->used;
 801b770:	4605      	mov	r5, r0
 801b772:	460b      	mov	r3, r1
 801b774:	f855 2b08 	ldr.w	r2, [r5], #8
  oldused = b->used;
 801b778:	680f      	ldr	r7, [r1, #0]
  b->used = a->used;
 801b77a:	f843 2b08 	str.w	r2, [r3], #8
    tmpa = a->dp + b->used - 1;
 801b77e:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 801b782:	3c01      	subs	r4, #1
 801b784:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    for (x = b->used - 1; x >= 0; x--) {
 801b788:	3a01      	subs	r2, #1
    tmpb = b->dp + b->used - 1;
 801b78a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    r = 0;
 801b78e:	2600      	movs	r6, #0
    for (x = b->used - 1; x >= 0; x--) {
 801b790:	2a00      	cmp	r2, #0
 801b792:	da10      	bge.n	801b7b6 <fp_div_2+0x48>
    tmpb = b->dp + b->used;
 801b794:	680a      	ldr	r2, [r1, #0]
      *tmpb++ = 0;
 801b796:	2400      	movs	r4, #0
    tmpb = b->dp + b->used;
 801b798:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (x = b->used; x < oldused; x++) {
 801b79c:	42ba      	cmp	r2, r7
 801b79e:	db15      	blt.n	801b7cc <fp_div_2+0x5e>
  b->sign = a->sign;
 801b7a0:	6842      	ldr	r2, [r0, #4]
  fp_clamp (b);
 801b7a2:	680b      	ldr	r3, [r1, #0]
 801b7a4:	b12b      	cbz	r3, 801b7b2 <fp_div_2+0x44>
 801b7a6:	1e58      	subs	r0, r3, #1
 801b7a8:	3301      	adds	r3, #1
 801b7aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b7ae:	b18b      	cbz	r3, 801b7d4 <fp_div_2+0x66>
 801b7b0:	4613      	mov	r3, r2
 801b7b2:	604b      	str	r3, [r1, #4]
}
 801b7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      rr = *tmpa & 1;
 801b7b6:	f855 c904 	ldr.w	ip, [r5], #-4
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
 801b7ba:	07f6      	lsls	r6, r6, #31
 801b7bc:	ea46 065c 	orr.w	r6, r6, ip, lsr #1
 801b7c0:	f844 6904 	str.w	r6, [r4], #-4
    for (x = b->used - 1; x >= 0; x--) {
 801b7c4:	3a01      	subs	r2, #1
      r = rr;
 801b7c6:	f00c 0601 	and.w	r6, ip, #1
 801b7ca:	e7e1      	b.n	801b790 <fp_div_2+0x22>
      *tmpb++ = 0;
 801b7cc:	f843 4b04 	str.w	r4, [r3], #4
    for (x = b->used; x < oldused; x++) {
 801b7d0:	3201      	adds	r2, #1
 801b7d2:	e7e3      	b.n	801b79c <fp_div_2+0x2e>
  fp_clamp (b);
 801b7d4:	6008      	str	r0, [r1, #0]
 801b7d6:	e7e4      	b.n	801b7a2 <fp_div_2+0x34>

0801b7d8 <fp_div_2_mod_ct>:
{
 801b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  mask = 0 - (a->dp[0] & 1);
 801b7da:	6887      	ldr	r7, [r0, #8]
  for (i = 0; i < b->used; i++) {
 801b7dc:	680c      	ldr	r4, [r1, #0]
  fp_word  w = 0;
 801b7de:	f04f 0e00 	mov.w	lr, #0
  mask = 0 - (a->dp[0] & 1);
 801b7e2:	f347 0700 	sbfx	r7, r7, #0, #1
  for (i = 0; i < b->used; i++) {
 801b7e6:	2301      	movs	r3, #1
      w         += a->dp[i] & mask_a;
 801b7e8:	46f4      	mov	ip, lr
  for (i = 0; i < b->used; i++) {
 801b7ea:	1e5e      	subs	r6, r3, #1
 801b7ec:	42b4      	cmp	r4, r6
 801b7ee:	f103 0501 	add.w	r5, r3, #1
 801b7f2:	dc1d      	bgt.n	801b830 <fp_div_2_mod_ct+0x58>
 801b7f4:	f102 0108 	add.w	r1, r2, #8
 801b7f8:	2000      	movs	r0, #0
  for (i = 0; i < b->used-1; i++) {
 801b7fa:	1e65      	subs	r5, r4, #1
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 801b7fc:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = 0; i < b->used-1; i++) {
 801b800:	42a8      	cmp	r0, r5
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 801b802:	ea4f 0353 	mov.w	r3, r3, lsr #1
  for (i = 0; i < b->used-1; i++) {
 801b806:	db2a      	blt.n	801b85e <fp_div_2_mod_ct+0x86>
 801b808:	2c01      	cmp	r4, #1
 801b80a:	bfb8      	it	lt
 801b80c:	2401      	movlt	r4, #1
  c->dp[i] = (c->dp[i] >> 1) | ((fp_digit)w << (DIGIT_BIT - 1));
 801b80e:	1c61      	adds	r1, r4, #1
 801b810:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
 801b814:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  c->sign = FP_ZPOS;
 801b818:	2300      	movs	r3, #0
  c->used = i + 1;
 801b81a:	6014      	str	r4, [r2, #0]
  c->sign = FP_ZPOS;
 801b81c:	6053      	str	r3, [r2, #4]
  fp_clamp(c);
 801b81e:	6813      	ldr	r3, [r2, #0]
 801b820:	b123      	cbz	r3, 801b82c <fp_div_2_mod_ct+0x54>
 801b822:	1e59      	subs	r1, r3, #1
 801b824:	3301      	adds	r3, #1
 801b826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b82a:	b1fb      	cbz	r3, 801b86c <fp_div_2_mod_ct+0x94>
}
 801b82c:	2000      	movs	r0, #0
 801b82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      fp_digit mask_a = 0 - (i < a->used);
 801b830:	6803      	ldr	r3, [r0, #0]
 801b832:	42b3      	cmp	r3, r6
      w         += a->dp[i] & mask_a;
 801b834:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
      fp_digit mask_a = 0 - (i < a->used);
 801b838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b83c:	bfd8      	it	le
 801b83e:	2300      	movle	r3, #0
      w         += a->dp[i] & mask_a;
 801b840:	4033      	ands	r3, r6
      w         += b->dp[i] & mask;
 801b842:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
 801b846:	403e      	ands	r6, r7
      w         += a->dp[i] & mask_a;
 801b848:	199b      	adds	r3, r3, r6
 801b84a:	eb4c 060c 	adc.w	r6, ip, ip
 801b84e:	eb13 030e 	adds.w	r3, r3, lr
      c->dp[i]   = (fp_digit)w;
 801b852:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
      w        >>= DIGIT_BIT;
 801b856:	f146 0e00 	adc.w	lr, r6, #0
 801b85a:	462b      	mov	r3, r5
 801b85c:	e7c5      	b.n	801b7ea <fp_div_2_mod_ct+0x12>
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 801b85e:	680e      	ldr	r6, [r1, #0]
 801b860:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 801b864:	f841 3c04 	str.w	r3, [r1, #-4]
  for (i = 0; i < b->used-1; i++) {
 801b868:	3001      	adds	r0, #1
 801b86a:	e7c7      	b.n	801b7fc <fp_div_2_mod_ct+0x24>
  fp_clamp(c);
 801b86c:	6011      	str	r1, [r2, #0]
 801b86e:	e7d6      	b.n	801b81e <fp_div_2_mod_ct+0x46>

0801b870 <fp_submod_ct>:
{
 801b870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (c->used + 1 > FP_SIZE) {
 801b874:	6814      	ldr	r4, [r2, #0]
 801b876:	2c17      	cmp	r4, #23
 801b878:	dc48      	bgt.n	801b90c <fp_submod_ct+0x9c>
  if (c == d) {
 801b87a:	429a      	cmp	r2, r3
 801b87c:	d046      	beq.n	801b90c <fp_submod_ct+0x9c>
  for (i = 0; i < c->used; i++) {
 801b87e:	2700      	movs	r7, #0
 801b880:	f103 0608 	add.w	r6, r3, #8
 801b884:	f100 0e08 	add.w	lr, r0, #8
  if (c == d) {
 801b888:	46b0      	mov	r8, r6
 801b88a:	f101 0008 	add.w	r0, r1, #8
  w = 0;
 801b88e:	46bc      	mov	ip, r7
 801b890:	463d      	mov	r5, r7
    w         += a->dp[i];
 801b892:	f85e 1b04 	ldr.w	r1, [lr], #4
    w         -= b->dp[i];
 801b896:	f850 9b04 	ldr.w	r9, [r0], #4
    w         += a->dp[i];
 801b89a:	eb11 010c 	adds.w	r1, r1, ip
 801b89e:	f145 0500 	adc.w	r5, r5, #0
    w         -= b->dp[i];
 801b8a2:	ebb1 0109 	subs.w	r1, r1, r9
 801b8a6:	f165 0c00 	sbc.w	ip, r5, #0
  for (i = 0; i < c->used; i++) {
 801b8aa:	42bc      	cmp	r4, r7
    w        >>= DIGIT_BIT;
 801b8ac:	ea4f 75ec 	mov.w	r5, ip, asr #31
  for (i = 0; i < c->used; i++) {
 801b8b0:	dc15      	bgt.n	801b8de <fp_submod_ct+0x6e>
  mask = (fp_digit)0 - (w < 0);
 801b8b2:	462f      	mov	r7, r5
  for (i = 0; i < c->used; i++) {
 801b8b4:	2500      	movs	r5, #0
 801b8b6:	3208      	adds	r2, #8
  w = 0;
 801b8b8:	4628      	mov	r0, r5
 801b8ba:	46ac      	mov	ip, r5
  for (i = 0; i < c->used; i++) {
 801b8bc:	42ac      	cmp	r4, r5
 801b8be:	dc12      	bgt.n	801b8e6 <fp_submod_ct+0x76>
  d->used = i;
 801b8c0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  d->sign = FP_ZPOS;
 801b8c4:	2200      	movs	r2, #0
  d->used = i;
 801b8c6:	601c      	str	r4, [r3, #0]
  d->sign = FP_ZPOS;
 801b8c8:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 801b8ca:	6818      	ldr	r0, [r3, #0]
 801b8cc:	b128      	cbz	r0, 801b8da <fp_submod_ct+0x6a>
 801b8ce:	1e41      	subs	r1, r0, #1
 801b8d0:	3001      	adds	r0, #1
 801b8d2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 801b8d6:	b1ba      	cbz	r2, 801b908 <fp_submod_ct+0x98>
  return FP_OKAY;
 801b8d8:	2000      	movs	r0, #0
}
 801b8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d->dp[i]   = (fp_digit)w;
 801b8de:	f848 1b04 	str.w	r1, [r8], #4
  for (i = 0; i < c->used; i++) {
 801b8e2:	3701      	adds	r7, #1
 801b8e4:	e7d5      	b.n	801b892 <fp_submod_ct+0x22>
    w         += d->dp[i];
 801b8e6:	6831      	ldr	r1, [r6, #0]
 801b8e8:	1808      	adds	r0, r1, r0
    w         += c->dp[i] & mask;
 801b8ea:	f852 1b04 	ldr.w	r1, [r2], #4
 801b8ee:	ea01 0107 	and.w	r1, r1, r7
    w         += d->dp[i];
 801b8f2:	f14c 0c00 	adc.w	ip, ip, #0
    w         += c->dp[i] & mask;
 801b8f6:	1809      	adds	r1, r1, r0
    w        >>= DIGIT_BIT;
 801b8f8:	f14c 0000 	adc.w	r0, ip, #0
    d->dp[i]   = (fp_digit)w;
 801b8fc:	f846 1b04 	str.w	r1, [r6], #4
    w        >>= DIGIT_BIT;
 801b900:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (i = 0; i < c->used; i++) {
 801b904:	3501      	adds	r5, #1
 801b906:	e7d9      	b.n	801b8bc <fp_submod_ct+0x4c>
  fp_clamp(d);
 801b908:	6019      	str	r1, [r3, #0]
 801b90a:	e7de      	b.n	801b8ca <fp_submod_ct+0x5a>
    return FP_VAL;
 801b90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b910:	e7e3      	b.n	801b8da <fp_submod_ct+0x6a>

0801b912 <fp_addmod_ct>:
  if (c == d) {
 801b912:	429a      	cmp	r2, r3
{
 801b914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (c == d) {
 801b918:	d057      	beq.n	801b9ca <fp_addmod_ct+0xb8>
  s = 0;
 801b91a:	f04f 0e00 	mov.w	lr, #0
  for (i = 0; i < c->used; i++) {
 801b91e:	6816      	ldr	r6, [r2, #0]
 801b920:	2401      	movs	r4, #1
  s = 0;
 801b922:	46f0      	mov	r8, lr
  w = 0;
 801b924:	46f1      	mov	r9, lr
    w         += a->dp[i];
 801b926:	46f4      	mov	ip, lr
  for (i = 0; i < c->used; i++) {
 801b928:	1c67      	adds	r7, r4, #1
 801b92a:	3c01      	subs	r4, #1
 801b92c:	42a6      	cmp	r6, r4
 801b92e:	dc1f      	bgt.n	801b970 <fp_addmod_ct+0x5e>
  s += (fp_digit)w;
 801b930:	eb19 040e 	adds.w	r4, r9, lr
 801b934:	f148 0800 	adc.w	r8, r8, #0
  mask = (fp_digit)0 - (s >= 0);
 801b938:	ea6f 0808 	mvn.w	r8, r8
 801b93c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
  for (i = 0; i < c->used; i++) {
 801b940:	2400      	movs	r4, #0
  mask = (fp_digit)0 - (s >= 0);
 801b942:	f1c8 0800 	rsb	r8, r8, #0
  for (i = 0; i < c->used; i++) {
 801b946:	3208      	adds	r2, #8
 801b948:	f103 0708 	add.w	r7, r3, #8
  w = 0;
 801b94c:	4621      	mov	r1, r4
  for (i = 0; i < c->used; i++) {
 801b94e:	42a6      	cmp	r6, r4
 801b950:	dc28      	bgt.n	801b9a4 <fp_addmod_ct+0x92>
  d->used = i;
 801b952:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  d->sign = FP_ZPOS;
 801b956:	2200      	movs	r2, #0
  d->used = i;
 801b958:	601e      	str	r6, [r3, #0]
  d->sign = FP_ZPOS;
 801b95a:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 801b95c:	6818      	ldr	r0, [r3, #0]
 801b95e:	b128      	cbz	r0, 801b96c <fp_addmod_ct+0x5a>
 801b960:	1e41      	subs	r1, r0, #1
 801b962:	3001      	adds	r0, #1
 801b964:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 801b968:	b36a      	cbz	r2, 801b9c6 <fp_addmod_ct+0xb4>
 801b96a:	2000      	movs	r0, #0
}
 801b96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    w         += b->dp[i];
 801b970:	f851 4027 	ldr.w	r4, [r1, r7, lsl #2]
    w         += a->dp[i];
 801b974:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    w         += b->dp[i];
 801b978:	192d      	adds	r5, r5, r4
 801b97a:	eb4c 0a0c 	adc.w	sl, ip, ip
 801b97e:	eb15 0409 	adds.w	r4, r5, r9
    d->dp[i]   = (fp_digit)w;
 801b982:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
    s         -= c->dp[i];
 801b986:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
    w         += b->dp[i];
 801b98a:	f14a 0900 	adc.w	r9, sl, #0
    s         += (fp_digit)w;
 801b98e:	eb14 040e 	adds.w	r4, r4, lr
 801b992:	f148 0e00 	adc.w	lr, r8, #0
    s         -= c->dp[i];
 801b996:	1b64      	subs	r4, r4, r5
    s        >>= DIGIT_BIT;
 801b998:	f16e 0e00 	sbc.w	lr, lr, #0
 801b99c:	ea4f 78ee 	mov.w	r8, lr, asr #31
 801b9a0:	463c      	mov	r4, r7
 801b9a2:	e7c1      	b.n	801b928 <fp_addmod_ct+0x16>
    w        += c->dp[i] & mask;
 801b9a4:	f852 5b04 	ldr.w	r5, [r2], #4
    w         = d->dp[i] - w;
 801b9a8:	6838      	ldr	r0, [r7, #0]
    w        += c->dp[i] & mask;
 801b9aa:	ea08 0505 	and.w	r5, r8, r5
 801b9ae:	1a40      	subs	r0, r0, r1
 801b9b0:	eb61 0101 	sbc.w	r1, r1, r1
    w         = d->dp[i] - w;
 801b9b4:	1b40      	subs	r0, r0, r5
 801b9b6:	f161 0100 	sbc.w	r1, r1, #0
    d->dp[i]  = (fp_digit)w;
 801b9ba:	f847 0b04 	str.w	r0, [r7], #4
    w         = (w >> DIGIT_BIT)&1;
 801b9be:	f001 0101 	and.w	r1, r1, #1
  for (i = 0; i < c->used; i++) {
 801b9c2:	3401      	adds	r4, #1
 801b9c4:	e7c3      	b.n	801b94e <fp_addmod_ct+0x3c>
  fp_clamp(d);
 801b9c6:	6019      	str	r1, [r3, #0]
 801b9c8:	e7c8      	b.n	801b95c <fp_addmod_ct+0x4a>
    return FP_VAL;
 801b9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9ce:	e7cd      	b.n	801b96c <fp_addmod_ct+0x5a>

0801b9d0 <fp_cmp_d>:
  if (a->used == 0 && b == 0)
 801b9d0:	6803      	ldr	r3, [r0, #0]
 801b9d2:	b923      	cbnz	r3, 801b9de <fp_cmp_d+0xe>
 801b9d4:	1e08      	subs	r0, r1, #0
 801b9d6:	bf18      	it	ne
 801b9d8:	2001      	movne	r0, #1
 801b9da:	4240      	negs	r0, r0
 801b9dc:	4770      	bx	lr
  if ((b && a->used == 0) || a->sign == FP_NEG) {
 801b9de:	6842      	ldr	r2, [r0, #4]
 801b9e0:	2a01      	cmp	r2, #1
 801b9e2:	d009      	beq.n	801b9f8 <fp_cmp_d+0x28>
  if (a->used > 1) {
 801b9e4:	2b01      	cmp	r3, #1
 801b9e6:	dc0a      	bgt.n	801b9fe <fp_cmp_d+0x2e>
 801b9e8:	6883      	ldr	r3, [r0, #8]
  if (a->dp[0] > b) {
 801b9ea:	4299      	cmp	r1, r3
 801b9ec:	d307      	bcc.n	801b9fe <fp_cmp_d+0x2e>
  } else if (a->dp[0] < b) {
 801b9ee:	bf8c      	ite	hi
 801b9f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b9f4:	2000      	movls	r0, #0
 801b9f6:	4770      	bx	lr
    return FP_LT;
 801b9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9fc:	4770      	bx	lr
    return FP_GT;
 801b9fe:	2001      	movs	r0, #1
}
 801ba00:	4770      	bx	lr

0801ba02 <fp_cmp_mag>:
   if (a->used > b->used) {
 801ba02:	6803      	ldr	r3, [r0, #0]
 801ba04:	680a      	ldr	r2, [r1, #0]
 801ba06:	4293      	cmp	r3, r2
{
 801ba08:	b510      	push	{r4, lr}
   if (a->used > b->used) {
 801ba0a:	dc10      	bgt.n	801ba2e <fp_cmp_mag+0x2c>
   } else if (a->used < b->used) {
 801ba0c:	db11      	blt.n	801ba32 <fp_cmp_mag+0x30>
      for (x = a->used - 1; x >= 0; x--) {
 801ba0e:	3b01      	subs	r3, #1
          if (a->dp[x] > b->dp[x]) {
 801ba10:	3008      	adds	r0, #8
 801ba12:	3108      	adds	r1, #8
      for (x = a->used - 1; x >= 0; x--) {
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	da01      	bge.n	801ba1c <fp_cmp_mag+0x1a>
   return FP_EQ;
 801ba18:	2000      	movs	r0, #0
}
 801ba1a:	bd10      	pop	{r4, pc}
          if (a->dp[x] > b->dp[x]) {
 801ba1c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801ba20:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 801ba24:	4294      	cmp	r4, r2
 801ba26:	d802      	bhi.n	801ba2e <fp_cmp_mag+0x2c>
          } else if (a->dp[x] < b->dp[x]) {
 801ba28:	d303      	bcc.n	801ba32 <fp_cmp_mag+0x30>
      for (x = a->used - 1; x >= 0; x--) {
 801ba2a:	3b01      	subs	r3, #1
 801ba2c:	e7f2      	b.n	801ba14 <fp_cmp_mag+0x12>
      return FP_GT;
 801ba2e:	2001      	movs	r0, #1
 801ba30:	e7f3      	b.n	801ba1a <fp_cmp_mag+0x18>
      return FP_LT;
 801ba32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba36:	e7f0      	b.n	801ba1a <fp_cmp_mag+0x18>

0801ba38 <fp_add>:
{
 801ba38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sa = a->sign;
 801ba3c:	6847      	ldr	r7, [r0, #4]
  sb = b->sign;
 801ba3e:	f8d1 8004 	ldr.w	r8, [r1, #4]
  if (sa == sb) {
 801ba42:	4547      	cmp	r7, r8
{
 801ba44:	4605      	mov	r5, r0
 801ba46:	460e      	mov	r6, r1
 801ba48:	4614      	mov	r4, r2
  if (sa == sb) {
 801ba4a:	d104      	bne.n	801ba56 <fp_add+0x1e>
    c->sign = sa;
 801ba4c:	6057      	str	r7, [r2, #4]
}
 801ba4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ret = s_fp_add (a, b, c);
 801ba52:	f7ff bd88 	b.w	801b566 <s_fp_add>
    if (fp_cmp_mag (a, b) == FP_LT) {
 801ba56:	f7ff ffd4 	bl	801ba02 <fp_cmp_mag>
 801ba5a:	3001      	adds	r0, #1
      s_fp_sub (b, a, c);
 801ba5c:	bf09      	itett	eq
 801ba5e:	4630      	moveq	r0, r6
      s_fp_sub (a, b, c);
 801ba60:	4628      	movne	r0, r5
      c->sign = sb;
 801ba62:	f8c4 8004 	streq.w	r8, [r4, #4]
      s_fp_sub (b, a, c);
 801ba66:	4622      	moveq	r2, r4
 801ba68:	bf0f      	iteee	eq
 801ba6a:	4629      	moveq	r1, r5
      c->sign = sa;
 801ba6c:	6067      	strne	r7, [r4, #4]
      s_fp_sub (a, b, c);
 801ba6e:	4622      	movne	r2, r4
 801ba70:	4631      	movne	r1, r6
 801ba72:	f7ff fdbf 	bl	801b5f4 <s_fp_sub>
}
 801ba76:	2000      	movs	r0, #0
 801ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba7c <fp_sub>:
{
 801ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sa = a->sign;
 801ba7e:	6844      	ldr	r4, [r0, #4]
  if (sa != sb) {
 801ba80:	684b      	ldr	r3, [r1, #4]
 801ba82:	429c      	cmp	r4, r3
{
 801ba84:	4607      	mov	r7, r0
 801ba86:	460e      	mov	r6, r1
 801ba88:	4615      	mov	r5, r2
  if (sa != sb) {
 801ba8a:	d004      	beq.n	801ba96 <fp_sub+0x1a>
    c->sign = sa;
 801ba8c:	6054      	str	r4, [r2, #4]
}
 801ba8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ret = s_fp_add (a, b, c);
 801ba92:	f7ff bd68 	b.w	801b566 <s_fp_add>
    if (fp_cmp_mag (a, b) != FP_LT) {
 801ba96:	f7ff ffb4 	bl	801ba02 <fp_cmp_mag>
 801ba9a:	3001      	adds	r0, #1
 801ba9c:	d007      	beq.n	801baae <fp_sub+0x32>
      c->sign = sa;
 801ba9e:	606c      	str	r4, [r5, #4]
      s_fp_sub (a, b, c);
 801baa0:	462a      	mov	r2, r5
 801baa2:	4631      	mov	r1, r6
 801baa4:	4638      	mov	r0, r7
      s_fp_sub (b, a, c);
 801baa6:	f7ff fda5 	bl	801b5f4 <s_fp_sub>
}
 801baaa:	2000      	movs	r0, #0
 801baac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
 801baae:	fab4 f484 	clz	r4, r4
 801bab2:	0964      	lsrs	r4, r4, #5
 801bab4:	606c      	str	r4, [r5, #4]
      s_fp_sub (b, a, c);
 801bab6:	462a      	mov	r2, r5
 801bab8:	4639      	mov	r1, r7
 801baba:	4630      	mov	r0, r6
 801babc:	e7f3      	b.n	801baa6 <fp_sub+0x2a>

0801babe <fp_cmp>:
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 801babe:	6842      	ldr	r2, [r0, #4]
 801bac0:	2a01      	cmp	r2, #1
{
 801bac2:	460b      	mov	r3, r1
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 801bac4:	d104      	bne.n	801bad0 <fp_cmp+0x12>
 801bac6:	684a      	ldr	r2, [r1, #4]
 801bac8:	b942      	cbnz	r2, 801badc <fp_cmp+0x1e>
      return FP_LT;
 801baca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bace:	e003      	b.n	801bad8 <fp_cmp+0x1a>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
 801bad0:	b942      	cbnz	r2, 801bae4 <fp_cmp+0x26>
 801bad2:	684a      	ldr	r2, [r1, #4]
 801bad4:	2a01      	cmp	r2, #1
 801bad6:	d105      	bne.n	801bae4 <fp_cmp+0x26>
}
 801bad8:	4610      	mov	r0, r2
 801bada:	4770      	bx	lr
         return fp_cmp_mag(b, a);
 801badc:	4601      	mov	r1, r0
 801bade:	4618      	mov	r0, r3
         return fp_cmp_mag(a, b);
 801bae0:	f7ff bf8f 	b.w	801ba02 <fp_cmp_mag>
 801bae4:	4619      	mov	r1, r3
 801bae6:	e7fb      	b.n	801bae0 <fp_cmp+0x22>

0801bae8 <fp_montgomery_setup>:
  b = a->dp[0];
 801bae8:	6883      	ldr	r3, [r0, #8]
  if ((b & 1) == 0) {
 801baea:	07da      	lsls	r2, r3, #31
 801baec:	d514      	bpl.n	801bb18 <fp_montgomery_setup+0x30>
  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 801baee:	1c98      	adds	r0, r3, #2
 801baf0:	0040      	lsls	r0, r0, #1
 801baf2:	f000 0008 	and.w	r0, r0, #8
 801baf6:	4418      	add	r0, r3
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 801baf8:	fb00 f203 	mul.w	r2, r0, r3
 801bafc:	f1c2 0202 	rsb	r2, r2, #2
 801bb00:	4350      	muls	r0, r2
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 801bb02:	fb00 f203 	mul.w	r2, r0, r3
 801bb06:	f1c2 0202 	rsb	r2, r2, #2
 801bb0a:	4342      	muls	r2, r0
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 801bb0c:	4353      	muls	r3, r2
 801bb0e:	3b02      	subs	r3, #2
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
 801bb10:	4353      	muls	r3, r2
 801bb12:	600b      	str	r3, [r1, #0]
  return FP_OKAY;
 801bb14:	2000      	movs	r0, #0
 801bb16:	4770      	bx	lr
    return FP_VAL;
 801bb18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801bb1c:	4770      	bx	lr

0801bb1e <fp_montgomery_reduce_ex>:
{
 801bb1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (m->used > (FP_SIZE/2)) {
 801bb22:	680b      	ldr	r3, [r1, #0]
{
 801bb24:	b085      	sub	sp, #20
   if (m->used > (FP_SIZE/2)) {
 801bb26:	2b0c      	cmp	r3, #12
{
 801bb28:	4604      	mov	r4, r0
 801bb2a:	460e      	mov	r6, r1
 801bb2c:	9203      	str	r2, [sp, #12]
   if (m->used > (FP_SIZE/2)) {
 801bb2e:	f300 8095 	bgt.w	801bc5c <fp_montgomery_reduce_ex+0x13e>
   c = (fp_digit*)XMALLOC(sizeof(fp_digit)*(FP_SIZE + 1), NULL, DYNAMIC_TYPE_BIGINT);
 801bb32:	2064      	movs	r0, #100	; 0x64
 801bb34:	f001 ff16 	bl	801d964 <malloc>
   if (c == NULL) {
 801bb38:	4605      	mov	r5, r0
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	f000 8091 	beq.w	801bc62 <fp_montgomery_reduce_ex+0x144>
   XMEMSET(c, 0, sizeof(fp_digit)*(FP_SIZE + 1));
 801bb40:	2264      	movs	r2, #100	; 0x64
 801bb42:	2100      	movs	r1, #0
 801bb44:	f001 ff56 	bl	801d9f4 <memset>
   pa = m->used;
 801bb48:	6833      	ldr	r3, [r6, #0]
   if (a->used <= m->used) {
 801bb4a:	6822      	ldr	r2, [r4, #0]
 801bb4c:	429a      	cmp	r2, r3
      oldused = m->used * 2;
 801bb4e:	bfcc      	ite	gt
 801bb50:	ea4f 0843 	movgt.w	r8, r3, lsl #1
 801bb54:	4698      	movle	r8, r3
   for (x = 0; x < oldused; x++) {
 801bb56:	f104 0108 	add.w	r1, r4, #8
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	4590      	cmp	r8, r2
 801bb5e:	dc39      	bgt.n	801bbd4 <fp_montgomery_reduce_ex+0xb6>
 801bb60:	46ae      	mov	lr, r5
 801bb62:	0099      	lsls	r1, r3, #2
   for (x = 0; x < pa; x++) {
 801bb64:	f04f 0c00 	mov.w	ip, #0
 801bb68:	459c      	cmp	ip, r3
 801bb6a:	db39      	blt.n	801bbe0 <fp_montgomery_reduce_ex+0xc2>
  _c   = c + pa;
 801bb6c:	eb05 0e01 	add.w	lr, r5, r1
  tmpm = a->dp;
 801bb70:	f104 0208 	add.w	r2, r4, #8
  for (x = 0; x < pa+1; x++) {
 801bb74:	f104 0c04 	add.w	ip, r4, #4
 801bb78:	2700      	movs	r7, #0
 801bb7a:	429f      	cmp	r7, r3
 801bb7c:	dd62      	ble.n	801bc44 <fp_montgomery_reduce_ex+0x126>
 801bb7e:	1c5f      	adds	r7, r3, #1
 801bb80:	f101 0104 	add.w	r1, r1, #4
 801bb84:	f103 0001 	add.w	r0, r3, #1
 801bb88:	bfb8      	it	lt
 801bb8a:	2100      	movlt	r1, #0
 801bb8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bb90:	4411      	add	r1, r2
 801bb92:	3301      	adds	r3, #1
     *tmpm++ = 0;
 801bb94:	2200      	movs	r2, #0
  for (; x < oldused; x++) {
 801bb96:	4598      	cmp	r8, r3
 801bb98:	dc5a      	bgt.n	801bc50 <fp_montgomery_reduce_ex+0x132>
  a->used = pa+1;
 801bb9a:	6020      	str	r0, [r4, #0]
  fp_clamp(a);
 801bb9c:	6823      	ldr	r3, [r4, #0]
 801bb9e:	b133      	cbz	r3, 801bbae <fp_montgomery_reduce_ex+0x90>
 801bba0:	1e5a      	subs	r2, r3, #1
 801bba2:	3301      	adds	r3, #1
 801bba4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d055      	beq.n	801bc58 <fp_montgomery_reduce_ex+0x13a>
 801bbac:	6863      	ldr	r3, [r4, #4]
 801bbae:	6063      	str	r3, [r4, #4]
  if (fp_cmp_mag (a, m) != FP_LT) {
 801bbb0:	4631      	mov	r1, r6
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	f7ff ff25 	bl	801ba02 <fp_cmp_mag>
 801bbb8:	3001      	adds	r0, #1
 801bbba:	d004      	beq.n	801bbc6 <fp_montgomery_reduce_ex+0xa8>
    s_fp_sub (a, m, a);
 801bbbc:	4622      	mov	r2, r4
 801bbbe:	4631      	mov	r1, r6
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f7ff fd17 	bl	801b5f4 <s_fp_sub>
  XFREE(c, NULL, DYNAMIC_TYPE_BIGINT);
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	f001 fed4 	bl	801d974 <free>
  return FP_OKAY;
 801bbcc:	2000      	movs	r0, #0
}
 801bbce:	b005      	add	sp, #20
 801bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       c[x] = a->dp[x];
 801bbd4:	f851 0b04 	ldr.w	r0, [r1], #4
 801bbd8:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
   for (x = 0; x < oldused; x++) {
 801bbdc:	3201      	adds	r2, #1
 801bbde:	e7bd      	b.n	801bb5c <fp_montgomery_reduce_ex+0x3e>
       LOOP_START;
 801bbe0:	4677      	mov	r7, lr
 801bbe2:	9803      	ldr	r0, [sp, #12]
 801bbe4:	f857 2904 	ldr.w	r2, [r7], #-4
 801bbe8:	4342      	muls	r2, r0
 801bbea:	9202      	str	r2, [sp, #8]
       tmpm = m->dp;
 801bbec:	f106 0208 	add.w	r2, r6, #8
 801bbf0:	9201      	str	r2, [sp, #4]
       fp_digit cy = 0;
 801bbf2:	2200      	movs	r2, #0
       y = 0;
 801bbf4:	4691      	mov	r9, r2
          INNERMUL;
 801bbf6:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801bbfa:	f8dd a004 	ldr.w	sl, [sp, #4]
 801bbfe:	eb10 0b02 	adds.w	fp, r0, r2
 801bc02:	f85a 0b04 	ldr.w	r0, [sl], #4
 801bc06:	f8cd a004 	str.w	sl, [sp, #4]
 801bc0a:	f04f 0200 	mov.w	r2, #0
 801bc0e:	f8dd a008 	ldr.w	sl, [sp, #8]
 801bc12:	4152      	adcs	r2, r2
       for (; y < pa; y++) {
 801bc14:	f109 0901 	add.w	r9, r9, #1
          INNERMUL;
 801bc18:	fbea b200 	umlal	fp, r2, sl, r0
       for (; y < pa; y++) {
 801bc1c:	454b      	cmp	r3, r9
          INNERMUL;
 801bc1e:	f8c7 b000 	str.w	fp, [r7]
       for (; y < pa; y++) {
 801bc22:	d1e8      	bne.n	801bbf6 <fp_montgomery_reduce_ex+0xd8>
 801bc24:	eb01 070e 	add.w	r7, r1, lr
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 801bc28:	b922      	cbnz	r2, 801bc34 <fp_montgomery_reduce_ex+0x116>
   for (x = 0; x < pa; x++) {
 801bc2a:	f10c 0c01 	add.w	ip, ip, #1
 801bc2e:	f10e 0e04 	add.w	lr, lr, #4
 801bc32:	e799      	b.n	801bb68 <fp_montgomery_reduce_ex+0x4a>
           PROPCARRY;
 801bc34:	6838      	ldr	r0, [r7, #0]
 801bc36:	1882      	adds	r2, r0, r2
 801bc38:	f847 2b04 	str.w	r2, [r7], #4
 801bc3c:	bf2c      	ite	cs
 801bc3e:	2201      	movcs	r2, #1
 801bc40:	2200      	movcc	r2, #0
           ++_c;
 801bc42:	e7f1      	b.n	801bc28 <fp_montgomery_reduce_ex+0x10a>
     *tmpm++ = *_c++;
 801bc44:	f85e 0027 	ldr.w	r0, [lr, r7, lsl #2]
 801bc48:	f84c 0f04 	str.w	r0, [ip, #4]!
  for (x = 0; x < pa+1; x++) {
 801bc4c:	3701      	adds	r7, #1
 801bc4e:	e794      	b.n	801bb7a <fp_montgomery_reduce_ex+0x5c>
     *tmpm++ = 0;
 801bc50:	f841 2b04 	str.w	r2, [r1], #4
  for (; x < oldused; x++) {
 801bc54:	3301      	adds	r3, #1
 801bc56:	e79e      	b.n	801bb96 <fp_montgomery_reduce_ex+0x78>
  fp_clamp(a);
 801bc58:	6022      	str	r2, [r4, #0]
 801bc5a:	e79f      	b.n	801bb9c <fp_montgomery_reduce_ex+0x7e>
      return FP_VAL;
 801bc5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc60:	e7b5      	b.n	801bbce <fp_montgomery_reduce_ex+0xb0>
      return FP_MEM;
 801bc62:	f06f 0001 	mvn.w	r0, #1
 801bc66:	e7b2      	b.n	801bbce <fp_montgomery_reduce_ex+0xb0>

0801bc68 <fp_montgomery_reduce>:
  return fp_montgomery_reduce_ex(a, m, mp, 1);
 801bc68:	2301      	movs	r3, #1
 801bc6a:	f7ff bf58 	b.w	801bb1e <fp_montgomery_reduce_ex>

0801bc6e <fp_to_unsigned_bin_at_pos>:
{
 801bc6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   int j = 0;
 801bc70:	2500      	movs	r5, #0
 801bc72:	4410      	add	r0, r2
   for (i = 0; i < t->used-1; ) {
 801bc74:	462e      	mov	r6, r5
 801bc76:	680f      	ldr	r7, [r1, #0]
       b[x++] = (unsigned char)(t->dp[i] >> j);
 801bc78:	1cb3      	adds	r3, r6, #2
   for (i = 0; i < t->used-1; ) {
 801bc7a:	3f01      	subs	r7, #1
 801bc7c:	42b7      	cmp	r7, r6
       b[x++] = (unsigned char)(t->dp[i] >> j);
 801bc7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801bc82:	eba0 0402 	sub.w	r4, r0, r2
   for (i = 0; i < t->used-1; ) {
 801bc86:	dc03      	bgt.n	801bc90 <fp_to_unsigned_bin_at_pos+0x22>
 801bc88:	1911      	adds	r1, r2, r4
 801bc8a:	1a88      	subs	r0, r1, r2
   while (n != 0) {
 801bc8c:	b95b      	cbnz	r3, 801bca6 <fp_to_unsigned_bin_at_pos+0x38>
}
 801bc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       b[x++] = (unsigned char)(t->dp[i] >> j);
 801bc90:	40eb      	lsrs	r3, r5
 801bc92:	f800 3b01 	strb.w	r3, [r0], #1
       j += 8;
 801bc96:	f105 0308 	add.w	r3, r5, #8
       i += j == DIGIT_BIT;
 801bc9a:	2d18      	cmp	r5, #24
 801bc9c:	bf08      	it	eq
 801bc9e:	3601      	addeq	r6, #1
       j &= DIGIT_BIT - 1;
 801bca0:	f003 051f 	and.w	r5, r3, #31
 801bca4:	e7e7      	b.n	801bc76 <fp_to_unsigned_bin_at_pos+0x8>
       b[x++] = (unsigned char)n;
 801bca6:	f801 3b01 	strb.w	r3, [r1], #1
       n >>= 8;
 801bcaa:	0a1b      	lsrs	r3, r3, #8
 801bcac:	e7ed      	b.n	801bc8a <fp_to_unsigned_bin_at_pos+0x1c>

0801bcae <fp_is_bit_set>:
    if (b > FP_MAX_BITS)
 801bcae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801bcb2:	d80f      	bhi.n	801bcd4 <fp_is_bit_set+0x26>
    if ((fp_digit)a->used < i)
 801bcb4:	6802      	ldr	r2, [r0, #0]
 801bcb6:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
    i = b/DIGIT_BIT;
 801bcba:	ea4f 1351 	mov.w	r3, r1, lsr #5
    if ((fp_digit)a->used < i)
 801bcbe:	d30c      	bcc.n	801bcda <fp_is_bit_set+0x2c>
    return (int)((a->dp[i] >> b%DIGIT_BIT) & (fp_digit)1);
 801bcc0:	3302      	adds	r3, #2
 801bcc2:	f001 011f 	and.w	r1, r1, #31
 801bcc6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801bcca:	fa20 f101 	lsr.w	r1, r0, r1
 801bcce:	f001 0001 	and.w	r0, r1, #1
 801bcd2:	4770      	bx	lr
        return FP_VAL;
 801bcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcd8:	4770      	bx	lr
        return 0;
 801bcda:	2000      	movs	r0, #0
}
 801bcdc:	4770      	bx	lr

0801bcde <fp_count_bits>:
{
 801bcde:	4603      	mov	r3, r0
  if (a->used == 0) {
 801bce0:	6800      	ldr	r0, [r0, #0]
 801bce2:	b128      	cbz	r0, 801bcf0 <fp_count_bits+0x12>
  r = (a->used - 1) * DIGIT_BIT;
 801bce4:	1e42      	subs	r2, r0, #1
 801bce6:	0150      	lsls	r0, r2, #5
  q = a->dp[a->used - 1];
 801bce8:	3202      	adds	r2, #2
 801bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  while (q > ((fp_digit) 0)) {
 801bcee:	b903      	cbnz	r3, 801bcf2 <fp_count_bits+0x14>
}
 801bcf0:	4770      	bx	lr
    ++r;
 801bcf2:	3001      	adds	r0, #1
    q >>= ((fp_digit) 1);
 801bcf4:	085b      	lsrs	r3, r3, #1
 801bcf6:	e7fa      	b.n	801bcee <fp_count_bits+0x10>

0801bcf8 <fp_unsigned_bin_size>:
{
 801bcf8:	b508      	push	{r3, lr}
  int     size = fp_count_bits (a);
 801bcfa:	f7ff fff0 	bl	801bcde <fp_count_bits>
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
 801bcfe:	f010 0307 	ands.w	r3, r0, #7
 801bd02:	bf18      	it	ne
 801bd04:	2301      	movne	r3, #1
 801bd06:	2800      	cmp	r0, #0
 801bd08:	bfb8      	it	lt
 801bd0a:	3007      	addlt	r0, #7
}
 801bd0c:	eb03 00e0 	add.w	r0, r3, r0, asr #3
 801bd10:	bd08      	pop	{r3, pc}

0801bd12 <fp_leading_bit>:
{
 801bd12:	4602      	mov	r2, r0
    if (a->used != 0) {
 801bd14:	6800      	ldr	r0, [r0, #0]
 801bd16:	b160      	cbz	r0, 801bd32 <fp_leading_bit+0x20>
        fp_digit q = a->dp[a->used - 1];
 801bd18:	1c43      	adds	r3, r0, #1
    int bit = 0;
 801bd1a:	2000      	movs	r0, #0
        fp_digit q = a->dp[a->used - 1];
 801bd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd20:	2204      	movs	r2, #4
            if ((unsigned char)q != 0)
 801bd22:	b2d9      	uxtb	r1, r3
 801bd24:	b109      	cbz	r1, 801bd2a <fp_leading_bit+0x18>
                bit = (q & 0x80) != 0;
 801bd26:	f3c3 10c0 	ubfx	r0, r3, #7, #1
        while (qSz > 0) {
 801bd2a:	3a01      	subs	r2, #1
            q >>= 8;
 801bd2c:	ea4f 2313 	mov.w	r3, r3, lsr #8
        while (qSz > 0) {
 801bd30:	d1f7      	bne.n	801bd22 <fp_leading_bit+0x10>
}
 801bd32:	4770      	bx	lr

0801bd34 <fp_lshd>:
    if (a->used + x > FP_SIZE) return FP_VAL;
 801bd34:	6803      	ldr	r3, [r0, #0]
 801bd36:	185a      	adds	r2, r3, r1
 801bd38:	2a18      	cmp	r2, #24
{
 801bd3a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (a->used + x > FP_SIZE) return FP_VAL;
 801bd3c:	dc2b      	bgt.n	801bd96 <fp_lshd+0x62>
    y = a->used + x - 1;
 801bd3e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    a->used = y + 1;
 801bd42:	1c54      	adds	r4, r2, #1
 801bd44:	f06f 0603 	mvn.w	r6, #3
 801bd48:	6002      	str	r2, [r0, #0]
    for (; y >= x; y--) {
 801bd4a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801bd4e:	434e      	muls	r6, r1
    y = a->used + x - 1;
 801bd50:	4665      	mov	r5, ip
    for (; y >= x; y--) {
 801bd52:	428d      	cmp	r5, r1
 801bd54:	da14      	bge.n	801bd80 <fp_lshd+0x4c>
 801bd56:	425b      	negs	r3, r3
 801bd58:	428a      	cmp	r2, r1
 801bd5a:	bfb8      	it	lt
 801bd5c:	2300      	movlt	r3, #0
 801bd5e:	4463      	add	r3, ip
        a->dp[y] = 0;
 801bd60:	f100 0208 	add.w	r2, r0, #8
 801bd64:	2100      	movs	r1, #0
    for (; y >= 0; y--) {
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	da0f      	bge.n	801bd8a <fp_lshd+0x56>
    fp_clamp(a);
 801bd6a:	6803      	ldr	r3, [r0, #0]
 801bd6c:	b12b      	cbz	r3, 801bd7a <fp_lshd+0x46>
 801bd6e:	1e5a      	subs	r2, r3, #1
 801bd70:	3301      	adds	r3, #1
 801bd72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bd76:	b163      	cbz	r3, 801bd92 <fp_lshd+0x5e>
 801bd78:	6843      	ldr	r3, [r0, #4]
 801bd7a:	6043      	str	r3, [r0, #4]
 801bd7c:	2000      	movs	r0, #0
}
 801bd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->dp[y] = a->dp[y-x];
 801bd80:	59a7      	ldr	r7, [r4, r6]
 801bd82:	f844 7904 	str.w	r7, [r4], #-4
    for (; y >= x; y--) {
 801bd86:	3d01      	subs	r5, #1
 801bd88:	e7e3      	b.n	801bd52 <fp_lshd+0x1e>
        a->dp[y] = 0;
 801bd8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (; y >= 0; y--) {
 801bd8e:	3b01      	subs	r3, #1
 801bd90:	e7e9      	b.n	801bd66 <fp_lshd+0x32>
    fp_clamp(a);
 801bd92:	6002      	str	r2, [r0, #0]
 801bd94:	e7e9      	b.n	801bd6a <fp_lshd+0x36>
    if (a->used + x > FP_SIZE) return FP_VAL;
 801bd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd9a:	e7f0      	b.n	801bd7e <fp_lshd+0x4a>

0801bd9c <fp_zero>:
    a->used = 0;
 801bd9c:	2100      	movs	r1, #0
    a->sign = FP_ZPOS;
 801bd9e:	e9c0 1100 	strd	r1, r1, [r0]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 801bda2:	2260      	movs	r2, #96	; 0x60
 801bda4:	3008      	adds	r0, #8
 801bda6:	f001 be25 	b.w	801d9f4 <memset>

0801bdaa <fp_2expt>:
{
 801bdaa:	b538      	push	{r3, r4, r5, lr}
 801bdac:	460c      	mov	r4, r1
 801bdae:	4605      	mov	r5, r0
   fp_zero (a);
 801bdb0:	f7ff fff4 	bl	801bd9c <fp_zero>
   if (z >= FP_SIZE) {
 801bdb4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 801bdb8:	d20a      	bcs.n	801bdd0 <fp_2expt+0x26>
   z = b / DIGIT_BIT;
 801bdba:	1163      	asrs	r3, r4, #5
  a->used = z + 1;
 801bdbc:	1c5a      	adds	r2, r3, #1
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 801bdbe:	f004 041f 	and.w	r4, r4, #31
 801bdc2:	3302      	adds	r3, #2
 801bdc4:	2101      	movs	r1, #1
 801bdc6:	fa01 f404 	lsl.w	r4, r1, r4
  a->used = z + 1;
 801bdca:	602a      	str	r2, [r5, #0]
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 801bdcc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 801bdd0:	bd38      	pop	{r3, r4, r5, pc}

0801bdd2 <fp_read_unsigned_bin>:
{
 801bdd2:	b570      	push	{r4, r5, r6, lr}
 801bdd4:	4614      	mov	r4, r2
 801bdd6:	4605      	mov	r5, r0
 801bdd8:	460e      	mov	r6, r1
  fp_zero (a);
 801bdda:	f7ff ffdf 	bl	801bd9c <fp_zero>
  if (c == 0) {
 801bdde:	b1ac      	cbz	r4, 801be0c <fp_read_unsigned_bin+0x3a>
  if (c > 0 && (word32)c > maxC) {
 801bde0:	2c60      	cmp	r4, #96	; 0x60
     int excess = (c - maxC);
 801bde2:	bfc2      	ittt	gt
 801bde4:	3c60      	subgt	r4, #96	; 0x60
     b += excess;
 801bde6:	1936      	addgt	r6, r6, r4
     c -= excess;
 801bde8:	2460      	movgt	r4, #96	; 0x60
     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
 801bdea:	1ce2      	adds	r2, r4, #3
 801bdec:	462b      	mov	r3, r5
 801bdee:	0892      	lsrs	r2, r2, #2
 801bdf0:	f843 2b08 	str.w	r2, [r3], #8
     for (c -= 1; c >= 0; c -= 1) {
 801bdf4:	3c01      	subs	r4, #1
 801bdf6:	2c00      	cmp	r4, #0
 801bdf8:	da0a      	bge.n	801be10 <fp_read_unsigned_bin+0x3e>
  fp_clamp (a);
 801bdfa:	682b      	ldr	r3, [r5, #0]
 801bdfc:	b12b      	cbz	r3, 801be0a <fp_read_unsigned_bin+0x38>
 801bdfe:	1e5a      	subs	r2, r3, #1
 801be00:	3301      	adds	r3, #1
 801be02:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801be06:	b13b      	cbz	r3, 801be18 <fp_read_unsigned_bin+0x46>
 801be08:	686b      	ldr	r3, [r5, #4]
 801be0a:	606b      	str	r3, [r5, #4]
}
 801be0c:	2000      	movs	r0, #0
 801be0e:	bd70      	pop	{r4, r5, r6, pc}
       pd[c] = *b++;
 801be10:	f816 2b01 	ldrb.w	r2, [r6], #1
 801be14:	551a      	strb	r2, [r3, r4]
 801be16:	e7ed      	b.n	801bdf4 <fp_read_unsigned_bin+0x22>
  fp_clamp (a);
 801be18:	602a      	str	r2, [r5, #0]
 801be1a:	e7ee      	b.n	801bdfa <fp_read_unsigned_bin+0x28>

0801be1c <fp_set>:
{
 801be1c:	b538      	push	{r3, r4, r5, lr}
 801be1e:	4605      	mov	r5, r0
 801be20:	460c      	mov	r4, r1
   fp_zero(a);
 801be22:	f7ff ffbb 	bl	801bd9c <fp_zero>
   a->dp[0] = b;
 801be26:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
 801be28:	3c00      	subs	r4, #0
 801be2a:	bf18      	it	ne
 801be2c:	2401      	movne	r4, #1
 801be2e:	602c      	str	r4, [r5, #0]
}
 801be30:	bd38      	pop	{r3, r4, r5, pc}

0801be32 <fp_montgomery_calc_normalization>:
{
 801be32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be34:	4605      	mov	r5, r0
  bits = fp_count_bits (b) % DIGIT_BIT;
 801be36:	4608      	mov	r0, r1
 801be38:	f7ff ff51 	bl	801bcde <fp_count_bits>
  if (!bits) bits = DIGIT_BIT;
 801be3c:	f010 041f 	ands.w	r4, r0, #31
{
 801be40:	460e      	mov	r6, r1
  if (!bits) bits = DIGIT_BIT;
 801be42:	d024      	beq.n	801be8e <fp_montgomery_calc_normalization+0x5c>
  bits = fp_count_bits (b) % DIGIT_BIT;
 801be44:	4240      	negs	r0, r0
 801be46:	f000 001f 	and.w	r0, r0, #31
 801be4a:	bf58      	it	pl
 801be4c:	4244      	negpl	r4, r0
  if (b->used > 1) {
 801be4e:	6831      	ldr	r1, [r6, #0]
 801be50:	2901      	cmp	r1, #1
 801be52:	dd1e      	ble.n	801be92 <fp_montgomery_calc_normalization+0x60>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
 801be54:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 801be58:	3921      	subs	r1, #33	; 0x21
 801be5a:	4628      	mov	r0, r5
 801be5c:	f7ff ffa5 	bl	801bdaa <fp_2expt>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 801be60:	3c01      	subs	r4, #1
    int err = fp_mul_2 (a, a);
 801be62:	4629      	mov	r1, r5
 801be64:	4628      	mov	r0, r5
 801be66:	f7ff fc0e 	bl	801b686 <fp_mul_2>
    if (err != FP_OKAY) {
 801be6a:	4607      	mov	r7, r0
 801be6c:	b968      	cbnz	r0, 801be8a <fp_montgomery_calc_normalization+0x58>
    if (fp_cmp_mag (a, b) != FP_LT) {
 801be6e:	4631      	mov	r1, r6
 801be70:	4628      	mov	r0, r5
 801be72:	f7ff fdc6 	bl	801ba02 <fp_cmp_mag>
 801be76:	3001      	adds	r0, #1
 801be78:	d004      	beq.n	801be84 <fp_montgomery_calc_normalization+0x52>
      s_fp_sub (a, b, a);
 801be7a:	462a      	mov	r2, r5
 801be7c:	4631      	mov	r1, r6
 801be7e:	4628      	mov	r0, r5
 801be80:	f7ff fbb8 	bl	801b5f4 <s_fp_sub>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 801be84:	3401      	adds	r4, #1
 801be86:	2c20      	cmp	r4, #32
 801be88:	d1eb      	bne.n	801be62 <fp_montgomery_calc_normalization+0x30>
}
 801be8a:	4638      	mov	r0, r7
 801be8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!bits) bits = DIGIT_BIT;
 801be8e:	2420      	movs	r4, #32
 801be90:	e7dd      	b.n	801be4e <fp_montgomery_calc_normalization+0x1c>
   a->dp[0] = b;
 801be92:	2401      	movs	r4, #1
   fp_zero(a);
 801be94:	4628      	mov	r0, r5
 801be96:	f7ff ff81 	bl	801bd9c <fp_zero>
   a->dp[0] = b;
 801be9a:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
 801be9c:	602c      	str	r4, [r5, #0]
     bits = 1;
 801be9e:	e7df      	b.n	801be60 <fp_montgomery_calc_normalization+0x2e>

0801bea0 <fp_rshd>:
{
 801bea0:	b4f0      	push	{r4, r5, r6, r7}
  if (x >= a->used) {
 801bea2:	6804      	ldr	r4, [r0, #0]
 801bea4:	428c      	cmp	r4, r1
{
 801bea6:	4603      	mov	r3, r0
  if (x >= a->used) {
 801bea8:	dd16      	ble.n	801bed8 <fp_rshd+0x38>
 801beaa:	f100 0608 	add.w	r6, r0, #8
 801beae:	4635      	mov	r5, r6
   for (y = 0; y < a->used - x; y++) {
 801beb0:	2200      	movs	r2, #0
 801beb2:	1a60      	subs	r0, r4, r1
 801beb4:	4290      	cmp	r0, r2
 801beb6:	dc12      	bgt.n	801bede <fp_rshd+0x3e>
 801beb8:	4602      	mov	r2, r0
      a->dp[y] = 0;
 801beba:	2100      	movs	r1, #0
   for (; y < a->used; y++) {
 801bebc:	4294      	cmp	r4, r2
 801bebe:	dc14      	bgt.n	801beea <fp_rshd+0x4a>
   a->used -= x;
 801bec0:	6018      	str	r0, [r3, #0]
   fp_clamp(a);
 801bec2:	681a      	ldr	r2, [r3, #0]
 801bec4:	b12a      	cbz	r2, 801bed2 <fp_rshd+0x32>
 801bec6:	1e51      	subs	r1, r2, #1
 801bec8:	3201      	adds	r2, #1
 801beca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bece:	b182      	cbz	r2, 801bef2 <fp_rshd+0x52>
 801bed0:	685a      	ldr	r2, [r3, #4]
 801bed2:	605a      	str	r2, [r3, #4]
}
 801bed4:	bcf0      	pop	{r4, r5, r6, r7}
 801bed6:	4770      	bx	lr
 801bed8:	bcf0      	pop	{r4, r5, r6, r7}
     fp_zero(a);
 801beda:	f7ff bf5f 	b.w	801bd9c <fp_zero>
      a->dp[y] = a->dp[y+x];
 801bede:	f855 7021 	ldr.w	r7, [r5, r1, lsl #2]
 801bee2:	f845 7b04 	str.w	r7, [r5], #4
   for (y = 0; y < a->used - x; y++) {
 801bee6:	3201      	adds	r2, #1
 801bee8:	e7e4      	b.n	801beb4 <fp_rshd+0x14>
      a->dp[y] = 0;
 801beea:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
   for (; y < a->used; y++) {
 801beee:	3201      	adds	r2, #1
 801bef0:	e7e4      	b.n	801bebc <fp_rshd+0x1c>
   fp_clamp(a);
 801bef2:	6019      	str	r1, [r3, #0]
 801bef4:	e7e5      	b.n	801bec2 <fp_rshd+0x22>

0801bef6 <fp_rshb>:
{
 801bef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (x <= 0) return;
 801bef8:	1e0c      	subs	r4, r1, #0
{
 801befa:	4605      	mov	r5, r0
    if (x <= 0) return;
 801befc:	dd1f      	ble.n	801bf3e <fp_rshb+0x48>
    if (x >= DIGIT_BIT) {
 801befe:	2c1f      	cmp	r4, #31
 801bf00:	dd05      	ble.n	801bf0e <fp_rshb+0x18>
        fp_rshd(c, x / DIGIT_BIT);
 801bf02:	1161      	asrs	r1, r4, #5
 801bf04:	f7ff ffcc 	bl	801bea0 <fp_rshd>
        if (D == 0) return;
 801bf08:	f014 041f 	ands.w	r4, r4, #31
 801bf0c:	d017      	beq.n	801bf3e <fp_rshb+0x48>
    if (fp_iszero(c)) return;
 801bf0e:	682b      	ldr	r3, [r5, #0]
 801bf10:	b1ab      	cbz	r3, 801bf3e <fp_rshb+0x48>
    shift = DIGIT_BIT - D;
 801bf12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    tmpc = c->dp + (c->used - 1);
 801bf16:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801bf1a:	40a1      	lsls	r1, r4
    shift = DIGIT_BIT - D;
 801bf1c:	f1c4 0720 	rsb	r7, r4, #32
    tmpc = c->dp + (c->used - 1);
 801bf20:	3204      	adds	r2, #4
    for (x = c->used - 1; x >= 0; x--) {
 801bf22:	3b01      	subs	r3, #1
 801bf24:	43c9      	mvns	r1, r1
    r = 0;
 801bf26:	2000      	movs	r0, #0
    for (x = c->used - 1; x >= 0; x--) {
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	da09      	bge.n	801bf40 <fp_rshb+0x4a>
    fp_clamp(c);
 801bf2c:	682b      	ldr	r3, [r5, #0]
 801bf2e:	b12b      	cbz	r3, 801bf3c <fp_rshb+0x46>
 801bf30:	1e5a      	subs	r2, r3, #1
 801bf32:	3301      	adds	r3, #1
 801bf34:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801bf38:	b173      	cbz	r3, 801bf58 <fp_rshb+0x62>
 801bf3a:	686b      	ldr	r3, [r5, #4]
 801bf3c:	606b      	str	r3, [r5, #4]
}
 801bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      rr = *tmpc & mask;
 801bf40:	f8d2 c000 	ldr.w	ip, [r2]
      *tmpc = (*tmpc >> D) | (r << shift);
 801bf44:	40b8      	lsls	r0, r7
 801bf46:	fa2c f604 	lsr.w	r6, ip, r4
 801bf4a:	4330      	orrs	r0, r6
 801bf4c:	f842 0904 	str.w	r0, [r2], #-4
    for (x = c->used - 1; x >= 0; x--) {
 801bf50:	3b01      	subs	r3, #1
      r = rr;
 801bf52:	ea0c 0001 	and.w	r0, ip, r1
 801bf56:	e7e7      	b.n	801bf28 <fp_rshb+0x32>
    fp_clamp(c);
 801bf58:	602a      	str	r2, [r5, #0]
 801bf5a:	e7e7      	b.n	801bf2c <fp_rshb+0x36>

0801bf5c <fp_sub_d>:
{
 801bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf5e:	4605      	mov	r5, r0
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801bf60:	2068      	movs	r0, #104	; 0x68
{
 801bf62:	460f      	mov	r7, r1
 801bf64:	4616      	mov	r6, r2
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801bf66:	f001 fcfd 	bl	801d964 <malloc>
 801bf6a:	4604      	mov	r4, r0
   if (tmp == NULL)
 801bf6c:	b180      	cbz	r0, 801bf90 <fp_sub_d+0x34>
    fp_zero(a);
 801bf6e:	f7ff ff15 	bl	801bd9c <fp_zero>
   fp_set(tmp, b);
 801bf72:	4639      	mov	r1, r7
 801bf74:	4620      	mov	r0, r4
 801bf76:	f7ff ff51 	bl	801be1c <fp_set>
     err = fp_sub(a, tmp, c);
 801bf7a:	4628      	mov	r0, r5
 801bf7c:	4632      	mov	r2, r6
 801bf7e:	4621      	mov	r1, r4
 801bf80:	f7ff fd7c 	bl	801ba7c <fp_sub>
 801bf84:	4605      	mov	r5, r0
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801bf86:	4620      	mov	r0, r4
 801bf88:	f001 fcf4 	bl	801d974 <free>
}
 801bf8c:	4628      	mov	r0, r5
 801bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       return FP_MEM;
 801bf90:	f06f 0501 	mvn.w	r5, #1
 801bf94:	e7fa      	b.n	801bf8c <fp_sub_d+0x30>

0801bf96 <mp_init>:
{
 801bf96:	b508      	push	{r3, lr}
  if (a)
 801bf98:	b108      	cbz	r0, 801bf9e <mp_init+0x8>
    fp_zero(a);
 801bf9a:	f7ff feff 	bl	801bd9c <fp_zero>
}
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	bd08      	pop	{r3, pc}

0801bfa2 <fp_forcezero>:
    if (a == NULL)
 801bfa2:	b138      	cbz	r0, 801bfb4 <fp_forcezero+0x12>
    a->used = 0;
 801bfa4:	2200      	movs	r2, #0
    a->sign = FP_ZPOS;
 801bfa6:	e9c0 2200 	strd	r2, r2, [r0]
    ForceZero(a->dp, size * sizeof(fp_digit));
 801bfaa:	f100 0308 	add.w	r3, r0, #8
WC_MISC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 801bfae:	3068      	adds	r0, #104	; 0x68
    while (len--) *z++ = 0;
 801bfb0:	4283      	cmp	r3, r0
 801bfb2:	d100      	bne.n	801bfb6 <fp_forcezero+0x14>
}
 801bfb4:	4770      	bx	lr
 801bfb6:	f803 2b01 	strb.w	r2, [r3], #1
 801bfba:	e7f9      	b.n	801bfb0 <fp_forcezero+0xe>

0801bfbc <mp_forcezero>:
    fp_forcezero(a);
 801bfbc:	f7ff bff1 	b.w	801bfa2 <fp_forcezero>

0801bfc0 <mp_clear>:
    if (a == NULL)
 801bfc0:	b108      	cbz	r0, 801bfc6 <mp_clear+0x6>
    fp_clear(a);
 801bfc2:	f7ff beeb 	b.w	801bd9c <fp_zero>
}
 801bfc6:	4770      	bx	lr

0801bfc8 <mp_free>:
 801bfc8:	4770      	bx	lr

0801bfca <mp_init_multi>:
{
 801bfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfce:	460e      	mov	r6, r1
 801bfd0:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 801bfd4:	4615      	mov	r5, r2
 801bfd6:	461c      	mov	r4, r3
    if (a)
 801bfd8:	b108      	cbz	r0, 801bfde <mp_init_multi+0x14>
    fp_zero(a);
 801bfda:	f7ff fedf 	bl	801bd9c <fp_zero>
    if (b)
 801bfde:	b116      	cbz	r6, 801bfe6 <mp_init_multi+0x1c>
    fp_zero(a);
 801bfe0:	4630      	mov	r0, r6
 801bfe2:	f7ff fedb 	bl	801bd9c <fp_zero>
    if (c)
 801bfe6:	b115      	cbz	r5, 801bfee <mp_init_multi+0x24>
    fp_zero(a);
 801bfe8:	4628      	mov	r0, r5
 801bfea:	f7ff fed7 	bl	801bd9c <fp_zero>
    if (d)
 801bfee:	b114      	cbz	r4, 801bff6 <mp_init_multi+0x2c>
    fp_zero(a);
 801bff0:	4620      	mov	r0, r4
 801bff2:	f7ff fed3 	bl	801bd9c <fp_zero>
    if (e)
 801bff6:	f1b8 0f00 	cmp.w	r8, #0
 801bffa:	d002      	beq.n	801c002 <mp_init_multi+0x38>
    fp_zero(a);
 801bffc:	4640      	mov	r0, r8
 801bffe:	f7ff fecd 	bl	801bd9c <fp_zero>
    if (f)
 801c002:	b117      	cbz	r7, 801c00a <mp_init_multi+0x40>
    fp_zero(a);
 801c004:	4638      	mov	r0, r7
 801c006:	f7ff fec9 	bl	801bd9c <fp_zero>
}
 801c00a:	2000      	movs	r0, #0
 801c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c010 <mp_sub>:
  return fp_sub(a, b, c);
 801c010:	f7ff bd34 	b.w	801ba7c <fp_sub>

0801c014 <mp_submod_ct>:
  return fp_submod_ct(a, b, c, d);
 801c014:	f7ff bc2c 	b.w	801b870 <fp_submod_ct>

0801c018 <mp_addmod_ct>:
  return fp_addmod_ct(a, b, c, d);
 801c018:	f7ff bc7b 	b.w	801b912 <fp_addmod_ct>

0801c01c <mp_cmp>:
  return fp_cmp(a, b);
 801c01c:	f7ff bd4f 	b.w	801babe <fp_cmp>

0801c020 <mp_cmp_d>:
  return fp_cmp_d(a, b);
 801c020:	f7ff bcd6 	b.w	801b9d0 <fp_cmp_d>

0801c024 <mp_unsigned_bin_size>:
  return fp_unsigned_bin_size(a);
 801c024:	f7ff be68 	b.w	801bcf8 <fp_unsigned_bin_size>

0801c028 <mp_read_unsigned_bin>:
  return fp_read_unsigned_bin(a, b, c);
 801c028:	f7ff bed3 	b.w	801bdd2 <fp_read_unsigned_bin>

0801c02c <mp_sub_d>:
  return fp_sub_d(a, b, c);
 801c02c:	f7ff bf96 	b.w	801bf5c <fp_sub_d>

0801c030 <fp_copy>:
    if (a != b) {
 801c030:	4288      	cmp	r0, r1
{
 801c032:	460b      	mov	r3, r1
    if (a != b) {
 801c034:	d00a      	beq.n	801c04c <fp_copy+0x1c>
        b->used = a->used;
 801c036:	6802      	ldr	r2, [r0, #0]
 801c038:	600a      	str	r2, [r1, #0]
        b->sign = a->sign;
 801c03a:	6842      	ldr	r2, [r0, #4]
 801c03c:	604a      	str	r2, [r1, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
 801c03e:	f100 0108 	add.w	r1, r0, #8
 801c042:	2260      	movs	r2, #96	; 0x60
 801c044:	f103 0008 	add.w	r0, r3, #8
 801c048:	f001 bcac 	b.w	801d9a4 <memcpy>
}
 801c04c:	4770      	bx	lr

0801c04e <fp_mul_2d>:
{
 801c04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c050:	460d      	mov	r5, r1
   fp_copy(a, c);
 801c052:	4611      	mov	r1, r2
{
 801c054:	4614      	mov	r4, r2
   fp_copy(a, c);
 801c056:	f7ff ffeb 	bl	801c030 <fp_copy>
   if (b >= DIGIT_BIT) {
 801c05a:	2d1f      	cmp	r5, #31
 801c05c:	dc0d      	bgt.n	801c07a <fp_mul_2d+0x2c>
   if (b != 0) {
 801c05e:	f015 061f 	ands.w	r6, r5, #31
 801c062:	d111      	bne.n	801c088 <fp_mul_2d+0x3a>
   fp_clamp(c);
 801c064:	6823      	ldr	r3, [r4, #0]
 801c066:	b12b      	cbz	r3, 801c074 <fp_mul_2d+0x26>
 801c068:	1e5a      	subs	r2, r3, #1
 801c06a:	3301      	adds	r3, #1
 801c06c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c070:	b383      	cbz	r3, 801c0d4 <fp_mul_2d+0x86>
 801c072:	6863      	ldr	r3, [r4, #4]
 801c074:	6063      	str	r3, [r4, #4]
   return FP_OKAY;
 801c076:	2000      	movs	r0, #0
 801c078:	e005      	b.n	801c086 <fp_mul_2d+0x38>
      int ret = fp_lshd(c, b/DIGIT_BIT);
 801c07a:	1169      	asrs	r1, r5, #5
 801c07c:	4620      	mov	r0, r4
 801c07e:	f7ff fe59 	bl	801bd34 <fp_lshd>
      if (ret != FP_OKAY)
 801c082:	2800      	cmp	r0, #0
 801c084:	d0eb      	beq.n	801c05e <fp_mul_2d+0x10>
}
 801c086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b %= DIGIT_BIT;
 801c088:	426d      	negs	r5, r5
      for (x = 0; x < c->used; x++) {
 801c08a:	4622      	mov	r2, r4
   b %= DIGIT_BIT;
 801c08c:	f005 051f 	and.w	r5, r5, #31
 801c090:	bf58      	it	pl
 801c092:	426e      	negpl	r6, r5
      for (x = 0; x < c->used; x++) {
 801c094:	2000      	movs	r0, #0
 801c096:	f852 3b08 	ldr.w	r3, [r2], #8
      shift = DIGIT_BIT - b;
 801c09a:	f1c6 0c20 	rsb	ip, r6, #32
      carry = 0;
 801c09e:	4601      	mov	r1, r0
      for (x = 0; x < c->used; x++) {
 801c0a0:	4283      	cmp	r3, r0
 801c0a2:	dc08      	bgt.n	801c0b6 <fp_mul_2d+0x68>
      if (carry && x < FP_SIZE) {
 801c0a4:	b189      	cbz	r1, 801c0ca <fp_mul_2d+0x7c>
 801c0a6:	2b17      	cmp	r3, #23
 801c0a8:	dc0f      	bgt.n	801c0ca <fp_mul_2d+0x7c>
         c->dp[c->used++] = carry;
 801c0aa:	1c5a      	adds	r2, r3, #1
 801c0ac:	3302      	adds	r3, #2
 801c0ae:	6022      	str	r2, [r4, #0]
 801c0b0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
      if (x == FP_SIZE)
 801c0b4:	e7d6      	b.n	801c064 <fp_mul_2d+0x16>
          carrytmp = c->dp[x] >> shift;
 801c0b6:	6817      	ldr	r7, [r2, #0]
          c->dp[x] = (c->dp[x] << b) + carry;
 801c0b8:	fa07 f506 	lsl.w	r5, r7, r6
 801c0bc:	4429      	add	r1, r5
 801c0be:	f842 1b04 	str.w	r1, [r2], #4
      for (x = 0; x < c->used; x++) {
 801c0c2:	3001      	adds	r0, #1
          carry = carrytmp;
 801c0c4:	fa27 f10c 	lsr.w	r1, r7, ip
 801c0c8:	e7ea      	b.n	801c0a0 <fp_mul_2d+0x52>
      if (x == FP_SIZE)
 801c0ca:	2b18      	cmp	r3, #24
 801c0cc:	d1ca      	bne.n	801c064 <fp_mul_2d+0x16>
         return FP_VAL;
 801c0ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c0d2:	e7d8      	b.n	801c086 <fp_mul_2d+0x38>
   fp_clamp(c);
 801c0d4:	6022      	str	r2, [r4, #0]
 801c0d6:	e7c5      	b.n	801c064 <fp_mul_2d+0x16>

0801c0d8 <fp_mul_comba>:
{
 801c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0dc:	b087      	sub	sp, #28
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801c0de:	6803      	ldr	r3, [r0, #0]
{
 801c0e0:	9205      	str	r2, [sp, #20]
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801c0e2:	680a      	ldr	r2, [r1, #0]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	2b17      	cmp	r3, #23
{
 801c0e8:	4606      	mov	r6, r0
 801c0ea:	460d      	mov	r5, r1
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801c0ec:	dc6e      	bgt.n	801c1cc <fp_mul_comba+0xf4>
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801c0ee:	2068      	movs	r0, #104	; 0x68
 801c0f0:	f001 fc38 	bl	801d964 <malloc>
   if (tmp == NULL)
 801c0f4:	4604      	mov	r4, r0
 801c0f6:	2800      	cmp	r0, #0
 801c0f8:	d06b      	beq.n	801c1d2 <fp_mul_comba+0xfa>
   pa = A->used + B->used;
 801c0fa:	4637      	mov	r7, r6
 801c0fc:	46a8      	mov	r8, r5
 801c0fe:	f857 3b08 	ldr.w	r3, [r7], #8
 801c102:	f858 2b08 	ldr.w	r2, [r8], #8
 801c106:	4413      	add	r3, r2
   if (pa >= FP_SIZE) {
 801c108:	2b17      	cmp	r3, #23
 801c10a:	bfa8      	it	ge
 801c10c:	2317      	movge	r3, #23
 801c10e:	9302      	str	r3, [sp, #8]
    fp_zero(a);
 801c110:	f7ff fe44 	bl	801bd9c <fp_zero>
   COMBA_CLEAR;
 801c114:	2200      	movs	r2, #0
 801c116:	f104 0308 	add.w	r3, r4, #8
 801c11a:	9303      	str	r3, [sp, #12]
 801c11c:	4611      	mov	r1, r2
   for (ix = 0; ix < pa; ix++) {
 801c11e:	4694      	mov	ip, r2
 801c120:	9b02      	ldr	r3, [sp, #8]
 801c122:	459c      	cmp	ip, r3
 801c124:	db18      	blt.n	801c158 <fp_mul_comba+0x80>
  dst->sign = A->sign ^ B->sign;
 801c126:	6871      	ldr	r1, [r6, #4]
 801c128:	686a      	ldr	r2, [r5, #4]
  dst->used = pa;
 801c12a:	6023      	str	r3, [r4, #0]
  fp_clamp(dst);
 801c12c:	6823      	ldr	r3, [r4, #0]
 801c12e:	b13b      	cbz	r3, 801c140 <fp_mul_comba+0x68>
 801c130:	1e58      	subs	r0, r3, #1
 801c132:	3301      	adds	r3, #1
 801c134:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d045      	beq.n	801c1c8 <fp_mul_comba+0xf0>
  dst->sign = A->sign ^ B->sign;
 801c13c:	ea81 0302 	eor.w	r3, r1, r2
  fp_copy(dst, C);
 801c140:	9905      	ldr	r1, [sp, #20]
  fp_clamp(dst);
 801c142:	6063      	str	r3, [r4, #4]
  fp_copy(dst, C);
 801c144:	4620      	mov	r0, r4
 801c146:	f7ff ff73 	bl	801c030 <fp_copy>
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801c14a:	4620      	mov	r0, r4
 801c14c:	f001 fc12 	bl	801d974 <free>
  return ret;
 801c150:	2000      	movs	r0, #0
}
 801c152:	b007      	add	sp, #28
 801c154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ty = MIN(ix, (B->used > 0 ? B->used - 1 : 0));
 801c158:	682b      	ldr	r3, [r5, #0]
 801c15a:	2b01      	cmp	r3, #1
 801c15c:	bfb8      	it	lt
 801c15e:	2301      	movlt	r3, #1
 801c160:	3b01      	subs	r3, #1
 801c162:	4563      	cmp	r3, ip
 801c164:	bfa8      	it	ge
 801c166:	4663      	movge	r3, ip
      tx = ix - ty;
 801c168:	ebac 0e03 	sub.w	lr, ip, r3
      tmpx = A->dp + tx;
 801c16c:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 801c170:	9004      	str	r0, [sp, #16]
      tmpy = B->dp + ty;
 801c172:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 801c176:	9001      	str	r0, [sp, #4]
      iy = MIN(A->used-tx, ty+1);
 801c178:	6830      	ldr	r0, [r6, #0]
 801c17a:	eba0 000e 	sub.w	r0, r0, lr
 801c17e:	4298      	cmp	r0, r3
      COMBA_FORWARD;
 801c180:	468b      	mov	fp, r1
 801c182:	4611      	mov	r1, r2
 801c184:	f04f 0200 	mov.w	r2, #0
      iy = MIN(A->used-tx, ty+1);
 801c188:	bfc8      	it	gt
 801c18a:	1c58      	addgt	r0, r3, #1
      for (iz = 0; iz < iy; ++iz) {
 801c18c:	4696      	mov	lr, r2
 801c18e:	4586      	cmp	lr, r0
 801c190:	db06      	blt.n	801c1a0 <fp_mul_comba+0xc8>
      COMBA_STORE(dst->dp[ix]);
 801c192:	9b03      	ldr	r3, [sp, #12]
 801c194:	f843 bb04 	str.w	fp, [r3], #4
   for (ix = 0; ix < pa; ix++) {
 801c198:	f10c 0c01 	add.w	ip, ip, #1
      COMBA_STORE(dst->dp[ix]);
 801c19c:	9303      	str	r3, [sp, #12]
   for (ix = 0; ix < pa; ix++) {
 801c19e:	e7bf      	b.n	801c120 <fp_mul_comba+0x48>
          MULADD(_tmpx, _tmpy);
 801c1a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c1a4:	f859 3904 	ldr.w	r3, [r9], #-4
 801c1a8:	f8cd 9004 	str.w	r9, [sp, #4]
 801c1ac:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801c1b0:	f859 902e 	ldr.w	r9, [r9, lr, lsl #2]
 801c1b4:	469a      	mov	sl, r3
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	fbe9 b30a 	umlal	fp, r3, r9, sl
 801c1bc:	18c9      	adds	r1, r1, r3
 801c1be:	f142 0200 	adc.w	r2, r2, #0
      for (iz = 0; iz < iy; ++iz) {
 801c1c2:	f10e 0e01 	add.w	lr, lr, #1
 801c1c6:	e7e2      	b.n	801c18e <fp_mul_comba+0xb6>
  fp_clamp(dst);
 801c1c8:	6020      	str	r0, [r4, #0]
 801c1ca:	e7af      	b.n	801c12c <fp_mul_comba+0x54>
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801c1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1d0:	e7bf      	b.n	801c152 <fp_mul_comba+0x7a>
       return FP_MEM;
 801c1d2:	f06f 0001 	mvn.w	r0, #1
 801c1d6:	e7bc      	b.n	801c152 <fp_mul_comba+0x7a>

0801c1d8 <fp_mul>:
{
 801c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    y  = MAX(A->used, B->used);
 801c1da:	680f      	ldr	r7, [r1, #0]
 801c1dc:	6806      	ldr	r6, [r0, #0]
    oldused = C->used;
 801c1de:	6815      	ldr	r5, [r2, #0]
    y  = MAX(A->used, B->used);
 801c1e0:	42b7      	cmp	r7, r6
 801c1e2:	463b      	mov	r3, r7
 801c1e4:	bfb8      	it	lt
 801c1e6:	4633      	movlt	r3, r6
    if (y + yy >= FP_SIZE) {
 801c1e8:	42b7      	cmp	r7, r6
 801c1ea:	bfd4      	ite	le
 801c1ec:	eb03 0c07 	addle.w	ip, r3, r7
 801c1f0:	eb03 0c06 	addgt.w	ip, r3, r6
 801c1f4:	f1bc 0f17 	cmp.w	ip, #23
{
 801c1f8:	4614      	mov	r4, r2
    if (y + yy >= FP_SIZE) {
 801c1fa:	dc0f      	bgt.n	801c21c <fp_mul+0x44>
        if (y == 8) {
 801c1fc:	2b08      	cmp	r3, #8
 801c1fe:	d10a      	bne.n	801c216 <fp_mul+0x3e>
           ret = fp_mul_comba8(A,B,C);
 801c200:	f7fe ff52 	bl	801b0a8 <fp_mul_comba8>
    for (y = C->used; y >= 0 && y < oldused; y++) {
 801c204:	4622      	mov	r2, r4
        C->dp[y] = 0;
 801c206:	2100      	movs	r1, #0
    for (y = C->used; y >= 0 && y < oldused; y++) {
 801c208:	f852 3b08 	ldr.w	r3, [r2], #8
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	db01      	blt.n	801c214 <fp_mul+0x3c>
 801c210:	42ab      	cmp	r3, r5
 801c212:	db06      	blt.n	801c222 <fp_mul+0x4a>
}
 801c214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = fp_mul_comba(A,B,C);
 801c216:	f7ff ff5f 	bl	801c0d8 <fp_mul_comba>
 801c21a:	e7f3      	b.n	801c204 <fp_mul+0x2c>
       ret = FP_VAL;
 801c21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c220:	e7f0      	b.n	801c204 <fp_mul+0x2c>
        C->dp[y] = 0;
 801c222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (y = C->used; y >= 0 && y < oldused; y++) {
 801c226:	3301      	adds	r3, #1
 801c228:	e7f0      	b.n	801c20c <fp_mul+0x34>

0801c22a <mp_mul>:
  return fp_mul(a, b, c);
 801c22a:	f7ff bfd5 	b.w	801c1d8 <fp_mul>

0801c22e <fp_mod_2d>:
{
 801c22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (b <= 0) {
 801c230:	1e0d      	subs	r5, r1, #0
{
 801c232:	4607      	mov	r7, r0
 801c234:	4614      	mov	r4, r2
   if (b <= 0) {
 801c236:	dc04      	bgt.n	801c242 <fp_mod_2d+0x14>
}
 801c238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fp_zero(c);
 801c23c:	4610      	mov	r0, r2
 801c23e:	f7ff bdad 	b.w	801bd9c <fp_zero>
   fp_copy(a, c);
 801c242:	4611      	mov	r1, r2
 801c244:	f7ff fef4 	bl	801c030 <fp_copy>
   if (c->sign == FP_ZPOS && b >= (DIGIT_BIT * a->used)) {
 801c248:	6866      	ldr	r6, [r4, #4]
 801c24a:	b91e      	cbnz	r6, 801c254 <fp_mod_2d+0x26>
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 801c252:	da36      	bge.n	801c2c2 <fp_mod_2d+0x94>
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 801c254:	f105 021f 	add.w	r2, r5, #31
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 801c258:	2e01      	cmp	r6, #1
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 801c25a:	ea4f 1352 	mov.w	r3, r2, lsr #5
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 801c25e:	d02d      	beq.n	801c2bc <fp_mod_2d+0x8e>
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801c260:	4620      	mov	r0, r4
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 801c262:	461a      	mov	r2, r3
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801c264:	f850 1b08 	ldr.w	r1, [r0], #8
    c->dp[x] = 0;
 801c268:	2700      	movs	r7, #0
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801c26a:	4291      	cmp	r1, r2
 801c26c:	d82a      	bhi.n	801c2c4 <fp_mod_2d+0x96>
  if (c->sign == FP_NEG) {
 801c26e:	2e01      	cmp	r6, #1
 801c270:	d10c      	bne.n	801c28c <fp_mod_2d+0x5e>
 801c272:	f104 0c08 	add.w	ip, r4, #8
     fp_digit carry = 0;
 801c276:	2200      	movs	r2, #0
 801c278:	4666      	mov	r6, ip
     for (x = 0; x < (unsigned int)c->used; x++) {
 801c27a:	4610      	mov	r0, r2
 801c27c:	4281      	cmp	r1, r0
 801c27e:	d125      	bne.n	801c2cc <fp_mod_2d+0x9e>
         c->dp[x] = (fp_digit)0 - carry;
 801c280:	4252      	negs	r2, r2
     for (; x < bmax; x++) {
 801c282:	4299      	cmp	r1, r3
 801c284:	d330      	bcc.n	801c2e8 <fp_mod_2d+0xba>
     c->sign = FP_ZPOS;
 801c286:	2200      	movs	r2, #0
     c->used = (int)bmax;
 801c288:	6023      	str	r3, [r4, #0]
     c->sign = FP_ZPOS;
 801c28a:	6062      	str	r2, [r4, #4]
  x = DIGIT_BIT - (b % DIGIT_BIT);
 801c28c:	f005 051f 	and.w	r5, r5, #31
 801c290:	f1c5 0120 	rsb	r1, r5, #32
  if (x != DIGIT_BIT) {
 801c294:	b145      	cbz	r5, 801c2a8 <fp_mod_2d+0x7a>
     c->dp[bmax - 1] &= ~((fp_digit)0) >> x;
 801c296:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c29e:	fa22 f101 	lsr.w	r1, r2, r1
 801c2a2:	685a      	ldr	r2, [r3, #4]
 801c2a4:	400a      	ands	r2, r1
 801c2a6:	605a      	str	r2, [r3, #4]
  fp_clamp (c);
 801c2a8:	6823      	ldr	r3, [r4, #0]
 801c2aa:	b12b      	cbz	r3, 801c2b8 <fp_mod_2d+0x8a>
 801c2ac:	1e5a      	subs	r2, r3, #1
 801c2ae:	3301      	adds	r3, #1
 801c2b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c2b4:	b1e3      	cbz	r3, 801c2f0 <fp_mod_2d+0xc2>
 801c2b6:	6863      	ldr	r3, [r4, #4]
 801c2b8:	6063      	str	r3, [r4, #4]
 801c2ba:	e002      	b.n	801c2c2 <fp_mod_2d+0x94>
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 801c2bc:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 801c2c0:	d3ce      	bcc.n	801c260 <fp_mod_2d+0x32>
}
 801c2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c->dp[x] = 0;
 801c2c4:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801c2c8:	3201      	adds	r2, #1
 801c2ca:	e7ce      	b.n	801c26a <fp_mod_2d+0x3c>
         fp_digit next = c->dp[x] > 0;
 801c2cc:	f8d6 e000 	ldr.w	lr, [r6]
         c->dp[x] = (fp_digit)0 - c->dp[x] - carry;
 801c2d0:	eb0e 0702 	add.w	r7, lr, r2
 801c2d4:	427f      	negs	r7, r7
 801c2d6:	f846 7b04 	str.w	r7, [r6], #4
         carry |= next;
 801c2da:	f1be 0f00 	cmp.w	lr, #0
 801c2de:	bf18      	it	ne
 801c2e0:	f042 0201 	orrne.w	r2, r2, #1
     for (x = 0; x < (unsigned int)c->used; x++) {
 801c2e4:	3001      	adds	r0, #1
 801c2e6:	e7c9      	b.n	801c27c <fp_mod_2d+0x4e>
         c->dp[x] = (fp_digit)0 - carry;
 801c2e8:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
     for (; x < bmax; x++) {
 801c2ec:	3101      	adds	r1, #1
 801c2ee:	e7c8      	b.n	801c282 <fp_mod_2d+0x54>
  fp_clamp (c);
 801c2f0:	6022      	str	r2, [r4, #0]
 801c2f2:	e7d9      	b.n	801c2a8 <fp_mod_2d+0x7a>

0801c2f4 <fp_div_2d>:
{
 801c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (b <= 0) {
 801c2f6:	1e0d      	subs	r5, r1, #0
{
 801c2f8:	4607      	mov	r7, r0
 801c2fa:	4614      	mov	r4, r2
 801c2fc:	461e      	mov	r6, r3
  if (b <= 0) {
 801c2fe:	dc08      	bgt.n	801c312 <fp_div_2d+0x1e>
    fp_copy (a, c);
 801c300:	4611      	mov	r1, r2
 801c302:	f7ff fe95 	bl	801c030 <fp_copy>
    if (d != NULL) {
 801c306:	b35e      	cbz	r6, 801c360 <fp_div_2d+0x6c>
      fp_zero (d);
 801c308:	4630      	mov	r0, r6
}
 801c30a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fp_zero (d);
 801c30e:	f7ff bd45 	b.w	801bd9c <fp_zero>
  if (a == c && d != NULL) {
 801c312:	4290      	cmp	r0, r2
 801c314:	d103      	bne.n	801c31e <fp_div_2d+0x2a>
 801c316:	b113      	cbz	r3, 801c31e <fp_div_2d+0x2a>
    fp_mod_2d (a, b, d);
 801c318:	461a      	mov	r2, r3
 801c31a:	f7ff ff88 	bl	801c22e <fp_mod_2d>
  fp_copy(a, c);
 801c31e:	4621      	mov	r1, r4
 801c320:	4638      	mov	r0, r7
 801c322:	f7ff fe85 	bl	801c030 <fp_copy>
  if (b >= (int)DIGIT_BIT) {
 801c326:	2d1f      	cmp	r5, #31
 801c328:	dd03      	ble.n	801c332 <fp_div_2d+0x3e>
    fp_rshd (c, b / DIGIT_BIT);
 801c32a:	1169      	asrs	r1, r5, #5
 801c32c:	4620      	mov	r0, r4
 801c32e:	f7ff fdb7 	bl	801bea0 <fp_rshd>
  if (D != 0) {
 801c332:	f015 011f 	ands.w	r1, r5, #31
 801c336:	d002      	beq.n	801c33e <fp_div_2d+0x4a>
    fp_rshb(c, D);
 801c338:	4620      	mov	r0, r4
 801c33a:	f7ff fddc 	bl	801bef6 <fp_rshb>
  if (a != c && d != NULL) {
 801c33e:	42a7      	cmp	r7, r4
 801c340:	d005      	beq.n	801c34e <fp_div_2d+0x5a>
 801c342:	b126      	cbz	r6, 801c34e <fp_div_2d+0x5a>
    fp_mod_2d (a, b, d);
 801c344:	4632      	mov	r2, r6
 801c346:	4629      	mov	r1, r5
 801c348:	4638      	mov	r0, r7
 801c34a:	f7ff ff70 	bl	801c22e <fp_mod_2d>
  fp_clamp (c);
 801c34e:	6823      	ldr	r3, [r4, #0]
 801c350:	b12b      	cbz	r3, 801c35e <fp_div_2d+0x6a>
 801c352:	1e5a      	subs	r2, r3, #1
 801c354:	3301      	adds	r3, #1
 801c356:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c35a:	b113      	cbz	r3, 801c362 <fp_div_2d+0x6e>
 801c35c:	6863      	ldr	r3, [r4, #4]
 801c35e:	6063      	str	r3, [r4, #4]
}
 801c360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  fp_clamp (c);
 801c362:	6022      	str	r2, [r4, #0]
 801c364:	e7f3      	b.n	801c34e <fp_div_2d+0x5a>

0801c366 <fp_div>:
{
 801c366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c36a:	b08d      	sub	sp, #52	; 0x34
 801c36c:	9305      	str	r3, [sp, #20]
  if (fp_iszero (b) == FP_YES) {
 801c36e:	680b      	ldr	r3, [r1, #0]
{
 801c370:	9002      	str	r0, [sp, #8]
 801c372:	9104      	str	r1, [sp, #16]
 801c374:	9200      	str	r2, [sp, #0]
  if (fp_iszero (b) == FP_YES) {
 801c376:	2b00      	cmp	r3, #0
 801c378:	f000 8183 	beq.w	801c682 <fp_div+0x31c>
  if (fp_cmp_mag (a, b) == FP_LT)
 801c37c:	f7ff fb41 	bl	801ba02 <fp_cmp_mag>
 801c380:	3001      	adds	r0, #1
 801c382:	d10f      	bne.n	801c3a4 <fp_div+0x3e>
    if (d != NULL) {
 801c384:	9b05      	ldr	r3, [sp, #20]
 801c386:	b11b      	cbz	r3, 801c390 <fp_div+0x2a>
      fp_copy (a, d);
 801c388:	9802      	ldr	r0, [sp, #8]
 801c38a:	4619      	mov	r1, r3
 801c38c:	f7ff fe50 	bl	801c030 <fp_copy>
    if (c != NULL) {
 801c390:	9b00      	ldr	r3, [sp, #0]
 801c392:	b113      	cbz	r3, 801c39a <fp_div+0x34>
      fp_zero (c);
 801c394:	4618      	mov	r0, r3
 801c396:	f7ff fd01 	bl	801bd9c <fp_zero>
    return FP_OKAY;
 801c39a:	2500      	movs	r5, #0
}
 801c39c:	4628      	mov	r0, r5
 801c39e:	b00d      	add	sp, #52	; 0x34
 801c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  q = (fp_int*)XMALLOC(sizeof(fp_int) * 5, NULL, DYNAMIC_TYPE_BIGINT);
 801c3a4:	f44f 7002 	mov.w	r0, #520	; 0x208
 801c3a8:	f001 fadc 	bl	801d964 <malloc>
  if (q == NULL) {
 801c3ac:	4604      	mov	r4, r0
 801c3ae:	2800      	cmp	r0, #0
 801c3b0:	f000 816a 	beq.w	801c688 <fp_div+0x322>
  x = &q[1]; y = &q[2]; t1 = &q[3]; t2 = &q[4];
 801c3b4:	f500 73d0 	add.w	r3, r0, #416	; 0x1a0
 801c3b8:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 801c3bc:	f100 0768 	add.w	r7, r0, #104	; 0x68
 801c3c0:	f500 7a9c 	add.w	sl, r0, #312	; 0x138
 801c3c4:	930b      	str	r3, [sp, #44]	; 0x2c
    fp_zero(a);
 801c3c6:	f7ff fce9 	bl	801bd9c <fp_zero>
  q->used = a->used;
 801c3ca:	9b02      	ldr	r3, [sp, #8]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	6023      	str	r3, [r4, #0]
    fp_zero(a);
 801c3d0:	4650      	mov	r0, sl
 801c3d2:	f7ff fce3 	bl	801bd9c <fp_zero>
 801c3d6:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 801c3da:	f7ff fcdf 	bl	801bd9c <fp_zero>
 801c3de:	4638      	mov	r0, r7
 801c3e0:	f7ff fcdc 	bl	801bd9c <fp_zero>
  fp_copy(a, x); /* copy (src = a) to (dst = x) */
 801c3e4:	4639      	mov	r1, r7
 801c3e6:	9802      	ldr	r0, [sp, #8]
 801c3e8:	f7ff fe22 	bl	801c030 <fp_copy>
    fp_zero(a);
 801c3ec:	4648      	mov	r0, r9
 801c3ee:	f7ff fcd5 	bl	801bd9c <fp_zero>
  fp_copy(b, y); /* copy (src = b) to (dst = y) */
 801c3f2:	9804      	ldr	r0, [sp, #16]
 801c3f4:	4649      	mov	r1, r9
 801c3f6:	f7ff fe1b 	bl	801c030 <fp_copy>
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801c3fa:	9b02      	ldr	r3, [sp, #8]
 801c3fc:	685b      	ldr	r3, [r3, #4]
 801c3fe:	9309      	str	r3, [sp, #36]	; 0x24
 801c400:	9b04      	ldr	r3, [sp, #16]
  x->sign = y->sign = FP_ZPOS;
 801c402:	2100      	movs	r1, #0
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801c404:	685b      	ldr	r3, [r3, #4]
  x->sign = y->sign = FP_ZPOS;
 801c406:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 801c40a:	66e1      	str	r1, [r4, #108]	; 0x6c
  norm = fp_count_bits(y) % DIGIT_BIT;
 801c40c:	4648      	mov	r0, r9
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801c40e:	930a      	str	r3, [sp, #40]	; 0x28
  norm = fp_count_bits(y) % DIGIT_BIT;
 801c410:	f7ff fc65 	bl	801bcde <fp_count_bits>
 801c414:	1a0b      	subs	r3, r1, r0
 801c416:	f003 031f 	and.w	r3, r3, #31
 801c41a:	f000 001f 	and.w	r0, r0, #31
 801c41e:	bf58      	it	pl
 801c420:	4258      	negpl	r0, r3
  if (norm < (int)(DIGIT_BIT-1)) {
 801c422:	281f      	cmp	r0, #31
 801c424:	d06d      	beq.n	801c502 <fp_div+0x19c>
    norm = (DIGIT_BIT-1) - norm;
 801c426:	f1c0 031f 	rsb	r3, r0, #31
    ret = fp_mul_2d (x, norm, x);
 801c42a:	463a      	mov	r2, r7
 801c42c:	4619      	mov	r1, r3
 801c42e:	4638      	mov	r0, r7
    norm = (DIGIT_BIT-1) - norm;
 801c430:	9303      	str	r3, [sp, #12]
    ret = fp_mul_2d (x, norm, x);
 801c432:	f7ff fe0c 	bl	801c04e <fp_mul_2d>
    if (ret != FP_OKAY) {
 801c436:	4605      	mov	r5, r0
 801c438:	b118      	cbz	r0, 801c442 <fp_div+0xdc>
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801c43a:	4620      	mov	r0, r4
 801c43c:	f001 fa9a 	bl	801d974 <free>
  return FP_OKAY;
 801c440:	e7ac      	b.n	801c39c <fp_div+0x36>
    ret = fp_mul_2d (y, norm, y);
 801c442:	9903      	ldr	r1, [sp, #12]
 801c444:	464a      	mov	r2, r9
 801c446:	4648      	mov	r0, r9
 801c448:	f7ff fe01 	bl	801c04e <fp_mul_2d>
    if (ret != FP_OKAY) {
 801c44c:	4605      	mov	r5, r0
 801c44e:	2800      	cmp	r0, #0
 801c450:	d1f3      	bne.n	801c43a <fp_div+0xd4>
  t = y->used - 1;
 801c452:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
  n = x->used - 1;
 801c456:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  t = y->used - 1;
 801c45a:	9301      	str	r3, [sp, #4]
  ret = fp_lshd (y, n - t); /* y = y*b**{n-t} */
 801c45c:	eba8 0603 	sub.w	r6, r8, r3
 801c460:	4631      	mov	r1, r6
 801c462:	4648      	mov	r0, r9
 801c464:	f7ff fc66 	bl	801bd34 <fp_lshd>
  if (ret != FP_OKAY) {
 801c468:	4605      	mov	r5, r0
 801c46a:	2800      	cmp	r0, #0
 801c46c:	d1e5      	bne.n	801c43a <fp_div+0xd4>
 801c46e:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
  while (fp_cmp (x, y) != FP_LT) {
 801c472:	4649      	mov	r1, r9
 801c474:	4638      	mov	r0, r7
 801c476:	f7ff fb22 	bl	801babe <fp_cmp>
 801c47a:	3001      	adds	r0, #1
 801c47c:	d143      	bne.n	801c506 <fp_div+0x1a0>
  t = y->used - 1;
 801c47e:	9b01      	ldr	r3, [sp, #4]
  fp_rshd (y, n - t);
 801c480:	4631      	mov	r1, r6
  t = y->used - 1;
 801c482:	3b01      	subs	r3, #1
  fp_rshd (y, n - t);
 801c484:	4648      	mov	r0, r9
  t = y->used - 1;
 801c486:	9307      	str	r3, [sp, #28]
  fp_rshd (y, n - t);
 801c488:	f7ff fd0a 	bl	801bea0 <fp_rshd>
  for (i = n; i >= (t + 1); i--) {
 801c48c:	9b01      	ldr	r3, [sp, #4]
 801c48e:	f108 0601 	add.w	r6, r8, #1
 801c492:	1af6      	subs	r6, r6, r3
 801c494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  n = x->used - 1;
 801c498:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 801c49c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801c4a0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801c4a4:	9306      	str	r3, [sp, #24]
  for (i = n; i >= (t + 1); i--) {
 801c4a6:	9a07      	ldr	r2, [sp, #28]
    if (i > x->used) {
 801c4a8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  for (i = n; i >= (t + 1); i--) {
 801c4aa:	4593      	cmp	fp, r2
 801c4ac:	dc3f      	bgt.n	801c52e <fp_div+0x1c8>
  x->sign = x->used == 0 ? FP_ZPOS : a->sign;
 801c4ae:	b10b      	cbz	r3, 801c4b4 <fp_div+0x14e>
 801c4b0:	9b02      	ldr	r3, [sp, #8]
 801c4b2:	685b      	ldr	r3, [r3, #4]
 801c4b4:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (c != NULL) {
 801c4b6:	9b00      	ldr	r3, [sp, #0]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	f040 80c6 	bne.w	801c64a <fp_div+0x2e4>
  if (d != NULL) {
 801c4be:	9b05      	ldr	r3, [sp, #20]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d0ba      	beq.n	801c43a <fp_div+0xd4>
    fp_div_2d (x, norm, x, NULL);
 801c4c4:	9903      	ldr	r1, [sp, #12]
 801c4c6:	2300      	movs	r3, #0
 801c4c8:	463a      	mov	r2, r7
 801c4ca:	4638      	mov	r0, r7
 801c4cc:	f7ff ff12 	bl	801c2f4 <fp_div_2d>
    for (i = b->used; i < x->used; i++) {
 801c4d0:	9b04      	ldr	r3, [sp, #16]
 801c4d2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801c4d4:	681b      	ldr	r3, [r3, #0]
        x->dp[i] = 0;
 801c4d6:	f104 0170 	add.w	r1, r4, #112	; 0x70
 801c4da:	2000      	movs	r0, #0
    for (i = b->used; i < x->used; i++) {
 801c4dc:	429a      	cmp	r2, r3
 801c4de:	f300 80ca 	bgt.w	801c676 <fp_div+0x310>
    fp_clamp(x);
 801c4e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801c4e4:	b13b      	cbz	r3, 801c4f6 <fp_div+0x190>
 801c4e6:	1e5a      	subs	r2, r3, #1
 801c4e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	f000 80c5 	beq.w	801c67e <fp_div+0x318>
 801c4f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    fp_copy (x, d);
 801c4f6:	9905      	ldr	r1, [sp, #20]
    fp_clamp(x);
 801c4f8:	66e3      	str	r3, [r4, #108]	; 0x6c
    fp_copy (x, d);
 801c4fa:	4638      	mov	r0, r7
 801c4fc:	f7ff fd98 	bl	801c030 <fp_copy>
 801c500:	e79b      	b.n	801c43a <fp_div+0xd4>
    norm = 0;
 801c502:	9103      	str	r1, [sp, #12]
 801c504:	e7a5      	b.n	801c452 <fp_div+0xec>
    ++(q->dp[n - t]);
 801c506:	f8db 3008 	ldr.w	r3, [fp, #8]
 801c50a:	3301      	adds	r3, #1
 801c50c:	f8cb 3008 	str.w	r3, [fp, #8]
    ret = fp_sub (x, y, x);
 801c510:	463a      	mov	r2, r7
 801c512:	4649      	mov	r1, r9
 801c514:	4638      	mov	r0, r7
 801c516:	f7ff fab1 	bl	801ba7c <fp_sub>
    if (ret != FP_OKAY) {
 801c51a:	4603      	mov	r3, r0
 801c51c:	2800      	cmp	r0, #0
 801c51e:	d0a8      	beq.n	801c472 <fp_div+0x10c>
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801c520:	4620      	mov	r0, r4
 801c522:	9300      	str	r3, [sp, #0]
 801c524:	f001 fa26 	bl	801d974 <free>
      ret = fp_add (x, t1, x);
 801c528:	9b00      	ldr	r3, [sp, #0]
 801c52a:	461d      	mov	r5, r3
        return ret;
 801c52c:	e736      	b.n	801c39c <fp_div+0x36>
    if (i > x->used) {
 801c52e:	459b      	cmp	fp, r3
 801c530:	dc7d      	bgt.n	801c62e <fp_div+0x2c8>
    if (x->dp[i] == y->dp[t]) {
 801c532:	9b06      	ldr	r3, [sp, #24]
 801c534:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
 801c538:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801c53c:	9b01      	ldr	r3, [sp, #4]
 801c53e:	4291      	cmp	r1, r2
 801c540:	ebab 0303 	sub.w	r3, fp, r3
 801c544:	9308      	str	r3, [sp, #32]
 801c546:	d178      	bne.n	801c63a <fp_div+0x2d4>
      q->dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
 801c548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c54c:	6033      	str	r3, [r6, #0]
    q->dp[i - t - 1] = (q->dp[i - t - 1] + 1);
 801c54e:	6833      	ldr	r3, [r6, #0]
 801c550:	3301      	adds	r3, #1
 801c552:	6033      	str	r3, [r6, #0]
      q->dp[i - t - 1] = (q->dp[i - t - 1] - 1);
 801c554:	6833      	ldr	r3, [r6, #0]
 801c556:	3b01      	subs	r3, #1
 801c558:	6033      	str	r3, [r6, #0]
      fp_zero (t1);
 801c55a:	4650      	mov	r0, sl
 801c55c:	f7ff fc1e 	bl	801bd9c <fp_zero>
      t1->dp[0] = (t - 1 < 0) ? 0 : y->dp[t - 1];
 801c560:	9b07      	ldr	r3, [sp, #28]
 801c562:	2b00      	cmp	r3, #0
 801c564:	bfca      	itet	gt
 801c566:	9b06      	ldrgt	r3, [sp, #24]
 801c568:	2300      	movle	r3, #0
 801c56a:	f8d3 30d0 	ldrgt.w	r3, [r3, #208]	; 0xd0
 801c56e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
      t1->dp[1] = y->dp[t];
 801c572:	9b06      	ldr	r3, [sp, #24]
 801c574:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801c578:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
      t1->used = 2;
 801c57c:	2302      	movs	r3, #2
 801c57e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
      ret = fp_mul_d (t1, q->dp[i - t - 1], t1);
 801c582:	6831      	ldr	r1, [r6, #0]
 801c584:	4652      	mov	r2, sl
 801c586:	4650      	mov	r0, sl
 801c588:	f7ff f8b2 	bl	801b6f0 <fp_mul_d>
      if (ret != FP_OKAY) {
 801c58c:	4603      	mov	r3, r0
 801c58e:	2800      	cmp	r0, #0
 801c590:	d1c6      	bne.n	801c520 <fp_div+0x1ba>
      t2->dp[0] = (i - 2 < 0) ? 0 : x->dp[i - 2];
 801c592:	f1bb 0f01 	cmp.w	fp, #1
 801c596:	bfc8      	it	gt
 801c598:	f8d8 3064 	ldrgt.w	r3, [r8, #100]	; 0x64
 801c59c:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 801c5a0:	f1bb 0f00 	cmp.w	fp, #0
 801c5a4:	bfc8      	it	gt
 801c5a6:	f8d8 3068 	ldrgt.w	r3, [r8, #104]	; 0x68
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 801c5aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 801c5ac:	bfd8      	it	le
 801c5ae:	2300      	movle	r3, #0
 801c5b0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      t2->dp[2] = x->dp[i];
 801c5b4:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 801c5b8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      t2->used = 3;
 801c5bc:	2303      	movs	r3, #3
 801c5be:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 801c5c2:	4650      	mov	r0, sl
 801c5c4:	f7ff fa1d 	bl	801ba02 <fp_cmp_mag>
 801c5c8:	2801      	cmp	r0, #1
 801c5ca:	d0c3      	beq.n	801c554 <fp_div+0x1ee>
    ret = fp_mul_d (y, q->dp[i - t - 1], t1);
 801c5cc:	6831      	ldr	r1, [r6, #0]
 801c5ce:	4652      	mov	r2, sl
 801c5d0:	4648      	mov	r0, r9
 801c5d2:	f7ff f88d 	bl	801b6f0 <fp_mul_d>
    if (ret != FP_OKAY) {
 801c5d6:	4603      	mov	r3, r0
 801c5d8:	2800      	cmp	r0, #0
 801c5da:	d1a1      	bne.n	801c520 <fp_div+0x1ba>
    ret = fp_lshd  (t1, i - t - 1);
 801c5dc:	9908      	ldr	r1, [sp, #32]
 801c5de:	4650      	mov	r0, sl
 801c5e0:	f7ff fba8 	bl	801bd34 <fp_lshd>
    if (ret != FP_OKAY) {
 801c5e4:	4603      	mov	r3, r0
 801c5e6:	2800      	cmp	r0, #0
 801c5e8:	d19a      	bne.n	801c520 <fp_div+0x1ba>
    ret = fp_sub   (x, t1, x);
 801c5ea:	463a      	mov	r2, r7
 801c5ec:	4651      	mov	r1, sl
 801c5ee:	4638      	mov	r0, r7
 801c5f0:	f7ff fa44 	bl	801ba7c <fp_sub>
    if (ret != FP_OKAY) {
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	2800      	cmp	r0, #0
 801c5f8:	d192      	bne.n	801c520 <fp_div+0x1ba>
    if (x->sign == FP_NEG) {
 801c5fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c5fc:	2b01      	cmp	r3, #1
 801c5fe:	d116      	bne.n	801c62e <fp_div+0x2c8>
      fp_copy (y, t1);
 801c600:	4651      	mov	r1, sl
 801c602:	4648      	mov	r0, r9
 801c604:	f7ff fd14 	bl	801c030 <fp_copy>
      ret = fp_lshd (t1, i - t - 1);
 801c608:	9908      	ldr	r1, [sp, #32]
 801c60a:	4650      	mov	r0, sl
 801c60c:	f7ff fb92 	bl	801bd34 <fp_lshd>
      if (ret != FP_OKAY) {
 801c610:	4603      	mov	r3, r0
 801c612:	2800      	cmp	r0, #0
 801c614:	d184      	bne.n	801c520 <fp_div+0x1ba>
      ret = fp_add (x, t1, x);
 801c616:	463a      	mov	r2, r7
 801c618:	4651      	mov	r1, sl
 801c61a:	4638      	mov	r0, r7
 801c61c:	f7ff fa0c 	bl	801ba38 <fp_add>
      if (ret != FP_OKAY) {
 801c620:	4603      	mov	r3, r0
 801c622:	2800      	cmp	r0, #0
 801c624:	f47f af7c 	bne.w	801c520 <fp_div+0x1ba>
      q->dp[i - t - 1] = q->dp[i - t - 1] - 1;
 801c628:	6833      	ldr	r3, [r6, #0]
 801c62a:	3b01      	subs	r3, #1
 801c62c:	6033      	str	r3, [r6, #0]
  for (i = n; i >= (t + 1); i--) {
 801c62e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c632:	3e04      	subs	r6, #4
 801c634:	f1a8 0804 	sub.w	r8, r8, #4
 801c638:	e735      	b.n	801c4a6 <fp_div+0x140>
      tmp /= ((fp_word)y->dp[t]);
 801c63a:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 801c63e:	2300      	movs	r3, #0
 801c640:	f000 fe58 	bl	801d2f4 <__aeabi_uldivmod>
      q->dp[i - t - 1] = (fp_digit) (tmp);
 801c644:	6030      	str	r0, [r6, #0]
 801c646:	e782      	b.n	801c54e <fp_div+0x1e8>
    fp_clamp (q);
 801c648:	6022      	str	r2, [r4, #0]
 801c64a:	6823      	ldr	r3, [r4, #0]
 801c64c:	b133      	cbz	r3, 801c65c <fp_div+0x2f6>
 801c64e:	1e5a      	subs	r2, r3, #1
 801c650:	3301      	adds	r3, #1
 801c652:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d0f6      	beq.n	801c648 <fp_div+0x2e2>
 801c65a:	6863      	ldr	r3, [r4, #4]
 801c65c:	6063      	str	r3, [r4, #4]
    fp_copy (q, c);
 801c65e:	9900      	ldr	r1, [sp, #0]
 801c660:	4620      	mov	r0, r4
 801c662:	f7ff fce5 	bl	801c030 <fp_copy>
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801c666:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801c66a:	1a9b      	subs	r3, r3, r2
    c->sign = neg;
 801c66c:	9a00      	ldr	r2, [sp, #0]
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 801c66e:	bf18      	it	ne
 801c670:	2301      	movne	r3, #1
    c->sign = neg;
 801c672:	6053      	str	r3, [r2, #4]
 801c674:	e723      	b.n	801c4be <fp_div+0x158>
        x->dp[i] = 0;
 801c676:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for (i = b->used; i < x->used; i++) {
 801c67a:	3301      	adds	r3, #1
 801c67c:	e72e      	b.n	801c4dc <fp_div+0x176>
    fp_clamp(x);
 801c67e:	66a2      	str	r2, [r4, #104]	; 0x68
 801c680:	e72f      	b.n	801c4e2 <fp_div+0x17c>
    return FP_VAL;
 801c682:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c686:	e689      	b.n	801c39c <fp_div+0x36>
      return FP_MEM;
 801c688:	f06f 0501 	mvn.w	r5, #1
 801c68c:	e686      	b.n	801c39c <fp_div+0x36>

0801c68e <fp_mod>:
{
 801c68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c690:	4605      	mov	r5, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801c692:	2068      	movs	r0, #104	; 0x68
{
 801c694:	460e      	mov	r6, r1
 801c696:	4617      	mov	r7, r2
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801c698:	f001 f964 	bl	801d964 <malloc>
   if (t == NULL)
 801c69c:	4604      	mov	r4, r0
 801c69e:	b1f8      	cbz	r0, 801c6e0 <fp_mod+0x52>
    fp_zero(a);
 801c6a0:	f7ff fb7c 	bl	801bd9c <fp_zero>
   err = fp_div(a, b, NULL, t);
 801c6a4:	4628      	mov	r0, r5
 801c6a6:	4623      	mov	r3, r4
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	4631      	mov	r1, r6
 801c6ac:	f7ff fe5b 	bl	801c366 <fp_div>
   if (err == FP_OKAY) {
 801c6b0:	4605      	mov	r5, r0
 801c6b2:	b958      	cbnz	r0, 801c6cc <fp_mod+0x3e>
      if (!fp_iszero(t) && (t->sign != b->sign)) {
 801c6b4:	6823      	ldr	r3, [r4, #0]
 801c6b6:	b173      	cbz	r3, 801c6d6 <fp_mod+0x48>
 801c6b8:	6862      	ldr	r2, [r4, #4]
 801c6ba:	6873      	ldr	r3, [r6, #4]
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	d00a      	beq.n	801c6d6 <fp_mod+0x48>
         err = fp_add(t, b, c);
 801c6c0:	463a      	mov	r2, r7
 801c6c2:	4631      	mov	r1, r6
 801c6c4:	4620      	mov	r0, r4
 801c6c6:	f7ff f9b7 	bl	801ba38 <fp_add>
 801c6ca:	4605      	mov	r5, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801c6cc:	4620      	mov	r0, r4
 801c6ce:	f001 f951 	bl	801d974 <free>
}
 801c6d2:	4628      	mov	r0, r5
 801c6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         fp_copy(t, c);
 801c6d6:	4639      	mov	r1, r7
 801c6d8:	4620      	mov	r0, r4
 801c6da:	f7ff fca9 	bl	801c030 <fp_copy>
 801c6de:	e7f5      	b.n	801c6cc <fp_mod+0x3e>
       return FP_MEM;
 801c6e0:	f06f 0501 	mvn.w	r5, #1
 801c6e4:	e7f5      	b.n	801c6d2 <fp_mod+0x44>

0801c6e6 <fp_mulmod>:
{
 801c6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6ea:	4604      	mov	r4, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801c6ec:	2068      	movs	r0, #104	; 0x68
{
 801c6ee:	4688      	mov	r8, r1
 801c6f0:	4616      	mov	r6, r2
 801c6f2:	461f      	mov	r7, r3
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801c6f4:	f001 f936 	bl	801d964 <malloc>
 801c6f8:	4605      	mov	r5, r0
   if (t == NULL)
 801c6fa:	b1a0      	cbz	r0, 801c726 <fp_mulmod+0x40>
    fp_zero(a);
 801c6fc:	f7ff fb4e 	bl	801bd9c <fp_zero>
  err = fp_mul(a, b, t);
 801c700:	4620      	mov	r0, r4
 801c702:	462a      	mov	r2, r5
 801c704:	4641      	mov	r1, r8
 801c706:	f7ff fd67 	bl	801c1d8 <fp_mul>
  if (err == FP_OKAY) {
 801c70a:	4604      	mov	r4, r0
 801c70c:	b928      	cbnz	r0, 801c71a <fp_mulmod+0x34>
      err = fp_mod(t, c, d);
 801c70e:	463a      	mov	r2, r7
 801c710:	4631      	mov	r1, r6
 801c712:	4628      	mov	r0, r5
 801c714:	f7ff ffbb 	bl	801c68e <fp_mod>
 801c718:	4604      	mov	r4, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801c71a:	4628      	mov	r0, r5
 801c71c:	f001 f92a 	bl	801d974 <free>
}
 801c720:	4620      	mov	r0, r4
 801c722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return FP_MEM;
 801c726:	f06f 0401 	mvn.w	r4, #1
 801c72a:	e7f9      	b.n	801c720 <fp_mulmod+0x3a>

0801c72c <mp_mulmod>:
   ret = fp_mulmod(a, b, c, d);
 801c72c:	f7ff bfdb 	b.w	801c6e6 <fp_mulmod>

0801c730 <mp_mod>:
  return fp_mod (a, b, c);
 801c730:	f7ff bfad 	b.w	801c68e <fp_mod>

0801c734 <fp_invmod>:
{
 801c734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 801c738:	684b      	ldr	r3, [r1, #4]
{
 801c73a:	b085      	sub	sp, #20
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 801c73c:	2b01      	cmp	r3, #1
{
 801c73e:	4683      	mov	fp, r0
 801c740:	460c      	mov	r4, r1
 801c742:	9203      	str	r2, [sp, #12]
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 801c744:	d057      	beq.n	801c7f6 <fp_invmod+0xc2>
 801c746:	680b      	ldr	r3, [r1, #0]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d054      	beq.n	801c7f6 <fp_invmod+0xc2>
  if (fp_iszero(a) == FP_YES) {
 801c74c:	6802      	ldr	r2, [r0, #0]
 801c74e:	2a00      	cmp	r2, #0
 801c750:	d051      	beq.n	801c7f6 <fp_invmod+0xc2>
  if (fp_iseven(b) == FP_YES) {
 801c752:	2b00      	cmp	r3, #0
 801c754:	f340 814b 	ble.w	801c9ee <fp_invmod+0x2ba>
 801c758:	688b      	ldr	r3, [r1, #8]
 801c75a:	07dd      	lsls	r5, r3, #31
 801c75c:	f100 8147 	bmi.w	801c9ee <fp_invmod+0x2ba>
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 8, NULL, DYNAMIC_TYPE_BIGINT);
 801c760:	f44f 7050 	mov.w	r0, #832	; 0x340
 801c764:	f001 f8fe 	bl	801d964 <malloc>
  if (x == NULL) {
 801c768:	4606      	mov	r6, r0
 801c76a:	b928      	cbnz	r0, 801c778 <fp_invmod+0x44>
      return FP_MEM;
 801c76c:	f06f 0b01 	mvn.w	fp, #1
}
 801c770:	4658      	mov	r0, fp
 801c772:	b005      	add	sp, #20
 801c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  y = &x[1]; u = &x[2]; v = &x[3]; A = &x[4]; B = &x[5]; C = &x[6]; D = &x[7];
 801c778:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801c77c:	9302      	str	r3, [sp, #8]
 801c77e:	f100 03d0 	add.w	r3, r0, #208	; 0xd0
 801c782:	9301      	str	r3, [sp, #4]
 801c784:	f500 799c 	add.w	r9, r0, #312	; 0x138
 801c788:	f500 77d0 	add.w	r7, r0, #416	; 0x1a0
 801c78c:	f500 7a02 	add.w	sl, r0, #520	; 0x208
 801c790:	f500 751c 	add.w	r5, r0, #624	; 0x270
 801c794:	f500 7836 	add.w	r8, r0, #728	; 0x2d8
    fp_zero(a);
 801c798:	f7ff fb00 	bl	801bd9c <fp_zero>
 801c79c:	f106 0068 	add.w	r0, r6, #104	; 0x68
 801c7a0:	f7ff fafc 	bl	801bd9c <fp_zero>
 801c7a4:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 801c7a8:	f7ff faf8 	bl	801bd9c <fp_zero>
 801c7ac:	4648      	mov	r0, r9
 801c7ae:	f7ff faf5 	bl	801bd9c <fp_zero>
 801c7b2:	4638      	mov	r0, r7
 801c7b4:	f7ff faf2 	bl	801bd9c <fp_zero>
 801c7b8:	4650      	mov	r0, sl
 801c7ba:	f7ff faef 	bl	801bd9c <fp_zero>
 801c7be:	4628      	mov	r0, r5
 801c7c0:	f7ff faec 	bl	801bd9c <fp_zero>
 801c7c4:	4640      	mov	r0, r8
 801c7c6:	f7ff fae9 	bl	801bd9c <fp_zero>
  if ((err = fp_mod(a, b, x)) != FP_OKAY) {
 801c7ca:	4658      	mov	r0, fp
 801c7cc:	4632      	mov	r2, r6
 801c7ce:	4621      	mov	r1, r4
 801c7d0:	f7ff ff5d 	bl	801c68e <fp_mod>
 801c7d4:	4683      	mov	fp, r0
 801c7d6:	b118      	cbz	r0, 801c7e0 <fp_invmod+0xac>
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801c7d8:	4630      	mov	r0, r6
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801c7da:	f001 f8cb 	bl	801d974 <free>
  return FP_OKAY;
 801c7de:	e7c7      	b.n	801c770 <fp_invmod+0x3c>
  fp_copy(b, y);
 801c7e0:	f106 0168 	add.w	r1, r6, #104	; 0x68
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f7ff fc23 	bl	801c030 <fp_copy>
  if (fp_iszero(x) == FP_YES) {
 801c7ea:	6832      	ldr	r2, [r6, #0]
 801c7ec:	2a00      	cmp	r2, #0
 801c7ee:	d105      	bne.n	801c7fc <fp_invmod+0xc8>
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801c7f0:	4630      	mov	r0, r6
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801c7f2:	f001 f8bf 	bl	801d974 <free>
    return FP_VAL;
 801c7f6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801c7fa:	e7b9      	b.n	801c770 <fp_invmod+0x3c>
  if (fp_iseven(x) == FP_YES && fp_iseven(y) == FP_YES) {
 801c7fc:	dd08      	ble.n	801c810 <fp_invmod+0xdc>
 801c7fe:	68b2      	ldr	r2, [r6, #8]
 801c800:	07d0      	lsls	r0, r2, #31
 801c802:	d405      	bmi.n	801c810 <fp_invmod+0xdc>
 801c804:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 801c806:	2a00      	cmp	r2, #0
 801c808:	dd02      	ble.n	801c810 <fp_invmod+0xdc>
 801c80a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 801c80c:	07d1      	lsls	r1, r2, #31
 801c80e:	d5ef      	bpl.n	801c7f0 <fp_invmod+0xbc>
  fp_copy (x, u);
 801c810:	f106 01d0 	add.w	r1, r6, #208	; 0xd0
 801c814:	4630      	mov	r0, r6
 801c816:	f7ff fc0b 	bl	801c030 <fp_copy>
  fp_copy (y, v);
 801c81a:	4649      	mov	r1, r9
 801c81c:	f106 0068 	add.w	r0, r6, #104	; 0x68
   a->dp[0] = b;
 801c820:	f04f 0b01 	mov.w	fp, #1
  fp_copy (y, v);
 801c824:	f7ff fc04 	bl	801c030 <fp_copy>
   fp_zero(a);
 801c828:	4638      	mov	r0, r7
 801c82a:	f7ff fab7 	bl	801bd9c <fp_zero>
   a->dp[0] = b;
 801c82e:	f8c6 b1a8 	str.w	fp, [r6, #424]	; 0x1a8
   a->used  = a->dp[0] ? 1 : 0;
 801c832:	f8c6 b1a0 	str.w	fp, [r6, #416]	; 0x1a0
   fp_zero(a);
 801c836:	4640      	mov	r0, r8
 801c838:	f7ff fab0 	bl	801bd9c <fp_zero>
   a->dp[0] = b;
 801c83c:	f8c6 b2e0 	str.w	fp, [r6, #736]	; 0x2e0
   a->used  = a->dp[0] ? 1 : 0;
 801c840:	f8c6 b2d8 	str.w	fp, [r6, #728]	; 0x2d8
  while (fp_iseven (u) == FP_YES) {
 801c844:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
 801c848:	2a00      	cmp	r2, #0
 801c84a:	dd5d      	ble.n	801c908 <fp_invmod+0x1d4>
 801c84c:	f8d6 20d8 	ldr.w	r2, [r6, #216]	; 0xd8
 801c850:	07d0      	lsls	r0, r2, #31
 801c852:	d459      	bmi.n	801c908 <fp_invmod+0x1d4>
    fp_div_2 (u, u);
 801c854:	9901      	ldr	r1, [sp, #4]
 801c856:	4608      	mov	r0, r1
 801c858:	f7fe ff89 	bl	801b76e <fp_div_2>
    if (fp_isodd (A) == FP_YES || fp_isodd (B) == FP_YES) {
 801c85c:	f8d6 21a0 	ldr.w	r2, [r6, #416]	; 0x1a0
 801c860:	2a00      	cmp	r2, #0
 801c862:	dd03      	ble.n	801c86c <fp_invmod+0x138>
 801c864:	f8d6 21a8 	ldr.w	r2, [r6, #424]	; 0x1a8
 801c868:	07d2      	lsls	r2, r2, #31
 801c86a:	d407      	bmi.n	801c87c <fp_invmod+0x148>
 801c86c:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
 801c870:	2a00      	cmp	r2, #0
 801c872:	dd13      	ble.n	801c89c <fp_invmod+0x168>
 801c874:	f8d6 2210 	ldr.w	r2, [r6, #528]	; 0x210
 801c878:	07d3      	lsls	r3, r2, #31
 801c87a:	d50f      	bpl.n	801c89c <fp_invmod+0x168>
      err = fp_add (A, y, A);
 801c87c:	9902      	ldr	r1, [sp, #8]
 801c87e:	463a      	mov	r2, r7
 801c880:	4638      	mov	r0, r7
 801c882:	f7ff f8d9 	bl	801ba38 <fp_add>
      if (err != FP_OKAY) {
 801c886:	4683      	mov	fp, r0
 801c888:	2800      	cmp	r0, #0
 801c88a:	d1a5      	bne.n	801c7d8 <fp_invmod+0xa4>
      err = fp_sub (B, x, B);
 801c88c:	4652      	mov	r2, sl
 801c88e:	4631      	mov	r1, r6
 801c890:	4650      	mov	r0, sl
 801c892:	f7ff f8f3 	bl	801ba7c <fp_sub>
      if (err != FP_OKAY) {
 801c896:	4683      	mov	fp, r0
 801c898:	2800      	cmp	r0, #0
 801c89a:	d19d      	bne.n	801c7d8 <fp_invmod+0xa4>
    fp_div_2 (A, A);
 801c89c:	4639      	mov	r1, r7
 801c89e:	4638      	mov	r0, r7
 801c8a0:	f7fe ff65 	bl	801b76e <fp_div_2>
    fp_div_2 (B, B);
 801c8a4:	4651      	mov	r1, sl
 801c8a6:	4650      	mov	r0, sl
 801c8a8:	f7fe ff61 	bl	801b76e <fp_div_2>
 801c8ac:	e7ca      	b.n	801c844 <fp_invmod+0x110>
    fp_div_2 (v, v);
 801c8ae:	4648      	mov	r0, r9
 801c8b0:	f7fe ff5d 	bl	801b76e <fp_div_2>
    if (fp_isodd (C) == FP_YES || fp_isodd (D) == FP_YES) {
 801c8b4:	f8d6 2270 	ldr.w	r2, [r6, #624]	; 0x270
 801c8b8:	2a00      	cmp	r2, #0
 801c8ba:	dd03      	ble.n	801c8c4 <fp_invmod+0x190>
 801c8bc:	f8d6 2278 	ldr.w	r2, [r6, #632]	; 0x278
 801c8c0:	07d1      	lsls	r1, r2, #31
 801c8c2:	d407      	bmi.n	801c8d4 <fp_invmod+0x1a0>
 801c8c4:	f8d6 22d8 	ldr.w	r2, [r6, #728]	; 0x2d8
 801c8c8:	2a00      	cmp	r2, #0
 801c8ca:	dd15      	ble.n	801c8f8 <fp_invmod+0x1c4>
 801c8cc:	f8d6 22e0 	ldr.w	r2, [r6, #736]	; 0x2e0
 801c8d0:	07d2      	lsls	r2, r2, #31
 801c8d2:	d511      	bpl.n	801c8f8 <fp_invmod+0x1c4>
      err = fp_add (C, y, C);
 801c8d4:	9902      	ldr	r1, [sp, #8]
 801c8d6:	462a      	mov	r2, r5
 801c8d8:	4628      	mov	r0, r5
 801c8da:	f7ff f8ad 	bl	801ba38 <fp_add>
      if (err != FP_OKAY) {
 801c8de:	4683      	mov	fp, r0
 801c8e0:	2800      	cmp	r0, #0
 801c8e2:	f47f af79 	bne.w	801c7d8 <fp_invmod+0xa4>
      err = fp_sub (D, x, D);
 801c8e6:	4642      	mov	r2, r8
 801c8e8:	4631      	mov	r1, r6
 801c8ea:	4640      	mov	r0, r8
 801c8ec:	f7ff f8c6 	bl	801ba7c <fp_sub>
      if (err != FP_OKAY) {
 801c8f0:	4683      	mov	fp, r0
 801c8f2:	2800      	cmp	r0, #0
 801c8f4:	f47f af70 	bne.w	801c7d8 <fp_invmod+0xa4>
    fp_div_2 (C, C);
 801c8f8:	4629      	mov	r1, r5
 801c8fa:	4628      	mov	r0, r5
 801c8fc:	f7fe ff37 	bl	801b76e <fp_div_2>
    fp_div_2 (D, D);
 801c900:	4641      	mov	r1, r8
 801c902:	4640      	mov	r0, r8
 801c904:	f7fe ff33 	bl	801b76e <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 801c908:	f8d6 2138 	ldr.w	r2, [r6, #312]	; 0x138
 801c90c:	2a00      	cmp	r2, #0
    fp_div_2 (v, v);
 801c90e:	4649      	mov	r1, r9
  while (fp_iseven (v) == FP_YES) {
 801c910:	dd03      	ble.n	801c91a <fp_invmod+0x1e6>
 801c912:	f8d6 2140 	ldr.w	r2, [r6, #320]	; 0x140
 801c916:	07d3      	lsls	r3, r2, #31
 801c918:	d5c9      	bpl.n	801c8ae <fp_invmod+0x17a>
  if (fp_cmp (u, v) != FP_LT) {
 801c91a:	9801      	ldr	r0, [sp, #4]
 801c91c:	f7ff f8cf 	bl	801babe <fp_cmp>
 801c920:	3001      	adds	r0, #1
 801c922:	d115      	bne.n	801c950 <fp_invmod+0x21c>
    err = fp_sub (v, u, v);
 801c924:	9901      	ldr	r1, [sp, #4]
 801c926:	464a      	mov	r2, r9
 801c928:	4648      	mov	r0, r9
 801c92a:	f7ff f8a7 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801c92e:	4683      	mov	fp, r0
 801c930:	2800      	cmp	r0, #0
 801c932:	f47f af51 	bne.w	801c7d8 <fp_invmod+0xa4>
    err = fp_sub (C, A, C);
 801c936:	462a      	mov	r2, r5
 801c938:	4639      	mov	r1, r7
 801c93a:	4628      	mov	r0, r5
 801c93c:	f7ff f89e 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801c940:	4683      	mov	fp, r0
 801c942:	2800      	cmp	r0, #0
 801c944:	f47f af48 	bne.w	801c7d8 <fp_invmod+0xa4>
    err = fp_sub (D, B, D);
 801c948:	4642      	mov	r2, r8
 801c94a:	4651      	mov	r1, sl
 801c94c:	4640      	mov	r0, r8
 801c94e:	e014      	b.n	801c97a <fp_invmod+0x246>
    err = fp_sub (u, v, u);
 801c950:	9a01      	ldr	r2, [sp, #4]
 801c952:	4649      	mov	r1, r9
 801c954:	4610      	mov	r0, r2
 801c956:	f7ff f891 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801c95a:	4683      	mov	fp, r0
 801c95c:	2800      	cmp	r0, #0
 801c95e:	f47f af3b 	bne.w	801c7d8 <fp_invmod+0xa4>
    err = fp_sub (A, C, A);
 801c962:	463a      	mov	r2, r7
 801c964:	4629      	mov	r1, r5
 801c966:	4638      	mov	r0, r7
 801c968:	f7ff f888 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801c96c:	4683      	mov	fp, r0
 801c96e:	2800      	cmp	r0, #0
 801c970:	f47f af32 	bne.w	801c7d8 <fp_invmod+0xa4>
    err = fp_sub (B, D, B);
 801c974:	4652      	mov	r2, sl
 801c976:	4641      	mov	r1, r8
 801c978:	4650      	mov	r0, sl
    err = fp_sub (D, B, D);
 801c97a:	f7ff f87f 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801c97e:	4683      	mov	fp, r0
 801c980:	2800      	cmp	r0, #0
 801c982:	f47f af29 	bne.w	801c7d8 <fp_invmod+0xa4>
  if (fp_iszero (u) == FP_NO)
 801c986:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
 801c98a:	2a00      	cmp	r2, #0
 801c98c:	f47f af5a 	bne.w	801c844 <fp_invmod+0x110>
  if (fp_cmp_d (v, 1) != FP_EQ) {
 801c990:	2101      	movs	r1, #1
 801c992:	4648      	mov	r0, r9
 801c994:	f7ff f81c 	bl	801b9d0 <fp_cmp_d>
 801c998:	2800      	cmp	r0, #0
 801c99a:	f47f af29 	bne.w	801c7f0 <fp_invmod+0xbc>
  while (fp_cmp_d(C, 0) == FP_LT) {
 801c99e:	2100      	movs	r1, #0
 801c9a0:	4628      	mov	r0, r5
 801c9a2:	f7ff f815 	bl	801b9d0 <fp_cmp_d>
 801c9a6:	3001      	adds	r0, #1
 801c9a8:	d00f      	beq.n	801c9ca <fp_invmod+0x296>
  while (fp_cmp_mag(C, b) != FP_LT) {
 801c9aa:	4621      	mov	r1, r4
 801c9ac:	4628      	mov	r0, r5
 801c9ae:	f7ff f828 	bl	801ba02 <fp_cmp_mag>
 801c9b2:	3001      	adds	r0, #1
 801c9b4:	d112      	bne.n	801c9dc <fp_invmod+0x2a8>
  fp_copy(C, c);
 801c9b6:	9903      	ldr	r1, [sp, #12]
 801c9b8:	4628      	mov	r0, r5
 801c9ba:	f7ff fb39 	bl	801c030 <fp_copy>
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801c9be:	4630      	mov	r0, r6
 801c9c0:	f000 ffd8 	bl	801d974 <free>
  return FP_OKAY;
 801c9c4:	f04f 0b00 	mov.w	fp, #0
 801c9c8:	e6d2      	b.n	801c770 <fp_invmod+0x3c>
    err = fp_add(C, b, C);
 801c9ca:	462a      	mov	r2, r5
 801c9cc:	4621      	mov	r1, r4
 801c9ce:	4628      	mov	r0, r5
 801c9d0:	f7ff f832 	bl	801ba38 <fp_add>
    if (err != FP_OKAY) {
 801c9d4:	4683      	mov	fp, r0
 801c9d6:	2800      	cmp	r0, #0
 801c9d8:	d0e1      	beq.n	801c99e <fp_invmod+0x26a>
 801c9da:	e6fd      	b.n	801c7d8 <fp_invmod+0xa4>
    err = fp_sub(C, b, C);
 801c9dc:	462a      	mov	r2, r5
 801c9de:	4621      	mov	r1, r4
 801c9e0:	4628      	mov	r0, r5
 801c9e2:	f7ff f84b 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801c9e6:	4683      	mov	fp, r0
 801c9e8:	2800      	cmp	r0, #0
 801c9ea:	d0de      	beq.n	801c9aa <fp_invmod+0x276>
 801c9ec:	e6f4      	b.n	801c7d8 <fp_invmod+0xa4>
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 6, NULL, DYNAMIC_TYPE_BIGINT);
 801c9ee:	f44f 701c 	mov.w	r0, #624	; 0x270
 801c9f2:	f000 ffb7 	bl	801d964 <malloc>
  if (x == NULL) {
 801c9f6:	4682      	mov	sl, r0
 801c9f8:	2800      	cmp	r0, #0
 801c9fa:	f43f aeb7 	beq.w	801c76c <fp_invmod+0x38>
  y = &x[1]; u = &x[2]; v = &x[3]; B = &x[4]; D = &x[5];
 801c9fe:	f100 0968 	add.w	r9, r0, #104	; 0x68
 801ca02:	f100 07d0 	add.w	r7, r0, #208	; 0xd0
 801ca06:	f500 769c 	add.w	r6, r0, #312	; 0x138
 801ca0a:	f500 78d0 	add.w	r8, r0, #416	; 0x1a0
 801ca0e:	f500 7502 	add.w	r5, r0, #520	; 0x208
    fp_zero(a);
 801ca12:	f7ff f9c3 	bl	801bd9c <fp_zero>
 801ca16:	4648      	mov	r0, r9
 801ca18:	f7ff f9c0 	bl	801bd9c <fp_zero>
 801ca1c:	4638      	mov	r0, r7
 801ca1e:	f7ff f9bd 	bl	801bd9c <fp_zero>
 801ca22:	4630      	mov	r0, r6
 801ca24:	f7ff f9ba 	bl	801bd9c <fp_zero>
 801ca28:	4640      	mov	r0, r8
 801ca2a:	f7ff f9b7 	bl	801bd9c <fp_zero>
 801ca2e:	4628      	mov	r0, r5
 801ca30:	f7ff f9b4 	bl	801bd9c <fp_zero>
  if (fp_iszero(a) == FP_YES) {
 801ca34:	f8db 3000 	ldr.w	r3, [fp]
 801ca38:	b90b      	cbnz	r3, 801ca3e <fp_invmod+0x30a>
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801ca3a:	4650      	mov	r0, sl
 801ca3c:	e6d9      	b.n	801c7f2 <fp_invmod+0xbe>
  fp_copy(b, x);
 801ca3e:	4651      	mov	r1, sl
 801ca40:	4620      	mov	r0, r4
 801ca42:	f7ff faf5 	bl	801c030 <fp_copy>
  return fp_mod (a, b, c);
 801ca46:	4658      	mov	r0, fp
 801ca48:	464a      	mov	r2, r9
 801ca4a:	4621      	mov	r1, r4
 801ca4c:	f7ff fe1f 	bl	801c68e <fp_mod>
  if ((err = mp_mod(a, b, y)) != FP_OKAY) {
 801ca50:	4683      	mov	fp, r0
 801ca52:	b108      	cbz	r0, 801ca58 <fp_invmod+0x324>
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801ca54:	4650      	mov	r0, sl
 801ca56:	e6c0      	b.n	801c7da <fp_invmod+0xa6>
  if (fp_iszero(y) == FP_YES) {
 801ca58:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d0ec      	beq.n	801ca3a <fp_invmod+0x306>
  fp_copy(x, u);
 801ca60:	4639      	mov	r1, r7
 801ca62:	4650      	mov	r0, sl
 801ca64:	f7ff fae4 	bl	801c030 <fp_copy>
  fp_copy(y, v);
 801ca68:	4631      	mov	r1, r6
 801ca6a:	4648      	mov	r0, r9
 801ca6c:	f7ff fae0 	bl	801c030 <fp_copy>
   fp_zero(a);
 801ca70:	4628      	mov	r0, r5
 801ca72:	f7ff f993 	bl	801bd9c <fp_zero>
   a->dp[0] = b;
 801ca76:	2301      	movs	r3, #1
 801ca78:	f8ca 3210 	str.w	r3, [sl, #528]	; 0x210
   a->used  = a->dp[0] ? 1 : 0;
 801ca7c:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
  while (fp_iseven (u) == FP_YES) {
 801ca80:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	dd33      	ble.n	801caf0 <fp_invmod+0x3bc>
 801ca88:	f8da 30d8 	ldr.w	r3, [sl, #216]	; 0xd8
 801ca8c:	07d9      	lsls	r1, r3, #31
 801ca8e:	d42f      	bmi.n	801caf0 <fp_invmod+0x3bc>
    fp_div_2 (u, u);
 801ca90:	4639      	mov	r1, r7
 801ca92:	4638      	mov	r0, r7
 801ca94:	f7fe fe6b 	bl	801b76e <fp_div_2>
    if (fp_isodd (B) == FP_YES) {
 801ca98:	f8da 31a0 	ldr.w	r3, [sl, #416]	; 0x1a0
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	dd0b      	ble.n	801cab8 <fp_invmod+0x384>
 801caa0:	f8da 31a8 	ldr.w	r3, [sl, #424]	; 0x1a8
 801caa4:	07d8      	lsls	r0, r3, #31
 801caa6:	d507      	bpl.n	801cab8 <fp_invmod+0x384>
      err = fp_sub (B, x, B);
 801caa8:	4642      	mov	r2, r8
 801caaa:	4651      	mov	r1, sl
 801caac:	4640      	mov	r0, r8
 801caae:	f7fe ffe5 	bl	801ba7c <fp_sub>
      if (err != FP_OKAY) {
 801cab2:	4683      	mov	fp, r0
 801cab4:	2800      	cmp	r0, #0
 801cab6:	d1cd      	bne.n	801ca54 <fp_invmod+0x320>
    fp_div_2 (B, B);
 801cab8:	4641      	mov	r1, r8
 801caba:	4640      	mov	r0, r8
 801cabc:	f7fe fe57 	bl	801b76e <fp_div_2>
 801cac0:	e7de      	b.n	801ca80 <fp_invmod+0x34c>
    fp_div_2 (v, v);
 801cac2:	4630      	mov	r0, r6
 801cac4:	f7fe fe53 	bl	801b76e <fp_div_2>
    if (fp_isodd (D) == FP_YES) {
 801cac8:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 801cacc:	2b00      	cmp	r3, #0
 801cace:	dd0b      	ble.n	801cae8 <fp_invmod+0x3b4>
 801cad0:	f8da 3210 	ldr.w	r3, [sl, #528]	; 0x210
 801cad4:	07da      	lsls	r2, r3, #31
 801cad6:	d507      	bpl.n	801cae8 <fp_invmod+0x3b4>
      err = fp_sub (D, x, D);
 801cad8:	462a      	mov	r2, r5
 801cada:	4651      	mov	r1, sl
 801cadc:	4628      	mov	r0, r5
 801cade:	f7fe ffcd 	bl	801ba7c <fp_sub>
      if (err != FP_OKAY) {
 801cae2:	4683      	mov	fp, r0
 801cae4:	2800      	cmp	r0, #0
 801cae6:	d1b5      	bne.n	801ca54 <fp_invmod+0x320>
    fp_div_2 (D, D);
 801cae8:	4629      	mov	r1, r5
 801caea:	4628      	mov	r0, r5
 801caec:	f7fe fe3f 	bl	801b76e <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 801caf0:	f8da 3138 	ldr.w	r3, [sl, #312]	; 0x138
 801caf4:	2b00      	cmp	r3, #0
    fp_div_2 (v, v);
 801caf6:	4631      	mov	r1, r6
  while (fp_iseven (v) == FP_YES) {
 801caf8:	dd03      	ble.n	801cb02 <fp_invmod+0x3ce>
 801cafa:	f8da 3140 	ldr.w	r3, [sl, #320]	; 0x140
 801cafe:	07db      	lsls	r3, r3, #31
 801cb00:	d5df      	bpl.n	801cac2 <fp_invmod+0x38e>
  if (fp_cmp (u, v) != FP_LT) {
 801cb02:	4638      	mov	r0, r7
 801cb04:	f7fe ffdb 	bl	801babe <fp_cmp>
 801cb08:	3001      	adds	r0, #1
 801cb0a:	d10b      	bne.n	801cb24 <fp_invmod+0x3f0>
    err = fp_sub (v, u, v);
 801cb0c:	4632      	mov	r2, r6
 801cb0e:	4639      	mov	r1, r7
 801cb10:	4630      	mov	r0, r6
 801cb12:	f7fe ffb3 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801cb16:	4683      	mov	fp, r0
 801cb18:	2800      	cmp	r0, #0
 801cb1a:	d19b      	bne.n	801ca54 <fp_invmod+0x320>
    err = fp_sub (D, B, D);
 801cb1c:	462a      	mov	r2, r5
 801cb1e:	4641      	mov	r1, r8
 801cb20:	4628      	mov	r0, r5
 801cb22:	e00a      	b.n	801cb3a <fp_invmod+0x406>
    err = fp_sub (u, v, u);
 801cb24:	463a      	mov	r2, r7
 801cb26:	4631      	mov	r1, r6
 801cb28:	4638      	mov	r0, r7
 801cb2a:	f7fe ffa7 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801cb2e:	4683      	mov	fp, r0
 801cb30:	2800      	cmp	r0, #0
 801cb32:	d18f      	bne.n	801ca54 <fp_invmod+0x320>
    err = fp_sub (B, D, B);
 801cb34:	4642      	mov	r2, r8
 801cb36:	4629      	mov	r1, r5
 801cb38:	4640      	mov	r0, r8
    err = fp_sub (D, B, D);
 801cb3a:	f7fe ff9f 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801cb3e:	4683      	mov	fp, r0
 801cb40:	2800      	cmp	r0, #0
 801cb42:	d187      	bne.n	801ca54 <fp_invmod+0x320>
  if (fp_iszero (u) == FP_NO) {
 801cb44:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d199      	bne.n	801ca80 <fp_invmod+0x34c>
  if (fp_cmp_d (v, 1) != FP_EQ) {
 801cb4c:	2101      	movs	r1, #1
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f7fe ff3e 	bl	801b9d0 <fp_cmp_d>
 801cb54:	4683      	mov	fp, r0
 801cb56:	2800      	cmp	r0, #0
 801cb58:	f47f af6f 	bne.w	801ca3a <fp_invmod+0x306>
  while (D->sign == FP_NEG) {
 801cb5c:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
 801cb60:	2b01      	cmp	r3, #1
 801cb62:	d00a      	beq.n	801cb7a <fp_invmod+0x446>
  while (fp_cmp_mag(D, b) != FP_LT) {
 801cb64:	4621      	mov	r1, r4
 801cb66:	4628      	mov	r0, r5
 801cb68:	f7fe ff4b 	bl	801ba02 <fp_cmp_mag>
 801cb6c:	3001      	adds	r0, #1
 801cb6e:	d10c      	bne.n	801cb8a <fp_invmod+0x456>
  fp_copy (D, c);
 801cb70:	9903      	ldr	r1, [sp, #12]
 801cb72:	4628      	mov	r0, r5
 801cb74:	f7ff fa5c 	bl	801c030 <fp_copy>
 801cb78:	e76c      	b.n	801ca54 <fp_invmod+0x320>
    err = fp_add (D, b, D);
 801cb7a:	462a      	mov	r2, r5
 801cb7c:	4621      	mov	r1, r4
 801cb7e:	4628      	mov	r0, r5
 801cb80:	f7fe ff5a 	bl	801ba38 <fp_add>
    if (err != FP_OKAY) {
 801cb84:	2800      	cmp	r0, #0
 801cb86:	d0e9      	beq.n	801cb5c <fp_invmod+0x428>
 801cb88:	e764      	b.n	801ca54 <fp_invmod+0x320>
    err = fp_sub(D, b, D);
 801cb8a:	462a      	mov	r2, r5
 801cb8c:	4621      	mov	r1, r4
 801cb8e:	4628      	mov	r0, r5
 801cb90:	f7fe ff74 	bl	801ba7c <fp_sub>
    if (err != FP_OKAY) {
 801cb94:	4606      	mov	r6, r0
 801cb96:	2800      	cmp	r0, #0
 801cb98:	d0e4      	beq.n	801cb64 <fp_invmod+0x430>
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 801cb9a:	4650      	mov	r0, sl
 801cb9c:	f000 feea 	bl	801d974 <free>
    err = fp_sub(D, b, D);
 801cba0:	46b3      	mov	fp, r6
      return err;
 801cba2:	e5e5      	b.n	801c770 <fp_invmod+0x3c>

0801cba4 <mp_invmod>:
  return fp_invmod(a, b, c);
 801cba4:	f7ff bdc6 	b.w	801c734 <fp_invmod>

0801cba8 <fp_sqr_comba>:
{
 801cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbac:	4681      	mov	r9, r0
 801cbae:	b087      	sub	sp, #28
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801cbb0:	2068      	movs	r0, #104	; 0x68
{
 801cbb2:	460f      	mov	r7, r1
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801cbb4:	f000 fed6 	bl	801d964 <malloc>
   if (tmp == NULL)
 801cbb8:	4680      	mov	r8, r0
 801cbba:	2800      	cmp	r0, #0
 801cbbc:	f000 8087 	beq.w	801ccce <fp_sqr_comba+0x126>
  pa = A->used + A->used;
 801cbc0:	f8d9 3000 	ldr.w	r3, [r9]
 801cbc4:	005b      	lsls	r3, r3, #1
  if (pa >= FP_SIZE) {
 801cbc6:	2b17      	cmp	r3, #23
 801cbc8:	bfa8      	it	ge
 801cbca:	2317      	movge	r3, #23
  if (A == B) {
 801cbcc:	45b9      	cmp	r9, r7
 801cbce:	9302      	str	r3, [sp, #8]
 801cbd0:	d126      	bne.n	801cc20 <fp_sqr_comba+0x78>
    fp_zero(a);
 801cbd2:	f7ff f8e3 	bl	801bd9c <fp_zero>
     dst = tmp;
 801cbd6:	4640      	mov	r0, r8
  for (ix = 0; ix < pa; ix++) {
 801cbd8:	f100 0308 	add.w	r3, r0, #8
  COMBA_CLEAR;
 801cbdc:	2500      	movs	r5, #0
 801cbde:	9303      	str	r3, [sp, #12]
      tmpx = A->dp + tx;
 801cbe0:	f109 0308 	add.w	r3, r9, #8
  COMBA_CLEAR;
 801cbe4:	462c      	mov	r4, r5
  for (ix = 0; ix < pa; ix++) {
 801cbe6:	462e      	mov	r6, r5
      tmpx = A->dp + tx;
 801cbe8:	9304      	str	r3, [sp, #16]
          SQRADD2(*tmpx++, *tmpy--);
 801cbea:	46ab      	mov	fp, r5
  for (ix = 0; ix < pa; ix++) {
 801cbec:	9b02      	ldr	r3, [sp, #8]
 801cbee:	429e      	cmp	r6, r3
 801cbf0:	db1b      	blt.n	801cc2a <fp_sqr_comba+0x82>
  dst->used = pa;
 801cbf2:	6003      	str	r3, [r0, #0]
  fp_clamp (dst);
 801cbf4:	6803      	ldr	r3, [r0, #0]
 801cbf6:	b133      	cbz	r3, 801cc06 <fp_sqr_comba+0x5e>
 801cbf8:	1e5a      	subs	r2, r3, #1
 801cbfa:	3301      	adds	r3, #1
 801cbfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d062      	beq.n	801ccca <fp_sqr_comba+0x122>
 801cc04:	6843      	ldr	r3, [r0, #4]
 801cc06:	6043      	str	r3, [r0, #4]
  if (dst != B) {
 801cc08:	42b8      	cmp	r0, r7
 801cc0a:	d002      	beq.n	801cc12 <fp_sqr_comba+0x6a>
     fp_copy(dst, B);
 801cc0c:	4639      	mov	r1, r7
 801cc0e:	f7ff fa0f 	bl	801c030 <fp_copy>
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801cc12:	4640      	mov	r0, r8
 801cc14:	f000 feae 	bl	801d974 <free>
  return FP_OKAY;
 801cc18:	2000      	movs	r0, #0
}
 801cc1a:	b007      	add	sp, #28
 801cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fp_zero(B);
 801cc20:	4638      	mov	r0, r7
 801cc22:	f7ff f8bb 	bl	801bd9c <fp_zero>
 801cc26:	4638      	mov	r0, r7
 801cc28:	e7d6      	b.n	801cbd8 <fp_sqr_comba+0x30>
      ty = MIN(A->used-1, ix);
 801cc2a:	f8d9 2000 	ldr.w	r2, [r9]
      tmpx = A->dp + tx;
 801cc2e:	f8dd c010 	ldr.w	ip, [sp, #16]
      ty = MIN(A->used-1, ix);
 801cc32:	42b2      	cmp	r2, r6
 801cc34:	bfd4      	ite	le
 801cc36:	f102 33ff 	addle.w	r3, r2, #4294967295	; 0xffffffff
 801cc3a:	4633      	movgt	r3, r6
      tx = ix - ty;
 801cc3c:	1af1      	subs	r1, r6, r3
      iy = MIN(A->used-tx, ty+1);
 801cc3e:	1a52      	subs	r2, r2, r1
 801cc40:	429a      	cmp	r2, r3
 801cc42:	bfc8      	it	gt
 801cc44:	1c5a      	addgt	r2, r3, #1
      tmpx = A->dp + tx;
 801cc46:	eb0c 0e81 	add.w	lr, ip, r1, lsl #2
      tmpy = A->dp + ty;
 801cc4a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
      iy = MIN(iy, (ty-tx+1)>>1);
 801cc4e:	1a5b      	subs	r3, r3, r1
 801cc50:	3301      	adds	r3, #1
 801cc52:	105b      	asrs	r3, r3, #1
 801cc54:	4293      	cmp	r3, r2
 801cc56:	bfa8      	it	ge
 801cc58:	4613      	movge	r3, r2
 801cc5a:	9305      	str	r3, [sp, #20]
      COMBA_FORWARD;
 801cc5c:	4623      	mov	r3, r4
 801cc5e:	462c      	mov	r4, r5
 801cc60:	2500      	movs	r5, #0
      tmpy = A->dp + ty;
 801cc62:	f8cd c004 	str.w	ip, [sp, #4]
      for (iz = 0; iz < iy; iz++) {
 801cc66:	4629      	mov	r1, r5
 801cc68:	9a05      	ldr	r2, [sp, #20]
 801cc6a:	4291      	cmp	r1, r2
 801cc6c:	db12      	blt.n	801cc94 <fp_sqr_comba+0xec>
      if ((ix&1) == 0) {
 801cc6e:	f016 0c01 	ands.w	ip, r6, #1
 801cc72:	d109      	bne.n	801cc88 <fp_sqr_comba+0xe0>
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
 801cc74:	1072      	asrs	r2, r6, #1
 801cc76:	3202      	adds	r2, #2
 801cc78:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 801cc7c:	4662      	mov	r2, ip
 801cc7e:	fbe1 3201 	umlal	r3, r2, r1, r1
 801cc82:	18a4      	adds	r4, r4, r2
 801cc84:	eb45 054c 	adc.w	r5, r5, ip, lsl #1
      COMBA_STORE(dst->dp[ix]);
 801cc88:	9a03      	ldr	r2, [sp, #12]
 801cc8a:	f842 3b04 	str.w	r3, [r2], #4
  for (ix = 0; ix < pa; ix++) {
 801cc8e:	3601      	adds	r6, #1
      COMBA_STORE(dst->dp[ix]);
 801cc90:	9203      	str	r2, [sp, #12]
  for (ix = 0; ix < pa; ix++) {
 801cc92:	e7ab      	b.n	801cbec <fp_sqr_comba+0x44>
          SQRADD2(*tmpx++, *tmpy--);
 801cc94:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cc98:	f85c 2904 	ldr.w	r2, [ip], #-4
 801cc9c:	f8cd c004 	str.w	ip, [sp, #4]
 801cca0:	f85e c021 	ldr.w	ip, [lr, r1, lsl #2]
 801cca4:	fbac c202 	umull	ip, r2, ip, r2
 801cca8:	eb13 030c 	adds.w	r3, r3, ip
 801ccac:	f142 0a00 	adc.w	sl, r2, #0
 801ccb0:	eb14 040a 	adds.w	r4, r4, sl
 801ccb4:	eb4b 0a0b 	adc.w	sl, fp, fp
 801ccb8:	eb13 030c 	adds.w	r3, r3, ip
 801ccbc:	f142 0200 	adc.w	r2, r2, #0
 801ccc0:	1914      	adds	r4, r2, r4
 801ccc2:	eb45 050a 	adc.w	r5, r5, sl
      for (iz = 0; iz < iy; iz++) {
 801ccc6:	3101      	adds	r1, #1
 801ccc8:	e7ce      	b.n	801cc68 <fp_sqr_comba+0xc0>
  fp_clamp (dst);
 801ccca:	6002      	str	r2, [r0, #0]
 801cccc:	e792      	b.n	801cbf4 <fp_sqr_comba+0x4c>
       return FP_MEM;
 801ccce:	f06f 0001 	mvn.w	r0, #1
 801ccd2:	e7a2      	b.n	801cc1a <fp_sqr_comba+0x72>

0801ccd4 <fp_sqr>:
{
 801ccd4:	b538      	push	{r3, r4, r5, lr}
    y = A->used;
 801ccd6:	6803      	ldr	r3, [r0, #0]
    oldused = B->used;
 801ccd8:	680d      	ldr	r5, [r1, #0]
    if (y + y >= FP_SIZE) {
 801ccda:	005a      	lsls	r2, r3, #1
 801ccdc:	2a17      	cmp	r2, #23
{
 801ccde:	460c      	mov	r4, r1
    if (y + y >= FP_SIZE) {
 801cce0:	dc0f      	bgt.n	801cd02 <fp_sqr+0x2e>
        if (y == 8) {
 801cce2:	2b08      	cmp	r3, #8
 801cce4:	d10a      	bne.n	801ccfc <fp_sqr+0x28>
           err = fp_sqr_comba8(A,B);
 801cce6:	f7fd ffb3 	bl	801ac50 <fp_sqr_comba8>
  for (y = B->used; y >= 0 && y < oldused; y++) {
 801ccea:	4621      	mov	r1, r4
    B->dp[y] = 0;
 801ccec:	2200      	movs	r2, #0
  for (y = B->used; y >= 0 && y < oldused; y++) {
 801ccee:	f851 3b08 	ldr.w	r3, [r1], #8
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	db01      	blt.n	801ccfa <fp_sqr+0x26>
 801ccf6:	42ab      	cmp	r3, r5
 801ccf8:	db06      	blt.n	801cd08 <fp_sqr+0x34>
}
 801ccfa:	bd38      	pop	{r3, r4, r5, pc}
       err = fp_sqr_comba(A, B);
 801ccfc:	f7ff ff54 	bl	801cba8 <fp_sqr_comba>
 801cd00:	e7f3      	b.n	801ccea <fp_sqr+0x16>
       err = FP_VAL;
 801cd02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd06:	e7f0      	b.n	801ccea <fp_sqr+0x16>
    B->dp[y] = 0;
 801cd08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (y = B->used; y >= 0 && y < oldused; y++) {
 801cd0c:	3301      	adds	r3, #1
 801cd0e:	e7f0      	b.n	801ccf2 <fp_sqr+0x1e>

0801cd10 <fp_invmod_mont_ct>:
{
 801cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd14:	461f      	mov	r7, r3
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801cd16:	6803      	ldr	r3, [r0, #0]
{
 801cd18:	b085      	sub	sp, #20
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801cd1a:	005b      	lsls	r3, r3, #1
 801cd1c:	2b18      	cmp	r3, #24
{
 801cd1e:	4683      	mov	fp, r0
 801cd20:	460e      	mov	r6, r1
 801cd22:	9201      	str	r2, [sp, #4]
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801cd24:	f300 80c7 	bgt.w	801ceb6 <fp_invmod_mont_ct+0x1a6>
 801cd28:	680b      	ldr	r3, [r1, #0]
 801cd2a:	005b      	lsls	r3, r3, #1
 801cd2c:	2b18      	cmp	r3, #24
 801cd2e:	f300 80c2 	bgt.w	801ceb6 <fp_invmod_mont_ct+0x1a6>
  t = (fp_int*)XMALLOC(sizeof(fp_int) * (2 + CT_INV_MOD_PRE_CNT), NULL,
 801cd32:	f44f 6082 	mov.w	r0, #1040	; 0x410
 801cd36:	f000 fe15 	bl	801d964 <malloc>
  if (t == NULL)
 801cd3a:	4604      	mov	r4, r0
 801cd3c:	2800      	cmp	r0, #0
 801cd3e:	f000 80bd 	beq.w	801cebc <fp_invmod_mont_ct+0x1ac>
  e = t + 1;
 801cd42:	f100 0968 	add.w	r9, r0, #104	; 0x68
  pre = t + 2;
 801cd46:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
    fp_zero(a);
 801cd4a:	f7ff f827 	bl	801bd9c <fp_zero>
 801cd4e:	4648      	mov	r0, r9
 801cd50:	f7ff f824 	bl	801bd9c <fp_zero>
 801cd54:	4640      	mov	r0, r8
 801cd56:	f7ff f821 	bl	801bd9c <fp_zero>
  fp_copy(a, &pre[0]);
 801cd5a:	4641      	mov	r1, r8
 801cd5c:	4658      	mov	r0, fp
 801cd5e:	f7ff f967 	bl	801c030 <fp_copy>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801cd62:	f504 6382 	add.w	r3, r4, #1040	; 0x410
 801cd66:	9302      	str	r3, [sp, #8]
 801cd68:	f504 759c 	add.w	r5, r4, #312	; 0x138
  int i, j, err = FP_OKAY;
 801cd6c:	2300      	movs	r3, #0
    fp_zero(a);
 801cd6e:	4628      	mov	r0, r5
 801cd70:	9303      	str	r3, [sp, #12]
 801cd72:	f7ff f813 	bl	801bd9c <fp_zero>
    err |= fp_sqr(&pre[i-1], &pre[i]);
 801cd76:	4629      	mov	r1, r5
 801cd78:	f1a5 0068 	sub.w	r0, r5, #104	; 0x68
 801cd7c:	f7ff ffaa 	bl	801ccd4 <fp_sqr>
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801cd80:	463a      	mov	r2, r7
    err |= fp_sqr(&pre[i-1], &pre[i]);
 801cd82:	4682      	mov	sl, r0
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801cd84:	4631      	mov	r1, r6
 801cd86:	4628      	mov	r0, r5
 801cd88:	f7fe ff6e 	bl	801bc68 <fp_montgomery_reduce>
    err |= fp_mul(&pre[i], a, &pre[i]);
 801cd8c:	462a      	mov	r2, r5
 801cd8e:	ea4a 0a00 	orr.w	sl, sl, r0
 801cd92:	4659      	mov	r1, fp
 801cd94:	4628      	mov	r0, r5
 801cd96:	f7ff fa1f 	bl	801c1d8 <fp_mul>
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801cd9a:	463a      	mov	r2, r7
 801cd9c:	ea4a 0a00 	orr.w	sl, sl, r0
 801cda0:	4631      	mov	r1, r6
 801cda2:	4628      	mov	r0, r5
 801cda4:	f7fe ff60 	bl	801bc68 <fp_montgomery_reduce>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801cda8:	9a02      	ldr	r2, [sp, #8]
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801cdaa:	9b03      	ldr	r3, [sp, #12]
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801cdac:	3568      	adds	r5, #104	; 0x68
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801cdae:	ea4a 0a00 	orr.w	sl, sl, r0
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801cdb2:	42aa      	cmp	r2, r5
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801cdb4:	ea43 030a 	orr.w	r3, r3, sl
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801cdb8:	d1d9      	bne.n	801cd6e <fp_invmod_mont_ct+0x5e>
  err |= fp_sub_d(b, 2, e);
 801cdba:	464a      	mov	r2, r9
 801cdbc:	2102      	movs	r1, #2
 801cdbe:	4630      	mov	r0, r6
 801cdc0:	9302      	str	r3, [sp, #8]
 801cdc2:	f7ff f8cb 	bl	801bf5c <fp_sub_d>
 801cdc6:	9b02      	ldr	r3, [sp, #8]
 801cdc8:	ea40 0503 	orr.w	r5, r0, r3
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801cdcc:	4648      	mov	r0, r9
 801cdce:	f7fe ff86 	bl	801bcde <fp_count_bits>
  j = 1;
 801cdd2:	f04f 0a01 	mov.w	sl, #1
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801cdd6:	f1a0 0b02 	sub.w	fp, r0, #2
 801cdda:	f1bb 0f00 	cmp.w	fp, #0
 801cdde:	da27      	bge.n	801ce30 <fp_invmod_mont_ct+0x120>
  fp_copy(&pre[j-1], t);
 801cde0:	2368      	movs	r3, #104	; 0x68
 801cde2:	fb03 800a 	mla	r0, r3, sl, r8
 801cde6:	4621      	mov	r1, r4
 801cde8:	3868      	subs	r0, #104	; 0x68
 801cdea:	f7ff f921 	bl	801c030 <fp_copy>
  j = 0;
 801cdee:	f04f 0a00 	mov.w	sl, #0
  for (; i >= 0; i--) {
 801cdf2:	f1bb 0f00 	cmp.w	fp, #0
 801cdf6:	da29      	bge.n	801ce4c <fp_invmod_mont_ct+0x13c>
  if (j > 0) {
 801cdf8:	f1ba 0f00 	cmp.w	sl, #0
 801cdfc:	dd56      	ble.n	801ceac <fp_invmod_mont_ct+0x19c>
    err |= fp_mul(t, &pre[j-1], c);
 801cdfe:	2168      	movs	r1, #104	; 0x68
 801ce00:	fb01 810a 	mla	r1, r1, sl, r8
 801ce04:	9a01      	ldr	r2, [sp, #4]
 801ce06:	3968      	subs	r1, #104	; 0x68
 801ce08:	4620      	mov	r0, r4
 801ce0a:	f7ff f9e5 	bl	801c1d8 <fp_mul>
    err |= fp_montgomery_reduce(c, b, mp);
 801ce0e:	463a      	mov	r2, r7
    err |= fp_mul(t, &pre[j-1], c);
 801ce10:	4680      	mov	r8, r0
    err |= fp_montgomery_reduce(c, b, mp);
 801ce12:	4631      	mov	r1, r6
 801ce14:	9801      	ldr	r0, [sp, #4]
 801ce16:	f7fe ff27 	bl	801bc68 <fp_montgomery_reduce>
 801ce1a:	ea48 0800 	orr.w	r8, r8, r0
 801ce1e:	ea45 0508 	orr.w	r5, r5, r8
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801ce22:	4620      	mov	r0, r4
 801ce24:	f000 fda6 	bl	801d974 <free>
}
 801ce28:	4628      	mov	r0, r5
 801ce2a:	b005      	add	sp, #20
 801ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!fp_is_bit_set(e, i) || j == CT_INV_MOD_PRE_CNT)
 801ce30:	4659      	mov	r1, fp
 801ce32:	4648      	mov	r0, r9
 801ce34:	f7fe ff3b 	bl	801bcae <fp_is_bit_set>
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	d0d1      	beq.n	801cde0 <fp_invmod_mont_ct+0xd0>
 801ce3c:	f1ba 0f08 	cmp.w	sl, #8
 801ce40:	d0ce      	beq.n	801cde0 <fp_invmod_mont_ct+0xd0>
      j++;
 801ce42:	f10a 0a01 	add.w	sl, sl, #1
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801ce46:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801ce4a:	e7c6      	b.n	801cdda <fp_invmod_mont_ct+0xca>
    int set = fp_is_bit_set(e, i);
 801ce4c:	4659      	mov	r1, fp
 801ce4e:	4648      	mov	r0, r9
 801ce50:	f7fe ff2d 	bl	801bcae <fp_is_bit_set>
    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 801ce54:	f1ba 0f08 	cmp.w	sl, #8
    int set = fp_is_bit_set(e, i);
 801ce58:	9002      	str	r0, [sp, #8]
    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 801ce5a:	d003      	beq.n	801ce64 <fp_invmod_mont_ct+0x154>
 801ce5c:	b9b0      	cbnz	r0, 801ce8c <fp_invmod_mont_ct+0x17c>
 801ce5e:	f1ba 0f00 	cmp.w	sl, #0
 801ce62:	dd13      	ble.n	801ce8c <fp_invmod_mont_ct+0x17c>
      err |= fp_mul(t, &pre[j-1], t);
 801ce64:	2368      	movs	r3, #104	; 0x68
 801ce66:	fb03 810a 	mla	r1, r3, sl, r8
 801ce6a:	4622      	mov	r2, r4
 801ce6c:	3968      	subs	r1, #104	; 0x68
 801ce6e:	4620      	mov	r0, r4
 801ce70:	f7ff f9b2 	bl	801c1d8 <fp_mul>
      err |= fp_montgomery_reduce(t, b, mp);
 801ce74:	463a      	mov	r2, r7
      err |= fp_mul(t, &pre[j-1], t);
 801ce76:	4682      	mov	sl, r0
      err |= fp_montgomery_reduce(t, b, mp);
 801ce78:	4631      	mov	r1, r6
 801ce7a:	4620      	mov	r0, r4
 801ce7c:	f7fe fef4 	bl	801bc68 <fp_montgomery_reduce>
 801ce80:	ea4a 0a00 	orr.w	sl, sl, r0
 801ce84:	ea45 050a 	orr.w	r5, r5, sl
      j = 0;
 801ce88:	f04f 0a00 	mov.w	sl, #0
    err |= fp_sqr(t, t);
 801ce8c:	4621      	mov	r1, r4
 801ce8e:	4620      	mov	r0, r4
 801ce90:	f7ff ff20 	bl	801ccd4 <fp_sqr>
    err |= fp_montgomery_reduce(t, b, mp);
 801ce94:	463a      	mov	r2, r7
    err |= fp_sqr(t, t);
 801ce96:	4305      	orrs	r5, r0
    err |= fp_montgomery_reduce(t, b, mp);
 801ce98:	4631      	mov	r1, r6
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	f7fe fee4 	bl	801bc68 <fp_montgomery_reduce>
    j += set;
 801cea0:	9b02      	ldr	r3, [sp, #8]
    err |= fp_montgomery_reduce(t, b, mp);
 801cea2:	4305      	orrs	r5, r0
    j += set;
 801cea4:	449a      	add	sl, r3
  for (; i >= 0; i--) {
 801cea6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801ceaa:	e7a2      	b.n	801cdf2 <fp_invmod_mont_ct+0xe2>
    fp_copy(t, c);
 801ceac:	9901      	ldr	r1, [sp, #4]
 801ceae:	4620      	mov	r0, r4
 801ceb0:	f7ff f8be 	bl	801c030 <fp_copy>
 801ceb4:	e7b5      	b.n	801ce22 <fp_invmod_mont_ct+0x112>
    return FP_VAL;
 801ceb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ceba:	e7b5      	b.n	801ce28 <fp_invmod_mont_ct+0x118>
    return FP_MEM;
 801cebc:	f06f 0501 	mvn.w	r5, #1
 801cec0:	e7b2      	b.n	801ce28 <fp_invmod_mont_ct+0x118>

0801cec2 <mp_invmod_mont_ct>:
  return fp_invmod_mont_ct(a, b, c, mp);
 801cec2:	f7ff bf25 	b.w	801cd10 <fp_invmod_mont_ct>

0801cec6 <fp_init_copy>:
    if (a != b) {
 801cec6:	4288      	cmp	r0, r1
{
 801cec8:	b538      	push	{r3, r4, r5, lr}
 801ceca:	4605      	mov	r5, r0
 801cecc:	460c      	mov	r4, r1
    if (a != b) {
 801cece:	d007      	beq.n	801cee0 <fp_init_copy+0x1a>
    fp_zero(a);
 801ced0:	f7fe ff64 	bl	801bd9c <fp_zero>
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 801ced4:	4629      	mov	r1, r5
 801ced6:	4620      	mov	r0, r4
}
 801ced8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 801cedc:	f7ff b8a8 	b.w	801c030 <fp_copy>
}
 801cee0:	bd38      	pop	{r3, r4, r5, pc}

0801cee2 <fp_to_unsigned_bin>:
{
 801cee2:	b570      	push	{r4, r5, r6, lr}
 801cee4:	4606      	mov	r6, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801cee6:	2068      	movs	r0, #104	; 0x68
{
 801cee8:	460d      	mov	r5, r1
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801ceea:	f000 fd3b 	bl	801d964 <malloc>
   if (t == NULL)
 801ceee:	4604      	mov	r4, r0
 801cef0:	b180      	cbz	r0, 801cf14 <fp_to_unsigned_bin+0x32>
  fp_init_copy(t, a);
 801cef2:	4631      	mov	r1, r6
 801cef4:	f7ff ffe7 	bl	801cec6 <fp_init_copy>
  x = fp_to_unsigned_bin_at_pos(0, t, b);
 801cef8:	462a      	mov	r2, r5
 801cefa:	4621      	mov	r1, r4
 801cefc:	2000      	movs	r0, #0
 801cefe:	f7fe feb6 	bl	801bc6e <fp_to_unsigned_bin_at_pos>
 801cf02:	4601      	mov	r1, r0
  mp_reverse (b, x);
 801cf04:	4628      	mov	r0, r5
 801cf06:	f000 f983 	bl	801d210 <mp_reverse>
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	f000 fd32 	bl	801d974 <free>
  return FP_OKAY;
 801cf10:	2000      	movs	r0, #0
}
 801cf12:	bd70      	pop	{r4, r5, r6, pc}
       return FP_MEM;
 801cf14:	f06f 0001 	mvn.w	r0, #1
 801cf18:	e7fb      	b.n	801cf12 <fp_to_unsigned_bin+0x30>

0801cf1a <mp_to_unsigned_bin>:
  return fp_to_unsigned_bin(a,b);
 801cf1a:	f7ff bfe2 	b.w	801cee2 <fp_to_unsigned_bin>

0801cf1e <mp_copy>:
{
 801cf1e:	b508      	push	{r3, lr}
    fp_copy(a, b);
 801cf20:	f7ff f886 	bl	801c030 <fp_copy>
}
 801cf24:	2000      	movs	r0, #0
 801cf26:	bd08      	pop	{r3, pc}

0801cf28 <mp_iszero>:
    return fp_iszero(a);
 801cf28:	6800      	ldr	r0, [r0, #0]
}
 801cf2a:	fab0 f080 	clz	r0, r0
 801cf2e:	0940      	lsrs	r0, r0, #5
 801cf30:	4770      	bx	lr

0801cf32 <mp_count_bits>:
    return fp_count_bits(a);
 801cf32:	f7fe bed4 	b.w	801bcde <fp_count_bits>

0801cf36 <mp_leading_bit>:
    return fp_leading_bit(a);
 801cf36:	f7fe beec 	b.w	801bd12 <fp_leading_bit>

0801cf3a <mp_rshb>:
    fp_rshb(a, x);
 801cf3a:	f7fe bfdc 	b.w	801bef6 <fp_rshb>

0801cf3e <mp_montgomery_calc_normalization>:
    return fp_montgomery_calc_normalization(a, b);
 801cf3e:	f7fe bf78 	b.w	801be32 <fp_montgomery_calc_normalization>

0801cf42 <mp_cond_swap_ct_ex>:
#endif /* !NO_RSA || !NO_DSA || !NO_DH || WOLFSSL_KEY_GEN */


int mp_cond_swap_ct_ex(mp_int* a, mp_int* b, int c, int m, mp_int* t)
{
    return fp_cond_swap_ct_ex(a, b, c, m, t);
 801cf42:	f7fd be49 	b.w	801abd8 <fp_cond_swap_ct_ex>

0801cf46 <fp_add_d>:
#if defined(HAVE_ECC) || !defined(NO_PWDBASED) || defined(OPENSSL_EXTRA) || \
    defined(WC_RSA_BLINDING) || !defined(NO_DSA) || \
    (!defined(NO_RSA) && !defined(NO_RSA_BOUNDS_CHECK))
/* c = a + b */
int fp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 801cf46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf48:	4605      	mov	r5, r0
   fp_int* tmp;
#endif
   int     err;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801cf4a:	2068      	movs	r0, #104	; 0x68
{
 801cf4c:	460f      	mov	r7, r1
 801cf4e:	4616      	mov	r6, r2
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801cf50:	f000 fd08 	bl	801d964 <malloc>
 801cf54:	4604      	mov	r4, r0
   if (tmp == NULL)
 801cf56:	b180      	cbz	r0, 801cf7a <fp_add_d+0x34>
    fp_zero(a);
 801cf58:	f7fe ff20 	bl	801bd9c <fp_zero>
       return FP_MEM;
#endif

   fp_init(tmp);
   fp_set(tmp, b);
 801cf5c:	4639      	mov	r1, r7
 801cf5e:	4620      	mov	r0, r4
 801cf60:	f7fe ff5c 	bl	801be1c <fp_set>
   err = fp_add(a, tmp, c);
 801cf64:	4628      	mov	r0, r5
 801cf66:	4632      	mov	r2, r6
 801cf68:	4621      	mov	r1, r4
 801cf6a:	f7fe fd65 	bl	801ba38 <fp_add>
 801cf6e:	4605      	mov	r5, r0

#ifdef WOLFSSL_SMALL_STACK
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801cf70:	4620      	mov	r0, r4
 801cf72:	f000 fcff 	bl	801d974 <free>
#endif
   return err;
}
 801cf76:	4628      	mov	r0, r5
 801cf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       return FP_MEM;
 801cf7a:	f06f 0501 	mvn.w	r5, #1
 801cf7e:	e7fa      	b.n	801cf76 <fp_add_d+0x30>

0801cf80 <mp_read_radix>:
  return FP_OKAY;
}

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
 801cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf84:	4690      	mov	r8, r2
 801cf86:	4604      	mov	r4, r0
 801cf88:	460d      	mov	r5, r1
  fp_zero (a);
 801cf8a:	f7fe ff07 	bl	801bd9c <fp_zero>
  if (radix == 16)
 801cf8e:	f1b8 0f10 	cmp.w	r8, #16
 801cf92:	d146      	bne.n	801d022 <mp_read_radix+0xa2>
  if (*str == '-') {
 801cf94:	782b      	ldrb	r3, [r5, #0]
 801cf96:	2b2d      	cmp	r3, #45	; 0x2d
    ++str;
 801cf98:	bf08      	it	eq
 801cf9a:	3501      	addeq	r5, #1
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801cf9c:	4628      	mov	r0, r5
    neg = FP_NEG;
 801cf9e:	bf0c      	ite	eq
 801cfa0:	2601      	moveq	r6, #1
    neg = FP_ZPOS;
 801cfa2:	2600      	movne	r6, #0
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801cfa4:	f000 fe81 	bl	801dcaa <strlen>
  k = 0;
 801cfa8:	2200      	movs	r2, #0
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801cfaa:	3801      	subs	r0, #1
  j = 0;
 801cfac:	4611      	mov	r1, r2
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801cfae:	2800      	cmp	r0, #0
 801cfb0:	da0d      	bge.n	801cfce <mp_read_radix+0x4e>
  a->used = k + 1;
 801cfb2:	3201      	adds	r2, #1
  fp_clamp(a);
 801cfb4:	6022      	str	r2, [r4, #0]
 801cfb6:	6823      	ldr	r3, [r4, #0]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d06f      	beq.n	801d09c <mp_read_radix+0x11c>
 801cfbc:	1e5a      	subs	r2, r3, #1
 801cfbe:	3301      	adds	r3, #1
 801cfc0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d0f5      	beq.n	801cfb4 <mp_read_radix+0x34>
     a->sign = neg;
 801cfc8:	6066      	str	r6, [r4, #4]
  return FP_OKAY;
 801cfca:	2000      	movs	r0, #0
 801cfcc:	e025      	b.n	801d01a <mp_read_radix+0x9a>
      ch = (int)HexCharToByte(str[i]);
 801cfce:	5c2b      	ldrb	r3, [r5, r0]
    if (ret >= '0' && ret <= '9')
 801cfd0:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801cfd4:	b2ff      	uxtb	r7, r7
 801cfd6:	2f09      	cmp	r7, #9
 801cfd8:	d812      	bhi.n	801d000 <mp_read_radix+0x80>
        ret -= '0';
 801cfda:	b27b      	sxtb	r3, r7
      k += j == DIGIT_BIT;
 801cfdc:	2920      	cmp	r1, #32
 801cfde:	bf08      	it	eq
 801cfe0:	3201      	addeq	r2, #1
      if (k >= FP_SIZE)
 801cfe2:	2a17      	cmp	r2, #23
      j &= DIGIT_BIT - 1;
 801cfe4:	f001 011f 	and.w	r1, r1, #31
      if (k >= FP_SIZE)
 801cfe8:	dc15      	bgt.n	801d016 <mp_read_radix+0x96>
      a->dp[k] |= ((fp_digit)ch) << j;
 801cfea:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801cfee:	408b      	lsls	r3, r1
 801cff0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801cff4:	433b      	orrs	r3, r7
 801cff6:	f8cc 3008 	str.w	r3, [ip, #8]
      j += 4;
 801cffa:	3104      	adds	r1, #4
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801cffc:	3801      	subs	r0, #1
 801cffe:	e7d6      	b.n	801cfae <mp_read_radix+0x2e>
    else if (ret >= 'A' && ret <= 'F')
 801d000:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 801d004:	2f05      	cmp	r7, #5
 801d006:	d802      	bhi.n	801d00e <mp_read_radix+0x8e>
        ret -= 'A' - 10;
 801d008:	3b37      	subs	r3, #55	; 0x37
        ret -= 'a' - 10;
 801d00a:	b25b      	sxtb	r3, r3
 801d00c:	e7e6      	b.n	801cfdc <mp_read_radix+0x5c>
    else if (ret >= 'a' && ret <= 'f')
 801d00e:	f1a3 0761 	sub.w	r7, r3, #97	; 0x61
 801d012:	2f05      	cmp	r7, #5
 801d014:	d903      	bls.n	801d01e <mp_read_radix+0x9e>
        return FP_VAL;
 801d016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return fp_read_radix(a, str, radix);
}
 801d01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret -= 'a' - 10;
 801d01e:	3b57      	subs	r3, #87	; 0x57
 801d020:	e7f3      	b.n	801d00a <mp_read_radix+0x8a>
  if (radix < 2 || radix > 64) {
 801d022:	f1a8 0302 	sub.w	r3, r8, #2
 801d026:	2b3e      	cmp	r3, #62	; 0x3e
 801d028:	d8f5      	bhi.n	801d016 <mp_read_radix+0x96>
  if (*str == '-') {
 801d02a:	782b      	ldrb	r3, [r5, #0]
 801d02c:	2b2d      	cmp	r3, #45	; 0x2d
 801d02e:	d133      	bne.n	801d098 <mp_read_radix+0x118>
    ++str;
 801d030:	3501      	adds	r5, #1
    neg = FP_NEG;
 801d032:	2601      	movs	r6, #1
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
 801d034:	4f1a      	ldr	r7, [pc, #104]	; (801d0a0 <mp_read_radix+0x120>)
 801d036:	3d01      	subs	r5, #1
 801d038:	e025      	b.n	801d086 <mp_read_radix+0x106>
 801d03a:	f1b8 0f24 	cmp.w	r8, #36	; 0x24
 801d03e:	dc06      	bgt.n	801d04e <mp_read_radix+0xce>
 801d040:	5c3b      	ldrb	r3, [r7, r0]
 801d042:	f003 0303 	and.w	r3, r3, #3
 801d046:	2b02      	cmp	r3, #2
 801d048:	bf08      	it	eq
 801d04a:	3820      	subeq	r0, #32
 801d04c:	b2c0      	uxtb	r0, r0
    for (y = 0; y < 64; y++) {
 801d04e:	4b15      	ldr	r3, [pc, #84]	; (801d0a4 <mp_read_radix+0x124>)
 801d050:	f04f 0900 	mov.w	r9, #0
      if (ch == fp_s_rmap[y]) {
 801d054:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d058:	4282      	cmp	r2, r0
 801d05a:	d005      	beq.n	801d068 <mp_read_radix+0xe8>
    for (y = 0; y < 64; y++) {
 801d05c:	f109 0901 	add.w	r9, r9, #1
 801d060:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 801d064:	d1f6      	bne.n	801d054 <mp_read_radix+0xd4>
 801d066:	e7d6      	b.n	801d016 <mp_read_radix+0x96>
    if (y >= radix) {
 801d068:	45c8      	cmp	r8, r9
 801d06a:	ddd4      	ble.n	801d016 <mp_read_radix+0x96>
      int ret = fp_mul_d (a, (fp_digit) radix, a);
 801d06c:	4622      	mov	r2, r4
 801d06e:	4641      	mov	r1, r8
 801d070:	4620      	mov	r0, r4
 801d072:	f7fe fb3d 	bl	801b6f0 <fp_mul_d>
      if (ret != FP_OKAY)
 801d076:	2800      	cmp	r0, #0
 801d078:	d1cf      	bne.n	801d01a <mp_read_radix+0x9a>
      ret = fp_add_d (a, (fp_digit) y, a);
 801d07a:	4649      	mov	r1, r9
 801d07c:	4620      	mov	r0, r4
 801d07e:	f7ff ff62 	bl	801cf46 <fp_add_d>
      if (ret != FP_OKAY)
 801d082:	2800      	cmp	r0, #0
 801d084:	d1c9      	bne.n	801d01a <mp_read_radix+0x9a>
  while (*str) {
 801d086:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801d08a:	2800      	cmp	r0, #0
 801d08c:	d1d5      	bne.n	801d03a <mp_read_radix+0xba>
  if (fp_iszero(a) != FP_YES) {
 801d08e:	6823      	ldr	r3, [r4, #0]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d09a      	beq.n	801cfca <mp_read_radix+0x4a>
     a->sign = neg;
 801d094:	6066      	str	r6, [r4, #4]
    return fp_read_radix(a, str, radix);
 801d096:	e7c0      	b.n	801d01a <mp_read_radix+0x9a>
    neg = FP_ZPOS;
 801d098:	2600      	movs	r6, #0
 801d09a:	e7cb      	b.n	801d034 <mp_read_radix+0xb4>
  fp_clamp(a);
 801d09c:	6063      	str	r3, [r4, #4]
 801d09e:	e794      	b.n	801cfca <mp_read_radix+0x4a>
 801d0a0:	0802ab2d 	.word	0x0802ab2d
 801d0a4:	0802aa80 	.word	0x0802aa80

0801d0a8 <mp_sqr>:
#ifdef HAVE_ECC

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
    return fp_sqr(A, B);
 801d0a8:	f7ff be14 	b.w	801ccd4 <fp_sqr>

0801d0ac <mp_montgomery_reduce>:
}

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
    return fp_montgomery_reduce(a, m, mp);
 801d0ac:	f7fe bddc 	b.w	801bc68 <fp_montgomery_reduce>

0801d0b0 <mp_montgomery_setup>:


/* fast math conversion */
int mp_montgomery_setup(fp_int *a, fp_digit *rho)
{
    return fp_montgomery_setup(a, rho);
 801d0b0:	f7fe bd1a 	b.w	801bae8 <fp_montgomery_setup>

0801d0b4 <mp_div_2_mod_ct>:
}

/* c = a / 2 (mod b) - constant time (a < b and positive) */
int mp_div_2_mod_ct(mp_int *a, mp_int *b, mp_int *c)
{
  return fp_div_2_mod_ct(a, b, c);
 801d0b4:	f7fe bb90 	b.w	801b7d8 <fp_div_2_mod_ct>

0801d0b8 <mp_set>:

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA) || \
    defined(WOLFSSL_KEY_GEN)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
 801d0b8:	b508      	push	{r3, lr}
    fp_set(a,b);
 801d0ba:	f7fe feaf 	bl	801be1c <fp_set>
    return MP_OKAY;
}
 801d0be:	2000      	movs	r0, #0
 801d0c0:	bd08      	pop	{r3, pc}
	...

0801d0c4 <wolfCrypt_Init>:
 */
WOLFSSL_ABI
int wolfCrypt_Init(void)
{
    int ret = 0;
    if (initRefCount == 0) {
 801d0c4:	4b03      	ldr	r3, [pc, #12]	; (801d0d4 <wolfCrypt_Init+0x10>)
 801d0c6:	681a      	ldr	r2, [r3, #0]
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 801d0c8:	681a      	ldr	r2, [r3, #0]
 801d0ca:	3201      	adds	r2, #1
 801d0cc:	601a      	str	r2, [r3, #0]

    return ret;
}
 801d0ce:	2000      	movs	r0, #0
 801d0d0:	4770      	bx	lr
 801d0d2:	bf00      	nop
 801d0d4:	20000084 	.word	0x20000084

0801d0d8 <wolfCrypt_Cleanup>:
WOLFSSL_ABI
int wolfCrypt_Cleanup(void)
{
    int ret = 0;

    initRefCount--;
 801d0d8:	4b05      	ldr	r3, [pc, #20]	; (801d0f0 <wolfCrypt_Cleanup+0x18>)
 801d0da:	681a      	ldr	r2, [r3, #0]
 801d0dc:	3a01      	subs	r2, #1
 801d0de:	601a      	str	r2, [r3, #0]
    if (initRefCount < 0)
 801d0e0:	681a      	ldr	r2, [r3, #0]
 801d0e2:	2a00      	cmp	r2, #0
        initRefCount = 0;
 801d0e4:	bfbc      	itt	lt
 801d0e6:	2200      	movlt	r2, #0
 801d0e8:	601a      	strlt	r2, [r3, #0]

    if (initRefCount == 0) {
 801d0ea:	681b      	ldr	r3, [r3, #0]
        wc_MemZero_Free();
    #endif
    }

    return ret;
}
 801d0ec:	2000      	movs	r0, #0
 801d0ee:	4770      	bx	lr
 801d0f0:	20000084 	.word	0x20000084

0801d0f4 <wc_InitMutex>:

    int wc_InitMutex(wolfSSL_Mutex* m)
    {
        (void)m;
        return 0;
    }
 801d0f4:	2000      	movs	r0, #0
 801d0f6:	4770      	bx	lr

0801d0f8 <wc_FreeMutex>:
 801d0f8:	2000      	movs	r0, #0
 801d0fa:	4770      	bx	lr

0801d0fc <wc_LockMutex>:
 801d0fc:	2000      	movs	r0, #0
 801d0fe:	4770      	bx	lr

0801d100 <wc_UnLockMutex>:
 801d100:	2000      	movs	r0, #0
 801d102:	4770      	bx	lr

0801d104 <gmtime>:
    struct tm* ret = &st_time;
    time_t secs = *timer;
    unsigned long dayclock, dayno;
    int year = EPOCH_YEAR;

    dayclock = (unsigned long)secs % SECS_DAY;
 801d104:	6802      	ldr	r2, [r0, #0]
 801d106:	493f      	ldr	r1, [pc, #252]	; (801d204 <gmtime+0x100>)
 801d108:	fbb2 f3f1 	udiv	r3, r2, r1
    dayno    = (unsigned long)secs / SECS_DAY;

    ret->tm_sec  = (int) dayclock % 60;
 801d10c:	203c      	movs	r0, #60	; 0x3c
    dayclock = (unsigned long)secs % SECS_DAY;
 801d10e:	fb01 2213 	mls	r2, r1, r3, r2
    ret->tm_sec  = (int) dayclock % 60;
 801d112:	493d      	ldr	r1, [pc, #244]	; (801d208 <gmtime+0x104>)
{
 801d114:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret->tm_sec  = (int) dayclock % 60;
 801d116:	fbb2 f4f0 	udiv	r4, r2, r0
    ret->tm_min  = (int)(dayclock % 3600) / 60;
 801d11a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
    ret->tm_sec  = (int) dayclock % 60;
 801d11e:	fb00 2414 	mls	r4, r0, r4, r2
 801d122:	600c      	str	r4, [r1, #0]
    ret->tm_min  = (int)(dayclock % 3600) / 60;
 801d124:	fbb2 f4f5 	udiv	r4, r2, r5
 801d128:	fb05 2214 	mls	r2, r5, r4, r2
 801d12c:	fbb2 f2f0 	udiv	r2, r2, r0
    ret->tm_hour = (int) dayclock / 3600;
    ret->tm_wday = (int) (dayno + 4) % 7;        /* day 0 a Thursday */
 801d130:	1d18      	adds	r0, r3, #4
    ret->tm_hour = (int) dayclock / 3600;
 801d132:	e9c1 2401 	strd	r2, r4, [r1, #4]
    ret->tm_wday = (int) (dayno + 4) % 7;        /* day 0 a Thursday */
 801d136:	2207      	movs	r2, #7
 801d138:	fbb0 f2f2 	udiv	r2, r0, r2
 801d13c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801d140:	1a82      	subs	r2, r0, r2
 801d142:	618a      	str	r2, [r1, #24]

    while(dayno >= (unsigned long)YEARSIZE(year)) {
 801d144:	2464      	movs	r4, #100	; 0x64
    int year = EPOCH_YEAR;
 801d146:	f240 72b2 	movw	r2, #1970	; 0x7b2
 801d14a:	f44f 76c8 	mov.w	r6, #400	; 0x190
    while(dayno >= (unsigned long)YEARSIZE(year)) {
 801d14e:	f012 0503 	ands.w	r5, r2, #3
 801d152:	d109      	bne.n	801d168 <gmtime+0x64>
 801d154:	fb92 f0f4 	sdiv	r0, r2, r4
 801d158:	fb04 2010 	mls	r0, r4, r0, r2
 801d15c:	bb20      	cbnz	r0, 801d1a8 <gmtime+0xa4>
 801d15e:	fb92 f0f6 	sdiv	r0, r2, r6
 801d162:	fb06 2010 	mls	r0, r6, r0, r2
 801d166:	b1f8      	cbz	r0, 801d1a8 <gmtime+0xa4>
 801d168:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 801d16c:	d91f      	bls.n	801d1ae <gmtime+0xaa>
        dayno -= YEARSIZE(year);
 801d16e:	f240 106d 	movw	r0, #365	; 0x16d
 801d172:	e001      	b.n	801d178 <gmtime+0x74>
 801d174:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 801d178:	1a1b      	subs	r3, r3, r0
        year++;
 801d17a:	3201      	adds	r2, #1
 801d17c:	e7e7      	b.n	801d14e <gmtime+0x4a>
    ret->tm_year = year - YEAR0;
    ret->tm_yday = (int)dayno;
    ret->tm_mon  = 0;

    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
        dayno -= _ytab[LEAPYEAR(year)][ret->tm_mon];
 801d17e:	b95d      	cbnz	r5, 801d198 <gmtime+0x94>
 801d180:	b967      	cbnz	r7, 801d19c <gmtime+0x98>
 801d182:	fab2 f482 	clz	r4, r2
 801d186:	0964      	lsrs	r4, r4, #5
 801d188:	fb0e 0404 	mla	r4, lr, r4, r0
 801d18c:	2601      	movs	r6, #1
 801d18e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 801d192:	3001      	adds	r0, #1
 801d194:	1b1b      	subs	r3, r3, r4
        ret->tm_mon++;
 801d196:	e020      	b.n	801d1da <gmtime+0xd6>
        dayno -= _ytab[LEAPYEAR(year)][ret->tm_mon];
 801d198:	2400      	movs	r4, #0
 801d19a:	e7f5      	b.n	801d188 <gmtime+0x84>
 801d19c:	2401      	movs	r4, #1
 801d19e:	e7f3      	b.n	801d188 <gmtime+0x84>
    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
 801d1a0:	2400      	movs	r4, #0
 801d1a2:	e021      	b.n	801d1e8 <gmtime+0xe4>
 801d1a4:	2401      	movs	r4, #1
 801d1a6:	e01f      	b.n	801d1e8 <gmtime+0xe4>
    while(dayno >= (unsigned long)YEARSIZE(year)) {
 801d1a8:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 801d1ac:	d2e2      	bcs.n	801d174 <gmtime+0x70>
    ret->tm_year = year - YEAR0;
 801d1ae:	f2a2 706c 	subw	r0, r2, #1900	; 0x76c
    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
 801d1b2:	2464      	movs	r4, #100	; 0x64
    ret->tm_year = year - YEAR0;
 801d1b4:	6148      	str	r0, [r1, #20]
    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
 801d1b6:	fbb2 f7f4 	udiv	r7, r2, r4
    ret->tm_mon  = 0;
 801d1ba:	2000      	movs	r0, #0
    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
 801d1bc:	fb04 2717 	mls	r7, r4, r7, r2
 801d1c0:	f8df c048 	ldr.w	ip, [pc, #72]	; 801d20c <gmtime+0x108>
    ret->tm_yday = (int)dayno;
 801d1c4:	61cb      	str	r3, [r1, #28]
    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
 801d1c6:	f44f 74c8 	mov.w	r4, #400	; 0x190
    ret->tm_mon  = 0;
 801d1ca:	6108      	str	r0, [r1, #16]
    while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
 801d1cc:	fbb2 f6f4 	udiv	r6, r2, r4
 801d1d0:	f04f 0e0c 	mov.w	lr, #12
 801d1d4:	fb04 2216 	mls	r2, r4, r6, r2
 801d1d8:	4606      	mov	r6, r0
 801d1da:	2d00      	cmp	r5, #0
 801d1dc:	d1e0      	bne.n	801d1a0 <gmtime+0x9c>
 801d1de:	2f00      	cmp	r7, #0
 801d1e0:	d1e0      	bne.n	801d1a4 <gmtime+0xa0>
 801d1e2:	fab2 f482 	clz	r4, r2
 801d1e6:	0964      	lsrs	r4, r4, #5
 801d1e8:	fb0e 0404 	mla	r4, lr, r4, r0
 801d1ec:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 801d1f0:	429c      	cmp	r4, r3
 801d1f2:	d9c4      	bls.n	801d17e <gmtime+0x7a>
 801d1f4:	b106      	cbz	r6, 801d1f8 <gmtime+0xf4>
 801d1f6:	6108      	str	r0, [r1, #16]
    }

    ret->tm_mday  = (int)++dayno;
 801d1f8:	3301      	adds	r3, #1
 801d1fa:	60cb      	str	r3, [r1, #12]
#ifndef WOLFSSL_LINUXKM
    ret->tm_isdst = 0;
 801d1fc:	2300      	movs	r3, #0
#endif

    return ret;
}
 801d1fe:	4802      	ldr	r0, [pc, #8]	; (801d208 <gmtime+0x104>)
    ret->tm_isdst = 0;
 801d200:	620b      	str	r3, [r1, #32]
}
 801d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d204:	00015180 	.word	0x00015180
 801d208:	20000088 	.word	0x20000088
 801d20c:	0802aac4 	.word	0x0802aac4

0801d210 <mp_reverse>:
#endif


/* reverse an array, used for radix code */
void mp_reverse(unsigned char *s, int len)
{
 801d210:	b530      	push	{r4, r5, lr}
    int ix, iy;

    if (s == NULL)
 801d212:	b130      	cbz	r0, 801d222 <mp_reverse+0x12>
        return;

    ix = 0;
    iy = len - 1;
    while (ix < iy) {
 801d214:	1e42      	subs	r2, r0, #1
    ix = 0;
 801d216:	2300      	movs	r3, #0
 801d218:	4408      	add	r0, r1
    while (ix < iy) {
 801d21a:	3901      	subs	r1, #1
 801d21c:	1acc      	subs	r4, r1, r3
 801d21e:	42a3      	cmp	r3, r4
 801d220:	db00      	blt.n	801d224 <mp_reverse+0x14>
        s[ix] = s[iy];
        s[iy] = t;
        ++ix;
        --iy;
    }
}
 801d222:	bd30      	pop	{r4, r5, pc}
        unsigned char t = s[ix];
 801d224:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        s[ix] = s[iy];
 801d228:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 801d22c:	7015      	strb	r5, [r2, #0]
        ++ix;
 801d22e:	3301      	adds	r3, #1
        s[iy] = t;
 801d230:	7004      	strb	r4, [r0, #0]
        --iy;
 801d232:	e7f3      	b.n	801d21c <mp_reverse+0xc>

0801d234 <get_digit_count>:

int get_digit_count(const mp_int* a)
{
    if (a == NULL)
 801d234:	b100      	cbz	r0, 801d238 <get_digit_count+0x4>
        return 0;

    return (int)a->used;
 801d236:	6800      	ldr	r0, [r0, #0]
}
 801d238:	4770      	bx	lr

0801d23a <get_digit>:

mp_digit get_digit(const mp_int* a, int n)
{
    if (a == NULL)
 801d23a:	b148      	cbz	r0, 801d250 <get_digit+0x16>
        return 0;

    return (n < 0 || (unsigned int)n >= (unsigned int)a->used) ? 0 : a->dp[n];
 801d23c:	2900      	cmp	r1, #0
 801d23e:	db06      	blt.n	801d24e <get_digit+0x14>
 801d240:	6803      	ldr	r3, [r0, #0]
 801d242:	428b      	cmp	r3, r1
 801d244:	d903      	bls.n	801d24e <get_digit+0x14>
 801d246:	3102      	adds	r1, #2
 801d248:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801d24c:	4770      	bx	lr
        return 0;
 801d24e:	2000      	movs	r0, #0
}
 801d250:	4770      	bx	lr

0801d252 <mp_cond_copy>:
 * b     MP integer to copy into.
 * returns BAD_FUNC_ARG when a or b is NULL, MEMORY_E when growing b fails and
 *         MP_OKAY otherwise.
 */
int mp_cond_copy(mp_int* a, int copy, mp_int* b)
{
 801d252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int err = MP_OKAY;
#if defined(SP_WORD_SIZE) && SP_WORD_SIZE == 8
    unsigned int mask = (unsigned int)0 - copy;
#else
    mp_digit mask = (mp_digit)0 - (mp_digit)copy;
 801d256:	424f      	negs	r7, r1
#endif

    if (a == NULL || b == NULL)
 801d258:	4606      	mov	r6, r0
 801d25a:	2800      	cmp	r0, #0
 801d25c:	d047      	beq.n	801d2ee <mp_cond_copy+0x9c>
 801d25e:	2a00      	cmp	r2, #0
 801d260:	d045      	beq.n	801d2ee <mp_cond_copy+0x9c>
         * When mask all set, b ^ b ^ a = a
         */
        /* Conditionally copy all digits and then number of used digits.
         * get_digit() returns 0 when index greater than available digit.
         */
        for (i = 0; i < a->used; i++) {
 801d262:	6804      	ldr	r4, [r0, #0]
 801d264:	f102 0808 	add.w	r8, r2, #8
 801d268:	f04f 0900 	mov.w	r9, #0
 801d26c:	454c      	cmp	r4, r9
 801d26e:	dc18      	bgt.n	801d2a2 <mp_cond_copy+0x50>
 801d270:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 801d274:	f10a 0902 	add.w	r9, sl, #2
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
        }
        for (; i < b->used; i++) {
 801d278:	f8d2 8000 	ldr.w	r8, [r2]
 801d27c:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 801d280:	45d0      	cmp	r8, sl
 801d282:	dc21      	bgt.n	801d2c8 <mp_cond_copy+0x76>
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
        }
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
#if (!defined(WOLFSSL_SP_MATH) && !defined(WOLFSSL_SP_MATH_ALL)) || \
    defined(WOLFSSL_SP_INT_NEGATIVE)
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801d284:	6853      	ldr	r3, [r2, #4]
 801d286:	6871      	ldr	r1, [r6, #4]
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801d288:	ea84 0408 	eor.w	r4, r4, r8
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801d28c:	4059      	eors	r1, r3
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801d28e:	403c      	ands	r4, r7
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801d290:	400f      	ands	r7, r1
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801d292:	ea84 0408 	eor.w	r4, r4, r8
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801d296:	405f      	eors	r7, r3
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801d298:	6014      	str	r4, [r2, #0]
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801d29a:	6057      	str	r7, [r2, #4]
 801d29c:	2000      	movs	r0, #0
#endif
    }

    return err;
}
 801d29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
 801d2a2:	4649      	mov	r1, r9
 801d2a4:	4630      	mov	r0, r6
 801d2a6:	f7ff ffc8 	bl	801d23a <get_digit>
 801d2aa:	4649      	mov	r1, r9
 801d2ac:	4605      	mov	r5, r0
 801d2ae:	4610      	mov	r0, r2
 801d2b0:	f7ff ffc3 	bl	801d23a <get_digit>
 801d2b4:	f8d8 3000 	ldr.w	r3, [r8]
 801d2b8:	4045      	eors	r5, r0
 801d2ba:	403d      	ands	r5, r7
 801d2bc:	405d      	eors	r5, r3
 801d2be:	f848 5b04 	str.w	r5, [r8], #4
        for (i = 0; i < a->used; i++) {
 801d2c2:	f109 0901 	add.w	r9, r9, #1
 801d2c6:	e7d1      	b.n	801d26c <mp_cond_copy+0x1a>
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
 801d2c8:	4651      	mov	r1, sl
 801d2ca:	4630      	mov	r0, r6
 801d2cc:	f7ff ffb5 	bl	801d23a <get_digit>
 801d2d0:	4651      	mov	r1, sl
 801d2d2:	4605      	mov	r5, r0
 801d2d4:	4610      	mov	r0, r2
 801d2d6:	f7ff ffb0 	bl	801d23a <get_digit>
 801d2da:	f8d9 3000 	ldr.w	r3, [r9]
 801d2de:	4045      	eors	r5, r0
 801d2e0:	403d      	ands	r5, r7
 801d2e2:	405d      	eors	r5, r3
 801d2e4:	f849 5b04 	str.w	r5, [r9], #4
        for (; i < b->used; i++) {
 801d2e8:	f10a 0a01 	add.w	sl, sl, #1
 801d2ec:	e7c8      	b.n	801d280 <mp_cond_copy+0x2e>
        err = BAD_FUNC_ARG;
 801d2ee:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    return err;
 801d2f2:	e7d4      	b.n	801d29e <mp_cond_copy+0x4c>

0801d2f4 <__aeabi_uldivmod>:
 801d2f4:	b953      	cbnz	r3, 801d30c <__aeabi_uldivmod+0x18>
 801d2f6:	b94a      	cbnz	r2, 801d30c <__aeabi_uldivmod+0x18>
 801d2f8:	2900      	cmp	r1, #0
 801d2fa:	bf08      	it	eq
 801d2fc:	2800      	cmpeq	r0, #0
 801d2fe:	bf1c      	itt	ne
 801d300:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 801d304:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801d308:	f000 b974 	b.w	801d5f4 <__aeabi_idiv0>
 801d30c:	f1ad 0c08 	sub.w	ip, sp, #8
 801d310:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801d314:	f000 f806 	bl	801d324 <__udivmoddi4>
 801d318:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d320:	b004      	add	sp, #16
 801d322:	4770      	bx	lr

0801d324 <__udivmoddi4>:
 801d324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d328:	9e08      	ldr	r6, [sp, #32]
 801d32a:	460d      	mov	r5, r1
 801d32c:	4604      	mov	r4, r0
 801d32e:	4688      	mov	r8, r1
 801d330:	2b00      	cmp	r3, #0
 801d332:	d14d      	bne.n	801d3d0 <__udivmoddi4+0xac>
 801d334:	428a      	cmp	r2, r1
 801d336:	4694      	mov	ip, r2
 801d338:	d968      	bls.n	801d40c <__udivmoddi4+0xe8>
 801d33a:	fab2 f282 	clz	r2, r2
 801d33e:	b152      	cbz	r2, 801d356 <__udivmoddi4+0x32>
 801d340:	fa01 f302 	lsl.w	r3, r1, r2
 801d344:	f1c2 0120 	rsb	r1, r2, #32
 801d348:	fa20 f101 	lsr.w	r1, r0, r1
 801d34c:	fa0c fc02 	lsl.w	ip, ip, r2
 801d350:	ea41 0803 	orr.w	r8, r1, r3
 801d354:	4094      	lsls	r4, r2
 801d356:	ea4f 451c 	mov.w	r5, ip, lsr #16
 801d35a:	0c21      	lsrs	r1, r4, #16
 801d35c:	fbb8 fef5 	udiv	lr, r8, r5
 801d360:	fa1f f78c 	uxth.w	r7, ip
 801d364:	fb05 831e 	mls	r3, r5, lr, r8
 801d368:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d36c:	fb0e f107 	mul.w	r1, lr, r7
 801d370:	4299      	cmp	r1, r3
 801d372:	d90b      	bls.n	801d38c <__udivmoddi4+0x68>
 801d374:	eb1c 0303 	adds.w	r3, ip, r3
 801d378:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 801d37c:	f080 811e 	bcs.w	801d5bc <__udivmoddi4+0x298>
 801d380:	4299      	cmp	r1, r3
 801d382:	f240 811b 	bls.w	801d5bc <__udivmoddi4+0x298>
 801d386:	f1ae 0e02 	sub.w	lr, lr, #2
 801d38a:	4463      	add	r3, ip
 801d38c:	1a5b      	subs	r3, r3, r1
 801d38e:	b2a4      	uxth	r4, r4
 801d390:	fbb3 f0f5 	udiv	r0, r3, r5
 801d394:	fb05 3310 	mls	r3, r5, r0, r3
 801d398:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801d39c:	fb00 f707 	mul.w	r7, r0, r7
 801d3a0:	42a7      	cmp	r7, r4
 801d3a2:	d90a      	bls.n	801d3ba <__udivmoddi4+0x96>
 801d3a4:	eb1c 0404 	adds.w	r4, ip, r4
 801d3a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d3ac:	f080 8108 	bcs.w	801d5c0 <__udivmoddi4+0x29c>
 801d3b0:	42a7      	cmp	r7, r4
 801d3b2:	f240 8105 	bls.w	801d5c0 <__udivmoddi4+0x29c>
 801d3b6:	4464      	add	r4, ip
 801d3b8:	3802      	subs	r0, #2
 801d3ba:	1be4      	subs	r4, r4, r7
 801d3bc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801d3c0:	2100      	movs	r1, #0
 801d3c2:	b11e      	cbz	r6, 801d3cc <__udivmoddi4+0xa8>
 801d3c4:	40d4      	lsrs	r4, r2
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	e9c6 4300 	strd	r4, r3, [r6]
 801d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3d0:	428b      	cmp	r3, r1
 801d3d2:	d908      	bls.n	801d3e6 <__udivmoddi4+0xc2>
 801d3d4:	2e00      	cmp	r6, #0
 801d3d6:	f000 80ee 	beq.w	801d5b6 <__udivmoddi4+0x292>
 801d3da:	2100      	movs	r1, #0
 801d3dc:	e9c6 0500 	strd	r0, r5, [r6]
 801d3e0:	4608      	mov	r0, r1
 801d3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3e6:	fab3 f183 	clz	r1, r3
 801d3ea:	2900      	cmp	r1, #0
 801d3ec:	d14a      	bne.n	801d484 <__udivmoddi4+0x160>
 801d3ee:	42ab      	cmp	r3, r5
 801d3f0:	d302      	bcc.n	801d3f8 <__udivmoddi4+0xd4>
 801d3f2:	4282      	cmp	r2, r0
 801d3f4:	f200 80f9 	bhi.w	801d5ea <__udivmoddi4+0x2c6>
 801d3f8:	1a84      	subs	r4, r0, r2
 801d3fa:	eb65 0303 	sbc.w	r3, r5, r3
 801d3fe:	2001      	movs	r0, #1
 801d400:	4698      	mov	r8, r3
 801d402:	2e00      	cmp	r6, #0
 801d404:	d0e2      	beq.n	801d3cc <__udivmoddi4+0xa8>
 801d406:	e9c6 4800 	strd	r4, r8, [r6]
 801d40a:	e7df      	b.n	801d3cc <__udivmoddi4+0xa8>
 801d40c:	b902      	cbnz	r2, 801d410 <__udivmoddi4+0xec>
 801d40e:	deff      	udf	#255	; 0xff
 801d410:	fab2 f282 	clz	r2, r2
 801d414:	2a00      	cmp	r2, #0
 801d416:	f040 8091 	bne.w	801d53c <__udivmoddi4+0x218>
 801d41a:	eba1 050c 	sub.w	r5, r1, ip
 801d41e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801d422:	fa1f fe8c 	uxth.w	lr, ip
 801d426:	2101      	movs	r1, #1
 801d428:	fbb5 f3f7 	udiv	r3, r5, r7
 801d42c:	fb07 5013 	mls	r0, r7, r3, r5
 801d430:	0c25      	lsrs	r5, r4, #16
 801d432:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 801d436:	fb0e f003 	mul.w	r0, lr, r3
 801d43a:	42a8      	cmp	r0, r5
 801d43c:	d908      	bls.n	801d450 <__udivmoddi4+0x12c>
 801d43e:	eb1c 0505 	adds.w	r5, ip, r5
 801d442:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801d446:	d202      	bcs.n	801d44e <__udivmoddi4+0x12a>
 801d448:	42a8      	cmp	r0, r5
 801d44a:	f200 80cb 	bhi.w	801d5e4 <__udivmoddi4+0x2c0>
 801d44e:	4643      	mov	r3, r8
 801d450:	1a2d      	subs	r5, r5, r0
 801d452:	b2a4      	uxth	r4, r4
 801d454:	fbb5 f0f7 	udiv	r0, r5, r7
 801d458:	fb07 5510 	mls	r5, r7, r0, r5
 801d45c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801d460:	fb0e fe00 	mul.w	lr, lr, r0
 801d464:	45a6      	cmp	lr, r4
 801d466:	d908      	bls.n	801d47a <__udivmoddi4+0x156>
 801d468:	eb1c 0404 	adds.w	r4, ip, r4
 801d46c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 801d470:	d202      	bcs.n	801d478 <__udivmoddi4+0x154>
 801d472:	45a6      	cmp	lr, r4
 801d474:	f200 80bb 	bhi.w	801d5ee <__udivmoddi4+0x2ca>
 801d478:	4628      	mov	r0, r5
 801d47a:	eba4 040e 	sub.w	r4, r4, lr
 801d47e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801d482:	e79e      	b.n	801d3c2 <__udivmoddi4+0x9e>
 801d484:	f1c1 0720 	rsb	r7, r1, #32
 801d488:	408b      	lsls	r3, r1
 801d48a:	fa22 fc07 	lsr.w	ip, r2, r7
 801d48e:	ea4c 0c03 	orr.w	ip, ip, r3
 801d492:	fa20 f407 	lsr.w	r4, r0, r7
 801d496:	fa05 f301 	lsl.w	r3, r5, r1
 801d49a:	431c      	orrs	r4, r3
 801d49c:	40fd      	lsrs	r5, r7
 801d49e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801d4a2:	fa00 f301 	lsl.w	r3, r0, r1
 801d4a6:	fbb5 f8f9 	udiv	r8, r5, r9
 801d4aa:	0c20      	lsrs	r0, r4, #16
 801d4ac:	fa1f fe8c 	uxth.w	lr, ip
 801d4b0:	fb09 5518 	mls	r5, r9, r8, r5
 801d4b4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 801d4b8:	fb08 f00e 	mul.w	r0, r8, lr
 801d4bc:	42a8      	cmp	r0, r5
 801d4be:	fa02 f201 	lsl.w	r2, r2, r1
 801d4c2:	d90b      	bls.n	801d4dc <__udivmoddi4+0x1b8>
 801d4c4:	eb1c 0505 	adds.w	r5, ip, r5
 801d4c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 801d4cc:	f080 8088 	bcs.w	801d5e0 <__udivmoddi4+0x2bc>
 801d4d0:	42a8      	cmp	r0, r5
 801d4d2:	f240 8085 	bls.w	801d5e0 <__udivmoddi4+0x2bc>
 801d4d6:	f1a8 0802 	sub.w	r8, r8, #2
 801d4da:	4465      	add	r5, ip
 801d4dc:	1a2d      	subs	r5, r5, r0
 801d4de:	b2a4      	uxth	r4, r4
 801d4e0:	fbb5 f0f9 	udiv	r0, r5, r9
 801d4e4:	fb09 5510 	mls	r5, r9, r0, r5
 801d4e8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 801d4ec:	fb00 fe0e 	mul.w	lr, r0, lr
 801d4f0:	45ae      	cmp	lr, r5
 801d4f2:	d908      	bls.n	801d506 <__udivmoddi4+0x1e2>
 801d4f4:	eb1c 0505 	adds.w	r5, ip, r5
 801d4f8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 801d4fc:	d26c      	bcs.n	801d5d8 <__udivmoddi4+0x2b4>
 801d4fe:	45ae      	cmp	lr, r5
 801d500:	d96a      	bls.n	801d5d8 <__udivmoddi4+0x2b4>
 801d502:	3802      	subs	r0, #2
 801d504:	4465      	add	r5, ip
 801d506:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801d50a:	fba0 9402 	umull	r9, r4, r0, r2
 801d50e:	eba5 050e 	sub.w	r5, r5, lr
 801d512:	42a5      	cmp	r5, r4
 801d514:	46c8      	mov	r8, r9
 801d516:	46a6      	mov	lr, r4
 801d518:	d356      	bcc.n	801d5c8 <__udivmoddi4+0x2a4>
 801d51a:	d053      	beq.n	801d5c4 <__udivmoddi4+0x2a0>
 801d51c:	b15e      	cbz	r6, 801d536 <__udivmoddi4+0x212>
 801d51e:	ebb3 0208 	subs.w	r2, r3, r8
 801d522:	eb65 050e 	sbc.w	r5, r5, lr
 801d526:	fa05 f707 	lsl.w	r7, r5, r7
 801d52a:	fa22 f301 	lsr.w	r3, r2, r1
 801d52e:	40cd      	lsrs	r5, r1
 801d530:	431f      	orrs	r7, r3
 801d532:	e9c6 7500 	strd	r7, r5, [r6]
 801d536:	2100      	movs	r1, #0
 801d538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d53c:	f1c2 0320 	rsb	r3, r2, #32
 801d540:	fa20 f103 	lsr.w	r1, r0, r3
 801d544:	fa0c fc02 	lsl.w	ip, ip, r2
 801d548:	fa25 f303 	lsr.w	r3, r5, r3
 801d54c:	4095      	lsls	r5, r2
 801d54e:	430d      	orrs	r5, r1
 801d550:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801d554:	fa1f fe8c 	uxth.w	lr, ip
 801d558:	fbb3 f1f7 	udiv	r1, r3, r7
 801d55c:	fb07 3011 	mls	r0, r7, r1, r3
 801d560:	0c2b      	lsrs	r3, r5, #16
 801d562:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d566:	fb01 f00e 	mul.w	r0, r1, lr
 801d56a:	4298      	cmp	r0, r3
 801d56c:	fa04 f402 	lsl.w	r4, r4, r2
 801d570:	d908      	bls.n	801d584 <__udivmoddi4+0x260>
 801d572:	eb1c 0303 	adds.w	r3, ip, r3
 801d576:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 801d57a:	d22f      	bcs.n	801d5dc <__udivmoddi4+0x2b8>
 801d57c:	4298      	cmp	r0, r3
 801d57e:	d92d      	bls.n	801d5dc <__udivmoddi4+0x2b8>
 801d580:	3902      	subs	r1, #2
 801d582:	4463      	add	r3, ip
 801d584:	1a1b      	subs	r3, r3, r0
 801d586:	b2ad      	uxth	r5, r5
 801d588:	fbb3 f0f7 	udiv	r0, r3, r7
 801d58c:	fb07 3310 	mls	r3, r7, r0, r3
 801d590:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801d594:	fb00 f30e 	mul.w	r3, r0, lr
 801d598:	42ab      	cmp	r3, r5
 801d59a:	d908      	bls.n	801d5ae <__udivmoddi4+0x28a>
 801d59c:	eb1c 0505 	adds.w	r5, ip, r5
 801d5a0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801d5a4:	d216      	bcs.n	801d5d4 <__udivmoddi4+0x2b0>
 801d5a6:	42ab      	cmp	r3, r5
 801d5a8:	d914      	bls.n	801d5d4 <__udivmoddi4+0x2b0>
 801d5aa:	3802      	subs	r0, #2
 801d5ac:	4465      	add	r5, ip
 801d5ae:	1aed      	subs	r5, r5, r3
 801d5b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801d5b4:	e738      	b.n	801d428 <__udivmoddi4+0x104>
 801d5b6:	4631      	mov	r1, r6
 801d5b8:	4630      	mov	r0, r6
 801d5ba:	e707      	b.n	801d3cc <__udivmoddi4+0xa8>
 801d5bc:	4686      	mov	lr, r0
 801d5be:	e6e5      	b.n	801d38c <__udivmoddi4+0x68>
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	e6fa      	b.n	801d3ba <__udivmoddi4+0x96>
 801d5c4:	454b      	cmp	r3, r9
 801d5c6:	d2a9      	bcs.n	801d51c <__udivmoddi4+0x1f8>
 801d5c8:	ebb9 0802 	subs.w	r8, r9, r2
 801d5cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 801d5d0:	3801      	subs	r0, #1
 801d5d2:	e7a3      	b.n	801d51c <__udivmoddi4+0x1f8>
 801d5d4:	4640      	mov	r0, r8
 801d5d6:	e7ea      	b.n	801d5ae <__udivmoddi4+0x28a>
 801d5d8:	4620      	mov	r0, r4
 801d5da:	e794      	b.n	801d506 <__udivmoddi4+0x1e2>
 801d5dc:	4641      	mov	r1, r8
 801d5de:	e7d1      	b.n	801d584 <__udivmoddi4+0x260>
 801d5e0:	46d0      	mov	r8, sl
 801d5e2:	e77b      	b.n	801d4dc <__udivmoddi4+0x1b8>
 801d5e4:	3b02      	subs	r3, #2
 801d5e6:	4465      	add	r5, ip
 801d5e8:	e732      	b.n	801d450 <__udivmoddi4+0x12c>
 801d5ea:	4608      	mov	r0, r1
 801d5ec:	e709      	b.n	801d402 <__udivmoddi4+0xde>
 801d5ee:	4464      	add	r4, ip
 801d5f0:	3802      	subs	r0, #2
 801d5f2:	e742      	b.n	801d47a <__udivmoddi4+0x156>

0801d5f4 <__aeabi_idiv0>:
 801d5f4:	4770      	bx	lr
 801d5f6:	bf00      	nop

0801d5f8 <__sflush_r>:
 801d5f8:	898a      	ldrh	r2, [r1, #12]
 801d5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5fc:	4605      	mov	r5, r0
 801d5fe:	0710      	lsls	r0, r2, #28
 801d600:	460c      	mov	r4, r1
 801d602:	d457      	bmi.n	801d6b4 <__sflush_r+0xbc>
 801d604:	684b      	ldr	r3, [r1, #4]
 801d606:	2b00      	cmp	r3, #0
 801d608:	dc04      	bgt.n	801d614 <__sflush_r+0x1c>
 801d60a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	dc01      	bgt.n	801d614 <__sflush_r+0x1c>
 801d610:	2000      	movs	r0, #0
 801d612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d616:	2e00      	cmp	r6, #0
 801d618:	d0fa      	beq.n	801d610 <__sflush_r+0x18>
 801d61a:	2300      	movs	r3, #0
 801d61c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d620:	682f      	ldr	r7, [r5, #0]
 801d622:	602b      	str	r3, [r5, #0]
 801d624:	d032      	beq.n	801d68c <__sflush_r+0x94>
 801d626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d628:	89a3      	ldrh	r3, [r4, #12]
 801d62a:	075a      	lsls	r2, r3, #29
 801d62c:	d505      	bpl.n	801d63a <__sflush_r+0x42>
 801d62e:	6863      	ldr	r3, [r4, #4]
 801d630:	1ac0      	subs	r0, r0, r3
 801d632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d634:	b10b      	cbz	r3, 801d63a <__sflush_r+0x42>
 801d636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d638:	1ac0      	subs	r0, r0, r3
 801d63a:	2300      	movs	r3, #0
 801d63c:	4602      	mov	r2, r0
 801d63e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d640:	6a21      	ldr	r1, [r4, #32]
 801d642:	4628      	mov	r0, r5
 801d644:	47b0      	blx	r6
 801d646:	1c43      	adds	r3, r0, #1
 801d648:	89a3      	ldrh	r3, [r4, #12]
 801d64a:	d106      	bne.n	801d65a <__sflush_r+0x62>
 801d64c:	6829      	ldr	r1, [r5, #0]
 801d64e:	291d      	cmp	r1, #29
 801d650:	d82c      	bhi.n	801d6ac <__sflush_r+0xb4>
 801d652:	4a29      	ldr	r2, [pc, #164]	; (801d6f8 <__sflush_r+0x100>)
 801d654:	40ca      	lsrs	r2, r1
 801d656:	07d6      	lsls	r6, r2, #31
 801d658:	d528      	bpl.n	801d6ac <__sflush_r+0xb4>
 801d65a:	2200      	movs	r2, #0
 801d65c:	6062      	str	r2, [r4, #4]
 801d65e:	04d9      	lsls	r1, r3, #19
 801d660:	6922      	ldr	r2, [r4, #16]
 801d662:	6022      	str	r2, [r4, #0]
 801d664:	d504      	bpl.n	801d670 <__sflush_r+0x78>
 801d666:	1c42      	adds	r2, r0, #1
 801d668:	d101      	bne.n	801d66e <__sflush_r+0x76>
 801d66a:	682b      	ldr	r3, [r5, #0]
 801d66c:	b903      	cbnz	r3, 801d670 <__sflush_r+0x78>
 801d66e:	6560      	str	r0, [r4, #84]	; 0x54
 801d670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d672:	602f      	str	r7, [r5, #0]
 801d674:	2900      	cmp	r1, #0
 801d676:	d0cb      	beq.n	801d610 <__sflush_r+0x18>
 801d678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d67c:	4299      	cmp	r1, r3
 801d67e:	d002      	beq.n	801d686 <__sflush_r+0x8e>
 801d680:	4628      	mov	r0, r5
 801d682:	f000 f9bf 	bl	801da04 <_free_r>
 801d686:	2000      	movs	r0, #0
 801d688:	6360      	str	r0, [r4, #52]	; 0x34
 801d68a:	e7c2      	b.n	801d612 <__sflush_r+0x1a>
 801d68c:	6a21      	ldr	r1, [r4, #32]
 801d68e:	2301      	movs	r3, #1
 801d690:	4628      	mov	r0, r5
 801d692:	47b0      	blx	r6
 801d694:	1c41      	adds	r1, r0, #1
 801d696:	d1c7      	bne.n	801d628 <__sflush_r+0x30>
 801d698:	682b      	ldr	r3, [r5, #0]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d0c4      	beq.n	801d628 <__sflush_r+0x30>
 801d69e:	2b1d      	cmp	r3, #29
 801d6a0:	d001      	beq.n	801d6a6 <__sflush_r+0xae>
 801d6a2:	2b16      	cmp	r3, #22
 801d6a4:	d101      	bne.n	801d6aa <__sflush_r+0xb2>
 801d6a6:	602f      	str	r7, [r5, #0]
 801d6a8:	e7b2      	b.n	801d610 <__sflush_r+0x18>
 801d6aa:	89a3      	ldrh	r3, [r4, #12]
 801d6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6b0:	81a3      	strh	r3, [r4, #12]
 801d6b2:	e7ae      	b.n	801d612 <__sflush_r+0x1a>
 801d6b4:	690f      	ldr	r7, [r1, #16]
 801d6b6:	2f00      	cmp	r7, #0
 801d6b8:	d0aa      	beq.n	801d610 <__sflush_r+0x18>
 801d6ba:	0793      	lsls	r3, r2, #30
 801d6bc:	680e      	ldr	r6, [r1, #0]
 801d6be:	bf08      	it	eq
 801d6c0:	694b      	ldreq	r3, [r1, #20]
 801d6c2:	600f      	str	r7, [r1, #0]
 801d6c4:	bf18      	it	ne
 801d6c6:	2300      	movne	r3, #0
 801d6c8:	1bf6      	subs	r6, r6, r7
 801d6ca:	608b      	str	r3, [r1, #8]
 801d6cc:	2e00      	cmp	r6, #0
 801d6ce:	dd9f      	ble.n	801d610 <__sflush_r+0x18>
 801d6d0:	6a21      	ldr	r1, [r4, #32]
 801d6d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801d6d6:	4633      	mov	r3, r6
 801d6d8:	463a      	mov	r2, r7
 801d6da:	4628      	mov	r0, r5
 801d6dc:	47e0      	blx	ip
 801d6de:	2800      	cmp	r0, #0
 801d6e0:	dc06      	bgt.n	801d6f0 <__sflush_r+0xf8>
 801d6e2:	89a3      	ldrh	r3, [r4, #12]
 801d6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6e8:	81a3      	strh	r3, [r4, #12]
 801d6ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d6ee:	e790      	b.n	801d612 <__sflush_r+0x1a>
 801d6f0:	4407      	add	r7, r0
 801d6f2:	1a36      	subs	r6, r6, r0
 801d6f4:	e7ea      	b.n	801d6cc <__sflush_r+0xd4>
 801d6f6:	bf00      	nop
 801d6f8:	20400001 	.word	0x20400001

0801d6fc <_fflush_r>:
 801d6fc:	b538      	push	{r3, r4, r5, lr}
 801d6fe:	690b      	ldr	r3, [r1, #16]
 801d700:	4605      	mov	r5, r0
 801d702:	460c      	mov	r4, r1
 801d704:	b913      	cbnz	r3, 801d70c <_fflush_r+0x10>
 801d706:	2500      	movs	r5, #0
 801d708:	4628      	mov	r0, r5
 801d70a:	bd38      	pop	{r3, r4, r5, pc}
 801d70c:	b118      	cbz	r0, 801d716 <_fflush_r+0x1a>
 801d70e:	6983      	ldr	r3, [r0, #24]
 801d710:	b90b      	cbnz	r3, 801d716 <_fflush_r+0x1a>
 801d712:	f000 f887 	bl	801d824 <__sinit>
 801d716:	4b14      	ldr	r3, [pc, #80]	; (801d768 <_fflush_r+0x6c>)
 801d718:	429c      	cmp	r4, r3
 801d71a:	d11b      	bne.n	801d754 <_fflush_r+0x58>
 801d71c:	686c      	ldr	r4, [r5, #4]
 801d71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d0ef      	beq.n	801d706 <_fflush_r+0xa>
 801d726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d728:	07d0      	lsls	r0, r2, #31
 801d72a:	d404      	bmi.n	801d736 <_fflush_r+0x3a>
 801d72c:	0599      	lsls	r1, r3, #22
 801d72e:	d402      	bmi.n	801d736 <_fflush_r+0x3a>
 801d730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d732:	f000 f915 	bl	801d960 <__retarget_lock_acquire_recursive>
 801d736:	4628      	mov	r0, r5
 801d738:	4621      	mov	r1, r4
 801d73a:	f7ff ff5d 	bl	801d5f8 <__sflush_r>
 801d73e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d740:	07da      	lsls	r2, r3, #31
 801d742:	4605      	mov	r5, r0
 801d744:	d4e0      	bmi.n	801d708 <_fflush_r+0xc>
 801d746:	89a3      	ldrh	r3, [r4, #12]
 801d748:	059b      	lsls	r3, r3, #22
 801d74a:	d4dd      	bmi.n	801d708 <_fflush_r+0xc>
 801d74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d74e:	f000 f908 	bl	801d962 <__retarget_lock_release_recursive>
 801d752:	e7d9      	b.n	801d708 <_fflush_r+0xc>
 801d754:	4b05      	ldr	r3, [pc, #20]	; (801d76c <_fflush_r+0x70>)
 801d756:	429c      	cmp	r4, r3
 801d758:	d101      	bne.n	801d75e <_fflush_r+0x62>
 801d75a:	68ac      	ldr	r4, [r5, #8]
 801d75c:	e7df      	b.n	801d71e <_fflush_r+0x22>
 801d75e:	4b04      	ldr	r3, [pc, #16]	; (801d770 <_fflush_r+0x74>)
 801d760:	429c      	cmp	r4, r3
 801d762:	bf08      	it	eq
 801d764:	68ec      	ldreq	r4, [r5, #12]
 801d766:	e7da      	b.n	801d71e <_fflush_r+0x22>
 801d768:	0802ac50 	.word	0x0802ac50
 801d76c:	0802ac70 	.word	0x0802ac70
 801d770:	0802ac30 	.word	0x0802ac30

0801d774 <std>:
 801d774:	2300      	movs	r3, #0
 801d776:	b510      	push	{r4, lr}
 801d778:	4604      	mov	r4, r0
 801d77a:	e9c0 3300 	strd	r3, r3, [r0]
 801d77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d782:	6083      	str	r3, [r0, #8]
 801d784:	8181      	strh	r1, [r0, #12]
 801d786:	6643      	str	r3, [r0, #100]	; 0x64
 801d788:	81c2      	strh	r2, [r0, #14]
 801d78a:	6183      	str	r3, [r0, #24]
 801d78c:	4619      	mov	r1, r3
 801d78e:	2208      	movs	r2, #8
 801d790:	305c      	adds	r0, #92	; 0x5c
 801d792:	f000 f92f 	bl	801d9f4 <memset>
 801d796:	4b05      	ldr	r3, [pc, #20]	; (801d7ac <std+0x38>)
 801d798:	6263      	str	r3, [r4, #36]	; 0x24
 801d79a:	4b05      	ldr	r3, [pc, #20]	; (801d7b0 <std+0x3c>)
 801d79c:	62a3      	str	r3, [r4, #40]	; 0x28
 801d79e:	4b05      	ldr	r3, [pc, #20]	; (801d7b4 <std+0x40>)
 801d7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d7a2:	4b05      	ldr	r3, [pc, #20]	; (801d7b8 <std+0x44>)
 801d7a4:	6224      	str	r4, [r4, #32]
 801d7a6:	6323      	str	r3, [r4, #48]	; 0x30
 801d7a8:	bd10      	pop	{r4, pc}
 801d7aa:	bf00      	nop
 801d7ac:	0801dc11 	.word	0x0801dc11
 801d7b0:	0801dc33 	.word	0x0801dc33
 801d7b4:	0801dc6b 	.word	0x0801dc6b
 801d7b8:	0801dc8f 	.word	0x0801dc8f

0801d7bc <_cleanup_r>:
 801d7bc:	4901      	ldr	r1, [pc, #4]	; (801d7c4 <_cleanup_r+0x8>)
 801d7be:	f000 b8af 	b.w	801d920 <_fwalk_reent>
 801d7c2:	bf00      	nop
 801d7c4:	0801d6fd 	.word	0x0801d6fd

0801d7c8 <__sfmoreglue>:
 801d7c8:	b570      	push	{r4, r5, r6, lr}
 801d7ca:	2268      	movs	r2, #104	; 0x68
 801d7cc:	1e4d      	subs	r5, r1, #1
 801d7ce:	4355      	muls	r5, r2
 801d7d0:	460e      	mov	r6, r1
 801d7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d7d6:	f000 f97f 	bl	801dad8 <_malloc_r>
 801d7da:	4604      	mov	r4, r0
 801d7dc:	b140      	cbz	r0, 801d7f0 <__sfmoreglue+0x28>
 801d7de:	2100      	movs	r1, #0
 801d7e0:	e9c0 1600 	strd	r1, r6, [r0]
 801d7e4:	300c      	adds	r0, #12
 801d7e6:	60a0      	str	r0, [r4, #8]
 801d7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d7ec:	f000 f902 	bl	801d9f4 <memset>
 801d7f0:	4620      	mov	r0, r4
 801d7f2:	bd70      	pop	{r4, r5, r6, pc}

0801d7f4 <__sfp_lock_acquire>:
 801d7f4:	4801      	ldr	r0, [pc, #4]	; (801d7fc <__sfp_lock_acquire+0x8>)
 801d7f6:	f000 b8b3 	b.w	801d960 <__retarget_lock_acquire_recursive>
 801d7fa:	bf00      	nop
 801d7fc:	200000ad 	.word	0x200000ad

0801d800 <__sfp_lock_release>:
 801d800:	4801      	ldr	r0, [pc, #4]	; (801d808 <__sfp_lock_release+0x8>)
 801d802:	f000 b8ae 	b.w	801d962 <__retarget_lock_release_recursive>
 801d806:	bf00      	nop
 801d808:	200000ad 	.word	0x200000ad

0801d80c <__sinit_lock_acquire>:
 801d80c:	4801      	ldr	r0, [pc, #4]	; (801d814 <__sinit_lock_acquire+0x8>)
 801d80e:	f000 b8a7 	b.w	801d960 <__retarget_lock_acquire_recursive>
 801d812:	bf00      	nop
 801d814:	200000ae 	.word	0x200000ae

0801d818 <__sinit_lock_release>:
 801d818:	4801      	ldr	r0, [pc, #4]	; (801d820 <__sinit_lock_release+0x8>)
 801d81a:	f000 b8a2 	b.w	801d962 <__retarget_lock_release_recursive>
 801d81e:	bf00      	nop
 801d820:	200000ae 	.word	0x200000ae

0801d824 <__sinit>:
 801d824:	b510      	push	{r4, lr}
 801d826:	4604      	mov	r4, r0
 801d828:	f7ff fff0 	bl	801d80c <__sinit_lock_acquire>
 801d82c:	69a3      	ldr	r3, [r4, #24]
 801d82e:	b11b      	cbz	r3, 801d838 <__sinit+0x14>
 801d830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d834:	f7ff bff0 	b.w	801d818 <__sinit_lock_release>
 801d838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d83c:	6523      	str	r3, [r4, #80]	; 0x50
 801d83e:	4b13      	ldr	r3, [pc, #76]	; (801d88c <__sinit+0x68>)
 801d840:	4a13      	ldr	r2, [pc, #76]	; (801d890 <__sinit+0x6c>)
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	62a2      	str	r2, [r4, #40]	; 0x28
 801d846:	42a3      	cmp	r3, r4
 801d848:	bf04      	itt	eq
 801d84a:	2301      	moveq	r3, #1
 801d84c:	61a3      	streq	r3, [r4, #24]
 801d84e:	4620      	mov	r0, r4
 801d850:	f000 f820 	bl	801d894 <__sfp>
 801d854:	6060      	str	r0, [r4, #4]
 801d856:	4620      	mov	r0, r4
 801d858:	f000 f81c 	bl	801d894 <__sfp>
 801d85c:	60a0      	str	r0, [r4, #8]
 801d85e:	4620      	mov	r0, r4
 801d860:	f000 f818 	bl	801d894 <__sfp>
 801d864:	2200      	movs	r2, #0
 801d866:	60e0      	str	r0, [r4, #12]
 801d868:	2104      	movs	r1, #4
 801d86a:	6860      	ldr	r0, [r4, #4]
 801d86c:	f7ff ff82 	bl	801d774 <std>
 801d870:	68a0      	ldr	r0, [r4, #8]
 801d872:	2201      	movs	r2, #1
 801d874:	2109      	movs	r1, #9
 801d876:	f7ff ff7d 	bl	801d774 <std>
 801d87a:	68e0      	ldr	r0, [r4, #12]
 801d87c:	2202      	movs	r2, #2
 801d87e:	2112      	movs	r1, #18
 801d880:	f7ff ff78 	bl	801d774 <std>
 801d884:	2301      	movs	r3, #1
 801d886:	61a3      	str	r3, [r4, #24]
 801d888:	e7d2      	b.n	801d830 <__sinit+0xc>
 801d88a:	bf00      	nop
 801d88c:	0802ac90 	.word	0x0802ac90
 801d890:	0801d7bd 	.word	0x0801d7bd

0801d894 <__sfp>:
 801d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d896:	4607      	mov	r7, r0
 801d898:	f7ff ffac 	bl	801d7f4 <__sfp_lock_acquire>
 801d89c:	4b1e      	ldr	r3, [pc, #120]	; (801d918 <__sfp+0x84>)
 801d89e:	681e      	ldr	r6, [r3, #0]
 801d8a0:	69b3      	ldr	r3, [r6, #24]
 801d8a2:	b913      	cbnz	r3, 801d8aa <__sfp+0x16>
 801d8a4:	4630      	mov	r0, r6
 801d8a6:	f7ff ffbd 	bl	801d824 <__sinit>
 801d8aa:	3648      	adds	r6, #72	; 0x48
 801d8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d8b0:	3b01      	subs	r3, #1
 801d8b2:	d503      	bpl.n	801d8bc <__sfp+0x28>
 801d8b4:	6833      	ldr	r3, [r6, #0]
 801d8b6:	b30b      	cbz	r3, 801d8fc <__sfp+0x68>
 801d8b8:	6836      	ldr	r6, [r6, #0]
 801d8ba:	e7f7      	b.n	801d8ac <__sfp+0x18>
 801d8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d8c0:	b9d5      	cbnz	r5, 801d8f8 <__sfp+0x64>
 801d8c2:	4b16      	ldr	r3, [pc, #88]	; (801d91c <__sfp+0x88>)
 801d8c4:	60e3      	str	r3, [r4, #12]
 801d8c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d8ca:	6665      	str	r5, [r4, #100]	; 0x64
 801d8cc:	f000 f847 	bl	801d95e <__retarget_lock_init_recursive>
 801d8d0:	f7ff ff96 	bl	801d800 <__sfp_lock_release>
 801d8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d8dc:	6025      	str	r5, [r4, #0]
 801d8de:	61a5      	str	r5, [r4, #24]
 801d8e0:	2208      	movs	r2, #8
 801d8e2:	4629      	mov	r1, r5
 801d8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d8e8:	f000 f884 	bl	801d9f4 <memset>
 801d8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d8f4:	4620      	mov	r0, r4
 801d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8f8:	3468      	adds	r4, #104	; 0x68
 801d8fa:	e7d9      	b.n	801d8b0 <__sfp+0x1c>
 801d8fc:	2104      	movs	r1, #4
 801d8fe:	4638      	mov	r0, r7
 801d900:	f7ff ff62 	bl	801d7c8 <__sfmoreglue>
 801d904:	4604      	mov	r4, r0
 801d906:	6030      	str	r0, [r6, #0]
 801d908:	2800      	cmp	r0, #0
 801d90a:	d1d5      	bne.n	801d8b8 <__sfp+0x24>
 801d90c:	f7ff ff78 	bl	801d800 <__sfp_lock_release>
 801d910:	230c      	movs	r3, #12
 801d912:	603b      	str	r3, [r7, #0]
 801d914:	e7ee      	b.n	801d8f4 <__sfp+0x60>
 801d916:	bf00      	nop
 801d918:	0802ac90 	.word	0x0802ac90
 801d91c:	ffff0001 	.word	0xffff0001

0801d920 <_fwalk_reent>:
 801d920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d924:	4606      	mov	r6, r0
 801d926:	4688      	mov	r8, r1
 801d928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d92c:	2700      	movs	r7, #0
 801d92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d932:	f1b9 0901 	subs.w	r9, r9, #1
 801d936:	d505      	bpl.n	801d944 <_fwalk_reent+0x24>
 801d938:	6824      	ldr	r4, [r4, #0]
 801d93a:	2c00      	cmp	r4, #0
 801d93c:	d1f7      	bne.n	801d92e <_fwalk_reent+0xe>
 801d93e:	4638      	mov	r0, r7
 801d940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d944:	89ab      	ldrh	r3, [r5, #12]
 801d946:	2b01      	cmp	r3, #1
 801d948:	d907      	bls.n	801d95a <_fwalk_reent+0x3a>
 801d94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d94e:	3301      	adds	r3, #1
 801d950:	d003      	beq.n	801d95a <_fwalk_reent+0x3a>
 801d952:	4629      	mov	r1, r5
 801d954:	4630      	mov	r0, r6
 801d956:	47c0      	blx	r8
 801d958:	4307      	orrs	r7, r0
 801d95a:	3568      	adds	r5, #104	; 0x68
 801d95c:	e7e9      	b.n	801d932 <_fwalk_reent+0x12>

0801d95e <__retarget_lock_init_recursive>:
 801d95e:	4770      	bx	lr

0801d960 <__retarget_lock_acquire_recursive>:
 801d960:	4770      	bx	lr

0801d962 <__retarget_lock_release_recursive>:
 801d962:	4770      	bx	lr

0801d964 <malloc>:
 801d964:	4b02      	ldr	r3, [pc, #8]	; (801d970 <malloc+0xc>)
 801d966:	4601      	mov	r1, r0
 801d968:	6818      	ldr	r0, [r3, #0]
 801d96a:	f000 b8b5 	b.w	801dad8 <_malloc_r>
 801d96e:	bf00      	nop
 801d970:	20000000 	.word	0x20000000

0801d974 <free>:
 801d974:	4b02      	ldr	r3, [pc, #8]	; (801d980 <free+0xc>)
 801d976:	4601      	mov	r1, r0
 801d978:	6818      	ldr	r0, [r3, #0]
 801d97a:	f000 b843 	b.w	801da04 <_free_r>
 801d97e:	bf00      	nop
 801d980:	20000000 	.word	0x20000000

0801d984 <memcmp>:
 801d984:	b510      	push	{r4, lr}
 801d986:	3901      	subs	r1, #1
 801d988:	4402      	add	r2, r0
 801d98a:	4290      	cmp	r0, r2
 801d98c:	d101      	bne.n	801d992 <memcmp+0xe>
 801d98e:	2000      	movs	r0, #0
 801d990:	e005      	b.n	801d99e <memcmp+0x1a>
 801d992:	7803      	ldrb	r3, [r0, #0]
 801d994:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d998:	42a3      	cmp	r3, r4
 801d99a:	d001      	beq.n	801d9a0 <memcmp+0x1c>
 801d99c:	1b18      	subs	r0, r3, r4
 801d99e:	bd10      	pop	{r4, pc}
 801d9a0:	3001      	adds	r0, #1
 801d9a2:	e7f2      	b.n	801d98a <memcmp+0x6>

0801d9a4 <memcpy>:
 801d9a4:	440a      	add	r2, r1
 801d9a6:	4291      	cmp	r1, r2
 801d9a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d9ac:	d100      	bne.n	801d9b0 <memcpy+0xc>
 801d9ae:	4770      	bx	lr
 801d9b0:	b510      	push	{r4, lr}
 801d9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d9ba:	4291      	cmp	r1, r2
 801d9bc:	d1f9      	bne.n	801d9b2 <memcpy+0xe>
 801d9be:	bd10      	pop	{r4, pc}

0801d9c0 <memmove>:
 801d9c0:	4288      	cmp	r0, r1
 801d9c2:	b510      	push	{r4, lr}
 801d9c4:	eb01 0402 	add.w	r4, r1, r2
 801d9c8:	d902      	bls.n	801d9d0 <memmove+0x10>
 801d9ca:	4284      	cmp	r4, r0
 801d9cc:	4623      	mov	r3, r4
 801d9ce:	d807      	bhi.n	801d9e0 <memmove+0x20>
 801d9d0:	1e43      	subs	r3, r0, #1
 801d9d2:	42a1      	cmp	r1, r4
 801d9d4:	d008      	beq.n	801d9e8 <memmove+0x28>
 801d9d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d9da:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d9de:	e7f8      	b.n	801d9d2 <memmove+0x12>
 801d9e0:	4402      	add	r2, r0
 801d9e2:	4601      	mov	r1, r0
 801d9e4:	428a      	cmp	r2, r1
 801d9e6:	d100      	bne.n	801d9ea <memmove+0x2a>
 801d9e8:	bd10      	pop	{r4, pc}
 801d9ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d9ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d9f2:	e7f7      	b.n	801d9e4 <memmove+0x24>

0801d9f4 <memset>:
 801d9f4:	4402      	add	r2, r0
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	4293      	cmp	r3, r2
 801d9fa:	d100      	bne.n	801d9fe <memset+0xa>
 801d9fc:	4770      	bx	lr
 801d9fe:	f803 1b01 	strb.w	r1, [r3], #1
 801da02:	e7f9      	b.n	801d9f8 <memset+0x4>

0801da04 <_free_r>:
 801da04:	b538      	push	{r3, r4, r5, lr}
 801da06:	4605      	mov	r5, r0
 801da08:	2900      	cmp	r1, #0
 801da0a:	d041      	beq.n	801da90 <_free_r+0x8c>
 801da0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da10:	1f0c      	subs	r4, r1, #4
 801da12:	2b00      	cmp	r3, #0
 801da14:	bfb8      	it	lt
 801da16:	18e4      	addlt	r4, r4, r3
 801da18:	f000 f9c0 	bl	801dd9c <__malloc_lock>
 801da1c:	4a1d      	ldr	r2, [pc, #116]	; (801da94 <_free_r+0x90>)
 801da1e:	6813      	ldr	r3, [r2, #0]
 801da20:	b933      	cbnz	r3, 801da30 <_free_r+0x2c>
 801da22:	6063      	str	r3, [r4, #4]
 801da24:	6014      	str	r4, [r2, #0]
 801da26:	4628      	mov	r0, r5
 801da28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da2c:	f000 b9bc 	b.w	801dda8 <__malloc_unlock>
 801da30:	42a3      	cmp	r3, r4
 801da32:	d908      	bls.n	801da46 <_free_r+0x42>
 801da34:	6820      	ldr	r0, [r4, #0]
 801da36:	1821      	adds	r1, r4, r0
 801da38:	428b      	cmp	r3, r1
 801da3a:	bf01      	itttt	eq
 801da3c:	6819      	ldreq	r1, [r3, #0]
 801da3e:	685b      	ldreq	r3, [r3, #4]
 801da40:	1809      	addeq	r1, r1, r0
 801da42:	6021      	streq	r1, [r4, #0]
 801da44:	e7ed      	b.n	801da22 <_free_r+0x1e>
 801da46:	461a      	mov	r2, r3
 801da48:	685b      	ldr	r3, [r3, #4]
 801da4a:	b10b      	cbz	r3, 801da50 <_free_r+0x4c>
 801da4c:	42a3      	cmp	r3, r4
 801da4e:	d9fa      	bls.n	801da46 <_free_r+0x42>
 801da50:	6811      	ldr	r1, [r2, #0]
 801da52:	1850      	adds	r0, r2, r1
 801da54:	42a0      	cmp	r0, r4
 801da56:	d10b      	bne.n	801da70 <_free_r+0x6c>
 801da58:	6820      	ldr	r0, [r4, #0]
 801da5a:	4401      	add	r1, r0
 801da5c:	1850      	adds	r0, r2, r1
 801da5e:	4283      	cmp	r3, r0
 801da60:	6011      	str	r1, [r2, #0]
 801da62:	d1e0      	bne.n	801da26 <_free_r+0x22>
 801da64:	6818      	ldr	r0, [r3, #0]
 801da66:	685b      	ldr	r3, [r3, #4]
 801da68:	6053      	str	r3, [r2, #4]
 801da6a:	4401      	add	r1, r0
 801da6c:	6011      	str	r1, [r2, #0]
 801da6e:	e7da      	b.n	801da26 <_free_r+0x22>
 801da70:	d902      	bls.n	801da78 <_free_r+0x74>
 801da72:	230c      	movs	r3, #12
 801da74:	602b      	str	r3, [r5, #0]
 801da76:	e7d6      	b.n	801da26 <_free_r+0x22>
 801da78:	6820      	ldr	r0, [r4, #0]
 801da7a:	1821      	adds	r1, r4, r0
 801da7c:	428b      	cmp	r3, r1
 801da7e:	bf04      	itt	eq
 801da80:	6819      	ldreq	r1, [r3, #0]
 801da82:	685b      	ldreq	r3, [r3, #4]
 801da84:	6063      	str	r3, [r4, #4]
 801da86:	bf04      	itt	eq
 801da88:	1809      	addeq	r1, r1, r0
 801da8a:	6021      	streq	r1, [r4, #0]
 801da8c:	6054      	str	r4, [r2, #4]
 801da8e:	e7ca      	b.n	801da26 <_free_r+0x22>
 801da90:	bd38      	pop	{r3, r4, r5, pc}
 801da92:	bf00      	nop
 801da94:	200000b0 	.word	0x200000b0

0801da98 <sbrk_aligned>:
 801da98:	b570      	push	{r4, r5, r6, lr}
 801da9a:	4e0e      	ldr	r6, [pc, #56]	; (801dad4 <sbrk_aligned+0x3c>)
 801da9c:	460c      	mov	r4, r1
 801da9e:	6831      	ldr	r1, [r6, #0]
 801daa0:	4605      	mov	r5, r0
 801daa2:	b911      	cbnz	r1, 801daaa <sbrk_aligned+0x12>
 801daa4:	f000 f8a4 	bl	801dbf0 <_sbrk_r>
 801daa8:	6030      	str	r0, [r6, #0]
 801daaa:	4621      	mov	r1, r4
 801daac:	4628      	mov	r0, r5
 801daae:	f000 f89f 	bl	801dbf0 <_sbrk_r>
 801dab2:	1c43      	adds	r3, r0, #1
 801dab4:	d00a      	beq.n	801dacc <sbrk_aligned+0x34>
 801dab6:	1cc4      	adds	r4, r0, #3
 801dab8:	f024 0403 	bic.w	r4, r4, #3
 801dabc:	42a0      	cmp	r0, r4
 801dabe:	d007      	beq.n	801dad0 <sbrk_aligned+0x38>
 801dac0:	1a21      	subs	r1, r4, r0
 801dac2:	4628      	mov	r0, r5
 801dac4:	f000 f894 	bl	801dbf0 <_sbrk_r>
 801dac8:	3001      	adds	r0, #1
 801daca:	d101      	bne.n	801dad0 <sbrk_aligned+0x38>
 801dacc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801dad0:	4620      	mov	r0, r4
 801dad2:	bd70      	pop	{r4, r5, r6, pc}
 801dad4:	200000b4 	.word	0x200000b4

0801dad8 <_malloc_r>:
 801dad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dadc:	1ccd      	adds	r5, r1, #3
 801dade:	f025 0503 	bic.w	r5, r5, #3
 801dae2:	3508      	adds	r5, #8
 801dae4:	2d0c      	cmp	r5, #12
 801dae6:	bf38      	it	cc
 801dae8:	250c      	movcc	r5, #12
 801daea:	2d00      	cmp	r5, #0
 801daec:	4607      	mov	r7, r0
 801daee:	db01      	blt.n	801daf4 <_malloc_r+0x1c>
 801daf0:	42a9      	cmp	r1, r5
 801daf2:	d905      	bls.n	801db00 <_malloc_r+0x28>
 801daf4:	230c      	movs	r3, #12
 801daf6:	603b      	str	r3, [r7, #0]
 801daf8:	2600      	movs	r6, #0
 801dafa:	4630      	mov	r0, r6
 801dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db00:	4e2e      	ldr	r6, [pc, #184]	; (801dbbc <_malloc_r+0xe4>)
 801db02:	f000 f94b 	bl	801dd9c <__malloc_lock>
 801db06:	6833      	ldr	r3, [r6, #0]
 801db08:	461c      	mov	r4, r3
 801db0a:	bb34      	cbnz	r4, 801db5a <_malloc_r+0x82>
 801db0c:	4629      	mov	r1, r5
 801db0e:	4638      	mov	r0, r7
 801db10:	f7ff ffc2 	bl	801da98 <sbrk_aligned>
 801db14:	1c43      	adds	r3, r0, #1
 801db16:	4604      	mov	r4, r0
 801db18:	d14d      	bne.n	801dbb6 <_malloc_r+0xde>
 801db1a:	6834      	ldr	r4, [r6, #0]
 801db1c:	4626      	mov	r6, r4
 801db1e:	2e00      	cmp	r6, #0
 801db20:	d140      	bne.n	801dba4 <_malloc_r+0xcc>
 801db22:	6823      	ldr	r3, [r4, #0]
 801db24:	4631      	mov	r1, r6
 801db26:	4638      	mov	r0, r7
 801db28:	eb04 0803 	add.w	r8, r4, r3
 801db2c:	f000 f860 	bl	801dbf0 <_sbrk_r>
 801db30:	4580      	cmp	r8, r0
 801db32:	d13a      	bne.n	801dbaa <_malloc_r+0xd2>
 801db34:	6821      	ldr	r1, [r4, #0]
 801db36:	3503      	adds	r5, #3
 801db38:	1a6d      	subs	r5, r5, r1
 801db3a:	f025 0503 	bic.w	r5, r5, #3
 801db3e:	3508      	adds	r5, #8
 801db40:	2d0c      	cmp	r5, #12
 801db42:	bf38      	it	cc
 801db44:	250c      	movcc	r5, #12
 801db46:	4629      	mov	r1, r5
 801db48:	4638      	mov	r0, r7
 801db4a:	f7ff ffa5 	bl	801da98 <sbrk_aligned>
 801db4e:	3001      	adds	r0, #1
 801db50:	d02b      	beq.n	801dbaa <_malloc_r+0xd2>
 801db52:	6823      	ldr	r3, [r4, #0]
 801db54:	442b      	add	r3, r5
 801db56:	6023      	str	r3, [r4, #0]
 801db58:	e00e      	b.n	801db78 <_malloc_r+0xa0>
 801db5a:	6822      	ldr	r2, [r4, #0]
 801db5c:	1b52      	subs	r2, r2, r5
 801db5e:	d41e      	bmi.n	801db9e <_malloc_r+0xc6>
 801db60:	2a0b      	cmp	r2, #11
 801db62:	d916      	bls.n	801db92 <_malloc_r+0xba>
 801db64:	1961      	adds	r1, r4, r5
 801db66:	42a3      	cmp	r3, r4
 801db68:	6025      	str	r5, [r4, #0]
 801db6a:	bf18      	it	ne
 801db6c:	6059      	strne	r1, [r3, #4]
 801db6e:	6863      	ldr	r3, [r4, #4]
 801db70:	bf08      	it	eq
 801db72:	6031      	streq	r1, [r6, #0]
 801db74:	5162      	str	r2, [r4, r5]
 801db76:	604b      	str	r3, [r1, #4]
 801db78:	4638      	mov	r0, r7
 801db7a:	f104 060b 	add.w	r6, r4, #11
 801db7e:	f000 f913 	bl	801dda8 <__malloc_unlock>
 801db82:	f026 0607 	bic.w	r6, r6, #7
 801db86:	1d23      	adds	r3, r4, #4
 801db88:	1af2      	subs	r2, r6, r3
 801db8a:	d0b6      	beq.n	801dafa <_malloc_r+0x22>
 801db8c:	1b9b      	subs	r3, r3, r6
 801db8e:	50a3      	str	r3, [r4, r2]
 801db90:	e7b3      	b.n	801dafa <_malloc_r+0x22>
 801db92:	6862      	ldr	r2, [r4, #4]
 801db94:	42a3      	cmp	r3, r4
 801db96:	bf0c      	ite	eq
 801db98:	6032      	streq	r2, [r6, #0]
 801db9a:	605a      	strne	r2, [r3, #4]
 801db9c:	e7ec      	b.n	801db78 <_malloc_r+0xa0>
 801db9e:	4623      	mov	r3, r4
 801dba0:	6864      	ldr	r4, [r4, #4]
 801dba2:	e7b2      	b.n	801db0a <_malloc_r+0x32>
 801dba4:	4634      	mov	r4, r6
 801dba6:	6876      	ldr	r6, [r6, #4]
 801dba8:	e7b9      	b.n	801db1e <_malloc_r+0x46>
 801dbaa:	230c      	movs	r3, #12
 801dbac:	603b      	str	r3, [r7, #0]
 801dbae:	4638      	mov	r0, r7
 801dbb0:	f000 f8fa 	bl	801dda8 <__malloc_unlock>
 801dbb4:	e7a1      	b.n	801dafa <_malloc_r+0x22>
 801dbb6:	6025      	str	r5, [r4, #0]
 801dbb8:	e7de      	b.n	801db78 <_malloc_r+0xa0>
 801dbba:	bf00      	nop
 801dbbc:	200000b0 	.word	0x200000b0

0801dbc0 <iprintf>:
 801dbc0:	b40f      	push	{r0, r1, r2, r3}
 801dbc2:	4b0a      	ldr	r3, [pc, #40]	; (801dbec <iprintf+0x2c>)
 801dbc4:	b513      	push	{r0, r1, r4, lr}
 801dbc6:	681c      	ldr	r4, [r3, #0]
 801dbc8:	b124      	cbz	r4, 801dbd4 <iprintf+0x14>
 801dbca:	69a3      	ldr	r3, [r4, #24]
 801dbcc:	b913      	cbnz	r3, 801dbd4 <iprintf+0x14>
 801dbce:	4620      	mov	r0, r4
 801dbd0:	f7ff fe28 	bl	801d824 <__sinit>
 801dbd4:	ab05      	add	r3, sp, #20
 801dbd6:	9a04      	ldr	r2, [sp, #16]
 801dbd8:	68a1      	ldr	r1, [r4, #8]
 801dbda:	9301      	str	r3, [sp, #4]
 801dbdc:	4620      	mov	r0, r4
 801dbde:	f000 f911 	bl	801de04 <_vfiprintf_r>
 801dbe2:	b002      	add	sp, #8
 801dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbe8:	b004      	add	sp, #16
 801dbea:	4770      	bx	lr
 801dbec:	20000000 	.word	0x20000000

0801dbf0 <_sbrk_r>:
 801dbf0:	b538      	push	{r3, r4, r5, lr}
 801dbf2:	4d06      	ldr	r5, [pc, #24]	; (801dc0c <_sbrk_r+0x1c>)
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	4608      	mov	r0, r1
 801dbfa:	602b      	str	r3, [r5, #0]
 801dbfc:	f000 fd9a 	bl	801e734 <_sbrk>
 801dc00:	1c43      	adds	r3, r0, #1
 801dc02:	d102      	bne.n	801dc0a <_sbrk_r+0x1a>
 801dc04:	682b      	ldr	r3, [r5, #0]
 801dc06:	b103      	cbz	r3, 801dc0a <_sbrk_r+0x1a>
 801dc08:	6023      	str	r3, [r4, #0]
 801dc0a:	bd38      	pop	{r3, r4, r5, pc}
 801dc0c:	200000b8 	.word	0x200000b8

0801dc10 <__sread>:
 801dc10:	b510      	push	{r4, lr}
 801dc12:	460c      	mov	r4, r1
 801dc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc18:	f000 fbb8 	bl	801e38c <_read_r>
 801dc1c:	2800      	cmp	r0, #0
 801dc1e:	bfab      	itete	ge
 801dc20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dc22:	89a3      	ldrhlt	r3, [r4, #12]
 801dc24:	181b      	addge	r3, r3, r0
 801dc26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dc2a:	bfac      	ite	ge
 801dc2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801dc2e:	81a3      	strhlt	r3, [r4, #12]
 801dc30:	bd10      	pop	{r4, pc}

0801dc32 <__swrite>:
 801dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc36:	461f      	mov	r7, r3
 801dc38:	898b      	ldrh	r3, [r1, #12]
 801dc3a:	05db      	lsls	r3, r3, #23
 801dc3c:	4605      	mov	r5, r0
 801dc3e:	460c      	mov	r4, r1
 801dc40:	4616      	mov	r6, r2
 801dc42:	d505      	bpl.n	801dc50 <__swrite+0x1e>
 801dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc48:	2302      	movs	r3, #2
 801dc4a:	2200      	movs	r2, #0
 801dc4c:	f000 f894 	bl	801dd78 <_lseek_r>
 801dc50:	89a3      	ldrh	r3, [r4, #12]
 801dc52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dc5a:	81a3      	strh	r3, [r4, #12]
 801dc5c:	4632      	mov	r2, r6
 801dc5e:	463b      	mov	r3, r7
 801dc60:	4628      	mov	r0, r5
 801dc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc66:	f000 b865 	b.w	801dd34 <_write_r>

0801dc6a <__sseek>:
 801dc6a:	b510      	push	{r4, lr}
 801dc6c:	460c      	mov	r4, r1
 801dc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc72:	f000 f881 	bl	801dd78 <_lseek_r>
 801dc76:	1c43      	adds	r3, r0, #1
 801dc78:	89a3      	ldrh	r3, [r4, #12]
 801dc7a:	bf15      	itete	ne
 801dc7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801dc7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dc82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dc86:	81a3      	strheq	r3, [r4, #12]
 801dc88:	bf18      	it	ne
 801dc8a:	81a3      	strhne	r3, [r4, #12]
 801dc8c:	bd10      	pop	{r4, pc}

0801dc8e <__sclose>:
 801dc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc92:	f000 b861 	b.w	801dd58 <_close_r>

0801dc96 <strcmp>:
 801dc96:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc9e:	2a01      	cmp	r2, #1
 801dca0:	bf28      	it	cs
 801dca2:	429a      	cmpcs	r2, r3
 801dca4:	d0f7      	beq.n	801dc96 <strcmp>
 801dca6:	1ad0      	subs	r0, r2, r3
 801dca8:	4770      	bx	lr

0801dcaa <strlen>:
 801dcaa:	4603      	mov	r3, r0
 801dcac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcb0:	2a00      	cmp	r2, #0
 801dcb2:	d1fb      	bne.n	801dcac <strlen+0x2>
 801dcb4:	1a18      	subs	r0, r3, r0
 801dcb6:	3801      	subs	r0, #1
 801dcb8:	4770      	bx	lr

0801dcba <strncmp>:
 801dcba:	b510      	push	{r4, lr}
 801dcbc:	4603      	mov	r3, r0
 801dcbe:	b172      	cbz	r2, 801dcde <strncmp+0x24>
 801dcc0:	3901      	subs	r1, #1
 801dcc2:	1884      	adds	r4, r0, r2
 801dcc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dcc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dccc:	4290      	cmp	r0, r2
 801dcce:	d101      	bne.n	801dcd4 <strncmp+0x1a>
 801dcd0:	42a3      	cmp	r3, r4
 801dcd2:	d101      	bne.n	801dcd8 <strncmp+0x1e>
 801dcd4:	1a80      	subs	r0, r0, r2
 801dcd6:	bd10      	pop	{r4, pc}
 801dcd8:	2800      	cmp	r0, #0
 801dcda:	d1f3      	bne.n	801dcc4 <strncmp+0xa>
 801dcdc:	e7fa      	b.n	801dcd4 <strncmp+0x1a>
 801dcde:	4610      	mov	r0, r2
 801dce0:	e7f9      	b.n	801dcd6 <strncmp+0x1c>

0801dce2 <strncpy>:
 801dce2:	b510      	push	{r4, lr}
 801dce4:	3901      	subs	r1, #1
 801dce6:	4603      	mov	r3, r0
 801dce8:	b132      	cbz	r2, 801dcf8 <strncpy+0x16>
 801dcea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dcee:	f803 4b01 	strb.w	r4, [r3], #1
 801dcf2:	3a01      	subs	r2, #1
 801dcf4:	2c00      	cmp	r4, #0
 801dcf6:	d1f7      	bne.n	801dce8 <strncpy+0x6>
 801dcf8:	441a      	add	r2, r3
 801dcfa:	2100      	movs	r1, #0
 801dcfc:	4293      	cmp	r3, r2
 801dcfe:	d100      	bne.n	801dd02 <strncpy+0x20>
 801dd00:	bd10      	pop	{r4, pc}
 801dd02:	f803 1b01 	strb.w	r1, [r3], #1
 801dd06:	e7f9      	b.n	801dcfc <strncpy+0x1a>

0801dd08 <strstr>:
 801dd08:	780a      	ldrb	r2, [r1, #0]
 801dd0a:	b570      	push	{r4, r5, r6, lr}
 801dd0c:	b96a      	cbnz	r2, 801dd2a <strstr+0x22>
 801dd0e:	bd70      	pop	{r4, r5, r6, pc}
 801dd10:	429a      	cmp	r2, r3
 801dd12:	d109      	bne.n	801dd28 <strstr+0x20>
 801dd14:	460c      	mov	r4, r1
 801dd16:	4605      	mov	r5, r0
 801dd18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d0f6      	beq.n	801dd0e <strstr+0x6>
 801dd20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801dd24:	429e      	cmp	r6, r3
 801dd26:	d0f7      	beq.n	801dd18 <strstr+0x10>
 801dd28:	3001      	adds	r0, #1
 801dd2a:	7803      	ldrb	r3, [r0, #0]
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d1ef      	bne.n	801dd10 <strstr+0x8>
 801dd30:	4618      	mov	r0, r3
 801dd32:	e7ec      	b.n	801dd0e <strstr+0x6>

0801dd34 <_write_r>:
 801dd34:	b538      	push	{r3, r4, r5, lr}
 801dd36:	4d07      	ldr	r5, [pc, #28]	; (801dd54 <_write_r+0x20>)
 801dd38:	4604      	mov	r4, r0
 801dd3a:	4608      	mov	r0, r1
 801dd3c:	4611      	mov	r1, r2
 801dd3e:	2200      	movs	r2, #0
 801dd40:	602a      	str	r2, [r5, #0]
 801dd42:	461a      	mov	r2, r3
 801dd44:	f000 fd04 	bl	801e750 <_write>
 801dd48:	1c43      	adds	r3, r0, #1
 801dd4a:	d102      	bne.n	801dd52 <_write_r+0x1e>
 801dd4c:	682b      	ldr	r3, [r5, #0]
 801dd4e:	b103      	cbz	r3, 801dd52 <_write_r+0x1e>
 801dd50:	6023      	str	r3, [r4, #0]
 801dd52:	bd38      	pop	{r3, r4, r5, pc}
 801dd54:	200000b8 	.word	0x200000b8

0801dd58 <_close_r>:
 801dd58:	b538      	push	{r3, r4, r5, lr}
 801dd5a:	4d06      	ldr	r5, [pc, #24]	; (801dd74 <_close_r+0x1c>)
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	4604      	mov	r4, r0
 801dd60:	4608      	mov	r0, r1
 801dd62:	602b      	str	r3, [r5, #0]
 801dd64:	f000 fcbe 	bl	801e6e4 <_close>
 801dd68:	1c43      	adds	r3, r0, #1
 801dd6a:	d102      	bne.n	801dd72 <_close_r+0x1a>
 801dd6c:	682b      	ldr	r3, [r5, #0]
 801dd6e:	b103      	cbz	r3, 801dd72 <_close_r+0x1a>
 801dd70:	6023      	str	r3, [r4, #0]
 801dd72:	bd38      	pop	{r3, r4, r5, pc}
 801dd74:	200000b8 	.word	0x200000b8

0801dd78 <_lseek_r>:
 801dd78:	b538      	push	{r3, r4, r5, lr}
 801dd7a:	4d07      	ldr	r5, [pc, #28]	; (801dd98 <_lseek_r+0x20>)
 801dd7c:	4604      	mov	r4, r0
 801dd7e:	4608      	mov	r0, r1
 801dd80:	4611      	mov	r1, r2
 801dd82:	2200      	movs	r2, #0
 801dd84:	602a      	str	r2, [r5, #0]
 801dd86:	461a      	mov	r2, r3
 801dd88:	f000 fcc4 	bl	801e714 <_lseek>
 801dd8c:	1c43      	adds	r3, r0, #1
 801dd8e:	d102      	bne.n	801dd96 <_lseek_r+0x1e>
 801dd90:	682b      	ldr	r3, [r5, #0]
 801dd92:	b103      	cbz	r3, 801dd96 <_lseek_r+0x1e>
 801dd94:	6023      	str	r3, [r4, #0]
 801dd96:	bd38      	pop	{r3, r4, r5, pc}
 801dd98:	200000b8 	.word	0x200000b8

0801dd9c <__malloc_lock>:
 801dd9c:	4801      	ldr	r0, [pc, #4]	; (801dda4 <__malloc_lock+0x8>)
 801dd9e:	f7ff bddf 	b.w	801d960 <__retarget_lock_acquire_recursive>
 801dda2:	bf00      	nop
 801dda4:	200000ac 	.word	0x200000ac

0801dda8 <__malloc_unlock>:
 801dda8:	4801      	ldr	r0, [pc, #4]	; (801ddb0 <__malloc_unlock+0x8>)
 801ddaa:	f7ff bdda 	b.w	801d962 <__retarget_lock_release_recursive>
 801ddae:	bf00      	nop
 801ddb0:	200000ac 	.word	0x200000ac

0801ddb4 <__sfputc_r>:
 801ddb4:	6893      	ldr	r3, [r2, #8]
 801ddb6:	3b01      	subs	r3, #1
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	b410      	push	{r4}
 801ddbc:	6093      	str	r3, [r2, #8]
 801ddbe:	da07      	bge.n	801ddd0 <__sfputc_r+0x1c>
 801ddc0:	6994      	ldr	r4, [r2, #24]
 801ddc2:	42a3      	cmp	r3, r4
 801ddc4:	db01      	blt.n	801ddca <__sfputc_r+0x16>
 801ddc6:	290a      	cmp	r1, #10
 801ddc8:	d102      	bne.n	801ddd0 <__sfputc_r+0x1c>
 801ddca:	bc10      	pop	{r4}
 801ddcc:	f000 baf0 	b.w	801e3b0 <__swbuf_r>
 801ddd0:	6813      	ldr	r3, [r2, #0]
 801ddd2:	1c58      	adds	r0, r3, #1
 801ddd4:	6010      	str	r0, [r2, #0]
 801ddd6:	7019      	strb	r1, [r3, #0]
 801ddd8:	4608      	mov	r0, r1
 801ddda:	bc10      	pop	{r4}
 801dddc:	4770      	bx	lr

0801ddde <__sfputs_r>:
 801ddde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dde0:	4606      	mov	r6, r0
 801dde2:	460f      	mov	r7, r1
 801dde4:	4614      	mov	r4, r2
 801dde6:	18d5      	adds	r5, r2, r3
 801dde8:	42ac      	cmp	r4, r5
 801ddea:	d101      	bne.n	801ddf0 <__sfputs_r+0x12>
 801ddec:	2000      	movs	r0, #0
 801ddee:	e007      	b.n	801de00 <__sfputs_r+0x22>
 801ddf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddf4:	463a      	mov	r2, r7
 801ddf6:	4630      	mov	r0, r6
 801ddf8:	f7ff ffdc 	bl	801ddb4 <__sfputc_r>
 801ddfc:	1c43      	adds	r3, r0, #1
 801ddfe:	d1f3      	bne.n	801dde8 <__sfputs_r+0xa>
 801de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801de04 <_vfiprintf_r>:
 801de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de08:	460d      	mov	r5, r1
 801de0a:	b09d      	sub	sp, #116	; 0x74
 801de0c:	4614      	mov	r4, r2
 801de0e:	4698      	mov	r8, r3
 801de10:	4606      	mov	r6, r0
 801de12:	b118      	cbz	r0, 801de1c <_vfiprintf_r+0x18>
 801de14:	6983      	ldr	r3, [r0, #24]
 801de16:	b90b      	cbnz	r3, 801de1c <_vfiprintf_r+0x18>
 801de18:	f7ff fd04 	bl	801d824 <__sinit>
 801de1c:	4b89      	ldr	r3, [pc, #548]	; (801e044 <_vfiprintf_r+0x240>)
 801de1e:	429d      	cmp	r5, r3
 801de20:	d11b      	bne.n	801de5a <_vfiprintf_r+0x56>
 801de22:	6875      	ldr	r5, [r6, #4]
 801de24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de26:	07d9      	lsls	r1, r3, #31
 801de28:	d405      	bmi.n	801de36 <_vfiprintf_r+0x32>
 801de2a:	89ab      	ldrh	r3, [r5, #12]
 801de2c:	059a      	lsls	r2, r3, #22
 801de2e:	d402      	bmi.n	801de36 <_vfiprintf_r+0x32>
 801de30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de32:	f7ff fd95 	bl	801d960 <__retarget_lock_acquire_recursive>
 801de36:	89ab      	ldrh	r3, [r5, #12]
 801de38:	071b      	lsls	r3, r3, #28
 801de3a:	d501      	bpl.n	801de40 <_vfiprintf_r+0x3c>
 801de3c:	692b      	ldr	r3, [r5, #16]
 801de3e:	b9eb      	cbnz	r3, 801de7c <_vfiprintf_r+0x78>
 801de40:	4629      	mov	r1, r5
 801de42:	4630      	mov	r0, r6
 801de44:	f000 fb06 	bl	801e454 <__swsetup_r>
 801de48:	b1c0      	cbz	r0, 801de7c <_vfiprintf_r+0x78>
 801de4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de4c:	07dc      	lsls	r4, r3, #31
 801de4e:	d50e      	bpl.n	801de6e <_vfiprintf_r+0x6a>
 801de50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801de54:	b01d      	add	sp, #116	; 0x74
 801de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de5a:	4b7b      	ldr	r3, [pc, #492]	; (801e048 <_vfiprintf_r+0x244>)
 801de5c:	429d      	cmp	r5, r3
 801de5e:	d101      	bne.n	801de64 <_vfiprintf_r+0x60>
 801de60:	68b5      	ldr	r5, [r6, #8]
 801de62:	e7df      	b.n	801de24 <_vfiprintf_r+0x20>
 801de64:	4b79      	ldr	r3, [pc, #484]	; (801e04c <_vfiprintf_r+0x248>)
 801de66:	429d      	cmp	r5, r3
 801de68:	bf08      	it	eq
 801de6a:	68f5      	ldreq	r5, [r6, #12]
 801de6c:	e7da      	b.n	801de24 <_vfiprintf_r+0x20>
 801de6e:	89ab      	ldrh	r3, [r5, #12]
 801de70:	0598      	lsls	r0, r3, #22
 801de72:	d4ed      	bmi.n	801de50 <_vfiprintf_r+0x4c>
 801de74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de76:	f7ff fd74 	bl	801d962 <__retarget_lock_release_recursive>
 801de7a:	e7e9      	b.n	801de50 <_vfiprintf_r+0x4c>
 801de7c:	2300      	movs	r3, #0
 801de7e:	9309      	str	r3, [sp, #36]	; 0x24
 801de80:	2320      	movs	r3, #32
 801de82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801de86:	f8cd 800c 	str.w	r8, [sp, #12]
 801de8a:	2330      	movs	r3, #48	; 0x30
 801de8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e050 <_vfiprintf_r+0x24c>
 801de90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801de94:	f04f 0901 	mov.w	r9, #1
 801de98:	4623      	mov	r3, r4
 801de9a:	469a      	mov	sl, r3
 801de9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dea0:	b10a      	cbz	r2, 801dea6 <_vfiprintf_r+0xa2>
 801dea2:	2a25      	cmp	r2, #37	; 0x25
 801dea4:	d1f9      	bne.n	801de9a <_vfiprintf_r+0x96>
 801dea6:	ebba 0b04 	subs.w	fp, sl, r4
 801deaa:	d00b      	beq.n	801dec4 <_vfiprintf_r+0xc0>
 801deac:	465b      	mov	r3, fp
 801deae:	4622      	mov	r2, r4
 801deb0:	4629      	mov	r1, r5
 801deb2:	4630      	mov	r0, r6
 801deb4:	f7ff ff93 	bl	801ddde <__sfputs_r>
 801deb8:	3001      	adds	r0, #1
 801deba:	f000 80aa 	beq.w	801e012 <_vfiprintf_r+0x20e>
 801debe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dec0:	445a      	add	r2, fp
 801dec2:	9209      	str	r2, [sp, #36]	; 0x24
 801dec4:	f89a 3000 	ldrb.w	r3, [sl]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	f000 80a2 	beq.w	801e012 <_vfiprintf_r+0x20e>
 801dece:	2300      	movs	r3, #0
 801ded0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ded4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ded8:	f10a 0a01 	add.w	sl, sl, #1
 801dedc:	9304      	str	r3, [sp, #16]
 801dede:	9307      	str	r3, [sp, #28]
 801dee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dee4:	931a      	str	r3, [sp, #104]	; 0x68
 801dee6:	4654      	mov	r4, sl
 801dee8:	2205      	movs	r2, #5
 801deea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801deee:	4858      	ldr	r0, [pc, #352]	; (801e050 <_vfiprintf_r+0x24c>)
 801def0:	f000 fb86 	bl	801e600 <memchr>
 801def4:	9a04      	ldr	r2, [sp, #16]
 801def6:	b9d8      	cbnz	r0, 801df30 <_vfiprintf_r+0x12c>
 801def8:	06d1      	lsls	r1, r2, #27
 801defa:	bf44      	itt	mi
 801defc:	2320      	movmi	r3, #32
 801defe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df02:	0713      	lsls	r3, r2, #28
 801df04:	bf44      	itt	mi
 801df06:	232b      	movmi	r3, #43	; 0x2b
 801df08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df0c:	f89a 3000 	ldrb.w	r3, [sl]
 801df10:	2b2a      	cmp	r3, #42	; 0x2a
 801df12:	d015      	beq.n	801df40 <_vfiprintf_r+0x13c>
 801df14:	9a07      	ldr	r2, [sp, #28]
 801df16:	4654      	mov	r4, sl
 801df18:	2000      	movs	r0, #0
 801df1a:	f04f 0c0a 	mov.w	ip, #10
 801df1e:	4621      	mov	r1, r4
 801df20:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df24:	3b30      	subs	r3, #48	; 0x30
 801df26:	2b09      	cmp	r3, #9
 801df28:	d94e      	bls.n	801dfc8 <_vfiprintf_r+0x1c4>
 801df2a:	b1b0      	cbz	r0, 801df5a <_vfiprintf_r+0x156>
 801df2c:	9207      	str	r2, [sp, #28]
 801df2e:	e014      	b.n	801df5a <_vfiprintf_r+0x156>
 801df30:	eba0 0308 	sub.w	r3, r0, r8
 801df34:	fa09 f303 	lsl.w	r3, r9, r3
 801df38:	4313      	orrs	r3, r2
 801df3a:	9304      	str	r3, [sp, #16]
 801df3c:	46a2      	mov	sl, r4
 801df3e:	e7d2      	b.n	801dee6 <_vfiprintf_r+0xe2>
 801df40:	9b03      	ldr	r3, [sp, #12]
 801df42:	1d19      	adds	r1, r3, #4
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	9103      	str	r1, [sp, #12]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	bfbb      	ittet	lt
 801df4c:	425b      	neglt	r3, r3
 801df4e:	f042 0202 	orrlt.w	r2, r2, #2
 801df52:	9307      	strge	r3, [sp, #28]
 801df54:	9307      	strlt	r3, [sp, #28]
 801df56:	bfb8      	it	lt
 801df58:	9204      	strlt	r2, [sp, #16]
 801df5a:	7823      	ldrb	r3, [r4, #0]
 801df5c:	2b2e      	cmp	r3, #46	; 0x2e
 801df5e:	d10c      	bne.n	801df7a <_vfiprintf_r+0x176>
 801df60:	7863      	ldrb	r3, [r4, #1]
 801df62:	2b2a      	cmp	r3, #42	; 0x2a
 801df64:	d135      	bne.n	801dfd2 <_vfiprintf_r+0x1ce>
 801df66:	9b03      	ldr	r3, [sp, #12]
 801df68:	1d1a      	adds	r2, r3, #4
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	9203      	str	r2, [sp, #12]
 801df6e:	2b00      	cmp	r3, #0
 801df70:	bfb8      	it	lt
 801df72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801df76:	3402      	adds	r4, #2
 801df78:	9305      	str	r3, [sp, #20]
 801df7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801e054 <_vfiprintf_r+0x250>
 801df7e:	7821      	ldrb	r1, [r4, #0]
 801df80:	2203      	movs	r2, #3
 801df82:	4650      	mov	r0, sl
 801df84:	f000 fb3c 	bl	801e600 <memchr>
 801df88:	b140      	cbz	r0, 801df9c <_vfiprintf_r+0x198>
 801df8a:	2340      	movs	r3, #64	; 0x40
 801df8c:	eba0 000a 	sub.w	r0, r0, sl
 801df90:	fa03 f000 	lsl.w	r0, r3, r0
 801df94:	9b04      	ldr	r3, [sp, #16]
 801df96:	4303      	orrs	r3, r0
 801df98:	3401      	adds	r4, #1
 801df9a:	9304      	str	r3, [sp, #16]
 801df9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfa0:	482d      	ldr	r0, [pc, #180]	; (801e058 <_vfiprintf_r+0x254>)
 801dfa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dfa6:	2206      	movs	r2, #6
 801dfa8:	f000 fb2a 	bl	801e600 <memchr>
 801dfac:	2800      	cmp	r0, #0
 801dfae:	d03f      	beq.n	801e030 <_vfiprintf_r+0x22c>
 801dfb0:	4b2a      	ldr	r3, [pc, #168]	; (801e05c <_vfiprintf_r+0x258>)
 801dfb2:	bb1b      	cbnz	r3, 801dffc <_vfiprintf_r+0x1f8>
 801dfb4:	9b03      	ldr	r3, [sp, #12]
 801dfb6:	3307      	adds	r3, #7
 801dfb8:	f023 0307 	bic.w	r3, r3, #7
 801dfbc:	3308      	adds	r3, #8
 801dfbe:	9303      	str	r3, [sp, #12]
 801dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfc2:	443b      	add	r3, r7
 801dfc4:	9309      	str	r3, [sp, #36]	; 0x24
 801dfc6:	e767      	b.n	801de98 <_vfiprintf_r+0x94>
 801dfc8:	fb0c 3202 	mla	r2, ip, r2, r3
 801dfcc:	460c      	mov	r4, r1
 801dfce:	2001      	movs	r0, #1
 801dfd0:	e7a5      	b.n	801df1e <_vfiprintf_r+0x11a>
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	3401      	adds	r4, #1
 801dfd6:	9305      	str	r3, [sp, #20]
 801dfd8:	4619      	mov	r1, r3
 801dfda:	f04f 0c0a 	mov.w	ip, #10
 801dfde:	4620      	mov	r0, r4
 801dfe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dfe4:	3a30      	subs	r2, #48	; 0x30
 801dfe6:	2a09      	cmp	r2, #9
 801dfe8:	d903      	bls.n	801dff2 <_vfiprintf_r+0x1ee>
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d0c5      	beq.n	801df7a <_vfiprintf_r+0x176>
 801dfee:	9105      	str	r1, [sp, #20]
 801dff0:	e7c3      	b.n	801df7a <_vfiprintf_r+0x176>
 801dff2:	fb0c 2101 	mla	r1, ip, r1, r2
 801dff6:	4604      	mov	r4, r0
 801dff8:	2301      	movs	r3, #1
 801dffa:	e7f0      	b.n	801dfde <_vfiprintf_r+0x1da>
 801dffc:	ab03      	add	r3, sp, #12
 801dffe:	9300      	str	r3, [sp, #0]
 801e000:	462a      	mov	r2, r5
 801e002:	4b17      	ldr	r3, [pc, #92]	; (801e060 <_vfiprintf_r+0x25c>)
 801e004:	a904      	add	r1, sp, #16
 801e006:	4630      	mov	r0, r6
 801e008:	f3af 8000 	nop.w
 801e00c:	4607      	mov	r7, r0
 801e00e:	1c78      	adds	r0, r7, #1
 801e010:	d1d6      	bne.n	801dfc0 <_vfiprintf_r+0x1bc>
 801e012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e014:	07d9      	lsls	r1, r3, #31
 801e016:	d405      	bmi.n	801e024 <_vfiprintf_r+0x220>
 801e018:	89ab      	ldrh	r3, [r5, #12]
 801e01a:	059a      	lsls	r2, r3, #22
 801e01c:	d402      	bmi.n	801e024 <_vfiprintf_r+0x220>
 801e01e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e020:	f7ff fc9f 	bl	801d962 <__retarget_lock_release_recursive>
 801e024:	89ab      	ldrh	r3, [r5, #12]
 801e026:	065b      	lsls	r3, r3, #25
 801e028:	f53f af12 	bmi.w	801de50 <_vfiprintf_r+0x4c>
 801e02c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e02e:	e711      	b.n	801de54 <_vfiprintf_r+0x50>
 801e030:	ab03      	add	r3, sp, #12
 801e032:	9300      	str	r3, [sp, #0]
 801e034:	462a      	mov	r2, r5
 801e036:	4b0a      	ldr	r3, [pc, #40]	; (801e060 <_vfiprintf_r+0x25c>)
 801e038:	a904      	add	r1, sp, #16
 801e03a:	4630      	mov	r0, r6
 801e03c:	f000 f880 	bl	801e140 <_printf_i>
 801e040:	e7e4      	b.n	801e00c <_vfiprintf_r+0x208>
 801e042:	bf00      	nop
 801e044:	0802ac50 	.word	0x0802ac50
 801e048:	0802ac70 	.word	0x0802ac70
 801e04c:	0802ac30 	.word	0x0802ac30
 801e050:	0802ac94 	.word	0x0802ac94
 801e054:	0802ac9a 	.word	0x0802ac9a
 801e058:	0802ac9e 	.word	0x0802ac9e
 801e05c:	00000000 	.word	0x00000000
 801e060:	0801dddf 	.word	0x0801dddf

0801e064 <_printf_common>:
 801e064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e068:	4616      	mov	r6, r2
 801e06a:	4699      	mov	r9, r3
 801e06c:	688a      	ldr	r2, [r1, #8]
 801e06e:	690b      	ldr	r3, [r1, #16]
 801e070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e074:	4293      	cmp	r3, r2
 801e076:	bfb8      	it	lt
 801e078:	4613      	movlt	r3, r2
 801e07a:	6033      	str	r3, [r6, #0]
 801e07c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e080:	4607      	mov	r7, r0
 801e082:	460c      	mov	r4, r1
 801e084:	b10a      	cbz	r2, 801e08a <_printf_common+0x26>
 801e086:	3301      	adds	r3, #1
 801e088:	6033      	str	r3, [r6, #0]
 801e08a:	6823      	ldr	r3, [r4, #0]
 801e08c:	0699      	lsls	r1, r3, #26
 801e08e:	bf42      	ittt	mi
 801e090:	6833      	ldrmi	r3, [r6, #0]
 801e092:	3302      	addmi	r3, #2
 801e094:	6033      	strmi	r3, [r6, #0]
 801e096:	6825      	ldr	r5, [r4, #0]
 801e098:	f015 0506 	ands.w	r5, r5, #6
 801e09c:	d106      	bne.n	801e0ac <_printf_common+0x48>
 801e09e:	f104 0a19 	add.w	sl, r4, #25
 801e0a2:	68e3      	ldr	r3, [r4, #12]
 801e0a4:	6832      	ldr	r2, [r6, #0]
 801e0a6:	1a9b      	subs	r3, r3, r2
 801e0a8:	42ab      	cmp	r3, r5
 801e0aa:	dc26      	bgt.n	801e0fa <_printf_common+0x96>
 801e0ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e0b0:	1e13      	subs	r3, r2, #0
 801e0b2:	6822      	ldr	r2, [r4, #0]
 801e0b4:	bf18      	it	ne
 801e0b6:	2301      	movne	r3, #1
 801e0b8:	0692      	lsls	r2, r2, #26
 801e0ba:	d42b      	bmi.n	801e114 <_printf_common+0xb0>
 801e0bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e0c0:	4649      	mov	r1, r9
 801e0c2:	4638      	mov	r0, r7
 801e0c4:	47c0      	blx	r8
 801e0c6:	3001      	adds	r0, #1
 801e0c8:	d01e      	beq.n	801e108 <_printf_common+0xa4>
 801e0ca:	6823      	ldr	r3, [r4, #0]
 801e0cc:	68e5      	ldr	r5, [r4, #12]
 801e0ce:	6832      	ldr	r2, [r6, #0]
 801e0d0:	f003 0306 	and.w	r3, r3, #6
 801e0d4:	2b04      	cmp	r3, #4
 801e0d6:	bf08      	it	eq
 801e0d8:	1aad      	subeq	r5, r5, r2
 801e0da:	68a3      	ldr	r3, [r4, #8]
 801e0dc:	6922      	ldr	r2, [r4, #16]
 801e0de:	bf0c      	ite	eq
 801e0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e0e4:	2500      	movne	r5, #0
 801e0e6:	4293      	cmp	r3, r2
 801e0e8:	bfc4      	itt	gt
 801e0ea:	1a9b      	subgt	r3, r3, r2
 801e0ec:	18ed      	addgt	r5, r5, r3
 801e0ee:	2600      	movs	r6, #0
 801e0f0:	341a      	adds	r4, #26
 801e0f2:	42b5      	cmp	r5, r6
 801e0f4:	d11a      	bne.n	801e12c <_printf_common+0xc8>
 801e0f6:	2000      	movs	r0, #0
 801e0f8:	e008      	b.n	801e10c <_printf_common+0xa8>
 801e0fa:	2301      	movs	r3, #1
 801e0fc:	4652      	mov	r2, sl
 801e0fe:	4649      	mov	r1, r9
 801e100:	4638      	mov	r0, r7
 801e102:	47c0      	blx	r8
 801e104:	3001      	adds	r0, #1
 801e106:	d103      	bne.n	801e110 <_printf_common+0xac>
 801e108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e110:	3501      	adds	r5, #1
 801e112:	e7c6      	b.n	801e0a2 <_printf_common+0x3e>
 801e114:	18e1      	adds	r1, r4, r3
 801e116:	1c5a      	adds	r2, r3, #1
 801e118:	2030      	movs	r0, #48	; 0x30
 801e11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e11e:	4422      	add	r2, r4
 801e120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e128:	3302      	adds	r3, #2
 801e12a:	e7c7      	b.n	801e0bc <_printf_common+0x58>
 801e12c:	2301      	movs	r3, #1
 801e12e:	4622      	mov	r2, r4
 801e130:	4649      	mov	r1, r9
 801e132:	4638      	mov	r0, r7
 801e134:	47c0      	blx	r8
 801e136:	3001      	adds	r0, #1
 801e138:	d0e6      	beq.n	801e108 <_printf_common+0xa4>
 801e13a:	3601      	adds	r6, #1
 801e13c:	e7d9      	b.n	801e0f2 <_printf_common+0x8e>
	...

0801e140 <_printf_i>:
 801e140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e144:	7e0f      	ldrb	r7, [r1, #24]
 801e146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e148:	2f78      	cmp	r7, #120	; 0x78
 801e14a:	4691      	mov	r9, r2
 801e14c:	4680      	mov	r8, r0
 801e14e:	460c      	mov	r4, r1
 801e150:	469a      	mov	sl, r3
 801e152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e156:	d807      	bhi.n	801e168 <_printf_i+0x28>
 801e158:	2f62      	cmp	r7, #98	; 0x62
 801e15a:	d80a      	bhi.n	801e172 <_printf_i+0x32>
 801e15c:	2f00      	cmp	r7, #0
 801e15e:	f000 80d8 	beq.w	801e312 <_printf_i+0x1d2>
 801e162:	2f58      	cmp	r7, #88	; 0x58
 801e164:	f000 80a3 	beq.w	801e2ae <_printf_i+0x16e>
 801e168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e170:	e03a      	b.n	801e1e8 <_printf_i+0xa8>
 801e172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e176:	2b15      	cmp	r3, #21
 801e178:	d8f6      	bhi.n	801e168 <_printf_i+0x28>
 801e17a:	a101      	add	r1, pc, #4	; (adr r1, 801e180 <_printf_i+0x40>)
 801e17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e180:	0801e1d9 	.word	0x0801e1d9
 801e184:	0801e1ed 	.word	0x0801e1ed
 801e188:	0801e169 	.word	0x0801e169
 801e18c:	0801e169 	.word	0x0801e169
 801e190:	0801e169 	.word	0x0801e169
 801e194:	0801e169 	.word	0x0801e169
 801e198:	0801e1ed 	.word	0x0801e1ed
 801e19c:	0801e169 	.word	0x0801e169
 801e1a0:	0801e169 	.word	0x0801e169
 801e1a4:	0801e169 	.word	0x0801e169
 801e1a8:	0801e169 	.word	0x0801e169
 801e1ac:	0801e2f9 	.word	0x0801e2f9
 801e1b0:	0801e21d 	.word	0x0801e21d
 801e1b4:	0801e2db 	.word	0x0801e2db
 801e1b8:	0801e169 	.word	0x0801e169
 801e1bc:	0801e169 	.word	0x0801e169
 801e1c0:	0801e31b 	.word	0x0801e31b
 801e1c4:	0801e169 	.word	0x0801e169
 801e1c8:	0801e21d 	.word	0x0801e21d
 801e1cc:	0801e169 	.word	0x0801e169
 801e1d0:	0801e169 	.word	0x0801e169
 801e1d4:	0801e2e3 	.word	0x0801e2e3
 801e1d8:	682b      	ldr	r3, [r5, #0]
 801e1da:	1d1a      	adds	r2, r3, #4
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	602a      	str	r2, [r5, #0]
 801e1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e1e8:	2301      	movs	r3, #1
 801e1ea:	e0a3      	b.n	801e334 <_printf_i+0x1f4>
 801e1ec:	6820      	ldr	r0, [r4, #0]
 801e1ee:	6829      	ldr	r1, [r5, #0]
 801e1f0:	0606      	lsls	r6, r0, #24
 801e1f2:	f101 0304 	add.w	r3, r1, #4
 801e1f6:	d50a      	bpl.n	801e20e <_printf_i+0xce>
 801e1f8:	680e      	ldr	r6, [r1, #0]
 801e1fa:	602b      	str	r3, [r5, #0]
 801e1fc:	2e00      	cmp	r6, #0
 801e1fe:	da03      	bge.n	801e208 <_printf_i+0xc8>
 801e200:	232d      	movs	r3, #45	; 0x2d
 801e202:	4276      	negs	r6, r6
 801e204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e208:	485e      	ldr	r0, [pc, #376]	; (801e384 <_printf_i+0x244>)
 801e20a:	230a      	movs	r3, #10
 801e20c:	e019      	b.n	801e242 <_printf_i+0x102>
 801e20e:	680e      	ldr	r6, [r1, #0]
 801e210:	602b      	str	r3, [r5, #0]
 801e212:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e216:	bf18      	it	ne
 801e218:	b236      	sxthne	r6, r6
 801e21a:	e7ef      	b.n	801e1fc <_printf_i+0xbc>
 801e21c:	682b      	ldr	r3, [r5, #0]
 801e21e:	6820      	ldr	r0, [r4, #0]
 801e220:	1d19      	adds	r1, r3, #4
 801e222:	6029      	str	r1, [r5, #0]
 801e224:	0601      	lsls	r1, r0, #24
 801e226:	d501      	bpl.n	801e22c <_printf_i+0xec>
 801e228:	681e      	ldr	r6, [r3, #0]
 801e22a:	e002      	b.n	801e232 <_printf_i+0xf2>
 801e22c:	0646      	lsls	r6, r0, #25
 801e22e:	d5fb      	bpl.n	801e228 <_printf_i+0xe8>
 801e230:	881e      	ldrh	r6, [r3, #0]
 801e232:	4854      	ldr	r0, [pc, #336]	; (801e384 <_printf_i+0x244>)
 801e234:	2f6f      	cmp	r7, #111	; 0x6f
 801e236:	bf0c      	ite	eq
 801e238:	2308      	moveq	r3, #8
 801e23a:	230a      	movne	r3, #10
 801e23c:	2100      	movs	r1, #0
 801e23e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e242:	6865      	ldr	r5, [r4, #4]
 801e244:	60a5      	str	r5, [r4, #8]
 801e246:	2d00      	cmp	r5, #0
 801e248:	bfa2      	ittt	ge
 801e24a:	6821      	ldrge	r1, [r4, #0]
 801e24c:	f021 0104 	bicge.w	r1, r1, #4
 801e250:	6021      	strge	r1, [r4, #0]
 801e252:	b90e      	cbnz	r6, 801e258 <_printf_i+0x118>
 801e254:	2d00      	cmp	r5, #0
 801e256:	d04d      	beq.n	801e2f4 <_printf_i+0x1b4>
 801e258:	4615      	mov	r5, r2
 801e25a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e25e:	fb03 6711 	mls	r7, r3, r1, r6
 801e262:	5dc7      	ldrb	r7, [r0, r7]
 801e264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e268:	4637      	mov	r7, r6
 801e26a:	42bb      	cmp	r3, r7
 801e26c:	460e      	mov	r6, r1
 801e26e:	d9f4      	bls.n	801e25a <_printf_i+0x11a>
 801e270:	2b08      	cmp	r3, #8
 801e272:	d10b      	bne.n	801e28c <_printf_i+0x14c>
 801e274:	6823      	ldr	r3, [r4, #0]
 801e276:	07de      	lsls	r6, r3, #31
 801e278:	d508      	bpl.n	801e28c <_printf_i+0x14c>
 801e27a:	6923      	ldr	r3, [r4, #16]
 801e27c:	6861      	ldr	r1, [r4, #4]
 801e27e:	4299      	cmp	r1, r3
 801e280:	bfde      	ittt	le
 801e282:	2330      	movle	r3, #48	; 0x30
 801e284:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e288:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e28c:	1b52      	subs	r2, r2, r5
 801e28e:	6122      	str	r2, [r4, #16]
 801e290:	f8cd a000 	str.w	sl, [sp]
 801e294:	464b      	mov	r3, r9
 801e296:	aa03      	add	r2, sp, #12
 801e298:	4621      	mov	r1, r4
 801e29a:	4640      	mov	r0, r8
 801e29c:	f7ff fee2 	bl	801e064 <_printf_common>
 801e2a0:	3001      	adds	r0, #1
 801e2a2:	d14c      	bne.n	801e33e <_printf_i+0x1fe>
 801e2a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e2a8:	b004      	add	sp, #16
 801e2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2ae:	4835      	ldr	r0, [pc, #212]	; (801e384 <_printf_i+0x244>)
 801e2b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e2b4:	6829      	ldr	r1, [r5, #0]
 801e2b6:	6823      	ldr	r3, [r4, #0]
 801e2b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801e2bc:	6029      	str	r1, [r5, #0]
 801e2be:	061d      	lsls	r5, r3, #24
 801e2c0:	d514      	bpl.n	801e2ec <_printf_i+0x1ac>
 801e2c2:	07df      	lsls	r7, r3, #31
 801e2c4:	bf44      	itt	mi
 801e2c6:	f043 0320 	orrmi.w	r3, r3, #32
 801e2ca:	6023      	strmi	r3, [r4, #0]
 801e2cc:	b91e      	cbnz	r6, 801e2d6 <_printf_i+0x196>
 801e2ce:	6823      	ldr	r3, [r4, #0]
 801e2d0:	f023 0320 	bic.w	r3, r3, #32
 801e2d4:	6023      	str	r3, [r4, #0]
 801e2d6:	2310      	movs	r3, #16
 801e2d8:	e7b0      	b.n	801e23c <_printf_i+0xfc>
 801e2da:	6823      	ldr	r3, [r4, #0]
 801e2dc:	f043 0320 	orr.w	r3, r3, #32
 801e2e0:	6023      	str	r3, [r4, #0]
 801e2e2:	2378      	movs	r3, #120	; 0x78
 801e2e4:	4828      	ldr	r0, [pc, #160]	; (801e388 <_printf_i+0x248>)
 801e2e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e2ea:	e7e3      	b.n	801e2b4 <_printf_i+0x174>
 801e2ec:	0659      	lsls	r1, r3, #25
 801e2ee:	bf48      	it	mi
 801e2f0:	b2b6      	uxthmi	r6, r6
 801e2f2:	e7e6      	b.n	801e2c2 <_printf_i+0x182>
 801e2f4:	4615      	mov	r5, r2
 801e2f6:	e7bb      	b.n	801e270 <_printf_i+0x130>
 801e2f8:	682b      	ldr	r3, [r5, #0]
 801e2fa:	6826      	ldr	r6, [r4, #0]
 801e2fc:	6961      	ldr	r1, [r4, #20]
 801e2fe:	1d18      	adds	r0, r3, #4
 801e300:	6028      	str	r0, [r5, #0]
 801e302:	0635      	lsls	r5, r6, #24
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	d501      	bpl.n	801e30c <_printf_i+0x1cc>
 801e308:	6019      	str	r1, [r3, #0]
 801e30a:	e002      	b.n	801e312 <_printf_i+0x1d2>
 801e30c:	0670      	lsls	r0, r6, #25
 801e30e:	d5fb      	bpl.n	801e308 <_printf_i+0x1c8>
 801e310:	8019      	strh	r1, [r3, #0]
 801e312:	2300      	movs	r3, #0
 801e314:	6123      	str	r3, [r4, #16]
 801e316:	4615      	mov	r5, r2
 801e318:	e7ba      	b.n	801e290 <_printf_i+0x150>
 801e31a:	682b      	ldr	r3, [r5, #0]
 801e31c:	1d1a      	adds	r2, r3, #4
 801e31e:	602a      	str	r2, [r5, #0]
 801e320:	681d      	ldr	r5, [r3, #0]
 801e322:	6862      	ldr	r2, [r4, #4]
 801e324:	2100      	movs	r1, #0
 801e326:	4628      	mov	r0, r5
 801e328:	f000 f96a 	bl	801e600 <memchr>
 801e32c:	b108      	cbz	r0, 801e332 <_printf_i+0x1f2>
 801e32e:	1b40      	subs	r0, r0, r5
 801e330:	6060      	str	r0, [r4, #4]
 801e332:	6863      	ldr	r3, [r4, #4]
 801e334:	6123      	str	r3, [r4, #16]
 801e336:	2300      	movs	r3, #0
 801e338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e33c:	e7a8      	b.n	801e290 <_printf_i+0x150>
 801e33e:	6923      	ldr	r3, [r4, #16]
 801e340:	462a      	mov	r2, r5
 801e342:	4649      	mov	r1, r9
 801e344:	4640      	mov	r0, r8
 801e346:	47d0      	blx	sl
 801e348:	3001      	adds	r0, #1
 801e34a:	d0ab      	beq.n	801e2a4 <_printf_i+0x164>
 801e34c:	6823      	ldr	r3, [r4, #0]
 801e34e:	079b      	lsls	r3, r3, #30
 801e350:	d413      	bmi.n	801e37a <_printf_i+0x23a>
 801e352:	68e0      	ldr	r0, [r4, #12]
 801e354:	9b03      	ldr	r3, [sp, #12]
 801e356:	4298      	cmp	r0, r3
 801e358:	bfb8      	it	lt
 801e35a:	4618      	movlt	r0, r3
 801e35c:	e7a4      	b.n	801e2a8 <_printf_i+0x168>
 801e35e:	2301      	movs	r3, #1
 801e360:	4632      	mov	r2, r6
 801e362:	4649      	mov	r1, r9
 801e364:	4640      	mov	r0, r8
 801e366:	47d0      	blx	sl
 801e368:	3001      	adds	r0, #1
 801e36a:	d09b      	beq.n	801e2a4 <_printf_i+0x164>
 801e36c:	3501      	adds	r5, #1
 801e36e:	68e3      	ldr	r3, [r4, #12]
 801e370:	9903      	ldr	r1, [sp, #12]
 801e372:	1a5b      	subs	r3, r3, r1
 801e374:	42ab      	cmp	r3, r5
 801e376:	dcf2      	bgt.n	801e35e <_printf_i+0x21e>
 801e378:	e7eb      	b.n	801e352 <_printf_i+0x212>
 801e37a:	2500      	movs	r5, #0
 801e37c:	f104 0619 	add.w	r6, r4, #25
 801e380:	e7f5      	b.n	801e36e <_printf_i+0x22e>
 801e382:	bf00      	nop
 801e384:	0802aca5 	.word	0x0802aca5
 801e388:	0802acb6 	.word	0x0802acb6

0801e38c <_read_r>:
 801e38c:	b538      	push	{r3, r4, r5, lr}
 801e38e:	4d07      	ldr	r5, [pc, #28]	; (801e3ac <_read_r+0x20>)
 801e390:	4604      	mov	r4, r0
 801e392:	4608      	mov	r0, r1
 801e394:	4611      	mov	r1, r2
 801e396:	2200      	movs	r2, #0
 801e398:	602a      	str	r2, [r5, #0]
 801e39a:	461a      	mov	r2, r3
 801e39c:	f000 f9c2 	bl	801e724 <_read>
 801e3a0:	1c43      	adds	r3, r0, #1
 801e3a2:	d102      	bne.n	801e3aa <_read_r+0x1e>
 801e3a4:	682b      	ldr	r3, [r5, #0]
 801e3a6:	b103      	cbz	r3, 801e3aa <_read_r+0x1e>
 801e3a8:	6023      	str	r3, [r4, #0]
 801e3aa:	bd38      	pop	{r3, r4, r5, pc}
 801e3ac:	200000b8 	.word	0x200000b8

0801e3b0 <__swbuf_r>:
 801e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3b2:	460e      	mov	r6, r1
 801e3b4:	4614      	mov	r4, r2
 801e3b6:	4605      	mov	r5, r0
 801e3b8:	b118      	cbz	r0, 801e3c2 <__swbuf_r+0x12>
 801e3ba:	6983      	ldr	r3, [r0, #24]
 801e3bc:	b90b      	cbnz	r3, 801e3c2 <__swbuf_r+0x12>
 801e3be:	f7ff fa31 	bl	801d824 <__sinit>
 801e3c2:	4b21      	ldr	r3, [pc, #132]	; (801e448 <__swbuf_r+0x98>)
 801e3c4:	429c      	cmp	r4, r3
 801e3c6:	d12b      	bne.n	801e420 <__swbuf_r+0x70>
 801e3c8:	686c      	ldr	r4, [r5, #4]
 801e3ca:	69a3      	ldr	r3, [r4, #24]
 801e3cc:	60a3      	str	r3, [r4, #8]
 801e3ce:	89a3      	ldrh	r3, [r4, #12]
 801e3d0:	071a      	lsls	r2, r3, #28
 801e3d2:	d52f      	bpl.n	801e434 <__swbuf_r+0x84>
 801e3d4:	6923      	ldr	r3, [r4, #16]
 801e3d6:	b36b      	cbz	r3, 801e434 <__swbuf_r+0x84>
 801e3d8:	6923      	ldr	r3, [r4, #16]
 801e3da:	6820      	ldr	r0, [r4, #0]
 801e3dc:	1ac0      	subs	r0, r0, r3
 801e3de:	6963      	ldr	r3, [r4, #20]
 801e3e0:	b2f6      	uxtb	r6, r6
 801e3e2:	4283      	cmp	r3, r0
 801e3e4:	4637      	mov	r7, r6
 801e3e6:	dc04      	bgt.n	801e3f2 <__swbuf_r+0x42>
 801e3e8:	4621      	mov	r1, r4
 801e3ea:	4628      	mov	r0, r5
 801e3ec:	f7ff f986 	bl	801d6fc <_fflush_r>
 801e3f0:	bb30      	cbnz	r0, 801e440 <__swbuf_r+0x90>
 801e3f2:	68a3      	ldr	r3, [r4, #8]
 801e3f4:	3b01      	subs	r3, #1
 801e3f6:	60a3      	str	r3, [r4, #8]
 801e3f8:	6823      	ldr	r3, [r4, #0]
 801e3fa:	1c5a      	adds	r2, r3, #1
 801e3fc:	6022      	str	r2, [r4, #0]
 801e3fe:	701e      	strb	r6, [r3, #0]
 801e400:	6963      	ldr	r3, [r4, #20]
 801e402:	3001      	adds	r0, #1
 801e404:	4283      	cmp	r3, r0
 801e406:	d004      	beq.n	801e412 <__swbuf_r+0x62>
 801e408:	89a3      	ldrh	r3, [r4, #12]
 801e40a:	07db      	lsls	r3, r3, #31
 801e40c:	d506      	bpl.n	801e41c <__swbuf_r+0x6c>
 801e40e:	2e0a      	cmp	r6, #10
 801e410:	d104      	bne.n	801e41c <__swbuf_r+0x6c>
 801e412:	4621      	mov	r1, r4
 801e414:	4628      	mov	r0, r5
 801e416:	f7ff f971 	bl	801d6fc <_fflush_r>
 801e41a:	b988      	cbnz	r0, 801e440 <__swbuf_r+0x90>
 801e41c:	4638      	mov	r0, r7
 801e41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e420:	4b0a      	ldr	r3, [pc, #40]	; (801e44c <__swbuf_r+0x9c>)
 801e422:	429c      	cmp	r4, r3
 801e424:	d101      	bne.n	801e42a <__swbuf_r+0x7a>
 801e426:	68ac      	ldr	r4, [r5, #8]
 801e428:	e7cf      	b.n	801e3ca <__swbuf_r+0x1a>
 801e42a:	4b09      	ldr	r3, [pc, #36]	; (801e450 <__swbuf_r+0xa0>)
 801e42c:	429c      	cmp	r4, r3
 801e42e:	bf08      	it	eq
 801e430:	68ec      	ldreq	r4, [r5, #12]
 801e432:	e7ca      	b.n	801e3ca <__swbuf_r+0x1a>
 801e434:	4621      	mov	r1, r4
 801e436:	4628      	mov	r0, r5
 801e438:	f000 f80c 	bl	801e454 <__swsetup_r>
 801e43c:	2800      	cmp	r0, #0
 801e43e:	d0cb      	beq.n	801e3d8 <__swbuf_r+0x28>
 801e440:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e444:	e7ea      	b.n	801e41c <__swbuf_r+0x6c>
 801e446:	bf00      	nop
 801e448:	0802ac50 	.word	0x0802ac50
 801e44c:	0802ac70 	.word	0x0802ac70
 801e450:	0802ac30 	.word	0x0802ac30

0801e454 <__swsetup_r>:
 801e454:	4b32      	ldr	r3, [pc, #200]	; (801e520 <__swsetup_r+0xcc>)
 801e456:	b570      	push	{r4, r5, r6, lr}
 801e458:	681d      	ldr	r5, [r3, #0]
 801e45a:	4606      	mov	r6, r0
 801e45c:	460c      	mov	r4, r1
 801e45e:	b125      	cbz	r5, 801e46a <__swsetup_r+0x16>
 801e460:	69ab      	ldr	r3, [r5, #24]
 801e462:	b913      	cbnz	r3, 801e46a <__swsetup_r+0x16>
 801e464:	4628      	mov	r0, r5
 801e466:	f7ff f9dd 	bl	801d824 <__sinit>
 801e46a:	4b2e      	ldr	r3, [pc, #184]	; (801e524 <__swsetup_r+0xd0>)
 801e46c:	429c      	cmp	r4, r3
 801e46e:	d10f      	bne.n	801e490 <__swsetup_r+0x3c>
 801e470:	686c      	ldr	r4, [r5, #4]
 801e472:	89a3      	ldrh	r3, [r4, #12]
 801e474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e478:	0719      	lsls	r1, r3, #28
 801e47a:	d42c      	bmi.n	801e4d6 <__swsetup_r+0x82>
 801e47c:	06dd      	lsls	r5, r3, #27
 801e47e:	d411      	bmi.n	801e4a4 <__swsetup_r+0x50>
 801e480:	2309      	movs	r3, #9
 801e482:	6033      	str	r3, [r6, #0]
 801e484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e488:	81a3      	strh	r3, [r4, #12]
 801e48a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e48e:	e03e      	b.n	801e50e <__swsetup_r+0xba>
 801e490:	4b25      	ldr	r3, [pc, #148]	; (801e528 <__swsetup_r+0xd4>)
 801e492:	429c      	cmp	r4, r3
 801e494:	d101      	bne.n	801e49a <__swsetup_r+0x46>
 801e496:	68ac      	ldr	r4, [r5, #8]
 801e498:	e7eb      	b.n	801e472 <__swsetup_r+0x1e>
 801e49a:	4b24      	ldr	r3, [pc, #144]	; (801e52c <__swsetup_r+0xd8>)
 801e49c:	429c      	cmp	r4, r3
 801e49e:	bf08      	it	eq
 801e4a0:	68ec      	ldreq	r4, [r5, #12]
 801e4a2:	e7e6      	b.n	801e472 <__swsetup_r+0x1e>
 801e4a4:	0758      	lsls	r0, r3, #29
 801e4a6:	d512      	bpl.n	801e4ce <__swsetup_r+0x7a>
 801e4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e4aa:	b141      	cbz	r1, 801e4be <__swsetup_r+0x6a>
 801e4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e4b0:	4299      	cmp	r1, r3
 801e4b2:	d002      	beq.n	801e4ba <__swsetup_r+0x66>
 801e4b4:	4630      	mov	r0, r6
 801e4b6:	f7ff faa5 	bl	801da04 <_free_r>
 801e4ba:	2300      	movs	r3, #0
 801e4bc:	6363      	str	r3, [r4, #52]	; 0x34
 801e4be:	89a3      	ldrh	r3, [r4, #12]
 801e4c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e4c4:	81a3      	strh	r3, [r4, #12]
 801e4c6:	2300      	movs	r3, #0
 801e4c8:	6063      	str	r3, [r4, #4]
 801e4ca:	6923      	ldr	r3, [r4, #16]
 801e4cc:	6023      	str	r3, [r4, #0]
 801e4ce:	89a3      	ldrh	r3, [r4, #12]
 801e4d0:	f043 0308 	orr.w	r3, r3, #8
 801e4d4:	81a3      	strh	r3, [r4, #12]
 801e4d6:	6923      	ldr	r3, [r4, #16]
 801e4d8:	b94b      	cbnz	r3, 801e4ee <__swsetup_r+0x9a>
 801e4da:	89a3      	ldrh	r3, [r4, #12]
 801e4dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e4e4:	d003      	beq.n	801e4ee <__swsetup_r+0x9a>
 801e4e6:	4621      	mov	r1, r4
 801e4e8:	4630      	mov	r0, r6
 801e4ea:	f000 f847 	bl	801e57c <__smakebuf_r>
 801e4ee:	89a0      	ldrh	r0, [r4, #12]
 801e4f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e4f4:	f010 0301 	ands.w	r3, r0, #1
 801e4f8:	d00a      	beq.n	801e510 <__swsetup_r+0xbc>
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	60a3      	str	r3, [r4, #8]
 801e4fe:	6963      	ldr	r3, [r4, #20]
 801e500:	425b      	negs	r3, r3
 801e502:	61a3      	str	r3, [r4, #24]
 801e504:	6923      	ldr	r3, [r4, #16]
 801e506:	b943      	cbnz	r3, 801e51a <__swsetup_r+0xc6>
 801e508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e50c:	d1ba      	bne.n	801e484 <__swsetup_r+0x30>
 801e50e:	bd70      	pop	{r4, r5, r6, pc}
 801e510:	0781      	lsls	r1, r0, #30
 801e512:	bf58      	it	pl
 801e514:	6963      	ldrpl	r3, [r4, #20]
 801e516:	60a3      	str	r3, [r4, #8]
 801e518:	e7f4      	b.n	801e504 <__swsetup_r+0xb0>
 801e51a:	2000      	movs	r0, #0
 801e51c:	e7f7      	b.n	801e50e <__swsetup_r+0xba>
 801e51e:	bf00      	nop
 801e520:	20000000 	.word	0x20000000
 801e524:	0802ac50 	.word	0x0802ac50
 801e528:	0802ac70 	.word	0x0802ac70
 801e52c:	0802ac30 	.word	0x0802ac30

0801e530 <__swhatbuf_r>:
 801e530:	b570      	push	{r4, r5, r6, lr}
 801e532:	460e      	mov	r6, r1
 801e534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e538:	2900      	cmp	r1, #0
 801e53a:	b096      	sub	sp, #88	; 0x58
 801e53c:	4614      	mov	r4, r2
 801e53e:	461d      	mov	r5, r3
 801e540:	da08      	bge.n	801e554 <__swhatbuf_r+0x24>
 801e542:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e546:	2200      	movs	r2, #0
 801e548:	602a      	str	r2, [r5, #0]
 801e54a:	061a      	lsls	r2, r3, #24
 801e54c:	d410      	bmi.n	801e570 <__swhatbuf_r+0x40>
 801e54e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e552:	e00e      	b.n	801e572 <__swhatbuf_r+0x42>
 801e554:	466a      	mov	r2, sp
 801e556:	f000 f8a3 	bl	801e6a0 <_fstat_r>
 801e55a:	2800      	cmp	r0, #0
 801e55c:	dbf1      	blt.n	801e542 <__swhatbuf_r+0x12>
 801e55e:	9a01      	ldr	r2, [sp, #4]
 801e560:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e564:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e568:	425a      	negs	r2, r3
 801e56a:	415a      	adcs	r2, r3
 801e56c:	602a      	str	r2, [r5, #0]
 801e56e:	e7ee      	b.n	801e54e <__swhatbuf_r+0x1e>
 801e570:	2340      	movs	r3, #64	; 0x40
 801e572:	2000      	movs	r0, #0
 801e574:	6023      	str	r3, [r4, #0]
 801e576:	b016      	add	sp, #88	; 0x58
 801e578:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e57c <__smakebuf_r>:
 801e57c:	898b      	ldrh	r3, [r1, #12]
 801e57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e580:	079d      	lsls	r5, r3, #30
 801e582:	4606      	mov	r6, r0
 801e584:	460c      	mov	r4, r1
 801e586:	d507      	bpl.n	801e598 <__smakebuf_r+0x1c>
 801e588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e58c:	6023      	str	r3, [r4, #0]
 801e58e:	6123      	str	r3, [r4, #16]
 801e590:	2301      	movs	r3, #1
 801e592:	6163      	str	r3, [r4, #20]
 801e594:	b002      	add	sp, #8
 801e596:	bd70      	pop	{r4, r5, r6, pc}
 801e598:	ab01      	add	r3, sp, #4
 801e59a:	466a      	mov	r2, sp
 801e59c:	f7ff ffc8 	bl	801e530 <__swhatbuf_r>
 801e5a0:	9900      	ldr	r1, [sp, #0]
 801e5a2:	4605      	mov	r5, r0
 801e5a4:	4630      	mov	r0, r6
 801e5a6:	f7ff fa97 	bl	801dad8 <_malloc_r>
 801e5aa:	b948      	cbnz	r0, 801e5c0 <__smakebuf_r+0x44>
 801e5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5b0:	059a      	lsls	r2, r3, #22
 801e5b2:	d4ef      	bmi.n	801e594 <__smakebuf_r+0x18>
 801e5b4:	f023 0303 	bic.w	r3, r3, #3
 801e5b8:	f043 0302 	orr.w	r3, r3, #2
 801e5bc:	81a3      	strh	r3, [r4, #12]
 801e5be:	e7e3      	b.n	801e588 <__smakebuf_r+0xc>
 801e5c0:	4b0d      	ldr	r3, [pc, #52]	; (801e5f8 <__smakebuf_r+0x7c>)
 801e5c2:	62b3      	str	r3, [r6, #40]	; 0x28
 801e5c4:	89a3      	ldrh	r3, [r4, #12]
 801e5c6:	6020      	str	r0, [r4, #0]
 801e5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e5cc:	81a3      	strh	r3, [r4, #12]
 801e5ce:	9b00      	ldr	r3, [sp, #0]
 801e5d0:	6163      	str	r3, [r4, #20]
 801e5d2:	9b01      	ldr	r3, [sp, #4]
 801e5d4:	6120      	str	r0, [r4, #16]
 801e5d6:	b15b      	cbz	r3, 801e5f0 <__smakebuf_r+0x74>
 801e5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5dc:	4630      	mov	r0, r6
 801e5de:	f000 f871 	bl	801e6c4 <_isatty_r>
 801e5e2:	b128      	cbz	r0, 801e5f0 <__smakebuf_r+0x74>
 801e5e4:	89a3      	ldrh	r3, [r4, #12]
 801e5e6:	f023 0303 	bic.w	r3, r3, #3
 801e5ea:	f043 0301 	orr.w	r3, r3, #1
 801e5ee:	81a3      	strh	r3, [r4, #12]
 801e5f0:	89a0      	ldrh	r0, [r4, #12]
 801e5f2:	4305      	orrs	r5, r0
 801e5f4:	81a5      	strh	r5, [r4, #12]
 801e5f6:	e7cd      	b.n	801e594 <__smakebuf_r+0x18>
 801e5f8:	0801d7bd 	.word	0x0801d7bd
 801e5fc:	00000000 	.word	0x00000000

0801e600 <memchr>:
 801e600:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801e604:	2a10      	cmp	r2, #16
 801e606:	db2b      	blt.n	801e660 <memchr+0x60>
 801e608:	f010 0f07 	tst.w	r0, #7
 801e60c:	d008      	beq.n	801e620 <memchr+0x20>
 801e60e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e612:	3a01      	subs	r2, #1
 801e614:	428b      	cmp	r3, r1
 801e616:	d02d      	beq.n	801e674 <memchr+0x74>
 801e618:	f010 0f07 	tst.w	r0, #7
 801e61c:	b342      	cbz	r2, 801e670 <memchr+0x70>
 801e61e:	d1f6      	bne.n	801e60e <memchr+0xe>
 801e620:	b4f0      	push	{r4, r5, r6, r7}
 801e622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 801e626:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801e62a:	f022 0407 	bic.w	r4, r2, #7
 801e62e:	f07f 0700 	mvns.w	r7, #0
 801e632:	2300      	movs	r3, #0
 801e634:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 801e638:	3c08      	subs	r4, #8
 801e63a:	ea85 0501 	eor.w	r5, r5, r1
 801e63e:	ea86 0601 	eor.w	r6, r6, r1
 801e642:	fa85 f547 	uadd8	r5, r5, r7
 801e646:	faa3 f587 	sel	r5, r3, r7
 801e64a:	fa86 f647 	uadd8	r6, r6, r7
 801e64e:	faa5 f687 	sel	r6, r5, r7
 801e652:	b98e      	cbnz	r6, 801e678 <memchr+0x78>
 801e654:	d1ee      	bne.n	801e634 <memchr+0x34>
 801e656:	bcf0      	pop	{r4, r5, r6, r7}
 801e658:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801e65c:	f002 0207 	and.w	r2, r2, #7
 801e660:	b132      	cbz	r2, 801e670 <memchr+0x70>
 801e662:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e666:	3a01      	subs	r2, #1
 801e668:	ea83 0301 	eor.w	r3, r3, r1
 801e66c:	b113      	cbz	r3, 801e674 <memchr+0x74>
 801e66e:	d1f8      	bne.n	801e662 <memchr+0x62>
 801e670:	2000      	movs	r0, #0
 801e672:	4770      	bx	lr
 801e674:	3801      	subs	r0, #1
 801e676:	4770      	bx	lr
 801e678:	2d00      	cmp	r5, #0
 801e67a:	bf06      	itte	eq
 801e67c:	4635      	moveq	r5, r6
 801e67e:	3803      	subeq	r0, #3
 801e680:	3807      	subne	r0, #7
 801e682:	f015 0f01 	tst.w	r5, #1
 801e686:	d107      	bne.n	801e698 <memchr+0x98>
 801e688:	3001      	adds	r0, #1
 801e68a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801e68e:	bf02      	ittt	eq
 801e690:	3001      	addeq	r0, #1
 801e692:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 801e696:	3001      	addeq	r0, #1
 801e698:	bcf0      	pop	{r4, r5, r6, r7}
 801e69a:	3801      	subs	r0, #1
 801e69c:	4770      	bx	lr
 801e69e:	bf00      	nop

0801e6a0 <_fstat_r>:
 801e6a0:	b538      	push	{r3, r4, r5, lr}
 801e6a2:	4d07      	ldr	r5, [pc, #28]	; (801e6c0 <_fstat_r+0x20>)
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	4604      	mov	r4, r0
 801e6a8:	4608      	mov	r0, r1
 801e6aa:	4611      	mov	r1, r2
 801e6ac:	602b      	str	r3, [r5, #0]
 801e6ae:	f000 f821 	bl	801e6f4 <_fstat>
 801e6b2:	1c43      	adds	r3, r0, #1
 801e6b4:	d102      	bne.n	801e6bc <_fstat_r+0x1c>
 801e6b6:	682b      	ldr	r3, [r5, #0]
 801e6b8:	b103      	cbz	r3, 801e6bc <_fstat_r+0x1c>
 801e6ba:	6023      	str	r3, [r4, #0]
 801e6bc:	bd38      	pop	{r3, r4, r5, pc}
 801e6be:	bf00      	nop
 801e6c0:	200000b8 	.word	0x200000b8

0801e6c4 <_isatty_r>:
 801e6c4:	b538      	push	{r3, r4, r5, lr}
 801e6c6:	4d06      	ldr	r5, [pc, #24]	; (801e6e0 <_isatty_r+0x1c>)
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	4604      	mov	r4, r0
 801e6cc:	4608      	mov	r0, r1
 801e6ce:	602b      	str	r3, [r5, #0]
 801e6d0:	f000 f818 	bl	801e704 <_isatty>
 801e6d4:	1c43      	adds	r3, r0, #1
 801e6d6:	d102      	bne.n	801e6de <_isatty_r+0x1a>
 801e6d8:	682b      	ldr	r3, [r5, #0]
 801e6da:	b103      	cbz	r3, 801e6de <_isatty_r+0x1a>
 801e6dc:	6023      	str	r3, [r4, #0]
 801e6de:	bd38      	pop	{r3, r4, r5, pc}
 801e6e0:	200000b8 	.word	0x200000b8

0801e6e4 <_close>:
 801e6e4:	4b02      	ldr	r3, [pc, #8]	; (801e6f0 <_close+0xc>)
 801e6e6:	2258      	movs	r2, #88	; 0x58
 801e6e8:	601a      	str	r2, [r3, #0]
 801e6ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e6ee:	4770      	bx	lr
 801e6f0:	200000b8 	.word	0x200000b8

0801e6f4 <_fstat>:
 801e6f4:	4b02      	ldr	r3, [pc, #8]	; (801e700 <_fstat+0xc>)
 801e6f6:	2258      	movs	r2, #88	; 0x58
 801e6f8:	601a      	str	r2, [r3, #0]
 801e6fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e6fe:	4770      	bx	lr
 801e700:	200000b8 	.word	0x200000b8

0801e704 <_isatty>:
 801e704:	4b02      	ldr	r3, [pc, #8]	; (801e710 <_isatty+0xc>)
 801e706:	2258      	movs	r2, #88	; 0x58
 801e708:	601a      	str	r2, [r3, #0]
 801e70a:	2000      	movs	r0, #0
 801e70c:	4770      	bx	lr
 801e70e:	bf00      	nop
 801e710:	200000b8 	.word	0x200000b8

0801e714 <_lseek>:
 801e714:	4b02      	ldr	r3, [pc, #8]	; (801e720 <_lseek+0xc>)
 801e716:	2258      	movs	r2, #88	; 0x58
 801e718:	601a      	str	r2, [r3, #0]
 801e71a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e71e:	4770      	bx	lr
 801e720:	200000b8 	.word	0x200000b8

0801e724 <_read>:
 801e724:	4b02      	ldr	r3, [pc, #8]	; (801e730 <_read+0xc>)
 801e726:	2258      	movs	r2, #88	; 0x58
 801e728:	601a      	str	r2, [r3, #0]
 801e72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e72e:	4770      	bx	lr
 801e730:	200000b8 	.word	0x200000b8

0801e734 <_sbrk>:
 801e734:	4a04      	ldr	r2, [pc, #16]	; (801e748 <_sbrk+0x14>)
 801e736:	4905      	ldr	r1, [pc, #20]	; (801e74c <_sbrk+0x18>)
 801e738:	6813      	ldr	r3, [r2, #0]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	bf08      	it	eq
 801e73e:	460b      	moveq	r3, r1
 801e740:	4418      	add	r0, r3
 801e742:	6010      	str	r0, [r2, #0]
 801e744:	4618      	mov	r0, r3
 801e746:	4770      	bx	lr
 801e748:	200000bc 	.word	0x200000bc
 801e74c:	200000c0 	.word	0x200000c0

0801e750 <_write>:
 801e750:	4b02      	ldr	r3, [pc, #8]	; (801e75c <_write+0xc>)
 801e752:	2258      	movs	r2, #88	; 0x58
 801e754:	601a      	str	r2, [r3, #0]
 801e756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e75a:	4770      	bx	lr
 801e75c:	200000b8 	.word	0x200000b8

Disassembly of section .init:

0801e760 <_init>:
 801e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e762:	bf00      	nop

Disassembly of section .fini:

0801e764 <_fini>:
 801e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e766:	bf00      	nop
