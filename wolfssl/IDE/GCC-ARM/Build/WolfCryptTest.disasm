
Build/WolfCryptTest.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <main>:

static func_args args = { 0 } ;
#endif

int main(void)
{
 8000000:	b510      	push	{r4, lr}
    int ret;
#ifndef NO_CRYPT_TEST
	wolfCrypt_Init();

	printf("\nCrypt Test\n");
	wolfcrypt_test(&args);
 8000002:	4c09      	ldr	r4, [pc, #36]	; (8000028 <main+0x28>)
	wolfCrypt_Init();
 8000004:	f01a fbba 	bl	801a77c <wolfCrypt_Init>
	printf("\nCrypt Test\n");
 8000008:	4808      	ldr	r0, [pc, #32]	; (800002c <main+0x2c>)
 800000a:	f01b f8f7 	bl	801b1fc <iprintf>
	wolfcrypt_test(&args);
 800000e:	4620      	mov	r0, r4
 8000010:	f005 fe06 	bl	8005c20 <wolfcrypt_test>
    ret = args.return_code;
 8000014:	68a4      	ldr	r4, [r4, #8]
	printf("Crypt Test: Return code %d\n", ret);
 8000016:	4806      	ldr	r0, [pc, #24]	; (8000030 <main+0x30>)
 8000018:	4621      	mov	r1, r4
 800001a:	f01b f8ef 	bl	801b1fc <iprintf>

	wolfCrypt_Cleanup();
 800001e:	f01a fbb7 	bl	801a790 <wolfCrypt_Cleanup>
#else
    ret = NOT_COMPILED_IN;
#endif
	return ret;
}
 8000022:	4620      	mov	r0, r4
 8000024:	bd10      	pop	{r4, pc}
 8000026:	bf00      	nop
 8000028:	200001ec 	.word	0x200001ec
 800002c:	0801c0a1 	.word	0x0801c0a1
 8000030:	0801c0ae 	.word	0x0801c0ae

08000034 <my_time>:
static int gTimeMs;
static int hw_get_time_sec(void)
{
    #warning Must implement your own time source if validating certificates

	return ++gTimeMs;
 8000034:	4b02      	ldr	r3, [pc, #8]	; (8000040 <my_time+0xc>)
 8000036:	6818      	ldr	r0, [r3, #0]
 8000038:	3001      	adds	r0, #1
 800003a:	6018      	str	r0, [r3, #0]
/* This is used by wolfCrypt asn.c for cert time checking */
unsigned long my_time(unsigned long* timer)
{
    (void)timer;
    return hw_get_time_sec();
}
 800003c:	4770      	bx	lr
 800003e:	bf00      	nop
 8000040:	200001fc 	.word	0x200001fc

08000044 <hw_rand>:
static unsigned int gCounter;
unsigned int hw_rand(void)
{
    #warning Must implement your own random source

    return ++gCounter;
 8000044:	4b02      	ldr	r3, [pc, #8]	; (8000050 <hw_rand+0xc>)
 8000046:	6818      	ldr	r0, [r3, #0]
 8000048:	3001      	adds	r0, #1
 800004a:	6018      	str	r0, [r3, #0]
}
 800004c:	4770      	bx	lr
 800004e:	bf00      	nop
 8000050:	200001f8 	.word	0x200001f8

08000054 <my_rng_gen_block>:
{
    return hw_rand();
}

int my_rng_gen_block(unsigned char* output, unsigned int sz)
{
 8000054:	b570      	push	{r4, r5, r6, lr}
    uint32_t i = 0;
 8000056:	2200      	movs	r2, #0
{
 8000058:	4604      	mov	r4, r0

    while (i < sz)
 800005a:	428a      	cmp	r2, r1
 800005c:	d301      	bcc.n	8000062 <my_rng_gen_block+0xe>
            i += sizeof(CUSTOM_RAND_TYPE);
        }
    }

    return 0;
}
 800005e:	2000      	movs	r0, #0
 8000060:	bd70      	pop	{r4, r5, r6, pc}
        if( (i + sizeof(CUSTOM_RAND_TYPE)) > sz ||
 8000062:	1d15      	adds	r5, r2, #4
 8000064:	428d      	cmp	r5, r1
            ((uint32_t)&output[i] % sizeof(CUSTOM_RAND_TYPE)) != 0
 8000066:	eb04 0602 	add.w	r6, r4, r2
        if( (i + sizeof(CUSTOM_RAND_TYPE)) > sz ||
 800006a:	d801      	bhi.n	8000070 <my_rng_gen_block+0x1c>
 800006c:	07b3      	lsls	r3, r6, #30
 800006e:	d005      	beq.n	800007c <my_rng_gen_block+0x28>
    return hw_rand();
 8000070:	f7ff ffe8 	bl	8000044 <hw_rand>
            output[i++] = (unsigned char)my_rng_seed_gen();
 8000074:	1c55      	adds	r5, r2, #1
 8000076:	7030      	strb	r0, [r6, #0]
{
 8000078:	462a      	mov	r2, r5
 800007a:	e7ee      	b.n	800005a <my_rng_gen_block+0x6>
    return hw_rand();
 800007c:	f7ff ffe2 	bl	8000044 <hw_rand>
            *((CUSTOM_RAND_TYPE*)&output[i]) = my_rng_seed_gen();
 8000080:	6030      	str	r0, [r6, #0]
            i += sizeof(CUSTOM_RAND_TYPE);
 8000082:	e7f9      	b.n	8000078 <my_rng_gen_block+0x24>

08000084 <memcpy32>:
extern uint32_t __heap_end__[];

/* Copy memory: src=Source, dst_beg=Destination Begin, dst_end=Destination End */
void memcpy32(uint32_t* src, uint32_t* dst_beg, uint32_t* dst_end)
{
    while (dst_beg < dst_end) {
 8000084:	428a      	cmp	r2, r1
 8000086:	d800      	bhi.n	800008a <memcpy32+0x6>
        *dst_beg++ = *src++;
    }
}
 8000088:	4770      	bx	lr
        *dst_beg++ = *src++;
 800008a:	f850 3b04 	ldr.w	r3, [r0], #4
 800008e:	f841 3b04 	str.w	r3, [r1], #4
 8000092:	e7f7      	b.n	8000084 <memcpy32>

08000094 <meminit32>:
/* Zero address in range */
void meminit32(uint32_t* start, uint32_t* end)
{
    while (start < end) {
        *start++ = 0;
 8000094:	2300      	movs	r3, #0
    while (start < end) {
 8000096:	4288      	cmp	r0, r1
 8000098:	d300      	bcc.n	800009c <meminit32+0x8>
    }
}
 800009a:	4770      	bx	lr
        *start++ = 0;
 800009c:	f840 3b04 	str.w	r3, [r0], #4
 80000a0:	e7f9      	b.n	8000096 <meminit32+0x2>
	...

080000a4 <reset_handler>:
#endif /* USE_WOLF_ARM_STARTUP */

/* Entry Point */
void reset_handler(void)
{
 80000a4:	b508      	push	{r3, lr}
#ifdef USE_WOLF_ARM_STARTUP
    /* Init sections */
    memcpy32(__data_load_start__, __data_start__, __data_end__);
 80000a6:	4a09      	ldr	r2, [pc, #36]	; (80000cc <reset_handler+0x28>)
 80000a8:	4909      	ldr	r1, [pc, #36]	; (80000d0 <reset_handler+0x2c>)
 80000aa:	480a      	ldr	r0, [pc, #40]	; (80000d4 <reset_handler+0x30>)
 80000ac:	f7ff ffea 	bl	8000084 <memcpy32>
    meminit32(__bss_start__, __bss_end__);
 80000b0:	4909      	ldr	r1, [pc, #36]	; (80000d8 <reset_handler+0x34>)
 80000b2:	480a      	ldr	r0, [pc, #40]	; (80000dc <reset_handler+0x38>)
 80000b4:	f7ff ffee 	bl	8000094 <meminit32>

    /* Init heap */
    __heap_start__[0] = 0;
 80000b8:	4b09      	ldr	r3, [pc, #36]	; (80000e0 <reset_handler+0x3c>)
 80000ba:	2200      	movs	r2, #0
 80000bc:	601a      	str	r2, [r3, #0]
    __heap_start__[1] = ((uintptr_t)__heap_end__ - (uintptr_t)__heap_start__);
 80000be:	4a09      	ldr	r2, [pc, #36]	; (80000e4 <reset_handler+0x40>)
 80000c0:	1ad2      	subs	r2, r2, r3
 80000c2:	605a      	str	r2, [r3, #4]
#endif /* USE_WOLF_ARM_STARTUP */

    /* Start main */
    extern int main(void);
    main();
 80000c4:	f7ff ff9c 	bl	8000000 <main>

    /* Application has ended, so busy wait */
    while(1);
 80000c8:	e7fe      	b.n	80000c8 <reset_handler+0x24>
 80000ca:	bf00      	nop
 80000cc:	0801c28d 	.word	0x0801c28d
 80000d0:	0801c0a1 	.word	0x0801c0a1
 80000d4:	0801c0a1 	.word	0x0801c0a1
 80000d8:	2000021c 	.word	0x2000021c
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	2000021c 	.word	0x2000021c
 80000e4:	2000021c 	.word	0x2000021c

080000e8 <time_cb>:
#endif /* WOLFSSL_CERT_PIV */

#if !defined(NO_ASN) && !defined(NO_ASN_TIME)
static time_t time_cb(time_t* t)
{
    if (t != NULL) {
 80000e8:	b118      	cbz	r0, 80000f2 <time_cb+0xa>
        *t = 99;
 80000ea:	2263      	movs	r2, #99	; 0x63
 80000ec:	2300      	movs	r3, #0
 80000ee:	e9c0 2300 	strd	r2, r3, [r0]
    }

    return 99;
}
 80000f2:	2063      	movs	r0, #99	; 0x63
 80000f4:	2100      	movs	r1, #0
 80000f6:	4770      	bx	lr

080000f8 <print_fiducials>:
static const int fiducial4 = WC_TEST_RET_LN;

/* print the fiducial line numbers assigned above, allowing confirmation of
 * source code version match when in doubt.
 */
static void print_fiducials(void) {
 80000f8:	b507      	push	{r0, r1, r2, lr}
    printf(" [fiducial line numbers: %d %d %d %d]\n",
 80000fa:	f64b 6368 	movw	r3, #48744	; 0xbe68
 80000fe:	9300      	str	r3, [sp, #0]
 8000100:	f645 72a8 	movw	r2, #24488	; 0x5fa8
 8000104:	f648 63d5 	movw	r3, #36565	; 0x8ed5
 8000108:	f641 61f1 	movw	r1, #7921	; 0x1ef1
 800010c:	4805      	ldr	r0, [pc, #20]	; (8000124 <print_fiducials+0x2c>)
 800010e:	f01b f875 	bl	801b1fc <iprintf>
 8000112:	4b05      	ldr	r3, [pc, #20]	; (8000128 <print_fiducials+0x30>)
 8000114:	681b      	ldr	r3, [r3, #0]
 8000116:	6898      	ldr	r0, [r3, #8]
           fiducial1, fiducial2, fiducial3, fiducial4);
}
 8000118:	b003      	add	sp, #12
 800011a:	f85d eb04 	ldr.w	lr, [sp], #4
    printf(" [fiducial line numbers: %d %d %d %d]\n",
 800011e:	f01a be35 	b.w	801ad8c <fflush>
 8000122:	bf00      	nop
 8000124:	0801db5d 	.word	0x0801db5d
 8000128:	20000188 	.word	0x20000188

0800012c <render_error_message>:
{
 800012c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (WC_TEST_RET_DEC_TAG(es)) {
 800012e:	424c      	negs	r4, r1
 8000130:	1762      	asrs	r2, r4, #29
{
 8000132:	4605      	mov	r5, r0
    switch (WC_TEST_RET_DEC_TAG(es)) {
 8000134:	2a03      	cmp	r2, #3
 8000136:	d83e      	bhi.n	80001b6 <render_error_message+0x8a>
 8000138:	e8df f002 	tbb	[pc, r2]
 800013c:	33271302 	.word	0x33271302
        err_sys_printf("%s error L=%d\n", msg, WC_TEST_RET_DEC_LN(es));
 8000140:	4a1e      	ldr	r2, [pc, #120]	; (80001bc <render_error_message+0x90>)
 8000142:	fb94 f1f2 	sdiv	r1, r4, r2
 8000146:	fb02 4211 	mls	r2, r2, r1, r4
 800014a:	4601      	mov	r1, r0
 800014c:	481c      	ldr	r0, [pc, #112]	; (80001c0 <render_error_message+0x94>)
 800014e:	f01b f855 	bl	801b1fc <iprintf>
        err_sys_printf("%s error L=%d i=%d\n", msg,
 8000152:	4b1c      	ldr	r3, [pc, #112]	; (80001c4 <render_error_message+0x98>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	6898      	ldr	r0, [r3, #8]
}
 8000158:	b002      	add	sp, #8
 800015a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        err_sys_printf("%s error L=%d i=%d\n", msg,
 800015e:	f01a be15 	b.w	801ad8c <fflush>
        err_sys_printf("%s error L=%d code=%d (%s)\n", msg,
 8000162:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8000166:	4e18      	ldr	r6, [pc, #96]	; (80001c8 <render_error_message+0x9c>)
 8000168:	fb94 f6f6 	sdiv	r6, r4, r6
 800016c:	4630      	mov	r0, r6
 800016e:	f012 ffcd 	bl	801310c <wc_GetErrorString>
 8000172:	4a12      	ldr	r2, [pc, #72]	; (80001bc <render_error_message+0x90>)
 8000174:	9000      	str	r0, [sp, #0]
 8000176:	fbb4 f1f2 	udiv	r1, r4, r2
 800017a:	4633      	mov	r3, r6
 800017c:	fb02 4211 	mls	r2, r2, r1, r4
 8000180:	4812      	ldr	r0, [pc, #72]	; (80001cc <render_error_message+0xa0>)
 8000182:	4629      	mov	r1, r5
 8000184:	f01b f83a 	bl	801b1fc <iprintf>
 8000188:	e7e3      	b.n	8000152 <render_error_message+0x26>
        err_sys_printf("%s error L=%d errno=%d\n", msg,
 800018a:	490c      	ldr	r1, [pc, #48]	; (80001bc <render_error_message+0x90>)
 800018c:	f024 42c0 	bic.w	r2, r4, #1610612736	; 0x60000000
 8000190:	fbb2 f3f1 	udiv	r3, r2, r1
 8000194:	fb01 2213 	mls	r2, r1, r3, r2
 8000198:	4601      	mov	r1, r0
 800019a:	480d      	ldr	r0, [pc, #52]	; (80001d0 <render_error_message+0xa4>)
        err_sys_printf("%s error L=%d i=%d\n", msg,
 800019c:	f01b f82e 	bl	801b1fc <iprintf>
 80001a0:	e7d7      	b.n	8000152 <render_error_message+0x26>
 80001a2:	4906      	ldr	r1, [pc, #24]	; (80001bc <render_error_message+0x90>)
 80001a4:	f024 42c0 	bic.w	r2, r4, #1610612736	; 0x60000000
 80001a8:	fbb2 f3f1 	udiv	r3, r2, r1
 80001ac:	fb01 2213 	mls	r2, r1, r3, r2
 80001b0:	4601      	mov	r1, r0
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <render_error_message+0xa8>)
 80001b4:	e7f2      	b.n	800019c <render_error_message+0x70>
}
 80001b6:	b002      	add	sp, #8
 80001b8:	bd70      	pop	{r4, r5, r6, pc}
 80001ba:	bf00      	nop
 80001bc:	000186a0 	.word	0x000186a0
 80001c0:	0801db84 	.word	0x0801db84
 80001c4:	20000188 	.word	0x20000188
 80001c8:	fffe7960 	.word	0xfffe7960
 80001cc:	0801db93 	.word	0x0801db93
 80001d0:	0801dbaf 	.word	0x0801dbaf
 80001d4:	0801dbc7 	.word	0x0801dbc7

080001d8 <_rng_test>:
{
 80001d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001da:	b089      	sub	sp, #36	; 0x24
 80001dc:	4605      	mov	r5, r0
    XMEMSET(block, 0, sizeof(block));
 80001de:	2220      	movs	r2, #32
{
 80001e0:	460f      	mov	r7, r1
    XMEMSET(block, 0, sizeof(block));
 80001e2:	4668      	mov	r0, sp
 80001e4:	2100      	movs	r1, #0
 80001e6:	f01a ff23 	bl	801b030 <memset>
    ret = wc_RNG_GenerateBlock(rng, block, sizeof(block));
 80001ea:	2220      	movs	r2, #32
 80001ec:	4669      	mov	r1, sp
 80001ee:	4628      	mov	r0, r5
 80001f0:	f00c fa54 	bl	800c69c <wc_RNG_GenerateBlock>
    if (ret != 0) {
 80001f4:	bb80      	cbnz	r0, 8000258 <_rng_test+0x80>
 80001f6:	466b      	mov	r3, sp
    for (i=0; i<(int)sizeof(block); i++) {
 80001f8:	4606      	mov	r6, r0
        if (block[i] == 0) {
 80001fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fe:	b902      	cbnz	r2, 8000202 <_rng_test+0x2a>
            ret++;
 8000200:	3001      	adds	r0, #1
    for (i=0; i<(int)sizeof(block); i++) {
 8000202:	3601      	adds	r6, #1
 8000204:	2e20      	cmp	r6, #32
 8000206:	d1f8      	bne.n	80001fa <_rng_test+0x22>
    if (ret >= (int)sizeof(block)) {
 8000208:	281f      	cmp	r0, #31
 800020a:	dc27      	bgt.n	800025c <_rng_test+0x84>
    ret = wc_RNG_GenerateByte(rng, block);
 800020c:	4669      	mov	r1, sp
 800020e:	4628      	mov	r0, r5
 8000210:	f00c fa59 	bl	800c6c6 <wc_RNG_GenerateByte>
    if (ret != 0) {
 8000214:	4604      	mov	r4, r0
 8000216:	bb18      	cbnz	r0, 8000260 <_rng_test+0x88>
    ret = wc_RNG_GenerateBlock(NULL, block, sizeof(block));
 8000218:	4632      	mov	r2, r6
 800021a:	4669      	mov	r1, sp
 800021c:	f00c fa3e 	bl	800c69c <wc_RNG_GenerateBlock>
    if (ret != BAD_FUNC_ARG) {
 8000220:	30ad      	adds	r0, #173	; 0xad
 8000222:	d11f      	bne.n	8000264 <_rng_test+0x8c>
    ret = wc_RNG_GenerateBlock(rng, NULL, sizeof(block));
 8000224:	4632      	mov	r2, r6
 8000226:	4621      	mov	r1, r4
 8000228:	4628      	mov	r0, r5
 800022a:	f00c fa37 	bl	800c69c <wc_RNG_GenerateBlock>
    if (ret != BAD_FUNC_ARG) {
 800022e:	30ad      	adds	r0, #173	; 0xad
 8000230:	d11a      	bne.n	8000268 <_rng_test+0x90>
    ret = wc_RNG_GenerateByte(NULL, block);
 8000232:	4669      	mov	r1, sp
 8000234:	4620      	mov	r0, r4
 8000236:	f00c fa46 	bl	800c6c6 <wc_RNG_GenerateByte>
    if (ret != BAD_FUNC_ARG) {
 800023a:	30ad      	adds	r0, #173	; 0xad
 800023c:	d116      	bne.n	800026c <_rng_test+0x94>
    ret = wc_RNG_GenerateByte(rng, NULL);
 800023e:	4621      	mov	r1, r4
 8000240:	4628      	mov	r0, r5
 8000242:	f00c fa40 	bl	800c6c6 <wc_RNG_GenerateByte>
    if (ret != BAD_FUNC_ARG) {
 8000246:	30ad      	adds	r0, #173	; 0xad
 8000248:	d003      	beq.n	8000252 <_rng_test+0x7a>
        ret = 7;
 800024a:	2007      	movs	r0, #7
        ret = errorOffset - (ret * 1000000);
 800024c:	4c08      	ldr	r4, [pc, #32]	; (8000270 <_rng_test+0x98>)
 800024e:	fb04 7400 	mla	r4, r4, r0, r7
}
 8000252:	4620      	mov	r0, r4
 8000254:	b009      	add	sp, #36	; 0x24
 8000256:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = 1;
 8000258:	2001      	movs	r0, #1
 800025a:	e7f7      	b.n	800024c <_rng_test+0x74>
        ret = 2;
 800025c:	2002      	movs	r0, #2
 800025e:	e7f5      	b.n	800024c <_rng_test+0x74>
        ret = 3;
 8000260:	2003      	movs	r0, #3
 8000262:	e7f3      	b.n	800024c <_rng_test+0x74>
        ret = 4;
 8000264:	2004      	movs	r0, #4
 8000266:	e7f1      	b.n	800024c <_rng_test+0x74>
        ret = 5;
 8000268:	2005      	movs	r0, #5
 800026a:	e7ef      	b.n	800024c <_rng_test+0x74>
        ret = 6;
 800026c:	2006      	movs	r0, #6
 800026e:	e7ed      	b.n	800024c <_rng_test+0x74>
 8000270:	fff0bdc0 	.word	0xfff0bdc0

08000274 <random_rng_test>:
{
 8000274:	b530      	push	{r4, r5, lr}
 8000276:	b085      	sub	sp, #20
    ret = wc_InitRng_ex(rng, HEAP_HINT, devId);
 8000278:	f06f 0201 	mvn.w	r2, #1
 800027c:	2100      	movs	r1, #0
 800027e:	4668      	mov	r0, sp
 8000280:	f00c fa05 	bl	800c68e <wc_InitRng_ex>
    if (ret != 0)
 8000284:	b148      	cbz	r0, 800029a <random_rng_test+0x26>
        return WC_TEST_RET_ENC_EC(ret);
 8000286:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <random_rng_test+0x64>)
 8000288:	4c14      	ldr	r4, [pc, #80]	; (80002dc <random_rng_test+0x68>)
 800028a:	4240      	negs	r0, r0
 800028c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000290:	fb02 4400 	mla	r4, r2, r0, r4
}
 8000294:	4620      	mov	r0, r4
 8000296:	b005      	add	sp, #20
 8000298:	bd30      	pop	{r4, r5, pc}
    ret = _rng_test(rng, WC_TEST_RET_ENC_NC);
 800029a:	f46f 5165 	mvn.w	r1, #14656	; 0x3940
 800029e:	4668      	mov	r0, sp
 80002a0:	f7ff ff9a 	bl	80001d8 <_rng_test>
 80002a4:	4604      	mov	r4, r0
    wc_FreeRng(rng);
 80002a6:	4668      	mov	r0, sp
 80002a8:	f00c fa10 	bl	800c6cc <wc_FreeRng>
    if (ret != 0)
 80002ac:	2c00      	cmp	r4, #0
 80002ae:	d1f1      	bne.n	8000294 <random_rng_test+0x20>
        rng = wc_rng_new(nonce, (word32)sizeof(nonce), HEAP_HINT);
 80002b0:	2108      	movs	r1, #8
 80002b2:	4622      	mov	r2, r4
 80002b4:	eb0d 0001 	add.w	r0, sp, r1
        byte nonce[8] = { 0 };
 80002b8:	e9cd 4402 	strd	r4, r4, [sp, #8]
        rng = wc_rng_new(nonce, (word32)sizeof(nonce), HEAP_HINT);
 80002bc:	f00c f9c8 	bl	800c650 <wc_rng_new>
        if (rng == NULL)
 80002c0:	4605      	mov	r5, r0
 80002c2:	b908      	cbnz	r0, 80002c8 <random_rng_test+0x54>
            return WC_TEST_RET_ENC_ERRNO;
 80002c4:	4c06      	ldr	r4, [pc, #24]	; (80002e0 <random_rng_test+0x6c>)
 80002c6:	e7e5      	b.n	8000294 <random_rng_test+0x20>
        ret = _rng_test(rng, WC_TEST_RET_ENC_NC);
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <random_rng_test+0x70>)
 80002ca:	f7ff ff85 	bl	80001d8 <_rng_test>
 80002ce:	4604      	mov	r4, r0
        wc_rng_free(rng);
 80002d0:	4628      	mov	r0, r5
 80002d2:	f00c f9cf 	bl	800c674 <wc_rng_free>
    return ret;
 80002d6:	e7dd      	b.n	8000294 <random_rng_test+0x20>
 80002d8:	fffe7960 	.word	0xfffe7960
 80002dc:	dfffc6c1 	.word	0xdfffc6c1
 80002e0:	ffffc6b1 	.word	0xffffc6b1
 80002e4:	ffffc6af 	.word	0xffffc6af

080002e8 <ecc_exp_imp_test>:
{
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	4606      	mov	r6, r0
 80002ee:	b0e4      	sub	sp, #400	; 0x190
    ecc_key    *keyImp = (ecc_key *)XMALLOC(sizeof *keyImp, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 80002f0:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 80002f4:	f01a fe54 	bl	801afa0 <malloc>
    const char qx[] = "7a4e287890a1a47ad3457e52f2f76a83"
 80002f8:	497b      	ldr	r1, [pc, #492]	; (80004e8 <ecc_exp_imp_test+0x200>)
    ecc_key    *keyImp = (ecc_key *)XMALLOC(sizeof *keyImp, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 80002fa:	4605      	mov	r5, r0
    const char qx[] = "7a4e287890a1a47ad3457e52f2f76a83"
 80002fc:	2241      	movs	r2, #65	; 0x41
 80002fe:	a810      	add	r0, sp, #64	; 0x40
 8000300:	f01a fe6e 	bl	801afe0 <memcpy>
    const char qy[] = "eec4084f5b29ebf29c44cce3b3059610"
 8000304:	4979      	ldr	r1, [pc, #484]	; (80004ec <ecc_exp_imp_test+0x204>)
 8000306:	2241      	movs	r2, #65	; 0x41
 8000308:	a821      	add	r0, sp, #132	; 0x84
 800030a:	f01a fe69 	bl	801afe0 <memcpy>
    const char d[]  = "8c14b793cb19137e323a6d2e2a870bca"
 800030e:	4978      	ldr	r1, [pc, #480]	; (80004f0 <ecc_exp_imp_test+0x208>)
 8000310:	2241      	movs	r2, #65	; 0x41
 8000312:	a832      	add	r0, sp, #200	; 0xc8
 8000314:	f01a fe64 	bl	801afe0 <memcpy>
    if (keyImp == NULL)
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 80df 	beq.w	80004dc <ecc_exp_imp_test+0x1f4>
    privLen = sizeof(priv);
 800031e:	f04f 0820 	mov.w	r8, #32
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 8000322:	f06f 0201 	mvn.w	r2, #1
 8000326:	2100      	movs	r1, #0
    privLen = sizeof(priv);
 8000328:	af04      	add	r7, sp, #16
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 800032a:	4628      	mov	r0, r5
    ret = wc_ecc_export_private_only(key, priv, &privLen);
 800032c:	eb0d 0908 	add.w	r9, sp, r8
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 8000330:	f009 ff2c 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_export_private_only(key, priv, &privLen);
 8000334:	463a      	mov	r2, r7
 8000336:	4649      	mov	r1, r9
 8000338:	4630      	mov	r0, r6
    privLen = sizeof(priv);
 800033a:	f8c7 8000 	str.w	r8, [r7]
    ret = wc_ecc_export_private_only(key, priv, &privLen);
 800033e:	f00b fe39 	bl	800bfb4 <wc_ecc_export_private_only>
    if (ret != 0) {
 8000342:	b138      	cbz	r0, 8000354 <ecc_exp_imp_test+0x6c>
        ret = WC_TEST_RET_ENC_EC(ret);
 8000344:	4240      	negs	r0, r0
 8000346:	496b      	ldr	r1, [pc, #428]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 8000348:	4c6b      	ldr	r4, [pc, #428]	; (80004f8 <ecc_exp_imp_test+0x210>)
 800034a:	f3c0 000a 	ubfx	r0, r0, #0, #11
        ret = WC_TEST_RET_ENC_EC(ret);
 800034e:	fb01 4400 	mla	r4, r1, r0, r4
        goto done;
 8000352:	e07b      	b.n	800044c <ecc_exp_imp_test+0x164>
    pubLen = sizeof(pub);
 8000354:	2382      	movs	r3, #130	; 0x82
 8000356:	9305      	str	r3, [sp, #20]
    ret = wc_ecc_export_point_der(key->idx, &key->pubkey, pub, &pubLen);
 8000358:	6870      	ldr	r0, [r6, #4]
 800035a:	ab05      	add	r3, sp, #20
 800035c:	aa43      	add	r2, sp, #268	; 0x10c
 800035e:	f106 0118 	add.w	r1, r6, #24
 8000362:	f00b fb7d 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != 0) {
 8000366:	b128      	cbz	r0, 8000374 <ecc_exp_imp_test+0x8c>
        ret = WC_TEST_RET_ENC_EC(ret);
 8000368:	4240      	negs	r0, r0
 800036a:	4962      	ldr	r1, [pc, #392]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 800036c:	4c63      	ldr	r4, [pc, #396]	; (80004fc <ecc_exp_imp_test+0x214>)
 800036e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000372:	e7ec      	b.n	800034e <ecc_exp_imp_test+0x66>
    ret = wc_ecc_import_private_key(priv, privLen, pub, pubLen, keyImp);
 8000374:	9500      	str	r5, [sp, #0]
 8000376:	9b05      	ldr	r3, [sp, #20]
 8000378:	6839      	ldr	r1, [r7, #0]
 800037a:	aa43      	add	r2, sp, #268	; 0x10c
 800037c:	4648      	mov	r0, r9
 800037e:	f00b fe7e 	bl	800c07e <wc_ecc_import_private_key>
    if (ret != 0) {
 8000382:	4604      	mov	r4, r0
 8000384:	b128      	cbz	r0, 8000392 <ecc_exp_imp_test+0xaa>
        ret = WC_TEST_RET_ENC_EC(ret);
 8000386:	4244      	negs	r4, r0
 8000388:	f3c4 000a 	ubfx	r0, r4, #0, #11
 800038c:	4959      	ldr	r1, [pc, #356]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 800038e:	4c5c      	ldr	r4, [pc, #368]	; (8000500 <ecc_exp_imp_test+0x218>)
 8000390:	e7dd      	b.n	800034e <ecc_exp_imp_test+0x66>
    wc_ecc_free(keyImp);
 8000392:	4628      	mov	r0, r5
 8000394:	f009 ff3d 	bl	800a212 <wc_ecc_free>
    ret = wc_ecc_import_raw_ex(keyImp, qx, qy, d, ECC_SECP256R1);
 8000398:	f04f 0a07 	mov.w	sl, #7
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 800039c:	4621      	mov	r1, r4
 800039e:	f06f 0201 	mvn.w	r2, #1
 80003a2:	4628      	mov	r0, r5
 80003a4:	f009 fef2 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_import_raw_ex(keyImp, qx, qy, d, ECC_SECP256R1);
 80003a8:	f8cd a000 	str.w	sl, [sp]
 80003ac:	ab32      	add	r3, sp, #200	; 0xc8
 80003ae:	aa21      	add	r2, sp, #132	; 0x84
 80003b0:	a910      	add	r1, sp, #64	; 0x40
 80003b2:	4628      	mov	r0, r5
 80003b4:	f00b fef5 	bl	800c1a2 <wc_ecc_import_raw_ex>
    if (ret != 0) {
 80003b8:	4604      	mov	r4, r0
 80003ba:	b128      	cbz	r0, 80003c8 <ecc_exp_imp_test+0xe0>
        ret = WC_TEST_RET_ENC_EC(ret);
 80003bc:	4244      	negs	r4, r0
 80003be:	f3c4 000a 	ubfx	r0, r4, #0, #11
 80003c2:	494c      	ldr	r1, [pc, #304]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 80003c4:	4c4f      	ldr	r4, [pc, #316]	; (8000504 <ecc_exp_imp_test+0x21c>)
 80003c6:	e7c2      	b.n	800034e <ecc_exp_imp_test+0x66>
    wc_ecc_free(keyImp);
 80003c8:	4628      	mov	r0, r5
 80003ca:	f009 ff22 	bl	800a212 <wc_ecc_free>
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 80003ce:	f06f 0201 	mvn.w	r2, #1
 80003d2:	4621      	mov	r1, r4
 80003d4:	4628      	mov	r0, r5
 80003d6:	f009 fed9 	bl	800a18c <wc_ecc_init_ex>
    curve_id = wc_ecc_get_curve_id(key->idx);
 80003da:	6870      	ldr	r0, [r6, #4]
 80003dc:	f009 fe08 	bl	8009ff0 <wc_ecc_get_curve_id>
    if (curve_id < 0) {
 80003e0:	2800      	cmp	r0, #0
 80003e2:	da05      	bge.n	80003f0 <ecc_exp_imp_test+0x108>
        ret = WC_TEST_RET_ENC_EC(curve_id);
 80003e4:	4240      	negs	r0, r0
 80003e6:	4943      	ldr	r1, [pc, #268]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 80003e8:	4c47      	ldr	r4, [pc, #284]	; (8000508 <ecc_exp_imp_test+0x220>)
 80003ea:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80003ee:	e7ae      	b.n	800034e <ecc_exp_imp_test+0x66>
    ret = wc_ecc_import_private_key_ex(priv, privLen, NULL, 0, keyImp,
 80003f0:	e9cd 5000 	strd	r5, r0, [sp]
 80003f4:	4623      	mov	r3, r4
 80003f6:	4622      	mov	r2, r4
 80003f8:	6839      	ldr	r1, [r7, #0]
 80003fa:	4648      	mov	r0, r9
 80003fc:	f00b fe0d 	bl	800c01a <wc_ecc_import_private_key_ex>
    if (ret != 0) {
 8000400:	4604      	mov	r4, r0
 8000402:	b128      	cbz	r0, 8000410 <ecc_exp_imp_test+0x128>
        ret = WC_TEST_RET_ENC_EC(ret);
 8000404:	4244      	negs	r4, r0
 8000406:	f3c4 000a 	ubfx	r0, r4, #0, #11
 800040a:	493a      	ldr	r1, [pc, #232]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 800040c:	4c3f      	ldr	r4, [pc, #252]	; (800050c <ecc_exp_imp_test+0x224>)
 800040e:	e79e      	b.n	800034e <ecc_exp_imp_test+0x66>
    wc_ecc_free(keyImp);
 8000410:	4628      	mov	r0, r5
 8000412:	f009 fefe 	bl	800a212 <wc_ecc_free>
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 8000416:	4621      	mov	r1, r4
    pubLenX = pubLenY = 32;
 8000418:	ac07      	add	r4, sp, #28
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 800041a:	f06f 0201 	mvn.w	r2, #1
 800041e:	4628      	mov	r0, r5
 8000420:	f009 feb4 	bl	800a18c <wc_ecc_init_ex>
    pubLenX = pubLenY = 32;
 8000424:	f8c4 8000 	str.w	r8, [r4]
    ret = wc_ecc_export_public_raw(key, pub, &pubLenX, &pub[32], &pubLenY);
 8000428:	ab4b      	add	r3, sp, #300	; 0x12c
 800042a:	9400      	str	r4, [sp, #0]
 800042c:	aa06      	add	r2, sp, #24
 800042e:	a943      	add	r1, sp, #268	; 0x10c
 8000430:	4630      	mov	r0, r6
    pubLenX = pubLenY = 32;
 8000432:	f8cd 8018 	str.w	r8, [sp, #24]
    ret = wc_ecc_export_public_raw(key, pub, &pubLenX, &pub[32], &pubLenY);
 8000436:	f00b fdd0 	bl	800bfda <wc_ecc_export_public_raw>
    if (ret != 0) {
 800043a:	4603      	mov	r3, r0
 800043c:	b168      	cbz	r0, 800045a <ecc_exp_imp_test+0x172>
        ret = WC_TEST_RET_ENC_EC(ret);
 800043e:	4243      	negs	r3, r0
 8000440:	4c33      	ldr	r4, [pc, #204]	; (8000510 <ecc_exp_imp_test+0x228>)
 8000442:	482c      	ldr	r0, [pc, #176]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 8000444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000448:	fb00 4403 	mla	r4, r0, r3, r4
        wc_ecc_free(keyImp);
 800044c:	4628      	mov	r0, r5
 800044e:	f009 fee0 	bl	800a212 <wc_ecc_free>
        XFREE(keyImp, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8000452:	4628      	mov	r0, r5
 8000454:	f01a fdac 	bl	801afb0 <free>
 8000458:	e041      	b.n	80004de <ecc_exp_imp_test+0x1f6>
    ret = wc_ecc_import_unsigned(keyImp, pub, &pub[32], NULL, ECC_SECP256R1);
 800045a:	f8cd a000 	str.w	sl, [sp]
 800045e:	aa4b      	add	r2, sp, #300	; 0x12c
 8000460:	a943      	add	r1, sp, #268	; 0x10c
 8000462:	4628      	mov	r0, r5
 8000464:	f00b fea6 	bl	800c1b4 <wc_ecc_import_unsigned>
    if (ret != 0) {
 8000468:	4682      	mov	sl, r0
 800046a:	b128      	cbz	r0, 8000478 <ecc_exp_imp_test+0x190>
        ret = WC_TEST_RET_ENC_EC(ret);
 800046c:	4240      	negs	r0, r0
 800046e:	4921      	ldr	r1, [pc, #132]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 8000470:	4c28      	ldr	r4, [pc, #160]	; (8000514 <ecc_exp_imp_test+0x22c>)
 8000472:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000476:	e76a      	b.n	800034e <ecc_exp_imp_test+0x66>
    wc_ecc_free(keyImp);
 8000478:	4628      	mov	r0, r5
 800047a:	f009 feca 	bl	800a212 <wc_ecc_free>
    wc_ecc_init_ex(keyImp, HEAP_HINT, devId);
 800047e:	f06f 0201 	mvn.w	r2, #1
 8000482:	4651      	mov	r1, sl
 8000484:	4628      	mov	r0, r5
 8000486:	f009 fe81 	bl	800a18c <wc_ecc_init_ex>
    pubLenX = pubLenY = privLen = 32;
 800048a:	f8c7 8000 	str.w	r8, [r7]
 800048e:	f8c4 8000 	str.w	r8, [r4]
    ret = wc_ecc_export_private_raw(key, pub, &pubLenX, &pub[32], &pubLenY,
 8000492:	ab4b      	add	r3, sp, #300	; 0x12c
 8000494:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8000498:	9400      	str	r4, [sp, #0]
 800049a:	aa06      	add	r2, sp, #24
 800049c:	a943      	add	r1, sp, #268	; 0x10c
 800049e:	4630      	mov	r0, r6
    pubLenX = pubLenY = privLen = 32;
 80004a0:	f8cd 8018 	str.w	r8, [sp, #24]
    ret = wc_ecc_export_private_raw(key, pub, &pubLenX, &pub[32], &pubLenY,
 80004a4:	f00b fdac 	bl	800c000 <wc_ecc_export_private_raw>
    if (ret != 0) {
 80004a8:	b128      	cbz	r0, 80004b6 <ecc_exp_imp_test+0x1ce>
        ret = WC_TEST_RET_ENC_EC(ret);
 80004aa:	4240      	negs	r0, r0
 80004ac:	4911      	ldr	r1, [pc, #68]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 80004ae:	4c1a      	ldr	r4, [pc, #104]	; (8000518 <ecc_exp_imp_test+0x230>)
 80004b0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80004b4:	e74b      	b.n	800034e <ecc_exp_imp_test+0x66>
    ret = wc_ecc_import_unsigned(keyImp, pub, &pub[32], priv, ECC_SECP256R1);
 80004b6:	2307      	movs	r3, #7
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	aa4b      	add	r2, sp, #300	; 0x12c
 80004bc:	ab08      	add	r3, sp, #32
 80004be:	a943      	add	r1, sp, #268	; 0x10c
 80004c0:	4628      	mov	r0, r5
 80004c2:	f00b fe77 	bl	800c1b4 <wc_ecc_import_unsigned>
    if (ret != 0) {
 80004c6:	4604      	mov	r4, r0
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d0bf      	beq.n	800044c <ecc_exp_imp_test+0x164>
        ret = WC_TEST_RET_ENC_EC(ret);
 80004cc:	4244      	negs	r4, r0
 80004ce:	4909      	ldr	r1, [pc, #36]	; (80004f4 <ecc_exp_imp_test+0x20c>)
 80004d0:	4812      	ldr	r0, [pc, #72]	; (800051c <ecc_exp_imp_test+0x234>)
 80004d2:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80004d6:	fb01 0404 	mla	r4, r1, r4, r0
        goto done;
 80004da:	e7b7      	b.n	800044c <ecc_exp_imp_test+0x164>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, done);
 80004dc:	4c10      	ldr	r4, [pc, #64]	; (8000520 <ecc_exp_imp_test+0x238>)
}
 80004de:	4620      	mov	r0, r4
 80004e0:	b064      	add	sp, #400	; 0x190
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	bf00      	nop
 80004e8:	0801dbdb 	.word	0x0801dbdb
 80004ec:	0801dc1c 	.word	0x0801dc1c
 80004f0:	0801dc5d 	.word	0x0801dc5d
 80004f4:	fffe7960 	.word	0xfffe7960
 80004f8:	dfff9644 	.word	0xdfff9644
 80004fc:	dfff963e 	.word	0xdfff963e
 8000500:	dfff9638 	.word	0xdfff9638
 8000504:	dfff962f 	.word	0xdfff962f
 8000508:	dfff9626 	.word	0xdfff9626
 800050c:	dfff961e 	.word	0xdfff961e
 8000510:	dfff9613 	.word	0xdfff9613
 8000514:	dfff960b 	.word	0xdfff960b
 8000518:	dfff95fe 	.word	0xdfff95fe
 800051c:	dfff95f6 	.word	0xdfff95f6
 8000520:	ffff964c 	.word	0xffff964c

08000524 <aesgcm_default_test_helper.constprop.0>:
static wc_test_ret_t aesgcm_default_test_helper(byte* key, int keySz, byte* iv, int ivSz,
 8000524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000528:	4681      	mov	r9, r0
 800052a:	b0a3      	sub	sp, #140	; 0x8c
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 800052c:	f44f 709c 	mov.w	r0, #312	; 0x138
static wc_test_ret_t aesgcm_default_test_helper(byte* key, int keySz, byte* iv, int ivSz,
 8000530:	4688      	mov	r8, r1
 8000532:	4616      	mov	r6, r2
 8000534:	461f      	mov	r7, r3
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8000536:	f01a fd33 	bl	801afa0 <malloc>
 800053a:	4605      	mov	r5, r0
 800053c:	2800      	cmp	r0, #0
 800053e:	f000 80c7 	beq.w	80006d0 <aesgcm_default_test_helper.constprop.0+0x1ac>
    if ((dec = (Aes *)XMALLOC(sizeof *dec, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8000542:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000546:	f01a fd2b 	bl	801afa0 <malloc>
 800054a:	4604      	mov	r4, r0
 800054c:	2800      	cmp	r0, #0
 800054e:	f000 80c2 	beq.w	80006d6 <aesgcm_default_test_helper.constprop.0+0x1b2>
    XMEMSET(resultT, 0, sizeof(resultT));
 8000552:	f10d 0b18 	add.w	fp, sp, #24
 8000556:	2210      	movs	r2, #16
 8000558:	2100      	movs	r1, #0
 800055a:	4658      	mov	r0, fp
 800055c:	f01a fd68 	bl	801b030 <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
 8000560:	2230      	movs	r2, #48	; 0x30
 8000562:	2100      	movs	r1, #0
 8000564:	a816      	add	r0, sp, #88	; 0x58
 8000566:	f01a fd63 	bl	801b030 <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	a80a      	add	r0, sp, #40	; 0x28
 8000570:	f01a fd5e 	bl	801b030 <memset>
    ret = wc_AesInit(enc, HEAP_HINT, devId);
 8000574:	f06f 0201 	mvn.w	r2, #1
 8000578:	2100      	movs	r1, #0
 800057a:	4628      	mov	r0, r5
 800057c:	f008 fa61 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8000580:	4682      	mov	sl, r0
 8000582:	b150      	cbz	r0, 800059a <aesgcm_default_test_helper.constprop.0+0x76>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8000584:	f1c0 0800 	rsb	r8, r0, #0
 8000588:	4b54      	ldr	r3, [pc, #336]	; (80006dc <aesgcm_default_test_helper.constprop.0+0x1b8>)
 800058a:	4855      	ldr	r0, [pc, #340]	; (80006e0 <aesgcm_default_test_helper.constprop.0+0x1bc>)
 800058c:	f3c8 080a 	ubfx	r8, r8, #0, #11
 8000590:	fb03 0808 	mla	r8, r3, r8, r0
static wc_test_ret_t aesgcm_default_test_helper(byte* key, int keySz, byte* iv, int ivSz,
 8000594:	f04f 0a00 	mov.w	sl, #0
 8000598:	e011      	b.n	80005be <aesgcm_default_test_helper.constprop.0+0x9a>
    ret = wc_AesInit(dec, HEAP_HINT, devId);
 800059a:	4601      	mov	r1, r0
 800059c:	f06f 0201 	mvn.w	r2, #1
 80005a0:	4620      	mov	r0, r4
 80005a2:	f008 fa4e 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 80005a6:	b1d8      	cbz	r0, 80005e0 <aesgcm_default_test_helper.constprop.0+0xbc>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80005a8:	f1c0 0800 	rsb	r8, r0, #0
 80005ac:	4b4b      	ldr	r3, [pc, #300]	; (80006dc <aesgcm_default_test_helper.constprop.0+0x1b8>)
 80005ae:	484d      	ldr	r0, [pc, #308]	; (80006e4 <aesgcm_default_test_helper.constprop.0+0x1c0>)
 80005b0:	f3c8 080a 	ubfx	r8, r8, #0, #11
 80005b4:	fb03 0808 	mla	r8, r3, r8, r0
            wc_AesFree(enc);
 80005b8:	4628      	mov	r0, r5
 80005ba:	f008 fa4a 	bl	8008a52 <wc_AesFree>
        XFREE(enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 80005be:	4628      	mov	r0, r5
 80005c0:	f01a fcf6 	bl	801afb0 <free>
    if (dec) {
 80005c4:	b144      	cbz	r4, 80005d8 <aesgcm_default_test_helper.constprop.0+0xb4>
        if (dec_inited)
 80005c6:	f1ba 0f00 	cmp.w	sl, #0
 80005ca:	d002      	beq.n	80005d2 <aesgcm_default_test_helper.constprop.0+0xae>
            wc_AesFree(dec);
 80005cc:	4620      	mov	r0, r4
 80005ce:	f008 fa40 	bl	8008a52 <wc_AesFree>
        XFREE(dec, HEAP_HINT, DYNAMIC_TYPE_AES);
 80005d2:	4620      	mov	r0, r4
 80005d4:	f01a fcec 	bl	801afb0 <free>
}
 80005d8:	4640      	mov	r0, r8
 80005da:	b023      	add	sp, #140	; 0x8c
 80005dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = wc_AesGcmSetKey(enc, key, keySz);
 80005e0:	2210      	movs	r2, #16
 80005e2:	4649      	mov	r1, r9
 80005e4:	4628      	mov	r0, r5
 80005e6:	f007 fee9 	bl	80083bc <wc_AesGcmSetKey>
    if (ret != 0)
 80005ea:	b150      	cbz	r0, 8000602 <aesgcm_default_test_helper.constprop.0+0xde>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80005ec:	f1c0 0800 	rsb	r8, r0, #0
 80005f0:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <aesgcm_default_test_helper.constprop.0+0x1b8>)
 80005f2:	483d      	ldr	r0, [pc, #244]	; (80006e8 <aesgcm_default_test_helper.constprop.0+0x1c4>)
 80005f4:	f3c8 080a 	ubfx	r8, r8, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80005f8:	fb03 0808 	mla	r8, r3, r8, r0
        dec_inited = 1;
 80005fc:	f04f 0a01 	mov.w	sl, #1
 8000600:	e7da      	b.n	80005b8 <aesgcm_default_test_helper.constprop.0+0x94>
    ret = wc_AesGcmEncrypt(enc, resultC, plain, plainSz, iv, ivSz,
 8000602:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8000604:	9305      	str	r3, [sp, #20]
 8000606:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8000608:	9304      	str	r3, [sp, #16]
 800060a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800060c:	e9cd b302 	strd	fp, r3, [sp, #8]
 8000610:	230c      	movs	r3, #12
 8000612:	e9cd 8300 	strd	r8, r3, [sp]
 8000616:	4632      	mov	r2, r6
 8000618:	463b      	mov	r3, r7
 800061a:	a916      	add	r1, sp, #88	; 0x58
 800061c:	4628      	mov	r0, r5
 800061e:	f007 ff9d 	bl	800855c <wc_AesGcmEncrypt>
    if (ret != 0)
 8000622:	b130      	cbz	r0, 8000632 <aesgcm_default_test_helper.constprop.0+0x10e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8000624:	f1c0 0800 	rsb	r8, r0, #0
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <aesgcm_default_test_helper.constprop.0+0x1b8>)
 800062a:	4830      	ldr	r0, [pc, #192]	; (80006ec <aesgcm_default_test_helper.constprop.0+0x1c8>)
 800062c:	f3c8 080a 	ubfx	r8, r8, #0, #11
 8000630:	e7e2      	b.n	80005f8 <aesgcm_default_test_helper.constprop.0+0xd4>
    if (cipher != NULL) {
 8000632:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8000634:	b963      	cbnz	r3, 8000650 <aesgcm_default_test_helper.constprop.0+0x12c>
    if (XMEMCMP(tag, resultT, tagSz))
 8000636:	f10d 0b18 	add.w	fp, sp, #24
 800063a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800063c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800063e:	4659      	mov	r1, fp
 8000640:	f01a fcbe 	bl	801afc0 <memcmp>
 8000644:	b180      	cbz	r0, 8000668 <aesgcm_default_test_helper.constprop.0+0x144>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8000646:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80006f0 <aesgcm_default_test_helper.constprop.0+0x1cc>
        dec_inited = 1;
 800064a:	f04f 0a01 	mov.w	sl, #1
 800064e:	e7b3      	b.n	80005b8 <aesgcm_default_test_helper.constprop.0+0x94>
        if (XMEMCMP(cipher, resultC, cipherSz))
 8000650:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8000652:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000654:	a916      	add	r1, sp, #88	; 0x58
 8000656:	f01a fcb3 	bl	801afc0 <memcmp>
 800065a:	2800      	cmp	r0, #0
 800065c:	d0eb      	beq.n	8000636 <aesgcm_default_test_helper.constprop.0+0x112>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800065e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80006f4 <aesgcm_default_test_helper.constprop.0+0x1d0>
        dec_inited = 1;
 8000662:	f04f 0a01 	mov.w	sl, #1
 8000666:	e7a7      	b.n	80005b8 <aesgcm_default_test_helper.constprop.0+0x94>
    ret = wc_AesGcmSetKey(dec, key, keySz);
 8000668:	2210      	movs	r2, #16
 800066a:	4649      	mov	r1, r9
 800066c:	4620      	mov	r0, r4
 800066e:	f007 fea5 	bl	80083bc <wc_AesGcmSetKey>
    if (ret != 0)
 8000672:	b130      	cbz	r0, 8000682 <aesgcm_default_test_helper.constprop.0+0x15e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8000674:	f1c0 0800 	rsb	r8, r0, #0
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <aesgcm_default_test_helper.constprop.0+0x1b8>)
 800067a:	481f      	ldr	r0, [pc, #124]	; (80006f8 <aesgcm_default_test_helper.constprop.0+0x1d4>)
 800067c:	f3c8 080a 	ubfx	r8, r8, #0, #11
 8000680:	e7ba      	b.n	80005f8 <aesgcm_default_test_helper.constprop.0+0xd4>
    ret = wc_AesGcmDecrypt(dec, resultP, resultC, cipherSz,
 8000682:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8000684:	9305      	str	r3, [sp, #20]
 8000686:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8000688:	9304      	str	r3, [sp, #16]
 800068a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800068c:	e9cd b302 	strd	fp, r3, [sp, #8]
 8000690:	230c      	movs	r3, #12
 8000692:	e9cd 8300 	strd	r8, r3, [sp]
 8000696:	aa16      	add	r2, sp, #88	; 0x58
 8000698:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800069a:	a90a      	add	r1, sp, #40	; 0x28
 800069c:	4620      	mov	r0, r4
 800069e:	f007 ffe5 	bl	800866c <wc_AesGcmDecrypt>
    if (ret != 0)
 80006a2:	4680      	mov	r8, r0
 80006a4:	b130      	cbz	r0, 80006b4 <aesgcm_default_test_helper.constprop.0+0x190>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80006a6:	f1c0 0800 	rsb	r8, r0, #0
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <aesgcm_default_test_helper.constprop.0+0x1b8>)
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <aesgcm_default_test_helper.constprop.0+0x1d8>)
 80006ae:	f3c8 080a 	ubfx	r8, r8, #0, #11
 80006b2:	e7a1      	b.n	80005f8 <aesgcm_default_test_helper.constprop.0+0xd4>
    if (plain != NULL) {
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d0a1      	beq.n	80005fc <aesgcm_default_test_helper.constprop.0+0xd8>
        if (XMEMCMP(plain, resultP, plainSz))
 80006b8:	463a      	mov	r2, r7
 80006ba:	a90a      	add	r1, sp, #40	; 0x28
 80006bc:	4630      	mov	r0, r6
 80006be:	f01a fc7f 	bl	801afc0 <memcmp>
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d09a      	beq.n	80005fc <aesgcm_default_test_helper.constprop.0+0xd8>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 80006c6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8000700 <aesgcm_default_test_helper.constprop.0+0x1dc>
        dec_inited = 1;
 80006ca:	f04f 0a01 	mov.w	sl, #1
 80006ce:	e773      	b.n	80005b8 <aesgcm_default_test_helper.constprop.0+0x94>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80006d0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8000704 <aesgcm_default_test_helper.constprop.0+0x1e0>
    return ret;
 80006d4:	e780      	b.n	80005d8 <aesgcm_default_test_helper.constprop.0+0xb4>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80006d6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8000708 <aesgcm_default_test_helper.constprop.0+0x1e4>
 80006da:	e75b      	b.n	8000594 <aesgcm_default_test_helper.constprop.0+0x70>
 80006dc:	fffe7960 	.word	0xfffe7960
 80006e0:	dfffd226 	.word	0xdfffd226
 80006e4:	dfffd221 	.word	0xdfffd221
 80006e8:	dfffd21b 	.word	0xdfffd21b
 80006ec:	dfffd211 	.word	0xdfffd211
 80006f0:	ffffd20b 	.word	0xffffd20b
 80006f4:	ffffd20e 	.word	0xffffd20e
 80006f8:	dfffd205 	.word	0xdfffd205
 80006fc:	dfffd1fd 	.word	0xdfffd1fd
 8000700:	ffffd1fa 	.word	0xffffd1fa
 8000704:	ffffd231 	.word	0xffffd231
 8000708:	ffffd22f 	.word	0xffffd22f

0800070c <error_test>:
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* unknownStr = wc_GetErrorString(0);
 800070e:	2000      	movs	r0, #0
{
 8000710:	b0a3      	sub	sp, #140	; 0x8c
    const char* unknownStr = wc_GetErrorString(0);
 8000712:	f012 fcfb 	bl	801310c <wc_GetErrorString>
    int missing[] = { -123, -124, -128, -129, -159, -163, -164,
 8000716:	4d33      	ldr	r5, [pc, #204]	; (80007e4 <error_test+0xd8>)
    const char* unknownStr = wc_GetErrorString(0);
 8000718:	4606      	mov	r6, r0
    int missing[] = { -123, -124, -128, -129, -159, -163, -164,
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	466c      	mov	r4, sp
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	e895 0003 	ldmia.w	r5, {r0, r1}
    int j = 0;
 800072c:	2700      	movs	r7, #0
    int missing[] = { -123, -124, -128, -129, -159, -163, -164,
 800072e:	e884 0003 	stmia.w	r4, {r0, r1}
    for (i = MAX_CODE_E-1; i >= WC_LAST_E; i--) {
 8000732:	f06f 0464 	mvn.w	r4, #100	; 0x64
        errStr = wc_GetErrorString(i);
 8000736:	4620      	mov	r0, r4
 8000738:	f012 fce8 	bl	801310c <wc_GetErrorString>
        wc_ErrorString(i, out);
 800073c:	a90e      	add	r1, sp, #56	; 0x38
        errStr = wc_GetErrorString(i);
 800073e:	4605      	mov	r5, r0
        wc_ErrorString(i, out);
 8000740:	4620      	mov	r0, r4
 8000742:	f012 fcf1 	bl	8013128 <wc_ErrorString>
        if (i != missing[j]) {
 8000746:	ab22      	add	r3, sp, #136	; 0x88
 8000748:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800074c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8000750:	42a3      	cmp	r3, r4
 8000752:	d015      	beq.n	8000780 <error_test+0x74>
            if (XSTRCMP(errStr, unknownStr) == 0)
 8000754:	4631      	mov	r1, r6
 8000756:	4628      	mov	r0, r5
 8000758:	f01a fdbb 	bl	801b2d2 <strcmp>
 800075c:	b3b0      	cbz	r0, 80007cc <error_test+0xc0>
            if (XSTRCMP(out, unknownStr) == 0)
 800075e:	4631      	mov	r1, r6
 8000760:	a80e      	add	r0, sp, #56	; 0x38
 8000762:	f01a fdb6 	bl	801b2d2 <strcmp>
 8000766:	b398      	cbz	r0, 80007d0 <error_test+0xc4>
            if (XSTRCMP(errStr, out) != 0)
 8000768:	a90e      	add	r1, sp, #56	; 0x38
 800076a:	4628      	mov	r0, r5
 800076c:	f01a fdb1 	bl	801b2d2 <strcmp>
 8000770:	bb80      	cbnz	r0, 80007d4 <error_test+0xc8>
            if (XSTRLEN(errStr) >= WOLFSSL_MAX_ERROR_SZ)
 8000772:	4628      	mov	r0, r5
 8000774:	f01a fdb7 	bl	801b2e6 <strlen>
 8000778:	284f      	cmp	r0, #79	; 0x4f
 800077a:	d90c      	bls.n	8000796 <error_test+0x8a>
                return WC_TEST_RET_ENC_NC;
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <error_test+0xdc>)
 800077e:	e023      	b.n	80007c8 <error_test+0xbc>
            if (XSTRCMP(errStr, unknownStr) != 0)
 8000780:	4631      	mov	r1, r6
 8000782:	4628      	mov	r0, r5
            j++;
 8000784:	3701      	adds	r7, #1
            if (XSTRCMP(errStr, unknownStr) != 0)
 8000786:	f01a fda4 	bl	801b2d2 <strcmp>
 800078a:	bb28      	cbnz	r0, 80007d8 <error_test+0xcc>
            if (XSTRCMP(out, unknownStr) != 0)
 800078c:	4631      	mov	r1, r6
 800078e:	a80e      	add	r0, sp, #56	; 0x38
 8000790:	f01a fd9f 	bl	801b2d2 <strcmp>
 8000794:	bb10      	cbnz	r0, 80007dc <error_test+0xd0>
    for (i = MAX_CODE_E-1; i >= WC_LAST_E; i--) {
 8000796:	3c01      	subs	r4, #1
 8000798:	f514 7f96 	cmn.w	r4, #300	; 0x12c
 800079c:	d1cb      	bne.n	8000736 <error_test+0x2a>
    errStr = wc_GetErrorString(i);
 800079e:	4620      	mov	r0, r4
 80007a0:	f012 fcb4 	bl	801310c <wc_GetErrorString>
    wc_ErrorString(i, out);
 80007a4:	a90e      	add	r1, sp, #56	; 0x38
    errStr = wc_GetErrorString(i);
 80007a6:	4605      	mov	r5, r0
    wc_ErrorString(i, out);
 80007a8:	4620      	mov	r0, r4
 80007aa:	f012 fcbd 	bl	8013128 <wc_ErrorString>
    if (XSTRCMP(errStr, unknownStr) != 0)
 80007ae:	4631      	mov	r1, r6
 80007b0:	4628      	mov	r0, r5
 80007b2:	f01a fd8e 	bl	801b2d2 <strcmp>
 80007b6:	b998      	cbnz	r0, 80007e0 <error_test+0xd4>
    if (XSTRCMP(out, unknownStr) != 0)
 80007b8:	4631      	mov	r1, r6
 80007ba:	a80e      	add	r0, sp, #56	; 0x38
 80007bc:	f01a fd89 	bl	801b2d2 <strcmp>
        return WC_TEST_RET_ENC_NC;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <error_test+0xe0>)
 80007c2:	2800      	cmp	r0, #0
 80007c4:	bf18      	it	ne
 80007c6:	4618      	movne	r0, r3
}
 80007c8:	b023      	add	sp, #140	; 0x8c
 80007ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return WC_TEST_RET_ENC_NC;
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <error_test+0xe4>)
 80007ce:	e7fb      	b.n	80007c8 <error_test+0xbc>
                return WC_TEST_RET_ENC_NC;
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <error_test+0xe8>)
 80007d2:	e7f9      	b.n	80007c8 <error_test+0xbc>
                return WC_TEST_RET_ENC_NC;
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <error_test+0xec>)
 80007d6:	e7f7      	b.n	80007c8 <error_test+0xbc>
                return WC_TEST_RET_ENC_NC;
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <error_test+0xf0>)
 80007da:	e7f5      	b.n	80007c8 <error_test+0xbc>
                return WC_TEST_RET_ENC_NC;
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <error_test+0xf4>)
 80007de:	e7f3      	b.n	80007c8 <error_test+0xbc>
        return WC_TEST_RET_ENC_NC;
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <error_test+0xf8>)
 80007e2:	e7f1      	b.n	80007c8 <error_test+0xbc>
 80007e4:	0801bd78 	.word	0x0801bd78
 80007e8:	fffff7aa 	.word	0xfffff7aa
 80007ec:	fffff799 	.word	0xfffff799
 80007f0:	fffff7b0 	.word	0xfffff7b0
 80007f4:	fffff7ae 	.word	0xfffff7ae
 80007f8:	fffff7ac 	.word	0xfffff7ac
 80007fc:	fffff7a5 	.word	0xfffff7a5
 8000800:	fffff7a3 	.word	0xfffff7a3
 8000804:	fffff79b 	.word	0xfffff79b

08000808 <base64_test>:
{
 8000808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800080c:	b0ca      	sub	sp, #296	; 0x128
    byte       longData[79] = { 0 };
 800080e:	2100      	movs	r1, #0
 8000810:	224b      	movs	r2, #75	; 0x4b
 8000812:	a817      	add	r0, sp, #92	; 0x5c
    byte goodChar[] =
 8000814:	2542      	movs	r5, #66	; 0x42
    byte       longData[79] = { 0 };
 8000816:	9116      	str	r1, [sp, #88]	; 0x58
 8000818:	f01a fc0a 	bl	801b030 <memset>
    byte goodChar[] =
 800081c:	49ab      	ldr	r1, [pc, #684]	; (8000acc <base64_test+0x2c4>)
 800081e:	462a      	mov	r2, r5
 8000820:	a805      	add	r0, sp, #20
 8000822:	f01a fbdd 	bl	801afe0 <memcpy>
    byte charTest[] = "A+Gd\0\0\0";
 8000826:	4aaa      	ldr	r2, [pc, #680]	; (8000ad0 <base64_test+0x2c8>)
 8000828:	6b90      	ldr	r0, [r2, #56]	; 0x38
 800082a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800082c:	ab03      	add	r3, sp, #12
 800082e:	c303      	stmia	r3!, {r0, r1}
    outLen = sizeof(out);
 8000830:	2480      	movs	r4, #128	; 0x80
    ret = Base64_Decode(good, sizeof(good), out, &outLen);
 8000832:	48a8      	ldr	r0, [pc, #672]	; (8000ad4 <base64_test+0x2cc>)
    outLen = sizeof(out);
 8000834:	9401      	str	r4, [sp, #4]
    ret = Base64_Decode(good, sizeof(good), out, &outLen);
 8000836:	ab01      	add	r3, sp, #4
 8000838:	aa2a      	add	r2, sp, #168	; 0xa8
 800083a:	2108      	movs	r1, #8
 800083c:	f011 fd37 	bl	80122ae <Base64_Decode>
    if (ret != 0)
 8000840:	b158      	cbz	r0, 800085a <base64_test+0x52>
        return WC_TEST_RET_ENC_EC(ret);
 8000842:	4ba5      	ldr	r3, [pc, #660]	; (8000ad8 <base64_test+0x2d0>)
 8000844:	4240      	negs	r0, r0
 8000846:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800084a:	4358      	muls	r0, r3
 800084c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000850:	f6a0 008d 	subw	r0, r0, #2189	; 0x88d
}
 8000854:	b04a      	add	sp, #296	; 0x128
 8000856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = Base64_Decode(goodEnd, sizeof(goodEnd), out, &outLen);
 800085a:	48a0      	ldr	r0, [pc, #640]	; (8000adc <base64_test+0x2d4>)
    outLen = sizeof(out);
 800085c:	9401      	str	r4, [sp, #4]
    ret = Base64_Decode(goodEnd, sizeof(goodEnd), out, &outLen);
 800085e:	ab01      	add	r3, sp, #4
 8000860:	aa2a      	add	r2, sp, #168	; 0xa8
 8000862:	2108      	movs	r1, #8
 8000864:	f011 fd23 	bl	80122ae <Base64_Decode>
    if (ret != 0)
 8000868:	b150      	cbz	r0, 8000880 <base64_test+0x78>
        return WC_TEST_RET_ENC_EC(ret);
 800086a:	4b9b      	ldr	r3, [pc, #620]	; (8000ad8 <base64_test+0x2d0>)
 800086c:	4240      	negs	r0, r0
 800086e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000872:	4358      	muls	r0, r3
 8000874:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000878:	f46f 6209 	mvn.w	r2, #2192	; 0x890
 800087c:	4410      	add	r0, r2
 800087e:	e7e9      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Decode(goodChar, sizeof(goodChar), goodChar, &outLen);
 8000880:	aa05      	add	r2, sp, #20
 8000882:	ab01      	add	r3, sp, #4
 8000884:	4629      	mov	r1, r5
 8000886:	4610      	mov	r0, r2
    outLen = sizeof(goodChar);
 8000888:	9501      	str	r5, [sp, #4]
    ret = Base64_Decode(goodChar, sizeof(goodChar), goodChar, &outLen);
 800088a:	f011 fd10 	bl	80122ae <Base64_Decode>
    if (ret != 0)
 800088e:	b148      	cbz	r0, 80008a4 <base64_test+0x9c>
        return WC_TEST_RET_ENC_EC(ret);
 8000890:	4b91      	ldr	r3, [pc, #580]	; (8000ad8 <base64_test+0x2d0>)
 8000892:	4240      	negs	r0, r0
 8000894:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000898:	4358      	muls	r0, r3
 800089a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800089e:	f6a0 0095 	subw	r0, r0, #2197	; 0x895
 80008a2:	e7d7      	b.n	8000854 <base64_test+0x4c>
    if (outLen != 64 / 4 * 3)
 80008a4:	9b01      	ldr	r3, [sp, #4]
 80008a6:	2b30      	cmp	r3, #48	; 0x30
 80008a8:	f040 819a 	bne.w	8000be0 <base64_test+0x3d8>
    ret = Base64_Decode(good_spaces, sizeof(good_spaces), out, &outLen);
 80008ac:	488c      	ldr	r0, [pc, #560]	; (8000ae0 <base64_test+0x2d8>)
    outLen = sizeof(out);
 80008ae:	9401      	str	r4, [sp, #4]
    ret = Base64_Decode(good_spaces, sizeof(good_spaces), out, &outLen);
 80008b0:	ab01      	add	r3, sp, #4
 80008b2:	aa2a      	add	r2, sp, #168	; 0xa8
 80008b4:	210b      	movs	r1, #11
 80008b6:	f011 fcfa 	bl	80122ae <Base64_Decode>
    if (ret != 0)
 80008ba:	4605      	mov	r5, r0
 80008bc:	b148      	cbz	r0, 80008d2 <base64_test+0xca>
        return WC_TEST_RET_ENC_EC(ret);
 80008be:	4d86      	ldr	r5, [pc, #536]	; (8000ad8 <base64_test+0x2d0>)
 80008c0:	4240      	negs	r0, r0
 80008c2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80008c6:	4368      	muls	r0, r5
 80008c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008cc:	f6a0 009b 	subw	r0, r0, #2203	; 0x89b
 80008d0:	e7c0      	b.n	8000854 <base64_test+0x4c>
    outLen = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	9301      	str	r3, [sp, #4]
    ret = Base64_Decode(good, sizeof(good), out, &outLen);
 80008d6:	487f      	ldr	r0, [pc, #508]	; (8000ad4 <base64_test+0x2cc>)
 80008d8:	ab01      	add	r3, sp, #4
 80008da:	aa2a      	add	r2, sp, #168	; 0xa8
 80008dc:	2108      	movs	r1, #8
 80008de:	f011 fce6 	bl	80122ae <Base64_Decode>
    if (ret != BAD_FUNC_ARG)
 80008e2:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80008e6:	d00a      	beq.n	80008fe <base64_test+0xf6>
        return WC_TEST_RET_ENC_EC(ret);
 80008e8:	4b7b      	ldr	r3, [pc, #492]	; (8000ad8 <base64_test+0x2d0>)
 80008ea:	4240      	negs	r0, r0
 80008ec:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80008f0:	4358      	muls	r0, r3
 80008f2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008f6:	f46f 630a 	mvn.w	r3, #2208	; 0x8a0
 80008fa:	4418      	add	r0, r3
 80008fc:	e7aa      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Decode(badEOL, sizeof(badEOL), out, &outLen);
 80008fe:	4879      	ldr	r0, [pc, #484]	; (8000ae4 <base64_test+0x2dc>)
    outLen = sizeof(out);
 8000900:	9401      	str	r4, [sp, #4]
    ret = Base64_Decode(badEOL, sizeof(badEOL), out, &outLen);
 8000902:	ab01      	add	r3, sp, #4
 8000904:	aa2a      	add	r2, sp, #168	; 0xa8
 8000906:	2108      	movs	r1, #8
 8000908:	f011 fcd1 	bl	80122ae <Base64_Decode>
    if (ret != ASN_INPUT_E)
 800090c:	f110 0f9a 	cmn.w	r0, #154	; 0x9a
 8000910:	d009      	beq.n	8000926 <base64_test+0x11e>
        return WC_TEST_RET_ENC_EC(ret);
 8000912:	4b71      	ldr	r3, [pc, #452]	; (8000ad8 <base64_test+0x2d0>)
 8000914:	4240      	negs	r0, r0
 8000916:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800091a:	4358      	muls	r0, r3
 800091c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000920:	f6a0 00a6 	subw	r0, r0, #2214	; 0x8a6
 8000924:	e796      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Decode(badPadding, sizeof(badPadding), out, &outLen);
 8000926:	4870      	ldr	r0, [pc, #448]	; (8000ae8 <base64_test+0x2e0>)
    outLen = sizeof(out);
 8000928:	9401      	str	r4, [sp, #4]
    ret = Base64_Decode(badPadding, sizeof(badPadding), out, &outLen);
 800092a:	ab01      	add	r3, sp, #4
 800092c:	aa2a      	add	r2, sp, #168	; 0xa8
 800092e:	2105      	movs	r1, #5
 8000930:	f011 fcbd 	bl	80122ae <Base64_Decode>
    if (ret != ASN_INPUT_E)
 8000934:	f110 0f9a 	cmn.w	r0, #154	; 0x9a
 8000938:	d009      	beq.n	800094e <base64_test+0x146>
        return WC_TEST_RET_ENC_EC(ret);
 800093a:	4b67      	ldr	r3, [pc, #412]	; (8000ad8 <base64_test+0x2d0>)
 800093c:	4240      	negs	r0, r0
 800093e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000942:	4358      	muls	r0, r3
 8000944:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000948:	f6a0 00aa 	subw	r0, r0, #2218	; 0x8aa
 800094c:	e782      	b.n	8000854 <base64_test+0x4c>
        ret = Base64_Decode(badSmall + i, 4, out, &outLen);
 800094e:	4f67      	ldr	r7, [pc, #412]	; (8000aec <base64_test+0x2e4>)
        ret = Base64_Decode(badLarge + i, 4, out, &outLen);
 8000950:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000af0 <base64_test+0x2e8>
    for (i = 0; i < 4; i++) {
 8000954:	462e      	mov	r6, r5
        ret = Base64_Decode(badSmall + i, 4, out, &outLen);
 8000956:	ab01      	add	r3, sp, #4
 8000958:	aa2a      	add	r2, sp, #168	; 0xa8
 800095a:	2104      	movs	r1, #4
 800095c:	19b8      	adds	r0, r7, r6
        outLen = sizeof(out);
 800095e:	9401      	str	r4, [sp, #4]
        ret = Base64_Decode(badSmall + i, 4, out, &outLen);
 8000960:	f011 fca5 	bl	80122ae <Base64_Decode>
        if (ret != ASN_INPUT_E)
 8000964:	309a      	adds	r0, #154	; 0x9a
 8000966:	d006      	beq.n	8000976 <base64_test+0x16e>
            return WC_TEST_RET_ENC_I(i);
 8000968:	485b      	ldr	r0, [pc, #364]	; (8000ad8 <base64_test+0x2d0>)
 800096a:	4370      	muls	r0, r6
 800096c:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 8000970:	f5a0 600b 	sub.w	r0, r0, #2224	; 0x8b0
 8000974:	e76e      	b.n	8000854 <base64_test+0x4c>
        ret = Base64_Decode(badLarge + i, 4, out, &outLen);
 8000976:	ab01      	add	r3, sp, #4
 8000978:	aa2a      	add	r2, sp, #168	; 0xa8
 800097a:	2104      	movs	r1, #4
 800097c:	eb08 0006 	add.w	r0, r8, r6
 8000980:	f011 fc95 	bl	80122ae <Base64_Decode>
        if (ret != ASN_INPUT_E)
 8000984:	309a      	adds	r0, #154	; 0x9a
 8000986:	d006      	beq.n	8000996 <base64_test+0x18e>
            return WC_TEST_RET_ENC_I(i);
 8000988:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <base64_test+0x2d0>)
 800098a:	4370      	muls	r0, r6
 800098c:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 8000990:	f6a0 00b3 	subw	r0, r0, #2227	; 0x8b3
 8000994:	e75e      	b.n	8000854 <base64_test+0x4c>
    for (i = 0; i < 4; i++) {
 8000996:	3601      	adds	r6, #1
 8000998:	2e04      	cmp	r6, #4
 800099a:	d1dc      	bne.n	8000956 <base64_test+0x14e>
    for (i = 1; i < 0x2b; i++) {
 800099c:	2401      	movs	r4, #1
        outLen = sizeof(out);
 800099e:	2680      	movs	r6, #128	; 0x80
        ret = Base64_Decode(charTest, sizeof(charTest), out, &outLen);
 80009a0:	ab01      	add	r3, sp, #4
 80009a2:	aa2a      	add	r2, sp, #168	; 0xa8
 80009a4:	2108      	movs	r1, #8
 80009a6:	a803      	add	r0, sp, #12
        outLen = sizeof(out);
 80009a8:	9601      	str	r6, [sp, #4]
        charTest[0] = (byte)i;
 80009aa:	f88d 400c 	strb.w	r4, [sp, #12]
        ret = Base64_Decode(charTest, sizeof(charTest), out, &outLen);
 80009ae:	f011 fc7e 	bl	80122ae <Base64_Decode>
        if (ret != ASN_INPUT_E)
 80009b2:	309a      	adds	r0, #154	; 0x9a
 80009b4:	d006      	beq.n	80009c4 <base64_test+0x1bc>
            return WC_TEST_RET_ENC_I(i);
 80009b6:	4848      	ldr	r0, [pc, #288]	; (8000ad8 <base64_test+0x2d0>)
 80009b8:	4360      	muls	r0, r4
 80009ba:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 80009be:	f6a0 00bb 	subw	r0, r0, #2235	; 0x8bb
 80009c2:	e747      	b.n	8000854 <base64_test+0x4c>
    for (i = 1; i < 0x2b; i++) {
 80009c4:	3401      	adds	r4, #1
 80009c6:	2c2b      	cmp	r4, #43	; 0x2b
 80009c8:	d1ea      	bne.n	80009a0 <base64_test+0x198>
 80009ca:	4c4a      	ldr	r4, [pc, #296]	; (8000af4 <base64_test+0x2ec>)
        outLen = sizeof(out);
 80009cc:	2680      	movs	r6, #128	; 0x80
        charTest[0] = badChar[i];
 80009ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 80009d2:	f88d 300c 	strb.w	r3, [sp, #12]
        ret = Base64_Decode(charTest, sizeof(charTest), out, &outLen);
 80009d6:	aa2a      	add	r2, sp, #168	; 0xa8
 80009d8:	ab01      	add	r3, sp, #4
 80009da:	2108      	movs	r1, #8
 80009dc:	a803      	add	r0, sp, #12
        outLen = sizeof(out);
 80009de:	9601      	str	r6, [sp, #4]
        ret = Base64_Decode(charTest, sizeof(charTest), out, &outLen);
 80009e0:	f011 fc65 	bl	80122ae <Base64_Decode>
        if (ret != ASN_INPUT_E)
 80009e4:	309a      	adds	r0, #154	; 0x9a
 80009e6:	d006      	beq.n	80009f6 <base64_test+0x1ee>
            return WC_TEST_RET_ENC_I(i);
 80009e8:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <base64_test+0x2d0>)
 80009ea:	4368      	muls	r0, r5
 80009ec:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 80009f0:	f6a0 00c3 	subw	r0, r0, #2243	; 0x8c3
 80009f4:	e72e      	b.n	8000854 <base64_test+0x4c>
    for (i = 0; i < (int)sizeof(badChar) - 1; i++) {
 80009f6:	3501      	adds	r5, #1
 80009f8:	2d10      	cmp	r5, #16
 80009fa:	d1e8      	bne.n	80009ce <base64_test+0x1c6>
    for (i = 0x7b; i < 0x100; i++) {
 80009fc:	247b      	movs	r4, #123	; 0x7b
        outLen = sizeof(out);
 80009fe:	2580      	movs	r5, #128	; 0x80
        ret = Base64_Decode(charTest, sizeof(charTest), out, &outLen);
 8000a00:	ab01      	add	r3, sp, #4
 8000a02:	aa2a      	add	r2, sp, #168	; 0xa8
 8000a04:	2108      	movs	r1, #8
 8000a06:	a803      	add	r0, sp, #12
        outLen = sizeof(out);
 8000a08:	9501      	str	r5, [sp, #4]
        charTest[0] = (byte)i;
 8000a0a:	f88d 400c 	strb.w	r4, [sp, #12]
        ret = Base64_Decode(charTest, sizeof(charTest), out, &outLen);
 8000a0e:	f011 fc4e 	bl	80122ae <Base64_Decode>
        if (ret != ASN_INPUT_E)
 8000a12:	309a      	adds	r0, #154	; 0x9a
 8000a14:	d006      	beq.n	8000a24 <base64_test+0x21c>
            return WC_TEST_RET_ENC_I(i);
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <base64_test+0x2d0>)
 8000a18:	4360      	muls	r0, r4
 8000a1a:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 8000a1e:	f6a0 00cb 	subw	r0, r0, #2251	; 0x8cb
 8000a22:	e717      	b.n	8000854 <base64_test+0x4c>
    for (i = 0x7b; i < 0x100; i++) {
 8000a24:	3401      	adds	r4, #1
 8000a26:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8000a2a:	d1e9      	bne.n	8000a00 <base64_test+0x1f8>
    dataLen = sizeof(data);
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	9302      	str	r3, [sp, #8]
    ret = Base64_Decode(symbols, sizeof(symbols), data, &dataLen);
 8000a30:	466a      	mov	r2, sp
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <base64_test+0x2f0>)
 8000a34:	ab02      	add	r3, sp, #8
 8000a36:	2105      	movs	r1, #5
 8000a38:	f011 fc39 	bl	80122ae <Base64_Decode>
    if (ret != 0)
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	b148      	cbz	r0, 8000a54 <base64_test+0x24c>
        return WC_TEST_RET_ENC_EC(ret);
 8000a40:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <base64_test+0x2d0>)
 8000a42:	4240      	negs	r0, r0
 8000a44:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000a48:	4350      	muls	r0, r2
 8000a4a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a4e:	f6a0 00d4 	subw	r0, r0, #2260	; 0x8d4
 8000a52:	e6ff      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Encode(data, dataLen, NULL, &outLen);
 8000a54:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000a56:	9501      	str	r5, [sp, #4]
    ret = Base64_Encode(data, dataLen, NULL, &outLen);
 8000a58:	ab01      	add	r3, sp, #4
 8000a5a:	4668      	mov	r0, sp
 8000a5c:	f011 fcff 	bl	801245e <Base64_Encode>
    if (ret != LENGTH_ONLY_E)
 8000a60:	f110 0fca 	cmn.w	r0, #202	; 0xca
 8000a64:	d009      	beq.n	8000a7a <base64_test+0x272>
        return WC_TEST_RET_ENC_EC(ret);
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <base64_test+0x2d0>)
 8000a68:	4240      	negs	r0, r0
 8000a6a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000a6e:	4358      	muls	r0, r3
 8000a70:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a74:	f6a0 00d8 	subw	r0, r0, #2264	; 0x8d8
 8000a78:	e6ec      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Encode(data, dataLen, out, &outLen);
 8000a7a:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000a7c:	9501      	str	r5, [sp, #4]
    ret = Base64_Encode(data, dataLen, out, &outLen);
 8000a7e:	ab01      	add	r3, sp, #4
 8000a80:	aa2a      	add	r2, sp, #168	; 0xa8
 8000a82:	4668      	mov	r0, sp
 8000a84:	f011 fceb 	bl	801245e <Base64_Encode>
    if (ret != 0)
 8000a88:	4604      	mov	r4, r0
 8000a8a:	b148      	cbz	r0, 8000aa0 <base64_test+0x298>
        return WC_TEST_RET_ENC_EC(ret);
 8000a8c:	4c12      	ldr	r4, [pc, #72]	; (8000ad8 <base64_test+0x2d0>)
 8000a8e:	4240      	negs	r0, r0
 8000a90:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000a94:	4360      	muls	r0, r4
 8000a96:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a9a:	f6a0 00dc 	subw	r0, r0, #2268	; 0x8dc
 8000a9e:	e6d9      	b.n	8000854 <base64_test+0x4c>
    outLen = 7;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	9301      	str	r3, [sp, #4]
    ret = Base64_EncodeEsc(data, dataLen, out, &outLen);
 8000aa4:	9902      	ldr	r1, [sp, #8]
 8000aa6:	ab01      	add	r3, sp, #4
 8000aa8:	aa2a      	add	r2, sp, #168	; 0xa8
 8000aaa:	4668      	mov	r0, sp
 8000aac:	f011 fcde 	bl	801246c <Base64_EncodeEsc>
    if (ret != BUFFER_E)
 8000ab0:	f110 0f84 	cmn.w	r0, #132	; 0x84
 8000ab4:	d022      	beq.n	8000afc <base64_test+0x2f4>
        return WC_TEST_RET_ENC_EC(ret);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <base64_test+0x2d0>)
 8000ab8:	4240      	negs	r0, r0
 8000aba:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000abe:	4358      	muls	r0, r3
 8000ac0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ac4:	f5a0 600e 	sub.w	r0, r0, #2272	; 0x8e0
 8000ac8:	e6c4      	b.n	8000854 <base64_test+0x4c>
 8000aca:	bf00      	nop
 8000acc:	0801dc9e 	.word	0x0801dc9e
 8000ad0:	0801bd78 	.word	0x0801bd78
 8000ad4:	0801f03f 	.word	0x0801f03f
 8000ad8:	fffe7960 	.word	0xfffe7960
 8000adc:	0801f047 	.word	0x0801f047
 8000ae0:	0801f04f 	.word	0x0801f04f
 8000ae4:	0801ee79 	.word	0x0801ee79
 8000ae8:	0801ee8a 	.word	0x0801ee8a
 8000aec:	0801ee8f 	.word	0x0801ee8f
 8000af0:	0801ee81 	.word	0x0801ee81
 8000af4:	0801ee68 	.word	0x0801ee68
 8000af8:	0801fbf4 	.word	0x0801fbf4
    ret = Base64_EncodeEsc(data, dataLen, NULL, &outLen);
 8000afc:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000afe:	9501      	str	r5, [sp, #4]
    ret = Base64_EncodeEsc(data, dataLen, NULL, &outLen);
 8000b00:	ab01      	add	r3, sp, #4
 8000b02:	4622      	mov	r2, r4
 8000b04:	4668      	mov	r0, sp
 8000b06:	f011 fcb1 	bl	801246c <Base64_EncodeEsc>
    if (ret != LENGTH_ONLY_E)
 8000b0a:	f110 0fca 	cmn.w	r0, #202	; 0xca
 8000b0e:	d009      	beq.n	8000b24 <base64_test+0x31c>
        return WC_TEST_RET_ENC_EC(ret);
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <base64_test+0x3dc>)
 8000b12:	4240      	negs	r0, r0
 8000b14:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000b18:	4358      	muls	r0, r3
 8000b1a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b1e:	f6a0 00e4 	subw	r0, r0, #2276	; 0x8e4
 8000b22:	e697      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_EncodeEsc(data, dataLen, out, &outLen);
 8000b24:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000b26:	9501      	str	r5, [sp, #4]
    ret = Base64_EncodeEsc(data, dataLen, out, &outLen);
 8000b28:	ab01      	add	r3, sp, #4
 8000b2a:	aa2a      	add	r2, sp, #168	; 0xa8
 8000b2c:	4668      	mov	r0, sp
 8000b2e:	f011 fc9d 	bl	801246c <Base64_EncodeEsc>
    if (ret != 0)
 8000b32:	b148      	cbz	r0, 8000b48 <base64_test+0x340>
        return WC_TEST_RET_ENC_EC(ret);
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <base64_test+0x3dc>)
 8000b36:	4240      	negs	r0, r0
 8000b38:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000b3c:	4358      	muls	r0, r3
 8000b3e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b42:	f6a0 00e8 	subw	r0, r0, #2280	; 0x8e8
 8000b46:	e685      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Encode_NoNl(data, dataLen, out, &outLen);
 8000b48:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000b4a:	9501      	str	r5, [sp, #4]
    ret = Base64_Encode_NoNl(data, dataLen, out, &outLen);
 8000b4c:	ab01      	add	r3, sp, #4
 8000b4e:	aa2a      	add	r2, sp, #168	; 0xa8
 8000b50:	4668      	mov	r0, sp
 8000b52:	f011 fc92 	bl	801247a <Base64_Encode_NoNl>
    if (ret != 0)
 8000b56:	b148      	cbz	r0, 8000b6c <base64_test+0x364>
        return WC_TEST_RET_ENC_EC(ret);
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <base64_test+0x3dc>)
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000b60:	4358      	muls	r0, r3
 8000b62:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b66:	f6a0 00ec 	subw	r0, r0, #2284	; 0x8ec
 8000b6a:	e673      	b.n	8000854 <base64_test+0x4c>
    dataLen = sizeof(longData);
 8000b6c:	214f      	movs	r1, #79	; 0x4f
    ret = Base64_Encode(longData, dataLen, out, &outLen);
 8000b6e:	ab01      	add	r3, sp, #4
 8000b70:	aa2a      	add	r2, sp, #168	; 0xa8
 8000b72:	a816      	add	r0, sp, #88	; 0x58
    outLen = sizeof(out);
 8000b74:	9501      	str	r5, [sp, #4]
    dataLen = sizeof(longData);
 8000b76:	9102      	str	r1, [sp, #8]
    ret = Base64_Encode(longData, dataLen, out, &outLen);
 8000b78:	f011 fc71 	bl	801245e <Base64_Encode>
    if (ret != 0)
 8000b7c:	b148      	cbz	r0, 8000b92 <base64_test+0x38a>
        return WC_TEST_RET_ENC_EC(ret);
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <base64_test+0x3dc>)
 8000b80:	4240      	negs	r0, r0
 8000b82:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000b86:	4358      	muls	r0, r3
 8000b88:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b8c:	f6a0 00f3 	subw	r0, r0, #2291	; 0x8f3
 8000b90:	e660      	b.n	8000854 <base64_test+0x4c>
    outLen = sizeof(out);
 8000b92:	2480      	movs	r4, #128	; 0x80
    ret = Base64_EncodeEsc(longData, dataLen, out, &outLen);
 8000b94:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000b96:	9401      	str	r4, [sp, #4]
    ret = Base64_EncodeEsc(longData, dataLen, out, &outLen);
 8000b98:	ab01      	add	r3, sp, #4
 8000b9a:	aa2a      	add	r2, sp, #168	; 0xa8
 8000b9c:	a816      	add	r0, sp, #88	; 0x58
 8000b9e:	f011 fc65 	bl	801246c <Base64_EncodeEsc>
    if (ret != 0)
 8000ba2:	b148      	cbz	r0, 8000bb8 <base64_test+0x3b0>
        return WC_TEST_RET_ENC_EC(ret);
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <base64_test+0x3dc>)
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000bac:	4358      	muls	r0, r3
 8000bae:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bb2:	f6a0 00f7 	subw	r0, r0, #2295	; 0x8f7
 8000bb6:	e64d      	b.n	8000854 <base64_test+0x4c>
    ret = Base64_Encode_NoNl(longData, dataLen, out, &outLen);
 8000bb8:	9902      	ldr	r1, [sp, #8]
    outLen = sizeof(out);
 8000bba:	9401      	str	r4, [sp, #4]
    ret = Base64_Encode_NoNl(longData, dataLen, out, &outLen);
 8000bbc:	ab01      	add	r3, sp, #4
 8000bbe:	aa2a      	add	r2, sp, #168	; 0xa8
 8000bc0:	a816      	add	r0, sp, #88	; 0x58
 8000bc2:	f011 fc5a 	bl	801247a <Base64_Encode_NoNl>
    if (ret != 0)
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	f43f ae44 	beq.w	8000854 <base64_test+0x4c>
        return WC_TEST_RET_ENC_EC(ret);
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <base64_test+0x3dc>)
 8000bce:	4240      	negs	r0, r0
 8000bd0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000bd4:	4358      	muls	r0, r3
 8000bd6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bda:	f6a0 00fb 	subw	r0, r0, #2299	; 0x8fb
 8000bde:	e639      	b.n	8000854 <base64_test+0x4c>
        return WC_TEST_RET_ENC_NC;
 8000be0:	4801      	ldr	r0, [pc, #4]	; (8000be8 <base64_test+0x3e0>)
 8000be2:	e637      	b.n	8000854 <base64_test+0x4c>
 8000be4:	fffe7960 	.word	0xfffe7960
 8000be8:	fffff769 	.word	0xfffff769

08000bec <asn_test>:
{
 8000bec:	b510      	push	{r4, lr}
 8000bee:	b092      	sub	sp, #72	; 0x48
    ret = wc_GetDateInfo(dateBuf, (int)sizeof(dateBuf), &datePart, &format,
 8000bf0:	ab04      	add	r3, sp, #16
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <asn_test+0xdc>)
 8000bf6:	f10d 030f 	add.w	r3, sp, #15
 8000bfa:	aa05      	add	r2, sp, #20
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f010 f863 	bl	8010cc8 <wc_GetDateInfo>
    if (ret != 0)
 8000c02:	4604      	mov	r4, r0
 8000c04:	b150      	cbz	r0, 8000c1c <asn_test+0x30>
        return WC_TEST_RET_ENC_EC(ret);
 8000c06:	4c31      	ldr	r4, [pc, #196]	; (8000ccc <asn_test+0xe0>)
 8000c08:	4240      	negs	r0, r0
 8000c0a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000c0e:	4360      	muls	r0, r4
 8000c10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c14:	f6a0 103a 	subw	r0, r0, #2362	; 0x93a
}
 8000c18:	b012      	add	sp, #72	; 0x48
 8000c1a:	bd10      	pop	{r4, pc}
    if ((ret = wc_GetTime(NULL, sizeof(now))) != BAD_FUNC_ARG)
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	f010 f841 	bl	8010ca4 <wc_GetTime>
 8000c22:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8000c26:	d009      	beq.n	8000c3c <asn_test+0x50>
        return WC_TEST_RET_ENC_EC(ret);
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <asn_test+0xe0>)
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000c30:	4358      	muls	r0, r3
 8000c32:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c36:	f6a0 103f 	subw	r0, r0, #2367	; 0x93f
 8000c3a:	e7ed      	b.n	8000c18 <asn_test+0x2c>
    if ((ret = wc_GetTime(&now, 0)) != BUFFER_E)
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	a806      	add	r0, sp, #24
 8000c40:	f010 f830 	bl	8010ca4 <wc_GetTime>
 8000c44:	f110 0f84 	cmn.w	r0, #132	; 0x84
 8000c48:	d00a      	beq.n	8000c60 <asn_test+0x74>
        return WC_TEST_RET_ENC_EC(ret);
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <asn_test+0xe0>)
 8000c4c:	4240      	negs	r0, r0
 8000c4e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000c52:	4358      	muls	r0, r3
 8000c54:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c58:	f46f 6314 	mvn.w	r3, #2368	; 0x940
 8000c5c:	4418      	add	r0, r3
 8000c5e:	e7db      	b.n	8000c18 <asn_test+0x2c>
    now = 0;
 8000c60:	2200      	movs	r2, #0
 8000c62:	2300      	movs	r3, #0
    if ((ret = wc_GetTime(&now, sizeof(now))) != 0) {
 8000c64:	2108      	movs	r1, #8
 8000c66:	a806      	add	r0, sp, #24
    now = 0;
 8000c68:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if ((ret = wc_GetTime(&now, sizeof(now))) != 0) {
 8000c6c:	f010 f81a 	bl	8010ca4 <wc_GetTime>
 8000c70:	b148      	cbz	r0, 8000c86 <asn_test+0x9a>
        return WC_TEST_RET_ENC_EC(ret);
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <asn_test+0xe0>)
 8000c74:	4240      	negs	r0, r0
 8000c76:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000c7a:	4358      	muls	r0, r3
 8000c7c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c80:	f6a0 1045 	subw	r0, r0, #2373	; 0x945
 8000c84:	e7c8      	b.n	8000c18 <asn_test+0x2c>
    if (now == 0) {
 8000c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	d109      	bne.n	8000ca2 <asn_test+0xb6>
        printf("RTC/Time not set!\n");
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <asn_test+0xe4>)
 8000c90:	f01a fab4 	bl	801b1fc <iprintf>
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <asn_test+0xe8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6898      	ldr	r0, [r3, #8]
 8000c9a:	f01a f877 	bl	801ad8c <fflush>
        return WC_TEST_RET_ENC_NC;
 8000c9e:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <asn_test+0xec>)
 8000ca0:	e7ba      	b.n	8000c18 <asn_test+0x2c>
    ret = wc_GetDateAsCalendarTime(datePart, length, format, &timearg);
 8000ca2:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8000ca6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000caa:	ab09      	add	r3, sp, #36	; 0x24
 8000cac:	f010 f817 	bl	8010cde <wc_GetDateAsCalendarTime>
    if (ret != 0)
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d0b1      	beq.n	8000c18 <asn_test+0x2c>
        return WC_TEST_RET_ENC_EC(ret);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <asn_test+0xe0>)
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000cbc:	4358      	muls	r0, r3
 8000cbe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000cc2:	f6a0 104e 	subw	r0, r0, #2382	; 0x94e
 8000cc6:	e7a7      	b.n	8000c18 <asn_test+0x2c>
 8000cc8:	0801ef3e 	.word	0x0801ef3e
 8000ccc:	fffe7960 	.word	0xfffe7960
 8000cd0:	0801dce0 	.word	0x0801dce0
 8000cd4:	20000188 	.word	0x20000188
 8000cd8:	fffff6b7 	.word	0xfffff6b7

08000cdc <sha_test>:
{
 8000cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a.inLen  = XSTRLEN(a.input);
 8000ce0:	4b78      	ldr	r3, [pc, #480]	; (8000ec4 <sha_test+0x1e8>)
    b.inLen  = XSTRLEN(b.input);
 8000ce2:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8000ec8 <sha_test+0x1ec>
    c.inLen  = XSTRLEN(c.input);
 8000ce6:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8000ecc <sha_test+0x1f0>
    d.inLen  = XSTRLEN(d.input);
 8000cea:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8000ed0 <sha_test+0x1f4>
    e.inLen  = XSTRLEN(e.input);
 8000cee:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8000ed4 <sha_test+0x1f8>
{
 8000cf2:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
    a.inLen  = XSTRLEN(a.input);
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f01a faf5 	bl	801b2e6 <strlen>
 8000cfc:	4607      	mov	r7, r0
    b.inLen  = XSTRLEN(b.input);
 8000cfe:	4658      	mov	r0, fp
 8000d00:	f01a faf1 	bl	801b2e6 <strlen>
 8000d04:	4606      	mov	r6, r0
    c.inLen  = XSTRLEN(c.input);
 8000d06:	4650      	mov	r0, sl
 8000d08:	f01a faed 	bl	801b2e6 <strlen>
 8000d0c:	4605      	mov	r5, r0
    d.inLen  = XSTRLEN(d.input);
 8000d0e:	4648      	mov	r0, r9
 8000d10:	f01a fae9 	bl	801b2e6 <strlen>
 8000d14:	4604      	mov	r4, r0
    e.inLen  = XSTRLEN(e.input);
 8000d16:	4640      	mov	r0, r8
 8000d18:	f01a fae5 	bl	801b2e6 <strlen>
    test_sha[0] = a;
 8000d1c:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <sha_test+0x1e8>)
 8000d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8000d20:	4b6d      	ldr	r3, [pc, #436]	; (8000ed8 <sha_test+0x1fc>)
    test_sha[1] = b;
 8000d22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    test_sha[0] = a;
 8000d26:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    test_sha[1] = b;
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <sha_test+0x200>)
    test_sha[2] = c;
 8000d2c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
    test_sha[1] = b;
 8000d30:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
    test_sha[2] = c;
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <sha_test+0x204>)
    test_sha[3] = d;
 8000d36:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    test_sha[2] = c;
 8000d3a:	e9cd 3513 	strd	r3, r5, [sp, #76]	; 0x4c
    test_sha[3] = d;
 8000d3e:	4b69      	ldr	r3, [pc, #420]	; (8000ee4 <sha_test+0x208>)
    test_sha[4] = e;
 8000d40:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    test_sha[3] = d;
 8000d44:	e9cd 3417 	strd	r3, r4, [sp, #92]	; 0x5c
    test_sha[4] = e;
 8000d48:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <sha_test+0x20c>)
    ret = wc_InitSha_ex(&sha, HEAP_HINT, devId);
 8000d4a:	2100      	movs	r1, #0
    test_sha[4] = e;
 8000d4c:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
    ret = wc_InitSha_ex(&sha, HEAP_HINT, devId);
 8000d50:	f06f 0201 	mvn.w	r2, #1
 8000d54:	a81e      	add	r0, sp, #120	; 0x78
 8000d56:	f00c fbb9 	bl	800d4cc <wc_InitSha_ex>
    if (ret != 0)
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	b170      	cbz	r0, 8000d7c <sha_test+0xa0>
        return WC_TEST_RET_ENC_EC(ret);
 8000d5e:	4963      	ldr	r1, [pc, #396]	; (8000eec <sha_test+0x210>)
 8000d60:	4244      	negs	r4, r0
 8000d62:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8000d66:	434c      	muls	r4, r1
 8000d68:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000d6c:	f46f 632b 	mvn.w	r3, #2736	; 0xab0
 8000d70:	441c      	add	r4, r3
}
 8000d72:	4620      	mov	r0, r4
 8000d74:	f20d 5d44 	addw	sp, sp, #1348	; 0x544
 8000d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = wc_InitSha_ex(&shaCopy, HEAP_HINT, devId);
 8000d7c:	f06f 0201 	mvn.w	r2, #1
 8000d80:	a837      	add	r0, sp, #220	; 0xdc
 8000d82:	f00c fba3 	bl	800d4cc <wc_InitSha_ex>
    if (ret != 0) {
 8000d86:	4606      	mov	r6, r0
 8000d88:	b160      	cbz	r0, 8000da4 <sha_test+0xc8>
        wc_ShaFree(&sha);
 8000d8a:	a81e      	add	r0, sp, #120	; 0x78
 8000d8c:	f00c fc9e 	bl	800d6cc <wc_ShaFree>
        return WC_TEST_RET_ENC_EC(ret);
 8000d90:	4274      	negs	r4, r6
 8000d92:	4856      	ldr	r0, [pc, #344]	; (8000eec <sha_test+0x210>)
 8000d94:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8000d98:	4344      	muls	r4, r0
 8000d9a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000d9e:	f6a4 24b5 	subw	r4, r4, #2741	; 0xab5
 8000da2:	e7e6      	b.n	8000d72 <sha_test+0x96>
 8000da4:	ad0a      	add	r5, sp, #40	; 0x28
        ret = wc_ShaUpdate(&sha, (byte*)test_sha[i].input,
 8000da6:	68aa      	ldr	r2, [r5, #8]
 8000da8:	6829      	ldr	r1, [r5, #0]
 8000daa:	a81e      	add	r0, sp, #120	; 0x78
 8000dac:	f00c fbae 	bl	800d50c <wc_ShaUpdate>
        if (ret != 0)
 8000db0:	b160      	cbz	r0, 8000dcc <sha_test+0xf0>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000db2:	4c4e      	ldr	r4, [pc, #312]	; (8000eec <sha_test+0x210>)
 8000db4:	4374      	muls	r4, r6
 8000db6:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000dba:	f6a4 24bc 	subw	r4, r4, #2748	; 0xabc
    wc_ShaFree(&sha);
 8000dbe:	a81e      	add	r0, sp, #120	; 0x78
 8000dc0:	f00c fc84 	bl	800d6cc <wc_ShaFree>
    wc_ShaFree(&shaCopy);
 8000dc4:	a837      	add	r0, sp, #220	; 0xdc
 8000dc6:	f00c fc81 	bl	800d6cc <wc_ShaFree>
    return ret;
 8000dca:	e7d2      	b.n	8000d72 <sha_test+0x96>
        ret = wc_ShaGetHash(&sha, hashcopy);
 8000dcc:	a905      	add	r1, sp, #20
 8000dce:	a81e      	add	r0, sp, #120	; 0x78
 8000dd0:	f00c fc8b 	bl	800d6ea <wc_ShaGetHash>
        if (ret != 0)
 8000dd4:	b130      	cbz	r0, 8000de4 <sha_test+0x108>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000dd6:	4c45      	ldr	r4, [pc, #276]	; (8000eec <sha_test+0x210>)
 8000dd8:	4374      	muls	r4, r6
 8000dda:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000dde:	f6a4 24bf 	subw	r4, r4, #2751	; 0xabf
 8000de2:	e7ec      	b.n	8000dbe <sha_test+0xe2>
        ret = wc_ShaCopy(&sha, &shaCopy);
 8000de4:	a937      	add	r1, sp, #220	; 0xdc
 8000de6:	a81e      	add	r0, sp, #120	; 0x78
 8000de8:	f00c fc71 	bl	800d6ce <wc_ShaCopy>
        if (ret != 0)
 8000dec:	b130      	cbz	r0, 8000dfc <sha_test+0x120>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000dee:	4c3f      	ldr	r4, [pc, #252]	; (8000eec <sha_test+0x210>)
 8000df0:	4374      	muls	r4, r6
 8000df2:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000df6:	f6a4 24c2 	subw	r4, r4, #2754	; 0xac2
 8000dfa:	e7e0      	b.n	8000dbe <sha_test+0xe2>
        ret = wc_ShaFinal(&sha, hash);
 8000dfc:	4669      	mov	r1, sp
 8000dfe:	a81e      	add	r0, sp, #120	; 0x78
 8000e00:	f00c fbec 	bl	800d5dc <wc_ShaFinal>
        if (ret != 0)
 8000e04:	b130      	cbz	r0, 8000e14 <sha_test+0x138>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000e06:	4c39      	ldr	r4, [pc, #228]	; (8000eec <sha_test+0x210>)
 8000e08:	4374      	muls	r4, r6
 8000e0a:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000e0e:	f6a4 24c5 	subw	r4, r4, #2757	; 0xac5
 8000e12:	e7d4      	b.n	8000dbe <sha_test+0xe2>
        wc_ShaFree(&shaCopy);
 8000e14:	a837      	add	r0, sp, #220	; 0xdc
 8000e16:	f00c fc59 	bl	800d6cc <wc_ShaFree>
        if (XMEMCMP(hash, test_sha[i].output, WC_SHA_DIGEST_SIZE) != 0)
 8000e1a:	6869      	ldr	r1, [r5, #4]
 8000e1c:	2214      	movs	r2, #20
 8000e1e:	4668      	mov	r0, sp
 8000e20:	f01a f8ce 	bl	801afc0 <memcmp>
 8000e24:	b130      	cbz	r0, 8000e34 <sha_test+0x158>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000e26:	4c31      	ldr	r4, [pc, #196]	; (8000eec <sha_test+0x210>)
 8000e28:	4374      	muls	r4, r6
 8000e2a:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000e2e:	f6a4 24c9 	subw	r4, r4, #2761	; 0xac9
 8000e32:	e7c4      	b.n	8000dbe <sha_test+0xe2>
        if (XMEMCMP(hash, hashcopy, WC_SHA_DIGEST_SIZE) != 0)
 8000e34:	2214      	movs	r2, #20
 8000e36:	eb0d 0102 	add.w	r1, sp, r2
 8000e3a:	4668      	mov	r0, sp
 8000e3c:	f01a f8c0 	bl	801afc0 <memcmp>
 8000e40:	b130      	cbz	r0, 8000e50 <sha_test+0x174>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000e42:	4c2a      	ldr	r4, [pc, #168]	; (8000eec <sha_test+0x210>)
 8000e44:	4374      	muls	r4, r6
 8000e46:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000e4a:	f6a4 24cb 	subw	r4, r4, #2763	; 0xacb
 8000e4e:	e7b6      	b.n	8000dbe <sha_test+0xe2>
    for (i = 0; i < times; ++i) {
 8000e50:	3601      	adds	r6, #1
 8000e52:	2e05      	cmp	r6, #5
 8000e54:	f105 0510 	add.w	r5, r5, #16
 8000e58:	d1a5      	bne.n	8000da6 <sha_test+0xca>
 8000e5a:	ab50      	add	r3, sp, #320	; 0x140
 8000e5c:	461d      	mov	r5, r3
        large_input[i] = (byte)(i & 0xFF);
 8000e5e:	f803 0b01 	strb.w	r0, [r3], #1
    for (i = 0; i < (int)sizeof(large_input); i++) {
 8000e62:	3001      	adds	r0, #1
 8000e64:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000e68:	d1f9      	bne.n	8000e5e <sha_test+0x182>
 8000e6a:	2464      	movs	r4, #100	; 0x64
        ret = wc_ShaUpdate(&sha, (byte*)large_input,
 8000e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e70:	4629      	mov	r1, r5
 8000e72:	a81e      	add	r0, sp, #120	; 0x78
 8000e74:	f00c fb4a 	bl	800d50c <wc_ShaUpdate>
        if (ret != 0)
 8000e78:	b148      	cbz	r0, 8000e8e <sha_test+0x1b2>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8000e7a:	4244      	negs	r4, r0
 8000e7c:	481b      	ldr	r0, [pc, #108]	; (8000eec <sha_test+0x210>)
 8000e7e:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8000e82:	4344      	muls	r4, r0
 8000e84:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000e88:	f6a4 24eb 	subw	r4, r4, #2795	; 0xaeb
 8000e8c:	e797      	b.n	8000dbe <sha_test+0xe2>
    for (i = 0; i < times; ++i) {
 8000e8e:	3c01      	subs	r4, #1
 8000e90:	d1ec      	bne.n	8000e6c <sha_test+0x190>
    ret = wc_ShaFinal(&sha, hash);
 8000e92:	4669      	mov	r1, sp
 8000e94:	a81e      	add	r0, sp, #120	; 0x78
 8000e96:	f00c fba1 	bl	800d5dc <wc_ShaFinal>
    if (ret != 0)
 8000e9a:	b148      	cbz	r0, 8000eb0 <sha_test+0x1d4>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8000e9c:	4244      	negs	r4, r0
 8000e9e:	4813      	ldr	r0, [pc, #76]	; (8000eec <sha_test+0x210>)
 8000ea0:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8000ea4:	4344      	muls	r4, r0
 8000ea6:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000eaa:	f6a4 24ef 	subw	r4, r4, #2799	; 0xaef
 8000eae:	e786      	b.n	8000dbe <sha_test+0xe2>
    if (XMEMCMP(hash, large_digest, WC_SHA_DIGEST_SIZE) != 0)
 8000eb0:	490f      	ldr	r1, [pc, #60]	; (8000ef0 <sha_test+0x214>)
 8000eb2:	2214      	movs	r2, #20
 8000eb4:	4668      	mov	r0, sp
 8000eb6:	f01a f883 	bl	801afc0 <memcmp>
        ERROR_OUT(WC_TEST_RET_ENC_NC, exit);
 8000eba:	1e04      	subs	r4, r0, #0
 8000ebc:	bf18      	it	ne
 8000ebe:	f46f 642f 	mvnne.w	r4, #2800	; 0xaf0
 8000ec2:	e77c      	b.n	8000dbe <sha_test+0xe2>
 8000ec4:	0801ddc5 	.word	0x0801ddc5
 8000ec8:	0801dcf3 	.word	0x0801dcf3
 8000ecc:	0801dcf7 	.word	0x0801dcf7
 8000ed0:	0801dd70 	.word	0x0801dd70
 8000ed4:	0801dd30 	.word	0x0801dd30
 8000ed8:	0801ddb1 	.word	0x0801ddb1
 8000edc:	0801ddc6 	.word	0x0801ddc6
 8000ee0:	0801dddb 	.word	0x0801dddb
 8000ee4:	0801bdb8 	.word	0x0801bdb8
 8000ee8:	0801ddf0 	.word	0x0801ddf0
 8000eec:	fffe7960 	.word	0xfffe7960
 8000ef0:	0801de05 	.word	0x0801de05

08000ef4 <sha256_test>:
{
 8000ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a.inLen  = XSTRLEN(a.input);
 8000ef8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80010a8 <sha256_test+0x1b4>
    b.inLen  = XSTRLEN(b.input);
 8000efc:	4f6b      	ldr	r7, [pc, #428]	; (80010ac <sha256_test+0x1b8>)
    c.inLen  = XSTRLEN(c.input);
 8000efe:	4e6c      	ldr	r6, [pc, #432]	; (80010b0 <sha256_test+0x1bc>)
{
 8000f00:	f5ad 6daa 	sub.w	sp, sp, #1360	; 0x550
    a.inLen  = XSTRLEN(a.input);
 8000f04:	4640      	mov	r0, r8
 8000f06:	f01a f9ee 	bl	801b2e6 <strlen>
 8000f0a:	4605      	mov	r5, r0
    b.inLen  = XSTRLEN(b.input);
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	f01a f9ea 	bl	801b2e6 <strlen>
 8000f12:	4604      	mov	r4, r0
    c.inLen  = XSTRLEN(c.input);
 8000f14:	4630      	mov	r0, r6
 8000f16:	f01a f9e6 	bl	801b2e6 <strlen>
    test_sha[0] = a;
 8000f1a:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <sha256_test+0x1c0>)
 8000f1c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8000f20:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
    test_sha[1] = b;
 8000f24:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <sha256_test+0x1c4>)
 8000f26:	9714      	str	r7, [sp, #80]	; 0x50
 8000f28:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
    test_sha[2] = c;
 8000f2c:	4b63      	ldr	r3, [pc, #396]	; (80010bc <sha256_test+0x1c8>)
 8000f2e:	9618      	str	r6, [sp, #96]	; 0x60
 8000f30:	e9cd 3019 	strd	r3, r0, [sp, #100]	; 0x64
    ret = wc_InitSha256_ex(&sha, HEAP_HINT, devId);
 8000f34:	2100      	movs	r1, #0
 8000f36:	f06f 0201 	mvn.w	r2, #1
 8000f3a:	a81c      	add	r0, sp, #112	; 0x70
 8000f3c:	f00c fda2 	bl	800da84 <wc_InitSha256_ex>
    if (ret != 0)
 8000f40:	4601      	mov	r1, r0
 8000f42:	b168      	cbz	r0, 8000f60 <sha256_test+0x6c>
        return WC_TEST_RET_ENC_EC(ret);
 8000f44:	495e      	ldr	r1, [pc, #376]	; (80010c0 <sha256_test+0x1cc>)
 8000f46:	4244      	negs	r4, r0
 8000f48:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8000f4c:	434c      	muls	r4, r1
 8000f4e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000f52:	f6a4 443a 	subw	r4, r4, #3130	; 0xc3a
}
 8000f56:	4620      	mov	r0, r4
 8000f58:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
 8000f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = wc_InitSha256_ex(&shaCopy, HEAP_HINT, devId);
 8000f60:	f06f 0201 	mvn.w	r2, #1
 8000f64:	a838      	add	r0, sp, #224	; 0xe0
 8000f66:	f00c fd8d 	bl	800da84 <wc_InitSha256_ex>
    if (ret != 0) {
 8000f6a:	4606      	mov	r6, r0
 8000f6c:	b160      	cbz	r0, 8000f88 <sha256_test+0x94>
        wc_Sha256Free(&sha);
 8000f6e:	a81c      	add	r0, sp, #112	; 0x70
 8000f70:	f00c fe9e 	bl	800dcb0 <wc_Sha256Free>
        return WC_TEST_RET_ENC_EC(ret);
 8000f74:	4274      	negs	r4, r6
 8000f76:	4852      	ldr	r0, [pc, #328]	; (80010c0 <sha256_test+0x1cc>)
 8000f78:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8000f7c:	4344      	muls	r4, r0
 8000f7e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000f82:	f6a4 443e 	subw	r4, r4, #3134	; 0xc3e
 8000f86:	e7e6      	b.n	8000f56 <sha256_test+0x62>
 8000f88:	ad10      	add	r5, sp, #64	; 0x40
        ret = wc_Sha256Update(&sha, (byte*)test_sha[i].input,
 8000f8a:	68aa      	ldr	r2, [r5, #8]
 8000f8c:	6829      	ldr	r1, [r5, #0]
 8000f8e:	a81c      	add	r0, sp, #112	; 0x70
 8000f90:	f00c fdac 	bl	800daec <wc_Sha256Update>
        if (ret != 0) {
 8000f94:	b160      	cbz	r0, 8000fb0 <sha256_test+0xbc>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000f96:	4c4a      	ldr	r4, [pc, #296]	; (80010c0 <sha256_test+0x1cc>)
 8000f98:	4374      	muls	r4, r6
 8000f9a:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000f9e:	f6a4 4445 	subw	r4, r4, #3141	; 0xc45
    wc_Sha256Free(&sha);
 8000fa2:	a81c      	add	r0, sp, #112	; 0x70
 8000fa4:	f00c fe84 	bl	800dcb0 <wc_Sha256Free>
    wc_Sha256Free(&shaCopy);
 8000fa8:	a838      	add	r0, sp, #224	; 0xe0
 8000faa:	f00c fe81 	bl	800dcb0 <wc_Sha256Free>
    return ret;
 8000fae:	e7d2      	b.n	8000f56 <sha256_test+0x62>
        ret = wc_Sha256GetHash(&sha, hashcopy);
 8000fb0:	a908      	add	r1, sp, #32
 8000fb2:	a81c      	add	r0, sp, #112	; 0x70
 8000fb4:	f00c fe94 	bl	800dce0 <wc_Sha256GetHash>
        if (ret != 0)
 8000fb8:	b130      	cbz	r0, 8000fc8 <sha256_test+0xd4>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000fba:	4c41      	ldr	r4, [pc, #260]	; (80010c0 <sha256_test+0x1cc>)
 8000fbc:	4374      	muls	r4, r6
 8000fbe:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000fc2:	f6a4 4449 	subw	r4, r4, #3145	; 0xc49
 8000fc6:	e7ec      	b.n	8000fa2 <sha256_test+0xae>
        ret = wc_Sha256Copy(&sha, &shaCopy);
 8000fc8:	a938      	add	r1, sp, #224	; 0xe0
 8000fca:	a81c      	add	r0, sp, #112	; 0x70
 8000fcc:	f00c fe7a 	bl	800dcc4 <wc_Sha256Copy>
        if (ret != 0)
 8000fd0:	b130      	cbz	r0, 8000fe0 <sha256_test+0xec>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000fd2:	4c3b      	ldr	r4, [pc, #236]	; (80010c0 <sha256_test+0x1cc>)
 8000fd4:	4374      	muls	r4, r6
 8000fd6:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000fda:	f6a4 444c 	subw	r4, r4, #3148	; 0xc4c
 8000fde:	e7e0      	b.n	8000fa2 <sha256_test+0xae>
        ret = wc_Sha256Final(&sha, hash);
 8000fe0:	4669      	mov	r1, sp
 8000fe2:	a81c      	add	r0, sp, #112	; 0x70
 8000fe4:	f00c fdda 	bl	800db9c <wc_Sha256Final>
        if (ret != 0)
 8000fe8:	b130      	cbz	r0, 8000ff8 <sha256_test+0x104>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8000fea:	4c35      	ldr	r4, [pc, #212]	; (80010c0 <sha256_test+0x1cc>)
 8000fec:	4374      	muls	r4, r6
 8000fee:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8000ff2:	f6a4 444f 	subw	r4, r4, #3151	; 0xc4f
 8000ff6:	e7d4      	b.n	8000fa2 <sha256_test+0xae>
        wc_Sha256Free(&shaCopy);
 8000ff8:	a838      	add	r0, sp, #224	; 0xe0
 8000ffa:	f00c fe59 	bl	800dcb0 <wc_Sha256Free>
        if (XMEMCMP(hash, test_sha[i].output, WC_SHA256_DIGEST_SIZE) != 0)
 8000ffe:	6869      	ldr	r1, [r5, #4]
 8001000:	2220      	movs	r2, #32
 8001002:	4668      	mov	r0, sp
 8001004:	f019 ffdc 	bl	801afc0 <memcmp>
 8001008:	b130      	cbz	r0, 8001018 <sha256_test+0x124>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 800100a:	4c2d      	ldr	r4, [pc, #180]	; (80010c0 <sha256_test+0x1cc>)
 800100c:	4374      	muls	r4, r6
 800100e:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8001012:	f6a4 4453 	subw	r4, r4, #3155	; 0xc53
 8001016:	e7c4      	b.n	8000fa2 <sha256_test+0xae>
        if (XMEMCMP(hash, hashcopy, WC_SHA256_DIGEST_SIZE) != 0)
 8001018:	2220      	movs	r2, #32
 800101a:	eb0d 0102 	add.w	r1, sp, r2
 800101e:	4668      	mov	r0, sp
 8001020:	f019 ffce 	bl	801afc0 <memcmp>
 8001024:	b130      	cbz	r0, 8001034 <sha256_test+0x140>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8001026:	4c26      	ldr	r4, [pc, #152]	; (80010c0 <sha256_test+0x1cc>)
 8001028:	4374      	muls	r4, r6
 800102a:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 800102e:	f6a4 4455 	subw	r4, r4, #3157	; 0xc55
 8001032:	e7b6      	b.n	8000fa2 <sha256_test+0xae>
    for (i = 0; i < times; ++i) {
 8001034:	3601      	adds	r6, #1
 8001036:	2e03      	cmp	r6, #3
 8001038:	f105 0510 	add.w	r5, r5, #16
 800103c:	d1a5      	bne.n	8000f8a <sha256_test+0x96>
 800103e:	ab54      	add	r3, sp, #336	; 0x150
 8001040:	461d      	mov	r5, r3
        large_input[i] = (byte)(i & 0xFF);
 8001042:	f803 0b01 	strb.w	r0, [r3], #1
    for (i = 0; i < (int)sizeof(large_input); i++) {
 8001046:	3001      	adds	r0, #1
 8001048:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800104c:	d1f9      	bne.n	8001042 <sha256_test+0x14e>
 800104e:	2464      	movs	r4, #100	; 0x64
        ret = wc_Sha256Update(&sha, (byte*)large_input,
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	4629      	mov	r1, r5
 8001056:	a81c      	add	r0, sp, #112	; 0x70
 8001058:	f00c fd48 	bl	800daec <wc_Sha256Update>
        if (ret != 0)
 800105c:	b148      	cbz	r0, 8001072 <sha256_test+0x17e>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 800105e:	4244      	negs	r4, r0
 8001060:	4817      	ldr	r0, [pc, #92]	; (80010c0 <sha256_test+0x1cc>)
 8001062:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001066:	4344      	muls	r4, r0
 8001068:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800106c:	f6a4 4473 	subw	r4, r4, #3187	; 0xc73
 8001070:	e797      	b.n	8000fa2 <sha256_test+0xae>
    for (i = 0; i < times; ++i) {
 8001072:	3c01      	subs	r4, #1
 8001074:	d1ec      	bne.n	8001050 <sha256_test+0x15c>
    ret = wc_Sha256Final(&sha, hash);
 8001076:	4669      	mov	r1, sp
 8001078:	a81c      	add	r0, sp, #112	; 0x70
 800107a:	f00c fd8f 	bl	800db9c <wc_Sha256Final>
    if (ret != 0)
 800107e:	b148      	cbz	r0, 8001094 <sha256_test+0x1a0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8001080:	4244      	negs	r4, r0
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <sha256_test+0x1cc>)
 8001084:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001088:	4344      	muls	r4, r0
 800108a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800108e:	f6a4 4477 	subw	r4, r4, #3191	; 0xc77
 8001092:	e786      	b.n	8000fa2 <sha256_test+0xae>
    if (XMEMCMP(hash, large_digest, WC_SHA256_DIGEST_SIZE) != 0)
 8001094:	490b      	ldr	r1, [pc, #44]	; (80010c4 <sha256_test+0x1d0>)
 8001096:	2220      	movs	r2, #32
 8001098:	4668      	mov	r0, sp
 800109a:	f019 ff91 	bl	801afc0 <memcmp>
        ERROR_OUT(WC_TEST_RET_ENC_NC, exit);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <sha256_test+0x1d4>)
 80010a0:	1e04      	subs	r4, r0, #0
 80010a2:	bf18      	it	ne
 80010a4:	461c      	movne	r4, r3
 80010a6:	e77c      	b.n	8000fa2 <sha256_test+0xae>
 80010a8:	0801ddc5 	.word	0x0801ddc5
 80010ac:	0801dcf3 	.word	0x0801dcf3
 80010b0:	0801dcf7 	.word	0x0801dcf7
 80010b4:	0801de1a 	.word	0x0801de1a
 80010b8:	0801bdcd 	.word	0x0801bdcd
 80010bc:	0801de3b 	.word	0x0801de3b
 80010c0:	fffe7960 	.word	0xfffe7960
 80010c4:	0801de5c 	.word	0x0801de5c
 80010c8:	fffff387 	.word	0xfffff387

080010cc <sha512_test>:
{
 80010cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a.inLen  = XSTRLEN(a.input);
 80010d0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80012b0 <sha512_test+0x1e4>
    b.inLen  = XSTRLEN(b.input);
 80010d4:	4f77      	ldr	r7, [pc, #476]	; (80012b4 <sha512_test+0x1e8>)
    c.inLen  = XSTRLEN(c.input);
 80010d6:	4e78      	ldr	r6, [pc, #480]	; (80012b8 <sha512_test+0x1ec>)
{
 80010d8:	f5ad 6dce 	sub.w	sp, sp, #1648	; 0x670
    a.inLen  = XSTRLEN(a.input);
 80010dc:	4640      	mov	r0, r8
 80010de:	f01a f902 	bl	801b2e6 <strlen>
 80010e2:	4605      	mov	r5, r0
    b.inLen  = XSTRLEN(b.input);
 80010e4:	4638      	mov	r0, r7
 80010e6:	f01a f8fe 	bl	801b2e6 <strlen>
 80010ea:	4604      	mov	r4, r0
    c.inLen  = XSTRLEN(c.input);
 80010ec:	4630      	mov	r0, r6
 80010ee:	f01a f8fa 	bl	801b2e6 <strlen>
    test_sha[0] = a;
 80010f2:	4b72      	ldr	r3, [pc, #456]	; (80012bc <sha512_test+0x1f0>)
 80010f4:	f8cd 8000 	str.w	r8, [sp]
 80010f8:	e9cd 3501 	strd	r3, r5, [sp, #4]
    test_sha[1] = b;
 80010fc:	4b70      	ldr	r3, [pc, #448]	; (80012c0 <sha512_test+0x1f4>)
 80010fe:	9704      	str	r7, [sp, #16]
 8001100:	e9cd 3405 	strd	r3, r4, [sp, #20]
    test_sha[2] = c;
 8001104:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <sha512_test+0x1f8>)
 8001106:	9608      	str	r6, [sp, #32]
 8001108:	e9cd 3009 	strd	r3, r0, [sp, #36]	; 0x24
    ret = wc_InitSha512_ex(&sha, HEAP_HINT, devId);
 800110c:	2100      	movs	r1, #0
 800110e:	f06f 0201 	mvn.w	r2, #1
 8001112:	a82c      	add	r0, sp, #176	; 0xb0
 8001114:	f00e ffa0 	bl	8010058 <wc_InitSha512_ex>
    if (ret != 0)
 8001118:	4601      	mov	r1, r0
 800111a:	b168      	cbz	r0, 8001138 <sha512_test+0x6c>
        return WC_TEST_RET_ENC_EC(ret);
 800111c:	496a      	ldr	r1, [pc, #424]	; (80012c8 <sha512_test+0x1fc>)
 800111e:	4244      	negs	r4, r0
 8001120:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001124:	434c      	muls	r4, r1
 8001126:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800112a:	f6a4 44b8 	subw	r4, r4, #3256	; 0xcb8
}
 800112e:	4620      	mov	r0, r4
 8001130:	f50d 6dce 	add.w	sp, sp, #1648	; 0x670
 8001134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = wc_InitSha512_ex(&shaCopy, HEAP_HINT, devId);
 8001138:	f06f 0201 	mvn.w	r2, #1
 800113c:	a864      	add	r0, sp, #400	; 0x190
 800113e:	f00e ff8b 	bl	8010058 <wc_InitSha512_ex>
    if (ret != 0) {
 8001142:	4606      	mov	r6, r0
 8001144:	b160      	cbz	r0, 8001160 <sha512_test+0x94>
        wc_Sha512Free(&sha);
 8001146:	a82c      	add	r0, sp, #176	; 0xb0
 8001148:	f00f f80d 	bl	8010166 <wc_Sha512Free>
        return WC_TEST_RET_ENC_EC(ret);
 800114c:	4274      	negs	r4, r6
 800114e:	485e      	ldr	r0, [pc, #376]	; (80012c8 <sha512_test+0x1fc>)
 8001150:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001154:	4344      	muls	r4, r0
 8001156:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800115a:	f6a4 44bc 	subw	r4, r4, #3260	; 0xcbc
 800115e:	e7e6      	b.n	800112e <sha512_test+0x62>
 8001160:	466d      	mov	r5, sp
        ret = wc_Sha512Update(&sha, (byte*)test_sha[i].input,
 8001162:	68aa      	ldr	r2, [r5, #8]
 8001164:	6829      	ldr	r1, [r5, #0]
 8001166:	a82c      	add	r0, sp, #176	; 0xb0
 8001168:	f00e ff8e 	bl	8010088 <wc_Sha512Update>
        if (ret != 0)
 800116c:	b160      	cbz	r0, 8001188 <sha512_test+0xbc>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 800116e:	4c56      	ldr	r4, [pc, #344]	; (80012c8 <sha512_test+0x1fc>)
 8001170:	4374      	muls	r4, r6
 8001172:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8001176:	f6a4 44c3 	subw	r4, r4, #3267	; 0xcc3
    wc_Sha512Free(&sha);
 800117a:	a82c      	add	r0, sp, #176	; 0xb0
 800117c:	f00e fff3 	bl	8010166 <wc_Sha512Free>
    wc_Sha512Free(&shaCopy);
 8001180:	a864      	add	r0, sp, #400	; 0x190
 8001182:	f00e fff0 	bl	8010166 <wc_Sha512Free>
    return ret;
 8001186:	e7d2      	b.n	800112e <sha512_test+0x62>
        ret = wc_Sha512GetHash(&sha, hashcopy);
 8001188:	a91c      	add	r1, sp, #112	; 0x70
 800118a:	a82c      	add	r0, sp, #176	; 0xb0
 800118c:	f00f f826 	bl	80101dc <wc_Sha512GetHash>
        if (ret != 0)
 8001190:	b130      	cbz	r0, 80011a0 <sha512_test+0xd4>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8001192:	4c4d      	ldr	r4, [pc, #308]	; (80012c8 <sha512_test+0x1fc>)
 8001194:	4374      	muls	r4, r6
 8001196:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 800119a:	f6a4 44c6 	subw	r4, r4, #3270	; 0xcc6
 800119e:	e7ec      	b.n	800117a <sha512_test+0xae>
        ret = wc_Sha512Copy(&sha, &shaCopy);
 80011a0:	a964      	add	r1, sp, #400	; 0x190
 80011a2:	a82c      	add	r0, sp, #176	; 0xb0
 80011a4:	f00e ffe9 	bl	801017a <wc_Sha512Copy>
        if (ret != 0)
 80011a8:	b130      	cbz	r0, 80011b8 <sha512_test+0xec>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80011aa:	4c47      	ldr	r4, [pc, #284]	; (80012c8 <sha512_test+0x1fc>)
 80011ac:	4374      	muls	r4, r6
 80011ae:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80011b2:	f6a4 44c9 	subw	r4, r4, #3273	; 0xcc9
 80011b6:	e7e0      	b.n	800117a <sha512_test+0xae>
        ret = wc_Sha512Final(&sha, hash);
 80011b8:	a90c      	add	r1, sp, #48	; 0x30
 80011ba:	a82c      	add	r0, sp, #176	; 0xb0
 80011bc:	f00e ff3a 	bl	8010034 <wc_Sha512Final>
        if (ret != 0)
 80011c0:	b130      	cbz	r0, 80011d0 <sha512_test+0x104>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80011c2:	4c41      	ldr	r4, [pc, #260]	; (80012c8 <sha512_test+0x1fc>)
 80011c4:	4374      	muls	r4, r6
 80011c6:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80011ca:	f6a4 44cc 	subw	r4, r4, #3276	; 0xccc
 80011ce:	e7d4      	b.n	800117a <sha512_test+0xae>
        wc_Sha512Free(&shaCopy);
 80011d0:	a864      	add	r0, sp, #400	; 0x190
 80011d2:	f00e ffc8 	bl	8010166 <wc_Sha512Free>
        if (XMEMCMP(hash, test_sha[i].output, WC_SHA512_DIGEST_SIZE) != 0)
 80011d6:	6869      	ldr	r1, [r5, #4]
 80011d8:	2240      	movs	r2, #64	; 0x40
 80011da:	a80c      	add	r0, sp, #48	; 0x30
 80011dc:	f019 fef0 	bl	801afc0 <memcmp>
 80011e0:	b130      	cbz	r0, 80011f0 <sha512_test+0x124>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80011e2:	4c39      	ldr	r4, [pc, #228]	; (80012c8 <sha512_test+0x1fc>)
 80011e4:	4374      	muls	r4, r6
 80011e6:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80011ea:	f5a4 644d 	sub.w	r4, r4, #3280	; 0xcd0
 80011ee:	e7c4      	b.n	800117a <sha512_test+0xae>
        if (XMEMCMP(hash, hashcopy, WC_SHA512_DIGEST_SIZE) != 0)
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	a91c      	add	r1, sp, #112	; 0x70
 80011f4:	a80c      	add	r0, sp, #48	; 0x30
 80011f6:	f019 fee3 	bl	801afc0 <memcmp>
 80011fa:	b130      	cbz	r0, 800120a <sha512_test+0x13e>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80011fc:	4c32      	ldr	r4, [pc, #200]	; (80012c8 <sha512_test+0x1fc>)
 80011fe:	4374      	muls	r4, r6
 8001200:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8001204:	f6a4 44d2 	subw	r4, r4, #3282	; 0xcd2
 8001208:	e7b7      	b.n	800117a <sha512_test+0xae>
    for (i = 0; i < times; ++i) {
 800120a:	3601      	adds	r6, #1
 800120c:	2e03      	cmp	r6, #3
 800120e:	f105 0510 	add.w	r5, r5, #16
 8001212:	d1a6      	bne.n	8001162 <sha512_test+0x96>
 8001214:	ab9c      	add	r3, sp, #624	; 0x270
        large_input[i] = (byte)(i & 0xFF);
 8001216:	f803 0b01 	strb.w	r0, [r3], #1
    for (i = 0; i < (int)sizeof(large_input); i++) {
 800121a:	3001      	adds	r0, #1
 800121c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001220:	d1f9      	bne.n	8001216 <sha512_test+0x14a>
 8001222:	2464      	movs	r4, #100	; 0x64
        ret = wc_Sha512Update(&sha, (byte*)large_input,
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	a99c      	add	r1, sp, #624	; 0x270
 800122a:	a82c      	add	r0, sp, #176	; 0xb0
 800122c:	f00e ff2c 	bl	8010088 <wc_Sha512Update>
        if (ret != 0)
 8001230:	b148      	cbz	r0, 8001246 <sha512_test+0x17a>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8001232:	4244      	negs	r4, r0
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <sha512_test+0x1fc>)
 8001236:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800123a:	4344      	muls	r4, r0
 800123c:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001240:	f6a4 44f2 	subw	r4, r4, #3314	; 0xcf2
 8001244:	e799      	b.n	800117a <sha512_test+0xae>
    for (i = 0; i < times; ++i) {
 8001246:	3c01      	subs	r4, #1
 8001248:	d1ec      	bne.n	8001224 <sha512_test+0x158>
    ret = wc_Sha512Final(&sha, hash);
 800124a:	a90c      	add	r1, sp, #48	; 0x30
 800124c:	a82c      	add	r0, sp, #176	; 0xb0
 800124e:	f00e fef1 	bl	8010034 <wc_Sha512Final>
    if (ret != 0)
 8001252:	b148      	cbz	r0, 8001268 <sha512_test+0x19c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8001254:	4244      	negs	r4, r0
 8001256:	481c      	ldr	r0, [pc, #112]	; (80012c8 <sha512_test+0x1fc>)
 8001258:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800125c:	4344      	muls	r4, r0
 800125e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001262:	f6a4 44f6 	subw	r4, r4, #3318	; 0xcf6
 8001266:	e788      	b.n	800117a <sha512_test+0xae>
    if (XMEMCMP(hash, large_digest, WC_SHA512_DIGEST_SIZE) != 0)
 8001268:	4918      	ldr	r1, [pc, #96]	; (80012cc <sha512_test+0x200>)
 800126a:	2240      	movs	r2, #64	; 0x40
 800126c:	a80c      	add	r0, sp, #48	; 0x30
 800126e:	f019 fea7 	bl	801afc0 <memcmp>
 8001272:	b9d8      	cbnz	r0, 80012ac <sha512_test+0x1e0>
    for (i = 1; i < 16; i++) {
 8001274:	2501      	movs	r5, #1
        ret = wc_Sha512Update(&sha, (byte*)large_input + i,
 8001276:	ab9c      	add	r3, sp, #624	; 0x270
 8001278:	f5c5 6280 	rsb	r2, r5, #1024	; 0x400
 800127c:	1959      	adds	r1, r3, r5
 800127e:	a82c      	add	r0, sp, #176	; 0xb0
 8001280:	f00e ff02 	bl	8010088 <wc_Sha512Update>
        if (ret != 0)
 8001284:	b148      	cbz	r0, 800129a <sha512_test+0x1ce>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8001286:	4244      	negs	r4, r0
 8001288:	480f      	ldr	r0, [pc, #60]	; (80012c8 <sha512_test+0x1fc>)
 800128a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800128e:	4344      	muls	r4, r0
 8001290:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001294:	f5a4 6450 	sub.w	r4, r4, #3328	; 0xd00
 8001298:	e76f      	b.n	800117a <sha512_test+0xae>
        ret = wc_Sha512Final(&sha, hash);
 800129a:	a90c      	add	r1, sp, #48	; 0x30
 800129c:	a82c      	add	r0, sp, #176	; 0xb0
 800129e:	f00e fec9 	bl	8010034 <wc_Sha512Final>
    for (i = 1; i < 16; i++) {
 80012a2:	3501      	adds	r5, #1
 80012a4:	2d10      	cmp	r5, #16
        ret = wc_Sha512Final(&sha, hash);
 80012a6:	4604      	mov	r4, r0
    for (i = 1; i < 16; i++) {
 80012a8:	d1e5      	bne.n	8001276 <sha512_test+0x1aa>
 80012aa:	e766      	b.n	800117a <sha512_test+0xae>
        ERROR_OUT(WC_TEST_RET_ENC_NC, exit);
 80012ac:	4c08      	ldr	r4, [pc, #32]	; (80012d0 <sha512_test+0x204>)
 80012ae:	e764      	b.n	800117a <sha512_test+0xae>
 80012b0:	0801ddc5 	.word	0x0801ddc5
 80012b4:	0801dcf3 	.word	0x0801dcf3
 80012b8:	0801de7d 	.word	0x0801de7d
 80012bc:	0801deee 	.word	0x0801deee
 80012c0:	0801df2f 	.word	0x0801df2f
 80012c4:	0801bdee 	.word	0x0801bdee
 80012c8:	fffe7960 	.word	0xfffe7960
 80012cc:	0801df70 	.word	0x0801df70
 80012d0:	fffff308 	.word	0xfffff308

080012d4 <sha512_224_test>:
{
 80012d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a.inLen  = XSTRLEN(a.input);
 80012d8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80014bc <sha512_224_test+0x1e8>
    b.inLen  = XSTRLEN(b.input);
 80012dc:	4f78      	ldr	r7, [pc, #480]	; (80014c0 <sha512_224_test+0x1ec>)
    c.inLen  = XSTRLEN(c.input);
 80012de:	4e79      	ldr	r6, [pc, #484]	; (80014c4 <sha512_224_test+0x1f0>)
{
 80012e0:	f5ad 6dc5 	sub.w	sp, sp, #1576	; 0x628
    a.inLen  = XSTRLEN(a.input);
 80012e4:	4640      	mov	r0, r8
 80012e6:	f019 fffe 	bl	801b2e6 <strlen>
 80012ea:	4605      	mov	r5, r0
    b.inLen  = XSTRLEN(b.input);
 80012ec:	4638      	mov	r0, r7
 80012ee:	f019 fffa 	bl	801b2e6 <strlen>
 80012f2:	4604      	mov	r4, r0
    c.inLen  = XSTRLEN(c.input);
 80012f4:	4630      	mov	r0, r6
 80012f6:	f019 fff6 	bl	801b2e6 <strlen>
    test_sha[0] = a;
 80012fa:	4b73      	ldr	r3, [pc, #460]	; (80014c8 <sha512_224_test+0x1f4>)
 80012fc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8001300:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
    test_sha[1] = b;
 8001304:	4b71      	ldr	r3, [pc, #452]	; (80014cc <sha512_224_test+0x1f8>)
 8001306:	9712      	str	r7, [sp, #72]	; 0x48
 8001308:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
    test_sha[2] = c;
 800130c:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <sha512_224_test+0x1fc>)
 800130e:	9616      	str	r6, [sp, #88]	; 0x58
 8001310:	e9cd 3017 	strd	r3, r0, [sp, #92]	; 0x5c
    ret = wc_InitSha512_224_ex(&sha, HEAP_HINT, devId);
 8001314:	2100      	movs	r1, #0
 8001316:	f06f 0201 	mvn.w	r2, #1
 800131a:	a81a      	add	r0, sp, #104	; 0x68
 800131c:	f00e fea4 	bl	8010068 <wc_InitSha512_224_ex>
    if (ret != 0)
 8001320:	4601      	mov	r1, r0
 8001322:	b168      	cbz	r0, 8001340 <sha512_224_test+0x6c>
        return WC_TEST_RET_ENC_EC(ret);
 8001324:	496b      	ldr	r1, [pc, #428]	; (80014d4 <sha512_224_test+0x200>)
 8001326:	4244      	negs	r4, r0
 8001328:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800132c:	434c      	muls	r4, r1
 800132e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001332:	f6a4 544b 	subw	r4, r4, #3403	; 0xd4b
} /* sha512_224_test */
 8001336:	4620      	mov	r0, r4
 8001338:	f50d 6dc5 	add.w	sp, sp, #1576	; 0x628
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = wc_InitSha512_224_ex(&shaCopy, HEAP_HINT, devId);
 8001340:	f06f 0201 	mvn.w	r2, #1
 8001344:	a852      	add	r0, sp, #328	; 0x148
 8001346:	f00e fe8f 	bl	8010068 <wc_InitSha512_224_ex>
    if (ret != 0) {
 800134a:	4606      	mov	r6, r0
 800134c:	b160      	cbz	r0, 8001368 <sha512_224_test+0x94>
        wc_Sha512_224Free(&sha);
 800134e:	a81a      	add	r0, sp, #104	; 0x68
 8001350:	f00e ff51 	bl	80101f6 <wc_Sha512_224Free>
        return WC_TEST_RET_ENC_EC(ret);
 8001354:	4274      	negs	r4, r6
 8001356:	485f      	ldr	r0, [pc, #380]	; (80014d4 <sha512_224_test+0x200>)
 8001358:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800135c:	4344      	muls	r4, r0
 800135e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001362:	f6a4 544f 	subw	r4, r4, #3407	; 0xd4f
 8001366:	e7e6      	b.n	8001336 <sha512_224_test+0x62>
 8001368:	ad0e      	add	r5, sp, #56	; 0x38
        ret = wc_Sha512_224Update(&sha, (byte*)test_sha[i].input,
 800136a:	68aa      	ldr	r2, [r5, #8]
 800136c:	6829      	ldr	r1, [r5, #0]
 800136e:	a81a      	add	r0, sp, #104	; 0x68
 8001370:	f00e ff3f 	bl	80101f2 <wc_Sha512_224Update>
        if (ret != 0)
 8001374:	b160      	cbz	r0, 8001390 <sha512_224_test+0xbc>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8001376:	4c57      	ldr	r4, [pc, #348]	; (80014d4 <sha512_224_test+0x200>)
 8001378:	4374      	muls	r4, r6
 800137a:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 800137e:	f6a4 5456 	subw	r4, r4, #3414	; 0xd56
    wc_Sha512_224Free(&sha);
 8001382:	a81a      	add	r0, sp, #104	; 0x68
 8001384:	f00e ff37 	bl	80101f6 <wc_Sha512_224Free>
    wc_Sha512_224Free(&shaCopy);
 8001388:	a852      	add	r0, sp, #328	; 0x148
 800138a:	f00e ff34 	bl	80101f6 <wc_Sha512_224Free>
    return ret;
 800138e:	e7d2      	b.n	8001336 <sha512_224_test+0x62>
        ret = wc_Sha512_224GetHash(&sha, hashcopy);
 8001390:	a907      	add	r1, sp, #28
 8001392:	a81a      	add	r0, sp, #104	; 0x68
 8001394:	f00e ff32 	bl	80101fc <wc_Sha512_224GetHash>
        if (ret != 0)
 8001398:	b130      	cbz	r0, 80013a8 <sha512_224_test+0xd4>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 800139a:	4c4e      	ldr	r4, [pc, #312]	; (80014d4 <sha512_224_test+0x200>)
 800139c:	4374      	muls	r4, r6
 800139e:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80013a2:	f6a4 5459 	subw	r4, r4, #3417	; 0xd59
 80013a6:	e7ec      	b.n	8001382 <sha512_224_test+0xae>
        ret = wc_Sha512_224Copy(&sha, &shaCopy);
 80013a8:	a952      	add	r1, sp, #328	; 0x148
 80013aa:	a81a      	add	r0, sp, #104	; 0x68
 80013ac:	f00e ff2c 	bl	8010208 <wc_Sha512_224Copy>
        if (ret != 0)
 80013b0:	b130      	cbz	r0, 80013c0 <sha512_224_test+0xec>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80013b2:	4c48      	ldr	r4, [pc, #288]	; (80014d4 <sha512_224_test+0x200>)
 80013b4:	4374      	muls	r4, r6
 80013b6:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80013ba:	f6a4 545c 	subw	r4, r4, #3420	; 0xd5c
 80013be:	e7e0      	b.n	8001382 <sha512_224_test+0xae>
        ret = wc_Sha512_224Final(&sha, hash);
 80013c0:	4669      	mov	r1, sp
 80013c2:	a81a      	add	r0, sp, #104	; 0x68
 80013c4:	f00e fe3c 	bl	8010040 <wc_Sha512_224Final>
        if (ret != 0)
 80013c8:	b130      	cbz	r0, 80013d8 <sha512_224_test+0x104>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80013ca:	4c42      	ldr	r4, [pc, #264]	; (80014d4 <sha512_224_test+0x200>)
 80013cc:	4374      	muls	r4, r6
 80013ce:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80013d2:	f6a4 545f 	subw	r4, r4, #3423	; 0xd5f
 80013d6:	e7d4      	b.n	8001382 <sha512_224_test+0xae>
        wc_Sha512_224Free(&shaCopy);
 80013d8:	a852      	add	r0, sp, #328	; 0x148
 80013da:	f00e ff0c 	bl	80101f6 <wc_Sha512_224Free>
        if (XMEMCMP(hash, test_sha[i].output, WC_SHA512_224_DIGEST_SIZE) != 0)
 80013de:	6869      	ldr	r1, [r5, #4]
 80013e0:	221c      	movs	r2, #28
 80013e2:	4668      	mov	r0, sp
 80013e4:	f019 fdec 	bl	801afc0 <memcmp>
 80013e8:	b130      	cbz	r0, 80013f8 <sha512_224_test+0x124>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80013ea:	4c3a      	ldr	r4, [pc, #232]	; (80014d4 <sha512_224_test+0x200>)
 80013ec:	4374      	muls	r4, r6
 80013ee:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80013f2:	f6a4 5463 	subw	r4, r4, #3427	; 0xd63
 80013f6:	e7c4      	b.n	8001382 <sha512_224_test+0xae>
        if (XMEMCMP(hash, hashcopy, WC_SHA512_224_DIGEST_SIZE) != 0)
 80013f8:	221c      	movs	r2, #28
 80013fa:	eb0d 0102 	add.w	r1, sp, r2
 80013fe:	4668      	mov	r0, sp
 8001400:	f019 fdde 	bl	801afc0 <memcmp>
 8001404:	b130      	cbz	r0, 8001414 <sha512_224_test+0x140>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8001406:	4c33      	ldr	r4, [pc, #204]	; (80014d4 <sha512_224_test+0x200>)
 8001408:	4374      	muls	r4, r6
 800140a:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 800140e:	f6a4 5467 	subw	r4, r4, #3431	; 0xd67
 8001412:	e7b6      	b.n	8001382 <sha512_224_test+0xae>
    for (i = 0; i < times; ++i) {
 8001414:	3601      	adds	r6, #1
 8001416:	2e03      	cmp	r6, #3
 8001418:	f105 0510 	add.w	r5, r5, #16
 800141c:	d1a5      	bne.n	800136a <sha512_224_test+0x96>
 800141e:	ab8a      	add	r3, sp, #552	; 0x228
        large_input[i] = (byte)(i & 0xFF);
 8001420:	f803 0b01 	strb.w	r0, [r3], #1
    for (i = 0; i < (int)sizeof(large_input); i++) {
 8001424:	3001      	adds	r0, #1
 8001426:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800142a:	d1f9      	bne.n	8001420 <sha512_224_test+0x14c>
 800142c:	2464      	movs	r4, #100	; 0x64
        ret = wc_Sha512_224Update(&sha, (byte*)large_input,
 800142e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001432:	a98a      	add	r1, sp, #552	; 0x228
 8001434:	a81a      	add	r0, sp, #104	; 0x68
 8001436:	f00e fedc 	bl	80101f2 <wc_Sha512_224Update>
        if (ret != 0)
 800143a:	b148      	cbz	r0, 8001450 <sha512_224_test+0x17c>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 800143c:	4244      	negs	r4, r0
 800143e:	4825      	ldr	r0, [pc, #148]	; (80014d4 <sha512_224_test+0x200>)
 8001440:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001444:	4344      	muls	r4, r0
 8001446:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800144a:	f6a4 5487 	subw	r4, r4, #3463	; 0xd87
 800144e:	e798      	b.n	8001382 <sha512_224_test+0xae>
    for (i = 0; i < times; ++i) {
 8001450:	3c01      	subs	r4, #1
 8001452:	d1ec      	bne.n	800142e <sha512_224_test+0x15a>
    ret = wc_Sha512_224Final(&sha, hash);
 8001454:	4669      	mov	r1, sp
 8001456:	a81a      	add	r0, sp, #104	; 0x68
 8001458:	f00e fdf2 	bl	8010040 <wc_Sha512_224Final>
    if (ret != 0)
 800145c:	b148      	cbz	r0, 8001472 <sha512_224_test+0x19e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 800145e:	4244      	negs	r4, r0
 8001460:	481c      	ldr	r0, [pc, #112]	; (80014d4 <sha512_224_test+0x200>)
 8001462:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001466:	4344      	muls	r4, r0
 8001468:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800146c:	f6a4 548b 	subw	r4, r4, #3467	; 0xd8b
 8001470:	e787      	b.n	8001382 <sha512_224_test+0xae>
    if (XMEMCMP(hash, large_digest, WC_SHA512_224_DIGEST_SIZE) != 0)
 8001472:	4919      	ldr	r1, [pc, #100]	; (80014d8 <sha512_224_test+0x204>)
 8001474:	221c      	movs	r2, #28
 8001476:	4668      	mov	r0, sp
 8001478:	f019 fda2 	bl	801afc0 <memcmp>
 800147c:	b9d8      	cbnz	r0, 80014b6 <sha512_224_test+0x1e2>
    for (i = 1; i < 16; i++) {
 800147e:	2501      	movs	r5, #1
        ret = wc_Sha512_224Update(&sha, (byte*)large_input + i,
 8001480:	ab8a      	add	r3, sp, #552	; 0x228
 8001482:	f5c5 6280 	rsb	r2, r5, #1024	; 0x400
 8001486:	1959      	adds	r1, r3, r5
 8001488:	a81a      	add	r0, sp, #104	; 0x68
 800148a:	f00e feb2 	bl	80101f2 <wc_Sha512_224Update>
        if (ret != 0)
 800148e:	b148      	cbz	r0, 80014a4 <sha512_224_test+0x1d0>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8001490:	4244      	negs	r4, r0
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <sha512_224_test+0x200>)
 8001494:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001498:	4344      	muls	r4, r0
 800149a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800149e:	f6a4 5495 	subw	r4, r4, #3477	; 0xd95
 80014a2:	e76e      	b.n	8001382 <sha512_224_test+0xae>
        ret = wc_Sha512_224Final(&sha, hash);
 80014a4:	4669      	mov	r1, sp
 80014a6:	a81a      	add	r0, sp, #104	; 0x68
 80014a8:	f00e fdca 	bl	8010040 <wc_Sha512_224Final>
    for (i = 1; i < 16; i++) {
 80014ac:	3501      	adds	r5, #1
 80014ae:	2d10      	cmp	r5, #16
        ret = wc_Sha512_224Final(&sha, hash);
 80014b0:	4604      	mov	r4, r0
    for (i = 1; i < 16; i++) {
 80014b2:	d1e5      	bne.n	8001480 <sha512_224_test+0x1ac>
 80014b4:	e765      	b.n	8001382 <sha512_224_test+0xae>
        ERROR_OUT(WC_TEST_RET_ENC_NC, exit);
 80014b6:	4c09      	ldr	r4, [pc, #36]	; (80014dc <sha512_224_test+0x208>)
 80014b8:	e763      	b.n	8001382 <sha512_224_test+0xae>
 80014ba:	bf00      	nop
 80014bc:	0801ddc5 	.word	0x0801ddc5
 80014c0:	0801dcf3 	.word	0x0801dcf3
 80014c4:	0801de7d 	.word	0x0801de7d
 80014c8:	0801dfb1 	.word	0x0801dfb1
 80014cc:	0801dfce 	.word	0x0801dfce
 80014d0:	0801dfeb 	.word	0x0801dfeb
 80014d4:	fffe7960 	.word	0xfffe7960
 80014d8:	0801e008 	.word	0x0801e008
 80014dc:	fffff273 	.word	0xfffff273

080014e0 <sha512_256_test>:
{
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a.inLen  = XSTRLEN(a.input);
 80014e4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80016c8 <sha512_256_test+0x1e8>
    b.inLen  = XSTRLEN(b.input);
 80014e8:	4f78      	ldr	r7, [pc, #480]	; (80016cc <sha512_256_test+0x1ec>)
    c.inLen  = XSTRLEN(c.input);
 80014ea:	4e79      	ldr	r6, [pc, #484]	; (80016d0 <sha512_256_test+0x1f0>)
{
 80014ec:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
    a.inLen  = XSTRLEN(a.input);
 80014f0:	4640      	mov	r0, r8
 80014f2:	f019 fef8 	bl	801b2e6 <strlen>
 80014f6:	4605      	mov	r5, r0
    b.inLen  = XSTRLEN(b.input);
 80014f8:	4638      	mov	r0, r7
 80014fa:	f019 fef4 	bl	801b2e6 <strlen>
 80014fe:	4604      	mov	r4, r0
    c.inLen  = XSTRLEN(c.input);
 8001500:	4630      	mov	r0, r6
 8001502:	f019 fef0 	bl	801b2e6 <strlen>
    test_sha[0] = a;
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <sha512_256_test+0x1f4>)
 8001508:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800150c:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
    test_sha[1] = b;
 8001510:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <sha512_256_test+0x1f8>)
 8001512:	9714      	str	r7, [sp, #80]	; 0x50
 8001514:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
    test_sha[2] = c;
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <sha512_256_test+0x1fc>)
 800151a:	9618      	str	r6, [sp, #96]	; 0x60
 800151c:	e9cd 3019 	strd	r3, r0, [sp, #100]	; 0x64
    ret = wc_InitSha512_256_ex(&sha, HEAP_HINT, devId);
 8001520:	2100      	movs	r1, #0
 8001522:	f06f 0201 	mvn.w	r2, #1
 8001526:	a81c      	add	r0, sp, #112	; 0x70
 8001528:	f00e fda6 	bl	8010078 <wc_InitSha512_256_ex>
    if (ret != 0)
 800152c:	4601      	mov	r1, r0
 800152e:	b168      	cbz	r0, 800154c <sha512_256_test+0x6c>
        return WC_TEST_RET_ENC_EC(ret);
 8001530:	496b      	ldr	r1, [pc, #428]	; (80016e0 <sha512_256_test+0x200>)
 8001532:	4244      	negs	r4, r0
 8001534:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001538:	434c      	muls	r4, r1
 800153a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800153e:	f6a4 54e3 	subw	r4, r4, #3555	; 0xde3
} /* sha512_256_test */
 8001542:	4620      	mov	r0, r4
 8001544:	f50d 6dc6 	add.w	sp, sp, #1584	; 0x630
 8001548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = wc_InitSha512_256_ex(&shaCopy, HEAP_HINT, devId);
 800154c:	f06f 0201 	mvn.w	r2, #1
 8001550:	a854      	add	r0, sp, #336	; 0x150
 8001552:	f00e fd91 	bl	8010078 <wc_InitSha512_256_ex>
    if (ret != 0) {
 8001556:	4606      	mov	r6, r0
 8001558:	b160      	cbz	r0, 8001574 <sha512_256_test+0x94>
        wc_Sha512_256Free(&sha);
 800155a:	a81c      	add	r0, sp, #112	; 0x70
 800155c:	f00e fe5d 	bl	801021a <wc_Sha512_256Free>
        return WC_TEST_RET_ENC_EC(ret);
 8001560:	4274      	negs	r4, r6
 8001562:	485f      	ldr	r0, [pc, #380]	; (80016e0 <sha512_256_test+0x200>)
 8001564:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001568:	4344      	muls	r4, r0
 800156a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800156e:	f6a4 54e7 	subw	r4, r4, #3559	; 0xde7
 8001572:	e7e6      	b.n	8001542 <sha512_256_test+0x62>
 8001574:	ad10      	add	r5, sp, #64	; 0x40
        ret = wc_Sha512_256Update(&sha, (byte*)test_sha[i].input,
 8001576:	68aa      	ldr	r2, [r5, #8]
 8001578:	6829      	ldr	r1, [r5, #0]
 800157a:	a81c      	add	r0, sp, #112	; 0x70
 800157c:	f00e fe4b 	bl	8010216 <wc_Sha512_256Update>
        if (ret != 0)
 8001580:	b160      	cbz	r0, 800159c <sha512_256_test+0xbc>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8001582:	4c57      	ldr	r4, [pc, #348]	; (80016e0 <sha512_256_test+0x200>)
 8001584:	4374      	muls	r4, r6
 8001586:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 800158a:	f6a4 54ee 	subw	r4, r4, #3566	; 0xdee
    wc_Sha512_256Free(&sha);
 800158e:	a81c      	add	r0, sp, #112	; 0x70
 8001590:	f00e fe43 	bl	801021a <wc_Sha512_256Free>
    wc_Sha512_256Free(&shaCopy);
 8001594:	a854      	add	r0, sp, #336	; 0x150
 8001596:	f00e fe40 	bl	801021a <wc_Sha512_256Free>
    return ret;
 800159a:	e7d2      	b.n	8001542 <sha512_256_test+0x62>
        ret = wc_Sha512_256GetHash(&sha, hashcopy);
 800159c:	a908      	add	r1, sp, #32
 800159e:	a81c      	add	r0, sp, #112	; 0x70
 80015a0:	f00e fe3e 	bl	8010220 <wc_Sha512_256GetHash>
        if (ret != 0)
 80015a4:	b138      	cbz	r0, 80015b6 <sha512_256_test+0xd6>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80015a6:	4c4e      	ldr	r4, [pc, #312]	; (80016e0 <sha512_256_test+0x200>)
 80015a8:	4374      	muls	r4, r6
 80015aa:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80015ae:	f46f 635f 	mvn.w	r3, #3568	; 0xdf0
 80015b2:	441c      	add	r4, r3
 80015b4:	e7eb      	b.n	800158e <sha512_256_test+0xae>
        ret = wc_Sha512_256Copy(&sha, &shaCopy);
 80015b6:	a954      	add	r1, sp, #336	; 0x150
 80015b8:	a81c      	add	r0, sp, #112	; 0x70
 80015ba:	f00e fe37 	bl	801022c <wc_Sha512_256Copy>
        if (ret != 0)
 80015be:	b130      	cbz	r0, 80015ce <sha512_256_test+0xee>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80015c0:	4c47      	ldr	r4, [pc, #284]	; (80016e0 <sha512_256_test+0x200>)
 80015c2:	4374      	muls	r4, r6
 80015c4:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80015c8:	f6a4 54f4 	subw	r4, r4, #3572	; 0xdf4
 80015cc:	e7df      	b.n	800158e <sha512_256_test+0xae>
        ret = wc_Sha512_256Final(&sha, hash);
 80015ce:	4669      	mov	r1, sp
 80015d0:	a81c      	add	r0, sp, #112	; 0x70
 80015d2:	f00e fd3b 	bl	801004c <wc_Sha512_256Final>
        if (ret != 0)
 80015d6:	b130      	cbz	r0, 80015e6 <sha512_256_test+0x106>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80015d8:	4c41      	ldr	r4, [pc, #260]	; (80016e0 <sha512_256_test+0x200>)
 80015da:	4374      	muls	r4, r6
 80015dc:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 80015e0:	f6a4 54f7 	subw	r4, r4, #3575	; 0xdf7
 80015e4:	e7d3      	b.n	800158e <sha512_256_test+0xae>
        wc_Sha512_256Free(&shaCopy);
 80015e6:	a854      	add	r0, sp, #336	; 0x150
 80015e8:	f00e fe17 	bl	801021a <wc_Sha512_256Free>
        if (XMEMCMP(hash, test_sha[i].output, WC_SHA512_256_DIGEST_SIZE) != 0)
 80015ec:	6869      	ldr	r1, [r5, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	4668      	mov	r0, sp
 80015f2:	f019 fce5 	bl	801afc0 <memcmp>
 80015f6:	b130      	cbz	r0, 8001606 <sha512_256_test+0x126>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 80015f8:	4c39      	ldr	r4, [pc, #228]	; (80016e0 <sha512_256_test+0x200>)
 80015fa:	4374      	muls	r4, r6
 80015fc:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 8001600:	f6a4 54fb 	subw	r4, r4, #3579	; 0xdfb
 8001604:	e7c3      	b.n	800158e <sha512_256_test+0xae>
        if (XMEMCMP(hash, hashcopy, WC_SHA512_256_DIGEST_SIZE) != 0)
 8001606:	2220      	movs	r2, #32
 8001608:	eb0d 0102 	add.w	r1, sp, r2
 800160c:	4668      	mov	r0, sp
 800160e:	f019 fcd7 	bl	801afc0 <memcmp>
 8001612:	b130      	cbz	r0, 8001622 <sha512_256_test+0x142>
            ERROR_OUT(WC_TEST_RET_ENC_I(i), exit);
 8001614:	4c32      	ldr	r4, [pc, #200]	; (80016e0 <sha512_256_test+0x200>)
 8001616:	4374      	muls	r4, r6
 8001618:	f104 4420 	add.w	r4, r4, #2684354560	; 0xa0000000
 800161c:	f6a4 54ff 	subw	r4, r4, #3583	; 0xdff
 8001620:	e7b5      	b.n	800158e <sha512_256_test+0xae>
    for (i = 0; i < times; ++i) {
 8001622:	3601      	adds	r6, #1
 8001624:	2e03      	cmp	r6, #3
 8001626:	f105 0510 	add.w	r5, r5, #16
 800162a:	d1a4      	bne.n	8001576 <sha512_256_test+0x96>
 800162c:	ab8c      	add	r3, sp, #560	; 0x230
        large_input[i] = (byte)(i & 0xFF);
 800162e:	f803 0b01 	strb.w	r0, [r3], #1
    for (i = 0; i < (int)sizeof(large_input); i++) {
 8001632:	3001      	adds	r0, #1
 8001634:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001638:	d1f9      	bne.n	800162e <sha512_256_test+0x14e>
 800163a:	2464      	movs	r4, #100	; 0x64
        ret = wc_Sha512_256Update(&sha, (byte*)large_input,
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	a98c      	add	r1, sp, #560	; 0x230
 8001642:	a81c      	add	r0, sp, #112	; 0x70
 8001644:	f00e fde7 	bl	8010216 <wc_Sha512_256Update>
        if (ret != 0)
 8001648:	b148      	cbz	r0, 800165e <sha512_256_test+0x17e>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 800164a:	4244      	negs	r4, r0
 800164c:	4824      	ldr	r0, [pc, #144]	; (80016e0 <sha512_256_test+0x200>)
 800164e:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001652:	4344      	muls	r4, r0
 8001654:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8001658:	f6a4 641f 	subw	r4, r4, #3615	; 0xe1f
 800165c:	e797      	b.n	800158e <sha512_256_test+0xae>
    for (i = 0; i < times; ++i) {
 800165e:	3c01      	subs	r4, #1
 8001660:	d1ec      	bne.n	800163c <sha512_256_test+0x15c>
    ret = wc_Sha512_256Final(&sha, hash);
 8001662:	4669      	mov	r1, sp
 8001664:	a81c      	add	r0, sp, #112	; 0x70
 8001666:	f00e fcf1 	bl	801004c <wc_Sha512_256Final>
    if (ret != 0)
 800166a:	b148      	cbz	r0, 8001680 <sha512_256_test+0x1a0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 800166c:	4244      	negs	r4, r0
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <sha512_256_test+0x200>)
 8001670:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001674:	4344      	muls	r4, r0
 8001676:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 800167a:	f6a4 6423 	subw	r4, r4, #3619	; 0xe23
 800167e:	e786      	b.n	800158e <sha512_256_test+0xae>
    if (XMEMCMP(hash, large_digest, WC_SHA512_256_DIGEST_SIZE) != 0)
 8001680:	4918      	ldr	r1, [pc, #96]	; (80016e4 <sha512_256_test+0x204>)
 8001682:	2220      	movs	r2, #32
 8001684:	4668      	mov	r0, sp
 8001686:	f019 fc9b 	bl	801afc0 <memcmp>
 800168a:	b9d8      	cbnz	r0, 80016c4 <sha512_256_test+0x1e4>
    for (i = 1; i < 16; i++) {
 800168c:	2501      	movs	r5, #1
        ret = wc_Sha512_256Update(&sha, (byte*)large_input + i,
 800168e:	ab8c      	add	r3, sp, #560	; 0x230
 8001690:	f5c5 6280 	rsb	r2, r5, #1024	; 0x400
 8001694:	1959      	adds	r1, r3, r5
 8001696:	a81c      	add	r0, sp, #112	; 0x70
 8001698:	f00e fdbd 	bl	8010216 <wc_Sha512_256Update>
        if (ret != 0)
 800169c:	b148      	cbz	r0, 80016b2 <sha512_256_test+0x1d2>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 800169e:	4244      	negs	r4, r0
 80016a0:	480f      	ldr	r0, [pc, #60]	; (80016e0 <sha512_256_test+0x200>)
 80016a2:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80016a6:	4344      	muls	r4, r0
 80016a8:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 80016ac:	f6a4 642d 	subw	r4, r4, #3629	; 0xe2d
 80016b0:	e76d      	b.n	800158e <sha512_256_test+0xae>
        ret = wc_Sha512_256Final(&sha, hash);
 80016b2:	4669      	mov	r1, sp
 80016b4:	a81c      	add	r0, sp, #112	; 0x70
 80016b6:	f00e fcc9 	bl	801004c <wc_Sha512_256Final>
    for (i = 1; i < 16; i++) {
 80016ba:	3501      	adds	r5, #1
 80016bc:	2d10      	cmp	r5, #16
        ret = wc_Sha512_256Final(&sha, hash);
 80016be:	4604      	mov	r4, r0
    for (i = 1; i < 16; i++) {
 80016c0:	d1e5      	bne.n	800168e <sha512_256_test+0x1ae>
 80016c2:	e764      	b.n	800158e <sha512_256_test+0xae>
        ERROR_OUT(WC_TEST_RET_ENC_NC, exit);
 80016c4:	4c08      	ldr	r4, [pc, #32]	; (80016e8 <sha512_256_test+0x208>)
 80016c6:	e762      	b.n	800158e <sha512_256_test+0xae>
 80016c8:	0801ddc5 	.word	0x0801ddc5
 80016cc:	0801dcf3 	.word	0x0801dcf3
 80016d0:	0801de7d 	.word	0x0801de7d
 80016d4:	0801e025 	.word	0x0801e025
 80016d8:	0801e046 	.word	0x0801e046
 80016dc:	0801e067 	.word	0x0801e067
 80016e0:	fffe7960 	.word	0xfffe7960
 80016e4:	0801e088 	.word	0x0801e088
 80016e8:	fffff1db 	.word	0xfffff1db

080016ec <hash_test>:
{
 80016ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    byte             data[] = "0123456789abcdef0123456789abcdef0123456";
 80016f0:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <hash_test+0x2b4>)
{
 80016f2:	b0ed      	sub	sp, #436	; 0x1b4
    byte             data[] = "0123456789abcdef0123456789abcdef0123456";
 80016f4:	ac0a      	add	r4, sp, #40	; 0x28
 80016f6:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	4622      	mov	r2, r4
 8001700:	c203      	stmia	r2!, {r0, r1}
 8001702:	3308      	adds	r3, #8
 8001704:	42ab      	cmp	r3, r5
 8001706:	4614      	mov	r4, r2
 8001708:	d1f7      	bne.n	80016fa <hash_test+0xe>
    enum wc_HashType typesGood[] = { WC_HASH_TYPE_MD5, WC_HASH_TYPE_SHA,
 800170a:	4aa6      	ldr	r2, [pc, #664]	; (80019a4 <hash_test+0x2b8>)
 800170c:	f8d2 00b7 	ldr.w	r0, [r2, #183]	; 0xb7
 8001710:	f8d2 10bb 	ldr.w	r1, [r2, #187]	; 0xbb
 8001714:	f8b2 20bf 	ldrh.w	r2, [r2, #191]	; 0xbf
 8001718:	ab07      	add	r3, sp, #28
 800171a:	c303      	stmia	r3!, {r0, r1}
    enum wc_HashType typesNoImpl[] = {
 800171c:	af05      	add	r7, sp, #20
    enum wc_HashType typesGood[] = { WC_HASH_TYPE_MD5, WC_HASH_TYPE_SHA,
 800171e:	801a      	strh	r2, [r3, #0]
    enum wc_HashType typesNoImpl[] = {
 8001720:	2303      	movs	r3, #3
 8001722:	703b      	strb	r3, [r7, #0]
 8001724:	2305      	movs	r3, #5
 8001726:	707b      	strb	r3, [r7, #1]
 8001728:	2307      	movs	r3, #7
 800172a:	70bb      	strb	r3, [r7, #2]
 800172c:	230a      	movs	r3, #10
 800172e:	70fb      	strb	r3, [r7, #3]
 8001730:	230b      	movs	r3, #11
 8001732:	713b      	strb	r3, [r7, #4]
 8001734:	230c      	movs	r3, #12
 8001736:	717b      	strb	r3, [r7, #5]
 8001738:	230d      	movs	r3, #13
 800173a:	71bb      	strb	r3, [r7, #6]
    enum wc_HashType typesBad[]  = { WC_HASH_TYPE_NONE, WC_HASH_TYPE_MD5_SHA,
 800173c:	2309      	movs	r3, #9
    enum wc_HashType typesNoImpl[] = {
 800173e:	2400      	movs	r4, #0
    enum wc_HashType typesBad[]  = { WC_HASH_TYPE_NONE, WC_HASH_TYPE_MD5_SHA,
 8001740:	f88d 300d 	strb.w	r3, [sp, #13]
 8001744:	2302      	movs	r3, #2
 8001746:	2201      	movs	r2, #1
 8001748:	f88d 300f 	strb.w	r3, [sp, #15]
    enum wc_HashType typesHashBad[] = { WC_HASH_TYPE_MD2, WC_HASH_TYPE_MD4,
 800174c:	f88d 3011 	strb.w	r3, [sp, #17]
    ret = wc_HashInit(NULL, WC_HASH_TYPE_SHA256);
 8001750:	2106      	movs	r1, #6
    enum wc_HashType typesHashBad[] = { WC_HASH_TYPE_MD2, WC_HASH_TYPE_MD4,
 8001752:	230e      	movs	r3, #14
    ret = wc_HashInit(NULL, WC_HASH_TYPE_SHA256);
 8001754:	4620      	mov	r0, r4
    enum wc_HashType typesNoImpl[] = {
 8001756:	71fc      	strb	r4, [r7, #7]
    enum wc_HashType typesBad[]  = { WC_HASH_TYPE_NONE, WC_HASH_TYPE_MD5_SHA,
 8001758:	f88d 400c 	strb.w	r4, [sp, #12]
 800175c:	f88d 200e 	strb.w	r2, [sp, #14]
    enum wc_HashType typesHashBad[] = { WC_HASH_TYPE_MD2, WC_HASH_TYPE_MD4,
 8001760:	f88d 2010 	strb.w	r2, [sp, #16]
 8001764:	f88d 3012 	strb.w	r3, [sp, #18]
 8001768:	f88d 4013 	strb.w	r4, [sp, #19]
    ret = wc_HashInit(NULL, WC_HASH_TYPE_SHA256);
 800176c:	f016 f87e 	bl	801786c <wc_HashInit>
    if (ret != BAD_FUNC_ARG)
 8001770:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001774:	d009      	beq.n	800178a <hash_test+0x9e>
        return WC_TEST_RET_ENC_EC(ret);
 8001776:	4240      	negs	r0, r0
 8001778:	f3c0 030a 	ubfx	r3, r0, #0, #11
 800177c:	4a8a      	ldr	r2, [pc, #552]	; (80019a8 <hash_test+0x2bc>)
 800177e:	488b      	ldr	r0, [pc, #556]	; (80019ac <hash_test+0x2c0>)
        return WC_TEST_RET_ENC_EC(ret);
 8001780:	fb02 0003 	mla	r0, r2, r3, r0
}
 8001784:	b06d      	add	sp, #436	; 0x1b4
 8001786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = wc_HashUpdate(NULL, WC_HASH_TYPE_SHA256, NULL, sizeof(data));
 800178a:	2328      	movs	r3, #40	; 0x28
 800178c:	4622      	mov	r2, r4
 800178e:	2106      	movs	r1, #6
 8001790:	4620      	mov	r0, r4
 8001792:	f016 f870 	bl	8017876 <wc_HashUpdate>
    if (ret != BAD_FUNC_ARG)
 8001796:	f110 0fad 	cmn.w	r0, #173	; 0xad
 800179a:	d005      	beq.n	80017a8 <hash_test+0xbc>
        return WC_TEST_RET_ENC_EC(ret);
 800179c:	4240      	negs	r0, r0
 800179e:	f3c0 030a 	ubfx	r3, r0, #0, #11
 80017a2:	4a81      	ldr	r2, [pc, #516]	; (80019a8 <hash_test+0x2bc>)
 80017a4:	4882      	ldr	r0, [pc, #520]	; (80019b0 <hash_test+0x2c4>)
 80017a6:	e7eb      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashUpdate(&hash, WC_HASH_TYPE_SHA256, NULL, sizeof(data));
 80017a8:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 80017ac:	2328      	movs	r3, #40	; 0x28
 80017ae:	4622      	mov	r2, r4
 80017b0:	2106      	movs	r1, #6
 80017b2:	4658      	mov	r0, fp
 80017b4:	f016 f85f 	bl	8017876 <wc_HashUpdate>
    if (ret != BAD_FUNC_ARG)
 80017b8:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80017bc:	d005      	beq.n	80017ca <hash_test+0xde>
        return WC_TEST_RET_ENC_EC(ret);
 80017be:	4240      	negs	r0, r0
 80017c0:	f3c0 030a 	ubfx	r3, r0, #0, #11
 80017c4:	4a78      	ldr	r2, [pc, #480]	; (80019a8 <hash_test+0x2bc>)
 80017c6:	487b      	ldr	r0, [pc, #492]	; (80019b4 <hash_test+0x2c8>)
 80017c8:	e7da      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashUpdate(NULL, WC_HASH_TYPE_SHA256, data, sizeof(data));
 80017ca:	2328      	movs	r3, #40	; 0x28
 80017cc:	eb0d 0203 	add.w	r2, sp, r3
 80017d0:	2106      	movs	r1, #6
 80017d2:	4620      	mov	r0, r4
 80017d4:	f016 f84f 	bl	8017876 <wc_HashUpdate>
    if (ret != BAD_FUNC_ARG)
 80017d8:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80017dc:	d009      	beq.n	80017f2 <hash_test+0x106>
        return WC_TEST_RET_ENC_EC(ret);
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <hash_test+0x2bc>)
 80017e0:	4240      	negs	r0, r0
 80017e2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80017e6:	4358      	muls	r0, r3
 80017e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017ec:	f5a0 50a1 	sub.w	r0, r0, #5152	; 0x1420
 80017f0:	e7c8      	b.n	8001784 <hash_test+0x98>
    ret = wc_HashFinal(NULL, WC_HASH_TYPE_SHA256, NULL);
 80017f2:	4622      	mov	r2, r4
 80017f4:	2106      	movs	r1, #6
 80017f6:	4620      	mov	r0, r4
 80017f8:	f016 f867 	bl	80178ca <wc_HashFinal>
    if (ret != BAD_FUNC_ARG)
 80017fc:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001800:	d005      	beq.n	800180e <hash_test+0x122>
        return WC_TEST_RET_ENC_EC(ret);
 8001802:	4240      	negs	r0, r0
 8001804:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001808:	4a67      	ldr	r2, [pc, #412]	; (80019a8 <hash_test+0x2bc>)
 800180a:	486b      	ldr	r0, [pc, #428]	; (80019b8 <hash_test+0x2cc>)
 800180c:	e7b8      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashFinal(&hash, WC_HASH_TYPE_SHA256, NULL);
 800180e:	4622      	mov	r2, r4
 8001810:	2106      	movs	r1, #6
 8001812:	4658      	mov	r0, fp
 8001814:	f016 f859 	bl	80178ca <wc_HashFinal>
    if (ret != BAD_FUNC_ARG)
 8001818:	f110 0fad 	cmn.w	r0, #173	; 0xad
 800181c:	d005      	beq.n	800182a <hash_test+0x13e>
        return WC_TEST_RET_ENC_EC(ret);
 800181e:	4240      	negs	r0, r0
 8001820:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001824:	4a60      	ldr	r2, [pc, #384]	; (80019a8 <hash_test+0x2bc>)
 8001826:	4865      	ldr	r0, [pc, #404]	; (80019bc <hash_test+0x2d0>)
 8001828:	e7aa      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashFinal(NULL, WC_HASH_TYPE_SHA256, out);
 800182a:	aa14      	add	r2, sp, #80	; 0x50
 800182c:	2106      	movs	r1, #6
 800182e:	4620      	mov	r0, r4
 8001830:	f016 f84b 	bl	80178ca <wc_HashFinal>
    if (ret != BAD_FUNC_ARG)
 8001834:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001838:	d005      	beq.n	8001846 <hash_test+0x15a>
        return WC_TEST_RET_ENC_EC(ret);
 800183a:	4240      	negs	r0, r0
 800183c:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001840:	4a59      	ldr	r2, [pc, #356]	; (80019a8 <hash_test+0x2bc>)
 8001842:	485f      	ldr	r0, [pc, #380]	; (80019c0 <hash_test+0x2d4>)
 8001844:	e79c      	b.n	8001780 <hash_test+0x94>
 8001846:	ae03      	add	r6, sp, #12
        ret = wc_HashInit(&hash, typesBad[i]);
 8001848:	f816 8b01 	ldrb.w	r8, [r6], #1
 800184c:	4658      	mov	r0, fp
 800184e:	4641      	mov	r1, r8
 8001850:	f016 f80c 	bl	801786c <wc_HashInit>
        if (ret != BAD_FUNC_ARG)
 8001854:	30ad      	adds	r0, #173	; 0xad
 8001856:	d004      	beq.n	8001862 <hash_test+0x176>
            return WC_TEST_RET_ENC_I(i);
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <hash_test+0x2bc>)
 800185a:	485a      	ldr	r0, [pc, #360]	; (80019c4 <hash_test+0x2d8>)
            return WC_TEST_RET_ENC_I(i);
 800185c:	fb03 0004 	mla	r0, r3, r4, r0
 8001860:	e790      	b.n	8001784 <hash_test+0x98>
        ret = wc_HashUpdate(&hash, typesBad[i], data, sizeof(data));
 8001862:	2328      	movs	r3, #40	; 0x28
 8001864:	eb0d 0203 	add.w	r2, sp, r3
 8001868:	4641      	mov	r1, r8
 800186a:	4658      	mov	r0, fp
 800186c:	f016 f803 	bl	8017876 <wc_HashUpdate>
        if (ret != BAD_FUNC_ARG)
 8001870:	30ad      	adds	r0, #173	; 0xad
 8001872:	d002      	beq.n	800187a <hash_test+0x18e>
            return WC_TEST_RET_ENC_I(i);
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <hash_test+0x2bc>)
 8001876:	4854      	ldr	r0, [pc, #336]	; (80019c8 <hash_test+0x2dc>)
 8001878:	e7f0      	b.n	800185c <hash_test+0x170>
        ret = wc_HashFinal(&hash, typesBad[i], out);
 800187a:	aa14      	add	r2, sp, #80	; 0x50
 800187c:	4641      	mov	r1, r8
 800187e:	4658      	mov	r0, fp
 8001880:	f016 f823 	bl	80178ca <wc_HashFinal>
        if (ret != BAD_FUNC_ARG)
 8001884:	30ad      	adds	r0, #173	; 0xad
 8001886:	d002      	beq.n	800188e <hash_test+0x1a2>
            return WC_TEST_RET_ENC_I(i);
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <hash_test+0x2bc>)
 800188a:	4850      	ldr	r0, [pc, #320]	; (80019cc <hash_test+0x2e0>)
 800188c:	e7e6      	b.n	800185c <hash_test+0x170>
        wc_HashFree(&hash, typesBad[i]);
 800188e:	4641      	mov	r1, r8
 8001890:	4658      	mov	r0, fp
    for (i = 0; i < (int)(sizeof(typesBad)/sizeof(*typesBad)); i++) {
 8001892:	3401      	adds	r4, #1
        wc_HashFree(&hash, typesBad[i]);
 8001894:	f016 f83a 	bl	801790c <wc_HashFree>
    for (i = 0; i < (int)(sizeof(typesBad)/sizeof(*typesBad)); i++) {
 8001898:	2c04      	cmp	r4, #4
 800189a:	d1d5      	bne.n	8001848 <hash_test+0x15c>
    for (i = 0, j = 0; i < (int)(sizeof(typesGood)/sizeof(*typesGood)); i++) {
 800189c:	f04f 0a00 	mov.w	sl, #0
 80018a0:	f10d 091c 	add.w	r9, sp, #28
 80018a4:	4654      	mov	r4, sl
        if (typesGood[i] == typesNoImpl[j]) {
 80018a6:	f819 8b01 	ldrb.w	r8, [r9], #1
 80018aa:	f817 300a 	ldrb.w	r3, [r7, sl]
        ret = wc_HashInit(&hash, typesGood[i]);
 80018ae:	4641      	mov	r1, r8
        if (typesGood[i] == typesNoImpl[j]) {
 80018b0:	4543      	cmp	r3, r8
        ret = wc_HashInit(&hash, typesGood[i]);
 80018b2:	4658      	mov	r0, fp
            j++;
 80018b4:	bf06      	itte	eq
 80018b6:	f10a 0a01 	addeq.w	sl, sl, #1
            exp_ret = HASH_TYPE_E;
 80018ba:	f06f 06e7 	mvneq.w	r6, #231	; 0xe7
        exp_ret = 0;
 80018be:	2600      	movne	r6, #0
        ret = wc_HashInit(&hash, typesGood[i]);
 80018c0:	f015 ffd4 	bl	801786c <wc_HashInit>
        if (ret != exp_ret)
 80018c4:	4286      	cmp	r6, r0
 80018c6:	d002      	beq.n	80018ce <hash_test+0x1e2>
            return WC_TEST_RET_ENC_I(i);
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <hash_test+0x2bc>)
 80018ca:	4841      	ldr	r0, [pc, #260]	; (80019d0 <hash_test+0x2e4>)
 80018cc:	e7c6      	b.n	800185c <hash_test+0x170>
        ret = wc_HashUpdate(&hash, typesGood[i], data, sizeof(data));
 80018ce:	2328      	movs	r3, #40	; 0x28
 80018d0:	eb0d 0203 	add.w	r2, sp, r3
 80018d4:	4641      	mov	r1, r8
 80018d6:	4658      	mov	r0, fp
 80018d8:	f015 ffcd 	bl	8017876 <wc_HashUpdate>
        if (ret != exp_ret)
 80018dc:	4286      	cmp	r6, r0
 80018de:	d002      	beq.n	80018e6 <hash_test+0x1fa>
            return WC_TEST_RET_ENC_I(i);
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <hash_test+0x2bc>)
 80018e2:	483c      	ldr	r0, [pc, #240]	; (80019d4 <hash_test+0x2e8>)
 80018e4:	e7ba      	b.n	800185c <hash_test+0x170>
        ret = wc_HashFinal(&hash, typesGood[i], out);
 80018e6:	aa14      	add	r2, sp, #80	; 0x50
 80018e8:	4641      	mov	r1, r8
 80018ea:	4658      	mov	r0, fp
 80018ec:	f015 ffed 	bl	80178ca <wc_HashFinal>
        if (ret != exp_ret)
 80018f0:	4286      	cmp	r6, r0
 80018f2:	d002      	beq.n	80018fa <hash_test+0x20e>
            return WC_TEST_RET_ENC_I(i);
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <hash_test+0x2bc>)
 80018f6:	4838      	ldr	r0, [pc, #224]	; (80019d8 <hash_test+0x2ec>)
 80018f8:	e7b0      	b.n	800185c <hash_test+0x170>
        wc_HashFree(&hash, typesGood[i]);
 80018fa:	4641      	mov	r1, r8
 80018fc:	4658      	mov	r0, fp
 80018fe:	f016 f805 	bl	801790c <wc_HashFree>
        digestSz = wc_HashGetDigestSize(typesGood[i]);
 8001902:	4640      	mov	r0, r8
 8001904:	f015 ff72 	bl	80177ec <wc_HashGetDigestSize>
 8001908:	4605      	mov	r5, r0
        if (exp_ret < 0 && digestSz != exp_ret)
 800190a:	b126      	cbz	r6, 8001916 <hash_test+0x22a>
 800190c:	4286      	cmp	r6, r0
 800190e:	d015      	beq.n	800193c <hash_test+0x250>
            return WC_TEST_RET_ENC_I(i);
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <hash_test+0x2bc>)
 8001912:	4832      	ldr	r0, [pc, #200]	; (80019dc <hash_test+0x2f0>)
 8001914:	e7a2      	b.n	800185c <hash_test+0x170>
        if (exp_ret == 0 && digestSz < 0)
 8001916:	2800      	cmp	r0, #0
 8001918:	da02      	bge.n	8001920 <hash_test+0x234>
            return WC_TEST_RET_ENC_I(i);
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <hash_test+0x2bc>)
 800191c:	4830      	ldr	r0, [pc, #192]	; (80019e0 <hash_test+0x2f4>)
 800191e:	e79d      	b.n	800185c <hash_test+0x170>
                                                                  digestSz - 1);
 8001920:	1e43      	subs	r3, r0, #1
            ret = wc_Hash(typesGood[i], data, sizeof(data), hashOut,
 8001922:	2228      	movs	r2, #40	; 0x28
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	eb0d 0102 	add.w	r1, sp, r2
 800192a:	ab24      	add	r3, sp, #144	; 0x90
 800192c:	4640      	mov	r0, r8
 800192e:	f016 f8d6 	bl	8017ade <wc_Hash>
            if (ret != BUFFER_E)
 8001932:	3084      	adds	r0, #132	; 0x84
 8001934:	d002      	beq.n	800193c <hash_test+0x250>
                return WC_TEST_RET_ENC_I(i);
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <hash_test+0x2bc>)
 8001938:	482a      	ldr	r0, [pc, #168]	; (80019e4 <hash_test+0x2f8>)
 800193a:	e78f      	b.n	800185c <hash_test+0x170>
        ret = wc_Hash(typesGood[i], data, sizeof(data), hashOut, digestSz);
 800193c:	2228      	movs	r2, #40	; 0x28
 800193e:	9500      	str	r5, [sp, #0]
 8001940:	ab24      	add	r3, sp, #144	; 0x90
 8001942:	eb0d 0102 	add.w	r1, sp, r2
 8001946:	4640      	mov	r0, r8
 8001948:	f016 f8c9 	bl	8017ade <wc_Hash>
        if (ret != exp_ret)
 800194c:	4286      	cmp	r6, r0
 800194e:	d002      	beq.n	8001956 <hash_test+0x26a>
            return WC_TEST_RET_ENC_I(i);
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <hash_test+0x2bc>)
 8001952:	4825      	ldr	r0, [pc, #148]	; (80019e8 <hash_test+0x2fc>)
 8001954:	e782      	b.n	800185c <hash_test+0x170>
        if (exp_ret == 0 && XMEMCMP(out, hashOut, digestSz) != 0)
 8001956:	b946      	cbnz	r6, 800196a <hash_test+0x27e>
 8001958:	462a      	mov	r2, r5
 800195a:	a924      	add	r1, sp, #144	; 0x90
 800195c:	a814      	add	r0, sp, #80	; 0x50
 800195e:	f019 fb2f 	bl	801afc0 <memcmp>
 8001962:	b110      	cbz	r0, 800196a <hash_test+0x27e>
            return WC_TEST_RET_ENC_I(i);
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <hash_test+0x2bc>)
 8001966:	4821      	ldr	r0, [pc, #132]	; (80019ec <hash_test+0x300>)
 8001968:	e778      	b.n	800185c <hash_test+0x170>
        ret = wc_HashGetBlockSize(typesGood[i]);
 800196a:	4640      	mov	r0, r8
 800196c:	f015 ff4a 	bl	8017804 <wc_HashGetBlockSize>
        if (exp_ret < 0 && ret != exp_ret)
 8001970:	b126      	cbz	r6, 800197c <hash_test+0x290>
 8001972:	4286      	cmp	r6, r0
 8001974:	d007      	beq.n	8001986 <hash_test+0x29a>
            return WC_TEST_RET_ENC_I(i);
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <hash_test+0x2bc>)
 8001978:	481d      	ldr	r0, [pc, #116]	; (80019f0 <hash_test+0x304>)
 800197a:	e76f      	b.n	800185c <hash_test+0x170>
        if (exp_ret == 0 && ret < 0)
 800197c:	2800      	cmp	r0, #0
 800197e:	da02      	bge.n	8001986 <hash_test+0x29a>
            return WC_TEST_RET_ENC_I(i);
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <hash_test+0x2bc>)
 8001982:	481c      	ldr	r0, [pc, #112]	; (80019f4 <hash_test+0x308>)
 8001984:	e76a      	b.n	800185c <hash_test+0x170>
        ret = wc_HashGetOID(typesGood[i]);
 8001986:	4640      	mov	r0, r8
 8001988:	f015 ff14 	bl	80177b4 <wc_HashGetOID>
        if (ret == BAD_FUNC_ARG ||
 800198c:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001990:	d003      	beq.n	800199a <hash_test+0x2ae>
 8001992:	bb9e      	cbnz	r6, 80019fc <hash_test+0x310>
                (exp_ret == 0 && ret == HASH_TYPE_E) ||
 8001994:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001998:	d133      	bne.n	8001a02 <hash_test+0x316>
            return WC_TEST_RET_ENC_I(i);
 800199a:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <hash_test+0x2bc>)
 800199c:	4816      	ldr	r0, [pc, #88]	; (80019f8 <hash_test+0x30c>)
 800199e:	e75d      	b.n	800185c <hash_test+0x170>
 80019a0:	0801e0a9 	.word	0x0801e0a9
 80019a4:	0801bd78 	.word	0x0801bd78
 80019a8:	fffe7960 	.word	0xfffe7960
 80019ac:	dfffebe9 	.word	0xdfffebe9
 80019b0:	dfffebe6 	.word	0xdfffebe6
 80019b4:	dfffebe3 	.word	0xdfffebe3
 80019b8:	dfffebdd 	.word	0xdfffebdd
 80019bc:	dfffebda 	.word	0xdfffebda
 80019c0:	dfffebd7 	.word	0xdfffebd7
 80019c4:	9fffebd1 	.word	0x9fffebd1
 80019c8:	9fffebce 	.word	0x9fffebce
 80019cc:	9fffebcb 	.word	0x9fffebcb
 80019d0:	9fffebbd 	.word	0x9fffebbd
 80019d4:	9fffebba 	.word	0x9fffebba
 80019d8:	9fffebb7 	.word	0x9fffebb7
 80019dc:	9fffebb2 	.word	0x9fffebb2
 80019e0:	9fffebb0 	.word	0x9fffebb0
 80019e4:	9fffebab 	.word	0x9fffebab
 80019e8:	9fffeba7 	.word	0x9fffeba7
 80019ec:	9fffeba5 	.word	0x9fffeba5
 80019f0:	9fffeba1 	.word	0x9fffeba1
 80019f4:	9fffeb9f 	.word	0x9fffeb9f
 80019f8:	9fffeb98 	.word	0x9fffeb98
                (exp_ret != 0 && ret != HASH_TYPE_E)) {
 80019fc:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001a00:	d1cb      	bne.n	800199a <hash_test+0x2ae>
        hashType = wc_OidGetHash(ret);
 8001a02:	f015 fee3 	bl	80177cc <wc_OidGetHash>
        if (exp_ret == 0 && hashType != typesGood[i])
 8001a06:	b926      	cbnz	r6, 8001a12 <hash_test+0x326>
 8001a08:	4580      	cmp	r8, r0
 8001a0a:	d002      	beq.n	8001a12 <hash_test+0x326>
            return WC_TEST_RET_ENC_I(i);
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <hash_test+0x504>)
 8001a0e:	4879      	ldr	r0, [pc, #484]	; (8001bf4 <hash_test+0x508>)
 8001a10:	e724      	b.n	800185c <hash_test+0x170>
    for (i = 0, j = 0; i < (int)(sizeof(typesGood)/sizeof(*typesGood)); i++) {
 8001a12:	3401      	adds	r4, #1
 8001a14:	2c0a      	cmp	r4, #10
 8001a16:	f47f af46 	bne.w	80018a6 <hash_test+0x1ba>
 8001a1a:	ac04      	add	r4, sp, #16
    for (i = 0; i < (int)(sizeof(typesHashBad)/sizeof(*typesHashBad)); i++) {
 8001a1c:	2500      	movs	r5, #0
        ret = wc_Hash(typesHashBad[i], data, sizeof(data), out, sizeof(out));
 8001a1e:	2640      	movs	r6, #64	; 0x40
 8001a20:	9600      	str	r6, [sp, #0]
 8001a22:	2228      	movs	r2, #40	; 0x28
 8001a24:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a28:	ab14      	add	r3, sp, #80	; 0x50
 8001a2a:	eb0d 0102 	add.w	r1, sp, r2
 8001a2e:	f016 f856 	bl	8017ade <wc_Hash>
        if ((ret != BAD_FUNC_ARG) && (ret != BUFFER_E) && (ret != HASH_TYPE_E))
 8001a32:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001a36:	d009      	beq.n	8001a4c <hash_test+0x360>
 8001a38:	f110 0f84 	cmn.w	r0, #132	; 0x84
 8001a3c:	d006      	beq.n	8001a4c <hash_test+0x360>
 8001a3e:	30e8      	adds	r0, #232	; 0xe8
 8001a40:	d004      	beq.n	8001a4c <hash_test+0x360>
            return WC_TEST_RET_ENC_I(i);
 8001a42:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <hash_test+0x504>)
 8001a44:	486c      	ldr	r0, [pc, #432]	; (8001bf8 <hash_test+0x50c>)
 8001a46:	fb03 0005 	mla	r0, r3, r5, r0
 8001a4a:	e69b      	b.n	8001784 <hash_test+0x98>
    for (i = 0; i < (int)(sizeof(typesHashBad)/sizeof(*typesHashBad)); i++) {
 8001a4c:	3501      	adds	r5, #1
 8001a4e:	2d04      	cmp	r5, #4
 8001a50:	d1e6      	bne.n	8001a20 <hash_test+0x334>
    ret = wc_HashGetOID(WC_HASH_TYPE_MD2);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f015 feae 	bl	80177b4 <wc_HashGetOID>
    if (ret != HASH_TYPE_E)
 8001a58:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001a5c:	d005      	beq.n	8001a6a <hash_test+0x37e>
        return WC_TEST_RET_ENC_EC(ret);
 8001a5e:	4240      	negs	r0, r0
 8001a60:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001a64:	4a62      	ldr	r2, [pc, #392]	; (8001bf0 <hash_test+0x504>)
 8001a66:	4865      	ldr	r0, [pc, #404]	; (8001bfc <hash_test+0x510>)
 8001a68:	e68a      	b.n	8001780 <hash_test+0x94>
    hashType = wc_OidGetHash(646); /* Md2h */
 8001a6a:	f240 2086 	movw	r0, #646	; 0x286
 8001a6e:	f015 fead 	bl	80177cc <wc_OidGetHash>
    if (hashType != WC_HASH_TYPE_NONE)
 8001a72:	4604      	mov	r4, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f040 80b1 	bne.w	8001bdc <hash_test+0x4f0>
    ret = wc_HashGetOID(WC_HASH_TYPE_MD5_SHA);
 8001a7a:	2009      	movs	r0, #9
 8001a7c:	f015 fe9a 	bl	80177b4 <wc_HashGetOID>
    if (ret != HASH_TYPE_E)
 8001a80:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001a84:	d005      	beq.n	8001a92 <hash_test+0x3a6>
        return WC_TEST_RET_ENC_EC(ret);
 8001a86:	4240      	negs	r0, r0
 8001a88:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001a8c:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <hash_test+0x504>)
 8001a8e:	485c      	ldr	r0, [pc, #368]	; (8001c00 <hash_test+0x514>)
 8001a90:	e676      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetOID(WC_HASH_TYPE_MD4);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f015 fe8e 	bl	80177b4 <wc_HashGetOID>
    if (ret != BAD_FUNC_ARG)
 8001a98:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001a9c:	d005      	beq.n	8001aaa <hash_test+0x3be>
        return WC_TEST_RET_ENC_EC(ret);
 8001a9e:	4240      	negs	r0, r0
 8001aa0:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <hash_test+0x504>)
 8001aa6:	4857      	ldr	r0, [pc, #348]	; (8001c04 <hash_test+0x518>)
 8001aa8:	e66a      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetOID(WC_HASH_TYPE_NONE);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f015 fe82 	bl	80177b4 <wc_HashGetOID>
    if (ret != BAD_FUNC_ARG)
 8001ab0:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001ab4:	d005      	beq.n	8001ac2 <hash_test+0x3d6>
        return WC_TEST_RET_ENC_EC(ret);
 8001ab6:	4240      	negs	r0, r0
 8001ab8:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <hash_test+0x504>)
 8001abe:	4852      	ldr	r0, [pc, #328]	; (8001c08 <hash_test+0x51c>)
 8001ac0:	e65e      	b.n	8001780 <hash_test+0x94>
    hashType = wc_OidGetHash(0);
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f015 fe82 	bl	80177cc <wc_OidGetHash>
    if (hashType != WC_HASH_TYPE_NONE)
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	f040 8089 	bne.w	8001be0 <hash_test+0x4f4>
    ret = wc_HashGetBlockSize(WC_HASH_TYPE_MD2);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f015 fe98 	bl	8017804 <wc_HashGetBlockSize>
    if (ret != HASH_TYPE_E)
 8001ad4:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001ad8:	d005      	beq.n	8001ae6 <hash_test+0x3fa>
        return WC_TEST_RET_ENC_EC(ret);
 8001ada:	4240      	negs	r0, r0
 8001adc:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <hash_test+0x504>)
 8001ae2:	484a      	ldr	r0, [pc, #296]	; (8001c0c <hash_test+0x520>)
 8001ae4:	e64c      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_MD2);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f015 fe80 	bl	80177ec <wc_HashGetDigestSize>
    if (ret != HASH_TYPE_E)
 8001aec:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001af0:	d005      	beq.n	8001afe <hash_test+0x412>
        return WC_TEST_RET_ENC_EC(ret);
 8001af2:	4240      	negs	r0, r0
 8001af4:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <hash_test+0x504>)
 8001afa:	4845      	ldr	r0, [pc, #276]	; (8001c10 <hash_test+0x524>)
 8001afc:	e640      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetBlockSize(WC_HASH_TYPE_MD4);
 8001afe:	2002      	movs	r0, #2
 8001b00:	f015 fe80 	bl	8017804 <wc_HashGetBlockSize>
    if (ret != HASH_TYPE_E)
 8001b04:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001b08:	d005      	beq.n	8001b16 <hash_test+0x42a>
        return WC_TEST_RET_ENC_EC(ret);
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001b10:	4a37      	ldr	r2, [pc, #220]	; (8001bf0 <hash_test+0x504>)
 8001b12:	4840      	ldr	r0, [pc, #256]	; (8001c14 <hash_test+0x528>)
 8001b14:	e634      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_MD4);
 8001b16:	2002      	movs	r0, #2
 8001b18:	f015 fe68 	bl	80177ec <wc_HashGetDigestSize>
    if (ret != HASH_TYPE_E)
 8001b1c:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001b20:	d005      	beq.n	8001b2e <hash_test+0x442>
        return WC_TEST_RET_ENC_EC(ret);
 8001b22:	4240      	negs	r0, r0
 8001b24:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001b28:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <hash_test+0x504>)
 8001b2a:	483b      	ldr	r0, [pc, #236]	; (8001c18 <hash_test+0x52c>)
 8001b2c:	e628      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetBlockSize(WC_HASH_TYPE_MD5_SHA);
 8001b2e:	2009      	movs	r0, #9
 8001b30:	f015 fe68 	bl	8017804 <wc_HashGetBlockSize>
    if (ret != HASH_TYPE_E)
 8001b34:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001b38:	d005      	beq.n	8001b46 <hash_test+0x45a>
        return WC_TEST_RET_ENC_EC(ret);
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <hash_test+0x504>)
 8001b42:	4836      	ldr	r0, [pc, #216]	; (8001c1c <hash_test+0x530>)
 8001b44:	e61c      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetBlockSize(WC_HASH_TYPE_BLAKE2B);
 8001b46:	200e      	movs	r0, #14
 8001b48:	f015 fe5c 	bl	8017804 <wc_HashGetBlockSize>
    if (ret != HASH_TYPE_E)
 8001b4c:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001b50:	d005      	beq.n	8001b5e <hash_test+0x472>
        return WC_TEST_RET_ENC_EC(ret);
 8001b52:	4240      	negs	r0, r0
 8001b54:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <hash_test+0x504>)
 8001b5a:	4831      	ldr	r0, [pc, #196]	; (8001c20 <hash_test+0x534>)
 8001b5c:	e610      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_BLAKE2B);
 8001b5e:	200e      	movs	r0, #14
 8001b60:	f015 fe44 	bl	80177ec <wc_HashGetDigestSize>
    if (ret != HASH_TYPE_E)
 8001b64:	f110 0fe8 	cmn.w	r0, #232	; 0xe8
 8001b68:	d005      	beq.n	8001b76 <hash_test+0x48a>
        return WC_TEST_RET_ENC_EC(ret);
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001b70:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <hash_test+0x504>)
 8001b72:	482c      	ldr	r0, [pc, #176]	; (8001c24 <hash_test+0x538>)
 8001b74:	e604      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetBlockSize(WC_HASH_TYPE_NONE);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f015 fe44 	bl	8017804 <wc_HashGetBlockSize>
    if (ret != BAD_FUNC_ARG)
 8001b7c:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001b80:	d005      	beq.n	8001b8e <hash_test+0x4a2>
        return WC_TEST_RET_ENC_EC(ret);
 8001b82:	4240      	negs	r0, r0
 8001b84:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <hash_test+0x504>)
 8001b8a:	4827      	ldr	r0, [pc, #156]	; (8001c28 <hash_test+0x53c>)
 8001b8c:	e5f8      	b.n	8001780 <hash_test+0x94>
    ret = wc_HashGetDigestSize(WC_HASH_TYPE_NONE);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f015 fe2c 	bl	80177ec <wc_HashGetDigestSize>
    if (ret != BAD_FUNC_ARG)
 8001b94:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001b98:	d005      	beq.n	8001ba6 <hash_test+0x4ba>
        return WC_TEST_RET_ENC_EC(ret);
 8001b9a:	4240      	negs	r0, r0
 8001b9c:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <hash_test+0x504>)
 8001ba2:	4822      	ldr	r0, [pc, #136]	; (8001c2c <hash_test+0x540>)
 8001ba4:	e5ec      	b.n	8001780 <hash_test+0x94>
    ret = wc_GetCTC_HashOID(WC_SHA);
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f00f faa4 	bl	80110f4 <wc_GetCTC_HashOID>
    if (ret == 0)
 8001bac:	b1d0      	cbz	r0, 8001be4 <hash_test+0x4f8>
    ret = wc_GetCTC_HashOID(WC_SHA256);
 8001bae:	2006      	movs	r0, #6
 8001bb0:	f00f faa0 	bl	80110f4 <wc_GetCTC_HashOID>
    if (ret == 0)
 8001bb4:	b1c0      	cbz	r0, 8001be8 <hash_test+0x4fc>
    ret = wc_GetCTC_HashOID(WC_SHA512);
 8001bb6:	2008      	movs	r0, #8
 8001bb8:	f00f fa9c 	bl	80110f4 <wc_GetCTC_HashOID>
    if (ret == 0)
 8001bbc:	b1b0      	cbz	r0, 8001bec <hash_test+0x500>
    ret = wc_GetCTC_HashOID(-1);
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc2:	f00f fa97 	bl	80110f4 <wc_GetCTC_HashOID>
    if (ret != 0)
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	f43f addc 	beq.w	8001784 <hash_test+0x98>
        return WC_TEST_RET_ENC_EC(ret);
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <hash_test+0x504>)
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <hash_test+0x544>)
 8001bd0:	4240      	negs	r0, r0
 8001bd2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001bd6:	fb02 3000 	mla	r0, r2, r0, r3
 8001bda:	e5d3      	b.n	8001784 <hash_test+0x98>
        return WC_TEST_RET_ENC_NC;
 8001bdc:	4815      	ldr	r0, [pc, #84]	; (8001c34 <hash_test+0x548>)
 8001bde:	e5d1      	b.n	8001784 <hash_test+0x98>
        return WC_TEST_RET_ENC_NC;
 8001be0:	4815      	ldr	r0, [pc, #84]	; (8001c38 <hash_test+0x54c>)
 8001be2:	e5cf      	b.n	8001784 <hash_test+0x98>
        return WC_TEST_RET_ENC_EC(ret);
 8001be4:	4815      	ldr	r0, [pc, #84]	; (8001c3c <hash_test+0x550>)
 8001be6:	e5cd      	b.n	8001784 <hash_test+0x98>
        return WC_TEST_RET_ENC_EC(ret);
 8001be8:	4815      	ldr	r0, [pc, #84]	; (8001c40 <hash_test+0x554>)
 8001bea:	e5cb      	b.n	8001784 <hash_test+0x98>
        return WC_TEST_RET_ENC_EC(ret);
 8001bec:	4815      	ldr	r0, [pc, #84]	; (8001c44 <hash_test+0x558>)
 8001bee:	e5c9      	b.n	8001784 <hash_test+0x98>
 8001bf0:	fffe7960 	.word	0xfffe7960
 8001bf4:	9fffeb93 	.word	0x9fffeb93
 8001bf8:	9fffeb8c 	.word	0x9fffeb8c
 8001bfc:	dfffeb82 	.word	0xdfffeb82
 8001c00:	dfffeb71 	.word	0xdfffeb71
 8001c04:	dfffeb6d 	.word	0xdfffeb6d
 8001c08:	dfffeb6a 	.word	0xdfffeb6a
 8001c0c:	dfffeb5d 	.word	0xdfffeb5d
 8001c10:	dfffeb55 	.word	0xdfffeb55
 8001c14:	dfffeb4c 	.word	0xdfffeb4c
 8001c18:	dfffeb44 	.word	0xdfffeb44
 8001c1c:	dfffeb3c 	.word	0xdfffeb3c
 8001c20:	dfffeb33 	.word	0xdfffeb33
 8001c24:	dfffeb2b 	.word	0xdfffeb2b
 8001c28:	dfffeb26 	.word	0xdfffeb26
 8001c2c:	dfffeb23 	.word	0xdfffeb23
 8001c30:	dfffeafb 	.word	0xdfffeafb
 8001c34:	ffffeb7a 	.word	0xffffeb7a
 8001c38:	ffffeb66 	.word	0xffffeb66
 8001c3c:	dfffeb13 	.word	0xdfffeb13
 8001c40:	dfffeb09 	.word	0xdfffeb09
 8001c44:	dfffeaff 	.word	0xdfffeaff

08001c48 <hmac_sha_test>:
{
 8001c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char* keys[]=
 8001c4c:	4c42      	ldr	r4, [pc, #264]	; (8001d58 <hmac_sha_test+0x110>)
    a.inLen  = XSTRLEN(a.input);
 8001c4e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001d5c <hmac_sha_test+0x114>
    b.inLen  = XSTRLEN(b.input);
 8001c52:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8001d60 <hmac_sha_test+0x118>
    c.inLen  = XSTRLEN(c.input);
 8001c56:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001d64 <hmac_sha_test+0x11c>
    const char* keys[]=
 8001c5a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
{
 8001c5e:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
    const char* keys[]=
 8001c62:	466f      	mov	r7, sp
 8001c64:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    a.inLen  = XSTRLEN(a.input);
 8001c68:	4650      	mov	r0, sl
 8001c6a:	f019 fb3c 	bl	801b2e6 <strlen>
 8001c6e:	4606      	mov	r6, r0
    b.inLen  = XSTRLEN(b.input);
 8001c70:	4648      	mov	r0, r9
 8001c72:	f019 fb38 	bl	801b2e6 <strlen>
 8001c76:	4605      	mov	r5, r0
    c.inLen  = XSTRLEN(c.input);
 8001c78:	4640      	mov	r0, r8
 8001c7a:	f019 fb34 	bl	801b2e6 <strlen>
    test_hmac[1] = b;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <hmac_sha_test+0x120>)
    test_hmac[0] = a;
 8001c80:	f8cd a020 	str.w	sl, [sp, #32]
    test_hmac[1] = b;
 8001c84:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
    test_hmac[2] = c;
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <hmac_sha_test+0x124>)
    test_hmac[1] = b;
 8001c8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    test_hmac[2] = c;
 8001c8e:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    test_hmac[0] = a;
 8001c92:	340c      	adds	r4, #12
 8001c94:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    test_hmac[2] = c;
 8001c98:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8001c9c:	ad08      	add	r5, sp, #32
    for (i = 0; i < times; ++i) {
 8001c9e:	2600      	movs	r6, #0
        if ((ret = wc_HmacInit(&hmac, HEAP_HINT, devId)) != 0)
 8001ca0:	f06f 0201 	mvn.w	r2, #1
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	a814      	add	r0, sp, #80	; 0x50
 8001ca8:	f00a fc18 	bl	800c4dc <wc_HmacInit>
 8001cac:	b138      	cbz	r0, 8001cbe <hmac_sha_test+0x76>
            return WC_TEST_RET_ENC_EC(ret);
 8001cae:	4240      	negs	r0, r0
 8001cb0:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <hmac_sha_test+0x128>)
 8001cb2:	4c30      	ldr	r4, [pc, #192]	; (8001d74 <hmac_sha_test+0x12c>)
 8001cb4:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8001cb8:	fb03 4400 	mla	r4, r3, r0, r4
 8001cbc:	e033      	b.n	8001d26 <hmac_sha_test+0xde>
        ret = wc_HmacSetKey(&hmac, WC_SHA, (byte*)keys[i],
 8001cbe:	f857 4b04 	ldr.w	r4, [r7], #4
            (word32)XSTRLEN(keys[i]));
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f019 fb0f 	bl	801b2e6 <strlen>
        ret = wc_HmacSetKey(&hmac, WC_SHA, (byte*)keys[i],
 8001cc8:	4622      	mov	r2, r4
            (word32)XSTRLEN(keys[i]));
 8001cca:	4603      	mov	r3, r0
        ret = wc_HmacSetKey(&hmac, WC_SHA, (byte*)keys[i],
 8001ccc:	2104      	movs	r1, #4
 8001cce:	a814      	add	r0, sp, #80	; 0x50
 8001cd0:	f00a fc32 	bl	800c538 <wc_HmacSetKey>
        if (ret != 0)
 8001cd4:	b128      	cbz	r0, 8001ce2 <hmac_sha_test+0x9a>
            return WC_TEST_RET_ENC_EC(ret);
 8001cd6:	4240      	negs	r0, r0
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <hmac_sha_test+0x128>)
 8001cda:	4c27      	ldr	r4, [pc, #156]	; (8001d78 <hmac_sha_test+0x130>)
 8001cdc:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001ce0:	e7ea      	b.n	8001cb8 <hmac_sha_test+0x70>
        ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
 8001ce2:	68aa      	ldr	r2, [r5, #8]
 8001ce4:	6829      	ldr	r1, [r5, #0]
 8001ce6:	a814      	add	r0, sp, #80	; 0x50
 8001ce8:	f00a fb56 	bl	800c398 <wc_HmacUpdate>
        if (ret != 0)
 8001cec:	b128      	cbz	r0, 8001cfa <hmac_sha_test+0xb2>
            return WC_TEST_RET_ENC_EC(ret);
 8001cee:	4240      	negs	r0, r0
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <hmac_sha_test+0x128>)
 8001cf2:	4c22      	ldr	r4, [pc, #136]	; (8001d7c <hmac_sha_test+0x134>)
 8001cf4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001cf8:	e7de      	b.n	8001cb8 <hmac_sha_test+0x70>
        ret = wc_HmacFinal(&hmac, hash);
 8001cfa:	a903      	add	r1, sp, #12
 8001cfc:	a814      	add	r0, sp, #80	; 0x50
 8001cfe:	f00a fb7d 	bl	800c3fc <wc_HmacFinal>
        if (ret != 0)
 8001d02:	b128      	cbz	r0, 8001d10 <hmac_sha_test+0xc8>
            return WC_TEST_RET_ENC_EC(ret);
 8001d04:	4240      	negs	r0, r0
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <hmac_sha_test+0x128>)
 8001d08:	4c1d      	ldr	r4, [pc, #116]	; (8001d80 <hmac_sha_test+0x138>)
 8001d0a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001d0e:	e7d3      	b.n	8001cb8 <hmac_sha_test+0x70>
        if (XMEMCMP(hash, test_hmac[i].output, WC_SHA_DIGEST_SIZE) != 0)
 8001d10:	6869      	ldr	r1, [r5, #4]
 8001d12:	2214      	movs	r2, #20
 8001d14:	a803      	add	r0, sp, #12
 8001d16:	f019 f953 	bl	801afc0 <memcmp>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	b140      	cbz	r0, 8001d30 <hmac_sha_test+0xe8>
            return WC_TEST_RET_ENC_I(i);
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <hmac_sha_test+0x128>)
 8001d20:	4c18      	ldr	r4, [pc, #96]	; (8001d84 <hmac_sha_test+0x13c>)
 8001d22:	fb00 4406 	mla	r4, r0, r6, r4
}
 8001d26:	4620      	mov	r0, r4
 8001d28:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
 8001d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        wc_HmacFree(&hmac);
 8001d30:	a814      	add	r0, sp, #80	; 0x50
    for (i = 0; i < times; ++i) {
 8001d32:	3601      	adds	r6, #1
        wc_HmacFree(&hmac);
 8001d34:	f00a fbe4 	bl	800c500 <wc_HmacFree>
    for (i = 0; i < times; ++i) {
 8001d38:	2e03      	cmp	r6, #3
 8001d3a:	f105 0510 	add.w	r5, r5, #16
 8001d3e:	d1af      	bne.n	8001ca0 <hmac_sha_test+0x58>
    if ((ret = wc_HmacSizeByType(WC_SHA)) != WC_SHA_DIGEST_SIZE)
 8001d40:	2004      	movs	r0, #4
 8001d42:	f00a faf5 	bl	800c330 <wc_HmacSizeByType>
 8001d46:	2814      	cmp	r0, #20
 8001d48:	d0ed      	beq.n	8001d26 <hmac_sha_test+0xde>
        return WC_TEST_RET_ENC_EC(ret);
 8001d4a:	4240      	negs	r0, r0
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <hmac_sha_test+0x128>)
 8001d4e:	4c0e      	ldr	r4, [pc, #56]	; (8001d88 <hmac_sha_test+0x140>)
 8001d50:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001d54:	e7b0      	b.n	8001cb8 <hmac_sha_test+0x70>
 8001d56:	bf00      	nop
 8001d58:	0801be3c 	.word	0x0801be3c
 8001d5c:	0801e0d1 	.word	0x0801e0d1
 8001d60:	0801e0da 	.word	0x0801e0da
 8001d64:	0801e0f7 	.word	0x0801e0f7
 8001d68:	0801e12a 	.word	0x0801e12a
 8001d6c:	0801e13f 	.word	0x0801e13f
 8001d70:	fffe7960 	.word	0xfffe7960
 8001d74:	dfffea6b 	.word	0xdfffea6b
 8001d78:	dfffea66 	.word	0xdfffea66
 8001d7c:	dfffea62 	.word	0xdfffea62
 8001d80:	dfffea5f 	.word	0xdfffea5f
 8001d84:	9fffea5c 	.word	0x9fffea5c
 8001d88:	dfffea55 	.word	0xdfffea55

08001d8c <hmac_sha256_test>:
{
 8001d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char* keys[]=
 8001d90:	4d4a      	ldr	r5, [pc, #296]	; (8001ebc <hmac_sha256_test+0x130>)
    a.inLen  = XSTRLEN(a.input);
 8001d92:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8001ec0 <hmac_sha256_test+0x134>
    b.inLen  = XSTRLEN(b.input);
 8001d96:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8001ec4 <hmac_sha256_test+0x138>
    c.inLen  = XSTRLEN(c.input);
 8001d9a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001ec8 <hmac_sha256_test+0x13c>
    const char* keys[]=
 8001d9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
{
 8001da2:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
    const char* keys[]=
 8001da6:	466c      	mov	r4, sp
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    a.inLen  = XSTRLEN(a.input);
 8001dac:	4650      	mov	r0, sl
 8001dae:	f019 fa9a 	bl	801b2e6 <strlen>
 8001db2:	4607      	mov	r7, r0
    b.inLen  = XSTRLEN(b.input);
 8001db4:	4648      	mov	r0, r9
 8001db6:	f019 fa96 	bl	801b2e6 <strlen>
 8001dba:	4606      	mov	r6, r0
    c.inLen  = XSTRLEN(c.input);
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	f019 fa92 	bl	801b2e6 <strlen>
    test_hmac[0] = a;
 8001dc2:	f105 0310 	add.w	r3, r5, #16
 8001dc6:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
    test_hmac[2] = c;
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <hmac_sha256_test+0x140>)
    test_hmac[0] = a;
 8001dcc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    test_hmac[1] = b;
 8001dd0:	3531      	adds	r5, #49	; 0x31
    test_hmac[2] = c;
 8001dd2:	e9cd 3015 	strd	r3, r0, [sp, #84]	; 0x54
    test_hmac[3] = d;
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <hmac_sha256_test+0x144>)
    test_hmac[1] = b;
 8001dd8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8001ddc:	e9cd 5611 	strd	r5, r6, [sp, #68]	; 0x44
    test_hmac[3] = d;
 8001de0:	2500      	movs	r5, #0
 8001de2:	e9cd 3519 	strd	r3, r5, [sp, #100]	; 0x64
    test_hmac[2] = c;
 8001de6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    test_hmac[3] = d;
 8001dea:	9518      	str	r5, [sp, #96]	; 0x60
 8001dec:	ae0c      	add	r6, sp, #48	; 0x30
 8001dee:	4627      	mov	r7, r4
        if (wc_HmacInit(&hmac, HEAP_HINT, devId) != 0)
 8001df0:	f06f 0201 	mvn.w	r2, #1
 8001df4:	2100      	movs	r1, #0
 8001df6:	a81c      	add	r0, sp, #112	; 0x70
 8001df8:	f00a fb70 	bl	800c4dc <wc_HmacInit>
 8001dfc:	b140      	cbz	r0, 8001e10 <hmac_sha256_test+0x84>
            return WC_TEST_RET_ENC_I(i);
 8001dfe:	4835      	ldr	r0, [pc, #212]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001e00:	4c35      	ldr	r4, [pc, #212]	; (8001ed8 <hmac_sha256_test+0x14c>)
            return WC_TEST_RET_ENC_I(i);
 8001e02:	fb00 4405 	mla	r4, r0, r5, r4
}
 8001e06:	4620      	mov	r0, r4
 8001e08:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8001e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = wc_HmacSetKey(&hmac, WC_SHA256, (byte*)keys[i],
 8001e10:	f857 4b04 	ldr.w	r4, [r7], #4
            (word32)XSTRLEN(keys[i]));
 8001e14:	4620      	mov	r0, r4
 8001e16:	f019 fa66 	bl	801b2e6 <strlen>
        ret = wc_HmacSetKey(&hmac, WC_SHA256, (byte*)keys[i],
 8001e1a:	4622      	mov	r2, r4
            (word32)XSTRLEN(keys[i]));
 8001e1c:	4603      	mov	r3, r0
        ret = wc_HmacSetKey(&hmac, WC_SHA256, (byte*)keys[i],
 8001e1e:	2106      	movs	r1, #6
 8001e20:	a81c      	add	r0, sp, #112	; 0x70
 8001e22:	f00a fb89 	bl	800c538 <wc_HmacSetKey>
        if (ret != 0)
 8001e26:	b110      	cbz	r0, 8001e2e <hmac_sha256_test+0xa2>
            return WC_TEST_RET_ENC_I(i);
 8001e28:	482a      	ldr	r0, [pc, #168]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001e2a:	4c2c      	ldr	r4, [pc, #176]	; (8001edc <hmac_sha256_test+0x150>)
 8001e2c:	e7e9      	b.n	8001e02 <hmac_sha256_test+0x76>
        if (test_hmac[i].input != NULL) {
 8001e2e:	6831      	ldr	r1, [r6, #0]
 8001e30:	b139      	cbz	r1, 8001e42 <hmac_sha256_test+0xb6>
            ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
 8001e32:	68b2      	ldr	r2, [r6, #8]
 8001e34:	a81c      	add	r0, sp, #112	; 0x70
 8001e36:	f00a faaf 	bl	800c398 <wc_HmacUpdate>
            if (ret != 0)
 8001e3a:	b110      	cbz	r0, 8001e42 <hmac_sha256_test+0xb6>
                return WC_TEST_RET_ENC_I(i);
 8001e3c:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001e3e:	4c28      	ldr	r4, [pc, #160]	; (8001ee0 <hmac_sha256_test+0x154>)
 8001e40:	e7df      	b.n	8001e02 <hmac_sha256_test+0x76>
        ret = wc_HmacFinal(&hmac, hash);
 8001e42:	a904      	add	r1, sp, #16
 8001e44:	a81c      	add	r0, sp, #112	; 0x70
 8001e46:	f00a fad9 	bl	800c3fc <wc_HmacFinal>
        if (ret != 0)
 8001e4a:	b110      	cbz	r0, 8001e52 <hmac_sha256_test+0xc6>
            return WC_TEST_RET_ENC_I(i);
 8001e4c:	4821      	ldr	r0, [pc, #132]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001e4e:	4c25      	ldr	r4, [pc, #148]	; (8001ee4 <hmac_sha256_test+0x158>)
 8001e50:	e7d7      	b.n	8001e02 <hmac_sha256_test+0x76>
        if (XMEMCMP(hash, test_hmac[i].output, WC_SHA256_DIGEST_SIZE) != 0)
 8001e52:	6871      	ldr	r1, [r6, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	a804      	add	r0, sp, #16
 8001e58:	f019 f8b2 	bl	801afc0 <memcmp>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	b110      	cbz	r0, 8001e66 <hmac_sha256_test+0xda>
            return WC_TEST_RET_ENC_I(i);
 8001e60:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001e62:	4c21      	ldr	r4, [pc, #132]	; (8001ee8 <hmac_sha256_test+0x15c>)
 8001e64:	e7cd      	b.n	8001e02 <hmac_sha256_test+0x76>
        wc_HmacFree(&hmac);
 8001e66:	a81c      	add	r0, sp, #112	; 0x70
    for (i = 0; i < times; ++i) {
 8001e68:	3501      	adds	r5, #1
        wc_HmacFree(&hmac);
 8001e6a:	f00a fb49 	bl	800c500 <wc_HmacFree>
    for (i = 0; i < times; ++i) {
 8001e6e:	2d04      	cmp	r5, #4
 8001e70:	f106 0610 	add.w	r6, r6, #16
 8001e74:	d1bc      	bne.n	8001df0 <hmac_sha256_test+0x64>
    if ((ret = wc_HmacSizeByType(WC_SHA256)) != WC_SHA256_DIGEST_SIZE)
 8001e76:	2006      	movs	r0, #6
 8001e78:	f00a fa5a 	bl	800c330 <wc_HmacSizeByType>
 8001e7c:	2820      	cmp	r0, #32
 8001e7e:	d007      	beq.n	8001e90 <hmac_sha256_test+0x104>
        return WC_TEST_RET_ENC_EC(ret);
 8001e80:	4240      	negs	r0, r0
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001e84:	4c19      	ldr	r4, [pc, #100]	; (8001eec <hmac_sha256_test+0x160>)
 8001e86:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8001e8a:	fb03 4400 	mla	r4, r3, r0, r4
 8001e8e:	e7ba      	b.n	8001e06 <hmac_sha256_test+0x7a>
    if ((ret = wc_HmacSizeByType(21)) != BAD_FUNC_ARG)
 8001e90:	2015      	movs	r0, #21
 8001e92:	f00a fa4d 	bl	800c330 <wc_HmacSizeByType>
 8001e96:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8001e9a:	d005      	beq.n	8001ea8 <hmac_sha256_test+0x11c>
        return WC_TEST_RET_ENC_EC(ret);
 8001e9c:	4240      	negs	r0, r0
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001ea0:	4c13      	ldr	r4, [pc, #76]	; (8001ef0 <hmac_sha256_test+0x164>)
 8001ea2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001ea6:	e7f0      	b.n	8001e8a <hmac_sha256_test+0xfe>
    if ((ret = wolfSSL_GetHmacMaxSize()) != WC_MAX_DIGEST_SIZE)
 8001ea8:	f00a fbd0 	bl	800c64c <wolfSSL_GetHmacMaxSize>
 8001eac:	2840      	cmp	r0, #64	; 0x40
 8001eae:	d0aa      	beq.n	8001e06 <hmac_sha256_test+0x7a>
        return WC_TEST_RET_ENC_EC(ret);
 8001eb0:	4240      	negs	r0, r0
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <hmac_sha256_test+0x148>)
 8001eb4:	4c0f      	ldr	r4, [pc, #60]	; (8001ef4 <hmac_sha256_test+0x168>)
 8001eb6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001eba:	e7e6      	b.n	8001e8a <hmac_sha256_test+0xfe>
 8001ebc:	0801be60 	.word	0x0801be60
 8001ec0:	0801e0d1 	.word	0x0801e0d1
 8001ec4:	0801e0da 	.word	0x0801e0da
 8001ec8:	0801e0f7 	.word	0x0801e0f7
 8001ecc:	0801e154 	.word	0x0801e154
 8001ed0:	0801e175 	.word	0x0801e175
 8001ed4:	fffe7960 	.word	0xfffe7960
 8001ed8:	9fffe9a8 	.word	0x9fffe9a8
 8001edc:	9fffe9a3 	.word	0x9fffe9a3
 8001ee0:	9fffe99e 	.word	0x9fffe99e
 8001ee4:	9fffe99a 	.word	0x9fffe99a
 8001ee8:	9fffe997 	.word	0x9fffe997
 8001eec:	dfffe990 	.word	0xdfffe990
 8001ef0:	dfffe98e 	.word	0xdfffe98e
 8001ef4:	dfffe98b 	.word	0xdfffe98b

08001ef8 <hmac_sha512_test>:
{
 8001ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char* keys[]=
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <hmac_sha512_test+0x124>)
    a.inLen  = XSTRLEN(a.input);
 8001efe:	f8df b120 	ldr.w	fp, [pc, #288]	; 8002020 <hmac_sha512_test+0x128>
    b.inLen  = XSTRLEN(b.input);
 8001f02:	f8df a120 	ldr.w	sl, [pc, #288]	; 8002024 <hmac_sha512_test+0x12c>
    c.inLen  = XSTRLEN(c.input);
 8001f06:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8002028 <hmac_sha512_test+0x130>
    d.inLen  = XSTRLEN(d.input);
 8001f0a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800202c <hmac_sha512_test+0x134>
    const char* keys[]=
 8001f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 8001f10:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
    const char* keys[]=
 8001f14:	466e      	mov	r6, sp
 8001f16:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    a.inLen  = XSTRLEN(a.input);
 8001f1a:	4658      	mov	r0, fp
 8001f1c:	f019 f9e3 	bl	801b2e6 <strlen>
 8001f20:	4607      	mov	r7, r0
    b.inLen  = XSTRLEN(b.input);
 8001f22:	4650      	mov	r0, sl
 8001f24:	f019 f9df 	bl	801b2e6 <strlen>
 8001f28:	4605      	mov	r5, r0
    c.inLen  = XSTRLEN(c.input);
 8001f2a:	4648      	mov	r0, r9
 8001f2c:	f019 f9db 	bl	801b2e6 <strlen>
 8001f30:	4604      	mov	r4, r0
    d.inLen  = XSTRLEN(d.input);
 8001f32:	4640      	mov	r0, r8
 8001f34:	f019 f9d7 	bl	801b2e6 <strlen>
    test_hmac[0] = a;
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <hmac_sha512_test+0x138>)
 8001f3a:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8001f3e:	e9cd 3715 	strd	r3, r7, [sp, #84]	; 0x54
    test_hmac[1] = b;
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <hmac_sha512_test+0x13c>)
 8001f44:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8001f48:	e9cd 3519 	strd	r3, r5, [sp, #100]	; 0x64
    test_hmac[2] = c;
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <hmac_sha512_test+0x140>)
 8001f4e:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8001f52:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
    test_hmac[3] = d;
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <hmac_sha512_test+0x144>)
 8001f58:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8001f5c:	e9cd 3021 	strd	r3, r0, [sp, #132]	; 0x84
    for (i = 0; i < times; ++i) {
 8001f60:	ad14      	add	r5, sp, #80	; 0x50
 8001f62:	2700      	movs	r7, #0
        if ((ret = wc_HmacInit(&hmac, HEAP_HINT, devId)) != 0)
 8001f64:	f06f 0201 	mvn.w	r2, #1
 8001f68:	2100      	movs	r1, #0
 8001f6a:	a824      	add	r0, sp, #144	; 0x90
 8001f6c:	f00a fab6 	bl	800c4dc <wc_HmacInit>
 8001f70:	b138      	cbz	r0, 8001f82 <hmac_sha512_test+0x8a>
            return WC_TEST_RET_ENC_EC(ret);
 8001f72:	4240      	negs	r0, r0
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <hmac_sha512_test+0x148>)
 8001f76:	4c33      	ldr	r4, [pc, #204]	; (8002044 <hmac_sha512_test+0x14c>)
 8001f78:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8001f7c:	fb03 4400 	mla	r4, r3, r0, r4
 8001f80:	e033      	b.n	8001fea <hmac_sha512_test+0xf2>
        ret = wc_HmacSetKey(&hmac, WC_SHA512, (byte*)keys[i],
 8001f82:	f856 4b04 	ldr.w	r4, [r6], #4
            (word32)XSTRLEN(keys[i]));
 8001f86:	4620      	mov	r0, r4
 8001f88:	f019 f9ad 	bl	801b2e6 <strlen>
        ret = wc_HmacSetKey(&hmac, WC_SHA512, (byte*)keys[i],
 8001f8c:	4622      	mov	r2, r4
            (word32)XSTRLEN(keys[i]));
 8001f8e:	4603      	mov	r3, r0
        ret = wc_HmacSetKey(&hmac, WC_SHA512, (byte*)keys[i],
 8001f90:	2108      	movs	r1, #8
 8001f92:	a824      	add	r0, sp, #144	; 0x90
 8001f94:	f00a fad0 	bl	800c538 <wc_HmacSetKey>
        if (ret != 0)
 8001f98:	b128      	cbz	r0, 8001fa6 <hmac_sha512_test+0xae>
            return WC_TEST_RET_ENC_EC(ret);
 8001f9a:	4240      	negs	r0, r0
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <hmac_sha512_test+0x148>)
 8001f9e:	4c2a      	ldr	r4, [pc, #168]	; (8002048 <hmac_sha512_test+0x150>)
 8001fa0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001fa4:	e7ea      	b.n	8001f7c <hmac_sha512_test+0x84>
        ret = wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
 8001fa6:	68aa      	ldr	r2, [r5, #8]
 8001fa8:	6829      	ldr	r1, [r5, #0]
 8001faa:	a824      	add	r0, sp, #144	; 0x90
 8001fac:	f00a f9f4 	bl	800c398 <wc_HmacUpdate>
        if (ret != 0)
 8001fb0:	b128      	cbz	r0, 8001fbe <hmac_sha512_test+0xc6>
            return WC_TEST_RET_ENC_EC(ret);
 8001fb2:	4240      	negs	r0, r0
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <hmac_sha512_test+0x148>)
 8001fb6:	4c25      	ldr	r4, [pc, #148]	; (800204c <hmac_sha512_test+0x154>)
 8001fb8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001fbc:	e7de      	b.n	8001f7c <hmac_sha512_test+0x84>
        ret = wc_HmacFinal(&hmac, hash);
 8001fbe:	a904      	add	r1, sp, #16
 8001fc0:	a824      	add	r0, sp, #144	; 0x90
 8001fc2:	f00a fa1b 	bl	800c3fc <wc_HmacFinal>
        if (ret != 0)
 8001fc6:	b128      	cbz	r0, 8001fd4 <hmac_sha512_test+0xdc>
            return WC_TEST_RET_ENC_EC(ret);
 8001fc8:	4240      	negs	r0, r0
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <hmac_sha512_test+0x148>)
 8001fcc:	4c20      	ldr	r4, [pc, #128]	; (8002050 <hmac_sha512_test+0x158>)
 8001fce:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001fd2:	e7d3      	b.n	8001f7c <hmac_sha512_test+0x84>
        if (XMEMCMP(hash, test_hmac[i].output, WC_SHA512_DIGEST_SIZE) != 0)
 8001fd4:	6869      	ldr	r1, [r5, #4]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	a804      	add	r0, sp, #16
 8001fda:	f018 fff1 	bl	801afc0 <memcmp>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	b140      	cbz	r0, 8001ff4 <hmac_sha512_test+0xfc>
            return WC_TEST_RET_ENC_I(i);
 8001fe2:	4817      	ldr	r0, [pc, #92]	; (8002040 <hmac_sha512_test+0x148>)
 8001fe4:	4c1b      	ldr	r4, [pc, #108]	; (8002054 <hmac_sha512_test+0x15c>)
 8001fe6:	fb00 4407 	mla	r4, r0, r7, r4
}
 8001fea:	4620      	mov	r0, r4
 8001fec:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 8001ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        wc_HmacFree(&hmac);
 8001ff4:	a824      	add	r0, sp, #144	; 0x90
    for (i = 0; i < times; ++i) {
 8001ff6:	3701      	adds	r7, #1
        wc_HmacFree(&hmac);
 8001ff8:	f00a fa82 	bl	800c500 <wc_HmacFree>
    for (i = 0; i < times; ++i) {
 8001ffc:	2f04      	cmp	r7, #4
 8001ffe:	f105 0510 	add.w	r5, r5, #16
 8002002:	d1af      	bne.n	8001f64 <hmac_sha512_test+0x6c>
    if ((ret = wc_HmacSizeByType(WC_SHA512)) != WC_SHA512_DIGEST_SIZE)
 8002004:	2008      	movs	r0, #8
 8002006:	f00a f993 	bl	800c330 <wc_HmacSizeByType>
 800200a:	2840      	cmp	r0, #64	; 0x40
 800200c:	d0ed      	beq.n	8001fea <hmac_sha512_test+0xf2>
        return WC_TEST_RET_ENC_EC(ret);
 800200e:	4240      	negs	r0, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <hmac_sha512_test+0x148>)
 8002012:	4c11      	ldr	r4, [pc, #68]	; (8002058 <hmac_sha512_test+0x160>)
 8002014:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002018:	e7b0      	b.n	8001f7c <hmac_sha512_test+0x84>
 800201a:	bf00      	nop
 800201c:	0801beb4 	.word	0x0801beb4
 8002020:	0801e0d1 	.word	0x0801e0d1
 8002024:	0801e0da 	.word	0x0801e0da
 8002028:	0801e0f7 	.word	0x0801e0f7
 800202c:	0801e196 	.word	0x0801e196
 8002030:	0801e1a4 	.word	0x0801e1a4
 8002034:	0801e1e5 	.word	0x0801e1e5
 8002038:	0801e226 	.word	0x0801e226
 800203c:	0801e267 	.word	0x0801e267
 8002040:	fffe7960 	.word	0xfffe7960
 8002044:	dfffe8c8 	.word	0xdfffe8c8
 8002048:	dfffe8c3 	.word	0xdfffe8c3
 800204c:	dfffe8bf 	.word	0xdfffe8bf
 8002050:	dfffe8bc 	.word	0xdfffe8bc
 8002054:	9fffe8b9 	.word	0x9fffe8b9
 8002058:	dfffe8b2 	.word	0xdfffe8b2

0800205c <des_test>:
{
 800205c:	b510      	push	{r4, lr}
    ret = wc_Des_SetKey(&enc, key, iv, DES_ENCRYPTION);
 800205e:	4c2d      	ldr	r4, [pc, #180]	; (8002114 <des_test+0xb8>)
 8002060:	492d      	ldr	r1, [pc, #180]	; (8002118 <des_test+0xbc>)
{
 8002062:	b0d6      	sub	sp, #344	; 0x158
    ret = wc_Des_SetKey(&enc, key, iv, DES_ENCRYPTION);
 8002064:	2300      	movs	r3, #0
 8002066:	4622      	mov	r2, r4
 8002068:	a80e      	add	r0, sp, #56	; 0x38
 800206a:	f007 f80e 	bl	800908a <wc_Des_SetKey>
    if (ret != 0)
 800206e:	b140      	cbz	r0, 8002082 <des_test+0x26>
        return WC_TEST_RET_ENC_EC(ret);
 8002070:	4240      	negs	r0, r0
 8002072:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002076:	4a29      	ldr	r2, [pc, #164]	; (800211c <des_test+0xc0>)
 8002078:	4829      	ldr	r0, [pc, #164]	; (8002120 <des_test+0xc4>)
        return WC_TEST_RET_ENC_EC(ret);
 800207a:	fb02 0003 	mla	r0, r2, r3, r0
}
 800207e:	b056      	add	sp, #344	; 0x158
 8002080:	bd10      	pop	{r4, pc}
    ret = wc_Des_CbcEncrypt(&enc, cipher, vector, sizeof(vector));
 8002082:	4a28      	ldr	r2, [pc, #160]	; (8002124 <des_test+0xc8>)
 8002084:	2318      	movs	r3, #24
 8002086:	a908      	add	r1, sp, #32
 8002088:	a80e      	add	r0, sp, #56	; 0x38
 800208a:	f006 ff62 	bl	8008f52 <wc_Des_CbcEncrypt>
    if (ret != 0)
 800208e:	b128      	cbz	r0, 800209c <des_test+0x40>
        return WC_TEST_RET_ENC_EC(ret);
 8002090:	4240      	negs	r0, r0
 8002092:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002096:	4a21      	ldr	r2, [pc, #132]	; (800211c <des_test+0xc0>)
 8002098:	4823      	ldr	r0, [pc, #140]	; (8002128 <des_test+0xcc>)
 800209a:	e7ee      	b.n	800207a <des_test+0x1e>
    ret = wc_Des_SetKey(&dec, key, iv, DES_DECRYPTION);
 800209c:	491e      	ldr	r1, [pc, #120]	; (8002118 <des_test+0xbc>)
 800209e:	2301      	movs	r3, #1
 80020a0:	4622      	mov	r2, r4
 80020a2:	a832      	add	r0, sp, #200	; 0xc8
 80020a4:	f006 fff1 	bl	800908a <wc_Des_SetKey>
    if (ret != 0)
 80020a8:	b128      	cbz	r0, 80020b6 <des_test+0x5a>
        return WC_TEST_RET_ENC_EC(ret);
 80020aa:	4240      	negs	r0, r0
 80020ac:	f3c0 030a 	ubfx	r3, r0, #0, #11
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <des_test+0xc0>)
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <des_test+0xd0>)
 80020b4:	e7e1      	b.n	800207a <des_test+0x1e>
    ret = wc_Des_CbcDecrypt(&dec, plain, cipher, sizeof(cipher));
 80020b6:	2318      	movs	r3, #24
 80020b8:	aa08      	add	r2, sp, #32
 80020ba:	a902      	add	r1, sp, #8
 80020bc:	a832      	add	r0, sp, #200	; 0xc8
 80020be:	f006 ff64 	bl	8008f8a <wc_Des_CbcDecrypt>
    if (ret != 0)
 80020c2:	b128      	cbz	r0, 80020d0 <des_test+0x74>
        return WC_TEST_RET_ENC_EC(ret);
 80020c4:	4240      	negs	r0, r0
 80020c6:	f3c0 030a 	ubfx	r3, r0, #0, #11
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <des_test+0xc0>)
 80020cc:	4818      	ldr	r0, [pc, #96]	; (8002130 <des_test+0xd4>)
 80020ce:	e7d4      	b.n	800207a <des_test+0x1e>
    if (XMEMCMP(plain, vector, sizeof(plain)))
 80020d0:	4914      	ldr	r1, [pc, #80]	; (8002124 <des_test+0xc8>)
 80020d2:	2218      	movs	r2, #24
 80020d4:	a802      	add	r0, sp, #8
 80020d6:	f018 ff73 	bl	801afc0 <memcmp>
 80020da:	b9b0      	cbnz	r0, 800210a <des_test+0xae>
    if (XMEMCMP(cipher, verify, sizeof(cipher)))
 80020dc:	4915      	ldr	r1, [pc, #84]	; (8002134 <des_test+0xd8>)
 80020de:	2218      	movs	r2, #24
 80020e0:	a808      	add	r0, sp, #32
 80020e2:	f018 ff6d 	bl	801afc0 <memcmp>
 80020e6:	b990      	cbnz	r0, 800210e <des_test+0xb2>
    ret = wc_Des_CbcEncryptWithKey(cipher, vector, sizeof(vector), key, iv);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <des_test+0xbc>)
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <des_test+0xc8>)
 80020ec:	9400      	str	r4, [sp, #0]
 80020ee:	2218      	movs	r2, #24
 80020f0:	a808      	add	r0, sp, #32
 80020f2:	f018 fb21 	bl	801a738 <wc_Des_CbcEncryptWithKey>
    if (ret != 0)
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d0c1      	beq.n	800207e <des_test+0x22>
        return WC_TEST_RET_ENC_EC(ret);
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <des_test+0xc0>)
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <des_test+0xdc>)
 80020fe:	4240      	negs	r0, r0
 8002100:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002104:	fb02 3000 	mla	r0, r2, r0, r3
 8002108:	e7b9      	b.n	800207e <des_test+0x22>
        return WC_TEST_RET_ENC_NC;
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <des_test+0xe0>)
 800210c:	e7b7      	b.n	800207e <des_test+0x22>
        return WC_TEST_RET_ENC_NC;
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <des_test+0xe4>)
 8002110:	e7b5      	b.n	800207e <des_test+0x22>
 8002112:	bf00      	nop
 8002114:	0801f0ce 	.word	0x0801f0ce
 8002118:	0801f1db 	.word	0x0801f1db
 800211c:	fffe7960 	.word	0xfffe7960
 8002120:	dfffe1d4 	.word	0xdfffe1d4
 8002124:	0801fc60 	.word	0x0801fc60
 8002128:	dfffe1d0 	.word	0xdfffe1d0
 800212c:	dfffe1cc 	.word	0xdfffe1cc
 8002130:	dfffe1c8 	.word	0xdfffe1c8
 8002134:	0801fca8 	.word	0x0801fca8
 8002138:	dfffe1be 	.word	0xdfffe1be
 800213c:	ffffe1c5 	.word	0xffffe1c5
 8002140:	ffffe1c2 	.word	0xffffe1c2

08002144 <des3_test>:
{
 8002144:	b510      	push	{r4, lr}
 8002146:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
    ret = wc_Des3Init(&enc, HEAP_HINT, devId);
 800214a:	2100      	movs	r1, #0
 800214c:	f06f 0201 	mvn.w	r2, #1
 8002150:	a80c      	add	r0, sp, #48	; 0x30
 8002152:	f006 fffa 	bl	800914a <wc_Des3Init>
    if (ret != 0)
 8002156:	4601      	mov	r1, r0
 8002158:	b150      	cbz	r0, 8002170 <des3_test+0x2c>
        return WC_TEST_RET_ENC_EC(ret);
 800215a:	4241      	negs	r1, r0
 800215c:	4c33      	ldr	r4, [pc, #204]	; (800222c <des3_test+0xe8>)
 800215e:	4834      	ldr	r0, [pc, #208]	; (8002230 <des3_test+0xec>)
 8002160:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002164:	fb00 4401 	mla	r4, r0, r1, r4
}
 8002168:	4620      	mov	r0, r4
 800216a:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
 800216e:	bd10      	pop	{r4, pc}
    ret = wc_Des3Init(&dec, HEAP_HINT, devId);
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	a871      	add	r0, sp, #452	; 0x1c4
 8002176:	f006 ffe8 	bl	800914a <wc_Des3Init>
    if (ret != 0)
 800217a:	4603      	mov	r3, r0
 800217c:	b138      	cbz	r0, 800218e <des3_test+0x4a>
        return WC_TEST_RET_ENC_EC(ret);
 800217e:	4243      	negs	r3, r0
 8002180:	4c2c      	ldr	r4, [pc, #176]	; (8002234 <des3_test+0xf0>)
 8002182:	482b      	ldr	r0, [pc, #172]	; (8002230 <des3_test+0xec>)
 8002184:	f3c3 030a 	ubfx	r3, r3, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8002188:	fb03 4400 	mla	r4, r3, r0, r4
 800218c:	e7ec      	b.n	8002168 <des3_test+0x24>
    ret = wc_Des3_SetKey(&enc, key3, iv3, DES_ENCRYPTION);
 800218e:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <des3_test+0xf4>)
 8002190:	492a      	ldr	r1, [pc, #168]	; (800223c <des3_test+0xf8>)
 8002192:	a80c      	add	r0, sp, #48	; 0x30
 8002194:	f006 ff98 	bl	80090c8 <wc_Des3_SetKey>
    if (ret != 0)
 8002198:	b128      	cbz	r0, 80021a6 <des3_test+0x62>
        return WC_TEST_RET_ENC_EC(ret);
 800219a:	4240      	negs	r0, r0
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <des3_test+0xec>)
 800219e:	4c28      	ldr	r4, [pc, #160]	; (8002240 <des3_test+0xfc>)
 80021a0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80021a4:	e7f0      	b.n	8002188 <des3_test+0x44>
    ret = wc_Des3_SetKey(&dec, key3, iv3, DES_DECRYPTION);
 80021a6:	4a24      	ldr	r2, [pc, #144]	; (8002238 <des3_test+0xf4>)
 80021a8:	4924      	ldr	r1, [pc, #144]	; (800223c <des3_test+0xf8>)
 80021aa:	2301      	movs	r3, #1
 80021ac:	a871      	add	r0, sp, #452	; 0x1c4
 80021ae:	f006 ff8b 	bl	80090c8 <wc_Des3_SetKey>
    if (ret != 0)
 80021b2:	b128      	cbz	r0, 80021c0 <des3_test+0x7c>
        return WC_TEST_RET_ENC_EC(ret);
 80021b4:	4240      	negs	r0, r0
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <des3_test+0xec>)
 80021b8:	4c22      	ldr	r4, [pc, #136]	; (8002244 <des3_test+0x100>)
 80021ba:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80021be:	e7e3      	b.n	8002188 <des3_test+0x44>
    ret = wc_Des3_CbcEncrypt(&enc, cipher, vector, sizeof(vector));
 80021c0:	2318      	movs	r3, #24
 80021c2:	4a21      	ldr	r2, [pc, #132]	; (8002248 <des3_test+0x104>)
 80021c4:	eb0d 0103 	add.w	r1, sp, r3
 80021c8:	a80c      	add	r0, sp, #48	; 0x30
 80021ca:	f006 ff03 	bl	8008fd4 <wc_Des3_CbcEncrypt>
    if (ret != 0)
 80021ce:	b128      	cbz	r0, 80021dc <des3_test+0x98>
        return WC_TEST_RET_ENC_EC(ret);
 80021d0:	4240      	negs	r0, r0
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <des3_test+0xec>)
 80021d4:	4c1d      	ldr	r4, [pc, #116]	; (800224c <des3_test+0x108>)
 80021d6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80021da:	e7d5      	b.n	8002188 <des3_test+0x44>
    ret = wc_Des3_CbcDecrypt(&dec, plain, cipher, sizeof(cipher));
 80021dc:	2318      	movs	r3, #24
 80021de:	eb0d 0203 	add.w	r2, sp, r3
 80021e2:	4669      	mov	r1, sp
 80021e4:	a871      	add	r0, sp, #452	; 0x1c4
 80021e6:	f006 ff1b 	bl	8009020 <wc_Des3_CbcDecrypt>
    if (ret != 0)
 80021ea:	b128      	cbz	r0, 80021f8 <des3_test+0xb4>
        return WC_TEST_RET_ENC_EC(ret);
 80021ec:	4240      	negs	r0, r0
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <des3_test+0xec>)
 80021f0:	4c17      	ldr	r4, [pc, #92]	; (8002250 <des3_test+0x10c>)
 80021f2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80021f6:	e7c7      	b.n	8002188 <des3_test+0x44>
    if (XMEMCMP(plain, vector, sizeof(plain)))
 80021f8:	4913      	ldr	r1, [pc, #76]	; (8002248 <des3_test+0x104>)
 80021fa:	2218      	movs	r2, #24
 80021fc:	4668      	mov	r0, sp
 80021fe:	f018 fedf 	bl	801afc0 <memcmp>
 8002202:	b970      	cbnz	r0, 8002222 <des3_test+0xde>
    if (XMEMCMP(cipher, verify3, sizeof(cipher)))
 8002204:	2218      	movs	r2, #24
 8002206:	4913      	ldr	r1, [pc, #76]	; (8002254 <des3_test+0x110>)
 8002208:	eb0d 0002 	add.w	r0, sp, r2
 800220c:	f018 fed8 	bl	801afc0 <memcmp>
 8002210:	4604      	mov	r4, r0
 8002212:	b940      	cbnz	r0, 8002226 <des3_test+0xe2>
    wc_Des3Free(&enc);
 8002214:	a80c      	add	r0, sp, #48	; 0x30
 8002216:	f006 ffa0 	bl	800915a <wc_Des3Free>
    wc_Des3Free(&dec);
 800221a:	a871      	add	r0, sp, #452	; 0x1c4
 800221c:	f006 ff9d 	bl	800915a <wc_Des3Free>
    return 0;
 8002220:	e7a2      	b.n	8002168 <des3_test+0x24>
        return WC_TEST_RET_ENC_NC;
 8002222:	4c0d      	ldr	r4, [pc, #52]	; (8002258 <des3_test+0x114>)
 8002224:	e7a0      	b.n	8002168 <des3_test+0x24>
        return WC_TEST_RET_ENC_NC;
 8002226:	4c0d      	ldr	r4, [pc, #52]	; (800225c <des3_test+0x118>)
 8002228:	e79e      	b.n	8002168 <des3_test+0x24>
 800222a:	bf00      	nop
 800222c:	dfffe16d 	.word	0xdfffe16d
 8002230:	fffe7960 	.word	0xfffe7960
 8002234:	dfffe16a 	.word	0xdfffe16a
 8002238:	0801f147 	.word	0x0801f147
 800223c:	0801f1f3 	.word	0x0801f1f3
 8002240:	dfffe166 	.word	0xdfffe166
 8002244:	dfffe163 	.word	0xdfffe163
 8002248:	0801fc48 	.word	0x0801fc48
 800224c:	dfffe15d 	.word	0xdfffe15d
 8002250:	dfffe157 	.word	0xdfffe157
 8002254:	0801fce0 	.word	0x0801fce0
 8002258:	ffffe154 	.word	0xffffe154
 800225c:	ffffe151 	.word	0xffffe151

08002260 <aes_test>:
{
 8002260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Aes *enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 8002264:	f44f 709c 	mov.w	r0, #312	; 0x138
{
 8002268:	b0bb      	sub	sp, #236	; 0xec
    Aes *enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 800226a:	f018 fe99 	bl	801afa0 <malloc>
 800226e:	4606      	mov	r6, r0
    Aes *dec = (Aes *)XMALLOC(sizeof *dec, HEAP_HINT, DYNAMIC_TYPE_AES);
 8002270:	f44f 709c 	mov.w	r0, #312	; 0x138
 8002274:	f018 fe94 	bl	801afa0 <malloc>
 8002278:	4605      	mov	r5, r0
    if (enc == NULL)
 800227a:	2e00      	cmp	r6, #0
 800227c:	f000 82d4 	beq.w	8002828 <aes_test+0x5c8>
    if (dec == NULL)
 8002280:	2800      	cmp	r0, #0
 8002282:	f000 8321 	beq.w	80028c8 <aes_test+0x668>
    ret = wc_AesInit(enc, HEAP_HINT, devId);
 8002286:	f06f 0201 	mvn.w	r2, #1
 800228a:	2100      	movs	r1, #0
 800228c:	4630      	mov	r0, r6
 800228e:	f006 fbd8 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8002292:	4607      	mov	r7, r0
 8002294:	b140      	cbz	r0, 80022a8 <aes_test+0x48>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002296:	499c      	ldr	r1, [pc, #624]	; (8002508 <aes_test+0x2a8>)
 8002298:	4c9c      	ldr	r4, [pc, #624]	; (800250c <aes_test+0x2ac>)
 800229a:	4240      	negs	r0, r0
 800229c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80022a0:	fb01 4400 	mla	r4, r1, r0, r4
        return WC_TEST_RET_ENC_NC;
 80022a4:	2700      	movs	r7, #0
 80022a6:	e010      	b.n	80022ca <aes_test+0x6a>
    ret = wc_AesInit(dec, HEAP_HINT, devId);
 80022a8:	4601      	mov	r1, r0
 80022aa:	f06f 0201 	mvn.w	r2, #1
 80022ae:	4628      	mov	r0, r5
 80022b0:	f006 fbc7 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 80022b4:	b1c0      	cbz	r0, 80022e8 <aes_test+0x88>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80022b6:	4240      	negs	r0, r0
 80022b8:	4993      	ldr	r1, [pc, #588]	; (8002508 <aes_test+0x2a8>)
 80022ba:	4c95      	ldr	r4, [pc, #596]	; (8002510 <aes_test+0x2b0>)
 80022bc:	f3c0 000a 	ubfx	r0, r0, #0, #11
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80022c0:	fb01 4400 	mla	r4, r1, r0, r4
            wc_AesFree(enc);
 80022c4:	4630      	mov	r0, r6
 80022c6:	f006 fbc4 	bl	8008a52 <wc_AesFree>
        XFREE(enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 80022ca:	4630      	mov	r0, r6
 80022cc:	f018 fe70 	bl	801afb0 <free>
    if (dec) {
 80022d0:	b135      	cbz	r5, 80022e0 <aes_test+0x80>
        if (dec_inited)
 80022d2:	b117      	cbz	r7, 80022da <aes_test+0x7a>
            wc_AesFree(dec);
 80022d4:	4628      	mov	r0, r5
 80022d6:	f006 fbbc 	bl	8008a52 <wc_AesFree>
        XFREE(dec, HEAP_HINT, DYNAMIC_TYPE_AES);
 80022da:	4628      	mov	r0, r5
 80022dc:	f018 fe68 	bl	801afb0 <free>
}
 80022e0:	4620      	mov	r0, r4
 80022e2:	b03b      	add	sp, #236	; 0xec
 80022e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = wc_AesSetKey(enc, key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
 80022e8:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <aes_test+0x2b4>)
 80022ea:	498b      	ldr	r1, [pc, #556]	; (8002518 <aes_test+0x2b8>)
 80022ec:	9700      	str	r7, [sp, #0]
 80022ee:	2210      	movs	r2, #16
 80022f0:	4630      	mov	r0, r6
 80022f2:	f004 fed7 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 80022f6:	b138      	cbz	r0, 8002308 <aes_test+0xa8>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80022f8:	4240      	negs	r0, r0
 80022fa:	4983      	ldr	r1, [pc, #524]	; (8002508 <aes_test+0x2a8>)
 80022fc:	4c87      	ldr	r4, [pc, #540]	; (800251c <aes_test+0x2bc>)
 80022fe:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8002302:	fb01 4400 	mla	r4, r1, r0, r4
 8002306:	e0fd      	b.n	8002504 <aes_test+0x2a4>
    ret = wc_AesSetKey(dec, key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
 8002308:	f04f 0801 	mov.w	r8, #1
 800230c:	4b81      	ldr	r3, [pc, #516]	; (8002514 <aes_test+0x2b4>)
 800230e:	4982      	ldr	r1, [pc, #520]	; (8002518 <aes_test+0x2b8>)
 8002310:	f8cd 8000 	str.w	r8, [sp]
 8002314:	2210      	movs	r2, #16
 8002316:	4628      	mov	r0, r5
 8002318:	f004 fec4 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 800231c:	b128      	cbz	r0, 800232a <aes_test+0xca>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800231e:	4240      	negs	r0, r0
 8002320:	4979      	ldr	r1, [pc, #484]	; (8002508 <aes_test+0x2a8>)
 8002322:	4c7f      	ldr	r4, [pc, #508]	; (8002520 <aes_test+0x2c0>)
 8002324:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002328:	e7eb      	b.n	8002302 <aes_test+0xa2>
    XMEMSET(cipher, 0, AES_BLOCK_SIZE * 4);
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	4639      	mov	r1, r7
 800232e:	a81a      	add	r0, sp, #104	; 0x68
 8002330:	f018 fe7e 	bl	801b030 <memset>
    ret = wc_AesCbcEncrypt(enc, cipher, msg, AES_BLOCK_SIZE);
 8002334:	4a7b      	ldr	r2, [pc, #492]	; (8002524 <aes_test+0x2c4>)
 8002336:	2310      	movs	r3, #16
 8002338:	a91a      	add	r1, sp, #104	; 0x68
 800233a:	4630      	mov	r0, r6
 800233c:	f005 f8e2 	bl	8007504 <wc_AesCbcEncrypt>
    if (ret != 0)
 8002340:	b128      	cbz	r0, 800234e <aes_test+0xee>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002342:	4240      	negs	r0, r0
 8002344:	4970      	ldr	r1, [pc, #448]	; (8002508 <aes_test+0x2a8>)
 8002346:	4c78      	ldr	r4, [pc, #480]	; (8002528 <aes_test+0x2c8>)
 8002348:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800234c:	e7d9      	b.n	8002302 <aes_test+0xa2>
    XMEMSET(plain, 0, AES_BLOCK_SIZE * 4);
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	4639      	mov	r1, r7
 8002352:	a82a      	add	r0, sp, #168	; 0xa8
 8002354:	f018 fe6c 	bl	801b030 <memset>
    ret = wc_AesCbcDecrypt(dec, plain, cipher, AES_BLOCK_SIZE);
 8002358:	2310      	movs	r3, #16
 800235a:	aa1a      	add	r2, sp, #104	; 0x68
 800235c:	a92a      	add	r1, sp, #168	; 0xa8
 800235e:	4628      	mov	r0, r5
 8002360:	f005 f8fa 	bl	8007558 <wc_AesCbcDecrypt>
    if (ret != 0)
 8002364:	b128      	cbz	r0, 8002372 <aes_test+0x112>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002366:	4240      	negs	r0, r0
 8002368:	4967      	ldr	r1, [pc, #412]	; (8002508 <aes_test+0x2a8>)
 800236a:	4c70      	ldr	r4, [pc, #448]	; (800252c <aes_test+0x2cc>)
 800236c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002370:	e7c7      	b.n	8002302 <aes_test+0xa2>
    if (XMEMCMP(plain, msg, AES_BLOCK_SIZE))
 8002372:	496c      	ldr	r1, [pc, #432]	; (8002524 <aes_test+0x2c4>)
 8002374:	2210      	movs	r2, #16
 8002376:	a82a      	add	r0, sp, #168	; 0xa8
 8002378:	f018 fe22 	bl	801afc0 <memcmp>
 800237c:	2800      	cmp	r0, #0
 800237e:	f040 8258 	bne.w	8002832 <aes_test+0x5d2>
    if (XMEMCMP(cipher, verify, AES_BLOCK_SIZE))
 8002382:	496b      	ldr	r1, [pc, #428]	; (8002530 <aes_test+0x2d0>)
 8002384:	2210      	movs	r2, #16
 8002386:	a81a      	add	r0, sp, #104	; 0x68
 8002388:	f018 fe1a 	bl	801afc0 <memcmp>
 800238c:	2800      	cmp	r0, #0
 800238e:	f040 8252 	bne.w	8002836 <aes_test+0x5d6>
        ret = wc_AesSetKey(enc, key2, sizeof(key2), iv2, AES_ENCRYPTION);
 8002392:	2300      	movs	r3, #0
 8002394:	4967      	ldr	r1, [pc, #412]	; (8002534 <aes_test+0x2d4>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2210      	movs	r2, #16
 800239a:	4b67      	ldr	r3, [pc, #412]	; (8002538 <aes_test+0x2d8>)
 800239c:	4630      	mov	r0, r6
 800239e:	f004 fe81 	bl	80070a4 <wc_AesSetKey>
        if (ret != 0)
 80023a2:	4601      	mov	r1, r0
 80023a4:	b128      	cbz	r0, 80023b2 <aes_test+0x152>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80023a6:	4241      	negs	r1, r0
 80023a8:	f3c1 000a 	ubfx	r0, r1, #0, #11
 80023ac:	4c63      	ldr	r4, [pc, #396]	; (800253c <aes_test+0x2dc>)
 80023ae:	4956      	ldr	r1, [pc, #344]	; (8002508 <aes_test+0x2a8>)
 80023b0:	e7a7      	b.n	8002302 <aes_test+0xa2>
        XMEMSET(cipher, 0, AES_BLOCK_SIZE * 2);
 80023b2:	2220      	movs	r2, #32
 80023b4:	a81a      	add	r0, sp, #104	; 0x68
 80023b6:	f018 fe3b 	bl	801b030 <memset>
        ret = wc_AesCbcEncrypt(enc, cipher, msg2, AES_BLOCK_SIZE);
 80023ba:	4a61      	ldr	r2, [pc, #388]	; (8002540 <aes_test+0x2e0>)
 80023bc:	2310      	movs	r3, #16
 80023be:	a91a      	add	r1, sp, #104	; 0x68
 80023c0:	4630      	mov	r0, r6
 80023c2:	f005 f89f 	bl	8007504 <wc_AesCbcEncrypt>
        if (ret != 0)
 80023c6:	b128      	cbz	r0, 80023d4 <aes_test+0x174>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80023c8:	4240      	negs	r0, r0
 80023ca:	494f      	ldr	r1, [pc, #316]	; (8002508 <aes_test+0x2a8>)
 80023cc:	4c5d      	ldr	r4, [pc, #372]	; (8002544 <aes_test+0x2e4>)
 80023ce:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80023d2:	e796      	b.n	8002302 <aes_test+0xa2>
        if (XMEMCMP(cipher, verify2, AES_BLOCK_SIZE))
 80023d4:	495c      	ldr	r1, [pc, #368]	; (8002548 <aes_test+0x2e8>)
 80023d6:	2210      	movs	r2, #16
 80023d8:	a81a      	add	r0, sp, #104	; 0x68
 80023da:	f018 fdf1 	bl	801afc0 <memcmp>
 80023de:	2800      	cmp	r0, #0
 80023e0:	f040 822b 	bne.w	800283a <aes_test+0x5da>
        ret = wc_AesCbcEncrypt(enc, cipher + AES_BLOCK_SIZE,
 80023e4:	4a59      	ldr	r2, [pc, #356]	; (800254c <aes_test+0x2ec>)
 80023e6:	2310      	movs	r3, #16
 80023e8:	a91e      	add	r1, sp, #120	; 0x78
 80023ea:	4630      	mov	r0, r6
 80023ec:	f005 f88a 	bl	8007504 <wc_AesCbcEncrypt>
        if (ret != 0)
 80023f0:	b128      	cbz	r0, 80023fe <aes_test+0x19e>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80023f2:	4240      	negs	r0, r0
 80023f4:	4944      	ldr	r1, [pc, #272]	; (8002508 <aes_test+0x2a8>)
 80023f6:	4c56      	ldr	r4, [pc, #344]	; (8002550 <aes_test+0x2f0>)
 80023f8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80023fc:	e781      	b.n	8002302 <aes_test+0xa2>
        if (XMEMCMP(cipher + AES_BLOCK_SIZE, verify2 + AES_BLOCK_SIZE,
 80023fe:	4955      	ldr	r1, [pc, #340]	; (8002554 <aes_test+0x2f4>)
 8002400:	2210      	movs	r2, #16
 8002402:	a81e      	add	r0, sp, #120	; 0x78
 8002404:	f018 fddc 	bl	801afc0 <memcmp>
 8002408:	2701      	movs	r7, #1
 800240a:	2800      	cmp	r0, #0
 800240c:	f040 8217 	bne.w	800283e <aes_test+0x5de>
        ret = wc_AesSetKey(dec, key2, sizeof(key2), iv2, AES_DECRYPTION);
 8002410:	4948      	ldr	r1, [pc, #288]	; (8002534 <aes_test+0x2d4>)
 8002412:	4b49      	ldr	r3, [pc, #292]	; (8002538 <aes_test+0x2d8>)
 8002414:	9700      	str	r7, [sp, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	4628      	mov	r0, r5
 800241a:	f004 fe43 	bl	80070a4 <wc_AesSetKey>
        if (ret != 0)
 800241e:	4601      	mov	r1, r0
 8002420:	b128      	cbz	r0, 800242e <aes_test+0x1ce>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002422:	4241      	negs	r1, r0
 8002424:	f3c1 000a 	ubfx	r0, r1, #0, #11
 8002428:	4c4b      	ldr	r4, [pc, #300]	; (8002558 <aes_test+0x2f8>)
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <aes_test+0x2a8>)
 800242c:	e748      	b.n	80022c0 <aes_test+0x60>
        XMEMSET(plain, 0, AES_BLOCK_SIZE * 2);
 800242e:	2220      	movs	r2, #32
 8002430:	a82a      	add	r0, sp, #168	; 0xa8
 8002432:	f018 fdfd 	bl	801b030 <memset>
        ret = wc_AesCbcDecrypt(dec, plain, verify2, AES_BLOCK_SIZE);
 8002436:	4a44      	ldr	r2, [pc, #272]	; (8002548 <aes_test+0x2e8>)
 8002438:	2310      	movs	r3, #16
 800243a:	a92a      	add	r1, sp, #168	; 0xa8
 800243c:	4628      	mov	r0, r5
 800243e:	f005 f88b 	bl	8007558 <wc_AesCbcDecrypt>
        if (ret != 0)
 8002442:	b128      	cbz	r0, 8002450 <aes_test+0x1f0>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002444:	4240      	negs	r0, r0
 8002446:	4930      	ldr	r1, [pc, #192]	; (8002508 <aes_test+0x2a8>)
 8002448:	4c44      	ldr	r4, [pc, #272]	; (800255c <aes_test+0x2fc>)
 800244a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800244e:	e737      	b.n	80022c0 <aes_test+0x60>
        if (XMEMCMP(plain, msg2, AES_BLOCK_SIZE))
 8002450:	493b      	ldr	r1, [pc, #236]	; (8002540 <aes_test+0x2e0>)
 8002452:	2210      	movs	r2, #16
 8002454:	a82a      	add	r0, sp, #168	; 0xa8
 8002456:	f018 fdb3 	bl	801afc0 <memcmp>
 800245a:	2800      	cmp	r0, #0
 800245c:	f040 81f1 	bne.w	8002842 <aes_test+0x5e2>
        ret = wc_AesCbcDecrypt(dec, plain + AES_BLOCK_SIZE,
 8002460:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <aes_test+0x2f4>)
 8002462:	2310      	movs	r3, #16
 8002464:	a92e      	add	r1, sp, #184	; 0xb8
 8002466:	4628      	mov	r0, r5
 8002468:	f005 f876 	bl	8007558 <wc_AesCbcDecrypt>
        if (ret != 0)
 800246c:	b128      	cbz	r0, 800247a <aes_test+0x21a>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800246e:	4240      	negs	r0, r0
 8002470:	4925      	ldr	r1, [pc, #148]	; (8002508 <aes_test+0x2a8>)
 8002472:	4c3b      	ldr	r4, [pc, #236]	; (8002560 <aes_test+0x300>)
 8002474:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002478:	e722      	b.n	80022c0 <aes_test+0x60>
        if (XMEMCMP(plain + AES_BLOCK_SIZE, msg2 + AES_BLOCK_SIZE,
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <aes_test+0x2ec>)
 800247c:	2210      	movs	r2, #16
 800247e:	a82e      	add	r0, sp, #184	; 0xb8
 8002480:	f018 fd9e 	bl	801afc0 <memcmp>
 8002484:	2800      	cmp	r0, #0
 8002486:	f040 81de 	bne.w	8002846 <aes_test+0x5e6>
    byte   key16[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <aes_test+0x304>)
 800248c:	aa03      	add	r2, sp, #12
 800248e:	f103 0710 	add.w	r7, r3, #16
 8002492:	4690      	mov	r8, r2
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	4614      	mov	r4, r2
 800249a:	c403      	stmia	r4!, {r0, r1}
 800249c:	3308      	adds	r3, #8
 800249e:	42bb      	cmp	r3, r7
 80024a0:	4622      	mov	r2, r4
 80024a2:	d1f7      	bne.n	8002494 <aes_test+0x234>
    byte   key24[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
 80024a4:	4b30      	ldr	r3, [pc, #192]	; (8002568 <aes_test+0x308>)
 80024a6:	aa0c      	add	r2, sp, #48	; 0x30
 80024a8:	f103 0718 	add.w	r7, r3, #24
 80024ac:	4691      	mov	r9, r2
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	4614      	mov	r4, r2
 80024b4:	c403      	stmia	r4!, {r0, r1}
 80024b6:	3308      	adds	r3, #8
 80024b8:	42bb      	cmp	r3, r7
 80024ba:	4622      	mov	r2, r4
 80024bc:	d1f7      	bne.n	80024ae <aes_test+0x24e>
    byte   key32[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <aes_test+0x30c>)
 80024c0:	aa12      	add	r2, sp, #72	; 0x48
 80024c2:	f103 0720 	add.w	r7, r3, #32
 80024c6:	4692      	mov	sl, r2
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	4614      	mov	r4, r2
 80024ce:	c403      	stmia	r4!, {r0, r1}
 80024d0:	3308      	adds	r3, #8
 80024d2:	42bb      	cmp	r3, r7
 80024d4:	4622      	mov	r2, r4
 80024d6:	d1f7      	bne.n	80024c8 <aes_test+0x268>
    byte   iv[]    = "1234567890abcdef";
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <aes_test+0x310>)
 80024da:	aa07      	add	r2, sp, #28
 80024dc:	f103 0710 	add.w	r7, r3, #16
 80024e0:	4693      	mov	fp, r2
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	4614      	mov	r4, r2
 80024e8:	c403      	stmia	r4!, {r0, r1}
 80024ea:	3308      	adds	r3, #8
 80024ec:	42bb      	cmp	r3, r7
 80024ee:	4622      	mov	r2, r4
 80024f0:	d1f7      	bne.n	80024e2 <aes_test+0x282>
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	7023      	strb	r3, [r4, #0]
    if ((aes = (Aes *)XMALLOC(sizeof *aes, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 80024f6:	f44f 709c 	mov.w	r0, #312	; 0x138
 80024fa:	f018 fd51 	bl	801afa0 <malloc>
 80024fe:	4607      	mov	r7, r0
 8002500:	bbd0      	cbnz	r0, 8002578 <aes_test+0x318>
        return WC_TEST_RET_ENC_ERRNO;
 8002502:	4c1c      	ldr	r4, [pc, #112]	; (8002574 <aes_test+0x314>)
    dec_inited = 1;
 8002504:	2701      	movs	r7, #1
 8002506:	e6dd      	b.n	80022c4 <aes_test+0x64>
 8002508:	fffe7960 	.word	0xfffe7960
 800250c:	dfffd4d1 	.word	0xdfffd4d1
 8002510:	dfffd4cc 	.word	0xdfffd4cc
 8002514:	0801f0ba 	.word	0x0801f0ba
 8002518:	0801f1c7 	.word	0x0801f1c7
 800251c:	dfffd4c6 	.word	0xdfffd4c6
 8002520:	dfffd4c2 	.word	0xdfffd4c2
 8002524:	0801f243 	.word	0x0801f243
 8002528:	dfffd4b9 	.word	0xdfffd4b9
 800252c:	dfffd4b1 	.word	0xdfffd4b1
 8002530:	0801fc98 	.word	0x0801fc98
 8002534:	0801f1e3 	.word	0x0801f1e3
 8002538:	0801f136 	.word	0x0801f136
 800253c:	dfffd405 	.word	0xdfffd405
 8002540:	0801f25d 	.word	0x0801f25d
 8002544:	dfffd3fe 	.word	0xdfffd3fe
 8002548:	0801fcc0 	.word	0x0801fcc0
 800254c:	0801f26d 	.word	0x0801f26d
 8002550:	dfffd3f3 	.word	0xdfffd3f3
 8002554:	0801fcd0 	.word	0x0801fcd0
 8002558:	dfffd3eb 	.word	0xdfffd3eb
 800255c:	dfffd3e4 	.word	0xdfffd3e4
 8002560:	dfffd3da 	.word	0xdfffd3da
 8002564:	0801e2d1 	.word	0x0801e2d1
 8002568:	0801e2a8 	.word	0x0801e2a8
 800256c:	0801e2c1 	.word	0x0801e2c1
 8002570:	0801e2e2 	.word	0x0801e2e2
 8002574:	ffffdc0b 	.word	0xffffdc0b
    ret = wc_AesInit(NULL, HEAP_HINT, devId);
 8002578:	2100      	movs	r1, #0
 800257a:	f06f 0201 	mvn.w	r2, #1
 800257e:	4608      	mov	r0, r1
 8002580:	f006 fa5f 	bl	8008a42 <wc_AesInit>
    if (ret != BAD_FUNC_ARG)
 8002584:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8002588:	d048      	beq.n	800261c <aes_test+0x3bc>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800258a:	4240      	negs	r0, r0
 800258c:	49af      	ldr	r1, [pc, #700]	; (800284c <aes_test+0x5ec>)
 800258e:	4cb0      	ldr	r4, [pc, #704]	; (8002850 <aes_test+0x5f0>)
 8002590:	f3c0 000a 	ubfx	r0, r0, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002594:	fb01 4400 	mla	r4, r1, r0, r4
    wc_AesFree(aes);
 8002598:	4638      	mov	r0, r7
 800259a:	f006 fa5a 	bl	8008a52 <wc_AesFree>
    XFREE(aes, HEAP_HINT, DYNAMIC_TYPE_AES);
 800259e:	4638      	mov	r0, r7
 80025a0:	f018 fd06 	bl	801afb0 <free>
    if (ret != 0)
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d1ad      	bne.n	8002504 <aes_test+0x2a4>
    byte key[] = "0123456789abcdef   ";  /* align */
 80025a8:	4baa      	ldr	r3, [pc, #680]	; (8002854 <aes_test+0x5f4>)
 80025aa:	464a      	mov	r2, r9
 80025ac:	f103 0710 	add.w	r7, r3, #16
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	4614      	mov	r4, r2
 80025b6:	c403      	stmia	r4!, {r0, r1}
 80025b8:	3308      	adds	r3, #8
 80025ba:	42bb      	cmp	r3, r7
 80025bc:	4622      	mov	r2, r4
 80025be:	d1f7      	bne.n	80025b0 <aes_test+0x350>
 80025c0:	6818      	ldr	r0, [r3, #0]
    byte iv[]  = "1234567890abcdef   ";  /* align */
 80025c2:	4ba5      	ldr	r3, [pc, #660]	; (8002858 <aes_test+0x5f8>)
    byte key[] = "0123456789abcdef   ";  /* align */
 80025c4:	6020      	str	r0, [r4, #0]
    byte iv[]  = "1234567890abcdef   ";  /* align */
 80025c6:	4652      	mov	r2, sl
 80025c8:	f103 0710 	add.w	r7, r3, #16
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	4614      	mov	r4, r2
 80025d2:	c403      	stmia	r4!, {r0, r1}
 80025d4:	3308      	adds	r3, #8
 80025d6:	42bb      	cmp	r3, r7
 80025d8:	4622      	mov	r2, r4
 80025da:	d1f7      	bne.n	80025cc <aes_test+0x36c>
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	6020      	str	r0, [r4, #0]
    XMEMSET(cipher, 0, AES_BLOCK_SIZE);
 80025e0:	2210      	movs	r2, #16
 80025e2:	2100      	movs	r1, #0
 80025e4:	4640      	mov	r0, r8
 80025e6:	f018 fd23 	bl	801b030 <memset>
    ret = wc_AesCbcEncryptWithKey(cipher, msg, AES_BLOCK_SIZE, key, 17, NULL);
 80025ea:	2711      	movs	r7, #17
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
 80025ec:	2210      	movs	r2, #16
 80025ee:	2100      	movs	r1, #0
 80025f0:	a807      	add	r0, sp, #28
    ret = wc_AesCbcEncryptWithKey(cipher, msg, AES_BLOCK_SIZE, key, 17, NULL);
 80025f2:	2400      	movs	r4, #0
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
 80025f4:	f018 fd1c 	bl	801b030 <memset>
    ret = wc_AesCbcEncryptWithKey(cipher, msg, AES_BLOCK_SIZE, key, 17, NULL);
 80025f8:	e9cd 7400 	strd	r7, r4, [sp]
 80025fc:	4997      	ldr	r1, [pc, #604]	; (800285c <aes_test+0x5fc>)
 80025fe:	464b      	mov	r3, r9
 8002600:	2210      	movs	r2, #16
 8002602:	4640      	mov	r0, r8
 8002604:	f018 f868 	bl	801a6d8 <wc_AesCbcEncryptWithKey>
    if (ret != BAD_FUNC_ARG)
 8002608:	f110 0fad 	cmn.w	r0, #173	; 0xad
 800260c:	f000 80d1 	beq.w	80027b2 <aes_test+0x552>
        return WC_TEST_RET_ENC_EC(ret);
 8002610:	4240      	negs	r0, r0
 8002612:	498e      	ldr	r1, [pc, #568]	; (800284c <aes_test+0x5ec>)
 8002614:	4c92      	ldr	r4, [pc, #584]	; (8002860 <aes_test+0x600>)
 8002616:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800261a:	e672      	b.n	8002302 <aes_test+0xa2>
    ret = wc_AesInit(aes, HEAP_HINT, devId);
 800261c:	f06f 0201 	mvn.w	r2, #1
 8002620:	2100      	movs	r1, #0
 8002622:	4638      	mov	r0, r7
 8002624:	f006 fa0d 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8002628:	4604      	mov	r4, r0
 800262a:	b128      	cbz	r0, 8002638 <aes_test+0x3d8>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800262c:	4244      	negs	r4, r0
 800262e:	f3c4 000a 	ubfx	r0, r4, #0, #11
 8002632:	4986      	ldr	r1, [pc, #536]	; (800284c <aes_test+0x5ec>)
 8002634:	4c8b      	ldr	r4, [pc, #556]	; (8002864 <aes_test+0x604>)
 8002636:	e7ad      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesGetKeySize(NULL, NULL);
 8002638:	4601      	mov	r1, r0
 800263a:	f006 fa0b 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != BAD_FUNC_ARG)
 800263e:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8002642:	d005      	beq.n	8002650 <aes_test+0x3f0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002644:	4240      	negs	r0, r0
 8002646:	4981      	ldr	r1, [pc, #516]	; (800284c <aes_test+0x5ec>)
 8002648:	4c87      	ldr	r4, [pc, #540]	; (8002868 <aes_test+0x608>)
 800264a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800264e:	e7a1      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesGetKeySize(aes, NULL);
 8002650:	4621      	mov	r1, r4
 8002652:	4638      	mov	r0, r7
 8002654:	f006 f9fe 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != BAD_FUNC_ARG)
 8002658:	f110 0fad 	cmn.w	r0, #173	; 0xad
 800265c:	d005      	beq.n	800266a <aes_test+0x40a>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800265e:	4240      	negs	r0, r0
 8002660:	497a      	ldr	r1, [pc, #488]	; (800284c <aes_test+0x5ec>)
 8002662:	4c82      	ldr	r4, [pc, #520]	; (800286c <aes_test+0x60c>)
 8002664:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002668:	e794      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesGetKeySize(NULL, &keySize);
 800266a:	a902      	add	r1, sp, #8
 800266c:	4620      	mov	r0, r4
 800266e:	f006 f9f1 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != BAD_FUNC_ARG)
 8002672:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8002676:	d005      	beq.n	8002684 <aes_test+0x424>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002678:	4240      	negs	r0, r0
 800267a:	4974      	ldr	r1, [pc, #464]	; (800284c <aes_test+0x5ec>)
 800267c:	4c7c      	ldr	r4, [pc, #496]	; (8002870 <aes_test+0x610>)
 800267e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002682:	e787      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesSetKey(NULL, key16, sizeof(key16), iv, AES_ENCRYPTION);
 8002684:	9400      	str	r4, [sp, #0]
 8002686:	465b      	mov	r3, fp
 8002688:	2210      	movs	r2, #16
 800268a:	4641      	mov	r1, r8
 800268c:	4620      	mov	r0, r4
 800268e:	f004 fd09 	bl	80070a4 <wc_AesSetKey>
    if (ret != BAD_FUNC_ARG)
 8002692:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8002696:	d005      	beq.n	80026a4 <aes_test+0x444>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002698:	4240      	negs	r0, r0
 800269a:	496c      	ldr	r1, [pc, #432]	; (800284c <aes_test+0x5ec>)
 800269c:	4c75      	ldr	r4, [pc, #468]	; (8002874 <aes_test+0x614>)
 800269e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80026a2:	e777      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesSetKey(aes, key16, sizeof(key16), NULL, AES_ENCRYPTION);
 80026a4:	9400      	str	r4, [sp, #0]
 80026a6:	4623      	mov	r3, r4
 80026a8:	2210      	movs	r2, #16
 80026aa:	4641      	mov	r1, r8
 80026ac:	4638      	mov	r0, r7
 80026ae:	f004 fcf9 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 80026b2:	b128      	cbz	r0, 80026c0 <aes_test+0x460>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80026b4:	4240      	negs	r0, r0
 80026b6:	4965      	ldr	r1, [pc, #404]	; (800284c <aes_test+0x5ec>)
 80026b8:	4c6f      	ldr	r4, [pc, #444]	; (8002878 <aes_test+0x618>)
 80026ba:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80026be:	e769      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesSetKey(aes, key32, sizeof(key32) - 1, iv, AES_ENCRYPTION);
 80026c0:	9000      	str	r0, [sp, #0]
 80026c2:	465b      	mov	r3, fp
 80026c4:	221f      	movs	r2, #31
 80026c6:	4651      	mov	r1, sl
 80026c8:	4638      	mov	r0, r7
 80026ca:	f004 fceb 	bl	80070a4 <wc_AesSetKey>
    if (ret != BAD_FUNC_ARG)
 80026ce:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80026d2:	d005      	beq.n	80026e0 <aes_test+0x480>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80026d4:	4240      	negs	r0, r0
 80026d6:	495d      	ldr	r1, [pc, #372]	; (800284c <aes_test+0x5ec>)
 80026d8:	4c68      	ldr	r4, [pc, #416]	; (800287c <aes_test+0x61c>)
 80026da:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80026de:	e759      	b.n	8002594 <aes_test+0x334>
    aes->rounds = 16;
 80026e0:	2410      	movs	r4, #16
 80026e2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
    ret = wc_AesGetKeySize(aes, &keySize);
 80026e6:	a902      	add	r1, sp, #8
 80026e8:	4638      	mov	r0, r7
 80026ea:	f006 f9b3 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != BAD_FUNC_ARG)
 80026ee:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80026f2:	d005      	beq.n	8002700 <aes_test+0x4a0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80026f4:	4240      	negs	r0, r0
 80026f6:	4955      	ldr	r1, [pc, #340]	; (800284c <aes_test+0x5ec>)
 80026f8:	4c61      	ldr	r4, [pc, #388]	; (8002880 <aes_test+0x620>)
 80026fa:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80026fe:	e749      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesSetKey(aes, key16, sizeof(key16), iv, AES_ENCRYPTION);
 8002700:	2300      	movs	r3, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4622      	mov	r2, r4
 8002706:	465b      	mov	r3, fp
 8002708:	4641      	mov	r1, r8
 800270a:	4638      	mov	r0, r7
 800270c:	f004 fcca 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 8002710:	b128      	cbz	r0, 800271e <aes_test+0x4be>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002712:	4240      	negs	r0, r0
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <aes_test+0x5ec>)
 8002716:	4c5b      	ldr	r4, [pc, #364]	; (8002884 <aes_test+0x624>)
 8002718:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800271c:	e73a      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesGetKeySize(aes, &keySize);
 800271e:	a902      	add	r1, sp, #8
 8002720:	4638      	mov	r0, r7
 8002722:	f006 f997 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != 0 || keySize != sizeof(key16))
 8002726:	b910      	cbnz	r0, 800272e <aes_test+0x4ce>
 8002728:	9b02      	ldr	r3, [sp, #8]
 800272a:	2b10      	cmp	r3, #16
 800272c:	d005      	beq.n	800273a <aes_test+0x4da>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800272e:	4240      	negs	r0, r0
 8002730:	4946      	ldr	r1, [pc, #280]	; (800284c <aes_test+0x5ec>)
 8002732:	4c55      	ldr	r4, [pc, #340]	; (8002888 <aes_test+0x628>)
 8002734:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002738:	e72c      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesSetKey(aes, key24, sizeof(key24), iv, AES_ENCRYPTION);
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	465b      	mov	r3, fp
 800273e:	2218      	movs	r2, #24
 8002740:	4649      	mov	r1, r9
 8002742:	4638      	mov	r0, r7
 8002744:	f004 fcae 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 8002748:	b128      	cbz	r0, 8002756 <aes_test+0x4f6>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800274a:	4240      	negs	r0, r0
 800274c:	493f      	ldr	r1, [pc, #252]	; (800284c <aes_test+0x5ec>)
 800274e:	4c4f      	ldr	r4, [pc, #316]	; (800288c <aes_test+0x62c>)
 8002750:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002754:	e71e      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesGetKeySize(aes, &keySize);
 8002756:	a902      	add	r1, sp, #8
 8002758:	4638      	mov	r0, r7
 800275a:	f006 f97b 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != 0 || keySize != sizeof(key24))
 800275e:	b910      	cbnz	r0, 8002766 <aes_test+0x506>
 8002760:	9b02      	ldr	r3, [sp, #8]
 8002762:	2b18      	cmp	r3, #24
 8002764:	d005      	beq.n	8002772 <aes_test+0x512>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002766:	4240      	negs	r0, r0
 8002768:	4938      	ldr	r1, [pc, #224]	; (800284c <aes_test+0x5ec>)
 800276a:	4c49      	ldr	r4, [pc, #292]	; (8002890 <aes_test+0x630>)
 800276c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002770:	e710      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesSetKey(aes, key32, sizeof(key32), iv, AES_ENCRYPTION);
 8002772:	9000      	str	r0, [sp, #0]
 8002774:	465b      	mov	r3, fp
 8002776:	2220      	movs	r2, #32
 8002778:	4651      	mov	r1, sl
 800277a:	4638      	mov	r0, r7
 800277c:	f004 fc92 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 8002780:	b128      	cbz	r0, 800278e <aes_test+0x52e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002782:	4240      	negs	r0, r0
 8002784:	4931      	ldr	r1, [pc, #196]	; (800284c <aes_test+0x5ec>)
 8002786:	4c43      	ldr	r4, [pc, #268]	; (8002894 <aes_test+0x634>)
 8002788:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800278c:	e702      	b.n	8002594 <aes_test+0x334>
    ret = wc_AesGetKeySize(aes, &keySize);
 800278e:	a902      	add	r1, sp, #8
 8002790:	4638      	mov	r0, r7
 8002792:	f006 f95f 	bl	8008a54 <wc_AesGetKeySize>
    if (ret != 0 || keySize != sizeof(key32))
 8002796:	4604      	mov	r4, r0
 8002798:	b918      	cbnz	r0, 80027a2 <aes_test+0x542>
 800279a:	9b02      	ldr	r3, [sp, #8]
 800279c:	2b20      	cmp	r3, #32
 800279e:	f43f aefb 	beq.w	8002598 <aes_test+0x338>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80027a2:	492a      	ldr	r1, [pc, #168]	; (800284c <aes_test+0x5ec>)
 80027a4:	483c      	ldr	r0, [pc, #240]	; (8002898 <aes_test+0x638>)
 80027a6:	4264      	negs	r4, r4
 80027a8:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80027ac:	fb01 0404 	mla	r4, r1, r4, r0
 80027b0:	e6f2      	b.n	8002598 <aes_test+0x338>
    ret = wc_AesCbcDecryptWithKey(plain, cipher, AES_BLOCK_SIZE, key, 17, NULL);
 80027b2:	e9cd 7400 	strd	r7, r4, [sp]
 80027b6:	464b      	mov	r3, r9
 80027b8:	2210      	movs	r2, #16
 80027ba:	4641      	mov	r1, r8
 80027bc:	a807      	add	r0, sp, #28
 80027be:	f017 ff4f 	bl	801a660 <wc_AesCbcDecryptWithKey>
    if (ret != BAD_FUNC_ARG)
 80027c2:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80027c6:	d005      	beq.n	80027d4 <aes_test+0x574>
        return WC_TEST_RET_ENC_EC(ret);
 80027c8:	4240      	negs	r0, r0
 80027ca:	4920      	ldr	r1, [pc, #128]	; (800284c <aes_test+0x5ec>)
 80027cc:	4c33      	ldr	r4, [pc, #204]	; (800289c <aes_test+0x63c>)
 80027ce:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80027d2:	e596      	b.n	8002302 <aes_test+0xa2>
    ret = wc_AesCbcEncryptWithKey(cipher, msg, AES_BLOCK_SIZE, key,
 80027d4:	2710      	movs	r7, #16
 80027d6:	4921      	ldr	r1, [pc, #132]	; (800285c <aes_test+0x5fc>)
 80027d8:	f8cd a004 	str.w	sl, [sp, #4]
 80027dc:	9700      	str	r7, [sp, #0]
 80027de:	464b      	mov	r3, r9
 80027e0:	463a      	mov	r2, r7
 80027e2:	4640      	mov	r0, r8
 80027e4:	f017 ff78 	bl	801a6d8 <wc_AesCbcEncryptWithKey>
    if (ret != 0)
 80027e8:	b128      	cbz	r0, 80027f6 <aes_test+0x596>
        return WC_TEST_RET_ENC_EC(ret);
 80027ea:	4240      	negs	r0, r0
 80027ec:	4917      	ldr	r1, [pc, #92]	; (800284c <aes_test+0x5ec>)
 80027ee:	4c2c      	ldr	r4, [pc, #176]	; (80028a0 <aes_test+0x640>)
 80027f0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80027f4:	e585      	b.n	8002302 <aes_test+0xa2>
    ret = wc_AesCbcDecryptWithKey(plain, cipher, AES_BLOCK_SIZE, key,
 80027f6:	e9cd 7a00 	strd	r7, sl, [sp]
 80027fa:	464b      	mov	r3, r9
 80027fc:	463a      	mov	r2, r7
 80027fe:	4641      	mov	r1, r8
 8002800:	a807      	add	r0, sp, #28
 8002802:	f017 ff2d 	bl	801a660 <wc_AesCbcDecryptWithKey>
    if (ret != 0)
 8002806:	b128      	cbz	r0, 8002814 <aes_test+0x5b4>
        return WC_TEST_RET_ENC_EC(ret);
 8002808:	4240      	negs	r0, r0
 800280a:	4910      	ldr	r1, [pc, #64]	; (800284c <aes_test+0x5ec>)
 800280c:	4c25      	ldr	r4, [pc, #148]	; (80028a4 <aes_test+0x644>)
 800280e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002812:	e576      	b.n	8002302 <aes_test+0xa2>
    if (XMEMCMP(plain, msg, AES_BLOCK_SIZE) != 0)
 8002814:	4911      	ldr	r1, [pc, #68]	; (800285c <aes_test+0x5fc>)
 8002816:	463a      	mov	r2, r7
 8002818:	a807      	add	r0, sp, #28
 800281a:	f018 fbd1 	bl	801afc0 <memcmp>
        return WC_TEST_RET_ENC_NC;
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <aes_test+0x648>)
 8002820:	1e04      	subs	r4, r0, #0
 8002822:	bf18      	it	ne
 8002824:	461c      	movne	r4, r3
    if (ret != 0)
 8002826:	e66d      	b.n	8002504 <aes_test+0x2a4>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 8002828:	4c20      	ldr	r4, [pc, #128]	; (80028ac <aes_test+0x64c>)
    if (dec) {
 800282a:	2800      	cmp	r0, #0
 800282c:	f47f ad55 	bne.w	80022da <aes_test+0x7a>
 8002830:	e556      	b.n	80022e0 <aes_test+0x80>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8002832:	4c1f      	ldr	r4, [pc, #124]	; (80028b0 <aes_test+0x650>)
 8002834:	e666      	b.n	8002504 <aes_test+0x2a4>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8002836:	4c1f      	ldr	r4, [pc, #124]	; (80028b4 <aes_test+0x654>)
 8002838:	e664      	b.n	8002504 <aes_test+0x2a4>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800283a:	4c1f      	ldr	r4, [pc, #124]	; (80028b8 <aes_test+0x658>)
 800283c:	e662      	b.n	8002504 <aes_test+0x2a4>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800283e:	4c1f      	ldr	r4, [pc, #124]	; (80028bc <aes_test+0x65c>)
 8002840:	e540      	b.n	80022c4 <aes_test+0x64>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8002842:	4c1f      	ldr	r4, [pc, #124]	; (80028c0 <aes_test+0x660>)
 8002844:	e53e      	b.n	80022c4 <aes_test+0x64>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8002846:	4c1f      	ldr	r4, [pc, #124]	; (80028c4 <aes_test+0x664>)
 8002848:	e65c      	b.n	8002504 <aes_test+0x2a4>
 800284a:	bf00      	nop
 800284c:	fffe7960 	.word	0xfffe7960
 8002850:	dfffdc02 	.word	0xdfffdc02
 8002854:	0801e2f3 	.word	0x0801e2f3
 8002858:	0801e307 	.word	0x0801e307
 800285c:	0801f22b 	.word	0x0801f22b
 8002860:	dfffd7e9 	.word	0xdfffd7e9
 8002864:	dfffdbfc 	.word	0xdfffdbfc
 8002868:	dfffdbf6 	.word	0xdfffdbf6
 800286c:	dfffdbf3 	.word	0xdfffdbf3
 8002870:	dfffdbf0 	.word	0xdfffdbf0
 8002874:	dfffdbec 	.word	0xdfffdbec
 8002878:	dfffdbe3 	.word	0xdfffdbe3
 800287c:	dfffdbe0 	.word	0xdfffdbe0
 8002880:	dfffdbd7 	.word	0xdfffdbd7
 8002884:	dfffdbcd 	.word	0xdfffdbcd
 8002888:	dfffdbc9 	.word	0xdfffdbc9
 800288c:	dfffdbbf 	.word	0xdfffdbbf
 8002890:	dfffdbbb 	.word	0xdfffdbbb
 8002894:	dfffdbb2 	.word	0xdfffdbb2
 8002898:	dfffdbae 	.word	0xdfffdbae
 800289c:	dfffd7e5 	.word	0xdfffd7e5
 80028a0:	dfffd7df 	.word	0xdfffd7df
 80028a4:	dfffd7da 	.word	0xdfffd7da
 80028a8:	ffffd7d8 	.word	0xffffd7d8
 80028ac:	ffffd4db 	.word	0xffffd4db
 80028b0:	ffffd4ae 	.word	0xffffd4ae
 80028b4:	ffffd4a9 	.word	0xffffd4a9
 80028b8:	ffffd3fb 	.word	0xffffd3fb
 80028bc:	ffffd3f0 	.word	0xffffd3f0
 80028c0:	ffffd3e2 	.word	0xffffd3e2
 80028c4:	ffffd3d7 	.word	0xffffd3d7
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80028c8:	4c00      	ldr	r4, [pc, #0]	; (80028cc <aes_test+0x66c>)
 80028ca:	e4eb      	b.n	80022a4 <aes_test+0x44>
 80028cc:	ffffd4d7 	.word	0xffffd4d7

080028d0 <aes192_test>:
{
 80028d0:	b570      	push	{r4, r5, r6, lr}
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 80028d2:	f44f 709c 	mov.w	r0, #312	; 0x138
{
 80028d6:	b08a      	sub	sp, #40	; 0x28
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 80028d8:	f018 fb62 	bl	801afa0 <malloc>
 80028dc:	4606      	mov	r6, r0
 80028de:	2800      	cmp	r0, #0
 80028e0:	f000 8081 	beq.w	80029e6 <aes192_test+0x116>
    if ((dec = (Aes *)XMALLOC(sizeof *dec, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 80028e4:	f44f 709c 	mov.w	r0, #312	; 0x138
 80028e8:	f018 fb5a 	bl	801afa0 <malloc>
 80028ec:	4605      	mov	r5, r0
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d07b      	beq.n	80029ea <aes192_test+0x11a>
    ret = wc_AesInit(enc, HEAP_HINT, devId);
 80028f2:	2100      	movs	r1, #0
 80028f4:	f06f 0201 	mvn.w	r2, #1
 80028f8:	4630      	mov	r0, r6
 80028fa:	f006 f8a2 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 80028fe:	4601      	mov	r1, r0
 8002900:	b180      	cbz	r0, 8002924 <aes192_test+0x54>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002902:	4241      	negs	r1, r0
 8002904:	4c3c      	ldr	r4, [pc, #240]	; (80029f8 <aes192_test+0x128>)
 8002906:	483d      	ldr	r0, [pc, #244]	; (80029fc <aes192_test+0x12c>)
 8002908:	f3c1 010a 	ubfx	r1, r1, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800290c:	fb01 4400 	mla	r4, r1, r0, r4
        XFREE(enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 8002910:	4630      	mov	r0, r6
 8002912:	f018 fb4d 	bl	801afb0 <free>
    if (dec)
 8002916:	b115      	cbz	r5, 800291e <aes192_test+0x4e>
        XFREE(dec, HEAP_HINT, DYNAMIC_TYPE_AES);
 8002918:	4628      	mov	r0, r5
 800291a:	f018 fb49 	bl	801afb0 <free>
}
 800291e:	4620      	mov	r0, r4
 8002920:	b00a      	add	sp, #40	; 0x28
 8002922:	bd70      	pop	{r4, r5, r6, pc}
    ret = wc_AesInit(dec, HEAP_HINT, devId);
 8002924:	f06f 0201 	mvn.w	r2, #1
 8002928:	4628      	mov	r0, r5
 800292a:	f006 f88a 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 800292e:	b128      	cbz	r0, 800293c <aes192_test+0x6c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002930:	4240      	negs	r0, r0
 8002932:	4932      	ldr	r1, [pc, #200]	; (80029fc <aes192_test+0x12c>)
 8002934:	4c32      	ldr	r4, [pc, #200]	; (8002a00 <aes192_test+0x130>)
 8002936:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800293a:	e7e7      	b.n	800290c <aes192_test+0x3c>
    ret = wc_AesSetKey(enc, key, (int) sizeof(key), iv, AES_ENCRYPTION);
 800293c:	9000      	str	r0, [sp, #0]
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <aes192_test+0x134>)
 8002940:	4931      	ldr	r1, [pc, #196]	; (8002a08 <aes192_test+0x138>)
 8002942:	2218      	movs	r2, #24
 8002944:	4630      	mov	r0, r6
 8002946:	f004 fbad 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 800294a:	b128      	cbz	r0, 8002958 <aes192_test+0x88>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800294c:	4240      	negs	r0, r0
 800294e:	492b      	ldr	r1, [pc, #172]	; (80029fc <aes192_test+0x12c>)
 8002950:	4c2e      	ldr	r4, [pc, #184]	; (8002a0c <aes192_test+0x13c>)
 8002952:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002956:	e7d9      	b.n	800290c <aes192_test+0x3c>
    ret = wc_AesSetKey(dec, key, (int) sizeof(key), iv, AES_DECRYPTION);
 8002958:	2301      	movs	r3, #1
 800295a:	492b      	ldr	r1, [pc, #172]	; (8002a08 <aes192_test+0x138>)
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2218      	movs	r2, #24
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <aes192_test+0x134>)
 8002962:	4628      	mov	r0, r5
 8002964:	f004 fb9e 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 8002968:	4601      	mov	r1, r0
 800296a:	b128      	cbz	r0, 8002978 <aes192_test+0xa8>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800296c:	4241      	negs	r1, r0
 800296e:	4c28      	ldr	r4, [pc, #160]	; (8002a10 <aes192_test+0x140>)
 8002970:	4822      	ldr	r0, [pc, #136]	; (80029fc <aes192_test+0x12c>)
 8002972:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002976:	e7c9      	b.n	800290c <aes192_test+0x3c>
    XMEMSET(cipher, 0, AES_BLOCK_SIZE);
 8002978:	2210      	movs	r2, #16
 800297a:	a802      	add	r0, sp, #8
 800297c:	f018 fb58 	bl	801b030 <memset>
    ret = wc_AesCbcEncrypt(enc, cipher, msg, (int) sizeof(msg));
 8002980:	a902      	add	r1, sp, #8
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <aes192_test+0x144>)
 8002984:	2310      	movs	r3, #16
 8002986:	4630      	mov	r0, r6
 8002988:	f004 fdbc 	bl	8007504 <wc_AesCbcEncrypt>
    if (ret != 0)
 800298c:	4601      	mov	r1, r0
 800298e:	b128      	cbz	r0, 800299c <aes192_test+0xcc>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002990:	4241      	negs	r1, r0
 8002992:	4c21      	ldr	r4, [pc, #132]	; (8002a18 <aes192_test+0x148>)
 8002994:	4819      	ldr	r0, [pc, #100]	; (80029fc <aes192_test+0x12c>)
 8002996:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800299a:	e7b7      	b.n	800290c <aes192_test+0x3c>
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
 800299c:	2210      	movs	r2, #16
 800299e:	a806      	add	r0, sp, #24
 80029a0:	f018 fb46 	bl	801b030 <memset>
    ret = wc_AesCbcDecrypt(dec, plain, cipher, (int) sizeof(cipher));
 80029a4:	2310      	movs	r3, #16
 80029a6:	aa02      	add	r2, sp, #8
 80029a8:	a906      	add	r1, sp, #24
 80029aa:	4628      	mov	r0, r5
 80029ac:	f004 fdd4 	bl	8007558 <wc_AesCbcDecrypt>
    if (ret != 0)
 80029b0:	b128      	cbz	r0, 80029be <aes192_test+0xee>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80029b2:	4240      	negs	r0, r0
 80029b4:	4911      	ldr	r1, [pc, #68]	; (80029fc <aes192_test+0x12c>)
 80029b6:	4c19      	ldr	r4, [pc, #100]	; (8002a1c <aes192_test+0x14c>)
 80029b8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80029bc:	e7a6      	b.n	800290c <aes192_test+0x3c>
    if (XMEMCMP(plain, msg, (int) sizeof(plain))) {
 80029be:	4915      	ldr	r1, [pc, #84]	; (8002a14 <aes192_test+0x144>)
 80029c0:	2210      	movs	r2, #16
 80029c2:	a806      	add	r0, sp, #24
 80029c4:	f018 fafc 	bl	801afc0 <memcmp>
 80029c8:	b988      	cbnz	r0, 80029ee <aes192_test+0x11e>
    if (XMEMCMP(cipher, verify, (int) sizeof(cipher)))
 80029ca:	4915      	ldr	r1, [pc, #84]	; (8002a20 <aes192_test+0x150>)
 80029cc:	2210      	movs	r2, #16
 80029ce:	a802      	add	r0, sp, #8
 80029d0:	f018 faf6 	bl	801afc0 <memcmp>
 80029d4:	4604      	mov	r4, r0
 80029d6:	b960      	cbnz	r0, 80029f2 <aes192_test+0x122>
    wc_AesFree(enc);
 80029d8:	4630      	mov	r0, r6
 80029da:	f006 f83a 	bl	8008a52 <wc_AesFree>
    wc_AesFree(dec);
 80029de:	4628      	mov	r0, r5
 80029e0:	f006 f837 	bl	8008a52 <wc_AesFree>
 80029e4:	e794      	b.n	8002910 <aes192_test+0x40>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80029e6:	4c0f      	ldr	r4, [pc, #60]	; (8002a24 <aes192_test+0x154>)
    return ret;
 80029e8:	e799      	b.n	800291e <aes192_test+0x4e>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80029ea:	4c0f      	ldr	r4, [pc, #60]	; (8002a28 <aes192_test+0x158>)
 80029ec:	e790      	b.n	8002910 <aes192_test+0x40>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 80029ee:	4c0f      	ldr	r4, [pc, #60]	; (8002a2c <aes192_test+0x15c>)
 80029f0:	e78e      	b.n	8002910 <aes192_test+0x40>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 80029f2:	4c0f      	ldr	r4, [pc, #60]	; (8002a30 <aes192_test+0x160>)
 80029f4:	e78c      	b.n	8002910 <aes192_test+0x40>
 80029f6:	bf00      	nop
 80029f8:	dfffd2fe 	.word	0xdfffd2fe
 80029fc:	fffe7960 	.word	0xfffe7960
 8002a00:	dfffd2fa 	.word	0xdfffd2fa
 8002a04:	20000092 	.word	0x20000092
 8002a08:	200000c2 	.word	0x200000c2
 8002a0c:	dfffd2f5 	.word	0xdfffd2f5
 8002a10:	dfffd2f1 	.word	0xdfffd2f1
 8002a14:	0801f21b 	.word	0x0801f21b
 8002a18:	dfffd2e8 	.word	0xdfffd2e8
 8002a1c:	dfffd2e0 	.word	0xdfffd2e0
 8002a20:	0801fc88 	.word	0x0801fc88
 8002a24:	ffffd307 	.word	0xffffd307
 8002a28:	ffffd304 	.word	0xffffd304
 8002a2c:	ffffd2de 	.word	0xffffd2de
 8002a30:	ffffd2d9 	.word	0xffffd2d9

08002a34 <aes256_test>:
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8002a36:	f44f 709c 	mov.w	r0, #312	; 0x138
{
 8002a3a:	b08a      	sub	sp, #40	; 0x28
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8002a3c:	f018 fab0 	bl	801afa0 <malloc>
 8002a40:	4606      	mov	r6, r0
 8002a42:	2800      	cmp	r0, #0
 8002a44:	f000 8085 	beq.w	8002b52 <aes256_test+0x11e>
    if ((dec = (Aes *)XMALLOC(sizeof *dec, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8002a48:	f44f 709c 	mov.w	r0, #312	; 0x138
 8002a4c:	f018 faa8 	bl	801afa0 <malloc>
 8002a50:	4605      	mov	r5, r0
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d07f      	beq.n	8002b56 <aes256_test+0x122>
    ret = wc_AesInit(enc, HEAP_HINT, devId);
 8002a56:	2100      	movs	r1, #0
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	f005 fff0 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8002a62:	4601      	mov	r1, r0
 8002a64:	b138      	cbz	r0, 8002a76 <aes256_test+0x42>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002a66:	4241      	negs	r1, r0
 8002a68:	4c3e      	ldr	r4, [pc, #248]	; (8002b64 <aes256_test+0x130>)
 8002a6a:	483f      	ldr	r0, [pc, #252]	; (8002b68 <aes256_test+0x134>)
 8002a6c:	f3c1 010a 	ubfx	r1, r1, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002a70:	fb01 4400 	mla	r4, r1, r0, r4
 8002a74:	e00e      	b.n	8002a94 <aes256_test+0x60>
    ret = wc_AesInit(dec, HEAP_HINT, devId);
 8002a76:	f06f 0201 	mvn.w	r2, #1
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f005 ffe1 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8002a80:	b190      	cbz	r0, 8002aa8 <aes256_test+0x74>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002a82:	4244      	negs	r4, r0
 8002a84:	4838      	ldr	r0, [pc, #224]	; (8002b68 <aes256_test+0x134>)
 8002a86:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002a8a:	4344      	muls	r4, r0
 8002a8c:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8002a90:	f5a4 5436 	sub.w	r4, r4, #11648	; 0x2d80
        XFREE(enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 8002a94:	4630      	mov	r0, r6
 8002a96:	f018 fa8b 	bl	801afb0 <free>
    if (dec)
 8002a9a:	b115      	cbz	r5, 8002aa2 <aes256_test+0x6e>
        XFREE(dec, HEAP_HINT, DYNAMIC_TYPE_AES);
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f018 fa87 	bl	801afb0 <free>
}
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	b00a      	add	sp, #40	; 0x28
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
    ret = wc_AesSetKey(enc, key, keySz, iv, AES_ENCRYPTION);
 8002aa8:	9000      	str	r0, [sp, #0]
 8002aaa:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <aes256_test+0x138>)
 8002aac:	4930      	ldr	r1, [pc, #192]	; (8002b70 <aes256_test+0x13c>)
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f004 faf7 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 8002ab6:	b128      	cbz	r0, 8002ac4 <aes256_test+0x90>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002ab8:	4240      	negs	r0, r0
 8002aba:	492b      	ldr	r1, [pc, #172]	; (8002b68 <aes256_test+0x134>)
 8002abc:	4c2d      	ldr	r4, [pc, #180]	; (8002b74 <aes256_test+0x140>)
 8002abe:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002ac2:	e7d5      	b.n	8002a70 <aes256_test+0x3c>
    ret = wc_AesSetKey(dec, key, keySz, iv, AES_DECRYPTION);
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	492a      	ldr	r1, [pc, #168]	; (8002b70 <aes256_test+0x13c>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2220      	movs	r2, #32
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <aes256_test+0x138>)
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f004 fae8 	bl	80070a4 <wc_AesSetKey>
    if (ret != 0)
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	b128      	cbz	r0, 8002ae4 <aes256_test+0xb0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002ad8:	4241      	negs	r1, r0
 8002ada:	4c27      	ldr	r4, [pc, #156]	; (8002b78 <aes256_test+0x144>)
 8002adc:	4822      	ldr	r0, [pc, #136]	; (8002b68 <aes256_test+0x134>)
 8002ade:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002ae2:	e7c5      	b.n	8002a70 <aes256_test+0x3c>
    XMEMSET(cipher, 0, AES_BLOCK_SIZE);
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	a802      	add	r0, sp, #8
 8002ae8:	f018 faa2 	bl	801b030 <memset>
    ret = wc_AesCbcEncrypt(enc, cipher, msg, (int) sizeof(msg));
 8002aec:	a902      	add	r1, sp, #8
 8002aee:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <aes256_test+0x148>)
 8002af0:	2310      	movs	r3, #16
 8002af2:	4630      	mov	r0, r6
 8002af4:	f004 fd06 	bl	8007504 <wc_AesCbcEncrypt>
    if (ret != 0)
 8002af8:	4601      	mov	r1, r0
 8002afa:	b128      	cbz	r0, 8002b08 <aes256_test+0xd4>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002afc:	4241      	negs	r1, r0
 8002afe:	4c20      	ldr	r4, [pc, #128]	; (8002b80 <aes256_test+0x14c>)
 8002b00:	4819      	ldr	r0, [pc, #100]	; (8002b68 <aes256_test+0x134>)
 8002b02:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002b06:	e7b3      	b.n	8002a70 <aes256_test+0x3c>
    XMEMSET(plain, 0, AES_BLOCK_SIZE);
 8002b08:	2210      	movs	r2, #16
 8002b0a:	a806      	add	r0, sp, #24
 8002b0c:	f018 fa90 	bl	801b030 <memset>
    ret = wc_AesCbcDecrypt(dec, plain, cipher, (int) sizeof(cipher));
 8002b10:	2310      	movs	r3, #16
 8002b12:	aa02      	add	r2, sp, #8
 8002b14:	a906      	add	r1, sp, #24
 8002b16:	4628      	mov	r0, r5
 8002b18:	f004 fd1e 	bl	8007558 <wc_AesCbcDecrypt>
    if (ret != 0)
 8002b1c:	b128      	cbz	r0, 8002b2a <aes256_test+0xf6>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002b1e:	4240      	negs	r0, r0
 8002b20:	4911      	ldr	r1, [pc, #68]	; (8002b68 <aes256_test+0x134>)
 8002b22:	4c18      	ldr	r4, [pc, #96]	; (8002b84 <aes256_test+0x150>)
 8002b24:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002b28:	e7a2      	b.n	8002a70 <aes256_test+0x3c>
    if (XMEMCMP(plain, msg, (int) sizeof(plain))) {
 8002b2a:	4914      	ldr	r1, [pc, #80]	; (8002b7c <aes256_test+0x148>)
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	a806      	add	r0, sp, #24
 8002b30:	f018 fa46 	bl	801afc0 <memcmp>
 8002b34:	b988      	cbnz	r0, 8002b5a <aes256_test+0x126>
    if (XMEMCMP(cipher, verify, (int) sizeof(cipher)))
 8002b36:	4914      	ldr	r1, [pc, #80]	; (8002b88 <aes256_test+0x154>)
 8002b38:	2210      	movs	r2, #16
 8002b3a:	a802      	add	r0, sp, #8
 8002b3c:	f018 fa40 	bl	801afc0 <memcmp>
 8002b40:	4604      	mov	r4, r0
 8002b42:	b960      	cbnz	r0, 8002b5e <aes256_test+0x12a>
    wc_AesFree(enc);
 8002b44:	4630      	mov	r0, r6
 8002b46:	f005 ff84 	bl	8008a52 <wc_AesFree>
    wc_AesFree(dec);
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f005 ff81 	bl	8008a52 <wc_AesFree>
 8002b50:	e7a0      	b.n	8002a94 <aes256_test+0x60>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 8002b52:	4c0e      	ldr	r4, [pc, #56]	; (8002b8c <aes256_test+0x158>)
    return ret;
 8002b54:	e7a5      	b.n	8002aa2 <aes256_test+0x6e>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 8002b56:	4c0e      	ldr	r4, [pc, #56]	; (8002b90 <aes256_test+0x15c>)
 8002b58:	e79c      	b.n	8002a94 <aes256_test+0x60>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8002b5a:	4c0e      	ldr	r4, [pc, #56]	; (8002b94 <aes256_test+0x160>)
 8002b5c:	e79a      	b.n	8002a94 <aes256_test+0x60>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8002b5e:	4c0e      	ldr	r4, [pc, #56]	; (8002b98 <aes256_test+0x164>)
 8002b60:	e798      	b.n	8002a94 <aes256_test+0x60>
 8002b62:	bf00      	nop
 8002b64:	dfffd284 	.word	0xdfffd284
 8002b68:	fffe7960 	.word	0xfffe7960
 8002b6c:	20000082 	.word	0x20000082
 8002b70:	200000a2 	.word	0x200000a2
 8002b74:	dfffd27b 	.word	0xdfffd27b
 8002b78:	dfffd277 	.word	0xdfffd277
 8002b7c:	0801f20b 	.word	0x0801f20b
 8002b80:	dfffd26e 	.word	0xdfffd26e
 8002b84:	dfffd266 	.word	0xdfffd266
 8002b88:	0801fc78 	.word	0x0801fc78
 8002b8c:	ffffd28d 	.word	0xffffd28d
 8002b90:	ffffd28a 	.word	0xffffd28a
 8002b94:	ffffd264 	.word	0xffffd264
 8002b98:	ffffd25f 	.word	0xffffd25f

08002b9c <aesgcm_default_test>:
{
 8002b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    byte key1[] = {
 8002ba0:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <aesgcm_default_test+0x198>)
{
 8002ba2:	b0c2      	sub	sp, #264	; 0x108
    byte key1[] = {
 8002ba4:	aa12      	add	r2, sp, #72	; 0x48
 8002ba6:	f103 0510 	add.w	r5, r3, #16
 8002baa:	4617      	mov	r7, r2
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	c403      	stmia	r4!, {r0, r1}
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	42ab      	cmp	r3, r5
 8002bb8:	4622      	mov	r2, r4
 8002bba:	d1f7      	bne.n	8002bac <aesgcm_default_test+0x10>
    byte iv1[] = {
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <aesgcm_default_test+0x19c>)
 8002bbe:	6810      	ldr	r0, [r2, #0]
 8002bc0:	6851      	ldr	r1, [r2, #4]
 8002bc2:	ab06      	add	r3, sp, #24
 8002bc4:	c303      	stmia	r3!, {r0, r1}
 8002bc6:	6890      	ldr	r0, [r2, #8]
 8002bc8:	6018      	str	r0, [r3, #0]
    ALIGN64 byte plain1[] = {
 8002bca:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <aesgcm_default_test+0x1a0>)
 8002bcc:	ac32      	add	r4, sp, #200	; 0xc8
 8002bce:	f103 0620 	add.w	r6, r3, #32
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	4625      	mov	r5, r4
 8002bda:	c503      	stmia	r5!, {r0, r1}
 8002bdc:	3308      	adds	r3, #8
 8002bde:	42b3      	cmp	r3, r6
 8002be0:	462c      	mov	r4, r5
 8002be2:	d1f7      	bne.n	8002bd4 <aesgcm_default_test+0x38>
    byte aad1[] = {
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <aesgcm_default_test+0x1a4>)
 8002be6:	ac16      	add	r4, sp, #88	; 0x58
 8002be8:	f103 0610 	add.w	r6, r3, #16
 8002bec:	46a6      	mov	lr, r4
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	4625      	mov	r5, r4
 8002bf4:	c503      	stmia	r5!, {r0, r1}
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	42b3      	cmp	r3, r6
 8002bfa:	462c      	mov	r4, r5
 8002bfc:	d1f7      	bne.n	8002bee <aesgcm_default_test+0x52>
    ALIGN64 byte cipher1[] = {
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <aesgcm_default_test+0x1a8>)
 8002c00:	ac3a      	add	r4, sp, #232	; 0xe8
 8002c02:	f103 0620 	add.w	r6, r3, #32
 8002c06:	46a4      	mov	ip, r4
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	4625      	mov	r5, r4
 8002c0e:	c503      	stmia	r5!, {r0, r1}
 8002c10:	3308      	adds	r3, #8
 8002c12:	42b3      	cmp	r3, r6
 8002c14:	462c      	mov	r4, r5
 8002c16:	d1f7      	bne.n	8002c08 <aesgcm_default_test+0x6c>
    byte tag1[] = {
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <aesgcm_default_test+0x1ac>)
 8002c1a:	ac1a      	add	r4, sp, #104	; 0x68
 8002c1c:	f103 0610 	add.w	r6, r3, #16
 8002c20:	46a0      	mov	r8, r4
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	4625      	mov	r5, r4
 8002c28:	c503      	stmia	r5!, {r0, r1}
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	42b3      	cmp	r3, r6
 8002c2e:	462c      	mov	r4, r5
 8002c30:	d1f7      	bne.n	8002c22 <aesgcm_default_test+0x86>
    byte key2[] = {
 8002c32:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <aesgcm_default_test+0x1b0>)
 8002c34:	ac1e      	add	r4, sp, #120	; 0x78
 8002c36:	f103 0910 	add.w	r9, r3, #16
 8002c3a:	4625      	mov	r5, r4
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	4626      	mov	r6, r4
 8002c42:	c603      	stmia	r6!, {r0, r1}
 8002c44:	3308      	adds	r3, #8
 8002c46:	454b      	cmp	r3, r9
 8002c48:	4634      	mov	r4, r6
 8002c4a:	d1f7      	bne.n	8002c3c <aesgcm_default_test+0xa0>
    byte iv2[] = {
 8002c4c:	4c40      	ldr	r4, [pc, #256]	; (8002d50 <aesgcm_default_test+0x1b4>)
 8002c4e:	6820      	ldr	r0, [r4, #0]
 8002c50:	6861      	ldr	r1, [r4, #4]
 8002c52:	ab09      	add	r3, sp, #36	; 0x24
 8002c54:	c303      	stmia	r3!, {r0, r1}
 8002c56:	68a0      	ldr	r0, [r4, #8]
 8002c58:	6018      	str	r0, [r3, #0]
    ALIGN64 byte plain2[] = {
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <aesgcm_default_test+0x1b8>)
 8002c5c:	ae22      	add	r6, sp, #136	; 0x88
 8002c5e:	f103 0910 	add.w	r9, r3, #16
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	4634      	mov	r4, r6
 8002c68:	c403      	stmia	r4!, {r0, r1}
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	454b      	cmp	r3, r9
 8002c6e:	4626      	mov	r6, r4
 8002c70:	d1f7      	bne.n	8002c62 <aesgcm_default_test+0xc6>
    ALIGN64 byte cipher2[] = {
 8002c72:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <aesgcm_default_test+0x1bc>)
 8002c74:	ae26      	add	r6, sp, #152	; 0x98
 8002c76:	f103 0910 	add.w	r9, r3, #16
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	4634      	mov	r4, r6
 8002c80:	c403      	stmia	r4!, {r0, r1}
 8002c82:	3308      	adds	r3, #8
 8002c84:	454b      	cmp	r3, r9
 8002c86:	4626      	mov	r6, r4
 8002c88:	d1f7      	bne.n	8002c7a <aesgcm_default_test+0xde>
    byte tag2[] = {
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <aesgcm_default_test+0x1c0>)
 8002c8c:	ac2a      	add	r4, sp, #168	; 0xa8
 8002c8e:	f103 0a10 	add.w	sl, r3, #16
 8002c92:	4626      	mov	r6, r4
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	46a1      	mov	r9, r4
 8002c9a:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	4553      	cmp	r3, sl
 8002ca2:	464c      	mov	r4, r9
 8002ca4:	d1f6      	bne.n	8002c94 <aesgcm_default_test+0xf8>
    byte key3[] = {
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <aesgcm_default_test+0x1c4>)
 8002ca8:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002cac:	f103 0a10 	add.w	sl, r3, #16
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	464c      	mov	r4, r9
 8002cb6:	c403      	stmia	r4!, {r0, r1}
 8002cb8:	3308      	adds	r3, #8
 8002cba:	4553      	cmp	r3, sl
 8002cbc:	46a1      	mov	r9, r4
 8002cbe:	d1f7      	bne.n	8002cb0 <aesgcm_default_test+0x114>
    byte iv3[] = {
 8002cc0:	4c28      	ldr	r4, [pc, #160]	; (8002d64 <aesgcm_default_test+0x1c8>)
 8002cc2:	6820      	ldr	r0, [r4, #0]
 8002cc4:	6861      	ldr	r1, [r4, #4]
 8002cc6:	ab0c      	add	r3, sp, #48	; 0x30
 8002cc8:	c303      	stmia	r3!, {r0, r1}
 8002cca:	68a0      	ldr	r0, [r4, #8]
    byte tag3[] = {
 8002ccc:	4c26      	ldr	r4, [pc, #152]	; (8002d68 <aesgcm_default_test+0x1cc>)
    byte iv3[] = {
 8002cce:	6018      	str	r0, [r3, #0]
    byte tag3[] = {
 8002cd0:	6861      	ldr	r1, [r4, #4]
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	ab0f      	add	r3, sp, #60	; 0x3c
 8002cd6:	c303      	stmia	r3!, {r0, r1}
 8002cd8:	68a0      	ldr	r0, [r4, #8]
 8002cda:	6018      	str	r0, [r3, #0]
    ret = aesgcm_default_test_helper(key1, sizeof(key1), iv1, sizeof(iv1),
 8002cdc:	2410      	movs	r4, #16
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e9cd 8404 	strd	r8, r4, [sp, #16]
 8002ce4:	e9cd e402 	strd	lr, r4, [sp, #8]
 8002ce8:	e9cd c300 	strd	ip, r3, [sp]
 8002cec:	a906      	add	r1, sp, #24
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7fd fc18 	bl	8000524 <aesgcm_default_test_helper.constprop.0>
    if (ret != 0) {
 8002cf4:	b9d8      	cbnz	r0, 8002d2e <aesgcm_default_test+0x192>
    ret = aesgcm_default_test_helper(key2, sizeof(key2), iv2, sizeof(iv2),
 8002cf6:	ab26      	add	r3, sp, #152	; 0x98
 8002cf8:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	e9cd 6404 	strd	r6, r4, [sp, #16]
 8002d02:	9401      	str	r4, [sp, #4]
 8002d04:	4623      	mov	r3, r4
 8002d06:	aa22      	add	r2, sp, #136	; 0x88
 8002d08:	a909      	add	r1, sp, #36	; 0x24
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f7fd fc0a 	bl	8000524 <aesgcm_default_test_helper.constprop.0>
    if (ret != 0) {
 8002d10:	b968      	cbnz	r0, 8002d2e <aesgcm_default_test+0x192>
    ret = aesgcm_default_test_helper(key3, sizeof(key3), iv3, sizeof(iv3),
 8002d12:	230c      	movs	r3, #12
 8002d14:	9305      	str	r3, [sp, #20]
 8002d16:	ab0f      	add	r3, sp, #60	; 0x3c
 8002d18:	e9cd 0303 	strd	r0, r3, [sp, #12]
 8002d1c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8002d20:	9000      	str	r0, [sp, #0]
 8002d22:	4603      	mov	r3, r0
 8002d24:	4602      	mov	r2, r0
 8002d26:	a90c      	add	r1, sp, #48	; 0x30
 8002d28:	a82e      	add	r0, sp, #184	; 0xb8
 8002d2a:	f7fd fbfb 	bl	8000524 <aesgcm_default_test_helper.constprop.0>
}
 8002d2e:	b042      	add	sp, #264	; 0x108
 8002d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d34:	0801e31b 	.word	0x0801e31b
 8002d38:	0801e32c 	.word	0x0801e32c
 8002d3c:	0801e339 	.word	0x0801e339
 8002d40:	0801e35a 	.word	0x0801e35a
 8002d44:	0801e36b 	.word	0x0801e36b
 8002d48:	0801e38c 	.word	0x0801e38c
 8002d4c:	0801e39d 	.word	0x0801e39d
 8002d50:	0801e3ae 	.word	0x0801e3ae
 8002d54:	0801e3bb 	.word	0x0801e3bb
 8002d58:	0801e3cc 	.word	0x0801e3cc
 8002d5c:	0801e3dd 	.word	0x0801e3dd
 8002d60:	0801e3ee 	.word	0x0801e3ee
 8002d64:	0801e3ff 	.word	0x0801e3ff
 8002d68:	0801e40c 	.word	0x0801e40c

08002d6c <aesgcm_test>:
{
 8002d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8002d70:	f44f 709c 	mov.w	r0, #312	; 0x138
{
 8002d74:	b0bb      	sub	sp, #236	; 0xec
    if ((enc = (Aes *)XMALLOC(sizeof *enc, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8002d76:	f018 f913 	bl	801afa0 <malloc>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	f000 8327 	beq.w	80033d0 <aesgcm_test+0x664>
    if ((dec = (Aes *)XMALLOC(sizeof *dec, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 8002d82:	f44f 709c 	mov.w	r0, #312	; 0x138
 8002d86:	f018 f90b 	bl	801afa0 <malloc>
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	f000 8321 	beq.w	80033d4 <aesgcm_test+0x668>
    XMEMSET(resultT, 0, sizeof(resultT));
 8002d92:	2220      	movs	r2, #32
 8002d94:	2100      	movs	r1, #0
 8002d96:	a80c      	add	r0, sp, #48	; 0x30
 8002d98:	f018 f94a 	bl	801b030 <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
 8002d9c:	224c      	movs	r2, #76	; 0x4c
 8002d9e:	2100      	movs	r1, #0
 8002da0:	a827      	add	r0, sp, #156	; 0x9c
 8002da2:	f018 f945 	bl	801b030 <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
 8002da6:	224c      	movs	r2, #76	; 0x4c
 8002da8:	2100      	movs	r1, #0
 8002daa:	a814      	add	r0, sp, #80	; 0x50
 8002dac:	f018 f940 	bl	801b030 <memset>
    ret = wc_AesInit(enc, HEAP_HINT, devId);
 8002db0:	2100      	movs	r1, #0
 8002db2:	f06f 0201 	mvn.w	r2, #1
 8002db6:	4620      	mov	r0, r4
 8002db8:	f005 fe43 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	b138      	cbz	r0, 8002dd0 <aesgcm_test+0x64>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002dc0:	4241      	negs	r1, r0
 8002dc2:	4eb5      	ldr	r6, [pc, #724]	; (8003098 <aesgcm_test+0x32c>)
 8002dc4:	48b5      	ldr	r0, [pc, #724]	; (800309c <aesgcm_test+0x330>)
 8002dc6:	f3c1 010a 	ubfx	r1, r1, #0, #11
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002dca:	fb01 6600 	mla	r6, r1, r0, r6
 8002dce:	e26a      	b.n	80032a6 <aesgcm_test+0x53a>
    ret = wc_AesInit(dec, HEAP_HINT, devId);
 8002dd0:	f06f 0201 	mvn.w	r2, #1
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f005 fe34 	bl	8008a42 <wc_AesInit>
    if (ret != 0)
 8002dda:	b128      	cbz	r0, 8002de8 <aesgcm_test+0x7c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002ddc:	4240      	negs	r0, r0
 8002dde:	49af      	ldr	r1, [pc, #700]	; (800309c <aesgcm_test+0x330>)
 8002de0:	4eaf      	ldr	r6, [pc, #700]	; (80030a0 <aesgcm_test+0x334>)
 8002de2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002de6:	e7f0      	b.n	8002dca <aesgcm_test+0x5e>
    ret = wc_AesGcmSetKey(enc, k1, k1Sz);
 8002de8:	49ae      	ldr	r1, [pc, #696]	; (80030a4 <aesgcm_test+0x338>)
 8002dea:	2220      	movs	r2, #32
 8002dec:	4620      	mov	r0, r4
 8002dee:	f005 fae5 	bl	80083bc <wc_AesGcmSetKey>
    if (ret != 0)
 8002df2:	b128      	cbz	r0, 8002e00 <aesgcm_test+0x94>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002df4:	4240      	negs	r0, r0
 8002df6:	49a9      	ldr	r1, [pc, #676]	; (800309c <aesgcm_test+0x330>)
 8002df8:	4eab      	ldr	r6, [pc, #684]	; (80030a8 <aesgcm_test+0x33c>)
 8002dfa:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002dfe:	e7e4      	b.n	8002dca <aesgcm_test+0x5e>
    ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), iv1, sizeof(iv1),
 8002e00:	ab0c      	add	r3, sp, #48	; 0x30
 8002e02:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80030ac <aesgcm_test+0x340>
 8002e06:	4eaa      	ldr	r6, [pc, #680]	; (80030b0 <aesgcm_test+0x344>)
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	f04f 0a14 	mov.w	sl, #20
 8002e0e:	2710      	movs	r7, #16
 8002e10:	f04f 080c 	mov.w	r8, #12
 8002e14:	4aa7      	ldr	r2, [pc, #668]	; (80030b4 <aesgcm_test+0x348>)
 8002e16:	f8cd a014 	str.w	sl, [sp, #20]
 8002e1a:	f8cd 9010 	str.w	r9, [sp, #16]
 8002e1e:	9703      	str	r7, [sp, #12]
 8002e20:	f8cd 8004 	str.w	r8, [sp, #4]
 8002e24:	9600      	str	r6, [sp, #0]
 8002e26:	233c      	movs	r3, #60	; 0x3c
 8002e28:	a927      	add	r1, sp, #156	; 0x9c
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f005 fb96 	bl	800855c <wc_AesGcmEncrypt>
    if (ret != 0)
 8002e30:	b128      	cbz	r0, 8002e3e <aesgcm_test+0xd2>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002e32:	4240      	negs	r0, r0
 8002e34:	4999      	ldr	r1, [pc, #612]	; (800309c <aesgcm_test+0x330>)
 8002e36:	4ea0      	ldr	r6, [pc, #640]	; (80030b8 <aesgcm_test+0x34c>)
 8002e38:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002e3c:	e7c5      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(c1, resultC, sizeof(c1)))
 8002e3e:	489f      	ldr	r0, [pc, #636]	; (80030bc <aesgcm_test+0x350>)
 8002e40:	223c      	movs	r2, #60	; 0x3c
 8002e42:	a927      	add	r1, sp, #156	; 0x9c
 8002e44:	f018 f8bc 	bl	801afc0 <memcmp>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	f040 82c5 	bne.w	80033d8 <aesgcm_test+0x66c>
    if (XMEMCMP(t1, resultT, sizeof(t1)))
 8002e4e:	489c      	ldr	r0, [pc, #624]	; (80030c0 <aesgcm_test+0x354>)
 8002e50:	463a      	mov	r2, r7
 8002e52:	a90c      	add	r1, sp, #48	; 0x30
 8002e54:	f018 f8b4 	bl	801afc0 <memcmp>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	f040 82f3 	bne.w	8003444 <aesgcm_test+0x6d8>
    ret = wc_AesGcmSetKey(dec, k1, k1Sz);
 8002e5e:	4991      	ldr	r1, [pc, #580]	; (80030a4 <aesgcm_test+0x338>)
 8002e60:	2220      	movs	r2, #32
 8002e62:	4628      	mov	r0, r5
 8002e64:	f005 faaa 	bl	80083bc <wc_AesGcmSetKey>
    if (ret != 0)
 8002e68:	b128      	cbz	r0, 8002e76 <aesgcm_test+0x10a>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002e6a:	4240      	negs	r0, r0
 8002e6c:	498b      	ldr	r1, [pc, #556]	; (800309c <aesgcm_test+0x330>)
 8002e6e:	4e95      	ldr	r6, [pc, #596]	; (80030c4 <aesgcm_test+0x358>)
 8002e70:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002e74:	e7a9      	b.n	8002dca <aesgcm_test+0x5e>
    ret = wc_AesGcmDecrypt(dec, resultP, resultC, sizeof(c1),
 8002e76:	ab0c      	add	r3, sp, #48	; 0x30
 8002e78:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8002e7c:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 8002e80:	9703      	str	r7, [sp, #12]
 8002e82:	9600      	str	r6, [sp, #0]
 8002e84:	233c      	movs	r3, #60	; 0x3c
 8002e86:	aa27      	add	r2, sp, #156	; 0x9c
 8002e88:	a914      	add	r1, sp, #80	; 0x50
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f005 fbee 	bl	800866c <wc_AesGcmDecrypt>
    if (ret != 0)
 8002e90:	b128      	cbz	r0, 8002e9e <aesgcm_test+0x132>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002e92:	4240      	negs	r0, r0
 8002e94:	4981      	ldr	r1, [pc, #516]	; (800309c <aesgcm_test+0x330>)
 8002e96:	4e8c      	ldr	r6, [pc, #560]	; (80030c8 <aesgcm_test+0x35c>)
 8002e98:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002e9c:	e795      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(p, resultP, sizeof(p)))
 8002e9e:	4885      	ldr	r0, [pc, #532]	; (80030b4 <aesgcm_test+0x348>)
 8002ea0:	223c      	movs	r2, #60	; 0x3c
 8002ea2:	a914      	add	r1, sp, #80	; 0x50
 8002ea4:	f018 f88c 	bl	801afc0 <memcmp>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	f040 82cd 	bne.w	8003448 <aesgcm_test+0x6dc>
         ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), k1,
 8002eae:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 80030ac <aesgcm_test+0x340>
 8002eb2:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80030a4 <aesgcm_test+0x338>
    for (ivlen=1; ivlen<k1Sz; ivlen++) {
 8002eb6:	2701      	movs	r7, #1
         ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), k1,
 8002eb8:	f04f 0b14 	mov.w	fp, #20
 8002ebc:	f04f 0810 	mov.w	r8, #16
 8002ec0:	ae0c      	add	r6, sp, #48	; 0x30
 8002ec2:	e9cd 9b04 	strd	r9, fp, [sp, #16]
 8002ec6:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8002eca:	4a7a      	ldr	r2, [pc, #488]	; (80030b4 <aesgcm_test+0x348>)
 8002ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ed0:	f8cd a000 	str.w	sl, [sp]
 8002ed4:	233c      	movs	r3, #60	; 0x3c
 8002ed6:	a927      	add	r1, sp, #156	; 0x9c
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f005 fb3f 	bl	800855c <wc_AesGcmEncrypt>
        if (ret != 0)
 8002ede:	b128      	cbz	r0, 8002eec <aesgcm_test+0x180>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002ee0:	4240      	negs	r0, r0
 8002ee2:	496e      	ldr	r1, [pc, #440]	; (800309c <aesgcm_test+0x330>)
 8002ee4:	4e79      	ldr	r6, [pc, #484]	; (80030cc <aesgcm_test+0x360>)
 8002ee6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002eea:	e76e      	b.n	8002dca <aesgcm_test+0x5e>
        ret = wc_AesGcmDecrypt(dec, resultP, resultC, sizeof(c1), k1,
 8002eec:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8002ef0:	e9cd 9b04 	strd	r9, fp, [sp, #16]
 8002ef4:	e9cd a700 	strd	sl, r7, [sp]
 8002ef8:	233c      	movs	r3, #60	; 0x3c
 8002efa:	aa27      	add	r2, sp, #156	; 0x9c
 8002efc:	a914      	add	r1, sp, #80	; 0x50
 8002efe:	4628      	mov	r0, r5
 8002f00:	f005 fbb4 	bl	800866c <wc_AesGcmDecrypt>
        if (ret != 0)
 8002f04:	4606      	mov	r6, r0
 8002f06:	b128      	cbz	r0, 8002f14 <aesgcm_test+0x1a8>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002f08:	4246      	negs	r6, r0
 8002f0a:	f3c6 000a 	ubfx	r0, r6, #0, #11
 8002f0e:	4963      	ldr	r1, [pc, #396]	; (800309c <aesgcm_test+0x330>)
 8002f10:	4e6f      	ldr	r6, [pc, #444]	; (80030d0 <aesgcm_test+0x364>)
 8002f12:	e75a      	b.n	8002dca <aesgcm_test+0x5e>
    for (ivlen=1; ivlen<k1Sz; ivlen++) {
 8002f14:	3701      	adds	r7, #1
 8002f16:	2f20      	cmp	r7, #32
 8002f18:	d1ce      	bne.n	8002eb8 <aesgcm_test+0x14c>
         ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), iv1,
 8002f1a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80030b4 <aesgcm_test+0x348>
 8002f1e:	f8df a190 	ldr.w	sl, [pc, #400]	; 80030b0 <aesgcm_test+0x344>
 8002f22:	4a64      	ldr	r2, [pc, #400]	; (80030b4 <aesgcm_test+0x348>)
 8002f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f28:	af0c      	add	r7, sp, #48	; 0x30
 8002f2a:	f04f 0b0c 	mov.w	fp, #12
 8002f2e:	e9cd 9604 	strd	r9, r6, [sp, #16]
 8002f32:	e9cd ab00 	strd	sl, fp, [sp]
 8002f36:	9702      	str	r7, [sp, #8]
 8002f38:	233c      	movs	r3, #60	; 0x3c
 8002f3a:	a927      	add	r1, sp, #156	; 0x9c
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f005 fb0d 	bl	800855c <wc_AesGcmEncrypt>
        if (ret != 0)
 8002f42:	b128      	cbz	r0, 8002f50 <aesgcm_test+0x1e4>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002f44:	4240      	negs	r0, r0
 8002f46:	4955      	ldr	r1, [pc, #340]	; (800309c <aesgcm_test+0x330>)
 8002f48:	4e62      	ldr	r6, [pc, #392]	; (80030d4 <aesgcm_test+0x368>)
 8002f4a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002f4e:	e73c      	b.n	8002dca <aesgcm_test+0x5e>
        ret = wc_AesGcmDecrypt(dec, resultP, resultC, sizeof(c1), iv1,
 8002f50:	e9cd 9604 	strd	r9, r6, [sp, #16]
 8002f54:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8002f58:	e9cd ab00 	strd	sl, fp, [sp]
 8002f5c:	233c      	movs	r3, #60	; 0x3c
 8002f5e:	aa27      	add	r2, sp, #156	; 0x9c
 8002f60:	a914      	add	r1, sp, #80	; 0x50
 8002f62:	4628      	mov	r0, r5
 8002f64:	f005 fb82 	bl	800866c <wc_AesGcmDecrypt>
        if (ret != 0)
 8002f68:	b128      	cbz	r0, 8002f76 <aesgcm_test+0x20a>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002f6a:	4240      	negs	r0, r0
 8002f6c:	494b      	ldr	r1, [pc, #300]	; (800309c <aesgcm_test+0x330>)
 8002f6e:	4e5a      	ldr	r6, [pc, #360]	; (80030d8 <aesgcm_test+0x36c>)
 8002f70:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002f74:	e729      	b.n	8002dca <aesgcm_test+0x5e>
    for (alen=0; alen<(int)sizeof(p); alen++) {
 8002f76:	3601      	adds	r6, #1
 8002f78:	2e3c      	cmp	r6, #60	; 0x3c
 8002f7a:	d1d2      	bne.n	8002f22 <aesgcm_test+0x1b6>
         ret = wc_AesGcmEncrypt(enc, resultC, p, (word32)plen, iv1,
 8002f7c:	f8df a130 	ldr.w	sl, [pc, #304]	; 80030b0 <aesgcm_test+0x344>
    for (plen=1; plen<(int)sizeof(p); plen++) {
 8002f80:	f04f 0801 	mov.w	r8, #1
         ret = wc_AesGcmEncrypt(enc, resultC, p, (word32)plen, iv1,
 8002f84:	4b49      	ldr	r3, [pc, #292]	; (80030ac <aesgcm_test+0x340>)
 8002f86:	9304      	str	r3, [sp, #16]
 8002f88:	f04f 0914 	mov.w	r9, #20
 8002f8c:	2610      	movs	r6, #16
 8002f8e:	af0c      	add	r7, sp, #48	; 0x30
 8002f90:	f04f 0b0c 	mov.w	fp, #12
 8002f94:	e9cd ab00 	strd	sl, fp, [sp]
 8002f98:	4a46      	ldr	r2, [pc, #280]	; (80030b4 <aesgcm_test+0x348>)
 8002f9a:	f8cd 9014 	str.w	r9, [sp, #20]
 8002f9e:	9603      	str	r6, [sp, #12]
 8002fa0:	9702      	str	r7, [sp, #8]
 8002fa2:	4643      	mov	r3, r8
 8002fa4:	a927      	add	r1, sp, #156	; 0x9c
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f005 fad8 	bl	800855c <wc_AesGcmEncrypt>
        if (ret != 0)
 8002fac:	b128      	cbz	r0, 8002fba <aesgcm_test+0x24e>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002fae:	4240      	negs	r0, r0
 8002fb0:	493a      	ldr	r1, [pc, #232]	; (800309c <aesgcm_test+0x330>)
 8002fb2:	4e4a      	ldr	r6, [pc, #296]	; (80030dc <aesgcm_test+0x370>)
 8002fb4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002fb8:	e707      	b.n	8002dca <aesgcm_test+0x5e>
        ret = wc_AesGcmDecrypt(dec, resultP, resultC, (word32)plen, iv1,
 8002fba:	4b3c      	ldr	r3, [pc, #240]	; (80030ac <aesgcm_test+0x340>)
 8002fbc:	f8cd 9014 	str.w	r9, [sp, #20]
 8002fc0:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8002fc4:	e9cd b701 	strd	fp, r7, [sp, #4]
 8002fc8:	f8cd a000 	str.w	sl, [sp]
 8002fcc:	4643      	mov	r3, r8
 8002fce:	aa27      	add	r2, sp, #156	; 0x9c
 8002fd0:	a914      	add	r1, sp, #80	; 0x50
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f005 fb4a 	bl	800866c <wc_AesGcmDecrypt>
        if (ret != 0)
 8002fd8:	4683      	mov	fp, r0
 8002fda:	b128      	cbz	r0, 8002fe8 <aesgcm_test+0x27c>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8002fdc:	4240      	negs	r0, r0
 8002fde:	492f      	ldr	r1, [pc, #188]	; (800309c <aesgcm_test+0x330>)
 8002fe0:	4e3f      	ldr	r6, [pc, #252]	; (80030e0 <aesgcm_test+0x374>)
 8002fe2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002fe6:	e6f0      	b.n	8002dca <aesgcm_test+0x5e>
    for (plen=1; plen<(int)sizeof(p); plen++) {
 8002fe8:	f108 0801 	add.w	r8, r8, #1
 8002fec:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
 8002ff0:	d1c8      	bne.n	8002f84 <aesgcm_test+0x218>
    XMEMSET(resultT, 0, sizeof(resultT));
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f018 f81a 	bl	801b030 <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
 8002ffc:	224c      	movs	r2, #76	; 0x4c
 8002ffe:	4659      	mov	r1, fp
 8003000:	a827      	add	r0, sp, #156	; 0x9c
 8003002:	f018 f815 	bl	801b030 <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
 8003006:	224c      	movs	r2, #76	; 0x4c
 8003008:	4659      	mov	r1, fp
 800300a:	a814      	add	r0, sp, #80	; 0x50
 800300c:	f018 f810 	bl	801b030 <memset>
    wc_AesGcmSetKey(enc, k2, sizeof(k2));
 8003010:	4934      	ldr	r1, [pc, #208]	; (80030e4 <aesgcm_test+0x378>)
    ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), iv2, sizeof(iv2),
 8003012:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80030e8 <aesgcm_test+0x37c>
    wc_AesGcmSetKey(enc, k2, sizeof(k2));
 8003016:	2218      	movs	r2, #24
 8003018:	4620      	mov	r0, r4
 800301a:	f005 f9cf 	bl	80083bc <wc_AesGcmSetKey>
    ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), iv2, sizeof(iv2),
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <aesgcm_test+0x340>)
 8003020:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <aesgcm_test+0x348>)
 8003022:	f8cd 9014 	str.w	r9, [sp, #20]
 8003026:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800302a:	e9cd 8701 	strd	r8, r7, [sp, #4]
 800302e:	f8cd a000 	str.w	sl, [sp]
 8003032:	4643      	mov	r3, r8
 8003034:	a927      	add	r1, sp, #156	; 0x9c
 8003036:	4620      	mov	r0, r4
 8003038:	f005 fa90 	bl	800855c <wc_AesGcmEncrypt>
    if (ret != 0)
 800303c:	b128      	cbz	r0, 800304a <aesgcm_test+0x2de>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800303e:	4240      	negs	r0, r0
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <aesgcm_test+0x330>)
 8003042:	4e2a      	ldr	r6, [pc, #168]	; (80030ec <aesgcm_test+0x380>)
 8003044:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003048:	e6bf      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(c2, resultC, sizeof(c2)))
 800304a:	4829      	ldr	r0, [pc, #164]	; (80030f0 <aesgcm_test+0x384>)
 800304c:	4642      	mov	r2, r8
 800304e:	a927      	add	r1, sp, #156	; 0x9c
 8003050:	f017 ffb6 	bl	801afc0 <memcmp>
 8003054:	2800      	cmp	r0, #0
 8003056:	f040 81f9 	bne.w	800344c <aesgcm_test+0x6e0>
    if (XMEMCMP(t2, resultT, sizeof(t1)))
 800305a:	4826      	ldr	r0, [pc, #152]	; (80030f4 <aesgcm_test+0x388>)
 800305c:	4632      	mov	r2, r6
 800305e:	4639      	mov	r1, r7
 8003060:	f017 ffae 	bl	801afc0 <memcmp>
 8003064:	2800      	cmp	r0, #0
 8003066:	f040 81f3 	bne.w	8003450 <aesgcm_test+0x6e4>
    ret = wc_AesGcmDecrypt(enc, resultP, resultC, sizeof(c1),
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <aesgcm_test+0x340>)
 800306c:	f8cd 9014 	str.w	r9, [sp, #20]
 8003070:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8003074:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8003078:	f8cd a000 	str.w	sl, [sp]
 800307c:	4643      	mov	r3, r8
 800307e:	aa27      	add	r2, sp, #156	; 0x9c
 8003080:	a914      	add	r1, sp, #80	; 0x50
 8003082:	4620      	mov	r0, r4
 8003084:	f005 faf2 	bl	800866c <wc_AesGcmDecrypt>
    if (ret != 0)
 8003088:	b3c0      	cbz	r0, 80030fc <aesgcm_test+0x390>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800308a:	4240      	negs	r0, r0
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <aesgcm_test+0x330>)
 800308e:	4e1a      	ldr	r6, [pc, #104]	; (80030f8 <aesgcm_test+0x38c>)
 8003090:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003094:	e699      	b.n	8002dca <aesgcm_test+0x5e>
 8003096:	bf00      	nop
 8003098:	dfffd08b 	.word	0xdfffd08b
 800309c:	fffe7960 	.word	0xfffe7960
 80030a0:	dfffd088 	.word	0xdfffd088
 80030a4:	0801f16f 	.word	0x0801f16f
 80030a8:	dfffd083 	.word	0xdfffd083
 80030ac:	0801ee24 	.word	0x0801ee24
 80030b0:	0801f0e2 	.word	0x0801f0e2
 80030b4:	0801f6b8 	.word	0x0801f6b8
 80030b8:	dfffd07a 	.word	0xdfffd07a
 80030bc:	0801eea8 	.word	0x0801eea8
 80030c0:	0801fc09 	.word	0x0801fc09
 80030c4:	dfffd06f 	.word	0xdfffd06f
 80030c8:	dfffd067 	.word	0xdfffd067
 80030cc:	dfffd03b 	.word	0xdfffd03b
 80030d0:	dfffd033 	.word	0xdfffd033
 80030d4:	dfffd024 	.word	0xdfffd024
 80030d8:	dfffd01c 	.word	0xdfffd01c
 80030dc:	dfffcfc2 	.word	0xdfffcfc2
 80030e0:	dfffcfba 	.word	0xdfffcfba
 80030e4:	0801f19f 	.word	0x0801f19f
 80030e8:	0801f0fa 	.word	0x0801f0fa
 80030ec:	dfffcfa4 	.word	0xdfffcfa4
 80030f0:	0801eee4 	.word	0x0801eee4
 80030f4:	0801fc28 	.word	0x0801fc28
 80030f8:	dfffcf97 	.word	0xdfffcf97
    if (XMEMCMP(p, resultP, sizeof(p)))
 80030fc:	4642      	mov	r2, r8
 80030fe:	48b7      	ldr	r0, [pc, #732]	; (80033dc <aesgcm_test+0x670>)
 8003100:	a914      	add	r1, sp, #80	; 0x50
 8003102:	f017 ff5d 	bl	801afc0 <memcmp>
 8003106:	4680      	mov	r8, r0
 8003108:	2800      	cmp	r0, #0
 800310a:	f040 81a3 	bne.w	8003454 <aesgcm_test+0x6e8>
    XMEMSET(resultT, 0, sizeof(resultT));
 800310e:	4601      	mov	r1, r0
 8003110:	2220      	movs	r2, #32
 8003112:	4638      	mov	r0, r7
 8003114:	f017 ff8c 	bl	801b030 <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
 8003118:	4641      	mov	r1, r8
 800311a:	224c      	movs	r2, #76	; 0x4c
 800311c:	a827      	add	r0, sp, #156	; 0x9c
 800311e:	f017 ff87 	bl	801b030 <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
 8003122:	4641      	mov	r1, r8
 8003124:	224c      	movs	r2, #76	; 0x4c
 8003126:	a814      	add	r0, sp, #80	; 0x50
 8003128:	f017 ff82 	bl	801b030 <memset>
    ret = wc_AesGcmEncrypt(enc, resultC, p3, sizeof(p3), iv3, sizeof(iv3),
 800312c:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 80033e0 <aesgcm_test+0x674>
    wc_AesGcmSetKey(enc, k3, k3Sz);
 8003130:	49ac      	ldr	r1, [pc, #688]	; (80033e4 <aesgcm_test+0x678>)
 8003132:	4632      	mov	r2, r6
 8003134:	4620      	mov	r0, r4
 8003136:	f005 f941 	bl	80083bc <wc_AesGcmSetKey>
    ret = wc_AesGcmEncrypt(enc, resultC, p3, sizeof(p3), iv3, sizeof(iv3),
 800313a:	2301      	movs	r3, #1
 800313c:	9702      	str	r7, [sp, #8]
 800313e:	4faa      	ldr	r7, [pc, #680]	; (80033e8 <aesgcm_test+0x67c>)
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	e9cd 6803 	strd	r6, r8, [sp, #12]
 8003146:	4aa9      	ldr	r2, [pc, #676]	; (80033ec <aesgcm_test+0x680>)
 8003148:	9605      	str	r6, [sp, #20]
 800314a:	9700      	str	r7, [sp, #0]
 800314c:	4633      	mov	r3, r6
 800314e:	a927      	add	r1, sp, #156	; 0x9c
 8003150:	4620      	mov	r0, r4
 8003152:	f005 fa03 	bl	800855c <wc_AesGcmEncrypt>
    if (ret != 0)
 8003156:	b128      	cbz	r0, 8003164 <aesgcm_test+0x3f8>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003158:	4240      	negs	r0, r0
 800315a:	49a5      	ldr	r1, [pc, #660]	; (80033f0 <aesgcm_test+0x684>)
 800315c:	4ea5      	ldr	r6, [pc, #660]	; (80033f4 <aesgcm_test+0x688>)
 800315e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003162:	e632      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(c3, resultC, sizeof(c3)))
 8003164:	48a4      	ldr	r0, [pc, #656]	; (80033f8 <aesgcm_test+0x68c>)
 8003166:	4632      	mov	r2, r6
 8003168:	a927      	add	r1, sp, #156	; 0x9c
 800316a:	f017 ff29 	bl	801afc0 <memcmp>
 800316e:	2800      	cmp	r0, #0
 8003170:	f040 8172 	bne.w	8003458 <aesgcm_test+0x6ec>
    if (XMEMCMP(t3, resultT, sizeof(t3)))
 8003174:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003178:	48a0      	ldr	r0, [pc, #640]	; (80033fc <aesgcm_test+0x690>)
 800317a:	2210      	movs	r2, #16
 800317c:	4649      	mov	r1, r9
 800317e:	f017 ff1f 	bl	801afc0 <memcmp>
 8003182:	2800      	cmp	r0, #0
 8003184:	f040 816a 	bne.w	800345c <aesgcm_test+0x6f0>
    ret = wc_AesGcmDecrypt(enc, resultP, resultC, sizeof(c3),
 8003188:	2610      	movs	r6, #16
 800318a:	2301      	movs	r3, #1
 800318c:	e9cd 7300 	strd	r7, r3, [sp]
 8003190:	e9cd 8604 	strd	r8, r6, [sp, #16]
 8003194:	e9cd 9602 	strd	r9, r6, [sp, #8]
 8003198:	4633      	mov	r3, r6
 800319a:	aa27      	add	r2, sp, #156	; 0x9c
 800319c:	a914      	add	r1, sp, #80	; 0x50
 800319e:	4620      	mov	r0, r4
 80031a0:	f005 fa64 	bl	800866c <wc_AesGcmDecrypt>
    if (ret != 0)
 80031a4:	b128      	cbz	r0, 80031b2 <aesgcm_test+0x446>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80031a6:	4240      	negs	r0, r0
 80031a8:	4991      	ldr	r1, [pc, #580]	; (80033f0 <aesgcm_test+0x684>)
 80031aa:	4e95      	ldr	r6, [pc, #596]	; (8003400 <aesgcm_test+0x694>)
 80031ac:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80031b0:	e60b      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(p3, resultP, sizeof(p3)))
 80031b2:	4632      	mov	r2, r6
 80031b4:	488d      	ldr	r0, [pc, #564]	; (80033ec <aesgcm_test+0x680>)
 80031b6:	a914      	add	r1, sp, #80	; 0x50
 80031b8:	f017 ff02 	bl	801afc0 <memcmp>
 80031bc:	4606      	mov	r6, r0
 80031be:	2800      	cmp	r0, #0
 80031c0:	f040 814e 	bne.w	8003460 <aesgcm_test+0x6f4>
    XMEMSET(resultT, 0, sizeof(resultT));
 80031c4:	4601      	mov	r1, r0
 80031c6:	2220      	movs	r2, #32
 80031c8:	4648      	mov	r0, r9
 80031ca:	f017 ff31 	bl	801b030 <memset>
    XMEMSET(resultC, 0, sizeof(resultC));
 80031ce:	4631      	mov	r1, r6
 80031d0:	224c      	movs	r2, #76	; 0x4c
 80031d2:	a827      	add	r0, sp, #156	; 0x9c
 80031d4:	f017 ff2c 	bl	801b030 <memset>
    XMEMSET(resultP, 0, sizeof(resultP));
 80031d8:	4631      	mov	r1, r6
 80031da:	224c      	movs	r2, #76	; 0x4c
 80031dc:	a814      	add	r0, sp, #80	; 0x50
 80031de:	f017 ff27 	bl	801b030 <memset>
    wc_AesGcmSetKey(enc, k1, k1Sz);
 80031e2:	4988      	ldr	r1, [pc, #544]	; (8003404 <aesgcm_test+0x698>)
    ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), iv1, sizeof(iv1),
 80031e4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8003408 <aesgcm_test+0x69c>
    wc_AesGcmSetKey(enc, k1, k1Sz);
 80031e8:	2220      	movs	r2, #32
 80031ea:	4620      	mov	r0, r4
 80031ec:	f005 f8e6 	bl	80083bc <wc_AesGcmSetKey>
    ret = wc_AesGcmEncrypt(enc, resultC, p, sizeof(p), iv1, sizeof(iv1),
 80031f0:	f04f 0b14 	mov.w	fp, #20
 80031f4:	4b85      	ldr	r3, [pc, #532]	; (800340c <aesgcm_test+0x6a0>)
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	f04f 0a0f 	mov.w	sl, #15
 80031fc:	f10d 0631 	add.w	r6, sp, #49	; 0x31
 8003200:	270c      	movs	r7, #12
 8003202:	4a76      	ldr	r2, [pc, #472]	; (80033dc <aesgcm_test+0x670>)
 8003204:	f8cd b014 	str.w	fp, [sp, #20]
 8003208:	f8cd 8010 	str.w	r8, [sp, #16]
 800320c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003210:	9602      	str	r6, [sp, #8]
 8003212:	9701      	str	r7, [sp, #4]
 8003214:	233c      	movs	r3, #60	; 0x3c
 8003216:	a927      	add	r1, sp, #156	; 0x9c
 8003218:	4620      	mov	r0, r4
 800321a:	f005 f99f 	bl	800855c <wc_AesGcmEncrypt>
    if (ret != 0)
 800321e:	b128      	cbz	r0, 800322c <aesgcm_test+0x4c0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003220:	4240      	negs	r0, r0
 8003222:	4973      	ldr	r1, [pc, #460]	; (80033f0 <aesgcm_test+0x684>)
 8003224:	4e7a      	ldr	r6, [pc, #488]	; (8003410 <aesgcm_test+0x6a4>)
 8003226:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800322a:	e5ce      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(c1, resultC, sizeof(c1)))
 800322c:	4879      	ldr	r0, [pc, #484]	; (8003414 <aesgcm_test+0x6a8>)
 800322e:	223c      	movs	r2, #60	; 0x3c
 8003230:	a927      	add	r1, sp, #156	; 0x9c
 8003232:	f017 fec5 	bl	801afc0 <memcmp>
 8003236:	2800      	cmp	r0, #0
 8003238:	f040 8114 	bne.w	8003464 <aesgcm_test+0x6f8>
    if (XMEMCMP(t1, resultT + 1, sizeof(t1) - 1))
 800323c:	4876      	ldr	r0, [pc, #472]	; (8003418 <aesgcm_test+0x6ac>)
 800323e:	4652      	mov	r2, sl
 8003240:	4631      	mov	r1, r6
 8003242:	f017 febd 	bl	801afc0 <memcmp>
 8003246:	2800      	cmp	r0, #0
 8003248:	f040 810e 	bne.w	8003468 <aesgcm_test+0x6fc>
    ret = wc_AesGcmDecrypt(enc, resultP, resultC, sizeof(p),
 800324c:	4b6f      	ldr	r3, [pc, #444]	; (800340c <aesgcm_test+0x6a0>)
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	e9cd 8b04 	strd	r8, fp, [sp, #16]
 8003254:	e9cd 6a02 	strd	r6, sl, [sp, #8]
 8003258:	9701      	str	r7, [sp, #4]
 800325a:	233c      	movs	r3, #60	; 0x3c
 800325c:	aa27      	add	r2, sp, #156	; 0x9c
 800325e:	a914      	add	r1, sp, #80	; 0x50
 8003260:	4620      	mov	r0, r4
 8003262:	f005 fa03 	bl	800866c <wc_AesGcmDecrypt>
    if (ret != 0)
 8003266:	b128      	cbz	r0, 8003274 <aesgcm_test+0x508>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003268:	4240      	negs	r0, r0
 800326a:	4961      	ldr	r1, [pc, #388]	; (80033f0 <aesgcm_test+0x684>)
 800326c:	4e6b      	ldr	r6, [pc, #428]	; (800341c <aesgcm_test+0x6b0>)
 800326e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003272:	e5aa      	b.n	8002dca <aesgcm_test+0x5e>
    if (XMEMCMP(p, resultP, sizeof(p)))
 8003274:	a914      	add	r1, sp, #80	; 0x50
 8003276:	4859      	ldr	r0, [pc, #356]	; (80033dc <aesgcm_test+0x670>)
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	f017 fea1 	bl	801afc0 <memcmp>
 800327e:	4601      	mov	r1, r0
 8003280:	2800      	cmp	r0, #0
 8003282:	f040 80f3 	bne.w	800346c <aesgcm_test+0x700>
        ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
 8003286:	f06f 0201 	mvn.w	r2, #1
 800328a:	a807      	add	r0, sp, #28
 800328c:	f009 f9ff 	bl	800c68e <wc_InitRng_ex>
        if (ret != 0)
 8003290:	4682      	mov	sl, r0
 8003292:	b198      	cbz	r0, 80032bc <aesgcm_test+0x550>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003294:	4246      	negs	r6, r0
 8003296:	4856      	ldr	r0, [pc, #344]	; (80033f0 <aesgcm_test+0x684>)
 8003298:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800329c:	4346      	muls	r6, r0
 800329e:	f106 4660 	add.w	r6, r6, #3758096384	; 0xe0000000
 80032a2:	f5a6 5643 	sub.w	r6, r6, #12480	; 0x30c0
        XFREE(enc, HEAP_HINT, DYNAMIC_TYPE_AES);
 80032a6:	4620      	mov	r0, r4
 80032a8:	f017 fe82 	bl	801afb0 <free>
    if (dec)
 80032ac:	b115      	cbz	r5, 80032b4 <aesgcm_test+0x548>
        XFREE(dec, HEAP_HINT, DYNAMIC_TYPE_AES);
 80032ae:	4628      	mov	r0, r5
 80032b0:	f017 fe7e 	bl	801afb0 <free>
}
 80032b4:	4630      	mov	r0, r6
 80032b6:	b03b      	add	sp, #236	; 0xec
 80032b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        XMEMSET(randIV, 0, sizeof(randIV));
 80032bc:	ae09      	add	r6, sp, #36	; 0x24
 80032be:	4601      	mov	r1, r0
 80032c0:	463a      	mov	r2, r7
 80032c2:	4630      	mov	r0, r6
 80032c4:	f017 feb4 	bl	801b030 <memset>
        XMEMSET(resultT, 0, sizeof(resultT));
 80032c8:	2220      	movs	r2, #32
 80032ca:	4651      	mov	r1, sl
 80032cc:	4648      	mov	r0, r9
 80032ce:	f017 feaf 	bl	801b030 <memset>
        XMEMSET(resultC, 0, sizeof(resultC));
 80032d2:	224c      	movs	r2, #76	; 0x4c
 80032d4:	4651      	mov	r1, sl
 80032d6:	a827      	add	r0, sp, #156	; 0x9c
 80032d8:	f017 feaa 	bl	801b030 <memset>
        XMEMSET(resultP, 0, sizeof(resultP));
 80032dc:	224c      	movs	r2, #76	; 0x4c
 80032de:	4651      	mov	r1, sl
 80032e0:	a814      	add	r0, sp, #80	; 0x50
 80032e2:	f017 fea5 	bl	801b030 <memset>
        wc_AesGcmSetKey(enc, k1, k1Sz);
 80032e6:	4947      	ldr	r1, [pc, #284]	; (8003404 <aesgcm_test+0x698>)
 80032e8:	2220      	movs	r2, #32
 80032ea:	4620      	mov	r0, r4
 80032ec:	f005 f866 	bl	80083bc <wc_AesGcmSetKey>
        ret = wc_AesGcmSetIV(enc, sizeof(randIV), NULL, 0, &rng);
 80032f0:	ab07      	add	r3, sp, #28
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4652      	mov	r2, sl
 80032f6:	4653      	mov	r3, sl
 80032f8:	4639      	mov	r1, r7
 80032fa:	4620      	mov	r0, r4
 80032fc:	f005 fa50 	bl	80087a0 <wc_AesGcmSetIV>
        if (ret != 0)
 8003300:	b128      	cbz	r0, 800330e <aesgcm_test+0x5a2>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003302:	4240      	negs	r0, r0
 8003304:	493a      	ldr	r1, [pc, #232]	; (80033f0 <aesgcm_test+0x684>)
 8003306:	4e46      	ldr	r6, [pc, #280]	; (8003420 <aesgcm_test+0x6b4>)
 8003308:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800330c:	e55d      	b.n	8002dca <aesgcm_test+0x5e>
        ret = wc_AesGcmEncrypt_ex(enc,
 800330e:	2314      	movs	r3, #20
 8003310:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8003314:	2310      	movs	r3, #16
 8003316:	9303      	str	r3, [sp, #12]
 8003318:	af0c      	add	r7, sp, #48	; 0x30
 800331a:	230c      	movs	r3, #12
 800331c:	e9cd 6300 	strd	r6, r3, [sp]
 8003320:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <aesgcm_test+0x670>)
 8003322:	9702      	str	r7, [sp, #8]
 8003324:	233c      	movs	r3, #60	; 0x3c
 8003326:	a927      	add	r1, sp, #156	; 0x9c
 8003328:	4620      	mov	r0, r4
 800332a:	f005 fa69 	bl	8008800 <wc_AesGcmEncrypt_ex>
        if (ret != 0)
 800332e:	b128      	cbz	r0, 800333c <aesgcm_test+0x5d0>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003330:	4240      	negs	r0, r0
 8003332:	492f      	ldr	r1, [pc, #188]	; (80033f0 <aesgcm_test+0x684>)
 8003334:	4e3b      	ldr	r6, [pc, #236]	; (8003424 <aesgcm_test+0x6b8>)
 8003336:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800333a:	e546      	b.n	8002dca <aesgcm_test+0x5e>
 800333c:	4633      	mov	r3, r6
            for (i = 0; i < sizeof(randIV); i++)
 800333e:	4681      	mov	r9, r0
                ivSum += randIV[i];
 8003340:	f813 2b01 	ldrb.w	r2, [r3], #1
            for (i = 0; i < sizeof(randIV); i++)
 8003344:	f109 0901 	add.w	r9, r9, #1
 8003348:	f1b9 0f0c 	cmp.w	r9, #12
                ivSum += randIV[i];
 800334c:	4410      	add	r0, r2
            for (i = 0; i < sizeof(randIV); i++)
 800334e:	d1f7      	bne.n	8003340 <aesgcm_test+0x5d4>
            if (ivSum == 0)
 8003350:	2800      	cmp	r0, #0
 8003352:	d039      	beq.n	80033c8 <aesgcm_test+0x65c>
        wc_AesGcmSetKey(dec, k1, k1Sz);
 8003354:	492b      	ldr	r1, [pc, #172]	; (8003404 <aesgcm_test+0x698>)
 8003356:	2220      	movs	r2, #32
 8003358:	4628      	mov	r0, r5
 800335a:	f005 f82f 	bl	80083bc <wc_AesGcmSetKey>
        ret = wc_AesGcmSetIV(dec, sizeof(randIV), NULL, 0, &rng);
 800335e:	ab07      	add	r3, sp, #28
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	461a      	mov	r2, r3
 8003366:	4649      	mov	r1, r9
 8003368:	4628      	mov	r0, r5
 800336a:	f005 fa19 	bl	80087a0 <wc_AesGcmSetIV>
        if (ret != 0)
 800336e:	b128      	cbz	r0, 800337c <aesgcm_test+0x610>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003370:	4240      	negs	r0, r0
 8003372:	491f      	ldr	r1, [pc, #124]	; (80033f0 <aesgcm_test+0x684>)
 8003374:	4e2c      	ldr	r6, [pc, #176]	; (8003428 <aesgcm_test+0x6bc>)
 8003376:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800337a:	e526      	b.n	8002dca <aesgcm_test+0x5e>
        ret = wc_AesGcmDecrypt(dec,
 800337c:	2314      	movs	r3, #20
 800337e:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8003382:	2310      	movs	r3, #16
 8003384:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8003388:	e9cd 6900 	strd	r6, r9, [sp]
 800338c:	233c      	movs	r3, #60	; 0x3c
 800338e:	aa27      	add	r2, sp, #156	; 0x9c
 8003390:	a914      	add	r1, sp, #80	; 0x50
 8003392:	4628      	mov	r0, r5
 8003394:	f005 f96a 	bl	800866c <wc_AesGcmDecrypt>
        if (ret != 0)
 8003398:	b128      	cbz	r0, 80033a6 <aesgcm_test+0x63a>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800339a:	4240      	negs	r0, r0
 800339c:	4914      	ldr	r1, [pc, #80]	; (80033f0 <aesgcm_test+0x684>)
 800339e:	4e23      	ldr	r6, [pc, #140]	; (800342c <aesgcm_test+0x6c0>)
 80033a0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80033a4:	e511      	b.n	8002dca <aesgcm_test+0x5e>
        if (XMEMCMP(p, resultP, sizeof(p)))
 80033a6:	480d      	ldr	r0, [pc, #52]	; (80033dc <aesgcm_test+0x670>)
 80033a8:	223c      	movs	r2, #60	; 0x3c
 80033aa:	a914      	add	r1, sp, #80	; 0x50
 80033ac:	f017 fe08 	bl	801afc0 <memcmp>
 80033b0:	4606      	mov	r6, r0
 80033b2:	b958      	cbnz	r0, 80033cc <aesgcm_test+0x660>
        wc_FreeRng(&rng);
 80033b4:	a807      	add	r0, sp, #28
 80033b6:	f009 f989 	bl	800c6cc <wc_FreeRng>
    wc_AesFree(enc);
 80033ba:	4620      	mov	r0, r4
 80033bc:	f005 fb49 	bl	8008a52 <wc_AesFree>
    wc_AesFree(dec);
 80033c0:	4628      	mov	r0, r5
 80033c2:	f005 fb46 	bl	8008a52 <wc_AesFree>
    ret = 0;
 80033c6:	e76e      	b.n	80032a6 <aesgcm_test+0x53a>
                ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 80033c8:	4e19      	ldr	r6, [pc, #100]	; (8003430 <aesgcm_test+0x6c4>)
 80033ca:	e76c      	b.n	80032a6 <aesgcm_test+0x53a>
            ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 80033cc:	4e19      	ldr	r6, [pc, #100]	; (8003434 <aesgcm_test+0x6c8>)
 80033ce:	e76a      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80033d0:	4e19      	ldr	r6, [pc, #100]	; (8003438 <aesgcm_test+0x6cc>)
    return ret;
 80033d2:	e76f      	b.n	80032b4 <aesgcm_test+0x548>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, out);
 80033d4:	4e19      	ldr	r6, [pc, #100]	; (800343c <aesgcm_test+0x6d0>)
 80033d6:	e766      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 80033d8:	4e19      	ldr	r6, [pc, #100]	; (8003440 <aesgcm_test+0x6d4>)
 80033da:	e764      	b.n	80032a6 <aesgcm_test+0x53a>
 80033dc:	0801f6b8 	.word	0x0801f6b8
 80033e0:	0801ee58 	.word	0x0801ee58
 80033e4:	0801f1b7 	.word	0x0801f1b7
 80033e8:	0801f146 	.word	0x0801f146
 80033ec:	0801f6f4 	.word	0x0801f6f4
 80033f0:	fffe7960 	.word	0xfffe7960
 80033f4:	dfffcf85 	.word	0xdfffcf85
 80033f8:	0801ef20 	.word	0x0801ef20
 80033fc:	0801fc38 	.word	0x0801fc38
 8003400:	dfffcf76 	.word	0xdfffcf76
 8003404:	0801f16f 	.word	0x0801f16f
 8003408:	0801ee24 	.word	0x0801ee24
 800340c:	0801f0e2 	.word	0x0801f0e2
 8003410:	dfffcf5f 	.word	0xdfffcf5f
 8003414:	0801eea8 	.word	0x0801eea8
 8003418:	0801fc09 	.word	0x0801fc09
 800341c:	dfffcf51 	.word	0xdfffcf51
 8003420:	dfffcf36 	.word	0xdfffcf36
 8003424:	dfffcf2b 	.word	0xdfffcf2b
 8003428:	dfffcf1b 	.word	0xdfffcf1b
 800342c:	dfffcf10 	.word	0xdfffcf10
 8003430:	ffffcf22 	.word	0xffffcf22
 8003434:	ffffcf0e 	.word	0xffffcf0e
 8003438:	ffffd096 	.word	0xffffd096
 800343c:	ffffd094 	.word	0xffffd094
 8003440:	ffffd077 	.word	0xffffd077
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003444:	4e0a      	ldr	r6, [pc, #40]	; (8003470 <aesgcm_test+0x704>)
 8003446:	e72e      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003448:	4e0a      	ldr	r6, [pc, #40]	; (8003474 <aesgcm_test+0x708>)
 800344a:	e72c      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800344c:	4e0a      	ldr	r6, [pc, #40]	; (8003478 <aesgcm_test+0x70c>)
 800344e:	e72a      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003450:	4e0a      	ldr	r6, [pc, #40]	; (800347c <aesgcm_test+0x710>)
 8003452:	e728      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003454:	4e0a      	ldr	r6, [pc, #40]	; (8003480 <aesgcm_test+0x714>)
 8003456:	e726      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003458:	4e0a      	ldr	r6, [pc, #40]	; (8003484 <aesgcm_test+0x718>)
 800345a:	e724      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800345c:	4e0a      	ldr	r6, [pc, #40]	; (8003488 <aesgcm_test+0x71c>)
 800345e:	e722      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003460:	4e0a      	ldr	r6, [pc, #40]	; (800348c <aesgcm_test+0x720>)
 8003462:	e720      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003464:	4e0a      	ldr	r6, [pc, #40]	; (8003490 <aesgcm_test+0x724>)
 8003466:	e71e      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 8003468:	4e0a      	ldr	r6, [pc, #40]	; (8003494 <aesgcm_test+0x728>)
 800346a:	e71c      	b.n	80032a6 <aesgcm_test+0x53a>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800346c:	4e0a      	ldr	r6, [pc, #40]	; (8003498 <aesgcm_test+0x72c>)
 800346e:	e71a      	b.n	80032a6 <aesgcm_test+0x53a>
 8003470:	ffffd075 	.word	0xffffd075
 8003474:	ffffd065 	.word	0xffffd065
 8003478:	ffffcfa2 	.word	0xffffcfa2
 800347c:	ffffcfa0 	.word	0xffffcfa0
 8003480:	ffffcf95 	.word	0xffffcf95
 8003484:	ffffcf82 	.word	0xffffcf82
 8003488:	ffffcf80 	.word	0xffffcf80
 800348c:	ffffcf74 	.word	0xffffcf74
 8003490:	ffffcf5c 	.word	0xffffcf5c
 8003494:	ffffcf5a 	.word	0xffffcf5a
 8003498:	ffffcf4f 	.word	0xffffcf4f

0800349c <gmac_test>:
{
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((gmac = (Gmac *)XMALLOC(sizeof *gmac, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 80034a0:	f44f 709c 	mov.w	r0, #312	; 0x138
{
 80034a4:	b091      	sub	sp, #68	; 0x44
    if ((gmac = (Gmac *)XMALLOC(sizeof *gmac, HEAP_HINT, DYNAMIC_TYPE_AES)) == NULL)
 80034a6:	f017 fd7b 	bl	801afa0 <malloc>
 80034aa:	4605      	mov	r5, r0
 80034ac:	2800      	cmp	r0, #0
 80034ae:	f000 80d8 	beq.w	8003662 <gmac_test+0x1c6>
    XMEMSET(gmac, 0, sizeof *gmac); /* clear context */
 80034b2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80034b6:	2100      	movs	r1, #0
 80034b8:	f017 fdba 	bl	801b030 <memset>
    XMEMSET(tag, 0, sizeof(tag));
 80034bc:	ae0c      	add	r6, sp, #48	; 0x30
    (void)wc_AesInit(&gmac->aes, HEAP_HINT, INVALID_DEVID); /* Make sure devId updated */
 80034be:	f06f 0201 	mvn.w	r2, #1
 80034c2:	2100      	movs	r1, #0
 80034c4:	4628      	mov	r0, r5
 80034c6:	f005 fabc 	bl	8008a42 <wc_AesInit>
    wc_GmacUpdate(gmac, iv1, sizeof(iv1), a1, sizeof(a1), tag, sizeof(t1));
 80034ca:	4f67      	ldr	r7, [pc, #412]	; (8003668 <gmac_test+0x1cc>)
    if (XMEMCMP(t1, tag, sizeof(t1)) != 0)
 80034cc:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800366c <gmac_test+0x1d0>
    XMEMSET(tag, 0, sizeof(tag));
 80034d0:	2210      	movs	r2, #16
 80034d2:	2100      	movs	r1, #0
 80034d4:	4630      	mov	r0, r6
 80034d6:	f017 fdab 	bl	801b030 <memset>
    wc_GmacUpdate(gmac, iv1, sizeof(iv1), a1, sizeof(a1), tag, sizeof(t1));
 80034da:	2410      	movs	r4, #16
    wc_GmacSetKey(gmac, k1, sizeof(k1));
 80034dc:	4964      	ldr	r1, [pc, #400]	; (8003670 <gmac_test+0x1d4>)
 80034de:	2210      	movs	r2, #16
 80034e0:	4628      	mov	r0, r5
 80034e2:	f005 fa91 	bl	8008a08 <wc_GmacSetKey>
    wc_GmacUpdate(gmac, iv1, sizeof(iv1), a1, sizeof(a1), tag, sizeof(t1));
 80034e6:	4963      	ldr	r1, [pc, #396]	; (8003674 <gmac_test+0x1d8>)
 80034e8:	9400      	str	r4, [sp, #0]
 80034ea:	463b      	mov	r3, r7
 80034ec:	220c      	movs	r2, #12
 80034ee:	e9cd 6401 	strd	r6, r4, [sp, #4]
 80034f2:	4628      	mov	r0, r5
 80034f4:	f005 fa8f 	bl	8008a16 <wc_GmacUpdate>
    if (XMEMCMP(t1, tag, sizeof(t1)) != 0)
 80034f8:	4631      	mov	r1, r6
 80034fa:	4622      	mov	r2, r4
 80034fc:	4658      	mov	r0, fp
 80034fe:	f017 fd5f 	bl	801afc0 <memcmp>
 8003502:	4601      	mov	r1, r0
 8003504:	2800      	cmp	r0, #0
 8003506:	f040 80a8 	bne.w	800365a <gmac_test+0x1be>
    XMEMSET(tag, 0, sizeof(tag));
 800350a:	4622      	mov	r2, r4
 800350c:	4630      	mov	r0, r6
 800350e:	f017 fd8f 	bl	801b030 <memset>
    wc_GmacUpdate(gmac, iv2, sizeof(iv2), a2, sizeof(a2), tag, sizeof(t2));
 8003512:	f04f 090f 	mov.w	r9, #15
    wc_GmacSetKey(gmac, k2, sizeof(k2));
 8003516:	4958      	ldr	r1, [pc, #352]	; (8003678 <gmac_test+0x1dc>)
    if (XMEMCMP(t2, tag, sizeof(t2)) != 0)
 8003518:	f8df a160 	ldr.w	sl, [pc, #352]	; 800367c <gmac_test+0x1e0>
    wc_GmacSetKey(gmac, k2, sizeof(k2));
 800351c:	4622      	mov	r2, r4
 800351e:	4628      	mov	r0, r5
 8003520:	f005 fa72 	bl	8008a08 <wc_GmacSetKey>
    wc_GmacUpdate(gmac, iv2, sizeof(iv2), a2, sizeof(a2), tag, sizeof(t2));
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <gmac_test+0x1e4>)
 8003526:	4957      	ldr	r1, [pc, #348]	; (8003684 <gmac_test+0x1e8>)
 8003528:	9400      	str	r4, [sp, #0]
 800352a:	220c      	movs	r2, #12
 800352c:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8003530:	4628      	mov	r0, r5
 8003532:	f005 fa70 	bl	8008a16 <wc_GmacUpdate>
    if (XMEMCMP(t2, tag, sizeof(t2)) != 0)
 8003536:	4631      	mov	r1, r6
 8003538:	464a      	mov	r2, r9
 800353a:	4650      	mov	r0, sl
 800353c:	f017 fd40 	bl	801afc0 <memcmp>
 8003540:	4601      	mov	r1, r0
 8003542:	2800      	cmp	r0, #0
 8003544:	f040 808b 	bne.w	800365e <gmac_test+0x1c2>
        ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
 8003548:	f10d 081c 	add.w	r8, sp, #28
 800354c:	f06f 0201 	mvn.w	r2, #1
 8003550:	4640      	mov	r0, r8
 8003552:	f009 f89c 	bl	800c68e <wc_InitRng_ex>
        if (ret != 0)
 8003556:	b138      	cbz	r0, 8003568 <gmac_test+0xcc>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003558:	4240      	negs	r0, r0
 800355a:	494b      	ldr	r1, [pc, #300]	; (8003688 <gmac_test+0x1ec>)
 800355c:	4c4b      	ldr	r4, [pc, #300]	; (800368c <gmac_test+0x1f0>)
 800355e:	f3c0 000a 	ubfx	r0, r0, #0, #11
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003562:	fb01 4400 	mla	r4, r1, r0, r4
 8003566:	e027      	b.n	80035b8 <gmac_test+0x11c>
        ret = wc_GmacVerify(k1, sizeof(k1), iv1, sizeof(iv1), a1, sizeof(a1),
 8003568:	e9cd b402 	strd	fp, r4, [sp, #8]
 800356c:	e9cd 7400 	strd	r7, r4, [sp]
 8003570:	4a40      	ldr	r2, [pc, #256]	; (8003674 <gmac_test+0x1d8>)
 8003572:	483f      	ldr	r0, [pc, #252]	; (8003670 <gmac_test+0x1d4>)
 8003574:	230c      	movs	r3, #12
 8003576:	4621      	mov	r1, r4
 8003578:	f005 f9f8 	bl	800896c <wc_GmacVerify>
        if (ret != 0)
 800357c:	b128      	cbz	r0, 800358a <gmac_test+0xee>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800357e:	4240      	negs	r0, r0
 8003580:	4941      	ldr	r1, [pc, #260]	; (8003688 <gmac_test+0x1ec>)
 8003582:	4c43      	ldr	r4, [pc, #268]	; (8003690 <gmac_test+0x1f4>)
 8003584:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003588:	e7eb      	b.n	8003562 <gmac_test+0xc6>
        ret = wc_GmacVerify(k1, sizeof(k1), iv1, sizeof(iv1), a1, sizeof(a1),
 800358a:	4b42      	ldr	r3, [pc, #264]	; (8003694 <gmac_test+0x1f8>)
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <gmac_test+0x1d8>)
 800358e:	4838      	ldr	r0, [pc, #224]	; (8003670 <gmac_test+0x1d4>)
 8003590:	9403      	str	r4, [sp, #12]
 8003592:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003596:	9700      	str	r7, [sp, #0]
 8003598:	230c      	movs	r3, #12
 800359a:	4621      	mov	r1, r4
 800359c:	f005 f9e6 	bl	800896c <wc_GmacVerify>
        if (ret != AES_GCM_AUTH_E)
 80035a0:	f110 0fb4 	cmn.w	r0, #180	; 0xb4
 80035a4:	d012      	beq.n	80035cc <gmac_test+0x130>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80035a6:	4244      	negs	r4, r0
 80035a8:	4837      	ldr	r0, [pc, #220]	; (8003688 <gmac_test+0x1ec>)
 80035aa:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80035ae:	4344      	muls	r4, r0
 80035b0:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 80035b4:	f5a4 5448 	sub.w	r4, r4, #12800	; 0x3200
    wc_AesFree(&gmac->aes);
 80035b8:	4628      	mov	r0, r5
 80035ba:	f005 fa4a 	bl	8008a52 <wc_AesFree>
    XFREE(gmac, HEAP_HINT, DYNAMIC_TYPE_AES);
 80035be:	4628      	mov	r0, r5
 80035c0:	f017 fcf6 	bl	801afb0 <free>
}
 80035c4:	4620      	mov	r0, r4
 80035c6:	b011      	add	sp, #68	; 0x44
 80035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = wc_GmacVerify(k2, sizeof(k2), iv2, sizeof(iv2), a2, sizeof(a2),
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <gmac_test+0x1e4>)
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	e9cd a902 	strd	sl, r9, [sp, #8]
 80035d4:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <gmac_test+0x1e8>)
 80035d6:	4828      	ldr	r0, [pc, #160]	; (8003678 <gmac_test+0x1dc>)
 80035d8:	9401      	str	r4, [sp, #4]
 80035da:	230c      	movs	r3, #12
 80035dc:	4621      	mov	r1, r4
 80035de:	f005 f9c5 	bl	800896c <wc_GmacVerify>
        if (ret != 0)
 80035e2:	4681      	mov	r9, r0
 80035e4:	b128      	cbz	r0, 80035f2 <gmac_test+0x156>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 80035e6:	4240      	negs	r0, r0
 80035e8:	4927      	ldr	r1, [pc, #156]	; (8003688 <gmac_test+0x1ec>)
 80035ea:	4c2b      	ldr	r4, [pc, #172]	; (8003698 <gmac_test+0x1fc>)
 80035ec:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80035f0:	e7b7      	b.n	8003562 <gmac_test+0xc6>
        XMEMSET(tag, 0, sizeof(tag));
 80035f2:	4601      	mov	r1, r0
 80035f4:	4622      	mov	r2, r4
 80035f6:	4630      	mov	r0, r6
 80035f8:	f017 fd1a 	bl	801b030 <memset>
        XMEMSET(iv, 0, sizeof(iv));
 80035fc:	220c      	movs	r2, #12
 80035fe:	4649      	mov	r1, r9
 8003600:	a809      	add	r0, sp, #36	; 0x24
 8003602:	f017 fd15 	bl	801b030 <memset>
        ret = wc_Gmac(k1, sizeof(k1), iv, sizeof(iv), a1, sizeof(a1),
 8003606:	e9cd 4803 	strd	r4, r8, [sp, #12]
 800360a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800360e:	4818      	ldr	r0, [pc, #96]	; (8003670 <gmac_test+0x1d4>)
 8003610:	9700      	str	r7, [sp, #0]
 8003612:	230c      	movs	r3, #12
 8003614:	aa09      	add	r2, sp, #36	; 0x24
 8003616:	4621      	mov	r1, r4
 8003618:	f005 f94c 	bl	80088b4 <wc_Gmac>
        if (ret != 0)
 800361c:	b128      	cbz	r0, 800362a <gmac_test+0x18e>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 800361e:	4240      	negs	r0, r0
 8003620:	4919      	ldr	r1, [pc, #100]	; (8003688 <gmac_test+0x1ec>)
 8003622:	4c1e      	ldr	r4, [pc, #120]	; (800369c <gmac_test+0x200>)
 8003624:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003628:	e79b      	b.n	8003562 <gmac_test+0xc6>
        ret = wc_GmacVerify(k1, sizeof(k1), iv, sizeof(iv), a1, sizeof(a1),
 800362a:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800362e:	e9cd 7400 	strd	r7, r4, [sp]
 8003632:	4621      	mov	r1, r4
 8003634:	480e      	ldr	r0, [pc, #56]	; (8003670 <gmac_test+0x1d4>)
 8003636:	230c      	movs	r3, #12
 8003638:	aa09      	add	r2, sp, #36	; 0x24
 800363a:	f005 f997 	bl	800896c <wc_GmacVerify>
        if (ret != 0)
 800363e:	4604      	mov	r4, r0
 8003640:	b138      	cbz	r0, 8003652 <gmac_test+0x1b6>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), out);
 8003642:	4244      	negs	r4, r0
 8003644:	4910      	ldr	r1, [pc, #64]	; (8003688 <gmac_test+0x1ec>)
 8003646:	4816      	ldr	r0, [pc, #88]	; (80036a0 <gmac_test+0x204>)
 8003648:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800364c:	fb01 0404 	mla	r4, r1, r4, r0
 8003650:	e7b2      	b.n	80035b8 <gmac_test+0x11c>
        wc_FreeRng(&rng);
 8003652:	4640      	mov	r0, r8
 8003654:	f009 f83a 	bl	800c6cc <wc_FreeRng>
    ret = 0;
 8003658:	e7ae      	b.n	80035b8 <gmac_test+0x11c>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800365a:	4c12      	ldr	r4, [pc, #72]	; (80036a4 <gmac_test+0x208>)
 800365c:	e7ac      	b.n	80035b8 <gmac_test+0x11c>
        ERROR_OUT(WC_TEST_RET_ENC_NC, out);
 800365e:	4c12      	ldr	r4, [pc, #72]	; (80036a8 <gmac_test+0x20c>)
 8003660:	e7aa      	b.n	80035b8 <gmac_test+0x11c>
        return WC_TEST_RET_ENC_ERRNO;
 8003662:	4c12      	ldr	r4, [pc, #72]	; (80036ac <gmac_test+0x210>)
 8003664:	e7ae      	b.n	80035c4 <gmac_test+0x128>
 8003666:	bf00      	nop
 8003668:	0801ee38 	.word	0x0801ee38
 800366c:	0801fbf9 	.word	0x0801fbf9
 8003670:	0801f15f 	.word	0x0801f15f
 8003674:	0801f0d6 	.word	0x0801f0d6
 8003678:	0801f18f 	.word	0x0801f18f
 800367c:	0801fc19 	.word	0x0801fc19
 8003680:	0801ee48 	.word	0x0801ee48
 8003684:	0801f0ee 	.word	0x0801f0ee
 8003688:	fffe7960 	.word	0xfffe7960
 800368c:	dfffce0e 	.word	0xdfffce0e
 8003690:	dfffce04 	.word	0xdfffce04
 8003694:	0801ee98 	.word	0x0801ee98
 8003698:	dfffcdfc 	.word	0xdfffcdfc
 800369c:	dfffcdf5 	.word	0xdfffcdf5
 80036a0:	dfffcdf1 	.word	0xdfffcdf1
 80036a4:	ffffce27 	.word	0xffffce27
 80036a8:	ffffce1e 	.word	0xffffce1e
 80036ac:	ffffce30 	.word	0xffffce30

080036b0 <memory_test>:
{
 80036b0:	b513      	push	{r0, r1, r4, lr}
    b = (byte*)XMALLOC(sz, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 80036b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80036b6:	f017 fc73 	bl	801afa0 <malloc>
    if (b == NULL) {
 80036ba:	b318      	cbz	r0, 8003704 <memory_test+0x54>
    for (i = 0; i < sz; i++) {
 80036bc:	2300      	movs	r3, #0
        b[i] = (byte)i;
 80036be:	54c3      	strb	r3, [r0, r3]
    for (i = 0; i < sz; i++) {
 80036c0:	3301      	adds	r3, #1
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d1fa      	bne.n	80036be <memory_test+0xe>
    for (i = 0; i < sz; i++) {
 80036c8:	2300      	movs	r3, #0
        if (b[i] != (byte)i) {
 80036ca:	5cc1      	ldrb	r1, [r0, r3]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4291      	cmp	r1, r2
 80036d0:	d116      	bne.n	8003700 <memory_test+0x50>
    for (i = 0; i < sz; i++) {
 80036d2:	3301      	adds	r3, #1
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d1f7      	bne.n	80036ca <memory_test+0x1a>
    int ret = 0;
 80036da:	2400      	movs	r4, #0
    XFREE(b, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 80036dc:	f017 fc68 	bl	801afb0 <free>
    if (ret != 0)
 80036e0:	b95c      	cbnz	r4, 80036fa <memory_test+0x4a>
    volatile word32 j = -1; /* must be volatile to properly detect error */
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036e6:	9301      	str	r3, [sp, #4]
    j = *outJ; /* Found index to use in const array. */
 80036e8:	9401      	str	r4, [sp, #4]
    if (j == 0) {
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	b963      	cbnz	r3, 8003708 <memory_test+0x58>
        ret = in[j]; /* The big test: can we actually access the `in` data? */
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	4a06      	ldr	r2, [pc, #24]	; (800370c <memory_test+0x5c>)
        if (const_byte_ptr_test(const_byte_array, &j) != CBPTR_EXPECTED) {
 80036f2:	5cd4      	ldrb	r4, [r2, r3]
 80036f4:	3c41      	subs	r4, #65	; 0x41
 80036f6:	bf18      	it	ne
 80036f8:	2401      	movne	r4, #1
}
 80036fa:	4620      	mov	r0, r4
 80036fc:	b002      	add	sp, #8
 80036fe:	bd10      	pop	{r4, pc}
            ret = WC_TEST_RET_ENC_NC;
 8003700:	4c03      	ldr	r4, [pc, #12]	; (8003710 <memory_test+0x60>)
 8003702:	e7eb      	b.n	80036dc <memory_test+0x2c>
        return WC_TEST_RET_ENC_NC;
 8003704:	4c03      	ldr	r4, [pc, #12]	; (8003714 <memory_test+0x64>)
 8003706:	e7f8      	b.n	80036fa <memory_test+0x4a>
            ret = 1;
 8003708:	2401      	movs	r4, #1
 800370a:	e7f6      	b.n	80036fa <memory_test+0x4a>
 800370c:	0801ef30 	.word	0x0801ef30
 8003710:	ffffc5ce 	.word	0xffffc5ce
 8003714:	ffffc5d7 	.word	0xffffc5d7

08003718 <ecc_test>:
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	b0d1      	sub	sp, #324	; 0x144
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
 800371e:	f06f 0201 	mvn.w	r2, #1
 8003722:	2100      	movs	r1, #0
 8003724:	a80c      	add	r0, sp, #48	; 0x30
 8003726:	f008 ffb2 	bl	800c68e <wc_InitRng_ex>
    if (ret != 0)
 800372a:	4607      	mov	r7, r0
 800372c:	b150      	cbz	r0, 8003744 <ecc_test+0x2c>
        return WC_TEST_RET_ENC_EC(ret);
 800372e:	4247      	negs	r7, r0
 8003730:	f3c7 010a 	ubfx	r1, r7, #0, #11
 8003734:	48b1      	ldr	r0, [pc, #708]	; (80039fc <ecc_test+0x2e4>)
 8003736:	4fb2      	ldr	r7, [pc, #712]	; (8003a00 <ecc_test+0x2e8>)
 8003738:	fb07 0701 	mla	r7, r7, r1, r0
}
 800373c:	4638      	mov	r0, r7
 800373e:	b051      	add	sp, #324	; 0x144
 8003740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WC_DECLARE_VAR(sharedA, byte, ECC_SHARED_SIZE, HEAP_HINT);
 8003744:	2080      	movs	r0, #128	; 0x80
 8003746:	f017 fc2b 	bl	801afa0 <malloc>
 800374a:	4683      	mov	fp, r0
    WC_DECLARE_VAR(sharedB, byte, ECC_SHARED_SIZE, HEAP_HINT);
 800374c:	2080      	movs	r0, #128	; 0x80
 800374e:	f017 fc27 	bl	801afa0 <malloc>
 8003752:	4682      	mov	sl, r0
    WC_DECLARE_VAR(exportBuf, byte, ECC_KEY_EXPORT_BUF_SIZE, HEAP_HINT);
 8003754:	2060      	movs	r0, #96	; 0x60
 8003756:	f017 fc23 	bl	801afa0 <malloc>
 800375a:	9006      	str	r0, [sp, #24]
    WC_DECLARE_VAR(sig, byte, ECC_SIG_SIZE, HEAP_HINT);
 800375c:	2049      	movs	r0, #73	; 0x49
    word32  x = 0;
 800375e:	971f      	str	r7, [sp, #124]	; 0x7c
    WC_DECLARE_VAR(sig, byte, ECC_SIG_SIZE, HEAP_HINT);
 8003760:	f017 fc1e 	bl	801afa0 <malloc>
 8003764:	4681      	mov	r9, r0
    WC_DECLARE_VAR(digest, byte, ECC_DIGEST_SIZE, HEAP_HINT);
 8003766:	2020      	movs	r0, #32
 8003768:	f017 fc1a 	bl	801afa0 <malloc>
 800376c:	4606      	mov	r6, r0
    ecc_key *userA = (ecc_key *)XMALLOC(sizeof *userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800376e:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8003772:	f017 fc15 	bl	801afa0 <malloc>
 8003776:	4604      	mov	r4, r0
    ecc_key *userB = (ecc_key *)XMALLOC(sizeof *userB, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003778:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800377c:	f017 fc10 	bl	801afa0 <malloc>
 8003780:	4605      	mov	r5, r0
    ecc_key *pubKey = (ecc_key *)XMALLOC(sizeof *pubKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003782:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8003786:	f017 fc0b 	bl	801afa0 <malloc>
 800378a:	4680      	mov	r8, r0
    if (sharedA == NULL || sharedB == NULL)
 800378c:	f1bb 0f00 	cmp.w	fp, #0
 8003790:	f000 81c0 	beq.w	8003b14 <ecc_test+0x3fc>
 8003794:	f1ba 0f00 	cmp.w	sl, #0
 8003798:	f000 81bc 	beq.w	8003b14 <ecc_test+0x3fc>
    if (exportBuf == NULL)
 800379c:	9b06      	ldr	r3, [sp, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 81fd 	beq.w	8003b9e <ecc_test+0x486>
    if (sig == NULL || digest == NULL)
 80037a4:	f1b9 0f00 	cmp.w	r9, #0
 80037a8:	f000 81fb 	beq.w	8003ba2 <ecc_test+0x48a>
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	f000 81f8 	beq.w	8003ba2 <ecc_test+0x48a>
    if ((userA == NULL) ||
 80037b2:	2c00      	cmp	r4, #0
 80037b4:	f000 8203 	beq.w	8003bbe <ecc_test+0x4a6>
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	f000 81f4 	beq.w	8003ba6 <ecc_test+0x48e>
        (userB == NULL) ||
 80037be:	2800      	cmp	r0, #0
 80037c0:	f000 81f1 	beq.w	8003ba6 <ecc_test+0x48e>
    XMEMSET(userA, 0, sizeof *userA);
 80037c4:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80037c8:	4639      	mov	r1, r7
 80037ca:	4620      	mov	r0, r4
 80037cc:	f017 fc30 	bl	801b030 <memset>
    XMEMSET(userB, 0, sizeof *userB);
 80037d0:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80037d4:	4639      	mov	r1, r7
 80037d6:	4628      	mov	r0, r5
 80037d8:	f017 fc2a 	bl	801b030 <memset>
    XMEMSET(pubKey, 0, sizeof *pubKey);
 80037dc:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80037e0:	4639      	mov	r1, r7
 80037e2:	4640      	mov	r0, r8
 80037e4:	f017 fc24 	bl	801b030 <memset>
    ret = wc_ecc_init_ex(userA, HEAP_HINT, devId);
 80037e8:	f06f 0201 	mvn.w	r2, #1
 80037ec:	4639      	mov	r1, r7
 80037ee:	4620      	mov	r0, r4
 80037f0:	f006 fccc 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 80037f4:	b138      	cbz	r0, 8003806 <ecc_test+0xee>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80037f6:	4240      	negs	r0, r0
 80037f8:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <ecc_test+0x2e8>)
 80037fa:	4f82      	ldr	r7, [pc, #520]	; (8003a04 <ecc_test+0x2ec>)
 80037fc:	f3c0 000a 	ubfx	r0, r0, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003800:	fb03 7700 	mla	r7, r3, r0, r7
 8003804:	e028      	b.n	8003858 <ecc_test+0x140>
    ret = wc_ecc_init_ex(userB, HEAP_HINT, devId);
 8003806:	2100      	movs	r1, #0
 8003808:	f06f 0201 	mvn.w	r2, #1
 800380c:	4628      	mov	r0, r5
 800380e:	f006 fcbd 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8003812:	4601      	mov	r1, r0
 8003814:	b138      	cbz	r0, 8003826 <ecc_test+0x10e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003816:	4241      	negs	r1, r0
 8003818:	4f79      	ldr	r7, [pc, #484]	; (8003a00 <ecc_test+0x2e8>)
 800381a:	487b      	ldr	r0, [pc, #492]	; (8003a08 <ecc_test+0x2f0>)
 800381c:	f3c1 010a 	ubfx	r1, r1, #0, #11
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003820:	fb07 0701 	mla	r7, r7, r1, r0
 8003824:	e018      	b.n	8003858 <ecc_test+0x140>
    ret = wc_ecc_init_ex(pubKey, HEAP_HINT, devId);
 8003826:	f06f 0201 	mvn.w	r2, #1
 800382a:	4640      	mov	r0, r8
 800382c:	f006 fcae 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8003830:	4603      	mov	r3, r0
 8003832:	b138      	cbz	r0, 8003844 <ecc_test+0x12c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003834:	4243      	negs	r3, r0
 8003836:	4f72      	ldr	r7, [pc, #456]	; (8003a00 <ecc_test+0x2e8>)
 8003838:	4874      	ldr	r0, [pc, #464]	; (8003a0c <ecc_test+0x2f4>)
 800383a:	f3c3 030a 	ubfx	r3, r3, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800383e:	fb03 0707 	mla	r7, r3, r7, r0
 8003842:	e009      	b.n	8003858 <ecc_test+0x140>
    ret = wc_ecc_make_key_ex(rng, keySize, userA, curve_id);
 8003844:	4622      	mov	r2, r4
 8003846:	2120      	movs	r1, #32
 8003848:	a80c      	add	r0, sp, #48	; 0x30
 800384a:	f007 fabd 	bl	800adc8 <wc_ecc_make_key_ex>
    if (ret == ECC_CURVE_OID_E)
 800384e:	f110 0fac 	cmn.w	r0, #172	; 0xac
 8003852:	d108      	bne.n	8003866 <ecc_test+0x14e>
    ret = wc_ecc_make_key_ex(rng, keySize, userA, curve_id);
 8003854:	f06f 07ab 	mvn.w	r7, #171	; 0xab
        wc_ecc_free(userA);
 8003858:	4620      	mov	r0, r4
 800385a:	f006 fcda 	bl	800a212 <wc_ecc_free>
        XFREE(userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800385e:	4620      	mov	r0, r4
 8003860:	f017 fba6 	bl	801afb0 <free>
 8003864:	e15a      	b.n	8003b1c <ecc_test+0x404>
    if (ret != 0)
 8003866:	b128      	cbz	r0, 8003874 <ecc_test+0x15c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003868:	4247      	negs	r7, r0
 800386a:	4b65      	ldr	r3, [pc, #404]	; (8003a00 <ecc_test+0x2e8>)
 800386c:	4868      	ldr	r0, [pc, #416]	; (8003a10 <ecc_test+0x2f8>)
 800386e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003872:	e7e4      	b.n	800383e <ecc_test+0x126>
    if (wc_ecc_get_curve_idx(curve_id) != -1) {
 8003874:	f006 fbb7 	bl	8009fe6 <wc_ecc_get_curve_idx>
 8003878:	3001      	adds	r0, #1
 800387a:	d114      	bne.n	80038a6 <ecc_test+0x18e>
    ret = wc_ecc_check_key(userA);
 800387c:	4620      	mov	r0, r4
 800387e:	f008 f9ef 	bl	800bc60 <wc_ecc_check_key>
    if (ret != 0)
 8003882:	4603      	mov	r3, r0
 8003884:	b9c8      	cbnz	r0, 80038ba <ecc_test+0x1a2>
    ret = wc_ecc_make_key_ex(rng, keySize, userB, curve_id);
 8003886:	462a      	mov	r2, r5
 8003888:	2120      	movs	r1, #32
 800388a:	a80c      	add	r0, sp, #48	; 0x30
 800388c:	f007 fa9c 	bl	800adc8 <wc_ecc_make_key_ex>
    if (ret != 0)
 8003890:	b1c8      	cbz	r0, 80038c6 <ecc_test+0x1ae>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003892:	4f5b      	ldr	r7, [pc, #364]	; (8003a00 <ecc_test+0x2e8>)
 8003894:	4240      	negs	r0, r0
 8003896:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800389a:	4378      	muls	r0, r7
 800389c:	f100 4760 	add.w	r7, r0, #3758096384	; 0xe0000000
 80038a0:	f5a7 47ce 	sub.w	r7, r7, #26368	; 0x6700
 80038a4:	e7d8      	b.n	8003858 <ecc_test+0x140>
        curveSize = wc_ecc_get_curve_size_from_id(userA->dp->id);
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	6858      	ldr	r0, [r3, #4]
 80038aa:	f006 fbb1 	bl	800a010 <wc_ecc_get_curve_size_from_id>
        if (curveSize != userA->dp->size)
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4298      	cmp	r0, r3
 80038b4:	d0e2      	beq.n	800387c <ecc_test+0x164>
            ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 80038b6:	4f57      	ldr	r7, [pc, #348]	; (8003a14 <ecc_test+0x2fc>)
 80038b8:	e7ce      	b.n	8003858 <ecc_test+0x140>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80038ba:	4243      	negs	r3, r0
 80038bc:	4f50      	ldr	r7, [pc, #320]	; (8003a00 <ecc_test+0x2e8>)
 80038be:	4856      	ldr	r0, [pc, #344]	; (8003a18 <ecc_test+0x300>)
 80038c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c4:	e7bb      	b.n	800383e <ecc_test+0x126>
    if (dp == NULL && keySize > 0 && wc_ecc_size(userA) != keySize)
 80038c6:	4620      	mov	r0, r4
 80038c8:	f008 fcaa 	bl	800c220 <wc_ecc_size>
 80038cc:	2820      	cmp	r0, #32
 80038ce:	d1c1      	bne.n	8003854 <ecc_test+0x13c>
    ret = wc_ecc_set_rng(userA, rng);
 80038d0:	a90c      	add	r1, sp, #48	; 0x30
 80038d2:	4620      	mov	r0, r4
 80038d4:	f008 fcec 	bl	800c2b0 <wc_ecc_set_rng>
    if (ret != 0)
 80038d8:	b128      	cbz	r0, 80038e6 <ecc_test+0x1ce>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80038da:	4240      	negs	r0, r0
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <ecc_test+0x2e8>)
 80038de:	4f4f      	ldr	r7, [pc, #316]	; (8003a1c <ecc_test+0x304>)
 80038e0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80038e4:	e78c      	b.n	8003800 <ecc_test+0xe8>
    ret = wc_ecc_set_rng(userB, rng);
 80038e6:	a90c      	add	r1, sp, #48	; 0x30
 80038e8:	4628      	mov	r0, r5
 80038ea:	f008 fce1 	bl	800c2b0 <wc_ecc_set_rng>
    if (ret != 0)
 80038ee:	b128      	cbz	r0, 80038fc <ecc_test+0x1e4>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80038f0:	4240      	negs	r0, r0
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <ecc_test+0x2e8>)
 80038f4:	4f4a      	ldr	r7, [pc, #296]	; (8003a20 <ecc_test+0x308>)
 80038f6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80038fa:	e781      	b.n	8003800 <ecc_test+0xe8>
    x = ECC_SHARED_SIZE;
 80038fc:	2780      	movs	r7, #128	; 0x80
            ret = wc_ecc_shared_secret(userA, userB, sharedA, &x);
 80038fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8003900:	465a      	mov	r2, fp
 8003902:	4629      	mov	r1, r5
 8003904:	4620      	mov	r0, r4
    x = ECC_SHARED_SIZE;
 8003906:	971f      	str	r7, [sp, #124]	; 0x7c
            ret = wc_ecc_shared_secret(userA, userB, sharedA, &x);
 8003908:	f007 f90c 	bl	800ab24 <wc_ecc_shared_secret>
    } while (ret == WC_PENDING_E);
 800390c:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8003910:	d100      	bne.n	8003914 <ecc_test+0x1fc>
 8003912:	e7fe      	b.n	8003912 <ecc_test+0x1fa>
    if (ret != 0)
 8003914:	b128      	cbz	r0, 8003922 <ecc_test+0x20a>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003916:	4240      	negs	r0, r0
 8003918:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <ecc_test+0x2e8>)
 800391a:	4f42      	ldr	r7, [pc, #264]	; (8003a24 <ecc_test+0x30c>)
 800391c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003920:	e76e      	b.n	8003800 <ecc_test+0xe8>
            ret = wc_ecc_shared_secret(userB, userA, sharedB, &y);
 8003922:	ab0e      	add	r3, sp, #56	; 0x38
 8003924:	4652      	mov	r2, sl
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
    y = ECC_SHARED_SIZE;
 800392a:	970e      	str	r7, [sp, #56]	; 0x38
            ret = wc_ecc_shared_secret(userB, userA, sharedB, &y);
 800392c:	f007 f8fa 	bl	800ab24 <wc_ecc_shared_secret>
    } while (ret == WC_PENDING_E);
 8003930:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8003934:	d100      	bne.n	8003938 <ecc_test+0x220>
 8003936:	e7fe      	b.n	8003936 <ecc_test+0x21e>
    if (ret != 0)
 8003938:	b128      	cbz	r0, 8003946 <ecc_test+0x22e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800393a:	4240      	negs	r0, r0
 800393c:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <ecc_test+0x2e8>)
 800393e:	4f3a      	ldr	r7, [pc, #232]	; (8003a28 <ecc_test+0x310>)
 8003940:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003944:	e75c      	b.n	8003800 <ecc_test+0xe8>
    if (y != x)
 8003946:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800394a:	4293      	cmp	r3, r2
 800394c:	f040 812d 	bne.w	8003baa <ecc_test+0x492>
    if (XMEMCMP(sharedA, sharedB, x))
 8003950:	4651      	mov	r1, sl
 8003952:	4658      	mov	r0, fp
 8003954:	f017 fb34 	bl	801afc0 <memcmp>
 8003958:	4603      	mov	r3, r0
 800395a:	2800      	cmp	r0, #0
 800395c:	f040 8127 	bne.w	8003bae <ecc_test+0x496>
    x = ECC_KEY_EXPORT_BUF_SIZE;
 8003960:	2260      	movs	r2, #96	; 0x60
 8003962:	921f      	str	r2, [sp, #124]	; 0x7c
    ret = wc_ecc_export_x963_ex(userA, exportBuf, &x, 0);
 8003964:	9906      	ldr	r1, [sp, #24]
 8003966:	aa1f      	add	r2, sp, #124	; 0x7c
 8003968:	4620      	mov	r0, r4
 800396a:	f008 f973 	bl	800bc54 <wc_ecc_export_x963_ex>
    if (ret != 0)
 800396e:	4603      	mov	r3, r0
 8003970:	b128      	cbz	r0, 800397e <ecc_test+0x266>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003972:	4243      	negs	r3, r0
 8003974:	4f22      	ldr	r7, [pc, #136]	; (8003a00 <ecc_test+0x2e8>)
 8003976:	482d      	ldr	r0, [pc, #180]	; (8003a2c <ecc_test+0x314>)
 8003978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800397c:	e75f      	b.n	800383e <ecc_test+0x126>
    ret = wc_ecc_import_x963_ex(exportBuf, x, pubKey, curve_id);
 800397e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003980:	9806      	ldr	r0, [sp, #24]
 8003982:	4642      	mov	r2, r8
 8003984:	f008 fa52 	bl	800be2c <wc_ecc_import_x963_ex>
    if (ret != 0)
 8003988:	b128      	cbz	r0, 8003996 <ecc_test+0x27e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800398a:	4240      	negs	r0, r0
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <ecc_test+0x2e8>)
 800398e:	4f28      	ldr	r7, [pc, #160]	; (8003a30 <ecc_test+0x318>)
 8003990:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003994:	e734      	b.n	8003800 <ecc_test+0xe8>
    y = ECC_SHARED_SIZE;
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	930e      	str	r3, [sp, #56]	; 0x38
            ret = wc_ecc_shared_secret(userB, pubKey, sharedB, &y);
 800399a:	4652      	mov	r2, sl
 800399c:	ab0e      	add	r3, sp, #56	; 0x38
 800399e:	4641      	mov	r1, r8
 80039a0:	4628      	mov	r0, r5
 80039a2:	f007 f8bf 	bl	800ab24 <wc_ecc_shared_secret>
    } while (ret == WC_PENDING_E);
 80039a6:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 80039aa:	d100      	bne.n	80039ae <ecc_test+0x296>
 80039ac:	e7fe      	b.n	80039ac <ecc_test+0x294>
    if (ret != 0)
 80039ae:	b128      	cbz	r0, 80039bc <ecc_test+0x2a4>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80039b0:	4240      	negs	r0, r0
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <ecc_test+0x2e8>)
 80039b4:	4f1f      	ldr	r7, [pc, #124]	; (8003a34 <ecc_test+0x31c>)
 80039b6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80039ba:	e721      	b.n	8003800 <ecc_test+0xe8>
    if (XMEMCMP(sharedA, sharedB, y))
 80039bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039be:	4651      	mov	r1, sl
 80039c0:	4658      	mov	r0, fp
 80039c2:	f017 fafd 	bl	801afc0 <memcmp>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	f040 80f3 	bne.w	8003bb2 <ecc_test+0x49a>
 80039cc:	1e73      	subs	r3, r6, #1
 80039ce:	f106 021f 	add.w	r2, r6, #31
        digest[i] = 0;
 80039d2:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (i = 0; i < (int)ECC_DIGEST_SIZE; i++) {
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d1fb      	bne.n	80039d2 <ecc_test+0x2ba>
    x = ECC_SIG_SIZE;
 80039da:	2349      	movs	r3, #73	; 0x49
 80039dc:	931f      	str	r3, [sp, #124]	; 0x7c
            ret = wc_ecc_sign_hash(digest, ECC_DIGEST_SIZE, sig, &x, rng,
 80039de:	ab0c      	add	r3, sp, #48	; 0x30
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	9401      	str	r4, [sp, #4]
 80039e4:	ab1f      	add	r3, sp, #124	; 0x7c
 80039e6:	464a      	mov	r2, r9
 80039e8:	2120      	movs	r1, #32
 80039ea:	4630      	mov	r0, r6
 80039ec:	f007 fb52 	bl	800b094 <wc_ecc_sign_hash>
    } while (ret == WC_PENDING_E);
 80039f0:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
            ret = wc_ecc_sign_hash(digest, ECC_DIGEST_SIZE, sig, &x, rng,
 80039f4:	4607      	mov	r7, r0
    } while (ret == WC_PENDING_E);
 80039f6:	d11f      	bne.n	8003a38 <ecc_test+0x320>
 80039f8:	e7fe      	b.n	80039f8 <ecc_test+0x2e0>
 80039fa:	bf00      	nop
 80039fc:	dfff8e9d 	.word	0xdfff8e9d
 8003a00:	fffe7960 	.word	0xfffe7960
 8003a04:	dfff9937 	.word	0xdfff9937
 8003a08:	dfff9934 	.word	0xdfff9934
 8003a0c:	dfff9931 	.word	0xdfff9931
 8003a10:	dfff9916 	.word	0xdfff9916
 8003a14:	ffff9910 	.word	0xffff9910
 8003a18:	dfff990b 	.word	0xdfff990b
 8003a1c:	dfff98f3 	.word	0xdfff98f3
 8003a20:	dfff98f0 	.word	0xdfff98f0
 8003a24:	dfff98e4 	.word	0xdfff98e4
 8003a28:	dfff98d8 	.word	0xdfff98d8
 8003a2c:	dfff98a1 	.word	0xdfff98a1
 8003a30:	dfff9895 	.word	0xdfff9895
 8003a34:	dfff9888 	.word	0xdfff9888
    if (ret != 0)
 8003a38:	b128      	cbz	r0, 8003a46 <ecc_test+0x32e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003a3a:	4240      	negs	r0, r0
 8003a3c:	4ba6      	ldr	r3, [pc, #664]	; (8003cd8 <ecc_test+0x5c0>)
 8003a3e:	4fa7      	ldr	r7, [pc, #668]	; (8003cdc <ecc_test+0x5c4>)
 8003a40:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003a44:	e6dc      	b.n	8003800 <ecc_test+0xe8>
 8003a46:	2302      	movs	r3, #2
 8003a48:	9307      	str	r3, [sp, #28]
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE,
 8003a4a:	ab30      	add	r3, sp, #192	; 0xc0
 8003a4c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	9401      	str	r4, [sp, #4]
 8003a52:	2320      	movs	r3, #32
 8003a54:	4632      	mov	r2, r6
 8003a56:	4648      	mov	r0, r9
        verify = 0;
 8003a58:	9730      	str	r7, [sp, #192]	; 0xc0
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE,
 8003a5a:	f007 ff05 	bl	800b868 <wc_ecc_verify_hash>
        } while (ret == WC_PENDING_E);
 8003a5e:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE,
 8003a62:	4601      	mov	r1, r0
        } while (ret == WC_PENDING_E);
 8003a64:	d100      	bne.n	8003a68 <ecc_test+0x350>
 8003a66:	e7fe      	b.n	8003a66 <ecc_test+0x34e>
        if (ret != 0)
 8003a68:	b128      	cbz	r0, 8003a76 <ecc_test+0x35e>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003a6a:	4241      	negs	r1, r0
 8003a6c:	4f9a      	ldr	r7, [pc, #616]	; (8003cd8 <ecc_test+0x5c0>)
 8003a6e:	489c      	ldr	r0, [pc, #624]	; (8003ce0 <ecc_test+0x5c8>)
 8003a70:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8003a74:	e6d4      	b.n	8003820 <ecc_test+0x108>
        if (verify != 1)
 8003a76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	f040 809c 	bne.w	8003bb6 <ecc_test+0x49e>
    for (i=0; i<testVerifyCount; i++) {
 8003a7e:	9a07      	ldr	r2, [sp, #28]
 8003a80:	2a01      	cmp	r2, #1
 8003a82:	d1e1      	bne.n	8003a48 <ecc_test+0x330>
        digest[i] = (byte)i;
 8003a84:	5471      	strb	r1, [r6, r1]
    for (i = 0; i < (int)ECC_DIGEST_SIZE; i++) {
 8003a86:	3101      	adds	r1, #1
 8003a88:	2920      	cmp	r1, #32
 8003a8a:	d1fb      	bne.n	8003a84 <ecc_test+0x36c>
    x = ECC_SIG_SIZE;
 8003a8c:	2349      	movs	r3, #73	; 0x49
 8003a8e:	931f      	str	r3, [sp, #124]	; 0x7c
            ret = wc_ecc_sign_hash(digest, ECC_DIGEST_SIZE, sig, &x, rng, userA);
 8003a90:	ab0c      	add	r3, sp, #48	; 0x30
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	9401      	str	r4, [sp, #4]
 8003a96:	ab1f      	add	r3, sp, #124	; 0x7c
 8003a98:	464a      	mov	r2, r9
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f007 fafa 	bl	800b094 <wc_ecc_sign_hash>
    } while (ret == WC_PENDING_E);
 8003aa0:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
            ret = wc_ecc_sign_hash(digest, ECC_DIGEST_SIZE, sig, &x, rng, userA);
 8003aa4:	4607      	mov	r7, r0
    } while (ret == WC_PENDING_E);
 8003aa6:	d100      	bne.n	8003aaa <ecc_test+0x392>
 8003aa8:	e7fe      	b.n	8003aa8 <ecc_test+0x390>
    if (ret != 0)
 8003aaa:	b128      	cbz	r0, 8003ab8 <ecc_test+0x3a0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003aac:	4247      	negs	r7, r0
 8003aae:	4b8a      	ldr	r3, [pc, #552]	; (8003cd8 <ecc_test+0x5c0>)
 8003ab0:	488c      	ldr	r0, [pc, #560]	; (8003ce4 <ecc_test+0x5cc>)
 8003ab2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003ab6:	e6c2      	b.n	800383e <ecc_test+0x126>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	9307      	str	r3, [sp, #28]
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE, &verify, userA);
 8003abc:	ab30      	add	r3, sp, #192	; 0xc0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8003ac2:	9401      	str	r4, [sp, #4]
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	4632      	mov	r2, r6
 8003ac8:	4648      	mov	r0, r9
        verify = 0;
 8003aca:	9730      	str	r7, [sp, #192]	; 0xc0
                ret = wc_ecc_verify_hash(sig, x, digest, ECC_DIGEST_SIZE, &verify, userA);
 8003acc:	f007 fecc 	bl	800b868 <wc_ecc_verify_hash>
        } while (ret == WC_PENDING_E);
 8003ad0:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8003ad4:	d100      	bne.n	8003ad8 <ecc_test+0x3c0>
 8003ad6:	e7fe      	b.n	8003ad6 <ecc_test+0x3be>
        if (ret != 0)
 8003ad8:	b128      	cbz	r0, 8003ae6 <ecc_test+0x3ce>
            ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003ada:	4240      	negs	r0, r0
 8003adc:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <ecc_test+0x5c0>)
 8003ade:	4f82      	ldr	r7, [pc, #520]	; (8003ce8 <ecc_test+0x5d0>)
 8003ae0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003ae4:	e68c      	b.n	8003800 <ecc_test+0xe8>
        if (verify != 1)
 8003ae6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d166      	bne.n	8003bba <ecc_test+0x4a2>
    for (i=0; i<testVerifyCount; i++) {
 8003aec:	9a07      	ldr	r2, [sp, #28]
 8003aee:	2a01      	cmp	r2, #1
 8003af0:	d1e3      	bne.n	8003aba <ecc_test+0x3a2>
    x = ECC_KEY_EXPORT_BUF_SIZE;
 8003af2:	2360      	movs	r3, #96	; 0x60
    ret = wc_ecc_export_private_only(userA, exportBuf, &x);
 8003af4:	9906      	ldr	r1, [sp, #24]
    x = ECC_KEY_EXPORT_BUF_SIZE;
 8003af6:	931f      	str	r3, [sp, #124]	; 0x7c
    ret = wc_ecc_export_private_only(userA, exportBuf, &x);
 8003af8:	aa1f      	add	r2, sp, #124	; 0x7c
 8003afa:	4620      	mov	r0, r4
 8003afc:	f008 fa5a 	bl	800bfb4 <wc_ecc_export_private_only>
    if (ret != 0)
 8003b00:	4607      	mov	r7, r0
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f43f aea8 	beq.w	8003858 <ecc_test+0x140>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003b08:	4240      	negs	r0, r0
 8003b0a:	4b73      	ldr	r3, [pc, #460]	; (8003cd8 <ecc_test+0x5c0>)
 8003b0c:	4f77      	ldr	r7, [pc, #476]	; (8003cec <ecc_test+0x5d4>)
 8003b0e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003b12:	e675      	b.n	8003800 <ecc_test+0xe8>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, done);
 8003b14:	4f76      	ldr	r7, [pc, #472]	; (8003cf0 <ecc_test+0x5d8>)
    if (userA != NULL) {
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	f47f ae9e 	bne.w	8003858 <ecc_test+0x140>
    if (userB != NULL) {
 8003b1c:	b12d      	cbz	r5, 8003b2a <ecc_test+0x412>
        wc_ecc_free(userB);
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f006 fb77 	bl	800a212 <wc_ecc_free>
        XFREE(userB, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003b24:	4628      	mov	r0, r5
 8003b26:	f017 fa43 	bl	801afb0 <free>
    if (pubKey != NULL) {
 8003b2a:	f1b8 0f00 	cmp.w	r8, #0
 8003b2e:	d005      	beq.n	8003b3c <ecc_test+0x424>
        wc_ecc_free(pubKey);
 8003b30:	4640      	mov	r0, r8
 8003b32:	f006 fb6e 	bl	800a212 <wc_ecc_free>
        XFREE(pubKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003b36:	4640      	mov	r0, r8
 8003b38:	f017 fa3a 	bl	801afb0 <free>
    WC_FREE_VAR(sharedA, HEAP_HINT);
 8003b3c:	f1bb 0f00 	cmp.w	fp, #0
 8003b40:	d002      	beq.n	8003b48 <ecc_test+0x430>
 8003b42:	4658      	mov	r0, fp
 8003b44:	f017 fa34 	bl	801afb0 <free>
    WC_FREE_VAR(sharedB, HEAP_HINT);
 8003b48:	f1ba 0f00 	cmp.w	sl, #0
 8003b4c:	d002      	beq.n	8003b54 <ecc_test+0x43c>
 8003b4e:	4650      	mov	r0, sl
 8003b50:	f017 fa2e 	bl	801afb0 <free>
    WC_FREE_VAR(exportBuf, HEAP_HINT);
 8003b54:	9b06      	ldr	r3, [sp, #24]
 8003b56:	b113      	cbz	r3, 8003b5e <ecc_test+0x446>
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f017 fa29 	bl	801afb0 <free>
    WC_FREE_VAR(sig, HEAP_HINT);
 8003b5e:	f1b9 0f00 	cmp.w	r9, #0
 8003b62:	d002      	beq.n	8003b6a <ecc_test+0x452>
 8003b64:	4648      	mov	r0, r9
 8003b66:	f017 fa23 	bl	801afb0 <free>
    WC_FREE_VAR(digest, HEAP_HINT);
 8003b6a:	b116      	cbz	r6, 8003b72 <ecc_test+0x45a>
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f017 fa1f 	bl	801afb0 <free>
    if (ret < 0) {
 8003b72:	b337      	cbz	r7, 8003bc2 <ecc_test+0x4aa>
        if (ret == ECC_CURVE_OID_E) {
 8003b74:	f117 0fac 	cmn.w	r7, #172	; 0xac
 8003b78:	d023      	beq.n	8003bc2 <ecc_test+0x4aa>
            printf("ecc_test_curve_size %d failed!\n", keySize);
 8003b7a:	485e      	ldr	r0, [pc, #376]	; (8003cf4 <ecc_test+0x5dc>)
 8003b7c:	2120      	movs	r1, #32
            printf("ecc_test_key_gen %d failed!\n", keySize);
 8003b7e:	f017 fb3d 	bl	801b1fc <iprintf>
 8003b82:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <ecc_test+0x5e0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6898      	ldr	r0, [r3, #8]
 8003b88:	f017 f900 	bl	801ad8c <fflush>
        printf("keySize=32, Default\n");
 8003b8c:	485b      	ldr	r0, [pc, #364]	; (8003cfc <ecc_test+0x5e4>)
        printf("ecc_test_allocator failed!\n");
 8003b8e:	f017 fb35 	bl	801b1fc <iprintf>
 8003b92:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <ecc_test+0x5e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6898      	ldr	r0, [r3, #8]
 8003b98:	f017 f8f8 	bl	801ad8c <fflush>
        goto done;
 8003b9c:	e221      	b.n	8003fe2 <ecc_test+0x8ca>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, done);
 8003b9e:	4f58      	ldr	r7, [pc, #352]	; (8003d00 <ecc_test+0x5e8>)
 8003ba0:	e7b9      	b.n	8003b16 <ecc_test+0x3fe>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, done);
 8003ba2:	4f58      	ldr	r7, [pc, #352]	; (8003d04 <ecc_test+0x5ec>)
 8003ba4:	e7b7      	b.n	8003b16 <ecc_test+0x3fe>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003ba6:	4f58      	ldr	r7, [pc, #352]	; (8003d08 <ecc_test+0x5f0>)
 8003ba8:	e656      	b.n	8003858 <ecc_test+0x140>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003baa:	4f58      	ldr	r7, [pc, #352]	; (8003d0c <ecc_test+0x5f4>)
 8003bac:	e654      	b.n	8003858 <ecc_test+0x140>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003bae:	4f58      	ldr	r7, [pc, #352]	; (8003d10 <ecc_test+0x5f8>)
 8003bb0:	e652      	b.n	8003858 <ecc_test+0x140>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003bb2:	4f58      	ldr	r7, [pc, #352]	; (8003d14 <ecc_test+0x5fc>)
 8003bb4:	e650      	b.n	8003858 <ecc_test+0x140>
            ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003bb6:	4f58      	ldr	r7, [pc, #352]	; (8003d18 <ecc_test+0x600>)
 8003bb8:	e64e      	b.n	8003858 <ecc_test+0x140>
            ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003bba:	4f58      	ldr	r7, [pc, #352]	; (8003d1c <ecc_test+0x604>)
 8003bbc:	e64c      	b.n	8003858 <ecc_test+0x140>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003bbe:	4f52      	ldr	r7, [pc, #328]	; (8003d08 <ecc_test+0x5f0>)
 8003bc0:	e7ac      	b.n	8003b1c <ecc_test+0x404>
    XMEMSET(&vec, 0, sizeof(vec));
 8003bc2:	2234      	movs	r2, #52	; 0x34
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	a830      	add	r0, sp, #192	; 0xc0
 8003bc8:	f017 fa32 	bl	801b030 <memset>
            vec.msg = "\xa3\xf9\x1a\xe2\x1b\xa6\xb3\x03\x98\x64\x47\x2f\x18\x41\x44\xc6\xaf\x62\xcd\x0e";
 8003bcc:	4b54      	ldr	r3, [pc, #336]	; (8003d20 <ecc_test+0x608>)
 8003bce:	9330      	str	r3, [sp, #192]	; 0xc0
            vec.msgLen = 20;
 8003bd0:	2314      	movs	r3, #20
 8003bd2:	9337      	str	r3, [sp, #220]	; 0xdc
        vec.Qx  = "fa2737fb93488d19caef11ae7faf6b7f4bcd67b286e3fc54e8a65c2b74aeccb0";
 8003bd4:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <ecc_test+0x60c>)
 8003bd6:	9331      	str	r3, [sp, #196]	; 0xc4
        vec.Qy  = "d4ccd6dae698208aa8c3a6f39e45510d03be09b2f124bfc067856c324f9b4d09";
 8003bd8:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <ecc_test+0x610>)
 8003bda:	9332      	str	r3, [sp, #200]	; 0xc8
        vec.d   = "be34baa8d040a3b991f9075b56ba292f755b90e4b6dc10dad36715c33cfdac25";
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <ecc_test+0x614>)
 8003bde:	9333      	str	r3, [sp, #204]	; 0xcc
        vec.R   = "2b826f5d44e2d0b6de531ad96b51e8f0c56fdfead3c236892e4d84eacfc3b75c";
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <ecc_test+0x618>)
 8003be2:	9334      	str	r3, [sp, #208]	; 0xd0
        vec.S   = "a2248b62c03db35a7cd63e8a120a3521a89d3d2f61ff99035a2148ae32e3a248";
 8003be4:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <ecc_test+0x61c>)
 8003be6:	9335      	str	r3, [sp, #212]	; 0xd4
        vec.r   = (byte*)"\x2b\x82\x6f\x5d\x44\xe2\xd0\xb6\xde\x53\x1a\xd9"
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <ecc_test+0x620>)
    vec.keySize = (word32)keySize;
 8003bea:	2720      	movs	r7, #32
        vec.rSz = 32;
 8003bec:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
        vec.s   = (byte*)"\xa2\x24\x8b\x62\xc0\x3d\xb3\x5a\x7c\xd6\x3e\x8a"
 8003bf0:	4b52      	ldr	r3, [pc, #328]	; (8003d3c <ecc_test+0x624>)
    vec.keySize = (word32)keySize;
 8003bf2:	9738      	str	r7, [sp, #224]	; 0xe0
        vec.sSz = 32;
 8003bf4:	e9cd 373b 	strd	r3, r7, [sp, #236]	; 0xec
    int verify = 0;
 8003bf8:	f04f 0a00 	mov.w	sl, #0
        vec.curveName = "SECP256R1";
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <ecc_test+0x628>)
 8003bfe:	9336      	str	r3, [sp, #216]	; 0xd8
    ecc_key *userA = (ecc_key *)XMALLOC(sizeof *userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003c00:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    int verify = 0;
 8003c04:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    ecc_key *userA = (ecc_key *)XMALLOC(sizeof *userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003c08:	f017 f9ca 	bl	801afa0 <malloc>
 8003c0c:	4604      	mov	r4, r0
    WC_DECLARE_VAR(sig, byte, ECC_SIG_SIZE, HEAP_HINT);
 8003c0e:	2049      	movs	r0, #73	; 0x49
 8003c10:	f017 f9c6 	bl	801afa0 <malloc>
 8003c14:	4605      	mov	r5, r0
    WC_DECLARE_VAR(sigRaw, byte, ECC_SIG_SIZE, HEAP_HINT);
 8003c16:	2049      	movs	r0, #73	; 0x49
    word32  sigRawSz, rSz = MAX_ECC_BYTES, sSz = MAX_ECC_BYTES;
 8003c18:	970e      	str	r7, [sp, #56]	; 0x38
 8003c1a:	971f      	str	r7, [sp, #124]	; 0x7c
    WC_DECLARE_VAR(sigRaw, byte, ECC_SIG_SIZE, HEAP_HINT);
 8003c1c:	f017 f9c0 	bl	801afa0 <malloc>
 8003c20:	4606      	mov	r6, r0
    WC_DECLARE_VAR(r, byte, MAX_ECC_BYTES, HEAP_HINT);
 8003c22:	4638      	mov	r0, r7
 8003c24:	f017 f9bc 	bl	801afa0 <malloc>
 8003c28:	4680      	mov	r8, r0
    WC_DECLARE_VAR(s, byte, MAX_ECC_BYTES, HEAP_HINT);
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f017 f9b8 	bl	801afa0 <malloc>
 8003c30:	4681      	mov	r9, r0
    if (sig == NULL)
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	f000 80c9 	beq.w	8003dca <ecc_test+0x6b2>
    if (sigRaw == NULL || r == NULL || s == NULL)
 8003c38:	2e00      	cmp	r6, #0
 8003c3a:	f000 8713 	beq.w	8004a64 <ecc_test+0x134c>
 8003c3e:	f1b8 0f00 	cmp.w	r8, #0
 8003c42:	f000 8705 	beq.w	8004a50 <ecc_test+0x1338>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	f000 8702 	beq.w	8004a50 <ecc_test+0x1338>
    if (userA == NULL)
 8003c4c:	2c00      	cmp	r4, #0
 8003c4e:	f000 8702 	beq.w	8004a56 <ecc_test+0x133e>
    ret = wc_ecc_init_ex(userA, HEAP_HINT, devId);
 8003c52:	f06f 0201 	mvn.w	r2, #1
 8003c56:	4651      	mov	r1, sl
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f006 fa97 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8003c5e:	4607      	mov	r7, r0
 8003c60:	bb90      	cbnz	r0, 8003cc8 <ecc_test+0x5b0>
    ret = wc_ecc_import_raw(userA, vector->Qx, vector->Qy,
 8003c62:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8003c68:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f008 faab 	bl	800c1c8 <wc_ecc_import_raw>
    if (ret != 0)
 8003c72:	4607      	mov	r7, r0
 8003c74:	bb40      	cbnz	r0, 8003cc8 <ecc_test+0x5b0>
    XMEMSET(sig, 0, ECC_SIG_SIZE);
 8003c76:	4601      	mov	r1, r0
 8003c78:	2249      	movs	r2, #73	; 0x49
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f017 f9d8 	bl	801b030 <memset>
    sigSz = ECC_SIG_SIZE;
 8003c80:	f04f 0b49 	mov.w	fp, #73	; 0x49
    ret = wc_ecc_rs_to_sig(vector->R, vector->S, sig, &sigSz);
 8003c84:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8003c88:	ab0a      	add	r3, sp, #40	; 0x28
 8003c8a:	462a      	mov	r2, r5
    sigSz = ECC_SIG_SIZE;
 8003c8c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    ret = wc_ecc_rs_to_sig(vector->R, vector->S, sig, &sigSz);
 8003c90:	f008 f9fe 	bl	800c090 <wc_ecc_rs_to_sig>
    if (ret != 0)
 8003c94:	4607      	mov	r7, r0
 8003c96:	b9b8      	cbnz	r0, 8003cc8 <ecc_test+0x5b0>
    XMEMSET(sigRaw, 0, ECC_SIG_SIZE);
 8003c98:	4601      	mov	r1, r0
 8003c9a:	465a      	mov	r2, fp
 8003c9c:	4630      	mov	r0, r6
    sigRawSz = ECC_SIG_SIZE;
 8003c9e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
    XMEMSET(sigRaw, 0, ECC_SIG_SIZE);
 8003ca2:	f017 f9c5 	bl	801b030 <memset>
    ret = wc_ecc_rs_raw_to_sig(vector->r, vector->rSz, vector->s, vector->sSz,
 8003ca6:	e9cd 6a00 	strd	r6, sl, [sp]
 8003caa:	e9dd 233b 	ldrd	r2, r3, [sp, #236]	; 0xec
 8003cae:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
    sigRawSz = ECC_SIG_SIZE;
 8003cb2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    ret = wc_ecc_rs_raw_to_sig(vector->r, vector->rSz, vector->s, vector->sSz,
 8003cb6:	f008 fa50 	bl	800c15a <wc_ecc_rs_raw_to_sig>
    if (ret != 0)
 8003cba:	4607      	mov	r7, r0
 8003cbc:	b920      	cbnz	r0, 8003cc8 <ecc_test+0x5b0>
    if (sigSz != sigRawSz || XMEMCMP(sig, sigRaw, sigSz) != 0) {
 8003cbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d040      	beq.n	8003d48 <ecc_test+0x630>
        ret = WC_TEST_RET_ENC_NC;
 8003cc6:	4f1f      	ldr	r7, [pc, #124]	; (8003d44 <ecc_test+0x62c>)
        wc_ecc_free(userA);
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f006 faa2 	bl	800a212 <wc_ecc_free>
        XFREE(userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f017 f96e 	bl	801afb0 <free>
 8003cd4:	e07e      	b.n	8003dd4 <ecc_test+0x6bc>
 8003cd6:	bf00      	nop
 8003cd8:	fffe7960 	.word	0xfffe7960
 8003cdc:	dfff983b 	.word	0xdfff983b
 8003ce0:	dfff982c 	.word	0xdfff982c
 8003ce4:	dfff9816 	.word	0xdfff9816
 8003ce8:	dfff9808 	.word	0xdfff9808
 8003cec:	dfff97f8 	.word	0xdfff97f8
 8003cf0:	ffff9958 	.word	0xffff9958
 8003cf4:	0801e419 	.word	0x0801e419
 8003cf8:	20000188 	.word	0x20000188
 8003cfc:	0801e638 	.word	0x0801e638
 8003d00:	ffff9953 	.word	0xffff9953
 8003d04:	ffff994c 	.word	0xffff994c
 8003d08:	ffff9940 	.word	0xffff9940
 8003d0c:	ffff98d5 	.word	0xffff98d5
 8003d10:	ffff98d2 	.word	0xffff98d2
 8003d14:	ffff9885 	.word	0xffff9885
 8003d18:	ffff982a 	.word	0xffff982a
 8003d1c:	ffff9806 	.word	0xffff9806
 8003d20:	0801e439 	.word	0x0801e439
 8003d24:	0801e44e 	.word	0x0801e44e
 8003d28:	0801e48f 	.word	0x0801e48f
 8003d2c:	0801e4d0 	.word	0x0801e4d0
 8003d30:	0801e511 	.word	0x0801e511
 8003d34:	0801e552 	.word	0x0801e552
 8003d38:	0801e593 	.word	0x0801e593
 8003d3c:	0801e5b4 	.word	0x0801e5b4
 8003d40:	0801e5d5 	.word	0x0801e5d5
 8003d44:	ffff9ea3 	.word	0xffff9ea3
    if (sigSz != sigRawSz || XMEMCMP(sig, sigRaw, sigSz) != 0) {
 8003d48:	4631      	mov	r1, r6
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f017 f938 	bl	801afc0 <memcmp>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d1b8      	bne.n	8003cc6 <ecc_test+0x5ae>
    ret = wc_ecc_sig_to_rs(sig, sigSz, r, &rSz, s, &sSz);
 8003d54:	ab1f      	add	r3, sp, #124	; 0x7c
 8003d56:	e9cd 9300 	strd	r9, r3, [sp]
 8003d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d5c:	ab0e      	add	r3, sp, #56	; 0x38
 8003d5e:	4642      	mov	r2, r8
 8003d60:	4628      	mov	r0, r5
 8003d62:	f008 fa0f 	bl	800c184 <wc_ecc_sig_to_rs>
    if (ret != 0)
 8003d66:	4607      	mov	r7, r0
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d1ad      	bne.n	8003cc8 <ecc_test+0x5b0>
    if (rSz != vector->rSz || XMEMCMP(r, vector->r, rSz) != 0 ||
 8003d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d6e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <ecc_test+0x660>
        ret = WC_TEST_RET_ENC_NC;
 8003d74:	4fa2      	ldr	r7, [pc, #648]	; (8004000 <ecc_test+0x8e8>)
 8003d76:	e7a7      	b.n	8003cc8 <ecc_test+0x5b0>
    if (rSz != vector->rSz || XMEMCMP(r, vector->r, rSz) != 0 ||
 8003d78:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	f017 f920 	bl	801afc0 <memcmp>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d1f7      	bne.n	8003d74 <ecc_test+0x65c>
 8003d84:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8003d86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1f3      	bne.n	8003d74 <ecc_test+0x65c>
        sSz != vector->sSz || XMEMCMP(s, vector->s, sSz) != 0) {
 8003d8c:	993b      	ldr	r1, [sp, #236]	; 0xec
 8003d8e:	4648      	mov	r0, r9
 8003d90:	f017 f916 	bl	801afc0 <memcmp>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d1ed      	bne.n	8003d74 <ecc_test+0x65c>
            ret = wc_ecc_verify_hash(sig, sigSz, (byte*)vector->msg,
 8003d98:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 8003d9c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8003d9e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8003da0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003da2:	9401      	str	r4, [sp, #4]
 8003da4:	f8cd a000 	str.w	sl, [sp]
 8003da8:	4628      	mov	r0, r5
 8003daa:	f007 fd5d 	bl	800b868 <wc_ecc_verify_hash>
    } while (ret == WC_PENDING_E);
 8003dae:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
            ret = wc_ecc_verify_hash(sig, sigSz, (byte*)vector->msg,
 8003db2:	4607      	mov	r7, r0
    } while (ret == WC_PENDING_E);
 8003db4:	d100      	bne.n	8003db8 <ecc_test+0x6a0>
 8003db6:	e7fe      	b.n	8003db6 <ecc_test+0x69e>
    if (ret != 0)
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d185      	bne.n	8003cc8 <ecc_test+0x5b0>
    if (verify != 1)
 8003dbc:	f8da 2000 	ldr.w	r2, [sl]
        ret = WC_TEST_RET_ENC_NC;
 8003dc0:	4b90      	ldr	r3, [pc, #576]	; (8004004 <ecc_test+0x8ec>)
 8003dc2:	2a01      	cmp	r2, #1
 8003dc4:	bf18      	it	ne
 8003dc6:	461f      	movne	r7, r3
 8003dc8:	e77e      	b.n	8003cc8 <ecc_test+0x5b0>
        ERROR_OUT(MEMORY_E, done);
 8003dca:	f06f 077c 	mvn.w	r7, #124	; 0x7c
    if (userA != NULL) {
 8003dce:	2c00      	cmp	r4, #0
 8003dd0:	f47f af7a 	bne.w	8003cc8 <ecc_test+0x5b0>
    WC_FREE_VAR(sigRaw, HEAP_HINT);
 8003dd4:	2e00      	cmp	r6, #0
 8003dd6:	f040 8640 	bne.w	8004a5a <ecc_test+0x1342>
    WC_FREE_VAR(r, HEAP_HINT);
 8003dda:	f1b8 0f00 	cmp.w	r8, #0
 8003dde:	d002      	beq.n	8003de6 <ecc_test+0x6ce>
 8003de0:	4640      	mov	r0, r8
 8003de2:	f017 f8e5 	bl	801afb0 <free>
    WC_FREE_VAR(s, HEAP_HINT);
 8003de6:	f1b9 0f00 	cmp.w	r9, #0
 8003dea:	d002      	beq.n	8003df2 <ecc_test+0x6da>
 8003dec:	4648      	mov	r0, r9
 8003dee:	f017 f8df 	bl	801afb0 <free>
    WC_FREE_VAR(sig, HEAP_HINT);
 8003df2:	b115      	cbz	r5, 8003dfa <ecc_test+0x6e2>
 8003df4:	4628      	mov	r0, r5
 8003df6:	f017 f8db 	bl	801afb0 <free>
    if (ret < 0) {
 8003dfa:	2f00      	cmp	r7, #0
 8003dfc:	da05      	bge.n	8003e0a <ecc_test+0x6f2>
        printf("ecc_test_vector %d failed!\n", keySize);
 8003dfe:	4882      	ldr	r0, [pc, #520]	; (8004008 <ecc_test+0x8f0>)
 8003e00:	2120      	movs	r1, #32
 8003e02:	e6bc      	b.n	8003b7e <ecc_test+0x466>
        ERROR_OUT(MEMORY_E, done);
 8003e04:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8003e08:	e75e      	b.n	8003cc8 <ecc_test+0x5b0>
    ecc_key *eccKey = (ecc_key *)XMALLOC(sizeof *eccKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003e0a:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8003e0e:	f017 f8c7 	bl	801afa0 <malloc>
 8003e12:	4604      	mov	r4, r0
    byte *tmpBuf = (byte *)XMALLOC(ECC_BUFSIZE, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003e14:	f240 1001 	movw	r0, #257	; 0x101
 8003e18:	f017 f8c2 	bl	801afa0 <malloc>
 8003e1c:	4606      	mov	r6, r0
    if ((eccKey == NULL) || (tmpBuf == NULL))
 8003e1e:	2c00      	cmp	r4, #0
 8003e20:	f000 862d 	beq.w	8004a7e <ecc_test+0x1366>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f000 860c 	beq.w	8004a42 <ecc_test+0x132a>
    ret = wc_ecc_init(eccKey);
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f006 f9e3 	bl	800a1f6 <wc_ecc_init>
    if (ret != 0) {
 8003e30:	4607      	mov	r7, r0
 8003e32:	bb88      	cbnz	r0, 8003e98 <ecc_test+0x780>
    ret = wc_ecc_make_key(rng, keySize, eccKey);
 8003e34:	4622      	mov	r2, r4
 8003e36:	2120      	movs	r1, #32
 8003e38:	a80c      	add	r0, sp, #48	; 0x30
 8003e3a:	f006 ffcc 	bl	800add6 <wc_ecc_make_key>
    if (ret != 0) {
 8003e3e:	4607      	mov	r7, r0
 8003e40:	bb50      	cbnz	r0, 8003e98 <ecc_test+0x780>
    ret = wc_EccKeyToDer(eccKey, tmpBuf, tmpSz);
 8003e42:	f240 1201 	movw	r2, #257	; 0x101
 8003e46:	4631      	mov	r1, r6
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f00d fe4a 	bl	8011ae2 <wc_EccKeyToDer>
 8003e4e:	4605      	mov	r5, r0
    wc_ecc_free(eccKey);
 8003e50:	4620      	mov	r0, r4
 8003e52:	f006 f9de 	bl	800a212 <wc_ecc_free>
    if (ret < 0) {
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	f2c0 85f7 	blt.w	8004a4a <ecc_test+0x1332>
    ret = wc_ecc_init(eccKey);
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f006 f9ca 	bl	800a1f6 <wc_ecc_init>
    if (ret != 0) {
 8003e62:	4607      	mov	r7, r0
 8003e64:	b9c0      	cbnz	r0, 8003e98 <ecc_test+0x780>
    idx = 0;
 8003e66:	9030      	str	r0, [sp, #192]	; 0xc0
    ret = wc_EccPrivateKeyDecode(tmpBuf, &idx, eccKey, tmpSz);
 8003e68:	462b      	mov	r3, r5
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	a930      	add	r1, sp, #192	; 0xc0
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f00d fb2d 	bl	80114ce <wc_EccPrivateKeyDecode>
    if (ret != 0) {
 8003e74:	4607      	mov	r7, r0
 8003e76:	b978      	cbnz	r0, 8003e98 <ecc_test+0x780>
    wc_ecc_free(eccKey);
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f006 f9ca 	bl	800a212 <wc_ecc_free>
    ret = wc_ecc_init(eccKey);
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f006 f9b9 	bl	800a1f6 <wc_ecc_init>
    if (ret != 0) {
 8003e84:	4607      	mov	r7, r0
 8003e86:	b938      	cbnz	r0, 8003e98 <ecc_test+0x780>
    idx = 0;
 8003e88:	9030      	str	r0, [sp, #192]	; 0xc0
    ret = wc_EccPublicKeyDecode(tmpBuf, &idx, eccKey, tmpSz);
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	a930      	add	r1, sp, #192	; 0xc0
 8003e90:	4630      	mov	r0, r6
 8003e92:	f00d fbfd 	bl	8011690 <wc_EccPublicKeyDecode>
 8003e96:	4607      	mov	r7, r0
        wc_ecc_free(eccKey);
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f006 f9ba 	bl	800a212 <wc_ecc_free>
        XFREE(eccKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f017 f886 	bl	801afb0 <free>
    if (tmpBuf != NULL)
 8003ea4:	b916      	cbnz	r6, 8003eac <ecc_test+0x794>
 8003ea6:	e004      	b.n	8003eb2 <ecc_test+0x79a>
        ERROR_OUT(MEMORY_E, done);
 8003ea8:	f06f 077c 	mvn.w	r7, #124	; 0x7c
        XFREE(tmpBuf, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003eac:	4630      	mov	r0, r6
 8003eae:	f017 f87f 	bl	801afb0 <free>
    if (ret < 0) {
 8003eb2:	2f00      	cmp	r7, #0
 8003eb4:	da05      	bge.n	8003ec2 <ecc_test+0x7aa>
        if (ret == ECC_CURVE_OID_E) {
 8003eb6:	f117 0fac 	cmn.w	r7, #172	; 0xac
 8003eba:	d002      	beq.n	8003ec2 <ecc_test+0x7aa>
            printf("ecc_test_key_decode %d failed!\n", keySize);
 8003ebc:	4853      	ldr	r0, [pc, #332]	; (800400c <ecc_test+0x8f4>)
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	e65d      	b.n	8003b7e <ecc_test+0x466>
    byte *der = (byte *)XMALLOC(ECC_BUFSIZE, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003ec2:	f240 1001 	movw	r0, #257	; 0x101
 8003ec6:	f017 f86b 	bl	801afa0 <malloc>
 8003eca:	4605      	mov	r5, r0
    ecc_key *userA = (ecc_key *)XMALLOC(sizeof *userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003ecc:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8003ed0:	f017 f866 	bl	801afa0 <malloc>
 8003ed4:	4604      	mov	r4, r0
    if ((der == NULL) || (userA == NULL))
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	f000 85cb 	beq.w	8004a72 <ecc_test+0x135a>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f000 85aa 	beq.w	8004a36 <ecc_test+0x131e>
    ret = wc_ecc_init_ex(userA, HEAP_HINT, devId);
 8003ee2:	f06f 0201 	mvn.w	r2, #1
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f006 f950 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8003eec:	b138      	cbz	r0, 8003efe <ecc_test+0x7e6>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003eee:	4240      	negs	r0, r0
 8003ef0:	4b47      	ldr	r3, [pc, #284]	; (8004010 <ecc_test+0x8f8>)
 8003ef2:	4f48      	ldr	r7, [pc, #288]	; (8004014 <ecc_test+0x8fc>)
 8003ef4:	f3c0 000a 	ubfx	r0, r0, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_I(derSz), done);
 8003ef8:	fb03 7700 	mla	r7, r3, r0, r7
 8003efc:	e00c      	b.n	8003f18 <ecc_test+0x800>
    ret = wc_ecc_make_key(rng, keySize, userA);
 8003efe:	4622      	mov	r2, r4
 8003f00:	2120      	movs	r1, #32
 8003f02:	a80c      	add	r0, sp, #48	; 0x30
 8003f04:	f006 ff67 	bl	800add6 <wc_ecc_make_key>
    if (ret != 0)
 8003f08:	b160      	cbz	r0, 8003f24 <ecc_test+0x80c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003f0a:	4247      	negs	r7, r0
 8003f0c:	f3c7 030a 	ubfx	r3, r7, #0, #11
 8003f10:	4841      	ldr	r0, [pc, #260]	; (8004018 <ecc_test+0x900>)
 8003f12:	4f3f      	ldr	r7, [pc, #252]	; (8004010 <ecc_test+0x8f8>)
 8003f14:	fb07 0703 	mla	r7, r7, r3, r0
        XFREE(der, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f017 f849 	bl	801afb0 <free>
    if (userA != NULL) {
 8003f1e:	2c00      	cmp	r4, #0
 8003f20:	d13b      	bne.n	8003f9a <ecc_test+0x882>
 8003f22:	e040      	b.n	8003fa6 <ecc_test+0x88e>
    ret = wc_ecc_check_key(userA);
 8003f24:	4620      	mov	r0, r4
 8003f26:	f007 fe9b 	bl	800bc60 <wc_ecc_check_key>
    if (ret != 0)
 8003f2a:	4607      	mov	r7, r0
 8003f2c:	b128      	cbz	r0, 8003f3a <ecc_test+0x822>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8003f2e:	4240      	negs	r0, r0
 8003f30:	4b37      	ldr	r3, [pc, #220]	; (8004010 <ecc_test+0x8f8>)
 8003f32:	4f3a      	ldr	r7, [pc, #232]	; (800401c <ecc_test+0x904>)
 8003f34:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003f38:	e7de      	b.n	8003ef8 <ecc_test+0x7e0>
    derSz = wc_EccKeyToDer(userA, der, ECC_BUFSIZE);
 8003f3a:	f240 1201 	movw	r2, #257	; 0x101
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4620      	mov	r0, r4
 8003f42:	f00d fdce 	bl	8011ae2 <wc_EccKeyToDer>
    if (derSz < 0) {
 8003f46:	2800      	cmp	r0, #0
 8003f48:	da04      	bge.n	8003f54 <ecc_test+0x83c>
        ERROR_OUT(WC_TEST_RET_ENC_I(derSz), done);
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <ecc_test+0x8f8>)
 8003f4c:	4f34      	ldr	r7, [pc, #208]	; (8004020 <ecc_test+0x908>)
 8003f4e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003f52:	e7d1      	b.n	8003ef8 <ecc_test+0x7e0>
    derSz = wc_EccPublicKeyToDer(userA, der, ECC_BUFSIZE, 1);
 8003f54:	2301      	movs	r3, #1
 8003f56:	f240 1201 	movw	r2, #257	; 0x101
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f00d f87b 	bl	8011058 <wc_EccPublicKeyToDer>
    if (derSz < 0) {
 8003f62:	2800      	cmp	r0, #0
 8003f64:	da04      	bge.n	8003f70 <ecc_test+0x858>
        ERROR_OUT(WC_TEST_RET_ENC_I(derSz), done);
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <ecc_test+0x8f8>)
 8003f68:	4f2e      	ldr	r7, [pc, #184]	; (8004024 <ecc_test+0x90c>)
 8003f6a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003f6e:	e7c3      	b.n	8003ef8 <ecc_test+0x7e0>
    if (derSz == 0) {
 8003f70:	f000 8564 	beq.w	8004a3c <ecc_test+0x1324>
    pkcs8Sz = FOURK_BUF;
 8003f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    derSz = wc_EccPrivateKeyToPKCS8(userA, der, &pkcs8Sz);
 8003f78:	aa30      	add	r2, sp, #192	; 0xc0
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4620      	mov	r0, r4
    pkcs8Sz = FOURK_BUF;
 8003f7e:	9330      	str	r3, [sp, #192]	; 0xc0
    derSz = wc_EccPrivateKeyToPKCS8(userA, der, &pkcs8Sz);
 8003f80:	f00d fdb9 	bl	8011af6 <wc_EccPrivateKeyToPKCS8>
    if (derSz < 0) {
 8003f84:	2800      	cmp	r0, #0
 8003f86:	da04      	bge.n	8003f92 <ecc_test+0x87a>
        ERROR_OUT(WC_TEST_RET_ENC_I(derSz), done);
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <ecc_test+0x8f8>)
 8003f8a:	4f27      	ldr	r7, [pc, #156]	; (8004028 <ecc_test+0x910>)
 8003f8c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003f90:	e7b2      	b.n	8003ef8 <ecc_test+0x7e0>
    if (derSz == 0) {
 8003f92:	d1c1      	bne.n	8003f18 <ecc_test+0x800>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8003f94:	4f25      	ldr	r7, [pc, #148]	; (800402c <ecc_test+0x914>)
 8003f96:	e7bf      	b.n	8003f18 <ecc_test+0x800>
        ERROR_OUT(WC_TEST_RET_ENC_EC(MEMORY_E), done);
 8003f98:	4f25      	ldr	r7, [pc, #148]	; (8004030 <ecc_test+0x918>)
        wc_ecc_free(userA);
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f006 f939 	bl	800a212 <wc_ecc_free>
        XFREE(userA, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f017 f805 	bl	801afb0 <free>
    if (ret < 0) {
 8003fa6:	b12f      	cbz	r7, 8003fb4 <ecc_test+0x89c>
        if (ret == ECC_CURVE_OID_E) {
 8003fa8:	f117 0fac 	cmn.w	r7, #172	; 0xac
 8003fac:	d002      	beq.n	8003fb4 <ecc_test+0x89c>
            printf("ecc_test_key_gen %d failed!\n", keySize);
 8003fae:	4821      	ldr	r0, [pc, #132]	; (8004034 <ecc_test+0x91c>)
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	e5e4      	b.n	8003b7e <ecc_test+0x466>
    byte       der[] = { 0x04, /* = Uncompressed */
 8003fb4:	2741      	movs	r7, #65	; 0x41
 8003fb6:	4920      	ldr	r1, [pc, #128]	; (8004038 <ecc_test+0x920>)
 8003fb8:	463a      	mov	r2, r7
 8003fba:	a81f      	add	r0, sp, #124	; 0x7c
 8003fbc:	f017 f810 	bl	801afe0 <memcpy>
    byte       altDer[] = { 0x04, /* = Uncompressed */
 8003fc0:	491e      	ldr	r1, [pc, #120]	; (800403c <ecc_test+0x924>)
 8003fc2:	463a      	mov	r2, r7
 8003fc4:	a830      	add	r0, sp, #192	; 0xc0
 8003fc6:	f017 f80b 	bl	801afe0 <memcpy>
    int curve_idx = wc_ecc_get_curve_idx(ECC_SECP256R1);
 8003fca:	2007      	movs	r0, #7
 8003fcc:	f006 f80b 	bl	8009fe6 <wc_ecc_get_curve_idx>
    if (curve_idx == ECC_CURVE_INVALID)
 8003fd0:	1c43      	adds	r3, r0, #1
    int curve_idx = wc_ecc_get_curve_idx(ECC_SECP256R1);
 8003fd2:	4605      	mov	r5, r0
    if (curve_idx == ECC_CURVE_INVALID)
 8003fd4:	d053      	beq.n	800407e <ecc_test+0x966>
    outLen = sizeof(out);
 8003fd6:	970b      	str	r7, [sp, #44]	; 0x2c
    point = wc_ecc_new_point();
 8003fd8:	f005 ffbd 	bl	8009f56 <wc_ecc_new_point>
    if (point == NULL)
 8003fdc:	4604      	mov	r4, r0
 8003fde:	b928      	cbnz	r0, 8003fec <ecc_test+0x8d4>
        return WC_TEST_RET_ENC_ERRNO;
 8003fe0:	4f17      	ldr	r7, [pc, #92]	; (8004040 <ecc_test+0x928>)
    wc_FreeRng(&rng);
 8003fe2:	a80c      	add	r0, sp, #48	; 0x30
 8003fe4:	f008 fb72 	bl	800c6cc <wc_FreeRng>
    return ret;
 8003fe8:	f7ff bba8 	b.w	800373c <ecc_test+0x24>
    point2 = wc_ecc_new_point();
 8003fec:	f005 ffb3 	bl	8009f56 <wc_ecc_new_point>
    if (point2 == NULL) {
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	bb48      	cbnz	r0, 8004048 <ecc_test+0x930>
        wc_ecc_del_point(point);
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f005 ffba 	bl	8009f6e <wc_ecc_del_point>
        return WC_TEST_RET_ENC_NC;
 8003ffa:	4f12      	ldr	r7, [pc, #72]	; (8004044 <ecc_test+0x92c>)
 8003ffc:	e7f1      	b.n	8003fe2 <ecc_test+0x8ca>
 8003ffe:	bf00      	nop
 8004000:	ffff9e9a 	.word	0xffff9e9a
 8004004:	ffff9e87 	.word	0xffff9e87
 8004008:	0801e5df 	.word	0x0801e5df
 800400c:	0801e5fb 	.word	0x0801e5fb
 8004010:	fffe7960 	.word	0xfffe7960
 8004014:	dfff99d6 	.word	0xdfff99d6
 8004018:	dfff99cf 	.word	0xdfff99cf
 800401c:	dfff99ca 	.word	0xdfff99ca
 8004020:	9fff99c5 	.word	0x9fff99c5
 8004024:	9fff99ba 	.word	0x9fff99ba
 8004028:	9fff99a0 	.word	0x9fff99a0
 800402c:	ffff999c 	.word	0xffff999c
 8004030:	df40ddbb 	.word	0xdf40ddbb
 8004034:	0801e61b 	.word	0x0801e61b
 8004038:	0801e6a0 	.word	0x0801e6a0
 800403c:	0801bec4 	.word	0x0801bec4
 8004040:	ffff9758 	.word	0xffff9758
 8004044:	ffff9754 	.word	0xffff9754
    wc_ecc_del_point(NULL);
 8004048:	2000      	movs	r0, #0
 800404a:	f005 ff90 	bl	8009f6e <wc_ecc_del_point>
    ret = wc_ecc_import_point_der(NULL, sizeof(der), curve_idx, point);
 800404e:	4623      	mov	r3, r4
 8004050:	462a      	mov	r2, r5
 8004052:	4639      	mov	r1, r7
 8004054:	2000      	movs	r0, #0
 8004056:	f007 fcfb 	bl	800ba50 <wc_ecc_import_point_der>
    if (ret != ECC_BAD_ARG_E) {
 800405a:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 800405e:	d02d      	beq.n	80040bc <ecc_test+0x9a4>
        ret = WC_TEST_RET_ENC_EC(ret);
 8004060:	4240      	negs	r0, r0
 8004062:	4ba8      	ldr	r3, [pc, #672]	; (8004304 <ecc_test+0xbec>)
 8004064:	4fa8      	ldr	r7, [pc, #672]	; (8004308 <ecc_test+0xbf0>)
 8004066:	f3c0 000a 	ubfx	r0, r0, #0, #11
        ret = WC_TEST_RET_ENC_EC(ret);
 800406a:	fb03 7700 	mla	r7, r3, r0, r7
    wc_ecc_del_point(point2);
 800406e:	4630      	mov	r0, r6
 8004070:	f005 ff7d 	bl	8009f6e <wc_ecc_del_point>
    wc_ecc_del_point(point);
 8004074:	4620      	mov	r0, r4
 8004076:	f005 ff7a 	bl	8009f6e <wc_ecc_del_point>
    if (ret < 0) {
 800407a:	2f00      	cmp	r7, #0
 800407c:	dbb1      	blt.n	8003fe2 <ecc_test+0x8ca>
    ecc_key *key = (ecc_key *)XMALLOC(sizeof *key, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800407e:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004082:	f016 ff8d 	bl	801afa0 <malloc>
    word32 idx = 0;
 8004086:	2500      	movs	r5, #0
 8004088:	950b      	str	r5, [sp, #44]	; 0x2c
    if (key == NULL)
 800408a:	4604      	mov	r4, r0
 800408c:	2800      	cmp	r0, #0
 800408e:	f000 82c4 	beq.w	800461a <ecc_test+0xf02>
    wc_ecc_init_ex(key, HEAP_HINT, devId);
 8004092:	f06f 0201 	mvn.w	r2, #1
 8004096:	4629      	mov	r1, r5
 8004098:	f006 f878 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_set_flags(NULL, 0);
 800409c:	4629      	mov	r1, r5
 800409e:	4628      	mov	r0, r5
 80040a0:	f006 f8ae 	bl	800a200 <wc_ecc_set_flags>
    if (ret != BAD_FUNC_ARG) {
 80040a4:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80040a8:	f000 8120 	beq.w	80042ec <ecc_test+0xbd4>
        ret = WC_TEST_RET_ENC_EC(ret);
 80040ac:	4240      	negs	r0, r0
 80040ae:	4b95      	ldr	r3, [pc, #596]	; (8004304 <ecc_test+0xbec>)
 80040b0:	4f96      	ldr	r7, [pc, #600]	; (800430c <ecc_test+0xbf4>)
 80040b2:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 80040b6:	fb03 7700 	mla	r7, r3, r0, r7
 80040ba:	e17b      	b.n	80043b4 <ecc_test+0xc9c>
    ret = wc_ecc_import_point_der(der, sizeof(der), ECC_CURVE_INVALID, point);
 80040bc:	4623      	mov	r3, r4
 80040be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c2:	4639      	mov	r1, r7
 80040c4:	a81f      	add	r0, sp, #124	; 0x7c
 80040c6:	f007 fcc3 	bl	800ba50 <wc_ecc_import_point_der>
    if (ret != ECC_BAD_ARG_E) {
 80040ca:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 80040ce:	d005      	beq.n	80040dc <ecc_test+0x9c4>
        ret = WC_TEST_RET_ENC_EC(ret);
 80040d0:	4240      	negs	r0, r0
 80040d2:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <ecc_test+0xbec>)
 80040d4:	4f8e      	ldr	r7, [pc, #568]	; (8004310 <ecc_test+0xbf8>)
 80040d6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80040da:	e7c6      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_import_point_der(der, sizeof(der), curve_idx, NULL);
 80040dc:	2300      	movs	r3, #0
 80040de:	462a      	mov	r2, r5
 80040e0:	4639      	mov	r1, r7
 80040e2:	a81f      	add	r0, sp, #124	; 0x7c
 80040e4:	f007 fcb4 	bl	800ba50 <wc_ecc_import_point_der>
    if (ret != ECC_BAD_ARG_E) {
 80040e8:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 80040ec:	d005      	beq.n	80040fa <ecc_test+0x9e2>
        ret = WC_TEST_RET_ENC_EC(ret);
 80040ee:	4240      	negs	r0, r0
 80040f0:	4b84      	ldr	r3, [pc, #528]	; (8004304 <ecc_test+0xbec>)
 80040f2:	4f88      	ldr	r7, [pc, #544]	; (8004314 <ecc_test+0xbfc>)
 80040f4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80040f8:	e7b7      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_export_point_der(-1, point, out, &outLen);
 80040fa:	ab0b      	add	r3, sp, #44	; 0x2c
 80040fc:	aa0e      	add	r2, sp, #56	; 0x38
 80040fe:	4621      	mov	r1, r4
 8004100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004104:	f007 fcac 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != ECC_BAD_ARG_E) {
 8004108:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 800410c:	d005      	beq.n	800411a <ecc_test+0xa02>
        ret = WC_TEST_RET_ENC_EC(ret);
 800410e:	4240      	negs	r0, r0
 8004110:	4b7c      	ldr	r3, [pc, #496]	; (8004304 <ecc_test+0xbec>)
 8004112:	4f81      	ldr	r7, [pc, #516]	; (8004318 <ecc_test+0xc00>)
 8004114:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004118:	e7a7      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_export_point_der(curve_idx, NULL, out, &outLen);
 800411a:	ab0b      	add	r3, sp, #44	; 0x2c
 800411c:	aa0e      	add	r2, sp, #56	; 0x38
 800411e:	2100      	movs	r1, #0
 8004120:	4628      	mov	r0, r5
 8004122:	f007 fc9d 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != ECC_BAD_ARG_E) {
 8004126:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 800412a:	d005      	beq.n	8004138 <ecc_test+0xa20>
        ret = WC_TEST_RET_ENC_EC(ret);
 800412c:	4240      	negs	r0, r0
 800412e:	4b75      	ldr	r3, [pc, #468]	; (8004304 <ecc_test+0xbec>)
 8004130:	4f7a      	ldr	r7, [pc, #488]	; (800431c <ecc_test+0xc04>)
 8004132:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004136:	e798      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_export_point_der(curve_idx, point, NULL, &outLen);
 8004138:	ab0b      	add	r3, sp, #44	; 0x2c
 800413a:	2200      	movs	r2, #0
 800413c:	4621      	mov	r1, r4
 800413e:	4628      	mov	r0, r5
 8004140:	f007 fc8e 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != LENGTH_ONLY_E || outLen != sizeof(out)) {
 8004144:	f110 0fca 	cmn.w	r0, #202	; 0xca
 8004148:	d102      	bne.n	8004150 <ecc_test+0xa38>
 800414a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800414c:	2b41      	cmp	r3, #65	; 0x41
 800414e:	d005      	beq.n	800415c <ecc_test+0xa44>
        ret = WC_TEST_RET_ENC_EC(ret);
 8004150:	4240      	negs	r0, r0
 8004152:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <ecc_test+0xbec>)
 8004154:	4f72      	ldr	r7, [pc, #456]	; (8004320 <ecc_test+0xc08>)
 8004156:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800415a:	e786      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_export_point_der(curve_idx, point, out, NULL);
 800415c:	2300      	movs	r3, #0
 800415e:	aa0e      	add	r2, sp, #56	; 0x38
 8004160:	4621      	mov	r1, r4
 8004162:	4628      	mov	r0, r5
 8004164:	f007 fc7c 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != ECC_BAD_ARG_E) {
 8004168:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 800416c:	d005      	beq.n	800417a <ecc_test+0xa62>
        ret = WC_TEST_RET_ENC_EC(ret);
 800416e:	4240      	negs	r0, r0
 8004170:	4b64      	ldr	r3, [pc, #400]	; (8004304 <ecc_test+0xbec>)
 8004172:	4f6c      	ldr	r7, [pc, #432]	; (8004324 <ecc_test+0xc0c>)
 8004174:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004178:	e777      	b.n	800406a <ecc_test+0x952>
    outLen = 0;
 800417a:	2700      	movs	r7, #0
    ret = wc_ecc_export_point_der(curve_idx, point, out, &outLen);
 800417c:	ab0b      	add	r3, sp, #44	; 0x2c
 800417e:	aa0e      	add	r2, sp, #56	; 0x38
 8004180:	4621      	mov	r1, r4
 8004182:	4628      	mov	r0, r5
    outLen = 0;
 8004184:	970b      	str	r7, [sp, #44]	; 0x2c
    ret = wc_ecc_export_point_der(curve_idx, point, out, &outLen);
 8004186:	f007 fc6b 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != BUFFER_E) {
 800418a:	f110 0f84 	cmn.w	r0, #132	; 0x84
 800418e:	d005      	beq.n	800419c <ecc_test+0xa84>
        ret = WC_TEST_RET_ENC_EC(ret);
 8004190:	4240      	negs	r0, r0
 8004192:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <ecc_test+0xbec>)
 8004194:	4f64      	ldr	r7, [pc, #400]	; (8004328 <ecc_test+0xc10>)
 8004196:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800419a:	e766      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_copy_point(NULL, NULL);
 800419c:	4639      	mov	r1, r7
 800419e:	4638      	mov	r0, r7
 80041a0:	f005 fee7 	bl	8009f72 <wc_ecc_copy_point>
    if (ret != ECC_BAD_ARG_E) {
 80041a4:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 80041a8:	d005      	beq.n	80041b6 <ecc_test+0xa9e>
        ret = WC_TEST_RET_ENC_EC(ret);
 80041aa:	4240      	negs	r0, r0
 80041ac:	4b55      	ldr	r3, [pc, #340]	; (8004304 <ecc_test+0xbec>)
 80041ae:	4f5f      	ldr	r7, [pc, #380]	; (800432c <ecc_test+0xc14>)
 80041b0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80041b4:	e759      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_copy_point(NULL, point2);
 80041b6:	4631      	mov	r1, r6
 80041b8:	4638      	mov	r0, r7
 80041ba:	f005 feda 	bl	8009f72 <wc_ecc_copy_point>
    if (ret != ECC_BAD_ARG_E) {
 80041be:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 80041c2:	d005      	beq.n	80041d0 <ecc_test+0xab8>
        ret = WC_TEST_RET_ENC_EC(ret);
 80041c4:	4240      	negs	r0, r0
 80041c6:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <ecc_test+0xbec>)
 80041c8:	4f59      	ldr	r7, [pc, #356]	; (8004330 <ecc_test+0xc18>)
 80041ca:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80041ce:	e74c      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_copy_point(point, NULL);
 80041d0:	4639      	mov	r1, r7
 80041d2:	4620      	mov	r0, r4
 80041d4:	f005 fecd 	bl	8009f72 <wc_ecc_copy_point>
    if (ret != ECC_BAD_ARG_E) {
 80041d8:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 80041dc:	d005      	beq.n	80041ea <ecc_test+0xad2>
        ret = WC_TEST_RET_ENC_EC(ret);
 80041de:	4240      	negs	r0, r0
 80041e0:	4b48      	ldr	r3, [pc, #288]	; (8004304 <ecc_test+0xbec>)
 80041e2:	4f54      	ldr	r7, [pc, #336]	; (8004334 <ecc_test+0xc1c>)
 80041e4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80041e8:	e73f      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_cmp_point(NULL, NULL);
 80041ea:	4639      	mov	r1, r7
 80041ec:	4638      	mov	r0, r7
 80041ee:	f005 feda 	bl	8009fa6 <wc_ecc_cmp_point>
    if (ret != BAD_FUNC_ARG) {
 80041f2:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80041f6:	d005      	beq.n	8004204 <ecc_test+0xaec>
        ret = WC_TEST_RET_ENC_EC(ret);
 80041f8:	4240      	negs	r0, r0
 80041fa:	4b42      	ldr	r3, [pc, #264]	; (8004304 <ecc_test+0xbec>)
 80041fc:	4f4e      	ldr	r7, [pc, #312]	; (8004338 <ecc_test+0xc20>)
 80041fe:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004202:	e732      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_cmp_point(NULL, point2);
 8004204:	4631      	mov	r1, r6
 8004206:	4638      	mov	r0, r7
 8004208:	f005 fecd 	bl	8009fa6 <wc_ecc_cmp_point>
    if (ret != BAD_FUNC_ARG) {
 800420c:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8004210:	d005      	beq.n	800421e <ecc_test+0xb06>
        ret = WC_TEST_RET_ENC_EC(ret);
 8004212:	4240      	negs	r0, r0
 8004214:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <ecc_test+0xbec>)
 8004216:	4f49      	ldr	r7, [pc, #292]	; (800433c <ecc_test+0xc24>)
 8004218:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800421c:	e725      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_cmp_point(point, NULL);
 800421e:	4639      	mov	r1, r7
 8004220:	4620      	mov	r0, r4
 8004222:	f005 fec0 	bl	8009fa6 <wc_ecc_cmp_point>
    if (ret != BAD_FUNC_ARG) {
 8004226:	f110 0fad 	cmn.w	r0, #173	; 0xad
 800422a:	d005      	beq.n	8004238 <ecc_test+0xb20>
        ret = WC_TEST_RET_ENC_EC(ret);
 800422c:	4240      	negs	r0, r0
 800422e:	4b35      	ldr	r3, [pc, #212]	; (8004304 <ecc_test+0xbec>)
 8004230:	4f43      	ldr	r7, [pc, #268]	; (8004340 <ecc_test+0xc28>)
 8004232:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004236:	e718      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_import_point_der(der, sizeof(der), curve_idx, point);
 8004238:	4623      	mov	r3, r4
 800423a:	462a      	mov	r2, r5
 800423c:	2141      	movs	r1, #65	; 0x41
 800423e:	a81f      	add	r0, sp, #124	; 0x7c
 8004240:	f007 fc06 	bl	800ba50 <wc_ecc_import_point_der>
    if (ret != 0) {
 8004244:	b128      	cbz	r0, 8004252 <ecc_test+0xb3a>
        ret = WC_TEST_RET_ENC_EC(ret);
 8004246:	4240      	negs	r0, r0
 8004248:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <ecc_test+0xbec>)
 800424a:	4f3e      	ldr	r7, [pc, #248]	; (8004344 <ecc_test+0xc2c>)
 800424c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004250:	e70b      	b.n	800406a <ecc_test+0x952>
    outLen = sizeof(out);
 8004252:	2341      	movs	r3, #65	; 0x41
 8004254:	930b      	str	r3, [sp, #44]	; 0x2c
    ret = wc_ecc_export_point_der(curve_idx, point, out, &outLen);
 8004256:	aa0e      	add	r2, sp, #56	; 0x38
 8004258:	ab0b      	add	r3, sp, #44	; 0x2c
 800425a:	4621      	mov	r1, r4
 800425c:	4628      	mov	r0, r5
 800425e:	f007 fbff 	bl	800ba60 <wc_ecc_export_point_der>
    if (ret != 0) {
 8004262:	b128      	cbz	r0, 8004270 <ecc_test+0xb58>
        ret = WC_TEST_RET_ENC_EC(ret);
 8004264:	4240      	negs	r0, r0
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <ecc_test+0xbec>)
 8004268:	4f37      	ldr	r7, [pc, #220]	; (8004348 <ecc_test+0xc30>)
 800426a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800426e:	e6fc      	b.n	800406a <ecc_test+0x952>
    if (outLen != sizeof(der)) {
 8004270:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004272:	2f41      	cmp	r7, #65	; 0x41
 8004274:	d136      	bne.n	80042e4 <ecc_test+0xbcc>
    if (XMEMCMP(out, der, outLen) != 0) {
 8004276:	463a      	mov	r2, r7
 8004278:	a91f      	add	r1, sp, #124	; 0x7c
 800427a:	a80e      	add	r0, sp, #56	; 0x38
 800427c:	f016 fea0 	bl	801afc0 <memcmp>
 8004280:	bb90      	cbnz	r0, 80042e8 <ecc_test+0xbd0>
    ret = wc_ecc_copy_point(point2, point);
 8004282:	4621      	mov	r1, r4
 8004284:	4630      	mov	r0, r6
 8004286:	f005 fe74 	bl	8009f72 <wc_ecc_copy_point>
    if (ret != MP_OKAY) {
 800428a:	b128      	cbz	r0, 8004298 <ecc_test+0xb80>
        ret = WC_TEST_RET_ENC_EC(ret);
 800428c:	4240      	negs	r0, r0
 800428e:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <ecc_test+0xbec>)
 8004290:	4f2e      	ldr	r7, [pc, #184]	; (800434c <ecc_test+0xc34>)
 8004292:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004296:	e6e8      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_cmp_point(point2, point);
 8004298:	4621      	mov	r1, r4
 800429a:	4630      	mov	r0, r6
 800429c:	f005 fe83 	bl	8009fa6 <wc_ecc_cmp_point>
    if (ret != MP_EQ) {
 80042a0:	b128      	cbz	r0, 80042ae <ecc_test+0xb96>
        ret = WC_TEST_RET_ENC_EC(ret);
 80042a2:	4240      	negs	r0, r0
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <ecc_test+0xbec>)
 80042a6:	4f2a      	ldr	r7, [pc, #168]	; (8004350 <ecc_test+0xc38>)
 80042a8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80042ac:	e6dd      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_import_point_der(altDer, sizeof(altDer), curve_idx, point2);
 80042ae:	4633      	mov	r3, r6
 80042b0:	462a      	mov	r2, r5
 80042b2:	4639      	mov	r1, r7
 80042b4:	a830      	add	r0, sp, #192	; 0xc0
 80042b6:	f007 fbcb 	bl	800ba50 <wc_ecc_import_point_der>
    if (ret != 0) {
 80042ba:	b128      	cbz	r0, 80042c8 <ecc_test+0xbb0>
        ret = WC_TEST_RET_ENC_EC(ret);
 80042bc:	4240      	negs	r0, r0
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <ecc_test+0xbec>)
 80042c0:	4f24      	ldr	r7, [pc, #144]	; (8004354 <ecc_test+0xc3c>)
 80042c2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80042c6:	e6d0      	b.n	800406a <ecc_test+0x952>
    ret = wc_ecc_cmp_point(point2, point);
 80042c8:	4621      	mov	r1, r4
 80042ca:	4630      	mov	r0, r6
 80042cc:	f005 fe6b 	bl	8009fa6 <wc_ecc_cmp_point>
    if (ret != MP_GT) {
 80042d0:	2801      	cmp	r0, #1
    ret = wc_ecc_cmp_point(point2, point);
 80042d2:	4607      	mov	r7, r0
    if (ret != MP_GT) {
 80042d4:	f43f aecb 	beq.w	800406e <ecc_test+0x956>
        ret = WC_TEST_RET_ENC_EC(ret);
 80042d8:	4240      	negs	r0, r0
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <ecc_test+0xbec>)
 80042dc:	4f1e      	ldr	r7, [pc, #120]	; (8004358 <ecc_test+0xc40>)
 80042de:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80042e2:	e6c2      	b.n	800406a <ecc_test+0x952>
        ret = WC_TEST_RET_ENC_NC;
 80042e4:	4f1d      	ldr	r7, [pc, #116]	; (800435c <ecc_test+0xc44>)
 80042e6:	e6c2      	b.n	800406e <ecc_test+0x956>
        ret = WC_TEST_RET_ENC_NC;
 80042e8:	4f1d      	ldr	r7, [pc, #116]	; (8004360 <ecc_test+0xc48>)
 80042ea:	e6c0      	b.n	800406e <ecc_test+0x956>
    ret = wc_ecc_set_flags(key, 0);
 80042ec:	4629      	mov	r1, r5
 80042ee:	4620      	mov	r0, r4
 80042f0:	f005 ff86 	bl	800a200 <wc_ecc_set_flags>
    if (ret != 0) {
 80042f4:	b3c0      	cbz	r0, 8004368 <ecc_test+0xc50>
        ret = WC_TEST_RET_ENC_EC(ret);
 80042f6:	4240      	negs	r0, r0
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <ecc_test+0xbec>)
 80042fa:	4f1a      	ldr	r7, [pc, #104]	; (8004364 <ecc_test+0xc4c>)
 80042fc:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004300:	e6d9      	b.n	80040b6 <ecc_test+0x99e>
 8004302:	bf00      	nop
 8004304:	fffe7960 	.word	0xfffe7960
 8004308:	dfff973e 	.word	0xdfff973e
 800430c:	dfff9558 	.word	0xdfff9558
 8004310:	dfff9739 	.word	0xdfff9739
 8004314:	dfff9734 	.word	0xdfff9734
 8004318:	dfff972f 	.word	0xdfff972f
 800431c:	dfff972a 	.word	0xdfff972a
 8004320:	dfff9725 	.word	0xdfff9725
 8004324:	dfff9720 	.word	0xdfff9720
 8004328:	dfff971a 	.word	0xdfff971a
 800432c:	dfff9715 	.word	0xdfff9715
 8004330:	dfff9710 	.word	0xdfff9710
 8004334:	dfff970b 	.word	0xdfff970b
 8004338:	dfff9706 	.word	0xdfff9706
 800433c:	dfff9701 	.word	0xdfff9701
 8004340:	dfff96fc 	.word	0xdfff96fc
 8004344:	dfff96f5 	.word	0xdfff96f5
 8004348:	dfff96ee 	.word	0xdfff96ee
 800434c:	dfff96e0 	.word	0xdfff96e0
 8004350:	dfff96db 	.word	0xdfff96db
 8004354:	dfff96d5 	.word	0xdfff96d5
 8004358:	dfff96d0 	.word	0xdfff96d0
 800435c:	ffff96ea 	.word	0xffff96ea
 8004360:	ffff96e6 	.word	0xffff96e6
 8004364:	dfff9553 	.word	0xdfff9553
    ret = wc_ecc_make_key(rng, ECC_KEYGEN_SIZE, key);
 8004368:	4622      	mov	r2, r4
 800436a:	2120      	movs	r1, #32
 800436c:	a80c      	add	r0, sp, #48	; 0x30
 800436e:	f006 fd32 	bl	800add6 <wc_ecc_make_key>
    if (ret != 0) {
 8004372:	4607      	mov	r7, r0
 8004374:	b9f0      	cbnz	r0, 80043b4 <ecc_test+0xc9c>
    byte    in[] = TEST_STRING;
 8004376:	4baa      	ldr	r3, [pc, #680]	; (8004620 <ecc_test+0xf08>)
 8004378:	aa1f      	add	r2, sp, #124	; 0x7c
 800437a:	f103 0618 	add.w	r6, r3, #24
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	4615      	mov	r5, r2
 8004384:	c503      	stmia	r5!, {r0, r1}
 8004386:	3308      	adds	r3, #8
 8004388:	42b3      	cmp	r3, r6
 800438a:	462a      	mov	r2, r5
 800438c:	d1f7      	bne.n	800437e <ecc_test+0xc66>
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	802b      	strh	r3, [r5, #0]
    word32 inLen = (word32)XSTRLEN((char*)in);
 8004392:	a81f      	add	r0, sp, #124	; 0x7c
 8004394:	f016 ffa7 	bl	801b2e6 <strlen>
 8004398:	4606      	mov	r6, r0
    size = wc_ecc_sig_size(key);
 800439a:	4620      	mov	r0, r4
 800439c:	f007 ff45 	bl	800c22a <wc_ecc_sig_size>
    ret = wc_SignatureGetSize(WC_SIGNATURE_TYPE_ECC, key, sizeof(*key));
 80043a0:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    size = wc_ecc_sig_size(key);
 80043a4:	4605      	mov	r5, r0
    ret = wc_SignatureGetSize(WC_SIGNATURE_TYPE_ECC, key, sizeof(*key));
 80043a6:	4621      	mov	r1, r4
 80043a8:	2001      	movs	r0, #1
 80043aa:	f013 fbda 	bl	8017b62 <wc_SignatureGetSize>
    if (ret != size)
 80043ae:	4285      	cmp	r5, r0
 80043b0:	d00d      	beq.n	80043ce <ecc_test+0xcb6>
        return WC_TEST_RET_ENC_NC;
 80043b2:	4f9c      	ldr	r7, [pc, #624]	; (8004624 <ecc_test+0xf0c>)
    wc_ecc_free(key);
 80043b4:	4620      	mov	r0, r4
 80043b6:	f005 ff2c 	bl	800a212 <wc_ecc_free>
    if (key != NULL) {
 80043ba:	b114      	cbz	r4, 80043c2 <ecc_test+0xcaa>
        XFREE(key, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 80043bc:	4620      	mov	r0, r4
 80043be:	f016 fdf7 	bl	801afb0 <free>
    if (ret < 0) {
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	f280 814e 	bge.w	8004664 <ecc_test+0xf4c>
        printf("Default\n");
 80043c8:	4897      	ldr	r0, [pc, #604]	; (8004628 <ecc_test+0xf10>)
 80043ca:	f7ff bbe0 	b.w	8003b8e <ecc_test+0x476>
    ret = wc_SignatureGenerate(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC, in,
 80043ce:	ab0c      	add	r3, sp, #48	; 0x30
 80043d0:	9304      	str	r3, [sp, #16]
 80043d2:	ab0e      	add	r3, sp, #56	; 0x38
    sigSz = (word32)ret;
 80043d4:	950e      	str	r5, [sp, #56]	; 0x38
    ret = wc_SignatureGenerate(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC, in,
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	f44f 75de 	mov.w	r5, #444	; 0x1bc
 80043dc:	ab30      	add	r3, sp, #192	; 0xc0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80043e4:	4633      	mov	r3, r6
 80043e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80043e8:	2101      	movs	r1, #1
 80043ea:	2006      	movs	r0, #6
 80043ec:	f013 fd3d 	bl	8017e6a <wc_SignatureGenerate>
    if (ret != 0)
 80043f0:	b128      	cbz	r0, 80043fe <ecc_test+0xce6>
        return WC_TEST_RET_ENC_EC(ret);
 80043f2:	4240      	negs	r0, r0
 80043f4:	4b8d      	ldr	r3, [pc, #564]	; (800462c <ecc_test+0xf14>)
 80043f6:	4f8e      	ldr	r7, [pc, #568]	; (8004630 <ecc_test+0xf18>)
 80043f8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80043fc:	e65b      	b.n	80040b6 <ecc_test+0x99e>
    ret = wc_SignatureVerify(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC, in,
 80043fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	ab30      	add	r3, sp, #192	; 0xc0
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800440a:	4633      	mov	r3, r6
 800440c:	aa1f      	add	r2, sp, #124	; 0x7c
 800440e:	2101      	movs	r1, #1
 8004410:	2006      	movs	r0, #6
 8004412:	f013 fc06 	bl	8017c22 <wc_SignatureVerify>
    if (ret != 0)
 8004416:	b128      	cbz	r0, 8004424 <ecc_test+0xd0c>
        return WC_TEST_RET_ENC_EC(ret);
 8004418:	4240      	negs	r0, r0
 800441a:	4b84      	ldr	r3, [pc, #528]	; (800462c <ecc_test+0xf14>)
 800441c:	4f85      	ldr	r7, [pc, #532]	; (8004634 <ecc_test+0xf1c>)
 800441e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004422:	e648      	b.n	80040b6 <ecc_test+0x99e>
    sigSz = (word32)sizeof(out);
 8004424:	2349      	movs	r3, #73	; 0x49
 8004426:	930e      	str	r3, [sp, #56]	; 0x38
    ret = wc_SignatureGenerateHash(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC,
 8004428:	ab0c      	add	r3, sp, #48	; 0x30
 800442a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800442e:	ab0e      	add	r3, sp, #56	; 0x38
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	ab30      	add	r3, sp, #192	; 0xc0
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4a80      	ldr	r2, [pc, #512]	; (8004638 <ecc_test+0xf20>)
 8004438:	9402      	str	r4, [sp, #8]
 800443a:	2320      	movs	r3, #32
 800443c:	2101      	movs	r1, #1
 800443e:	2006      	movs	r0, #6
 8004440:	f013 fca6 	bl	8017d90 <wc_SignatureGenerateHash>
    if (ret != 0)
 8004444:	b128      	cbz	r0, 8004452 <ecc_test+0xd3a>
        return WC_TEST_RET_ENC_EC(ret);
 8004446:	4240      	negs	r0, r0
 8004448:	4b78      	ldr	r3, [pc, #480]	; (800462c <ecc_test+0xf14>)
 800444a:	4f7c      	ldr	r7, [pc, #496]	; (800463c <ecc_test+0xf24>)
 800444c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004450:	e631      	b.n	80040b6 <ecc_test+0x99e>
    ret = wc_SignatureVerifyHash(WC_HASH_TYPE_SHA256, WC_SIGNATURE_TYPE_ECC,
 8004452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	ab30      	add	r3, sp, #192	; 0xc0
 8004458:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4a76      	ldr	r2, [pc, #472]	; (8004638 <ecc_test+0xf20>)
 8004460:	2320      	movs	r3, #32
 8004462:	2101      	movs	r1, #1
 8004464:	2006      	movs	r0, #6
 8004466:	f013 fb90 	bl	8017b8a <wc_SignatureVerifyHash>
    if (ret != 0)
 800446a:	4605      	mov	r5, r0
 800446c:	b9d0      	cbnz	r0, 80044a4 <ecc_test+0xd8c>
    word32 outLen = sizeof(out);
 800446e:	2380      	movs	r3, #128	; 0x80
    ret = wc_ecc_shared_secret_ssh(NULL, &key->pubkey, out, &outLen);
 8004470:	f104 0618 	add.w	r6, r4, #24
    word32 outLen = sizeof(out);
 8004474:	931f      	str	r3, [sp, #124]	; 0x7c
    ret = wc_ecc_shared_secret_ssh(NULL, &key->pubkey, out, &outLen);
 8004476:	aa30      	add	r2, sp, #192	; 0xc0
 8004478:	ab1f      	add	r3, sp, #124	; 0x7c
 800447a:	4631      	mov	r1, r6
 800447c:	f006 fb1f 	bl	800aabe <wc_ecc_shared_secret_ex>
    if (ret != BAD_FUNC_ARG)
 8004480:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8004484:	d116      	bne.n	80044b4 <ecc_test+0xd9c>
    ret = wc_ecc_shared_secret_ssh(key, NULL, out, &outLen);
 8004486:	ab1f      	add	r3, sp, #124	; 0x7c
 8004488:	aa30      	add	r2, sp, #192	; 0xc0
 800448a:	4629      	mov	r1, r5
 800448c:	4620      	mov	r0, r4
 800448e:	f006 fb16 	bl	800aabe <wc_ecc_shared_secret_ex>
    if (ret != BAD_FUNC_ARG)
 8004492:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8004496:	d013      	beq.n	80044c0 <ecc_test+0xda8>
        return WC_TEST_RET_ENC_EC(ret);
 8004498:	4240      	negs	r0, r0
 800449a:	4b64      	ldr	r3, [pc, #400]	; (800462c <ecc_test+0xf14>)
 800449c:	4f68      	ldr	r7, [pc, #416]	; (8004640 <ecc_test+0xf28>)
 800449e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80044a2:	e608      	b.n	80040b6 <ecc_test+0x99e>
        return WC_TEST_RET_ENC_EC(ret);
 80044a4:	4245      	negs	r5, r0
 80044a6:	4f61      	ldr	r7, [pc, #388]	; (800462c <ecc_test+0xf14>)
 80044a8:	4866      	ldr	r0, [pc, #408]	; (8004644 <ecc_test+0xf2c>)
 80044aa:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80044ae:	fb07 0705 	mla	r7, r7, r5, r0
 80044b2:	e77f      	b.n	80043b4 <ecc_test+0xc9c>
        return WC_TEST_RET_ENC_EC(ret);
 80044b4:	4240      	negs	r0, r0
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <ecc_test+0xf14>)
 80044b8:	4f63      	ldr	r7, [pc, #396]	; (8004648 <ecc_test+0xf30>)
 80044ba:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80044be:	e5fa      	b.n	80040b6 <ecc_test+0x99e>
    ret = wc_ecc_shared_secret_ssh(key, &key->pubkey, NULL, &outLen);
 80044c0:	ab1f      	add	r3, sp, #124	; 0x7c
 80044c2:	462a      	mov	r2, r5
 80044c4:	4631      	mov	r1, r6
 80044c6:	4620      	mov	r0, r4
 80044c8:	f006 faf9 	bl	800aabe <wc_ecc_shared_secret_ex>
    if (ret != BAD_FUNC_ARG)
 80044cc:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80044d0:	d005      	beq.n	80044de <ecc_test+0xdc6>
        return WC_TEST_RET_ENC_EC(ret);
 80044d2:	4240      	negs	r0, r0
 80044d4:	4b55      	ldr	r3, [pc, #340]	; (800462c <ecc_test+0xf14>)
 80044d6:	4f5d      	ldr	r7, [pc, #372]	; (800464c <ecc_test+0xf34>)
 80044d8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80044dc:	e5eb      	b.n	80040b6 <ecc_test+0x99e>
    ret = wc_ecc_shared_secret_ssh(key, &key->pubkey, out, NULL);
 80044de:	462b      	mov	r3, r5
 80044e0:	aa30      	add	r2, sp, #192	; 0xc0
 80044e2:	4631      	mov	r1, r6
 80044e4:	4620      	mov	r0, r4
 80044e6:	f006 faea 	bl	800aabe <wc_ecc_shared_secret_ex>
    if (ret != BAD_FUNC_ARG)
 80044ea:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80044ee:	d005      	beq.n	80044fc <ecc_test+0xde4>
        return WC_TEST_RET_ENC_EC(ret);
 80044f0:	4240      	negs	r0, r0
 80044f2:	4b4e      	ldr	r3, [pc, #312]	; (800462c <ecc_test+0xf14>)
 80044f4:	4f56      	ldr	r7, [pc, #344]	; (8004650 <ecc_test+0xf38>)
 80044f6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80044fa:	e5dc      	b.n	80040b6 <ecc_test+0x99e>
    ret = wc_ecc_set_rng(key, rng);
 80044fc:	a90c      	add	r1, sp, #48	; 0x30
 80044fe:	4620      	mov	r0, r4
 8004500:	f007 fed6 	bl	800c2b0 <wc_ecc_set_rng>
    if (ret != 0)
 8004504:	b128      	cbz	r0, 8004512 <ecc_test+0xdfa>
        return WC_TEST_RET_ENC_EC(ret);
 8004506:	4240      	negs	r0, r0
 8004508:	4b48      	ldr	r3, [pc, #288]	; (800462c <ecc_test+0xf14>)
 800450a:	4f52      	ldr	r7, [pc, #328]	; (8004654 <ecc_test+0xf3c>)
 800450c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004510:	e5d1      	b.n	80040b6 <ecc_test+0x99e>
            ret = wc_ecc_shared_secret_ssh(key, &key->pubkey, out, &outLen);
 8004512:	ab1f      	add	r3, sp, #124	; 0x7c
 8004514:	aa30      	add	r2, sp, #192	; 0xc0
 8004516:	4631      	mov	r1, r6
 8004518:	4620      	mov	r0, r4
 800451a:	f006 fad0 	bl	800aabe <wc_ecc_shared_secret_ex>
    } while (ret == WC_PENDING_E);
 800451e:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
            ret = wc_ecc_shared_secret_ssh(key, &key->pubkey, out, &outLen);
 8004522:	4680      	mov	r8, r0
    } while (ret == WC_PENDING_E);
 8004524:	d100      	bne.n	8004528 <ecc_test+0xe10>
 8004526:	e7fe      	b.n	8004526 <ecc_test+0xe0e>
    if (ret != 0)
 8004528:	2800      	cmp	r0, #0
 800452a:	d164      	bne.n	80045f6 <ecc_test+0xede>
    wc_ecc_free(key);
 800452c:	4620      	mov	r0, r4
 800452e:	f005 fe70 	bl	800a212 <wc_ecc_free>
    ret = wc_EccPrivateKeyDecode(ecc_key_der_256, &idx, key,
 8004532:	4849      	ldr	r0, [pc, #292]	; (8004658 <ecc_test+0xf40>)
 8004534:	2379      	movs	r3, #121	; 0x79
 8004536:	4622      	mov	r2, r4
 8004538:	a90b      	add	r1, sp, #44	; 0x2c
 800453a:	f00c ffc8 	bl	80114ce <wc_EccPrivateKeyDecode>
    if (ret != 0) {
 800453e:	4607      	mov	r7, r0
 8004540:	2800      	cmp	r0, #0
 8004542:	f47f af37 	bne.w	80043b4 <ecc_test+0xc9c>
    ret = ecc_exp_imp_test(key);
 8004546:	4620      	mov	r0, r4
 8004548:	f7fb fece 	bl	80002e8 <ecc_exp_imp_test>
    if (ret < 0)
 800454c:	1e07      	subs	r7, r0, #0
 800454e:	f6ff af31 	blt.w	80043b4 <ecc_test+0xc9c>
    ecc_key    *key2 = (ecc_key *)XMALLOC(sizeof *key2, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004552:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004556:	f016 fd23 	bl	801afa0 <malloc>
 800455a:	4606      	mov	r6, r0
    ecc_key    *key3 = (ecc_key *)XMALLOC(sizeof *key3, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800455c:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004560:	f016 fd1e 	bl	801afa0 <malloc>
 8004564:	4605      	mov	r5, r0
    if ((key2 == NULL) || (key3 == NULL))
 8004566:	2e00      	cmp	r6, #0
 8004568:	d04b      	beq.n	8004602 <ecc_test+0xeea>
 800456a:	2800      	cmp	r0, #0
 800456c:	f000 8260 	beq.w	8004a30 <ecc_test+0x1318>
    wc_ecc_init_ex(key2, HEAP_HINT, devId);
 8004570:	4641      	mov	r1, r8
 8004572:	f06f 0201 	mvn.w	r2, #1
 8004576:	4630      	mov	r0, r6
 8004578:	f005 fe08 	bl	800a18c <wc_ecc_init_ex>
    wc_ecc_init_ex(key3, HEAP_HINT, devId);
 800457c:	4641      	mov	r1, r8
 800457e:	f06f 0201 	mvn.w	r2, #1
 8004582:	4628      	mov	r0, r5
 8004584:	f005 fe02 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_import_raw_ex(key2, key1->dp->Gx, key1->dp->Gy, key1->dp->Af,
 8004588:	f04f 0807 	mov.w	r8, #7
 800458c:	6921      	ldr	r1, [r4, #16]
 800458e:	f8cd 8000 	str.w	r8, [sp]
 8004592:	690b      	ldr	r3, [r1, #16]
 8004594:	4630      	mov	r0, r6
 8004596:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 800459a:	f007 fe02 	bl	800c1a2 <wc_ecc_import_raw_ex>
    if (ret != 0)
 800459e:	4607      	mov	r7, r0
 80045a0:	bb10      	cbnz	r0, 80045e8 <ecc_test+0xed0>
    ret = wc_ecc_import_raw_ex(key3, key1->dp->Gx, key1->dp->Gy,
 80045a2:	6921      	ldr	r1, [r4, #16]
 80045a4:	f8cd 8000 	str.w	r8, [sp]
 80045a8:	68cb      	ldr	r3, [r1, #12]
 80045aa:	4628      	mov	r0, r5
 80045ac:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 80045b0:	f007 fdf7 	bl	800c1a2 <wc_ecc_import_raw_ex>
    if (ret != 0)
 80045b4:	4607      	mov	r7, r0
 80045b6:	b9b8      	cbnz	r0, 80045e8 <ecc_test+0xed0>
    ret = wc_ecc_mulmod(wc_ecc_key_get_priv(key1), &key2->pubkey, &key3->pubkey,
 80045b8:	2301      	movs	r3, #1
 80045ba:	9301      	str	r3, [sp, #4]
                        wc_ecc_key_get_priv(key2), wc_ecc_key_get_priv(key3),
 80045bc:	f505 73a8 	add.w	r3, r5, #336	; 0x150
    ret = wc_ecc_mulmod(wc_ecc_key_get_priv(key1), &key2->pubkey, &key3->pubkey,
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f105 0218 	add.w	r2, r5, #24
 80045c6:	f506 73a8 	add.w	r3, r6, #336	; 0x150
 80045ca:	f106 0118 	add.w	r1, r6, #24
 80045ce:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80045d2:	f006 f912 	bl	800a7fa <wc_ecc_mulmod>
    if (ret != 0) {
 80045d6:	4607      	mov	r7, r0
 80045d8:	b130      	cbz	r0, 80045e8 <ecc_test+0xed0>
        ret = WC_TEST_RET_ENC_EC(ret);
 80045da:	4240      	negs	r0, r0
 80045dc:	f3c0 070a 	ubfx	r7, r0, #0, #11
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <ecc_test+0xf14>)
 80045e2:	481e      	ldr	r0, [pc, #120]	; (800465c <ecc_test+0xf44>)
 80045e4:	fb03 0707 	mla	r7, r3, r7, r0
        wc_ecc_free(key2);
 80045e8:	4630      	mov	r0, r6
 80045ea:	f005 fe12 	bl	800a212 <wc_ecc_free>
        XFREE(key2, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 80045ee:	4630      	mov	r0, r6
 80045f0:	f016 fcde 	bl	801afb0 <free>
 80045f4:	e007      	b.n	8004606 <ecc_test+0xeee>
        return WC_TEST_RET_ENC_EC(ret);
 80045f6:	4240      	negs	r0, r0
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <ecc_test+0xf14>)
 80045fa:	4f19      	ldr	r7, [pc, #100]	; (8004660 <ecc_test+0xf48>)
 80045fc:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004600:	e559      	b.n	80040b6 <ecc_test+0x99e>
        ERROR_OUT(MEMORY_E, done);
 8004602:	f06f 077c 	mvn.w	r7, #124	; 0x7c
    if (key3 != NULL) {
 8004606:	2d00      	cmp	r5, #0
 8004608:	f43f aed4 	beq.w	80043b4 <ecc_test+0xc9c>
        wc_ecc_free(key3);
 800460c:	4628      	mov	r0, r5
 800460e:	f005 fe00 	bl	800a212 <wc_ecc_free>
        XFREE(key3, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004612:	4628      	mov	r0, r5
 8004614:	f016 fccc 	bl	801afb0 <free>
 8004618:	e6cc      	b.n	80043b4 <ecc_test+0xc9c>
        ERROR_OUT(MEMORY_E, done);
 800461a:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 800461e:	e6c9      	b.n	80043b4 <ecc_test+0xc9c>
 8004620:	0801e6e2 	.word	0x0801e6e2
 8004624:	ffff9685 	.word	0xffff9685
 8004628:	0801e644 	.word	0x0801e644
 800462c:	fffe7960 	.word	0xfffe7960
 8004630:	dfff967f 	.word	0xdfff967f
 8004634:	dfff9679 	.word	0xdfff9679
 8004638:	0801f05a 	.word	0x0801f05a
 800463c:	dfff9672 	.word	0xdfff9672
 8004640:	dfff9592 	.word	0xdfff9592
 8004644:	dfff966c 	.word	0xdfff966c
 8004648:	dfff9595 	.word	0xdfff9595
 800464c:	dfff958f 	.word	0xdfff958f
 8004650:	dfff958c 	.word	0xdfff958c
 8004654:	dfff9585 	.word	0xdfff9585
 8004658:	0801efc6 	.word	0x0801efc6
 800465c:	dfff95b8 	.word	0xdfff95b8
 8004660:	dfff9576 	.word	0xdfff9576
    ecc_key *key = (ecc_key *)XMALLOC(sizeof *key, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004664:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004668:	f016 fc9a 	bl	801afa0 <malloc>
 800466c:	4605      	mov	r5, r0
    ecc_key *pub = (ecc_key *)XMALLOC(sizeof *pub, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800466e:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004672:	f016 fc95 	bl	801afa0 <malloc>
 8004676:	4681      	mov	r9, r0
    byte *exportBuf = (byte *)XMALLOC(ECC_BUFSIZE, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004678:	f240 1001 	movw	r0, #257	; 0x101
 800467c:	f016 fc90 	bl	801afa0 <malloc>
 8004680:	4606      	mov	r6, r0
    byte *tmp = (byte *)XMALLOC(ECC_BUFSIZE, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004682:	f240 1001 	movw	r0, #257	; 0x101
 8004686:	f016 fc8b 	bl	801afa0 <malloc>
    int verify = 0;
 800468a:	f04f 0a00 	mov.w	sl, #0
    byte *tmp = (byte *)XMALLOC(ECC_BUFSIZE, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800468e:	4680      	mov	r8, r0
    int verify = 0;
 8004690:	f8cd a0c0 	str.w	sl, [sp, #192]	; 0xc0
    if ((key == NULL) ||
 8004694:	2d00      	cmp	r5, #0
 8004696:	f000 8169 	beq.w	800496c <ecc_test+0x1254>
 800469a:	f1b9 0f00 	cmp.w	r9, #0
 800469e:	f000 8169 	beq.w	8004974 <ecc_test+0x125c>
        (pub == NULL) ||
 80046a2:	2e00      	cmp	r6, #0
 80046a4:	f000 8168 	beq.w	8004978 <ecc_test+0x1260>
        (exportBuf == NULL) ||
 80046a8:	2800      	cmp	r0, #0
 80046aa:	f000 8167 	beq.w	800497c <ecc_test+0x1264>
    wc_ecc_init_ex(key, HEAP_HINT, devId);
 80046ae:	f06f 0201 	mvn.w	r2, #1
 80046b2:	4651      	mov	r1, sl
 80046b4:	4628      	mov	r0, r5
 80046b6:	f005 fd69 	bl	800a18c <wc_ecc_init_ex>
    XMEMCPY(tmp, ecc_key_der_256, (size_t)sizeof_ecc_key_der_256);
 80046ba:	49b8      	ldr	r1, [pc, #736]	; (800499c <ecc_test+0x1284>)
 80046bc:	2279      	movs	r2, #121	; 0x79
 80046be:	4640      	mov	r0, r8
 80046c0:	f016 fc8e 	bl	801afe0 <memcpy>
    tmpSz = (size_t)sizeof_ecc_key_der_256;
 80046c4:	2179      	movs	r1, #121	; 0x79
    ret = wc_ecc_import_private_key(tmp, tmpSz, NULL, 0, NULL);
 80046c6:	f8cd a000 	str.w	sl, [sp]
 80046ca:	4653      	mov	r3, sl
 80046cc:	4652      	mov	r2, sl
 80046ce:	4640      	mov	r0, r8
    tmpSz = (size_t)sizeof_ecc_key_der_256;
 80046d0:	911f      	str	r1, [sp, #124]	; 0x7c
    ret = wc_ecc_import_private_key(tmp, tmpSz, NULL, 0, NULL);
 80046d2:	f007 fcd4 	bl	800c07e <wc_ecc_import_private_key>
    if (ret == 0) {
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f000 8152 	beq.w	8004980 <ecc_test+0x1268>
    ret = wc_ecc_import_private_key(NULL, tmpSz, NULL, 0, key);
 80046dc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80046de:	9500      	str	r5, [sp, #0]
 80046e0:	4653      	mov	r3, sl
 80046e2:	4652      	mov	r2, sl
 80046e4:	4650      	mov	r0, sl
 80046e6:	f007 fcca 	bl	800c07e <wc_ecc_import_private_key>
    if (ret == 0) {
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f000 814b 	beq.w	8004986 <ecc_test+0x126e>
    ret = wc_EccPrivateKeyDecode(tmp, &x, key, tmpSz);
 80046f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    x = 0;
 80046f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    ret = wc_EccPrivateKeyDecode(tmp, &x, key, tmpSz);
 80046f6:	462a      	mov	r2, r5
 80046f8:	a90e      	add	r1, sp, #56	; 0x38
 80046fa:	4640      	mov	r0, r8
 80046fc:	f00c fee7 	bl	80114ce <wc_EccPrivateKeyDecode>
    if (ret != 0)
 8004700:	4604      	mov	r4, r0
 8004702:	b140      	cbz	r0, 8004716 <ecc_test+0xffe>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004704:	4244      	negs	r4, r0
 8004706:	4fa6      	ldr	r7, [pc, #664]	; (80049a0 <ecc_test+0x1288>)
 8004708:	48a6      	ldr	r0, [pc, #664]	; (80049a4 <ecc_test+0x128c>)
 800470a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800470e:	fb07 0704 	mla	r7, r7, r4, r0
    ecc_point* pubPoint = NULL;
 8004712:	2400      	movs	r4, #0
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004714:	e012      	b.n	800473c <ecc_test+0x1024>
    x = ECC_BUFSIZE;
 8004716:	f240 1301 	movw	r3, #257	; 0x101
    ret = wc_ecc_export_private_only(key, exportBuf, &x);
 800471a:	aa0e      	add	r2, sp, #56	; 0x38
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 8004720:	930e      	str	r3, [sp, #56]	; 0x38
    ret = wc_ecc_export_private_only(key, exportBuf, &x);
 8004722:	f007 fc47 	bl	800bfb4 <wc_ecc_export_private_only>
    if (ret != 0)
 8004726:	4607      	mov	r7, r0
 8004728:	b348      	cbz	r0, 800477e <ecc_test+0x1066>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800472a:	4f9d      	ldr	r7, [pc, #628]	; (80049a0 <ecc_test+0x1288>)
 800472c:	4240      	negs	r0, r0
 800472e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004732:	4378      	muls	r0, r7
 8004734:	f100 4760 	add.w	r7, r0, #3758096384	; 0xe0000000
 8004738:	f5a7 47ca 	sub.w	r7, r7, #25856	; 0x6500
    wc_ecc_del_point_h(pubPoint, HEAP_HINT);
 800473c:	2100      	movs	r1, #0
 800473e:	4620      	mov	r0, r4
 8004740:	f005 fc13 	bl	8009f6a <wc_ecc_del_point_h>
    if (key != NULL) {
 8004744:	b12d      	cbz	r5, 8004752 <ecc_test+0x103a>
        wc_ecc_free(key);
 8004746:	4628      	mov	r0, r5
 8004748:	f005 fd63 	bl	800a212 <wc_ecc_free>
        XFREE(key, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800474c:	4628      	mov	r0, r5
 800474e:	f016 fc2f 	bl	801afb0 <free>
    if (pub != NULL)
 8004752:	f1b9 0f00 	cmp.w	r9, #0
 8004756:	d002      	beq.n	800475e <ecc_test+0x1046>
        XFREE(pub, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004758:	4648      	mov	r0, r9
 800475a:	f016 fc29 	bl	801afb0 <free>
    if (exportBuf != NULL)
 800475e:	b116      	cbz	r6, 8004766 <ecc_test+0x104e>
        XFREE(exportBuf, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004760:	4630      	mov	r0, r6
 8004762:	f016 fc25 	bl	801afb0 <free>
    if (tmp != NULL)
 8004766:	f1b8 0f00 	cmp.w	r8, #0
 800476a:	d002      	beq.n	8004772 <ecc_test+0x105a>
        XFREE(tmp, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 800476c:	4640      	mov	r0, r8
 800476e:	f016 fc1f 	bl	801afb0 <free>
    if (ret != 0) {
 8004772:	2f00      	cmp	r7, #0
 8004774:	f000 813e 	beq.w	80049f4 <ecc_test+0x12dc>
        printf("ecc_test_make_pub failed!\n");
 8004778:	488b      	ldr	r0, [pc, #556]	; (80049a8 <ecc_test+0x1290>)
 800477a:	f7ff ba08 	b.w	8003b8e <ecc_test+0x476>
    wc_ecc_free(key);
 800477e:	4628      	mov	r0, r5
 8004780:	f005 fd47 	bl	800a212 <wc_ecc_free>
    wc_ecc_init_ex(key, HEAP_HINT, devId);
 8004784:	f06f 0201 	mvn.w	r2, #1
 8004788:	4639      	mov	r1, r7
 800478a:	4628      	mov	r0, r5
 800478c:	f005 fcfe 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_import_private_key(exportBuf, x, NULL, 0, key);
 8004790:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004792:	9500      	str	r5, [sp, #0]
 8004794:	463b      	mov	r3, r7
 8004796:	463a      	mov	r2, r7
 8004798:	4630      	mov	r0, r6
 800479a:	f007 fc70 	bl	800c07e <wc_ecc_import_private_key>
    if (ret != 0)
 800479e:	b138      	cbz	r0, 80047b0 <ecc_test+0x1098>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80047a0:	4b7f      	ldr	r3, [pc, #508]	; (80049a0 <ecc_test+0x1288>)
 80047a2:	4f82      	ldr	r7, [pc, #520]	; (80049ac <ecc_test+0x1294>)
 80047a4:	4240      	negs	r0, r0
 80047a6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80047aa:	fb03 7700 	mla	r7, r3, r0, r7
 80047ae:	e7b0      	b.n	8004712 <ecc_test+0xffa>
    x = ECC_BUFSIZE;
 80047b0:	f240 1701 	movw	r7, #257	; 0x101
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 80047b4:	2300      	movs	r3, #0
 80047b6:	aa0e      	add	r2, sp, #56	; 0x38
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 80047bc:	970e      	str	r7, [sp, #56]	; 0x38
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 80047be:	f007 fa49 	bl	800bc54 <wc_ecc_export_x963_ex>
    if (ret == 0) {
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f000 80e2 	beq.w	800498c <ecc_test+0x1274>
    ret = wc_ecc_make_pub(NULL, NULL);
 80047c8:	2100      	movs	r1, #0
 80047ca:	4608      	mov	r0, r1
 80047cc:	f006 fa99 	bl	800ad02 <wc_ecc_make_pub>
    if (ret == 0) {
 80047d0:	2800      	cmp	r0, #0
 80047d2:	f000 80de 	beq.w	8004992 <ecc_test+0x127a>
    pubPoint = wc_ecc_new_point_h(HEAP_HINT);
 80047d6:	2000      	movs	r0, #0
 80047d8:	f005 fbb3 	bl	8009f42 <wc_ecc_new_point_h>
    if (pubPoint == NULL) {
 80047dc:	4604      	mov	r4, r0
 80047de:	2800      	cmp	r0, #0
 80047e0:	f000 80da 	beq.w	8004998 <ecc_test+0x1280>
    ret = wc_ecc_make_pub(key, pubPoint);
 80047e4:	4601      	mov	r1, r0
 80047e6:	4628      	mov	r0, r5
 80047e8:	f006 fa8b 	bl	800ad02 <wc_ecc_make_pub>
    if (ret != 0)
 80047ec:	4603      	mov	r3, r0
 80047ee:	b138      	cbz	r0, 8004800 <ecc_test+0x10e8>
       ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80047f0:	4243      	negs	r3, r0
 80047f2:	4f6b      	ldr	r7, [pc, #428]	; (80049a0 <ecc_test+0x1288>)
 80047f4:	486e      	ldr	r0, [pc, #440]	; (80049b0 <ecc_test+0x1298>)
 80047f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80047fa:	fb07 0703 	mla	r7, r7, r3, r0
 80047fe:	e79d      	b.n	800473c <ecc_test+0x1024>
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 8004800:	aa0e      	add	r2, sp, #56	; 0x38
 8004802:	4631      	mov	r1, r6
 8004804:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 8004806:	970e      	str	r7, [sp, #56]	; 0x38
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 8004808:	f007 fa24 	bl	800bc54 <wc_ecc_export_x963_ex>
    if (ret == 0) {
 800480c:	2800      	cmp	r0, #0
 800480e:	f000 80eb 	beq.w	80049e8 <ecc_test+0x12d0>
            ret = wc_ecc_sign_hash(msg, (word32)XSTRLEN((const char* )msg), tmp,
 8004812:	4868      	ldr	r0, [pc, #416]	; (80049b4 <ecc_test+0x129c>)
    tmpSz = ECC_BUFSIZE;
 8004814:	971f      	str	r7, [sp, #124]	; 0x7c
            ret = wc_ecc_sign_hash(msg, (word32)XSTRLEN((const char* )msg), tmp,
 8004816:	f016 fd66 	bl	801b2e6 <strlen>
 800481a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800481e:	4601      	mov	r1, r0
 8004820:	9501      	str	r5, [sp, #4]
 8004822:	4864      	ldr	r0, [pc, #400]	; (80049b4 <ecc_test+0x129c>)
 8004824:	f8cd b000 	str.w	fp, [sp]
 8004828:	ab1f      	add	r3, sp, #124	; 0x7c
 800482a:	4642      	mov	r2, r8
 800482c:	f006 fc32 	bl	800b094 <wc_ecc_sign_hash>
    } while (ret == WC_PENDING_E);
 8004830:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8004834:	d100      	bne.n	8004838 <ecc_test+0x1120>
 8004836:	e7fe      	b.n	8004836 <ecc_test+0x111e>
    if (ret != 0)
 8004838:	b138      	cbz	r0, 800484a <ecc_test+0x1132>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800483a:	4240      	negs	r0, r0
 800483c:	4b58      	ldr	r3, [pc, #352]	; (80049a0 <ecc_test+0x1288>)
 800483e:	4f5e      	ldr	r7, [pc, #376]	; (80049b8 <ecc_test+0x12a0>)
 8004840:	f3c0 000a 	ubfx	r0, r0, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004844:	fb03 7700 	mla	r7, r3, r0, r7
 8004848:	e778      	b.n	800473c <ecc_test+0x1024>
                (word32)XSTRLEN((const char*)msg), &verify, key);
 800484a:	485a      	ldr	r0, [pc, #360]	; (80049b4 <ecc_test+0x129c>)
            ret = wc_ecc_verify_hash(tmp, tmpSz, msg,
 800484c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
                (word32)XSTRLEN((const char*)msg), &verify, key);
 800484e:	f016 fd4a 	bl	801b2e6 <strlen>
            ret = wc_ecc_verify_hash(tmp, tmpSz, msg,
 8004852:	aa30      	add	r2, sp, #192	; 0xc0
                (word32)XSTRLEN((const char*)msg), &verify, key);
 8004854:	4603      	mov	r3, r0
            ret = wc_ecc_verify_hash(tmp, tmpSz, msg,
 8004856:	9200      	str	r2, [sp, #0]
 8004858:	9501      	str	r5, [sp, #4]
 800485a:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <ecc_test+0x129c>)
 800485c:	4639      	mov	r1, r7
 800485e:	4640      	mov	r0, r8
 8004860:	f007 f802 	bl	800b868 <wc_ecc_verify_hash>
    } while (ret == WC_PENDING_E);
 8004864:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8004868:	d100      	bne.n	800486c <ecc_test+0x1154>
 800486a:	e7fe      	b.n	800486a <ecc_test+0x1152>
    if (ret != 0)
 800486c:	b128      	cbz	r0, 800487a <ecc_test+0x1162>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800486e:	4240      	negs	r0, r0
 8004870:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <ecc_test+0x1288>)
 8004872:	4f52      	ldr	r7, [pc, #328]	; (80049bc <ecc_test+0x12a4>)
 8004874:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004878:	e7e4      	b.n	8004844 <ecc_test+0x112c>
    if (verify != 1) {
 800487a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 80b5 	bne.w	80049ec <ecc_test+0x12d4>
    x = ECC_BUFSIZE;
 8004882:	f240 1a01 	movw	sl, #257	; 0x101
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 8004886:	2300      	movs	r3, #0
 8004888:	aa0e      	add	r2, sp, #56	; 0x38
 800488a:	4631      	mov	r1, r6
 800488c:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 800488e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 8004892:	f007 f9df 	bl	800bc54 <wc_ecc_export_x963_ex>
    if (ret != 0)
 8004896:	b128      	cbz	r0, 80048a4 <ecc_test+0x118c>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004898:	4240      	negs	r0, r0
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <ecc_test+0x1288>)
 800489c:	4f48      	ldr	r7, [pc, #288]	; (80049c0 <ecc_test+0x12a8>)
 800489e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80048a2:	e7cf      	b.n	8004844 <ecc_test+0x112c>
    ret = wc_ecc_export_private_only(key, exportBuf, &x);
 80048a4:	aa0e      	add	r2, sp, #56	; 0x38
 80048a6:	4631      	mov	r1, r6
 80048a8:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 80048aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    ret = wc_ecc_export_private_only(key, exportBuf, &x);
 80048ae:	f007 fb81 	bl	800bfb4 <wc_ecc_export_private_only>
    if (ret != 0)
 80048b2:	4607      	mov	r7, r0
 80048b4:	b128      	cbz	r0, 80048c2 <ecc_test+0x11aa>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80048b6:	4247      	negs	r7, r0
 80048b8:	f3c7 030a 	ubfx	r3, r7, #0, #11
 80048bc:	4841      	ldr	r0, [pc, #260]	; (80049c4 <ecc_test+0x12ac>)
 80048be:	4f38      	ldr	r7, [pc, #224]	; (80049a0 <ecc_test+0x1288>)
 80048c0:	e79b      	b.n	80047fa <ecc_test+0x10e2>
    wc_ecc_free(key);
 80048c2:	4628      	mov	r0, r5
 80048c4:	f005 fca5 	bl	800a212 <wc_ecc_free>
    wc_ecc_init_ex(key, HEAP_HINT, devId);
 80048c8:	4639      	mov	r1, r7
 80048ca:	f06f 0201 	mvn.w	r2, #1
 80048ce:	4628      	mov	r0, r5
 80048d0:	f005 fc5c 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_import_private_key(exportBuf, x, NULL, 0, key);
 80048d4:	463b      	mov	r3, r7
 80048d6:	463a      	mov	r2, r7
 80048d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80048da:	9500      	str	r5, [sp, #0]
 80048dc:	4630      	mov	r0, r6
 80048de:	f007 fbce 	bl	800c07e <wc_ecc_import_private_key>
    if (ret != 0)
 80048e2:	4607      	mov	r7, r0
 80048e4:	b128      	cbz	r0, 80048f2 <ecc_test+0x11da>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 80048e6:	4247      	negs	r7, r0
 80048e8:	f3c7 030a 	ubfx	r3, r7, #0, #11
 80048ec:	4836      	ldr	r0, [pc, #216]	; (80049c8 <ecc_test+0x12b0>)
 80048ee:	4f2c      	ldr	r7, [pc, #176]	; (80049a0 <ecc_test+0x1288>)
 80048f0:	e783      	b.n	80047fa <ecc_test+0x10e2>
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 80048f2:	4603      	mov	r3, r0
 80048f4:	aa0e      	add	r2, sp, #56	; 0x38
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 80048fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    ret = wc_ecc_export_x963_ex(key, exportBuf, &x, 0);
 80048fe:	f007 f9a9 	bl	800bc54 <wc_ecc_export_x963_ex>
    if (ret == 0) {
 8004902:	2800      	cmp	r0, #0
 8004904:	d074      	beq.n	80049f0 <ecc_test+0x12d8>
    wc_ecc_init_ex(pub, HEAP_HINT, devId);
 8004906:	f06f 0201 	mvn.w	r2, #1
 800490a:	4639      	mov	r1, r7
 800490c:	4648      	mov	r0, r9
 800490e:	f005 fc3d 	bl	800a18c <wc_ecc_init_ex>
    ret = wc_ecc_make_key(rng, ECC_KEYGEN_SIZE, pub);
 8004912:	464a      	mov	r2, r9
 8004914:	2120      	movs	r1, #32
 8004916:	4658      	mov	r0, fp
 8004918:	f006 fa5d 	bl	800add6 <wc_ecc_make_key>
    if (ret != 0)
 800491c:	b128      	cbz	r0, 800492a <ecc_test+0x1212>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 800491e:	4240      	negs	r0, r0
 8004920:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <ecc_test+0x1288>)
 8004922:	4f2a      	ldr	r7, [pc, #168]	; (80049cc <ecc_test+0x12b4>)
 8004924:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004928:	e78c      	b.n	8004844 <ecc_test+0x112c>
    ret = wc_ecc_set_rng(key, rng);
 800492a:	4659      	mov	r1, fp
 800492c:	4628      	mov	r0, r5
 800492e:	f007 fcbf 	bl	800c2b0 <wc_ecc_set_rng>
    if (ret != 0)
 8004932:	4607      	mov	r7, r0
 8004934:	2800      	cmp	r0, #0
 8004936:	f47f af01 	bne.w	800473c <ecc_test+0x1024>
            ret = wc_ecc_shared_secret(key, pub, exportBuf, &x);
 800493a:	ab0e      	add	r3, sp, #56	; 0x38
 800493c:	4632      	mov	r2, r6
 800493e:	4649      	mov	r1, r9
 8004940:	4628      	mov	r0, r5
    x = ECC_BUFSIZE;
 8004942:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
            ret = wc_ecc_shared_secret(key, pub, exportBuf, &x);
 8004946:	f006 f8ed 	bl	800ab24 <wc_ecc_shared_secret>
    } while (ret == WC_PENDING_E);
 800494a:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
            ret = wc_ecc_shared_secret(key, pub, exportBuf, &x);
 800494e:	4607      	mov	r7, r0
    } while (ret == WC_PENDING_E);
 8004950:	d100      	bne.n	8004954 <ecc_test+0x123c>
 8004952:	e7fe      	b.n	8004952 <ecc_test+0x123a>
    wc_ecc_free(pub);
 8004954:	4648      	mov	r0, r9
 8004956:	f005 fc5c 	bl	800a212 <wc_ecc_free>
    if (ret != 0)
 800495a:	2f00      	cmp	r7, #0
 800495c:	f43f aeee 	beq.w	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004960:	4278      	negs	r0, r7
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <ecc_test+0x1288>)
 8004964:	4f1a      	ldr	r7, [pc, #104]	; (80049d0 <ecc_test+0x12b8>)
 8004966:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800496a:	e76b      	b.n	8004844 <ecc_test+0x112c>
    ecc_point* pubPoint = NULL;
 800496c:	462c      	mov	r4, r5
        ERROR_OUT(MEMORY_E, done);
 800496e:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8004972:	e6e3      	b.n	800473c <ecc_test+0x1024>
    ecc_point* pubPoint = NULL;
 8004974:	464c      	mov	r4, r9
 8004976:	e7fa      	b.n	800496e <ecc_test+0x1256>
 8004978:	4634      	mov	r4, r6
 800497a:	e7f8      	b.n	800496e <ecc_test+0x1256>
 800497c:	4604      	mov	r4, r0
 800497e:	e7f6      	b.n	800496e <ecc_test+0x1256>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8004980:	4f14      	ldr	r7, [pc, #80]	; (80049d4 <ecc_test+0x12bc>)
    ecc_point* pubPoint = NULL;
 8004982:	4604      	mov	r4, r0
 8004984:	e6da      	b.n	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8004986:	4f14      	ldr	r7, [pc, #80]	; (80049d8 <ecc_test+0x12c0>)
    ecc_point* pubPoint = NULL;
 8004988:	4604      	mov	r4, r0
 800498a:	e6d7      	b.n	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 800498c:	4f13      	ldr	r7, [pc, #76]	; (80049dc <ecc_test+0x12c4>)
    ecc_point* pubPoint = NULL;
 800498e:	4604      	mov	r4, r0
 8004990:	e6d4      	b.n	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8004992:	4f13      	ldr	r7, [pc, #76]	; (80049e0 <ecc_test+0x12c8>)
    ecc_point* pubPoint = NULL;
 8004994:	4604      	mov	r4, r0
 8004996:	e6d1      	b.n	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, done);
 8004998:	4f12      	ldr	r7, [pc, #72]	; (80049e4 <ecc_test+0x12cc>)
 800499a:	e6cf      	b.n	800473c <ecc_test+0x1024>
 800499c:	0801efc6 	.word	0x0801efc6
 80049a0:	fffe7960 	.word	0xfffe7960
 80049a4:	dfff9b06 	.word	0xdfff9b06
 80049a8:	0801e669 	.word	0x0801e669
 80049ac:	dfff9af9 	.word	0xdfff9af9
 80049b0:	dfff9ade 	.word	0xdfff9ade
 80049b4:	0801e64d 	.word	0x0801e64d
 80049b8:	dfff9ab7 	.word	0xdfff9ab7
 80049bc:	dfff9aa7 	.word	0xdfff9aa7
 80049c0:	dfff9a9c 	.word	0xdfff9a9c
 80049c4:	dfff9a91 	.word	0xdfff9a91
 80049c8:	dfff9a89 	.word	0xdfff9a89
 80049cc:	dfff9a74 	.word	0xdfff9a74
 80049d0:	dfff9a5e 	.word	0xdfff9a5e
 80049d4:	ffff9b11 	.word	0xffff9b11
 80049d8:	ffff9b0c 	.word	0xffff9b0c
 80049dc:	ffff9af4 	.word	0xffff9af4
 80049e0:	ffff9aed 	.word	0xffff9aed
 80049e4:	ffff9ae6 	.word	0xffff9ae6
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 80049e8:	4f28      	ldr	r7, [pc, #160]	; (8004a8c <ecc_test+0x1374>)
 80049ea:	e6a7      	b.n	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 80049ec:	4f28      	ldr	r7, [pc, #160]	; (8004a90 <ecc_test+0x1378>)
 80049ee:	e6a5      	b.n	800473c <ecc_test+0x1024>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 80049f0:	4f28      	ldr	r7, [pc, #160]	; (8004a94 <ecc_test+0x137c>)
 80049f2:	e6a3      	b.n	800473c <ecc_test+0x1024>
    key = wc_ecc_key_new(HEAP_HINT);
 80049f4:	4638      	mov	r0, r7
 80049f6:	f005 fbea 	bl	800a1ce <wc_ecc_key_new>
    if (key == NULL) {
 80049fa:	4604      	mov	r4, r0
 80049fc:	b1b0      	cbz	r0, 8004a2c <ecc_test+0x1314>
    ret = wc_ecc_make_key(rng, ECC_KEYGEN_SIZE, key);
 80049fe:	4602      	mov	r2, r0
 8004a00:	2120      	movs	r1, #32
 8004a02:	a80c      	add	r0, sp, #48	; 0x30
 8004a04:	f006 f9e7 	bl	800add6 <wc_ecc_make_key>
    if (ret != 0)
 8004a08:	4607      	mov	r7, r0
 8004a0a:	b130      	cbz	r0, 8004a1a <ecc_test+0x1302>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit);
 8004a0c:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <ecc_test+0x1380>)
 8004a0e:	4f23      	ldr	r7, [pc, #140]	; (8004a9c <ecc_test+0x1384>)
 8004a10:	4240      	negs	r0, r0
 8004a12:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004a16:	fb03 7700 	mla	r7, r3, r0, r7
    wc_ecc_key_free(key);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f005 fc0d 	bl	800a23a <wc_ecc_key_free>
    if (ret != 0) {
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	f43f aade 	beq.w	8003fe2 <ecc_test+0x8ca>
        printf("ecc_test_allocator failed!\n");
 8004a26:	481e      	ldr	r0, [pc, #120]	; (8004aa0 <ecc_test+0x1388>)
 8004a28:	f7ff b8b1 	b.w	8003b8e <ecc_test+0x476>
        ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit);
 8004a2c:	4f1d      	ldr	r7, [pc, #116]	; (8004aa4 <ecc_test+0x138c>)
 8004a2e:	e7f4      	b.n	8004a1a <ecc_test+0x1302>
        ERROR_OUT(MEMORY_E, done);
 8004a30:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8004a34:	e5d8      	b.n	80045e8 <ecc_test+0xed0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(MEMORY_E), done);
 8004a36:	4f1c      	ldr	r7, [pc, #112]	; (8004aa8 <ecc_test+0x1390>)
 8004a38:	f7ff ba6e 	b.w	8003f18 <ecc_test+0x800>
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8004a3c:	4f1b      	ldr	r7, [pc, #108]	; (8004aac <ecc_test+0x1394>)
 8004a3e:	f7ff ba6b 	b.w	8003f18 <ecc_test+0x800>
        ERROR_OUT(MEMORY_E, done);
 8004a42:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8004a46:	f7ff ba27 	b.w	8003e98 <ecc_test+0x780>
 8004a4a:	462f      	mov	r7, r5
 8004a4c:	f7ff ba24 	b.w	8003e98 <ecc_test+0x780>
    if (userA != NULL) {
 8004a50:	2c00      	cmp	r4, #0
 8004a52:	f47f a9d7 	bne.w	8003e04 <ecc_test+0x6ec>
        ERROR_OUT(MEMORY_E, done);
 8004a56:	f06f 077c 	mvn.w	r7, #124	; 0x7c
    WC_FREE_VAR(sigRaw, HEAP_HINT);
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f016 faa8 	bl	801afb0 <free>
 8004a60:	f7ff b9bb 	b.w	8003dda <ecc_test+0x6c2>
    if (userA != NULL) {
 8004a64:	2c00      	cmp	r4, #0
 8004a66:	f47f a9cd 	bne.w	8003e04 <ecc_test+0x6ec>
        ERROR_OUT(MEMORY_E, done);
 8004a6a:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8004a6e:	f7ff b9b4 	b.w	8003dda <ecc_test+0x6c2>
    if (userA != NULL) {
 8004a72:	2800      	cmp	r0, #0
 8004a74:	f47f aa90 	bne.w	8003f98 <ecc_test+0x880>
        ERROR_OUT(WC_TEST_RET_ENC_EC(MEMORY_E), done);
 8004a78:	4f0b      	ldr	r7, [pc, #44]	; (8004aa8 <ecc_test+0x1390>)
 8004a7a:	f7ff ba98 	b.w	8003fae <ecc_test+0x896>
    if (tmpBuf != NULL)
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	f47f aa12 	bne.w	8003ea8 <ecc_test+0x790>
        ERROR_OUT(MEMORY_E, done);
 8004a84:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 8004a88:	f7ff ba18 	b.w	8003ebc <ecc_test+0x7a4>
 8004a8c:	ffff9ad5 	.word	0xffff9ad5
 8004a90:	ffff9aa4 	.word	0xffff9aa4
 8004a94:	ffff9a83 	.word	0xffff9a83
 8004a98:	fffe7960 	.word	0xfffe7960
 8004a9c:	dfff90a0 	.word	0xdfff90a0
 8004aa0:	0801e684 	.word	0x0801e684
 8004aa4:	ffff90a9 	.word	0xffff90a9
 8004aa8:	df40ddbb 	.word	0xdf40ddbb
 8004aac:	ffff99b7 	.word	0xffff99b7

08004ab0 <ecc_test_buffers>:
{
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecc_key *cliKey = (ecc_key *)XMALLOC(sizeof *cliKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004ab4:	f44f 70de 	mov.w	r0, #444	; 0x1bc
{
 8004ab8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    ecc_key *cliKey = (ecc_key *)XMALLOC(sizeof *cliKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004abc:	f016 fa70 	bl	801afa0 <malloc>
 8004ac0:	4605      	mov	r5, r0
    ecc_key *servKey = (ecc_key *)XMALLOC(sizeof *servKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004ac2:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004ac6:	f016 fa6b 	bl	801afa0 <malloc>
 8004aca:	4607      	mov	r7, r0
    ecc_key *tmpKey = (ecc_key *)XMALLOC(sizeof *tmpKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004acc:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8004ad0:	f016 fa66 	bl	801afa0 <malloc>
    word32 idx = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9303      	str	r3, [sp, #12]
    byte   in[] = "Everyone gets Friday off. ecc p";
 8004ad8:	4b74      	ldr	r3, [pc, #464]	; (8004cac <ecc_test_buffers+0x1fc>)
    ecc_key *tmpKey = (ecc_key *)XMALLOC(sizeof *tmpKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004ada:	4680      	mov	r8, r0
    byte   in[] = "Everyone gets Friday off. ecc p";
 8004adc:	ac08      	add	r4, sp, #32
 8004ade:	f103 0620 	add.w	r6, r3, #32
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	c203      	stmia	r2!, {r0, r1}
 8004aea:	3308      	adds	r3, #8
 8004aec:	42b3      	cmp	r3, r6
 8004aee:	4614      	mov	r4, r2
 8004af0:	d1f7      	bne.n	8004ae2 <ecc_test_buffers+0x32>
    word32 inLen = (word32)XSTRLEN((char*)in);
 8004af2:	a808      	add	r0, sp, #32
 8004af4:	f016 fbf7 	bl	801b2e6 <strlen>
    int verify = 0;
 8004af8:	f10d 0a10 	add.w	sl, sp, #16
 8004afc:	2100      	movs	r1, #0
    word32 inLen = (word32)XSTRLEN((char*)in);
 8004afe:	4681      	mov	r9, r0
    int verify = 0;
 8004b00:	f8ca 1000 	str.w	r1, [sl]
    if ((cliKey == NULL) || (servKey == NULL) || (tmpKey == NULL))
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	f000 80b3 	beq.w	8004c70 <ecc_test_buffers+0x1c0>
 8004b0a:	2f00      	cmp	r7, #0
 8004b0c:	f000 80ca 	beq.w	8004ca4 <ecc_test_buffers+0x1f4>
 8004b10:	f1b8 0f00 	cmp.w	r8, #0
 8004b14:	f000 80c6 	beq.w	8004ca4 <ecc_test_buffers+0x1f4>
    ret = wc_ecc_init_ex(cliKey, HEAP_HINT, devId);
 8004b18:	f06f 0201 	mvn.w	r2, #1
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f005 fb35 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8004b22:	4601      	mov	r1, r0
 8004b24:	b138      	cbz	r0, 8004b36 <ecc_test_buffers+0x86>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004b26:	4241      	negs	r1, r0
 8004b28:	4c61      	ldr	r4, [pc, #388]	; (8004cb0 <ecc_test_buffers+0x200>)
 8004b2a:	4862      	ldr	r0, [pc, #392]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004b2c:	f3c1 010a 	ubfx	r1, r1, #0, #11
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004b30:	fb01 4400 	mla	r4, r1, r0, r4
 8004b34:	e059      	b.n	8004bea <ecc_test_buffers+0x13a>
    ret = wc_ecc_init_ex(servKey, HEAP_HINT, devId);
 8004b36:	f06f 0201 	mvn.w	r2, #1
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f005 fb26 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8004b40:	4601      	mov	r1, r0
 8004b42:	b128      	cbz	r0, 8004b50 <ecc_test_buffers+0xa0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004b44:	4241      	negs	r1, r0
 8004b46:	4c5c      	ldr	r4, [pc, #368]	; (8004cb8 <ecc_test_buffers+0x208>)
 8004b48:	485a      	ldr	r0, [pc, #360]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004b4a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004b4e:	e7ef      	b.n	8004b30 <ecc_test_buffers+0x80>
    ret = wc_ecc_init_ex(tmpKey, HEAP_HINT, devId);
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	4640      	mov	r0, r8
 8004b56:	f005 fb19 	bl	800a18c <wc_ecc_init_ex>
    if (ret != 0)
 8004b5a:	b128      	cbz	r0, 8004b68 <ecc_test_buffers+0xb8>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004b5c:	4240      	negs	r0, r0
 8004b5e:	4955      	ldr	r1, [pc, #340]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004b60:	4c56      	ldr	r4, [pc, #344]	; (8004cbc <ecc_test_buffers+0x20c>)
 8004b62:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004b66:	e7e3      	b.n	8004b30 <ecc_test_buffers+0x80>
    ret = wc_EccPrivateKeyDecode(ecc_clikey_der_256, &idx, cliKey,
 8004b68:	4855      	ldr	r0, [pc, #340]	; (8004cc0 <ecc_test_buffers+0x210>)
 8004b6a:	2379      	movs	r3, #121	; 0x79
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	a903      	add	r1, sp, #12
 8004b70:	f00c fcad 	bl	80114ce <wc_EccPrivateKeyDecode>
    if (ret != 0)
 8004b74:	b128      	cbz	r0, 8004b82 <ecc_test_buffers+0xd2>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004b76:	4240      	negs	r0, r0
 8004b78:	494e      	ldr	r1, [pc, #312]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004b7a:	4c52      	ldr	r4, [pc, #328]	; (8004cc4 <ecc_test_buffers+0x214>)
 8004b7c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004b80:	e7d6      	b.n	8004b30 <ecc_test_buffers+0x80>
    idx = 0;
 8004b82:	9003      	str	r0, [sp, #12]
    ret = wc_EccPrivateKeyDecode(ecc_key_der_256, &idx, servKey,
 8004b84:	a903      	add	r1, sp, #12
 8004b86:	4850      	ldr	r0, [pc, #320]	; (8004cc8 <ecc_test_buffers+0x218>)
 8004b88:	2379      	movs	r3, #121	; 0x79
 8004b8a:	463a      	mov	r2, r7
 8004b8c:	f00c fc9f 	bl	80114ce <wc_EccPrivateKeyDecode>
    if (ret != 0)
 8004b90:	4601      	mov	r1, r0
 8004b92:	b128      	cbz	r0, 8004ba0 <ecc_test_buffers+0xf0>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004b94:	4241      	negs	r1, r0
 8004b96:	4c4d      	ldr	r4, [pc, #308]	; (8004ccc <ecc_test_buffers+0x21c>)
 8004b98:	4846      	ldr	r0, [pc, #280]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004b9a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004b9e:	e7c7      	b.n	8004b30 <ecc_test_buffers+0x80>
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
 8004ba0:	ae06      	add	r6, sp, #24
 8004ba2:	f06f 0201 	mvn.w	r2, #1
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f007 fd71 	bl	800c68e <wc_InitRng_ex>
    if (ret != 0)
 8004bac:	b128      	cbz	r0, 8004bba <ecc_test_buffers+0x10a>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004bae:	4240      	negs	r0, r0
 8004bb0:	4940      	ldr	r1, [pc, #256]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004bb2:	4c47      	ldr	r4, [pc, #284]	; (8004cd0 <ecc_test_buffers+0x220>)
 8004bb4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004bb8:	e7ba      	b.n	8004b30 <ecc_test_buffers+0x80>
    ret = wc_ecc_set_rng(cliKey, &rng);
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f007 fb77 	bl	800c2b0 <wc_ecc_set_rng>
    if (ret != 0)
 8004bc2:	b128      	cbz	r0, 8004bd0 <ecc_test_buffers+0x120>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004bc4:	4240      	negs	r0, r0
 8004bc6:	493b      	ldr	r1, [pc, #236]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004bc8:	4c42      	ldr	r4, [pc, #264]	; (8004cd4 <ecc_test_buffers+0x224>)
 8004bca:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004bce:	e7af      	b.n	8004b30 <ecc_test_buffers+0x80>
    ret = wc_ecc_set_rng(servKey, &rng);
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f007 fb6c 	bl	800c2b0 <wc_ecc_set_rng>
    if (ret != 0)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	b168      	cbz	r0, 8004bf8 <ecc_test_buffers+0x148>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004bdc:	4244      	negs	r4, r0
 8004bde:	4935      	ldr	r1, [pc, #212]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004be0:	483d      	ldr	r0, [pc, #244]	; (8004cd8 <ecc_test_buffers+0x228>)
 8004be2:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004be6:	fb01 0404 	mla	r4, r1, r4, r0
        wc_ecc_free(cliKey);
 8004bea:	4628      	mov	r0, r5
 8004bec:	f005 fb11 	bl	800a212 <wc_ecc_free>
        XFREE(cliKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f016 f9dd 	bl	801afb0 <free>
 8004bf6:	e03d      	b.n	8004c74 <ecc_test_buffers+0x1c4>
            ret = wc_ecc_sign_hash(in, inLen, out, &x, &rng, cliKey);
 8004bf8:	e9cd 6500 	strd	r6, r5, [sp]
    x = sizeof(out);
 8004bfc:	f44f 7b80 	mov.w	fp, #256	; 0x100
            ret = wc_ecc_sign_hash(in, inLen, out, &x, &rng, cliKey);
 8004c00:	ab05      	add	r3, sp, #20
 8004c02:	aa10      	add	r2, sp, #64	; 0x40
 8004c04:	4649      	mov	r1, r9
 8004c06:	a808      	add	r0, sp, #32
    x = sizeof(out);
 8004c08:	f8cd b014 	str.w	fp, [sp, #20]
            ret = wc_ecc_sign_hash(in, inLen, out, &x, &rng, cliKey);
 8004c0c:	f006 fa42 	bl	800b094 <wc_ecc_sign_hash>
    } while (ret == WC_PENDING_E);
 8004c10:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
            ret = wc_ecc_sign_hash(in, inLen, out, &x, &rng, cliKey);
 8004c14:	4606      	mov	r6, r0
    } while (ret == WC_PENDING_E);
 8004c16:	d100      	bne.n	8004c1a <ecc_test_buffers+0x16a>
 8004c18:	e7fe      	b.n	8004c18 <ecc_test_buffers+0x168>
    if (ret < 0)
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	da07      	bge.n	8004c2e <ecc_test_buffers+0x17e>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004c1e:	4246      	negs	r6, r0
 8004c20:	4c2e      	ldr	r4, [pc, #184]	; (8004cdc <ecc_test_buffers+0x22c>)
 8004c22:	4824      	ldr	r0, [pc, #144]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004c24:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004c28:	fb00 4406 	mla	r4, r0, r6, r4
 8004c2c:	e7dd      	b.n	8004bea <ecc_test_buffers+0x13a>
    XMEMSET(plain, 0, sizeof(plain));
 8004c2e:	465a      	mov	r2, fp
 8004c30:	4621      	mov	r1, r4
 8004c32:	a850      	add	r0, sp, #320	; 0x140
 8004c34:	f016 f9fc 	bl	801b030 <memset>
        if (ret == 0)
 8004c38:	b99e      	cbnz	r6, 8004c62 <ecc_test_buffers+0x1b2>
            ret = wc_ecc_verify_hash(out, x, in, inLen, &verify,
 8004c3a:	e9cd a500 	strd	sl, r5, [sp]
 8004c3e:	9905      	ldr	r1, [sp, #20]
 8004c40:	464b      	mov	r3, r9
 8004c42:	aa08      	add	r2, sp, #32
 8004c44:	a810      	add	r0, sp, #64	; 0x40
 8004c46:	f006 fe0f 	bl	800b868 <wc_ecc_verify_hash>
    } while (ret == WC_PENDING_E);
 8004c4a:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8004c4e:	d100      	bne.n	8004c52 <ecc_test_buffers+0x1a2>
 8004c50:	e7fe      	b.n	8004c50 <ecc_test_buffers+0x1a0>
    if (ret < 0)
 8004c52:	2800      	cmp	r0, #0
 8004c54:	da05      	bge.n	8004c62 <ecc_test_buffers+0x1b2>
        ERROR_OUT(WC_TEST_RET_ENC_EC(ret), done);
 8004c56:	4240      	negs	r0, r0
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <ecc_test_buffers+0x204>)
 8004c5a:	4c21      	ldr	r4, [pc, #132]	; (8004ce0 <ecc_test_buffers+0x230>)
 8004c5c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004c60:	e766      	b.n	8004b30 <ecc_test_buffers+0x80>
    if (verify != 1)
 8004c62:	f8da 2000 	ldr.w	r2, [sl]
        ERROR_OUT(WC_TEST_RET_ENC_NC, done);
 8004c66:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <ecc_test_buffers+0x234>)
 8004c68:	2a01      	cmp	r2, #1
 8004c6a:	bf18      	it	ne
 8004c6c:	461c      	movne	r4, r3
 8004c6e:	e7bc      	b.n	8004bea <ecc_test_buffers+0x13a>
        ERROR_OUT(MEMORY_E, done);
 8004c70:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    if (servKey != NULL) {
 8004c74:	b12f      	cbz	r7, 8004c82 <ecc_test_buffers+0x1d2>
        wc_ecc_free(servKey);
 8004c76:	4638      	mov	r0, r7
 8004c78:	f005 facb 	bl	800a212 <wc_ecc_free>
        XFREE(servKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f016 f997 	bl	801afb0 <free>
    if (tmpKey != NULL) {
 8004c82:	f1b8 0f00 	cmp.w	r8, #0
 8004c86:	d005      	beq.n	8004c94 <ecc_test_buffers+0x1e4>
        wc_ecc_free(tmpKey);
 8004c88:	4640      	mov	r0, r8
 8004c8a:	f005 fac2 	bl	800a212 <wc_ecc_free>
        XFREE(tmpKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f016 f98e 	bl	801afb0 <free>
    wc_FreeRng(&rng);
 8004c94:	a806      	add	r0, sp, #24
 8004c96:	f007 fd19 	bl	800c6cc <wc_FreeRng>
}
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8004ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ERROR_OUT(MEMORY_E, done);
 8004ca4:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8004ca8:	e79f      	b.n	8004bea <ecc_test_buffers+0x13a>
 8004caa:	bf00      	nop
 8004cac:	0801e6fc 	.word	0x0801e6fc
 8004cb0:	dfff8a8e 	.word	0xdfff8a8e
 8004cb4:	fffe7960 	.word	0xfffe7960
 8004cb8:	dfff8a8b 	.word	0xdfff8a8b
 8004cbc:	dfff8a88 	.word	0xdfff8a88
 8004cc0:	0801ef4d 	.word	0x0801ef4d
 8004cc4:	dfff8a81 	.word	0xdfff8a81
 8004cc8:	0801efc6 	.word	0x0801efc6
 8004ccc:	dfff8a78 	.word	0xdfff8a78
 8004cd0:	dfff8a6f 	.word	0xdfff8a6f
 8004cd4:	dfff8a68 	.word	0xdfff8a68
 8004cd8:	dfff8a65 	.word	0xdfff8a65
 8004cdc:	dfff8a3e 	.word	0xdfff8a3e
 8004ce0:	dfff8a30 	.word	0xdfff8a30
 8004ce4:	ffff8a2e 	.word	0xffff8a2e

08004ce8 <curve25519_test>:
{
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
    word32  x = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9304      	str	r3, [sp, #16]
    byte sa[] = {
 8004cf2:	4ba8      	ldr	r3, [pc, #672]	; (8004f94 <curve25519_test+0x2ac>)
 8004cf4:	ac20      	add	r4, sp, #128	; 0x80
 8004cf6:	f103 0520 	add.w	r5, r3, #32
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	4622      	mov	r2, r4
 8004d00:	c203      	stmia	r2!, {r0, r1}
 8004d02:	3308      	adds	r3, #8
 8004d04:	42ab      	cmp	r3, r5
 8004d06:	4614      	mov	r4, r2
 8004d08:	d1f7      	bne.n	8004cfa <curve25519_test+0x12>
    byte pa[] = {
 8004d0a:	4ba3      	ldr	r3, [pc, #652]	; (8004f98 <curve25519_test+0x2b0>)
 8004d0c:	ac28      	add	r4, sp, #160	; 0xa0
 8004d0e:	f103 0520 	add.w	r5, r3, #32
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	4622      	mov	r2, r4
 8004d18:	c203      	stmia	r2!, {r0, r1}
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	4614      	mov	r4, r2
 8004d20:	d1f7      	bne.n	8004d12 <curve25519_test+0x2a>
    byte sb[] = {
 8004d22:	4b9e      	ldr	r3, [pc, #632]	; (8004f9c <curve25519_test+0x2b4>)
 8004d24:	ac30      	add	r4, sp, #192	; 0xc0
 8004d26:	f103 0520 	add.w	r5, r3, #32
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	4622      	mov	r2, r4
 8004d30:	c203      	stmia	r2!, {r0, r1}
 8004d32:	3308      	adds	r3, #8
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	4614      	mov	r4, r2
 8004d38:	d1f7      	bne.n	8004d2a <curve25519_test+0x42>
    byte pb[] = {
 8004d3a:	4b99      	ldr	r3, [pc, #612]	; (8004fa0 <curve25519_test+0x2b8>)
 8004d3c:	ac38      	add	r4, sp, #224	; 0xe0
 8004d3e:	f103 0520 	add.w	r5, r3, #32
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	4622      	mov	r2, r4
 8004d48:	c203      	stmia	r2!, {r0, r1}
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	42ab      	cmp	r3, r5
 8004d4e:	4614      	mov	r4, r2
 8004d50:	d1f7      	bne.n	8004d42 <curve25519_test+0x5a>
    byte ss[] = {
 8004d52:	4b94      	ldr	r3, [pc, #592]	; (8004fa4 <curve25519_test+0x2bc>)
 8004d54:	ac40      	add	r4, sp, #256	; 0x100
 8004d56:	f103 0520 	add.w	r5, r3, #32
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	4622      	mov	r2, r4
 8004d60:	c203      	stmia	r2!, {r0, r1}
 8004d62:	3308      	adds	r3, #8
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	4614      	mov	r4, r2
 8004d68:	d1f7      	bne.n	8004d5a <curve25519_test+0x72>
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
 8004d6a:	f06f 0201 	mvn.w	r2, #1
 8004d6e:	2100      	movs	r1, #0
 8004d70:	a806      	add	r0, sp, #24
 8004d72:	f007 fc8c 	bl	800c68e <wc_InitRng_ex>
    if (ret != 0)
 8004d76:	4604      	mov	r4, r0
 8004d78:	b138      	cbz	r0, 8004d8a <curve25519_test+0xa2>
        return WC_TEST_RET_ENC_EC(ret);
 8004d7a:	4244      	negs	r4, r0
 8004d7c:	f3c4 010a 	ubfx	r1, r4, #0, #11
 8004d80:	4889      	ldr	r0, [pc, #548]	; (8004fa8 <curve25519_test+0x2c0>)
 8004d82:	4c8a      	ldr	r4, [pc, #552]	; (8004fac <curve25519_test+0x2c4>)
        return WC_TEST_RET_ENC_EC(ret);
 8004d84:	fb01 0404 	mla	r4, r1, r4, r0
 8004d88:	e01f      	b.n	8004dca <curve25519_test+0xe2>
    wc_curve25519_init_ex(&userA, HEAP_HINT, devId);
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	f06f 0201 	mvn.w	r2, #1
 8004d90:	a867      	add	r0, sp, #412	; 0x19c
    wc_curve25519_init_ex(&userB, HEAP_HINT, devId);
 8004d92:	ae7a      	add	r6, sp, #488	; 0x1e8
    wc_curve25519_init_ex(&userA, HEAP_HINT, devId);
 8004d94:	f00d fd4c 	bl	8012830 <wc_curve25519_init_ex>
    wc_curve25519_init_ex(&userB, HEAP_HINT, devId);
 8004d98:	f06f 0201 	mvn.w	r2, #1
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f00d fd46 	bl	8012830 <wc_curve25519_init_ex>
    wc_curve25519_init_ex(&pubKey, HEAP_HINT, devId);
 8004da4:	f06f 0201 	mvn.w	r2, #1
 8004da8:	4621      	mov	r1, r4
 8004daa:	a88d      	add	r0, sp, #564	; 0x234
 8004dac:	f00d fd40 	bl	8012830 <wc_curve25519_init_ex>
    ret = wc_curve25519_make_key(&rng, 32, &userA);
 8004db0:	aa67      	add	r2, sp, #412	; 0x19c
 8004db2:	2120      	movs	r1, #32
 8004db4:	a806      	add	r0, sp, #24
 8004db6:	f00d fbb5 	bl	8012524 <wc_curve25519_make_key>
    if (ret != 0)
 8004dba:	b150      	cbz	r0, 8004dd2 <curve25519_test+0xea>
        return WC_TEST_RET_ENC_EC(ret);
 8004dbc:	4240      	negs	r0, r0
 8004dbe:	497b      	ldr	r1, [pc, #492]	; (8004fac <curve25519_test+0x2c4>)
 8004dc0:	4c7b      	ldr	r4, [pc, #492]	; (8004fb0 <curve25519_test+0x2c8>)
 8004dc2:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8004dc6:	fb01 4400 	mla	r4, r1, r0, r4
}
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
 8004dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = wc_curve25519_make_key(&rng, 32, &userB);
 8004dd2:	4632      	mov	r2, r6
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	a806      	add	r0, sp, #24
 8004dd8:	f00d fba4 	bl	8012524 <wc_curve25519_make_key>
    if (ret != 0)
 8004ddc:	b128      	cbz	r0, 8004dea <curve25519_test+0x102>
        return WC_TEST_RET_ENC_EC(ret);
 8004dde:	4240      	negs	r0, r0
 8004de0:	4972      	ldr	r1, [pc, #456]	; (8004fac <curve25519_test+0x2c4>)
 8004de2:	4c74      	ldr	r4, [pc, #464]	; (8004fb4 <curve25519_test+0x2cc>)
 8004de4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004de8:	e7ed      	b.n	8004dc6 <curve25519_test+0xde>
    x = sizeof(sharedA);
 8004dea:	2520      	movs	r5, #32
    if ((ret = wc_curve25519_shared_secret(&userA, &userB, sharedA, &x)) != 0) {
 8004dec:	ab04      	add	r3, sp, #16
 8004dee:	eb0d 0205 	add.w	r2, sp, r5
 8004df2:	4631      	mov	r1, r6
 8004df4:	a867      	add	r0, sp, #412	; 0x19c
    x = sizeof(sharedA);
 8004df6:	9504      	str	r5, [sp, #16]
    if ((ret = wc_curve25519_shared_secret(&userA, &userB, sharedA, &x)) != 0) {
 8004df8:	f00d fbf8 	bl	80125ec <wc_curve25519_shared_secret>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	b168      	cbz	r0, 8004e1c <curve25519_test+0x134>
        printf("wc_curve25519_shared_secret 1 failed\n");
 8004e00:	486d      	ldr	r0, [pc, #436]	; (8004fb8 <curve25519_test+0x2d0>)
 8004e02:	f016 f9fb 	bl	801b1fc <iprintf>
 8004e06:	4b6d      	ldr	r3, [pc, #436]	; (8004fbc <curve25519_test+0x2d4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
        return WC_TEST_RET_ENC_EC(ret);
 8004e0a:	4264      	negs	r4, r4
        printf("wc_curve25519_shared_secret 1 failed\n");
 8004e0c:	6898      	ldr	r0, [r3, #8]
 8004e0e:	f015 ffbd 	bl	801ad8c <fflush>
        return WC_TEST_RET_ENC_EC(ret);
 8004e12:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004e16:	4965      	ldr	r1, [pc, #404]	; (8004fac <curve25519_test+0x2c4>)
 8004e18:	4869      	ldr	r0, [pc, #420]	; (8004fc0 <curve25519_test+0x2d8>)
 8004e1a:	e7b3      	b.n	8004d84 <curve25519_test+0x9c>
    if ((ret = wc_curve25519_shared_secret(&userB, &userA, sharedB, &y)) != 0) {
 8004e1c:	ab03      	add	r3, sp, #12
 8004e1e:	aa10      	add	r2, sp, #64	; 0x40
 8004e20:	a967      	add	r1, sp, #412	; 0x19c
 8004e22:	4630      	mov	r0, r6
    y = sizeof(sharedB);
 8004e24:	9503      	str	r5, [sp, #12]
    if ((ret = wc_curve25519_shared_secret(&userB, &userA, sharedB, &y)) != 0) {
 8004e26:	f00d fbe1 	bl	80125ec <wc_curve25519_shared_secret>
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	b168      	cbz	r0, 8004e4a <curve25519_test+0x162>
        printf("wc_curve25519_shared_secret 2 failed\n");
 8004e2e:	4865      	ldr	r0, [pc, #404]	; (8004fc4 <curve25519_test+0x2dc>)
 8004e30:	f016 f9e4 	bl	801b1fc <iprintf>
 8004e34:	4b61      	ldr	r3, [pc, #388]	; (8004fbc <curve25519_test+0x2d4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
        return WC_TEST_RET_ENC_EC(ret);
 8004e38:	4264      	negs	r4, r4
        printf("wc_curve25519_shared_secret 2 failed\n");
 8004e3a:	6898      	ldr	r0, [r3, #8]
 8004e3c:	f015 ffa6 	bl	801ad8c <fflush>
        return WC_TEST_RET_ENC_EC(ret);
 8004e40:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004e44:	4959      	ldr	r1, [pc, #356]	; (8004fac <curve25519_test+0x2c4>)
 8004e46:	4860      	ldr	r0, [pc, #384]	; (8004fc8 <curve25519_test+0x2e0>)
 8004e48:	e79c      	b.n	8004d84 <curve25519_test+0x9c>
    if (y != x)
 8004e4a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f040 82c1 	bne.w	80053d6 <curve25519_test+0x6ee>
    if (XMEMCMP(sharedA, sharedB, x))
 8004e54:	a910      	add	r1, sp, #64	; 0x40
 8004e56:	a808      	add	r0, sp, #32
 8004e58:	f016 f8b2 	bl	801afc0 <memcmp>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	f040 82bc 	bne.w	80053da <curve25519_test+0x6f2>
    ret = wc_curve25519_export_public(&userA, exportBuf, &x);
 8004e62:	aa04      	add	r2, sp, #16
 8004e64:	a918      	add	r1, sp, #96	; 0x60
 8004e66:	a867      	add	r0, sp, #412	; 0x19c
    x = sizeof(exportBuf);
 8004e68:	9504      	str	r5, [sp, #16]
    ret = wc_curve25519_export_public(&userA, exportBuf, &x);
 8004e6a:	f00d fbfd 	bl	8012668 <wc_curve25519_export_public>
    if (ret != 0)
 8004e6e:	b128      	cbz	r0, 8004e7c <curve25519_test+0x194>
        return WC_TEST_RET_ENC_EC(ret);
 8004e70:	4240      	negs	r0, r0
 8004e72:	494e      	ldr	r1, [pc, #312]	; (8004fac <curve25519_test+0x2c4>)
 8004e74:	4c55      	ldr	r4, [pc, #340]	; (8004fcc <curve25519_test+0x2e4>)
 8004e76:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004e7a:	e7a4      	b.n	8004dc6 <curve25519_test+0xde>
    ret = wc_curve25519_import_public(exportBuf, x, &pubKey);
 8004e7c:	9904      	ldr	r1, [sp, #16]
 8004e7e:	aa8d      	add	r2, sp, #564	; 0x234
 8004e80:	a818      	add	r0, sp, #96	; 0x60
 8004e82:	f00d fc13 	bl	80126ac <wc_curve25519_import_public>
    if (ret != 0)
 8004e86:	b128      	cbz	r0, 8004e94 <curve25519_test+0x1ac>
        return WC_TEST_RET_ENC_EC(ret);
 8004e88:	4240      	negs	r0, r0
 8004e8a:	4948      	ldr	r1, [pc, #288]	; (8004fac <curve25519_test+0x2c4>)
 8004e8c:	4c50      	ldr	r4, [pc, #320]	; (8004fd0 <curve25519_test+0x2e8>)
 8004e8e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004e92:	e798      	b.n	8004dc6 <curve25519_test+0xde>
    XMEMSET(sharedB, 0, sizeof(sharedB));
 8004e94:	2220      	movs	r2, #32
 8004e96:	2100      	movs	r1, #0
 8004e98:	a810      	add	r0, sp, #64	; 0x40
 8004e9a:	f016 f8c9 	bl	801b030 <memset>
    y = sizeof(sharedB);
 8004e9e:	2520      	movs	r5, #32
    if (wc_curve25519_shared_secret(&userB, &pubKey, sharedB, &y) != 0) {
 8004ea0:	ab03      	add	r3, sp, #12
 8004ea2:	aa10      	add	r2, sp, #64	; 0x40
 8004ea4:	a98d      	add	r1, sp, #564	; 0x234
 8004ea6:	4630      	mov	r0, r6
    y = sizeof(sharedB);
 8004ea8:	9503      	str	r5, [sp, #12]
    if (wc_curve25519_shared_secret(&userB, &pubKey, sharedB, &y) != 0) {
 8004eaa:	f00d fb9f 	bl	80125ec <wc_curve25519_shared_secret>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f040 8295 	bne.w	80053de <curve25519_test+0x6f6>
    if (XMEMCMP(sharedA, sharedB, y))
 8004eb4:	9a03      	ldr	r2, [sp, #12]
 8004eb6:	a910      	add	r1, sp, #64	; 0x40
 8004eb8:	eb0d 0005 	add.w	r0, sp, r5
 8004ebc:	f016 f880 	bl	801afc0 <memcmp>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f040 828e 	bne.w	80053e2 <curve25519_test+0x6fa>
    ret = wc_curve25519_import_private_raw(sa, sizeof(sa), pa, sizeof(pa),
 8004ec6:	ab67      	add	r3, sp, #412	; 0x19c
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	aa28      	add	r2, sp, #160	; 0xa0
 8004ecc:	462b      	mov	r3, r5
 8004ece:	4629      	mov	r1, r5
 8004ed0:	a820      	add	r0, sp, #128	; 0x80
 8004ed2:	f00d fca0 	bl	8012816 <wc_curve25519_import_private_raw>
    if (ret != 0)
 8004ed6:	b128      	cbz	r0, 8004ee4 <curve25519_test+0x1fc>
        return WC_TEST_RET_ENC_EC(ret);
 8004ed8:	4240      	negs	r0, r0
 8004eda:	4934      	ldr	r1, [pc, #208]	; (8004fac <curve25519_test+0x2c4>)
 8004edc:	4c3d      	ldr	r4, [pc, #244]	; (8004fd4 <curve25519_test+0x2ec>)
 8004ede:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004ee2:	e770      	b.n	8004dc6 <curve25519_test+0xde>
    ret = wc_curve25519_import_private_raw(sb, sizeof(sb), pb, sizeof(pb),
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	9600      	str	r6, [sp, #0]
 8004ee8:	462b      	mov	r3, r5
 8004eea:	aa38      	add	r2, sp, #224	; 0xe0
 8004eec:	a830      	add	r0, sp, #192	; 0xc0
 8004eee:	f00d fc92 	bl	8012816 <wc_curve25519_import_private_raw>
    if (ret != 0)
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	b128      	cbz	r0, 8004f02 <curve25519_test+0x21a>
        return WC_TEST_RET_ENC_EC(ret);
 8004ef6:	4241      	negs	r1, r0
 8004ef8:	4c2c      	ldr	r4, [pc, #176]	; (8004fac <curve25519_test+0x2c4>)
 8004efa:	4837      	ldr	r0, [pc, #220]	; (8004fd8 <curve25519_test+0x2f0>)
 8004efc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004f00:	e740      	b.n	8004d84 <curve25519_test+0x9c>
    XMEMSET(sharedB, 0, sizeof(sharedB));
 8004f02:	462a      	mov	r2, r5
 8004f04:	a810      	add	r0, sp, #64	; 0x40
 8004f06:	f016 f893 	bl	801b030 <memset>
    ret = wc_curve25519_shared_secret(&userA, &userB, sharedB, &y);
 8004f0a:	ab03      	add	r3, sp, #12
 8004f0c:	aa10      	add	r2, sp, #64	; 0x40
 8004f0e:	4631      	mov	r1, r6
 8004f10:	a867      	add	r0, sp, #412	; 0x19c
    y = sizeof(sharedB);
 8004f12:	9503      	str	r5, [sp, #12]
    ret = wc_curve25519_shared_secret(&userA, &userB, sharedB, &y);
 8004f14:	f00d fb6a 	bl	80125ec <wc_curve25519_shared_secret>
    if (ret != 0)
 8004f18:	b128      	cbz	r0, 8004f26 <curve25519_test+0x23e>
        return WC_TEST_RET_ENC_EC(ret);
 8004f1a:	4240      	negs	r0, r0
 8004f1c:	4923      	ldr	r1, [pc, #140]	; (8004fac <curve25519_test+0x2c4>)
 8004f1e:	4c2f      	ldr	r4, [pc, #188]	; (8004fdc <curve25519_test+0x2f4>)
 8004f20:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004f24:	e74f      	b.n	8004dc6 <curve25519_test+0xde>
    if (XMEMCMP(ss, sharedB, y))
 8004f26:	a910      	add	r1, sp, #64	; 0x40
 8004f28:	9a03      	ldr	r2, [sp, #12]
 8004f2a:	a840      	add	r0, sp, #256	; 0x100
 8004f2c:	f016 f848 	bl	801afc0 <memcmp>
 8004f30:	4601      	mov	r1, r0
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f040 8257 	bne.w	80053e6 <curve25519_test+0x6fe>
    XMEMSET(sharedB, 0, sizeof(sharedB));
 8004f38:	462a      	mov	r2, r5
 8004f3a:	a810      	add	r0, sp, #64	; 0x40
 8004f3c:	f016 f878 	bl	801b030 <memset>
    ret = wc_curve25519_shared_secret(&userB, &userA, sharedB, &y);
 8004f40:	ab03      	add	r3, sp, #12
 8004f42:	aa10      	add	r2, sp, #64	; 0x40
 8004f44:	a967      	add	r1, sp, #412	; 0x19c
 8004f46:	4630      	mov	r0, r6
    y = sizeof(sharedB);
 8004f48:	9503      	str	r5, [sp, #12]
    ret = wc_curve25519_shared_secret(&userB, &userA, sharedB, &y);
 8004f4a:	f00d fb4f 	bl	80125ec <wc_curve25519_shared_secret>
    if (ret != 0)
 8004f4e:	b148      	cbz	r0, 8004f64 <curve25519_test+0x27c>
        return WC_TEST_RET_ENC_EC(ret);
 8004f50:	4c16      	ldr	r4, [pc, #88]	; (8004fac <curve25519_test+0x2c4>)
 8004f52:	4240      	negs	r0, r0
 8004f54:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004f58:	4360      	muls	r0, r4
 8004f5a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8004f5e:	f5a4 44f0 	sub.w	r4, r4, #30720	; 0x7800
 8004f62:	e732      	b.n	8004dca <curve25519_test+0xe2>
    if (XMEMCMP(ss, sharedB, y))
 8004f64:	9a03      	ldr	r2, [sp, #12]
 8004f66:	a910      	add	r1, sp, #64	; 0x40
 8004f68:	a840      	add	r0, sp, #256	; 0x100
 8004f6a:	f016 f829 	bl	801afc0 <memcmp>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	f040 823b 	bne.w	80053ea <curve25519_test+0x702>
    ret = wc_curve25519_import_private_raw(sa, sizeof(sa), pa, sizeof(pa),
 8004f74:	ab67      	add	r3, sp, #412	; 0x19c
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	aa28      	add	r2, sp, #160	; 0xa0
 8004f7a:	462b      	mov	r3, r5
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	a820      	add	r0, sp, #128	; 0x80
 8004f80:	f00d fc49 	bl	8012816 <wc_curve25519_import_private_raw>
    if (ret != 0)
 8004f84:	4604      	mov	r4, r0
 8004f86:	b368      	cbz	r0, 8004fe4 <curve25519_test+0x2fc>
        return WC_TEST_RET_ENC_EC(ret);
 8004f88:	4244      	negs	r4, r0
 8004f8a:	f3c4 010a 	ubfx	r1, r4, #0, #11
 8004f8e:	4814      	ldr	r0, [pc, #80]	; (8004fe0 <curve25519_test+0x2f8>)
 8004f90:	4c06      	ldr	r4, [pc, #24]	; (8004fac <curve25519_test+0x2c4>)
 8004f92:	e6f7      	b.n	8004d84 <curve25519_test+0x9c>
 8004f94:	0801e768 	.word	0x0801e768
 8004f98:	0801e789 	.word	0x0801e789
 8004f9c:	0801e7aa 	.word	0x0801e7aa
 8004fa0:	0801e7cb 	.word	0x0801e7cb
 8004fa4:	0801e7ec 	.word	0x0801e7ec
 8004fa8:	dfff8859 	.word	0xdfff8859
 8004fac:	fffe7960 	.word	0xfffe7960
 8004fb0:	dfff8850 	.word	0xdfff8850
 8004fb4:	dfff884c 	.word	0xdfff884c
 8004fb8:	0801e71c 	.word	0x0801e71c
 8004fbc:	20000188 	.word	0x20000188
 8004fc0:	dfff8845 	.word	0xdfff8845
 8004fc4:	0801e742 	.word	0x0801e742
 8004fc8:	dfff883f 	.word	0xdfff883f
 8004fcc:	dfff882f 	.word	0xdfff882f
 8004fd0:	dfff882a 	.word	0xdfff882a
 8004fd4:	dfff8816 	.word	0xdfff8816
 8004fd8:	dfff8811 	.word	0xdfff8811
 8004fdc:	dfff880a 	.word	0xdfff880a
 8004fe0:	dfff87f7 	.word	0xdfff87f7
    wc_curve25519_free(&userB);
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f00d fc35 	bl	8012854 <wc_curve25519_free>
    wc_curve25519_init_ex(&userB, HEAP_HINT, devId);
 8004fea:	f06f 0201 	mvn.w	r2, #1
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f00d fc1d 	bl	8012830 <wc_curve25519_init_ex>
    ret = wc_curve25519_make_key(&rng, 32, &userB);
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	a806      	add	r0, sp, #24
 8004ffc:	f00d fa92 	bl	8012524 <wc_curve25519_make_key>
    if (ret != 0)
 8005000:	b128      	cbz	r0, 800500e <curve25519_test+0x326>
        return WC_TEST_RET_ENC_EC(ret);
 8005002:	4240      	negs	r0, r0
 8005004:	49aa      	ldr	r1, [pc, #680]	; (80052b0 <curve25519_test+0x5c8>)
 8005006:	4cab      	ldr	r4, [pc, #684]	; (80052b4 <curve25519_test+0x5cc>)
 8005008:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800500c:	e6db      	b.n	8004dc6 <curve25519_test+0xde>
    x = sizeof(sharedA);
 800500e:	2420      	movs	r4, #32
    ret = wc_curve25519_shared_secret(&userA, &userB, sharedA, &x);
 8005010:	ab04      	add	r3, sp, #16
 8005012:	eb0d 0204 	add.w	r2, sp, r4
 8005016:	a97a      	add	r1, sp, #488	; 0x1e8
 8005018:	a867      	add	r0, sp, #412	; 0x19c
    x = sizeof(sharedA);
 800501a:	9404      	str	r4, [sp, #16]
    ret = wc_curve25519_shared_secret(&userA, &userB, sharedA, &x);
 800501c:	f00d fae6 	bl	80125ec <wc_curve25519_shared_secret>
    if (ret != 0)
 8005020:	b128      	cbz	r0, 800502e <curve25519_test+0x346>
        return WC_TEST_RET_ENC_EC(ret);
 8005022:	4240      	negs	r0, r0
 8005024:	49a2      	ldr	r1, [pc, #648]	; (80052b0 <curve25519_test+0x5c8>)
 8005026:	4ca4      	ldr	r4, [pc, #656]	; (80052b8 <curve25519_test+0x5d0>)
 8005028:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800502c:	e6cb      	b.n	8004dc6 <curve25519_test+0xde>
    ret = wc_curve25519_shared_secret(&userB, &userA, sharedB, &y);
 800502e:	ab03      	add	r3, sp, #12
 8005030:	aa10      	add	r2, sp, #64	; 0x40
 8005032:	a967      	add	r1, sp, #412	; 0x19c
 8005034:	a87a      	add	r0, sp, #488	; 0x1e8
    y = sizeof(sharedB);
 8005036:	9403      	str	r4, [sp, #12]
    ret = wc_curve25519_shared_secret(&userB, &userA, sharedB, &y);
 8005038:	f00d fad8 	bl	80125ec <wc_curve25519_shared_secret>
    if (ret != 0)
 800503c:	b128      	cbz	r0, 800504a <curve25519_test+0x362>
        return WC_TEST_RET_ENC_EC(ret);
 800503e:	4240      	negs	r0, r0
 8005040:	499b      	ldr	r1, [pc, #620]	; (80052b0 <curve25519_test+0x5c8>)
 8005042:	4c9e      	ldr	r4, [pc, #632]	; (80052bc <curve25519_test+0x5d4>)
 8005044:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005048:	e6bd      	b.n	8004dc6 <curve25519_test+0xde>
    if (y != x)
 800504a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800504e:	429a      	cmp	r2, r3
 8005050:	f040 81cd 	bne.w	80053ee <curve25519_test+0x706>
    if (XMEMCMP(sharedA, sharedB, x))
 8005054:	a910      	add	r1, sp, #64	; 0x40
 8005056:	a808      	add	r0, sp, #32
 8005058:	f015 ffb2 	bl	801afc0 <memcmp>
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 81c8 	bne.w	80053f2 <curve25519_test+0x70a>
    byte sa[X25519_TEST_CNT][32] = {
 8005062:	4b97      	ldr	r3, [pc, #604]	; (80052c0 <curve25519_test+0x5d8>)
 8005064:	ac48      	add	r4, sp, #288	; 0x120
 8005066:	f103 0520 	add.w	r5, r3, #32
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	4622      	mov	r2, r4
 8005070:	c203      	stmia	r2!, {r0, r1}
 8005072:	3308      	adds	r3, #8
 8005074:	42ab      	cmp	r3, r5
 8005076:	4614      	mov	r4, r2
 8005078:	d1f7      	bne.n	800506a <curve25519_test+0x382>
    byte pb[X25519_TEST_CNT][32] = {
 800507a:	4b92      	ldr	r3, [pc, #584]	; (80052c4 <curve25519_test+0x5dc>)
 800507c:	ac50      	add	r4, sp, #320	; 0x140
 800507e:	f103 0520 	add.w	r5, r3, #32
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	4622      	mov	r2, r4
 8005088:	c203      	stmia	r2!, {r0, r1}
 800508a:	3308      	adds	r3, #8
 800508c:	42ab      	cmp	r3, r5
 800508e:	4614      	mov	r4, r2
 8005090:	d1f7      	bne.n	8005082 <curve25519_test+0x39a>
    byte ss[X25519_TEST_CNT][32] = {
 8005092:	4b8d      	ldr	r3, [pc, #564]	; (80052c8 <curve25519_test+0x5e0>)
 8005094:	ac5b      	add	r4, sp, #364	; 0x16c
 8005096:	f103 0520 	add.w	r5, r3, #32
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	4622      	mov	r2, r4
 80050a0:	c203      	stmia	r2!, {r0, r1}
 80050a2:	3308      	adds	r3, #8
 80050a4:	42ab      	cmp	r3, r5
 80050a6:	4614      	mov	r4, r2
 80050a8:	d1f7      	bne.n	800509a <curve25519_test+0x3b2>
    wc_curve25519_init_ex(&userA, HEAP_HINT, devId);
 80050aa:	adb8      	add	r5, sp, #736	; 0x2e0
 80050ac:	f06f 0201 	mvn.w	r2, #1
 80050b0:	2100      	movs	r1, #0
 80050b2:	4628      	mov	r0, r5
 80050b4:	f00d fbbc 	bl	8012830 <wc_curve25519_init_ex>
        if (wc_curve25519_import_private_raw(sa[i], sizeof(sa[i]), pb[i],
 80050b8:	2320      	movs	r3, #32
 80050ba:	4619      	mov	r1, r3
 80050bc:	9500      	str	r5, [sp, #0]
 80050be:	aa50      	add	r2, sp, #320	; 0x140
 80050c0:	a848      	add	r0, sp, #288	; 0x120
 80050c2:	f00d fba8 	bl	8012816 <wc_curve25519_import_private_raw>
 80050c6:	4601      	mov	r1, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d140      	bne.n	800514e <curve25519_test+0x466>
        XMEMSET(shared, 0, sizeof(shared));
 80050cc:	2220      	movs	r2, #32
 80050ce:	a8a0      	add	r0, sp, #640	; 0x280
 80050d0:	f015 ffae 	bl	801b030 <memset>
        y = sizeof(shared);
 80050d4:	2320      	movs	r3, #32
 80050d6:	9305      	str	r3, [sp, #20]
        if (wc_curve25519_shared_secret(&userA, &userA, shared, &y) != 0) {
 80050d8:	aaa0      	add	r2, sp, #640	; 0x280
 80050da:	ab05      	add	r3, sp, #20
 80050dc:	4629      	mov	r1, r5
 80050de:	4628      	mov	r0, r5
 80050e0:	f00d fa84 	bl	80125ec <wc_curve25519_shared_secret>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d134      	bne.n	8005152 <curve25519_test+0x46a>
        if (XMEMCMP(ss[i], shared, y)) {
 80050e8:	9a05      	ldr	r2, [sp, #20]
 80050ea:	a9a0      	add	r1, sp, #640	; 0x280
 80050ec:	a85b      	add	r0, sp, #364	; 0x16c
 80050ee:	f015 ff67 	bl	801afc0 <memcmp>
            ret = WC_TEST_RET_ENC_I(i); break;
 80050f2:	4b76      	ldr	r3, [pc, #472]	; (80052cc <curve25519_test+0x5e4>)
 80050f4:	1e04      	subs	r4, r0, #0
 80050f6:	bf18      	it	ne
 80050f8:	461c      	movne	r4, r3
    wc_curve25519_free(&userA);
 80050fa:	4628      	mov	r0, r5
 80050fc:	f00d fbaa 	bl	8012854 <wc_curve25519_free>
    if (ret != 0)
 8005100:	2c00      	cmp	r4, #0
 8005102:	f47f ae62 	bne.w	8004dca <curve25519_test+0xe2>
    byte fail_le[][CURVE25519_KEYSIZE] = {
 8005106:	4972      	ldr	r1, [pc, #456]	; (80052d0 <curve25519_test+0x5e8>)
 8005108:	2260      	movs	r2, #96	; 0x60
 800510a:	a8a0      	add	r0, sp, #640	; 0x280
 800510c:	f015 ff68 	bl	801afe0 <memcpy>
    byte fail_be[][CURVE25519_KEYSIZE] = {
 8005110:	4970      	ldr	r1, [pc, #448]	; (80052d4 <curve25519_test+0x5ec>)
 8005112:	2260      	movs	r2, #96	; 0x60
 8005114:	4628      	mov	r0, r5
 8005116:	f015 ff63 	bl	801afe0 <memcpy>
    byte good[CURVE25519_KEYSIZE] = {
 800511a:	4b6f      	ldr	r3, [pc, #444]	; (80052d8 <curve25519_test+0x5f0>)
 800511c:	ae5b      	add	r6, sp, #364	; 0x16c
 800511e:	f103 0720 	add.w	r7, r3, #32
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	6859      	ldr	r1, [r3, #4]
 8005126:	4632      	mov	r2, r6
 8005128:	c203      	stmia	r2!, {r0, r1}
 800512a:	3308      	adds	r3, #8
 800512c:	42bb      	cmp	r3, r7
 800512e:	4616      	mov	r6, r2
 8005130:	d1f7      	bne.n	8005122 <curve25519_test+0x43a>
    ret = wc_curve25519_check_public(NULL, 0, EC25519_LITTLE_ENDIAN);
 8005132:	2200      	movs	r2, #0
 8005134:	4611      	mov	r1, r2
 8005136:	4610      	mov	r0, r2
 8005138:	f00d fabb 	bl	80126b2 <wc_curve25519_check_public>
    if (ret != BAD_FUNC_ARG) {
 800513c:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8005140:	d009      	beq.n	8005156 <curve25519_test+0x46e>
        return WC_TEST_RET_ENC_EC(ret);
 8005142:	4240      	negs	r0, r0
 8005144:	495a      	ldr	r1, [pc, #360]	; (80052b0 <curve25519_test+0x5c8>)
 8005146:	4c65      	ldr	r4, [pc, #404]	; (80052dc <curve25519_test+0x5f4>)
 8005148:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800514c:	e63b      	b.n	8004dc6 <curve25519_test+0xde>
            ret = WC_TEST_RET_ENC_I(i); break;
 800514e:	4c64      	ldr	r4, [pc, #400]	; (80052e0 <curve25519_test+0x5f8>)
 8005150:	e7d3      	b.n	80050fa <curve25519_test+0x412>
            ret = WC_TEST_RET_ENC_I(i); break;
 8005152:	4c64      	ldr	r4, [pc, #400]	; (80052e4 <curve25519_test+0x5fc>)
 8005154:	e7d1      	b.n	80050fa <curve25519_test+0x412>
    ret = wc_curve25519_check_public(NULL, 0, EC25519_BIG_ENDIAN);
 8005156:	2100      	movs	r1, #0
 8005158:	2201      	movs	r2, #1
 800515a:	4608      	mov	r0, r1
 800515c:	f00d faa9 	bl	80126b2 <wc_curve25519_check_public>
    if (ret != BAD_FUNC_ARG) {
 8005160:	f110 0fad 	cmn.w	r0, #173	; 0xad
 8005164:	d005      	beq.n	8005172 <curve25519_test+0x48a>
        return WC_TEST_RET_ENC_EC(ret);
 8005166:	4240      	negs	r0, r0
 8005168:	4951      	ldr	r1, [pc, #324]	; (80052b0 <curve25519_test+0x5c8>)
 800516a:	4c5f      	ldr	r4, [pc, #380]	; (80052e8 <curve25519_test+0x600>)
 800516c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005170:	e629      	b.n	8004dc6 <curve25519_test+0xde>
    ret = wc_curve25519_check_public(good, 0, EC25519_LITTLE_ENDIAN);
 8005172:	2200      	movs	r2, #0
 8005174:	4611      	mov	r1, r2
 8005176:	a85b      	add	r0, sp, #364	; 0x16c
 8005178:	f00d fa9b 	bl	80126b2 <wc_curve25519_check_public>
    if (ret != BUFFER_E)
 800517c:	f110 0f84 	cmn.w	r0, #132	; 0x84
 8005180:	d005      	beq.n	800518e <curve25519_test+0x4a6>
        return WC_TEST_RET_ENC_EC(ret);
 8005182:	4240      	negs	r0, r0
 8005184:	494a      	ldr	r1, [pc, #296]	; (80052b0 <curve25519_test+0x5c8>)
 8005186:	4c59      	ldr	r4, [pc, #356]	; (80052ec <curve25519_test+0x604>)
 8005188:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800518c:	e61b      	b.n	8004dc6 <curve25519_test+0xde>
    ret = wc_curve25519_check_public(good, 0, EC25519_BIG_ENDIAN);
 800518e:	2201      	movs	r2, #1
 8005190:	2100      	movs	r1, #0
 8005192:	a85b      	add	r0, sp, #364	; 0x16c
 8005194:	f00d fa8d 	bl	80126b2 <wc_curve25519_check_public>
    if (ret != BUFFER_E)
 8005198:	f110 0f84 	cmn.w	r0, #132	; 0x84
 800519c:	d005      	beq.n	80051aa <curve25519_test+0x4c2>
        return WC_TEST_RET_ENC_EC(ret);
 800519e:	4240      	negs	r0, r0
 80051a0:	4943      	ldr	r1, [pc, #268]	; (80052b0 <curve25519_test+0x5c8>)
 80051a2:	4c53      	ldr	r4, [pc, #332]	; (80052f0 <curve25519_test+0x608>)
 80051a4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80051a8:	e60d      	b.n	8004dc6 <curve25519_test+0xde>
    for (i = 1; i < CURVE25519_KEYSIZE + 2; i++) {
 80051aa:	2601      	movs	r6, #1
        if (i == CURVE25519_KEYSIZE)
 80051ac:	2e20      	cmp	r6, #32
 80051ae:	d015      	beq.n	80051dc <curve25519_test+0x4f4>
        if (wc_curve25519_check_public(good, i, EC25519_LITTLE_ENDIAN) !=
 80051b0:	2200      	movs	r2, #0
 80051b2:	4631      	mov	r1, r6
 80051b4:	a85b      	add	r0, sp, #364	; 0x16c
 80051b6:	f00d fa7c 	bl	80126b2 <wc_curve25519_check_public>
 80051ba:	30aa      	adds	r0, #170	; 0xaa
 80051bc:	d004      	beq.n	80051c8 <curve25519_test+0x4e0>
            return WC_TEST_RET_ENC_I(i);
 80051be:	4c3c      	ldr	r4, [pc, #240]	; (80052b0 <curve25519_test+0x5c8>)
 80051c0:	484c      	ldr	r0, [pc, #304]	; (80052f4 <curve25519_test+0x60c>)
            return WC_TEST_RET_ENC_I(i);
 80051c2:	fb04 0406 	mla	r4, r4, r6, r0
 80051c6:	e600      	b.n	8004dca <curve25519_test+0xe2>
        if (wc_curve25519_check_public(good, i, EC25519_BIG_ENDIAN) !=
 80051c8:	2201      	movs	r2, #1
 80051ca:	4631      	mov	r1, r6
 80051cc:	a85b      	add	r0, sp, #364	; 0x16c
 80051ce:	f00d fa70 	bl	80126b2 <wc_curve25519_check_public>
 80051d2:	30aa      	adds	r0, #170	; 0xaa
 80051d4:	d002      	beq.n	80051dc <curve25519_test+0x4f4>
            return WC_TEST_RET_ENC_I(i);
 80051d6:	4c36      	ldr	r4, [pc, #216]	; (80052b0 <curve25519_test+0x5c8>)
 80051d8:	4847      	ldr	r0, [pc, #284]	; (80052f8 <curve25519_test+0x610>)
 80051da:	e7f2      	b.n	80051c2 <curve25519_test+0x4da>
    for (i = 1; i < CURVE25519_KEYSIZE + 2; i++) {
 80051dc:	3601      	adds	r6, #1
 80051de:	2e22      	cmp	r6, #34	; 0x22
 80051e0:	d1e4      	bne.n	80051ac <curve25519_test+0x4c4>
 80051e2:	afa0      	add	r7, sp, #640	; 0x280
    for (i = 0; i < (int)(sizeof(fail_le) / sizeof(*fail_le)); i++) {
 80051e4:	2600      	movs	r6, #0
        if (wc_curve25519_check_public(fail_le[i], CURVE25519_KEYSIZE,
 80051e6:	2200      	movs	r2, #0
 80051e8:	2120      	movs	r1, #32
 80051ea:	4638      	mov	r0, r7
 80051ec:	f00d fa61 	bl	80126b2 <wc_curve25519_check_public>
 80051f0:	b910      	cbnz	r0, 80051f8 <curve25519_test+0x510>
            return WC_TEST_RET_ENC_I(i);
 80051f2:	4c2f      	ldr	r4, [pc, #188]	; (80052b0 <curve25519_test+0x5c8>)
 80051f4:	4841      	ldr	r0, [pc, #260]	; (80052fc <curve25519_test+0x614>)
 80051f6:	e7e4      	b.n	80051c2 <curve25519_test+0x4da>
    for (i = 0; i < (int)(sizeof(fail_le) / sizeof(*fail_le)); i++) {
 80051f8:	3601      	adds	r6, #1
 80051fa:	2e03      	cmp	r6, #3
 80051fc:	f107 0720 	add.w	r7, r7, #32
 8005200:	d1f1      	bne.n	80051e6 <curve25519_test+0x4fe>
 8005202:	462e      	mov	r6, r5
        if (wc_curve25519_check_public(fail_be[i], CURVE25519_KEYSIZE,
 8005204:	2201      	movs	r2, #1
 8005206:	2120      	movs	r1, #32
 8005208:	4630      	mov	r0, r6
 800520a:	f00d fa52 	bl	80126b2 <wc_curve25519_check_public>
 800520e:	b920      	cbnz	r0, 800521a <curve25519_test+0x532>
            return WC_TEST_RET_ENC_I(i);
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <curve25519_test+0x5c8>)
 8005212:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <curve25519_test+0x618>)
 8005214:	fb02 3404 	mla	r4, r2, r4, r3
 8005218:	e5d7      	b.n	8004dca <curve25519_test+0xe2>
    for (i = 0; i < (int)(sizeof(fail_be) / sizeof(*fail_be)); i++) {
 800521a:	3401      	adds	r4, #1
 800521c:	2c03      	cmp	r4, #3
 800521e:	f106 0620 	add.w	r6, r6, #32
 8005222:	d1ef      	bne.n	8005204 <curve25519_test+0x51c>
    ret = wc_curve25519_check_public(good, CURVE25519_KEYSIZE,
 8005224:	2200      	movs	r2, #0
 8005226:	2120      	movs	r1, #32
 8005228:	a85b      	add	r0, sp, #364	; 0x16c
 800522a:	f00d fa42 	bl	80126b2 <wc_curve25519_check_public>
    if (ret != 0) {
 800522e:	b128      	cbz	r0, 800523c <curve25519_test+0x554>
        return WC_TEST_RET_ENC_EC(ret);
 8005230:	4240      	negs	r0, r0
 8005232:	491f      	ldr	r1, [pc, #124]	; (80052b0 <curve25519_test+0x5c8>)
 8005234:	4c33      	ldr	r4, [pc, #204]	; (8005304 <curve25519_test+0x61c>)
 8005236:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800523a:	e5c4      	b.n	8004dc6 <curve25519_test+0xde>
    ret = wc_curve25519_check_public(good, CURVE25519_KEYSIZE,
 800523c:	2201      	movs	r2, #1
 800523e:	2120      	movs	r1, #32
 8005240:	a85b      	add	r0, sp, #364	; 0x16c
 8005242:	f00d fa36 	bl	80126b2 <wc_curve25519_check_public>
    if (ret != 0) {
 8005246:	2800      	cmp	r0, #0
 8005248:	d164      	bne.n	8005314 <curve25519_test+0x62c>
    const byte kCurve25519PrivDer[] = {
 800524a:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <curve25519_test+0x620>)
 800524c:	ac5b      	add	r4, sp, #364	; 0x16c
 800524e:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
 8005256:	4622      	mov	r2, r4
 8005258:	c203      	stmia	r2!, {r0, r1}
 800525a:	3308      	adds	r3, #8
 800525c:	42b3      	cmp	r3, r6
 800525e:	4614      	mov	r4, r2
 8005260:	d1f7      	bne.n	8005252 <curve25519_test+0x56a>
    const byte kCurve25519PubDer[] = {
 8005262:	4a2a      	ldr	r2, [pc, #168]	; (800530c <curve25519_test+0x624>)
 8005264:	ab50      	add	r3, sp, #320	; 0x140
 8005266:	f102 0628 	add.w	r6, r2, #40	; 0x28
 800526a:	6810      	ldr	r0, [r2, #0]
 800526c:	6851      	ldr	r1, [r2, #4]
 800526e:	461c      	mov	r4, r3
 8005270:	c403      	stmia	r4!, {r0, r1}
 8005272:	3208      	adds	r2, #8
 8005274:	42b2      	cmp	r2, r6
 8005276:	4623      	mov	r3, r4
 8005278:	d1f7      	bne.n	800526a <curve25519_test+0x582>
 800527a:	6810      	ldr	r0, [r2, #0]
 800527c:	6020      	str	r0, [r4, #0]
    ret = wc_curve25519_init_ex(&key, HEAP_HINT, devId);
 800527e:	f06f 0201 	mvn.w	r2, #1
 8005282:	2100      	movs	r1, #0
 8005284:	a8a0      	add	r0, sp, #640	; 0x280
 8005286:	f00d fad3 	bl	8012830 <wc_curve25519_init_ex>
    if (ret != 0)
 800528a:	2800      	cmp	r0, #0
 800528c:	d148      	bne.n	8005320 <curve25519_test+0x638>
        idx = 0;
 800528e:	9048      	str	r0, [sp, #288]	; 0x120
        ret = wc_Curve25519PrivateKeyDecode(kCurve25519PrivDer, &idx, &key,
 8005290:	2330      	movs	r3, #48	; 0x30
 8005292:	aaa0      	add	r2, sp, #640	; 0x280
 8005294:	a948      	add	r1, sp, #288	; 0x120
 8005296:	a85b      	add	r0, sp, #364	; 0x16c
 8005298:	f00c fd76 	bl	8011d88 <wc_Curve25519PrivateKeyDecode>
        if (ret < 0)
 800529c:	1e04      	subs	r4, r0, #0
 800529e:	da45      	bge.n	800532c <curve25519_test+0x644>
            ret = WC_TEST_RET_ENC_EC(ret);
 80052a0:	4260      	negs	r0, r4
 80052a2:	4903      	ldr	r1, [pc, #12]	; (80052b0 <curve25519_test+0x5c8>)
 80052a4:	4c1a      	ldr	r4, [pc, #104]	; (8005310 <curve25519_test+0x628>)
 80052a6:	f3c0 000a 	ubfx	r0, r0, #0, #11
            ret = WC_TEST_RET_ENC_EC(ret);
 80052aa:	fb01 4400 	mla	r4, r1, r0, r4
 80052ae:	e048      	b.n	8005342 <curve25519_test+0x65a>
 80052b0:	fffe7960 	.word	0xfffe7960
 80052b4:	dfff87f0 	.word	0xdfff87f0
 80052b8:	dfff87eb 	.word	0xdfff87eb
 80052bc:	dfff87e6 	.word	0xdfff87e6
 80052c0:	0801bf05 	.word	0x0801bf05
 80052c4:	0801bf25 	.word	0x0801bf25
 80052c8:	0801bf45 	.word	0x0801bf45
 80052cc:	9fff8974 	.word	0x9fff8974
 80052d0:	0801bf65 	.word	0x0801bf65
 80052d4:	0801bfc5 	.word	0x0801bfc5
 80052d8:	0801c025 	.word	0x0801c025
 80052dc:	dfff892d 	.word	0xdfff892d
 80052e0:	9fff897f 	.word	0x9fff897f
 80052e4:	9fff8978 	.word	0x9fff8978
 80052e8:	dfff8929 	.word	0xdfff8929
 80052ec:	dfff8924 	.word	0xdfff8924
 80052f0:	dfff8921 	.word	0xdfff8921
 80052f4:	9fff8919 	.word	0x9fff8919
 80052f8:	9fff8915 	.word	0x9fff8915
 80052fc:	9fff890d 	.word	0x9fff890d
 8005300:	9fff8906 	.word	0x9fff8906
 8005304:	dfff88fe 	.word	0xdfff88fe
 8005308:	0801c045 	.word	0x0801c045
 800530c:	0801c075 	.word	0x0801c075
 8005310:	dfff88cf 	.word	0xdfff88cf
        return WC_TEST_RET_ENC_EC(ret);
 8005314:	4240      	negs	r0, r0
 8005316:	4938      	ldr	r1, [pc, #224]	; (80053f8 <curve25519_test+0x710>)
 8005318:	4c38      	ldr	r4, [pc, #224]	; (80053fc <curve25519_test+0x714>)
 800531a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800531e:	e552      	b.n	8004dc6 <curve25519_test+0xde>
        return WC_TEST_RET_ENC_EC(ret);
 8005320:	4240      	negs	r0, r0
 8005322:	4935      	ldr	r1, [pc, #212]	; (80053f8 <curve25519_test+0x710>)
 8005324:	4c36      	ldr	r4, [pc, #216]	; (8005400 <curve25519_test+0x718>)
 8005326:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800532a:	e54c      	b.n	8004dc6 <curve25519_test+0xde>
    if (ret == 0) {
 800532c:	d109      	bne.n	8005342 <curve25519_test+0x65a>
        ret = wc_Curve25519PrivateKeyToDer(&key, output, outputSz);
 800532e:	2280      	movs	r2, #128	; 0x80
 8005330:	4629      	mov	r1, r5
 8005332:	a8a0      	add	r0, sp, #640	; 0x280
 8005334:	f00c fdc0 	bl	8011eb8 <wc_Curve25519PrivateKeyToDer>
        if (ret >= 0) {
 8005338:	1e02      	subs	r2, r0, #0
 800533a:	db15      	blt.n	8005368 <curve25519_test+0x680>
    if (ret == 0 && (outputSz != (word32)sizeof(kCurve25519PrivDer) ||
 800533c:	2a30      	cmp	r2, #48	; 0x30
 800533e:	d01b      	beq.n	8005378 <curve25519_test+0x690>
        ret = WC_TEST_RET_ENC_NC;
 8005340:	4c30      	ldr	r4, [pc, #192]	; (8005404 <curve25519_test+0x71c>)
    wc_curve25519_free(&key);
 8005342:	a8a0      	add	r0, sp, #640	; 0x280
 8005344:	f00d fa86 	bl	8012854 <wc_curve25519_free>
    if (ret != 0)
 8005348:	2c00      	cmp	r4, #0
 800534a:	f47f ad3e 	bne.w	8004dca <curve25519_test+0xe2>
    wc_curve25519_free(&pubKey);
 800534e:	a88d      	add	r0, sp, #564	; 0x234
 8005350:	f00d fa80 	bl	8012854 <wc_curve25519_free>
    wc_curve25519_free(&userB);
 8005354:	a87a      	add	r0, sp, #488	; 0x1e8
 8005356:	f00d fa7d 	bl	8012854 <wc_curve25519_free>
    wc_curve25519_free(&userA);
 800535a:	a867      	add	r0, sp, #412	; 0x19c
 800535c:	f00d fa7a 	bl	8012854 <wc_curve25519_free>
    wc_FreeRng(&rng);
 8005360:	a806      	add	r0, sp, #24
 8005362:	f007 f9b3 	bl	800c6cc <wc_FreeRng>
    return 0;
 8005366:	e530      	b.n	8004dca <curve25519_test+0xe2>
            ret = WC_TEST_RET_ENC_EC(ret);
 8005368:	4252      	negs	r2, r2
 800536a:	4c23      	ldr	r4, [pc, #140]	; (80053f8 <curve25519_test+0x710>)
 800536c:	4826      	ldr	r0, [pc, #152]	; (8005408 <curve25519_test+0x720>)
 800536e:	f3c2 020a 	ubfx	r2, r2, #0, #11
            ret = WC_TEST_RET_ENC_EC(ret);
 8005372:	fb04 0402 	mla	r4, r4, r2, r0
 8005376:	e7e4      	b.n	8005342 <curve25519_test+0x65a>
                     XMEMCMP(output, kCurve25519PrivDer, outputSz) != 0)) {
 8005378:	a95b      	add	r1, sp, #364	; 0x16c
 800537a:	4628      	mov	r0, r5
 800537c:	f015 fe20 	bl	801afc0 <memcmp>
    if (ret == 0 && (outputSz != (word32)sizeof(kCurve25519PrivDer) ||
 8005380:	2800      	cmp	r0, #0
 8005382:	d1dd      	bne.n	8005340 <curve25519_test+0x658>
        idx = 0;
 8005384:	9048      	str	r0, [sp, #288]	; 0x120
        ret = wc_Curve25519PublicKeyDecode(kCurve25519PubDer, &idx, &key,
 8005386:	232c      	movs	r3, #44	; 0x2c
 8005388:	aaa0      	add	r2, sp, #640	; 0x280
 800538a:	a948      	add	r1, sp, #288	; 0x120
 800538c:	a850      	add	r0, sp, #320	; 0x140
 800538e:	f00c fd1a 	bl	8011dc6 <wc_Curve25519PublicKeyDecode>
        if (ret < 0)
 8005392:	1e04      	subs	r4, r0, #0
 8005394:	da05      	bge.n	80053a2 <curve25519_test+0x6ba>
            ret = WC_TEST_RET_ENC_EC(ret);
 8005396:	4260      	negs	r0, r4
 8005398:	4917      	ldr	r1, [pc, #92]	; (80053f8 <curve25519_test+0x710>)
 800539a:	4c1c      	ldr	r4, [pc, #112]	; (800540c <curve25519_test+0x724>)
 800539c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80053a0:	e783      	b.n	80052aa <curve25519_test+0x5c2>
    if (ret == 0) {
 80053a2:	d1ce      	bne.n	8005342 <curve25519_test+0x65a>
        ret = wc_Curve25519PublicKeyToDer(&key, output, outputSz, 1);
 80053a4:	2280      	movs	r2, #128	; 0x80
 80053a6:	2301      	movs	r3, #1
 80053a8:	4629      	mov	r1, r5
 80053aa:	a8a0      	add	r0, sp, #640	; 0x280
 80053ac:	f00c fd9f 	bl	8011eee <wc_Curve25519PublicKeyToDer>
        if (ret >= 0) {
 80053b0:	1e02      	subs	r2, r0, #0
 80053b2:	db0a      	blt.n	80053ca <curve25519_test+0x6e2>
    if (ret == 0 && (outputSz != (word32)sizeof(kCurve25519PubDer) ||
 80053b4:	2a2c      	cmp	r2, #44	; 0x2c
 80053b6:	d106      	bne.n	80053c6 <curve25519_test+0x6de>
                     XMEMCMP(output, kCurve25519PubDer, outputSz) != 0)) {
 80053b8:	a950      	add	r1, sp, #320	; 0x140
 80053ba:	a8b8      	add	r0, sp, #736	; 0x2e0
 80053bc:	f015 fe00 	bl	801afc0 <memcmp>
    if (ret == 0 && (outputSz != (word32)sizeof(kCurve25519PubDer) ||
 80053c0:	4604      	mov	r4, r0
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0bd      	beq.n	8005342 <curve25519_test+0x65a>
        ret = WC_TEST_RET_ENC_NC;
 80053c6:	4c12      	ldr	r4, [pc, #72]	; (8005410 <curve25519_test+0x728>)
 80053c8:	e7bb      	b.n	8005342 <curve25519_test+0x65a>
            ret = WC_TEST_RET_ENC_EC(ret);
 80053ca:	4252      	negs	r2, r2
 80053cc:	4c0a      	ldr	r4, [pc, #40]	; (80053f8 <curve25519_test+0x710>)
 80053ce:	4811      	ldr	r0, [pc, #68]	; (8005414 <curve25519_test+0x72c>)
 80053d0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80053d4:	e7cd      	b.n	8005372 <curve25519_test+0x68a>
        return WC_TEST_RET_ENC_NC;
 80053d6:	4c10      	ldr	r4, [pc, #64]	; (8005418 <curve25519_test+0x730>)
 80053d8:	e4f7      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053da:	4c10      	ldr	r4, [pc, #64]	; (800541c <curve25519_test+0x734>)
 80053dc:	e4f5      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053de:	4c10      	ldr	r4, [pc, #64]	; (8005420 <curve25519_test+0x738>)
 80053e0:	e4f3      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053e2:	4c10      	ldr	r4, [pc, #64]	; (8005424 <curve25519_test+0x73c>)
 80053e4:	e4f1      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053e6:	4c10      	ldr	r4, [pc, #64]	; (8005428 <curve25519_test+0x740>)
 80053e8:	e4ef      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053ea:	4c10      	ldr	r4, [pc, #64]	; (800542c <curve25519_test+0x744>)
 80053ec:	e4ed      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053ee:	4c10      	ldr	r4, [pc, #64]	; (8005430 <curve25519_test+0x748>)
 80053f0:	e4eb      	b.n	8004dca <curve25519_test+0xe2>
        return WC_TEST_RET_ENC_NC;
 80053f2:	4c10      	ldr	r4, [pc, #64]	; (8005434 <curve25519_test+0x74c>)
 80053f4:	e4e9      	b.n	8004dca <curve25519_test+0xe2>
 80053f6:	bf00      	nop
 80053f8:	fffe7960 	.word	0xfffe7960
 80053fc:	dfff88f9 	.word	0xdfff88f9
 8005400:	dfff88d7 	.word	0xdfff88d7
 8005404:	ffff88c0 	.word	0xffff88c0
 8005408:	dfff88c5 	.word	0xdfff88c5
 800540c:	dfff88b7 	.word	0xdfff88b7
 8005410:	ffff88a8 	.word	0xffff88a8
 8005414:	dfff88ad 	.word	0xdfff88ad
 8005418:	ffff883a 	.word	0xffff883a
 800541c:	ffff8837 	.word	0xffff8837
 8005420:	ffff8820 	.word	0xffff8820
 8005424:	ffff881c 	.word	0xffff881c
 8005428:	ffff8807 	.word	0xffff8807
 800542c:	ffff87fd 	.word	0xffff87fd
 8005430:	ffff87e2 	.word	0xffff87e2
 8005434:	ffff87df 	.word	0xffff87df

08005438 <ed25519_test>:
{
 8005438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543c:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
    ret = wc_InitRng_ex(&rng, HEAP_HINT, devId);
 8005440:	f06f 0201 	mvn.w	r2, #1
 8005444:	2100      	movs	r1, #0
 8005446:	a810      	add	r0, sp, #64	; 0x40
 8005448:	f007 f921 	bl	800c68e <wc_InitRng_ex>
    if (ret != 0)
 800544c:	4604      	mov	r4, r0
 800544e:	b138      	cbz	r0, 8005460 <ed25519_test+0x28>
        return WC_TEST_RET_ENC_EC(ret);
 8005450:	4240      	negs	r0, r0
 8005452:	4987      	ldr	r1, [pc, #540]	; (8005670 <ed25519_test+0x238>)
 8005454:	4c87      	ldr	r4, [pc, #540]	; (8005674 <ed25519_test+0x23c>)
 8005456:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 800545a:	fb01 4400 	mla	r4, r1, r0, r4
    if (ret != 0)
 800545e:	e04c      	b.n	80054fa <ed25519_test+0xc2>
    wc_ed25519_init_ex(&key, HEAP_HINT, devId);
 8005460:	4601      	mov	r1, r0
 8005462:	f06f 0201 	mvn.w	r2, #1
 8005466:	a842      	add	r0, sp, #264	; 0x108
 8005468:	f00d fd1b 	bl	8012ea2 <wc_ed25519_init_ex>
    wc_ed25519_init_ex(&key2, HEAP_HINT, devId);
 800546c:	f06f 0201 	mvn.w	r2, #1
 8005470:	4621      	mov	r1, r4
 8005472:	a85c      	add	r0, sp, #368	; 0x170
 8005474:	f00d fd15 	bl	8012ea2 <wc_ed25519_init_ex>
    wc_ed25519_init_ex(&key3, HEAP_HINT, devId);
 8005478:	f06f 0201 	mvn.w	r2, #1
 800547c:	4621      	mov	r1, r4
 800547e:	a876      	add	r0, sp, #472	; 0x1d8
 8005480:	f00d fd0f 	bl	8012ea2 <wc_ed25519_init_ex>
    wc_ed25519_make_key(&rng, ED25519_KEY_SIZE, &key);
 8005484:	aa42      	add	r2, sp, #264	; 0x108
 8005486:	2120      	movs	r1, #32
 8005488:	a810      	add	r0, sp, #64	; 0x40
 800548a:	f00d fa68 	bl	801295e <wc_ed25519_make_key>
    wc_ed25519_make_key(&rng, ED25519_KEY_SIZE, &key2);
 800548e:	aa5c      	add	r2, sp, #368	; 0x170
 8005490:	2120      	movs	r1, #32
 8005492:	a810      	add	r0, sp, #64	; 0x40
 8005494:	f00d fa63 	bl	801295e <wc_ed25519_make_key>
    keySz = wc_ed25519_size(&key);
 8005498:	a842      	add	r0, sp, #264	; 0x108
 800549a:	f00d fe2b 	bl	80130f4 <wc_ed25519_size>
    sigSz = wc_ed25519_sig_size(&key);
 800549e:	a842      	add	r0, sp, #264	; 0x108
 80054a0:	f00d fe2e 	bl	8013100 <wc_ed25519_sig_size>
    for (i = 0; i < 6; i++) {
 80054a4:	4b74      	ldr	r3, [pc, #464]	; (8005678 <ed25519_test+0x240>)
 80054a6:	9308      	str	r3, [sp, #32]
 80054a8:	4b74      	ldr	r3, [pc, #464]	; (800567c <ed25519_test+0x244>)
 80054aa:	9309      	str	r3, [sp, #36]	; 0x24
 80054ac:	4b74      	ldr	r3, [pc, #464]	; (8005680 <ed25519_test+0x248>)
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	4b74      	ldr	r3, [pc, #464]	; (8005684 <ed25519_test+0x24c>)
 80054b2:	9305      	str	r3, [sp, #20]
 80054b4:	4b74      	ldr	r3, [pc, #464]	; (8005688 <ed25519_test+0x250>)
 80054b6:	9306      	str	r3, [sp, #24]
 80054b8:	4b74      	ldr	r3, [pc, #464]	; (800568c <ed25519_test+0x254>)
 80054ba:	9307      	str	r3, [sp, #28]
        outlen = sizeof(out);
 80054bc:	f04f 0940 	mov.w	r9, #64	; 0x40
        XMEMSET(out, 0, sizeof(out));
 80054c0:	2240      	movs	r2, #64	; 0x40
 80054c2:	2100      	movs	r1, #0
 80054c4:	a822      	add	r0, sp, #136	; 0x88
        outlen = sizeof(out);
 80054c6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        if (wc_ed25519_import_private_key(sKeys[i], ED25519_KEY_SIZE, pKeys[i],
 80054ca:	ad42      	add	r5, sp, #264	; 0x108
        XMEMSET(out, 0, sizeof(out));
 80054cc:	f015 fdb0 	bl	801b030 <memset>
        if (wc_ed25519_import_private_key(sKeys[i], ED25519_KEY_SIZE, pKeys[i],
 80054d0:	9a04      	ldr	r2, [sp, #16]
 80054d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054d4:	9500      	str	r5, [sp, #0]
 80054d6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80054da:	9e08      	ldr	r6, [sp, #32]
 80054dc:	9204      	str	r2, [sp, #16]
 80054de:	f851 2b04 	ldr.w	r2, [r1], #4
 80054e2:	f856 0b04 	ldr.w	r0, [r6], #4
 80054e6:	9109      	str	r1, [sp, #36]	; 0x24
 80054e8:	2120      	movs	r1, #32
 80054ea:	9608      	str	r6, [sp, #32]
 80054ec:	f00d fdcc 	bl	8013088 <wc_ed25519_import_private_key>
 80054f0:	b140      	cbz	r0, 8005504 <ed25519_test+0xcc>
            return WC_TEST_RET_ENC_I(i);
 80054f2:	495f      	ldr	r1, [pc, #380]	; (8005670 <ed25519_test+0x238>)
 80054f4:	4866      	ldr	r0, [pc, #408]	; (8005690 <ed25519_test+0x258>)
            return WC_TEST_RET_ENC_I(i);
 80054f6:	fb01 0404 	mla	r4, r1, r4, r0
}
 80054fa:	4620      	mov	r0, r4
 80054fc:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (wc_ed25519_sign_msg(msgs[i], msgSz[i], out, &outlen, &key) != 0)
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	f853 6b04 	ldr.w	r6, [r3], #4
 800550a:	9306      	str	r3, [sp, #24]
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	f833 8b02 	ldrh.w	r8, [r3], #2
 8005512:	9307      	str	r3, [sp, #28]
 8005514:	9500      	str	r5, [sp, #0]
 8005516:	ab0c      	add	r3, sp, #48	; 0x30
 8005518:	aa22      	add	r2, sp, #136	; 0x88
 800551a:	4641      	mov	r1, r8
 800551c:	4630      	mov	r0, r6
 800551e:	f00d fb55 	bl	8012bcc <wc_ed25519_sign_msg>
 8005522:	b110      	cbz	r0, 800552a <ed25519_test+0xf2>
            return WC_TEST_RET_ENC_I(i);
 8005524:	4952      	ldr	r1, [pc, #328]	; (8005670 <ed25519_test+0x238>)
 8005526:	485b      	ldr	r0, [pc, #364]	; (8005694 <ed25519_test+0x25c>)
 8005528:	e7e5      	b.n	80054f6 <ed25519_test+0xbe>
        if (XMEMCMP(out, sigs[i], 64))
 800552a:	9b05      	ldr	r3, [sp, #20]
 800552c:	f853 ab04 	ldr.w	sl, [r3], #4
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	2240      	movs	r2, #64	; 0x40
 8005534:	4651      	mov	r1, sl
 8005536:	a822      	add	r0, sp, #136	; 0x88
 8005538:	f015 fd42 	bl	801afc0 <memcmp>
 800553c:	b110      	cbz	r0, 8005544 <ed25519_test+0x10c>
            return WC_TEST_RET_ENC_I(i);
 800553e:	494c      	ldr	r1, [pc, #304]	; (8005670 <ed25519_test+0x238>)
 8005540:	4855      	ldr	r0, [pc, #340]	; (8005698 <ed25519_test+0x260>)
 8005542:	e7d8      	b.n	80054f6 <ed25519_test+0xbe>
        if (wc_ed25519_verify_msg(out, outlen, msgs[i], msgSz[i], &verify,
 8005544:	af0d      	add	r7, sp, #52	; 0x34
 8005546:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005548:	9501      	str	r5, [sp, #4]
 800554a:	9700      	str	r7, [sp, #0]
 800554c:	4643      	mov	r3, r8
 800554e:	4632      	mov	r2, r6
 8005550:	a822      	add	r0, sp, #136	; 0x88
 8005552:	f00d fc57 	bl	8012e04 <wc_ed25519_verify_msg>
 8005556:	b110      	cbz	r0, 800555e <ed25519_test+0x126>
            return WC_TEST_RET_ENC_I(i);
 8005558:	4945      	ldr	r1, [pc, #276]	; (8005670 <ed25519_test+0x238>)
 800555a:	4850      	ldr	r0, [pc, #320]	; (800569c <ed25519_test+0x264>)
 800555c:	e7cb      	b.n	80054f6 <ed25519_test+0xbe>
                    &key) != 0 || verify != 1)
 800555e:	f8d7 b000 	ldr.w	fp, [r7]
 8005562:	f1bb 0f01 	cmp.w	fp, #1
 8005566:	d1f7      	bne.n	8005558 <ed25519_test+0x120>
        out[outlen-1] = out[outlen-1] + 1;
 8005568:	990c      	ldr	r1, [sp, #48]	; 0x30
 800556a:	ab22      	add	r3, sp, #136	; 0x88
 800556c:	1e4a      	subs	r2, r1, #1
 800556e:	a822      	add	r0, sp, #136	; 0x88
 8005570:	5c9b      	ldrb	r3, [r3, r2]
 8005572:	3301      	adds	r3, #1
 8005574:	5483      	strb	r3, [r0, r2]
        if (wc_ed25519_verify_msg(out, outlen, msgs[i], msgSz[i], &verify,
 8005576:	e9cd 7500 	strd	r7, r5, [sp]
 800557a:	4643      	mov	r3, r8
 800557c:	4632      	mov	r2, r6
 800557e:	f00d fc41 	bl	8012e04 <wc_ed25519_verify_msg>
 8005582:	b910      	cbnz	r0, 800558a <ed25519_test+0x152>
            return WC_TEST_RET_ENC_I(i);
 8005584:	493a      	ldr	r1, [pc, #232]	; (8005670 <ed25519_test+0x238>)
 8005586:	4846      	ldr	r0, [pc, #280]	; (80056a0 <ed25519_test+0x268>)
 8005588:	e7b5      	b.n	80054f6 <ed25519_test+0xbe>
                    &key) == 0 || verify == 1)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d0f9      	beq.n	8005584 <ed25519_test+0x14c>
        exportPSz = sizeof(exportPKey);
 8005590:	2320      	movs	r3, #32
        if (wc_ed25519_export_public(&key, exportPKey, &exportPSz) != 0)
 8005592:	aa0a      	add	r2, sp, #40	; 0x28
 8005594:	a912      	add	r1, sp, #72	; 0x48
 8005596:	4628      	mov	r0, r5
        exportSSz = sizeof(exportSKey);
 8005598:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        if (wc_ed25519_export_public(&key, exportPKey, &exportPSz) != 0)
 800559c:	f00d fca0 	bl	8012ee0 <wc_ed25519_export_public>
 80055a0:	b110      	cbz	r0, 80055a8 <ed25519_test+0x170>
            return WC_TEST_RET_ENC_I(i);
 80055a2:	4933      	ldr	r1, [pc, #204]	; (8005670 <ed25519_test+0x238>)
 80055a4:	483f      	ldr	r0, [pc, #252]	; (80056a4 <ed25519_test+0x26c>)
 80055a6:	e7a6      	b.n	80054f6 <ed25519_test+0xbe>
        if (wc_ed25519_import_public_ex(exportPKey, exportPSz, &key2, 1) != 0)
 80055a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055aa:	465b      	mov	r3, fp
 80055ac:	aa5c      	add	r2, sp, #368	; 0x170
 80055ae:	a812      	add	r0, sp, #72	; 0x48
 80055b0:	f00d fcdd 	bl	8012f6e <wc_ed25519_import_public_ex>
 80055b4:	b110      	cbz	r0, 80055bc <ed25519_test+0x184>
            return WC_TEST_RET_ENC_I(i);
 80055b6:	492e      	ldr	r1, [pc, #184]	; (8005670 <ed25519_test+0x238>)
 80055b8:	483b      	ldr	r0, [pc, #236]	; (80056a8 <ed25519_test+0x270>)
 80055ba:	e79c      	b.n	80054f6 <ed25519_test+0xbe>
        if (wc_ed25519_export_private_only(&key, exportSKey, &exportSSz) != 0)
 80055bc:	aa0b      	add	r2, sp, #44	; 0x2c
 80055be:	a91a      	add	r1, sp, #104	; 0x68
 80055c0:	4628      	mov	r0, r5
 80055c2:	f00d fca5 	bl	8012f10 <wc_ed25519_export_private_only>
 80055c6:	b110      	cbz	r0, 80055ce <ed25519_test+0x196>
            return WC_TEST_RET_ENC_I(i);
 80055c8:	4929      	ldr	r1, [pc, #164]	; (8005670 <ed25519_test+0x238>)
 80055ca:	4838      	ldr	r0, [pc, #224]	; (80056ac <ed25519_test+0x274>)
 80055cc:	e793      	b.n	80054f6 <ed25519_test+0xbe>
        if (wc_ed25519_import_private_key(exportSKey, exportSSz,
 80055ce:	ad5c      	add	r5, sp, #368	; 0x170
 80055d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d4:	9500      	str	r5, [sp, #0]
 80055d6:	aa12      	add	r2, sp, #72	; 0x48
 80055d8:	a81a      	add	r0, sp, #104	; 0x68
 80055da:	f00d fd55 	bl	8013088 <wc_ed25519_import_private_key>
 80055de:	4601      	mov	r1, r0
 80055e0:	b110      	cbz	r0, 80055e8 <ed25519_test+0x1b0>
            return WC_TEST_RET_ENC_I(i);
 80055e2:	4923      	ldr	r1, [pc, #140]	; (8005670 <ed25519_test+0x238>)
 80055e4:	4832      	ldr	r0, [pc, #200]	; (80056b0 <ed25519_test+0x278>)
 80055e6:	e786      	b.n	80054f6 <ed25519_test+0xbe>
        XMEMSET(out, 0, sizeof(out));
 80055e8:	2240      	movs	r2, #64	; 0x40
 80055ea:	a822      	add	r0, sp, #136	; 0x88
        outlen = sizeof(out);
 80055ec:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        XMEMSET(out, 0, sizeof(out));
 80055f0:	f015 fd1e 	bl	801b030 <memset>
        if (wc_ed25519_sign_msg(msgs[i], msgSz[i], out, &outlen, &key2) != 0)
 80055f4:	9500      	str	r5, [sp, #0]
 80055f6:	ab0c      	add	r3, sp, #48	; 0x30
 80055f8:	aa22      	add	r2, sp, #136	; 0x88
 80055fa:	4641      	mov	r1, r8
 80055fc:	4630      	mov	r0, r6
 80055fe:	f00d fae5 	bl	8012bcc <wc_ed25519_sign_msg>
 8005602:	b110      	cbz	r0, 800560a <ed25519_test+0x1d2>
            return WC_TEST_RET_ENC_I(i);
 8005604:	491a      	ldr	r1, [pc, #104]	; (8005670 <ed25519_test+0x238>)
 8005606:	482b      	ldr	r0, [pc, #172]	; (80056b4 <ed25519_test+0x27c>)
 8005608:	e775      	b.n	80054f6 <ed25519_test+0xbe>
        if (wc_ed25519_verify_msg(out, outlen, msgs[i], msgSz[i], &verify,
 800560a:	9501      	str	r5, [sp, #4]
 800560c:	ad0d      	add	r5, sp, #52	; 0x34
 800560e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005610:	9500      	str	r5, [sp, #0]
 8005612:	4643      	mov	r3, r8
 8005614:	4632      	mov	r2, r6
 8005616:	a822      	add	r0, sp, #136	; 0x88
 8005618:	f00d fbf4 	bl	8012e04 <wc_ed25519_verify_msg>
 800561c:	b110      	cbz	r0, 8005624 <ed25519_test+0x1ec>
            return WC_TEST_RET_ENC_I(i);
 800561e:	4914      	ldr	r1, [pc, #80]	; (8005670 <ed25519_test+0x238>)
 8005620:	4825      	ldr	r0, [pc, #148]	; (80056b8 <ed25519_test+0x280>)
 8005622:	e768      	b.n	80054f6 <ed25519_test+0xbe>
                                  &key2) != 0 || verify != 1)
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d1f9      	bne.n	800561e <ed25519_test+0x1e6>
        if (XMEMCMP(out, sigs[i], 64))
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	4651      	mov	r1, sl
 800562e:	a822      	add	r0, sp, #136	; 0x88
 8005630:	f015 fcc6 	bl	801afc0 <memcmp>
 8005634:	4680      	mov	r8, r0
 8005636:	b110      	cbz	r0, 800563e <ed25519_test+0x206>
            return WC_TEST_RET_ENC_I(i);
 8005638:	490d      	ldr	r1, [pc, #52]	; (8005670 <ed25519_test+0x238>)
 800563a:	4820      	ldr	r0, [pc, #128]	; (80056bc <ed25519_test+0x284>)
 800563c:	e75b      	b.n	80054f6 <ed25519_test+0xbe>
    for (i = 0; i < 6; i++) {
 800563e:	3401      	adds	r4, #1
 8005640:	2c06      	cmp	r4, #6
 8005642:	f47f af3d 	bne.w	80054c0 <ed25519_test+0x88>
    XMEMSET(out, 0, sizeof(out));
 8005646:	4601      	mov	r1, r0
 8005648:	2240      	movs	r2, #64	; 0x40
    int    verify = 0;
 800564a:	900f      	str	r0, [sp, #60]	; 0x3c
    ret = wc_ed25519_init_ex(&key, HEAP_HINT, devId);
 800564c:	af90      	add	r7, sp, #576	; 0x240
    XMEMSET(out, 0, sizeof(out));
 800564e:	a832      	add	r0, sp, #200	; 0xc8
    outlen = sizeof(out);
 8005650:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    XMEMSET(out, 0, sizeof(out));
 8005654:	f015 fcec 	bl	801b030 <memset>
    ret = wc_ed25519_init_ex(&key, HEAP_HINT, devId);
 8005658:	f06f 0201 	mvn.w	r2, #1
 800565c:	4641      	mov	r1, r8
 800565e:	4638      	mov	r0, r7
    int    verify = 0;
 8005660:	ae0f      	add	r6, sp, #60	; 0x3c
    ret = wc_ed25519_init_ex(&key, HEAP_HINT, devId);
 8005662:	f00d fc1e 	bl	8012ea2 <wc_ed25519_init_ex>
    if (ret != 0)
 8005666:	b358      	cbz	r0, 80056c0 <ed25519_test+0x288>
        return 10800;
 8005668:	f642 2430 	movw	r4, #10800	; 0x2a30
 800566c:	e745      	b.n	80054fa <ed25519_test+0xc2>
 800566e:	bf00      	nop
 8005670:	fffe7960 	.word	0xfffe7960
 8005674:	dfff8488 	.word	0xdfff8488
 8005678:	0801f944 	.word	0x0801f944
 800567c:	0801f82c 	.word	0x0801f82c
 8005680:	0801f826 	.word	0x0801f826
 8005684:	0801fbdc 	.word	0x0801fbdc
 8005688:	0801f6a0 	.word	0x0801f6a0
 800568c:	0801f692 	.word	0x0801f692
 8005690:	9fff8470 	.word	0x9fff8470
 8005694:	9fff846d 	.word	0x9fff846d
 8005698:	9fff846a 	.word	0x9fff846a
 800569c:	9fff8464 	.word	0x9fff8464
 80056a0:	9fff8450 	.word	0x9fff8450
 80056a4:	9fff8449 	.word	0x9fff8449
 80056a8:	9fff8446 	.word	0x9fff8446
 80056ac:	9fff8443 	.word	0x9fff8443
 80056b0:	9fff843f 	.word	0x9fff843f
 80056b4:	9fff8439 	.word	0x9fff8439
 80056b8:	9fff8434 	.word	0x9fff8434
 80056bc:	9fff8431 	.word	0x9fff8431
    ret = wc_ed25519_import_private_key(sKeyCtx, ED25519_KEY_SIZE, pKeyCtx,
 80056c0:	2320      	movs	r3, #32
 80056c2:	4a9e      	ldr	r2, [pc, #632]	; (800593c <ed25519_test+0x504>)
 80056c4:	489e      	ldr	r0, [pc, #632]	; (8005940 <ed25519_test+0x508>)
 80056c6:	9700      	str	r7, [sp, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	f00d fcdd 	bl	8013088 <wc_ed25519_import_private_key>
    if (ret == 0)
 80056ce:	4604      	mov	r4, r0
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d149      	bne.n	8005768 <ed25519_test+0x330>
        ret = wc_ed25519ctx_sign_msg(msgCtx, sizeof(msgCtx), out, &outlen, &key,
 80056d4:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8005944 <ed25519_test+0x50c>
 80056d8:	489b      	ldr	r0, [pc, #620]	; (8005948 <ed25519_test+0x510>)
 80056da:	2303      	movs	r3, #3
 80056dc:	9302      	str	r3, [sp, #8]
 80056de:	e9cd 7800 	strd	r7, r8, [sp]
 80056e2:	ab0e      	add	r3, sp, #56	; 0x38
 80056e4:	aa32      	add	r2, sp, #200	; 0xc8
 80056e6:	2110      	movs	r1, #16
 80056e8:	f00d fa7c 	bl	8012be4 <wc_ed25519ctx_sign_msg>
    if (ret == 0 && XMEMCMP(out, sigCtx1, 64) != 0)
 80056ec:	4604      	mov	r4, r0
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d13a      	bne.n	8005768 <ed25519_test+0x330>
 80056f2:	4996      	ldr	r1, [pc, #600]	; (800594c <ed25519_test+0x514>)
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	a832      	add	r0, sp, #200	; 0xc8
 80056f8:	f015 fc62 	bl	801afc0 <memcmp>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d151      	bne.n	80057a4 <ed25519_test+0x36c>
        ret = wc_ed25519ctx_verify_msg(out, outlen, msgCtx, sizeof(msgCtx),
 8005700:	2303      	movs	r3, #3
 8005702:	af90      	add	r7, sp, #576	; 0x240
 8005704:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8005708:	e9cd 6700 	strd	r6, r7, [sp]
 800570c:	4a8e      	ldr	r2, [pc, #568]	; (8005948 <ed25519_test+0x510>)
 800570e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005710:	2310      	movs	r3, #16
 8005712:	a832      	add	r0, sp, #200	; 0xc8
 8005714:	f00d fb85 	bl	8012e22 <wc_ed25519ctx_verify_msg>
    if (ret == 0 && verify != 1)
 8005718:	4604      	mov	r4, r0
 800571a:	bb28      	cbnz	r0, 8005768 <ed25519_test+0x330>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d142      	bne.n	80057a8 <ed25519_test+0x370>
        ret = wc_ed25519ctx_sign_msg(msgCtx, sizeof(msgCtx), out, &outlen, &key,
 8005722:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8005726:	4888      	ldr	r0, [pc, #544]	; (8005948 <ed25519_test+0x510>)
 8005728:	9700      	str	r7, [sp, #0]
 800572a:	ab0e      	add	r3, sp, #56	; 0x38
 800572c:	aa32      	add	r2, sp, #200	; 0xc8
 800572e:	2110      	movs	r1, #16
 8005730:	f00d fa58 	bl	8012be4 <wc_ed25519ctx_sign_msg>
    if (ret == 0 && XMEMCMP(out, sigCtx2, 64) != 0)
 8005734:	4604      	mov	r4, r0
 8005736:	b9b8      	cbnz	r0, 8005768 <ed25519_test+0x330>
 8005738:	4985      	ldr	r1, [pc, #532]	; (8005950 <ed25519_test+0x518>)
 800573a:	2240      	movs	r2, #64	; 0x40
 800573c:	a832      	add	r0, sp, #200	; 0xc8
 800573e:	f015 fc3f 	bl	801afc0 <memcmp>
 8005742:	2800      	cmp	r0, #0
 8005744:	d132      	bne.n	80057ac <ed25519_test+0x374>
        ret = wc_ed25519ctx_verify_msg(out, outlen, msgCtx, sizeof(msgCtx),
 8005746:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800574a:	e9cd 6700 	strd	r6, r7, [sp]
 800574e:	4a7e      	ldr	r2, [pc, #504]	; (8005948 <ed25519_test+0x510>)
 8005750:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005752:	2310      	movs	r3, #16
 8005754:	a832      	add	r0, sp, #200	; 0xc8
 8005756:	f00d fb64 	bl	8012e22 <wc_ed25519ctx_verify_msg>
    if (ret == 0 && verify != 1)
 800575a:	4604      	mov	r4, r0
 800575c:	b920      	cbnz	r0, 8005768 <ed25519_test+0x330>
 800575e:	6832      	ldr	r2, [r6, #0]
        ret = WC_TEST_RET_ENC_NC;
 8005760:	4b7c      	ldr	r3, [pc, #496]	; (8005954 <ed25519_test+0x51c>)
 8005762:	2a01      	cmp	r2, #1
 8005764:	bf18      	it	ne
 8005766:	461c      	movne	r4, r3
    wc_ed25519_free(&key);
 8005768:	af90      	add	r7, sp, #576	; 0x240
 800576a:	4638      	mov	r0, r7
 800576c:	f00d fbae 	bl	8012ecc <wc_ed25519_free>
    if (ret != 0)
 8005770:	2c00      	cmp	r4, #0
 8005772:	f47f aec2 	bne.w	80054fa <ed25519_test+0xc2>
    outlen = sizeof(out);
 8005776:	f04f 0840 	mov.w	r8, #64	; 0x40
    XMEMSET(out, 0, sizeof(out));
 800577a:	4642      	mov	r2, r8
 800577c:	4621      	mov	r1, r4
    int    verify = 0;
 800577e:	6034      	str	r4, [r6, #0]
    XMEMSET(out, 0, sizeof(out));
 8005780:	a832      	add	r0, sp, #200	; 0xc8
    outlen = sizeof(out);
 8005782:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    XMEMSET(out, 0, sizeof(out));
 8005786:	f015 fc53 	bl	801b030 <memset>
    ret = wc_ed25519_init_ex(&key, HEAP_HINT, devId);
 800578a:	f06f 0201 	mvn.w	r2, #1
 800578e:	4621      	mov	r1, r4
 8005790:	4638      	mov	r0, r7
 8005792:	f00d fb86 	bl	8012ea2 <wc_ed25519_init_ex>
    if (ret != 0)
 8005796:	b158      	cbz	r0, 80057b0 <ed25519_test+0x378>
        return WC_TEST_RET_ENC_EC(ret);
 8005798:	4240      	negs	r0, r0
 800579a:	496f      	ldr	r1, [pc, #444]	; (8005958 <ed25519_test+0x520>)
 800579c:	4c6f      	ldr	r4, [pc, #444]	; (800595c <ed25519_test+0x524>)
 800579e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80057a2:	e65a      	b.n	800545a <ed25519_test+0x22>
        ret = WC_TEST_RET_ENC_NC;
 80057a4:	4c6e      	ldr	r4, [pc, #440]	; (8005960 <ed25519_test+0x528>)
 80057a6:	e7df      	b.n	8005768 <ed25519_test+0x330>
        ret = WC_TEST_RET_ENC_NC;
 80057a8:	4c6e      	ldr	r4, [pc, #440]	; (8005964 <ed25519_test+0x52c>)
 80057aa:	e7dd      	b.n	8005768 <ed25519_test+0x330>
        ret = WC_TEST_RET_ENC_NC;
 80057ac:	4c6e      	ldr	r4, [pc, #440]	; (8005968 <ed25519_test+0x530>)
 80057ae:	e7db      	b.n	8005768 <ed25519_test+0x330>
    ret = wc_ed25519_import_private_key(sKeyPh, ED25519_KEY_SIZE, pKeyPh,
 80057b0:	2320      	movs	r3, #32
 80057b2:	4a6e      	ldr	r2, [pc, #440]	; (800596c <ed25519_test+0x534>)
 80057b4:	486e      	ldr	r0, [pc, #440]	; (8005970 <ed25519_test+0x538>)
 80057b6:	9700      	str	r7, [sp, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	f00d fc65 	bl	8013088 <wc_ed25519_import_private_key>
    if (ret == 0)
 80057be:	4604      	mov	r4, r0
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f040 8097 	bne.w	80058f4 <ed25519_test+0x4bc>
        ret = wc_ed25519ph_sign_msg(msgPh, sizeof(msgPh), out, &outlen, &key,
 80057c6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80057ca:	9700      	str	r7, [sp, #0]
 80057cc:	4869      	ldr	r0, [pc, #420]	; (8005974 <ed25519_test+0x53c>)
 80057ce:	ab0e      	add	r3, sp, #56	; 0x38
 80057d0:	aa32      	add	r2, sp, #200	; 0xc8
 80057d2:	2103      	movs	r1, #3
 80057d4:	f00d fa22 	bl	8012c1c <wc_ed25519ph_sign_msg>
    if (ret == 0 && XMEMCMP(out, sigPh1, 64) != 0)
 80057d8:	4604      	mov	r4, r0
 80057da:	2800      	cmp	r0, #0
 80057dc:	f040 808a 	bne.w	80058f4 <ed25519_test+0x4bc>
 80057e0:	4965      	ldr	r1, [pc, #404]	; (8005978 <ed25519_test+0x540>)
 80057e2:	4642      	mov	r2, r8
 80057e4:	a832      	add	r0, sp, #200	; 0xc8
 80057e6:	f015 fbeb 	bl	801afc0 <memcmp>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f040 8097 	bne.w	800591e <ed25519_test+0x4e6>
        ret = wc_ed25519ph_verify_msg(out, outlen, msgPh, sizeof(msgPh),
 80057f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80057f4:	e9cd 6700 	strd	r6, r7, [sp]
 80057f8:	4a5e      	ldr	r2, [pc, #376]	; (8005974 <ed25519_test+0x53c>)
 80057fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80057fc:	2303      	movs	r3, #3
 80057fe:	a832      	add	r0, sp, #200	; 0xc8
 8005800:	f00d fb31 	bl	8012e66 <wc_ed25519ph_verify_msg>
    if (ret == 0 && verify != 1)
 8005804:	4604      	mov	r4, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d174      	bne.n	80058f4 <ed25519_test+0x4bc>
 800580a:	6833      	ldr	r3, [r6, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	f040 8088 	bne.w	8005922 <ed25519_test+0x4ea>
        ret = wc_ed25519ph_sign_msg(msgPh, sizeof(msgPh), out, &outlen, &key,
 8005812:	f8df a168 	ldr.w	sl, [pc, #360]	; 800597c <ed25519_test+0x544>
 8005816:	4857      	ldr	r0, [pc, #348]	; (8005974 <ed25519_test+0x53c>)
 8005818:	f04f 0903 	mov.w	r9, #3
 800581c:	e9cd 7a00 	strd	r7, sl, [sp]
 8005820:	f8cd 9008 	str.w	r9, [sp, #8]
 8005824:	ab0e      	add	r3, sp, #56	; 0x38
 8005826:	aa32      	add	r2, sp, #200	; 0xc8
 8005828:	4649      	mov	r1, r9
 800582a:	f00d f9f7 	bl	8012c1c <wc_ed25519ph_sign_msg>
    if (ret == 0 && XMEMCMP(out, sigPh2, 64) != 0)
 800582e:	4604      	mov	r4, r0
 8005830:	2800      	cmp	r0, #0
 8005832:	d15f      	bne.n	80058f4 <ed25519_test+0x4bc>
 8005834:	4952      	ldr	r1, [pc, #328]	; (8005980 <ed25519_test+0x548>)
 8005836:	4642      	mov	r2, r8
 8005838:	a832      	add	r0, sp, #200	; 0xc8
 800583a:	f015 fbc1 	bl	801afc0 <memcmp>
 800583e:	2800      	cmp	r0, #0
 8005840:	d171      	bne.n	8005926 <ed25519_test+0x4ee>
        ret = wc_ed25519ph_verify_msg(out, outlen, msgPh, sizeof(msgPh), &verify,
 8005842:	e9cd a902 	strd	sl, r9, [sp, #8]
 8005846:	e9cd 6700 	strd	r6, r7, [sp]
 800584a:	4a4a      	ldr	r2, [pc, #296]	; (8005974 <ed25519_test+0x53c>)
 800584c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800584e:	464b      	mov	r3, r9
 8005850:	a832      	add	r0, sp, #200	; 0xc8
 8005852:	f00d fb08 	bl	8012e66 <wc_ed25519ph_verify_msg>
    if (ret == 0 && verify != 1)
 8005856:	4604      	mov	r4, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d14b      	bne.n	80058f4 <ed25519_test+0x4bc>
 800585c:	6833      	ldr	r3, [r6, #0]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d163      	bne.n	800592a <ed25519_test+0x4f2>
        ret = wc_ed25519ph_sign_hash(hashPh, sizeof(hashPh), out, &outlen, &key,
 8005862:	2300      	movs	r3, #0
 8005864:	af90      	add	r7, sp, #576	; 0x240
 8005866:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800586a:	4846      	ldr	r0, [pc, #280]	; (8005984 <ed25519_test+0x54c>)
 800586c:	9700      	str	r7, [sp, #0]
 800586e:	ab0e      	add	r3, sp, #56	; 0x38
 8005870:	aa32      	add	r2, sp, #200	; 0xc8
 8005872:	2140      	movs	r1, #64	; 0x40
 8005874:	f00d f9c4 	bl	8012c00 <wc_ed25519ph_sign_hash>
    if (ret == 0 && XMEMCMP(out, sigPh1, 64) != 0)
 8005878:	4604      	mov	r4, r0
 800587a:	2800      	cmp	r0, #0
 800587c:	d13a      	bne.n	80058f4 <ed25519_test+0x4bc>
 800587e:	493e      	ldr	r1, [pc, #248]	; (8005978 <ed25519_test+0x540>)
 8005880:	2240      	movs	r2, #64	; 0x40
 8005882:	a832      	add	r0, sp, #200	; 0xc8
 8005884:	f015 fb9c 	bl	801afc0 <memcmp>
 8005888:	2800      	cmp	r0, #0
 800588a:	d150      	bne.n	800592e <ed25519_test+0x4f6>
        ret = wc_ed25519ph_verify_hash(out, outlen, hashPh, sizeof(hashPh),
 800588c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005890:	e9cd 6700 	strd	r6, r7, [sp]
 8005894:	4a3b      	ldr	r2, [pc, #236]	; (8005984 <ed25519_test+0x54c>)
 8005896:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005898:	2340      	movs	r3, #64	; 0x40
 800589a:	a832      	add	r0, sp, #200	; 0xc8
 800589c:	f00d fad2 	bl	8012e44 <wc_ed25519ph_verify_hash>
    if (ret == 0 && verify != 1)
 80058a0:	4604      	mov	r4, r0
 80058a2:	bb38      	cbnz	r0, 80058f4 <ed25519_test+0x4bc>
 80058a4:	6833      	ldr	r3, [r6, #0]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d143      	bne.n	8005932 <ed25519_test+0x4fa>
        ret = wc_ed25519ph_sign_hash(hashPh, sizeof(hashPh), out, &outlen, &key,
 80058aa:	f04f 0803 	mov.w	r8, #3
 80058ae:	e9cd a801 	strd	sl, r8, [sp, #4]
 80058b2:	4834      	ldr	r0, [pc, #208]	; (8005984 <ed25519_test+0x54c>)
 80058b4:	9700      	str	r7, [sp, #0]
 80058b6:	ab0e      	add	r3, sp, #56	; 0x38
 80058b8:	aa32      	add	r2, sp, #200	; 0xc8
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	f00d f9a0 	bl	8012c00 <wc_ed25519ph_sign_hash>
    if (ret == 0 && XMEMCMP(out, sigPh2, 64) != 0)
 80058c0:	4604      	mov	r4, r0
 80058c2:	b9b8      	cbnz	r0, 80058f4 <ed25519_test+0x4bc>
 80058c4:	492e      	ldr	r1, [pc, #184]	; (8005980 <ed25519_test+0x548>)
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	a832      	add	r0, sp, #200	; 0xc8
 80058ca:	f015 fb79 	bl	801afc0 <memcmp>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d131      	bne.n	8005936 <ed25519_test+0x4fe>
        ret = wc_ed25519ph_verify_hash(out, outlen, hashPh, sizeof(hashPh), &verify,
 80058d2:	e9cd a802 	strd	sl, r8, [sp, #8]
 80058d6:	e9cd 6700 	strd	r6, r7, [sp]
 80058da:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <ed25519_test+0x54c>)
 80058dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80058de:	2340      	movs	r3, #64	; 0x40
 80058e0:	a832      	add	r0, sp, #200	; 0xc8
 80058e2:	f00d faaf 	bl	8012e44 <wc_ed25519ph_verify_hash>
    if (ret == 0 && verify != 1)
 80058e6:	4604      	mov	r4, r0
 80058e8:	b920      	cbnz	r0, 80058f4 <ed25519_test+0x4bc>
 80058ea:	6832      	ldr	r2, [r6, #0]
        ret = WC_TEST_RET_ENC_NC;
 80058ec:	4b26      	ldr	r3, [pc, #152]	; (8005988 <ed25519_test+0x550>)
 80058ee:	2a01      	cmp	r2, #1
 80058f0:	bf18      	it	ne
 80058f2:	461c      	movne	r4, r3
    wc_ed25519_free(&key);
 80058f4:	a890      	add	r0, sp, #576	; 0x240
 80058f6:	f00d fae9 	bl	8012ecc <wc_ed25519_free>
    if (ret != 0)
 80058fa:	2c00      	cmp	r4, #0
 80058fc:	f47f adfd 	bne.w	80054fa <ed25519_test+0xc2>
    ret = wc_Ed25519PrivateKeyDecode(privateEd25519, &idx, &key3,
 8005900:	4822      	ldr	r0, [pc, #136]	; (800598c <ed25519_test+0x554>)
    idx = 0;
 8005902:	9490      	str	r4, [sp, #576]	; 0x240
    ret = wc_Ed25519PrivateKeyDecode(privateEd25519, &idx, &key3,
 8005904:	2330      	movs	r3, #48	; 0x30
 8005906:	aa76      	add	r2, sp, #472	; 0x1d8
 8005908:	a990      	add	r1, sp, #576	; 0x240
 800590a:	f00c f9f4 	bl	8011cf6 <wc_Ed25519PrivateKeyDecode>
    if (ret != 0)
 800590e:	2800      	cmp	r0, #0
 8005910:	d04e      	beq.n	80059b0 <ed25519_test+0x578>
        return WC_TEST_RET_ENC_EC(ret);
 8005912:	4240      	negs	r0, r0
 8005914:	4910      	ldr	r1, [pc, #64]	; (8005958 <ed25519_test+0x520>)
 8005916:	4c1e      	ldr	r4, [pc, #120]	; (8005990 <ed25519_test+0x558>)
 8005918:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800591c:	e59d      	b.n	800545a <ed25519_test+0x22>
        ret = WC_TEST_RET_ENC_NC;
 800591e:	4c1d      	ldr	r4, [pc, #116]	; (8005994 <ed25519_test+0x55c>)
 8005920:	e7e8      	b.n	80058f4 <ed25519_test+0x4bc>
        ret = WC_TEST_RET_ENC_NC;
 8005922:	4c1d      	ldr	r4, [pc, #116]	; (8005998 <ed25519_test+0x560>)
 8005924:	e7e6      	b.n	80058f4 <ed25519_test+0x4bc>
        ret = WC_TEST_RET_ENC_NC;
 8005926:	4c1d      	ldr	r4, [pc, #116]	; (800599c <ed25519_test+0x564>)
 8005928:	e7e4      	b.n	80058f4 <ed25519_test+0x4bc>
        ret = WC_TEST_RET_ENC_NC;
 800592a:	4c1d      	ldr	r4, [pc, #116]	; (80059a0 <ed25519_test+0x568>)
 800592c:	e7e2      	b.n	80058f4 <ed25519_test+0x4bc>
        ret = WC_TEST_RET_ENC_NC;
 800592e:	4c1d      	ldr	r4, [pc, #116]	; (80059a4 <ed25519_test+0x56c>)
 8005930:	e7e0      	b.n	80058f4 <ed25519_test+0x4bc>
        ret = WC_TEST_RET_ENC_NC;
 8005932:	4c1d      	ldr	r4, [pc, #116]	; (80059a8 <ed25519_test+0x570>)
 8005934:	e7de      	b.n	80058f4 <ed25519_test+0x4bc>
        ret = WC_TEST_RET_ENC_NC;
 8005936:	4c1d      	ldr	r4, [pc, #116]	; (80059ac <ed25519_test+0x574>)
 8005938:	e7dc      	b.n	80058f4 <ed25519_test+0x4bc>
 800593a:	bf00      	nop
 800593c:	0801f7e6 	.word	0x0801f7e6
 8005940:	0801f904 	.word	0x0801f904
 8005944:	0801ef38 	.word	0x0801ef38
 8005948:	0801f67e 	.word	0x0801f67e
 800594c:	0801fadc 	.word	0x0801fadc
 8005950:	0801fb1c 	.word	0x0801fb1c
 8005954:	ffff86bb 	.word	0xffff86bb
 8005958:	fffe7960 	.word	0xfffe7960
 800595c:	dfff866c 	.word	0xdfff866c
 8005960:	ffff86d3 	.word	0xffff86d3
 8005964:	ffff86cb 	.word	0xffff86cb
 8005968:	ffff86c3 	.word	0xffff86c3
 800596c:	0801f806 	.word	0x0801f806
 8005970:	0801f924 	.word	0x0801f924
 8005974:	0801f68e 	.word	0x0801f68e
 8005978:	0801fb5c 	.word	0x0801fb5c
 800597c:	0801ef3b 	.word	0x0801ef3b
 8005980:	0801fb9c 	.word	0x0801fb9c
 8005984:	0801f07a 	.word	0x0801f07a
 8005988:	ffff862e 	.word	0xffff862e
 800598c:	2000012c 	.word	0x2000012c
 8005990:	dfff841f 	.word	0xdfff841f
 8005994:	ffff8663 	.word	0xffff8663
 8005998:	ffff865b 	.word	0xffff865b
 800599c:	ffff8653 	.word	0xffff8653
 80059a0:	ffff864b 	.word	0xffff864b
 80059a4:	ffff8643 	.word	0xffff8643
 80059a8:	ffff863c 	.word	0xffff863c
 80059ac:	ffff8635 	.word	0xffff8635
    if (wc_Ed25519PrivateKeyDecode(badPrivateEd25519, &idx, &key3,
 80059b0:	484d      	ldr	r0, [pc, #308]	; (8005ae8 <ed25519_test+0x6b0>)
    idx = 0;
 80059b2:	9490      	str	r4, [sp, #576]	; 0x240
    if (wc_Ed25519PrivateKeyDecode(badPrivateEd25519, &idx, &key3,
 80059b4:	2355      	movs	r3, #85	; 0x55
 80059b6:	aa76      	add	r2, sp, #472	; 0x1d8
 80059b8:	a990      	add	r1, sp, #576	; 0x240
 80059ba:	f00c f99c 	bl	8011cf6 <wc_Ed25519PrivateKeyDecode>
 80059be:	2800      	cmp	r0, #0
 80059c0:	f000 8089 	beq.w	8005ad6 <ed25519_test+0x69e>
    ret = wc_ed25519_sign_msg(msgs[0], msgSz[0], out, &outlen, &key3);
 80059c4:	ab76      	add	r3, sp, #472	; 0x1d8
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	4848      	ldr	r0, [pc, #288]	; (8005aec <ed25519_test+0x6b4>)
 80059ca:	ab0c      	add	r3, sp, #48	; 0x30
 80059cc:	aa22      	add	r2, sp, #136	; 0x88
 80059ce:	4621      	mov	r1, r4
 80059d0:	f00d f8fc 	bl	8012bcc <wc_ed25519_sign_msg>
    if (ret != BAD_FUNC_ARG)
 80059d4:	f110 0fad 	cmn.w	r0, #173	; 0xad
 80059d8:	d005      	beq.n	80059e6 <ed25519_test+0x5ae>
        return WC_TEST_RET_ENC_EC(ret);
 80059da:	4240      	negs	r0, r0
 80059dc:	4944      	ldr	r1, [pc, #272]	; (8005af0 <ed25519_test+0x6b8>)
 80059de:	4c45      	ldr	r4, [pc, #276]	; (8005af4 <ed25519_test+0x6bc>)
 80059e0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80059e4:	e539      	b.n	800545a <ed25519_test+0x22>
    if (wc_Ed25519PublicKeyDecode(badPublicEd25519, &idx, &key3,
 80059e6:	4844      	ldr	r0, [pc, #272]	; (8005af8 <ed25519_test+0x6c0>)
    idx = 0;
 80059e8:	9490      	str	r4, [sp, #576]	; 0x240
    if (wc_Ed25519PublicKeyDecode(badPublicEd25519, &idx, &key3,
 80059ea:	232d      	movs	r3, #45	; 0x2d
 80059ec:	aa76      	add	r2, sp, #472	; 0x1d8
 80059ee:	a990      	add	r1, sp, #576	; 0x240
 80059f0:	f00c f9ad 	bl	8011d4e <wc_Ed25519PublicKeyDecode>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d070      	beq.n	8005ada <ed25519_test+0x6a2>
    ret = wc_Ed25519PublicKeyDecode(publicEd25519, &idx, &key3,
 80059f8:	4840      	ldr	r0, [pc, #256]	; (8005afc <ed25519_test+0x6c4>)
    idx = 0;
 80059fa:	9490      	str	r4, [sp, #576]	; 0x240
    ret = wc_Ed25519PublicKeyDecode(publicEd25519, &idx, &key3,
 80059fc:	232c      	movs	r3, #44	; 0x2c
 80059fe:	aa76      	add	r2, sp, #472	; 0x1d8
 8005a00:	a990      	add	r1, sp, #576	; 0x240
 8005a02:	f00c f9a4 	bl	8011d4e <wc_Ed25519PublicKeyDecode>
    if (ret != 0)
 8005a06:	b128      	cbz	r0, 8005a14 <ed25519_test+0x5dc>
        return WC_TEST_RET_ENC_EC(ret);
 8005a08:	4240      	negs	r0, r0
 8005a0a:	4939      	ldr	r1, [pc, #228]	; (8005af0 <ed25519_test+0x6b8>)
 8005a0c:	4c3c      	ldr	r4, [pc, #240]	; (8005b00 <ed25519_test+0x6c8>)
 8005a0e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005a12:	e522      	b.n	800545a <ed25519_test+0x22>
    ret = wc_ed25519_sign_msg(msgs[0], msgSz[0], out, &outlen, &key3);
 8005a14:	ab76      	add	r3, sp, #472	; 0x1d8
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4834      	ldr	r0, [pc, #208]	; (8005aec <ed25519_test+0x6b4>)
 8005a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8005a1c:	aa22      	add	r2, sp, #136	; 0x88
 8005a1e:	4621      	mov	r1, r4
 8005a20:	f00d f8d4 	bl	8012bcc <wc_ed25519_sign_msg>
    if (ret != 0)
 8005a24:	b128      	cbz	r0, 8005a32 <ed25519_test+0x5fa>
        return WC_TEST_RET_ENC_EC(ret);
 8005a26:	4240      	negs	r0, r0
 8005a28:	4931      	ldr	r1, [pc, #196]	; (8005af0 <ed25519_test+0x6b8>)
 8005a2a:	4c36      	ldr	r4, [pc, #216]	; (8005b04 <ed25519_test+0x6cc>)
 8005a2c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005a30:	e513      	b.n	800545a <ed25519_test+0x22>
    if (XMEMCMP(out, sigs[0], 64))
 8005a32:	4935      	ldr	r1, [pc, #212]	; (8005b08 <ed25519_test+0x6d0>)
 8005a34:	2240      	movs	r2, #64	; 0x40
 8005a36:	a822      	add	r0, sp, #136	; 0x88
 8005a38:	f015 fac2 	bl	801afc0 <memcmp>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d14e      	bne.n	8005ade <ed25519_test+0x6a6>
    ret = wc_ed25519_verify_msg(out, outlen, msgs[0], msgSz[0], &verify, &key3);
 8005a40:	ab76      	add	r3, sp, #472	; 0x1d8
 8005a42:	e9cd 5300 	strd	r5, r3, [sp]
 8005a46:	4a29      	ldr	r2, [pc, #164]	; (8005aec <ed25519_test+0x6b4>)
 8005a48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	a822      	add	r0, sp, #136	; 0x88
 8005a4e:	f00d f9d9 	bl	8012e04 <wc_ed25519_verify_msg>
    if (ret != 0 || verify != 1)
 8005a52:	b910      	cbnz	r0, 8005a5a <ed25519_test+0x622>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d005      	beq.n	8005a66 <ed25519_test+0x62e>
        return WC_TEST_RET_ENC_EC(ret);
 8005a5a:	4240      	negs	r0, r0
 8005a5c:	4924      	ldr	r1, [pc, #144]	; (8005af0 <ed25519_test+0x6b8>)
 8005a5e:	4c2b      	ldr	r4, [pc, #172]	; (8005b0c <ed25519_test+0x6d4>)
 8005a60:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005a64:	e4f9      	b.n	800545a <ed25519_test+0x22>
    wc_ed25519_free(&key3);
 8005a66:	a876      	add	r0, sp, #472	; 0x1d8
 8005a68:	f00d fa30 	bl	8012ecc <wc_ed25519_free>
    wc_ed25519_init(&key3);
 8005a6c:	a876      	add	r0, sp, #472	; 0x1d8
 8005a6e:	f00d fa28 	bl	8012ec2 <wc_ed25519_init>
    idx = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	9390      	str	r3, [sp, #576]	; 0x240
    ret = wc_Ed25519PrivateKeyDecode(privPubEd25519, &idx, &key3,
 8005a76:	a990      	add	r1, sp, #576	; 0x240
 8005a78:	4825      	ldr	r0, [pc, #148]	; (8005b10 <ed25519_test+0x6d8>)
 8005a7a:	2352      	movs	r3, #82	; 0x52
 8005a7c:	aa76      	add	r2, sp, #472	; 0x1d8
 8005a7e:	f00c f93a 	bl	8011cf6 <wc_Ed25519PrivateKeyDecode>
    if (ret != 0)
 8005a82:	4601      	mov	r1, r0
 8005a84:	b128      	cbz	r0, 8005a92 <ed25519_test+0x65a>
        return WC_TEST_RET_ENC_EC(ret);
 8005a86:	4241      	negs	r1, r0
 8005a88:	4c19      	ldr	r4, [pc, #100]	; (8005af0 <ed25519_test+0x6b8>)
 8005a8a:	4822      	ldr	r0, [pc, #136]	; (8005b14 <ed25519_test+0x6dc>)
 8005a8c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8005a90:	e531      	b.n	80054f6 <ed25519_test+0xbe>
    ret = wc_ed25519_sign_msg(msgs[0], msgSz[0], out, &outlen, &key3);
 8005a92:	ab76      	add	r3, sp, #472	; 0x1d8
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4815      	ldr	r0, [pc, #84]	; (8005aec <ed25519_test+0x6b4>)
 8005a98:	ab0c      	add	r3, sp, #48	; 0x30
 8005a9a:	aa22      	add	r2, sp, #136	; 0x88
 8005a9c:	f00d f896 	bl	8012bcc <wc_ed25519_sign_msg>
    if (ret != 0)
 8005aa0:	b128      	cbz	r0, 8005aae <ed25519_test+0x676>
        return WC_TEST_RET_ENC_EC(ret);
 8005aa2:	4240      	negs	r0, r0
 8005aa4:	4912      	ldr	r1, [pc, #72]	; (8005af0 <ed25519_test+0x6b8>)
 8005aa6:	4c1c      	ldr	r4, [pc, #112]	; (8005b18 <ed25519_test+0x6e0>)
 8005aa8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005aac:	e4d5      	b.n	800545a <ed25519_test+0x22>
    if (XMEMCMP(out, sigs[0], 64))
 8005aae:	4916      	ldr	r1, [pc, #88]	; (8005b08 <ed25519_test+0x6d0>)
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	a822      	add	r0, sp, #136	; 0x88
 8005ab4:	f015 fa84 	bl	801afc0 <memcmp>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	b990      	cbnz	r0, 8005ae2 <ed25519_test+0x6aa>
    wc_ed25519_free(&key3);
 8005abc:	a876      	add	r0, sp, #472	; 0x1d8
 8005abe:	f00d fa05 	bl	8012ecc <wc_ed25519_free>
    wc_ed25519_free(&key);
 8005ac2:	a842      	add	r0, sp, #264	; 0x108
 8005ac4:	f00d fa02 	bl	8012ecc <wc_ed25519_free>
    wc_ed25519_free(&key2);
 8005ac8:	a85c      	add	r0, sp, #368	; 0x170
 8005aca:	f00d f9ff 	bl	8012ecc <wc_ed25519_free>
    wc_FreeRng(&rng);
 8005ace:	a810      	add	r0, sp, #64	; 0x40
 8005ad0:	f006 fdfc 	bl	800c6cc <wc_FreeRng>
    return 0;
 8005ad4:	e511      	b.n	80054fa <ed25519_test+0xc2>
        return WC_TEST_RET_ENC_NC;
 8005ad6:	4c11      	ldr	r4, [pc, #68]	; (8005b1c <ed25519_test+0x6e4>)
 8005ad8:	e50f      	b.n	80054fa <ed25519_test+0xc2>
        return WC_TEST_RET_ENC_NC;
 8005ada:	4c11      	ldr	r4, [pc, #68]	; (8005b20 <ed25519_test+0x6e8>)
 8005adc:	e50d      	b.n	80054fa <ed25519_test+0xc2>
        return WC_TEST_RET_ENC_NC;
 8005ade:	4c11      	ldr	r4, [pc, #68]	; (8005b24 <ed25519_test+0x6ec>)
 8005ae0:	e50b      	b.n	80054fa <ed25519_test+0xc2>
        return WC_TEST_RET_ENC_NC;
 8005ae2:	4c11      	ldr	r4, [pc, #68]	; (8005b28 <ed25519_test+0x6f0>)
 8005ae4:	e509      	b.n	80054fa <ed25519_test+0xc2>
 8005ae6:	bf00      	nop
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	0801f25b 	.word	0x0801f25b
 8005af0:	fffe7960 	.word	0xfffe7960
 8005af4:	dfff8416 	.word	0xdfff8416
 8005af8:	20000055 	.word	0x20000055
 8005afc:	2000015c 	.word	0x2000015c
 8005b00:	dfff840a 	.word	0xdfff840a
 8005b04:	dfff8406 	.word	0xdfff8406
 8005b08:	0801f95c 	.word	0x0801f95c
 8005b0c:	dfff83fd 	.word	0xdfff83fd
 8005b10:	200000da 	.word	0x200000da
 8005b14:	dfff83f2 	.word	0xdfff83f2
 8005b18:	dfff83ee 	.word	0xdfff83ee
 8005b1c:	ffff841a 	.word	0xffff841a
 8005b20:	ffff8410 	.word	0xffff8410
 8005b24:	ffff8403 	.word	0xffff8403
 8005b28:	ffff83eb 	.word	0xffff83eb

08005b2c <logging_test>:
{
 8005b2c:	b508      	push	{r3, lr}
    ret = wolfSSL_Debugging_ON();
 8005b2e:	f012 f814 	bl	8017b5a <wolfSSL_Debugging_ON>
    if (ret != NOT_COMPILED_IN)
 8005b32:	f110 0fae 	cmn.w	r0, #174	; 0xae
 8005b36:	d007      	beq.n	8005b48 <logging_test+0x1c>
        return WC_TEST_RET_ENC_EC(ret);
 8005b38:	4240      	negs	r0, r0
 8005b3a:	4a0b      	ldr	r2, [pc, #44]	; (8005b68 <logging_test+0x3c>)
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <logging_test+0x40>)
 8005b3e:	f3c0 000a 	ubfx	r0, r0, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8005b42:	fb02 3000 	mla	r0, r2, r0, r3
}
 8005b46:	bd08      	pop	{r3, pc}
    wolfSSL_Debugging_OFF();
 8005b48:	f012 f80a 	bl	8017b60 <wolfSSL_Debugging_OFF>
    ret = wolfSSL_SetLoggingCb(NULL);
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f012 f801 	bl	8017b54 <wolfSSL_SetLoggingCb>
    if (ret != NOT_COMPILED_IN)
 8005b52:	f110 0fae 	cmn.w	r0, #174	; 0xae
 8005b56:	d005      	beq.n	8005b64 <logging_test+0x38>
        return WC_TEST_RET_ENC_EC(ret);
 8005b58:	4240      	negs	r0, r0
 8005b5a:	4a03      	ldr	r2, [pc, #12]	; (8005b68 <logging_test+0x3c>)
 8005b5c:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <logging_test+0x44>)
 8005b5e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005b62:	e7ee      	b.n	8005b42 <logging_test+0x16>
    return 0;
 8005b64:	2000      	movs	r0, #0
 8005b66:	e7ee      	b.n	8005b46 <logging_test+0x1a>
 8005b68:	fffe7960 	.word	0xfffe7960
 8005b6c:	dfff488d 	.word	0xdfff488d
 8005b70:	dfff4889 	.word	0xdfff4889

08005b74 <mutex_test>:
{
 8005b74:	b510      	push	{r4, lr}
    wolfSSL_Mutex *mm = wc_InitAndAllocMutex();
 8005b76:	f014 fe19 	bl	801a7ac <wc_InitAndAllocMutex>
    if (mm == NULL)
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	b130      	cbz	r0, 8005b8c <mutex_test+0x18>
    wc_FreeMutex(mm);
 8005b7e:	f014 fe18 	bl	801a7b2 <wc_FreeMutex>
    XFREE(mm, HEAP_HINT, DYNAMIC_TYPE_MUTEX);
 8005b82:	4620      	mov	r0, r4
 8005b84:	f015 fa14 	bl	801afb0 <free>
    return 0;
 8005b88:	2000      	movs	r0, #0
}
 8005b8a:	bd10      	pop	{r4, pc}
        return WC_TEST_RET_ENC_ERRNO;
 8005b8c:	4800      	ldr	r0, [pc, #0]	; (8005b90 <mutex_test+0x1c>)
 8005b8e:	e7fc      	b.n	8005b8a <mutex_test+0x16>
 8005b90:	ffff4867 	.word	0xffff4867

08005b94 <time_test>:
{
 8005b94:	b507      	push	{r0, r1, r2, lr}
    ret = wc_SetTimeCb(time_cb);
 8005b96:	481b      	ldr	r0, [pc, #108]	; (8005c04 <time_test+0x70>)
 8005b98:	f00b f870 	bl	8010c7c <wc_SetTimeCb>
    if (ret != 0)
 8005b9c:	b148      	cbz	r0, 8005bb2 <time_test+0x1e>
        return WC_TEST_RET_ENC_EC(ret);
 8005b9e:	4243      	negs	r3, r0
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <time_test+0x74>)
 8005ba2:	481a      	ldr	r0, [pc, #104]	; (8005c0c <time_test+0x78>)
 8005ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
        return WC_TEST_RET_ENC_EC(ret);
 8005ba8:	fb02 0003 	mla	r0, r2, r3, r0
}
 8005bac:	b003      	add	sp, #12
 8005bae:	f85d fb04 	ldr.w	pc, [sp], #4
    t = wc_Time(NULL);
 8005bb2:	f00b f869 	bl	8010c88 <wc_Time>
 8005bb6:	e9cd 0100 	strd	r0, r1, [sp]
    if (t != 99)
 8005bba:	3863      	subs	r0, #99	; 0x63
 8005bbc:	ea50 0301 	orrs.w	r3, r0, r1
 8005bc0:	d11b      	bne.n	8005bfa <time_test+0x66>
    ret = wc_GetTime(&t, sizeof(time_t));
 8005bc2:	2108      	movs	r1, #8
 8005bc4:	4668      	mov	r0, sp
 8005bc6:	f00b f86d 	bl	8010ca4 <wc_GetTime>
    if (ret != 0)
 8005bca:	b128      	cbz	r0, 8005bd8 <time_test+0x44>
        return WC_TEST_RET_ENC_EC(ret);
 8005bcc:	4243      	negs	r3, r0
 8005bce:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <time_test+0x74>)
 8005bd0:	480f      	ldr	r0, [pc, #60]	; (8005c10 <time_test+0x7c>)
 8005bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bd6:	e7e7      	b.n	8005ba8 <time_test+0x14>
    if (t != 99)
 8005bd8:	9b00      	ldr	r3, [sp, #0]
 8005bda:	9a01      	ldr	r2, [sp, #4]
 8005bdc:	3b63      	subs	r3, #99	; 0x63
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d10d      	bne.n	8005bfe <time_test+0x6a>
    ret = wc_SetTimeCb(NULL);
 8005be2:	f00b f84b 	bl	8010c7c <wc_SetTimeCb>
    if (ret != 0)
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0e0      	beq.n	8005bac <time_test+0x18>
        return WC_TEST_RET_ENC_EC(ret);
 8005bea:	4a07      	ldr	r2, [pc, #28]	; (8005c08 <time_test+0x74>)
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <time_test+0x80>)
 8005bee:	4240      	negs	r0, r0
 8005bf0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005bf4:	fb02 3000 	mla	r0, r2, r0, r3
 8005bf8:	e7d8      	b.n	8005bac <time_test+0x18>
        return WC_TEST_RET_ENC_NC;
 8005bfa:	4807      	ldr	r0, [pc, #28]	; (8005c18 <time_test+0x84>)
 8005bfc:	e7d6      	b.n	8005bac <time_test+0x18>
        return WC_TEST_RET_ENC_NC;
 8005bfe:	4807      	ldr	r0, [pc, #28]	; (8005c1c <time_test+0x88>)
 8005c00:	e7d4      	b.n	8005bac <time_test+0x18>
 8005c02:	bf00      	nop
 8005c04:	080000e9 	.word	0x080000e9
 8005c08:	fffe7960 	.word	0xfffe7960
 8005c0c:	dfff4239 	.word	0xdfff4239
 8005c10:	dfff4233 	.word	0xdfff4233
 8005c14:	dfff422e 	.word	0xdfff422e
 8005c18:	ffff4236 	.word	0xffff4236
 8005c1c:	ffff4231 	.word	0xffff4231

08005c20 <wolfcrypt_test>:
{
 8005c20:	b570      	push	{r4, r5, r6, lr}
    printf("------------------------------------------------------------------------------\n");
 8005c22:	4c9d      	ldr	r4, [pc, #628]	; (8005e98 <wolfcrypt_test+0x278>)
{
 8005c24:	4605      	mov	r5, r0
    printf("------------------------------------------------------------------------------\n");
 8005c26:	489d      	ldr	r0, [pc, #628]	; (8005e9c <wolfcrypt_test+0x27c>)
 8005c28:	f015 fae8 	bl	801b1fc <iprintf>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	6898      	ldr	r0, [r3, #8]
 8005c30:	f015 f8ac 	bl	801ad8c <fflush>
    printf(" wolfSSL version %s\n", LIBWOLFSSL_VERSION_STRING);
 8005c34:	499a      	ldr	r1, [pc, #616]	; (8005ea0 <wolfcrypt_test+0x280>)
 8005c36:	489b      	ldr	r0, [pc, #620]	; (8005ea4 <wolfcrypt_test+0x284>)
 8005c38:	f015 fae0 	bl	801b1fc <iprintf>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	6898      	ldr	r0, [r3, #8]
 8005c40:	f015 f8a4 	bl	801ad8c <fflush>
    printf("------------------------------------------------------------------------------\n");
 8005c44:	4895      	ldr	r0, [pc, #596]	; (8005e9c <wolfcrypt_test+0x27c>)
 8005c46:	f015 fad9 	bl	801b1fc <iprintf>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	6898      	ldr	r0, [r3, #8]
 8005c4e:	f015 f89d 	bl	801ad8c <fflush>
    if (args) {
 8005c52:	b115      	cbz	r5, 8005c5a <wolfcrypt_test+0x3a>
        ((func_args*)args)->return_code = -1; /* error state */
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c58:	60ab      	str	r3, [r5, #8]
    if (CheckCtcSettings() != 1) {
 8005c5a:	f012 fddf 	bl	801881c <CheckRunTimeSettings>
 8005c5e:	2820      	cmp	r0, #32
 8005c60:	d015      	beq.n	8005c8e <wolfcrypt_test+0x6e>
        printf("Sizeof mismatch (build) %x != (run) %lx\n",
 8005c62:	f012 fddb 	bl	801881c <CheckRunTimeSettings>
 8005c66:	2120      	movs	r1, #32
 8005c68:	4602      	mov	r2, r0
 8005c6a:	488f      	ldr	r0, [pc, #572]	; (8005ea8 <wolfcrypt_test+0x288>)
 8005c6c:	f015 fac6 	bl	801b1fc <iprintf>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	6898      	ldr	r0, [r3, #8]
 8005c74:	f015 f88a 	bl	801ad8c <fflush>
    render_error_message(msg, es);
 8005c78:	488c      	ldr	r0, [pc, #560]	; (8005eac <wolfcrypt_test+0x28c>)
 8005c7a:	f46f 717c 	mvn.w	r1, #1008	; 0x3f0
 8005c7e:	f7fa fa55 	bl	800012c <render_error_message>
    print_fiducials();
 8005c82:	f7fa fa39 	bl	80000f8 <print_fiducials>
        TEST_FAIL("mutex    test failed!\n", ret);
 8005c86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}
    if (CheckFastMathSettings() != 1)
 8005c8e:	f012 fdc7 	bl	8018820 <CheckRunTimeFastMath>
 8005c92:	2818      	cmp	r0, #24
 8005c94:	d002      	beq.n	8005c9c <wolfcrypt_test+0x7c>
    render_error_message(msg, es);
 8005c96:	4986      	ldr	r1, [pc, #536]	; (8005eb0 <wolfcrypt_test+0x290>)
 8005c98:	4886      	ldr	r0, [pc, #536]	; (8005eb4 <wolfcrypt_test+0x294>)
 8005c9a:	e7f0      	b.n	8005c7e <wolfcrypt_test+0x5e>
    if ( (ret = error_test()) != 0)
 8005c9c:	f7fa fd36 	bl	800070c <error_test>
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	b108      	cbz	r0, 8005ca8 <wolfcrypt_test+0x88>
    render_error_message(msg, es);
 8005ca4:	4884      	ldr	r0, [pc, #528]	; (8005eb8 <wolfcrypt_test+0x298>)
 8005ca6:	e7ea      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("error    test passed!\n");
 8005ca8:	4884      	ldr	r0, [pc, #528]	; (8005ebc <wolfcrypt_test+0x29c>)
 8005caa:	f015 faa7 	bl	801b1fc <iprintf>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6898      	ldr	r0, [r3, #8]
 8005cb2:	f015 f86b 	bl	801ad8c <fflush>
    if ( (ret = memory_test()) != 0)
 8005cb6:	f7fd fcfb 	bl	80036b0 <memory_test>
 8005cba:	4601      	mov	r1, r0
 8005cbc:	b108      	cbz	r0, 8005cc2 <wolfcrypt_test+0xa2>
    render_error_message(msg, es);
 8005cbe:	4880      	ldr	r0, [pc, #512]	; (8005ec0 <wolfcrypt_test+0x2a0>)
 8005cc0:	e7dd      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("MEMORY   test passed!\n");
 8005cc2:	4880      	ldr	r0, [pc, #512]	; (8005ec4 <wolfcrypt_test+0x2a4>)
 8005cc4:	f015 fa9a 	bl	801b1fc <iprintf>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	6898      	ldr	r0, [r3, #8]
 8005ccc:	f015 f85e 	bl	801ad8c <fflush>
    if ( (ret = base64_test()) != 0)
 8005cd0:	f7fa fd9a 	bl	8000808 <base64_test>
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	b108      	cbz	r0, 8005cdc <wolfcrypt_test+0xbc>
    render_error_message(msg, es);
 8005cd8:	487b      	ldr	r0, [pc, #492]	; (8005ec8 <wolfcrypt_test+0x2a8>)
 8005cda:	e7d0      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("base64   test passed!\n");
 8005cdc:	487b      	ldr	r0, [pc, #492]	; (8005ecc <wolfcrypt_test+0x2ac>)
 8005cde:	f015 fa8d 	bl	801b1fc <iprintf>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6898      	ldr	r0, [r3, #8]
 8005ce6:	f015 f851 	bl	801ad8c <fflush>
    if ( (ret = asn_test()) != 0)
 8005cea:	f7fa ff7f 	bl	8000bec <asn_test>
 8005cee:	4601      	mov	r1, r0
 8005cf0:	b108      	cbz	r0, 8005cf6 <wolfcrypt_test+0xd6>
    render_error_message(msg, es);
 8005cf2:	4877      	ldr	r0, [pc, #476]	; (8005ed0 <wolfcrypt_test+0x2b0>)
 8005cf4:	e7c3      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("asn      test passed!\n");
 8005cf6:	4877      	ldr	r0, [pc, #476]	; (8005ed4 <wolfcrypt_test+0x2b4>)
 8005cf8:	f015 fa80 	bl	801b1fc <iprintf>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	6898      	ldr	r0, [r3, #8]
 8005d00:	f015 f844 	bl	801ad8c <fflush>
    return random_rng_test();
 8005d04:	f7fa fab6 	bl	8000274 <random_rng_test>
    if ( (ret = random_test()) != 0)
 8005d08:	4601      	mov	r1, r0
 8005d0a:	b108      	cbz	r0, 8005d10 <wolfcrypt_test+0xf0>
    render_error_message(msg, es);
 8005d0c:	4872      	ldr	r0, [pc, #456]	; (8005ed8 <wolfcrypt_test+0x2b8>)
 8005d0e:	e7b6      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("RANDOM   test passed!\n");
 8005d10:	4872      	ldr	r0, [pc, #456]	; (8005edc <wolfcrypt_test+0x2bc>)
 8005d12:	f015 fa73 	bl	801b1fc <iprintf>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	6898      	ldr	r0, [r3, #8]
 8005d1a:	f015 f837 	bl	801ad8c <fflush>
    if ( (ret = sha_test()) != 0)
 8005d1e:	f7fa ffdd 	bl	8000cdc <sha_test>
 8005d22:	4601      	mov	r1, r0
 8005d24:	b108      	cbz	r0, 8005d2a <wolfcrypt_test+0x10a>
    render_error_message(msg, es);
 8005d26:	486e      	ldr	r0, [pc, #440]	; (8005ee0 <wolfcrypt_test+0x2c0>)
 8005d28:	e7a9      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("SHA      test passed!\n");
 8005d2a:	486e      	ldr	r0, [pc, #440]	; (8005ee4 <wolfcrypt_test+0x2c4>)
 8005d2c:	f015 fa66 	bl	801b1fc <iprintf>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	6898      	ldr	r0, [r3, #8]
 8005d34:	f015 f82a 	bl	801ad8c <fflush>
    if ( (ret = sha256_test()) != 0)
 8005d38:	f7fb f8dc 	bl	8000ef4 <sha256_test>
 8005d3c:	4601      	mov	r1, r0
 8005d3e:	b108      	cbz	r0, 8005d44 <wolfcrypt_test+0x124>
    render_error_message(msg, es);
 8005d40:	4869      	ldr	r0, [pc, #420]	; (8005ee8 <wolfcrypt_test+0x2c8>)
 8005d42:	e79c      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("SHA-256  test passed!\n");
 8005d44:	4869      	ldr	r0, [pc, #420]	; (8005eec <wolfcrypt_test+0x2cc>)
 8005d46:	f015 fa59 	bl	801b1fc <iprintf>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	6898      	ldr	r0, [r3, #8]
 8005d4e:	f015 f81d 	bl	801ad8c <fflush>
    if ((ret = sha512_test()) != 0) {
 8005d52:	f7fb f9bb 	bl	80010cc <sha512_test>
 8005d56:	4601      	mov	r1, r0
 8005d58:	b108      	cbz	r0, 8005d5e <wolfcrypt_test+0x13e>
    render_error_message(msg, es);
 8005d5a:	4865      	ldr	r0, [pc, #404]	; (8005ef0 <wolfcrypt_test+0x2d0>)
 8005d5c:	e78f      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("SHA-512  test passed!\n");
 8005d5e:	4865      	ldr	r0, [pc, #404]	; (8005ef4 <wolfcrypt_test+0x2d4>)
 8005d60:	f015 fa4c 	bl	801b1fc <iprintf>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	6898      	ldr	r0, [r3, #8]
 8005d68:	f015 f810 	bl	801ad8c <fflush>
    if ((ret = sha512_224_test()) != 0) {
 8005d6c:	f7fb fab2 	bl	80012d4 <sha512_224_test>
 8005d70:	4601      	mov	r1, r0
 8005d72:	b108      	cbz	r0, 8005d78 <wolfcrypt_test+0x158>
    render_error_message(msg, es);
 8005d74:	4860      	ldr	r0, [pc, #384]	; (8005ef8 <wolfcrypt_test+0x2d8>)
 8005d76:	e782      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("SHA-512/224  test passed!\n");
 8005d78:	4860      	ldr	r0, [pc, #384]	; (8005efc <wolfcrypt_test+0x2dc>)
 8005d7a:	f015 fa3f 	bl	801b1fc <iprintf>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	6898      	ldr	r0, [r3, #8]
 8005d82:	f015 f803 	bl	801ad8c <fflush>
    if ((ret = sha512_256_test()) != 0) {
 8005d86:	f7fb fbab 	bl	80014e0 <sha512_256_test>
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	b108      	cbz	r0, 8005d92 <wolfcrypt_test+0x172>
    render_error_message(msg, es);
 8005d8e:	485c      	ldr	r0, [pc, #368]	; (8005f00 <wolfcrypt_test+0x2e0>)
 8005d90:	e775      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("SHA-512/256  test passed!\n");
 8005d92:	485c      	ldr	r0, [pc, #368]	; (8005f04 <wolfcrypt_test+0x2e4>)
 8005d94:	f015 fa32 	bl	801b1fc <iprintf>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	6898      	ldr	r0, [r3, #8]
 8005d9c:	f014 fff6 	bl	801ad8c <fflush>
    if ( (ret = hash_test()) != 0)
 8005da0:	f7fb fca4 	bl	80016ec <hash_test>
 8005da4:	4601      	mov	r1, r0
 8005da6:	b108      	cbz	r0, 8005dac <wolfcrypt_test+0x18c>
    render_error_message(msg, es);
 8005da8:	4857      	ldr	r0, [pc, #348]	; (8005f08 <wolfcrypt_test+0x2e8>)
 8005daa:	e768      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("Hash     test passed!\n");
 8005dac:	4857      	ldr	r0, [pc, #348]	; (8005f0c <wolfcrypt_test+0x2ec>)
 8005dae:	f015 fa25 	bl	801b1fc <iprintf>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6898      	ldr	r0, [r3, #8]
 8005db6:	f014 ffe9 	bl	801ad8c <fflush>
    if ( (ret = hmac_sha_test()) != 0)
 8005dba:	f7fb ff45 	bl	8001c48 <hmac_sha_test>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	b108      	cbz	r0, 8005dc6 <wolfcrypt_test+0x1a6>
    render_error_message(msg, es);
 8005dc2:	4853      	ldr	r0, [pc, #332]	; (8005f10 <wolfcrypt_test+0x2f0>)
 8005dc4:	e75b      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("HMAC-SHA test passed!\n");
 8005dc6:	4853      	ldr	r0, [pc, #332]	; (8005f14 <wolfcrypt_test+0x2f4>)
 8005dc8:	f015 fa18 	bl	801b1fc <iprintf>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	6898      	ldr	r0, [r3, #8]
 8005dd0:	f014 ffdc 	bl	801ad8c <fflush>
        if ( (ret = hmac_sha256_test()) != 0)
 8005dd4:	f7fb ffda 	bl	8001d8c <hmac_sha256_test>
 8005dd8:	4601      	mov	r1, r0
 8005dda:	b108      	cbz	r0, 8005de0 <wolfcrypt_test+0x1c0>
    render_error_message(msg, es);
 8005ddc:	484e      	ldr	r0, [pc, #312]	; (8005f18 <wolfcrypt_test+0x2f8>)
 8005dde:	e74e      	b.n	8005c7e <wolfcrypt_test+0x5e>
            TEST_PASS("HMAC-SHA256 test passed!\n");
 8005de0:	484e      	ldr	r0, [pc, #312]	; (8005f1c <wolfcrypt_test+0x2fc>)
 8005de2:	f015 fa0b 	bl	801b1fc <iprintf>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	6898      	ldr	r0, [r3, #8]
 8005dea:	f014 ffcf 	bl	801ad8c <fflush>
        if ( (ret = hmac_sha512_test()) != 0)
 8005dee:	f7fc f883 	bl	8001ef8 <hmac_sha512_test>
 8005df2:	4601      	mov	r1, r0
 8005df4:	b108      	cbz	r0, 8005dfa <wolfcrypt_test+0x1da>
    render_error_message(msg, es);
 8005df6:	484a      	ldr	r0, [pc, #296]	; (8005f20 <wolfcrypt_test+0x300>)
 8005df8:	e741      	b.n	8005c7e <wolfcrypt_test+0x5e>
            TEST_PASS("HMAC-SHA512 test passed!\n");
 8005dfa:	484a      	ldr	r0, [pc, #296]	; (8005f24 <wolfcrypt_test+0x304>)
 8005dfc:	f015 f9fe 	bl	801b1fc <iprintf>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	6898      	ldr	r0, [r3, #8]
 8005e04:	f014 ffc2 	bl	801ad8c <fflush>
    if ( (ret = gmac_test()) != 0)
 8005e08:	f7fd fb48 	bl	800349c <gmac_test>
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	b108      	cbz	r0, 8005e14 <wolfcrypt_test+0x1f4>
    render_error_message(msg, es);
 8005e10:	4845      	ldr	r0, [pc, #276]	; (8005f28 <wolfcrypt_test+0x308>)
 8005e12:	e734      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("GMAC     test passed!\n");
 8005e14:	4845      	ldr	r0, [pc, #276]	; (8005f2c <wolfcrypt_test+0x30c>)
 8005e16:	f015 f9f1 	bl	801b1fc <iprintf>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	6898      	ldr	r0, [r3, #8]
 8005e1e:	f014 ffb5 	bl	801ad8c <fflush>
    if ( (ret = des_test()) != 0)
 8005e22:	f7fc f91b 	bl	800205c <des_test>
 8005e26:	4601      	mov	r1, r0
 8005e28:	b108      	cbz	r0, 8005e2e <wolfcrypt_test+0x20e>
    render_error_message(msg, es);
 8005e2a:	4841      	ldr	r0, [pc, #260]	; (8005f30 <wolfcrypt_test+0x310>)
 8005e2c:	e727      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("DES      test passed!\n");
 8005e2e:	4841      	ldr	r0, [pc, #260]	; (8005f34 <wolfcrypt_test+0x314>)
 8005e30:	f015 f9e4 	bl	801b1fc <iprintf>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	6898      	ldr	r0, [r3, #8]
 8005e38:	f014 ffa8 	bl	801ad8c <fflush>
    if ( (ret = des3_test()) != 0)
 8005e3c:	f7fc f982 	bl	8002144 <des3_test>
 8005e40:	4601      	mov	r1, r0
 8005e42:	b108      	cbz	r0, 8005e48 <wolfcrypt_test+0x228>
    render_error_message(msg, es);
 8005e44:	483c      	ldr	r0, [pc, #240]	; (8005f38 <wolfcrypt_test+0x318>)
 8005e46:	e71a      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("DES3     test passed!\n");
 8005e48:	483c      	ldr	r0, [pc, #240]	; (8005f3c <wolfcrypt_test+0x31c>)
 8005e4a:	f015 f9d7 	bl	801b1fc <iprintf>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	6898      	ldr	r0, [r3, #8]
 8005e52:	f014 ff9b 	bl	801ad8c <fflush>
    if ( (ret = aes_test()) != 0)
 8005e56:	f7fc fa03 	bl	8002260 <aes_test>
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	b108      	cbz	r0, 8005e62 <wolfcrypt_test+0x242>
    render_error_message(msg, es);
 8005e5e:	4838      	ldr	r0, [pc, #224]	; (8005f40 <wolfcrypt_test+0x320>)
 8005e60:	e70d      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("AES      test passed!\n");
 8005e62:	4838      	ldr	r0, [pc, #224]	; (8005f44 <wolfcrypt_test+0x324>)
 8005e64:	f015 f9ca 	bl	801b1fc <iprintf>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	6898      	ldr	r0, [r3, #8]
 8005e6c:	f014 ff8e 	bl	801ad8c <fflush>
    if ( (ret = aes192_test()) != 0)
 8005e70:	f7fc fd2e 	bl	80028d0 <aes192_test>
 8005e74:	4601      	mov	r1, r0
 8005e76:	b108      	cbz	r0, 8005e7c <wolfcrypt_test+0x25c>
    render_error_message(msg, es);
 8005e78:	4833      	ldr	r0, [pc, #204]	; (8005f48 <wolfcrypt_test+0x328>)
 8005e7a:	e700      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("AES192   test passed!\n");
 8005e7c:	4833      	ldr	r0, [pc, #204]	; (8005f4c <wolfcrypt_test+0x32c>)
 8005e7e:	f015 f9bd 	bl	801b1fc <iprintf>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6898      	ldr	r0, [r3, #8]
 8005e86:	f014 ff81 	bl	801ad8c <fflush>
    if ( (ret = aes256_test()) != 0)
 8005e8a:	f7fc fdd3 	bl	8002a34 <aes256_test>
 8005e8e:	4601      	mov	r1, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d05f      	beq.n	8005f54 <wolfcrypt_test+0x334>
    render_error_message(msg, es);
 8005e94:	482e      	ldr	r0, [pc, #184]	; (8005f50 <wolfcrypt_test+0x330>)
 8005e96:	e6f2      	b.n	8005c7e <wolfcrypt_test+0x5e>
 8005e98:	20000188 	.word	0x20000188
 8005e9c:	0801e80d 	.word	0x0801e80d
 8005ea0:	0801e85d 	.word	0x0801e85d
 8005ea4:	0801e863 	.word	0x0801e863
 8005ea8:	0801e878 	.word	0x0801e878
 8005eac:	0801e8a1 	.word	0x0801e8a1
 8005eb0:	fffffc08 	.word	0xfffffc08
 8005eb4:	0801e8c1 	.word	0x0801e8c1
 8005eb8:	0801e8f1 	.word	0x0801e8f1
 8005ebc:	0801e908 	.word	0x0801e908
 8005ec0:	0801e91f 	.word	0x0801e91f
 8005ec4:	0801e936 	.word	0x0801e936
 8005ec8:	0801e94d 	.word	0x0801e94d
 8005ecc:	0801e964 	.word	0x0801e964
 8005ed0:	0801e97b 	.word	0x0801e97b
 8005ed4:	0801e992 	.word	0x0801e992
 8005ed8:	0801e9a9 	.word	0x0801e9a9
 8005edc:	0801e9c0 	.word	0x0801e9c0
 8005ee0:	0801e9d7 	.word	0x0801e9d7
 8005ee4:	0801e9ee 	.word	0x0801e9ee
 8005ee8:	0801ea05 	.word	0x0801ea05
 8005eec:	0801ea1c 	.word	0x0801ea1c
 8005ef0:	0801ea33 	.word	0x0801ea33
 8005ef4:	0801ea4a 	.word	0x0801ea4a
 8005ef8:	0801ea61 	.word	0x0801ea61
 8005efc:	0801ea7c 	.word	0x0801ea7c
 8005f00:	0801ea97 	.word	0x0801ea97
 8005f04:	0801eab2 	.word	0x0801eab2
 8005f08:	0801eacd 	.word	0x0801eacd
 8005f0c:	0801eae4 	.word	0x0801eae4
 8005f10:	0801eafb 	.word	0x0801eafb
 8005f14:	0801eb12 	.word	0x0801eb12
 8005f18:	0801eb29 	.word	0x0801eb29
 8005f1c:	0801eb43 	.word	0x0801eb43
 8005f20:	0801eb5d 	.word	0x0801eb5d
 8005f24:	0801eb77 	.word	0x0801eb77
 8005f28:	0801eb91 	.word	0x0801eb91
 8005f2c:	0801eba8 	.word	0x0801eba8
 8005f30:	0801ebbf 	.word	0x0801ebbf
 8005f34:	0801ebd6 	.word	0x0801ebd6
 8005f38:	0801ebed 	.word	0x0801ebed
 8005f3c:	0801ec04 	.word	0x0801ec04
 8005f40:	0801ec1b 	.word	0x0801ec1b
 8005f44:	0801ec32 	.word	0x0801ec32
 8005f48:	0801ec49 	.word	0x0801ec49
 8005f4c:	0801ec60 	.word	0x0801ec60
 8005f50:	0801ec77 	.word	0x0801ec77
        TEST_PASS("AES256   test passed!\n");
 8005f54:	483f      	ldr	r0, [pc, #252]	; (8006054 <wolfcrypt_test+0x434>)
 8005f56:	f015 f951 	bl	801b1fc <iprintf>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	6898      	ldr	r0, [r3, #8]
 8005f5e:	f014 ff15 	bl	801ad8c <fflush>
    if ( (ret = aesgcm_test()) != 0)
 8005f62:	f7fc ff03 	bl	8002d6c <aesgcm_test>
 8005f66:	4601      	mov	r1, r0
 8005f68:	b108      	cbz	r0, 8005f6e <wolfcrypt_test+0x34e>
    render_error_message(msg, es);
 8005f6a:	483b      	ldr	r0, [pc, #236]	; (8006058 <wolfcrypt_test+0x438>)
 8005f6c:	e687      	b.n	8005c7e <wolfcrypt_test+0x5e>
    if ((ret = aesgcm_default_test()) != 0) {
 8005f6e:	f7fc fe15 	bl	8002b9c <aesgcm_default_test>
 8005f72:	4601      	mov	r1, r0
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d1f8      	bne.n	8005f6a <wolfcrypt_test+0x34a>
        TEST_PASS("AES-GCM  test passed!\n");
 8005f78:	4838      	ldr	r0, [pc, #224]	; (800605c <wolfcrypt_test+0x43c>)
 8005f7a:	f015 f93f 	bl	801b1fc <iprintf>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	6898      	ldr	r0, [r3, #8]
 8005f82:	f014 ff03 	bl	801ad8c <fflush>
    if ( (ret = ecc_test()) != 0)
 8005f86:	f7fd fbc7 	bl	8003718 <ecc_test>
 8005f8a:	4601      	mov	r1, r0
 8005f8c:	b108      	cbz	r0, 8005f92 <wolfcrypt_test+0x372>
    render_error_message(msg, es);
 8005f8e:	4834      	ldr	r0, [pc, #208]	; (8006060 <wolfcrypt_test+0x440>)
 8005f90:	e675      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("ECC      test passed!\n");
 8005f92:	4834      	ldr	r0, [pc, #208]	; (8006064 <wolfcrypt_test+0x444>)
 8005f94:	f015 f932 	bl	801b1fc <iprintf>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	6898      	ldr	r0, [r3, #8]
 8005f9c:	f014 fef6 	bl	801ad8c <fflush>
        if ( (ret = ecc_test_buffers()) != 0)
 8005fa0:	f7fe fd86 	bl	8004ab0 <ecc_test_buffers>
 8005fa4:	4601      	mov	r1, r0
 8005fa6:	b108      	cbz	r0, 8005fac <wolfcrypt_test+0x38c>
    render_error_message(msg, es);
 8005fa8:	482f      	ldr	r0, [pc, #188]	; (8006068 <wolfcrypt_test+0x448>)
 8005faa:	e668      	b.n	8005c7e <wolfcrypt_test+0x5e>
            TEST_PASS("ECC buffer test passed!\n");
 8005fac:	482f      	ldr	r0, [pc, #188]	; (800606c <wolfcrypt_test+0x44c>)
 8005fae:	f015 f925 	bl	801b1fc <iprintf>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	6898      	ldr	r0, [r3, #8]
 8005fb6:	f014 fee9 	bl	801ad8c <fflush>
    if ( (ret = curve25519_test()) != 0)
 8005fba:	f7fe fe95 	bl	8004ce8 <curve25519_test>
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	b108      	cbz	r0, 8005fc6 <wolfcrypt_test+0x3a6>
    render_error_message(msg, es);
 8005fc2:	482b      	ldr	r0, [pc, #172]	; (8006070 <wolfcrypt_test+0x450>)
 8005fc4:	e65b      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("CURVE25519 test passed!\n");
 8005fc6:	482b      	ldr	r0, [pc, #172]	; (8006074 <wolfcrypt_test+0x454>)
 8005fc8:	f015 f918 	bl	801b1fc <iprintf>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	6898      	ldr	r0, [r3, #8]
 8005fd0:	f014 fedc 	bl	801ad8c <fflush>
    if ( (ret = ed25519_test()) != 0)
 8005fd4:	f7ff fa30 	bl	8005438 <ed25519_test>
 8005fd8:	4601      	mov	r1, r0
 8005fda:	b108      	cbz	r0, 8005fe0 <wolfcrypt_test+0x3c0>
    render_error_message(msg, es);
 8005fdc:	4826      	ldr	r0, [pc, #152]	; (8006078 <wolfcrypt_test+0x458>)
 8005fde:	e64e      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("ED25519  test passed!\n");
 8005fe0:	4826      	ldr	r0, [pc, #152]	; (800607c <wolfcrypt_test+0x45c>)
 8005fe2:	f015 f90b 	bl	801b1fc <iprintf>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	6898      	ldr	r0, [r3, #8]
 8005fea:	f014 fecf 	bl	801ad8c <fflush>
    if ( (ret = logging_test()) != 0)
 8005fee:	f7ff fd9d 	bl	8005b2c <logging_test>
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	b108      	cbz	r0, 8005ffa <wolfcrypt_test+0x3da>
    render_error_message(msg, es);
 8005ff6:	4822      	ldr	r0, [pc, #136]	; (8006080 <wolfcrypt_test+0x460>)
 8005ff8:	e641      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("logging  test passed!\n");
 8005ffa:	4822      	ldr	r0, [pc, #136]	; (8006084 <wolfcrypt_test+0x464>)
 8005ffc:	f015 f8fe 	bl	801b1fc <iprintf>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	6898      	ldr	r0, [r3, #8]
 8006004:	f014 fec2 	bl	801ad8c <fflush>
    if ( (ret = time_test()) != 0)
 8006008:	f7ff fdc4 	bl	8005b94 <time_test>
 800600c:	4601      	mov	r1, r0
 800600e:	b108      	cbz	r0, 8006014 <wolfcrypt_test+0x3f4>
    render_error_message(msg, es);
 8006010:	481d      	ldr	r0, [pc, #116]	; (8006088 <wolfcrypt_test+0x468>)
 8006012:	e634      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("time test passed!\n");
 8006014:	4e1d      	ldr	r6, [pc, #116]	; (800608c <wolfcrypt_test+0x46c>)
 8006016:	481e      	ldr	r0, [pc, #120]	; (8006090 <wolfcrypt_test+0x470>)
 8006018:	f015 f8f0 	bl	801b1fc <iprintf>
 800601c:	6833      	ldr	r3, [r6, #0]
 800601e:	6898      	ldr	r0, [r3, #8]
 8006020:	f014 feb4 	bl	801ad8c <fflush>
    if ((ret = mutex_test()) != 0)
 8006024:	f7ff fda6 	bl	8005b74 <mutex_test>
 8006028:	4604      	mov	r4, r0
 800602a:	b110      	cbz	r0, 8006032 <wolfcrypt_test+0x412>
    render_error_message(msg, es);
 800602c:	4601      	mov	r1, r0
 800602e:	4819      	ldr	r0, [pc, #100]	; (8006094 <wolfcrypt_test+0x474>)
 8006030:	e625      	b.n	8005c7e <wolfcrypt_test+0x5e>
        TEST_PASS("mutex    test passed!\n");
 8006032:	4819      	ldr	r0, [pc, #100]	; (8006098 <wolfcrypt_test+0x478>)
 8006034:	f015 f8e2 	bl	801b1fc <iprintf>
 8006038:	6833      	ldr	r3, [r6, #0]
 800603a:	6898      	ldr	r0, [r3, #8]
 800603c:	f014 fea6 	bl	801ad8c <fflush>
    if (args)
 8006040:	b105      	cbz	r5, 8006044 <wolfcrypt_test+0x424>
        ((func_args*)args)->return_code = ret;
 8006042:	60ac      	str	r4, [r5, #8]
    TEST_PASS("Test complete\n");
 8006044:	4815      	ldr	r0, [pc, #84]	; (800609c <wolfcrypt_test+0x47c>)
 8006046:	f015 f8d9 	bl	801b1fc <iprintf>
 800604a:	6833      	ldr	r3, [r6, #0]
 800604c:	6898      	ldr	r0, [r3, #8]
 800604e:	f014 fe9d 	bl	801ad8c <fflush>
    EXIT_TEST(ret);
 8006052:	e61a      	b.n	8005c8a <wolfcrypt_test+0x6a>
 8006054:	0801ec8e 	.word	0x0801ec8e
 8006058:	0801eca5 	.word	0x0801eca5
 800605c:	0801ecbc 	.word	0x0801ecbc
 8006060:	0801ecd3 	.word	0x0801ecd3
 8006064:	0801ecea 	.word	0x0801ecea
 8006068:	0801ed01 	.word	0x0801ed01
 800606c:	0801ed1a 	.word	0x0801ed1a
 8006070:	0801ed33 	.word	0x0801ed33
 8006074:	0801ed4c 	.word	0x0801ed4c
 8006078:	0801ed65 	.word	0x0801ed65
 800607c:	0801ed7c 	.word	0x0801ed7c
 8006080:	0801ed93 	.word	0x0801ed93
 8006084:	0801edaa 	.word	0x0801edaa
 8006088:	0801edc1 	.word	0x0801edc1
 800608c:	20000188 	.word	0x20000188
 8006090:	0801edd4 	.word	0x0801edd4
 8006094:	0801ede7 	.word	0x0801ede7
 8006098:	0801edfe 	.word	0x0801edfe
 800609c:	0801ee15 	.word	0x0801ee15

080060a0 <ByteReverseWord32>:
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
    return rotlFixed(value, 16U);
#endif
}
 80060a0:	ba00      	rev	r0, r0
 80060a2:	4770      	bx	lr

080060a4 <xorbufout>:
/* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
counts, placing the result in <*buf>. */

WC_MISC_STATIC WC_INLINE void xorbufout(void* out, const void* buf,
                                        const void* mask, word32 count)
{
 80060a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = (byte*)out;
    b = (const byte*)buf;
    m = (const byte*)mask;


    if (((wc_ptr_t)o) % WOLFSSL_WORD_SIZE ==
 80060a6:	ea80 0401 	eor.w	r4, r0, r1
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE &&
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 80060aa:	ea82 0501 	eor.w	r5, r2, r1
 80060ae:	432c      	orrs	r4, r5
            ((wc_ptr_t)b) % WOLFSSL_WORD_SIZE &&
 80060b0:	f014 0403 	ands.w	r4, r4, #3
 80060b4:	d10d      	bne.n	80060d2 <xorbufout+0x2e>
            const wolfssl_word* wp;
        } tpb, tpm;
        /* Alignment checks out. Possible to XOR words. */
        /* Move alignment so that it lines up with a
         * WOLFSSL_WORD_SIZE boundary */
        while (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 80060b6:	078d      	lsls	r5, r1, #30
 80060b8:	d000      	beq.n	80060bc <xorbufout+0x18>
 80060ba:	b973      	cbnz	r3, 80060da <xorbufout+0x36>
            count--;
        }
        tpo.bp = o;
        tpb.bp = b;
        tpm.bp = m;
        XorWordsOut( &tpo.wp, &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
 80060bc:	089d      	lsrs	r5, r3, #2
    for (i = 0; i < n; i++)
 80060be:	42a5      	cmp	r5, r4
 80060c0:	d114      	bne.n	80060ec <xorbufout+0x48>
 80060c2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80060c6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80060ca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
        o = tpo.bp;
        b = tpb.bp;
        m = tpm.bp;
        count %= WOLFSSL_WORD_SIZE;
 80060ce:	f003 0303 	and.w	r3, r3, #3
    }

    for (i = 0; i < count; i++)
 80060d2:	2400      	movs	r4, #0
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d112      	bne.n	80060fe <xorbufout+0x5a>
        o[i] = (byte)(b[i] ^ m[i]);
}
 80060d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(o++) = (byte)(*(b++) ^ *(m++));
 80060da:	f811 5b01 	ldrb.w	r5, [r1], #1
 80060de:	f812 6b01 	ldrb.w	r6, [r2], #1
 80060e2:	4075      	eors	r5, r6
 80060e4:	f800 5b01 	strb.w	r5, [r0], #1
            count--;
 80060e8:	3b01      	subs	r3, #1
 80060ea:	e7e4      	b.n	80060b6 <xorbufout+0x12>
        *((*r)++) = *((*a)++) ^ *((*b)++);
 80060ec:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 80060f0:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 80060f4:	407e      	eors	r6, r7
 80060f6:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
    for (i = 0; i < n; i++)
 80060fa:	3401      	adds	r4, #1
 80060fc:	e7df      	b.n	80060be <xorbufout+0x1a>
        o[i] = (byte)(b[i] ^ m[i]);
 80060fe:	5d0d      	ldrb	r5, [r1, r4]
 8006100:	5d16      	ldrb	r6, [r2, r4]
 8006102:	4075      	eors	r5, r6
 8006104:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < count; i++)
 8006106:	3401      	adds	r4, #1
 8006108:	e7e4      	b.n	80060d4 <xorbufout+0x30>

0800610a <xorbuf>:
    const byte* m;

    b = (byte*)buf;
    m = (const byte*)mask;

    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 800610a:	ea81 0300 	eor.w	r3, r1, r0
 800610e:	079b      	lsls	r3, r3, #30
{
 8006110:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8006112:	d10c      	bne.n	800612e <xorbuf+0x24>
            const wolfssl_word* wp;
        } tpm;
        /* Alignment checks out. Possible to XOR words. */
        /* Move alignment so that it lines up with a
         * WOLFSSL_WORD_SIZE boundary */
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8006114:	f000 0403 	and.w	r4, r0, #3
 8006118:	b104      	cbz	r4, 800611c <xorbuf+0x12>
 800611a:	b96a      	cbnz	r2, 8006138 <xorbuf+0x2e>
    for (i = 0; i < n; i++)
 800611c:	f022 0503 	bic.w	r5, r2, #3
 8006120:	194e      	adds	r6, r1, r5
 8006122:	4603      	mov	r3, r0
 8006124:	42b1      	cmp	r1, r6
 8006126:	d110      	bne.n	800614a <xorbuf+0x40>
 8006128:	4428      	add	r0, r5
        tpb.bp = b;
        tpm.bp = m;
        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
        b = tpb.bp;
        m = tpm.bp;
        count %= WOLFSSL_WORD_SIZE;
 800612a:	f002 0203 	and.w	r2, r2, #3
    }

    for (i = 0; i < count; i++)
 800612e:	3901      	subs	r1, #1
 8006130:	4402      	add	r2, r0
 8006132:	4290      	cmp	r0, r2
 8006134:	d111      	bne.n	800615a <xorbuf+0x50>
        b[i] ^= m[i];
}
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(b++) ^= *(m++);
 8006138:	f810 3b01 	ldrb.w	r3, [r0], #1
 800613c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006140:	406b      	eors	r3, r5
 8006142:	f800 3c01 	strb.w	r3, [r0, #-1]
            count--;
 8006146:	3a01      	subs	r2, #1
 8006148:	e7e6      	b.n	8006118 <xorbuf+0xe>
        *((*r)++) ^= *((*a)++);
 800614a:	f853 4b04 	ldr.w	r4, [r3], #4
 800614e:	f851 7b04 	ldr.w	r7, [r1], #4
 8006152:	407c      	eors	r4, r7
 8006154:	f843 4c04 	str.w	r4, [r3, #-4]
    for (i = 0; i < n; i++)
 8006158:	e7e4      	b.n	8006124 <xorbuf+0x1a>
        b[i] ^= m[i];
 800615a:	7803      	ldrb	r3, [r0, #0]
 800615c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006160:	4063      	eors	r3, r4
 8006162:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; i < count; i++)
 8006166:	e7e4      	b.n	8006132 <xorbuf+0x28>

08006168 <IncrementGcmCounter>:
static WC_INLINE void IncrementGcmCounter(byte* inOutCtr)
{
    int i;

    /* in network byte order so start at end and work back */
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 8006168:	f100 0210 	add.w	r2, r0, #16
 800616c:	300c      	adds	r0, #12
        if (++inOutCtr[i])  /* we're done unless we overflow */
 800616e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8006172:	3301      	adds	r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	7013      	strb	r3, [r2, #0]
 8006178:	b90b      	cbnz	r3, 800617e <IncrementGcmCounter+0x16>
    for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 800617a:	4282      	cmp	r2, r0
 800617c:	d1f7      	bne.n	800616e <IncrementGcmCounter+0x6>
            return;
    }
}
 800617e:	4770      	bx	lr

08006180 <wc_AesEncrypt>:
{
 8006180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	460d      	mov	r5, r1
 8006186:	4690      	mov	r8, r2
    if (aes == NULL) {
 8006188:	4604      	mov	r4, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	f000 872d 	beq.w	8006fea <wc_AesEncrypt+0xe6a>
    r = aes->rounds >> 1;
 8006190:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
 8006194:	087f      	lsrs	r7, r7, #1
    if (r > 7 || r == 0) {
 8006196:	1e7b      	subs	r3, r7, #1
 8006198:	2b06      	cmp	r3, #6
 800619a:	f200 8729 	bhi.w	8006ff0 <wc_AesEncrypt+0xe70>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 800619e:	2204      	movs	r2, #4
 80061a0:	4668      	mov	r0, sp
 80061a2:	f014 ff1d 	bl	801afe0 <memcpy>
    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
 80061a6:	2204      	movs	r2, #4
 80061a8:	18a9      	adds	r1, r5, r2
 80061aa:	eb0d 0002 	add.w	r0, sp, r2
 80061ae:	f014 ff17 	bl	801afe0 <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 80061b2:	f105 0108 	add.w	r1, r5, #8
 80061b6:	2204      	movs	r2, #4
 80061b8:	a802      	add	r0, sp, #8
 80061ba:	f014 ff11 	bl	801afe0 <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 80061be:	f105 010c 	add.w	r1, r5, #12
 80061c2:	2204      	movs	r2, #4
 80061c4:	a803      	add	r0, sp, #12
 80061c6:	f014 ff0b 	bl	801afe0 <memcpy>
    s0 = ByteReverseWord32(s0);
 80061ca:	9800      	ldr	r0, [sp, #0]
 80061cc:	f7ff ff68 	bl	80060a0 <ByteReverseWord32>
 80061d0:	4602      	mov	r2, r0
    s1 = ByteReverseWord32(s1);
 80061d2:	9801      	ldr	r0, [sp, #4]
 80061d4:	f7ff ff64 	bl	80060a0 <ByteReverseWord32>
 80061d8:	4603      	mov	r3, r0
    s2 = ByteReverseWord32(s2);
 80061da:	9802      	ldr	r0, [sp, #8]
 80061dc:	f7ff ff60 	bl	80060a0 <ByteReverseWord32>
 80061e0:	4681      	mov	r9, r0
    s3 = ByteReverseWord32(s3);
 80061e2:	9803      	ldr	r0, [sp, #12]
 80061e4:	f7ff ff5c 	bl	80060a0 <ByteReverseWord32>
    s0 ^= rk[0];
 80061e8:	6821      	ldr	r1, [r4, #0]
 80061ea:	ea82 0e01 	eor.w	lr, r2, r1
    s1 ^= rk[1];
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	ea83 0c02 	eor.w	ip, r3, r2
    s2 ^= rk[2];
 80061f4:	68a3      	ldr	r3, [r4, #8]
 80061f6:	ea89 0903 	eor.w	r9, r9, r3
    s3 ^= rk[3];
 80061fa:	68e3      	ldr	r3, [r4, #12]
 80061fc:	4058      	eors	r0, r3
                       ENC_ROUND_T_S( 0);
 80061fe:	b2c2      	uxtb	r2, r0
 8006200:	4bf2      	ldr	r3, [pc, #968]	; (80065cc <wc_AesEncrypt+0x44c>)
 8006202:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8006206:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800620a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 800620e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006212:	4055      	eors	r5, r2
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	4055      	eors	r5, r2
 8006218:	f3cc 4207 	ubfx	r2, ip, #16, #8
 800621c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006220:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8006224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006228:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800622c:	4055      	eors	r5, r2
 800622e:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8006232:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006236:	ea4f 6619 	mov.w	r6, r9, lsr #24
 800623a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800623e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006242:	4055      	eors	r5, r2
 8006244:	fa5f f28e 	uxtb.w	r2, lr
 8006248:	f502 7240 	add.w	r2, r2, #768	; 0x300
    if (r > 5) {
 800624c:	2f05      	cmp	r7, #5
                       ENC_ROUND_T_S( 0);
 800624e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006252:	ea81 0102 	eor.w	r1, r1, r2
 8006256:	6962      	ldr	r2, [r4, #20]
 8006258:	ea81 0102 	eor.w	r1, r1, r2
 800625c:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006260:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006264:	fa5f f989 	uxtb.w	r9, r9
 8006268:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800626c:	ea81 0102 	eor.w	r1, r1, r2
 8006270:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8006274:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006278:	f509 7940 	add.w	r9, r9, #768	; 0x300
 800627c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006280:	ea81 0102 	eor.w	r1, r1, r2
 8006284:	fa5f f28c 	uxtb.w	r2, ip
 8006288:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800628c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8006290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006294:	ea86 0602 	eor.w	r6, r6, r2
 8006298:	69a2      	ldr	r2, [r4, #24]
 800629a:	ea86 0602 	eor.w	r6, r6, r2
 800629e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80062a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80062a6:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80062aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062ae:	ea86 0602 	eor.w	r6, r6, r2
 80062b2:	f3ce 2207 	ubfx	r2, lr, #8, #8
 80062b6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80062ba:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 80062be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062c2:	ea86 0602 	eor.w	r6, r6, r2
 80062c6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80062ca:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80062ce:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 80062d2:	ea82 0900 	eor.w	r9, r2, r0
 80062d6:	69e2      	ldr	r2, [r4, #28]
 80062d8:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 80062dc:	ea89 0902 	eor.w	r9, r9, r2
 80062e0:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 80062e4:	ea89 0902 	eor.w	r9, r9, r2
 80062e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80062ec:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
 80062f0:	fa5f f089 	uxtb.w	r0, r9
 80062f4:	ea4f 6215 	mov.w	r2, r5, lsr #24
 80062f8:	f500 7040 	add.w	r0, r0, #768	; 0x300
 80062fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006300:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006304:	ea82 0c00 	eor.w	ip, r2, r0
 8006308:	6a22      	ldr	r2, [r4, #32]
 800630a:	ea8c 0c02 	eor.w	ip, ip, r2
 800630e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8006312:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006316:	ea4f 6011 	mov.w	r0, r1, lsr #24
 800631a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800631e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006322:	ea8c 0c02 	eor.w	ip, ip, r2
 8006326:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800632a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800632e:	fa5f fe81 	uxtb.w	lr, r1
 8006332:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006336:	ea8c 0c02 	eor.w	ip, ip, r2
 800633a:	b2ea      	uxtb	r2, r5
 800633c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006340:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8006344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006348:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800634c:	ea80 0002 	eor.w	r0, r0, r2
 8006350:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006352:	ea80 0002 	eor.w	r0, r0, r2
 8006356:	f3c6 4207 	ubfx	r2, r6, #16, #8
 800635a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800635e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8006362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006366:	ea80 0002 	eor.w	r0, r0, r2
 800636a:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800636e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006372:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8006376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800637a:	ea80 0002 	eor.w	r0, r0, r2
 800637e:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8006382:	b2f6      	uxtb	r6, r6
 8006384:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006388:	ea82 0e0e 	eor.w	lr, r2, lr
 800638c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800638e:	ea8e 0e02 	eor.w	lr, lr, r2
 8006392:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006396:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800639a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800639e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063a2:	ea8e 0e02 	eor.w	lr, lr, r2
 80063a6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80063aa:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80063ae:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80063b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063b6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80063ba:	ea8e 0e02 	eor.w	lr, lr, r2
 80063be:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80063c2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80063c6:	ea82 0906 	eor.w	r9, r2, r6
 80063ca:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80063ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80063d0:	ea89 0902 	eor.w	r9, r9, r2
 80063d4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80063d8:	ea89 0902 	eor.w	r9, r9, r2
 80063dc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80063e0:	ea89 0902 	eor.w	r9, r9, r2
 80063e4:	fa5f f289 	uxtb.w	r2, r9
 80063e8:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80063ec:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80063f0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80063f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063f8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80063fc:	ea85 0501 	eor.w	r5, r5, r1
 8006400:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006404:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006406:	ea85 0501 	eor.w	r5, r5, r1
 800640a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800640e:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8006412:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006416:	ea85 0501 	eor.w	r5, r5, r1
 800641a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800641e:	ea85 0502 	eor.w	r5, r5, r2
 8006422:	fa5f f28c 	uxtb.w	r2, ip
 8006426:	ea4f 6110 	mov.w	r1, r0, lsr #24
 800642a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800642e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006436:	ea81 0102 	eor.w	r1, r1, r2
 800643a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800643c:	ea81 0102 	eor.w	r1, r1, r2
 8006440:	f3ce 4207 	ubfx	r2, lr, #16, #8
 8006444:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006448:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800644c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006450:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006454:	ea81 0102 	eor.w	r1, r1, r2
 8006458:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800645c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006460:	fa5f fe8e 	uxtb.w	lr, lr
 8006464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006468:	ea81 0102 	eor.w	r1, r1, r2
 800646c:	b2c2      	uxtb	r2, r0
 800646e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006472:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8006476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800647a:	ea86 0602 	eor.w	r6, r6, r2
 800647e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006480:	ea86 0602 	eor.w	r6, r6, r2
 8006484:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006488:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800648c:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006494:	ea86 0602 	eor.w	r6, r6, r2
 8006498:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800649c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80064a0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80064a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064a8:	ea86 0602 	eor.w	r6, r6, r2
 80064ac:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80064b0:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80064b4:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 80064b8:	ea82 0909 	eor.w	r9, r2, r9
 80064bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80064be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80064c2:	ea89 0902 	eor.w	r9, r9, r2
 80064c6:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80064ca:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80064ce:	ea89 0902 	eor.w	r9, r9, r2
 80064d2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80064d6:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
 80064da:	fa5f f289 	uxtb.w	r2, r9
 80064de:	ea4f 6015 	mov.w	r0, r5, lsr #24
 80064e2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80064e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80064ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064ee:	ea80 0c02 	eor.w	ip, r0, r2
 80064f2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80064f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80064f8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80064fc:	ea8c 0c00 	eor.w	ip, ip, r0
 8006500:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006504:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8006508:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800650c:	ea8c 0c00 	eor.w	ip, ip, r0
 8006510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006514:	ea8c 0c02 	eor.w	ip, ip, r2
 8006518:	b2ea      	uxtb	r2, r5
 800651a:	ea4f 6011 	mov.w	r0, r1, lsr #24
 800651e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006522:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800652a:	ea80 0002 	eor.w	r0, r0, r2
 800652e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006530:	ea80 0002 	eor.w	r0, r0, r2
 8006534:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8006538:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800653c:	fa5f fe81 	uxtb.w	lr, r1
 8006540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006544:	ea80 0002 	eor.w	r0, r0, r2
 8006548:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800654c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006550:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8006554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006558:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800655c:	ea80 0002 	eor.w	r0, r0, r2
 8006560:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8006564:	b2f6      	uxtb	r6, r6
 8006566:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800656a:	ea82 0e0e 	eor.w	lr, r2, lr
 800656e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006570:	ea8e 0e02 	eor.w	lr, lr, r2
 8006574:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006578:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800657c:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006584:	ea8e 0e02 	eor.w	lr, lr, r2
 8006588:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800658c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006590:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8006594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006598:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800659c:	ea8e 0e02 	eor.w	lr, lr, r2
 80065a0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80065a4:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80065a8:	ea82 0906 	eor.w	r9, r2, r6
 80065ac:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80065b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80065b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80065b6:	ea89 0902 	eor.w	r9, r9, r2
 80065ba:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80065be:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80065c2:	ea89 0902 	eor.w	r9, r9, r2
 80065c6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80065ca:	e001      	b.n	80065d0 <wc_AesEncrypt+0x450>
 80065cc:	08020df8 	.word	0x08020df8
 80065d0:	ea89 0902 	eor.w	r9, r9, r2
 80065d4:	fa5f f289 	uxtb.w	r2, r9
 80065d8:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80065dc:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80065e0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80065e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80065ec:	ea85 0501 	eor.w	r5, r5, r1
 80065f0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80065f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80065f6:	ea85 0501 	eor.w	r5, r5, r1
 80065fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065fe:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8006602:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006606:	ea85 0501 	eor.w	r5, r5, r1
 800660a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800660e:	ea85 0502 	eor.w	r5, r5, r2
 8006612:	fa5f f28c 	uxtb.w	r2, ip
 8006616:	ea4f 6110 	mov.w	r1, r0, lsr #24
 800661a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800661e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006622:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006626:	ea81 0102 	eor.w	r1, r1, r2
 800662a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800662c:	ea81 0102 	eor.w	r1, r1, r2
 8006630:	f3ce 4207 	ubfx	r2, lr, #16, #8
 8006634:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006638:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800663c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006640:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006644:	ea81 0102 	eor.w	r1, r1, r2
 8006648:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800664c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006650:	fa5f fe8e 	uxtb.w	lr, lr
 8006654:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006658:	ea81 0102 	eor.w	r1, r1, r2
 800665c:	b2c2      	uxtb	r2, r0
 800665e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006662:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8006666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800666a:	ea86 0602 	eor.w	r6, r6, r2
 800666e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006670:	ea86 0602 	eor.w	r6, r6, r2
 8006674:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006678:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800667c:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006684:	ea86 0602 	eor.w	r6, r6, r2
 8006688:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800668c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006690:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8006694:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006698:	ea86 0602 	eor.w	r6, r6, r2
 800669c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80066a0:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80066a4:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 80066a8:	ea82 0909 	eor.w	r9, r2, r9
 80066ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80066ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80066b2:	ea89 0902 	eor.w	r9, r9, r2
 80066b6:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80066ba:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80066be:	ea89 0902 	eor.w	r9, r9, r2
 80066c2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80066c6:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
 80066ca:	fa5f f289 	uxtb.w	r2, r9
 80066ce:	ea4f 6015 	mov.w	r0, r5, lsr #24
 80066d2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80066d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80066da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066de:	ea80 0c02 	eor.w	ip, r0, r2
 80066e2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80066e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80066e8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80066ec:	ea8c 0c00 	eor.w	ip, ip, r0
 80066f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80066f4:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80066f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80066fc:	ea8c 0c00 	eor.w	ip, ip, r0
 8006700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006704:	ea8c 0c02 	eor.w	ip, ip, r2
 8006708:	b2ea      	uxtb	r2, r5
 800670a:	ea4f 6011 	mov.w	r0, r1, lsr #24
 800670e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006712:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800671a:	ea80 0002 	eor.w	r0, r0, r2
 800671e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006720:	ea80 0002 	eor.w	r0, r0, r2
 8006724:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8006728:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800672c:	fa5f fe81 	uxtb.w	lr, r1
 8006730:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006734:	ea80 0002 	eor.w	r0, r0, r2
 8006738:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800673c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006740:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8006744:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006748:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800674c:	ea80 0002 	eor.w	r0, r0, r2
 8006750:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8006754:	b2f6      	uxtb	r6, r6
 8006756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800675a:	ea82 0e0e 	eor.w	lr, r2, lr
 800675e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006760:	ea8e 0e02 	eor.w	lr, lr, r2
 8006764:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006768:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800676c:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006770:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006774:	ea8e 0e02 	eor.w	lr, lr, r2
 8006778:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800677c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006780:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8006784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006788:	ea8e 0e02 	eor.w	lr, lr, r2
 800678c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8006790:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006794:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8006798:	ea82 0906 	eor.w	r9, r2, r6
 800679c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80067a0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80067a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80067a6:	ea89 0902 	eor.w	r9, r9, r2
 80067aa:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80067ae:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80067b2:	ea89 0902 	eor.w	r9, r9, r2
 80067b6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80067ba:	ea89 0902 	eor.w	r9, r9, r2
 80067be:	fa5f f289 	uxtb.w	r2, r9
 80067c2:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80067c6:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80067ca:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80067ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067d2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80067d6:	ea85 0501 	eor.w	r5, r5, r1
 80067da:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80067de:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80067e0:	ea85 0501 	eor.w	r5, r5, r1
 80067e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e8:	f3ce 2207 	ubfx	r2, lr, #8, #8
 80067ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80067f0:	ea85 0501 	eor.w	r5, r5, r1
 80067f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067f8:	ea85 0502 	eor.w	r5, r5, r2
 80067fc:	fa5f f28c 	uxtb.w	r2, ip
 8006800:	ea4f 6110 	mov.w	r1, r0, lsr #24
 8006804:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006808:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800680c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006810:	ea81 0102 	eor.w	r1, r1, r2
 8006814:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006816:	ea81 0102 	eor.w	r1, r1, r2
 800681a:	f3ce 4207 	ubfx	r2, lr, #16, #8
 800681e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006822:	ea4f 661e 	mov.w	r6, lr, lsr #24
 8006826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800682a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800682e:	ea81 0102 	eor.w	r1, r1, r2
 8006832:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8006836:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800683a:	fa5f fe8e 	uxtb.w	lr, lr
 800683e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006842:	ea81 0102 	eor.w	r1, r1, r2
 8006846:	b2c2      	uxtb	r2, r0
 8006848:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800684c:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8006850:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006854:	ea86 0602 	eor.w	r6, r6, r2
 8006858:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800685a:	ea86 0602 	eor.w	r6, r6, r2
 800685e:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006862:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006866:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800686a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800686e:	ea86 0602 	eor.w	r6, r6, r2
 8006872:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8006876:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800687a:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800687e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006882:	ea86 0602 	eor.w	r6, r6, r2
 8006886:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 800688a:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 800688e:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8006892:	ea82 0909 	eor.w	r9, r2, r9
 8006896:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006898:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800689c:	ea89 0902 	eor.w	r9, r9, r2
 80068a0:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80068a4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80068a8:	ea89 0902 	eor.w	r9, r9, r2
 80068ac:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80068b0:	ea89 0902 	eor.w	r9, r9, r2
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
 80068b4:	fa5f f289 	uxtb.w	r2, r9
 80068b8:	ea4f 6015 	mov.w	r0, r5, lsr #24
 80068bc:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80068c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80068c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068c8:	ea80 0e02 	eor.w	lr, r0, r2
 80068cc:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80068d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80068d4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80068d8:	ea8e 0e00 	eor.w	lr, lr, r0
 80068dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80068e0:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80068e4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80068e8:	ea8e 0e00 	eor.w	lr, lr, r0
 80068ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068f0:	ea8e 0e02 	eor.w	lr, lr, r2
 80068f4:	b2ea      	uxtb	r2, r5
 80068f6:	ea4f 6011 	mov.w	r0, r1, lsr #24
 80068fa:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80068fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006902:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006906:	ea80 0002 	eor.w	r0, r0, r2
 800690a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800690e:	ea80 0002 	eor.w	r0, r0, r2
 8006912:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8006916:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800691a:	fa5f fc81 	uxtb.w	ip, r1
 800691e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006922:	ea80 0002 	eor.w	r0, r0, r2
 8006926:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800692a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800692e:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8006932:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006936:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800693a:	ea80 0002 	eor.w	r0, r0, r2
 800693e:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8006942:	b2f6      	uxtb	r6, r6
 8006944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006948:	ea82 0c0c 	eor.w	ip, r2, ip
 800694c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8006950:	ea8c 0c02 	eor.w	ip, ip, r2
 8006954:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006958:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800695c:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006964:	ea8c 0c02 	eor.w	ip, ip, r2
 8006968:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800696c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006970:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8006974:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006978:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800697c:	ea8c 0c02 	eor.w	ip, ip, r2
 8006980:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8006984:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8006988:	ea82 0906 	eor.w	r9, r2, r6
 800698c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006990:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006994:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8006998:	ea89 0902 	eor.w	r9, r9, r2
 800699c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80069a0:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80069a4:	ea89 0902 	eor.w	r9, r9, r2
 80069a8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80069ac:	ea89 0902 	eor.w	r9, r9, r2
 80069b0:	fa5f f289 	uxtb.w	r2, r9
 80069b4:	ea4f 611e 	mov.w	r1, lr, lsr #24
 80069b8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80069bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80069c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c4:	ea82 0201 	eor.w	r2, r2, r1
 80069c8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80069cc:	ea81 0102 	eor.w	r1, r1, r2
 80069d0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80069d4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80069d8:	ea4f 6510 	mov.w	r5, r0, lsr #24
 80069dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069e0:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 80069e4:	ea81 0102 	eor.w	r1, r1, r2
 80069e8:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80069ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80069f0:	ea4f 661c 	mov.w	r6, ip, lsr #24
 80069f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069f8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80069fc:	ea81 0102 	eor.w	r1, r1, r2
 8006a00:	fa5f f28e 	uxtb.w	r2, lr
 8006a04:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006a08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a0c:	ea85 0502 	eor.w	r5, r5, r2
 8006a10:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8006a14:	ea85 0502 	eor.w	r5, r5, r2
 8006a18:	f3cc 4207 	ubfx	r2, ip, #16, #8
 8006a1c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006a20:	fa5f fc8c 	uxtb.w	ip, ip
 8006a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a28:	ea85 0502 	eor.w	r5, r5, r2
 8006a2c:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8006a30:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006a34:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8006a38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a3c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8006a40:	ea85 0502 	eor.w	r5, r5, r2
 8006a44:	b2c2      	uxtb	r2, r0
 8006a46:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006a4a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006a4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a52:	ea86 0602 	eor.w	r6, r6, r2
 8006a56:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8006a5a:	ea86 0602 	eor.w	r6, r6, r2
 8006a5e:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8006a62:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006a66:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a6e:	ea86 0602 	eor.w	r6, r6, r2
 8006a72:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8006a76:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006a7a:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8006a7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a82:	ea86 0602 	eor.w	r6, r6, r2
 8006a86:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8006a8a:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8006a8e:	ea82 0c0c 	eor.w	ip, r2, ip
 8006a92:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8006a96:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006a9a:	ea8c 0c02 	eor.w	ip, ip, r2
 8006a9e:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8006aa2:	ea8c 0c02 	eor.w	ip, ip, r2
 8006aa6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8006aaa:	ea8c 0c02 	eor.w	ip, ip, r2
    if (r > 5) {
 8006aae:	f240 81e5 	bls.w	8006e7c <wc_AesEncrypt+0xcfc>
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 8006ab2:	fa5f f08c 	uxtb.w	r0, ip
 8006ab6:	0e0a      	lsrs	r2, r1, #24
 8006ab8:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006abc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ac0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006ac4:	ea82 0e00 	eor.w	lr, r2, r0
 8006ac8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8006acc:	ea8e 0e02 	eor.w	lr, lr, r2
 8006ad0:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8006ad4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006ad8:	b2c8      	uxtb	r0, r1
 8006ada:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ade:	ea8e 0e02 	eor.w	lr, lr, r2
 8006ae2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8006ae6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006aea:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006aee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006af2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006af6:	ea8e 0e02 	eor.w	lr, lr, r2
 8006afa:	0e2a      	lsrs	r2, r5, #24
        if (r > 6) {
 8006afc:	2f07      	cmp	r7, #7
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 8006afe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b02:	ea82 0900 	eor.w	r9, r2, r0
 8006b06:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8006b0a:	ea89 0902 	eor.w	r9, r9, r2
 8006b0e:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8006b12:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006b16:	b2e8      	uxtb	r0, r5
 8006b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b1c:	ea89 0902 	eor.w	r9, r9, r2
 8006b20:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8006b24:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006b28:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006b2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006b34:	ea89 0902 	eor.w	r9, r9, r2
 8006b38:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8006b3c:	b2f6      	uxtb	r6, r6
 8006b3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b42:	ea80 0002 	eor.w	r0, r0, r2
 8006b46:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8006b4a:	ea82 0200 	eor.w	r2, r2, r0
 8006b4e:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8006b52:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006b56:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8006b5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006b5e:	ea82 0200 	eor.w	r2, r2, r0
 8006b62:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006b66:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006b6a:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8006b6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006b72:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006b76:	ea82 0200 	eor.w	r2, r2, r0
 8006b7a:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006b7e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8006b82:	ea80 0c06 	eor.w	ip, r0, r6
 8006b86:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006b8a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8006b8e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8006b92:	ea8c 0c00 	eor.w	ip, ip, r0
 8006b96:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8006b9a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006b9e:	ea8c 0c00 	eor.w	ip, ip, r0
 8006ba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ba6:	ea8c 0c00 	eor.w	ip, ip, r0
 8006baa:	fa5f f08c 	uxtb.w	r0, ip
 8006bae:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8006bb2:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006bb6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006bba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006bbe:	ea80 0001 	eor.w	r0, r0, r1
 8006bc2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8006bc6:	ea81 0100 	eor.w	r1, r1, r0
 8006bca:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8006bce:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006bd2:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8006bd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006bda:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8006bde:	ea81 0100 	eor.w	r1, r1, r0
 8006be2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8006be6:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006bea:	ea4f 6612 	mov.w	r6, r2, lsr #24
 8006bee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006bf2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006bf6:	ea81 0100 	eor.w	r1, r1, r0
 8006bfa:	fa5f f08e 	uxtb.w	r0, lr
 8006bfe:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006c02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006c06:	ea80 0005 	eor.w	r0, r0, r5
 8006c0a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8006c0e:	ea85 0500 	eor.w	r5, r5, r0
 8006c12:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006c16:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006c20:	ea85 0500 	eor.w	r5, r5, r0
 8006c24:	f3cc 2007 	ubfx	r0, ip, #8, #8
 8006c28:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006c2c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006c30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006c34:	ea85 0500 	eor.w	r5, r5, r0
 8006c38:	fa5f f089 	uxtb.w	r0, r9
 8006c3c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006c40:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8006c44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006c48:	ea86 0600 	eor.w	r6, r6, r0
 8006c4c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8006c50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c54:	ea86 0600 	eor.w	r6, r6, r0
 8006c58:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8006c5c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006c60:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8006c64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006c68:	ea86 0600 	eor.w	r6, r6, r0
 8006c6c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8006c70:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006c74:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8006c78:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006c7c:	ea86 0600 	eor.w	r6, r6, r0
 8006c80:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006c84:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8006c88:	ea80 0c02 	eor.w	ip, r0, r2
 8006c8c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8006c90:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8006c94:	ea8c 0c00 	eor.w	ip, ip, r0
 8006c98:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8006c9c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8006ca0:	ea8c 0c00 	eor.w	ip, ip, r0
 8006ca4:	ea8c 0c02 	eor.w	ip, ip, r2
        if (r > 6) {
 8006ca8:	f040 80e8 	bne.w	8006e7c <wc_AesEncrypt+0xcfc>
            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
 8006cac:	fa5f f08c 	uxtb.w	r0, ip
 8006cb0:	0e0a      	lsrs	r2, r1, #24
 8006cb2:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006cbe:	ea82 0e00 	eor.w	lr, r2, r0
 8006cc2:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8006cc6:	ea8e 0e02 	eor.w	lr, lr, r2
 8006cca:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8006cce:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006cd2:	b2c8      	uxtb	r0, r1
 8006cd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cd8:	ea8e 0e02 	eor.w	lr, lr, r2
 8006cdc:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8006ce0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006ce4:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006cf0:	ea8e 0e02 	eor.w	lr, lr, r2
 8006cf4:	0e2a      	lsrs	r2, r5, #24
 8006cf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cfa:	ea82 0900 	eor.w	r9, r2, r0
 8006cfe:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8006d02:	ea89 0902 	eor.w	r9, r9, r2
 8006d06:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8006d0a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006d0e:	b2e8      	uxtb	r0, r5
 8006d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d14:	ea89 0902 	eor.w	r9, r9, r2
 8006d18:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8006d1c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006d20:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d28:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006d2c:	ea89 0902 	eor.w	r9, r9, r2
 8006d30:	0e32      	lsrs	r2, r6, #24
 8006d32:	b2f6      	uxtb	r6, r6
 8006d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d38:	4050      	eors	r0, r2
 8006d3a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8006d3e:	4042      	eors	r2, r0
 8006d40:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8006d44:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006d48:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8006d4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006d50:	4042      	eors	r2, r0
 8006d52:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006d56:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006d5a:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8006d5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006d62:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006d66:	4042      	eors	r2, r0
 8006d68:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006d6c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8006d70:	ea80 0c06 	eor.w	ip, r0, r6
 8006d74:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006d78:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8006d7c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8006d80:	ea8c 0c00 	eor.w	ip, ip, r0
 8006d84:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8006d88:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006d8c:	ea8c 0c00 	eor.w	ip, ip, r0
 8006d90:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d94:	ea8c 0c00 	eor.w	ip, ip, r0
 8006d98:	fa5f f08c 	uxtb.w	r0, ip
 8006d9c:	ea4f 611e 	mov.w	r1, lr, lsr #24
 8006da0:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006da4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006da8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006dac:	4048      	eors	r0, r1
 8006dae:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8006db2:	4041      	eors	r1, r0
 8006db4:	f3c9 4007 	ubfx	r0, r9, #16, #8
 8006db8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006dbc:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8006dc0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006dc4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8006dc8:	4041      	eors	r1, r0
 8006dca:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8006dce:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006dd2:	0e16      	lsrs	r6, r2, #24
 8006dd4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006dd8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006ddc:	4041      	eors	r1, r0
 8006dde:	fa5f f08e 	uxtb.w	r0, lr
 8006de2:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006de6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006dea:	4068      	eors	r0, r5
 8006dec:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
 8006df0:	4045      	eors	r5, r0
 8006df2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006df6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e00:	4045      	eors	r5, r0
 8006e02:	f3cc 2007 	ubfx	r0, ip, #8, #8
 8006e06:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006e0a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006e0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e12:	4045      	eors	r5, r0
 8006e14:	fa5f f089 	uxtb.w	r0, r9
 8006e18:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006e1c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8006e20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e24:	4046      	eors	r6, r0
 8006e26:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8006e2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e2e:	4046      	eors	r6, r0
 8006e30:	f3cc 4007 	ubfx	r0, ip, #16, #8
 8006e34:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8006e38:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8006e3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e40:	4046      	eors	r6, r0
 8006e42:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8006e46:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8006e4a:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8006e4e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e52:	4046      	eors	r6, r0
 8006e54:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006e58:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8006e5c:	ea80 0c02 	eor.w	ip, r0, r2
 8006e60:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8006e64:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8006e68:	ea8c 0c00 	eor.w	ip, ip, r0
 8006e6c:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8006e70:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8006e74:	ea8c 0c00 	eor.w	ip, ip, r0
 8006e78:	ea8c 0c02 	eor.w	ip, ip, r2
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8006e7c:	b2ca      	uxtb	r2, r1
    rk += r * 8;
 8006e7e:	0178      	lsls	r0, r7, #5
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8006e80:	f502 7280 	add.w	r2, r2, #256	; 0x100
    rk += r * 8;
 8006e84:	eb04 1747 	add.w	r7, r4, r7, lsl #5
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8006e88:	f813 9022 	ldrb.w	r9, [r3, r2, lsl #2]
 8006e8c:	687a      	ldr	r2, [r7, #4]
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8006e8e:	5824      	ldr	r4, [r4, r0]
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8006e90:	ea89 0902 	eor.w	r9, r9, r2
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
 8006e94:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8006e98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e9c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8006ea0:	ea89 020e 	eor.w	r2, r9, lr
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8006ea4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8006ea8:	ea4f 6915 	mov.w	r9, r5, lsr #24
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8006eac:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8006eb0:	f509 7900 	add.w	r9, r9, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8006eb4:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8006eb8:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8006ebc:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8006ec0:	f009 497f 	and.w	r9, r9, #4278190080	; 0xff000000
 8006ec4:	ea4e 0e09 	orr.w	lr, lr, r9
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8006ec8:	ea82 090e 	eor.w	r9, r2, lr
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8006ecc:	b2ea      	uxtb	r2, r5
 8006ece:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006ed2:	f813 a022 	ldrb.w	sl, [r3, r2, lsl #2]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8006ed8:	68ff      	ldr	r7, [r7, #12]
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8006eda:	ea8a 0a02 	eor.w	sl, sl, r2
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
 8006ede:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8006ee2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ee6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8006eea:	ea8a 020e 	eor.w	r2, sl, lr
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8006eee:	f3cc 4e07 	ubfx	lr, ip, #16, #8
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8006ef2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8006ef6:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8006efa:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8006efe:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8006f02:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8006f06:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8006f0a:	f00a 4a7f 	and.w	sl, sl, #4278190080	; 0xff000000
 8006f0e:	ea4e 0e0a 	orr.w	lr, lr, sl
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8006f12:	ea82 0a0e 	eor.w	sl, r2, lr
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8006f16:	b2f2      	uxtb	r2, r6
 8006f18:	f502 7280 	add.w	r2, r2, #256	; 0x100
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8006f1c:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8006f20:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8006f24:	407a      	eors	r2, r7
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 8006f26:	f3c5 2707 	ubfx	r7, r5, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8006f2a:	f50e 7e00 	add.w	lr, lr, #512	; 0x200
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 8006f2e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8006f32:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 8006f36:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8006f3a:	4057      	eors	r7, r2
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8006f3c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8006f40:	f502 7240 	add.w	r2, r2, #768	; 0x300
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8006f44:	fa5f fc8c 	uxtb.w	ip, ip
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8006f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8006f4c:	f00e 4e7f 	and.w	lr, lr, #4278190080	; 0xff000000
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8006f50:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8006f54:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8006f58:	f3c6 2607 	ubfx	r6, r6, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8006f5c:	ea42 020e 	orr.w	r2, r2, lr
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8006f60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 8006f64:	407a      	eors	r2, r7
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8006f66:	f3c5 4507 	ubfx	r5, r5, #16, #8
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8006f6a:	f813 702c 	ldrb.w	r7, [r3, ip, lsl #2]
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8006f6e:	0e09      	lsrs	r1, r1, #24
 8006f70:	f501 7100 	add.w	r1, r1, #512	; 0x200
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8006f74:	f505 7540 	add.w	r5, r5, #768	; 0x300
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8006f78:	407c      	eors	r4, r7
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8006f7a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8006f7e:	4060      	eors	r0, r4
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8006f80:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8006f84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8006f88:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8006f8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f90:	4323      	orrs	r3, r4
    s0 = ByteReverseWord32(s0);
 8006f92:	4058      	eors	r0, r3
 8006f94:	f7ff f884 	bl	80060a0 <ByteReverseWord32>
 8006f98:	9000      	str	r0, [sp, #0]
    s1 = ByteReverseWord32(s1);
 8006f9a:	4648      	mov	r0, r9
 8006f9c:	f7ff f880 	bl	80060a0 <ByteReverseWord32>
 8006fa0:	9001      	str	r0, [sp, #4]
    s2 = ByteReverseWord32(s2);
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f7ff f87c 	bl	80060a0 <ByteReverseWord32>
 8006fa8:	9002      	str	r0, [sp, #8]
    s3 = ByteReverseWord32(s3);
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7ff f878 	bl	80060a0 <ByteReverseWord32>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8006fb0:	2204      	movs	r2, #4
    s3 = ByteReverseWord32(s3);
 8006fb2:	9003      	str	r0, [sp, #12]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8006fb4:	4669      	mov	r1, sp
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f014 f812 	bl	801afe0 <memcpy>
    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	eb0d 0102 	add.w	r1, sp, r2
 8006fc2:	eb08 0002 	add.w	r0, r8, r2
 8006fc6:	f014 f80b 	bl	801afe0 <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 8006fca:	2204      	movs	r2, #4
 8006fcc:	a902      	add	r1, sp, #8
 8006fce:	f108 0008 	add.w	r0, r8, #8
 8006fd2:	f014 f805 	bl	801afe0 <memcpy>
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	a903      	add	r1, sp, #12
 8006fda:	f108 000c 	add.w	r0, r8, #12
 8006fde:	f013 ffff 	bl	801afe0 <memcpy>
    return 0;
 8006fe2:	2000      	movs	r0, #0
} /* wc_AesEncrypt */
 8006fe4:	b004      	add	sp, #16
 8006fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_FUNC_ARG;
 8006fea:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8006fee:	e7f9      	b.n	8006fe4 <wc_AesEncrypt+0xe64>
        return KEYUSAGE_E;
 8006ff0:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 8006ff4:	e7f6      	b.n	8006fe4 <wc_AesEncrypt+0xe64>
 8006ff6:	bf00      	nop

08006ff8 <GMULT>:

#endif /* WOLFSSL_AESNI */

#if defined(GCM_SMALL)
static void GMULT(byte* X, byte* Y)
{
 8006ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffc:	b088      	sub	sp, #32
 8006ffe:	460c      	mov	r4, r1
 8007000:	4606      	mov	r6, r0
    byte Z[AES_BLOCK_SIZE];
    byte V[AES_BLOCK_SIZE];
    int i, j;

    XMEMSET(Z, 0, AES_BLOCK_SIZE);
 8007002:	2210      	movs	r2, #16
 8007004:	2100      	movs	r1, #0
 8007006:	4668      	mov	r0, sp
 8007008:	f014 f812 	bl	801b030 <memset>
    XMEMCPY(V, X, AES_BLOCK_SIZE);
 800700c:	2210      	movs	r2, #16
 800700e:	4631      	mov	r1, r6
 8007010:	eb0d 0002 	add.w	r0, sp, r2
 8007014:	f013 ffe4 	bl	801afe0 <memcpy>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
 8007018:	1e67      	subs	r7, r4, #1
 800701a:	340f      	adds	r4, #15
    {
        byte y = Y[i];
 800701c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8007020:	f04f 0808 	mov.w	r8, #8
        for (j = 0; j < 8; j++)
        {
            if (y & 0x80) {
 8007024:	062b      	lsls	r3, r5, #24
 8007026:	d505      	bpl.n	8007034 <GMULT+0x3c>
                xorbuf(Z, V, AES_BLOCK_SIZE);
 8007028:	2210      	movs	r2, #16
 800702a:	eb0d 0102 	add.w	r1, sp, r2
 800702e:	4668      	mov	r0, sp
 8007030:	f7ff f86b 	bl	800610a <xorbuf>
    byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
 8007034:	f89d 301f 	ldrb.w	r3, [sp, #31]
    int carryIn = 0;
 8007038:	2100      	movs	r1, #0
    byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
 800703a:	f343 0300 	sbfx	r3, r3, #0, #1
 800703e:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 8007042:	a804      	add	r0, sp, #16
 8007044:	460a      	mov	r2, r1
        int carryOut = (x[i] & 0x01) << 7;
 8007046:	f890 e000 	ldrb.w	lr, [r0]
 800704a:	468c      	mov	ip, r1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 800704c:	3201      	adds	r2, #1
        int carryOut = (x[i] & 0x01) << 7;
 800704e:	ea4f 11ce 	mov.w	r1, lr, lsl #7
        x[i] = (byte) ((x[i] >> 1) | carryIn);
 8007052:	ea4c 0c5e 	orr.w	ip, ip, lr, lsr #1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 8007056:	2a10      	cmp	r2, #16
        x[i] = (byte) ((x[i] >> 1) | carryIn);
 8007058:	f800 cb01 	strb.w	ip, [r0], #1
        int carryOut = (x[i] & 0x01) << 7;
 800705c:	b2c9      	uxtb	r1, r1
    for (i = 0; i < AES_BLOCK_SIZE; i++) {
 800705e:	d1f2      	bne.n	8007046 <GMULT+0x4e>
    x[0] ^= borrow;
 8007060:	f89d 1010 	ldrb.w	r1, [sp, #16]
            }

            RIGHTSHIFTX(V);
            y = y << 1;
 8007064:	006d      	lsls	r5, r5, #1
    x[0] ^= borrow;
 8007066:	404b      	eors	r3, r1
        for (j = 0; j < 8; j++)
 8007068:	f1b8 0801 	subs.w	r8, r8, #1
    x[0] ^= borrow;
 800706c:	f88d 3010 	strb.w	r3, [sp, #16]
            y = y << 1;
 8007070:	b2ed      	uxtb	r5, r5
        for (j = 0; j < 8; j++)
 8007072:	d1d7      	bne.n	8007024 <GMULT+0x2c>
    for (i = 0; i < AES_BLOCK_SIZE; i++)
 8007074:	42bc      	cmp	r4, r7
 8007076:	d1d1      	bne.n	800701c <GMULT+0x24>
        }
    }
    XMEMCPY(X, Z, AES_BLOCK_SIZE);
 8007078:	4669      	mov	r1, sp
 800707a:	4630      	mov	r0, r6
 800707c:	f013 ffb0 	bl	801afe0 <memcpy>
}
 8007080:	b008      	add	sp, #32
 8007082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007086 <wc_AesSetIV>:
{
 8007086:	b510      	push	{r4, lr}
    if (aes == NULL)
 8007088:	b148      	cbz	r0, 800709e <wc_AesSetIV+0x18>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 800708a:	30f8      	adds	r0, #248	; 0xf8
 800708c:	2210      	movs	r2, #16
    if (iv)
 800708e:	b119      	cbz	r1, 8007098 <wc_AesSetIV+0x12>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 8007090:	f013 ffa6 	bl	801afe0 <memcpy>
    return 0;
 8007094:	2000      	movs	r0, #0
}
 8007096:	bd10      	pop	{r4, pc}
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
 8007098:	f013 ffca 	bl	801b030 <memset>
 800709c:	e7fa      	b.n	8007094 <wc_AesSetIV+0xe>
        return BAD_FUNC_ARG;
 800709e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80070a2:	e7f8      	b.n	8007096 <wc_AesSetIV+0x10>

080070a4 <wc_AesSetKey>:
    {
 80070a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80070ac:	4691      	mov	r9, r2
 80070ae:	469b      	mov	fp, r3
        if (aes == NULL) {
 80070b0:	4605      	mov	r5, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f000 821d 	beq.w	80074f2 <wc_AesSetKey+0x44e>
        if (keylen > sizeof(aes->key)) {
 80070b8:	2af0      	cmp	r2, #240	; 0xf0
 80070ba:	f200 821a 	bhi.w	80074f2 <wc_AesSetKey+0x44e>
            if (keylen != 16 && keylen != 24 && keylen != 32) {
 80070be:	f022 0308 	bic.w	r3, r2, #8
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d002      	beq.n	80070cc <wc_AesSetKey+0x28>
 80070c6:	2a20      	cmp	r2, #32
 80070c8:	f040 8213 	bne.w	80074f2 <wc_AesSetKey+0x44e>
        aes->rounds = (keylen/4) + 6;
 80070cc:	ea4f 0a99 	mov.w	sl, r9, lsr #2
 80070d0:	f10a 0306 	add.w	r3, sl, #6
 80070d4:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
        aes->keylen = (int)keylen;
 80070d8:	f8c5 90f4 	str.w	r9, [r5, #244]	; 0xf4
        XMEMCPY(rk, userKey, keylen);
 80070dc:	464a      	mov	r2, r9
 80070de:	4628      	mov	r0, r5
 80070e0:	f013 ff7e 	bl	801afe0 <memcpy>
        rk = aes->key;
 80070e4:	462c      	mov	r4, r5
        for (i = 0; i < count; i++)
 80070e6:	462e      	mov	r6, r5
 80070e8:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
 80070ec:	462b      	mov	r3, r5
 80070ee:	459a      	cmp	sl, r3
 80070f0:	d149      	bne.n	8007186 <wc_AesSetKey+0xe2>
        switch (keylen) {
 80070f2:	f1b9 0f18 	cmp.w	r9, #24
 80070f6:	f000 80bb 	beq.w	8007270 <wc_AesSetKey+0x1cc>
 80070fa:	f1b9 0f20 	cmp.w	r9, #32
 80070fe:	d048      	beq.n	8007192 <wc_AesSetKey+0xee>
 8007100:	f1b9 0f10 	cmp.w	r9, #16
 8007104:	f040 81f5 	bne.w	80074f2 <wc_AesSetKey+0x44e>
 8007108:	f8df c210 	ldr.w	ip, [pc, #528]	; 800731c <wc_AesSetKey+0x278>
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800710c:	4884      	ldr	r0, [pc, #528]	; (8007320 <wc_AesSetKey+0x27c>)
 800710e:	f105 0e90 	add.w	lr, r5, #144	; 0x90
                temp  = rk[3];
 8007112:	68e2      	ldr	r2, [r4, #12]
                    rcon[i];
 8007114:	f85c 9b04 	ldr.w	r9, [ip], #4
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8007118:	b2d3      	uxtb	r3, r2
                if (++i == 10)
 800711a:	4574      	cmp	r4, lr
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800711c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8007120:	6823      	ldr	r3, [r4, #0]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8007122:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8007126:	ea89 0303 	eor.w	r3, r9, r3
 800712a:	ea83 0301 	eor.w	r3, r3, r1
 800712e:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8007132:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007136:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 800713a:	ea83 0301 	eor.w	r3, r3, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800713e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8007142:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007146:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800714a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800714e:	ea83 0301 	eor.w	r3, r3, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8007152:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007156:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800715a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800715e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8007162:	ea83 0301 	eor.w	r3, r3, r1
                rk[5] = rk[1] ^ rk[4];
 8007166:	6861      	ldr	r1, [r4, #4]
                rk[4] = rk[0] ^
 8007168:	6123      	str	r3, [r4, #16]
                rk[5] = rk[1] ^ rk[4];
 800716a:	ea83 0301 	eor.w	r3, r3, r1
                rk[6] = rk[2] ^ rk[5];
 800716e:	68a1      	ldr	r1, [r4, #8]
                rk[5] = rk[1] ^ rk[4];
 8007170:	6163      	str	r3, [r4, #20]
                rk[6] = rk[2] ^ rk[5];
 8007172:	ea83 0301 	eor.w	r3, r3, r1
 8007176:	61a3      	str	r3, [r4, #24]
                rk[7] = rk[3] ^ rk[6];
 8007178:	ea83 0302 	eor.w	r3, r3, r2
 800717c:	61e3      	str	r3, [r4, #28]
                if (++i == 10)
 800717e:	f000 80ba 	beq.w	80072f6 <wc_AesSetKey+0x252>
                rk += 4;
 8007182:	3410      	adds	r4, #16
                temp  = rk[3];
 8007184:	e7c5      	b.n	8007112 <wc_AesSetKey+0x6e>
            out[i] = ByteReverseWord32(in[i]);
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	f7fe ff8a 	bl	80060a0 <ByteReverseWord32>
 800718c:	f843 0b04 	str.w	r0, [r3], #4
        for (i = 0; i < count; i++)
 8007190:	e7ad      	b.n	80070ee <wc_AesSetKey+0x4a>
 8007192:	4b62      	ldr	r3, [pc, #392]	; (800731c <wc_AesSetKey+0x278>)
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8007194:	4a62      	ldr	r2, [pc, #392]	; (8007320 <wc_AesSetKey+0x27c>)
 8007196:	f105 0cc0 	add.w	ip, r5, #192	; 0xc0
                temp = rk[ 7];
 800719a:	69e0      	ldr	r0, [r4, #28]
                    rcon[i];
 800719c:	f853 9b04 	ldr.w	r9, [r3], #4
                rk[ 9] = rk[ 1] ^ rk[ 8];
 80071a0:	6867      	ldr	r7, [r4, #4]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 80071a2:	b2c1      	uxtb	r1, r0
                if (++i == 7)
 80071a4:	4564      	cmp	r4, ip
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 80071a6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80071aa:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 80071ae:	6821      	ldr	r1, [r4, #0]
 80071b0:	ea89 0101 	eor.w	r1, r9, r1
 80071b4:	ea8e 0e01 	eor.w	lr, lr, r1
 80071b8:	ea4f 6110 	mov.w	r1, r0, lsr #24
 80071bc:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80071c0:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 80071c4:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 80071c8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80071cc:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80071d0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80071d4:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 80071d8:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 80071dc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80071e0:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80071e4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80071e8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 80071ec:	ea8e 0101 	eor.w	r1, lr, r1
                rk[ 8] = rk[ 0] ^
 80071f0:	6221      	str	r1, [r4, #32]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 80071f2:	ea81 0107 	eor.w	r1, r1, r7
                rk[10] = rk[ 2] ^ rk[ 9];
 80071f6:	68a7      	ldr	r7, [r4, #8]
                rk[ 9] = rk[ 1] ^ rk[ 8];
 80071f8:	6261      	str	r1, [r4, #36]	; 0x24
                rk[10] = rk[ 2] ^ rk[ 9];
 80071fa:	ea81 0107 	eor.w	r1, r1, r7
                rk[11] = rk[ 3] ^ rk[10];
 80071fe:	68e7      	ldr	r7, [r4, #12]
                rk[10] = rk[ 2] ^ rk[ 9];
 8007200:	62a1      	str	r1, [r4, #40]	; 0x28
                rk[11] = rk[ 3] ^ rk[10];
 8007202:	ea81 0e07 	eor.w	lr, r1, r7
 8007206:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
                if (++i == 7)
 800720a:	d074      	beq.n	80072f6 <wc_AesSetKey+0x252>
                    (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 800720c:	f3ce 4107 	ubfx	r1, lr, #16, #8
 8007210:	f501 7140 	add.w	r1, r1, #768	; 0x300
                rk[13] = rk[ 5] ^ rk[12];
 8007214:	6967      	ldr	r7, [r4, #20]
                    (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 8007216:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800721a:	f401 097f 	and.w	r9, r1, #16711680	; 0xff0000
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 800721e:	f3ce 2107 	ubfx	r1, lr, #8, #8
                rk += 8;
 8007222:	3420      	adds	r4, #32
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 8007224:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8007228:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800722c:	ea49 0901 	orr.w	r9, r9, r1
 8007230:	f854 1c10 	ldr.w	r1, [r4, #-16]
 8007234:	ea89 0901 	eor.w	r9, r9, r1
                    (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
 8007238:	ea4f 611e 	mov.w	r1, lr, lsr #24
 800723c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007240:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8007244:	f001 4a7f 	and.w	sl, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
 8007248:	fa5f f18e 	uxtb.w	r1, lr
 800724c:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007250:	f812 e021 	ldrb.w	lr, [r2, r1, lsl #2]
                    (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 8007254:	ea4a 0e0e 	orr.w	lr, sl, lr
 8007258:	ea89 010e 	eor.w	r1, r9, lr
                rk[12] = rk[ 4] ^
 800725c:	6121      	str	r1, [r4, #16]
                rk[13] = rk[ 5] ^ rk[12];
 800725e:	4079      	eors	r1, r7
                rk[14] = rk[ 6] ^ rk[13];
 8007260:	f854 7c08 	ldr.w	r7, [r4, #-8]
                rk[13] = rk[ 5] ^ rk[12];
 8007264:	6161      	str	r1, [r4, #20]
                rk[14] = rk[ 6] ^ rk[13];
 8007266:	4079      	eors	r1, r7
 8007268:	61a1      	str	r1, [r4, #24]
                rk[15] = rk[ 7] ^ rk[14];
 800726a:	4041      	eors	r1, r0
 800726c:	61e1      	str	r1, [r4, #28]
                temp = rk[ 7];
 800726e:	e794      	b.n	800719a <wc_AesSetKey+0xf6>
 8007270:	482a      	ldr	r0, [pc, #168]	; (800731c <wc_AesSetKey+0x278>)
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8007272:	4a2b      	ldr	r2, [pc, #172]	; (8007320 <wc_AesSetKey+0x27c>)
 8007274:	f105 0ca8 	add.w	ip, r5, #168	; 0xa8
                temp = rk[ 5];
 8007278:	6963      	ldr	r3, [r4, #20]
                    rcon[i];
 800727a:	f850 9b04 	ldr.w	r9, [r0], #4
                rk[ 7] = rk[ 1] ^ rk[ 6];
 800727e:	6867      	ldr	r7, [r4, #4]
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8007280:	b2d9      	uxtb	r1, r3
                if (++i == 8)
 8007282:	4564      	cmp	r4, ip
                    (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8007284:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8007288:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800728c:	6821      	ldr	r1, [r4, #0]
 800728e:	ea89 0101 	eor.w	r1, r9, r1
 8007292:	ea8e 0e01 	eor.w	lr, lr, r1
 8007296:	ea4f 6113 	mov.w	r1, r3, lsr #24
 800729a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800729e:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 80072a2:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 80072a6:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80072aa:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80072ae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80072b2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 80072b6:	ea8e 0e01 	eor.w	lr, lr, r1
                    (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 80072ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80072be:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80072c2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80072c6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
                    (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 80072ca:	ea8e 0101 	eor.w	r1, lr, r1
                rk[ 6] = rk[ 0] ^
 80072ce:	61a1      	str	r1, [r4, #24]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 80072d0:	ea81 0107 	eor.w	r1, r1, r7
                rk[ 8] = rk[ 2] ^ rk[ 7];
 80072d4:	68a7      	ldr	r7, [r4, #8]
                rk[ 7] = rk[ 1] ^ rk[ 6];
 80072d6:	61e1      	str	r1, [r4, #28]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 80072d8:	ea81 0107 	eor.w	r1, r1, r7
                rk[ 9] = rk[ 3] ^ rk[ 8];
 80072dc:	68e7      	ldr	r7, [r4, #12]
                rk[ 8] = rk[ 2] ^ rk[ 7];
 80072de:	6221      	str	r1, [r4, #32]
                rk[ 9] = rk[ 3] ^ rk[ 8];
 80072e0:	ea81 0107 	eor.w	r1, r1, r7
 80072e4:	6261      	str	r1, [r4, #36]	; 0x24
                if (++i == 8)
 80072e6:	d006      	beq.n	80072f6 <wc_AesSetKey+0x252>
                rk[10] = rk[ 4] ^ rk[ 9];
 80072e8:	6927      	ldr	r7, [r4, #16]
 80072ea:	4079      	eors	r1, r7
 80072ec:	62a1      	str	r1, [r4, #40]	; 0x28
                rk[11] = rk[ 5] ^ rk[10];
 80072ee:	4059      	eors	r1, r3
 80072f0:	62e1      	str	r1, [r4, #44]	; 0x2c
                rk += 6;
 80072f2:	3418      	adds	r4, #24
                temp = rk[ 5];
 80072f4:	e7c0      	b.n	8007278 <wc_AesSetKey+0x1d4>
            *w++ = 0;
        }
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 80072f6:	2200      	movs	r2, #0
        if (dir == AES_DECRYPTION) {
 80072f8:	f1b8 0f01 	cmp.w	r8, #1
 80072fc:	f88d 2004 	strb.w	r2, [sp, #4]
 8007300:	f88d 2005 	strb.w	r2, [sp, #5]
 8007304:	f88d 2006 	strb.w	r2, [sp, #6]
 8007308:	f88d 2007 	strb.w	r2, [sp, #7]
 800730c:	d00a      	beq.n	8007324 <wc_AesSetKey+0x280>
        ret = wc_AesSetIV(aes, iv);
 800730e:	4659      	mov	r1, fp
 8007310:	4628      	mov	r0, r5
    } /* wc_AesSetKey() */
 8007312:	b003      	add	sp, #12
 8007314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = wc_AesSetIV(aes, iv);
 8007318:	f7ff beb5 	b.w	8007086 <wc_AesSetIV>
 800731c:	08021df8 	.word	0x08021df8
 8007320:	08020df8 	.word	0x08020df8
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 8007324:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8007328:	4629      	mov	r1, r5
 800732a:	009c      	lsls	r4, r3, #2
 800732c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8007330:	1aa0      	subs	r0, r4, r2
 8007332:	4282      	cmp	r2, r0
 8007334:	f101 0110 	add.w	r1, r1, #16
 8007338:	f1a3 0310 	sub.w	r3, r3, #16
 800733c:	f0c0 80bf 	bcc.w	80074be <wc_AesSetKey+0x41a>
 8007340:	2300      	movs	r3, #0
 8007342:	f88d 3004 	strb.w	r3, [sp, #4]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 8007346:	4a6d      	ldr	r2, [pc, #436]	; (80074fc <wc_AesSetKey+0x458>)
 8007348:	f88d 3005 	strb.w	r3, [sp, #5]
 800734c:	f88d 3006 	strb.w	r3, [sp, #6]
 8007350:	f88d 3007 	strb.w	r3, [sp, #7]
 8007354:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <wc_AesSetKey+0x45c>)
            for (i = 1; i < aes->rounds; i++) {
 8007356:	2001      	movs	r0, #1
 8007358:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 800735c:	4288      	cmp	r0, r1
 800735e:	d2d6      	bcs.n	800730e <wc_AesSetKey+0x26a>
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 8007360:	6931      	ldr	r1, [r6, #16]
 8007362:	0e0c      	lsrs	r4, r1, #24
 8007364:	f504 7480 	add.w	r4, r4, #256	; 0x100
            for (i = 1; i < aes->rounds; i++) {
 8007368:	3001      	adds	r0, #1
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 800736a:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 800736e:	b2cc      	uxtb	r4, r1
 8007370:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8007374:	3610      	adds	r6, #16
 8007376:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800737a:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 800737e:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 8007382:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8007386:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800738a:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800738e:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 8007392:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007396:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800739a:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 800739e:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 80073a2:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 80073a6:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80073aa:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80073ae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80073b2:	ea84 040c 	eor.w	r4, r4, ip
 80073b6:	4061      	eors	r1, r4
                rk[0] =
 80073b8:	6031      	str	r1, [r6, #0]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
 80073ba:	6871      	ldr	r1, [r6, #4]
 80073bc:	0e0c      	lsrs	r4, r1, #24
 80073be:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80073c2:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 80073c6:	b2cc      	uxtb	r4, r1
 80073c8:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80073cc:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 80073d0:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 80073d4:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 80073d8:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80073dc:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 80073e0:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 80073e4:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 80073e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80073ec:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 80073f0:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 80073f4:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 80073f8:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 80073fc:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007400:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8007404:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007408:	ea84 040c 	eor.w	r4, r4, ip
 800740c:	4061      	eors	r1, r4
                rk[1] =
 800740e:	6071      	str	r1, [r6, #4]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
 8007410:	68b1      	ldr	r1, [r6, #8]
 8007412:	0e0c      	lsrs	r4, r1, #24
 8007414:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8007418:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 800741c:	b2cc      	uxtb	r4, r1
 800741e:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8007422:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 8007426:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 800742a:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800742e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8007432:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 8007436:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800743a:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800743e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007442:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 8007446:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 800744a:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 800744e:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 8007452:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007456:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800745a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800745e:	ea84 040c 	eor.w	r4, r4, ip
 8007462:	4061      	eors	r1, r4
                rk[2] =
 8007464:	60b1      	str	r1, [r6, #8]
                    GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
 8007466:	68f1      	ldr	r1, [r6, #12]
 8007468:	0e0c      	lsrs	r4, r1, #24
 800746a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800746e:	f812 e024 	ldrb.w	lr, [r2, r4, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 8007472:	b2cc      	uxtb	r4, r1
 8007474:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8007478:	f812 c024 	ldrb.w	ip, [r2, r4, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 800747c:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
                    GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 8007480:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8007484:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8007488:	ea84 040c 	eor.w	r4, r4, ip
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 800748c:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 8007490:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8007494:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007498:	f501 7180 	add.w	r1, r1, #256	; 0x100
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 800749c:	f812 c02c 	ldrb.w	ip, [r2, ip, lsl #2]
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 80074a0:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
                    GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 80074a4:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
                    GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 80074a8:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80074ac:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80074b0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80074b4:	ea84 040c 	eor.w	r4, r4, ip
 80074b8:	4061      	eors	r1, r4
                rk[3] =
 80074ba:	60f1      	str	r1, [r6, #12]
            for (i = 1; i < aes->rounds; i++) {
 80074bc:	e74c      	b.n	8007358 <wc_AesSetKey+0x2b4>
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 80074be:	f851 0c10 	ldr.w	r0, [r1, #-16]
 80074c2:	691f      	ldr	r7, [r3, #16]
 80074c4:	f841 7c10 	str.w	r7, [r1, #-16]
 80074c8:	6118      	str	r0, [r3, #16]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 80074ca:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 80074ce:	695f      	ldr	r7, [r3, #20]
 80074d0:	f841 7c0c 	str.w	r7, [r1, #-12]
 80074d4:	6158      	str	r0, [r3, #20]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 80074d6:	f851 0c08 	ldr.w	r0, [r1, #-8]
 80074da:	699f      	ldr	r7, [r3, #24]
 80074dc:	f841 7c08 	str.w	r7, [r1, #-8]
 80074e0:	6198      	str	r0, [r3, #24]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 80074e2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80074e6:	69df      	ldr	r7, [r3, #28]
 80074e8:	f841 7c04 	str.w	r7, [r1, #-4]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 80074ec:	3204      	adds	r2, #4
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 80074ee:	61d8      	str	r0, [r3, #28]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 80074f0:	e71e      	b.n	8007330 <wc_AesSetKey+0x28c>
    } /* wc_AesSetKey() */
 80074f2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80074f6:	b003      	add	sp, #12
 80074f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fc:	08020df8 	.word	0x08020df8
 8007500:	0801fcf8 	.word	0x0801fcf8

08007504 <wc_AesCbcEncrypt>:
    {
 8007504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007508:	460d      	mov	r5, r1
 800750a:	4616      	mov	r6, r2
        if (aes == NULL || out == NULL || in == NULL) {
 800750c:	4607      	mov	r7, r0
 800750e:	b300      	cbz	r0, 8007552 <wc_AesCbcEncrypt+0x4e>
 8007510:	b1f9      	cbz	r1, 8007552 <wc_AesCbcEncrypt+0x4e>
 8007512:	b1f2      	cbz	r2, 8007552 <wc_AesCbcEncrypt+0x4e>
        if (sz == 0) {
 8007514:	b913      	cbnz	r3, 800751c <wc_AesCbcEncrypt+0x18>
            return 0;
 8007516:	2000      	movs	r0, #0
    } /* wc_AesCbcEncrypt */
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (blocks--) {
 800751c:	f023 030f 	bic.w	r3, r3, #15
 8007520:	18cc      	adds	r4, r1, r3
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 8007522:	f100 08f8 	add.w	r8, r0, #248	; 0xf8
        while (blocks--) {
 8007526:	42a5      	cmp	r5, r4
 8007528:	d0f5      	beq.n	8007516 <wc_AesCbcEncrypt+0x12>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 800752a:	2210      	movs	r2, #16
 800752c:	4631      	mov	r1, r6
 800752e:	4640      	mov	r0, r8
 8007530:	f7fe fdeb 	bl	800610a <xorbuf>
            ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
 8007534:	4642      	mov	r2, r8
 8007536:	4641      	mov	r1, r8
 8007538:	4638      	mov	r0, r7
 800753a:	f7fe fe21 	bl	8006180 <wc_AesEncrypt>
            if (ret != 0)
 800753e:	2800      	cmp	r0, #0
 8007540:	d1ea      	bne.n	8007518 <wc_AesCbcEncrypt+0x14>
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
 8007542:	4628      	mov	r0, r5
 8007544:	2210      	movs	r2, #16
 8007546:	4641      	mov	r1, r8
 8007548:	f013 fd4a 	bl	801afe0 <memcpy>
            out += AES_BLOCK_SIZE;
 800754c:	3510      	adds	r5, #16
            in  += AES_BLOCK_SIZE;
 800754e:	3610      	adds	r6, #16
 8007550:	e7e9      	b.n	8007526 <wc_AesCbcEncrypt+0x22>
            return BAD_FUNC_ARG;
 8007552:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8007556:	e7df      	b.n	8007518 <wc_AesCbcEncrypt+0x14>

08007558 <wc_AesCbcDecrypt>:
    {
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	b089      	sub	sp, #36	; 0x24
 800755e:	4688      	mov	r8, r1
 8007560:	9201      	str	r2, [sp, #4]
        if (aes == NULL || out == NULL || in == NULL) {
 8007562:	4605      	mov	r5, r0
 8007564:	2800      	cmp	r0, #0
 8007566:	f000 8724 	beq.w	80083b2 <wc_AesCbcDecrypt+0xe5a>
 800756a:	2900      	cmp	r1, #0
 800756c:	f000 8721 	beq.w	80083b2 <wc_AesCbcDecrypt+0xe5a>
 8007570:	2a00      	cmp	r2, #0
 8007572:	f000 871e 	beq.w	80083b2 <wc_AesCbcDecrypt+0xe5a>
        if (sz == 0) {
 8007576:	b91b      	cbnz	r3, 8007580 <wc_AesCbcDecrypt+0x28>
            return 0;
 8007578:	2000      	movs	r0, #0
    }
 800757a:	b009      	add	sp, #36	; 0x24
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blocks = sz / AES_BLOCK_SIZE;
 8007580:	091a      	lsrs	r2, r3, #4
        if (sz % AES_BLOCK_SIZE) {
 8007582:	071b      	lsls	r3, r3, #28
 8007584:	f040 8715 	bne.w	80083b2 <wc_AesCbcDecrypt+0xe5a>
 8007588:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 800758c:	9303      	str	r3, [sp, #12]
                       DEC_ROUND_T_S( 0);
 800758e:	4c03      	ldr	r4, [pc, #12]	; (800759c <wc_AesCbcDecrypt+0x44>)
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 8007590:	4f03      	ldr	r7, [pc, #12]	; (80075a0 <wc_AesCbcDecrypt+0x48>)
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 8007592:	f500 7384 	add.w	r3, r0, #264	; 0x108
 8007596:	9302      	str	r3, [sp, #8]
 8007598:	e004      	b.n	80075a4 <wc_AesCbcDecrypt+0x4c>
 800759a:	bf00      	nop
 800759c:	0801fcf8 	.word	0x0801fcf8
 80075a0:	08020cf8 	.word	0x08020cf8
        while (blocks--) {
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	4598      	cmp	r8, r3
 80075a8:	d0e6      	beq.n	8007578 <wc_AesCbcDecrypt+0x20>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 80075aa:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 80075ae:	2210      	movs	r2, #16
 80075b0:	f013 fd16 	bl	801afe0 <memcpy>
    r = aes->rounds >> 1;
 80075b4:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80075b8:	ea4f 0a53 	mov.w	sl, r3, lsr #1
    if (r > 7 || r == 0) {
 80075bc:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	f200 86f2 	bhi.w	80083aa <wc_AesCbcDecrypt+0xe52>
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 80075c6:	9902      	ldr	r1, [sp, #8]
 80075c8:	2204      	movs	r2, #4
 80075ca:	a804      	add	r0, sp, #16
 80075cc:	f013 fd08 	bl	801afe0 <memcpy>
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
 80075d0:	2204      	movs	r2, #4
 80075d2:	f505 7186 	add.w	r1, r5, #268	; 0x10c
 80075d6:	a805      	add	r0, sp, #20
 80075d8:	f013 fd02 	bl	801afe0 <memcpy>
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 80075dc:	2204      	movs	r2, #4
 80075de:	f505 7188 	add.w	r1, r5, #272	; 0x110
 80075e2:	a806      	add	r0, sp, #24
 80075e4:	f013 fcfc 	bl	801afe0 <memcpy>
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 80075e8:	2204      	movs	r2, #4
 80075ea:	f505 718a 	add.w	r1, r5, #276	; 0x114
 80075ee:	a807      	add	r0, sp, #28
 80075f0:	f013 fcf6 	bl	801afe0 <memcpy>
    s0 = ByteReverseWord32(s0);
 80075f4:	9804      	ldr	r0, [sp, #16]
 80075f6:	f7fe fd53 	bl	80060a0 <ByteReverseWord32>
 80075fa:	4681      	mov	r9, r0
    s1 = ByteReverseWord32(s1);
 80075fc:	9805      	ldr	r0, [sp, #20]
 80075fe:	f7fe fd4f 	bl	80060a0 <ByteReverseWord32>
 8007602:	4601      	mov	r1, r0
    s2 = ByteReverseWord32(s2);
 8007604:	9806      	ldr	r0, [sp, #24]
 8007606:	f7fe fd4b 	bl	80060a0 <ByteReverseWord32>
 800760a:	4602      	mov	r2, r0
    s3 = ByteReverseWord32(s3);
 800760c:	9807      	ldr	r0, [sp, #28]
 800760e:	f7fe fd47 	bl	80060a0 <ByteReverseWord32>
    s0 ^= rk[0];
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	ea89 0903 	eor.w	r9, r9, r3
    s1 ^= rk[1];
 8007618:	686b      	ldr	r3, [r5, #4]
 800761a:	ea81 0c03 	eor.w	ip, r1, r3
    s2 ^= rk[2];
 800761e:	68ab      	ldr	r3, [r5, #8]
 8007620:	ea82 0e03 	eor.w	lr, r2, r3
    s3 ^= rk[3];
 8007624:	68eb      	ldr	r3, [r5, #12]
 8007626:	4058      	eors	r0, r3
                       DEC_ROUND_T_S( 0);
 8007628:	fa5f f38c 	uxtb.w	r3, ip
 800762c:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8007630:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007634:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 8007638:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800763c:	405e      	eors	r6, r3
 800763e:	692b      	ldr	r3, [r5, #16]
 8007640:	405e      	eors	r6, r3
 8007642:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007646:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800764a:	fa5f f28e 	uxtb.w	r2, lr
 800764e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007652:	405e      	eors	r6, r3
 8007654:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8007658:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800765c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8007660:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007664:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007668:	405e      	eors	r6, r3
 800766a:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800766e:	b2c1      	uxtb	r1, r0
 8007670:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007674:	405a      	eors	r2, r3
 8007676:	696b      	ldr	r3, [r5, #20]
 8007678:	405a      	eors	r2, r3
 800767a:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800767e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007682:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8007686:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800768a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800768e:	405a      	eors	r2, r3
 8007690:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007694:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007698:	0e00      	lsrs	r0, r0, #24
 800769a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800769e:	405a      	eors	r2, r3
 80076a0:	ea4f 631e 	mov.w	r3, lr, lsr #24
 80076a4:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 80076a8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80076ac:	4059      	eors	r1, r3
 80076ae:	69ab      	ldr	r3, [r5, #24]
 80076b0:	4059      	eors	r1, r3
 80076b2:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80076b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80076ba:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 80076be:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80076c2:	4059      	eors	r1, r3
 80076c4:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80076c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80076cc:	fa5f f989 	uxtb.w	r9, r9
 80076d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80076d4:	f509 7940 	add.w	r9, r9, #768	; 0x300
 80076d8:	4059      	eors	r1, r3
 80076da:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80076de:	f854 0029 	ldr.w	r0, [r4, r9, lsl #2]
 80076e2:	ea83 0900 	eor.w	r9, r3, r0
 80076e6:	69eb      	ldr	r3, [r5, #28]
 80076e8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80076ec:	ea89 0903 	eor.w	r9, r9, r3
 80076f0:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 80076f4:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 80076f8:	ea89 0903 	eor.w	r9, r9, r3
 80076fc:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 8007700:	b2d0      	uxtb	r0, r2
                       DEC_ROUND_T_S( 0);
 8007702:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 8007706:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800770a:	0e33      	lsrs	r3, r6, #24
 800770c:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 8007710:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007714:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007718:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 800771c:	ea83 0e00 	eor.w	lr, r3, r0
 8007720:	6a2b      	ldr	r3, [r5, #32]
 8007722:	ea8e 0e03 	eor.w	lr, lr, r3
 8007726:	f3c9 4307 	ubfx	r3, r9, #16, #8
 800772a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800772e:	b2c8      	uxtb	r0, r1
 8007730:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007734:	ea8e 0e03 	eor.w	lr, lr, r3
 8007738:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800773c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007740:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007744:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007748:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800774c:	ea8e 0e03 	eor.w	lr, lr, r3
 8007750:	0e13      	lsrs	r3, r2, #24
 8007752:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8007756:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800775a:	4058      	eors	r0, r3
 800775c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800775e:	4058      	eors	r0, r3
 8007760:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007764:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007768:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800776c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007770:	4058      	eors	r0, r3
 8007772:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8007776:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if (r > 5) {
 800777a:	f1ba 0f05 	cmp.w	sl, #5
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 800777e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007782:	ea80 0003 	eor.w	r0, r0, r3
 8007786:	fa5f f389 	uxtb.w	r3, r9
 800778a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800778e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007792:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007796:	ea8c 0c03 	eor.w	ip, ip, r3
 800779a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800779c:	ea8c 0c03 	eor.w	ip, ip, r3
 80077a0:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80077a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80077a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80077ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80077b0:	ea8c 0c03 	eor.w	ip, ip, r3
 80077b4:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80077b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80077bc:	b2f6      	uxtb	r6, r6
 80077be:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80077c2:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80077c6:	ea8c 0c03 	eor.w	ip, ip, r3
 80077ca:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 80077ce:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 80077d2:	ea83 0906 	eor.w	r9, r3, r6
 80077d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80077d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80077dc:	ea89 0903 	eor.w	r9, r9, r3
 80077e0:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80077e4:	ea89 0903 	eor.w	r9, r9, r3
 80077e8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 80077ec:	ea89 0903 	eor.w	r9, r9, r3
 80077f0:	b2c3      	uxtb	r3, r0
 80077f2:	ea4f 621e 	mov.w	r2, lr, lsr #24
 80077f6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80077fa:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 80077fe:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007802:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8007806:	ea86 0602 	eor.w	r6, r6, r2
 800780a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800780e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007810:	ea86 0602 	eor.w	r6, r6, r2
 8007814:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007818:	f3cc 2307 	ubfx	r3, ip, #8, #8
 800781c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007820:	ea86 0602 	eor.w	r6, r6, r2
 8007824:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007828:	fa5f f28c 	uxtb.w	r2, ip
 800782c:	ea86 0603 	eor.w	r6, r6, r3
 8007830:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8007834:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8007838:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800783c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007840:	ea82 0203 	eor.w	r2, r2, r3
 8007844:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007846:	ea82 0203 	eor.w	r2, r2, r3
 800784a:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800784e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007852:	fa5f f189 	uxtb.w	r1, r9
 8007856:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800785a:	ea82 0203 	eor.w	r2, r2, r3
 800785e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8007862:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007866:	f501 7140 	add.w	r1, r1, #768	; 0x300
 800786a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800786e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8007872:	ea82 0203 	eor.w	r2, r2, r3
 8007876:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800787a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800787e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007882:	ea81 0103 	eor.w	r1, r1, r3
 8007886:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007888:	ea81 0103 	eor.w	r1, r1, r3
 800788c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007890:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007894:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8007898:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800789c:	ea81 0103 	eor.w	r1, r1, r3
 80078a0:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80078a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80078a8:	fa5f fe8e 	uxtb.w	lr, lr
 80078ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80078b0:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 80078b4:	ea81 0103 	eor.w	r1, r1, r3
 80078b8:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 80078bc:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 80078c0:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 80078c4:	ea83 0909 	eor.w	r9, r3, r9
 80078c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80078ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80078ce:	ea89 0903 	eor.w	r9, r9, r3
 80078d2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80078d6:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 80078da:	ea89 0903 	eor.w	r9, r9, r3
 80078de:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 80078e2:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
 80078e6:	b2d3      	uxtb	r3, r2
 80078e8:	ea4f 6016 	mov.w	r0, r6, lsr #24
 80078ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80078f0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80078f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80078f8:	ea80 0e03 	eor.w	lr, r0, r3
 80078fc:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8007900:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8007902:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007906:	ea8e 0e00 	eor.w	lr, lr, r0
 800790a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800790e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007912:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007916:	ea8e 0e00 	eor.w	lr, lr, r0
 800791a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800791e:	b2c8      	uxtb	r0, r1
 8007920:	ea8e 0e03 	eor.w	lr, lr, r3
 8007924:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007928:	ea4f 6312 	mov.w	r3, r2, lsr #24
 800792c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007930:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007934:	ea80 0003 	eor.w	r0, r0, r3
 8007938:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800793a:	ea80 0003 	eor.w	r0, r0, r3
 800793e:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007942:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007946:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 800794a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800794e:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8007952:	ea80 0003 	eor.w	r0, r0, r3
 8007956:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800795a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800795e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8007962:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007966:	ea80 0003 	eor.w	r0, r0, r3
 800796a:	fa5f f389 	uxtb.w	r3, r9
 800796e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007972:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007976:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800797a:	ea8c 0c03 	eor.w	ip, ip, r3
 800797e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007980:	ea8c 0c03 	eor.w	ip, ip, r3
 8007984:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8007988:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800798c:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007990:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007994:	ea8c 0c03 	eor.w	ip, ip, r3
 8007998:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800799c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80079a0:	b2f6      	uxtb	r6, r6
 80079a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80079a6:	f506 7640 	add.w	r6, r6, #768	; 0x300
 80079aa:	ea8c 0c03 	eor.w	ip, ip, r3
 80079ae:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 80079b2:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 80079b6:	ea83 0906 	eor.w	r9, r3, r6
 80079ba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80079bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80079c0:	ea89 0903 	eor.w	r9, r9, r3
 80079c4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80079c8:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80079cc:	ea89 0903 	eor.w	r9, r9, r3
 80079d0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 80079d4:	ea89 0903 	eor.w	r9, r9, r3
 80079d8:	b2c3      	uxtb	r3, r0
 80079da:	ea4f 621e 	mov.w	r2, lr, lsr #24
 80079de:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80079e2:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 80079e6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80079ea:	f3c9 4307 	ubfx	r3, r9, #16, #8
 80079ee:	ea86 0602 	eor.w	r6, r6, r2
 80079f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80079f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80079f8:	ea86 0602 	eor.w	r6, r6, r2
 80079fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007a00:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8007a04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a08:	ea86 0602 	eor.w	r6, r6, r2
 8007a0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a10:	fa5f f28c 	uxtb.w	r2, ip
 8007a14:	ea86 0603 	eor.w	r6, r6, r3
 8007a18:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8007a1c:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8007a20:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a28:	ea82 0203 	eor.w	r2, r2, r3
 8007a2c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007a2e:	ea82 0203 	eor.w	r2, r2, r3
 8007a32:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8007a36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a3a:	fa5f f189 	uxtb.w	r1, r9
 8007a3e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a42:	ea82 0203 	eor.w	r2, r2, r3
 8007a46:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8007a4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a4e:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8007a52:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a56:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8007a5a:	ea82 0203 	eor.w	r2, r2, r3
 8007a5e:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8007a62:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007a66:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a6a:	ea81 0103 	eor.w	r1, r1, r3
 8007a6e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007a70:	ea81 0103 	eor.w	r1, r1, r3
 8007a74:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007a78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a7c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8007a80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a84:	ea81 0103 	eor.w	r1, r1, r3
 8007a88:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8007a8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a90:	fa5f fe8e 	uxtb.w	lr, lr
 8007a94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007a98:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8007a9c:	ea81 0103 	eor.w	r1, r1, r3
 8007aa0:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8007aa4:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8007aa8:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8007aac:	ea83 0909 	eor.w	r9, r3, r9
 8007ab0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8007ab2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007ab6:	ea89 0903 	eor.w	r9, r9, r3
 8007aba:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8007abe:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 8007ac2:	ea89 0903 	eor.w	r9, r9, r3
 8007ac6:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8007aca:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
 8007ace:	b2d3      	uxtb	r3, r2
 8007ad0:	ea4f 6016 	mov.w	r0, r6, lsr #24
 8007ad4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007ad8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007adc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007ae0:	ea80 0e03 	eor.w	lr, r0, r3
 8007ae4:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8007ae8:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8007aea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007aee:	ea8e 0e00 	eor.w	lr, lr, r0
 8007af2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007af6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007afa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007afe:	ea8e 0e00 	eor.w	lr, lr, r0
 8007b02:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b06:	b2c8      	uxtb	r0, r1
 8007b08:	ea8e 0e03 	eor.w	lr, lr, r3
 8007b0c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007b10:	ea4f 6312 	mov.w	r3, r2, lsr #24
 8007b14:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007b18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b1c:	ea80 0003 	eor.w	r0, r0, r3
 8007b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b22:	ea80 0003 	eor.w	r0, r0, r3
 8007b26:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b2e:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 8007b32:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b36:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8007b3a:	ea80 0003 	eor.w	r0, r0, r3
 8007b3e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8007b42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007b46:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8007b4a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b4e:	ea80 0003 	eor.w	r0, r0, r3
 8007b52:	fa5f f389 	uxtb.w	r3, r9
 8007b56:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007b5a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007b5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b62:	ea8c 0c03 	eor.w	ip, ip, r3
 8007b66:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007b68:	ea8c 0c03 	eor.w	ip, ip, r3
 8007b6c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8007b70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b74:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007b78:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b7c:	ea8c 0c03 	eor.w	ip, ip, r3
 8007b80:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007b84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007b88:	b2f6      	uxtb	r6, r6
 8007b8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007b8e:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8007b92:	ea8c 0c03 	eor.w	ip, ip, r3
 8007b96:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8007b9a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8007b9e:	ea83 0906 	eor.w	r9, r3, r6
 8007ba2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007ba4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007ba8:	ea89 0903 	eor.w	r9, r9, r3
 8007bac:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007bb0:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8007bb4:	ea89 0903 	eor.w	r9, r9, r3
 8007bb8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8007bbc:	ea89 0903 	eor.w	r9, r9, r3
 8007bc0:	b2c3      	uxtb	r3, r0
 8007bc2:	ea4f 621e 	mov.w	r2, lr, lsr #24
 8007bc6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007bca:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
 8007bce:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007bd2:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8007bd6:	ea86 0602 	eor.w	r6, r6, r2
 8007bda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007bde:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8007be0:	ea86 0602 	eor.w	r6, r6, r2
 8007be4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007be8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8007bec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007bf0:	ea86 0602 	eor.w	r6, r6, r2
 8007bf4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007bf8:	fa5f f28c 	uxtb.w	r2, ip
 8007bfc:	ea86 0603 	eor.w	r6, r6, r3
 8007c00:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8007c04:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8007c08:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007c10:	ea82 0203 	eor.w	r2, r2, r3
 8007c14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007c16:	ea82 0203 	eor.w	r2, r2, r3
 8007c1a:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8007c1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c22:	fa5f f189 	uxtb.w	r1, r9
 8007c26:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007c2a:	ea82 0203 	eor.w	r2, r2, r3
 8007c2e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8007c32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007c36:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8007c3a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007c3e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8007c42:	ea82 0203 	eor.w	r2, r2, r3
 8007c46:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8007c4a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007c4e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007c52:	ea81 0103 	eor.w	r1, r1, r3
 8007c56:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8007c58:	ea81 0103 	eor.w	r1, r1, r3
 8007c5c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007c60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c64:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8007c68:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007c6c:	ea81 0103 	eor.w	r1, r1, r3
 8007c70:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8007c74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007c78:	fa5f fe8e 	uxtb.w	lr, lr
 8007c7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007c80:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8007c84:	ea81 0103 	eor.w	r1, r1, r3
 8007c88:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8007c8c:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8007c90:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8007c94:	ea83 0909 	eor.w	r9, r3, r9
 8007c98:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007c9a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007c9e:	ea89 0903 	eor.w	r9, r9, r3
 8007ca2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8007ca6:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
 8007caa:	ea89 0903 	eor.w	r9, r9, r3
 8007cae:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8007cb2:	ea89 0903 	eor.w	r9, r9, r3
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
 8007cb6:	b2d3      	uxtb	r3, r2
 8007cb8:	ea4f 6016 	mov.w	r0, r6, lsr #24
 8007cbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007cc0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007cc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007cc8:	ea83 0300 	eor.w	r3, r3, r0
 8007ccc:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8007cd0:	ea80 0003 	eor.w	r0, r0, r3
 8007cd4:	f3c9 4307 	ubfx	r3, r9, #16, #8
 8007cd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007cdc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8007ce0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007ce4:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8007ce8:	ea80 0003 	eor.w	r0, r0, r3
 8007cec:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007cf0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007cf4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8007cf8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007cfc:	ea80 0003 	eor.w	r0, r0, r3
 8007d00:	b2cb      	uxtb	r3, r1
 8007d02:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007d06:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8007d0a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d0e:	ea8c 0c03 	eor.w	ip, ip, r3
 8007d12:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8007d16:	ea8c 0c03 	eor.w	ip, ip, r3
 8007d1a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007d1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d22:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007d26:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d2a:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8007d2e:	ea8c 0c03 	eor.w	ip, ip, r3
 8007d32:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8007d36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007d3a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d3e:	ea8c 0c03 	eor.w	ip, ip, r3
 8007d42:	fa5f f389 	uxtb.w	r3, r9
 8007d46:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007d4a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8007d4e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d52:	ea8e 0e03 	eor.w	lr, lr, r3
 8007d56:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007d5a:	ea8e 0e03 	eor.w	lr, lr, r3
 8007d5e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8007d62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007d6a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d6e:	ea8e 0e03 	eor.w	lr, lr, r3
 8007d72:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007d76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007d7a:	b2f6      	uxtb	r6, r6
 8007d7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d80:	f506 7640 	add.w	r6, r6, #768	; 0x300
 8007d84:	ea8e 0e03 	eor.w	lr, lr, r3
 8007d88:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8007d8c:	f854 3029 	ldr.w	r3, [r4, r9, lsl #2]
 8007d90:	ea86 0603 	eor.w	r6, r6, r3
 8007d94:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8007d98:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007d9c:	ea86 0603 	eor.w	r6, r6, r3
 8007da0:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8007da4:	ea86 0603 	eor.w	r6, r6, r3
 8007da8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8007dac:	ea86 0603 	eor.w	r6, r6, r3
 8007db0:	fa5f f38c 	uxtb.w	r3, ip
 8007db4:	ea4f 6210 	mov.w	r2, r0, lsr #24
 8007db8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007dbc:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8007dc0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007dc4:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007dc8:	ea81 0102 	eor.w	r1, r1, r2
 8007dcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007dd0:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8007dd4:	ea81 0102 	eor.w	r1, r1, r2
 8007dd8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007ddc:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8007de0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007de4:	ea81 0102 	eor.w	r1, r1, r2
 8007de8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007dec:	fa5f f28e 	uxtb.w	r2, lr
 8007df0:	ea81 0103 	eor.w	r1, r1, r3
 8007df4:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8007df8:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8007dfc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e00:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007e04:	ea82 0203 	eor.w	r2, r2, r3
 8007e08:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007e0c:	ea82 0203 	eor.w	r2, r2, r3
 8007e10:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007e14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007e18:	ea4f 691e 	mov.w	r9, lr, lsr #24
 8007e1c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007e20:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007e24:	ea82 0203 	eor.w	r2, r2, r3
 8007e28:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007e2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007e30:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8007e34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007e38:	ea82 0203 	eor.w	r2, r2, r3
 8007e3c:	b2f3      	uxtb	r3, r6
 8007e3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007e42:	ea4f 6616 	mov.w	r6, r6, lsr #24
 8007e46:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007e4a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8007e4e:	ea89 0903 	eor.w	r9, r9, r3
 8007e52:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007e56:	ea89 0303 	eor.w	r3, r9, r3
 8007e5a:	f3cc 4907 	ubfx	r9, ip, #16, #8
 8007e5e:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8007e62:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8007e66:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007e6a:	ea83 0309 	eor.w	r3, r3, r9
 8007e6e:	f3c0 2907 	ubfx	r9, r0, #8, #8
 8007e72:	b2c0      	uxtb	r0, r0
 8007e74:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007e78:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8007e7c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007e80:	ea86 0600 	eor.w	r6, r6, r0
 8007e84:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8007e88:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8007e8c:	ea86 0600 	eor.w	r6, r6, r0
 8007e90:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8007e94:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
 8007e98:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007e9c:	ea86 0600 	eor.w	r6, r6, r0
 8007ea0:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 8007ea4:	ea83 0309 	eor.w	r3, r3, r9
 8007ea8:	ea86 0600 	eor.w	r6, r6, r0
    if (r > 5) {
 8007eac:	f240 81e8 	bls.w	8008280 <wc_AesCbcDecrypt+0xd28>
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 8007eb0:	fa5f fc82 	uxtb.w	ip, r2
 8007eb4:	0e08      	lsrs	r0, r1, #24
 8007eb6:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 8007eba:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007ebe:	f854 e02c 	ldr.w	lr, [r4, ip, lsl #2]
 8007ec2:	ea80 0e0e 	eor.w	lr, r0, lr
 8007ec6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 8007eca:	ea8e 0e00 	eor.w	lr, lr, r0
 8007ece:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8007ed2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8007ed6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8007eda:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007ede:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 8007ee2:	ea8e 0e00 	eor.w	lr, lr, r0
 8007ee6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8007eea:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8007eee:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8007ef2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007ef6:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007efa:	ea8e 0e00 	eor.w	lr, lr, r0
 8007efe:	b2d8      	uxtb	r0, r3
 8007f00:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007f04:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007f08:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007f0c:	ea8c 0c00 	eor.w	ip, ip, r0
 8007f10:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8007f14:	ea8c 0c00 	eor.w	ip, ip, r0
 8007f18:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8007f1c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8007f20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007f24:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007f28:	ea8c 0c00 	eor.w	ip, ip, r0
 8007f2c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8007f30:	f500 7000 	add.w	r0, r0, #512	; 0x200
        if (r > 6) {
 8007f34:	f1ba 0f07 	cmp.w	sl, #7
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 8007f38:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007f3c:	ea8c 0c00 	eor.w	ip, ip, r0
 8007f40:	b2f0      	uxtb	r0, r6
 8007f42:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8007f46:	ea4f 6616 	mov.w	r6, r6, lsr #24
 8007f4a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007f4e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8007f52:	ea89 0900 	eor.w	r9, r9, r0
 8007f56:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 8007f5a:	ea89 0000 	eor.w	r0, r9, r0
 8007f5e:	f3c2 4907 	ubfx	r9, r2, #16, #8
 8007f62:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8007f66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007f6a:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007f6e:	ea80 0009 	eor.w	r0, r0, r9
 8007f72:	f3c1 2907 	ubfx	r9, r1, #8, #8
 8007f76:	b2c9      	uxtb	r1, r1
 8007f78:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8007f7c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007f80:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8007f84:	ea86 0601 	eor.w	r6, r6, r1
 8007f88:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8007f8c:	ea86 0601 	eor.w	r6, r6, r1
 8007f90:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007f94:	fa5f f38c 	uxtb.w	r3, ip
 8007f98:	ea86 0601 	eor.w	r6, r6, r1
 8007f9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007fa0:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8007fa4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007fa8:	ea4f 621e 	mov.w	r2, lr, lsr #24
 8007fac:	ea86 0601 	eor.w	r6, r6, r1
 8007fb0:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8007fb4:	ea81 0103 	eor.w	r1, r1, r3
 8007fb8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8007fbc:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8007fc0:	ea81 0103 	eor.w	r1, r1, r3
 8007fc4:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007fc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007fcc:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007fd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007fd4:	ea80 0009 	eor.w	r0, r0, r9
 8007fd8:	ea81 0103 	eor.w	r1, r1, r3
 8007fdc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007fe0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007fe4:	b2c2      	uxtb	r2, r0
 8007fe6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007fea:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8007fee:	ea81 0103 	eor.w	r1, r1, r3
 8007ff2:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8007ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ffa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007ffe:	ea82 0203 	eor.w	r2, r2, r3
 8008002:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8008006:	ea82 0203 	eor.w	r2, r2, r3
 800800a:	f3ce 4307 	ubfx	r3, lr, #16, #8
 800800e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008012:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8008016:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800801a:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800801e:	ea82 0203 	eor.w	r2, r2, r3
 8008022:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008026:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800802a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800802e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008032:	ea82 0203 	eor.w	r2, r2, r3
 8008036:	b2f3      	uxtb	r3, r6
 8008038:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800803c:	ea4f 6616 	mov.w	r6, r6, lsr #24
 8008040:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008044:	ea89 0903 	eor.w	r9, r9, r3
 8008048:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800804c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8008050:	ea89 0303 	eor.w	r3, r9, r3
 8008054:	f3cc 4907 	ubfx	r9, ip, #16, #8
 8008058:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800805c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8008060:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8008064:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008068:	ea83 0309 	eor.w	r3, r3, r9
 800806c:	f3ce 2907 	ubfx	r9, lr, #8, #8
 8008070:	fa5f fe8e 	uxtb.w	lr, lr
 8008074:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8008078:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800807c:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8008080:	ea86 0e0e 	eor.w	lr, r6, lr
 8008084:	f8d5 60bc 	ldr.w	r6, [r5, #188]	; 0xbc
 8008088:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800808c:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 8008090:	ea8e 0606 	eor.w	r6, lr, r6
 8008094:	ea86 0600 	eor.w	r6, r6, r0
 8008098:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 800809c:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 80080a0:	ea83 0309 	eor.w	r3, r3, r9
 80080a4:	ea86 0600 	eor.w	r6, r6, r0
        if (r > 6) {
 80080a8:	f040 80ea 	bne.w	8008280 <wc_AesCbcDecrypt+0xd28>
            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
 80080ac:	fa5f fc82 	uxtb.w	ip, r2
 80080b0:	0e08      	lsrs	r0, r1, #24
 80080b2:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
 80080b6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80080ba:	f854 e02c 	ldr.w	lr, [r4, ip, lsl #2]
 80080be:	ea80 0e0e 	eor.w	lr, r0, lr
 80080c2:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 80080c6:	ea8e 0e00 	eor.w	lr, lr, r0
 80080ca:	f3c6 4007 	ubfx	r0, r6, #16, #8
 80080ce:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80080d2:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80080d6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80080da:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
 80080de:	ea8e 0e00 	eor.w	lr, lr, r0
 80080e2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80080e6:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80080ea:	ea4f 6913 	mov.w	r9, r3, lsr #24
 80080ee:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80080f2:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 80080f6:	ea8e 0e00 	eor.w	lr, lr, r0
 80080fa:	b2d8      	uxtb	r0, r3
 80080fc:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8008100:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008104:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008108:	ea8c 0c00 	eor.w	ip, ip, r0
 800810c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8008110:	ea8c 0c00 	eor.w	ip, ip, r0
 8008114:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008118:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800811c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008120:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008124:	ea8c 0c00 	eor.w	ip, ip, r0
 8008128:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800812c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8008130:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008134:	ea8c 0c00 	eor.w	ip, ip, r0
 8008138:	b2f0      	uxtb	r0, r6
 800813a:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800813e:	0e36      	lsrs	r6, r6, #24
 8008140:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008144:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8008148:	ea89 0900 	eor.w	r9, r9, r0
 800814c:	f8d5 00c8 	ldr.w	r0, [r5, #200]	; 0xc8
 8008150:	ea89 0000 	eor.w	r0, r9, r0
 8008154:	f3c2 4907 	ubfx	r9, r2, #16, #8
 8008158:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800815c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008160:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8008164:	ea80 0009 	eor.w	r0, r0, r9
 8008168:	f3c1 2907 	ubfx	r9, r1, #8, #8
 800816c:	b2c9      	uxtb	r1, r1
 800816e:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8008172:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8008176:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800817a:	404e      	eors	r6, r1
 800817c:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 8008180:	404e      	eors	r6, r1
 8008182:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008186:	fa5f f38c 	uxtb.w	r3, ip
 800818a:	404e      	eors	r6, r1
 800818c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008190:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8008194:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008198:	ea4f 621e 	mov.w	r2, lr, lsr #24
 800819c:	404e      	eors	r6, r1
 800819e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 80081a2:	4059      	eors	r1, r3
 80081a4:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 80081a8:	f509 7900 	add.w	r9, r9, #512	; 0x200
 80081ac:	4059      	eors	r1, r3
 80081ae:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80081b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081b6:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 80081ba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80081be:	ea80 0009 	eor.w	r0, r0, r9
 80081c2:	4059      	eors	r1, r3
 80081c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80081c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80081cc:	b2c2      	uxtb	r2, r0
 80081ce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80081d2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80081d6:	4059      	eors	r1, r3
 80081d8:	ea4f 631c 	mov.w	r3, ip, lsr #24
 80081dc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80081e4:	405a      	eors	r2, r3
 80081e6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 80081ea:	405a      	eors	r2, r3
 80081ec:	f3ce 4307 	ubfx	r3, lr, #16, #8
 80081f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081f4:	ea4f 6910 	mov.w	r9, r0, lsr #24
 80081f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80081fc:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8008200:	405a      	eors	r2, r3
 8008202:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008206:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800820a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800820e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008212:	405a      	eors	r2, r3
 8008214:	b2f3      	uxtb	r3, r6
 8008216:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800821a:	0e36      	lsrs	r6, r6, #24
 800821c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008220:	ea89 0903 	eor.w	r9, r9, r3
 8008224:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8008228:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800822c:	ea89 0303 	eor.w	r3, r9, r3
 8008230:	f3cc 4907 	ubfx	r9, ip, #16, #8
 8008234:	f509 7980 	add.w	r9, r9, #256	; 0x100
 8008238:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800823c:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8008240:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008244:	ea83 0309 	eor.w	r3, r3, r9
 8008248:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800824c:	fa5f fe8e 	uxtb.w	lr, lr
 8008250:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
 8008254:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8008258:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800825c:	ea86 0e0e 	eor.w	lr, r6, lr
 8008260:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
 8008264:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8008268:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
 800826c:	ea8e 0606 	eor.w	r6, lr, r6
 8008270:	4046      	eors	r6, r0
 8008272:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8008276:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
 800827a:	ea83 0309 	eor.w	r3, r3, r9
 800827e:	4046      	eors	r6, r0
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 8008280:	0e10      	lsrs	r0, r2, #24
    rk += r * 8;
 8008282:	eb05 1e4a 	add.w	lr, r5, sl, lsl #5
 8008286:	ea4f 1c4a 	mov.w	ip, sl, lsl #5
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 800828a:	f817 a000 	ldrb.w	sl, [r7, r0]
 800828e:	b2d8      	uxtb	r0, r3
 8008290:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8008294:	5c38      	ldrb	r0, [r7, r0]
 8008296:	ea40 600a 	orr.w	r0, r0, sl, lsl #24
 800829a:	f817 a009 	ldrb.w	sl, [r7, r9]
 800829e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80082a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80082a6:	f817 a009 	ldrb.w	sl, [r7, r9]
 80082aa:	ea40 2a0a 	orr.w	sl, r0, sl, lsl #8
                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
 80082ae:	f8de 0004 	ldr.w	r0, [lr, #4]
 80082b2:	ea8a 0a00 	eor.w	sl, sl, r0
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
 80082b6:	0e18      	lsrs	r0, r3, #24
 80082b8:	f3c2 4907 	ubfx	r9, r2, #16, #8
 80082bc:	f817 b000 	ldrb.w	fp, [r7, r0]
 80082c0:	b2f0      	uxtb	r0, r6
 80082c2:	5c38      	ldrb	r0, [r7, r0]
 80082c4:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 80082c8:	f817 b009 	ldrb.w	fp, [r7, r9]
 80082cc:	f3c1 2907 	ubfx	r9, r1, #8, #8
 80082d0:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 80082d4:	f817 b009 	ldrb.w	fp, [r7, r9]
 80082d8:	ea40 2b0b 	orr.w	fp, r0, fp, lsl #8
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
 80082dc:	f8de 0008 	ldr.w	r0, [lr, #8]
 80082e0:	ea8b 0b00 	eor.w	fp, fp, r0
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 80082e4:	0e30      	lsrs	r0, r6, #24
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 80082e6:	f3c6 4607 	ubfx	r6, r6, #16, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 80082ea:	f817 9000 	ldrb.w	r9, [r7, r0]
 80082ee:	b2c8      	uxtb	r0, r1
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 80082f0:	0e09      	lsrs	r1, r1, #24
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 80082f2:	5c38      	ldrb	r0, [r7, r0]
 80082f4:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
 80082f8:	f3c3 4907 	ubfx	r9, r3, #16, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 80082fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 8008300:	f817 9009 	ldrb.w	r9, [r7, r9]
 8008304:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008308:	f3c2 2907 	ubfx	r9, r2, #8, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 800830c:	b2d2      	uxtb	r2, r2
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800830e:	f817 9009 	ldrb.w	r9, [r7, r9]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8008312:	5cba      	ldrb	r2, [r7, r2]
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 8008314:	ea40 2909 	orr.w	r9, r0, r9, lsl #8
                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
 8008318:	f8de 000c 	ldr.w	r0, [lr, #12]
 800831c:	ea89 0900 	eor.w	r9, r9, r0
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8008320:	5c78      	ldrb	r0, [r7, r1]
 8008322:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008326:	5dba      	ldrb	r2, [r7, r6]
 8008328:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800832c:	5cfa      	ldrb	r2, [r7, r3]
                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
 800832e:	f855 300c 	ldr.w	r3, [r5, ip]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8008332:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    s0 = ByteReverseWord32(s0);
 8008336:	4058      	eors	r0, r3
 8008338:	f7fd feb2 	bl	80060a0 <ByteReverseWord32>
 800833c:	9004      	str	r0, [sp, #16]
    s1 = ByteReverseWord32(s1);
 800833e:	4650      	mov	r0, sl
 8008340:	f7fd feae 	bl	80060a0 <ByteReverseWord32>
 8008344:	9005      	str	r0, [sp, #20]
    s2 = ByteReverseWord32(s2);
 8008346:	4658      	mov	r0, fp
 8008348:	f7fd feaa 	bl	80060a0 <ByteReverseWord32>
 800834c:	9006      	str	r0, [sp, #24]
    s3 = ByteReverseWord32(s3);
 800834e:	4648      	mov	r0, r9
 8008350:	f7fd fea6 	bl	80060a0 <ByteReverseWord32>
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8008354:	2204      	movs	r2, #4
    s3 = ByteReverseWord32(s3);
 8008356:	9007      	str	r0, [sp, #28]
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8008358:	a904      	add	r1, sp, #16
 800835a:	4640      	mov	r0, r8
 800835c:	f012 fe40 	bl	801afe0 <memcpy>
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
 8008360:	2204      	movs	r2, #4
 8008362:	eb08 0002 	add.w	r0, r8, r2
 8008366:	a905      	add	r1, sp, #20
 8008368:	f012 fe3a 	bl	801afe0 <memcpy>
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 800836c:	2204      	movs	r2, #4
 800836e:	a906      	add	r1, sp, #24
 8008370:	f108 0008 	add.w	r0, r8, #8
 8008374:	f012 fe34 	bl	801afe0 <memcpy>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 8008378:	f105 06f8 	add.w	r6, r5, #248	; 0xf8
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 800837c:	2204      	movs	r2, #4
 800837e:	a907      	add	r1, sp, #28
 8008380:	f108 000c 	add.w	r0, r8, #12
 8008384:	f012 fe2c 	bl	801afe0 <memcpy>
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 8008388:	4640      	mov	r0, r8
 800838a:	2210      	movs	r2, #16
 800838c:	4631      	mov	r1, r6
 800838e:	f7fd febc 	bl	800610a <xorbuf>
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
 8008392:	9902      	ldr	r1, [sp, #8]
 8008394:	2210      	movs	r2, #16
 8008396:	4630      	mov	r0, r6
 8008398:	f012 fe22 	bl	801afe0 <memcpy>
            in  += AES_BLOCK_SIZE;
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	3310      	adds	r3, #16
            out += AES_BLOCK_SIZE;
 80083a0:	f108 0810 	add.w	r8, r8, #16
            in  += AES_BLOCK_SIZE;
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	f7ff b8fd 	b.w	80075a4 <wc_AesCbcDecrypt+0x4c>
        return KEYUSAGE_E;
 80083aa:	f06f 00e1 	mvn.w	r0, #225	; 0xe1
 80083ae:	f7ff b8e4 	b.w	800757a <wc_AesCbcDecrypt+0x22>
            return BAD_FUNC_ARG;
 80083b2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80083b6:	f7ff b8e0 	b.w	800757a <wc_AesCbcDecrypt+0x22>
 80083ba:	bf00      	nop

080083bc <wc_AesGcmSetKey>:
{
 80083bc:	b570      	push	{r4, r5, r6, lr}
    if (!((len == 16) || (len == 24) || (len == 32)))
 80083be:	f022 0308 	bic.w	r3, r2, #8
 80083c2:	2b10      	cmp	r3, #16
{
 80083c4:	b086      	sub	sp, #24
 80083c6:	4604      	mov	r4, r0
 80083c8:	460e      	mov	r6, r1
 80083ca:	4615      	mov	r5, r2
    if (!((len == 16) || (len == 24) || (len == 32)))
 80083cc:	d001      	beq.n	80083d2 <wc_AesGcmSetKey+0x16>
 80083ce:	2a20      	cmp	r2, #32
 80083d0:	d116      	bne.n	8008400 <wc_AesGcmSetKey+0x44>
    if (aes == NULL) {
 80083d2:	b1ac      	cbz	r4, 8008400 <wc_AesGcmSetKey+0x44>
    XMEMSET(iv, 0, AES_BLOCK_SIZE);
 80083d4:	2210      	movs	r2, #16
 80083d6:	2100      	movs	r1, #0
 80083d8:	a802      	add	r0, sp, #8
 80083da:	f012 fe29 	bl	801b030 <memset>
    ret = wc_AesSetKey(aes, key, len, iv, AES_ENCRYPTION);
 80083de:	2300      	movs	r3, #0
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	ab02      	add	r3, sp, #8
 80083e6:	4631      	mov	r1, r6
 80083e8:	4620      	mov	r0, r4
 80083ea:	f7fe fe5b 	bl	80070a4 <wc_AesSetKey>
    if (ret == 0)
 80083ee:	b928      	cbnz	r0, 80083fc <wc_AesGcmSetKey+0x40>
        ret = wc_AesEncrypt(aes, iv, aes->gcm.H);
 80083f0:	f504 7292 	add.w	r2, r4, #292	; 0x124
 80083f4:	a902      	add	r1, sp, #8
 80083f6:	4620      	mov	r0, r4
 80083f8:	f7fd fec2 	bl	8006180 <wc_AesEncrypt>
}
 80083fc:	b006      	add	sp, #24
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 8008400:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008404:	e7fa      	b.n	80083fc <wc_AesGcmSetKey+0x40>

08008406 <GHASH>:


void GHASH(Gcm* gcm, const byte* a, word32 aSz, const byte* c,
    word32 cSz, byte* s, word32 sSz)
{
 8008406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	460f      	mov	r7, r1
 800840e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008410:	4614      	mov	r4, r2
 8008412:	461e      	mov	r6, r3
    byte x[AES_BLOCK_SIZE];
    byte scratch[AES_BLOCK_SIZE];
    word32 blocks, partial;
    byte* h;

    if (gcm == NULL) {
 8008414:	4680      	mov	r8, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	f000 8087 	beq.w	800852a <GHASH+0x124>
        return;
    }

    h = gcm->H;
    XMEMSET(x, 0, AES_BLOCK_SIZE);
 800841c:	2210      	movs	r2, #16
 800841e:	2100      	movs	r1, #0
 8008420:	4668      	mov	r0, sp
 8008422:	f012 fe05 	bl	801b030 <memset>

    /* Hash in A, the Additional Authentication Data */
    if (aSz != 0 && a != NULL) {
 8008426:	b1fc      	cbz	r4, 8008468 <GHASH+0x62>
 8008428:	b1f7      	cbz	r7, 8008468 <GHASH+0x62>
        blocks = aSz / AES_BLOCK_SIZE;
        partial = aSz % AES_BLOCK_SIZE;
 800842a:	f024 090f 	bic.w	r9, r4, #15
 800842e:	f004 0a0f 	and.w	sl, r4, #15
        while (blocks--) {
 8008432:	44b9      	add	r9, r7
 8008434:	454f      	cmp	r7, r9
 8008436:	d17b      	bne.n	8008530 <GHASH+0x12a>
            xorbuf(x, a, AES_BLOCK_SIZE);
            GMULT(x, h);
            a += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
 8008438:	f1ba 0f00 	cmp.w	sl, #0
 800843c:	d014      	beq.n	8008468 <GHASH+0x62>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
 800843e:	2210      	movs	r2, #16
 8008440:	2100      	movs	r1, #0
 8008442:	eb0d 0002 	add.w	r0, sp, r2
 8008446:	f012 fdf3 	bl	801b030 <memset>
            XMEMCPY(scratch, a, partial);
 800844a:	4652      	mov	r2, sl
 800844c:	4639      	mov	r1, r7
 800844e:	a804      	add	r0, sp, #16
 8008450:	f012 fdc6 	bl	801afe0 <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
 8008454:	2210      	movs	r2, #16
 8008456:	eb0d 0102 	add.w	r1, sp, r2
 800845a:	4668      	mov	r0, sp
 800845c:	f7fd fe55 	bl	800610a <xorbuf>
            GMULT(x, h);
 8008460:	4641      	mov	r1, r8
 8008462:	4668      	mov	r0, sp
 8008464:	f7fe fdc8 	bl	8006ff8 <GMULT>
        }
    }

    /* Hash in C, the Ciphertext */
    if (cSz != 0 && c != NULL) {
 8008468:	b1fd      	cbz	r5, 80084aa <GHASH+0xa4>
 800846a:	b1f6      	cbz	r6, 80084aa <GHASH+0xa4>
        blocks = cSz / AES_BLOCK_SIZE;
        partial = cSz % AES_BLOCK_SIZE;
 800846c:	f025 070f 	bic.w	r7, r5, #15
 8008470:	f005 090f 	and.w	r9, r5, #15
        while (blocks--) {
 8008474:	4437      	add	r7, r6
 8008476:	42be      	cmp	r6, r7
 8008478:	d165      	bne.n	8008546 <GHASH+0x140>
            xorbuf(x, c, AES_BLOCK_SIZE);
            GMULT(x, h);
            c += AES_BLOCK_SIZE;
        }
        if (partial != 0) {
 800847a:	f1b9 0f00 	cmp.w	r9, #0
 800847e:	d014      	beq.n	80084aa <GHASH+0xa4>
            XMEMSET(scratch, 0, AES_BLOCK_SIZE);
 8008480:	2210      	movs	r2, #16
 8008482:	2100      	movs	r1, #0
 8008484:	eb0d 0002 	add.w	r0, sp, r2
 8008488:	f012 fdd2 	bl	801b030 <memset>
            XMEMCPY(scratch, c, partial);
 800848c:	464a      	mov	r2, r9
 800848e:	4631      	mov	r1, r6
 8008490:	a804      	add	r0, sp, #16
 8008492:	f012 fda5 	bl	801afe0 <memcpy>
            xorbuf(x, scratch, AES_BLOCK_SIZE);
 8008496:	2210      	movs	r2, #16
 8008498:	eb0d 0102 	add.w	r1, sp, r2
 800849c:	4668      	mov	r0, sp
 800849e:	f7fd fe34 	bl	800610a <xorbuf>
            GMULT(x, h);
 80084a2:	4641      	mov	r1, r8
 80084a4:	4668      	mov	r0, sp
 80084a6:	f7fe fda7 	bl	8006ff8 <GMULT>
    buf[0] = (byte)(szHi >> 24);
 80084aa:	2300      	movs	r3, #0
    sz <<= 3;
 80084ac:	00e2      	lsls	r2, r4, #3
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
 80084ae:	0f61      	lsrs	r1, r4, #29
    buf[0] = (byte)(szHi >> 24);
 80084b0:	f88d 3010 	strb.w	r3, [sp, #16]
    buf[1] = (byte)(szHi >> 16);
 80084b4:	f88d 3011 	strb.w	r3, [sp, #17]
    buf[2] = (byte)(szHi >>  8);
 80084b8:	f88d 3012 	strb.w	r3, [sp, #18]
    buf[0] = (byte)(szHi >> 24);
 80084bc:	f88d 3018 	strb.w	r3, [sp, #24]
    buf[1] = (byte)(szHi >> 16);
 80084c0:	f88d 3019 	strb.w	r3, [sp, #25]
    buf[2] = (byte)(szHi >>  8);
 80084c4:	f88d 301a 	strb.w	r3, [sp, #26]
    word32 szHi = (sz >> (8*sizeof(sz) - 3));
 80084c8:	0f6b      	lsrs	r3, r5, #29
    buf[3] = (byte)szHi;
 80084ca:	f88d 1013 	strb.w	r1, [sp, #19]
    buf[7] = (byte)sz;
 80084ce:	f88d 2017 	strb.w	r2, [sp, #23]
    buf[4] = (byte)(sz >> 24);
 80084d2:	f3c4 5147 	ubfx	r1, r4, #21, #8
    sz <<= 3;
 80084d6:	00ea      	lsls	r2, r5, #3
    buf[3] = (byte)szHi;
 80084d8:	f88d 301b 	strb.w	r3, [sp, #27]
    buf[4] = (byte)(sz >> 24);
 80084dc:	f3c5 5347 	ubfx	r3, r5, #21, #8
 80084e0:	f88d 1014 	strb.w	r1, [sp, #20]
 80084e4:	f88d 301c 	strb.w	r3, [sp, #28]
    buf[5] = (byte)(sz >> 16);
 80084e8:	f3c4 314f 	ubfx	r1, r4, #13, #16
 80084ec:	f3c5 334f 	ubfx	r3, r5, #13, #16
    buf[7] = (byte)sz;
 80084f0:	f88d 201f 	strb.w	r2, [sp, #31]
    }

    /* Hash in the lengths of A and C in bits */
    FlattenSzInBits(&scratch[0], aSz);
    FlattenSzInBits(&scratch[8], cSz);
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 80084f4:	2210      	movs	r2, #16
    buf[5] = (byte)(sz >> 16);
 80084f6:	f88d 1015 	strb.w	r1, [sp, #21]
 80084fa:	f88d 301d 	strb.w	r3, [sp, #29]
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 80084fe:	eb0d 0102 	add.w	r1, sp, r2
    buf[6] = (byte)(sz >>  8);
 8008502:	f3c5 1357 	ubfx	r3, r5, #5, #24
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 8008506:	4668      	mov	r0, sp
    buf[6] = (byte)(sz >>  8);
 8008508:	f3c4 1457 	ubfx	r4, r4, #5, #24
 800850c:	f88d 301e 	strb.w	r3, [sp, #30]
 8008510:	f88d 4016 	strb.w	r4, [sp, #22]
    xorbuf(x, scratch, AES_BLOCK_SIZE);
 8008514:	f7fd fdf9 	bl	800610a <xorbuf>
    GMULT(x, h);
 8008518:	4641      	mov	r1, r8
 800851a:	4668      	mov	r0, sp
 800851c:	f7fe fd6c 	bl	8006ff8 <GMULT>

    /* Copy the result into s. */
    XMEMCPY(s, x, sSz);
 8008520:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008522:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008524:	4669      	mov	r1, sp
 8008526:	f012 fd5b 	bl	801afe0 <memcpy>
}
 800852a:	b008      	add	sp, #32
 800852c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            xorbuf(x, a, AES_BLOCK_SIZE);
 8008530:	4639      	mov	r1, r7
 8008532:	2210      	movs	r2, #16
 8008534:	4668      	mov	r0, sp
 8008536:	f7fd fde8 	bl	800610a <xorbuf>
            GMULT(x, h);
 800853a:	4641      	mov	r1, r8
 800853c:	4668      	mov	r0, sp
 800853e:	f7fe fd5b 	bl	8006ff8 <GMULT>
            a += AES_BLOCK_SIZE;
 8008542:	3710      	adds	r7, #16
 8008544:	e776      	b.n	8008434 <GHASH+0x2e>
            xorbuf(x, c, AES_BLOCK_SIZE);
 8008546:	4631      	mov	r1, r6
 8008548:	2210      	movs	r2, #16
 800854a:	4668      	mov	r0, sp
 800854c:	f7fd fddd 	bl	800610a <xorbuf>
            GMULT(x, h);
 8008550:	4641      	mov	r1, r8
 8008552:	4668      	mov	r0, sp
 8008554:	f7fe fd50 	bl	8006ff8 <GMULT>
            c += AES_BLOCK_SIZE;
 8008558:	3610      	adds	r6, #16
 800855a:	e78c      	b.n	8008476 <GHASH+0x70>

0800855c <wc_AesGcmEncrypt>:
/* Software AES - GCM Encrypt */
int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                   const byte* iv, word32 ivSz,
                   byte* authTag, word32 authTagSz,
                   const byte* authIn, word32 authInSz)
{
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	b093      	sub	sp, #76	; 0x4c
 8008562:	4690      	mov	r8, r2
 8008564:	461f      	mov	r7, r3
 8008566:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800856a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800856e:	4689      	mov	r9, r1
    /* argument checks */
    if (aes == NULL || authTagSz > AES_BLOCK_SIZE || ivSz == 0) {
 8008570:	4605      	mov	r5, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	d077      	beq.n	8008666 <wc_AesGcmEncrypt+0x10a>
 8008576:	2a00      	cmp	r2, #0
 8008578:	d075      	beq.n	8008666 <wc_AesGcmEncrypt+0x10a>
        return BAD_FUNC_ARG;
    }

    if (authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
 800857a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800857c:	390c      	subs	r1, #12
 800857e:	2904      	cmp	r1, #4
 8008580:	d871      	bhi.n	8008666 <wc_AesGcmEncrypt+0x10a>
    if (ivSz == GCM_NONCE_MID_SZ) {
 8008582:	2a0c      	cmp	r2, #12
    word32 blocks = sz / AES_BLOCK_SIZE;
 8008584:	ea4f 1417 	mov.w	r4, r7, lsr #4
    if (ivSz == GCM_NONCE_MID_SZ) {
 8008588:	ae06      	add	r6, sp, #24
 800858a:	d149      	bne.n	8008620 <wc_AesGcmEncrypt+0xc4>
        XMEMCPY(counter, iv, ivSz);
 800858c:	4619      	mov	r1, r3
 800858e:	4630      	mov	r0, r6
 8008590:	f012 fd26 	bl	801afe0 <memcpy>
        XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 8008594:	2203      	movs	r2, #3
 8008596:	2100      	movs	r1, #0
 8008598:	a809      	add	r0, sp, #36	; 0x24
 800859a:	f012 fd49 	bl	801b030 <memset>
        counter[AES_BLOCK_SIZE - 1] = 1;
 800859e:	2301      	movs	r3, #1
 80085a0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    XMEMCPY(initialCounter, counter, AES_BLOCK_SIZE);
 80085a4:	2210      	movs	r2, #16
 80085a6:	4631      	mov	r1, r6
 80085a8:	a80a      	add	r0, sp, #40	; 0x28
 80085aa:	f012 fd19 	bl	801afe0 <memcpy>
        while (blocks--) {
 80085ae:	eb09 1304 	add.w	r3, r9, r4, lsl #4
 80085b2:	9305      	str	r3, [sp, #20]
    byte* c = out;
 80085b4:	46ca      	mov	sl, r9
        while (blocks--) {
 80085b6:	9b05      	ldr	r3, [sp, #20]
 80085b8:	459a      	cmp	sl, r3
 80085ba:	d13c      	bne.n	8008636 <wc_AesGcmEncrypt+0xda>
    if (partial != 0) {
 80085bc:	f017 030f 	ands.w	r3, r7, #15
 80085c0:	d010      	beq.n	80085e4 <wc_AesGcmEncrypt+0x88>
        IncrementGcmCounter(counter);
 80085c2:	4630      	mov	r0, r6
 80085c4:	9305      	str	r3, [sp, #20]
        ret = wc_AesEncrypt(aes, counter, scratch);
 80085c6:	4631      	mov	r1, r6
        IncrementGcmCounter(counter);
 80085c8:	f7fd fdce 	bl	8006168 <IncrementGcmCounter>
        ret = wc_AesEncrypt(aes, counter, scratch);
 80085cc:	aa0e      	add	r2, sp, #56	; 0x38
 80085ce:	4628      	mov	r0, r5
 80085d0:	f7fd fdd6 	bl	8006180 <wc_AesEncrypt>
        if (ret != 0)
 80085d4:	4604      	mov	r4, r0
 80085d6:	b9f8      	cbnz	r0, 8008618 <wc_AesGcmEncrypt+0xbc>
        xorbufout(c, scratch, p, partial);
 80085d8:	9b05      	ldr	r3, [sp, #20]
 80085da:	4642      	mov	r2, r8
 80085dc:	a90e      	add	r1, sp, #56	; 0x38
 80085de:	4650      	mov	r0, sl
 80085e0:	f7fd fd60 	bl	80060a4 <xorbufout>
    if (authTag) {
 80085e4:	f1bb 0f00 	cmp.w	fp, #0
 80085e8:	d03b      	beq.n	8008662 <wc_AesGcmEncrypt+0x106>
        GHASH(&aes->gcm, authIn, authInSz, out, sz, authTag, authTagSz);
 80085ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085ec:	9700      	str	r7, [sp, #0]
 80085ee:	e9dd 1220 	ldrd	r1, r2, [sp, #128]	; 0x80
 80085f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085f6:	f505 7092 	add.w	r0, r5, #292	; 0x124
 80085fa:	464b      	mov	r3, r9
 80085fc:	f7ff ff03 	bl	8008406 <GHASH>
        ret = wc_AesEncrypt(aes, initialCounter, scratch);
 8008600:	aa0e      	add	r2, sp, #56	; 0x38
 8008602:	a90a      	add	r1, sp, #40	; 0x28
 8008604:	4628      	mov	r0, r5
 8008606:	f7fd fdbb 	bl	8006180 <wc_AesEncrypt>
        if (ret != 0)
 800860a:	4604      	mov	r4, r0
 800860c:	b920      	cbnz	r0, 8008618 <wc_AesGcmEncrypt+0xbc>
        xorbuf(authTag, scratch, authTagSz);
 800860e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008610:	a90e      	add	r1, sp, #56	; 0x38
 8008612:	4658      	mov	r0, fp
 8008614:	f7fd fd79 	bl	800610a <xorbuf>
#endif
    {
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
                                                              authIn, authInSz);
    }
}
 8008618:	4620      	mov	r0, r4
 800861a:	b013      	add	sp, #76	; 0x4c
 800861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 8008620:	2110      	movs	r1, #16
 8008622:	9200      	str	r2, [sp, #0]
 8008624:	2200      	movs	r2, #0
 8008626:	e9cd 6101 	strd	r6, r1, [sp, #4]
 800862a:	f500 7092 	add.w	r0, r0, #292	; 0x124
 800862e:	4611      	mov	r1, r2
 8008630:	f7ff fee9 	bl	8008406 <GHASH>
 8008634:	e7b6      	b.n	80085a4 <wc_AesGcmEncrypt+0x48>
            IncrementGcmCounter(counter);
 8008636:	4630      	mov	r0, r6
 8008638:	f7fd fd96 	bl	8006168 <IncrementGcmCounter>
            ret = wc_AesEncrypt(aes, counter, scratch);
 800863c:	4631      	mov	r1, r6
 800863e:	aa0e      	add	r2, sp, #56	; 0x38
 8008640:	4628      	mov	r0, r5
 8008642:	f7fd fd9d 	bl	8006180 <wc_AesEncrypt>
            if (ret != 0)
 8008646:	4604      	mov	r4, r0
 8008648:	2800      	cmp	r0, #0
 800864a:	d1e5      	bne.n	8008618 <wc_AesGcmEncrypt+0xbc>
            xorbufout(c, scratch, p, AES_BLOCK_SIZE);
 800864c:	4642      	mov	r2, r8
 800864e:	4650      	mov	r0, sl
 8008650:	2310      	movs	r3, #16
 8008652:	a90e      	add	r1, sp, #56	; 0x38
 8008654:	f7fd fd26 	bl	80060a4 <xorbufout>
            p += AES_BLOCK_SIZE;
 8008658:	f108 0810 	add.w	r8, r8, #16
            c += AES_BLOCK_SIZE;
 800865c:	f10a 0a10 	add.w	sl, sl, #16
 8008660:	e7a9      	b.n	80085b6 <wc_AesGcmEncrypt+0x5a>
 8008662:	465c      	mov	r4, fp
        return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
 8008664:	e7d8      	b.n	8008618 <wc_AesGcmEncrypt+0xbc>
        return BAD_FUNC_ARG;
 8008666:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800866a:	e7d5      	b.n	8008618 <wc_AesGcmEncrypt+0xbc>

0800866c <wc_AesGcmDecrypt>:
/* Software AES - GCM Decrypt */
int wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
                     const byte* iv, word32 ivSz,
                     const byte* authTag, word32 authTagSz,
                     const byte* authIn, word32 authInSz)
{
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	b095      	sub	sp, #84	; 0x54
 8008672:	4616      	mov	r6, r2
 8008674:	461c      	mov	r4, r3
 8008676:	460d      	mov	r5, r1
 8008678:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
#endif

    /* argument checks */
    /* If the sz is non-zero, both in and out must be set. If sz is 0,
     * in and out are don't cares, as this is is the GMAC case. */
    if (aes == NULL || iv == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 800867c:	4680      	mov	r8, r0
 800867e:	2800      	cmp	r0, #0
 8008680:	f000 808b 	beq.w	800879a <wc_AesGcmDecrypt+0x12e>
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8088 	beq.w	800879a <wc_AesGcmDecrypt+0x12e>
 800868a:	b12c      	cbz	r4, 8008698 <wc_AesGcmDecrypt+0x2c>
 800868c:	2e00      	cmp	r6, #0
 800868e:	f000 8084 	beq.w	800879a <wc_AesGcmDecrypt+0x12e>
 8008692:	2900      	cmp	r1, #0
 8008694:	f000 8081 	beq.w	800879a <wc_AesGcmDecrypt+0x12e>
 8008698:	9920      	ldr	r1, [sp, #128]	; 0x80
 800869a:	2900      	cmp	r1, #0
 800869c:	d07d      	beq.n	800879a <wc_AesGcmDecrypt+0x12e>
        authTag == NULL || authTagSz > AES_BLOCK_SIZE || authTagSz == 0 ||
 800869e:	9921      	ldr	r1, [sp, #132]	; 0x84
 80086a0:	3901      	subs	r1, #1
 80086a2:	290f      	cmp	r1, #15
 80086a4:	d879      	bhi.n	800879a <wc_AesGcmDecrypt+0x12e>
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d077      	beq.n	800879a <wc_AesGcmDecrypt+0x12e>
    if (ivSz == GCM_NONCE_MID_SZ) {
 80086aa:	2a0c      	cmp	r2, #12
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 80086ac:	f508 7792 	add.w	r7, r8, #292	; 0x124
 80086b0:	f10d 0910 	add.w	r9, sp, #16
    if (ivSz == GCM_NONCE_MID_SZ) {
 80086b4:	d154      	bne.n	8008760 <wc_AesGcmDecrypt+0xf4>
        XMEMCPY(counter, iv, ivSz);
 80086b6:	4619      	mov	r1, r3
 80086b8:	4648      	mov	r0, r9
 80086ba:	f012 fc91 	bl	801afe0 <memcpy>
        XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 80086be:	2203      	movs	r2, #3
 80086c0:	2100      	movs	r1, #0
 80086c2:	a807      	add	r0, sp, #28
 80086c4:	f012 fcb4 	bl	801b030 <memset>
        counter[AES_BLOCK_SIZE - 1] = 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f88d 301f 	strb.w	r3, [sp, #31]
    GHASH(&aes->gcm, authIn, authInSz, in, sz, Tprime, sizeof(Tprime));
 80086ce:	f04f 0b10 	mov.w	fp, #16
 80086d2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80086d6:	e9dd 1222 	ldrd	r1, r2, [sp, #136]	; 0x88
 80086da:	4638      	mov	r0, r7
 80086dc:	4633      	mov	r3, r6
 80086de:	e9cd 4a00 	strd	r4, sl, [sp]
 80086e2:	f8cd b008 	str.w	fp, [sp, #8]
 80086e6:	f7ff fe8e 	bl	8008406 <GHASH>
    ret = wc_AesEncrypt(aes, counter, EKY0);
 80086ea:	aa10      	add	r2, sp, #64	; 0x40
 80086ec:	4649      	mov	r1, r9
 80086ee:	4640      	mov	r0, r8
 80086f0:	f7fd fd46 	bl	8006180 <wc_AesEncrypt>
    if (ret != 0)
 80086f4:	4607      	mov	r7, r0
 80086f6:	bb80      	cbnz	r0, 800875a <wc_AesGcmDecrypt+0xee>
    xorbuf(Tprime, EKY0, sizeof(Tprime));
 80086f8:	465a      	mov	r2, fp
 80086fa:	a910      	add	r1, sp, #64	; 0x40
 80086fc:	4650      	mov	r0, sl
 80086fe:	f7fd fd04 	bl	800610a <xorbuf>
        while (blocks--) {
 8008702:	f024 0b0f 	bic.w	fp, r4, #15
 8008706:	44ab      	add	fp, r5
 8008708:	455d      	cmp	r5, fp
 800870a:	d133      	bne.n	8008774 <wc_AesGcmDecrypt+0x108>
    if (partial != 0) {
 800870c:	f014 040f 	ands.w	r4, r4, #15
 8008710:	d012      	beq.n	8008738 <wc_AesGcmDecrypt+0xcc>
        IncrementGcmCounter(counter);
 8008712:	4648      	mov	r0, r9
 8008714:	f7fd fd28 	bl	8006168 <IncrementGcmCounter>
        ret = wc_AesEncrypt(aes, counter, scratch);
 8008718:	4649      	mov	r1, r9
 800871a:	aa08      	add	r2, sp, #32
 800871c:	4640      	mov	r0, r8
 800871e:	f7fd fd2f 	bl	8006180 <wc_AesEncrypt>
        if (ret != 0)
 8008722:	b9d0      	cbnz	r0, 800875a <wc_AesGcmDecrypt+0xee>
        xorbuf(scratch, c, partial);
 8008724:	4622      	mov	r2, r4
 8008726:	4631      	mov	r1, r6
 8008728:	a808      	add	r0, sp, #32
 800872a:	f7fd fcee 	bl	800610a <xorbuf>
        XMEMCPY(p, scratch, partial);
 800872e:	4622      	mov	r2, r4
 8008730:	a908      	add	r1, sp, #32
 8008732:	4628      	mov	r0, r5
 8008734:	f012 fc54 	bl	801afe0 <memcpy>
                                             int length)
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
 8008738:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
 800873c:	189a      	adds	r2, r3, r2
        compareSum |= a[i] ^ b[i];
 800873e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008742:	f81a 0b01 	ldrb.w	r0, [sl], #1
    for (i = 0; i < length; i++) {
 8008746:	429a      	cmp	r2, r3
        compareSum |= a[i] ^ b[i];
 8008748:	ea81 0100 	eor.w	r1, r1, r0
 800874c:	ea47 0701 	orr.w	r7, r7, r1
    for (i = 0; i < length; i++) {
 8008750:	d1f5      	bne.n	800873e <wc_AesGcmDecrypt+0xd2>
    res = 0 - (sword32)(((word32)(0 - res)) >> 31U);
 8008752:	4278      	negs	r0, r7
 8008754:	17c0      	asrs	r0, r0, #31
    ret = (ret & ~res) | (res & AES_GCM_AUTH_E);
 8008756:	f020 00b3 	bic.w	r0, r0, #179	; 0xb3
#endif
    {
        return AES_GCM_decrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
                                                              authIn, authInSz);
    }
}
 800875a:	b015      	add	sp, #84	; 0x54
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        GHASH(&aes->gcm, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 8008760:	2110      	movs	r1, #16
 8008762:	9200      	str	r2, [sp, #0]
 8008764:	2200      	movs	r2, #0
 8008766:	e9cd 9101 	strd	r9, r1, [sp, #4]
 800876a:	4638      	mov	r0, r7
 800876c:	4611      	mov	r1, r2
 800876e:	f7ff fe4a 	bl	8008406 <GHASH>
 8008772:	e7ac      	b.n	80086ce <wc_AesGcmDecrypt+0x62>
            IncrementGcmCounter(counter);
 8008774:	4648      	mov	r0, r9
 8008776:	f7fd fcf7 	bl	8006168 <IncrementGcmCounter>
            ret = wc_AesEncrypt(aes, counter, scratch);
 800877a:	4649      	mov	r1, r9
 800877c:	aa08      	add	r2, sp, #32
 800877e:	4640      	mov	r0, r8
 8008780:	f7fd fcfe 	bl	8006180 <wc_AesEncrypt>
            if (ret != 0)
 8008784:	2800      	cmp	r0, #0
 8008786:	d1e8      	bne.n	800875a <wc_AesGcmDecrypt+0xee>
            xorbufout(p, scratch, c, AES_BLOCK_SIZE);
 8008788:	4632      	mov	r2, r6
 800878a:	4628      	mov	r0, r5
 800878c:	2310      	movs	r3, #16
 800878e:	a908      	add	r1, sp, #32
 8008790:	f7fd fc88 	bl	80060a4 <xorbufout>
            p += AES_BLOCK_SIZE;
 8008794:	3510      	adds	r5, #16
            c += AES_BLOCK_SIZE;
 8008796:	3610      	adds	r6, #16
 8008798:	e7b6      	b.n	8008708 <wc_AesGcmDecrypt+0x9c>
        return BAD_FUNC_ARG;
 800879a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800879e:	e7dc      	b.n	800875a <wc_AesGcmDecrypt+0xee>

080087a0 <wc_AesGcmSetIV>:


int wc_AesGcmSetIV(Aes* aes, word32 ivSz,
                   const byte* ivFixed, word32 ivFixedSz,
                   WC_RNG* rng)
{
 80087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a4:	9f06      	ldr	r7, [sp, #24]
 80087a6:	460e      	mov	r6, r1
 80087a8:	461c      	mov	r4, r3
 80087aa:	4611      	mov	r1, r2
    int ret = 0;

    if (aes == NULL || rng == NULL || !CheckAesGcmIvSize((int)ivSz) ||
 80087ac:	4605      	mov	r5, r0
 80087ae:	b140      	cbz	r0, 80087c2 <wc_AesGcmSetIV+0x22>
 80087b0:	b13f      	cbz	r7, 80087c2 <wc_AesGcmSetIV+0x22>
            ivSz == GCM_NONCE_MID_SZ ||
 80087b2:	f026 0304 	bic.w	r3, r6, #4
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d001      	beq.n	80087be <wc_AesGcmSetIV+0x1e>
 80087ba:	2e10      	cmp	r6, #16
 80087bc:	d101      	bne.n	80087c2 <wc_AesGcmSetIV+0x22>
    if (aes == NULL || rng == NULL || !CheckAesGcmIvSize((int)ivSz) ||
 80087be:	b919      	cbnz	r1, 80087c8 <wc_AesGcmSetIV+0x28>
        (ivFixed == NULL && ivFixedSz != 0) ||
 80087c0:	b124      	cbz	r4, 80087cc <wc_AesGcmSetIV+0x2c>
        (ivFixed != NULL && ivFixedSz != AES_IV_FIXED_SZ)) {

        ret = BAD_FUNC_ARG;
 80087c2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        aes->ctrSet = 1;
    #endif
        aes->nonceSz = ivSz;
    }

    return ret;
 80087c6:	e018      	b.n	80087fa <wc_AesGcmSetIV+0x5a>
        (ivFixed != NULL && ivFixedSz != AES_IV_FIXED_SZ)) {
 80087c8:	2c04      	cmp	r4, #4
 80087ca:	d1fa      	bne.n	80087c2 <wc_AesGcmSetIV+0x22>
        byte* iv = (byte*)aes->reg;
 80087cc:	f105 08f8 	add.w	r8, r5, #248	; 0xf8
        if (ivFixedSz)
 80087d0:	b11c      	cbz	r4, 80087da <wc_AesGcmSetIV+0x3a>
            XMEMCPY(iv, ivFixed, ivFixedSz);
 80087d2:	4622      	mov	r2, r4
 80087d4:	4640      	mov	r0, r8
 80087d6:	f012 fc03 	bl	801afe0 <memcpy>
        ret = wc_RNG_GenerateBlock(rng, iv + ivFixedSz, ivSz - ivFixedSz);
 80087da:	1b32      	subs	r2, r6, r4
 80087dc:	eb08 0104 	add.w	r1, r8, r4
 80087e0:	4638      	mov	r0, r7
 80087e2:	f003 ff5b 	bl	800c69c <wc_RNG_GenerateBlock>
    if (ret == 0) {
 80087e6:	b940      	cbnz	r0, 80087fa <wc_AesGcmSetIV+0x5a>
        aes->invokeCtr[1] = (ivSz == GCM_NONCE_MID_SZ) ? 0 : 0xFFFFFFFF;
 80087e8:	f1b6 030c 	subs.w	r3, r6, #12
 80087ec:	bf18      	it	ne
 80087ee:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
        aes->nonceSz = ivSz;
 80087f2:	e9c5 3647 	strd	r3, r6, [r5, #284]	; 0x11c
        aes->invokeCtr[0] = 0;
 80087f6:	f8c5 0118 	str.w	r0, [r5, #280]	; 0x118
}
 80087fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008800 <wc_AesGcmEncrypt_ex>:

int wc_AesGcmEncrypt_ex(Aes* aes, byte* out, const byte* in, word32 sz,
                        byte* ivOut, word32 ivOutSz,
                        byte* authTag, word32 authTagSz,
                        const byte* authIn, word32 authInSz)
{
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4604      	mov	r4, r0
 8008806:	b087      	sub	sp, #28
 8008808:	e9dd 0510 	ldrd	r0, r5, [sp, #64]	; 0x40
 800880c:	e9dd 9a14 	ldrd	r9, sl, [sp, #80]	; 0x50
 8008810:	460f      	mov	r7, r1
 8008812:	4690      	mov	r8, r2
 8008814:	469b      	mov	fp, r3
    int ret = 0;

    if (aes == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 8008816:	2c00      	cmp	r4, #0
 8008818:	d047      	beq.n	80088aa <wc_AesGcmEncrypt_ex+0xaa>
 800881a:	b11b      	cbz	r3, 8008824 <wc_AesGcmEncrypt_ex+0x24>
 800881c:	2a00      	cmp	r2, #0
 800881e:	d044      	beq.n	80088aa <wc_AesGcmEncrypt_ex+0xaa>
 8008820:	2900      	cmp	r1, #0
 8008822:	d042      	beq.n	80088aa <wc_AesGcmEncrypt_ex+0xaa>
 8008824:	2800      	cmp	r0, #0
 8008826:	d040      	beq.n	80088aa <wc_AesGcmEncrypt_ex+0xaa>
        ivOut == NULL || ivOutSz != aes->nonceSz ||
 8008828:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800882c:	42ab      	cmp	r3, r5
 800882e:	d13c      	bne.n	80088aa <wc_AesGcmEncrypt_ex+0xaa>
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	d102      	bne.n	800883c <wc_AesGcmEncrypt_ex+0x3c>
        (authIn == NULL && authInSz != 0)) {
 8008836:	f1ba 0f00 	cmp.w	sl, #0
 800883a:	d136      	bne.n	80088aa <wc_AesGcmEncrypt_ex+0xaa>

        ret = BAD_FUNC_ARG;
    }

    if (ret == 0) {
        aes->invokeCtr[0]++;
 800883c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008840:	3301      	adds	r3, #1
 8008842:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
        if (aes->invokeCtr[0] == 0) {
 8008846:	b33b      	cbz	r3, 8008898 <wc_AesGcmEncrypt_ex+0x98>
                ret = AES_GCM_OVERFLOW_E;
        }
    }

    if (ret == 0) {
        XMEMCPY(ivOut, aes->reg, ivOutSz);
 8008848:	f104 06f8 	add.w	r6, r4, #248	; 0xf8
 800884c:	462a      	mov	r2, r5
 800884e:	4631      	mov	r1, r6
 8008850:	f012 fbc6 	bl	801afe0 <memcpy>
        ret = wc_AesGcmEncrypt(aes, out, in, sz,
 8008854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800885a:	9600      	str	r6, [sp, #0]
 800885c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8008860:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 8008864:	465b      	mov	r3, fp
 8008866:	4642      	mov	r2, r8
 8008868:	4639      	mov	r1, r7
 800886a:	4620      	mov	r0, r4
 800886c:	f7ff fe76 	bl	800855c <wc_AesGcmEncrypt>
                               (byte*)aes->reg, ivOutSz,
                               authTag, authTagSz,
                               authIn, authInSz);
        if (ret == 0)
 8008870:	b978      	cbnz	r0, 8008892 <wc_AesGcmEncrypt_ex+0x92>
    for (i = (int)ctrSz - 1; i >= 0; i--) {
 8008872:	35f8      	adds	r5, #248	; 0xf8
 8008874:	4425      	add	r5, r4
 8008876:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
 800887a:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
 800887e:	3407      	adds	r4, #7
 8008880:	42ec      	cmn	r4, r5
 8008882:	d406      	bmi.n	8008892 <wc_AesGcmEncrypt_ex+0x92>
        if (++ctr[i])
 8008884:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 8008888:	3301      	adds	r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	702b      	strb	r3, [r5, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0f6      	beq.n	8008880 <wc_AesGcmEncrypt_ex+0x80>
            IncCtr((byte*)aes->reg, ivOutSz);
    }

    return ret;
}
 8008892:	b007      	add	sp, #28
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            aes->invokeCtr[1]++;
 8008898:	f8d4 611c 	ldr.w	r6, [r4, #284]	; 0x11c
 800889c:	3601      	adds	r6, #1
 800889e:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
            if (aes->invokeCtr[1] == 0)
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	d1d0      	bne.n	8008848 <wc_AesGcmEncrypt_ex+0x48>
                ret = AES_GCM_OVERFLOW_E;
 80088a6:	4802      	ldr	r0, [pc, #8]	; (80088b0 <wc_AesGcmEncrypt_ex+0xb0>)
    return ret;
 80088a8:	e7f3      	b.n	8008892 <wc_AesGcmEncrypt_ex+0x92>
        ret = BAD_FUNC_ARG;
 80088aa:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80088ae:	e7f0      	b.n	8008892 <wc_AesGcmEncrypt_ex+0x92>
 80088b0:	fffffefc 	.word	0xfffffefc

080088b4 <wc_Gmac>:

int wc_Gmac(const byte* key, word32 keySz, byte* iv, word32 ivSz,
            const byte* authIn, word32 authInSz,
            byte* authTag, word32 authTagSz, WC_RNG* rng)
{
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b087      	sub	sp, #28
 80088ba:	e9dd 9a10 	ldrd	r9, sl, [sp, #64]	; 0x40
 80088be:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80088c2:	4688      	mov	r8, r1
 80088c4:	4615      	mov	r5, r2
 80088c6:	461e      	mov	r6, r3
#else
    Aes aes[1];
#endif
    int ret;

    if (key == NULL || iv == NULL || (authIn == NULL && authInSz != 0) ||
 80088c8:	4607      	mov	r7, r0
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d048      	beq.n	8008960 <wc_Gmac+0xac>
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	d046      	beq.n	8008960 <wc_Gmac+0xac>
 80088d2:	f1b9 0f00 	cmp.w	r9, #0
 80088d6:	d102      	bne.n	80088de <wc_Gmac+0x2a>
 80088d8:	f1ba 0f00 	cmp.w	sl, #0
 80088dc:	d140      	bne.n	8008960 <wc_Gmac+0xac>
 80088de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d03d      	beq.n	8008960 <wc_Gmac+0xac>
        authTag == NULL || authTagSz == 0 || rng == NULL) {
 80088e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d03a      	beq.n	8008960 <wc_Gmac+0xac>
 80088ea:	f1bb 0f00 	cmp.w	fp, #0
 80088ee:	d037      	beq.n	8008960 <wc_Gmac+0xac>

        return BAD_FUNC_ARG;
    }

#ifdef WOLFSSL_SMALL_STACK
    if ((aes = (Aes *)XMALLOC(sizeof *aes, NULL,
 80088f0:	f44f 709c 	mov.w	r0, #312	; 0x138
 80088f4:	f012 fb54 	bl	801afa0 <malloc>
 80088f8:	4604      	mov	r4, r0
 80088fa:	b3a0      	cbz	r0, 8008966 <wc_Gmac+0xb2>
    int ret = 0;

    if (aes == NULL)
        return BAD_FUNC_ARG;

    aes->heap = heap;
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
        ret = wc_AesGcmSetKey(aes, key, keySz);
 8008902:	4639      	mov	r1, r7
 8008904:	4642      	mov	r2, r8
 8008906:	f7ff fd59 	bl	80083bc <wc_AesGcmSetKey>
        if (ret == 0)
 800890a:	4607      	mov	r7, r0
 800890c:	b9c0      	cbnz	r0, 8008940 <wc_Gmac+0x8c>
            ret = wc_AesGcmSetIV(aes, ivSz, NULL, 0, rng);
 800890e:	4603      	mov	r3, r0
 8008910:	4602      	mov	r2, r0
 8008912:	f8cd b000 	str.w	fp, [sp]
 8008916:	4631      	mov	r1, r6
 8008918:	4620      	mov	r0, r4
 800891a:	f7ff ff41 	bl	80087a0 <wc_AesGcmSetIV>
        if (ret == 0)
 800891e:	4607      	mov	r7, r0
 8008920:	b970      	cbnz	r0, 8008940 <wc_Gmac+0x8c>
            ret = wc_AesGcmEncrypt_ex(aes, NULL, NULL, 0, iv, ivSz,
 8008922:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008924:	9303      	str	r3, [sp, #12]
 8008926:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008928:	9500      	str	r5, [sp, #0]
 800892a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800892e:	4602      	mov	r2, r0
 8008930:	4603      	mov	r3, r0
 8008932:	4601      	mov	r1, r0
 8008934:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff ff61 	bl	8008800 <wc_AesGcmEncrypt_ex>
 800893e:	4607      	mov	r7, r0
    while (len--) *z++ = 0;
 8008940:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8008944:	4622      	mov	r2, r4
 8008946:	2000      	movs	r0, #0
 8008948:	428a      	cmp	r2, r1
 800894a:	d106      	bne.n	800895a <wc_Gmac+0xa6>
    XFREE(aes, NULL, DYNAMIC_TYPE_AES);
 800894c:	4620      	mov	r0, r4
 800894e:	f012 fb2f 	bl	801afb0 <free>
}
 8008952:	4638      	mov	r0, r7
 8008954:	b007      	add	sp, #28
 8008956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895a:	f802 0b01 	strb.w	r0, [r2], #1
 800895e:	e7f3      	b.n	8008948 <wc_Gmac+0x94>
        return BAD_FUNC_ARG;
 8008960:	f06f 07ac 	mvn.w	r7, #172	; 0xac
 8008964:	e7f5      	b.n	8008952 <wc_Gmac+0x9e>
        return MEMORY_E;
 8008966:	f06f 077c 	mvn.w	r7, #124	; 0x7c
 800896a:	e7f2      	b.n	8008952 <wc_Gmac+0x9e>

0800896c <wc_GmacVerify>:
{
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	b087      	sub	sp, #28
 8008972:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8008976:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800897a:	4688      	mov	r8, r1
 800897c:	4616      	mov	r6, r2
 800897e:	461f      	mov	r7, r3
    if (key == NULL || iv == NULL || (authIn == NULL && authInSz != 0) ||
 8008980:	4604      	mov	r4, r0
 8008982:	2800      	cmp	r0, #0
 8008984:	d03a      	beq.n	80089fc <wc_GmacVerify+0x90>
 8008986:	b3ca      	cbz	r2, 80089fc <wc_GmacVerify+0x90>
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	d102      	bne.n	8008994 <wc_GmacVerify+0x28>
 800898e:	f1bb 0f00 	cmp.w	fp, #0
 8008992:	d133      	bne.n	80089fc <wc_GmacVerify+0x90>
 8008994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008996:	b38b      	cbz	r3, 80089fc <wc_GmacVerify+0x90>
        authTag == NULL || authTagSz == 0 || authTagSz > AES_BLOCK_SIZE) {
 8008998:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800899c:	2b0f      	cmp	r3, #15
 800899e:	d82d      	bhi.n	80089fc <wc_GmacVerify+0x90>
    if ((aes = (Aes *)XMALLOC(sizeof *aes, NULL,
 80089a0:	f44f 709c 	mov.w	r0, #312	; 0x138
 80089a4:	f012 fafc 	bl	801afa0 <malloc>
 80089a8:	4605      	mov	r5, r0
 80089aa:	b350      	cbz	r0, 8008a02 <wc_GmacVerify+0x96>
    aes->heap = heap;
 80089ac:	2300      	movs	r3, #0
        ret = wc_AesGcmSetKey(aes, key, keySz);
 80089ae:	4621      	mov	r1, r4
    aes->heap = heap;
 80089b0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        ret = wc_AesGcmSetKey(aes, key, keySz);
 80089b4:	4642      	mov	r2, r8
 80089b6:	f7ff fd01 	bl	80083bc <wc_AesGcmSetKey>
        if (ret == 0)
 80089ba:	4604      	mov	r4, r0
 80089bc:	b970      	cbnz	r0, 80089dc <wc_GmacVerify+0x70>
            ret = wc_AesGcmDecrypt(aes, NULL, NULL, 0, iv, ivSz,
 80089be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80089c4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80089c8:	4602      	mov	r2, r0
 80089ca:	4603      	mov	r3, r0
 80089cc:	4601      	mov	r1, r0
 80089ce:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80089d2:	9600      	str	r6, [sp, #0]
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7ff fe49 	bl	800866c <wc_AesGcmDecrypt>
 80089da:	4604      	mov	r4, r0
 80089dc:	f505 729c 	add.w	r2, r5, #312	; 0x138
 80089e0:	462b      	mov	r3, r5
 80089e2:	2100      	movs	r1, #0
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d106      	bne.n	80089f6 <wc_GmacVerify+0x8a>
    XFREE(aes, NULL, DYNAMIC_TYPE_AES);
 80089e8:	4628      	mov	r0, r5
 80089ea:	f012 fae1 	bl	801afb0 <free>
}
 80089ee:	4620      	mov	r0, r4
 80089f0:	b007      	add	sp, #28
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f3      	b.n	80089e4 <wc_GmacVerify+0x78>
        return BAD_FUNC_ARG;
 80089fc:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8008a00:	e7f5      	b.n	80089ee <wc_GmacVerify+0x82>
        return MEMORY_E;
 8008a02:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8008a06:	e7f2      	b.n	80089ee <wc_GmacVerify+0x82>

08008a08 <wc_GmacSetKey>:
    if (gmac == NULL || key == NULL) {
 8008a08:	b110      	cbz	r0, 8008a10 <wc_GmacSetKey+0x8>
 8008a0a:	b109      	cbz	r1, 8008a10 <wc_GmacSetKey+0x8>
    return wc_AesGcmSetKey(&gmac->aes, key, len);
 8008a0c:	f7ff bcd6 	b.w	80083bc <wc_AesGcmSetKey>
}
 8008a10:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008a14:	4770      	bx	lr

08008a16 <wc_GmacUpdate>:
{
 8008a16:	b510      	push	{r4, lr}
 8008a18:	b086      	sub	sp, #24
    if (gmac == NULL) {
 8008a1a:	b178      	cbz	r0, 8008a3c <wc_GmacUpdate+0x26>
    return wc_AesGcmEncrypt(&gmac->aes, NULL, NULL, 0, iv, ivSz,
 8008a1c:	9c08      	ldr	r4, [sp, #32]
 8008a1e:	9100      	str	r1, [sp, #0]
 8008a20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	461a      	mov	r2, r3
 8008a32:	4619      	mov	r1, r3
 8008a34:	f7ff fd92 	bl	800855c <wc_AesGcmEncrypt>
}
 8008a38:	b006      	add	sp, #24
 8008a3a:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 8008a3c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8008a40:	e7fa      	b.n	8008a38 <wc_GmacUpdate+0x22>

08008a42 <wc_AesInit>:
    if (aes == NULL)
 8008a42:	b118      	cbz	r0, 8008a4c <wc_AesInit+0xa>
    aes->heap = heap;
 8008a44:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
#endif

#if defined(WOLFSSL_RENESAS_FSPSM)
    XMEMSET(&aes->ctx, 0, sizeof(aes->ctx));
#endif
    return ret;
 8008a48:	2000      	movs	r0, #0
 8008a4a:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8008a4c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8008a50:	4770      	bx	lr

08008a52 <wc_AesFree>:
#if ((defined(WOLFSSL_RENESAS_FSPSM_TLS) || \
    defined(WOLFSSL_RENESAS_FSPSM_CRYPTONLY)) && \
    !defined(NO_WOLFSSL_RENESAS_FSPSM_AES))
    wc_fspsm_Aesfree(aes);
#endif
}
 8008a52:	4770      	bx	lr

08008a54 <wc_AesGetKeySize>:

int wc_AesGetKeySize(Aes* aes, word32* keySize)
{
    int ret = 0;

    if (aes == NULL || keySize == NULL) {
 8008a54:	b1a0      	cbz	r0, 8008a80 <wc_AesGetKeySize+0x2c>
 8008a56:	b199      	cbz	r1, 8008a80 <wc_AesGetKeySize+0x2c>
#endif
#if defined(WOLFSSL_CRYPTOCELL) && defined(WOLFSSL_CRYPTOCELL_AES)
    *keySize = aes->ctx.key.keySize;
    return ret;
#endif
    switch (aes->rounds) {
 8008a58:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 8008a5c:	2b0c      	cmp	r3, #12
 8008a5e:	d008      	beq.n	8008a72 <wc_AesGetKeySize+0x1e>
 8008a60:	2b0e      	cmp	r3, #14
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	d008      	beq.n	8008a7a <wc_AesGetKeySize+0x26>
 8008a68:	2b0a      	cmp	r3, #10
 8008a6a:	d108      	bne.n	8008a7e <wc_AesGetKeySize+0x2a>
#ifdef WOLFSSL_AES_128
    case 10:
        *keySize = 16;
 8008a6c:	2310      	movs	r3, #16
        *keySize = 24;
        break;
#endif
#ifdef WOLFSSL_AES_256
    case 14:
        *keySize = 32;
 8008a6e:	600b      	str	r3, [r1, #0]
        break;
 8008a70:	4770      	bx	lr
        *keySize = 24;
 8008a72:	2318      	movs	r3, #24
 8008a74:	600b      	str	r3, [r1, #0]
    int ret = 0;
 8008a76:	2000      	movs	r0, #0
        break;
 8008a78:	4770      	bx	lr
        *keySize = 32;
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	e7f7      	b.n	8008a6e <wc_AesGetKeySize+0x1a>
#endif
    default:
        *keySize = 0;
 8008a7e:	6008      	str	r0, [r1, #0]
        return BAD_FUNC_ARG;
 8008a80:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        ret = BAD_FUNC_ARG;
    }

    return ret;
}
 8008a84:	4770      	bx	lr

08008a86 <ByteReverseWord32>:
}
 8008a86:	ba00      	rev	r0, r0
 8008a88:	4770      	bx	lr

08008a8a <IPERM>:
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 8008a8a:	680b      	ldr	r3, [r1, #0]
 8008a8c:	ea4f 7333 	mov.w	r3, r3, ror #28

    static WC_INLINE void IPERM(word32* left, word32* right)
    {
        word32 work;

        *right = rotlFixed(*right, 4U);
 8008a90:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xf0f0f0f0;
 8008a92:	6802      	ldr	r2, [r0, #0]
 8008a94:	4053      	eors	r3, r2
 8008a96:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
        *left ^= work;
 8008a9a:	405a      	eors	r2, r3
 8008a9c:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 20U);
 8008a9e:	680a      	ldr	r2, [r1, #0]
 8008aa0:	4053      	eors	r3, r2
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 8008aa2:	ea4f 5333 	mov.w	r3, r3, ror #20
 8008aa6:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xffff0000;
 8008aa8:	6802      	ldr	r2, [r0, #0]
 8008aaa:	4053      	eors	r3, r2
 8008aac:	0c1b      	lsrs	r3, r3, #16
 8008aae:	041b      	lsls	r3, r3, #16
        *left ^= work;
 8008ab0:	405a      	eors	r2, r3
 8008ab2:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 18U);
 8008ab4:	680a      	ldr	r2, [r1, #0]
 8008ab6:	4053      	eors	r3, r2
 8008ab8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008abc:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0x33333333;
 8008abe:	6802      	ldr	r2, [r0, #0]
 8008ac0:	4053      	eors	r3, r2
 8008ac2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
        *left ^= work;
 8008ac6:	405a      	eors	r2, r3
 8008ac8:	6002      	str	r2, [r0, #0]

        *right = rotrFixed(*right^work, 6U);
 8008aca:	680a      	ldr	r2, [r1, #0]
 8008acc:	4053      	eors	r3, r2
 8008ace:	ea4f 13b3 	mov.w	r3, r3, ror #6
 8008ad2:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0x00ff00ff;
 8008ad4:	6802      	ldr	r2, [r0, #0]
 8008ad6:	4053      	eors	r3, r2
 8008ad8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        *left ^= work;
 8008adc:	405a      	eors	r2, r3
 8008ade:	6002      	str	r2, [r0, #0]

        *right = rotlFixed(*right^work, 9U);
 8008ae0:	680a      	ldr	r2, [r1, #0]
 8008ae2:	4053      	eors	r3, r2
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 8008ae4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8008ae8:	600b      	str	r3, [r1, #0]
        work = (*left ^ *right) & 0xaaaaaaaa;
 8008aea:	6802      	ldr	r2, [r0, #0]
 8008aec:	4053      	eors	r3, r2
 8008aee:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        *left = rotlFixed(*left^work, 1U);
 8008af2:	405a      	eors	r2, r3
 8008af4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8008af8:	6002      	str	r2, [r0, #0]
        *right ^= work;
 8008afa:	680a      	ldr	r2, [r1, #0]
 8008afc:	4053      	eors	r3, r2
 8008afe:	600b      	str	r3, [r1, #0]
    }
 8008b00:	4770      	bx	lr

08008b02 <FPERM>:
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 8008b02:	680a      	ldr	r2, [r1, #0]
 8008b04:	ea4f 0272 	mov.w	r2, r2, ror #1

    static WC_INLINE void FPERM(word32* left, word32* right)
    {
        word32 work;

        *right = rotrFixed(*right, 1U);
 8008b08:	600a      	str	r2, [r1, #0]
        work = (*left ^ *right) & 0xaaaaaaaa;
 8008b0a:	6803      	ldr	r3, [r0, #0]
 8008b0c:	4053      	eors	r3, r2
 8008b0e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
        *right ^= work;
 8008b12:	405a      	eors	r2, r3
 8008b14:	600a      	str	r2, [r1, #0]

        *left = rotrFixed(*left^work, 9U);
 8008b16:	6802      	ldr	r2, [r0, #0]
 8008b18:	4053      	eors	r3, r2
 8008b1a:	ea4f 2373 	mov.w	r3, r3, ror #9
 8008b1e:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0x00ff00ff;
 8008b20:	680a      	ldr	r2, [r1, #0]
 8008b22:	4053      	eors	r3, r2
 8008b24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
        *right ^= work;
 8008b28:	405a      	eors	r2, r3
 8008b2a:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 6U);
 8008b2c:	6802      	ldr	r2, [r0, #0]
 8008b2e:	4053      	eors	r3, r2
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 8008b30:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8008b34:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0x33333333;
 8008b36:	680a      	ldr	r2, [r1, #0]
 8008b38:	4053      	eors	r3, r2
 8008b3a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
        *right ^= work;
 8008b3e:	405a      	eors	r2, r3
 8008b40:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 18U);
 8008b42:	6802      	ldr	r2, [r0, #0]
 8008b44:	4053      	eors	r3, r2
 8008b46:	ea4f 33b3 	mov.w	r3, r3, ror #14
 8008b4a:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0xffff0000;
 8008b4c:	680a      	ldr	r2, [r1, #0]
 8008b4e:	4053      	eors	r3, r2
 8008b50:	0c1b      	lsrs	r3, r3, #16
 8008b52:	041b      	lsls	r3, r3, #16
        *right ^= work;
 8008b54:	405a      	eors	r2, r3
 8008b56:	600a      	str	r2, [r1, #0]

        *left = rotlFixed(*left^work, 20U);
 8008b58:	6802      	ldr	r2, [r0, #0]
 8008b5a:	4053      	eors	r3, r2
 8008b5c:	ea4f 3333 	mov.w	r3, r3, ror #12
 8008b60:	6003      	str	r3, [r0, #0]
        work = (*left ^ *right) & 0xf0f0f0f0;
 8008b62:	680a      	ldr	r2, [r1, #0]
 8008b64:	4053      	eors	r3, r2
 8008b66:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
        *right ^= work;
 8008b6a:	405a      	eors	r2, r3
 8008b6c:	600a      	str	r2, [r1, #0]

        *left = rotrFixed(*left^work, 4U);
 8008b6e:	6802      	ldr	r2, [r0, #0]
 8008b70:	4053      	eors	r3, r2
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 8008b72:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008b76:	6003      	str	r3, [r0, #0]
    }
 8008b78:	4770      	bx	lr
	...

08008b7c <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
 8008b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        word32 l = *lIn, r = *rIn, i;
 8008b80:	f8d1 c000 	ldr.w	ip, [r1]
 8008b84:	6806      	ldr	r6, [r0, #0]

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
 8008b86:	4b49      	ldr	r3, [pc, #292]	; (8008cac <DesRawProcessBlock+0x130>)
 8008b88:	f102 0780 	add.w	r7, r2, #128	; 0x80
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
 8008b8c:	6814      	ldr	r4, [r2, #0]
 8008b8e:	ea84 1e3c 	eor.w	lr, r4, ip, ror #4
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
 8008b92:	6854      	ldr	r4, [r2, #4]
 8008b94:	ea8c 0404 	eor.w	r4, ip, r4
            l ^= Spbox[6][(work) & 0x3f]
 8008b98:	f00e 053f 	and.w	r5, lr, #63	; 0x3f
            l ^= Spbox[7][(work) & 0x3f]
 8008b9c:	f004 083f 	and.w	r8, r4, #63	; 0x3f
            l ^= Spbox[6][(work) & 0x3f]
 8008ba0:	f505 75c0 	add.w	r5, r5, #384	; 0x180
            l ^= Spbox[7][(work) & 0x3f]
 8008ba4:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
 8008ba8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8008bac:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8008bb0:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
 8008bb4:	f3ce 2805 	ubfx	r8, lr, #8, #6
 8008bb8:	f508 7880 	add.w	r8, r8, #256	; 0x100
        for (i=0; i<8; i++)
 8008bbc:	3210      	adds	r2, #16
            l ^= Spbox[7][(work) & 0x3f]
 8008bbe:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8008bc2:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
 8008bc6:	f3ce 4805 	ubfx	r8, lr, #16, #6
 8008bca:	f108 0880 	add.w	r8, r8, #128	; 0x80
              ^  Spbox[0][(work >> 24) & 0x3f];
 8008bce:	f3ce 6e05 	ubfx	lr, lr, #24, #6
            l ^= Spbox[7][(work) & 0x3f]
 8008bd2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8008bd6:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8008bda:	ea85 0508 	eor.w	r5, r5, r8
 8008bde:	ea85 050e 	eor.w	r5, r5, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
 8008be2:	f3c4 2e05 	ubfx	lr, r4, #8, #6
 8008be6:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
 8008bea:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8008bee:	ea85 050e 	eor.w	r5, r5, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
 8008bf2:	f3c4 4e05 	ubfx	lr, r4, #16, #6
 8008bf6:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
              ^  Spbox[1][(work >> 24) & 0x3f];
 8008bfa:	f3c4 6405 	ubfx	r4, r4, #24, #6
 8008bfe:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
 8008c00:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8008c04:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8008c08:	ea85 050e 	eor.w	r5, r5, lr
 8008c0c:	4065      	eors	r5, r4
 8008c0e:	406e      	eors	r6, r5
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
 8008c10:	f852 4c04 	ldr.w	r4, [r2, #-4]
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 8008c14:	f852 5c08 	ldr.w	r5, [r2, #-8]
            work = l ^ kptr[4*i+3];
 8008c18:	ea86 0e04 	eor.w	lr, r6, r4
            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 8008c1c:	ea85 1536 	eor.w	r5, r5, r6, ror #4
            r ^= Spbox[6][(work) & 0x3f]
 8008c20:	f005 043f 	and.w	r4, r5, #63	; 0x3f
            r ^= Spbox[7][(work) & 0x3f]
 8008c24:	f00e 083f 	and.w	r8, lr, #63	; 0x3f
            r ^= Spbox[6][(work) & 0x3f]
 8008c28:	f504 74c0 	add.w	r4, r4, #384	; 0x180
            r ^= Spbox[7][(work) & 0x3f]
 8008c2c:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
 8008c30:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8008c34:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8008c38:	ea84 0408 	eor.w	r4, r4, r8
 8008c3c:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
 8008c40:	f3ce 2c05 	ubfx	ip, lr, #8, #6
 8008c44:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
        for (i=0; i<8; i++)
 8008c48:	4297      	cmp	r7, r2
 8008c4a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8008c4e:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
 8008c52:	f3ce 4c05 	ubfx	ip, lr, #16, #6
 8008c56:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
              ^  Spbox[1][(work >> 24) & 0x3f];
 8008c5a:	f3ce 6e05 	ubfx	lr, lr, #24, #6
 8008c5e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8008c62:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 8008c66:	ea84 040c 	eor.w	r4, r4, ip
 8008c6a:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
 8008c6e:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[4][(work >> 8) & 0x3f]
 8008c72:	f3c5 2c05 	ubfx	ip, r5, #8, #6
 8008c76:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8008c7a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8008c7e:	ea84 040c 	eor.w	r4, r4, ip
              ^  Spbox[2][(work >> 16) & 0x3f]
 8008c82:	f3c5 4c05 	ubfx	ip, r5, #16, #6
 8008c86:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
              ^  Spbox[0][(work >> 24) & 0x3f];
 8008c8a:	f3c5 6505 	ubfx	r5, r5, #24, #6
 8008c8e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
            r ^= Spbox[7][(work) & 0x3f]
 8008c92:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8008c96:	ea84 040c 	eor.w	r4, r4, ip
 8008c9a:	ea84 0c05 	eor.w	ip, r4, r5
        for (i=0; i<8; i++)
 8008c9e:	f47f af75 	bne.w	8008b8c <DesRawProcessBlock+0x10>
        }

        *lIn = l; *rIn = r;
 8008ca2:	6006      	str	r6, [r0, #0]
 8008ca4:	f8c1 c000 	str.w	ip, [r1]
    }
 8008ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cac:	08021e20 	.word	0x08021e20

08008cb0 <DesSetKey>:
    {
 8008cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4606      	mov	r6, r0
        byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8008cb6:	2078      	movs	r0, #120	; 0x78
    {
 8008cb8:	468b      	mov	fp, r1
 8008cba:	4615      	mov	r5, r2
        byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8008cbc:	f012 f970 	bl	801afa0 <malloc>
        if (buffer == NULL)
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f000 8095 	beq.w	8008df2 <DesSetKey+0x142>
            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 8008cc8:	494b      	ldr	r1, [pc, #300]	; (8008df8 <DesSetKey+0x148>)
                    bytebit[m])                    /* and which bit of that byte  */
 8008cca:	4f4c      	ldr	r7, [pc, #304]	; (8008dfc <DesSetKey+0x14c>)
            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 8008ccc:	f100 0938 	add.w	r9, r0, #56	; 0x38
            byte* const  ks   = pcr  + 56;
 8008cd0:	f100 0870 	add.w	r8, r0, #112	; 0x70
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 8008cd4:	1e42      	subs	r2, r0, #1
 8008cd6:	3037      	adds	r0, #55	; 0x37
                l = pc1[j] - 1;                    /* integer bit location        */
 8008cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cdc:	3b01      	subs	r3, #1
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 8008cde:	ea4f 0ce3 	mov.w	ip, r3, asr #3
                m = l & 07;                        /* find bit                    */
 8008ce2:	f003 0307 	and.w	r3, r3, #7
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 8008ce6:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8008cea:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
                    ? 1 : 0;                       /* and store 1-bit result      */
 8008cee:	ea1c 0f03 	tst.w	ip, r3
 8008cf2:	bf14      	ite	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	2300      	moveq	r3, #0
 8008cf8:	f802 3f01 	strb.w	r3, [r2, #1]!
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 8008cfc:	4290      	cmp	r0, r2
 8008cfe:	d1eb      	bne.n	8008cd8 <DesSetKey+0x28>
 8008d00:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8008d04:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8008e00 <DesSetKey+0x150>
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	462e      	mov	r6, r5
 8008d0c:	462f      	mov	r7, r5
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
 8008d0e:	2208      	movs	r2, #8
 8008d10:	2100      	movs	r1, #0
 8008d12:	4640      	mov	r0, r8
 8008d14:	f012 f98c 	bl	801b030 <memset>
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 8008d18:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 8008d20:	201c      	movs	r0, #28
 8008d22:	4298      	cmp	r0, r3
 8008d24:	bfd4      	ite	le
 8008d26:	f1a3 001c 	suble.w	r0, r3, #28
 8008d2a:	4618      	movgt	r0, r3
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 8008d2c:	3201      	adds	r2, #1
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 8008d2e:	5c20      	ldrb	r0, [r4, r0]
                    pcr[j] =
 8008d30:	f801 0b01 	strb.w	r0, [r1], #1
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 8008d34:	2a38      	cmp	r2, #56	; 0x38
 8008d36:	f103 0301 	add.w	r3, r3, #1
 8008d3a:	d155      	bne.n	8008de8 <DesSetKey+0x138>
 8008d3c:	4831      	ldr	r0, [pc, #196]	; (8008e04 <DesSetKey+0x154>)
                for (j = 0; j < 48; j++) {        /* select bits individually     */
 8008d3e:	2300      	movs	r3, #0
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 8008d40:	f04f 0c06 	mov.w	ip, #6
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
 8008d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d48:	444a      	add	r2, r9
 8008d4a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8008d4e:	b16a      	cbz	r2, 8008d6c <DesSetKey+0xbc>
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 8008d50:	fbb3 f2fc 	udiv	r2, r3, ip
 8008d54:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8008dfc <DesSetKey+0x14c>
                        l= j % 6;                 /* mask it in if it's there     */
 8008d58:	fb0c 3112 	mls	r1, ip, r2, r3
                        ks[j/6] |= (byte)(bytebit[l] >> 2);
 8008d5c:	f85e e021 	ldr.w	lr, [lr, r1, lsl #2]
 8008d60:	f818 1002 	ldrb.w	r1, [r8, r2]
 8008d64:	ea41 01ae 	orr.w	r1, r1, lr, asr #2
 8008d68:	f808 1002 	strb.w	r1, [r8, r2]
                for (j = 0; j < 48; j++) {        /* select bits individually     */
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	2b30      	cmp	r3, #48	; 0x30
 8008d70:	d1e8      	bne.n	8008d44 <DesSetKey+0x94>
                         | ((word32) ks[2] << 16)
 8008d72:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
                out[2*i] = ((word32) ks[0] << 24)
 8008d76:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
                         | ((word32) ks[2] << 16)
 8008d7a:	041b      	lsls	r3, r3, #16
 8008d7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[6]);
 8008d80:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8008d84:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
 8008d86:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
                         | ((word32) ks[6]);
 8008d8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
 8008d8e:	603b      	str	r3, [r7, #0]
                             | ((word32) ks[3] << 16)
 8008d90:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
                out[2*i + 1] = ((word32) ks[1] << 24)
 8008d94:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
                             | ((word32) ks[3] << 16)
 8008d98:	041b      	lsls	r3, r3, #16
 8008d9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[7]);
 8008d9e:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 8008da2:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
 8008da4:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
                             | ((word32) ks[7]);
 8008da8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
 8008dac:	607b      	str	r3, [r7, #4]
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	3708      	adds	r7, #8
 8008db2:	42bb      	cmp	r3, r7
 8008db4:	d1ab      	bne.n	8008d0e <DesSetKey+0x5e>
            if (dir == DES_DECRYPTION) {
 8008db6:	f1bb 0f01 	cmp.w	fp, #1
 8008dba:	d10e      	bne.n	8008dda <DesSetKey+0x12a>
 8008dbc:	f105 0340 	add.w	r3, r5, #64	; 0x40
                    out[i] = out[DES_KS_SIZE - 2 - i];
 8008dc0:	6fa9      	ldr	r1, [r5, #120]	; 0x78
                    word32 swap = out[i];
 8008dc2:	6832      	ldr	r2, [r6, #0]
                    out[i] = out[DES_KS_SIZE - 2 - i];
 8008dc4:	6031      	str	r1, [r6, #0]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
 8008dc6:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
                    out[DES_KS_SIZE - 2 - i] = swap;
 8008dc8:	67aa      	str	r2, [r5, #120]	; 0x78
                    swap = out[i + 1];
 8008dca:	6872      	ldr	r2, [r6, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
 8008dcc:	6071      	str	r1, [r6, #4]
                for (i = 0; i < 16; i += 2) {
 8008dce:	3608      	adds	r6, #8
 8008dd0:	42b3      	cmp	r3, r6
                    out[DES_KS_SIZE - 1 - i] = swap;
 8008dd2:	67ea      	str	r2, [r5, #124]	; 0x7c
                for (i = 0; i < 16; i += 2) {
 8008dd4:	f1a5 0508 	sub.w	r5, r5, #8
 8008dd8:	d1f2      	bne.n	8008dc0 <DesSetKey+0x110>
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f012 f8e8 	bl	801afb0 <free>
        return 0;
 8008de0:	2000      	movs	r0, #0
    }
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 8008de8:	2a1c      	cmp	r2, #28
 8008dea:	bfb4      	ite	lt
 8008dec:	201c      	movlt	r0, #28
 8008dee:	2038      	movge	r0, #56	; 0x38
 8008df0:	e797      	b.n	8008d22 <DesSetKey+0x72>
            return MEMORY_E;
 8008df2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8008df6:	e7f4      	b.n	8008de2 <DesSetKey+0x132>
 8008df8:	08022640 	.word	0x08022640
 8008dfc:	08022620 	.word	0x08022620
 8008e00:	080226a8 	.word	0x080226a8
 8008e04:	08022678 	.word	0x08022678

08008e08 <DesProcessBlock>:

    static void DesProcessBlock(Des* des, const byte* in, byte* out)
    {
 8008e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	4605      	mov	r5, r0
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
 8008e0e:	2204      	movs	r2, #4
 8008e10:	4668      	mov	r0, sp
    {
 8008e12:	460e      	mov	r6, r1
        XMEMCPY(&l, in, sizeof(l));
 8008e14:	f012 f8e4 	bl	801afe0 <memcpy>
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
 8008e18:	2204      	movs	r2, #4
 8008e1a:	18b1      	adds	r1, r6, r2
 8008e1c:	eb0d 0002 	add.w	r0, sp, r2
 8008e20:	f012 f8de 	bl	801afe0 <memcpy>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 8008e24:	9800      	ldr	r0, [sp, #0]
 8008e26:	f7ff fe2e 	bl	8008a86 <ByteReverseWord32>
 8008e2a:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 8008e2c:	9801      	ldr	r0, [sp, #4]
 8008e2e:	f7ff fe2a 	bl	8008a86 <ByteReverseWord32>
        #endif
        IPERM(&l,&r);
 8008e32:	a901      	add	r1, sp, #4
            r = ByteReverseWord32(r);
 8008e34:	9001      	str	r0, [sp, #4]
        IPERM(&l,&r);
 8008e36:	4668      	mov	r0, sp
 8008e38:	f7ff fe27 	bl	8008a8a <IPERM>

        DesRawProcessBlock(&l, &r, des->key);
 8008e3c:	f105 0210 	add.w	r2, r5, #16
 8008e40:	f7ff fe9c 	bl	8008b7c <DesRawProcessBlock>

        FPERM(&l,&r);
 8008e44:	f7ff fe5d 	bl	8008b02 <FPERM>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 8008e48:	9800      	ldr	r0, [sp, #0]
 8008e4a:	f7ff fe1c 	bl	8008a86 <ByteReverseWord32>
 8008e4e:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 8008e50:	9801      	ldr	r0, [sp, #4]
 8008e52:	f7ff fe18 	bl	8008a86 <ByteReverseWord32>
        #endif
        XMEMCPY(out, &r, sizeof(r));
 8008e56:	2204      	movs	r2, #4
            r = ByteReverseWord32(r);
 8008e58:	9001      	str	r0, [sp, #4]
        XMEMCPY(out, &r, sizeof(r));
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f012 f8c0 	bl	801afe0 <memcpy>
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
 8008e60:	2204      	movs	r2, #4
 8008e62:	4669      	mov	r1, sp
 8008e64:	18a0      	adds	r0, r4, r2
 8008e66:	f012 f8bb 	bl	801afe0 <memcpy>
    }
 8008e6a:	b002      	add	sp, #8
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}

08008e6e <Des3ProcessBlock>:

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
 8008e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e70:	4604      	mov	r4, r0
 8008e72:	4615      	mov	r5, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
 8008e74:	4668      	mov	r0, sp
 8008e76:	2204      	movs	r2, #4
    {
 8008e78:	460e      	mov	r6, r1
        XMEMCPY(&l, in, sizeof(l));
 8008e7a:	f012 f8b1 	bl	801afe0 <memcpy>
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
 8008e7e:	2204      	movs	r2, #4
 8008e80:	18b1      	adds	r1, r6, r2
 8008e82:	eb0d 0002 	add.w	r0, sp, r2
 8008e86:	f012 f8ab 	bl	801afe0 <memcpy>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 8008e8a:	9800      	ldr	r0, [sp, #0]
 8008e8c:	f7ff fdfb 	bl	8008a86 <ByteReverseWord32>
 8008e90:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 8008e92:	9801      	ldr	r0, [sp, #4]
 8008e94:	f7ff fdf7 	bl	8008a86 <ByteReverseWord32>
        #endif
        IPERM(&l,&r);
 8008e98:	a901      	add	r1, sp, #4
            r = ByteReverseWord32(r);
 8008e9a:	9001      	str	r0, [sp, #4]
        IPERM(&l,&r);
 8008e9c:	4668      	mov	r0, sp
 8008e9e:	f7ff fdf4 	bl	8008a8a <IPERM>

        DesRawProcessBlock(&l, &r, des->key[0]);
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	f7ff fe6a 	bl	8008b7c <DesRawProcessBlock>
        DesRawProcessBlock(&r, &l, des->key[1]);
 8008ea8:	a801      	add	r0, sp, #4
 8008eaa:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8008eae:	4669      	mov	r1, sp
 8008eb0:	f7ff fe64 	bl	8008b7c <DesRawProcessBlock>
        DesRawProcessBlock(&l, &r, des->key[2]);
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8008eba:	4668      	mov	r0, sp
 8008ebc:	f7ff fe5e 	bl	8008b7c <DesRawProcessBlock>

        FPERM(&l,&r);
 8008ec0:	f7ff fe1f 	bl	8008b02 <FPERM>
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
 8008ec4:	9800      	ldr	r0, [sp, #0]
 8008ec6:	f7ff fdde 	bl	8008a86 <ByteReverseWord32>
 8008eca:	9000      	str	r0, [sp, #0]
            r = ByteReverseWord32(r);
 8008ecc:	9801      	ldr	r0, [sp, #4]
 8008ece:	f7ff fdda 	bl	8008a86 <ByteReverseWord32>
        #endif
        XMEMCPY(out, &r, sizeof(r));
 8008ed2:	2204      	movs	r2, #4
            r = ByteReverseWord32(r);
 8008ed4:	9001      	str	r0, [sp, #4]
        XMEMCPY(out, &r, sizeof(r));
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f012 f882 	bl	801afe0 <memcpy>
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
 8008edc:	2204      	movs	r2, #4
 8008ede:	4669      	mov	r1, sp
 8008ee0:	18a8      	adds	r0, r5, r2
 8008ee2:	f012 f87d 	bl	801afe0 <memcpy>
    }
 8008ee6:	b002      	add	sp, #8
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}

08008eea <xorbuf.constprop.0>:
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8008eea:	ea81 0300 	eor.w	r3, r1, r0
 8008eee:	f013 0f03 	tst.w	r3, #3
WC_MISC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 8008ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef4:	f04f 0308 	mov.w	r3, #8
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8008ef8:	d019      	beq.n	8008f2e <xorbuf.constprop.0+0x44>
    for (i = 0; i < count; i++)
 8008efa:	3901      	subs	r1, #1
 8008efc:	4403      	add	r3, r0
 8008efe:	4298      	cmp	r0, r3
 8008f00:	d120      	bne.n	8008f44 <xorbuf.constprop.0+0x5a>
}
 8008f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(b++) ^= *(m++);
 8008f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f08:	f810 5b01 	ldrb.w	r5, [r0], #1
 8008f0c:	406a      	eors	r2, r5
 8008f0e:	f800 2c01 	strb.w	r2, [r0, #-1]
            count--;
 8008f12:	3b01      	subs	r3, #1
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8008f14:	b10c      	cbz	r4, 8008f1a <xorbuf.constprop.0+0x30>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1f4      	bne.n	8008f04 <xorbuf.constprop.0+0x1a>
    for (i = 0; i < n; i++)
 8008f1a:	f023 0503 	bic.w	r5, r3, #3
 8008f1e:	194e      	adds	r6, r1, r5
 8008f20:	4602      	mov	r2, r0
 8008f22:	42b1      	cmp	r1, r6
 8008f24:	d106      	bne.n	8008f34 <xorbuf.constprop.0+0x4a>
 8008f26:	4428      	add	r0, r5
        count %= WOLFSSL_WORD_SIZE;
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	e7e5      	b.n	8008efa <xorbuf.constprop.0+0x10>
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8008f2e:	f000 0403 	and.w	r4, r0, #3
 8008f32:	e7ef      	b.n	8008f14 <xorbuf.constprop.0+0x2a>
        *((*r)++) ^= *((*a)++);
 8008f34:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f38:	f851 7b04 	ldr.w	r7, [r1], #4
 8008f3c:	407c      	eors	r4, r7
 8008f3e:	f842 4c04 	str.w	r4, [r2, #-4]
    for (i = 0; i < n; i++)
 8008f42:	e7ee      	b.n	8008f22 <xorbuf.constprop.0+0x38>
        b[i] ^= m[i];
 8008f44:	7802      	ldrb	r2, [r0, #0]
 8008f46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f4a:	4062      	eors	r2, r4
 8008f4c:	f800 2b01 	strb.w	r2, [r0], #1
    for (i = 0; i < count; i++)
 8008f50:	e7d5      	b.n	8008efe <xorbuf.constprop.0+0x14>

08008f52 <wc_Des_CbcEncrypt>:

    int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
    {
 8008f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f54:	f023 0607 	bic.w	r6, r3, #7
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	4416      	add	r6, r2
        word32 blocks = sz / DES_BLOCK_SIZE;

        while (blocks--) {
 8008f60:	42b4      	cmp	r4, r6
 8008f62:	d101      	bne.n	8008f68 <wc_Des_CbcEncrypt+0x16>

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
    }
 8008f64:	2000      	movs	r0, #0
 8008f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f7ff ffbd 	bl	8008eea <xorbuf.constprop.0>
            DesProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
 8008f70:	462a      	mov	r2, r5
 8008f72:	4629      	mov	r1, r5
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7ff ff47 	bl	8008e08 <DesProcessBlock>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f012 f82e 	bl	801afe0 <memcpy>
            out += DES_BLOCK_SIZE;
 8008f84:	3708      	adds	r7, #8
            in  += DES_BLOCK_SIZE;
 8008f86:	3408      	adds	r4, #8
 8008f88:	e7ea      	b.n	8008f60 <wc_Des_CbcEncrypt+0xe>

08008f8a <wc_Des_CbcDecrypt>:

    int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
    {
 8008f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	f023 0707 	bic.w	r7, r3, #7
 8008f92:	4605      	mov	r5, r0
 8008f94:	460e      	mov	r6, r1
 8008f96:	4614      	mov	r4, r2
 8008f98:	4417      	add	r7, r2
        word32 blocks = sz / DES_BLOCK_SIZE;

        while (blocks--) {
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 8008f9a:	f100 0808 	add.w	r8, r0, #8
        while (blocks--) {
 8008f9e:	42bc      	cmp	r4, r7
 8008fa0:	d102      	bne.n	8008fa8 <wc_Des_CbcDecrypt+0x1e>

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
    }
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 8008fa8:	4621      	mov	r1, r4
 8008faa:	2208      	movs	r2, #8
 8008fac:	4640      	mov	r0, r8
 8008fae:	f012 f817 	bl	801afe0 <memcpy>
            DesProcessBlock(des, (byte*)des->tmp, out);
 8008fb2:	4632      	mov	r2, r6
 8008fb4:	4641      	mov	r1, r8
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7ff ff26 	bl	8008e08 <DesProcessBlock>
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7ff ff93 	bl	8008eea <xorbuf.constprop.0>
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 8008fc4:	2208      	movs	r2, #8
 8008fc6:	4641      	mov	r1, r8
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f012 f809 	bl	801afe0 <memcpy>
            out += DES_BLOCK_SIZE;
 8008fce:	3608      	adds	r6, #8
            in  += DES_BLOCK_SIZE;
 8008fd0:	3408      	adds	r4, #8
 8008fd2:	e7e4      	b.n	8008f9e <wc_Des_CbcDecrypt+0x14>

08008fd4 <wc_Des3_CbcEncrypt>:

    int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
 8008fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd8:	460e      	mov	r6, r1
 8008fda:	4614      	mov	r4, r2
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
 8008fdc:	4607      	mov	r7, r0
 8008fde:	b1e0      	cbz	r0, 800901a <wc_Des3_CbcEncrypt+0x46>
 8008fe0:	b1d9      	cbz	r1, 800901a <wc_Des3_CbcEncrypt+0x46>
 8008fe2:	b1d2      	cbz	r2, 800901a <wc_Des3_CbcEncrypt+0x46>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
        while (blocks--) {
 8008fe4:	f023 0307 	bic.w	r3, r3, #7
 8008fe8:	18d5      	adds	r5, r2, r3
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 8008fea:	f500 78c0 	add.w	r8, r0, #384	; 0x180
        while (blocks--) {
 8008fee:	42ac      	cmp	r4, r5
 8008ff0:	d102      	bne.n	8008ff8 <wc_Des3_CbcEncrypt+0x24>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
 8008ff2:	2000      	movs	r0, #0
    }
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	f7ff ff75 	bl	8008eea <xorbuf.constprop.0>
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
 8009000:	4642      	mov	r2, r8
 8009002:	4641      	mov	r1, r8
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ff32 	bl	8008e6e <Des3ProcessBlock>
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
 800900a:	4630      	mov	r0, r6
 800900c:	2208      	movs	r2, #8
 800900e:	4641      	mov	r1, r8
 8009010:	f011 ffe6 	bl	801afe0 <memcpy>
            out += DES_BLOCK_SIZE;
 8009014:	3608      	adds	r6, #8
            in  += DES_BLOCK_SIZE;
 8009016:	3408      	adds	r4, #8
 8009018:	e7e9      	b.n	8008fee <wc_Des3_CbcEncrypt+0x1a>
            return BAD_FUNC_ARG;
 800901a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800901e:	e7e9      	b.n	8008ff4 <wc_Des3_CbcEncrypt+0x20>

08009020 <wc_Des3_CbcDecrypt>:


    int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	460e      	mov	r6, r1
 8009026:	4614      	mov	r4, r2
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
 8009028:	4607      	mov	r7, r0
 800902a:	b318      	cbz	r0, 8009074 <wc_Des3_CbcDecrypt+0x54>
 800902c:	b311      	cbz	r1, 8009074 <wc_Des3_CbcDecrypt+0x54>
 800902e:	b30a      	cbz	r2, 8009074 <wc_Des3_CbcDecrypt+0x54>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
        while (blocks--) {
 8009030:	f023 0307 	bic.w	r3, r3, #7
 8009034:	18d5      	adds	r5, r2, r3
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 8009036:	f500 78c4 	add.w	r8, r0, #392	; 0x188
            Des3ProcessBlock(des, (byte*)des->tmp, out);
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 800903a:	f500 79c0 	add.w	r9, r0, #384	; 0x180
        while (blocks--) {
 800903e:	42ac      	cmp	r4, r5
 8009040:	d102      	bne.n	8009048 <wc_Des3_CbcDecrypt+0x28>
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);

            out += DES_BLOCK_SIZE;
            in  += DES_BLOCK_SIZE;
        }
        return 0;
 8009042:	2000      	movs	r0, #0
    }
 8009044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 8009048:	4621      	mov	r1, r4
 800904a:	2208      	movs	r2, #8
 800904c:	4640      	mov	r0, r8
 800904e:	f011 ffc7 	bl	801afe0 <memcpy>
            Des3ProcessBlock(des, (byte*)des->tmp, out);
 8009052:	4632      	mov	r2, r6
 8009054:	4641      	mov	r1, r8
 8009056:	4638      	mov	r0, r7
 8009058:	f7ff ff09 	bl	8008e6e <Des3ProcessBlock>
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 800905c:	4630      	mov	r0, r6
 800905e:	4649      	mov	r1, r9
 8009060:	f7ff ff43 	bl	8008eea <xorbuf.constprop.0>
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 8009064:	2208      	movs	r2, #8
 8009066:	4641      	mov	r1, r8
 8009068:	4648      	mov	r0, r9
 800906a:	f011 ffb9 	bl	801afe0 <memcpy>
            out += DES_BLOCK_SIZE;
 800906e:	3608      	adds	r6, #8
            in  += DES_BLOCK_SIZE;
 8009070:	3408      	adds	r4, #8
 8009072:	e7e4      	b.n	800903e <wc_Des3_CbcDecrypt+0x1e>
            return BAD_FUNC_ARG;
 8009074:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8009078:	e7e4      	b.n	8009044 <wc_Des3_CbcDecrypt+0x24>

0800907a <wc_Des_SetIV>:
#endif /* NEED_SOFT_DES */


void wc_Des_SetIV(Des* des, const byte* iv)
{
    if (des && iv) {
 800907a:	b128      	cbz	r0, 8009088 <wc_Des_SetIV+0xe>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 800907c:	2208      	movs	r2, #8
    if (des && iv) {
 800907e:	b109      	cbz	r1, 8009084 <wc_Des_SetIV+0xa>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 8009080:	f011 bfae 	b.w	801afe0 <memcpy>
    #if defined(STM32_CRYPTO) && !defined(STM32_CRYPTO_AES_ONLY) && defined(STM32_HAL_V2)
        ByteReverseWords(des->reg, des->reg, DES_BLOCK_SIZE);
    #endif
    }
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
 8009084:	f011 bfd4 	b.w	801b030 <memset>
}
 8009088:	4770      	bx	lr

0800908a <wc_Des_SetKey>:
    {
 800908a:	b570      	push	{r4, r5, r6, lr}
 800908c:	4606      	mov	r6, r0
 800908e:	460c      	mov	r4, r1
 8009090:	461d      	mov	r5, r3
        wc_Des_SetIV(des, iv);
 8009092:	4611      	mov	r1, r2
 8009094:	f7ff fff1 	bl	800907a <wc_Des_SetIV>
        return DesSetKey(key, dir, des->key);
 8009098:	f106 0210 	add.w	r2, r6, #16
 800909c:	4629      	mov	r1, r5
 800909e:	4620      	mov	r0, r4
    }
 80090a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return DesSetKey(key, dir, des->key);
 80090a4:	f7ff be04 	b.w	8008cb0 <DesSetKey>

080090a8 <wc_Des3_SetIV>:

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
 80090a8:	b510      	push	{r4, lr}
    if (des == NULL) {
 80090aa:	b150      	cbz	r0, 80090c2 <wc_Des3_SetIV+0x1a>
        return BAD_FUNC_ARG;
    }
    if (iv) {
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 80090ac:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 80090b0:	2208      	movs	r2, #8
    if (iv) {
 80090b2:	b119      	cbz	r1, 80090bc <wc_Des3_SetIV+0x14>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 80090b4:	f011 ff94 	bl	801afe0 <memcpy>
    #endif
    }
    else
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);

    return 0;
 80090b8:	2000      	movs	r0, #0
}
 80090ba:	bd10      	pop	{r4, pc}
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
 80090bc:	f011 ffb8 	bl	801b030 <memset>
 80090c0:	e7fa      	b.n	80090b8 <wc_Des3_SetIV+0x10>
        return BAD_FUNC_ARG;
 80090c2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80090c6:	e7f8      	b.n	80090ba <wc_Des3_SetIV+0x12>

080090c8 <wc_Des3_SetKey>:
    {
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	460e      	mov	r6, r1
 80090cc:	4617      	mov	r7, r2
 80090ce:	461d      	mov	r5, r3
        if (des == NULL || key == NULL || dir < 0) {
 80090d0:	4604      	mov	r4, r0
 80090d2:	b3b8      	cbz	r0, 8009144 <wc_Des3_SetKey+0x7c>
 80090d4:	b3b1      	cbz	r1, 8009144 <wc_Des3_SetKey+0x7c>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db34      	blt.n	8009144 <wc_Des3_SetKey+0x7c>
        XMEMSET(des->key, 0, sizeof(*(des->key)));
 80090da:	2280      	movs	r2, #128	; 0x80
 80090dc:	2100      	movs	r1, #0
 80090de:	f011 ffa7 	bl	801b030 <memset>
        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
 80090e2:	2204      	movs	r2, #4
 80090e4:	2100      	movs	r1, #0
 80090e6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 80090ea:	f011 ffa1 	bl	801b030 <memset>
        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
 80090ee:	2204      	movs	r2, #4
 80090f0:	2100      	movs	r1, #0
 80090f2:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 80090f6:	f011 ff9b 	bl	801b030 <memset>
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	bf0c      	ite	eq
 80090fe:	2000      	moveq	r0, #0
 8009100:	2010      	movne	r0, #16
 8009102:	4622      	mov	r2, r4
 8009104:	4629      	mov	r1, r5
 8009106:	4430      	add	r0, r6
 8009108:	f7ff fdd2 	bl	8008cb0 <DesSetKey>
        if (ret != 0)
 800910c:	b9e0      	cbnz	r0, 8009148 <wc_Des3_SetKey+0x80>
        ret = DesSetKey(key + 8, !dir, des->key[1]);
 800910e:	fab5 f185 	clz	r1, r5
 8009112:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8009116:	0949      	lsrs	r1, r1, #5
 8009118:	f106 0008 	add.w	r0, r6, #8
 800911c:	f7ff fdc8 	bl	8008cb0 <DesSetKey>
        if (ret != 0)
 8009120:	b990      	cbnz	r0, 8009148 <wc_Des3_SetKey+0x80>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
 8009122:	2d01      	cmp	r5, #1
 8009124:	bf0c      	ite	eq
 8009126:	2000      	moveq	r0, #0
 8009128:	2010      	movne	r0, #16
 800912a:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800912e:	4629      	mov	r1, r5
 8009130:	4430      	add	r0, r6
 8009132:	f7ff fdbd 	bl	8008cb0 <DesSetKey>
        if (ret != 0)
 8009136:	b938      	cbnz	r0, 8009148 <wc_Des3_SetKey+0x80>
        return wc_Des3_SetIV(des, iv);
 8009138:	4639      	mov	r1, r7
 800913a:	4620      	mov	r0, r4
    }
 800913c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return wc_Des3_SetIV(des, iv);
 8009140:	f7ff bfb2 	b.w	80090a8 <wc_Des3_SetIV>
            return BAD_FUNC_ARG;
 8009144:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800914a <wc_Des3Init>:

/* Initialize Des3 for use with async device */
int wc_Des3Init(Des3* des3, void* heap, int devId)
{
    int ret = 0;
    if (des3 == NULL)
 800914a:	b118      	cbz	r0, 8009154 <wc_Des3Init+0xa>
        return BAD_FUNC_ARG;

    des3->heap = heap;
 800914c:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
#if defined(WOLFSSL_CHECK_MEM_ZERO) && (defined(WOLF_CRYPTO_CB) || \
        (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)))
    wc_MemZero_Add("DES3 devKey", &des3->devKey, sizeof(des3->devKey));
#endif

    return ret;
 8009150:	2000      	movs	r0, #0
 8009152:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8009154:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8009158:	4770      	bx	lr

0800915a <wc_Des3Free>:
    ForceZero(des3->devKey, sizeof(des3->devKey));
#endif
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(des3, sizeof(Des3));
#endif
}
 800915a:	4770      	bx	lr

0800915c <_ecc_is_point.constprop.0>:
#if !defined(WOLFSSL_ATECC508A) && !defined(WOLFSSL_ATECC608A) && \
    !defined(WOLFSSL_CRYPTOCELL) && !defined(WOLFSSL_SE050) && \
    !defined(WOLF_CRYPTO_CB_ONLY_ECC) && !defined(WOLFSSL_STM32_PKA)

/* is ecc point on curve described by dp ? */
static int _ecc_is_point(ecc_point* ecp, mp_int* a, mp_int* b, mp_int* prime)
 800915c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009160:	4681      	mov	r9, r0
#else
   mp_int  t1[1], t2[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
   t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8009162:	2068      	movs	r0, #104	; 0x68
static int _ecc_is_point(ecc_point* ecp, mp_int* a, mp_int* b, mp_int* prime)
 8009164:	4688      	mov	r8, r1
 8009166:	4617      	mov	r7, r2
   t1 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8009168:	f011 ff1a 	bl	801afa0 <malloc>
   if (t1 == NULL)
 800916c:	4605      	mov	r5, r0
 800916e:	b138      	cbz	r0, 8009180 <_ecc_is_point.constprop.0+0x24>
       return MEMORY_E;
   t2 = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 8009170:	2068      	movs	r0, #104	; 0x68
 8009172:	f011 ff15 	bl	801afa0 <malloc>
   if (t2 == NULL) {
 8009176:	4606      	mov	r6, r0
 8009178:	b928      	cbnz	r0, 8009186 <_ecc_is_point.constprop.0+0x2a>
       XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 800917a:	4628      	mov	r0, r5
 800917c:	f011 ff18 	bl	801afb0 <free>
       return MEMORY_E;
 8009180:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8009184:	e00f      	b.n	80091a6 <_ecc_is_point.constprop.0+0x4a>
       return MEMORY_E;
   }
#endif

   if ((err = mp_init_multi(t1, t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
 8009186:	2300      	movs	r3, #0
 8009188:	4601      	mov	r1, r0
 800918a:	e9cd 3300 	strd	r3, r3, [sp]
 800918e:	461a      	mov	r2, r3
 8009190:	4628      	mov	r0, r5
 8009192:	f010 f879 	bl	8019288 <mp_init_multi>
 8009196:	4604      	mov	r4, r0
 8009198:	b148      	cbz	r0, 80091ae <_ecc_is_point.constprop.0+0x52>
   mp_clear(t2);

   RESTORE_VECTOR_REGISTERS();

#ifdef WOLFSSL_SMALL_STACK
   XFREE(t2, NULL, DYNAMIC_TYPE_ECC);
 800919a:	4630      	mov	r0, r6
 800919c:	f011 ff08 	bl	801afb0 <free>
   XFREE(t1, NULL, DYNAMIC_TYPE_ECC);
 80091a0:	4628      	mov	r0, r5
 80091a2:	f011 ff05 	bl	801afb0 <free>
   (void)ecp;
   (void)prime;
#endif
   return WC_KEY_SIZE_E;
#endif
}
 80091a6:	4620      	mov	r0, r4
 80091a8:	b003      	add	sp, #12
 80091aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       err = mp_sqr(ecp->y, t1);
 80091ae:	4629      	mov	r1, r5
 80091b0:	f109 0068 	add.w	r0, r9, #104	; 0x68
 80091b4:	f011 f988 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 80091b8:	4604      	mov	r4, r0
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d159      	bne.n	8009272 <_ecc_is_point.constprop.0+0x116>
       err = mp_sqr(ecp->x, t2);
 80091be:	4631      	mov	r1, r6
 80091c0:	4648      	mov	r0, r9
 80091c2:	f011 f981 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 80091c6:	4604      	mov	r4, r0
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d152      	bne.n	8009272 <_ecc_is_point.constprop.0+0x116>
       err = mp_mod(t2, prime, t2);
 80091cc:	4632      	mov	r2, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	4630      	mov	r0, r6
 80091d2:	f010 fc33 	bl	8019a3c <mp_mod>
   if (err == MP_OKAY)
 80091d6:	4604      	mov	r4, r0
 80091d8:	2800      	cmp	r0, #0
 80091da:	d14a      	bne.n	8009272 <_ecc_is_point.constprop.0+0x116>
       err = mp_mul(ecp->x, t2, t2);
 80091dc:	4632      	mov	r2, r6
 80091de:	4631      	mov	r1, r6
 80091e0:	4648      	mov	r0, r9
 80091e2:	f010 f983 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 80091e6:	4604      	mov	r4, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d142      	bne.n	8009272 <_ecc_is_point.constprop.0+0x116>
       err = mp_submod(t1, t2, prime, t1);
 80091ec:	462b      	mov	r3, r5
 80091ee:	463a      	mov	r2, r7
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	f010 fc20 	bl	8019a38 <mp_submod>
      if (err == MP_OKAY)
 80091f8:	4604      	mov	r4, r0
 80091fa:	bbd0      	cbnz	r0, 8009272 <_ecc_is_point.constprop.0+0x116>
          err = mp_add(t1, ecp->x, t1);
 80091fc:	462a      	mov	r2, r5
 80091fe:	4649      	mov	r1, r9
 8009200:	4628      	mov	r0, r5
 8009202:	f010 f864 	bl	80192ce <mp_add>
      if (err == MP_OKAY)
 8009206:	4604      	mov	r4, r0
 8009208:	bb98      	cbnz	r0, 8009272 <_ecc_is_point.constprop.0+0x116>
          err = mp_add(t1, ecp->x, t1);
 800920a:	462a      	mov	r2, r5
 800920c:	4649      	mov	r1, r9
 800920e:	4628      	mov	r0, r5
 8009210:	f010 f85d 	bl	80192ce <mp_add>
      if (err == MP_OKAY)
 8009214:	4604      	mov	r4, r0
 8009216:	bb60      	cbnz	r0, 8009272 <_ecc_is_point.constprop.0+0x116>
          err = mp_add(t1, ecp->x, t1);
 8009218:	462a      	mov	r2, r5
 800921a:	4649      	mov	r1, r9
 800921c:	4628      	mov	r0, r5
 800921e:	f010 f856 	bl	80192ce <mp_add>
      if (err == MP_OKAY)
 8009222:	4604      	mov	r4, r0
 8009224:	bb28      	cbnz	r0, 8009272 <_ecc_is_point.constprop.0+0x116>
          err = mp_mod(t1, prime, t1);
 8009226:	462a      	mov	r2, r5
 8009228:	4639      	mov	r1, r7
 800922a:	4628      	mov	r0, r5
 800922c:	f010 fc06 	bl	8019a3c <mp_mod>
      err = mp_add(t1, prime, t1);
 8009230:	4604      	mov	r4, r0
   while (err == MP_OKAY && mp_isneg(t1)) {
 8009232:	b9f0      	cbnz	r0, 8009272 <_ecc_is_point.constprop.0+0x116>
 8009234:	686b      	ldr	r3, [r5, #4]
 8009236:	b973      	cbnz	r3, 8009256 <_ecc_is_point.constprop.0+0xfa>
   while (err == MP_OKAY && mp_cmp(t1, prime) != MP_LT) {
 8009238:	4639      	mov	r1, r7
 800923a:	4628      	mov	r0, r5
 800923c:	f010 f84f 	bl	80192de <mp_cmp>
 8009240:	3001      	adds	r0, #1
 8009242:	d10e      	bne.n	8009262 <_ecc_is_point.constprop.0+0x106>
       if (mp_cmp(t1, b) != MP_EQ) {
 8009244:	4641      	mov	r1, r8
 8009246:	4628      	mov	r0, r5
 8009248:	f010 f849 	bl	80192de <mp_cmp>
          err = IS_POINT_E;
 800924c:	1e04      	subs	r4, r0, #0
 800924e:	bf18      	it	ne
 8009250:	f06f 04d5 	mvnne.w	r4, #213	; 0xd5
 8009254:	e00d      	b.n	8009272 <_ecc_is_point.constprop.0+0x116>
      err = mp_add(t1, prime, t1);
 8009256:	462a      	mov	r2, r5
 8009258:	4639      	mov	r1, r7
 800925a:	4628      	mov	r0, r5
 800925c:	f010 f837 	bl	80192ce <mp_add>
 8009260:	e7e6      	b.n	8009230 <_ecc_is_point.constprop.0+0xd4>
      err = mp_sub(t1, prime, t1);
 8009262:	462a      	mov	r2, r5
 8009264:	4639      	mov	r1, r7
 8009266:	4628      	mov	r0, r5
 8009268:	f010 f833 	bl	80192d2 <mp_sub>
   while (err == MP_OKAY && mp_cmp(t1, prime) != MP_LT) {
 800926c:	4604      	mov	r4, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d0e2      	beq.n	8009238 <_ecc_is_point.constprop.0+0xdc>
   mp_clear(t1);
 8009272:	4628      	mov	r0, r5
 8009274:	f010 f803 	bl	801927e <mp_clear>
   mp_clear(t2);
 8009278:	4630      	mov	r0, r6
 800927a:	f010 f800 	bl	801927e <mp_clear>
 800927e:	e78c      	b.n	800919a <_ecc_is_point.constprop.0+0x3e>

08009280 <wc_ecc_new_point_ex.constprop.0>:
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
 8009280:	b573      	push	{r0, r1, r4, r5, r6, lr}
   p = *point;
 8009282:	6804      	ldr	r4, [r0, #0]
static int wc_ecc_new_point_ex(ecc_point** point, void* heap)
 8009284:	4606      	mov	r6, r0
   if (p == NULL) {
 8009286:	b92c      	cbnz	r4, 8009294 <wc_ecc_new_point_ex.constprop.0+0x14>
      p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
 8009288:	f44f 709c 	mov.w	r0, #312	; 0x138
 800928c:	f011 fe88 	bl	801afa0 <malloc>
   if (p == NULL) {
 8009290:	4604      	mov	r4, r0
 8009292:	b1c8      	cbz	r0, 80092c8 <wc_ecc_new_point_ex.constprop.0+0x48>
   XMEMSET(p, 0, sizeof(ecc_point));
 8009294:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009298:	2100      	movs	r1, #0
 800929a:	4620      	mov	r0, r4
 800929c:	f011 fec8 	bl	801b030 <memset>
   err = mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL);
 80092a0:	2300      	movs	r3, #0
 80092a2:	e9cd 3300 	strd	r3, r3, [sp]
 80092a6:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 80092aa:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80092ae:	4620      	mov	r0, r4
 80092b0:	f00f ffea 	bl	8019288 <mp_init_multi>
   if (err != MP_OKAY) {
 80092b4:	4605      	mov	r5, r0
 80092b6:	b128      	cbz	r0, 80092c4 <wc_ecc_new_point_ex.constprop.0+0x44>
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 80092b8:	4620      	mov	r0, r4
 80092ba:	f011 fe79 	bl	801afb0 <free>
}
 80092be:	4628      	mov	r0, r5
 80092c0:	b002      	add	sp, #8
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
   *point = p;
 80092c4:	6034      	str	r4, [r6, #0]
   return err;
 80092c6:	e7fa      	b.n	80092be <wc_ecc_new_point_ex.constprop.0+0x3e>
      return MEMORY_E;
 80092c8:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 80092cc:	e7f7      	b.n	80092be <wc_ecc_new_point_ex.constprop.0+0x3e>

080092ce <wc_ecc_del_point_ex.constprop.0>:
static void wc_ecc_del_point_ex(ecc_point* p, void* heap)
 80092ce:	b510      	push	{r4, lr}
   if (p != NULL) {
 80092d0:	4604      	mov	r4, r0
 80092d2:	b170      	cbz	r0, 80092f2 <wc_ecc_del_point_ex.constprop.0+0x24>
      mp_clear(p->x);
 80092d4:	f00f ffd3 	bl	801927e <mp_clear>
      mp_clear(p->y);
 80092d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80092dc:	f00f ffcf 	bl	801927e <mp_clear>
      mp_clear(p->z);
 80092e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80092e4:	f00f ffcb 	bl	801927e <mp_clear>
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 80092e8:	4620      	mov	r0, r4
}
 80092ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
 80092ee:	f011 be5f 	b.w	801afb0 <free>
}
 80092f2:	bd10      	pop	{r4, pc}

080092f4 <ecc_point_to_mont.constprop.0>:
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	4606      	mov	r6, r0
   NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 80092fa:	2068      	movs	r0, #104	; 0x68
static int ecc_point_to_mont(ecc_point* p, ecc_point* r, mp_int* modulus,
 80092fc:	460f      	mov	r7, r1
 80092fe:	4690      	mov	r8, r2
   NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 8009300:	f011 fe4e 	bl	801afa0 <malloc>
 8009304:	4605      	mov	r5, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d04c      	beq.n	80093a4 <ecc_point_to_mont.constprop.0+0xb0>
 800930a:	2268      	movs	r2, #104	; 0x68
 800930c:	2100      	movs	r1, #0
 800930e:	f011 fe8f 	bl	801b030 <memset>
       err = INIT_MP_INT_SIZE(mu, mp_bitsused(modulus));
 8009312:	4628      	mov	r0, r5
 8009314:	f00f ff9e 	bl	8019254 <mp_init>
   if (err == MP_OKAY) {
 8009318:	4604      	mov	r4, r0
 800931a:	bb10      	cbnz	r0, 8009362 <ecc_point_to_mont.constprop.0+0x6e>
       err = mp_montgomery_calc_normalization(mu, modulus);
 800931c:	4641      	mov	r1, r8
 800931e:	4628      	mov	r0, r5
 8009320:	f011 f81c 	bl	801a35c <mp_montgomery_calc_normalization>
       if (err == MP_OKAY) {
 8009324:	4604      	mov	r4, r0
 8009326:	b9c8      	cbnz	r0, 800935c <ecc_point_to_mont.constprop.0+0x68>
           if (mp_cmp_d(mu, 1) == MP_EQ) {
 8009328:	2101      	movs	r1, #1
 800932a:	4628      	mov	r0, r5
 800932c:	f00f ffd9 	bl	80192e2 <mp_cmp_d>
 8009330:	b9d8      	cbnz	r0, 800936a <ecc_point_to_mont.constprop.0+0x76>
               err = mp_copy(p->x, r->x);
 8009332:	4639      	mov	r1, r7
 8009334:	4630      	mov	r0, r6
 8009336:	f011 f801 	bl	801a33c <mp_copy>
               if (err == MP_OKAY)
 800933a:	4604      	mov	r4, r0
 800933c:	b970      	cbnz	r0, 800935c <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_copy(p->y, r->y);
 800933e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009342:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8009346:	f010 fff9 	bl	801a33c <mp_copy>
               if (err == MP_OKAY)
 800934a:	4604      	mov	r4, r0
 800934c:	b930      	cbnz	r0, 800935c <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_copy(p->z, r->z);
 800934e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8009352:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 8009356:	f010 fff1 	bl	801a33c <mp_copy>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 800935a:	4604      	mov	r4, r0
       mp_clear(mu);
 800935c:	4628      	mov	r0, r5
 800935e:	f00f ff8e 	bl	801927e <mp_clear>
   FREE_MP_INT_SIZE(mu, heap, DYNAMIC_TYPE_ECC);
 8009362:	4628      	mov	r0, r5
 8009364:	f011 fe24 	bl	801afb0 <free>
 8009368:	e01e      	b.n	80093a8 <ecc_point_to_mont.constprop.0+0xb4>
               err = mp_mulmod(p->x, mu, modulus, r->x);
 800936a:	463b      	mov	r3, r7
 800936c:	4642      	mov	r2, r8
 800936e:	4629      	mov	r1, r5
 8009370:	4630      	mov	r0, r6
 8009372:	f010 fb3c 	bl	80199ee <mp_mulmod>
               if (err == MP_OKAY)
 8009376:	4604      	mov	r4, r0
 8009378:	2800      	cmp	r0, #0
 800937a:	d1ef      	bne.n	800935c <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_mulmod(p->y, mu, modulus, r->y);
 800937c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009380:	4642      	mov	r2, r8
 8009382:	4629      	mov	r1, r5
 8009384:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8009388:	f010 fb31 	bl	80199ee <mp_mulmod>
               if (err == MP_OKAY)
 800938c:	4604      	mov	r4, r0
 800938e:	2800      	cmp	r0, #0
 8009390:	d1e4      	bne.n	800935c <ecc_point_to_mont.constprop.0+0x68>
                   err = mp_mulmod(p->z, mu, modulus, r->z);
 8009392:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009396:	4642      	mov	r2, r8
 8009398:	4629      	mov	r1, r5
 800939a:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 800939e:	f010 fb26 	bl	80199ee <mp_mulmod>
 80093a2:	e7da      	b.n	800935a <ecc_point_to_mont.constprop.0+0x66>
       err = MEMORY_E;
 80093a4:	f06f 047c 	mvn.w	r4, #124	; 0x7c
}
 80093a8:	4620      	mov	r0, r4
 80093aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093ae <_ecc_projective_dbl_point.constprop.0>:
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
 80093ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b2:	9001      	str	r0, [sp, #4]
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 80093b4:	2068      	movs	r0, #104	; 0x68
static int _ecc_projective_dbl_point(ecc_point *P, ecc_point *R, mp_int* a,
 80093b6:	4689      	mov	r9, r1
 80093b8:	4616      	mov	r6, r2
 80093ba:	469a      	mov	sl, r3
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 80093bc:	f011 fdf0 	bl	801afa0 <malloc>
 80093c0:	4605      	mov	r5, r0
 80093c2:	b118      	cbz	r0, 80093cc <_ecc_projective_dbl_point.constprop.0+0x1e>
 80093c4:	2268      	movs	r2, #104	; 0x68
 80093c6:	2100      	movs	r1, #0
 80093c8:	f011 fe32 	bl	801b030 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 80093cc:	2068      	movs	r0, #104	; 0x68
 80093ce:	f011 fde7 	bl	801afa0 <malloc>
 80093d2:	4607      	mov	r7, r0
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f000 8123 	beq.w	8009620 <_ecc_projective_dbl_point.constprop.0+0x272>
 80093da:	2268      	movs	r2, #104	; 0x68
 80093dc:	2100      	movs	r1, #0
 80093de:	f011 fe27 	bl	801b030 <memset>
      if (t1 == NULL || t2 == NULL) {
 80093e2:	b92d      	cbnz	r5, 80093f0 <_ecc_projective_dbl_point.constprop.0+0x42>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 80093e4:	4638      	mov	r0, r7
 80093e6:	e000      	b.n	80093ea <_ecc_projective_dbl_point.constprop.0+0x3c>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 80093e8:	4628      	mov	r0, r5
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 80093ea:	f011 fde1 	bl	801afb0 <free>
 80093ee:	e11a      	b.n	8009626 <_ecc_projective_dbl_point.constprop.0+0x278>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 80093f0:	4628      	mov	r0, r5
 80093f2:	f00f ff2f 	bl	8019254 <mp_init>
   if (err == MP_OKAY) {
 80093f6:	4604      	mov	r4, r0
 80093f8:	b920      	cbnz	r0, 8009404 <_ecc_projective_dbl_point.constprop.0+0x56>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 80093fa:	4638      	mov	r0, r7
 80093fc:	f00f ff2a 	bl	8019254 <mp_init>
   if (err != MP_OKAY) {
 8009400:	4604      	mov	r4, r0
 8009402:	b148      	cbz	r0, 8009418 <_ecc_projective_dbl_point.constprop.0+0x6a>
       FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8009404:	4638      	mov	r0, r7
 8009406:	f011 fdd3 	bl	801afb0 <free>
       FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800940a:	4628      	mov	r0, r5
 800940c:	f011 fdd0 	bl	801afb0 <free>
}
 8009410:	4620      	mov	r0, r4
 8009412:	b003      	add	sp, #12
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err = mp_copy(P->x, x);
 8009418:	9801      	ldr	r0, [sp, #4]
 800941a:	4649      	mov	r1, r9
 800941c:	f010 ff8e 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 8009420:	4604      	mov	r4, r0
 8009422:	2800      	cmp	r0, #0
 8009424:	f040 80f5 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_copy(P->y, y);
 8009428:	9b01      	ldr	r3, [sp, #4]
   y = R->y;
 800942a:	f109 0868 	add.w	r8, r9, #104	; 0x68
       err = mp_copy(P->y, y);
 800942e:	4641      	mov	r1, r8
 8009430:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8009434:	f010 ff82 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 8009438:	4604      	mov	r4, r0
 800943a:	2800      	cmp	r0, #0
 800943c:	f040 80e9 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_copy(P->z, z);
 8009440:	9801      	ldr	r0, [sp, #4]
   z = R->z;
 8009442:	f109 0bd0 	add.w	fp, r9, #208	; 0xd0
       err = mp_copy(P->z, z);
 8009446:	4659      	mov	r1, fp
 8009448:	30d0      	adds	r0, #208	; 0xd0
 800944a:	f010 ff77 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 800944e:	4604      	mov	r4, r0
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 80de 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(z, t1);
 8009456:	4629      	mov	r1, r5
 8009458:	4658      	mov	r0, fp
 800945a:	f011 f835 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 800945e:	4604      	mov	r4, r0
 8009460:	2800      	cmp	r0, #0
 8009462:	f040 80d6 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8009466:	4652      	mov	r2, sl
 8009468:	4631      	mov	r1, r6
 800946a:	4628      	mov	r0, r5
 800946c:	f011 f82e 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009470:	4604      	mov	r4, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	f040 80cd 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(z, y, z);
 8009478:	465a      	mov	r2, fp
 800947a:	4641      	mov	r1, r8
 800947c:	4658      	mov	r0, fp
 800947e:	f010 f835 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009482:	4604      	mov	r4, r0
 8009484:	2800      	cmp	r0, #0
 8009486:	f040 80c4 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(z, modulus, mp);
 800948a:	4652      	mov	r2, sl
 800948c:	4631      	mov	r1, r6
 800948e:	4658      	mov	r0, fp
 8009490:	f011 f81c 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009494:	4604      	mov	r4, r0
 8009496:	2800      	cmp	r0, #0
 8009498:	f040 80bb 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_addmod_ct(z, z, modulus, z);
 800949c:	465b      	mov	r3, fp
 800949e:	4632      	mov	r2, r6
 80094a0:	4659      	mov	r1, fp
 80094a2:	4658      	mov	r0, fp
 80094a4:	f00f ff19 	bl	80192da <mp_addmod_ct>
      if (err == MP_OKAY)
 80094a8:	4604      	mov	r4, r0
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f040 80b1 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_submod_ct(x, t1, modulus, t2);
 80094b0:	463b      	mov	r3, r7
 80094b2:	4632      	mov	r2, r6
 80094b4:	4629      	mov	r1, r5
 80094b6:	4648      	mov	r0, r9
 80094b8:	f00f ff0d 	bl	80192d6 <mp_submod_ct>
      if (err == MP_OKAY)
 80094bc:	4604      	mov	r4, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	f040 80a7 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t1, x, modulus, t1);
 80094c4:	462b      	mov	r3, r5
 80094c6:	4632      	mov	r2, r6
 80094c8:	4649      	mov	r1, r9
 80094ca:	4628      	mov	r0, r5
 80094cc:	f00f ff05 	bl	80192da <mp_addmod_ct>
      if (err == MP_OKAY)
 80094d0:	4604      	mov	r4, r0
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f040 809d 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_mul(t1, t2, t2);
 80094d8:	463a      	mov	r2, r7
 80094da:	4639      	mov	r1, r7
 80094dc:	4628      	mov	r0, r5
 80094de:	f010 f805 	bl	80194ec <mp_mul>
      if (err == MP_OKAY)
 80094e2:	4604      	mov	r4, r0
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f040 8094 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_montgomery_reduce(t2, modulus, mp);
 80094ea:	4652      	mov	r2, sl
 80094ec:	4631      	mov	r1, r6
 80094ee:	4638      	mov	r0, r7
 80094f0:	f010 ffec 	bl	801a4cc <mp_montgomery_reduce>
      if (err == MP_OKAY)
 80094f4:	4604      	mov	r4, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f040 808b 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t2, t2, modulus, t1);
 80094fc:	462b      	mov	r3, r5
 80094fe:	4632      	mov	r2, r6
 8009500:	4639      	mov	r1, r7
 8009502:	4638      	mov	r0, r7
 8009504:	f00f fee9 	bl	80192da <mp_addmod_ct>
      if (err == MP_OKAY)
 8009508:	4604      	mov	r4, r0
 800950a:	2800      	cmp	r0, #0
 800950c:	f040 8081 	bne.w	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
          err = mp_addmod_ct(t1, t2, modulus, t1);
 8009510:	462b      	mov	r3, r5
 8009512:	4632      	mov	r2, r6
 8009514:	4639      	mov	r1, r7
 8009516:	4628      	mov	r0, r5
 8009518:	f00f fedf 	bl	80192da <mp_addmod_ct>
   if (err == MP_OKAY)
 800951c:	4604      	mov	r4, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	d177      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_addmod_ct(y, y, modulus, y);
 8009522:	4643      	mov	r3, r8
 8009524:	4632      	mov	r2, r6
 8009526:	4641      	mov	r1, r8
 8009528:	4640      	mov	r0, r8
 800952a:	f00f fed6 	bl	80192da <mp_addmod_ct>
   if (err == MP_OKAY)
 800952e:	4604      	mov	r4, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	d16e      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(y, y);
 8009534:	4641      	mov	r1, r8
 8009536:	4640      	mov	r0, r8
 8009538:	f010 ffc6 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 800953c:	4604      	mov	r4, r0
 800953e:	2800      	cmp	r0, #0
 8009540:	d167      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 8009542:	4652      	mov	r2, sl
 8009544:	4631      	mov	r1, r6
 8009546:	4640      	mov	r0, r8
 8009548:	f010 ffc0 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800954c:	4604      	mov	r4, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	d15f      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(y, t2);
 8009552:	4639      	mov	r1, r7
 8009554:	4640      	mov	r0, r8
 8009556:	f010 ffb7 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 800955a:	4604      	mov	r4, r0
 800955c:	2800      	cmp	r0, #0
 800955e:	d158      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(t2, modulus, mp);
 8009560:	4652      	mov	r2, sl
 8009562:	4631      	mov	r1, r6
 8009564:	4638      	mov	r0, r7
 8009566:	f010 ffb1 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800956a:	4604      	mov	r4, r0
 800956c:	2800      	cmp	r0, #0
 800956e:	d150      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_div_2_mod_ct(t2, modulus, t2);
 8009570:	463a      	mov	r2, r7
 8009572:	4631      	mov	r1, r6
 8009574:	4638      	mov	r0, r7
 8009576:	f010 ffad 	bl	801a4d4 <mp_div_2_mod_ct>
   if (err == MP_OKAY)
 800957a:	4604      	mov	r4, r0
 800957c:	2800      	cmp	r0, #0
 800957e:	d148      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(y, x, y);
 8009580:	4642      	mov	r2, r8
 8009582:	4649      	mov	r1, r9
 8009584:	4640      	mov	r0, r8
 8009586:	f00f ffb1 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 800958a:	4604      	mov	r4, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	d140      	bne.n	8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 8009590:	4652      	mov	r2, sl
 8009592:	4631      	mov	r1, r6
 8009594:	4640      	mov	r0, r8
 8009596:	f010 ff99 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800959a:	4604      	mov	r4, r0
 800959c:	bbc8      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_sqr(t1, x);
 800959e:	4649      	mov	r1, r9
 80095a0:	4628      	mov	r0, r5
 80095a2:	f010 ff91 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 80095a6:	4604      	mov	r4, r0
 80095a8:	bb98      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(x, modulus, mp);
 80095aa:	4652      	mov	r2, sl
 80095ac:	4631      	mov	r1, r6
 80095ae:	4648      	mov	r0, r9
 80095b0:	f010 ff8c 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80095b4:	4604      	mov	r4, r0
 80095b6:	bb60      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(x, y, modulus, x);
 80095b8:	464b      	mov	r3, r9
 80095ba:	4632      	mov	r2, r6
 80095bc:	4641      	mov	r1, r8
 80095be:	4648      	mov	r0, r9
 80095c0:	f00f fe89 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 80095c4:	4604      	mov	r4, r0
 80095c6:	bb20      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(x, y, modulus, x);
 80095c8:	464b      	mov	r3, r9
 80095ca:	4632      	mov	r2, r6
 80095cc:	4641      	mov	r1, r8
 80095ce:	4648      	mov	r0, r9
 80095d0:	f00f fe81 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 80095d4:	4604      	mov	r4, r0
 80095d6:	b9e0      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(y, x, modulus, y);
 80095d8:	4643      	mov	r3, r8
 80095da:	4632      	mov	r2, r6
 80095dc:	4649      	mov	r1, r9
 80095de:	4640      	mov	r0, r8
 80095e0:	f00f fe79 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 80095e4:	4604      	mov	r4, r0
 80095e6:	b9a0      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_mul(y, t1, y);
 80095e8:	4642      	mov	r2, r8
 80095ea:	4629      	mov	r1, r5
 80095ec:	4640      	mov	r0, r8
 80095ee:	f00f ff7d 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 80095f2:	4604      	mov	r4, r0
 80095f4:	b968      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_montgomery_reduce(y, modulus, mp);
 80095f6:	4652      	mov	r2, sl
 80095f8:	4631      	mov	r1, r6
 80095fa:	4640      	mov	r0, r8
 80095fc:	f010 ff66 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009600:	4604      	mov	r4, r0
 8009602:	b930      	cbnz	r0, 8009612 <_ecc_projective_dbl_point.constprop.0+0x264>
       err = mp_submod_ct(y, t2, modulus, y);
 8009604:	4643      	mov	r3, r8
 8009606:	4632      	mov	r2, r6
 8009608:	4639      	mov	r1, r7
 800960a:	4640      	mov	r0, r8
 800960c:	f00f fe63 	bl	80192d6 <mp_submod_ct>
 8009610:	4604      	mov	r4, r0
   mp_clear(t1);
 8009612:	4628      	mov	r0, r5
 8009614:	f00f fe33 	bl	801927e <mp_clear>
   mp_clear(t2);
 8009618:	4638      	mov	r0, r7
 800961a:	f00f fe30 	bl	801927e <mp_clear>
 800961e:	e6f1      	b.n	8009404 <_ecc_projective_dbl_point.constprop.0+0x56>
      if (t1 == NULL || t2 == NULL) {
 8009620:	2d00      	cmp	r5, #0
 8009622:	f47f aee1 	bne.w	80093e8 <_ecc_projective_dbl_point.constprop.0+0x3a>
         return MEMORY_E;
 8009626:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800962a:	e6f1      	b.n	8009410 <_ecc_projective_dbl_point.constprop.0+0x62>

0800962c <wc_ecc_curve_cache_load_item>:
{
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	4616      	mov	r6, r2
 8009630:	461d      	mov	r5, r3
    if (curve->spec_use >= curve->spec_count) {
 8009632:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 8009636:	4293      	cmp	r3, r2
{
 8009638:	4604      	mov	r4, r0
 800963a:	460f      	mov	r7, r1
    if (curve->spec_use >= curve->spec_count) {
 800963c:	d215      	bcs.n	800966a <wc_ecc_curve_cache_load_item+0x3e>
    *dst = &curve->spec_ints[curve->spec_use++];
 800963e:	6980      	ldr	r0, [r0, #24]
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	6222      	str	r2, [r4, #32]
 8009644:	2268      	movs	r2, #104	; 0x68
 8009646:	fb02 0003 	mla	r0, r2, r3, r0
 800964a:	6030      	str	r0, [r6, #0]
    err = mp_init(*dst);
 800964c:	f00f fe02 	bl	8019254 <mp_init>
    if (err == MP_OKAY) {
 8009650:	b968      	cbnz	r0, 800966e <wc_ecc_curve_cache_load_item+0x42>
        curve->load_mask |= mask;
 8009652:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009656:	6830      	ldr	r0, [r6, #0]
 8009658:	431d      	orrs	r5, r3
 800965a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 800965e:	4639      	mov	r1, r7
 8009660:	2210      	movs	r2, #16
}
 8009662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 8009666:	f010 be9b 	b.w	801a3a0 <mp_read_radix>
        return ECC_BAD_ARG_E;
 800966a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
 800966e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009670 <_ecc_projective_add_point.isra.0>:
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 8009670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (Q == R) {
 8009674:	4291      	cmp	r1, r2
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 8009676:	4681      	mov	r9, r0
 8009678:	9100      	str	r1, [sp, #0]
      Q = tPt;
 800967a:	bf08      	it	eq
 800967c:	9000      	streq	r0, [sp, #0]
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800967e:	f04f 0068 	mov.w	r0, #104	; 0x68
static int _ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
 8009682:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009686:	4617      	mov	r7, r2
 8009688:	461d      	mov	r5, r3
   if (Q == R) {
 800968a:	bf08      	it	eq
 800968c:	4691      	moveq	r9, r2
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800968e:	f011 fc87 	bl	801afa0 <malloc>
 8009692:	4604      	mov	r4, r0
 8009694:	b118      	cbz	r0, 800969e <_ecc_projective_add_point.isra.0+0x2e>
 8009696:	2268      	movs	r2, #104	; 0x68
 8009698:	2100      	movs	r1, #0
 800969a:	f011 fcc9 	bl	801b030 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800969e:	2068      	movs	r0, #104	; 0x68
 80096a0:	f011 fc7e 	bl	801afa0 <malloc>
 80096a4:	4606      	mov	r6, r0
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f000 8208 	beq.w	8009abc <_ecc_projective_add_point.isra.0+0x44c>
 80096ac:	2268      	movs	r2, #104	; 0x68
 80096ae:	2100      	movs	r1, #0
 80096b0:	f011 fcbe 	bl	801b030 <memset>
      if (t1 == NULL || t2 == NULL) {
 80096b4:	b92c      	cbnz	r4, 80096c2 <_ecc_projective_add_point.isra.0+0x52>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 80096b6:	4630      	mov	r0, r6
 80096b8:	e000      	b.n	80096bc <_ecc_projective_add_point.isra.0+0x4c>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 80096ba:	4620      	mov	r0, r4
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 80096bc:	f011 fc78 	bl	801afb0 <free>
 80096c0:	e1ff      	b.n	8009ac2 <_ecc_projective_add_point.isra.0+0x452>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 80096c2:	4620      	mov	r0, r4
 80096c4:	f00f fdc6 	bl	8019254 <mp_init>
   if (err == MP_OKAY) {
 80096c8:	4603      	mov	r3, r0
 80096ca:	b920      	cbnz	r0, 80096d6 <_ecc_projective_add_point.isra.0+0x66>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 80096cc:	4630      	mov	r0, r6
 80096ce:	f00f fdc1 	bl	8019254 <mp_init>
   if (err != MP_OKAY) {
 80096d2:	4603      	mov	r3, r0
 80096d4:	b158      	cbz	r0, 80096ee <_ecc_projective_add_point.isra.0+0x7e>
 80096d6:	9300      	str	r3, [sp, #0]
      FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 80096d8:	4630      	mov	r0, r6
 80096da:	f011 fc69 	bl	801afb0 <free>
      FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 80096de:	4620      	mov	r0, r4
 80096e0:	f011 fc66 	bl	801afb0 <free>
   return err;
 80096e4:	9b00      	ldr	r3, [sp, #0]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	b003      	add	sp, #12
 80096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      err = mp_submod_ct(modulus, Q->y, modulus, t1);
 80096ee:	9b00      	ldr	r3, [sp, #0]
 80096f0:	3368      	adds	r3, #104	; 0x68
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	9901      	ldr	r1, [sp, #4]
 80096f6:	4623      	mov	r3, r4
 80096f8:	462a      	mov	r2, r5
 80096fa:	4628      	mov	r0, r5
 80096fc:	f00f fdeb 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY) {
 8009700:	4603      	mov	r3, r0
 8009702:	2800      	cmp	r0, #0
 8009704:	d159      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
      if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 8009706:	9900      	ldr	r1, [sp, #0]
 8009708:	4648      	mov	r0, r9
 800970a:	f00f fde8 	bl	80192de <mp_cmp>
 800970e:	bb70      	cbnz	r0, 800976e <_ecc_projective_add_point.isra.0+0xfe>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8009710:	9b00      	ldr	r3, [sp, #0]
 8009712:	f103 0ad0 	add.w	sl, r3, #208	; 0xd0
 8009716:	4650      	mov	r0, sl
 8009718:	f011 f85f 	bl	801a7da <get_digit_count>
      if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
 800971c:	b338      	cbz	r0, 800976e <_ecc_projective_add_point.isra.0+0xfe>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 800971e:	4651      	mov	r1, sl
 8009720:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 8009724:	f00f fddb 	bl	80192de <mp_cmp>
 8009728:	bb08      	cbnz	r0, 800976e <_ecc_projective_add_point.isra.0+0xfe>
           (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 800972a:	f109 0a68 	add.w	sl, r9, #104	; 0x68
 800972e:	9901      	ldr	r1, [sp, #4]
 8009730:	4650      	mov	r0, sl
 8009732:	f00f fdd4 	bl	80192de <mp_cmp>
           (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
 8009736:	b9a0      	cbnz	r0, 8009762 <_ecc_projective_add_point.isra.0+0xf2>
          mp_clear(t1);
 8009738:	4620      	mov	r0, r4
 800973a:	f00f fda0 	bl	801927e <mp_clear>
          mp_clear(t2);
 800973e:	4630      	mov	r0, r6
 8009740:	f00f fd9d 	bl	801927e <mp_clear>
            FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8009744:	4630      	mov	r0, r6
 8009746:	f011 fc33 	bl	801afb0 <free>
            FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 800974a:	4620      	mov	r0, r4
 800974c:	f011 fc30 	bl	801afb0 <free>
         return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 8009750:	4643      	mov	r3, r8
 8009752:	462a      	mov	r2, r5
 8009754:	4639      	mov	r1, r7
 8009756:	4648      	mov	r0, r9
}
 8009758:	b003      	add	sp, #12
 800975a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
         return _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800975e:	f7ff be26 	b.w	80093ae <_ecc_projective_dbl_point.constprop.0>
           (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, t1) == MP_EQ)) {
 8009762:	4621      	mov	r1, r4
 8009764:	4650      	mov	r0, sl
 8009766:	f00f fdba 	bl	80192de <mp_cmp>
 800976a:	2800      	cmp	r0, #0
 800976c:	d0e4      	beq.n	8009738 <_ecc_projective_add_point.isra.0+0xc8>
       err = mp_copy(P->x, x);
 800976e:	4639      	mov	r1, r7
 8009770:	4648      	mov	r0, r9
 8009772:	f010 fde3 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 8009776:	4603      	mov	r3, r0
 8009778:	b9f8      	cbnz	r0, 80097ba <_ecc_projective_add_point.isra.0+0x14a>
   y = R->y;
 800977a:	f107 0a68 	add.w	sl, r7, #104	; 0x68
       err = mp_copy(P->y, y);
 800977e:	4651      	mov	r1, sl
 8009780:	f109 0068 	add.w	r0, r9, #104	; 0x68
 8009784:	f010 fdda 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 8009788:	4603      	mov	r3, r0
 800978a:	b9b0      	cbnz	r0, 80097ba <_ecc_projective_add_point.isra.0+0x14a>
   z = R->z;
 800978c:	f107 0bd0 	add.w	fp, r7, #208	; 0xd0
       err = mp_copy(P->z, z);
 8009790:	4659      	mov	r1, fp
 8009792:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 8009796:	f010 fdd1 	bl	801a33c <mp_copy>
   if (err == MP_OKAY) {
 800979a:	4603      	mov	r3, r0
 800979c:	b968      	cbnz	r0, 80097ba <_ecc_projective_add_point.isra.0+0x14a>
       if (!mp_iszero(Q->z)) {
 800979e:	9b00      	ldr	r3, [sp, #0]
 80097a0:	f103 09d0 	add.w	r9, r3, #208	; 0xd0
 80097a4:	4648      	mov	r0, r9
 80097a6:	f010 fdce 	bl	801a346 <mp_iszero>
 80097aa:	b170      	cbz	r0, 80097ca <_ecc_projective_add_point.isra.0+0x15a>
       err = mp_sqr(z, t1);
 80097ac:	4621      	mov	r1, r4
 80097ae:	4658      	mov	r0, fp
 80097b0:	f010 fe8a 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 80097b4:	4603      	mov	r3, r0
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d047      	beq.n	800984a <_ecc_projective_add_point.isra.0+0x1da>
   mp_clear(t1);
 80097ba:	4620      	mov	r0, r4
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	f00f fd5e 	bl	801927e <mp_clear>
   mp_clear(t2);
 80097c2:	4630      	mov	r0, r6
 80097c4:	f00f fd5b 	bl	801927e <mp_clear>
 80097c8:	e786      	b.n	80096d8 <_ecc_projective_add_point.isra.0+0x68>
           err = mp_sqr(Q->z, t1);
 80097ca:	4621      	mov	r1, r4
 80097cc:	4648      	mov	r0, r9
 80097ce:	f010 fe7b 	bl	801a4c8 <mp_sqr>
           if (err == MP_OKAY)
 80097d2:	4603      	mov	r3, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1f0      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(t1, modulus, mp);
 80097d8:	4642      	mov	r2, r8
 80097da:	4629      	mov	r1, r5
 80097dc:	4620      	mov	r0, r4
 80097de:	f010 fe75 	bl	801a4cc <mp_montgomery_reduce>
           if (err == MP_OKAY)
 80097e2:	4603      	mov	r3, r0
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d1e8      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(t1, x, x);
 80097e8:	463a      	mov	r2, r7
 80097ea:	4639      	mov	r1, r7
 80097ec:	4620      	mov	r0, r4
 80097ee:	f00f fe7d 	bl	80194ec <mp_mul>
           if (err == MP_OKAY)
 80097f2:	4603      	mov	r3, r0
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d1e0      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(x, modulus, mp);
 80097f8:	4642      	mov	r2, r8
 80097fa:	4629      	mov	r1, r5
 80097fc:	4638      	mov	r0, r7
 80097fe:	f010 fe65 	bl	801a4cc <mp_montgomery_reduce>
           if (err == MP_OKAY)
 8009802:	4603      	mov	r3, r0
 8009804:	2800      	cmp	r0, #0
 8009806:	d1d8      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(Q->z, t1, t1);
 8009808:	4622      	mov	r2, r4
 800980a:	4621      	mov	r1, r4
 800980c:	4648      	mov	r0, r9
 800980e:	f00f fe6d 	bl	80194ec <mp_mul>
           if (err == MP_OKAY)
 8009812:	4603      	mov	r3, r0
 8009814:	2800      	cmp	r0, #0
 8009816:	d1d0      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8009818:	4642      	mov	r2, r8
 800981a:	4629      	mov	r1, r5
 800981c:	4620      	mov	r0, r4
 800981e:	f010 fe55 	bl	801a4cc <mp_montgomery_reduce>
           if (err == MP_OKAY)
 8009822:	4603      	mov	r3, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d1c8      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_mul(t1, y, y);
 8009828:	4652      	mov	r2, sl
 800982a:	4651      	mov	r1, sl
 800982c:	4620      	mov	r0, r4
 800982e:	f00f fe5d 	bl	80194ec <mp_mul>
           if (err == MP_OKAY)
 8009832:	4603      	mov	r3, r0
 8009834:	2800      	cmp	r0, #0
 8009836:	d1c0      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(y, modulus, mp);
 8009838:	4642      	mov	r2, r8
 800983a:	4629      	mov	r1, r5
 800983c:	4650      	mov	r0, sl
 800983e:	f010 fe45 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009842:	4603      	mov	r3, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	d0b1      	beq.n	80097ac <_ecc_projective_add_point.isra.0+0x13c>
 8009848:	e7b7      	b.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800984a:	4642      	mov	r2, r8
 800984c:	4629      	mov	r1, r5
 800984e:	4620      	mov	r0, r4
 8009850:	f010 fe3c 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009854:	4603      	mov	r3, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d1af      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(Q->x, t1, t2);
 800985a:	9800      	ldr	r0, [sp, #0]
 800985c:	4632      	mov	r2, r6
 800985e:	4621      	mov	r1, r4
 8009860:	f00f fe44 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009864:	4603      	mov	r3, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	d1a7      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 800986a:	4642      	mov	r2, r8
 800986c:	4629      	mov	r1, r5
 800986e:	4630      	mov	r0, r6
 8009870:	f010 fe2c 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009874:	4603      	mov	r3, r0
 8009876:	2800      	cmp	r0, #0
 8009878:	d19f      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(z, t1, t1);
 800987a:	4622      	mov	r2, r4
 800987c:	4621      	mov	r1, r4
 800987e:	4658      	mov	r0, fp
 8009880:	f00f fe34 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009884:	4603      	mov	r3, r0
 8009886:	2800      	cmp	r0, #0
 8009888:	d197      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 800988a:	4642      	mov	r2, r8
 800988c:	4629      	mov	r1, r5
 800988e:	4620      	mov	r0, r4
 8009890:	f010 fe1c 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009894:	4603      	mov	r3, r0
 8009896:	2800      	cmp	r0, #0
 8009898:	d18f      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(Q->y, t1, t1);
 800989a:	9801      	ldr	r0, [sp, #4]
 800989c:	4622      	mov	r2, r4
 800989e:	4621      	mov	r1, r4
 80098a0:	f00f fe24 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 80098a4:	4603      	mov	r3, r0
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d187      	bne.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 80098aa:	4642      	mov	r2, r8
 80098ac:	4629      	mov	r1, r5
 80098ae:	4620      	mov	r0, r4
 80098b0:	f010 fe0c 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80098b4:	4603      	mov	r3, r0
 80098b6:	2800      	cmp	r0, #0
 80098b8:	f47f af7f 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(y, t1, modulus, y);
 80098bc:	4653      	mov	r3, sl
 80098be:	462a      	mov	r2, r5
 80098c0:	4621      	mov	r1, r4
 80098c2:	4650      	mov	r0, sl
 80098c4:	f00f fd07 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 80098c8:	4603      	mov	r3, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f47f af75 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t1, t1, modulus, t1);
 80098d0:	4623      	mov	r3, r4
 80098d2:	462a      	mov	r2, r5
 80098d4:	4621      	mov	r1, r4
 80098d6:	4620      	mov	r0, r4
 80098d8:	f00f fcff 	bl	80192da <mp_addmod_ct>
   if (err == MP_OKAY)
 80098dc:	4603      	mov	r3, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	f47f af6b 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t1, y, modulus, t1);
 80098e4:	4623      	mov	r3, r4
 80098e6:	462a      	mov	r2, r5
 80098e8:	4651      	mov	r1, sl
 80098ea:	4620      	mov	r0, r4
 80098ec:	f00f fcf5 	bl	80192da <mp_addmod_ct>
   if (err == MP_OKAY)
 80098f0:	4603      	mov	r3, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f47f af61 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(x, t2, modulus, x);
 80098f8:	463b      	mov	r3, r7
 80098fa:	462a      	mov	r2, r5
 80098fc:	4631      	mov	r1, r6
 80098fe:	4638      	mov	r0, r7
 8009900:	f00f fce9 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 8009904:	4603      	mov	r3, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	f47f af57 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t2, t2, modulus, t2);
 800990c:	4633      	mov	r3, r6
 800990e:	462a      	mov	r2, r5
 8009910:	4631      	mov	r1, r6
 8009912:	4630      	mov	r0, r6
 8009914:	f00f fce1 	bl	80192da <mp_addmod_ct>
   if (err == MP_OKAY)
 8009918:	4603      	mov	r3, r0
 800991a:	2800      	cmp	r0, #0
 800991c:	f47f af4d 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_addmod_ct(t2, x, modulus, t2);
 8009920:	4633      	mov	r3, r6
 8009922:	462a      	mov	r2, r5
 8009924:	4639      	mov	r1, r7
 8009926:	4630      	mov	r0, r6
 8009928:	f00f fcd7 	bl	80192da <mp_addmod_ct>
   if (err == MP_OKAY) {
 800992c:	4603      	mov	r3, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	f47f af43 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       if (!mp_iszero(Q->z)) {
 8009934:	4648      	mov	r0, r9
 8009936:	f010 fd06 	bl	801a346 <mp_iszero>
 800993a:	2800      	cmp	r0, #0
 800993c:	f000 80ab 	beq.w	8009a96 <_ecc_projective_add_point.isra.0+0x426>
       err = mp_mul(z, x, z);
 8009940:	465a      	mov	r2, fp
 8009942:	4639      	mov	r1, r7
 8009944:	4658      	mov	r0, fp
 8009946:	f00f fdd1 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 800994a:	4603      	mov	r3, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	f47f af34 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(z, modulus, mp);
 8009952:	4642      	mov	r2, r8
 8009954:	4629      	mov	r1, r5
 8009956:	4658      	mov	r0, fp
 8009958:	f010 fdb8 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 800995c:	4603      	mov	r3, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	f47f af2b 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t1, x, t1);
 8009964:	4622      	mov	r2, r4
 8009966:	4639      	mov	r1, r7
 8009968:	4620      	mov	r0, r4
 800996a:	f00f fdbf 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 800996e:	4603      	mov	r3, r0
 8009970:	2800      	cmp	r0, #0
 8009972:	f47f af22 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 8009976:	4642      	mov	r2, r8
 8009978:	4629      	mov	r1, r5
 800997a:	4620      	mov	r0, r4
 800997c:	f010 fda6 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009980:	4603      	mov	r3, r0
 8009982:	2800      	cmp	r0, #0
 8009984:	f47f af19 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_sqr(x, x);
 8009988:	4639      	mov	r1, r7
 800998a:	4638      	mov	r0, r7
 800998c:	f010 fd9c 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 8009990:	4603      	mov	r3, r0
 8009992:	2800      	cmp	r0, #0
 8009994:	f47f af11 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(x, modulus, mp);
 8009998:	4642      	mov	r2, r8
 800999a:	4629      	mov	r1, r5
 800999c:	4638      	mov	r0, r7
 800999e:	f010 fd95 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80099a2:	4603      	mov	r3, r0
 80099a4:	2800      	cmp	r0, #0
 80099a6:	f47f af08 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t2, x, t2);
 80099aa:	4632      	mov	r2, r6
 80099ac:	4639      	mov	r1, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	f00f fd9c 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 80099b4:	4603      	mov	r3, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	f47f aeff 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 80099bc:	4642      	mov	r2, r8
 80099be:	4629      	mov	r1, r5
 80099c0:	4630      	mov	r0, r6
 80099c2:	f010 fd83 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80099c6:	4603      	mov	r3, r0
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f47f aef6 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t1, x, t1);
 80099ce:	4622      	mov	r2, r4
 80099d0:	4639      	mov	r1, r7
 80099d2:	4620      	mov	r0, r4
 80099d4:	f00f fd8a 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 80099d8:	4603      	mov	r3, r0
 80099da:	2800      	cmp	r0, #0
 80099dc:	f47f aeed 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t1, modulus, mp);
 80099e0:	4642      	mov	r2, r8
 80099e2:	4629      	mov	r1, r5
 80099e4:	4620      	mov	r0, r4
 80099e6:	f010 fd71 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 80099ea:	4603      	mov	r3, r0
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f47f aee4 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_sqr(y, x);
 80099f2:	4639      	mov	r1, r7
 80099f4:	4650      	mov	r0, sl
 80099f6:	f010 fd67 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 80099fa:	4603      	mov	r3, r0
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f47f aedc 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(x, modulus, mp);
 8009a02:	4642      	mov	r2, r8
 8009a04:	4629      	mov	r1, r5
 8009a06:	4638      	mov	r0, r7
 8009a08:	f010 fd60 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f47f aed3 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(x, t2, modulus, x);
 8009a14:	463b      	mov	r3, r7
 8009a16:	462a      	mov	r2, r5
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	f00f fc5b 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 8009a20:	4603      	mov	r3, r0
 8009a22:	2800      	cmp	r0, #0
 8009a24:	f47f aec9 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, x, modulus, t2);
 8009a28:	4633      	mov	r3, r6
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f00f fc51 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 8009a34:	4603      	mov	r3, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f47f aebf 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, x, modulus, t2);
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4639      	mov	r1, r7
 8009a42:	4630      	mov	r0, r6
 8009a44:	f00f fc47 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f47f aeb5 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_mul(t2, y, t2);
 8009a50:	4632      	mov	r2, r6
 8009a52:	4651      	mov	r1, sl
 8009a54:	4630      	mov	r0, r6
 8009a56:	f00f fd49 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f47f aeac 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_montgomery_reduce(t2, modulus, mp);
 8009a62:	4642      	mov	r2, r8
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f010 fd30 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f47f aea3 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_submod_ct(t2, t1, modulus, y);
 8009a74:	4653      	mov	r3, sl
 8009a76:	462a      	mov	r2, r5
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f00f fc2b 	bl	80192d6 <mp_submod_ct>
   if (err == MP_OKAY)
 8009a80:	4603      	mov	r3, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f47f ae99 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
       err = mp_div_2_mod_ct(y, modulus, y);
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	f010 fd21 	bl	801a4d4 <mp_div_2_mod_ct>
 8009a92:	4603      	mov	r3, r0
 8009a94:	e691      	b.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
           err = mp_mul(z, Q->z, z);
 8009a96:	465a      	mov	r2, fp
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4658      	mov	r0, fp
 8009a9c:	f00f fd26 	bl	80194ec <mp_mul>
           if (err == MP_OKAY)
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f47f ae89 	bne.w	80097ba <_ecc_projective_add_point.isra.0+0x14a>
               err = mp_montgomery_reduce(z, modulus, mp);
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4658      	mov	r0, fp
 8009aae:	f010 fd0d 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	f43f af43 	beq.w	8009940 <_ecc_projective_add_point.isra.0+0x2d0>
 8009aba:	e67e      	b.n	80097ba <_ecc_projective_add_point.isra.0+0x14a>
      if (t1 == NULL || t2 == NULL) {
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	f47f adfc 	bne.w	80096ba <_ecc_projective_add_point.isra.0+0x4a>
         return MEMORY_E;
 8009ac2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009ac6:	e60e      	b.n	80096e6 <_ecc_projective_add_point.isra.0+0x76>

08009ac8 <wc_ecc_curve_free>:
{
 8009ac8:	b510      	push	{r4, lr}
    if (curve) {
 8009aca:	4604      	mov	r4, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d042      	beq.n	8009b56 <wc_ecc_curve_free+0x8e>
    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 8009ad0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009ad4:	07db      	lsls	r3, r3, #31
 8009ad6:	d509      	bpl.n	8009aec <wc_ecc_curve_free+0x24>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 8009ad8:	6840      	ldr	r0, [r0, #4]
    if (item) {
 8009ada:	b108      	cbz	r0, 8009ae0 <wc_ecc_curve_free+0x18>
        mp_clear(item);
 8009adc:	f00f fbcf 	bl	801927e <mp_clear>
    curve->load_mask &= ~mask;
 8009ae0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009ae4:	f023 0301 	bic.w	r3, r3, #1
 8009ae8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 8009aec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009af0:	0798      	lsls	r0, r3, #30
 8009af2:	d509      	bpl.n	8009b08 <wc_ecc_curve_free+0x40>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 8009af4:	68a0      	ldr	r0, [r4, #8]
    if (item) {
 8009af6:	b108      	cbz	r0, 8009afc <wc_ecc_curve_free+0x34>
        mp_clear(item);
 8009af8:	f00f fbc1 	bl	801927e <mp_clear>
    curve->load_mask &= ~mask;
 8009afc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b00:	f023 0302 	bic.w	r3, r3, #2
 8009b04:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 8009b08:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b0c:	0719      	lsls	r1, r3, #28
 8009b0e:	d509      	bpl.n	8009b24 <wc_ecc_curve_free+0x5c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 8009b10:	68e0      	ldr	r0, [r4, #12]
    if (item) {
 8009b12:	b108      	cbz	r0, 8009b18 <wc_ecc_curve_free+0x50>
        mp_clear(item);
 8009b14:	f00f fbb3 	bl	801927e <mp_clear>
    curve->load_mask &= ~mask;
 8009b18:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b1c:	f023 0308 	bic.w	r3, r3, #8
 8009b20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 8009b24:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b28:	06da      	lsls	r2, r3, #27
 8009b2a:	d509      	bpl.n	8009b40 <wc_ecc_curve_free+0x78>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 8009b2c:	6920      	ldr	r0, [r4, #16]
    if (item) {
 8009b2e:	b108      	cbz	r0, 8009b34 <wc_ecc_curve_free+0x6c>
        mp_clear(item);
 8009b30:	f00f fba5 	bl	801927e <mp_clear>
    curve->load_mask &= ~mask;
 8009b34:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b38:	f023 0310 	bic.w	r3, r3, #16
 8009b3c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 8009b40:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009b44:	069b      	lsls	r3, r3, #26
 8009b46:	d503      	bpl.n	8009b50 <wc_ecc_curve_free+0x88>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 8009b48:	6960      	ldr	r0, [r4, #20]
    if (item) {
 8009b4a:	b108      	cbz	r0, 8009b50 <wc_ecc_curve_free+0x88>
        mp_clear(item);
 8009b4c:	f00f fb97 	bl	801927e <mp_clear>
    curve->load_mask = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8009b56:	bd10      	pop	{r4, pc}

08009b58 <wc_ecc_curve_load>:
{
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (dp == NULL || pCurve == NULL)
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d048      	beq.n	8009bf2 <wc_ecc_curve_load+0x9a>
    curve = *pCurve;
 8009b60:	680d      	ldr	r5, [r1, #0]
    if (curve->dp != dp) {
 8009b62:	682b      	ldr	r3, [r5, #0]
    curve->dp = dp; /* set dp info */
 8009b64:	6028      	str	r0, [r5, #0]
    if (curve->dp != dp) {
 8009b66:	4283      	cmp	r3, r0
        curve->load_mask = 0;
 8009b68:	bf1c      	itt	ne
 8009b6a:	2300      	movne	r3, #0
 8009b6c:	f885 3024 	strbne.w	r3, [r5, #36]	; 0x24
    load_items = (byte)(((byte)~(word32)curve->load_mask) & load_mask);
 8009b70:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8009b74:	ea22 0703 	bic.w	r7, r2, r3
    if (load_items & ECC_CURVE_FIELD_PRIME)
 8009b78:	f017 0401 	ands.w	r4, r7, #1
    curve->load_mask |= load_items;
 8009b7c:	ea43 0302 	orr.w	r3, r3, r2
 8009b80:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (load_items & ECC_CURVE_FIELD_PRIME)
 8009b84:	d006      	beq.n	8009b94 <wc_ecc_curve_load+0x3c>
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 8009b86:	68c1      	ldr	r1, [r0, #12]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	1d2a      	adds	r2, r5, #4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7ff fd4d 	bl	800962c <wc_ecc_curve_cache_load_item>
 8009b92:	4604      	mov	r4, r0
    if (load_items & ECC_CURVE_FIELD_AF)
 8009b94:	07b8      	lsls	r0, r7, #30
 8009b96:	d507      	bpl.n	8009ba8 <wc_ecc_curve_load+0x50>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 8009b98:	6931      	ldr	r1, [r6, #16]
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	f105 0208 	add.w	r2, r5, #8
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f7ff fd43 	bl	800962c <wc_ecc_curve_cache_load_item>
 8009ba6:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_ORDER)
 8009ba8:	0739      	lsls	r1, r7, #28
 8009baa:	d507      	bpl.n	8009bbc <wc_ecc_curve_load+0x64>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 8009bac:	69b1      	ldr	r1, [r6, #24]
 8009bae:	2308      	movs	r3, #8
 8009bb0:	f105 020c 	add.w	r2, r5, #12
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f7ff fd39 	bl	800962c <wc_ecc_curve_cache_load_item>
 8009bba:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_GX)
 8009bbc:	06fa      	lsls	r2, r7, #27
 8009bbe:	d506      	bpl.n	8009bce <wc_ecc_curve_load+0x76>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	69f1      	ldr	r1, [r6, #28]
 8009bc4:	18ea      	adds	r2, r5, r3
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f7ff fd30 	bl	800962c <wc_ecc_curve_cache_load_item>
 8009bcc:	4404      	add	r4, r0
    if (load_items & ECC_CURVE_FIELD_GY)
 8009bce:	06bb      	lsls	r3, r7, #26
 8009bd0:	d507      	bpl.n	8009be2 <wc_ecc_curve_load+0x8a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 8009bd2:	6a31      	ldr	r1, [r6, #32]
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f105 0214 	add.w	r2, r5, #20
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f7ff fd26 	bl	800962c <wc_ecc_curve_cache_load_item>
 8009be0:	4404      	add	r4, r0
    if (ret != 0) {
 8009be2:	b124      	cbz	r4, 8009bee <wc_ecc_curve_load+0x96>
        wc_ecc_curve_free(curve);
 8009be4:	4628      	mov	r0, r5
 8009be6:	f7ff ff6f 	bl	8009ac8 <wc_ecc_curve_free>
        ret = MP_READ_E;
 8009bea:	f06f 046e 	mvn.w	r4, #110	; 0x6e
}
 8009bee:	4620      	mov	r0, r4
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 8009bf2:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8009bf6:	e7fa      	b.n	8009bee <wc_ecc_curve_load+0x96>

08009bf8 <wc_ecc_set_curve>:
    if (key == NULL || (keysize <= 0 && curve_id < 0)) {
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	b118      	cbz	r0, 8009c04 <wc_ecc_set_curve+0xc>
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	dc04      	bgt.n	8009c0a <wc_ecc_set_curve+0x12>
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	da04      	bge.n	8009c0e <wc_ecc_set_curve+0x16>
        return BAD_FUNC_ARG;
 8009c04:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8009c08:	4770      	bx	lr
    if (keysize > ECC_MAXSIZE) {
 8009c0a:	2942      	cmp	r1, #66	; 0x42
 8009c0c:	dc13      	bgt.n	8009c36 <wc_ecc_set_curve+0x3e>
    if (key->idx != ECC_CUSTOM_IDX) {
 8009c0e:	6858      	ldr	r0, [r3, #4]
 8009c10:	3001      	adds	r0, #1
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	d007      	beq.n	8009c28 <wc_ecc_set_curve+0x30>
            if (curve_id > ECC_CURVE_DEF) {
 8009c18:	4282      	cmp	r2, r0
        key->idx = 0;
 8009c1a:	6058      	str	r0, [r3, #4]
        key->dp = NULL;
 8009c1c:	6118      	str	r0, [r3, #16]
            if (curve_id > ECC_CURVE_DEF) {
 8009c1e:	dc04      	bgt.n	8009c2a <wc_ecc_set_curve+0x32>
            else if (keysize <= ecc_sets[x].size) {
 8009c20:	2920      	cmp	r1, #32
 8009c22:	dd04      	ble.n	8009c2e <wc_ecc_set_curve+0x36>
            return ECC_CURVE_OID_E;
 8009c24:	f06f 00ab 	mvn.w	r0, #171	; 0xab
}
 8009c28:	4770      	bx	lr
                if (curve_id == ecc_sets[x].id)
 8009c2a:	2a07      	cmp	r2, #7
 8009c2c:	d1fa      	bne.n	8009c24 <wc_ecc_set_curve+0x2c>
        key->dp  = &ecc_sets[x];
 8009c2e:	4a03      	ldr	r2, [pc, #12]	; (8009c3c <wc_ecc_set_curve+0x44>)
 8009c30:	611a      	str	r2, [r3, #16]
    return 0;
 8009c32:	2000      	movs	r0, #0
 8009c34:	4770      	bx	lr
        return ECC_BAD_ARG_E;
 8009c36:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8009c3a:	4770      	bx	lr
 8009c3c:	080226cc 	.word	0x080226cc

08009c40 <wc_ecc_import_raw_private>:
#endif /* !NO_ASN */

#ifdef HAVE_ECC_KEY_IMPORT
static int wc_ecc_import_raw_private(ecc_key* key, const char* qx,
          const char* qy, const char* d, int curve_id, int encType)
{
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	b085      	sub	sp, #20
 8009c46:	468a      	mov	sl, r1
 8009c48:	4691      	mov	r9, r2
 8009c4a:	9303      	str	r3, [sp, #12]
    defined(WOLFSSL_CRYPTOCELL)
    word32 keySz = 0;
#endif

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL) {
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f000 80a8 	beq.w	8009da4 <wc_ecc_import_raw_private+0x164>
 8009c54:	2900      	cmp	r1, #0
 8009c56:	f000 80a5 	beq.w	8009da4 <wc_ecc_import_raw_private+0x164>
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	f000 80a2 	beq.w	8009da4 <wc_ecc_import_raw_private+0x164>
    key->state = ECC_STATE_NONE;
 8009c60:	2100      	movs	r1, #0

    /* make sure required variables are reset */
    wc_ecc_reset(key);

    /* set curve type and index */
    err = wc_ecc_set_curve(key, 0, curve_id);
 8009c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    key->state = ECC_STATE_NONE;
 8009c64:	6081      	str	r1, [r0, #8]
    err = wc_ecc_set_curve(key, 0, curve_id);
 8009c66:	f7ff ffc7 	bl	8009bf8 <wc_ecc_set_curve>
    if (err != 0) {
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f040 8095 	bne.w	8009d9c <wc_ecc_import_raw_private+0x15c>
    alt_fp_init(key->pubkey.y);
    alt_fp_init(key->pubkey.z);
    key->k = (mp_int*)key->ka;
    alt_fp_init(key->k);
#else
    err = mp_init_multi(key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 8009c72:	f504 77a8 	add.w	r7, r4, #336	; 0x150
 8009c76:	f104 0618 	add.w	r6, r4, #24
 8009c7a:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8009c7e:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
 8009c82:	e9cd 0000 	strd	r0, r0, [sp]
 8009c86:	465b      	mov	r3, fp
 8009c88:	462a      	mov	r2, r5
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f00f fafb 	bl	8019288 <mp_init_multi>
                                                                  NULL, NULL);
#endif
    if (err != MP_OKAY)
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f040 8089 	bne.w	8009daa <wc_ecc_import_raw_private+0x16a>
        return MEMORY_E;

    /* read Qx */
    if (err == MP_OKAY) {
        if (encType == WC_TYPE_HEX_STR)
 8009c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d120      	bne.n	8009ce0 <wc_ecc_import_raw_private+0xa0>
            err = mp_read_radix(key->pubkey.x, qx, MP_RADIX_HEX);
 8009c9e:	2210      	movs	r2, #16
 8009ca0:	4651      	mov	r1, sl
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f010 fb7c 	bl	801a3a0 <mp_read_radix>
        else
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
                (word32)key->dp->size);

        if (mp_isneg(key->pubkey.x)) {
 8009ca8:	69e2      	ldr	r2, [r4, #28]
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
 8009caa:	4680      	mov	r8, r0
            WOLFSSL_MSG("Invalid Qx");
            err = BAD_FUNC_ARG;
 8009cac:	2a00      	cmp	r2, #0
        }
        if (mp_unsigned_bin_size(key->pubkey.x) > key->dp->size) {
 8009cae:	4630      	mov	r0, r6
            err = BAD_FUNC_ARG;
 8009cb0:	bf18      	it	ne
 8009cb2:	f06f 08ac 	mvnne.w	r8, #172	; 0xac
        if (mp_unsigned_bin_size(key->pubkey.x) > key->dp->size) {
 8009cb6:	f00f fb16 	bl	80192e6 <mp_unsigned_bin_size>
 8009cba:	6922      	ldr	r2, [r4, #16]
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	4290      	cmp	r0, r2
 8009cc0:	dd15      	ble.n	8009cee <wc_ecc_import_raw_private+0xae>
            err = BAD_FUNC_ARG;
 8009cc2:	f06f 08ac 	mvn.w	r8, #172	; 0xac
        err = silabs_ecc_import(key, key->dp->size, 1, (d != NULL));
    }
#endif

    if (err != MP_OKAY) {
        mp_clear(key->pubkey.x);
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f00f fad9 	bl	801927e <mp_clear>
        mp_clear(key->pubkey.y);
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f00f fad6 	bl	801927e <mp_clear>
        mp_clear(key->pubkey.z);
 8009cd2:	4658      	mov	r0, fp
 8009cd4:	f00f fad3 	bl	801927e <mp_clear>
        mp_clear(key->k);
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f00f fad0 	bl	801927e <mp_clear>
 8009cde:	e05d      	b.n	8009d9c <wc_ecc_import_raw_private+0x15c>
                (word32)key->dp->size);
 8009ce0:	6923      	ldr	r3, [r4, #16]
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
 8009ce2:	4651      	mov	r1, sl
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f00f faff 	bl	80192ea <mp_read_unsigned_bin>
 8009cec:	e7dc      	b.n	8009ca8 <wc_ecc_import_raw_private+0x68>
    if (err == MP_OKAY) {
 8009cee:	f1b8 0f00 	cmp.w	r8, #0
 8009cf2:	d1e8      	bne.n	8009cc6 <wc_ecc_import_raw_private+0x86>
        if (encType == WC_TYPE_HEX_STR)
 8009cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d13a      	bne.n	8009d70 <wc_ecc_import_raw_private+0x130>
            err = mp_read_radix(key->pubkey.y, qy, MP_RADIX_HEX);
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f010 fb4e 	bl	801a3a0 <mp_read_radix>
        if (mp_isneg(key->pubkey.y)) {
 8009d04:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
 8009d08:	4680      	mov	r8, r0
            err = BAD_FUNC_ARG;
 8009d0a:	2a00      	cmp	r2, #0
        if (mp_unsigned_bin_size(key->pubkey.y) > key->dp->size) {
 8009d0c:	4628      	mov	r0, r5
            err = BAD_FUNC_ARG;
 8009d0e:	bf18      	it	ne
 8009d10:	f06f 08ac 	mvnne.w	r8, #172	; 0xac
        if (mp_unsigned_bin_size(key->pubkey.y) > key->dp->size) {
 8009d14:	f00f fae7 	bl	80192e6 <mp_unsigned_bin_size>
 8009d18:	6922      	ldr	r2, [r4, #16]
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	4290      	cmp	r0, r2
 8009d1e:	dcd0      	bgt.n	8009cc2 <wc_ecc_import_raw_private+0x82>
    if (err == MP_OKAY) {
 8009d20:	f1b8 0f00 	cmp.w	r8, #0
 8009d24:	d1cf      	bne.n	8009cc6 <wc_ecc_import_raw_private+0x86>
        if (mp_iszero(key->pubkey.x) && mp_iszero(key->pubkey.y)) {
 8009d26:	4630      	mov	r0, r6
 8009d28:	f010 fb0d 	bl	801a346 <mp_iszero>
 8009d2c:	bb28      	cbnz	r0, 8009d7a <wc_ecc_import_raw_private+0x13a>
        err = mp_set(key->pubkey.z, 1);
 8009d2e:	2101      	movs	r1, #1
 8009d30:	4658      	mov	r0, fp
 8009d32:	f010 fbd1 	bl	801a4d8 <mp_set>
    if (err == MP_OKAY) {
 8009d36:	4680      	mov	r8, r0
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1c4      	bne.n	8009cc6 <wc_ecc_import_raw_private+0x86>
        if (d != NULL) {
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	b35b      	cbz	r3, 8009d98 <wc_ecc_import_raw_private+0x158>
            key->type = ECC_PRIVATEKEY;
 8009d40:	2302      	movs	r3, #2
 8009d42:	6023      	str	r3, [r4, #0]
            if (encType == WC_TYPE_HEX_STR)
 8009d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d11f      	bne.n	8009d8a <wc_ecc_import_raw_private+0x14a>
                err = mp_read_radix(key->k, d, MP_RADIX_HEX);
 8009d4a:	9903      	ldr	r1, [sp, #12]
 8009d4c:	2210      	movs	r2, #16
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f010 fb26 	bl	801a3a0 <mp_read_radix>
                    err = mp_read_unsigned_bin(key->k, (const byte*)d,
 8009d54:	4680      	mov	r8, r0
            if (mp_iszero(key->k) || mp_isneg(key->k)) {
 8009d56:	4638      	mov	r0, r7
 8009d58:	f010 faf5 	bl	801a346 <mp_iszero>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1b0      	bne.n	8009cc2 <wc_ecc_import_raw_private+0x82>
 8009d60:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	d1ac      	bne.n	8009cc2 <wc_ecc_import_raw_private+0x82>
    if (err != MP_OKAY) {
 8009d68:	f1b8 0f00 	cmp.w	r8, #0
 8009d6c:	d016      	beq.n	8009d9c <wc_ecc_import_raw_private+0x15c>
 8009d6e:	e7aa      	b.n	8009cc6 <wc_ecc_import_raw_private+0x86>
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
 8009d70:	4649      	mov	r1, r9
 8009d72:	4628      	mov	r0, r5
 8009d74:	f00f fab9 	bl	80192ea <mp_read_unsigned_bin>
 8009d78:	e7c4      	b.n	8009d04 <wc_ecc_import_raw_private+0xc4>
        if (mp_iszero(key->pubkey.x) && mp_iszero(key->pubkey.y)) {
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f010 fae3 	bl	801a346 <mp_iszero>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d0d4      	beq.n	8009d2e <wc_ecc_import_raw_private+0xee>
            err = ECC_INF_E;
 8009d84:	f06f 08d6 	mvn.w	r8, #214	; 0xd6
 8009d88:	e79d      	b.n	8009cc6 <wc_ecc_import_raw_private+0x86>
                        (word32)key->dp->size);
 8009d8a:	6923      	ldr	r3, [r4, #16]
                    err = mp_read_unsigned_bin(key->k, (const byte*)d,
 8009d8c:	9903      	ldr	r1, [sp, #12]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	4638      	mov	r0, r7
 8009d92:	f00f faaa 	bl	80192ea <mp_read_unsigned_bin>
 8009d96:	e7dd      	b.n	8009d54 <wc_ecc_import_raw_private+0x114>
            key->type = ECC_PUBLICKEY;
 8009d98:	2201      	movs	r2, #1
 8009d9a:	6022      	str	r2, [r4, #0]
        ForceZero(key->keyRaw, sizeof(key->keyRaw));
#endif
    }

    return err;
}
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	b005      	add	sp, #20
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return BAD_FUNC_ARG;
 8009da4:	f06f 08ac 	mvn.w	r8, #172	; 0xac
 8009da8:	e7f8      	b.n	8009d9c <wc_ecc_import_raw_private+0x15c>
        return MEMORY_E;
 8009daa:	f06f 087c 	mvn.w	r8, #124	; 0x7c
 8009dae:	e7f5      	b.n	8009d9c <wc_ecc_import_raw_private+0x15c>

08009db0 <ecc_map_ex>:
{
 8009db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db4:	460f      	mov	r7, r1
 8009db6:	4691      	mov	r9, r2
 8009db8:	461c      	mov	r4, r3
   if (P == NULL || modulus == NULL)
 8009dba:	4682      	mov	sl, r0
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f000 80b5 	beq.w	8009f2c <ecc_map_ex+0x17c>
 8009dc2:	2900      	cmp	r1, #0
 8009dc4:	f000 80b2 	beq.w	8009f2c <ecc_map_ex+0x17c>
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
 8009dc8:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f00f fa87 	bl	80192e2 <mp_cmp_d>
 8009dd4:	4601      	mov	r1, r0
 8009dd6:	b9a8      	cbnz	r0, 8009e04 <ecc_map_ex+0x54>
       err = mp_set(P->x, 0);
 8009dd8:	4650      	mov	r0, sl
 8009dda:	f010 fb7d 	bl	801a4d8 <mp_set>
       if (err == MP_OKAY)
 8009dde:	4604      	mov	r4, r0
 8009de0:	2800      	cmp	r0, #0
 8009de2:	f040 8092 	bne.w	8009f0a <ecc_map_ex+0x15a>
           err = mp_set(P->y, 0);
 8009de6:	4601      	mov	r1, r0
 8009de8:	f10a 0068 	add.w	r0, sl, #104	; 0x68
 8009dec:	f010 fb74 	bl	801a4d8 <mp_set>
       if (err == MP_OKAY)
 8009df0:	4604      	mov	r4, r0
 8009df2:	2800      	cmp	r0, #0
 8009df4:	f040 8089 	bne.w	8009f0a <ecc_map_ex+0x15a>
           err = mp_set(P->z, 1);
 8009df8:	4640      	mov	r0, r8
 8009dfa:	2101      	movs	r1, #1
}
 8009dfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
           err = mp_set(P->z, 1);
 8009e00:	f010 bb6a 	b.w	801a4d8 <mp_set>
      NEW_MP_INT_SIZE(t1, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8009e04:	2068      	movs	r0, #104	; 0x68
 8009e06:	f011 f8cb 	bl	801afa0 <malloc>
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	b118      	cbz	r0, 8009e16 <ecc_map_ex+0x66>
 8009e0e:	2268      	movs	r2, #104	; 0x68
 8009e10:	2100      	movs	r1, #0
 8009e12:	f011 f90d 	bl	801b030 <memset>
      NEW_MP_INT_SIZE(t2, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 8009e16:	2068      	movs	r0, #104	; 0x68
 8009e18:	f011 f8c2 	bl	801afa0 <malloc>
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f000 8087 	beq.w	8009f32 <ecc_map_ex+0x182>
 8009e24:	2268      	movs	r2, #104	; 0x68
 8009e26:	2100      	movs	r1, #0
 8009e28:	f011 f902 	bl	801b030 <memset>
      if (t1 == NULL || t2 == NULL) {
 8009e2c:	b90d      	cbnz	r5, 8009e32 <ecc_map_ex+0x82>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8009e2e:	4630      	mov	r0, r6
 8009e30:	e007      	b.n	8009e42 <ecc_map_ex+0x92>
   err = INIT_MP_INT_SIZE(t1, mp_bitsused(modulus));
 8009e32:	4628      	mov	r0, r5
 8009e34:	f00f fa0e 	bl	8019254 <mp_init>
   if (err == MP_OKAY) {
 8009e38:	b130      	cbz	r0, 8009e48 <ecc_map_ex+0x98>
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f011 f8b8 	bl	801afb0 <free>
         FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8009e40:	4628      	mov	r0, r5
         FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8009e42:	f011 f8b5 	bl	801afb0 <free>
 8009e46:	e076      	b.n	8009f36 <ecc_map_ex+0x186>
      err = INIT_MP_INT_SIZE(t2, mp_bitsused(modulus));
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f00f fa03 	bl	8019254 <mp_init>
   if (err != MP_OKAY) {
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d1f3      	bne.n	8009e3a <ecc_map_ex+0x8a>
       if (ct) {
 8009e52:	2c00      	cmp	r4, #0
 8009e54:	d05c      	beq.n	8009f10 <ecc_map_ex+0x160>
           err = mp_invmod_mont_ct(z, modulus, t1, mp);
 8009e56:	464b      	mov	r3, r9
 8009e58:	462a      	mov	r2, r5
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	f010 f9b6 	bl	801a1ce <mp_invmod_mont_ct>
           if (err == MP_OKAY)
 8009e62:	4604      	mov	r4, r0
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d144      	bne.n	8009ef2 <ecc_map_ex+0x142>
               err = mp_montgomery_reduce(t1, modulus, mp);
 8009e68:	464a      	mov	r2, r9
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f010 fb2d 	bl	801a4cc <mp_montgomery_reduce>
               err = mp_invmod(z, modulus, t1);
 8009e72:	4604      	mov	r4, r0
   if (err == MP_OKAY)
 8009e74:	bbe8      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_sqr(t1, t2);
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f010 fb25 	bl	801a4c8 <mp_sqr>
   if (err == MP_OKAY)
 8009e7e:	4604      	mov	r4, r0
 8009e80:	bbb8      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_mod(t2, modulus, t2);
 8009e82:	4632      	mov	r2, r6
 8009e84:	4639      	mov	r1, r7
 8009e86:	4630      	mov	r0, r6
 8009e88:	f00f fdd8 	bl	8019a3c <mp_mod>
   if (err == MP_OKAY)
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	bb80      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_mul(t1, t2, t1);
 8009e90:	462a      	mov	r2, r5
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	f00f fb29 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	bb48      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_mod(t1, modulus, t1);
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f00f fdca 	bl	8019a3c <mp_mod>
   if (err == MP_OKAY)
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	bb10      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_mul(x, t2, x);
 8009eac:	4652      	mov	r2, sl
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	f00f fb1b 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	b9d8      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_montgomery_reduce(x, modulus, mp);
 8009eba:	464a      	mov	r2, r9
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	f010 fb04 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	b9a0      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
   y = P->y;
 8009ec8:	f10a 0a68 	add.w	sl, sl, #104	; 0x68
       err = mp_mul(y, t1, y);
 8009ecc:	4652      	mov	r2, sl
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	f00f fb0b 	bl	80194ec <mp_mul>
   if (err == MP_OKAY)
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	b958      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_montgomery_reduce(y, modulus, mp);
 8009eda:	464a      	mov	r2, r9
 8009edc:	4639      	mov	r1, r7
 8009ede:	4650      	mov	r0, sl
 8009ee0:	f010 faf4 	bl	801a4cc <mp_montgomery_reduce>
   if (err == MP_OKAY)
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	b920      	cbnz	r0, 8009ef2 <ecc_map_ex+0x142>
       err = mp_set(z, 1);
 8009ee8:	2101      	movs	r1, #1
 8009eea:	4640      	mov	r0, r8
 8009eec:	f010 faf4 	bl	801a4d8 <mp_set>
 8009ef0:	4604      	mov	r4, r0
   mp_clear(t1);
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f00f f9c3 	bl	801927e <mp_clear>
   mp_clear(t2);
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f00f f9c0 	bl	801927e <mp_clear>
      FREE_MP_INT_SIZE(t2, NULL, DYNAMIC_TYPE_ECC);
 8009efe:	4630      	mov	r0, r6
 8009f00:	f011 f856 	bl	801afb0 <free>
      FREE_MP_INT_SIZE(t1, NULL, DYNAMIC_TYPE_ECC);
 8009f04:	4628      	mov	r0, r5
 8009f06:	f011 f853 	bl	801afb0 <free>
}
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
           err = mp_montgomery_reduce(z, modulus, mp);
 8009f10:	464a      	mov	r2, r9
 8009f12:	4639      	mov	r1, r7
 8009f14:	4640      	mov	r0, r8
 8009f16:	f010 fad9 	bl	801a4cc <mp_montgomery_reduce>
           if (err == MP_OKAY)
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d1e8      	bne.n	8009ef2 <ecc_map_ex+0x142>
               err = mp_invmod(z, modulus, t1);
 8009f20:	462a      	mov	r2, r5
 8009f22:	4639      	mov	r1, r7
 8009f24:	4640      	mov	r0, r8
 8009f26:	f00f ffc3 	bl	8019eb0 <mp_invmod>
 8009f2a:	e7a2      	b.n	8009e72 <ecc_map_ex+0xc2>
       return ECC_BAD_ARG_E;
 8009f2c:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 8009f30:	e7eb      	b.n	8009f0a <ecc_map_ex+0x15a>
      if (t1 == NULL || t2 == NULL) {
 8009f32:	2d00      	cmp	r5, #0
 8009f34:	d184      	bne.n	8009e40 <ecc_map_ex+0x90>
         return MEMORY_E;
 8009f36:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8009f3a:	e7e6      	b.n	8009f0a <ecc_map_ex+0x15a>

08009f3c <ecc_map>:
    return ecc_map_ex(P, modulus, mp, 0);
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f7ff bf37 	b.w	8009db0 <ecc_map_ex>

08009f42 <wc_ecc_new_point_h>:
{
 8009f42:	b507      	push	{r0, r1, r2, lr}
    ecc_point* p = NULL;
 8009f44:	2300      	movs	r3, #0
    (void)wc_ecc_new_point_ex(&p, heap);
 8009f46:	a801      	add	r0, sp, #4
    ecc_point* p = NULL;
 8009f48:	9301      	str	r3, [sp, #4]
    (void)wc_ecc_new_point_ex(&p, heap);
 8009f4a:	f7ff f999 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
}
 8009f4e:	9801      	ldr	r0, [sp, #4]
 8009f50:	b003      	add	sp, #12
 8009f52:	f85d fb04 	ldr.w	pc, [sp], #4

08009f56 <wc_ecc_new_point>:
{
 8009f56:	b507      	push	{r0, r1, r2, lr}
   ecc_point* p = NULL;
 8009f58:	2300      	movs	r3, #0
   (void)wc_ecc_new_point_ex(&p, NULL);
 8009f5a:	a801      	add	r0, sp, #4
   ecc_point* p = NULL;
 8009f5c:	9301      	str	r3, [sp, #4]
   (void)wc_ecc_new_point_ex(&p, NULL);
 8009f5e:	f7ff f98f 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
}
 8009f62:	9801      	ldr	r0, [sp, #4]
 8009f64:	b003      	add	sp, #12
 8009f66:	f85d fb04 	ldr.w	pc, [sp], #4

08009f6a <wc_ecc_del_point_h>:
   wc_ecc_del_point_ex(p, heap);
 8009f6a:	f7ff b9b0 	b.w	80092ce <wc_ecc_del_point_ex.constprop.0>

08009f6e <wc_ecc_del_point>:
    wc_ecc_del_point_ex(p, NULL);
 8009f6e:	f7ff b9ae 	b.w	80092ce <wc_ecc_del_point_ex.constprop.0>

08009f72 <wc_ecc_copy_point>:
{
 8009f72:	b538      	push	{r3, r4, r5, lr}
 8009f74:	460d      	mov	r5, r1
    if (p == NULL || r == NULL)
 8009f76:	4604      	mov	r4, r0
 8009f78:	b190      	cbz	r0, 8009fa0 <wc_ecc_copy_point+0x2e>
 8009f7a:	b189      	cbz	r1, 8009fa0 <wc_ecc_copy_point+0x2e>
    ret = mp_copy(p->x, r->x);
 8009f7c:	f010 f9de 	bl	801a33c <mp_copy>
    if (ret != MP_OKAY)
 8009f80:	b980      	cbnz	r0, 8009fa4 <wc_ecc_copy_point+0x32>
    ret = mp_copy(p->y, r->y);
 8009f82:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8009f86:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f8a:	f010 f9d7 	bl	801a33c <mp_copy>
    if (ret != MP_OKAY)
 8009f8e:	b948      	cbnz	r0, 8009fa4 <wc_ecc_copy_point+0x32>
    ret = mp_copy(p->z, r->z);
 8009f90:	f105 01d0 	add.w	r1, r5, #208	; 0xd0
 8009f94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
 8009f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = mp_copy(p->z, r->z);
 8009f9c:	f010 b9ce 	b.w	801a33c <mp_copy>
        return ECC_BAD_ARG_E;
 8009fa0:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}

08009fa6 <wc_ecc_cmp_point>:
{
 8009fa6:	b538      	push	{r3, r4, r5, lr}
 8009fa8:	460d      	mov	r5, r1
    if (a == NULL || b == NULL)
 8009faa:	4604      	mov	r4, r0
 8009fac:	b190      	cbz	r0, 8009fd4 <wc_ecc_cmp_point+0x2e>
 8009fae:	b189      	cbz	r1, 8009fd4 <wc_ecc_cmp_point+0x2e>
    ret = mp_cmp(a->x, b->x);
 8009fb0:	f00f f995 	bl	80192de <mp_cmp>
    if (ret != MP_EQ)
 8009fb4:	b980      	cbnz	r0, 8009fd8 <wc_ecc_cmp_point+0x32>
    ret = mp_cmp(a->y, b->y);
 8009fb6:	f105 0168 	add.w	r1, r5, #104	; 0x68
 8009fba:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009fbe:	f00f f98e 	bl	80192de <mp_cmp>
    if (ret != MP_EQ)
 8009fc2:	b948      	cbnz	r0, 8009fd8 <wc_ecc_cmp_point+0x32>
    ret = mp_cmp(a->z, b->z);
 8009fc4:	f105 01d0 	add.w	r1, r5, #208	; 0xd0
 8009fc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
 8009fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = mp_cmp(a->z, b->z);
 8009fd0:	f00f b985 	b.w	80192de <mp_cmp>
        return BAD_FUNC_ARG;
 8009fd4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8009fd8:	bd38      	pop	{r3, r4, r5, pc}

08009fda <wc_ecc_is_valid_idx>:
   if (n >= (int)ECC_SET_COUNT)
 8009fda:	3001      	adds	r0, #1
}
 8009fdc:	2801      	cmp	r0, #1
 8009fde:	bf8c      	ite	hi
 8009fe0:	2000      	movhi	r0, #0
 8009fe2:	2001      	movls	r0, #1
 8009fe4:	4770      	bx	lr

08009fe6 <wc_ecc_get_curve_idx>:
}
 8009fe6:	3807      	subs	r0, #7
 8009fe8:	bf18      	it	ne
 8009fea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009fee:	4770      	bx	lr

08009ff0 <wc_ecc_get_curve_id>:
{
 8009ff0:	b508      	push	{r3, lr}
 8009ff2:	4602      	mov	r2, r0
    if (wc_ecc_is_valid_idx(curve_idx)) {
 8009ff4:	f7ff fff1 	bl	8009fda <wc_ecc_is_valid_idx>
 8009ff8:	b128      	cbz	r0, 800a006 <wc_ecc_get_curve_id+0x16>
        return ecc_sets[curve_idx].id;
 8009ffa:	4b04      	ldr	r3, [pc, #16]	; (800a00c <wc_ecc_get_curve_id+0x1c>)
 8009ffc:	2034      	movs	r0, #52	; 0x34
 8009ffe:	fb00 3002 	mla	r0, r0, r2, r3
 800a002:	6840      	ldr	r0, [r0, #4]
}
 800a004:	bd08      	pop	{r3, pc}
    return ECC_CURVE_INVALID;
 800a006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a00a:	e7fb      	b.n	800a004 <wc_ecc_get_curve_id+0x14>
 800a00c:	080226cc 	.word	0x080226cc

0800a010 <wc_ecc_get_curve_size_from_id>:
{
 800a010:	b508      	push	{r3, lr}
    int curve_idx = wc_ecc_get_curve_idx(curve_id);
 800a012:	f7ff ffe8 	bl	8009fe6 <wc_ecc_get_curve_idx>
    if (curve_idx == ECC_CURVE_INVALID)
 800a016:	1c43      	adds	r3, r0, #1
    return ecc_sets[curve_idx].size;
 800a018:	bf1d      	ittte	ne
 800a01a:	2334      	movne	r3, #52	; 0x34
 800a01c:	4358      	mulne	r0, r3
 800a01e:	4b03      	ldrne	r3, [pc, #12]	; (800a02c <wc_ecc_get_curve_size_from_id+0x1c>)
        return ECC_BAD_ARG_E;
 800a020:	f06f 00a9 	mvneq.w	r0, #169	; 0xa9
    return ecc_sets[curve_idx].size;
 800a024:	bf18      	it	ne
 800a026:	5818      	ldrne	r0, [r3, r0]
}
 800a028:	bd08      	pop	{r3, pc}
 800a02a:	bf00      	nop
 800a02c:	080226cc 	.word	0x080226cc

0800a030 <wc_ecc_point_is_at_infinity>:
{
 800a030:	b510      	push	{r4, lr}
    if (p == NULL)
 800a032:	4604      	mov	r4, r0
 800a034:	b150      	cbz	r0, 800a04c <wc_ecc_point_is_at_infinity+0x1c>
    if (mp_iszero(p->x) && mp_iszero(p->y))
 800a036:	f010 f986 	bl	801a346 <mp_iszero>
 800a03a:	b130      	cbz	r0, 800a04a <wc_ecc_point_is_at_infinity+0x1a>
 800a03c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a040:	f010 f981 	bl	801a346 <mp_iszero>
 800a044:	3800      	subs	r0, #0
 800a046:	bf18      	it	ne
 800a048:	2001      	movne	r0, #1
}
 800a04a:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 800a04c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800a050:	e7fb      	b.n	800a04a <wc_ecc_point_is_at_infinity+0x1a>

0800a052 <wc_ecc_gen_k>:
{
 800a052:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a054:	4615      	mov	r5, r2
 800a056:	b095      	sub	sp, #84	; 0x54
 800a058:	461f      	mov	r7, r3
    if (rng == NULL || size < 0 || size + 8 > ECC_MAXSIZE_GEN || k == NULL ||
 800a05a:	b3a0      	cbz	r0, 800a0c6 <wc_ecc_gen_k+0x74>
 800a05c:	2942      	cmp	r1, #66	; 0x42
 800a05e:	d832      	bhi.n	800a0c6 <wc_ecc_gen_k+0x74>
 800a060:	b38a      	cbz	r2, 800a0c6 <wc_ecc_gen_k+0x74>
 800a062:	b383      	cbz	r3, 800a0c6 <wc_ecc_gen_k+0x74>
    size += 8;
 800a064:	f101 0608 	add.w	r6, r1, #8
    err = wc_RNG_GenerateBlock(rng, buf, (word32)size);
 800a068:	4632      	mov	r2, r6
 800a06a:	a901      	add	r1, sp, #4
 800a06c:	f002 fb16 	bl	800c69c <wc_RNG_GenerateBlock>
    if (err == 0)
 800a070:	4604      	mov	r4, r0
 800a072:	b998      	cbnz	r0, 800a09c <wc_ecc_gen_k+0x4a>
        err = mp_read_unsigned_bin(k, buf, (word32)size);
 800a074:	4632      	mov	r2, r6
 800a076:	a901      	add	r1, sp, #4
 800a078:	4628      	mov	r0, r5
 800a07a:	f00f f936 	bl	80192ea <mp_read_unsigned_bin>
    if (err == MP_OKAY) {
 800a07e:	4604      	mov	r4, r0
 800a080:	b960      	cbnz	r0, 800a09c <wc_ecc_gen_k+0x4a>
        if (mp_cmp(k, order) != MP_LT) {
 800a082:	4639      	mov	r1, r7
 800a084:	4628      	mov	r0, r5
 800a086:	f00f f92a 	bl	80192de <mp_cmp>
 800a08a:	3001      	adds	r0, #1
 800a08c:	d110      	bne.n	800a0b0 <wc_ecc_gen_k+0x5e>
        if (mp_iszero(k) == MP_YES)
 800a08e:	4628      	mov	r0, r5
 800a090:	f010 f959 	bl	801a346 <mp_iszero>
          err = MP_ZERO_E;
 800a094:	2801      	cmp	r0, #1
 800a096:	bf08      	it	eq
 800a098:	f06f 0478 	mvneq.w	r4, #120	; 0x78
    while (len--) *z++ = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	4619      	mov	r1, r3
 800a0a0:	aa01      	add	r2, sp, #4
 800a0a2:	441a      	add	r2, r3
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	2b4b      	cmp	r3, #75	; 0x4b
 800a0a8:	d10b      	bne.n	800a0c2 <wc_ecc_gen_k+0x70>
}
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	b015      	add	sp, #84	; 0x54
 800a0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err = mp_mod(k, order, k);
 800a0b0:	462a      	mov	r2, r5
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f00f fcc1 	bl	8019a3c <mp_mod>
    if (err == MP_OKAY) {
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d0e7      	beq.n	800a08e <wc_ecc_gen_k+0x3c>
 800a0be:	4604      	mov	r4, r0
 800a0c0:	e7ec      	b.n	800a09c <wc_ecc_gen_k+0x4a>
 800a0c2:	7011      	strb	r1, [r2, #0]
 800a0c4:	e7ec      	b.n	800a0a0 <wc_ecc_gen_k+0x4e>
        return BAD_FUNC_ARG;
 800a0c6:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800a0ca:	e7ee      	b.n	800a0aa <wc_ecc_gen_k+0x58>

0800a0cc <wc_ecc_gen_z>:
{
 800a0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	e9dd 6b0c 	ldrd	r6, fp, [sp, #48]	; 0x30
 800a0d4:	4681      	mov	r9, r0
 800a0d6:	468a      	mov	sl, r1
    err = mp_montgomery_calc_normalization(mu, modulus);
 800a0d8:	4658      	mov	r0, fp
 800a0da:	4619      	mov	r1, r3
{
 800a0dc:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 800a0e0:	4614      	mov	r4, r2
 800a0e2:	461d      	mov	r5, r3
    err = mp_montgomery_calc_normalization(mu, modulus);
 800a0e4:	f010 f93a 	bl	801a35c <mp_montgomery_calc_normalization>
    if (err == MP_OKAY)
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d14d      	bne.n	800a188 <wc_ecc_gen_z+0xbc>
        err = wc_ecc_gen_k(rng, size, ty, modulus);
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4651      	mov	r1, sl
 800a0f2:	4648      	mov	r0, r9
 800a0f4:	f7ff ffad 	bl	800a052 <wc_ecc_gen_k>
    if (err == MP_OKAY)
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d145      	bne.n	800a188 <wc_ecc_gen_z+0xbc>
        err = mp_mulmod(ty, mu, modulus, ty);
 800a0fc:	4633      	mov	r3, r6
 800a0fe:	462a      	mov	r2, r5
 800a100:	4659      	mov	r1, fp
 800a102:	4630      	mov	r0, r6
 800a104:	f00f fc73 	bl	80199ee <mp_mulmod>
    if (err == MP_OKAY)
 800a108:	bbf0      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->z, ty, p->z);
 800a10a:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
 800a10e:	464a      	mov	r2, r9
 800a110:	4631      	mov	r1, r6
 800a112:	4648      	mov	r0, r9
 800a114:	f00f f9ea 	bl	80194ec <mp_mul>
    if (err == MP_OKAY)
 800a118:	bbb0      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->z, modulus, mp);
 800a11a:	463a      	mov	r2, r7
 800a11c:	4629      	mov	r1, r5
 800a11e:	4648      	mov	r0, r9
 800a120:	f010 f9d4 	bl	801a4cc <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800a124:	bb80      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_sqr(ty, tx);
 800a126:	4641      	mov	r1, r8
 800a128:	4630      	mov	r0, r6
 800a12a:	f010 f9cd 	bl	801a4c8 <mp_sqr>
    if (err == MP_OKAY)
 800a12e:	bb58      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(tx, modulus, mp);
 800a130:	463a      	mov	r2, r7
 800a132:	4629      	mov	r1, r5
 800a134:	4640      	mov	r0, r8
 800a136:	f010 f9c9 	bl	801a4cc <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800a13a:	bb28      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_mul(ty, tx, ty);
 800a13c:	4632      	mov	r2, r6
 800a13e:	4641      	mov	r1, r8
 800a140:	4630      	mov	r0, r6
 800a142:	f00f f9d3 	bl	80194ec <mp_mul>
    if (err == MP_OKAY)
 800a146:	b9f8      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(ty, modulus, mp);
 800a148:	463a      	mov	r2, r7
 800a14a:	4629      	mov	r1, r5
 800a14c:	4630      	mov	r0, r6
 800a14e:	f010 f9bd 	bl	801a4cc <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800a152:	b9c8      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->x, tx, p->x);
 800a154:	4622      	mov	r2, r4
 800a156:	4641      	mov	r1, r8
 800a158:	4620      	mov	r0, r4
 800a15a:	f00f f9c7 	bl	80194ec <mp_mul>
    if (err == MP_OKAY)
 800a15e:	b998      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->x, modulus, mp);
 800a160:	463a      	mov	r2, r7
 800a162:	4629      	mov	r1, r5
 800a164:	4620      	mov	r0, r4
 800a166:	f010 f9b1 	bl	801a4cc <mp_montgomery_reduce>
    if (err == MP_OKAY)
 800a16a:	b968      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_mul(p->y, ty, p->y);
 800a16c:	3468      	adds	r4, #104	; 0x68
 800a16e:	4622      	mov	r2, r4
 800a170:	4631      	mov	r1, r6
 800a172:	4620      	mov	r0, r4
 800a174:	f00f f9ba 	bl	80194ec <mp_mul>
    if (err == MP_OKAY)
 800a178:	b930      	cbnz	r0, 800a188 <wc_ecc_gen_z+0xbc>
        err = mp_montgomery_reduce(p->y, modulus, mp);
 800a17a:	463a      	mov	r2, r7
 800a17c:	4629      	mov	r1, r5
 800a17e:	4620      	mov	r0, r4
}
 800a180:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        err = mp_montgomery_reduce(p->y, modulus, mp);
 800a184:	f010 b9a2 	b.w	801a4cc <mp_montgomery_reduce>
}
 800a188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a18c <wc_ecc_init_ex>:
{
 800a18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a18e:	460d      	mov	r5, r1
    if (key == NULL) {
 800a190:	4604      	mov	r4, r0
 800a192:	b1b0      	cbz	r0, 800a1c2 <wc_ecc_init_ex+0x36>
    XMEMSET(key, 0, sizeof(ecc_key));
 800a194:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800a198:	2100      	movs	r1, #0
 800a19a:	f010 ff49 	bl	801b030 <memset>
    key->state = ECC_STATE_NONE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60a3      	str	r3, [r4, #8]
    ret = mp_init_multi(key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 800a1a2:	f104 0280 	add.w	r2, r4, #128	; 0x80
 800a1a6:	e9cd 3300 	strd	r3, r3, [sp]
 800a1aa:	f104 0118 	add.w	r1, r4, #24
 800a1ae:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
 800a1b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800a1b6:	f00f f867 	bl	8019288 <mp_init_multi>
    if (ret != MP_OKAY) {
 800a1ba:	b928      	cbnz	r0, 800a1c8 <wc_ecc_init_ex+0x3c>
    key->heap = heap;
 800a1bc:	6165      	str	r5, [r4, #20]
}
 800a1be:	b003      	add	sp, #12
 800a1c0:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 800a1c2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800a1c6:	e7fa      	b.n	800a1be <wc_ecc_init_ex+0x32>
        return MEMORY_E;
 800a1c8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800a1cc:	e7f7      	b.n	800a1be <wc_ecc_init_ex+0x32>

0800a1ce <wc_ecc_key_new>:
{
 800a1ce:	b538      	push	{r3, r4, r5, lr}
 800a1d0:	4605      	mov	r5, r0
    key = (ecc_key*)XMALLOC(sizeof(ecc_key), heap, DYNAMIC_TYPE_ECC);
 800a1d2:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800a1d6:	f010 fee3 	bl	801afa0 <malloc>
    if (key) {
 800a1da:	4604      	mov	r4, r0
 800a1dc:	b148      	cbz	r0, 800a1f2 <wc_ecc_key_new+0x24>
        if (wc_ecc_init_ex(key, heap, devId) != 0) {
 800a1de:	f06f 0201 	mvn.w	r2, #1
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7ff ffd2 	bl	800a18c <wc_ecc_init_ex>
 800a1e8:	b118      	cbz	r0, 800a1f2 <wc_ecc_key_new+0x24>
            XFREE(key, heap, DYNAMIC_TYPE_ECC);
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f010 fee0 	bl	801afb0 <free>
            key = NULL;
 800a1f0:	2400      	movs	r4, #0
}
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}

0800a1f6 <wc_ecc_init>:
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
 800a1f6:	f06f 0201 	mvn.w	r2, #1
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	f7ff bfc6 	b.w	800a18c <wc_ecc_init_ex>

0800a200 <wc_ecc_set_flags>:
    if (key == NULL) {
 800a200:	b120      	cbz	r0, 800a20c <wc_ecc_set_flags+0xc>
    key->flags |= flags;
 800a202:	68c3      	ldr	r3, [r0, #12]
 800a204:	430b      	orrs	r3, r1
 800a206:	60c3      	str	r3, [r0, #12]
    return 0;
 800a208:	2000      	movs	r0, #0
 800a20a:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800a20c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800a210:	4770      	bx	lr

0800a212 <wc_ecc_free>:
{
 800a212:	b510      	push	{r4, lr}
    if (key == NULL) {
 800a214:	4604      	mov	r4, r0
 800a216:	b170      	cbz	r0, 800a236 <wc_ecc_free+0x24>
    mp_clear(key->pubkey.x);
 800a218:	3018      	adds	r0, #24
 800a21a:	f00f f830 	bl	801927e <mp_clear>
    mp_clear(key->pubkey.y);
 800a21e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800a222:	f00f f82c 	bl	801927e <mp_clear>
    mp_clear(key->pubkey.z);
 800a226:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800a22a:	f00f f828 	bl	801927e <mp_clear>
        mp_forcezero(key->k);
 800a22e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800a232:	f00f f822 	bl	801927a <mp_forcezero>
}
 800a236:	2000      	movs	r0, #0
 800a238:	bd10      	pop	{r4, pc}

0800a23a <wc_ecc_key_free>:
{
 800a23a:	b510      	push	{r4, lr}
    if (key) {
 800a23c:	4604      	mov	r4, r0
 800a23e:	b178      	cbz	r0, 800a260 <wc_ecc_key_free+0x26>
        wc_ecc_free(key);
 800a240:	f7ff ffe7 	bl	800a212 <wc_ecc_free>
 800a244:	f504 72de 	add.w	r2, r4, #444	; 0x1bc
 800a248:	4623      	mov	r3, r4
 800a24a:	2100      	movs	r1, #0
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d104      	bne.n	800a25a <wc_ecc_key_free+0x20>
        XFREE(key, heap, DYNAMIC_TYPE_ECC);
 800a250:	4620      	mov	r0, r4
}
 800a252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        XFREE(key, heap, DYNAMIC_TYPE_ECC);
 800a256:	f010 beab 	b.w	801afb0 <free>
 800a25a:	f803 1b01 	strb.w	r1, [r3], #1
 800a25e:	e7f5      	b.n	800a24c <wc_ecc_key_free+0x12>
}
 800a260:	bd10      	pop	{r4, pc}

0800a262 <ecc_projective_add_point_safe>:
{
 800a262:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a266:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a268:	e9dd 580a 	ldrd	r5, r8, [sp, #40]	; 0x28
 800a26c:	4606      	mov	r6, r0
 800a26e:	4689      	mov	r9, r1
 800a270:	4614      	mov	r4, r2
    if (mp_iszero(A->x) && mp_iszero(A->y)) {
 800a272:	f010 f868 	bl	801a346 <mp_iszero>
 800a276:	b158      	cbz	r0, 800a290 <ecc_projective_add_point_safe+0x2e>
 800a278:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800a27c:	f010 f863 	bl	801a346 <mp_iszero>
 800a280:	b130      	cbz	r0, 800a290 <ecc_projective_add_point_safe+0x2e>
        err = wc_ecc_copy_point(B, R);
 800a282:	4621      	mov	r1, r4
 800a284:	4648      	mov	r0, r9
}
 800a286:	b002      	add	sp, #8
 800a288:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        err = wc_ecc_copy_point(A, R);
 800a28c:	f7ff be71 	b.w	8009f72 <wc_ecc_copy_point>
    else if (mp_iszero(B->x) && mp_iszero(B->y)) {
 800a290:	4648      	mov	r0, r9
 800a292:	f010 f858 	bl	801a346 <mp_iszero>
 800a296:	b138      	cbz	r0, 800a2a8 <ecc_projective_add_point_safe+0x46>
 800a298:	f109 0068 	add.w	r0, r9, #104	; 0x68
 800a29c:	f010 f853 	bl	801a346 <mp_iszero>
 800a2a0:	b110      	cbz	r0, 800a2a8 <ecc_projective_add_point_safe+0x46>
        err = wc_ecc_copy_point(A, R);
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	e7ee      	b.n	800a286 <ecc_projective_add_point_safe+0x24>
    else if ((mp_cmp(A->x, B->x) == MP_EQ) && (mp_cmp(A->z, B->z) == MP_EQ)) {
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f00f f817 	bl	80192de <mp_cmp>
 800a2b0:	bb60      	cbnz	r0, 800a30c <ecc_projective_add_point_safe+0xaa>
 800a2b2:	f109 01d0 	add.w	r1, r9, #208	; 0xd0
 800a2b6:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 800a2ba:	f00f f810 	bl	80192de <mp_cmp>
 800a2be:	4682      	mov	sl, r0
 800a2c0:	bb20      	cbnz	r0, 800a30c <ecc_projective_add_point_safe+0xaa>
        if (mp_cmp(A->y, B->y) == MP_EQ) {
 800a2c2:	f109 0168 	add.w	r1, r9, #104	; 0x68
 800a2c6:	f106 0068 	add.w	r0, r6, #104	; 0x68
 800a2ca:	f00f f808 	bl	80192de <mp_cmp>
 800a2ce:	b920      	cbnz	r0, 800a2da <ecc_projective_add_point_safe+0x78>
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4648      	mov	r0, r9
 800a2d8:	e048      	b.n	800a36c <ecc_projective_add_point_safe+0x10a>
            err = mp_set(R->x, 0);
 800a2da:	4651      	mov	r1, sl
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f010 f8fb 	bl	801a4d8 <mp_set>
            if (err == MP_OKAY)
 800a2e2:	b968      	cbnz	r0, 800a300 <ecc_projective_add_point_safe+0x9e>
                err = mp_set(R->y, 0);
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2ea:	f010 f8f5 	bl	801a4d8 <mp_set>
            if (err == MP_OKAY)
 800a2ee:	b938      	cbnz	r0, 800a300 <ecc_projective_add_point_safe+0x9e>
                err = mp_set(R->z, 1);
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2f6:	f010 f8ef 	bl	801a4d8 <mp_set>
            if ((err == MP_OKAY) && (infinity != NULL))
 800a2fa:	b908      	cbnz	r0, 800a300 <ecc_projective_add_point_safe+0x9e>
 800a2fc:	b91f      	cbnz	r7, 800a306 <ecc_projective_add_point_safe+0xa4>
                *infinity = 1;
 800a2fe:	2000      	movs	r0, #0
}
 800a300:	b002      	add	sp, #8
 800a302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                *infinity = 1;
 800a306:	2301      	movs	r3, #1
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	e7f8      	b.n	800a2fe <ecc_projective_add_point_safe+0x9c>
        err = _ecc_projective_add_point(A, B, R, a, modulus, mp);
 800a30c:	f8cd 8000 	str.w	r8, [sp]
 800a310:	462b      	mov	r3, r5
 800a312:	4622      	mov	r2, r4
 800a314:	4649      	mov	r1, r9
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff f9aa 	bl	8009670 <_ecc_projective_add_point.isra.0>
        if ((err == MP_OKAY) && mp_iszero(R->z)) {
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d1ef      	bne.n	800a300 <ecc_projective_add_point_safe+0x9e>
 800a320:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
 800a324:	4630      	mov	r0, r6
 800a326:	f010 f80e 	bl	801a346 <mp_iszero>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0e7      	beq.n	800a2fe <ecc_projective_add_point_safe+0x9c>
            if (mp_iszero(R->x) && mp_iszero(R->y)) {
 800a32e:	4620      	mov	r0, r4
 800a330:	f010 f809 	bl	801a346 <mp_iszero>
 800a334:	b1f8      	cbz	r0, 800a376 <ecc_projective_add_point_safe+0x114>
 800a336:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a33a:	f010 f804 	bl	801a346 <mp_iszero>
 800a33e:	b1d0      	cbz	r0, 800a376 <ecc_projective_add_point_safe+0x114>
                if (mp_iszero(B->z)) {
 800a340:	f109 00d0 	add.w	r0, r9, #208	; 0xd0
 800a344:	f00f ffff 	bl	801a346 <mp_iszero>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d0c1      	beq.n	800a2d0 <ecc_projective_add_point_safe+0x6e>
                    err = wc_ecc_copy_point(B, R);
 800a34c:	4621      	mov	r1, r4
 800a34e:	4648      	mov	r0, r9
 800a350:	f7ff fe0f 	bl	8009f72 <wc_ecc_copy_point>
                    if (err == MP_OKAY) {
 800a354:	2800      	cmp	r0, #0
 800a356:	d1d3      	bne.n	800a300 <ecc_projective_add_point_safe+0x9e>
                        err = mp_montgomery_calc_normalization(R->z, modulus);
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f00f fffe 	bl	801a35c <mp_montgomery_calc_normalization>
                    if (err == MP_OKAY) {
 800a360:	2800      	cmp	r0, #0
 800a362:	d1cd      	bne.n	800a300 <ecc_projective_add_point_safe+0x9e>
                        err = _ecc_projective_dbl_point(R, R, a, modulus, mp);
 800a364:	4643      	mov	r3, r8
 800a366:	462a      	mov	r2, r5
 800a368:	4621      	mov	r1, r4
 800a36a:	4620      	mov	r0, r4
}
 800a36c:	b002      	add	sp, #8
 800a36e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    err = _ecc_projective_dbl_point(B, R, a, modulus, mp);
 800a372:	f7ff b81c 	b.w	80093ae <_ecc_projective_dbl_point.constprop.0>
                err = mp_set(R->x, 0);
 800a376:	2100      	movs	r1, #0
 800a378:	4620      	mov	r0, r4
 800a37a:	f010 f8ad 	bl	801a4d8 <mp_set>
                if (err == MP_OKAY)
 800a37e:	2800      	cmp	r0, #0
 800a380:	d1be      	bne.n	800a300 <ecc_projective_add_point_safe+0x9e>
                    err = mp_set(R->y, 0);
 800a382:	4601      	mov	r1, r0
 800a384:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a388:	f010 f8a6 	bl	801a4d8 <mp_set>
                if (err == MP_OKAY)
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d1b7      	bne.n	800a300 <ecc_projective_add_point_safe+0x9e>
                    err = mp_set(R->z, 1);
 800a390:	2101      	movs	r1, #1
 800a392:	4630      	mov	r0, r6
 800a394:	e7af      	b.n	800a2f6 <ecc_projective_add_point_safe+0x94>

0800a396 <ecc_projective_dbl_point_safe>:
{
 800a396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39a:	9f06      	ldr	r7, [sp, #24]
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	461e      	mov	r6, r3
    if (mp_iszero(P->x) && mp_iszero(P->y)) {
 800a3a2:	f00f ffd0 	bl	801a346 <mp_iszero>
 800a3a6:	b150      	cbz	r0, 800a3be <ecc_projective_dbl_point_safe+0x28>
 800a3a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a3ac:	f00f ffcb 	bl	801a346 <mp_iszero>
 800a3b0:	b128      	cbz	r0, 800a3be <ecc_projective_dbl_point_safe+0x28>
        err = wc_ecc_copy_point(P, R);
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4620      	mov	r0, r4
}
 800a3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = wc_ecc_copy_point(P, R);
 800a3ba:	f7ff bdda 	b.w	8009f72 <wc_ecc_copy_point>
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800a3be:	463b      	mov	r3, r7
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4620      	mov	r0, r4
}
 800a3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = _ecc_projective_dbl_point(P, R, a, modulus, mp);
 800a3ca:	f7fe bff0 	b.w	80093ae <_ecc_projective_dbl_point.constprop.0>

0800a3ce <ecc_mulmod>:
{
 800a3ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d2:	b08d      	sub	sp, #52	; 0x34
 800a3d4:	4688      	mov	r8, r1
 800a3d6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a3d8:	9005      	str	r0, [sp, #20]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800a3da:	4628      	mov	r0, r5
{
 800a3dc:	9206      	str	r2, [sp, #24]
 800a3de:	461c      	mov	r4, r3
 800a3e0:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800a3e4:	f00f ffb4 	bl	801a350 <mp_count_bits>
    mp_int*  kt = R[2]->x;
 800a3e8:	68a3      	ldr	r3, [r4, #8]
 800a3ea:	9304      	str	r3, [sp, #16]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800a3ec:	4607      	mov	r7, r0
    tmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 800a3ee:	2068      	movs	r0, #104	; 0x68
 800a3f0:	f010 fdd6 	bl	801afa0 <malloc>
    if (tmp == NULL) {
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f000 818a 	beq.w	800a710 <ecc_mulmod+0x342>
        err = mp_init(tmp);
 800a3fc:	f00e ff2a 	bl	8019254 <mp_init>
    if (err == MP_OKAY)
 800a400:	4602      	mov	r2, r0
 800a402:	2800      	cmp	r0, #0
 800a404:	d147      	bne.n	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[0]->x);
 800a406:	6821      	ldr	r1, [r4, #0]
 800a408:	4640      	mov	r0, r8
 800a40a:	f00f ff97 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a40e:	4602      	mov	r2, r0
 800a410:	2800      	cmp	r0, #0
 800a412:	d140      	bne.n	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->y, R[0]->y);
 800a414:	6821      	ldr	r1, [r4, #0]
 800a416:	f108 0b68 	add.w	fp, r8, #104	; 0x68
 800a41a:	3168      	adds	r1, #104	; 0x68
 800a41c:	4658      	mov	r0, fp
 800a41e:	f00f ff8d 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a422:	4602      	mov	r2, r0
 800a424:	2800      	cmp	r0, #0
 800a426:	d136      	bne.n	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[0]->z);
 800a428:	6821      	ldr	r1, [r4, #0]
 800a42a:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
 800a42e:	31d0      	adds	r1, #208	; 0xd0
 800a430:	4650      	mov	r0, sl
 800a432:	f00f ff83 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a436:	4602      	mov	r2, r0
 800a438:	bb68      	cbnz	r0, 800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[1]->x);
 800a43a:	6861      	ldr	r1, [r4, #4]
 800a43c:	4640      	mov	r0, r8
 800a43e:	f00f ff7d 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a442:	4602      	mov	r2, r0
 800a444:	bb38      	cbnz	r0, 800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->y, R[1]->y);
 800a446:	6861      	ldr	r1, [r4, #4]
 800a448:	4658      	mov	r0, fp
 800a44a:	3168      	adds	r1, #104	; 0x68
 800a44c:	f00f ff76 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a450:	4602      	mov	r2, r0
 800a452:	bb00      	cbnz	r0, 800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[1]->z);
 800a454:	6861      	ldr	r1, [r4, #4]
 800a456:	4650      	mov	r0, sl
 800a458:	31d0      	adds	r1, #208	; 0xd0
 800a45a:	f00f ff6f 	bl	801a33c <mp_copy>
    if ((err == MP_OKAY) && (rng != NULL))
 800a45e:	4602      	mov	r2, r0
 800a460:	b9c8      	cbnz	r0, 800a496 <ecc_mulmod+0xc8>
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	d11c      	bne.n	800a4a2 <ecc_mulmod+0xd4>
        t = mp_count_bits(modulus) + 1;
 800a468:	4628      	mov	r0, r5
 800a46a:	f00f ff71 	bl	801a350 <mp_count_bits>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	9307      	str	r3, [sp, #28]
    int      cnt = DIGIT_BIT;
 800a472:	f8dd 901c 	ldr.w	r9, [sp, #28]
        v = k->dp[0] >> 1;
 800a476:	9b05      	ldr	r3, [sp, #20]
        err = mp_copy(k, kt);
 800a478:	9904      	ldr	r1, [sp, #16]
        v = k->dp[0] >> 1;
 800a47a:	689f      	ldr	r7, [r3, #8]
    int      cnt = DIGIT_BIT;
 800a47c:	f1b9 0f20 	cmp.w	r9, #32
        err = mp_copy(k, kt);
 800a480:	4618      	mov	r0, r3
    int      cnt = DIGIT_BIT;
 800a482:	bfa8      	it	ge
 800a484:	f04f 0920 	movge.w	r9, #32
        err = mp_copy(k, kt);
 800a488:	f00f ff58 	bl	801a33c <mp_copy>
        v = k->dp[0] >> 1;
 800a48c:	087f      	lsrs	r7, r7, #1
    if (err == MP_OKAY) {
 800a48e:	4602      	mov	r2, r0
 800a490:	2800      	cmp	r0, #0
 800a492:	f000 8139 	beq.w	800a708 <ecc_mulmod+0x33a>
    XFREE(tmp, NULL, DYNAMIC_TYPE_ECC);
 800a496:	4630      	mov	r0, r6
 800a498:	9204      	str	r2, [sp, #16]
 800a49a:	f010 fd89 	bl	801afb0 <free>
 800a49e:	9a04      	ldr	r2, [sp, #16]
 800a4a0:	e138      	b.n	800a714 <ecc_mulmod+0x346>
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	9203      	str	r2, [sp, #12]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800a4a8:	3707      	adds	r7, #7
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800a4aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800a4ae:	bf48      	it	mi
 800a4b0:	3707      	addmi	r7, #7
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800a4b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    int      bytes = (mp_count_bits(modulus) + 7) / 8;
 800a4b6:	10ff      	asrs	r7, r7, #3
        err = wc_ecc_gen_z(rng, bytes, R[0], modulus, mp, R[2]->x, R[2]->y, kt);
 800a4b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4ba:	6822      	ldr	r2, [r4, #0]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4639      	mov	r1, r7
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	4648      	mov	r0, r9
 800a4c4:	f7ff fe02 	bl	800a0cc <wc_ecc_gen_z>
    if ((err == MP_OKAY) && (rng != NULL))
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d1e3      	bne.n	800a496 <ecc_mulmod+0xc8>
        err = wc_ecc_gen_z(rng, bytes, R[1], modulus, mp, R[2]->x, R[2]->y, kt);
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	9a04      	ldr	r2, [sp, #16]
 800a4d2:	9203      	str	r2, [sp, #12]
 800a4d4:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a4d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a4dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4de:	6862      	ldr	r2, [r4, #4]
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	4648      	mov	r0, r9
 800a4e8:	f7ff fdf0 	bl	800a0cc <wc_ecc_gen_z>
    if (err == MP_OKAY) {
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d1d1      	bne.n	800a496 <ecc_mulmod+0xc8>
 800a4f2:	e7b9      	b.n	800a468 <ecc_mulmod+0x9a>
        if (--cnt == 0) {
 800a4f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4f8:	d108      	bne.n	800a50c <ecc_mulmod+0x13e>
            v = kt->dp[j++];
 800a4fa:	f10a 0202 	add.w	r2, sl, #2
 800a4fe:	9904      	ldr	r1, [sp, #16]
 800a500:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
 800a504:	f10a 0a01 	add.w	sl, sl, #1
            cnt = DIGIT_BIT;
 800a508:	f04f 0920 	mov.w	r9, #32
        b = v & 1;
 800a50c:	f007 0201 	and.w	r2, r7, #1
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800a510:	9600      	str	r6, [sp, #0]
        swap ^= (int)b;
 800a512:	4053      	eors	r3, r2
        b = v & 1;
 800a514:	9208      	str	r2, [sp, #32]
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800a516:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a51a:	682a      	ldr	r2, [r5, #0]
 800a51c:	9309      	str	r3, [sp, #36]	; 0x24
 800a51e:	f00f ff1f 	bl	801a360 <mp_cond_swap_ct_ex>
        v >>= 1;
 800a522:	087f      	lsrs	r7, r7, #1
        if (err == MP_OKAY) {
 800a524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a526:	4602      	mov	r2, r0
 800a528:	bb50      	cbnz	r0, 800a580 <ecc_mulmod+0x1b2>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used, swap,
 800a52a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a52e:	9600      	str	r6, [sp, #0]
 800a530:	682a      	ldr	r2, [r5, #0]
 800a532:	3168      	adds	r1, #104	; 0x68
 800a534:	3068      	adds	r0, #104	; 0x68
 800a536:	f00f ff13 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800a53a:	4602      	mov	r2, r0
 800a53c:	bb00      	cbnz	r0, 800a580 <ecc_mulmod+0x1b2>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used, swap,
 800a53e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a542:	9600      	str	r6, [sp, #0]
 800a544:	682a      	ldr	r2, [r5, #0]
 800a546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a548:	31d0      	adds	r1, #208	; 0xd0
 800a54a:	30d0      	adds	r0, #208	; 0xd0
 800a54c:	f00f ff08 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY)
 800a550:	4602      	mov	r2, r0
 800a552:	b9a8      	cbnz	r0, 800a580 <ecc_mulmod+0x1b2>
            err = ecc_projective_dbl_point_safe(R[0], R[0], a, modulus, mp);
 800a554:	6821      	ldr	r1, [r4, #0]
 800a556:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a558:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	4608      	mov	r0, r1
 800a55e:	462b      	mov	r3, r5
 800a560:	f7ff ff19 	bl	800a396 <ecc_projective_dbl_point_safe>
        if (err == MP_OKAY) {
 800a564:	4602      	mov	r2, r0
 800a566:	b958      	cbnz	r0, 800a580 <ecc_mulmod+0x1b2>
            err = ecc_projective_add_point_safe(R[0], R[1], R[0], a, modulus,
 800a568:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a56c:	ab0b      	add	r3, sp, #44	; 0x2c
 800a56e:	9302      	str	r3, [sp, #8]
 800a570:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a572:	4610      	mov	r0, r2
 800a574:	e9cd 5300 	strd	r5, r3, [sp]
 800a578:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a57a:	f7ff fe72 	bl	800a262 <ecc_projective_add_point_safe>
 800a57e:	4602      	mov	r2, r0
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 800a580:	f10b 0b01 	add.w	fp, fp, #1
 800a584:	2a00      	cmp	r2, #0
 800a586:	d186      	bne.n	800a496 <ecc_mulmod+0xc8>
        swap = (int)b;
 800a588:	9b08      	ldr	r3, [sp, #32]
    for (i = 1; (err == MP_OKAY) && (i < t); i++) {
 800a58a:	9a07      	ldr	r2, [sp, #28]
 800a58c:	455a      	cmp	r2, fp
 800a58e:	dcb1      	bgt.n	800a4f4 <ecc_mulmod+0x126>
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800a590:	9600      	str	r6, [sp, #0]
    swap ^= 1;
 800a592:	f083 0701 	eor.w	r7, r3, #1
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, swap,
 800a596:	682a      	ldr	r2, [r5, #0]
 800a598:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a59c:	463b      	mov	r3, r7
 800a59e:	f00f fedf 	bl	801a360 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY) {
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f47f af76 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used, swap,
 800a5aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a5ae:	9600      	str	r6, [sp, #0]
 800a5b0:	682a      	ldr	r2, [r5, #0]
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	3168      	adds	r1, #104	; 0x68
 800a5b6:	3068      	adds	r0, #104	; 0x68
 800a5b8:	f00f fed2 	bl	801a360 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY) {
 800a5bc:	4602      	mov	r2, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f47f af69 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used, swap,
 800a5c4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a5c8:	9600      	str	r6, [sp, #0]
 800a5ca:	682a      	ldr	r2, [r5, #0]
 800a5cc:	463b      	mov	r3, r7
 800a5ce:	31d0      	adds	r1, #208	; 0xd0
 800a5d0:	30d0      	adds	r0, #208	; 0xd0
 800a5d2:	f00f fec5 	bl	801a360 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY)
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	f47f af5c 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->x, R[2]->x);
 800a5de:	68a1      	ldr	r1, [r4, #8]
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	f00f feab 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	f47f af54 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_sub(modulus, P->y, R[2]->y);
 800a5ee:	68a2      	ldr	r2, [r4, #8]
 800a5f0:	f108 0168 	add.w	r1, r8, #104	; 0x68
 800a5f4:	3268      	adds	r2, #104	; 0x68
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f00e fe6b 	bl	80192d2 <mp_sub>
    if (err == MP_OKAY)
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f47f af49 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(P->z, R[2]->z);
 800a604:	68a1      	ldr	r1, [r4, #8]
 800a606:	f108 00d0 	add.w	r0, r8, #208	; 0xd0
 800a60a:	31d0      	adds	r1, #208	; 0xd0
 800a60c:	f00f fe96 	bl	801a33c <mp_copy>
    if (err == MP_OKAY) {
 800a610:	4602      	mov	r2, r0
 800a612:	2800      	cmp	r0, #0
 800a614:	f47f af3f 	bne.w	800a496 <ecc_mulmod+0xc8>
        b = k->dp[0] & 1;
 800a618:	9b05      	ldr	r3, [sp, #20]
 800a61a:	689f      	ldr	r7, [r3, #8]
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, (int)b,
 800a61c:	9600      	str	r6, [sp, #0]
        b = k->dp[0] & 1;
 800a61e:	f007 0701 	and.w	r7, r7, #1
        err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used, (int)b,
 800a622:	682a      	ldr	r2, [r5, #0]
 800a624:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a628:	463b      	mov	r3, r7
 800a62a:	f00f fe99 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800a62e:	4602      	mov	r2, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	f47f af30 	bne.w	800a496 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used,
 800a636:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a63a:	9600      	str	r6, [sp, #0]
 800a63c:	682a      	ldr	r2, [r5, #0]
 800a63e:	463b      	mov	r3, r7
 800a640:	3168      	adds	r1, #104	; 0x68
 800a642:	3068      	adds	r0, #104	; 0x68
 800a644:	f00f fe8c 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800a648:	4602      	mov	r2, r0
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f47f af23 	bne.w	800a496 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used,
 800a650:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a654:	9600      	str	r6, [sp, #0]
 800a656:	682a      	ldr	r2, [r5, #0]
 800a658:	463b      	mov	r3, r7
 800a65a:	31d0      	adds	r1, #208	; 0xd0
 800a65c:	30d0      	adds	r0, #208	; 0xd0
 800a65e:	f00f fe7f 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY)
 800a662:	4602      	mov	r2, r0
 800a664:	2800      	cmp	r0, #0
 800a666:	f47f af16 	bne.w	800a496 <ecc_mulmod+0xc8>
            err = ecc_projective_add_point_safe(R[0], R[2], R[0], a, modulus,
 800a66a:	ab0b      	add	r3, sp, #44	; 0x2c
 800a66c:	6822      	ldr	r2, [r4, #0]
 800a66e:	9302      	str	r3, [sp, #8]
 800a670:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a672:	68a1      	ldr	r1, [r4, #8]
 800a674:	e9cd 5300 	strd	r5, r3, [sp]
 800a678:	4610      	mov	r0, r2
 800a67a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a67c:	f7ff fdf1 	bl	800a262 <ecc_projective_add_point_safe>
        if (err == MP_OKAY) {
 800a680:	4602      	mov	r2, r0
 800a682:	2800      	cmp	r0, #0
 800a684:	f47f af07 	bne.w	800a496 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->x, R[1]->x, (int)modulus->used,
 800a688:	9600      	str	r6, [sp, #0]
 800a68a:	682a      	ldr	r2, [r5, #0]
 800a68c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a690:	463b      	mov	r3, r7
 800a692:	f00f fe65 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800a696:	4602      	mov	r2, r0
 800a698:	2800      	cmp	r0, #0
 800a69a:	f47f aefc 	bne.w	800a496 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->y, R[1]->y, (int)modulus->used,
 800a69e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a6a2:	9600      	str	r6, [sp, #0]
 800a6a4:	682a      	ldr	r2, [r5, #0]
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	3168      	adds	r1, #104	; 0x68
 800a6aa:	3068      	adds	r0, #104	; 0x68
 800a6ac:	f00f fe58 	bl	801a360 <mp_cond_swap_ct_ex>
        if (err == MP_OKAY) {
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f47f aeef 	bne.w	800a496 <ecc_mulmod+0xc8>
            err = mp_cond_swap_ct_ex(R[0]->z, R[1]->z, (int)modulus->used,
 800a6b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a6bc:	9600      	str	r6, [sp, #0]
 800a6be:	682a      	ldr	r2, [r5, #0]
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	31d0      	adds	r1, #208	; 0xd0
 800a6c4:	30d0      	adds	r0, #208	; 0xd0
 800a6c6:	f00f fe4b 	bl	801a360 <mp_cond_swap_ct_ex>
    if (err == MP_OKAY)
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	f47f aee2 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->x, Q->x);
 800a6d2:	9906      	ldr	r1, [sp, #24]
 800a6d4:	6820      	ldr	r0, [r4, #0]
 800a6d6:	f00f fe31 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a6da:	4602      	mov	r2, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f47f aeda 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->y, Q->y);
 800a6e2:	6820      	ldr	r0, [r4, #0]
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	3068      	adds	r0, #104	; 0x68
 800a6e8:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800a6ec:	f00f fe26 	bl	801a33c <mp_copy>
    if (err == MP_OKAY)
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f47f aecf 	bne.w	800a496 <ecc_mulmod+0xc8>
        err = mp_copy(R[0]->z, Q->z);
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	9906      	ldr	r1, [sp, #24]
 800a6fc:	30d0      	adds	r0, #208	; 0xd0
 800a6fe:	31d0      	adds	r1, #208	; 0xd0
 800a700:	f00f fe1c 	bl	801a33c <mp_copy>
 800a704:	4602      	mov	r2, r0
 800a706:	e6c6      	b.n	800a496 <ecc_mulmod+0xc8>
 800a708:	2301      	movs	r3, #1
 800a70a:	469a      	mov	sl, r3
 800a70c:	469b      	mov	fp, r3
 800a70e:	e73c      	b.n	800a58a <ecc_mulmod+0x1bc>
        err = MEMORY_E;
 800a710:	f06f 027c 	mvn.w	r2, #124	; 0x7c
}
 800a714:	4610      	mov	r0, r2
 800a716:	b00d      	add	sp, #52	; 0x34
 800a718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a71c <wc_ecc_mulmod_ex>:
{
 800a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   tG = NULL;
 800a720:	2400      	movs	r4, #0
{
 800a722:	b08b      	sub	sp, #44	; 0x2c
 800a724:	4605      	mov	r5, r0
 800a726:	468a      	mov	sl, r1
 800a728:	4617      	mov	r7, r2
   XMEMSET(M, 0, sizeof(M));
 800a72a:	4621      	mov	r1, r4
 800a72c:	220c      	movs	r2, #12
 800a72e:	a807      	add	r0, sp, #28
{
 800a730:	9e14      	ldr	r6, [sp, #80]	; 0x50
   tG = NULL;
 800a732:	9405      	str	r4, [sp, #20]
{
 800a734:	4699      	mov	r9, r3
   XMEMSET(M, 0, sizeof(M));
 800a736:	f010 fc7b 	bl	801b030 <memset>
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	d057      	beq.n	800a7ee <wc_ecc_mulmod_ex+0xd2>
 800a73e:	f1ba 0f00 	cmp.w	sl, #0
 800a742:	d054      	beq.n	800a7ee <wc_ecc_mulmod_ex+0xd2>
 800a744:	2f00      	cmp	r7, #0
 800a746:	d052      	beq.n	800a7ee <wc_ecc_mulmod_ex+0xd2>
 800a748:	2e00      	cmp	r6, #0
 800a74a:	d050      	beq.n	800a7ee <wc_ecc_mulmod_ex+0xd2>
   if (mp_count_bits(k) > mp_count_bits(modulus) + 1) {
 800a74c:	4628      	mov	r0, r5
 800a74e:	f00f fdff 	bl	801a350 <mp_count_bits>
 800a752:	4683      	mov	fp, r0
 800a754:	4630      	mov	r0, r6
 800a756:	f00f fdfb 	bl	801a350 <mp_count_bits>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	459b      	cmp	fp, r3
 800a75e:	dc49      	bgt.n	800a7f4 <wc_ecc_mulmod_ex+0xd8>
 800a760:	f10d 081c 	add.w	r8, sp, #28
  for (i = 0; i < M_POINTS; i++) {
 800a764:	46a3      	mov	fp, r4
      err = wc_ecc_new_point_ex(&M[i], heap);
 800a766:	4640      	mov	r0, r8
 800a768:	f7fe fd8a 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
      if (err != MP_OKAY) {
 800a76c:	4604      	mov	r4, r0
 800a76e:	bb70      	cbnz	r0, 800a7ce <wc_ecc_mulmod_ex+0xb2>
  for (i = 0; i < M_POINTS; i++) {
 800a770:	f10b 0b01 	add.w	fp, fp, #1
 800a774:	f1bb 0f03 	cmp.w	fp, #3
 800a778:	f108 0804 	add.w	r8, r8, #4
 800a77c:	d1f3      	bne.n	800a766 <wc_ecc_mulmod_ex+0x4a>
   err = wc_ecc_new_point_ex(&tG, heap);
 800a77e:	a805      	add	r0, sp, #20
 800a780:	f7fe fd7e 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
   if (err != MP_OKAY) {
 800a784:	4604      	mov	r4, r0
 800a786:	bb10      	cbnz	r0, 800a7ce <wc_ecc_mulmod_ex+0xb2>
   if ((err = ecc_point_to_mont(G, tG, modulus, heap)) != MP_OKAY) {
 800a788:	9905      	ldr	r1, [sp, #20]
 800a78a:	4632      	mov	r2, r6
 800a78c:	4650      	mov	r0, sl
 800a78e:	f7fe fdb1 	bl	80092f4 <ecc_point_to_mont.constprop.0>
 800a792:	4604      	mov	r4, r0
 800a794:	b9d8      	cbnz	r0, 800a7ce <wc_ecc_mulmod_ex+0xb2>
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
 800a796:	a906      	add	r1, sp, #24
 800a798:	4630      	mov	r0, r6
 800a79a:	f00f fe99 	bl	801a4d0 <mp_montgomery_setup>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	b9a8      	cbnz	r0, 800a7ce <wc_ecc_mulmod_ex+0xb2>
   err = ecc_mulmod(k, tG, R, M, a, modulus, mp, NULL);
 800a7a2:	9b06      	ldr	r3, [sp, #24]
 800a7a4:	9003      	str	r0, [sp, #12]
 800a7a6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800a7aa:	9905      	ldr	r1, [sp, #20]
 800a7ac:	f8cd 9000 	str.w	r9, [sp]
 800a7b0:	ab07      	add	r3, sp, #28
 800a7b2:	463a      	mov	r2, r7
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f7ff fe0a 	bl	800a3ce <ecc_mulmod>
   if (err == MP_OKAY && map)
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	b938      	cbnz	r0, 800a7ce <wc_ecc_mulmod_ex+0xb2>
 800a7be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7c0:	b12b      	cbz	r3, 800a7ce <wc_ecc_mulmod_ex+0xb2>
       err = ecc_map(R, modulus, mp);
 800a7c2:	9a06      	ldr	r2, [sp, #24]
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f7ff fbb8 	bl	8009f3c <ecc_map>
 800a7cc:	4604      	mov	r4, r0
   wc_ecc_del_point_ex(tG, heap);
 800a7ce:	9805      	ldr	r0, [sp, #20]
 800a7d0:	f7fe fd7d 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
       wc_ecc_del_point_ex(M[i], heap);
 800a7d4:	9807      	ldr	r0, [sp, #28]
 800a7d6:	f7fe fd7a 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
 800a7da:	9808      	ldr	r0, [sp, #32]
 800a7dc:	f7fe fd77 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
 800a7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7e2:	f7fe fd74 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
}
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	b00b      	add	sp, #44	; 0x2c
 800a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err = ECC_BAD_ARG_E;
 800a7ee:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800a7f2:	e7ec      	b.n	800a7ce <wc_ecc_mulmod_ex+0xb2>
       err = ECC_OUT_OF_RANGE_E;
 800a7f4:	f06f 04d8 	mvn.w	r4, #216	; 0xd8
 800a7f8:	e7e9      	b.n	800a7ce <wc_ecc_mulmod_ex+0xb2>

0800a7fa <wc_ecc_mulmod>:
{
 800a7fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ecc_mulmod_ex(k, G, R, a, modulus, map, NULL);
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	9402      	str	r4, [sp, #8]
 800a800:	9c07      	ldr	r4, [sp, #28]
 800a802:	9401      	str	r4, [sp, #4]
 800a804:	9c06      	ldr	r4, [sp, #24]
 800a806:	9400      	str	r4, [sp, #0]
 800a808:	f7ff ff88 	bl	800a71c <wc_ecc_mulmod_ex>
}
 800a80c:	b004      	add	sp, #16
 800a80e:	bd10      	pop	{r4, pc}

0800a810 <wc_ecc_mulmod_ex2>:
{
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	b08d      	sub	sp, #52	; 0x34
 800a816:	e9dd 7b16 	ldrd	r7, fp, [sp, #88]	; 0x58
 800a81a:	460d      	mov	r5, r1
 800a81c:	4616      	mov	r6, r2
 800a81e:	9305      	str	r3, [sp, #20]
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
 800a820:	4680      	mov	r8, r0
 800a822:	2800      	cmp	r0, #0
 800a824:	f000 80af 	beq.w	800a986 <wc_ecc_mulmod_ex2+0x176>
 800a828:	2900      	cmp	r1, #0
 800a82a:	f000 80ac 	beq.w	800a986 <wc_ecc_mulmod_ex2+0x176>
 800a82e:	2a00      	cmp	r2, #0
 800a830:	f000 80a9 	beq.w	800a986 <wc_ecc_mulmod_ex2+0x176>
 800a834:	2f00      	cmp	r7, #0
 800a836:	f000 80a6 	beq.w	800a986 <wc_ecc_mulmod_ex2+0x176>
   if (mp_count_bits(k) > mp_count_bits(order)) {
 800a83a:	f00f fd89 	bl	801a350 <mp_count_bits>
 800a83e:	4604      	mov	r4, r0
 800a840:	4658      	mov	r0, fp
 800a842:	f00f fd85 	bl	801a350 <mp_count_bits>
 800a846:	4284      	cmp	r4, r0
 800a848:	f300 80a0 	bgt.w	800a98c <wc_ecc_mulmod_ex2+0x17c>
   tG = NULL;
 800a84c:	2400      	movs	r4, #0
   XMEMSET(M, 0, sizeof(M));
 800a84e:	220c      	movs	r2, #12
 800a850:	4621      	mov	r1, r4
 800a852:	a809      	add	r0, sp, #36	; 0x24
   tG = NULL;
 800a854:	9407      	str	r4, [sp, #28]
   XMEMSET(M, 0, sizeof(M));
 800a856:	f010 fbeb 	bl	801b030 <memset>
   for (i = 0; i < M_POINTS; i++) {
 800a85a:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800a85e:	46a1      	mov	r9, r4
      err = wc_ecc_new_point_ex(&M[i], heap);
 800a860:	4650      	mov	r0, sl
 800a862:	f7fe fd0d 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
      if (err != MP_OKAY) {
 800a866:	4604      	mov	r4, r0
 800a868:	2800      	cmp	r0, #0
 800a86a:	d179      	bne.n	800a960 <wc_ecc_mulmod_ex2+0x150>
   for (i = 0; i < M_POINTS; i++) {
 800a86c:	f109 0901 	add.w	r9, r9, #1
 800a870:	f1b9 0f03 	cmp.w	r9, #3
 800a874:	f10a 0a04 	add.w	sl, sl, #4
 800a878:	d1f2      	bne.n	800a860 <wc_ecc_mulmod_ex2+0x50>
   err = wc_ecc_new_point_ex(&tG, heap);
 800a87a:	a807      	add	r0, sp, #28
 800a87c:	f7fe fd00 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
   if (err != MP_OKAY) {
 800a880:	4604      	mov	r4, r0
 800a882:	2800      	cmp	r0, #0
 800a884:	d16c      	bne.n	800a960 <wc_ecc_mulmod_ex2+0x150>
   if ((err = ecc_point_to_mont(G, tG, modulus, heap)) != MP_OKAY) {
 800a886:	9907      	ldr	r1, [sp, #28]
 800a888:	463a      	mov	r2, r7
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7fe fd32 	bl	80092f4 <ecc_point_to_mont.constprop.0>
 800a890:	4604      	mov	r4, r0
 800a892:	2800      	cmp	r0, #0
 800a894:	d164      	bne.n	800a960 <wc_ecc_mulmod_ex2+0x150>
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
 800a896:	a908      	add	r1, sp, #32
 800a898:	4638      	mov	r0, r7
 800a89a:	f00f fe19 	bl	801a4d0 <mp_montgomery_setup>
 800a89e:	4604      	mov	r4, r0
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d15d      	bne.n	800a960 <wc_ecc_mulmod_ex2+0x150>
   err = ecc_mulmod(k, tG, R, M, a, modulus, mp, rng);
 800a8a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a8a6:	9303      	str	r3, [sp, #12]
 800a8a8:	9b08      	ldr	r3, [sp, #32]
 800a8aa:	9907      	ldr	r1, [sp, #28]
 800a8ac:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800a8b0:	9b05      	ldr	r3, [sp, #20]
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	ab09      	add	r3, sp, #36	; 0x24
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	f7ff fd88 	bl	800a3ce <ecc_mulmod>
   if (err == MP_OKAY) {
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d14d      	bne.n	800a960 <wc_ecc_mulmod_ex2+0x150>
    NEW_MP_INT_SIZE(t, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800a8c4:	2068      	movs	r0, #104	; 0x68
       err = ecc_check_order_minus_1(k, tG, R, modulus, order);
 800a8c6:	f8dd a01c 	ldr.w	sl, [sp, #28]
    NEW_MP_INT_SIZE(t, mp_bitsused(modulus), NULL, DYNAMIC_TYPE_ECC);
 800a8ca:	f010 fb69 	bl	801afa0 <malloc>
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d055      	beq.n	800a980 <wc_ecc_mulmod_ex2+0x170>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	2268      	movs	r2, #104	; 0x68
 800a8d8:	f010 fbaa 	bl	801b030 <memset>
        err = INIT_MP_INT_SIZE(t, mp_bitsused(modulus));
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f00e fcb9 	bl	8019254 <mp_init>
    if (err == MP_OKAY) {
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	bb80      	cbnz	r0, 800a948 <wc_ecc_mulmod_ex2+0x138>
        err = mp_sub_d(order, 1, t);
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	4658      	mov	r0, fp
 800a8ec:	f00e fcff 	bl	80192ee <mp_sub_d>
        if (err == MP_OKAY) {
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	bb30      	cbnz	r0, 800a942 <wc_ecc_mulmod_ex2+0x132>
            int kIsMinusOne = (mp_cmp((mp_int*)k, t) == MP_EQ);
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f00e fcf1 	bl	80192de <mp_cmp>
 800a8fc:	fab0 f880 	clz	r8, r0
 800a900:	ea4f 1858 	mov.w	r8, r8, lsr #5
            err = mp_cond_copy(tG->x, kIsMinusOne, R->x);
 800a904:	4632      	mov	r2, r6
 800a906:	4641      	mov	r1, r8
 800a908:	4650      	mov	r0, sl
 800a90a:	f00f ff75 	bl	801a7f8 <mp_cond_copy>
            if (err == MP_OKAY) {
 800a90e:	4604      	mov	r4, r0
 800a910:	b9b8      	cbnz	r0, 800a942 <wc_ecc_mulmod_ex2+0x132>
                err = mp_sub(modulus, tG->y, t);
 800a912:	462a      	mov	r2, r5
 800a914:	f10a 0168 	add.w	r1, sl, #104	; 0x68
 800a918:	4638      	mov	r0, r7
 800a91a:	f00e fcda 	bl	80192d2 <mp_sub>
            if (err == MP_OKAY) {
 800a91e:	4604      	mov	r4, r0
 800a920:	b978      	cbnz	r0, 800a942 <wc_ecc_mulmod_ex2+0x132>
                err = mp_cond_copy(t, kIsMinusOne, R->y);
 800a922:	f106 0268 	add.w	r2, r6, #104	; 0x68
 800a926:	4641      	mov	r1, r8
 800a928:	4628      	mov	r0, r5
 800a92a:	f00f ff65 	bl	801a7f8 <mp_cond_copy>
            if (err == MP_OKAY) {
 800a92e:	4604      	mov	r4, r0
 800a930:	b938      	cbnz	r0, 800a942 <wc_ecc_mulmod_ex2+0x132>
                err = mp_cond_copy(tG->z, kIsMinusOne, R->z);
 800a932:	f106 02d0 	add.w	r2, r6, #208	; 0xd0
 800a936:	4641      	mov	r1, r8
 800a938:	f10a 00d0 	add.w	r0, sl, #208	; 0xd0
 800a93c:	f00f ff5c 	bl	801a7f8 <mp_cond_copy>
 800a940:	4604      	mov	r4, r0
        mp_free(t);
 800a942:	4628      	mov	r0, r5
 800a944:	f00e fc9f 	bl	8019286 <mp_free>
    FREE_MP_INT_SIZE(t, NULL, DYNAMIC_TYPE_ECC);
 800a948:	4628      	mov	r0, r5
 800a94a:	f010 fb31 	bl	801afb0 <free>
   if (err == MP_OKAY && map)
 800a94e:	b93c      	cbnz	r4, 800a960 <wc_ecc_mulmod_ex2+0x150>
 800a950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a952:	b12b      	cbz	r3, 800a960 <wc_ecc_mulmod_ex2+0x150>
      err = ecc_map(R, modulus, mp);
 800a954:	9a08      	ldr	r2, [sp, #32]
 800a956:	4639      	mov	r1, r7
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff faef 	bl	8009f3c <ecc_map>
 800a95e:	4604      	mov	r4, r0
   wc_ecc_del_point_ex(tG, heap);
 800a960:	9807      	ldr	r0, [sp, #28]
 800a962:	f7fe fcb4 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
      wc_ecc_del_point_ex(M[i], heap);
 800a966:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a968:	f7fe fcb1 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
 800a96c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a96e:	f7fe fcae 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
 800a972:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a974:	f7fe fcab 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
}
 800a978:	4620      	mov	r0, r4
 800a97a:	b00d      	add	sp, #52	; 0x34
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = MEMORY_E;
 800a980:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800a984:	e7ec      	b.n	800a960 <wc_ecc_mulmod_ex2+0x150>
      return ECC_BAD_ARG_E;
 800a986:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800a98a:	e7f5      	b.n	800a978 <wc_ecc_mulmod_ex2+0x168>
      return ECC_OUT_OF_RANGE_E;
 800a98c:	f06f 04d8 	mvn.w	r4, #216	; 0xd8
 800a990:	e7f2      	b.n	800a978 <wc_ecc_mulmod_ex2+0x168>

0800a992 <wc_ecc_shared_secret_gen_sync>:
{
 800a992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ecc_point* result = NULL;
 800a996:	f04f 0900 	mov.w	r9, #0
{
 800a99a:	b094      	sub	sp, #80	; 0x50
 800a99c:	4605      	mov	r5, r0
 800a99e:	468a      	mov	sl, r1
        DECLARE_CURVE_SPECS(3);
 800a9a0:	a80a      	add	r0, sp, #40	; 0x28
 800a9a2:	4649      	mov	r1, r9
{
 800a9a4:	4617      	mov	r7, r2
        DECLARE_CURVE_SPECS(3);
 800a9a6:	2228      	movs	r2, #40	; 0x28
{
 800a9a8:	4698      	mov	r8, r3
        mp_digit mp = 0;
 800a9aa:	e9cd 9907 	strd	r9, r9, [sp, #28]
        DECLARE_CURVE_SPECS(3);
 800a9ae:	9009      	str	r0, [sp, #36]	; 0x24
 800a9b0:	f010 fb3e 	bl	801b030 <memset>
 800a9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b6:	2203      	movs	r2, #3
 800a9b8:	61da      	str	r2, [r3, #28]
        ALLOC_CURVE_SPECS(3, err);
 800a9ba:	f44f 709c 	mov.w	r0, #312	; 0x138
 800a9be:	f010 faef 	bl	801afa0 <malloc>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d067      	beq.n	800aa98 <wc_ecc_shared_secret_gen_sync+0x106>
 800a9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
            err = wc_ecc_curve_load(private_key->dp, &curve,
 800a9ca:	220b      	movs	r2, #11
        ALLOC_CURVE_SPECS(3, err);
 800a9cc:	6198      	str	r0, [r3, #24]
            err = wc_ecc_curve_load(private_key->dp, &curve,
 800a9ce:	a909      	add	r1, sp, #36	; 0x24
 800a9d0:	6928      	ldr	r0, [r5, #16]
 800a9d2:	f7ff f8c1 	bl	8009b58 <wc_ecc_curve_load>
        if (err != MP_OKAY) {
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	b938      	cbnz	r0, 800a9ea <wc_ecc_shared_secret_gen_sync+0x58>
        err = wc_ecc_new_point_ex(&result, private_key->heap);
 800a9da:	a807      	add	r0, sp, #28
 800a9dc:	f7fe fc50 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
        if (err != MP_OKAY) {
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	b130      	cbz	r0, 800a9f2 <wc_ecc_shared_secret_gen_sync+0x60>
            wc_ecc_curve_free(curve);
 800a9e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9e6:	f7ff f86f 	bl	8009ac8 <wc_ecc_curve_free>
            FREE_CURVE_SPECS();
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f010 fae0 	bl	801afb0 <free>
 800a9f0:	e04b      	b.n	800aa8a <wc_ecc_shared_secret_gen_sync+0xf8>
        if (private_key->rng == NULL) {
 800a9f2:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d032      	beq.n	800aa60 <wc_ecc_shared_secret_gen_sync+0xce>
            err = wc_ecc_mulmod_ex2(k, point, result, curve->Af, curve->prime,
 800a9fa:	6969      	ldr	r1, [r5, #20]
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	9202      	str	r2, [sp, #8]
 800aa00:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	9201      	str	r2, [sp, #4]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	9200      	str	r2, [sp, #0]
 800aa0c:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	9a07      	ldr	r2, [sp, #28]
 800aa14:	4651      	mov	r1, sl
 800aa16:	f7ff fefb 	bl	800a810 <wc_ecc_mulmod_ex2>
        if (err == MP_OKAY) {
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	bb10      	cbnz	r0, 800aa64 <wc_ecc_shared_secret_gen_sync+0xd2>
            err = mp_montgomery_setup(curve->prime, &mp);
 800aa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa20:	a908      	add	r1, sp, #32
 800aa22:	6858      	ldr	r0, [r3, #4]
 800aa24:	f00f fd54 	bl	801a4d0 <mp_montgomery_setup>
        if (err == MP_OKAY) {
 800aa28:	4604      	mov	r4, r0
 800aa2a:	bb90      	cbnz	r0, 800aa92 <wc_ecc_shared_secret_gen_sync+0x100>
            err = ecc_map_ex(result, curve->prime, mp, 1);
 800aa2c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800aa30:	9807      	ldr	r0, [sp, #28]
 800aa32:	6849      	ldr	r1, [r1, #4]
 800aa34:	2301      	movs	r3, #1
 800aa36:	f7ff f9bb 	bl	8009db0 <ecc_map_ex>
        if (err == MP_OKAY) {
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	b990      	cbnz	r0, 800aa64 <wc_ecc_shared_secret_gen_sync+0xd2>
            x = mp_unsigned_bin_size(curve->prime);
 800aa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa40:	6858      	ldr	r0, [r3, #4]
 800aa42:	f00e fc50 	bl	80192e6 <mp_unsigned_bin_size>
            if (*outlen < (word32)x || x < mp_unsigned_bin_size(result->x)) {
 800aa46:	f8d8 3000 	ldr.w	r3, [r8]
 800aa4a:	4283      	cmp	r3, r0
            x = mp_unsigned_bin_size(curve->prime);
 800aa4c:	4604      	mov	r4, r0
            if (*outlen < (word32)x || x < mp_unsigned_bin_size(result->x)) {
 800aa4e:	d304      	bcc.n	800aa5a <wc_ecc_shared_secret_gen_sync+0xc8>
 800aa50:	9807      	ldr	r0, [sp, #28]
 800aa52:	f00e fc48 	bl	80192e6 <mp_unsigned_bin_size>
 800aa56:	42a0      	cmp	r0, r4
 800aa58:	dd21      	ble.n	800aa9e <wc_ecc_shared_secret_gen_sync+0x10c>
                err = BUFFER_E;
 800aa5a:	f06f 0583 	mvn.w	r5, #131	; 0x83
 800aa5e:	e001      	b.n	800aa64 <wc_ecc_shared_secret_gen_sync+0xd2>
            err = MISSING_RNG_E;
 800aa60:	f06f 05eb 	mvn.w	r5, #235	; 0xeb
        mp_forcezero(result->x);
 800aa64:	9807      	ldr	r0, [sp, #28]
        *outlen = (word32)x;
 800aa66:	f8c8 4000 	str.w	r4, [r8]
        mp_forcezero(result->x);
 800aa6a:	f00e fc06 	bl	801927a <mp_forcezero>
        mp_forcezero(result->y);
 800aa6e:	9807      	ldr	r0, [sp, #28]
 800aa70:	3068      	adds	r0, #104	; 0x68
 800aa72:	f00e fc02 	bl	801927a <mp_forcezero>
        wc_ecc_del_point_ex(result, private_key->heap);
 800aa76:	9807      	ldr	r0, [sp, #28]
 800aa78:	f7fe fc29 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
        wc_ecc_curve_free(curve);
 800aa7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa7e:	f7ff f823 	bl	8009ac8 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 800aa82:	4630      	mov	r0, r6
 800aa84:	f010 fa94 	bl	801afb0 <free>
 800aa88:	462c      	mov	r4, r5
}
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	b014      	add	sp, #80	; 0x50
 800aa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa92:	4605      	mov	r5, r0
        int x = 0;
 800aa94:	464c      	mov	r4, r9
 800aa96:	e7e5      	b.n	800aa64 <wc_ecc_shared_secret_gen_sync+0xd2>
        ALLOC_CURVE_SPECS(3, err);
 800aa98:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    return err;
 800aa9c:	e7f5      	b.n	800aa8a <wc_ecc_shared_secret_gen_sync+0xf8>
            XMEMSET(out, 0, (size_t)x);
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	f010 fac4 	bl	801b030 <memset>
            err = mp_to_unsigned_bin(result->x, out +
 800aaa8:	9d07      	ldr	r5, [sp, #28]
                                     (x - mp_unsigned_bin_size(result->x)));
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f00e fc1b 	bl	80192e6 <mp_unsigned_bin_size>
 800aab0:	1a21      	subs	r1, r4, r0
            err = mp_to_unsigned_bin(result->x, out +
 800aab2:	4439      	add	r1, r7
 800aab4:	4628      	mov	r0, r5
 800aab6:	f00f fc3f 	bl	801a338 <mp_to_unsigned_bin>
 800aaba:	4605      	mov	r5, r0
 800aabc:	e7d2      	b.n	800aa64 <wc_ecc_shared_secret_gen_sync+0xd2>

0800aabe <wc_ecc_shared_secret_ex>:
{
 800aabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (private_key == NULL || point == NULL || out == NULL ||
 800aac0:	4604      	mov	r4, r0
 800aac2:	b348      	cbz	r0, 800ab18 <wc_ecc_shared_secret_ex+0x5a>
 800aac4:	b341      	cbz	r1, 800ab18 <wc_ecc_shared_secret_ex+0x5a>
 800aac6:	b33a      	cbz	r2, 800ab18 <wc_ecc_shared_secret_ex+0x5a>
 800aac8:	b333      	cbz	r3, 800ab18 <wc_ecc_shared_secret_ex+0x5a>
    if (private_key->type != ECC_PRIVATEKEY &&
 800aaca:	6800      	ldr	r0, [r0, #0]
 800aacc:	3802      	subs	r0, #2
 800aace:	2801      	cmp	r0, #1
 800aad0:	d825      	bhi.n	800ab1e <wc_ecc_shared_secret_ex+0x60>
    if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL) {
 800aad2:	6860      	ldr	r0, [r4, #4]
 800aad4:	f7ff fa81 	bl	8009fda <wc_ecc_is_valid_idx>
 800aad8:	b308      	cbz	r0, 800ab1e <wc_ecc_shared_secret_ex+0x60>
 800aada:	6920      	ldr	r0, [r4, #16]
 800aadc:	b1f8      	cbz	r0, 800ab1e <wc_ecc_shared_secret_ex+0x60>
    switch (private_key->state) {
 800aade:	68a0      	ldr	r0, [r4, #8]
 800aae0:	2801      	cmp	r0, #1
 800aae2:	dc06      	bgt.n	800aaf2 <wc_ecc_shared_secret_ex+0x34>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	da0a      	bge.n	800aafe <wc_ecc_shared_secret_ex+0x40>
            err = BAD_STATE_E;
 800aae8:	f06f 00bf 	mvn.w	r0, #191	; 0xbf
    private_key->state = ECC_STATE_NONE;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60a3      	str	r3, [r4, #8]
    return err;
 800aaf0:	e00f      	b.n	800ab12 <wc_ecc_shared_secret_ex+0x54>
    switch (private_key->state) {
 800aaf2:	2802      	cmp	r0, #2
 800aaf4:	bf14      	ite	ne
 800aaf6:	f06f 00bf 	mvnne.w	r0, #191	; 0xbf
 800aafa:	2000      	moveq	r0, #0
 800aafc:	e7f6      	b.n	800aaec <wc_ecc_shared_secret_ex+0x2e>
            private_key->state = ECC_STATE_SHARED_SEC_GEN;
 800aafe:	2001      	movs	r0, #1
 800ab00:	60a0      	str	r0, [r4, #8]
                err = wc_ecc_shared_secret_gen_sync(private_key, point,
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7ff ff45 	bl	800a992 <wc_ecc_shared_secret_gen_sync>
            if (err < 0) {
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	da03      	bge.n	800ab14 <wc_ecc_shared_secret_ex+0x56>
    if (err == WC_PENDING_E) {
 800ab0c:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 800ab10:	d1ec      	bne.n	800aaec <wc_ecc_shared_secret_ex+0x2e>
}
 800ab12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            err = 0;
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7e9      	b.n	800aaec <wc_ecc_shared_secret_ex+0x2e>
        return BAD_FUNC_ARG;
 800ab18:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800ab1c:	e7f9      	b.n	800ab12 <wc_ecc_shared_secret_ex+0x54>
        return ECC_BAD_ARG_E;
 800ab1e:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800ab22:	e7f6      	b.n	800ab12 <wc_ecc_shared_secret_ex+0x54>

0800ab24 <wc_ecc_shared_secret>:
{
 800ab24:	b570      	push	{r4, r5, r6, lr}
   if (private_key == NULL || public_key == NULL || out == NULL ||
 800ab26:	4604      	mov	r4, r0
 800ab28:	b1e0      	cbz	r0, 800ab64 <wc_ecc_shared_secret+0x40>
 800ab2a:	b1d9      	cbz	r1, 800ab64 <wc_ecc_shared_secret+0x40>
 800ab2c:	b1d2      	cbz	r2, 800ab64 <wc_ecc_shared_secret+0x40>
 800ab2e:	b1cb      	cbz	r3, 800ab64 <wc_ecc_shared_secret+0x40>
   if (private_key->type != ECC_PRIVATEKEY &&
 800ab30:	6800      	ldr	r0, [r0, #0]
 800ab32:	3802      	subs	r0, #2
 800ab34:	2801      	cmp	r0, #1
 800ab36:	d818      	bhi.n	800ab6a <wc_ecc_shared_secret+0x46>
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL ||
 800ab38:	6860      	ldr	r0, [r4, #4]
 800ab3a:	f7ff fa4e 	bl	8009fda <wc_ecc_is_valid_idx>
 800ab3e:	b1a0      	cbz	r0, 800ab6a <wc_ecc_shared_secret+0x46>
 800ab40:	6925      	ldr	r5, [r4, #16]
 800ab42:	b195      	cbz	r5, 800ab6a <wc_ecc_shared_secret+0x46>
       wc_ecc_is_valid_idx(public_key->idx)  == 0 || public_key->dp == NULL) {
 800ab44:	6848      	ldr	r0, [r1, #4]
 800ab46:	f7ff fa48 	bl	8009fda <wc_ecc_is_valid_idx>
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 || private_key->dp == NULL ||
 800ab4a:	b170      	cbz	r0, 800ab6a <wc_ecc_shared_secret+0x46>
       wc_ecc_is_valid_idx(public_key->idx)  == 0 || public_key->dp == NULL) {
 800ab4c:	6908      	ldr	r0, [r1, #16]
 800ab4e:	b160      	cbz	r0, 800ab6a <wc_ecc_shared_secret+0x46>
   if (private_key->dp->id != public_key->dp->id) {
 800ab50:	686d      	ldr	r5, [r5, #4]
 800ab52:	6840      	ldr	r0, [r0, #4]
 800ab54:	4285      	cmp	r5, r0
 800ab56:	d108      	bne.n	800ab6a <wc_ecc_shared_secret+0x46>
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
 800ab58:	4620      	mov	r0, r4
 800ab5a:	3118      	adds	r1, #24
}
 800ab5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
 800ab60:	f7ff bfad 	b.w	800aabe <wc_ecc_shared_secret_ex>
       return BAD_FUNC_ARG;
 800ab64:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800ab68:	bd70      	pop	{r4, r5, r6, pc}
      return ECC_BAD_ARG_E;
 800ab6a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800ab6e:	e7fb      	b.n	800ab68 <wc_ecc_shared_secret+0x44>

0800ab70 <ecc_make_pub_ex>:
{
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	460c      	mov	r4, r1
 800ab76:	b08b      	sub	sp, #44	; 0x2c
 800ab78:	4617      	mov	r7, r2
 800ab7a:	4699      	mov	r9, r3
    if (key == NULL) {
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f000 8085 	beq.w	800ac8e <ecc_make_pub_ex+0x11e>
    if (pubOut != NULL) {
 800ab84:	b9da      	cbnz	r2, 800abbe <ecc_make_pub_ex+0x4e>
        pub = &key->pubkey;
 800ab86:	4606      	mov	r6, r0
        key->type = ECC_PRIVATEKEY_ONLY;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	f846 3b18 	str.w	r3, [r6], #24
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800ab8e:	f505 78a8 	add.w	r8, r5, #336	; 0x150
 800ab92:	4640      	mov	r0, r8
 800ab94:	f00f fbd7 	bl	801a346 <mp_iszero>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 800ab98:	f106 0b68 	add.w	fp, r6, #104	; 0x68
 800ab9c:	f106 0ad0 	add.w	sl, r6, #208	; 0xd0
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800aba0:	b178      	cbz	r0, 800abc2 <ecc_make_pub_ex+0x52>
        err = ECC_PRIV_KEY_E;
 800aba2:	f06f 03d7 	mvn.w	r3, #215	; 0xd7
        mp_clear(pub->x);
 800aba6:	4630      	mov	r0, r6
 800aba8:	9307      	str	r3, [sp, #28]
 800abaa:	f00e fb68 	bl	801927e <mp_clear>
        mp_clear(pub->y);
 800abae:	4658      	mov	r0, fp
 800abb0:	f00e fb65 	bl	801927e <mp_clear>
        mp_clear(pub->z);
 800abb4:	4650      	mov	r0, sl
 800abb6:	f00e fb62 	bl	801927e <mp_clear>
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	e05a      	b.n	800ac74 <ecc_make_pub_ex+0x104>
 800abbe:	4616      	mov	r6, r2
 800abc0:	e7e5      	b.n	800ab8e <ecc_make_pub_ex+0x1e>
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800abc2:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1eb      	bne.n	800aba2 <ecc_make_pub_ex+0x32>
                                      (mp_cmp(key->k, curve->order) != MP_LT)))
 800abca:	68e1      	ldr	r1, [r4, #12]
 800abcc:	9307      	str	r3, [sp, #28]
 800abce:	4640      	mov	r0, r8
 800abd0:	f00e fb85 	bl	80192de <mp_cmp>
    if ((err == MP_OKAY) && (mp_iszero(key->k) || mp_isneg(key->k) ||
 800abd4:	3001      	adds	r0, #1
 800abd6:	9b07      	ldr	r3, [sp, #28]
 800abd8:	d1e3      	bne.n	800aba2 <ecc_make_pub_ex+0x32>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 800abda:	e9cd 3300 	strd	r3, r3, [sp]
 800abde:	4652      	mov	r2, sl
 800abe0:	4659      	mov	r1, fp
 800abe2:	4630      	mov	r0, r6
 800abe4:	f00e fb50 	bl	8019288 <mp_init_multi>
    if (err == MP_OKAY) {
 800abe8:	4603      	mov	r3, r0
 800abea:	2800      	cmp	r0, #0
 800abec:	d1db      	bne.n	800aba6 <ecc_make_pub_ex+0x36>
        ecc_point* base = NULL;
 800abee:	e9cd 0008 	strd	r0, r0, [sp, #32]
        err = wc_ecc_new_point_ex(&base, key->heap);
 800abf2:	a809      	add	r0, sp, #36	; 0x24
 800abf4:	f7fe fb44 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
        if (err == MP_OKAY)
 800abf8:	4603      	mov	r3, r0
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d133      	bne.n	800ac66 <ecc_make_pub_ex+0xf6>
            err = mp_copy(curve->Gx, base->x);
 800abfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac00:	6920      	ldr	r0, [r4, #16]
 800ac02:	f00f fb9b 	bl	801a33c <mp_copy>
        if (err == MP_OKAY)
 800ac06:	4603      	mov	r3, r0
 800ac08:	bb68      	cbnz	r0, 800ac66 <ecc_make_pub_ex+0xf6>
            err = mp_copy(curve->Gy, base->y);
 800ac0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac0c:	6960      	ldr	r0, [r4, #20]
 800ac0e:	3168      	adds	r1, #104	; 0x68
 800ac10:	f00f fb94 	bl	801a33c <mp_copy>
        if (err == MP_OKAY)
 800ac14:	4603      	mov	r3, r0
 800ac16:	bb30      	cbnz	r0, 800ac66 <ecc_make_pub_ex+0xf6>
            err = mp_montgomery_setup(curve->prime, &mp);
 800ac18:	6860      	ldr	r0, [r4, #4]
 800ac1a:	a908      	add	r1, sp, #32
 800ac1c:	f00f fc58 	bl	801a4d0 <mp_montgomery_setup>
        if (err == MP_OKAY)
 800ac20:	4603      	mov	r3, r0
 800ac22:	bb00      	cbnz	r0, 800ac66 <ecc_make_pub_ex+0xf6>
            err = mp_set(base->z, 1);
 800ac24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac26:	2101      	movs	r1, #1
 800ac28:	30d0      	adds	r0, #208	; 0xd0
 800ac2a:	f00f fc55 	bl	801a4d8 <mp_set>
        if (err == MP_OKAY) {
 800ac2e:	4603      	mov	r3, r0
 800ac30:	b9c8      	cbnz	r0, 800ac66 <ecc_make_pub_ex+0xf6>
            err = wc_ecc_mulmod_ex2(key->k, base, pub, curve->Af, curve->prime,
 800ac32:	696a      	ldr	r2, [r5, #20]
 800ac34:	68e3      	ldr	r3, [r4, #12]
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800ac40:	68a3      	ldr	r3, [r4, #8]
 800ac42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac44:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac48:	4632      	mov	r2, r6
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	f7ff fde0 	bl	800a810 <wc_ecc_mulmod_ex2>
            if (err == MP_MEM) {
 800ac50:	1c82      	adds	r2, r0, #2
            err = wc_ecc_mulmod_ex2(key->k, base, pub, curve->Af, curve->prime,
 800ac52:	4603      	mov	r3, r0
            if (err == MP_MEM) {
 800ac54:	d018      	beq.n	800ac88 <ecc_make_pub_ex+0x118>
        if (err == MP_OKAY) {
 800ac56:	b930      	cbnz	r0, 800ac66 <ecc_make_pub_ex+0xf6>
            err = ecc_map_ex(pub, curve->prime, mp, 1);
 800ac58:	2301      	movs	r3, #1
 800ac5a:	9a08      	ldr	r2, [sp, #32]
 800ac5c:	6861      	ldr	r1, [r4, #4]
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7ff f8a6 	bl	8009db0 <ecc_map_ex>
 800ac64:	4603      	mov	r3, r0
        wc_ecc_del_point_ex(base, key->heap);
 800ac66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac68:	9307      	str	r3, [sp, #28]
 800ac6a:	f7fe fb30 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
    if (err != MP_OKAY
 800ac6e:	9b07      	ldr	r3, [sp, #28]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d198      	bne.n	800aba6 <ecc_make_pub_ex+0x36>
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 800ac74:	682a      	ldr	r2, [r5, #0]
 800ac76:	2a03      	cmp	r2, #3
 800ac78:	d102      	bne.n	800ac80 <ecc_make_pub_ex+0x110>
 800ac7a:	b90f      	cbnz	r7, 800ac80 <ecc_make_pub_ex+0x110>
        key->type = ECC_PRIVATEKEY;
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	602a      	str	r2, [r5, #0]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	b00b      	add	sp, #44	; 0x2c
 800ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
               err = MEMORY_E;
 800ac88:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800ac8c:	e7eb      	b.n	800ac66 <ecc_make_pub_ex+0xf6>
        return BAD_FUNC_ARG;
 800ac8e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ac92:	e7f5      	b.n	800ac80 <ecc_make_pub_ex+0x110>

0800ac94 <wc_ecc_make_pub_ex>:
{
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	b08c      	sub	sp, #48	; 0x30
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800ac9e:	a802      	add	r0, sp, #8
{
 800aca0:	4690      	mov	r8, r2
    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800aca2:	2100      	movs	r1, #0
 800aca4:	2228      	movs	r2, #40	; 0x28
 800aca6:	9001      	str	r0, [sp, #4]
 800aca8:	f010 f9c2 	bl	801b030 <memset>
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	2205      	movs	r2, #5
 800acb0:	61da      	str	r2, [r3, #28]
    if (key == NULL) {
 800acb2:	b31e      	cbz	r6, 800acfc <wc_ecc_make_pub_ex+0x68>
    ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800acb4:	f44f 7002 	mov.w	r0, #520	; 0x208
 800acb8:	f010 f972 	bl	801afa0 <malloc>
 800acbc:	4605      	mov	r5, r0
 800acbe:	b1d0      	cbz	r0, 800acf6 <wc_ecc_make_pub_ex+0x62>
 800acc0:	9b01      	ldr	r3, [sp, #4]
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800acc2:	223b      	movs	r2, #59	; 0x3b
    ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800acc4:	6198      	str	r0, [r3, #24]
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800acc6:	a901      	add	r1, sp, #4
 800acc8:	6930      	ldr	r0, [r6, #16]
 800acca:	f7fe ff45 	bl	8009b58 <wc_ecc_curve_load>
    if (err == MP_OKAY) {
 800acce:	4604      	mov	r4, r0
 800acd0:	b930      	cbnz	r0, 800ace0 <wc_ecc_make_pub_ex+0x4c>
        err = ecc_make_pub_ex(key, curve, pubOut, rng);
 800acd2:	9901      	ldr	r1, [sp, #4]
 800acd4:	4643      	mov	r3, r8
 800acd6:	463a      	mov	r2, r7
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ff49 	bl	800ab70 <ecc_make_pub_ex>
 800acde:	4604      	mov	r4, r0
    wc_ecc_curve_free(curve);
 800ace0:	9801      	ldr	r0, [sp, #4]
 800ace2:	f7fe fef1 	bl	8009ac8 <wc_ecc_curve_free>
    FREE_CURVE_SPECS();
 800ace6:	b115      	cbz	r5, 800acee <wc_ecc_make_pub_ex+0x5a>
 800ace8:	4628      	mov	r0, r5
 800acea:	f010 f961 	bl	801afb0 <free>
}
 800acee:	4620      	mov	r0, r4
 800acf0:	b00c      	add	sp, #48	; 0x30
 800acf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800acf6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800acfa:	e7f1      	b.n	800ace0 <wc_ecc_make_pub_ex+0x4c>
        return BAD_FUNC_ARG;
 800acfc:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800ad00:	e7f5      	b.n	800acee <wc_ecc_make_pub_ex+0x5a>

0800ad02 <wc_ecc_make_pub>:
    return wc_ecc_make_pub_ex(key, pubOut, NULL);
 800ad02:	2200      	movs	r2, #0
 800ad04:	f7ff bfc6 	b.w	800ac94 <wc_ecc_make_pub_ex>

0800ad08 <_ecc_make_key_ex>:
{
 800ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	b08c      	sub	sp, #48	; 0x30
    if (key == NULL || rng == NULL) {
 800ad10:	4615      	mov	r5, r2
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	d055      	beq.n	800adc2 <_ecc_make_key_ex+0xba>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d053      	beq.n	800adc2 <_ecc_make_key_ex+0xba>
    key->state = ECC_STATE_NONE;
 800ad1a:	f04f 0800 	mov.w	r8, #0
 800ad1e:	f8c2 8008 	str.w	r8, [r2, #8]
    err = wc_ecc_set_curve(key, keysize, curve_id);
 800ad22:	4628      	mov	r0, r5
 800ad24:	461a      	mov	r2, r3
 800ad26:	f7fe ff67 	bl	8009bf8 <wc_ecc_set_curve>
    if (err != 0) {
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d13e      	bne.n	800adae <_ecc_make_key_ex+0xa6>
    key->flags = (byte)flags;
 800ad30:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ad34:	60eb      	str	r3, [r5, #12]
        DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800ad36:	4621      	mov	r1, r4
 800ad38:	a802      	add	r0, sp, #8
 800ad3a:	2228      	movs	r2, #40	; 0x28
 800ad3c:	9001      	str	r0, [sp, #4]
 800ad3e:	f010 f977 	bl	801b030 <memset>
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	2205      	movs	r2, #5
        err = mp_init(key->k);
 800ad46:	f505 77a8 	add.w	r7, r5, #336	; 0x150
        DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800ad4a:	61da      	str	r2, [r3, #28]
        err = mp_init(key->k);
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f00e fa81 	bl	8019254 <mp_init>
        if (err == MP_OKAY) {
 800ad52:	4604      	mov	r4, r0
 800ad54:	bb88      	cbnz	r0, 800adba <_ecc_make_key_ex+0xb2>
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800ad56:	f44f 7002 	mov.w	r0, #520	; 0x208
 800ad5a:	f010 f921 	bl	801afa0 <malloc>
 800ad5e:	4680      	mov	r8, r0
 800ad60:	b348      	cbz	r0, 800adb6 <_ecc_make_key_ex+0xae>
 800ad62:	9b01      	ldr	r3, [sp, #4]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800ad64:	223b      	movs	r2, #59	; 0x3b
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800ad66:	6198      	str	r0, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800ad68:	a901      	add	r1, sp, #4
 800ad6a:	6928      	ldr	r0, [r5, #16]
 800ad6c:	f7fe fef4 	bl	8009b58 <wc_ecc_curve_load>
        if (err == MP_OKAY) {
 800ad70:	4604      	mov	r4, r0
 800ad72:	bb10      	cbnz	r0, 800adba <_ecc_make_key_ex+0xb2>
            err = wc_ecc_gen_k(rng, key->dp->size, key->k, curve->order);
 800ad74:	6929      	ldr	r1, [r5, #16]
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	6809      	ldr	r1, [r1, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	463a      	mov	r2, r7
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7ff f967 	bl	800a052 <wc_ecc_gen_k>
        if (err == MP_OKAY) {
 800ad84:	4604      	mov	r4, r0
 800ad86:	b9c0      	cbnz	r0, 800adba <_ecc_make_key_ex+0xb2>
            err = ecc_make_pub_ex(key, curve, NULL, rng);
 800ad88:	4602      	mov	r2, r0
 800ad8a:	9901      	ldr	r1, [sp, #4]
 800ad8c:	4633      	mov	r3, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f7ff feee 	bl	800ab70 <ecc_make_pub_ex>
        if (err == MP_OKAY
 800ad94:	4604      	mov	r4, r0
 800ad96:	b980      	cbnz	r0, 800adba <_ecc_make_key_ex+0xb2>
            key->type = ECC_PRIVATEKEY;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	602b      	str	r3, [r5, #0]
        wc_ecc_curve_free(curve);
 800ad9c:	9801      	ldr	r0, [sp, #4]
 800ad9e:	f7fe fe93 	bl	8009ac8 <wc_ecc_curve_free>
        FREE_CURVE_SPECS();
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	d002      	beq.n	800adae <_ecc_make_key_ex+0xa6>
 800ada8:	4640      	mov	r0, r8
 800adaa:	f010 f901 	bl	801afb0 <free>
}
 800adae:	4620      	mov	r0, r4
 800adb0:	b00c      	add	sp, #48	; 0x30
 800adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800adb6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
            mp_forcezero(key->k);
 800adba:	4638      	mov	r0, r7
 800adbc:	f00e fa5d 	bl	801927a <mp_forcezero>
 800adc0:	e7ec      	b.n	800ad9c <_ecc_make_key_ex+0x94>
        return BAD_FUNC_ARG;
 800adc2:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800adc6:	e7f2      	b.n	800adae <_ecc_make_key_ex+0xa6>

0800adc8 <wc_ecc_make_key_ex>:
{
 800adc8:	b513      	push	{r0, r1, r4, lr}
    err = _ecc_make_key_ex(rng, keysize, key, curve_id, flags);
 800adca:	2400      	movs	r4, #0
 800adcc:	9400      	str	r4, [sp, #0]
 800adce:	f7ff ff9b 	bl	800ad08 <_ecc_make_key_ex>
}
 800add2:	b002      	add	sp, #8
 800add4:	bd10      	pop	{r4, pc}

0800add6 <wc_ecc_make_key>:
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
 800add6:	2300      	movs	r3, #0
 800add8:	f7ff bff6 	b.w	800adc8 <wc_ecc_make_key_ex>

0800addc <wc_ecc_sign_hash_ex>:
{
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	b095      	sub	sp, #84	; 0x54
 800ade2:	4607      	mov	r7, r0
 800ade4:	9203      	str	r2, [sp, #12]
   DECLARE_CURVE_SPECS(1);
 800ade6:	a80a      	add	r0, sp, #40	; 0x28
 800ade8:	2228      	movs	r2, #40	; 0x28
{
 800adea:	460e      	mov	r6, r1
   DECLARE_CURVE_SPECS(1);
 800adec:	2100      	movs	r1, #0
{
 800adee:	461c      	mov	r4, r3
 800adf0:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   DECLARE_CURVE_SPECS(1);
 800adf4:	9009      	str	r0, [sp, #36]	; 0x24
 800adf6:	f010 f91b 	bl	801b030 <memset>
 800adfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfc:	2201      	movs	r2, #1
 800adfe:	61da      	str	r2, [r3, #28]
   if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL) {
 800ae00:	2f00      	cmp	r7, #0
 800ae02:	f000 8141 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
 800ae06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 813d 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
 800ae0e:	f1b8 0f00 	cmp.w	r8, #0
 800ae12:	f000 8139 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
 800ae16:	2c00      	cmp	r4, #0
 800ae18:	f000 8136 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 8132 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
   if (key->type != ECC_PRIVATEKEY && key->type != ECC_PRIVATEKEY_ONLY) {
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	3b02      	subs	r3, #2
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	f200 812d 	bhi.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 800ae2e:	6860      	ldr	r0, [r4, #4]
 800ae30:	f7ff f8d3 	bl	8009fda <wc_ecc_is_valid_idx>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f000 8127 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 8123 	beq.w	800b088 <wc_ecc_sign_hash_ex+0x2ac>
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800ae42:	2068      	movs	r0, #104	; 0x68
 800ae44:	f010 f8ac 	bl	801afa0 <malloc>
 800ae48:	4605      	mov	r5, r0
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	f000 811f 	beq.w	800b08e <wc_ecc_sign_hash_ex+0x2b2>
 800ae50:	2268      	movs	r2, #104	; 0x68
 800ae52:	2100      	movs	r1, #0
 800ae54:	f010 f8ec 	bl	801b030 <memset>
   if ((err = INIT_MP_INT_SIZE(e, ECC_KEY_MAX_BITS(key))) != MP_OKAY) {
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f00e f9fb 	bl	8019254 <mp_init>
 800ae5e:	4683      	mov	fp, r0
 800ae60:	b130      	cbz	r0, 800ae70 <wc_ecc_sign_hash_ex+0x94>
      FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800ae62:	4628      	mov	r0, r5
   FREE_CURVE_SPECS();
 800ae64:	f010 f8a4 	bl	801afb0 <free>
}
 800ae68:	4658      	mov	r0, fp
 800ae6a:	b015      	add	sp, #84	; 0x54
 800ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ALLOC_CURVE_SPECS(1, err);
 800ae70:	2068      	movs	r0, #104	; 0x68
 800ae72:	f010 f895 	bl	801afa0 <malloc>
 800ae76:	9002      	str	r0, [sp, #8]
 800ae78:	b978      	cbnz	r0, 800ae9a <wc_ecc_sign_hash_ex+0xbe>
 800ae7a:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
   mp_clear(e);
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f00e f9fd 	bl	801927e <mp_clear>
   wc_ecc_curve_free(curve);
 800ae84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae86:	f7fe fe1f 	bl	8009ac8 <wc_ecc_curve_free>
   FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f010 f890 	bl	801afb0 <free>
   FREE_CURVE_SPECS();
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0e8      	beq.n	800ae68 <wc_ecc_sign_hash_ex+0x8c>
 800ae96:	4618      	mov	r0, r3
 800ae98:	e7e4      	b.n	800ae64 <wc_ecc_sign_hash_ex+0x88>
        ALLOC_CURVE_SPECS(1, err);
 800ae9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9c:	9a02      	ldr	r2, [sp, #8]
 800ae9e:	619a      	str	r2, [r3, #24]
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800aea0:	6920      	ldr	r0, [r4, #16]
 800aea2:	2208      	movs	r2, #8
 800aea4:	a909      	add	r1, sp, #36	; 0x24
 800aea6:	f7fe fe57 	bl	8009b58 <wc_ecc_curve_load>
   if (err == MP_OKAY) {
 800aeaa:	4683      	mov	fp, r0
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d1e6      	bne.n	800ae7e <wc_ecc_sign_hash_ex+0xa2>
       word32 orderBits = (word32)mp_count_bits(curve->order);
 800aeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb2:	68d8      	ldr	r0, [r3, #12]
 800aeb4:	f00f fa4c 	bl	801a350 <mp_count_bits>
       if ((WOLFSSL_BIT_SIZE * inlen) > orderBits)
 800aeb8:	ebb0 0fc6 	cmp.w	r0, r6, lsl #3
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 800aebc:	bf3c      	itt	cc
 800aebe:	1dc6      	addcc	r6, r0, #7
 800aec0:	08f6      	lsrcc	r6, r6, #3
       word32 orderBits = (word32)mp_count_bits(curve->order);
 800aec2:	4681      	mov	r9, r0
       err = mp_read_unsigned_bin(e, in, inlen);
 800aec4:	4632      	mov	r2, r6
 800aec6:	4639      	mov	r1, r7
 800aec8:	4628      	mov	r0, r5
 800aeca:	f00e fa0e 	bl	80192ea <mp_read_unsigned_bin>
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
 800aece:	4683      	mov	fp, r0
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d1d4      	bne.n	800ae7e <wc_ecc_sign_hash_ex+0xa2>
 800aed4:	ebb9 0fc6 	cmp.w	r9, r6, lsl #3
 800aed8:	d206      	bcs.n	800aee8 <wc_ecc_sign_hash_ex+0x10c>
           mp_rshb(e, (int)(WOLFSSL_BIT_SIZE - (orderBits & 0x7)));
 800aeda:	f009 0107 	and.w	r1, r9, #7
 800aede:	f1c1 0108 	rsb	r1, r1, #8
 800aee2:	4628      	mov	r0, r5
 800aee4:	f00f fa38 	bl	801a358 <mp_rshb>
       pubkey = (ecc_key*)XMALLOC(sizeof(ecc_key), key->heap, DYNAMIC_TYPE_ECC);
 800aee8:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800aeec:	f010 f858 	bl	801afa0 <malloc>
       if (pubkey == NULL)
 800aef0:	4606      	mov	r6, r0
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d0c1      	beq.n	800ae7a <wc_ecc_sign_hash_ex+0x9e>
           err = wc_ecc_init_ex(pubkey, key->heap, INVALID_DEVID);
 800aef6:	6961      	ldr	r1, [r4, #20]
 800aef8:	f06f 0201 	mvn.w	r2, #1
 800aefc:	f7ff f946 	bl	800a18c <wc_ecc_init_ex>
           if (err == MP_OKAY) {
 800af00:	4683      	mov	fp, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	d1bb      	bne.n	800ae7e <wc_ecc_sign_hash_ex+0xa2>
    NEW_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800af06:	2068      	movs	r0, #104	; 0x68
              err = ecc_sign_hash_sw(key, pubkey, rng, curve, e, r, s);
 800af08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    NEW_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800af0c:	f010 f848 	bl	801afa0 <malloc>
 800af10:	4607      	mov	r7, r0
 800af12:	2800      	cmp	r0, #0
 800af14:	f000 80b5 	beq.w	800b082 <wc_ecc_sign_hash_ex+0x2a6>
 800af18:	4659      	mov	r1, fp
 800af1a:	2268      	movs	r2, #104	; 0x68
 800af1c:	f010 f888 	bl	801b030 <memset>
        err = INIT_MP_INT_SIZE(b, ECC_KEY_MAX_BITS(key));
 800af20:	4638      	mov	r0, r7
 800af22:	f00e f997 	bl	8019254 <mp_init>
    if (err == MP_OKAY) {
 800af26:	4683      	mov	fp, r0
 800af28:	b930      	cbnz	r0, 800af38 <wc_ecc_sign_hash_ex+0x15c>
 800af2a:	f04f 0a41 	mov.w	sl, #65	; 0x41
            if (++loop_check > 64) {
 800af2e:	f1ba 0a01 	subs.w	sl, sl, #1
 800af32:	d10f      	bne.n	800af54 <wc_ecc_sign_hash_ex+0x178>
                 err = RNG_FAILURE_E;
 800af34:	f06f 0bc6 	mvn.w	fp, #198	; 0xc6
    mp_forcezero(b);
 800af38:	4638      	mov	r0, r7
 800af3a:	f00e f99e 	bl	801927a <mp_forcezero>
    FREE_MP_INT_SIZE(b, key->heap, DYNAMIC_TYPE_ECC);
 800af3e:	b117      	cbz	r7, 800af46 <wc_ecc_sign_hash_ex+0x16a>
 800af40:	4638      	mov	r0, r7
 800af42:	f010 f835 	bl	801afb0 <free>
              wc_ecc_free(pubkey);
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff f963 	bl	800a212 <wc_ecc_free>
              XFREE(pubkey, key->heap, DYNAMIC_TYPE_ECC);
 800af4c:	4630      	mov	r0, r6
 800af4e:	f010 f82f 	bl	801afb0 <free>
 800af52:	e794      	b.n	800ae7e <wc_ecc_sign_hash_ex+0xa2>
            err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);
 800af54:	6921      	ldr	r1, [r4, #16]
 800af56:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800af5a:	6809      	ldr	r1, [r1, #0]
 800af5c:	9803      	ldr	r0, [sp, #12]
 800af5e:	463a      	mov	r2, r7
 800af60:	f7ff f877 	bl	800a052 <wc_ecc_gen_k>
        while (err == MP_ZERO_E);
 800af64:	f110 0f79 	cmn.w	r0, #121	; 0x79
            err = wc_ecc_gen_k(rng, key->dp->size, b, curve->order);
 800af68:	4683      	mov	fp, r0
        while (err == MP_ZERO_E);
 800af6a:	d0e0      	beq.n	800af2e <wc_ecc_sign_hash_ex+0x152>
    for (; err == MP_OKAY;) {
 800af6c:	f1bb 0f00 	cmp.w	fp, #0
 800af70:	d1e2      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
 800af72:	2341      	movs	r3, #65	; 0x41
 800af74:	9304      	str	r3, [sp, #16]
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 800af76:	f106 0318 	add.w	r3, r6, #24
            err = _ecc_make_key_ex(rng, key->dp->size, pubkey, key->dp->id,
 800af7a:	f8cd b018 	str.w	fp, [sp, #24]
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 800af7e:	9305      	str	r3, [sp, #20]
            mp_int* ep = pubkey->k;
 800af80:	f506 7aa8 	add.w	sl, r6, #336	; 0x150
        if (++loop_check > 64) {
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	3b01      	subs	r3, #1
 800af88:	9304      	str	r3, [sp, #16]
 800af8a:	d0d3      	beq.n	800af34 <wc_ecc_sign_hash_ex+0x158>
            err = _ecc_make_key_ex(rng, key->dp->size, pubkey, key->dp->id,
 800af8c:	6921      	ldr	r1, [r4, #16]
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	684b      	ldr	r3, [r1, #4]
 800af94:	9803      	ldr	r0, [sp, #12]
 800af96:	6809      	ldr	r1, [r1, #0]
 800af98:	4632      	mov	r2, r6
 800af9a:	f7ff feb5 	bl	800ad08 <_ecc_make_key_ex>
        if (err != MP_OKAY) break;
 800af9e:	4683      	mov	fp, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d1c9      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
        err = mp_mod(pubkey->pubkey.x, curve->order, r);
 800afa4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800afa6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800afaa:	9805      	ldr	r0, [sp, #20]
 800afac:	f00e fd46 	bl	8019a3c <mp_mod>
        if (err != MP_OKAY) break;
 800afb0:	4683      	mov	fp, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d1c0      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
        if (mp_iszero(r) == MP_NO) {
 800afb6:	981e      	ldr	r0, [sp, #120]	; 0x78
 800afb8:	f00f f9c5 	bl	801a346 <mp_iszero>
 800afbc:	b170      	cbz	r0, 800afdc <wc_ecc_sign_hash_ex+0x200>
         mp_clear(pubkey->pubkey.x);
 800afbe:	9805      	ldr	r0, [sp, #20]
 800afc0:	f00e f95d 	bl	801927e <mp_clear>
         mp_clear(pubkey->pubkey.y);
 800afc4:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800afc8:	f00e f959 	bl	801927e <mp_clear>
         mp_clear(pubkey->pubkey.z);
 800afcc:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
 800afd0:	f00e f955 	bl	801927e <mp_clear>
         mp_forcezero(pubkey->k);
 800afd4:	4650      	mov	r0, sl
 800afd6:	f00e f950 	bl	801927a <mp_forcezero>
    for (; err == MP_OKAY;) {
 800afda:	e7d3      	b.n	800af84 <wc_ecc_sign_hash_ex+0x1a8>
            mp_int* x  = key->k;
 800afdc:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 800afe0:	9307      	str	r3, [sp, #28]
            err = mp_mulmod(pubkey->k, b, curve->order, kp);
 800afe2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800afe6:	4653      	mov	r3, sl
 800afe8:	4639      	mov	r1, r7
 800afea:	4650      	mov	r0, sl
 800afec:	f00e fcff 	bl	80199ee <mp_mulmod>
            if (err != MP_OKAY) break;
 800aff0:	4683      	mov	fp, r0
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d1a0      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_invmod(kp, curve->order, kp);
 800aff6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800affa:	4652      	mov	r2, sl
 800affc:	4650      	mov	r0, sl
 800affe:	f00e ff57 	bl	8019eb0 <mp_invmod>
            if (err != MP_OKAY) break;
 800b002:	4683      	mov	fp, r0
 800b004:	2800      	cmp	r0, #0
 800b006:	d197      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(x, r, curve->order, s);
 800b008:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b00c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b00e:	4643      	mov	r3, r8
 800b010:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800b014:	f00e fceb 	bl	80199ee <mp_mulmod>
            if (err != MP_OKAY) break;
 800b018:	4683      	mov	fp, r0
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d18c      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(kp, s, curve->order, s);
 800b01e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b022:	4643      	mov	r3, r8
 800b024:	4641      	mov	r1, r8
 800b026:	4650      	mov	r0, sl
 800b028:	f00e fce1 	bl	80199ee <mp_mulmod>
            if (err != MP_OKAY) break;
 800b02c:	4683      	mov	fp, r0
 800b02e:	2800      	cmp	r0, #0
 800b030:	d182      	bne.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(kp, e, curve->order, ep);
 800b032:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b036:	4653      	mov	r3, sl
 800b038:	4629      	mov	r1, r5
 800b03a:	4650      	mov	r0, sl
 800b03c:	f00e fcd7 	bl	80199ee <mp_mulmod>
            if (err != MP_OKAY) break;
 800b040:	4683      	mov	fp, r0
 800b042:	2800      	cmp	r0, #0
 800b044:	f47f af78 	bne.w	800af38 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_addmod_ct(ep, s, curve->order, s);
 800b048:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b04c:	4643      	mov	r3, r8
 800b04e:	4641      	mov	r1, r8
 800b050:	4650      	mov	r0, sl
 800b052:	f00e f942 	bl	80192da <mp_addmod_ct>
            if (err != MP_OKAY) break;
 800b056:	4683      	mov	fp, r0
 800b058:	2800      	cmp	r0, #0
 800b05a:	f47f af6d 	bne.w	800af38 <wc_ecc_sign_hash_ex+0x15c>
            err = mp_mulmod(s, b, curve->order, s);
 800b05e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b062:	4643      	mov	r3, r8
 800b064:	4639      	mov	r1, r7
 800b066:	4640      	mov	r0, r8
 800b068:	f00e fcc1 	bl	80199ee <mp_mulmod>
            if (err != MP_OKAY) break;
 800b06c:	4683      	mov	fp, r0
 800b06e:	2800      	cmp	r0, #0
 800b070:	f47f af62 	bne.w	800af38 <wc_ecc_sign_hash_ex+0x15c>
            if (mp_iszero(s) == MP_NO) {
 800b074:	4640      	mov	r0, r8
 800b076:	f00f f966 	bl	801a346 <mp_iszero>
 800b07a:	4683      	mov	fp, r0
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d19e      	bne.n	800afbe <wc_ecc_sign_hash_ex+0x1e2>
 800b080:	e75a      	b.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
        err = MEMORY_E;
 800b082:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800b086:	e757      	b.n	800af38 <wc_ecc_sign_hash_ex+0x15c>
       return ECC_BAD_ARG_E;
 800b088:	f06f 0ba9 	mvn.w	fp, #169	; 0xa9
 800b08c:	e6ec      	b.n	800ae68 <wc_ecc_sign_hash_ex+0x8c>
      return MEMORY_E;
 800b08e:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800b092:	e6e9      	b.n	800ae68 <wc_ecc_sign_hash_ex+0x8c>

0800b094 <wc_ecc_sign_hash>:
{
 800b094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800b09c:	4689      	mov	r9, r1
 800b09e:	4616      	mov	r6, r2
 800b0a0:	461f      	mov	r7, r3
    if (in == NULL || out == NULL || outlen == NULL || key == NULL) {
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d04d      	beq.n	800b144 <wc_ecc_sign_hash+0xb0>
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	d04b      	beq.n	800b144 <wc_ecc_sign_hash+0xb0>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d049      	beq.n	800b144 <wc_ecc_sign_hash+0xb0>
 800b0b0:	f1bb 0f00 	cmp.w	fp, #0
 800b0b4:	d046      	beq.n	800b144 <wc_ecc_sign_hash+0xb0>
    if (rng == NULL) {
 800b0b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d043      	beq.n	800b144 <wc_ecc_sign_hash+0xb0>
    NEW_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b0bc:	2068      	movs	r0, #104	; 0x68
 800b0be:	f00f ff6f 	bl	801afa0 <malloc>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d043      	beq.n	800b150 <wc_ecc_sign_hash+0xbc>
 800b0c8:	2268      	movs	r2, #104	; 0x68
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	f00f ffb0 	bl	801b030 <memset>
    NEW_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b0d0:	2068      	movs	r0, #104	; 0x68
 800b0d2:	f00f ff65 	bl	801afa0 <malloc>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	b3b8      	cbz	r0, 800b14a <wc_ecc_sign_hash+0xb6>
 800b0da:	2268      	movs	r2, #104	; 0x68
 800b0dc:	2100      	movs	r1, #0
 800b0de:	f00f ffa7 	bl	801b030 <memset>
    err = INIT_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key));
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f00e f8b6 	bl	8019254 <mp_init>
    if (err != 0) {
 800b0e8:	4682      	mov	sl, r0
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b0ea:	4628      	mov	r0, r5
    if (err != 0) {
 800b0ec:	f1ba 0f00 	cmp.w	sl, #0
 800b0f0:	d008      	beq.n	800b104 <wc_ecc_sign_hash+0x70>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b0f2:	f00f ff5d 	bl	801afb0 <free>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f00f ff5a 	bl	801afb0 <free>
}
 800b0fc:	4650      	mov	r0, sl
 800b0fe:	b003      	add	sp, #12
 800b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = INIT_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key));
 800b104:	f00e f8a6 	bl	8019254 <mp_init>
    if (err != 0) {
 800b108:	4682      	mov	sl, r0
 800b10a:	b108      	cbz	r0, 800b110 <wc_ecc_sign_hash+0x7c>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b10c:	4628      	mov	r0, r5
 800b10e:	e7f0      	b.n	800b0f2 <wc_ecc_sign_hash+0x5e>
    err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
 800b110:	e9cd 4500 	strd	r4, r5, [sp]
 800b114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b116:	465b      	mov	r3, fp
 800b118:	4649      	mov	r1, r9
 800b11a:	4640      	mov	r0, r8
 800b11c:	f7ff fe5e 	bl	800addc <wc_ecc_sign_hash_ex>
    if (err < 0) {
 800b120:	f1b0 0a00 	subs.w	sl, r0, #0
 800b124:	da06      	bge.n	800b134 <wc_ecc_sign_hash+0xa0>
    mp_clear(r);
 800b126:	4620      	mov	r0, r4
 800b128:	f00e f8a9 	bl	801927e <mp_clear>
    mp_clear(s);
 800b12c:	4628      	mov	r0, r5
 800b12e:	f00e f8a6 	bl	801927e <mp_clear>
    FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b132:	e7eb      	b.n	800b10c <wc_ecc_sign_hash+0x78>
    err = StoreECC_DSA_Sig(out, outlen, r, s);
 800b134:	462b      	mov	r3, r5
 800b136:	4622      	mov	r2, r4
 800b138:	4639      	mov	r1, r7
 800b13a:	4630      	mov	r0, r6
 800b13c:	f006 f88f 	bl	801125e <StoreECC_DSA_Sig>
 800b140:	4682      	mov	sl, r0
 800b142:	e7f0      	b.n	800b126 <wc_ecc_sign_hash+0x92>
        return ECC_BAD_ARG_E;
 800b144:	f06f 0aa9 	mvn.w	sl, #169	; 0xa9
 800b148:	e7d8      	b.n	800b0fc <wc_ecc_sign_hash+0x68>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800b14a:	4620      	mov	r0, r4
 800b14c:	f00f ff30 	bl	801afb0 <free>
        return MEMORY_E;
 800b150:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 800b154:	e7d2      	b.n	800b0fc <wc_ecc_sign_hash+0x68>

0800b156 <ecc_mul2add>:
{
 800b156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15a:	b08d      	sub	sp, #52	; 0x34
  mp_digit       mp = 0;
 800b15c:	f04f 0b00 	mov.w	fp, #0
{
 800b160:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b162:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b164:	9205      	str	r2, [sp, #20]
 800b166:	468a      	mov	sl, r1
 800b168:	461e      	mov	r6, r3
  mp_digit       mp = 0;
 800b16a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  if (A == NULL || kA == NULL || B == NULL || kB == NULL || C == NULL ||
 800b16e:	4680      	mov	r8, r0
 800b170:	2800      	cmp	r0, #0
 800b172:	f000 81b0 	beq.w	800b4d6 <ecc_mul2add+0x380>
 800b176:	2900      	cmp	r1, #0
 800b178:	f000 81ad 	beq.w	800b4d6 <ecc_mul2add+0x380>
 800b17c:	2a00      	cmp	r2, #0
 800b17e:	f000 81aa 	beq.w	800b4d6 <ecc_mul2add+0x380>
 800b182:	2e00      	cmp	r6, #0
 800b184:	f000 81a7 	beq.w	800b4d6 <ecc_mul2add+0x380>
 800b188:	2f00      	cmp	r7, #0
 800b18a:	f000 81a4 	beq.w	800b4d6 <ecc_mul2add+0x380>
 800b18e:	2d00      	cmp	r5, #0
 800b190:	f000 81a1 	beq.w	800b4d6 <ecc_mul2add+0x380>
  tA = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b194:	f240 1001 	movw	r0, #257	; 0x101
 800b198:	f00f ff02 	bl	801afa0 <malloc>
  if (tA == NULL) {
 800b19c:	4681      	mov	r9, r0
 800b19e:	b140      	cbz	r0, 800b1b2 <ecc_mul2add+0x5c>
  tB = (unsigned char*)XMALLOC(ECC_BUFSIZE, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b1a0:	f240 1001 	movw	r0, #257	; 0x101
 800b1a4:	f00f fefc 	bl	801afa0 <malloc>
  if (tB == NULL) {
 800b1a8:	9004      	str	r0, [sp, #16]
 800b1aa:	b928      	cbnz	r0, 800b1b8 <ecc_mul2add+0x62>
     XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b1ac:	4648      	mov	r0, r9
 800b1ae:	f00f feff 	bl	801afb0 <free>
     return GEN_MEM_ERR;
 800b1b2:	f06f 0101 	mvn.w	r1, #1
 800b1b6:	e109      	b.n	800b3cc <ecc_mul2add+0x276>
  precomp = (ecc_point**)XMALLOC(sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ, heap,
 800b1b8:	2040      	movs	r0, #64	; 0x40
 800b1ba:	f00f fef1 	bl	801afa0 <malloc>
  if (precomp == NULL) {
 800b1be:	4604      	mov	r4, r0
 800b1c0:	b918      	cbnz	r0, 800b1ca <ecc_mul2add+0x74>
     XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b1c2:	9804      	ldr	r0, [sp, #16]
 800b1c4:	f00f fef4 	bl	801afb0 <free>
 800b1c8:	e7f0      	b.n	800b1ac <ecc_mul2add+0x56>
  XMEMSET(tA, 0, ECC_BUFSIZE);
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	f240 1201 	movw	r2, #257	; 0x101
 800b1d0:	4648      	mov	r0, r9
 800b1d2:	f00f ff2d 	bl	801b030 <memset>
  XMEMSET(tB, 0, ECC_BUFSIZE);
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	f240 1201 	movw	r2, #257	; 0x101
 800b1dc:	9804      	ldr	r0, [sp, #16]
 800b1de:	f00f ff27 	bl	801b030 <memset>
  XMEMSET(precomp, 0, sizeof(ecc_point*) * SHAMIR_PRECOMP_SZ);
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	2240      	movs	r2, #64	; 0x40
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f00f ff22 	bl	801b030 <memset>
  lenA = (unsigned int)mp_unsigned_bin_size(kA);
 800b1ec:	4650      	mov	r0, sl
 800b1ee:	f00e f87a 	bl	80192e6 <mp_unsigned_bin_size>
 800b1f2:	9006      	str	r0, [sp, #24]
  lenB = (unsigned int)mp_unsigned_bin_size(kB);
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f00e f876 	bl	80192e6 <mp_unsigned_bin_size>
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 800b1fa:	9906      	ldr	r1, [sp, #24]
 800b1fc:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
  lenB = (unsigned int)mp_unsigned_bin_size(kB);
 800b200:	4683      	mov	fp, r0
  if ((lenA > ECC_BUFSIZE) || (lenB > ECC_BUFSIZE)) {
 800b202:	f080 815c 	bcs.w	800b4be <ecc_mul2add+0x368>
 800b206:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800b20a:	f080 8158 	bcs.w	800b4be <ecc_mul2add+0x368>
  len  = MAX(lenA, lenB);
 800b20e:	4281      	cmp	r1, r0
 800b210:	460b      	mov	r3, r1
 800b212:	bf38      	it	cc
 800b214:	4603      	movcc	r3, r0
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 800b216:	1a59      	subs	r1, r3, r1
 800b218:	4449      	add	r1, r9
 800b21a:	4650      	mov	r0, sl
  len  = MAX(lenA, lenB);
 800b21c:	9306      	str	r3, [sp, #24]
    err = mp_to_unsigned_bin(kA, (len - lenA) + tA);
 800b21e:	f00f f88b 	bl	801a338 <mp_to_unsigned_bin>
    if (err == MP_OKAY)
 800b222:	4601      	mov	r1, r0
 800b224:	2800      	cmp	r0, #0
 800b226:	f040 80ad 	bne.w	800b384 <ecc_mul2add+0x22e>
        err = mp_to_unsigned_bin(kB, (len - lenB) + tB);
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	eba3 010b 	sub.w	r1, r3, fp
 800b230:	9b04      	ldr	r3, [sp, #16]
 800b232:	4630      	mov	r0, r6
 800b234:	4419      	add	r1, r3
 800b236:	f00f f87f 	bl	801a338 <mp_to_unsigned_bin>
    if (err == MP_OKAY) {
 800b23a:	4601      	mov	r1, r0
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f040 80a1 	bne.w	800b384 <ecc_mul2add+0x22e>
 800b242:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b246:	4626      	mov	r6, r4
 800b248:	9307      	str	r3, [sp, #28]
            err = wc_ecc_new_point_ex(&precomp[x], heap);
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7fe f818 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
            if (err != MP_OKAY)
 800b250:	4601      	mov	r1, r0
 800b252:	2800      	cmp	r0, #0
 800b254:	f040 8096 	bne.w	800b384 <ecc_mul2add+0x22e>
        for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 800b258:	9b07      	ldr	r3, [sp, #28]
 800b25a:	3604      	adds	r6, #4
 800b25c:	429e      	cmp	r6, r3
 800b25e:	d1f4      	bne.n	800b24a <ecc_mul2add+0xf4>
    err = mp_montgomery_setup(modulus, &mp);
 800b260:	a90b      	add	r1, sp, #44	; 0x2c
 800b262:	4628      	mov	r0, r5
 800b264:	f00f f934 	bl	801a4d0 <mp_montgomery_setup>
  if (err == MP_OKAY) {
 800b268:	4601      	mov	r1, r0
 800b26a:	2800      	cmp	r0, #0
 800b26c:	f040 808a 	bne.w	800b384 <ecc_mul2add+0x22e>
    NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 800b270:	2068      	movs	r0, #104	; 0x68
    err = ecc_mont_norm_points(A, precomp[1], B, precomp[1<<2], modulus, heap);
 800b272:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800b276:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b27a:	9108      	str	r1, [sp, #32]
    NEW_MP_INT_SIZE(mu, mp_bitsused(modulus), heap, DYNAMIC_TYPE_ECC);
 800b27c:	f00f fe90 	bl	801afa0 <malloc>
 800b280:	4606      	mov	r6, r0
 800b282:	2800      	cmp	r0, #0
 800b284:	f000 811e 	beq.w	800b4c4 <ecc_mul2add+0x36e>
 800b288:	9908      	ldr	r1, [sp, #32]
 800b28a:	2268      	movs	r2, #104	; 0x68
 800b28c:	f00f fed0 	bl	801b030 <memset>
        err = INIT_MP_INT_SIZE(mu, mp_bitsused(modulus));
 800b290:	4630      	mov	r0, r6
 800b292:	f00d ffdf 	bl	8019254 <mp_init>
    if (err == MP_OKAY) {
 800b296:	4601      	mov	r1, r0
 800b298:	2800      	cmp	r0, #0
 800b29a:	d141      	bne.n	800b320 <ecc_mul2add+0x1ca>
        err = mp_montgomery_calc_normalization(mu, modulus);
 800b29c:	4629      	mov	r1, r5
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f00f f85c 	bl	801a35c <mp_montgomery_calc_normalization>
        if (err == MP_OKAY) {
 800b2a4:	4601      	mov	r1, r0
 800b2a6:	bbb0      	cbnz	r0, 800b316 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->x, mu, modulus, Am->x);
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	465b      	mov	r3, fp
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	f00e fb9d 	bl	80199ee <mp_mulmod>
        if (err == MP_OKAY)
 800b2b4:	4601      	mov	r1, r0
 800b2b6:	bb70      	cbnz	r0, 800b316 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->y, mu, modulus, Am->y);
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	f10b 0368 	add.w	r3, fp, #104	; 0x68
 800b2be:	462a      	mov	r2, r5
 800b2c0:	f108 0068 	add.w	r0, r8, #104	; 0x68
 800b2c4:	f00e fb93 	bl	80199ee <mp_mulmod>
        if (err == MP_OKAY)
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	bb20      	cbnz	r0, 800b316 <ecc_mul2add+0x1c0>
            err = mp_mulmod(A->z, mu, modulus, Am->z);
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	f10b 03d0 	add.w	r3, fp, #208	; 0xd0
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	f108 00d0 	add.w	r0, r8, #208	; 0xd0
 800b2d8:	f00e fb89 	bl	80199ee <mp_mulmod>
        if (err == MP_OKAY)
 800b2dc:	4601      	mov	r1, r0
 800b2de:	b9d0      	cbnz	r0, 800b316 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->x, mu, modulus, Bm->x);
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	9805      	ldr	r0, [sp, #20]
 800b2e4:	4653      	mov	r3, sl
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	f00e fb81 	bl	80199ee <mp_mulmod>
        if (err == MP_OKAY)
 800b2ec:	4601      	mov	r1, r0
 800b2ee:	b990      	cbnz	r0, 800b316 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->y, mu, modulus, Bm->y);
 800b2f0:	9805      	ldr	r0, [sp, #20]
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	3068      	adds	r0, #104	; 0x68
 800b2fc:	f00e fb77 	bl	80199ee <mp_mulmod>
        if (err == MP_OKAY)
 800b300:	4601      	mov	r1, r0
 800b302:	b940      	cbnz	r0, 800b316 <ecc_mul2add+0x1c0>
            err = mp_mulmod(B->z, mu, modulus, Bm->z);
 800b304:	9805      	ldr	r0, [sp, #20]
 800b306:	4631      	mov	r1, r6
 800b308:	f10a 03d0 	add.w	r3, sl, #208	; 0xd0
 800b30c:	462a      	mov	r2, r5
 800b30e:	30d0      	adds	r0, #208	; 0xd0
 800b310:	f00e fb6d 	bl	80199ee <mp_mulmod>
 800b314:	4601      	mov	r1, r0
        mp_clear(mu);
 800b316:	4630      	mov	r0, r6
 800b318:	9105      	str	r1, [sp, #20]
 800b31a:	f00d ffb0 	bl	801927e <mp_clear>
 800b31e:	9905      	ldr	r1, [sp, #20]
 800b320:	9105      	str	r1, [sp, #20]
    FREE_MP_INT_SIZE(mu, heap, DYNAMIC_TYPE_ECC);
 800b322:	4630      	mov	r0, r6
 800b324:	f00f fe44 	bl	801afb0 <free>
  if (err == MP_OKAY) {
 800b328:	9905      	ldr	r1, [sp, #20]
 800b32a:	bb59      	cbnz	r1, 800b384 <ecc_mul2add+0x22e>
    err = ecc_projective_dbl_point_safe(precomp[1], precomp[2], a, modulus, mp);
 800b32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800b334:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b336:	462b      	mov	r3, r5
 800b338:	f7ff f82d 	bl	800a396 <ecc_projective_dbl_point_safe>
  if (err == MP_OKAY) {
 800b33c:	4601      	mov	r1, r0
 800b33e:	bb08      	cbnz	r0, 800b384 <ecc_mul2add+0x22e>
    err = ecc_projective_add_point_safe(precomp[1], precomp[2], precomp[3],
 800b340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b342:	9002      	str	r0, [sp, #8]
 800b344:	e9cd 5300 	strd	r5, r3, [sp]
 800b348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b34a:	6860      	ldr	r0, [r4, #4]
 800b34c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b350:	f7fe ff87 	bl	800a262 <ecc_projective_add_point_safe>
  if (err == MP_OKAY) {
 800b354:	4601      	mov	r1, r0
 800b356:	b9a8      	cbnz	r0, 800b384 <ecc_mul2add+0x22e>
    err = ecc_projective_dbl_point_safe(precomp[4], precomp[8], a, modulus, mp);
 800b358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	6a21      	ldr	r1, [r4, #32]
 800b35e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b360:	6920      	ldr	r0, [r4, #16]
 800b362:	462b      	mov	r3, r5
 800b364:	f7ff f817 	bl	800a396 <ecc_projective_dbl_point_safe>
  if (err == MP_OKAY) {
 800b368:	4601      	mov	r1, r0
 800b36a:	b958      	cbnz	r0, 800b384 <ecc_mul2add+0x22e>
    err = ecc_projective_add_point_safe(precomp[4], precomp[8], precomp[12], a,
 800b36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36e:	9002      	str	r0, [sp, #8]
 800b370:	e9cd 5300 	strd	r5, r3, [sp]
 800b374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b376:	6a21      	ldr	r1, [r4, #32]
 800b378:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b37a:	6920      	ldr	r0, [r4, #16]
 800b37c:	f7fe ff71 	bl	800a262 <ecc_projective_add_point_safe>
  if (err == MP_OKAY) {
 800b380:	4601      	mov	r1, r0
 800b382:	b338      	cbz	r0, 800b3d4 <ecc_mul2add+0x27e>
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 800b384:	1f25      	subs	r5, r4, #4
 800b386:	f104 063c 	add.w	r6, r4, #60	; 0x3c
     wc_ecc_del_point_ex(precomp[x], heap);
 800b38a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b38e:	9105      	str	r1, [sp, #20]
 800b390:	f7fd ff9d 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
  for (x = 0; x < SHAMIR_PRECOMP_SZ; x++) {
 800b394:	42ae      	cmp	r6, r5
 800b396:	9905      	ldr	r1, [sp, #20]
 800b398:	d1f7      	bne.n	800b38a <ecc_mul2add+0x234>
 800b39a:	f209 1201 	addw	r2, r9, #257	; 0x101
 800b39e:	464b      	mov	r3, r9
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	f040 8091 	bne.w	800b4ca <ecc_mul2add+0x374>
 800b3a8:	9b04      	ldr	r3, [sp, #16]
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	f203 1201 	addw	r2, r3, #257	; 0x101
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	f040 808d 	bne.w	800b4d0 <ecc_mul2add+0x37a>
  XFREE(precomp, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	9105      	str	r1, [sp, #20]
 800b3ba:	f00f fdf9 	bl	801afb0 <free>
  XFREE(tB, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b3be:	9804      	ldr	r0, [sp, #16]
 800b3c0:	f00f fdf6 	bl	801afb0 <free>
  XFREE(tA, heap, DYNAMIC_TYPE_ECC_BUFFER);
 800b3c4:	4648      	mov	r0, r9
 800b3c6:	f00f fdf3 	bl	801afb0 <free>
  return err;
 800b3ca:	9905      	ldr	r1, [sp, #20]
}
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	b00d      	add	sp, #52	; 0x34
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (x = 1; x < 4; x++) {
 800b3d4:	f04f 0801 	mov.w	r8, #1
      for (y = 1; y < 4; y++) {
 800b3d8:	f104 0610 	add.w	r6, r4, #16
        if (err == MP_OKAY) {
 800b3dc:	b961      	cbnz	r1, 800b3f8 <ecc_mul2add+0x2a2>
          err = ecc_projective_add_point_safe(precomp[x], precomp[(y<<2)],
 800b3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e0:	9102      	str	r1, [sp, #8]
 800b3e2:	e9cd 5300 	strd	r5, r3, [sp]
 800b3e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3e8:	6831      	ldr	r1, [r6, #0]
 800b3ea:	f856 2028 	ldr.w	r2, [r6, r8, lsl #2]
 800b3ee:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 800b3f2:	f7fe ff36 	bl	800a262 <ecc_projective_add_point_safe>
 800b3f6:	4601      	mov	r1, r0
      for (y = 1; y < 4; y++) {
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	3610      	adds	r6, #16
 800b3fc:	42b3      	cmp	r3, r6
 800b3fe:	d1ed      	bne.n	800b3dc <ecc_mul2add+0x286>
    for (x = 1; x < 4; x++) {
 800b400:	f108 0801 	add.w	r8, r8, #1
 800b404:	f1b8 0f04 	cmp.w	r8, #4
 800b408:	d1e6      	bne.n	800b3d8 <ecc_mul2add+0x282>
  if (err == MP_OKAY) {
 800b40a:	2900      	cmp	r1, #0
 800b40c:	d1ba      	bne.n	800b384 <ecc_mul2add+0x22e>
    first   = 1;
 800b40e:	2301      	movs	r3, #1
 800b410:	930a      	str	r3, [sp, #40]	; 0x28
    bitbufB = tB[0];
 800b412:	9b04      	ldr	r3, [sp, #16]
    bitbufA = tA[0];
 800b414:	f899 a000 	ldrb.w	sl, [r9]
    bitbufB = tB[0];
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	9305      	str	r3, [sp, #20]
                    err = mp_copy(precomp[i]->y, C->y);
 800b41c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    for (x = 0; x < (int)len || nibble != 3; ) {
 800b420:	4688      	mov	r8, r1
    nibble  = 3;
 800b422:	f04f 0b03 	mov.w	fp, #3
                    err = mp_copy(precomp[i]->y, C->y);
 800b426:	9309      	str	r3, [sp, #36]	; 0x24
    for (x = 0; x < (int)len || nibble != 3; ) {
 800b428:	9b06      	ldr	r3, [sp, #24]
 800b42a:	4543      	cmp	r3, r8
 800b42c:	dc0b      	bgt.n	800b446 <ecc_mul2add+0x2f0>
 800b42e:	f1bb 0f03 	cmp.w	fp, #3
 800b432:	d108      	bne.n	800b446 <ecc_mul2add+0x2f0>
  if (err == MP_OKAY)
 800b434:	2900      	cmp	r1, #0
 800b436:	d1a5      	bne.n	800b384 <ecc_mul2add+0x22e>
    err = ecc_map(C, modulus, mp);
 800b438:	4629      	mov	r1, r5
 800b43a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b43c:	4638      	mov	r0, r7
 800b43e:	f7fe fd7d 	bl	8009f3c <ecc_map>
 800b442:	4601      	mov	r1, r0
 800b444:	e79e      	b.n	800b384 <ecc_mul2add+0x22e>
        if (++nibble == 4) {
 800b446:	f10b 0b01 	add.w	fp, fp, #1
 800b44a:	f1bb 0f04 	cmp.w	fp, #4
 800b44e:	d10c      	bne.n	800b46a <ecc_mul2add+0x314>
            if (x == (int)len) break;
 800b450:	9b06      	ldr	r3, [sp, #24]
 800b452:	4543      	cmp	r3, r8
 800b454:	d0ee      	beq.n	800b434 <ecc_mul2add+0x2de>
            bitbufB = tB[x];
 800b456:	9b04      	ldr	r3, [sp, #16]
            bitbufA = tA[x];
 800b458:	f819 a008 	ldrb.w	sl, [r9, r8]
            bitbufB = tB[x];
 800b45c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b460:	9305      	str	r3, [sp, #20]
            x++;
 800b462:	f108 0801 	add.w	r8, r8, #1
            nibble  = 0;
 800b466:	f04f 0b00 	mov.w	fp, #0
        nA = (bitbufA >> 6) & 0x03;
 800b46a:	ea4f 139a 	mov.w	r3, sl, lsr #6
 800b46e:	9307      	str	r3, [sp, #28]
        nB = (bitbufB >> 6) & 0x03;
 800b470:	9b05      	ldr	r3, [sp, #20]
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 800b472:	9a07      	ldr	r2, [sp, #28]
        nB = (bitbufB >> 6) & 0x03;
 800b474:	099e      	lsrs	r6, r3, #6
        bitbufA = (bitbufA << 2) & 0xFF;
 800b476:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800b47a:	fa5f fa83 	uxtb.w	sl, r3
        bitbufB = (bitbufB << 2) & 0xFF;
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	b2db      	uxtb	r3, r3
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 800b484:	4332      	orrs	r2, r6
        bitbufB = (bitbufB << 2) & 0xFF;
 800b486:	9305      	str	r3, [sp, #20]
        if ((nA == 0) && (nB == 0) && (first == 1)) {
 800b488:	9208      	str	r2, [sp, #32]
 800b48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48c:	d126      	bne.n	800b4dc <ecc_mul2add+0x386>
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d0ca      	beq.n	800b428 <ecc_mul2add+0x2d2>
        if (first == 0) {
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1c8      	bne.n	800b428 <ecc_mul2add+0x2d2>
 800b496:	e022      	b.n	800b4de <ecc_mul2add+0x388>
                if (err == MP_OKAY)
 800b498:	2900      	cmp	r1, #0
 800b49a:	f47f af73 	bne.w	800b384 <ecc_mul2add+0x22e>
                    err = ecc_projective_add_point_safe(C, precomp[i],
 800b49e:	ab0a      	add	r3, sp, #40	; 0x28
 800b4a0:	9302      	str	r3, [sp, #8]
 800b4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a4:	e9cd 5300 	strd	r5, r3, [sp]
 800b4a8:	463a      	mov	r2, r7
 800b4aa:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 800b4ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7fe fed6 	bl	800a262 <ecc_projective_add_point_safe>
                if (err != MP_OKAY)
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d0b5      	beq.n	800b428 <ecc_mul2add+0x2d2>
 800b4bc:	e762      	b.n	800b384 <ecc_mul2add+0x22e>
    err = BAD_FUNC_ARG;
 800b4be:	f06f 01ac 	mvn.w	r1, #172	; 0xac
 800b4c2:	e75f      	b.n	800b384 <ecc_mul2add+0x22e>
       err = MEMORY_E;
 800b4c4:	f06f 017c 	mvn.w	r1, #124	; 0x7c
 800b4c8:	e75c      	b.n	800b384 <ecc_mul2add+0x22e>
 800b4ca:	f803 0b01 	strb.w	r0, [r3], #1
 800b4ce:	e768      	b.n	800b3a2 <ecc_mul2add+0x24c>
 800b4d0:	f803 0b01 	strb.w	r0, [r3], #1
 800b4d4:	e76c      	b.n	800b3b0 <ecc_mul2add+0x25a>
     return ECC_BAD_ARG_E;
 800b4d6:	f06f 01a9 	mvn.w	r1, #169	; 0xa9
 800b4da:	e777      	b.n	800b3cc <ecc_mul2add+0x276>
        if (first == 0) {
 800b4dc:	b9d3      	cbnz	r3, 800b514 <ecc_mul2add+0x3be>
            if (err == MP_OKAY)
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	f47f af50 	bne.w	800b384 <ecc_mul2add+0x22e>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800b4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f7fe ff51 	bl	800a396 <ecc_projective_dbl_point_safe>
            if (err == MP_OKAY)
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f47f af44 	bne.w	800b384 <ecc_mul2add+0x22e>
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800b4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	4639      	mov	r1, r7
 800b502:	462b      	mov	r3, r5
 800b504:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b506:	4638      	mov	r0, r7
 800b508:	f7fe ff45 	bl	800a396 <ecc_projective_dbl_point_safe>
        if ((nA != 0) || (nB != 0)) {
 800b50c:	9b08      	ldr	r3, [sp, #32]
                err = ecc_projective_dbl_point_safe(C, C, a, modulus, mp);
 800b50e:	4601      	mov	r1, r0
        if ((nA != 0) || (nB != 0)) {
 800b510:	2b00      	cmp	r3, #0
 800b512:	d089      	beq.n	800b428 <ecc_mul2add+0x2d2>
            unsigned int i = nA + (nB<<2);
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	eb03 0686 	add.w	r6, r3, r6, lsl #2
            if (first == 1) {
 800b51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d1bb      	bne.n	800b498 <ecc_mul2add+0x342>
                first = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	930a      	str	r3, [sp, #40]	; 0x28
                if (err == MP_OKAY)
 800b524:	2900      	cmp	r1, #0
 800b526:	f47f af2d 	bne.w	800b384 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->x, C->x);
 800b52a:	4639      	mov	r1, r7
 800b52c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800b530:	f00e ff04 	bl	801a33c <mp_copy>
                if (err == MP_OKAY)
 800b534:	4601      	mov	r1, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	f47f af24 	bne.w	800b384 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->y, C->y);
 800b53c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800b540:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b542:	3068      	adds	r0, #104	; 0x68
 800b544:	f00e fefa 	bl	801a33c <mp_copy>
                if (err == MP_OKAY)
 800b548:	4601      	mov	r1, r0
 800b54a:	2800      	cmp	r0, #0
 800b54c:	f47f af1a 	bne.w	800b384 <ecc_mul2add+0x22e>
                    err = mp_copy(precomp[i]->z, C->z);
 800b550:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800b554:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800b558:	30d0      	adds	r0, #208	; 0xd0
 800b55a:	f00e feef 	bl	801a33c <mp_copy>
 800b55e:	4601      	mov	r1, r0
 800b560:	e762      	b.n	800b428 <ecc_mul2add+0x2d2>

0800b562 <wc_ecc_verify_hash_ex>:
{
 800b562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b566:	b09f      	sub	sp, #124	; 0x7c
 800b568:	4681      	mov	r9, r0
 800b56a:	9206      	str	r2, [sp, #24]
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800b56c:	a80a      	add	r0, sp, #40	; 0x28
 800b56e:	2228      	movs	r2, #40	; 0x28
{
 800b570:	468a      	mov	sl, r1
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800b572:	2100      	movs	r1, #0
{
 800b574:	4698      	mov	r8, r3
 800b576:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
 800b578:	9008      	str	r0, [sp, #32]
 800b57a:	f00f fd59 	bl	801b030 <memset>
 800b57e:	9b08      	ldr	r3, [sp, #32]
 800b580:	2205      	movs	r2, #5
 800b582:	61da      	str	r2, [r3, #28]
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 800b584:	f1b9 0f00 	cmp.w	r9, #0
 800b588:	d105      	bne.n	800b596 <wc_ecc_verify_hash_ex+0x34>
       return ECC_BAD_ARG_E;
 800b58a:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
}
 800b58e:	4620      	mov	r0, r4
 800b590:	b01f      	add	sp, #124	; 0x7c
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 800b596:	f1ba 0f00 	cmp.w	sl, #0
 800b59a:	d0f6      	beq.n	800b58a <wc_ecc_verify_hash_ex+0x28>
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0f3      	beq.n	800b58a <wc_ecc_verify_hash_ex+0x28>
 800b5a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0f0      	beq.n	800b58a <wc_ecc_verify_hash_ex+0x28>
 800b5a8:	2e00      	cmp	r6, #0
 800b5aa:	d0ee      	beq.n	800b58a <wc_ecc_verify_hash_ex+0x28>
   *res = 0;
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	6019      	str	r1, [r3, #0]
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 800b5b0:	6870      	ldr	r0, [r6, #4]
 800b5b2:	f7fe fd12 	bl	8009fda <wc_ecc_is_valid_idx>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d0e7      	beq.n	800b58a <wc_ecc_verify_hash_ex+0x28>
 800b5ba:	6933      	ldr	r3, [r6, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0e4      	beq.n	800b58a <wc_ecc_verify_hash_ex+0x28>
    DECLARE_CURVE_SPECS(1);
 800b5c0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800b5c4:	2228      	movs	r2, #40	; 0x28
 800b5c6:	4658      	mov	r0, fp
 800b5c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b5cc:	f00f fd30 	bl	801b030 <memset>
 800b5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	61da      	str	r2, [r3, #28]
    ALLOC_CURVE_SPECS(1, err);
 800b5d6:	2068      	movs	r0, #104	; 0x68
 800b5d8:	f00f fce2 	bl	801afa0 <malloc>
 800b5dc:	4605      	mov	r5, r0
 800b5de:	b308      	cbz	r0, 800b624 <wc_ecc_verify_hash_ex+0xc2>
 800b5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800b5e2:	2208      	movs	r2, #8
    ALLOC_CURVE_SPECS(1, err);
 800b5e4:	6198      	str	r0, [r3, #24]
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 800b5e6:	a909      	add	r1, sp, #36	; 0x24
 800b5e8:	6930      	ldr	r0, [r6, #16]
 800b5ea:	f7fe fab5 	bl	8009b58 <wc_ecc_curve_load>
    if (err != 0) {
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d13c      	bne.n	800b66e <wc_ecc_verify_hash_ex+0x10c>
    if (mp_iszero(r) || mp_iszero(s)) {
 800b5f4:	4648      	mov	r0, r9
 800b5f6:	f00e fea6 	bl	801a346 <mp_iszero>
 800b5fa:	b1b0      	cbz	r0, 800b62a <wc_ecc_verify_hash_ex+0xc8>
        err = MP_ZERO_E;
 800b5fc:	f06f 0478 	mvn.w	r4, #120	; 0x78
    wc_ecc_curve_free(curve);
 800b600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b602:	f7fe fa61 	bl	8009ac8 <wc_ecc_curve_free>
    FREE_CURVE_SPECS();
 800b606:	4628      	mov	r0, r5
 800b608:	f00f fcd2 	bl	801afb0 <free>
   if (err != MP_OKAY) {
 800b60c:	2c00      	cmp	r4, #0
 800b60e:	d1be      	bne.n	800b58e <wc_ecc_verify_hash_ex+0x2c>
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 800b610:	6833      	ldr	r3, [r6, #0]
 800b612:	2b03      	cmp	r3, #3
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800b614:	f44f 7002 	mov.w	r0, #520	; 0x208
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 800b618:	d137      	bne.n	800b68a <wc_ecc_verify_hash_ex+0x128>
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800b61a:	f00f fcc1 	bl	801afa0 <malloc>
 800b61e:	4605      	mov	r5, r0
 800b620:	9005      	str	r0, [sp, #20]
 800b622:	b9d8      	cbnz	r0, 800b65c <wc_ecc_verify_hash_ex+0xfa>
    ALLOC_CURVE_SPECS(1, err);
 800b624:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   if (err != MP_OKAY) {
 800b628:	e7b1      	b.n	800b58e <wc_ecc_verify_hash_ex+0x2c>
    if (mp_iszero(r) || mp_iszero(s)) {
 800b62a:	4650      	mov	r0, sl
 800b62c:	f00e fe8b 	bl	801a346 <mp_iszero>
 800b630:	2800      	cmp	r0, #0
 800b632:	d1e3      	bne.n	800b5fc <wc_ecc_verify_hash_ex+0x9a>
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 800b634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b636:	4648      	mov	r0, r9
 800b638:	68d9      	ldr	r1, [r3, #12]
 800b63a:	f00d fe50 	bl	80192de <mp_cmp>
 800b63e:	3001      	adds	r0, #1
 800b640:	d109      	bne.n	800b656 <wc_ecc_verify_hash_ex+0xf4>
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 800b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b644:	4650      	mov	r0, sl
 800b646:	68d9      	ldr	r1, [r3, #12]
 800b648:	f00d fe49 	bl	80192de <mp_cmp>
 800b64c:	1c44      	adds	r4, r0, #1
 800b64e:	bf18      	it	ne
 800b650:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 800b654:	e7d4      	b.n	800b600 <wc_ecc_verify_hash_ex+0x9e>
        err = MP_VAL;
 800b656:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b65a:	e7d1      	b.n	800b600 <wc_ecc_verify_hash_ex+0x9e>
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800b65c:	9b08      	ldr	r3, [sp, #32]
      err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800b65e:	223b      	movs	r2, #59	; 0x3b
      ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800b660:	6198      	str	r0, [r3, #24]
      err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800b662:	a908      	add	r1, sp, #32
 800b664:	6930      	ldr	r0, [r6, #16]
 800b666:	f7fe fa77 	bl	8009b58 <wc_ecc_curve_load>
      if (err != MP_OKAY) {
 800b66a:	4604      	mov	r4, r0
 800b66c:	b108      	cbz	r0, 800b672 <wc_ecc_verify_hash_ex+0x110>
        FREE_CURVE_SPECS();
 800b66e:	4628      	mov	r0, r5
 800b670:	e072      	b.n	800b758 <wc_ecc_verify_hash_ex+0x1f6>
      err = ecc_make_pub_ex(key, curve, NULL, NULL);
 800b672:	4603      	mov	r3, r0
 800b674:	4602      	mov	r2, r0
 800b676:	9908      	ldr	r1, [sp, #32]
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff fa79 	bl	800ab70 <ecc_make_pub_ex>
      if (err != MP_OKAY) {
 800b67e:	4604      	mov	r4, r0
 800b680:	b198      	cbz	r0, 800b6aa <wc_ecc_verify_hash_ex+0x148>
           wc_ecc_curve_free(curve);
 800b682:	9808      	ldr	r0, [sp, #32]
 800b684:	f7fe fa20 	bl	8009ac8 <wc_ecc_curve_free>
           FREE_CURVE_SPECS();
 800b688:	e7f1      	b.n	800b66e <wc_ecc_verify_hash_ex+0x10c>
       ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800b68a:	f00f fc89 	bl	801afa0 <malloc>
 800b68e:	4605      	mov	r5, r0
 800b690:	9005      	str	r0, [sp, #20]
 800b692:	2800      	cmp	r0, #0
 800b694:	d0c6      	beq.n	800b624 <wc_ecc_verify_hash_ex+0xc2>
 800b696:	9b08      	ldr	r3, [sp, #32]
       err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800b698:	223b      	movs	r2, #59	; 0x3b
       ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT, err);
 800b69a:	6198      	str	r0, [r3, #24]
       err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 800b69c:	a908      	add	r1, sp, #32
 800b69e:	6930      	ldr	r0, [r6, #16]
 800b6a0:	f7fe fa5a 	bl	8009b58 <wc_ecc_curve_load>
       if (err != 0) {
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1e1      	bne.n	800b66e <wc_ecc_verify_hash_ex+0x10c>
   ecc_point* mG = NULL;
 800b6aa:	2400      	movs	r4, #0
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b6ac:	2068      	movs	r0, #104	; 0x68
   err = ecc_verify_hash(r, s, hash, hashlen, res, key, curve);
 800b6ae:	9f08      	ldr	r7, [sp, #32]
   ecc_point* mG = NULL;
 800b6b0:	9409      	str	r4, [sp, #36]	; 0x24
   ecc_point* mQ = NULL;
 800b6b2:	9414      	str	r4, [sp, #80]	; 0x50
   NEW_MP_INT_SIZE(e_lcl, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b6b4:	f00f fc74 	bl	801afa0 <malloc>
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	b150      	cbz	r0, 800b6d2 <wc_ecc_verify_hash_ex+0x170>
 800b6bc:	2268      	movs	r2, #104	; 0x68
 800b6be:	4621      	mov	r1, r4
 800b6c0:	f00f fcb6 	bl	801b030 <memset>
   err = INIT_MP_INT_SIZE(e, ECC_KEY_MAX_BITS(key));
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f00d fdc5 	bl	8019254 <mp_init>
   if (err != MP_OKAY) {
 800b6ca:	b128      	cbz	r0, 800b6d8 <wc_ecc_verify_hash_ex+0x176>
      XFREE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f00f fc6f 	bl	801afb0 <free>
       return MEMORY_E;
 800b6d2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800b6d6:	e03b      	b.n	800b750 <wc_ecc_verify_hash_ex+0x1ee>
       unsigned int orderBits = (unsigned int)mp_count_bits(curve->order);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f00e fe39 	bl	801a350 <mp_count_bits>
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 800b6de:	ebb0 0fc8 	cmp.w	r0, r8, lsl #3
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
 800b6e2:	bf3c      	itt	cc
 800b6e4:	f100 0807 	addcc.w	r8, r0, #7
 800b6e8:	ea4f 08d8 	movcc.w	r8, r8, lsr #3
 800b6ec:	9007      	str	r0, [sp, #28]
       err = mp_read_unsigned_bin(e, hash, hashlen);
 800b6ee:	9906      	ldr	r1, [sp, #24]
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f00d fdf9 	bl	80192ea <mp_read_unsigned_bin>
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	b950      	cbnz	r0, 800b712 <wc_ecc_verify_hash_ex+0x1b0>
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	ebb3 0fc8 	cmp.w	r3, r8, lsl #3
 800b702:	d206      	bcs.n	800b712 <wc_ecc_verify_hash_ex+0x1b0>
           mp_rshb(e, (int)(WOLFSSL_BIT_SIZE - (orderBits & 0x7)));
 800b704:	f003 0107 	and.w	r1, r3, #7
 800b708:	f1c1 0108 	rsb	r1, r1, #8
 800b70c:	4628      	mov	r0, r5
 800b70e:	f00e fe23 	bl	801a358 <mp_rshb>
   NEW_MP_INT_SIZE(w, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b712:	2068      	movs	r0, #104	; 0x68
 800b714:	f00f fc44 	bl	801afa0 <malloc>
 800b718:	4680      	mov	r8, r0
 800b71a:	b300      	cbz	r0, 800b75e <wc_ecc_verify_hash_ex+0x1fc>
 800b71c:	2268      	movs	r2, #104	; 0x68
 800b71e:	2100      	movs	r1, #0
 800b720:	f00f fc86 	bl	801b030 <memset>
   if (err == MP_OKAY) {
 800b724:	b1f4      	cbz	r4, 800b764 <wc_ecc_verify_hash_ex+0x202>
   wc_ecc_del_point_ex(mG, key->heap);
 800b726:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b728:	f7fd fdd1 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
   wc_ecc_del_point_ex(mQ, key->heap);
 800b72c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b72e:	f7fd fdce 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
   mp_clear(e);
 800b732:	4628      	mov	r0, r5
 800b734:	f00d fda3 	bl	801927e <mp_clear>
   mp_clear(w);
 800b738:	4640      	mov	r0, r8
 800b73a:	f00d fda0 	bl	801927e <mp_clear>
   FREE_MP_INT_SIZE(w, key->heap, DYNAMIC_TYPE_ECC);
 800b73e:	f1b8 0f00 	cmp.w	r8, #0
 800b742:	d002      	beq.n	800b74a <wc_ecc_verify_hash_ex+0x1e8>
 800b744:	4640      	mov	r0, r8
 800b746:	f00f fc33 	bl	801afb0 <free>
   FREE_MP_INT_SIZE(e_lcl, key->heap, DYNAMIC_TYPE_ECC);
 800b74a:	4628      	mov	r0, r5
 800b74c:	f00f fc30 	bl	801afb0 <free>
   wc_ecc_curve_free(curve);
 800b750:	9808      	ldr	r0, [sp, #32]
 800b752:	f7fe f9b9 	bl	8009ac8 <wc_ecc_curve_free>
   FREE_CURVE_SPECS();
 800b756:	9805      	ldr	r0, [sp, #20]
        FREE_CURVE_SPECS();
 800b758:	f00f fc2a 	bl	801afb0 <free>
 800b75c:	e717      	b.n	800b58e <wc_ecc_verify_hash_ex+0x2c>
       err = MEMORY_E;
 800b75e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800b762:	e7e0      	b.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = INIT_MP_INT_SIZE(w, ECC_KEY_MAX_BITS(key));
 800b764:	4640      	mov	r0, r8
 800b766:	f00d fd75 	bl	8019254 <mp_init>
   if (err == MP_OKAY) {
 800b76a:	4604      	mov	r4, r0
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d1da      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = wc_ecc_new_point_ex(&mG, key->heap);
 800b770:	a809      	add	r0, sp, #36	; 0x24
 800b772:	f7fd fd85 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
   if (err == MP_OKAY) {
 800b776:	4604      	mov	r4, r0
 800b778:	2800      	cmp	r0, #0
 800b77a:	d1d4      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = wc_ecc_new_point_ex(&mQ, key->heap);
 800b77c:	4658      	mov	r0, fp
 800b77e:	f7fd fd7f 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
   if (err == MP_OKAY)
 800b782:	4604      	mov	r4, r0
 800b784:	2800      	cmp	r0, #0
 800b786:	d1ce      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_invmod(s, curve->order, w);
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	4642      	mov	r2, r8
 800b78c:	4650      	mov	r0, sl
 800b78e:	f00e fb8f 	bl	8019eb0 <mp_invmod>
   if (err == MP_OKAY)
 800b792:	4604      	mov	r4, r0
 800b794:	2800      	cmp	r0, #0
 800b796:	d1c6      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mulmod(e, w, curve->order, u1);
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	462b      	mov	r3, r5
 800b79c:	4641      	mov	r1, r8
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f00e f925 	bl	80199ee <mp_mulmod>
   if (err == MP_OKAY)
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d1bd      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mulmod(r, w, curve->order, u2);
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4643      	mov	r3, r8
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	4648      	mov	r0, r9
 800b7b2:	f00e f91c 	bl	80199ee <mp_mulmod>
   if (err == MP_OKAY)
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d1b4      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(curve->Gx, mG->x);
 800b7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7be:	6938      	ldr	r0, [r7, #16]
 800b7c0:	f00e fdbc 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d1ad      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(curve->Gy, mG->y);
 800b7ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7cc:	6978      	ldr	r0, [r7, #20]
 800b7ce:	3168      	adds	r1, #104	; 0x68
 800b7d0:	f00e fdb4 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d1a5      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_set(mG->z, 1);
 800b7da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7dc:	2101      	movs	r1, #1
 800b7de:	30d0      	adds	r0, #208	; 0xd0
 800b7e0:	f00e fe7a 	bl	801a4d8 <mp_set>
   if (err == MP_OKAY)
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d19d      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.x, mQ->x);
 800b7ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b7ec:	f106 0018 	add.w	r0, r6, #24
 800b7f0:	f00e fda4 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d195      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.y, mQ->y);
 800b7fa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b7fc:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800b800:	3168      	adds	r1, #104	; 0x68
 800b802:	f00e fd9b 	bl	801a33c <mp_copy>
   if (err == MP_OKAY)
 800b806:	4604      	mov	r4, r0
 800b808:	2800      	cmp	r0, #0
 800b80a:	d18c      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_copy(key->pubkey.z, mQ->z);
 800b80c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b80e:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
 800b812:	31d0      	adds	r1, #208	; 0xd0
 800b814:	f00e fd92 	bl	801a33c <mp_copy>
    if (err == MP_OKAY) {
 800b818:	4604      	mov	r4, r0
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d183      	bne.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>
        err = ecc_mul2add(mG, u1, mQ, u2, mG, curve->Af, curve->prime,
 800b81e:	6973      	ldr	r3, [r6, #20]
 800b820:	9303      	str	r3, [sp, #12]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	9302      	str	r3, [sp, #8]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b82a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b82c:	e9cd 0300 	strd	r0, r3, [sp]
 800b830:	4629      	mov	r1, r5
 800b832:	4643      	mov	r3, r8
 800b834:	f7ff fc8f 	bl	800b156 <ecc_mul2add>
   if (err == MP_OKAY)
 800b838:	4604      	mov	r4, r0
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f47f af73 	bne.w	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       err = mp_mod(mG->x, curve->order, v);
 800b840:	68f9      	ldr	r1, [r7, #12]
 800b842:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b844:	4642      	mov	r2, r8
 800b846:	f00e f8f9 	bl	8019a3c <mp_mod>
   if (err == MP_OKAY) {
 800b84a:	4604      	mov	r4, r0
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f47f af6a 	bne.w	800b726 <wc_ecc_verify_hash_ex+0x1c4>
       if (mp_cmp(v, r) == MP_EQ)
 800b852:	4649      	mov	r1, r9
 800b854:	4640      	mov	r0, r8
 800b856:	f00d fd42 	bl	80192de <mp_cmp>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f47f af63 	bne.w	800b726 <wc_ecc_verify_hash_ex+0x1c4>
           *res = 1;
 800b860:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800b862:	2301      	movs	r3, #1
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	e75e      	b.n	800b726 <wc_ecc_verify_hash_ex+0x1c4>

0800b868 <wc_ecc_verify_hash>:
{
 800b868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b86e:	468b      	mov	fp, r1
 800b870:	4617      	mov	r7, r2
 800b872:	4699      	mov	r9, r3
    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
 800b874:	4680      	mov	r8, r0
 800b876:	2800      	cmp	r0, #0
 800b878:	d078      	beq.n	800b96c <wc_ecc_verify_hash+0x104>
 800b87a:	2a00      	cmp	r2, #0
 800b87c:	d076      	beq.n	800b96c <wc_ecc_verify_hash+0x104>
 800b87e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b880:	2b00      	cmp	r3, #0
 800b882:	d073      	beq.n	800b96c <wc_ecc_verify_hash+0x104>
 800b884:	2e00      	cmp	r6, #0
 800b886:	d071      	beq.n	800b96c <wc_ecc_verify_hash+0x104>
    NEW_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b888:	2068      	movs	r0, #104	; 0x68
 800b88a:	f00f fb89 	bl	801afa0 <malloc>
 800b88e:	4604      	mov	r4, r0
 800b890:	2800      	cmp	r0, #0
 800b892:	d071      	beq.n	800b978 <wc_ecc_verify_hash+0x110>
 800b894:	2268      	movs	r2, #104	; 0x68
 800b896:	2100      	movs	r1, #0
 800b898:	f00f fbca 	bl	801b030 <memset>
    NEW_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key), key->heap, DYNAMIC_TYPE_ECC);
 800b89c:	2068      	movs	r0, #104	; 0x68
 800b89e:	f00f fb7f 	bl	801afa0 <malloc>
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d064      	beq.n	800b972 <wc_ecc_verify_hash+0x10a>
 800b8a8:	2268      	movs	r2, #104	; 0x68
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	f00f fbc0 	bl	801b030 <memset>
    err = INIT_MP_INT_SIZE(r, ECC_KEY_MAX_BITS(key));
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f00d fccf 	bl	8019254 <mp_init>
    if (err != 0) {
 800b8b6:	4682      	mov	sl, r0
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b8b8:	4628      	mov	r0, r5
    if (err != 0) {
 800b8ba:	f1ba 0f00 	cmp.w	sl, #0
 800b8be:	d008      	beq.n	800b8d2 <wc_ecc_verify_hash+0x6a>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b8c0:	f00f fb76 	bl	801afb0 <free>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f00f fb73 	bl	801afb0 <free>
}
 800b8ca:	4650      	mov	r0, sl
 800b8cc:	b003      	add	sp, #12
 800b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = INIT_MP_INT_SIZE(s, ECC_KEY_MAX_BITS(key));
 800b8d2:	f00d fcbf 	bl	8019254 <mp_init>
    if (err != 0) {
 800b8d6:	4682      	mov	sl, r0
 800b8d8:	b108      	cbz	r0, 800b8de <wc_ecc_verify_hash+0x76>
        FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b8da:	4628      	mov	r0, r5
 800b8dc:	e7f0      	b.n	800b8c0 <wc_ecc_verify_hash+0x58>
    switch (key->state) {
 800b8de:	68b3      	ldr	r3, [r6, #8]
 800b8e0:	2b07      	cmp	r3, #7
 800b8e2:	d840      	bhi.n	800b966 <wc_ecc_verify_hash+0xfe>
 800b8e4:	e8df f003 	tbb	[pc, r3]
 800b8e8:	3f3f3f04 	.word	0x3f3f3f04
 800b8ec:	3013043f 	.word	0x3013043f
            *res = 0;
 800b8f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            key->state = ECC_STATE_VERIFY_DECODE;
 800b8f2:	2305      	movs	r3, #5
 800b8f4:	60b3      	str	r3, [r6, #8]
            *res = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	6013      	str	r3, [r2, #0]
            err = DecodeECC_DSA_Sig_Ex(sig, siglen, r, s, 0);
 800b8fa:	4659      	mov	r1, fp
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	4622      	mov	r2, r4
 800b900:	462b      	mov	r3, r5
 800b902:	4640      	mov	r0, r8
 800b904:	f005 fda5 	bl	8011452 <DecodeECC_DSA_Sig_Ex>
            if (err < 0) {
 800b908:	f1b0 0a00 	subs.w	sl, r0, #0
 800b90c:	db21      	blt.n	800b952 <wc_ecc_verify_hash+0xea>
            key->state = ECC_STATE_VERIFY_DO;
 800b90e:	2306      	movs	r3, #6
 800b910:	60b3      	str	r3, [r6, #8]
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
 800b912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	463a      	mov	r2, r7
 800b918:	464b      	mov	r3, r9
 800b91a:	4629      	mov	r1, r5
 800b91c:	9601      	str	r6, [sp, #4]
 800b91e:	4620      	mov	r0, r4
 800b920:	f7ff fe1f 	bl	800b562 <wc_ecc_verify_hash_ex>
 800b924:	4682      	mov	sl, r0
            mp_clear(r);
 800b926:	4620      	mov	r0, r4
 800b928:	f00d fca9 	bl	801927e <mp_clear>
            mp_clear(s);
 800b92c:	4628      	mov	r0, r5
 800b92e:	f00d fca6 	bl	801927e <mp_clear>
            FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b932:	4628      	mov	r0, r5
 800b934:	f00f fb3c 	bl	801afb0 <free>
            FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800b938:	4620      	mov	r0, r4
 800b93a:	f00f fb39 	bl	801afb0 <free>
            if (err < 0) {
 800b93e:	f1ba 0f00 	cmp.w	sl, #0
 800b942:	db0d      	blt.n	800b960 <wc_ecc_verify_hash+0xf8>
            s = NULL;
 800b944:	2500      	movs	r5, #0
            r = NULL;
 800b946:	462c      	mov	r4, r5
            key->state = ECC_STATE_VERIFY_RES;
 800b948:	2307      	movs	r3, #7
 800b94a:	60b3      	str	r3, [r6, #8]
            err = 0;
 800b94c:	f04f 0a00 	mov.w	sl, #0
    FREE_MP_INT_SIZE(s, key->heap, DYNAMIC_TYPE_ECC);
 800b950:	b115      	cbz	r5, 800b958 <wc_ecc_verify_hash+0xf0>
 800b952:	4628      	mov	r0, r5
 800b954:	f00f fb2c 	bl	801afb0 <free>
    FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800b958:	b114      	cbz	r4, 800b960 <wc_ecc_verify_hash+0xf8>
 800b95a:	4620      	mov	r0, r4
 800b95c:	f00f fb28 	bl	801afb0 <free>
    key->state = ECC_STATE_NONE;
 800b960:	2300      	movs	r3, #0
 800b962:	60b3      	str	r3, [r6, #8]
    return err;
 800b964:	e7b1      	b.n	800b8ca <wc_ecc_verify_hash+0x62>
    switch (key->state) {
 800b966:	f06f 0abf 	mvn.w	sl, #191	; 0xbf
 800b96a:	e7f1      	b.n	800b950 <wc_ecc_verify_hash+0xe8>
        return ECC_BAD_ARG_E;
 800b96c:	f06f 0aa9 	mvn.w	sl, #169	; 0xa9
 800b970:	e7ab      	b.n	800b8ca <wc_ecc_verify_hash+0x62>
        FREE_MP_INT_SIZE(r, key->heap, DYNAMIC_TYPE_ECC);
 800b972:	4620      	mov	r0, r4
 800b974:	f00f fb1c 	bl	801afb0 <free>
        return MEMORY_E;
 800b978:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 800b97c:	e7a5      	b.n	800b8ca <wc_ecc_verify_hash+0x62>

0800b97e <wc_ecc_import_point_der_ex>:
{
 800b97e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b982:	4688      	mov	r8, r1
 800b984:	461d      	mov	r5, r3
    if (in == NULL || point == NULL || (curve_idx < 0) ||
 800b986:	4681      	mov	r9, r0
 800b988:	2800      	cmp	r0, #0
 800b98a:	d05b      	beq.n	800ba44 <wc_ecc_import_point_der_ex+0xc6>
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d059      	beq.n	800ba44 <wc_ecc_import_point_der_ex+0xc6>
 800b990:	2a00      	cmp	r2, #0
 800b992:	db57      	blt.n	800ba44 <wc_ecc_import_point_der_ex+0xc6>
        (wc_ecc_is_valid_idx(curve_idx) == 0))
 800b994:	4610      	mov	r0, r2
 800b996:	f7fe fb20 	bl	8009fda <wc_ecc_is_valid_idx>
    if (in == NULL || point == NULL || (curve_idx < 0) ||
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d052      	beq.n	800ba44 <wc_ecc_import_point_der_ex+0xc6>
    if ((inLen & 1) == 0) {
 800b99e:	f011 0f01 	tst.w	r1, #1
 800b9a2:	d04f      	beq.n	800ba44 <wc_ecc_import_point_der_ex+0xc6>
    mp_clear(point->x);
 800b9a4:	4618      	mov	r0, r3
    mp_clear(point->y);
 800b9a6:	f105 0768 	add.w	r7, r5, #104	; 0x68
    mp_clear(point->x);
 800b9aa:	f00d fc68 	bl	801927e <mp_clear>
    mp_clear(point->z);
 800b9ae:	f105 06d0 	add.w	r6, r5, #208	; 0xd0
    mp_clear(point->y);
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	f00d fc63 	bl	801927e <mp_clear>
    mp_clear(point->z);
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f00d fc60 	bl	801927e <mp_clear>
    err = mp_init_multi(point->x, point->y, point->z, NULL, NULL, NULL);
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e9cd 3300 	strd	r3, r3, [sp]
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f00d fc5d 	bl	8019288 <mp_init_multi>
    if (err != MP_OKAY)
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	bbd8      	cbnz	r0, 800ba4a <wc_ecc_import_point_der_ex+0xcc>
    pointType = in[0];
 800b9d2:	f899 3000 	ldrb.w	r3, [r9]
    if (pointType != ECC_POINT_UNCOMP && pointType != ECC_POINT_COMP_EVEN &&
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d005      	beq.n	800b9e6 <wc_ecc_import_point_der_ex+0x68>
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d003      	beq.n	800b9e6 <wc_ecc_import_point_der_ex+0x68>
        err = ASN_PARSE_E;
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	bf18      	it	ne
 800b9e2:	f06f 048b 	mvnne.w	r4, #139	; 0x8b
    if (pointType == ECC_POINT_COMP_EVEN || pointType == ECC_POINT_COMP_ODD) {
 800b9e6:	3b02      	subs	r3, #2
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d928      	bls.n	800ba3e <wc_ecc_import_point_der_ex+0xc0>
    if (err == MP_OKAY)
 800b9ec:	b9d4      	cbnz	r4, 800ba24 <wc_ecc_import_point_der_ex+0xa6>
    inLen -= 1;
 800b9ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    in += 1;
 800b9f2:	f109 0901 	add.w	r9, r9, #1
    keysize = (int)(inLen>>1);
 800b9f6:	ea4f 0858 	mov.w	r8, r8, lsr #1
        err = mp_read_unsigned_bin(point->x, in, (word32)keysize);
 800b9fa:	4642      	mov	r2, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f00d fc73 	bl	80192ea <mp_read_unsigned_bin>
    if (err == MP_OKAY) {
 800ba04:	4604      	mov	r4, r0
 800ba06:	b968      	cbnz	r0, 800ba24 <wc_ecc_import_point_der_ex+0xa6>
            err = mp_read_unsigned_bin(point->y, in + keysize, (word32)keysize);
 800ba08:	4642      	mov	r2, r8
 800ba0a:	eb09 0108 	add.w	r1, r9, r8
 800ba0e:	4638      	mov	r0, r7
 800ba10:	f00d fc6b 	bl	80192ea <mp_read_unsigned_bin>
    if (err == MP_OKAY)
 800ba14:	4604      	mov	r4, r0
 800ba16:	b928      	cbnz	r0, 800ba24 <wc_ecc_import_point_der_ex+0xa6>
        err = mp_set(point->z, 1);
 800ba18:	2101      	movs	r1, #1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f00e fd5c 	bl	801a4d8 <mp_set>
    if (err != MP_OKAY) {
 800ba20:	4604      	mov	r4, r0
 800ba22:	b140      	cbz	r0, 800ba36 <wc_ecc_import_point_der_ex+0xb8>
        mp_clear(point->x);
 800ba24:	4628      	mov	r0, r5
 800ba26:	f00d fc2a 	bl	801927e <mp_clear>
        mp_clear(point->y);
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f00d fc27 	bl	801927e <mp_clear>
        mp_clear(point->z);
 800ba30:	4630      	mov	r0, r6
 800ba32:	f00d fc24 	bl	801927e <mp_clear>
}
 800ba36:	4620      	mov	r0, r4
 800ba38:	b003      	add	sp, #12
 800ba3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = NOT_COMPILED_IN;
 800ba3e:	f06f 04ad 	mvn.w	r4, #173	; 0xad
 800ba42:	e7ef      	b.n	800ba24 <wc_ecc_import_point_der_ex+0xa6>
        return ECC_BAD_ARG_E;
 800ba44:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800ba48:	e7f5      	b.n	800ba36 <wc_ecc_import_point_der_ex+0xb8>
        return MEMORY_E;
 800ba4a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800ba4e:	e7f2      	b.n	800ba36 <wc_ecc_import_point_der_ex+0xb8>

0800ba50 <wc_ecc_import_point_der>:
{
 800ba50:	b513      	push	{r0, r1, r4, lr}
    return wc_ecc_import_point_der_ex(in, inLen, curve_idx, point, 1);
 800ba52:	2401      	movs	r4, #1
 800ba54:	9400      	str	r4, [sp, #0]
 800ba56:	f7ff ff92 	bl	800b97e <wc_ecc_import_point_der_ex>
}
 800ba5a:	b002      	add	sp, #8
 800ba5c:	bd10      	pop	{r4, pc}
	...

0800ba60 <wc_ecc_export_point_der>:
{
 800ba60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba64:	461f      	mov	r7, r3
    if ((curve_idx < 0) || (wc_ecc_is_valid_idx(curve_idx) == 0))
 800ba66:	1e03      	subs	r3, r0, #0
{
 800ba68:	460d      	mov	r5, r1
 800ba6a:	4690      	mov	r8, r2
    if ((curve_idx < 0) || (wc_ecc_is_valid_idx(curve_idx) == 0))
 800ba6c:	da04      	bge.n	800ba78 <wc_ecc_export_point_der+0x18>
        return ECC_BAD_ARG_E;
 800ba6e:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
}
 800ba72:	4628      	mov	r0, r5
 800ba74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((curve_idx < 0) || (wc_ecc_is_valid_idx(curve_idx) == 0))
 800ba78:	f7fe faaf 	bl	8009fda <wc_ecc_is_valid_idx>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0f6      	beq.n	800ba6e <wc_ecc_export_point_der+0xe>
    if (point != NULL && out == NULL && outLen != NULL) {
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d0f4      	beq.n	800ba6e <wc_ecc_export_point_der+0xe>
    numlen = (word32)ecc_sets[curve_idx].size;
 800ba84:	2034      	movs	r0, #52	; 0x34
 800ba86:	4358      	muls	r0, r3
 800ba88:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <wc_ecc_export_point_der+0xec>)
 800ba8a:	581c      	ldr	r4, [r3, r0]
    if (point != NULL && out == NULL && outLen != NULL) {
 800ba8c:	b93a      	cbnz	r2, 800ba9e <wc_ecc_export_point_der+0x3e>
 800ba8e:	2f00      	cmp	r7, #0
 800ba90:	d0ed      	beq.n	800ba6e <wc_ecc_export_point_der+0xe>
        *outLen = 1 + 2*numlen;
 800ba92:	0064      	lsls	r4, r4, #1
 800ba94:	3401      	adds	r4, #1
 800ba96:	603c      	str	r4, [r7, #0]
        return LENGTH_ONLY_E;
 800ba98:	f06f 05c9 	mvn.w	r5, #201	; 0xc9
 800ba9c:	e7e9      	b.n	800ba72 <wc_ecc_export_point_der+0x12>
    if (point == NULL || out == NULL || outLen == NULL)
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	d0e5      	beq.n	800ba6e <wc_ecc_export_point_der+0xe>
    if (*outLen < (1 + 2*numlen)) {
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800baa8:	f109 0901 	add.w	r9, r9, #1
 800baac:	454b      	cmp	r3, r9
 800baae:	d204      	bcs.n	800baba <wc_ecc_export_point_der+0x5a>
        *outLen = 1 + 2*numlen;
 800bab0:	f8c7 9000 	str.w	r9, [r7]
        return BUFFER_E;
 800bab4:	f06f 0583 	mvn.w	r5, #131	; 0x83
 800bab8:	e7db      	b.n	800ba72 <wc_ecc_export_point_der+0x12>
    if (((word32)mp_unsigned_bin_size(point->x) > numlen) ||
 800baba:	4608      	mov	r0, r1
 800babc:	f00d fc13 	bl	80192e6 <mp_unsigned_bin_size>
 800bac0:	42a0      	cmp	r0, r4
 800bac2:	d8d4      	bhi.n	800ba6e <wc_ecc_export_point_der+0xe>
        ((word32)mp_unsigned_bin_size(point->y) > numlen)) {
 800bac4:	f105 0a68 	add.w	sl, r5, #104	; 0x68
 800bac8:	4650      	mov	r0, sl
 800baca:	f00d fc0c 	bl	80192e6 <mp_unsigned_bin_size>
    if (((word32)mp_unsigned_bin_size(point->x) > numlen) ||
 800bace:	42a0      	cmp	r0, r4
 800bad0:	d8cd      	bhi.n	800ba6e <wc_ecc_export_point_der+0xe>
    out[0] = ECC_POINT_UNCOMP;
 800bad2:	2304      	movs	r3, #4
 800bad4:	f888 3000 	strb.w	r3, [r8]
    buf = (byte*)XMALLOC(ECC_BUFSIZE, NULL, DYNAMIC_TYPE_ECC_BUFFER);
 800bad8:	f240 1001 	movw	r0, #257	; 0x101
 800badc:	f00f fa60 	bl	801afa0 <malloc>
    if (buf == NULL)
 800bae0:	4606      	mov	r6, r0
 800bae2:	b380      	cbz	r0, 800bb46 <wc_ecc_export_point_der+0xe6>
    XMEMSET(buf, 0, ECC_BUFSIZE);
 800bae4:	f240 1201 	movw	r2, #257	; 0x101
 800bae8:	2100      	movs	r1, #0
 800baea:	f00f faa1 	bl	801b030 <memset>
        (numlen - (word32)mp_unsigned_bin_size(point->x)));
 800baee:	4628      	mov	r0, r5
 800baf0:	f00d fbf9 	bl	80192e6 <mp_unsigned_bin_size>
 800baf4:	1a21      	subs	r1, r4, r0
    ret = mp_to_unsigned_bin(point->x, buf +
 800baf6:	4431      	add	r1, r6
 800baf8:	4628      	mov	r0, r5
 800bafa:	f00e fc1d 	bl	801a338 <mp_to_unsigned_bin>
    if (ret != MP_OKAY)
 800bafe:	4605      	mov	r5, r0
 800bb00:	b9e8      	cbnz	r0, 800bb3e <wc_ecc_export_point_der+0xde>
    XMEMCPY(out+1, buf, numlen);
 800bb02:	4622      	mov	r2, r4
 800bb04:	4631      	mov	r1, r6
 800bb06:	f108 0001 	add.w	r0, r8, #1
 800bb0a:	f00f fa69 	bl	801afe0 <memcpy>
    XMEMSET(buf, 0, ECC_BUFSIZE);
 800bb0e:	f240 1201 	movw	r2, #257	; 0x101
 800bb12:	2100      	movs	r1, #0
 800bb14:	4630      	mov	r0, r6
 800bb16:	f00f fa8b 	bl	801b030 <memset>
        (numlen - (word32)mp_unsigned_bin_size(point->y)));
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	f00d fbe3 	bl	80192e6 <mp_unsigned_bin_size>
 800bb20:	1a21      	subs	r1, r4, r0
    ret = mp_to_unsigned_bin(point->y, buf +
 800bb22:	4431      	add	r1, r6
 800bb24:	4650      	mov	r0, sl
 800bb26:	f00e fc07 	bl	801a338 <mp_to_unsigned_bin>
    if (ret != MP_OKAY)
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	b938      	cbnz	r0, 800bb3e <wc_ecc_export_point_der+0xde>
    XMEMCPY(out+1+numlen, buf, numlen);
 800bb2e:	1c60      	adds	r0, r4, #1
 800bb30:	4622      	mov	r2, r4
 800bb32:	4631      	mov	r1, r6
 800bb34:	4440      	add	r0, r8
 800bb36:	f00f fa53 	bl	801afe0 <memcpy>
    *outLen = 1 + 2*numlen;
 800bb3a:	f8c7 9000 	str.w	r9, [r7]
    XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f00f fa36 	bl	801afb0 <free>
    return ret;
 800bb44:	e795      	b.n	800ba72 <wc_ecc_export_point_der+0x12>
        return MEMORY_E;
 800bb46:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 800bb4a:	e792      	b.n	800ba72 <wc_ecc_export_point_der+0x12>
 800bb4c:	080226cc 	.word	0x080226cc

0800bb50 <wc_ecc_export_x963>:
{
 800bb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	4688      	mov	r8, r1
 800bb56:	4616      	mov	r6, r2
   if (key != NULL && out == NULL && outLen != NULL) {
 800bb58:	4604      	mov	r4, r0
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d074      	beq.n	800bc48 <wc_ecc_export_x963+0xf8>
 800bb5e:	b979      	cbnz	r1, 800bb80 <wc_ecc_export_x963+0x30>
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	d071      	beq.n	800bc48 <wc_ecc_export_x963+0xf8>
      numlen = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 800bb64:	6903      	ldr	r3, [r0, #16]
 800bb66:	b14b      	cbz	r3, 800bb7c <wc_ecc_export_x963+0x2c>
 800bb68:	681b      	ldr	r3, [r3, #0]
      *outLen = 1 + 2 * numlen;
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	6033      	str	r3, [r6, #0]
      return LENGTH_ONLY_E;
 800bb70:	f06f 09c9 	mvn.w	r9, #201	; 0xc9
}
 800bb74:	4648      	mov	r0, r9
 800bb76:	b003      	add	sp, #12
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      numlen = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 800bb7c:	2320      	movs	r3, #32
 800bb7e:	e7f4      	b.n	800bb6a <wc_ecc_export_x963+0x1a>
   if (key == NULL || out == NULL || outLen == NULL)
 800bb80:	2a00      	cmp	r2, #0
 800bb82:	d061      	beq.n	800bc48 <wc_ecc_export_x963+0xf8>
   if (key->type == ECC_PRIVATEKEY_ONLY)
 800bb84:	6803      	ldr	r3, [r0, #0]
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d05b      	beq.n	800bc42 <wc_ecc_export_x963+0xf2>
   if (key->type == 0 || wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL){
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d05c      	beq.n	800bc48 <wc_ecc_export_x963+0xf8>
 800bb8e:	6840      	ldr	r0, [r0, #4]
 800bb90:	f7fe fa23 	bl	8009fda <wc_ecc_is_valid_idx>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d057      	beq.n	800bc48 <wc_ecc_export_x963+0xf8>
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d054      	beq.n	800bc48 <wc_ecc_export_x963+0xf8>
   numlen = (word32)key->dp->size;
 800bb9e:	681f      	ldr	r7, [r3, #0]
   if (*outLen < (1 + 2*numlen)) {
 800bba0:	6813      	ldr	r3, [r2, #0]
 800bba2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800bba6:	f10a 0a01 	add.w	sl, sl, #1
 800bbaa:	4553      	cmp	r3, sl
 800bbac:	d204      	bcs.n	800bbb8 <wc_ecc_export_x963+0x68>
      *outLen = 1 + 2*numlen;
 800bbae:	f8c2 a000 	str.w	sl, [r2]
      return BUFFER_E;
 800bbb2:	f06f 0983 	mvn.w	r9, #131	; 0x83
 800bbb6:	e7dd      	b.n	800bb74 <wc_ecc_export_x963+0x24>
   pubxlen = (word32)mp_unsigned_bin_size(key->pubkey.x);
 800bbb8:	f104 0b18 	add.w	fp, r4, #24
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	f00d fb92 	bl	80192e6 <mp_unsigned_bin_size>
   pubylen = (word32)mp_unsigned_bin_size(key->pubkey.y);
 800bbc2:	3480      	adds	r4, #128	; 0x80
   pubxlen = (word32)mp_unsigned_bin_size(key->pubkey.x);
 800bbc4:	4681      	mov	r9, r0
   pubylen = (word32)mp_unsigned_bin_size(key->pubkey.y);
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f00d fb8d 	bl	80192e6 <mp_unsigned_bin_size>
   if ((pubxlen > numlen) || (pubylen > numlen)) {
 800bbcc:	454f      	cmp	r7, r9
   pubylen = (word32)mp_unsigned_bin_size(key->pubkey.y);
 800bbce:	9001      	str	r0, [sp, #4]
   if ((pubxlen > numlen) || (pubylen > numlen)) {
 800bbd0:	d3ef      	bcc.n	800bbb2 <wc_ecc_export_x963+0x62>
 800bbd2:	4287      	cmp	r7, r0
 800bbd4:	d3ed      	bcc.n	800bbb2 <wc_ecc_export_x963+0x62>
   out[0] = ECC_POINT_UNCOMP;
 800bbd6:	2304      	movs	r3, #4
 800bbd8:	f888 3000 	strb.w	r3, [r8]
   buf = (byte*)XMALLOC(ECC_BUFSIZE, NULL, DYNAMIC_TYPE_ECC_BUFFER);
 800bbdc:	f240 1001 	movw	r0, #257	; 0x101
 800bbe0:	f00f f9de 	bl	801afa0 <malloc>
   if (buf == NULL)
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	b390      	cbz	r0, 800bc4e <wc_ecc_export_x963+0xfe>
   XMEMSET(buf, 0, ECC_BUFSIZE);
 800bbe8:	f240 1201 	movw	r2, #257	; 0x101
 800bbec:	2100      	movs	r1, #0
 800bbee:	f00f fa1f 	bl	801b030 <memset>
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
 800bbf2:	eba7 0109 	sub.w	r1, r7, r9
 800bbf6:	4429      	add	r1, r5
 800bbf8:	4658      	mov	r0, fp
 800bbfa:	f00e fb9d 	bl	801a338 <mp_to_unsigned_bin>
   if (ret != MP_OKAY)
 800bbfe:	4681      	mov	r9, r0
 800bc00:	b9d8      	cbnz	r0, 800bc3a <wc_ecc_export_x963+0xea>
   XMEMCPY(out+1, buf, numlen);
 800bc02:	463a      	mov	r2, r7
 800bc04:	4629      	mov	r1, r5
 800bc06:	f108 0001 	add.w	r0, r8, #1
 800bc0a:	f00f f9e9 	bl	801afe0 <memcpy>
   XMEMSET(buf, 0, ECC_BUFSIZE);
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f240 1201 	movw	r2, #257	; 0x101
 800bc14:	4628      	mov	r0, r5
 800bc16:	f00f fa0b 	bl	801b030 <memset>
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	1af9      	subs	r1, r7, r3
 800bc1e:	4429      	add	r1, r5
 800bc20:	4620      	mov	r0, r4
 800bc22:	f00e fb89 	bl	801a338 <mp_to_unsigned_bin>
   if (ret != MP_OKAY)
 800bc26:	4681      	mov	r9, r0
 800bc28:	b938      	cbnz	r0, 800bc3a <wc_ecc_export_x963+0xea>
   XMEMCPY(out+1+numlen, buf, numlen);
 800bc2a:	1c78      	adds	r0, r7, #1
 800bc2c:	463a      	mov	r2, r7
 800bc2e:	4629      	mov	r1, r5
 800bc30:	4440      	add	r0, r8
 800bc32:	f00f f9d5 	bl	801afe0 <memcpy>
   *outLen = 1 + 2*numlen;
 800bc36:	f8c6 a000 	str.w	sl, [r6]
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f00f f9b8 	bl	801afb0 <free>
   return ret;
 800bc40:	e798      	b.n	800bb74 <wc_ecc_export_x963+0x24>
       return ECC_PRIVATEONLY_E;
 800bc42:	f06f 09f5 	mvn.w	r9, #245	; 0xf5
 800bc46:	e795      	b.n	800bb74 <wc_ecc_export_x963+0x24>
      return ECC_BAD_ARG_E;
 800bc48:	f06f 09a9 	mvn.w	r9, #169	; 0xa9
 800bc4c:	e792      	b.n	800bb74 <wc_ecc_export_x963+0x24>
      return MEMORY_E;
 800bc4e:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 800bc52:	e78f      	b.n	800bb74 <wc_ecc_export_x963+0x24>

0800bc54 <wc_ecc_export_x963_ex>:
    if (compressed == 0)
 800bc54:	b90b      	cbnz	r3, 800bc5a <wc_ecc_export_x963_ex+0x6>
        return wc_ecc_export_x963(key, out, outLen);
 800bc56:	f7ff bf7b 	b.w	800bb50 <wc_ecc_export_x963>
}
 800bc5a:	f06f 00ad 	mvn.w	r0, #173	; 0xad
 800bc5e:	4770      	bx	lr

0800bc60 <wc_ecc_check_key>:
{
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	b093      	sub	sp, #76	; 0x4c
        DECLARE_CURVE_SPECS(3);
 800bc66:	2228      	movs	r2, #40	; 0x28
{
 800bc68:	4604      	mov	r4, r0
        DECLARE_CURVE_SPECS(3);
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	a808      	add	r0, sp, #32
 800bc6e:	9006      	str	r0, [sp, #24]
 800bc70:	f00f f9de 	bl	801b030 <memset>
 800bc74:	9b06      	ldr	r3, [sp, #24]
 800bc76:	2203      	movs	r2, #3
 800bc78:	61da      	str	r2, [r3, #28]
    if (key == NULL)
 800bc7a:	2c00      	cmp	r4, #0
 800bc7c:	f000 80d3 	beq.w	800be26 <wc_ecc_check_key+0x1c6>
        ALLOC_CURVE_SPECS(3, err);
 800bc80:	f44f 709c 	mov.w	r0, #312	; 0x138
 800bc84:	f00f f98c 	bl	801afa0 <malloc>
 800bc88:	4605      	mov	r5, r0
 800bc8a:	b178      	cbz	r0, 800bcac <wc_ecc_check_key+0x4c>
 800bc8c:	9b06      	ldr	r3, [sp, #24]
    int err = MP_OKAY;
 800bc8e:	f04f 0a00 	mov.w	sl, #0
        ALLOC_CURVE_SPECS(3, err);
 800bc92:	6198      	str	r0, [r3, #24]
            b = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_ECC);
 800bc94:	2068      	movs	r0, #104	; 0x68
 800bc96:	f00f f983 	bl	801afa0 <malloc>
            if (b == NULL) {
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	b948      	cbnz	r0, 800bcb2 <wc_ecc_check_key+0x52>
                FREE_CURVE_SPECS();
 800bc9e:	b115      	cbz	r5, 800bca6 <wc_ecc_check_key+0x46>
 800bca0:	4628      	mov	r0, r5
 800bca2:	f00f f985 	bl	801afb0 <free>
                return MEMORY_E;
 800bca6:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 800bcaa:	e043      	b.n	800bd34 <wc_ecc_check_key+0xd4>
        ALLOC_CURVE_SPECS(3, err);
 800bcac:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 800bcb0:	e7f0      	b.n	800bc94 <wc_ecc_check_key+0x34>
        XMEMSET(b, 0, sizeof(mp_int));
 800bcb2:	2268      	movs	r2, #104	; 0x68
 800bcb4:	2100      	movs	r1, #0
    if (wc_ecc_point_is_at_infinity(&key->pubkey)) {
 800bcb6:	f104 0718 	add.w	r7, r4, #24
        XMEMSET(b, 0, sizeof(mp_int));
 800bcba:	f00f f9b9 	bl	801b030 <memset>
    if (wc_ecc_point_is_at_infinity(&key->pubkey)) {
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f7fe f9b6 	bl	800a030 <wc_ecc_point_is_at_infinity>
 800bcc4:	b148      	cbz	r0, 800bcda <wc_ecc_check_key+0x7a>
        XFREE(b, key->heap, DYNAMIC_TYPE_ECC);
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f00f f972 	bl	801afb0 <free>
        FREE_CURVE_SPECS();
 800bccc:	b115      	cbz	r5, 800bcd4 <wc_ecc_check_key+0x74>
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f00f f96e 	bl	801afb0 <free>
        return ECC_INF_E;
 800bcd4:	f06f 0ad6 	mvn.w	sl, #214	; 0xd6
    return ret;
 800bcd8:	e02c      	b.n	800bd34 <wc_ecc_check_key+0xd4>
    if (err == MP_OKAY)
 800bcda:	f1ba 0f00 	cmp.w	sl, #0
 800bcde:	d11c      	bne.n	800bd1a <wc_ecc_check_key+0xba>
        err = wc_ecc_curve_load(key->dp, &curve, (ECC_CURVE_FIELD_PRIME |
 800bce0:	6920      	ldr	r0, [r4, #16]
 800bce2:	220b      	movs	r2, #11
 800bce4:	a906      	add	r1, sp, #24
 800bce6:	f7fd ff37 	bl	8009b58 <wc_ecc_curve_load>
    if (err == MP_OKAY)
 800bcea:	4682      	mov	sl, r0
 800bcec:	b9a8      	cbnz	r0, 800bd1a <wc_ecc_check_key+0xba>
        err = mp_init(b);
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f00d fab0 	bl	8019254 <mp_init>
    if (err == MP_OKAY)
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	b980      	cbnz	r0, 800bd1a <wc_ecc_check_key+0xba>
        err = mp_read_radix(b, key->dp->Bf, MP_RADIX_HEX);
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	2210      	movs	r2, #16
 800bcfc:	6959      	ldr	r1, [r3, #20]
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f00e fb4e 	bl	801a3a0 <mp_read_radix>
    if (err == MP_OKAY) {
 800bd04:	4682      	mov	sl, r0
 800bd06:	b940      	cbnz	r0, 800bd1a <wc_ecc_check_key+0xba>
        if ((mp_cmp(key->pubkey.x, curve->prime) != MP_LT) ||
 800bd08:	9b06      	ldr	r3, [sp, #24]
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	6859      	ldr	r1, [r3, #4]
 800bd0e:	f00d fae6 	bl	80192de <mp_cmp>
 800bd12:	3001      	adds	r0, #1
 800bd14:	d012      	beq.n	800bd3c <wc_ecc_check_key+0xdc>
            err = ECC_OUT_OF_RANGE_E;
 800bd16:	f06f 0ad8 	mvn.w	sl, #216	; 0xd8
    wc_ecc_curve_free(curve);
 800bd1a:	9806      	ldr	r0, [sp, #24]
 800bd1c:	f7fd fed4 	bl	8009ac8 <wc_ecc_curve_free>
    mp_clear(b);
 800bd20:	4630      	mov	r0, r6
 800bd22:	f00d faac 	bl	801927e <mp_clear>
        XFREE(b, key->heap, DYNAMIC_TYPE_ECC);
 800bd26:	4630      	mov	r0, r6
 800bd28:	f00f f942 	bl	801afb0 <free>
    FREE_CURVE_SPECS();
 800bd2c:	b115      	cbz	r5, 800bd34 <wc_ecc_check_key+0xd4>
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f00f f93e 	bl	801afb0 <free>
}
 800bd34:	4650      	mov	r0, sl
 800bd36:	b013      	add	sp, #76	; 0x4c
 800bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((mp_cmp(key->pubkey.x, curve->prime) != MP_LT) ||
 800bd3c:	69e2      	ldr	r2, [r4, #28]
        if ((mp_cmp(key->pubkey.y, curve->prime) != MP_LT) ||
 800bd3e:	9b06      	ldr	r3, [sp, #24]
        if ((mp_cmp(key->pubkey.x, curve->prime) != MP_LT) ||
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	d1e8      	bne.n	800bd16 <wc_ecc_check_key+0xb6>
        if ((mp_cmp(key->pubkey.y, curve->prime) != MP_LT) ||
 800bd44:	f104 0980 	add.w	r9, r4, #128	; 0x80
 800bd48:	6859      	ldr	r1, [r3, #4]
 800bd4a:	4648      	mov	r0, r9
 800bd4c:	f00d fac7 	bl	80192de <mp_cmp>
 800bd50:	3001      	adds	r0, #1
 800bd52:	d1e0      	bne.n	800bd16 <wc_ecc_check_key+0xb6>
 800bd54:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        err = _ecc_is_point(&key->pubkey, curve->Af, b, curve->prime);
 800bd58:	9b06      	ldr	r3, [sp, #24]
        if ((mp_cmp(key->pubkey.y, curve->prime) != MP_LT) ||
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	d1db      	bne.n	800bd16 <wc_ecc_check_key+0xb6>
        err = _ecc_is_point(&key->pubkey, curve->Af, b, curve->prime);
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	4631      	mov	r1, r6
 800bd62:	4638      	mov	r0, r7
 800bd64:	f7fd f9fa 	bl	800915c <_ecc_is_point.constprop.0>
        if (err == MP_OKAY)
 800bd68:	4682      	mov	sl, r0
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d1d5      	bne.n	800bd1a <wc_ecc_check_key+0xba>
            err = ecc_check_pubkey_order(key, &key->pubkey, curve->Af,
 800bd6e:	9a06      	ldr	r2, [sp, #24]
    ecc_point* inf = NULL;
 800bd70:	9007      	str	r0, [sp, #28]
            err = ecc_check_pubkey_order(key, &key->pubkey, curve->Af,
 800bd72:	68d3      	ldr	r3, [r2, #12]
 800bd74:	9305      	str	r3, [sp, #20]
   if (mp_count_bits(pubkey->x) > mp_count_bits(prime) ||
 800bd76:	4638      	mov	r0, r7
            err = ecc_check_pubkey_order(key, &key->pubkey, curve->Af,
 800bd78:	e9d2 8b01 	ldrd	r8, fp, [r2, #4]
   if (mp_count_bits(pubkey->x) > mp_count_bits(prime) ||
 800bd7c:	f00e fae8 	bl	801a350 <mp_count_bits>
 800bd80:	4682      	mov	sl, r0
 800bd82:	4640      	mov	r0, r8
 800bd84:	f00e fae4 	bl	801a350 <mp_count_bits>
 800bd88:	4582      	cmp	sl, r0
 800bd8a:	dd02      	ble.n	800bd92 <wc_ecc_check_key+0x132>
       return IS_POINT_E;
 800bd8c:	f06f 0ad5 	mvn.w	sl, #213	; 0xd5
 800bd90:	e7c3      	b.n	800bd1a <wc_ecc_check_key+0xba>
       mp_count_bits(pubkey->y) > mp_count_bits(prime) ||
 800bd92:	4648      	mov	r0, r9
 800bd94:	f00e fadc 	bl	801a350 <mp_count_bits>
 800bd98:	4681      	mov	r9, r0
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	f00e fad8 	bl	801a350 <mp_count_bits>
   if (mp_count_bits(pubkey->x) > mp_count_bits(prime) ||
 800bda0:	4581      	cmp	r9, r0
 800bda2:	dcf3      	bgt.n	800bd8c <wc_ecc_check_key+0x12c>
       mp_count_bits(pubkey->z) > mp_count_bits(prime)) {
 800bda4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800bda8:	f00e fad2 	bl	801a350 <mp_count_bits>
 800bdac:	4681      	mov	r9, r0
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f00e face 	bl	801a350 <mp_count_bits>
       mp_count_bits(pubkey->y) > mp_count_bits(prime) ||
 800bdb4:	4581      	cmp	r9, r0
 800bdb6:	dce9      	bgt.n	800bd8c <wc_ecc_check_key+0x12c>
    err = wc_ecc_new_point_ex(&inf, key->heap);
 800bdb8:	a807      	add	r0, sp, #28
 800bdba:	f7fd fa61 	bl	8009280 <wc_ecc_new_point_ex.constprop.0>
    if (err == MP_OKAY) {
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	b998      	cbnz	r0, 800bdea <wc_ecc_check_key+0x18a>
            err = wc_ecc_mulmod_ex(order, pubkey, inf, a, prime, 1, key->heap);
 800bdc2:	6963      	ldr	r3, [r4, #20]
 800bdc4:	9302      	str	r3, [sp, #8]
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e9cd 8300 	strd	r8, r3, [sp]
 800bdcc:	9a07      	ldr	r2, [sp, #28]
 800bdce:	9805      	ldr	r0, [sp, #20]
 800bdd0:	465b      	mov	r3, fp
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7fe fca2 	bl	800a71c <wc_ecc_mulmod_ex>
        if (err == MP_OKAY && !wc_ecc_point_is_at_infinity(inf))
 800bdd8:	4682      	mov	sl, r0
 800bdda:	b930      	cbnz	r0, 800bdea <wc_ecc_check_key+0x18a>
 800bddc:	9807      	ldr	r0, [sp, #28]
 800bdde:	f7fe f927 	bl	800a030 <wc_ecc_point_is_at_infinity>
            err = ECC_INF_E;
 800bde2:	2800      	cmp	r0, #0
 800bde4:	bf08      	it	eq
 800bde6:	f06f 0ad6 	mvneq.w	sl, #214	; 0xd6
    wc_ecc_del_point_ex(inf, key->heap);
 800bdea:	9807      	ldr	r0, [sp, #28]
 800bdec:	f7fd fa6f 	bl	80092ce <wc_ecc_del_point_ex.constprop.0>
        if ((err == MP_OKAY) && (key->type == ECC_PRIVATEKEY) &&
 800bdf0:	f1ba 0f00 	cmp.w	sl, #0
 800bdf4:	d191      	bne.n	800bd1a <wc_ecc_check_key+0xba>
 800bdf6:	6822      	ldr	r2, [r4, #0]
 800bdf8:	2a02      	cmp	r2, #2
 800bdfa:	d18e      	bne.n	800bd1a <wc_ecc_check_key+0xba>
            (mp_iszero(key->k) || mp_isneg(key->k) ||
 800bdfc:	f504 77a8 	add.w	r7, r4, #336	; 0x150
 800be00:	4638      	mov	r0, r7
 800be02:	f00e faa0 	bl	801a346 <mp_iszero>
        if ((err == MP_OKAY) && (key->type == ECC_PRIVATEKEY) &&
 800be06:	b110      	cbz	r0, 800be0e <wc_ecc_check_key+0x1ae>
            err = ECC_PRIV_KEY_E;
 800be08:	f06f 0ad7 	mvn.w	sl, #215	; 0xd7
 800be0c:	e785      	b.n	800bd1a <wc_ecc_check_key+0xba>
            (mp_iszero(key->k) || mp_isneg(key->k) ||
 800be0e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
 800be12:	2a00      	cmp	r2, #0
 800be14:	d1f8      	bne.n	800be08 <wc_ecc_check_key+0x1a8>
            (mp_cmp(key->k, curve->order) != MP_LT))
 800be16:	9a06      	ldr	r2, [sp, #24]
 800be18:	4638      	mov	r0, r7
 800be1a:	68d1      	ldr	r1, [r2, #12]
 800be1c:	f00d fa5f 	bl	80192de <mp_cmp>
            (mp_iszero(key->k) || mp_isneg(key->k) ||
 800be20:	3001      	adds	r0, #1
 800be22:	d1f1      	bne.n	800be08 <wc_ecc_check_key+0x1a8>
 800be24:	e779      	b.n	800bd1a <wc_ecc_check_key+0xba>
        return BAD_FUNC_ARG;
 800be26:	f06f 0aac 	mvn.w	sl, #172	; 0xac
 800be2a:	e783      	b.n	800bd34 <wc_ecc_check_key+0xd4>

0800be2c <wc_ecc_import_x963_ex>:
{
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	460c      	mov	r4, r1
 800be32:	b085      	sub	sp, #20
 800be34:	4615      	mov	r5, r2
 800be36:	469a      	mov	sl, r3
    if (in == NULL || key == NULL)
 800be38:	4606      	mov	r6, r0
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d05c      	beq.n	800bef8 <wc_ecc_import_x963_ex+0xcc>
 800be3e:	2a00      	cmp	r2, #0
 800be40:	d05a      	beq.n	800bef8 <wc_ecc_import_x963_ex+0xcc>
    if ((inLen & 1) == 0) {
 800be42:	07cb      	lsls	r3, r1, #31
 800be44:	d55b      	bpl.n	800befe <wc_ecc_import_x963_ex+0xd2>
    key->state = ECC_STATE_NONE;
 800be46:	2300      	movs	r3, #0
        err = mp_init_multi(key->k,
 800be48:	f502 7ba8 	add.w	fp, r2, #336	; 0x150
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
 800be4c:	f102 0918 	add.w	r9, r2, #24
 800be50:	f102 07e8 	add.w	r7, r2, #232	; 0xe8
 800be54:	f102 0880 	add.w	r8, r2, #128	; 0x80
    key->state = ECC_STATE_NONE;
 800be58:	6093      	str	r3, [r2, #8]
        err = mp_init_multi(key->k,
 800be5a:	4649      	mov	r1, r9
 800be5c:	e9cd 3300 	strd	r3, r3, [sp]
 800be60:	4642      	mov	r2, r8
 800be62:	463b      	mov	r3, r7
 800be64:	4658      	mov	r0, fp
 800be66:	f00d fa0f 	bl	8019288 <mp_init_multi>
    if (err != MP_OKAY)
 800be6a:	4603      	mov	r3, r0
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d149      	bne.n	800bf04 <wc_ecc_import_x963_ex+0xd8>
    pointType = in[0];
 800be70:	7832      	ldrb	r2, [r6, #0]
    if (pointType != ECC_POINT_UNCOMP && pointType != ECC_POINT_COMP_EVEN &&
 800be72:	2a04      	cmp	r2, #4
 800be74:	d005      	beq.n	800be82 <wc_ecc_import_x963_ex+0x56>
 800be76:	2a02      	cmp	r2, #2
 800be78:	d003      	beq.n	800be82 <wc_ecc_import_x963_ex+0x56>
        err = ASN_PARSE_E;
 800be7a:	2a03      	cmp	r2, #3
 800be7c:	bf18      	it	ne
 800be7e:	f06f 038b 	mvnne.w	r3, #139	; 0x8b
    if (pointType == ECC_POINT_COMP_EVEN || pointType == ECC_POINT_COMP_ODD) {
 800be82:	3a02      	subs	r2, #2
 800be84:	2a01      	cmp	r2, #1
 800be86:	d934      	bls.n	800bef2 <wc_ecc_import_x963_ex+0xc6>
    if (err == MP_OKAY) {
 800be88:	bb0b      	cbnz	r3, 800bece <wc_ecc_import_x963_ex+0xa2>
    inLen -= 1;
 800be8a:	3c01      	subs	r4, #1
        keysize = (int)(inLen>>1);
 800be8c:	0864      	lsrs	r4, r4, #1
        err = wc_ecc_set_curve(key, keysize, curve_id);
 800be8e:	4652      	mov	r2, sl
 800be90:	4621      	mov	r1, r4
 800be92:	4628      	mov	r0, r5
 800be94:	f7fd feb0 	bl	8009bf8 <wc_ecc_set_curve>
        key->type = ECC_PUBLICKEY;
 800be98:	f04f 0a01 	mov.w	sl, #1
 800be9c:	f8c5 a000 	str.w	sl, [r5]
    if (err == MP_OKAY)
 800bea0:	4603      	mov	r3, r0
 800bea2:	b9a0      	cbnz	r0, 800bece <wc_ecc_import_x963_ex+0xa2>
    in += 1;
 800bea4:	4456      	add	r6, sl
        err = mp_read_unsigned_bin(key->pubkey.x, in, (word32)keysize);
 800bea6:	4622      	mov	r2, r4
 800bea8:	4631      	mov	r1, r6
 800beaa:	4648      	mov	r0, r9
 800beac:	f00d fa1d 	bl	80192ea <mp_read_unsigned_bin>
    if (err == MP_OKAY) {
 800beb0:	4603      	mov	r3, r0
 800beb2:	b960      	cbnz	r0, 800bece <wc_ecc_import_x963_ex+0xa2>
            err = mp_read_unsigned_bin(key->pubkey.y, in + keysize,
 800beb4:	4622      	mov	r2, r4
 800beb6:	1931      	adds	r1, r6, r4
 800beb8:	4640      	mov	r0, r8
 800beba:	f00d fa16 	bl	80192ea <mp_read_unsigned_bin>
    if (err == MP_OKAY)
 800bebe:	4603      	mov	r3, r0
 800bec0:	b928      	cbnz	r0, 800bece <wc_ecc_import_x963_ex+0xa2>
        err = mp_set(key->pubkey.z, 1);
 800bec2:	4651      	mov	r1, sl
 800bec4:	4638      	mov	r0, r7
 800bec6:	f00e fb07 	bl	801a4d8 <mp_set>
    if (err != MP_OKAY) {
 800beca:	4603      	mov	r3, r0
 800becc:	b168      	cbz	r0, 800beea <wc_ecc_import_x963_ex+0xbe>
        mp_clear(key->pubkey.x);
 800bece:	4648      	mov	r0, r9
 800bed0:	9303      	str	r3, [sp, #12]
 800bed2:	f00d f9d4 	bl	801927e <mp_clear>
        mp_clear(key->pubkey.y);
 800bed6:	4640      	mov	r0, r8
 800bed8:	f00d f9d1 	bl	801927e <mp_clear>
        mp_clear(key->pubkey.z);
 800bedc:	4638      	mov	r0, r7
 800bede:	f00d f9ce 	bl	801927e <mp_clear>
        mp_clear(key->k);
 800bee2:	4658      	mov	r0, fp
 800bee4:	f00d f9cb 	bl	801927e <mp_clear>
 800bee8:	9b03      	ldr	r3, [sp, #12]
}
 800beea:	4618      	mov	r0, r3
 800beec:	b005      	add	sp, #20
 800beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = NOT_COMPILED_IN;
 800bef2:	f06f 03ad 	mvn.w	r3, #173	; 0xad
 800bef6:	e7ea      	b.n	800bece <wc_ecc_import_x963_ex+0xa2>
        return BAD_FUNC_ARG;
 800bef8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800befc:	e7f5      	b.n	800beea <wc_ecc_import_x963_ex+0xbe>
        return ECC_BAD_ARG_E;
 800befe:	f06f 03a9 	mvn.w	r3, #169	; 0xa9
 800bf02:	e7f2      	b.n	800beea <wc_ecc_import_x963_ex+0xbe>
        return MEMORY_E;
 800bf04:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800bf08:	e7ef      	b.n	800beea <wc_ecc_import_x963_ex+0xbe>

0800bf0a <wc_ecc_export_ex>:
{
 800bf0a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf0e:	460e      	mov	r6, r1
 800bf10:	4617      	mov	r7, r2
 800bf12:	e9dd 910a 	ldrd	r9, r1, [sp, #40]	; 0x28
 800bf16:	e9dd 280c 	ldrd	r2, r8, [sp, #48]	; 0x30
 800bf1a:	461d      	mov	r5, r3
    if (key == NULL) {
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	b920      	cbnz	r0, 800bf2a <wc_ecc_export_ex+0x20>
        return BAD_FUNC_ARG;
 800bf20:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800bf24:	b002      	add	sp, #8
 800bf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 800bf2a:	6840      	ldr	r0, [r0, #4]
 800bf2c:	f7fe f855 	bl	8009fda <wc_ecc_is_valid_idx>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d03c      	beq.n	800bfae <wc_ecc_export_ex+0xa4>
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d039      	beq.n	800bfae <wc_ecc_export_ex+0xa4>
    keySz = (word32)key->dp->size;
 800bf3a:	f8d3 a000 	ldr.w	sl, [r3]
    if (d != NULL) {
 800bf3e:	b919      	cbnz	r1, 800bf48 <wc_ecc_export_ex+0x3e>
    if (qx != NULL) {
 800bf40:	b996      	cbnz	r6, 800bf68 <wc_ecc_export_ex+0x5e>
    if (qy != NULL) {
 800bf42:	bb15      	cbnz	r5, 800bf8a <wc_ecc_export_ex+0x80>
 800bf44:	4628      	mov	r0, r5
 800bf46:	e7ed      	b.n	800bf24 <wc_ecc_export_ex+0x1a>
        if (dLen == NULL ||
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	d0e9      	beq.n	800bf20 <wc_ecc_export_ex+0x16>
            (key->type != ECC_PRIVATEKEY && key->type != ECC_PRIVATEKEY_ONLY))
 800bf4c:	6823      	ldr	r3, [r4, #0]
 800bf4e:	3b02      	subs	r3, #2
        if (dLen == NULL ||
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d8e5      	bhi.n	800bf20 <wc_ecc_export_ex+0x16>
            err = wc_export_int(key->k, d, dLen, keySz, encType);
 800bf54:	f8cd 8000 	str.w	r8, [sp]
 800bf58:	4653      	mov	r3, sl
 800bf5a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800bf5e:	f00e fc9c 	bl	801a89a <wc_export_int>
            if (err != MP_OKAY)
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d0ec      	beq.n	800bf40 <wc_ecc_export_ex+0x36>
 800bf66:	e7dd      	b.n	800bf24 <wc_ecc_export_ex+0x1a>
        if (qxLen == NULL || key->type == ECC_PRIVATEKEY_ONLY)
 800bf68:	2f00      	cmp	r7, #0
 800bf6a:	d0d9      	beq.n	800bf20 <wc_ecc_export_ex+0x16>
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d0d6      	beq.n	800bf20 <wc_ecc_export_ex+0x16>
        err = wc_export_int(key->pubkey.x, qx, qxLen, keySz, encType);
 800bf72:	f8cd 8000 	str.w	r8, [sp]
 800bf76:	4653      	mov	r3, sl
 800bf78:	463a      	mov	r2, r7
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	f104 0018 	add.w	r0, r4, #24
 800bf80:	f00e fc8b 	bl	801a89a <wc_export_int>
        if (err != MP_OKAY)
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d0dc      	beq.n	800bf42 <wc_ecc_export_ex+0x38>
 800bf88:	e7cc      	b.n	800bf24 <wc_ecc_export_ex+0x1a>
        if (qyLen == NULL || key->type == ECC_PRIVATEKEY_ONLY)
 800bf8a:	f1b9 0f00 	cmp.w	r9, #0
 800bf8e:	d0c7      	beq.n	800bf20 <wc_ecc_export_ex+0x16>
 800bf90:	6823      	ldr	r3, [r4, #0]
 800bf92:	2b03      	cmp	r3, #3
 800bf94:	d0c4      	beq.n	800bf20 <wc_ecc_export_ex+0x16>
        err = wc_export_int(key->pubkey.y, qy, qyLen, keySz, encType);
 800bf96:	4653      	mov	r3, sl
 800bf98:	464a      	mov	r2, r9
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800bfa0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
}
 800bfa4:	b002      	add	sp, #8
 800bfa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        err = wc_export_int(key->pubkey.y, qy, qyLen, keySz, encType);
 800bfaa:	f00e bc76 	b.w	801a89a <wc_export_int>
        return ECC_BAD_ARG_E;
 800bfae:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800bfb2:	e7b7      	b.n	800bf24 <wc_ecc_export_ex+0x1a>

0800bfb4 <wc_ecc_export_private_only>:
{
 800bfb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (out == NULL || outLen == NULL) {
 800bfb6:	b169      	cbz	r1, 800bfd4 <wc_ecc_export_private_only+0x20>
 800bfb8:	b162      	cbz	r2, 800bfd4 <wc_ecc_export_private_only+0x20>
    return wc_ecc_export_ex(key, NULL, NULL, NULL, NULL, out, outLen,
 800bfba:	2302      	movs	r3, #2
 800bfbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9101      	str	r1, [sp, #4]
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	4619      	mov	r1, r3
 800bfca:	f7ff ff9e 	bl	800bf0a <wc_ecc_export_ex>
}
 800bfce:	b005      	add	sp, #20
 800bfd0:	f85d fb04 	ldr.w	pc, [sp], #4
        return BAD_FUNC_ARG;
 800bfd4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800bfd8:	e7f9      	b.n	800bfce <wc_ecc_export_private_only+0x1a>

0800bfda <wc_ecc_export_public_raw>:
{
 800bfda:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bfdc:	9e08      	ldr	r6, [sp, #32]
    if (qx == NULL || qxLen == NULL || qy == NULL || qyLen == NULL) {
 800bfde:	b161      	cbz	r1, 800bffa <wc_ecc_export_public_raw+0x20>
 800bfe0:	b15a      	cbz	r2, 800bffa <wc_ecc_export_public_raw+0x20>
 800bfe2:	b153      	cbz	r3, 800bffa <wc_ecc_export_public_raw+0x20>
 800bfe4:	b14e      	cbz	r6, 800bffa <wc_ecc_export_public_raw+0x20>
    return wc_ecc_export_ex(key, qx, qxLen, qy, qyLen, NULL, NULL,
 800bfe6:	2400      	movs	r4, #0
 800bfe8:	2502      	movs	r5, #2
 800bfea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bfee:	e9cd 6400 	strd	r6, r4, [sp]
 800bff2:	f7ff ff8a 	bl	800bf0a <wc_ecc_export_ex>
}
 800bff6:	b004      	add	sp, #16
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 800bffa:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800bffe:	e7fa      	b.n	800bff6 <wc_ecc_export_public_raw+0x1c>

0800c000 <wc_ecc_export_private_raw>:
{
 800c000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ecc_export_ex(key, qx, qxLen, qy, qyLen, d, dLen,
 800c002:	2402      	movs	r4, #2
 800c004:	9403      	str	r4, [sp, #12]
 800c006:	9c08      	ldr	r4, [sp, #32]
 800c008:	9402      	str	r4, [sp, #8]
 800c00a:	9c07      	ldr	r4, [sp, #28]
 800c00c:	9401      	str	r4, [sp, #4]
 800c00e:	9c06      	ldr	r4, [sp, #24]
 800c010:	9400      	str	r4, [sp, #0]
 800c012:	f7ff ff7a 	bl	800bf0a <wc_ecc_export_ex>
}
 800c016:	b004      	add	sp, #16
 800c018:	bd10      	pop	{r4, pc}

0800c01a <wc_ecc_import_private_key_ex>:
{
 800c01a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c01e:	4698      	mov	r8, r3
 800c020:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
 800c024:	4606      	mov	r6, r0
 800c026:	460f      	mov	r7, r1
 800c028:	4615      	mov	r5, r2
    if (key == NULL || priv == NULL)
 800c02a:	b31c      	cbz	r4, 800c074 <wc_ecc_import_private_key_ex+0x5a>
 800c02c:	b310      	cbz	r0, 800c074 <wc_ecc_import_private_key_ex+0x5a>
    if (pub != NULL) {
 800c02e:	b1d2      	cbz	r2, 800c066 <wc_ecc_import_private_key_ex+0x4c>
        word32 idx = 0;
 800c030:	2200      	movs	r2, #0
 800c032:	9201      	str	r2, [sp, #4]
        ret = wc_ecc_import_x963_ex(pub, pubSz, key, curve_id);
 800c034:	4641      	mov	r1, r8
 800c036:	4622      	mov	r2, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f7ff fef7 	bl	800be2c <wc_ecc_import_x963_ex>
        if (ret < 0)
 800c03e:	2800      	cmp	r0, #0
 800c040:	da05      	bge.n	800c04e <wc_ecc_import_private_key_ex+0x34>
            ret = wc_EccPublicKeyDecode(pub, &idx, key, pubSz);
 800c042:	4643      	mov	r3, r8
 800c044:	4622      	mov	r2, r4
 800c046:	a901      	add	r1, sp, #4
 800c048:	4628      	mov	r0, r5
 800c04a:	f005 fb21 	bl	8011690 <wc_EccPublicKeyDecode>
        key->type = ECC_PRIVATEKEY;
 800c04e:	2302      	movs	r3, #2
        key->type = ECC_PRIVATEKEY_ONLY;
 800c050:	6023      	str	r3, [r4, #0]
    if (ret != 0)
 800c052:	b988      	cbnz	r0, 800c078 <wc_ecc_import_private_key_ex+0x5e>
    ret = mp_read_unsigned_bin(key->k, priv, privSz);
 800c054:	463a      	mov	r2, r7
 800c056:	4631      	mov	r1, r6
 800c058:	f504 70a8 	add.w	r0, r4, #336	; 0x150
}
 800c05c:	b002      	add	sp, #8
 800c05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ret = mp_read_unsigned_bin(key->k, priv, privSz);
 800c062:	f00d b942 	b.w	80192ea <mp_read_unsigned_bin>
    key->state = ECC_STATE_NONE;
 800c066:	60a2      	str	r2, [r4, #8]
        ret = wc_ecc_set_curve(key, (int)privSz, curve_id);
 800c068:	4620      	mov	r0, r4
 800c06a:	461a      	mov	r2, r3
 800c06c:	f7fd fdc4 	bl	8009bf8 <wc_ecc_set_curve>
        key->type = ECC_PRIVATEKEY_ONLY;
 800c070:	2303      	movs	r3, #3
 800c072:	e7ed      	b.n	800c050 <wc_ecc_import_private_key_ex+0x36>
        return BAD_FUNC_ARG;
 800c074:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800c078:	b002      	add	sp, #8
 800c07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c07e <wc_ecc_import_private_key>:
{
 800c07e:	b513      	push	{r0, r1, r4, lr}
    return wc_ecc_import_private_key_ex(priv, privSz, pub, pubSz, key,
 800c080:	2400      	movs	r4, #0
 800c082:	9401      	str	r4, [sp, #4]
 800c084:	9c04      	ldr	r4, [sp, #16]
 800c086:	9400      	str	r4, [sp, #0]
 800c088:	f7ff ffc7 	bl	800c01a <wc_ecc_import_private_key_ex>
}
 800c08c:	b002      	add	sp, #8
 800c08e:	bd10      	pop	{r4, pc}

0800c090 <wc_ecc_rs_to_sig>:
{
 800c090:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	4689      	mov	r9, r1
 800c096:	4617      	mov	r7, r2
 800c098:	4698      	mov	r8, r3
    if (r == NULL || s == NULL || out == NULL || outlen == NULL)
 800c09a:	4682      	mov	sl, r0
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d059      	beq.n	800c154 <wc_ecc_rs_to_sig+0xc4>
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d057      	beq.n	800c154 <wc_ecc_rs_to_sig+0xc4>
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	d055      	beq.n	800c154 <wc_ecc_rs_to_sig+0xc4>
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d053      	beq.n	800c154 <wc_ecc_rs_to_sig+0xc4>
    rtmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 800c0ac:	2068      	movs	r0, #104	; 0x68
 800c0ae:	f00e ff77 	bl	801afa0 <malloc>
    if (rtmp == NULL)
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	b138      	cbz	r0, 800c0c6 <wc_ecc_rs_to_sig+0x36>
    stmp = (mp_int*)XMALLOC(sizeof(mp_int), NULL, DYNAMIC_TYPE_ECC);
 800c0b6:	2068      	movs	r0, #104	; 0x68
 800c0b8:	f00e ff72 	bl	801afa0 <malloc>
    if (stmp == NULL) {
 800c0bc:	4606      	mov	r6, r0
 800c0be:	b928      	cbnz	r0, 800c0cc <wc_ecc_rs_to_sig+0x3c>
        XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f00e ff75 	bl	801afb0 <free>
        return MEMORY_E;
 800c0c6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800c0ca:	e00f      	b.n	800c0ec <wc_ecc_rs_to_sig+0x5c>
    err = mp_init_multi(rtmp, stmp, NULL, NULL, NULL, NULL);
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	e9cd 3300 	strd	r3, r3, [sp]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f00d f8d6 	bl	8019288 <mp_init_multi>
    if (err != MP_OKAY) {
 800c0dc:	4604      	mov	r4, r0
 800c0de:	b148      	cbz	r0, 800c0f4 <wc_ecc_rs_to_sig+0x64>
    XFREE(stmp, NULL, DYNAMIC_TYPE_ECC);
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f00e ff65 	bl	801afb0 <free>
    XFREE(rtmp, NULL, DYNAMIC_TYPE_ECC);
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f00e ff62 	bl	801afb0 <free>
}
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	b002      	add	sp, #8
 800c0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    err = mp_read_radix(rtmp, r, MP_RADIX_HEX);
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	4651      	mov	r1, sl
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f00e f951 	bl	801a3a0 <mp_read_radix>
    if (err == MP_OKAY)
 800c0fe:	4604      	mov	r4, r0
 800c100:	b968      	cbnz	r0, 800c11e <wc_ecc_rs_to_sig+0x8e>
        err = mp_read_radix(stmp, s, MP_RADIX_HEX);
 800c102:	2210      	movs	r2, #16
 800c104:	4649      	mov	r1, r9
 800c106:	4630      	mov	r0, r6
 800c108:	f00e f94a 	bl	801a3a0 <mp_read_radix>
    if (err == MP_OKAY) {
 800c10c:	4604      	mov	r4, r0
 800c10e:	b930      	cbnz	r0, 800c11e <wc_ecc_rs_to_sig+0x8e>
        if (mp_iszero(rtmp) == MP_YES || mp_iszero(stmp) == MP_YES)
 800c110:	4628      	mov	r0, r5
 800c112:	f00e f918 	bl	801a346 <mp_iszero>
 800c116:	2801      	cmp	r0, #1
 800c118:	d108      	bne.n	800c12c <wc_ecc_rs_to_sig+0x9c>
            err = MP_ZERO_E;
 800c11a:	f06f 0478 	mvn.w	r4, #120	; 0x78
    mp_clear(rtmp);
 800c11e:	4628      	mov	r0, r5
 800c120:	f00d f8ad 	bl	801927e <mp_clear>
    mp_clear(stmp);
 800c124:	4630      	mov	r0, r6
 800c126:	f00d f8aa 	bl	801927e <mp_clear>
 800c12a:	e7d9      	b.n	800c0e0 <wc_ecc_rs_to_sig+0x50>
        if (mp_iszero(rtmp) == MP_YES || mp_iszero(stmp) == MP_YES)
 800c12c:	4630      	mov	r0, r6
 800c12e:	f00e f90a 	bl	801a346 <mp_iszero>
 800c132:	2801      	cmp	r0, #1
 800c134:	d0f1      	beq.n	800c11a <wc_ecc_rs_to_sig+0x8a>
        if (mp_isneg(rtmp) == MP_YES || mp_isneg(stmp) == MP_YES) {
 800c136:	686b      	ldr	r3, [r5, #4]
 800c138:	b94b      	cbnz	r3, 800c14e <wc_ecc_rs_to_sig+0xbe>
 800c13a:	6873      	ldr	r3, [r6, #4]
 800c13c:	b93b      	cbnz	r3, 800c14e <wc_ecc_rs_to_sig+0xbe>
        err = StoreECC_DSA_Sig(out, outlen, rtmp, stmp);
 800c13e:	4633      	mov	r3, r6
 800c140:	462a      	mov	r2, r5
 800c142:	4641      	mov	r1, r8
 800c144:	4638      	mov	r0, r7
 800c146:	f005 f88a 	bl	801125e <StoreECC_DSA_Sig>
 800c14a:	4604      	mov	r4, r0
 800c14c:	e7e7      	b.n	800c11e <wc_ecc_rs_to_sig+0x8e>
            err = MP_READ_E;
 800c14e:	f06f 046e 	mvn.w	r4, #110	; 0x6e
 800c152:	e7e4      	b.n	800c11e <wc_ecc_rs_to_sig+0x8e>
        return ECC_BAD_ARG_E;
 800c154:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 800c158:	e7c8      	b.n	800c0ec <wc_ecc_rs_to_sig+0x5c>

0800c15a <wc_ecc_rs_raw_to_sig>:
{
 800c15a:	b470      	push	{r4, r5, r6}
 800c15c:	460d      	mov	r5, r1
 800c15e:	4614      	mov	r4, r2
 800c160:	e9dd 6103 	ldrd	r6, r1, [sp, #12]
    if (r == NULL || s == NULL || out == NULL || outlen == NULL)
 800c164:	4602      	mov	r2, r0
 800c166:	b148      	cbz	r0, 800c17c <wc_ecc_rs_raw_to_sig+0x22>
 800c168:	b144      	cbz	r4, 800c17c <wc_ecc_rs_raw_to_sig+0x22>
 800c16a:	b13e      	cbz	r6, 800c17c <wc_ecc_rs_raw_to_sig+0x22>
 800c16c:	b131      	cbz	r1, 800c17c <wc_ecc_rs_raw_to_sig+0x22>
    return StoreECC_DSA_Sig_Bin(out, outlen, r, rSz, s, sSz);
 800c16e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800c172:	4630      	mov	r0, r6
 800c174:	462b      	mov	r3, r5
}
 800c176:	bc70      	pop	{r4, r5, r6}
    return StoreECC_DSA_Sig_Bin(out, outlen, r, rSz, s, sSz);
 800c178:	f005 b8ad 	b.w	80112d6 <StoreECC_DSA_Sig_Bin>
}
 800c17c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800c180:	bc70      	pop	{r4, r5, r6}
 800c182:	4770      	bx	lr

0800c184 <wc_ecc_sig_to_rs>:
{
 800c184:	b4f0      	push	{r4, r5, r6, r7}
 800c186:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    if (sig == NULL || r == NULL || rLen == NULL || s == NULL || sLen == NULL)
 800c18a:	b130      	cbz	r0, 800c19a <wc_ecc_sig_to_rs+0x16>
 800c18c:	b12a      	cbz	r2, 800c19a <wc_ecc_sig_to_rs+0x16>
 800c18e:	b123      	cbz	r3, 800c19a <wc_ecc_sig_to_rs+0x16>
 800c190:	b11e      	cbz	r6, 800c19a <wc_ecc_sig_to_rs+0x16>
 800c192:	b117      	cbz	r7, 800c19a <wc_ecc_sig_to_rs+0x16>
}
 800c194:	bcf0      	pop	{r4, r5, r6, r7}
    return DecodeECC_DSA_Sig_Bin(sig, sigLen, r, rLen, s, sLen);
 800c196:	f005 b909 	b.w	80113ac <DecodeECC_DSA_Sig_Bin>
}
 800c19a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800c19e:	bcf0      	pop	{r4, r5, r6, r7}
 800c1a0:	4770      	bx	lr

0800c1a2 <wc_ecc_import_raw_ex>:
   dp        Custom ecc_set_type
   return    MP_OKAY on success
*/
int wc_ecc_import_raw_ex(ecc_key* key, const char* qx, const char* qy,
                   const char* d, int curve_id)
{
 800c1a2:	b513      	push	{r0, r1, r4, lr}
    return wc_ecc_import_raw_private(key, qx, qy, d, curve_id,
 800c1a4:	2401      	movs	r4, #1
 800c1a6:	9401      	str	r4, [sp, #4]
 800c1a8:	9c04      	ldr	r4, [sp, #16]
 800c1aa:	9400      	str	r4, [sp, #0]
 800c1ac:	f7fd fd48 	bl	8009c40 <wc_ecc_import_raw_private>
        WC_TYPE_HEX_STR);

}
 800c1b0:	b002      	add	sp, #8
 800c1b2:	bd10      	pop	{r4, pc}

0800c1b4 <wc_ecc_import_unsigned>:

/* Import x, y and optional private (d) as unsigned binary */
int wc_ecc_import_unsigned(ecc_key* key, const byte* qx, const byte* qy,
                   const byte* d, int curve_id)
{
 800c1b4:	b513      	push	{r0, r1, r4, lr}
    return wc_ecc_import_raw_private(key, (const char*)qx, (const char*)qy,
 800c1b6:	2402      	movs	r4, #2
 800c1b8:	9401      	str	r4, [sp, #4]
 800c1ba:	9c04      	ldr	r4, [sp, #16]
 800c1bc:	9400      	str	r4, [sp, #0]
 800c1be:	f7fd fd3f 	bl	8009c40 <wc_ecc_import_raw_private>
        (const char*)d, curve_id, WC_TYPE_UNSIGNED_BIN);
}
 800c1c2:	b002      	add	sp, #8
 800c1c4:	bd10      	pop	{r4, pc}
	...

0800c1c8 <wc_ecc_import_raw>:
   return    MP_OKAY on success
*/
WOLFSSL_ABI
int wc_ecc_import_raw(ecc_key* key, const char* qx, const char* qy,
                   const char* d, const char* curveName)
{
 800c1c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	4616      	mov	r6, r2
 800c1d4:	461f      	mov	r7, r3
    int err, x;

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL || curveName == NULL) {
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	b1d0      	cbz	r0, 800c210 <wc_ecc_import_raw+0x48>
 800c1da:	b1c9      	cbz	r1, 800c210 <wc_ecc_import_raw+0x48>
 800c1dc:	b1c2      	cbz	r2, 800c210 <wc_ecc_import_raw+0x48>
 800c1de:	f1b8 0f00 	cmp.w	r8, #0
 800c1e2:	d015      	beq.n	800c210 <wc_ecc_import_raw+0x48>
        return BAD_FUNC_ARG;
    }

    /* set curve type and index */
    for (x = 0; ecc_sets[x].size != 0; x++) {
        if (XSTRNCMP(ecc_sets[x].name, curveName,
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	f00f f87e 	bl	801b2e6 <strlen>
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	480b      	ldr	r0, [pc, #44]	; (800c21c <wc_ecc_import_raw+0x54>)
 800c1f0:	f00f f881 	bl	801b2f6 <strncmp>
 800c1f4:	b978      	cbnz	r0, 800c216 <wc_ecc_import_raw+0x4e>

    if (ecc_sets[x].size == 0) {
        WOLFSSL_MSG("ecc_set curve name not found");
        err = ASN_PARSE_E;
    } else {
        return wc_ecc_import_raw_private(key, qx, qy, d, ecc_sets[x].id,
 800c1f6:	2307      	movs	r3, #7
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	e9cd 3200 	strd	r3, r2, [sp]
 800c1fe:	4629      	mov	r1, r5
 800c200:	463b      	mov	r3, r7
 800c202:	4632      	mov	r2, r6
 800c204:	4620      	mov	r0, r4
 800c206:	f7fd fd1b 	bl	8009c40 <wc_ecc_import_raw_private>
            WC_TYPE_HEX_STR);
    }

    return err;
}
 800c20a:	b002      	add	sp, #8
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BAD_FUNC_ARG;
 800c210:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c214:	e7f9      	b.n	800c20a <wc_ecc_import_raw+0x42>
    return err;
 800c216:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800c21a:	e7f6      	b.n	800c20a <wc_ecc_import_raw+0x42>
 800c21c:	080226b8 	.word	0x080226b8

0800c220 <wc_ecc_size>:

/* key size in octets */
WOLFSSL_ABI
int wc_ecc_size(ecc_key* key)
{
    if (key == NULL || key->dp == NULL)
 800c220:	b110      	cbz	r0, 800c228 <wc_ecc_size+0x8>
 800c222:	6900      	ldr	r0, [r0, #16]
 800c224:	b100      	cbz	r0, 800c228 <wc_ecc_size+0x8>
        return 0;

    return key->dp->size;
 800c226:	6800      	ldr	r0, [r0, #0]
}
 800c228:	4770      	bx	lr

0800c22a <wc_ecc_sig_size>:
}

/* maximum signature size based on actual key curve */
WOLFSSL_ABI
int wc_ecc_sig_size(const ecc_key* key)
{
 800c22a:	b570      	push	{r4, r5, r6, lr}
 800c22c:	b08c      	sub	sp, #48	; 0x30
    int maxSigSz;
    int orderBits, keySz;

    if (key == NULL || key->dp == NULL)
 800c22e:	2800      	cmp	r0, #0
 800c230:	d03a      	beq.n	800c2a8 <wc_ecc_sig_size+0x7e>
 800c232:	6904      	ldr	r4, [r0, #16]
 800c234:	2c00      	cmp	r4, #0
 800c236:	d039      	beq.n	800c2ac <wc_ecc_sig_size+0x82>
    DECLARE_CURVE_SPECS(1);
 800c238:	a802      	add	r0, sp, #8
 800c23a:	2228      	movs	r2, #40	; 0x28
 800c23c:	2100      	movs	r1, #0
        return 0;

    /* the signature r and s will always be less than order */
    /* if the order MSB (top bit of byte) is set then ASN encoding needs
        extra byte for r and s, so add 2 */
    keySz = key->dp->size;
 800c23e:	6826      	ldr	r6, [r4, #0]
    DECLARE_CURVE_SPECS(1);
 800c240:	9001      	str	r0, [sp, #4]
 800c242:	f00e fef5 	bl	801b030 <memset>
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	61da      	str	r2, [r3, #28]
    ALLOC_CURVE_SPECS(1, err);
 800c24c:	2068      	movs	r0, #104	; 0x68
 800c24e:	f00e fea7 	bl	801afa0 <malloc>
 800c252:	4605      	mov	r5, r0
 800c254:	b1a0      	cbz	r0, 800c280 <wc_ecc_sig_size+0x56>
 800c256:	9b01      	ldr	r3, [sp, #4]
        err = wc_ecc_curve_load(dp, &curve, ECC_CURVE_FIELD_ORDER);
 800c258:	2208      	movs	r2, #8
    ALLOC_CURVE_SPECS(1, err);
 800c25a:	6198      	str	r0, [r3, #24]
        err = wc_ecc_curve_load(dp, &curve, ECC_CURVE_FIELD_ORDER);
 800c25c:	a901      	add	r1, sp, #4
 800c25e:	4620      	mov	r0, r4
 800c260:	f7fd fc7a 	bl	8009b58 <wc_ecc_curve_load>
    if (err != 0) {
 800c264:	4604      	mov	r4, r0
 800c266:	b938      	cbnz	r0, 800c278 <wc_ecc_sig_size+0x4e>
    orderBits = mp_count_bits(curve->order);
 800c268:	9b01      	ldr	r3, [sp, #4]
 800c26a:	68d8      	ldr	r0, [r3, #12]
 800c26c:	f00e f870 	bl	801a350 <mp_count_bits>
 800c270:	4604      	mov	r4, r0
    wc_ecc_curve_free(curve);
 800c272:	9801      	ldr	r0, [sp, #4]
 800c274:	f7fd fc28 	bl	8009ac8 <wc_ecc_curve_free>
       FREE_CURVE_SPECS();
 800c278:	4628      	mov	r0, r5
 800c27a:	f00e fe99 	bl	801afb0 <free>
 800c27e:	e001      	b.n	800c284 <wc_ecc_sig_size+0x5a>
    ALLOC_CURVE_SPECS(1, err);
 800c280:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    orderBits = wc_ecc_get_curve_order_bit_count(key->dp);
    if (orderBits > keySz * 8) {
 800c284:	ebb4 0fc6 	cmp.w	r4, r6, lsl #3
 800c288:	dd04      	ble.n	800c294 <wc_ecc_sig_size+0x6a>
        keySz = (orderBits + 7) / 8;
 800c28a:	1de3      	adds	r3, r4, #7
 800c28c:	bf48      	it	mi
 800c28e:	f104 030e 	addmi.w	r3, r4, #14
 800c292:	10de      	asrs	r6, r3, #3
    }
    /* maximum possible signature header size is 7 bytes */
    maxSigSz = (keySz * 2) + SIG_HEADER_SZ;
    if ((orderBits % 8) == 0) {
 800c294:	0762      	lsls	r2, r4, #29
    maxSigSz = (keySz * 2) + SIG_HEADER_SZ;
 800c296:	ea4f 0346 	mov.w	r3, r6, lsl #1
 800c29a:	bf14      	ite	ne
 800c29c:	1dd8      	addne	r0, r3, #7
        /* MSB can be set, so add 2 */
        maxSigSz += ECC_MAX_PAD_SZ;
 800c29e:	f103 0009 	addeq.w	r0, r3, #9
    }
    /* if total length is less than 128 + SEQ(1)+LEN(1) then subtract 1 */
    if (maxSigSz < (128 + 2)) {
 800c2a2:	2881      	cmp	r0, #129	; 0x81
 800c2a4:	dc00      	bgt.n	800c2a8 <wc_ecc_sig_size+0x7e>
        maxSigSz -= 1;
 800c2a6:	3801      	subs	r0, #1
    }

    return maxSigSz;
}
 800c2a8:	b00c      	add	sp, #48	; 0x30
 800c2aa:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	e7fb      	b.n	800c2a8 <wc_ecc_sig_size+0x7e>

0800c2b0 <wc_ecc_set_rng>:
int wc_ecc_set_rng(ecc_key* key, WC_RNG* rng)
{
    int err = 0;

#ifdef ECC_TIMING_RESISTANT
    if (key == NULL) {
 800c2b0:	b118      	cbz	r0, 800c2ba <wc_ecc_set_rng+0xa>
        err = BAD_FUNC_ARG;
    }
    else {
        key->rng = rng;
 800c2b2:	f8c0 11b8 	str.w	r1, [r0, #440]	; 0x1b8
    int err = 0;
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	4770      	bx	lr
        err = BAD_FUNC_ARG;
 800c2ba:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    (void)rng;
    /* report success, not an error if ECC_TIMING_RESISTANT is not defined */
#endif

    return err;
}
 800c2be:	4770      	bx	lr

0800c2c0 <wc_ecc_get_oid>:

int wc_ecc_get_oid(word32 oidSum, const byte** oid, word32* oidSz)
{
    int x;

    if (oidSum == 0) {
 800c2c0:	b158      	cbz	r0, 800c2da <wc_ecc_get_oid+0x1a>
        return BAD_FUNC_ARG;
    }

    /* find matching OID sum (based on encoded value) */
    for (x = 0; ecc_sets[x].size != 0; x++) {
        if (ecc_sets[x].oidSum == oidSum) {
 800c2c2:	f240 230e 	movw	r3, #526	; 0x20e
 800c2c6:	4298      	cmp	r0, r3
 800c2c8:	d10a      	bne.n	800c2e0 <wc_ecc_get_oid+0x20>
            /* on success return curve id */
            if (ret == 0) {
                ret = ecc_sets[x].id;
            }
        #else
            if (oidSz) {
 800c2ca:	b10a      	cbz	r2, 800c2d0 <wc_ecc_get_oid+0x10>
                *oidSz = ecc_sets[x].oidSz;
 800c2cc:	2308      	movs	r3, #8
 800c2ce:	6013      	str	r3, [r2, #0]
            }
            if (oid) {
 800c2d0:	b109      	cbz	r1, 800c2d6 <wc_ecc_get_oid+0x16>
                *oid = ecc_sets[x].oid;
 800c2d2:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <wc_ecc_get_oid+0x28>)
 800c2d4:	600b      	str	r3, [r1, #0]
            }
            ret = ecc_sets[x].id;
        #endif
            return ret;
 800c2d6:	2007      	movs	r0, #7
        }
    }

    return NOT_COMPILED_IN;
}
 800c2d8:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800c2da:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c2de:	4770      	bx	lr
    return NOT_COMPILED_IN;
 800c2e0:	f06f 00ad 	mvn.w	r0, #173	; 0xad
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	080226c2 	.word	0x080226c2

0800c2ec <HmacKeyInnerHash>:
#endif /* WOLFSSL_MAXQ108X */
}


static int HmacKeyInnerHash(Hmac* hmac)
{
 800c2ec:	b510      	push	{r4, lr}
    int ret = 0;

    switch (hmac->macType) {
 800c2ee:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 800c2f2:	2b06      	cmp	r3, #6
{
 800c2f4:	4604      	mov	r4, r0
    switch (hmac->macType) {
 800c2f6:	d00e      	beq.n	800c316 <HmacKeyInnerHash+0x2a>
 800c2f8:	2b08      	cmp	r3, #8
 800c2fa:	d012      	beq.n	800c322 <HmacKeyInnerHash+0x36>
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d105      	bne.n	800c30c <HmacKeyInnerHash+0x20>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
 800c300:	2240      	movs	r2, #64	; 0x40
 800c302:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800c306:	f001 f901 	bl	800d50c <wc_ShaUpdate>

        default:
            break;
    }

    if (ret == 0)
 800c30a:	b918      	cbnz	r0, 800c314 <HmacKeyInnerHash+0x28>
        hmac->innerHashKeyed = WC_HMAC_INNER_HASH_KEYED_SW;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
 800c312:	2000      	movs	r0, #0

    return ret;
}
 800c314:	bd10      	pop	{r4, pc}
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
 800c316:	2240      	movs	r2, #64	; 0x40
 800c318:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800c31c:	f001 fbe6 	bl	800daec <wc_Sha256Update>
            break;
 800c320:	e7f3      	b.n	800c30a <HmacKeyInnerHash+0x1e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
 800c322:	2280      	movs	r2, #128	; 0x80
 800c324:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
 800c328:	f003 feae 	bl	8010088 <wc_Sha512Update>
            break;
 800c32c:	e7ed      	b.n	800c30a <HmacKeyInnerHash+0x1e>
	...

0800c330 <wc_HmacSizeByType>:
            type == WC_SHA384 || type == WC_SHA512 ||
 800c330:	1ec3      	subs	r3, r0, #3
    if (!(type == WC_MD5 || type == WC_SHA ||
 800c332:	2b05      	cmp	r3, #5
 800c334:	d903      	bls.n	800c33e <wc_HmacSizeByType+0xe>
            type == WC_SHA384 || type == WC_SHA512 ||
 800c336:	f1a0 030a 	sub.w	r3, r0, #10
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	d806      	bhi.n	800c34c <wc_HmacSizeByType+0x1c>
    switch (type) {
 800c33e:	3804      	subs	r0, #4
 800c340:	2804      	cmp	r0, #4
 800c342:	d803      	bhi.n	800c34c <wc_HmacSizeByType+0x1c>
 800c344:	4b03      	ldr	r3, [pc, #12]	; (800c354 <wc_HmacSizeByType+0x24>)
 800c346:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800c34a:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800c34c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	08022734 	.word	0x08022734

0800c358 <_InitHmac>:
    switch (type) {
 800c358:	2906      	cmp	r1, #6
{
 800c35a:	b538      	push	{r3, r4, r5, lr}
 800c35c:	4605      	mov	r5, r0
 800c35e:	4614      	mov	r4, r2
    switch (type) {
 800c360:	d00b      	beq.n	800c37a <_InitHmac+0x22>
 800c362:	2908      	cmp	r1, #8
 800c364:	d00f      	beq.n	800c386 <_InitHmac+0x2e>
 800c366:	2904      	cmp	r1, #4
 800c368:	d113      	bne.n	800c392 <_InitHmac+0x3a>
            ret = wc_InitSha_ex(&hmac->hash.sha, heap, devId);
 800c36a:	f06f 0201 	mvn.w	r2, #1
 800c36e:	4621      	mov	r1, r4
 800c370:	f001 f8ac 	bl	800d4cc <wc_InitSha_ex>
    hmac->heap = heap;
 800c374:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
}
 800c378:	bd38      	pop	{r3, r4, r5, pc}
            ret = wc_InitSha256_ex(&hmac->hash.sha256, heap, devId);
 800c37a:	f06f 0201 	mvn.w	r2, #1
 800c37e:	4621      	mov	r1, r4
 800c380:	f001 fb80 	bl	800da84 <wc_InitSha256_ex>
            break;
 800c384:	e7f6      	b.n	800c374 <_InitHmac+0x1c>
            ret = wc_InitSha512_ex(&hmac->hash.sha512, heap, devId);
 800c386:	f06f 0201 	mvn.w	r2, #1
 800c38a:	4621      	mov	r1, r4
 800c38c:	f003 fe64 	bl	8010058 <wc_InitSha512_ex>
            break;
 800c390:	e7f0      	b.n	800c374 <_InitHmac+0x1c>
    switch (type) {
 800c392:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c396:	e7ed      	b.n	800c374 <_InitHmac+0x1c>

0800c398 <wc_HmacUpdate>:


int wc_HmacUpdate(Hmac* hmac, const byte* msg, word32 length)
{
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	460d      	mov	r5, r1
 800c39c:	4616      	mov	r6, r2
    int ret = 0;

    if (hmac == NULL || (msg == NULL && length > 0)) {
 800c39e:	4604      	mov	r4, r0
 800c3a0:	b348      	cbz	r0, 800c3f6 <wc_HmacUpdate+0x5e>
 800c3a2:	b901      	cbnz	r1, 800c3a6 <wc_HmacUpdate+0xe>
 800c3a4:	bb3a      	cbnz	r2, 800c3f6 <wc_HmacUpdate+0x5e>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 800c3a6:	f894 3225 	ldrb.w	r3, [r4, #549]	; 0x225
 800c3aa:	b14b      	cbz	r3, 800c3c0 <wc_HmacUpdate+0x28>
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
 800c3ac:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800c3b0:	2b06      	cmp	r3, #6
 800c3b2:	d012      	beq.n	800c3da <wc_HmacUpdate+0x42>
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d017      	beq.n	800c3e8 <wc_HmacUpdate+0x50>
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	d007      	beq.n	800c3cc <wc_HmacUpdate+0x34>
 800c3bc:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
 800c3be:	bd70      	pop	{r4, r5, r6, pc}
        ret = HmacKeyInnerHash(hmac);
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f7ff ff93 	bl	800c2ec <HmacKeyInnerHash>
        if (ret != 0)
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d0f0      	beq.n	800c3ac <wc_HmacUpdate+0x14>
 800c3ca:	e7f8      	b.n	800c3be <wc_HmacUpdate+0x26>
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	4620      	mov	r0, r4
}
 800c3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 800c3d6:	f001 b899 	b.w	800d50c <wc_ShaUpdate>
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 800c3da:	4632      	mov	r2, r6
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4620      	mov	r0, r4
}
 800c3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 800c3e4:	f001 bb82 	b.w	800daec <wc_Sha256Update>
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	4620      	mov	r0, r4
}
 800c3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 800c3f2:	f003 be49 	b.w	8010088 <wc_Sha512Update>
        return BAD_FUNC_ARG;
 800c3f6:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c3fa:	e7e0      	b.n	800c3be <wc_HmacUpdate+0x26>

0800c3fc <wc_HmacFinal>:


int wc_HmacFinal(Hmac* hmac, byte* hash)
{
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	460d      	mov	r5, r1
    int ret;

    if (hmac == NULL || hash == NULL) {
 800c400:	4604      	mov	r4, r0
 800c402:	b158      	cbz	r0, 800c41c <wc_HmacFinal+0x20>
 800c404:	b151      	cbz	r1, 800c41c <wc_HmacFinal+0x20>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 800c406:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
 800c40a:	b153      	cbz	r3, 800c422 <wc_HmacFinal+0x26>
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
 800c40c:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800c410:	2b06      	cmp	r3, #6
 800c412:	d02b      	beq.n	800c46c <wc_HmacFinal+0x70>
 800c414:	2b08      	cmp	r3, #8
 800c416:	d045      	beq.n	800c4a4 <wc_HmacFinal+0xa8>
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d007      	beq.n	800c42c <wc_HmacFinal+0x30>
        return BAD_FUNC_ARG;
 800c41c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c420:	e003      	b.n	800c42a <wc_HmacFinal+0x2e>
        ret = HmacKeyInnerHash(hmac);
 800c422:	f7ff ff63 	bl	800c2ec <HmacKeyInnerHash>
        if (ret != 0)
 800c426:	2800      	cmp	r0, #0
 800c428:	d0f0      	beq.n	800c40c <wc_HmacFinal+0x10>
    if (ret == 0) {
        hmac->innerHashKeyed = 0;
    }

    return ret;
}
 800c42a:	bd70      	pop	{r4, r5, r6, pc}
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
 800c42c:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 800c430:	4631      	mov	r1, r6
 800c432:	4620      	mov	r0, r4
 800c434:	f001 f8d2 	bl	800d5dc <wc_ShaFinal>
            if (ret != 0)
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1f6      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
 800c43c:	2240      	movs	r2, #64	; 0x40
 800c43e:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800c442:	4620      	mov	r0, r4
 800c444:	f001 f862 	bl	800d50c <wc_ShaUpdate>
            if (ret != 0)
 800c448:	2800      	cmp	r0, #0
 800c44a:	d1ee      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
 800c44c:	2214      	movs	r2, #20
 800c44e:	4631      	mov	r1, r6
 800c450:	4620      	mov	r0, r4
 800c452:	f001 f85b 	bl	800d50c <wc_ShaUpdate>
            if (ret != 0)
 800c456:	2800      	cmp	r0, #0
 800c458:	d1e7      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
 800c45a:	4629      	mov	r1, r5
 800c45c:	4620      	mov	r0, r4
 800c45e:	f001 f8bd 	bl	800d5dc <wc_ShaFinal>
    if (ret == 0) {
 800c462:	2800      	cmp	r0, #0
 800c464:	d1e1      	bne.n	800c42a <wc_HmacFinal+0x2e>
        hmac->innerHashKeyed = 0;
 800c466:	f884 0225 	strb.w	r0, [r4, #549]	; 0x225
 800c46a:	e7de      	b.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
 800c46c:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 800c470:	4631      	mov	r1, r6
 800c472:	4620      	mov	r0, r4
 800c474:	f001 fb92 	bl	800db9c <wc_Sha256Final>
            if (ret != 0)
 800c478:	2800      	cmp	r0, #0
 800c47a:	d1d6      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
 800c47c:	2240      	movs	r2, #64	; 0x40
 800c47e:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800c482:	4620      	mov	r0, r4
 800c484:	f001 fb32 	bl	800daec <wc_Sha256Update>
            if (ret != 0)
 800c488:	2800      	cmp	r0, #0
 800c48a:	d1ce      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
 800c48c:	2220      	movs	r2, #32
 800c48e:	4631      	mov	r1, r6
 800c490:	4620      	mov	r0, r4
 800c492:	f001 fb2b 	bl	800daec <wc_Sha256Update>
            if (ret != 0)
 800c496:	2800      	cmp	r0, #0
 800c498:	d1c7      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
 800c49a:	4629      	mov	r1, r5
 800c49c:	4620      	mov	r0, r4
 800c49e:	f001 fb7d 	bl	800db9c <wc_Sha256Final>
            break;
 800c4a2:	e7de      	b.n	800c462 <wc_HmacFinal+0x66>
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
 800c4a4:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f003 fdc2 	bl	8010034 <wc_Sha512Final>
            if (ret != 0)
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d1ba      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
 800c4b4:	2280      	movs	r2, #128	; 0x80
 800c4b6:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f003 fde4 	bl	8010088 <wc_Sha512Update>
            if (ret != 0)
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d1b2      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
 800c4c4:	2240      	movs	r2, #64	; 0x40
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f003 fddd 	bl	8010088 <wc_Sha512Update>
            if (ret != 0)
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d1ab      	bne.n	800c42a <wc_HmacFinal+0x2e>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f003 fdad 	bl	8010034 <wc_Sha512Final>
            break;
 800c4da:	e7c2      	b.n	800c462 <wc_HmacFinal+0x66>

0800c4dc <wc_HmacInit>:
    #undef wc_HmacFinal

#else
/* Initialize Hmac for use with async device */
int wc_HmacInit(Hmac* hmac, void* heap, int devId)
{
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	460d      	mov	r5, r1
    int ret = 0;

    if (hmac == NULL)
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	b150      	cbz	r0, 800c4fa <wc_HmacInit+0x1e>
        return BAD_FUNC_ARG;

    XMEMSET(hmac, 0, sizeof(Hmac));
 800c4e4:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f00e fda1 	bl	801b030 <memset>
    hmac->macType = WC_HASH_TYPE_NONE;
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
    hmac->heap = heap;
 800c4f4:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 800c4fa:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800c4fe:	e7fb      	b.n	800c4f8 <wc_HmacInit+0x1c>

0800c500 <wc_HmacFree>:
}
#endif /* WOLF_PRIVATE_KEY_ID */

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
 800c500:	b510      	push	{r4, lr}
    if (hmac == NULL)
 800c502:	4604      	mov	r4, r0
 800c504:	b170      	cbz	r0, 800c524 <wc_HmacFree+0x24>

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
    wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (hmac->macType) {
 800c506:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
 800c50a:	2b06      	cmp	r3, #6
 800c50c:	d00b      	beq.n	800c526 <wc_HmacFree+0x26>
 800c50e:	2b08      	cmp	r3, #8
 800c510:	d00c      	beq.n	800c52c <wc_HmacFree+0x2c>
 800c512:	2b04      	cmp	r3, #4
 800c514:	d101      	bne.n	800c51a <wc_HmacFree+0x1a>
            break;
    #endif /* !NO_MD5 */

    #ifndef NO_SHA
        case WC_SHA:
            wc_ShaFree(&hmac->hash.sha);
 800c516:	f001 f8d9 	bl	800d6cc <wc_ShaFree>
            break;
 800c51a:	f504 730a 	add.w	r3, r4, #552	; 0x228
 800c51e:	2200      	movs	r2, #0
 800c520:	429c      	cmp	r4, r3
 800c522:	d106      	bne.n	800c532 <wc_HmacFree+0x32>
        default:
            break;
    }

    ForceZero(hmac, sizeof(*hmac));
}
 800c524:	bd10      	pop	{r4, pc}
            wc_Sha256Free(&hmac->hash.sha256);
 800c526:	f001 fbc3 	bl	800dcb0 <wc_Sha256Free>
            break;
 800c52a:	e7f6      	b.n	800c51a <wc_HmacFree+0x1a>
            wc_Sha512Free(&hmac->hash.sha512);
 800c52c:	f003 fe1b 	bl	8010166 <wc_Sha512Free>
            break;
 800c530:	e7f3      	b.n	800c51a <wc_HmacFree+0x1a>
 800c532:	f804 2b01 	strb.w	r2, [r4], #1
 800c536:	e7f3      	b.n	800c520 <wc_HmacFree+0x20>

0800c538 <wc_HmacSetKey>:
{
 800c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53c:	460f      	mov	r7, r1
 800c53e:	4616      	mov	r6, r2
 800c540:	461d      	mov	r5, r3
    if (hmac == NULL || (key == NULL && length != 0) ||
 800c542:	4604      	mov	r4, r0
 800c544:	2800      	cmp	r0, #0
 800c546:	d07c      	beq.n	800c642 <wc_HmacSetKey+0x10a>
 800c548:	b90a      	cbnz	r2, 800c54e <wc_HmacSetKey+0x16>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d179      	bne.n	800c642 <wc_HmacSetKey+0x10a>
            type == WC_SHA384 || type == WC_SHA512 ||
 800c54e:	1efb      	subs	r3, r7, #3
    if (hmac == NULL || (key == NULL && length != 0) ||
 800c550:	2b05      	cmp	r3, #5
 800c552:	d903      	bls.n	800c55c <wc_HmacSetKey+0x24>
            type == WC_SHA384 || type == WC_SHA512 ||
 800c554:	f1a7 030a 	sub.w	r3, r7, #10
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d872      	bhi.n	800c642 <wc_HmacSetKey+0x10a>
    if (hmac->macType != WC_HASH_TYPE_NONE) {
 800c55c:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800c560:	b113      	cbz	r3, 800c568 <wc_HmacSetKey+0x30>
        wc_HmacFree(hmac);
 800c562:	4620      	mov	r0, r4
 800c564:	f7ff ffcc 	bl	800c500 <wc_HmacFree>
    hmac->innerHashKeyed = 0;
 800c568:	2200      	movs	r2, #0
 800c56a:	f884 2225 	strb.w	r2, [r4, #549]	; 0x225
    hmac->macType = (byte)type;
 800c56e:	f884 7224 	strb.w	r7, [r4, #548]	; 0x224
    ret = _InitHmac(hmac, type, heap);
 800c572:	4639      	mov	r1, r7
 800c574:	4620      	mov	r0, r4
 800c576:	f7ff feef 	bl	800c358 <_InitHmac>
    if (ret != 0)
 800c57a:	4680      	mov	r8, r0
 800c57c:	bbb0      	cbnz	r0, 800c5ec <wc_HmacSetKey+0xb4>
    switch (hmac->macType) {
 800c57e:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 800c582:	2b06      	cmp	r3, #6
    ip = (byte*)hmac->ipad;
 800c584:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
    switch (hmac->macType) {
 800c588:	d033      	beq.n	800c5f2 <wc_HmacSetKey+0xba>
 800c58a:	2b08      	cmp	r3, #8
 800c58c:	d041      	beq.n	800c612 <wc_HmacSetKey+0xda>
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d157      	bne.n	800c642 <wc_HmacSetKey+0x10a>
            if (length <= WC_SHA_BLOCK_SIZE) {
 800c592:	2d40      	cmp	r5, #64	; 0x40
 800c594:	d809      	bhi.n	800c5aa <wc_HmacSetKey+0x72>
                if (key != NULL) {
 800c596:	b126      	cbz	r6, 800c5a2 <wc_HmacSetKey+0x6a>
                    XMEMCPY(ip, key, length);
 800c598:	462a      	mov	r2, r5
 800c59a:	4631      	mov	r1, r6
 800c59c:	4638      	mov	r0, r7
 800c59e:	f00e fd1f 	bl	801afe0 <memcpy>
            hmac_block_size = WC_SHA_BLOCK_SIZE;
 800c5a2:	2640      	movs	r6, #64	; 0x40
        if (length < hmac_block_size)
 800c5a4:	42b5      	cmp	r5, r6
 800c5a6:	d214      	bcs.n	800c5d2 <wc_HmacSetKey+0x9a>
 800c5a8:	e00e      	b.n	800c5c8 <wc_HmacSetKey+0x90>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 ffac 	bl	800d50c <wc_ShaUpdate>
                if (ret != 0)
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d147      	bne.n	800c648 <wc_HmacSetKey+0x110>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f001 f80e 	bl	800d5dc <wc_ShaFinal>
                if (ret != 0)
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d141      	bne.n	800c648 <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA_BLOCK_SIZE;
 800c5c4:	2640      	movs	r6, #64	; 0x40
                length = WC_SHA_DIGEST_SIZE;
 800c5c6:	2514      	movs	r5, #20
            XMEMSET(ip + length, 0, hmac_block_size - length);
 800c5c8:	1b72      	subs	r2, r6, r5
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	1978      	adds	r0, r7, r5
 800c5ce:	f00e fd2f 	bl	801b030 <memset>
 800c5d2:	34df      	adds	r4, #223	; 0xdf
 800c5d4:	4426      	add	r6, r4
            op[i] = (byte)(ip[i] ^ OPAD);
 800c5d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c5da:	f083 025c 	eor.w	r2, r3, #92	; 0x5c
        for(i = 0; i < hmac_block_size; i++) {
 800c5de:	42b4      	cmp	r4, r6
            ip[i] ^= IPAD;
 800c5e0:	f083 0336 	eor.w	r3, r3, #54	; 0x36
            op[i] = (byte)(ip[i] ^ OPAD);
 800c5e4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
            ip[i] ^= IPAD;
 800c5e8:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < hmac_block_size; i++) {
 800c5ea:	d1f4      	bne.n	800c5d6 <wc_HmacSetKey+0x9e>
}
 800c5ec:	4640      	mov	r0, r8
 800c5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (length <= WC_SHA256_BLOCK_SIZE) {
 800c5f2:	2d40      	cmp	r5, #64	; 0x40
 800c5f4:	d9cf      	bls.n	800c596 <wc_HmacSetKey+0x5e>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f001 fa76 	bl	800daec <wc_Sha256Update>
                if (ret != 0)
 800c600:	bb10      	cbnz	r0, 800c648 <wc_HmacSetKey+0x110>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
 800c602:	4639      	mov	r1, r7
 800c604:	4620      	mov	r0, r4
 800c606:	f001 fac9 	bl	800db9c <wc_Sha256Final>
                if (ret != 0)
 800c60a:	b9e8      	cbnz	r0, 800c648 <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA256_BLOCK_SIZE;
 800c60c:	2640      	movs	r6, #64	; 0x40
                length = WC_SHA256_DIGEST_SIZE;
 800c60e:	2520      	movs	r5, #32
 800c610:	e7da      	b.n	800c5c8 <wc_HmacSetKey+0x90>
            if (length <= WC_SHA512_BLOCK_SIZE) {
 800c612:	2d80      	cmp	r5, #128	; 0x80
 800c614:	d807      	bhi.n	800c626 <wc_HmacSetKey+0xee>
                if (key != NULL) {
 800c616:	b126      	cbz	r6, 800c622 <wc_HmacSetKey+0xea>
                    XMEMCPY(ip, key, length);
 800c618:	462a      	mov	r2, r5
 800c61a:	4631      	mov	r1, r6
 800c61c:	4638      	mov	r0, r7
 800c61e:	f00e fcdf 	bl	801afe0 <memcpy>
            hmac_block_size = WC_SHA512_BLOCK_SIZE;
 800c622:	2680      	movs	r6, #128	; 0x80
 800c624:	e7be      	b.n	800c5a4 <wc_HmacSetKey+0x6c>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
 800c626:	462a      	mov	r2, r5
 800c628:	4631      	mov	r1, r6
 800c62a:	4620      	mov	r0, r4
 800c62c:	f003 fd2c 	bl	8010088 <wc_Sha512Update>
                if (ret != 0)
 800c630:	b950      	cbnz	r0, 800c648 <wc_HmacSetKey+0x110>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
 800c632:	4639      	mov	r1, r7
 800c634:	4620      	mov	r0, r4
 800c636:	f003 fcfd 	bl	8010034 <wc_Sha512Final>
                if (ret != 0)
 800c63a:	b928      	cbnz	r0, 800c648 <wc_HmacSetKey+0x110>
            hmac_block_size = WC_SHA512_BLOCK_SIZE;
 800c63c:	2680      	movs	r6, #128	; 0x80
                length = WC_SHA512_DIGEST_SIZE;
 800c63e:	2540      	movs	r5, #64	; 0x40
 800c640:	e7c2      	b.n	800c5c8 <wc_HmacSetKey+0x90>
    switch (hmac->macType) {
 800c642:	f06f 08ac 	mvn.w	r8, #172	; 0xac
 800c646:	e7d1      	b.n	800c5ec <wc_HmacSetKey+0xb4>
    if (ret == 0) {
 800c648:	4680      	mov	r8, r0
 800c64a:	e7cf      	b.n	800c5ec <wc_HmacSetKey+0xb4>

0800c64c <wolfSSL_GetHmacMaxSize>:
#endif /* WOLFSSL_KCAPI_HMAC */

int wolfSSL_GetHmacMaxSize(void)
{
    return WC_MAX_DIGEST_SIZE;
}
 800c64c:	2040      	movs	r0, #64	; 0x40
 800c64e:	4770      	bx	lr

0800c650 <wc_rng_new>:
}


WOLFSSL_ABI
WC_RNG* wc_rng_new(byte* nonce, word32 nonceSz, void* heap)
{
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	4604      	mov	r4, r0
    WC_RNG* rng;

    rng = (WC_RNG*)XMALLOC(sizeof(WC_RNG), heap, DYNAMIC_TYPE_RNG);
 800c654:	2008      	movs	r0, #8
{
 800c656:	460e      	mov	r6, r1
 800c658:	4615      	mov	r5, r2
    rng = (WC_RNG*)XMALLOC(sizeof(WC_RNG), heap, DYNAMIC_TYPE_RNG);
 800c65a:	f00e fca1 	bl	801afa0 <malloc>
 800c65e:	4603      	mov	r3, r0
    if (rng) {
 800c660:	b110      	cbz	r0, 800c668 <wc_rng_new+0x18>
    if (nonce == NULL && nonceSz != 0)
 800c662:	b904      	cbnz	r4, 800c666 <wc_rng_new+0x16>
 800c664:	b916      	cbnz	r6, 800c66c <wc_rng_new+0x1c>
    rng->heap = heap;
 800c666:	605d      	str	r5, [r3, #4]
            rng = NULL;
        }
    }

    return rng;
}
 800c668:	4618      	mov	r0, r3
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
            XFREE(rng, heap, DYNAMIC_TYPE_RNG);
 800c66c:	f00e fca0 	bl	801afb0 <free>
            rng = NULL;
 800c670:	4623      	mov	r3, r4
    return rng;
 800c672:	e7f9      	b.n	800c668 <wc_rng_new+0x18>

0800c674 <wc_rng_free>:


WOLFSSL_ABI
void wc_rng_free(WC_RNG* rng)
{
    if (rng) {
 800c674:	b150      	cbz	r0, 800c68c <wc_rng_free+0x18>
 800c676:	f100 0208 	add.w	r2, r0, #8
 800c67a:	4603      	mov	r3, r0
 800c67c:	2100      	movs	r1, #0
 800c67e:	4293      	cmp	r3, r2
 800c680:	d101      	bne.n	800c686 <wc_rng_free+0x12>
        void* heap = rng->heap;

        wc_FreeRng(rng);
        ForceZero(rng, sizeof(WC_RNG));
        XFREE(rng, heap, DYNAMIC_TYPE_RNG);
 800c682:	f00e bc95 	b.w	801afb0 <free>
 800c686:	f803 1b01 	strb.w	r1, [r3], #1
 800c68a:	e7f8      	b.n	800c67e <wc_rng_free+0xa>
        (void)heap;
    }
}
 800c68c:	4770      	bx	lr

0800c68e <wc_InitRng_ex>:
    if (rng == NULL)
 800c68e:	b110      	cbz	r0, 800c696 <wc_InitRng_ex+0x8>
    rng->heap = heap;
 800c690:	6041      	str	r1, [r0, #4]
    return ret;
 800c692:	2000      	movs	r0, #0
 800c694:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800c696:	f06f 00ac 	mvn.w	r0, #172	; 0xac


int wc_InitRng_ex(WC_RNG* rng, void* heap, int devId)
{
    return _InitRng(rng, NULL, 0, heap, devId);
}
 800c69a:	4770      	bx	lr

0800c69c <wc_RNG_GenerateBlock>:


/* place a generated block in output */
WOLFSSL_ABI
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	460d      	mov	r5, r1
 800c6a0:	4614      	mov	r4, r2
    int ret;

    if (rng == NULL || output == NULL)
 800c6a2:	b158      	cbz	r0, 800c6bc <wc_RNG_GenerateBlock+0x20>
 800c6a4:	b151      	cbz	r1, 800c6bc <wc_RNG_GenerateBlock+0x20>
        return BAD_FUNC_ARG;

    if (sz == 0)
 800c6a6:	b162      	cbz	r2, 800c6c2 <wc_RNG_GenerateBlock+0x26>
    #endif
    }
#endif

#ifdef CUSTOM_RAND_GENERATE_BLOCK
    XMEMSET(output, 0, sz);
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f00e fcc0 	bl	801b030 <memset>
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4628      	mov	r0, r5

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
}
 800c6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
 800c6b8:	f7f3 bccc 	b.w	8000054 <my_rng_gen_block>
        return BAD_FUNC_ARG;
 800c6bc:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 800c6c0:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	e7fc      	b.n	800c6c0 <wc_RNG_GenerateBlock+0x24>

0800c6c6 <wc_RNG_GenerateByte>:


int wc_RNG_GenerateByte(WC_RNG* rng, byte* b)
{
    return wc_RNG_GenerateBlock(rng, b, 1);
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f7ff bfe8 	b.w	800c69c <wc_RNG_GenerateBlock>

0800c6cc <wc_FreeRng>:
int wc_FreeRng(WC_RNG* rng)
{
    int ret = 0;

    if (rng == NULL)
        return BAD_FUNC_ARG;
 800c6cc:	2800      	cmp	r0, #0
    if (wc_VersalTrngReset() && !ret)
        ret = WC_HW_E;
#endif

    return ret;
}
 800c6ce:	bf0c      	ite	eq
 800c6d0:	f06f 00ac 	mvneq.w	r0, #172	; 0xac
 800c6d4:	2000      	movne	r0, #0
 800c6d6:	4770      	bx	lr

0800c6d8 <ByteReverseWords>:
{
 800c6d8:	b510      	push	{r4, lr}
        word32 count = byteCount/(word32)sizeof(word32);
 800c6da:	0892      	lsrs	r2, r2, #2
        for (i = 0; i < count; i++)
 800c6dc:	2300      	movs	r3, #0
            out[i] = ByteReverseWord32(in[i]);
 800c6de:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800c6e2:	ba24      	rev	r4, r4
 800c6e4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (i = 0; i < count; i++)
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d1f7      	bne.n	800c6de <ByteReverseWords+0x6>
}
 800c6ee:	bd10      	pop	{r4, pc}

0800c6f0 <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static int Transform(wc_Sha* sha, const byte* data)
    {
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	b097      	sub	sp, #92	; 0x5c
        word32 W[WC_SHA_BLOCK_SIZE / sizeof(word32)];

        /* Copy context->state[] to working vars */
        word32 a = sha->digest[0];
 800c6f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c6f8:	930d      	str	r3, [sp, #52]	; 0x34
        word32 b = sha->digest[1];
 800c6fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c6fc:	9301      	str	r3, [sp, #4]
        word32 c = sha->digest[2];
 800c6fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c700:	9305      	str	r3, [sp, #20]
        word32 d = sha->digest[3];
 800c702:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c704:	930e      	str	r3, [sp, #56]	; 0x38
        word32 e = sha->digest[4];
 800c706:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800c708:	9312      	str	r3, [sp, #72]	; 0x48
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800c70a:	680b      	ldr	r3, [r1, #0]
 800c70c:	9306      	str	r3, [sp, #24]
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 800c70e:	9a06      	ldr	r2, [sp, #24]
 800c710:	4bd9      	ldr	r3, [pc, #868]	; (800ca78 <Transform+0x388>)
 800c712:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    {
 800c714:	9000      	str	r0, [sp, #0]
 800c716:	eb02 0e03 	add.w	lr, r2, r3
 800c71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800c71c:	9805      	ldr	r0, [sp, #20]
 800c71e:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800c722:	9d05      	ldr	r5, [sp, #20]
 800c724:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c728:	4496      	add	lr, r2
 800c72a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c72c:	eb0e 62f2 	add.w	r2, lr, r2, ror #27
 800c730:	ea80 0e04 	eor.w	lr, r0, r4
 800c734:	9801      	ldr	r0, [sp, #4]
 800c736:	ea0e 0e00 	and.w	lr, lr, r0
 800c73a:	ea8e 0e04 	eor.w	lr, lr, r4
 800c73e:	4496      	add	lr, r2
 800c740:	684a      	ldr	r2, [r1, #4]
 800c742:	9207      	str	r2, [sp, #28]
 800c744:	9801      	ldr	r0, [sp, #4]
 800c746:	9a05      	ldr	r2, [sp, #20]
 800c748:	ea82 00b0 	eor.w	r0, r2, r0, ror #2
 800c74c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c74e:	4010      	ands	r0, r2
 800c750:	9a05      	ldr	r2, [sp, #20]
 800c752:	4050      	eors	r0, r2
 800c754:	9a07      	ldr	r2, [sp, #28]
 800c756:	441a      	add	r2, r3
 800c758:	4422      	add	r2, r4
 800c75a:	4410      	add	r0, r2
 800c75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c75e:	ea4f 04b2 	mov.w	r4, r2, ror #2
 800c762:	9a01      	ldr	r2, [sp, #4]
 800c764:	ea84 07b2 	eor.w	r7, r4, r2, ror #2
 800c768:	ea07 070e 	and.w	r7, r7, lr
 800c76c:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 800c770:	eb0a 0203 	add.w	r2, sl, r3
 800c774:	442a      	add	r2, r5
 800c776:	eb00 60fe 	add.w	r0, r0, lr, ror #27
 800c77a:	9d01      	ldr	r5, [sp, #4]
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800c77c:	f8d1 b010 	ldr.w	fp, [r1, #16]
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800c780:	ea84 0cbe 	eor.w	ip, r4, lr, ror #2
 800c784:	4417      	add	r7, r2
 800c786:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 800c78a:	eb09 0203 	add.w	r2, r9, r3
 800c78e:	ea0c 0c00 	and.w	ip, ip, r0
 800c792:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800c796:	eb02 02b5 	add.w	r2, r2, r5, ror #2
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800c79a:	ea80 06be 	eor.w	r6, r0, lr, ror #2
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800c79e:	ea8c 0c04 	eor.w	ip, ip, r4
 800c7a2:	4494      	add	ip, r2
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800c7a4:	403e      	ands	r6, r7
 800c7a6:	eb0b 0203 	add.w	r2, fp, r3
 800c7aa:	4422      	add	r2, r4
 800c7ac:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 800c7b0:	4416      	add	r6, r2
 800c7b2:	694a      	ldr	r2, [r1, #20]
 800c7b4:	920f      	str	r2, [sp, #60]	; 0x3c
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 800c7b6:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800c7ba:	ea80 04b7 	eor.w	r4, r0, r7, ror #2
 800c7be:	ea04 040c 	and.w	r4, r4, ip
 800c7c2:	441a      	add	r2, r3
 800c7c4:	eb02 02be 	add.w	r2, r2, lr, ror #2
 800c7c8:	4044      	eors	r4, r0
 800c7ca:	eb06 66fc 	add.w	r6, r6, ip, ror #27
 800c7ce:	4414      	add	r4, r2
 800c7d0:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800c7d4:	698a      	ldr	r2, [r1, #24]
 800c7d6:	9210      	str	r2, [sp, #64]	; 0x40
 800c7d8:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
 800c7dc:	4035      	ands	r5, r6
 800c7de:	441a      	add	r2, r3
 800c7e0:	4402      	add	r2, r0
 800c7e2:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 800c7e6:	4415      	add	r5, r2
 800c7e8:	69ca      	ldr	r2, [r1, #28]
 800c7ea:	9211      	str	r2, [sp, #68]	; 0x44
 800c7ec:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 800c7f0:	ea8c 00b6 	eor.w	r0, ip, r6, ror #2
 800c7f4:	4020      	ands	r0, r4
 800c7f6:	441a      	add	r2, r3
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800c7f8:	f8d1 e020 	ldr.w	lr, [r1, #32]
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800c7fc:	eb05 65f4 	add.w	r5, r5, r4, ror #27
 800c800:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 800c804:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800c808:	ea80 000c 	eor.w	r0, r0, ip
 800c80c:	4410      	add	r0, r2
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800c80e:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 800c812:	eb0e 0703 	add.w	r7, lr, r3
 800c816:	402a      	ands	r2, r5
 800c818:	4467      	add	r7, ip
 800c81a:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 800c81e:	443a      	add	r2, r7
 800c820:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 800c822:	9709      	str	r7, [sp, #36]	; 0x24
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 800c824:	eb00 60f5 	add.w	r0, r0, r5, ror #27
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800c828:	ea84 0cb5 	eor.w	ip, r4, r5, ror #2
 800c82c:	441f      	add	r7, r3
 800c82e:	ea0c 0c00 	and.w	ip, ip, r0
 800c832:	eb07 06b6 	add.w	r6, r7, r6, ror #2
 800c836:	ea8c 0c04 	eor.w	ip, ip, r4
 800c83a:	eb02 62f0 	add.w	r2, r2, r0, ror #27
 800c83e:	44b4      	add	ip, r6
 800c840:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800c844:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800c846:	960a      	str	r6, [sp, #40]	; 0x28
 800c848:	ea80 08b5 	eor.w	r8, r0, r5, ror #2
 800c84c:	441e      	add	r6, r3
 800c84e:	ea08 0802 	and.w	r8, r8, r2
 800c852:	4434      	add	r4, r6
 800c854:	ea88 08b5 	eor.w	r8, r8, r5, ror #2
 800c858:	44a0      	add	r8, r4
 800c85a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c85c:	940b      	str	r4, [sp, #44]	; 0x2c
 800c85e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c860:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 800c864:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
 800c868:	441e      	add	r6, r3
 800c86a:	ea04 040c 	and.w	r4, r4, ip
 800c86e:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 800c872:	4044      	eors	r4, r0
 800c874:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 800c878:	442c      	add	r4, r5
 800c87a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800c87e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800c880:	950c      	str	r5, [sp, #48]	; 0x30
 800c882:	ea8c 07b2 	eor.w	r7, ip, r2, ror #2
 800c886:	441d      	add	r5, r3
 800c888:	ea07 0708 	and.w	r7, r7, r8
 800c88c:	4428      	add	r0, r5
 800c88e:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 800c892:	4407      	add	r7, r0
 800c894:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c896:	9002      	str	r0, [sp, #8]
 800c898:	9d02      	ldr	r5, [sp, #8]
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 800c89a:	eb04 64f8 	add.w	r4, r4, r8, ror #27
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800c89e:	ea8c 00b8 	eor.w	r0, ip, r8, ror #2
 800c8a2:	441d      	add	r5, r3
 800c8a4:	4020      	ands	r0, r4
 800c8a6:	eb05 02b2 	add.w	r2, r5, r2, ror #2
 800c8aa:	ea80 000c 	eor.w	r0, r0, ip
 800c8ae:	eb07 67f4 	add.w	r7, r7, r4, ror #27
 800c8b2:	4410      	add	r0, r2
 800c8b4:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800c8b8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800c8ba:	9203      	str	r2, [sp, #12]
 800c8bc:	ea84 06b8 	eor.w	r6, r4, r8, ror #2
 800c8c0:	403e      	ands	r6, r7
 800c8c2:	441a      	add	r2, r3
 800c8c4:	4462      	add	r2, ip
 800c8c6:	ea86 06b8 	eor.w	r6, r6, r8, ror #2
 800c8ca:	4416      	add	r6, r2
 800c8cc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800c8ce:	9204      	str	r2, [sp, #16]
 800c8d0:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 800c8d4:	ea84 01b7 	eor.w	r1, r4, r7, ror #2
 800c8d8:	4001      	ands	r1, r0
 800c8da:	441a      	add	r2, r3
 800c8dc:	eb02 02b8 	add.w	r2, r2, r8, ror #2
 800c8e0:	4061      	eors	r1, r4
 800c8e2:	4411      	add	r1, r2

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800c8e4:	9a06      	ldr	r2, [sp, #24]
 800c8e6:	9d02      	ldr	r5, [sp, #8]
 800c8e8:	ea82 020a 	eor.w	r2, r2, sl
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800c8ec:	eb06 66f0 	add.w	r6, r6, r0, ror #27
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800c8f0:	ea82 020e 	eor.w	r2, r2, lr
 800c8f4:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800c8f8:	406a      	eors	r2, r5
 800c8fa:	ea80 05b7 	eor.w	r5, r0, r7, ror #2
 800c8fe:	9206      	str	r2, [sp, #24]
 800c900:	4035      	ands	r5, r6
 800c902:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800c906:	4422      	add	r2, r4
 800c908:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 800c90c:	4415      	add	r5, r2
 800c90e:	9a07      	ldr	r2, [sp, #28]
 800c910:	ea82 0c09 	eor.w	ip, r2, r9
 800c914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c916:	ea8c 0c02 	eor.w	ip, ip, r2
 800c91a:	9a03      	ldr	r2, [sp, #12]
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 800c91c:	eb01 61f6 	add.w	r1, r1, r6, ror #27
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800c920:	ea8c 0202 	eor.w	r2, ip, r2
 800c924:	ea80 04b6 	eor.w	r4, r0, r6, ror #2
 800c928:	9207      	str	r2, [sp, #28]
 800c92a:	400c      	ands	r4, r1
 800c92c:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800c930:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 800c934:	4044      	eors	r4, r0
 800c936:	4414      	add	r4, r2
 800c938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c93a:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c93e:	ea8a 0a02 	eor.w	sl, sl, r2
 800c942:	9a04      	ldr	r2, [sp, #16]
 800c944:	ea8a 0a02 	eor.w	sl, sl, r2
 800c948:	eb05 65f1 	add.w	r5, r5, r1, ror #27
 800c94c:	ea4f 72fa 	mov.w	r2, sl, ror #31
 800c950:	ea4f 01b1 	mov.w	r1, r1, ror #2
 800c954:	9213      	str	r2, [sp, #76]	; 0x4c
 800c956:	ea81 02b6 	eor.w	r2, r1, r6, ror #2
 800c95a:	eb03 77fa 	add.w	r7, r3, sl, ror #31
 800c95e:	402a      	ands	r2, r5
 800c960:	4438      	add	r0, r7
 800c962:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 800c966:	4402      	add	r2, r0
 800c968:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c96a:	ea89 0700 	eor.w	r7, r9, r0
 800c96e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c970:	4047      	eors	r7, r0
 800c972:	9806      	ldr	r0, [sp, #24]
 800c974:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
 800c978:	ea4f 70f7 	mov.w	r0, r7, ror #31
 800c97c:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 800c980:	9014      	str	r0, [sp, #80]	; 0x50
 800c982:	ea81 00b5 	eor.w	r0, r1, r5, ror #2
 800c986:	4020      	ands	r0, r4
 800c988:	eb03 73f7 	add.w	r3, r3, r7, ror #31
 800c98c:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 800c990:	4048      	eors	r0, r1
 800c992:	4418      	add	r0, r3

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800c994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c996:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c998:	ea8b 0303 	eor.w	r3, fp, r3
 800c99c:	4073      	eors	r3, r6
 800c99e:	9e07      	ldr	r6, [sp, #28]
 800c9a0:	ea83 73f6 	eor.w	r3, r3, r6, ror #31
 800c9a4:	9308      	str	r3, [sp, #32]
 800c9a6:	9e08      	ldr	r6, [sp, #32]
 800c9a8:	4b34      	ldr	r3, [pc, #208]	; (800ca7c <Transform+0x38c>)
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800c9aa:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 800c9ae:	ea4f 04b4 	mov.w	r4, r4, ror #2
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800c9b2:	ea84 0bb5 	eor.w	fp, r4, r5, ror #2
 800c9b6:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 800c9ba:	4431      	add	r1, r6
 800c9bc:	ea8b 0b02 	eor.w	fp, fp, r2
 800c9c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c9c2:	448b      	add	fp, r1
 800c9c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c9c6:	4071      	eors	r1, r6
 800c9c8:	9e02      	ldr	r6, [sp, #8]
 800c9ca:	4071      	eors	r1, r6
 800c9cc:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 800c9d0:	eb00 60f2 	add.w	r0, r0, r2, ror #27
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800c9d4:	eb03 76f1 	add.w	r6, r3, r1, ror #31
 800c9d8:	ea84 0cb2 	eor.w	ip, r4, r2, ror #2
 800c9dc:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 800c9e0:	ea8c 0c00 	eor.w	ip, ip, r0
 800c9e4:	44ac      	add	ip, r5
 800c9e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c9e8:	9e03      	ldr	r6, [sp, #12]
 800c9ea:	ea85 050e 	eor.w	r5, r5, lr
 800c9ee:	4075      	eors	r5, r6
 800c9f0:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 800c9f4:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
 800c9f8:	ea4f 76f5 	mov.w	r6, r5, ror #31
 800c9fc:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800ca00:	9610      	str	r6, [sp, #64]	; 0x40
 800ca02:	ea80 08b2 	eor.w	r8, r0, r2, ror #2
 800ca06:	eb03 76f5 	add.w	r6, r3, r5, ror #31
 800ca0a:	4434      	add	r4, r6
 800ca0c:	ea88 080b 	eor.w	r8, r8, fp
 800ca10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ca12:	44a0      	add	r8, r4
 800ca14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ca16:	4066      	eors	r6, r4
 800ca18:	9c04      	ldr	r4, [sp, #16]
 800ca1a:	4066      	eors	r6, r4
 800ca1c:	9c08      	ldr	r4, [sp, #32]
 800ca1e:	ea86 76f4 	eor.w	r6, r6, r4, ror #31
 800ca22:	ea4f 74f6 	mov.w	r4, r6, ror #31
 800ca26:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
 800ca2a:	9411      	str	r4, [sp, #68]	; 0x44
 800ca2c:	ea80 09bb 	eor.w	r9, r0, fp, ror #2
 800ca30:	eb03 74f6 	add.w	r4, r3, r6, ror #31
 800ca34:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800ca38:	ea89 090c 	eor.w	r9, r9, ip
 800ca3c:	4491      	add	r9, r2
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800ca3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca40:	9c06      	ldr	r4, [sp, #24]
 800ca42:	ea8e 0202 	eor.w	r2, lr, r2
 800ca46:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800ca4a:	eb08 68fc 	add.w	r8, r8, ip, ror #27
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800ca4e:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 800ca52:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800ca56:	eb03 7ef2 	add.w	lr, r3, r2, ror #31
 800ca5a:	ea8c 04bb 	eor.w	r4, ip, fp, ror #2
 800ca5e:	4470      	add	r0, lr
 800ca60:	ea84 0408 	eor.w	r4, r4, r8
 800ca64:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800ca68:	4404      	add	r4, r0
 800ca6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca6c:	ea80 000e 	eor.w	r0, r0, lr
 800ca70:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800ca74:	e004      	b.n	800ca80 <Transform+0x390>
 800ca76:	bf00      	nop
 800ca78:	5a827999 	.word	0x5a827999
 800ca7c:	6ed9eba1 	.word	0x6ed9eba1
 800ca80:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 800ca84:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 800ca88:	eb09 69f8 	add.w	r9, r9, r8, ror #27
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800ca8c:	9009      	str	r0, [sp, #36]	; 0x24
 800ca8e:	ea8c 0eb8 	eor.w	lr, ip, r8, ror #2
 800ca92:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800ca96:	eb00 00bb 	add.w	r0, r0, fp, ror #2
 800ca9a:	ea8e 0e09 	eor.w	lr, lr, r9
 800ca9e:	4486      	add	lr, r0
 800caa0:	ea4f 00b9 	mov.w	r0, r9, ror #2
 800caa4:	eb04 64f9 	add.w	r4, r4, r9, ror #27
 800caa8:	900f      	str	r0, [sp, #60]	; 0x3c
 800caaa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800caae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cab0:	ea80 0909 	eor.w	r9, r0, r9
 800cab4:	ea89 7afa 	eor.w	sl, r9, sl, ror #31
 800cab8:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
 800cabc:	ea4f 70fa 	mov.w	r0, sl, ror #31
 800cac0:	9015      	str	r0, [sp, #84]	; 0x54
 800cac2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cac4:	eb03 79fa 	add.w	r9, r3, sl, ror #31
 800cac8:	ea80 0bb8 	eor.w	fp, r0, r8, ror #2
 800cacc:	44cc      	add	ip, r9
 800cace:	ea8b 0b04 	eor.w	fp, fp, r4
 800cad2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cad4:	44e3      	add	fp, ip
 800cad6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cada:	ea80 090c 	eor.w	r9, r0, ip
 800cade:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 800cae2:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 800cae6:	ea4f 70f7 	mov.w	r0, r7, ror #31
 800caea:	900b      	str	r0, [sp, #44]	; 0x2c
 800caec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800caee:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
 800caf2:	eb03 79f7 	add.w	r9, r3, r7, ror #31
 800caf6:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
 800cafa:	eb09 08b8 	add.w	r8, r9, r8, ror #2
 800cafe:	ea8c 0c0e 	eor.w	ip, ip, lr
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cb02:	980c      	ldr	r0, [sp, #48]	; 0x30
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800cb04:	44c4      	add	ip, r8
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cb06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cb0a:	ea80 0808 	eor.w	r8, r0, r8
 800cb0e:	9808      	ldr	r0, [sp, #32]
 800cb10:	ea88 78f0 	eor.w	r8, r8, r0, ror #31
 800cb14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb16:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800cb1a:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cb1e:	900a      	str	r0, [sp, #40]	; 0x28
 800cb20:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 800cb24:	eb03 79f0 	add.w	r9, r3, r0, ror #31
 800cb28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cb2a:	ea8e 08b4 	eor.w	r8, lr, r4, ror #2
 800cb2e:	4448      	add	r0, r9
 800cb30:	ea88 080b 	eor.w	r8, r8, fp
 800cb34:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800cb38:	4480      	add	r8, r0
 800cb3a:	9802      	ldr	r0, [sp, #8]
 800cb3c:	ea80 0009 	eor.w	r0, r0, r9
 800cb40:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 800cb44:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 800cb48:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cb4c:	9002      	str	r0, [sp, #8]
 800cb4e:	ea8e 09bb 	eor.w	r9, lr, fp, ror #2
 800cb52:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800cb56:	eb00 00b4 	add.w	r0, r0, r4, ror #2
 800cb5a:	ea89 090c 	eor.w	r9, r9, ip
 800cb5e:	9c06      	ldr	r4, [sp, #24]
 800cb60:	4481      	add	r9, r0
 800cb62:	9803      	ldr	r0, [sp, #12]
 800cb64:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800cb68:	ea80 75f5 	eor.w	r5, r0, r5, ror #31
 800cb6c:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 800cb70:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 800cb74:	ea4f 70f5 	mov.w	r0, r5, ror #31
 800cb78:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 800cb7c:	900c      	str	r0, [sp, #48]	; 0x30
 800cb7e:	ea8c 04bb 	eor.w	r4, ip, fp, ror #2
 800cb82:	eb03 70f5 	add.w	r0, r3, r5, ror #31
 800cb86:	4470      	add	r0, lr
 800cb88:	ea84 0408 	eor.w	r4, r4, r8
 800cb8c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800cb90:	4404      	add	r4, r0
 800cb92:	9804      	ldr	r0, [sp, #16]
 800cb94:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 800cb98:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800cb9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cb9e:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800cba2:	ea4f 76f0 	mov.w	r6, r0, ror #31
 800cba6:	eb09 69f8 	add.w	r9, r9, r8, ror #27
 800cbaa:	960f      	str	r6, [sp, #60]	; 0x3c
 800cbac:	eb03 7ef0 	add.w	lr, r3, r0, ror #31
 800cbb0:	ea8c 06b8 	eor.w	r6, ip, r8, ror #2
 800cbb4:	eb0e 0ebb 	add.w	lr, lr, fp, ror #2
 800cbb8:	ea86 0609 	eor.w	r6, r6, r9
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cbbc:	f8dd b018 	ldr.w	fp, [sp, #24]
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cbc0:	4476      	add	r6, lr
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cbc2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800cbc6:	ea8e 7efb 	eor.w	lr, lr, fp, ror #31
 800cbca:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cbce:	ea8e 7ef2 	eor.w	lr, lr, r2, ror #31
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cbd2:	eb04 64f9 	add.w	r4, r4, r9, ror #27
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cbd6:	ea8e 7efb 	eor.w	lr, lr, fp, ror #31
 800cbda:	ea4f 09b9 	mov.w	r9, r9, ror #2
 800cbde:	f8cd e00c 	str.w	lr, [sp, #12]
 800cbe2:	ea89 0bb8 	eor.w	fp, r9, r8, ror #2
 800cbe6:	eb03 7efe 	add.w	lr, r3, lr, ror #31
 800cbea:	44f4      	add	ip, lr
 800cbec:	ea8b 0b04 	eor.w	fp, fp, r4
 800cbf0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800cbf4:	44e3      	add	fp, ip
 800cbf6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800cbfa:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 800cbfe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800cc02:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 800cc06:	ea8c 7cf5 	eor.w	ip, ip, r5, ror #31
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 800cc0a:	eb06 66f4 	add.w	r6, r6, r4, ror #27
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cc0e:	f8cd c010 	str.w	ip, [sp, #16]
 800cc12:	ea89 0eb4 	eor.w	lr, r9, r4, ror #2
 800cc16:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 800cc1a:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
 800cc1e:	ea8e 0e06 	eor.w	lr, lr, r6
 800cc22:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
 800cc26:	ea4f 08b6 	mov.w	r8, r6, ror #2
 800cc2a:	44e6      	add	lr, ip
 800cc2c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800cc2e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800cc32:	ea86 76fc 	eor.w	r6, r6, ip, ror #31
 800cc36:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
 800cc3a:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 800cc3e:	ea4f 76fa 	mov.w	r6, sl, ror #31
 800cc42:	9613      	str	r6, [sp, #76]	; 0x4c
 800cc44:	eb03 7cfa 	add.w	ip, r3, sl, ror #31
 800cc48:	ea88 06b4 	eor.w	r6, r8, r4, ror #2
 800cc4c:	44cc      	add	ip, r9
 800cc4e:	ea86 060b 	eor.w	r6, r6, fp
 800cc52:	4466      	add	r6, ip
 800cc54:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800cc58:	ea8c 79f1 	eor.w	r9, ip, r1, ror #31
 800cc5c:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 800cc60:	9f03      	ldr	r7, [sp, #12]
 800cc62:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 800cc66:	ea4f 77f9 	mov.w	r7, r9, ror #31
 800cc6a:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
 800cc6e:	eb03 7cf9 	add.w	ip, r3, r9, ror #31
 800cc72:	9714      	str	r7, [sp, #80]	; 0x50
 800cc74:	ea88 07bb 	eor.w	r7, r8, fp, ror #2
 800cc78:	eb0c 04b4 	add.w	r4, ip, r4, ror #2
 800cc7c:	ea87 070e 	eor.w	r7, r7, lr
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800cc80:	f8dd c020 	ldr.w	ip, [sp, #32]
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cc84:	4427      	add	r7, r4
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800cc86:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800cc88:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800cc8c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800cc90:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800cc94:	f8dd c010 	ldr.w	ip, [sp, #16]
 800cc98:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800cc9c:	9406      	str	r4, [sp, #24]
 800cc9e:	f8dd c018 	ldr.w	ip, [sp, #24]
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cca2:	eb06 66fe 	add.w	r6, r6, lr, ror #27
 800cca6:	ea4f 0ebe 	mov.w	lr, lr, ror #2
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800ccaa:	ea8e 04bb 	eor.w	r4, lr, fp, ror #2
 800ccae:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 800ccb2:	44c4      	add	ip, r8
 800ccb4:	4074      	eors	r4, r6
 800ccb6:	4464      	add	r4, ip
 800ccb8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800ccbc:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
 800ccc0:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ccc4:	ea81 71fc 	eor.w	r1, r1, ip, ror #31
 800ccc8:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 800cccc:	eb07 67f6 	add.w	r7, r7, r6, ror #27
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 800ccd0:	9107      	str	r1, [sp, #28]
 800ccd2:	ea8e 0cb6 	eor.w	ip, lr, r6, ror #2
 800ccd6:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800ccda:	eb01 01bb 	add.w	r1, r1, fp, ror #2
 800ccde:	ea8c 0c07 	eor.w	ip, ip, r7
 800cce2:	448c      	add	ip, r1
 800cce4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cce6:	ea81 78f2 	eor.w	r8, r1, r2, ror #31
 800ccea:	ea88 78f5 	eor.w	r8, r8, r5, ror #31
 800ccee:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800ccf2:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 800ccf6:	ea4f 71f8 	mov.w	r1, r8, ror #31
 800ccfa:	ea4f 07b7 	mov.w	r7, r7, ror #2
 800ccfe:	9110      	str	r1, [sp, #64]	; 0x40
 800cd00:	ea87 0bb6 	eor.w	fp, r7, r6, ror #2
 800cd04:	eb03 71f8 	add.w	r1, r3, r8, ror #31
 800cd08:	4471      	add	r1, lr
 800cd0a:	ea8b 0b04 	eor.w	fp, fp, r4
 800cd0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cd10:	448b      	add	fp, r1
 800cd12:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cd14:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 800cd18:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 800cd1c:	9906      	ldr	r1, [sp, #24]
 800cd1e:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 800cd22:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
 800cd26:	ea87 0eb4 	eor.w	lr, r7, r4, ror #2
 800cd2a:	eb03 73f0 	add.w	r3, r3, r0, ror #31
 800cd2e:	ea8e 0e0c 	eor.w	lr, lr, ip
 800cd32:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 800cd36:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
 800cd3a:	4473      	add	r3, lr
 800cd3c:	eb03 6efb 	add.w	lr, r3, fp, ror #27

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800cd40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd42:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 800cd46:	9b03      	ldr	r3, [sp, #12]
 800cd48:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
 800cd4c:	9b07      	ldr	r3, [sp, #28]
 800cd4e:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 800cd52:	ea4b 02bc 	orr.w	r2, fp, ip, ror #2
 800cd56:	9308      	str	r3, [sp, #32]
 800cd58:	ea4f 71f0 	mov.w	r1, r0, ror #31
 800cd5c:	ea0b 03bc 	and.w	r3, fp, ip, ror #2
 800cd60:	ea02 02b4 	and.w	r2, r2, r4, ror #2
 800cd64:	9111      	str	r1, [sp, #68]	; 0x44
 800cd66:	431a      	orrs	r2, r3
 800cd68:	9908      	ldr	r1, [sp, #32]
 800cd6a:	4bd9      	ldr	r3, [pc, #868]	; (800d0d0 <Transform+0x9e0>)
 800cd6c:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800cd70:	4439      	add	r1, r7
 800cd72:	440a      	add	r2, r1
 800cd74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd76:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
 800cd7a:	9904      	ldr	r1, [sp, #16]
 800cd7c:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 800cd80:	ea86 71f8 	eor.w	r1, r6, r8, ror #31
 800cd84:	9109      	str	r1, [sp, #36]	; 0x24
 800cd86:	ea4e 01bb 	orr.w	r1, lr, fp, ror #2
 800cd8a:	ea01 05bc 	and.w	r5, r1, ip, ror #2
 800cd8e:	ea0e 01bb 	and.w	r1, lr, fp, ror #2
 800cd92:	4329      	orrs	r1, r5
 800cd94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cd96:	eb03 75f5 	add.w	r5, r3, r5, ror #31
 800cd9a:	eb05 04b4 	add.w	r4, r5, r4, ror #2
 800cd9e:	4421      	add	r1, r4
 800cda0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cda2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800cda4:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800cda8:	ea84 7afa 	eor.w	sl, r4, sl, ror #31
 800cdac:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 800cdb0:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 800cdb4:	ea42 07be 	orr.w	r7, r2, lr, ror #2
 800cdb8:	ea4f 74fa 	mov.w	r4, sl, ror #31
 800cdbc:	9415      	str	r4, [sp, #84]	; 0x54
 800cdbe:	ea07 04bb 	and.w	r4, r7, fp, ror #2
 800cdc2:	ea02 07be 	and.w	r7, r2, lr, ror #2
 800cdc6:	4327      	orrs	r7, r4
 800cdc8:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 800cdcc:	9d02      	ldr	r5, [sp, #8]
 800cdce:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 800cdd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cdd4:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800cdd8:	ea84 79f9 	eor.w	r9, r4, r9, ror #31
 800cddc:	9c08      	ldr	r4, [sp, #32]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800cdde:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800cde0:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 800cde4:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 800cde8:	ea41 06b2 	orr.w	r6, r1, r2, ror #2
 800cdec:	ea4f 74f9 	mov.w	r4, r9, ror #31
 800cdf0:	940b      	str	r4, [sp, #44]	; 0x2c
 800cdf2:	ea06 04be 	and.w	r4, r6, lr, ror #2
 800cdf6:	ea01 06b2 	and.w	r6, r1, r2, ror #2
 800cdfa:	4326      	orrs	r6, r4
 800cdfc:	eb03 74f9 	add.w	r4, r3, r9, ror #31
 800ce00:	eb04 04bb 	add.w	r4, r4, fp, ror #2
 800ce04:	4426      	add	r6, r4
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800ce06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ce08:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800ce0c:	9d06      	ldr	r5, [sp, #24]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800ce0e:	4467      	add	r7, ip
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800ce10:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800ce14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ce16:	f8dd c008 	ldr.w	ip, [sp, #8]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800ce1a:	eb07 67f1 	add.w	r7, r7, r1, ror #27
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800ce1e:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 800ce22:	ea47 05b1 	orr.w	r5, r7, r1, ror #2
 800ce26:	940a      	str	r4, [sp, #40]	; 0x28
 800ce28:	ea05 04b2 	and.w	r4, r5, r2, ror #2
 800ce2c:	ea07 05b1 	and.w	r5, r7, r1, ror #2
 800ce30:	4325      	orrs	r5, r4
 800ce32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ce34:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800ce38:	eb04 04be 	add.w	r4, r4, lr, ror #2
 800ce3c:	4425      	add	r5, r4
 800ce3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ce40:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800ce44:	f8dd c01c 	ldr.w	ip, [sp, #28]
        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 800ce48:	eb06 66f7 	add.w	r6, r6, r7, ror #27
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800ce4c:	ea84 74fc 	eor.w	r4, r4, ip, ror #31
 800ce50:	ea46 0eb7 	orr.w	lr, r6, r7, ror #2
 800ce54:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
 800ce58:	9402      	str	r4, [sp, #8]
 800ce5a:	ea0e 04b1 	and.w	r4, lr, r1, ror #2
 800ce5e:	ea06 0eb7 	and.w	lr, r6, r7, ror #2
 800ce62:	ea44 0e0e 	orr.w	lr, r4, lr
 800ce66:	9c02      	ldr	r4, [sp, #8]
 800ce68:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800ce6c:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800ce70:	4496      	add	lr, r2
 800ce72:	9c03      	ldr	r4, [sp, #12]
 800ce74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce76:	ea82 7cf4 	eor.w	ip, r2, r4, ror #31
 800ce7a:	ea8c 78f8 	eor.w	r8, ip, r8, ror #31
 800ce7e:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 800ce82:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800ce86:	ea45 04b6 	orr.w	r4, r5, r6, ror #2
 800ce8a:	ea4f 72f8 	mov.w	r2, r8, ror #31
 800ce8e:	920c      	str	r2, [sp, #48]	; 0x30
 800ce90:	ea04 02b7 	and.w	r2, r4, r7, ror #2
 800ce94:	ea05 04b6 	and.w	r4, r5, r6, ror #2
 800ce98:	4314      	orrs	r4, r2
 800ce9a:	eb03 72f8 	add.w	r2, r3, r8, ror #31
 800ce9e:	eb02 02b1 	add.w	r2, r2, r1, ror #2
 800cea2:	4414      	add	r4, r2
 800cea4:	9904      	ldr	r1, [sp, #16]
 800cea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cea8:	ea82 71f1 	eor.w	r1, r2, r1, ror #31
 800ceac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceae:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 800ceb2:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 800ceb6:	ea81 71f2 	eor.w	r1, r1, r2, ror #31
 800ceba:	ea4e 0cb5 	orr.w	ip, lr, r5, ror #2
 800cebe:	ea4f 72f1 	mov.w	r2, r1, ror #31
 800cec2:	920f      	str	r2, [sp, #60]	; 0x3c
 800cec4:	ea0c 02b6 	and.w	r2, ip, r6, ror #2
 800cec8:	ea0e 0cb5 	and.w	ip, lr, r5, ror #2
 800cecc:	ea42 0c0c 	orr.w	ip, r2, ip
 800ced0:	eb03 72f1 	add.w	r2, r3, r1, ror #31
 800ced4:	eb02 02b7 	add.w	r2, r2, r7, ror #2
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800ced8:	9803      	ldr	r0, [sp, #12]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800ceda:	4494      	add	ip, r2
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800cedc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cede:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800cee2:	9808      	ldr	r0, [sp, #32]
 800cee4:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800cee8:	9802      	ldr	r0, [sp, #8]
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800ceea:	eb04 64fe 	add.w	r4, r4, lr, ror #27
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800ceee:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800cef2:	9203      	str	r2, [sp, #12]
 800cef4:	ea44 02be 	orr.w	r2, r4, lr, ror #2
 800cef8:	ea02 00b5 	and.w	r0, r2, r5, ror #2
 800cefc:	ea04 02be 	and.w	r2, r4, lr, ror #2
 800cf00:	4302      	orrs	r2, r0
 800cf02:	9803      	ldr	r0, [sp, #12]
 800cf04:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800cf08:	eb00 00b6 	add.w	r0, r0, r6, ror #2
 800cf0c:	4402      	add	r2, r0
 800cf0e:	9e04      	ldr	r6, [sp, #16]
 800cf10:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cf12:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800cf16:	9e09      	ldr	r6, [sp, #36]	; 0x24
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 800cf18:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800cf1c:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800cf20:	ea4c 0bb4 	orr.w	fp, ip, r4, ror #2
 800cf24:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 800cf28:	9004      	str	r0, [sp, #16]
 800cf2a:	ea0b 00be 	and.w	r0, fp, lr, ror #2
 800cf2e:	ea0c 0bb4 	and.w	fp, ip, r4, ror #2
 800cf32:	ea40 0b0b 	orr.w	fp, r0, fp
 800cf36:	9804      	ldr	r0, [sp, #16]
 800cf38:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800cf3c:	eb00 00b5 	add.w	r0, r0, r5, ror #2
 800cf40:	4483      	add	fp, r0
 800cf42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cf44:	9d06      	ldr	r5, [sp, #24]
 800cf46:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
 800cf4a:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
 800cf4e:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 800cf52:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
 800cf56:	ea42 07bc 	orr.w	r7, r2, ip, ror #2
 800cf5a:	ea4f 70fa 	mov.w	r0, sl, ror #31
 800cf5e:	9013      	str	r0, [sp, #76]	; 0x4c
 800cf60:	ea07 00b4 	and.w	r0, r7, r4, ror #2
 800cf64:	ea02 07bc 	and.w	r7, r2, ip, ror #2
 800cf68:	4307      	orrs	r7, r0
 800cf6a:	eb03 70fa 	add.w	r0, r3, sl, ror #31
 800cf6e:	eb00 00be 	add.w	r0, r0, lr, ror #2
 800cf72:	9d07      	ldr	r5, [sp, #28]
 800cf74:	4407      	add	r7, r0
 800cf76:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cf78:	ea80 70f5 	eor.w	r0, r0, r5, ror #31
 800cf7c:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 800cf80:	9803      	ldr	r0, [sp, #12]
 800cf82:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 800cf86:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 800cf8a:	ea4b 06b2 	orr.w	r6, fp, r2, ror #2
 800cf8e:	ea4f 70f9 	mov.w	r0, r9, ror #31
 800cf92:	9014      	str	r0, [sp, #80]	; 0x50
 800cf94:	ea06 00bc 	and.w	r0, r6, ip, ror #2
 800cf98:	ea0b 06b2 	and.w	r6, fp, r2, ror #2
 800cf9c:	4306      	orrs	r6, r0
 800cf9e:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 800cfa2:	eb00 00b4 	add.w	r0, r0, r4, ror #2
 800cfa6:	4406      	add	r6, r0
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800cfa8:	9c06      	ldr	r4, [sp, #24]
 800cfaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cfac:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 800cfb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfb2:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 800cfb6:	9804      	ldr	r0, [sp, #16]
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800cfb8:	eb07 67fb 	add.w	r7, r7, fp, ror #27
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800cfbc:	ea47 05bb 	orr.w	r5, r7, fp, ror #2
 800cfc0:	ea84 70f0 	eor.w	r0, r4, r0, ror #31
 800cfc4:	9006      	str	r0, [sp, #24]
 800cfc6:	ea05 00b2 	and.w	r0, r5, r2, ror #2
 800cfca:	ea07 05bb 	and.w	r5, r7, fp, ror #2
 800cfce:	4305      	orrs	r5, r0
 800cfd0:	9806      	ldr	r0, [sp, #24]
 800cfd2:	9c07      	ldr	r4, [sp, #28]
 800cfd4:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800cfd8:	eb00 00bc 	add.w	r0, r0, ip, ror #2
 800cfdc:	4405      	add	r5, r0
 800cfde:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cfe0:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800cfe4:	9c02      	ldr	r4, [sp, #8]
 800cfe6:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 800cfea:	eb06 66f7 	add.w	r6, r6, r7, ror #27
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800cfee:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
 800cff2:	9007      	str	r0, [sp, #28]
 800cff4:	ea46 00b7 	orr.w	r0, r6, r7, ror #2
 800cff8:	ea00 04bb 	and.w	r4, r0, fp, ror #2
 800cffc:	ea06 00b7 	and.w	r0, r6, r7, ror #2
 800d000:	4320      	orrs	r0, r4
 800d002:	9c07      	ldr	r4, [sp, #28]
 800d004:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800d008:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 800d00c:	4410      	add	r0, r2
 800d00e:	9c08      	ldr	r4, [sp, #32]
 800d010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d012:	ea82 7cf4 	eor.w	ip, r2, r4, ror #31
 800d016:	ea8c 7cf8 	eor.w	ip, ip, r8, ror #31
 800d01a:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 800d01e:	ea8c 7cf9 	eor.w	ip, ip, r9, ror #31
 800d022:	ea45 08b6 	orr.w	r8, r5, r6, ror #2
 800d026:	ea4f 72fc 	mov.w	r2, ip, ror #31
 800d02a:	9210      	str	r2, [sp, #64]	; 0x40
 800d02c:	ea08 02b7 	and.w	r2, r8, r7, ror #2
 800d030:	ea05 08b6 	and.w	r8, r5, r6, ror #2
 800d034:	ea42 0808 	orr.w	r8, r2, r8
 800d038:	eb03 72fc 	add.w	r2, r3, ip, ror #31
 800d03c:	eb02 02bb 	add.w	r2, r2, fp, ror #2
 800d040:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d042:	4490      	add	r8, r2
 800d044:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d046:	ea82 7bf4 	eor.w	fp, r2, r4, ror #31
 800d04a:	9a06      	ldr	r2, [sp, #24]
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d04c:	9c08      	ldr	r4, [sp, #32]
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800d04e:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 800d052:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 800d056:	ea8b 7bf2 	eor.w	fp, fp, r2, ror #31
 800d05a:	ea40 01b5 	orr.w	r1, r0, r5, ror #2
 800d05e:	ea4f 72fb 	mov.w	r2, fp, ror #31
 800d062:	9211      	str	r2, [sp, #68]	; 0x44
 800d064:	ea01 02b6 	and.w	r2, r1, r6, ror #2
 800d068:	ea00 01b5 	and.w	r1, r0, r5, ror #2
 800d06c:	4311      	orrs	r1, r2
 800d06e:	eb03 72fb 	add.w	r2, r3, fp, ror #31
 800d072:	eb02 07b7 	add.w	r7, r2, r7, ror #2
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d076:	9a15      	ldr	r2, [sp, #84]	; 0x54
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800d078:	4439      	add	r1, r7
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d07a:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
 800d07e:	9a03      	ldr	r2, [sp, #12]
 800d080:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d082:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 800d086:	9a07      	ldr	r2, [sp, #28]
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800d088:	eb08 68f0 	add.w	r8, r8, r0, ror #27
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d08c:	ea48 0eb0 	orr.w	lr, r8, r0, ror #2
 800d090:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
 800d094:	9208      	str	r2, [sp, #32]
 800d096:	ea0e 02b5 	and.w	r2, lr, r5, ror #2
 800d09a:	ea08 0eb0 	and.w	lr, r8, r0, ror #2
 800d09e:	ea42 0e0e 	orr.w	lr, r2, lr
 800d0a2:	9a08      	ldr	r2, [sp, #32]
 800d0a4:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800d0a8:	eb02 02b6 	add.w	r2, r2, r6, ror #2
 800d0ac:	4496      	add	lr, r2
 800d0ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0b0:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
 800d0b4:	9a04      	ldr	r2, [sp, #16]
 800d0b6:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 800d0ba:	eb01 61f8 	add.w	r1, r1, r8, ror #27
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d0be:	ea86 72fc 	eor.w	r2, r6, ip, ror #31
 800d0c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d0c4:	ea41 02b8 	orr.w	r2, r1, r8, ror #2
 800d0c8:	ea02 04b0 	and.w	r4, r2, r0, ror #2
 800d0cc:	e002      	b.n	800d0d4 <Transform+0x9e4>
 800d0ce:	bf00      	nop
 800d0d0:	8f1bbcdc 	.word	0x8f1bbcdc
 800d0d4:	ea01 02b8 	and.w	r2, r1, r8, ror #2
 800d0d8:	4322      	orrs	r2, r4
 800d0da:	9c09      	ldr	r4, [sp, #36]	; 0x24

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800d0dc:	9e03      	ldr	r6, [sp, #12]
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d0de:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800d0e2:	eb04 05b5 	add.w	r5, r4, r5, ror #2
 800d0e6:	4415      	add	r5, r2
 800d0e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d0ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d0ec:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 800d0f0:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 800d0f4:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 800d0f8:	eb0e 6ef1 	add.w	lr, lr, r1, ror #27
 800d0fc:	ea4f 72fa 	mov.w	r2, sl, ror #31
 800d100:	9215      	str	r2, [sp, #84]	; 0x54
 800d102:	ea4e 02b1 	orr.w	r2, lr, r1, ror #2
 800d106:	ea02 04b8 	and.w	r4, r2, r8, ror #2
 800d10a:	ea0e 02b1 	and.w	r2, lr, r1, ror #2
 800d10e:	4322      	orrs	r2, r4
 800d110:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 800d114:	eb04 00b0 	add.w	r0, r4, r0, ror #2
 800d118:	4402      	add	r2, r0
 800d11a:	9c02      	ldr	r4, [sp, #8]
 800d11c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d11e:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800d122:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 800d126:	9808      	ldr	r0, [sp, #32]
 800d128:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 800d12c:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 800d130:	ea4f 70f9 	mov.w	r0, r9, ror #31
 800d134:	ea45 04be 	orr.w	r4, r5, lr, ror #2
 800d138:	900b      	str	r0, [sp, #44]	; 0x2c
 800d13a:	ea04 04b1 	and.w	r4, r4, r1, ror #2
 800d13e:	ea05 00be 	and.w	r0, r5, lr, ror #2
 800d142:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 800d146:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 800d14a:	4320      	orrs	r0, r4
 800d14c:	4418      	add	r0, r3
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800d14e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d152:	ea83 78f4 	eor.w	r8, r3, r4, ror #31
 800d156:	9b06      	ldr	r3, [sp, #24]
 800d158:	ea88 78f3 	eor.w	r8, r8, r3, ror #31
 800d15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d15e:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
 800d162:	930a      	str	r3, [sp, #40]	; 0x28
 800d164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d166:	4bd8      	ldr	r3, [pc, #864]	; (800d4c8 <Transform+0xdd8>)
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d168:	eb02 62f5 	add.w	r2, r2, r5, ror #27
 800d16c:	ea4f 05b5 	mov.w	r5, r5, ror #2
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800d170:	ea85 07be 	eor.w	r7, r5, lr, ror #2
 800d174:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 800d178:	eb04 01b1 	add.w	r1, r4, r1, ror #2
 800d17c:	4057      	eors	r7, r2
 800d17e:	9c02      	ldr	r4, [sp, #8]
 800d180:	440f      	add	r7, r1
 800d182:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d184:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800d188:	9c07      	ldr	r4, [sp, #28]
 800d18a:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800d18e:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 800d192:	eb00 60f2 	add.w	r0, r0, r2, ror #27
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800d196:	9102      	str	r1, [sp, #8]
 800d198:	ea85 04b2 	eor.w	r4, r5, r2, ror #2
 800d19c:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800d1a0:	eb01 01be 	add.w	r1, r1, lr, ror #2
 800d1a4:	4044      	eors	r4, r0
 800d1a6:	440c      	add	r4, r1
 800d1a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d1aa:	ea81 7ef6 	eor.w	lr, r1, r6, ror #31
 800d1ae:	ea8e 7efc 	eor.w	lr, lr, ip, ror #31
 800d1b2:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 800d1b6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 800d1ba:	ea4f 71fe 	mov.w	r1, lr, ror #31
 800d1be:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800d1c2:	910c      	str	r1, [sp, #48]	; 0x30
 800d1c4:	ea80 0cb2 	eor.w	ip, r0, r2, ror #2
 800d1c8:	eb03 71fe 	add.w	r1, r3, lr, ror #31
 800d1cc:	4429      	add	r1, r5
 800d1ce:	ea8c 0c07 	eor.w	ip, ip, r7
 800d1d2:	9d04      	ldr	r5, [sp, #16]
 800d1d4:	448c      	add	ip, r1
 800d1d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1d8:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 800d1dc:	ea81 7bfb 	eor.w	fp, r1, fp, ror #31
 800d1e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d1e2:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 800d1e6:	ea4f 71fb 	mov.w	r1, fp, ror #31
 800d1ea:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 800d1ee:	eb03 75fb 	add.w	r5, r3, fp, ror #31
 800d1f2:	910f      	str	r1, [sp, #60]	; 0x3c
 800d1f4:	ea80 01b7 	eor.w	r1, r0, r7, ror #2
 800d1f8:	eb05 02b2 	add.w	r2, r5, r2, ror #2
 800d1fc:	4061      	eors	r1, r4
 800d1fe:	4411      	add	r1, r2
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800d200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d202:	9d08      	ldr	r5, [sp, #32]
 800d204:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 800d208:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 800d20c:	9d02      	ldr	r5, [sp, #8]
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800d20e:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800d212:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 800d216:	ea4f 04b4 	mov.w	r4, r4, ror #2
 800d21a:	9203      	str	r2, [sp, #12]
 800d21c:	ea84 08b7 	eor.w	r8, r4, r7, ror #2
 800d220:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800d224:	4402      	add	r2, r0
 800d226:	ea88 080c 	eor.w	r8, r8, ip
 800d22a:	4490      	add	r8, r2
 800d22c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d22e:	9804      	ldr	r0, [sp, #16]
 800d230:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800d234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d236:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800d23a:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
 800d23e:	9204      	str	r2, [sp, #16]
        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 800d240:	eb01 61fc 	add.w	r1, r1, ip, ror #27
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800d244:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 800d248:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 800d24c:	eb02 02b7 	add.w	r2, r2, r7, ror #2
 800d250:	404e      	eors	r6, r1
 800d252:	9806      	ldr	r0, [sp, #24]
 800d254:	4416      	add	r6, r2
 800d256:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d258:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800d25c:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 800d260:	eb08 68f1 	add.w	r8, r8, r1, ror #27
 800d264:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 800d268:	ea4f 01b1 	mov.w	r1, r1, ror #2
 800d26c:	ea81 07bc 	eor.w	r7, r1, ip, ror #2
 800d270:	eb03 72fa 	add.w	r2, r3, sl, ror #31
 800d274:	4422      	add	r2, r4
 800d276:	ea87 0708 	eor.w	r7, r7, r8
 800d27a:	9807      	ldr	r0, [sp, #28]
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d27c:	9c06      	ldr	r4, [sp, #24]
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800d27e:	4417      	add	r7, r2
 800d280:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d282:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 800d286:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 800d28a:	9a03      	ldr	r2, [sp, #12]
 800d28c:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 800d290:	eb06 66f8 	add.w	r6, r6, r8, ror #27
 800d294:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
 800d298:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 800d29c:	eb00 00bc 	add.w	r0, r0, ip, ror #2
 800d2a0:	4072      	eors	r2, r6
 800d2a2:	4402      	add	r2, r0
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d2a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d2a6:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 800d2aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2ac:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 800d2b0:	9804      	ldr	r0, [sp, #16]
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800d2b2:	eb07 67f6 	add.w	r7, r7, r6, ror #27
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d2b6:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 800d2ba:	ea4f 06b6 	mov.w	r6, r6, ror #2
 800d2be:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 800d2c2:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 800d2c6:	4401      	add	r1, r0
 800d2c8:	ea8c 0c07 	eor.w	ip, ip, r7
 800d2cc:	9807      	ldr	r0, [sp, #28]
 800d2ce:	448c      	add	ip, r1
 800d2d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d2d2:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 800d2d6:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 800d2da:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 800d2de:	eb02 62f7 	add.w	r2, r2, r7, ror #27
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d2e2:	ea86 05b7 	eor.w	r5, r6, r7, ror #2
 800d2e6:	eb03 70f1 	add.w	r0, r3, r1, ror #31
 800d2ea:	eb00 00b8 	add.w	r0, r0, r8, ror #2
 800d2ee:	4055      	eors	r5, r2
 800d2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2f4:	4405      	add	r5, r0
 800d2f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d2f8:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 800d2fc:	ea80 70fe 	eor.w	r0, r0, lr, ror #31
 800d300:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 800d304:	ea80 70f9 	eor.w	r0, r0, r9, ror #31
 800d308:	ea4f 02b2 	mov.w	r2, r2, ror #2
 800d30c:	9006      	str	r0, [sp, #24]
 800d30e:	ea82 08b7 	eor.w	r8, r2, r7, ror #2
 800d312:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 800d316:	4430      	add	r0, r6
 800d318:	ea88 080c 	eor.w	r8, r8, ip
 800d31c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d31e:	4480      	add	r8, r0
 800d320:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d322:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 800d326:	ea80 70fb 	eor.w	r0, r0, fp, ror #31
 800d32a:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 800d32e:	9007      	str	r0, [sp, #28]
 800d330:	9e07      	ldr	r6, [sp, #28]
 800d332:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 800d336:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
 800d33a:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 800d33e:	eb06 06b7 	add.w	r6, r6, r7, ror #2
 800d342:	4068      	eors	r0, r5
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d344:	9f08      	ldr	r7, [sp, #32]
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d346:	4430      	add	r0, r6
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d348:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d34a:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 800d34e:	9e03      	ldr	r6, [sp, #12]
 800d350:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d354:	eb08 68f5 	add.w	r8, r8, r5, ror #27
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d358:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 800d35c:	ea4f 05b5 	mov.w	r5, r5, ror #2
 800d360:	eb03 76f7 	add.w	r6, r3, r7, ror #31
 800d364:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 800d368:	4432      	add	r2, r6
 800d36a:	ea8e 0e08 	eor.w	lr, lr, r8
 800d36e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d370:	4496      	add	lr, r2
 800d372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d374:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
 800d378:	9a04      	ldr	r2, [sp, #16]
 800d37a:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 800d37e:	9a06      	ldr	r2, [sp, #24]
 800d380:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 800d384:	eb00 60f8 	add.w	r0, r0, r8, ror #27
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d388:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
 800d38c:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
 800d390:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
 800d394:	4042      	eors	r2, r0
 800d396:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d39a:	4462      	add	r2, ip
 800d39c:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800d3a0:	ea8c 7cfb 	eor.w	ip, ip, fp, ror #31
 800d3a4:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
 800d3a8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d3ac:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
 800d3b0:	ea8a 7afc 	eor.w	sl, sl, ip, ror #31
 800d3b4:	ea4f 00b0 	mov.w	r0, r0, ror #2
 800d3b8:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 800d3bc:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
 800d3c0:	44ab      	add	fp, r5
 800d3c2:	ea8c 0c0e 	eor.w	ip, ip, lr
 800d3c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d3c8:	44dc      	add	ip, fp
 800d3ca:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d3ce:	ea85 75fb 	eor.w	r5, r5, fp, ror #31
 800d3d2:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 800d3d6:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 800d3da:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 800d3de:	ea80 05be 	eor.w	r5, r0, lr, ror #2
 800d3e2:	eb03 79f7 	add.w	r9, r3, r7, ror #31
 800d3e6:	eb09 09b8 	add.w	r9, r9, r8, ror #2
 800d3ea:	4055      	eors	r5, r2
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d3ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d3f0:	444d      	add	r5, r9
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d3f2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800d3f6:	ea88 78f9 	eor.w	r8, r8, r9, ror #31
 800d3fa:	ea88 74f4 	eor.w	r4, r8, r4, ror #31
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d3fe:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d402:	ea84 76f6 	eor.w	r6, r4, r6, ror #31
 800d406:	ea4f 02b2 	mov.w	r2, r2, ror #2
 800d40a:	eb03 78f6 	add.w	r8, r3, r6, ror #31
 800d40e:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 800d412:	ea84 040c 	eor.w	r4, r4, ip
 800d416:	4440      	add	r0, r8
 800d418:	4420      	add	r0, r4
 800d41a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800d41c:	ea84 74fb 	eor.w	r4, r4, fp, ror #31
 800d420:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 800d424:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 800d428:	eb03 71f1 	add.w	r1, r3, r1, ror #31
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 800d42c:	eb05 65fc 	add.w	r5, r5, ip, ror #27
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d430:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
 800d434:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 800d438:	4069      	eors	r1, r5
 800d43a:	9c03      	ldr	r4, [sp, #12]
 800d43c:	448e      	add	lr, r1
 800d43e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d440:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800d444:	9c06      	ldr	r4, [sp, #24]
 800d446:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800d44a:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 800d44e:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 800d452:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 800d456:	ea4f 05b5 	mov.w	r5, r5, ror #2
 800d45a:	440a      	add	r2, r1
 800d45c:	ea85 01bc 	eor.w	r1, r5, ip, ror #2
 800d460:	4041      	eors	r1, r0
 800d462:	9c04      	ldr	r4, [sp, #16]
 800d464:	440a      	add	r2, r1
 800d466:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d468:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800d46c:	9c07      	ldr	r4, [sp, #28]
 800d46e:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 800d472:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
 800d476:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d478:	440b      	add	r3, r1
 800d47a:	eb03 73f6 	add.w	r3, r3, r6, ror #31
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d47e:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
        sha->digest[0] += a;
 800d482:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d486:	ea85 03b0 	eor.w	r3, r5, r0, ror #2
 800d48a:	ea83 030e 	eor.w	r3, r3, lr
        sha->digest[0] += a;
 800d48e:	9900      	ldr	r1, [sp, #0]
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 800d490:	eb02 62fe 	add.w	r2, r2, lr, ror #27
        sha->digest[0] += a;
 800d494:	4463      	add	r3, ip
 800d496:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 800d49a:	64cb      	str	r3, [r1, #76]	; 0x4c
        sha->digest[1] += b;
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	441a      	add	r2, r3
        sha->digest[2] += c;
 800d4a0:	9b05      	ldr	r3, [sp, #20]
        sha->digest[1] += b;
 800d4a2:	650a      	str	r2, [r1, #80]	; 0x50
        sha->digest[2] += c;
 800d4a4:	eb03 01be 	add.w	r1, r3, lr, ror #2
 800d4a8:	9b00      	ldr	r3, [sp, #0]
 800d4aa:	6559      	str	r1, [r3, #84]	; 0x54
        sha->digest[3] += d;
 800d4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ae:	eb03 00b0 	add.w	r0, r3, r0, ror #2
 800d4b2:	9b00      	ldr	r3, [sp, #0]
 800d4b4:	6598      	str	r0, [r3, #88]	; 0x58
        sha->digest[4] += e;
 800d4b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4b8:	441d      	add	r5, r3
 800d4ba:	9b00      	ldr	r3, [sp, #0]

        (void)data; /* Not used */

        return 0;
    }
 800d4bc:	2000      	movs	r0, #0
        sha->digest[4] += e;
 800d4be:	65dd      	str	r5, [r3, #92]	; 0x5c
    }
 800d4c0:	b017      	add	sp, #92	; 0x5c
 800d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c6:	bf00      	nop
 800d4c8:	ca62c1d6 	.word	0xca62c1d6

0800d4cc <wc_InitSha_ex>:
** we'll assume this is ALWAYS for a new, uninitialized sha256
*/
int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
{
    int ret = 0;
    if (sha == NULL) {
 800d4cc:	b1b8      	cbz	r0, 800d4fe <wc_InitSha_ex+0x32>
        sha->digest[0] = 0x67452301L;
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	; (800d504 <wc_InitSha_ex+0x38>)
 800d4d0:	64c3      	str	r3, [r0, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 800d4d2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800d4d6:	6503      	str	r3, [r0, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 800d4d8:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 800d4dc:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 800d4e0:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 800d4e4:	6543      	str	r3, [r0, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 800d4e6:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 800d4ea:	6583      	str	r3, [r0, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 800d4ec:	4b06      	ldr	r3, [pc, #24]	; (800d508 <wc_InitSha_ex+0x3c>)
 800d4ee:	65c3      	str	r3, [r0, #92]	; 0x5c
        sha->buffLen = 0;
 800d4f0:	2300      	movs	r3, #0
        sha->loLen   = 0;
 800d4f2:	e9c0 3300 	strd	r3, r3, [r0]
        return BAD_FUNC_ARG;
    }

    sha->heap = heap;
 800d4f6:	6601      	str	r1, [r0, #96]	; 0x60
        sha->hiLen   = 0;
 800d4f8:	6083      	str	r3, [r0, #8]
# endif /* WOLFSSL_ASYNC_CRYPT */
#ifdef WOLFSSL_IMXRT1170_CAAM
   ret = wc_CAAM_HashInit(&sha->hndl, &sha->ctx, WC_HASH_TYPE_SHA);
#endif

    return ret;
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	4770      	bx	lr
        return BAD_FUNC_ARG;
 800d4fe:	f06f 00ac 	mvn.w	r0, #172	; 0xac
} /* wc_InitSha_ex */
 800d502:	4770      	bx	lr
 800d504:	67452301 	.word	0x67452301
 800d508:	c3d2e1f0 	.word	0xc3d2e1f0

0800d50c <wc_ShaUpdate>:

/* do block size increments/updates */
int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
{
 800d50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d510:	460f      	mov	r7, r1
 800d512:	4614      	mov	r4, r2
    int ret = 0;
    word32 blocksLen;
    byte* local;

    if (sha == NULL || (data == NULL && len > 0)) {
 800d514:	4605      	mov	r5, r0
 800d516:	2800      	cmp	r0, #0
 800d518:	d05a      	beq.n	800d5d0 <wc_ShaUpdate+0xc4>
 800d51a:	b939      	cbnz	r1, 800d52c <wc_ShaUpdate+0x20>
        return BAD_FUNC_ARG;
    }

    if (data == NULL && len == 0) {
        /* valid, but do nothing */
        return 0;
 800d51c:	2a00      	cmp	r2, #0
 800d51e:	bf14      	ite	ne
 800d520:	f06f 06ac 	mvnne.w	r6, #172	; 0xac
 800d524:	2600      	moveq	r6, #0
        XMEMCPY(local, data, len);
        sha->buffLen = len;
    }

    return ret;
}
 800d526:	4630      	mov	r0, r6
 800d528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sha->buffLen >= WC_SHA_BLOCK_SIZE) {
 800d52c:	6800      	ldr	r0, [r0, #0]
 800d52e:	283f      	cmp	r0, #63	; 0x3f
 800d530:	d851      	bhi.n	800d5d6 <wc_ShaUpdate+0xca>
        sha->hiLen++;                       /* carry low to high */
 800d532:	686b      	ldr	r3, [r5, #4]
 800d534:	18d3      	adds	r3, r2, r3
    if ((sha->loLen += len) < tmp)
 800d536:	606b      	str	r3, [r5, #4]
        sha->hiLen++;                       /* carry low to high */
 800d538:	bf22      	ittt	cs
 800d53a:	68ab      	ldrcs	r3, [r5, #8]
 800d53c:	3301      	addcs	r3, #1
 800d53e:	60ab      	strcs	r3, [r5, #8]
    local = (byte*)sha->buffer;
 800d540:	f105 080c 	add.w	r8, r5, #12
    if (sha->buffLen > 0) {
 800d544:	b1d8      	cbz	r0, 800d57e <wc_ShaUpdate+0x72>
        blocksLen = min(len, WC_SHA_BLOCK_SIZE - sha->buffLen);
 800d546:	f1c0 0640 	rsb	r6, r0, #64	; 0x40
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_MISC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
 800d54a:	4296      	cmp	r6, r2
 800d54c:	bf28      	it	cs
 800d54e:	4616      	movcs	r6, r2
        XMEMCPY(&local[sha->buffLen], data, blocksLen);
 800d550:	4632      	mov	r2, r6
 800d552:	4440      	add	r0, r8
 800d554:	f00d fd44 	bl	801afe0 <memcpy>
        sha->buffLen += blocksLen;
 800d558:	682a      	ldr	r2, [r5, #0]
 800d55a:	4432      	add	r2, r6
        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 800d55c:	2a40      	cmp	r2, #64	; 0x40
        sha->buffLen += blocksLen;
 800d55e:	602a      	str	r2, [r5, #0]
        data         += blocksLen;
 800d560:	4437      	add	r7, r6
        len          -= blocksLen;
 800d562:	eba4 0406 	sub.w	r4, r4, r6
        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 800d566:	d10a      	bne.n	800d57e <wc_ShaUpdate+0x72>
            ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 800d568:	4641      	mov	r1, r8
 800d56a:	4640      	mov	r0, r8
 800d56c:	f7ff f8b4 	bl	800c6d8 <ByteReverseWords>
            ret = XTRANSFORM(sha, (const byte*)local);
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff f8bd 	bl	800c6f0 <Transform>
            if (ret != 0) {
 800d576:	4606      	mov	r6, r0
 800d578:	2800      	cmp	r0, #0
 800d57a:	d1d4      	bne.n	800d526 <wc_ShaUpdate+0x1a>
            sha->buffLen = 0; /* Nothing left to do, so set to zero. */
 800d57c:	6028      	str	r0, [r5, #0]
{
 800d57e:	46a1      	mov	r9, r4
 800d580:	2600      	movs	r6, #0
 800d582:	eb07 0a04 	add.w	sl, r7, r4
    while (len >= WC_SHA_BLOCK_SIZE) {
 800d586:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 800d58a:	ebaa 0109 	sub.w	r1, sl, r9
 800d58e:	d80f      	bhi.n	800d5b0 <wc_ShaUpdate+0xa4>
 800d590:	09a2      	lsrs	r2, r4, #6
 800d592:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800d596:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 800d59a:	fb03 4402 	mla	r4, r3, r2, r4
    if (len > 0) {
 800d59e:	4439      	add	r1, r7
 800d5a0:	2c00      	cmp	r4, #0
 800d5a2:	d0c0      	beq.n	800d526 <wc_ShaUpdate+0x1a>
        XMEMCPY(local, data, len);
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	f00d fd1a 	bl	801afe0 <memcpy>
        sha->buffLen = len;
 800d5ac:	602c      	str	r4, [r5, #0]
 800d5ae:	e7ba      	b.n	800d526 <wc_ShaUpdate+0x1a>
            XMEMCPY(local32, data, WC_SHA_BLOCK_SIZE);
 800d5b0:	2240      	movs	r2, #64	; 0x40
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	f00d fd14 	bl	801afe0 <memcpy>
        ByteReverseWords(local32, local32, WC_SHA_BLOCK_SIZE);
 800d5b8:	2240      	movs	r2, #64	; 0x40
 800d5ba:	4641      	mov	r1, r8
 800d5bc:	4640      	mov	r0, r8
 800d5be:	f7ff f88b 	bl	800c6d8 <ByteReverseWords>
        ret = XTRANSFORM(sha, (const byte*)local32);
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f7ff f894 	bl	800c6f0 <Transform>
        len  -= WC_SHA_BLOCK_SIZE;
 800d5c8:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        ret = XTRANSFORM(sha, (const byte*)local32);
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	e7da      	b.n	800d586 <wc_ShaUpdate+0x7a>
        return BAD_FUNC_ARG;
 800d5d0:	f06f 06ac 	mvn.w	r6, #172	; 0xac
 800d5d4:	e7a7      	b.n	800d526 <wc_ShaUpdate+0x1a>
        return BUFFER_E;
 800d5d6:	f06f 0683 	mvn.w	r6, #131	; 0x83
 800d5da:	e7a4      	b.n	800d526 <wc_ShaUpdate+0x1a>

0800d5dc <wc_ShaFinal>:
/*
** Finalizes hashing of data. Result is placed into hash.
** Resets state of sha struct.
*/
int wc_ShaFinal(wc_Sha* sha, byte* hash)
{
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	460f      	mov	r7, r1
    int ret;
    byte* local;

    if (sha == NULL || hash == NULL) {
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d067      	beq.n	800d6b6 <wc_ShaFinal+0xda>
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d065      	beq.n	800d6b6 <wc_ShaFinal+0xda>
        return BAD_FUNC_ARG;
    }

    local = (byte*)sha->buffer;
 800d5ea:	4606      	mov	r6, r0
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* we'll add a 0x80 byte at the end,
    ** so make sure we have appropriate buffer length. */
    if (sha->buffLen > WC_SHA_BLOCK_SIZE - 1) {
 800d5ec:	f856 3b0c 	ldr.w	r3, [r6], #12
 800d5f0:	2b3f      	cmp	r3, #63	; 0x3f
 800d5f2:	d863      	bhi.n	800d6bc <wc_ShaFinal+0xe0>
        /* exit with error code if there's a bad buffer size in buffLen */
        return BAD_STATE_E;
    } /* buffLen check */

    local[sha->buffLen++] = 0x80;  /* add 1 */
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	6002      	str	r2, [r0, #0]
 800d5f8:	2280      	movs	r2, #128	; 0x80
 800d5fa:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (sha->buffLen > WC_SHA_PAD_SIZE) {
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	2838      	cmp	r0, #56	; 0x38
 800d600:	d912      	bls.n	800d628 <wc_ShaFinal+0x4c>
        XMEMSET(&local[sha->buffLen], 0, WC_SHA_BLOCK_SIZE - sha->buffLen);
 800d602:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800d606:	2100      	movs	r1, #0
 800d608:	4430      	add	r0, r6
 800d60a:	f00d fd11 	bl	801b030 <memset>
        sha->buffLen += WC_SHA_BLOCK_SIZE - sha->buffLen;
 800d60e:	2240      	movs	r2, #64	; 0x40
 800d610:	6022      	str	r2, [r4, #0]

    #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 800d612:	4631      	mov	r1, r6
 800d614:	4630      	mov	r0, r6
 800d616:	f7ff f85f 	bl	800c6d8 <ByteReverseWords>
    #else
        /*
        ** The #if defined(WOLFSSL_USE_ESP32C3_CRYPT_HASH_HW) also falls
        ** though here to SW, as it's not yet implemented for HW.
        */
        ret = XTRANSFORM(sha, (const byte*)local);
 800d61a:	4620      	mov	r0, r4
 800d61c:	f7ff f868 	bl	800c6f0 <Transform>
    #endif
        if (ret != 0) {
 800d620:	4605      	mov	r5, r0
 800d622:	2800      	cmp	r0, #0
 800d624:	d145      	bne.n	800d6b2 <wc_ShaFinal+0xd6>
            return ret;
        }

        sha->buffLen = 0;
 800d626:	6020      	str	r0, [r4, #0]
    } /*  (sha->buffLen > WC_SHA_PAD_SIZE) */

    XMEMSET(&local[sha->buffLen], 0, WC_SHA_PAD_SIZE - sha->buffLen);
 800d628:	6820      	ldr	r0, [r4, #0]
 800d62a:	2100      	movs	r1, #0
 800d62c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800d630:	4430      	add	r0, r6
 800d632:	f00d fcfd 	bl	801b030 <memset>

#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 800d636:	2240      	movs	r2, #64	; 0x40
 800d638:	4631      	mov	r1, r6
 800d63a:	4630      	mov	r0, r6
 800d63c:	f7ff f84c 	bl	800c6d8 <ByteReverseWords>
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 800d640:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d644:	0f5a      	lsrs	r2, r3, #29
 800d646:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    sha->loLen = sha->loLen << 3;
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	6063      	str	r3, [r4, #4]
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 800d64e:	60a2      	str	r2, [r4, #8]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
 800d650:	f104 0108 	add.w	r1, r4, #8
 800d654:	2204      	movs	r2, #4
 800d656:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800d65a:	f00d fcc1 	bl	801afe0 <memcpy>
    XMEMCPY(&local[WC_SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
 800d65e:	2204      	movs	r2, #4
 800d660:	18a1      	adds	r1, r4, r2
 800d662:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d666:	f00d fcbb 	bl	801afe0 <memcpy>
/*
** The #if defined(WOLFSSL_USE_ESP32C3_CRYPT_HASH_HW) also falls
** though here to SW, as it's not yet implemented for HW.
*/
#else
    ret = XTRANSFORM(sha, (const byte*)local);
 800d66a:	4631      	mov	r1, r6
 800d66c:	4620      	mov	r0, r4
 800d66e:	f7ff f83f 	bl	800c6f0 <Transform>
#endif

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 800d672:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800d676:	2214      	movs	r2, #20
    ret = XTRANSFORM(sha, (const byte*)local);
 800d678:	4605      	mov	r5, r0
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 800d67a:	4608      	mov	r0, r1
 800d67c:	f7ff f82c 	bl	800c6d8 <ByteReverseWords>
#endif

    XMEMCPY(hash, (byte *)&sha->digest[0], WC_SHA_DIGEST_SIZE);
 800d680:	2214      	movs	r2, #20
 800d682:	4638      	mov	r0, r7
 800d684:	f00d fcac 	bl	801afe0 <memcpy>
        sha->digest[0] = 0x67452301L;
 800d688:	4b0e      	ldr	r3, [pc, #56]	; (800d6c4 <wc_ShaFinal+0xe8>)
 800d68a:	64e3      	str	r3, [r4, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 800d68c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800d690:	6523      	str	r3, [r4, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 800d692:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 800d696:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 800d69a:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 800d69e:	6563      	str	r3, [r4, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 800d6a0:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 800d6a4:	65a3      	str	r3, [r4, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 800d6a6:	4b08      	ldr	r3, [pc, #32]	; (800d6c8 <wc_ShaFinal+0xec>)
 800d6a8:	65e3      	str	r3, [r4, #92]	; 0x5c
        sha->buffLen = 0;
 800d6aa:	2300      	movs	r3, #0
        sha->loLen   = 0;
 800d6ac:	e9c4 3300 	strd	r3, r3, [r4]
        sha->hiLen   = 0;
 800d6b0:	60a3      	str	r3, [r4, #8]
     * which may cause fall back to SW if HW is busy. we do not return result
     * of initSha here */
    (void)InitSha(sha); /* reset state */

    return ret;
}
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 800d6b6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800d6ba:	e7fa      	b.n	800d6b2 <wc_ShaFinal+0xd6>
        return BAD_STATE_E;
 800d6bc:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 800d6c0:	e7f7      	b.n	800d6b2 <wc_ShaFinal+0xd6>
 800d6c2:	bf00      	nop
 800d6c4:	67452301 	.word	0x67452301
 800d6c8:	c3d2e1f0 	.word	0xc3d2e1f0

0800d6cc <wc_ShaFree>:
    }
#endif
#ifdef WOLFSSL_IMXRT_DCP
    DCPShaFree(sha);
#endif
}
 800d6cc:	4770      	bx	lr

0800d6ce <wc_ShaCopy>:

    return ret;
}

int wc_ShaCopy(wc_Sha* src, wc_Sha* dst)
{
 800d6ce:	b508      	push	{r3, lr}
 800d6d0:	460b      	mov	r3, r1
    int ret = 0;

    if (src == NULL || dst == NULL)
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	b130      	cbz	r0, 800d6e4 <wc_ShaCopy+0x16>
 800d6d6:	b12b      	cbz	r3, 800d6e4 <wc_ShaCopy+0x16>
        return BAD_FUNC_ARG;

    XMEMCPY(dst, src, sizeof(wc_Sha));
 800d6d8:	2264      	movs	r2, #100	; 0x64
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f00d fc80 	bl	801afe0 <memcpy>
#endif

#ifdef WOLFSSL_HASH_FLAGS
    dst->flags |= WC_HASH_FLAG_ISCOPY;
#endif
    return ret;
 800d6e0:	2000      	movs	r0, #0
}
 800d6e2:	bd08      	pop	{r3, pc}
        return BAD_FUNC_ARG;
 800d6e4:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800d6e8:	e7fb      	b.n	800d6e2 <wc_ShaCopy+0x14>

0800d6ea <wc_ShaGetHash>:
{
 800d6ea:	b570      	push	{r4, r5, r6, lr}
 800d6ec:	460e      	mov	r6, r1
    if (sha == NULL || hash == NULL) {
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	b1a8      	cbz	r0, 800d71e <wc_ShaGetHash+0x34>
 800d6f2:	b1a1      	cbz	r1, 800d71e <wc_ShaGetHash+0x34>
    tmpSha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL,
 800d6f4:	2064      	movs	r0, #100	; 0x64
 800d6f6:	f00d fc53 	bl	801afa0 <malloc>
    if (tmpSha == NULL) {
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	b190      	cbz	r0, 800d724 <wc_ShaGetHash+0x3a>
    ret = wc_ShaCopy(sha, tmpSha);
 800d6fe:	4601      	mov	r1, r0
 800d700:	4620      	mov	r0, r4
 800d702:	f7ff ffe4 	bl	800d6ce <wc_ShaCopy>
    if (ret == 0) {
 800d706:	4604      	mov	r4, r0
 800d708:	b920      	cbnz	r0, 800d714 <wc_ShaGetHash+0x2a>
        ret = wc_ShaFinal(tmpSha, hash);
 800d70a:	4631      	mov	r1, r6
 800d70c:	4628      	mov	r0, r5
 800d70e:	f7ff ff65 	bl	800d5dc <wc_ShaFinal>
 800d712:	4604      	mov	r4, r0
    XFREE(tmpSha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800d714:	4628      	mov	r0, r5
 800d716:	f00d fc4b 	bl	801afb0 <free>
}
 800d71a:	4620      	mov	r0, r4
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 800d71e:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800d722:	e7fa      	b.n	800d71a <wc_ShaGetHash+0x30>
        return MEMORY_E;
 800d724:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800d728:	e7f7      	b.n	800d71a <wc_ShaGetHash+0x30>

0800d72a <ByteReverseWords>:
{
 800d72a:	b510      	push	{r4, lr}
        word32 count = byteCount/(word32)sizeof(word32);
 800d72c:	0892      	lsrs	r2, r2, #2
        for (i = 0; i < count; i++)
 800d72e:	2300      	movs	r3, #0
            out[i] = ByteReverseWord32(in[i]);
 800d730:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800d734:	ba24      	rev	r4, r4
 800d736:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        for (i = 0; i < count; i++)
 800d73a:	3301      	adds	r3, #1
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d1f7      	bne.n	800d730 <ByteReverseWords+0x6>
}
 800d740:	bd10      	pop	{r4, pc}
	...

0800d744 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 800d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	4604      	mov	r4, r0
 800d74a:	b08d      	sub	sp, #52	; 0x34
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 800d74c:	f44f 7080 	mov.w	r0, #256	; 0x100
    {
 800d750:	460d      	mov	r5, r1
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 800d752:	f00d fc25 	bl	801afa0 <malloc>
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 800d756:	4682      	mov	sl, r0
 800d758:	2800      	cmp	r0, #0
 800d75a:	f000 818e 	beq.w	800da7a <Transform_Sha256+0x336>
 800d75e:	1f23      	subs	r3, r4, #4
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	ab04      	add	r3, sp, #16
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	f104 031c 	add.w	r3, r4, #28
 800d76a:	9302      	str	r3, [sp, #8]
 800d76c:	e9dd 3200 	ldrd	r3, r2, [sp]
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];
 800d770:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800d774:	f842 1b04 	str.w	r1, [r2], #4
        for (i = 0; i < 8; i++)
 800d778:	9902      	ldr	r1, [sp, #8]
 800d77a:	4299      	cmp	r1, r3
 800d77c:	d1f8      	bne.n	800d770 <Transform_Sha256+0x2c>

        for (i = 0; i < 16; i++)
 800d77e:	2300      	movs	r3, #0
            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
 800d780:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800d784:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
        for (i = 0; i < 16; i++)
 800d788:	3301      	adds	r3, #1
 800d78a:	2b10      	cmp	r3, #16
 800d78c:	d1f8      	bne.n	800d780 <Transform_Sha256+0x3c>
 800d78e:	46d0      	mov	r8, sl
 800d790:	f10a 00c0 	add.w	r0, sl, #192	; 0xc0
 800d794:	4652      	mov	r2, sl

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 800d796:	6b91      	ldr	r1, [r2, #56]	; 0x38
        return (x >> y) | (x << (sizeof(x) * 8 - y));
 800d798:	4615      	mov	r5, r2
 800d79a:	ea4f 43f1 	mov.w	r3, r1, ror #19
 800d79e:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 800d7a2:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 800d7a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d7a8:	682d      	ldr	r5, [r5, #0]
 800d7aa:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800d7ae:	4429      	add	r1, r5
 800d7b0:	440b      	add	r3, r1
 800d7b2:	ea4f 41b4 	mov.w	r1, r4, ror #18
 800d7b6:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
 800d7ba:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
 800d7be:	440b      	add	r3, r1
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800d7c0:	4290      	cmp	r0, r2
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 800d7c2:	63d3      	str	r3, [r2, #60]	; 0x3c
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800d7c4:	d1e7      	bne.n	800d796 <Transform_Sha256+0x52>
 800d7c6:	e9dd 1009 	ldrd	r1, r0, [sp, #36]	; 0x24
 800d7ca:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 800d7ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7d2:	f50a 7680 	add.w	r6, sl, #256	; 0x100
 800d7d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d7d8:	9c08      	ldr	r4, [sp, #32]
 800d7da:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 800da80 <Transform_Sha256+0x33c>
 800d7de:	9603      	str	r6, [sp, #12]
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
            RND(0); RND(1); RND(2); RND(3);
 800d7e0:	f8d8 7000 	ldr.w	r7, [r8]
 800d7e4:	f8d9 6000 	ldr.w	r6, [r9]
 800d7e8:	ea4f 2bf4 	mov.w	fp, r4, ror #11
 800d7ec:	ea8b 1bb4 	eor.w	fp, fp, r4, ror #6
 800d7f0:	443e      	add	r6, r7
 800d7f2:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
 800d7f6:	44b3      	add	fp, r6
 800d7f8:	ea80 0601 	eor.w	r6, r0, r1
 800d7fc:	4026      	ands	r6, r4
 800d7fe:	4046      	eors	r6, r0
 800d800:	44b3      	add	fp, r6
 800d802:	ea4e 070c 	orr.w	r7, lr, ip
 800d806:	ea4f 06be 	mov.w	r6, lr, ror #2
 800d80a:	445d      	add	r5, fp
 800d80c:	ea86 367e 	eor.w	r6, r6, lr, ror #13
 800d810:	ea0e 0b0c 	and.w	fp, lr, ip
 800d814:	4017      	ands	r7, r2
 800d816:	ea86 56be 	eor.w	r6, r6, lr, ror #22
 800d81a:	ea47 070b 	orr.w	r7, r7, fp
 800d81e:	4437      	add	r7, r6
 800d820:	442b      	add	r3, r5
 800d822:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800d826:	443d      	add	r5, r7
 800d828:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d82c:	ea84 0b01 	eor.w	fp, r4, r1
 800d830:	443e      	add	r6, r7
 800d832:	4430      	add	r0, r6
 800d834:	ea0b 0b03 	and.w	fp, fp, r3
 800d838:	ea4f 26f3 	mov.w	r6, r3, ror #11
 800d83c:	ea8b 0b01 	eor.w	fp, fp, r1
 800d840:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
 800d844:	4458      	add	r0, fp
 800d846:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 800d84a:	4406      	add	r6, r0
 800d84c:	ea45 070e 	orr.w	r7, r5, lr
 800d850:	ea4f 3075 	mov.w	r0, r5, ror #13
 800d854:	ea05 0b0e 	and.w	fp, r5, lr
 800d858:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 800d85c:	ea07 070c 	and.w	r7, r7, ip
 800d860:	ea47 070b 	orr.w	r7, r7, fp
 800d864:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 800d868:	4438      	add	r0, r7
 800d86a:	4430      	add	r0, r6
 800d86c:	4432      	add	r2, r6
 800d86e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800d872:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800d876:	ea84 0b03 	eor.w	fp, r4, r3
 800d87a:	443e      	add	r6, r7
 800d87c:	4431      	add	r1, r6
 800d87e:	ea0b 0b02 	and.w	fp, fp, r2
 800d882:	ea4f 26f2 	mov.w	r6, r2, ror #11
 800d886:	ea8b 0b04 	eor.w	fp, fp, r4
 800d88a:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
 800d88e:	4459      	add	r1, fp
 800d890:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 800d894:	440e      	add	r6, r1
 800d896:	ea45 0700 	orr.w	r7, r5, r0
 800d89a:	ea4f 3170 	mov.w	r1, r0, ror #13
 800d89e:	ea05 0b00 	and.w	fp, r5, r0
 800d8a2:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 800d8a6:	ea07 070e 	and.w	r7, r7, lr
 800d8aa:	ea47 070b 	orr.w	r7, r7, fp
 800d8ae:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 800d8b2:	4439      	add	r1, r7
 800d8b4:	4431      	add	r1, r6
 800d8b6:	44b4      	add	ip, r6
 800d8b8:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800d8bc:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800d8c0:	ea83 0b02 	eor.w	fp, r3, r2
 800d8c4:	443e      	add	r6, r7
 800d8c6:	4434      	add	r4, r6
 800d8c8:	ea0b 0b0c 	and.w	fp, fp, ip
 800d8cc:	ea4f 26fc 	mov.w	r6, ip, ror #11
 800d8d0:	ea8b 0b03 	eor.w	fp, fp, r3
 800d8d4:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 800d8d8:	445c      	add	r4, fp
 800d8da:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 800d8de:	4426      	add	r6, r4
 800d8e0:	ea40 0701 	orr.w	r7, r0, r1
 800d8e4:	ea4f 3471 	mov.w	r4, r1, ror #13
 800d8e8:	ea00 0b01 	and.w	fp, r0, r1
 800d8ec:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 800d8f0:	402f      	ands	r7, r5
 800d8f2:	ea47 070b 	orr.w	r7, r7, fp
 800d8f6:	ea84 54b1 	eor.w	r4, r4, r1, ror #22
 800d8fa:	443c      	add	r4, r7
 800d8fc:	4434      	add	r4, r6
 800d8fe:	44b6      	add	lr, r6
            RND(4); RND(5); RND(6); RND(7);
 800d900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d904:	f8d9 6010 	ldr.w	r6, [r9, #16]
 800d908:	ea82 0b0c 	eor.w	fp, r2, ip
 800d90c:	443e      	add	r6, r7
 800d90e:	4433      	add	r3, r6
 800d910:	ea0b 0b0e 	and.w	fp, fp, lr
 800d914:	ea4f 26fe 	mov.w	r6, lr, ror #11
 800d918:	ea8b 0b02 	eor.w	fp, fp, r2
 800d91c:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 800d920:	445b      	add	r3, fp
 800d922:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 800d926:	441e      	add	r6, r3
 800d928:	ea41 0704 	orr.w	r7, r1, r4
 800d92c:	ea4f 3374 	mov.w	r3, r4, ror #13
 800d930:	ea01 0b04 	and.w	fp, r1, r4
 800d934:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 800d938:	4007      	ands	r7, r0
 800d93a:	ea47 070b 	orr.w	r7, r7, fp
 800d93e:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 800d942:	443b      	add	r3, r7
 800d944:	4433      	add	r3, r6
 800d946:	4435      	add	r5, r6
 800d948:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800d94c:	f8d9 6014 	ldr.w	r6, [r9, #20]
 800d950:	ea8c 0b0e 	eor.w	fp, ip, lr
 800d954:	443e      	add	r6, r7
 800d956:	4432      	add	r2, r6
 800d958:	ea0b 0b05 	and.w	fp, fp, r5
 800d95c:	ea4f 26f5 	mov.w	r6, r5, ror #11
 800d960:	ea8b 0b0c 	eor.w	fp, fp, ip
 800d964:	ea86 16b5 	eor.w	r6, r6, r5, ror #6
 800d968:	445a      	add	r2, fp
 800d96a:	ea86 6675 	eor.w	r6, r6, r5, ror #25
 800d96e:	4416      	add	r6, r2
 800d970:	ea44 0703 	orr.w	r7, r4, r3
 800d974:	ea4f 3273 	mov.w	r2, r3, ror #13
 800d978:	ea04 0b03 	and.w	fp, r4, r3
 800d97c:	400f      	ands	r7, r1
 800d97e:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 800d982:	ea47 070b 	orr.w	r7, r7, fp
 800d986:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 800d98a:	443a      	add	r2, r7
 800d98c:	4432      	add	r2, r6
 800d98e:	4430      	add	r0, r6
 800d990:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800d994:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800d998:	ea8e 0b05 	eor.w	fp, lr, r5
 800d99c:	443e      	add	r6, r7
 800d99e:	44b4      	add	ip, r6
 800d9a0:	ea0b 0b00 	and.w	fp, fp, r0
 800d9a4:	ea4f 26f0 	mov.w	r6, r0, ror #11
 800d9a8:	ea8b 0b0e 	eor.w	fp, fp, lr
 800d9ac:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 800d9b0:	44dc      	add	ip, fp
 800d9b2:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 800d9b6:	4466      	add	r6, ip
 800d9b8:	ea43 0702 	orr.w	r7, r3, r2
 800d9bc:	ea4f 3c72 	mov.w	ip, r2, ror #13
 800d9c0:	4027      	ands	r7, r4
 800d9c2:	ea03 0b02 	and.w	fp, r3, r2
 800d9c6:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 800d9ca:	ea47 070b 	orr.w	r7, r7, fp
 800d9ce:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 800d9d2:	44bc      	add	ip, r7
 800d9d4:	44b4      	add	ip, r6
 800d9d6:	4431      	add	r1, r6
 800d9d8:	f8d8 701c 	ldr.w	r7, [r8, #28]
 800d9dc:	f8d9 601c 	ldr.w	r6, [r9, #28]
 800d9e0:	ea85 0b00 	eor.w	fp, r5, r0
 800d9e4:	443e      	add	r6, r7
 800d9e6:	44b6      	add	lr, r6
 800d9e8:	ea0b 0b01 	and.w	fp, fp, r1
 800d9ec:	ea4f 26f1 	mov.w	r6, r1, ror #11
 800d9f0:	ea8b 0b05 	eor.w	fp, fp, r5
 800d9f4:	ea86 16b1 	eor.w	r6, r6, r1, ror #6
 800d9f8:	44de      	add	lr, fp
 800d9fa:	ea86 6671 	eor.w	r6, r6, r1, ror #25
 800d9fe:	4476      	add	r6, lr
 800da00:	ea42 070c 	orr.w	r7, r2, ip
 800da04:	ea4f 3e7c 	mov.w	lr, ip, ror #13
 800da08:	ea8e 0ebc 	eor.w	lr, lr, ip, ror #2
 800da0c:	401f      	ands	r7, r3
 800da0e:	ea02 0b0c 	and.w	fp, r2, ip
 800da12:	ea8e 5ebc 	eor.w	lr, lr, ip, ror #22
 800da16:	ea47 070b 	orr.w	r7, r7, fp
 800da1a:	44be      	add	lr, r7
 800da1c:	4434      	add	r4, r6
 800da1e:	44b6      	add	lr, r6
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 800da20:	9e03      	ldr	r6, [sp, #12]
 800da22:	f108 0820 	add.w	r8, r8, #32
 800da26:	4546      	cmp	r6, r8
 800da28:	f109 0920 	add.w	r9, r9, #32
 800da2c:	f47f aed8 	bne.w	800d7e0 <Transform_Sha256+0x9c>
 800da30:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
 800da34:	e9cd ec04 	strd	lr, ip, [sp, #16]
 800da38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da3c:	950b      	str	r5, [sp, #44]	; 0x2c
 800da3e:	9408      	str	r4, [sp, #32]
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
            sha256->digest[i] += S[i];
 800da40:	9b01      	ldr	r3, [sp, #4]
 800da42:	9900      	ldr	r1, [sp, #0]
 800da44:	f853 2b04 	ldr.w	r2, [r3], #4
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800da4e:	9100      	str	r1, [sp, #0]
 800da50:	4413      	add	r3, r2
 800da52:	600b      	str	r3, [r1, #0]
        for (i = 0; i < 8; i++) {
 800da54:	9b02      	ldr	r3, [sp, #8]
 800da56:	428b      	cmp	r3, r1
 800da58:	d1f2      	bne.n	800da40 <Transform_Sha256+0x2fc>
 800da5a:	f50a 7280 	add.w	r2, sl, #256	; 0x100
 800da5e:	4653      	mov	r3, sl
 800da60:	2100      	movs	r1, #0
    while (len--) *z++ = 0;
 800da62:	4293      	cmp	r3, r2
 800da64:	d106      	bne.n	800da74 <Transform_Sha256+0x330>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        ForceZero(W, sizeof(word32) * WC_SHA256_BLOCK_SIZE);
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800da66:	4650      	mov	r0, sl
 800da68:	f00d faa2 	bl	801afb0 <free>
    #endif
        return 0;
 800da6c:	2000      	movs	r0, #0
    }
 800da6e:	b00d      	add	sp, #52	; 0x34
 800da70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da74:	f803 1b01 	strb.w	r1, [r3], #1
 800da78:	e7f3      	b.n	800da62 <Transform_Sha256+0x31e>
            return MEMORY_E;
 800da7a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800da7e:	e7f6      	b.n	800da6e <Transform_Sha256+0x32a>
 800da80:	08022760 	.word	0x08022760

0800da84 <wc_InitSha256_ex>:
    {
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	460d      	mov	r5, r1
        if (sha256 == NULL)
 800da88:	4604      	mov	r4, r0
 800da8a:	b1f0      	cbz	r0, 800daca <wc_InitSha256_ex+0x46>
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 800da8c:	2220      	movs	r2, #32
 800da8e:	2100      	movs	r1, #0
 800da90:	f00d face 	bl	801b030 <memset>
    sha256->digest[1] = 0xBB67AE85L;
 800da94:	4b0e      	ldr	r3, [pc, #56]	; (800dad0 <wc_InitSha256_ex+0x4c>)
 800da96:	4a0f      	ldr	r2, [pc, #60]	; (800dad4 <wc_InitSha256_ex+0x50>)
    sha256->digest[3] = 0xA54FF53AL;
 800da98:	490f      	ldr	r1, [pc, #60]	; (800dad8 <wc_InitSha256_ex+0x54>)
    sha256->digest[5] = 0x9B05688CL;
 800da9a:	4810      	ldr	r0, [pc, #64]	; (800dadc <wc_InitSha256_ex+0x58>)
    sha256->digest[1] = 0xBB67AE85L;
 800da9c:	e9c4 2300 	strd	r2, r3, [r4]
    sha256->digest[3] = 0xA54FF53AL;
 800daa0:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <wc_InitSha256_ex+0x5c>)
 800daa2:	e9c4 1302 	strd	r1, r3, [r4, #8]
    sha256->digest[5] = 0x9B05688CL;
 800daa6:	4b0f      	ldr	r3, [pc, #60]	; (800dae4 <wc_InitSha256_ex+0x60>)
 800daa8:	e9c4 0304 	strd	r0, r3, [r4, #16]
    sha256->digest[6] = 0x1F83D9ABL;
 800daac:	4b0e      	ldr	r3, [pc, #56]	; (800dae8 <wc_InitSha256_ex+0x64>)
 800daae:	61a3      	str	r3, [r4, #24]
    sha256->buffLen = 0;
 800dab0:	2000      	movs	r0, #0
    sha256->digest[7] = 0x5BE0CD19L;
 800dab2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800dab6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    sha256->loLen   = 0;
 800daba:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
        sha256->heap = heap;
 800dabe:	e9c4 051a 	strd	r0, r5, [r4, #104]	; 0x68
    sha256->digest[7] = 0x5BE0CD19L;
 800dac2:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800dac6:	61e3      	str	r3, [r4, #28]
    }
 800dac8:	bd38      	pop	{r3, r4, r5, pc}
            return BAD_FUNC_ARG;
 800daca:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800dace:	e7fb      	b.n	800dac8 <wc_InitSha256_ex+0x44>
 800dad0:	bb67ae85 	.word	0xbb67ae85
 800dad4:	6a09e667 	.word	0x6a09e667
 800dad8:	3c6ef372 	.word	0x3c6ef372
 800dadc:	510e527f 	.word	0x510e527f
 800dae0:	a54ff53a 	.word	0xa54ff53a
 800dae4:	9b05688c 	.word	0x9b05688c
 800dae8:	1f83d9ab 	.word	0x1f83d9ab

0800daec <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 800daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf0:	460e      	mov	r6, r1
 800daf2:	4614      	mov	r4, r2
        if (sha256 == NULL || (data == NULL && len > 0)) {
 800daf4:	4605      	mov	r5, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d049      	beq.n	800db8e <wc_Sha256Update+0xa2>
 800dafa:	b919      	cbnz	r1, 800db04 <wc_Sha256Update+0x18>
 800dafc:	2a00      	cmp	r2, #0
 800dafe:	d146      	bne.n	800db8e <wc_Sha256Update+0xa2>
            sha256->buffLen = len;
 800db00:	2000      	movs	r0, #0
 800db02:	e042      	b.n	800db8a <wc_Sha256Update+0x9e>
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 800db04:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800db06:	283f      	cmp	r0, #63	; 0x3f
 800db08:	d844      	bhi.n	800db94 <wc_Sha256Update+0xa8>
            sha256->hiLen++;                       /* carry low to high */
 800db0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db0c:	18d3      	adds	r3, r2, r3
        if ((sha256->loLen += len) < tmp) {
 800db0e:	666b      	str	r3, [r5, #100]	; 0x64
            sha256->hiLen++;                       /* carry low to high */
 800db10:	bf22      	ittt	cs
 800db12:	6eab      	ldrcs	r3, [r5, #104]	; 0x68
 800db14:	3301      	addcs	r3, #1
 800db16:	66ab      	strcs	r3, [r5, #104]	; 0x68
        local = (byte*)sha256->buffer;
 800db18:	f105 0720 	add.w	r7, r5, #32
        if (sha256->buffLen > 0) {
 800db1c:	b1c8      	cbz	r0, 800db52 <wc_Sha256Update+0x66>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 800db1e:	f1c0 0840 	rsb	r8, r0, #64	; 0x40
        return a > b ? b : a;
 800db22:	4590      	cmp	r8, r2
 800db24:	bf28      	it	cs
 800db26:	4690      	movcs	r8, r2
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 800db28:	4642      	mov	r2, r8
 800db2a:	4438      	add	r0, r7
 800db2c:	f00d fa58 	bl	801afe0 <memcpy>
            sha256->buffLen += blocksLen;
 800db30:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800db32:	4442      	add	r2, r8
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 800db34:	2a40      	cmp	r2, #64	; 0x40
            sha256->buffLen += blocksLen;
 800db36:	662a      	str	r2, [r5, #96]	; 0x60
            data            += blocksLen;
 800db38:	4446      	add	r6, r8
            len             -= blocksLen;
 800db3a:	eba4 0408 	sub.w	r4, r4, r8
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 800db3e:	d108      	bne.n	800db52 <wc_Sha256Update+0x66>
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 800db40:	4638      	mov	r0, r7
 800db42:	4639      	mov	r1, r7
 800db44:	f7ff fdf1 	bl	800d72a <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local);
 800db48:	4628      	mov	r0, r5
 800db4a:	f7ff fdfb 	bl	800d744 <Transform_Sha256>
                if (ret == 0)
 800db4e:	b9e0      	cbnz	r0, 800db8a <wc_Sha256Update+0x9e>
                    sha256->buffLen = 0;
 800db50:	6628      	str	r0, [r5, #96]	; 0x60
 800db52:	4426      	add	r6, r4
            while (len >= WC_SHA256_BLOCK_SIZE) {
 800db54:	2c3f      	cmp	r4, #63	; 0x3f
 800db56:	eba6 0104 	sub.w	r1, r6, r4
 800db5a:	d807      	bhi.n	800db6c <wc_Sha256Update+0x80>
        if (ret == 0 && len > 0) {
 800db5c:	2c00      	cmp	r4, #0
 800db5e:	d0cf      	beq.n	800db00 <wc_Sha256Update+0x14>
            XMEMCPY(local, data, len);
 800db60:	4622      	mov	r2, r4
 800db62:	4638      	mov	r0, r7
 800db64:	f00d fa3c 	bl	801afe0 <memcpy>
            sha256->buffLen = len;
 800db68:	662c      	str	r4, [r5, #96]	; 0x60
 800db6a:	e7c9      	b.n	800db00 <wc_Sha256Update+0x14>
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 800db6c:	2240      	movs	r2, #64	; 0x40
 800db6e:	4638      	mov	r0, r7
 800db70:	f00d fa36 	bl	801afe0 <memcpy>
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 800db74:	4638      	mov	r0, r7
 800db76:	2240      	movs	r2, #64	; 0x40
 800db78:	4639      	mov	r1, r7
 800db7a:	f7ff fdd6 	bl	800d72a <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local32);
 800db7e:	4628      	mov	r0, r5
                len  -= WC_SHA256_BLOCK_SIZE;
 800db80:	3c40      	subs	r4, #64	; 0x40
                ret = XTRANSFORM(sha256, (const byte*)local32);
 800db82:	f7ff fddf 	bl	800d744 <Transform_Sha256>
                if (ret != 0)
 800db86:	2800      	cmp	r0, #0
 800db88:	d0e4      	beq.n	800db54 <wc_Sha256Update+0x68>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
    }
 800db8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BAD_FUNC_ARG;
 800db8e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800db92:	e7fa      	b.n	800db8a <wc_Sha256Update+0x9e>
            return BUFFER_E;
 800db94:	f06f 0083 	mvn.w	r0, #131	; 0x83
 800db98:	e7f7      	b.n	800db8a <wc_Sha256Update+0x9e>
	...

0800db9c <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 800db9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9e:	460f      	mov	r7, r1
        int ret;

        if (sha256 == NULL || hash == NULL) {
 800dba0:	4604      	mov	r4, r0
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d070      	beq.n	800dc88 <wc_Sha256Final+0xec>
 800dba6:	2900      	cmp	r1, #0
 800dba8:	d06e      	beq.n	800dc88 <wc_Sha256Final+0xec>
        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
 800dbaa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dbac:	2b3f      	cmp	r3, #63	; 0x3f
 800dbae:	d86e      	bhi.n	800dc8e <wc_Sha256Final+0xf2>
        local = (byte*)sha256->buffer;
 800dbb0:	f100 0620 	add.w	r6, r0, #32
        local[sha256->buffLen++] = 0x80; /* add 1 */
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	6602      	str	r2, [r0, #96]	; 0x60
 800dbb8:	2280      	movs	r2, #128	; 0x80
 800dbba:	54f2      	strb	r2, [r6, r3]
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 800dbbc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800dbbe:	2838      	cmp	r0, #56	; 0x38
 800dbc0:	d912      	bls.n	800dbe8 <wc_Sha256Final+0x4c>
            XMEMSET(&local[sha256->buffLen], 0,
 800dbc2:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	4430      	add	r0, r6
 800dbca:	f00d fa31 	bl	801b030 <memset>
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 800dbce:	2240      	movs	r2, #64	; 0x40
 800dbd0:	6622      	str	r2, [r4, #96]	; 0x60
                ByteReverseWords(sha256->buffer, sha256->buffer,
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff fda8 	bl	800d72a <ByteReverseWords>
            ret = XTRANSFORM(sha256, (const byte*)local);
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f7ff fdb2 	bl	800d744 <Transform_Sha256>
            if (ret != 0)
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d14e      	bne.n	800dc84 <wc_Sha256Final+0xe8>
            sha256->buffLen = 0;
 800dbe6:	6620      	str	r0, [r4, #96]	; 0x60
        XMEMSET(&local[sha256->buffLen], 0,
 800dbe8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800dbea:	2100      	movs	r1, #0
 800dbec:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800dbf0:	4430      	add	r0, r6
 800dbf2:	f00d fa1d 	bl	801b030 <memset>
                                                         (sha256->hiLen << 3);
 800dbf6:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 800dbfa:	0f5a      	lsrs	r2, r3, #29
 800dbfc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
        sha256->loLen = sha256->loLen << 3;
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	6663      	str	r3, [r4, #100]	; 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 800dc04:	66a2      	str	r2, [r4, #104]	; 0x68
            ByteReverseWords(sha256->buffer, sha256->buffer,
 800dc06:	4631      	mov	r1, r6
 800dc08:	2240      	movs	r2, #64	; 0x40
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f7ff fd8d 	bl	800d72a <ByteReverseWords>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 800dc10:	2204      	movs	r2, #4
 800dc12:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800dc16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc1a:	f00d f9e1 	bl	801afe0 <memcpy>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 800dc1e:	2204      	movs	r2, #4
 800dc20:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800dc24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc28:	f00d f9da 	bl	801afe0 <memcpy>
        ret = XTRANSFORM(sha256, (const byte*)local);
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f7ff fd88 	bl	800d744 <Transform_Sha256>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
        if (ret != 0) {
 800dc34:	4605      	mov	r5, r0
 800dc36:	bb28      	cbnz	r0, 800dc84 <wc_Sha256Final+0xe8>
            return ret;
        }

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 800dc38:	4621      	mov	r1, r4
 800dc3a:	2220      	movs	r2, #32
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f7ff fd74 	bl	800d72a <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 800dc42:	2220      	movs	r2, #32
 800dc44:	4638      	mov	r0, r7
 800dc46:	f00d f9cb 	bl	801afe0 <memcpy>
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 800dc4a:	2220      	movs	r2, #32
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f00d f9ee 	bl	801b030 <memset>
    sha256->digest[1] = 0xBB67AE85L;
 800dc54:	4b0f      	ldr	r3, [pc, #60]	; (800dc94 <wc_Sha256Final+0xf8>)
 800dc56:	4a10      	ldr	r2, [pc, #64]	; (800dc98 <wc_Sha256Final+0xfc>)
    sha256->digest[3] = 0xA54FF53AL;
 800dc58:	4910      	ldr	r1, [pc, #64]	; (800dc9c <wc_Sha256Final+0x100>)
    sha256->digest[5] = 0x9B05688CL;
 800dc5a:	4811      	ldr	r0, [pc, #68]	; (800dca0 <wc_Sha256Final+0x104>)
    sha256->hiLen   = 0;
 800dc5c:	66a5      	str	r5, [r4, #104]	; 0x68
    sha256->digest[1] = 0xBB67AE85L;
 800dc5e:	e9c4 2300 	strd	r2, r3, [r4]
    sha256->digest[3] = 0xA54FF53AL;
 800dc62:	4b10      	ldr	r3, [pc, #64]	; (800dca4 <wc_Sha256Final+0x108>)
 800dc64:	e9c4 1302 	strd	r1, r3, [r4, #8]
    sha256->digest[5] = 0x9B05688CL;
 800dc68:	4b0f      	ldr	r3, [pc, #60]	; (800dca8 <wc_Sha256Final+0x10c>)
 800dc6a:	e9c4 0304 	strd	r0, r3, [r4, #16]
    sha256->digest[6] = 0x1F83D9ABL;
 800dc6e:	4b0f      	ldr	r3, [pc, #60]	; (800dcac <wc_Sha256Final+0x110>)
 800dc70:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 800dc72:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800dc76:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    sha256->loLen   = 0;
 800dc7a:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    sha256->digest[7] = 0x5BE0CD19L;
 800dc7e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800dc82:	61e3      	str	r3, [r4, #28]

        return InitSha256(sha256);  /* reset state */
    }
 800dc84:	4628      	mov	r0, r5
 800dc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BAD_FUNC_ARG;
 800dc88:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800dc8c:	e7fa      	b.n	800dc84 <wc_Sha256Final+0xe8>
            return BAD_STATE_E;
 800dc8e:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
 800dc92:	e7f7      	b.n	800dc84 <wc_Sha256Final+0xe8>
 800dc94:	bb67ae85 	.word	0xbb67ae85
 800dc98:	6a09e667 	.word	0x6a09e667
 800dc9c:	3c6ef372 	.word	0x3c6ef372
 800dca0:	510e527f 	.word	0x510e527f
 800dca4:	a54ff53a 	.word	0xa54ff53a
 800dca8:	9b05688c 	.word	0x9b05688c
 800dcac:	1f83d9ab 	.word	0x1f83d9ab

0800dcb0 <wc_Sha256Free>:
#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
    if (sha256 == NULL)
 800dcb0:	b120      	cbz	r0, 800dcbc <wc_Sha256Free+0xc>
 800dcb2:	f100 0370 	add.w	r3, r0, #112	; 0x70
    while (len--) *z++ = 0;
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4298      	cmp	r0, r3
 800dcba:	d100      	bne.n	800dcbe <wc_Sha256Free+0xe>
    else {
        ESP_LOGV(TAG, "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
    ForceZero(sha256, sizeof(*sha256));
}
 800dcbc:	4770      	bx	lr
 800dcbe:	f800 2b01 	strb.w	r2, [r0], #1
 800dcc2:	e7f9      	b.n	800dcb8 <wc_Sha256Free+0x8>

0800dcc4 <wc_Sha256Copy>:
#endif

    return ret;
}
int wc_Sha256Copy(wc_Sha256* src, wc_Sha256* dst)
{
 800dcc4:	b508      	push	{r3, lr}
 800dcc6:	460b      	mov	r3, r1
    int ret = 0;

    if (src == NULL || dst == NULL) {
 800dcc8:	4601      	mov	r1, r0
 800dcca:	b130      	cbz	r0, 800dcda <wc_Sha256Copy+0x16>
 800dccc:	b12b      	cbz	r3, 800dcda <wc_Sha256Copy+0x16>
        return BAD_FUNC_ARG;
    }

    XMEMCPY(dst, src, sizeof(wc_Sha256));
 800dcce:	2270      	movs	r2, #112	; 0x70
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f00d f985 	bl	801afe0 <memcpy>
            return MEMORY_E;
        XMEMCPY(dst->msg, src->msg, src->len);
    }
#endif

    return ret;
 800dcd6:	2000      	movs	r0, #0
}
 800dcd8:	bd08      	pop	{r3, pc}
        return BAD_FUNC_ARG;
 800dcda:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800dcde:	e7fb      	b.n	800dcd8 <wc_Sha256Copy+0x14>

0800dce0 <wc_Sha256GetHash>:
{
 800dce0:	b570      	push	{r4, r5, r6, lr}
 800dce2:	460e      	mov	r6, r1
    if (sha256 == NULL || hash == NULL) {
 800dce4:	4604      	mov	r4, r0
 800dce6:	b1c0      	cbz	r0, 800dd1a <wc_Sha256GetHash+0x3a>
 800dce8:	b1b9      	cbz	r1, 800dd1a <wc_Sha256GetHash+0x3a>
    tmpSha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 800dcea:	2070      	movs	r0, #112	; 0x70
 800dcec:	f00d f958 	bl	801afa0 <malloc>
    if (tmpSha256 == NULL) {
 800dcf0:	4605      	mov	r5, r0
 800dcf2:	b1a8      	cbz	r0, 800dd20 <wc_Sha256GetHash+0x40>
    ret = wc_Sha256Copy(sha256, tmpSha256);
 800dcf4:	4601      	mov	r1, r0
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f7ff ffe4 	bl	800dcc4 <wc_Sha256Copy>
    if (ret == 0) {
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	b938      	cbnz	r0, 800dd10 <wc_Sha256GetHash+0x30>
        ret = wc_Sha256Final(tmpSha256, hash);
 800dd00:	4631      	mov	r1, r6
 800dd02:	4628      	mov	r0, r5
 800dd04:	f7ff ff4a 	bl	800db9c <wc_Sha256Final>
 800dd08:	4604      	mov	r4, r0
        wc_Sha256Free(tmpSha256); /* TODO move outside brackets? */
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f7ff ffd0 	bl	800dcb0 <wc_Sha256Free>
    XFREE(tmpSha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800dd10:	4628      	mov	r0, r5
 800dd12:	f00d f94d 	bl	801afb0 <free>
}
 800dd16:	4620      	mov	r0, r4
 800dd18:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 800dd1a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800dd1e:	e7fa      	b.n	800dd16 <wc_Sha256GetHash+0x36>
        return MEMORY_E;
 800dd20:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800dd24:	e7f7      	b.n	800dd16 <wc_Sha256GetHash+0x36>
	...

0800dd28 <InitSha512>:
#else

#ifdef WOLFSSL_SHA512

static int InitSha512(wc_Sha512* sha512)
{
 800dd28:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d032      	beq.n	800dd94 <InitSha512+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
 800dd2e:	a31c      	add	r3, pc, #112	; (adr r3, 800dda0 <InitSha512+0x78>)
 800dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd34:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
 800dd38:	a31b      	add	r3, pc, #108	; (adr r3, 800dda8 <InitSha512+0x80>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
 800dd42:	a31b      	add	r3, pc, #108	; (adr r3, 800ddb0 <InitSha512+0x88>)
 800dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd48:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
 800dd4c:	a31a      	add	r3, pc, #104	; (adr r3, 800ddb8 <InitSha512+0x90>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
 800dd56:	a31a      	add	r3, pc, #104	; (adr r3, 800ddc0 <InitSha512+0x98>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
 800dd60:	a319      	add	r3, pc, #100	; (adr r3, 800ddc8 <InitSha512+0xa0>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
 800dd6a:	a319      	add	r3, pc, #100	; (adr r3, 800ddd0 <InitSha512+0xa8>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 800dd74:	a318      	add	r3, pc, #96	; (adr r3, 800ddd8 <InitSha512+0xb0>)
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 800dd7a:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 800dd7c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 800dd80:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 800dd82:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 800dd84:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 800dd88:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 800dd8c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 800dd90:	4618      	mov	r0, r3
}
 800dd92:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 800dd94:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800dd98:	e7fb      	b.n	800dd92 <InitSha512+0x6a>
 800dd9a:	bf00      	nop
 800dd9c:	f3af 8000 	nop.w
 800dda0:	f3bcc908 	.word	0xf3bcc908
 800dda4:	6a09e667 	.word	0x6a09e667
 800dda8:	84caa73b 	.word	0x84caa73b
 800ddac:	bb67ae85 	.word	0xbb67ae85
 800ddb0:	fe94f82b 	.word	0xfe94f82b
 800ddb4:	3c6ef372 	.word	0x3c6ef372
 800ddb8:	5f1d36f1 	.word	0x5f1d36f1
 800ddbc:	a54ff53a 	.word	0xa54ff53a
 800ddc0:	ade682d1 	.word	0xade682d1
 800ddc4:	510e527f 	.word	0x510e527f
 800ddc8:	2b3e6c1f 	.word	0x2b3e6c1f
 800ddcc:	9b05688c 	.word	0x9b05688c
 800ddd0:	fb41bd6b 	.word	0xfb41bd6b
 800ddd4:	1f83d9ab 	.word	0x1f83d9ab
 800ddd8:	137e2179 	.word	0x137e2179
 800dddc:	5be0cd19 	.word	0x5be0cd19

0800dde0 <InitSha512_224>:
 * Note that sha512/224 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_224(wc_Sha512* sha512)
{
 800dde0:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d032      	beq.n	800de4c <InitSha512_224+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x8c3d37c819544da2);
 800dde6:	a31c      	add	r3, pc, #112	; (adr r3, 800de58 <InitSha512_224+0x78>)
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0x73e1996689dcd4d6);
 800ddf0:	a31b      	add	r3, pc, #108	; (adr r3, 800de60 <InitSha512_224+0x80>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x1dfab7ae32ff9c82);
 800ddfa:	a31b      	add	r3, pc, #108	; (adr r3, 800de68 <InitSha512_224+0x88>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0x679dd514582f9fcf);
 800de04:	a31a      	add	r3, pc, #104	; (adr r3, 800de70 <InitSha512_224+0x90>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x0f6d2b697bd44da8);
 800de0e:	a31a      	add	r3, pc, #104	; (adr r3, 800de78 <InitSha512_224+0x98>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0x77e36f7304c48942);
 800de18:	a319      	add	r3, pc, #100	; (adr r3, 800de80 <InitSha512_224+0xa0>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x3f9d85a86a1d36c8);
 800de22:	a319      	add	r3, pc, #100	; (adr r3, 800de88 <InitSha512_224+0xa8>)
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 800de2c:	a318      	add	r3, pc, #96	; (adr r3, 800de90 <InitSha512_224+0xb0>)
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 800de32:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 800de34:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 800de38:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 800de3a:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 800de3c:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 800de40:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 800de44:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 800de48:	4618      	mov	r0, r3
}
 800de4a:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 800de4c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800de50:	e7fb      	b.n	800de4a <InitSha512_224+0x6a>
 800de52:	bf00      	nop
 800de54:	f3af 8000 	nop.w
 800de58:	19544da2 	.word	0x19544da2
 800de5c:	8c3d37c8 	.word	0x8c3d37c8
 800de60:	89dcd4d6 	.word	0x89dcd4d6
 800de64:	73e19966 	.word	0x73e19966
 800de68:	32ff9c82 	.word	0x32ff9c82
 800de6c:	1dfab7ae 	.word	0x1dfab7ae
 800de70:	582f9fcf 	.word	0x582f9fcf
 800de74:	679dd514 	.word	0x679dd514
 800de78:	7bd44da8 	.word	0x7bd44da8
 800de7c:	0f6d2b69 	.word	0x0f6d2b69
 800de80:	04c48942 	.word	0x04c48942
 800de84:	77e36f73 	.word	0x77e36f73
 800de88:	6a1d36c8 	.word	0x6a1d36c8
 800de8c:	3f9d85a8 	.word	0x3f9d85a8
 800de90:	91d692a1 	.word	0x91d692a1
 800de94:	1112e6ad 	.word	0x1112e6ad

0800de98 <InitSha512_256>:
 * Note that sha512/256 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_256(wc_Sha512* sha512)
{
 800de98:	b530      	push	{r4, r5, lr}
    if (sha512 == NULL)
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d032      	beq.n	800df04 <InitSha512_256+0x6c>
        return BAD_FUNC_ARG;

    sha512->digest[0] = W64LIT(0x22312194fc2bf72c);
 800de9e:	a31c      	add	r3, pc, #112	; (adr r3, 800df10 <InitSha512_256+0x78>)
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	e9c0 2300 	strd	r2, r3, [r0]
    sha512->digest[1] = W64LIT(0x9f555fa3c84c64c2);
 800dea8:	a31b      	add	r3, pc, #108	; (adr r3, 800df18 <InitSha512_256+0x80>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	e9c0 2302 	strd	r2, r3, [r0, #8]
    sha512->digest[2] = W64LIT(0x2393b86b6f53b151);
 800deb2:	a31b      	add	r3, pc, #108	; (adr r3, 800df20 <InitSha512_256+0x88>)
 800deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
    sha512->digest[3] = W64LIT(0x963877195940eabd);
 800debc:	a31a      	add	r3, pc, #104	; (adr r3, 800df28 <InitSha512_256+0x90>)
 800debe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec2:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[4] = W64LIT(0x96283ee2a88effe3);
 800dec6:	a31a      	add	r3, pc, #104	; (adr r3, 800df30 <InitSha512_256+0x98>)
 800dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800decc:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[5] = W64LIT(0xbe5e1e2553863992);
 800ded0:	a319      	add	r3, pc, #100	; (adr r3, 800df38 <InitSha512_256+0xa0>)
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x2b0199fc2c85b8aa);
 800deda:	a319      	add	r3, pc, #100	; (adr r3, 800df40 <InitSha512_256+0xa8>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 800dee4:	a318      	add	r3, pc, #96	; (adr r3, 800df48 <InitSha512_256+0xb0>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]

    sha512->buffLen = 0;
    sha512->loLen   = 0;
 800deea:	2400      	movs	r4, #0
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 800deec:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->loLen   = 0;
 800def0:	2500      	movs	r5, #0
    sha512->buffLen = 0;
 800def2:	2300      	movs	r3, #0
    sha512->loLen   = 0;
 800def4:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
    sha512->hiLen   = 0;
 800def8:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0
    sha512->buffLen = 0;
 800defc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif

#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 800df00:	4618      	mov	r0, r3
}
 800df02:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 800df04:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800df08:	e7fb      	b.n	800df02 <InitSha512_256+0x6a>
 800df0a:	bf00      	nop
 800df0c:	f3af 8000 	nop.w
 800df10:	fc2bf72c 	.word	0xfc2bf72c
 800df14:	22312194 	.word	0x22312194
 800df18:	c84c64c2 	.word	0xc84c64c2
 800df1c:	9f555fa3 	.word	0x9f555fa3
 800df20:	6f53b151 	.word	0x6f53b151
 800df24:	2393b86b 	.word	0x2393b86b
 800df28:	5940eabd 	.word	0x5940eabd
 800df2c:	96387719 	.word	0x96387719
 800df30:	a88effe3 	.word	0xa88effe3
 800df34:	96283ee2 	.word	0x96283ee2
 800df38:	53863992 	.word	0x53863992
 800df3c:	be5e1e25 	.word	0xbe5e1e25
 800df40:	2c85b8aa 	.word	0x2c85b8aa
 800df44:	2b0199fc 	.word	0x2b0199fc
 800df48:	81c52ca2 	.word	0x81c52ca2
 800df4c:	0eb72ddc 	.word	0x0eb72ddc

0800df50 <ByteReverseWords64>:
{
 800df50:	b510      	push	{r4, lr}
 800df52:	f022 0207 	bic.w	r2, r2, #7
 800df56:	3808      	subs	r0, #8
 800df58:	440a      	add	r2, r1
        out[i] = ByteReverseWord64(in[i]);
 800df5a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800df5e:	ba24      	rev	r4, r4
 800df60:	f840 4f08 	str.w	r4, [r0, #8]!
 800df64:	3108      	adds	r1, #8
 800df66:	ba1b      	rev	r3, r3
    for (i = 0; i < count; i++)
 800df68:	428a      	cmp	r2, r1
        out[i] = ByteReverseWord64(in[i]);
 800df6a:	6043      	str	r3, [r0, #4]
    for (i = 0; i < count; i++)
 800df6c:	d1f5      	bne.n	800df5a <ByteReverseWords64+0xa>
}
 800df6e:	bd10      	pop	{r4, pc}

0800df70 <_Transform_Sha512>:
    h(i) += S1(e(i)) + Ch(e(i),f(i),g(i)) + K[(i)+j] + (j ? blk2(i) : blk0(i)); \
    d(i) += h(i); \
    h(i) += S0(a(i)) + Maj(a(i),b(i),c(i))

static int _Transform_Sha512(wc_Sha512* sha512)
{
 800df70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df74:	4605      	mov	r5, r0
 800df76:	b0c3      	sub	sp, #268	; 0x10c
            return MEMORY_E;
        sha512->W = W;
    }
#elif defined(WOLFSSL_SMALL_STACK)
    word64* W;
    W = (word64*) XMALLOC(sizeof(word64) * 16, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800df78:	2080      	movs	r0, #128	; 0x80
 800df7a:	f00d f811 	bl	801afa0 <malloc>
    if (W == NULL)
 800df7e:	4604      	mov	r4, r0
 800df80:	2800      	cmp	r0, #0
 800df82:	f001 87e2 	beq.w	800ff4a <_Transform_Sha512+0x1fda>
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
 800df86:	2240      	movs	r2, #64	; 0x40
 800df88:	4629      	mov	r1, r5
 800df8a:	a832      	add	r0, sp, #200	; 0xc8
 800df8c:	f00d f828 	bl	801afe0 <memcpy>
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
 800df90:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800df92:	932f      	str	r3, [sp, #188]	; 0xbc
 800df94:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800df96:	932b      	str	r3, [sp, #172]	; 0xac
 800df98:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800df9a:	932c      	str	r3, [sp, #176]	; 0xb0
 800df9c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800df9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfa0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800dfa2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	9319      	str	r3, [sp, #100]	; 0x64
 800dfa8:	68e3      	ldr	r3, [r4, #12]
 800dfaa:	9309      	str	r3, [sp, #36]	; 0x24
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	9318      	str	r3, [sp, #96]	; 0x60
 800dfb0:	6863      	ldr	r3, [r4, #4]
 800dfb2:	9308      	str	r3, [sp, #32]
 800dfb4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800dfb6:	9329      	str	r3, [sp, #164]	; 0xa4
 800dfb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dfba:	932a      	str	r3, [sp, #168]	; 0xa8
 800dfbc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800dfbe:	9322      	str	r3, [sp, #136]	; 0x88
 800dfc0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800dfc2:	9327      	str	r3, [sp, #156]	; 0x9c
 800dfc4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800dfc6:	9328      	str	r3, [sp, #160]	; 0xa0
 800dfc8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800dfca:	f8dd a0ec 	ldr.w	sl, [sp, #236]	; 0xec
 800dfce:	f8dd b0e4 	ldr.w	fp, [sp, #228]	; 0xe4
 800dfd2:	9325      	str	r3, [sp, #148]	; 0x94
 800dfd4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800dfd6:	9326      	str	r3, [sp, #152]	; 0x98
 800dfd8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800dfda:	9323      	str	r3, [sp, #140]	; 0x8c
 800dfdc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800dfde:	9324      	str	r3, [sp, #144]	; 0x90
 800dfe0:	6923      	ldr	r3, [r4, #16]
 800dfe2:	9317      	str	r3, [sp, #92]	; 0x5c
 800dfe4:	6963      	ldr	r3, [r4, #20]
 800dfe6:	9307      	str	r3, [sp, #28]
 800dfe8:	69a3      	ldr	r3, [r4, #24]
 800dfea:	9312      	str	r3, [sp, #72]	; 0x48
 800dfec:	69e3      	ldr	r3, [r4, #28]
 800dfee:	9302      	str	r3, [sp, #8]
 800dff0:	6a23      	ldr	r3, [r4, #32]
 800dff2:	931a      	str	r3, [sp, #104]	; 0x68
 800dff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff6:	930a      	str	r3, [sp, #40]	; 0x28
 800dff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dffa:	9314      	str	r3, [sp, #80]	; 0x50
 800dffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e002:	9320      	str	r3, [sp, #128]	; 0x80
 800e004:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e006:	9310      	str	r3, [sp, #64]	; 0x40
 800e008:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e00a:	9315      	str	r3, [sp, #84]	; 0x54
 800e00c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e00e:	9305      	str	r3, [sp, #20]
 800e010:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e012:	9321      	str	r3, [sp, #132]	; 0x84
 800e014:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800e016:	9311      	str	r3, [sp, #68]	; 0x44
 800e018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e01a:	9316      	str	r3, [sp, #88]	; 0x58
 800e01c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e01e:	9306      	str	r3, [sp, #24]
 800e020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e022:	931b      	str	r3, [sp, #108]	; 0x6c
 800e024:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e026:	930b      	str	r3, [sp, #44]	; 0x2c
 800e028:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e02a:	931c      	str	r3, [sp, #112]	; 0x70
 800e02c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e02e:	930c      	str	r3, [sp, #48]	; 0x30
 800e030:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e032:	931d      	str	r3, [sp, #116]	; 0x74
 800e034:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e036:	930d      	str	r3, [sp, #52]	; 0x34
 800e038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e03a:	931e      	str	r3, [sp, #120]	; 0x78
 800e03c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e03e:	930e      	str	r3, [sp, #56]	; 0x38
 800e040:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e042:	9313      	str	r3, [sp, #76]	; 0x4c
 800e044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e046:	9303      	str	r3, [sp, #12]
 800e048:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e04a:	931f      	str	r3, [sp, #124]	; 0x7c
 800e04c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e050:	2200      	movs	r2, #0
 800e052:	4bbf      	ldr	r3, [pc, #764]	; (800e350 <_Transform_Sha512+0x3e0>)
 800e054:	9201      	str	r2, [sp, #4]
    return (x >> y) | (x << (sizeof(y) * 8 - y));
 800e056:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e058:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800e05a:	ea4f 469a 	mov.w	r6, sl, lsr #18
 800e05e:	ea4f 379a 	mov.w	r7, sl, lsr #14
 800e062:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 800e066:	ea46 3082 	orr.w	r0, r6, r2, lsl #14
 800e06a:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 800e06e:	0b89      	lsrs	r1, r1, #14
        R( 0); R( 1); R( 2); R( 3);
 800e070:	ea87 0600 	eor.w	r6, r7, r0
 800e074:	ea4c 3c8a 	orr.w	ip, ip, sl, lsl #14
 800e078:	05d0      	lsls	r0, r2, #23
 800e07a:	ea41 418a 	orr.w	r1, r1, sl, lsl #18
 800e07e:	ea81 010c 	eor.w	r1, r1, ip
 800e082:	ea40 205a 	orr.w	r0, r0, sl, lsr #9
 800e086:	ea4f 57ca 	mov.w	r7, sl, lsl #23
 800e08a:	ea47 2752 	orr.w	r7, r7, r2, lsr #9
 800e08e:	4041      	eors	r1, r0
 800e090:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e092:	982b      	ldr	r0, [sp, #172]	; 0xac
 800e094:	ea82 0c00 	eor.w	ip, r2, r0
 800e098:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e09a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e09c:	4077      	eors	r7, r6
 800e09e:	ea82 0600 	eor.w	r6, r2, r0
 800e0a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e0a4:	ea0c 0c02 	and.w	ip, ip, r2
 800e0a8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e0aa:	ea06 060a 	and.w	r6, r6, sl
 800e0ae:	ea8c 0c02 	eor.w	ip, ip, r2
 800e0b2:	4070      	eors	r0, r6
 800e0b4:	eb11 010c 	adds.w	r1, r1, ip
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	9230      	str	r2, [sp, #192]	; 0xc0
 800e0bc:	eb47 0600 	adc.w	r6, r7, r0
 800e0c0:	9801      	ldr	r0, [sp, #4]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	9231      	str	r2, [sp, #196]	; 0xc4
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f001 86d8 	beq.w	800fe7c <_Transform_Sha512+0x1f0c>
 800e0cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e0ce:	ea4f 4ed2 	mov.w	lr, r2, lsr #19
 800e0d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0d4:	ea4e 3e42 	orr.w	lr, lr, r2, lsl #13
 800e0d8:	4610      	mov	r0, r2
 800e0da:	0cd7      	lsrs	r7, r2, #19
 800e0dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e0de:	ea47 3742 	orr.w	r7, r7, r2, lsl #13
 800e0e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e0e4:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 800e0e8:	ea4c 7c52 	orr.w	ip, ip, r2, lsr #29
 800e0ec:	ea87 0c0c 	eor.w	ip, r7, ip
 800e0f0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800e0f2:	00d0      	lsls	r0, r2, #3
 800e0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0f6:	09bf      	lsrs	r7, r7, #6
 800e0f8:	ea47 6782 	orr.w	r7, r7, r2, lsl #26
 800e0fc:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800e100:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
 800e104:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e106:	ea4f 0952 	mov.w	r9, r2, lsr #1
 800e10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e10c:	ea8e 0000 	eor.w	r0, lr, r0
 800e110:	4078      	eors	r0, r7
 800e112:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 800e116:	0857      	lsrs	r7, r2, #1
 800e118:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e11a:	ea47 77c2 	orr.w	r7, r7, r2, lsl #31
 800e11e:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800e122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e124:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 800e128:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800e12c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e12e:	ea89 0e0e 	eor.w	lr, r9, lr
 800e132:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 800e136:	ea4f 19d2 	mov.w	r9, r2, lsr #7
 800e13a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e13c:	ea87 0708 	eor.w	r7, r7, r8
 800e140:	ea49 6942 	orr.w	r9, r9, r2, lsl #25
 800e144:	ea87 17d2 	eor.w	r7, r7, r2, lsr #7
 800e148:	ea8e 0e09 	eor.w	lr, lr, r9
 800e14c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e14e:	eb10 0e0e 	adds.w	lr, r0, lr
 800e152:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e154:	eb4c 0707 	adc.w	r7, ip, r7
 800e158:	eb1e 0e02 	adds.w	lr, lr, r2
 800e15c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e15e:	eb40 0707 	adc.w	r7, r0, r7
 800e162:	9808      	ldr	r0, [sp, #32]
 800e164:	eb1e 0e02 	adds.w	lr, lr, r2
 800e168:	eb40 0007 	adc.w	r0, r0, r7
 800e16c:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800e170:	9008      	str	r0, [sp, #32]
 800e172:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800e174:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800e178:	1809      	adds	r1, r1, r0
 800e17a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800e17c:	eb46 0600 	adc.w	r6, r6, r0
 800e180:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e182:	1809      	adds	r1, r1, r0
 800e184:	9808      	ldr	r0, [sp, #32]
 800e186:	eb40 0606 	adc.w	r6, r0, r6
 800e18a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800e18c:	1809      	adds	r1, r1, r0
 800e18e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800e190:	eb40 0606 	adc.w	r6, r0, r6
 800e194:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e196:	1808      	adds	r0, r1, r0
 800e198:	eb46 020b 	adc.w	r2, r6, fp
 800e19c:	9230      	str	r2, [sp, #192]	; 0xc0
 800e19e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e1a0:	902a      	str	r0, [sp, #168]	; 0xa8
 800e1a2:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 800e1a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e1a8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800e1aa:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 800e1ae:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 800e1b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e1b4:	0780      	lsls	r0, r0, #30
 800e1b6:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 800e1ba:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 800e1be:	0797      	lsls	r7, r2, #30
 800e1c0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e1c2:	ea8c 0c00 	eor.w	ip, ip, r0
 800e1c6:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 800e1ca:	0650      	lsls	r0, r2, #25
 800e1cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e1ce:	ea8e 0e07 	eor.w	lr, lr, r7
 800e1d2:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 800e1d6:	0657      	lsls	r7, r2, #25
 800e1d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e1da:	ea8c 0c00 	eor.w	ip, ip, r0
 800e1de:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 800e1e2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800e1e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e1e6:	ea40 0802 	orr.w	r8, r0, r2
 800e1ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e1ec:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e1ee:	ea8e 0e07 	eor.w	lr, lr, r7
 800e1f2:	4310      	orrs	r0, r2
 800e1f4:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800e1f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e1f8:	4038      	ands	r0, r7
 800e1fa:	ea08 0802 	and.w	r8, r8, r2
 800e1fe:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800e200:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e202:	4017      	ands	r7, r2
 800e204:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e206:	ea48 0707 	orr.w	r7, r8, r7
 800e20a:	ea02 0909 	and.w	r9, r2, r9
 800e20e:	eb1e 0707 	adds.w	r7, lr, r7
 800e212:	ea40 0909 	orr.w	r9, r0, r9
 800e216:	eb4c 0909 	adc.w	r9, ip, r9
 800e21a:	1879      	adds	r1, r7, r1
 800e21c:	eb46 0209 	adc.w	r2, r6, r9
 800e220:	9229      	str	r2, [sp, #164]	; 0xa4
 800e222:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e224:	9122      	str	r1, [sp, #136]	; 0x88
 800e226:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 800e22a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e22c:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 800e230:	0b96      	lsrs	r6, r2, #14
 800e232:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e234:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 800e238:	0c90      	lsrs	r0, r2, #18
 800e23a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e23c:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 800e240:	0c91      	lsrs	r1, r2, #18
 800e242:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e244:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e248:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800e24c:	404e      	eors	r6, r1
 800e24e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800e250:	05c9      	lsls	r1, r1, #23
 800e252:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 800e256:	ea8c 0c00 	eor.w	ip, ip, r0
 800e25a:	05d0      	lsls	r0, r2, #23
 800e25c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e25e:	404e      	eors	r6, r1
 800e260:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 800e264:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800e266:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e268:	ea8c 0c00 	eor.w	ip, ip, r0
 800e26c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800e26e:	4051      	eors	r1, r2
 800e270:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e272:	4001      	ands	r1, r0
 800e274:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800e276:	ea82 070a 	eor.w	r7, r2, sl
 800e27a:	4007      	ands	r7, r0
 800e27c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800e27e:	4057      	eors	r7, r2
 800e280:	4041      	eors	r1, r0
 800e282:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e284:	6898      	ldr	r0, [r3, #8]
 800e286:	1810      	adds	r0, r2, r0
 800e288:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e28a:	eb42 080e 	adc.w	r8, r2, lr
 800e28e:	180a      	adds	r2, r1, r0
 800e290:	922b      	str	r2, [sp, #172]	; 0xac
 800e292:	9a01      	ldr	r2, [sp, #4]
 800e294:	eb47 0708 	adc.w	r7, r7, r8
 800e298:	2a00      	cmp	r2, #0
 800e29a:	f001 85f5 	beq.w	800fe88 <_Transform_Sha512+0x1f18>
 800e29e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e2a2:	ea4f 49d2 	mov.w	r9, r2, lsr #19
 800e2a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2a8:	ea49 3942 	orr.w	r9, r9, r2, lsl #13
 800e2ac:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 800e2b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2b2:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 800e2b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2b8:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 800e2bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2be:	ea4e 7e52 	orr.w	lr, lr, r2, lsr #29
 800e2c2:	00d0      	lsls	r0, r2, #3
 800e2c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2c6:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800e2ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2cc:	ea88 0e0e 	eor.w	lr, r8, lr
 800e2d0:	ea4f 1892 	mov.w	r8, r2, lsr #6
 800e2d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2d6:	ea89 0000 	eor.w	r0, r9, r0
 800e2da:	ea48 6882 	orr.w	r8, r8, r2, lsl #26
 800e2de:	ea80 0008 	eor.w	r0, r0, r8
 800e2e2:	ea8e 1e92 	eor.w	lr, lr, r2, lsr #6
 800e2e6:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e2ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e2ec:	eb12 0b08 	adds.w	fp, r2, r8
 800e2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2f2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800e2f6:	eb42 0808 	adc.w	r8, r2, r8
 800e2fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e2fc:	eb10 000b 	adds.w	r0, r0, fp
 800e300:	ea4f 0b52 	mov.w	fp, r2, lsr #1
 800e304:	9a07      	ldr	r2, [sp, #28]
 800e306:	eb4e 0e08 	adc.w	lr, lr, r8
 800e30a:	ea4b 7bc2 	orr.w	fp, fp, r2, lsl #31
 800e30e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800e312:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e314:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 800e318:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800e31c:	9a07      	ldr	r2, [sp, #28]
 800e31e:	ea49 6902 	orr.w	r9, r9, r2, lsl #24
 800e322:	0a12      	lsrs	r2, r2, #8
 800e324:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e328:	ea88 0802 	eor.w	r8, r8, r2
 800e32c:	9a07      	ldr	r2, [sp, #28]
 800e32e:	ea8b 0909 	eor.w	r9, fp, r9
 800e332:	ea4f 1bd1 	mov.w	fp, r1, lsr #7
 800e336:	ea4b 6b42 	orr.w	fp, fp, r2, lsl #25
 800e33a:	ea89 090b 	eor.w	r9, r9, fp
 800e33e:	ea88 18d2 	eor.w	r8, r8, r2, lsr #7
 800e342:	eb10 0209 	adds.w	r2, r0, r9
 800e346:	9219      	str	r2, [sp, #100]	; 0x64
 800e348:	eb4e 0208 	adc.w	r2, lr, r8
 800e34c:	e002      	b.n	800e354 <_Transform_Sha512+0x3e4>
 800e34e:	bf00      	nop
 800e350:	08022860 	.word	0x08022860
 800e354:	9209      	str	r2, [sp, #36]	; 0x24
 800e356:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e358:	eb1c 0102 	adds.w	r1, ip, r2
 800e35c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e35e:	eb46 0607 	adc.w	r6, r6, r7
 800e362:	1889      	adds	r1, r1, r2
 800e364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e366:	eb42 0606 	adc.w	r6, r2, r6
 800e36a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e36c:	188a      	adds	r2, r1, r2
 800e36e:	922b      	str	r2, [sp, #172]	; 0xac
 800e370:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e372:	eb46 0202 	adc.w	r2, r6, r2
 800e376:	922c      	str	r2, [sp, #176]	; 0xb0
 800e378:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e37a:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 800e37e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e380:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 800e384:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 800e388:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e38a:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 800e38e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e390:	0790      	lsls	r0, r2, #30
 800e392:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e394:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 800e398:	0797      	lsls	r7, r2, #30
 800e39a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e39c:	ea8e 0e00 	eor.w	lr, lr, r0
 800e3a0:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 800e3a4:	0650      	lsls	r0, r2, #25
 800e3a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3a8:	ea8c 0c07 	eor.w	ip, ip, r7
 800e3ac:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 800e3b0:	0657      	lsls	r7, r2, #25
 800e3b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e3b4:	ea8e 0e00 	eor.w	lr, lr, r0
 800e3b8:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 800e3bc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800e3be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3c0:	ea8c 0c07 	eor.w	ip, ip, r7
 800e3c4:	ea42 0700 	orr.w	r7, r2, r0
 800e3c8:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 800e3cc:	ea42 0800 	orr.w	r8, r2, r0
 800e3d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e3d2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800e3d4:	4017      	ands	r7, r2
 800e3d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e3d8:	ea08 0802 	and.w	r8, r8, r2
 800e3dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3de:	4010      	ands	r0, r2
 800e3e0:	e9dd 9228 	ldrd	r9, r2, [sp, #160]	; 0xa0
 800e3e4:	4307      	orrs	r7, r0
 800e3e6:	ea02 0909 	and.w	r9, r2, r9
 800e3ea:	eb1c 0707 	adds.w	r7, ip, r7
 800e3ee:	ea48 0909 	orr.w	r9, r8, r9
 800e3f2:	eb4e 0909 	adc.w	r9, lr, r9
 800e3f6:	187a      	adds	r2, r7, r1
 800e3f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800e3fa:	eb46 0209 	adc.w	r2, r6, r9
 800e3fe:	9224      	str	r2, [sp, #144]	; 0x90
 800e400:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e402:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 800e406:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e408:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 800e40c:	0b96      	lsrs	r6, r2, #14
 800e40e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e410:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 800e414:	0c90      	lsrs	r0, r2, #18
 800e416:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e418:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 800e41c:	0c91      	lsrs	r1, r2, #18
 800e41e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e420:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800e424:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800e428:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e42a:	404e      	eors	r6, r1
 800e42c:	05d1      	lsls	r1, r2, #23
 800e42e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e430:	ea8c 0c00 	eor.w	ip, ip, r0
 800e434:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 800e438:	05d0      	lsls	r0, r2, #23
 800e43a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e43c:	404e      	eors	r6, r1
 800e43e:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 800e442:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800e444:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e446:	4051      	eors	r1, r2
 800e448:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e44a:	ea82 070a 	eor.w	r7, r2, sl
 800e44e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e450:	4011      	ands	r1, r2
 800e452:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e454:	4017      	ands	r7, r2
 800e456:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e458:	ea8c 0c00 	eor.w	ip, ip, r0
 800e45c:	4051      	eors	r1, r2
 800e45e:	6918      	ldr	r0, [r3, #16]
 800e460:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e462:	1810      	adds	r0, r2, r0
 800e464:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e466:	eb42 0e0e 	adc.w	lr, r2, lr
 800e46a:	9a01      	ldr	r2, [sp, #4]
 800e46c:	ea87 070a 	eor.w	r7, r7, sl
 800e470:	1809      	adds	r1, r1, r0
 800e472:	eb47 070e 	adc.w	r7, r7, lr
 800e476:	2a00      	cmp	r2, #0
 800e478:	f001 850b 	beq.w	800fe92 <_Transform_Sha512+0x1f22>
 800e47c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e47e:	ea4f 0952 	mov.w	r9, r2, lsr #1
 800e482:	9a02      	ldr	r2, [sp, #8]
 800e484:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 800e488:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800e48c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e48e:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 800e492:	0a10      	lsrs	r0, r2, #8
 800e494:	9a02      	ldr	r2, [sp, #8]
 800e496:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800e49a:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800e49e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e4a0:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 800e4a4:	ea88 0e0e 	eor.w	lr, r8, lr
 800e4a8:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 800e4ac:	9a02      	ldr	r2, [sp, #8]
 800e4ae:	ea89 0000 	eor.w	r0, r9, r0
 800e4b2:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 800e4b6:	ea80 0008 	eor.w	r0, r0, r8
 800e4ba:	ea8e 1ed2 	eor.w	lr, lr, r2, lsr #7
 800e4be:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e4c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4c4:	eb12 0b08 	adds.w	fp, r2, r8
 800e4c8:	9a07      	ldr	r2, [sp, #28]
 800e4ca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800e4ce:	eb42 0808 	adc.w	r8, r2, r8
 800e4d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e4d4:	eb10 000b 	adds.w	r0, r0, fp
 800e4d8:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 800e4dc:	9a08      	ldr	r2, [sp, #32]
 800e4de:	eb4e 0e08 	adc.w	lr, lr, r8
 800e4e2:	ea4b 3b42 	orr.w	fp, fp, r2, lsl #13
 800e4e6:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 800e4ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e4ec:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 800e4f0:	9a08      	ldr	r2, [sp, #32]
 800e4f2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800e4f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e4f8:	ea49 7252 	orr.w	r2, r9, r2, lsr #29
 800e4fc:	9207      	str	r2, [sp, #28]
 800e4fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e500:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800e504:	9a08      	ldr	r2, [sp, #32]
 800e506:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800e50a:	9a07      	ldr	r2, [sp, #28]
 800e50c:	ea88 0802 	eor.w	r8, r8, r2
 800e510:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e512:	ea8b 0909 	eor.w	r9, fp, r9
 800e516:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 800e51a:	9a08      	ldr	r2, [sp, #32]
 800e51c:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 800e520:	ea89 090b 	eor.w	r9, r9, fp
 800e524:	ea88 1892 	eor.w	r8, r8, r2, lsr #6
 800e528:	eb10 0209 	adds.w	r2, r0, r9
 800e52c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e52e:	eb4e 0208 	adc.w	r2, lr, r8
 800e532:	9207      	str	r2, [sp, #28]
 800e534:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e536:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800e53a:	eb1c 0101 	adds.w	r1, ip, r1
 800e53e:	eb46 0607 	adc.w	r6, r6, r7
 800e542:	1889      	adds	r1, r1, r2
 800e544:	9a07      	ldr	r2, [sp, #28]
 800e546:	eb42 0606 	adc.w	r6, r2, r6
 800e54a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e54c:	188a      	adds	r2, r1, r2
 800e54e:	922d      	str	r2, [sp, #180]	; 0xb4
 800e550:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e552:	eb46 0202 	adc.w	r2, r6, r2
 800e556:	922e      	str	r2, [sp, #184]	; 0xb8
 800e558:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e55a:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 800e55e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e560:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 800e564:	ea4f 7e12 	mov.w	lr, r2, lsr #28
 800e568:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e56a:	ea4e 1e02 	orr.w	lr, lr, r2, lsl #4
 800e56e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e570:	0790      	lsls	r0, r2, #30
 800e572:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e574:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 800e578:	0797      	lsls	r7, r2, #30
 800e57a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e57c:	ea8e 0e00 	eor.w	lr, lr, r0
 800e580:	ea47 0792 	orr.w	r7, r7, r2, lsr #2
 800e584:	0650      	lsls	r0, r2, #25
 800e586:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e588:	ea8c 0c07 	eor.w	ip, ip, r7
 800e58c:	ea40 10d2 	orr.w	r0, r0, r2, lsr #7
 800e590:	0657      	lsls	r7, r2, #25
 800e592:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e594:	ea8e 0e00 	eor.w	lr, lr, r0
 800e598:	ea47 17d2 	orr.w	r7, r7, r2, lsr #7
 800e59c:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 800e5a0:	ea8c 0c07 	eor.w	ip, ip, r7
 800e5a4:	ea42 0700 	orr.w	r7, r2, r0
 800e5a8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e5aa:	9824      	ldr	r0, [sp, #144]	; 0x90
 800e5ac:	ea42 0800 	orr.w	r8, r2, r0
 800e5b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e5b2:	4017      	ands	r7, r2
 800e5b4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e5b6:	ea08 0802 	and.w	r8, r8, r2
 800e5ba:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 800e5be:	4010      	ands	r0, r2
 800e5c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e5c2:	4338      	orrs	r0, r7
 800e5c4:	ea02 0909 	and.w	r9, r2, r9
 800e5c8:	eb1c 0000 	adds.w	r0, ip, r0
 800e5cc:	ea48 0909 	orr.w	r9, r8, r9
 800e5d0:	eb4e 0909 	adc.w	r9, lr, r9
 800e5d4:	1842      	adds	r2, r0, r1
 800e5d6:	9225      	str	r2, [sp, #148]	; 0x94
 800e5d8:	eb46 0209 	adc.w	r2, r6, r9
 800e5dc:	9226      	str	r2, [sp, #152]	; 0x98
 800e5de:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e5e0:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 800e5e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e5e6:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 800e5ea:	0b96      	lsrs	r6, r2, #14
 800e5ec:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e5ee:	ea46 4682 	orr.w	r6, r6, r2, lsl #18
 800e5f2:	0c90      	lsrs	r0, r2, #18
 800e5f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e5f6:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
 800e5fa:	0c91      	lsrs	r1, r2, #18
 800e5fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e5fe:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800e602:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e604:	404e      	eors	r6, r1
 800e606:	05d1      	lsls	r1, r2, #23
 800e608:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e60a:	ea8c 0c00 	eor.w	ip, ip, r0
 800e60e:	ea41 2152 	orr.w	r1, r1, r2, lsr #9
 800e612:	05d0      	lsls	r0, r2, #23
 800e614:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e616:	404e      	eors	r6, r1
 800e618:	ea40 2052 	orr.w	r0, r0, r2, lsr #9
 800e61c:	e9dd 212a 	ldrd	r2, r1, [sp, #168]	; 0xa8
 800e620:	ea8c 0c00 	eor.w	ip, ip, r0
 800e624:	4051      	eors	r1, r2
 800e626:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e628:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e62a:	ea82 0700 	eor.w	r7, r2, r0
 800e62e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e630:	6998      	ldr	r0, [r3, #24]
 800e632:	4011      	ands	r1, r2
 800e634:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e636:	4017      	ands	r7, r2
 800e638:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e63a:	4051      	eors	r1, r2
 800e63c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e63e:	4057      	eors	r7, r2
 800e640:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e642:	1810      	adds	r0, r2, r0
 800e644:	69da      	ldr	r2, [r3, #28]
 800e646:	eb4a 0e02 	adc.w	lr, sl, r2
 800e64a:	9a01      	ldr	r2, [sp, #4]
 800e64c:	1809      	adds	r1, r1, r0
 800e64e:	eb47 070e 	adc.w	r7, r7, lr
 800e652:	2a00      	cmp	r2, #0
 800e654:	f001 8422 	beq.w	800fe9c <_Transform_Sha512+0x1f2c>
 800e658:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e65a:	ea4f 0952 	mov.w	r9, r2, lsr #1
 800e65e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e660:	ea49 79c2 	orr.w	r9, r9, r2, lsl #31
 800e664:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800e668:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e66a:	ea48 78c2 	orr.w	r8, r8, r2, lsl #31
 800e66e:	0a10      	lsrs	r0, r2, #8
 800e670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e672:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800e676:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800e67a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e67c:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 800e680:	ea88 0e0e 	eor.w	lr, r8, lr
 800e684:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 800e688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e68a:	ea89 0000 	eor.w	r0, r9, r0
 800e68e:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 800e692:	ea80 0008 	eor.w	r0, r0, r8
 800e696:	ea8e 1ed2 	eor.w	lr, lr, r2, lsr #7
 800e69a:	e9dd 2812 	ldrd	r2, r8, [sp, #72]	; 0x48
 800e69e:	eb12 0b08 	adds.w	fp, r2, r8
 800e6a2:	e9dd 2802 	ldrd	r2, r8, [sp, #8]
 800e6a6:	eb42 0808 	adc.w	r8, r2, r8
 800e6aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e6ac:	eb10 000b 	adds.w	r0, r0, fp
 800e6b0:	ea4f 4bd2 	mov.w	fp, r2, lsr #19
 800e6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6b6:	eb4e 0e08 	adc.w	lr, lr, r8
 800e6ba:	ea4b 3b42 	orr.w	fp, fp, r2, lsl #13
 800e6be:	ea4f 48d2 	mov.w	r8, r2, lsr #19
 800e6c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e6c4:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 800e6c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6ca:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 800e6ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e6d0:	ea4a 7a52 	orr.w	sl, sl, r2, lsr #29
 800e6d4:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800e6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6da:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800e6de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e6e0:	ea8b 0909 	eor.w	r9, fp, r9
 800e6e4:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 800e6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6ea:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 800e6ee:	ea88 080a 	eor.w	r8, r8, sl
 800e6f2:	ea89 090b 	eor.w	r9, r9, fp
 800e6f6:	ea88 1892 	eor.w	r8, r8, r2, lsr #6
 800e6fa:	eb10 0209 	adds.w	r2, r0, r9
 800e6fe:	9212      	str	r2, [sp, #72]	; 0x48
 800e700:	eb4e 0208 	adc.w	r2, lr, r8
 800e704:	9202      	str	r2, [sp, #8]
 800e706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e708:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 800e70c:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e710:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800e714:	eb1c 0101 	adds.w	r1, ip, r1
 800e718:	eb46 0607 	adc.w	r6, r6, r7
 800e71c:	1889      	adds	r1, r1, r2
 800e71e:	9a02      	ldr	r2, [sp, #8]
 800e720:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e722:	eb42 0606 	adc.w	r6, r2, r6
 800e726:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e728:	188a      	adds	r2, r1, r2
 800e72a:	922f      	str	r2, [sp, #188]	; 0xbc
 800e72c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e72e:	eb46 0202 	adc.w	r2, r6, r2
 800e732:	9231      	str	r2, [sp, #196]	; 0xc4
 800e734:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e736:	ea4f 7c12 	mov.w	ip, r2, lsr #28
 800e73a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e73c:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
 800e740:	0f10      	lsrs	r0, r2, #28
 800e742:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e744:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e748:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e74a:	0792      	lsls	r2, r2, #30
 800e74c:	ea42 0297 	orr.w	r2, r2, r7, lsr #2
 800e750:	07bf      	lsls	r7, r7, #30
 800e752:	ea47 079e 	orr.w	r7, r7, lr, lsr #2
 800e756:	ea8c 0c07 	eor.w	ip, ip, r7
 800e75a:	4050      	eors	r0, r2
 800e75c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e75e:	4672      	mov	r2, lr
 800e760:	0652      	lsls	r2, r2, #25
 800e762:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 800e766:	067f      	lsls	r7, r7, #25
 800e768:	ea47 17de 	orr.w	r7, r7, lr, lsr #7
 800e76c:	ea8c 0c07 	eor.w	ip, ip, r7
 800e770:	4050      	eors	r0, r2
 800e772:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e774:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e776:	4317      	orrs	r7, r2
 800e778:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e77a:	ea42 0e0e 	orr.w	lr, r2, lr
 800e77e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e780:	4017      	ands	r7, r2
 800e782:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e784:	ea0e 0e02 	and.w	lr, lr, r2
 800e788:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e78a:	ea02 0208 	and.w	r2, r2, r8
 800e78e:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800e792:	433a      	orrs	r2, r7
 800e794:	ea08 0809 	and.w	r8, r8, r9
 800e798:	eb1c 0202 	adds.w	r2, ip, r2
 800e79c:	ea4e 0808 	orr.w	r8, lr, r8
 800e7a0:	eb40 0808 	adc.w	r8, r0, r8
 800e7a4:	eb12 0b01 	adds.w	fp, r2, r1
 800e7a8:	eb46 0208 	adc.w	r2, r6, r8
 800e7ac:	9227      	str	r2, [sp, #156]	; 0x9c
 800e7ae:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e7b0:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800e7b2:	0b97      	lsrs	r7, r2, #14
 800e7b4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800e7b6:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 800e7ba:	0b90      	lsrs	r0, r2, #14
 800e7bc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800e7be:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800e7c2:	0c91      	lsrs	r1, r2, #18
 800e7c4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800e7c6:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800e7ca:	0c92      	lsrs	r2, r2, #18
 800e7cc:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
        R( 4); R( 5); R( 6); R( 7);
 800e7d0:	4050      	eors	r0, r2
 800e7d2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800e7d4:	05d2      	lsls	r2, r2, #23
 800e7d6:	404f      	eors	r7, r1
 800e7d8:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 800e7dc:	05f1      	lsls	r1, r6, #23
 800e7de:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800e7e0:	4042      	eors	r2, r0
 800e7e2:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 800e7e6:	404f      	eors	r7, r1
 800e7e8:	9228      	str	r2, [sp, #160]	; 0xa0
 800e7ea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e7ec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e7ee:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800e7f0:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 800e7f4:	404a      	eors	r2, r1
 800e7f6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800e7f8:	ea81 0600 	eor.w	r6, r1, r0
 800e7fc:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800e7fe:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800e800:	400a      	ands	r2, r1
 800e802:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800e804:	400e      	ands	r6, r1
 800e806:	992b      	ldr	r1, [sp, #172]	; 0xac
 800e808:	404a      	eors	r2, r1
 800e80a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800e80c:	404e      	eors	r6, r1
 800e80e:	6a19      	ldr	r1, [r3, #32]
 800e810:	1841      	adds	r1, r0, r1
 800e812:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800e814:	eb40 0c0c 	adc.w	ip, r0, ip
 800e818:	1852      	adds	r2, r2, r1
 800e81a:	9901      	ldr	r1, [sp, #4]
 800e81c:	eb46 060c 	adc.w	r6, r6, ip
 800e820:	2900      	cmp	r1, #0
 800e822:	f001 8340 	beq.w	800fea6 <_Transform_Sha512+0x1f36>
 800e826:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e828:	9804      	ldr	r0, [sp, #16]
 800e82a:	ea4f 0851 	mov.w	r8, r1, lsr #1
 800e82e:	9904      	ldr	r1, [sp, #16]
 800e830:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 800e834:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800e838:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e83a:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 800e83e:	0a09      	lsrs	r1, r1, #8
 800e840:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800e844:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800e848:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e84a:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800e84e:	ea8e 0c0c 	eor.w	ip, lr, ip
 800e852:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 800e856:	9804      	ldr	r0, [sp, #16]
 800e858:	ea88 0101 	eor.w	r1, r8, r1
 800e85c:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 800e860:	ea81 010e 	eor.w	r1, r1, lr
 800e864:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 800e868:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 800e86c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800e86e:	eb10 0a0e 	adds.w	sl, r0, lr
 800e872:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e874:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 800e878:	eb40 0e0e 	adc.w	lr, r0, lr
 800e87c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e87e:	eb11 010a 	adds.w	r1, r1, sl
 800e882:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 800e886:	9807      	ldr	r0, [sp, #28]
 800e888:	eb4c 0c0e 	adc.w	ip, ip, lr
 800e88c:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 800e890:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 800e894:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e896:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 800e89a:	9807      	ldr	r0, [sp, #28]
 800e89c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 800e8a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e8a2:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 800e8a6:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800e8aa:	9807      	ldr	r0, [sp, #28]
 800e8ac:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 800e8b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e8b2:	ea8a 0808 	eor.w	r8, sl, r8
 800e8b6:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 800e8ba:	9807      	ldr	r0, [sp, #28]
 800e8bc:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800e8c0:	ea8e 0e09 	eor.w	lr, lr, r9
 800e8c4:	ea88 080a 	eor.w	r8, r8, sl
 800e8c8:	eb11 0108 	adds.w	r1, r1, r8
 800e8cc:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 800e8d0:	911a      	str	r1, [sp, #104]	; 0x68
 800e8d2:	eb4c 010e 	adc.w	r1, ip, lr
 800e8d6:	910a      	str	r1, [sp, #40]	; 0x28
 800e8d8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800e8da:	18ba      	adds	r2, r7, r2
 800e8dc:	eb41 0006 	adc.w	r0, r1, r6
 800e8e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e8e2:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800e8e4:	1852      	adds	r2, r2, r1
 800e8e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e8e8:	eb41 0000 	adc.w	r0, r1, r0
 800e8ec:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e8ee:	1889      	adds	r1, r1, r2
 800e8f0:	912a      	str	r1, [sp, #168]	; 0xa8
 800e8f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e8f4:	eb41 0100 	adc.w	r1, r1, r0
 800e8f8:	9129      	str	r1, [sp, #164]	; 0xa4
 800e8fa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e8fc:	ea4f 7e1b 	mov.w	lr, fp, lsr #28
 800e900:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 800e904:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 800e908:	0789      	lsls	r1, r1, #30
 800e90a:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 800e90e:	ea4c 1c0b 	orr.w	ip, ip, fp, lsl #4
 800e912:	ea8c 0c01 	eor.w	ip, ip, r1
 800e916:	ea4f 768b 	mov.w	r6, fp, lsl #30
 800e91a:	0679      	lsls	r1, r7, #25
 800e91c:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 800e920:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 800e924:	ea8c 0c01 	eor.w	ip, ip, r1
 800e928:	ea8e 0e06 	eor.w	lr, lr, r6
 800e92c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e92e:	ea4f 664b 	mov.w	r6, fp, lsl #25
 800e932:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 800e936:	ea8e 0e06 	eor.w	lr, lr, r6
 800e93a:	ea41 060b 	orr.w	r6, r1, fp
 800e93e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e940:	430f      	orrs	r7, r1
 800e942:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800e944:	400e      	ands	r6, r1
 800e946:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e948:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 800e94c:	400f      	ands	r7, r1
 800e94e:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e950:	ea01 010b 	and.w	r1, r1, fp
 800e954:	4331      	orrs	r1, r6
 800e956:	ea08 0809 	and.w	r8, r8, r9
 800e95a:	eb1e 0101 	adds.w	r1, lr, r1
 800e95e:	ea47 0808 	orr.w	r8, r7, r8
 800e962:	eb4c 0808 	adc.w	r8, ip, r8
 800e966:	188a      	adds	r2, r1, r2
 800e968:	9222      	str	r2, [sp, #136]	; 0x88
 800e96a:	eb40 0208 	adc.w	r2, r0, r8
 800e96e:	9228      	str	r2, [sp, #160]	; 0xa0
 800e970:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e972:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800e974:	0b97      	lsrs	r7, r2, #14
 800e976:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e978:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 800e97c:	0b90      	lsrs	r0, r2, #14
 800e97e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e980:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800e984:	0c91      	lsrs	r1, r2, #18
 800e986:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e988:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800e98c:	0c92      	lsrs	r2, r2, #18
 800e98e:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 800e992:	4050      	eors	r0, r2
 800e994:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e996:	05d2      	lsls	r2, r2, #23
 800e998:	404f      	eors	r7, r1
 800e99a:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 800e99e:	05f1      	lsls	r1, r6, #23
 800e9a0:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800e9a2:	4042      	eors	r2, r0
 800e9a4:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 800e9a8:	9230      	str	r2, [sp, #192]	; 0xc0
 800e9aa:	404f      	eors	r7, r1
 800e9ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e9ae:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800e9b0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800e9b2:	404a      	eors	r2, r1
 800e9b4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800e9b6:	ea81 0600 	eor.w	r6, r1, r0
 800e9ba:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800e9bc:	400a      	ands	r2, r1
 800e9be:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800e9c0:	982b      	ldr	r0, [sp, #172]	; 0xac
 800e9c2:	f8d3 c02c 	ldr.w	ip, [r3, #44]	; 0x2c
 800e9c6:	400e      	ands	r6, r1
 800e9c8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e9ca:	404a      	eors	r2, r1
 800e9cc:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800e9ce:	404e      	eors	r6, r1
 800e9d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e9d2:	1841      	adds	r1, r0, r1
 800e9d4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e9d6:	eb40 0c0c 	adc.w	ip, r0, ip
 800e9da:	1852      	adds	r2, r2, r1
 800e9dc:	9901      	ldr	r1, [sp, #4]
 800e9de:	eb46 060c 	adc.w	r6, r6, ip
 800e9e2:	2900      	cmp	r1, #0
 800e9e4:	f001 8264 	beq.w	800feb0 <_Transform_Sha512+0x1f40>
 800e9e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e9ea:	9805      	ldr	r0, [sp, #20]
 800e9ec:	ea4f 0851 	mov.w	r8, r1, lsr #1
 800e9f0:	9905      	ldr	r1, [sp, #20]
 800e9f2:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 800e9f6:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800e9fa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e9fc:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 800ea00:	0a09      	lsrs	r1, r1, #8
 800ea02:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800ea06:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800ea0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ea0c:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800ea10:	ea8e 0c0c 	eor.w	ip, lr, ip
 800ea14:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 800ea18:	9805      	ldr	r0, [sp, #20]
 800ea1a:	ea88 0101 	eor.w	r1, r8, r1
 800ea1e:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 800ea22:	ea81 010e 	eor.w	r1, r1, lr
 800ea26:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 800ea2a:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 800ea2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea30:	eb10 0a0e 	adds.w	sl, r0, lr
 800ea34:	9804      	ldr	r0, [sp, #16]
 800ea36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800ea3a:	eb40 0e0e 	adc.w	lr, r0, lr
 800ea3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea40:	eb11 010a 	adds.w	r1, r1, sl
 800ea44:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 800ea48:	9802      	ldr	r0, [sp, #8]
 800ea4a:	eb4c 0c0e 	adc.w	ip, ip, lr
 800ea4e:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 800ea52:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 800ea56:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea58:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 800ea5c:	9802      	ldr	r0, [sp, #8]
 800ea5e:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 800ea62:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea64:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 800ea68:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800ea6c:	9802      	ldr	r0, [sp, #8]
 800ea6e:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 800ea72:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea74:	ea8a 0808 	eor.w	r8, sl, r8
 800ea78:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 800ea7c:	9802      	ldr	r0, [sp, #8]
 800ea7e:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800ea82:	ea8e 0e09 	eor.w	lr, lr, r9
 800ea86:	ea88 080a 	eor.w	r8, r8, sl
 800ea8a:	eb11 0108 	adds.w	r1, r1, r8
 800ea8e:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 800ea92:	9114      	str	r1, [sp, #80]	; 0x50
 800ea94:	eb4c 010e 	adc.w	r1, ip, lr
 800ea98:	9104      	str	r1, [sp, #16]
 800ea9a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800ea9c:	18ba      	adds	r2, r7, r2
 800ea9e:	eb41 0006 	adc.w	r0, r1, r6
 800eaa2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eaa4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800eaa6:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800eaa8:	1852      	adds	r2, r2, r1
 800eaaa:	9904      	ldr	r1, [sp, #16]
 800eaac:	eb41 0000 	adc.w	r0, r1, r0
 800eab0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800eab2:	1889      	adds	r1, r1, r2
 800eab4:	912b      	str	r1, [sp, #172]	; 0xac
 800eab6:	9924      	ldr	r1, [sp, #144]	; 0x90
 800eab8:	eb41 0100 	adc.w	r1, r1, r0
 800eabc:	912c      	str	r1, [sp, #176]	; 0xb0
 800eabe:	9922      	ldr	r1, [sp, #136]	; 0x88
 800eac0:	ea4f 7e11 	mov.w	lr, r1, lsr #28
 800eac4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800eac6:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 800eaca:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 800eace:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ead0:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
 800ead4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ead6:	0789      	lsls	r1, r1, #30
 800ead8:	ea41 0196 	orr.w	r1, r1, r6, lsr #2
 800eadc:	07b6      	lsls	r6, r6, #30
 800eade:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 800eae2:	ea8e 0e06 	eor.w	lr, lr, r6
 800eae6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800eae8:	ea8c 0c01 	eor.w	ip, ip, r1
 800eaec:	0679      	lsls	r1, r7, #25
 800eaee:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 800eaf2:	ea8c 0c01 	eor.w	ip, ip, r1
 800eaf6:	0676      	lsls	r6, r6, #25
 800eaf8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800eafa:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 800eafe:	ea8e 0e06 	eor.w	lr, lr, r6
 800eb02:	ea4b 0601 	orr.w	r6, fp, r1
 800eb06:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800eb08:	430f      	orrs	r7, r1
 800eb0a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800eb0c:	400e      	ands	r6, r1
 800eb0e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800eb10:	e9dd 8927 	ldrd	r8, r9, [sp, #156]	; 0x9c
 800eb14:	400f      	ands	r7, r1
 800eb16:	9922      	ldr	r1, [sp, #136]	; 0x88
 800eb18:	ea0b 0101 	and.w	r1, fp, r1
 800eb1c:	4331      	orrs	r1, r6
 800eb1e:	ea08 0809 	and.w	r8, r8, r9
 800eb22:	eb1e 0101 	adds.w	r1, lr, r1
 800eb26:	ea47 0808 	orr.w	r8, r7, r8
 800eb2a:	eb4c 0808 	adc.w	r8, ip, r8
 800eb2e:	188a      	adds	r2, r1, r2
 800eb30:	9223      	str	r2, [sp, #140]	; 0x8c
 800eb32:	eb40 0208 	adc.w	r2, r0, r8
 800eb36:	9224      	str	r2, [sp, #144]	; 0x90
 800eb38:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800eb3a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800eb3c:	0b97      	lsrs	r7, r2, #14
 800eb3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800eb40:	ea47 4782 	orr.w	r7, r7, r2, lsl #18
 800eb44:	0b90      	lsrs	r0, r2, #14
 800eb46:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800eb48:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800eb4c:	0c91      	lsrs	r1, r2, #18
 800eb4e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800eb50:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800eb54:	0c92      	lsrs	r2, r2, #18
 800eb56:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 800eb5a:	4050      	eors	r0, r2
 800eb5c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800eb5e:	05d2      	lsls	r2, r2, #23
 800eb60:	404f      	eors	r7, r1
 800eb62:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 800eb66:	05f1      	lsls	r1, r6, #23
 800eb68:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800eb6a:	4042      	eors	r2, r0
 800eb6c:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 800eb70:	404f      	eors	r7, r1
 800eb72:	9230      	str	r2, [sp, #192]	; 0xc0
 800eb74:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800eb76:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800eb78:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800eb7a:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
 800eb7e:	404a      	eors	r2, r1
 800eb80:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800eb82:	ea81 0600 	eor.w	r6, r1, r0
 800eb86:	992b      	ldr	r1, [sp, #172]	; 0xac
 800eb88:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800eb8a:	400a      	ands	r2, r1
 800eb8c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800eb8e:	400e      	ands	r6, r1
 800eb90:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800eb92:	404a      	eors	r2, r1
 800eb94:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800eb96:	404e      	eors	r6, r1
 800eb98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800eb9a:	1841      	adds	r1, r0, r1
 800eb9c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800eb9e:	eb40 0c0c 	adc.w	ip, r0, ip
 800eba2:	1852      	adds	r2, r2, r1
 800eba4:	9901      	ldr	r1, [sp, #4]
 800eba6:	eb46 060c 	adc.w	r6, r6, ip
 800ebaa:	2900      	cmp	r1, #0
 800ebac:	f001 8185 	beq.w	800feba <_Transform_Sha512+0x1f4a>
 800ebb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ebb2:	9806      	ldr	r0, [sp, #24]
 800ebb4:	ea4f 0851 	mov.w	r8, r1, lsr #1
 800ebb8:	9906      	ldr	r1, [sp, #24]
 800ebba:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 800ebbe:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800ebc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ebc4:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 800ebc8:	0a09      	lsrs	r1, r1, #8
 800ebca:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800ebce:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800ebd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ebd4:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800ebd8:	ea8e 0c0c 	eor.w	ip, lr, ip
 800ebdc:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
 800ebe0:	9806      	ldr	r0, [sp, #24]
 800ebe2:	ea88 0101 	eor.w	r1, r8, r1
 800ebe6:	ea4e 6e40 	orr.w	lr, lr, r0, lsl #25
 800ebea:	ea81 010e 	eor.w	r1, r1, lr
 800ebee:	ea8c 1cd0 	eor.w	ip, ip, r0, lsr #7
 800ebf2:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 800ebf6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ebf8:	eb10 0a0e 	adds.w	sl, r0, lr
 800ebfc:	9805      	ldr	r0, [sp, #20]
 800ebfe:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800ec02:	eb40 0e0e 	adc.w	lr, r0, lr
 800ec06:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ec08:	eb11 010a 	adds.w	r1, r1, sl
 800ec0c:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 800ec10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec12:	eb4c 0c0e 	adc.w	ip, ip, lr
 800ec16:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 800ec1a:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 800ec1e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ec20:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 800ec24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec26:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 800ec2a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ec2c:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 800ec30:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800ec34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec36:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 800ec3a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ec3c:	ea8a 0808 	eor.w	r8, sl, r8
 800ec40:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 800ec44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec46:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800ec4a:	ea8e 0e09 	eor.w	lr, lr, r9
 800ec4e:	ea88 080a 	eor.w	r8, r8, sl
 800ec52:	eb11 0108 	adds.w	r1, r1, r8
 800ec56:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 800ec5a:	9115      	str	r1, [sp, #84]	; 0x54
 800ec5c:	eb4c 010e 	adc.w	r1, ip, lr
 800ec60:	9105      	str	r1, [sp, #20]
 800ec62:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800ec64:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 800ec68:	18ba      	adds	r2, r7, r2
 800ec6a:	eb41 0006 	adc.w	r0, r1, r6
 800ec6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ec70:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800ec72:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800ec74:	1852      	adds	r2, r2, r1
 800ec76:	9905      	ldr	r1, [sp, #20]
 800ec78:	eb41 0000 	adc.w	r0, r1, r0
 800ec7c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ec7e:	1889      	adds	r1, r1, r2
 800ec80:	912d      	str	r1, [sp, #180]	; 0xb4
 800ec82:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ec84:	eb41 0100 	adc.w	r1, r1, r0
 800ec88:	912e      	str	r1, [sp, #184]	; 0xb8
 800ec8a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800ec8c:	ea4f 7e11 	mov.w	lr, r1, lsr #28
 800ec90:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ec92:	ea4e 1e01 	orr.w	lr, lr, r1, lsl #4
 800ec96:	ea4f 7c11 	mov.w	ip, r1, lsr #28
 800ec9a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800ec9c:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
 800eca0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800eca2:	0789      	lsls	r1, r1, #30
 800eca4:	ea41 0196 	orr.w	r1, r1, r6, lsr #2
 800eca8:	07b6      	lsls	r6, r6, #30
 800ecaa:	ea46 0697 	orr.w	r6, r6, r7, lsr #2
 800ecae:	ea8e 0e06 	eor.w	lr, lr, r6
 800ecb2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800ecb4:	ea8c 0c01 	eor.w	ip, ip, r1
 800ecb8:	0679      	lsls	r1, r7, #25
 800ecba:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 800ecbe:	0676      	lsls	r6, r6, #25
 800ecc0:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 800ecc4:	ea8c 0c01 	eor.w	ip, ip, r1
 800ecc8:	ea8e 0e06 	eor.w	lr, lr, r6
 800eccc:	e9dd 1622 	ldrd	r1, r6, [sp, #136]	; 0x88
 800ecd0:	430e      	orrs	r6, r1
 800ecd2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ecd4:	430f      	orrs	r7, r1
 800ecd6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800ecd8:	400f      	ands	r7, r1
 800ecda:	e9dd 1822 	ldrd	r1, r8, [sp, #136]	; 0x88
 800ecde:	ea01 0108 	and.w	r1, r1, r8
 800ece2:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 800ece6:	ea06 060b 	and.w	r6, r6, fp
 800ecea:	4331      	orrs	r1, r6
 800ecec:	ea08 0809 	and.w	r8, r8, r9
 800ecf0:	eb1e 0101 	adds.w	r1, lr, r1
 800ecf4:	ea47 0808 	orr.w	r8, r7, r8
 800ecf8:	eb4c 0808 	adc.w	r8, ip, r8
 800ecfc:	188a      	adds	r2, r1, r2
 800ecfe:	9225      	str	r2, [sp, #148]	; 0x94
 800ed00:	eb40 0208 	adc.w	r2, r0, r8
 800ed04:	9226      	str	r2, [sp, #152]	; 0x98
 800ed06:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ed08:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800ed0a:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 800ed0e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ed10:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 800ed14:	0b90      	lsrs	r0, r2, #14
 800ed16:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ed18:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800ed1c:	0c91      	lsrs	r1, r2, #18
 800ed1e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ed20:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800ed24:	0c92      	lsrs	r2, r2, #18
 800ed26:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
 800ed2a:	4050      	eors	r0, r2
 800ed2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ed2e:	05d2      	lsls	r2, r2, #23
 800ed30:	ea8c 0c01 	eor.w	ip, ip, r1
 800ed34:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 800ed38:	05f1      	lsls	r1, r6, #23
 800ed3a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800ed3c:	4042      	eors	r2, r0
 800ed3e:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 800ed42:	9230      	str	r2, [sp, #192]	; 0xc0
 800ed44:	ea8c 0c01 	eor.w	ip, ip, r1
 800ed48:	e9dd 212a 	ldrd	r2, r1, [sp, #168]	; 0xa8
 800ed4c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800ed4e:	404a      	eors	r2, r1
 800ed50:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ed52:	ea81 0700 	eor.w	r7, r1, r0
 800ed56:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ed58:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800ed5a:	400a      	ands	r2, r1
 800ed5c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ed5e:	404a      	eors	r2, r1
 800ed60:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ed62:	4037      	ands	r7, r6
 800ed64:	404f      	eors	r7, r1
 800ed66:	e9d3 160e 	ldrd	r1, r6, [r3, #56]	; 0x38
 800ed6a:	1841      	adds	r1, r0, r1
 800ed6c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800ed6e:	eb40 0606 	adc.w	r6, r0, r6
 800ed72:	1852      	adds	r2, r2, r1
 800ed74:	9901      	ldr	r1, [sp, #4]
 800ed76:	eb47 0706 	adc.w	r7, r7, r6
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	f001 80a2 	beq.w	800fec4 <_Transform_Sha512+0x1f54>
 800ed80:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ed82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ed84:	ea4f 0851 	mov.w	r8, r1, lsr #1
 800ed88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed8a:	ea48 78c1 	orr.w	r8, r8, r1, lsl #31
 800ed8e:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800ed92:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ed94:	ea4e 7ec1 	orr.w	lr, lr, r1, lsl #31
 800ed98:	0a09      	lsrs	r1, r1, #8
 800ed9a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800ed9e:	0a06      	lsrs	r6, r0, #8
 800eda0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800eda2:	ea88 0101 	eor.w	r1, r8, r1
 800eda6:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 800edaa:	ea4f 18d0 	mov.w	r8, r0, lsr #7
 800edae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800edb0:	ea8e 0606 	eor.w	r6, lr, r6
 800edb4:	ea48 6840 	orr.w	r8, r8, r0, lsl #25
 800edb8:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
 800edbc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800edbe:	ea81 0108 	eor.w	r1, r1, r8
 800edc2:	1809      	adds	r1, r1, r0
 800edc4:	9806      	ldr	r0, [sp, #24]
 800edc6:	eb40 0606 	adc.w	r6, r0, r6
 800edca:	9818      	ldr	r0, [sp, #96]	; 0x60
 800edcc:	1809      	adds	r1, r1, r0
 800edce:	9808      	ldr	r0, [sp, #32]
 800edd0:	eb40 0606 	adc.w	r6, r0, r6
 800edd4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800edd6:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 800edda:	9804      	ldr	r0, [sp, #16]
 800eddc:	ea4a 3a40 	orr.w	sl, sl, r0, lsl #13
 800ede0:	ea4f 4ed0 	mov.w	lr, r0, lsr #19
 800ede4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ede6:	ea4e 3e40 	orr.w	lr, lr, r0, lsl #13
 800edea:	9804      	ldr	r0, [sp, #16]
 800edec:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 800edf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800edf2:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 800edf6:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 800edfa:	9804      	ldr	r0, [sp, #16]
 800edfc:	ea48 7850 	orr.w	r8, r8, r0, lsr #29
 800ee00:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ee02:	ea8a 0808 	eor.w	r8, sl, r8
 800ee06:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 800ee0a:	9804      	ldr	r0, [sp, #16]
 800ee0c:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800ee10:	ea8e 0e09 	eor.w	lr, lr, r9
 800ee14:	ea88 080a 	eor.w	r8, r8, sl
 800ee18:	eb11 0108 	adds.w	r1, r1, r8
 800ee1c:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 800ee20:	9116      	str	r1, [sp, #88]	; 0x58
 800ee22:	eb46 010e 	adc.w	r1, r6, lr
 800ee26:	9106      	str	r1, [sp, #24]
 800ee28:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800ee2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ee2e:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800ee32:	eb1c 0202 	adds.w	r2, ip, r2
 800ee36:	eb41 0007 	adc.w	r0, r1, r7
 800ee3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ee3c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
 800ee40:	1852      	adds	r2, r2, r1
 800ee42:	9906      	ldr	r1, [sp, #24]
 800ee44:	eb41 0000 	adc.w	r0, r1, r0
 800ee48:	eb1b 0102 	adds.w	r1, fp, r2
 800ee4c:	912f      	str	r1, [sp, #188]	; 0xbc
 800ee4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800ee50:	eb41 0100 	adc.w	r1, r1, r0
 800ee54:	9130      	str	r1, [sp, #192]	; 0xc0
 800ee56:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ee58:	078e      	lsls	r6, r1, #30
 800ee5a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ee5c:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 800ee60:	ea4f 7e81 	mov.w	lr, r1, lsl #30
 800ee64:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ee66:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 800ee6a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ee6c:	0f0f      	lsrs	r7, r1, #28
 800ee6e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ee70:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 800ee74:	0f09      	lsrs	r1, r1, #28
 800ee76:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800ee7a:	404e      	eors	r6, r1
 800ee7c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ee7e:	0649      	lsls	r1, r1, #25
 800ee80:	ea41 11dc 	orr.w	r1, r1, ip, lsr #7
 800ee84:	ea8e 0e07 	eor.w	lr, lr, r7
 800ee88:	4667      	mov	r7, ip
 800ee8a:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 800ee8e:	067f      	lsls	r7, r7, #25
 800ee90:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 800ee94:	404e      	eors	r6, r1
 800ee96:	ea8e 0e07 	eor.w	lr, lr, r7
 800ee9a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800ee9c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800ee9e:	430f      	orrs	r7, r1
 800eea0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800eea2:	ea41 0c0c 	orr.w	ip, r1, ip
 800eea6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800eea8:	400f      	ands	r7, r1
 800eeaa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800eeac:	ea0c 0c01 	and.w	ip, ip, r1
 800eeb0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800eeb2:	ea01 0108 	and.w	r1, r1, r8
 800eeb6:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800eeba:	4339      	orrs	r1, r7
 800eebc:	ea08 0809 	and.w	r8, r8, r9
 800eec0:	eb1e 0101 	adds.w	r1, lr, r1
 800eec4:	ea4c 0808 	orr.w	r8, ip, r8
 800eec8:	eb46 0808 	adc.w	r8, r6, r8
 800eecc:	eb11 0b02 	adds.w	fp, r1, r2
 800eed0:	eb40 0208 	adc.w	r2, r0, r8
 800eed4:	9227      	str	r2, [sp, #156]	; 0x9c
 800eed6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800eed8:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800eeda:	ea4f 3c92 	mov.w	ip, r2, lsr #14
 800eede:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800eee0:	ea4c 4c82 	orr.w	ip, ip, r2, lsl #18
 800eee4:	0b90      	lsrs	r0, r2, #14
 800eee6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800eee8:	ea40 4082 	orr.w	r0, r0, r2, lsl #18
 800eeec:	0c91      	lsrs	r1, r2, #18
 800eeee:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800eef0:	ea41 3182 	orr.w	r1, r1, r2, lsl #14
 800eef4:	0c92      	lsrs	r2, r2, #18
 800eef6:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
        R( 8); R( 9); R(10); R(11);
 800eefa:	4050      	eors	r0, r2
 800eefc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800eefe:	05d2      	lsls	r2, r2, #23
 800ef00:	ea8c 0c01 	eor.w	ip, ip, r1
 800ef04:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 800ef08:	05f1      	lsls	r1, r6, #23
 800ef0a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800ef0c:	4042      	eors	r2, r0
 800ef0e:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 800ef12:	9231      	str	r2, [sp, #196]	; 0xc4
 800ef14:	ea8c 0c01 	eor.w	ip, ip, r1
 800ef18:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800ef1a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ef1c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800ef1e:	404a      	eors	r2, r1
 800ef20:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800ef22:	ea81 0700 	eor.w	r7, r1, r0
 800ef26:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800ef28:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800ef2a:	400a      	ands	r2, r1
 800ef2c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ef2e:	404a      	eors	r2, r1
 800ef30:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800ef32:	4037      	ands	r7, r6
 800ef34:	404f      	eors	r7, r1
 800ef36:	e9d3 1610 	ldrd	r1, r6, [r3, #64]	; 0x40
 800ef3a:	1841      	adds	r1, r0, r1
 800ef3c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800ef3e:	eb40 0606 	adc.w	r6, r0, r6
 800ef42:	1852      	adds	r2, r2, r1
 800ef44:	9901      	ldr	r1, [sp, #4]
 800ef46:	eb47 0706 	adc.w	r7, r7, r6
 800ef4a:	2900      	cmp	r1, #0
 800ef4c:	f000 87bf 	beq.w	800fece <_Transform_Sha512+0x1f5e>
 800ef50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef52:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef54:	ea4f 2811 	mov.w	r8, r1, lsr #8
 800ef58:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef5a:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 800ef5e:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 800ef62:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef64:	ea4e 6e01 	orr.w	lr, lr, r1, lsl #24
 800ef68:	0849      	lsrs	r1, r1, #1
 800ef6a:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800ef6e:	0846      	lsrs	r6, r0, #1
 800ef70:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ef72:	ea88 0101 	eor.w	r1, r8, r1
 800ef76:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 800ef7a:	ea4f 18d0 	mov.w	r8, r0, lsr #7
 800ef7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef80:	ea8e 0606 	eor.w	r6, lr, r6
 800ef84:	ea48 6840 	orr.w	r8, r8, r0, lsl #25
 800ef88:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
 800ef8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ef8e:	ea81 0108 	eor.w	r1, r1, r8
 800ef92:	1809      	adds	r1, r1, r0
 800ef94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef96:	eb40 0606 	adc.w	r6, r0, r6
 800ef9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ef9c:	1809      	adds	r1, r1, r0
 800ef9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efa0:	eb40 0606 	adc.w	r6, r0, r6
 800efa4:	9805      	ldr	r0, [sp, #20]
 800efa6:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800efaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800efac:	ea4e 7e50 	orr.w	lr, lr, r0, lsr #29
 800efb0:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 800efb4:	9805      	ldr	r0, [sp, #20]
 800efb6:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 800efba:	9815      	ldr	r0, [sp, #84]	; 0x54
 800efbc:	ea4f 48d0 	mov.w	r8, r0, lsr #19
 800efc0:	9805      	ldr	r0, [sp, #20]
 800efc2:	ea48 3840 	orr.w	r8, r8, r0, lsl #13
 800efc6:	ea4f 49d0 	mov.w	r9, r0, lsr #19
 800efca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800efcc:	ea8a 0808 	eor.w	r8, sl, r8
 800efd0:	ea49 3940 	orr.w	r9, r9, r0, lsl #13
 800efd4:	ea4f 1a90 	mov.w	sl, r0, lsr #6
 800efd8:	9805      	ldr	r0, [sp, #20]
 800efda:	ea4a 6a80 	orr.w	sl, sl, r0, lsl #26
 800efde:	ea8e 0e09 	eor.w	lr, lr, r9
 800efe2:	ea88 080a 	eor.w	r8, r8, sl
 800efe6:	eb11 0108 	adds.w	r1, r1, r8
 800efea:	ea8e 1e90 	eor.w	lr, lr, r0, lsr #6
 800efee:	911b      	str	r1, [sp, #108]	; 0x6c
 800eff0:	eb46 010e 	adc.w	r1, r6, lr
 800eff4:	910b      	str	r1, [sp, #44]	; 0x2c
 800eff6:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800eff8:	eb1c 0202 	adds.w	r2, ip, r2
 800effc:	eb41 0007 	adc.w	r0, r1, r7
 800f000:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f002:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 800f006:	1852      	adds	r2, r2, r1
 800f008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f00a:	eb41 0000 	adc.w	r0, r1, r0
 800f00e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f010:	1889      	adds	r1, r1, r2
 800f012:	9129      	str	r1, [sp, #164]	; 0xa4
 800f014:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800f016:	eb41 0100 	adc.w	r1, r1, r0
 800f01a:	912a      	str	r1, [sp, #168]	; 0xa8
 800f01c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f01e:	ea4f 7e8b 	mov.w	lr, fp, lsl #30
 800f022:	ea4f 771b 	mov.w	r7, fp, lsr #28
 800f026:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 800f02a:	078e      	lsls	r6, r1, #30
 800f02c:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 800f030:	0f09      	lsrs	r1, r1, #28
 800f032:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 800f036:	ea46 069b 	orr.w	r6, r6, fp, lsr #2
 800f03a:	404e      	eors	r6, r1
 800f03c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f03e:	0649      	lsls	r1, r1, #25
 800f040:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 800f044:	404e      	eors	r6, r1
 800f046:	ea8e 0e07 	eor.w	lr, lr, r7
 800f04a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f04c:	ea4f 674b 	mov.w	r7, fp, lsl #25
 800f050:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 800f054:	ea8e 0e07 	eor.w	lr, lr, r7
 800f058:	ea41 070b 	orr.w	r7, r1, fp
 800f05c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f05e:	ea41 0c0c 	orr.w	ip, r1, ip
 800f062:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800f064:	400f      	ands	r7, r1
 800f066:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f068:	e9dd 8926 	ldrd	r8, r9, [sp, #152]	; 0x98
 800f06c:	ea0c 0c01 	and.w	ip, ip, r1
 800f070:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f072:	ea01 010b 	and.w	r1, r1, fp
 800f076:	4339      	orrs	r1, r7
 800f078:	ea08 0809 	and.w	r8, r8, r9
 800f07c:	eb1e 0101 	adds.w	r1, lr, r1
 800f080:	ea4c 0808 	orr.w	r8, ip, r8
 800f084:	eb46 0808 	adc.w	r8, r6, r8
 800f088:	188a      	adds	r2, r1, r2
 800f08a:	9222      	str	r2, [sp, #136]	; 0x88
 800f08c:	eb40 0208 	adc.w	r2, r0, r8
 800f090:	9228      	str	r2, [sp, #160]	; 0xa0
 800f092:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f094:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800f096:	0c97      	lsrs	r7, r2, #18
 800f098:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f09a:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 800f09e:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 800f0a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f0a4:	ea4c 3c82 	orr.w	ip, ip, r2, lsl #14
 800f0a8:	0b91      	lsrs	r1, r2, #14
 800f0aa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f0ac:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800f0b0:	0b92      	lsrs	r2, r2, #14
 800f0b2:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800f0b6:	ea8c 0c02 	eor.w	ip, ip, r2
 800f0ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f0bc:	05d2      	lsls	r2, r2, #23
 800f0be:	404f      	eors	r7, r1
 800f0c0:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800f0c4:	05c1      	lsls	r1, r0, #23
 800f0c6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800f0c8:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800f0cc:	4079      	eors	r1, r7
 800f0ce:	9131      	str	r1, [sp, #196]	; 0xc4
 800f0d0:	e9d3 1612 	ldrd	r1, r6, [r3, #72]	; 0x48
 800f0d4:	ea8c 0c02 	eor.w	ip, ip, r2
 800f0d8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f0da:	1851      	adds	r1, r2, r1
 800f0dc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f0de:	eb42 0606 	adc.w	r6, r2, r6
 800f0e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f0e4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800f0e6:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800f0e8:	4050      	eors	r0, r2
 800f0ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f0ec:	407a      	eors	r2, r7
 800f0ee:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800f0f0:	4038      	ands	r0, r7
 800f0f2:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800f0f4:	403a      	ands	r2, r7
 800f0f6:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800f0f8:	4078      	eors	r0, r7
 800f0fa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f0fc:	1809      	adds	r1, r1, r0
 800f0fe:	ea82 0207 	eor.w	r2, r2, r7
 800f102:	eb46 0602 	adc.w	r6, r6, r2
 800f106:	9a01      	ldr	r2, [sp, #4]
 800f108:	2a00      	cmp	r2, #0
 800f10a:	f000 86e7 	beq.w	800fedc <_Transform_Sha512+0x1f6c>
 800f10e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f110:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f112:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800f114:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800f118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f11a:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 800f11e:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800f122:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f124:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 800f128:	0852      	lsrs	r2, r2, #1
 800f12a:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 800f12e:	0840      	lsrs	r0, r0, #1
 800f130:	ea40 70c7 	orr.w	r0, r0, r7, lsl #31
 800f134:	ea88 0202 	eor.w	r2, r8, r2
 800f138:	ea4f 18d7 	mov.w	r8, r7, lsr #7
 800f13c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f13e:	ea8e 0000 	eor.w	r0, lr, r0
 800f142:	ea48 6847 	orr.w	r8, r8, r7, lsl #25
 800f146:	ea80 10d7 	eor.w	r0, r0, r7, lsr #7
 800f14a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800f14c:	ea82 0208 	eor.w	r2, r2, r8
 800f150:	19d2      	adds	r2, r2, r7
 800f152:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f154:	eb47 0000 	adc.w	r0, r7, r0
 800f158:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800f15a:	19d2      	adds	r2, r2, r7
 800f15c:	9f07      	ldr	r7, [sp, #28]
 800f15e:	eb47 0000 	adc.w	r0, r7, r0
 800f162:	9f06      	ldr	r7, [sp, #24]
 800f164:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800f168:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800f16a:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800f16e:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
 800f172:	9f06      	ldr	r7, [sp, #24]
 800f174:	ea4a 7a57 	orr.w	sl, sl, r7, lsr #29
 800f178:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800f17a:	ea4f 48d7 	mov.w	r8, r7, lsr #19
 800f17e:	9f06      	ldr	r7, [sp, #24]
 800f180:	ea48 3847 	orr.w	r8, r8, r7, lsl #13
 800f184:	ea4f 49d7 	mov.w	r9, r7, lsr #19
 800f188:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800f18a:	ea8a 0808 	eor.w	r8, sl, r8
 800f18e:	ea49 3947 	orr.w	r9, r9, r7, lsl #13
 800f192:	ea4f 1a97 	mov.w	sl, r7, lsr #6
 800f196:	9f06      	ldr	r7, [sp, #24]
 800f198:	ea4a 6a87 	orr.w	sl, sl, r7, lsl #26
 800f19c:	ea8e 0e09 	eor.w	lr, lr, r9
 800f1a0:	ea88 080a 	eor.w	r8, r8, sl
 800f1a4:	eb12 0208 	adds.w	r2, r2, r8
 800f1a8:	ea8e 1e97 	eor.w	lr, lr, r7, lsr #6
 800f1ac:	921c      	str	r2, [sp, #112]	; 0x70
 800f1ae:	eb40 020e 	adc.w	r2, r0, lr
 800f1b2:	920c      	str	r2, [sp, #48]	; 0x30
 800f1b4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800f1b6:	1889      	adds	r1, r1, r2
 800f1b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f1ba:	eb46 060c 	adc.w	r6, r6, ip
 800f1be:	1889      	adds	r1, r1, r2
 800f1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1c2:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800f1c6:	eb42 0606 	adc.w	r6, r2, r6
 800f1ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f1cc:	1852      	adds	r2, r2, r1
 800f1ce:	922b      	str	r2, [sp, #172]	; 0xac
 800f1d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f1d2:	eb42 0206 	adc.w	r2, r2, r6
 800f1d6:	922c      	str	r2, [sp, #176]	; 0xb0
 800f1d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f1da:	0790      	lsls	r0, r2, #30
 800f1dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f1de:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 800f1e2:	ea4f 7e82 	mov.w	lr, r2, lsl #30
 800f1e6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f1e8:	ea4e 0e92 	orr.w	lr, lr, r2, lsr #2
 800f1ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f1ee:	0f17      	lsrs	r7, r2, #28
 800f1f0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f1f2:	ea47 1702 	orr.w	r7, r7, r2, lsl #4
 800f1f6:	0f12      	lsrs	r2, r2, #28
 800f1f8:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 800f1fc:	4050      	eors	r0, r2
 800f1fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f200:	0652      	lsls	r2, r2, #25
 800f202:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800f206:	ea8e 0e07 	eor.w	lr, lr, r7
 800f20a:	4667      	mov	r7, ip
 800f20c:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 800f210:	4050      	eors	r0, r2
 800f212:	067f      	lsls	r7, r7, #25
 800f214:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f216:	ea47 17dc 	orr.w	r7, r7, ip, lsr #7
 800f21a:	ea8e 0e07 	eor.w	lr, lr, r7
 800f21e:	ea4b 0c02 	orr.w	ip, fp, r2
 800f222:	e9dd 2727 	ldrd	r2, r7, [sp, #156]	; 0x9c
 800f226:	4317      	orrs	r7, r2
 800f228:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f22a:	ea0c 0c02 	and.w	ip, ip, r2
 800f22e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f230:	e9dd 8927 	ldrd	r8, r9, [sp, #156]	; 0x9c
 800f234:	4017      	ands	r7, r2
 800f236:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f238:	ea0b 0202 	and.w	r2, fp, r2
 800f23c:	ea08 0809 	and.w	r8, r8, r9
 800f240:	ea4c 0202 	orr.w	r2, ip, r2
 800f244:	ea47 0808 	orr.w	r8, r7, r8
 800f248:	eb1e 0202 	adds.w	r2, lr, r2
 800f24c:	eb40 0808 	adc.w	r8, r0, r8
 800f250:	1852      	adds	r2, r2, r1
 800f252:	9223      	str	r2, [sp, #140]	; 0x8c
 800f254:	eb46 0208 	adc.w	r2, r6, r8
 800f258:	9224      	str	r2, [sp, #144]	; 0x90
 800f25a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f25c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800f25e:	0c97      	lsrs	r7, r2, #18
 800f260:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f262:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 800f266:	ea4f 4c92 	mov.w	ip, r2, lsr #18
 800f26a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f26c:	ea4c 3c82 	orr.w	ip, ip, r2, lsl #14
 800f270:	0b91      	lsrs	r1, r2, #14
 800f272:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f274:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800f278:	0b92      	lsrs	r2, r2, #14
 800f27a:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800f27e:	ea8c 0c02 	eor.w	ip, ip, r2
 800f282:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f284:	05d2      	lsls	r2, r2, #23
 800f286:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800f28a:	404f      	eors	r7, r1
 800f28c:	05c1      	lsls	r1, r0, #23
 800f28e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800f290:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800f294:	404f      	eors	r7, r1
 800f296:	e9d3 1614 	ldrd	r1, r6, [r3, #80]	; 0x50
 800f29a:	ea8c 0c02 	eor.w	ip, ip, r2
 800f29e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f2a0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800f2a2:	1851      	adds	r1, r2, r1
 800f2a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f2a6:	eb42 0906 	adc.w	r9, r2, r6
 800f2aa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f2ac:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800f2ae:	4050      	eors	r0, r2
 800f2b0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f2b2:	4056      	eors	r6, r2
 800f2b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f2b6:	4010      	ands	r0, r2
 800f2b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f2ba:	4016      	ands	r6, r2
 800f2bc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f2be:	4050      	eors	r0, r2
 800f2c0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f2c2:	1809      	adds	r1, r1, r0
 800f2c4:	ea86 0202 	eor.w	r2, r6, r2
 800f2c8:	eb49 0602 	adc.w	r6, r9, r2
 800f2cc:	9a01      	ldr	r2, [sp, #4]
 800f2ce:	912d      	str	r1, [sp, #180]	; 0xb4
 800f2d0:	2a00      	cmp	r2, #0
 800f2d2:	f000 860a 	beq.w	800feea <_Transform_Sha512+0x1f7a>
 800f2d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f2da:	ea4f 2812 	mov.w	r8, r2, lsr #8
 800f2de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2e0:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 800f2e4:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 800f2e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2ea:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
 800f2ee:	0852      	lsrs	r2, r2, #1
 800f2f0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f2f4:	0848      	lsrs	r0, r1, #1
 800f2f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f2f8:	ea88 0202 	eor.w	r2, r8, r2
 800f2fc:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 800f300:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 800f304:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f306:	ea8e 0000 	eor.w	r0, lr, r0
 800f30a:	ea48 6841 	orr.w	r8, r8, r1, lsl #25
 800f30e:	ea80 10d1 	eor.w	r0, r0, r1, lsr #7
 800f312:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f314:	ea82 0208 	eor.w	r2, r2, r8
 800f318:	1852      	adds	r2, r2, r1
 800f31a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f31c:	eb41 0000 	adc.w	r0, r1, r0
 800f320:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f322:	1852      	adds	r2, r2, r1
 800f324:	9902      	ldr	r1, [sp, #8]
 800f326:	eb41 0000 	adc.w	r0, r1, r0
 800f32a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f32c:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800f330:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f332:	ea4e 7e51 	orr.w	lr, lr, r1, lsr #29
 800f336:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800f33a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f33c:	ea4a 7a51 	orr.w	sl, sl, r1, lsr #29
 800f340:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f342:	ea4f 48d1 	mov.w	r8, r1, lsr #19
 800f346:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f348:	ea48 3841 	orr.w	r8, r8, r1, lsl #13
 800f34c:	ea4f 49d1 	mov.w	r9, r1, lsr #19
 800f350:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f352:	ea8a 0808 	eor.w	r8, sl, r8
 800f356:	ea49 3941 	orr.w	r9, r9, r1, lsl #13
 800f35a:	ea4f 1a91 	mov.w	sl, r1, lsr #6
 800f35e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f360:	ea4a 6a81 	orr.w	sl, sl, r1, lsl #26
 800f364:	ea8e 0e09 	eor.w	lr, lr, r9
 800f368:	ea88 080a 	eor.w	r8, r8, sl
 800f36c:	eb12 0208 	adds.w	r2, r2, r8
 800f370:	ea8e 1e91 	eor.w	lr, lr, r1, lsr #6
 800f374:	921d      	str	r2, [sp, #116]	; 0x74
 800f376:	eb40 020e 	adc.w	r2, r0, lr
 800f37a:	920d      	str	r2, [sp, #52]	; 0x34
 800f37c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f37e:	19d1      	adds	r1, r2, r7
 800f380:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f382:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800f384:	eb46 060c 	adc.w	r6, r6, ip
 800f388:	1889      	adds	r1, r1, r2
 800f38a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f38c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 800f390:	eb42 0606 	adc.w	r6, r2, r6
 800f394:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f396:	1852      	adds	r2, r2, r1
 800f398:	922d      	str	r2, [sp, #180]	; 0xb4
 800f39a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f39c:	eb42 0206 	adc.w	r2, r2, r6
 800f3a0:	922e      	str	r2, [sp, #184]	; 0xb8
 800f3a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f3a4:	ea4f 7e82 	mov.w	lr, r2, lsl #30
 800f3a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f3aa:	ea4e 0e92 	orr.w	lr, lr, r2, lsr #2
 800f3ae:	ea4f 7882 	mov.w	r8, r2, lsl #30
 800f3b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f3b4:	ea48 0892 	orr.w	r8, r8, r2, lsr #2
 800f3b8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f3ba:	0f10      	lsrs	r0, r2, #28
 800f3bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f3be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3c2:	0f12      	lsrs	r2, r2, #28
 800f3c4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 800f3c8:	ea8e 0e02 	eor.w	lr, lr, r2
 800f3cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f3ce:	0652      	lsls	r2, r2, #25
 800f3d0:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 800f3d4:	ea88 0800 	eor.w	r8, r8, r0
 800f3d8:	0678      	lsls	r0, r7, #25
 800f3da:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800f3dc:	ea40 10d7 	orr.w	r0, r0, r7, lsr #7
 800f3e0:	ea8e 0e02 	eor.w	lr, lr, r2
 800f3e4:	ea88 0800 	eor.w	r8, r8, r0
 800f3e8:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 800f3ec:	4310      	orrs	r0, r2
 800f3ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f3f0:	ea42 0907 	orr.w	r9, r2, r7
 800f3f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f3f6:	ea09 0902 	and.w	r9, r9, r2
 800f3fa:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 800f3fe:	403a      	ands	r2, r7
 800f400:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800f402:	ea00 000b 	and.w	r0, r0, fp
 800f406:	4310      	orrs	r0, r2
 800f408:	ea07 070c 	and.w	r7, r7, ip
 800f40c:	eb18 0000 	adds.w	r0, r8, r0
 800f410:	ea49 0707 	orr.w	r7, r9, r7
 800f414:	eb4e 0707 	adc.w	r7, lr, r7
 800f418:	1842      	adds	r2, r0, r1
 800f41a:	9225      	str	r2, [sp, #148]	; 0x94
 800f41c:	eb46 0207 	adc.w	r2, r6, r7
 800f420:	9226      	str	r2, [sp, #152]	; 0x98
 800f422:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f424:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800f426:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800f42a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f42c:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800f430:	ea4f 4e92 	mov.w	lr, r2, lsr #18
 800f434:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f436:	ea4e 3e82 	orr.w	lr, lr, r2, lsl #14
 800f43a:	0b91      	lsrs	r1, r2, #14
 800f43c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f43e:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800f442:	0b92      	lsrs	r2, r2, #14
 800f444:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800f448:	ea8e 0e02 	eor.w	lr, lr, r2
 800f44c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f44e:	05d2      	lsls	r2, r2, #23
 800f450:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800f454:	ea89 0901 	eor.w	r9, r9, r1
 800f458:	05c1      	lsls	r1, r0, #23
 800f45a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800f45c:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 800f45e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800f462:	ea89 0901 	eor.w	r9, r9, r1
 800f466:	ea8e 0e02 	eor.w	lr, lr, r2
 800f46a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f46c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f46e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800f470:	404a      	eors	r2, r1
 800f472:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800f474:	ea81 0600 	eor.w	r6, r1, r0
 800f478:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f47a:	400a      	ands	r2, r1
 800f47c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800f47e:	400e      	ands	r6, r1
 800f480:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f482:	404a      	eors	r2, r1
 800f484:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800f486:	404e      	eors	r6, r1
 800f488:	e9d3 1016 	ldrd	r1, r0, [r3, #88]	; 0x58
 800f48c:	1879      	adds	r1, r7, r1
 800f48e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800f490:	eb47 0000 	adc.w	r0, r7, r0
 800f494:	1852      	adds	r2, r2, r1
 800f496:	9901      	ldr	r1, [sp, #4]
 800f498:	922f      	str	r2, [sp, #188]	; 0xbc
 800f49a:	eb46 0600 	adc.w	r6, r6, r0
 800f49e:	2900      	cmp	r1, #0
 800f4a0:	f000 852a 	beq.w	800fef8 <_Transform_Sha512+0x1f88>
 800f4a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f4a6:	9803      	ldr	r0, [sp, #12]
 800f4a8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800f4ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f4ae:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 800f4b2:	9903      	ldr	r1, [sp, #12]
 800f4b4:	ea4c 6c01 	orr.w	ip, ip, r1, lsl #24
 800f4b8:	0a0f      	lsrs	r7, r1, #8
 800f4ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f4bc:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800f4c0:	0849      	lsrs	r1, r1, #1
 800f4c2:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800f4c6:	0840      	lsrs	r0, r0, #1
 800f4c8:	ea40 70c8 	orr.w	r0, r0, r8, lsl #31
 800f4cc:	4078      	eors	r0, r7
 800f4ce:	9f03      	ldr	r7, [sp, #12]
 800f4d0:	ea8c 0101 	eor.w	r1, ip, r1
 800f4d4:	ea4f 1cd8 	mov.w	ip, r8, lsr #7
 800f4d8:	ea4c 6c47 	orr.w	ip, ip, r7, lsl #25
 800f4dc:	ea80 10d7 	eor.w	r0, r0, r7, lsr #7
 800f4e0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f4e2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f4e6:	ea81 010c 	eor.w	r1, r1, ip
 800f4ea:	19c9      	adds	r1, r1, r7
 800f4ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f4ee:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800f4f2:	eb47 0000 	adc.w	r0, r7, r0
 800f4f6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800f4f8:	19c9      	adds	r1, r1, r7
 800f4fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f4fc:	eb47 0000 	adc.w	r0, r7, r0
 800f500:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f502:	00ff      	lsls	r7, r7, #3
 800f504:	ea47 775c 	orr.w	r7, r7, ip, lsr #29
 800f508:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 800f50c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 800f510:	ea4a 7a5c 	orr.w	sl, sl, ip, lsr #29
 800f514:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 800f518:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800f51c:	ea4c 3c48 	orr.w	ip, ip, r8, lsl #13
 800f520:	ea4f 48d8 	mov.w	r8, r8, lsr #19
 800f524:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 800f528:	ea8a 0c0c 	eor.w	ip, sl, ip
 800f52c:	ea4f 1a92 	mov.w	sl, r2, lsr #6
 800f530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f532:	ea4a 6a82 	orr.w	sl, sl, r2, lsl #26
 800f536:	ea87 0708 	eor.w	r7, r7, r8
 800f53a:	ea8c 0c0a 	eor.w	ip, ip, sl
 800f53e:	ea87 1792 	eor.w	r7, r7, r2, lsr #6
 800f542:	eb11 020c 	adds.w	r2, r1, ip
 800f546:	eb40 0107 	adc.w	r1, r0, r7
 800f54a:	921e      	str	r2, [sp, #120]	; 0x78
 800f54c:	910e      	str	r1, [sp, #56]	; 0x38
 800f54e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f550:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f552:	eb19 0202 	adds.w	r2, r9, r2
 800f556:	eb4e 0e06 	adc.w	lr, lr, r6
 800f55a:	1852      	adds	r2, r2, r1
 800f55c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f55e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800f560:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800f564:	eb41 0e0e 	adc.w	lr, r1, lr
 800f568:	eb1b 0102 	adds.w	r1, fp, r2
 800f56c:	912f      	str	r1, [sp, #188]	; 0xbc
 800f56e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f570:	eb41 010e 	adc.w	r1, r1, lr
 800f574:	9131      	str	r1, [sp, #196]	; 0xc4
 800f576:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f578:	078f      	lsls	r7, r1, #30
 800f57a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f57c:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 800f580:	ea4f 7c81 	mov.w	ip, r1, lsl #30
 800f584:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f586:	ea4c 0c91 	orr.w	ip, ip, r1, lsr #2
 800f58a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f58c:	0f08      	lsrs	r0, r1, #28
 800f58e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f590:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800f594:	0f09      	lsrs	r1, r1, #28
 800f596:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800f59a:	404f      	eors	r7, r1
 800f59c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f59e:	0649      	lsls	r1, r1, #25
 800f5a0:	ea41 11d6 	orr.w	r1, r1, r6, lsr #7
 800f5a4:	ea8c 0c00 	eor.w	ip, ip, r0
 800f5a8:	0670      	lsls	r0, r6, #25
 800f5aa:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800f5ac:	ea40 10d6 	orr.w	r0, r0, r6, lsr #7
 800f5b0:	ea8c 0c00 	eor.w	ip, ip, r0
 800f5b4:	404f      	eors	r7, r1
 800f5b6:	9825      	ldr	r0, [sp, #148]	; 0x94
 800f5b8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800f5ba:	4308      	orrs	r0, r1
 800f5bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f5be:	ea41 0806 	orr.w	r8, r1, r6
 800f5c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f5c4:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800f5c6:	4008      	ands	r0, r1
 800f5c8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800f5ca:	ea08 0801 	and.w	r8, r8, r1
 800f5ce:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800f5d0:	4031      	ands	r1, r6
 800f5d2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800f5d4:	4308      	orrs	r0, r1
 800f5d6:	ea06 0609 	and.w	r6, r6, r9
 800f5da:	eb1c 0000 	adds.w	r0, ip, r0
 800f5de:	ea48 0606 	orr.w	r6, r8, r6
 800f5e2:	eb47 0606 	adc.w	r6, r7, r6
 800f5e6:	1882      	adds	r2, r0, r2
 800f5e8:	9227      	str	r2, [sp, #156]	; 0x9c
 800f5ea:	eb4e 0206 	adc.w	r2, lr, r6
 800f5ee:	9230      	str	r2, [sp, #192]	; 0xc0
 800f5f0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f5f2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800f5f4:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800f5f8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800f5fa:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800f5fe:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800f602:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f604:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800f608:	0b91      	lsrs	r1, r2, #14
 800f60a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800f60c:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800f610:	0b92      	lsrs	r2, r2, #14
 800f612:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
        R(12); R(13); R(14); R(15);
 800f616:	ea89 0902 	eor.w	r9, r9, r2
 800f61a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800f61c:	05d2      	lsls	r2, r2, #23
 800f61e:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800f622:	ea8a 0a01 	eor.w	sl, sl, r1
 800f626:	05c1      	lsls	r1, r0, #23
 800f628:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800f62a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800f62e:	ea8a 0a01 	eor.w	sl, sl, r1
 800f632:	ea89 0902 	eor.w	r9, r9, r2
 800f636:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f638:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f63a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800f63c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800f63e:	404a      	eors	r2, r1
 800f640:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800f642:	ea81 0800 	eor.w	r8, r1, r0
 800f646:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800f648:	400a      	ands	r2, r1
 800f64a:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800f64c:	ea08 0801 	and.w	r8, r8, r1
 800f650:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f652:	404a      	eors	r2, r1
 800f654:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800f656:	ea88 0801 	eor.w	r8, r8, r1
 800f65a:	e9d3 1018 	ldrd	r1, r0, [r3, #96]	; 0x60
 800f65e:	1871      	adds	r1, r6, r1
 800f660:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800f662:	eb46 0000 	adc.w	r0, r6, r0
 800f666:	1852      	adds	r2, r2, r1
 800f668:	9901      	ldr	r1, [sp, #4]
 800f66a:	eb48 0800 	adc.w	r8, r8, r0
 800f66e:	2900      	cmp	r1, #0
 800f670:	f000 844a 	beq.w	800ff08 <_Transform_Sha512+0x1f98>
 800f674:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f676:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f678:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 800f67c:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800f680:	0a0f      	lsrs	r7, r1, #8
 800f682:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f684:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800f688:	0a0e      	lsrs	r6, r1, #8
 800f68a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f68c:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800f690:	0849      	lsrs	r1, r1, #1
 800f692:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800f696:	0840      	lsrs	r0, r0, #1
 800f698:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800f69c:	4070      	eors	r0, r6
 800f69e:	4666      	mov	r6, ip
 800f6a0:	4079      	eors	r1, r7
 800f6a2:	09f7      	lsrs	r7, r6, #7
 800f6a4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f6a6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800f6aa:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800f6ae:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800f6b2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f6b4:	4079      	eors	r1, r7
 800f6b6:	1989      	adds	r1, r1, r6
 800f6b8:	9e03      	ldr	r6, [sp, #12]
 800f6ba:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800f6bc:	eb46 0000 	adc.w	r0, r6, r0
 800f6c0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800f6c2:	1989      	adds	r1, r1, r6
 800f6c4:	9e04      	ldr	r6, [sp, #16]
 800f6c6:	eb46 0000 	adc.w	r0, r6, r0
 800f6ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800f6cc:	00f6      	lsls	r6, r6, #3
 800f6ce:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800f6d2:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800f6d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f6d8:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800f6dc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800f6de:	0cff      	lsrs	r7, r7, #19
 800f6e0:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800f6e4:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800f6e8:	ea4c 3c4b 	orr.w	ip, ip, fp, lsl #13
 800f6ec:	ea86 060c 	eor.w	r6, r6, ip
 800f6f0:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800f6f4:	ea8e 0707 	eor.w	r7, lr, r7
 800f6f8:	ea4f 1e9b 	mov.w	lr, fp, lsr #6
 800f6fc:	ea4e 6e8c 	orr.w	lr, lr, ip, lsl #26
 800f700:	ea87 070e 	eor.w	r7, r7, lr
 800f704:	19c9      	adds	r1, r1, r7
 800f706:	ea86 169c 	eor.w	r6, r6, ip, lsr #6
 800f70a:	9113      	str	r1, [sp, #76]	; 0x4c
 800f70c:	eb40 0106 	adc.w	r1, r0, r6
 800f710:	9103      	str	r1, [sp, #12]
 800f712:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f714:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 800f718:	eb1a 0202 	adds.w	r2, sl, r2
 800f71c:	eb49 0908 	adc.w	r9, r9, r8
 800f720:	1852      	adds	r2, r2, r1
 800f722:	9903      	ldr	r1, [sp, #12]
 800f724:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 800f728:	eb41 0909 	adc.w	r9, r1, r9
 800f72c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f72e:	1889      	adds	r1, r1, r2
 800f730:	9129      	str	r1, [sp, #164]	; 0xa4
 800f732:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800f734:	eb41 0109 	adc.w	r1, r1, r9
 800f738:	912a      	str	r1, [sp, #168]	; 0xa8
 800f73a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800f73c:	078e      	lsls	r6, r1, #30
 800f73e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f740:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 800f744:	078f      	lsls	r7, r1, #30
 800f746:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800f748:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 800f74c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f74e:	0f08      	lsrs	r0, r1, #28
 800f750:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800f752:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800f756:	0f09      	lsrs	r1, r1, #28
 800f758:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800f75c:	404e      	eors	r6, r1
 800f75e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800f760:	ea4f 6c41 	mov.w	ip, r1, lsl #25
 800f764:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f766:	4047      	eors	r7, r0
 800f768:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800f76a:	ea4c 1cd1 	orr.w	ip, ip, r1, lsr #7
 800f76e:	0649      	lsls	r1, r1, #25
 800f770:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 800f774:	404f      	eors	r7, r1
 800f776:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800f778:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f77a:	ea86 060c 	eor.w	r6, r6, ip
 800f77e:	4301      	orrs	r1, r0
 800f780:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
 800f784:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f786:	ea40 0e0c 	orr.w	lr, r0, ip
 800f78a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800f78c:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 800f790:	4001      	ands	r1, r0
 800f792:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f794:	ea0e 0e00 	and.w	lr, lr, r0
 800f798:	9825      	ldr	r0, [sp, #148]	; 0x94
 800f79a:	ea00 000c 	and.w	r0, r0, ip
 800f79e:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 800f7a2:	4301      	orrs	r1, r0
 800f7a4:	ea0c 0c08 	and.w	ip, ip, r8
 800f7a8:	1879      	adds	r1, r7, r1
 800f7aa:	ea4e 0c0c 	orr.w	ip, lr, ip
 800f7ae:	eb46 0c0c 	adc.w	ip, r6, ip
 800f7b2:	188a      	adds	r2, r1, r2
 800f7b4:	9222      	str	r2, [sp, #136]	; 0x88
 800f7b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f7b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800f7ba:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800f7be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f7c0:	eb49 0b0c 	adc.w	fp, r9, ip
 800f7c4:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800f7c8:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800f7cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f7ce:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800f7d2:	0b91      	lsrs	r1, r2, #14
 800f7d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f7d6:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800f7da:	0b92      	lsrs	r2, r2, #14
 800f7dc:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800f7e0:	ea89 0902 	eor.w	r9, r9, r2
 800f7e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f7e6:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 800f7e8:	05d2      	lsls	r2, r2, #23
 800f7ea:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800f7ee:	ea8a 0a01 	eor.w	sl, sl, r1
 800f7f2:	05c1      	lsls	r1, r0, #23
 800f7f4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800f7f6:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800f7fa:	ea8a 0a01 	eor.w	sl, sl, r1
 800f7fe:	ea89 0902 	eor.w	r9, r9, r2
 800f802:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800f804:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f806:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800f808:	404a      	eors	r2, r1
 800f80a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800f80c:	ea81 0800 	eor.w	r8, r1, r0
 800f810:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f812:	400a      	ands	r2, r1
 800f814:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800f816:	ea08 0801 	and.w	r8, r8, r1
 800f81a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f81c:	404a      	eors	r2, r1
 800f81e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800f820:	ea88 0801 	eor.w	r8, r8, r1
 800f824:	e9d3 101a 	ldrd	r1, r0, [r3, #104]	; 0x68
 800f828:	1871      	adds	r1, r6, r1
 800f82a:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800f82c:	eb46 0000 	adc.w	r0, r6, r0
 800f830:	1852      	adds	r2, r2, r1
 800f832:	9901      	ldr	r1, [sp, #4]
 800f834:	9228      	str	r2, [sp, #160]	; 0xa0
 800f836:	eb48 0800 	adc.w	r8, r8, r0
 800f83a:	2900      	cmp	r1, #0
 800f83c:	f000 836b 	beq.w	800ff16 <_Transform_Sha512+0x1fa6>
 800f840:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f842:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f844:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 800f848:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f84a:	0a0f      	lsrs	r7, r1, #8
 800f84c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f84e:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800f852:	0a0e      	lsrs	r6, r1, #8
 800f854:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f856:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800f85a:	0849      	lsrs	r1, r1, #1
 800f85c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800f860:	0840      	lsrs	r0, r0, #1
 800f862:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800f866:	4070      	eors	r0, r6
 800f868:	4666      	mov	r6, ip
 800f86a:	4079      	eors	r1, r7
 800f86c:	09f7      	lsrs	r7, r6, #7
 800f86e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f870:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800f874:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800f878:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800f87c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800f87e:	4079      	eors	r1, r7
 800f880:	1989      	adds	r1, r1, r6
 800f882:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f884:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f886:	eb46 0000 	adc.w	r0, r6, r0
 800f88a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f88c:	1989      	adds	r1, r1, r6
 800f88e:	9e05      	ldr	r6, [sp, #20]
 800f890:	eb46 0000 	adc.w	r0, r6, r0
 800f894:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f896:	00f6      	lsls	r6, r6, #3
 800f898:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800f89c:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800f8a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f8a2:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800f8a6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f8a8:	0cff      	lsrs	r7, r7, #19
 800f8aa:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800f8ae:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800f8b2:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 800f8b6:	ea8e 0707 	eor.w	r7, lr, r7
 800f8ba:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 800f8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8c0:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 800f8c4:	ea86 060c 	eor.w	r6, r6, ip
 800f8c8:	ea87 070e 	eor.w	r7, r7, lr
 800f8cc:	19c9      	adds	r1, r1, r7
 800f8ce:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 800f8d2:	911f      	str	r1, [sp, #124]	; 0x7c
 800f8d4:	eb40 0106 	adc.w	r1, r0, r6
 800f8d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800f8da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f8dc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f8de:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800f8e2:	eb1a 0202 	adds.w	r2, sl, r2
 800f8e6:	eb49 0908 	adc.w	r9, r9, r8
 800f8ea:	1852      	adds	r2, r2, r1
 800f8ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f8ee:	eb41 0909 	adc.w	r9, r1, r9
 800f8f2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800f8f4:	1889      	adds	r1, r1, r2
 800f8f6:	912b      	str	r1, [sp, #172]	; 0xac
 800f8f8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f8fa:	eb41 0109 	adc.w	r1, r1, r9
 800f8fe:	912c      	str	r1, [sp, #176]	; 0xb0
 800f900:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f902:	ea4f 768b 	mov.w	r6, fp, lsl #30
 800f906:	ea46 0691 	orr.w	r6, r6, r1, lsr #2
 800f90a:	078f      	lsls	r7, r1, #30
 800f90c:	0f08      	lsrs	r0, r1, #28
 800f90e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 800f912:	ea41 110c 	orr.w	r1, r1, ip, lsl #4
 800f916:	404e      	eors	r6, r1
 800f918:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f91a:	ea4f 6c4b 	mov.w	ip, fp, lsl #25
 800f91e:	ea4c 1cd1 	orr.w	ip, ip, r1, lsr #7
 800f922:	ea40 100b 	orr.w	r0, r0, fp, lsl #4
 800f926:	ea47 079b 	orr.w	r7, r7, fp, lsr #2
 800f92a:	0649      	lsls	r1, r1, #25
 800f92c:	4047      	eors	r7, r0
 800f92e:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 800f932:	9822      	ldr	r0, [sp, #136]	; 0x88
 800f934:	404f      	eors	r7, r1
 800f936:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f938:	4301      	orrs	r1, r0
 800f93a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800f93c:	ea40 0e0b 	orr.w	lr, r0, fp
 800f940:	9825      	ldr	r0, [sp, #148]	; 0x94
 800f942:	4001      	ands	r1, r0
 800f944:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f946:	ea86 060c 	eor.w	r6, r6, ip
 800f94a:	ea0e 0e00 	and.w	lr, lr, r0
 800f94e:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800f952:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800f954:	ea00 000c 	and.w	r0, r0, ip
 800f958:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
 800f95c:	4301      	orrs	r1, r0
 800f95e:	ea0c 0c0b 	and.w	ip, ip, fp
 800f962:	1879      	adds	r1, r7, r1
 800f964:	ea4e 0c0c 	orr.w	ip, lr, ip
 800f968:	eb46 0c0c 	adc.w	ip, r6, ip
 800f96c:	188a      	adds	r2, r1, r2
 800f96e:	9223      	str	r2, [sp, #140]	; 0x8c
 800f970:	eb49 020c 	adc.w	r2, r9, ip
 800f974:	9224      	str	r2, [sp, #144]	; 0x90
 800f976:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f978:	982b      	ldr	r0, [sp, #172]	; 0xac
 800f97a:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800f97e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f980:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800f984:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800f988:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f98a:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800f98e:	0b91      	lsrs	r1, r2, #14
 800f990:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f992:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800f996:	0b92      	lsrs	r2, r2, #14
 800f998:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800f99c:	ea89 0902 	eor.w	r9, r9, r2
 800f9a0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800f9a2:	05d2      	lsls	r2, r2, #23
 800f9a4:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800f9a8:	ea8a 0a01 	eor.w	sl, sl, r1
 800f9ac:	05c1      	lsls	r1, r0, #23
 800f9ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800f9b0:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800f9b4:	ea8a 0a01 	eor.w	sl, sl, r1
 800f9b8:	ea89 0902 	eor.w	r9, r9, r2
 800f9bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f9be:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f9c0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800f9c2:	404a      	eors	r2, r1
 800f9c4:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800f9c6:	ea81 0800 	eor.w	r8, r1, r0
 800f9ca:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f9cc:	400a      	ands	r2, r1
 800f9ce:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800f9d0:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800f9d2:	ea08 0801 	and.w	r8, r8, r1
 800f9d6:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800f9d8:	404a      	eors	r2, r1
 800f9da:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800f9dc:	ea88 0801 	eor.w	r8, r8, r1
 800f9e0:	e9d3 101c 	ldrd	r1, r0, [r3, #112]	; 0x70
 800f9e4:	1871      	adds	r1, r6, r1
 800f9e6:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800f9e8:	eb46 0000 	adc.w	r0, r6, r0
 800f9ec:	1852      	adds	r2, r2, r1
 800f9ee:	9901      	ldr	r1, [sp, #4]
 800f9f0:	9228      	str	r2, [sp, #160]	; 0xa0
 800f9f2:	eb48 0800 	adc.w	r8, r8, r0
 800f9f6:	2900      	cmp	r1, #0
 800f9f8:	f000 8294 	beq.w	800ff24 <_Transform_Sha512+0x1fb4>
 800f9fc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f9fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fa00:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 800fa04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa06:	0a0f      	lsrs	r7, r1, #8
 800fa08:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fa0a:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800fa0e:	0a0e      	lsrs	r6, r1, #8
 800fa10:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fa12:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800fa16:	0849      	lsrs	r1, r1, #1
 800fa18:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800fa1c:	0840      	lsrs	r0, r0, #1
 800fa1e:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800fa22:	4070      	eors	r0, r6
 800fa24:	4666      	mov	r6, ip
 800fa26:	4079      	eors	r1, r7
 800fa28:	09f7      	lsrs	r7, r6, #7
 800fa2a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fa2c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fa30:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800fa34:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800fa38:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fa3a:	4079      	eors	r1, r7
 800fa3c:	1989      	adds	r1, r1, r6
 800fa3e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800fa40:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800fa42:	eb46 0000 	adc.w	r0, r6, r0
 800fa46:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800fa48:	1989      	adds	r1, r1, r6
 800fa4a:	9e06      	ldr	r6, [sp, #24]
 800fa4c:	eb46 0000 	adc.w	r0, r6, r0
 800fa50:	9e03      	ldr	r6, [sp, #12]
 800fa52:	00f6      	lsls	r6, r6, #3
 800fa54:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800fa58:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800fa5c:	9f03      	ldr	r7, [sp, #12]
 800fa5e:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800fa62:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800fa64:	0cff      	lsrs	r7, r7, #19
 800fa66:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800fa6a:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800fa6e:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 800fa72:	ea8e 0707 	eor.w	r7, lr, r7
 800fa76:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 800fa7a:	9a03      	ldr	r2, [sp, #12]
 800fa7c:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 800fa80:	ea86 060c 	eor.w	r6, r6, ip
 800fa84:	ea87 070e 	eor.w	r7, r7, lr
 800fa88:	19c9      	adds	r1, r1, r7
 800fa8a:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 800fa8e:	9120      	str	r1, [sp, #128]	; 0x80
 800fa90:	eb40 0106 	adc.w	r1, r0, r6
 800fa94:	9110      	str	r1, [sp, #64]	; 0x40
 800fa96:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fa98:	9920      	ldr	r1, [sp, #128]	; 0x80
 800fa9a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800fa9c:	eb1a 0202 	adds.w	r2, sl, r2
 800faa0:	eb49 0908 	adc.w	r9, r9, r8
 800faa4:	1852      	adds	r2, r2, r1
 800faa6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800faa8:	eb41 0909 	adc.w	r9, r1, r9
 800faac:	9925      	ldr	r1, [sp, #148]	; 0x94
 800faae:	1889      	adds	r1, r1, r2
 800fab0:	912d      	str	r1, [sp, #180]	; 0xb4
 800fab2:	9926      	ldr	r1, [sp, #152]	; 0x98
 800fab4:	eb41 0109 	adc.w	r1, r1, r9
 800fab8:	912e      	str	r1, [sp, #184]	; 0xb8
 800faba:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fabc:	078f      	lsls	r7, r1, #30
 800fabe:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800fac0:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 800fac4:	ea4f 7e81 	mov.w	lr, r1, lsl #30
 800fac8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800faca:	ea4e 0e91 	orr.w	lr, lr, r1, lsr #2
 800face:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800fad0:	0f08      	lsrs	r0, r1, #28
 800fad2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fad4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800fad8:	0f09      	lsrs	r1, r1, #28
 800fada:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800fade:	404f      	eors	r7, r1
 800fae0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fae2:	ea8e 0e00 	eor.w	lr, lr, r0
 800fae6:	9824      	ldr	r0, [sp, #144]	; 0x90
 800fae8:	ea4f 6c41 	mov.w	ip, r1, lsl #25
 800faec:	0671      	lsls	r1, r6, #25
 800faee:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 800faf2:	ea8e 0e01 	eor.w	lr, lr, r1
 800faf6:	9824      	ldr	r0, [sp, #144]	; 0x90
 800faf8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fafa:	ea4c 1cd6 	orr.w	ip, ip, r6, lsr #7
 800fafe:	4331      	orrs	r1, r6
 800fb00:	ea4b 0600 	orr.w	r6, fp, r0
 800fb04:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800fb06:	4001      	ands	r1, r0
 800fb08:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800fb0a:	ea87 070c 	eor.w	r7, r7, ip
 800fb0e:	4006      	ands	r6, r0
 800fb10:	e9dd 0c22 	ldrd	r0, ip, [sp, #136]	; 0x88
 800fb14:	ea00 000c 	and.w	r0, r0, ip
 800fb18:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 800fb1c:	4301      	orrs	r1, r0
 800fb1e:	ea0b 0c0c 	and.w	ip, fp, ip
 800fb22:	eb1e 0101 	adds.w	r1, lr, r1
 800fb26:	ea46 0c0c 	orr.w	ip, r6, ip
 800fb2a:	eb47 0c0c 	adc.w	ip, r7, ip
 800fb2e:	188a      	adds	r2, r1, r2
 800fb30:	9225      	str	r2, [sp, #148]	; 0x94
 800fb32:	eb49 020c 	adc.w	r2, r9, ip
 800fb36:	9226      	str	r2, [sp, #152]	; 0x98
 800fb38:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800fb3a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800fb3c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800fb3e:	ea4f 4a92 	mov.w	sl, r2, lsr #18
 800fb42:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fb44:	ea4a 3a82 	orr.w	sl, sl, r2, lsl #14
 800fb48:	ea4f 4992 	mov.w	r9, r2, lsr #18
 800fb4c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800fb4e:	ea49 3982 	orr.w	r9, r9, r2, lsl #14
 800fb52:	0b92      	lsrs	r2, r2, #14
 800fb54:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800fb58:	ea8a 0a02 	eor.w	sl, sl, r2
 800fb5c:	0b89      	lsrs	r1, r1, #14
 800fb5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fb60:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 800fb64:	ea89 0901 	eor.w	r9, r9, r1
 800fb68:	05d1      	lsls	r1, r2, #23
 800fb6a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 800fb6e:	05c2      	lsls	r2, r0, #23
 800fb70:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800fb72:	ea42 2250 	orr.w	r2, r2, r0, lsr #9
 800fb76:	ea8a 0a02 	eor.w	sl, sl, r2
 800fb7a:	ea89 0901 	eor.w	r9, r9, r1
 800fb7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fb80:	992b      	ldr	r1, [sp, #172]	; 0xac
 800fb82:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fb84:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800fb86:	404a      	eors	r2, r1
 800fb88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800fb8a:	ea81 0800 	eor.w	r8, r1, r0
 800fb8e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fb90:	400a      	ands	r2, r1
 800fb92:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800fb94:	ea08 0801 	and.w	r8, r8, r1
 800fb98:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fb9a:	404a      	eors	r2, r1
 800fb9c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800fb9e:	ea88 0801 	eor.w	r8, r8, r1
 800fba2:	e9d3 101e 	ldrd	r1, r0, [r3, #120]	; 0x78
 800fba6:	1871      	adds	r1, r6, r1
 800fba8:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800fbaa:	eb46 0000 	adc.w	r0, r6, r0
 800fbae:	1852      	adds	r2, r2, r1
 800fbb0:	9901      	ldr	r1, [sp, #4]
 800fbb2:	9228      	str	r2, [sp, #160]	; 0xa0
 800fbb4:	eb48 0800 	adc.w	r8, r8, r0
 800fbb8:	2900      	cmp	r1, #0
 800fbba:	f000 81ba 	beq.w	800ff32 <_Transform_Sha512+0x1fc2>
 800fbbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fbc0:	9808      	ldr	r0, [sp, #32]
 800fbc2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800fbc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fbc8:	0a0f      	lsrs	r7, r1, #8
 800fbca:	9908      	ldr	r1, [sp, #32]
 800fbcc:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 800fbd0:	0a0e      	lsrs	r6, r1, #8
 800fbd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fbd4:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 800fbd8:	0849      	lsrs	r1, r1, #1
 800fbda:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 800fbde:	0840      	lsrs	r0, r0, #1
 800fbe0:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 800fbe4:	4070      	eors	r0, r6
 800fbe6:	4666      	mov	r6, ip
 800fbe8:	4079      	eors	r1, r7
 800fbea:	09f7      	lsrs	r7, r6, #7
 800fbec:	9e08      	ldr	r6, [sp, #32]
 800fbee:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800fbf2:	ea47 6746 	orr.w	r7, r7, r6, lsl #25
 800fbf6:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800fbfa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800fbfc:	4079      	eors	r1, r7
 800fbfe:	1989      	adds	r1, r1, r6
 800fc00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fc02:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800fc04:	eb46 0000 	adc.w	r0, r6, r0
 800fc08:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fc0a:	1989      	adds	r1, r1, r6
 800fc0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fc0e:	eb46 0000 	adc.w	r0, r6, r0
 800fc12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fc14:	00f6      	lsls	r6, r6, #3
 800fc16:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 800fc1a:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 800fc1e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800fc20:	ea4e 7e57 	orr.w	lr, lr, r7, lsr #29
 800fc24:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800fc26:	0cff      	lsrs	r7, r7, #19
 800fc28:	ea47 374c 	orr.w	r7, r7, ip, lsl #13
 800fc2c:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 800fc30:	ea4c 3c42 	orr.w	ip, ip, r2, lsl #13
 800fc34:	ea8e 0707 	eor.w	r7, lr, r7
 800fc38:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 800fc3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fc3e:	ea4e 6e82 	orr.w	lr, lr, r2, lsl #26
 800fc42:	ea86 060c 	eor.w	r6, r6, ip
 800fc46:	ea87 070e 	eor.w	r7, r7, lr
 800fc4a:	19c9      	adds	r1, r1, r7
 800fc4c:	ea86 1692 	eor.w	r6, r6, r2, lsr #6
 800fc50:	9121      	str	r1, [sp, #132]	; 0x84
 800fc52:	eb40 0106 	adc.w	r1, r0, r6
 800fc56:	9111      	str	r1, [sp, #68]	; 0x44
 800fc58:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fc5a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fc5c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800fc5e:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 800fc62:	eb1a 0202 	adds.w	r2, sl, r2
 800fc66:	eb49 0908 	adc.w	r9, r9, r8
 800fc6a:	eb12 0801 	adds.w	r8, r2, r1
 800fc6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fc70:	9926      	ldr	r1, [sp, #152]	; 0x98
 800fc72:	eb42 0909 	adc.w	r9, r2, r9
 800fc76:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800fc78:	eb12 0208 	adds.w	r2, r2, r8
 800fc7c:	922f      	str	r2, [sp, #188]	; 0xbc
 800fc7e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800fc80:	eb42 0a09 	adc.w	sl, r2, r9
 800fc84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fc86:	0790      	lsls	r0, r2, #30
 800fc88:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800fc8a:	ea40 0092 	orr.w	r0, r0, r2, lsr #2
 800fc8e:	0796      	lsls	r6, r2, #30
 800fc90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fc92:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 800fc96:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800fc98:	0f12      	lsrs	r2, r2, #28
 800fc9a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800fc9e:	4056      	eors	r6, r2
 800fca0:	0f09      	lsrs	r1, r1, #28
 800fca2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fca4:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800fca8:	4048      	eors	r0, r1
 800fcaa:	0651      	lsls	r1, r2, #25
 800fcac:	ea41 11d7 	orr.w	r1, r1, r7, lsr #7
 800fcb0:	067a      	lsls	r2, r7, #25
 800fcb2:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800fcb4:	ea42 12d7 	orr.w	r2, r2, r7, lsr #7
 800fcb8:	4056      	eors	r6, r2
 800fcba:	4048      	eors	r0, r1
 800fcbc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fcbe:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fcc0:	ea42 0c01 	orr.w	ip, r2, r1
 800fcc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fcc6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fcc8:	4317      	orrs	r7, r2
 800fcca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fccc:	ea0c 0c02 	and.w	ip, ip, r2
 800fcd0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fcd2:	4011      	ands	r1, r2
 800fcd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fcd6:	ea07 070b 	and.w	r7, r7, fp
 800fcda:	ea02 0e0e 	and.w	lr, r2, lr
 800fcde:	ea4c 0101 	orr.w	r1, ip, r1
 800fce2:	1871      	adds	r1, r6, r1
 800fce4:	ea47 0e0e 	orr.w	lr, r7, lr
 800fce8:	eb40 0e0e 	adc.w	lr, r0, lr
 800fcec:	eb11 0208 	adds.w	r2, r1, r8
    for (j = 0; j < 80; j += 16) {
 800fcf0:	9901      	ldr	r1, [sp, #4]
        R(12); R(13); R(14); R(15);
 800fcf2:	9227      	str	r2, [sp, #156]	; 0x9c
    for (j = 0; j < 80; j += 16) {
 800fcf4:	f101 0110 	add.w	r1, r1, #16
        R(12); R(13); R(14); R(15);
 800fcf8:	eb49 020e 	adc.w	r2, r9, lr
    for (j = 0; j < 80; j += 16) {
 800fcfc:	2950      	cmp	r1, #80	; 0x50
        R(12); R(13); R(14); R(15);
 800fcfe:	9228      	str	r2, [sp, #160]	; 0xa0
    for (j = 0; j < 80; j += 16) {
 800fd00:	9101      	str	r1, [sp, #4]
 800fd02:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800fd06:	f47e a9a6 	bne.w	800e056 <_Transform_Sha512+0xe6>
 800fd0a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800fd0c:	e9cd 3a3a 	strd	r3, sl, [sp, #232]	; 0xe8
 800fd10:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800fd12:	933e      	str	r3, [sp, #248]	; 0xf8
 800fd14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800fd16:	933f      	str	r3, [sp, #252]	; 0xfc
 800fd18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fd1a:	933c      	str	r3, [sp, #240]	; 0xf0
 800fd1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fd1e:	933d      	str	r3, [sp, #244]	; 0xf4
 800fd20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fd22:	6723      	str	r3, [r4, #112]	; 0x70
 800fd24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd26:	6763      	str	r3, [r4, #116]	; 0x74
 800fd28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fd2a:	64a3      	str	r3, [r4, #72]	; 0x48
 800fd2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800fd30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fd32:	60a3      	str	r3, [r4, #8]
 800fd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd36:	60e3      	str	r3, [r4, #12]
 800fd38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fd3a:	6023      	str	r3, [r4, #0]
 800fd3c:	9b08      	ldr	r3, [sp, #32]
 800fd3e:	6063      	str	r3, [r4, #4]
 800fd40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fd42:	9340      	str	r3, [sp, #256]	; 0x100
 800fd44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fd46:	9341      	str	r3, [sp, #260]	; 0x104
 800fd48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd4a:	e9cd 3b38 	strd	r3, fp, [sp, #224]	; 0xe0
 800fd4e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800fd50:	9332      	str	r3, [sp, #200]	; 0xc8
 800fd52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800fd54:	9333      	str	r3, [sp, #204]	; 0xcc
 800fd56:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fd58:	9334      	str	r3, [sp, #208]	; 0xd0
 800fd5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd5c:	9335      	str	r3, [sp, #212]	; 0xd4
 800fd5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd60:	9336      	str	r3, [sp, #216]	; 0xd8
 800fd62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fd64:	9337      	str	r3, [sp, #220]	; 0xdc
 800fd66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd68:	67a3      	str	r3, [r4, #120]	; 0x78
 800fd6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd6c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800fd6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd70:	6523      	str	r3, [r4, #80]	; 0x50
 800fd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd74:	6563      	str	r3, [r4, #84]	; 0x54
 800fd76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd78:	6123      	str	r3, [r4, #16]
 800fd7a:	9b07      	ldr	r3, [sp, #28]
 800fd7c:	6163      	str	r3, [r4, #20]
 800fd7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fd80:	65a3      	str	r3, [r4, #88]	; 0x58
 800fd82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd84:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fd86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd88:	61a3      	str	r3, [r4, #24]
 800fd8a:	9b02      	ldr	r3, [sp, #8]
 800fd8c:	61e3      	str	r3, [r4, #28]
 800fd8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd90:	6623      	str	r3, [r4, #96]	; 0x60
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	6663      	str	r3, [r4, #100]	; 0x64
 800fd96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fd98:	6223      	str	r3, [r4, #32]
 800fd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd9c:	6263      	str	r3, [r4, #36]	; 0x24
 800fd9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fda0:	66a3      	str	r3, [r4, #104]	; 0x68
 800fda2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fda4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800fda6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fda8:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdaa:	9b04      	ldr	r3, [sp, #16]
 800fdac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdb0:	6323      	str	r3, [r4, #48]	; 0x30
 800fdb2:	9b05      	ldr	r3, [sp, #20]
 800fdb4:	6363      	str	r3, [r4, #52]	; 0x34
 800fdb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fdb8:	63a3      	str	r3, [r4, #56]	; 0x38
 800fdba:	9b06      	ldr	r3, [sp, #24]
 800fdbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fdbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fdc0:	6423      	str	r3, [r4, #64]	; 0x40
 800fdc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdc4:	6463      	str	r3, [r4, #68]	; 0x44
    }
#endif /* USE_SLOW_SHA512 */

    /* Add the working vars back into digest */
    sha512->digest[0] += a(0);
 800fdc6:	e9d5 3100 	ldrd	r3, r1, [r5]
 800fdca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800fdcc:	189b      	adds	r3, r3, r2
 800fdce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fdd0:	eb42 0101 	adc.w	r1, r2, r1
 800fdd4:	e9c5 3100 	strd	r3, r1, [r5]
    sha512->digest[1] += b(0);
 800fdd8:	e9d5 1602 	ldrd	r1, r6, [r5, #8]
 800fddc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fdde:	18c9      	adds	r1, r1, r3
 800fde0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fde2:	eb43 0606 	adc.w	r6, r3, r6
 800fde6:	e9c5 1602 	strd	r1, r6, [r5, #8]
    sha512->digest[2] += c(0);
 800fdea:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
 800fdee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fdf0:	18d2      	adds	r2, r2, r3
 800fdf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fdf4:	eb43 0606 	adc.w	r6, r3, r6
 800fdf8:	e9c5 2604 	strd	r2, r6, [r5, #16]
    sha512->digest[3] += d(0);
 800fdfc:	e9d5 2606 	ldrd	r2, r6, [r5, #24]
 800fe00:	9b22      	ldr	r3, [sp, #136]	; 0x88
    sha512->digest[4] += e(0);
 800fe02:	e9d5 0708 	ldrd	r0, r7, [r5, #32]
    sha512->digest[3] += d(0);
 800fe06:	18d2      	adds	r2, r2, r3
    sha512->digest[4] += e(0);
 800fe08:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    sha512->digest[3] += d(0);
 800fe0a:	eb4b 0606 	adc.w	r6, fp, r6
    sha512->digest[4] += e(0);
 800fe0e:	18c0      	adds	r0, r0, r3
 800fe10:	eb4a 0707 	adc.w	r7, sl, r7
 800fe14:	e9c5 0708 	strd	r0, r7, [r5, #32]
    sha512->digest[5] += f(0);
 800fe18:	e9d5 070a 	ldrd	r0, r7, [r5, #40]	; 0x28
 800fe1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fe1e:	18c0      	adds	r0, r0, r3
 800fe20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fe22:	eb43 0707 	adc.w	r7, r3, r7
    sha512->digest[3] += d(0);
 800fe26:	e9c5 2606 	strd	r2, r6, [r5, #24]
    sha512->digest[5] += f(0);
 800fe2a:	e9c5 070a 	strd	r0, r7, [r5, #40]	; 0x28
    sha512->digest[6] += g(0);
 800fe2e:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 800fe32:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800fe34:	18c0      	adds	r0, r0, r3
 800fe36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800fe38:	eb43 0606 	adc.w	r6, r3, r6
 800fe3c:	e9c5 060c 	strd	r0, r6, [r5, #48]	; 0x30
    sha512->digest[7] += h(0);
 800fe40:	e9d5 160e 	ldrd	r1, r6, [r5, #56]	; 0x38
 800fe44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fe46:	18c9      	adds	r1, r1, r3
 800fe48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fe4a:	eb43 0606 	adc.w	r6, r3, r6
 800fe4e:	e9c5 160e 	strd	r1, r6, [r5, #56]	; 0x38
    while (len--) *z++ = 0;
 800fe52:	f104 0280 	add.w	r2, r4, #128	; 0x80
 800fe56:	4623      	mov	r3, r4
 800fe58:	2100      	movs	r1, #0
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d170      	bne.n	800ff40 <_Transform_Sha512+0x1fd0>
 800fe5e:	2300      	movs	r3, #0
 800fe60:	4619      	mov	r1, r3
 800fe62:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800fe66:	3301      	adds	r3, #1
 800fe68:	2b41      	cmp	r3, #65	; 0x41
 800fe6a:	446a      	add	r2, sp
 800fe6c:	d16b      	bne.n	800ff46 <_Transform_Sha512+0x1fd6>
    /* Wipe variables */
    ForceZero(W, sizeof(word64) * 16);
    ForceZero(T, sizeof(T));

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
    XFREE(W, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f00b f89e 	bl	801afb0 <free>
#endif

    return 0;
 800fe74:	2000      	movs	r0, #0
}
 800fe76:	b043      	add	sp, #268	; 0x10c
 800fe78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R( 0); R( 1); R( 2); R( 3);
 800fe7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800fe7e:	9218      	str	r2, [sp, #96]	; 0x60
 800fe80:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800fe82:	9208      	str	r2, [sp, #32]
 800fe84:	f7fe b975 	b.w	800e172 <_Transform_Sha512+0x202>
 800fe88:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800fe8a:	9219      	str	r2, [sp, #100]	; 0x64
 800fe8c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800fe8e:	f7fe ba61 	b.w	800e354 <_Transform_Sha512+0x3e4>
 800fe92:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800fe94:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe96:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800fe98:	f7fe bb4b 	b.w	800e532 <_Transform_Sha512+0x5c2>
 800fe9c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800fe9e:	9212      	str	r2, [sp, #72]	; 0x48
 800fea0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800fea2:	f7fe bc2f 	b.w	800e704 <_Transform_Sha512+0x794>
        R( 4); R( 5); R( 6); R( 7);
 800fea6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fea8:	911a      	str	r1, [sp, #104]	; 0x68
 800feaa:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800feac:	f7fe bd13 	b.w	800e8d6 <_Transform_Sha512+0x966>
 800feb0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800feb2:	9114      	str	r1, [sp, #80]	; 0x50
 800feb4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800feb6:	f7fe bdef 	b.w	800ea98 <_Transform_Sha512+0xb28>
 800feba:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800febc:	9115      	str	r1, [sp, #84]	; 0x54
 800febe:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800fec0:	f7fe bece 	b.w	800ec60 <_Transform_Sha512+0xcf0>
 800fec4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800fec6:	9116      	str	r1, [sp, #88]	; 0x58
 800fec8:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800feca:	f7fe bfac 	b.w	800ee26 <_Transform_Sha512+0xeb6>
        R( 8); R( 9); R(10); R(11);
 800fece:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800fed2:	911b      	str	r1, [sp, #108]	; 0x6c
 800fed4:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800fed8:	f7ff b88c 	b.w	800eff4 <_Transform_Sha512+0x1084>
 800fedc:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800fee0:	921c      	str	r2, [sp, #112]	; 0x70
 800fee2:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800fee6:	f7ff b964 	b.w	800f1b2 <_Transform_Sha512+0x1242>
 800feea:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800feee:	921d      	str	r2, [sp, #116]	; 0x74
 800fef0:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800fef4:	f7ff ba41 	b.w	800f37a <_Transform_Sha512+0x140a>
 800fef8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800fefc:	921e      	str	r2, [sp, #120]	; 0x78
 800fefe:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 800ff02:	920e      	str	r2, [sp, #56]	; 0x38
 800ff04:	f7ff bb23 	b.w	800f54e <_Transform_Sha512+0x15de>
        R(12); R(13); R(14); R(15);
 800ff08:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800ff0c:	9113      	str	r1, [sp, #76]	; 0x4c
 800ff0e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800ff12:	f7ff bbfd 	b.w	800f710 <_Transform_Sha512+0x17a0>
 800ff16:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 800ff1a:	921f      	str	r2, [sp, #124]	; 0x7c
 800ff1c:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 800ff20:	920f      	str	r2, [sp, #60]	; 0x3c
 800ff22:	e4da      	b.n	800f8da <_Transform_Sha512+0x196a>
 800ff24:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 800ff28:	9220      	str	r2, [sp, #128]	; 0x80
 800ff2a:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800ff2e:	9210      	str	r2, [sp, #64]	; 0x40
 800ff30:	e5b1      	b.n	800fa96 <_Transform_Sha512+0x1b26>
 800ff32:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 800ff36:	9221      	str	r2, [sp, #132]	; 0x84
 800ff38:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 800ff3c:	9211      	str	r2, [sp, #68]	; 0x44
 800ff3e:	e68b      	b.n	800fc58 <_Transform_Sha512+0x1ce8>
 800ff40:	f803 1b01 	strb.w	r1, [r3], #1
 800ff44:	e789      	b.n	800fe5a <_Transform_Sha512+0x1eea>
 800ff46:	7011      	strb	r1, [r2, #0]
 800ff48:	e78b      	b.n	800fe62 <_Transform_Sha512+0x1ef2>
        return MEMORY_E;
 800ff4a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800ff4e:	e792      	b.n	800fe76 <_Transform_Sha512+0x1f06>

0800ff50 <Sha512_Family_Final>:
    return Sha512FinalRaw(sha512, hash, WC_SHA512_DIGEST_SIZE);
}

static int Sha512_Family_Final(wc_Sha512* sha512, byte* hash, size_t digestSz,
                               int (*initfp)(wc_Sha512*))
{
 800ff50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff54:	460e      	mov	r6, r1
 800ff56:	4690      	mov	r8, r2
 800ff58:	461f      	mov	r7, r3
    int ret;

    if (sha512 == NULL || hash == NULL) {
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d061      	beq.n	8010024 <Sha512_Family_Final+0xd4>
 800ff60:	2900      	cmp	r1, #0
 800ff62:	d05f      	beq.n	8010024 <Sha512_Family_Final+0xd4>
    if (sha512->buffLen > WC_SHA512_BLOCK_SIZE - 1) {
 800ff64:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800ff68:	2b7f      	cmp	r3, #127	; 0x7f
    local = (byte*)sha512->buffer;
 800ff6a:	f100 0940 	add.w	r9, r0, #64	; 0x40
    if (sha512->buffLen > WC_SHA512_BLOCK_SIZE - 1) {
 800ff6e:	d85d      	bhi.n	801002c <Sha512_Family_Final+0xdc>
    local[sha512->buffLen++] = 0x80;  /* add 1 */
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	2580      	movs	r5, #128	; 0x80
 800ff74:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800ff78:	f809 5003 	strb.w	r5, [r9, r3]
    if (sha512->buffLen > WC_SHA512_PAD_SIZE) {
 800ff7c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800ff80:	2870      	cmp	r0, #112	; 0x70
 800ff82:	d912      	bls.n	800ffaa <Sha512_Family_Final+0x5a>
        XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 800ff84:	1a2a      	subs	r2, r5, r0
 800ff86:	2100      	movs	r1, #0
 800ff88:	4448      	add	r0, r9
 800ff8a:	f00b f851 	bl	801b030 <memset>
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 800ff8e:	4648      	mov	r0, r9
        sha512->buffLen += WC_SHA512_BLOCK_SIZE - sha512->buffLen;
 800ff90:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 800ff94:	462a      	mov	r2, r5
 800ff96:	4649      	mov	r1, r9
 800ff98:	f7fd ffda 	bl	800df50 <ByteReverseWords64>
        ret = Transform_Sha512(sha512);
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f7fd ffe7 	bl	800df70 <_Transform_Sha512>
        if (ret != 0)
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d140      	bne.n	8010028 <Sha512_Family_Final+0xd8>
        sha512->buffLen = 0;
 800ffa6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_PAD_SIZE - sha512->buffLen);
 800ffaa:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 800ffae:	2100      	movs	r1, #0
 800ffb0:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 800ffb4:	4448      	add	r0, r9
 800ffb6:	f00b f83b 	bl	801b030 <memset>
                                                         (sha512->hiLen << 3);
 800ffba:	e9d4 5334 	ldrd	r5, r3, [r4, #208]	; 0xd0
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800ffbe:	e9d4 1232 	ldrd	r1, r2, [r4, #200]	; 0xc8
                                                         (sha512->hiLen << 3);
 800ffc2:	00db      	lsls	r3, r3, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800ffc4:	0f50      	lsrs	r0, r2, #29
                                                         (sha512->hiLen << 3);
 800ffc6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800ffca:	00ed      	lsls	r5, r5, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800ffcc:	182d      	adds	r5, r5, r0
    sha512->loLen = sha512->loLen << 3;
 800ffce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800ffd2:	f143 0300 	adc.w	r3, r3, #0
    sha512->loLen = sha512->loLen << 3;
 800ffd6:	ea42 7251 	orr.w	r2, r2, r1, lsr #29
 800ffda:	00c9      	lsls	r1, r1, #3
 800ffdc:	e9c4 1232 	strd	r1, r2, [r4, #200]	; 0xc8
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 800ffe0:	e9c4 5334 	strd	r5, r3, [r4, #208]	; 0xd0
            ByteReverseWords64(sha512->buffer, sha512->buffer, WC_SHA512_PAD_SIZE);
 800ffe4:	2270      	movs	r2, #112	; 0x70
 800ffe6:	4648      	mov	r0, r9
 800ffe8:	4649      	mov	r1, r9
 800ffea:	f7fd ffb1 	bl	800df50 <ByteReverseWords64>
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
 800ffee:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	; 0xd0
 800fff2:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 800fff6:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
    ret = Transform_Sha512(sha512);
 800fffa:	4620      	mov	r0, r4
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 800fffc:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
    ret = Transform_Sha512(sha512);
 8010000:	f7fd ffb6 	bl	800df70 <_Transform_Sha512>
    if (ret != 0)
 8010004:	b980      	cbnz	r0, 8010028 <Sha512_Family_Final+0xd8>
        ByteReverseWords64(sha512->digest, sha512->digest, WC_SHA512_DIGEST_SIZE);
 8010006:	4621      	mov	r1, r4
 8010008:	4620      	mov	r0, r4
 801000a:	2240      	movs	r2, #64	; 0x40
 801000c:	f7fd ffa0 	bl	800df50 <ByteReverseWords64>

    ret = Sha512Final(sha512);
    if (ret != 0)
        return ret;

    XMEMCPY(hash, sha512->digest, digestSz);
 8010010:	4642      	mov	r2, r8
 8010012:	4621      	mov	r1, r4
 8010014:	4630      	mov	r0, r6
 8010016:	f00a ffe3 	bl	801afe0 <memcpy>

    /* initialize Sha512 structure for the next use */
    return initfp(sha512);
 801001a:	4620      	mov	r0, r4
 801001c:	463b      	mov	r3, r7
}
 801001e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return initfp(sha512);
 8010022:	4718      	bx	r3
        return BAD_FUNC_ARG;
 8010024:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8010028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_STATE_E;
 801002c:	f06f 00bf 	mvn.w	r0, #191	; 0xbf
 8010030:	e7fa      	b.n	8010028 <Sha512_Family_Final+0xd8>
	...

08010034 <wc_Sha512Final>:

int wc_Sha512Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_DIGEST_SIZE, InitSha512);
 8010034:	4b01      	ldr	r3, [pc, #4]	; (801003c <wc_Sha512Final+0x8>)
 8010036:	2240      	movs	r2, #64	; 0x40
 8010038:	f7ff bf8a 	b.w	800ff50 <Sha512_Family_Final>
 801003c:	0800dd29 	.word	0x0800dd29

08010040 <wc_Sha512_224Final>:
    return Sha512FinalRaw(sha, hash, WC_SHA512_224_DIGEST_SIZE);
}

int wc_Sha512_224Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_224_DIGEST_SIZE,
 8010040:	4b01      	ldr	r3, [pc, #4]	; (8010048 <wc_Sha512_224Final+0x8>)
 8010042:	221c      	movs	r2, #28
 8010044:	f7ff bf84 	b.w	800ff50 <Sha512_Family_Final>
 8010048:	0800dde1 	.word	0x0800dde1

0801004c <wc_Sha512_256Final>:
    return Sha512FinalRaw(sha, hash, WC_SHA512_256_DIGEST_SIZE);
}

int wc_Sha512_256Final(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_Final(sha512, hash, WC_SHA512_256_DIGEST_SIZE,
 801004c:	4b01      	ldr	r3, [pc, #4]	; (8010054 <wc_Sha512_256Final+0x8>)
 801004e:	2220      	movs	r2, #32
 8010050:	f7ff bf7e 	b.w	800ff50 <Sha512_Family_Final>
 8010054:	0800de99 	.word	0x0800de99

08010058 <wc_InitSha512_ex>:
    if (sha512 == NULL) {
 8010058:	b118      	cbz	r0, 8010062 <wc_InitSha512_ex+0xa>
    sha512->heap = heap;
 801005a:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 801005e:	f7fd be63 	b.w	800dd28 <InitSha512>
}
 8010062:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010066:	4770      	bx	lr

08010068 <wc_InitSha512_224_ex>:
    if (sha512 == NULL) {
 8010068:	b118      	cbz	r0, 8010072 <wc_InitSha512_224_ex+0xa>
    sha512->heap = heap;
 801006a:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 801006e:	f7fd beb7 	b.w	800dde0 <InitSha512_224>
}
 8010072:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010076:	4770      	bx	lr

08010078 <wc_InitSha512_256_ex>:
    if (sha512 == NULL) {
 8010078:	b118      	cbz	r0, 8010082 <wc_InitSha512_256_ex+0xa>
    sha512->heap = heap;
 801007a:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
    ret = initfp(sha512);
 801007e:	f7fd bf0b 	b.w	800de98 <InitSha512_256>
}
 8010082:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010086:	4770      	bx	lr

08010088 <wc_Sha512Update>:
{
 8010088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801008c:	460e      	mov	r6, r1
 801008e:	4614      	mov	r4, r2
    if (sha512 == NULL || (data == NULL && len > 0)) {
 8010090:	4605      	mov	r5, r0
 8010092:	2800      	cmp	r0, #0
 8010094:	d05c      	beq.n	8010150 <wc_Sha512Update+0xc8>
 8010096:	b909      	cbnz	r1, 801009c <wc_Sha512Update+0x14>
 8010098:	2a00      	cmp	r2, #0
 801009a:	d159      	bne.n	8010150 <wc_Sha512Update+0xc8>
    if (sha512->buffLen >= WC_SHA512_BLOCK_SIZE)
 801009c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 80100a0:	287f      	cmp	r0, #127	; 0x7f
 80100a2:	d858      	bhi.n	8010156 <wc_Sha512Update+0xce>
    if (len == 0)
 80100a4:	b90c      	cbnz	r4, 80100aa <wc_Sha512Update+0x22>
        sha512->buffLen = len;
 80100a6:	2000      	movs	r0, #0
 80100a8:	e050      	b.n	801014c <wc_Sha512Update+0xc4>
    if ( (sha512->loLen += len) < tmp)
 80100aa:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	; 0xc8
 80100ae:	191b      	adds	r3, r3, r4
 80100b0:	f152 0200 	adcs.w	r2, r2, #0
 80100b4:	f04f 0100 	mov.w	r1, #0
 80100b8:	bf28      	it	cs
 80100ba:	2101      	movcs	r1, #1
 80100bc:	e9c5 3232 	strd	r3, r2, [r5, #200]	; 0xc8
 80100c0:	b131      	cbz	r1, 80100d0 <wc_Sha512Update+0x48>
        sha512->hiLen++;                       /* carry low to high */
 80100c2:	e9d5 3234 	ldrd	r3, r2, [r5, #208]	; 0xd0
 80100c6:	3301      	adds	r3, #1
 80100c8:	f142 0200 	adc.w	r2, r2, #0
 80100cc:	e9c5 3234 	strd	r3, r2, [r5, #208]	; 0xd0
    byte* local = (byte*)sha512->buffer;
 80100d0:	f105 0740 	add.w	r7, r5, #64	; 0x40
    if (sha512->buffLen > 0) {
 80100d4:	b1e8      	cbz	r0, 8010112 <wc_Sha512Update+0x8a>
        word32 add = min(len, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 80100d6:	f1c0 0880 	rsb	r8, r0, #128	; 0x80
        return a > b ? b : a;
 80100da:	45a0      	cmp	r8, r4
 80100dc:	bf28      	it	cs
 80100de:	46a0      	movcs	r8, r4
            XMEMCPY(&local[sha512->buffLen], data, add);
 80100e0:	4642      	mov	r2, r8
 80100e2:	4631      	mov	r1, r6
 80100e4:	4438      	add	r0, r7
 80100e6:	f00a ff7b 	bl	801afe0 <memcpy>
            sha512->buffLen += add;
 80100ea:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 80100ee:	4442      	add	r2, r8
        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 80100f0:	2a80      	cmp	r2, #128	; 0x80
            sha512->buffLen += add;
 80100f2:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
            data            += add;
 80100f6:	4446      	add	r6, r8
            len             -= add;
 80100f8:	eba4 0408 	sub.w	r4, r4, r8
        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 80100fc:	d109      	bne.n	8010112 <wc_Sha512Update+0x8a>
                ByteReverseWords64(sha512->buffer, sha512->buffer,
 80100fe:	4638      	mov	r0, r7
 8010100:	4639      	mov	r1, r7
 8010102:	f7fd ff25 	bl	800df50 <ByteReverseWords64>
            ret = Transform_Sha512(sha512);
 8010106:	4628      	mov	r0, r5
 8010108:	f7fd ff32 	bl	800df70 <_Transform_Sha512>
            if (ret == 0)
 801010c:	b9f0      	cbnz	r0, 801014c <wc_Sha512Update+0xc4>
                sha512->buffLen = 0;
 801010e:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8010112:	4426      	add	r6, r4
        while (len >= WC_SHA512_BLOCK_SIZE) {
 8010114:	2c7f      	cmp	r4, #127	; 0x7f
 8010116:	eba6 0104 	sub.w	r1, r6, r4
 801011a:	d808      	bhi.n	801012e <wc_Sha512Update+0xa6>
    if (ret == 0 && len > 0) {
 801011c:	2c00      	cmp	r4, #0
 801011e:	d0c2      	beq.n	80100a6 <wc_Sha512Update+0x1e>
        XMEMCPY(local, data, len);
 8010120:	4622      	mov	r2, r4
 8010122:	4638      	mov	r0, r7
 8010124:	f00a ff5c 	bl	801afe0 <memcpy>
        sha512->buffLen = len;
 8010128:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 801012c:	e7bb      	b.n	80100a6 <wc_Sha512Update+0x1e>
            XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 801012e:	2280      	movs	r2, #128	; 0x80
 8010130:	4638      	mov	r0, r7
 8010132:	f00a ff55 	bl	801afe0 <memcpy>
            ByteReverseWords64(sha512->buffer, sha512->buffer,
 8010136:	4638      	mov	r0, r7
 8010138:	2280      	movs	r2, #128	; 0x80
 801013a:	4639      	mov	r1, r7
 801013c:	f7fd ff08 	bl	800df50 <ByteReverseWords64>
            ret = Transform_Sha512(sha512);
 8010140:	4628      	mov	r0, r5
            len  -= WC_SHA512_BLOCK_SIZE;
 8010142:	3c80      	subs	r4, #128	; 0x80
            ret = Transform_Sha512(sha512);
 8010144:	f7fd ff14 	bl	800df70 <_Transform_Sha512>
            if (ret != 0)
 8010148:	2800      	cmp	r0, #0
 801014a:	d0e3      	beq.n	8010114 <wc_Sha512Update+0x8c>
}
 801014c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BAD_FUNC_ARG;
 8010150:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010154:	e7fa      	b.n	801014c <wc_Sha512Update+0xc4>
        return BUFFER_E;
 8010156:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801015a:	e7f7      	b.n	801014c <wc_Sha512Update+0xc4>

0801015c <wc_InitSha512>:
    return wc_InitSha512_ex(sha512, NULL, devId);
 801015c:	f06f 0201 	mvn.w	r2, #1
 8010160:	2100      	movs	r1, #0
 8010162:	f7ff bf79 	b.w	8010058 <wc_InitSha512_ex>

08010166 <wc_Sha512Free>:
    if (sha512 == NULL)
 8010166:	b120      	cbz	r0, 8010172 <wc_Sha512Free+0xc>
 8010168:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    while (len--) *z++ = 0;
 801016c:	2200      	movs	r2, #0
 801016e:	4298      	cmp	r0, r3
 8010170:	d100      	bne.n	8010174 <wc_Sha512Free+0xe>
}
 8010172:	4770      	bx	lr
 8010174:	f800 2b01 	strb.w	r2, [r0], #1
 8010178:	e7f9      	b.n	801016e <wc_Sha512Free+0x8>

0801017a <wc_Sha512Copy>:
{
 801017a:	b508      	push	{r3, lr}
 801017c:	460b      	mov	r3, r1
    if (src == NULL || dst == NULL) {
 801017e:	4601      	mov	r1, r0
 8010180:	b130      	cbz	r0, 8010190 <wc_Sha512Copy+0x16>
 8010182:	b12b      	cbz	r3, 8010190 <wc_Sha512Copy+0x16>
    XMEMCPY(dst, src, sizeof(wc_Sha512));
 8010184:	22e0      	movs	r2, #224	; 0xe0
 8010186:	4618      	mov	r0, r3
 8010188:	f00a ff2a 	bl	801afe0 <memcpy>
    return ret;
 801018c:	2000      	movs	r0, #0
}
 801018e:	bd08      	pop	{r3, pc}
        return BAD_FUNC_ARG;
 8010190:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010194:	e7fb      	b.n	801018e <wc_Sha512Copy+0x14>

08010196 <Sha512_Family_GetHash>:
{
 8010196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010198:	460e      	mov	r6, r1
 801019a:	4617      	mov	r7, r2
    if (sha512 == NULL || hash == NULL) {
 801019c:	4604      	mov	r4, r0
 801019e:	b1b8      	cbz	r0, 80101d0 <Sha512_Family_GetHash+0x3a>
 80101a0:	b1b1      	cbz	r1, 80101d0 <Sha512_Family_GetHash+0x3a>
    tmpSha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 80101a2:	20e0      	movs	r0, #224	; 0xe0
 80101a4:	f00a fefc 	bl	801afa0 <malloc>
    if (tmpSha512 == NULL) {
 80101a8:	4605      	mov	r5, r0
 80101aa:	b1a0      	cbz	r0, 80101d6 <Sha512_Family_GetHash+0x40>
    ret = wc_Sha512Copy(sha512, tmpSha512);
 80101ac:	4601      	mov	r1, r0
 80101ae:	4620      	mov	r0, r4
 80101b0:	f7ff ffe3 	bl	801017a <wc_Sha512Copy>
    if (ret == 0) {
 80101b4:	4604      	mov	r4, r0
 80101b6:	b930      	cbnz	r0, 80101c6 <Sha512_Family_GetHash+0x30>
        ret = finalfp(tmpSha512, hash);
 80101b8:	4631      	mov	r1, r6
 80101ba:	4628      	mov	r0, r5
 80101bc:	47b8      	blx	r7
 80101be:	4604      	mov	r4, r0
        wc_Sha512Free(tmpSha512);
 80101c0:	4628      	mov	r0, r5
 80101c2:	f7ff ffd0 	bl	8010166 <wc_Sha512Free>
    XFREE(tmpSha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80101c6:	4628      	mov	r0, r5
 80101c8:	f00a fef2 	bl	801afb0 <free>
}
 80101cc:	4620      	mov	r0, r4
 80101ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 80101d0:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80101d4:	e7fa      	b.n	80101cc <Sha512_Family_GetHash+0x36>
        return MEMORY_E;
 80101d6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80101da:	e7f7      	b.n	80101cc <Sha512_Family_GetHash+0x36>

080101dc <wc_Sha512GetHash>:
    return Sha512_Family_GetHash(sha512, hash, wc_Sha512Final);
 80101dc:	4a01      	ldr	r2, [pc, #4]	; (80101e4 <wc_Sha512GetHash+0x8>)
 80101de:	f7ff bfda 	b.w	8010196 <Sha512_Family_GetHash>
 80101e2:	bf00      	nop
 80101e4:	08010035 	.word	0x08010035

080101e8 <wc_InitSha512_224>:
    return wc_InitSha512_224_ex(sha, NULL, INVALID_DEVID);
 80101e8:	f06f 0201 	mvn.w	r2, #1
 80101ec:	2100      	movs	r1, #0
 80101ee:	f7ff bf3b 	b.w	8010068 <wc_InitSha512_224_ex>

080101f2 <wc_Sha512_224Update>:
    return wc_Sha512Update(sha, data, len);
 80101f2:	f7ff bf49 	b.w	8010088 <wc_Sha512Update>

080101f6 <wc_Sha512_224Free>:
    wc_Sha512Free(sha);
 80101f6:	f7ff bfb6 	b.w	8010166 <wc_Sha512Free>
	...

080101fc <wc_Sha512_224GetHash>:
    return Sha512_Family_GetHash(sha512, hash, wc_Sha512_224Final);
 80101fc:	4a01      	ldr	r2, [pc, #4]	; (8010204 <wc_Sha512_224GetHash+0x8>)
 80101fe:	f7ff bfca 	b.w	8010196 <Sha512_Family_GetHash>
 8010202:	bf00      	nop
 8010204:	08010041 	.word	0x08010041

08010208 <wc_Sha512_224Copy>:
    return wc_Sha512Copy(src, dst);
 8010208:	f7ff bfb7 	b.w	801017a <wc_Sha512Copy>

0801020c <wc_InitSha512_256>:
    return wc_InitSha512_256_ex(sha, NULL, INVALID_DEVID);
 801020c:	f06f 0201 	mvn.w	r2, #1
 8010210:	2100      	movs	r1, #0
 8010212:	f7ff bf31 	b.w	8010078 <wc_InitSha512_256_ex>

08010216 <wc_Sha512_256Update>:
 8010216:	f7ff bf37 	b.w	8010088 <wc_Sha512Update>

0801021a <wc_Sha512_256Free>:
 801021a:	f7ff bfa4 	b.w	8010166 <wc_Sha512Free>
	...

08010220 <wc_Sha512_256GetHash>:
    /* functions defined in wolfcrypt/src/port/Renesas/renesas_fspsm_sha.c */

#else
int wc_Sha512_256GetHash(wc_Sha512* sha512, byte* hash)
{
    return Sha512_Family_GetHash(sha512, hash, wc_Sha512_256Final);
 8010220:	4a01      	ldr	r2, [pc, #4]	; (8010228 <wc_Sha512_256GetHash+0x8>)
 8010222:	f7ff bfb8 	b.w	8010196 <Sha512_Family_GetHash>
 8010226:	bf00      	nop
 8010228:	0801004d 	.word	0x0801004d

0801022c <wc_Sha512_256Copy>:
 801022c:	f7ff bfa5 	b.w	801017a <wc_Sha512Copy>

08010230 <GetTime>:

#ifndef NO_ASN_TIME

/* two byte date/time, add to value */
static WC_INLINE int GetTime(int* value, const byte* date, int* idx)
{
 8010230:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i = *idx;
 8010232:	6813      	ldr	r3, [r2, #0]

    if (date[i] < 0x30 || date[i] > 0x39 || date[i+1] < 0x30 ||
 8010234:	5ccc      	ldrb	r4, [r1, r3]
 8010236:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 801023a:	b2ec      	uxtb	r4, r5
 801023c:	2c09      	cmp	r4, #9
 801023e:	d811      	bhi.n	8010264 <GetTime+0x34>
 8010240:	1c5e      	adds	r6, r3, #1
 8010242:	5d8c      	ldrb	r4, [r1, r6]
 8010244:	3c30      	subs	r4, #48	; 0x30
 8010246:	2c09      	cmp	r4, #9
 8010248:	d80c      	bhi.n	8010264 <GetTime+0x34>
                                                             date[i+1] > 0x39) {
        return ASN_PARSE_E;
    }

    *value += (int)btoi(date[i++]) * 10;
 801024a:	6804      	ldr	r4, [r0, #0]
 801024c:	270a      	movs	r7, #10
 801024e:	fb07 4405 	mla	r4, r7, r5, r4
 8010252:	6004      	str	r4, [r0, #0]
}


WC_MISC_STATIC WC_INLINE word32 btoi(byte b)
{
    return (word32)(b - 0x30);
 8010254:	5d89      	ldrb	r1, [r1, r6]
 8010256:	3930      	subs	r1, #48	; 0x30
    *value += (int)btoi(date[i++]);
 8010258:	4421      	add	r1, r4
 801025a:	3302      	adds	r3, #2
 801025c:	6001      	str	r1, [r0, #0]

    *idx = i;
 801025e:	6013      	str	r3, [r2, #0]

    return 0;
 8010260:	2000      	movs	r0, #0
}
 8010262:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ASN_PARSE_E;
 8010264:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8010268:	e7fb      	b.n	8010262 <GetTime+0x32>

0801026a <trim_leading_zeros>:
    if (sz > 0)
        c = input[0];
    return (c & 0x80) != 0;
}
static word32 trim_leading_zeros(const byte** input, word32 sz)
{
 801026a:	b530      	push	{r4, r5, lr}
    int i;
    word32 leadingZeroCount = 0;
    const byte* tmp = *input;
 801026c:	6802      	ldr	r2, [r0, #0]
    for (i=0; i<(int)sz; i++) {
 801026e:	2300      	movs	r3, #0
 8010270:	4299      	cmp	r1, r3
 8010272:	461c      	mov	r4, r3
 8010274:	dd01      	ble.n	801027a <trim_leading_zeros+0x10>
        if (tmp[i] != 0)
 8010276:	5cd5      	ldrb	r5, [r2, r3]
 8010278:	b125      	cbz	r5, 8010284 <trim_leading_zeros+0x1a>
            break;
        leadingZeroCount++;
    }
    /* catch all zero case */
    if (sz > 0 && leadingZeroCount == sz) {
 801027a:	b929      	cbnz	r1, 8010288 <trim_leading_zeros+0x1e>
        leadingZeroCount--;
    }
    *input += leadingZeroCount;
 801027c:	4422      	add	r2, r4
 801027e:	6002      	str	r2, [r0, #0]
    sz -= leadingZeroCount;
    return sz;
}
 8010280:	1b08      	subs	r0, r1, r4
 8010282:	bd30      	pop	{r4, r5, pc}
    for (i=0; i<(int)sz; i++) {
 8010284:	3301      	adds	r3, #1
 8010286:	e7f3      	b.n	8010270 <trim_leading_zeros+0x6>
    if (sz > 0 && leadingZeroCount == sz) {
 8010288:	4299      	cmp	r1, r3
        leadingZeroCount--;
 801028a:	bf08      	it	eq
 801028c:	f101 34ff 	addeq.w	r4, r1, #4294967295	; 0xffffffff
 8010290:	e7f4      	b.n	801027c <trim_leading_zeros+0x12>

08010292 <CheckCurve>:
{
 8010292:	b507      	push	{r0, r1, r2, lr}
    ret = wc_ecc_get_oid(oid, NULL, &oidSz);
 8010294:	2100      	movs	r1, #0
 8010296:	aa01      	add	r2, sp, #4
 8010298:	f7fc f812 	bl	800c2c0 <wc_ecc_get_oid>
    if ((ret < 0) || (oidSz == 0)) {
 801029c:	2800      	cmp	r0, #0
 801029e:	db07      	blt.n	80102b0 <CheckCurve+0x1e>
 80102a0:	9b01      	ldr	r3, [sp, #4]
        ret = ECC_CURVE_OID_E;
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	bf08      	it	eq
 80102a6:	f06f 00ab 	mvneq.w	r0, #171	; 0xab
}
 80102aa:	b003      	add	sp, #12
 80102ac:	f85d fb04 	ldr.w	pc, [sp], #4
        ret = ECC_CURVE_OID_E;
 80102b0:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 80102b4:	e7f9      	b.n	80102aa <CheckCurve+0x18>

080102b6 <GetLength_ex>:
{
 80102b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    word32  idx = (word32)*inOutIdx;
 80102b8:	680f      	ldr	r7, [r1, #0]
    if ((idx + 1) > maxIdx) {
 80102ba:	1c7e      	adds	r6, r7, #1
    *len = 0;
 80102bc:	2400      	movs	r4, #0
    if ((idx + 1) > maxIdx) {
 80102be:	429e      	cmp	r6, r3
{
 80102c0:	4605      	mov	r5, r0
    *len = 0;
 80102c2:	6014      	str	r4, [r2, #0]
    if ((idx + 1) > maxIdx) {
 80102c4:	d82f      	bhi.n	8010326 <GetLength_ex+0x70>
    if (b >= ASN_LONG_LENGTH) {
 80102c6:	57ed      	ldrsb	r5, [r5, r7]
 80102c8:	42a5      	cmp	r5, r4
    b = input[idx++];
 80102ca:	eb00 0c07 	add.w	ip, r0, r7
 80102ce:	5dc0      	ldrb	r0, [r0, r7]
    if (b >= ASN_LONG_LENGTH) {
 80102d0:	da15      	bge.n	80102fe <GetLength_ex+0x48>
        if (b == ASN_INDEF_LENGTH) {
 80102d2:	2880      	cmp	r0, #128	; 0x80
 80102d4:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80102d8:	d007      	beq.n	80102ea <GetLength_ex+0x34>
        else if (bytes == 1) {
 80102da:	2d01      	cmp	r5, #1
 80102dc:	d019      	beq.n	8010312 <GetLength_ex+0x5c>
        else if (bytes > sizeof(length)) {
 80102de:	2d04      	cmp	r5, #4
 80102e0:	d81e      	bhi.n	8010320 <GetLength_ex+0x6a>
            minLen = 1 << ((bytes - 1) * 8);
 80102e2:	1e6c      	subs	r4, r5, #1
 80102e4:	00e0      	lsls	r0, r4, #3
 80102e6:	2401      	movs	r4, #1
 80102e8:	4084      	lsls	r4, r0
        if ((idx + bytes) > maxIdx) {
 80102ea:	442e      	add	r6, r5
 80102ec:	429e      	cmp	r6, r3
 80102ee:	d81a      	bhi.n	8010326 <GetLength_ex+0x70>
    int     length = 0;
 80102f0:	2000      	movs	r0, #0
        while (bytes--) {
 80102f2:	3d01      	subs	r5, #1
 80102f4:	d20f      	bcs.n	8010316 <GetLength_ex+0x60>
        if (length < 0) {
 80102f6:	2800      	cmp	r0, #0
 80102f8:	db12      	blt.n	8010320 <GetLength_ex+0x6a>
        if (length < minLen) {
 80102fa:	42a0      	cmp	r0, r4
 80102fc:	db10      	blt.n	8010320 <GetLength_ex+0x6a>
    if (check && ((idx + (word32)length) > maxIdx)) {
 80102fe:	9c05      	ldr	r4, [sp, #20]
 8010300:	b114      	cbz	r4, 8010308 <GetLength_ex+0x52>
 8010302:	1984      	adds	r4, r0, r6
 8010304:	429c      	cmp	r4, r3
 8010306:	d80e      	bhi.n	8010326 <GetLength_ex+0x70>
    if (length > 0) {
 8010308:	2800      	cmp	r0, #0
    *inOutIdx = idx;
 801030a:	600e      	str	r6, [r1, #0]
    if (length > 0) {
 801030c:	dd00      	ble.n	8010310 <GetLength_ex+0x5a>
        *len = length;
 801030e:	6010      	str	r0, [r2, #0]
}
 8010310:	bdf0      	pop	{r4, r5, r6, r7, pc}
            minLen = 0x80;
 8010312:	2480      	movs	r4, #128	; 0x80
 8010314:	e7e9      	b.n	80102ea <GetLength_ex+0x34>
            length = (length << 8) | b;
 8010316:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801031a:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
 801031e:	e7e8      	b.n	80102f2 <GetLength_ex+0x3c>
            return ASN_PARSE_E;
 8010320:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8010324:	e7f4      	b.n	8010310 <GetLength_ex+0x5a>
        return BUFFER_E;
 8010326:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801032a:	e7f1      	b.n	8010310 <GetLength_ex+0x5a>

0801032c <GetLength>:
{
 801032c:	b513      	push	{r0, r1, r4, lr}
    return GetLength_ex(input, inOutIdx, len, maxIdx, 1);
 801032e:	2401      	movs	r4, #1
 8010330:	9400      	str	r4, [sp, #0]
 8010332:	f7ff ffc0 	bl	80102b6 <GetLength_ex>
}
 8010336:	b002      	add	sp, #8
 8010338:	bd10      	pop	{r4, pc}

0801033a <GetDateInfo>:
{
 801033a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801033e:	461f      	mov	r7, r3
 8010340:	460c      	mov	r4, r1
 8010342:	e9dd 830a 	ldrd	r8, r3, [sp, #40]	; 0x28
 8010346:	4616      	mov	r6, r2
    if (source == NULL || idx == NULL)
 8010348:	4605      	mov	r5, r0
 801034a:	b348      	cbz	r0, 80103a0 <GetDateInfo+0x66>
    if (*idx+1 > maxIdx)
 801034c:	f8d1 c000 	ldr.w	ip, [r1]
 8010350:	f10c 0201 	add.w	r2, ip, #1
 8010354:	429a      	cmp	r2, r3
 8010356:	d826      	bhi.n	80103a6 <GetDateInfo+0x6c>
    format = source[*idx];
 8010358:	f810 900c 	ldrb.w	r9, [r0, ip]
    *idx += 1;
 801035c:	600a      	str	r2, [r1, #0]
    if (format != ASN_UTC_TIME && format != ASN_GENERALIZED_TIME) {
 801035e:	f1a9 0217 	sub.w	r2, r9, #23
 8010362:	2a01      	cmp	r2, #1
 8010364:	d822      	bhi.n	80103ac <GetDateInfo+0x72>
    if (GetLength(source, idx, &length, maxIdx) < 0)
 8010366:	aa01      	add	r2, sp, #4
 8010368:	f7ff ffe0 	bl	801032c <GetLength>
 801036c:	2800      	cmp	r0, #0
 801036e:	db20      	blt.n	80103b2 <GetDateInfo+0x78>
    if (length > MAX_DATE_SIZE || length < MIN_DATE_SIZE)
 8010370:	9a01      	ldr	r2, [sp, #4]
 8010372:	f1a2 030c 	sub.w	r3, r2, #12
 8010376:	2b14      	cmp	r3, #20
 8010378:	d81e      	bhi.n	80103b8 <GetDateInfo+0x7e>
    if (pFormat)
 801037a:	b10f      	cbz	r7, 8010380 <GetDateInfo+0x46>
        *pFormat = format;
 801037c:	f887 9000 	strb.w	r9, [r7]
    if (pDate)
 8010380:	b116      	cbz	r6, 8010388 <GetDateInfo+0x4e>
        *pDate = &source[*idx];
 8010382:	6820      	ldr	r0, [r4, #0]
 8010384:	4405      	add	r5, r0
 8010386:	6035      	str	r5, [r6, #0]
    if (pLength)
 8010388:	f1b8 0f00 	cmp.w	r8, #0
 801038c:	d001      	beq.n	8010392 <GetDateInfo+0x58>
        *pLength = length;
 801038e:	f8c8 2000 	str.w	r2, [r8]
    *idx += (word32)length;
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	4413      	add	r3, r2
 8010396:	6023      	str	r3, [r4, #0]
    return 0;
 8010398:	2000      	movs	r0, #0
}
 801039a:	b003      	add	sp, #12
 801039c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BAD_FUNC_ARG;
 80103a0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80103a4:	e7f9      	b.n	801039a <GetDateInfo+0x60>
        return BUFFER_E;
 80103a6:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80103aa:	e7f6      	b.n	801039a <GetDateInfo+0x60>
        return ASN_TIME_E;
 80103ac:	f06f 0098 	mvn.w	r0, #152	; 0x98
 80103b0:	e7f3      	b.n	801039a <GetDateInfo+0x60>
        return ASN_PARSE_E;
 80103b2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 80103b6:	e7f0      	b.n	801039a <GetDateInfo+0x60>
        return ASN_DATE_SZ_E;
 80103b8:	f06f 0094 	mvn.w	r0, #148	; 0x94
 80103bc:	e7ed      	b.n	801039a <GetDateInfo+0x60>

080103be <GetASNTag>:
{
 80103be:	b530      	push	{r4, r5, lr}
    if ((tag == NULL) || (inOutIdx == NULL) || (input == NULL)) {
 80103c0:	b152      	cbz	r2, 80103d8 <GetASNTag+0x1a>
 80103c2:	b149      	cbz	r1, 80103d8 <GetASNTag+0x1a>
 80103c4:	b140      	cbz	r0, 80103d8 <GetASNTag+0x1a>
        idx = *inOutIdx;
 80103c6:	680d      	ldr	r5, [r1, #0]
        if (idx + ASN_TAG_SZ > maxIdx) {
 80103c8:	1c6c      	adds	r4, r5, #1
 80103ca:	429c      	cmp	r4, r3
 80103cc:	d807      	bhi.n	80103de <GetASNTag+0x20>
        *tag = input[idx];
 80103ce:	5d43      	ldrb	r3, [r0, r5]
 80103d0:	7013      	strb	r3, [r2, #0]
        *inOutIdx = idx + ASN_TAG_SZ;
 80103d2:	2000      	movs	r0, #0
 80103d4:	600c      	str	r4, [r1, #0]
}
 80103d6:	bd30      	pop	{r4, r5, pc}
        ret = BAD_FUNC_ARG;
 80103d8:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80103dc:	e7fb      	b.n	80103d6 <GetASNTag+0x18>
            ret = BUFFER_E;
 80103de:	f06f 0083 	mvn.w	r0, #131	; 0x83
    return ret;
 80103e2:	e7f8      	b.n	80103d6 <GetASNTag+0x18>

080103e4 <GetASNHeader_ex>:
{
 80103e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e8:	b086      	sub	sp, #24
 80103ea:	461d      	mov	r5, r3
 80103ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    word32 idx = *inOutIdx;
 80103f0:	6813      	ldr	r3, [r2, #0]
 80103f2:	9304      	str	r3, [sp, #16]
    int    length = 0;
 80103f4:	2300      	movs	r3, #0
{
 80103f6:	460f      	mov	r7, r1
 80103f8:	4614      	mov	r4, r2
    int    length = 0;
 80103fa:	9305      	str	r3, [sp, #20]
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 80103fc:	f10d 020f 	add.w	r2, sp, #15
 8010400:	4643      	mov	r3, r8
 8010402:	a904      	add	r1, sp, #16
{
 8010404:	4606      	mov	r6, r0
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 8010406:	f7ff ffda 	bl	80103be <GetASNTag>
 801040a:	b120      	cbz	r0, 8010416 <GetASNHeader_ex+0x32>
{
 801040c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8010410:	b006      	add	sp, #24
 8010412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret == 0) && (tagFound != tag)) {
 8010416:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801041a:	42bb      	cmp	r3, r7
 801041c:	d1f6      	bne.n	801040c <GetASNHeader_ex+0x28>
    if ((ret == 0) && (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)) {
 801041e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	aa05      	add	r2, sp, #20
 8010424:	4643      	mov	r3, r8
 8010426:	4630      	mov	r0, r6
 8010428:	f7ff ff45 	bl	80102b6 <GetLength_ex>
 801042c:	2800      	cmp	r0, #0
 801042e:	dbed      	blt.n	801040c <GetASNHeader_ex+0x28>
        *len      = length;
 8010430:	9805      	ldr	r0, [sp, #20]
        *inOutIdx = idx;
 8010432:	9b04      	ldr	r3, [sp, #16]
        *len      = length;
 8010434:	6028      	str	r0, [r5, #0]
        *inOutIdx = idx;
 8010436:	6023      	str	r3, [r4, #0]
    return ret;
 8010438:	e7ea      	b.n	8010410 <GetASNHeader_ex+0x2c>

0801043a <GetSequence>:
{
 801043a:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 801043c:	2401      	movs	r4, #1
 801043e:	e9cd 3400 	strd	r3, r4, [sp]
 8010442:	4613      	mov	r3, r2
 8010444:	460a      	mov	r2, r1
 8010446:	2130      	movs	r1, #48	; 0x30
 8010448:	f7ff ffcc 	bl	80103e4 <GetASNHeader_ex>
}
 801044c:	b002      	add	sp, #8
 801044e:	bd10      	pop	{r4, pc}

08010450 <GetOctetString>:
{
 8010450:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8010452:	2401      	movs	r4, #1
 8010454:	e9cd 3400 	strd	r3, r4, [sp]
 8010458:	4613      	mov	r3, r2
 801045a:	460a      	mov	r2, r1
 801045c:	2104      	movs	r1, #4
 801045e:	f7ff ffc1 	bl	80103e4 <GetASNHeader_ex>
}
 8010462:	b002      	add	sp, #8
 8010464:	bd10      	pop	{r4, pc}

08010466 <GetASNInt>:
{
 8010466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010468:	4616      	mov	r6, r2
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 801046a:	2201      	movs	r2, #1
 801046c:	e9cd 3200 	strd	r3, r2, [sp]
{
 8010470:	460d      	mov	r5, r1
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8010472:	460a      	mov	r2, r1
 8010474:	4633      	mov	r3, r6
 8010476:	2102      	movs	r1, #2
{
 8010478:	4607      	mov	r7, r0
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 801047a:	f7ff ffb3 	bl	80103e4 <GetASNHeader_ex>
    if (ret < 0)
 801047e:	2800      	cmp	r0, #0
 8010480:	db0f      	blt.n	80104a2 <GetASNInt+0x3c>
    if (*len > 0) {
 8010482:	6832      	ldr	r2, [r6, #0]
 8010484:	2a00      	cmp	r2, #0
 8010486:	dd1a      	ble.n	80104be <GetASNInt+0x58>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 8010488:	682c      	ldr	r4, [r5, #0]
        if (*len > 1) {
 801048a:	2a01      	cmp	r2, #1
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 801048c:	5d3b      	ldrb	r3, [r7, r4]
        if (*len > 1) {
 801048e:	d016      	beq.n	80104be <GetASNInt+0x58>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 8010490:	2bff      	cmp	r3, #255	; 0xff
 8010492:	d108      	bne.n	80104a6 <GetASNInt+0x40>
 8010494:	443c      	add	r4, r7
 8010496:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801049a:	2b00      	cmp	r3, #0
 801049c:	da0f      	bge.n	80104be <GetASNInt+0x58>
                return ASN_PARSE_E;
 801049e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 80104a2:	b003      	add	sp, #12
 80104a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
 80104a6:	b953      	cbnz	r3, 80104be <GetASNInt+0x58>
            (*inOutIdx)++;
 80104a8:	3401      	adds	r4, #1
 80104aa:	602c      	str	r4, [r5, #0]
            (*len)--;
 80104ac:	6833      	ldr	r3, [r6, #0]
 80104ae:	3b01      	subs	r3, #1
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 80104b0:	2b00      	cmp	r3, #0
            (*len)--;
 80104b2:	6033      	str	r3, [r6, #0]
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 80104b4:	dd03      	ble.n	80104be <GetASNInt+0x58>
 80104b6:	682b      	ldr	r3, [r5, #0]
 80104b8:	56fb      	ldrsb	r3, [r7, r3]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	daef      	bge.n	801049e <GetASNInt+0x38>
    return 0;
 80104be:	2000      	movs	r0, #0
 80104c0:	e7ef      	b.n	80104a2 <GetASNInt+0x3c>

080104c2 <GetIntPositive>:
{
 80104c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80104c6:	460c      	mov	r4, r1
 80104c8:	4617      	mov	r7, r2
    word32 idx = *inOutIdx;
 80104ca:	6812      	ldr	r2, [r2, #0]
 80104cc:	9200      	str	r2, [sp, #0]
{
 80104ce:	4606      	mov	r6, r0
    ret = GetASNInt(input, &idx, &length, maxIdx);
 80104d0:	aa01      	add	r2, sp, #4
 80104d2:	4669      	mov	r1, sp
 80104d4:	4620      	mov	r0, r4
{
 80104d6:	9d08      	ldr	r5, [sp, #32]
 80104d8:	4698      	mov	r8, r3
    ret = GetASNInt(input, &idx, &length, maxIdx);
 80104da:	f7ff ffc4 	bl	8010466 <GetASNInt>
    if (ret != 0)
 80104de:	b930      	cbnz	r0, 80104ee <GetIntPositive+0x2c>
    if (idx + length > maxIdx) {
 80104e0:	e9dd 1300 	ldrd	r1, r3, [sp]
 80104e4:	440b      	add	r3, r1
 80104e6:	4543      	cmp	r3, r8
 80104e8:	d904      	bls.n	80104f4 <GetIntPositive+0x32>
        return MP_INIT_E;
 80104ea:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
 80104ee:	b002      	add	sp, #8
 80104f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((input[idx] & 0x80) == 0x80) {
 80104f4:	5663      	ldrsb	r3, [r4, r1]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	da06      	bge.n	8010508 <GetIntPositive+0x46>
        if (idx < 1) {
 80104fa:	2900      	cmp	r1, #0
 80104fc:	d0f5      	beq.n	80104ea <GetIntPositive+0x28>
        if (input[idx - 1] != 0x00) {
 80104fe:	4421      	add	r1, r4
 8010500:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d1f0      	bne.n	80104ea <GetIntPositive+0x28>
    if (initNum) {
 8010508:	b965      	cbnz	r5, 8010524 <GetIntPositive+0x62>
    if (mp_read_unsigned_bin(mpi, input + idx, (word32)length) != 0) {
 801050a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801050e:	4630      	mov	r0, r6
 8010510:	4421      	add	r1, r4
 8010512:	f008 feea 	bl	80192ea <mp_read_unsigned_bin>
 8010516:	b158      	cbz	r0, 8010530 <GetIntPositive+0x6e>
        mp_clear(mpi);
 8010518:	4630      	mov	r0, r6
 801051a:	f008 feb0 	bl	801927e <mp_clear>
        return ASN_GETINT_E;
 801051e:	f06f 008d 	mvn.w	r0, #141	; 0x8d
 8010522:	e7e4      	b.n	80104ee <GetIntPositive+0x2c>
        if (mp_init(mpi) != MP_OKAY)
 8010524:	4630      	mov	r0, r6
 8010526:	f008 fe95 	bl	8019254 <mp_init>
 801052a:	2800      	cmp	r0, #0
 801052c:	d0ed      	beq.n	801050a <GetIntPositive+0x48>
 801052e:	e7dc      	b.n	80104ea <GetIntPositive+0x28>
    *inOutIdx = idx + (word32)length;
 8010530:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010534:	4413      	add	r3, r2
 8010536:	603b      	str	r3, [r7, #0]
    return 0;
 8010538:	e7d9      	b.n	80104ee <GetIntPositive+0x2c>

0801053a <GetMyVersion>:
{
 801053a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801053c:	4614      	mov	r4, r2
    word32 idx = *inOutIdx;
 801053e:	680a      	ldr	r2, [r1, #0]
 8010540:	9201      	str	r2, [sp, #4]
    if ((idx + MIN_VERSION_SZ) > maxIdx)
 8010542:	3203      	adds	r2, #3
 8010544:	429a      	cmp	r2, r3
{
 8010546:	4606      	mov	r6, r0
 8010548:	460d      	mov	r5, r1
    if ((idx + MIN_VERSION_SZ) > maxIdx)
 801054a:	d903      	bls.n	8010554 <GetMyVersion+0x1a>
        return ASN_PARSE_E;
 801054c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8010550:	b002      	add	sp, #8
 8010552:	bd70      	pop	{r4, r5, r6, pc}
    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 8010554:	f10d 0203 	add.w	r2, sp, #3
 8010558:	a901      	add	r1, sp, #4
 801055a:	f7ff ff30 	bl	80103be <GetASNTag>
 801055e:	2800      	cmp	r0, #0
 8010560:	d1f4      	bne.n	801054c <GetMyVersion+0x12>
    if (tag != ASN_INTEGER)
 8010562:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010566:	2b02      	cmp	r3, #2
 8010568:	d1f0      	bne.n	801054c <GetMyVersion+0x12>
    if (input[idx++] != 0x01)
 801056a:	9b01      	ldr	r3, [sp, #4]
 801056c:	5cf1      	ldrb	r1, [r6, r3]
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	2901      	cmp	r1, #1
    *version  = input[idx++];
 8010572:	bf01      	itttt	eq
 8010574:	5cb2      	ldrbeq	r2, [r6, r2]
 8010576:	6022      	streq	r2, [r4, #0]
 8010578:	3302      	addeq	r3, #2
    *inOutIdx = idx;
 801057a:	602b      	streq	r3, [r5, #0]
    return *version;
 801057c:	bf0c      	ite	eq
 801057e:	6820      	ldreq	r0, [r4, #0]
        return ASN_VERSION_E;
 8010580:	f06f 008c 	mvnne.w	r0, #140	; 0x8c
 8010584:	e7e4      	b.n	8010550 <GetMyVersion+0x16>

08010586 <CheckBitString>:
{
 8010586:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801058a:	4616      	mov	r6, r2
    word32 idx = *inOutIdx;
 801058c:	680a      	ldr	r2, [r1, #0]
 801058e:	9202      	str	r2, [sp, #8]
{
 8010590:	4688      	mov	r8, r1
    if (GetASNTag(input, &idx, &b, maxIdx) != 0) {
 8010592:	f10d 0207 	add.w	r2, sp, #7
 8010596:	a902      	add	r1, sp, #8
{
 8010598:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801059c:	4605      	mov	r5, r0
 801059e:	469a      	mov	sl, r3
    if (GetASNTag(input, &idx, &b, maxIdx) != 0) {
 80105a0:	f7ff ff0d 	bl	80103be <GetASNTag>
 80105a4:	4604      	mov	r4, r0
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d138      	bne.n	801061c <CheckBitString+0x96>
    if (b != ASN_BIT_STRING) {
 80105aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80105ae:	2b03      	cmp	r3, #3
 80105b0:	d134      	bne.n	801061c <CheckBitString+0x96>
    if (GetLength(input, &idx, &length, maxIdx) < 0)
 80105b2:	4653      	mov	r3, sl
 80105b4:	aa03      	add	r2, sp, #12
 80105b6:	4628      	mov	r0, r5
 80105b8:	f7ff feb8 	bl	801032c <GetLength>
 80105bc:	2800      	cmp	r0, #0
 80105be:	da05      	bge.n	80105cc <CheckBitString+0x46>
        return ASN_PARSE_E;
 80105c0:	f06f 048b 	mvn.w	r4, #139	; 0x8b
}
 80105c4:	4620      	mov	r0, r4
 80105c6:	b004      	add	sp, #16
 80105c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (length <= 0) {
 80105cc:	9a03      	ldr	r2, [sp, #12]
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	dd27      	ble.n	8010622 <CheckBitString+0x9c>
    if (idx + 1 > maxIdx) {
 80105d2:	9902      	ldr	r1, [sp, #8]
 80105d4:	1c48      	adds	r0, r1, #1
 80105d6:	4550      	cmp	r0, sl
 80105d8:	d823      	bhi.n	8010622 <CheckBitString+0x9c>
    if (zeroBits && b != 0x00)
 80105da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b = input[idx];
 80105dc:	5c6b      	ldrb	r3, [r5, r1]
 80105de:	f88d 3007 	strb.w	r3, [sp, #7]
    if (zeroBits && b != 0x00)
 80105e2:	b11f      	cbz	r7, 80105ec <CheckBitString+0x66>
 80105e4:	b17b      	cbz	r3, 8010606 <CheckBitString+0x80>
        return ASN_EXPECT_0_E;
 80105e6:	f06f 0491 	mvn.w	r4, #145	; 0x91
 80105ea:	e7eb      	b.n	80105c4 <CheckBitString+0x3e>
    if (b >= 0x08)
 80105ec:	2b07      	cmp	r3, #7
 80105ee:	d8e7      	bhi.n	80105c0 <CheckBitString+0x3a>
    if (b != 0) {
 80105f0:	b14b      	cbz	r3, 8010606 <CheckBitString+0x80>
        if ((byte)(input[idx + (word32)length - 1] << (8 - b)) != 0)
 80105f2:	4415      	add	r5, r2
 80105f4:	440d      	add	r5, r1
 80105f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80105fa:	f1c3 0508 	rsb	r5, r3, #8
 80105fe:	40a9      	lsls	r1, r5
 8010600:	b2c9      	uxtb	r1, r1
 8010602:	2900      	cmp	r1, #0
 8010604:	d1dc      	bne.n	80105c0 <CheckBitString+0x3a>
    *inOutIdx = idx;
 8010606:	f8c8 0000 	str.w	r0, [r8]
    if (len != NULL)
 801060a:	b10e      	cbz	r6, 8010610 <CheckBitString+0x8a>
    length--; /* length has been checked for greater than 0 */
 801060c:	3a01      	subs	r2, #1
        *len = length;
 801060e:	6032      	str	r2, [r6, #0]
    if (unusedBits != NULL)
 8010610:	f1b9 0f00 	cmp.w	r9, #0
 8010614:	d0d6      	beq.n	80105c4 <CheckBitString+0x3e>
        *unusedBits = b;
 8010616:	f889 3000 	strb.w	r3, [r9]
 801061a:	e7d3      	b.n	80105c4 <CheckBitString+0x3e>
        return ASN_BITSTR_E;
 801061c:	f06f 0492 	mvn.w	r4, #146	; 0x92
 8010620:	e7d0      	b.n	80105c4 <CheckBitString+0x3e>
        return BUFFER_E;
 8010622:	f06f 0483 	mvn.w	r4, #131	; 0x83
 8010626:	e7cd      	b.n	80105c4 <CheckBitString+0x3e>

08010628 <OidFromId>:
{
 8010628:	b507      	push	{r0, r1, r2, lr}
    const byte* oid = NULL;
 801062a:	2300      	movs	r3, #0
 801062c:	9301      	str	r3, [sp, #4]
    *oidSz = 0;
 801062e:	6013      	str	r3, [r2, #0]
    switch (type) {
 8010630:	290f      	cmp	r1, #15
 8010632:	d836      	bhi.n	80106a2 <OidFromId+0x7a>
 8010634:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010638:	002b0010 	.word	0x002b0010
 801063c:	005b004c 	.word	0x005b004c
 8010640:	0035005f 	.word	0x0035005f
 8010644:	00dd0088 	.word	0x00dd0088
 8010648:	00ed00e6 	.word	0x00ed00e6
 801064c:	012100f2 	.word	0x012100f2
 8010650:	01ba0144 	.word	0x01ba0144
 8010654:	01ca0127 	.word	0x01ca0127
            switch (id) {
 8010658:	2858      	cmp	r0, #88	; 0x58
 801065a:	d00a      	beq.n	8010672 <OidFromId+0x4a>
 801065c:	f5a0 70cf 	sub.w	r0, r0, #414	; 0x19e
 8010660:	2805      	cmp	r0, #5
 8010662:	d81e      	bhi.n	80106a2 <OidFromId+0x7a>
 8010664:	2805      	cmp	r0, #5
 8010666:	d81c      	bhi.n	80106a2 <OidFromId+0x7a>
 8010668:	e8df f000 	tbb	[pc, r0]
 801066c:	1b0f1b07 	.word	0x1b0f1b07
 8010670:	0d0b      	.short	0x0d0b
                    oid = hashSha1hOid;
 8010672:	4b9d      	ldr	r3, [pc, #628]	; (80108e8 <OidFromId+0x2c0>)
                    oid = blkDesCbcOid;
 8010674:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(blkDesCbcOid);
 8010676:	2305      	movs	r3, #5
 8010678:	e020      	b.n	80106bc <OidFromId+0x94>
                    oid = hashSha256hOid;
 801067a:	4b9c      	ldr	r3, [pc, #624]	; (80108ec <OidFromId+0x2c4>)
                    oid = blkAes128CbcOid;
 801067c:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(blkAes128CbcOid);
 801067e:	2309      	movs	r3, #9
 8010680:	e01c      	b.n	80106bc <OidFromId+0x94>
                    oid = hashSha512_224hOid;
 8010682:	4b9b      	ldr	r3, [pc, #620]	; (80108f0 <OidFromId+0x2c8>)
 8010684:	e7fa      	b.n	801067c <OidFromId+0x54>
                    oid = hashSha512_256hOid;
 8010686:	4b9b      	ldr	r3, [pc, #620]	; (80108f4 <OidFromId+0x2cc>)
 8010688:	e7f8      	b.n	801067c <OidFromId+0x54>
                    oid = hashSha512hOid;
 801068a:	4b9b      	ldr	r3, [pc, #620]	; (80108f8 <OidFromId+0x2d0>)
 801068c:	e7f6      	b.n	801067c <OidFromId+0x54>
            switch (id) {
 801068e:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 8010692:	d015      	beq.n	80106c0 <OidFromId+0x98>
 8010694:	d809      	bhi.n	80106aa <OidFromId+0x82>
 8010696:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801069a:	d015      	beq.n	80106c8 <OidFromId+0xa0>
 801069c:	f5b0 7f02 	cmp.w	r0, #520	; 0x208
 80106a0:	d009      	beq.n	80106b6 <OidFromId+0x8e>
}
 80106a2:	9801      	ldr	r0, [sp, #4]
 80106a4:	b003      	add	sp, #12
 80106a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80106aa:	f240 230e 	movw	r3, #526	; 0x20e
 80106ae:	4298      	cmp	r0, r3
 80106b0:	d1f7      	bne.n	80106a2 <OidFromId+0x7a>
                    oid = sigSha512wEcdsaOid;
 80106b2:	4b92      	ldr	r3, [pc, #584]	; (80108fc <OidFromId+0x2d4>)
 80106b4:	e005      	b.n	80106c2 <OidFromId+0x9a>
                    oid = sigSha1wEcdsaOid;
 80106b6:	4b92      	ldr	r3, [pc, #584]	; (8010900 <OidFromId+0x2d8>)
                    oid = keyEcdsaOid;
 80106b8:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(keyEcdsaOid);
 80106ba:	2307      	movs	r3, #7
                    *oidSz = sizeof(hmacSha512Oid);
 80106bc:	6013      	str	r3, [r2, #0]
                    break;
 80106be:	e7f0      	b.n	80106a2 <OidFromId+0x7a>
                    oid = sigSha256wEcdsaOid;
 80106c0:	4b90      	ldr	r3, [pc, #576]	; (8010904 <OidFromId+0x2dc>)
                    oid = hmacSha512Oid;
 80106c2:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(hmacSha512Oid);
 80106c4:	2308      	movs	r3, #8
 80106c6:	e7f9      	b.n	80106bc <OidFromId+0x94>
                    oid = sigEd25519Oid;
 80106c8:	4b8f      	ldr	r3, [pc, #572]	; (8010908 <OidFromId+0x2e0>)
                    oid = keyCurve25519Oid;
 80106ca:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(keyCurve25519Oid);
 80106cc:	2303      	movs	r3, #3
 80106ce:	e7f5      	b.n	80106bc <OidFromId+0x94>
            switch (id) {
 80106d0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80106d4:	d009      	beq.n	80106ea <OidFromId+0xc2>
 80106d6:	f240 2306 	movw	r3, #518	; 0x206
 80106da:	4298      	cmp	r0, r3
 80106dc:	d003      	beq.n	80106e6 <OidFromId+0xbe>
 80106de:	28fe      	cmp	r0, #254	; 0xfe
 80106e0:	d1df      	bne.n	80106a2 <OidFromId+0x7a>
                    oid = keyCurve25519Oid;
 80106e2:	4b8a      	ldr	r3, [pc, #552]	; (801090c <OidFromId+0x2e4>)
 80106e4:	e7f1      	b.n	80106ca <OidFromId+0xa2>
                    oid = keyEcdsaOid;
 80106e6:	4b8a      	ldr	r3, [pc, #552]	; (8010910 <OidFromId+0x2e8>)
 80106e8:	e7e6      	b.n	80106b8 <OidFromId+0x90>
                    oid = keyEd25519Oid;
 80106ea:	4b8a      	ldr	r3, [pc, #552]	; (8010914 <OidFromId+0x2ec>)
 80106ec:	e7ed      	b.n	80106ca <OidFromId+0xa2>
            if (wc_ecc_get_oid(id, &oid, oidSz) < 0) {
 80106ee:	a901      	add	r1, sp, #4
 80106f0:	f7fb fde6 	bl	800c2c0 <wc_ecc_get_oid>
            break;
 80106f4:	e7d5      	b.n	80106a2 <OidFromId+0x7a>
            switch (id) {
 80106f6:	f5b0 7fdb 	cmp.w	r0, #438	; 0x1b6
 80106fa:	d01d      	beq.n	8010738 <OidFromId+0x110>
 80106fc:	d80f      	bhi.n	801071e <OidFromId+0xf6>
 80106fe:	f5b0 7fd1 	cmp.w	r0, #418	; 0x1a2
 8010702:	d017      	beq.n	8010734 <OidFromId+0x10c>
 8010704:	d806      	bhi.n	8010714 <OidFromId+0xec>
 8010706:	2845      	cmp	r0, #69	; 0x45
 8010708:	d01a      	beq.n	8010740 <OidFromId+0x118>
 801070a:	f5b0 7fcf 	cmp.w	r0, #414	; 0x19e
 801070e:	d1c8      	bne.n	80106a2 <OidFromId+0x7a>
                    oid = blkAes128CbcOid;
 8010710:	4b81      	ldr	r3, [pc, #516]	; (8010918 <OidFromId+0x2f0>)
 8010712:	e7b3      	b.n	801067c <OidFromId+0x54>
 8010714:	f5b0 7fd9 	cmp.w	r0, #434	; 0x1b2
 8010718:	d1c3      	bne.n	80106a2 <OidFromId+0x7a>
                    oid = blkAes192CbcOid;
 801071a:	4b80      	ldr	r3, [pc, #512]	; (801091c <OidFromId+0x2f4>)
 801071c:	e7ae      	b.n	801067c <OidFromId+0x54>
 801071e:	f5b0 7fe5 	cmp.w	r0, #458	; 0x1ca
 8010722:	d00b      	beq.n	801073c <OidFromId+0x114>
 8010724:	f5b0 7f23 	cmp.w	r0, #652	; 0x28c
 8010728:	d00c      	beq.n	8010744 <OidFromId+0x11c>
 801072a:	f5b0 7fe3 	cmp.w	r0, #454	; 0x1c6
 801072e:	d1b8      	bne.n	80106a2 <OidFromId+0x7a>
                    oid = blkAes256CbcOid;
 8010730:	4b7b      	ldr	r3, [pc, #492]	; (8010920 <OidFromId+0x2f8>)
 8010732:	e7a3      	b.n	801067c <OidFromId+0x54>
                    oid = blkAes128GcmOid;
 8010734:	4b7b      	ldr	r3, [pc, #492]	; (8010924 <OidFromId+0x2fc>)
 8010736:	e7a1      	b.n	801067c <OidFromId+0x54>
                    oid = blkAes192GcmOid;
 8010738:	4b7b      	ldr	r3, [pc, #492]	; (8010928 <OidFromId+0x300>)
 801073a:	e79f      	b.n	801067c <OidFromId+0x54>
                    oid = blkAes256GcmOid;
 801073c:	4b7b      	ldr	r3, [pc, #492]	; (801092c <OidFromId+0x304>)
 801073e:	e79d      	b.n	801067c <OidFromId+0x54>
                    oid = blkDesCbcOid;
 8010740:	4b7b      	ldr	r3, [pc, #492]	; (8010930 <OidFromId+0x308>)
 8010742:	e797      	b.n	8010674 <OidFromId+0x4c>
                    oid = blkDes3CbcOid;
 8010744:	4b7b      	ldr	r3, [pc, #492]	; (8010934 <OidFromId+0x30c>)
 8010746:	e7bc      	b.n	80106c2 <OidFromId+0x9a>
            switch (id) {
 8010748:	2897      	cmp	r0, #151	; 0x97
 801074a:	d83b      	bhi.n	80107c4 <OidFromId+0x19c>
 801074c:	287f      	cmp	r0, #127	; 0x7f
 801074e:	d803      	bhi.n	8010758 <OidFromId+0x130>
 8010750:	2845      	cmp	r0, #69	; 0x45
 8010752:	d1a6      	bne.n	80106a2 <OidFromId+0x7a>
                    oid = extAuthInfoOid;
 8010754:	4b78      	ldr	r3, [pc, #480]	; (8010938 <OidFromId+0x310>)
 8010756:	e7b4      	b.n	80106c2 <OidFromId+0x9a>
 8010758:	3880      	subs	r0, #128	; 0x80
 801075a:	2817      	cmp	r0, #23
 801075c:	d8a1      	bhi.n	80106a2 <OidFromId+0x7a>
 801075e:	a301      	add	r3, pc, #4	; (adr r3, 8010764 <OidFromId+0x13c>)
 8010760:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8010764:	080107df 	.word	0x080107df
 8010768:	080107e7 	.word	0x080107e7
 801076c:	080106a3 	.word	0x080106a3
 8010770:	080107d3 	.word	0x080107d3
 8010774:	080106a3 	.word	0x080106a3
 8010778:	080107cf 	.word	0x080107cf
 801077c:	080106a3 	.word	0x080106a3
 8010780:	080106a3 	.word	0x080106a3
 8010784:	080106a3 	.word	0x080106a3
 8010788:	080106a3 	.word	0x080106a3
 801078c:	080106a3 	.word	0x080106a3
 8010790:	080106a3 	.word	0x080106a3
 8010794:	080106a3 	.word	0x080106a3
 8010798:	080106a3 	.word	0x080106a3
 801079c:	080106a3 	.word	0x080106a3
 80107a0:	080106a3 	.word	0x080106a3
 80107a4:	080107ef 	.word	0x080107ef
 80107a8:	080107d7 	.word	0x080107d7
 80107ac:	080107e3 	.word	0x080107e3
 80107b0:	080106a3 	.word	0x080106a3
 80107b4:	080106a3 	.word	0x080106a3
 80107b8:	080107db 	.word	0x080107db
 80107bc:	080106a3 	.word	0x080106a3
 80107c0:	080107eb 	.word	0x080107eb
 80107c4:	28a8      	cmp	r0, #168	; 0xa8
 80107c6:	f47f af6c 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = extInhibitAnyOid;
 80107ca:	4b5c      	ldr	r3, [pc, #368]	; (801093c <OidFromId+0x314>)
 80107cc:	e77d      	b.n	80106ca <OidFromId+0xa2>
                    oid = extBasicCaOid;
 80107ce:	4b5c      	ldr	r3, [pc, #368]	; (8010940 <OidFromId+0x318>)
 80107d0:	e77b      	b.n	80106ca <OidFromId+0xa2>
                    oid = extAltNamesOid;
 80107d2:	4b5c      	ldr	r3, [pc, #368]	; (8010944 <OidFromId+0x31c>)
 80107d4:	e779      	b.n	80106ca <OidFromId+0xa2>
                    oid = extCrlDistOid;
 80107d6:	4b5c      	ldr	r3, [pc, #368]	; (8010948 <OidFromId+0x320>)
 80107d8:	e777      	b.n	80106ca <OidFromId+0xa2>
                    oid = extAuthKeyOid;
 80107da:	4b5c      	ldr	r3, [pc, #368]	; (801094c <OidFromId+0x324>)
 80107dc:	e775      	b.n	80106ca <OidFromId+0xa2>
                    oid = extSubjKeyOid;
 80107de:	4b5c      	ldr	r3, [pc, #368]	; (8010950 <OidFromId+0x328>)
 80107e0:	e773      	b.n	80106ca <OidFromId+0xa2>
                    oid = extCertPolicyOid;
 80107e2:	4b5c      	ldr	r3, [pc, #368]	; (8010954 <OidFromId+0x32c>)
 80107e4:	e771      	b.n	80106ca <OidFromId+0xa2>
                    oid = extKeyUsageOid;
 80107e6:	4b5c      	ldr	r3, [pc, #368]	; (8010958 <OidFromId+0x330>)
 80107e8:	e76f      	b.n	80106ca <OidFromId+0xa2>
                    oid = extExtKeyUsageOid;
 80107ea:	4b5c      	ldr	r3, [pc, #368]	; (801095c <OidFromId+0x334>)
 80107ec:	e76d      	b.n	80106ca <OidFromId+0xa2>
                    oid = extNameConsOid;
 80107ee:	4b5c      	ldr	r3, [pc, #368]	; (8010960 <OidFromId+0x338>)
 80107f0:	e76b      	b.n	80106ca <OidFromId+0xa2>
            switch (id) {
 80107f2:	2874      	cmp	r0, #116	; 0x74
 80107f4:	d004      	beq.n	8010800 <OidFromId+0x1d8>
 80107f6:	2875      	cmp	r0, #117	; 0x75
 80107f8:	f47f af53 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = extAuthInfoCaIssuerOid;
 80107fc:	4b59      	ldr	r3, [pc, #356]	; (8010964 <OidFromId+0x33c>)
 80107fe:	e760      	b.n	80106c2 <OidFromId+0x9a>
                    oid = extAuthInfoOcspOid;
 8010800:	4b59      	ldr	r3, [pc, #356]	; (8010968 <OidFromId+0x340>)
 8010802:	e75e      	b.n	80106c2 <OidFromId+0x9a>
            switch (id) {
 8010804:	2892      	cmp	r0, #146	; 0x92
 8010806:	f47f af4c 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = extCertPolicyAnyOid;
 801080a:	4b58      	ldr	r3, [pc, #352]	; (801096c <OidFromId+0x344>)
                    oid = extExtKeyUsageAnyOid;
 801080c:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(extExtKeyUsageAnyOid);
 801080e:	2304      	movs	r3, #4
 8010810:	e754      	b.n	80106bc <OidFromId+0x94>
            switch (id) {
 8010812:	284f      	cmp	r0, #79	; 0x4f
 8010814:	f47f af45 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = extAltNamesHwNameOid;
 8010818:	4b55      	ldr	r3, [pc, #340]	; (8010970 <OidFromId+0x348>)
 801081a:	e752      	b.n	80106c2 <OidFromId+0x9a>
            switch (id) {
 801081c:	284f      	cmp	r0, #79	; 0x4f
 801081e:	d81b      	bhi.n	8010858 <OidFromId+0x230>
 8010820:	2846      	cmp	r0, #70	; 0x46
 8010822:	f67f af3e 	bls.w	80106a2 <OidFromId+0x7a>
 8010826:	3847      	subs	r0, #71	; 0x47
 8010828:	2808      	cmp	r0, #8
 801082a:	f63f af3a 	bhi.w	80106a2 <OidFromId+0x7a>
 801082e:	a301      	add	r3, pc, #4	; (adr r3, 8010834 <OidFromId+0x20c>)
 8010830:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8010834:	08010863 	.word	0x08010863
 8010838:	08010867 	.word	0x08010867
 801083c:	0801086b 	.word	0x0801086b
 8010840:	0801086f 	.word	0x0801086f
 8010844:	080106a3 	.word	0x080106a3
 8010848:	080106a3 	.word	0x080106a3
 801084c:	080106a3 	.word	0x080106a3
 8010850:	08010873 	.word	0x08010873
 8010854:	08010877 	.word	0x08010877
 8010858:	2897      	cmp	r0, #151	; 0x97
 801085a:	f47f af22 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = extExtKeyUsageAnyOid;
 801085e:	4b45      	ldr	r3, [pc, #276]	; (8010974 <OidFromId+0x34c>)
 8010860:	e7d4      	b.n	801080c <OidFromId+0x1e4>
                    oid = extExtKeyUsageServerAuthOid;
 8010862:	4b45      	ldr	r3, [pc, #276]	; (8010978 <OidFromId+0x350>)
 8010864:	e72d      	b.n	80106c2 <OidFromId+0x9a>
                    oid = extExtKeyUsageClientAuthOid;
 8010866:	4b45      	ldr	r3, [pc, #276]	; (801097c <OidFromId+0x354>)
 8010868:	e72b      	b.n	80106c2 <OidFromId+0x9a>
                    oid = extExtKeyUsageCodeSigningOid;
 801086a:	4b45      	ldr	r3, [pc, #276]	; (8010980 <OidFromId+0x358>)
 801086c:	e729      	b.n	80106c2 <OidFromId+0x9a>
                    oid = extExtKeyUsageEmailProtectOid;
 801086e:	4b45      	ldr	r3, [pc, #276]	; (8010984 <OidFromId+0x35c>)
 8010870:	e727      	b.n	80106c2 <OidFromId+0x9a>
                    oid = extExtKeyUsageTimestampOid;
 8010872:	4b45      	ldr	r3, [pc, #276]	; (8010988 <OidFromId+0x360>)
 8010874:	e725      	b.n	80106c2 <OidFromId+0x9a>
                    oid = extExtKeyUsageOcspSignOid;
 8010876:	4b45      	ldr	r3, [pc, #276]	; (801098c <OidFromId+0x364>)
 8010878:	e723      	b.n	80106c2 <OidFromId+0x9a>
            switch (id) {
 801087a:	f5b0 7f25 	cmp.w	r0, #660	; 0x294
 801087e:	f47f af10 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = pbkdf2Oid;
 8010882:	4b43      	ldr	r3, [pc, #268]	; (8010990 <OidFromId+0x368>)
 8010884:	e6fa      	b.n	801067c <OidFromId+0x54>
            switch (id) {
 8010886:	f240 2392 	movw	r3, #658	; 0x292
 801088a:	4298      	cmp	r0, r3
 801088c:	d007      	beq.n	801089e <OidFromId+0x276>
 801088e:	d808      	bhi.n	80108a2 <OidFromId+0x27a>
 8010890:	2803      	cmp	r0, #3
 8010892:	d011      	beq.n	80108b8 <OidFromId+0x290>
 8010894:	280d      	cmp	r0, #13
 8010896:	d00d      	beq.n	80108b4 <OidFromId+0x28c>
 8010898:	2802      	cmp	r0, #2
 801089a:	f47f af02 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = pbeSha1Des;
 801089e:	4b3d      	ldr	r3, [pc, #244]	; (8010994 <OidFromId+0x36c>)
 80108a0:	e6ec      	b.n	801067c <OidFromId+0x54>
 80108a2:	f240 2393 	movw	r3, #659	; 0x293
 80108a6:	4298      	cmp	r0, r3
 80108a8:	d006      	beq.n	80108b8 <OidFromId+0x290>
 80108aa:	f240 2395 	movw	r3, #661	; 0x295
 80108ae:	4298      	cmp	r0, r3
 80108b0:	f47f aef7 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = pbes2;
 80108b4:	4b38      	ldr	r3, [pc, #224]	; (8010998 <OidFromId+0x370>)
 80108b6:	e6e1      	b.n	801067c <OidFromId+0x54>
                    oid = pbeSha1Des3;
 80108b8:	4b38      	ldr	r3, [pc, #224]	; (801099c <OidFromId+0x374>)
 80108ba:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(pbeSha1Des3);
 80108bc:	230a      	movs	r3, #10
 80108be:	e6fd      	b.n	80106bc <OidFromId+0x94>
            switch (id) {
 80108c0:	f240 13b5 	movw	r3, #437	; 0x1b5
 80108c4:	4298      	cmp	r0, r3
 80108c6:	d00a      	beq.n	80108de <OidFromId+0x2b6>
 80108c8:	f240 13c9 	movw	r3, #457	; 0x1c9
 80108cc:	4298      	cmp	r0, r3
 80108ce:	d008      	beq.n	80108e2 <OidFromId+0x2ba>
 80108d0:	f240 13a1 	movw	r3, #417	; 0x1a1
 80108d4:	4298      	cmp	r0, r3
 80108d6:	f47f aee4 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = wrapAes128Oid;
 80108da:	4b31      	ldr	r3, [pc, #196]	; (80109a0 <OidFromId+0x378>)
 80108dc:	e6ce      	b.n	801067c <OidFromId+0x54>
                    oid = wrapAes192Oid;
 80108de:	4b31      	ldr	r3, [pc, #196]	; (80109a4 <OidFromId+0x37c>)
 80108e0:	e6cc      	b.n	801067c <OidFromId+0x54>
                    oid = wrapAes256Oid;
 80108e2:	4b31      	ldr	r3, [pc, #196]	; (80109a8 <OidFromId+0x380>)
 80108e4:	e6ca      	b.n	801067c <OidFromId+0x54>
 80108e6:	bf00      	nop
 80108e8:	08022bae 	.word	0x08022bae
 80108ec:	08022bb3 	.word	0x08022bb3
 80108f0:	08022bbc 	.word	0x08022bbc
 80108f4:	08022bc5 	.word	0x08022bc5
 80108f8:	08022bce 	.word	0x08022bce
 80108fc:	08022c2b 	.word	0x08022c2b
 8010900:	08022c1c 	.word	0x08022c1c
 8010904:	08022c23 	.word	0x08022c23
 8010908:	08022c19 	.word	0x08022c19
 801090c:	08022be7 	.word	0x08022be7
 8010910:	08022bea 	.word	0x08022bea
 8010914:	08022bf1 	.word	0x08022bf1
 8010918:	08022ae0 	.word	0x08022ae0
 801091c:	08022af2 	.word	0x08022af2
 8010920:	08022b04 	.word	0x08022b04
 8010924:	08022ae9 	.word	0x08022ae9
 8010928:	08022afb 	.word	0x08022afb
 801092c:	08022b0d 	.word	0x08022b0d
 8010930:	08022b1e 	.word	0x08022b1e
 8010934:	08022b16 	.word	0x08022b16
 8010938:	08022b53 	.word	0x08022b53
 801093c:	08022ba2 	.word	0x08022ba2
 8010940:	08022b5e 	.word	0x08022b5e
 8010944:	08022b40 	.word	0x08022b40
 8010948:	08022b68 	.word	0x08022b68
 801094c:	08022b5b 	.word	0x08022b5b
 8010950:	08022bab 	.word	0x08022bab
 8010954:	08022b65 	.word	0x08022b65
 8010958:	08022ba5 	.word	0x08022ba5
 801095c:	08022b8f 	.word	0x08022b8f
 8010960:	08022ba8 	.word	0x08022ba8
 8010964:	08022b43 	.word	0x08022b43
 8010968:	08022b4b 	.word	0x08022b4b
 801096c:	08022b61 	.word	0x08022b61
 8010970:	08022b38 	.word	0x08022b38
 8010974:	08022b6b 	.word	0x08022b6b
 8010978:	08022b92 	.word	0x08022b92
 801097c:	08022b6f 	.word	0x08022b6f
 8010980:	08022b77 	.word	0x08022b77
 8010984:	08022b7f 	.word	0x08022b7f
 8010988:	08022b9a 	.word	0x08022b9a
 801098c:	08022b87 	.word	0x08022b87
 8010990:	08022c10 	.word	0x08022c10
 8010994:	08022bf4 	.word	0x08022bf4
 8010998:	08022c07 	.word	0x08022c07
 801099c:	08022bfd 	.word	0x08022bfd
 80109a0:	08022c33 	.word	0x08022c33
 80109a4:	08022c3c 	.word	0x08022c3c
 80109a8:	08022c45 	.word	0x08022c45
            switch (id) {
 80109ac:	28bf      	cmp	r0, #191	; 0xbf
 80109ae:	d00b      	beq.n	80109c8 <OidFromId+0x3a0>
 80109b0:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
 80109b4:	d006      	beq.n	80109c4 <OidFromId+0x39c>
 80109b6:	28bd      	cmp	r0, #189	; 0xbd
 80109b8:	f47f ae73 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = dhSinglePass_stdDH_sha256kdf_Oid;
 80109bc:	4b0a      	ldr	r3, [pc, #40]	; (80109e8 <OidFromId+0x3c0>)
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
 80109be:	9301      	str	r3, [sp, #4]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
 80109c0:	2306      	movs	r3, #6
 80109c2:	e67b      	b.n	80106bc <OidFromId+0x94>
                    oid = dhSinglePass_stdDH_sha1kdf_Oid;
 80109c4:	4b09      	ldr	r3, [pc, #36]	; (80109ec <OidFromId+0x3c4>)
 80109c6:	e659      	b.n	801067c <OidFromId+0x54>
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
 80109c8:	4b09      	ldr	r3, [pc, #36]	; (80109f0 <OidFromId+0x3c8>)
 80109ca:	e7f8      	b.n	80109be <OidFromId+0x396>
            switch (id) {
 80109cc:	f240 238d 	movw	r3, #653	; 0x28d
 80109d0:	4298      	cmp	r0, r3
 80109d2:	d006      	beq.n	80109e2 <OidFromId+0x3ba>
 80109d4:	f240 238f 	movw	r3, #655	; 0x28f
 80109d8:	4298      	cmp	r0, r3
 80109da:	f47f ae62 	bne.w	80106a2 <OidFromId+0x7a>
                    oid = hmacSha512Oid;
 80109de:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <OidFromId+0x3cc>)
 80109e0:	e66f      	b.n	80106c2 <OidFromId+0x9a>
                    oid = hmacSha256Oid;
 80109e2:	4b05      	ldr	r3, [pc, #20]	; (80109f8 <OidFromId+0x3d0>)
 80109e4:	e66d      	b.n	80106c2 <OidFromId+0x9a>
 80109e6:	bf00      	nop
 80109e8:	08022b2c 	.word	0x08022b2c
 80109ec:	08022b23 	.word	0x08022b23
 80109f0:	08022b32 	.word	0x08022b32
 80109f4:	08022bdf 	.word	0x08022bdf
 80109f8:	08022bd7 	.word	0x08022bd7

080109fc <GetASNObjectId>:
{
 80109fc:	b513      	push	{r0, r1, r4, lr}
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 80109fe:	2401      	movs	r4, #1
 8010a00:	e9cd 3400 	strd	r3, r4, [sp]
 8010a04:	4613      	mov	r3, r2
 8010a06:	460a      	mov	r2, r1
 8010a08:	2106      	movs	r1, #6
 8010a0a:	f7ff fceb 	bl	80103e4 <GetASNHeader_ex>
}
 8010a0e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8010a12:	b002      	add	sp, #8
 8010a14:	bd10      	pop	{r4, pc}

08010a16 <SkipObjectId>:
{
 8010a16:	b513      	push	{r0, r1, r4, lr}
 8010a18:	4613      	mov	r3, r2
    word32 idx = *inOutIdx;
 8010a1a:	680a      	ldr	r2, [r1, #0]
 8010a1c:	9200      	str	r2, [sp, #0]
{
 8010a1e:	460c      	mov	r4, r1
    ret = GetASNObjectId(input, &idx, &length, maxIdx);
 8010a20:	aa01      	add	r2, sp, #4
 8010a22:	4669      	mov	r1, sp
 8010a24:	f7ff ffea 	bl	80109fc <GetASNObjectId>
    if (ret != 0)
 8010a28:	b918      	cbnz	r0, 8010a32 <SkipObjectId+0x1c>
    idx += (word32)length;
 8010a2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010a2e:	4413      	add	r3, r2
    *inOutIdx = idx;
 8010a30:	6023      	str	r3, [r4, #0]
}
 8010a32:	b002      	add	sp, #8
 8010a34:	bd10      	pop	{r4, pc}

08010a36 <GetObjectId>:
{
 8010a36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a3a:	4615      	mov	r5, r2
 8010a3c:	461f      	mov	r7, r3
    ret = GetASNObjectId(input, inOutIdx, &length, maxIdx);
 8010a3e:	466a      	mov	r2, sp
 8010a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8010a42:	4606      	mov	r6, r0
 8010a44:	4688      	mov	r8, r1
    ret = GetASNObjectId(input, inOutIdx, &length, maxIdx);
 8010a46:	f7ff ffd9 	bl	80109fc <GetASNObjectId>
    if (ret != 0)
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	bb00      	cbnz	r0, 8010a90 <GetObjectId+0x5a>
    word32 idx = *inOutIdx;
 8010a4e:	f8d8 2000 	ldr.w	r2, [r8]
    return GetOID(input, inOutIdx, oid, oidType, length);
 8010a52:	f8dd 9000 	ldr.w	r9, [sp]
    *oid = 0;
 8010a56:	6028      	str	r0, [r5, #0]
    while (length--) {
 8010a58:	eb06 0a02 	add.w	sl, r6, r2
 8010a5c:	444a      	add	r2, r9
 8010a5e:	4651      	mov	r1, sl
 8010a60:	4416      	add	r6, r2
 8010a62:	42b1      	cmp	r1, r6
 8010a64:	d118      	bne.n	8010a98 <GetObjectId+0x62>
    if (oidType != oidIgnoreType) {
 8010a66:	2f15      	cmp	r7, #21
    *inOutIdx = idx;
 8010a68:	f8c8 2000 	str.w	r2, [r8]
    if (oidType != oidIgnoreType) {
 8010a6c:	d010      	beq.n	8010a90 <GetObjectId+0x5a>
        checkOid = OidFromId(*oid, oidType, &checkOidSz);
 8010a6e:	4639      	mov	r1, r7
 8010a70:	6828      	ldr	r0, [r5, #0]
 8010a72:	aa01      	add	r2, sp, #4
 8010a74:	f7ff fdd8 	bl	8010628 <OidFromId>
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 8010a78:	4601      	mov	r1, r0
 8010a7a:	b148      	cbz	r0, 8010a90 <GetObjectId+0x5a>
 8010a7c:	9b01      	ldr	r3, [sp, #4]
 8010a7e:	454b      	cmp	r3, r9
 8010a80:	d104      	bne.n	8010a8c <GetObjectId+0x56>
                (XMEMCMP(actualOid, checkOid, checkOidSz) != 0))) {
 8010a82:	464a      	mov	r2, r9
 8010a84:	4650      	mov	r0, sl
 8010a86:	f00a fa9b 	bl	801afc0 <memcmp>
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 8010a8a:	b108      	cbz	r0, 8010a90 <GetObjectId+0x5a>
            ret = ASN_UNKNOWN_OID_E;
 8010a8c:	f06f 0493 	mvn.w	r4, #147	; 0x93
}
 8010a90:	4620      	mov	r0, r4
 8010a92:	b002      	add	sp, #8
 8010a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *oid += (word32)input[idx];
 8010a98:	f811 0b01 	ldrb.w	r0, [r1], #1
 8010a9c:	682b      	ldr	r3, [r5, #0]
 8010a9e:	4403      	add	r3, r0
 8010aa0:	602b      	str	r3, [r5, #0]
        idx++;
 8010aa2:	e7de      	b.n	8010a62 <GetObjectId+0x2c>

08010aa4 <GetAlgoId>:
{
 8010aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa8:	b086      	sub	sp, #24
 8010aaa:	4698      	mov	r8, r3
 8010aac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    word32 idx = *inOutIdx;
 8010aae:	680b      	ldr	r3, [r1, #0]
 8010ab0:	9304      	str	r3, [sp, #16]
    *oid = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	6013      	str	r3, [r2, #0]
{
 8010ab6:	460e      	mov	r6, r1
 8010ab8:	4617      	mov	r7, r2
    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 8010aba:	462b      	mov	r3, r5
 8010abc:	aa03      	add	r2, sp, #12
 8010abe:	a904      	add	r1, sp, #16
{
 8010ac0:	4604      	mov	r4, r0
    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 8010ac2:	f7ff fcba 	bl	801043a <GetSequence>
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	db32      	blt.n	8010b30 <GetAlgoId+0x8c>
    if (GetObjectId(input, &idx, oid, oidType, maxIdx) < 0)
 8010aca:	9500      	str	r5, [sp, #0]
 8010acc:	4643      	mov	r3, r8
 8010ace:	463a      	mov	r2, r7
 8010ad0:	a904      	add	r1, sp, #16
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f7ff ffaf 	bl	8010a36 <GetObjectId>
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	db2c      	blt.n	8010b36 <GetAlgoId+0x92>
    if (idx < maxIdx) {
 8010adc:	9b04      	ldr	r3, [sp, #16]
 8010ade:	42ab      	cmp	r3, r5
 8010ae0:	d217      	bcs.n	8010b12 <GetAlgoId+0x6e>
        word32 localIdx = idx; /*use localIdx to not advance when checking tag*/
 8010ae2:	9305      	str	r3, [sp, #20]
        if (GetASNTag(input, &localIdx, &tag, maxIdx) == 0) {
 8010ae4:	f10d 020b 	add.w	r2, sp, #11
 8010ae8:	462b      	mov	r3, r5
 8010aea:	a905      	add	r1, sp, #20
 8010aec:	4620      	mov	r0, r4
 8010aee:	f7ff fc66 	bl	80103be <GetASNTag>
 8010af2:	b970      	cbnz	r0, 8010b12 <GetAlgoId+0x6e>
            if (tag == ASN_TAG_NULL) {
 8010af4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010af8:	2b05      	cmp	r3, #5
 8010afa:	d10a      	bne.n	8010b12 <GetAlgoId+0x6e>
    word32 idx = *inOutIdx;
 8010afc:	9804      	ldr	r0, [sp, #16]
    if ((idx + 2) > maxIdx) {
 8010afe:	1c83      	adds	r3, r0, #2
 8010b00:	429d      	cmp	r5, r3
 8010b02:	d30a      	bcc.n	8010b1a <GetAlgoId+0x76>
    if ((ret == 0) && (input[idx++] != ASN_TAG_NULL)) {
 8010b04:	5c22      	ldrb	r2, [r4, r0]
 8010b06:	2a05      	cmp	r2, #5
 8010b08:	d10c      	bne.n	8010b24 <GetAlgoId+0x80>
    if ((ret == 0) && (input[idx++] != 0)) {
 8010b0a:	4404      	add	r4, r0
 8010b0c:	7862      	ldrb	r2, [r4, #1]
 8010b0e:	b962      	cbnz	r2, 8010b2a <GetAlgoId+0x86>
        *inOutIdx = idx;
 8010b10:	9304      	str	r3, [sp, #16]
    *inOutIdx = idx;
 8010b12:	9b04      	ldr	r3, [sp, #16]
 8010b14:	6033      	str	r3, [r6, #0]
    return 0;
 8010b16:	2000      	movs	r0, #0
 8010b18:	e001      	b.n	8010b1e <GetAlgoId+0x7a>
 8010b1a:	f06f 0083 	mvn.w	r0, #131	; 0x83
}
 8010b1e:	b006      	add	sp, #24
 8010b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = ASN_TAG_NULL_E;
 8010b24:	f06f 0090 	mvn.w	r0, #144	; 0x90
 8010b28:	e7f9      	b.n	8010b1e <GetAlgoId+0x7a>
        ret = ASN_EXPECT_0_E;
 8010b2a:	f06f 0091 	mvn.w	r0, #145	; 0x91
                    return ret;
 8010b2e:	e7f6      	b.n	8010b1e <GetAlgoId+0x7a>
        return ASN_PARSE_E;
 8010b30:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8010b34:	e7f3      	b.n	8010b1e <GetAlgoId+0x7a>
        return ASN_OBJECT_ID_E;
 8010b36:	f06f 008f 	mvn.w	r0, #143	; 0x8f
 8010b3a:	e7f0      	b.n	8010b1e <GetAlgoId+0x7a>

08010b3c <ToTraditionalInline_ex>:
{
 8010b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3e:	460e      	mov	r6, r1
 8010b40:	b087      	sub	sp, #28
 8010b42:	4615      	mov	r5, r2
 8010b44:	461f      	mov	r7, r3
    if (input == NULL || inOutIdx == NULL)
 8010b46:	4604      	mov	r4, r0
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d042      	beq.n	8010bd2 <ToTraditionalInline_ex+0x96>
 8010b4c:	2900      	cmp	r1, #0
 8010b4e:	d040      	beq.n	8010bd2 <ToTraditionalInline_ex+0x96>
    idx = *inOutIdx;
 8010b50:	680b      	ldr	r3, [r1, #0]
 8010b52:	9303      	str	r3, [sp, #12]
    if (GetSequence(input, &idx, &length, sz) < 0)
 8010b54:	a903      	add	r1, sp, #12
 8010b56:	4613      	mov	r3, r2
 8010b58:	aa05      	add	r2, sp, #20
 8010b5a:	f7ff fc6e 	bl	801043a <GetSequence>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	da03      	bge.n	8010b6a <ToTraditionalInline_ex+0x2e>
        return ASN_PARSE_E;
 8010b62:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
 8010b66:	b007      	add	sp, #28
 8010b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (GetMyVersion(input, &idx, &version, sz) < 0)
 8010b6a:	462b      	mov	r3, r5
 8010b6c:	aa04      	add	r2, sp, #16
 8010b6e:	a903      	add	r1, sp, #12
 8010b70:	4620      	mov	r0, r4
 8010b72:	f7ff fce2 	bl	801053a <GetMyVersion>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	dbf3      	blt.n	8010b62 <ToTraditionalInline_ex+0x26>
    if (GetAlgoId(input, &idx, algId, oidKeyType, sz) < 0)
 8010b7a:	9500      	str	r5, [sp, #0]
 8010b7c:	2302      	movs	r3, #2
 8010b7e:	463a      	mov	r2, r7
 8010b80:	a903      	add	r1, sp, #12
 8010b82:	4620      	mov	r0, r4
 8010b84:	f7ff ff8e 	bl	8010aa4 <GetAlgoId>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	dbea      	blt.n	8010b62 <ToTraditionalInline_ex+0x26>
    if (GetASNTag(input, &idx, &tag, sz) < 0)
 8010b8c:	462b      	mov	r3, r5
 8010b8e:	f10d 020b 	add.w	r2, sp, #11
 8010b92:	a903      	add	r1, sp, #12
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7ff fc12 	bl	80103be <GetASNTag>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	dbe1      	blt.n	8010b62 <ToTraditionalInline_ex+0x26>
    idx = idx - 1; /* reset idx after finding tag */
 8010b9e:	9b03      	ldr	r3, [sp, #12]
 8010ba0:	3b01      	subs	r3, #1
 8010ba2:	9303      	str	r3, [sp, #12]
    if (tag == ASN_OBJECT_ID) {
 8010ba4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010ba8:	2b06      	cmp	r3, #6
 8010baa:	d00b      	beq.n	8010bc4 <ToTraditionalInline_ex+0x88>
    ret = GetOctetString(input, &idx, &length, sz);
 8010bac:	462b      	mov	r3, r5
 8010bae:	aa05      	add	r2, sp, #20
 8010bb0:	a903      	add	r1, sp, #12
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	f7ff fc4c 	bl	8010450 <GetOctetString>
        if (ret == BUFFER_E)
 8010bb8:	3084      	adds	r0, #132	; 0x84
 8010bba:	d0d2      	beq.n	8010b62 <ToTraditionalInline_ex+0x26>
    *inOutIdx = idx;
 8010bbc:	9b03      	ldr	r3, [sp, #12]
    return length;
 8010bbe:	9805      	ldr	r0, [sp, #20]
    *inOutIdx = idx;
 8010bc0:	6033      	str	r3, [r6, #0]
    return length;
 8010bc2:	e7d0      	b.n	8010b66 <ToTraditionalInline_ex+0x2a>
        if (SkipObjectId(input, &idx, sz) < 0)
 8010bc4:	462a      	mov	r2, r5
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f7ff ff25 	bl	8010a16 <SkipObjectId>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	daed      	bge.n	8010bac <ToTraditionalInline_ex+0x70>
 8010bd0:	e7c7      	b.n	8010b62 <ToTraditionalInline_ex+0x26>
        return BAD_FUNC_ARG;
 8010bd2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010bd6:	e7c6      	b.n	8010b66 <ToTraditionalInline_ex+0x2a>

08010bd8 <ExtractDate>:
{
 8010bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bdc:	4614      	mov	r4, r2
 8010bde:	460f      	mov	r7, r1
 8010be0:	4605      	mov	r5, r0
    XMEMSET(certTime, 0, sizeof(struct tm));
 8010be2:	2224      	movs	r2, #36	; 0x24
 8010be4:	2100      	movs	r1, #0
 8010be6:	4620      	mov	r0, r4
{
 8010be8:	461e      	mov	r6, r3
    XMEMSET(certTime, 0, sizeof(struct tm));
 8010bea:	f00a fa21 	bl	801b030 <memset>
    if (format == ASN_UTC_TIME) {
 8010bee:	2f17      	cmp	r7, #23
        if (GetTime(&certTime->tm_year, date, idx) != 0) return 0;
 8010bf0:	f104 0814 	add.w	r8, r4, #20
    if (format == ASN_UTC_TIME) {
 8010bf4:	d135      	bne.n	8010c62 <ExtractDate+0x8a>
        if (btoi(date[*idx]) >= 5)
 8010bf6:	6833      	ldr	r3, [r6, #0]
 8010bf8:	5ceb      	ldrb	r3, [r5, r3]
 8010bfa:	3b30      	subs	r3, #48	; 0x30
 8010bfc:	2b04      	cmp	r3, #4
            certTime->tm_year = 1900;
 8010bfe:	bf8c      	ite	hi
 8010c00:	f240 736c 	movwhi	r3, #1900	; 0x76c
            certTime->tm_year = 2000;
 8010c04:	f44f 63fa 	movls.w	r3, #2000	; 0x7d0
        certTime->tm_year *= 100;
 8010c08:	6163      	str	r3, [r4, #20]
    if (GetTime(&certTime->tm_year, date, idx) != 0) return 0;
 8010c0a:	4632      	mov	r2, r6
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	4640      	mov	r0, r8
 8010c10:	f7ff fb0e 	bl	8010230 <GetTime>
 8010c14:	bb58      	cbnz	r0, 8010c6e <ExtractDate+0x96>
    certTime->tm_year -= 1900;
 8010c16:	6963      	ldr	r3, [r4, #20]
 8010c18:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8010c1c:	6163      	str	r3, [r4, #20]
    if (GetTime(&certTime->tm_mon , date, idx) != 0) return 0;
 8010c1e:	4629      	mov	r1, r5
 8010c20:	f104 0010 	add.w	r0, r4, #16
 8010c24:	f7ff fb04 	bl	8010230 <GetTime>
 8010c28:	bb08      	cbnz	r0, 8010c6e <ExtractDate+0x96>
    certTime->tm_mon  -= 1;
 8010c2a:	6923      	ldr	r3, [r4, #16]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	6123      	str	r3, [r4, #16]
    if (GetTime(&certTime->tm_mday, date, idx) != 0) return 0;
 8010c30:	4629      	mov	r1, r5
 8010c32:	f104 000c 	add.w	r0, r4, #12
 8010c36:	f7ff fafb 	bl	8010230 <GetTime>
 8010c3a:	b9c0      	cbnz	r0, 8010c6e <ExtractDate+0x96>
    if (GetTime(&certTime->tm_hour, date, idx) != 0) return 0;
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	f104 0008 	add.w	r0, r4, #8
 8010c42:	f7ff faf5 	bl	8010230 <GetTime>
 8010c46:	b990      	cbnz	r0, 8010c6e <ExtractDate+0x96>
    if (GetTime(&certTime->tm_min , date, idx) != 0) return 0;
 8010c48:	4629      	mov	r1, r5
 8010c4a:	1d20      	adds	r0, r4, #4
 8010c4c:	f7ff faf0 	bl	8010230 <GetTime>
 8010c50:	b968      	cbnz	r0, 8010c6e <ExtractDate+0x96>
    if (GetTime(&certTime->tm_sec , date, idx) != 0) return 0;
 8010c52:	4629      	mov	r1, r5
 8010c54:	4620      	mov	r0, r4
 8010c56:	f7ff faeb 	bl	8010230 <GetTime>
 8010c5a:	fab0 f080 	clz	r0, r0
 8010c5e:	0940      	lsrs	r0, r0, #5
 8010c60:	e006      	b.n	8010c70 <ExtractDate+0x98>
        if (GetTime(&certTime->tm_year, date, idx) != 0) return 0;
 8010c62:	4632      	mov	r2, r6
 8010c64:	4629      	mov	r1, r5
 8010c66:	4640      	mov	r0, r8
 8010c68:	f7ff fae2 	bl	8010230 <GetTime>
 8010c6c:	b110      	cbz	r0, 8010c74 <ExtractDate+0x9c>
 8010c6e:	2000      	movs	r0, #0
}
 8010c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        certTime->tm_year *= 100;
 8010c74:	6963      	ldr	r3, [r4, #20]
 8010c76:	2264      	movs	r2, #100	; 0x64
 8010c78:	4353      	muls	r3, r2
 8010c7a:	e7c5      	b.n	8010c08 <ExtractDate+0x30>

08010c7c <wc_SetTimeCb>:
    timeFunc = f;
 8010c7c:	4b01      	ldr	r3, [pc, #4]	; (8010c84 <wc_SetTimeCb+0x8>)
 8010c7e:	6018      	str	r0, [r3, #0]
}
 8010c80:	2000      	movs	r0, #0
 8010c82:	4770      	bx	lr
 8010c84:	20000200 	.word	0x20000200

08010c88 <wc_Time>:
    if (timeFunc != NULL) {
 8010c88:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <wc_Time+0x18>)
{
 8010c8a:	b510      	push	{r4, lr}
    if (timeFunc != NULL) {
 8010c8c:	681c      	ldr	r4, [r3, #0]
 8010c8e:	b11c      	cbz	r4, 8010c98 <wc_Time+0x10>
        return timeFunc(t);
 8010c90:	4623      	mov	r3, r4
}
 8010c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return timeFunc(t);
 8010c96:	4718      	bx	r3
    return XTIME(t);
 8010c98:	f7ef f9cc 	bl	8000034 <my_time>
}
 8010c9c:	4621      	mov	r1, r4
 8010c9e:	bd10      	pop	{r4, pc}
 8010ca0:	20000200 	.word	0x20000200

08010ca4 <wc_GetTime>:
{
 8010ca4:	b510      	push	{r4, lr}
    if (timePtr == NULL) {
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	b140      	cbz	r0, 8010cbc <wc_GetTime+0x18>
    if ((word32)sizeof(time_t) > timeSize) {
 8010caa:	2907      	cmp	r1, #7
 8010cac:	d909      	bls.n	8010cc2 <wc_GetTime+0x1e>
    *ltime = wc_Time(0);
 8010cae:	2000      	movs	r0, #0
 8010cb0:	f7ff ffea 	bl	8010c88 <wc_Time>
 8010cb4:	e9c4 0100 	strd	r0, r1, [r4]
    return 0;
 8010cb8:	2000      	movs	r0, #0
}
 8010cba:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 8010cbc:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010cc0:	e7fb      	b.n	8010cba <wc_GetTime+0x16>
        return BUFFER_E;
 8010cc2:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8010cc6:	e7f8      	b.n	8010cba <wc_GetTime+0x16>

08010cc8 <wc_GetDateInfo>:
{
 8010cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ret = GetDateInfo(certDate, &idx, date, format, length, (word32)certDateSz);
 8010cca:	9101      	str	r1, [sp, #4]
 8010ccc:	9906      	ldr	r1, [sp, #24]
 8010cce:	9100      	str	r1, [sp, #0]
    word32 idx = 0;
 8010cd0:	2400      	movs	r4, #0
    ret = GetDateInfo(certDate, &idx, date, format, length, (word32)certDateSz);
 8010cd2:	a903      	add	r1, sp, #12
    word32 idx = 0;
 8010cd4:	9403      	str	r4, [sp, #12]
    ret = GetDateInfo(certDate, &idx, date, format, length, (word32)certDateSz);
 8010cd6:	f7ff fb30 	bl	801033a <GetDateInfo>
}
 8010cda:	b004      	add	sp, #16
 8010cdc:	bd10      	pop	{r4, pc}

08010cde <wc_GetDateAsCalendarTime>:
{
 8010cde:	b507      	push	{r0, r1, r2, lr}
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	461a      	mov	r2, r3
    int idx = 0;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	9301      	str	r3, [sp, #4]
    if (!ExtractDate(date, format, timearg, &idx))
 8010ce8:	ab01      	add	r3, sp, #4
 8010cea:	f7ff ff75 	bl	8010bd8 <ExtractDate>
        return ASN_TIME_E;
 8010cee:	2800      	cmp	r0, #0
}
 8010cf0:	bf0c      	ite	eq
 8010cf2:	f06f 0098 	mvneq.w	r0, #152	; 0x98
 8010cf6:	2000      	movne	r0, #0
 8010cf8:	b003      	add	sp, #12
 8010cfa:	f85d fb04 	ldr.w	pc, [sp], #4

08010cfe <SetLength>:
    if (length < ASN_LONG_LENGTH) {
 8010cfe:	287f      	cmp	r0, #127	; 0x7f
{
 8010d00:	b570      	push	{r4, r5, r6, lr}
    if (length < ASN_LONG_LENGTH) {
 8010d02:	d91c      	bls.n	8010d3e <SetLength+0x40>
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 8010d04:	0c03      	lsrs	r3, r0, #16
 8010d06:	d11e      	bne.n	8010d46 <SetLength+0x48>
 8010d08:	0a03      	lsrs	r3, r0, #8
 8010d0a:	bf0c      	ite	eq
 8010d0c:	2301      	moveq	r3, #1
 8010d0e:	2302      	movne	r3, #2
        byte j = (byte)BytePrecision(length);
 8010d10:	b2da      	uxtb	r2, r3
        if (output) {
 8010d12:	b111      	cbz	r1, 8010d1a <SetLength+0x1c>
            output[i] = (byte)(j | ASN_LONG_LENGTH);
 8010d14:	f062 047f 	orn	r4, r2, #127	; 0x7f
 8010d18:	700c      	strb	r4, [r1, #0]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	1c4d      	adds	r5, r1, #1
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
 8010d20:	4614      	mov	r4, r2
            if (output) {
 8010d22:	b111      	cbz	r1, 8010d2a <SetLength+0x2c>
                output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
 8010d24:	fa20 f603 	lsr.w	r6, r0, r3
 8010d28:	702e      	strb	r6, [r5, #0]
        for (; j > 0; --j) {
 8010d2a:	3c01      	subs	r4, #1
 8010d2c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8010d30:	f1a3 0308 	sub.w	r3, r3, #8
 8010d34:	f105 0501 	add.w	r5, r5, #1
 8010d38:	d1f3      	bne.n	8010d22 <SetLength+0x24>
            i++;
 8010d3a:	1c50      	adds	r0, r2, #1
}
 8010d3c:	bd70      	pop	{r4, r5, r6, pc}
        if (output) {
 8010d3e:	b101      	cbz	r1, 8010d42 <SetLength+0x44>
            output[i] = (byte)length;
 8010d40:	7008      	strb	r0, [r1, #0]
        i++;
 8010d42:	2001      	movs	r0, #1
    return i;
 8010d44:	e7fa      	b.n	8010d3c <SetLength+0x3e>
    for (i = (word32)sizeof(value) - 1; i; --i)
 8010d46:	2303      	movs	r3, #3
 8010d48:	e7e2      	b.n	8010d10 <SetLength+0x12>

08010d4a <SetASNInt>:
{
 8010d4a:	b538      	push	{r3, r4, r5, lr}
    if (output) {
 8010d4c:	4614      	mov	r4, r2
 8010d4e:	b10a      	cbz	r2, 8010d54 <SetASNInt+0xa>
        output[idx] = ASN_INTEGER;
 8010d50:	2302      	movs	r3, #2
 8010d52:	7013      	strb	r3, [r2, #0]
    if (firstByte & 0x80) {
 8010d54:	b24d      	sxtb	r5, r1
 8010d56:	2d00      	cmp	r5, #0
        len++;
 8010d58:	bfb8      	it	lt
 8010d5a:	3001      	addlt	r0, #1
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 8010d5c:	b164      	cbz	r4, 8010d78 <SetASNInt+0x2e>
 8010d5e:	1c61      	adds	r1, r4, #1
 8010d60:	f7ff ffcd 	bl	8010cfe <SetLength>
    if (firstByte & 0x80) {
 8010d64:	2d00      	cmp	r5, #0
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 8010d66:	4603      	mov	r3, r0
 8010d68:	f100 0001 	add.w	r0, r0, #1
    if (firstByte & 0x80) {
 8010d6c:	da03      	bge.n	8010d76 <SetASNInt+0x2c>
        if (output) {
 8010d6e:	b10c      	cbz	r4, 8010d74 <SetASNInt+0x2a>
            output[idx] = 0x00;
 8010d70:	2200      	movs	r2, #0
 8010d72:	5422      	strb	r2, [r4, r0]
        idx++;
 8010d74:	1c98      	adds	r0, r3, #2
}
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 8010d78:	4621      	mov	r1, r4
 8010d7a:	e7f1      	b.n	8010d60 <SetASNInt+0x16>

08010d7c <SetASNIntMP>:
{
 8010d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d80:	460d      	mov	r5, r1
 8010d82:	4680      	mov	r8, r0
 8010d84:	4617      	mov	r7, r2
    leadingBit = mp_leading_bit(n);
 8010d86:	f009 fae5 	bl	801a354 <mp_leading_bit>
 8010d8a:	4606      	mov	r6, r0
    length = mp_unsigned_bin_size(n);
 8010d8c:	4640      	mov	r0, r8
 8010d8e:	f008 faaa 	bl	80192e6 <mp_unsigned_bin_size>
    if (maxSz >= 0 && (1 + length + (leadingBit ? 1 : 0)) > maxSz)
 8010d92:	2d00      	cmp	r5, #0
    length = mp_unsigned_bin_size(n);
 8010d94:	4604      	mov	r4, r0
    if (maxSz >= 0 && (1 + length + (leadingBit ? 1 : 0)) > maxSz)
 8010d96:	db09      	blt.n	8010dac <SetASNIntMP+0x30>
 8010d98:	1c43      	adds	r3, r0, #1
 8010d9a:	2e00      	cmp	r6, #0
 8010d9c:	bf18      	it	ne
 8010d9e:	3301      	addne	r3, #1
 8010da0:	42ab      	cmp	r3, r5
 8010da2:	dd03      	ble.n	8010dac <SetASNIntMP+0x30>
        return BUFFER_E;
 8010da4:	f06f 0083 	mvn.w	r0, #131	; 0x83
}
 8010da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    idx = SetASNInt(length, (byte)(leadingBit ? 0x80U : 0x00U), output);
 8010dac:	2e00      	cmp	r6, #0
 8010dae:	bf14      	ite	ne
 8010db0:	2180      	movne	r1, #128	; 0x80
 8010db2:	2100      	moveq	r1, #0
 8010db4:	463a      	mov	r2, r7
 8010db6:	4620      	mov	r0, r4
 8010db8:	f7ff ffc7 	bl	8010d4a <SetASNInt>
    if (maxSz >= 0 && (idx + length) > maxSz)
 8010dbc:	2d00      	cmp	r5, #0
    idx = SetASNInt(length, (byte)(leadingBit ? 0x80U : 0x00U), output);
 8010dbe:	4606      	mov	r6, r0
    if (maxSz >= 0 && (idx + length) > maxSz)
 8010dc0:	db02      	blt.n	8010dc8 <SetASNIntMP+0x4c>
 8010dc2:	1823      	adds	r3, r4, r0
 8010dc4:	42ab      	cmp	r3, r5
 8010dc6:	dced      	bgt.n	8010da4 <SetASNIntMP+0x28>
    if (output) {
 8010dc8:	b90f      	cbnz	r7, 8010dce <SetASNIntMP+0x52>
    idx += length;
 8010dca:	19a0      	adds	r0, r4, r6
    return idx;
 8010dcc:	e7ec      	b.n	8010da8 <SetASNIntMP+0x2c>
        int err = mp_to_unsigned_bin(n, output + idx);
 8010dce:	19b9      	adds	r1, r7, r6
 8010dd0:	4640      	mov	r0, r8
 8010dd2:	f009 fab1 	bl	801a338 <mp_to_unsigned_bin>
        if (err != MP_OKAY)
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d0f7      	beq.n	8010dca <SetASNIntMP+0x4e>
            return MP_TO_E;
 8010dda:	f06f 0070 	mvn.w	r0, #112	; 0x70
 8010dde:	e7e3      	b.n	8010da8 <SetASNIntMP+0x2c>

08010de0 <SetBitString>:
{
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	460d      	mov	r5, r1
    if (output) {
 8010de4:	4614      	mov	r4, r2
 8010de6:	b10a      	cbz	r2, 8010dec <SetBitString+0xc>
        output[idx] = ASN_BIT_STRING;
 8010de8:	2303      	movs	r3, #3
 8010dea:	7013      	strb	r3, [r2, #0]
    idx += SetLength(len + 1, output ? output + idx : NULL);
 8010dec:	3001      	adds	r0, #1
 8010dee:	b13c      	cbz	r4, 8010e00 <SetBitString+0x20>
 8010df0:	1c61      	adds	r1, r4, #1
 8010df2:	f7ff ff84 	bl	8010cfe <SetLength>
    if (output) {
 8010df6:	b10c      	cbz	r4, 8010dfc <SetBitString+0x1c>
        output[idx] = unusedBits;
 8010df8:	4404      	add	r4, r0
 8010dfa:	7065      	strb	r5, [r4, #1]
}
 8010dfc:	3002      	adds	r0, #2
 8010dfe:	bd38      	pop	{r3, r4, r5, pc}
    idx += SetLength(len + 1, output ? output + idx : NULL);
 8010e00:	4621      	mov	r1, r4
 8010e02:	e7f6      	b.n	8010df2 <SetBitString+0x12>

08010e04 <SetObjectId>:
{
 8010e04:	b508      	push	{r3, lr}
    if (output) {
 8010e06:	b111      	cbz	r1, 8010e0e <SetObjectId+0xa>
        output[idx] = ASN_OBJECT_ID;
 8010e08:	2306      	movs	r3, #6
 8010e0a:	f801 3b01 	strb.w	r3, [r1], #1
    idx += (int)SetLength((word32)len, output ? output + idx : NULL);
 8010e0e:	f7ff ff76 	bl	8010cfe <SetLength>
}
 8010e12:	3001      	adds	r0, #1
 8010e14:	bd08      	pop	{r3, pc}

08010e16 <SetCurve>:
{
 8010e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e1a:	460f      	mov	r7, r1
 8010e1c:	4690      	mov	r8, r2
    if (key == NULL || key->dp == NULL) {
 8010e1e:	4606      	mov	r6, r0
 8010e20:	b198      	cbz	r0, 8010e4a <SetCurve+0x34>
 8010e22:	6903      	ldr	r3, [r0, #16]
 8010e24:	b18b      	cbz	r3, 8010e4a <SetCurve+0x34>
    oidSz = key->dp->oidSz;
 8010e26:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    idx = SetObjectId((int)oidSz, output);
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f7ff ffeb 	bl	8010e04 <SetObjectId>
 8010e2e:	4605      	mov	r5, r0
    if (output == NULL) {
 8010e30:	b917      	cbnz	r7, 8010e38 <SetCurve+0x22>
    idx += (int)oidSz;
 8010e32:	1960      	adds	r0, r4, r5
}
 8010e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (oidSz > outSz)
 8010e38:	4544      	cmp	r4, r8
 8010e3a:	d809      	bhi.n	8010e50 <SetCurve+0x3a>
    XMEMCPY(output+idx, key->dp->oid, oidSz);
 8010e3c:	6933      	ldr	r3, [r6, #16]
 8010e3e:	4622      	mov	r2, r4
 8010e40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010e42:	1838      	adds	r0, r7, r0
 8010e44:	f00a f8cc 	bl	801afe0 <memcpy>
 8010e48:	e7f3      	b.n	8010e32 <SetCurve+0x1c>
        return BAD_FUNC_ARG;
 8010e4a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8010e4e:	e7f1      	b.n	8010e34 <SetCurve+0x1e>
        return BUFFER_E;
 8010e50:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8010e54:	e7ee      	b.n	8010e34 <SetCurve+0x1e>

08010e56 <SetHeader>:
{
 8010e56:	b508      	push	{r3, lr}
 8010e58:	4603      	mov	r3, r0
 8010e5a:	4608      	mov	r0, r1
    if (output) {
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	b10a      	cbz	r2, 8010e64 <SetHeader+0xe>
        output[0] = tag;
 8010e60:	f801 3b01 	strb.w	r3, [r1], #1
    return SetLength(len, output ? output + ASN_TAG_SZ : NULL) + ASN_TAG_SZ;
 8010e64:	f7ff ff4b 	bl	8010cfe <SetLength>
}
 8010e68:	3001      	adds	r0, #1
 8010e6a:	bd08      	pop	{r3, pc}

08010e6c <SetSequence>:
{
 8010e6c:	460a      	mov	r2, r1
    return SetHeader(ASN_SEQUENCE | ASN_CONSTRUCTED, len, output);
 8010e6e:	4601      	mov	r1, r0
 8010e70:	2030      	movs	r0, #48	; 0x30
 8010e72:	f7ff bff0 	b.w	8010e56 <SetHeader>

08010e76 <SetOctetString>:
{
 8010e76:	460a      	mov	r2, r1
    return SetHeader(ASN_OCTET_STRING, len, output);
 8010e78:	4601      	mov	r1, r0
 8010e7a:	2004      	movs	r0, #4
 8010e7c:	f7ff bfeb 	b.w	8010e56 <SetHeader>

08010e80 <SetAlgoID>:
{
 8010e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e84:	b087      	sub	sp, #28
    word32 tagSz, idSz, seqSz, algoSz = 0;
 8010e86:	2400      	movs	r4, #0
{
 8010e88:	460e      	mov	r6, r1
 8010e8a:	4680      	mov	r8, r0
 8010e8c:	4699      	mov	r9, r3
    word32 tagSz, idSz, seqSz, algoSz = 0;
 8010e8e:	9401      	str	r4, [sp, #4]
             (type == oidKeyType && algoOID == RSAk)) ? 2U : 0U;
 8010e90:	4611      	mov	r1, r2
 8010e92:	2a00      	cmp	r2, #0
 8010e94:	d048      	beq.n	8010f28 <SetAlgoID+0xa8>
    tagSz = (type == oidHashType ||
 8010e96:	2a01      	cmp	r2, #1
 8010e98:	d13d      	bne.n	8010f16 <SetAlgoID+0x96>
    if (algoOID == CTC_SHAwECDSA || algoOID == CTC_SHA256wECDSA ||
 8010e9a:	f5b0 7f02 	cmp.w	r0, #520	; 0x208
 8010e9e:	d009      	beq.n	8010eb4 <SetAlgoID+0x34>
 8010ea0:	f5a0 7303 	sub.w	r3, r0, #524	; 0x20c
 8010ea4:	2b02      	cmp	r3, #2
 8010ea6:	d905      	bls.n	8010eb4 <SetAlgoID+0x34>
              || (algoOID == ED25519k)
 8010ea8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010eac:	d002      	beq.n	8010eb4 <SetAlgoID+0x34>
             (type == oidKeyType && algoOID == RSAk)) ? 2U : 0U;
 8010eae:	28fe      	cmp	r0, #254	; 0xfe
 8010eb0:	bf18      	it	ne
 8010eb2:	2402      	movne	r4, #2
    algoName = OidFromId((word32)algoOID, (word32)type, &algoSz);
 8010eb4:	aa01      	add	r2, sp, #4
 8010eb6:	4640      	mov	r0, r8
 8010eb8:	f7ff fbb6 	bl	8010628 <OidFromId>
    if (algoName == NULL) {
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	b338      	cbz	r0, 8010f10 <SetAlgoID+0x90>
    idSz  = (word32)SetObjectId((int)algoSz, ID_Length);
 8010ec0:	a902      	add	r1, sp, #8
 8010ec2:	9801      	ldr	r0, [sp, #4]
 8010ec4:	f7ff ff9e 	bl	8010e04 <SetObjectId>
 8010ec8:	4607      	mov	r7, r0
    seqSz = SetSequence(idSz + algoSz + tagSz + (word32)curveSz, seqArray);
 8010eca:	9801      	ldr	r0, [sp, #4]
 8010ecc:	4448      	add	r0, r9
 8010ece:	4420      	add	r0, r4
 8010ed0:	a904      	add	r1, sp, #16
 8010ed2:	4438      	add	r0, r7
 8010ed4:	f7ff ffca 	bl	8010e6c <SetSequence>
    if (algoOID == DSAk && output) {
 8010ed8:	f240 2303 	movw	r3, #515	; 0x203
 8010edc:	4598      	cmp	r8, r3
    seqSz = SetSequence(idSz + algoSz + tagSz + (word32)curveSz, seqArray);
 8010ede:	4681      	mov	r9, r0
    if (algoOID == DSAk && output) {
 8010ee0:	d124      	bne.n	8010f2c <SetAlgoID+0xac>
 8010ee2:	b196      	cbz	r6, 8010f0a <SetAlgoID+0x8a>
        XMEMCPY(output, ID_Length, idSz);
 8010ee4:	463a      	mov	r2, r7
 8010ee6:	a902      	add	r1, sp, #8
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f00a f879 	bl	801afe0 <memcpy>
        XMEMCPY(output + idSz, algoName, algoSz);
 8010eee:	9a01      	ldr	r2, [sp, #4]
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	19f0      	adds	r0, r6, r7
 8010ef4:	f00a f874 	bl	801afe0 <memcpy>
        if (tagSz == 2)
 8010ef8:	b13c      	cbz	r4, 8010f0a <SetAlgoID+0x8a>
            SetASNNull(&output[seqSz + idSz + algoSz]);
 8010efa:	9901      	ldr	r1, [sp, #4]
 8010efc:	4449      	add	r1, r9
 8010efe:	4439      	add	r1, r7
    output[0] = ASN_TAG_NULL;
 8010f00:	2205      	movs	r2, #5
            SetASNNull(&output[seqSz + idSz + algoSz]);
 8010f02:	1873      	adds	r3, r6, r1
    output[0] = ASN_TAG_NULL;
 8010f04:	5472      	strb	r2, [r6, r1]
    output[1] = 0;
 8010f06:	2200      	movs	r2, #0
 8010f08:	705a      	strb	r2, [r3, #1]
        length = idSz + algoSz + tagSz;
 8010f0a:	9901      	ldr	r1, [sp, #4]
 8010f0c:	4421      	add	r1, r4
        length = seqSz + idSz + algoSz + tagSz;
 8010f0e:	19c8      	adds	r0, r1, r7
}
 8010f10:	b007      	add	sp, #28
 8010f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             (type == oidSigType && !IsSigAlgoECC((word32)algoOID)) ||
 8010f16:	2a02      	cmp	r2, #2
 8010f18:	d1cc      	bne.n	8010eb4 <SetAlgoID+0x34>
             (type == oidKeyType && algoOID == RSAk)) ? 2U : 0U;
 8010f1a:	f240 2485 	movw	r4, #645	; 0x285
 8010f1e:	42a0      	cmp	r0, r4
 8010f20:	bf0c      	ite	eq
 8010f22:	2402      	moveq	r4, #2
 8010f24:	2400      	movne	r4, #0
 8010f26:	e7c5      	b.n	8010eb4 <SetAlgoID+0x34>
 8010f28:	2402      	movs	r4, #2
 8010f2a:	e7c3      	b.n	8010eb4 <SetAlgoID+0x34>
    else if (output) {
 8010f2c:	b1e6      	cbz	r6, 8010f68 <SetAlgoID+0xe8>
        XMEMCPY(output, seqArray, seqSz);
 8010f2e:	464a      	mov	r2, r9
 8010f30:	a904      	add	r1, sp, #16
 8010f32:	4630      	mov	r0, r6
 8010f34:	f00a f854 	bl	801afe0 <memcpy>
        XMEMCPY(output + seqSz + idSz, algoName, algoSz);
 8010f38:	eb07 0809 	add.w	r8, r7, r9
        XMEMCPY(output + seqSz, ID_Length, idSz);
 8010f3c:	463a      	mov	r2, r7
 8010f3e:	a902      	add	r1, sp, #8
 8010f40:	eb06 0009 	add.w	r0, r6, r9
 8010f44:	f00a f84c 	bl	801afe0 <memcpy>
        XMEMCPY(output + seqSz + idSz, algoName, algoSz);
 8010f48:	9a01      	ldr	r2, [sp, #4]
 8010f4a:	4629      	mov	r1, r5
 8010f4c:	eb06 0008 	add.w	r0, r6, r8
 8010f50:	f00a f846 	bl	801afe0 <memcpy>
        if (tagSz == 2)
 8010f54:	b144      	cbz	r4, 8010f68 <SetAlgoID+0xe8>
            SetASNNull(&output[seqSz + idSz + algoSz]);
 8010f56:	9b01      	ldr	r3, [sp, #4]
 8010f58:	4498      	add	r8, r3
    output[0] = ASN_TAG_NULL;
 8010f5a:	2205      	movs	r2, #5
            SetASNNull(&output[seqSz + idSz + algoSz]);
 8010f5c:	eb06 0308 	add.w	r3, r6, r8
    output[0] = ASN_TAG_NULL;
 8010f60:	f806 2008 	strb.w	r2, [r6, r8]
    output[1] = 0;
 8010f64:	2200      	movs	r2, #0
 8010f66:	705a      	strb	r2, [r3, #1]
        length = seqSz + idSz + algoSz + tagSz;
 8010f68:	9901      	ldr	r1, [sp, #4]
 8010f6a:	440c      	add	r4, r1
 8010f6c:	eb04 0109 	add.w	r1, r4, r9
 8010f70:	e7cd      	b.n	8010f0e <SetAlgoID+0x8e>

08010f72 <SetEccPublicKey>:
{
 8010f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f76:	461c      	mov	r4, r3
 8010f78:	b088      	sub	sp, #32
    pubSz = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 8010f7a:	690b      	ldr	r3, [r1, #16]
{
 8010f7c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8010f80:	4606      	mov	r6, r0
 8010f82:	460f      	mov	r7, r1
 8010f84:	4690      	mov	r8, r2
    pubSz = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 8010f86:	b17b      	cbz	r3, 8010fa8 <SetEccPublicKey+0x36>
 8010f88:	681b      	ldr	r3, [r3, #0]
    if (comp)
 8010f8a:	f1b9 0f00 	cmp.w	r9, #0
 8010f8e:	d00d      	beq.n	8010fac <SetEccPublicKey+0x3a>
        pubSz = 1 + 2 * pubSz;
 8010f90:	3301      	adds	r3, #1
 8010f92:	9300      	str	r3, [sp, #0]
    if (output != NULL && pubSz > (word32)outLen) {
 8010f94:	2e00      	cmp	r6, #0
 8010f96:	d05c      	beq.n	8011052 <SetEccPublicKey+0xe0>
 8010f98:	4598      	cmp	r8, r3
 8010f9a:	d209      	bcs.n	8010fb0 <SetEccPublicKey+0x3e>
        return BUFFER_E;
 8010f9c:	f06f 0583 	mvn.w	r5, #131	; 0x83
}
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	b008      	add	sp, #32
 8010fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pubSz = key->dp ? (word32)key->dp->size : MAX_ECC_BYTES;
 8010fa8:	2320      	movs	r3, #32
 8010faa:	e7ee      	b.n	8010f8a <SetEccPublicKey+0x18>
        pubSz = 1 + 2 * pubSz;
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	e7ef      	b.n	8010f90 <SetEccPublicKey+0x1e>
    if (with_header) {
 8010fb0:	2c00      	cmp	r4, #0
 8010fb2:	d042      	beq.n	801103a <SetEccPublicKey+0xc8>
        ret = SetCurve(key, NULL, 0);
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	4611      	mov	r1, r2
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f7ff ff2c 	bl	8010e16 <SetCurve>
        if (ret <= 0) {
 8010fbe:	1e05      	subs	r5, r0, #0
 8010fc0:	ddee      	ble.n	8010fa0 <SetEccPublicKey+0x2e>
        algoSz  = SetAlgoID(ECDSAk, algo, oidKeyType, (int)curveSz);
 8010fc2:	462b      	mov	r3, r5
 8010fc4:	2202      	movs	r2, #2
 8010fc6:	a903      	add	r1, sp, #12
 8010fc8:	f240 2006 	movw	r0, #518	; 0x206
 8010fcc:	f7ff ff58 	bl	8010e80 <SetAlgoID>
        bitStringSz = SetBitString(pubSz, 0, bitString);
 8010fd0:	aa01      	add	r2, sp, #4
        algoSz  = SetAlgoID(ECDSAk, algo, oidKeyType, (int)curveSz);
 8010fd2:	4682      	mov	sl, r0
        bitStringSz = SetBitString(pubSz, 0, bitString);
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	9800      	ldr	r0, [sp, #0]
 8010fd8:	f7ff ff02 	bl	8010de0 <SetBitString>
 8010fdc:	4604      	mov	r4, r0
        idx = SetSequence(pubSz + curveSz + bitStringSz + algoSz, NULL);
 8010fde:	9800      	ldr	r0, [sp, #0]
 8010fe0:	4428      	add	r0, r5
 8010fe2:	4450      	add	r0, sl
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	4420      	add	r0, r4
 8010fe8:	f7ff ff40 	bl	8010e6c <SetSequence>
        if (output != NULL &&
 8010fec:	9a00      	ldr	r2, [sp, #0]
 8010fee:	b12e      	cbz	r6, 8010ffc <SetEccPublicKey+0x8a>
                curveSz + algoSz + bitStringSz + idx + pubSz > (word32)outLen) {
 8010ff0:	18ab      	adds	r3, r5, r2
 8010ff2:	4453      	add	r3, sl
 8010ff4:	4423      	add	r3, r4
 8010ff6:	4418      	add	r0, r3
        if (output != NULL &&
 8010ff8:	4540      	cmp	r0, r8
 8010ffa:	d8cf      	bhi.n	8010f9c <SetEccPublicKey+0x2a>
        idx = SetSequence(pubSz + curveSz + bitStringSz + algoSz,
 8010ffc:	18a8      	adds	r0, r5, r2
 8010ffe:	4450      	add	r0, sl
 8011000:	4631      	mov	r1, r6
 8011002:	4420      	add	r0, r4
 8011004:	f7ff ff32 	bl	8010e6c <SetSequence>
 8011008:	4680      	mov	r8, r0
        if (output)
 801100a:	b126      	cbz	r6, 8011016 <SetEccPublicKey+0xa4>
            XMEMCPY(output + idx, algo, algoSz);
 801100c:	4652      	mov	r2, sl
 801100e:	a903      	add	r1, sp, #12
 8011010:	1830      	adds	r0, r6, r0
 8011012:	f009 ffe5 	bl	801afe0 <memcpy>
        idx += algoSz;
 8011016:	44c2      	add	sl, r8
        if (output)
 8011018:	b12e      	cbz	r6, 8011026 <SetEccPublicKey+0xb4>
            (void)SetCurve(key, output + idx, curveSz);
 801101a:	462a      	mov	r2, r5
 801101c:	eb06 010a 	add.w	r1, r6, sl
 8011020:	4638      	mov	r0, r7
 8011022:	f7ff fef8 	bl	8010e16 <SetCurve>
        idx += curveSz;
 8011026:	44aa      	add	sl, r5
        if (output)
 8011028:	b12e      	cbz	r6, 8011036 <SetEccPublicKey+0xc4>
            XMEMCPY(output + idx, bitString, bitStringSz);
 801102a:	4622      	mov	r2, r4
 801102c:	a901      	add	r1, sp, #4
 801102e:	eb06 000a 	add.w	r0, r6, sl
 8011032:	f009 ffd5 	bl	801afe0 <memcpy>
        idx += bitStringSz;
 8011036:	4454      	add	r4, sl
    if (output) {
 8011038:	b146      	cbz	r6, 801104c <SetEccPublicKey+0xda>
        ret = wc_ecc_export_x963_ex(key, output + idx, &pubSz, comp);
 801103a:	464b      	mov	r3, r9
 801103c:	466a      	mov	r2, sp
 801103e:	1931      	adds	r1, r6, r4
 8011040:	4638      	mov	r0, r7
 8011042:	f7fa fe07 	bl	800bc54 <wc_ecc_export_x963_ex>
        if (ret != 0) {
 8011046:	4605      	mov	r5, r0
 8011048:	2800      	cmp	r0, #0
 801104a:	d1a9      	bne.n	8010fa0 <SetEccPublicKey+0x2e>
    idx += pubSz;
 801104c:	9d00      	ldr	r5, [sp, #0]
 801104e:	4425      	add	r5, r4
    return (int)idx;
 8011050:	e7a6      	b.n	8010fa0 <SetEccPublicKey+0x2e>
    if (with_header) {
 8011052:	2c00      	cmp	r4, #0
 8011054:	d0fa      	beq.n	801104c <SetEccPublicKey+0xda>
 8011056:	e7ad      	b.n	8010fb4 <SetEccPublicKey+0x42>

08011058 <wc_EccPublicKeyToDer>:
{
 8011058:	b513      	push	{r0, r1, r4, lr}
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
    return SetEccPublicKey(output, key, (int)inLen, with_AlgCurve, 0);
 801105e:	2100      	movs	r1, #0
 8011060:	9100      	str	r1, [sp, #0]
 8011062:	4621      	mov	r1, r4
 8011064:	f7ff ff85 	bl	8010f72 <SetEccPublicKey>
}
 8011068:	b002      	add	sp, #8
 801106a:	bd10      	pop	{r4, pc}

0801106c <SetAsymKeyDerPublic>:
{
 801106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011070:	460d      	mov	r5, r1
 8011072:	e9dd 8408 	ldrd	r8, r4, [sp, #32]
 8011076:	4616      	mov	r6, r2
 8011078:	4699      	mov	r9, r3
    if (pubKey == NULL) {
 801107a:	4607      	mov	r7, r0
 801107c:	b398      	cbz	r0, 80110e6 <SetAsymKeyDerPublic+0x7a>
    if (withHeader) {
 801107e:	b37c      	cbz	r4, 80110e0 <SetAsymKeyDerPublic+0x74>
        word32 algoSz      = SetAlgoID(keyType, NULL, oidKeyType, 0);
 8011080:	2300      	movs	r3, #0
 8011082:	4619      	mov	r1, r3
 8011084:	2202      	movs	r2, #2
 8011086:	4640      	mov	r0, r8
 8011088:	f7ff fefa 	bl	8010e80 <SetAlgoID>
        word32 bitStringSz = SetBitString(pubKeyLen, 0, NULL);
 801108c:	2200      	movs	r2, #0
 801108e:	4611      	mov	r1, r2
        word32 algoSz      = SetAlgoID(keyType, NULL, oidKeyType, 0);
 8011090:	4682      	mov	sl, r0
        word32 bitStringSz = SetBitString(pubKeyLen, 0, NULL);
 8011092:	4628      	mov	r0, r5
 8011094:	f7ff fea4 	bl	8010de0 <SetBitString>
        seqDataSz = algoSz + bitStringSz + pubKeyLen;
 8011098:	4482      	add	sl, r0
 801109a:	44aa      	add	sl, r5
        sz = SetSequence(seqDataSz, NULL) + seqDataSz;
 801109c:	2100      	movs	r1, #0
 801109e:	4650      	mov	r0, sl
 80110a0:	f7ff fee4 	bl	8010e6c <SetSequence>
 80110a4:	4450      	add	r0, sl
    if (output != NULL && sz > outLen) {
 80110a6:	b306      	cbz	r6, 80110ea <SetAsymKeyDerPublic+0x7e>
 80110a8:	4548      	cmp	r0, r9
 80110aa:	d820      	bhi.n	80110ee <SetAsymKeyDerPublic+0x82>
    if (ret == 0 && output != NULL && withHeader) {
 80110ac:	b18c      	cbz	r4, 80110d2 <SetAsymKeyDerPublic+0x66>
        idx = SetSequence(seqDataSz, output);
 80110ae:	4631      	mov	r1, r6
 80110b0:	4650      	mov	r0, sl
 80110b2:	f7ff fedb 	bl	8010e6c <SetSequence>
        idx += SetAlgoID(keyType, output + idx, oidKeyType, 0);
 80110b6:	2300      	movs	r3, #0
 80110b8:	1831      	adds	r1, r6, r0
        idx = SetSequence(seqDataSz, output);
 80110ba:	4604      	mov	r4, r0
        idx += SetAlgoID(keyType, output + idx, oidKeyType, 0);
 80110bc:	2202      	movs	r2, #2
 80110be:	4640      	mov	r0, r8
 80110c0:	f7ff fede 	bl	8010e80 <SetAlgoID>
 80110c4:	4404      	add	r4, r0
        idx += SetBitString(pubKeyLen, 0, output + idx);
 80110c6:	1932      	adds	r2, r6, r4
 80110c8:	2100      	movs	r1, #0
 80110ca:	4628      	mov	r0, r5
 80110cc:	f7ff fe88 	bl	8010de0 <SetBitString>
 80110d0:	4404      	add	r4, r0
        XMEMCPY(output + idx, pubKey, pubKeyLen);
 80110d2:	462a      	mov	r2, r5
 80110d4:	4639      	mov	r1, r7
 80110d6:	1930      	adds	r0, r6, r4
 80110d8:	f009 ff82 	bl	801afe0 <memcpy>
        idx += pubKeyLen;
 80110dc:	1928      	adds	r0, r5, r4
        sz = idx;
 80110de:	e004      	b.n	80110ea <SetAsymKeyDerPublic+0x7e>
        sz = pubKeyLen;
 80110e0:	4608      	mov	r0, r1
    word32 seqDataSz = 0;
 80110e2:	46a2      	mov	sl, r4
 80110e4:	e7df      	b.n	80110a6 <SetAsymKeyDerPublic+0x3a>
        return BAD_FUNC_ARG;
 80110e6:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 80110ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = BUFFER_E;
 80110ee:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80110f2:	e7fa      	b.n	80110ea <SetAsymKeyDerPublic+0x7e>

080110f4 <wc_GetCTC_HashOID>:
{
 80110f4:	b508      	push	{r3, lr}
    hType = wc_HashTypeConvert(type);
 80110f6:	f006 fb57 	bl	80177a8 <wc_HashTypeConvert>
    ret = wc_HashGetOID(hType);
 80110fa:	f006 fb5b 	bl	80177b4 <wc_HashGetOID>
}
 80110fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011102:	bd08      	pop	{r3, pc}

08011104 <SetMyVersion>:
{
 8011104:	4603      	mov	r3, r0
    if (output == NULL)
 8011106:	b169      	cbz	r1, 8011124 <SetMyVersion+0x20>
    if (header) {
 8011108:	b122      	cbz	r2, 8011114 <SetMyVersion+0x10>
        output[i++] = ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED;
 801110a:	22a0      	movs	r2, #160	; 0xa0
 801110c:	700a      	strb	r2, [r1, #0]
        output[i++] = 3;
 801110e:	2203      	movs	r2, #3
 8011110:	704a      	strb	r2, [r1, #1]
 8011112:	2202      	movs	r2, #2
    output[i++] = ASN_INTEGER;
 8011114:	2002      	movs	r0, #2
 8011116:	5488      	strb	r0, [r1, r2]
    output[i++] = 0x01;
 8011118:	4411      	add	r1, r2
 801111a:	2001      	movs	r0, #1
 801111c:	7048      	strb	r0, [r1, #1]
    output[i++] = (byte)version;
 801111e:	708b      	strb	r3, [r1, #2]
 8011120:	1cd0      	adds	r0, r2, #3
    return i;
 8011122:	4770      	bx	lr
        return BAD_FUNC_ARG;
 8011124:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8011128:	4770      	bx	lr

0801112a <wc_CreatePKCS8Key>:
{
 801112a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801112e:	461f      	mov	r7, r3
 8011130:	b087      	sub	sp, #28
    word32 keyIdx = 0;
 8011132:	2300      	movs	r3, #0
{
 8011134:	e9dd 4611 	ldrd	r4, r6, [sp, #68]	; 0x44
    word32 tmpAlgId = 0;
 8011138:	e9cd 3303 	strd	r3, r3, [sp, #12]
{
 801113c:	4689      	mov	r9, r1
 801113e:	4693      	mov	fp, r2
    if (out == NULL && outSz != NULL) {
 8011140:	4680      	mov	r8, r0
 8011142:	2800      	cmp	r0, #0
 8011144:	f040 8086 	bne.w	8011254 <wc_CreatePKCS8Key+0x12a>
 8011148:	2900      	cmp	r1, #0
 801114a:	f000 8085 	beq.w	8011258 <wc_CreatePKCS8Key+0x12e>
                 + MAX_LENGTH_SZ + MAX_LENGTH_SZ + 2;
 801114e:	3728      	adds	r7, #40	; 0x28
        if (curveOID != NULL)
 8011150:	b92c      	cbnz	r4, 801115e <wc_CreatePKCS8Key+0x34>
        *outSz = keySz + MAX_SEQ_SZ + MAX_VERSION_SZ + MAX_ALGO_SZ
 8011152:	600f      	str	r7, [r1, #0]
        return LENGTH_ONLY_E;
 8011154:	f06f 00c9 	mvn.w	r0, #201	; 0xc9
}
 8011158:	b007      	add	sp, #28
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *outSz += oidSz + MAX_LENGTH_SZ + 1;
 801115e:	3605      	adds	r6, #5
 8011160:	443e      	add	r6, r7
 8011162:	600e      	str	r6, [r1, #0]
 8011164:	e7f6      	b.n	8011154 <wc_CreatePKCS8Key+0x2a>
    if (key == NULL || out == NULL || outSz == NULL) {
 8011166:	f1b9 0f00 	cmp.w	r9, #0
 801116a:	d075      	beq.n	8011258 <wc_CreatePKCS8Key+0x12e>
        if (*outSz < (keySz + MAX_SEQ_SZ + MAX_VERSION_SZ + MAX_ALGO_SZ
 801116c:	f8d9 2000 	ldr.w	r2, [r9]
    if (curveOID != NULL) {
 8011170:	b13c      	cbz	r4, 8011182 <wc_CreatePKCS8Key+0x58>
               + MAX_LENGTH_SZ + MAX_LENGTH_SZ + 3 + oidSz + MAX_LENGTH_SZ))
 8011172:	f106 032d 	add.w	r3, r6, #45	; 0x2d
 8011176:	443b      	add	r3, r7
        if (*outSz < (keySz + MAX_SEQ_SZ + MAX_VERSION_SZ + MAX_ALGO_SZ
 8011178:	4293      	cmp	r3, r2
 801117a:	d907      	bls.n	801118c <wc_CreatePKCS8Key+0x62>
            return BUFFER_E;
 801117c:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8011180:	e7ea      	b.n	8011158 <wc_CreatePKCS8Key+0x2e>
                  + MAX_LENGTH_SZ + MAX_LENGTH_SZ + 2))
 8011182:	f107 0328 	add.w	r3, r7, #40	; 0x28
        if (*outSz < (keySz + MAX_SEQ_SZ + MAX_VERSION_SZ + MAX_ALGO_SZ
 8011186:	4293      	cmp	r3, r2
 8011188:	d8f8      	bhi.n	801117c <wc_CreatePKCS8Key+0x52>
        oidSz = 0; /* with no curveOID oid size must be 0 */
 801118a:	4626      	mov	r6, r4
    if (ToTraditionalInline_ex(key, &keyIdx, keySz, &tmpAlgId) >= 0) {
 801118c:	ab04      	add	r3, sp, #16
 801118e:	463a      	mov	r2, r7
 8011190:	a903      	add	r1, sp, #12
 8011192:	4658      	mov	r0, fp
 8011194:	f7ff fcd2 	bl	8010b3c <ToTraditionalInline_ex>
 8011198:	2800      	cmp	r0, #0
 801119a:	da58      	bge.n	801124e <wc_CreatePKCS8Key+0x124>
    keyIdx = MAX_SEQ_SZ; /* save room for sequence */
 801119c:	2305      	movs	r3, #5
    sz = (word32)SetMyVersion(PKCS8v0, out + keyIdx, 0);
 801119e:	eb08 0a03 	add.w	sl, r8, r3
 80111a2:	2200      	movs	r2, #0
 80111a4:	4651      	mov	r1, sl
 80111a6:	4610      	mov	r0, r2
    keyIdx = MAX_SEQ_SZ; /* save room for sequence */
 80111a8:	9303      	str	r3, [sp, #12]
    sz = (word32)SetMyVersion(PKCS8v0, out + keyIdx, 0);
 80111aa:	f7ff ffab 	bl	8011104 <SetMyVersion>
    tmpSz += sz; keyIdx += sz;
 80111ae:	9b03      	ldr	r3, [sp, #12]
 80111b0:	4403      	add	r3, r0
    sz = (word32)SetMyVersion(PKCS8v0, out + keyIdx, 0);
 80111b2:	4605      	mov	r5, r0
    tmpSz += sz; keyIdx += sz;
 80111b4:	9303      	str	r3, [sp, #12]
    if (curveOID != NULL && oidSz > 0) {
 80111b6:	2c00      	cmp	r4, #0
 80111b8:	d045      	beq.n	8011246 <wc_CreatePKCS8Key+0x11c>
 80111ba:	2e00      	cmp	r6, #0
 80111bc:	d045      	beq.n	801124a <wc_CreatePKCS8Key+0x120>
        sz = SetLength(oidSz, buf);
 80111be:	a905      	add	r1, sp, #20
 80111c0:	4630      	mov	r0, r6
 80111c2:	f7ff fd9c 	bl	8010cfe <SetLength>
        sz += 1; /* plus one for ASN object id */
 80111c6:	1c43      	adds	r3, r0, #1
    sz = (word32)SetAlgoID(algoID, out + keyIdx, oidKeyType, (int)(oidSz + sz));
 80111c8:	9903      	ldr	r1, [sp, #12]
 80111ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80111cc:	4441      	add	r1, r8
 80111ce:	4433      	add	r3, r6
 80111d0:	2202      	movs	r2, #2
 80111d2:	f7ff fe55 	bl	8010e80 <SetAlgoID>
    tmpSz += sz; keyIdx += sz;
 80111d6:	9903      	ldr	r1, [sp, #12]
 80111d8:	4401      	add	r1, r0
 80111da:	4405      	add	r5, r0
 80111dc:	9103      	str	r1, [sp, #12]
    if (curveOID != NULL && oidSz > 0) {
 80111de:	b1a4      	cbz	r4, 801120a <wc_CreatePKCS8Key+0xe0>
 80111e0:	b19e      	cbz	r6, 801120a <wc_CreatePKCS8Key+0xe0>
        sz = (word32)SetObjectId((int)oidSz, out + keyIdx);
 80111e2:	4441      	add	r1, r8
 80111e4:	4630      	mov	r0, r6
 80111e6:	f7ff fe0d 	bl	8010e04 <SetObjectId>
 80111ea:	4603      	mov	r3, r0
        keyIdx += sz; tmpSz += sz;
 80111ec:	9803      	ldr	r0, [sp, #12]
 80111ee:	9301      	str	r3, [sp, #4]
 80111f0:	4418      	add	r0, r3
 80111f2:	9003      	str	r0, [sp, #12]
        XMEMCPY(out + keyIdx, curveOID, oidSz);
 80111f4:	4632      	mov	r2, r6
 80111f6:	4621      	mov	r1, r4
 80111f8:	4440      	add	r0, r8
 80111fa:	f009 fef1 	bl	801afe0 <memcpy>
        keyIdx += oidSz; tmpSz += oidSz;
 80111fe:	9a03      	ldr	r2, [sp, #12]
 8011200:	9b01      	ldr	r3, [sp, #4]
 8011202:	4435      	add	r5, r6
 8011204:	4432      	add	r2, r6
 8011206:	9203      	str	r2, [sp, #12]
 8011208:	441d      	add	r5, r3
    sz = (word32)SetOctetString(keySz, out + keyIdx);
 801120a:	9903      	ldr	r1, [sp, #12]
 801120c:	4638      	mov	r0, r7
 801120e:	4441      	add	r1, r8
 8011210:	f7ff fe31 	bl	8010e76 <SetOctetString>
    keyIdx += sz; tmpSz += sz;
 8011214:	9b03      	ldr	r3, [sp, #12]
 8011216:	182c      	adds	r4, r5, r0
 8011218:	4403      	add	r3, r0
    XMEMCPY(out + keyIdx, key, keySz);
 801121a:	463a      	mov	r2, r7
 801121c:	eb08 0003 	add.w	r0, r8, r3
    tmpSz += keySz;
 8011220:	443c      	add	r4, r7
    XMEMCPY(out + keyIdx, key, keySz);
 8011222:	4659      	mov	r1, fp
    keyIdx += sz; tmpSz += sz;
 8011224:	9303      	str	r3, [sp, #12]
    XMEMCPY(out + keyIdx, key, keySz);
 8011226:	f009 fedb 	bl	801afe0 <memcpy>
    sz = SetSequence(tmpSz, out);
 801122a:	4641      	mov	r1, r8
 801122c:	4620      	mov	r0, r4
 801122e:	f7ff fe1d 	bl	8010e6c <SetSequence>
    XMEMMOVE(out + sz, out + MAX_SEQ_SZ, tmpSz);
 8011232:	4622      	mov	r2, r4
    sz = SetSequence(tmpSz, out);
 8011234:	4605      	mov	r5, r0
    XMEMMOVE(out + sz, out + MAX_SEQ_SZ, tmpSz);
 8011236:	4651      	mov	r1, sl
 8011238:	4440      	add	r0, r8
 801123a:	f009 fedf 	bl	801affc <memmove>
    *outSz = tmpSz + sz;
 801123e:	1960      	adds	r0, r4, r5
 8011240:	f8c9 0000 	str.w	r0, [r9]
    return (int)(tmpSz + sz);
 8011244:	e788      	b.n	8011158 <wc_CreatePKCS8Key+0x2e>
    sz = 0; /* set sz to 0 and get privateKey oid buffer size needed */
 8011246:	4623      	mov	r3, r4
 8011248:	e7be      	b.n	80111c8 <wc_CreatePKCS8Key+0x9e>
 801124a:	4633      	mov	r3, r6
 801124c:	e7bc      	b.n	80111c8 <wc_CreatePKCS8Key+0x9e>
        return ASN_PARSE_E;
 801124e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8011252:	e781      	b.n	8011158 <wc_CreatePKCS8Key+0x2e>
    if (key == NULL || out == NULL || outSz == NULL) {
 8011254:	2a00      	cmp	r2, #0
 8011256:	d186      	bne.n	8011166 <wc_CreatePKCS8Key+0x3c>
        return BAD_FUNC_ARG;
 8011258:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801125c:	e77c      	b.n	8011158 <wc_CreatePKCS8Key+0x2e>

0801125e <StoreECC_DSA_Sig>:
{
 801125e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011262:	4680      	mov	r8, r0
    int rLeadingZero = mp_leading_bit(r);
 8011264:	4610      	mov	r0, r2
{
 8011266:	461f      	mov	r7, r3
 8011268:	460e      	mov	r6, r1
 801126a:	4691      	mov	r9, r2
    int rLeadingZero = mp_leading_bit(r);
 801126c:	f009 f872 	bl	801a354 <mp_leading_bit>
 8011270:	4605      	mov	r5, r0
    int sLeadingZero = mp_leading_bit(s);
 8011272:	4638      	mov	r0, r7
 8011274:	f009 f86e 	bl	801a354 <mp_leading_bit>
 8011278:	4604      	mov	r4, r0
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
 801127a:	4648      	mov	r0, r9
 801127c:	f008 f833 	bl	80192e6 <mp_unsigned_bin_size>
 8011280:	4682      	mov	sl, r0
    int sLen = mp_unsigned_bin_size(s);
 8011282:	4638      	mov	r0, r7
 8011284:	f008 f82f 	bl	80192e6 <mp_unsigned_bin_size>
    if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
 8011288:	4455      	add	r5, sl
 801128a:	4405      	add	r5, r0
 801128c:	442c      	add	r4, r5
 801128e:	6833      	ldr	r3, [r6, #0]
 8011290:	1d20      	adds	r0, r4, #4
            headerSz + 2)))  /* SEQ_TAG + LEN(ENUM) */
 8011292:	3406      	adds	r4, #6
    if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
 8011294:	42a3      	cmp	r3, r4
 8011296:	d31b      	bcc.n	80112d0 <StoreECC_DSA_Sig+0x72>
    idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
 8011298:	4641      	mov	r1, r8
 801129a:	f7ff fde7 	bl	8010e6c <SetSequence>
    rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
 801129e:	6831      	ldr	r1, [r6, #0]
 80112a0:	eb08 0200 	add.w	r2, r8, r0
 80112a4:	1a09      	subs	r1, r1, r0
    idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
 80112a6:	4604      	mov	r4, r0
    rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
 80112a8:	4648      	mov	r0, r9
 80112aa:	f7ff fd67 	bl	8010d7c <SetASNIntMP>
    if (rSz < 0)
 80112ae:	2800      	cmp	r0, #0
 80112b0:	db0c      	blt.n	80112cc <StoreECC_DSA_Sig+0x6e>
    sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
 80112b2:	6831      	ldr	r1, [r6, #0]
    idx += (word32)rSz;
 80112b4:	4404      	add	r4, r0
    sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
 80112b6:	eb08 0204 	add.w	r2, r8, r4
 80112ba:	1b09      	subs	r1, r1, r4
 80112bc:	4638      	mov	r0, r7
 80112be:	f7ff fd5d 	bl	8010d7c <SetASNIntMP>
    if (sSz < 0)
 80112c2:	2800      	cmp	r0, #0
 80112c4:	db02      	blt.n	80112cc <StoreECC_DSA_Sig+0x6e>
    idx += (word32)sSz;
 80112c6:	4420      	add	r0, r4
    *outLen = idx;
 80112c8:	6030      	str	r0, [r6, #0]
    return 0;
 80112ca:	2000      	movs	r0, #0
}
 80112cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BUFFER_E;
 80112d0:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80112d4:	e7fa      	b.n	80112cc <StoreECC_DSA_Sig+0x6e>

080112d6 <StoreECC_DSA_Sig_Bin>:

/* Der Encode r & s ints into out, outLen is (in/out) size */
/* All input/outputs are assumed to be big-endian */
int StoreECC_DSA_Sig_Bin(byte* out, word32* outLen, const byte* r, word32 rLen,
    const byte* s, word32 sLen)
{
 80112d6:	e92d 4fb3 	stmdb	sp!, {r0, r1, r4, r5, r7, r8, r9, sl, fp, lr}
 80112da:	4688      	mov	r8, r1
 80112dc:	9201      	str	r2, [sp, #4]
 80112de:	4619      	mov	r1, r3
    int ret;
    word32 idx;
    word32 headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */
    word32 rAddLeadZero, sAddLeadZero;

    if ((out == NULL) || (outLen == NULL) || (r == NULL) || (s == NULL))
 80112e0:	4607      	mov	r7, r0
 80112e2:	2800      	cmp	r0, #0
 80112e4:	d05c      	beq.n	80113a0 <StoreECC_DSA_Sig_Bin+0xca>
 80112e6:	f1b8 0f00 	cmp.w	r8, #0
 80112ea:	d059      	beq.n	80113a0 <StoreECC_DSA_Sig_Bin+0xca>
 80112ec:	2a00      	cmp	r2, #0
 80112ee:	d057      	beq.n	80113a0 <StoreECC_DSA_Sig_Bin+0xca>
 80112f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d054      	beq.n	80113a0 <StoreECC_DSA_Sig_Bin+0xca>
        return BAD_FUNC_ARG;

    /* Trim leading zeros */
    rLen = trim_leading_zeros(&r, rLen);
 80112f6:	a801      	add	r0, sp, #4
 80112f8:	f7fe ffb7 	bl	801026a <trim_leading_zeros>
    sLen = trim_leading_zeros(&s, sLen);
 80112fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    rLen = trim_leading_zeros(&r, rLen);
 80112fe:	4604      	mov	r4, r0
    sLen = trim_leading_zeros(&s, sLen);
 8011300:	a80a      	add	r0, sp, #40	; 0x28
 8011302:	f7fe ffb2 	bl	801026a <trim_leading_zeros>
 8011306:	4681      	mov	r9, r0
    if (sz > 0)
 8011308:	2c00      	cmp	r4, #0
 801130a:	d045      	beq.n	8011398 <StoreECC_DSA_Sig_Bin+0xc2>
        c = input[0];
 801130c:	9b01      	ldr	r3, [sp, #4]
 801130e:	781b      	ldrb	r3, [r3, #0]
    return (c & 0x80) != 0;
 8011310:	fa4f fb83 	sxtb.w	fp, r3
 8011314:	09da      	lsrs	r2, r3, #7
    if (sz > 0)
 8011316:	f1b9 0f00 	cmp.w	r9, #0
 801131a:	d03f      	beq.n	801139c <StoreECC_DSA_Sig_Bin+0xc6>
        c = input[0];
 801131c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801131e:	7819      	ldrb	r1, [r3, #0]
    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    /* Add leading zero if MSB is set */
    rAddLeadZero = is_leading_bit_set(r, rLen);
    sAddLeadZero = is_leading_bit_set(s, sLen);

    if (*outLen < (rLen + rAddLeadZero + sLen + sAddLeadZero +
 8011320:	eb04 0309 	add.w	r3, r4, r9
 8011324:	4413      	add	r3, r2
 8011326:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 801132a:	f8d8 2000 	ldr.w	r2, [r8]
 801132e:	1d18      	adds	r0, r3, #4
                   headerSz + 2))  /* SEQ_TAG + LEN(ENUM) */
 8011330:	3306      	adds	r3, #6
    if (*outLen < (rLen + rAddLeadZero + sLen + sAddLeadZero +
 8011332:	429a      	cmp	r2, r3
    return (c & 0x80) != 0;
 8011334:	fa4f fa81 	sxtb.w	sl, r1
    if (*outLen < (rLen + rAddLeadZero + sLen + sAddLeadZero +
 8011338:	d335      	bcc.n	80113a6 <StoreECC_DSA_Sig_Bin+0xd0>
        return BUFFER_E;

    idx = SetSequence(rLen+rAddLeadZero + sLen+sAddLeadZero + headerSz, out);
 801133a:	4639      	mov	r1, r7
 801133c:	f7ff fd96 	bl	8010e6c <SetSequence>

    /* store r */
    ret = SetASNInt((int)rLen, (byte)(rAddLeadZero ? 0x80U : 0x00U), &out[idx]);
 8011340:	f1bb 0f00 	cmp.w	fp, #0
 8011344:	eb07 0200 	add.w	r2, r7, r0
 8011348:	bfb4      	ite	lt
 801134a:	2180      	movlt	r1, #128	; 0x80
 801134c:	2100      	movge	r1, #0
    idx = SetSequence(rLen+rAddLeadZero + sLen+sAddLeadZero + headerSz, out);
 801134e:	4605      	mov	r5, r0
    ret = SetASNInt((int)rLen, (byte)(rAddLeadZero ? 0x80U : 0x00U), &out[idx]);
 8011350:	4620      	mov	r0, r4
 8011352:	f7ff fcfa 	bl	8010d4a <SetASNInt>
    if (ret < 0)
 8011356:	2800      	cmp	r0, #0
 8011358:	db1b      	blt.n	8011392 <StoreECC_DSA_Sig_Bin+0xbc>
        return ret;
    idx += (word32)ret;
 801135a:	4405      	add	r5, r0
    XMEMCPY(&out[idx], r, rLen);
 801135c:	9901      	ldr	r1, [sp, #4]
 801135e:	4622      	mov	r2, r4
 8011360:	1978      	adds	r0, r7, r5
 8011362:	f009 fe3d 	bl	801afe0 <memcpy>
    idx += rLen;
 8011366:	442c      	add	r4, r5

    /* store s */
    ret = SetASNInt((int)sLen, (byte)(sAddLeadZero ? 0x80U : 0x00U), &out[idx]);
 8011368:	f1ba 0f00 	cmp.w	sl, #0
 801136c:	bfb4      	ite	lt
 801136e:	2180      	movlt	r1, #128	; 0x80
 8011370:	2100      	movge	r1, #0
 8011372:	193a      	adds	r2, r7, r4
 8011374:	4648      	mov	r0, r9
 8011376:	f7ff fce8 	bl	8010d4a <SetASNInt>
    if (ret < 0)
 801137a:	2800      	cmp	r0, #0
 801137c:	db09      	blt.n	8011392 <StoreECC_DSA_Sig_Bin+0xbc>
        return ret;
    idx += (word32)ret;
 801137e:	4404      	add	r4, r0
    XMEMCPY(&out[idx], s, sLen);
 8011380:	1938      	adds	r0, r7, r4
 8011382:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011384:	464a      	mov	r2, r9
    idx += sLen;
 8011386:	444c      	add	r4, r9
    XMEMCPY(&out[idx], s, sLen);
 8011388:	f009 fe2a 	bl	801afe0 <memcpy>

    *outLen = idx;
 801138c:	f8c8 4000 	str.w	r4, [r8]

    return 0;
 8011390:	2000      	movs	r0, #0
        *outLen = (word32)sz;
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8011392:	b002      	add	sp, #8
 8011394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    byte c = 0;
 8011398:	4623      	mov	r3, r4
 801139a:	e7b9      	b.n	8011310 <StoreECC_DSA_Sig_Bin+0x3a>
 801139c:	4649      	mov	r1, r9
 801139e:	e7bf      	b.n	8011320 <StoreECC_DSA_Sig_Bin+0x4a>
        return BAD_FUNC_ARG;
 80113a0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80113a4:	e7f5      	b.n	8011392 <StoreECC_DSA_Sig_Bin+0xbc>
        return BUFFER_E;
 80113a6:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80113aa:	e7f2      	b.n	8011392 <StoreECC_DSA_Sig_Bin+0xbc>

080113ac <DecodeECC_DSA_Sig_Bin>:

/* Der Decode ECC-DSA Signature with R/S as unsigned bin */
/* All input/outputs are assumed to be big-endian */
int DecodeECC_DSA_Sig_Bin(const byte* sig, word32 sigLen, byte* r, word32* rLen,
    byte* s, word32* sLen)
{
 80113ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80113b0:	4698      	mov	r8, r3
#ifndef WOLFSSL_ASN_TEMPLATE
    int    ret;
    word32 idx = 0;
 80113b2:	2300      	movs	r3, #0
    int    len = 0;
 80113b4:	e9cd 3300 	strd	r3, r3, [sp]
{
 80113b8:	460d      	mov	r5, r1

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 80113ba:	460b      	mov	r3, r1
{
 80113bc:	4617      	mov	r7, r2
    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 80113be:	4669      	mov	r1, sp
 80113c0:	aa01      	add	r2, sp, #4
{
 80113c2:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 80113c6:	4606      	mov	r6, r0
    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 80113c8:	f7ff f837 	bl	801043a <GetSequence>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	da05      	bge.n	80113dc <DecodeECC_DSA_Sig_Bin+0x30>
        return ASN_ECC_KEY_E;
 80113d0:	f06f 04aa 	mvn.w	r4, #170	; 0xaa

    /* Decode the DSA signature. */
    return GetASN_Items(dsaSigASN, dataASN, dsaSigASN_Length, 1, sig, &idx,
                        sigLen);
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 80113d4:	4620      	mov	r0, r4
 80113d6:	b002      	add	sp, #8
 80113d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sigLen != idx + (word32)len) {
 80113dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80113e0:	4413      	add	r3, r2
 80113e2:	42ab      	cmp	r3, r5
 80113e4:	d1f4      	bne.n	80113d0 <DecodeECC_DSA_Sig_Bin+0x24>
    ret = GetASNInt(sig, &idx, &len, sigLen);
 80113e6:	462b      	mov	r3, r5
 80113e8:	aa01      	add	r2, sp, #4
 80113ea:	4669      	mov	r1, sp
 80113ec:	4630      	mov	r0, r6
 80113ee:	f7ff f83a 	bl	8010466 <GetASNInt>
    if (ret != 0)
 80113f2:	4604      	mov	r4, r0
 80113f4:	2800      	cmp	r0, #0
 80113f6:	d1ed      	bne.n	80113d4 <DecodeECC_DSA_Sig_Bin+0x28>
        *rLen = (word32)len;
 80113f8:	9a01      	ldr	r2, [sp, #4]
    if (rLen)
 80113fa:	f1b8 0f00 	cmp.w	r8, #0
 80113fe:	d001      	beq.n	8011404 <DecodeECC_DSA_Sig_Bin+0x58>
        *rLen = (word32)len;
 8011400:	f8c8 2000 	str.w	r2, [r8]
    if (r)
 8011404:	b127      	cbz	r7, 8011410 <DecodeECC_DSA_Sig_Bin+0x64>
        XMEMCPY(r, (byte*)sig + idx, (size_t)len);
 8011406:	9900      	ldr	r1, [sp, #0]
 8011408:	4638      	mov	r0, r7
 801140a:	4431      	add	r1, r6
 801140c:	f009 fde8 	bl	801afe0 <memcpy>
    idx += (word32)len;
 8011410:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011414:	4413      	add	r3, r2
 8011416:	9300      	str	r3, [sp, #0]
    ret = GetASNInt(sig, &idx, &len, sigLen);
 8011418:	aa01      	add	r2, sp, #4
 801141a:	462b      	mov	r3, r5
 801141c:	4669      	mov	r1, sp
 801141e:	4630      	mov	r0, r6
 8011420:	f7ff f821 	bl	8010466 <GetASNInt>
    if (ret != 0)
 8011424:	4604      	mov	r4, r0
 8011426:	2800      	cmp	r0, #0
 8011428:	d1d4      	bne.n	80113d4 <DecodeECC_DSA_Sig_Bin+0x28>
        *sLen = (word32)len;
 801142a:	9a01      	ldr	r2, [sp, #4]
    if (sLen)
 801142c:	f1ba 0f00 	cmp.w	sl, #0
 8011430:	d001      	beq.n	8011436 <DecodeECC_DSA_Sig_Bin+0x8a>
        *sLen = (word32)len;
 8011432:	f8ca 2000 	str.w	r2, [sl]
    if (s)
 8011436:	f1b9 0f00 	cmp.w	r9, #0
 801143a:	d004      	beq.n	8011446 <DecodeECC_DSA_Sig_Bin+0x9a>
        XMEMCPY(s, (byte*)sig + idx, (size_t)len);
 801143c:	9900      	ldr	r1, [sp, #0]
 801143e:	4648      	mov	r0, r9
 8011440:	4431      	add	r1, r6
 8011442:	f009 fdcd 	bl	801afe0 <memcpy>
    if (idx + (word32)len != sigLen) {
 8011446:	e9dd 3200 	ldrd	r3, r2, [sp]
 801144a:	4413      	add	r3, r2
 801144c:	42ab      	cmp	r3, r5
 801144e:	d0c1      	beq.n	80113d4 <DecodeECC_DSA_Sig_Bin+0x28>
 8011450:	e7be      	b.n	80113d0 <DecodeECC_DSA_Sig_Bin+0x24>

08011452 <DecodeECC_DSA_Sig_Ex>:
    return DecodeECC_DSA_Sig_Ex(sig, sigLen, r, s, 1);
}

int DecodeECC_DSA_Sig_Ex(const byte* sig, word32 sigLen, mp_int* r, mp_int* s,
    int init)
{
 8011452:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = 0;
 8011456:	2400      	movs	r4, #0
{
 8011458:	4689      	mov	r9, r1
 801145a:	4616      	mov	r6, r2
 801145c:	461f      	mov	r7, r3
    int    len = 0;

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 801145e:	aa03      	add	r2, sp, #12
 8011460:	460b      	mov	r3, r1
 8011462:	a902      	add	r1, sp, #8
    int    len = 0;
 8011464:	e9cd 4402 	strd	r4, r4, [sp, #8]
{
 8011468:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801146c:	4680      	mov	r8, r0
    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
 801146e:	f7fe ffe4 	bl	801043a <GetSequence>
 8011472:	42a0      	cmp	r0, r4
 8011474:	da04      	bge.n	8011480 <DecodeECC_DSA_Sig_Ex+0x2e>
    /* sanity check that the index has been advanced all the way to the end of
     * the buffer */
    if (idx != sigLen) {
        mp_clear(r);
        mp_clear(s);
        return ASN_ECC_KEY_E;
 8011476:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
        mp_clear(s);
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 801147a:	b004      	add	sp, #16
 801147c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sigLen != idx + (word32)len) {
 8011480:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
 8011484:	441d      	add	r5, r3
 8011486:	454d      	cmp	r5, r9
 8011488:	d1f5      	bne.n	8011476 <DecodeECC_DSA_Sig_Ex+0x24>
    if (GetIntPositive(r, sig, &idx, sigLen, init) < 0) {
 801148a:	f8cd a000 	str.w	sl, [sp]
 801148e:	462b      	mov	r3, r5
 8011490:	aa02      	add	r2, sp, #8
 8011492:	4641      	mov	r1, r8
 8011494:	4630      	mov	r0, r6
 8011496:	f7ff f814 	bl	80104c2 <GetIntPositive>
 801149a:	2800      	cmp	r0, #0
 801149c:	dbeb      	blt.n	8011476 <DecodeECC_DSA_Sig_Ex+0x24>
    if (GetIntPositive(s, sig, &idx, sigLen, init) < 0) {
 801149e:	f8cd a000 	str.w	sl, [sp]
 80114a2:	462b      	mov	r3, r5
 80114a4:	aa02      	add	r2, sp, #8
 80114a6:	4641      	mov	r1, r8
 80114a8:	4638      	mov	r0, r7
 80114aa:	f7ff f80a 	bl	80104c2 <GetIntPositive>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	da03      	bge.n	80114ba <DecodeECC_DSA_Sig_Ex+0x68>
        mp_clear(r);
 80114b2:	4630      	mov	r0, r6
        mp_clear(s);
 80114b4:	f007 fee3 	bl	801927e <mp_clear>
 80114b8:	e7dd      	b.n	8011476 <DecodeECC_DSA_Sig_Ex+0x24>
    if (idx != sigLen) {
 80114ba:	9b02      	ldr	r3, [sp, #8]
 80114bc:	42ab      	cmp	r3, r5
 80114be:	d004      	beq.n	80114ca <DecodeECC_DSA_Sig_Ex+0x78>
        mp_clear(r);
 80114c0:	4630      	mov	r0, r6
 80114c2:	f007 fedc 	bl	801927e <mp_clear>
        mp_clear(s);
 80114c6:	4638      	mov	r0, r7
 80114c8:	e7f4      	b.n	80114b4 <DecodeECC_DSA_Sig_Ex+0x62>
    return 0;
 80114ca:	4620      	mov	r0, r4
 80114cc:	e7d5      	b.n	801147a <DecodeECC_DSA_Sig_Ex+0x28>

080114ce <wc_EccPrivateKeyDecode>:
#endif

WOLFSSL_ABI
int wc_EccPrivateKeyDecode(const byte* input, word32* inOutIdx, ecc_key* key,
                        word32 inSz)
{
 80114ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d2:	b089      	sub	sp, #36	; 0x24
    byte* pub = NULL;
#else
    byte priv[ECC_MAXSIZE+1];
    byte pub[2*(ECC_MAXSIZE+1)]; /* public key has two parts plus header */
#endif
    word32 algId = 0;
 80114d4:	2400      	movs	r4, #0
{
 80114d6:	460d      	mov	r5, r1
 80114d8:	9203      	str	r2, [sp, #12]
 80114da:	461e      	mov	r6, r3
    word32 algId = 0;
 80114dc:	9407      	str	r4, [sp, #28]
    byte* pubData = NULL;

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 80114de:	4607      	mov	r7, r0
 80114e0:	2800      	cmp	r0, #0
 80114e2:	f000 80c9 	beq.w	8011678 <wc_EccPrivateKeyDecode+0x1aa>
 80114e6:	2900      	cmp	r1, #0
 80114e8:	f000 80c6 	beq.w	8011678 <wc_EccPrivateKeyDecode+0x1aa>
 80114ec:	2a00      	cmp	r2, #0
 80114ee:	f000 80c3 	beq.w	8011678 <wc_EccPrivateKeyDecode+0x1aa>
 80114f2:	2e00      	cmp	r6, #0
 80114f4:	f000 80c0 	beq.w	8011678 <wc_EccPrivateKeyDecode+0x1aa>
        return BAD_FUNC_ARG;

    /* if has pkcs8 header skip it */
    if (ToTraditionalInline_ex(input, inOutIdx, inSz, &algId) < 0) {
 80114f8:	ab07      	add	r3, sp, #28
 80114fa:	4632      	mov	r2, r6
 80114fc:	f7ff fb1e 	bl	8010b3c <ToTraditionalInline_ex>
 8011500:	42a0      	cmp	r0, r4
 8011502:	db13      	blt.n	801152c <wc_EccPrivateKeyDecode+0x5e>
        /* ignore error, did not have pkcs8 header */
    }
    else {
        curve_id = wc_ecc_get_oid(algId, NULL, NULL);
 8011504:	9807      	ldr	r0, [sp, #28]
 8011506:	4622      	mov	r2, r4
 8011508:	4621      	mov	r1, r4
 801150a:	f7fa fed9 	bl	800c2c0 <wc_ecc_get_oid>
 801150e:	4680      	mov	r8, r0
    }

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8011510:	4633      	mov	r3, r6
 8011512:	aa06      	add	r2, sp, #24
 8011514:	4629      	mov	r1, r5
 8011516:	4638      	mov	r0, r7
 8011518:	f7fe ff8f 	bl	801043a <GetSequence>
 801151c:	2800      	cmp	r0, #0
 801151e:	da07      	bge.n	8011530 <wc_EccPrivateKeyDecode+0x62>
        return ASN_PARSE_E;
 8011520:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif
}
 8011524:	4620      	mov	r0, r4
 8011526:	b009      	add	sp, #36	; 0x24
 8011528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int    curve_id = ECC_CURVE_DEF;
 801152c:	46a0      	mov	r8, r4
 801152e:	e7ef      	b.n	8011510 <wc_EccPrivateKeyDecode+0x42>
    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 8011530:	4633      	mov	r3, r6
 8011532:	aa05      	add	r2, sp, #20
 8011534:	4629      	mov	r1, r5
 8011536:	4638      	mov	r0, r7
 8011538:	f7fe ffff 	bl	801053a <GetMyVersion>
 801153c:	2800      	cmp	r0, #0
 801153e:	dbef      	blt.n	8011520 <wc_EccPrivateKeyDecode+0x52>
    if (*inOutIdx >= inSz)
 8011540:	682b      	ldr	r3, [r5, #0]
 8011542:	42b3      	cmp	r3, r6
 8011544:	d2ec      	bcs.n	8011520 <wc_EccPrivateKeyDecode+0x52>
    b = input[*inOutIdx];
 8011546:	5cfa      	ldrb	r2, [r7, r3]
    *inOutIdx += 1;
 8011548:	3301      	adds	r3, #1
    if (b != 4 && b != 6 && b != 7)
 801154a:	2a04      	cmp	r2, #4
    *inOutIdx += 1;
 801154c:	602b      	str	r3, [r5, #0]
    if (b != 4 && b != 6 && b != 7)
 801154e:	d002      	beq.n	8011556 <wc_EccPrivateKeyDecode+0x88>
 8011550:	3a06      	subs	r2, #6
 8011552:	2a01      	cmp	r2, #1
 8011554:	d8e4      	bhi.n	8011520 <wc_EccPrivateKeyDecode+0x52>
    if (GetLength(input, inOutIdx, &length, inSz) < 0)
 8011556:	4633      	mov	r3, r6
 8011558:	aa06      	add	r2, sp, #24
 801155a:	4629      	mov	r1, r5
 801155c:	4638      	mov	r0, r7
 801155e:	f7fe fee5 	bl	801032c <GetLength>
 8011562:	2800      	cmp	r0, #0
 8011564:	dbdc      	blt.n	8011520 <wc_EccPrivateKeyDecode+0x52>
    privSz = length;
 8011566:	f8dd a018 	ldr.w	sl, [sp, #24]
    if (privSz > ECC_MAXSIZE)
 801156a:	f1ba 0f42 	cmp.w	sl, #66	; 0x42
 801156e:	f300 8086 	bgt.w	801167e <wc_EccPrivateKeyDecode+0x1b0>
    priv = (byte*)XMALLOC(privSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011572:	4650      	mov	r0, sl
 8011574:	f009 fd14 	bl	801afa0 <malloc>
    if (priv == NULL)
 8011578:	4681      	mov	r9, r0
 801157a:	2800      	cmp	r0, #0
 801157c:	f000 8082 	beq.w	8011684 <wc_EccPrivateKeyDecode+0x1b6>
    XMEMCPY(priv, &input[*inOutIdx], (size_t)privSz);
 8011580:	6829      	ldr	r1, [r5, #0]
 8011582:	4652      	mov	r2, sl
 8011584:	4439      	add	r1, r7
 8011586:	f009 fd2b 	bl	801afe0 <memcpy>
    *inOutIdx += (word32)length;
 801158a:	682b      	ldr	r3, [r5, #0]
 801158c:	9a06      	ldr	r2, [sp, #24]
 801158e:	4413      	add	r3, r2
    if ((*inOutIdx + 1) < inSz) {
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	42b2      	cmp	r2, r6
    *inOutIdx += (word32)length;
 8011594:	602b      	str	r3, [r5, #0]
    if ((*inOutIdx + 1) < inSz) {
 8011596:	d21a      	bcs.n	80115ce <wc_EccPrivateKeyDecode+0x100>
        if (b == ECC_PREFIX_0) {
 8011598:	5cfb      	ldrb	r3, [r7, r3]
 801159a:	2ba0      	cmp	r3, #160	; 0xa0
 801159c:	d117      	bne.n	80115ce <wc_EccPrivateKeyDecode+0x100>
            *inOutIdx += 1;
 801159e:	602a      	str	r2, [r5, #0]
            if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 80115a0:	4633      	mov	r3, r6
 80115a2:	aa06      	add	r2, sp, #24
 80115a4:	4629      	mov	r1, r5
 80115a6:	4638      	mov	r0, r7
 80115a8:	f7fe fec0 	bl	801032c <GetLength>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	dd45      	ble.n	801163c <wc_EccPrivateKeyDecode+0x16e>
                ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType,
 80115b0:	9600      	str	r6, [sp, #0]
 80115b2:	2315      	movs	r3, #21
 80115b4:	aa04      	add	r2, sp, #16
 80115b6:	4638      	mov	r0, r7
 80115b8:	f7ff fa3d 	bl	8010a36 <GetObjectId>
                if (ret == 0) {
 80115bc:	4604      	mov	r4, r0
 80115be:	2800      	cmp	r0, #0
 80115c0:	d149      	bne.n	8011656 <wc_EccPrivateKeyDecode+0x188>
                    if ((ret = CheckCurve(oidSum)) < 0)
 80115c2:	9804      	ldr	r0, [sp, #16]
 80115c4:	f7fe fe65 	bl	8010292 <CheckCurve>
 80115c8:	f1b0 0800 	subs.w	r8, r0, #0
 80115cc:	db45      	blt.n	801165a <wc_EccPrivateKeyDecode+0x18c>
    if (ret == 0 && (*inOutIdx + 1) < inSz) {
 80115ce:	682a      	ldr	r2, [r5, #0]
 80115d0:	1c53      	adds	r3, r2, #1
 80115d2:	42b3      	cmp	r3, r6
 80115d4:	d259      	bcs.n	801168a <wc_EccPrivateKeyDecode+0x1bc>
        b = input[*inOutIdx];
 80115d6:	5cba      	ldrb	r2, [r7, r2]
        *inOutIdx += 1;
 80115d8:	602b      	str	r3, [r5, #0]
        if (b != ECC_PREFIX_1) {
 80115da:	2aa1      	cmp	r2, #161	; 0xa1
 80115dc:	d141      	bne.n	8011662 <wc_EccPrivateKeyDecode+0x194>
        else if (GetLength(input, inOutIdx, &length, inSz) <= 0) {
 80115de:	4633      	mov	r3, r6
 80115e0:	aa06      	add	r2, sp, #24
 80115e2:	4629      	mov	r1, r5
 80115e4:	4638      	mov	r0, r7
 80115e6:	f7fe fea1 	bl	801032c <GetLength>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	dd26      	ble.n	801163c <wc_EccPrivateKeyDecode+0x16e>
            ret = CheckBitString(input, inOutIdx, &length, inSz, 0, NULL);
 80115ee:	2600      	movs	r6, #0
 80115f0:	e9cd 6600 	strd	r6, r6, [sp]
 80115f4:	4638      	mov	r0, r7
 80115f6:	f7fe ffc6 	bl	8010586 <CheckBitString>
            if (ret == 0) {
 80115fa:	4604      	mov	r4, r0
 80115fc:	bb08      	cbnz	r0, 8011642 <wc_EccPrivateKeyDecode+0x174>
                pubSz = length;
 80115fe:	f8dd b018 	ldr.w	fp, [sp, #24]
                if (pubSz > 2*(ECC_MAXSIZE+1))
 8011602:	f1bb 0f86 	cmp.w	fp, #134	; 0x86
 8011606:	dc30      	bgt.n	801166a <wc_EccPrivateKeyDecode+0x19c>
                    pub = (byte*)XMALLOC(pubSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011608:	4658      	mov	r0, fp
 801160a:	f009 fcc9 	bl	801afa0 <malloc>
                    if (pub == NULL)
 801160e:	4606      	mov	r6, r0
 8011610:	b378      	cbz	r0, 8011672 <wc_EccPrivateKeyDecode+0x1a4>
                        XMEMCPY(pub, &input[*inOutIdx], (size_t)pubSz);
 8011612:	6829      	ldr	r1, [r5, #0]
 8011614:	465a      	mov	r2, fp
 8011616:	4439      	add	r1, r7
 8011618:	f009 fce2 	bl	801afe0 <memcpy>
                        *inOutIdx += (word32)length;
 801161c:	682a      	ldr	r2, [r5, #0]
 801161e:	9906      	ldr	r1, [sp, #24]
 8011620:	440a      	add	r2, r1
 8011622:	602a      	str	r2, [r5, #0]
        ret = wc_ecc_import_private_key_ex(priv, (word32)privSz, pubData,
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	f8cd 8004 	str.w	r8, [sp, #4]
 801162c:	465b      	mov	r3, fp
 801162e:	4632      	mov	r2, r6
 8011630:	4651      	mov	r1, sl
 8011632:	4648      	mov	r0, r9
 8011634:	f7fa fcf1 	bl	800c01a <wc_ecc_import_private_key_ex>
 8011638:	4604      	mov	r4, r0
 801163a:	e002      	b.n	8011642 <wc_EccPrivateKeyDecode+0x174>
                        ret = ECC_CURVE_OID_E;
 801163c:	2600      	movs	r6, #0
                ret = ASN_PARSE_E;
 801163e:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    XFREE(priv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011642:	4648      	mov	r0, r9
 8011644:	f009 fcb4 	bl	801afb0 <free>
    XFREE(pub,  key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011648:	2e00      	cmp	r6, #0
 801164a:	f43f af6b 	beq.w	8011524 <wc_EccPrivateKeyDecode+0x56>
 801164e:	4630      	mov	r0, r6
 8011650:	f009 fcae 	bl	801afb0 <free>
 8011654:	e766      	b.n	8011524 <wc_EccPrivateKeyDecode+0x56>
 8011656:	2600      	movs	r6, #0
 8011658:	e7f3      	b.n	8011642 <wc_EccPrivateKeyDecode+0x174>
 801165a:	4626      	mov	r6, r4
                        ret = ECC_CURVE_OID_E;
 801165c:	f06f 04ab 	mvn.w	r4, #171	; 0xab
 8011660:	e7ef      	b.n	8011642 <wc_EccPrivateKeyDecode+0x174>
 8011662:	2600      	movs	r6, #0
            ret = ASN_ECC_KEY_E;
 8011664:	f06f 04aa 	mvn.w	r4, #170	; 0xaa
 8011668:	e7eb      	b.n	8011642 <wc_EccPrivateKeyDecode+0x174>
 801166a:	4606      	mov	r6, r0
                    ret = BUFFER_E;
 801166c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 8011670:	e7e7      	b.n	8011642 <wc_EccPrivateKeyDecode+0x174>
                        ret = MEMORY_E;
 8011672:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8011676:	e7e4      	b.n	8011642 <wc_EccPrivateKeyDecode+0x174>
        return BAD_FUNC_ARG;
 8011678:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 801167c:	e752      	b.n	8011524 <wc_EccPrivateKeyDecode+0x56>
        return BUFFER_E;
 801167e:	f06f 0483 	mvn.w	r4, #131	; 0x83
 8011682:	e74f      	b.n	8011524 <wc_EccPrivateKeyDecode+0x56>
        return MEMORY_E;
 8011684:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8011688:	e74c      	b.n	8011524 <wc_EccPrivateKeyDecode+0x56>
    byte* pub = NULL;
 801168a:	2600      	movs	r6, #0
    int    privSz, pubSz = 0;
 801168c:	46b3      	mov	fp, r6
 801168e:	e7c9      	b.n	8011624 <wc_EccPrivateKeyDecode+0x156>

08011690 <wc_EccPublicKeyDecode>:
#endif /* WOLFSSL_CUSTOM_CURVES */

WOLFSSL_ABI
int wc_EccPublicKeyDecode(const byte* input, word32* inOutIdx,
                          ecc_key* key, word32 inSz)
{
 8011690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011694:	460c      	mov	r4, r1
 8011696:	b089      	sub	sp, #36	; 0x24
 8011698:	4617      	mov	r7, r2
 801169a:	461e      	mov	r6, r3
    int    version, length;
    int    curve_id = ECC_CURVE_DEF;
    word32 oidSum, localIdx;
    byte   tag, isPrivFormat = 0;

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0)
 801169c:	4605      	mov	r5, r0
 801169e:	2800      	cmp	r0, #0
 80116a0:	f000 80b2 	beq.w	8011808 <wc_EccPublicKeyDecode+0x178>
 80116a4:	2900      	cmp	r1, #0
 80116a6:	f000 80af 	beq.w	8011808 <wc_EccPublicKeyDecode+0x178>
 80116aa:	2a00      	cmp	r2, #0
 80116ac:	f000 80ac 	beq.w	8011808 <wc_EccPublicKeyDecode+0x178>
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	f000 80a9 	beq.w	8011808 <wc_EccPublicKeyDecode+0x178>
        return BAD_FUNC_ARG;

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 80116b6:	aa05      	add	r2, sp, #20
 80116b8:	f7fe febf 	bl	801043a <GetSequence>
 80116bc:	2800      	cmp	r0, #0
 80116be:	da04      	bge.n	80116ca <wc_EccPublicKeyDecode+0x3a>
        return ASN_PARSE_E;
 80116c0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    }

    FREE_ASNGETDATA(dataASN, key->heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 80116c4:	b009      	add	sp, #36	; 0x24
 80116c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (GetMyVersion(input, inOutIdx, &version, inSz) >= 0) {
 80116ca:	4633      	mov	r3, r6
 80116cc:	aa04      	add	r2, sp, #16
 80116ce:	4621      	mov	r1, r4
 80116d0:	4628      	mov	r0, r5
 80116d2:	f7fe ff32 	bl	801053a <GetMyVersion>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	db6f      	blt.n	80117ba <wc_EccPublicKeyDecode+0x12a>
        if (*inOutIdx >= inSz)
 80116da:	6822      	ldr	r2, [r4, #0]
 80116dc:	42b2      	cmp	r2, r6
 80116de:	d2ef      	bcs.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        tag = input[*inOutIdx];
 80116e0:	5cab      	ldrb	r3, [r5, r2]
 80116e2:	f88d 300f 	strb.w	r3, [sp, #15]
        *inOutIdx += 1;
 80116e6:	3201      	adds	r2, #1
        if (tag != 4 && tag != 6 && tag != 7)
 80116e8:	2b04      	cmp	r3, #4
        *inOutIdx += 1;
 80116ea:	6022      	str	r2, [r4, #0]
        if (tag != 4 && tag != 6 && tag != 7)
 80116ec:	d002      	beq.n	80116f4 <wc_EccPublicKeyDecode+0x64>
 80116ee:	3b06      	subs	r3, #6
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d8e5      	bhi.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        if (GetLength(input, inOutIdx, &length, inSz) < 0)
 80116f4:	4633      	mov	r3, r6
 80116f6:	aa05      	add	r2, sp, #20
 80116f8:	4621      	mov	r1, r4
 80116fa:	4628      	mov	r0, r5
 80116fc:	f7fe fe16 	bl	801032c <GetLength>
 8011700:	2800      	cmp	r0, #0
 8011702:	dbdd      	blt.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        if (length > ECC_MAXSIZE)
 8011704:	9805      	ldr	r0, [sp, #20]
 8011706:	2842      	cmp	r0, #66	; 0x42
 8011708:	dd02      	ble.n	8011710 <wc_EccPublicKeyDecode+0x80>
            return BUFFER_E;
 801170a:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801170e:	e7d9      	b.n	80116c4 <wc_EccPublicKeyDecode+0x34>
        *inOutIdx += (word32)length;
 8011710:	f8d4 c000 	ldr.w	ip, [r4]
 8011714:	4460      	add	r0, ip
        if (*inOutIdx >= inSz)
 8011716:	42b0      	cmp	r0, r6
        *inOutIdx += (word32)length;
 8011718:	6020      	str	r0, [r4, #0]
        if (*inOutIdx >= inSz)
 801171a:	d2d1      	bcs.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        tag = input[*inOutIdx];
 801171c:	f815 c000 	ldrb.w	ip, [r5, r0]
 8011720:	f88d c00f 	strb.w	ip, [sp, #15]
        *inOutIdx += 1;
 8011724:	3001      	adds	r0, #1
        if (tag != ECC_PREFIX_0)
 8011726:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
        *inOutIdx += 1;
 801172a:	6020      	str	r0, [r4, #0]
        if (tag != ECC_PREFIX_0)
 801172c:	d002      	beq.n	8011734 <wc_EccPublicKeyDecode+0xa4>
            return ASN_ECC_KEY_E;
 801172e:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
 8011732:	e7c7      	b.n	80116c4 <wc_EccPublicKeyDecode+0x34>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 8011734:	4628      	mov	r0, r5
 8011736:	f7fe fdf9 	bl	801032c <GetLength>
 801173a:	2800      	cmp	r0, #0
 801173c:	ddc0      	ble.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        isPrivFormat = 1;
 801173e:	f04f 0901 	mov.w	r9, #1
    if (*inOutIdx >= inSz) {
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	42b3      	cmp	r3, r6
 8011746:	d2e0      	bcs.n	801170a <wc_EccPublicKeyDecode+0x7a>
    localIdx = *inOutIdx;
 8011748:	9307      	str	r3, [sp, #28]
    if (GetASNTag(input, &localIdx, &tag, inSz) == 0 &&
 801174a:	f10d 020f 	add.w	r2, sp, #15
 801174e:	4633      	mov	r3, r6
 8011750:	a907      	add	r1, sp, #28
 8011752:	4628      	mov	r0, r5
 8011754:	f7fe fe33 	bl	80103be <GetASNTag>
 8011758:	b918      	cbnz	r0, 8011762 <wc_EccPublicKeyDecode+0xd2>
 801175a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801175e:	2b30      	cmp	r3, #48	; 0x30
 8011760:	d0ae      	beq.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        ret = GetObjectId(input, inOutIdx, &oidSum, oidIgnoreType, inSz);
 8011762:	9600      	str	r6, [sp, #0]
 8011764:	2315      	movs	r3, #21
 8011766:	aa06      	add	r2, sp, #24
 8011768:	4621      	mov	r1, r4
 801176a:	4628      	mov	r0, r5
 801176c:	f7ff f963 	bl	8010a36 <GetObjectId>
        if (ret != 0)
 8011770:	2800      	cmp	r0, #0
 8011772:	d1a7      	bne.n	80116c4 <wc_EccPublicKeyDecode+0x34>
        if ((ret = CheckCurve(oidSum)) < 0)
 8011774:	9806      	ldr	r0, [sp, #24]
 8011776:	f7fe fd8c 	bl	8010292 <CheckCurve>
 801177a:	f1b0 0800 	subs.w	r8, r0, #0
 801177e:	db46      	blt.n	801180e <wc_EccPublicKeyDecode+0x17e>
    if (isPrivFormat) {
 8011780:	f1b9 0f00 	cmp.w	r9, #0
 8011784:	d12c      	bne.n	80117e0 <wc_EccPublicKeyDecode+0x150>
    ret = CheckBitString(input, inOutIdx, &length, inSz, 1, NULL);
 8011786:	2301      	movs	r3, #1
 8011788:	2200      	movs	r2, #0
 801178a:	e9cd 3200 	strd	r3, r2, [sp]
 801178e:	4621      	mov	r1, r4
 8011790:	4633      	mov	r3, r6
 8011792:	aa05      	add	r2, sp, #20
 8011794:	4628      	mov	r0, r5
 8011796:	f7fe fef6 	bl	8010586 <CheckBitString>
    if (ret != 0)
 801179a:	2800      	cmp	r0, #0
 801179c:	d192      	bne.n	80116c4 <wc_EccPublicKeyDecode+0x34>
    if (wc_ecc_import_x963_ex(input + *inOutIdx, (word32)length, key,
 801179e:	6820      	ldr	r0, [r4, #0]
 80117a0:	9905      	ldr	r1, [sp, #20]
 80117a2:	4643      	mov	r3, r8
 80117a4:	463a      	mov	r2, r7
 80117a6:	4428      	add	r0, r5
 80117a8:	f7fa fb40 	bl	800be2c <wc_ecc_import_x963_ex>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d1be      	bne.n	801172e <wc_EccPublicKeyDecode+0x9e>
    *inOutIdx += (word32)length;
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	9a05      	ldr	r2, [sp, #20]
 80117b4:	4413      	add	r3, r2
 80117b6:	6023      	str	r3, [r4, #0]
    return 0;
 80117b8:	e784      	b.n	80116c4 <wc_EccPublicKeyDecode+0x34>
        if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 80117ba:	4633      	mov	r3, r6
 80117bc:	aa05      	add	r2, sp, #20
 80117be:	4621      	mov	r1, r4
 80117c0:	4628      	mov	r0, r5
 80117c2:	f7fe fe3a 	bl	801043a <GetSequence>
 80117c6:	2800      	cmp	r0, #0
 80117c8:	f6ff af7a 	blt.w	80116c0 <wc_EccPublicKeyDecode+0x30>
        ret = SkipObjectId(input, inOutIdx, inSz);
 80117cc:	4632      	mov	r2, r6
 80117ce:	4621      	mov	r1, r4
 80117d0:	4628      	mov	r0, r5
 80117d2:	f7ff f920 	bl	8010a16 <SkipObjectId>
        if (ret != 0)
 80117d6:	2800      	cmp	r0, #0
 80117d8:	f47f af74 	bne.w	80116c4 <wc_EccPublicKeyDecode+0x34>
    byte   tag, isPrivFormat = 0;
 80117dc:	4681      	mov	r9, r0
 80117de:	e7b0      	b.n	8011742 <wc_EccPublicKeyDecode+0xb2>
        if (*inOutIdx >= inSz)
 80117e0:	6822      	ldr	r2, [r4, #0]
 80117e2:	42b2      	cmp	r2, r6
 80117e4:	f4bf af6c 	bcs.w	80116c0 <wc_EccPublicKeyDecode+0x30>
        tag = input[*inOutIdx];
 80117e8:	5cab      	ldrb	r3, [r5, r2]
 80117ea:	f88d 300f 	strb.w	r3, [sp, #15]
        *inOutIdx += 1;
 80117ee:	3201      	adds	r2, #1
        if (tag != ECC_PREFIX_1)
 80117f0:	2ba1      	cmp	r3, #161	; 0xa1
        *inOutIdx += 1;
 80117f2:	6022      	str	r2, [r4, #0]
        if (tag != ECC_PREFIX_1)
 80117f4:	d19b      	bne.n	801172e <wc_EccPublicKeyDecode+0x9e>
        if (GetLength(input, inOutIdx, &length, inSz) <= 0)
 80117f6:	4633      	mov	r3, r6
 80117f8:	aa05      	add	r2, sp, #20
 80117fa:	4621      	mov	r1, r4
 80117fc:	4628      	mov	r0, r5
 80117fe:	f7fe fd95 	bl	801032c <GetLength>
 8011802:	2800      	cmp	r0, #0
 8011804:	dcbf      	bgt.n	8011786 <wc_EccPublicKeyDecode+0xf6>
 8011806:	e75b      	b.n	80116c0 <wc_EccPublicKeyDecode+0x30>
        return BAD_FUNC_ARG;
 8011808:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801180c:	e75a      	b.n	80116c4 <wc_EccPublicKeyDecode+0x34>
            return ECC_CURVE_OID_E;
 801180e:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 8011812:	e757      	b.n	80116c4 <wc_EccPublicKeyDecode+0x34>

08011814 <wc_BuildEccKeyDer>:
#if defined(HAVE_ECC_KEY_EXPORT) && !defined(NO_ASN_CRYPT)
/* build DER formatted ECC key, include optional public key if requested,
 * return length on success, negative on error */
int wc_BuildEccKeyDer(ecc_key* key, byte* output, word32 *inLen,
                             int pubIn, int curveIn)
{
 8011814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011818:	b091      	sub	sp, #68	; 0x44
 801181a:	469b      	mov	fp, r3
 801181c:	9201      	str	r2, [sp, #4]
#else
    byte   *prv = NULL, *pub = NULL;
#endif

    word32 idx = 0, prvidx = 0, pubidx = 0, curveidx = 0;
    word32 seqSz, privSz, pubSz = ECC_BUFSIZE;
 801181e:	f240 1201 	movw	r2, #257	; 0x101
{
 8011822:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    word32 seqSz, privSz, pubSz = ECC_BUFSIZE;
 8011824:	9205      	str	r2, [sp, #20]
{
 8011826:	4689      	mov	r9, r1

    if (key == NULL || (output == NULL && inLen == NULL))
 8011828:	4604      	mov	r4, r0
 801182a:	b910      	cbnz	r0, 8011832 <wc_BuildEccKeyDer+0x1e>
        XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
        if (pubIn) {
            XFREE(pub, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
        }
        #endif
        return BAD_FUNC_ARG;
 801182c:	f06f 0aac 	mvn.w	sl, #172	; 0xac
 8011830:	e02e      	b.n	8011890 <wc_BuildEccKeyDer+0x7c>
    if (key == NULL || (output == NULL && inLen == NULL))
 8011832:	b911      	cbnz	r1, 801183a <wc_BuildEccKeyDer+0x26>
 8011834:	9a01      	ldr	r2, [sp, #4]
 8011836:	2a00      	cmp	r2, #0
 8011838:	d0f8      	beq.n	801182c <wc_BuildEccKeyDer+0x18>
    if (curveIn) {
 801183a:	b36b      	cbz	r3, 8011898 <wc_BuildEccKeyDer+0x84>
        curve[curveidx++] = ECC_PREFIX_0;
 801183c:	23a0      	movs	r3, #160	; 0xa0
        curveSz = SetCurve(key, curve+curveidx, MAX_ALGO_SZ);
 801183e:	2214      	movs	r2, #20
 8011840:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 8011844:	4620      	mov	r0, r4
        curve[curveidx++] = ECC_PREFIX_0;
 8011846:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        curveSz = SetCurve(key, curve+curveidx, MAX_ALGO_SZ);
 801184a:	f7ff fae4 	bl	8010e16 <SetCurve>
        if (curveSz < 0)
 801184e:	f1b0 0a00 	subs.w	sl, r0, #0
 8011852:	db1d      	blt.n	8011890 <wc_BuildEccKeyDer+0x7c>
        curve[1] = (byte)curveSz;
 8011854:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        curveidx += (word32)curveSz;
 8011858:	f10a 0802 	add.w	r8, sl, #2
    privSz = (word32)key->dp->size;
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	6818      	ldr	r0, [r3, #0]
 8011860:	9004      	str	r0, [sp, #16]
    prv = (byte*)XMALLOC(privSz + (word32)privHdrSz + MAX_SEQ_SZ,
 8011862:	3007      	adds	r0, #7
 8011864:	f009 fb9c 	bl	801afa0 <malloc>
    if (prv == NULL) {
 8011868:	4606      	mov	r6, r0
 801186a:	b398      	cbz	r0, 80118d4 <wc_BuildEccKeyDer+0xc0>
    if (privSz < ASN_LONG_LENGTH) {
 801186c:	9804      	ldr	r0, [sp, #16]
 801186e:	287f      	cmp	r0, #127	; 0x7f
 8011870:	d814      	bhi.n	801189c <wc_BuildEccKeyDer+0x88>
    output[0] = ASN_OCTET_STRING;
 8011872:	2304      	movs	r3, #4
 8011874:	7033      	strb	r3, [r6, #0]
    output[1] = (byte)len;
 8011876:	7070      	strb	r0, [r6, #1]
        prvidx += SetOctetString8Bit(privSz, &prv[prvidx]);
 8011878:	2702      	movs	r7, #2
    ret = wc_ecc_export_private_only(key, prv + prvidx, &privSz);
 801187a:	aa04      	add	r2, sp, #16
 801187c:	19f1      	adds	r1, r6, r7
 801187e:	4620      	mov	r0, r4
 8011880:	f7fa fb98 	bl	800bfb4 <wc_ecc_export_private_only>
    if (ret < 0) {
 8011884:	f1b0 0a00 	subs.w	sl, r0, #0
 8011888:	da0d      	bge.n	80118a6 <wc_BuildEccKeyDer+0x92>
            XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801188a:	4630      	mov	r0, r6
            XFREE(pub, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801188c:	f009 fb90 	bl	801afb0 <free>
    }

    FREE_ASNSETDATA(dataASN, key->heap);
    return ret;
#endif
}
 8011890:	4650      	mov	r0, sl
 8011892:	b011      	add	sp, #68	; 0x44
 8011894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    word32 idx = 0, prvidx = 0, pubidx = 0, curveidx = 0;
 8011898:	4698      	mov	r8, r3
 801189a:	e7df      	b.n	801185c <wc_BuildEccKeyDer+0x48>
        prvidx += SetOctetString(privSz, &prv[prvidx]);
 801189c:	4631      	mov	r1, r6
 801189e:	f7ff faea 	bl	8010e76 <SetOctetString>
 80118a2:	4607      	mov	r7, r0
 80118a4:	e7e9      	b.n	801187a <wc_BuildEccKeyDer+0x66>
    prvidx += privSz;
 80118a6:	9b04      	ldr	r3, [sp, #16]
 80118a8:	9302      	str	r3, [sp, #8]
    if (pubIn) {
 80118aa:	f1bb 0f00 	cmp.w	fp, #0
 80118ae:	d062      	beq.n	8011976 <wc_BuildEccKeyDer+0x162>
        ret = wc_ecc_export_x963(key, NULL, &pubSz);
 80118b0:	aa05      	add	r2, sp, #20
 80118b2:	2100      	movs	r1, #0
 80118b4:	4620      	mov	r0, r4
 80118b6:	f7fa f94b 	bl	800bb50 <wc_ecc_export_x963>
        if (ret != LENGTH_ONLY_E) {
 80118ba:	f110 0fca 	cmn.w	r0, #202	; 0xca
        ret = wc_ecc_export_x963(key, NULL, &pubSz);
 80118be:	4682      	mov	sl, r0
        if (ret != LENGTH_ONLY_E) {
 80118c0:	d1e3      	bne.n	801188a <wc_BuildEccKeyDer+0x76>
        pub = (byte*)XMALLOC(pubSz + (word32)pubHdrSz + MAX_SEQ_SZ,
 80118c2:	9805      	ldr	r0, [sp, #20]
 80118c4:	3009      	adds	r0, #9
 80118c6:	f009 fb6b 	bl	801afa0 <malloc>
        if (pub == NULL) {
 80118ca:	4605      	mov	r5, r0
 80118cc:	b928      	cbnz	r0, 80118da <wc_BuildEccKeyDer+0xc6>
            XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80118ce:	4630      	mov	r0, r6
 80118d0:	f009 fb6e 	bl	801afb0 <free>
        return MEMORY_E;
 80118d4:	f06f 0a7c 	mvn.w	sl, #124	; 0x7c
 80118d8:	e7da      	b.n	8011890 <wc_BuildEccKeyDer+0x7c>
        pub[pubidx++] = ECC_PREFIX_1;
 80118da:	4601      	mov	r1, r0
        if (pubSz > 128) /* leading zero + extra size byte */
 80118dc:	9805      	ldr	r0, [sp, #20]
        pub[pubidx++] = ECC_PREFIX_1;
 80118de:	23a1      	movs	r3, #161	; 0xa1
        if (pubSz > 128) /* leading zero + extra size byte */
 80118e0:	2880      	cmp	r0, #128	; 0x80
        pub[pubidx++] = ECC_PREFIX_1;
 80118e2:	f801 3b01 	strb.w	r3, [r1], #1
            pubidx += SetLength(pubSz + ASN_ECC_CONTEXT_SZ + 2, pub+pubidx);
 80118e6:	bf8c      	ite	hi
 80118e8:	3004      	addhi	r0, #4
            pubidx += SetLength(pubSz + ASN_ECC_CONTEXT_SZ + 1, pub+pubidx);
 80118ea:	3003      	addls	r0, #3
 80118ec:	f7ff fa07 	bl	8010cfe <SetLength>
 80118f0:	f100 0a01 	add.w	sl, r0, #1
        pubidx += SetBitString(pubSz, 0, pub + pubidx);
 80118f4:	eb05 020a 	add.w	r2, r5, sl
 80118f8:	2100      	movs	r1, #0
 80118fa:	9805      	ldr	r0, [sp, #20]
 80118fc:	f7ff fa70 	bl	8010de0 <SetBitString>
 8011900:	eb0a 0300 	add.w	r3, sl, r0
        ret = wc_ecc_export_x963(key, pub + pubidx, &pubSz);
 8011904:	18e9      	adds	r1, r5, r3
 8011906:	aa05      	add	r2, sp, #20
 8011908:	4620      	mov	r0, r4
 801190a:	9303      	str	r3, [sp, #12]
 801190c:	f7fa f920 	bl	800bb50 <wc_ecc_export_x963>
        if (ret != 0) {
 8011910:	9b03      	ldr	r3, [sp, #12]
 8011912:	4682      	mov	sl, r0
 8011914:	b120      	cbz	r0, 8011920 <wc_BuildEccKeyDer+0x10c>
            XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011916:	4630      	mov	r0, r6
 8011918:	f009 fb4a 	bl	801afb0 <free>
            XFREE(pub, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801191c:	4628      	mov	r0, r5
 801191e:	e7b5      	b.n	801188c <wc_BuildEccKeyDer+0x78>
        pubidx += pubSz;
 8011920:	9a05      	ldr	r2, [sp, #20]
 8011922:	4413      	add	r3, r2
    prvidx += privSz;
 8011924:	9a02      	ldr	r2, [sp, #8]
    seqSz = SetSequence((word32)verSz + prvidx + pubidx + curveidx, seq);
 8011926:	9302      	str	r3, [sp, #8]
    prvidx += privSz;
 8011928:	443a      	add	r2, r7
 801192a:	4617      	mov	r7, r2
    seqSz = SetSequence((word32)verSz + prvidx + pubidx + curveidx, seq);
 801192c:	f108 0403 	add.w	r4, r8, #3
 8011930:	443c      	add	r4, r7
 8011932:	441c      	add	r4, r3
    output[i++] = ASN_INTEGER;
 8011934:	2202      	movs	r2, #2
 8011936:	f88d 2018 	strb.w	r2, [sp, #24]
    seqSz = SetSequence((word32)verSz + prvidx + pubidx + curveidx, seq);
 801193a:	4620      	mov	r0, r4
    output[i++] = 0x01;
 801193c:	2201      	movs	r2, #1
    seqSz = SetSequence((word32)verSz + prvidx + pubidx + curveidx, seq);
 801193e:	a908      	add	r1, sp, #32
    output[i++] = 0x01;
 8011940:	f88d 2019 	strb.w	r2, [sp, #25]
    output[i++] = (byte)version;
 8011944:	f88d 201a 	strb.w	r2, [sp, #26]
    seqSz = SetSequence((word32)verSz + prvidx + pubidx + curveidx, seq);
 8011948:	f7ff fa90 	bl	8010e6c <SetSequence>
    if (output == NULL) {
 801194c:	9b02      	ldr	r3, [sp, #8]
    seqSz = SetSequence((word32)verSz + prvidx + pubidx + curveidx, seq);
 801194e:	4682      	mov	sl, r0
    totalSz = prvidx + pubidx + curveidx + (word32)verSz + seqSz;
 8011950:	4404      	add	r4, r0
    if (output == NULL) {
 8011952:	f1b9 0f00 	cmp.w	r9, #0
 8011956:	d111      	bne.n	801197c <wc_BuildEccKeyDer+0x168>
        *inLen = totalSz;
 8011958:	9b01      	ldr	r3, [sp, #4]
        XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801195a:	4630      	mov	r0, r6
        *inLen = totalSz;
 801195c:	601c      	str	r4, [r3, #0]
        XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 801195e:	f009 fb27 	bl	801afb0 <free>
        if (pubIn) {
 8011962:	f1bb 0f00 	cmp.w	fp, #0
 8011966:	d003      	beq.n	8011970 <wc_BuildEccKeyDer+0x15c>
            XFREE(pub, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011968:	b115      	cbz	r5, 8011970 <wc_BuildEccKeyDer+0x15c>
 801196a:	4628      	mov	r0, r5
 801196c:	f009 fb20 	bl	801afb0 <free>
        return LENGTH_ONLY_E;
 8011970:	f06f 0ac9 	mvn.w	sl, #201	; 0xc9
 8011974:	e78c      	b.n	8011890 <wc_BuildEccKeyDer+0x7c>
    word32 idx = 0, prvidx = 0, pubidx = 0, curveidx = 0;
 8011976:	465b      	mov	r3, fp
    byte   *prv = NULL, *pub = NULL;
 8011978:	465d      	mov	r5, fp
 801197a:	e7d3      	b.n	8011924 <wc_BuildEccKeyDer+0x110>
    if (inLen != NULL && totalSz > *inLen) {
 801197c:	9a01      	ldr	r2, [sp, #4]
 801197e:	b182      	cbz	r2, 80119a2 <wc_BuildEccKeyDer+0x18e>
 8011980:	6812      	ldr	r2, [r2, #0]
 8011982:	42a2      	cmp	r2, r4
 8011984:	d20d      	bcs.n	80119a2 <wc_BuildEccKeyDer+0x18e>
        XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011986:	4630      	mov	r0, r6
 8011988:	f009 fb12 	bl	801afb0 <free>
        if (pubIn) {
 801198c:	f1bb 0f00 	cmp.w	fp, #0
 8011990:	f43f af4c 	beq.w	801182c <wc_BuildEccKeyDer+0x18>
            XFREE(pub, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011994:	2d00      	cmp	r5, #0
 8011996:	f43f af49 	beq.w	801182c <wc_BuildEccKeyDer+0x18>
 801199a:	4628      	mov	r0, r5
 801199c:	f009 fb08 	bl	801afb0 <free>
 80119a0:	e744      	b.n	801182c <wc_BuildEccKeyDer+0x18>
    XMEMCPY(output + idx, seq, seqSz);
 80119a2:	4652      	mov	r2, sl
 80119a4:	a908      	add	r1, sp, #32
 80119a6:	4648      	mov	r0, r9
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	f009 fb19 	bl	801afe0 <memcpy>
    XMEMCPY(output + idx, ver, (size_t)verSz);
 80119ae:	2203      	movs	r2, #3
 80119b0:	a906      	add	r1, sp, #24
 80119b2:	eb09 000a 	add.w	r0, r9, sl
    idx += (word32)verSz;
 80119b6:	f10a 0a03 	add.w	sl, sl, #3
    XMEMCPY(output + idx, ver, (size_t)verSz);
 80119ba:	f009 fb11 	bl	801afe0 <memcpy>
    XMEMCPY(output + idx, prv, prvidx);
 80119be:	463a      	mov	r2, r7
 80119c0:	4631      	mov	r1, r6
 80119c2:	eb09 000a 	add.w	r0, r9, sl
 80119c6:	f009 fb0b 	bl	801afe0 <memcpy>
    idx += prvidx;
 80119ca:	44ba      	add	sl, r7
    XFREE(prv, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80119cc:	4630      	mov	r0, r6
 80119ce:	f009 faef 	bl	801afb0 <free>
    XMEMCPY(output + idx, curve, curveidx);
 80119d2:	4642      	mov	r2, r8
 80119d4:	a90a      	add	r1, sp, #40	; 0x28
 80119d6:	eb09 000a 	add.w	r0, r9, sl
 80119da:	f009 fb01 	bl	801afe0 <memcpy>
    if (pubIn) {
 80119de:	9b01      	ldr	r3, [sp, #4]
 80119e0:	f1bb 0f00 	cmp.w	fp, #0
 80119e4:	d00a      	beq.n	80119fc <wc_BuildEccKeyDer+0x1e8>
    idx += curveidx;
 80119e6:	eb08 000a 	add.w	r0, r8, sl
        XMEMCPY(output + idx, pub, pubidx);
 80119ea:	461a      	mov	r2, r3
 80119ec:	4629      	mov	r1, r5
 80119ee:	4448      	add	r0, r9
 80119f0:	f009 faf6 	bl	801afe0 <memcpy>
        XFREE(pub, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80119f4:	b115      	cbz	r5, 80119fc <wc_BuildEccKeyDer+0x1e8>
 80119f6:	4628      	mov	r0, r5
 80119f8:	f009 fada 	bl	801afb0 <free>
    return (int)totalSz;
 80119fc:	46a2      	mov	sl, r4
 80119fe:	e747      	b.n	8011890 <wc_BuildEccKeyDer+0x7c>

08011a00 <eccToPKCS8>:
 * returns LENGTH_ONLY_E.
 *
 * return length on success else < 0 */
static int eccToPKCS8(ecc_key* key, byte* output, word32* outLen,
        int includePublic)
{
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	b089      	sub	sp, #36	; 0x24
    int ret;
    word32 tmpDerSz;
    int algoID = 0;
    word32 oidSz = 0;
 8011a06:	f04f 0800 	mov.w	r8, #0
#ifdef WOLFSSL_NO_MALLOC
    byte  tmpDer[ECC_BUFSIZE];
#else
    byte* tmpDer = NULL;
#endif
    word32 sz = ECC_BUFSIZE;
 8011a0a:	f240 1b01 	movw	fp, #257	; 0x101
    word32 pkcs8Sz = 0;
 8011a0e:	e9cd 8804 	strd	r8, r8, [sp, #16]
{
 8011a12:	4689      	mov	r9, r1
 8011a14:	4616      	mov	r6, r2
 8011a16:	469a      	mov	sl, r3
    const byte* curveOID = NULL;
 8011a18:	f8cd 8018 	str.w	r8, [sp, #24]
    word32 sz = ECC_BUFSIZE;
 8011a1c:	f8cd b01c 	str.w	fp, [sp, #28]

    if (key == NULL || key->dp == NULL || outLen == NULL)
 8011a20:	4607      	mov	r7, r0
 8011a22:	2800      	cmp	r0, #0
 8011a24:	d057      	beq.n	8011ad6 <eccToPKCS8+0xd6>
 8011a26:	6903      	ldr	r3, [r0, #16]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d054      	beq.n	8011ad6 <eccToPKCS8+0xd6>
 8011a2c:	2a00      	cmp	r2, #0
 8011a2e:	d052      	beq.n	8011ad6 <eccToPKCS8+0xd6>
        return BAD_FUNC_ARG;

    /* set algoID, get curve OID */
    algoID = ECDSAk;
    ret = wc_ecc_get_oid(key->dp->oidSum, &curveOID, &oidSz);
 8011a30:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011a32:	aa04      	add	r2, sp, #16
 8011a34:	a906      	add	r1, sp, #24
 8011a36:	f7fa fc43 	bl	800c2c0 <wc_ecc_get_oid>
    if (ret < 0)
 8011a3a:	1e04      	subs	r4, r0, #0
 8011a3c:	db27      	blt.n	8011a8e <eccToPKCS8+0x8e>
        return ret;

#ifndef WOLFSSL_NO_MALLOC
    /* temp buffer for plain DER key */
    tmpDer = (byte*)XMALLOC(ECC_BUFSIZE, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011a3e:	4658      	mov	r0, fp
 8011a40:	f009 faae 	bl	801afa0 <malloc>
    if (tmpDer == NULL)
 8011a44:	4605      	mov	r5, r0
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d048      	beq.n	8011adc <eccToPKCS8+0xdc>
        return MEMORY_E;
#endif
    XMEMSET(tmpDer, 0, ECC_BUFSIZE);
 8011a4a:	465a      	mov	r2, fp
 8011a4c:	4641      	mov	r1, r8
 8011a4e:	f009 faef 	bl	801b030 <memset>

    ret = wc_BuildEccKeyDer(key, tmpDer, &sz, includePublic, 0);
 8011a52:	f8cd 8000 	str.w	r8, [sp]
 8011a56:	4653      	mov	r3, sl
 8011a58:	aa07      	add	r2, sp, #28
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	4638      	mov	r0, r7
 8011a5e:	f7ff fed9 	bl	8011814 <wc_BuildEccKeyDer>
    if (ret < 0) {
 8011a62:	1e04      	subs	r4, r0, #0
 8011a64:	da03      	bge.n	8011a6e <eccToPKCS8+0x6e>
    #ifndef WOLFSSL_NO_MALLOC
        XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011a66:	4628      	mov	r0, r5

    ret = wc_CreatePKCS8Key(output, &pkcs8Sz, tmpDer, tmpDerSz,
                            algoID, curveOID, oidSz);
    if (ret < 0) {
    #ifndef WOLFSSL_NO_MALLOC
        XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011a68:	f009 faa2 	bl	801afb0 <free>
    #endif
        return ret;
 8011a6c:	e00f      	b.n	8011a8e <eccToPKCS8+0x8e>
    ret = wc_CreatePKCS8Key(NULL, &pkcs8Sz, tmpDer, tmpDerSz, algoID,
 8011a6e:	9a06      	ldr	r2, [sp, #24]
 8011a70:	9904      	ldr	r1, [sp, #16]
                 + MAX_LENGTH_SZ + MAX_LENGTH_SZ + 2;
 8011a72:	f104 0028 	add.w	r0, r4, #40	; 0x28
        if (curveOID != NULL)
 8011a76:	b972      	cbnz	r2, 8011a96 <eccToPKCS8+0x96>
        *outSz = keySz + MAX_SEQ_SZ + MAX_VERSION_SZ + MAX_ALGO_SZ
 8011a78:	9005      	str	r0, [sp, #20]
    if (output == NULL) {
 8011a7a:	f1b9 0f00 	cmp.w	r9, #0
 8011a7e:	d10e      	bne.n	8011a9e <eccToPKCS8+0x9e>
        XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011a80:	4628      	mov	r0, r5
 8011a82:	f009 fa95 	bl	801afb0 <free>
        *outLen = pkcs8Sz;
 8011a86:	9b05      	ldr	r3, [sp, #20]
 8011a88:	6033      	str	r3, [r6, #0]
        return LENGTH_ONLY_E;
 8011a8a:	f06f 04c9 	mvn.w	r4, #201	; 0xc9
    XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    *outLen = (word32)ret;
    return ret;
}
 8011a8e:	4620      	mov	r0, r4
 8011a90:	b009      	add	sp, #36	; 0x24
 8011a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *outSz += oidSz + MAX_LENGTH_SZ + 1;
 8011a96:	1d4b      	adds	r3, r1, #5
 8011a98:	4403      	add	r3, r0
 8011a9a:	9305      	str	r3, [sp, #20]
 8011a9c:	e7ed      	b.n	8011a7a <eccToPKCS8+0x7a>
    else if (*outLen < pkcs8Sz) {
 8011a9e:	6830      	ldr	r0, [r6, #0]
 8011aa0:	9b05      	ldr	r3, [sp, #20]
 8011aa2:	4298      	cmp	r0, r3
 8011aa4:	d205      	bcs.n	8011ab2 <eccToPKCS8+0xb2>
        XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	f009 fa82 	bl	801afb0 <free>
        return BUFFER_E;
 8011aac:	f06f 0483 	mvn.w	r4, #131	; 0x83
 8011ab0:	e7ed      	b.n	8011a8e <eccToPKCS8+0x8e>
    ret = wc_CreatePKCS8Key(output, &pkcs8Sz, tmpDer, tmpDerSz,
 8011ab2:	f240 2306 	movw	r3, #518	; 0x206
 8011ab6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011aba:	9300      	str	r3, [sp, #0]
 8011abc:	462a      	mov	r2, r5
 8011abe:	4623      	mov	r3, r4
 8011ac0:	a905      	add	r1, sp, #20
 8011ac2:	4648      	mov	r0, r9
 8011ac4:	f7ff fb31 	bl	801112a <wc_CreatePKCS8Key>
    if (ret < 0) {
 8011ac8:	1e04      	subs	r4, r0, #0
        XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011aca:	4628      	mov	r0, r5
    if (ret < 0) {
 8011acc:	dbcc      	blt.n	8011a68 <eccToPKCS8+0x68>
    XFREE(tmpDer, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8011ace:	f009 fa6f 	bl	801afb0 <free>
    *outLen = (word32)ret;
 8011ad2:	6034      	str	r4, [r6, #0]
    return ret;
 8011ad4:	e7db      	b.n	8011a8e <eccToPKCS8+0x8e>
        return BAD_FUNC_ARG;
 8011ad6:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8011ada:	e7d8      	b.n	8011a8e <eccToPKCS8+0x8e>
        return MEMORY_E;
 8011adc:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8011ae0:	e7d5      	b.n	8011a8e <eccToPKCS8+0x8e>

08011ae2 <wc_EccKeyToDer>:
{
 8011ae2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_BuildEccKeyDer(key, output, &inLen, 1, 1);
 8011ae4:	2301      	movs	r3, #1
{
 8011ae6:	9203      	str	r2, [sp, #12]
    return wc_BuildEccKeyDer(key, output, &inLen, 1, 1);
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	aa03      	add	r2, sp, #12
 8011aec:	f7ff fe92 	bl	8011814 <wc_BuildEccKeyDer>
}
 8011af0:	b005      	add	sp, #20
 8011af2:	f85d fb04 	ldr.w	pc, [sp], #4

08011af6 <wc_EccPrivateKeyToPKCS8>:
/* Write only private ecc key to unencrypted PKCS#8 format.
 *
 * return length on success else < 0 */
int wc_EccPrivateKeyToPKCS8(ecc_key* key, byte* output, word32* outLen)
{
    return eccToPKCS8(key, output, outLen, 0);
 8011af6:	2300      	movs	r3, #0
 8011af8:	f7ff bf82 	b.w	8011a00 <eccToPKCS8>

08011afc <DecodeAsymKey>:
    || (defined(HAVE_PQC) && defined(HAVE_SPHINCS)))

int DecodeAsymKey(const byte* input, word32* inOutIdx, word32 inSz,
    byte* privKey, word32* privKeyLen,
    byte* pubKey, word32* pubKeyLen, int keyType)
{
 8011afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b00:	b089      	sub	sp, #36	; 0x24
 8011b02:	460c      	mov	r4, r1
 8011b04:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8011b08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011b0c:	4617      	mov	r7, r2
 8011b0e:	4699      	mov	r9, r3
    int ret = 0;
    DECL_ASNGETDATA(dataASN, edKeyASN_Length);
    CALLOC_ASNGETDATA(dataASN, edKeyASN_Length, ret, NULL);
#endif

    if (input == NULL || inOutIdx == NULL || inSz == 0 ||
 8011b10:	4605      	mov	r5, r0
 8011b12:	b920      	cbnz	r0, 8011b1e <DecodeAsymKey+0x22>
        privKey == NULL || privKeyLen == NULL) {
    #ifdef WOLFSSL_ASN_TEMPLATE
        FREE_ASNGETDATA(dataASN, NULL);
    #endif
        return BAD_FUNC_ARG;
 8011b14:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8011b18:	b009      	add	sp, #36	; 0x24
 8011b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL || inOutIdx == NULL || inSz == 0 ||
 8011b1e:	2900      	cmp	r1, #0
 8011b20:	d0f8      	beq.n	8011b14 <DecodeAsymKey+0x18>
 8011b22:	2a00      	cmp	r2, #0
 8011b24:	d0f6      	beq.n	8011b14 <DecodeAsymKey+0x18>
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d0f4      	beq.n	8011b14 <DecodeAsymKey+0x18>
        privKey == NULL || privKeyLen == NULL) {
 8011b2a:	f1ba 0f00 	cmp.w	sl, #0
 8011b2e:	d0f1      	beq.n	8011b14 <DecodeAsymKey+0x18>
    if (GetSequence(input, inOutIdx, &length, inSz) >= 0) {
 8011b30:	4613      	mov	r3, r2
 8011b32:	aa05      	add	r2, sp, #20
 8011b34:	f7fe fc81 	bl	801043a <GetSequence>
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	db38      	blt.n	8011bae <DecodeAsymKey+0xb2>
        endKeyIdx = (int)*inOutIdx + length;
 8011b3c:	9b05      	ldr	r3, [sp, #20]
 8011b3e:	6826      	ldr	r6, [r4, #0]
        if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 8011b40:	aa04      	add	r2, sp, #16
        endKeyIdx = (int)*inOutIdx + length;
 8011b42:	441e      	add	r6, r3
        if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 8011b44:	4621      	mov	r1, r4
 8011b46:	463b      	mov	r3, r7
 8011b48:	4628      	mov	r0, r5
 8011b4a:	f7fe fcf6 	bl	801053a <GetMyVersion>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	db4e      	blt.n	8011bf0 <DecodeAsymKey+0xf4>
        if (version != 0) {
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d14b      	bne.n	8011bf0 <DecodeAsymKey+0xf4>
        if (GetAlgoId(input, inOutIdx, &oid, oidKeyType, inSz) < 0)
 8011b58:	9700      	str	r7, [sp, #0]
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	aa03      	add	r2, sp, #12
 8011b5e:	4621      	mov	r1, r4
 8011b60:	4628      	mov	r0, r5
 8011b62:	f7fe ff9f 	bl	8010aa4 <GetAlgoId>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	db42      	blt.n	8011bf0 <DecodeAsymKey+0xf4>
        if (oid != (word32)keyType)
 8011b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b6c:	9a03      	ldr	r2, [sp, #12]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d13e      	bne.n	8011bf0 <DecodeAsymKey+0xf4>
        if (GetOctetString(input, inOutIdx, &length, inSz) < 0)
 8011b72:	463b      	mov	r3, r7
 8011b74:	aa05      	add	r2, sp, #20
 8011b76:	4621      	mov	r1, r4
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f7fe fc69 	bl	8010450 <GetOctetString>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	db36      	blt.n	8011bf0 <DecodeAsymKey+0xf4>
        if (GetOctetString(input, inOutIdx, &privSz, inSz) < 0)
 8011b82:	463b      	mov	r3, r7
 8011b84:	aa06      	add	r2, sp, #24
 8011b86:	4621      	mov	r1, r4
 8011b88:	4628      	mov	r0, r5
 8011b8a:	f7fe fc61 	bl	8010450 <GetOctetString>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	db2e      	blt.n	8011bf0 <DecodeAsymKey+0xf4>
        priv = input + *inOutIdx;
 8011b92:	6822      	ldr	r2, [r4, #0]
        *inOutIdx += (word32)privSz;
 8011b94:	9b06      	ldr	r3, [sp, #24]
 8011b96:	4413      	add	r3, r2
        priv = input + *inOutIdx;
 8011b98:	eb05 0b02 	add.w	fp, r5, r2
        *inOutIdx += (word32)privSz;
 8011b9c:	6023      	str	r3, [r4, #0]
    if ((word32)privSz > *privKeyLen)
 8011b9e:	9a06      	ldr	r2, [sp, #24]
 8011ba0:	f8da 3000 	ldr.w	r3, [sl]
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d211      	bcs.n	8011bcc <DecodeAsymKey+0xd0>
        return BUFFER_E;
 8011ba8:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8011bac:	e7b4      	b.n	8011b18 <DecodeAsymKey+0x1c>
        if (GetOctetString(input, inOutIdx, &privSz, inSz) < 0)
 8011bae:	463b      	mov	r3, r7
 8011bb0:	aa06      	add	r2, sp, #24
 8011bb2:	4621      	mov	r1, r4
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	f7fe fc4b 	bl	8010450 <GetOctetString>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	db18      	blt.n	8011bf0 <DecodeAsymKey+0xf4>
        priv = input + *inOutIdx;
 8011bbe:	6826      	ldr	r6, [r4, #0]
        *inOutIdx += (word32)privSz;
 8011bc0:	9b06      	ldr	r3, [sp, #24]
        priv = input + *inOutIdx;
 8011bc2:	eb05 0b06 	add.w	fp, r5, r6
        *inOutIdx += (word32)privSz;
 8011bc6:	441e      	add	r6, r3
 8011bc8:	6026      	str	r6, [r4, #0]
        endKeyIdx = (int)*inOutIdx;
 8011bca:	e7e8      	b.n	8011b9e <DecodeAsymKey+0xa2>
    if (endKeyIdx == (int)*inOutIdx) {
 8011bcc:	6823      	ldr	r3, [r4, #0]
 8011bce:	42b3      	cmp	r3, r6
 8011bd0:	d111      	bne.n	8011bf6 <DecodeAsymKey+0xfa>
        *privKeyLen = (word32)privSz;
 8011bd2:	f8ca 2000 	str.w	r2, [sl]
        XMEMCPY(privKey, priv, *privKeyLen);
 8011bd6:	4659      	mov	r1, fp
 8011bd8:	4648      	mov	r0, r9
 8011bda:	f009 fa01 	bl	801afe0 <memcpy>
        if (pubKeyLen != NULL)
 8011bde:	f1b8 0f00 	cmp.w	r8, #0
 8011be2:	d002      	beq.n	8011bea <DecodeAsymKey+0xee>
            *pubKeyLen = 0;
 8011be4:	2300      	movs	r3, #0
 8011be6:	f8c8 3000 	str.w	r3, [r8]
    if (endKeyIdx != (int)*inOutIdx)
 8011bea:	6823      	ldr	r3, [r4, #0]
 8011bec:	42b3      	cmp	r3, r6
 8011bee:	d02a      	beq.n	8011c46 <DecodeAsymKey+0x14a>
        return ASN_PARSE_E;
 8011bf0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8011bf4:	e790      	b.n	8011b18 <DecodeAsymKey+0x1c>
        if (pubKeyLen == NULL) {
 8011bf6:	f1b8 0f00 	cmp.w	r8, #0
 8011bfa:	d08b      	beq.n	8011b14 <DecodeAsymKey+0x18>
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e9cd 7300 	strd	r7, r3, [sp]
 8011c02:	4622      	mov	r2, r4
 8011c04:	ab07      	add	r3, sp, #28
 8011c06:	2181      	movs	r1, #129	; 0x81
 8011c08:	4628      	mov	r0, r5
 8011c0a:	f7fe fbeb 	bl	80103e4 <GetASNHeader_ex>
        if (GetASNHeader(input, ASN_CONTEXT_SPECIFIC | ASN_ASYMKEY_PUBKEY | 1,
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	dbee      	blt.n	8011bf0 <DecodeAsymKey+0xf4>
        if ((word32)pubSz > *pubKeyLen)
 8011c12:	9b07      	ldr	r3, [sp, #28]
 8011c14:	f8d8 2000 	ldr.w	r2, [r8]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d3c5      	bcc.n	8011ba8 <DecodeAsymKey+0xac>
        pub = input + *inOutIdx;
 8011c1c:	6827      	ldr	r7, [r4, #0]
        *privKeyLen = (word32)privSz;
 8011c1e:	9a06      	ldr	r2, [sp, #24]
        *inOutIdx += (word32)pubSz;
 8011c20:	443b      	add	r3, r7
 8011c22:	6023      	str	r3, [r4, #0]
        XMEMCPY(privKey, priv, *privKeyLen);
 8011c24:	4659      	mov	r1, fp
        *privKeyLen = (word32)privSz;
 8011c26:	f8ca 2000 	str.w	r2, [sl]
        XMEMCPY(privKey, priv, *privKeyLen);
 8011c2a:	4648      	mov	r0, r9
 8011c2c:	f009 f9d8 	bl	801afe0 <memcpy>
        if (pubKey != NULL)
 8011c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        *pubKeyLen = (word32)pubSz;
 8011c32:	9a07      	ldr	r2, [sp, #28]
 8011c34:	f8c8 2000 	str.w	r2, [r8]
        if (pubKey != NULL)
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d0d6      	beq.n	8011bea <DecodeAsymKey+0xee>
            XMEMCPY(pubKey, pub, *pubKeyLen);
 8011c3c:	19e9      	adds	r1, r5, r7
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f009 f9ce 	bl	801afe0 <memcpy>
 8011c44:	e7d1      	b.n	8011bea <DecodeAsymKey+0xee>
    return 0;
 8011c46:	2000      	movs	r0, #0
 8011c48:	e766      	b.n	8011b18 <DecodeAsymKey+0x1c>

08011c4a <DecodeAsymKeyPublic>:

int DecodeAsymKeyPublic(const byte* input, word32* inOutIdx, word32 inSz,
    byte* pubKey, word32* pubKeyLen, int keyType)
{
 8011c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c4e:	b085      	sub	sp, #20
 8011c50:	460d      	mov	r5, r1
 8011c52:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8011c56:	4616      	mov	r6, r2
 8011c58:	4698      	mov	r8, r3
#else
    word32 len;
    DECL_ASNGETDATA(dataASN, edPubKeyASN_Length);
#endif

    if (input == NULL || inSz == 0 || inOutIdx == NULL ||
 8011c5a:	4607      	mov	r7, r0
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	d047      	beq.n	8011cf0 <DecodeAsymKeyPublic+0xa6>
 8011c60:	2a00      	cmp	r2, #0
 8011c62:	d045      	beq.n	8011cf0 <DecodeAsymKeyPublic+0xa6>
 8011c64:	2900      	cmp	r1, #0
 8011c66:	d043      	beq.n	8011cf0 <DecodeAsymKeyPublic+0xa6>
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d041      	beq.n	8011cf0 <DecodeAsymKeyPublic+0xa6>
        pubKey == NULL || pubKeyLen == NULL) {
 8011c6c:	f1b9 0f00 	cmp.w	r9, #0
 8011c70:	d03e      	beq.n	8011cf0 <DecodeAsymKeyPublic+0xa6>
        return BAD_FUNC_ARG;
    }

#ifndef WOLFSSL_ASN_TEMPLATE
    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8011c72:	4613      	mov	r3, r2
 8011c74:	aa02      	add	r2, sp, #8
 8011c76:	f7fe fbe0 	bl	801043a <GetSequence>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	da05      	bge.n	8011c8a <DecodeAsymKeyPublic+0x40>
        return ASN_PARSE_E;
 8011c7e:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    }

    FREE_ASNGETDATA(dataASN, NULL);
#endif /* WOLFSSL_ASN_TEMPLATE */
    return ret;
}
 8011c82:	4620      	mov	r0, r4
 8011c84:	b005      	add	sp, #20
 8011c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8011c8a:	4633      	mov	r3, r6
 8011c8c:	aa02      	add	r2, sp, #8
 8011c8e:	4629      	mov	r1, r5
 8011c90:	4638      	mov	r0, r7
 8011c92:	f7fe fbd2 	bl	801043a <GetSequence>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	dbf1      	blt.n	8011c7e <DecodeAsymKeyPublic+0x34>
    if (GetObjectId(input, inOutIdx, &oid, oidKeyType, inSz) < 0)
 8011c9a:	9600      	str	r6, [sp, #0]
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	aa03      	add	r2, sp, #12
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4638      	mov	r0, r7
 8011ca4:	f7fe fec7 	bl	8010a36 <GetObjectId>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	dbe8      	blt.n	8011c7e <DecodeAsymKeyPublic+0x34>
    if (oid != (word32)keyType)
 8011cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cae:	9a03      	ldr	r2, [sp, #12]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d1e4      	bne.n	8011c7e <DecodeAsymKeyPublic+0x34>
    ret = CheckBitString(input, inOutIdx, &length, inSz, 1, NULL);
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	e9cd 3200 	strd	r3, r2, [sp]
 8011cbc:	4629      	mov	r1, r5
 8011cbe:	4633      	mov	r3, r6
 8011cc0:	aa02      	add	r2, sp, #8
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	f7fe fc5f 	bl	8010586 <CheckBitString>
    if (ret != 0)
 8011cc8:	4604      	mov	r4, r0
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d1d9      	bne.n	8011c82 <DecodeAsymKeyPublic+0x38>
    if ((word32)length > *pubKeyLen)
 8011cce:	9a02      	ldr	r2, [sp, #8]
 8011cd0:	f8d9 3000 	ldr.w	r3, [r9]
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d3d2      	bcc.n	8011c7e <DecodeAsymKeyPublic+0x34>
    if (*inOutIdx + (word32)length != inSz)
 8011cd8:	682b      	ldr	r3, [r5, #0]
 8011cda:	4413      	add	r3, r2
 8011cdc:	42b3      	cmp	r3, r6
 8011cde:	d1ce      	bne.n	8011c7e <DecodeAsymKeyPublic+0x34>
    *pubKeyLen = (word32)length;
 8011ce0:	f8c9 2000 	str.w	r2, [r9]
    XMEMCPY(pubKey, input + *inOutIdx, *pubKeyLen);
 8011ce4:	6829      	ldr	r1, [r5, #0]
 8011ce6:	4640      	mov	r0, r8
 8011ce8:	4439      	add	r1, r7
 8011cea:	f009 f979 	bl	801afe0 <memcpy>
    return ret;
 8011cee:	e7c8      	b.n	8011c82 <DecodeAsymKeyPublic+0x38>
        return BAD_FUNC_ARG;
 8011cf0:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8011cf4:	e7c5      	b.n	8011c82 <DecodeAsymKeyPublic+0x38>

08011cf6 <wc_Ed25519PrivateKeyDecode>:
#endif /* WC_ENABLE_ASYM_KEY_IMPORT */

#if defined(HAVE_ED25519) && defined(HAVE_ED25519_KEY_IMPORT)
int wc_Ed25519PrivateKeyDecode(const byte* input, word32* inOutIdx,
                               ed25519_key* key, word32 inSz)
{
 8011cf6:	b530      	push	{r4, r5, lr}
    int ret;
    byte privKey[ED25519_KEY_SIZE], pubKey[2*ED25519_PUB_KEY_SIZE+1];
    word32 privKeyLen = (word32)sizeof(privKey);
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8011cf8:	f04f 0c20 	mov.w	ip, #32
{
 8011cfc:	b0a1      	sub	sp, #132	; 0x84
 8011cfe:	4614      	mov	r4, r2
 8011d00:	461a      	mov	r2, r3
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8011d02:	2341      	movs	r3, #65	; 0x41
 8011d04:	e9cd c305 	strd	ip, r3, [sp, #20]

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0) {
 8011d08:	b1f0      	cbz	r0, 8011d48 <wc_Ed25519PrivateKeyDecode+0x52>
 8011d0a:	b1e9      	cbz	r1, 8011d48 <wc_Ed25519PrivateKeyDecode+0x52>
 8011d0c:	b1e4      	cbz	r4, 8011d48 <wc_Ed25519PrivateKeyDecode+0x52>
 8011d0e:	b1da      	cbz	r2, 8011d48 <wc_Ed25519PrivateKeyDecode+0x52>
        return BAD_FUNC_ARG;
    }

    ret = DecodeAsymKey(input, inOutIdx, inSz, privKey, &privKeyLen,
 8011d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d14:	9303      	str	r3, [sp, #12]
 8011d16:	ab06      	add	r3, sp, #24
 8011d18:	9302      	str	r3, [sp, #8]
 8011d1a:	ad0f      	add	r5, sp, #60	; 0x3c
 8011d1c:	ab05      	add	r3, sp, #20
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	9501      	str	r5, [sp, #4]
 8011d22:	ab07      	add	r3, sp, #28
 8011d24:	f7ff feea 	bl	8011afc <DecodeAsymKey>
        pubKey, &pubKeyLen, ED25519k);
    if (ret == 0) {
 8011d28:	b930      	cbnz	r0, 8011d38 <wc_Ed25519PrivateKeyDecode+0x42>
        if (pubKeyLen == 0) {
            ret = wc_ed25519_import_private_only(privKey, privKeyLen, key);
 8011d2a:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
        if (pubKeyLen == 0) {
 8011d2e:	b92b      	cbnz	r3, 8011d3c <wc_Ed25519PrivateKeyDecode+0x46>
            ret = wc_ed25519_import_private_only(privKey, privKeyLen, key);
 8011d30:	4622      	mov	r2, r4
 8011d32:	a807      	add	r0, sp, #28
 8011d34:	f001 f9b1 	bl	801309a <wc_ed25519_import_private_only>
            ret = wc_ed25519_import_private_key(privKey, privKeyLen,
                pubKey, pubKeyLen, key);
        }
    }
    return ret;
}
 8011d38:	b021      	add	sp, #132	; 0x84
 8011d3a:	bd30      	pop	{r4, r5, pc}
            ret = wc_ed25519_import_private_key(privKey, privKeyLen,
 8011d3c:	9400      	str	r4, [sp, #0]
 8011d3e:	462a      	mov	r2, r5
 8011d40:	a807      	add	r0, sp, #28
 8011d42:	f001 f9a1 	bl	8013088 <wc_ed25519_import_private_key>
 8011d46:	e7f7      	b.n	8011d38 <wc_Ed25519PrivateKeyDecode+0x42>
        return BAD_FUNC_ARG;
 8011d48:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8011d4c:	e7f4      	b.n	8011d38 <wc_Ed25519PrivateKeyDecode+0x42>

08011d4e <wc_Ed25519PublicKeyDecode>:

int wc_Ed25519PublicKeyDecode(const byte* input, word32* inOutIdx,
                              ed25519_key* key, word32 inSz)
{
 8011d4e:	b530      	push	{r4, r5, lr}
 8011d50:	b095      	sub	sp, #84	; 0x54
 8011d52:	4614      	mov	r4, r2
 8011d54:	461a      	mov	r2, r3
    int ret;
    byte pubKey[2*ED25519_PUB_KEY_SIZE+1];
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8011d56:	2341      	movs	r3, #65	; 0x41
 8011d58:	9302      	str	r3, [sp, #8]

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0) {
 8011d5a:	b190      	cbz	r0, 8011d82 <wc_Ed25519PublicKeyDecode+0x34>
 8011d5c:	b189      	cbz	r1, 8011d82 <wc_Ed25519PublicKeyDecode+0x34>
 8011d5e:	b184      	cbz	r4, 8011d82 <wc_Ed25519PublicKeyDecode+0x34>
 8011d60:	b17a      	cbz	r2, 8011d82 <wc_Ed25519PublicKeyDecode+0x34>
        return BAD_FUNC_ARG;
    }

    ret = DecodeAsymKeyPublic(input, inOutIdx, inSz,
 8011d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	ab02      	add	r3, sp, #8
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	ab03      	add	r3, sp, #12
 8011d6e:	f7ff ff6c 	bl	8011c4a <DecodeAsymKeyPublic>
        pubKey, &pubKeyLen, ED25519k);
    if (ret == 0) {
 8011d72:	b920      	cbnz	r0, 8011d7e <wc_Ed25519PublicKeyDecode+0x30>
        ret = wc_ed25519_import_public(pubKey, pubKeyLen, key);
 8011d74:	9902      	ldr	r1, [sp, #8]
 8011d76:	4622      	mov	r2, r4
 8011d78:	a803      	add	r0, sp, #12
 8011d7a:	f001 f93d 	bl	8012ff8 <wc_ed25519_import_public>
    }
    return ret;
}
 8011d7e:	b015      	add	sp, #84	; 0x54
 8011d80:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8011d82:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8011d86:	e7fa      	b.n	8011d7e <wc_Ed25519PublicKeyDecode+0x30>

08011d88 <wc_Curve25519PrivateKeyDecode>:
#endif /* HAVE_ED25519 && HAVE_ED25519_KEY_IMPORT */

#if defined(HAVE_CURVE25519) && defined(HAVE_CURVE25519_KEY_IMPORT)
int wc_Curve25519PrivateKeyDecode(const byte* input, word32* inOutIdx,
                               curve25519_key* key, word32 inSz)
{
 8011d88:	b530      	push	{r4, r5, lr}
 8011d8a:	b08f      	sub	sp, #60	; 0x3c
 8011d8c:	4614      	mov	r4, r2
 8011d8e:	461a      	mov	r2, r3
    int ret;
    byte privKey[CURVE25519_KEYSIZE];
    word32 privKeyLen = CURVE25519_KEYSIZE;
 8011d90:	2320      	movs	r3, #32
 8011d92:	9305      	str	r3, [sp, #20]

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0) {
 8011d94:	b1a0      	cbz	r0, 8011dc0 <wc_Curve25519PrivateKeyDecode+0x38>
 8011d96:	b199      	cbz	r1, 8011dc0 <wc_Curve25519PrivateKeyDecode+0x38>
 8011d98:	b194      	cbz	r4, 8011dc0 <wc_Curve25519PrivateKeyDecode+0x38>
 8011d9a:	b18a      	cbz	r2, 8011dc0 <wc_Curve25519PrivateKeyDecode+0x38>
        return BAD_FUNC_ARG;
    }

    ret = DecodeAsymKey(input, inOutIdx, inSz, privKey, &privKeyLen,
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	25fe      	movs	r5, #254	; 0xfe
 8011da0:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8011da4:	9301      	str	r3, [sp, #4]
 8011da6:	ab05      	add	r3, sp, #20
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	ab06      	add	r3, sp, #24
 8011dac:	f7ff fea6 	bl	8011afc <DecodeAsymKey>
        NULL, NULL, X25519k);
    if (ret == 0) {
 8011db0:	b920      	cbnz	r0, 8011dbc <wc_Curve25519PrivateKeyDecode+0x34>
        ret = wc_curve25519_import_private(privKey, privKeyLen, key);
 8011db2:	9905      	ldr	r1, [sp, #20]
 8011db4:	4622      	mov	r2, r4
 8011db6:	a806      	add	r0, sp, #24
 8011db8:	f000 fd36 	bl	8012828 <wc_curve25519_import_private>
    }
    return ret;
}
 8011dbc:	b00f      	add	sp, #60	; 0x3c
 8011dbe:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8011dc0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8011dc4:	e7fa      	b.n	8011dbc <wc_Curve25519PrivateKeyDecode+0x34>

08011dc6 <wc_Curve25519PublicKeyDecode>:

int wc_Curve25519PublicKeyDecode(const byte* input, word32* inOutIdx,
                              curve25519_key* key, word32 inSz)
{
 8011dc6:	b530      	push	{r4, r5, lr}
 8011dc8:	b08d      	sub	sp, #52	; 0x34
 8011dca:	4614      	mov	r4, r2
 8011dcc:	461a      	mov	r2, r3
    int ret;
    byte pubKey[CURVE25519_KEYSIZE];
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8011dce:	2320      	movs	r3, #32
 8011dd0:	9303      	str	r3, [sp, #12]

    if (input == NULL || inOutIdx == NULL || key == NULL || inSz == 0) {
 8011dd2:	b188      	cbz	r0, 8011df8 <wc_Curve25519PublicKeyDecode+0x32>
 8011dd4:	b181      	cbz	r1, 8011df8 <wc_Curve25519PublicKeyDecode+0x32>
 8011dd6:	b17c      	cbz	r4, 8011df8 <wc_Curve25519PublicKeyDecode+0x32>
 8011dd8:	b172      	cbz	r2, 8011df8 <wc_Curve25519PublicKeyDecode+0x32>
        return BAD_FUNC_ARG;
    }

    ret = DecodeAsymKeyPublic(input, inOutIdx, inSz,
 8011dda:	23fe      	movs	r3, #254	; 0xfe
 8011ddc:	9301      	str	r3, [sp, #4]
 8011dde:	ab03      	add	r3, sp, #12
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	ab04      	add	r3, sp, #16
 8011de4:	f7ff ff31 	bl	8011c4a <DecodeAsymKeyPublic>
        pubKey, &pubKeyLen, X25519k);
    if (ret == 0) {
 8011de8:	b920      	cbnz	r0, 8011df4 <wc_Curve25519PublicKeyDecode+0x2e>
        ret = wc_curve25519_import_public(pubKey, pubKeyLen, key);
 8011dea:	9903      	ldr	r1, [sp, #12]
 8011dec:	4622      	mov	r2, r4
 8011dee:	a804      	add	r0, sp, #16
 8011df0:	f000 fc5c 	bl	80126ac <wc_curve25519_import_public>
    }
    return ret;
}
 8011df4:	b00d      	add	sp, #52	; 0x34
 8011df6:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8011df8:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8011dfc:	e7fa      	b.n	8011df4 <wc_Curve25519PublicKeyDecode+0x2e>

08011dfe <SetAsymKeyDer>:
 * @return  MEMORY_E when dynamic memory allocation failed.
 */
int SetAsymKeyDer(const byte* privKey, word32 privKeyLen,
    const byte* pubKey, word32 pubKeyLen,
    byte* output, word32 outLen, int keyType)
{
 8011dfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011e04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011e08:	460e      	mov	r6, r1
 8011e0a:	4690      	mov	r8, r2
 8011e0c:	461f      	mov	r7, r3
    DECL_ASNSETDATA(dataASN, edKeyASN_Length);
    int sz;
#endif

    /* Validate parameters. */
    if (privKey == NULL || outLen == 0) {
 8011e0e:	4681      	mov	r9, r0
 8011e10:	b918      	cbnz	r0, 8011e1a <SetAsymKeyDer+0x1c>
        return BAD_FUNC_ARG;
 8011e12:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    }

    FREE_ASNSETDATA(dataASN, NULL);
#endif
    return ret;
}
 8011e16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (privKey == NULL || outLen == 0) {
 8011e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d0f8      	beq.n	8011e12 <SetAsymKeyDer+0x14>
    if (pubKey) {
 8011e20:	2a00      	cmp	r2, #0
 8011e22:	d047      	beq.n	8011eb4 <SetAsymKeyDer+0xb6>
        pubSz = 2 + pubKeyLen;
 8011e24:	1cbc      	adds	r4, r7, #2
    algoSz = SetAlgoID(keyType, NULL, oidKeyType, 0);
 8011e26:	2300      	movs	r3, #0
 8011e28:	4619      	mov	r1, r3
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	4650      	mov	r0, sl
 8011e2e:	f7ff f827 	bl	8010e80 <SetAlgoID>
    seqSz  = SetSequence(verSz + algoSz + privSz + pubSz, NULL);
 8011e32:	1df3      	adds	r3, r6, #7
 8011e34:	4423      	add	r3, r4
 8011e36:	eb03 0b00 	add.w	fp, r3, r0
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	4658      	mov	r0, fp
 8011e3e:	f7ff f815 	bl	8010e6c <SetSequence>
    sz = seqSz + verSz + algoSz + privSz + pubSz;
 8011e42:	eb0b 0400 	add.w	r4, fp, r0
    if (output != NULL && sz > outLen) {
 8011e46:	b39d      	cbz	r5, 8011eb0 <SetAsymKeyDer+0xb2>
 8011e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e4a:	42a3      	cmp	r3, r4
 8011e4c:	d3e1      	bcc.n	8011e12 <SetAsymKeyDer+0x14>
        seqSz = SetSequence(verSz + algoSz + privSz + pubSz, output);
 8011e4e:	4629      	mov	r1, r5
 8011e50:	4658      	mov	r0, fp
 8011e52:	f7ff f80b 	bl	8010e6c <SetSequence>
        SetMyVersion(0, output + idx, FALSE);
 8011e56:	2200      	movs	r2, #0
        seqSz = SetSequence(verSz + algoSz + privSz + pubSz, output);
 8011e58:	4604      	mov	r4, r0
        SetMyVersion(0, output + idx, FALSE);
 8011e5a:	1829      	adds	r1, r5, r0
        idx += verSz;
 8011e5c:	3403      	adds	r4, #3
        SetMyVersion(0, output + idx, FALSE);
 8011e5e:	4610      	mov	r0, r2
 8011e60:	f7ff f950 	bl	8011104 <SetMyVersion>
        algoSz = SetAlgoID(keyType, output + idx, oidKeyType, 0);
 8011e64:	2300      	movs	r3, #0
 8011e66:	2202      	movs	r2, #2
 8011e68:	1929      	adds	r1, r5, r4
 8011e6a:	4650      	mov	r0, sl
 8011e6c:	f7ff f808 	bl	8010e80 <SetAlgoID>
        idx += algoSz;
 8011e70:	4404      	add	r4, r0
        idx += SetOctetString(2 + privKeyLen, output + idx);
 8011e72:	1929      	adds	r1, r5, r4
 8011e74:	1cb0      	adds	r0, r6, #2
 8011e76:	f7fe fffe 	bl	8010e76 <SetOctetString>
 8011e7a:	4404      	add	r4, r0
        idx += SetOctetString(privKeyLen, output + idx);
 8011e7c:	1929      	adds	r1, r5, r4
 8011e7e:	4630      	mov	r0, r6
 8011e80:	f7fe fff9 	bl	8010e76 <SetOctetString>
 8011e84:	4404      	add	r4, r0
        XMEMCPY(output + idx, privKey, privKeyLen);
 8011e86:	1928      	adds	r0, r5, r4
 8011e88:	4632      	mov	r2, r6
 8011e8a:	4649      	mov	r1, r9
 8011e8c:	f009 f8a8 	bl	801afe0 <memcpy>
        idx += privKeyLen;
 8011e90:	4434      	add	r4, r6
        if (pubKey) {
 8011e92:	f1b8 0f00 	cmp.w	r8, #0
 8011e96:	d00b      	beq.n	8011eb0 <SetAsymKeyDer+0xb2>
            idx += SetHeader(ASN_CONTEXT_SPECIFIC | ASN_ASYMKEY_PUBKEY |
 8011e98:	192a      	adds	r2, r5, r4
 8011e9a:	4639      	mov	r1, r7
 8011e9c:	2081      	movs	r0, #129	; 0x81
 8011e9e:	f7fe ffda 	bl	8010e56 <SetHeader>
 8011ea2:	4404      	add	r4, r0
            XMEMCPY(output + idx, pubKey, pubKeyLen);
 8011ea4:	1928      	adds	r0, r5, r4
 8011ea6:	463a      	mov	r2, r7
 8011ea8:	4641      	mov	r1, r8
 8011eaa:	f009 f899 	bl	801afe0 <memcpy>
            idx += pubKeyLen;
 8011eae:	443c      	add	r4, r7
        ret = (int)sz;
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	e7b0      	b.n	8011e16 <SetAsymKeyDer+0x18>
    word32 idx = 0, seqSz, verSz, algoSz, privSz, pubSz = 0, sz;
 8011eb4:	4614      	mov	r4, r2
 8011eb6:	e7b6      	b.n	8011e26 <SetAsymKeyDer+0x28>

08011eb8 <wc_Curve25519PrivateKeyToDer>:

#if defined(HAVE_CURVE25519) && defined(HAVE_CURVE25519_KEY_EXPORT)
/* Write only private Curve25519 key to DER format,
 * length on success else < 0 */
int wc_Curve25519PrivateKeyToDer(curve25519_key* key, byte* output, word32 inLen)
{
 8011eb8:	b530      	push	{r4, r5, lr}
 8011eba:	b08f      	sub	sp, #60	; 0x3c
    int    ret;
    byte   privKey[CURVE25519_KEYSIZE];
    word32 privKeyLen = CURVE25519_KEYSIZE;
 8011ebc:	2320      	movs	r3, #32
{
 8011ebe:	460c      	mov	r4, r1
 8011ec0:	4615      	mov	r5, r2
    word32 privKeyLen = CURVE25519_KEYSIZE;
 8011ec2:	9305      	str	r3, [sp, #20]

    if (key == NULL) {
 8011ec4:	b180      	cbz	r0, 8011ee8 <wc_Curve25519PrivateKeyToDer+0x30>
        return BAD_FUNC_ARG;
    }

    ret = wc_curve25519_export_private_raw(key, privKey, &privKeyLen);
 8011ec6:	aa05      	add	r2, sp, #20
 8011ec8:	a906      	add	r1, sp, #24
 8011eca:	f000 fc60 	bl	801278e <wc_curve25519_export_private_raw>
    if (ret == 0) {
 8011ece:	b948      	cbnz	r0, 8011ee4 <wc_Curve25519PrivateKeyToDer+0x2c>
        ret = SetAsymKeyDer(privKey, privKeyLen, NULL, 0, output, inLen,
 8011ed0:	23fe      	movs	r3, #254	; 0xfe
 8011ed2:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	4603      	mov	r3, r0
 8011eda:	9905      	ldr	r1, [sp, #20]
 8011edc:	9400      	str	r4, [sp, #0]
 8011ede:	a806      	add	r0, sp, #24
 8011ee0:	f7ff ff8d 	bl	8011dfe <SetAsymKeyDer>
            X25519k);
    }
    return ret;
}
 8011ee4:	b00f      	add	sp, #60	; 0x3c
 8011ee6:	bd30      	pop	{r4, r5, pc}
        return BAD_FUNC_ARG;
 8011ee8:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8011eec:	e7fa      	b.n	8011ee4 <wc_Curve25519PrivateKeyToDer+0x2c>

08011eee <wc_Curve25519PublicKeyToDer>:

/* Write a public Curve25519 key to DER format,
 * length on success else < 0 */
int wc_Curve25519PublicKeyToDer(curve25519_key* key, byte* output, word32 inLen,
                             int withAlg)
{
 8011eee:	b570      	push	{r4, r5, r6, lr}
 8011ef0:	b08c      	sub	sp, #48	; 0x30
 8011ef2:	461e      	mov	r6, r3
    int    ret;
    byte   pubKey[CURVE25519_PUB_KEY_SIZE];
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8011ef4:	2320      	movs	r3, #32
{
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	4615      	mov	r5, r2
    word32 pubKeyLen = (word32)sizeof(pubKey);
 8011efa:	9303      	str	r3, [sp, #12]

    if (key == NULL || output == NULL) {
 8011efc:	b180      	cbz	r0, 8011f20 <wc_Curve25519PublicKeyToDer+0x32>
 8011efe:	b179      	cbz	r1, 8011f20 <wc_Curve25519PublicKeyToDer+0x32>
        return BAD_FUNC_ARG;
    }

    ret = wc_curve25519_export_public(key, pubKey, &pubKeyLen);
 8011f00:	aa03      	add	r2, sp, #12
 8011f02:	a904      	add	r1, sp, #16
 8011f04:	f000 fbb0 	bl	8012668 <wc_curve25519_export_public>
    if (ret == 0) {
 8011f08:	b940      	cbnz	r0, 8011f1c <wc_Curve25519PublicKeyToDer+0x2e>
        ret = SetAsymKeyDerPublic(pubKey, pubKeyLen, output, inLen,
 8011f0a:	23fe      	movs	r3, #254	; 0xfe
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	9903      	ldr	r1, [sp, #12]
 8011f10:	9601      	str	r6, [sp, #4]
 8011f12:	462b      	mov	r3, r5
 8011f14:	4622      	mov	r2, r4
 8011f16:	a804      	add	r0, sp, #16
 8011f18:	f7ff f8a8 	bl	801106c <SetAsymKeyDerPublic>
            X25519k, withAlg);
    }
    return ret;
}
 8011f1c:	b00c      	add	sp, #48	; 0x30
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 8011f20:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8011f24:	e7fa      	b.n	8011f1c <wc_Curve25519PublicKeyToDer+0x2e>
	...

08011f28 <Base64_Char2Val>:
     * 64 bytes in a cache line - first line has 64, second has 16
     */
    byte v;
    byte mask;

    c -= BASE64_MIN;
 8011f28:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
 8011f2c:	b2db      	uxtb	r3, r3
    mask = (byte)((((byte)(0x3f - c)) >> 7) - 1);
 8011f2e:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
    /* Load a value from the first cache line and use when mask set. */
    v  = (byte)(base64Decode[ c & 0x3f        ] &   mask);
 8011f32:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    /* Load a value from the second cache line and use when mask not set. */
    v |= (byte)(base64Decode[(c & 0x0f) | 0x40] & (~mask));
 8011f36:	f003 030f 	and.w	r3, r3, #15
    v  = (byte)(base64Decode[ c & 0x3f        ] &   mask);
 8011f3a:	4907      	ldr	r1, [pc, #28]	; (8011f58 <Base64_Char2Val+0x30>)
{
 8011f3c:	b510      	push	{r4, lr}
    v |= (byte)(base64Decode[(c & 0x0f) | 0x40] & (~mask));
 8011f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    v  = (byte)(base64Decode[ c & 0x3f        ] &   mask);
 8011f42:	5c08      	ldrb	r0, [r1, r0]
    v |= (byte)(base64Decode[(c & 0x0f) | 0x40] & (~mask));
 8011f44:	5ccb      	ldrb	r3, [r1, r3]
    mask = (byte)((((byte)(0x3f - c)) >> 7) - 1);
 8011f46:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8011f4a:	1e54      	subs	r4, r2, #1
    v |= (byte)(base64Decode[(c & 0x0f) | 0x40] & (~mask));
 8011f4c:	4252      	negs	r2, r2
    v  = (byte)(base64Decode[ c & 0x3f        ] &   mask);
 8011f4e:	4020      	ands	r0, r4
    v |= (byte)(base64Decode[(c & 0x0f) | 0x40] & (~mask));
 8011f50:	401a      	ands	r2, r3

    return v;
#else
    return base64Decode[c - BASE64_MIN];
#endif
}
 8011f52:	4310      	orrs	r0, r2
 8011f54:	bd10      	pop	{r4, pc}
 8011f56:	bf00      	nop
 8011f58:	08022c4e 	.word	0x08022c4e

08011f5c <CEscape>:

/* make sure *i (idx) won't exceed max, store and possibly escape to out,
 * raw means use e w/o decode,  0 on success */
static int CEscape(int escaped, byte e, byte* out, word32* i, word32 maxSz,
                  int raw, int getSzOnly)
{
 8011f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f60:	469c      	mov	ip, r3
 8011f62:	e9dd 3e07 	ldrd	r3, lr, [sp, #28]
    int    doEscape = 0;
    word32 needed = 1;
    word32 idx = *i;
 8011f66:	f8dc 4000 	ldr.w	r4, [ip]
    byte basic;
    byte plus    = 0;
    byte equals  = 0;
    byte newline = 0;

    if (raw)
 8011f6a:	b90b      	cbnz	r3, 8011f70 <CEscape+0x14>
        basic = e;
    else
        basic = base64Encode[e];
 8011f6c:	4b2a      	ldr	r3, [pc, #168]	; (8012018 <CEscape+0xbc>)
 8011f6e:	5c59      	ldrb	r1, [r3, r1]

    /* check whether to escape. Only escape for EncodeEsc */
    if (escaped == WC_ESC_NL_ENC) {
 8011f70:	2801      	cmp	r0, #1
 8011f72:	d105      	bne.n	8011f80 <CEscape+0x24>
        switch ((char)basic) {
 8011f74:	292b      	cmp	r1, #43	; 0x2b
 8011f76:	d013      	beq.n	8011fa0 <CEscape+0x44>
 8011f78:	293d      	cmp	r1, #61	; 0x3d
 8011f7a:	d016      	beq.n	8011faa <CEscape+0x4e>
 8011f7c:	290a      	cmp	r1, #10
 8011f7e:	d018      	beq.n	8011fb2 <CEscape+0x56>
    byte newline = 0;
 8011f80:	2500      	movs	r5, #0
    byte equals  = 0;
 8011f82:	462f      	mov	r7, r5
    byte plus    = 0;
 8011f84:	462b      	mov	r3, r5
    word32 needed = 1;
 8011f86:	2601      	movs	r6, #1
    int    doEscape = 0;
 8011f88:	4628      	mov	r0, r5
                break;
        }
    }

    /* check size */
    if ( (idx+needed) > maxSz && !getSzOnly) {
 8011f8a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011f8e:	4426      	add	r6, r4
 8011f90:	4546      	cmp	r6, r8
 8011f92:	d912      	bls.n	8011fba <CEscape+0x5e>
 8011f94:	f1be 0f00 	cmp.w	lr, #0
 8011f98:	d13b      	bne.n	8012012 <CEscape+0xb6>
        WOLFSSL_MSG("Escape buffer max too small");
        return BUFFER_E;
 8011f9a:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8011f9e:	e015      	b.n	8011fcc <CEscape+0x70>
    byte newline = 0;
 8011fa0:	2500      	movs	r5, #0
    byte equals  = 0;
 8011fa2:	462f      	mov	r7, r5
                plus     = 1;
 8011fa4:	4603      	mov	r3, r0
                needed  += 2;
 8011fa6:	2603      	movs	r6, #3
 8011fa8:	e7ef      	b.n	8011f8a <CEscape+0x2e>
    byte newline = 0;
 8011faa:	2500      	movs	r5, #0
                equals   = 1;
 8011fac:	4607      	mov	r7, r0
    byte plus    = 0;
 8011fae:	462b      	mov	r3, r5
 8011fb0:	e7f9      	b.n	8011fa6 <CEscape+0x4a>
    byte equals  = 0;
 8011fb2:	2700      	movs	r7, #0
                newline  = 1;
 8011fb4:	4605      	mov	r5, r0
    byte plus    = 0;
 8011fb6:	463b      	mov	r3, r7
 8011fb8:	e7f5      	b.n	8011fa6 <CEscape+0x4a>
    }

    /* store it */
    if (doEscape == 0) {
 8011fba:	b958      	cbnz	r0, 8011fd4 <CEscape+0x78>
        if(getSzOnly)
            idx++;
        else
            out[idx++] = basic;
 8011fbc:	1c60      	adds	r0, r4, #1
        if(getSzOnly)
 8011fbe:	f1be 0f00 	cmp.w	lr, #0
 8011fc2:	d005      	beq.n	8011fd0 <CEscape+0x74>
            idx++;
 8011fc4:	1c60      	adds	r0, r4, #1
                out[idx++] = '0';
                out[idx++] = 'A';
            }
        }
    }
    *i = idx;
 8011fc6:	f8cc 0000 	str.w	r0, [ip]

    return 0;
 8011fca:	2000      	movs	r0, #0
}
 8011fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            out[idx++] = basic;
 8011fd0:	5511      	strb	r1, [r2, r4]
 8011fd2:	e7f8      	b.n	8011fc6 <CEscape+0x6a>
        if(getSzOnly)
 8011fd4:	f1be 0f00 	cmp.w	lr, #0
 8011fd8:	d001      	beq.n	8011fde <CEscape+0x82>
            idx+=3;
 8011fda:	1ce0      	adds	r0, r4, #3
 8011fdc:	e7f3      	b.n	8011fc6 <CEscape+0x6a>
            out[idx++] = '%';  /* start escape */
 8011fde:	2125      	movs	r1, #37	; 0x25
 8011fe0:	5511      	strb	r1, [r2, r4]
 8011fe2:	1c60      	adds	r0, r4, #1
            if (plus) {
 8011fe4:	b133      	cbz	r3, 8011ff4 <CEscape+0x98>
                out[idx++] = '2';
 8011fe6:	2332      	movs	r3, #50	; 0x32
 8011fe8:	5413      	strb	r3, [r2, r0]
                out[idx++] = 'B';
 8011fea:	1ce0      	adds	r0, r4, #3
 8011fec:	4422      	add	r2, r4
 8011fee:	2342      	movs	r3, #66	; 0x42
                out[idx++] = 'A';
 8011ff0:	7093      	strb	r3, [r2, #2]
 8011ff2:	e7e8      	b.n	8011fc6 <CEscape+0x6a>
            else if (equals) {
 8011ff4:	b12f      	cbz	r7, 8012002 <CEscape+0xa6>
                out[idx++] = '3';
 8011ff6:	2333      	movs	r3, #51	; 0x33
 8011ff8:	5413      	strb	r3, [r2, r0]
                out[idx++] = 'D';
 8011ffa:	1ce0      	adds	r0, r4, #3
 8011ffc:	4422      	add	r2, r4
 8011ffe:	2344      	movs	r3, #68	; 0x44
 8012000:	e7f6      	b.n	8011ff0 <CEscape+0x94>
            else if (newline) {
 8012002:	2d00      	cmp	r5, #0
 8012004:	d0df      	beq.n	8011fc6 <CEscape+0x6a>
                out[idx++] = '0';
 8012006:	2330      	movs	r3, #48	; 0x30
 8012008:	5413      	strb	r3, [r2, r0]
                out[idx++] = 'A';
 801200a:	1ce0      	adds	r0, r4, #3
 801200c:	4422      	add	r2, r4
 801200e:	2341      	movs	r3, #65	; 0x41
 8012010:	e7ee      	b.n	8011ff0 <CEscape+0x94>
    if (doEscape == 0) {
 8012012:	2800      	cmp	r0, #0
 8012014:	d0d6      	beq.n	8011fc4 <CEscape+0x68>
 8012016:	e7e0      	b.n	8011fda <CEscape+0x7e>
 8012018:	08022c9e 	.word	0x08022c9e

0801201c <DoBase64_Encode>:

/* internal worker, handles both escaped and normal line endings.
   If out buffer is NULL, will return sz needed in outLen */
static int DoBase64_Encode(const byte* in, word32 inLen, byte* out,
                           word32* outLen, int escaped)
{
 801201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012020:	b08b      	sub	sp, #44	; 0x2c
 8012022:	461d      	mov	r5, r3
 8012024:	9e14      	ldr	r6, [sp, #80]	; 0x50
    int    ret = 0;
    word32 i = 0,
 8012026:	2300      	movs	r3, #0
{
 8012028:	460f      	mov	r7, r1
    word32 i = 0,
 801202a:	9309      	str	r3, [sp, #36]	; 0x24
           j = 0,
           n = 0;   /* new line counter */

    int    getSzOnly = (out == NULL);

    word32 outSz = (inLen + 3 - 1) / 3 * 4;
 801202c:	3102      	adds	r1, #2
 801202e:	2303      	movs	r3, #3
 8012030:	fbb1 f1f3 	udiv	r1, r1, r3
 8012034:	0089      	lsls	r1, r1, #2
    int    getSzOnly = (out == NULL);
 8012036:	fab2 f482 	clz	r4, r2
    word32 addSz = (outSz + BASE64_LINE_SZ - 1) / BASE64_LINE_SZ;  /* new lines */
 801203a:	f101 033f 	add.w	r3, r1, #63	; 0x3f

    if (escaped == WC_ESC_NL_ENC)
 801203e:	2e01      	cmp	r6, #1
{
 8012040:	4680      	mov	r8, r0
    int    getSzOnly = (out == NULL);
 8012042:	4693      	mov	fp, r2
 8012044:	ea4f 1454 	mov.w	r4, r4, lsr #5
    word32 addSz = (outSz + BASE64_LINE_SZ - 1) / BASE64_LINE_SZ;  /* new lines */
 8012048:	ea4f 1393 	mov.w	r3, r3, lsr #6
    if (escaped == WC_ESC_NL_ENC)
 801204c:	f040 8089 	bne.w	8012162 <DoBase64_Encode+0x146>
        addSz *= 3;   /* instead of just \n, we're doing %0A triplet */
 8012050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    else if (escaped == WC_NO_NL_ENC)
        addSz = 0;    /* encode without \n */

    outSz += addSz;
 8012054:	440b      	add	r3, r1
 8012056:	9305      	str	r3, [sp, #20]

    /* if escaped we can't predetermine size for one pass encoding, but
     * make sure we have enough if no escapes are in input
     * Also need to ensure outLen valid before dereference */
    if (!outLen || (outSz > *outLen && !getSzOnly)) return BAD_FUNC_ARG;
 8012058:	2d00      	cmp	r5, #0
 801205a:	f000 80f0 	beq.w	801223e <DoBase64_Encode+0x222>
 801205e:	682b      	ldr	r3, [r5, #0]
 8012060:	9a05      	ldr	r2, [sp, #20]
 8012062:	4293      	cmp	r3, r2
 8012064:	d203      	bcs.n	801206e <DoBase64_Encode+0x52>
 8012066:	f1bb 0f00 	cmp.w	fp, #0
 801206a:	f040 80e8 	bne.w	801223e <DoBase64_Encode+0x222>
        addSz = 0;    /* encode without \n */
 801206e:	2300      	movs	r3, #0
 8012070:	46c1      	mov	r9, r8
 8012072:	9304      	str	r3, [sp, #16]

    while (inLen > 2) {
 8012074:	2f02      	cmp	r7, #2
 8012076:	eba9 0008 	sub.w	r0, r9, r8
 801207a:	d876      	bhi.n	801216a <DoBase64_Encode+0x14e>
            if (ret != 0) break;
        }
    }

    /* last integral */
    if (inLen && ret == 0) {
 801207c:	2f00      	cmp	r7, #0
 801207e:	d046      	beq.n	801210e <DoBase64_Encode+0xf2>
        int twoBytes = (inLen == 2);

        byte b1 = in[j++];
        byte b2 = (twoBytes) ? in[j++] : 0;
 8012080:	2f02      	cmp	r7, #2
        byte b1 = in[j++];
 8012082:	f818 9000 	ldrb.w	r9, [r8, r0]
        byte b2 = (twoBytes) ? in[j++] : 0;
 8012086:	bf08      	it	eq
 8012088:	4440      	addeq	r0, r8

        byte e1 = b1 >> 2;
        byte e2 = (byte)(((b1 & 0x3) << 4) | (b2 >> 4));
        byte e3 = (byte)((b2 & 0xF) << 2);

        ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 801208a:	f04f 0300 	mov.w	r3, #0
        byte b2 = (twoBytes) ? in[j++] : 0;
 801208e:	bf08      	it	eq
 8012090:	f890 8001 	ldrbeq.w	r8, [r0, #1]
        ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 8012094:	9301      	str	r3, [sp, #4]
 8012096:	682b      	ldr	r3, [r5, #0]
 8012098:	9300      	str	r3, [sp, #0]
 801209a:	9402      	str	r4, [sp, #8]
 801209c:	ab09      	add	r3, sp, #36	; 0x24
 801209e:	465a      	mov	r2, fp
 80120a0:	ea4f 0199 	mov.w	r1, r9, lsr #2
 80120a4:	4630      	mov	r0, r6
        byte b2 = (twoBytes) ? in[j++] : 0;
 80120a6:	bf18      	it	ne
 80120a8:	f04f 0800 	movne.w	r8, #0
        ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 80120ac:	f7ff ff56 	bl	8011f5c <CEscape>
        if (ret == 0)
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d13a      	bne.n	801212a <DoBase64_Encode+0x10e>
        byte e2 = (byte)(((b1 & 0x3) << 4) | (b2 >> 4));
 80120b4:	ea4f 1109 	mov.w	r1, r9, lsl #4
            ret = CEscape(escaped, e2, out, &i, *outLen, 0, getSzOnly);
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	9300      	str	r3, [sp, #0]
        byte e2 = (byte)(((b1 & 0x3) << 4) | (b2 >> 4));
 80120bc:	f001 0130 	and.w	r1, r1, #48	; 0x30
            ret = CEscape(escaped, e2, out, &i, *outLen, 0, getSzOnly);
 80120c0:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80120c4:	ab09      	add	r3, sp, #36	; 0x24
 80120c6:	465a      	mov	r2, fp
 80120c8:	ea41 1118 	orr.w	r1, r1, r8, lsr #4
 80120cc:	4630      	mov	r0, r6
 80120ce:	f7ff ff45 	bl	8011f5c <CEscape>
        if (ret == 0) {
 80120d2:	bb50      	cbnz	r0, 801212a <DoBase64_Encode+0x10e>
            /* third */
            if (twoBytes)
 80120d4:	2f02      	cmp	r7, #2
                ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 80120d6:	682b      	ldr	r3, [r5, #0]
            if (twoBytes)
 80120d8:	f040 80a7 	bne.w	801222a <DoBase64_Encode+0x20e>
                ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 80120dc:	e9cd 0401 	strd	r0, r4, [sp, #4]
        byte e3 = (byte)((b2 & 0xF) << 2);
 80120e0:	ea4f 0188 	mov.w	r1, r8, lsl #2
                ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	465a      	mov	r2, fp
 80120e8:	ab09      	add	r3, sp, #36	; 0x24
 80120ea:	f001 013c 	and.w	r1, r1, #60	; 0x3c
            else
                ret = CEscape(escaped, '=', out, &i, *outLen, 1, getSzOnly);
 80120ee:	4630      	mov	r0, r6
 80120f0:	f7ff ff34 	bl	8011f5c <CEscape>
        }
        /* fourth always pad */
        if (ret == 0)
 80120f4:	b9c8      	cbnz	r0, 801212a <DoBase64_Encode+0x10e>
            ret = CEscape(escaped, '=', out, &i, *outLen, 1, getSzOnly);
 80120f6:	2301      	movs	r3, #1
 80120f8:	9301      	str	r3, [sp, #4]
 80120fa:	682b      	ldr	r3, [r5, #0]
 80120fc:	9300      	str	r3, [sp, #0]
 80120fe:	9402      	str	r4, [sp, #8]
 8012100:	ab09      	add	r3, sp, #36	; 0x24
 8012102:	465a      	mov	r2, fp
 8012104:	213d      	movs	r1, #61	; 0x3d
 8012106:	4630      	mov	r0, r6
 8012108:	f7ff ff28 	bl	8011f5c <CEscape>
    }

    if (ret == 0 && escaped != WC_NO_NL_ENC)
 801210c:	b968      	cbnz	r0, 801212a <DoBase64_Encode+0x10e>
 801210e:	2e02      	cmp	r6, #2
 8012110:	f000 8093 	beq.w	801223a <DoBase64_Encode+0x21e>
        ret = CEscape(escaped, '\n', out, &i, *outLen, 1, getSzOnly);
 8012114:	2301      	movs	r3, #1
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	682b      	ldr	r3, [r5, #0]
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	9402      	str	r4, [sp, #8]
 801211e:	ab09      	add	r3, sp, #36	; 0x24
 8012120:	465a      	mov	r2, fp
 8012122:	210a      	movs	r1, #10
 8012124:	4630      	mov	r0, r6
 8012126:	f7ff ff19 	bl	8011f5c <CEscape>

    if (i != outSz && escaped != 1 && ret == 0)
 801212a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801212c:	9a05      	ldr	r2, [sp, #20]
 801212e:	4293      	cmp	r3, r2
 8012130:	d004      	beq.n	801213c <DoBase64_Encode+0x120>
 8012132:	2e01      	cmp	r6, #1
 8012134:	d002      	beq.n	801213c <DoBase64_Encode+0x120>
 8012136:	2800      	cmp	r0, #0
 8012138:	f000 8084 	beq.w	8012244 <DoBase64_Encode+0x228>
        return ASN_INPUT_E;
/* If the output buffer has a room for an extra byte, add a null terminator */
    if (out && *outLen > i)
 801213c:	f1bb 0f00 	cmp.w	fp, #0
 8012140:	d005      	beq.n	801214e <DoBase64_Encode+0x132>
 8012142:	6829      	ldr	r1, [r5, #0]
 8012144:	428b      	cmp	r3, r1
        out[i]= '\0';
 8012146:	bf3c      	itt	cc
 8012148:	2100      	movcc	r1, #0
 801214a:	f80b 1003 	strbcc.w	r1, [fp, r3]

    *outLen = i;
 801214e:	602b      	str	r3, [r5, #0]

    if (ret == 0)
 8012150:	b920      	cbnz	r0, 801215c <DoBase64_Encode+0x140>
        return getSzOnly ? LENGTH_ONLY_E : 0;
 8012152:	f1bb 0f00 	cmp.w	fp, #0
 8012156:	bf08      	it	eq
 8012158:	f06f 00c9 	mvneq.w	r0, #201	; 0xc9

    return ret;
}
 801215c:	b00b      	add	sp, #44	; 0x2c
 801215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        addSz = 0;    /* encode without \n */
 8012162:	2e02      	cmp	r6, #2
 8012164:	bf08      	it	eq
 8012166:	2300      	moveq	r3, #0
 8012168:	e774      	b.n	8012054 <DoBase64_Encode+0x38>
        byte b1 = in[j++];
 801216a:	f899 1000 	ldrb.w	r1, [r9]
        byte b2 = in[j++];
 801216e:	f899 3001 	ldrb.w	r3, [r9, #1]
        byte b3 = in[j++];
 8012172:	f899 0002 	ldrb.w	r0, [r9, #2]
        ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 8012176:	9402      	str	r4, [sp, #8]
        byte e2 = (byte)(((b1 & 0x3) << 4) | (b2 >> 4));
 8012178:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 801217c:	f00a 0a30 	and.w	sl, sl, #48	; 0x30
 8012180:	ea4a 1a13 	orr.w	sl, sl, r3, lsr #4
        byte e3 = (byte)(((b2 & 0xF) << 2) | (b3 >> 6));
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 801218a:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 801218e:	9306      	str	r3, [sp, #24]
        byte e4 = b3 & 0x3F;
 8012190:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8012194:	9307      	str	r3, [sp, #28]
        ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 8012196:	2300      	movs	r3, #0
 8012198:	9301      	str	r3, [sp, #4]
 801219a:	682b      	ldr	r3, [r5, #0]
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	465a      	mov	r2, fp
 80121a0:	ab09      	add	r3, sp, #36	; 0x24
 80121a2:	0889      	lsrs	r1, r1, #2
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7ff fed9 	bl	8011f5c <CEscape>
        if (ret != 0) break;
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d1bd      	bne.n	801212a <DoBase64_Encode+0x10e>
        ret = CEscape(escaped, e2, out, &i, *outLen, 0, getSzOnly);
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80121b6:	ab09      	add	r3, sp, #36	; 0x24
 80121b8:	465a      	mov	r2, fp
 80121ba:	4651      	mov	r1, sl
 80121bc:	4630      	mov	r0, r6
 80121be:	f7ff fecd 	bl	8011f5c <CEscape>
        if (ret != 0) break;
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d1b1      	bne.n	801212a <DoBase64_Encode+0x10e>
        ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 80121c6:	682b      	ldr	r3, [r5, #0]
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80121ce:	9906      	ldr	r1, [sp, #24]
 80121d0:	ab09      	add	r3, sp, #36	; 0x24
 80121d2:	465a      	mov	r2, fp
 80121d4:	4630      	mov	r0, r6
 80121d6:	f7ff fec1 	bl	8011f5c <CEscape>
        if (ret != 0) break;
 80121da:	2800      	cmp	r0, #0
 80121dc:	d1a5      	bne.n	801212a <DoBase64_Encode+0x10e>
        ret = CEscape(escaped, e4, out, &i, *outLen, 0, getSzOnly);
 80121de:	682b      	ldr	r3, [r5, #0]
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80121e6:	9907      	ldr	r1, [sp, #28]
 80121e8:	ab09      	add	r3, sp, #36	; 0x24
 80121ea:	465a      	mov	r2, fp
 80121ec:	4630      	mov	r0, r6
 80121ee:	f7ff feb5 	bl	8011f5c <CEscape>
        if (ret != 0) break;
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d199      	bne.n	801212a <DoBase64_Encode+0x10e>
        if (escaped != WC_NO_NL_ENC && (++n % (BASE64_LINE_SZ/4)) == 0 && inLen) {
 80121f6:	2e02      	cmp	r6, #2
        inLen -= 3;
 80121f8:	f1a7 0703 	sub.w	r7, r7, #3
        if (escaped != WC_NO_NL_ENC && (++n % (BASE64_LINE_SZ/4)) == 0 && inLen) {
 80121fc:	d012      	beq.n	8012224 <DoBase64_Encode+0x208>
 80121fe:	9b04      	ldr	r3, [sp, #16]
 8012200:	3301      	adds	r3, #1
 8012202:	9304      	str	r3, [sp, #16]
 8012204:	071b      	lsls	r3, r3, #28
 8012206:	d10d      	bne.n	8012224 <DoBase64_Encode+0x208>
 8012208:	b167      	cbz	r7, 8012224 <DoBase64_Encode+0x208>
            ret = CEscape(escaped, '\n', out, &i, *outLen, 1, getSzOnly);
 801220a:	2301      	movs	r3, #1
 801220c:	9301      	str	r3, [sp, #4]
 801220e:	682b      	ldr	r3, [r5, #0]
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	9402      	str	r4, [sp, #8]
 8012214:	ab09      	add	r3, sp, #36	; 0x24
 8012216:	465a      	mov	r2, fp
 8012218:	210a      	movs	r1, #10
 801221a:	4630      	mov	r0, r6
 801221c:	f7ff fe9e 	bl	8011f5c <CEscape>
            if (ret != 0) break;
 8012220:	2800      	cmp	r0, #0
 8012222:	d182      	bne.n	801212a <DoBase64_Encode+0x10e>
 8012224:	f109 0903 	add.w	r9, r9, #3
 8012228:	e724      	b.n	8012074 <DoBase64_Encode+0x58>
                ret = CEscape(escaped, '=', out, &i, *outLen, 1, getSzOnly);
 801222a:	2101      	movs	r1, #1
 801222c:	e9cd 3100 	strd	r3, r1, [sp]
 8012230:	9402      	str	r4, [sp, #8]
 8012232:	ab09      	add	r3, sp, #36	; 0x24
 8012234:	465a      	mov	r2, fp
 8012236:	213d      	movs	r1, #61	; 0x3d
 8012238:	e759      	b.n	80120ee <DoBase64_Encode+0xd2>
 801223a:	2000      	movs	r0, #0
 801223c:	e775      	b.n	801212a <DoBase64_Encode+0x10e>
    if (!outLen || (outSz > *outLen && !getSzOnly)) return BAD_FUNC_ARG;
 801223e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012242:	e78b      	b.n	801215c <DoBase64_Encode+0x140>
        return ASN_INPUT_E;
 8012244:	f06f 0099 	mvn.w	r0, #153	; 0x99
 8012248:	e788      	b.n	801215c <DoBase64_Encode+0x140>

0801224a <Base64_SkipNewline>:
    word32 len = *inLen;
 801224a:	680b      	ldr	r3, [r1, #0]
{
 801224c:	b5f0      	push	{r4, r5, r6, r7, lr}
    word32 j = *outJ;
 801224e:	6814      	ldr	r4, [r2, #0]
    if (len == 0) {
 8012250:	b353      	cbz	r3, 80122a8 <Base64_SkipNewline+0x5e>
    curChar = in[j];
 8012252:	5d05      	ldrb	r5, [r0, r4]
    while (len > 1 && curChar == ' ') {
 8012254:	2b01      	cmp	r3, #1
 8012256:	d001      	beq.n	801225c <Base64_SkipNewline+0x12>
 8012258:	2d20      	cmp	r5, #32
 801225a:	d019      	beq.n	8012290 <Base64_SkipNewline+0x46>
    if (len && (curChar == '\r' || curChar == '\n')) {
 801225c:	2d0d      	cmp	r5, #13
 801225e:	d001      	beq.n	8012264 <Base64_SkipNewline+0x1a>
 8012260:	2d0a      	cmp	r5, #10
 8012262:	d10f      	bne.n	8012284 <Base64_SkipNewline+0x3a>
        if (curChar == '\r') {
 8012264:	2d0d      	cmp	r5, #13
        j++;
 8012266:	f104 0701 	add.w	r7, r4, #1
        len--;
 801226a:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
        if (curChar == '\r') {
 801226e:	d103      	bne.n	8012278 <Base64_SkipNewline+0x2e>
            if (len) {
 8012270:	b1be      	cbz	r6, 80122a2 <Base64_SkipNewline+0x58>
                curChar = in[j++];
 8012272:	5dc5      	ldrb	r5, [r0, r7]
                len--;
 8012274:	1e9e      	subs	r6, r3, #2
                curChar = in[j++];
 8012276:	1ca7      	adds	r7, r4, #2
        if (curChar != '\n') {
 8012278:	2d0a      	cmp	r5, #10
 801227a:	d112      	bne.n	80122a2 <Base64_SkipNewline+0x58>
        if (len) {
 801227c:	b1a6      	cbz	r6, 80122a8 <Base64_SkipNewline+0x5e>
            curChar = in[j];
 801227e:	5dc5      	ldrb	r5, [r0, r7]
 8012280:	463c      	mov	r4, r7
 8012282:	4633      	mov	r3, r6
    while (len && curChar == ' ') {
 8012284:	2d20      	cmp	r5, #32
 8012286:	d007      	beq.n	8012298 <Base64_SkipNewline+0x4e>
    *inLen = len;
 8012288:	600b      	str	r3, [r1, #0]
    return 0;
 801228a:	2000      	movs	r0, #0
    *outJ = j;
 801228c:	6014      	str	r4, [r2, #0]
    return 0;
 801228e:	e00a      	b.n	80122a6 <Base64_SkipNewline+0x5c>
        curChar = in[++j];
 8012290:	3401      	adds	r4, #1
        len--;
 8012292:	3b01      	subs	r3, #1
        curChar = in[++j];
 8012294:	5d05      	ldrb	r5, [r0, r4]
        len--;
 8012296:	e7dd      	b.n	8012254 <Base64_SkipNewline+0xa>
        if (--len > 0) {
 8012298:	3b01      	subs	r3, #1
 801229a:	d005      	beq.n	80122a8 <Base64_SkipNewline+0x5e>
            curChar = in[++j];
 801229c:	3401      	adds	r4, #1
 801229e:	5d05      	ldrb	r5, [r0, r4]
    while (len && curChar == ' ') {
 80122a0:	e7f0      	b.n	8012284 <Base64_SkipNewline+0x3a>
            return ASN_INPUT_E;
 80122a2:	f06f 0099 	mvn.w	r0, #153	; 0x99
}
 80122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BUFFER_E;
 80122a8:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80122ac:	e7fb      	b.n	80122a6 <Base64_SkipNewline+0x5c>

080122ae <Base64_Decode>:
{
 80122ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b2:	b087      	sub	sp, #28
 80122b4:	4699      	mov	r9, r3
 80122b6:	9103      	str	r1, [sp, #12]
    plainSz = (plainSz * 3 + 3) / 4;
 80122b8:	1c4b      	adds	r3, r1, #1
    word32 plainSz = inLen - ((inLen + (BASE64_LINE_SZ - 1)) / BASE64_LINE_SZ );
 80122ba:	313f      	adds	r1, #63	; 0x3f
    plainSz = (plainSz * 3 + 3) / 4;
 80122bc:	eba3 1191 	sub.w	r1, r3, r1, lsr #6
    if (plainSz > *outLen) return BAD_FUNC_ARG;
 80122c0:	f8d9 3000 	ldr.w	r3, [r9]
    plainSz = (plainSz * 3 + 3) / 4;
 80122c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    word32 j = 0;
 80122c8:	2500      	movs	r5, #0
    if (plainSz > *outLen) return BAD_FUNC_ARG;
 80122ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
{
 80122ce:	4606      	mov	r6, r0
 80122d0:	4690      	mov	r8, r2
    word32 j = 0;
 80122d2:	9505      	str	r5, [sp, #20]
    if (plainSz > *outLen) return BAD_FUNC_ARG;
 80122d4:	f080 809a 	bcs.w	801240c <Base64_Decode+0x15e>
 80122d8:	f06f 04ac 	mvn.w	r4, #172	; 0xac
}
 80122dc:	4620      	mov	r0, r4
 80122de:	b007      	add	sp, #28
 80122e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        e1 = in[j++];
 80122e4:	9b05      	ldr	r3, [sp, #20]
 80122e6:	f816 b003 	ldrb.w	fp, [r6, r3]
 80122ea:	1c58      	adds	r0, r3, #1
 80122ec:	9005      	str	r0, [sp, #20]
        if (e1 == '\0') {
 80122ee:	f1bb 0f00 	cmp.w	fp, #0
 80122f2:	f000 809b 	beq.w	801242c <Base64_Decode+0x17e>
        inLen--;
 80122f6:	9b03      	ldr	r3, [sp, #12]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 80122f8:	4630      	mov	r0, r6
        inLen--;
 80122fa:	3b01      	subs	r3, #1
 80122fc:	9303      	str	r3, [sp, #12]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 80122fe:	f7ff ffa4 	bl	801224a <Base64_SkipNewline>
 8012302:	4604      	mov	r4, r0
 8012304:	2800      	cmp	r0, #0
 8012306:	d1e9      	bne.n	80122dc <Base64_Decode+0x2e>
        e2 = in[j++];
 8012308:	9b05      	ldr	r3, [sp, #20]
 801230a:	1c58      	adds	r0, r3, #1
 801230c:	5cf7      	ldrb	r7, [r6, r3]
        inLen--;
 801230e:	9b03      	ldr	r3, [sp, #12]
        e2 = in[j++];
 8012310:	9005      	str	r0, [sp, #20]
        inLen--;
 8012312:	3b01      	subs	r3, #1
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8012314:	4630      	mov	r0, r6
        inLen--;
 8012316:	9303      	str	r3, [sp, #12]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8012318:	f7ff ff97 	bl	801224a <Base64_SkipNewline>
 801231c:	4604      	mov	r4, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	d1dc      	bne.n	80122dc <Base64_Decode+0x2e>
        e3 = in[j++];
 8012322:	9b05      	ldr	r3, [sp, #20]
 8012324:	1c58      	adds	r0, r3, #1
 8012326:	f816 a003 	ldrb.w	sl, [r6, r3]
        inLen--;
 801232a:	9b03      	ldr	r3, [sp, #12]
        e3 = in[j++];
 801232c:	9005      	str	r0, [sp, #20]
        inLen--;
 801232e:	3b01      	subs	r3, #1
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8012330:	4630      	mov	r0, r6
        inLen--;
 8012332:	9303      	str	r3, [sp, #12]
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8012334:	f7ff ff89 	bl	801224a <Base64_SkipNewline>
 8012338:	4604      	mov	r4, r0
 801233a:	2800      	cmp	r0, #0
 801233c:	d1ce      	bne.n	80122dc <Base64_Decode+0x2e>
        e4 = in[j++];
 801233e:	9b05      	ldr	r3, [sp, #20]
 8012340:	1c5a      	adds	r2, r3, #1
 8012342:	9205      	str	r2, [sp, #20]
 8012344:	5cf3      	ldrb	r3, [r6, r3]
        inLen--;
 8012346:	9a03      	ldr	r2, [sp, #12]
        if (e4 == PAD)
 8012348:	2b3d      	cmp	r3, #61	; 0x3d
        inLen--;
 801234a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801234e:	9203      	str	r2, [sp, #12]
        if (e4 == PAD)
 8012350:	d17e      	bne.n	8012450 <Base64_Decode+0x1a2>
            pad4 = 1;
 8012352:	2401      	movs	r4, #1
        if (e1 < BASE64_MIN || e2 < BASE64_MIN || e3 < BASE64_MIN ||
 8012354:	f1ab 022b 	sub.w	r2, fp, #43	; 0x2b
 8012358:	2a4f      	cmp	r2, #79	; 0x4f
 801235a:	d87d      	bhi.n	8012458 <Base64_Decode+0x1aa>
 801235c:	f1a7 022b 	sub.w	r2, r7, #43	; 0x2b
 8012360:	2a4f      	cmp	r2, #79	; 0x4f
 8012362:	d879      	bhi.n	8012458 <Base64_Decode+0x1aa>
 8012364:	f1aa 022b 	sub.w	r2, sl, #43	; 0x2b
 8012368:	2a4f      	cmp	r2, #79	; 0x4f
 801236a:	d875      	bhi.n	8012458 <Base64_Decode+0x1aa>
 801236c:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
 8012370:	2a4f      	cmp	r2, #79	; 0x4f
 8012372:	9301      	str	r3, [sp, #4]
 8012374:	d870      	bhi.n	8012458 <Base64_Decode+0x1aa>
        if (i + 1 + !pad3 + !pad4 > *outLen) {
 8012376:	f1ba 023d 	subs.w	r2, sl, #61	; 0x3d
 801237a:	bf18      	it	ne
 801237c:	2201      	movne	r2, #1
 801237e:	3201      	adds	r2, #1
 8012380:	f084 0101 	eor.w	r1, r4, #1
 8012384:	442a      	add	r2, r5
 8012386:	440a      	add	r2, r1
 8012388:	f8d9 1000 	ldr.w	r1, [r9]
 801238c:	428a      	cmp	r2, r1
 801238e:	d8a3      	bhi.n	80122d8 <Base64_Decode+0x2a>
        e1 = Base64_Char2Val(e1);
 8012390:	4658      	mov	r0, fp
 8012392:	f7ff fdc9 	bl	8011f28 <Base64_Char2Val>
 8012396:	4683      	mov	fp, r0
        e2 = Base64_Char2Val(e2);
 8012398:	4638      	mov	r0, r7
 801239a:	f7ff fdc5 	bl	8011f28 <Base64_Char2Val>
        e3 = (byte)((e3 == PAD) ? 0 : Base64_Char2Val(e3));
 801239e:	f1ba 0f3d 	cmp.w	sl, #61	; 0x3d
 80123a2:	9b01      	ldr	r3, [sp, #4]
        e2 = Base64_Char2Val(e2);
 80123a4:	4602      	mov	r2, r0
        e3 = (byte)((e3 == PAD) ? 0 : Base64_Char2Val(e3));
 80123a6:	d04f      	beq.n	8012448 <Base64_Decode+0x19a>
 80123a8:	9002      	str	r0, [sp, #8]
 80123aa:	4650      	mov	r0, sl
 80123ac:	f7ff fdbc 	bl	8011f28 <Base64_Char2Val>
 80123b0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80123b4:	4607      	mov	r7, r0
        e4 = (byte)((e4 == PAD) ? 0 : Base64_Char2Val(e4));
 80123b6:	2b3d      	cmp	r3, #61	; 0x3d
 80123b8:	d048      	beq.n	801244c <Base64_Decode+0x19e>
 80123ba:	4618      	mov	r0, r3
 80123bc:	9201      	str	r2, [sp, #4]
 80123be:	f7ff fdb3 	bl	8011f28 <Base64_Char2Val>
 80123c2:	9a01      	ldr	r2, [sp, #4]
        if (e1 == BAD || e2 == BAD || e3 == BAD || e4 == BAD) {
 80123c4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80123c8:	d046      	beq.n	8012458 <Base64_Decode+0x1aa>
 80123ca:	2aff      	cmp	r2, #255	; 0xff
 80123cc:	d044      	beq.n	8012458 <Base64_Decode+0x1aa>
 80123ce:	2fff      	cmp	r7, #255	; 0xff
 80123d0:	d042      	beq.n	8012458 <Base64_Decode+0x1aa>
 80123d2:	28ff      	cmp	r0, #255	; 0xff
 80123d4:	d040      	beq.n	8012458 <Base64_Decode+0x1aa>
        if (!pad3)
 80123d6:	f1ba 0f3d 	cmp.w	sl, #61	; 0x3d
        b3 = (byte)(((e3 & 0x3) << 6) | e4);
 80123da:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
        out[i++] = b1;
 80123de:	f105 0301 	add.w	r3, r5, #1
        b2 = (byte)(((e2 & 0xF) << 4) | (e3 >> 2));
 80123e2:	bf18      	it	ne
 80123e4:	08bf      	lsrne	r7, r7, #2
        b1 = (byte)((e1 << 2) | (e2 >> 4));
 80123e6:	ea4f 1112 	mov.w	r1, r2, lsr #4
 80123ea:	ea41 0b8b 	orr.w	fp, r1, fp, lsl #2
        b2 = (byte)(((e2 & 0xF) << 4) | (e3 >> 2));
 80123ee:	bf18      	it	ne
 80123f0:	ea47 1702 	orrne.w	r7, r7, r2, lsl #4
        out[i++] = b1;
 80123f4:	f808 b005 	strb.w	fp, [r8, r5]
        b3 = (byte)(((e3 & 0x3) << 6) | e4);
 80123f8:	b2c0      	uxtb	r0, r0
            out[i++] = b2;
 80123fa:	bf1a      	itte	ne
 80123fc:	f808 7003 	strbne.w	r7, [r8, r3]
 8012400:	3502      	addne	r5, #2
        out[i++] = b1;
 8012402:	461d      	moveq	r5, r3
        if (!pad4)
 8012404:	b994      	cbnz	r4, 801242c <Base64_Decode+0x17e>
            out[i++] = b3;
 8012406:	f808 0005 	strb.w	r0, [r8, r5]
 801240a:	3501      	adds	r5, #1
    while (inLen > 3) {
 801240c:	9b03      	ldr	r3, [sp, #12]
 801240e:	2b03      	cmp	r3, #3
 8012410:	d90c      	bls.n	801242c <Base64_Decode+0x17e>
        if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 8012412:	aa05      	add	r2, sp, #20
 8012414:	a903      	add	r1, sp, #12
 8012416:	4630      	mov	r0, r6
 8012418:	f7ff ff17 	bl	801224a <Base64_SkipNewline>
 801241c:	4604      	mov	r4, r0
 801241e:	2800      	cmp	r0, #0
 8012420:	f43f af60 	beq.w	80122e4 <Base64_Decode+0x36>
            if (ret == BUFFER_E) {
 8012424:	f110 0f84 	cmn.w	r0, #132	; 0x84
 8012428:	f47f af58 	bne.w	80122dc <Base64_Decode+0x2e>
    if (out && *outLen > i)
 801242c:	f1b8 0f00 	cmp.w	r8, #0
 8012430:	d006      	beq.n	8012440 <Base64_Decode+0x192>
 8012432:	f8d9 3000 	ldr.w	r3, [r9]
 8012436:	42ab      	cmp	r3, r5
        out[i]= '\0';
 8012438:	bf84      	itt	hi
 801243a:	2300      	movhi	r3, #0
 801243c:	f808 3005 	strbhi.w	r3, [r8, r5]
    *outLen = i;
 8012440:	f8c9 5000 	str.w	r5, [r9]
    return 0;
 8012444:	2400      	movs	r4, #0
 8012446:	e749      	b.n	80122dc <Base64_Decode+0x2e>
        e3 = (byte)((e3 == PAD) ? 0 : Base64_Char2Val(e3));
 8012448:	2700      	movs	r7, #0
 801244a:	e7b4      	b.n	80123b6 <Base64_Decode+0x108>
        e4 = (byte)((e4 == PAD) ? 0 : Base64_Char2Val(e4));
 801244c:	2000      	movs	r0, #0
 801244e:	e7b9      	b.n	80123c4 <Base64_Decode+0x116>
        if (pad3 && !pad4)
 8012450:	f1ba 0f3d 	cmp.w	sl, #61	; 0x3d
 8012454:	f47f af7e 	bne.w	8012354 <Base64_Decode+0xa6>
            return ASN_INPUT_E;
 8012458:	f06f 0499 	mvn.w	r4, #153	; 0x99
 801245c:	e73e      	b.n	80122dc <Base64_Decode+0x2e>

0801245e <Base64_Encode>:


/* Base64 Encode, PEM style, with \n line endings */
int Base64_Encode(const byte* in, word32 inLen, byte* out, word32* outLen)
{
 801245e:	b513      	push	{r0, r1, r4, lr}
    return DoBase64_Encode(in, inLen, out, outLen, WC_STD_ENC);
 8012460:	2400      	movs	r4, #0
 8012462:	9400      	str	r4, [sp, #0]
 8012464:	f7ff fdda 	bl	801201c <DoBase64_Encode>
}
 8012468:	b002      	add	sp, #8
 801246a:	bd10      	pop	{r4, pc}

0801246c <Base64_EncodeEsc>:


/* Base64 Encode, with %0A escaped line endings instead of \n */
int Base64_EncodeEsc(const byte* in, word32 inLen, byte* out, word32* outLen)
{
 801246c:	b513      	push	{r0, r1, r4, lr}
    return DoBase64_Encode(in, inLen, out, outLen, WC_ESC_NL_ENC);
 801246e:	2401      	movs	r4, #1
 8012470:	9400      	str	r4, [sp, #0]
 8012472:	f7ff fdd3 	bl	801201c <DoBase64_Encode>
}
 8012476:	b002      	add	sp, #8
 8012478:	bd10      	pop	{r4, pc}

0801247a <Base64_Encode_NoNl>:

int Base64_Encode_NoNl(const byte* in, word32 inLen, byte* out, word32* outLen)
{
 801247a:	b513      	push	{r0, r1, r4, lr}
    return DoBase64_Encode(in, inLen, out, outLen, WC_NO_NL_ENC);
 801247c:	2402      	movs	r4, #2
 801247e:	9400      	str	r4, [sp, #0]
 8012480:	f7ff fdcc 	bl	801201c <DoBase64_Encode>
}
 8012484:	b002      	add	sp, #8
 8012486:	bd10      	pop	{r4, pc}

08012488 <curve25519_copy_point>:
}

static WC_INLINE void curve25519_copy_point(byte* out, const byte* point,
    int endian)
{
    if (endian == EC25519_BIG_ENDIAN) {
 8012488:	2a01      	cmp	r2, #1
{
 801248a:	b410      	push	{r4}
 801248c:	460c      	mov	r4, r1
    if (endian == EC25519_BIG_ENDIAN) {
 801248e:	d10a      	bne.n	80124a6 <curve25519_copy_point+0x1e>
 8012490:	f101 0220 	add.w	r2, r1, #32
 8012494:	3801      	subs	r0, #1
        int i;
        /* put shared secret key in Big Endian format */
        for (i = 0; i < CURVE25519_KEYSIZE; i++) {
            out[i] = point[CURVE25519_KEYSIZE - i -1];
 8012496:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 801249a:	f800 3f01 	strb.w	r3, [r0, #1]!
        for (i = 0; i < CURVE25519_KEYSIZE; i++) {
 801249e:	42a2      	cmp	r2, r4
 80124a0:	d1f9      	bne.n	8012496 <curve25519_copy_point+0xe>
        }
    }
    else { /* put shared secret key in Little Endian format */
        XMEMCPY(out, point, CURVE25519_KEYSIZE);
    }
}
 80124a2:	bc10      	pop	{r4}
 80124a4:	4770      	bx	lr
 80124a6:	bc10      	pop	{r4}
        XMEMCPY(out, point, CURVE25519_KEYSIZE);
 80124a8:	2220      	movs	r2, #32
 80124aa:	f008 bd99 	b.w	801afe0 <memcpy>
	...

080124b0 <wc_curve25519_make_pub>:
#ifdef FREESCALE_LTC_ECC
    const ECPoint* basepoint = nxp_ltc_curve25519_GetBasePoint();
    ECPoint wc_pub;
#endif

    if ( (public_size != CURVE25519_KEYSIZE) ||
 80124b0:	2820      	cmp	r0, #32
{
 80124b2:	b538      	push	{r3, r4, r5, lr}
 80124b4:	460d      	mov	r5, r1
 80124b6:	461c      	mov	r4, r3
    if ( (public_size != CURVE25519_KEYSIZE) ||
 80124b8:	d113      	bne.n	80124e2 <wc_curve25519_make_pub+0x32>
 80124ba:	2a20      	cmp	r2, #32
 80124bc:	d111      	bne.n	80124e2 <wc_curve25519_make_pub+0x32>
        (private_size != CURVE25519_KEYSIZE)) {
        return ECC_BAD_ARG_E;
    }
    if ((pub == NULL) || (priv == NULL)) {
 80124be:	b181      	cbz	r1, 80124e2 <wc_curve25519_make_pub+0x32>
 80124c0:	b17b      	cbz	r3, 80124e2 <wc_curve25519_make_pub+0x32>
    if ((priv[0] & ~248) ||
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	075b      	lsls	r3, r3, #29
 80124c6:	d10c      	bne.n	80124e2 <wc_curve25519_make_pub+0x32>
 80124c8:	f994 301f 	ldrsb.w	r3, [r4, #31]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	db08      	blt.n	80124e2 <wc_curve25519_make_pub+0x32>
    ret = nxp_ltc_curve25519(&wc_pub, priv, basepoint, kLTC_Weierstrass);
    if (ret == 0) {
        XMEMCPY(pub, wc_pub.point, CURVE25519_KEYSIZE);
    }
#else
    fe_init();
 80124d0:	f000 fe5d 	bl	801318e <fe_init>

    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    ret = curve25519(pub, priv, (byte*)kCurve25519BasePoint);
 80124d4:	4621      	mov	r1, r4
 80124d6:	4628      	mov	r0, r5
 80124d8:	4a03      	ldr	r2, [pc, #12]	; (80124e8 <wc_curve25519_make_pub+0x38>)

    RESTORE_VECTOR_REGISTERS();
#endif

    return ret;
}
 80124da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = curve25519(pub, priv, (byte*)kCurve25519BasePoint);
 80124de:	f001 bf67 	b.w	80143b0 <curve25519>
}
 80124e2:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	08022ce8 	.word	0x08022ce8

080124ec <wc_curve25519_make_priv>:
 *
 * return value is propagated from wc_RNG_GenerateBlock(() (0 on success),
 * or BAD_FUNC_ARG/ECC_BAD_ARG_E, and the byte vector is little endian.
 */
int wc_curve25519_make_priv(WC_RNG* rng, int keysize, byte* key)
{
 80124ec:	b510      	push	{r4, lr}
    int ret;

    if (key == NULL || rng == NULL)
 80124ee:	4614      	mov	r4, r2
 80124f0:	b192      	cbz	r2, 8012518 <wc_curve25519_make_priv+0x2c>
 80124f2:	b188      	cbz	r0, 8012518 <wc_curve25519_make_priv+0x2c>
        return BAD_FUNC_ARG;

    /* currently only a key size of 32 bytes is used */
    if (keysize != CURVE25519_KEYSIZE)
 80124f4:	2920      	cmp	r1, #32
 80124f6:	d112      	bne.n	801251e <wc_curve25519_make_priv+0x32>
        return ECC_BAD_ARG_E;

    /* random number for private key */
    ret = wc_RNG_GenerateBlock(rng, key, (word32)keysize);
 80124f8:	460a      	mov	r2, r1
 80124fa:	4621      	mov	r1, r4
 80124fc:	f7fa f8ce 	bl	800c69c <wc_RNG_GenerateBlock>
    if (ret == 0) {
 8012500:	b948      	cbnz	r0, 8012516 <wc_curve25519_make_priv+0x2a>
    priv[0]  &= 248;
 8012502:	7823      	ldrb	r3, [r4, #0]
 8012504:	f023 0307 	bic.w	r3, r3, #7
 8012508:	7023      	strb	r3, [r4, #0]
    priv[CURVE25519_KEYSIZE-1] &= 127;
 801250a:	7fe3      	ldrb	r3, [r4, #31]
 801250c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    priv[CURVE25519_KEYSIZE-1] |= 64;
 8012510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012514:	77e3      	strb	r3, [r4, #31]
        /* Clamp the private key */
        ret = curve25519_priv_clamp(key);
    }

    return ret;
}
 8012516:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 8012518:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801251c:	e7fb      	b.n	8012516 <wc_curve25519_make_priv+0x2a>
        return ECC_BAD_ARG_E;
 801251e:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8012522:	e7f8      	b.n	8012516 <wc_curve25519_make_priv+0x2a>

08012524 <wc_curve25519_make_key>:
 *
 * return value is propagated from wc_curve25519_make_private() or
 * wc_curve25519_make_pub() (0 on success).
 */
int wc_curve25519_make_key(WC_RNG* rng, int keysize, curve25519_key* key)
{
 8012524:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if (key == NULL || rng == NULL)
 8012526:	4614      	mov	r4, r2
 8012528:	b1ea      	cbz	r2, 8012566 <wc_curve25519_make_key+0x42>
 801252a:	b1e0      	cbz	r0, 8012566 <wc_curve25519_make_key+0x42>
#endif

#ifdef WOLFSSL_SE050
    ret = se050_curve25519_create_key(key, keysize);
#else
    ret = wc_curve25519_make_priv(rng, keysize, key->k);
 801252c:	f102 0529 	add.w	r5, r2, #41	; 0x29
 8012530:	462a      	mov	r2, r5
 8012532:	f7ff ffdb 	bl	80124ec <wc_curve25519_make_priv>
    if (ret == 0) {
 8012536:	b9a8      	cbnz	r0, 8012564 <wc_curve25519_make_key+0x40>
        key->privSet = 1;
 8012538:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 801253c:	2220      	movs	r2, #32
        key->privSet = 1;
 801253e:	f041 0102 	orr.w	r1, r1, #2
 8012542:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 8012546:	462b      	mov	r3, r5
 8012548:	4610      	mov	r0, r2
 801254a:	f104 0108 	add.w	r1, r4, #8
 801254e:	f7ff ffaf 	bl	80124b0 <wc_curve25519_make_pub>
                                     (int)sizeof(key->k), key->k);
        key->pubSet = (ret == 0);
 8012552:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 8012556:	fab0 f380 	clz	r3, r0
 801255a:	095b      	lsrs	r3, r3, #5
 801255c:	f363 0200 	bfi	r2, r3, #0, #1
 8012560:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    }
#endif
    return ret;
}
 8012564:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 8012566:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801256a:	e7fb      	b.n	8012564 <wc_curve25519_make_key+0x40>

0801256c <wc_curve25519_shared_secret_ex>:
}

int wc_curve25519_shared_secret_ex(curve25519_key* private_key,
                                   curve25519_key* public_key,
                                   byte* out, word32* outlen, int endian)
{
 801256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801256e:	460c      	mov	r4, r1
 8012570:	b08b      	sub	sp, #44	; 0x2c
 8012572:	4617      	mov	r7, r2
 8012574:	461d      	mov	r5, r3
    int ret;
    ECPoint o;

    /* sanity check */
    if (private_key == NULL || public_key == NULL ||
 8012576:	4606      	mov	r6, r0
 8012578:	b390      	cbz	r0, 80125e0 <wc_curve25519_shared_secret_ex+0x74>
 801257a:	b389      	cbz	r1, 80125e0 <wc_curve25519_shared_secret_ex+0x74>
 801257c:	b382      	cbz	r2, 80125e0 <wc_curve25519_shared_secret_ex+0x74>
        out == NULL || outlen == NULL || *outlen < CURVE25519_KEYSIZE) {
 801257e:	b37b      	cbz	r3, 80125e0 <wc_curve25519_shared_secret_ex+0x74>
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b1f      	cmp	r3, #31
 8012584:	d92c      	bls.n	80125e0 <wc_curve25519_shared_secret_ex+0x74>
        return BAD_FUNC_ARG;
    }

    /* make sure we have a populated private and public key */
    if (!public_key->pubSet
 8012586:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
 801258a:	07da      	lsls	r2, r3, #31
 801258c:	d52b      	bpl.n	80125e6 <wc_curve25519_shared_secret_ex+0x7a>
    #ifndef WOLFSSL_SE050
        || !private_key->privSet
 801258e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8012592:	079b      	lsls	r3, r3, #30
 8012594:	d527      	bpl.n	80125e6 <wc_curve25519_shared_secret_ex+0x7a>
    ) {
        return ECC_BAD_ARG_E;
    }

    /* avoid implementation fingerprinting - make sure signed bit is not set */
    if (public_key->p.point[CURVE25519_KEYSIZE-1] & 0x80) {
 8012596:	f991 3027 	ldrsb.w	r3, [r1, #39]	; 0x27
 801259a:	2b00      	cmp	r3, #0
 801259c:	db23      	blt.n	80125e6 <wc_curve25519_shared_secret_ex+0x7a>
            return ret;
        /* fall-through when unavailable */
    }
#endif

    XMEMSET(&o, 0, sizeof(o));
 801259e:	2221      	movs	r2, #33	; 0x21
 80125a0:	2100      	movs	r1, #0
 80125a2:	a801      	add	r0, sp, #4
 80125a4:	f008 fd44 	bl	801b030 <memset>
    else
    #endif
    {
    SAVE_VECTOR_REGISTERS(return _svr_ret;);

    ret = curve25519(o.point, private_key->k, public_key->p.point);
 80125a8:	f104 0208 	add.w	r2, r4, #8
 80125ac:	f106 0129 	add.w	r1, r6, #41	; 0x29
 80125b0:	a801      	add	r0, sp, #4
 80125b2:	f001 fefd 	bl	80143b0 <curve25519>
        if (t == 0) {
            ret = ECC_OUT_OF_RANGE_E;
        }
    }
#endif
    if (ret == 0) {
 80125b6:	4604      	mov	r4, r0
 80125b8:	b930      	cbnz	r0, 80125c8 <wc_curve25519_shared_secret_ex+0x5c>
        curve25519_copy_point(out, o.point, endian);
 80125ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125bc:	a901      	add	r1, sp, #4
 80125be:	4638      	mov	r0, r7
 80125c0:	f7ff ff62 	bl	8012488 <curve25519_copy_point>
        *outlen = CURVE25519_KEYSIZE;
 80125c4:	2320      	movs	r3, #32
 80125c6:	602b      	str	r3, [r5, #0]
{
 80125c8:	2300      	movs	r3, #0
    while (len--) *z++ = 0;
 80125ca:	4619      	mov	r1, r3
 80125cc:	aa01      	add	r2, sp, #4
 80125ce:	441a      	add	r2, r3
 80125d0:	3301      	adds	r3, #1
 80125d2:	2b22      	cmp	r3, #34	; 0x22
 80125d4:	d102      	bne.n	80125dc <wc_curve25519_shared_secret_ex+0x70>
    }

    ForceZero(&o, sizeof(o));

    return ret;
}
 80125d6:	4620      	mov	r0, r4
 80125d8:	b00b      	add	sp, #44	; 0x2c
 80125da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125dc:	7011      	strb	r1, [r2, #0]
 80125de:	e7f5      	b.n	80125cc <wc_curve25519_shared_secret_ex+0x60>
        return BAD_FUNC_ARG;
 80125e0:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80125e4:	e7f7      	b.n	80125d6 <wc_curve25519_shared_secret_ex+0x6a>
        return ECC_BAD_ARG_E;
 80125e6:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
 80125ea:	e7f4      	b.n	80125d6 <wc_curve25519_shared_secret_ex+0x6a>

080125ec <wc_curve25519_shared_secret>:
{
 80125ec:	b513      	push	{r0, r1, r4, lr}
    return wc_curve25519_shared_secret_ex(private_key, public_key,
 80125ee:	2401      	movs	r4, #1
 80125f0:	9400      	str	r4, [sp, #0]
 80125f2:	f7ff ffbb 	bl	801256c <wc_curve25519_shared_secret_ex>
}
 80125f6:	b002      	add	sp, #8
 80125f8:	bd10      	pop	{r4, pc}

080125fa <wc_curve25519_export_public_ex>:

/* export curve25519 public key (Big or Little endian)
 * return 0 on success */
int wc_curve25519_export_public_ex(curve25519_key* key, byte* out,
                                   word32* outLen, int endian)
{
 80125fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125fe:	460f      	mov	r7, r1
 8012600:	4616      	mov	r6, r2
 8012602:	4698      	mov	r8, r3
    int ret = 0;

    if (key == NULL || out == NULL || outLen == NULL) {
 8012604:	4604      	mov	r4, r0
 8012606:	b360      	cbz	r0, 8012662 <wc_curve25519_export_public_ex+0x68>
 8012608:	b359      	cbz	r1, 8012662 <wc_curve25519_export_public_ex+0x68>
 801260a:	b352      	cbz	r2, 8012662 <wc_curve25519_export_public_ex+0x68>
        return BAD_FUNC_ARG;
    }

    /* check and set outgoing key size */
    if (*outLen < CURVE25519_KEYSIZE) {
 801260c:	6813      	ldr	r3, [r2, #0]
 801260e:	2b1f      	cmp	r3, #31
 8012610:	d806      	bhi.n	8012620 <wc_curve25519_export_public_ex+0x26>
        *outLen = CURVE25519_KEYSIZE;
 8012612:	2320      	movs	r3, #32
 8012614:	6013      	str	r3, [r2, #0]
        return ECC_BAD_ARG_E;
 8012616:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
    /* export public point with endianness */
    curve25519_copy_point(out, key->p.point, endian);
    *outLen = CURVE25519_KEYSIZE;

    return ret;
}
 801261a:	4628      	mov	r0, r5
 801261c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (!key->pubSet) {
 8012620:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8012624:	07db      	lsls	r3, r3, #31
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 8012626:	f100 0908 	add.w	r9, r0, #8
    if (!key->pubSet) {
 801262a:	d418      	bmi.n	801265e <wc_curve25519_export_public_ex+0x64>
        ret = wc_curve25519_make_pub((int)sizeof(key->p.point), key->p.point,
 801262c:	2220      	movs	r2, #32
 801262e:	f100 0329 	add.w	r3, r0, #41	; 0x29
 8012632:	4649      	mov	r1, r9
 8012634:	4610      	mov	r0, r2
 8012636:	f7ff ff3b 	bl	80124b0 <wc_curve25519_make_pub>
        key->pubSet = (ret == 0);
 801263a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801263e:	4605      	mov	r5, r0
 8012640:	fab0 f080 	clz	r0, r0
 8012644:	0940      	lsrs	r0, r0, #5
 8012646:	f360 0300 	bfi	r3, r0, #0, #1
 801264a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    curve25519_copy_point(out, key->p.point, endian);
 801264e:	4642      	mov	r2, r8
 8012650:	4649      	mov	r1, r9
 8012652:	4638      	mov	r0, r7
 8012654:	f7ff ff18 	bl	8012488 <curve25519_copy_point>
    *outLen = CURVE25519_KEYSIZE;
 8012658:	2320      	movs	r3, #32
 801265a:	6033      	str	r3, [r6, #0]
    return ret;
 801265c:	e7dd      	b.n	801261a <wc_curve25519_export_public_ex+0x20>
    int ret = 0;
 801265e:	2500      	movs	r5, #0
 8012660:	e7f5      	b.n	801264e <wc_curve25519_export_public_ex+0x54>
        return BAD_FUNC_ARG;
 8012662:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8012666:	e7d8      	b.n	801261a <wc_curve25519_export_public_ex+0x20>

08012668 <wc_curve25519_export_public>:
    return wc_curve25519_export_public_ex(key, out, outLen, EC25519_BIG_ENDIAN);
 8012668:	2301      	movs	r3, #1
 801266a:	f7ff bfc6 	b.w	80125fa <wc_curve25519_export_public_ex>
	...

08012670 <wc_curve25519_import_public_ex>:

/* import curve25519 public key (Big or Little endian)
 * return 0 on success */
int wc_curve25519_import_public_ex(const byte* in, word32 inLen,
                                curve25519_key* key, int endian)
{
 8012670:	b510      	push	{r4, lr}
 8012672:	4614      	mov	r4, r2
 8012674:	461a      	mov	r2, r3
#ifdef FREESCALE_LTC_ECC
    ltc_pkha_ecc_point_t ltcPoint;
#endif

    /* sanity check */
    if (key == NULL || in == NULL) {
 8012676:	b18c      	cbz	r4, 801269c <wc_curve25519_import_public_ex+0x2c>
 8012678:	b180      	cbz	r0, 801269c <wc_curve25519_import_public_ex+0x2c>
        return BAD_FUNC_ARG;
    }

    /* check size of incoming keys */
    if (inLen != CURVE25519_KEYSIZE) {
 801267a:	2920      	cmp	r1, #32
 801267c:	d111      	bne.n	80126a2 <wc_curve25519_import_public_ex+0x32>
       return ECC_BAD_ARG_E;
    }

    /* import public point with endianness */
    curve25519_copy_point(key->p.point, in, endian);
 801267e:	4601      	mov	r1, r0
 8012680:	f104 0008 	add.w	r0, r4, #8
 8012684:	f7ff ff00 	bl	8012488 <curve25519_copy_point>
    key->pubSet = 1;
 8012688:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801268c:	f043 0301 	orr.w	r3, r3, #1
 8012690:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49

    key->dp = &curve25519_sets[0];
 8012694:	4b04      	ldr	r3, [pc, #16]	; (80126a8 <wc_curve25519_import_public_ex+0x38>)
 8012696:	6063      	str	r3, [r4, #4]
    ltcPoint.X = &key->p.point[0];
    ltcPoint.Y = &key->p.pointY[0];
    LTC_PKHA_Curve25519ComputeY(&ltcPoint);
#endif

    return 0;
 8012698:	2000      	movs	r0, #0
}
 801269a:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 801269c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80126a0:	e7fb      	b.n	801269a <wc_curve25519_import_public_ex+0x2a>
       return ECC_BAD_ARG_E;
 80126a2:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80126a6:	e7f8      	b.n	801269a <wc_curve25519_import_public_ex+0x2a>
 80126a8:	08022ce0 	.word	0x08022ce0

080126ac <wc_curve25519_import_public>:
    return wc_curve25519_import_public_ex(in, inLen, key, EC25519_BIG_ENDIAN);
 80126ac:	2301      	movs	r3, #1
 80126ae:	f7ff bfdf 	b.w	8012670 <wc_curve25519_import_public_ex>

080126b2 <wc_curve25519_check_public>:
 *         ECC_BAD_ARG_E if key length is not 32 bytes, public key value is
 *         zero or one; and
 *         0 otherwise.
 */
int wc_curve25519_check_public(const byte* pub, word32 pubSz, int endian)
{
 80126b2:	b510      	push	{r4, lr}
    word32 i;

    if (pub == NULL)
 80126b4:	4603      	mov	r3, r0
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d042      	beq.n	8012740 <wc_curve25519_check_public+0x8e>
        return BAD_FUNC_ARG;

    /* Check for empty key data */
    if (pubSz == 0)
 80126ba:	2900      	cmp	r1, #0
 80126bc:	d044      	beq.n	8012748 <wc_curve25519_check_public+0x96>
        return BUFFER_E;

    /* Check key length */
    if (pubSz != CURVE25519_KEYSIZE)
 80126be:	2920      	cmp	r1, #32
 80126c0:	d10a      	bne.n	80126d8 <wc_curve25519_check_public+0x26>
        return ECC_BAD_ARG_E;


    if (endian == EC25519_LITTLE_ENDIAN) {
 80126c2:	bb0a      	cbnz	r2, 8012708 <wc_curve25519_check_public+0x56>
 80126c4:	f100 011f 	add.w	r1, r0, #31
        /* Check for value of zero or one */
        for (i = CURVE25519_KEYSIZE - 1; i > 0; i--) {
            if (pub[i] != 0)
 80126c8:	f811 0901 	ldrb.w	r0, [r1], #-1
 80126cc:	b938      	cbnz	r0, 80126de <wc_curve25519_check_public+0x2c>
        for (i = CURVE25519_KEYSIZE - 1; i > 0; i--) {
 80126ce:	428b      	cmp	r3, r1
 80126d0:	d1fa      	bne.n	80126c8 <wc_curve25519_check_public+0x16>
                break;
        }
        if (i == 0 && (pub[0] == 0 || pub[0] == 1))
 80126d2:	7819      	ldrb	r1, [r3, #0]
 80126d4:	2901      	cmp	r1, #1
 80126d6:	d802      	bhi.n	80126de <wc_curve25519_check_public+0x2c>
            for (i = CURVE25519_KEYSIZE - 2; i > 0; i--) {
                if (pub[i] != 0xff)
                    break;
            }
            if (i == 0 && (pub[0] >= 0xec))
                return ECC_BAD_ARG_E;
 80126d8:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 80126dc:	e032      	b.n	8012744 <wc_curve25519_check_public+0x92>
        if (pub[CURVE25519_KEYSIZE - 1] & 0x80)
 80126de:	f993 001f 	ldrsb.w	r0, [r3, #31]
 80126e2:	7fd9      	ldrb	r1, [r3, #31]
 80126e4:	2800      	cmp	r0, #0
 80126e6:	db32      	blt.n	801274e <wc_curve25519_check_public+0x9c>
        if (pub[CURVE25519_KEYSIZE - 1] == 0x7f) {
 80126e8:	297f      	cmp	r1, #127	; 0x7f
 80126ea:	d12b      	bne.n	8012744 <wc_curve25519_check_public+0x92>
 80126ec:	f103 011e 	add.w	r1, r3, #30
                if (pub[i] != 0xff)
 80126f0:	f811 0901 	ldrb.w	r0, [r1], #-1
 80126f4:	28ff      	cmp	r0, #255	; 0xff
 80126f6:	d125      	bne.n	8012744 <wc_curve25519_check_public+0x92>
            for (i = CURVE25519_KEYSIZE - 2; i > 0; i--) {
 80126f8:	428b      	cmp	r3, r1
 80126fa:	d1f9      	bne.n	80126f0 <wc_curve25519_check_public+0x3e>
            if (i == 0 && (pub[0] >= 0xec))
 80126fc:	781b      	ldrb	r3, [r3, #0]
                return ECC_BAD_ARG_E;
 80126fe:	2bec      	cmp	r3, #236	; 0xec
 8012700:	bf28      	it	cs
 8012702:	f06f 02a9 	mvncs.w	r2, #169	; 0xa9
 8012706:	e01d      	b.n	8012744 <wc_curve25519_check_public+0x92>
 8012708:	1e41      	subs	r1, r0, #1
 801270a:	4602      	mov	r2, r0
 801270c:	301e      	adds	r0, #30
         }
    }
    else {
        /* Check for value of zero or one */
        for (i = 0; i < CURVE25519_KEYSIZE - 1; i++) {
            if (pub[i] != 0)
 801270e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012712:	b924      	cbnz	r4, 801271e <wc_curve25519_check_public+0x6c>
        for (i = 0; i < CURVE25519_KEYSIZE - 1; i++) {
 8012714:	4288      	cmp	r0, r1
 8012716:	d1fa      	bne.n	801270e <wc_curve25519_check_public+0x5c>
                break;
        }
        if (i == CURVE25519_KEYSIZE - 1 && (pub[i] == 0 || pub[i] == 1))
 8012718:	7fd9      	ldrb	r1, [r3, #31]
 801271a:	2901      	cmp	r1, #1
 801271c:	d9dc      	bls.n	80126d8 <wc_curve25519_check_public+0x26>
            return ECC_BAD_ARG_E;

        /* Check high bit set */
        if (pub[0] & 0x80)
 801271e:	f993 4000 	ldrsb.w	r4, [r3]
 8012722:	7819      	ldrb	r1, [r3, #0]
 8012724:	2c00      	cmp	r4, #0
 8012726:	db12      	blt.n	801274e <wc_curve25519_check_public+0x9c>
            return ECC_OUT_OF_RANGE_E;

        /* Check for order-1 or higher. */
        if (pub[0] == 0x7f) {
 8012728:	297f      	cmp	r1, #127	; 0x7f
 801272a:	d113      	bne.n	8012754 <wc_curve25519_check_public+0xa2>
            for (i = 1; i < CURVE25519_KEYSIZE - 1; i++) {
                if (pub[i] != 0)
 801272c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8012730:	b981      	cbnz	r1, 8012754 <wc_curve25519_check_public+0xa2>
            for (i = 1; i < CURVE25519_KEYSIZE - 1; i++) {
 8012732:	4290      	cmp	r0, r2
 8012734:	d1fa      	bne.n	801272c <wc_curve25519_check_public+0x7a>
                    break;
            }
            if (i == CURVE25519_KEYSIZE - 1 && (pub[i] >= 0xec))
 8012736:	7fdb      	ldrb	r3, [r3, #31]
                return ECC_BAD_ARG_E;
 8012738:	2bec      	cmp	r3, #236	; 0xec
 801273a:	bf38      	it	cc
 801273c:	2200      	movcc	r2, #0
 801273e:	e7df      	b.n	8012700 <wc_curve25519_check_public+0x4e>
        return BAD_FUNC_ARG;
 8012740:	f06f 02ac 	mvn.w	r2, #172	; 0xac
                return ECC_BAD_ARG_E;
         }
    }

    return 0;
}
 8012744:	4610      	mov	r0, r2
 8012746:	bd10      	pop	{r4, pc}
        return BUFFER_E;
 8012748:	f06f 0283 	mvn.w	r2, #131	; 0x83
 801274c:	e7fa      	b.n	8012744 <wc_curve25519_check_public+0x92>
            return ECC_OUT_OF_RANGE_E;
 801274e:	f06f 02d8 	mvn.w	r2, #216	; 0xd8
 8012752:	e7f7      	b.n	8012744 <wc_curve25519_check_public+0x92>
    return 0;
 8012754:	2200      	movs	r2, #0
 8012756:	e7f5      	b.n	8012744 <wc_curve25519_check_public+0x92>

08012758 <wc_curve25519_export_private_raw_ex>:
/* export curve25519 private key only raw (Big or Little endian)
 * outLen is in/out size
 * return 0 on success */
int wc_curve25519_export_private_raw_ex(curve25519_key* key, byte* out,
                                        word32* outLen, int endian)
{
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4614      	mov	r4, r2
 801275c:	460d      	mov	r5, r1
 801275e:	461a      	mov	r2, r3
    /* sanity check */
    if (key == NULL || out == NULL || outLen == NULL)
 8012760:	b190      	cbz	r0, 8012788 <wc_curve25519_export_private_raw_ex+0x30>
 8012762:	b189      	cbz	r1, 8012788 <wc_curve25519_export_private_raw_ex+0x30>
 8012764:	b184      	cbz	r4, 8012788 <wc_curve25519_export_private_raw_ex+0x30>
        return BAD_FUNC_ARG;

    /* check size of outgoing buffer */
    if (*outLen < CURVE25519_KEYSIZE) {
 8012766:	6823      	ldr	r3, [r4, #0]
 8012768:	2b1f      	cmp	r3, #31
 801276a:	d804      	bhi.n	8012776 <wc_curve25519_export_private_raw_ex+0x1e>
        *outLen = CURVE25519_KEYSIZE;
 801276c:	2320      	movs	r3, #32
 801276e:	6023      	str	r3, [r4, #0]
        return ECC_BAD_ARG_E;
 8012770:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
    /* export private scalar with endianness */
    curve25519_copy_point(out, key->k, endian);
    *outLen = CURVE25519_KEYSIZE;

    return 0;
}
 8012774:	bd38      	pop	{r3, r4, r5, pc}
    curve25519_copy_point(out, key->k, endian);
 8012776:	f100 0129 	add.w	r1, r0, #41	; 0x29
 801277a:	4628      	mov	r0, r5
 801277c:	f7ff fe84 	bl	8012488 <curve25519_copy_point>
    *outLen = CURVE25519_KEYSIZE;
 8012780:	2320      	movs	r3, #32
 8012782:	6023      	str	r3, [r4, #0]
    return 0;
 8012784:	2000      	movs	r0, #0
 8012786:	e7f5      	b.n	8012774 <wc_curve25519_export_private_raw_ex+0x1c>
        return BAD_FUNC_ARG;
 8012788:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801278c:	e7f2      	b.n	8012774 <wc_curve25519_export_private_raw_ex+0x1c>

0801278e <wc_curve25519_export_private_raw>:
    return wc_curve25519_export_private_raw_ex(key, out, outLen,
 801278e:	2301      	movs	r3, #1
 8012790:	f7ff bfe2 	b.w	8012758 <wc_curve25519_export_private_raw_ex>

08012794 <wc_curve25519_import_private_ex>:

/* curve25519 private key import only. (Big or Little endian)
 * return 0 on success */
int wc_curve25519_import_private_ex(const byte* priv, word32 privSz,
                                    curve25519_key* key, int endian)
{
 8012794:	b510      	push	{r4, lr}
    /* sanity check */
    if (key == NULL || priv == NULL) {
 8012796:	4614      	mov	r4, r2
 8012798:	b302      	cbz	r2, 80127dc <wc_curve25519_import_private_ex+0x48>
 801279a:	b1f8      	cbz	r0, 80127dc <wc_curve25519_import_private_ex+0x48>
        return BAD_FUNC_ARG;
    }

    /* check size of incoming keys */
    if ((int)privSz != CURVE25519_KEYSIZE) {
 801279c:	2920      	cmp	r1, #32
 801279e:	d120      	bne.n	80127e2 <wc_curve25519_import_private_ex+0x4e>
    /* release NXP resources if set */
    se050_curve25519_free_key(key);
#endif

    /* import private scalar with endianness */
    curve25519_copy_point(key->k, priv, endian);
 80127a0:	461a      	mov	r2, r3
 80127a2:	4601      	mov	r1, r0
 80127a4:	f104 0029 	add.w	r0, r4, #41	; 0x29
 80127a8:	f7ff fe6e 	bl	8012488 <curve25519_copy_point>
    key->privSet = 1;
 80127ac:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80127b0:	f043 0302 	orr.w	r3, r3, #2
 80127b4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49

    key->dp = &curve25519_sets[0];
 80127b8:	4b0b      	ldr	r3, [pc, #44]	; (80127e8 <wc_curve25519_import_private_ex+0x54>)
 80127ba:	6063      	str	r3, [r4, #4]
    priv[0]  &= 248;
 80127bc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80127c0:	f023 0307 	bic.w	r3, r3, #7
 80127c4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    priv[CURVE25519_KEYSIZE-1] &= 127;
 80127c8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80127cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    priv[CURVE25519_KEYSIZE-1] |= 64;
 80127d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127d4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    /* Clamp the key */
    return curve25519_priv_clamp(key->k);
 80127d8:	2000      	movs	r0, #0
}
 80127da:	bd10      	pop	{r4, pc}
        return BAD_FUNC_ARG;
 80127dc:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80127e0:	e7fb      	b.n	80127da <wc_curve25519_import_private_ex+0x46>
        return ECC_BAD_ARG_E;
 80127e2:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80127e6:	e7f8      	b.n	80127da <wc_curve25519_import_private_ex+0x46>
 80127e8:	08022ce0 	.word	0x08022ce0

080127ec <wc_curve25519_import_private_raw_ex>:
{
 80127ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80127f4:	4614      	mov	r4, r2
 80127f6:	461d      	mov	r5, r3
    ret = wc_curve25519_import_private_ex(priv, privSz, key, endian);
 80127f8:	4632      	mov	r2, r6
 80127fa:	463b      	mov	r3, r7
 80127fc:	f7ff ffca 	bl	8012794 <wc_curve25519_import_private_ex>
    if (ret != 0)
 8012800:	b938      	cbnz	r0, 8012812 <wc_curve25519_import_private_raw_ex+0x26>
    return wc_curve25519_import_public_ex(pub, pubSz, key, endian);
 8012802:	463b      	mov	r3, r7
 8012804:	4632      	mov	r2, r6
 8012806:	4629      	mov	r1, r5
 8012808:	4620      	mov	r0, r4
}
 801280a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return wc_curve25519_import_public_ex(pub, pubSz, key, endian);
 801280e:	f7ff bf2f 	b.w	8012670 <wc_curve25519_import_public_ex>
}
 8012812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012816 <wc_curve25519_import_private_raw>:
{
 8012816:	b513      	push	{r0, r1, r4, lr}
    return wc_curve25519_import_private_raw_ex(priv, privSz, pub, pubSz,
 8012818:	2401      	movs	r4, #1
 801281a:	9401      	str	r4, [sp, #4]
 801281c:	9c04      	ldr	r4, [sp, #16]
 801281e:	9400      	str	r4, [sp, #0]
 8012820:	f7ff ffe4 	bl	80127ec <wc_curve25519_import_private_raw_ex>
}
 8012824:	b002      	add	sp, #8
 8012826:	bd10      	pop	{r4, pc}

08012828 <wc_curve25519_import_private>:
    return wc_curve25519_import_private_ex(priv, privSz,
 8012828:	2301      	movs	r3, #1
 801282a:	f7ff bfb3 	b.w	8012794 <wc_curve25519_import_private_ex>
	...

08012830 <wc_curve25519_init_ex>:

#endif /* HAVE_CURVE25519_KEY_IMPORT */

int wc_curve25519_init_ex(curve25519_key* key, void* heap, int devId)
{
 8012830:	b510      	push	{r4, lr}
    if (key == NULL)
 8012832:	4604      	mov	r4, r0
 8012834:	b148      	cbz	r0, 801284a <wc_curve25519_init_ex+0x1a>
       return BAD_FUNC_ARG;

    XMEMSET(key, 0, sizeof(*key));
 8012836:	224c      	movs	r2, #76	; 0x4c
 8012838:	2100      	movs	r1, #0
 801283a:	f008 fbf9 	bl	801b030 <memset>

    /* currently the format for curve25519 */
    key->dp = &curve25519_sets[0];
 801283e:	4b04      	ldr	r3, [pc, #16]	; (8012850 <wc_curve25519_init_ex+0x20>)
 8012840:	6063      	str	r3, [r4, #4]
    (void)devId;
#endif
    (void)heap; /* if needed for XMALLOC/XFREE in future */

#ifndef FREESCALE_LTC_ECC
    fe_init();
 8012842:	f000 fca4 	bl	801318e <fe_init>

#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Add("wc_curve25519_init_ex key->k", key->k, CURVE25519_KEYSIZE);
#endif

    return 0;
 8012846:	2000      	movs	r0, #0
}
 8012848:	bd10      	pop	{r4, pc}
       return BAD_FUNC_ARG;
 801284a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801284e:	e7fb      	b.n	8012848 <wc_curve25519_init_ex+0x18>
 8012850:	08022ce0 	.word	0x08022ce0

08012854 <wc_curve25519_free>:
    return wc_curve25519_init_ex(key, NULL, INVALID_DEVID);
}

/* Clean the memory of a key */
void wc_curve25519_free(curve25519_key* key)
{
 8012854:	b510      	push	{r4, lr}
    if (key == NULL)
 8012856:	4604      	mov	r4, r0
 8012858:	b198      	cbz	r0, 8012882 <wc_curve25519_free+0x2e>

#ifdef WOLFSSL_SE050
    se050_curve25519_free_key(key);
#endif

    key->dp = NULL;
 801285a:	2200      	movs	r2, #0
 801285c:	6042      	str	r2, [r0, #4]
    ForceZero(key->k, sizeof(key->k));
 801285e:	f100 0329 	add.w	r3, r0, #41	; 0x29
 8012862:	f100 0149 	add.w	r1, r0, #73	; 0x49
 8012866:	428b      	cmp	r3, r1
 8012868:	d10c      	bne.n	8012884 <wc_curve25519_free+0x30>
    XMEMSET(&key->p, 0, sizeof(key->p));
 801286a:	2221      	movs	r2, #33	; 0x21
 801286c:	2100      	movs	r1, #0
 801286e:	f104 0008 	add.w	r0, r4, #8
 8012872:	f008 fbdd 	bl	801b030 <memset>
    key->pubSet = 0;
 8012876:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801287a:	f023 0303 	bic.w	r3, r3, #3
 801287e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    key->privSet = 0;
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(curve25519_key));
#endif
}
 8012882:	bd10      	pop	{r4, pc}
 8012884:	f803 2b01 	strb.w	r2, [r3], #1
 8012888:	e7ed      	b.n	8012866 <wc_curve25519_free+0x12>

0801288a <ed25519_hash_init>:
    ** more char for saving the line ending in our ed25519Ctx[] here: */
    static const byte ed25519Ctx[ED25519CTX_SIZE + 1] = ED25519CTX_SNC_MESSAGE;
#endif

static int ed25519_hash_init(ed25519_key* key, wc_Sha512 *sha)
{
 801288a:	b538      	push	{r3, r4, r5, lr}
 801288c:	460c      	mov	r4, r1
 801288e:	4605      	mov	r5, r0
    int ret;

#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    /* when not using persistent SHA, we'll zero the sha param */
    XMEMSET(sha, 0, sizeof(wc_Sha512));
 8012890:	22e0      	movs	r2, #224	; 0xe0
 8012892:	2100      	movs	r1, #0
 8012894:	4620      	mov	r0, r4
 8012896:	f008 fbcb 	bl	801b030 <memset>
#endif

    ret = wc_InitSha512_ex(sha, key->heap,
 801289a:	6e69      	ldr	r1, [r5, #100]	; 0x64
 801289c:	4620      	mov	r0, r4
 801289e:	f06f 0201 	mvn.w	r2, #1
    if (ret == 0)
        key->sha_clean_flag = 1;
#endif

    return ret;
}
 80128a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = wc_InitSha512_ex(sha, key->heap,
 80128a6:	f7fd bbd7 	b.w	8010058 <wc_InitSha512_ex>

080128aa <ed25519_hash>:
}


static int ed25519_hash(ed25519_key* key, const byte* in, word32 inLen,
    byte* hash)
{
 80128aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128ac:	460d      	mov	r5, r1
 80128ae:	b0b9      	sub	sp, #228	; 0xe4
 80128b0:	4616      	mov	r6, r2
 80128b2:	461f      	mov	r7, r3
    wc_Sha512 sha[1];
#else
    wc_Sha512 *sha;
#endif

    if (key == NULL || (in == NULL && inLen > 0) || hash == NULL) {
 80128b4:	b1c0      	cbz	r0, 80128e8 <ed25519_hash+0x3e>
 80128b6:	b901      	cbnz	r1, 80128ba <ed25519_hash+0x10>
 80128b8:	b9b2      	cbnz	r2, 80128e8 <ed25519_hash+0x3e>

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    sha = &key->sha;
    ret = ed25519_hash_reset(key);
#else
    ret = ed25519_hash_init(key, sha);
 80128ba:	4669      	mov	r1, sp
 80128bc:	f7ff ffe5 	bl	801288a <ed25519_hash_init>
#endif
    if (ret < 0)
 80128c0:	1e04      	subs	r4, r0, #0
 80128c2:	db0e      	blt.n	80128e2 <ed25519_hash+0x38>
    return wc_Sha512Update(sha, data, len);
 80128c4:	4632      	mov	r2, r6
 80128c6:	4629      	mov	r1, r5
 80128c8:	4668      	mov	r0, sp
 80128ca:	f7fd fbdd 	bl	8010088 <wc_Sha512Update>
        return ret;

    ret = ed25519_hash_update(key, sha, in, inLen);
    if (ret == 0)
 80128ce:	4604      	mov	r4, r0
 80128d0:	b920      	cbnz	r0, 80128dc <ed25519_hash+0x32>
    int ret = wc_Sha512Final(sha, hash);
 80128d2:	4639      	mov	r1, r7
 80128d4:	4668      	mov	r0, sp
 80128d6:	f7fd fbad 	bl	8010034 <wc_Sha512Final>
 80128da:	4604      	mov	r4, r0
    wc_Sha512Free(sha);
 80128dc:	4668      	mov	r0, sp
 80128de:	f7fd fc42 	bl	8010166 <wc_Sha512Free>
#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    ed25519_hash_free(key, sha);
#endif

    return ret;
}
 80128e2:	4620      	mov	r0, r4
 80128e4:	b039      	add	sp, #228	; 0xe4
 80128e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BAD_FUNC_ARG;
 80128e8:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80128ec:	e7f9      	b.n	80128e2 <ed25519_hash+0x38>

080128ee <wc_ed25519_make_public>:

#ifdef HAVE_ED25519_MAKE_KEY
int wc_ed25519_make_public(ed25519_key* key, unsigned char* pubKey,
                           word32 pubKeySz)
{
 80128ee:	b570      	push	{r4, r5, r6, lr}
 80128f0:	460e      	mov	r6, r1
 80128f2:	b0b8      	sub	sp, #224	; 0xe0
    ALIGN16 byte az[ED25519_PRV_KEY_SIZE];
#if !defined(FREESCALE_LTC_ECC)
    ge_p3 A;
#endif

    if (key == NULL || pubKey == NULL || pubKeySz != ED25519_PUB_KEY_SIZE)
 80128f4:	4605      	mov	r5, r0
 80128f6:	b360      	cbz	r0, 8012952 <wc_ed25519_make_public+0x64>
 80128f8:	b359      	cbz	r1, 8012952 <wc_ed25519_make_public+0x64>
 80128fa:	2a20      	cmp	r2, #32
 80128fc:	d129      	bne.n	8012952 <wc_ed25519_make_public+0x64>
        ret = BAD_FUNC_ARG;

    if ((ret == 0) && (!key->privKeySet)) {
 80128fe:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8012902:	07db      	lsls	r3, r3, #31
 8012904:	d528      	bpl.n	8012958 <wc_ed25519_make_public+0x6a>
        ret = ECC_PRIV_KEY_E;
    }

    if (ret == 0)
        ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 8012906:	466b      	mov	r3, sp
 8012908:	f100 0120 	add.w	r1, r0, #32
 801290c:	f7ff ffcd 	bl	80128aa <ed25519_hash>
    if (ret == 0) {
 8012910:	4604      	mov	r4, r0
 8012912:	b9d8      	cbnz	r0, 801294c <wc_ed25519_make_public+0x5e>
        /* apply clamp */
        az[0]  &= 248;
 8012914:	f89d 3000 	ldrb.w	r3, [sp]
 8012918:	f023 0307 	bic.w	r3, r3, #7
 801291c:	f88d 3000 	strb.w	r3, [sp]
        az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 8012920:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        az[31] |= 64;
 8012928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        publicKey.Y = key->pointY;
        LTC_PKHA_Ed25519_PointMul(LTC_PKHA_Ed25519_BasePoint(), az,
            ED25519_KEY_SIZE, &publicKey, kLTC_Ed25519 /* result on Ed25519 */);
        LTC_PKHA_Ed25519_Compress(&publicKey, pubKey);
    #else
        ge_scalarmult_base(&A, az);
 801292c:	4669      	mov	r1, sp
 801292e:	a810      	add	r0, sp, #64	; 0x40
        az[31] |= 64;
 8012930:	f88d 301f 	strb.w	r3, [sp, #31]
        ge_scalarmult_base(&A, az);
 8012934:	f004 fbe2 	bl	80170fc <ge_scalarmult_base>
        ge_p3_tobytes(pubKey, &A);
 8012938:	a910      	add	r1, sp, #64	; 0x40
 801293a:	4630      	mov	r0, r6
 801293c:	f004 feea 	bl	8017714 <ge_tobytes>
    #endif

        key->pubKeySet = 1;
 8012940:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8012944:	f043 0302 	orr.w	r3, r3, #2
 8012948:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    }

    return ret;
}
 801294c:	4620      	mov	r0, r4
 801294e:	b038      	add	sp, #224	; 0xe0
 8012950:	bd70      	pop	{r4, r5, r6, pc}
 8012952:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8012956:	e7f9      	b.n	801294c <wc_ed25519_make_public+0x5e>
        ret = ECC_PRIV_KEY_E;
 8012958:	f06f 04d7 	mvn.w	r4, #215	; 0xd7
    return ret;
 801295c:	e7f6      	b.n	801294c <wc_ed25519_make_public+0x5e>

0801295e <wc_ed25519_make_key>:

/* generate an ed25519 key pair.
 * returns 0 on success
 */
int wc_ed25519_make_key(WC_RNG* rng, int keySz, ed25519_key* key)
{
 801295e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012960:	460f      	mov	r7, r1
 8012962:	4614      	mov	r4, r2
    int ret;

    if (rng == NULL || key == NULL)
 8012964:	b390      	cbz	r0, 80129cc <wc_ed25519_make_key+0x6e>
 8012966:	b38a      	cbz	r2, 80129cc <wc_ed25519_make_key+0x6e>
        return BAD_FUNC_ARG;

    /* ed25519 has 32 byte key sizes */
    if (keySz != ED25519_KEY_SIZE)
 8012968:	2920      	cmp	r1, #32
 801296a:	d12f      	bne.n	80129cc <wc_ed25519_make_key+0x6e>
        return BAD_FUNC_ARG;

    key->privKeySet = 0;
 801296c:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
            return ret;
        /* fall-through when unavailable */
    }
#endif

    ret = wc_RNG_GenerateBlock(rng, key->k, ED25519_KEY_SIZE);
 8012970:	f102 0620 	add.w	r6, r2, #32
    key->privKeySet = 0;
 8012974:	f023 0303 	bic.w	r3, r3, #3
 8012978:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    ret = wc_RNG_GenerateBlock(rng, key->k, ED25519_KEY_SIZE);
 801297c:	460a      	mov	r2, r1
 801297e:	4631      	mov	r1, r6
 8012980:	f7f9 fe8c 	bl	800c69c <wc_RNG_GenerateBlock>
    if (ret != 0)
 8012984:	4605      	mov	r5, r0
 8012986:	b9b8      	cbnz	r0, 80129b8 <wc_ed25519_make_key+0x5a>
        return ret;

    key->privKeySet = 1;
 8012988:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801298c:	f043 0301 	orr.w	r3, r3, #1
 8012990:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    ret = wc_ed25519_make_public(key, key->p, ED25519_PUB_KEY_SIZE);
 8012994:	463a      	mov	r2, r7
 8012996:	4621      	mov	r1, r4
 8012998:	4620      	mov	r0, r4
 801299a:	f7ff ffa8 	bl	80128ee <wc_ed25519_make_public>
    if (ret != 0) {
 801299e:	4605      	mov	r5, r0
 80129a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80129a4:	b16d      	cbz	r5, 80129c2 <wc_ed25519_make_key+0x64>
        key->privKeySet = 0;
 80129a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80129aa:	f36f 0300 	bfc	r3, #0, #1
 80129ae:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80129b2:	2300      	movs	r3, #0
 80129b4:	4286      	cmp	r6, r0
 80129b6:	d101      	bne.n	80129bc <wc_ed25519_make_key+0x5e>

    /* put public key after private key, on the same buffer */
    XMEMMOVE(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);

    return ret;
}
 80129b8:	4628      	mov	r0, r5
 80129ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129bc:	f806 3b01 	strb.w	r3, [r6], #1
 80129c0:	e7f8      	b.n	80129b4 <wc_ed25519_make_key+0x56>
    XMEMMOVE(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);
 80129c2:	463a      	mov	r2, r7
 80129c4:	4621      	mov	r1, r4
 80129c6:	f008 fb19 	bl	801affc <memmove>
    return ret;
 80129ca:	e7f5      	b.n	80129b8 <wc_ed25519_make_key+0x5a>
        return BAD_FUNC_ARG;
 80129cc:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 80129d0:	e7f2      	b.n	80129b8 <wc_ed25519_make_key+0x5a>
	...

080129d4 <wc_ed25519_sign_msg_ex>:
    return 0 on success
 */
int wc_ed25519_sign_msg_ex(const byte* in, word32 inLen, byte* out,
                            word32 *outLen, ed25519_key* key, byte type,
                            const byte* context, byte contextLen)
{
 80129d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129d8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80129dc:	460f      	mov	r7, r1
 80129de:	f8dd 8260 	ldr.w	r8, [sp, #608]	; 0x260
 80129e2:	f8dd 9268 	ldr.w	r9, [sp, #616]	; 0x268
 80129e6:	4615      	mov	r5, r2
    ALIGN16 byte nonce[WC_SHA512_DIGEST_SIZE];
    ALIGN16 byte hram[WC_SHA512_DIGEST_SIZE];
    ALIGN16 byte az[ED25519_PRV_KEY_SIZE];

    /* sanity check on arguments */
    if (in == NULL || out == NULL || outLen == NULL || key == NULL ||
 80129e8:	4606      	mov	r6, r0
 80129ea:	2800      	cmp	r0, #0
 80129ec:	f000 80e9 	beq.w	8012bc2 <wc_ed25519_sign_msg_ex+0x1ee>
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	f000 80e6 	beq.w	8012bc2 <wc_ed25519_sign_msg_ex+0x1ee>
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f000 80e3 	beq.w	8012bc2 <wc_ed25519_sign_msg_ex+0x1ee>
 80129fc:	f1b8 0f00 	cmp.w	r8, #0
 8012a00:	f000 80df 	beq.w	8012bc2 <wc_ed25519_sign_msg_ex+0x1ee>
 8012a04:	f1b9 0f00 	cmp.w	r9, #0
 8012a08:	d104      	bne.n	8012a14 <wc_ed25519_sign_msg_ex+0x40>
                                         (context == NULL && contextLen != 0)) {
 8012a0a:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	f040 80d7 	bne.w	8012bc2 <wc_ed25519_sign_msg_ex+0x1ee>
            return ret;
        /* fall-through when unavailable */
    }
#endif

    if (!key->pubKeySet)
 8012a14:	f898 2060 	ldrb.w	r2, [r8, #96]	; 0x60
 8012a18:	0792      	lsls	r2, r2, #30
 8012a1a:	f140 80d2 	bpl.w	8012bc2 <wc_ed25519_sign_msg_ex+0x1ee>
        return BAD_FUNC_ARG;

    /* check and set up out length */
    if (*outLen < ED25519_SIG_SIZE) {
 8012a1e:	681a      	ldr	r2, [r3, #0]
 8012a20:	2a3f      	cmp	r2, #63	; 0x3f
 8012a22:	f04f 0240 	mov.w	r2, #64	; 0x40
        *outLen = ED25519_SIG_SIZE;
 8012a26:	601a      	str	r2, [r3, #0]
    if (*outLen < ED25519_SIG_SIZE) {
 8012a28:	d806      	bhi.n	8012a38 <wc_ed25519_sign_msg_ex+0x64>
        return BUFFER_E;
 8012a2a:	f06f 0483 	mvn.w	r4, #131	; 0x83
    sc_reduce(hram);
    sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
#endif
#endif /* WOLFSSL_SE050 */
    return ret;
}
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8012a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 8012a38:	2220      	movs	r2, #32
 8012a3a:	ab20      	add	r3, sp, #128	; 0x80
 8012a3c:	eb08 0102 	add.w	r1, r8, r2
 8012a40:	4640      	mov	r0, r8
 8012a42:	f7ff ff32 	bl	80128aa <ed25519_hash>
    if (ret != 0)
 8012a46:	4604      	mov	r4, r0
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	d1f0      	bne.n	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
    az[0]  &= 248;
 8012a4c:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8012a50:	f023 0307 	bic.w	r3, r3, #7
 8012a54:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 8012a58:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
 8012a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    az[31] |= 64;
 8012a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        ret = ed25519_hash_init(key, sha);
 8012a64:	a958      	add	r1, sp, #352	; 0x160
 8012a66:	4640      	mov	r0, r8
    az[31] |= 64;
 8012a68:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
        ret = ed25519_hash_init(key, sha);
 8012a6c:	f7ff ff0d 	bl	801288a <ed25519_hash_init>
        if (ret < 0) {
 8012a70:	1e04      	subs	r4, r0, #0
 8012a72:	dbdc      	blt.n	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
        if (type == Ed25519ctx || type == Ed25519ph) {
 8012a74:	f89d 3264 	ldrb.w	r3, [sp, #612]	; 0x264
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d871      	bhi.n	8012b60 <wc_ed25519_sign_msg_ex+0x18c>
    return wc_Sha512Update(sha, data, len);
 8012a7c:	4952      	ldr	r1, [pc, #328]	; (8012bc8 <wc_ed25519_sign_msg_ex+0x1f4>)
 8012a7e:	2220      	movs	r2, #32
 8012a80:	a858      	add	r0, sp, #352	; 0x160
 8012a82:	f7fd fb01 	bl	8010088 <wc_Sha512Update>
            if (ret == 0)
 8012a86:	4604      	mov	r4, r0
 8012a88:	b9c0      	cbnz	r0, 8012abc <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	a999      	add	r1, sp, #612	; 0x264
 8012a8e:	a858      	add	r0, sp, #352	; 0x160
 8012a90:	f7fd fafa 	bl	8010088 <wc_Sha512Update>
            if (ret == 0)
 8012a94:	4604      	mov	r4, r0
 8012a96:	b988      	cbnz	r0, 8012abc <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 8012a98:	2201      	movs	r2, #1
 8012a9a:	a99b      	add	r1, sp, #620	; 0x26c
 8012a9c:	a858      	add	r0, sp, #352	; 0x160
 8012a9e:	f7fd faf3 	bl	8010088 <wc_Sha512Update>
            if (ret == 0 && context != NULL)
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	b950      	cbnz	r0, 8012abc <wc_ed25519_sign_msg_ex+0xe8>
 8012aa6:	f1b9 0f00 	cmp.w	r9, #0
 8012aaa:	d152      	bne.n	8012b52 <wc_ed25519_sign_msg_ex+0x17e>
    return wc_Sha512Update(sha, data, len);
 8012aac:	2220      	movs	r2, #32
 8012aae:	a928      	add	r1, sp, #160	; 0xa0
 8012ab0:	a858      	add	r0, sp, #352	; 0x160
 8012ab2:	f7fd fae9 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d054      	beq.n	8012b66 <wc_ed25519_sign_msg_ex+0x192>
    wc_Sha512Free(sha);
 8012abc:	a858      	add	r0, sp, #352	; 0x160
 8012abe:	f7fd fb52 	bl	8010166 <wc_Sha512Free>
    if (ret != 0)
 8012ac2:	2c00      	cmp	r4, #0
 8012ac4:	d1b3      	bne.n	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
    sc_reduce(nonce);
 8012ac6:	4668      	mov	r0, sp
 8012ac8:	f002 fab0 	bl	801502c <sc_reduce>
    ge_scalarmult_base(&R,nonce);
 8012acc:	4669      	mov	r1, sp
 8012ace:	a830      	add	r0, sp, #192	; 0xc0
 8012ad0:	f004 fb14 	bl	80170fc <ge_scalarmult_base>
    ge_p3_tobytes(out,&R);
 8012ad4:	a930      	add	r1, sp, #192	; 0xc0
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f004 fe1c 	bl	8017714 <ge_tobytes>
        ret = ed25519_hash_init(key, sha);
 8012adc:	a958      	add	r1, sp, #352	; 0x160
 8012ade:	4640      	mov	r0, r8
 8012ae0:	f7ff fed3 	bl	801288a <ed25519_hash_init>
        if (ret < 0)
 8012ae4:	1e04      	subs	r4, r0, #0
 8012ae6:	dba2      	blt.n	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
        if (type == Ed25519ctx || type == Ed25519ph) {
 8012ae8:	f89d 3264 	ldrb.w	r3, [sp, #612]	; 0x264
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d84f      	bhi.n	8012b90 <wc_ed25519_sign_msg_ex+0x1bc>
    return wc_Sha512Update(sha, data, len);
 8012af0:	4935      	ldr	r1, [pc, #212]	; (8012bc8 <wc_ed25519_sign_msg_ex+0x1f4>)
 8012af2:	2220      	movs	r2, #32
 8012af4:	a858      	add	r0, sp, #352	; 0x160
 8012af6:	f7fd fac7 	bl	8010088 <wc_Sha512Update>
            if (ret == 0)
 8012afa:	4604      	mov	r4, r0
 8012afc:	b9c0      	cbnz	r0, 8012b30 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 8012afe:	2201      	movs	r2, #1
 8012b00:	a999      	add	r1, sp, #612	; 0x264
 8012b02:	a858      	add	r0, sp, #352	; 0x160
 8012b04:	f7fd fac0 	bl	8010088 <wc_Sha512Update>
            if (ret == 0)
 8012b08:	4604      	mov	r4, r0
 8012b0a:	b988      	cbnz	r0, 8012b30 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	a99b      	add	r1, sp, #620	; 0x26c
 8012b10:	a858      	add	r0, sp, #352	; 0x160
 8012b12:	f7fd fab9 	bl	8010088 <wc_Sha512Update>
            if (ret == 0 && context != NULL)
 8012b16:	4604      	mov	r4, r0
 8012b18:	b950      	cbnz	r0, 8012b30 <wc_ed25519_sign_msg_ex+0x15c>
 8012b1a:	f1b9 0f00 	cmp.w	r9, #0
 8012b1e:	d130      	bne.n	8012b82 <wc_ed25519_sign_msg_ex+0x1ae>
    return wc_Sha512Update(sha, data, len);
 8012b20:	2220      	movs	r2, #32
 8012b22:	4629      	mov	r1, r5
 8012b24:	a858      	add	r0, sp, #352	; 0x160
 8012b26:	f7fd faaf 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	d032      	beq.n	8012b96 <wc_ed25519_sign_msg_ex+0x1c2>
    wc_Sha512Free(sha);
 8012b30:	a858      	add	r0, sp, #352	; 0x160
 8012b32:	f7fd fb18 	bl	8010166 <wc_Sha512Free>
    if (ret != 0)
 8012b36:	2c00      	cmp	r4, #0
 8012b38:	f47f af79 	bne.w	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
    sc_reduce(hram);
 8012b3c:	a810      	add	r0, sp, #64	; 0x40
 8012b3e:	f002 fa75 	bl	801502c <sc_reduce>
    sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
 8012b42:	466b      	mov	r3, sp
 8012b44:	aa20      	add	r2, sp, #128	; 0x80
 8012b46:	a910      	add	r1, sp, #64	; 0x40
 8012b48:	f105 0020 	add.w	r0, r5, #32
 8012b4c:	f003 f86a 	bl	8015c24 <sc_muladd>
    return ret;
 8012b50:	e76d      	b.n	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
    return wc_Sha512Update(sha, data, len);
 8012b52:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 8012b56:	4649      	mov	r1, r9
 8012b58:	a858      	add	r0, sp, #352	; 0x160
 8012b5a:	f7fd fa95 	bl	8010088 <wc_Sha512Update>
 8012b5e:	4604      	mov	r4, r0
        if (ret == 0)
 8012b60:	2c00      	cmp	r4, #0
 8012b62:	d1ab      	bne.n	8012abc <wc_ed25519_sign_msg_ex+0xe8>
 8012b64:	e7a2      	b.n	8012aac <wc_ed25519_sign_msg_ex+0xd8>
    return wc_Sha512Update(sha, data, len);
 8012b66:	463a      	mov	r2, r7
 8012b68:	4631      	mov	r1, r6
 8012b6a:	a858      	add	r0, sp, #352	; 0x160
 8012b6c:	f7fd fa8c 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012b70:	4604      	mov	r4, r0
 8012b72:	2800      	cmp	r0, #0
 8012b74:	d1a2      	bne.n	8012abc <wc_ed25519_sign_msg_ex+0xe8>
    int ret = wc_Sha512Final(sha, hash);
 8012b76:	4669      	mov	r1, sp
 8012b78:	a858      	add	r0, sp, #352	; 0x160
 8012b7a:	f7fd fa5b 	bl	8010034 <wc_Sha512Final>
 8012b7e:	4604      	mov	r4, r0
    return ret;
 8012b80:	e79c      	b.n	8012abc <wc_ed25519_sign_msg_ex+0xe8>
    return wc_Sha512Update(sha, data, len);
 8012b82:	f89d 226c 	ldrb.w	r2, [sp, #620]	; 0x26c
 8012b86:	4649      	mov	r1, r9
 8012b88:	a858      	add	r0, sp, #352	; 0x160
 8012b8a:	f7fd fa7d 	bl	8010088 <wc_Sha512Update>
 8012b8e:	4604      	mov	r4, r0
        if (ret == 0)
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	d1cd      	bne.n	8012b30 <wc_ed25519_sign_msg_ex+0x15c>
 8012b94:	e7c4      	b.n	8012b20 <wc_ed25519_sign_msg_ex+0x14c>
    return wc_Sha512Update(sha, data, len);
 8012b96:	2220      	movs	r2, #32
 8012b98:	4641      	mov	r1, r8
 8012b9a:	a858      	add	r0, sp, #352	; 0x160
 8012b9c:	f7fd fa74 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d1c4      	bne.n	8012b30 <wc_ed25519_sign_msg_ex+0x15c>
    return wc_Sha512Update(sha, data, len);
 8012ba6:	463a      	mov	r2, r7
 8012ba8:	4631      	mov	r1, r6
 8012baa:	a858      	add	r0, sp, #352	; 0x160
 8012bac:	f7fd fa6c 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	d1bc      	bne.n	8012b30 <wc_ed25519_sign_msg_ex+0x15c>
    int ret = wc_Sha512Final(sha, hash);
 8012bb6:	a910      	add	r1, sp, #64	; 0x40
 8012bb8:	a858      	add	r0, sp, #352	; 0x160
 8012bba:	f7fd fa3b 	bl	8010034 <wc_Sha512Final>
 8012bbe:	4604      	mov	r4, r0
    return ret;
 8012bc0:	e7b6      	b.n	8012b30 <wc_ed25519_sign_msg_ex+0x15c>
        return BAD_FUNC_ARG;
 8012bc2:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8012bc6:	e732      	b.n	8012a2e <wc_ed25519_sign_msg_ex+0x5a>
 8012bc8:	08022d08 	.word	0x08022d08

08012bcc <wc_ed25519_sign_msg>:
    key    is the ed25519 key to use when signing
    return 0 on success
 */
int wc_ed25519_sign_msg(const byte* in, word32 inLen, byte* out,
                        word32 *outLen, ed25519_key* key)
{
 8012bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ed25519_sign_msg_ex(in, inLen, out, outLen, key, (byte)Ed25519,
 8012bce:	2400      	movs	r4, #0
 8012bd0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012bd4:	24ff      	movs	r4, #255	; 0xff
 8012bd6:	9401      	str	r4, [sp, #4]
 8012bd8:	9c06      	ldr	r4, [sp, #24]
 8012bda:	9400      	str	r4, [sp, #0]
 8012bdc:	f7ff fefa 	bl	80129d4 <wc_ed25519_sign_msg_ex>
        NULL, 0);
}
 8012be0:	b004      	add	sp, #16
 8012be2:	bd10      	pop	{r4, pc}

08012be4 <wc_ed25519ctx_sign_msg>:
    return 0 on success
 */
int wc_ed25519ctx_sign_msg(const byte* in, word32 inLen, byte* out,
                           word32 *outLen, ed25519_key* key,
                           const byte* context, byte contextLen)
{
 8012be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ed25519_sign_msg_ex(in, inLen, out, outLen, key, Ed25519ctx,
 8012be6:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8012bea:	9403      	str	r4, [sp, #12]
 8012bec:	9c07      	ldr	r4, [sp, #28]
 8012bee:	9402      	str	r4, [sp, #8]
 8012bf0:	2400      	movs	r4, #0
 8012bf2:	9401      	str	r4, [sp, #4]
 8012bf4:	9c06      	ldr	r4, [sp, #24]
 8012bf6:	9400      	str	r4, [sp, #0]
 8012bf8:	f7ff feec 	bl	80129d4 <wc_ed25519_sign_msg_ex>
                                                           context, contextLen);
}
 8012bfc:	b004      	add	sp, #16
 8012bfe:	bd10      	pop	{r4, pc}

08012c00 <wc_ed25519ph_sign_hash>:
    return 0 on success
 */
int wc_ed25519ph_sign_hash(const byte* hash, word32 hashLen, byte* out,
                           word32 *outLen, ed25519_key* key,
                           const byte* context, byte contextLen)
{
 8012c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return wc_ed25519_sign_msg_ex(hash, hashLen, out, outLen, key, Ed25519ph,
 8012c02:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8012c06:	9403      	str	r4, [sp, #12]
 8012c08:	9c07      	ldr	r4, [sp, #28]
 8012c0a:	9402      	str	r4, [sp, #8]
 8012c0c:	2401      	movs	r4, #1
 8012c0e:	9401      	str	r4, [sp, #4]
 8012c10:	9c06      	ldr	r4, [sp, #24]
 8012c12:	9400      	str	r4, [sp, #0]
 8012c14:	f7ff fede 	bl	80129d4 <wc_ed25519_sign_msg_ex>
                                                           context, contextLen);
}
 8012c18:	b004      	add	sp, #16
 8012c1a:	bd10      	pop	{r4, pc}

08012c1c <wc_ed25519ph_sign_msg>:
    return 0 on success
 */
int wc_ed25519ph_sign_msg(const byte* in, word32 inLen, byte* out,
                          word32 *outLen, ed25519_key* key,
                          const byte* context, byte contextLen)
{
 8012c1c:	b570      	push	{r4, r5, r6, lr}
 8012c1e:	b094      	sub	sp, #80	; 0x50
 8012c20:	4614      	mov	r4, r2
 8012c22:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8012c24:	461d      	mov	r5, r3
    int  ret;
    byte hash[WC_SHA512_DIGEST_SIZE];

    ret = ed25519_hash(key, in, inLen, hash);
 8012c26:	460a      	mov	r2, r1
 8012c28:	ab04      	add	r3, sp, #16
 8012c2a:	4601      	mov	r1, r0
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	f7ff fe3c 	bl	80128aa <ed25519_hash>
    if (ret != 0)
 8012c32:	b968      	cbnz	r0, 8012c50 <wc_ed25519ph_sign_msg+0x34>
        return ret;

    return wc_ed25519_sign_msg_ex(hash, sizeof(hash), out, outLen, key,
 8012c34:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8012c38:	9303      	str	r3, [sp, #12]
 8012c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c3c:	9302      	str	r3, [sp, #8]
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e9cd 6300 	strd	r6, r3, [sp]
 8012c44:	4622      	mov	r2, r4
 8012c46:	462b      	mov	r3, r5
 8012c48:	2140      	movs	r1, #64	; 0x40
 8012c4a:	a804      	add	r0, sp, #16
 8012c4c:	f7ff fec2 	bl	80129d4 <wc_ed25519_sign_msg_ex>
                                                Ed25519ph, context, contextLen);
}
 8012c50:	b014      	add	sp, #80	; 0x50
 8012c52:	bd70      	pop	{r4, r5, r6, pc}

08012c54 <wc_ed25519_verify_msg_ex>:
   return  0 and res of 1 on success
*/
int wc_ed25519_verify_msg_ex(const byte* sig, word32 sigLen, const byte* msg,
                              word32 msgLen, int* res, ed25519_key* key,
                              byte type, const byte* context, byte contextLen)
{
 8012c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012c5c:	469a      	mov	sl, r3
 8012c5e:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
 8012c60:	f89d 8290 	ldrb.w	r8, [sp, #656]	; 0x290
 8012c64:	f8dd 9294 	ldr.w	r9, [sp, #660]	; 0x294
 8012c68:	f89d 3298 	ldrb.w	r3, [sp, #664]	; 0x298
 8012c6c:	468b      	mov	fp, r1
 8012c6e:	4617      	mov	r7, r2
#else
    wc_Sha512 sha[1];
#endif

    /* sanity check on arguments */
    if (sig == NULL || msg == NULL || res == NULL || key == NULL ||
 8012c70:	4605      	mov	r5, r0
 8012c72:	2800      	cmp	r0, #0
 8012c74:	f000 80bf 	beq.w	8012df6 <wc_ed25519_verify_msg_ex+0x1a2>
 8012c78:	2a00      	cmp	r2, #0
 8012c7a:	f000 80bc 	beq.w	8012df6 <wc_ed25519_verify_msg_ex+0x1a2>
 8012c7e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012c80:	2a00      	cmp	r2, #0
 8012c82:	f000 80b8 	beq.w	8012df6 <wc_ed25519_verify_msg_ex+0x1a2>
 8012c86:	2e00      	cmp	r6, #0
 8012c88:	f000 80b5 	beq.w	8012df6 <wc_ed25519_verify_msg_ex+0x1a2>
 8012c8c:	f1b9 0f00 	cmp.w	r9, #0
 8012c90:	d102      	bne.n	8012c98 <wc_ed25519_verify_msg_ex+0x44>
                                         (context == NULL && contextLen != 0))
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	f040 80af 	bne.w	8012df6 <wc_ed25519_verify_msg_ex+0x1a2>
#endif

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    sha = &key->sha;
#else
    ret = ed25519_hash_init(key, sha);
 8012c98:	a960      	add	r1, sp, #384	; 0x180
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	f7ff fdf4 	bl	801288a <ed25519_hash_init>
    if (ret < 0) {
 8012ca2:	1e04      	subs	r4, r0, #0
 8012ca4:	db6f      	blt.n	8012d86 <wc_ed25519_verify_msg_ex+0x132>
        return ret;
    }
#endif /* WOLFSSL_ED25519_PERSISTENT_SHA */

    ret = ed25519_verify_msg_init_with_sha(sig, sigLen, key, sha, type, context,
 8012ca6:	9b01      	ldr	r3, [sp, #4]
 8012ca8:	f88d 8068 	strb.w	r8, [sp, #104]	; 0x68
 8012cac:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
    if (sig == NULL || key == NULL ||
 8012cb0:	f1b9 0f00 	cmp.w	r9, #0
 8012cb4:	d103      	bne.n	8012cbe <wc_ed25519_verify_msg_ex+0x6a>
        (context == NULL && contextLen != 0)) {
 8012cb6:	b113      	cbz	r3, 8012cbe <wc_ed25519_verify_msg_ex+0x6a>
        return BAD_FUNC_ARG;
 8012cb8:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8012cbc:	e060      	b.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    if (sigLen != ED25519_SIG_SIZE || (sig[ED25519_SIG_SIZE-1] & 224))
 8012cbe:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8012cc2:	d1f9      	bne.n	8012cb8 <wc_ed25519_verify_msg_ex+0x64>
 8012cc4:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8012cc8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8012ccc:	d1f4      	bne.n	8012cb8 <wc_ed25519_verify_msg_ex+0x64>
    if (type == Ed25519ctx || type == Ed25519ph) {
 8012cce:	f1b8 0f01 	cmp.w	r8, #1
 8012cd2:	d934      	bls.n	8012d3e <wc_ed25519_verify_msg_ex+0xea>
    return wc_Sha512Update(sha, data, len);
 8012cd4:	2220      	movs	r2, #32
 8012cd6:	4629      	mov	r1, r5
 8012cd8:	a860      	add	r0, sp, #384	; 0x180
 8012cda:	f7fd f9d5 	bl	8010088 <wc_Sha512Update>
    if (ret == 0)
 8012cde:	4604      	mov	r4, r0
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d14d      	bne.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8012ce4:	2220      	movs	r2, #32
 8012ce6:	4631      	mov	r1, r6
 8012ce8:	a860      	add	r0, sp, #384	; 0x180
 8012cea:	f7fd f9cd 	bl	8010088 <wc_Sha512Update>
        contextLen);
    if (ret == 0)
 8012cee:	4604      	mov	r4, r0
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d145      	bne.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8012cf4:	4652      	mov	r2, sl
 8012cf6:	4639      	mov	r1, r7
 8012cf8:	a860      	add	r0, sp, #384	; 0x180
 8012cfa:	f7fd f9c5 	bl	8010088 <wc_Sha512Update>
        ret = ed25519_verify_msg_update_with_sha(msg, msgLen, key, sha);
    if (ret == 0)
 8012cfe:	4604      	mov	r4, r0
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d13d      	bne.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    *res = 0;
 8012d04:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8012d06:	6018      	str	r0, [r3, #0]
    if (sig[ED25519_SIG_SIZE-1] > 0x10)
 8012d08:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8012d0c:	2b10      	cmp	r3, #16
 8012d0e:	d8d3      	bhi.n	8012cb8 <wc_ed25519_verify_msg_ex+0x64>
    if (sig[ED25519_SIG_SIZE-1] == 0x10) {
 8012d10:	d13e      	bne.n	8012d90 <wc_ed25519_verify_msg_ex+0x13c>
 8012d12:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8012d16:	f105 0230 	add.w	r2, r5, #48	; 0x30
            if (sig[i] > 0x00)
 8012d1a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8012d1e:	2900      	cmp	r1, #0
 8012d20:	d136      	bne.n	8012d90 <wc_ed25519_verify_msg_ex+0x13c>
        for (--i; i > ED25519_SIG_LOW_ORDER_IDX; i--) {
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d1f9      	bne.n	8012d1a <wc_ed25519_verify_msg_ex+0xc6>
 8012d26:	4a35      	ldr	r2, [pc, #212]	; (8012dfc <wc_ed25519_verify_msg_ex+0x1a8>)
 8012d28:	232f      	movs	r3, #47	; 0x2f
                if (sig[i] < ed25519_low_order[j])
 8012d2a:	5ce8      	ldrb	r0, [r5, r3]
 8012d2c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012d30:	4288      	cmp	r0, r1
 8012d32:	d32d      	bcc.n	8012d90 <wc_ed25519_verify_msg_ex+0x13c>
                if (sig[i] > ed25519_low_order[j])
 8012d34:	d8c0      	bhi.n	8012cb8 <wc_ed25519_verify_msg_ex+0x64>
            for (j = 0; j < (int)sizeof(ed25519_low_order); j++, i--) {
 8012d36:	3b01      	subs	r3, #1
 8012d38:	2b1f      	cmp	r3, #31
 8012d3a:	d1f6      	bne.n	8012d2a <wc_ed25519_verify_msg_ex+0xd6>
 8012d3c:	e7bc      	b.n	8012cb8 <wc_ed25519_verify_msg_ex+0x64>
    return wc_Sha512Update(sha, data, len);
 8012d3e:	4930      	ldr	r1, [pc, #192]	; (8012e00 <wc_ed25519_verify_msg_ex+0x1ac>)
 8012d40:	2220      	movs	r2, #32
 8012d42:	a860      	add	r0, sp, #384	; 0x180
 8012d44:	f7fd f9a0 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012d48:	4604      	mov	r4, r0
 8012d4a:	b9c8      	cbnz	r0, 8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	a91a      	add	r1, sp, #104	; 0x68
 8012d50:	a860      	add	r0, sp, #384	; 0x180
 8012d52:	f7fd f999 	bl	8010088 <wc_Sha512Update>
        if (ret == 0)
 8012d56:	4604      	mov	r4, r0
 8012d58:	b990      	cbnz	r0, 8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    return wc_Sha512Update(sha, data, len);
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	a938      	add	r1, sp, #224	; 0xe0
 8012d5e:	a860      	add	r0, sp, #384	; 0x180
 8012d60:	f7fd f992 	bl	8010088 <wc_Sha512Update>
        if (ret == 0 && context != NULL)
 8012d64:	4604      	mov	r4, r0
 8012d66:	b958      	cbnz	r0, 8012d80 <wc_ed25519_verify_msg_ex+0x12c>
 8012d68:	f1b9 0f00 	cmp.w	r9, #0
 8012d6c:	d0b2      	beq.n	8012cd4 <wc_ed25519_verify_msg_ex+0x80>
    return wc_Sha512Update(sha, data, len);
 8012d6e:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
 8012d72:	4649      	mov	r1, r9
 8012d74:	a860      	add	r0, sp, #384	; 0x180
 8012d76:	f7fd f987 	bl	8010088 <wc_Sha512Update>
    if (ret == 0)
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	d0a9      	beq.n	8012cd4 <wc_ed25519_verify_msg_ex+0x80>
    wc_Sha512Free(sha);
 8012d80:	a860      	add	r0, sp, #384	; 0x180
 8012d82:	f7fd f9f0 	bl	8010166 <wc_Sha512Free>
#ifndef WOLFSSL_ED25519_PERSISTENT_SHA
    ed25519_hash_free(key, sha);
#endif
#endif /* WOLFSSL_SE050 */
    return ret;
}
 8012d86:	4620      	mov	r0, r4
 8012d88:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ge_frombytes_negate_vartime(&A, key->p) != 0)
 8012d90:	4631      	mov	r1, r6
 8012d92:	a838      	add	r0, sp, #224	; 0xe0
 8012d94:	f004 fc3c 	bl	8017610 <ge_frombytes_negate_vartime>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d18d      	bne.n	8012cb8 <wc_ed25519_verify_msg_ex+0x64>
    int ret = wc_Sha512Final(sha, hash);
 8012d9c:	a90a      	add	r1, sp, #40	; 0x28
 8012d9e:	a860      	add	r0, sp, #384	; 0x180
 8012da0:	f7fd f948 	bl	8010034 <wc_Sha512Final>
    if (ret != 0)
 8012da4:	4604      	mov	r4, r0
 8012da6:	2800      	cmp	r0, #0
 8012da8:	d1ea      	bne.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    sc_reduce(h);
 8012daa:	a80a      	add	r0, sp, #40	; 0x28
 8012dac:	f002 f93e 	bl	801502c <sc_reduce>
    ret = ge_double_scalarmult_vartime(&R, h, &A, sig + (ED25519_SIG_SIZE/2));
 8012db0:	f105 0320 	add.w	r3, r5, #32
 8012db4:	aa38      	add	r2, sp, #224	; 0xe0
 8012db6:	a90a      	add	r1, sp, #40	; 0x28
 8012db8:	a81a      	add	r0, sp, #104	; 0x68
 8012dba:	f004 fa35 	bl	8017228 <ge_double_scalarmult_vartime>
    if (ret != 0)
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d1dd      	bne.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
    ge_tobytes(rcheck, &R);
 8012dc4:	a91a      	add	r1, sp, #104	; 0x68
 8012dc6:	a802      	add	r0, sp, #8
 8012dc8:	f004 fca4 	bl	8017714 <ge_tobytes>
    for (i = 0; i < length; i++) {
 8012dcc:	1e6a      	subs	r2, r5, #1
 8012dce:	ab02      	add	r3, sp, #8
 8012dd0:	351f      	adds	r5, #31
        compareSum |= a[i] ^ b[i];
 8012dd2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012dd6:	f813 1b01 	ldrb.w	r1, [r3], #1
    for (i = 0; i < length; i++) {
 8012dda:	4295      	cmp	r5, r2
        compareSum |= a[i] ^ b[i];
 8012ddc:	ea81 0100 	eor.w	r1, r1, r0
 8012de0:	ea44 0401 	orr.w	r4, r4, r1
    for (i = 0; i < length; i++) {
 8012de4:	d1f5      	bne.n	8012dd2 <wc_ed25519_verify_msg_ex+0x17e>
    if (ret != 0) {
 8012de6:	b91c      	cbnz	r4, 8012df0 <wc_ed25519_verify_msg_ex+0x19c>
        *res = 1;
 8012de8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012dea:	2301      	movs	r3, #1
 8012dec:	6013      	str	r3, [r2, #0]
 8012dee:	e7c7      	b.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
        ret = SIG_VERIFY_E;
 8012df0:	f06f 04e4 	mvn.w	r4, #228	; 0xe4
 8012df4:	e7c4      	b.n	8012d80 <wc_ed25519_verify_msg_ex+0x12c>
        return BAD_FUNC_ARG;
 8012df6:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8012dfa:	e7c4      	b.n	8012d86 <wc_ed25519_verify_msg_ex+0x132>
 8012dfc:	08022d29 	.word	0x08022d29
 8012e00:	08022d08 	.word	0x08022d08

08012e04 <wc_ed25519_verify_msg>:
   key     Ed25519 public key
   return  0 and res of 1 on success
*/
int wc_ed25519_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
                          word32 msgLen, int* res, ed25519_key* key)
{
 8012e04:	b510      	push	{r4, lr}
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 8012e06:	2400      	movs	r4, #0
{
 8012e08:	b086      	sub	sp, #24
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 8012e0a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8012e0e:	24ff      	movs	r4, #255	; 0xff
 8012e10:	9402      	str	r4, [sp, #8]
 8012e12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012e14:	9401      	str	r4, [sp, #4]
 8012e16:	9c08      	ldr	r4, [sp, #32]
 8012e18:	9400      	str	r4, [sp, #0]
 8012e1a:	f7ff ff1b 	bl	8012c54 <wc_ed25519_verify_msg_ex>
                                    (byte)Ed25519, NULL, 0);
}
 8012e1e:	b006      	add	sp, #24
 8012e20:	bd10      	pop	{r4, pc}

08012e22 <wc_ed25519ctx_verify_msg>:
   return  0 and res of 1 on success
*/
int wc_ed25519ctx_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
                             word32 msgLen, int* res, ed25519_key* key,
                             const byte* context, byte contextLen)
{
 8012e22:	b510      	push	{r4, lr}
 8012e24:	b086      	sub	sp, #24
    return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 8012e26:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 8012e2a:	9404      	str	r4, [sp, #16]
 8012e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e2e:	9403      	str	r4, [sp, #12]
 8012e30:	2400      	movs	r4, #0
 8012e32:	9402      	str	r4, [sp, #8]
 8012e34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012e36:	9401      	str	r4, [sp, #4]
 8012e38:	9c08      	ldr	r4, [sp, #32]
 8012e3a:	9400      	str	r4, [sp, #0]
 8012e3c:	f7ff ff0a 	bl	8012c54 <wc_ed25519_verify_msg_ex>
                                    Ed25519ctx, context, contextLen);
}
 8012e40:	b006      	add	sp, #24
 8012e42:	bd10      	pop	{r4, pc}

08012e44 <wc_ed25519ph_verify_hash>:
   return  0 and res of 1 on success
*/
int wc_ed25519ph_verify_hash(const byte* sig, word32 sigLen, const byte* hash,
                             word32 hashLen, int* res, ed25519_key* key,
                             const byte* context, byte contextLen)
{
 8012e44:	b510      	push	{r4, lr}
 8012e46:	b086      	sub	sp, #24
    return wc_ed25519_verify_msg_ex(sig, sigLen, hash, hashLen, res, key,
 8012e48:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 8012e4c:	9404      	str	r4, [sp, #16]
 8012e4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e50:	9403      	str	r4, [sp, #12]
 8012e52:	2401      	movs	r4, #1
 8012e54:	9402      	str	r4, [sp, #8]
 8012e56:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012e58:	9401      	str	r4, [sp, #4]
 8012e5a:	9c08      	ldr	r4, [sp, #32]
 8012e5c:	9400      	str	r4, [sp, #0]
 8012e5e:	f7ff fef9 	bl	8012c54 <wc_ed25519_verify_msg_ex>
                                    Ed25519ph, context, contextLen);
}
 8012e62:	b006      	add	sp, #24
 8012e64:	bd10      	pop	{r4, pc}

08012e66 <wc_ed25519ph_verify_msg>:
   return  0 and res of 1 on success
*/
int wc_ed25519ph_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
                            word32 msgLen, int* res, ed25519_key* key,
                            const byte* context, byte contextLen)
{
 8012e66:	b570      	push	{r4, r5, r6, lr}
 8012e68:	b096      	sub	sp, #88	; 0x58
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012e6e:	460d      	mov	r5, r1
    int  ret;
    byte hash[WC_SHA512_DIGEST_SIZE];

    ret = ed25519_hash(key, msg, msgLen, hash);
 8012e70:	4630      	mov	r0, r6
{
 8012e72:	4611      	mov	r1, r2
 8012e74:	461a      	mov	r2, r3
    ret = ed25519_hash(key, msg, msgLen, hash);
 8012e76:	ab06      	add	r3, sp, #24
 8012e78:	f7ff fd17 	bl	80128aa <ed25519_hash>
    if (ret != 0)
 8012e7c:	b978      	cbnz	r0, 8012e9e <wc_ed25519ph_verify_msg+0x38>
        return ret;

    return wc_ed25519_verify_msg_ex(sig, sigLen, hash, sizeof(hash), res, key,
 8012e7e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8012e82:	9304      	str	r3, [sp, #16]
 8012e84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012e86:	9303      	str	r3, [sp, #12]
 8012e88:	2301      	movs	r3, #1
 8012e8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8012e8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	aa06      	add	r2, sp, #24
 8012e94:	2340      	movs	r3, #64	; 0x40
 8012e96:	4629      	mov	r1, r5
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f7ff fedb 	bl	8012c54 <wc_ed25519_verify_msg_ex>
                                    Ed25519ph, context, contextLen);
}
 8012e9e:	b016      	add	sp, #88	; 0x58
 8012ea0:	bd70      	pop	{r4, r5, r6, pc}

08012ea2 <wc_ed25519_init_ex>:
#endif /* HAVE_ED25519_VERIFY */


/* initialize information and memory for key */
int wc_ed25519_init_ex(ed25519_key* key, void* heap, int devId)
{
 8012ea2:	b538      	push	{r3, r4, r5, lr}
 8012ea4:	460d      	mov	r5, r1
    if (key == NULL)
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	b140      	cbz	r0, 8012ebc <wc_ed25519_init_ex+0x1a>
        return BAD_FUNC_ARG;

    /* for init, ensure the key is zeroed*/
    XMEMSET(key, 0, sizeof(ed25519_key));
 8012eaa:	2268      	movs	r2, #104	; 0x68
 8012eac:	2100      	movs	r1, #0
 8012eae:	f008 f8bf 	bl	801b030 <memset>
#ifdef WOLF_CRYPTO_CB
    key->devId = devId;
#else
    (void)devId;
#endif
    key->heap = heap;
 8012eb2:	6665      	str	r5, [r4, #100]	; 0x64

#ifndef FREESCALE_LTC_ECC
    fe_init();
 8012eb4:	f000 f96b 	bl	801318e <fe_init>
#endif

#ifdef WOLFSSL_ED25519_PERSISTENT_SHA
    return ed25519_hash_init(key, &key->sha);
#else /* !WOLFSSL_ED25519_PERSISTENT_SHA */
    return 0;
 8012eb8:	2000      	movs	r0, #0
#endif /* WOLFSSL_ED25519_PERSISTENT_SHA */
}
 8012eba:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
 8012ebc:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012ec0:	e7fb      	b.n	8012eba <wc_ed25519_init_ex+0x18>

08012ec2 <wc_ed25519_init>:

int wc_ed25519_init(ed25519_key* key)
{
    return wc_ed25519_init_ex(key, NULL, INVALID_DEVID);
 8012ec2:	f06f 0201 	mvn.w	r2, #1
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	f7ff bfeb 	b.w	8012ea2 <wc_ed25519_init_ex>

08012ecc <wc_ed25519_free>:
}

/* clear memory of key */
void wc_ed25519_free(ed25519_key* key)
{
    if (key == NULL)
 8012ecc:	b120      	cbz	r0, 8012ed8 <wc_ed25519_free+0xc>
 8012ece:	f100 0368 	add.w	r3, r0, #104	; 0x68
    while (len--) *z++ = 0;
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	4298      	cmp	r0, r3
 8012ed6:	d100      	bne.n	8012eda <wc_ed25519_free+0xe>

    ForceZero(key, sizeof(ed25519_key));
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(key, sizeof(ed25519_key));
#endif
}
 8012ed8:	4770      	bx	lr
 8012eda:	f800 2b01 	strb.w	r2, [r0], #1
 8012ede:	e7f9      	b.n	8012ed4 <wc_ed25519_free+0x8>

08012ee0 <wc_ed25519_export_public>:
    outLen should contain the size of out buffer when input. outLen is than set
    to the final output length.
    returns 0 on success
 */
int wc_ed25519_export_public(ed25519_key* key, byte* out, word32* outLen)
{
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	460c      	mov	r4, r1
    /* sanity check on arguments */
    if (key == NULL || out == NULL || outLen == NULL)
 8012ee6:	4601      	mov	r1, r0
 8012ee8:	b178      	cbz	r0, 8012f0a <wc_ed25519_export_public+0x2a>
 8012eea:	b174      	cbz	r4, 8012f0a <wc_ed25519_export_public+0x2a>
 8012eec:	b16a      	cbz	r2, 8012f0a <wc_ed25519_export_public+0x2a>
        return BAD_FUNC_ARG;

    if (*outLen < ED25519_PUB_KEY_SIZE) {
 8012eee:	6812      	ldr	r2, [r2, #0]
 8012ef0:	2a1f      	cmp	r2, #31
 8012ef2:	f04f 0220 	mov.w	r2, #32
        *outLen = ED25519_PUB_KEY_SIZE;
 8012ef6:	601a      	str	r2, [r3, #0]
    if (*outLen < ED25519_PUB_KEY_SIZE) {
 8012ef8:	d802      	bhi.n	8012f00 <wc_ed25519_export_public+0x20>
        return BUFFER_E;
 8012efa:	f06f 0083 	mvn.w	r0, #131	; 0x83

    *outLen = ED25519_PUB_KEY_SIZE;
    XMEMCPY(out, key->p, ED25519_PUB_KEY_SIZE);

    return 0;
}
 8012efe:	bd10      	pop	{r4, pc}
    XMEMCPY(out, key->p, ED25519_PUB_KEY_SIZE);
 8012f00:	4620      	mov	r0, r4
 8012f02:	f008 f86d 	bl	801afe0 <memcpy>
    return 0;
 8012f06:	2000      	movs	r0, #0
 8012f08:	e7f9      	b.n	8012efe <wc_ed25519_export_public+0x1e>
        return BAD_FUNC_ARG;
 8012f0a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012f0e:	e7f6      	b.n	8012efe <wc_ed25519_export_public+0x1e>

08012f10 <wc_ed25519_export_private_only>:
 outLen should contain the size of out buffer when input. outLen is than set
 to the final output length.
 returns 0 on success
 */
int wc_ed25519_export_private_only(ed25519_key* key, byte* out, word32* outLen)
{
 8012f10:	b510      	push	{r4, lr}
 8012f12:	4613      	mov	r3, r2
 8012f14:	460c      	mov	r4, r1
    /* sanity checks on arguments */
    if (key == NULL || out == NULL || outLen == NULL)
 8012f16:	b188      	cbz	r0, 8012f3c <wc_ed25519_export_private_only+0x2c>
 8012f18:	b181      	cbz	r1, 8012f3c <wc_ed25519_export_private_only+0x2c>
 8012f1a:	b17a      	cbz	r2, 8012f3c <wc_ed25519_export_private_only+0x2c>
        return BAD_FUNC_ARG;

    if (*outLen < ED25519_KEY_SIZE) {
 8012f1c:	6812      	ldr	r2, [r2, #0]
 8012f1e:	2a1f      	cmp	r2, #31
 8012f20:	f04f 0220 	mov.w	r2, #32
        *outLen = ED25519_KEY_SIZE;
 8012f24:	601a      	str	r2, [r3, #0]
    if (*outLen < ED25519_KEY_SIZE) {
 8012f26:	d802      	bhi.n	8012f2e <wc_ed25519_export_private_only+0x1e>
        return BUFFER_E;
 8012f28:	f06f 0083 	mvn.w	r0, #131	; 0x83

    *outLen = ED25519_KEY_SIZE;
    XMEMCPY(out, key->k, ED25519_KEY_SIZE);

    return 0;
}
 8012f2c:	bd10      	pop	{r4, pc}
    XMEMCPY(out, key->k, ED25519_KEY_SIZE);
 8012f2e:	f100 0120 	add.w	r1, r0, #32
 8012f32:	4620      	mov	r0, r4
 8012f34:	f008 f854 	bl	801afe0 <memcpy>
    return 0;
 8012f38:	2000      	movs	r0, #0
 8012f3a:	e7f7      	b.n	8012f2c <wc_ed25519_export_private_only+0x1c>
        return BAD_FUNC_ARG;
 8012f3c:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012f40:	e7f4      	b.n	8012f2c <wc_ed25519_export_private_only+0x1c>

08012f42 <wc_ed25519_check_key>:

#endif /* HAVE_ED25519_KEY_EXPORT */

/* check the private and public keys match */
int wc_ed25519_check_key(ed25519_key* key)
{
 8012f42:	b510      	push	{r4, lr}
    int ret = 0;
#ifdef HAVE_ED25519_MAKE_KEY
    ALIGN16 unsigned char pubKey[ED25519_PUB_KEY_SIZE];

    if (!key->pubKeySet)
 8012f44:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8012f48:	079b      	lsls	r3, r3, #30
{
 8012f4a:	b088      	sub	sp, #32
 8012f4c:	4604      	mov	r4, r0
    if (!key->pubKeySet)
 8012f4e:	d50a      	bpl.n	8012f66 <wc_ed25519_check_key+0x24>
        ret = PUBLIC_KEY_E;
    if (ret == 0)
        ret = wc_ed25519_make_public(key, pubKey, sizeof(pubKey));
 8012f50:	2220      	movs	r2, #32
 8012f52:	4669      	mov	r1, sp
 8012f54:	f7ff fccb 	bl	80128ee <wc_ed25519_make_public>
    if (ret == 0 && XMEMCMP(pubKey, key->p, ED25519_PUB_KEY_SIZE) != 0)
 8012f58:	b938      	cbnz	r0, 8012f6a <wc_ed25519_check_key+0x28>
 8012f5a:	2220      	movs	r2, #32
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	4668      	mov	r0, sp
 8012f60:	f008 f82e 	bl	801afc0 <memcmp>
 8012f64:	b108      	cbz	r0, 8012f6a <wc_ed25519_check_key+0x28>
        ret = PUBLIC_KEY_E;
 8012f66:	f06f 0085 	mvn.w	r0, #133	; 0x85
#else
     (void)key;
#endif /* HAVE_ED25519_MAKE_KEY */

    return ret;
}
 8012f6a:	b008      	add	sp, #32
 8012f6c:	bd10      	pop	{r4, pc}

08012f6e <wc_ed25519_import_public_ex>:
{
 8012f6e:	b570      	push	{r4, r5, r6, lr}
 8012f70:	460d      	mov	r5, r1
 8012f72:	4614      	mov	r4, r2
 8012f74:	461e      	mov	r6, r3
    if (in == NULL || key == NULL)
 8012f76:	4601      	mov	r1, r0
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	d03a      	beq.n	8012ff2 <wc_ed25519_import_public_ex+0x84>
 8012f7c:	2a00      	cmp	r2, #0
 8012f7e:	d038      	beq.n	8012ff2 <wc_ed25519_import_public_ex+0x84>
    if (inLen < ED25519_PUB_KEY_SIZE)
 8012f80:	2d1f      	cmp	r5, #31
 8012f82:	d936      	bls.n	8012ff2 <wc_ed25519_import_public_ex+0x84>
    if (in[0] == 0x40 && inLen == ED25519_PUB_KEY_SIZE + 1) {
 8012f84:	7803      	ldrb	r3, [r0, #0]
 8012f86:	2b40      	cmp	r3, #64	; 0x40
 8012f88:	d110      	bne.n	8012fac <wc_ed25519_import_public_ex+0x3e>
 8012f8a:	2d21      	cmp	r5, #33	; 0x21
 8012f8c:	d122      	bne.n	8012fd4 <wc_ed25519_import_public_ex+0x66>
        XMEMCPY(key->p, (in + 1), ED25519_PUB_KEY_SIZE);
 8012f8e:	2220      	movs	r2, #32
 8012f90:	3101      	adds	r1, #1
        XMEMCPY(key->p, in, ED25519_PUB_KEY_SIZE);
 8012f92:	4620      	mov	r0, r4
 8012f94:	f008 f824 	bl	801afe0 <memcpy>
        key->pubKeySet = 1;
 8012f98:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 8012f9c:	f042 0202 	orr.w	r2, r2, #2
        if (key->privKeySet && (!trusted)) {
 8012fa0:	07d3      	lsls	r3, r2, #31
        key->pubKeySet = 1;
 8012fa2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
        if (key->privKeySet && (!trusted)) {
 8012fa6:	d419      	bmi.n	8012fdc <wc_ed25519_import_public_ex+0x6e>
        return BAD_FUNC_ARG;
 8012fa8:	2000      	movs	r0, #0
}
 8012faa:	bd70      	pop	{r4, r5, r6, pc}
    else if (in[0] == 0x04 && inLen > 2*ED25519_PUB_KEY_SIZE) {
 8012fac:	2b04      	cmp	r3, #4
 8012fae:	d111      	bne.n	8012fd4 <wc_ed25519_import_public_ex+0x66>
 8012fb0:	2d40      	cmp	r5, #64	; 0x40
 8012fb2:	d90f      	bls.n	8012fd4 <wc_ed25519_import_public_ex+0x66>
        ret = ge_compress_key(key->p, in+1,
 8012fb4:	f100 0221 	add.w	r2, r0, #33	; 0x21
 8012fb8:	2320      	movs	r3, #32
 8012fba:	3101      	adds	r1, #1
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f004 fbc9 	bl	8017754 <ge_compress_key>
    if (ret == 0) {
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	d0e8      	beq.n	8012f98 <wc_ed25519_import_public_ex+0x2a>
        key->pubKeySet = 0;
 8012fc6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012fca:	f36f 0341 	bfc	r3, #1, #1
 8012fce:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8012fd2:	e7ea      	b.n	8012faa <wc_ed25519_import_public_ex+0x3c>
    else if (inLen == ED25519_PUB_KEY_SIZE) {
 8012fd4:	2d20      	cmp	r5, #32
 8012fd6:	d109      	bne.n	8012fec <wc_ed25519_import_public_ex+0x7e>
        XMEMCPY(key->p, in, ED25519_PUB_KEY_SIZE);
 8012fd8:	462a      	mov	r2, r5
 8012fda:	e7da      	b.n	8012f92 <wc_ed25519_import_public_ex+0x24>
        if (key->privKeySet && (!trusted)) {
 8012fdc:	2e00      	cmp	r6, #0
 8012fde:	d1e3      	bne.n	8012fa8 <wc_ed25519_import_public_ex+0x3a>
            ret = wc_ed25519_check_key(key);
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff ffae 	bl	8012f42 <wc_ed25519_check_key>
    if (ret != 0) {
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d0de      	beq.n	8012fa8 <wc_ed25519_import_public_ex+0x3a>
 8012fea:	e7ec      	b.n	8012fc6 <wc_ed25519_import_public_ex+0x58>
        ret = BAD_FUNC_ARG;
 8012fec:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012ff0:	e7e9      	b.n	8012fc6 <wc_ed25519_import_public_ex+0x58>
        return BAD_FUNC_ARG;
 8012ff2:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8012ff6:	e7d8      	b.n	8012faa <wc_ed25519_import_public_ex+0x3c>

08012ff8 <wc_ed25519_import_public>:
    return wc_ed25519_import_public_ex(in, inLen, key, 0);
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f7ff bfb8 	b.w	8012f6e <wc_ed25519_import_public_ex>

08012ffe <wc_ed25519_import_private_key_ex>:
{
 8012ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013002:	9d06      	ldr	r5, [sp, #24]
 8013004:	460c      	mov	r4, r1
 8013006:	4690      	mov	r8, r2
 8013008:	461f      	mov	r7, r3
    if (priv == NULL || key == NULL)
 801300a:	4601      	mov	r1, r0
 801300c:	b388      	cbz	r0, 8013072 <wc_ed25519_import_private_key_ex+0x74>
 801300e:	b385      	cbz	r5, 8013072 <wc_ed25519_import_private_key_ex+0x74>
    if (privSz != ED25519_KEY_SIZE && privSz != ED25519_PRV_KEY_SIZE)
 8013010:	2c20      	cmp	r4, #32
 8013012:	d001      	beq.n	8013018 <wc_ed25519_import_private_key_ex+0x1a>
 8013014:	2c40      	cmp	r4, #64	; 0x40
 8013016:	d12c      	bne.n	8013072 <wc_ed25519_import_private_key_ex+0x74>
    if (pub == NULL) {
 8013018:	f1b8 0f00 	cmp.w	r8, #0
 801301c:	d127      	bne.n	801306e <wc_ed25519_import_private_key_ex+0x70>
        if (pubSz != 0)
 801301e:	bb47      	cbnz	r7, 8013072 <wc_ed25519_import_private_key_ex+0x74>
        if (privSz != ED25519_PRV_KEY_SIZE)
 8013020:	2c40      	cmp	r4, #64	; 0x40
 8013022:	d126      	bne.n	8013072 <wc_ed25519_import_private_key_ex+0x74>
        pub = priv + ED25519_KEY_SIZE;
 8013024:	f101 0820 	add.w	r8, r1, #32
        pubSz = ED25519_PUB_KEY_SIZE;
 8013028:	2720      	movs	r7, #32
    XMEMCPY(key->k, priv, ED25519_KEY_SIZE);
 801302a:	f105 0620 	add.w	r6, r5, #32
 801302e:	2220      	movs	r2, #32
 8013030:	4630      	mov	r0, r6
 8013032:	f007 ffd5 	bl	801afe0 <memcpy>
    key->privKeySet = 1;
 8013036:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 801303a:	f043 0301 	orr.w	r3, r3, #1
 801303e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    ret = wc_ed25519_import_public_ex(pub, pubSz, key, trusted);
 8013042:	462a      	mov	r2, r5
 8013044:	9b07      	ldr	r3, [sp, #28]
 8013046:	4639      	mov	r1, r7
 8013048:	4640      	mov	r0, r8
 801304a:	f7ff ff90 	bl	8012f6e <wc_ed25519_import_public_ex>
    if (ret != 0) {
 801304e:	4604      	mov	r4, r0
 8013050:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8013054:	b19c      	cbz	r4, 801307e <wc_ed25519_import_private_key_ex+0x80>
        key->privKeySet = 0;
 8013056:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 801305a:	f36f 0300 	bfc	r3, #0, #1
 801305e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8013062:	2300      	movs	r3, #0
 8013064:	4286      	cmp	r6, r0
 8013066:	d107      	bne.n	8013078 <wc_ed25519_import_private_key_ex+0x7a>
}
 8013068:	4620      	mov	r0, r4
 801306a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (pubSz < ED25519_PUB_KEY_SIZE) {
 801306e:	2f1f      	cmp	r7, #31
 8013070:	d8db      	bhi.n	801302a <wc_ed25519_import_private_key_ex+0x2c>
        return BAD_FUNC_ARG;
 8013072:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8013076:	e7f7      	b.n	8013068 <wc_ed25519_import_private_key_ex+0x6a>
 8013078:	f806 3b01 	strb.w	r3, [r6], #1
 801307c:	e7f2      	b.n	8013064 <wc_ed25519_import_private_key_ex+0x66>
    XMEMCPY(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);
 801307e:	2220      	movs	r2, #32
 8013080:	4629      	mov	r1, r5
 8013082:	f007 ffad 	bl	801afe0 <memcpy>
    return ret;
 8013086:	e7ef      	b.n	8013068 <wc_ed25519_import_private_key_ex+0x6a>

08013088 <wc_ed25519_import_private_key>:
{
 8013088:	b513      	push	{r0, r1, r4, lr}
    return wc_ed25519_import_private_key_ex(priv, privSz, pub, pubSz, key, 0);
 801308a:	2400      	movs	r4, #0
 801308c:	9401      	str	r4, [sp, #4]
 801308e:	9c04      	ldr	r4, [sp, #16]
 8013090:	9400      	str	r4, [sp, #0]
 8013092:	f7ff ffb4 	bl	8012ffe <wc_ed25519_import_private_key_ex>
}
 8013096:	b002      	add	sp, #8
 8013098:	bd10      	pop	{r4, pc}

0801309a <wc_ed25519_import_private_only>:
{
 801309a:	b538      	push	{r3, r4, r5, lr}
 801309c:	460b      	mov	r3, r1
 801309e:	4614      	mov	r4, r2
    if (priv == NULL || key == NULL)
 80130a0:	4601      	mov	r1, r0
 80130a2:	b320      	cbz	r0, 80130ee <wc_ed25519_import_private_only+0x54>
 80130a4:	b31a      	cbz	r2, 80130ee <wc_ed25519_import_private_only+0x54>
    if (privSz != ED25519_KEY_SIZE)
 80130a6:	2b20      	cmp	r3, #32
 80130a8:	d121      	bne.n	80130ee <wc_ed25519_import_private_only+0x54>
    XMEMCPY(key->k, priv, ED25519_KEY_SIZE);
 80130aa:	f102 0520 	add.w	r5, r2, #32
 80130ae:	4628      	mov	r0, r5
 80130b0:	461a      	mov	r2, r3
 80130b2:	f007 ff95 	bl	801afe0 <memcpy>
    key->privKeySet = 1;
 80130b6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80130ba:	f043 0301 	orr.w	r3, r3, #1
 80130be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (key->pubKeySet) {
 80130c2:	079b      	lsls	r3, r3, #30
 80130c4:	d401      	bmi.n	80130ca <wc_ed25519_import_private_only+0x30>
    int ret = 0;
 80130c6:	2000      	movs	r0, #0
}
 80130c8:	bd38      	pop	{r3, r4, r5, pc}
        ret = wc_ed25519_check_key(key);
 80130ca:	4620      	mov	r0, r4
 80130cc:	f7ff ff39 	bl	8012f42 <wc_ed25519_check_key>
    if (ret != 0) {
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d0f8      	beq.n	80130c6 <wc_ed25519_import_private_only+0x2c>
        key->privKeySet = 0;
 80130d4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80130d8:	f36f 0300 	bfc	r3, #0, #1
 80130dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80130e0:	3440      	adds	r4, #64	; 0x40
 80130e2:	2300      	movs	r3, #0
 80130e4:	42a5      	cmp	r5, r4
 80130e6:	d0ef      	beq.n	80130c8 <wc_ed25519_import_private_only+0x2e>
 80130e8:	f805 3b01 	strb.w	r3, [r5], #1
 80130ec:	e7fa      	b.n	80130e4 <wc_ed25519_import_private_only+0x4a>
        return BAD_FUNC_ARG;
 80130ee:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80130f2:	e7e9      	b.n	80130c8 <wc_ed25519_import_private_only+0x2e>

080130f4 <wc_ed25519_size>:

/* returns the private key size (secret only) in bytes */
int wc_ed25519_size(ed25519_key* key)
{
    if (key == NULL)
        return BAD_FUNC_ARG;
 80130f4:	2800      	cmp	r0, #0

    return ED25519_KEY_SIZE;
}
 80130f6:	bf14      	ite	ne
 80130f8:	2020      	movne	r0, #32
 80130fa:	f06f 00ac 	mvneq.w	r0, #172	; 0xac
 80130fe:	4770      	bx	lr

08013100 <wc_ed25519_sig_size>:
 8013100:	2800      	cmp	r0, #0
 8013102:	bf14      	ite	ne
 8013104:	2040      	movne	r0, #64	; 0x40
 8013106:	f06f 00ac 	mvneq.w	r0, #172	; 0xac
 801310a:	4770      	bx	lr

0801310c <wc_GetErrorString>:

#ifndef NO_ERROR_STRINGS
WOLFSSL_ABI
const char* wc_GetErrorString(int error)
{
    switch (error) {
 801310c:	f200 102b 	addw	r0, r0, #299	; 0x12b
 8013110:	28c6      	cmp	r0, #198	; 0xc6
 8013112:	bf9a      	itte	ls
 8013114:	4b02      	ldrls	r3, [pc, #8]	; (8013120 <wc_GetErrorString+0x14>)
 8013116:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801311a:	4802      	ldrhi	r0, [pc, #8]	; (8013124 <wc_GetErrorString+0x18>)

    default:
        return "unknown error number";

    }
}
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	08022d50 	.word	0x08022d50
 8013124:	08022d39 	.word	0x08022d39

08013128 <wc_ErrorString>:

void wc_ErrorString(int error, char* buffer)
{
 8013128:	b510      	push	{r4, lr}
    XSTRNCPY(buffer, wc_GetErrorString(error), WOLFSSL_MAX_ERROR_SZ);
 801312a:	f7ff ffef 	bl	801310c <wc_GetErrorString>
{
 801312e:	460c      	mov	r4, r1
    XSTRNCPY(buffer, wc_GetErrorString(error), WOLFSSL_MAX_ERROR_SZ);
 8013130:	2250      	movs	r2, #80	; 0x50
 8013132:	4601      	mov	r1, r0
 8013134:	4620      	mov	r0, r4
 8013136:	f008 f8f2 	bl	801b31e <strncpy>
    buffer[WOLFSSL_MAX_ERROR_SZ-1] = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
}
 8013140:	bd10      	pop	{r4, pc}

08013142 <load_3>:
word64 load_3(const unsigned char *in)
{
  word64 result;
  result = (word64) in[0];
  result |= ((word64) in[1]) << 8;
  result |= ((word64) in[2]) << 16;
 8013142:	7883      	ldrb	r3, [r0, #2]
  result |= ((word64) in[1]) << 8;
 8013144:	7841      	ldrb	r1, [r0, #1]
  result = (word64) in[0];
 8013146:	7802      	ldrb	r2, [r0, #0]
  result |= ((word64) in[2]) << 16;
 8013148:	041b      	lsls	r3, r3, #16
 801314a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  return result;
}
 801314e:	ea43 0002 	orr.w	r0, r3, r2
 8013152:	2100      	movs	r1, #0
 8013154:	4770      	bx	lr

08013156 <load_4>:
  result = (word64) in[0];
  result |= ((word64) in[1]) << 8;
  result |= ((word64) in[2]) << 16;
  result |= ((word64) in[3]) << 24;
  return result;
}
 8013156:	6800      	ldr	r0, [r0, #0]
 8013158:	2100      	movs	r1, #0
 801315a:	4770      	bx	lr

0801315c <fe_1>:
*/

void fe_1(fe h)
{
  h[0] = 1;
  h[1] = 0;
 801315c:	2300      	movs	r3, #0
 801315e:	2201      	movs	r2, #1
 8013160:	e9c0 2300 	strd	r2, r3, [r0]
  h[2] = 0;
  h[3] = 0;
 8013164:	e9c0 3302 	strd	r3, r3, [r0, #8]
  h[4] = 0;
  h[5] = 0;
 8013168:	e9c0 3304 	strd	r3, r3, [r0, #16]
  h[6] = 0;
  h[7] = 0;
 801316c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  h[8] = 0;
  h[9] = 0;
 8013170:	e9c0 3308 	strd	r3, r3, [r0, #32]
}
 8013174:	4770      	bx	lr

08013176 <fe_0>:
h = 0
*/

void fe_0(fe h)
{
  h[0] = 0;
 8013176:	2300      	movs	r3, #0
  h[1] = 0;
 8013178:	e9c0 3300 	strd	r3, r3, [r0]
  h[2] = 0;
  h[3] = 0;
 801317c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  h[4] = 0;
  h[5] = 0;
 8013180:	e9c0 3304 	strd	r3, r3, [r0, #16]
  h[6] = 0;
  h[7] = 0;
 8013184:	e9c0 3306 	strd	r3, r3, [r0, #24]
  h[8] = 0;
  h[9] = 0;
 8013188:	e9c0 3308 	strd	r3, r3, [r0, #32]
}
 801318c:	4770      	bx	lr

0801318e <fe_init>:
     (defined(HAVE_ED25519) && !defined(ED25519_SMALL))) && \
    !defined(FREESCALE_LTC_ECC)
/* to be Complementary to fe_low_mem.c */
void fe_init(void)
{
}
 801318e:	4770      	bx	lr

08013190 <fe_sq>:
/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h,const fe f)
{
 8013190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013194:	460b      	mov	r3, r1
  sword32 f0 = f[0];
  sword32 f1 = f[1];
 8013196:	e9d1 5200 	ldrd	r5, r2, [r1]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 801319a:	e9d1 c102 	ldrd	ip, r1, [r1, #8]
{
 801319e:	b097      	sub	sp, #92	; 0x5c
  sword32 f5_2 = 2 * f5;
  sword32 f6_2 = 2 * f6;
  sword32 f7_2 = 2 * f7;
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 80131a0:	f04f 0926 	mov.w	r9, #38	; 0x26
  sword32 f3 = f[3];
 80131a4:	9107      	str	r1, [sp, #28]
  sword32 f5 = f[5];
 80131a6:	e9d3 e104 	ldrd	lr, r1, [r3, #16]
 80131aa:	9101      	str	r1, [sp, #4]
  sword32 f7 = f[7];
 80131ac:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
 80131b0:	9103      	str	r1, [sp, #12]
  sword32 f8 = f[8];
 80131b2:	6a19      	ldr	r1, [r3, #32]
  sword32 f9 = f[9];
 80131b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b6:	9308      	str	r3, [sp, #32]
  sword32 f2_2 = 2 * f2;
 80131b8:	ea4f 034c 	mov.w	r3, ip, lsl #1
 80131bc:	9305      	str	r3, [sp, #20]
  sword32 f3_2 = 2 * f3;
 80131be:	9b07      	ldr	r3, [sp, #28]
  sword32 f8 = f[8];
 80131c0:	9104      	str	r1, [sp, #16]
  sword32 f3_2 = 2 * f3;
 80131c2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
  sword32 f4_2 = 2 * f4;
 80131c6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80131ca:	930b      	str	r3, [sp, #44]	; 0x2c
  sword32 f5_2 = 2 * f5;
 80131cc:	9b01      	ldr	r3, [sp, #4]
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 80131ce:	9903      	ldr	r1, [sp, #12]
{
 80131d0:	9000      	str	r0, [sp, #0]
  sword32 f5_2 = 2 * f5;
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	9302      	str	r3, [sp, #8]
  sword32 f7_2 = 2 * f7;
 80131d6:	9b03      	ldr	r3, [sp, #12]
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 80131d8:	9808      	ldr	r0, [sp, #32]
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 80131da:	9e01      	ldr	r6, [sp, #4]
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 80131dc:	fb09 f101 	mul.w	r1, r9, r1
 80131e0:	9106      	str	r1, [sp, #24]
  sword32 f7_2 = 2 * f7;
 80131e2:	005b      	lsls	r3, r3, #1
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 80131e4:	9904      	ldr	r1, [sp, #16]
  sword32 f7_2 = 2 * f7;
 80131e6:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 f1_2 = 2 * f1;
 80131e8:	ea4f 0842 	mov.w	r8, r2, lsl #1
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 80131ec:	fb09 f000 	mul.w	r0, r9, r0
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 80131f0:	2313      	movs	r3, #19
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 80131f2:	4359      	muls	r1, r3
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 80131f4:	fb03 fa04 	mul.w	sl, r3, r4
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 80131f8:	fb09 f906 	mul.w	r9, r9, r6
  sword64 f1f4_2  = f1_2 * (sword64) f4;
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
  sword64 f1f6_2  = f1_2 * (sword64) f6;
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
  sword64 f1f8_2  = f1_2 * (sword64) f8;
  sword64 f1f9_76 = f1_2 * (sword64) f9_38;
 80131fc:	fb88 3600 	smull	r3, r6, r8, r0
  sword32 f0_2 = 2 * f0;
 8013200:	006f      	lsls	r7, r5, #1
  sword64 f7f8_38 = f7_2 * (sword64) f8_19;
  sword64 f7f9_76 = f7_2 * (sword64) f9_38;
  sword64 f8f8_19 = f8   * (sword64) f8_19;
  sword64 f8f9_38 = f8   * (sword64) f9_38;
  sword64 f9f9_38 = f9   * (sword64) f9_38;
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 8013202:	fbc5 3605 	smlal	r3, r6, r5, r5
 8013206:	ea4f 054c 	mov.w	r5, ip, lsl #1
 801320a:	fbc5 3601 	smlal	r3, r6, r5, r1
 801320e:	9d06      	ldr	r5, [sp, #24]
 8013210:	fbcb 3605 	smlal	r3, r6, fp, r5
 8013214:	ea4f 054e 	mov.w	r5, lr, lsl #1
 8013218:	fbc5 360a 	smlal	r3, r6, r5, sl
 801321c:	461d      	mov	r5, r3
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	fbc3 5609 	smlal	r5, r6, r3, r9
 8013224:	950a      	str	r5, [sp, #40]	; 0x28
  sword64 f2f9_38 = f2   * (sword64) f9_38;
 8013226:	fb8c 5900 	smull	r5, r9, ip, r0
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
 801322a:	9b06      	ldr	r3, [sp, #24]
 801322c:	fbc7 5902 	smlal	r5, r9, r7, r2
 8013230:	fbcb 5901 	smlal	r5, r9, fp, r1
 8013234:	fbce 5903 	smlal	r5, r9, lr, r3
 8013238:	9b02      	ldr	r3, [sp, #8]
 801323a:	fbc3 590a 	smlal	r5, r9, r3, sl
 801323e:	e9cd 590c 	strd	r5, r9, [sp, #48]	; 0x30
  sword64 f1f1_2  = f1_2 * (sword64) f1;
 8013242:	fb82 5308 	smull	r5, r3, r2, r8
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 8013246:	fbc7 530c 	smlal	r5, r3, r7, ip
 801324a:	fbcb 5300 	smlal	r5, r3, fp, r0
 801324e:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8013252:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8013256:	fbc1 5302 	smlal	r5, r3, r1, r2
 801325a:	9a02      	ldr	r2, [sp, #8]
 801325c:	fbc2 5309 	smlal	r5, r3, r2, r9
 8013260:	461a      	mov	r2, r3
 8013262:	fbc4 520a 	smlal	r5, r2, r4, sl
 8013266:	e9cd 520e 	strd	r5, r2, [sp, #56]	; 0x38
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 801326a:	9a07      	ldr	r2, [sp, #28]
  sword64 f1f2_2  = f1_2 * (sword64) f2;
 801326c:	fb8c 5308 	smull	r5, r3, ip, r8
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 8013270:	fbc7 5302 	smlal	r5, r3, r7, r2
 8013274:	9a02      	ldr	r2, [sp, #8]
 8013276:	fbce 5300 	smlal	r5, r3, lr, r0
 801327a:	fbc2 5301 	smlal	r5, r3, r2, r1
 801327e:	461a      	mov	r2, r3
 8013280:	fbc4 5209 	smlal	r5, r2, r4, r9
 8013284:	e9cd 5210 	strd	r5, r2, [sp, #64]	; 0x40
  sword64 f1f3_4  = f1_2 * (sword64) f3_2;
 8013288:	fb88 2a0b 	smull	r2, sl, r8, fp
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 801328c:	fbc7 2a0e 	smlal	r2, sl, r7, lr
 8013290:	fbcc 2a0c 	smlal	r2, sl, ip, ip
 8013294:	f8dd c008 	ldr.w	ip, [sp, #8]
  sword32 f6_2 = 2 * f6;
 8013298:	0065      	lsls	r5, r4, #1
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 801329a:	fbcc 2a00 	smlal	r2, sl, ip, r0
 801329e:	fbc1 2a05 	smlal	r2, sl, r1, r5
 80132a2:	9d03      	ldr	r5, [sp, #12]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 80132a4:	f8dd c014 	ldr.w	ip, [sp, #20]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 80132a8:	fbc5 2a09 	smlal	r2, sl, r5, r9
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 80132ac:	9d01      	ldr	r5, [sp, #4]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 80132ae:	9206      	str	r2, [sp, #24]
  sword64 f1f4_2  = f1_2 * (sword64) f4;
 80132b0:	fb8e 3208 	smull	r3, r2, lr, r8
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 80132b4:	fbc7 3205 	smlal	r3, r2, r7, r5
 80132b8:	9d07      	ldr	r5, [sp, #28]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80132ba:	f8dd 9010 	ldr.w	r9, [sp, #16]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 80132be:	fbc5 320c 	smlal	r3, r2, r5, ip
 80132c2:	fbc4 3200 	smlal	r3, r2, r4, r0
 80132c6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80132ca:	461d      	mov	r5, r3
 80132cc:	fbcc 5201 	smlal	r5, r2, ip, r1
 80132d0:	9512      	str	r5, [sp, #72]	; 0x48
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 80132d2:	9d02      	ldr	r5, [sp, #8]
 80132d4:	fb88 3c05 	smull	r3, ip, r8, r5
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80132d8:	9d05      	ldr	r5, [sp, #20]
 80132da:	fbc7 3c04 	smlal	r3, ip, r7, r4
 80132de:	fbce 3c05 	smlal	r3, ip, lr, r5
 80132e2:	9d07      	ldr	r5, [sp, #28]
 80132e4:	fbc5 3c0b 	smlal	r3, ip, r5, fp
 80132e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80132ea:	fbc5 3c00 	smlal	r3, ip, r5, r0
 80132ee:	461d      	mov	r5, r3
 80132f0:	fbc9 5c01 	smlal	r5, ip, r9, r1
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 80132f4:	9903      	ldr	r1, [sp, #12]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80132f6:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 80132fa:	fb84 3c08 	smull	r3, ip, r4, r8
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80132fe:	9507      	str	r5, [sp, #28]
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 8013300:	fbc7 3c01 	smlal	r3, ip, r7, r1
 8013304:	9d05      	ldr	r5, [sp, #20]
 8013306:	9901      	ldr	r1, [sp, #4]
 8013308:	fbc1 3c05 	smlal	r3, ip, r1, r5
 801330c:	fbce 3c0b 	smlal	r3, ip, lr, fp
 8013310:	4619      	mov	r1, r3
 8013312:	fbc9 1c00 	smlal	r1, ip, r9, r0
 8013316:	e9cd 1c14 	strd	r1, ip, [sp, #80]	; 0x50
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 801331a:	9909      	ldr	r1, [sp, #36]	; 0x24
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 801331c:	9d05      	ldr	r5, [sp, #20]
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801331e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 8013320:	fb88 1c01 	smull	r1, ip, r8, r1
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 8013324:	fbc7 1c09 	smlal	r1, ip, r7, r9
 8013328:	fbc4 1c05 	smlal	r1, ip, r4, r5
 801332c:	9d02      	ldr	r5, [sp, #8]
 801332e:	fbcb 1c05 	smlal	r1, ip, fp, r5
 8013332:	9d08      	ldr	r5, [sp, #32]
 8013334:	fbce 1c0e 	smlal	r1, ip, lr, lr
 8013338:	fbc5 1c00 	smlal	r1, ip, r5, r0
 801333c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 8013340:	fb89 0c08 	smull	r0, ip, r9, r8
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 8013344:	468e      	mov	lr, r1
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 8013346:	fbc7 0c05 	smlal	r0, ip, r7, r5
 801334a:	9903      	ldr	r1, [sp, #12]
 801334c:	9d05      	ldr	r5, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 801334e:	9f07      	ldr	r7, [sp, #28]
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 8013350:	fbc1 0c05 	smlal	r0, ip, r1, r5
 8013354:	fbc4 0c0b 	smlal	r0, ip, r4, fp
 8013358:	9901      	ldr	r1, [sp, #4]
 801335a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801335c:	fbc1 0c04 	smlal	r0, ip, r1, r4
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013360:	990a      	ldr	r1, [sp, #40]	; 0x28
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 8013362:	9008      	str	r0, [sp, #32]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013364:	f111 7b00 	adds.w	fp, r1, #33554432	; 0x2000000
 8013368:	f146 0500 	adc.w	r5, r6, #0
 801336c:	990c      	ldr	r1, [sp, #48]	; 0x30
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 801336e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013372:	ea4f 689b 	mov.w	r8, fp, lsr #26
 8013376:	ea48 1885 	orr.w	r8, r8, r5, lsl #6
 801337a:	eb18 0801 	adds.w	r8, r8, r1
 801337e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013380:	f00b 4b7c 	and.w	fp, fp, #4227858432	; 0xfc000000
 8013384:	eb43 69a5 	adc.w	r9, r3, r5, asr #26
 8013388:	ebb1 0b0b 	subs.w	fp, r1, fp
 801338c:	eb66 0105 	sbc.w	r1, r6, r5
 8013390:	910a      	str	r1, [sp, #40]	; 0x28
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013392:	9906      	ldr	r1, [sp, #24]
 8013394:	f111 7400 	adds.w	r4, r1, #33554432	; 0x2000000
 8013398:	f14a 0300 	adc.w	r3, sl, #0
 801339c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801339e:	0ea0      	lsrs	r0, r4, #26
 80133a0:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 80133a4:	1840      	adds	r0, r0, r1
 80133a6:	eb42 6ca3 	adc.w	ip, r2, r3, asr #26
 80133aa:	9a06      	ldr	r2, [sp, #24]
 80133ac:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80133b0:	1b14      	subs	r4, r2, r4
 80133b2:	eb6a 0103 	sbc.w	r1, sl, r3
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 80133b6:	f118 7680 	adds.w	r6, r8, #16777216	; 0x1000000
 80133ba:	f149 0300 	adc.w	r3, r9, #0
 80133be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133c0:	0e75      	lsrs	r5, r6, #25
 80133c2:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
 80133c6:	18aa      	adds	r2, r5, r2
 80133c8:	9203      	str	r2, [sp, #12]
 80133ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80133cc:	f006 457e 	and.w	r5, r6, #4261412864	; 0xfe000000
 80133d0:	eb42 6363 	adc.w	r3, r2, r3, asr #25
 80133d4:	ebb8 0205 	subs.w	r2, r8, r5
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80133d8:	f110 7580 	adds.w	r5, r0, #16777216	; 0x1000000
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 80133dc:	920c      	str	r2, [sp, #48]	; 0x30
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80133de:	ea4f 6655 	mov.w	r6, r5, lsr #25
 80133e2:	f14c 0200 	adc.w	r2, ip, #0
 80133e6:	ea46 16c2 	orr.w	r6, r6, r2, lsl #7
 80133ea:	19f6      	adds	r6, r6, r7
 80133ec:	9604      	str	r6, [sp, #16]
 80133ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80133f0:	f005 457e 	and.w	r5, r5, #4261412864	; 0xfe000000
 80133f4:	eb46 6c62 	adc.w	ip, r6, r2, asr #25
 80133f8:	1b42      	subs	r2, r0, r5
 80133fa:	9207      	str	r2, [sp, #28]

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80133fc:	9a03      	ldr	r2, [sp, #12]
 80133fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013400:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8013404:	9201      	str	r2, [sp, #4]
 8013406:	f143 0300 	adc.w	r3, r3, #0
 801340a:	0e92      	lsrs	r2, r2, #26
 801340c:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8013410:	1812      	adds	r2, r2, r0
 8013412:	9205      	str	r2, [sp, #20]
 8013414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013416:	eb42 63a3 	adc.w	r3, r2, r3, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801341a:	9a04      	ldr	r2, [sp, #16]

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801341c:	9d08      	ldr	r5, [sp, #32]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801341e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8013422:	9202      	str	r2, [sp, #8]
 8013424:	f14c 0c00 	adc.w	ip, ip, #0
 8013428:	0e90      	lsrs	r0, r2, #26
 801342a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801342c:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 8013430:	1880      	adds	r0, r0, r2
 8013432:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013434:	eb42 6cac 	adc.w	ip, r2, ip, asr #26
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8013438:	9a05      	ldr	r2, [sp, #20]
 801343a:	f112 7a80 	adds.w	sl, r2, #16777216	; 0x1000000
 801343e:	f143 0200 	adc.w	r2, r3, #0
 8013442:	ea4f 635a 	mov.w	r3, sl, lsr #25
 8013446:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801344a:	191c      	adds	r4, r3, r4
 801344c:	eb41 6362 	adc.w	r3, r1, r2, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013450:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 8013454:	f14c 0c00 	adc.w	ip, ip, #0
 8013458:	ea4f 6159 	mov.w	r1, r9, lsr #25
 801345c:	4672      	mov	r2, lr
 801345e:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 8013462:	1889      	adds	r1, r1, r2
 8013464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013466:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801346a:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 801346e:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013472:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 8013476:	f14c 0c00 	adc.w	ip, ip, #0
 801347a:	ea4f 6298 	mov.w	r2, r8, lsr #26
 801347e:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8013482:	1952      	adds	r2, r2, r5
 8013484:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013486:	9306      	str	r3, [sp, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013488:	eb45 6cac 	adc.w	ip, r5, ip, asr #26

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 801348c:	f112 7e80 	adds.w	lr, r2, #16777216	; 0x1000000
 8013490:	f14c 0c00 	adc.w	ip, ip, #0
 8013494:	ea4f 655e 	mov.w	r5, lr, lsr #25
 8013498:	2313      	movs	r3, #19
 801349a:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 801349e:	fba5 6503 	umull	r6, r5, r5, r3
 80134a2:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 80134a6:	fb03 550c 	mla	r5, r3, ip, r5
 80134aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134ac:	eb16 060b 	adds.w	r6, r6, fp
 80134b0:	eb45 0503 	adc.w	r5, r5, r3

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80134b4:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000

  h[0] = (sword32)h0;
 80134b8:	9b00      	ldr	r3, [sp, #0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80134ba:	f00c 4b7c 	and.w	fp, ip, #4227858432	; 0xfc000000
 80134be:	f145 0500 	adc.w	r5, r5, #0
 80134c2:	ebb6 060b 	subs.w	r6, r6, fp
  h[0] = (sword32)h0;
 80134c6:	601e      	str	r6, [r3, #0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80134c8:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 80134cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134ce:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 80134d2:	eb1c 0503 	adds.w	r5, ip, r3
  h[1] = (sword32)h1;
 80134d6:	9b00      	ldr	r3, [sp, #0]
 80134d8:	605d      	str	r5, [r3, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80134da:	9b01      	ldr	r3, [sp, #4]
 80134dc:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 80134e0:	9b03      	ldr	r3, [sp, #12]
 80134e2:	1b5d      	subs	r5, r3, r5
  h[2] = (sword32)h2;
 80134e4:	9b00      	ldr	r3, [sp, #0]
 80134e6:	609d      	str	r5, [r3, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80134e8:	9b05      	ldr	r3, [sp, #20]
 80134ea:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 80134ee:	ebb3 050a 	subs.w	r5, r3, sl
  h[3] = (sword32)h3;
 80134f2:	9b00      	ldr	r3, [sp, #0]
 80134f4:	60dd      	str	r5, [r3, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80134f6:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 80134fa:	1b64      	subs	r4, r4, r5
  h[4] = (sword32)h4;
 80134fc:	611c      	str	r4, [r3, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80134fe:	9b06      	ldr	r3, [sp, #24]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013500:	9c04      	ldr	r4, [sp, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013502:	0ebf      	lsrs	r7, r7, #26
 8013504:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 8013508:	9b07      	ldr	r3, [sp, #28]
 801350a:	18ff      	adds	r7, r7, r3
  h[5] = (sword32)h5;
 801350c:	9b00      	ldr	r3, [sp, #0]
 801350e:	615f      	str	r7, [r3, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013510:	9b02      	ldr	r3, [sp, #8]
 8013512:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8013516:	1ae3      	subs	r3, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013518:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  h[6] = (sword32)h6;
 801351c:	9c00      	ldr	r4, [sp, #0]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801351e:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8013522:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013526:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801352a:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 801352e:	ebb2 020e 	subs.w	r2, r2, lr
  h[6] = (sword32)h6;
 8013532:	61a3      	str	r3, [r4, #24]
  h[7] = (sword32)h7;
 8013534:	61e0      	str	r0, [r4, #28]
  h[8] = (sword32)h8;
 8013536:	6221      	str	r1, [r4, #32]
  h[9] = (sword32)h9;
 8013538:	6262      	str	r2, [r4, #36]	; 0x24
}
 801353a:	b017      	add	sp, #92	; 0x5c
 801353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013540 <fe_add>:
Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h,const fe f,const fe g)
{
 8013540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 h0 = f0 + g0;
  sword32 h1 = f1 + g1;
 8013544:	6853      	ldr	r3, [r2, #4]
 8013546:	684e      	ldr	r6, [r1, #4]
  sword32 h2 = f2 + g2;
 8013548:	688d      	ldr	r5, [r1, #8]
  sword32 h3 = f3 + g3;
 801354a:	68cc      	ldr	r4, [r1, #12]
  sword32 h4 = f4 + g4;
 801354c:	690f      	ldr	r7, [r1, #16]
  sword32 h5 = f5 + g5;
  sword32 h6 = f6 + g6;
  sword32 h7 = f7 + g7;
  sword32 h8 = f8 + g8;
  sword32 h9 = f9 + g9;
 801354e:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
  sword32 h1 = f1 + g1;
 8013552:	441e      	add	r6, r3
  sword32 h2 = f2 + g2;
 8013554:	6893      	ldr	r3, [r2, #8]
 8013556:	441d      	add	r5, r3
  sword32 h3 = f3 + g3;
 8013558:	68d3      	ldr	r3, [r2, #12]
 801355a:	441c      	add	r4, r3
  sword32 h4 = f4 + g4;
 801355c:	6913      	ldr	r3, [r2, #16]
 801355e:	eb07 0c03 	add.w	ip, r7, r3
  sword32 h5 = f5 + g5;
 8013562:	694f      	ldr	r7, [r1, #20]
 8013564:	6953      	ldr	r3, [r2, #20]
 8013566:	eb07 0e03 	add.w	lr, r7, r3
  sword32 h6 = f6 + g6;
 801356a:	698f      	ldr	r7, [r1, #24]
 801356c:	6993      	ldr	r3, [r2, #24]
 801356e:	eb07 0803 	add.w	r8, r7, r3
  sword32 h7 = f7 + g7;
 8013572:	69cf      	ldr	r7, [r1, #28]
 8013574:	69d3      	ldr	r3, [r2, #28]
 8013576:	eb07 0903 	add.w	r9, r7, r3
  sword32 h8 = f8 + g8;
 801357a:	6a13      	ldr	r3, [r2, #32]
 801357c:	6a0f      	ldr	r7, [r1, #32]
  sword32 h0 = f0 + g0;
 801357e:	6809      	ldr	r1, [r1, #0]
  sword32 h8 = f8 + g8;
 8013580:	441f      	add	r7, r3
  sword32 h9 = f9 + g9;
 8013582:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 h0 = f0 + g0;
 8013584:	6812      	ldr	r2, [r2, #0]
  sword32 h9 = f9 + g9;
 8013586:	4453      	add	r3, sl
  sword32 h0 = f0 + g0;
 8013588:	440a      	add	r2, r1
  h[0] = h0;
  h[1] = h1;
 801358a:	e9c0 2600 	strd	r2, r6, [r0]
  h[2] = h2;
  h[3] = h3;
 801358e:	e9c0 5402 	strd	r5, r4, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 8013592:	e9c0 ce04 	strd	ip, lr, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 8013596:	e9c0 8906 	strd	r8, r9, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 801359a:	e9c0 7308 	strd	r7, r3, [r0, #32]
}
 801359e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080135a2 <fe_tobytes>:
  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s,const fe h)
{
 80135a2:	460b      	mov	r3, r1
 80135a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 h4 = h[4];
  sword32 h5 = h[5];
  sword32 h6 = h[6];
  sword32 h7 = h[7];
  sword32 h8 = h[8];
  sword32 h9 = h[9];
 80135a8:	e9d3 9208 	ldrd	r9, r2, [r3, #32]
  sword32 h1 = h[1];
 80135ac:	e9d1 8e00 	ldrd	r8, lr, [r1]
  sword32 carry6;
  sword32 carry7;
  sword32 carry8;
  sword32 carry9;

  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 80135b0:	f04f 0a13 	mov.w	sl, #19
  sword32 h5 = h[5];
 80135b4:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
  sword32 h7 = h[7];
 80135b8:	e9d3 5406 	ldrd	r5, r4, [r3, #24]
  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 80135bc:	fb0a f302 	mul.w	r3, sl, r2
  sword32 h3 = h[3];
 80135c0:	e9d1 c102 	ldrd	ip, r1, [r1, #8]
  q = (19 * h9 + (((sword32) 1) << 24)) >> 25;
 80135c4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  q = (h0 + q) >> 26;
 80135c8:	eb08 6363 	add.w	r3, r8, r3, asr #25
  q = (h1 + q) >> 25;
 80135cc:	eb0e 63a3 	add.w	r3, lr, r3, asr #26
  q = (h2 + q) >> 26;
 80135d0:	eb0c 6363 	add.w	r3, ip, r3, asr #25
  q = (h3 + q) >> 25;
 80135d4:	eb01 63a3 	add.w	r3, r1, r3, asr #26
  q = (h4 + q) >> 26;
 80135d8:	eb07 6363 	add.w	r3, r7, r3, asr #25
  q = (h5 + q) >> 25;
 80135dc:	eb06 63a3 	add.w	r3, r6, r3, asr #26
  q = (h6 + q) >> 26;
 80135e0:	eb05 6363 	add.w	r3, r5, r3, asr #25
  q = (h7 + q) >> 25;
 80135e4:	eb04 63a3 	add.w	r3, r4, r3, asr #26
  q = (h8 + q) >> 26;
 80135e8:	eb09 6363 	add.w	r3, r9, r3, asr #25
  q = (h9 + q) >> 25;
 80135ec:	eb02 63a3 	add.w	r3, r2, r3, asr #26
 80135f0:	165b      	asrs	r3, r3, #25

  /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
  h0 += 19 * q;
 80135f2:	fb0a 8803 	mla	r8, sl, r3, r8
  /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */

  carry0 = h0 >> 26; h1 += carry0; h0 -= carry0 << 26;
 80135f6:	eb0e 6ea8 	add.w	lr, lr, r8, asr #26
 80135fa:	f028 487c 	bic.w	r8, r8, #4227858432	; 0xfc000000
  evidently 2^255 h10-2^255 q = 0.
  Goal: Output h0+...+2^230 h9.
  */

  s[0] = (byte)(h0 >> 0);
  s[1] = (byte)(h0 >> 8);
 80135fe:	ea4f 2328 	mov.w	r3, r8, asr #8
  carry1 = h1 >> 25; h2 += carry1; h1 -= carry1 << 25;
 8013602:	eb0c 6c6e 	add.w	ip, ip, lr, asr #25
  s[1] = (byte)(h0 >> 8);
 8013606:	7043      	strb	r3, [r0, #1]
 8013608:	f02e 4e7e 	bic.w	lr, lr, #4261412864	; 0xfe000000
  s[2] = (byte)(h0 >> 16);
 801360c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8013610:	7083      	strb	r3, [r0, #2]
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 8013612:	ea4f 038e 	mov.w	r3, lr, lsl #2
  s[0] = (byte)(h0 >> 0);
 8013616:	f880 8000 	strb.w	r8, [r0]
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 801361a:	ea43 6818 	orr.w	r8, r3, r8, lsr #24
  s[4] = (byte)(h1 >> 6);
 801361e:	ea4f 13ae 	mov.w	r3, lr, asr #6
  carry2 = h2 >> 26; h3 += carry2; h2 -= carry2 << 26;
 8013622:	eb01 61ac 	add.w	r1, r1, ip, asr #26
  s[4] = (byte)(h1 >> 6);
 8013626:	7103      	strb	r3, [r0, #4]
 8013628:	f02c 4c7c 	bic.w	ip, ip, #4227858432	; 0xfc000000
  s[5] = (byte)(h1 >> 14);
 801362c:	ea4f 33ae 	mov.w	r3, lr, asr #14
 8013630:	7143      	strb	r3, [r0, #5]
  s[6] = (byte)((h1 >> 22) | (h2 << 3));
 8013632:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8013636:	ea43 5e9e 	orr.w	lr, r3, lr, lsr #22
  s[7] = (byte)(h2 >> 5);
 801363a:	ea4f 136c 	mov.w	r3, ip, asr #5
  carry3 = h3 >> 25; h4 += carry3; h3 -= carry3 << 25;
 801363e:	eb07 6761 	add.w	r7, r7, r1, asr #25
  s[7] = (byte)(h2 >> 5);
 8013642:	71c3      	strb	r3, [r0, #7]
 8013644:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
  s[8] = (byte)(h2 >> 13);
 8013648:	ea4f 336c 	mov.w	r3, ip, asr #13
 801364c:	7203      	strb	r3, [r0, #8]
  s[9] = (byte)((h2 >> 21) | (h3 << 5));
 801364e:	014b      	lsls	r3, r1, #5
 8013650:	ea43 5c5c 	orr.w	ip, r3, ip, lsr #21
  s[10] = (byte)(h3 >> 3);
 8013654:	10cb      	asrs	r3, r1, #3
 8013656:	7283      	strb	r3, [r0, #10]
  s[11] = (byte)(h3 >> 11);
 8013658:	12cb      	asrs	r3, r1, #11
 801365a:	72c3      	strb	r3, [r0, #11]
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 801365c:	01bb      	lsls	r3, r7, #6
  carry4 = h4 >> 26; h5 += carry4; h4 -= carry4 << 26;
 801365e:	eb06 66a7 	add.w	r6, r6, r7, asr #26
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 8013662:	ea43 41d1 	orr.w	r1, r3, r1, lsr #19
  s[13] = (byte)(h4 >> 2);
 8013666:	f3c7 0397 	ubfx	r3, r7, #2, #24
  carry5 = h5 >> 25; h6 += carry5; h5 -= carry5 << 25;
 801366a:	eb05 6566 	add.w	r5, r5, r6, asr #25
  s[13] = (byte)(h4 >> 2);
 801366e:	7343      	strb	r3, [r0, #13]
 8013670:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
  s[14] = (byte)(h4 >> 10);
 8013674:	f3c7 238f 	ubfx	r3, r7, #10, #16
 8013678:	7383      	strb	r3, [r0, #14]
  s[15] = (byte)(h4 >> 18);
  s[16] = (byte)(h5 >> 0);
  s[17] = (byte)(h5 >> 8);
 801367a:	1233      	asrs	r3, r6, #8
  carry6 = h6 >> 26; h7 += carry6; h6 -= carry6 << 26;
 801367c:	eb04 64a5 	add.w	r4, r4, r5, asr #26
  s[17] = (byte)(h5 >> 8);
 8013680:	7443      	strb	r3, [r0, #17]
 8013682:	f025 457c 	bic.w	r5, r5, #4227858432	; 0xfc000000
  s[18] = (byte)(h5 >> 16);
 8013686:	1433      	asrs	r3, r6, #16
 8013688:	7483      	strb	r3, [r0, #18]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 801368a:	006b      	lsls	r3, r5, #1
  s[16] = (byte)(h5 >> 0);
 801368c:	7406      	strb	r6, [r0, #16]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 801368e:	ea43 6616 	orr.w	r6, r3, r6, lsr #24
  s[20] = (byte)(h6 >> 7);
 8013692:	11eb      	asrs	r3, r5, #7
  carry7 = h7 >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013694:	eb09 6964 	add.w	r9, r9, r4, asr #25
  s[20] = (byte)(h6 >> 7);
 8013698:	7503      	strb	r3, [r0, #20]
 801369a:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
  s[21] = (byte)(h6 >> 15);
 801369e:	13eb      	asrs	r3, r5, #15
  s[15] = (byte)(h4 >> 18);
 80136a0:	f3c7 4787 	ubfx	r7, r7, #18, #8
  s[3] = (byte)((h0 >> 24) | (h1 << 2));
 80136a4:	f880 8003 	strb.w	r8, [r0, #3]
  s[6] = (byte)((h1 >> 22) | (h2 << 3));
 80136a8:	f880 e006 	strb.w	lr, [r0, #6]
  s[9] = (byte)((h2 >> 21) | (h3 << 5));
 80136ac:	f880 c009 	strb.w	ip, [r0, #9]
  s[12] = (byte)((h3 >> 19) | (h4 << 6));
 80136b0:	7301      	strb	r1, [r0, #12]
  s[15] = (byte)(h4 >> 18);
 80136b2:	73c7      	strb	r7, [r0, #15]
  s[19] = (byte)((h5 >> 24) | (h6 << 1));
 80136b4:	74c6      	strb	r6, [r0, #19]
  s[21] = (byte)(h6 >> 15);
 80136b6:	7543      	strb	r3, [r0, #21]
  s[22] = (byte)((h6 >> 23) | (h7 << 3));
 80136b8:	00e3      	lsls	r3, r4, #3
 80136ba:	ea43 55d5 	orr.w	r5, r3, r5, lsr #23
  s[23] = (byte)(h7 >> 5);
 80136be:	1163      	asrs	r3, r4, #5
 80136c0:	f029 4b7c 	bic.w	fp, r9, #4227858432	; 0xfc000000
 80136c4:	75c3      	strb	r3, [r0, #23]
  s[24] = (byte)(h7 >> 13);
 80136c6:	1363      	asrs	r3, r4, #13
 80136c8:	7603      	strb	r3, [r0, #24]
  s[25] = (byte)((h7 >> 21) | (h8 << 4));
 80136ca:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80136ce:	ea43 5454 	orr.w	r4, r3, r4, lsr #21
  carry8 = h8 >> 26; h9 += carry8; h8 -= carry8 << 26;
 80136d2:	eb02 62a9 	add.w	r2, r2, r9, asr #26
  s[26] = (byte)(h8 >> 4);
 80136d6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80136da:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
 80136de:	7683      	strb	r3, [r0, #26]
  s[27] = (byte)(h8 >> 12);
 80136e0:	ea4f 332b 	mov.w	r3, fp, asr #12
 80136e4:	76c3      	strb	r3, [r0, #27]
  s[28] = (byte)((h8 >> 20) | (h9 << 6));
 80136e6:	0193      	lsls	r3, r2, #6
 80136e8:	ea43 5b1b 	orr.w	fp, r3, fp, lsr #20
  s[29] = (byte)(h9 >> 2);
 80136ec:	1093      	asrs	r3, r2, #2
 80136ee:	7743      	strb	r3, [r0, #29]
  s[30] = (byte)(h9 >> 10);
 80136f0:	1293      	asrs	r3, r2, #10
  s[31] = (byte)(h9 >> 18);
 80136f2:	1492      	asrs	r2, r2, #18
  s[22] = (byte)((h6 >> 23) | (h7 << 3));
 80136f4:	7585      	strb	r5, [r0, #22]
  s[25] = (byte)((h7 >> 21) | (h8 << 4));
 80136f6:	7644      	strb	r4, [r0, #25]
  s[28] = (byte)((h8 >> 20) | (h9 << 6));
 80136f8:	f880 b01c 	strb.w	fp, [r0, #28]
  s[30] = (byte)(h9 >> 10);
 80136fc:	7783      	strb	r3, [r0, #30]
  s[31] = (byte)(h9 >> 18);
 80136fe:	77c2      	strb	r2, [r0, #31]
}
 8013700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013704 <fe_sub>:
Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h,const fe f,const fe g)
{
 8013704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 h0 = f0 - g0;
  sword32 h1 = f1 - g1;
 8013708:	6853      	ldr	r3, [r2, #4]
 801370a:	684e      	ldr	r6, [r1, #4]
  sword32 h2 = f2 - g2;
 801370c:	688d      	ldr	r5, [r1, #8]
  sword32 h3 = f3 - g3;
 801370e:	68cc      	ldr	r4, [r1, #12]
  sword32 h4 = f4 - g4;
 8013710:	690f      	ldr	r7, [r1, #16]
  sword32 h1 = f1 - g1;
 8013712:	1af6      	subs	r6, r6, r3
  sword32 h2 = f2 - g2;
 8013714:	6893      	ldr	r3, [r2, #8]
 8013716:	1aed      	subs	r5, r5, r3
  sword32 h3 = f3 - g3;
 8013718:	68d3      	ldr	r3, [r2, #12]
 801371a:	eba4 0a03 	sub.w	sl, r4, r3
  sword32 h4 = f4 - g4;
 801371e:	6913      	ldr	r3, [r2, #16]
  sword32 h5 = f5 - g5;
  sword32 h6 = f6 - g6;
  sword32 h7 = f7 - g7;
  sword32 h8 = f8 - g8;
  sword32 h9 = f9 - g9;
 8013720:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  sword32 h4 = f4 - g4;
 8013722:	eba7 0c03 	sub.w	ip, r7, r3
  sword32 h5 = f5 - g5;
 8013726:	694f      	ldr	r7, [r1, #20]
 8013728:	6953      	ldr	r3, [r2, #20]
 801372a:	eba7 0e03 	sub.w	lr, r7, r3
  sword32 h6 = f6 - g6;
 801372e:	698f      	ldr	r7, [r1, #24]
 8013730:	6993      	ldr	r3, [r2, #24]
 8013732:	eba7 0803 	sub.w	r8, r7, r3
  sword32 h7 = f7 - g7;
 8013736:	69cf      	ldr	r7, [r1, #28]
 8013738:	69d3      	ldr	r3, [r2, #28]
 801373a:	eba7 0903 	sub.w	r9, r7, r3
  sword32 h8 = f8 - g8;
 801373e:	6a13      	ldr	r3, [r2, #32]
 8013740:	6a0f      	ldr	r7, [r1, #32]
  sword32 h0 = f0 - g0;
 8013742:	6809      	ldr	r1, [r1, #0]
  sword32 h8 = f8 - g8;
 8013744:	1aff      	subs	r7, r7, r3
  sword32 h9 = f9 - g9;
 8013746:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 h0 = f0 - g0;
 8013748:	6812      	ldr	r2, [r2, #0]
  sword32 h9 = f9 - g9;
 801374a:	1ae3      	subs	r3, r4, r3
  sword32 h0 = f0 - g0;
 801374c:	1a8a      	subs	r2, r1, r2
  h[0] = h0;
  h[1] = h1;
 801374e:	e9c0 2600 	strd	r2, r6, [r0]
  h[2] = h2;
  h[3] = h3;
 8013752:	e9c0 5a02 	strd	r5, sl, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 8013756:	e9c0 ce04 	strd	ip, lr, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 801375a:	e9c0 8906 	strd	r8, r9, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 801375e:	e9c0 7308 	strd	r7, r3, [r0, #32]
}
 8013762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013766 <fe_frombytes>:
/*
Ignores top bit of h.
*/

void fe_frombytes(fe h,const unsigned char *s)
{
 8013766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801376a:	4604      	mov	r4, r0
 801376c:	b08d      	sub	sp, #52	; 0x34
  sword64 h0 = load_4(s);
 801376e:	4608      	mov	r0, r1
{
 8013770:	460e      	mov	r6, r1
  sword64 h0 = load_4(s);
 8013772:	f7ff fcf0 	bl	8013156 <load_4>
 8013776:	9004      	str	r0, [sp, #16]
  sword64 h1 = load_3(s + 4) << 6;
 8013778:	1d30      	adds	r0, r6, #4
  sword64 h0 = load_4(s);
 801377a:	9109      	str	r1, [sp, #36]	; 0x24
  sword64 h1 = load_3(s + 4) << 6;
 801377c:	f7ff fce1 	bl	8013142 <load_3>
 8013780:	018b      	lsls	r3, r1, #6
 8013782:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013786:	930a      	str	r3, [sp, #40]	; 0x28
 8013788:	0183      	lsls	r3, r0, #6
  sword64 h2 = load_3(s + 7) << 5;
 801378a:	1df0      	adds	r0, r6, #7
  sword64 h1 = load_3(s + 4) << 6;
 801378c:	9301      	str	r3, [sp, #4]
  sword64 h2 = load_3(s + 7) << 5;
 801378e:	f7ff fcd8 	bl	8013142 <load_3>
 8013792:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8013796:	0143      	lsls	r3, r0, #5
 8013798:	ea4a 6ad0 	orr.w	sl, sl, r0, lsr #27
  sword64 h3 = load_3(s + 10) << 3;
 801379c:	f106 000a 	add.w	r0, r6, #10
  sword64 h2 = load_3(s + 7) << 5;
 80137a0:	9305      	str	r3, [sp, #20]
  sword64 h3 = load_3(s + 10) << 3;
 80137a2:	f7ff fcce 	bl	8013142 <load_3>
 80137a6:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 80137aa:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 80137ae:	ea4f 0bc0 	mov.w	fp, r0, lsl #3
  sword64 h4 = load_3(s + 13) << 2;
 80137b2:	f106 000d 	add.w	r0, r6, #13
 80137b6:	f7ff fcc4 	bl	8013142 <load_3>
 80137ba:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80137be:	0083      	lsls	r3, r0, #2
 80137c0:	ea48 7890 	orr.w	r8, r8, r0, lsr #30
  sword64 h5 = load_4(s + 16);
 80137c4:	f106 0010 	add.w	r0, r6, #16
  sword64 h4 = load_3(s + 13) << 2;
 80137c8:	9306      	str	r3, [sp, #24]
  sword64 h5 = load_4(s + 16);
 80137ca:	f7ff fcc4 	bl	8013156 <load_4>
 80137ce:	9002      	str	r0, [sp, #8]
  sword64 h6 = load_3(s + 20) << 7;
 80137d0:	f106 0014 	add.w	r0, r6, #20
  sword64 h5 = load_4(s + 16);
 80137d4:	910b      	str	r1, [sp, #44]	; 0x2c
  sword64 h6 = load_3(s + 20) << 7;
 80137d6:	f7ff fcb4 	bl	8013142 <load_3>
 80137da:	01cb      	lsls	r3, r1, #7
 80137dc:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	01c3      	lsls	r3, r0, #7
  sword64 h7 = load_3(s + 23) << 5;
 80137e4:	f106 0017 	add.w	r0, r6, #23
  sword64 h6 = load_3(s + 20) << 7;
 80137e8:	9307      	str	r3, [sp, #28]
  sword64 h7 = load_3(s + 23) << 5;
 80137ea:	f7ff fcaa 	bl	8013142 <load_3>
 80137ee:	014f      	lsls	r7, r1, #5
 80137f0:	0143      	lsls	r3, r0, #5
 80137f2:	ea47 67d0 	orr.w	r7, r7, r0, lsr #27
  sword64 h8 = load_3(s + 26) << 4;
 80137f6:	f106 001a 	add.w	r0, r6, #26
  sword64 h7 = load_3(s + 23) << 5;
 80137fa:	9303      	str	r3, [sp, #12]
  sword64 h8 = load_3(s + 26) << 4;
 80137fc:	f7ff fca1 	bl	8013142 <load_3>
 8013800:	010d      	lsls	r5, r1, #4
 8013802:	0103      	lsls	r3, r0, #4
 8013804:	ea45 7510 	orr.w	r5, r5, r0, lsr #28
  sword64 h9 = (load_3(s + 29) & 8388607) << 2;
 8013808:	f106 001d 	add.w	r0, r6, #29
  sword64 h8 = load_3(s + 26) << 4;
 801380c:	9308      	str	r3, [sp, #32]
  sword64 h9 = (load_3(s + 29) & 8388607) << 2;
 801380e:	f7ff fc98 	bl	8013142 <load_3>
 8013812:	0080      	lsls	r0, r0, #2
 8013814:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8013818:	f020 0003 	bic.w	r0, r0, #3
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 801381c:	f100 7280 	add.w	r2, r0, #16777216	; 0x1000000
 8013820:	9b04      	ldr	r3, [sp, #16]
 8013822:	0e51      	lsrs	r1, r2, #25
 8013824:	2613      	movs	r6, #19
 8013826:	fba1 1606 	umull	r1, r6, r1, r6
 801382a:	18cb      	adds	r3, r1, r3
 801382c:	9304      	str	r3, [sp, #16]
 801382e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013830:	9908      	ldr	r1, [sp, #32]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8013832:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
 8013836:	f143 0600 	adc.w	r6, r3, #0
 801383a:	1a83      	subs	r3, r0, r2
 801383c:	9309      	str	r3, [sp, #36]	; 0x24
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 801383e:	9b01      	ldr	r3, [sp, #4]
 8013840:	f113 7280 	adds.w	r2, r3, #16777216	; 0x1000000
 8013844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013846:	ea4f 6052 	mov.w	r0, r2, lsr #25
 801384a:	f143 0e00 	adc.w	lr, r3, #0
 801384e:	9b05      	ldr	r3, [sp, #20]
 8013850:	ea40 10ce 	orr.w	r0, r0, lr, lsl #7
 8013854:	18c3      	adds	r3, r0, r3
 8013856:	9305      	str	r3, [sp, #20]
 8013858:	9b01      	ldr	r3, [sp, #4]
 801385a:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
 801385e:	eb4a 6e6e 	adc.w	lr, sl, lr, asr #25
 8013862:	1a9b      	subs	r3, r3, r2
 8013864:	930a      	str	r3, [sp, #40]	; 0x28
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8013866:	f11b 7380 	adds.w	r3, fp, #16777216	; 0x1000000
 801386a:	9a06      	ldr	r2, [sp, #24]
 801386c:	f149 0c00 	adc.w	ip, r9, #0
 8013870:	0e58      	lsrs	r0, r3, #25
 8013872:	ea40 10cc 	orr.w	r0, r0, ip, lsl #7
 8013876:	1882      	adds	r2, r0, r2
 8013878:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
 801387c:	eb48 6c6c 	adc.w	ip, r8, ip, asr #25
 8013880:	ebbb 0b03 	subs.w	fp, fp, r3
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8013884:	9b02      	ldr	r3, [sp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8013886:	9201      	str	r2, [sp, #4]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8013888:	f113 7080 	adds.w	r0, r3, #16777216	; 0x1000000
 801388c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801388e:	ea4f 6250 	mov.w	r2, r0, lsr #25
 8013892:	f143 0900 	adc.w	r9, r3, #0
 8013896:	9b07      	ldr	r3, [sp, #28]
 8013898:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 801389c:	18d2      	adds	r2, r2, r3
 801389e:	9b00      	ldr	r3, [sp, #0]
 80138a0:	eb43 6969 	adc.w	r9, r3, r9, asr #25
 80138a4:	9b02      	ldr	r3, [sp, #8]
 80138a6:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 80138aa:	1a1b      	subs	r3, r3, r0
 80138ac:	9306      	str	r3, [sp, #24]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80138ae:	9b03      	ldr	r3, [sp, #12]
 80138b0:	f113 7080 	adds.w	r0, r3, #16777216	; 0x1000000
 80138b4:	f147 0800 	adc.w	r8, r7, #0
 80138b8:	0e43      	lsrs	r3, r0, #25
 80138ba:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
 80138be:	185b      	adds	r3, r3, r1
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	9b03      	ldr	r3, [sp, #12]
 80138c4:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 80138c8:	eb45 6868 	adc.w	r8, r5, r8, asr #25
 80138cc:	1a1b      	subs	r3, r3, r0
 80138ce:	9303      	str	r3, [sp, #12]

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80138d0:	9b04      	ldr	r3, [sp, #16]
 80138d2:	f113 7700 	adds.w	r7, r3, #33554432	; 0x2000000
 80138d6:	f146 0300 	adc.w	r3, r6, #0
 80138da:	9302      	str	r3, [sp, #8]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80138dc:	9b05      	ldr	r3, [sp, #20]
 80138de:	f113 7600 	adds.w	r6, r3, #33554432	; 0x2000000
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80138e2:	9b01      	ldr	r3, [sp, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80138e4:	f14e 0e00 	adc.w	lr, lr, #0
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80138e8:	f113 7000 	adds.w	r0, r3, #33554432	; 0x2000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80138ec:	9b00      	ldr	r3, [sp, #0]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80138ee:	f14c 0c00 	adc.w	ip, ip, #0
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 80138f2:	f112 7500 	adds.w	r5, r2, #33554432	; 0x2000000
 80138f6:	f149 0900 	adc.w	r9, r9, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 80138fa:	f113 7100 	adds.w	r1, r3, #33554432	; 0x2000000
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80138fe:	9b04      	ldr	r3, [sp, #16]
 8013900:	f007 4a7c 	and.w	sl, r7, #4227858432	; 0xfc000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013904:	f148 0800 	adc.w	r8, r8, #0
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013908:	ebb3 0a0a 	subs.w	sl, r3, sl
 801390c:	9b02      	ldr	r3, [sp, #8]

  h[0] = (sword32)h0;
 801390e:	f8c4 a000 	str.w	sl, [r4]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013912:	0ebf      	lsrs	r7, r7, #26
 8013914:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 8013918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801391a:	18ff      	adds	r7, r7, r3
  h[1] = (sword32)h1;
 801391c:	6067      	str	r7, [r4, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 801391e:	9b05      	ldr	r3, [sp, #20]
 8013920:	f006 477c 	and.w	r7, r6, #4227858432	; 0xfc000000
 8013924:	0eb6      	lsrs	r6, r6, #26
 8013926:	ea46 168e 	orr.w	r6, r6, lr, lsl #6
 801392a:	1bdf      	subs	r7, r3, r7
 801392c:	eb16 060b 	adds.w	r6, r6, fp
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013930:	9b01      	ldr	r3, [sp, #4]
  h[2] = (sword32)h2;
  h[3] = (sword32)h3;
 8013932:	60e6      	str	r6, [r4, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013934:	f000 467c 	and.w	r6, r0, #4227858432	; 0xfc000000
 8013938:	1b9e      	subs	r6, r3, r6
 801393a:	0e80      	lsrs	r0, r0, #26
 801393c:	9b06      	ldr	r3, [sp, #24]
  h[2] = (sword32)h2;
 801393e:	60a7      	str	r7, [r4, #8]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013940:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 8013944:	18c0      	adds	r0, r0, r3
  h[4] = (sword32)h4;
  h[5] = (sword32)h5;
 8013946:	6160      	str	r0, [r4, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013948:	9b03      	ldr	r3, [sp, #12]
  h[4] = (sword32)h4;
 801394a:	6126      	str	r6, [r4, #16]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801394c:	f005 407c 	and.w	r0, r5, #4227858432	; 0xfc000000
 8013950:	0ead      	lsrs	r5, r5, #26
 8013952:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 8013956:	1a12      	subs	r2, r2, r0
 8013958:	18ed      	adds	r5, r5, r3
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801395a:	9b00      	ldr	r3, [sp, #0]
  h[6] = (sword32)h6;
 801395c:	61a2      	str	r2, [r4, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801395e:	f001 427c 	and.w	r2, r1, #4227858432	; 0xfc000000
 8013962:	1a9b      	subs	r3, r3, r2
  h[7] = (sword32)h7;
  h[8] = (sword32)h8;
 8013964:	6223      	str	r3, [r4, #32]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013966:	0e89      	lsrs	r1, r1, #26
 8013968:	9b09      	ldr	r3, [sp, #36]	; 0x24
  h[7] = (sword32)h7;
 801396a:	61e5      	str	r5, [r4, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801396c:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8013970:	18c9      	adds	r1, r1, r3
  h[9] = (sword32)h9;
 8013972:	6261      	str	r1, [r4, #36]	; 0x24
}
 8013974:	b00d      	add	sp, #52	; 0x34
 8013976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801397a <fe_copy>:
/*
h = f
*/

void fe_copy(fe h,const fe f)
{
 801397a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sword32 f0 = f[0];
  sword32 f1 = f[1];
 801397e:	e9d1 9800 	ldrd	r9, r8, [r1]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 8013982:	e9d1 e302 	ldrd	lr, r3, [r1, #8]
  sword32 f4 = f[4];
  sword32 f5 = f[5];
 8013986:	e9d1 7604 	ldrd	r7, r6, [r1, #16]
  sword32 f6 = f[6];
  sword32 f7 = f[7];
 801398a:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  sword32 f8 = f[8];
  sword32 f9 = f[9];
 801398e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
  h[0] = f0;
  h[1] = f1;
 8013992:	e9c0 9800 	strd	r9, r8, [r0]
  h[2] = f2;
  h[3] = f3;
 8013996:	e9c0 e302 	strd	lr, r3, [r0, #8]
  h[4] = f4;
  h[5] = f5;
 801399a:	e9c0 7604 	strd	r7, r6, [r0, #16]
  h[6] = f6;
  h[7] = f7;
 801399e:	e9c0 5406 	strd	r5, r4, [r0, #24]
  h[8] = f8;
  h[9] = f9;
 80139a2:	e9c0 2108 	strd	r2, r1, [r0, #32]
}
 80139a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080139aa <fe_mul>:

With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h,const fe f,const fe g)
{
 80139aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ae:	b0a5      	sub	sp, #148	; 0x94
  sword32 f0 = f[0];
 80139b0:	680b      	ldr	r3, [r1, #0]
 80139b2:	9301      	str	r3, [sp, #4]
  sword32 f1 = f[1];
 80139b4:	684b      	ldr	r3, [r1, #4]
 80139b6:	9308      	str	r3, [sp, #32]
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 80139b8:	e9d1 9302 	ldrd	r9, r3, [r1, #8]
 80139bc:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 f4 = f[4];
  sword32 f5 = f[5];
 80139be:	e9d1 7304 	ldrd	r7, r3, [r1, #16]
 80139c2:	930a      	str	r3, [sp, #40]	; 0x28
  sword32 f6 = f[6];
  sword32 f7 = f[7];
 80139c4:	e9d1 a306 	ldrd	sl, r3, [r1, #24]
 80139c8:	930b      	str	r3, [sp, #44]	; 0x2c
  sword32 f8 = f[8];
  sword32 f9 = f[9];
 80139ca:	e9d1 8308 	ldrd	r8, r3, [r1, #32]
 80139ce:	930c      	str	r3, [sp, #48]	; 0x30
  sword32 g0 = g[0];
  sword32 g1 = g[1];
  sword32 g2 = g[2];
 80139d0:	6893      	ldr	r3, [r2, #8]
 80139d2:	9302      	str	r3, [sp, #8]
  sword32 g3 = g[3];
 80139d4:	68d3      	ldr	r3, [r2, #12]
 80139d6:	9304      	str	r3, [sp, #16]
  sword32 g4 = g[4];
 80139d8:	6913      	ldr	r3, [r2, #16]
 80139da:	9306      	str	r3, [sp, #24]
  sword32 g5 = g[5];
 80139dc:	6953      	ldr	r3, [r2, #20]
 80139de:	930d      	str	r3, [sp, #52]	; 0x34
  sword32 g6 = g[6];
 80139e0:	6993      	ldr	r3, [r2, #24]
 80139e2:	930f      	str	r3, [sp, #60]	; 0x3c
  sword32 g7 = g[7];
 80139e4:	69d3      	ldr	r3, [r2, #28]
 80139e6:	9316      	str	r3, [sp, #88]	; 0x58
  sword32 g8 = g[8];
 80139e8:	6a13      	ldr	r3, [r2, #32]
  sword32 g1 = g[1];
 80139ea:	e9d2 1400 	ldrd	r1, r4, [r2]
  sword32 g8 = g[8];
 80139ee:	9317      	str	r3, [sp, #92]	; 0x5c
  sword32 g9 = g[9];
 80139f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
  sword32 g1_19 = 19 * g1; /* 1.959375*2^29 */
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
  sword32 g3_19 = 19 * g3;
  sword32 g4_19 = 19 * g4;
  sword32 g5_19 = 19 * g5;
 80139f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  sword32 g9 = g[9];
 80139f4:	9319      	str	r3, [sp, #100]	; 0x64
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 80139f6:	f04f 0b13 	mov.w	fp, #19
  sword32 g5_19 = 19 * g5;
 80139fa:	fb0b f202 	mul.w	r2, fp, r2
 80139fe:	9210      	str	r2, [sp, #64]	; 0x40
  sword32 g6_19 = 19 * g6;
 8013a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8013a02:	9b02      	ldr	r3, [sp, #8]
  sword64 f9g5_38 = f9_2 * (sword64) g5_19;
  sword64 f9g6_19 = f9   * (sword64) g6_19;
  sword64 f9g7_38 = f9_2 * (sword64) g7_19;
  sword64 f9g8_19 = f9   * (sword64) g8_19;
  sword64 f9g9_38 = f9_2 * (sword64) g9_19;
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8013a04:	f8dd c004 	ldr.w	ip, [sp, #4]
  sword32 g6_19 = 19 * g6;
 8013a08:	fb0b f202 	mul.w	r2, fp, r2
 8013a0c:	920e      	str	r2, [sp, #56]	; 0x38
  sword32 g7_19 = 19 * g7;
 8013a0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013a10:	fb0b f202 	mul.w	r2, fp, r2
 8013a14:	9207      	str	r2, [sp, #28]
  sword32 g8_19 = 19 * g8;
 8013a16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a18:	fb0b f202 	mul.w	r2, fp, r2
 8013a1c:	9205      	str	r2, [sp, #20]
  sword32 g9_19 = 19 * g9;
 8013a1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013a20:	fb0b f202 	mul.w	r2, fp, r2
 8013a24:	9203      	str	r2, [sp, #12]
  sword32 f1_2 = 2 * f1;
 8013a26:	9a08      	ldr	r2, [sp, #32]
 8013a28:	0052      	lsls	r2, r2, #1
 8013a2a:	9211      	str	r2, [sp, #68]	; 0x44
  sword32 f3_2 = 2 * f3;
 8013a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 8013a2e:	9d11      	ldr	r5, [sp, #68]	; 0x44
  sword32 f3_2 = 2 * f3;
 8013a30:	0052      	lsls	r2, r2, #1
 8013a32:	9212      	str	r2, [sp, #72]	; 0x48
  sword32 f5_2 = 2 * f5;
 8013a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a36:	0052      	lsls	r2, r2, #1
 8013a38:	9213      	str	r2, [sp, #76]	; 0x4c
  sword32 f7_2 = 2 * f7;
 8013a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
{
 8013a3c:	4686      	mov	lr, r0
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 8013a3e:	9803      	ldr	r0, [sp, #12]
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8013a40:	fb0b f303 	mul.w	r3, fp, r3
  sword32 f7_2 = 2 * f7;
 8013a44:	0052      	lsls	r2, r2, #1
  sword32 g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8013a46:	931a      	str	r3, [sp, #104]	; 0x68
  sword32 f7_2 = 2 * f7;
 8013a48:	9214      	str	r2, [sp, #80]	; 0x50
  sword32 g3_19 = 19 * g3;
 8013a4a:	9b04      	ldr	r3, [sp, #16]
  sword32 f9_2 = 2 * f9;
 8013a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  sword64 f1g9_38 = f1_2 * (sword64) g9_19;
 8013a4e:	fb85 6500 	smull	r6, r5, r5, r0
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8013a52:	fbcc 6501 	smlal	r6, r5, ip, r1
 8013a56:	f8dd c014 	ldr.w	ip, [sp, #20]
  sword32 g3_19 = 19 * g3;
 8013a5a:	fb0b f303 	mul.w	r3, fp, r3
  sword32 f9_2 = 2 * f9;
 8013a5e:	0052      	lsls	r2, r2, #1
  sword32 g3_19 = 19 * g3;
 8013a60:	9318      	str	r3, [sp, #96]	; 0x60
  sword32 f9_2 = 2 * f9;
 8013a62:	9215      	str	r2, [sp, #84]	; 0x54
  sword32 g4_19 = 19 * g4;
 8013a64:	9b06      	ldr	r3, [sp, #24]
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8013a66:	fbc9 650c 	smlal	r6, r5, r9, ip
 8013a6a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8013a6e:	9807      	ldr	r0, [sp, #28]
 8013a70:	fbcc 6500 	smlal	r6, r5, ip, r0
 8013a74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013a76:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8013a7a:	fbc7 6500 	smlal	r6, r5, r7, r0
 8013a7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  sword32 g4_19 = 19 * g4;
 8013a80:	fb0b f303 	mul.w	r3, fp, r3
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8013a84:	fbc0 650c 	smlal	r6, r5, r0, ip
 8013a88:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013a8a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8013a8e:	fbca 6503 	smlal	r6, r5, sl, r3
 8013a92:	fbc0 650c 	smlal	r6, r5, r0, ip
 8013a96:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013a98:	fbc8 6500 	smlal	r6, r5, r8, r0
 8013a9c:	9815      	ldr	r0, [sp, #84]	; 0x54
  sword32 g1_19 = 19 * g1; /* 1.959375*2^29 */
 8013a9e:	fb0b f204 	mul.w	r2, fp, r4
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8013aa2:	fbc0 6502 	smlal	r6, r5, r0, r2
  sword64 f1g0    = f1   * (sword64) g0;
 8013aa6:	9a08      	ldr	r2, [sp, #32]
  sword64 h1 = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
 8013aa8:	9801      	ldr	r0, [sp, #4]
  sword64 h0 = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
 8013aaa:	961b      	str	r6, [sp, #108]	; 0x6c
  sword64 f1g0    = f1   * (sword64) g0;
 8013aac:	fb81 c202 	smull	ip, r2, r1, r2
  sword64 h1 = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
 8013ab0:	fbc0 c204 	smlal	ip, r2, r0, r4
 8013ab4:	9803      	ldr	r0, [sp, #12]
 8013ab6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013ab8:	fbc0 c209 	smlal	ip, r2, r0, r9
 8013abc:	9805      	ldr	r0, [sp, #20]
 8013abe:	fbc0 c206 	smlal	ip, r2, r0, r6
 8013ac2:	9807      	ldr	r0, [sp, #28]
 8013ac4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013ac6:	fbc0 c207 	smlal	ip, r2, r0, r7
 8013aca:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013acc:	fbc0 c206 	smlal	ip, r2, r0, r6
 8013ad0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013ad2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013ad4:	fbc0 c20a 	smlal	ip, r2, r0, sl
 8013ad8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013ada:	fbc3 c200 	smlal	ip, r2, r3, r0
 8013ade:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013ae0:	fbc0 c208 	smlal	ip, r2, r0, r8
 8013ae4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013ae6:	fbc0 c206 	smlal	ip, r2, r0, r6
 8013aea:	921c      	str	r2, [sp, #112]	; 0x70
 8013aec:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
  sword64 f1g1_2  = f1_2 * (sword64) g1;
 8013af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 8013af2:	e9dd 0c01 	ldrd	r0, ip, [sp, #4]
  sword64 f1g1_2  = f1_2 * (sword64) g1;
 8013af6:	fb84 6202 	smull	r6, r2, r4, r2
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 8013afa:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013afe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013b00:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013b04:	fbc1 6209 	smlal	r6, r2, r1, r9
 8013b08:	fbcc 6200 	smlal	r6, r2, ip, r0
 8013b0c:	9805      	ldr	r0, [sp, #20]
 8013b0e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8013b12:	fbc0 6207 	smlal	r6, r2, r0, r7
 8013b16:	9807      	ldr	r0, [sp, #28]
 8013b18:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013b1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b1e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8013b22:	fbc0 620a 	smlal	r6, r2, r0, sl
 8013b26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013b28:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013b2c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013b2e:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8013b32:	fbc3 6208 	smlal	r6, r2, r3, r8
 8013b36:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013b3a:	921d      	str	r2, [sp, #116]	; 0x74
  sword64 f1g2    = f1   * (sword64) g2;
 8013b3c:	9808      	ldr	r0, [sp, #32]
 8013b3e:	9a02      	ldr	r2, [sp, #8]
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 8013b40:	f8dd c010 	ldr.w	ip, [sp, #16]
  sword64 h2 = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
 8013b44:	9618      	str	r6, [sp, #96]	; 0x60
  sword64 f1g2    = f1   * (sword64) g2;
 8013b46:	fb82 6200 	smull	r6, r2, r2, r0
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 8013b4a:	9801      	ldr	r0, [sp, #4]
 8013b4c:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b52:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8013b56:	fbc4 6209 	smlal	r6, r2, r4, r9
 8013b5a:	fbc1 6200 	smlal	r6, r2, r1, r0
 8013b5e:	9803      	ldr	r0, [sp, #12]
 8013b60:	fbc0 6207 	smlal	r6, r2, r0, r7
 8013b64:	9805      	ldr	r0, [sp, #20]
 8013b66:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013b6a:	9807      	ldr	r0, [sp, #28]
 8013b6c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8013b70:	fbc0 620a 	smlal	r6, r2, r0, sl
 8013b74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b76:	fbc0 620c 	smlal	r6, r2, r0, ip
 8013b7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8013b7c:	f8dd c018 	ldr.w	ip, [sp, #24]
  sword64 h3 = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
 8013b80:	fbc0 6208 	smlal	r6, r2, r0, r8
 8013b84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013b86:	fbc3 6200 	smlal	r6, r2, r3, r0
 8013b8a:	e9cd 621e 	strd	r6, r2, [sp, #120]	; 0x78
  sword64 f1g3_2  = f1_2 * (sword64) g3;
 8013b8e:	9b04      	ldr	r3, [sp, #16]
 8013b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8013b92:	9801      	ldr	r0, [sp, #4]
 8013b94:	9e03      	ldr	r6, [sp, #12]
  sword64 f1g3_2  = f1_2 * (sword64) g3;
 8013b96:	fb83 2302 	smull	r2, r3, r3, r2
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8013b9a:	fbc0 230c 	smlal	r2, r3, r0, ip
 8013b9e:	9802      	ldr	r0, [sp, #8]
 8013ba0:	fbc0 2309 	smlal	r2, r3, r0, r9
 8013ba4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013ba6:	fbc4 2300 	smlal	r2, r3, r4, r0
 8013baa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013bac:	fbc1 2307 	smlal	r2, r3, r1, r7
 8013bb0:	fbc6 2300 	smlal	r2, r3, r6, r0
 8013bb4:	9805      	ldr	r0, [sp, #20]
 8013bb6:	fbc0 230a 	smlal	r2, r3, r0, sl
 8013bba:	9807      	ldr	r0, [sp, #28]
 8013bbc:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 8013bc0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  sword64 h4 = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
 8013bc2:	fbc0 230c 	smlal	r2, r3, r0, ip
 8013bc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013bc8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8013bcc:	fbc0 2308 	smlal	r2, r3, r0, r8
 8013bd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013bd2:	fbc0 230c 	smlal	r2, r3, r0, ip
 8013bd6:	9210      	str	r2, [sp, #64]	; 0x40
  sword64 f1g4    = f1   * (sword64) g4;
 8013bd8:	9808      	ldr	r0, [sp, #32]
 8013bda:	9a06      	ldr	r2, [sp, #24]
 8013bdc:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 8013be0:	9801      	ldr	r0, [sp, #4]
 8013be2:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013be6:	9804      	ldr	r0, [sp, #16]
 8013be8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013bea:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8013bee:	9802      	ldr	r0, [sp, #8]
 8013bf0:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013bf6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013bf8:	fbc4 2c07 	smlal	r2, ip, r4, r7
 8013bfc:	fbc1 2c00 	smlal	r2, ip, r1, r0
 8013c00:	9803      	ldr	r0, [sp, #12]
 8013c02:	fbc0 2c0a 	smlal	r2, ip, r0, sl
 8013c06:	9805      	ldr	r0, [sp, #20]
 8013c08:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c0c:	9807      	ldr	r0, [sp, #28]
 8013c0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013c10:	fbc0 2c08 	smlal	r2, ip, r0, r8
 8013c14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013c16:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c1a:	920e      	str	r2, [sp, #56]	; 0x38
  sword64 f1g5_2  = f1_2 * (sword64) g5;
 8013c1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 8013c20:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  sword64 h5 = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
 8013c22:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
  sword64 f1g5_2  = f1_2 * (sword64) g5;
 8013c26:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 8013c2a:	9801      	ldr	r0, [sp, #4]
 8013c2c:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c30:	9806      	ldr	r0, [sp, #24]
 8013c32:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013c34:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8013c38:	9804      	ldr	r0, [sp, #16]
 8013c3a:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c3e:	9802      	ldr	r0, [sp, #8]
 8013c40:	9e03      	ldr	r6, [sp, #12]
 8013c42:	fbc0 2c07 	smlal	r2, ip, r0, r7
 8013c46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013c48:	fbc4 2c00 	smlal	r2, ip, r4, r0
 8013c4c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013c4e:	fbc1 2c0a 	smlal	r2, ip, r1, sl
 8013c52:	fbc6 2c00 	smlal	r2, ip, r6, r0
 8013c56:	9805      	ldr	r0, [sp, #20]
 8013c58:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013c5a:	fbc0 2c08 	smlal	r2, ip, r0, r8
 8013c5e:	9807      	ldr	r0, [sp, #28]
 8013c60:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c64:	9207      	str	r2, [sp, #28]
  sword64 f1g6    = f1   * (sword64) g6;
 8013c66:	9808      	ldr	r0, [sp, #32]
 8013c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  sword64 h7 = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
 8013c6a:	9e16      	ldr	r6, [sp, #88]	; 0x58
  sword64 h6 = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
 8013c6c:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
  sword64 f1g6    = f1   * (sword64) g6;
 8013c70:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h7 = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
 8013c74:	9801      	ldr	r0, [sp, #4]
 8013c76:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013c7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013c7e:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8013c82:	9806      	ldr	r0, [sp, #24]
 8013c84:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c88:	9804      	ldr	r0, [sp, #16]
 8013c8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013c8c:	fbc0 2c07 	smlal	r2, ip, r0, r7
 8013c90:	9802      	ldr	r0, [sp, #8]
 8013c92:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013c96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013c98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013c9a:	fbc4 2c0a 	smlal	r2, ip, r4, sl
 8013c9e:	fbc1 2c00 	smlal	r2, ip, r1, r0
 8013ca2:	9803      	ldr	r0, [sp, #12]
 8013ca4:	fbc0 2c08 	smlal	r2, ip, r0, r8
 8013ca8:	9805      	ldr	r0, [sp, #20]
 8013caa:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013cae:	e9cd 2c22 	strd	r2, ip, [sp, #136]	; 0x88
  sword64 f1g7_2  = f1_2 * (sword64) g7;
 8013cb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013cb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 8013cb6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  sword64 f1g7_2  = f1_2 * (sword64) g7;
 8013cb8:	fb82 2c00 	smull	r2, ip, r2, r0
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 8013cbc:	9801      	ldr	r0, [sp, #4]
 8013cbe:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013cc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013cc4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013cc6:	fbc0 2c09 	smlal	r2, ip, r0, r9
 8013cca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013ccc:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013cd0:	9806      	ldr	r0, [sp, #24]
 8013cd2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013cd4:	fbc0 2c07 	smlal	r2, ip, r0, r7
 8013cd8:	9804      	ldr	r0, [sp, #16]
 8013cda:	fbc0 2c06 	smlal	r2, ip, r0, r6
 8013cde:	9802      	ldr	r0, [sp, #8]
 8013ce0:	fbc0 2c0a 	smlal	r2, ip, r0, sl
 8013ce4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013ce6:	9e03      	ldr	r6, [sp, #12]
 8013ce8:	fbc4 2c00 	smlal	r2, ip, r4, r0
 8013cec:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013cee:	fbc1 2c08 	smlal	r2, ip, r1, r8
 8013cf2:	fbc6 2c00 	smlal	r2, ip, r6, r0
 8013cf6:	9203      	str	r2, [sp, #12]
  sword64 f1g8    = f1   * (sword64) g8;
 8013cf8:	9808      	ldr	r0, [sp, #32]
 8013cfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8013cfc:	9e01      	ldr	r6, [sp, #4]
  sword64 h8 = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
 8013cfe:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8013d02:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  sword64 f1g8    = f1   * (sword64) g8;
 8013d06:	fb82 2000 	smull	r2, r0, r2, r0
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8013d0a:	fbc6 200c 	smlal	r2, r0, r6, ip
 8013d0e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8013d10:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8013d14:	fbc6 2009 	smlal	r2, r0, r6, r9
 8013d18:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013d1a:	fbc6 200c 	smlal	r2, r0, r6, ip
 8013d1e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8013d20:	fbc6 2007 	smlal	r2, r0, r6, r7
 8013d24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013d26:	9e06      	ldr	r6, [sp, #24]
 8013d28:	fbc6 2007 	smlal	r2, r0, r6, r7
 8013d2c:	9e04      	ldr	r6, [sp, #16]
 8013d2e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013d30:	fbc6 200a 	smlal	r2, r0, r6, sl
 8013d34:	9e02      	ldr	r6, [sp, #8]
 8013d36:	fbc6 2007 	smlal	r2, r0, r6, r7
 8013d3a:	fbc4 2008 	smlal	r2, r0, r4, r8
 8013d3e:	4684      	mov	ip, r0
 8013d40:	980c      	ldr	r0, [sp, #48]	; 0x30
    i.e. |h0| <= 1.4*2^60; narrower ranges for h2, h4, h6, h8
  |h1| <= (1.65*1.65*2^51*(1+1+19+19+19+19+19+19+19+19))
    i.e. |h1| <= 1.7*2^59; narrower ranges for h3, h5, h7, h9
  */

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013d42:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  /* |h0| <= 2^25 */
  /* |h4| <= 2^25 */
  /* |h1| <= 1.71*2^59 */
  /* |h5| <= 1.71*2^59 */

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8013d44:	9f18      	ldr	r7, [sp, #96]	; 0x60
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8013d46:	fbc1 2c00 	smlal	r2, ip, r1, r0
 8013d4a:	4616      	mov	r6, r2
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013d4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  sword64 h9 = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;
 8013d4e:	f8cd c020 	str.w	ip, [sp, #32]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013d52:	f112 7000 	adds.w	r0, r2, #33554432	; 0x2000000
 8013d56:	f145 0100 	adc.w	r1, r5, #0
 8013d5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d5c:	ea4f 6890 	mov.w	r8, r0, lsr #26
 8013d60:	ea48 1881 	orr.w	r8, r8, r1, lsl #6
 8013d64:	eb18 0802 	adds.w	r8, r8, r2
 8013d68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d6a:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8013d6e:	eb42 62a1 	adc.w	r2, r2, r1, asr #26
 8013d72:	1a20      	subs	r0, r4, r0
 8013d74:	eb65 0101 	sbc.w	r1, r5, r1
 8013d78:	910a      	str	r1, [sp, #40]	; 0x28
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013d7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013d7c:	9009      	str	r0, [sp, #36]	; 0x24
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013d7e:	f111 7400 	adds.w	r4, r1, #33554432	; 0x2000000
 8013d82:	f143 0500 	adc.w	r5, r3, #0
 8013d86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013d88:	0ea0      	lsrs	r0, r4, #26
 8013d8a:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
 8013d8e:	1840      	adds	r0, r0, r1
 8013d90:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013d92:	eb41 6ca5 	adc.w	ip, r1, r5, asr #26
 8013d96:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013d98:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8013d9c:	1b09      	subs	r1, r1, r4
 8013d9e:	eb63 0305 	sbc.w	r3, r3, r5
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8013da2:	f118 7580 	adds.w	r5, r8, #16777216	; 0x1000000
 8013da6:	f142 0200 	adc.w	r2, r2, #0
 8013daa:	0e6c      	lsrs	r4, r5, #25
 8013dac:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 8013db0:	19e4      	adds	r4, r4, r7
 8013db2:	9404      	str	r4, [sp, #16]
 8013db4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8013db6:	9f07      	ldr	r7, [sp, #28]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 8013db8:	f005 457e 	and.w	r5, r5, #4261412864	; 0xfe000000
 8013dbc:	eb44 6262 	adc.w	r2, r4, r2, asr #25
 8013dc0:	ebb8 0405 	subs.w	r4, r8, r5
 8013dc4:	940b      	str	r4, [sp, #44]	; 0x2c
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 8013dc6:	f110 7480 	adds.w	r4, r0, #16777216	; 0x1000000
 8013dca:	f14c 0c00 	adc.w	ip, ip, #0
 8013dce:	0e65      	lsrs	r5, r4, #25
 8013dd0:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 8013dd4:	19ed      	adds	r5, r5, r7
 8013dd6:	9505      	str	r5, [sp, #20]
 8013dd8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013dda:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 8013dde:	eb45 6c6c 	adc.w	ip, r5, ip, asr #25
 8013de2:	1b00      	subs	r0, r0, r4
 8013de4:	900c      	str	r0, [sp, #48]	; 0x30
  /* |h1| <= 2^24; from now on fits into int32 */
  /* |h5| <= 2^24; from now on fits into int32 */
  /* |h2| <= 1.41*2^60 */
  /* |h6| <= 1.41*2^60 */

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8013de6:	9804      	ldr	r0, [sp, #16]
 8013de8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8013dea:	f110 7000 	adds.w	r0, r0, #33554432	; 0x2000000
 8013dee:	9001      	str	r0, [sp, #4]
 8013df0:	f142 0200 	adc.w	r2, r2, #0
 8013df4:	0e80      	lsrs	r0, r0, #26
 8013df6:	ea40 1082 	orr.w	r0, r0, r2, lsl #6
 8013dfa:	1900      	adds	r0, r0, r4
 8013dfc:	9006      	str	r0, [sp, #24]
 8013dfe:	981f      	ldr	r0, [sp, #124]	; 0x7c
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013e00:	9c22      	ldr	r4, [sp, #136]	; 0x88
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8013e02:	eb40 62a2 	adc.w	r2, r0, r2, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013e06:	9805      	ldr	r0, [sp, #20]
 8013e08:	f110 7000 	adds.w	r0, r0, #33554432	; 0x2000000
 8013e0c:	9002      	str	r0, [sp, #8]
 8013e0e:	f14c 0c00 	adc.w	ip, ip, #0
 8013e12:	0e80      	lsrs	r0, r0, #26
 8013e14:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
 8013e18:	1900      	adds	r0, r0, r4
 8013e1a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8013e1c:	eb44 6cac 	adc.w	ip, r4, ip, asr #26
  /* |h2| <= 2^25; from now on fits into int32 unchanged */
  /* |h6| <= 2^25; from now on fits into int32 unchanged */
  /* |h3| <= 1.71*2^59 */
  /* |h7| <= 1.71*2^59 */

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8013e20:	9c06      	ldr	r4, [sp, #24]
 8013e22:	f114 7a80 	adds.w	sl, r4, #16777216	; 0x1000000
 8013e26:	f142 0200 	adc.w	r2, r2, #0
 8013e2a:	ea4f 645a 	mov.w	r4, sl, lsr #25
 8013e2e:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 8013e32:	1864      	adds	r4, r4, r1
 8013e34:	eb43 6362 	adc.w	r3, r3, r2, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013e38:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 8013e3c:	9a03      	ldr	r2, [sp, #12]
 8013e3e:	f14c 0c00 	adc.w	ip, ip, #0
 8013e42:	ea4f 6159 	mov.w	r1, r9, lsr #25
 8013e46:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 8013e4a:	1889      	adds	r1, r1, r2
 8013e4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e4e:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  /* |h3| <= 2^24; from now on fits into int32 unchanged */
  /* |h7| <= 2^24; from now on fits into int32 unchanged */
  /* |h4| <= 1.72*2^34 */
  /* |h8| <= 1.41*2^60 */

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013e52:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 8013e56:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013e5a:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 8013e5e:	f14c 0c00 	adc.w	ip, ip, #0
 8013e62:	ea4f 6298 	mov.w	r2, r8, lsr #26
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013e66:	9307      	str	r3, [sp, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013e68:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8013e6c:	9b08      	ldr	r3, [sp, #32]
 8013e6e:	1992      	adds	r2, r2, r6
 8013e70:	eb43 6cac 	adc.w	ip, r3, ip, asr #26
  /* |h4| <= 2^25; from now on fits into int32 unchanged */
  /* |h8| <= 2^25; from now on fits into int32 unchanged */
  /* |h5| <= 1.01*2^24 */
  /* |h9| <= 1.71*2^59 */

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8013e74:	f112 7380 	adds.w	r3, r2, #16777216	; 0x1000000
 8013e78:	f14c 0c00 	adc.w	ip, ip, #0
 8013e7c:	0e5d      	lsrs	r5, r3, #25
 8013e7e:	9303      	str	r3, [sp, #12]
 8013e80:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 8013e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e86:	fba5 650b 	umull	r6, r5, r5, fp
 8013e8a:	18f6      	adds	r6, r6, r3
 8013e8c:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 8013e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e92:	fb0b 550c 	mla	r5, fp, ip, r5
 8013e96:	eb45 0503 	adc.w	r5, r5, r3
  /* |h9| <= 2^24; from now on fits into int32 unchanged */
  /* |h0| <= 1.1*2^39 */

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8013e9a:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000
 8013e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ea0:	f145 0500 	adc.w	r5, r5, #0
 8013ea4:	f00c 4b7c 	and.w	fp, ip, #4227858432	; 0xfc000000
 8013ea8:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 8013eac:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 8013eb0:	ebb6 060b 	subs.w	r6, r6, fp
 8013eb4:	eb1c 0503 	adds.w	r5, ip, r3
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8013eb8:	9b01      	ldr	r3, [sp, #4]
  /* |h0| <= 2^25; from now on fits into int32 unchanged */
  /* |h1| <= 1.01*2^24 */

  h[0] = (sword32)h0;
  h[1] = (sword32)h1;
 8013eba:	f8ce 5004 	str.w	r5, [lr, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8013ebe:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 8013ec2:	9b04      	ldr	r3, [sp, #16]
  h[0] = (sword32)h0;
 8013ec4:	f8ce 6000 	str.w	r6, [lr]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8013ec8:	1b5d      	subs	r5, r3, r5
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8013eca:	9b06      	ldr	r3, [sp, #24]
  h[2] = (sword32)h2;
 8013ecc:	f8ce 5008 	str.w	r5, [lr, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8013ed0:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 8013ed4:	ebb3 050a 	subs.w	r5, r3, sl
  h[3] = (sword32)h3;
 8013ed8:	f8ce 500c 	str.w	r5, [lr, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013edc:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 8013ee0:	1b64      	subs	r4, r4, r5
  h[4] = (sword32)h4;
 8013ee2:	f8ce 4010 	str.w	r4, [lr, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013ee6:	9b07      	ldr	r3, [sp, #28]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013ee8:	9c05      	ldr	r4, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8013eea:	0ebf      	lsrs	r7, r7, #26
 8013eec:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 8013ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ef2:	18ff      	adds	r7, r7, r3
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013ef4:	9b02      	ldr	r3, [sp, #8]
  h[5] = (sword32)h5;
 8013ef6:	f8ce 7014 	str.w	r7, [lr, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8013efa:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8013efe:	1ae3      	subs	r3, r4, r3
  h[6] = (sword32)h6;
 8013f00:	f8ce 3018 	str.w	r3, [lr, #24]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8013f04:	9b03      	ldr	r3, [sp, #12]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013f06:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013f0a:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8013f0e:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8013f12:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8013f16:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8013f1a:	1ad2      	subs	r2, r2, r3
  h[7] = (sword32)h7;
 8013f1c:	f8ce 001c 	str.w	r0, [lr, #28]
  h[8] = (sword32)h8;
 8013f20:	f8ce 1020 	str.w	r1, [lr, #32]
  h[9] = (sword32)h9;
 8013f24:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
}
 8013f28:	b025      	add	sp, #148	; 0x94
 8013f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f2e <fe_invert>:
{
 8013f2e:	b530      	push	{r4, r5, lr}
 8013f30:	b0a9      	sub	sp, #164	; 0xa4
 8013f32:	460c      	mov	r4, r1
  fe t0 = {0};
 8013f34:	2228      	movs	r2, #40	; 0x28
 8013f36:	2100      	movs	r1, #0
{
 8013f38:	4605      	mov	r5, r0
  fe t0 = {0};
 8013f3a:	4668      	mov	r0, sp
 8013f3c:	f007 f878 	bl	801b030 <memset>
  fe t1 = {0};
 8013f40:	2228      	movs	r2, #40	; 0x28
 8013f42:	2100      	movs	r1, #0
 8013f44:	eb0d 0002 	add.w	r0, sp, r2
 8013f48:	f007 f872 	bl	801b030 <memset>
  fe t2 = {0};
 8013f4c:	2228      	movs	r2, #40	; 0x28
 8013f4e:	2100      	movs	r1, #0
 8013f50:	a814      	add	r0, sp, #80	; 0x50
 8013f52:	f007 f86d 	bl	801b030 <memset>
  fe t3 = {0};
 8013f56:	2228      	movs	r2, #40	; 0x28
 8013f58:	2100      	movs	r1, #0
 8013f5a:	a81e      	add	r0, sp, #120	; 0x78
 8013f5c:	f007 f868 	bl	801b030 <memset>
  fe_sq(t0,z); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 8013f60:	4621      	mov	r1, r4
 8013f62:	4668      	mov	r0, sp
 8013f64:	f7ff f914 	bl	8013190 <fe_sq>
  fe_sq(t1,t0); for (i = 1;i < 2;++i) fe_sq(t1,t1);
 8013f68:	4669      	mov	r1, sp
 8013f6a:	a80a      	add	r0, sp, #40	; 0x28
 8013f6c:	f7ff f910 	bl	8013190 <fe_sq>
 8013f70:	a90a      	add	r1, sp, #40	; 0x28
 8013f72:	4608      	mov	r0, r1
 8013f74:	f7ff f90c 	bl	8013190 <fe_sq>
  fe_mul(t1,z,t1);
 8013f78:	aa0a      	add	r2, sp, #40	; 0x28
 8013f7a:	4621      	mov	r1, r4
 8013f7c:	4610      	mov	r0, r2
 8013f7e:	f7ff fd14 	bl	80139aa <fe_mul>
  fe_mul(t0,t0,t1);
 8013f82:	aa0a      	add	r2, sp, #40	; 0x28
 8013f84:	4669      	mov	r1, sp
 8013f86:	4668      	mov	r0, sp
 8013f88:	f7ff fd0f 	bl	80139aa <fe_mul>
  fe_sq(t2,t0); for (i = 1;i < 1;++i) fe_sq(t2,t2);
 8013f8c:	4669      	mov	r1, sp
 8013f8e:	a814      	add	r0, sp, #80	; 0x50
 8013f90:	f7ff f8fe 	bl	8013190 <fe_sq>
  fe_mul(t1,t1,t2);
 8013f94:	a90a      	add	r1, sp, #40	; 0x28
 8013f96:	4608      	mov	r0, r1
 8013f98:	aa14      	add	r2, sp, #80	; 0x50
 8013f9a:	f7ff fd06 	bl	80139aa <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 5;++i) fe_sq(t2,t2);
 8013f9e:	a90a      	add	r1, sp, #40	; 0x28
 8013fa0:	a814      	add	r0, sp, #80	; 0x50
 8013fa2:	f7ff f8f5 	bl	8013190 <fe_sq>
 8013fa6:	2404      	movs	r4, #4
 8013fa8:	a914      	add	r1, sp, #80	; 0x50
 8013faa:	4608      	mov	r0, r1
 8013fac:	f7ff f8f0 	bl	8013190 <fe_sq>
 8013fb0:	3c01      	subs	r4, #1
 8013fb2:	d1f9      	bne.n	8013fa8 <fe_invert+0x7a>
  fe_mul(t1,t2,t1);
 8013fb4:	aa0a      	add	r2, sp, #40	; 0x28
 8013fb6:	4610      	mov	r0, r2
 8013fb8:	a914      	add	r1, sp, #80	; 0x50
 8013fba:	f7ff fcf6 	bl	80139aa <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 10;++i) fe_sq(t2,t2);
 8013fbe:	a90a      	add	r1, sp, #40	; 0x28
 8013fc0:	a814      	add	r0, sp, #80	; 0x50
 8013fc2:	f7ff f8e5 	bl	8013190 <fe_sq>
 8013fc6:	2409      	movs	r4, #9
 8013fc8:	a914      	add	r1, sp, #80	; 0x50
 8013fca:	4608      	mov	r0, r1
 8013fcc:	f7ff f8e0 	bl	8013190 <fe_sq>
 8013fd0:	3c01      	subs	r4, #1
 8013fd2:	d1f9      	bne.n	8013fc8 <fe_invert+0x9a>
  fe_mul(t2,t2,t1);
 8013fd4:	a914      	add	r1, sp, #80	; 0x50
 8013fd6:	4608      	mov	r0, r1
 8013fd8:	aa0a      	add	r2, sp, #40	; 0x28
 8013fda:	f7ff fce6 	bl	80139aa <fe_mul>
  fe_sq(t3,t2); for (i = 1;i < 20;++i) fe_sq(t3,t3);
 8013fde:	a914      	add	r1, sp, #80	; 0x50
 8013fe0:	a81e      	add	r0, sp, #120	; 0x78
 8013fe2:	f7ff f8d5 	bl	8013190 <fe_sq>
 8013fe6:	2413      	movs	r4, #19
 8013fe8:	a91e      	add	r1, sp, #120	; 0x78
 8013fea:	4608      	mov	r0, r1
 8013fec:	f7ff f8d0 	bl	8013190 <fe_sq>
 8013ff0:	3c01      	subs	r4, #1
 8013ff2:	d1f9      	bne.n	8013fe8 <fe_invert+0xba>
  fe_mul(t2,t3,t2);
 8013ff4:	aa14      	add	r2, sp, #80	; 0x50
 8013ff6:	4610      	mov	r0, r2
 8013ff8:	a91e      	add	r1, sp, #120	; 0x78
 8013ffa:	f7ff fcd6 	bl	80139aa <fe_mul>
  fe_sq(t2,t2); for (i = 1;i < 10;++i) fe_sq(t2,t2);
 8013ffe:	a914      	add	r1, sp, #80	; 0x50
 8014000:	4608      	mov	r0, r1
 8014002:	f7ff f8c5 	bl	8013190 <fe_sq>
 8014006:	2409      	movs	r4, #9
 8014008:	a914      	add	r1, sp, #80	; 0x50
 801400a:	4608      	mov	r0, r1
 801400c:	f7ff f8c0 	bl	8013190 <fe_sq>
 8014010:	3c01      	subs	r4, #1
 8014012:	d1f9      	bne.n	8014008 <fe_invert+0xda>
  fe_mul(t1,t2,t1);
 8014014:	aa0a      	add	r2, sp, #40	; 0x28
 8014016:	4610      	mov	r0, r2
 8014018:	a914      	add	r1, sp, #80	; 0x50
 801401a:	f7ff fcc6 	bl	80139aa <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 50;++i) fe_sq(t2,t2);
 801401e:	a90a      	add	r1, sp, #40	; 0x28
 8014020:	a814      	add	r0, sp, #80	; 0x50
 8014022:	f7ff f8b5 	bl	8013190 <fe_sq>
 8014026:	2431      	movs	r4, #49	; 0x31
 8014028:	a914      	add	r1, sp, #80	; 0x50
 801402a:	4608      	mov	r0, r1
 801402c:	f7ff f8b0 	bl	8013190 <fe_sq>
 8014030:	3c01      	subs	r4, #1
 8014032:	d1f9      	bne.n	8014028 <fe_invert+0xfa>
  fe_mul(t2,t2,t1);
 8014034:	a914      	add	r1, sp, #80	; 0x50
 8014036:	4608      	mov	r0, r1
 8014038:	aa0a      	add	r2, sp, #40	; 0x28
 801403a:	f7ff fcb6 	bl	80139aa <fe_mul>
  fe_sq(t3,t2); for (i = 1;i < 100;++i) fe_sq(t3,t3);
 801403e:	a914      	add	r1, sp, #80	; 0x50
 8014040:	a81e      	add	r0, sp, #120	; 0x78
 8014042:	f7ff f8a5 	bl	8013190 <fe_sq>
 8014046:	2463      	movs	r4, #99	; 0x63
 8014048:	a91e      	add	r1, sp, #120	; 0x78
 801404a:	4608      	mov	r0, r1
 801404c:	f7ff f8a0 	bl	8013190 <fe_sq>
 8014050:	3c01      	subs	r4, #1
 8014052:	d1f9      	bne.n	8014048 <fe_invert+0x11a>
  fe_mul(t2,t3,t2);
 8014054:	aa14      	add	r2, sp, #80	; 0x50
 8014056:	4610      	mov	r0, r2
 8014058:	a91e      	add	r1, sp, #120	; 0x78
 801405a:	f7ff fca6 	bl	80139aa <fe_mul>
  fe_sq(t2,t2); for (i = 1;i < 50;++i) fe_sq(t2,t2);
 801405e:	a914      	add	r1, sp, #80	; 0x50
 8014060:	4608      	mov	r0, r1
 8014062:	f7ff f895 	bl	8013190 <fe_sq>
 8014066:	2431      	movs	r4, #49	; 0x31
 8014068:	a914      	add	r1, sp, #80	; 0x50
 801406a:	4608      	mov	r0, r1
 801406c:	f7ff f890 	bl	8013190 <fe_sq>
 8014070:	3c01      	subs	r4, #1
 8014072:	d1f9      	bne.n	8014068 <fe_invert+0x13a>
  fe_mul(t1,t2,t1);
 8014074:	aa0a      	add	r2, sp, #40	; 0x28
 8014076:	4610      	mov	r0, r2
 8014078:	a914      	add	r1, sp, #80	; 0x50
 801407a:	f7ff fc96 	bl	80139aa <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 5;++i) fe_sq(t1,t1);
 801407e:	a90a      	add	r1, sp, #40	; 0x28
 8014080:	4608      	mov	r0, r1
 8014082:	f7ff f885 	bl	8013190 <fe_sq>
 8014086:	2404      	movs	r4, #4
 8014088:	a90a      	add	r1, sp, #40	; 0x28
 801408a:	4608      	mov	r0, r1
 801408c:	f7ff f880 	bl	8013190 <fe_sq>
 8014090:	3c01      	subs	r4, #1
 8014092:	d1f9      	bne.n	8014088 <fe_invert+0x15a>
  fe_mul(out,t1,t0);
 8014094:	466a      	mov	r2, sp
 8014096:	a90a      	add	r1, sp, #40	; 0x28
 8014098:	4628      	mov	r0, r5
 801409a:	f7ff fc86 	bl	80139aa <fe_mul>
}
 801409e:	b029      	add	sp, #164	; 0xa4
 80140a0:	bd30      	pop	{r4, r5, pc}

080140a2 <fe_cswap>:

Preconditions: b in {0,1}.
*/

void fe_cswap(fe f, fe g, int b)
{
 80140a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a6:	b08b      	sub	sp, #44	; 0x2c
  sword32 f5 = f[5];
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword32 g0 = g[0];
 80140a8:	680b      	ldr	r3, [r1, #0]
 80140aa:	9301      	str	r3, [sp, #4]
  sword32 g5 = g[5];
  sword32 g6 = g[6];
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 x0 = f0 ^ g0;
 80140ac:	6804      	ldr	r4, [r0, #0]
  sword32 g1 = g[1];
 80140ae:	684b      	ldr	r3, [r1, #4]
  sword32 x0 = f0 ^ g0;
 80140b0:	9d01      	ldr	r5, [sp, #4]
  sword32 g1 = g[1];
 80140b2:	9302      	str	r3, [sp, #8]
  sword32 x0 = f0 ^ g0;
 80140b4:	ea84 0a05 	eor.w	sl, r4, r5
  sword32 g2 = g[2];
 80140b8:	688b      	ldr	r3, [r1, #8]
  sword32 x1 = f1 ^ g1;
 80140ba:	6844      	ldr	r4, [r0, #4]
 80140bc:	9d02      	ldr	r5, [sp, #8]
  sword32 g2 = g[2];
 80140be:	9303      	str	r3, [sp, #12]
  sword32 x1 = f1 ^ g1;
 80140c0:	ea84 0905 	eor.w	r9, r4, r5
  sword32 g3 = g[3];
 80140c4:	68cb      	ldr	r3, [r1, #12]
  sword32 x2 = f2 ^ g2;
 80140c6:	6884      	ldr	r4, [r0, #8]
 80140c8:	9d03      	ldr	r5, [sp, #12]
  sword32 g3 = g[3];
 80140ca:	9304      	str	r3, [sp, #16]
  sword32 x2 = f2 ^ g2;
 80140cc:	ea84 0805 	eor.w	r8, r4, r5
  sword32 g4 = g[4];
 80140d0:	690b      	ldr	r3, [r1, #16]
  sword32 x3 = f3 ^ g3;
 80140d2:	68c4      	ldr	r4, [r0, #12]
 80140d4:	9d04      	ldr	r5, [sp, #16]
  sword32 g4 = g[4];
 80140d6:	9305      	str	r3, [sp, #20]
  sword32 x3 = f3 ^ g3;
 80140d8:	ea84 0e05 	eor.w	lr, r4, r5
  sword32 g5 = g[5];
 80140dc:	694b      	ldr	r3, [r1, #20]
  sword32 x4 = f4 ^ g4;
 80140de:	6904      	ldr	r4, [r0, #16]
 80140e0:	9d05      	ldr	r5, [sp, #20]
  sword32 g5 = g[5];
 80140e2:	9306      	str	r3, [sp, #24]
  sword32 g6 = g[6];
 80140e4:	698b      	ldr	r3, [r1, #24]
 80140e6:	9307      	str	r3, [sp, #28]
  sword32 x4 = f4 ^ g4;
 80140e8:	ea84 0c05 	eor.w	ip, r4, r5
  sword32 g7 = g[7];
 80140ec:	69cb      	ldr	r3, [r1, #28]
  sword32 x5 = f5 ^ g5;
 80140ee:	9d06      	ldr	r5, [sp, #24]
 80140f0:	6944      	ldr	r4, [r0, #20]
  sword32 g7 = g[7];
 80140f2:	9308      	str	r3, [sp, #32]
  sword32 g8 = g[8];
 80140f4:	6a0b      	ldr	r3, [r1, #32]
 80140f6:	9309      	str	r3, [sp, #36]	; 0x24
  sword32 x5 = f5 ^ g5;
 80140f8:	ea84 0705 	eor.w	r7, r4, r5
  sword32 g9 = g[9];
 80140fc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  sword32 x6 = f6 ^ g6;
 80140fe:	6984      	ldr	r4, [r0, #24]
 8014100:	9d07      	ldr	r5, [sp, #28]
  sword32 x7 = f7 ^ g7;
  sword32 x8 = f8 ^ g8;
 8014102:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  sword32 x6 = f6 ^ g6;
 8014106:	ea84 0605 	eor.w	r6, r4, r5
  sword32 x7 = f7 ^ g7;
 801410a:	69c4      	ldr	r4, [r0, #28]
 801410c:	9d08      	ldr	r5, [sp, #32]
 801410e:	4065      	eors	r5, r4
  sword32 x8 = f8 ^ g8;
 8014110:	6a04      	ldr	r4, [r0, #32]
 8014112:	ea84 040b 	eor.w	r4, r4, fp
  sword32 x9 = f9 ^ g9;
 8014116:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  b = -b;
 801411a:	4252      	negs	r2, r2
  sword32 x9 = f9 ^ g9;
 801411c:	ea8b 0b03 	eor.w	fp, fp, r3
  x0 &= b;
 8014120:	ea0a 0a02 	and.w	sl, sl, r2
  x1 &= b;
 8014124:	ea09 0902 	and.w	r9, r9, r2
  x2 &= b;
 8014128:	ea08 0802 	and.w	r8, r8, r2
  x3 &= b;
 801412c:	ea0e 0e02 	and.w	lr, lr, r2
  x4 &= b;
 8014130:	ea0c 0c02 	and.w	ip, ip, r2
  x5 &= b;
 8014134:	4017      	ands	r7, r2
  x6 &= b;
 8014136:	4016      	ands	r6, r2
  x7 &= b;
 8014138:	4015      	ands	r5, r2
  x8 &= b;
 801413a:	4014      	ands	r4, r2
  x9 &= b;
 801413c:	ea0b 0202 	and.w	r2, fp, r2
  f[0] = f0 ^ x0;
 8014140:	f8d0 b000 	ldr.w	fp, [r0]
 8014144:	ea8b 0b0a 	eor.w	fp, fp, sl
 8014148:	f8c0 b000 	str.w	fp, [r0]
  f[1] = f1 ^ x1;
 801414c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8014150:	ea8b 0b09 	eor.w	fp, fp, r9
 8014154:	f8c0 b004 	str.w	fp, [r0, #4]
  f[2] = f2 ^ x2;
 8014158:	f8d0 b008 	ldr.w	fp, [r0, #8]
 801415c:	ea8b 0b08 	eor.w	fp, fp, r8
 8014160:	f8c0 b008 	str.w	fp, [r0, #8]
  f[3] = f3 ^ x3;
 8014164:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8014168:	ea8b 0b0e 	eor.w	fp, fp, lr
 801416c:	f8c0 b00c 	str.w	fp, [r0, #12]
  f[4] = f4 ^ x4;
 8014170:	f8d0 b010 	ldr.w	fp, [r0, #16]
 8014174:	ea8b 0b0c 	eor.w	fp, fp, ip
 8014178:	f8c0 b010 	str.w	fp, [r0, #16]
  f[5] = f5 ^ x5;
 801417c:	f8d0 b014 	ldr.w	fp, [r0, #20]
 8014180:	ea8b 0b07 	eor.w	fp, fp, r7
 8014184:	f8c0 b014 	str.w	fp, [r0, #20]
  f[6] = f6 ^ x6;
 8014188:	f8d0 b018 	ldr.w	fp, [r0, #24]
 801418c:	ea8b 0b06 	eor.w	fp, fp, r6
 8014190:	f8c0 b018 	str.w	fp, [r0, #24]
  f[7] = f7 ^ x7;
 8014194:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8014198:	ea8b 0b05 	eor.w	fp, fp, r5
 801419c:	f8c0 b01c 	str.w	fp, [r0, #28]
  f[8] = f8 ^ x8;
 80141a0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80141a4:	ea8b 0b04 	eor.w	fp, fp, r4
 80141a8:	f8c0 b020 	str.w	fp, [r0, #32]
  f[9] = f9 ^ x9;
 80141ac:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80141b0:	ea8b 0b02 	eor.w	fp, fp, r2
 80141b4:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
  g[0] = g0 ^ x0;
 80141b8:	9801      	ldr	r0, [sp, #4]
 80141ba:	ea80 000a 	eor.w	r0, r0, sl
 80141be:	6008      	str	r0, [r1, #0]
  g[1] = g1 ^ x1;
 80141c0:	9802      	ldr	r0, [sp, #8]
 80141c2:	ea80 0009 	eor.w	r0, r0, r9
 80141c6:	6048      	str	r0, [r1, #4]
  g[2] = g2 ^ x2;
 80141c8:	9803      	ldr	r0, [sp, #12]
 80141ca:	ea80 0008 	eor.w	r0, r0, r8
 80141ce:	6088      	str	r0, [r1, #8]
  g[3] = g3 ^ x3;
 80141d0:	9804      	ldr	r0, [sp, #16]
 80141d2:	ea80 000e 	eor.w	r0, r0, lr
 80141d6:	60c8      	str	r0, [r1, #12]
  g[4] = g4 ^ x4;
 80141d8:	9805      	ldr	r0, [sp, #20]
 80141da:	ea80 000c 	eor.w	r0, r0, ip
 80141de:	6108      	str	r0, [r1, #16]
  g[5] = g5 ^ x5;
 80141e0:	9806      	ldr	r0, [sp, #24]
 80141e2:	4047      	eors	r7, r0
  g[6] = g6 ^ x6;
 80141e4:	9807      	ldr	r0, [sp, #28]
  g[5] = g5 ^ x5;
 80141e6:	614f      	str	r7, [r1, #20]
  g[6] = g6 ^ x6;
 80141e8:	4046      	eors	r6, r0
  g[7] = g7 ^ x7;
 80141ea:	9808      	ldr	r0, [sp, #32]
  g[6] = g6 ^ x6;
 80141ec:	618e      	str	r6, [r1, #24]
  g[7] = g7 ^ x7;
 80141ee:	4045      	eors	r5, r0
  g[8] = g8 ^ x8;
 80141f0:	9809      	ldr	r0, [sp, #36]	; 0x24
  g[7] = g7 ^ x7;
 80141f2:	61cd      	str	r5, [r1, #28]
  g[8] = g8 ^ x8;
 80141f4:	4044      	eors	r4, r0
  g[9] = g9 ^ x9;
 80141f6:	405a      	eors	r2, r3
  g[8] = g8 ^ x8;
 80141f8:	620c      	str	r4, [r1, #32]
  g[9] = g9 ^ x9;
 80141fa:	624a      	str	r2, [r1, #36]	; 0x24
}
 80141fc:	b00b      	add	sp, #44	; 0x2c
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014204 <fe_mul121666>:
Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_mul121666(fe h,fe f)
{
 8014204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 f5 = f[5];
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword64 h0 = f0 * (sword64) 121666;
 8014208:	4b68      	ldr	r3, [pc, #416]	; (80143ac <fe_mul121666+0x1a8>)
 801420a:	680a      	ldr	r2, [r1, #0]
  sword64 h1 = f1 * (sword64) 121666;
 801420c:	684e      	ldr	r6, [r1, #4]
  sword64 h2 = f2 * (sword64) 121666;
  sword64 h3 = f3 * (sword64) 121666;
 801420e:	68cd      	ldr	r5, [r1, #12]
{
 8014210:	b08b      	sub	sp, #44	; 0x2c
  sword64 h0 = f0 * (sword64) 121666;
 8014212:	fb82 9803 	smull	r9, r8, r2, r3
  sword64 h1 = f1 * (sword64) 121666;
 8014216:	fb86 6203 	smull	r6, r2, r6, r3
 801421a:	9202      	str	r2, [sp, #8]
  sword64 h3 = f3 * (sword64) 121666;
 801421c:	fb85 5203 	smull	r5, r2, r5, r3
 8014220:	9203      	str	r2, [sp, #12]
  sword64 h4 = f4 * (sword64) 121666;
  sword64 h5 = f5 * (sword64) 121666;
 8014222:	694a      	ldr	r2, [r1, #20]
 8014224:	fb82 c203 	smull	ip, r2, r2, r3
 8014228:	9204      	str	r2, [sp, #16]
  sword64 h6 = f6 * (sword64) 121666;
  sword64 h7 = f7 * (sword64) 121666;
 801422a:	69ca      	ldr	r2, [r1, #28]
 801422c:	fb82 2403 	smull	r2, r4, r2, r3
 8014230:	9201      	str	r2, [sp, #4]
  sword64 h8 = f8 * (sword64) 121666;
  sword64 h9 = f9 * (sword64) 121666;
 8014232:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  sword64 h7 = f7 * (sword64) 121666;
 8014234:	9405      	str	r4, [sp, #20]
  sword64 h9 = f9 * (sword64) 121666;
 8014236:	fb82 a403 	smull	sl, r4, r2, r3
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 801423a:	f11a 7e80 	adds.w	lr, sl, #16777216	; 0x1000000
 801423e:	f144 0400 	adc.w	r4, r4, #0
 8014242:	ea4f 675e 	mov.w	r7, lr, lsr #25
 8014246:	f04f 0b13 	mov.w	fp, #19
 801424a:	ea47 17c4 	orr.w	r7, r7, r4, lsl #7
 801424e:	fba7 720b 	umull	r7, r2, r7, fp
 8014252:	1664      	asrs	r4, r4, #25
 8014254:	eb17 0909 	adds.w	r9, r7, r9
 8014258:	fb0b 2204 	mla	r2, fp, r4, r2
 801425c:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
 8014260:	eb42 0808 	adc.w	r8, r2, r8
 8014264:	ebba 020e 	subs.w	r2, sl, lr
 8014268:	9206      	str	r2, [sp, #24]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 801426a:	9a02      	ldr	r2, [sp, #8]
 801426c:	f116 7480 	adds.w	r4, r6, #16777216	; 0x1000000
 8014270:	f142 0b00 	adc.w	fp, r2, #0
 8014274:	0e67      	lsrs	r7, r4, #25
 8014276:	688a      	ldr	r2, [r1, #8]
 8014278:	ea47 17cb 	orr.w	r7, r7, fp, lsl #7
 801427c:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 8014280:	ea4f 6b6b 	mov.w	fp, fp, asr #25
 8014284:	fbc2 7b03 	smlal	r7, fp, r2, r3
 8014288:	1b32      	subs	r2, r6, r4
 801428a:	9207      	str	r2, [sp, #28]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 801428c:	9a03      	ldr	r2, [sp, #12]
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 801428e:	9702      	str	r7, [sp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8014290:	f115 7480 	adds.w	r4, r5, #16777216	; 0x1000000
 8014294:	f142 0e00 	adc.w	lr, r2, #0
 8014298:	0e66      	lsrs	r6, r4, #25
 801429a:	690a      	ldr	r2, [r1, #16]
 801429c:	ea46 16ce 	orr.w	r6, r6, lr, lsl #7
 80142a0:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 80142a4:	ea4f 6e6e 	mov.w	lr, lr, asr #25
 80142a8:	fbc2 6e03 	smlal	r6, lr, r2, r3
 80142ac:	1b2a      	subs	r2, r5, r4
 80142ae:	9208      	str	r2, [sp, #32]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80142b0:	9a04      	ldr	r2, [sp, #16]
 80142b2:	698c      	ldr	r4, [r1, #24]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80142b4:	9603      	str	r6, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80142b6:	f11c 7580 	adds.w	r5, ip, #16777216	; 0x1000000
 80142ba:	f142 0700 	adc.w	r7, r2, #0
 80142be:	f005 427e 	and.w	r2, r5, #4261412864	; 0xfe000000
 80142c2:	ebbc 0202 	subs.w	r2, ip, r2
 80142c6:	9209      	str	r2, [sp, #36]	; 0x24
 80142c8:	0e6e      	lsrs	r6, r5, #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80142ca:	9a01      	ldr	r2, [sp, #4]
 80142cc:	f8d1 c020 	ldr.w	ip, [r1, #32]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80142d0:	ea46 16c7 	orr.w	r6, r6, r7, lsl #7
 80142d4:	167f      	asrs	r7, r7, #25
 80142d6:	fbc4 6703 	smlal	r6, r7, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80142da:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 80142de:	9a05      	ldr	r2, [sp, #20]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80142e0:	9604      	str	r6, [sp, #16]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 80142e2:	f142 0500 	adc.w	r5, r2, #0
 80142e6:	0e66      	lsrs	r6, r4, #25
 80142e8:	ea46 16c5 	orr.w	r6, r6, r5, lsl #7
 80142ec:	166d      	asrs	r5, r5, #25
 80142ee:	4629      	mov	r1, r5
 80142f0:	fbcc 6103 	smlal	r6, r1, ip, r3
 80142f4:	9b01      	ldr	r3, [sp, #4]
 80142f6:	9605      	str	r6, [sp, #20]
 80142f8:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 80142fc:	1b1c      	subs	r4, r3, r4

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80142fe:	9b02      	ldr	r3, [sp, #8]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8014300:	f119 7600 	adds.w	r6, r9, #33554432	; 0x2000000
 8014304:	f148 0800 	adc.w	r8, r8, #0
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8014308:	f113 7500 	adds.w	r5, r3, #33554432	; 0x2000000
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801430c:	9b03      	ldr	r3, [sp, #12]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 801430e:	f14b 0b00 	adc.w	fp, fp, #0
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8014312:	f113 7c00 	adds.w	ip, r3, #33554432	; 0x2000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8014316:	9b04      	ldr	r3, [sp, #16]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014318:	9a05      	ldr	r2, [sp, #20]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801431a:	f14e 0e00 	adc.w	lr, lr, #0
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801431e:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 8014322:	f147 0700 	adc.w	r7, r7, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014326:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801432a:	f006 427c 	and.w	r2, r6, #4227858432	; 0xfc000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801432e:	f141 0100 	adc.w	r1, r1, #0
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8014332:	0eb6      	lsrs	r6, r6, #26
 8014334:	ebb9 0902 	subs.w	r9, r9, r2
 8014338:	9a07      	ldr	r2, [sp, #28]

  h[0] = (sword32)h0;
 801433a:	f8c0 9000 	str.w	r9, [r0]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801433e:	ea46 1688 	orr.w	r6, r6, r8, lsl #6
 8014342:	18b6      	adds	r6, r6, r2
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8014344:	9a02      	ldr	r2, [sp, #8]
  h[1] = (sword32)h1;
 8014346:	6046      	str	r6, [r0, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8014348:	f005 467c 	and.w	r6, r5, #4227858432	; 0xfc000000
 801434c:	1b96      	subs	r6, r2, r6
 801434e:	0ead      	lsrs	r5, r5, #26
 8014350:	9a08      	ldr	r2, [sp, #32]
  h[2] = (sword32)h2;
 8014352:	6086      	str	r6, [r0, #8]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8014354:	ea45 158b 	orr.w	r5, r5, fp, lsl #6
 8014358:	18ad      	adds	r5, r5, r2
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801435a:	9a03      	ldr	r2, [sp, #12]
  h[3] = (sword32)h3;
 801435c:	60c5      	str	r5, [r0, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801435e:	f00c 467c 	and.w	r6, ip, #4227858432	; 0xfc000000
 8014362:	1b96      	subs	r6, r2, r6
 8014364:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 8014368:	9a09      	ldr	r2, [sp, #36]	; 0x24
  h[4] = (sword32)h4;
 801436a:	6106      	str	r6, [r0, #16]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801436c:	ea4c 1c8e 	orr.w	ip, ip, lr, lsl #6
 8014370:	eb1c 0202 	adds.w	r2, ip, r2
  h[5] = (sword32)h5;
 8014374:	6142      	str	r2, [r0, #20]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8014376:	f003 467c 	and.w	r6, r3, #4227858432	; 0xfc000000
 801437a:	9a04      	ldr	r2, [sp, #16]
 801437c:	0e9b      	lsrs	r3, r3, #26
 801437e:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8014382:	1b96      	subs	r6, r2, r6
 8014384:	191b      	adds	r3, r3, r4
  h[6] = (sword32)h6;
  h[7] = (sword32)h7;
 8014386:	61c3      	str	r3, [r0, #28]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014388:	9b05      	ldr	r3, [sp, #20]
  h[6] = (sword32)h6;
 801438a:	6186      	str	r6, [r0, #24]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801438c:	f00a 467c 	and.w	r6, sl, #4227858432	; 0xfc000000
 8014390:	1b9e      	subs	r6, r3, r6
 8014392:	ea4f 6a9a 	mov.w	sl, sl, lsr #26
 8014396:	9b06      	ldr	r3, [sp, #24]
  h[8] = (sword32)h8;
 8014398:	6206      	str	r6, [r0, #32]
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 801439a:	ea4a 1a81 	orr.w	sl, sl, r1, lsl #6
 801439e:	eb1a 0203 	adds.w	r2, sl, r3
  h[9] = (sword32)h9;
 80143a2:	6242      	str	r2, [r0, #36]	; 0x24
}
 80143a4:	b00b      	add	sp, #44	; 0x2c
 80143a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143aa:	bf00      	nop
 80143ac:	0001db42 	.word	0x0001db42

080143b0 <curve25519>:
{
 80143b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b4:	b0c7      	sub	sp, #284	; 0x11c
 80143b6:	4616      	mov	r6, r2
  fe x2 = {0};
 80143b8:	ac0a      	add	r4, sp, #40	; 0x28
  fe x1 = {0};
 80143ba:	2228      	movs	r2, #40	; 0x28
{
 80143bc:	4682      	mov	sl, r0
 80143be:	468b      	mov	fp, r1
  fe x1 = {0};
 80143c0:	4668      	mov	r0, sp
 80143c2:	2100      	movs	r1, #0
 80143c4:	f006 fe34 	bl	801b030 <memset>
  fe x2 = {0};
 80143c8:	2228      	movs	r2, #40	; 0x28
 80143ca:	2100      	movs	r1, #0
 80143cc:	4620      	mov	r0, r4
 80143ce:	f006 fe2f 	bl	801b030 <memset>
  fe x3 = {0};
 80143d2:	ad1e      	add	r5, sp, #120	; 0x78
  fe z2 = {0};
 80143d4:	2228      	movs	r2, #40	; 0x28
 80143d6:	2100      	movs	r1, #0
 80143d8:	a814      	add	r0, sp, #80	; 0x50
 80143da:	f006 fe29 	bl	801b030 <memset>
  fe x3 = {0};
 80143de:	2228      	movs	r2, #40	; 0x28
 80143e0:	2100      	movs	r1, #0
 80143e2:	4628      	mov	r0, r5
 80143e4:	f006 fe24 	bl	801b030 <memset>
  fe z3 = {0};
 80143e8:	2228      	movs	r2, #40	; 0x28
 80143ea:	2100      	movs	r1, #0
 80143ec:	a828      	add	r0, sp, #160	; 0xa0
 80143ee:	f006 fe1f 	bl	801b030 <memset>
  fe tmp0 = {0};
 80143f2:	2228      	movs	r2, #40	; 0x28
 80143f4:	2100      	movs	r1, #0
 80143f6:	a832      	add	r0, sp, #200	; 0xc8
 80143f8:	f006 fe1a 	bl	801b030 <memset>
  fe tmp1 = {0};
 80143fc:	2228      	movs	r2, #40	; 0x28
 80143fe:	2100      	movs	r1, #0
 8014400:	a83c      	add	r0, sp, #240	; 0xf0
 8014402:	f006 fe15 	bl	801b030 <memset>
  fe_frombytes(x1,p);
 8014406:	4631      	mov	r1, r6
 8014408:	4668      	mov	r0, sp
 801440a:	f7ff f9ac 	bl	8013766 <fe_frombytes>
  fe_1(x2);
 801440e:	4620      	mov	r0, r4
 8014410:	f7fe fea4 	bl	801315c <fe_1>
  fe_0(z2);
 8014414:	a814      	add	r0, sp, #80	; 0x50
 8014416:	f7fe feae 	bl	8013176 <fe_0>
  fe_copy(x3,x1);
 801441a:	4669      	mov	r1, sp
 801441c:	4628      	mov	r0, r5
 801441e:	f7ff faac 	bl	801397a <fe_copy>
  fe_1(z3);
 8014422:	a828      	add	r0, sp, #160	; 0xa0
 8014424:	f7fe fe9a 	bl	801315c <fe_1>
  swap = 0;
 8014428:	2700      	movs	r7, #0
  for (pos = 254;pos >= 0;--pos) {
 801442a:	f04f 08fe 	mov.w	r8, #254	; 0xfe
    fe_cswap(z2,z3,swap);
 801442e:	4606      	mov	r6, r0
    b = n[pos / 8] >> (pos & 7);
 8014430:	ea4f 03e8 	mov.w	r3, r8, asr #3
 8014434:	f008 0207 	and.w	r2, r8, #7
 8014438:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801443c:	4113      	asrs	r3, r2
    b &= 1;
 801443e:	46b9      	mov	r9, r7
 8014440:	f003 0701 	and.w	r7, r3, #1
    swap ^= b;
 8014444:	ea87 0909 	eor.w	r9, r7, r9
    fe_cswap(x2,x3,swap);
 8014448:	464a      	mov	r2, r9
 801444a:	4629      	mov	r1, r5
 801444c:	4620      	mov	r0, r4
 801444e:	f7ff fe28 	bl	80140a2 <fe_cswap>
    fe_cswap(z2,z3,swap);
 8014452:	464a      	mov	r2, r9
 8014454:	4631      	mov	r1, r6
 8014456:	a814      	add	r0, sp, #80	; 0x50
 8014458:	f7ff fe23 	bl	80140a2 <fe_cswap>
    fe_sub(tmp0,x3,z3);
 801445c:	4632      	mov	r2, r6
 801445e:	4629      	mov	r1, r5
 8014460:	a832      	add	r0, sp, #200	; 0xc8
 8014462:	f7ff f94f 	bl	8013704 <fe_sub>
    fe_sub(tmp1,x2,z2);
 8014466:	aa14      	add	r2, sp, #80	; 0x50
 8014468:	4621      	mov	r1, r4
 801446a:	a83c      	add	r0, sp, #240	; 0xf0
 801446c:	f7ff f94a 	bl	8013704 <fe_sub>
    fe_add(x2,x2,z2);
 8014470:	aa14      	add	r2, sp, #80	; 0x50
 8014472:	4621      	mov	r1, r4
 8014474:	4620      	mov	r0, r4
 8014476:	f7ff f863 	bl	8013540 <fe_add>
    fe_add(z2,x3,z3);
 801447a:	4632      	mov	r2, r6
 801447c:	4629      	mov	r1, r5
 801447e:	a814      	add	r0, sp, #80	; 0x50
 8014480:	f7ff f85e 	bl	8013540 <fe_add>
    fe_mul(z3,tmp0,x2);
 8014484:	4622      	mov	r2, r4
 8014486:	a932      	add	r1, sp, #200	; 0xc8
 8014488:	4630      	mov	r0, r6
 801448a:	f7ff fa8e 	bl	80139aa <fe_mul>
    fe_mul(z2,z2,tmp1);
 801448e:	a914      	add	r1, sp, #80	; 0x50
 8014490:	aa3c      	add	r2, sp, #240	; 0xf0
 8014492:	4608      	mov	r0, r1
 8014494:	f7ff fa89 	bl	80139aa <fe_mul>
    fe_sq(tmp0,tmp1);
 8014498:	a93c      	add	r1, sp, #240	; 0xf0
 801449a:	a832      	add	r0, sp, #200	; 0xc8
 801449c:	f7fe fe78 	bl	8013190 <fe_sq>
    fe_sq(tmp1,x2);
 80144a0:	4621      	mov	r1, r4
 80144a2:	a83c      	add	r0, sp, #240	; 0xf0
 80144a4:	f7fe fe74 	bl	8013190 <fe_sq>
    fe_add(x3,z3,z2);
 80144a8:	aa14      	add	r2, sp, #80	; 0x50
 80144aa:	4631      	mov	r1, r6
 80144ac:	4628      	mov	r0, r5
 80144ae:	f7ff f847 	bl	8013540 <fe_add>
    fe_sub(z2,z3,z2);
 80144b2:	aa14      	add	r2, sp, #80	; 0x50
 80144b4:	4610      	mov	r0, r2
 80144b6:	4631      	mov	r1, r6
 80144b8:	f7ff f924 	bl	8013704 <fe_sub>
    fe_mul(x2,tmp1,tmp0);
 80144bc:	aa32      	add	r2, sp, #200	; 0xc8
 80144be:	a93c      	add	r1, sp, #240	; 0xf0
 80144c0:	4620      	mov	r0, r4
 80144c2:	f7ff fa72 	bl	80139aa <fe_mul>
    fe_sub(tmp1,tmp1,tmp0);
 80144c6:	a93c      	add	r1, sp, #240	; 0xf0
 80144c8:	aa32      	add	r2, sp, #200	; 0xc8
 80144ca:	4608      	mov	r0, r1
 80144cc:	f7ff f91a 	bl	8013704 <fe_sub>
    fe_sq(z2,z2);
 80144d0:	a914      	add	r1, sp, #80	; 0x50
 80144d2:	4608      	mov	r0, r1
 80144d4:	f7fe fe5c 	bl	8013190 <fe_sq>
    fe_mul121666(z3,tmp1);
 80144d8:	a93c      	add	r1, sp, #240	; 0xf0
 80144da:	4630      	mov	r0, r6
 80144dc:	f7ff fe92 	bl	8014204 <fe_mul121666>
    fe_sq(x3,x3);
 80144e0:	4629      	mov	r1, r5
 80144e2:	4628      	mov	r0, r5
 80144e4:	f7fe fe54 	bl	8013190 <fe_sq>
    fe_add(tmp0,tmp0,z3);
 80144e8:	a932      	add	r1, sp, #200	; 0xc8
 80144ea:	4608      	mov	r0, r1
 80144ec:	4632      	mov	r2, r6
 80144ee:	f7ff f827 	bl	8013540 <fe_add>
    fe_mul(z3,x1,z2);
 80144f2:	aa14      	add	r2, sp, #80	; 0x50
 80144f4:	4669      	mov	r1, sp
 80144f6:	4630      	mov	r0, r6
 80144f8:	f7ff fa57 	bl	80139aa <fe_mul>
    fe_mul(z2,tmp1,tmp0);
 80144fc:	aa32      	add	r2, sp, #200	; 0xc8
 80144fe:	a93c      	add	r1, sp, #240	; 0xf0
 8014500:	a814      	add	r0, sp, #80	; 0x50
 8014502:	f7ff fa52 	bl	80139aa <fe_mul>
  for (pos = 254;pos >= 0;--pos) {
 8014506:	f1b8 0801 	subs.w	r8, r8, #1
 801450a:	d291      	bcs.n	8014430 <curve25519+0x80>
  fe_cswap(x2,x3,swap);
 801450c:	463a      	mov	r2, r7
 801450e:	4629      	mov	r1, r5
 8014510:	4620      	mov	r0, r4
 8014512:	f7ff fdc6 	bl	80140a2 <fe_cswap>
  fe_cswap(z2,z3,swap);
 8014516:	463a      	mov	r2, r7
 8014518:	4631      	mov	r1, r6
 801451a:	a814      	add	r0, sp, #80	; 0x50
 801451c:	f7ff fdc1 	bl	80140a2 <fe_cswap>
  fe_invert(z2,z2);
 8014520:	a914      	add	r1, sp, #80	; 0x50
 8014522:	4608      	mov	r0, r1
 8014524:	f7ff fd03 	bl	8013f2e <fe_invert>
  fe_mul(x2,x2,z2);
 8014528:	aa14      	add	r2, sp, #80	; 0x50
 801452a:	4621      	mov	r1, r4
 801452c:	4620      	mov	r0, r4
 801452e:	f7ff fa3c 	bl	80139aa <fe_mul>
  fe_tobytes(q,x2);
 8014532:	4650      	mov	r0, sl
 8014534:	4621      	mov	r1, r4
 8014536:	f7ff f834 	bl	80135a2 <fe_tobytes>
}
 801453a:	2000      	movs	r0, #0
 801453c:	b047      	add	sp, #284	; 0x11c
 801453e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014542 <fe_sq2>:
/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h,const fe f)
{
 8014542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 f0 = f[0];
  sword32 f1 = f[1];
  sword32 f2 = f[2];
  sword32 f3 = f[3];
 8014546:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
{
 801454a:	b097      	sub	sp, #92	; 0x5c
 801454c:	4683      	mov	fp, r0
  sword32 f3 = f[3];
 801454e:	9409      	str	r4, [sp, #36]	; 0x24
  sword32 f4 = f[4];
 8014550:	690c      	ldr	r4, [r1, #16]
 8014552:	9402      	str	r4, [sp, #8]
  sword32 f5 = f[5];
 8014554:	694c      	ldr	r4, [r1, #20]
 8014556:	9404      	str	r4, [sp, #16]
  sword32 f6 = f[6];
 8014558:	698c      	ldr	r4, [r1, #24]
 801455a:	9401      	str	r4, [sp, #4]
  sword32 f7 = f[7];
 801455c:	69cc      	ldr	r4, [r1, #28]
 801455e:	9406      	str	r4, [sp, #24]
  sword32 f1 = f[1];
 8014560:	e9d1 0300 	ldrd	r0, r3, [r1]
  sword32 f8 = f[8];
 8014564:	6a0c      	ldr	r4, [r1, #32]
  sword32 f9 = f[9];
 8014566:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8014568:	910a      	str	r1, [sp, #40]	; 0x28
  sword32 f0_2 = 2 * f0;
  sword32 f1_2 = 2 * f1;
  sword32 f2_2 = 2 * f2;
 801456a:	0051      	lsls	r1, r2, #1
 801456c:	9108      	str	r1, [sp, #32]
  sword32 f3_2 = 2 * f3;
 801456e:	9909      	ldr	r1, [sp, #36]	; 0x24
  sword32 f5_2 = 2 * f5;
  sword32 f6_2 = 2 * f6;
  sword32 f7_2 = 2 * f7;
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 8014570:	9e06      	ldr	r6, [sp, #24]
  sword32 f8 = f[8];
 8014572:	9407      	str	r4, [sp, #28]
  sword32 f3_2 = 2 * f3;
 8014574:	0049      	lsls	r1, r1, #1
 8014576:	9103      	str	r1, [sp, #12]
  sword32 f4_2 = 2 * f4;
 8014578:	9902      	ldr	r1, [sp, #8]
 801457a:	0049      	lsls	r1, r1, #1
 801457c:	910b      	str	r1, [sp, #44]	; 0x2c
  sword32 f5_2 = 2 * f5;
 801457e:	9904      	ldr	r1, [sp, #16]
 8014580:	0049      	lsls	r1, r1, #1
 8014582:	9105      	str	r1, [sp, #20]
  sword32 f7_2 = 2 * f7;
 8014584:	9906      	ldr	r1, [sp, #24]
 8014586:	0049      	lsls	r1, r1, #1
 8014588:	910c      	str	r1, [sp, #48]	; 0x30
  sword32 f6_19 = 19 * f6; /* 1.959375*2^30 */
 801458a:	9901      	ldr	r1, [sp, #4]
 801458c:	2513      	movs	r5, #19
 801458e:	fb05 f401 	mul.w	r4, r5, r1
  sword32 f7_38 = 38 * f7; /* 1.959375*2^30 */
 8014592:	2126      	movs	r1, #38	; 0x26
 8014594:	fb01 fe06 	mul.w	lr, r1, r6
  sword32 f8_19 = 19 * f8; /* 1.959375*2^30 */
 8014598:	9e07      	ldr	r6, [sp, #28]
 801459a:	fb05 f706 	mul.w	r7, r5, r6
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 801459e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 80145a0:	9d04      	ldr	r5, [sp, #16]
  sword32 f9_38 = 38 * f9; /* 1.959375*2^30 */
 80145a2:	fb01 f806 	mul.w	r8, r1, r6
  sword32 f1_2 = 2 * f1;
 80145a6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  sword32 f5_38 = 38 * f5; /* 1.959375*2^30 */
 80145aa:	4369      	muls	r1, r5
  sword64 f1f4_2  = f1_2 * (sword64) f4;
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
  sword64 f1f6_2  = f1_2 * (sword64) f6;
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
  sword64 f1f8_2  = f1_2 * (sword64) f8;
  sword64 f1f9_76 = f1_2 * (sword64) f9_38;
 80145ac:	fb8c 6508 	smull	r6, r5, ip, r8
  sword32 f0_2 = 2 * f0;
 80145b0:	ea4f 0940 	mov.w	r9, r0, lsl #1
  sword64 f7f8_38 = f7_2 * (sword64) f8_19;
  sword64 f7f9_76 = f7_2 * (sword64) f9_38;
  sword64 f8f8_19 = f8   * (sword64) f8_19;
  sword64 f8f9_38 = f8   * (sword64) f9_38;
  sword64 f9f9_38 = f9   * (sword64) f9_38;
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 80145b4:	fbc0 6500 	smlal	r6, r5, r0, r0
 80145b8:	0050      	lsls	r0, r2, #1
 80145ba:	fbc0 6507 	smlal	r6, r5, r0, r7
 80145be:	9803      	ldr	r0, [sp, #12]
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 80145c0:	f8dd a00c 	ldr.w	sl, [sp, #12]
  sword64 h0 = f0f0  +f1f9_76+f2f8_38+f3f7_76+f4f6_38+f5f5_38;
 80145c4:	fbc0 650e 	smlal	r6, r5, r0, lr
 80145c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80145ca:	fbc0 6504 	smlal	r6, r5, r0, r4
 80145ce:	9804      	ldr	r0, [sp, #16]
 80145d0:	fbc0 6501 	smlal	r6, r5, r0, r1
 80145d4:	960e      	str	r6, [sp, #56]	; 0x38
  sword64 f2f9_38 = f2   * (sword64) f9_38;
 80145d6:	fb82 1008 	smull	r1, r0, r2, r8
  sword64 h1 = f0f1_2+f2f9_38+f3f8_38+f4f7_38+f5f6_38;
 80145da:	9e03      	ldr	r6, [sp, #12]
 80145dc:	fbc9 1003 	smlal	r1, r0, r9, r3
 80145e0:	fbc6 1007 	smlal	r1, r0, r6, r7
 80145e4:	9e02      	ldr	r6, [sp, #8]
 80145e6:	fbc6 100e 	smlal	r1, r0, r6, lr
 80145ea:	9e05      	ldr	r6, [sp, #20]
 80145ec:	fbc6 1004 	smlal	r1, r0, r6, r4
 80145f0:	910f      	str	r1, [sp, #60]	; 0x3c
  sword64 f1f1_2  = f1_2 * (sword64) f1;
 80145f2:	fb83 610c 	smull	r6, r1, r3, ip
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 80145f6:	fbc9 6102 	smlal	r6, r1, r9, r2
 80145fa:	fbca 6108 	smlal	r6, r1, sl, r8
 80145fe:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8014602:	fbc7 610a 	smlal	r6, r1, r7, sl
 8014606:	f8dd a014 	ldr.w	sl, [sp, #20]
 801460a:	fbca 610e 	smlal	r6, r1, sl, lr
 801460e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014612:	fbca 6104 	smlal	r6, r1, sl, r4
 8014616:	9610      	str	r6, [sp, #64]	; 0x40
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 8014618:	9e09      	ldr	r6, [sp, #36]	; 0x24
  sword64 h2 = f0f2_2+f1f1_2 +f3f9_76+f4f8_38+f5f7_76+f6f6_19;
 801461a:	910d      	str	r1, [sp, #52]	; 0x34
  sword64 f1f2_2  = f1_2 * (sword64) f2;
 801461c:	fb82 4a0c 	smull	r4, sl, r2, ip
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 8014620:	fbc9 4a06 	smlal	r4, sl, r9, r6
 8014624:	9e02      	ldr	r6, [sp, #8]
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8014626:	9902      	ldr	r1, [sp, #8]
  sword64 h3 = f0f3_2+f1f2_2 +f4f9_38+f5f8_38+f6f7_38;
 8014628:	fbc6 4a08 	smlal	r4, sl, r6, r8
 801462c:	9e05      	ldr	r6, [sp, #20]
 801462e:	fbc6 4a07 	smlal	r4, sl, r6, r7
 8014632:	9e01      	ldr	r6, [sp, #4]
 8014634:	fbc6 4a0e 	smlal	r4, sl, r6, lr
 8014638:	9411      	str	r4, [sp, #68]	; 0x44
  sword64 f1f3_4  = f1_2 * (sword64) f3_2;
 801463a:	9c03      	ldr	r4, [sp, #12]
 801463c:	fb8c 4304 	smull	r4, r3, ip, r4
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 8014640:	fbc9 4301 	smlal	r4, r3, r9, r1
 8014644:	fbc2 4302 	smlal	r4, r3, r2, r2
 8014648:	9a05      	ldr	r2, [sp, #20]
  sword32 f6_2 = 2 * f6;
 801464a:	0076      	lsls	r6, r6, #1
  sword64 h4 = f0f4_2+f1f3_4 +f2f2   +f5f9_76+f6f8_38+f7f7_38;
 801464c:	fbc2 4308 	smlal	r4, r3, r2, r8
 8014650:	9a06      	ldr	r2, [sp, #24]
 8014652:	fbc7 4306 	smlal	r4, r3, r7, r6
 8014656:	fbc2 430e 	smlal	r4, r3, r2, lr
 801465a:	9412      	str	r4, [sp, #72]	; 0x48
  sword64 f1f4_2  = f1_2 * (sword64) f4;
 801465c:	fb81 420c 	smull	r4, r2, r1, ip
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 8014660:	9904      	ldr	r1, [sp, #16]
 8014662:	fbc9 4201 	smlal	r4, r2, r9, r1
 8014666:	e9dd 6108 	ldrd	r6, r1, [sp, #32]
 801466a:	fbc1 4206 	smlal	r4, r2, r1, r6
 801466e:	9901      	ldr	r1, [sp, #4]
 8014670:	fbc1 4208 	smlal	r4, r2, r1, r8
 8014674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014676:	fbc1 4207 	smlal	r4, r2, r1, r7
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 801467a:	9905      	ldr	r1, [sp, #20]
  sword64 h5 = f0f5_2+f1f4_2 +f2f3_2 +f6f9_38+f7f8_38;
 801467c:	9413      	str	r4, [sp, #76]	; 0x4c
  sword64 f1f5_4  = f1_2 * (sword64) f5_2;
 801467e:	fb8c 4e01 	smull	r4, lr, ip, r1
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 8014682:	9901      	ldr	r1, [sp, #4]
 8014684:	fbc9 4e01 	smlal	r4, lr, r9, r1
 8014688:	9902      	ldr	r1, [sp, #8]
 801468a:	fbc1 4e06 	smlal	r4, lr, r1, r6
 801468e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014690:	9e03      	ldr	r6, [sp, #12]
 8014692:	fbc1 4e06 	smlal	r4, lr, r1, r6
 8014696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014698:	fbc1 4e08 	smlal	r4, lr, r1, r8
 801469c:	9907      	ldr	r1, [sp, #28]
 801469e:	fbc1 4e07 	smlal	r4, lr, r1, r7
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 80146a2:	9901      	ldr	r1, [sp, #4]
  sword64 h6 = f0f6_2+f1f5_4 +f2f4_2 +f3f3_2 +f7f9_76+f8f8_19;
 80146a4:	9414      	str	r4, [sp, #80]	; 0x50
  sword64 f1f6_2  = f1_2 * (sword64) f6;
 80146a6:	fb81 640c 	smull	r6, r4, r1, ip
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 80146aa:	9906      	ldr	r1, [sp, #24]
 80146ac:	9f08      	ldr	r7, [sp, #32]
 80146ae:	fbc9 6401 	smlal	r6, r4, r9, r1
 80146b2:	9904      	ldr	r1, [sp, #16]
 80146b4:	fbc1 6407 	smlal	r6, r4, r1, r7
 80146b8:	e9dd 1702 	ldrd	r1, r7, [sp, #8]
 80146bc:	fbc1 6407 	smlal	r6, r4, r1, r7
 80146c0:	9907      	ldr	r1, [sp, #28]
 80146c2:	fbc1 6408 	smlal	r6, r4, r1, r8
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 80146c6:	990c      	ldr	r1, [sp, #48]	; 0x30
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 80146c8:	9615      	str	r6, [sp, #84]	; 0x54
  sword64 f1f7_4  = f1_2 * (sword64) f7_2;
 80146ca:	fb8c 6701 	smull	r6, r7, ip, r1
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80146ce:	9907      	ldr	r1, [sp, #28]
  sword64 h7 = f0f7_2+f1f6_2 +f2f5_2 +f3f4_2 +f8f9_38;
 80146d0:	9409      	str	r4, [sp, #36]	; 0x24
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80146d2:	fbc9 6701 	smlal	r6, r7, r9, r1
 80146d6:	9c08      	ldr	r4, [sp, #32]
 80146d8:	9901      	ldr	r1, [sp, #4]
 80146da:	fbc1 6704 	smlal	r6, r7, r1, r4
 80146de:	9903      	ldr	r1, [sp, #12]
 80146e0:	9c05      	ldr	r4, [sp, #20]
 80146e2:	fbc1 6704 	smlal	r6, r7, r1, r4
 80146e6:	9902      	ldr	r1, [sp, #8]
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 80146e8:	9c08      	ldr	r4, [sp, #32]
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80146ea:	fbc1 6701 	smlal	r6, r7, r1, r1
 80146ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146f0:	fbc1 6708 	smlal	r6, r7, r1, r8
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 80146f4:	9907      	ldr	r1, [sp, #28]
  sword64 h8 = f0f8_2+f1f7_4 +f2f6_2 +f3f5_4 +f4f4   +f9f9_38;
 80146f6:	9602      	str	r6, [sp, #8]
  sword64 f1f8_2  = f1_2 * (sword64) f8;
 80146f8:	fb81 6c0c 	smull	r6, ip, r1, ip
  sword64 h9 = f0f9_2+f1f8_2 +f2f7_2 +f3f6_2 +f4f5_2;
 80146fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146fe:	fbc9 6c01 	smlal	r6, ip, r9, r1
 8014702:	9906      	ldr	r1, [sp, #24]
 8014704:	fbc1 6c04 	smlal	r6, ip, r1, r4
 8014708:	9901      	ldr	r1, [sp, #4]
 801470a:	9c03      	ldr	r4, [sp, #12]
 801470c:	fbc1 6c04 	smlal	r6, ip, r1, r4
 8014710:	9904      	ldr	r1, [sp, #16]
 8014712:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014714:	fbc1 6c04 	smlal	r6, ip, r1, r4
 8014718:	46b1      	mov	r9, r6
  sword64 carry6;
  sword64 carry7;
  sword64 carry8;
  sword64 carry9;

  h0 += h0;
 801471a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  h1 += h1;
 801471c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  h2 += h2;
 801471e:	990d      	ldr	r1, [sp, #52]	; 0x34
  h0 += h0;
 8014720:	19b6      	adds	r6, r6, r6
 8014722:	416d      	adcs	r5, r5
  h1 += h1;
 8014724:	1924      	adds	r4, r4, r4
 8014726:	9401      	str	r4, [sp, #4]
  h2 += h2;
 8014728:	9c10      	ldr	r4, [sp, #64]	; 0x40
  h1 += h1;
 801472a:	4140      	adcs	r0, r0
  h2 += h2;
 801472c:	1924      	adds	r4, r4, r4
 801472e:	9403      	str	r4, [sp, #12]
  h3 += h3;
 8014730:	9c11      	ldr	r4, [sp, #68]	; 0x44
  h2 += h2;
 8014732:	4149      	adcs	r1, r1
  h3 += h3;
 8014734:	1924      	adds	r4, r4, r4
 8014736:	9405      	str	r4, [sp, #20]
 8014738:	eb4a 040a 	adc.w	r4, sl, sl
 801473c:	9406      	str	r4, [sp, #24]
  h4 += h4;
 801473e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014740:	eb14 0804 	adds.w	r8, r4, r4
  h5 += h5;
 8014744:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  h4 += h4;
 8014746:	415b      	adcs	r3, r3
  h5 += h5;
 8014748:	eb14 0a04 	adds.w	sl, r4, r4
  h6 += h6;
 801474c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  h5 += h5;
 801474e:	4152      	adcs	r2, r2
  h6 += h6;
 8014750:	1924      	adds	r4, r4, r4
 8014752:	9404      	str	r4, [sp, #16]
  h7 += h7;
 8014754:	9c15      	ldr	r4, [sp, #84]	; 0x54
  h6 += h6;
 8014756:	eb4e 0e0e 	adc.w	lr, lr, lr
  h7 += h7;
 801475a:	1924      	adds	r4, r4, r4
 801475c:	940b      	str	r4, [sp, #44]	; 0x2c
 801475e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014760:	4164      	adcs	r4, r4
 8014762:	940c      	str	r4, [sp, #48]	; 0x30
  h8 += h8;
 8014764:	9c02      	ldr	r4, [sp, #8]
 8014766:	1924      	adds	r4, r4, r4
 8014768:	940d      	str	r4, [sp, #52]	; 0x34
 801476a:	eb47 0407 	adc.w	r4, r7, r7
 801476e:	940e      	str	r4, [sp, #56]	; 0x38
  h9 += h9;
 8014770:	eb19 0409 	adds.w	r4, r9, r9
 8014774:	940f      	str	r4, [sp, #60]	; 0x3c
 8014776:	eb4c 040c 	adc.w	r4, ip, ip

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 801477a:	f116 7700 	adds.w	r7, r6, #33554432	; 0x2000000
 801477e:	f145 0c00 	adc.w	ip, r5, #0
 8014782:	f8dd 9004 	ldr.w	r9, [sp, #4]
  h9 += h9;
 8014786:	9410      	str	r4, [sp, #64]	; 0x40
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 8014788:	0ebc      	lsrs	r4, r7, #26
 801478a:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
 801478e:	eb14 0909 	adds.w	r9, r4, r9
 8014792:	f007 477c 	and.w	r7, r7, #4227858432	; 0xfc000000
 8014796:	eb40 60ac 	adc.w	r0, r0, ip, asr #26
 801479a:	1bf4      	subs	r4, r6, r7
 801479c:	9407      	str	r4, [sp, #28]
 801479e:	eb65 040c 	sbc.w	r4, r5, ip
 80147a2:	9408      	str	r4, [sp, #32]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80147a4:	f118 7400 	adds.w	r4, r8, #33554432	; 0x2000000
 80147a8:	f143 0500 	adc.w	r5, r3, #0
 80147ac:	0ea6      	lsrs	r6, r4, #26
 80147ae:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 80147b2:	eb16 0a0a 	adds.w	sl, r6, sl
 80147b6:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80147ba:	eb42 62a5 	adc.w	r2, r2, r5, asr #26
 80147be:	ebb8 0804 	subs.w	r8, r8, r4
 80147c2:	eb63 0305 	sbc.w	r3, r3, r5

  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 80147c6:	f119 7480 	adds.w	r4, r9, #16777216	; 0x1000000
 80147ca:	9e03      	ldr	r6, [sp, #12]
 80147cc:	f140 0000 	adc.w	r0, r0, #0
 80147d0:	0e65      	lsrs	r5, r4, #25
 80147d2:	ea45 15c0 	orr.w	r5, r5, r0, lsl #7
 80147d6:	19ad      	adds	r5, r5, r6
 80147d8:	f004 447e 	and.w	r4, r4, #4261412864	; 0xfe000000
 80147dc:	eb41 6160 	adc.w	r1, r1, r0, asr #25
 80147e0:	ebb9 0004 	subs.w	r0, r9, r4
 80147e4:	9009      	str	r0, [sp, #36]	; 0x24
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80147e6:	f11a 7080 	adds.w	r0, sl, #16777216	; 0x1000000
  carry1 = (h1 + (sword64) (1UL<<24)) >> 25; h2 += carry1; h1 -= carry1 << 25;
 80147ea:	9503      	str	r5, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 80147ec:	f142 0200 	adc.w	r2, r2, #0
 80147f0:	9d04      	ldr	r5, [sp, #16]
 80147f2:	0e44      	lsrs	r4, r0, #25
 80147f4:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
 80147f8:	1964      	adds	r4, r4, r5
 80147fa:	f000 407e 	and.w	r0, r0, #4261412864	; 0xfe000000
 80147fe:	eb4e 6e62 	adc.w	lr, lr, r2, asr #25
 8014802:	ebba 0200 	subs.w	r2, sl, r0
 8014806:	920a      	str	r2, [sp, #40]	; 0x28

  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 8014808:	9a03      	ldr	r2, [sp, #12]
  carry5 = (h5 + (sword64) (1UL<<24)) >> 25; h6 += carry5; h5 -= carry5 << 25;
 801480a:	9404      	str	r4, [sp, #16]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 801480c:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8014810:	9201      	str	r2, [sp, #4]
 8014812:	f141 0100 	adc.w	r1, r1, #0
 8014816:	9805      	ldr	r0, [sp, #20]

  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;

  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014818:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801481a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 801481c:	0e92      	lsrs	r2, r2, #26
 801481e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8014822:	1812      	adds	r2, r2, r0
 8014824:	9205      	str	r2, [sp, #20]
 8014826:	9a06      	ldr	r2, [sp, #24]
 8014828:	eb42 61a1 	adc.w	r1, r2, r1, asr #26
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801482c:	f114 7200 	adds.w	r2, r4, #33554432	; 0x2000000
 8014830:	f14e 0e00 	adc.w	lr, lr, #0
 8014834:	9202      	str	r2, [sp, #8]
 8014836:	0e90      	lsrs	r0, r2, #26
 8014838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801483a:	ea40 108e 	orr.w	r0, r0, lr, lsl #6
 801483e:	1880      	adds	r0, r0, r2
 8014840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014842:	eb42 6cae 	adc.w	ip, r2, lr, asr #26
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 8014846:	9a05      	ldr	r2, [sp, #20]
 8014848:	f112 7a80 	adds.w	sl, r2, #16777216	; 0x1000000
 801484c:	f141 0100 	adc.w	r1, r1, #0
 8014850:	ea4f 645a 	mov.w	r4, sl, lsr #25
 8014854:	ea44 14c1 	orr.w	r4, r4, r1, lsl #7
 8014858:	eb14 0408 	adds.w	r4, r4, r8
 801485c:	eb43 6361 	adc.w	r3, r3, r1, asr #25
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8014860:	f110 7980 	adds.w	r9, r0, #16777216	; 0x1000000
 8014864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014866:	f14c 0c00 	adc.w	ip, ip, #0
 801486a:	ea4f 6159 	mov.w	r1, r9, lsr #25
 801486e:	ea41 11cc 	orr.w	r1, r1, ip, lsl #7
 8014872:	1889      	adds	r1, r1, r2
 8014874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014876:	eb42 6c6c 	adc.w	ip, r2, ip, asr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 801487a:	f114 7700 	adds.w	r7, r4, #33554432	; 0x2000000
 801487e:	f143 0300 	adc.w	r3, r3, #0
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014882:	f111 7800 	adds.w	r8, r1, #33554432	; 0x2000000
 8014886:	f14c 0c00 	adc.w	ip, ip, #0
 801488a:	ea4f 6298 	mov.w	r2, r8, lsr #26
 801488e:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8014892:	1952      	adds	r2, r2, r5
 8014894:	eb46 6cac 	adc.w	ip, r6, ip, asr #26

  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8014898:	f112 7e80 	adds.w	lr, r2, #16777216	; 0x1000000
 801489c:	f14c 0c00 	adc.w	ip, ip, #0
 80148a0:	ea4f 655e 	mov.w	r5, lr, lsr #25
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80148a4:	9306      	str	r3, [sp, #24]
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 80148a6:	ea45 15cc 	orr.w	r5, r5, ip, lsl #7
 80148aa:	2313      	movs	r3, #19
 80148ac:	fba5 6503 	umull	r6, r5, r5, r3
 80148b0:	ea4f 6c6c 	mov.w	ip, ip, asr #25
 80148b4:	fb03 550c 	mla	r5, r3, ip, r5
 80148b8:	9b07      	ldr	r3, [sp, #28]
 80148ba:	18f6      	adds	r6, r6, r3
 80148bc:	9b08      	ldr	r3, [sp, #32]
 80148be:	eb45 0503 	adc.w	r5, r5, r3

  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80148c2:	f116 7c00 	adds.w	ip, r6, #33554432	; 0x2000000
 80148c6:	f00c 437c 	and.w	r3, ip, #4227858432	; 0xfc000000
 80148ca:	f145 0500 	adc.w	r5, r5, #0
 80148ce:	ea4f 6c9c 	mov.w	ip, ip, lsr #26
 80148d2:	1af6      	subs	r6, r6, r3
 80148d4:	9b09      	ldr	r3, [sp, #36]	; 0x24

  h[0] = (sword32)h0;
 80148d6:	f8cb 6000 	str.w	r6, [fp]
  carry0 = (h0 + (sword64) (1UL<<25)) >> 26; h1 += carry0; h0 -= carry0 << 26;
 80148da:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 80148de:	eb1c 0503 	adds.w	r5, ip, r3
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80148e2:	9b01      	ldr	r3, [sp, #4]
  h[1] = (sword32)h1;
 80148e4:	f8cb 5004 	str.w	r5, [fp, #4]
  carry2 = (h2 + (sword64) (1UL<<25)) >> 26; h3 += carry2; h2 -= carry2 << 26;
 80148e8:	f003 457c 	and.w	r5, r3, #4227858432	; 0xfc000000
 80148ec:	9b03      	ldr	r3, [sp, #12]
 80148ee:	1b5d      	subs	r5, r3, r5
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80148f0:	9b05      	ldr	r3, [sp, #20]
  h[2] = (sword32)h2;
 80148f2:	f8cb 5008 	str.w	r5, [fp, #8]
  carry3 = (h3 + (sword64) (1UL<<24)) >> 25; h4 += carry3; h3 -= carry3 << 25;
 80148f6:	f00a 4a7e 	and.w	sl, sl, #4261412864	; 0xfe000000
 80148fa:	ebb3 050a 	subs.w	r5, r3, sl
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 80148fe:	9b06      	ldr	r3, [sp, #24]
  h[3] = (sword32)h3;
 8014900:	f8cb 500c 	str.w	r5, [fp, #12]
  carry4 = (h4 + (sword64) (1UL<<25)) >> 26; h5 += carry4; h4 -= carry4 << 26;
 8014904:	f007 457c 	and.w	r5, r7, #4227858432	; 0xfc000000
 8014908:	0ebf      	lsrs	r7, r7, #26
 801490a:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
 801490e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014910:	1b64      	subs	r4, r4, r5
 8014912:	18ff      	adds	r7, r7, r3
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 8014914:	9b02      	ldr	r3, [sp, #8]
  h[4] = (sword32)h4;
 8014916:	f8cb 4010 	str.w	r4, [fp, #16]
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801491a:	9c04      	ldr	r4, [sp, #16]
  h[5] = (sword32)h5;
 801491c:	f8cb 7014 	str.w	r7, [fp, #20]
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8014920:	f009 497e 	and.w	r9, r9, #4261412864	; 0xfe000000
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014924:	f008 487c 	and.w	r8, r8, #4227858432	; 0xfc000000
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 8014928:	f00e 4e7e 	and.w	lr, lr, #4261412864	; 0xfe000000
  carry6 = (h6 + (sword64) (1UL<<25)) >> 26; h7 += carry6; h6 -= carry6 << 26;
 801492c:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8014930:	1ae3      	subs	r3, r4, r3
  carry7 = (h7 + (sword64) (1UL<<24)) >> 25; h8 += carry7; h7 -= carry7 << 25;
 8014932:	ebb0 0009 	subs.w	r0, r0, r9
  carry8 = (h8 + (sword64) (1UL<<25)) >> 26; h9 += carry8; h8 -= carry8 << 26;
 8014936:	ebb1 0108 	subs.w	r1, r1, r8
  carry9 = (h9 + (sword64) (1UL<<24)) >> 25; h0 += carry9 * 19; h9 -= carry9 << 25;
 801493a:	ebb2 020e 	subs.w	r2, r2, lr
  h[6] = (sword32)h6;
 801493e:	f8cb 3018 	str.w	r3, [fp, #24]
  h[7] = (sword32)h7;
 8014942:	f8cb 001c 	str.w	r0, [fp, #28]
  h[8] = (sword32)h8;
 8014946:	f8cb 1020 	str.w	r1, [fp, #32]
  h[9] = (sword32)h9;
 801494a:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
}
 801494e:	b017      	add	sp, #92	; 0x5c
 8014950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014954 <fe_pow22523>:


void fe_pow22523(fe out,const fe z)
{
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	b09e      	sub	sp, #120	; 0x78
 8014958:	460c      	mov	r4, r1
  fe t0 = {0};
 801495a:	2228      	movs	r2, #40	; 0x28
 801495c:	2100      	movs	r1, #0
{
 801495e:	4605      	mov	r5, r0
  fe t0 = {0};
 8014960:	4668      	mov	r0, sp
 8014962:	f006 fb65 	bl	801b030 <memset>
  fe t1 = {0};
 8014966:	2228      	movs	r2, #40	; 0x28
 8014968:	2100      	movs	r1, #0
 801496a:	eb0d 0002 	add.w	r0, sp, r2
 801496e:	f006 fb5f 	bl	801b030 <memset>
  fe t2 = {0};
 8014972:	2228      	movs	r2, #40	; 0x28
 8014974:	2100      	movs	r1, #0
 8014976:	a814      	add	r0, sp, #80	; 0x50
 8014978:	f006 fb5a 	bl	801b030 <memset>
  int i = 0;

  fe_sq(t0,z); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 801497c:	4621      	mov	r1, r4
 801497e:	4668      	mov	r0, sp
 8014980:	f7fe fc06 	bl	8013190 <fe_sq>
  fe_sq(t1,t0); for (i = 1;i < 2;++i) fe_sq(t1,t1);
 8014984:	4669      	mov	r1, sp
 8014986:	a80a      	add	r0, sp, #40	; 0x28
 8014988:	f7fe fc02 	bl	8013190 <fe_sq>
 801498c:	a90a      	add	r1, sp, #40	; 0x28
 801498e:	4608      	mov	r0, r1
 8014990:	f7fe fbfe 	bl	8013190 <fe_sq>
  fe_mul(t1,z,t1);
 8014994:	aa0a      	add	r2, sp, #40	; 0x28
 8014996:	4610      	mov	r0, r2
 8014998:	4621      	mov	r1, r4
 801499a:	f7ff f806 	bl	80139aa <fe_mul>
  fe_mul(t0,t0,t1);
 801499e:	aa0a      	add	r2, sp, #40	; 0x28
 80149a0:	4669      	mov	r1, sp
 80149a2:	4668      	mov	r0, sp
 80149a4:	f7ff f801 	bl	80139aa <fe_mul>
  fe_sq(t0,t0); for (i = 1;i < 1;++i) fe_sq(t0,t0);
 80149a8:	4669      	mov	r1, sp
 80149aa:	4668      	mov	r0, sp
 80149ac:	f7fe fbf0 	bl	8013190 <fe_sq>
  fe_mul(t0,t1,t0);
 80149b0:	466a      	mov	r2, sp
 80149b2:	a90a      	add	r1, sp, #40	; 0x28
 80149b4:	4668      	mov	r0, sp
 80149b6:	f7fe fff8 	bl	80139aa <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 5;++i) fe_sq(t1,t1);
 80149ba:	4669      	mov	r1, sp
 80149bc:	a80a      	add	r0, sp, #40	; 0x28
 80149be:	f7fe fbe7 	bl	8013190 <fe_sq>
 80149c2:	2604      	movs	r6, #4
 80149c4:	a90a      	add	r1, sp, #40	; 0x28
 80149c6:	4608      	mov	r0, r1
 80149c8:	f7fe fbe2 	bl	8013190 <fe_sq>
 80149cc:	3e01      	subs	r6, #1
 80149ce:	d1f9      	bne.n	80149c4 <fe_pow22523+0x70>
  fe_mul(t0,t1,t0);
 80149d0:	466a      	mov	r2, sp
 80149d2:	a90a      	add	r1, sp, #40	; 0x28
 80149d4:	4668      	mov	r0, sp
 80149d6:	f7fe ffe8 	bl	80139aa <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 10;++i) fe_sq(t1,t1);
 80149da:	4669      	mov	r1, sp
 80149dc:	a80a      	add	r0, sp, #40	; 0x28
 80149de:	f7fe fbd7 	bl	8013190 <fe_sq>
 80149e2:	2609      	movs	r6, #9
 80149e4:	a90a      	add	r1, sp, #40	; 0x28
 80149e6:	4608      	mov	r0, r1
 80149e8:	f7fe fbd2 	bl	8013190 <fe_sq>
 80149ec:	3e01      	subs	r6, #1
 80149ee:	d1f9      	bne.n	80149e4 <fe_pow22523+0x90>
  fe_mul(t1,t1,t0);
 80149f0:	a90a      	add	r1, sp, #40	; 0x28
 80149f2:	4608      	mov	r0, r1
 80149f4:	466a      	mov	r2, sp
 80149f6:	f7fe ffd8 	bl	80139aa <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 20;++i) fe_sq(t2,t2);
 80149fa:	a90a      	add	r1, sp, #40	; 0x28
 80149fc:	a814      	add	r0, sp, #80	; 0x50
 80149fe:	f7fe fbc7 	bl	8013190 <fe_sq>
 8014a02:	2613      	movs	r6, #19
 8014a04:	a914      	add	r1, sp, #80	; 0x50
 8014a06:	4608      	mov	r0, r1
 8014a08:	f7fe fbc2 	bl	8013190 <fe_sq>
 8014a0c:	3e01      	subs	r6, #1
 8014a0e:	d1f9      	bne.n	8014a04 <fe_pow22523+0xb0>
  fe_mul(t1,t2,t1);
 8014a10:	aa0a      	add	r2, sp, #40	; 0x28
 8014a12:	4610      	mov	r0, r2
 8014a14:	a914      	add	r1, sp, #80	; 0x50
 8014a16:	f7fe ffc8 	bl	80139aa <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 10;++i) fe_sq(t1,t1);
 8014a1a:	a90a      	add	r1, sp, #40	; 0x28
 8014a1c:	4608      	mov	r0, r1
 8014a1e:	f7fe fbb7 	bl	8013190 <fe_sq>
 8014a22:	2609      	movs	r6, #9
 8014a24:	a90a      	add	r1, sp, #40	; 0x28
 8014a26:	4608      	mov	r0, r1
 8014a28:	f7fe fbb2 	bl	8013190 <fe_sq>
 8014a2c:	3e01      	subs	r6, #1
 8014a2e:	d1f9      	bne.n	8014a24 <fe_pow22523+0xd0>
  fe_mul(t0,t1,t0);
 8014a30:	466a      	mov	r2, sp
 8014a32:	a90a      	add	r1, sp, #40	; 0x28
 8014a34:	4668      	mov	r0, sp
 8014a36:	f7fe ffb8 	bl	80139aa <fe_mul>
  fe_sq(t1,t0); for (i = 1;i < 50;++i) fe_sq(t1,t1);
 8014a3a:	4669      	mov	r1, sp
 8014a3c:	a80a      	add	r0, sp, #40	; 0x28
 8014a3e:	f7fe fba7 	bl	8013190 <fe_sq>
 8014a42:	2631      	movs	r6, #49	; 0x31
 8014a44:	a90a      	add	r1, sp, #40	; 0x28
 8014a46:	4608      	mov	r0, r1
 8014a48:	f7fe fba2 	bl	8013190 <fe_sq>
 8014a4c:	3e01      	subs	r6, #1
 8014a4e:	d1f9      	bne.n	8014a44 <fe_pow22523+0xf0>
  fe_mul(t1,t1,t0);
 8014a50:	a90a      	add	r1, sp, #40	; 0x28
 8014a52:	4608      	mov	r0, r1
 8014a54:	466a      	mov	r2, sp
 8014a56:	f7fe ffa8 	bl	80139aa <fe_mul>
  fe_sq(t2,t1); for (i = 1;i < 100;++i) fe_sq(t2,t2);
 8014a5a:	a90a      	add	r1, sp, #40	; 0x28
 8014a5c:	a814      	add	r0, sp, #80	; 0x50
 8014a5e:	f7fe fb97 	bl	8013190 <fe_sq>
 8014a62:	2663      	movs	r6, #99	; 0x63
 8014a64:	a914      	add	r1, sp, #80	; 0x50
 8014a66:	4608      	mov	r0, r1
 8014a68:	f7fe fb92 	bl	8013190 <fe_sq>
 8014a6c:	3e01      	subs	r6, #1
 8014a6e:	d1f9      	bne.n	8014a64 <fe_pow22523+0x110>
  fe_mul(t1,t2,t1);
 8014a70:	aa0a      	add	r2, sp, #40	; 0x28
 8014a72:	4610      	mov	r0, r2
 8014a74:	a914      	add	r1, sp, #80	; 0x50
 8014a76:	f7fe ff98 	bl	80139aa <fe_mul>
  fe_sq(t1,t1); for (i = 1;i < 50;++i) fe_sq(t1,t1);
 8014a7a:	a90a      	add	r1, sp, #40	; 0x28
 8014a7c:	4608      	mov	r0, r1
 8014a7e:	f7fe fb87 	bl	8013190 <fe_sq>
 8014a82:	2631      	movs	r6, #49	; 0x31
 8014a84:	a90a      	add	r1, sp, #40	; 0x28
 8014a86:	4608      	mov	r0, r1
 8014a88:	f7fe fb82 	bl	8013190 <fe_sq>
 8014a8c:	3e01      	subs	r6, #1
 8014a8e:	d1f9      	bne.n	8014a84 <fe_pow22523+0x130>
  fe_mul(t0,t1,t0);
 8014a90:	466a      	mov	r2, sp
 8014a92:	a90a      	add	r1, sp, #40	; 0x28
 8014a94:	4668      	mov	r0, sp
 8014a96:	f7fe ff88 	bl	80139aa <fe_mul>
  fe_sq(t0,t0); for (i = 1;i < 2;++i) fe_sq(t0,t0);
 8014a9a:	4669      	mov	r1, sp
 8014a9c:	4668      	mov	r0, sp
 8014a9e:	f7fe fb77 	bl	8013190 <fe_sq>
 8014aa2:	4669      	mov	r1, sp
 8014aa4:	4668      	mov	r0, sp
 8014aa6:	f7fe fb73 	bl	8013190 <fe_sq>
  fe_mul(out,t0,z);
 8014aaa:	4622      	mov	r2, r4
 8014aac:	4669      	mov	r1, sp
 8014aae:	4628      	mov	r0, r5
 8014ab0:	f7fe ff7b 	bl	80139aa <fe_mul>

  return;
}
 8014ab4:	b01e      	add	sp, #120	; 0x78
 8014ab6:	bd70      	pop	{r4, r5, r6, pc}

08014ab8 <fe_neg>:
  sword32 f6 = f[6];
  sword32 f7 = f[7];
  sword32 f8 = f[8];
  sword32 f9 = f[9];
  sword32 h0 = -f0;
  sword32 h1 = -f1;
 8014ab8:	684b      	ldr	r3, [r1, #4]
{
 8014aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sword32 h1 = -f1;
 8014abe:	f1c3 0e00 	rsb	lr, r3, #0
  sword32 h2 = -f2;
 8014ac2:	688b      	ldr	r3, [r1, #8]
  sword32 h3 = -f3;
 8014ac4:	68cf      	ldr	r7, [r1, #12]
  sword32 h4 = -f4;
 8014ac6:	690e      	ldr	r6, [r1, #16]
  sword32 h5 = -f5;
 8014ac8:	694d      	ldr	r5, [r1, #20]
  sword32 h6 = -f6;
 8014aca:	698c      	ldr	r4, [r1, #24]
  sword32 h2 = -f2;
 8014acc:	f1c3 0c00 	rsb	ip, r3, #0
  sword32 h7 = -f7;
 8014ad0:	69cb      	ldr	r3, [r1, #28]
 8014ad2:	f1c3 0800 	rsb	r8, r3, #0
  sword32 h8 = -f8;
 8014ad6:	6a0b      	ldr	r3, [r1, #32]
 8014ad8:	425a      	negs	r2, r3
  sword32 h9 = -f9;
 8014ada:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  sword32 h0 = -f0;
 8014adc:	6809      	ldr	r1, [r1, #0]
  sword32 h3 = -f3;
 8014ade:	427f      	negs	r7, r7
  sword32 h4 = -f4;
 8014ae0:	4276      	negs	r6, r6
  sword32 h5 = -f5;
 8014ae2:	426d      	negs	r5, r5
  sword32 h6 = -f6;
 8014ae4:	4264      	negs	r4, r4
  sword32 h9 = -f9;
 8014ae6:	425b      	negs	r3, r3
  sword32 h0 = -f0;
 8014ae8:	4249      	negs	r1, r1
  h[0] = h0;
  h[1] = h1;
 8014aea:	e9c0 1e00 	strd	r1, lr, [r0]
  h[2] = h2;
  h[3] = h3;
 8014aee:	e9c0 c702 	strd	ip, r7, [r0, #8]
  h[4] = h4;
  h[5] = h5;
 8014af2:	e9c0 6504 	strd	r6, r5, [r0, #16]
  h[6] = h6;
  h[7] = h7;
 8014af6:	e9c0 4806 	strd	r4, r8, [r0, #24]
  h[8] = h8;
  h[9] = h9;
 8014afa:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8014afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014b04 <fe_isnonzero>:
*/

static const unsigned char zero[32] = {0};

int fe_isnonzero(const fe f)
{
 8014b04:	b530      	push	{r4, r5, lr}
 8014b06:	b089      	sub	sp, #36	; 0x24
 8014b08:	4601      	mov	r1, r0
  unsigned char s[32];
  fe_tobytes(s,f);
 8014b0a:	4668      	mov	r0, sp
 8014b0c:	f7fe fd49 	bl	80135a2 <fe_tobytes>
    for (i = 0; i < length; i++) {
 8014b10:	4c07      	ldr	r4, [pc, #28]	; (8014b30 <fe_isnonzero+0x2c>)
    int compareSum = 0;
 8014b12:	2300      	movs	r3, #0
    for (i = 0; i < length; i++) {
 8014b14:	461a      	mov	r2, r3
        compareSum |= a[i] ^ b[i];
 8014b16:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014b1a:	f814 5b01 	ldrb.w	r5, [r4], #1
    for (i = 0; i < length; i++) {
 8014b1e:	3201      	adds	r2, #1
        compareSum |= a[i] ^ b[i];
 8014b20:	4069      	eors	r1, r5
    for (i = 0; i < length; i++) {
 8014b22:	2a20      	cmp	r2, #32
        compareSum |= a[i] ^ b[i];
 8014b24:	ea43 0301 	orr.w	r3, r3, r1
    for (i = 0; i < length; i++) {
 8014b28:	d1f5      	bne.n	8014b16 <fe_isnonzero+0x12>
  return ConstantCompare(s,zero,32);
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	b009      	add	sp, #36	; 0x24
 8014b2e:	bd30      	pop	{r4, r5, pc}
 8014b30:	0802306c 	.word	0x0802306c

08014b34 <fe_isnegative>:
Preconditions:
   |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f)
{
 8014b34:	b500      	push	{lr}
 8014b36:	b089      	sub	sp, #36	; 0x24
 8014b38:	4601      	mov	r1, r0
  unsigned char s[32];
  fe_tobytes(s,f);
 8014b3a:	4668      	mov	r0, sp
 8014b3c:	f7fe fd31 	bl	80135a2 <fe_tobytes>
  return s[0] & 1;
 8014b40:	f89d 0000 	ldrb.w	r0, [sp]
}
 8014b44:	f000 0001 	and.w	r0, r0, #1
 8014b48:	b009      	add	sp, #36	; 0x24
 8014b4a:	f85d fb04 	ldr.w	pc, [sp], #4

08014b4e <fe_cmov>:

Preconditions: b in {0,1}.
*/

void fe_cmov(fe f, const fe g, int b)
{
 8014b4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sword32 g7 = g[7];
  sword32 g8 = g[8];
  sword32 g9 = g[9];
  sword32 x0 = f0 ^ g0;
  sword32 x1 = f1 ^ g1;
  sword32 x2 = f2 ^ g2;
 8014b52:	6883      	ldr	r3, [r0, #8]
 8014b54:	688c      	ldr	r4, [r1, #8]
{
 8014b56:	9201      	str	r2, [sp, #4]
  sword32 x2 = f2 ^ g2;
 8014b58:	405c      	eors	r4, r3
  sword32 x3 = f3 ^ g3;
 8014b5a:	68c2      	ldr	r2, [r0, #12]
 8014b5c:	68cb      	ldr	r3, [r1, #12]
  sword32 x0 = f0 ^ g0;
 8014b5e:	680e      	ldr	r6, [r1, #0]
  sword32 x1 = f1 ^ g1;
 8014b60:	684d      	ldr	r5, [r1, #4]
  sword32 x3 = f3 ^ g3;
 8014b62:	ea82 0e03 	eor.w	lr, r2, r3
  sword32 x4 = f4 ^ g4;
 8014b66:	690b      	ldr	r3, [r1, #16]
 8014b68:	6902      	ldr	r2, [r0, #16]
 8014b6a:	ea82 0803 	eor.w	r8, r2, r3
  sword32 x5 = f5 ^ g5;
 8014b6e:	694b      	ldr	r3, [r1, #20]
 8014b70:	6942      	ldr	r2, [r0, #20]
 8014b72:	ea82 0903 	eor.w	r9, r2, r3
  sword32 x6 = f6 ^ g6;
 8014b76:	698b      	ldr	r3, [r1, #24]
 8014b78:	6982      	ldr	r2, [r0, #24]
 8014b7a:	ea82 0a03 	eor.w	sl, r2, r3
  sword32 x7 = f7 ^ g7;
 8014b7e:	69cb      	ldr	r3, [r1, #28]
 8014b80:	69c2      	ldr	r2, [r0, #28]
 8014b82:	ea82 0b03 	eor.w	fp, r2, r3
  sword32 x8 = f8 ^ g8;
 8014b86:	6a0b      	ldr	r3, [r1, #32]
 8014b88:	6a02      	ldr	r2, [r0, #32]
  sword32 x9 = f9 ^ g9;
 8014b8a:	6a49      	ldr	r1, [r1, #36]	; 0x24
  sword32 x8 = f8 ^ g8;
 8014b8c:	4053      	eors	r3, r2
  sword32 x9 = f9 ^ g9;
 8014b8e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  sword32 f1 = f[1];
 8014b90:	e9d0 c700 	ldrd	ip, r7, [r0]
  sword32 x9 = f9 ^ g9;
 8014b94:	4051      	eors	r1, r2
  b = -b;
 8014b96:	9a01      	ldr	r2, [sp, #4]
  sword32 x1 = f1 ^ g1;
 8014b98:	407d      	eors	r5, r7
  b = -b;
 8014b9a:	4252      	negs	r2, r2
  x0 &= b;
  x1 &= b;
 8014b9c:	4015      	ands	r5, r2
  x6 &= b;
  x7 &= b;
  x8 &= b;
  x9 &= b;
  f[0] = f0 ^ x0;
  f[1] = f1 ^ x1;
 8014b9e:	407d      	eors	r5, r7
 8014ba0:	6045      	str	r5, [r0, #4]
  f[2] = f2 ^ x2;
 8014ba2:	6885      	ldr	r5, [r0, #8]
  x2 &= b;
 8014ba4:	4014      	ands	r4, r2
  f[2] = f2 ^ x2;
 8014ba6:	406c      	eors	r4, r5
 8014ba8:	6084      	str	r4, [r0, #8]
  f[3] = f3 ^ x3;
 8014baa:	68c4      	ldr	r4, [r0, #12]
  x3 &= b;
 8014bac:	ea0e 0e02 	and.w	lr, lr, r2
  f[3] = f3 ^ x3;
 8014bb0:	ea8e 0404 	eor.w	r4, lr, r4
 8014bb4:	60c4      	str	r4, [r0, #12]
  f[4] = f4 ^ x4;
 8014bb6:	6904      	ldr	r4, [r0, #16]
  x4 &= b;
 8014bb8:	ea08 0802 	and.w	r8, r8, r2
  f[4] = f4 ^ x4;
 8014bbc:	ea88 0404 	eor.w	r4, r8, r4
 8014bc0:	6104      	str	r4, [r0, #16]
  sword32 x0 = f0 ^ g0;
 8014bc2:	ea8c 0606 	eor.w	r6, ip, r6
  f[5] = f5 ^ x5;
 8014bc6:	6944      	ldr	r4, [r0, #20]
  x5 &= b;
 8014bc8:	ea09 0902 	and.w	r9, r9, r2
  x0 &= b;
 8014bcc:	4016      	ands	r6, r2
  f[5] = f5 ^ x5;
 8014bce:	ea89 0404 	eor.w	r4, r9, r4
  f[0] = f0 ^ x0;
 8014bd2:	ea86 060c 	eor.w	r6, r6, ip
 8014bd6:	6006      	str	r6, [r0, #0]
  f[5] = f5 ^ x5;
 8014bd8:	6144      	str	r4, [r0, #20]
  f[6] = f6 ^ x6;
 8014bda:	6984      	ldr	r4, [r0, #24]
  x6 &= b;
 8014bdc:	ea0a 0a02 	and.w	sl, sl, r2
  f[6] = f6 ^ x6;
 8014be0:	ea8a 0404 	eor.w	r4, sl, r4
 8014be4:	6184      	str	r4, [r0, #24]
  f[7] = f7 ^ x7;
 8014be6:	69c4      	ldr	r4, [r0, #28]
  x7 &= b;
 8014be8:	ea0b 0b02 	and.w	fp, fp, r2
  f[7] = f7 ^ x7;
 8014bec:	ea8b 0404 	eor.w	r4, fp, r4
 8014bf0:	61c4      	str	r4, [r0, #28]
  f[8] = f8 ^ x8;
 8014bf2:	6a04      	ldr	r4, [r0, #32]
  x8 &= b;
 8014bf4:	4013      	ands	r3, r2
  f[8] = f8 ^ x8;
 8014bf6:	4063      	eors	r3, r4
 8014bf8:	6203      	str	r3, [r0, #32]
  f[9] = f9 ^ x9;
 8014bfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  x9 &= b;
 8014bfc:	400a      	ands	r2, r1
  f[9] = f9 ^ x9;
 8014bfe:	405a      	eors	r2, r3
 8014c00:	6242      	str	r2, [r0, #36]	; 0x24
}
 8014c02:	b003      	add	sp, #12
 8014c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c08 <slide>:

#define SLIDE_SIZE 256

/* ge double scalar mult */
static void slide(signed char *r,const unsigned char *a)
{
 8014c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int i;
  int b;
  int k;

  for (i = 0;i < SLIDE_SIZE;++i)
 8014c0c:	2300      	movs	r3, #0
    r[i] = 1 & (a[i >> 3] >> (i & 7));
 8014c0e:	10da      	asrs	r2, r3, #3
 8014c10:	f003 0407 	and.w	r4, r3, #7
 8014c14:	5c8a      	ldrb	r2, [r1, r2]
 8014c16:	4122      	asrs	r2, r4
 8014c18:	f002 0201 	and.w	r2, r2, #1
 8014c1c:	54c2      	strb	r2, [r0, r3]
  for (i = 0;i < SLIDE_SIZE;++i)
 8014c1e:	3301      	adds	r3, #1
 8014c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c24:	d1f3      	bne.n	8014c0e <slide+0x6>
 8014c26:	2201      	movs	r2, #1
 8014c28:	1e41      	subs	r1, r0, #1
 8014c2a:	f500 7c80 	add.w	ip, r0, #256	; 0x100
            for (k = i + b;k < SLIDE_SIZE;++k) {
              if (!r[k]) {
                r[k] = 1;
                break;
              }
              r[k] = 0;
 8014c2e:	2700      	movs	r7, #0
                r[k] = 1;
 8014c30:	4696      	mov	lr, r2
  for (i = 0;i < SLIDE_SIZE;++i)
 8014c32:	f240 1801 	movw	r8, #257	; 0x101
    if (r[i]) {
 8014c36:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 8014c3a:	bb73      	cbnz	r3, 8014c9a <slide+0x92>
  for (i = 0;i < SLIDE_SIZE;++i)
 8014c3c:	3201      	adds	r2, #1
 8014c3e:	4542      	cmp	r2, r8
 8014c40:	d1f9      	bne.n	8014c36 <slide+0x2e>
          } else
            break;
        }
      }
    }
}
 8014c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (r[i + b]) {
 8014c46:	56c5      	ldrsb	r5, [r0, r3]
 8014c48:	b155      	cbz	r5, 8014c60 <slide+0x58>
          if (r[i] + (r[i + b] << b) <= 15) {
 8014c4a:	f991 4000 	ldrsb.w	r4, [r1]
 8014c4e:	40b5      	lsls	r5, r6
 8014c50:	eb04 0905 	add.w	r9, r4, r5
 8014c54:	f1b9 0f0f 	cmp.w	r9, #15
 8014c58:	dc0a      	bgt.n	8014c70 <slide+0x68>
            r[i] += (signed char)(r[i + b] << b); r[i + b] = 0;
 8014c5a:	f881 9000 	strb.w	r9, [r1]
 8014c5e:	54c7      	strb	r7, [r0, r3]
      for (b = 1;b <= 6 && i + b < SLIDE_SIZE;++b) {
 8014c60:	3601      	adds	r6, #1
 8014c62:	2e07      	cmp	r6, #7
 8014c64:	f103 0301 	add.w	r3, r3, #1
 8014c68:	d0e8      	beq.n	8014c3c <slide+0x34>
 8014c6a:	2bff      	cmp	r3, #255	; 0xff
 8014c6c:	ddeb      	ble.n	8014c46 <slide+0x3e>
 8014c6e:	e7e5      	b.n	8014c3c <slide+0x34>
          } else if (r[i] - (r[i + b] << b) >= -15) {
 8014c70:	1b64      	subs	r4, r4, r5
 8014c72:	f114 0f0f 	cmn.w	r4, #15
 8014c76:	dbe1      	blt.n	8014c3c <slide+0x34>
            r[i] -= (signed char)(r[i + b] << b);
 8014c78:	700c      	strb	r4, [r1, #0]
            for (k = i + b;k < SLIDE_SIZE;++k) {
 8014c7a:	181c      	adds	r4, r3, r0
              if (!r[k]) {
 8014c7c:	4625      	mov	r5, r4
 8014c7e:	3401      	adds	r4, #1
 8014c80:	f995 9000 	ldrsb.w	r9, [r5]
 8014c84:	f1b9 0f00 	cmp.w	r9, #0
 8014c88:	d102      	bne.n	8014c90 <slide+0x88>
                r[k] = 1;
 8014c8a:	f885 e000 	strb.w	lr, [r5]
                break;
 8014c8e:	e7e7      	b.n	8014c60 <slide+0x58>
            for (k = i + b;k < SLIDE_SIZE;++k) {
 8014c90:	45a4      	cmp	ip, r4
              r[k] = 0;
 8014c92:	f804 7c01 	strb.w	r7, [r4, #-1]
            for (k = i + b;k < SLIDE_SIZE;++k) {
 8014c96:	d1f1      	bne.n	8014c7c <slide+0x74>
 8014c98:	e7e2      	b.n	8014c60 <slide+0x58>
 8014c9a:	4613      	mov	r3, r2
      for (b = 1;b <= 6 && i + b < SLIDE_SIZE;++b) {
 8014c9c:	2601      	movs	r6, #1
 8014c9e:	e7e4      	b.n	8014c6a <slide+0x62>

08014ca0 <ge_p1p1_to_p2>:
r = p
*/

#ifndef CURVED25519_ASM
static void ge_p1p1_to_p2(ge_p2 *r,const ge_p1p1 *p)
{
 8014ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  fe_mul(r->X,p->X,p->T);
 8014ca2:	f101 0778 	add.w	r7, r1, #120	; 0x78
{
 8014ca6:	460c      	mov	r4, r1
 8014ca8:	4605      	mov	r5, r0
  fe_mul(r->X,p->X,p->T);
 8014caa:	463a      	mov	r2, r7
  fe_mul(r->Y,p->Y,p->Z);
 8014cac:	f104 0650 	add.w	r6, r4, #80	; 0x50
  fe_mul(r->X,p->X,p->T);
 8014cb0:	f7fe fe7b 	bl	80139aa <fe_mul>
  fe_mul(r->Y,p->Y,p->Z);
 8014cb4:	4632      	mov	r2, r6
 8014cb6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014cba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014cbe:	f7fe fe74 	bl	80139aa <fe_mul>
  fe_mul(r->Z,p->Z,p->T);
 8014cc2:	463a      	mov	r2, r7
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	f105 0050 	add.w	r0, r5, #80	; 0x50
}
 8014cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  fe_mul(r->Z,p->Z,p->T);
 8014cce:	f7fe be6c 	b.w	80139aa <fe_mul>

08014cd2 <ge_madd>:
{
 8014cd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cd6:	4605      	mov	r5, r0
    fe_add(r->X,p->Y,p->X);
 8014cd8:	f101 0828 	add.w	r8, r1, #40	; 0x28
{
 8014cdc:	b08b      	sub	sp, #44	; 0x2c
    fe_sub(r->Y,p->Y,p->X);
 8014cde:	f105 0628 	add.w	r6, r5, #40	; 0x28
{
 8014ce2:	460c      	mov	r4, r1
 8014ce4:	4617      	mov	r7, r2
    fe_add(r->X,p->Y,p->X);
 8014ce6:	460a      	mov	r2, r1
 8014ce8:	4641      	mov	r1, r8
 8014cea:	f7fe fc29 	bl	8013540 <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 8014cee:	4622      	mov	r2, r4
 8014cf0:	4641      	mov	r1, r8
 8014cf2:	4630      	mov	r0, r6
    fe_mul(r->Z,r->X,q->yplusx);
 8014cf4:	f105 0850 	add.w	r8, r5, #80	; 0x50
    fe_sub(r->Y,p->Y,p->X);
 8014cf8:	f7fe fd04 	bl	8013704 <fe_sub>
    fe_mul(r->Z,r->X,q->yplusx);
 8014cfc:	463a      	mov	r2, r7
 8014cfe:	4629      	mov	r1, r5
 8014d00:	4640      	mov	r0, r8
 8014d02:	f7fe fe52 	bl	80139aa <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 8014d06:	f105 0978 	add.w	r9, r5, #120	; 0x78
    fe_mul(r->Y,r->Y,q->yminusx);
 8014d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014d0e:	4631      	mov	r1, r6
 8014d10:	4630      	mov	r0, r6
 8014d12:	f7fe fe4a 	bl	80139aa <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 8014d16:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8014d1a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014d1e:	4648      	mov	r0, r9
 8014d20:	f7fe fe43 	bl	80139aa <fe_mul>
    fe_add(t0,p->Z,p->Z);
 8014d24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014d28:	4611      	mov	r1, r2
 8014d2a:	4668      	mov	r0, sp
 8014d2c:	f7fe fc08 	bl	8013540 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 8014d30:	4632      	mov	r2, r6
 8014d32:	4641      	mov	r1, r8
 8014d34:	4628      	mov	r0, r5
 8014d36:	f7fe fce5 	bl	8013704 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 8014d3a:	4632      	mov	r2, r6
 8014d3c:	4641      	mov	r1, r8
 8014d3e:	4630      	mov	r0, r6
 8014d40:	f7fe fbfe 	bl	8013540 <fe_add>
    fe_add(r->Z,t0,r->T);
 8014d44:	464a      	mov	r2, r9
 8014d46:	4669      	mov	r1, sp
 8014d48:	4640      	mov	r0, r8
 8014d4a:	f7fe fbf9 	bl	8013540 <fe_add>
    fe_sub(r->T,t0,r->T);
 8014d4e:	464a      	mov	r2, r9
 8014d50:	4669      	mov	r1, sp
 8014d52:	4648      	mov	r0, r9
 8014d54:	f7fe fcd6 	bl	8013704 <fe_sub>
}
 8014d58:	b00b      	add	sp, #44	; 0x2c
 8014d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014d5e <ge_p1p1_to_p3>:
r = p
*/

#ifndef CURVED25519_ASM
static WC_INLINE void ge_p1p1_to_p3(ge_p3 *r,const ge_p1p1 *p)
{
 8014d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d62:	460c      	mov	r4, r1
  fe_mul(r->X,p->X,p->T);
 8014d64:	f101 0878 	add.w	r8, r1, #120	; 0x78
{
 8014d68:	4605      	mov	r5, r0
  fe_mul(r->X,p->X,p->T);
 8014d6a:	4642      	mov	r2, r8
  fe_mul(r->Y,p->Y,p->Z);
 8014d6c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8014d70:	f104 0750 	add.w	r7, r4, #80	; 0x50
  fe_mul(r->X,p->X,p->T);
 8014d74:	f7fe fe19 	bl	80139aa <fe_mul>
  fe_mul(r->Y,p->Y,p->Z);
 8014d78:	463a      	mov	r2, r7
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014d80:	f7fe fe13 	bl	80139aa <fe_mul>
  fe_mul(r->Z,p->Z,p->T);
 8014d84:	4642      	mov	r2, r8
 8014d86:	4639      	mov	r1, r7
 8014d88:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8014d8c:	f7fe fe0d 	bl	80139aa <fe_mul>
  fe_mul(r->T,p->X,p->Y);
 8014d90:	4632      	mov	r2, r6
 8014d92:	4621      	mov	r1, r4
 8014d94:	f105 0078 	add.w	r0, r5, #120	; 0x78
}
 8014d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  fe_mul(r->T,p->X,p->Y);
 8014d9c:	f7fe be05 	b.w	80139aa <fe_mul>

08014da0 <ge_add>:
{
 8014da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014da4:	4604      	mov	r4, r0
    fe_add(r->X,p->Y,p->X);
 8014da6:	f101 0828 	add.w	r8, r1, #40	; 0x28
{
 8014daa:	b08b      	sub	sp, #44	; 0x2c
    fe_sub(r->Y,p->Y,p->X);
 8014dac:	f104 0728 	add.w	r7, r4, #40	; 0x28
{
 8014db0:	4616      	mov	r6, r2
 8014db2:	460d      	mov	r5, r1
    fe_add(r->X,p->Y,p->X);
 8014db4:	460a      	mov	r2, r1
 8014db6:	4641      	mov	r1, r8
 8014db8:	f7fe fbc2 	bl	8013540 <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 8014dbc:	462a      	mov	r2, r5
 8014dbe:	4641      	mov	r1, r8
 8014dc0:	4638      	mov	r0, r7
    fe_mul(r->Z,r->X,q->YplusX);
 8014dc2:	f104 0850 	add.w	r8, r4, #80	; 0x50
    fe_sub(r->Y,p->Y,p->X);
 8014dc6:	f7fe fc9d 	bl	8013704 <fe_sub>
    fe_mul(r->Z,r->X,q->YplusX);
 8014dca:	4632      	mov	r2, r6
 8014dcc:	4621      	mov	r1, r4
 8014dce:	4640      	mov	r0, r8
 8014dd0:	f7fe fdeb 	bl	80139aa <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 8014dd4:	f104 0978 	add.w	r9, r4, #120	; 0x78
    fe_mul(r->Y,r->Y,q->YminusX);
 8014dd8:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8014ddc:	4639      	mov	r1, r7
 8014dde:	4638      	mov	r0, r7
 8014de0:	f7fe fde3 	bl	80139aa <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 8014de4:	f105 0278 	add.w	r2, r5, #120	; 0x78
 8014de8:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8014dec:	4648      	mov	r0, r9
 8014dee:	f7fe fddc 	bl	80139aa <fe_mul>
    fe_mul(r->X,p->Z,q->Z);
 8014df2:	f106 0250 	add.w	r2, r6, #80	; 0x50
 8014df6:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f7fe fdd5 	bl	80139aa <fe_mul>
    fe_add(t0,r->X,r->X);
 8014e00:	4622      	mov	r2, r4
 8014e02:	4621      	mov	r1, r4
 8014e04:	4668      	mov	r0, sp
 8014e06:	f7fe fb9b 	bl	8013540 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 8014e0a:	463a      	mov	r2, r7
 8014e0c:	4641      	mov	r1, r8
 8014e0e:	4620      	mov	r0, r4
 8014e10:	f7fe fc78 	bl	8013704 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 8014e14:	463a      	mov	r2, r7
 8014e16:	4641      	mov	r1, r8
 8014e18:	4638      	mov	r0, r7
 8014e1a:	f7fe fb91 	bl	8013540 <fe_add>
    fe_add(r->Z,t0,r->T);
 8014e1e:	464a      	mov	r2, r9
 8014e20:	4669      	mov	r1, sp
 8014e22:	4640      	mov	r0, r8
 8014e24:	f7fe fb8c 	bl	8013540 <fe_add>
    fe_sub(r->T,t0,r->T);
 8014e28:	464a      	mov	r2, r9
 8014e2a:	4669      	mov	r1, sp
 8014e2c:	4648      	mov	r0, r9
 8014e2e:	f7fe fc69 	bl	8013704 <fe_sub>
}
 8014e32:	b00b      	add	sp, #44	; 0x2c
 8014e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014e38 <ge_p3_to_cached>:
} ;
#endif


static WC_INLINE void ge_p3_to_cached(ge_cached *r,const ge_p3 *p)
{
 8014e38:	b570      	push	{r4, r5, r6, lr}
  fe_add(r->YplusX,p->Y,p->X);
 8014e3a:	f101 0628 	add.w	r6, r1, #40	; 0x28
{
 8014e3e:	4605      	mov	r5, r0
 8014e40:	460c      	mov	r4, r1
  fe_add(r->YplusX,p->Y,p->X);
 8014e42:	460a      	mov	r2, r1
 8014e44:	4631      	mov	r1, r6
 8014e46:	f7fe fb7b 	bl	8013540 <fe_add>
  fe_sub(r->YminusX,p->Y,p->X);
 8014e4a:	4622      	mov	r2, r4
 8014e4c:	4631      	mov	r1, r6
 8014e4e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014e52:	f7fe fc57 	bl	8013704 <fe_sub>
  fe_copy(r->Z,p->Z);
 8014e56:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8014e5a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8014e5e:	f7fe fd8c 	bl	801397a <fe_copy>
  fe_mul(r->T2d,p->T,d2);
 8014e62:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8014e66:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8014e6a:	4a02      	ldr	r2, [pc, #8]	; (8014e74 <ge_p3_to_cached+0x3c>)
}
 8014e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fe_mul(r->T2d,p->T,d2);
 8014e70:	f7fe bd9b 	b.w	80139aa <fe_mul>
 8014e74:	0802ac74 	.word	0x0802ac74

08014e78 <ge_p2_dbl>:
{
 8014e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	460e      	mov	r6, r1
 8014e80:	b08b      	sub	sp, #44	; 0x2c
    fe_sq(r->Z,p->Y);
 8014e82:	f104 0550 	add.w	r5, r4, #80	; 0x50
 8014e86:	f106 0928 	add.w	r9, r6, #40	; 0x28
    fe_sq(r->X,p->X);
 8014e8a:	f7fe f981 	bl	8013190 <fe_sq>
    fe_sq2(r->T,p->Z);
 8014e8e:	f104 0878 	add.w	r8, r4, #120	; 0x78
    fe_sq(r->Z,p->Y);
 8014e92:	4649      	mov	r1, r9
 8014e94:	4628      	mov	r0, r5
 8014e96:	f7fe f97b 	bl	8013190 <fe_sq>
    fe_add(r->Y,p->X,p->Y);
 8014e9a:	f104 0728 	add.w	r7, r4, #40	; 0x28
    fe_sq2(r->T,p->Z);
 8014e9e:	f106 0150 	add.w	r1, r6, #80	; 0x50
 8014ea2:	4640      	mov	r0, r8
 8014ea4:	f7ff fb4d 	bl	8014542 <fe_sq2>
    fe_add(r->Y,p->X,p->Y);
 8014ea8:	464a      	mov	r2, r9
 8014eaa:	4631      	mov	r1, r6
 8014eac:	4638      	mov	r0, r7
 8014eae:	f7fe fb47 	bl	8013540 <fe_add>
    fe_sq(t0,r->Y);
 8014eb2:	4639      	mov	r1, r7
 8014eb4:	4668      	mov	r0, sp
 8014eb6:	f7fe f96b 	bl	8013190 <fe_sq>
    fe_add(r->Y,r->Z,r->X);
 8014eba:	4622      	mov	r2, r4
 8014ebc:	4629      	mov	r1, r5
 8014ebe:	4638      	mov	r0, r7
 8014ec0:	f7fe fb3e 	bl	8013540 <fe_add>
    fe_sub(r->Z,r->Z,r->X);
 8014ec4:	4622      	mov	r2, r4
 8014ec6:	4629      	mov	r1, r5
 8014ec8:	4628      	mov	r0, r5
 8014eca:	f7fe fc1b 	bl	8013704 <fe_sub>
    fe_sub(r->X,t0,r->Y);
 8014ece:	463a      	mov	r2, r7
 8014ed0:	4669      	mov	r1, sp
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f7fe fc16 	bl	8013704 <fe_sub>
    fe_sub(r->T,r->T,r->Z);
 8014ed8:	462a      	mov	r2, r5
 8014eda:	4641      	mov	r1, r8
 8014edc:	4640      	mov	r0, r8
 8014ede:	f7fe fc11 	bl	8013704 <fe_sub>
}
 8014ee2:	b00b      	add	sp, #44	; 0x2c
 8014ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014ee8 <ge_p3_dbl>:
{
 8014ee8:	b530      	push	{r4, r5, lr}
 8014eea:	b09f      	sub	sp, #124	; 0x7c
 8014eec:	460c      	mov	r4, r1
 8014eee:	4605      	mov	r5, r0
*/

#ifndef CURVED25519_ASM
static void ge_p3_to_p2(ge_p2 *r,const ge_p3 *p)
{
  fe_copy(r->X,p->X);
 8014ef0:	4668      	mov	r0, sp
 8014ef2:	f7fe fd42 	bl	801397a <fe_copy>
  fe_copy(r->Y,p->Y);
 8014ef6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014efa:	a80a      	add	r0, sp, #40	; 0x28
 8014efc:	f7fe fd3d 	bl	801397a <fe_copy>
  fe_copy(r->Z,p->Z);
 8014f00:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8014f04:	a814      	add	r0, sp, #80	; 0x50
 8014f06:	f7fe fd38 	bl	801397a <fe_copy>
    ge_p2_dbl(r,&q);
 8014f0a:	4669      	mov	r1, sp
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	f7ff ffb3 	bl	8014e78 <ge_p2_dbl>
}
 8014f12:	b01f      	add	sp, #124	; 0x7c
 8014f14:	bd30      	pop	{r4, r5, pc}

08014f16 <cmov>:
{
 8014f16:	b570      	push	{r4, r5, r6, lr}
  word32 y = x; /* 0: yes; 1..255: no */
 8014f18:	ea82 0403 	eor.w	r4, r2, r3
  y -= 1; /* 4294967295: yes; 0..254: no */
 8014f1c:	3c01      	subs	r4, #1
  y >>= 31; /* 1: yes; 0: no */
 8014f1e:	0fe4      	lsrs	r4, r4, #31
{
 8014f20:	4605      	mov	r5, r0
 8014f22:	460e      	mov	r6, r1
  fe_cmov(t->yplusx,u->yplusx,b);
 8014f24:	4622      	mov	r2, r4
 8014f26:	f7ff fe12 	bl	8014b4e <fe_cmov>
  fe_cmov(t->yminusx,u->yminusx,b);
 8014f2a:	4622      	mov	r2, r4
 8014f2c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014f30:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014f34:	f7ff fe0b 	bl	8014b4e <fe_cmov>
  fe_cmov(t->xy2d,u->xy2d,b);
 8014f38:	4622      	mov	r2, r4
 8014f3a:	f106 0150 	add.w	r1, r6, #80	; 0x50
 8014f3e:	f105 0050 	add.w	r0, r5, #80	; 0x50
}
 8014f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fe_cmov(t->xy2d,u->xy2d,b);
 8014f46:	f7ff be02 	b.w	8014b4e <fe_cmov>
	...

08014f4c <ge_select>:
{
 8014f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f50:	4606      	mov	r6, r0
  unsigned char babs = (unsigned char)(b - (((-bnegative) & b) << 1));
 8014f52:	ea02 74e2 	and.w	r4, r2, r2, asr #31
{
 8014f56:	b09e      	sub	sp, #120	; 0x78
  return ((unsigned char)b) >> 7;
 8014f58:	0fd7      	lsrs	r7, r2, #31
#if defined(HAVE_ED25519_SIGN) || defined(HAVE_ED25519_MAKE_KEY)
/* ge_precomp_0 */
static void ge_precomp_0(ge_precomp *h)
{
  fe_1(h->yplusx);
  fe_1(h->yminusx);
 8014f5a:	f106 0928 	add.w	r9, r6, #40	; 0x28
  unsigned char babs = (unsigned char)(b - (((-bnegative) & b) << 1));
 8014f5e:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 8014f62:	f002 04ff 	and.w	r4, r2, #255	; 0xff
{
 8014f66:	460d      	mov	r5, r1
  fe_0(h->xy2d);
 8014f68:	f106 0850 	add.w	r8, r6, #80	; 0x50
  fe_1(h->yplusx);
 8014f6c:	f7fe f8f6 	bl	801315c <fe_1>
  fe_1(h->yminusx);
 8014f70:	4648      	mov	r0, r9
 8014f72:	f7fe f8f3 	bl	801315c <fe_1>
  fe_0(h->xy2d);
 8014f76:	4640      	mov	r0, r8
  cmov(t,&base[pos][0],babs,1);
 8014f78:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015028 <ge_select+0xdc>
  fe_0(h->xy2d);
 8014f7c:	f7fe f8fb 	bl	8013176 <fe_0>
  cmov(t,&base[pos][0],babs,1);
 8014f80:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8014f84:	434d      	muls	r5, r1
 8014f86:	4622      	mov	r2, r4
 8014f88:	eb0a 0105 	add.w	r1, sl, r5
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	2301      	movs	r3, #1
 8014f90:	f7ff ffc1 	bl	8014f16 <cmov>
  cmov(t,&base[pos][1],babs,2);
 8014f94:	f105 0178 	add.w	r1, r5, #120	; 0x78
 8014f98:	4622      	mov	r2, r4
 8014f9a:	4451      	add	r1, sl
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	2302      	movs	r3, #2
 8014fa0:	f7ff ffb9 	bl	8014f16 <cmov>
  cmov(t,&base[pos][2],babs,3);
 8014fa4:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 8014fa8:	4622      	mov	r2, r4
 8014faa:	4451      	add	r1, sl
 8014fac:	4630      	mov	r0, r6
 8014fae:	2303      	movs	r3, #3
 8014fb0:	f7ff ffb1 	bl	8014f16 <cmov>
  cmov(t,&base[pos][3],babs,4);
 8014fb4:	f505 71b4 	add.w	r1, r5, #360	; 0x168
 8014fb8:	4622      	mov	r2, r4
 8014fba:	4451      	add	r1, sl
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	2304      	movs	r3, #4
 8014fc0:	f7ff ffa9 	bl	8014f16 <cmov>
  cmov(t,&base[pos][4],babs,5);
 8014fc4:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
 8014fc8:	4622      	mov	r2, r4
 8014fca:	4451      	add	r1, sl
 8014fcc:	4630      	mov	r0, r6
 8014fce:	2305      	movs	r3, #5
 8014fd0:	f7ff ffa1 	bl	8014f16 <cmov>
  cmov(t,&base[pos][5],babs,6);
 8014fd4:	f505 7116 	add.w	r1, r5, #600	; 0x258
 8014fd8:	4622      	mov	r2, r4
 8014fda:	4451      	add	r1, sl
 8014fdc:	4630      	mov	r0, r6
 8014fde:	2306      	movs	r3, #6
 8014fe0:	f7ff ff99 	bl	8014f16 <cmov>
  cmov(t,&base[pos][6],babs,7);
 8014fe4:	f505 7134 	add.w	r1, r5, #720	; 0x2d0
 8014fe8:	4622      	mov	r2, r4
 8014fea:	4451      	add	r1, sl
 8014fec:	4630      	mov	r0, r6
 8014fee:	2307      	movs	r3, #7
 8014ff0:	f7ff ff91 	bl	8014f16 <cmov>
  cmov(t,&base[pos][7],babs,8);
 8014ff4:	f505 7152 	add.w	r1, r5, #840	; 0x348
 8014ff8:	2308      	movs	r3, #8
 8014ffa:	4622      	mov	r2, r4
 8014ffc:	4451      	add	r1, sl
 8014ffe:	4630      	mov	r0, r6
 8015000:	f7ff ff89 	bl	8014f16 <cmov>
  fe_cswap(t->yminusx, t->yplusx, bnegative);
 8015004:	463a      	mov	r2, r7
 8015006:	4631      	mov	r1, r6
 8015008:	4648      	mov	r0, r9
 801500a:	f7ff f84a 	bl	80140a2 <fe_cswap>
  fe_neg(minust.xy2d,t->xy2d);
 801500e:	4641      	mov	r1, r8
 8015010:	a814      	add	r0, sp, #80	; 0x50
 8015012:	f7ff fd51 	bl	8014ab8 <fe_neg>
  fe_cmov(t->xy2d,minust.xy2d,bnegative);
 8015016:	463a      	mov	r2, r7
 8015018:	a914      	add	r1, sp, #80	; 0x50
 801501a:	4640      	mov	r0, r8
 801501c:	f7ff fd97 	bl	8014b4e <fe_cmov>
}
 8015020:	b01e      	add	sp, #120	; 0x78
 8015022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015026:	bf00      	nop
 8015028:	0802344c 	.word	0x0802344c

0801502c <sc_reduce>:
{
 801502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015030:	b099      	sub	sp, #100	; 0x64
 8015032:	4604      	mov	r4, r0
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 8015034:	f7fe f885 	bl	8013142 <load_3>
 8015038:	900f      	str	r0, [sp, #60]	; 0x3c
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 801503a:	1ca0      	adds	r0, r4, #2
 801503c:	f7fe f88b 	bl	8013156 <load_4>
 8015040:	9010      	str	r0, [sp, #64]	; 0x40
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 8015042:	1d60      	adds	r0, r4, #5
 8015044:	f7fe f87d 	bl	8013142 <load_3>
 8015048:	9011      	str	r0, [sp, #68]	; 0x44
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 801504a:	1de0      	adds	r0, r4, #7
 801504c:	f7fe f883 	bl	8013156 <load_4>
 8015050:	9012      	str	r0, [sp, #72]	; 0x48
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 8015052:	f104 000a 	add.w	r0, r4, #10
 8015056:	f7fe f87e 	bl	8013156 <load_4>
 801505a:	9013      	str	r0, [sp, #76]	; 0x4c
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 801505c:	f104 000d 	add.w	r0, r4, #13
 8015060:	f7fe f86f 	bl	8013142 <load_3>
 8015064:	9014      	str	r0, [sp, #80]	; 0x50
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 8015066:	f104 000f 	add.w	r0, r4, #15
 801506a:	f7fe f874 	bl	8013156 <load_4>
 801506e:	9007      	str	r0, [sp, #28]
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 8015070:	f104 0012 	add.w	r0, r4, #18
 8015074:	f7fe f865 	bl	8013142 <load_3>
 8015078:	900a      	str	r0, [sp, #40]	; 0x28
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 801507a:	f104 0015 	add.w	r0, r4, #21
 801507e:	f7fe f860 	bl	8013142 <load_3>
 8015082:	9008      	str	r0, [sp, #32]
    t[ 9] = MASK_21 & (load_4(s + 23) >> 5);
 8015084:	f104 0017 	add.w	r0, r4, #23
 8015088:	f7fe f865 	bl	8013156 <load_4>
 801508c:	900c      	str	r0, [sp, #48]	; 0x30
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 801508e:	f104 001a 	add.w	r0, r4, #26
 8015092:	f7fe f856 	bl	8013142 <load_3>
 8015096:	9009      	str	r0, [sp, #36]	; 0x24
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 8015098:	f104 001c 	add.w	r0, r4, #28
 801509c:	f7fe f85b 	bl	8013156 <load_4>
 80150a0:	900e      	str	r0, [sp, #56]	; 0x38
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 80150a2:	f104 001f 	add.w	r0, r4, #31
 80150a6:	f7fe f856 	bl	8013156 <load_4>
 80150aa:	9005      	str	r0, [sp, #20]
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 80150ac:	f104 0022 	add.w	r0, r4, #34	; 0x22
 80150b0:	f7fe f847 	bl	8013142 <load_3>
 80150b4:	9015      	str	r0, [sp, #84]	; 0x54
    t[14] = MASK_21 & (load_4(s + 36) >> 6);
 80150b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80150ba:	f7fe f84c 	bl	8013156 <load_4>
 80150be:	4605      	mov	r5, r0
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 80150c0:	f104 0027 	add.w	r0, r4, #39	; 0x27
 80150c4:	f7fe f83d 	bl	8013142 <load_3>
 80150c8:	9016      	str	r0, [sp, #88]	; 0x58
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 80150ca:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80150ce:	f7fe f838 	bl	8013142 <load_3>
 80150d2:	9001      	str	r0, [sp, #4]
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 80150d4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80150d8:	f7fe f83d 	bl	8013156 <load_4>
 80150dc:	9017      	str	r0, [sp, #92]	; 0x5c
    t[18] = MASK_21 & (load_3(s + 47) >> 2);
 80150de:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80150e2:	f7fe f82e 	bl	8013142 <load_3>
 80150e6:	f3c0 0994 	ubfx	r9, r0, #2, #21
    t[19] = MASK_21 & (load_4(s + 49) >> 7);
 80150ea:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80150ee:	f7fe f832 	bl	8013156 <load_4>
 80150f2:	f3c0 1ad4 	ubfx	sl, r0, #7, #21
    t[20] = MASK_21 & (load_4(s + 52) >> 4);
 80150f6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80150fa:	f7fe f82c 	bl	8013156 <load_4>
 80150fe:	f3c0 1714 	ubfx	r7, r0, #4, #21
    t[21] = MASK_21 & (load_3(s + 55) >> 1);
 8015102:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8015106:	f7fe f81c 	bl	8013142 <load_3>
 801510a:	f3c0 0854 	ubfx	r8, r0, #1, #21
    t[22] = MASK_21 & (load_4(s + 57) >> 6);
 801510e:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8015112:	f7fe f820 	bl	8013156 <load_4>
 8015116:	f3c0 1694 	ubfx	r6, r0, #6, #21
    t[23] =           (load_4(s + 60) >> 3);
 801511a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801511e:	f7fe f81a 	bl	8013156 <load_4>
 8015122:	08cb      	lsrs	r3, r1, #3
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	ea4f 0bd0 	mov.w	fp, r0, lsr #3
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 801512a:	9b01      	ldr	r3, [sp, #4]
    t[16] -= t[23] * ORDER_5;
 801512c:	f8df c378 	ldr.w	ip, [pc, #888]	; 80154a8 <sc_reduce+0x47c>
 8015130:	9a00      	ldr	r2, [sp, #0]
    t[14] -= t[23] * ORDER_3;
 8015132:	f8df e378 	ldr.w	lr, [pc, #888]	; 80154ac <sc_reduce+0x480>
    t[23] =           (load_4(s + 60) >> 3);
 8015136:	ea4b 7b41 	orr.w	fp, fp, r1, lsl #29
    t[16] = MASK_21 & (load_3(s + 42) >> 0);
 801513a:	f3c3 0014 	ubfx	r0, r3, #0, #21
    t[16] -= t[23] * ORDER_5;
 801513e:	f1cb 0300 	rsb	r3, fp, #0
 8015142:	fb0c 3202 	mla	r2, ip, r2, r3
 8015146:	fbab 310c 	umull	r3, r1, fp, ip
 801514a:	18c3      	adds	r3, r0, r3
 801514c:	9302      	str	r3, [sp, #8]
 801514e:	eb42 0301 	adc.w	r3, r2, r1
    t[14] -= t[23] * ORDER_3;
 8015152:	9a00      	ldr	r2, [sp, #0]
    t[16] -= t[23] * ORDER_5;
 8015154:	9301      	str	r3, [sp, #4]
    t[14] -= t[23] * ORDER_3;
 8015156:	f1cb 0300 	rsb	r3, fp, #0
 801515a:	fb0e 3202 	mla	r2, lr, r2, r3
    t[14] = MASK_21 & (load_4(s + 36) >> 6);
 801515e:	f3c5 1194 	ubfx	r1, r5, #6, #21
    t[14] -= t[23] * ORDER_3;
 8015162:	fbab 030e 	umull	r0, r3, fp, lr
 8015166:	1809      	adds	r1, r1, r0
 8015168:	eb42 0203 	adc.w	r2, r2, r3
    t[14] -= t[22] * ORDER_4;
 801516c:	4bd0      	ldr	r3, [pc, #832]	; (80154b0 <sc_reduce+0x484>)
    t[12] -= t[23] * ORDER_1;
 801516e:	9d00      	ldr	r5, [sp, #0]
    t[14] -= t[22] * ORDER_4;
 8015170:	fba6 0303 	umull	r0, r3, r6, r3
 8015174:	1809      	adds	r1, r1, r0
 8015176:	eba3 0306 	sub.w	r3, r3, r6
 801517a:	eb43 0302 	adc.w	r3, r3, r2
    t[14] -= t[21] * ORDER_5;
 801517e:	fba8 020c 	umull	r0, r2, r8, ip
 8015182:	1809      	adds	r1, r1, r0
 8015184:	eba2 0208 	sub.w	r2, r2, r8
 8015188:	eb42 0303 	adc.w	r3, r2, r3
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 801518c:	9a05      	ldr	r2, [sp, #20]
    t[14] -= t[21] * ORDER_5;
 801518e:	9304      	str	r3, [sp, #16]
    t[12] = MASK_21 & (load_4(s + 31) >> 4);
 8015190:	f3c2 1314 	ubfx	r3, r2, #4, #21
    t[12] -= t[23] * ORDER_1;
 8015194:	4ac7      	ldr	r2, [pc, #796]	; (80154b4 <sc_reduce+0x488>)
    t[14] -= t[21] * ORDER_5;
 8015196:	9103      	str	r1, [sp, #12]
    t[12] -= t[23] * ORDER_1;
 8015198:	f1cb 0000 	rsb	r0, fp, #0
 801519c:	fb02 0105 	mla	r1, r2, r5, r0
 80151a0:	fbab 0202 	umull	r0, r2, fp, r2
    t[12] -= t[22] * ORDER_2;
 80151a4:	4dc4      	ldr	r5, [pc, #784]	; (80154b8 <sc_reduce+0x48c>)
    t[12] -= t[23] * ORDER_1;
 80151a6:	181b      	adds	r3, r3, r0
 80151a8:	eb41 0002 	adc.w	r0, r1, r2
    t[12] -= t[22] * ORDER_2;
 80151ac:	fba6 5205 	umull	r5, r2, r6, r5
 80151b0:	1b92      	subs	r2, r2, r6
 80151b2:	195b      	adds	r3, r3, r5
 80151b4:	eb42 0100 	adc.w	r1, r2, r0
    t[12] -= t[21] * ORDER_3;
 80151b8:	fba8 020e 	umull	r0, r2, r8, lr
 80151bc:	181b      	adds	r3, r3, r0
 80151be:	eba2 0208 	sub.w	r2, r2, r8
 80151c2:	eb42 0201 	adc.w	r2, r2, r1
    t[12] -= t[20] * ORDER_4;
 80151c6:	49ba      	ldr	r1, [pc, #744]	; (80154b0 <sc_reduce+0x484>)
 80151c8:	fba7 0101 	umull	r0, r1, r7, r1
 80151cc:	1bc9      	subs	r1, r1, r7
 80151ce:	181b      	adds	r3, r3, r0
 80151d0:	eb41 0202 	adc.w	r2, r1, r2
    t[12] -= t[19] * ORDER_5;
 80151d4:	fbaa 010c 	umull	r0, r1, sl, ip
 80151d8:	181b      	adds	r3, r3, r0
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 80151da:	9807      	ldr	r0, [sp, #28]
    t[12] -= t[19] * ORDER_5;
 80151dc:	9305      	str	r3, [sp, #20]
    t[ 6] = MASK_21 & (load_4(s + 15) >> 6);
 80151de:	f3c0 1e94 	ubfx	lr, r0, #6, #21
    t[ 6] -= t[18] * ORDER_0;
 80151e2:	48b6      	ldr	r0, [pc, #728]	; (80154bc <sc_reduce+0x490>)
    t[12] -= t[19] * ORDER_5;
 80151e4:	eba1 010a 	sub.w	r1, r1, sl
 80151e8:	eb41 0302 	adc.w	r3, r1, r2
    t[ 6] -= t[18] * ORDER_0;
 80151ec:	fba9 c100 	umull	ip, r1, r9, r0
    t[12] -= t[19] * ORDER_5;
 80151f0:	9306      	str	r3, [sp, #24]
    t[ 6] -= t[18] * ORDER_0;
 80151f2:	eb1e 030c 	adds.w	r3, lr, ip
 80151f6:	9307      	str	r3, [sp, #28]
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 80151f8:	9b08      	ldr	r3, [sp, #32]
    t[ 8] -= t[19] * ORDER_1;
 80151fa:	4aae      	ldr	r2, [pc, #696]	; (80154b4 <sc_reduce+0x488>)
    t[ 8] -= t[20] * ORDER_0;
 80151fc:	4684      	mov	ip, r0
    t[ 6] -= t[18] * ORDER_0;
 80151fe:	eba1 0109 	sub.w	r1, r1, r9
    t[ 8] -= t[20] * ORDER_0;
 8015202:	fba7 5000 	umull	r5, r0, r7, r0
    t[ 8] = MASK_21 & (load_3(s + 21) >> 0);
 8015206:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 6] -= t[18] * ORDER_0;
 801520a:	f141 0100 	adc.w	r1, r1, #0
    t[ 8] -= t[20] * ORDER_0;
 801520e:	1bc0      	subs	r0, r0, r7
 8015210:	195b      	adds	r3, r3, r5
    t[ 8] -= t[19] * ORDER_1;
 8015212:	fbaa 5202 	umull	r5, r2, sl, r2
    t[ 8] -= t[20] * ORDER_0;
 8015216:	f140 0000 	adc.w	r0, r0, #0
    t[ 8] -= t[19] * ORDER_1;
 801521a:	195b      	adds	r3, r3, r5
    t[ 8] -= t[18] * ORDER_2;
 801521c:	4da6      	ldr	r5, [pc, #664]	; (80154b8 <sc_reduce+0x48c>)
    t[ 8] -= t[19] * ORDER_1;
 801521e:	eba2 020a 	sub.w	r2, r2, sl
 8015222:	eb42 0000 	adc.w	r0, r2, r0
    t[ 8] -= t[18] * ORDER_2;
 8015226:	fba9 5205 	umull	r5, r2, r9, r5
 801522a:	195b      	adds	r3, r3, r5
 801522c:	eba2 0209 	sub.w	r2, r2, r9
 8015230:	eb42 0200 	adc.w	r2, r2, r0
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 8015234:	9809      	ldr	r0, [sp, #36]	; 0x24
    t[10] -= t[21] * ORDER_1;
 8015236:	4d9f      	ldr	r5, [pc, #636]	; (80154b4 <sc_reduce+0x488>)
    t[ 8] -= t[18] * ORDER_2;
 8015238:	9308      	str	r3, [sp, #32]
    t[10] = MASK_21 & (load_3(s + 26) >> 2);
 801523a:	f3c0 0094 	ubfx	r0, r0, #2, #21
    t[10] -= t[22] * ORDER_0;
 801523e:	fba6 3e0c 	umull	r3, lr, r6, ip
 8015242:	ebae 0e06 	sub.w	lr, lr, r6
 8015246:	18c0      	adds	r0, r0, r3
    t[10] -= t[21] * ORDER_1;
 8015248:	fba8 3505 	umull	r3, r5, r8, r5
    t[10] -= t[22] * ORDER_0;
 801524c:	f14e 0c00 	adc.w	ip, lr, #0
    t[10] -= t[21] * ORDER_1;
 8015250:	18c0      	adds	r0, r0, r3
    t[10] -= t[20] * ORDER_2;
 8015252:	4b99      	ldr	r3, [pc, #612]	; (80154b8 <sc_reduce+0x48c>)
    t[10] -= t[21] * ORDER_1;
 8015254:	eba5 0508 	sub.w	r5, r5, r8
 8015258:	eb45 0e0c 	adc.w	lr, r5, ip
    t[10] -= t[20] * ORDER_2;
 801525c:	fba7 3c03 	umull	r3, ip, r7, r3
 8015260:	ebac 0c07 	sub.w	ip, ip, r7
 8015264:	18c0      	adds	r0, r0, r3
 8015266:	eb4c 050e 	adc.w	r5, ip, lr
    t[10] -= t[19] * ORDER_3;
 801526a:	f8df e240 	ldr.w	lr, [pc, #576]	; 80154ac <sc_reduce+0x480>
 801526e:	fbaa e30e 	umull	lr, r3, sl, lr
 8015272:	eba3 030a 	sub.w	r3, r3, sl
 8015276:	eb10 000e 	adds.w	r0, r0, lr
 801527a:	eb43 0c05 	adc.w	ip, r3, r5
    t[10] -= t[18] * ORDER_4;
 801527e:	4b8c      	ldr	r3, [pc, #560]	; (80154b0 <sc_reduce+0x484>)
 8015280:	fba9 e303 	umull	lr, r3, r9, r3
 8015284:	eb10 000e 	adds.w	r0, r0, lr
 8015288:	eba3 0309 	sub.w	r3, r3, r9
 801528c:	eb43 030c 	adc.w	r3, r3, ip
 8015290:	9009      	str	r0, [sp, #36]	; 0x24
    t[ 7] -= t[19] * ORDER_0;
 8015292:	f8df c228 	ldr.w	ip, [pc, #552]	; 80154bc <sc_reduce+0x490>
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 8015296:	980a      	ldr	r0, [sp, #40]	; 0x28
    t[ 7] -= t[19] * ORDER_0;
 8015298:	fbaa 5e0c 	umull	r5, lr, sl, ip
    t[ 7] = MASK_21 & (load_3(s + 18) >> 3);
 801529c:	f3c0 00d4 	ubfx	r0, r0, #3, #21
    t[ 7] -= t[19] * ORDER_0;
 80152a0:	1940      	adds	r0, r0, r5
    t[ 7] -= t[18] * ORDER_1;
 80152a2:	4d84      	ldr	r5, [pc, #528]	; (80154b4 <sc_reduce+0x488>)
    t[ 7] -= t[19] * ORDER_0;
 80152a4:	ebae 0e0a 	sub.w	lr, lr, sl
    t[ 7] -= t[18] * ORDER_1;
 80152a8:	fba9 5c05 	umull	r5, ip, r9, r5
    t[ 7] -= t[19] * ORDER_0;
 80152ac:	f14e 0e00 	adc.w	lr, lr, #0
    t[ 7] -= t[18] * ORDER_1;
 80152b0:	1940      	adds	r0, r0, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80152b2:	9d07      	ldr	r5, [sp, #28]
 80152b4:	ea4f 5555 	mov.w	r5, r5, lsr #21
 80152b8:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
    t[ 7] -= t[18] * ORDER_1;
 80152bc:	ebac 0c09 	sub.w	ip, ip, r9
 80152c0:	eb4c 0c0e 	adc.w	ip, ip, lr
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80152c4:	1940      	adds	r0, r0, r5
 80152c6:	900a      	str	r0, [sp, #40]	; 0x28
 80152c8:	eb4c 5061 	adc.w	r0, ip, r1, asr #21
 80152cc:	900b      	str	r0, [sp, #44]	; 0x2c
    t[ 9] -= t[21] * ORDER_0;
 80152ce:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 80154bc <sc_reduce+0x490>
    t[ 9] = MASK_21 & (load_4(s + 23) >> 5);
 80152d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80152d4:	f3c0 1154 	ubfx	r1, r0, #5, #21
    t[ 9] -= t[21] * ORDER_0;
 80152d8:	fba8 e00c 	umull	lr, r0, r8, ip
 80152dc:	eba0 0008 	sub.w	r0, r0, r8
 80152e0:	eb11 010e 	adds.w	r1, r1, lr
 80152e4:	f140 0500 	adc.w	r5, r0, #0
    t[ 9] -= t[20] * ORDER_1;
 80152e8:	4872      	ldr	r0, [pc, #456]	; (80154b4 <sc_reduce+0x488>)
 80152ea:	fba7 ec00 	umull	lr, ip, r7, r0
 80152ee:	ebac 0c07 	sub.w	ip, ip, r7
 80152f2:	eb11 010e 	adds.w	r1, r1, lr
 80152f6:	eb4c 0005 	adc.w	r0, ip, r5
    t[ 9] -= t[19] * ORDER_2;
 80152fa:	4d6f      	ldr	r5, [pc, #444]	; (80154b8 <sc_reduce+0x48c>)
    t[ 9] -= t[18] * ORDER_3;
 80152fc:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80154ac <sc_reduce+0x480>
    t[ 9] -= t[19] * ORDER_2;
 8015300:	fbaa 5c05 	umull	r5, ip, sl, r5
 8015304:	1949      	adds	r1, r1, r5
 8015306:	ebac 0c0a 	sub.w	ip, ip, sl
 801530a:	eb4c 0c00 	adc.w	ip, ip, r0
    t[ 9] -= t[18] * ORDER_3;
 801530e:	fba9 050e 	umull	r0, r5, r9, lr
 8015312:	1809      	adds	r1, r1, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015314:	9808      	ldr	r0, [sp, #32]
 8015316:	ea4f 5050 	mov.w	r0, r0, lsr #21
 801531a:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
    t[ 9] -= t[18] * ORDER_3;
 801531e:	eba5 0509 	sub.w	r5, r5, r9
 8015322:	eb45 050c 	adc.w	r5, r5, ip
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015326:	1809      	adds	r1, r1, r0
 8015328:	eb45 5262 	adc.w	r2, r5, r2, asr #21
 801532c:	910c      	str	r1, [sp, #48]	; 0x30
    t[11] -= t[23] * ORDER_0;
 801532e:	9d00      	ldr	r5, [sp, #0]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015330:	920d      	str	r2, [sp, #52]	; 0x34
    t[11] -= t[23] * ORDER_0;
 8015332:	4962      	ldr	r1, [pc, #392]	; (80154bc <sc_reduce+0x490>)
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 8015334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    t[11] -= t[23] * ORDER_0;
 8015336:	f1cb 0000 	rsb	r0, fp, #0
 801533a:	fb01 0005 	mla	r0, r1, r5, r0
    t[11] = MASK_21 & (load_4(s + 28) >> 7);
 801533e:	f3c2 12d4 	ubfx	r2, r2, #7, #21
    t[11] -= t[23] * ORDER_0;
 8015342:	fbab 5101 	umull	r5, r1, fp, r1
 8015346:	1952      	adds	r2, r2, r5
    t[11] -= t[22] * ORDER_1;
 8015348:	4d5a      	ldr	r5, [pc, #360]	; (80154b4 <sc_reduce+0x488>)
    t[11] -= t[23] * ORDER_0;
 801534a:	eb40 0001 	adc.w	r0, r0, r1
    t[11] -= t[22] * ORDER_1;
 801534e:	fba6 5105 	umull	r5, r1, r6, r5
 8015352:	1952      	adds	r2, r2, r5
 8015354:	eba1 0106 	sub.w	r1, r1, r6
 8015358:	eb41 0100 	adc.w	r1, r1, r0
    t[11] -= t[21] * ORDER_2;
 801535c:	4856      	ldr	r0, [pc, #344]	; (80154b8 <sc_reduce+0x48c>)
 801535e:	fba8 0500 	umull	r0, r5, r8, r0
 8015362:	eba5 0508 	sub.w	r5, r5, r8
 8015366:	1812      	adds	r2, r2, r0
 8015368:	eb45 0101 	adc.w	r1, r5, r1
    t[11] -= t[20] * ORDER_3;
 801536c:	fba7 050e 	umull	r0, r5, r7, lr
 8015370:	1812      	adds	r2, r2, r0
 8015372:	eba5 0507 	sub.w	r5, r5, r7
 8015376:	eb45 0501 	adc.w	r5, r5, r1
    t[11] -= t[19] * ORDER_4;
 801537a:	494d      	ldr	r1, [pc, #308]	; (80154b0 <sc_reduce+0x484>)
 801537c:	fbaa 1001 	umull	r1, r0, sl, r1
 8015380:	1852      	adds	r2, r2, r1
 8015382:	eba0 000a 	sub.w	r0, r0, sl
    t[11] -= t[18] * ORDER_5;
 8015386:	f8df a120 	ldr.w	sl, [pc, #288]	; 80154a8 <sc_reduce+0x47c>
    t[11] -= t[19] * ORDER_4;
 801538a:	eb40 0005 	adc.w	r0, r0, r5
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801538e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    t[11] -= t[18] * ORDER_5;
 8015390:	fba9 ec0a 	umull	lr, ip, r9, sl
 8015394:	eb12 020e 	adds.w	r2, r2, lr
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015398:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    t[11] -= t[18] * ORDER_5;
 801539c:	ebac 0c09 	sub.w	ip, ip, r9
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80153a0:	ea4e 2ec3 	orr.w	lr, lr, r3, lsl #11
    t[11] -= t[18] * ORDER_5;
 80153a4:	eb4c 0000 	adc.w	r0, ip, r0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80153a8:	eb12 020e 	adds.w	r2, r2, lr
 80153ac:	eb40 5563 	adc.w	r5, r0, r3, asr #21
    t[13] -= t[23] * ORDER_2;
 80153b0:	f8df c104 	ldr.w	ip, [pc, #260]	; 80154b8 <sc_reduce+0x48c>
 80153b4:	9800      	ldr	r0, [sp, #0]
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 80153b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80153b8:	920e      	str	r2, [sp, #56]	; 0x38
    t[13] -= t[23] * ORDER_2;
 80153ba:	f1cb 0200 	rsb	r2, fp, #0
 80153be:	fb0c 2100 	mla	r1, ip, r0, r2
    t[13] -= t[22] * ORDER_3;
 80153c2:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 80154ac <sc_reduce+0x480>
    t[13] -= t[21] * ORDER_4;
 80153c6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80154b0 <sc_reduce+0x484>
    t[13] -= t[23] * ORDER_2;
 80153ca:	fbab 020c 	umull	r0, r2, fp, ip
    t[13] = MASK_21 & (load_3(s + 34) >> 1);
 80153ce:	f3c3 0354 	ubfx	r3, r3, #1, #21
    t[13] -= t[23] * ORDER_2;
 80153d2:	181b      	adds	r3, r3, r0
 80153d4:	eb41 0002 	adc.w	r0, r1, r2
    t[13] -= t[22] * ORDER_3;
 80153d8:	fba6 210e 	umull	r2, r1, r6, lr
 80153dc:	189b      	adds	r3, r3, r2
 80153de:	eba1 0106 	sub.w	r1, r1, r6
 80153e2:	eb41 0100 	adc.w	r1, r1, r0
    t[13] -= t[21] * ORDER_4;
 80153e6:	fba8 2009 	umull	r2, r0, r8, r9
 80153ea:	189a      	adds	r2, r3, r2
 80153ec:	eba0 0008 	sub.w	r0, r0, r8
    t[13] -= t[20] * ORDER_5;
 80153f0:	fba7 c30a 	umull	ip, r3, r7, sl
    t[13] -= t[21] * ORDER_4;
 80153f4:	eb40 0001 	adc.w	r0, r0, r1
    t[13] -= t[20] * ORDER_5;
 80153f8:	1bdf      	subs	r7, r3, r7
 80153fa:	eb12 020c 	adds.w	r2, r2, ip
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80153fe:	9b05      	ldr	r3, [sp, #20]
    t[15] -= t[23] * ORDER_4;
 8015400:	f8dd 8000 	ldr.w	r8, [sp]
    t[13] -= t[20] * ORDER_5;
 8015404:	eb47 0700 	adc.w	r7, r7, r0
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8015408:	9806      	ldr	r0, [sp, #24]
 801540a:	0d5b      	lsrs	r3, r3, #21
 801540c:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 8015410:	18d2      	adds	r2, r2, r3
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 8015412:	9b16      	ldr	r3, [sp, #88]	; 0x58
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8015414:	eb47 5760 	adc.w	r7, r7, r0, asr #21
    t[15] = MASK_21 & (load_3(s + 39) >> 3);
 8015418:	f3c3 00d4 	ubfx	r0, r3, #3, #21
    t[15] -= t[23] * ORDER_4;
 801541c:	f1cb 0300 	rsb	r3, fp, #0
 8015420:	fb09 3108 	mla	r1, r9, r8, r3
 8015424:	fbab 3c09 	umull	r3, ip, fp, r9
 8015428:	18c3      	adds	r3, r0, r3
    t[15] -= t[22] * ORDER_5;
 801542a:	fba6 e00a 	umull	lr, r0, r6, sl
    t[15] -= t[23] * ORDER_4;
 801542e:	eb41 010c 	adc.w	r1, r1, ip
    t[15] -= t[22] * ORDER_5;
 8015432:	1b86      	subs	r6, r0, r6
 8015434:	eb13 030e 	adds.w	r3, r3, lr
 8015438:	eb46 0601 	adc.w	r6, r6, r1
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 801543c:	9903      	ldr	r1, [sp, #12]
 801543e:	9804      	ldr	r0, [sp, #16]
    t[ 0] -= t[12] * ORDER_0;
 8015440:	f8df e078 	ldr.w	lr, [pc, #120]	; 80154bc <sc_reduce+0x490>
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8015444:	0d49      	lsrs	r1, r1, #21
 8015446:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 801544a:	185b      	adds	r3, r3, r1
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 801544c:	9902      	ldr	r1, [sp, #8]
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 801544e:	eb46 5660 	adc.w	r6, r6, r0, asr #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8015452:	ea4f 5c51 	mov.w	ip, r1, lsr #21
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 8015456:	9817      	ldr	r0, [sp, #92]	; 0x5c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8015458:	9901      	ldr	r1, [sp, #4]
    t[17] = MASK_21 & (load_4(s + 44) >> 5);
 801545a:	f3c0 1054 	ubfx	r0, r0, #5, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 801545e:	ea4c 2cc1 	orr.w	ip, ip, r1, lsl #11
 8015462:	eb10 000c 	adds.w	r0, r0, ip
 8015466:	ea4f 5161 	mov.w	r1, r1, asr #21
 801546a:	9000      	str	r0, [sp, #0]
 801546c:	f141 0000 	adc.w	r0, r1, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015470:	990e      	ldr	r1, [sp, #56]	; 0x38
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8015472:	9004      	str	r0, [sp, #16]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8015474:	9805      	ldr	r0, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015476:	0d49      	lsrs	r1, r1, #21
 8015478:	ea41 21c5 	orr.w	r1, r1, r5, lsl #11
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 801547c:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015480:	1840      	adds	r0, r0, r1
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8015482:	9903      	ldr	r1, [sp, #12]
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8015484:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 8015488:	ea4c 2cc7 	orr.w	ip, ip, r7, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801548c:	ea4f 5565 	mov.w	r5, r5, asr #21
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8015490:	f3c1 0114 	ubfx	r1, r1, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015494:	f145 0500 	adc.w	r5, r5, #0
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8015498:	157f      	asrs	r7, r7, #21
 801549a:	eb11 010c 	adds.w	r1, r1, ip
 801549e:	f147 0700 	adc.w	r7, r7, #0
 80154a2:	9705      	str	r7, [sp, #20]
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80154a4:	9f02      	ldr	r7, [sp, #8]
 80154a6:	e00b      	b.n	80154c0 <sc_reduce+0x494>
 80154a8:	fff59084 	.word	0xfff59084
 80154ac:	fff0c654 	.word	0xfff0c654
 80154b0:	ffe215d1 	.word	0xffe215d1
 80154b4:	ffe72d19 	.word	0xffe72d19
 80154b8:	ffe9fb68 	.word	0xffe9fb68
 80154bc:	ffea2c13 	.word	0xffea2c13
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80154c0:	9101      	str	r1, [sp, #4]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80154c2:	0d59      	lsrs	r1, r3, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80154c4:	f3c7 0714 	ubfx	r7, r7, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80154c8:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 80154cc:	1879      	adds	r1, r7, r1
 80154ce:	ea4f 5666 	mov.w	r6, r6, asr #21
 80154d2:	f146 0700 	adc.w	r7, r6, #0
 80154d6:	9706      	str	r7, [sp, #24]
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 80154d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80154da:	9102      	str	r1, [sp, #8]
    t[ 0] -= t[12] * ORDER_0;
 80154dc:	fba0 c60e 	umull	ip, r6, r0, lr
    t[ 0] = MASK_21 & (load_3(s +  0) >> 0);
 80154e0:	f3c7 0114 	ubfx	r1, r7, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 80154e4:	eb11 010c 	adds.w	r1, r1, ip
 80154e8:	f1c0 0700 	rsb	r7, r0, #0
 80154ec:	fb0e 7b05 	mla	fp, lr, r5, r7
 80154f0:	910f      	str	r1, [sp, #60]	; 0x3c
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 80154f2:	9910      	ldr	r1, [sp, #64]	; 0x40
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80154f4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80154f8:	f3c2 0214 	ubfx	r2, r2, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 80154fc:	eb4b 0b06 	adc.w	fp, fp, r6
    t[ 1] -= t[12] * ORDER_1;
 8015500:	4eeb      	ldr	r6, [pc, #940]	; (80158b0 <sc_reduce+0x884>)
    t[ 1] -= t[13] * ORDER_0;
 8015502:	fba2 ca0e 	umull	ip, sl, r2, lr
    t[ 1] = MASK_21 & (load_4(s +  2) >> 5);
 8015506:	f3c1 1154 	ubfx	r1, r1, #5, #21
    t[ 1] -= t[12] * ORDER_1;
 801550a:	fb06 7905 	mla	r9, r6, r5, r7
    t[ 1] -= t[13] * ORDER_0;
 801550e:	eb11 010c 	adds.w	r1, r1, ip
 8015512:	ebaa 0a02 	sub.w	sl, sl, r2
    t[ 1] -= t[12] * ORDER_1;
 8015516:	fba0 c606 	umull	ip, r6, r0, r6
    t[ 1] -= t[13] * ORDER_0;
 801551a:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 1] -= t[12] * ORDER_1;
 801551e:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8015522:	ea4f 5c58 	mov.w	ip, r8, lsr #21
 8015526:	ea4c 2ccb 	orr.w	ip, ip, fp, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 801552a:	444e      	add	r6, r9
 801552c:	eb46 060a 	adc.w	r6, r6, sl
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8015530:	eb11 010c 	adds.w	r1, r1, ip
 8015534:	9110      	str	r1, [sp, #64]	; 0x40
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 8015536:	9911      	ldr	r1, [sp, #68]	; 0x44
    t[ 2] -= t[14] * ORDER_0;
 8015538:	f8dd 9014 	ldr.w	r9, [sp, #20]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 801553c:	eb46 566b 	adc.w	r6, r6, fp, asr #21
    t[ 2] = MASK_21 & (load_3(s +  5) >> 2);
 8015540:	f3c1 0b94 	ubfx	fp, r1, #2, #21
    t[ 2] -= t[14] * ORDER_0;
 8015544:	9901      	ldr	r1, [sp, #4]
 8015546:	4249      	negs	r1, r1
 8015548:	4688      	mov	r8, r1
 801554a:	9103      	str	r1, [sp, #12]
 801554c:	fb0e 8809 	mla	r8, lr, r9, r8
 8015550:	4671      	mov	r1, lr
 8015552:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015556:	fbae ec01 	umull	lr, ip, lr, r1
 801555a:	468a      	mov	sl, r1
 801555c:	eb1b 010e 	adds.w	r1, fp, lr
    t[ 2] -= t[13] * ORDER_1;
 8015560:	f8df b34c 	ldr.w	fp, [pc, #844]	; 80158b0 <sc_reduce+0x884>
    t[ 2] -= t[14] * ORDER_0;
 8015564:	eb48 0c0c 	adc.w	ip, r8, ip
    t[ 2] -= t[13] * ORDER_1;
 8015568:	fba2 980b 	umull	r9, r8, r2, fp
 801556c:	eb11 0109 	adds.w	r1, r1, r9
 8015570:	eba8 0802 	sub.w	r8, r8, r2
 8015574:	eb48 080c 	adc.w	r8, r8, ip
    t[ 2] -= t[12] * ORDER_2;
 8015578:	f8df c338 	ldr.w	ip, [pc, #824]	; 80158b4 <sc_reduce+0x888>
 801557c:	fb0c 7905 	mla	r9, ip, r5, r7
 8015580:	fba0 ce0c 	umull	ip, lr, r0, ip
 8015584:	eb11 010c 	adds.w	r1, r1, ip
 8015588:	44ce      	add	lr, r9
 801558a:	eb4e 0e08 	adc.w	lr, lr, r8
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 801558e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015592:	ea4f 5c58 	mov.w	ip, r8, lsr #21
 8015596:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
 801559a:	eb11 010c 	adds.w	r1, r1, ip
 801559e:	eb4e 5666 	adc.w	r6, lr, r6, asr #21
 80155a2:	9111      	str	r1, [sp, #68]	; 0x44
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 80155a4:	9912      	ldr	r1, [sp, #72]	; 0x48
    t[ 3] -= t[14] * ORDER_1;
 80155a6:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80155aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80155ae:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 3] = MASK_21 & (load_4(s +  7) >> 7);
 80155b2:	f3c1 1cd4 	ubfx	ip, r1, #7, #21
    t[ 3] -= t[15] * ORDER_0;
 80155b6:	fba3 180a 	umull	r1, r8, r3, sl
    t[ 3] -= t[14] * ORDER_1;
 80155ba:	fb0b ea09 	mla	sl, fp, r9, lr
 80155be:	f8dd e004 	ldr.w	lr, [sp, #4]
    t[ 3] -= t[15] * ORDER_0;
 80155c2:	eb1c 0c01 	adds.w	ip, ip, r1
 80155c6:	eba8 0803 	sub.w	r8, r8, r3
    t[ 3] -= t[14] * ORDER_1;
 80155ca:	fbae 1e0b 	umull	r1, lr, lr, fp
    t[ 3] -= t[15] * ORDER_0;
 80155ce:	f148 0800 	adc.w	r8, r8, #0
    t[ 3] -= t[14] * ORDER_1;
 80155d2:	eb1c 0101 	adds.w	r1, ip, r1
    t[ 3] -= t[13] * ORDER_2;
 80155d6:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80158b4 <sc_reduce+0x888>
    t[ 3] -= t[12] * ORDER_3;
 80155da:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 80158b8 <sc_reduce+0x88c>
    t[ 3] -= t[13] * ORDER_2;
 80155de:	fba2 c90c 	umull	ip, r9, r2, ip
    t[ 3] -= t[14] * ORDER_1;
 80155e2:	44f2      	add	sl, lr
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 80155e4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
    t[ 3] -= t[14] * ORDER_1;
 80155e8:	eb4a 0a08 	adc.w	sl, sl, r8
    t[ 3] -= t[13] * ORDER_2;
 80155ec:	eba9 0902 	sub.w	r9, r9, r2
 80155f0:	eb11 010c 	adds.w	r1, r1, ip
    t[ 3] -= t[12] * ORDER_3;
 80155f4:	fba0 c80b 	umull	ip, r8, r0, fp
    t[ 3] -= t[13] * ORDER_2;
 80155f8:	eb49 0a0a 	adc.w	sl, r9, sl
    t[ 3] -= t[12] * ORDER_3;
 80155fc:	fb0b 7905 	mla	r9, fp, r5, r7
 8015600:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8015604:	ea4f 5c5e 	mov.w	ip, lr, lsr #21
 8015608:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 801560c:	44c8      	add	r8, r9
 801560e:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8015612:	eb11 0e0c 	adds.w	lr, r1, ip
 8015616:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 801561a:	eb48 5e66 	adc.w	lr, r8, r6, asr #21
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 801561e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    t[ 4] -= t[16] * ORDER_0;
 8015620:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015624:	f8dd c008 	ldr.w	ip, [sp, #8]
 8015628:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80158bc <sc_reduce+0x890>
    t[ 4] -= t[14] * ORDER_2;
 801562c:	f8dd a014 	ldr.w	sl, [sp, #20]
    t[ 4] = MASK_21 & (load_4(s + 10) >> 4);
 8015630:	f3c6 1114 	ubfx	r1, r6, #4, #21
    t[ 4] -= t[16] * ORDER_0;
 8015634:	9e02      	ldr	r6, [sp, #8]
 8015636:	4276      	negs	r6, r6
 8015638:	fb08 6909 	mla	r9, r8, r9, r6
 801563c:	fbac 8c08 	umull	r8, ip, ip, r8
 8015640:	eb11 0108 	adds.w	r1, r1, r8
 8015644:	eb49 0c0c 	adc.w	ip, r9, ip
    t[ 4] -= t[15] * ORDER_1;
 8015648:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80158b0 <sc_reduce+0x884>
 801564c:	fba3 8909 	umull	r8, r9, r3, r9
 8015650:	eb11 0108 	adds.w	r1, r1, r8
 8015654:	eba9 0903 	sub.w	r9, r9, r3
    t[ 4] -= t[14] * ORDER_2;
 8015658:	f8dd 800c 	ldr.w	r8, [sp, #12]
    t[ 4] -= t[15] * ORDER_1;
 801565c:	eb49 090c 	adc.w	r9, r9, ip
    t[ 4] -= t[14] * ORDER_2;
 8015660:	f8df c250 	ldr.w	ip, [pc, #592]	; 80158b4 <sc_reduce+0x888>
 8015664:	fb0c 8a0a 	mla	sl, ip, sl, r8
 8015668:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801566c:	fba8 c80c 	umull	ip, r8, r8, ip
 8015670:	eb11 010c 	adds.w	r1, r1, ip
 8015674:	44c2      	add	sl, r8
    t[ 4] -= t[13] * ORDER_3;
 8015676:	fba2 cb0b 	umull	ip, fp, r2, fp
    t[ 4] -= t[14] * ORDER_2;
 801567a:	eb4a 0a09 	adc.w	sl, sl, r9
    t[ 4] -= t[13] * ORDER_3;
 801567e:	ebab 0b02 	sub.w	fp, fp, r2
 8015682:	eb11 010c 	adds.w	r1, r1, ip
    t[ 4] -= t[12] * ORDER_4;
 8015686:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80158c0 <sc_reduce+0x894>
    t[ 4] -= t[13] * ORDER_3;
 801568a:	eb4b 0a0a 	adc.w	sl, fp, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 801568e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    t[ 4] -= t[12] * ORDER_4;
 8015692:	fb08 7905 	mla	r9, r8, r5, r7
 8015696:	fba0 c808 	umull	ip, r8, r0, r8
 801569a:	eb11 010c 	adds.w	r1, r1, ip
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 801569e:	ea4f 5c5b 	mov.w	ip, fp, lsr #21
 80156a2:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 80156a6:	44c8      	add	r8, r9
 80156a8:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 80156ac:	eb11 010c 	adds.w	r1, r1, ip
 80156b0:	9113      	str	r1, [sp, #76]	; 0x4c
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 80156b2:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[ 5] -= t[17] * ORDER_0;
 80156b4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80156b8:	f8dd 9000 	ldr.w	r9, [sp]
    t[ 5] = MASK_21 & (load_3(s + 13) >> 1);
 80156bc:	f3c1 0c54 	ubfx	ip, r1, #1, #21
    t[ 5] -= t[17] * ORDER_0;
 80156c0:	9900      	ldr	r1, [sp, #0]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 80156c2:	eb48 586e 	adc.w	r8, r8, lr, asr #21
    t[ 5] -= t[17] * ORDER_0;
 80156c6:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 80158bc <sc_reduce+0x890>
 80156ca:	4249      	negs	r1, r1
 80156cc:	fb0e 1b0b 	mla	fp, lr, fp, r1
 80156d0:	fba9 e90e 	umull	lr, r9, r9, lr
 80156d4:	eb1c 0c0e 	adds.w	ip, ip, lr
 80156d8:	eb4b 0b09 	adc.w	fp, fp, r9
    t[ 5] -= t[16] * ORDER_1;
 80156dc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80156e0:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80158b0 <sc_reduce+0x884>
 80156e4:	fb09 6a0e 	mla	sl, r9, lr, r6
 80156e8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80156ec:	fbae e909 	umull	lr, r9, lr, r9
 80156f0:	eb1c 0e0e 	adds.w	lr, ip, lr
    t[ 5] -= t[15] * ORDER_2;
 80156f4:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80158b4 <sc_reduce+0x888>
    t[ 5] -= t[16] * ORDER_1;
 80156f8:	44ca      	add	sl, r9
    t[ 5] -= t[15] * ORDER_2;
 80156fa:	fba3 9c0c 	umull	r9, ip, r3, ip
    t[ 5] -= t[16] * ORDER_1;
 80156fe:	eb4a 0a0b 	adc.w	sl, sl, fp
    t[ 5] -= t[15] * ORDER_2;
 8015702:	ebac 0c03 	sub.w	ip, ip, r3
 8015706:	eb1e 0e09 	adds.w	lr, lr, r9
 801570a:	eb4c 0a0a 	adc.w	sl, ip, sl
    t[ 5] -= t[14] * ORDER_3;
 801570e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015712:	f8dd b014 	ldr.w	fp, [sp, #20]
 8015716:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80158b8 <sc_reduce+0x88c>
 801571a:	fb0c 9b0b 	mla	fp, ip, fp, r9
 801571e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015722:	fba9 c90c 	umull	ip, r9, r9, ip
 8015726:	eb1e 0c0c 	adds.w	ip, lr, ip
    t[ 5] -= t[13] * ORDER_4;
 801572a:	f8df e194 	ldr.w	lr, [pc, #404]	; 80158c0 <sc_reduce+0x894>
    t[ 5] -= t[14] * ORDER_3;
 801572e:	44d9      	add	r9, fp
 8015730:	eb49 090a 	adc.w	r9, r9, sl
    t[ 5] -= t[13] * ORDER_4;
 8015734:	fba2 ea0e 	umull	lr, sl, r2, lr
 8015738:	ebaa 0a02 	sub.w	sl, sl, r2
 801573c:	eb1c 0c0e 	adds.w	ip, ip, lr
 8015740:	eb4a 0909 	adc.w	r9, sl, r9
    t[ 5] -= t[12] * ORDER_5;
 8015744:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80158c4 <sc_reduce+0x898>
    t[ 6] -= t[15] * ORDER_3;
 8015748:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80158b8 <sc_reduce+0x88c>
    t[ 5] -= t[12] * ORDER_5;
 801574c:	fb0a 7505 	mla	r5, sl, r5, r7
 8015750:	fba0 070a 	umull	r0, r7, r0, sl
 8015754:	eb1c 0c00 	adds.w	ip, ip, r0
 8015758:	443d      	add	r5, r7
 801575a:	eb45 0909 	adc.w	r9, r5, r9
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801575e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    t[ 6] -= t[17] * ORDER_1;
 8015760:	9f00      	ldr	r7, [sp, #0]
 8015762:	4853      	ldr	r0, [pc, #332]	; (80158b0 <sc_reduce+0x884>)
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015764:	ea4f 5e55 	mov.w	lr, r5, lsr #21
 8015768:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
 801576c:	eb1c 050e 	adds.w	r5, ip, lr
 8015770:	9514      	str	r5, [sp, #80]	; 0x50
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015772:	9d07      	ldr	r5, [sp, #28]
 8015774:	f3c5 0e14 	ubfx	lr, r5, #0, #21
    t[ 6] -= t[17] * ORDER_1;
 8015778:	9d04      	ldr	r5, [sp, #16]
 801577a:	fb00 1505 	mla	r5, r0, r5, r1
 801577e:	fba7 c000 	umull	ip, r0, r7, r0
    t[ 6] -= t[16] * ORDER_2;
 8015782:	4f4c      	ldr	r7, [pc, #304]	; (80158b4 <sc_reduce+0x888>)
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015784:	eb49 5868 	adc.w	r8, r9, r8, asr #21
    t[ 6] -= t[16] * ORDER_2;
 8015788:	f8dd 9018 	ldr.w	r9, [sp, #24]
    t[ 6] -= t[17] * ORDER_1;
 801578c:	eb1e 0e0c 	adds.w	lr, lr, ip
    t[ 6] -= t[16] * ORDER_2;
 8015790:	f8dd c008 	ldr.w	ip, [sp, #8]
    t[ 6] -= t[17] * ORDER_1;
 8015794:	eb45 0500 	adc.w	r5, r5, r0
    t[ 6] -= t[16] * ORDER_2;
 8015798:	4638      	mov	r0, r7
 801579a:	fbac c000 	umull	ip, r0, ip, r0
 801579e:	fb07 6709 	mla	r7, r7, r9, r6
 80157a2:	eb1e 0c0c 	adds.w	ip, lr, ip
 80157a6:	4407      	add	r7, r0
    t[ 6] -= t[15] * ORDER_3;
 80157a8:	fba3 090b 	umull	r0, r9, r3, fp
    t[ 6] -= t[16] * ORDER_2;
 80157ac:	eb47 0705 	adc.w	r7, r7, r5
    t[ 6] -= t[15] * ORDER_3;
 80157b0:	eba9 0903 	sub.w	r9, r9, r3
 80157b4:	eb1c 0c00 	adds.w	ip, ip, r0
 80157b8:	eb49 0707 	adc.w	r7, r9, r7
    t[ 6] -= t[14] * ORDER_4;
 80157bc:	9d03      	ldr	r5, [sp, #12]
 80157be:	f8dd e014 	ldr.w	lr, [sp, #20]
 80157c2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80158c0 <sc_reduce+0x894>
 80157c6:	fb09 5e0e 	mla	lr, r9, lr, r5
 80157ca:	9d01      	ldr	r5, [sp, #4]
 80157cc:	fba5 0509 	umull	r0, r5, r5, r9
 80157d0:	eb1c 0000 	adds.w	r0, ip, r0
 80157d4:	4475      	add	r5, lr
    t[ 6] -= t[13] * ORDER_5;
 80157d6:	fba2 c90a 	umull	ip, r9, r2, sl
    t[ 6] -= t[14] * ORDER_4;
 80157da:	eb45 0507 	adc.w	r5, r5, r7
    t[ 6] -= t[13] * ORDER_5;
 80157de:	eba9 0202 	sub.w	r2, r9, r2
 80157e2:	eb10 0c0c 	adds.w	ip, r0, ip
 80157e6:	eb42 0505 	adc.w	r5, r2, r5
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80157ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
    t[ 7] -= t[17] * ORDER_2;
 80157ec:	9f04      	ldr	r7, [sp, #16]
    t[ 7] -= t[15] * ORDER_4;
 80157ee:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80158c0 <sc_reduce+0x894>
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80157f2:	0d50      	lsrs	r0, r2, #21
 80157f4:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
 80157f8:	eb1c 0200 	adds.w	r2, ip, r0
 80157fc:	9207      	str	r2, [sp, #28]
    t[ 7] -= t[17] * ORDER_2;
 80157fe:	f8dd c000 	ldr.w	ip, [sp]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015804:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    t[ 7] -= t[17] * ORDER_2;
 8015808:	4d2a      	ldr	r5, [pc, #168]	; (80158b4 <sc_reduce+0x888>)
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801580a:	f3c2 0214 	ubfx	r2, r2, #0, #21
    t[ 7] -= t[17] * ORDER_2;
 801580e:	fb05 1707 	mla	r7, r5, r7, r1
 8015812:	fbac 5005 	umull	r5, r0, ip, r5
 8015816:	1952      	adds	r2, r2, r5
    t[ 7] -= t[16] * ORDER_3;
 8015818:	f8dd c018 	ldr.w	ip, [sp, #24]
 801581c:	9d02      	ldr	r5, [sp, #8]
    t[ 7] -= t[17] * ORDER_2;
 801581e:	eb47 0700 	adc.w	r7, r7, r0
    t[ 7] -= t[16] * ORDER_3;
 8015822:	fb0b 6c0c 	mla	ip, fp, ip, r6
 8015826:	fba5 050b 	umull	r0, r5, r5, fp
 801582a:	1812      	adds	r2, r2, r0
 801582c:	4465      	add	r5, ip
 801582e:	eb45 0507 	adc.w	r5, r5, r7
    t[ 7] -= t[14] * ORDER_5;
 8015832:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015836:	9f03      	ldr	r7, [sp, #12]
    t[ 7] -= t[15] * ORDER_4;
 8015838:	fba3 e909 	umull	lr, r9, r3, r9
    t[ 7] -= t[14] * ORDER_5;
 801583c:	fb0a 770c 	mla	r7, sl, ip, r7
 8015840:	f8dd c004 	ldr.w	ip, [sp, #4]
    t[ 7] -= t[15] * ORDER_4;
 8015844:	eba9 0903 	sub.w	r9, r9, r3
 8015848:	eb12 020e 	adds.w	r2, r2, lr
 801584c:	eb49 0505 	adc.w	r5, r9, r5
    t[ 7] -= t[14] * ORDER_5;
 8015850:	fbac 090a 	umull	r0, r9, ip, sl
 8015854:	1812      	adds	r2, r2, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015856:	9807      	ldr	r0, [sp, #28]
 8015858:	ea4f 5050 	mov.w	r0, r0, lsr #21
    t[ 7] -= t[14] * ORDER_5;
 801585c:	444f      	add	r7, r9
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801585e:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
    t[ 7] -= t[14] * ORDER_5;
 8015862:	eb47 0505 	adc.w	r5, r7, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015866:	1812      	adds	r2, r2, r0
 8015868:	9201      	str	r2, [sp, #4]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801586a:	9a08      	ldr	r2, [sp, #32]
    t[ 8] -= t[17] * ORDER_3;
 801586c:	9f00      	ldr	r7, [sp, #0]
    t[ 8] -= t[16] * ORDER_4;
 801586e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80158c0 <sc_reduce+0x894>
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015872:	f3c2 0014 	ubfx	r0, r2, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015878:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801587c:	0d55      	lsrs	r5, r2, #21
 801587e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015880:	ea45 25c2 	orr.w	r5, r5, r2, lsl #11
 8015884:	ea4f 5c62 	mov.w	ip, r2, asr #21
    t[ 8] -= t[17] * ORDER_3;
 8015888:	9a04      	ldr	r2, [sp, #16]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 801588a:	1940      	adds	r0, r0, r5
 801588c:	f14c 0e00 	adc.w	lr, ip, #0
    t[ 8] -= t[17] * ORDER_3;
 8015890:	fb0b 1202 	mla	r2, fp, r2, r1
 8015894:	fba7 5c0b 	umull	r5, ip, r7, fp
 8015898:	4494      	add	ip, r2
    t[ 8] -= t[16] * ORDER_4;
 801589a:	9f06      	ldr	r7, [sp, #24]
 801589c:	9a02      	ldr	r2, [sp, #8]
 801589e:	fb09 6707 	mla	r7, r9, r7, r6
    t[ 8] -= t[17] * ORDER_3;
 80158a2:	1940      	adds	r0, r0, r5
    t[ 8] -= t[16] * ORDER_4;
 80158a4:	fba2 2509 	umull	r2, r5, r2, r9
    t[ 8] -= t[17] * ORDER_3;
 80158a8:	eb4c 0c0e 	adc.w	ip, ip, lr
    t[ 8] -= t[16] * ORDER_4;
 80158ac:	443d      	add	r5, r7
 80158ae:	e00b      	b.n	80158c8 <sc_reduce+0x89c>
 80158b0:	ffe72d19 	.word	0xffe72d19
 80158b4:	ffe9fb68 	.word	0xffe9fb68
 80158b8:	fff0c654 	.word	0xfff0c654
 80158bc:	ffea2c13 	.word	0xffea2c13
 80158c0:	ffe215d1 	.word	0xffe215d1
 80158c4:	fff59084 	.word	0xfff59084
 80158c8:	1880      	adds	r0, r0, r2
    t[ 8] -= t[15] * ORDER_5;
 80158ca:	fba3 2e0a 	umull	r2, lr, r3, sl
    t[ 8] -= t[16] * ORDER_4;
 80158ce:	eb45 050c 	adc.w	r5, r5, ip
    t[ 8] -= t[15] * ORDER_5;
 80158d2:	ebae 0303 	sub.w	r3, lr, r3
 80158d6:	1880      	adds	r0, r0, r2
 80158d8:	eb43 0505 	adc.w	r5, r3, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80158dc:	9b01      	ldr	r3, [sp, #4]
    t[ 9] -= t[17] * ORDER_4;
 80158de:	9f04      	ldr	r7, [sp, #16]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80158e0:	0d5a      	lsrs	r2, r3, #21
 80158e2:	ea42 22c8 	orr.w	r2, r2, r8, lsl #11
 80158e6:	1883      	adds	r3, r0, r2
 80158e8:	eb45 5868 	adc.w	r8, r5, r8, asr #21
    t[ 9] -= t[17] * ORDER_4;
 80158ec:	fb09 1507 	mla	r5, r9, r7, r1
 80158f0:	9f00      	ldr	r7, [sp, #0]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 80158f2:	9303      	str	r3, [sp, #12]
    t[ 9] -= t[17] * ORDER_4;
 80158f4:	fba7 0209 	umull	r0, r2, r7, r9
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 80158f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    t[ 9] -= t[16] * ORDER_5;
 80158fa:	9f06      	ldr	r7, [sp, #24]
    t[ 8] -= t[15] * ORDER_5;
 80158fc:	46d4      	mov	ip, sl
    t[ 9] -= t[16] * ORDER_5;
 80158fe:	fb0c 6607 	mla	r6, ip, r7, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015902:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[ 9] -= t[16] * ORDER_5;
 8015906:	9f02      	ldr	r7, [sp, #8]
    t[ 9] -= t[17] * ORDER_4;
 8015908:	181b      	adds	r3, r3, r0
 801590a:	eb45 0202 	adc.w	r2, r5, r2
    t[ 9] -= t[16] * ORDER_5;
 801590e:	fba7 750c 	umull	r7, r5, r7, ip
 8015912:	19db      	adds	r3, r3, r7
 8015914:	442e      	add	r6, r5
 8015916:	eb46 0602 	adc.w	r6, r6, r2
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801591a:	9a03      	ldr	r2, [sp, #12]
 801591c:	0d50      	lsrs	r0, r2, #21
 801591e:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
 8015922:	181b      	adds	r3, r3, r0
 8015924:	9302      	str	r3, [sp, #8]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015926:	9b09      	ldr	r3, [sp, #36]	; 0x24
    t[ 9] -= t[17] * ORDER_4;
 8015928:	46ca      	mov	sl, r9
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801592a:	f3c3 0914 	ubfx	r9, r3, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801592e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015930:	ea4f 5053 	mov.w	r0, r3, lsr #21
 8015934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015936:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 801593a:	ea4f 5563 	mov.w	r5, r3, asr #21
    t[10] -= t[17] * ORDER_5;
 801593e:	9b04      	ldr	r3, [sp, #16]
 8015940:	fb0c 1103 	mla	r1, ip, r3, r1
 8015944:	9b00      	ldr	r3, [sp, #0]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015946:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801594a:	eb19 0900 	adds.w	r9, r9, r0
    t[10] -= t[17] * ORDER_5;
 801594e:	fba3 0c0c 	umull	r0, ip, r3, ip
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015952:	9b02      	ldr	r3, [sp, #8]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015954:	f145 0500 	adc.w	r5, r5, #0
    t[10] -= t[17] * ORDER_5;
 8015958:	eb19 0900 	adds.w	r9, r9, r0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801595c:	ea4f 5053 	mov.w	r0, r3, lsr #21
 8015960:	ea40 20c8 	orr.w	r0, r0, r8, lsl #11
    t[10] -= t[17] * ORDER_5;
 8015964:	4461      	add	r1, ip
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    t[10] -= t[17] * ORDER_5;
 8015968:	eb41 0105 	adc.w	r1, r1, r5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801596c:	eb19 0900 	adds.w	r9, r9, r0
 8015970:	eb41 5868 	adc.w	r8, r1, r8, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015974:	ea4f 5759 	mov.w	r7, r9, lsr #21
 8015978:	ea47 27c8 	orr.w	r7, r7, r8, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801597c:	f3c3 0b14 	ubfx	fp, r3, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015980:	eb1b 0b07 	adds.w	fp, fp, r7
 8015984:	ea4f 5668 	mov.w	r6, r8, asr #21
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8015988:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    t[ 0] -= t[12] * ORDER_0;
 801598a:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8015c10 <sc_reduce+0xbe4>
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801598e:	f146 0600 	adc.w	r6, r6, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015992:	ea4f 535b 	mov.w	r3, fp, lsr #21
 8015996:	ea43 23c6 	orr.w	r3, r3, r6, lsl #11
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 801599a:	f3c7 0014 	ubfx	r0, r7, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 801599e:	1576      	asrs	r6, r6, #21
    t[ 0] -= t[12] * ORDER_0;
 80159a0:	425f      	negs	r7, r3
 80159a2:	fb08 7206 	mla	r2, r8, r6, r7
 80159a6:	fba3 1808 	umull	r1, r8, r3, r8
 80159aa:	1840      	adds	r0, r0, r1
 80159ac:	eb42 0808 	adc.w	r8, r2, r8
    t[ 1] -= t[12] * ORDER_1;
 80159b0:	4998      	ldr	r1, [pc, #608]	; (8015c14 <sc_reduce+0xbe8>)
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 80159b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80159b4:	f3c2 0c14 	ubfx	ip, r2, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 80159b8:	fb01 7206 	mla	r2, r1, r6, r7
 80159bc:	fba3 1e01 	umull	r1, lr, r3, r1
 80159c0:	eb1c 0101 	adds.w	r1, ip, r1
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80159c4:	ea4f 5c50 	mov.w	ip, r0, lsr #21
 80159c8:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 80159cc:	eb42 020e 	adc.w	r2, r2, lr
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80159d0:	eb11 010c 	adds.w	r1, r1, ip
 80159d4:	eb42 5268 	adc.w	r2, r2, r8, asr #21
 80159d8:	f3c0 0814 	ubfx	r8, r0, #0, #21
 80159dc:	f8cd 8000 	str.w	r8, [sp]
    t[ 2] -= t[12] * ORDER_2;
 80159e0:	488d      	ldr	r0, [pc, #564]	; (8015c18 <sc_reduce+0xbec>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 80159e2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    t[ 2] -= t[12] * ORDER_2;
 80159e6:	fb00 7506 	mla	r5, r0, r6, r7
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 80159ea:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 2] -= t[12] * ORDER_2;
 80159ee:	fba3 0e00 	umull	r0, lr, r3, r0
 80159f2:	eb1c 0000 	adds.w	r0, ip, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 80159f6:	ea4f 5c51 	mov.w	ip, r1, lsr #21
 80159fa:	ea4c 2cc2 	orr.w	ip, ip, r2, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 80159fe:	eb45 0e0e 	adc.w	lr, r5, lr
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8015a02:	eb10 000c 	adds.w	r0, r0, ip
 8015a06:	eb4e 5e62 	adc.w	lr, lr, r2, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8015a0a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    t[ 3] -= t[12] * ORDER_3;
 8015a0e:	4a83      	ldr	r2, [pc, #524]	; (8015c1c <sc_reduce+0xbf0>)
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8015a10:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 3] -= t[12] * ORDER_3;
 8015a14:	fb02 7506 	mla	r5, r2, r6, r7
 8015a18:	fba3 2802 	umull	r2, r8, r3, r2
 8015a1c:	eb1c 0202 	adds.w	r2, ip, r2
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8015a20:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    t[ 3] -= t[12] * ORDER_3;
 8015a24:	eb45 0508 	adc.w	r5, r5, r8
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8015a28:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015a2c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8015a30:	eb12 020c 	adds.w	r2, r2, ip
 8015a34:	eb45 556e 	adc.w	r5, r5, lr, asr #21
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015a38:	f3c8 0c14 	ubfx	ip, r8, #0, #21
    t[ 4] -= t[12] * ORDER_4;
 8015a3c:	fb0a 7806 	mla	r8, sl, r6, r7
 8015a40:	fba3 ea0a 	umull	lr, sl, r3, sl
 8015a44:	eb1c 0c0e 	adds.w	ip, ip, lr
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8015a48:	ea4f 5e52 	mov.w	lr, r2, lsr #21
 8015a4c:	ea4e 2ec5 	orr.w	lr, lr, r5, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 8015a50:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8015a54:	eb1c 0e0e 	adds.w	lr, ip, lr
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015a58:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8015a5c:	eb48 5865 	adc.w	r8, r8, r5, asr #21
    t[ 5] -= t[12] * ORDER_5;
 8015a60:	4d6f      	ldr	r5, [pc, #444]	; (8015c20 <sc_reduce+0xbf4>)
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015a62:	f3ca 0c14 	ubfx	ip, sl, #0, #21
    t[ 5] -= t[12] * ORDER_5;
 8015a66:	fb05 7606 	mla	r6, r5, r6, r7
 8015a6a:	fba3 3705 	umull	r3, r7, r3, r5
 8015a6e:	eb1c 0503 	adds.w	r5, ip, r3
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015a72:	ea4f 5c5e 	mov.w	ip, lr, lsr #21
 8015a76:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015a7a:	9b07      	ldr	r3, [sp, #28]
    t[ 5] -= t[12] * ORDER_5;
 8015a7c:	eb46 0607 	adc.w	r6, r6, r7
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015a80:	eb15 050c 	adds.w	r5, r5, ip
 8015a84:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015a88:	ea4f 5c55 	mov.w	ip, r5, lsr #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015a8c:	9f01      	ldr	r7, [sp, #4]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015a8e:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015a92:	f3c3 0614 	ubfx	r6, r3, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015a96:	eb16 060c 	adds.w	r6, r6, ip
 8015a9a:	ea4f 5368 	mov.w	r3, r8, asr #21
 8015a9e:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015aa2:	f3c7 0c14 	ubfx	ip, r7, #0, #21
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015aa6:	0d77      	lsrs	r7, r6, #21
 8015aa8:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 8015aac:	eb1c 0c07 	adds.w	ip, ip, r7
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015ab0:	9f03      	ldr	r7, [sp, #12]
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015ab2:	ea4f 5363 	mov.w	r3, r3, asr #21
 8015ab6:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015aba:	f3c7 0a14 	ubfx	sl, r7, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015abe:	ea4f 575c 	mov.w	r7, ip, lsr #21
 8015ac2:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 8015ac6:	eb1a 0a07 	adds.w	sl, sl, r7
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015aca:	9f02      	ldr	r7, [sp, #8]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015acc:	ea4f 5363 	mov.w	r3, r3, asr #21
 8015ad0:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015ad4:	f3c7 0814 	ubfx	r8, r7, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015ad8:	ea4f 575a 	mov.w	r7, sl, lsr #21
 8015adc:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
 8015ae0:	eb18 0807 	adds.w	r8, r8, r7
 8015ae4:	ea4f 5363 	mov.w	r3, r3, asr #21
 8015ae8:	f143 0300 	adc.w	r3, r3, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015aec:	ea4f 5758 	mov.w	r7, r8, lsr #21
 8015af0:	ea47 27c3 	orr.w	r7, r7, r3, lsl #11
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015af4:	f3c9 0914 	ubfx	r9, r9, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015af8:	eb19 0907 	adds.w	r9, r9, r7
 8015afc:	ea4f 5363 	mov.w	r3, r3, asr #21
 8015b00:	f143 0300 	adc.w	r3, r3, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8015b04:	f3cb 0714 	ubfx	r7, fp, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015b08:	ea4f 5b59 	mov.w	fp, r9, lsr #21
 8015b0c:	ea4b 2bc3 	orr.w	fp, fp, r3, lsl #11
    s[ 0] = (byte)(t[ 0] >>  0);
 8015b10:	9b00      	ldr	r3, [sp, #0]
 8015b12:	7023      	strb	r3, [r4, #0]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015b14:	eb17 070b 	adds.w	r7, r7, fp
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8015b18:	f3c1 0114 	ubfx	r1, r1, #0, #21
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 8015b1c:	f8dd b000 	ldr.w	fp, [sp]
    s[ 1] = (byte)(t[ 0] >>  8);
 8015b20:	0a1b      	lsrs	r3, r3, #8
 8015b22:	7063      	strb	r3, [r4, #1]
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 8015b24:	014b      	lsls	r3, r1, #5
 8015b26:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8015b2a:	70a3      	strb	r3, [r4, #2]
    s[ 3] = (byte)(t[ 1] >>  3);
 8015b2c:	08cb      	lsrs	r3, r1, #3
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8015b2e:	f3c0 0014 	ubfx	r0, r0, #0, #21
    s[ 3] = (byte)(t[ 1] >>  3);
 8015b32:	70e3      	strb	r3, [r4, #3]
    s[ 4] = (byte)(t[ 1] >> 11);
 8015b34:	0acb      	lsrs	r3, r1, #11
 8015b36:	7123      	strb	r3, [r4, #4]
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8015b38:	0083      	lsls	r3, r0, #2
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8015b3a:	f3c2 0214 	ubfx	r2, r2, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8015b3e:	ea43 41d1 	orr.w	r1, r3, r1, lsr #19
    s[ 6] = (byte)(t[ 2] >>  6);
 8015b42:	0983      	lsrs	r3, r0, #6
 8015b44:	71a3      	strb	r3, [r4, #6]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 8015b46:	01d3      	lsls	r3, r2, #7
 8015b48:	ea43 3090 	orr.w	r0, r3, r0, lsr #14
    s[ 8] = (byte)(t[ 3] >>  1);
 8015b4c:	0853      	lsrs	r3, r2, #1
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8015b4e:	f3ce 0e14 	ubfx	lr, lr, #0, #21
    s[ 8] = (byte)(t[ 3] >>  1);
 8015b52:	7223      	strb	r3, [r4, #8]
    s[ 9] = (byte)(t[ 3] >>  9);
 8015b54:	0a53      	lsrs	r3, r2, #9
 8015b56:	7263      	strb	r3, [r4, #9]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 8015b58:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8015b5c:	ea43 4252 	orr.w	r2, r3, r2, lsr #17
    s[11] = (byte)(t[ 4] >>  4);
 8015b60:	ea4f 131e 	mov.w	r3, lr, lsr #4
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8015b64:	f3c5 0514 	ubfx	r5, r5, #0, #21
    s[11] = (byte)(t[ 4] >>  4);
 8015b68:	72e3      	strb	r3, [r4, #11]
    s[12] = (byte)(t[ 4] >> 12);
 8015b6a:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8015b6e:	7323      	strb	r3, [r4, #12]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8015b70:	196b      	adds	r3, r5, r5
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8015b72:	f3c6 0614 	ubfx	r6, r6, #0, #21
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8015b76:	ea43 5e1e 	orr.w	lr, r3, lr, lsr #20
    s[14] = (byte)(t[ 5] >>  7);
 8015b7a:	09eb      	lsrs	r3, r5, #7
 8015b7c:	73a3      	strb	r3, [r4, #14]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 8015b7e:	01b3      	lsls	r3, r6, #6
 8015b80:	ea43 35d5 	orr.w	r5, r3, r5, lsr #15
    s[16] = (byte)(t[ 6] >>  2);
 8015b84:	08b3      	lsrs	r3, r6, #2
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8015b86:	f3cc 0c14 	ubfx	ip, ip, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8015b8a:	7161      	strb	r1, [r4, #5]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 8015b8c:	71e0      	strb	r0, [r4, #7]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 8015b8e:	72a2      	strb	r2, [r4, #10]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8015b90:	f884 e00d 	strb.w	lr, [r4, #13]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 8015b94:	73e5      	strb	r5, [r4, #15]
    s[16] = (byte)(t[ 6] >>  2);
 8015b96:	7423      	strb	r3, [r4, #16]
    s[17] = (byte)(t[ 6] >> 10);
 8015b98:	0ab3      	lsrs	r3, r6, #10
 8015b9a:	7463      	strb	r3, [r4, #17]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8015b9c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8015ba0:	f3ca 0a14 	ubfx	sl, sl, #0, #21
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8015ba4:	ea43 4696 	orr.w	r6, r3, r6, lsr #18
    s[19] = (byte)(t[ 7] >>  5);
 8015ba8:	ea4f 135c 	mov.w	r3, ip, lsr #5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8015bac:	f3c8 0814 	ubfx	r8, r8, #0, #21
    s[19] = (byte)(t[ 7] >>  5);
 8015bb0:	74e3      	strb	r3, [r4, #19]
    s[22] = (byte)(t[ 8] >>  8);
 8015bb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015bb6:	75a3      	strb	r3, [r4, #22]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8015bb8:	ea4f 1348 	mov.w	r3, r8, lsl #5
    s[21] = (byte)(t[ 8] >>  0);
 8015bbc:	f884 a015 	strb.w	sl, [r4, #21]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8015bc0:	ea43 4a1a 	orr.w	sl, r3, sl, lsr #16
    s[24] = (byte)(t[ 9] >>  3);
 8015bc4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8015bc8:	f3c9 0914 	ubfx	r9, r9, #0, #21
    s[24] = (byte)(t[ 9] >>  3);
 8015bcc:	7623      	strb	r3, [r4, #24]
    s[25] = (byte)(t[ 9] >> 11);
 8015bce:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 8015bd2:	7663      	strb	r3, [r4, #25]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 8015bd4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8015bd8:	ea43 48d8 	orr.w	r8, r3, r8, lsr #19
    s[27] = (byte)(t[10] >>  6);
 8015bdc:	ea4f 1399 	mov.w	r3, r9, lsr #6
 8015be0:	76e3      	strb	r3, [r4, #27]
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 8015be2:	01fb      	lsls	r3, r7, #7
 8015be4:	ea43 3999 	orr.w	r9, r3, r9, lsr #14
    s[29] = (byte)(t[11] >>  1);
 8015be8:	087b      	lsrs	r3, r7, #1
    s[20] = (byte)(t[ 7] >> 13);
 8015bea:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
    s[29] = (byte)(t[11] >>  1);
 8015bee:	7763      	strb	r3, [r4, #29]
    s[30] = (byte)(t[11] >>  9);
 8015bf0:	0a7b      	lsrs	r3, r7, #9
    s[31] = (byte)(t[11] >> 17);
 8015bf2:	0c7f      	lsrs	r7, r7, #17
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8015bf4:	74a6      	strb	r6, [r4, #18]
    s[20] = (byte)(t[ 7] >> 13);
 8015bf6:	f884 c014 	strb.w	ip, [r4, #20]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8015bfa:	f884 a017 	strb.w	sl, [r4, #23]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 8015bfe:	f884 801a 	strb.w	r8, [r4, #26]
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 8015c02:	f884 901c 	strb.w	r9, [r4, #28]
    s[30] = (byte)(t[11] >>  9);
 8015c06:	77a3      	strb	r3, [r4, #30]
    s[31] = (byte)(t[11] >> 17);
 8015c08:	77e7      	strb	r7, [r4, #31]
}
 8015c0a:	b019      	add	sp, #100	; 0x64
 8015c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c10:	ffea2c13 	.word	0xffea2c13
 8015c14:	ffe72d19 	.word	0xffe72d19
 8015c18:	ffe9fb68 	.word	0xffe9fb68
 8015c1c:	fff0c654 	.word	0xfff0c654
 8015c20:	fff59084 	.word	0xfff59084

08015c24 <sc_muladd>:
{
 8015c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c28:	b0b5      	sub	sp, #212	; 0xd4
 8015c2a:	4617      	mov	r7, r2
 8015c2c:	9000      	str	r0, [sp, #0]
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 8015c2e:	4608      	mov	r0, r1
{
 8015c30:	461e      	mov	r6, r3
 8015c32:	460c      	mov	r4, r1
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 8015c34:	f7fd fa85 	bl	8013142 <load_3>
 8015c38:	f3c0 0314 	ubfx	r3, r0, #0, #21
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 8015c3c:	1ca0      	adds	r0, r4, #2
    ad[ 0] = MASK_21 & (load_3(a +  0) >> 0);
 8015c3e:	9301      	str	r3, [sp, #4]
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 8015c40:	f7fd fa89 	bl	8013156 <load_4>
 8015c44:	f3c0 1354 	ubfx	r3, r0, #5, #21
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 8015c48:	1d60      	adds	r0, r4, #5
    ad[ 1] = MASK_21 & (load_4(a +  2) >> 5);
 8015c4a:	9302      	str	r3, [sp, #8]
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 8015c4c:	f7fd fa79 	bl	8013142 <load_3>
 8015c50:	f3c0 0394 	ubfx	r3, r0, #2, #21
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 8015c54:	1de0      	adds	r0, r4, #7
    ad[ 2] = MASK_21 & (load_3(a +  5) >> 2);
 8015c56:	9303      	str	r3, [sp, #12]
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 8015c58:	f7fd fa7d 	bl	8013156 <load_4>
 8015c5c:	f3c0 13d4 	ubfx	r3, r0, #7, #21
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 8015c60:	f104 000a 	add.w	r0, r4, #10
    ad[ 3] = MASK_21 & (load_4(a +  7) >> 7);
 8015c64:	9304      	str	r3, [sp, #16]
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 8015c66:	f7fd fa76 	bl	8013156 <load_4>
 8015c6a:	f3c0 1314 	ubfx	r3, r0, #4, #21
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 8015c6e:	f104 000d 	add.w	r0, r4, #13
    ad[ 4] = MASK_21 & (load_4(a + 10) >> 4);
 8015c72:	9305      	str	r3, [sp, #20]
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 8015c74:	f7fd fa65 	bl	8013142 <load_3>
 8015c78:	f3c0 0354 	ubfx	r3, r0, #1, #21
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 8015c7c:	f104 000f 	add.w	r0, r4, #15
    ad[ 5] = MASK_21 & (load_3(a + 13) >> 1);
 8015c80:	9306      	str	r3, [sp, #24]
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 8015c82:	f7fd fa68 	bl	8013156 <load_4>
 8015c86:	f3c0 1394 	ubfx	r3, r0, #6, #21
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 8015c8a:	f104 0012 	add.w	r0, r4, #18
    ad[ 6] = MASK_21 & (load_4(a + 15) >> 6);
 8015c8e:	9307      	str	r3, [sp, #28]
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 8015c90:	f7fd fa57 	bl	8013142 <load_3>
 8015c94:	f3c0 03d4 	ubfx	r3, r0, #3, #21
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 8015c98:	f104 0015 	add.w	r0, r4, #21
    ad[ 7] = MASK_21 & (load_3(a + 18) >> 3);
 8015c9c:	9308      	str	r3, [sp, #32]
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 8015c9e:	f7fd fa50 	bl	8013142 <load_3>
 8015ca2:	f3c0 0314 	ubfx	r3, r0, #0, #21
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 8015ca6:	f104 0017 	add.w	r0, r4, #23
    ad[ 8] = MASK_21 & (load_3(a + 21) >> 0);
 8015caa:	9309      	str	r3, [sp, #36]	; 0x24
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 8015cac:	f7fd fa53 	bl	8013156 <load_4>
 8015cb0:	f3c0 1354 	ubfx	r3, r0, #5, #21
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 8015cb4:	f104 001a 	add.w	r0, r4, #26
    ad[ 9] = MASK_21 & (load_4(a + 23) >> 5);
 8015cb8:	930a      	str	r3, [sp, #40]	; 0x28
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 8015cba:	f7fd fa42 	bl	8013142 <load_3>
 8015cbe:	f3c0 0394 	ubfx	r3, r0, #2, #21
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8015cc2:	f104 001c 	add.w	r0, r4, #28
    ad[10] = MASK_21 & (load_3(a + 26) >> 2);
 8015cc6:	930b      	str	r3, [sp, #44]	; 0x2c
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8015cc8:	f7fd fa45 	bl	8013156 <load_4>
 8015ccc:	4680      	mov	r8, r0
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 8015cce:	4638      	mov	r0, r7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8015cd0:	911f      	str	r1, [sp, #124]	; 0x7c
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 8015cd2:	f7fd fa36 	bl	8013142 <load_3>
 8015cd6:	f3c0 0314 	ubfx	r3, r0, #0, #21
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 8015cda:	1cb8      	adds	r0, r7, #2
    bd[ 0] = MASK_21 & (load_3(b +  0) >> 0);
 8015cdc:	930c      	str	r3, [sp, #48]	; 0x30
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 8015cde:	f7fd fa3a 	bl	8013156 <load_4>
 8015ce2:	f3c0 1354 	ubfx	r3, r0, #5, #21
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 8015ce6:	1d78      	adds	r0, r7, #5
    bd[ 1] = MASK_21 & (load_4(b +  2) >> 5);
 8015ce8:	930d      	str	r3, [sp, #52]	; 0x34
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 8015cea:	f7fd fa2a 	bl	8013142 <load_3>
 8015cee:	f3c0 0394 	ubfx	r3, r0, #2, #21
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 8015cf2:	1df8      	adds	r0, r7, #7
    bd[ 2] = MASK_21 & (load_3(b +  5) >> 2);
 8015cf4:	930e      	str	r3, [sp, #56]	; 0x38
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 8015cf6:	f7fd fa2e 	bl	8013156 <load_4>
 8015cfa:	f3c0 13d4 	ubfx	r3, r0, #7, #21
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 8015cfe:	f107 000a 	add.w	r0, r7, #10
    bd[ 3] = MASK_21 & (load_4(b +  7) >> 7);
 8015d02:	930f      	str	r3, [sp, #60]	; 0x3c
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 8015d04:	f7fd fa27 	bl	8013156 <load_4>
 8015d08:	f3c0 1314 	ubfx	r3, r0, #4, #21
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 8015d0c:	f107 000d 	add.w	r0, r7, #13
    bd[ 4] = MASK_21 & (load_4(b + 10) >> 4);
 8015d10:	9310      	str	r3, [sp, #64]	; 0x40
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 8015d12:	f7fd fa16 	bl	8013142 <load_3>
 8015d16:	f3c0 0354 	ubfx	r3, r0, #1, #21
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 8015d1a:	f107 000f 	add.w	r0, r7, #15
    bd[ 5] = MASK_21 & (load_3(b + 13) >> 1);
 8015d1e:	9311      	str	r3, [sp, #68]	; 0x44
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 8015d20:	f7fd fa19 	bl	8013156 <load_4>
 8015d24:	f3c0 1394 	ubfx	r3, r0, #6, #21
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 8015d28:	f107 0012 	add.w	r0, r7, #18
    bd[ 6] = MASK_21 & (load_4(b + 15) >> 6);
 8015d2c:	9312      	str	r3, [sp, #72]	; 0x48
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 8015d2e:	f7fd fa08 	bl	8013142 <load_3>
 8015d32:	f3c0 03d4 	ubfx	r3, r0, #3, #21
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 8015d36:	f107 0015 	add.w	r0, r7, #21
    bd[ 7] = MASK_21 & (load_3(b + 18) >> 3);
 8015d3a:	9313      	str	r3, [sp, #76]	; 0x4c
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 8015d3c:	f7fd fa01 	bl	8013142 <load_3>
 8015d40:	f3c0 0314 	ubfx	r3, r0, #0, #21
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 8015d44:	f107 0017 	add.w	r0, r7, #23
    bd[ 8] = MASK_21 & (load_3(b + 21) >> 0);
 8015d48:	9314      	str	r3, [sp, #80]	; 0x50
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 8015d4a:	f7fd fa04 	bl	8013156 <load_4>
 8015d4e:	f3c0 1354 	ubfx	r3, r0, #5, #21
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 8015d52:	f107 001a 	add.w	r0, r7, #26
    bd[ 9] = MASK_21 & (load_4(b + 23) >> 5);
 8015d56:	9315      	str	r3, [sp, #84]	; 0x54
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 8015d58:	f7fd f9f3 	bl	8013142 <load_3>
 8015d5c:	f3c0 0394 	ubfx	r3, r0, #2, #21
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8015d60:	f107 001c 	add.w	r0, r7, #28
    bd[10] = MASK_21 & (load_3(b + 26) >> 2);
 8015d64:	9316      	str	r3, [sp, #88]	; 0x58
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8015d66:	f7fd f9f6 	bl	8013156 <load_4>
 8015d6a:	4681      	mov	r9, r0
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8015d6c:	4630      	mov	r0, r6
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8015d6e:	460c      	mov	r4, r1
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8015d70:	f7fd f9e7 	bl	8013142 <load_3>
 8015d74:	9017      	str	r0, [sp, #92]	; 0x5c
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 8015d76:	1cb0      	adds	r0, r6, #2
 8015d78:	f7fd f9ed 	bl	8013156 <load_4>
 8015d7c:	902a      	str	r0, [sp, #168]	; 0xa8
    cd[ 2] = MASK_21 & (load_3(c +  5) >> 2);
 8015d7e:	1d70      	adds	r0, r6, #5
 8015d80:	f7fd f9df 	bl	8013142 <load_3>
 8015d84:	4682      	mov	sl, r0
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 8015d86:	1df0      	adds	r0, r6, #7
 8015d88:	f7fd f9e5 	bl	8013156 <load_4>
 8015d8c:	902b      	str	r0, [sp, #172]	; 0xac
    cd[ 4] = MASK_21 & (load_4(c + 10) >> 4);
 8015d8e:	f106 000a 	add.w	r0, r6, #10
 8015d92:	f7fd f9e0 	bl	8013156 <load_4>
 8015d96:	4683      	mov	fp, r0
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 8015d98:	f106 000d 	add.w	r0, r6, #13
 8015d9c:	f7fd f9d1 	bl	8013142 <load_3>
 8015da0:	902d      	str	r0, [sp, #180]	; 0xb4
    cd[ 6] = MASK_21 & (load_4(c + 15) >> 6);
 8015da2:	f106 000f 	add.w	r0, r6, #15
 8015da6:	f7fd f9d6 	bl	8013156 <load_4>
 8015daa:	4605      	mov	r5, r0
    cd[ 7] = MASK_21 & (load_3(c + 18) >> 3);
 8015dac:	f106 0012 	add.w	r0, r6, #18
 8015db0:	f7fd f9c7 	bl	8013142 <load_3>
 8015db4:	902f      	str	r0, [sp, #188]	; 0xbc
    cd[ 8] = MASK_21 & (load_3(c + 21) >> 0);
 8015db6:	f106 0015 	add.w	r0, r6, #21
 8015dba:	f7fd f9c2 	bl	8013142 <load_3>
 8015dbe:	901c      	str	r0, [sp, #112]	; 0x70
    cd[ 9] = MASK_21 & (load_4(c + 23) >> 5);
 8015dc0:	f106 0017 	add.w	r0, r6, #23
 8015dc4:	f7fd f9c7 	bl	8013156 <load_4>
 8015dc8:	9031      	str	r0, [sp, #196]	; 0xc4
    cd[10] = MASK_21 & (load_3(c + 26) >> 2);
 8015dca:	f106 001a 	add.w	r0, r6, #26
 8015dce:	f7fd f9b8 	bl	8013142 <load_3>
 8015dd2:	4607      	mov	r7, r0
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8015dd4:	f106 001c 	add.w	r0, r6, #28
 8015dd8:	f7fd f9bd 	bl	8013156 <load_4>
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8015ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    t[ 0] = cd[ 0] + (sword64)ad[ 0] * bd[ 0];
 8015dde:	9e01      	ldr	r6, [sp, #4]
 8015de0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8015de4:	9033      	str	r0, [sp, #204]	; 0xcc
    cd[ 0] = MASK_21 & (load_3(c +  0) >> 0);
 8015de6:	f3c3 0014 	ubfx	r0, r3, #0, #21
    t[ 0] = cd[ 0] + (sword64)ad[ 0] * bd[ 0];
 8015dea:	2300      	movs	r3, #0
 8015dec:	461a      	mov	r2, r3
 8015dee:	fbe6 020c 	umlal	r0, r2, r6, ip
 8015df2:	e9cd 0217 	strd	r0, r2, [sp, #92]	; 0x5c
    t[ 2] = cd[ 2] + (sword64)ad[ 0] * bd[ 2] + (sword64)ad[ 1] * bd[ 1] +
 8015df6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8015dfa:	9a01      	ldr	r2, [sp, #4]
    cd[ 2] = MASK_21 & (load_3(c +  5) >> 2);
 8015dfc:	f3ca 0094 	ubfx	r0, sl, #2, #21
    t[ 2] = cd[ 2] + (sword64)ad[ 0] * bd[ 2] + (sword64)ad[ 1] * bd[ 1] +
 8015e00:	461e      	mov	r6, r3
 8015e02:	fbe2 060c 	umlal	r0, r6, r2, ip
 8015e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e08:	f8dd c008 	ldr.w	ip, [sp, #8]
 8015e0c:	fbe2 060c 	umlal	r0, r6, r2, ip
 8015e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e12:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015e16:	fbe2 060c 	umlal	r0, r6, r2, ip
 8015e1a:	9019      	str	r0, [sp, #100]	; 0x64
    t[ 4] = cd[ 4] + (sword64)ad[ 0] * bd[ 4] + (sword64)ad[ 1] * bd[ 3] +
 8015e1c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8015e20:	9801      	ldr	r0, [sp, #4]
    cd[ 4] = MASK_21 & (load_4(c + 10) >> 4);
 8015e22:	f3cb 1214 	ubfx	r2, fp, #4, #21
    t[ 4] = cd[ 4] + (sword64)ad[ 0] * bd[ 4] + (sword64)ad[ 1] * bd[ 3] +
 8015e26:	469b      	mov	fp, r3
 8015e28:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8015e2c:	9802      	ldr	r0, [sp, #8]
 8015e2e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8015e32:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8015e36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e38:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015e3c:	fbe0 2b0c 	umlal	r2, fp, r0, ip
                     (sword64)ad[ 2] * bd[ 2] + (sword64)ad[ 3] * bd[ 1] +
 8015e40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015e42:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015e46:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8015e4a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015e4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015e50:	fbe0 2b0c 	umlal	r2, fp, r0, ip
 8015e54:	921a      	str	r2, [sp, #104]	; 0x68
    t[ 6] = cd[ 6] + (sword64)ad[ 0] * bd[ 6] + (sword64)ad[ 1] * bd[ 5] +
 8015e56:	9801      	ldr	r0, [sp, #4]
    cd[ 6] = MASK_21 & (load_4(c + 15) >> 6);
 8015e58:	f3c5 1294 	ubfx	r2, r5, #6, #21
    t[ 6] = cd[ 6] + (sword64)ad[ 0] * bd[ 6] + (sword64)ad[ 1] * bd[ 5] +
 8015e5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015e5e:	469e      	mov	lr, r3
 8015e60:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8015e64:	9802      	ldr	r0, [sp, #8]
 8015e66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015e68:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8015e6c:	9803      	ldr	r0, [sp, #12]
 8015e6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015e70:	fbe0 2e05 	umlal	r2, lr, r0, r5
                     (sword64)ad[ 2] * bd[ 4] + (sword64)ad[ 3] * bd[ 3] +
 8015e74:	9d04      	ldr	r5, [sp, #16]
 8015e76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015e78:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8015e7c:	980e      	ldr	r0, [sp, #56]	; 0x38
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 8015e7e:	9d06      	ldr	r5, [sp, #24]
                     (sword64)ad[ 2] * bd[ 4] + (sword64)ad[ 3] * bd[ 3] +
 8015e80:	fbe0 2e0c 	umlal	r2, lr, r0, ip
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 8015e84:	980d      	ldr	r0, [sp, #52]	; 0x34
    t[ 8] = cd[ 8] + (sword64)ad[ 0] * bd[ 8] + (sword64)ad[ 1] * bd[ 7] +
 8015e86:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
                     (sword64)ad[ 4] * bd[ 2] + (sword64)ad[ 5] * bd[ 1] +
 8015e8a:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8015e8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015e90:	9d07      	ldr	r5, [sp, #28]
 8015e92:	fbe0 2e05 	umlal	r2, lr, r0, r5
 8015e96:	921b      	str	r2, [sp, #108]	; 0x6c
    cd[ 8] = MASK_21 & (load_3(c + 21) >> 0);
 8015e98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e9a:	f3c2 0014 	ubfx	r0, r2, #0, #21
    t[ 8] = cd[ 8] + (sword64)ad[ 0] * bd[ 8] + (sword64)ad[ 1] * bd[ 7] +
 8015e9e:	9a01      	ldr	r2, [sp, #4]
 8015ea0:	461d      	mov	r5, r3
 8015ea2:	fbe2 050c 	umlal	r0, r5, r2, ip
 8015ea6:	9a02      	ldr	r2, [sp, #8]
 8015ea8:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8015eac:	fbe2 050c 	umlal	r0, r5, r2, ip
 8015eb0:	9a03      	ldr	r2, [sp, #12]
 8015eb2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8015eb6:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 2] * bd[ 6] + (sword64)ad[ 3] * bd[ 5] +
 8015eba:	9a04      	ldr	r2, [sp, #16]
 8015ebc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8015ec0:	fbe2 050c 	umlal	r0, r5, r2, ip
 8015ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ec6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015eca:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 4] * bd[ 4] + (sword64)ad[ 5] * bd[ 3] +
 8015ece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ed0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8015ed4:	fbe2 050c 	umlal	r0, r5, r2, ip
 8015ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eda:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015ede:	fbe2 050c 	umlal	r0, r5, r2, ip
                     (sword64)ad[ 6] * bd[ 2] + (sword64)ad[ 7] * bd[ 1] +
 8015ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ee4:	f8dd c020 	ldr.w	ip, [sp, #32]
 8015ee8:	fbe2 050c 	umlal	r0, r5, r2, ip
 8015eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015eee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8015ef2:	fbe2 050c 	umlal	r0, r5, r2, ip
 8015ef6:	901c      	str	r0, [sp, #112]	; 0x70
    t[10] = cd[10] + (sword64)ad[ 0] * bd[10] + (sword64)ad[ 1] * bd[ 9] +
 8015ef8:	9a01      	ldr	r2, [sp, #4]
    cd[10] = MASK_21 & (load_3(c + 26) >> 2);
 8015efa:	f3c7 0094 	ubfx	r0, r7, #2, #21
    t[10] = cd[10] + (sword64)ad[ 0] * bd[10] + (sword64)ad[ 1] * bd[ 9] +
 8015efe:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8015f00:	469c      	mov	ip, r3
 8015f02:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8015f06:	9a02      	ldr	r2, [sp, #8]
 8015f08:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8015f0a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8015f0e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015f10:	9a03      	ldr	r2, [sp, #12]
 8015f12:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 2] * bd[ 8] + (sword64)ad[ 3] * bd[ 7] +
 8015f16:	9a04      	ldr	r2, [sp, #16]
 8015f18:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8015f1a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8015f1e:	9a05      	ldr	r2, [sp, #20]
 8015f20:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015f22:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 4] * bd[ 6] + (sword64)ad[ 5] * bd[ 5] +
 8015f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f28:	9f06      	ldr	r7, [sp, #24]
 8015f2a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8015f2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f30:	9f07      	ldr	r7, [sp, #28]
 8015f32:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 6] * bd[ 4] + (sword64)ad[ 7] * bd[ 3] +
 8015f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f38:	9f08      	ldr	r7, [sp, #32]
 8015f3a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8015f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015f42:	fbe2 0c07 	umlal	r0, ip, r2, r7
                     (sword64)ad[ 8] * bd[ 2] + (sword64)ad[ 9] * bd[ 1] +
 8015f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015f4a:	fbe2 0c07 	umlal	r0, ip, r2, r7
 8015f4e:	e9dd 720b 	ldrd	r7, r2, [sp, #44]	; 0x2c
 8015f52:	fbe2 0c07 	umlal	r0, ip, r2, r7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8015f56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 8015f58:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8015f5a:	ea4f 19d9 	mov.w	r9, r9, lsr #7
    ad[11] = (word32)(load_4(a + 28) >> 7);
 8015f5e:	ea4f 18d8 	mov.w	r8, r8, lsr #7
 8015f62:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
    bd[11] = (word32)(load_4(b + 28) >> 7);
 8015f66:	ea49 6944 	orr.w	r9, r9, r4, lsl #25
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 8015f6a:	9a02      	ldr	r2, [sp, #8]
 8015f6c:	9c03      	ldr	r4, [sp, #12]
                     (sword64)ad[ 8] * bd[ 2] + (sword64)ad[ 9] * bd[ 1] +
 8015f6e:	e9cd 0c1d 	strd	r0, ip, [sp, #116]	; 0x74
    t[12] =          (sword64)ad[ 1] * bd[11] + (sword64)ad[ 2] * bd[10] +
 8015f72:	fba4 4707 	umull	r4, r7, r4, r7
 8015f76:	fba2 2009 	umull	r2, r0, r2, r9
 8015f7a:	1912      	adds	r2, r2, r4
 8015f7c:	eb40 0707 	adc.w	r7, r0, r7
 8015f80:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015f82:	9804      	ldr	r0, [sp, #16]
 8015f84:	fbe0 2704 	umlal	r2, r7, r0, r4
 8015f88:	4610      	mov	r0, r2
                     (sword64)ad[ 3] * bd[ 9] + (sword64)ad[ 4] * bd[ 8] +
 8015f8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015f8c:	9a05      	ldr	r2, [sp, #20]
 8015f8e:	fbe2 0704 	umlal	r0, r7, r2, r4
 8015f92:	9a06      	ldr	r2, [sp, #24]
 8015f94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015f96:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 5] * bd[ 7] + (sword64)ad[ 6] * bd[ 6] +
 8015f9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f9c:	9c07      	ldr	r4, [sp, #28]
 8015f9e:	fbe2 0704 	umlal	r0, r7, r2, r4
 8015fa2:	9c08      	ldr	r4, [sp, #32]
 8015fa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015fa6:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 7] * bd[ 5] + (sword64)ad[ 8] * bd[ 4] +
 8015faa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015fac:	9c09      	ldr	r4, [sp, #36]	; 0x24
    t[14] =          (sword64)ad[ 3] * bd[11] + (sword64)ad[ 4] * bd[10] +
 8015fae:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
                     (sword64)ad[ 7] * bd[ 5] + (sword64)ad[ 8] * bd[ 4] +
 8015fb2:	fbe2 0704 	umlal	r0, r7, r2, r4
 8015fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015fba:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[ 9] * bd[ 3] + (sword64)ad[10] * bd[ 2] +
 8015fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015fc2:	fbe2 0704 	umlal	r0, r7, r2, r4
                     (sword64)ad[11] * bd[ 1];
 8015fc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fc8:	fba2 2408 	umull	r2, r4, r2, r8
                     (sword64)ad[ 9] * bd[ 3] + (sword64)ad[10] * bd[ 2] +
 8015fcc:	1882      	adds	r2, r0, r2
 8015fce:	eb47 0704 	adc.w	r7, r7, r4
 8015fd2:	921f      	str	r2, [sp, #124]	; 0x7c
    t[14] =          (sword64)ad[ 3] * bd[11] + (sword64)ad[ 4] * bd[10] +
 8015fd4:	9c05      	ldr	r4, [sp, #20]
 8015fd6:	9a04      	ldr	r2, [sp, #16]
 8015fd8:	fba4 4c0c 	umull	r4, ip, r4, ip
 8015fdc:	fba2 2009 	umull	r2, r0, r2, r9
 8015fe0:	1912      	adds	r2, r2, r4
 8015fe2:	eb40 000c 	adc.w	r0, r0, ip
 8015fe6:	9c06      	ldr	r4, [sp, #24]
 8015fe8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 8015fec:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 5] * bd[ 9] + (sword64)ad[ 6] * bd[ 8] +
 8015ff0:	9c07      	ldr	r4, [sp, #28]
 8015ff2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8015ff6:	fbe4 200c 	umlal	r2, r0, r4, ip
 8015ffa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015ffc:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016000:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 7] * bd[ 7] + (sword64)ad[ 8] * bd[ 6] +
 8016004:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016006:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801600a:	fbe4 200c 	umlal	r2, r0, r4, ip
 801600e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016010:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8016014:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 8016018:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801601a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 801601e:	fbe4 200c 	umlal	r2, r0, r4, ip
                     (sword64)ad[11] * bd[ 3];
 8016022:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016024:	fba4 4c08 	umull	r4, ip, r4, r8
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 8016028:	1912      	adds	r2, r2, r4
 801602a:	9220      	str	r2, [sp, #128]	; 0x80
 801602c:	eb40 020c 	adc.w	r2, r0, ip
    t[16] =          (sword64)ad[ 5] * bd[11] + (sword64)ad[ 6] * bd[10] +
 8016030:	9c07      	ldr	r4, [sp, #28]
 8016032:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 5] + (sword64)ad[10] * bd[ 4] +
 8016036:	9221      	str	r2, [sp, #132]	; 0x84
    t[16] =          (sword64)ad[ 5] * bd[11] + (sword64)ad[ 6] * bd[10] +
 8016038:	9a06      	ldr	r2, [sp, #24]
 801603a:	fba4 c40c 	umull	ip, r4, r4, ip
 801603e:	fba2 2009 	umull	r2, r0, r2, r9
 8016042:	eb12 020c 	adds.w	r2, r2, ip
 8016046:	eb40 0404 	adc.w	r4, r0, r4
 801604a:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 801604e:	9808      	ldr	r0, [sp, #32]
 8016050:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[ 7] * bd[ 9] + (sword64)ad[ 8] * bd[ 8] +
 8016054:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016056:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801605a:	fbe0 240c 	umlal	r2, r4, r0, ip
 801605e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016060:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8016064:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 8016068:	9812      	ldr	r0, [sp, #72]	; 0x48
 801606a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 801606e:	fbe0 240c 	umlal	r2, r4, r0, ip
                     (sword64)ad[11] * bd[ 5];
 8016072:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016074:	fba0 0c08 	umull	r0, ip, r0, r8
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 8016078:	1812      	adds	r2, r2, r0
 801607a:	9222      	str	r2, [sp, #136]	; 0x88
 801607c:	eb44 020c 	adc.w	r2, r4, ip
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 8016080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016082:	9c16      	ldr	r4, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 7] + (sword64)ad[10] * bd[ 6] +
 8016084:	9223      	str	r2, [sp, #140]	; 0x8c
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 8016086:	9a08      	ldr	r2, [sp, #32]
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 8016088:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    t[18] =          (sword64)ad[ 7] * bd[11] + (sword64)ad[ 8] * bd[10] +
 801608c:	fba0 0404 	umull	r0, r4, r0, r4
 8016090:	fba2 2a09 	umull	r2, sl, r2, r9
 8016094:	1812      	adds	r2, r2, r0
 8016096:	eb4a 0a04 	adc.w	sl, sl, r4
 801609a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801609c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801609e:	fbe0 2a04 	umlal	r2, sl, r0, r4
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 80160a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80160a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80160a6:	fbe0 2a04 	umlal	r2, sl, r0, r4
                     (sword64)ad[11] * bd[ 7];
 80160aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80160ac:	fba0 0408 	umull	r0, r4, r0, r8
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 80160b0:	1812      	adds	r2, r2, r0
 80160b2:	9224      	str	r2, [sp, #144]	; 0x90
 80160b4:	eb4a 0204 	adc.w	r2, sl, r4
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 80160b8:	9816      	ldr	r0, [sp, #88]	; 0x58
                     (sword64)ad[ 9] * bd[ 9] + (sword64)ad[10] * bd[ 8] +
 80160ba:	9225      	str	r2, [sp, #148]	; 0x94
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 80160bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160be:	fba0 c00c 	umull	ip, r0, r0, ip
 80160c2:	fba2 2409 	umull	r2, r4, r2, r9
 80160c6:	eb12 020c 	adds.w	r2, r2, ip
 80160ca:	eb44 0400 	adc.w	r4, r4, r0
                     (sword64)ad[11] * bd[ 9];
 80160ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80160d0:	fba0 0c08 	umull	r0, ip, r0, r8
    t[20] =          (sword64)ad[ 9] * bd[11] + (sword64)ad[10] * bd[10] +
 80160d4:	1812      	adds	r2, r2, r0
 80160d6:	9226      	str	r2, [sp, #152]	; 0x98
 80160d8:	eb44 020c 	adc.w	r2, r4, ip
 80160dc:	9227      	str	r2, [sp, #156]	; 0x9c
    t[22] =          (sword64)ad[11] * bd[11];
 80160de:	fba9 2008 	umull	r2, r0, r9, r8
 80160e2:	e9cd 2028 	strd	r2, r0, [sp, #160]	; 0xa0
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 80160e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    t[ 1] = cd[ 1] + (sword64)ad[ 0] * bd[ 1] + (sword64)ad[ 1] * bd[ 0];
 80160e8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    cd[ 1] = MASK_21 & (load_4(c +  2) >> 5);
 80160ec:	f3c2 1454 	ubfx	r4, r2, #5, #21
    t[ 1] = cd[ 1] + (sword64)ad[ 0] * bd[ 1] + (sword64)ad[ 1] * bd[ 0];
 80160f0:	9a01      	ldr	r2, [sp, #4]
 80160f2:	4618      	mov	r0, r3
 80160f4:	fbe2 400c 	umlal	r4, r0, r2, ip
 80160f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160fa:	f8dd c008 	ldr.w	ip, [sp, #8]
 80160fe:	fbe2 400c 	umlal	r4, r0, r2, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016102:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016104:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016108:	0d52      	lsrs	r2, r2, #21
 801610a:	ea42 22cc 	orr.w	r2, r2, ip, lsl #11
 801610e:	18a2      	adds	r2, r4, r2
 8016110:	922a      	str	r2, [sp, #168]	; 0xa8
 8016112:	eb40 526c 	adc.w	r2, r0, ip, asr #21
 8016116:	9218      	str	r2, [sp, #96]	; 0x60
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 8016118:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    t[ 3] = cd[ 3] + (sword64)ad[ 0] * bd[ 3] + (sword64)ad[ 1] * bd[ 2] +
 801611a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    cd[ 3] = MASK_21 & (load_4(c +  7) >> 7);
 801611c:	f3c2 14d4 	ubfx	r4, r2, #7, #21
    t[ 3] = cd[ 3] + (sword64)ad[ 0] * bd[ 3] + (sword64)ad[ 1] * bd[ 2] +
 8016120:	9a01      	ldr	r2, [sp, #4]
 8016122:	469a      	mov	sl, r3
 8016124:	fbe2 4a00 	umlal	r4, sl, r2, r0
 8016128:	9a02      	ldr	r2, [sp, #8]
 801612a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801612c:	fbe2 4a00 	umlal	r4, sl, r2, r0
 8016130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016132:	9803      	ldr	r0, [sp, #12]
 8016134:	fbe2 4a00 	umlal	r4, sl, r2, r0
                     (sword64)ad[ 2] * bd[ 1] + (sword64)ad[ 3] * bd[ 0];
 8016138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801613a:	9804      	ldr	r0, [sp, #16]
 801613c:	fbe2 4a00 	umlal	r4, sl, r2, r0
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016140:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016142:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 8016146:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
 801614a:	eb14 020c 	adds.w	r2, r4, ip
 801614e:	922b      	str	r2, [sp, #172]	; 0xac
 8016150:	eb4a 5266 	adc.w	r2, sl, r6, asr #21
 8016154:	922c      	str	r2, [sp, #176]	; 0xb0
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 8016156:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    t[ 5] = cd[ 5] + (sword64)ad[ 0] * bd[ 5] + (sword64)ad[ 1] * bd[ 4] +
 8016158:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cd[ 5] = MASK_21 & (load_3(c + 13) >> 1);
 801615a:	f3c2 0c54 	ubfx	ip, r2, #1, #21
    t[ 5] = cd[ 5] + (sword64)ad[ 0] * bd[ 5] + (sword64)ad[ 1] * bd[ 4] +
 801615e:	9a01      	ldr	r2, [sp, #4]
 8016160:	4618      	mov	r0, r3
 8016162:	fbe2 c004 	umlal	ip, r0, r2, r4
 8016166:	9a02      	ldr	r2, [sp, #8]
 8016168:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801616a:	fbe2 c004 	umlal	ip, r0, r2, r4
 801616e:	9a03      	ldr	r2, [sp, #12]
 8016170:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016172:	fbe2 c004 	umlal	ip, r0, r2, r4
                     (sword64)ad[ 2] * bd[ 3] + (sword64)ad[ 3] * bd[ 2] +
 8016176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016178:	9c04      	ldr	r4, [sp, #16]
 801617a:	fbe2 c004 	umlal	ip, r0, r2, r4
 801617e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016180:	9c05      	ldr	r4, [sp, #20]
 8016182:	fbe2 c004 	umlal	ip, r0, r2, r4
                     (sword64)ad[ 4] * bd[ 1] + (sword64)ad[ 5] * bd[ 0];
 8016186:	9c06      	ldr	r4, [sp, #24]
 8016188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801618a:	fbe2 c004 	umlal	ip, r0, r2, r4
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 801618e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016190:	0d52      	lsrs	r2, r2, #21
 8016192:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8016196:	eb1c 0202 	adds.w	r2, ip, r2
 801619a:	922d      	str	r2, [sp, #180]	; 0xb4
 801619c:	eb40 526b 	adc.w	r2, r0, fp, asr #21
 80161a0:	922e      	str	r2, [sp, #184]	; 0xb8
    cd[ 7] = MASK_21 & (load_3(c + 18) >> 3);
 80161a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80161a4:	f3c2 06d4 	ubfx	r6, r2, #3, #21
    t[ 7] = cd[ 7] + (sword64)ad[ 0] * bd[ 7] + (sword64)ad[ 1] * bd[ 6] +
 80161a8:	9a01      	ldr	r2, [sp, #4]
 80161aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80161ac:	469a      	mov	sl, r3
 80161ae:	fbe2 6a00 	umlal	r6, sl, r2, r0
 80161b2:	9a02      	ldr	r2, [sp, #8]
 80161b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80161b6:	fbe2 6a00 	umlal	r6, sl, r2, r0
 80161ba:	9a03      	ldr	r2, [sp, #12]
 80161bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80161be:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 2] * bd[ 5] + (sword64)ad[ 3] * bd[ 4] +
 80161c2:	9a04      	ldr	r2, [sp, #16]
 80161c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80161c6:	fbe2 6a00 	umlal	r6, sl, r2, r0
 80161ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161cc:	9805      	ldr	r0, [sp, #20]
 80161ce:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 4] * bd[ 3] + (sword64)ad[ 5] * bd[ 2] +
 80161d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161d4:	9807      	ldr	r0, [sp, #28]
 80161d6:	fbe2 6a04 	umlal	r6, sl, r2, r4
 80161da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    t[ 9] = cd[ 9] + (sword64)ad[ 0] * bd[ 9] + (sword64)ad[ 1] * bd[ 8] +
 80161dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
                     (sword64)ad[ 4] * bd[ 3] + (sword64)ad[ 5] * bd[ 2] +
 80161de:	fbe2 6a00 	umlal	r6, sl, r2, r0
                     (sword64)ad[ 6] * bd[ 1] + (sword64)ad[ 7] * bd[ 0];
 80161e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161e4:	9808      	ldr	r0, [sp, #32]
 80161e6:	fbe2 6a00 	umlal	r6, sl, r2, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80161ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80161ec:	0d50      	lsrs	r0, r2, #21
 80161ee:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
 80161f2:	1832      	adds	r2, r6, r0
 80161f4:	922f      	str	r2, [sp, #188]	; 0xbc
 80161f6:	eb4a 526e 	adc.w	r2, sl, lr, asr #21
 80161fa:	9230      	str	r2, [sp, #192]	; 0xc0
    cd[ 9] = MASK_21 & (load_4(c + 23) >> 5);
 80161fc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80161fe:	f3c2 1054 	ubfx	r0, r2, #5, #21
    t[ 9] = cd[ 9] + (sword64)ad[ 0] * bd[ 9] + (sword64)ad[ 1] * bd[ 8] +
 8016202:	9a01      	ldr	r2, [sp, #4]
 8016204:	fbe2 0304 	umlal	r0, r3, r2, r4
 8016208:	469b      	mov	fp, r3
 801620a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801620c:	9b02      	ldr	r3, [sp, #8]
 801620e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 8016212:	9b03      	ldr	r3, [sp, #12]
 8016214:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016216:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 2] * bd[ 7] + (sword64)ad[ 3] * bd[ 6] +
 801621a:	9b04      	ldr	r3, [sp, #16]
 801621c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801621e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 8016222:	9b05      	ldr	r3, [sp, #20]
 8016224:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016226:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 4] * bd[ 5] + (sword64)ad[ 5] * bd[ 4] +
 801622a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801622c:	9a06      	ldr	r2, [sp, #24]
 801622e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 8016232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016234:	9a07      	ldr	r2, [sp, #28]
 8016236:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 6] * bd[ 3] + (sword64)ad[ 7] * bd[ 2] +
 801623a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801623c:	9a08      	ldr	r2, [sp, #32]
 801623e:	fbe3 0b02 	umlal	r0, fp, r3, r2
 8016242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016246:	fbe3 0b02 	umlal	r0, fp, r3, r2
                     (sword64)ad[ 8] * bd[ 1] + (sword64)ad[ 9] * bd[ 0];
 801624a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801624c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801624e:	fbe3 0b02 	umlal	r0, fp, r3, r2
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016252:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016254:	0d5b      	lsrs	r3, r3, #21
 8016256:	ea43 23c5 	orr.w	r3, r3, r5, lsl #11
 801625a:	18c3      	adds	r3, r0, r3
 801625c:	9331      	str	r3, [sp, #196]	; 0xc4
 801625e:	eb4b 5365 	adc.w	r3, fp, r5, asr #21
 8016262:	9332      	str	r3, [sp, #200]	; 0xc8
    cd[11] = (word32)(load_4(c + 28) >> 7);
 8016264:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    t[16] -= t[23] * ORDER_5;
 8016266:	f8df b304 	ldr.w	fp, [pc, #772]	; 801656c <sc_muladd+0x948>
    cd[11] = (word32)(load_4(c + 28) >> 7);
 801626a:	09da      	lsrs	r2, r3, #7
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 801626c:	9b01      	ldr	r3, [sp, #4]
    cd[11] = (word32)(load_4(c + 28) >> 7);
 801626e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 8016272:	fba3 0309 	umull	r0, r3, r3, r9
 8016276:	1815      	adds	r5, r2, r0
 8016278:	f143 0c00 	adc.w	ip, r3, #0
 801627c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801627e:	9b02      	ldr	r3, [sp, #8]
 8016280:	fbe3 5c02 	umlal	r5, ip, r3, r2
 8016284:	9b03      	ldr	r3, [sp, #12]
                     (sword64)ad[ 2] * bd[ 9] + (sword64)ad[ 3] * bd[ 8] +
 8016286:	9a14      	ldr	r2, [sp, #80]	; 0x50
    t[11] = cd[11] + (sword64)ad[ 0] * bd[11] + (sword64)ad[ 1] * bd[10] +
 8016288:	fbe3 5c04 	umlal	r5, ip, r3, r4
                     (sword64)ad[ 2] * bd[ 9] + (sword64)ad[ 3] * bd[ 8] +
 801628c:	9b04      	ldr	r3, [sp, #16]
 801628e:	fbe3 5c02 	umlal	r5, ip, r3, r2
 8016292:	9b05      	ldr	r3, [sp, #20]
 8016294:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016296:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 4] * bd[ 7] + (sword64)ad[ 5] * bd[ 6] +
 801629a:	9b06      	ldr	r3, [sp, #24]
 801629c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801629e:	fbe3 5c02 	umlal	r5, ip, r3, r2
 80162a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80162a4:	9a07      	ldr	r2, [sp, #28]
 80162a6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 6] * bd[ 5] + (sword64)ad[ 7] * bd[ 4] +
 80162aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162ac:	9a08      	ldr	r2, [sp, #32]
 80162ae:	fbe3 5c02 	umlal	r5, ip, r3, r2
 80162b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162b6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[ 8] * bd[ 3] + (sword64)ad[ 9] * bd[ 2] +
 80162ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162be:	fbe3 5c02 	umlal	r5, ip, r3, r2
 80162c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162c6:	fbe3 5c02 	umlal	r5, ip, r3, r2
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 80162ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162cc:	fba3 0e08 	umull	r0, lr, r3, r8
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80162d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 80162d2:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 80162d4:	182d      	adds	r5, r5, r0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80162d6:	ea4f 5053 	mov.w	r0, r3, lsr #21
 80162da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80162dc:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
                     (sword64)ad[10] * bd[ 1] + (sword64)ad[11] * bd[ 0];
 80162e0:	eb4c 0c0e 	adc.w	ip, ip, lr
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 80162e4:	182b      	adds	r3, r5, r0
 80162e6:	9333      	str	r3, [sp, #204]	; 0xcc
 80162e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80162ea:	eb4c 5e63 	adc.w	lr, ip, r3, asr #21
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 80162ee:	9b03      	ldr	r3, [sp, #12]
 80162f0:	fba3 0209 	umull	r0, r2, r3, r9
 80162f4:	9b04      	ldr	r3, [sp, #16]
 80162f6:	fba3 3101 	umull	r3, r1, r3, r1
 80162fa:	18c0      	adds	r0, r0, r3
 80162fc:	eb42 0601 	adc.w	r6, r2, r1
 8016300:	9a05      	ldr	r2, [sp, #20]
                     (sword64)ad[ 4] * bd[ 9] + (sword64)ad[ 5] * bd[ 8] +
 8016302:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[13] =          (sword64)ad[ 2] * bd[11] + (sword64)ad[ 3] * bd[10] +
 8016304:	4603      	mov	r3, r0
 8016306:	fbe2 3604 	umlal	r3, r6, r2, r4
                     (sword64)ad[ 4] * bd[ 9] + (sword64)ad[ 5] * bd[ 8] +
 801630a:	9a06      	ldr	r2, [sp, #24]
 801630c:	fbe2 3601 	umlal	r3, r6, r2, r1
 8016310:	9a07      	ldr	r2, [sp, #28]
 8016312:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016314:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[ 6] * bd[ 7] + (sword64)ad[ 7] * bd[ 6] +
 8016318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801631a:	9908      	ldr	r1, [sp, #32]
 801631c:	fbe2 3601 	umlal	r3, r6, r2, r1
 8016320:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016322:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016324:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[ 8] * bd[ 5] + (sword64)ad[ 9] * bd[ 4] +
 8016328:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801632a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801632c:	fbe2 3601 	umlal	r3, r6, r2, r1
 8016330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016332:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016334:	fbe2 3601 	umlal	r3, r6, r2, r1
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 8016338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 801633a:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 801633c:	fba2 0508 	umull	r0, r5, r2, r8
 8016340:	1818      	adds	r0, r3, r0
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8016342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016344:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8016348:	ea43 23c7 	orr.w	r3, r3, r7, lsl #11
                     (sword64)ad[10] * bd[ 3] + (sword64)ad[11] * bd[ 2];
 801634c:	eb46 0605 	adc.w	r6, r6, r5
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8016350:	18c3      	adds	r3, r0, r3
 8016352:	931e      	str	r3, [sp, #120]	; 0x78
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 8016354:	9b05      	ldr	r3, [sp, #20]
 8016356:	fba3 0209 	umull	r0, r2, r3, r9
 801635a:	9b06      	ldr	r3, [sp, #24]
 801635c:	fba3 3101 	umull	r3, r1, r3, r1
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8016360:	eb46 5667 	adc.w	r6, r6, r7, asr #21
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 8016364:	18c0      	adds	r0, r0, r3
 8016366:	9b07      	ldr	r3, [sp, #28]
 8016368:	eb42 0201 	adc.w	r2, r2, r1
 801636c:	fbe3 0204 	umlal	r0, r2, r3, r4
                     (sword64)ad[ 6] * bd[ 9] + (sword64)ad[ 7] * bd[ 8] +
 8016370:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016372:	9b08      	ldr	r3, [sp, #32]
    t[15] =          (sword64)ad[ 4] * bd[11] + (sword64)ad[ 5] * bd[10] +
 8016374:	4605      	mov	r5, r0
                     (sword64)ad[ 6] * bd[ 9] + (sword64)ad[ 7] * bd[ 8] +
 8016376:	fbe3 5201 	umlal	r5, r2, r3, r1
 801637a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801637c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801637e:	fbe3 5201 	umlal	r5, r2, r3, r1
                     (sword64)ad[ 8] * bd[ 7] + (sword64)ad[ 9] * bd[ 6] +
 8016382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016384:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016386:	fbe3 5201 	umlal	r5, r2, r3, r1
 801638a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801638c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801638e:	fbe3 5201 	umlal	r5, r2, r3, r1
                     (sword64)ad[10] * bd[ 5] + (sword64)ad[11] * bd[ 4];
 8016392:	9b10      	ldr	r3, [sp, #64]	; 0x40
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 8016394:	9916      	ldr	r1, [sp, #88]	; 0x58
                     (sword64)ad[10] * bd[ 5] + (sword64)ad[11] * bd[ 4];
 8016396:	fba3 0308 	umull	r0, r3, r3, r8
 801639a:	182d      	adds	r5, r5, r0
 801639c:	eb42 0203 	adc.w	r2, r2, r3
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 80163a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80163a2:	0d58      	lsrs	r0, r3, #21
 80163a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163a6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80163aa:	182b      	adds	r3, r5, r0
 80163ac:	9310      	str	r3, [sp, #64]	; 0x40
 80163ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163b0:	eb42 5263 	adc.w	r2, r2, r3, asr #21
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 80163b4:	9b07      	ldr	r3, [sp, #28]
 80163b6:	fba3 0c09 	umull	r0, ip, r3, r9
 80163ba:	9b08      	ldr	r3, [sp, #32]
 80163bc:	fba3 3101 	umull	r3, r1, r3, r1
 80163c0:	18c3      	adds	r3, r0, r3
 80163c2:	eb4c 0c01 	adc.w	ip, ip, r1
 80163c6:	9909      	ldr	r1, [sp, #36]	; 0x24
                     (sword64)ad[ 8] * bd[ 9] + (sword64)ad[ 9] * bd[ 8] +
 80163c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    t[17] =          (sword64)ad[ 6] * bd[11] + (sword64)ad[ 7] * bd[10] +
 80163ca:	fbe1 3c04 	umlal	r3, ip, r1, r4
                     (sword64)ad[ 8] * bd[ 9] + (sword64)ad[ 9] * bd[ 8] +
 80163ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80163d0:	fbe1 3c00 	umlal	r3, ip, r1, r0
 80163d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80163d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80163d8:	fbe1 3c00 	umlal	r3, ip, r1, r0
                     (sword64)ad[10] * bd[ 7] + (sword64)ad[11] * bd[ 6];
 80163dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80163de:	fba1 0108 	umull	r0, r1, r1, r8
 80163e2:	1818      	adds	r0, r3, r0
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80163e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
                     (sword64)ad[10] * bd[ 7] + (sword64)ad[11] * bd[ 6];
 80163e6:	eb4c 0c01 	adc.w	ip, ip, r1
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80163ea:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80163ec:	0d5b      	lsrs	r3, r3, #21
 80163ee:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 80163f2:	18c3      	adds	r3, r0, r3
 80163f4:	eb4c 5c61 	adc.w	ip, ip, r1, asr #21
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 80163f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80163fa:	990a      	ldr	r1, [sp, #40]	; 0x28
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80163fc:	9311      	str	r3, [sp, #68]	; 0x44
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 80163fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016400:	fba1 0100 	umull	r0, r1, r1, r0
 8016404:	fba3 3a09 	umull	r3, sl, r3, r9
 8016408:	181b      	adds	r3, r3, r0
 801640a:	eb4a 0a01 	adc.w	sl, sl, r1
 801640e:	980b      	ldr	r0, [sp, #44]	; 0x2c
                     (sword64)ad[10] * bd[ 9] + (sword64)ad[11] * bd[ 8];
 8016410:	9914      	ldr	r1, [sp, #80]	; 0x50
    t[19] =          (sword64)ad[ 8] * bd[11] + (sword64)ad[ 9] * bd[10] +
 8016412:	fbe4 3a00 	umlal	r3, sl, r4, r0
                     (sword64)ad[10] * bd[ 9] + (sword64)ad[11] * bd[ 8];
 8016416:	fba1 0108 	umull	r0, r1, r1, r8
 801641a:	181b      	adds	r3, r3, r0
 801641c:	eb4a 0a01 	adc.w	sl, sl, r1
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 8016420:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016422:	9825      	ldr	r0, [sp, #148]	; 0x94
 8016424:	0d49      	lsrs	r1, r1, #21
 8016426:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 801642a:	185b      	adds	r3, r3, r1
    t[21] =          (sword64)ad[10] * bd[11] + (sword64)ad[11] * bd[10];
 801642c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801642e:	fba1 9509 	umull	r9, r5, r1, r9
 8016432:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016434:	fba1 1408 	umull	r1, r4, r1, r8
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 8016438:	eb4a 5a60 	adc.w	sl, sl, r0, asr #21
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 801643c:	9826      	ldr	r0, [sp, #152]	; 0x98
    t[21] =          (sword64)ad[10] * bd[11] + (sword64)ad[11] * bd[10];
 801643e:	eb19 0101 	adds.w	r1, r9, r1
 8016442:	eb45 0404 	adc.w	r4, r5, r4
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 8016446:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    t[12] -= t[22] * ORDER_2;
 8016448:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8016570 <sc_muladd+0x94c>
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 801644c:	0d40      	lsrs	r0, r0, #21
 801644e:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 8016452:	1809      	adds	r1, r1, r0
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 8016454:	9828      	ldr	r0, [sp, #160]	; 0xa0
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 8016456:	eb44 5465 	adc.w	r4, r4, r5, asr #21
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 801645a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801645c:	0d40      	lsrs	r0, r0, #21
 801645e:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 8016462:	9005      	str	r0, [sp, #20]
 8016464:	1568      	asrs	r0, r5, #21
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 8016466:	9d11      	ldr	r5, [sp, #68]	; 0x44
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 8016468:	900f      	str	r0, [sp, #60]	; 0x3c
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 801646a:	9824      	ldr	r0, [sp, #144]	; 0x90
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 801646c:	0d6d      	lsrs	r5, r5, #21
 801646e:	ea45 25cc 	orr.w	r5, r5, ip, lsl #11
    carry = t[18] >> 21; t[19] += carry; t[18] &= MASK_21;
 8016472:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 8016476:	1940      	adds	r0, r0, r5
 8016478:	ea4f 5c6c 	mov.w	ip, ip, asr #21
 801647c:	9006      	str	r0, [sp, #24]
 801647e:	f14c 0000 	adc.w	r0, ip, #0
 8016482:	900c      	str	r0, [sp, #48]	; 0x30
    carry = t[20] >> 21; t[21] += carry; t[20] &= MASK_21;
 8016484:	9826      	ldr	r0, [sp, #152]	; 0x98
 8016486:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[19] >> 21; t[20] += carry; t[19] &= MASK_21;
 801648a:	0d58      	lsrs	r0, r3, #21
 801648c:	ea40 20ca 	orr.w	r0, r0, sl, lsl #11
 8016490:	1828      	adds	r0, r5, r0
 8016492:	ea4f 5a6a 	mov.w	sl, sl, asr #21
 8016496:	9007      	str	r0, [sp, #28]
 8016498:	f14a 0000 	adc.w	r0, sl, #0
 801649c:	900d      	str	r0, [sp, #52]	; 0x34
    carry = t[22] >> 21; t[23] += carry; t[22] &= MASK_21;
 801649e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80164a0:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[21] >> 21; t[22] += carry; t[21] &= MASK_21;
 80164a4:	0d48      	lsrs	r0, r1, #21
 80164a6:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 80164aa:	1828      	adds	r0, r5, r0
 80164ac:	ea4f 5464 	mov.w	r4, r4, asr #21
 80164b0:	9008      	str	r0, [sp, #32]
 80164b2:	f144 0000 	adc.w	r0, r4, #0
 80164b6:	900e      	str	r0, [sp, #56]	; 0x38
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80164b8:	9822      	ldr	r0, [sp, #136]	; 0x88
    t[16] -= t[23] * ORDER_5;
 80164ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 80164bc:	f3c0 0714 	ubfx	r7, r0, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80164c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80164c2:	0d40      	lsrs	r0, r0, #21
 80164c4:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
 80164c8:	183f      	adds	r7, r7, r0
    t[16] -= t[23] * ORDER_5;
 80164ca:	9805      	ldr	r0, [sp, #20]
 80164cc:	f1c0 0000 	rsb	r0, r0, #0
 80164d0:	9009      	str	r0, [sp, #36]	; 0x24
 80164d2:	fb0b 0504 	mla	r5, fp, r4, r0
 80164d6:	9805      	ldr	r0, [sp, #20]
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80164d8:	ea4f 5262 	mov.w	r2, r2, asr #21
    t[16] -= t[23] * ORDER_5;
 80164dc:	fba0 040b 	umull	r0, r4, r0, fp
 80164e0:	4425      	add	r5, r4
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80164e2:	f142 0200 	adc.w	r2, r2, #0
    t[16] -= t[23] * ORDER_5;
 80164e6:	1838      	adds	r0, r7, r0
 80164e8:	eb45 0202 	adc.w	r2, r5, r2
 80164ec:	9012      	str	r0, [sp, #72]	; 0x48
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80164ee:	981e      	ldr	r0, [sp, #120]	; 0x78
    t[16] -= t[23] * ORDER_5;
 80164f0:	9213      	str	r2, [sp, #76]	; 0x4c
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 80164f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    t[14] -= t[23] * ORDER_3;
 80164f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    t[14] -= t[22] * ORDER_4;
 80164f6:	4f1f      	ldr	r7, [pc, #124]	; (8016574 <sc_muladd+0x950>)
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80164f8:	ea4f 5850 	mov.w	r8, r0, lsr #21
 80164fc:	ea48 28c6 	orr.w	r8, r8, r6, lsl #11
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8016500:	f3c2 0214 	ubfx	r2, r2, #0, #21
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8016504:	1575      	asrs	r5, r6, #21
 8016506:	eb12 0208 	adds.w	r2, r2, r8
 801650a:	f145 0000 	adc.w	r0, r5, #0
    t[14] -= t[23] * ORDER_3;
 801650e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8016578 <sc_muladd+0x954>
 8016512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016514:	fb08 4605 	mla	r6, r8, r5, r4
 8016518:	9c05      	ldr	r4, [sp, #20]
 801651a:	fba4 4508 	umull	r4, r5, r4, r8
 801651e:	1912      	adds	r2, r2, r4
 8016520:	4435      	add	r5, r6
 8016522:	eb45 0500 	adc.w	r5, r5, r0
    t[14] -= t[22] * ORDER_4;
 8016526:	9808      	ldr	r0, [sp, #32]
 8016528:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801652a:	4240      	negs	r0, r0
 801652c:	fb07 0604 	mla	r6, r7, r4, r0
 8016530:	900a      	str	r0, [sp, #40]	; 0x28
 8016532:	9808      	ldr	r0, [sp, #32]
    carry = t[21] >> 21; t[22] += carry; t[21] &= MASK_21;
 8016534:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[14] -= t[22] * ORDER_4;
 8016538:	fba0 0407 	umull	r0, r4, r0, r7
 801653c:	1810      	adds	r0, r2, r0
 801653e:	4426      	add	r6, r4
    t[14] -= t[21] * ORDER_5;
 8016540:	fba1 2c0b 	umull	r2, ip, r1, fp
    t[14] -= t[22] * ORDER_4;
 8016544:	eb46 0605 	adc.w	r6, r6, r5
    t[14] -= t[21] * ORDER_5;
 8016548:	ebac 0c01 	sub.w	ip, ip, r1
 801654c:	1882      	adds	r2, r0, r2
 801654e:	9214      	str	r2, [sp, #80]	; 0x50
 8016550:	eb4c 0206 	adc.w	r2, ip, r6
 8016554:	9215      	str	r2, [sp, #84]	; 0x54
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8016556:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    t[12] -= t[23] * ORDER_1;
 8016558:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801655a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 801655c:	f3c2 0014 	ubfx	r0, r2, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016560:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8016562:	0d52      	lsrs	r2, r2, #21
 8016564:	ea42 22ce 	orr.w	r2, r2, lr, lsl #11
 8016568:	1880      	adds	r0, r0, r2
 801656a:	e007      	b.n	801657c <sc_muladd+0x958>
 801656c:	fff59084 	.word	0xfff59084
 8016570:	ffe9fb68 	.word	0xffe9fb68
 8016574:	ffe215d1 	.word	0xffe215d1
 8016578:	fff0c654 	.word	0xfff0c654
    t[12] -= t[23] * ORDER_1;
 801657c:	4ad1      	ldr	r2, [pc, #836]	; (80168c4 <sc_muladd+0xca0>)
 801657e:	fb02 5606 	mla	r6, r2, r6, r5
 8016582:	9d05      	ldr	r5, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016584:	ea4f 5c6e 	mov.w	ip, lr, asr #21
 8016588:	f14c 0400 	adc.w	r4, ip, #0
    t[12] -= t[23] * ORDER_1;
 801658c:	fba5 5c02 	umull	r5, ip, r5, r2
 8016590:	1940      	adds	r0, r0, r5
 8016592:	44b4      	add	ip, r6
    t[12] -= t[22] * ORDER_2;
 8016594:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    t[12] -= t[23] * ORDER_1;
 8016596:	eb4c 0c04 	adc.w	ip, ip, r4
    t[12] -= t[22] * ORDER_2;
 801659a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801659c:	fb09 4605 	mla	r6, r9, r5, r4
 80165a0:	9c08      	ldr	r4, [sp, #32]
 80165a2:	fba4 4509 	umull	r4, r5, r4, r9
 80165a6:	1900      	adds	r0, r0, r4
 80165a8:	442e      	add	r6, r5
    t[12] -= t[20] * ORDER_4;
 80165aa:	9c07      	ldr	r4, [sp, #28]
    t[12] -= t[21] * ORDER_3;
 80165ac:	fba1 5a08 	umull	r5, sl, r1, r8
    t[12] -= t[22] * ORDER_2;
 80165b0:	eb46 060c 	adc.w	r6, r6, ip
    t[12] -= t[21] * ORDER_3;
 80165b4:	1940      	adds	r0, r0, r5
    t[12] -= t[20] * ORDER_4;
 80165b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    t[12] -= t[21] * ORDER_3;
 80165b8:	ebaa 0a01 	sub.w	sl, sl, r1
    t[12] -= t[20] * ORDER_4;
 80165bc:	f1c4 0400 	rsb	r4, r4, #0
    t[12] -= t[21] * ORDER_3;
 80165c0:	eb4a 0606 	adc.w	r6, sl, r6
    t[12] -= t[20] * ORDER_4;
 80165c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80165c6:	fb07 4a05 	mla	sl, r7, r5, r4
 80165ca:	9c07      	ldr	r4, [sp, #28]
    carry = t[19] >> 21; t[20] += carry; t[19] &= MASK_21;
 80165cc:	f3c3 0314 	ubfx	r3, r3, #0, #21
    t[12] -= t[20] * ORDER_4;
 80165d0:	fba4 5407 	umull	r5, r4, r4, r7
 80165d4:	1945      	adds	r5, r0, r5
 80165d6:	44a2      	add	sl, r4
    t[12] -= t[19] * ORDER_5;
 80165d8:	fba3 0c0b 	umull	r0, ip, r3, fp
    t[12] -= t[20] * ORDER_4;
 80165dc:	eb4a 0a06 	adc.w	sl, sl, r6
    t[12] -= t[19] * ORDER_5;
 80165e0:	ebac 0c03 	sub.w	ip, ip, r3
 80165e4:	1828      	adds	r0, r5, r0
 80165e6:	9016      	str	r0, [sp, #88]	; 0x58
 80165e8:	eb4c 000a 	adc.w	r0, ip, sl
 80165ec:	901f      	str	r0, [sp, #124]	; 0x7c
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80165ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80165f0:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    t[ 6] -= t[18] * ORDER_0;
 80165f2:	4eb5      	ldr	r6, [pc, #724]	; (80168c8 <sc_muladd+0xca4>)
 80165f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 80165f6:	f3c0 0e14 	ubfx	lr, r0, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 80165fa:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80165fc:	0d40      	lsrs	r0, r0, #21
 80165fe:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 8016602:	ea4f 5c64 	mov.w	ip, r4, asr #21
    t[ 6] -= t[18] * ORDER_0;
 8016606:	9c06      	ldr	r4, [sp, #24]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016608:	eb1e 0e00 	adds.w	lr, lr, r0
    t[ 6] -= t[18] * ORDER_0;
 801660c:	f1c4 0400 	rsb	r4, r4, #0
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016610:	f14c 0000 	adc.w	r0, ip, #0
    t[ 6] -= t[18] * ORDER_0;
 8016614:	fb06 4c05 	mla	ip, r6, r5, r4
 8016618:	9d06      	ldr	r5, [sp, #24]
 801661a:	fba5 a506 	umull	sl, r5, r5, r6
 801661e:	44ac      	add	ip, r5
 8016620:	eb1e 050a 	adds.w	r5, lr, sl
 8016624:	eb4c 0c00 	adc.w	ip, ip, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016628:	981c      	ldr	r0, [sp, #112]	; 0x70
    t[ 6] -= t[18] * ORDER_0;
 801662a:	951b      	str	r5, [sp, #108]	; 0x6c
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 801662c:	f3c0 0514 	ubfx	r5, r0, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016630:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8016632:	f8dd e0c0 	ldr.w	lr, [sp, #192]	; 0xc0
 8016636:	0d40      	lsrs	r0, r0, #21
 8016638:	ea40 20ce 	orr.w	r0, r0, lr, lsl #11
 801663c:	182d      	adds	r5, r5, r0
 801663e:	ea4f 5a6e 	mov.w	sl, lr, asr #21
    t[ 8] -= t[20] * ORDER_0;
 8016642:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016644:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8016648:	fb06 0b0e 	mla	fp, r6, lr, r0
 801664c:	9807      	ldr	r0, [sp, #28]
 801664e:	fba0 0e06 	umull	r0, lr, r0, r6
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016652:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 8] -= t[20] * ORDER_0;
 8016656:	44de      	add	lr, fp
 8016658:	1828      	adds	r0, r5, r0
 801665a:	eb4e 0e0a 	adc.w	lr, lr, sl
    t[ 8] -= t[19] * ORDER_1;
 801665e:	fba3 a502 	umull	sl, r5, r3, r2
 8016662:	eb10 000a 	adds.w	r0, r0, sl
 8016666:	eba5 0503 	sub.w	r5, r5, r3
 801666a:	eb45 050e 	adc.w	r5, r5, lr
    t[ 8] -= t[18] * ORDER_2;
 801666e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016672:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8016676:	fbaa ab09 	umull	sl, fp, sl, r9
 801667a:	fb09 4e0e 	mla	lr, r9, lr, r4
 801667e:	eb10 000a 	adds.w	r0, r0, sl
 8016682:	44de      	add	lr, fp
 8016684:	901c      	str	r0, [sp, #112]	; 0x70
 8016686:	eb4e 0005 	adc.w	r0, lr, r5
 801668a:	9020      	str	r0, [sp, #128]	; 0x80
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801668c:	981d      	ldr	r0, [sp, #116]	; 0x74
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801668e:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8016690:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
    t[10] -= t[20] * ORDER_2;
 8016694:	f8cd 900c 	str.w	r9, [sp, #12]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016698:	0d6d      	lsrs	r5, r5, #21
 801669a:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801669e:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 80166a2:	1940      	adds	r0, r0, r5
 80166a4:	ea4f 5b6e 	mov.w	fp, lr, asr #21
    t[10] -= t[22] * ORDER_0;
 80166a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80166aa:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    t[10] -= t[18] * ORDER_4;
 80166ae:	9702      	str	r7, [sp, #8]
    t[10] -= t[22] * ORDER_0;
 80166b0:	fb06 5e0e 	mla	lr, r6, lr, r5
 80166b4:	9d08      	ldr	r5, [sp, #32]
    t[10] -= t[18] * ORDER_4;
 80166b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    t[10] -= t[19] * ORDER_3;
 80166b8:	f8cd 8004 	str.w	r8, [sp, #4]
    t[10] -= t[22] * ORDER_0;
 80166bc:	fba5 5a06 	umull	r5, sl, r5, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 80166c0:	f14b 0b00 	adc.w	fp, fp, #0
    t[10] -= t[22] * ORDER_0;
 80166c4:	44d6      	add	lr, sl
 80166c6:	1940      	adds	r0, r0, r5
 80166c8:	eb4e 0e0b 	adc.w	lr, lr, fp
    t[10] -= t[21] * ORDER_1;
 80166cc:	fba1 ab02 	umull	sl, fp, r1, r2
    t[10] -= t[20] * ORDER_2;
 80166d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t[ 7] -= t[19] * ORDER_0;
 80166d2:	9604      	str	r6, [sp, #16]
    t[10] -= t[21] * ORDER_1;
 80166d4:	eb10 000a 	adds.w	r0, r0, sl
    t[10] -= t[20] * ORDER_2;
 80166d8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80166dc:	fb09 5a0a 	mla	sl, r9, sl, r5
 80166e0:	9d07      	ldr	r5, [sp, #28]
    t[10] -= t[21] * ORDER_1;
 80166e2:	ebab 0b01 	sub.w	fp, fp, r1
    t[10] -= t[20] * ORDER_2;
 80166e6:	fba5 5909 	umull	r5, r9, r5, r9
    t[10] -= t[21] * ORDER_1;
 80166ea:	eb4b 0e0e 	adc.w	lr, fp, lr
    t[10] -= t[20] * ORDER_2;
 80166ee:	44d1      	add	r9, sl
 80166f0:	1940      	adds	r0, r0, r5
 80166f2:	eb49 090e 	adc.w	r9, r9, lr
    t[10] -= t[19] * ORDER_3;
 80166f6:	fba3 e508 	umull	lr, r5, r3, r8
 80166fa:	eb10 000e 	adds.w	r0, r0, lr
    t[10] -= t[18] * ORDER_4;
 80166fe:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80168cc <sc_muladd+0xca8>
 8016702:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80168cc <sc_muladd+0xca8>
 8016706:	fb0e 4707 	mla	r7, lr, r7, r4
 801670a:	f8dd e018 	ldr.w	lr, [sp, #24]
    t[10] -= t[19] * ORDER_3;
 801670e:	eba5 0503 	sub.w	r5, r5, r3
    t[10] -= t[18] * ORDER_4;
 8016712:	fbae e808 	umull	lr, r8, lr, r8
    t[10] -= t[19] * ORDER_3;
 8016716:	eb45 0509 	adc.w	r5, r5, r9
    t[10] -= t[18] * ORDER_4;
 801671a:	eb10 000e 	adds.w	r0, r0, lr
 801671e:	901d      	str	r0, [sp, #116]	; 0x74
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016720:	982f      	ldr	r0, [sp, #188]	; 0xbc
    t[10] -= t[18] * ORDER_4;
 8016722:	4447      	add	r7, r8
 8016724:	eb47 0805 	adc.w	r8, r7, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016728:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[ 7] -= t[19] * ORDER_0;
 801672c:	fba3 6706 	umull	r6, r7, r3, r6
 8016730:	1986      	adds	r6, r0, r6
    t[ 7] -= t[18] * ORDER_1;
 8016732:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016734:	fb02 4500 	mla	r5, r2, r0, r4
 8016738:	9806      	ldr	r0, [sp, #24]
    t[ 7] -= t[19] * ORDER_0;
 801673a:	eba7 0703 	sub.w	r7, r7, r3
    t[ 7] -= t[18] * ORDER_1;
 801673e:	fba0 0e02 	umull	r0, lr, r0, r2
    t[ 7] -= t[19] * ORDER_0;
 8016742:	f147 0700 	adc.w	r7, r7, #0
    t[ 7] -= t[18] * ORDER_1;
 8016746:	1830      	adds	r0, r6, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016748:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801674a:	ea4f 5656 	mov.w	r6, r6, lsr #21
 801674e:	ea46 26cc 	orr.w	r6, r6, ip, lsl #11
    t[ 7] -= t[18] * ORDER_1;
 8016752:	4475      	add	r5, lr
 8016754:	eb45 0507 	adc.w	r5, r5, r7
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016758:	1980      	adds	r0, r0, r6
 801675a:	9021      	str	r0, [sp, #132]	; 0x84
 801675c:	eb45 506c 	adc.w	r0, r5, ip, asr #21
 8016760:	9022      	str	r0, [sp, #136]	; 0x88
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016762:	9831      	ldr	r0, [sp, #196]	; 0xc4
    t[ 9] -= t[20] * ORDER_1;
 8016764:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016766:	f3c0 0514 	ubfx	r5, r0, #0, #21
    t[ 9] -= t[21] * ORDER_0;
 801676a:	9804      	ldr	r0, [sp, #16]
 801676c:	fba1 0c00 	umull	r0, ip, r1, r0
 8016770:	182d      	adds	r5, r5, r0
    t[ 9] -= t[20] * ORDER_1;
 8016772:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016774:	fb02 0706 	mla	r7, r2, r6, r0
 8016778:	9807      	ldr	r0, [sp, #28]
    t[ 9] -= t[21] * ORDER_0;
 801677a:	ebac 0c01 	sub.w	ip, ip, r1
    t[ 9] -= t[20] * ORDER_1;
 801677e:	fba0 0602 	umull	r0, r6, r0, r2
    t[ 9] -= t[21] * ORDER_0;
 8016782:	f14c 0c00 	adc.w	ip, ip, #0
    t[ 9] -= t[20] * ORDER_1;
 8016786:	1828      	adds	r0, r5, r0
    t[ 9] -= t[19] * ORDER_2;
 8016788:	4d51      	ldr	r5, [pc, #324]	; (80168d0 <sc_muladd+0xcac>)
    t[ 9] -= t[20] * ORDER_1;
 801678a:	4437      	add	r7, r6
    t[ 9] -= t[19] * ORDER_2;
 801678c:	fba3 5e05 	umull	r5, lr, r3, r5
    t[ 9] -= t[20] * ORDER_1;
 8016790:	eb47 070c 	adc.w	r7, r7, ip
    t[ 9] -= t[18] * ORDER_3;
 8016794:	4e4f      	ldr	r6, [pc, #316]	; (80168d4 <sc_muladd+0xcb0>)
 8016796:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80168d4 <sc_muladd+0xcb0>
    t[ 9] -= t[19] * ORDER_2;
 801679a:	1940      	adds	r0, r0, r5
    t[ 9] -= t[18] * ORDER_3;
 801679c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801679e:	fb06 4505 	mla	r5, r6, r5, r4
 80167a2:	9e06      	ldr	r6, [sp, #24]
    t[ 9] -= t[19] * ORDER_2;
 80167a4:	ebae 0e03 	sub.w	lr, lr, r3
    t[ 9] -= t[18] * ORDER_3;
 80167a8:	fba6 6c0c 	umull	r6, ip, r6, ip
    t[ 9] -= t[19] * ORDER_2;
 80167ac:	eb4e 0707 	adc.w	r7, lr, r7
    t[ 9] -= t[18] * ORDER_3;
 80167b0:	4465      	add	r5, ip
 80167b2:	1980      	adds	r0, r0, r6
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80167b4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    t[ 9] -= t[18] * ORDER_3;
 80167b6:	eb45 0507 	adc.w	r5, r5, r7
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 80167ba:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80167bc:	0d76      	lsrs	r6, r6, #21
 80167be:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
 80167c2:	1980      	adds	r0, r0, r6
 80167c4:	9023      	str	r0, [sp, #140]	; 0x8c
 80167c6:	eb45 5067 	adc.w	r0, r5, r7, asr #21
 80167ca:	9020      	str	r0, [sp, #128]	; 0x80
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 80167cc:	9833      	ldr	r0, [sp, #204]	; 0xcc
    t[11] -= t[23] * ORDER_0;
 80167ce:	9f04      	ldr	r7, [sp, #16]
 80167d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 80167d2:	f3c0 0514 	ubfx	r5, r0, #0, #21
    t[11] -= t[23] * ORDER_0;
 80167d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167d8:	fb07 0c06 	mla	ip, r7, r6, r0
 80167dc:	9805      	ldr	r0, [sp, #20]
 80167de:	fba0 0607 	umull	r0, r6, r0, r7
 80167e2:	182d      	adds	r5, r5, r0
 80167e4:	eb4c 0c06 	adc.w	ip, ip, r6
    t[11] -= t[22] * ORDER_1;
 80167e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167ea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80167ec:	fb02 0706 	mla	r7, r2, r6, r0
 80167f0:	9808      	ldr	r0, [sp, #32]
 80167f2:	fba0 0602 	umull	r0, r6, r0, r2
 80167f6:	1828      	adds	r0, r5, r0
    t[11] -= t[21] * ORDER_2;
 80167f8:	4d35      	ldr	r5, [pc, #212]	; (80168d0 <sc_muladd+0xcac>)
    t[11] -= t[22] * ORDER_1;
 80167fa:	4437      	add	r7, r6
    t[11] -= t[21] * ORDER_2;
 80167fc:	fba1 5e05 	umull	r5, lr, r1, r5
    t[11] -= t[20] * ORDER_3;
 8016800:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    t[11] -= t[22] * ORDER_1;
 8016802:	eb47 070c 	adc.w	r7, r7, ip
    t[11] -= t[21] * ORDER_2;
 8016806:	1940      	adds	r0, r0, r5
    t[11] -= t[20] * ORDER_3;
 8016808:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80168d4 <sc_muladd+0xcb0>
 801680c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801680e:	fb0c 5c06 	mla	ip, ip, r6, r5
 8016812:	9d07      	ldr	r5, [sp, #28]
 8016814:	4e2f      	ldr	r6, [pc, #188]	; (80168d4 <sc_muladd+0xcb0>)
    t[11] -= t[21] * ORDER_2;
 8016816:	ebae 0e01 	sub.w	lr, lr, r1
    t[11] -= t[20] * ORDER_3;
 801681a:	fba5 5606 	umull	r5, r6, r5, r6
    t[11] -= t[21] * ORDER_2;
 801681e:	eb4e 0707 	adc.w	r7, lr, r7
    t[11] -= t[20] * ORDER_3;
 8016822:	1940      	adds	r0, r0, r5
    t[11] -= t[19] * ORDER_4;
 8016824:	4d29      	ldr	r5, [pc, #164]	; (80168cc <sc_muladd+0xca8>)
    t[11] -= t[20] * ORDER_3;
 8016826:	4466      	add	r6, ip
    t[11] -= t[19] * ORDER_4;
 8016828:	fba3 e505 	umull	lr, r5, r3, r5
    t[11] -= t[20] * ORDER_3;
 801682c:	eb46 0607 	adc.w	r6, r6, r7
    t[11] -= t[19] * ORDER_4;
 8016830:	1aeb      	subs	r3, r5, r3
 8016832:	eb10 000e 	adds.w	r0, r0, lr
    t[11] -= t[18] * ORDER_5;
 8016836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t[13] -= t[22] * ORDER_3;
 8016838:	f8df c098 	ldr.w	ip, [pc, #152]	; 80168d4 <sc_muladd+0xcb0>
    t[11] -= t[19] * ORDER_4;
 801683c:	eb43 0606 	adc.w	r6, r3, r6
    t[11] -= t[18] * ORDER_5;
 8016840:	4b25      	ldr	r3, [pc, #148]	; (80168d8 <sc_muladd+0xcb4>)
 8016842:	fb03 4405 	mla	r4, r3, r5, r4
 8016846:	9d06      	ldr	r5, [sp, #24]
 8016848:	fba5 e703 	umull	lr, r7, r5, r3
 801684c:	eb10 000e 	adds.w	r0, r0, lr
 8016850:	443c      	add	r4, r7
 8016852:	eb44 0706 	adc.w	r7, r4, r6
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016856:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    t[13] -= t[23] * ORDER_2;
 8016858:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801685a:	4e1d      	ldr	r6, [pc, #116]	; (80168d0 <sc_muladd+0xcac>)
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801685c:	ea4f 5e54 	mov.w	lr, r4, lsr #21
 8016860:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
    t[13] -= t[23] * ORDER_2;
 8016864:	9c09      	ldr	r4, [sp, #36]	; 0x24
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016866:	eb10 000e 	adds.w	r0, r0, lr
 801686a:	9024      	str	r0, [sp, #144]	; 0x90
    t[13] -= t[23] * ORDER_2;
 801686c:	fb06 4605 	mla	r6, r6, r5, r4
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8016870:	981e      	ldr	r0, [sp, #120]	; 0x78
    t[13] -= t[23] * ORDER_2;
 8016872:	9c05      	ldr	r4, [sp, #20]
 8016874:	4d16      	ldr	r5, [pc, #88]	; (80168d0 <sc_muladd+0xcac>)
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8016876:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[13] -= t[23] * ORDER_2;
 801687a:	fba4 5405 	umull	r5, r4, r4, r5
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 801687e:	eb47 5768 	adc.w	r7, r7, r8, asr #21
    t[13] -= t[23] * ORDER_2;
 8016882:	1940      	adds	r0, r0, r5
 8016884:	eb46 0604 	adc.w	r6, r6, r4
    t[13] -= t[22] * ORDER_3;
 8016888:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801688a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801688c:	fb0c 4c05 	mla	ip, ip, r5, r4
 8016890:	9c08      	ldr	r4, [sp, #32]
 8016892:	4d10      	ldr	r5, [pc, #64]	; (80168d4 <sc_muladd+0xcb0>)
 8016894:	fba4 4505 	umull	r4, r5, r4, r5
 8016898:	1900      	adds	r0, r0, r4
    t[13] -= t[21] * ORDER_4;
 801689a:	4c0c      	ldr	r4, [pc, #48]	; (80168cc <sc_muladd+0xca8>)
    t[13] -= t[22] * ORDER_3;
 801689c:	4465      	add	r5, ip
    t[13] -= t[21] * ORDER_4;
 801689e:	fba1 e404 	umull	lr, r4, r1, r4
    t[13] -= t[22] * ORDER_3;
 80168a2:	eb45 0506 	adc.w	r5, r5, r6
    t[13] -= t[21] * ORDER_4;
 80168a6:	1a61      	subs	r1, r4, r1
 80168a8:	eb10 000e 	adds.w	r0, r0, lr
    t[13] -= t[20] * ORDER_5;
 80168ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    t[15] -= t[23] * ORDER_4;
 80168ae:	4e07      	ldr	r6, [pc, #28]	; (80168cc <sc_muladd+0xca8>)
    t[13] -= t[21] * ORDER_4;
 80168b0:	eb41 0505 	adc.w	r5, r1, r5
    t[13] -= t[20] * ORDER_5;
 80168b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168b6:	fb03 1a04 	mla	sl, r3, r4, r1
 80168ba:	9907      	ldr	r1, [sp, #28]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80168bc:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    t[13] -= t[20] * ORDER_5;
 80168be:	fba1 e103 	umull	lr, r1, r1, r3
 80168c2:	e00b      	b.n	80168dc <sc_muladd+0xcb8>
 80168c4:	ffe72d19 	.word	0xffe72d19
 80168c8:	ffea2c13 	.word	0xffea2c13
 80168cc:	ffe215d1 	.word	0xffe215d1
 80168d0:	ffe9fb68 	.word	0xffe9fb68
 80168d4:	fff0c654 	.word	0xfff0c654
 80168d8:	fff59084 	.word	0xfff59084
 80168dc:	448a      	add	sl, r1
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80168de:	9916      	ldr	r1, [sp, #88]	; 0x58
 80168e0:	0d49      	lsrs	r1, r1, #21
    t[13] -= t[20] * ORDER_5;
 80168e2:	eb10 000e 	adds.w	r0, r0, lr
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80168e6:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
    t[13] -= t[20] * ORDER_5;
 80168ea:	eb4a 0a05 	adc.w	sl, sl, r5
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80168ee:	1840      	adds	r0, r0, r1
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80168f0:	9910      	ldr	r1, [sp, #64]	; 0x40
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 80168f2:	eb4a 5a64 	adc.w	sl, sl, r4, asr #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80168f6:	f3c1 0514 	ubfx	r5, r1, #0, #21
    t[15] -= t[23] * ORDER_4;
 80168fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80168fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168fe:	fb06 1404 	mla	r4, r6, r4, r1
 8016902:	9905      	ldr	r1, [sp, #20]
 8016904:	fba1 1606 	umull	r1, r6, r1, r6
 8016908:	1869      	adds	r1, r5, r1
 801690a:	eb44 0606 	adc.w	r6, r4, r6
    t[15] -= t[22] * ORDER_5;
 801690e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016910:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016912:	fb03 4405 	mla	r4, r3, r5, r4
 8016916:	9d08      	ldr	r5, [sp, #32]
 8016918:	fba5 5c03 	umull	r5, ip, r5, r3
 801691c:	4464      	add	r4, ip
 801691e:	1949      	adds	r1, r1, r5
 8016920:	eb44 0606 	adc.w	r6, r4, r6
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8016924:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016926:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016928:	0d64      	lsrs	r4, r4, #21
 801692a:	ea44 24c5 	orr.w	r4, r4, r5, lsl #11
 801692e:	1909      	adds	r1, r1, r4
 8016930:	eb46 5665 	adc.w	r6, r6, r5, asr #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8016934:	9d12      	ldr	r5, [sp, #72]	; 0x48
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 8016936:	9c11      	ldr	r4, [sp, #68]	; 0x44
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8016938:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 801693c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    carry = t[17] >> 21; t[18] += carry; t[17] &= MASK_21;
 801693e:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8016942:	ea4c 2cc5 	orr.w	ip, ip, r5, lsl #11
 8016946:	eb14 040c 	adds.w	r4, r4, ip
 801694a:	ea4f 5565 	mov.w	r5, r5, asr #21
 801694e:	9405      	str	r4, [sp, #20]
 8016950:	f145 0400 	adc.w	r4, r5, #0
 8016954:	9409      	str	r4, [sp, #36]	; 0x24
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 8016956:	9c16      	ldr	r4, [sp, #88]	; 0x58
    t[ 0] -= t[12] * ORDER_0;
 8016958:	f8dd c010 	ldr.w	ip, [sp, #16]
    carry = t[12] >> 21; t[13] += carry; t[12] &= MASK_21;
 801695c:	f3c4 0514 	ubfx	r5, r4, #0, #21
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016960:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8016962:	0d64      	lsrs	r4, r4, #21
 8016964:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
 8016968:	192d      	adds	r5, r5, r4
 801696a:	ea4f 5767 	mov.w	r7, r7, asr #21
 801696e:	f147 0400 	adc.w	r4, r7, #0
 8016972:	940a      	str	r4, [sp, #40]	; 0x28
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 8016974:	9c14      	ldr	r4, [sp, #80]	; 0x50
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8016976:	ea4f 5950 	mov.w	r9, r0, lsr #21
 801697a:	ea49 29ca 	orr.w	r9, r9, sl, lsl #11
    carry = t[14] >> 21; t[15] += carry; t[14] &= MASK_21;
 801697e:	f3c4 0814 	ubfx	r8, r4, #0, #21
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 8016982:	eb18 0409 	adds.w	r4, r8, r9
 8016986:	ea4f 5a6a 	mov.w	sl, sl, asr #21
 801698a:	9406      	str	r4, [sp, #24]
 801698c:	f14a 0400 	adc.w	r4, sl, #0
 8016990:	940b      	str	r4, [sp, #44]	; 0x2c
    carry = t[16] >> 21; t[17] += carry; t[16] &= MASK_21;
 8016992:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016994:	f3c4 0714 	ubfx	r7, r4, #0, #21
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8016998:	0d4c      	lsrs	r4, r1, #21
 801699a:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
 801699e:	193c      	adds	r4, r7, r4
 80169a0:	ea4f 5666 	mov.w	r6, r6, asr #21
 80169a4:	9407      	str	r4, [sp, #28]
 80169a6:	f146 0400 	adc.w	r4, r6, #0
    t[ 0] -= t[12] * ORDER_0;
 80169aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 80169ac:	940c      	str	r4, [sp, #48]	; 0x30
    t[ 0] -= t[12] * ORDER_0;
 80169ae:	426f      	negs	r7, r5
 80169b0:	fb0c 7c06 	mla	ip, ip, r6, r7
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80169b4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    t[ 0] -= t[12] * ORDER_0;
 80169b6:	9e04      	ldr	r6, [sp, #16]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80169b8:	f3c4 0414 	ubfx	r4, r4, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 80169bc:	fba5 9606 	umull	r9, r6, r5, r6
 80169c0:	eb14 0409 	adds.w	r4, r4, r9
 80169c4:	eb4c 0806 	adc.w	r8, ip, r6
    t[ 1] -= t[13] * ORDER_0;
 80169c8:	9e04      	ldr	r6, [sp, #16]
    t[ 0] -= t[12] * ORDER_0;
 80169ca:	940d      	str	r4, [sp, #52]	; 0x34
    carry = t[13] >> 21; t[14] += carry; t[13] &= MASK_21;
 80169cc:	f3c0 0014 	ubfx	r0, r0, #0, #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 80169d0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80169d2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    t[ 1] -= t[13] * ORDER_0;
 80169d6:	fba0 eb06 	umull	lr, fp, r0, r6
    t[ 1] -= t[12] * ORDER_1;
 80169da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 80169dc:	f3c4 0414 	ubfx	r4, r4, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 80169e0:	fb02 7a06 	mla	sl, r2, r6, r7
    t[ 1] -= t[13] * ORDER_0;
 80169e4:	eb14 040e 	adds.w	r4, r4, lr
    t[ 1] -= t[12] * ORDER_1;
 80169e8:	fba5 9602 	umull	r9, r6, r5, r2
    t[ 1] -= t[13] * ORDER_0;
 80169ec:	ebab 0b00 	sub.w	fp, fp, r0
 80169f0:	f14b 0b00 	adc.w	fp, fp, #0
    t[ 1] -= t[12] * ORDER_1;
 80169f4:	eb14 0409 	adds.w	r4, r4, r9
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 80169f8:	ea4f 595c 	mov.w	r9, ip, lsr #21
 80169fc:	ea49 29c8 	orr.w	r9, r9, r8, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 8016a00:	4456      	add	r6, sl
 8016a02:	eb46 060b 	adc.w	r6, r6, fp
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016a06:	eb14 0409 	adds.w	r4, r4, r9
 8016a0a:	940e      	str	r4, [sp, #56]	; 0x38
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016a0c:	9c19      	ldr	r4, [sp, #100]	; 0x64
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a0e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016a12:	eb46 5c68 	adc.w	ip, r6, r8, asr #21
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016a16:	f3c4 0614 	ubfx	r6, r4, #0, #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a1a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8016a1c:	0d64      	lsrs	r4, r4, #21
 8016a1e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
 8016a22:	1936      	adds	r6, r6, r4
    t[ 2] -= t[14] * ORDER_0;
 8016a24:	9c06      	ldr	r4, [sp, #24]
 8016a26:	f1c4 0400 	rsb	r4, r4, #0
 8016a2a:	9408      	str	r4, [sp, #32]
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a2c:	ea4f 596e 	mov.w	r9, lr, asr #21
    t[ 2] -= t[14] * ORDER_0;
 8016a30:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016a34:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8016a38:	fb08 480e 	mla	r8, r8, lr, r4
 8016a3c:	9c06      	ldr	r4, [sp, #24]
 8016a3e:	f8dd e010 	ldr.w	lr, [sp, #16]
 8016a42:	fba4 4e0e 	umull	r4, lr, r4, lr
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a46:	f149 0900 	adc.w	r9, r9, #0
    t[ 2] -= t[14] * ORDER_0;
 8016a4a:	44f0      	add	r8, lr
 8016a4c:	1934      	adds	r4, r6, r4
 8016a4e:	eb48 0809 	adc.w	r8, r8, r9
    t[ 2] -= t[12] * ORDER_2;
 8016a52:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016a54:	f8df e388 	ldr.w	lr, [pc, #904]	; 8016de0 <sc_muladd+0x11bc>
    t[ 2] -= t[13] * ORDER_1;
 8016a58:	fba0 9a02 	umull	r9, sl, r0, r2
 8016a5c:	ebaa 0a00 	sub.w	sl, sl, r0
 8016a60:	eb14 0409 	adds.w	r4, r4, r9
 8016a64:	eb4a 0808 	adc.w	r8, sl, r8
    t[ 2] -= t[12] * ORDER_2;
 8016a68:	fb0e 7a06 	mla	sl, lr, r6, r7
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a6c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    t[ 2] -= t[12] * ORDER_2;
 8016a6e:	fba5 9e0e 	umull	r9, lr, r5, lr
 8016a72:	eb14 0409 	adds.w	r4, r4, r9
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a76:	ea4f 5956 	mov.w	r9, r6, lsr #21
 8016a7a:	ea49 29cc 	orr.w	r9, r9, ip, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 8016a7e:	44d6      	add	lr, sl
 8016a80:	eb4e 0e08 	adc.w	lr, lr, r8
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a84:	eb14 0409 	adds.w	r4, r4, r9
 8016a88:	940f      	str	r4, [sp, #60]	; 0x3c
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016a8a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016a8c:	eb4e 566c 	adc.w	r6, lr, ip, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016a90:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 3] -= t[15] * ORDER_0;
 8016a94:	9c04      	ldr	r4, [sp, #16]
    t[ 3] -= t[14] * ORDER_1;
 8016a96:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    carry = t[15] >> 21; t[16] += carry; t[15] &= MASK_21;
 8016a9a:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[ 3] -= t[15] * ORDER_0;
 8016a9e:	fba1 4804 	umull	r4, r8, r1, r4
 8016aa2:	eb1c 0c04 	adds.w	ip, ip, r4
    t[ 3] -= t[14] * ORDER_1;
 8016aa6:	9c08      	ldr	r4, [sp, #32]
 8016aa8:	fb02 4a0e 	mla	sl, r2, lr, r4
 8016aac:	9c06      	ldr	r4, [sp, #24]
    t[ 3] -= t[15] * ORDER_0;
 8016aae:	eba8 0801 	sub.w	r8, r8, r1
    t[ 3] -= t[14] * ORDER_1;
 8016ab2:	fba4 4e02 	umull	r4, lr, r4, r2
    t[ 3] -= t[15] * ORDER_0;
 8016ab6:	f148 0800 	adc.w	r8, r8, #0
    t[ 3] -= t[14] * ORDER_1;
 8016aba:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 3] -= t[13] * ORDER_2;
 8016abe:	f8df c320 	ldr.w	ip, [pc, #800]	; 8016de0 <sc_muladd+0x11bc>
    t[ 3] -= t[14] * ORDER_1;
 8016ac2:	44f2      	add	sl, lr
    t[ 3] -= t[13] * ORDER_2;
 8016ac4:	fba0 c90c 	umull	ip, r9, r0, ip
    t[ 3] -= t[12] * ORDER_3;
 8016ac8:	f8df e318 	ldr.w	lr, [pc, #792]	; 8016de4 <sc_muladd+0x11c0>
    t[ 3] -= t[14] * ORDER_1;
 8016acc:	eb4a 0a08 	adc.w	sl, sl, r8
    t[ 3] -= t[13] * ORDER_2;
 8016ad0:	eb14 040c 	adds.w	r4, r4, ip
    t[ 3] -= t[12] * ORDER_3;
 8016ad4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    t[ 3] -= t[13] * ORDER_2;
 8016ad8:	eba9 0900 	sub.w	r9, r9, r0
 8016adc:	eb49 0a0a 	adc.w	sl, r9, sl
    t[ 3] -= t[12] * ORDER_3;
 8016ae0:	fb0e 790c 	mla	r9, lr, ip, r7
 8016ae4:	fba5 c80e 	umull	ip, r8, r5, lr
 8016ae8:	eb14 040c 	adds.w	r4, r4, ip
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016aec:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8016af0:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 8016af4:	ea4c 2cc6 	orr.w	ip, ip, r6, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 8016af8:	44c8      	add	r8, r9
 8016afa:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016afe:	eb14 040c 	adds.w	r4, r4, ip
 8016b02:	9410      	str	r4, [sp, #64]	; 0x40
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016b04:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016b06:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016b0a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016b0c:	eb48 5e66 	adc.w	lr, r8, r6, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016b10:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    t[ 4] -= t[16] * ORDER_0;
 8016b12:	f8dd 8010 	ldr.w	r8, [sp, #16]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016b16:	0d64      	lsrs	r4, r4, #21
 8016b18:	ea44 24c6 	orr.w	r4, r4, r6, lsl #11
 8016b1c:	ea4f 5a66 	mov.w	sl, r6, asr #21
    t[ 4] -= t[16] * ORDER_0;
 8016b20:	9e07      	ldr	r6, [sp, #28]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016b22:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 4] -= t[16] * ORDER_0;
 8016b26:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8016b2a:	f1c6 0600 	rsb	r6, r6, #0
 8016b2e:	fb08 690c 	mla	r9, r8, ip, r6
 8016b32:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016b36:	fbac c808 	umull	ip, r8, ip, r8
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016b3a:	f14a 0a00 	adc.w	sl, sl, #0
    t[ 4] -= t[16] * ORDER_0;
 8016b3e:	44c1      	add	r9, r8
 8016b40:	eb14 0c0c 	adds.w	ip, r4, ip
    t[ 4] -= t[15] * ORDER_1;
 8016b44:	fba1 4b02 	umull	r4, fp, r1, r2
    t[ 4] -= t[14] * ORDER_2;
 8016b48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    t[ 4] -= t[16] * ORDER_0;
 8016b4c:	eb49 090a 	adc.w	r9, r9, sl
    t[ 4] -= t[15] * ORDER_1;
 8016b50:	eb1c 0c04 	adds.w	ip, ip, r4
    t[ 4] -= t[14] * ORDER_2;
 8016b54:	f8df a288 	ldr.w	sl, [pc, #648]	; 8016de0 <sc_muladd+0x11bc>
 8016b58:	9c08      	ldr	r4, [sp, #32]
 8016b5a:	fb0a 4a08 	mla	sl, sl, r8, r4
 8016b5e:	9c06      	ldr	r4, [sp, #24]
 8016b60:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8016de0 <sc_muladd+0x11bc>
    t[ 4] -= t[15] * ORDER_1;
 8016b64:	ebab 0b01 	sub.w	fp, fp, r1
    t[ 4] -= t[14] * ORDER_2;
 8016b68:	fba4 4808 	umull	r4, r8, r4, r8
    t[ 4] -= t[15] * ORDER_1;
 8016b6c:	eb4b 0909 	adc.w	r9, fp, r9
    t[ 4] -= t[14] * ORDER_2;
 8016b70:	eb1c 0404 	adds.w	r4, ip, r4
    t[ 4] -= t[13] * ORDER_3;
 8016b74:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8016de4 <sc_muladd+0x11c0>
    t[ 4] -= t[14] * ORDER_2;
 8016b78:	44c2      	add	sl, r8
    t[ 4] -= t[13] * ORDER_3;
 8016b7a:	fba0 cb0c 	umull	ip, fp, r0, ip
    t[ 4] -= t[14] * ORDER_2;
 8016b7e:	eb4a 0a09 	adc.w	sl, sl, r9
    t[ 4] -= t[12] * ORDER_4;
 8016b82:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8016de8 <sc_muladd+0x11c4>
    t[ 4] -= t[13] * ORDER_3;
 8016b86:	eb14 040c 	adds.w	r4, r4, ip
    t[ 4] -= t[12] * ORDER_4;
 8016b8a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    t[ 4] -= t[13] * ORDER_3;
 8016b8e:	ebab 0b00 	sub.w	fp, fp, r0
    t[ 4] -= t[12] * ORDER_4;
 8016b92:	fb08 790c 	mla	r9, r8, ip, r7
 8016b96:	fba5 c808 	umull	ip, r8, r5, r8
    t[ 4] -= t[13] * ORDER_3;
 8016b9a:	eb4b 0a0a 	adc.w	sl, fp, sl
    t[ 4] -= t[12] * ORDER_4;
 8016b9e:	eb14 040c 	adds.w	r4, r4, ip
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016ba2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8016ba6:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 8016baa:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
    t[ 4] -= t[12] * ORDER_4;
 8016bae:	44c8      	add	r8, r9
 8016bb0:	eb48 080a 	adc.w	r8, r8, sl
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016bb4:	eb14 040c 	adds.w	r4, r4, ip
 8016bb8:	9411      	str	r4, [sp, #68]	; 0x44
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016bba:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
    t[ 5] -= t[17] * ORDER_0;
 8016bbc:	f8dd 9010 	ldr.w	r9, [sp, #16]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016bc0:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 5] -= t[17] * ORDER_0;
 8016bc4:	9c05      	ldr	r4, [sp, #20]
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016bc6:	eb48 586e 	adc.w	r8, r8, lr, asr #21
    t[ 5] -= t[17] * ORDER_0;
 8016bca:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8016bce:	4264      	negs	r4, r4
 8016bd0:	fb09 4b0e 	mla	fp, r9, lr, r4
 8016bd4:	f8dd e014 	ldr.w	lr, [sp, #20]
 8016bd8:	fbae e909 	umull	lr, r9, lr, r9
 8016bdc:	eb1c 0c0e 	adds.w	ip, ip, lr
    t[ 5] -= t[16] * ORDER_1;
 8016be0:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8016be4:	fb02 6a0e 	mla	sl, r2, lr, r6
 8016be8:	f8dd e01c 	ldr.w	lr, [sp, #28]
    t[ 5] -= t[17] * ORDER_0;
 8016bec:	eb4b 0b09 	adc.w	fp, fp, r9
    t[ 5] -= t[16] * ORDER_1;
 8016bf0:	fbae e902 	umull	lr, r9, lr, r2
 8016bf4:	eb1c 0e0e 	adds.w	lr, ip, lr
    t[ 5] -= t[15] * ORDER_2;
 8016bf8:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8016de0 <sc_muladd+0x11bc>
    t[ 5] -= t[16] * ORDER_1;
 8016bfc:	44ca      	add	sl, r9
    t[ 5] -= t[15] * ORDER_2;
 8016bfe:	fba1 9c0c 	umull	r9, ip, r1, ip
    t[ 5] -= t[16] * ORDER_1;
 8016c02:	eb4a 0a0b 	adc.w	sl, sl, fp
    t[ 5] -= t[15] * ORDER_2;
 8016c06:	ebac 0c01 	sub.w	ip, ip, r1
 8016c0a:	eb1e 0e09 	adds.w	lr, lr, r9
 8016c0e:	eb4c 0a0a 	adc.w	sl, ip, sl
    t[ 5] -= t[14] * ORDER_3;
 8016c12:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8016c16:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016c1a:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8016de4 <sc_muladd+0x11c0>
 8016c1e:	fb0b cb09 	mla	fp, fp, r9, ip
 8016c22:	f8dd c018 	ldr.w	ip, [sp, #24]
 8016c26:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8016de4 <sc_muladd+0x11c0>
 8016c2a:	fbac c909 	umull	ip, r9, ip, r9
 8016c2e:	eb1e 0c0c 	adds.w	ip, lr, ip
    t[ 5] -= t[13] * ORDER_4;
 8016c32:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8016de8 <sc_muladd+0x11c4>
    t[ 5] -= t[14] * ORDER_3;
 8016c36:	44d9      	add	r9, fp
 8016c38:	eb49 090a 	adc.w	r9, r9, sl
    t[ 5] -= t[13] * ORDER_4;
 8016c3c:	fba0 ea0e 	umull	lr, sl, r0, lr
 8016c40:	ebaa 0a00 	sub.w	sl, sl, r0
 8016c44:	eb1c 0c0e 	adds.w	ip, ip, lr
 8016c48:	eb4a 0909 	adc.w	r9, sl, r9
    t[ 5] -= t[12] * ORDER_5;
 8016c4c:	fba5 5a03 	umull	r5, sl, r5, r3
 8016c50:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8016c54:	eb1c 0c05 	adds.w	ip, ip, r5
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016c58:	9d11      	ldr	r5, [sp, #68]	; 0x44
    t[ 5] -= t[12] * ORDER_5;
 8016c5a:	fb03 770e 	mla	r7, r3, lr, r7
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016c5e:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    t[ 5] -= t[12] * ORDER_5;
 8016c62:	4457      	add	r7, sl
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016c64:	ea4e 2ec8 	orr.w	lr, lr, r8, lsl #11
    t[ 5] -= t[12] * ORDER_5;
 8016c68:	eb47 0909 	adc.w	r9, r7, r9
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016c6c:	eb1c 050e 	adds.w	r5, ip, lr
 8016c70:	950a      	str	r5, [sp, #40]	; 0x28
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016c72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016c74:	f3c5 0e14 	ubfx	lr, r5, #0, #21
    t[ 6] -= t[17] * ORDER_1;
 8016c78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016c7a:	fb02 4705 	mla	r7, r2, r5, r4
 8016c7e:	9d05      	ldr	r5, [sp, #20]
 8016c80:	fba5 c502 	umull	ip, r5, r5, r2
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016c84:	eb49 5868 	adc.w	r8, r9, r8, asr #21
    t[ 6] -= t[17] * ORDER_1;
 8016c88:	eb1e 0e0c 	adds.w	lr, lr, ip
 8016c8c:	eb47 0705 	adc.w	r7, r7, r5
    t[ 6] -= t[16] * ORDER_2;
 8016c90:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8016de0 <sc_muladd+0x11bc>
 8016c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c96:	fb0c 6905 	mla	r9, ip, r5, r6
 8016c9a:	9d07      	ldr	r5, [sp, #28]
 8016c9c:	fba5 c50c 	umull	ip, r5, r5, ip
 8016ca0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8016ca4:	444d      	add	r5, r9
 8016ca6:	eb45 0507 	adc.w	r5, r5, r7
    t[ 6] -= t[15] * ORDER_3;
 8016caa:	4f4e      	ldr	r7, [pc, #312]	; (8016de4 <sc_muladd+0x11c0>)
    t[ 6] -= t[14] * ORDER_4;
 8016cac:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8016de8 <sc_muladd+0x11c4>
    t[ 6] -= t[15] * ORDER_3;
 8016cb0:	fba1 7e07 	umull	r7, lr, r1, r7
 8016cb4:	eb1c 0c07 	adds.w	ip, ip, r7
 8016cb8:	ebae 0e01 	sub.w	lr, lr, r1
    t[ 6] -= t[14] * ORDER_4;
 8016cbc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    t[ 6] -= t[15] * ORDER_3;
 8016cbe:	eb4e 0e05 	adc.w	lr, lr, r5
    t[ 6] -= t[14] * ORDER_4;
 8016cc2:	9d08      	ldr	r5, [sp, #32]
 8016cc4:	fb09 5907 	mla	r9, r9, r7, r5
 8016cc8:	9d06      	ldr	r5, [sp, #24]
 8016cca:	4f47      	ldr	r7, [pc, #284]	; (8016de8 <sc_muladd+0x11c4>)
 8016ccc:	fba5 5707 	umull	r5, r7, r5, r7
 8016cd0:	eb1c 0505 	adds.w	r5, ip, r5
 8016cd4:	444f      	add	r7, r9
    t[ 6] -= t[13] * ORDER_5;
 8016cd6:	fba0 ca03 	umull	ip, sl, r0, r3
    t[ 6] -= t[14] * ORDER_4;
 8016cda:	eb47 070e 	adc.w	r7, r7, lr
    t[ 6] -= t[13] * ORDER_5;
 8016cde:	ebaa 0000 	sub.w	r0, sl, r0
 8016ce2:	eb15 0c0c 	adds.w	ip, r5, ip
 8016ce6:	eb40 0707 	adc.w	r7, r0, r7
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016cea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cec:	0d45      	lsrs	r5, r0, #21
 8016cee:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
 8016cf2:	eb1c 0005 	adds.w	r0, ip, r5
 8016cf6:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    t[ 7] -= t[17] * ORDER_2;
 8016cfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016cfc:	4f38      	ldr	r7, [pc, #224]	; (8016de0 <sc_muladd+0x11bc>)
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016cfe:	9012      	str	r0, [sp, #72]	; 0x48
    t[ 7] -= t[17] * ORDER_2;
 8016d00:	fb07 4c05 	mla	ip, r7, r5, r4
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d04:	9821      	ldr	r0, [sp, #132]	; 0x84
    t[ 7] -= t[17] * ORDER_2;
 8016d06:	9d05      	ldr	r5, [sp, #20]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d08:	f3c0 0014 	ubfx	r0, r0, #0, #21
    t[ 7] -= t[17] * ORDER_2;
 8016d0c:	fba5 7507 	umull	r7, r5, r5, r7
 8016d10:	19c0      	adds	r0, r0, r7
 8016d12:	eb4c 0c05 	adc.w	ip, ip, r5
    t[ 7] -= t[16] * ORDER_3;
 8016d16:	4f33      	ldr	r7, [pc, #204]	; (8016de4 <sc_muladd+0x11c0>)
 8016d18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016d1a:	fb07 6e05 	mla	lr, r7, r5, r6
 8016d1e:	9d07      	ldr	r5, [sp, #28]
 8016d20:	fba5 5707 	umull	r5, r7, r5, r7
 8016d24:	1940      	adds	r0, r0, r5
    t[ 7] -= t[15] * ORDER_4;
 8016d26:	4d30      	ldr	r5, [pc, #192]	; (8016de8 <sc_muladd+0x11c4>)
    t[ 7] -= t[16] * ORDER_3;
 8016d28:	4477      	add	r7, lr
    t[ 7] -= t[15] * ORDER_4;
 8016d2a:	fba1 5905 	umull	r5, r9, r1, r5
    t[ 7] -= t[16] * ORDER_3;
 8016d2e:	eb47 070c 	adc.w	r7, r7, ip
    t[ 7] -= t[14] * ORDER_5;
 8016d32:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    t[ 7] -= t[15] * ORDER_4;
 8016d36:	1945      	adds	r5, r0, r5
    t[ 7] -= t[14] * ORDER_5;
 8016d38:	9808      	ldr	r0, [sp, #32]
 8016d3a:	fb03 0a0c 	mla	sl, r3, ip, r0
 8016d3e:	9806      	ldr	r0, [sp, #24]
    t[ 8] -= t[17] * ORDER_3;
 8016d40:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8016de4 <sc_muladd+0x11c0>
    t[ 7] -= t[15] * ORDER_4;
 8016d44:	eba9 0901 	sub.w	r9, r9, r1
 8016d48:	eb49 0707 	adc.w	r7, r9, r7
    t[ 7] -= t[14] * ORDER_5;
 8016d4c:	fba0 9003 	umull	r9, r0, r0, r3
 8016d50:	4482      	add	sl, r0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016d52:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016d54:	ea4f 5b50 	mov.w	fp, r0, lsr #21
    t[ 7] -= t[14] * ORDER_5;
 8016d58:	eb15 0509 	adds.w	r5, r5, r9
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016d5c:	ea4b 2bc8 	orr.w	fp, fp, r8, lsl #11
    t[ 7] -= t[14] * ORDER_5;
 8016d60:	eb4a 0707 	adc.w	r7, sl, r7
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016d64:	eb15 000b 	adds.w	r0, r5, fp
 8016d68:	9006      	str	r0, [sp, #24]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016d6a:	981c      	ldr	r0, [sp, #112]	; 0x70
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d6c:	9d22      	ldr	r5, [sp, #136]	; 0x88
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016d6e:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016d72:	f3c0 0a14 	ubfx	sl, r0, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d76:	9821      	ldr	r0, [sp, #132]	; 0x84
    t[ 8] -= t[17] * ORDER_3;
 8016d78:	9f09      	ldr	r7, [sp, #36]	; 0x24
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d7a:	0d40      	lsrs	r0, r0, #21
    t[ 8] -= t[17] * ORDER_3;
 8016d7c:	fb0c 4e07 	mla	lr, ip, r7, r4
 8016d80:	9f05      	ldr	r7, [sp, #20]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d82:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
 8016d86:	eb1a 0000 	adds.w	r0, sl, r0
    t[ 8] -= t[17] * ORDER_3;
 8016d8a:	fba7 7c0c 	umull	r7, ip, r7, ip
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016d8e:	ea4f 5565 	mov.w	r5, r5, asr #21
 8016d92:	f145 0500 	adc.w	r5, r5, #0
    t[ 8] -= t[17] * ORDER_3;
 8016d96:	44f4      	add	ip, lr
 8016d98:	19c0      	adds	r0, r0, r7
 8016d9a:	eb4c 0c05 	adc.w	ip, ip, r5
    t[ 8] -= t[16] * ORDER_4;
 8016d9e:	4f12      	ldr	r7, [pc, #72]	; (8016de8 <sc_muladd+0x11c4>)
 8016da0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016da2:	fb07 6e05 	mla	lr, r7, r5, r6
 8016da6:	9d07      	ldr	r5, [sp, #28]
 8016da8:	fba5 5707 	umull	r5, r7, r5, r7
 8016dac:	1940      	adds	r0, r0, r5
 8016dae:	4477      	add	r7, lr
    t[ 8] -= t[15] * ORDER_5;
 8016db0:	fba1 5903 	umull	r5, r9, r1, r3
    t[ 8] -= t[16] * ORDER_4;
 8016db4:	eb47 070c 	adc.w	r7, r7, ip
    t[ 8] -= t[15] * ORDER_5;
 8016db8:	eba9 0101 	sub.w	r1, r9, r1
 8016dbc:	1940      	adds	r0, r0, r5
 8016dbe:	eb41 0707 	adc.w	r7, r1, r7
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016dc2:	9906      	ldr	r1, [sp, #24]
 8016dc4:	0d4d      	lsrs	r5, r1, #21
 8016dc6:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
 8016dca:	1941      	adds	r1, r0, r5
    t[ 9] -= t[17] * ORDER_4;
 8016dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dce:	4d06      	ldr	r5, [pc, #24]	; (8016de8 <sc_muladd+0x11c4>)
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016dd0:	9108      	str	r1, [sp, #32]
 8016dd2:	eb47 5868 	adc.w	r8, r7, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016dd6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    t[ 9] -= t[17] * ORDER_4;
 8016dd8:	fb05 4700 	mla	r7, r5, r0, r4
 8016ddc:	e006      	b.n	8016dec <sc_muladd+0x11c8>
 8016dde:	bf00      	nop
 8016de0:	ffe9fb68 	.word	0xffe9fb68
 8016de4:	fff0c654 	.word	0xfff0c654
 8016de8:	ffe215d1 	.word	0xffe215d1
 8016dec:	9805      	ldr	r0, [sp, #20]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016dee:	f3c1 0114 	ubfx	r1, r1, #0, #21
    t[ 9] -= t[17] * ORDER_4;
 8016df2:	fba0 5005 	umull	r5, r0, r0, r5
 8016df6:	1949      	adds	r1, r1, r5
    t[ 9] -= t[16] * ORDER_5;
 8016df8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016dfa:	fb03 6605 	mla	r6, r3, r5, r6
 8016dfe:	9d07      	ldr	r5, [sp, #28]
    t[ 9] -= t[17] * ORDER_4;
 8016e00:	eb47 0000 	adc.w	r0, r7, r0
    t[ 9] -= t[16] * ORDER_5;
 8016e04:	fba5 7503 	umull	r7, r5, r5, r3
 8016e08:	19c9      	adds	r1, r1, r7
 8016e0a:	442e      	add	r6, r5
 8016e0c:	eb46 0600 	adc.w	r6, r6, r0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016e10:	9808      	ldr	r0, [sp, #32]
 8016e12:	0d47      	lsrs	r7, r0, #21
 8016e14:	ea47 27c8 	orr.w	r7, r7, r8, lsl #11
 8016e18:	19c9      	adds	r1, r1, r7
 8016e1a:	9107      	str	r1, [sp, #28]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016e1c:	991d      	ldr	r1, [sp, #116]	; 0x74
    t[ 0] -= t[12] * ORDER_0;
 8016e1e:	9804      	ldr	r0, [sp, #16]
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016e20:	f3c1 0e14 	ubfx	lr, r1, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e24:	9923      	ldr	r1, [sp, #140]	; 0x8c
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016e26:	eb46 5868 	adc.w	r8, r6, r8, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e2a:	0d4e      	lsrs	r6, r1, #21
 8016e2c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016e2e:	ea46 26c1 	orr.w	r6, r6, r1, lsl #11
 8016e32:	154d      	asrs	r5, r1, #21
    t[10] -= t[17] * ORDER_5;
 8016e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e36:	fb03 4401 	mla	r4, r3, r1, r4
 8016e3a:	9905      	ldr	r1, [sp, #20]
 8016e3c:	fba1 a103 	umull	sl, r1, r1, r3
 8016e40:	440c      	add	r4, r1
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e42:	9907      	ldr	r1, [sp, #28]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e44:	eb1e 0e06 	adds.w	lr, lr, r6
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e48:	ea4f 5151 	mov.w	r1, r1, lsr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e4c:	f145 0500 	adc.w	r5, r5, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e50:	ea41 21c8 	orr.w	r1, r1, r8, lsl #11
    t[10] -= t[17] * ORDER_5;
 8016e54:	eb1e 0e0a 	adds.w	lr, lr, sl
 8016e58:	eb44 0405 	adc.w	r4, r4, r5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e5c:	eb1e 0101 	adds.w	r1, lr, r1
 8016e60:	9105      	str	r1, [sp, #20]
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016e64:	f3c1 0a14 	ubfx	sl, r1, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016e68:	9905      	ldr	r1, [sp, #20]
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016e6a:	eb44 5868 	adc.w	r8, r4, r8, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016e6e:	ea4f 5c51 	mov.w	ip, r1, lsr #21
 8016e72:	ea4c 2cc8 	orr.w	ip, ip, r8, lsl #11
 8016e76:	eb1a 0a0c 	adds.w	sl, sl, ip
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016e7a:	990d      	ldr	r1, [sp, #52]	; 0x34
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016e7c:	ea4f 5768 	mov.w	r7, r8, asr #21
 8016e80:	f147 0700 	adc.w	r7, r7, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016e84:	ea4f 565a 	mov.w	r6, sl, lsr #21
 8016e88:	ea46 26c7 	orr.w	r6, r6, r7, lsl #11
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016e8c:	f3c1 0b14 	ubfx	fp, r1, #0, #21
    t[ 0] -= t[12] * ORDER_0;
 8016e90:	9904      	ldr	r1, [sp, #16]
 8016e92:	f1c6 0800 	rsb	r8, r6, #0
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016e96:	157f      	asrs	r7, r7, #21
    t[ 0] -= t[12] * ORDER_0;
 8016e98:	fba6 4000 	umull	r4, r0, r6, r0
 8016e9c:	fb01 8107 	mla	r1, r1, r7, r8
 8016ea0:	eb1b 0b04 	adds.w	fp, fp, r4
 8016ea4:	eb41 0000 	adc.w	r0, r1, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016ea8:	990e      	ldr	r1, [sp, #56]	; 0x38
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016eaa:	ea4f 545b 	mov.w	r4, fp, lsr #21
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016eae:	f3c1 0914 	ubfx	r9, r1, #0, #21
    t[ 1] -= t[12] * ORDER_1;
 8016eb2:	fb02 8107 	mla	r1, r2, r7, r8
 8016eb6:	fba6 2502 	umull	r2, r5, r6, r2
 8016eba:	eb19 0202 	adds.w	r2, r9, r2
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016ebe:	ea44 24c0 	orr.w	r4, r4, r0, lsl #11
    t[ 1] -= t[12] * ORDER_1;
 8016ec2:	eb41 0105 	adc.w	r1, r1, r5
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016ec6:	1912      	adds	r2, r2, r4
 8016ec8:	eb41 5160 	adc.w	r1, r1, r0, asr #21
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016ecc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016ece:	f3c0 0414 	ubfx	r4, r0, #0, #21
    t[ 2] -= t[12] * ORDER_2;
 8016ed2:	4887      	ldr	r0, [pc, #540]	; (80170f0 <sc_muladd+0x14cc>)
 8016ed4:	fb00 8507 	mla	r5, r0, r7, r8
 8016ed8:	fba6 0900 	umull	r0, r9, r6, r0
 8016edc:	1820      	adds	r0, r4, r0
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016ede:	ea4f 5452 	mov.w	r4, r2, lsr #21
 8016ee2:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
    t[ 2] -= t[12] * ORDER_2;
 8016ee6:	eb45 0509 	adc.w	r5, r5, r9
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016eea:	1900      	adds	r0, r0, r4
 8016eec:	eb45 5561 	adc.w	r5, r5, r1, asr #21
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016ef0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016ef2:	f3c1 0c14 	ubfx	ip, r1, #0, #21
    t[ 3] -= t[12] * ORDER_3;
 8016ef6:	497f      	ldr	r1, [pc, #508]	; (80170f4 <sc_muladd+0x14d0>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016ef8:	0d44      	lsrs	r4, r0, #21
    t[ 3] -= t[12] * ORDER_3;
 8016efa:	fb01 8e07 	mla	lr, r1, r7, r8
 8016efe:	fba6 1901 	umull	r1, r9, r6, r1
 8016f02:	eb1c 0101 	adds.w	r1, ip, r1
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016f06:	ea44 24c5 	orr.w	r4, r4, r5, lsl #11
    t[ 3] -= t[12] * ORDER_3;
 8016f0a:	eb4e 0909 	adc.w	r9, lr, r9
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016f0e:	1909      	adds	r1, r1, r4
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016f10:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016f12:	f3c4 0c14 	ubfx	ip, r4, #0, #21
    t[ 4] -= t[12] * ORDER_4;
 8016f16:	4c78      	ldr	r4, [pc, #480]	; (80170f8 <sc_muladd+0x14d4>)
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8016f18:	eb49 5965 	adc.w	r9, r9, r5, asr #21
    t[ 4] -= t[12] * ORDER_4;
 8016f1c:	fb04 8e07 	mla	lr, r4, r7, r8
 8016f20:	fba6 5404 	umull	r5, r4, r6, r4
 8016f24:	eb1c 0c05 	adds.w	ip, ip, r5
 8016f28:	eb4e 0e04 	adc.w	lr, lr, r4
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016f2c:	0d4d      	lsrs	r5, r1, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016f2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016f30:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
 8016f34:	eb1c 0c05 	adds.w	ip, ip, r5
    t[ 5] -= t[12] * ORDER_5;
 8016f38:	fb03 8707 	mla	r7, r3, r7, r8
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016f3c:	f3c4 0514 	ubfx	r5, r4, #0, #21
    t[ 5] -= t[12] * ORDER_5;
 8016f40:	fba6 3803 	umull	r3, r8, r6, r3
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8016f44:	eb4e 5e69 	adc.w	lr, lr, r9, asr #21
    t[ 5] -= t[12] * ORDER_5;
 8016f48:	18eb      	adds	r3, r5, r3
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016f4a:	ea4f 555c 	mov.w	r5, ip, lsr #21
 8016f4e:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016f52:	9c12      	ldr	r4, [sp, #72]	; 0x48
    t[ 5] -= t[12] * ORDER_5;
 8016f54:	eb47 0708 	adc.w	r7, r7, r8
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8016f58:	195b      	adds	r3, r3, r5
 8016f5a:	eb47 5e6e 	adc.w	lr, r7, lr, asr #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016f5e:	0d5d      	lsrs	r5, r3, #21
 8016f60:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016f64:	f3c4 0614 	ubfx	r6, r4, #0, #21
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016f68:	1976      	adds	r6, r6, r5
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016f6a:	9c06      	ldr	r4, [sp, #24]
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 8016f6c:	ea4f 576e 	mov.w	r7, lr, asr #21
 8016f70:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016f74:	ea4f 5856 	mov.w	r8, r6, lsr #21
 8016f78:	ea48 28c7 	orr.w	r8, r8, r7, lsl #11
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016f7c:	f3c4 0914 	ubfx	r9, r4, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016f80:	9c08      	ldr	r4, [sp, #32]
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 8016f82:	eb19 0908 	adds.w	r9, r9, r8
 8016f86:	ea4f 5767 	mov.w	r7, r7, asr #21
 8016f8a:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016f8e:	f3c4 0514 	ubfx	r5, r4, #0, #21
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016f92:	ea4f 5459 	mov.w	r4, r9, lsr #21
 8016f96:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
 8016f9a:	192d      	adds	r5, r5, r4
 8016f9c:	ea4f 5767 	mov.w	r7, r7, asr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016fa0:	9c07      	ldr	r4, [sp, #28]
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8016fa2:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016fa6:	ea4f 5e55 	mov.w	lr, r5, lsr #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016faa:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016fae:	ea4e 2ec7 	orr.w	lr, lr, r7, lsl #11
 8016fb2:	eb14 0e0e 	adds.w	lr, r4, lr
 8016fb6:	ea4f 5767 	mov.w	r7, r7, asr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016fba:	9c05      	ldr	r4, [sp, #20]
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8016fbc:	f147 0700 	adc.w	r7, r7, #0
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016fc0:	ea4f 585e 	mov.w	r8, lr, lsr #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016fc4:	f3c4 0414 	ubfx	r4, r4, #0, #21
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 8016fc8:	ea48 28c7 	orr.w	r8, r8, r7, lsl #11
 8016fcc:	eb14 0808 	adds.w	r8, r4, r8
 8016fd0:	ea4f 5767 	mov.w	r7, r7, asr #21
 8016fd4:	f147 0700 	adc.w	r7, r7, #0
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016fd8:	ea4f 5458 	mov.w	r4, r8, lsr #21
 8016fdc:	ea44 24c7 	orr.w	r4, r4, r7, lsl #11
    carry = t[11] >> 21; t[12] += carry; t[11] &= MASK_21;
 8016fe0:	f3ca 0a14 	ubfx	sl, sl, #0, #21
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8016fe4:	eb1a 0a04 	adds.w	sl, sl, r4
    s[ 0] = (byte)(t[ 0] >>  0);
 8016fe8:	9c00      	ldr	r4, [sp, #0]
    s[ 1] = (byte)(t[ 0] >>  8);
 8016fea:	9f00      	ldr	r7, [sp, #0]
    carry = t[ 0] >> 21; t[ 1] += carry; t[ 0] &= MASK_21;
 8016fec:	f3cb 0b14 	ubfx	fp, fp, #0, #21
    s[ 0] = (byte)(t[ 0] >>  0);
 8016ff0:	f884 b000 	strb.w	fp, [r4]
    carry = t[ 1] >> 21; t[ 2] += carry; t[ 1] &= MASK_21;
 8016ff4:	f3c2 0214 	ubfx	r2, r2, #0, #21
    s[ 1] = (byte)(t[ 0] >>  8);
 8016ff8:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8016ffc:	707c      	strb	r4, [r7, #1]
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 8016ffe:	0154      	lsls	r4, r2, #5
 8017000:	ea44 4b1b 	orr.w	fp, r4, fp, lsr #16
    s[ 3] = (byte)(t[ 1] >>  3);
 8017004:	08d4      	lsrs	r4, r2, #3
    carry = t[ 2] >> 21; t[ 3] += carry; t[ 2] &= MASK_21;
 8017006:	f3c0 0014 	ubfx	r0, r0, #0, #21
    s[ 3] = (byte)(t[ 1] >>  3);
 801700a:	70fc      	strb	r4, [r7, #3]
    s[ 4] = (byte)(t[ 1] >> 11);
 801700c:	0ad4      	lsrs	r4, r2, #11
 801700e:	713c      	strb	r4, [r7, #4]
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 8017010:	0084      	lsls	r4, r0, #2
 8017012:	ea44 42d2 	orr.w	r2, r4, r2, lsr #19
    carry = t[ 3] >> 21; t[ 4] += carry; t[ 3] &= MASK_21;
 8017016:	f3c1 0114 	ubfx	r1, r1, #0, #21
    s[ 5] = (byte)((t[ 1] >> 19) | (t[ 2] <<  2));
 801701a:	717a      	strb	r2, [r7, #5]
    s[ 6] = (byte)(t[ 2] >>  6);
 801701c:	0982      	lsrs	r2, r0, #6
 801701e:	71ba      	strb	r2, [r7, #6]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 8017020:	01ca      	lsls	r2, r1, #7
 8017022:	ea42 3090 	orr.w	r0, r2, r0, lsr #14
    s[ 8] = (byte)(t[ 3] >>  1);
 8017026:	084a      	lsrs	r2, r1, #1
    carry = t[ 4] >> 21; t[ 5] += carry; t[ 4] &= MASK_21;
 8017028:	f3cc 0c14 	ubfx	ip, ip, #0, #21
    s[ 8] = (byte)(t[ 3] >>  1);
 801702c:	723a      	strb	r2, [r7, #8]
    s[ 9] = (byte)(t[ 3] >>  9);
 801702e:	0a4a      	lsrs	r2, r1, #9
 8017030:	727a      	strb	r2, [r7, #9]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 8017032:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8017036:	ea42 4151 	orr.w	r1, r2, r1, lsr #17
    s[11] = (byte)(t[ 4] >>  4);
 801703a:	ea4f 121c 	mov.w	r2, ip, lsr #4
    carry = t[ 5] >> 21; t[ 6] += carry; t[ 5] &= MASK_21;
 801703e:	f3c3 0314 	ubfx	r3, r3, #0, #21
    s[11] = (byte)(t[ 4] >>  4);
 8017042:	72fa      	strb	r2, [r7, #11]
    s[12] = (byte)(t[ 4] >> 12);
 8017044:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8017048:	733a      	strb	r2, [r7, #12]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 801704a:	18da      	adds	r2, r3, r3
    carry = t[ 6] >> 21; t[ 7] += carry; t[ 6] &= MASK_21;
 801704c:	f3c6 0614 	ubfx	r6, r6, #0, #21
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 8017050:	ea42 5c1c 	orr.w	ip, r2, ip, lsr #20
    s[14] = (byte)(t[ 5] >>  7);
 8017054:	09da      	lsrs	r2, r3, #7
 8017056:	73ba      	strb	r2, [r7, #14]
    s[15] = (byte)((t[ 5] >> 15) | (t[ 6] <<  6));
 8017058:	01b2      	lsls	r2, r6, #6
 801705a:	ea42 33d3 	orr.w	r3, r2, r3, lsr #15
 801705e:	73fb      	strb	r3, [r7, #15]
    s[16] = (byte)(t[ 6] >>  2);
 8017060:	08b3      	lsrs	r3, r6, #2
    carry = t[ 7] >> 21; t[ 8] += carry; t[ 7] &= MASK_21;
 8017062:	f3c9 0914 	ubfx	r9, r9, #0, #21
    s[16] = (byte)(t[ 6] >>  2);
 8017066:	743b      	strb	r3, [r7, #16]
    s[17] = (byte)(t[ 6] >> 10);
 8017068:	0ab3      	lsrs	r3, r6, #10
 801706a:	747b      	strb	r3, [r7, #17]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 801706c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
    carry = t[ 8] >> 21; t[ 9] += carry; t[ 8] &= MASK_21;
 8017070:	f3c5 0514 	ubfx	r5, r5, #0, #21
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 8017074:	ea43 4696 	orr.w	r6, r3, r6, lsr #18
    s[19] = (byte)(t[ 7] >>  5);
 8017078:	ea4f 1359 	mov.w	r3, r9, lsr #5
    carry = t[ 9] >> 21; t[10] += carry; t[ 9] &= MASK_21;
 801707c:	f3ce 0e14 	ubfx	lr, lr, #0, #21
    s[19] = (byte)(t[ 7] >>  5);
 8017080:	74fb      	strb	r3, [r7, #19]
    s[22] = (byte)(t[ 8] >>  8);
 8017082:	0a2b      	lsrs	r3, r5, #8
    carry = t[10] >> 21; t[11] += carry; t[10] &= MASK_21;
 8017084:	f3c8 0814 	ubfx	r8, r8, #0, #21
    s[22] = (byte)(t[ 8] >>  8);
 8017088:	75bb      	strb	r3, [r7, #22]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 801708a:	ea4f 144e 	mov.w	r4, lr, lsl #5
    s[24] = (byte)(t[ 9] >>  3);
 801708e:	ea4f 03de 	mov.w	r3, lr, lsr #3
    s[21] = (byte)(t[ 8] >>  0);
 8017092:	757d      	strb	r5, [r7, #21]
    s[24] = (byte)(t[ 9] >>  3);
 8017094:	763b      	strb	r3, [r7, #24]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 8017096:	ea44 4515 	orr.w	r5, r4, r5, lsr #16
    s[25] = (byte)(t[ 9] >> 11);
 801709a:	ea4f 23de 	mov.w	r3, lr, lsr #11
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 801709e:	ea4f 0488 	mov.w	r4, r8, lsl #2
    s[25] = (byte)(t[ 9] >> 11);
 80170a2:	767b      	strb	r3, [r7, #25]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 80170a4:	ea44 4ede 	orr.w	lr, r4, lr, lsr #19
    s[27] = (byte)(t[10] >>  6);
 80170a8:	ea4f 1398 	mov.w	r3, r8, lsr #6
    s[20] = (byte)(t[ 7] >> 13);
 80170ac:	ea4f 3959 	mov.w	r9, r9, lsr #13
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 80170b0:	ea4f 14ca 	mov.w	r4, sl, lsl #7
    s[ 2] = (byte)((t[ 0] >> 16) | (t[ 1] <<  5));
 80170b4:	f887 b002 	strb.w	fp, [r7, #2]
    s[ 7] = (byte)((t[ 2] >> 14) | (t[ 3] <<  7));
 80170b8:	71f8      	strb	r0, [r7, #7]
    s[10] = (byte)((t[ 3] >> 17) | (t[ 4] <<  4));
 80170ba:	72b9      	strb	r1, [r7, #10]
    s[13] = (byte)((t[ 4] >> 20) | (t[ 5] <<  1));
 80170bc:	f887 c00d 	strb.w	ip, [r7, #13]
    s[18] = (byte)((t[ 6] >> 18) | (t[ 7] <<  3));
 80170c0:	74be      	strb	r6, [r7, #18]
    s[20] = (byte)(t[ 7] >> 13);
 80170c2:	f887 9014 	strb.w	r9, [r7, #20]
    s[23] = (byte)((t[ 8] >> 16) | (t[ 9] <<  5));
 80170c6:	75fd      	strb	r5, [r7, #23]
    s[26] = (byte)((t[ 9] >> 19) | (t[10] <<  2));
 80170c8:	f887 e01a 	strb.w	lr, [r7, #26]
    s[27] = (byte)(t[10] >>  6);
 80170cc:	76fb      	strb	r3, [r7, #27]
    s[29] = (byte)(t[11] >>  1);
 80170ce:	ea4f 035a 	mov.w	r3, sl, lsr #1
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 80170d2:	ea44 3898 	orr.w	r8, r4, r8, lsr #14
    s[29] = (byte)(t[11] >>  1);
 80170d6:	777b      	strb	r3, [r7, #29]
    s[30] = (byte)(t[11] >>  9);
 80170d8:	ea4f 235a 	mov.w	r3, sl, lsr #9
    s[31] = (byte)(t[11] >> 17);
 80170dc:	ea4f 4a5a 	mov.w	sl, sl, lsr #17
    s[28] = (byte)((t[10] >> 14) | (t[11] <<  7));
 80170e0:	f887 801c 	strb.w	r8, [r7, #28]
    s[30] = (byte)(t[11] >>  9);
 80170e4:	77bb      	strb	r3, [r7, #30]
    s[31] = (byte)(t[11] >> 17);
 80170e6:	f887 a01f 	strb.w	sl, [r7, #31]
}
 80170ea:	b035      	add	sp, #212	; 0xd4
 80170ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f0:	ffe9fb68 	.word	0xffe9fb68
 80170f4:	fff0c654 	.word	0xfff0c654
 80170f8:	ffe215d1 	.word	0xffe215d1

080170fc <ge_scalarmult_base>:
{
 80170fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170fe:	b0f5      	sub	sp, #468	; 0x1d4
 8017100:	4604      	mov	r4, r0
  for (i = 0;i < 32;++i) {
 8017102:	4668      	mov	r0, sp
 8017104:	1e4e      	subs	r6, r1, #1
{
 8017106:	4603      	mov	r3, r0
 8017108:	311f      	adds	r1, #31
 801710a:	4605      	mov	r5, r0
    e[2 * i + 0] = (a[i] >> 0) & 15;
 801710c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8017110:	f002 070f 	and.w	r7, r2, #15
  for (i = 0;i < 32;++i) {
 8017114:	42b1      	cmp	r1, r6
    e[2 * i + 1] = (a[i] >> 4) & 15;
 8017116:	ea4f 1212 	mov.w	r2, r2, lsr #4
    e[2 * i + 0] = (a[i] >> 0) & 15;
 801711a:	701f      	strb	r7, [r3, #0]
    e[2 * i + 1] = (a[i] >> 4) & 15;
 801711c:	705a      	strb	r2, [r3, #1]
  for (i = 0;i < 32;++i) {
 801711e:	f103 0302 	add.w	r3, r3, #2
 8017122:	d1f3      	bne.n	801710c <ge_scalarmult_base+0x10>
 8017124:	213f      	movs	r1, #63	; 0x3f
  carry = 0;
 8017126:	2200      	movs	r2, #0
    e[i] += carry;
 8017128:	f990 3000 	ldrsb.w	r3, [r0]
 801712c:	4413      	add	r3, r2
 801712e:	b2db      	uxtb	r3, r3
    carry = e[i] + 8;
 8017130:	f103 0208 	add.w	r2, r3, #8
    carry >>= 4;
 8017134:	f342 1203 	sbfx	r2, r2, #4, #4
    e[i] -= (signed char)(carry << 4);
 8017138:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
  for (i = 0;i < 63;++i) {
 801713c:	3901      	subs	r1, #1
    e[i] -= (signed char)(carry << 4);
 801713e:	f800 3b01 	strb.w	r3, [r0], #1
  for (i = 0;i < 63;++i) {
 8017142:	d1f1      	bne.n	8017128 <ge_scalarmult_base+0x2c>
  e[63] += carry;
 8017144:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8017148:	4413      	add	r3, r2
 801714a:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
  ge_select(&t,0,e[1]);
 801714e:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8017152:	a82e      	add	r0, sp, #184	; 0xb8
  fe_add(h->Y, t.yplusx, t.yminusx);
 8017154:	f104 0628 	add.w	r6, r4, #40	; 0x28
  ge_select(&t,0,e[1]);
 8017158:	f7fd fef8 	bl	8014f4c <ge_select>
  fe_sub(h->X, t.yplusx, t.yminusx);
 801715c:	aa38      	add	r2, sp, #224	; 0xe0
 801715e:	a92e      	add	r1, sp, #184	; 0xb8
 8017160:	4620      	mov	r0, r4
 8017162:	f7fc facf 	bl	8013704 <fe_sub>
  fe_add(h->Y, t.yplusx, t.yminusx);
 8017166:	aa38      	add	r2, sp, #224	; 0xe0
 8017168:	a92e      	add	r1, sp, #184	; 0xb8
 801716a:	4630      	mov	r0, r6
 801716c:	f7fc f9e8 	bl	8013540 <fe_add>
  fe_0(h->Z);
 8017170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017174:	f7fb ffff 	bl	8013176 <fe_0>
  h->Z[0] = 4;
 8017178:	2304      	movs	r3, #4
 801717a:	6523      	str	r3, [r4, #80]	; 0x50
  fe_mul(h->T,h->X,h->Y);
 801717c:	4632      	mov	r2, r6
 801717e:	4621      	mov	r1, r4
 8017180:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8017184:	f7fc fc11 	bl	80139aa <fe_mul>
  fe_add(h->X, h->X, h->X);
 8017188:	4622      	mov	r2, r4
 801718a:	4621      	mov	r1, r4
 801718c:	4620      	mov	r0, r4
 801718e:	f7fc f9d7 	bl	8013540 <fe_add>
  fe_add(h->Y, h->Y, h->Y);
 8017192:	4632      	mov	r2, r6
 8017194:	4631      	mov	r1, r6
 8017196:	4630      	mov	r0, r6
 8017198:	f7fc f9d2 	bl	8013540 <fe_add>
  for (i = 3;i < 64;i += 2) {
 801719c:	2603      	movs	r6, #3
    ge_select(&t,i / 2,e[i]);
 801719e:	57aa      	ldrsb	r2, [r5, r6]
 80171a0:	1071      	asrs	r1, r6, #1
 80171a2:	a82e      	add	r0, sp, #184	; 0xb8
 80171a4:	f7fd fed2 	bl	8014f4c <ge_select>
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 80171a8:	aa2e      	add	r2, sp, #184	; 0xb8
 80171aa:	4621      	mov	r1, r4
 80171ac:	a84c      	add	r0, sp, #304	; 0x130
 80171ae:	f7fd fd90 	bl	8014cd2 <ge_madd>
  for (i = 3;i < 64;i += 2) {
 80171b2:	3602      	adds	r6, #2
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 80171b4:	a94c      	add	r1, sp, #304	; 0x130
 80171b6:	4620      	mov	r0, r4
 80171b8:	f7fd fdd1 	bl	8014d5e <ge_p1p1_to_p3>
  for (i = 3;i < 64;i += 2) {
 80171bc:	2e41      	cmp	r6, #65	; 0x41
 80171be:	d1ee      	bne.n	801719e <ge_scalarmult_base+0xa2>
  ge_p3_dbl(&r,h);  ge_p1p1_to_p2(&s,&r);
 80171c0:	4621      	mov	r1, r4
 80171c2:	a84c      	add	r0, sp, #304	; 0x130
 80171c4:	f7fd fe90 	bl	8014ee8 <ge_p3_dbl>
 80171c8:	a94c      	add	r1, sp, #304	; 0x130
 80171ca:	a810      	add	r0, sp, #64	; 0x40
 80171cc:	f7fd fd68 	bl	8014ca0 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p2(&s,&r);
 80171d0:	a910      	add	r1, sp, #64	; 0x40
 80171d2:	a84c      	add	r0, sp, #304	; 0x130
 80171d4:	f7fd fe50 	bl	8014e78 <ge_p2_dbl>
 80171d8:	a94c      	add	r1, sp, #304	; 0x130
 80171da:	a810      	add	r0, sp, #64	; 0x40
 80171dc:	f7fd fd60 	bl	8014ca0 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p2(&s,&r);
 80171e0:	a910      	add	r1, sp, #64	; 0x40
 80171e2:	a84c      	add	r0, sp, #304	; 0x130
 80171e4:	f7fd fe48 	bl	8014e78 <ge_p2_dbl>
 80171e8:	a94c      	add	r1, sp, #304	; 0x130
 80171ea:	a810      	add	r0, sp, #64	; 0x40
 80171ec:	f7fd fd58 	bl	8014ca0 <ge_p1p1_to_p2>
  ge_p2_dbl(&r,&s); ge_p1p1_to_p3(h,&r);
 80171f0:	a910      	add	r1, sp, #64	; 0x40
 80171f2:	a84c      	add	r0, sp, #304	; 0x130
 80171f4:	f7fd fe40 	bl	8014e78 <ge_p2_dbl>
 80171f8:	a94c      	add	r1, sp, #304	; 0x130
 80171fa:	4620      	mov	r0, r4
 80171fc:	f7fd fdaf 	bl	8014d5e <ge_p1p1_to_p3>
  for (i = 0;i < 64;i += 2) {
 8017200:	2600      	movs	r6, #0
    ge_select(&t,i / 2,e[i]);
 8017202:	57aa      	ldrsb	r2, [r5, r6]
 8017204:	1071      	asrs	r1, r6, #1
 8017206:	a82e      	add	r0, sp, #184	; 0xb8
 8017208:	f7fd fea0 	bl	8014f4c <ge_select>
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 801720c:	aa2e      	add	r2, sp, #184	; 0xb8
 801720e:	4621      	mov	r1, r4
 8017210:	a84c      	add	r0, sp, #304	; 0x130
 8017212:	f7fd fd5e 	bl	8014cd2 <ge_madd>
  for (i = 0;i < 64;i += 2) {
 8017216:	3602      	adds	r6, #2
    ge_madd(&r,h,&t); ge_p1p1_to_p3(h,&r);
 8017218:	a94c      	add	r1, sp, #304	; 0x130
 801721a:	4620      	mov	r0, r4
 801721c:	f7fd fd9f 	bl	8014d5e <ge_p1p1_to_p3>
  for (i = 0;i < 64;i += 2) {
 8017220:	2e40      	cmp	r6, #64	; 0x40
 8017222:	d1ee      	bne.n	8017202 <ge_scalarmult_base+0x106>
}
 8017224:	b075      	add	sp, #468	; 0x1d4
 8017226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017228 <ge_double_scalarmult_vartime>:
{
 8017228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801722c:	b091      	sub	sp, #68	; 0x44
 801722e:	468b      	mov	fp, r1
 8017230:	9003      	str	r0, [sp, #12]
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 8017232:	f44f 7080 	mov.w	r0, #256	; 0x100
{
 8017236:	4691      	mov	r9, r2
 8017238:	469a      	mov	sl, r3
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801723a:	f003 feb1 	bl	801afa0 <malloc>
 801723e:	9001      	str	r0, [sp, #4]
 8017240:	2800      	cmp	r0, #0
 8017242:	f000 81cd 	beq.w	80175e0 <ge_double_scalarmult_vartime+0x3b8>
      ((bslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 8017246:	f44f 7080 	mov.w	r0, #256	; 0x100
 801724a:	f003 fea9 	bl	801afa0 <malloc>
  if (((aslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801724e:	4680      	mov	r8, r0
 8017250:	2800      	cmp	r0, #0
 8017252:	f000 81cb 	beq.w	80175ec <ge_double_scalarmult_vartime+0x3c4>
      ((Ai = (ge_cached *)XMALLOC(8 * sizeof(*Ai), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 8017256:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801725a:	f003 fea1 	bl	801afa0 <malloc>
      ((bslide = (signed char *)XMALLOC(SLIDE_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801725e:	4606      	mov	r6, r0
 8017260:	2800      	cmp	r0, #0
 8017262:	f000 81ca 	beq.w	80175fa <ge_double_scalarmult_vartime+0x3d2>
      ((t = (ge_p1p1 *)XMALLOC(sizeof(*t), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 8017266:	20a0      	movs	r0, #160	; 0xa0
 8017268:	f003 fe9a 	bl	801afa0 <malloc>
      ((Ai = (ge_cached *)XMALLOC(8 * sizeof(*Ai), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801726c:	4604      	mov	r4, r0
 801726e:	2800      	cmp	r0, #0
 8017270:	f000 81c7 	beq.w	8017602 <ge_double_scalarmult_vartime+0x3da>
      ((u = (ge_p3 *)XMALLOC(sizeof(*u), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 8017274:	20a0      	movs	r0, #160	; 0xa0
 8017276:	f003 fe93 	bl	801afa0 <malloc>
      ((t = (ge_p1p1 *)XMALLOC(sizeof(*t), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 801727a:	4605      	mov	r5, r0
 801727c:	2800      	cmp	r0, #0
 801727e:	f000 81c3 	beq.w	8017608 <ge_double_scalarmult_vartime+0x3e0>
      ((A2 = (ge_p3 *)XMALLOC(sizeof(*A2), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL))
 8017282:	20a0      	movs	r0, #160	; 0xa0
 8017284:	f003 fe8c 	bl	801afa0 <malloc>
      ((u = (ge_p3 *)XMALLOC(sizeof(*u), NULL, DYNAMIC_TYPE_TMP_BUFFER))== NULL) ||
 8017288:	4607      	mov	r7, r0
 801728a:	2800      	cmp	r0, #0
 801728c:	f000 81b2 	beq.w	80175f4 <ge_double_scalarmult_vartime+0x3cc>
  slide(aslide,a);
 8017290:	9801      	ldr	r0, [sp, #4]
 8017292:	4659      	mov	r1, fp
 8017294:	f7fd fcb8 	bl	8014c08 <slide>
  slide(bslide,b);
 8017298:	4651      	mov	r1, sl
 801729a:	4640      	mov	r0, r8
 801729c:	f7fd fcb4 	bl	8014c08 <slide>
  ge_p3_to_cached(&Ai[0],A);
 80172a0:	4649      	mov	r1, r9
 80172a2:	4630      	mov	r0, r6
 80172a4:	f7fd fdc8 	bl	8014e38 <ge_p3_to_cached>
  ge_p3_dbl(t,A); ge_p1p1_to_p3(A2,t);
 80172a8:	4649      	mov	r1, r9
 80172aa:	4620      	mov	r0, r4
 80172ac:	f7fd fe1c 	bl	8014ee8 <ge_p3_dbl>
 80172b0:	4621      	mov	r1, r4
 80172b2:	4638      	mov	r0, r7
 80172b4:	f7fd fd53 	bl	8014d5e <ge_p1p1_to_p3>
  ge_add(t,A2,&Ai[0]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[1],u);
 80172b8:	4632      	mov	r2, r6
 80172ba:	4639      	mov	r1, r7
 80172bc:	4620      	mov	r0, r4
 80172be:	f7fd fd6f 	bl	8014da0 <ge_add>
 80172c2:	f106 09a0 	add.w	r9, r6, #160	; 0xa0
 80172c6:	4621      	mov	r1, r4
 80172c8:	4628      	mov	r0, r5
 80172ca:	f7fd fd48 	bl	8014d5e <ge_p1p1_to_p3>
 80172ce:	4648      	mov	r0, r9
 80172d0:	4629      	mov	r1, r5
 80172d2:	f7fd fdb1 	bl	8014e38 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[1]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[2],u);
 80172d6:	464a      	mov	r2, r9
 80172d8:	4639      	mov	r1, r7
 80172da:	4620      	mov	r0, r4
 80172dc:	f7fd fd60 	bl	8014da0 <ge_add>
 80172e0:	f506 79a0 	add.w	r9, r6, #320	; 0x140
 80172e4:	4621      	mov	r1, r4
 80172e6:	4628      	mov	r0, r5
 80172e8:	f7fd fd39 	bl	8014d5e <ge_p1p1_to_p3>
 80172ec:	4648      	mov	r0, r9
 80172ee:	4629      	mov	r1, r5
 80172f0:	f7fd fda2 	bl	8014e38 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[2]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[3],u);
 80172f4:	464a      	mov	r2, r9
 80172f6:	4639      	mov	r1, r7
 80172f8:	4620      	mov	r0, r4
 80172fa:	f7fd fd51 	bl	8014da0 <ge_add>
 80172fe:	f506 79f0 	add.w	r9, r6, #480	; 0x1e0
 8017302:	4621      	mov	r1, r4
 8017304:	4628      	mov	r0, r5
 8017306:	f7fd fd2a 	bl	8014d5e <ge_p1p1_to_p3>
 801730a:	4648      	mov	r0, r9
 801730c:	4629      	mov	r1, r5
 801730e:	f7fd fd93 	bl	8014e38 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[3]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[4],u);
 8017312:	464a      	mov	r2, r9
 8017314:	4639      	mov	r1, r7
 8017316:	4620      	mov	r0, r4
 8017318:	f7fd fd42 	bl	8014da0 <ge_add>
 801731c:	f506 7920 	add.w	r9, r6, #640	; 0x280
 8017320:	4621      	mov	r1, r4
 8017322:	4628      	mov	r0, r5
 8017324:	f7fd fd1b 	bl	8014d5e <ge_p1p1_to_p3>
 8017328:	4648      	mov	r0, r9
 801732a:	4629      	mov	r1, r5
 801732c:	f7fd fd84 	bl	8014e38 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[4]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[5],u);
 8017330:	464a      	mov	r2, r9
 8017332:	4639      	mov	r1, r7
 8017334:	4620      	mov	r0, r4
 8017336:	f7fd fd33 	bl	8014da0 <ge_add>
 801733a:	f506 7948 	add.w	r9, r6, #800	; 0x320
 801733e:	4621      	mov	r1, r4
 8017340:	4628      	mov	r0, r5
 8017342:	f7fd fd0c 	bl	8014d5e <ge_p1p1_to_p3>
 8017346:	4648      	mov	r0, r9
 8017348:	4629      	mov	r1, r5
 801734a:	f7fd fd75 	bl	8014e38 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[5]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[6],u);
 801734e:	464a      	mov	r2, r9
 8017350:	4639      	mov	r1, r7
 8017352:	4620      	mov	r0, r4
 8017354:	f7fd fd24 	bl	8014da0 <ge_add>
 8017358:	f506 7970 	add.w	r9, r6, #960	; 0x3c0
 801735c:	4621      	mov	r1, r4
 801735e:	4628      	mov	r0, r5
 8017360:	f7fd fcfd 	bl	8014d5e <ge_p1p1_to_p3>
 8017364:	4629      	mov	r1, r5
 8017366:	4648      	mov	r0, r9
 8017368:	f7fd fd66 	bl	8014e38 <ge_p3_to_cached>
  ge_add(t,A2,&Ai[6]); ge_p1p1_to_p3(u,t); ge_p3_to_cached(&Ai[7],u);
 801736c:	464a      	mov	r2, r9
 801736e:	4639      	mov	r1, r7
 8017370:	4620      	mov	r0, r4
 8017372:	f7fd fd15 	bl	8014da0 <ge_add>
 8017376:	4621      	mov	r1, r4
 8017378:	4628      	mov	r0, r5
 801737a:	f7fd fcf0 	bl	8014d5e <ge_p1p1_to_p3>
 801737e:	4629      	mov	r1, r5
 8017380:	f506 608c 	add.w	r0, r6, #1120	; 0x460
 8017384:	f7fd fd58 	bl	8014e38 <ge_p3_to_cached>
  fe_0(h->X);
 8017388:	9803      	ldr	r0, [sp, #12]
 801738a:	f7fb fef4 	bl	8013176 <fe_0>
  fe_1(h->Y);
 801738e:	9b03      	ldr	r3, [sp, #12]
 8017390:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8017394:	f7fb fee2 	bl	801315c <fe_1>
  fe_1(h->Z);
 8017398:	9b03      	ldr	r3, [sp, #12]
 801739a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 801739e:	f7fb fedd 	bl	801315c <fe_1>
  for (i = 255;i >= 0;--i) {
 80173a2:	22ff      	movs	r2, #255	; 0xff
    if (aslide[i] || bslide[i]) break;
 80173a4:	9b01      	ldr	r3, [sp, #4]
 80173a6:	569b      	ldrsb	r3, [r3, r2]
 80173a8:	b91b      	cbnz	r3, 80173b2 <ge_double_scalarmult_vartime+0x18a>
 80173aa:	f918 3002 	ldrsb.w	r3, [r8, r2]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d04b      	beq.n	801744a <ge_double_scalarmult_vartime+0x222>
 80173b2:	eb08 0302 	add.w	r3, r8, r2
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	9b01      	ldr	r3, [sp, #4]
 80173ba:	4413      	add	r3, r2
 80173bc:	9302      	str	r3, [sp, #8]

#ifndef CURVED25519_ASM
static WC_INLINE void ge_sub(ge_p1p1 *r,const ge_p3 *p,const ge_cached *q)
{
    ge t0;
    fe_add(r->X,p->Y,p->X);
 80173be:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80173c2:	9304      	str	r3, [sp, #16]
  for (;i >= 0;--i) {
 80173c4:	9b00      	ldr	r3, [sp, #0]
 80173c6:	eba3 0308 	sub.w	r3, r3, r8
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	db3f      	blt.n	801744e <ge_double_scalarmult_vartime+0x226>
    ge_p2_dbl(t,r);
 80173ce:	9903      	ldr	r1, [sp, #12]
 80173d0:	4620      	mov	r0, r4
 80173d2:	f7fd fd51 	bl	8014e78 <ge_p2_dbl>
    if (aslide[i] > 0) {
 80173d6:	9b02      	ldr	r3, [sp, #8]
 80173d8:	f993 3000 	ldrsb.w	r3, [r3]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	dd54      	ble.n	801748a <ge_double_scalarmult_vartime+0x262>
      ge_p1p1_to_p3(u,t);
 80173e0:	4621      	mov	r1, r4
 80173e2:	4628      	mov	r0, r5
 80173e4:	f7fd fcbb 	bl	8014d5e <ge_p1p1_to_p3>
      ge_add(t,u,&Ai[aslide[i]/2]);
 80173e8:	9b02      	ldr	r3, [sp, #8]
 80173ea:	f993 2000 	ldrsb.w	r2, [r3]
 80173ee:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80173f2:	1052      	asrs	r2, r2, #1
 80173f4:	23a0      	movs	r3, #160	; 0xa0
 80173f6:	fb03 6202 	mla	r2, r3, r2, r6
 80173fa:	4629      	mov	r1, r5
 80173fc:	4620      	mov	r0, r4
 80173fe:	f7fd fccf 	bl	8014da0 <ge_add>
    if (bslide[i] > 0) {
 8017402:	9b00      	ldr	r3, [sp, #0]
 8017404:	f993 3000 	ldrsb.w	r3, [r3]
 8017408:	2b00      	cmp	r3, #0
 801740a:	f340 8093 	ble.w	8017534 <ge_double_scalarmult_vartime+0x30c>
      ge_p1p1_to_p3(u,t);
 801740e:	4621      	mov	r1, r4
 8017410:	4628      	mov	r0, r5
 8017412:	f7fd fca4 	bl	8014d5e <ge_p1p1_to_p3>
      ge_madd(t,u,&Bi[bslide[i]/2]);
 8017416:	9b00      	ldr	r3, [sp, #0]
 8017418:	f993 2000 	ldrsb.w	r2, [r3]
 801741c:	4b7b      	ldr	r3, [pc, #492]	; (801760c <ge_double_scalarmult_vartime+0x3e4>)
 801741e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017422:	1052      	asrs	r2, r2, #1
 8017424:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8017428:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801742c:	4629      	mov	r1, r5
 801742e:	4620      	mov	r0, r4
 8017430:	f7fd fc4f 	bl	8014cd2 <ge_madd>
    ge_p1p1_to_p2(r,t);
 8017434:	9803      	ldr	r0, [sp, #12]
 8017436:	4621      	mov	r1, r4
 8017438:	f7fd fc32 	bl	8014ca0 <ge_p1p1_to_p2>
  for (;i >= 0;--i) {
 801743c:	9b00      	ldr	r3, [sp, #0]
 801743e:	3b01      	subs	r3, #1
 8017440:	9300      	str	r3, [sp, #0]
 8017442:	9b02      	ldr	r3, [sp, #8]
 8017444:	3b01      	subs	r3, #1
 8017446:	9302      	str	r3, [sp, #8]
 8017448:	e7bc      	b.n	80173c4 <ge_double_scalarmult_vartime+0x19c>
  for (i = 255;i >= 0;--i) {
 801744a:	3a01      	subs	r2, #1
 801744c:	d2aa      	bcs.n	80173a4 <ge_double_scalarmult_vartime+0x17c>
      ret = 0;
 801744e:	f04f 0900 	mov.w	r9, #0
      XFREE(aslide, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017452:	9801      	ldr	r0, [sp, #4]
 8017454:	f003 fdac 	bl	801afb0 <free>
  if (bslide != NULL)
 8017458:	f1b8 0f00 	cmp.w	r8, #0
 801745c:	d002      	beq.n	8017464 <ge_double_scalarmult_vartime+0x23c>
      XFREE(bslide, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801745e:	4640      	mov	r0, r8
 8017460:	f003 fda6 	bl	801afb0 <free>
  if (Ai != NULL)
 8017464:	b116      	cbz	r6, 801746c <ge_double_scalarmult_vartime+0x244>
      XFREE(Ai, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017466:	4630      	mov	r0, r6
 8017468:	f003 fda2 	bl	801afb0 <free>
  if (t != NULL)
 801746c:	b114      	cbz	r4, 8017474 <ge_double_scalarmult_vartime+0x24c>
      XFREE(t, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801746e:	4620      	mov	r0, r4
 8017470:	f003 fd9e 	bl	801afb0 <free>
  if (u != NULL)
 8017474:	b115      	cbz	r5, 801747c <ge_double_scalarmult_vartime+0x254>
      XFREE(u, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017476:	4628      	mov	r0, r5
 8017478:	f003 fd9a 	bl	801afb0 <free>
  if (A2 != NULL)
 801747c:	2f00      	cmp	r7, #0
 801747e:	f000 80b1 	beq.w	80175e4 <ge_double_scalarmult_vartime+0x3bc>
      XFREE(A2, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017482:	4638      	mov	r0, r7
 8017484:	f003 fd94 	bl	801afb0 <free>
  return ret;
 8017488:	e0ac      	b.n	80175e4 <ge_double_scalarmult_vartime+0x3bc>
    } else if (aslide[i] < 0) {
 801748a:	d0ba      	beq.n	8017402 <ge_double_scalarmult_vartime+0x1da>
      ge_p1p1_to_p3(u,t);
 801748c:	4621      	mov	r1, r4
 801748e:	4628      	mov	r0, r5
 8017490:	f7fd fc65 	bl	8014d5e <ge_p1p1_to_p3>
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 8017494:	9b02      	ldr	r3, [sp, #8]
    fe_add(r->X,p->Y,p->X);
 8017496:	9904      	ldr	r1, [sp, #16]
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 8017498:	f993 9000 	ldrsb.w	r9, [r3]
 801749c:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    fe_sub(r->Y,p->Y,p->X);
 80174a0:	f104 0a28 	add.w	sl, r4, #40	; 0x28
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 80174a4:	23a0      	movs	r3, #160	; 0xa0
    fe_add(r->X,p->Y,p->X);
 80174a6:	462a      	mov	r2, r5
 80174a8:	4620      	mov	r0, r4
      ge_sub(t,u,&Ai[(-aslide[i])/2]);
 80174aa:	ea4f 0969 	mov.w	r9, r9, asr #1
 80174ae:	fb09 6913 	mls	r9, r9, r3, r6
    fe_mul(r->Z,r->X,q->YminusX);
 80174b2:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    fe_add(r->X,p->Y,p->X);
 80174b6:	f7fc f843 	bl	8013540 <fe_add>
    fe_sub(r->Y,p->Y,p->X);
 80174ba:	9904      	ldr	r1, [sp, #16]
 80174bc:	462a      	mov	r2, r5
 80174be:	4650      	mov	r0, sl
 80174c0:	f7fc f920 	bl	8013704 <fe_sub>
    fe_mul(r->Z,r->X,q->YminusX);
 80174c4:	f109 0228 	add.w	r2, r9, #40	; 0x28
 80174c8:	4621      	mov	r1, r4
 80174ca:	4658      	mov	r0, fp
 80174cc:	f7fc fa6d 	bl	80139aa <fe_mul>
    fe_mul(r->Y,r->Y,q->YplusX);
 80174d0:	464a      	mov	r2, r9
 80174d2:	4651      	mov	r1, sl
 80174d4:	4650      	mov	r0, sl
 80174d6:	f7fc fa68 	bl	80139aa <fe_mul>
    fe_mul(r->T,q->T2d,p->T);
 80174da:	f104 0378 	add.w	r3, r4, #120	; 0x78
 80174de:	4618      	mov	r0, r3
 80174e0:	f105 0278 	add.w	r2, r5, #120	; 0x78
 80174e4:	f109 0178 	add.w	r1, r9, #120	; 0x78
 80174e8:	9305      	str	r3, [sp, #20]
 80174ea:	f7fc fa5e 	bl	80139aa <fe_mul>
    fe_mul(r->X,p->Z,q->Z);
 80174ee:	f109 0250 	add.w	r2, r9, #80	; 0x50
 80174f2:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80174f6:	4620      	mov	r0, r4
 80174f8:	f7fc fa57 	bl	80139aa <fe_mul>
    fe_add(t0,r->X,r->X);
 80174fc:	4622      	mov	r2, r4
 80174fe:	4621      	mov	r1, r4
 8017500:	a806      	add	r0, sp, #24
 8017502:	f7fc f81d 	bl	8013540 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 8017506:	4652      	mov	r2, sl
 8017508:	4659      	mov	r1, fp
 801750a:	4620      	mov	r0, r4
 801750c:	f7fc f8fa 	bl	8013704 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 8017510:	4652      	mov	r2, sl
 8017512:	4659      	mov	r1, fp
 8017514:	4650      	mov	r0, sl
 8017516:	f7fc f813 	bl	8013540 <fe_add>
    fe_sub(r->Z,t0,r->T);
 801751a:	9b05      	ldr	r3, [sp, #20]
 801751c:	a906      	add	r1, sp, #24
 801751e:	461a      	mov	r2, r3
 8017520:	4658      	mov	r0, fp
 8017522:	f7fc f8ef 	bl	8013704 <fe_sub>
    fe_add(r->T,t0,r->T);
 8017526:	9b05      	ldr	r3, [sp, #20]
 8017528:	a906      	add	r1, sp, #24
 801752a:	461a      	mov	r2, r3
 801752c:	4618      	mov	r0, r3
 801752e:	f7fc f807 	bl	8013540 <fe_add>
}
 8017532:	e766      	b.n	8017402 <ge_double_scalarmult_vartime+0x1da>
    } else if (bslide[i] < 0) {
 8017534:	f43f af7e 	beq.w	8017434 <ge_double_scalarmult_vartime+0x20c>
      ge_p1p1_to_p3(u,t);
 8017538:	4621      	mov	r1, r4
 801753a:	4628      	mov	r0, r5
 801753c:	f7fd fc0f 	bl	8014d5e <ge_p1p1_to_p3>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 8017540:	9b00      	ldr	r3, [sp, #0]
    fe_add(r->X,p->Y,p->X);
 8017542:	9904      	ldr	r1, [sp, #16]
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 8017544:	f993 9000 	ldrsb.w	r9, [r3]
    fe_sub(r->Y,p->Y,p->X);
 8017548:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    fe_add(r->X,p->Y,p->X);
 801754c:	462a      	mov	r2, r5
 801754e:	4620      	mov	r0, r4
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 8017550:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    fe_add(r->X,p->Y,p->X);
 8017554:	f7fb fff4 	bl	8013540 <fe_add>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 8017558:	ea4f 0969 	mov.w	r9, r9, asr #1
    fe_sub(r->Y,p->Y,p->X);
 801755c:	9904      	ldr	r1, [sp, #16]
 801755e:	462a      	mov	r2, r5
 8017560:	4650      	mov	r0, sl
 8017562:	f7fc f8cf 	bl	8013704 <fe_sub>
      ge_msub(t,u,&Bi[(-bslide[i])/2]);
 8017566:	f1c9 0900 	rsb	r9, r9, #0
    fe_mul(r->Z,r->X,q->yminusx);
 801756a:	2178      	movs	r1, #120	; 0x78
 801756c:	fb01 f909 	mul.w	r9, r1, r9
 8017570:	4b26      	ldr	r3, [pc, #152]	; (801760c <ge_double_scalarmult_vartime+0x3e4>)
 8017572:	f104 0b50 	add.w	fp, r4, #80	; 0x50
 8017576:	f109 0228 	add.w	r2, r9, #40	; 0x28
 801757a:	441a      	add	r2, r3
 801757c:	4621      	mov	r1, r4
 801757e:	4658      	mov	r0, fp
 8017580:	f7fc fa13 	bl	80139aa <fe_mul>
    fe_mul(r->Y,r->Y,q->yplusx);
 8017584:	4b21      	ldr	r3, [pc, #132]	; (801760c <ge_double_scalarmult_vartime+0x3e4>)
 8017586:	4651      	mov	r1, sl
 8017588:	eb03 0209 	add.w	r2, r3, r9
 801758c:	4650      	mov	r0, sl
 801758e:	f7fc fa0c 	bl	80139aa <fe_mul>
    fe_mul(r->T,q->xy2d,p->T);
 8017592:	481e      	ldr	r0, [pc, #120]	; (801760c <ge_double_scalarmult_vartime+0x3e4>)
 8017594:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8017598:	f109 0150 	add.w	r1, r9, #80	; 0x50
 801759c:	f105 0278 	add.w	r2, r5, #120	; 0x78
 80175a0:	4401      	add	r1, r0
 80175a2:	4618      	mov	r0, r3
 80175a4:	4699      	mov	r9, r3
 80175a6:	f7fc fa00 	bl	80139aa <fe_mul>
    fe_add(t0,p->Z,p->Z);
 80175aa:	f105 0250 	add.w	r2, r5, #80	; 0x50
 80175ae:	4611      	mov	r1, r2
 80175b0:	a806      	add	r0, sp, #24
 80175b2:	f7fb ffc5 	bl	8013540 <fe_add>
    fe_sub(r->X,r->Z,r->Y);
 80175b6:	4652      	mov	r2, sl
 80175b8:	4659      	mov	r1, fp
 80175ba:	4620      	mov	r0, r4
 80175bc:	f7fc f8a2 	bl	8013704 <fe_sub>
    fe_add(r->Y,r->Z,r->Y);
 80175c0:	4652      	mov	r2, sl
 80175c2:	4659      	mov	r1, fp
 80175c4:	4650      	mov	r0, sl
 80175c6:	f7fb ffbb 	bl	8013540 <fe_add>
    fe_sub(r->Z,t0,r->T);
 80175ca:	464a      	mov	r2, r9
 80175cc:	a906      	add	r1, sp, #24
 80175ce:	4658      	mov	r0, fp
 80175d0:	f7fc f898 	bl	8013704 <fe_sub>
    fe_add(r->T,t0,r->T);
 80175d4:	464a      	mov	r2, r9
 80175d6:	a906      	add	r1, sp, #24
 80175d8:	4648      	mov	r0, r9
 80175da:	f7fb ffb1 	bl	8013540 <fe_add>
}
 80175de:	e729      	b.n	8017434 <ge_double_scalarmult_vartime+0x20c>
      ret = MEMORY_E;
 80175e0:	f06f 097c 	mvn.w	r9, #124	; 0x7c
}
 80175e4:	4648      	mov	r0, r9
 80175e6:	b011      	add	sp, #68	; 0x44
 80175e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ge_p3 *A2 = NULL;
 80175ec:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 80175ee:	4605      	mov	r5, r0
  ge_p1p1 *t = NULL;
 80175f0:	4604      	mov	r4, r0
  ge_cached *Ai = NULL; /* A,3A,5A,7A,9A,11A,13A,15A */
 80175f2:	4606      	mov	r6, r0
      ret = MEMORY_E;
 80175f4:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 80175f8:	e72b      	b.n	8017452 <ge_double_scalarmult_vartime+0x22a>
  ge_p3 *A2 = NULL;
 80175fa:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 80175fc:	4605      	mov	r5, r0
  ge_p1p1 *t = NULL;
 80175fe:	4604      	mov	r4, r0
 8017600:	e7f8      	b.n	80175f4 <ge_double_scalarmult_vartime+0x3cc>
  ge_p3 *A2 = NULL;
 8017602:	4607      	mov	r7, r0
  ge_p3 *u = NULL;
 8017604:	4605      	mov	r5, r0
 8017606:	e7f5      	b.n	80175f4 <ge_double_scalarmult_vartime+0x3cc>
  ge_p3 *A2 = NULL;
 8017608:	4607      	mov	r7, r0
 801760a:	e7f3      	b.n	80175f4 <ge_double_scalarmult_vartime+0x3cc>
 801760c:	0802308c 	.word	0x0802308c

08017610 <ge_frombytes_negate_vartime>:
{
 8017610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017612:	4604      	mov	r4, r0
  fe_frombytes(h->Y,s);
 8017614:	f100 0528 	add.w	r5, r0, #40	; 0x28
{
 8017618:	b0b3      	sub	sp, #204	; 0xcc
  fe_1(h->Z);
 801761a:	f104 0750 	add.w	r7, r4, #80	; 0x50
  fe_frombytes(h->Y,s);
 801761e:	4628      	mov	r0, r5
{
 8017620:	460e      	mov	r6, r1
  fe_frombytes(h->Y,s);
 8017622:	f7fc f8a0 	bl	8013766 <fe_frombytes>
  fe_1(h->Z);
 8017626:	4638      	mov	r0, r7
 8017628:	f7fb fd98 	bl	801315c <fe_1>
  fe_sq(u,h->Y);
 801762c:	4629      	mov	r1, r5
 801762e:	4668      	mov	r0, sp
 8017630:	f7fb fdae 	bl	8013190 <fe_sq>
  fe_mul(v,u,d);
 8017634:	4a35      	ldr	r2, [pc, #212]	; (801770c <ge_frombytes_negate_vartime+0xfc>)
 8017636:	4669      	mov	r1, sp
 8017638:	a80a      	add	r0, sp, #40	; 0x28
 801763a:	f7fc f9b6 	bl	80139aa <fe_mul>
  fe_sub(u,u,h->Z);       /* u = y^2-1 */
 801763e:	463a      	mov	r2, r7
 8017640:	4669      	mov	r1, sp
 8017642:	4668      	mov	r0, sp
 8017644:	f7fc f85e 	bl	8013704 <fe_sub>
  fe_add(v,v,h->Z);       /* v = dy^2+1 */
 8017648:	a90a      	add	r1, sp, #40	; 0x28
 801764a:	463a      	mov	r2, r7
 801764c:	4608      	mov	r0, r1
 801764e:	f7fb ff77 	bl	8013540 <fe_add>
  fe_sq(v3,v);
 8017652:	a90a      	add	r1, sp, #40	; 0x28
 8017654:	a814      	add	r0, sp, #80	; 0x50
 8017656:	f7fb fd9b 	bl	8013190 <fe_sq>
  fe_mul(v3,v3,v);        /* v3 = v^3 */
 801765a:	a914      	add	r1, sp, #80	; 0x50
 801765c:	aa0a      	add	r2, sp, #40	; 0x28
 801765e:	4608      	mov	r0, r1
 8017660:	f7fc f9a3 	bl	80139aa <fe_mul>
  fe_sq(h->X,v3);
 8017664:	a914      	add	r1, sp, #80	; 0x50
 8017666:	4620      	mov	r0, r4
 8017668:	f7fb fd92 	bl	8013190 <fe_sq>
  fe_mul(h->X,h->X,v);
 801766c:	aa0a      	add	r2, sp, #40	; 0x28
 801766e:	4621      	mov	r1, r4
 8017670:	4620      	mov	r0, r4
 8017672:	f7fc f99a 	bl	80139aa <fe_mul>
  fe_mul(h->X,h->X,u);    /* x = uv^7 */
 8017676:	466a      	mov	r2, sp
 8017678:	4621      	mov	r1, r4
 801767a:	4620      	mov	r0, r4
 801767c:	f7fc f995 	bl	80139aa <fe_mul>
  fe_pow22523(h->X,h->X); /* x = (uv^7)^((q-5)/8) */
 8017680:	4621      	mov	r1, r4
 8017682:	4620      	mov	r0, r4
 8017684:	f7fd f966 	bl	8014954 <fe_pow22523>
  fe_mul(h->X,h->X,v3);
 8017688:	aa14      	add	r2, sp, #80	; 0x50
 801768a:	4621      	mov	r1, r4
 801768c:	4620      	mov	r0, r4
 801768e:	f7fc f98c 	bl	80139aa <fe_mul>
  fe_mul(h->X,h->X,u);    /* x = uv^3(uv^7)^((q-5)/8) */
 8017692:	466a      	mov	r2, sp
 8017694:	4621      	mov	r1, r4
 8017696:	4620      	mov	r0, r4
 8017698:	f7fc f987 	bl	80139aa <fe_mul>
  fe_sq(vxx,h->X);
 801769c:	4621      	mov	r1, r4
 801769e:	a81e      	add	r0, sp, #120	; 0x78
 80176a0:	f7fb fd76 	bl	8013190 <fe_sq>
  fe_mul(vxx,vxx,v);
 80176a4:	a91e      	add	r1, sp, #120	; 0x78
 80176a6:	4608      	mov	r0, r1
 80176a8:	aa0a      	add	r2, sp, #40	; 0x28
 80176aa:	f7fc f97e 	bl	80139aa <fe_mul>
  fe_sub(check,vxx,u);    /* vx^2-u */
 80176ae:	a828      	add	r0, sp, #160	; 0xa0
 80176b0:	466a      	mov	r2, sp
 80176b2:	a91e      	add	r1, sp, #120	; 0x78
 80176b4:	f7fc f826 	bl	8013704 <fe_sub>
  if (fe_isnonzero(check)) {
 80176b8:	a828      	add	r0, sp, #160	; 0xa0
 80176ba:	f7fd fa23 	bl	8014b04 <fe_isnonzero>
 80176be:	b168      	cbz	r0, 80176dc <ge_frombytes_negate_vartime+0xcc>
    fe_add(check,vxx,u);  /* vx^2+u */
 80176c0:	a828      	add	r0, sp, #160	; 0xa0
 80176c2:	466a      	mov	r2, sp
 80176c4:	a91e      	add	r1, sp, #120	; 0x78
 80176c6:	f7fb ff3b 	bl	8013540 <fe_add>
    if (fe_isnonzero(check)) return -1;
 80176ca:	a828      	add	r0, sp, #160	; 0xa0
 80176cc:	f7fd fa1a 	bl	8014b04 <fe_isnonzero>
 80176d0:	b9c0      	cbnz	r0, 8017704 <ge_frombytes_negate_vartime+0xf4>
    fe_mul(h->X,h->X,sqrtm1);
 80176d2:	4a0f      	ldr	r2, [pc, #60]	; (8017710 <ge_frombytes_negate_vartime+0x100>)
 80176d4:	4621      	mov	r1, r4
 80176d6:	4620      	mov	r0, r4
 80176d8:	f7fc f967 	bl	80139aa <fe_mul>
  if (fe_isnegative(h->X) == (s[31] >> 7))
 80176dc:	4620      	mov	r0, r4
 80176de:	f7fd fa29 	bl	8014b34 <fe_isnegative>
 80176e2:	7ff3      	ldrb	r3, [r6, #31]
 80176e4:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 80176e8:	d103      	bne.n	80176f2 <ge_frombytes_negate_vartime+0xe2>
    fe_neg(h->X,h->X);
 80176ea:	4621      	mov	r1, r4
 80176ec:	4620      	mov	r0, r4
 80176ee:	f7fd f9e3 	bl	8014ab8 <fe_neg>
  fe_mul(h->T,h->X,h->Y);
 80176f2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80176f6:	462a      	mov	r2, r5
 80176f8:	4621      	mov	r1, r4
 80176fa:	f7fc f956 	bl	80139aa <fe_mul>
  return 0;
 80176fe:	2000      	movs	r0, #0
}
 8017700:	b033      	add	sp, #204	; 0xcc
 8017702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (fe_isnonzero(check)) return -1;
 8017704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017708:	e7fa      	b.n	8017700 <ge_frombytes_negate_vartime+0xf0>
 801770a:	bf00      	nop
 801770c:	0802ac4c 	.word	0x0802ac4c
 8017710:	0802ac9c 	.word	0x0802ac9c

08017714 <ge_tobytes>:
#endif

/* ge tobytes */
void ge_tobytes(unsigned char *s,const ge_p2 *h)
{
 8017714:	b530      	push	{r4, r5, lr}
 8017716:	b09f      	sub	sp, #124	; 0x7c
 8017718:	4604      	mov	r4, r0
 801771a:	460d      	mov	r5, r1
  ge recip;
  ge x;
  ge y;

  fe_invert(recip,h->Z);
 801771c:	4668      	mov	r0, sp
 801771e:	3150      	adds	r1, #80	; 0x50
 8017720:	f7fc fc05 	bl	8013f2e <fe_invert>
  fe_mul(x,h->X,recip);
 8017724:	466a      	mov	r2, sp
 8017726:	4629      	mov	r1, r5
 8017728:	a80a      	add	r0, sp, #40	; 0x28
 801772a:	f7fc f93e 	bl	80139aa <fe_mul>
  fe_mul(y,h->Y,recip);
 801772e:	466a      	mov	r2, sp
 8017730:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8017734:	a814      	add	r0, sp, #80	; 0x50
 8017736:	f7fc f938 	bl	80139aa <fe_mul>
  fe_tobytes(s,y);
 801773a:	a914      	add	r1, sp, #80	; 0x50
 801773c:	4620      	mov	r0, r4
 801773e:	f7fb ff30 	bl	80135a2 <fe_tobytes>
  s[31] ^= (unsigned char)(fe_isnegative(x) << 7);
 8017742:	a80a      	add	r0, sp, #40	; 0x28
 8017744:	f7fd f9f6 	bl	8014b34 <fe_isnegative>
 8017748:	7fe3      	ldrb	r3, [r4, #31]
 801774a:	ea83 13c0 	eor.w	r3, r3, r0, lsl #7
 801774e:	77e3      	strb	r3, [r4, #31]
}
 8017750:	b01f      	add	sp, #124	; 0x7c
 8017752:	bd30      	pop	{r4, r5, pc}

08017754 <ge_compress_key>:
{
 8017754:	b570      	push	{r4, r5, r6, lr}
 8017756:	4616      	mov	r6, r2
 8017758:	b0b6      	sub	sp, #216	; 0xd8
    XMEMCPY(x, xIn, ED25519_PUB_KEY_SIZE);
 801775a:	2220      	movs	r2, #32
{
 801775c:	4605      	mov	r5, r0
    XMEMCPY(x, xIn, ED25519_PUB_KEY_SIZE);
 801775e:	eb0d 0002 	add.w	r0, sp, r2
{
 8017762:	461c      	mov	r4, r3
    XMEMCPY(x, xIn, ED25519_PUB_KEY_SIZE);
 8017764:	f003 fc3c 	bl	801afe0 <memcpy>
    XMEMCPY(y, yIn, ED25519_PUB_KEY_SIZE);
 8017768:	2220      	movs	r2, #32
 801776a:	4631      	mov	r1, r6
 801776c:	a810      	add	r0, sp, #64	; 0x40
 801776e:	f003 fc37 	bl	801afe0 <memcpy>
    fe_frombytes(g.X, x);
 8017772:	a908      	add	r1, sp, #32
 8017774:	a818      	add	r0, sp, #96	; 0x60
 8017776:	f7fb fff6 	bl	8013766 <fe_frombytes>
    fe_frombytes(g.Y, y);
 801777a:	a910      	add	r1, sp, #64	; 0x40
 801777c:	a822      	add	r0, sp, #136	; 0x88
 801777e:	f7fb fff2 	bl	8013766 <fe_frombytes>
    fe_1(g.Z);
 8017782:	a82c      	add	r0, sp, #176	; 0xb0
 8017784:	f7fb fcea 	bl	801315c <fe_1>
    ge_tobytes(bArray, &g);
 8017788:	a918      	add	r1, sp, #96	; 0x60
 801778a:	4668      	mov	r0, sp
 801778c:	f7ff ffc2 	bl	8017714 <ge_tobytes>
    for (i = 0; i < keySz; i++) {
 8017790:	466a      	mov	r2, sp
 8017792:	192b      	adds	r3, r5, r4
 8017794:	42ab      	cmp	r3, r5
 8017796:	d102      	bne.n	801779e <ge_compress_key+0x4a>
}
 8017798:	2000      	movs	r0, #0
 801779a:	b036      	add	sp, #216	; 0xd8
 801779c:	bd70      	pop	{r4, r5, r6, pc}
        out[keySz - 1 - i] = bArray[i];
 801779e:	f812 1b01 	ldrb.w	r1, [r2], #1
 80177a2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    for (i = 0; i < keySz; i++) {
 80177a6:	e7f5      	b.n	8017794 <ge_compress_key+0x40>

080177a8 <wc_HashTypeConvert>:
            eHashType = WC_HASH_TYPE_NONE;
            break;
    }
#else
    /* current master uses same unique types as wc_HashType */
    if (hashType > 0 && hashType <= WC_HASH_TYPE_MAX) {
 80177a8:	1e43      	subs	r3, r0, #1
 80177aa:	2b11      	cmp	r3, #17
 80177ac:	bf28      	it	cs
 80177ae:	2000      	movcs	r0, #0
        eHashType = (enum wc_HashType)hashType;
    }
#endif
    return eHashType;
}
 80177b0:	b2c0      	uxtb	r0, r0
 80177b2:	4770      	bx	lr

080177b4 <wc_HashGetOID>:
#if !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC)

int wc_HashGetOID(enum wc_HashType hash_type)
{
    int oid = HASH_TYPE_E; /* Default to hash type error */
    switch(hash_type)
 80177b4:	3801      	subs	r0, #1
 80177b6:	b2c0      	uxtb	r0, r0
 80177b8:	2810      	cmp	r0, #16
 80177ba:	bf9a      	itte	ls
 80177bc:	4b02      	ldrls	r3, [pc, #8]	; (80177c8 <wc_HashGetOID+0x14>)
 80177be:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
 80177c2:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
        default:
            oid = BAD_FUNC_ARG;
            break;
    }
    return oid;
}
 80177c6:	4770      	bx	lr
 80177c8:	0802acc4 	.word	0x0802acc4

080177cc <wc_OidGetHash>:

enum wc_HashType wc_OidGetHash(int oid)
{
    enum wc_HashType hash_type = WC_HASH_TYPE_NONE;
    switch (oid)
 80177cc:	f5b0 7fcf 	cmp.w	r0, #414	; 0x19e
 80177d0:	d007      	beq.n	80177e2 <wc_OidGetHash+0x16>
 80177d2:	f5b0 7fd0 	cmp.w	r0, #416	; 0x1a0
 80177d6:	d006      	beq.n	80177e6 <wc_OidGetHash+0x1a>
 80177d8:	2858      	cmp	r0, #88	; 0x58
 80177da:	bf14      	ite	ne
 80177dc:	2000      	movne	r0, #0
 80177de:	2004      	moveq	r0, #4
 80177e0:	4770      	bx	lr
            hash_type = WC_HASH_TYPE_SHA224;
        #endif
            break;
        case SHA256h:
        #ifndef NO_SHA256
            hash_type = WC_HASH_TYPE_SHA256;
 80177e2:	2006      	movs	r0, #6
 80177e4:	4770      	bx	lr
            hash_type = WC_HASH_TYPE_SHA384;
        #endif
            break;
        case SHA512h:
        #ifdef WOLFSSL_SHA512
            hash_type = WC_HASH_TYPE_SHA512;
 80177e6:	2008      	movs	r0, #8
    #endif
        default:
            break;
    }
    return hash_type;
}
 80177e8:	4770      	bx	lr
	...

080177ec <wc_HashGetDigestSize>:

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
    switch(hash_type)
 80177ec:	3801      	subs	r0, #1
 80177ee:	b2c0      	uxtb	r0, r0
 80177f0:	2810      	cmp	r0, #16
 80177f2:	bf9a      	itte	ls
 80177f4:	4b02      	ldrls	r3, [pc, #8]	; (8017800 <wc_HashGetDigestSize+0x14>)
 80177f6:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
 80177fa:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
        default:
            dig_size = BAD_FUNC_ARG;
            break;
    }
    return dig_size;
}
 80177fe:	4770      	bx	lr
 8017800:	0802273e 	.word	0x0802273e

08017804 <wc_HashGetBlockSize>:

/* Get Hash block size */
int wc_HashGetBlockSize(enum wc_HashType hash_type)
{
    int block_size = HASH_TYPE_E; /* Default to hash type error */
    switch (hash_type)
 8017804:	3801      	subs	r0, #1
 8017806:	b2c0      	uxtb	r0, r0
 8017808:	2810      	cmp	r0, #16
 801780a:	bf9a      	itte	ls
 801780c:	4b02      	ldrls	r3, [pc, #8]	; (8017818 <wc_HashGetBlockSize+0x14>)
 801780e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
 8017812:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
        default:
            block_size = BAD_FUNC_ARG;
            break;
    }
    return block_size;
}
 8017816:	4770      	bx	lr
 8017818:	0802ace6 	.word	0x0802ace6

0801781c <wc_HashInit_ex>:
    return ret;
}

int wc_HashInit_ex(wc_HashAlg* hash, enum wc_HashType type, void* heap,
    int devId)
{
 801781c:	b410      	push	{r4}
 801781e:	460c      	mov	r4, r1
 8017820:	4611      	mov	r1, r2
 8017822:	461a      	mov	r2, r3
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL)
 8017824:	b1d8      	cbz	r0, 801785e <wc_HashInit_ex+0x42>
        return BAD_FUNC_ARG;

    switch (type) {
 8017826:	1ee3      	subs	r3, r4, #3
 8017828:	2b0e      	cmp	r3, #14
 801782a:	d818      	bhi.n	801785e <wc_HashInit_ex+0x42>
 801782c:	e8df f003 	tbb	[pc, r3]
 8017830:	0b1b081b 	.word	0x0b1b081b
 8017834:	1b170e1b 	.word	0x1b170e1b
 8017838:	171b1b1b 	.word	0x171b1b1b
 801783c:	1117      	.short	0x1117
 801783e:	14          	.byte	0x14
 801783f:	00          	.byte	0x00

    (void)heap;
    (void)devId;

    return ret;
}
 8017840:	bc10      	pop	{r4}
            ret = wc_InitSha_ex(&hash->sha, heap, devId);
 8017842:	f7f5 be43 	b.w	800d4cc <wc_InitSha_ex>
}
 8017846:	bc10      	pop	{r4}
            ret = wc_InitSha256_ex(&hash->sha256, heap, devId);
 8017848:	f7f6 b91c 	b.w	800da84 <wc_InitSha256_ex>
}
 801784c:	bc10      	pop	{r4}
            ret = wc_InitSha512_ex(&hash->sha512, heap, devId);
 801784e:	f7f8 bc03 	b.w	8010058 <wc_InitSha512_ex>
}
 8017852:	bc10      	pop	{r4}
            ret = wc_InitSha512_224_ex(&hash->sha512, heap, devId);
 8017854:	f7f8 bc08 	b.w	8010068 <wc_InitSha512_224_ex>
}
 8017858:	bc10      	pop	{r4}
            ret = wc_InitSha512_256_ex(&hash->sha512, heap, devId);
 801785a:	f7f8 bc0d 	b.w	8010078 <wc_InitSha512_256_ex>
        return BAD_FUNC_ARG;
 801785e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8017862:	bc10      	pop	{r4}
 8017864:	4770      	bx	lr
    int ret = HASH_TYPE_E; /* Default to hash type error */
 8017866:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 801786a:	e7fa      	b.n	8017862 <wc_HashInit_ex+0x46>

0801786c <wc_HashInit>:

int wc_HashInit(wc_HashAlg* hash, enum wc_HashType type)
{
    return wc_HashInit_ex(hash, type, NULL, INVALID_DEVID);
 801786c:	f06f 0301 	mvn.w	r3, #1
 8017870:	2200      	movs	r2, #0
 8017872:	f7ff bfd3 	b.w	801781c <wc_HashInit_ex>

08017876 <wc_HashUpdate>:
}

int wc_HashUpdate(wc_HashAlg* hash, enum wc_HashType type, const byte* data,
                  word32 dataSz)
{
 8017876:	b410      	push	{r4}
 8017878:	460c      	mov	r4, r1
 801787a:	4611      	mov	r1, r2
 801787c:	461a      	mov	r2, r3
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL || (data == NULL && dataSz > 0))
 801787e:	b1e8      	cbz	r0, 80178bc <wc_HashUpdate+0x46>
 8017880:	b901      	cbnz	r1, 8017884 <wc_HashUpdate+0xe>
 8017882:	b9db      	cbnz	r3, 80178bc <wc_HashUpdate+0x46>
        return BAD_FUNC_ARG;

    switch (type) {
 8017884:	1ee3      	subs	r3, r4, #3
 8017886:	2b0e      	cmp	r3, #14
 8017888:	d818      	bhi.n	80178bc <wc_HashUpdate+0x46>
 801788a:	e8df f003 	tbb	[pc, r3]
 801788e:	081b      	.short	0x081b
 8017890:	0e1b0b1b 	.word	0x0e1b0b1b
 8017894:	1b1b1b17 	.word	0x1b1b1b17
 8017898:	1117171b 	.word	0x1117171b
 801789c:	14          	.byte	0x14
 801789d:	00          	.byte	0x00
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
}
 801789e:	bc10      	pop	{r4}
            ret = wc_ShaUpdate(&hash->sha, data, dataSz);
 80178a0:	f7f5 be34 	b.w	800d50c <wc_ShaUpdate>
}
 80178a4:	bc10      	pop	{r4}
            ret = wc_Sha256Update(&hash->sha256, data, dataSz);
 80178a6:	f7f6 b921 	b.w	800daec <wc_Sha256Update>
}
 80178aa:	bc10      	pop	{r4}
            ret = wc_Sha512Update(&hash->sha512, data, dataSz);
 80178ac:	f7f8 bbec 	b.w	8010088 <wc_Sha512Update>
}
 80178b0:	bc10      	pop	{r4}
            ret = wc_Sha512_224Update(&hash->sha512, data, dataSz);
 80178b2:	f7f8 bc9e 	b.w	80101f2 <wc_Sha512_224Update>
}
 80178b6:	bc10      	pop	{r4}
            ret = wc_Sha512_256Update(&hash->sha512, data, dataSz);
 80178b8:	f7f8 bcad 	b.w	8010216 <wc_Sha512_256Update>
        return BAD_FUNC_ARG;
 80178bc:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 80178c0:	bc10      	pop	{r4}
 80178c2:	4770      	bx	lr
    int ret = HASH_TYPE_E; /* Default to hash type error */
 80178c4:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 80178c8:	e7fa      	b.n	80178c0 <wc_HashUpdate+0x4a>

080178ca <wc_HashFinal>:

int wc_HashFinal(wc_HashAlg* hash, enum wc_HashType type, byte* out)
{
 80178ca:	460b      	mov	r3, r1
 80178cc:	4611      	mov	r1, r2
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL || out == NULL)
 80178ce:	b1b8      	cbz	r0, 8017900 <wc_HashFinal+0x36>
 80178d0:	b1b2      	cbz	r2, 8017900 <wc_HashFinal+0x36>
        return BAD_FUNC_ARG;

    switch (type) {
 80178d2:	3b03      	subs	r3, #3
 80178d4:	2b0e      	cmp	r3, #14
 80178d6:	d813      	bhi.n	8017900 <wc_HashFinal+0x36>
 80178d8:	e8df f003 	tbb	[pc, r3]
 80178dc:	0a150815 	.word	0x0a150815
 80178e0:	15120c15 	.word	0x15120c15
 80178e4:	12151515 	.word	0x12151515
 80178e8:	0e12      	.short	0x0e12
 80178ea:	10          	.byte	0x10
 80178eb:	00          	.byte	0x00
            ret = wc_Md5Final(&hash->md5, out);
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_ShaFinal(&hash->sha, out);
 80178ec:	f7f5 be76 	b.w	800d5dc <wc_ShaFinal>
            ret = wc_Sha224Final(&hash->sha224, out);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Final(&hash->sha256, out);
 80178f0:	f7f6 b954 	b.w	800db9c <wc_Sha256Final>
            ret = wc_Sha384Final(&hash->sha384, out);
#endif
            break;
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            ret = wc_Sha512Final(&hash->sha512, out);
 80178f4:	f7f8 bb9e 	b.w	8010034 <wc_Sha512Final>
            break;
    #ifndef WOLFSSL_NOSHA512_224
        case WC_HASH_TYPE_SHA512_224:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
            ret = wc_Sha512_224Final(&hash->sha512, out);
 80178f8:	f7f8 bba2 	b.w	8010040 <wc_Sha512_224Final>
    #endif
    #ifndef WOLFSSL_NOSHA512_256
        case WC_HASH_TYPE_SHA512_256:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
            ret = wc_Sha512_256Final(&hash->sha512, out);
 80178fc:	f7f8 bba6 	b.w	801004c <wc_Sha512_256Final>
        return BAD_FUNC_ARG;
 8017900:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8017904:	4770      	bx	lr
    int ret = HASH_TYPE_E; /* Default to hash type error */
 8017906:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
}
 801790a:	4770      	bx	lr

0801790c <wc_HashFree>:

int wc_HashFree(wc_HashAlg* hash, enum wc_HashType type)
{
 801790c:	b508      	push	{r3, lr}
    int ret = HASH_TYPE_E; /* Default to hash type error */

    if (hash == NULL)
 801790e:	b1e0      	cbz	r0, 801794a <wc_HashFree+0x3e>
        return BAD_FUNC_ARG;

    switch (type) {
 8017910:	3903      	subs	r1, #3
 8017912:	290e      	cmp	r1, #14
 8017914:	d819      	bhi.n	801794a <wc_HashFree+0x3e>
 8017916:	e8df f001 	tbb	[pc, r1]
 801791a:	081b      	.short	0x081b
 801791c:	0f1b0c1b 	.word	0x0f1b0c1b
 8017920:	1b1b1b18 	.word	0x1b1b1b18
 8017924:	1218181b 	.word	0x1218181b
 8017928:	15          	.byte	0x15
 8017929:	00          	.byte	0x00
            ret = 0;
#endif
            break;
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            wc_ShaFree(&hash->sha);
 801792a:	f7f5 fecf 	bl	800d6cc <wc_ShaFree>
    #ifndef WOLFSSL_NOSHA512_256
        case WC_HASH_TYPE_SHA512_256:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
            wc_Sha512_256Free(&hash->sha512);
            ret = 0;
 801792e:	2000      	movs	r0, #0
        default:
            ret = BAD_FUNC_ARG;
    };

    return ret;
}
 8017930:	bd08      	pop	{r3, pc}
            wc_Sha256Free(&hash->sha256);
 8017932:	f7f6 f9bd 	bl	800dcb0 <wc_Sha256Free>
            break;
 8017936:	e7fa      	b.n	801792e <wc_HashFree+0x22>
            wc_Sha512Free(&hash->sha512);
 8017938:	f7f8 fc15 	bl	8010166 <wc_Sha512Free>
            break;
 801793c:	e7f7      	b.n	801792e <wc_HashFree+0x22>
            wc_Sha512_224Free(&hash->sha512);
 801793e:	f7f8 fc5a 	bl	80101f6 <wc_Sha512_224Free>
            break;
 8017942:	e7f4      	b.n	801792e <wc_HashFree+0x22>
            wc_Sha512_256Free(&hash->sha512);
 8017944:	f7f8 fc69 	bl	801021a <wc_Sha512_256Free>
 8017948:	e7f1      	b.n	801792e <wc_HashFree+0x22>
        return BAD_FUNC_ARG;
 801794a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801794e:	e7ef      	b.n	8017930 <wc_HashFree+0x24>
    int ret = HASH_TYPE_E; /* Default to hash type error */
 8017950:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 8017954:	e7ec      	b.n	8017930 <wc_HashFree+0x24>

08017956 <wc_ShaHash>:
    }
#endif /* !NO_MD5 */

#if !defined(NO_SHA)
    int wc_ShaHash(const byte* data, word32 len, byte* hash)
    {
 8017956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801795a:	4607      	mov	r7, r0
        wc_Sha sha[1];
    #endif
        int devId = INVALID_DEVID;

    #ifdef WOLFSSL_SMALL_STACK
        sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801795c:	2064      	movs	r0, #100	; 0x64
    {
 801795e:	4688      	mov	r8, r1
 8017960:	4616      	mov	r6, r2
        sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017962:	f003 fb1d 	bl	801afa0 <malloc>
        if (sha == NULL)
 8017966:	4605      	mov	r5, r0
 8017968:	b1d8      	cbz	r0, 80179a2 <wc_ShaHash+0x4c>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha_ex(sha, NULL, devId)) != 0) {
 801796a:	f06f 0201 	mvn.w	r2, #1
 801796e:	2100      	movs	r1, #0
 8017970:	f7f5 fdac 	bl	800d4cc <wc_InitSha_ex>
 8017974:	4604      	mov	r4, r0
 8017976:	b970      	cbnz	r0, 8017996 <wc_ShaHash+0x40>
            WOLFSSL_MSG("InitSha failed");
        }
        else {
            if ((ret = wc_ShaUpdate(sha, data, len)) != 0) {
 8017978:	4642      	mov	r2, r8
 801797a:	4639      	mov	r1, r7
 801797c:	4628      	mov	r0, r5
 801797e:	f7f5 fdc5 	bl	800d50c <wc_ShaUpdate>
 8017982:	4604      	mov	r4, r0
 8017984:	b920      	cbnz	r0, 8017990 <wc_ShaHash+0x3a>
                WOLFSSL_MSG("ShaUpdate failed");
            }
            else if ((ret = wc_ShaFinal(sha, hash)) != 0) {
 8017986:	4631      	mov	r1, r6
 8017988:	4628      	mov	r0, r5
 801798a:	f7f5 fe27 	bl	800d5dc <wc_ShaFinal>
 801798e:	4604      	mov	r4, r0
                WOLFSSL_MSG("ShaFinal failed");
            }
            wc_ShaFree(sha);
 8017990:	4628      	mov	r0, r5
 8017992:	f7f5 fe9b 	bl	800d6cc <wc_ShaFree>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017996:	4628      	mov	r0, r5
 8017998:	f003 fb0a 	bl	801afb0 <free>
    #endif

        return ret;
    }
 801799c:	4620      	mov	r0, r4
 801799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 80179a2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80179a6:	e7f9      	b.n	801799c <wc_ShaHash+0x46>

080179a8 <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
 80179a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ac:	4607      	mov	r7, r0
        wc_Sha256 sha256[1];
    #endif
        int devId = INVALID_DEVID;

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 80179ae:	2070      	movs	r0, #112	; 0x70
    {
 80179b0:	4688      	mov	r8, r1
 80179b2:	4616      	mov	r6, r2
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 80179b4:	f003 faf4 	bl	801afa0 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
 80179b8:	4605      	mov	r5, r0
 80179ba:	b1d8      	cbz	r0, 80179f4 <wc_Sha256Hash+0x4c>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 80179bc:	f06f 0201 	mvn.w	r2, #1
 80179c0:	2100      	movs	r1, #0
 80179c2:	f7f6 f85f 	bl	800da84 <wc_InitSha256_ex>
 80179c6:	4604      	mov	r4, r0
 80179c8:	b970      	cbnz	r0, 80179e8 <wc_Sha256Hash+0x40>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 80179ca:	4642      	mov	r2, r8
 80179cc:	4639      	mov	r1, r7
 80179ce:	4628      	mov	r0, r5
 80179d0:	f7f6 f88c 	bl	800daec <wc_Sha256Update>
 80179d4:	4604      	mov	r4, r0
 80179d6:	b920      	cbnz	r0, 80179e2 <wc_Sha256Hash+0x3a>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 80179d8:	4631      	mov	r1, r6
 80179da:	4628      	mov	r0, r5
 80179dc:	f7f6 f8de 	bl	800db9c <wc_Sha256Final>
 80179e0:	4604      	mov	r4, r0
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
 80179e2:	4628      	mov	r0, r5
 80179e4:	f7f6 f964 	bl	800dcb0 <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80179e8:	4628      	mov	r0, r5
 80179ea:	f003 fae1 	bl	801afb0 <free>
    #endif

        return ret;
    }
 80179ee:	4620      	mov	r0, r4
 80179f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 80179f4:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80179f8:	e7f9      	b.n	80179ee <wc_Sha256Hash+0x46>

080179fa <wc_Sha512Hash>:
#endif /* !defined(WOLFSSL_TI_HASH) */


#if defined(WOLFSSL_SHA512)
    int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
    {
 80179fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179fe:	4607      	mov	r7, r0
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 8017a00:	20e0      	movs	r0, #224	; 0xe0
    {
 8017a02:	4688      	mov	r8, r1
 8017a04:	4616      	mov	r6, r2
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 8017a06:	f003 facb 	bl	801afa0 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 8017a0a:	4605      	mov	r5, r0
 8017a0c:	b1c0      	cbz	r0, 8017a40 <wc_Sha512Hash+0x46>
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512(sha512)) != 0) {
 8017a0e:	f7f8 fba5 	bl	801015c <wc_InitSha512>
 8017a12:	4604      	mov	r4, r0
 8017a14:	b970      	cbnz	r0, 8017a34 <wc_Sha512Hash+0x3a>
            WOLFSSL_MSG("InitSha512 failed");
        }
        else {
            if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
 8017a16:	4642      	mov	r2, r8
 8017a18:	4639      	mov	r1, r7
 8017a1a:	4628      	mov	r0, r5
 8017a1c:	f7f8 fb34 	bl	8010088 <wc_Sha512Update>
 8017a20:	4604      	mov	r4, r0
 8017a22:	b920      	cbnz	r0, 8017a2e <wc_Sha512Hash+0x34>
                WOLFSSL_MSG("Sha512Update failed");
            }
            else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
 8017a24:	4631      	mov	r1, r6
 8017a26:	4628      	mov	r0, r5
 8017a28:	f7f8 fb04 	bl	8010034 <wc_Sha512Final>
 8017a2c:	4604      	mov	r4, r0
                WOLFSSL_MSG("Sha512Final failed");
            }
            wc_Sha512Free(sha512);
 8017a2e:	4628      	mov	r0, r5
 8017a30:	f7f8 fb99 	bl	8010166 <wc_Sha512Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017a34:	4628      	mov	r0, r5
 8017a36:	f003 fabb 	bl	801afb0 <free>
    #endif

        return ret;
    }
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 8017a40:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8017a44:	e7f9      	b.n	8017a3a <wc_Sha512Hash+0x40>

08017a46 <wc_Sha512_224Hash>:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#ifndef WOLFSSL_NOSHA512_224
    int wc_Sha512_224Hash(const byte* data, word32 len, byte* hash)
    {
 8017a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a4a:	4607      	mov	r7, r0
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 8017a4c:	20e0      	movs	r0, #224	; 0xe0
    {
 8017a4e:	4688      	mov	r8, r1
 8017a50:	4616      	mov	r6, r2
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 8017a52:	f003 faa5 	bl	801afa0 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 8017a56:	4605      	mov	r5, r0
 8017a58:	b1c0      	cbz	r0, 8017a8c <wc_Sha512_224Hash+0x46>
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512_224(sha512)) != 0) {
 8017a5a:	f7f8 fbc5 	bl	80101e8 <wc_InitSha512_224>
 8017a5e:	4604      	mov	r4, r0
 8017a60:	b970      	cbnz	r0, 8017a80 <wc_Sha512_224Hash+0x3a>
            WOLFSSL_MSG("wc_InitSha512_224 failed");
        }
        else {
            if ((ret = wc_Sha512_224Update(sha512, data, len)) != 0) {
 8017a62:	4642      	mov	r2, r8
 8017a64:	4639      	mov	r1, r7
 8017a66:	4628      	mov	r0, r5
 8017a68:	f7f8 fbc3 	bl	80101f2 <wc_Sha512_224Update>
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	b920      	cbnz	r0, 8017a7a <wc_Sha512_224Hash+0x34>
                WOLFSSL_MSG("wc_Sha512_224_Update failed");
            }
            else if ((ret = wc_Sha512_224Final(sha512, hash)) != 0) {
 8017a70:	4631      	mov	r1, r6
 8017a72:	4628      	mov	r0, r5
 8017a74:	f7f8 fae4 	bl	8010040 <wc_Sha512_224Final>
 8017a78:	4604      	mov	r4, r0
                WOLFSSL_MSG("wc_Sha512_224_Final failed");
            }
            wc_Sha512_224Free(sha512);
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	f7f8 fbbb 	bl	80101f6 <wc_Sha512_224Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017a80:	4628      	mov	r0, r5
 8017a82:	f003 fa95 	bl	801afb0 <free>
    #endif

        return ret;
    }
 8017a86:	4620      	mov	r0, r4
 8017a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 8017a8c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8017a90:	e7f9      	b.n	8017a86 <wc_Sha512_224Hash+0x40>

08017a92 <wc_Sha512_256Hash>:
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */

#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#ifndef WOLFSSL_NOSHA512_256
    int wc_Sha512_256Hash(const byte* data, word32 len, byte* hash)
    {
 8017a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a96:	4607      	mov	r7, r0
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 8017a98:	20e0      	movs	r0, #224	; 0xe0
    {
 8017a9a:	4688      	mov	r8, r1
 8017a9c:	4616      	mov	r6, r2
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 8017a9e:	f003 fa7f 	bl	801afa0 <malloc>
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 8017aa2:	4605      	mov	r5, r0
 8017aa4:	b1c0      	cbz	r0, 8017ad8 <wc_Sha512_256Hash+0x46>
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512_256(sha512)) != 0) {
 8017aa6:	f7f8 fbb1 	bl	801020c <wc_InitSha512_256>
 8017aaa:	4604      	mov	r4, r0
 8017aac:	b970      	cbnz	r0, 8017acc <wc_Sha512_256Hash+0x3a>
            WOLFSSL_MSG("wc_InitSha512_256 failed");
        }
        else {
            if ((ret = wc_Sha512_256Update(sha512, data, len)) != 0) {
 8017aae:	4642      	mov	r2, r8
 8017ab0:	4639      	mov	r1, r7
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	f7f8 fbaf 	bl	8010216 <wc_Sha512_256Update>
 8017ab8:	4604      	mov	r4, r0
 8017aba:	b920      	cbnz	r0, 8017ac6 <wc_Sha512_256Hash+0x34>
                WOLFSSL_MSG("wc_Sha512_256_Update failed");
            }
            else if ((ret = wc_Sha512_256Final(sha512, hash)) != 0) {
 8017abc:	4631      	mov	r1, r6
 8017abe:	4628      	mov	r0, r5
 8017ac0:	f7f8 fac4 	bl	801004c <wc_Sha512_256Final>
 8017ac4:	4604      	mov	r4, r0
                WOLFSSL_MSG("wc_Sha512_256_Final failed");
            }
            wc_Sha512_256Free(sha512);
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f7f8 fba7 	bl	801021a <wc_Sha512_256Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017acc:	4628      	mov	r0, r5
 8017ace:	f003 fa6f 	bl	801afb0 <free>
    #endif

        return ret;
    }
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return MEMORY_E;
 8017ad8:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8017adc:	e7f9      	b.n	8017ad2 <wc_Sha512_256Hash+0x40>

08017ade <wc_Hash>:
{
 8017ade:	b570      	push	{r4, r5, r6, lr}
 8017ae0:	4605      	mov	r5, r0
 8017ae2:	460c      	mov	r4, r1
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	461a      	mov	r2, r3
    dig_size = wc_HashGetDigestSize(hash_type);
 8017ae8:	f7ff fe80 	bl	80177ec <wc_HashGetDigestSize>
    if (dig_size < 0) {
 8017aec:	2800      	cmp	r0, #0
{
 8017aee:	9e04      	ldr	r6, [sp, #16]
    if (dig_size < 0) {
 8017af0:	db10      	blt.n	8017b14 <wc_Hash+0x36>
    if (hash_len < (word32)dig_size) {
 8017af2:	42b0      	cmp	r0, r6
 8017af4:	d828      	bhi.n	8017b48 <wc_Hash+0x6a>
    switch(hash_type)
 8017af6:	1ee8      	subs	r0, r5, #3
 8017af8:	280e      	cmp	r0, #14
 8017afa:	d809      	bhi.n	8017b10 <wc_Hash+0x32>
 8017afc:	e8df f000 	tbb	[pc, r0]
 8017b00:	10270b27 	.word	0x10270b27
 8017b04:	27271527 	.word	0x27271527
 8017b08:	08272727 	.word	0x08272727
 8017b0c:	1a08      	.short	0x1a08
 8017b0e:	1f          	.byte	0x1f
 8017b0f:	00          	.byte	0x00
 8017b10:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8017b14:	bd70      	pop	{r4, r5, r6, pc}
            ret = wc_ShaHash(data, data_len, hash);
 8017b16:	4620      	mov	r0, r4
}
 8017b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_ShaHash(data, data_len, hash);
 8017b1c:	f7ff bf1b 	b.w	8017956 <wc_ShaHash>
            ret = wc_Sha256Hash(data, data_len, hash);
 8017b20:	4620      	mov	r0, r4
}
 8017b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha256Hash(data, data_len, hash);
 8017b26:	f7ff bf3f 	b.w	80179a8 <wc_Sha256Hash>
            ret = wc_Sha512Hash(data, data_len, hash);
 8017b2a:	4620      	mov	r0, r4
}
 8017b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512Hash(data, data_len, hash);
 8017b30:	f7ff bf63 	b.w	80179fa <wc_Sha512Hash>
            ret = wc_Sha512_224Hash(data, data_len, hash);
 8017b34:	4620      	mov	r0, r4
}
 8017b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512_224Hash(data, data_len, hash);
 8017b3a:	f7ff bf84 	b.w	8017a46 <wc_Sha512_224Hash>
            ret = wc_Sha512_256Hash(data, data_len, hash);
 8017b3e:	4620      	mov	r0, r4
}
 8017b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = wc_Sha512_256Hash(data, data_len, hash);
 8017b44:	f7ff bfa5 	b.w	8017a92 <wc_Sha512_256Hash>
        return BUFFER_E;
 8017b48:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8017b4c:	e7e2      	b.n	8017b14 <wc_Hash+0x36>
    int ret = HASH_TYPE_E; /* Default to hash type error */
 8017b4e:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
 8017b52:	e7df      	b.n	8017b14 <wc_Hash+0x36>

08017b54 <wolfSSL_SetLoggingCb>:
    return 0;
#else
    (void)f;
    return NOT_COMPILED_IN;
#endif
}
 8017b54:	f06f 00ad 	mvn.w	r0, #173	; 0xad
 8017b58:	4770      	bx	lr

08017b5a <wolfSSL_Debugging_ON>:
#endif /* WOLFSSL_APACHE_MYNEWT */
    return 0;
#else
    return NOT_COMPILED_IN;
#endif
}
 8017b5a:	f06f 00ad 	mvn.w	r0, #173	; 0xad
 8017b5e:	4770      	bx	lr

08017b60 <wolfSSL_Debugging_OFF>:
void wolfSSL_Debugging_OFF(void)
{
#ifdef DEBUG_WOLFSSL
    loggingEnabled = 0;
#endif
}
 8017b60:	4770      	bx	lr

08017b62 <wc_SignatureGetSize>:
}
#endif /* !NO_RSA && !NO_ASN */

int wc_SignatureGetSize(enum wc_SignatureType sig_type,
    const void* key, word32 key_len)
{
 8017b62:	4603      	mov	r3, r0

    /* Suppress possible unused args if all signature types are disabled */
    (void)key;
    (void)key_len;

    switch(sig_type) {
 8017b64:	2b01      	cmp	r3, #1
{
 8017b66:	4608      	mov	r0, r1
    switch(sig_type) {
 8017b68:	d007      	beq.n	8017b7a <wc_SignatureGetSize+0x18>
 8017b6a:	3b02      	subs	r3, #2
 8017b6c:	2b01      	cmp	r3, #1
 8017b6e:	bf94      	ite	ls
 8017b70:	f06f 00e6 	mvnls.w	r0, #230	; 0xe6
 8017b74:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
 8017b78:	4770      	bx	lr
        case WC_SIGNATURE_TYPE_ECC:
#ifdef HAVE_ECC
            /* Sanity check that void* key is at least ecc_key in size */
            if (key_len >= sizeof(ecc_key)) {
 8017b7a:	f5b2 7fde 	cmp.w	r2, #444	; 0x1bc
 8017b7e:	d301      	bcc.n	8017b84 <wc_SignatureGetSize+0x22>
                sig_len = wc_ecc_sig_size((ecc_key*)key);
 8017b80:	f7f4 bb53 	b.w	800c22a <wc_ecc_sig_size>
    int sig_len = BAD_FUNC_ARG;
 8017b84:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        default:
            sig_len = BAD_FUNC_ARG;
            break;
    }
    return sig_len;
}
 8017b88:	4770      	bx	lr

08017b8a <wc_SignatureVerifyHash>:
int wc_SignatureVerifyHash(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* hash_data, word32 hash_len,
    const byte* sig, word32 sig_len,
    const void* key, word32 key_len)
{
 8017b8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b8e:	461e      	mov	r6, r3
 8017b90:	e9dd 970c 	ldrd	r9, r7, [sp, #48]	; 0x30
 8017b94:	e9dd 830e 	ldrd	r8, r3, [sp, #56]	; 0x38
 8017b98:	4682      	mov	sl, r0
 8017b9a:	460c      	mov	r4, r1
    int ret;

    /* Check arguments */
    if (hash_data == NULL || hash_len == 0 ||
 8017b9c:	4615      	mov	r5, r2
 8017b9e:	b922      	cbnz	r2, 8017baa <wc_SignatureVerifyHash+0x20>
        sig == NULL || sig_len == 0 ||
        key == NULL || key_len == 0) {
        return BAD_FUNC_ARG;
 8017ba0:	f06f 00ac 	mvn.w	r0, #172	; 0xac
            ret = BAD_FUNC_ARG;
            break;
    }

    return ret;
}
 8017ba4:	b004      	add	sp, #16
 8017ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (hash_data == NULL || hash_len == 0 ||
 8017baa:	2e00      	cmp	r6, #0
 8017bac:	d0f8      	beq.n	8017ba0 <wc_SignatureVerifyHash+0x16>
 8017bae:	f1b9 0f00 	cmp.w	r9, #0
 8017bb2:	d0f5      	beq.n	8017ba0 <wc_SignatureVerifyHash+0x16>
        sig == NULL || sig_len == 0 ||
 8017bb4:	2f00      	cmp	r7, #0
 8017bb6:	d0f3      	beq.n	8017ba0 <wc_SignatureVerifyHash+0x16>
 8017bb8:	f1b8 0f00 	cmp.w	r8, #0
 8017bbc:	d0f0      	beq.n	8017ba0 <wc_SignatureVerifyHash+0x16>
        key == NULL || key_len == 0) {
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d0ee      	beq.n	8017ba0 <wc_SignatureVerifyHash+0x16>
    if ((int)sig_len > wc_SignatureGetSize(sig_type, key, key_len)) {
 8017bc2:	461a      	mov	r2, r3
 8017bc4:	4641      	mov	r1, r8
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f7ff ffcb 	bl	8017b62 <wc_SignatureGetSize>
 8017bcc:	42b8      	cmp	r0, r7
 8017bce:	dbe7      	blt.n	8017ba0 <wc_SignatureVerifyHash+0x16>
    ret = wc_HashGetDigestSize(hash_type);
 8017bd0:	4650      	mov	r0, sl
 8017bd2:	f7ff fe0b 	bl	80177ec <wc_HashGetDigestSize>
    if (ret < 0) {
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	dbe4      	blt.n	8017ba4 <wc_SignatureVerifyHash+0x1a>
    switch (sig_type) {
 8017bda:	2c01      	cmp	r4, #1
 8017bdc:	d007      	beq.n	8017bee <wc_SignatureVerifyHash+0x64>
 8017bde:	3c02      	subs	r4, #2
 8017be0:	2c01      	cmp	r4, #1
 8017be2:	bf94      	ite	ls
 8017be4:	f06f 00e6 	mvnls.w	r0, #230	; 0xe6
 8017be8:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
 8017bec:	e7da      	b.n	8017ba4 <wc_SignatureVerifyHash+0x1a>
            int is_valid_sig = 0;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	9303      	str	r3, [sp, #12]
                ret = wc_ecc_verify_hash(sig, sig_len, hash_data, hash_len,
 8017bf2:	ab03      	add	r3, sp, #12
 8017bf4:	9300      	str	r3, [sp, #0]
 8017bf6:	f8cd 8004 	str.w	r8, [sp, #4]
 8017bfa:	4633      	mov	r3, r6
 8017bfc:	462a      	mov	r2, r5
 8017bfe:	4639      	mov	r1, r7
 8017c00:	4648      	mov	r0, r9
 8017c02:	f7f3 fe31 	bl	800b868 <wc_ecc_verify_hash>
            } while (ret == WC_PENDING_E);
 8017c06:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8017c0a:	d100      	bne.n	8017c0e <wc_SignatureVerifyHash+0x84>
 8017c0c:	e7fe      	b.n	8017c0c <wc_SignatureVerifyHash+0x82>
            if (ret != 0 || is_valid_sig != 1) {
 8017c0e:	b928      	cbnz	r0, 8017c1c <wc_SignatureVerifyHash+0x92>
 8017c10:	9b03      	ldr	r3, [sp, #12]
                ret = SIG_VERIFY_E;
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	bf18      	it	ne
 8017c16:	f06f 00e4 	mvnne.w	r0, #228	; 0xe4
 8017c1a:	e7c3      	b.n	8017ba4 <wc_SignatureVerifyHash+0x1a>
 8017c1c:	f06f 00e4 	mvn.w	r0, #228	; 0xe4
 8017c20:	e7c0      	b.n	8017ba4 <wc_SignatureVerifyHash+0x1a>

08017c22 <wc_SignatureVerify>:
int wc_SignatureVerify(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* data, word32 data_len,
    const byte* sig, word32 sig_len,
    const void* key, word32 key_len)
{
 8017c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c26:	b085      	sub	sp, #20
 8017c28:	4605      	mov	r5, r0
 8017c2a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8017c2e:	460e      	mov	r6, r1
 8017c30:	4698      	mov	r8, r3
#else
    byte hash_data[MAX_DER_DIGEST_SZ];
#endif

    /* Check arguments */
    if (data == NULL || data_len == 0 ||
 8017c32:	4617      	mov	r7, r2
 8017c34:	b92a      	cbnz	r2, 8017c42 <wc_SignatureVerify+0x20>
        sig == NULL || sig_len == 0 ||
        key == NULL || key_len == 0) {
        return BAD_FUNC_ARG;
 8017c36:	f06f 09ac 	mvn.w	r9, #172	; 0xac
#if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
    XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return ret;
}
 8017c3a:	4648      	mov	r0, r9
 8017c3c:	b005      	add	sp, #20
 8017c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data == NULL || data_len == 0 ||
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d0f7      	beq.n	8017c36 <wc_SignatureVerify+0x14>
 8017c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d0f4      	beq.n	8017c36 <wc_SignatureVerify+0x14>
        sig == NULL || sig_len == 0 ||
 8017c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d0f1      	beq.n	8017c36 <wc_SignatureVerify+0x14>
 8017c52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d0ee      	beq.n	8017c36 <wc_SignatureVerify+0x14>
        key == NULL || key_len == 0) {
 8017c58:	f1ba 0f00 	cmp.w	sl, #0
 8017c5c:	d0eb      	beq.n	8017c36 <wc_SignatureVerify+0x14>
    if ((int)sig_len > wc_SignatureGetSize(sig_type, key, key_len)) {
 8017c5e:	4619      	mov	r1, r3
 8017c60:	4652      	mov	r2, sl
 8017c62:	4630      	mov	r0, r6
 8017c64:	f7ff ff7d 	bl	8017b62 <wc_SignatureGetSize>
 8017c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c6a:	4298      	cmp	r0, r3
 8017c6c:	dbe3      	blt.n	8017c36 <wc_SignatureVerify+0x14>
    ret = wc_HashGetDigestSize(hash_type);
 8017c6e:	4628      	mov	r0, r5
 8017c70:	f7ff fdbc 	bl	80177ec <wc_HashGetDigestSize>
    if (ret < 0) {
 8017c74:	f1b0 0900 	subs.w	r9, r0, #0
 8017c78:	dbdf      	blt.n	8017c3a <wc_SignatureVerify+0x18>
    hash_data = (byte*)XMALLOC(hash_enc_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017c7a:	f003 f991 	bl	801afa0 <malloc>
    hash_enc_len = hash_len = (word32)ret;
 8017c7e:	46cb      	mov	fp, r9
    if (hash_data == NULL) {
 8017c80:	4604      	mov	r4, r0
 8017c82:	b308      	cbz	r0, 8017cc8 <wc_SignatureVerify+0xa6>
    ret = wc_Hash(hash_type, data, data_len, hash_data, hash_len);
 8017c84:	f8cd 9000 	str.w	r9, [sp]
 8017c88:	4603      	mov	r3, r0
 8017c8a:	4642      	mov	r2, r8
 8017c8c:	4639      	mov	r1, r7
 8017c8e:	4628      	mov	r0, r5
 8017c90:	f7ff ff25 	bl	8017ade <wc_Hash>
    if (ret == 0) {
 8017c94:	4681      	mov	r9, r0
 8017c96:	b980      	cbnz	r0, 8017cba <wc_SignatureVerify+0x98>
        if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 8017c98:	2e03      	cmp	r6, #3
 8017c9a:	d012      	beq.n	8017cc2 <wc_SignatureVerify+0xa0>
            ret = wc_SignatureVerifyHash(hash_type, sig_type,
 8017c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c9e:	9302      	str	r3, [sp, #8]
 8017ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ca2:	9301      	str	r3, [sp, #4]
 8017ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ca6:	9300      	str	r3, [sp, #0]
 8017ca8:	f8cd a00c 	str.w	sl, [sp, #12]
 8017cac:	465b      	mov	r3, fp
 8017cae:	4622      	mov	r2, r4
 8017cb0:	4631      	mov	r1, r6
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	f7ff ff69 	bl	8017b8a <wc_SignatureVerifyHash>
 8017cb8:	4681      	mov	r9, r0
    XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f003 f978 	bl	801afb0 <free>
    return ret;
 8017cc0:	e7bb      	b.n	8017c3a <wc_SignatureVerify+0x18>
            ret = SIG_TYPE_E;
 8017cc2:	f06f 09e6 	mvn.w	r9, #230	; 0xe6
 8017cc6:	e7f8      	b.n	8017cba <wc_SignatureVerify+0x98>
        return MEMORY_E;
 8017cc8:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 8017ccc:	e7b5      	b.n	8017c3a <wc_SignatureVerify+0x18>

08017cce <wc_SignatureGenerateHash_ex>:
int wc_SignatureGenerateHash_ex(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* hash_data, word32 hash_len,
    byte* sig, word32 *sig_len,
    const void* key, word32 key_len, WC_RNG* rng, int verify)
{
 8017cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd2:	b087      	sub	sp, #28
 8017cd4:	461e      	mov	r6, r3
 8017cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cd8:	9303      	str	r3, [sp, #12]
 8017cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017cdc:	9304      	str	r3, [sp, #16]
 8017cde:	e9dd a810 	ldrd	sl, r8, [sp, #64]	; 0x40
 8017ce2:	e9dd 9b12 	ldrd	r9, fp, [sp, #72]	; 0x48
 8017ce6:	4607      	mov	r7, r0
 8017ce8:	460c      	mov	r4, r1

    /* Suppress possible unused arg if all signature types are disabled */
    (void)rng;

    /* Check arguments */
    if (hash_data == NULL || hash_len == 0 ||
 8017cea:	4615      	mov	r5, r2
 8017cec:	b922      	cbnz	r2, 8017cf8 <wc_SignatureGenerateHash_ex+0x2a>
        sig == NULL || sig_len == NULL || *sig_len == 0 ||
        key == NULL || key_len == 0) {
        return BAD_FUNC_ARG;
 8017cee:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        ret = wc_SignatureVerifyHash(hash_type, sig_type, hash_data, hash_len,
            sig, *sig_len, key, key_len);
    }

    return ret;
}
 8017cf2:	b007      	add	sp, #28
 8017cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (hash_data == NULL || hash_len == 0 ||
 8017cf8:	2e00      	cmp	r6, #0
 8017cfa:	d0f8      	beq.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
 8017cfc:	f1ba 0f00 	cmp.w	sl, #0
 8017d00:	d0f5      	beq.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
        sig == NULL || sig_len == NULL || *sig_len == 0 ||
 8017d02:	f1b8 0f00 	cmp.w	r8, #0
 8017d06:	d0f2      	beq.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
 8017d08:	f8d8 3000 	ldr.w	r3, [r8]
 8017d0c:	9305      	str	r3, [sp, #20]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d0ed      	beq.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
 8017d12:	f1b9 0f00 	cmp.w	r9, #0
 8017d16:	d0ea      	beq.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
        key == NULL || key_len == 0) {
 8017d18:	f1bb 0f00 	cmp.w	fp, #0
 8017d1c:	d0e7      	beq.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
    if ((int)*sig_len < wc_SignatureGetSize(sig_type, key, key_len)) {
 8017d1e:	465a      	mov	r2, fp
 8017d20:	4649      	mov	r1, r9
 8017d22:	4620      	mov	r0, r4
 8017d24:	f7ff ff1d 	bl	8017b62 <wc_SignatureGetSize>
 8017d28:	9b05      	ldr	r3, [sp, #20]
 8017d2a:	4283      	cmp	r3, r0
 8017d2c:	dbdf      	blt.n	8017cee <wc_SignatureGenerateHash_ex+0x20>
    ret = wc_HashGetDigestSize(hash_type);
 8017d2e:	4638      	mov	r0, r7
 8017d30:	f7ff fd5c 	bl	80177ec <wc_HashGetDigestSize>
    if (ret < 0) {
 8017d34:	2800      	cmp	r0, #0
 8017d36:	dbdc      	blt.n	8017cf2 <wc_SignatureGenerateHash_ex+0x24>
    switch (sig_type) {
 8017d38:	2c01      	cmp	r4, #1
 8017d3a:	d007      	beq.n	8017d4c <wc_SignatureGenerateHash_ex+0x7e>
 8017d3c:	3c02      	subs	r4, #2
            ret = BAD_FUNC_ARG;
 8017d3e:	2c01      	cmp	r4, #1
 8017d40:	bf94      	ite	ls
 8017d42:	f06f 00e6 	mvnls.w	r0, #230	; 0xe6
 8017d46:	f06f 00ac 	mvnhi.w	r0, #172	; 0xac
 8017d4a:	e7d2      	b.n	8017cf2 <wc_SignatureGenerateHash_ex+0x24>
                ret = wc_ecc_sign_hash(hash_data, hash_len, sig, sig_len,
 8017d4c:	9b03      	ldr	r3, [sp, #12]
 8017d4e:	9300      	str	r3, [sp, #0]
 8017d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d54:	4643      	mov	r3, r8
 8017d56:	4652      	mov	r2, sl
 8017d58:	4631      	mov	r1, r6
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	f7f3 f99a 	bl	800b094 <wc_ecc_sign_hash>
            } while (ret == WC_PENDING_E);
 8017d60:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8017d64:	d100      	bne.n	8017d68 <wc_SignatureGenerateHash_ex+0x9a>
 8017d66:	e7fe      	b.n	8017d66 <wc_SignatureGenerateHash_ex+0x98>
    if (ret == 0 && verify) {
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	d1c2      	bne.n	8017cf2 <wc_SignatureGenerateHash_ex+0x24>
 8017d6c:	9b04      	ldr	r3, [sp, #16]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d0bf      	beq.n	8017cf2 <wc_SignatureGenerateHash_ex+0x24>
        ret = wc_SignatureVerifyHash(hash_type, sig_type, hash_data, hash_len,
 8017d72:	e9cd 9b12 	strd	r9, fp, [sp, #72]	; 0x48
 8017d76:	f8d8 3000 	ldr.w	r3, [r8]
 8017d7a:	462a      	mov	r2, r5
 8017d7c:	e9cd a310 	strd	sl, r3, [sp, #64]	; 0x40
 8017d80:	2101      	movs	r1, #1
 8017d82:	4633      	mov	r3, r6
 8017d84:	4638      	mov	r0, r7
}
 8017d86:	b007      	add	sp, #28
 8017d88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = wc_SignatureVerifyHash(hash_type, sig_type, hash_data, hash_len,
 8017d8c:	f7ff befd 	b.w	8017b8a <wc_SignatureVerifyHash>

08017d90 <wc_SignatureGenerateHash>:
{
 8017d90:	b510      	push	{r4, lr}
 8017d92:	b086      	sub	sp, #24
    return wc_SignatureGenerateHash_ex(hash_type, sig_type, hash_data, hash_len,
 8017d94:	2401      	movs	r4, #1
 8017d96:	9405      	str	r4, [sp, #20]
 8017d98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017d9a:	9404      	str	r4, [sp, #16]
 8017d9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017d9e:	9403      	str	r4, [sp, #12]
 8017da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017da2:	9402      	str	r4, [sp, #8]
 8017da4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017da6:	9401      	str	r4, [sp, #4]
 8017da8:	9c08      	ldr	r4, [sp, #32]
 8017daa:	9400      	str	r4, [sp, #0]
 8017dac:	f7ff ff8f 	bl	8017cce <wc_SignatureGenerateHash_ex>
}
 8017db0:	b006      	add	sp, #24
 8017db2:	bd10      	pop	{r4, pc}

08017db4 <wc_SignatureGenerate_ex>:
int wc_SignatureGenerate_ex(
    enum wc_HashType hash_type, enum wc_SignatureType sig_type,
    const byte* data, word32 data_len,
    byte* sig, word32 *sig_len,
    const void* key, word32 key_len, WC_RNG* rng, int verify)
{
 8017db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db8:	b087      	sub	sp, #28
 8017dba:	4605      	mov	r5, r0
 8017dbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8017dc0:	460e      	mov	r6, r1
 8017dc2:	4698      	mov	r8, r3
#else
    byte hash_data[MAX_DER_DIGEST_SZ];
#endif

    /* Check arguments */
    if (data == NULL || data_len == 0 ||
 8017dc4:	4617      	mov	r7, r2
 8017dc6:	b92a      	cbnz	r2, 8017dd4 <wc_SignatureGenerate_ex+0x20>
        sig == NULL || sig_len == NULL || *sig_len == 0 ||
        key == NULL || key_len == 0) {
        return BAD_FUNC_ARG;
 8017dc8:	f06f 09ac 	mvn.w	r9, #172	; 0xac
#if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
    XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return ret;
}
 8017dcc:	4648      	mov	r0, r9
 8017dce:	b007      	add	sp, #28
 8017dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data == NULL || data_len == 0 ||
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d0f7      	beq.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
 8017dd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d0f4      	beq.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
        sig == NULL || sig_len == NULL || *sig_len == 0 ||
 8017dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d0f1      	beq.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
 8017de4:	681c      	ldr	r4, [r3, #0]
 8017de6:	2c00      	cmp	r4, #0
 8017de8:	d0ee      	beq.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
 8017dea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d0eb      	beq.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
        key == NULL || key_len == 0) {
 8017df0:	f1ba 0f00 	cmp.w	sl, #0
 8017df4:	d0e8      	beq.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
    if ((int)*sig_len < wc_SignatureGetSize(sig_type, key, key_len)) {
 8017df6:	4652      	mov	r2, sl
 8017df8:	4619      	mov	r1, r3
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	f7ff feb1 	bl	8017b62 <wc_SignatureGetSize>
 8017e00:	4284      	cmp	r4, r0
 8017e02:	dbe1      	blt.n	8017dc8 <wc_SignatureGenerate_ex+0x14>
    ret = wc_HashGetDigestSize(hash_type);
 8017e04:	4628      	mov	r0, r5
 8017e06:	f7ff fcf1 	bl	80177ec <wc_HashGetDigestSize>
    if (ret < 0) {
 8017e0a:	f1b0 0900 	subs.w	r9, r0, #0
 8017e0e:	dbdd      	blt.n	8017dcc <wc_SignatureGenerate_ex+0x18>
    hash_data = (byte*)XMALLOC(hash_enc_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017e10:	f003 f8c6 	bl	801afa0 <malloc>
    hash_enc_len = hash_len = (word32)ret;
 8017e14:	46cb      	mov	fp, r9
    if (hash_data == NULL) {
 8017e16:	4604      	mov	r4, r0
 8017e18:	b320      	cbz	r0, 8017e64 <wc_SignatureGenerate_ex+0xb0>
    ret = wc_Hash(hash_type, data, data_len, hash_data, hash_len);
 8017e1a:	f8cd 9000 	str.w	r9, [sp]
 8017e1e:	4603      	mov	r3, r0
 8017e20:	4642      	mov	r2, r8
 8017e22:	4639      	mov	r1, r7
 8017e24:	4628      	mov	r0, r5
 8017e26:	f7ff fe5a 	bl	8017ade <wc_Hash>
    if (ret == 0) {
 8017e2a:	4681      	mov	r9, r0
 8017e2c:	b998      	cbnz	r0, 8017e56 <wc_SignatureGenerate_ex+0xa2>
        if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 8017e2e:	2e03      	cmp	r6, #3
 8017e30:	d015      	beq.n	8017e5e <wc_SignatureGenerate_ex+0xaa>
            ret = wc_SignatureGenerateHash_ex(hash_type, sig_type, hash_data,
 8017e32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e34:	9305      	str	r3, [sp, #20]
 8017e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e38:	e9cd a303 	strd	sl, r3, [sp, #12]
 8017e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017e3e:	9302      	str	r3, [sp, #8]
 8017e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e42:	9301      	str	r3, [sp, #4]
 8017e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e46:	9300      	str	r3, [sp, #0]
 8017e48:	4622      	mov	r2, r4
 8017e4a:	465b      	mov	r3, fp
 8017e4c:	4631      	mov	r1, r6
 8017e4e:	4628      	mov	r0, r5
 8017e50:	f7ff ff3d 	bl	8017cce <wc_SignatureGenerateHash_ex>
 8017e54:	4681      	mov	r9, r0
    XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017e56:	4620      	mov	r0, r4
 8017e58:	f003 f8aa 	bl	801afb0 <free>
    return ret;
 8017e5c:	e7b6      	b.n	8017dcc <wc_SignatureGenerate_ex+0x18>
            ret = SIG_TYPE_E;
 8017e5e:	f06f 09e6 	mvn.w	r9, #230	; 0xe6
 8017e62:	e7f8      	b.n	8017e56 <wc_SignatureGenerate_ex+0xa2>
        return MEMORY_E;
 8017e64:	f06f 097c 	mvn.w	r9, #124	; 0x7c
 8017e68:	e7b0      	b.n	8017dcc <wc_SignatureGenerate_ex+0x18>

08017e6a <wc_SignatureGenerate>:
{
 8017e6a:	b510      	push	{r4, lr}
 8017e6c:	b086      	sub	sp, #24
    return wc_SignatureGenerate_ex(hash_type, sig_type, data, data_len, sig,
 8017e6e:	2401      	movs	r4, #1
 8017e70:	9405      	str	r4, [sp, #20]
 8017e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017e74:	9404      	str	r4, [sp, #16]
 8017e76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017e78:	9403      	str	r4, [sp, #12]
 8017e7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017e7c:	9402      	str	r4, [sp, #8]
 8017e7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017e80:	9401      	str	r4, [sp, #4]
 8017e82:	9c08      	ldr	r4, [sp, #32]
 8017e84:	9400      	str	r4, [sp, #0]
 8017e86:	f7ff ff95 	bl	8017db4 <wc_SignatureGenerate_ex>
}
 8017e8a:	b006      	add	sp, #24
 8017e8c:	bd10      	pop	{r4, pc}

08017e8e <fp_cond_swap_ct_ex>:
}

#endif /* WOLFSSL_KEY_GEN || HAVE_ECC */

static int fp_cond_swap_ct_ex(mp_int* a, mp_int* b, int c, int m, mp_int* t)
{
 8017e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    mp_digit mask = (mp_digit)0 - m;

    t->used = (a->used ^ b->used) & mask;
 8017e90:	680d      	ldr	r5, [r1, #0]
 8017e92:	6804      	ldr	r4, [r0, #0]
{
 8017e94:	9e05      	ldr	r6, [sp, #20]
    t->used = (a->used ^ b->used) & mask;
 8017e96:	406c      	eors	r4, r5
    mp_digit mask = (mp_digit)0 - m;
 8017e98:	425b      	negs	r3, r3
    t->used = (a->used ^ b->used) & mask;
 8017e9a:	401c      	ands	r4, r3
 8017e9c:	6034      	str	r4, [r6, #0]
    for (i = 0; i < c; i++) {
 8017e9e:	2501      	movs	r5, #1
 8017ea0:	f105 0c01 	add.w	ip, r5, #1
 8017ea4:	3d01      	subs	r5, #1
 8017ea6:	42aa      	cmp	r2, r5
 8017ea8:	dc13      	bgt.n	8017ed2 <fp_cond_swap_ct_ex+0x44>
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
    }
    a->used ^= t->used;
 8017eaa:	6803      	ldr	r3, [r0, #0]
 8017eac:	4063      	eors	r3, r4
 8017eae:	f106 0408 	add.w	r4, r6, #8
 8017eb2:	f840 3b08 	str.w	r3, [r0], #8
    for (i = 0; i < c; i++) {
 8017eb6:	46a4      	mov	ip, r4
 8017eb8:	2300      	movs	r3, #0
 8017eba:	4293      	cmp	r3, r2
 8017ebc:	db13      	blt.n	8017ee6 <fp_cond_swap_ct_ex+0x58>
        a->dp[i] ^= t->dp[i];
    }
    b->used ^= t->used;
 8017ebe:	680b      	ldr	r3, [r1, #0]
 8017ec0:	6830      	ldr	r0, [r6, #0]
 8017ec2:	4043      	eors	r3, r0
 8017ec4:	f841 3b08 	str.w	r3, [r1], #8
    for (i = 0; i < c; i++) {
 8017ec8:	2300      	movs	r3, #0
 8017eca:	4293      	cmp	r3, r2
 8017ecc:	db13      	blt.n	8017ef6 <fp_cond_swap_ct_ex+0x68>
        b->dp[i] ^= t->dp[i];
    }

    return FP_OKAY;
}
 8017ece:	2000      	movs	r0, #0
 8017ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 8017ed2:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
 8017ed6:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 8017eda:	407d      	eors	r5, r7
 8017edc:	401d      	ands	r5, r3
 8017ede:	f846 502c 	str.w	r5, [r6, ip, lsl #2]
 8017ee2:	4665      	mov	r5, ip
 8017ee4:	e7dc      	b.n	8017ea0 <fp_cond_swap_ct_ex+0x12>
        a->dp[i] ^= t->dp[i];
 8017ee6:	f85c 5b04 	ldr.w	r5, [ip], #4
 8017eea:	6807      	ldr	r7, [r0, #0]
 8017eec:	407d      	eors	r5, r7
 8017eee:	f840 5b04 	str.w	r5, [r0], #4
    for (i = 0; i < c; i++) {
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	e7e1      	b.n	8017eba <fp_cond_swap_ct_ex+0x2c>
        b->dp[i] ^= t->dp[i];
 8017ef6:	6808      	ldr	r0, [r1, #0]
 8017ef8:	f854 5b04 	ldr.w	r5, [r4], #4
 8017efc:	4068      	eors	r0, r5
 8017efe:	f841 0b04 	str.w	r0, [r1], #4
    for (i = 0; i < c; i++) {
 8017f02:	3301      	adds	r3, #1
 8017f04:	e7e1      	b.n	8017eca <fp_cond_swap_ct_ex+0x3c>

08017f06 <fp_sqr_comba8>:



#ifdef TFM_SQR8
int fp_sqr_comba8(fp_int *A, fp_int *B)
{
 8017f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f0a:	b089      	sub	sp, #36	; 0x24
 8017f0c:	4607      	mov	r7, r0
#else
   fp_digit *b;
#endif

#ifdef WOLFSSL_SMALL_STACK
   b = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017f0e:	2040      	movs	r0, #64	; 0x40
{
 8017f10:	9102      	str	r1, [sp, #8]
   b = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017f12:	f003 f845 	bl	801afa0 <malloc>
   if (b == NULL)
 8017f16:	4606      	mov	r6, r0
 8017f18:	2800      	cmp	r0, #0
 8017f1a:	f000 821d 	beq.w	8018358 <fp_sqr_comba8+0x452>

   /* clear carries */
   CLEAR_CARRY;

   /* output 0 */
   SQRADD(a[0],a[0]);
 8017f1e:	68b8      	ldr	r0, [r7, #8]
   COMBA_STORE(b[0]);

   /* output 1 */
   CARRY_FORWARD;
   SQRADD2(a[0], a[1]); 
 8017f20:	68f9      	ldr	r1, [r7, #12]
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
   COMBA_STORE(b[3]);

   /* output 4 */
   CARRY_FORWARD;
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 8017f22:	f8d7 8018 	ldr.w	r8, [r7, #24]
   SQRADD2(a[0], a[1]); 
 8017f26:	fba0 c501 	umull	ip, r5, r0, r1
   SQRADD(a[0],a[0]);
 8017f2a:	fba0 3400 	umull	r3, r4, r0, r0
   SQRADD2(a[0], a[1]); 
 8017f2e:	eb14 040c 	adds.w	r4, r4, ip
 8017f32:	f145 0200 	adc.w	r2, r5, #0
 8017f36:	eb14 040c 	adds.w	r4, r4, ip
 8017f3a:	6074      	str	r4, [r6, #4]
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 8017f3c:	693c      	ldr	r4, [r7, #16]
   SQRADD(a[0],a[0]);
 8017f3e:	6033      	str	r3, [r6, #0]
   SQRADD2(a[0], a[1]); 
 8017f40:	f145 0500 	adc.w	r5, r5, #0
   SQRADD(a[0],a[0]);
 8017f44:	2300      	movs	r3, #0
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 8017f46:	fba0 ec04 	umull	lr, ip, r0, r4
   SQRADD2(a[0], a[1]); 
 8017f4a:	1952      	adds	r2, r2, r5
 8017f4c:	eb43 0503 	adc.w	r5, r3, r3
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 8017f50:	eb12 020e 	adds.w	r2, r2, lr
 8017f54:	9400      	str	r4, [sp, #0]
 8017f56:	f14c 0400 	adc.w	r4, ip, #0
 8017f5a:	192d      	adds	r5, r5, r4
 8017f5c:	eb43 0403 	adc.w	r4, r3, r3
 8017f60:	eb12 020e 	adds.w	r2, r2, lr
 8017f64:	f14c 0c00 	adc.w	ip, ip, #0
 8017f68:	eb1c 0c05 	adds.w	ip, ip, r5
 8017f6c:	461d      	mov	r5, r3
 8017f6e:	fbe1 2501 	umlal	r2, r5, r1, r1
 8017f72:	60b2      	str	r2, [r6, #8]
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 8017f74:	697a      	ldr	r2, [r7, #20]
 8017f76:	9201      	str	r2, [sp, #4]
 8017f78:	fba0 a902 	umull	sl, r9, r0, r2
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 8017f7c:	f144 0400 	adc.w	r4, r4, #0
 8017f80:	eb1c 0c05 	adds.w	ip, ip, r5
 8017f84:	eb43 0503 	adc.w	r5, r3, r3
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 8017f88:	eb1c 0c0a 	adds.w	ip, ip, sl
 8017f8c:	f149 0200 	adc.w	r2, r9, #0
   SQRADD2(a[0], a[2]); SQRADD(a[1], a[1]); 
 8017f90:	eb04 0e05 	add.w	lr, r4, r5
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 8017f94:	eb1e 0e02 	adds.w	lr, lr, r2
 8017f98:	eb43 0503 	adc.w	r5, r3, r3
 8017f9c:	9a00      	ldr	r2, [sp, #0]
 8017f9e:	eb1c 0c0a 	adds.w	ip, ip, sl
 8017fa2:	f149 0900 	adc.w	r9, r9, #0
 8017fa6:	eb1e 0e09 	adds.w	lr, lr, r9
 8017faa:	fba1 a902 	umull	sl, r9, r1, r2
 8017fae:	f145 0500 	adc.w	r5, r5, #0
 8017fb2:	eb1c 0c0a 	adds.w	ip, ip, sl
 8017fb6:	f149 0200 	adc.w	r2, r9, #0
 8017fba:	eb1e 0e02 	adds.w	lr, lr, r2
 8017fbe:	f145 0500 	adc.w	r5, r5, #0
 8017fc2:	eb1c 0c0a 	adds.w	ip, ip, sl
 8017fc6:	f149 0200 	adc.w	r2, r9, #0
 8017fca:	eb12 020e 	adds.w	r2, r2, lr
 8017fce:	f8c6 c00c 	str.w	ip, [r6, #12]
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 8017fd2:	fba0 ec08 	umull	lr, ip, r0, r8
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 8017fd6:	eb43 0403 	adc.w	r4, r3, r3
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 8017fda:	eb12 020e 	adds.w	r2, r2, lr
 8017fde:	f14c 0900 	adc.w	r9, ip, #0
   SQRADD2(a[0], a[3]); SQRADD2(a[1], a[2]); 
 8017fe2:	442c      	add	r4, r5
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 8017fe4:	eb14 0409 	adds.w	r4, r4, r9
 8017fe8:	eb43 0b03 	adc.w	fp, r3, r3
 8017fec:	9d01      	ldr	r5, [sp, #4]
   COMBA_STORE(b[4]);

   /* output 5 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 8017fee:	f8d7 901c 	ldr.w	r9, [r7, #28]
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 8017ff2:	eb12 020e 	adds.w	r2, r2, lr
 8017ff6:	f14c 0c00 	adc.w	ip, ip, #0
 8017ffa:	fba1 e505 	umull	lr, r5, r1, r5
 8017ffe:	eb14 040c 	adds.w	r4, r4, ip
 8018002:	f14b 0b00 	adc.w	fp, fp, #0
 8018006:	eb12 020e 	adds.w	r2, r2, lr
 801800a:	f145 0c00 	adc.w	ip, r5, #0
 801800e:	eb14 040c 	adds.w	r4, r4, ip
 8018012:	f14b 0b00 	adc.w	fp, fp, #0
 8018016:	eb12 020e 	adds.w	r2, r2, lr
 801801a:	f8dd c000 	ldr.w	ip, [sp]
 801801e:	f145 0500 	adc.w	r5, r5, #0
 8018022:	192c      	adds	r4, r5, r4
 8018024:	461d      	mov	r5, r3
 8018026:	fbec 250c 	umlal	r2, r5, ip, ip
 801802a:	f14b 0b00 	adc.w	fp, fp, #0
 801802e:	6132      	str	r2, [r6, #16]
 8018030:	1964      	adds	r4, r4, r5
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 8018032:	fba0 2e09 	umull	r2, lr, r0, r9
 8018036:	461d      	mov	r5, r3
 8018038:	fbe1 2508 	umlal	r2, r5, r1, r8
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801803c:	9403      	str	r4, [sp, #12]
 801803e:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 8018042:	e9dd a400 	ldrd	sl, r4, [sp]
 8018046:	eb1e 0e05 	adds.w	lr, lr, r5
 801804a:	eb43 0503 	adc.w	r5, r3, r3
 801804e:	9504      	str	r5, [sp, #16]
 8018050:	461d      	mov	r5, r3
 8018052:	fbea 2504 	umlal	r2, r5, sl, r4
 8018056:	eb1e 0e05 	adds.w	lr, lr, r5
 801805a:	eb43 0403 	adc.w	r4, r3, r3
 801805e:	9405      	str	r4, [sp, #20]
 8018060:	9c03      	ldr	r4, [sp, #12]
 8018062:	1892      	adds	r2, r2, r2
 8018064:	eb43 0503 	adc.w	r5, r3, r3
 8018068:	1914      	adds	r4, r2, r4
 801806a:	f145 0500 	adc.w	r5, r5, #0
 801806e:	6174      	str	r4, [r6, #20]
 8018070:	eb1e 0e0e 	adds.w	lr, lr, lr
   COMBA_STORE(b[5]);

   /* output 6 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 8018074:	6a3c      	ldr	r4, [r7, #32]
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 8018076:	eb43 0a03 	adc.w	sl, r3, r3
   SQRADD2(a[0], a[4]); SQRADD2(a[1], a[3]); SQRADD(a[2], a[2]); 
 801807a:	44dc      	add	ip, fp
 801807c:	eb1e 0e05 	adds.w	lr, lr, r5
 8018080:	f14a 0a00 	adc.w	sl, sl, #0
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 8018084:	461a      	mov	r2, r3
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 8018086:	eb1c 0c0e 	adds.w	ip, ip, lr
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801808a:	fba0 5e04 	umull	r5, lr, r0, r4
 801808e:	fbe1 5209 	umlal	r5, r2, r1, r9
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 8018092:	f14a 0a00 	adc.w	sl, sl, #0
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 8018096:	eb1e 0e02 	adds.w	lr, lr, r2
 801809a:	eb43 0203 	adc.w	r2, r3, r3
 801809e:	f8dd b000 	ldr.w	fp, [sp]
 80180a2:	9206      	str	r2, [sp, #24]
 80180a4:	461a      	mov	r2, r3
 80180a6:	fbeb 5208 	umlal	r5, r2, fp, r8
 80180aa:	eb1e 0e02 	adds.w	lr, lr, r2
 80180ae:	eb43 0203 	adc.w	r2, r3, r3
 80180b2:	196d      	adds	r5, r5, r5
 80180b4:	9207      	str	r2, [sp, #28]
 80180b6:	eb43 0203 	adc.w	r2, r3, r3
 80180ba:	eb15 0c0c 	adds.w	ip, r5, ip
 80180be:	f142 0200 	adc.w	r2, r2, #0
 80180c2:	eb1e 0e0e 	adds.w	lr, lr, lr
 80180c6:	eb43 0503 	adc.w	r5, r3, r3
 80180ca:	eb1e 0e02 	adds.w	lr, lr, r2
 80180ce:	f145 0b00 	adc.w	fp, r5, #0
   SQRADDSC(a[0], a[5]); SQRADDAC(a[1], a[4]); SQRADDAC(a[2], a[3]); SQRADDDB; 
 80180d2:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
 80180d6:	442a      	add	r2, r5
 80180d8:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 80180dc:	eb1a 020e 	adds.w	r2, sl, lr
 80180e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80180e4:	469a      	mov	sl, r3
 80180e6:	fbee ca0e 	umlal	ip, sl, lr, lr
 80180ea:	f14b 0500 	adc.w	r5, fp, #0
 80180ee:	eb12 0a0a 	adds.w	sl, r2, sl
 80180f2:	eb43 0203 	adc.w	r2, r3, r3
 80180f6:	9204      	str	r2, [sp, #16]
 80180f8:	f8c6 c018 	str.w	ip, [r6, #24]
   COMBA_STORE(b[6]);

   /* output 7 */
   CARRY_FORWARD;
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 80180fc:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 80180fe:	f8dd e000 	ldr.w	lr, [sp]
 8018102:	fba0 2c07 	umull	r2, ip, r0, r7
 8018106:	4618      	mov	r0, r3
 8018108:	fbe1 2004 	umlal	r2, r0, r1, r4
 801810c:	eb1c 0c00 	adds.w	ip, ip, r0
 8018110:	4618      	mov	r0, r3
 8018112:	fbee 2009 	umlal	r2, r0, lr, r9
 8018116:	eb43 0b03 	adc.w	fp, r3, r3
 801811a:	eb1c 0000 	adds.w	r0, ip, r0
 801811e:	f14b 0c00 	adc.w	ip, fp, #0
 8018122:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018126:	f8cd c00c 	str.w	ip, [sp, #12]
 801812a:	469c      	mov	ip, r3
 801812c:	fbee 2c08 	umlal	r2, ip, lr, r8
 8018130:	eb10 000c 	adds.w	r0, r0, ip
 8018134:	eb43 0e03 	adc.w	lr, r3, r3
 8018138:	1892      	adds	r2, r2, r2
 801813a:	eb43 0c03 	adc.w	ip, r3, r3
 801813e:	eb12 020a 	adds.w	r2, r2, sl
 8018142:	f14c 0c00 	adc.w	ip, ip, #0
 8018146:	1800      	adds	r0, r0, r0
 8018148:	eb43 0b03 	adc.w	fp, r3, r3
 801814c:	eb10 000c 	adds.w	r0, r0, ip
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 8018150:	e9dd ca06 	ldrd	ip, sl, [sp, #24]
 8018154:	44d4      	add	ip, sl
 8018156:	eb05 0c4c 	add.w	ip, r5, ip, lsl #1
 801815a:	9d04      	ldr	r5, [sp, #16]
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801815c:	61f2      	str	r2, [r6, #28]
   SQRADDSC(a[0], a[6]); SQRADDAC(a[1], a[5]); SQRADDAC(a[2], a[4]); SQRADDDB; SQRADD(a[3], a[3]); 
 801815e:	44ac      	add	ip, r5
 8018160:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 8018164:	eb1c 0000 	adds.w	r0, ip, r0
   COMBA_STORE(b[7]);

   /* output 8 */
   CARRY_FORWARD;
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 8018168:	f8dd c000 	ldr.w	ip, [sp]
 801816c:	fba1 1207 	umull	r1, r2, r1, r7
 8018170:	461d      	mov	r5, r3
 8018172:	fbec 1504 	umlal	r1, r5, ip, r4
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 8018176:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801817a:	1952      	adds	r2, r2, r5
 801817c:	eb43 0503 	adc.w	r5, r3, r3
 8018180:	f8dd c004 	ldr.w	ip, [sp, #4]
 8018184:	9504      	str	r5, [sp, #16]
 8018186:	461d      	mov	r5, r3
 8018188:	fbec 1509 	umlal	r1, r5, ip, r9
 801818c:	1952      	adds	r2, r2, r5
 801818e:	eb43 0a03 	adc.w	sl, r3, r3
 8018192:	1849      	adds	r1, r1, r1
 8018194:	eb43 0503 	adc.w	r5, r3, r3
 8018198:	1808      	adds	r0, r1, r0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 801819a:	9903      	ldr	r1, [sp, #12]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801819c:	f145 0500 	adc.w	r5, r5, #0
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 80181a0:	448e      	add	lr, r1
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 80181a2:	1892      	adds	r2, r2, r2
 80181a4:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADDSC(a[0], a[7]); SQRADDAC(a[1], a[6]); SQRADDAC(a[2], a[5]); SQRADDAC(a[3], a[4]); SQRADDDB; 
 80181a8:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 80181ac:	1952      	adds	r2, r2, r5
 80181ae:	f14c 0c00 	adc.w	ip, ip, #0
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 80181b2:	eb1b 0202 	adds.w	r2, fp, r2
 80181b6:	469b      	mov	fp, r3
 80181b8:	fbe8 0b08 	umlal	r0, fp, r8, r8
 80181bc:	f14c 0500 	adc.w	r5, ip, #0
 80181c0:	eb12 0b0b 	adds.w	fp, r2, fp
 80181c4:	eb43 0203 	adc.w	r2, r3, r3
 80181c8:	9203      	str	r2, [sp, #12]
   COMBA_STORE(b[8]);

   /* output 9 */
   CARRY_FORWARD;
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 80181ca:	9a00      	ldr	r2, [sp, #0]
 80181cc:	f8dd c004 	ldr.w	ip, [sp, #4]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 80181d0:	6230      	str	r0, [r6, #32]
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 80181d2:	4619      	mov	r1, r3
 80181d4:	fba2 2007 	umull	r2, r0, r2, r7
 80181d8:	fbec 2104 	umlal	r2, r1, ip, r4
 80181dc:	1840      	adds	r0, r0, r1
 80181de:	4619      	mov	r1, r3
 80181e0:	fbe8 2109 	umlal	r2, r1, r8, r9
 80181e4:	eb43 0c03 	adc.w	ip, r3, r3
 80181e8:	1840      	adds	r0, r0, r1
 80181ea:	eb43 0e03 	adc.w	lr, r3, r3
 80181ee:	1892      	adds	r2, r2, r2
 80181f0:	eb43 0103 	adc.w	r1, r3, r3
 80181f4:	eb12 020b 	adds.w	r2, r2, fp
 80181f8:	f141 0100 	adc.w	r1, r1, #0
 80181fc:	1800      	adds	r0, r0, r0
 80181fe:	eb43 0b03 	adc.w	fp, r3, r3
 8018202:	1840      	adds	r0, r0, r1
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 8018204:	9904      	ldr	r1, [sp, #16]
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 8018206:	6272      	str	r2, [r6, #36]	; 0x24
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 8018208:	448a      	add	sl, r1
 801820a:	9903      	ldr	r1, [sp, #12]
   COMBA_STORE(b[9]);

   /* output 10 */
   CARRY_FORWARD;
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801820c:	9a01      	ldr	r2, [sp, #4]
   SQRADDSC(a[1], a[7]); SQRADDAC(a[2], a[6]); SQRADDAC(a[3], a[5]); SQRADDDB; SQRADD(a[4], a[4]); 
 801820e:	eb05 0a4a 	add.w	sl, r5, sl, lsl #1
 8018212:	448a      	add	sl, r1
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8018214:	fba2 5207 	umull	r5, r2, r2, r7
 8018218:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801821c:	eb1a 0000 	adds.w	r0, sl, r0
 8018220:	44f4      	add	ip, lr
 8018222:	f14b 0b00 	adc.w	fp, fp, #0
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8018226:	1940      	adds	r0, r0, r5
 8018228:	f142 0100 	adc.w	r1, r2, #0
   SQRADDSC(a[2], a[7]); SQRADDAC(a[3], a[6]); SQRADDAC(a[4], a[5]); SQRADDDB; 
 801822c:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8018230:	eb1b 0b01 	adds.w	fp, fp, r1
 8018234:	eb43 0c03 	adc.w	ip, r3, r3
 8018238:	1828      	adds	r0, r5, r0
 801823a:	f142 0200 	adc.w	r2, r2, #0
 801823e:	eb12 0b0b 	adds.w	fp, r2, fp
 8018242:	fba8 5204 	umull	r5, r2, r8, r4
 8018246:	f14c 0c00 	adc.w	ip, ip, #0
 801824a:	1828      	adds	r0, r5, r0
 801824c:	f142 0100 	adc.w	r1, r2, #0
 8018250:	eb11 0b0b 	adds.w	fp, r1, fp
 8018254:	f14c 0c00 	adc.w	ip, ip, #0
 8018258:	182d      	adds	r5, r5, r0
 801825a:	4619      	mov	r1, r3
 801825c:	f142 0200 	adc.w	r2, r2, #0
 8018260:	fbe9 5109 	umlal	r5, r1, r9, r9
 8018264:	eb12 020b 	adds.w	r2, r2, fp
 8018268:	f14c 0000 	adc.w	r0, ip, #0
 801826c:	1852      	adds	r2, r2, r1
   COMBA_STORE(b[10]);

   /* output 11 */
   CARRY_FORWARD;
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801826e:	fba8 c107 	umull	ip, r1, r8, r7
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 8018272:	eb43 0e03 	adc.w	lr, r3, r3
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 8018276:	eb12 020c 	adds.w	r2, r2, ip
   SQRADD2(a[3], a[7]); SQRADD2(a[4], a[6]); SQRADD(a[5], a[5]); 
 801827a:	4470      	add	r0, lr
 801827c:	62b5      	str	r5, [r6, #40]	; 0x28
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 801827e:	f141 0500 	adc.w	r5, r1, #0
 8018282:	1940      	adds	r0, r0, r5
 8018284:	eb43 0503 	adc.w	r5, r3, r3
 8018288:	eb1c 0202 	adds.w	r2, ip, r2
 801828c:	f141 0100 	adc.w	r1, r1, #0
 8018290:	1809      	adds	r1, r1, r0
 8018292:	fba9 e004 	umull	lr, r0, r9, r4
 8018296:	f145 0500 	adc.w	r5, r5, #0
 801829a:	eb1e 0202 	adds.w	r2, lr, r2
 801829e:	f140 0c00 	adc.w	ip, r0, #0
 80182a2:	eb1c 0c01 	adds.w	ip, ip, r1
 80182a6:	f145 0500 	adc.w	r5, r5, #0
 80182aa:	eb1e 0202 	adds.w	r2, lr, r2
 80182ae:	f140 0100 	adc.w	r1, r0, #0
 80182b2:	eb11 010c 	adds.w	r1, r1, ip
 80182b6:	62f2      	str	r2, [r6, #44]	; 0x2c
   COMBA_STORE(b[11]);

   /* output 12 */
   CARRY_FORWARD;
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80182b8:	fba9 0207 	umull	r0, r2, r9, r7
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 80182bc:	eb43 0e03 	adc.w	lr, r3, r3
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80182c0:	1841      	adds	r1, r0, r1
 80182c2:	f142 0c00 	adc.w	ip, r2, #0
   SQRADD2(a[4], a[7]); SQRADD2(a[5], a[6]); 
 80182c6:	4475      	add	r5, lr
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80182c8:	eb15 050c 	adds.w	r5, r5, ip
 80182cc:	eb43 0c03 	adc.w	ip, r3, r3
 80182d0:	1841      	adds	r1, r0, r1
 80182d2:	f142 0200 	adc.w	r2, r2, #0
 80182d6:	1952      	adds	r2, r2, r5
 80182d8:	461d      	mov	r5, r3
 80182da:	fbe4 1504 	umlal	r1, r5, r4, r4
 80182de:	f14c 0000 	adc.w	r0, ip, #0
 80182e2:	6331      	str	r1, [r6, #48]	; 0x30
 80182e4:	1952      	adds	r2, r2, r5
   COMBA_STORE(b[12]);

   /* output 13 */
   CARRY_FORWARD;
   SQRADD2(a[6], a[7]); 
 80182e6:	fba4 4107 	umull	r4, r1, r4, r7
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80182ea:	eb43 0c03 	adc.w	ip, r3, r3
   SQRADD2(a[6], a[7]); 
 80182ee:	1912      	adds	r2, r2, r4
 80182f0:	f141 0500 	adc.w	r5, r1, #0
   SQRADD2(a[5], a[7]); SQRADD(a[6], a[6]); 
 80182f4:	4460      	add	r0, ip
   SQRADD2(a[6], a[7]); 
 80182f6:	1940      	adds	r0, r0, r5
 80182f8:	eb43 0503 	adc.w	r5, r3, r3
 80182fc:	18a4      	adds	r4, r4, r2
 80182fe:	f141 0200 	adc.w	r2, r1, #0
 8018302:	1812      	adds	r2, r2, r0
   COMBA_STORE(b[13]);

   /* output 14 */
   CARRY_FORWARD;
   SQRADD(a[7], a[7]); 
 8018304:	4619      	mov	r1, r3
 8018306:	fbe7 2107 	umlal	r2, r1, r7, r7
 801830a:	eb45 0101 	adc.w	r1, r5, r1
 801830e:	63f1      	str	r1, [r6, #60]	; 0x3c
   COMBA_STORE(b[14]);
   COMBA_STORE2(b[15]);
   COMBA_FINI;

   B->used = 16;
 8018310:	9902      	ldr	r1, [sp, #8]
   SQRADD(a[7], a[7]); 
 8018312:	63b2      	str	r2, [r6, #56]	; 0x38
   B->sign = FP_ZPOS;
 8018314:	604b      	str	r3, [r1, #4]
   XMEMCPY(B->dp, b, 16 * sizeof(fp_digit));
 8018316:	9b02      	ldr	r3, [sp, #8]
   SQRADD2(a[6], a[7]); 
 8018318:	6374      	str	r4, [r6, #52]	; 0x34
   B->used = 16;
 801831a:	2210      	movs	r2, #16
 801831c:	600a      	str	r2, [r1, #0]
   XMEMCPY(B->dp, b, 16 * sizeof(fp_digit));
 801831e:	f103 0008 	add.w	r0, r3, #8
 8018322:	2240      	movs	r2, #64	; 0x40
 8018324:	4631      	mov	r1, r6
 8018326:	f002 fe5b 	bl	801afe0 <memcpy>
   fp_clamp(B);
 801832a:	9b02      	ldr	r3, [sp, #8]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	b13b      	cbz	r3, 8018340 <fp_sqr_comba8+0x43a>
 8018330:	9902      	ldr	r1, [sp, #8]
 8018332:	1e5a      	subs	r2, r3, #1
 8018334:	3301      	adds	r3, #1
 8018336:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801833a:	b153      	cbz	r3, 8018352 <fp_sqr_comba8+0x44c>
 801833c:	9b02      	ldr	r3, [sp, #8]
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	9a02      	ldr	r2, [sp, #8]

#ifdef WOLFSSL_SMALL_STACK
   XFREE(b, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8018342:	4630      	mov	r0, r6
   fp_clamp(B);
 8018344:	6053      	str	r3, [r2, #4]
   XFREE(b, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8018346:	f002 fe33 	bl	801afb0 <free>
#endif
   return FP_OKAY;
 801834a:	2000      	movs	r0, #0
}
 801834c:	b009      	add	sp, #36	; 0x24
 801834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   fp_clamp(B);
 8018352:	9b02      	ldr	r3, [sp, #8]
 8018354:	601a      	str	r2, [r3, #0]
 8018356:	e7e8      	b.n	801832a <fp_sqr_comba8+0x424>
      return FP_MEM;
 8018358:	f06f 0001 	mvn.w	r0, #1
 801835c:	e7f6      	b.n	801834c <fp_sqr_comba8+0x446>

0801835e <fp_mul_comba8>:



#ifdef TFM_MUL8
int fp_mul_comba8(fp_int *A, fp_int *B, fp_int *C)
{
 801835e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018362:	b085      	sub	sp, #20
 8018364:	e9cd 0101 	strd	r0, r1, [sp, #4]
#else
   fp_digit *at;
#endif

#ifdef WOLFSSL_SMALL_STACK
   at = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8018368:	2040      	movs	r0, #64	; 0x40
{
 801836a:	4617      	mov	r7, r2
   at = (fp_digit*)XMALLOC(sizeof(fp_digit) * 16, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801836c:	f002 fe18 	bl	801afa0 <malloc>
   if (at == NULL)
 8018370:	4680      	mov	r8, r0
 8018372:	2800      	cmp	r0, #0
 8018374:	f000 824f 	beq.w	8018816 <fp_mul_comba8+0x4b8>
       return FP_MEM;
#endif

   XMEMCPY(at, A->dp, 8 * sizeof(fp_digit));
 8018378:	9b01      	ldr	r3, [sp, #4]
 801837a:	2220      	movs	r2, #32
 801837c:	f103 0108 	add.w	r1, r3, #8
 8018380:	f002 fe2e 	bl	801afe0 <memcpy>
   XMEMCPY(at+8, B->dp, 8 * sizeof(fp_digit));
 8018384:	9b02      	ldr	r3, [sp, #8]
 8018386:	2220      	movs	r2, #32
 8018388:	f103 0108 	add.w	r1, r3, #8
 801838c:	eb08 0002 	add.w	r0, r8, r2
 8018390:	f002 fe26 	bl	801afe0 <memcpy>
   COMBA_START;

   COMBA_CLEAR;
   /* 0 */
   MULADD(at[0], at[8]); 
 8018394:	f8d8 4000 	ldr.w	r4, [r8]
 8018398:	f8d8 e020 	ldr.w	lr, [r8, #32]
   COMBA_STORE(C->dp[0]);
   /* 1 */
   COMBA_FORWARD;
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 801839c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[1]);
   /* 2 */
   COMBA_FORWARD;
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80183a0:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[2]);
   /* 3 */
   COMBA_FORWARD;
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 80183a4:	f8d8 9008 	ldr.w	r9, [r8, #8]
   COMBA_FORWARD;
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
   COMBA_STORE(C->dp[4]);
   /* 5 */
   COMBA_FORWARD;
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80183a8:	f8d8 a02c 	ldr.w	sl, [r8, #44]	; 0x2c
   MULADD(at[0], at[8]); 
 80183ac:	fba4 320e 	umull	r3, r2, r4, lr
 80183b0:	60bb      	str	r3, [r7, #8]
 80183b2:	2300      	movs	r3, #0
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80183b4:	4619      	mov	r1, r3
 80183b6:	fbe4 2100 	umlal	r2, r1, r4, r0
 80183ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80183be:	9000      	str	r0, [sp, #0]
 80183c0:	9d00      	ldr	r5, [sp, #0]
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80183c2:	f8dd c000 	ldr.w	ip, [sp]
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80183c6:	4618      	mov	r0, r3
 80183c8:	fbee 2005 	umlal	r2, r0, lr, r5
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80183cc:	f8d8 5028 	ldr.w	r5, [r8, #40]	; 0x28
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80183d0:	60fa      	str	r2, [r7, #12]
 80183d2:	1809      	adds	r1, r1, r0
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80183d4:	461a      	mov	r2, r3
 80183d6:	fbe4 1205 	umlal	r1, r2, r4, r5
   MULADD(at[0], at[9]);    MULADD(at[1], at[8]); 
 80183da:	eb43 0003 	adc.w	r0, r3, r3
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 80183de:	461d      	mov	r5, r3
 80183e0:	fbe6 150c 	umlal	r1, r5, r6, ip
 80183e4:	1882      	adds	r2, r0, r2
 80183e6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80183ea:	eb43 0003 	adc.w	r0, r3, r3
 80183ee:	1952      	adds	r2, r2, r5
 80183f0:	461d      	mov	r5, r3
 80183f2:	fbee 1506 	umlal	r1, r5, lr, r6
 80183f6:	6139      	str	r1, [r7, #16]
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 80183f8:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80183fc:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 8018400:	f140 0000 	adc.w	r0, r0, #0
 8018404:	1952      	adds	r2, r2, r5
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 8018406:	461d      	mov	r5, r3
 8018408:	fbe4 2501 	umlal	r2, r5, r4, r1
   MULADD(at[0], at[10]);    MULADD(at[1], at[9]);    MULADD(at[2], at[8]); 
 801840c:	f140 0100 	adc.w	r1, r0, #0
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 8018410:	1949      	adds	r1, r1, r5
 8018412:	461d      	mov	r5, r3
 8018414:	fbec 2506 	umlal	r2, r5, ip, r6
 8018418:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 801841c:	eb43 0003 	adc.w	r0, r3, r3
 8018420:	1949      	adds	r1, r1, r5
 8018422:	461d      	mov	r5, r3
 8018424:	fbe6 2509 	umlal	r2, r5, r6, r9
 8018428:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801842c:	f140 0000 	adc.w	r0, r0, #0
 8018430:	1949      	adds	r1, r1, r5
 8018432:	461d      	mov	r5, r3
 8018434:	fbee 2506 	umlal	r2, r5, lr, r6
 8018438:	f140 0000 	adc.w	r0, r0, #0
 801843c:	1949      	adds	r1, r1, r5
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801843e:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8018442:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 8018446:	617a      	str	r2, [r7, #20]
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 8018448:	461a      	mov	r2, r3
 801844a:	fbe4 1205 	umlal	r1, r2, r4, r5
   MULADD(at[0], at[11]);    MULADD(at[1], at[10]);    MULADD(at[2], at[9]);    MULADD(at[3], at[8]); 
 801844e:	f140 0000 	adc.w	r0, r0, #0
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 8018452:	461d      	mov	r5, r3
 8018454:	fbec 1506 	umlal	r1, r5, ip, r6
 8018458:	1880      	adds	r0, r0, r2
 801845a:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 801845e:	eb43 0203 	adc.w	r2, r3, r3
 8018462:	1940      	adds	r0, r0, r5
 8018464:	461d      	mov	r5, r3
 8018466:	fbe6 1509 	umlal	r1, r5, r6, r9
 801846a:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 801846e:	f8d8 900c 	ldr.w	r9, [r8, #12]
 8018472:	f142 0200 	adc.w	r2, r2, #0
 8018476:	1940      	adds	r0, r0, r5
 8018478:	460d      	mov	r5, r1
 801847a:	4619      	mov	r1, r3
 801847c:	fbe6 5109 	umlal	r5, r1, r6, r9
 8018480:	f8d8 6010 	ldr.w	r6, [r8, #16]
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 8018484:	f8d8 9034 	ldr.w	r9, [r8, #52]	; 0x34
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 8018488:	f142 0200 	adc.w	r2, r2, #0
 801848c:	1841      	adds	r1, r0, r1
 801848e:	4618      	mov	r0, r3
 8018490:	fbee 5006 	umlal	r5, r0, lr, r6
 8018494:	f142 0200 	adc.w	r2, r2, #0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 8018498:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 801849c:	61bd      	str	r5, [r7, #24]
 801849e:	1809      	adds	r1, r1, r0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80184a0:	4618      	mov	r0, r3
 80184a2:	fbe4 1009 	umlal	r1, r0, r4, r9
 80184a6:	461d      	mov	r5, r3
   MULADD(at[0], at[12]);    MULADD(at[1], at[11]);    MULADD(at[2], at[10]);    MULADD(at[3], at[9]);    MULADD(at[4], at[8]); 
 80184a8:	f142 0200 	adc.w	r2, r2, #0
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80184ac:	fbec 1506 	umlal	r1, r5, ip, r6
 80184b0:	1812      	adds	r2, r2, r0
 80184b2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80184b6:	eb43 0003 	adc.w	r0, r3, r3
 80184ba:	1952      	adds	r2, r2, r5
 80184bc:	461d      	mov	r5, r3
 80184be:	fbe6 150a 	umlal	r1, r5, r6, sl
 80184c2:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80184c6:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 80184ca:	f140 0000 	adc.w	r0, r0, #0
 80184ce:	1952      	adds	r2, r2, r5
 80184d0:	461d      	mov	r5, r3
 80184d2:	fbe6 150a 	umlal	r1, r5, r6, sl
 80184d6:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
 80184da:	f8d8 a010 	ldr.w	sl, [r8, #16]
   COMBA_STORE(C->dp[5]);
   /* 6 */
   COMBA_FORWARD;
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 80184de:	f8d8 b038 	ldr.w	fp, [r8, #56]	; 0x38
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80184e2:	f140 0000 	adc.w	r0, r0, #0
 80184e6:	1952      	adds	r2, r2, r5
 80184e8:	461d      	mov	r5, r3
 80184ea:	fbe6 150a 	umlal	r1, r5, r6, sl
 80184ee:	f8d8 a014 	ldr.w	sl, [r8, #20]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 80184f2:	f8d8 6008 	ldr.w	r6, [r8, #8]
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 80184f6:	f140 0000 	adc.w	r0, r0, #0
 80184fa:	1952      	adds	r2, r2, r5
 80184fc:	461d      	mov	r5, r3
 80184fe:	fbee 150a 	umlal	r1, r5, lr, sl
 8018502:	f140 0000 	adc.w	r0, r0, #0
 8018506:	1952      	adds	r2, r2, r5
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8018508:	461d      	mov	r5, r3
 801850a:	fbe4 250b 	umlal	r2, r5, r4, fp
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 801850e:	61f9      	str	r1, [r7, #28]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8018510:	4611      	mov	r1, r2
   MULADD(at[0], at[13]);    MULADD(at[1], at[12]);    MULADD(at[2], at[11]);    MULADD(at[3], at[10]);    MULADD(at[4], at[9]);    MULADD(at[5], at[8]); 
 8018512:	f140 0200 	adc.w	r2, r0, #0
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8018516:	4618      	mov	r0, r3
 8018518:	fbec 1009 	umlal	r1, r0, ip, r9
 801851c:	1952      	adds	r2, r2, r5
 801851e:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8018522:	eb43 0503 	adc.w	r5, r3, r3
 8018526:	1812      	adds	r2, r2, r0
 8018528:	4618      	mov	r0, r3
 801852a:	fbe6 100c 	umlal	r1, r0, r6, ip
 801852e:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 8018532:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8018536:	f145 0500 	adc.w	r5, r5, #0
 801853a:	1812      	adds	r2, r2, r0
 801853c:	4618      	mov	r0, r3
 801853e:	fbe6 100c 	umlal	r1, r0, r6, ip
 8018542:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 8018546:	f8d8 c010 	ldr.w	ip, [r8, #16]
 801854a:	f145 0500 	adc.w	r5, r5, #0
 801854e:	1812      	adds	r2, r2, r0
 8018550:	4618      	mov	r0, r3
 8018552:	fbe6 100c 	umlal	r1, r0, r6, ip
 8018556:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
   COMBA_STORE(C->dp[6]);
   /* 7 */
   COMBA_FORWARD;
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801855a:	f8dd c000 	ldr.w	ip, [sp]
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801855e:	f145 0500 	adc.w	r5, r5, #0
 8018562:	1812      	adds	r2, r2, r0
 8018564:	4618      	mov	r0, r3
 8018566:	fbe6 100a 	umlal	r1, r0, r6, sl
 801856a:	f145 0500 	adc.w	r5, r5, #0
 801856e:	1812      	adds	r2, r2, r0
 8018570:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8018574:	461e      	mov	r6, r3
 8018576:	fbee 1600 	umlal	r1, r6, lr, r0
 801857a:	6239      	str	r1, [r7, #32]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801857c:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 8018580:	f145 0500 	adc.w	r5, r5, #0
 8018584:	1996      	adds	r6, r2, r6
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8018586:	461a      	mov	r2, r3
 8018588:	fbe4 6201 	umlal	r6, r2, r4, r1
   MULADD(at[0], at[14]);    MULADD(at[1], at[13]);    MULADD(at[2], at[12]);    MULADD(at[3], at[11]);    MULADD(at[4], at[10]);    MULADD(at[5], at[9]);    MULADD(at[6], at[8]); 
 801858c:	f145 0400 	adc.w	r4, r5, #0
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8018590:	18a4      	adds	r4, r4, r2
 8018592:	461a      	mov	r2, r3
 8018594:	fbec 620b 	umlal	r6, r2, ip, fp
 8018598:	f8d8 c008 	ldr.w	ip, [r8, #8]
 801859c:	eb43 0503 	adc.w	r5, r3, r3
 80185a0:	18a4      	adds	r4, r4, r2
 80185a2:	461a      	mov	r2, r3
 80185a4:	fbec 6209 	umlal	r6, r2, ip, r9
 80185a8:	f145 0500 	adc.w	r5, r5, #0
 80185ac:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80185b0:	18a2      	adds	r2, r4, r2
 80185b2:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 80185b6:	9203      	str	r2, [sp, #12]
 80185b8:	461a      	mov	r2, r3
 80185ba:	fbec 6204 	umlal	r6, r2, ip, r4
 80185be:	9c03      	ldr	r4, [sp, #12]
 80185c0:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 80185c4:	f145 0500 	adc.w	r5, r5, #0
 80185c8:	18a2      	adds	r2, r4, r2
 80185ca:	f8d8 4010 	ldr.w	r4, [r8, #16]
 80185ce:	9203      	str	r2, [sp, #12]
 80185d0:	461a      	mov	r2, r3
 80185d2:	fbec 6204 	umlal	r6, r2, ip, r4
 80185d6:	9c03      	ldr	r4, [sp, #12]
 80185d8:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
 80185dc:	f145 0500 	adc.w	r5, r5, #0
 80185e0:	18a4      	adds	r4, r4, r2
 80185e2:	461a      	mov	r2, r3
 80185e4:	fbec 620a 	umlal	r6, r2, ip, sl
 80185e8:	f8d8 c024 	ldr.w	ip, [r8, #36]	; 0x24
 80185ec:	f145 0500 	adc.w	r5, r5, #0
 80185f0:	18a4      	adds	r4, r4, r2
 80185f2:	461a      	mov	r2, r3
 80185f4:	fbec 6200 	umlal	r6, r2, ip, r0
 80185f8:	f145 0500 	adc.w	r5, r5, #0
 80185fc:	18a4      	adds	r4, r4, r2
 80185fe:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8018602:	f145 0c00 	adc.w	ip, r5, #0
 8018606:	461d      	mov	r5, r3
 8018608:	fbee 6502 	umlal	r6, r5, lr, r2
 801860c:	1964      	adds	r4, r4, r5
   COMBA_STORE(C->dp[7]);
   /* 8 */
   COMBA_FORWARD;
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801860e:	9d00      	ldr	r5, [sp, #0]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 8018610:	627e      	str	r6, [r7, #36]	; 0x24
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 8018612:	4626      	mov	r6, r4
 8018614:	461c      	mov	r4, r3
 8018616:	fbe5 6401 	umlal	r6, r4, r5, r1
 801861a:	f8d8 e008 	ldr.w	lr, [r8, #8]
   MULADD(at[0], at[15]);    MULADD(at[1], at[14]);    MULADD(at[2], at[13]);    MULADD(at[3], at[12]);    MULADD(at[4], at[11]);    MULADD(at[5], at[10]);    MULADD(at[6], at[9]);    MULADD(at[7], at[8]); 
 801861e:	f14c 0c00 	adc.w	ip, ip, #0
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 8018622:	eb1c 0c04 	adds.w	ip, ip, r4
 8018626:	461c      	mov	r4, r3
 8018628:	fbee 640b 	umlal	r6, r4, lr, fp
 801862c:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8018630:	eb43 0503 	adc.w	r5, r3, r3
 8018634:	eb1c 0c04 	adds.w	ip, ip, r4
 8018638:	461c      	mov	r4, r3
 801863a:	fbee 6409 	umlal	r6, r4, lr, r9
 801863e:	f145 0500 	adc.w	r5, r5, #0
 8018642:	eb1c 0c04 	adds.w	ip, ip, r4
 8018646:	f145 0400 	adc.w	r4, r5, #0
 801864a:	9400      	str	r4, [sp, #0]
 801864c:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 8018650:	f8d8 5010 	ldr.w	r5, [r8, #16]
 8018654:	461c      	mov	r4, r3
 8018656:	fbee 6405 	umlal	r6, r4, lr, r5
 801865a:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 801865e:	9d00      	ldr	r5, [sp, #0]
 8018660:	eb1c 0404 	adds.w	r4, ip, r4
 8018664:	469c      	mov	ip, r3
 8018666:	fbee 6c0a 	umlal	r6, ip, lr, sl
 801866a:	f8d8 e028 	ldr.w	lr, [r8, #40]	; 0x28
 801866e:	f145 0500 	adc.w	r5, r5, #0
 8018672:	eb14 0c0c 	adds.w	ip, r4, ip
 8018676:	461c      	mov	r4, r3
 8018678:	fbee 6400 	umlal	r6, r4, lr, r0
 801867c:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8018680:	f145 0500 	adc.w	r5, r5, #0
 8018684:	eb1c 0404 	adds.w	r4, ip, r4
 8018688:	469c      	mov	ip, r3
 801868a:	fbee 6c02 	umlal	r6, ip, lr, r2
 801868e:	f145 0500 	adc.w	r5, r5, #0
 8018692:	eb14 040c 	adds.w	r4, r4, ip
   COMBA_STORE(C->dp[8]);
   /* 9 */
   COMBA_FORWARD;
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 8018696:	f8d8 c008 	ldr.w	ip, [r8, #8]
 801869a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 801869e:	62be      	str	r6, [r7, #40]	; 0x28
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 80186a0:	461e      	mov	r6, r3
 80186a2:	fbec 4601 	umlal	r4, r6, ip, r1
   MULADD(at[1], at[15]);    MULADD(at[2], at[14]);    MULADD(at[3], at[13]);    MULADD(at[4], at[12]);    MULADD(at[5], at[11]);    MULADD(at[6], at[10]);    MULADD(at[7], at[9]); 
 80186a6:	f145 0500 	adc.w	r5, r5, #0
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 80186aa:	469c      	mov	ip, r3
 80186ac:	fbee 4c0b 	umlal	r4, ip, lr, fp
 80186b0:	19ad      	adds	r5, r5, r6
 80186b2:	f8d8 e010 	ldr.w	lr, [r8, #16]
 80186b6:	eb43 0603 	adc.w	r6, r3, r3
 80186ba:	eb15 050c 	adds.w	r5, r5, ip
 80186be:	469c      	mov	ip, r3
 80186c0:	fbee 4c09 	umlal	r4, ip, lr, r9
 80186c4:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 80186c8:	f146 0600 	adc.w	r6, r6, #0
 80186cc:	eb15 050c 	adds.w	r5, r5, ip
 80186d0:	469c      	mov	ip, r3
 80186d2:	fbee 4c0a 	umlal	r4, ip, lr, sl
 80186d6:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 80186da:	f146 0600 	adc.w	r6, r6, #0
 80186de:	eb15 050c 	adds.w	r5, r5, ip
 80186e2:	469c      	mov	ip, r3
 80186e4:	fbee 4c00 	umlal	r4, ip, lr, r0
 80186e8:	f8d8 e028 	ldr.w	lr, [r8, #40]	; 0x28
 80186ec:	f146 0600 	adc.w	r6, r6, #0
 80186f0:	eb15 050c 	adds.w	r5, r5, ip
 80186f4:	469c      	mov	ip, r3
 80186f6:	fbee 4c02 	umlal	r4, ip, lr, r2
 80186fa:	f146 0600 	adc.w	r6, r6, #0
 80186fe:	eb15 050c 	adds.w	r5, r5, ip
   COMBA_STORE(C->dp[9]);
   /* 10 */
   COMBA_FORWARD;
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 8018702:	f8d8 c00c 	ldr.w	ip, [r8, #12]
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 8018706:	62fc      	str	r4, [r7, #44]	; 0x2c
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 8018708:	461c      	mov	r4, r3
 801870a:	fbec 5401 	umlal	r5, r4, ip, r1
   MULADD(at[2], at[15]);    MULADD(at[3], at[14]);    MULADD(at[4], at[13]);    MULADD(at[5], at[12]);    MULADD(at[6], at[11]);    MULADD(at[7], at[10]); 
 801870e:	f146 0600 	adc.w	r6, r6, #0
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 8018712:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8018716:	1934      	adds	r4, r6, r4
 8018718:	461e      	mov	r6, r3
 801871a:	fbec 560b 	umlal	r5, r6, ip, fp
 801871e:	eb43 0e03 	adc.w	lr, r3, r3
 8018722:	19a4      	adds	r4, r4, r6
 8018724:	461e      	mov	r6, r3
 8018726:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 801872a:	fbe9 560a 	umlal	r5, r6, r9, sl
 801872e:	f14e 0e00 	adc.w	lr, lr, #0
 8018732:	19a6      	adds	r6, r4, r6
 8018734:	461c      	mov	r4, r3
 8018736:	fbec 5400 	umlal	r5, r4, ip, r0
 801873a:	f14e 0e00 	adc.w	lr, lr, #0
 801873e:	1934      	adds	r4, r6, r4
 8018740:	f14e 0600 	adc.w	r6, lr, #0
 8018744:	f8d8 e02c 	ldr.w	lr, [r8, #44]	; 0x2c
 8018748:	469c      	mov	ip, r3
 801874a:	fbee 5c02 	umlal	r5, ip, lr, r2
 801874e:	eb14 040c 	adds.w	r4, r4, ip
   COMBA_STORE(C->dp[10]);
   /* 11 */
   COMBA_FORWARD;
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 8018752:	f8d8 c010 	ldr.w	ip, [r8, #16]
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 8018756:	633d      	str	r5, [r7, #48]	; 0x30
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 8018758:	461d      	mov	r5, r3
 801875a:	fbec 4501 	umlal	r4, r5, ip, r1
   MULADD(at[3], at[15]);    MULADD(at[4], at[14]);    MULADD(at[5], at[13]);    MULADD(at[6], at[12]);    MULADD(at[7], at[11]); 
 801875e:	f146 0600 	adc.w	r6, r6, #0
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 8018762:	469c      	mov	ip, r3
 8018764:	fbea 4c0b 	umlal	r4, ip, sl, fp
 8018768:	1976      	adds	r6, r6, r5
 801876a:	eb43 0503 	adc.w	r5, r3, r3
 801876e:	eb16 060c 	adds.w	r6, r6, ip
 8018772:	469c      	mov	ip, r3
 8018774:	fbe9 4c00 	umlal	r4, ip, r9, r0
 8018778:	f8d8 e030 	ldr.w	lr, [r8, #48]	; 0x30
 801877c:	f145 0500 	adc.w	r5, r5, #0
 8018780:	eb16 060c 	adds.w	r6, r6, ip
 8018784:	469c      	mov	ip, r3
 8018786:	fbee 4c02 	umlal	r4, ip, lr, r2
 801878a:	f145 0500 	adc.w	r5, r5, #0
 801878e:	637c      	str	r4, [r7, #52]	; 0x34
 8018790:	eb16 060c 	adds.w	r6, r6, ip
   COMBA_STORE(C->dp[11]);
   /* 12 */
   COMBA_FORWARD;
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 8018794:	461c      	mov	r4, r3
 8018796:	fbea 6401 	umlal	r6, r4, sl, r1
 801879a:	469c      	mov	ip, r3
   MULADD(at[4], at[15]);    MULADD(at[5], at[14]);    MULADD(at[6], at[13]);    MULADD(at[7], at[12]); 
 801879c:	f145 0500 	adc.w	r5, r5, #0
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 80187a0:	fbeb 6c00 	umlal	r6, ip, fp, r0
 80187a4:	192d      	adds	r5, r5, r4
 80187a6:	eb43 0403 	adc.w	r4, r3, r3
 80187aa:	eb15 050c 	adds.w	r5, r5, ip
 80187ae:	469c      	mov	ip, r3
 80187b0:	fbe9 6c02 	umlal	r6, ip, r9, r2
 80187b4:	f144 0400 	adc.w	r4, r4, #0
 80187b8:	63be      	str	r6, [r7, #56]	; 0x38
 80187ba:	eb15 050c 	adds.w	r5, r5, ip
   COMBA_STORE(C->dp[12]);
   /* 13 */
   COMBA_FORWARD;
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 80187be:	461e      	mov	r6, r3
 80187c0:	fbe0 5601 	umlal	r5, r6, r0, r1
   MULADD(at[5], at[15]);    MULADD(at[6], at[14]);    MULADD(at[7], at[13]); 
 80187c4:	f144 0000 	adc.w	r0, r4, #0
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 80187c8:	1980      	adds	r0, r0, r6
 80187ca:	461e      	mov	r6, r3
 80187cc:	fbeb 5602 	umlal	r5, r6, fp, r2
 80187d0:	eb43 0403 	adc.w	r4, r3, r3
 80187d4:	1980      	adds	r0, r0, r6
   COMBA_STORE(C->dp[13]);
   /* 14 */
   COMBA_FORWARD;
   MULADD(at[7], at[15]); 
 80187d6:	fbe1 0302 	umlal	r0, r3, r1, r2
 80187da:	eb44 0303 	adc.w	r3, r4, r3
 80187de:	647b      	str	r3, [r7, #68]	; 0x44
   COMBA_STORE(C->dp[14]);
   COMBA_STORE2(C->dp[15]);
   C->used = 16;
 80187e0:	2310      	movs	r3, #16
 80187e2:	603b      	str	r3, [r7, #0]
   C->sign = A->sign ^ B->sign;
 80187e4:	9b01      	ldr	r3, [sp, #4]
   MULADD(at[6], at[15]);    MULADD(at[7], at[14]); 
 80187e6:	63fd      	str	r5, [r7, #60]	; 0x3c
   C->sign = A->sign ^ B->sign;
 80187e8:	6859      	ldr	r1, [r3, #4]
 80187ea:	9b02      	ldr	r3, [sp, #8]
   MULADD(at[7], at[15]); 
 80187ec:	6438      	str	r0, [r7, #64]	; 0x40
   C->sign = A->sign ^ B->sign;
 80187ee:	685a      	ldr	r2, [r3, #4]
   fp_clamp(C);
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	b133      	cbz	r3, 8018802 <fp_mul_comba8+0x4a4>
 80187f4:	1e58      	subs	r0, r3, #1
 80187f6:	3301      	adds	r3, #1
 80187f8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80187fc:	b14b      	cbz	r3, 8018812 <fp_mul_comba8+0x4b4>
   C->sign = A->sign ^ B->sign;
 80187fe:	ea81 0302 	eor.w	r3, r1, r2
   COMBA_FINI;

#ifdef WOLFSSL_SMALL_STACK
   XFREE(at, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8018802:	4640      	mov	r0, r8
   fp_clamp(C);
 8018804:	607b      	str	r3, [r7, #4]
   XFREE(at, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8018806:	f002 fbd3 	bl	801afb0 <free>
#endif
   return FP_OKAY;
 801880a:	2000      	movs	r0, #0
}
 801880c:	b005      	add	sp, #20
 801880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   fp_clamp(C);
 8018812:	6038      	str	r0, [r7, #0]
 8018814:	e7ec      	b.n	80187f0 <fp_mul_comba8+0x492>
       return FP_MEM;
 8018816:	f06f 0001 	mvn.w	r0, #1
 801881a:	e7f7      	b.n	801880c <fp_mul_comba8+0x4ae>

0801881c <CheckRunTimeSettings>:
}
 801881c:	2020      	movs	r0, #32
 801881e:	4770      	bx	lr

08018820 <CheckRunTimeFastMath>:
}
 8018820:	2018      	movs	r0, #24
 8018822:	4770      	bx	lr

08018824 <s_fp_add>:
{
 8018824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  y       = MAX(a->used, b->used);
 8018828:	6803      	ldr	r3, [r0, #0]
 801882a:	680c      	ldr	r4, [r1, #0]
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801882c:	6817      	ldr	r7, [r2, #0]
  y       = MAX(a->used, b->used);
 801882e:	42a3      	cmp	r3, r4
 8018830:	bfb8      	it	lt
 8018832:	4623      	movlt	r3, r4
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 8018834:	2f18      	cmp	r7, #24
 8018836:	bfa8      	it	ge
 8018838:	2718      	movge	r7, #24
  t = 0;
 801883a:	2500      	movs	r5, #0
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 801883c:	46b8      	mov	r8, r7
  c->used = y;
 801883e:	6013      	str	r3, [r2, #0]
  for (x = 0; x < y; x++) {
 8018840:	2401      	movs	r4, #1
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 8018842:	46ac      	mov	ip, r5
  for (x = 0; x < y; x++) {
 8018844:	1c66      	adds	r6, r4, #1
 8018846:	3c01      	subs	r4, #1
 8018848:	42a3      	cmp	r3, r4
 801884a:	dc1b      	bgt.n	8018884 <s_fp_add+0x60>
 801884c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
  if (t != 0) {
 8018850:	b135      	cbz	r5, 8018860 <s_fp_add+0x3c>
     if (x == FP_SIZE)
 8018852:	2b18      	cmp	r3, #24
 8018854:	d02a      	beq.n	80188ac <s_fp_add+0x88>
     c->dp[c->used++] = (fp_digit)t;
 8018856:	3302      	adds	r3, #2
 8018858:	2001      	movs	r0, #1
 801885a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     ++x;
 801885e:	4401      	add	r1, r0
  c->used = x;
 8018860:	4613      	mov	r3, r2
     c->dp[x] = 0;
 8018862:	2000      	movs	r0, #0
  c->used = x;
 8018864:	f843 1b08 	str.w	r1, [r3], #8
  for (; x < oldused; x++) {
 8018868:	4541      	cmp	r1, r8
 801886a:	db19      	blt.n	80188a0 <s_fp_add+0x7c>
  fp_clamp(c);
 801886c:	6813      	ldr	r3, [r2, #0]
 801886e:	b12b      	cbz	r3, 801887c <s_fp_add+0x58>
 8018870:	1e59      	subs	r1, r3, #1
 8018872:	3301      	adds	r3, #1
 8018874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018878:	b1b3      	cbz	r3, 80188a8 <s_fp_add+0x84>
 801887a:	6853      	ldr	r3, [r2, #4]
 801887c:	6053      	str	r3, [r2, #4]
  return FP_OKAY;
 801887e:	2000      	movs	r0, #0
}
 8018880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 8018884:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8018888:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 801888c:	19e4      	adds	r4, r4, r7
 801888e:	eb4c 0e0c 	adc.w	lr, ip, ip
 8018892:	1964      	adds	r4, r4, r5
      c->dp[x]   = (fp_digit)t;
 8018894:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
      t        >>= DIGIT_BIT;
 8018898:	f14e 0500 	adc.w	r5, lr, #0
 801889c:	4634      	mov	r4, r6
 801889e:	e7d1      	b.n	8018844 <s_fp_add+0x20>
     c->dp[x] = 0;
 80188a0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  for (; x < oldused; x++) {
 80188a4:	3101      	adds	r1, #1
 80188a6:	e7df      	b.n	8018868 <s_fp_add+0x44>
  fp_clamp(c);
 80188a8:	6011      	str	r1, [r2, #0]
 80188aa:	e7df      	b.n	801886c <s_fp_add+0x48>
         return FP_VAL;
 80188ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188b0:	e7e6      	b.n	8018880 <s_fp_add+0x5c>

080188b2 <s_fp_sub>:
{
 80188b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  c->used  = a->used;
 80188b4:	6807      	ldr	r7, [r0, #0]
  oldused  = c->used;
 80188b6:	6816      	ldr	r6, [r2, #0]
  oldbused = b->used;
 80188b8:	680b      	ldr	r3, [r1, #0]
  c->used  = a->used;
 80188ba:	6017      	str	r7, [r2, #0]
  for (x = 0; x < oldbused; x++) {
 80188bc:	2401      	movs	r4, #1
  t       = 0;
 80188be:	2500      	movs	r5, #0
  for (x = 0; x < oldbused; x++) {
 80188c0:	f104 0c01 	add.w	ip, r4, #1
 80188c4:	3c01      	subs	r4, #1
 80188c6:	42a3      	cmp	r3, r4
 80188c8:	dc1b      	bgt.n	8018902 <s_fp_sub+0x50>
 80188ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188ce:	1c59      	adds	r1, r3, #1
  for (; x < a->used; x++) {
 80188d0:	f101 0c01 	add.w	ip, r1, #1
 80188d4:	3901      	subs	r1, #1
 80188d6:	428f      	cmp	r7, r1
 80188d8:	dc24      	bgt.n	8018924 <s_fp_sub+0x72>
 80188da:	1af9      	subs	r1, r7, r3
 80188dc:	429f      	cmp	r7, r3
 80188de:	bfb8      	it	lt
 80188e0:	2100      	movlt	r1, #0
 80188e2:	440b      	add	r3, r1
     c->dp[x] = 0;
 80188e4:	2000      	movs	r0, #0
 80188e6:	f102 0108 	add.w	r1, r2, #8
  for (; x < oldused; x++) {
 80188ea:	42b3      	cmp	r3, r6
 80188ec:	db24      	blt.n	8018938 <s_fp_sub+0x86>
  fp_clamp(c);
 80188ee:	6813      	ldr	r3, [r2, #0]
 80188f0:	b12b      	cbz	r3, 80188fe <s_fp_sub+0x4c>
 80188f2:	1e59      	subs	r1, r3, #1
 80188f4:	3301      	adds	r3, #1
 80188f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188fa:	b30b      	cbz	r3, 8018940 <s_fp_sub+0x8e>
 80188fc:	6853      	ldr	r3, [r2, #4]
 80188fe:	6053      	str	r3, [r2, #4]
}
 8018900:	bdf0      	pop	{r4, r5, r6, r7, pc}
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
 8018902:	f851 e02c 	ldr.w	lr, [r1, ip, lsl #2]
 8018906:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 801890a:	ebb4 040e 	subs.w	r4, r4, lr
 801890e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8018912:	1b64      	subs	r4, r4, r5
 8018914:	f16e 0500 	sbc.w	r5, lr, #0
     c->dp[x]  = (fp_digit)t;
 8018918:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 801891c:	f005 0501 	and.w	r5, r5, #1
 8018920:	4664      	mov	r4, ip
 8018922:	e7cd      	b.n	80188c0 <s_fp_sub+0xe>
     t         = ((fp_word)a->dp[x]) - t;
 8018924:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 8018928:	1b64      	subs	r4, r4, r5
     c->dp[x]  = (fp_digit)t;
 801892a:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 801892e:	bf34      	ite	cc
 8018930:	2501      	movcc	r5, #1
 8018932:	2500      	movcs	r5, #0
 8018934:	4661      	mov	r1, ip
 8018936:	e7cb      	b.n	80188d0 <s_fp_sub+0x1e>
     c->dp[x] = 0;
 8018938:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  for (; x < oldused; x++) {
 801893c:	3301      	adds	r3, #1
 801893e:	e7d4      	b.n	80188ea <s_fp_sub+0x38>
  fp_clamp(c);
 8018940:	6011      	str	r1, [r2, #0]
 8018942:	e7d4      	b.n	80188ee <s_fp_sub+0x3c>

08018944 <fp_mul_2>:
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 8018944:	6802      	ldr	r2, [r0, #0]
 8018946:	2a17      	cmp	r2, #23
{
 8018948:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 801894a:	dc2d      	bgt.n	80189a8 <fp_mul_2+0x64>
 801894c:	d102      	bne.n	8018954 <fp_mul_2+0x10>
 801894e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8018950:	2b00      	cmp	r3, #0
 8018952:	db29      	blt.n	80189a8 <fp_mul_2+0x64>
  b->used = a->used;
 8018954:	460b      	mov	r3, r1
  oldused = b->used;
 8018956:	f8d1 c000 	ldr.w	ip, [r1]
  b->used = a->used;
 801895a:	f843 2b08 	str.w	r2, [r3], #8
    r = 0;
 801895e:	2200      	movs	r2, #0
    tmpa = a->dp;
 8018960:	f100 0608 	add.w	r6, r0, #8
    tmpb = b->dp;
 8018964:	461c      	mov	r4, r3
    for (x = 0; x < a->used; x++) {
 8018966:	4615      	mov	r5, r2
 8018968:	6807      	ldr	r7, [r0, #0]
 801896a:	42af      	cmp	r7, r5
 801896c:	dc0f      	bgt.n	801898e <fp_mul_2+0x4a>
    if (r != 0) {
 801896e:	b122      	cbz	r2, 801897a <fp_mul_2+0x36>
      *tmpb = 1;
 8018970:	2201      	movs	r2, #1
 8018972:	6022      	str	r2, [r4, #0]
      ++(b->used);
 8018974:	680a      	ldr	r2, [r1, #0]
 8018976:	3201      	adds	r2, #1
 8018978:	600a      	str	r2, [r1, #0]
    tmpb = b->dp + b->used;
 801897a:	680a      	ldr	r2, [r1, #0]
 801897c:	2400      	movs	r4, #0
 801897e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (x = b->used; x < oldused; x++) {
 8018982:	4562      	cmp	r2, ip
 8018984:	db0c      	blt.n	80189a0 <fp_mul_2+0x5c>
  b->sign = a->sign;
 8018986:	6843      	ldr	r3, [r0, #4]
 8018988:	604b      	str	r3, [r1, #4]
  return FP_OKAY;
 801898a:	2000      	movs	r0, #0
}
 801898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
 801898e:	f856 7b04 	ldr.w	r7, [r6], #4
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
 8018992:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8018996:	f844 2b04 	str.w	r2, [r4], #4
    for (x = 0; x < a->used; x++) {
 801899a:	3501      	adds	r5, #1
      r = rr;
 801899c:	0ffa      	lsrs	r2, r7, #31
 801899e:	e7e3      	b.n	8018968 <fp_mul_2+0x24>
      *tmpb++ = 0;
 80189a0:	f843 4b04 	str.w	r4, [r3], #4
    for (x = b->used; x < oldused; x++) {
 80189a4:	3201      	adds	r2, #1
 80189a6:	e7ec      	b.n	8018982 <fp_mul_2+0x3e>
    return FP_VAL;
 80189a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189ac:	e7ee      	b.n	801898c <fp_mul_2+0x48>

080189ae <fp_mul_d>:
{
 80189ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   c->used = a->used;
 80189b0:	6803      	ldr	r3, [r0, #0]
   c->sign = a->sign;
 80189b2:	6847      	ldr	r7, [r0, #4]
   oldused = c->used;
 80189b4:	f8d2 c000 	ldr.w	ip, [r2]
   c->sign = a->sign;
 80189b8:	6057      	str	r7, [r2, #4]
   w       = 0;
 80189ba:	2400      	movs	r4, #0
   c->used = a->used;
 80189bc:	6013      	str	r3, [r2, #0]
   for (x = 0; x < a->used; x++) {
 80189be:	2501      	movs	r5, #1
   w       = 0;
 80189c0:	4626      	mov	r6, r4
   for (x = 0; x < a->used; x++) {
 80189c2:	f105 0e01 	add.w	lr, r5, #1
 80189c6:	3d01      	subs	r5, #1
 80189c8:	42ab      	cmp	r3, r5
 80189ca:	dc1c      	bgt.n	8018a06 <fp_mul_d+0x58>
 80189cc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   if (w != 0) {
 80189d0:	b13c      	cbz	r4, 80189e2 <fp_mul_d+0x34>
      if (a->used == FP_SIZE)
 80189d2:	2b18      	cmp	r3, #24
 80189d4:	d027      	beq.n	8018a26 <fp_mul_d+0x78>
      c->dp[c->used++] = (fp_digit) w;
 80189d6:	1c58      	adds	r0, r3, #1
 80189d8:	3302      	adds	r3, #2
 80189da:	6010      	str	r0, [r2, #0]
 80189dc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      ++x;
 80189e0:	3101      	adds	r1, #1
      c->dp[x] = 0;
 80189e2:	f102 0308 	add.w	r3, r2, #8
 80189e6:	2000      	movs	r0, #0
   for (; x < oldused && x < FP_SIZE; x++) {
 80189e8:	4561      	cmp	r1, ip
 80189ea:	da01      	bge.n	80189f0 <fp_mul_d+0x42>
 80189ec:	2917      	cmp	r1, #23
 80189ee:	dd14      	ble.n	8018a1a <fp_mul_d+0x6c>
   fp_clamp(c);
 80189f0:	6813      	ldr	r3, [r2, #0]
 80189f2:	b12b      	cbz	r3, 8018a00 <fp_mul_d+0x52>
 80189f4:	1e59      	subs	r1, r3, #1
 80189f6:	3301      	adds	r3, #1
 80189f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80189fc:	b18b      	cbz	r3, 8018a22 <fp_mul_d+0x74>
 80189fe:	463b      	mov	r3, r7
 8018a00:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 8018a02:	2000      	movs	r0, #0
}
 8018a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
 8018a06:	f850 502e 	ldr.w	r5, [r0, lr, lsl #2]
 8018a0a:	fbe5 4601 	umlal	r4, r6, r5, r1
       c->dp[x]  = (fp_digit)w;
 8018a0e:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
       w         = w >> DIGIT_BIT;
 8018a12:	4675      	mov	r5, lr
 8018a14:	4634      	mov	r4, r6
 8018a16:	2600      	movs	r6, #0
   for (x = 0; x < a->used; x++) {
 8018a18:	e7d3      	b.n	80189c2 <fp_mul_d+0x14>
      c->dp[x] = 0;
 8018a1a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
   for (; x < oldused && x < FP_SIZE; x++) {
 8018a1e:	3101      	adds	r1, #1
 8018a20:	e7e2      	b.n	80189e8 <fp_mul_d+0x3a>
   fp_clamp(c);
 8018a22:	6011      	str	r1, [r2, #0]
 8018a24:	e7e4      	b.n	80189f0 <fp_mul_d+0x42>
          return FP_VAL;
 8018a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a2a:	e7eb      	b.n	8018a04 <fp_mul_d+0x56>

08018a2c <fp_div_2>:
{
 8018a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  b->used = a->used;
 8018a2e:	4605      	mov	r5, r0
 8018a30:	460b      	mov	r3, r1
 8018a32:	f855 2b08 	ldr.w	r2, [r5], #8
  oldused = b->used;
 8018a36:	680f      	ldr	r7, [r1, #0]
  b->used = a->used;
 8018a38:	f843 2b08 	str.w	r2, [r3], #8
    tmpa = a->dp + b->used - 1;
 8018a3c:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 8018a40:	3c01      	subs	r4, #1
 8018a42:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    for (x = b->used - 1; x >= 0; x--) {
 8018a46:	3a01      	subs	r2, #1
    tmpb = b->dp + b->used - 1;
 8018a48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    r = 0;
 8018a4c:	2600      	movs	r6, #0
    for (x = b->used - 1; x >= 0; x--) {
 8018a4e:	2a00      	cmp	r2, #0
 8018a50:	da10      	bge.n	8018a74 <fp_div_2+0x48>
    tmpb = b->dp + b->used;
 8018a52:	680a      	ldr	r2, [r1, #0]
      *tmpb++ = 0;
 8018a54:	2400      	movs	r4, #0
    tmpb = b->dp + b->used;
 8018a56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (x = b->used; x < oldused; x++) {
 8018a5a:	42ba      	cmp	r2, r7
 8018a5c:	db15      	blt.n	8018a8a <fp_div_2+0x5e>
  b->sign = a->sign;
 8018a5e:	6842      	ldr	r2, [r0, #4]
  fp_clamp (b);
 8018a60:	680b      	ldr	r3, [r1, #0]
 8018a62:	b12b      	cbz	r3, 8018a70 <fp_div_2+0x44>
 8018a64:	1e58      	subs	r0, r3, #1
 8018a66:	3301      	adds	r3, #1
 8018a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8018a6c:	b18b      	cbz	r3, 8018a92 <fp_div_2+0x66>
 8018a6e:	4613      	mov	r3, r2
 8018a70:	604b      	str	r3, [r1, #4]
}
 8018a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      rr = *tmpa & 1;
 8018a74:	f855 c904 	ldr.w	ip, [r5], #-4
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
 8018a78:	07f6      	lsls	r6, r6, #31
 8018a7a:	ea46 065c 	orr.w	r6, r6, ip, lsr #1
 8018a7e:	f844 6904 	str.w	r6, [r4], #-4
    for (x = b->used - 1; x >= 0; x--) {
 8018a82:	3a01      	subs	r2, #1
      r = rr;
 8018a84:	f00c 0601 	and.w	r6, ip, #1
 8018a88:	e7e1      	b.n	8018a4e <fp_div_2+0x22>
      *tmpb++ = 0;
 8018a8a:	f843 4b04 	str.w	r4, [r3], #4
    for (x = b->used; x < oldused; x++) {
 8018a8e:	3201      	adds	r2, #1
 8018a90:	e7e3      	b.n	8018a5a <fp_div_2+0x2e>
  fp_clamp (b);
 8018a92:	6008      	str	r0, [r1, #0]
 8018a94:	e7e4      	b.n	8018a60 <fp_div_2+0x34>

08018a96 <fp_div_2_mod_ct>:
{
 8018a96:	b5f0      	push	{r4, r5, r6, r7, lr}
  mask = 0 - (a->dp[0] & 1);
 8018a98:	6887      	ldr	r7, [r0, #8]
  for (i = 0; i < b->used; i++) {
 8018a9a:	680c      	ldr	r4, [r1, #0]
  fp_word  w = 0;
 8018a9c:	f04f 0e00 	mov.w	lr, #0
  mask = 0 - (a->dp[0] & 1);
 8018aa0:	f347 0700 	sbfx	r7, r7, #0, #1
  for (i = 0; i < b->used; i++) {
 8018aa4:	2301      	movs	r3, #1
      w         += a->dp[i] & mask_a;
 8018aa6:	46f4      	mov	ip, lr
  for (i = 0; i < b->used; i++) {
 8018aa8:	1e5e      	subs	r6, r3, #1
 8018aaa:	42b4      	cmp	r4, r6
 8018aac:	f103 0501 	add.w	r5, r3, #1
 8018ab0:	dc1d      	bgt.n	8018aee <fp_div_2_mod_ct+0x58>
 8018ab2:	f102 0108 	add.w	r1, r2, #8
 8018ab6:	2000      	movs	r0, #0
  for (i = 0; i < b->used-1; i++) {
 8018ab8:	1e65      	subs	r5, r4, #1
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 8018aba:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = 0; i < b->used-1; i++) {
 8018abe:	42a8      	cmp	r0, r5
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 8018ac0:	ea4f 0353 	mov.w	r3, r3, lsr #1
  for (i = 0; i < b->used-1; i++) {
 8018ac4:	db2a      	blt.n	8018b1c <fp_div_2_mod_ct+0x86>
 8018ac6:	2c01      	cmp	r4, #1
 8018ac8:	bfb8      	it	lt
 8018aca:	2401      	movlt	r4, #1
  c->dp[i] = (c->dp[i] >> 1) | ((fp_digit)w << (DIGIT_BIT - 1));
 8018acc:	1c61      	adds	r1, r4, #1
 8018ace:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
 8018ad2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  c->sign = FP_ZPOS;
 8018ad6:	2300      	movs	r3, #0
  c->used = i + 1;
 8018ad8:	6014      	str	r4, [r2, #0]
  c->sign = FP_ZPOS;
 8018ada:	6053      	str	r3, [r2, #4]
  fp_clamp(c);
 8018adc:	6813      	ldr	r3, [r2, #0]
 8018ade:	b123      	cbz	r3, 8018aea <fp_div_2_mod_ct+0x54>
 8018ae0:	1e59      	subs	r1, r3, #1
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018ae8:	b1fb      	cbz	r3, 8018b2a <fp_div_2_mod_ct+0x94>
}
 8018aea:	2000      	movs	r0, #0
 8018aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      fp_digit mask_a = 0 - (i < a->used);
 8018aee:	6803      	ldr	r3, [r0, #0]
 8018af0:	42b3      	cmp	r3, r6
      w         += a->dp[i] & mask_a;
 8018af2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
      fp_digit mask_a = 0 - (i < a->used);
 8018af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018afa:	bfd8      	it	le
 8018afc:	2300      	movle	r3, #0
      w         += a->dp[i] & mask_a;
 8018afe:	4033      	ands	r3, r6
      w         += b->dp[i] & mask;
 8018b00:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
 8018b04:	403e      	ands	r6, r7
      w         += a->dp[i] & mask_a;
 8018b06:	199b      	adds	r3, r3, r6
 8018b08:	eb4c 060c 	adc.w	r6, ip, ip
 8018b0c:	eb13 030e 	adds.w	r3, r3, lr
      c->dp[i]   = (fp_digit)w;
 8018b10:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
      w        >>= DIGIT_BIT;
 8018b14:	f146 0e00 	adc.w	lr, r6, #0
 8018b18:	462b      	mov	r3, r5
 8018b1a:	e7c5      	b.n	8018aa8 <fp_div_2_mod_ct+0x12>
      c->dp[i] = (c->dp[i] >> 1) | (c->dp[i+1] << (DIGIT_BIT - 1));
 8018b1c:	680e      	ldr	r6, [r1, #0]
 8018b1e:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 8018b22:	f841 3c04 	str.w	r3, [r1, #-4]
  for (i = 0; i < b->used-1; i++) {
 8018b26:	3001      	adds	r0, #1
 8018b28:	e7c7      	b.n	8018aba <fp_div_2_mod_ct+0x24>
  fp_clamp(c);
 8018b2a:	6011      	str	r1, [r2, #0]
 8018b2c:	e7d6      	b.n	8018adc <fp_div_2_mod_ct+0x46>

08018b2e <fp_submod_ct>:
{
 8018b2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (c->used + 1 > FP_SIZE) {
 8018b32:	6814      	ldr	r4, [r2, #0]
 8018b34:	2c17      	cmp	r4, #23
 8018b36:	dc48      	bgt.n	8018bca <fp_submod_ct+0x9c>
  if (c == d) {
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d046      	beq.n	8018bca <fp_submod_ct+0x9c>
  for (i = 0; i < c->used; i++) {
 8018b3c:	2700      	movs	r7, #0
 8018b3e:	f103 0608 	add.w	r6, r3, #8
 8018b42:	f100 0e08 	add.w	lr, r0, #8
  if (c == d) {
 8018b46:	46b0      	mov	r8, r6
 8018b48:	f101 0008 	add.w	r0, r1, #8
  w = 0;
 8018b4c:	46bc      	mov	ip, r7
 8018b4e:	463d      	mov	r5, r7
    w         += a->dp[i];
 8018b50:	f85e 1b04 	ldr.w	r1, [lr], #4
    w         -= b->dp[i];
 8018b54:	f850 9b04 	ldr.w	r9, [r0], #4
    w         += a->dp[i];
 8018b58:	eb11 010c 	adds.w	r1, r1, ip
 8018b5c:	f145 0500 	adc.w	r5, r5, #0
    w         -= b->dp[i];
 8018b60:	ebb1 0109 	subs.w	r1, r1, r9
 8018b64:	f165 0c00 	sbc.w	ip, r5, #0
  for (i = 0; i < c->used; i++) {
 8018b68:	42bc      	cmp	r4, r7
    w        >>= DIGIT_BIT;
 8018b6a:	ea4f 75ec 	mov.w	r5, ip, asr #31
  for (i = 0; i < c->used; i++) {
 8018b6e:	dc15      	bgt.n	8018b9c <fp_submod_ct+0x6e>
  mask = (fp_digit)0 - (w < 0);
 8018b70:	462f      	mov	r7, r5
  for (i = 0; i < c->used; i++) {
 8018b72:	2500      	movs	r5, #0
 8018b74:	3208      	adds	r2, #8
  w = 0;
 8018b76:	4628      	mov	r0, r5
 8018b78:	46ac      	mov	ip, r5
  for (i = 0; i < c->used; i++) {
 8018b7a:	42ac      	cmp	r4, r5
 8018b7c:	dc12      	bgt.n	8018ba4 <fp_submod_ct+0x76>
  d->used = i;
 8018b7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  d->sign = FP_ZPOS;
 8018b82:	2200      	movs	r2, #0
  d->used = i;
 8018b84:	601c      	str	r4, [r3, #0]
  d->sign = FP_ZPOS;
 8018b86:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 8018b88:	6818      	ldr	r0, [r3, #0]
 8018b8a:	b128      	cbz	r0, 8018b98 <fp_submod_ct+0x6a>
 8018b8c:	1e41      	subs	r1, r0, #1
 8018b8e:	3001      	adds	r0, #1
 8018b90:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8018b94:	b1ba      	cbz	r2, 8018bc6 <fp_submod_ct+0x98>
  return FP_OKAY;
 8018b96:	2000      	movs	r0, #0
}
 8018b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d->dp[i]   = (fp_digit)w;
 8018b9c:	f848 1b04 	str.w	r1, [r8], #4
  for (i = 0; i < c->used; i++) {
 8018ba0:	3701      	adds	r7, #1
 8018ba2:	e7d5      	b.n	8018b50 <fp_submod_ct+0x22>
    w         += d->dp[i];
 8018ba4:	6831      	ldr	r1, [r6, #0]
 8018ba6:	1808      	adds	r0, r1, r0
    w         += c->dp[i] & mask;
 8018ba8:	f852 1b04 	ldr.w	r1, [r2], #4
 8018bac:	ea01 0107 	and.w	r1, r1, r7
    w         += d->dp[i];
 8018bb0:	f14c 0c00 	adc.w	ip, ip, #0
    w         += c->dp[i] & mask;
 8018bb4:	1809      	adds	r1, r1, r0
    w        >>= DIGIT_BIT;
 8018bb6:	f14c 0000 	adc.w	r0, ip, #0
    d->dp[i]   = (fp_digit)w;
 8018bba:	f846 1b04 	str.w	r1, [r6], #4
    w        >>= DIGIT_BIT;
 8018bbe:	ea4f 7ce0 	mov.w	ip, r0, asr #31
  for (i = 0; i < c->used; i++) {
 8018bc2:	3501      	adds	r5, #1
 8018bc4:	e7d9      	b.n	8018b7a <fp_submod_ct+0x4c>
  fp_clamp(d);
 8018bc6:	6019      	str	r1, [r3, #0]
 8018bc8:	e7de      	b.n	8018b88 <fp_submod_ct+0x5a>
    return FP_VAL;
 8018bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018bce:	e7e3      	b.n	8018b98 <fp_submod_ct+0x6a>

08018bd0 <fp_addmod_ct>:
  if (c == d) {
 8018bd0:	429a      	cmp	r2, r3
{
 8018bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (c == d) {
 8018bd6:	d057      	beq.n	8018c88 <fp_addmod_ct+0xb8>
  s = 0;
 8018bd8:	f04f 0e00 	mov.w	lr, #0
  for (i = 0; i < c->used; i++) {
 8018bdc:	6816      	ldr	r6, [r2, #0]
 8018bde:	2401      	movs	r4, #1
  s = 0;
 8018be0:	46f0      	mov	r8, lr
  w = 0;
 8018be2:	46f1      	mov	r9, lr
    w         += a->dp[i];
 8018be4:	46f4      	mov	ip, lr
  for (i = 0; i < c->used; i++) {
 8018be6:	1c67      	adds	r7, r4, #1
 8018be8:	3c01      	subs	r4, #1
 8018bea:	42a6      	cmp	r6, r4
 8018bec:	dc1f      	bgt.n	8018c2e <fp_addmod_ct+0x5e>
  s += (fp_digit)w;
 8018bee:	eb19 040e 	adds.w	r4, r9, lr
 8018bf2:	f148 0800 	adc.w	r8, r8, #0
  mask = (fp_digit)0 - (s >= 0);
 8018bf6:	ea6f 0808 	mvn.w	r8, r8
 8018bfa:	ea4f 78d8 	mov.w	r8, r8, lsr #31
  for (i = 0; i < c->used; i++) {
 8018bfe:	2400      	movs	r4, #0
  mask = (fp_digit)0 - (s >= 0);
 8018c00:	f1c8 0800 	rsb	r8, r8, #0
  for (i = 0; i < c->used; i++) {
 8018c04:	3208      	adds	r2, #8
 8018c06:	f103 0708 	add.w	r7, r3, #8
  w = 0;
 8018c0a:	4621      	mov	r1, r4
  for (i = 0; i < c->used; i++) {
 8018c0c:	42a6      	cmp	r6, r4
 8018c0e:	dc28      	bgt.n	8018c62 <fp_addmod_ct+0x92>
  d->used = i;
 8018c10:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  d->sign = FP_ZPOS;
 8018c14:	2200      	movs	r2, #0
  d->used = i;
 8018c16:	601e      	str	r6, [r3, #0]
  d->sign = FP_ZPOS;
 8018c18:	605a      	str	r2, [r3, #4]
  fp_clamp(d);
 8018c1a:	6818      	ldr	r0, [r3, #0]
 8018c1c:	b128      	cbz	r0, 8018c2a <fp_addmod_ct+0x5a>
 8018c1e:	1e41      	subs	r1, r0, #1
 8018c20:	3001      	adds	r0, #1
 8018c22:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8018c26:	b36a      	cbz	r2, 8018c84 <fp_addmod_ct+0xb4>
 8018c28:	2000      	movs	r0, #0
}
 8018c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    w         += b->dp[i];
 8018c2e:	f851 4027 	ldr.w	r4, [r1, r7, lsl #2]
    w         += a->dp[i];
 8018c32:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
    w         += b->dp[i];
 8018c36:	192d      	adds	r5, r5, r4
 8018c38:	eb4c 0a0c 	adc.w	sl, ip, ip
 8018c3c:	eb15 0409 	adds.w	r4, r5, r9
    d->dp[i]   = (fp_digit)w;
 8018c40:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
    s         -= c->dp[i];
 8018c44:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
    w         += b->dp[i];
 8018c48:	f14a 0900 	adc.w	r9, sl, #0
    s         += (fp_digit)w;
 8018c4c:	eb14 040e 	adds.w	r4, r4, lr
 8018c50:	f148 0e00 	adc.w	lr, r8, #0
    s         -= c->dp[i];
 8018c54:	1b64      	subs	r4, r4, r5
    s        >>= DIGIT_BIT;
 8018c56:	f16e 0e00 	sbc.w	lr, lr, #0
 8018c5a:	ea4f 78ee 	mov.w	r8, lr, asr #31
 8018c5e:	463c      	mov	r4, r7
 8018c60:	e7c1      	b.n	8018be6 <fp_addmod_ct+0x16>
    w        += c->dp[i] & mask;
 8018c62:	f852 5b04 	ldr.w	r5, [r2], #4
    w         = d->dp[i] - w;
 8018c66:	6838      	ldr	r0, [r7, #0]
    w        += c->dp[i] & mask;
 8018c68:	ea08 0505 	and.w	r5, r8, r5
 8018c6c:	1a40      	subs	r0, r0, r1
 8018c6e:	eb61 0101 	sbc.w	r1, r1, r1
    w         = d->dp[i] - w;
 8018c72:	1b40      	subs	r0, r0, r5
 8018c74:	f161 0100 	sbc.w	r1, r1, #0
    d->dp[i]  = (fp_digit)w;
 8018c78:	f847 0b04 	str.w	r0, [r7], #4
    w         = (w >> DIGIT_BIT)&1;
 8018c7c:	f001 0101 	and.w	r1, r1, #1
  for (i = 0; i < c->used; i++) {
 8018c80:	3401      	adds	r4, #1
 8018c82:	e7c3      	b.n	8018c0c <fp_addmod_ct+0x3c>
  fp_clamp(d);
 8018c84:	6019      	str	r1, [r3, #0]
 8018c86:	e7c8      	b.n	8018c1a <fp_addmod_ct+0x4a>
    return FP_VAL;
 8018c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c8c:	e7cd      	b.n	8018c2a <fp_addmod_ct+0x5a>

08018c8e <fp_cmp_d>:
  if (a->used == 0 && b == 0)
 8018c8e:	6803      	ldr	r3, [r0, #0]
 8018c90:	b923      	cbnz	r3, 8018c9c <fp_cmp_d+0xe>
 8018c92:	1e08      	subs	r0, r1, #0
 8018c94:	bf18      	it	ne
 8018c96:	2001      	movne	r0, #1
 8018c98:	4240      	negs	r0, r0
 8018c9a:	4770      	bx	lr
  if ((b && a->used == 0) || a->sign == FP_NEG) {
 8018c9c:	6842      	ldr	r2, [r0, #4]
 8018c9e:	2a01      	cmp	r2, #1
 8018ca0:	d009      	beq.n	8018cb6 <fp_cmp_d+0x28>
  if (a->used > 1) {
 8018ca2:	2b01      	cmp	r3, #1
 8018ca4:	dc0a      	bgt.n	8018cbc <fp_cmp_d+0x2e>
 8018ca6:	6883      	ldr	r3, [r0, #8]
  if (a->dp[0] > b) {
 8018ca8:	4299      	cmp	r1, r3
 8018caa:	d307      	bcc.n	8018cbc <fp_cmp_d+0x2e>
  } else if (a->dp[0] < b) {
 8018cac:	bf8c      	ite	hi
 8018cae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018cb2:	2000      	movls	r0, #0
 8018cb4:	4770      	bx	lr
    return FP_LT;
 8018cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cba:	4770      	bx	lr
    return FP_GT;
 8018cbc:	2001      	movs	r0, #1
}
 8018cbe:	4770      	bx	lr

08018cc0 <fp_cmp_mag>:
   if (a->used > b->used) {
 8018cc0:	6803      	ldr	r3, [r0, #0]
 8018cc2:	680a      	ldr	r2, [r1, #0]
 8018cc4:	4293      	cmp	r3, r2
{
 8018cc6:	b510      	push	{r4, lr}
   if (a->used > b->used) {
 8018cc8:	dc10      	bgt.n	8018cec <fp_cmp_mag+0x2c>
   } else if (a->used < b->used) {
 8018cca:	db11      	blt.n	8018cf0 <fp_cmp_mag+0x30>
      for (x = a->used - 1; x >= 0; x--) {
 8018ccc:	3b01      	subs	r3, #1
          if (a->dp[x] > b->dp[x]) {
 8018cce:	3008      	adds	r0, #8
 8018cd0:	3108      	adds	r1, #8
      for (x = a->used - 1; x >= 0; x--) {
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	da01      	bge.n	8018cda <fp_cmp_mag+0x1a>
   return FP_EQ;
 8018cd6:	2000      	movs	r0, #0
}
 8018cd8:	bd10      	pop	{r4, pc}
          if (a->dp[x] > b->dp[x]) {
 8018cda:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8018cde:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8018ce2:	4294      	cmp	r4, r2
 8018ce4:	d802      	bhi.n	8018cec <fp_cmp_mag+0x2c>
          } else if (a->dp[x] < b->dp[x]) {
 8018ce6:	d303      	bcc.n	8018cf0 <fp_cmp_mag+0x30>
      for (x = a->used - 1; x >= 0; x--) {
 8018ce8:	3b01      	subs	r3, #1
 8018cea:	e7f2      	b.n	8018cd2 <fp_cmp_mag+0x12>
      return FP_GT;
 8018cec:	2001      	movs	r0, #1
 8018cee:	e7f3      	b.n	8018cd8 <fp_cmp_mag+0x18>
      return FP_LT;
 8018cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cf4:	e7f0      	b.n	8018cd8 <fp_cmp_mag+0x18>

08018cf6 <fp_add>:
{
 8018cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sa = a->sign;
 8018cfa:	6847      	ldr	r7, [r0, #4]
  sb = b->sign;
 8018cfc:	f8d1 8004 	ldr.w	r8, [r1, #4]
  if (sa == sb) {
 8018d00:	4547      	cmp	r7, r8
{
 8018d02:	4605      	mov	r5, r0
 8018d04:	460e      	mov	r6, r1
 8018d06:	4614      	mov	r4, r2
  if (sa == sb) {
 8018d08:	d104      	bne.n	8018d14 <fp_add+0x1e>
    c->sign = sa;
 8018d0a:	6057      	str	r7, [r2, #4]
}
 8018d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ret = s_fp_add (a, b, c);
 8018d10:	f7ff bd88 	b.w	8018824 <s_fp_add>
    if (fp_cmp_mag (a, b) == FP_LT) {
 8018d14:	f7ff ffd4 	bl	8018cc0 <fp_cmp_mag>
 8018d18:	3001      	adds	r0, #1
      s_fp_sub (b, a, c);
 8018d1a:	bf09      	itett	eq
 8018d1c:	4630      	moveq	r0, r6
      s_fp_sub (a, b, c);
 8018d1e:	4628      	movne	r0, r5
      c->sign = sb;
 8018d20:	f8c4 8004 	streq.w	r8, [r4, #4]
      s_fp_sub (b, a, c);
 8018d24:	4622      	moveq	r2, r4
 8018d26:	bf0f      	iteee	eq
 8018d28:	4629      	moveq	r1, r5
      c->sign = sa;
 8018d2a:	6067      	strne	r7, [r4, #4]
      s_fp_sub (a, b, c);
 8018d2c:	4622      	movne	r2, r4
 8018d2e:	4631      	movne	r1, r6
 8018d30:	f7ff fdbf 	bl	80188b2 <s_fp_sub>
}
 8018d34:	2000      	movs	r0, #0
 8018d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d3a <fp_sub>:
{
 8018d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sa = a->sign;
 8018d3c:	6844      	ldr	r4, [r0, #4]
  if (sa != sb) {
 8018d3e:	684b      	ldr	r3, [r1, #4]
 8018d40:	429c      	cmp	r4, r3
{
 8018d42:	4607      	mov	r7, r0
 8018d44:	460e      	mov	r6, r1
 8018d46:	4615      	mov	r5, r2
  if (sa != sb) {
 8018d48:	d004      	beq.n	8018d54 <fp_sub+0x1a>
    c->sign = sa;
 8018d4a:	6054      	str	r4, [r2, #4]
}
 8018d4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ret = s_fp_add (a, b, c);
 8018d50:	f7ff bd68 	b.w	8018824 <s_fp_add>
    if (fp_cmp_mag (a, b) != FP_LT) {
 8018d54:	f7ff ffb4 	bl	8018cc0 <fp_cmp_mag>
 8018d58:	3001      	adds	r0, #1
 8018d5a:	d007      	beq.n	8018d6c <fp_sub+0x32>
      c->sign = sa;
 8018d5c:	606c      	str	r4, [r5, #4]
      s_fp_sub (a, b, c);
 8018d5e:	462a      	mov	r2, r5
 8018d60:	4631      	mov	r1, r6
 8018d62:	4638      	mov	r0, r7
      s_fp_sub (b, a, c);
 8018d64:	f7ff fda5 	bl	80188b2 <s_fp_sub>
}
 8018d68:	2000      	movs	r0, #0
 8018d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
 8018d6c:	fab4 f484 	clz	r4, r4
 8018d70:	0964      	lsrs	r4, r4, #5
 8018d72:	606c      	str	r4, [r5, #4]
      s_fp_sub (b, a, c);
 8018d74:	462a      	mov	r2, r5
 8018d76:	4639      	mov	r1, r7
 8018d78:	4630      	mov	r0, r6
 8018d7a:	e7f3      	b.n	8018d64 <fp_sub+0x2a>

08018d7c <fp_cmp>:
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 8018d7c:	6842      	ldr	r2, [r0, #4]
 8018d7e:	2a01      	cmp	r2, #1
{
 8018d80:	460b      	mov	r3, r1
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 8018d82:	d104      	bne.n	8018d8e <fp_cmp+0x12>
 8018d84:	684a      	ldr	r2, [r1, #4]
 8018d86:	b942      	cbnz	r2, 8018d9a <fp_cmp+0x1e>
      return FP_LT;
 8018d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d8c:	e003      	b.n	8018d96 <fp_cmp+0x1a>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
 8018d8e:	b942      	cbnz	r2, 8018da2 <fp_cmp+0x26>
 8018d90:	684a      	ldr	r2, [r1, #4]
 8018d92:	2a01      	cmp	r2, #1
 8018d94:	d105      	bne.n	8018da2 <fp_cmp+0x26>
}
 8018d96:	4610      	mov	r0, r2
 8018d98:	4770      	bx	lr
         return fp_cmp_mag(b, a);
 8018d9a:	4601      	mov	r1, r0
 8018d9c:	4618      	mov	r0, r3
         return fp_cmp_mag(a, b);
 8018d9e:	f7ff bf8f 	b.w	8018cc0 <fp_cmp_mag>
 8018da2:	4619      	mov	r1, r3
 8018da4:	e7fb      	b.n	8018d9e <fp_cmp+0x22>

08018da6 <fp_montgomery_setup>:
  b = a->dp[0];
 8018da6:	6883      	ldr	r3, [r0, #8]
  if ((b & 1) == 0) {
 8018da8:	07da      	lsls	r2, r3, #31
 8018daa:	d514      	bpl.n	8018dd6 <fp_montgomery_setup+0x30>
  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 8018dac:	1c98      	adds	r0, r3, #2
 8018dae:	0040      	lsls	r0, r0, #1
 8018db0:	f000 0008 	and.w	r0, r0, #8
 8018db4:	4418      	add	r0, r3
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 8018db6:	fb00 f203 	mul.w	r2, r0, r3
 8018dba:	f1c2 0202 	rsb	r2, r2, #2
 8018dbe:	4350      	muls	r0, r2
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 8018dc0:	fb00 f203 	mul.w	r2, r0, r3
 8018dc4:	f1c2 0202 	rsb	r2, r2, #2
 8018dc8:	4342      	muls	r2, r0
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 8018dca:	4353      	muls	r3, r2
 8018dcc:	3b02      	subs	r3, #2
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
 8018dce:	4353      	muls	r3, r2
 8018dd0:	600b      	str	r3, [r1, #0]
  return FP_OKAY;
 8018dd2:	2000      	movs	r0, #0
 8018dd4:	4770      	bx	lr
    return FP_VAL;
 8018dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8018dda:	4770      	bx	lr

08018ddc <fp_montgomery_reduce_ex>:
{
 8018ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (m->used > (FP_SIZE/2)) {
 8018de0:	680b      	ldr	r3, [r1, #0]
{
 8018de2:	b085      	sub	sp, #20
   if (m->used > (FP_SIZE/2)) {
 8018de4:	2b0c      	cmp	r3, #12
{
 8018de6:	4604      	mov	r4, r0
 8018de8:	460e      	mov	r6, r1
 8018dea:	9203      	str	r2, [sp, #12]
   if (m->used > (FP_SIZE/2)) {
 8018dec:	f300 8095 	bgt.w	8018f1a <fp_montgomery_reduce_ex+0x13e>
   c = (fp_digit*)XMALLOC(sizeof(fp_digit)*(FP_SIZE + 1), NULL, DYNAMIC_TYPE_BIGINT);
 8018df0:	2064      	movs	r0, #100	; 0x64
 8018df2:	f002 f8d5 	bl	801afa0 <malloc>
   if (c == NULL) {
 8018df6:	4605      	mov	r5, r0
 8018df8:	2800      	cmp	r0, #0
 8018dfa:	f000 8091 	beq.w	8018f20 <fp_montgomery_reduce_ex+0x144>
   XMEMSET(c, 0, sizeof(fp_digit)*(FP_SIZE + 1));
 8018dfe:	2264      	movs	r2, #100	; 0x64
 8018e00:	2100      	movs	r1, #0
 8018e02:	f002 f915 	bl	801b030 <memset>
   pa = m->used;
 8018e06:	6833      	ldr	r3, [r6, #0]
   if (a->used <= m->used) {
 8018e08:	6822      	ldr	r2, [r4, #0]
 8018e0a:	429a      	cmp	r2, r3
      oldused = m->used * 2;
 8018e0c:	bfcc      	ite	gt
 8018e0e:	ea4f 0843 	movgt.w	r8, r3, lsl #1
 8018e12:	4698      	movle	r8, r3
   for (x = 0; x < oldused; x++) {
 8018e14:	f104 0108 	add.w	r1, r4, #8
 8018e18:	2200      	movs	r2, #0
 8018e1a:	4590      	cmp	r8, r2
 8018e1c:	dc39      	bgt.n	8018e92 <fp_montgomery_reduce_ex+0xb6>
 8018e1e:	46ae      	mov	lr, r5
 8018e20:	0099      	lsls	r1, r3, #2
   for (x = 0; x < pa; x++) {
 8018e22:	f04f 0c00 	mov.w	ip, #0
 8018e26:	459c      	cmp	ip, r3
 8018e28:	db39      	blt.n	8018e9e <fp_montgomery_reduce_ex+0xc2>
  _c   = c + pa;
 8018e2a:	eb05 0e01 	add.w	lr, r5, r1
  tmpm = a->dp;
 8018e2e:	f104 0208 	add.w	r2, r4, #8
  for (x = 0; x < pa+1; x++) {
 8018e32:	f104 0c04 	add.w	ip, r4, #4
 8018e36:	2700      	movs	r7, #0
 8018e38:	429f      	cmp	r7, r3
 8018e3a:	dd62      	ble.n	8018f02 <fp_montgomery_reduce_ex+0x126>
 8018e3c:	1c5f      	adds	r7, r3, #1
 8018e3e:	f101 0104 	add.w	r1, r1, #4
 8018e42:	f103 0001 	add.w	r0, r3, #1
 8018e46:	bfb8      	it	lt
 8018e48:	2100      	movlt	r1, #0
 8018e4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018e4e:	4411      	add	r1, r2
 8018e50:	3301      	adds	r3, #1
     *tmpm++ = 0;
 8018e52:	2200      	movs	r2, #0
  for (; x < oldused; x++) {
 8018e54:	4598      	cmp	r8, r3
 8018e56:	dc5a      	bgt.n	8018f0e <fp_montgomery_reduce_ex+0x132>
  a->used = pa+1;
 8018e58:	6020      	str	r0, [r4, #0]
  fp_clamp(a);
 8018e5a:	6823      	ldr	r3, [r4, #0]
 8018e5c:	b133      	cbz	r3, 8018e6c <fp_montgomery_reduce_ex+0x90>
 8018e5e:	1e5a      	subs	r2, r3, #1
 8018e60:	3301      	adds	r3, #1
 8018e62:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d055      	beq.n	8018f16 <fp_montgomery_reduce_ex+0x13a>
 8018e6a:	6863      	ldr	r3, [r4, #4]
 8018e6c:	6063      	str	r3, [r4, #4]
  if (fp_cmp_mag (a, m) != FP_LT) {
 8018e6e:	4631      	mov	r1, r6
 8018e70:	4620      	mov	r0, r4
 8018e72:	f7ff ff25 	bl	8018cc0 <fp_cmp_mag>
 8018e76:	3001      	adds	r0, #1
 8018e78:	d004      	beq.n	8018e84 <fp_montgomery_reduce_ex+0xa8>
    s_fp_sub (a, m, a);
 8018e7a:	4622      	mov	r2, r4
 8018e7c:	4631      	mov	r1, r6
 8018e7e:	4620      	mov	r0, r4
 8018e80:	f7ff fd17 	bl	80188b2 <s_fp_sub>
  XFREE(c, NULL, DYNAMIC_TYPE_BIGINT);
 8018e84:	4628      	mov	r0, r5
 8018e86:	f002 f893 	bl	801afb0 <free>
  return FP_OKAY;
 8018e8a:	2000      	movs	r0, #0
}
 8018e8c:	b005      	add	sp, #20
 8018e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       c[x] = a->dp[x];
 8018e92:	f851 0b04 	ldr.w	r0, [r1], #4
 8018e96:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
   for (x = 0; x < oldused; x++) {
 8018e9a:	3201      	adds	r2, #1
 8018e9c:	e7bd      	b.n	8018e1a <fp_montgomery_reduce_ex+0x3e>
       LOOP_START;
 8018e9e:	4677      	mov	r7, lr
 8018ea0:	9803      	ldr	r0, [sp, #12]
 8018ea2:	f857 2904 	ldr.w	r2, [r7], #-4
 8018ea6:	4342      	muls	r2, r0
 8018ea8:	9202      	str	r2, [sp, #8]
       tmpm = m->dp;
 8018eaa:	f106 0208 	add.w	r2, r6, #8
 8018eae:	9201      	str	r2, [sp, #4]
       fp_digit cy = 0;
 8018eb0:	2200      	movs	r2, #0
       y = 0;
 8018eb2:	4691      	mov	r9, r2
          INNERMUL;
 8018eb4:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8018eb8:	f8dd a004 	ldr.w	sl, [sp, #4]
 8018ebc:	eb10 0b02 	adds.w	fp, r0, r2
 8018ec0:	f85a 0b04 	ldr.w	r0, [sl], #4
 8018ec4:	f8cd a004 	str.w	sl, [sp, #4]
 8018ec8:	f04f 0200 	mov.w	r2, #0
 8018ecc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8018ed0:	4152      	adcs	r2, r2
       for (; y < pa; y++) {
 8018ed2:	f109 0901 	add.w	r9, r9, #1
          INNERMUL;
 8018ed6:	fbea b200 	umlal	fp, r2, sl, r0
       for (; y < pa; y++) {
 8018eda:	454b      	cmp	r3, r9
          INNERMUL;
 8018edc:	f8c7 b000 	str.w	fp, [r7]
       for (; y < pa; y++) {
 8018ee0:	d1e8      	bne.n	8018eb4 <fp_montgomery_reduce_ex+0xd8>
 8018ee2:	eb01 070e 	add.w	r7, r1, lr
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 8018ee6:	b922      	cbnz	r2, 8018ef2 <fp_montgomery_reduce_ex+0x116>
   for (x = 0; x < pa; x++) {
 8018ee8:	f10c 0c01 	add.w	ip, ip, #1
 8018eec:	f10e 0e04 	add.w	lr, lr, #4
 8018ef0:	e799      	b.n	8018e26 <fp_montgomery_reduce_ex+0x4a>
           PROPCARRY;
 8018ef2:	6838      	ldr	r0, [r7, #0]
 8018ef4:	1882      	adds	r2, r0, r2
 8018ef6:	f847 2b04 	str.w	r2, [r7], #4
 8018efa:	bf2c      	ite	cs
 8018efc:	2201      	movcs	r2, #1
 8018efe:	2200      	movcc	r2, #0
           ++_c;
 8018f00:	e7f1      	b.n	8018ee6 <fp_montgomery_reduce_ex+0x10a>
     *tmpm++ = *_c++;
 8018f02:	f85e 0027 	ldr.w	r0, [lr, r7, lsl #2]
 8018f06:	f84c 0f04 	str.w	r0, [ip, #4]!
  for (x = 0; x < pa+1; x++) {
 8018f0a:	3701      	adds	r7, #1
 8018f0c:	e794      	b.n	8018e38 <fp_montgomery_reduce_ex+0x5c>
     *tmpm++ = 0;
 8018f0e:	f841 2b04 	str.w	r2, [r1], #4
  for (; x < oldused; x++) {
 8018f12:	3301      	adds	r3, #1
 8018f14:	e79e      	b.n	8018e54 <fp_montgomery_reduce_ex+0x78>
  fp_clamp(a);
 8018f16:	6022      	str	r2, [r4, #0]
 8018f18:	e79f      	b.n	8018e5a <fp_montgomery_reduce_ex+0x7e>
      return FP_VAL;
 8018f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f1e:	e7b5      	b.n	8018e8c <fp_montgomery_reduce_ex+0xb0>
      return FP_MEM;
 8018f20:	f06f 0001 	mvn.w	r0, #1
 8018f24:	e7b2      	b.n	8018e8c <fp_montgomery_reduce_ex+0xb0>

08018f26 <fp_montgomery_reduce>:
  return fp_montgomery_reduce_ex(a, m, mp, 1);
 8018f26:	2301      	movs	r3, #1
 8018f28:	f7ff bf58 	b.w	8018ddc <fp_montgomery_reduce_ex>

08018f2c <fp_to_unsigned_bin_at_pos>:
{
 8018f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   int j = 0;
 8018f2e:	2500      	movs	r5, #0
 8018f30:	4410      	add	r0, r2
   for (i = 0; i < t->used-1; ) {
 8018f32:	462e      	mov	r6, r5
 8018f34:	680f      	ldr	r7, [r1, #0]
       b[x++] = (unsigned char)(t->dp[i] >> j);
 8018f36:	1cb3      	adds	r3, r6, #2
   for (i = 0; i < t->used-1; ) {
 8018f38:	3f01      	subs	r7, #1
 8018f3a:	42b7      	cmp	r7, r6
       b[x++] = (unsigned char)(t->dp[i] >> j);
 8018f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8018f40:	eba0 0402 	sub.w	r4, r0, r2
   for (i = 0; i < t->used-1; ) {
 8018f44:	dc03      	bgt.n	8018f4e <fp_to_unsigned_bin_at_pos+0x22>
 8018f46:	1911      	adds	r1, r2, r4
 8018f48:	1a88      	subs	r0, r1, r2
   while (n != 0) {
 8018f4a:	b95b      	cbnz	r3, 8018f64 <fp_to_unsigned_bin_at_pos+0x38>
}
 8018f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
       b[x++] = (unsigned char)(t->dp[i] >> j);
 8018f4e:	40eb      	lsrs	r3, r5
 8018f50:	f800 3b01 	strb.w	r3, [r0], #1
       j += 8;
 8018f54:	f105 0308 	add.w	r3, r5, #8
       i += j == DIGIT_BIT;
 8018f58:	2d18      	cmp	r5, #24
 8018f5a:	bf08      	it	eq
 8018f5c:	3601      	addeq	r6, #1
       j &= DIGIT_BIT - 1;
 8018f5e:	f003 051f 	and.w	r5, r3, #31
 8018f62:	e7e7      	b.n	8018f34 <fp_to_unsigned_bin_at_pos+0x8>
       b[x++] = (unsigned char)n;
 8018f64:	f801 3b01 	strb.w	r3, [r1], #1
       n >>= 8;
 8018f68:	0a1b      	lsrs	r3, r3, #8
 8018f6a:	e7ed      	b.n	8018f48 <fp_to_unsigned_bin_at_pos+0x1c>

08018f6c <fp_is_bit_set>:
    if (b > FP_MAX_BITS)
 8018f6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018f70:	d80f      	bhi.n	8018f92 <fp_is_bit_set+0x26>
    if ((fp_digit)a->used < i)
 8018f72:	6802      	ldr	r2, [r0, #0]
 8018f74:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
    i = b/DIGIT_BIT;
 8018f78:	ea4f 1351 	mov.w	r3, r1, lsr #5
    if ((fp_digit)a->used < i)
 8018f7c:	d30c      	bcc.n	8018f98 <fp_is_bit_set+0x2c>
    return (int)((a->dp[i] >> b%DIGIT_BIT) & (fp_digit)1);
 8018f7e:	3302      	adds	r3, #2
 8018f80:	f001 011f 	and.w	r1, r1, #31
 8018f84:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018f88:	fa20 f101 	lsr.w	r1, r0, r1
 8018f8c:	f001 0001 	and.w	r0, r1, #1
 8018f90:	4770      	bx	lr
        return FP_VAL;
 8018f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f96:	4770      	bx	lr
        return 0;
 8018f98:	2000      	movs	r0, #0
}
 8018f9a:	4770      	bx	lr

08018f9c <fp_count_bits>:
{
 8018f9c:	4603      	mov	r3, r0
  if (a->used == 0) {
 8018f9e:	6800      	ldr	r0, [r0, #0]
 8018fa0:	b128      	cbz	r0, 8018fae <fp_count_bits+0x12>
  r = (a->used - 1) * DIGIT_BIT;
 8018fa2:	1e42      	subs	r2, r0, #1
 8018fa4:	0150      	lsls	r0, r2, #5
  q = a->dp[a->used - 1];
 8018fa6:	3202      	adds	r2, #2
 8018fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  while (q > ((fp_digit) 0)) {
 8018fac:	b903      	cbnz	r3, 8018fb0 <fp_count_bits+0x14>
}
 8018fae:	4770      	bx	lr
    ++r;
 8018fb0:	3001      	adds	r0, #1
    q >>= ((fp_digit) 1);
 8018fb2:	085b      	lsrs	r3, r3, #1
 8018fb4:	e7fa      	b.n	8018fac <fp_count_bits+0x10>

08018fb6 <fp_unsigned_bin_size>:
{
 8018fb6:	b508      	push	{r3, lr}
  int     size = fp_count_bits (a);
 8018fb8:	f7ff fff0 	bl	8018f9c <fp_count_bits>
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
 8018fbc:	f010 0307 	ands.w	r3, r0, #7
 8018fc0:	bf18      	it	ne
 8018fc2:	2301      	movne	r3, #1
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	bfb8      	it	lt
 8018fc8:	3007      	addlt	r0, #7
}
 8018fca:	eb03 00e0 	add.w	r0, r3, r0, asr #3
 8018fce:	bd08      	pop	{r3, pc}

08018fd0 <fp_leading_bit>:
{
 8018fd0:	4602      	mov	r2, r0
    if (a->used != 0) {
 8018fd2:	6800      	ldr	r0, [r0, #0]
 8018fd4:	b160      	cbz	r0, 8018ff0 <fp_leading_bit+0x20>
        fp_digit q = a->dp[a->used - 1];
 8018fd6:	1c43      	adds	r3, r0, #1
    int bit = 0;
 8018fd8:	2000      	movs	r0, #0
        fp_digit q = a->dp[a->used - 1];
 8018fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018fde:	2204      	movs	r2, #4
            if ((unsigned char)q != 0)
 8018fe0:	b2d9      	uxtb	r1, r3
 8018fe2:	b109      	cbz	r1, 8018fe8 <fp_leading_bit+0x18>
                bit = (q & 0x80) != 0;
 8018fe4:	f3c3 10c0 	ubfx	r0, r3, #7, #1
        while (qSz > 0) {
 8018fe8:	3a01      	subs	r2, #1
            q >>= 8;
 8018fea:	ea4f 2313 	mov.w	r3, r3, lsr #8
        while (qSz > 0) {
 8018fee:	d1f7      	bne.n	8018fe0 <fp_leading_bit+0x10>
}
 8018ff0:	4770      	bx	lr

08018ff2 <fp_lshd>:
    if (a->used + x > FP_SIZE) return FP_VAL;
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	185a      	adds	r2, r3, r1
 8018ff6:	2a18      	cmp	r2, #24
{
 8018ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (a->used + x > FP_SIZE) return FP_VAL;
 8018ffa:	dc2b      	bgt.n	8019054 <fp_lshd+0x62>
    y = a->used + x - 1;
 8018ffc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    a->used = y + 1;
 8019000:	1c54      	adds	r4, r2, #1
 8019002:	f06f 0603 	mvn.w	r6, #3
 8019006:	6002      	str	r2, [r0, #0]
    for (; y >= x; y--) {
 8019008:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801900c:	434e      	muls	r6, r1
    y = a->used + x - 1;
 801900e:	4665      	mov	r5, ip
    for (; y >= x; y--) {
 8019010:	428d      	cmp	r5, r1
 8019012:	da14      	bge.n	801903e <fp_lshd+0x4c>
 8019014:	425b      	negs	r3, r3
 8019016:	428a      	cmp	r2, r1
 8019018:	bfb8      	it	lt
 801901a:	2300      	movlt	r3, #0
 801901c:	4463      	add	r3, ip
        a->dp[y] = 0;
 801901e:	f100 0208 	add.w	r2, r0, #8
 8019022:	2100      	movs	r1, #0
    for (; y >= 0; y--) {
 8019024:	2b00      	cmp	r3, #0
 8019026:	da0f      	bge.n	8019048 <fp_lshd+0x56>
    fp_clamp(a);
 8019028:	6803      	ldr	r3, [r0, #0]
 801902a:	b12b      	cbz	r3, 8019038 <fp_lshd+0x46>
 801902c:	1e5a      	subs	r2, r3, #1
 801902e:	3301      	adds	r3, #1
 8019030:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019034:	b163      	cbz	r3, 8019050 <fp_lshd+0x5e>
 8019036:	6843      	ldr	r3, [r0, #4]
 8019038:	6043      	str	r3, [r0, #4]
 801903a:	2000      	movs	r0, #0
}
 801903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->dp[y] = a->dp[y-x];
 801903e:	59a7      	ldr	r7, [r4, r6]
 8019040:	f844 7904 	str.w	r7, [r4], #-4
    for (; y >= x; y--) {
 8019044:	3d01      	subs	r5, #1
 8019046:	e7e3      	b.n	8019010 <fp_lshd+0x1e>
        a->dp[y] = 0;
 8019048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (; y >= 0; y--) {
 801904c:	3b01      	subs	r3, #1
 801904e:	e7e9      	b.n	8019024 <fp_lshd+0x32>
    fp_clamp(a);
 8019050:	6002      	str	r2, [r0, #0]
 8019052:	e7e9      	b.n	8019028 <fp_lshd+0x36>
    if (a->used + x > FP_SIZE) return FP_VAL;
 8019054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019058:	e7f0      	b.n	801903c <fp_lshd+0x4a>

0801905a <fp_zero>:
    a->used = 0;
 801905a:	2100      	movs	r1, #0
    a->sign = FP_ZPOS;
 801905c:	e9c0 1100 	strd	r1, r1, [r0]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 8019060:	2260      	movs	r2, #96	; 0x60
 8019062:	3008      	adds	r0, #8
 8019064:	f001 bfe4 	b.w	801b030 <memset>

08019068 <fp_2expt>:
{
 8019068:	b538      	push	{r3, r4, r5, lr}
 801906a:	460c      	mov	r4, r1
 801906c:	4605      	mov	r5, r0
   fp_zero (a);
 801906e:	f7ff fff4 	bl	801905a <fp_zero>
   if (z >= FP_SIZE) {
 8019072:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8019076:	d20a      	bcs.n	801908e <fp_2expt+0x26>
   z = b / DIGIT_BIT;
 8019078:	1163      	asrs	r3, r4, #5
  a->used = z + 1;
 801907a:	1c5a      	adds	r2, r3, #1
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 801907c:	f004 041f 	and.w	r4, r4, #31
 8019080:	3302      	adds	r3, #2
 8019082:	2101      	movs	r1, #1
 8019084:	fa01 f404 	lsl.w	r4, r1, r4
  a->used = z + 1;
 8019088:	602a      	str	r2, [r5, #0]
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 801908a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 801908e:	bd38      	pop	{r3, r4, r5, pc}

08019090 <fp_read_unsigned_bin>:
{
 8019090:	b570      	push	{r4, r5, r6, lr}
 8019092:	4614      	mov	r4, r2
 8019094:	4605      	mov	r5, r0
 8019096:	460e      	mov	r6, r1
  fp_zero (a);
 8019098:	f7ff ffdf 	bl	801905a <fp_zero>
  if (c == 0) {
 801909c:	b1ac      	cbz	r4, 80190ca <fp_read_unsigned_bin+0x3a>
  if (c > 0 && (word32)c > maxC) {
 801909e:	2c60      	cmp	r4, #96	; 0x60
     int excess = (c - maxC);
 80190a0:	bfc2      	ittt	gt
 80190a2:	3c60      	subgt	r4, #96	; 0x60
     b += excess;
 80190a4:	1936      	addgt	r6, r6, r4
     c -= excess;
 80190a6:	2460      	movgt	r4, #96	; 0x60
     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
 80190a8:	1ce2      	adds	r2, r4, #3
 80190aa:	462b      	mov	r3, r5
 80190ac:	0892      	lsrs	r2, r2, #2
 80190ae:	f843 2b08 	str.w	r2, [r3], #8
     for (c -= 1; c >= 0; c -= 1) {
 80190b2:	3c01      	subs	r4, #1
 80190b4:	2c00      	cmp	r4, #0
 80190b6:	da0a      	bge.n	80190ce <fp_read_unsigned_bin+0x3e>
  fp_clamp (a);
 80190b8:	682b      	ldr	r3, [r5, #0]
 80190ba:	b12b      	cbz	r3, 80190c8 <fp_read_unsigned_bin+0x38>
 80190bc:	1e5a      	subs	r2, r3, #1
 80190be:	3301      	adds	r3, #1
 80190c0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80190c4:	b13b      	cbz	r3, 80190d6 <fp_read_unsigned_bin+0x46>
 80190c6:	686b      	ldr	r3, [r5, #4]
 80190c8:	606b      	str	r3, [r5, #4]
}
 80190ca:	2000      	movs	r0, #0
 80190cc:	bd70      	pop	{r4, r5, r6, pc}
       pd[c] = *b++;
 80190ce:	f816 2b01 	ldrb.w	r2, [r6], #1
 80190d2:	551a      	strb	r2, [r3, r4]
 80190d4:	e7ed      	b.n	80190b2 <fp_read_unsigned_bin+0x22>
  fp_clamp (a);
 80190d6:	602a      	str	r2, [r5, #0]
 80190d8:	e7ee      	b.n	80190b8 <fp_read_unsigned_bin+0x28>

080190da <fp_set>:
{
 80190da:	b538      	push	{r3, r4, r5, lr}
 80190dc:	4605      	mov	r5, r0
 80190de:	460c      	mov	r4, r1
   fp_zero(a);
 80190e0:	f7ff ffbb 	bl	801905a <fp_zero>
   a->dp[0] = b;
 80190e4:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
 80190e6:	3c00      	subs	r4, #0
 80190e8:	bf18      	it	ne
 80190ea:	2401      	movne	r4, #1
 80190ec:	602c      	str	r4, [r5, #0]
}
 80190ee:	bd38      	pop	{r3, r4, r5, pc}

080190f0 <fp_montgomery_calc_normalization>:
{
 80190f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190f2:	4605      	mov	r5, r0
  bits = fp_count_bits (b) % DIGIT_BIT;
 80190f4:	4608      	mov	r0, r1
 80190f6:	f7ff ff51 	bl	8018f9c <fp_count_bits>
  if (!bits) bits = DIGIT_BIT;
 80190fa:	f010 041f 	ands.w	r4, r0, #31
{
 80190fe:	460e      	mov	r6, r1
  if (!bits) bits = DIGIT_BIT;
 8019100:	d024      	beq.n	801914c <fp_montgomery_calc_normalization+0x5c>
  bits = fp_count_bits (b) % DIGIT_BIT;
 8019102:	4240      	negs	r0, r0
 8019104:	f000 001f 	and.w	r0, r0, #31
 8019108:	bf58      	it	pl
 801910a:	4244      	negpl	r4, r0
  if (b->used > 1) {
 801910c:	6831      	ldr	r1, [r6, #0]
 801910e:	2901      	cmp	r1, #1
 8019110:	dd1e      	ble.n	8019150 <fp_montgomery_calc_normalization+0x60>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
 8019112:	eb04 1141 	add.w	r1, r4, r1, lsl #5
 8019116:	3921      	subs	r1, #33	; 0x21
 8019118:	4628      	mov	r0, r5
 801911a:	f7ff ffa5 	bl	8019068 <fp_2expt>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 801911e:	3c01      	subs	r4, #1
    int err = fp_mul_2 (a, a);
 8019120:	4629      	mov	r1, r5
 8019122:	4628      	mov	r0, r5
 8019124:	f7ff fc0e 	bl	8018944 <fp_mul_2>
    if (err != FP_OKAY) {
 8019128:	4607      	mov	r7, r0
 801912a:	b968      	cbnz	r0, 8019148 <fp_montgomery_calc_normalization+0x58>
    if (fp_cmp_mag (a, b) != FP_LT) {
 801912c:	4631      	mov	r1, r6
 801912e:	4628      	mov	r0, r5
 8019130:	f7ff fdc6 	bl	8018cc0 <fp_cmp_mag>
 8019134:	3001      	adds	r0, #1
 8019136:	d004      	beq.n	8019142 <fp_montgomery_calc_normalization+0x52>
      s_fp_sub (a, b, a);
 8019138:	462a      	mov	r2, r5
 801913a:	4631      	mov	r1, r6
 801913c:	4628      	mov	r0, r5
 801913e:	f7ff fbb8 	bl	80188b2 <s_fp_sub>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 8019142:	3401      	adds	r4, #1
 8019144:	2c20      	cmp	r4, #32
 8019146:	d1eb      	bne.n	8019120 <fp_montgomery_calc_normalization+0x30>
}
 8019148:	4638      	mov	r0, r7
 801914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!bits) bits = DIGIT_BIT;
 801914c:	2420      	movs	r4, #32
 801914e:	e7dd      	b.n	801910c <fp_montgomery_calc_normalization+0x1c>
   a->dp[0] = b;
 8019150:	2401      	movs	r4, #1
   fp_zero(a);
 8019152:	4628      	mov	r0, r5
 8019154:	f7ff ff81 	bl	801905a <fp_zero>
   a->dp[0] = b;
 8019158:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
 801915a:	602c      	str	r4, [r5, #0]
     bits = 1;
 801915c:	e7df      	b.n	801911e <fp_montgomery_calc_normalization+0x2e>

0801915e <fp_rshd>:
{
 801915e:	b4f0      	push	{r4, r5, r6, r7}
  if (x >= a->used) {
 8019160:	6804      	ldr	r4, [r0, #0]
 8019162:	428c      	cmp	r4, r1
{
 8019164:	4603      	mov	r3, r0
  if (x >= a->used) {
 8019166:	dd16      	ble.n	8019196 <fp_rshd+0x38>
 8019168:	f100 0608 	add.w	r6, r0, #8
 801916c:	4635      	mov	r5, r6
   for (y = 0; y < a->used - x; y++) {
 801916e:	2200      	movs	r2, #0
 8019170:	1a60      	subs	r0, r4, r1
 8019172:	4290      	cmp	r0, r2
 8019174:	dc12      	bgt.n	801919c <fp_rshd+0x3e>
 8019176:	4602      	mov	r2, r0
      a->dp[y] = 0;
 8019178:	2100      	movs	r1, #0
   for (; y < a->used; y++) {
 801917a:	4294      	cmp	r4, r2
 801917c:	dc14      	bgt.n	80191a8 <fp_rshd+0x4a>
   a->used -= x;
 801917e:	6018      	str	r0, [r3, #0]
   fp_clamp(a);
 8019180:	681a      	ldr	r2, [r3, #0]
 8019182:	b12a      	cbz	r2, 8019190 <fp_rshd+0x32>
 8019184:	1e51      	subs	r1, r2, #1
 8019186:	3201      	adds	r2, #1
 8019188:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801918c:	b182      	cbz	r2, 80191b0 <fp_rshd+0x52>
 801918e:	685a      	ldr	r2, [r3, #4]
 8019190:	605a      	str	r2, [r3, #4]
}
 8019192:	bcf0      	pop	{r4, r5, r6, r7}
 8019194:	4770      	bx	lr
 8019196:	bcf0      	pop	{r4, r5, r6, r7}
     fp_zero(a);
 8019198:	f7ff bf5f 	b.w	801905a <fp_zero>
      a->dp[y] = a->dp[y+x];
 801919c:	f855 7021 	ldr.w	r7, [r5, r1, lsl #2]
 80191a0:	f845 7b04 	str.w	r7, [r5], #4
   for (y = 0; y < a->used - x; y++) {
 80191a4:	3201      	adds	r2, #1
 80191a6:	e7e4      	b.n	8019172 <fp_rshd+0x14>
      a->dp[y] = 0;
 80191a8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
   for (; y < a->used; y++) {
 80191ac:	3201      	adds	r2, #1
 80191ae:	e7e4      	b.n	801917a <fp_rshd+0x1c>
   fp_clamp(a);
 80191b0:	6019      	str	r1, [r3, #0]
 80191b2:	e7e5      	b.n	8019180 <fp_rshd+0x22>

080191b4 <fp_rshb>:
{
 80191b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (x <= 0) return;
 80191b6:	1e0c      	subs	r4, r1, #0
{
 80191b8:	4605      	mov	r5, r0
    if (x <= 0) return;
 80191ba:	dd1f      	ble.n	80191fc <fp_rshb+0x48>
    if (x >= DIGIT_BIT) {
 80191bc:	2c1f      	cmp	r4, #31
 80191be:	dd05      	ble.n	80191cc <fp_rshb+0x18>
        fp_rshd(c, x / DIGIT_BIT);
 80191c0:	1161      	asrs	r1, r4, #5
 80191c2:	f7ff ffcc 	bl	801915e <fp_rshd>
        if (D == 0) return;
 80191c6:	f014 041f 	ands.w	r4, r4, #31
 80191ca:	d017      	beq.n	80191fc <fp_rshb+0x48>
    if (fp_iszero(c)) return;
 80191cc:	682b      	ldr	r3, [r5, #0]
 80191ce:	b1ab      	cbz	r3, 80191fc <fp_rshb+0x48>
    shift = DIGIT_BIT - D;
 80191d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    tmpc = c->dp + (c->used - 1);
 80191d4:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80191d8:	40a1      	lsls	r1, r4
    shift = DIGIT_BIT - D;
 80191da:	f1c4 0720 	rsb	r7, r4, #32
    tmpc = c->dp + (c->used - 1);
 80191de:	3204      	adds	r2, #4
    for (x = c->used - 1; x >= 0; x--) {
 80191e0:	3b01      	subs	r3, #1
 80191e2:	43c9      	mvns	r1, r1
    r = 0;
 80191e4:	2000      	movs	r0, #0
    for (x = c->used - 1; x >= 0; x--) {
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	da09      	bge.n	80191fe <fp_rshb+0x4a>
    fp_clamp(c);
 80191ea:	682b      	ldr	r3, [r5, #0]
 80191ec:	b12b      	cbz	r3, 80191fa <fp_rshb+0x46>
 80191ee:	1e5a      	subs	r2, r3, #1
 80191f0:	3301      	adds	r3, #1
 80191f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80191f6:	b173      	cbz	r3, 8019216 <fp_rshb+0x62>
 80191f8:	686b      	ldr	r3, [r5, #4]
 80191fa:	606b      	str	r3, [r5, #4]
}
 80191fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      rr = *tmpc & mask;
 80191fe:	f8d2 c000 	ldr.w	ip, [r2]
      *tmpc = (*tmpc >> D) | (r << shift);
 8019202:	40b8      	lsls	r0, r7
 8019204:	fa2c f604 	lsr.w	r6, ip, r4
 8019208:	4330      	orrs	r0, r6
 801920a:	f842 0904 	str.w	r0, [r2], #-4
    for (x = c->used - 1; x >= 0; x--) {
 801920e:	3b01      	subs	r3, #1
      r = rr;
 8019210:	ea0c 0001 	and.w	r0, ip, r1
 8019214:	e7e7      	b.n	80191e6 <fp_rshb+0x32>
    fp_clamp(c);
 8019216:	602a      	str	r2, [r5, #0]
 8019218:	e7e7      	b.n	80191ea <fp_rshb+0x36>

0801921a <fp_sub_d>:
{
 801921a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801921c:	4605      	mov	r5, r0
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801921e:	2068      	movs	r0, #104	; 0x68
{
 8019220:	460f      	mov	r7, r1
 8019222:	4616      	mov	r6, r2
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8019224:	f001 febc 	bl	801afa0 <malloc>
 8019228:	4604      	mov	r4, r0
   if (tmp == NULL)
 801922a:	b180      	cbz	r0, 801924e <fp_sub_d+0x34>
    fp_zero(a);
 801922c:	f7ff ff15 	bl	801905a <fp_zero>
   fp_set(tmp, b);
 8019230:	4639      	mov	r1, r7
 8019232:	4620      	mov	r0, r4
 8019234:	f7ff ff51 	bl	80190da <fp_set>
     err = fp_sub(a, tmp, c);
 8019238:	4628      	mov	r0, r5
 801923a:	4632      	mov	r2, r6
 801923c:	4621      	mov	r1, r4
 801923e:	f7ff fd7c 	bl	8018d3a <fp_sub>
 8019242:	4605      	mov	r5, r0
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8019244:	4620      	mov	r0, r4
 8019246:	f001 feb3 	bl	801afb0 <free>
}
 801924a:	4628      	mov	r0, r5
 801924c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       return FP_MEM;
 801924e:	f06f 0501 	mvn.w	r5, #1
 8019252:	e7fa      	b.n	801924a <fp_sub_d+0x30>

08019254 <mp_init>:
{
 8019254:	b508      	push	{r3, lr}
  if (a)
 8019256:	b108      	cbz	r0, 801925c <mp_init+0x8>
    fp_zero(a);
 8019258:	f7ff feff 	bl	801905a <fp_zero>
}
 801925c:	2000      	movs	r0, #0
 801925e:	bd08      	pop	{r3, pc}

08019260 <fp_forcezero>:
    if (a == NULL)
 8019260:	b138      	cbz	r0, 8019272 <fp_forcezero+0x12>
    a->used = 0;
 8019262:	2200      	movs	r2, #0
    a->sign = FP_ZPOS;
 8019264:	e9c0 2200 	strd	r2, r2, [r0]
    ForceZero(a->dp, size * sizeof(fp_digit));
 8019268:	f100 0308 	add.w	r3, r0, #8
WC_MISC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 801926c:	3068      	adds	r0, #104	; 0x68
    while (len--) *z++ = 0;
 801926e:	4283      	cmp	r3, r0
 8019270:	d100      	bne.n	8019274 <fp_forcezero+0x14>
}
 8019272:	4770      	bx	lr
 8019274:	f803 2b01 	strb.w	r2, [r3], #1
 8019278:	e7f9      	b.n	801926e <fp_forcezero+0xe>

0801927a <mp_forcezero>:
    fp_forcezero(a);
 801927a:	f7ff bff1 	b.w	8019260 <fp_forcezero>

0801927e <mp_clear>:
    if (a == NULL)
 801927e:	b108      	cbz	r0, 8019284 <mp_clear+0x6>
    fp_clear(a);
 8019280:	f7ff beeb 	b.w	801905a <fp_zero>
}
 8019284:	4770      	bx	lr

08019286 <mp_free>:
 8019286:	4770      	bx	lr

08019288 <mp_init_multi>:
{
 8019288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801928c:	460e      	mov	r6, r1
 801928e:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 8019292:	4615      	mov	r5, r2
 8019294:	461c      	mov	r4, r3
    if (a)
 8019296:	b108      	cbz	r0, 801929c <mp_init_multi+0x14>
    fp_zero(a);
 8019298:	f7ff fedf 	bl	801905a <fp_zero>
    if (b)
 801929c:	b116      	cbz	r6, 80192a4 <mp_init_multi+0x1c>
    fp_zero(a);
 801929e:	4630      	mov	r0, r6
 80192a0:	f7ff fedb 	bl	801905a <fp_zero>
    if (c)
 80192a4:	b115      	cbz	r5, 80192ac <mp_init_multi+0x24>
    fp_zero(a);
 80192a6:	4628      	mov	r0, r5
 80192a8:	f7ff fed7 	bl	801905a <fp_zero>
    if (d)
 80192ac:	b114      	cbz	r4, 80192b4 <mp_init_multi+0x2c>
    fp_zero(a);
 80192ae:	4620      	mov	r0, r4
 80192b0:	f7ff fed3 	bl	801905a <fp_zero>
    if (e)
 80192b4:	f1b8 0f00 	cmp.w	r8, #0
 80192b8:	d002      	beq.n	80192c0 <mp_init_multi+0x38>
    fp_zero(a);
 80192ba:	4640      	mov	r0, r8
 80192bc:	f7ff fecd 	bl	801905a <fp_zero>
    if (f)
 80192c0:	b117      	cbz	r7, 80192c8 <mp_init_multi+0x40>
    fp_zero(a);
 80192c2:	4638      	mov	r0, r7
 80192c4:	f7ff fec9 	bl	801905a <fp_zero>
}
 80192c8:	2000      	movs	r0, #0
 80192ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192ce <mp_add>:
  return fp_add(a, b, c);
 80192ce:	f7ff bd12 	b.w	8018cf6 <fp_add>

080192d2 <mp_sub>:
  return fp_sub(a, b, c);
 80192d2:	f7ff bd32 	b.w	8018d3a <fp_sub>

080192d6 <mp_submod_ct>:
  return fp_submod_ct(a, b, c, d);
 80192d6:	f7ff bc2a 	b.w	8018b2e <fp_submod_ct>

080192da <mp_addmod_ct>:
  return fp_addmod_ct(a, b, c, d);
 80192da:	f7ff bc79 	b.w	8018bd0 <fp_addmod_ct>

080192de <mp_cmp>:
  return fp_cmp(a, b);
 80192de:	f7ff bd4d 	b.w	8018d7c <fp_cmp>

080192e2 <mp_cmp_d>:
  return fp_cmp_d(a, b);
 80192e2:	f7ff bcd4 	b.w	8018c8e <fp_cmp_d>

080192e6 <mp_unsigned_bin_size>:
  return fp_unsigned_bin_size(a);
 80192e6:	f7ff be66 	b.w	8018fb6 <fp_unsigned_bin_size>

080192ea <mp_read_unsigned_bin>:
  return fp_read_unsigned_bin(a, b, c);
 80192ea:	f7ff bed1 	b.w	8019090 <fp_read_unsigned_bin>

080192ee <mp_sub_d>:
  return fp_sub_d(a, b, c);
 80192ee:	f7ff bf94 	b.w	801921a <fp_sub_d>

080192f2 <fp_copy>:
    if (a != b) {
 80192f2:	4288      	cmp	r0, r1
{
 80192f4:	460b      	mov	r3, r1
    if (a != b) {
 80192f6:	d00a      	beq.n	801930e <fp_copy+0x1c>
        b->used = a->used;
 80192f8:	6802      	ldr	r2, [r0, #0]
 80192fa:	600a      	str	r2, [r1, #0]
        b->sign = a->sign;
 80192fc:	6842      	ldr	r2, [r0, #4]
 80192fe:	604a      	str	r2, [r1, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
 8019300:	f100 0108 	add.w	r1, r0, #8
 8019304:	2260      	movs	r2, #96	; 0x60
 8019306:	f103 0008 	add.w	r0, r3, #8
 801930a:	f001 be69 	b.w	801afe0 <memcpy>
}
 801930e:	4770      	bx	lr

08019310 <fp_mul_2d>:
{
 8019310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019312:	460d      	mov	r5, r1
   fp_copy(a, c);
 8019314:	4611      	mov	r1, r2
{
 8019316:	4614      	mov	r4, r2
   fp_copy(a, c);
 8019318:	f7ff ffeb 	bl	80192f2 <fp_copy>
   if (b >= DIGIT_BIT) {
 801931c:	2d1f      	cmp	r5, #31
 801931e:	dc0d      	bgt.n	801933c <fp_mul_2d+0x2c>
   if (b != 0) {
 8019320:	f015 061f 	ands.w	r6, r5, #31
 8019324:	d111      	bne.n	801934a <fp_mul_2d+0x3a>
   fp_clamp(c);
 8019326:	6823      	ldr	r3, [r4, #0]
 8019328:	b12b      	cbz	r3, 8019336 <fp_mul_2d+0x26>
 801932a:	1e5a      	subs	r2, r3, #1
 801932c:	3301      	adds	r3, #1
 801932e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019332:	b383      	cbz	r3, 8019396 <fp_mul_2d+0x86>
 8019334:	6863      	ldr	r3, [r4, #4]
 8019336:	6063      	str	r3, [r4, #4]
   return FP_OKAY;
 8019338:	2000      	movs	r0, #0
 801933a:	e005      	b.n	8019348 <fp_mul_2d+0x38>
      int ret = fp_lshd(c, b/DIGIT_BIT);
 801933c:	1169      	asrs	r1, r5, #5
 801933e:	4620      	mov	r0, r4
 8019340:	f7ff fe57 	bl	8018ff2 <fp_lshd>
      if (ret != FP_OKAY)
 8019344:	2800      	cmp	r0, #0
 8019346:	d0eb      	beq.n	8019320 <fp_mul_2d+0x10>
}
 8019348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b %= DIGIT_BIT;
 801934a:	426d      	negs	r5, r5
      for (x = 0; x < c->used; x++) {
 801934c:	4622      	mov	r2, r4
   b %= DIGIT_BIT;
 801934e:	f005 051f 	and.w	r5, r5, #31
 8019352:	bf58      	it	pl
 8019354:	426e      	negpl	r6, r5
      for (x = 0; x < c->used; x++) {
 8019356:	2000      	movs	r0, #0
 8019358:	f852 3b08 	ldr.w	r3, [r2], #8
      shift = DIGIT_BIT - b;
 801935c:	f1c6 0c20 	rsb	ip, r6, #32
      carry = 0;
 8019360:	4601      	mov	r1, r0
      for (x = 0; x < c->used; x++) {
 8019362:	4283      	cmp	r3, r0
 8019364:	dc08      	bgt.n	8019378 <fp_mul_2d+0x68>
      if (carry && x < FP_SIZE) {
 8019366:	b189      	cbz	r1, 801938c <fp_mul_2d+0x7c>
 8019368:	2b17      	cmp	r3, #23
 801936a:	dc0f      	bgt.n	801938c <fp_mul_2d+0x7c>
         c->dp[c->used++] = carry;
 801936c:	1c5a      	adds	r2, r3, #1
 801936e:	3302      	adds	r3, #2
 8019370:	6022      	str	r2, [r4, #0]
 8019372:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
      if (x == FP_SIZE)
 8019376:	e7d6      	b.n	8019326 <fp_mul_2d+0x16>
          carrytmp = c->dp[x] >> shift;
 8019378:	6817      	ldr	r7, [r2, #0]
          c->dp[x] = (c->dp[x] << b) + carry;
 801937a:	fa07 f506 	lsl.w	r5, r7, r6
 801937e:	4429      	add	r1, r5
 8019380:	f842 1b04 	str.w	r1, [r2], #4
      for (x = 0; x < c->used; x++) {
 8019384:	3001      	adds	r0, #1
          carry = carrytmp;
 8019386:	fa27 f10c 	lsr.w	r1, r7, ip
 801938a:	e7ea      	b.n	8019362 <fp_mul_2d+0x52>
      if (x == FP_SIZE)
 801938c:	2b18      	cmp	r3, #24
 801938e:	d1ca      	bne.n	8019326 <fp_mul_2d+0x16>
         return FP_VAL;
 8019390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019394:	e7d8      	b.n	8019348 <fp_mul_2d+0x38>
   fp_clamp(c);
 8019396:	6022      	str	r2, [r4, #0]
 8019398:	e7c5      	b.n	8019326 <fp_mul_2d+0x16>

0801939a <fp_mul_comba>:
{
 801939a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801939e:	b087      	sub	sp, #28
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 80193a0:	6803      	ldr	r3, [r0, #0]
{
 80193a2:	9205      	str	r2, [sp, #20]
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 80193a4:	680a      	ldr	r2, [r1, #0]
 80193a6:	4413      	add	r3, r2
 80193a8:	2b17      	cmp	r3, #23
{
 80193aa:	4606      	mov	r6, r0
 80193ac:	460d      	mov	r5, r1
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 80193ae:	dc6e      	bgt.n	801948e <fp_mul_comba+0xf4>
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80193b0:	2068      	movs	r0, #104	; 0x68
 80193b2:	f001 fdf5 	bl	801afa0 <malloc>
   if (tmp == NULL)
 80193b6:	4604      	mov	r4, r0
 80193b8:	2800      	cmp	r0, #0
 80193ba:	d06b      	beq.n	8019494 <fp_mul_comba+0xfa>
   pa = A->used + B->used;
 80193bc:	4637      	mov	r7, r6
 80193be:	46a8      	mov	r8, r5
 80193c0:	f857 3b08 	ldr.w	r3, [r7], #8
 80193c4:	f858 2b08 	ldr.w	r2, [r8], #8
 80193c8:	4413      	add	r3, r2
   if (pa >= FP_SIZE) {
 80193ca:	2b17      	cmp	r3, #23
 80193cc:	bfa8      	it	ge
 80193ce:	2317      	movge	r3, #23
 80193d0:	9302      	str	r3, [sp, #8]
    fp_zero(a);
 80193d2:	f7ff fe42 	bl	801905a <fp_zero>
   COMBA_CLEAR;
 80193d6:	2200      	movs	r2, #0
 80193d8:	f104 0308 	add.w	r3, r4, #8
 80193dc:	9303      	str	r3, [sp, #12]
 80193de:	4611      	mov	r1, r2
   for (ix = 0; ix < pa; ix++) {
 80193e0:	4694      	mov	ip, r2
 80193e2:	9b02      	ldr	r3, [sp, #8]
 80193e4:	459c      	cmp	ip, r3
 80193e6:	db18      	blt.n	801941a <fp_mul_comba+0x80>
  dst->sign = A->sign ^ B->sign;
 80193e8:	6871      	ldr	r1, [r6, #4]
 80193ea:	686a      	ldr	r2, [r5, #4]
  dst->used = pa;
 80193ec:	6023      	str	r3, [r4, #0]
  fp_clamp(dst);
 80193ee:	6823      	ldr	r3, [r4, #0]
 80193f0:	b13b      	cbz	r3, 8019402 <fp_mul_comba+0x68>
 80193f2:	1e58      	subs	r0, r3, #1
 80193f4:	3301      	adds	r3, #1
 80193f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d045      	beq.n	801948a <fp_mul_comba+0xf0>
  dst->sign = A->sign ^ B->sign;
 80193fe:	ea81 0302 	eor.w	r3, r1, r2
  fp_copy(dst, C);
 8019402:	9905      	ldr	r1, [sp, #20]
  fp_clamp(dst);
 8019404:	6063      	str	r3, [r4, #4]
  fp_copy(dst, C);
 8019406:	4620      	mov	r0, r4
 8019408:	f7ff ff73 	bl	80192f2 <fp_copy>
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801940c:	4620      	mov	r0, r4
 801940e:	f001 fdcf 	bl	801afb0 <free>
  return ret;
 8019412:	2000      	movs	r0, #0
}
 8019414:	b007      	add	sp, #28
 8019416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ty = MIN(ix, (B->used > 0 ? B->used - 1 : 0));
 801941a:	682b      	ldr	r3, [r5, #0]
 801941c:	2b01      	cmp	r3, #1
 801941e:	bfb8      	it	lt
 8019420:	2301      	movlt	r3, #1
 8019422:	3b01      	subs	r3, #1
 8019424:	4563      	cmp	r3, ip
 8019426:	bfa8      	it	ge
 8019428:	4663      	movge	r3, ip
      tx = ix - ty;
 801942a:	ebac 0e03 	sub.w	lr, ip, r3
      tmpx = A->dp + tx;
 801942e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8019432:	9004      	str	r0, [sp, #16]
      tmpy = B->dp + ty;
 8019434:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8019438:	9001      	str	r0, [sp, #4]
      iy = MIN(A->used-tx, ty+1);
 801943a:	6830      	ldr	r0, [r6, #0]
 801943c:	eba0 000e 	sub.w	r0, r0, lr
 8019440:	4298      	cmp	r0, r3
      COMBA_FORWARD;
 8019442:	468b      	mov	fp, r1
 8019444:	4611      	mov	r1, r2
 8019446:	f04f 0200 	mov.w	r2, #0
      iy = MIN(A->used-tx, ty+1);
 801944a:	bfc8      	it	gt
 801944c:	1c58      	addgt	r0, r3, #1
      for (iz = 0; iz < iy; ++iz) {
 801944e:	4696      	mov	lr, r2
 8019450:	4586      	cmp	lr, r0
 8019452:	db06      	blt.n	8019462 <fp_mul_comba+0xc8>
      COMBA_STORE(dst->dp[ix]);
 8019454:	9b03      	ldr	r3, [sp, #12]
 8019456:	f843 bb04 	str.w	fp, [r3], #4
   for (ix = 0; ix < pa; ix++) {
 801945a:	f10c 0c01 	add.w	ip, ip, #1
      COMBA_STORE(dst->dp[ix]);
 801945e:	9303      	str	r3, [sp, #12]
   for (ix = 0; ix < pa; ix++) {
 8019460:	e7bf      	b.n	80193e2 <fp_mul_comba+0x48>
          MULADD(_tmpx, _tmpy);
 8019462:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019466:	f859 3904 	ldr.w	r3, [r9], #-4
 801946a:	f8cd 9004 	str.w	r9, [sp, #4]
 801946e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8019472:	f859 902e 	ldr.w	r9, [r9, lr, lsl #2]
 8019476:	469a      	mov	sl, r3
 8019478:	2300      	movs	r3, #0
 801947a:	fbe9 b30a 	umlal	fp, r3, r9, sl
 801947e:	18c9      	adds	r1, r1, r3
 8019480:	f142 0200 	adc.w	r2, r2, #0
      for (iz = 0; iz < iy; ++iz) {
 8019484:	f10e 0e01 	add.w	lr, lr, #1
 8019488:	e7e2      	b.n	8019450 <fp_mul_comba+0xb6>
  fp_clamp(dst);
 801948a:	6020      	str	r0, [r4, #0]
 801948c:	e7af      	b.n	80193ee <fp_mul_comba+0x54>
   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 801948e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019492:	e7bf      	b.n	8019414 <fp_mul_comba+0x7a>
       return FP_MEM;
 8019494:	f06f 0001 	mvn.w	r0, #1
 8019498:	e7bc      	b.n	8019414 <fp_mul_comba+0x7a>

0801949a <fp_mul>:
{
 801949a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    y  = MAX(A->used, B->used);
 801949c:	680f      	ldr	r7, [r1, #0]
 801949e:	6806      	ldr	r6, [r0, #0]
    oldused = C->used;
 80194a0:	6815      	ldr	r5, [r2, #0]
    y  = MAX(A->used, B->used);
 80194a2:	42b7      	cmp	r7, r6
 80194a4:	463b      	mov	r3, r7
 80194a6:	bfb8      	it	lt
 80194a8:	4633      	movlt	r3, r6
    if (y + yy >= FP_SIZE) {
 80194aa:	42b7      	cmp	r7, r6
 80194ac:	bfd4      	ite	le
 80194ae:	eb03 0c07 	addle.w	ip, r3, r7
 80194b2:	eb03 0c06 	addgt.w	ip, r3, r6
 80194b6:	f1bc 0f17 	cmp.w	ip, #23
{
 80194ba:	4614      	mov	r4, r2
    if (y + yy >= FP_SIZE) {
 80194bc:	dc0f      	bgt.n	80194de <fp_mul+0x44>
        if (y == 8) {
 80194be:	2b08      	cmp	r3, #8
 80194c0:	d10a      	bne.n	80194d8 <fp_mul+0x3e>
           ret = fp_mul_comba8(A,B,C);
 80194c2:	f7fe ff4c 	bl	801835e <fp_mul_comba8>
    for (y = C->used; y >= 0 && y < oldused; y++) {
 80194c6:	4622      	mov	r2, r4
        C->dp[y] = 0;
 80194c8:	2100      	movs	r1, #0
    for (y = C->used; y >= 0 && y < oldused; y++) {
 80194ca:	f852 3b08 	ldr.w	r3, [r2], #8
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	db01      	blt.n	80194d6 <fp_mul+0x3c>
 80194d2:	42ab      	cmp	r3, r5
 80194d4:	db06      	blt.n	80194e4 <fp_mul+0x4a>
}
 80194d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = fp_mul_comba(A,B,C);
 80194d8:	f7ff ff5f 	bl	801939a <fp_mul_comba>
 80194dc:	e7f3      	b.n	80194c6 <fp_mul+0x2c>
       ret = FP_VAL;
 80194de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194e2:	e7f0      	b.n	80194c6 <fp_mul+0x2c>
        C->dp[y] = 0;
 80194e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (y = C->used; y >= 0 && y < oldused; y++) {
 80194e8:	3301      	adds	r3, #1
 80194ea:	e7f0      	b.n	80194ce <fp_mul+0x34>

080194ec <mp_mul>:
  return fp_mul(a, b, c);
 80194ec:	f7ff bfd5 	b.w	801949a <fp_mul>

080194f0 <fp_mod_2d>:
{
 80194f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (b <= 0) {
 80194f2:	1e0d      	subs	r5, r1, #0
{
 80194f4:	4607      	mov	r7, r0
 80194f6:	4614      	mov	r4, r2
   if (b <= 0) {
 80194f8:	dc04      	bgt.n	8019504 <fp_mod_2d+0x14>
}
 80194fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fp_zero(c);
 80194fe:	4610      	mov	r0, r2
 8019500:	f7ff bdab 	b.w	801905a <fp_zero>
   fp_copy(a, c);
 8019504:	4611      	mov	r1, r2
 8019506:	f7ff fef4 	bl	80192f2 <fp_copy>
   if (c->sign == FP_ZPOS && b >= (DIGIT_BIT * a->used)) {
 801950a:	6866      	ldr	r6, [r4, #4]
 801950c:	b91e      	cbnz	r6, 8019516 <fp_mod_2d+0x26>
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 8019514:	da36      	bge.n	8019584 <fp_mod_2d+0x94>
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 8019516:	f105 021f 	add.w	r2, r5, #31
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 801951a:	2e01      	cmp	r6, #1
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 801951c:	ea4f 1352 	mov.w	r3, r2, lsr #5
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 8019520:	d02d      	beq.n	801957e <fp_mod_2d+0x8e>
   for (x = bmax; x < (unsigned int)c->used; x++) {
 8019522:	4620      	mov	r0, r4
   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 8019524:	461a      	mov	r2, r3
   for (x = bmax; x < (unsigned int)c->used; x++) {
 8019526:	f850 1b08 	ldr.w	r1, [r0], #8
    c->dp[x] = 0;
 801952a:	2700      	movs	r7, #0
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801952c:	4291      	cmp	r1, r2
 801952e:	d82a      	bhi.n	8019586 <fp_mod_2d+0x96>
  if (c->sign == FP_NEG) {
 8019530:	2e01      	cmp	r6, #1
 8019532:	d10c      	bne.n	801954e <fp_mod_2d+0x5e>
 8019534:	f104 0c08 	add.w	ip, r4, #8
     fp_digit carry = 0;
 8019538:	2200      	movs	r2, #0
 801953a:	4666      	mov	r6, ip
     for (x = 0; x < (unsigned int)c->used; x++) {
 801953c:	4610      	mov	r0, r2
 801953e:	4281      	cmp	r1, r0
 8019540:	d125      	bne.n	801958e <fp_mod_2d+0x9e>
         c->dp[x] = (fp_digit)0 - carry;
 8019542:	4252      	negs	r2, r2
     for (; x < bmax; x++) {
 8019544:	4299      	cmp	r1, r3
 8019546:	d330      	bcc.n	80195aa <fp_mod_2d+0xba>
     c->sign = FP_ZPOS;
 8019548:	2200      	movs	r2, #0
     c->used = (int)bmax;
 801954a:	6023      	str	r3, [r4, #0]
     c->sign = FP_ZPOS;
 801954c:	6062      	str	r2, [r4, #4]
  x = DIGIT_BIT - (b % DIGIT_BIT);
 801954e:	f005 051f 	and.w	r5, r5, #31
 8019552:	f1c5 0120 	rsb	r1, r5, #32
  if (x != DIGIT_BIT) {
 8019556:	b145      	cbz	r5, 801956a <fp_mod_2d+0x7a>
     c->dp[bmax - 1] &= ~((fp_digit)0) >> x;
 8019558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801955c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019560:	fa22 f101 	lsr.w	r1, r2, r1
 8019564:	685a      	ldr	r2, [r3, #4]
 8019566:	400a      	ands	r2, r1
 8019568:	605a      	str	r2, [r3, #4]
  fp_clamp (c);
 801956a:	6823      	ldr	r3, [r4, #0]
 801956c:	b12b      	cbz	r3, 801957a <fp_mod_2d+0x8a>
 801956e:	1e5a      	subs	r2, r3, #1
 8019570:	3301      	adds	r3, #1
 8019572:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019576:	b1e3      	cbz	r3, 80195b2 <fp_mod_2d+0xc2>
 8019578:	6863      	ldr	r3, [r4, #4]
 801957a:	6063      	str	r3, [r4, #4]
 801957c:	e002      	b.n	8019584 <fp_mod_2d+0x94>
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 801957e:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8019582:	d3ce      	bcc.n	8019522 <fp_mod_2d+0x32>
}
 8019584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c->dp[x] = 0;
 8019586:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
   for (x = bmax; x < (unsigned int)c->used; x++) {
 801958a:	3201      	adds	r2, #1
 801958c:	e7ce      	b.n	801952c <fp_mod_2d+0x3c>
         fp_digit next = c->dp[x] > 0;
 801958e:	f8d6 e000 	ldr.w	lr, [r6]
         c->dp[x] = (fp_digit)0 - c->dp[x] - carry;
 8019592:	eb0e 0702 	add.w	r7, lr, r2
 8019596:	427f      	negs	r7, r7
 8019598:	f846 7b04 	str.w	r7, [r6], #4
         carry |= next;
 801959c:	f1be 0f00 	cmp.w	lr, #0
 80195a0:	bf18      	it	ne
 80195a2:	f042 0201 	orrne.w	r2, r2, #1
     for (x = 0; x < (unsigned int)c->used; x++) {
 80195a6:	3001      	adds	r0, #1
 80195a8:	e7c9      	b.n	801953e <fp_mod_2d+0x4e>
         c->dp[x] = (fp_digit)0 - carry;
 80195aa:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
     for (; x < bmax; x++) {
 80195ae:	3101      	adds	r1, #1
 80195b0:	e7c8      	b.n	8019544 <fp_mod_2d+0x54>
  fp_clamp (c);
 80195b2:	6022      	str	r2, [r4, #0]
 80195b4:	e7d9      	b.n	801956a <fp_mod_2d+0x7a>

080195b6 <fp_div_2d>:
{
 80195b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (b <= 0) {
 80195b8:	1e0d      	subs	r5, r1, #0
{
 80195ba:	4607      	mov	r7, r0
 80195bc:	4614      	mov	r4, r2
 80195be:	461e      	mov	r6, r3
  if (b <= 0) {
 80195c0:	dc08      	bgt.n	80195d4 <fp_div_2d+0x1e>
    fp_copy (a, c);
 80195c2:	4611      	mov	r1, r2
 80195c4:	f7ff fe95 	bl	80192f2 <fp_copy>
    if (d != NULL) {
 80195c8:	b35e      	cbz	r6, 8019622 <fp_div_2d+0x6c>
      fp_zero (d);
 80195ca:	4630      	mov	r0, r6
}
 80195cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fp_zero (d);
 80195d0:	f7ff bd43 	b.w	801905a <fp_zero>
  if (a == c && d != NULL) {
 80195d4:	4290      	cmp	r0, r2
 80195d6:	d103      	bne.n	80195e0 <fp_div_2d+0x2a>
 80195d8:	b113      	cbz	r3, 80195e0 <fp_div_2d+0x2a>
    fp_mod_2d (a, b, d);
 80195da:	461a      	mov	r2, r3
 80195dc:	f7ff ff88 	bl	80194f0 <fp_mod_2d>
  fp_copy(a, c);
 80195e0:	4621      	mov	r1, r4
 80195e2:	4638      	mov	r0, r7
 80195e4:	f7ff fe85 	bl	80192f2 <fp_copy>
  if (b >= (int)DIGIT_BIT) {
 80195e8:	2d1f      	cmp	r5, #31
 80195ea:	dd03      	ble.n	80195f4 <fp_div_2d+0x3e>
    fp_rshd (c, b / DIGIT_BIT);
 80195ec:	1169      	asrs	r1, r5, #5
 80195ee:	4620      	mov	r0, r4
 80195f0:	f7ff fdb5 	bl	801915e <fp_rshd>
  if (D != 0) {
 80195f4:	f015 011f 	ands.w	r1, r5, #31
 80195f8:	d002      	beq.n	8019600 <fp_div_2d+0x4a>
    fp_rshb(c, D);
 80195fa:	4620      	mov	r0, r4
 80195fc:	f7ff fdda 	bl	80191b4 <fp_rshb>
  if (a != c && d != NULL) {
 8019600:	42a7      	cmp	r7, r4
 8019602:	d005      	beq.n	8019610 <fp_div_2d+0x5a>
 8019604:	b126      	cbz	r6, 8019610 <fp_div_2d+0x5a>
    fp_mod_2d (a, b, d);
 8019606:	4632      	mov	r2, r6
 8019608:	4629      	mov	r1, r5
 801960a:	4638      	mov	r0, r7
 801960c:	f7ff ff70 	bl	80194f0 <fp_mod_2d>
  fp_clamp (c);
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	b12b      	cbz	r3, 8019620 <fp_div_2d+0x6a>
 8019614:	1e5a      	subs	r2, r3, #1
 8019616:	3301      	adds	r3, #1
 8019618:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801961c:	b113      	cbz	r3, 8019624 <fp_div_2d+0x6e>
 801961e:	6863      	ldr	r3, [r4, #4]
 8019620:	6063      	str	r3, [r4, #4]
}
 8019622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  fp_clamp (c);
 8019624:	6022      	str	r2, [r4, #0]
 8019626:	e7f3      	b.n	8019610 <fp_div_2d+0x5a>

08019628 <fp_div>:
{
 8019628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962c:	b08d      	sub	sp, #52	; 0x34
 801962e:	9305      	str	r3, [sp, #20]
  if (fp_iszero (b) == FP_YES) {
 8019630:	680b      	ldr	r3, [r1, #0]
{
 8019632:	9002      	str	r0, [sp, #8]
 8019634:	9104      	str	r1, [sp, #16]
 8019636:	9200      	str	r2, [sp, #0]
  if (fp_iszero (b) == FP_YES) {
 8019638:	2b00      	cmp	r3, #0
 801963a:	f000 8183 	beq.w	8019944 <fp_div+0x31c>
  if (fp_cmp_mag (a, b) == FP_LT)
 801963e:	f7ff fb3f 	bl	8018cc0 <fp_cmp_mag>
 8019642:	3001      	adds	r0, #1
 8019644:	d10f      	bne.n	8019666 <fp_div+0x3e>
    if (d != NULL) {
 8019646:	9b05      	ldr	r3, [sp, #20]
 8019648:	b11b      	cbz	r3, 8019652 <fp_div+0x2a>
      fp_copy (a, d);
 801964a:	9802      	ldr	r0, [sp, #8]
 801964c:	4619      	mov	r1, r3
 801964e:	f7ff fe50 	bl	80192f2 <fp_copy>
    if (c != NULL) {
 8019652:	9b00      	ldr	r3, [sp, #0]
 8019654:	b113      	cbz	r3, 801965c <fp_div+0x34>
      fp_zero (c);
 8019656:	4618      	mov	r0, r3
 8019658:	f7ff fcff 	bl	801905a <fp_zero>
    return FP_OKAY;
 801965c:	2500      	movs	r5, #0
}
 801965e:	4628      	mov	r0, r5
 8019660:	b00d      	add	sp, #52	; 0x34
 8019662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  q = (fp_int*)XMALLOC(sizeof(fp_int) * 5, NULL, DYNAMIC_TYPE_BIGINT);
 8019666:	f44f 7002 	mov.w	r0, #520	; 0x208
 801966a:	f001 fc99 	bl	801afa0 <malloc>
  if (q == NULL) {
 801966e:	4604      	mov	r4, r0
 8019670:	2800      	cmp	r0, #0
 8019672:	f000 816a 	beq.w	801994a <fp_div+0x322>
  x = &q[1]; y = &q[2]; t1 = &q[3]; t2 = &q[4];
 8019676:	f500 73d0 	add.w	r3, r0, #416	; 0x1a0
 801967a:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 801967e:	f100 0768 	add.w	r7, r0, #104	; 0x68
 8019682:	f500 7a9c 	add.w	sl, r0, #312	; 0x138
 8019686:	930b      	str	r3, [sp, #44]	; 0x2c
    fp_zero(a);
 8019688:	f7ff fce7 	bl	801905a <fp_zero>
  q->used = a->used;
 801968c:	9b02      	ldr	r3, [sp, #8]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	6023      	str	r3, [r4, #0]
    fp_zero(a);
 8019692:	4650      	mov	r0, sl
 8019694:	f7ff fce1 	bl	801905a <fp_zero>
 8019698:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 801969c:	f7ff fcdd 	bl	801905a <fp_zero>
 80196a0:	4638      	mov	r0, r7
 80196a2:	f7ff fcda 	bl	801905a <fp_zero>
  fp_copy(a, x); /* copy (src = a) to (dst = x) */
 80196a6:	4639      	mov	r1, r7
 80196a8:	9802      	ldr	r0, [sp, #8]
 80196aa:	f7ff fe22 	bl	80192f2 <fp_copy>
    fp_zero(a);
 80196ae:	4648      	mov	r0, r9
 80196b0:	f7ff fcd3 	bl	801905a <fp_zero>
  fp_copy(b, y); /* copy (src = b) to (dst = y) */
 80196b4:	9804      	ldr	r0, [sp, #16]
 80196b6:	4649      	mov	r1, r9
 80196b8:	f7ff fe1b 	bl	80192f2 <fp_copy>
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 80196bc:	9b02      	ldr	r3, [sp, #8]
 80196be:	685b      	ldr	r3, [r3, #4]
 80196c0:	9309      	str	r3, [sp, #36]	; 0x24
 80196c2:	9b04      	ldr	r3, [sp, #16]
  x->sign = y->sign = FP_ZPOS;
 80196c4:	2100      	movs	r1, #0
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 80196c6:	685b      	ldr	r3, [r3, #4]
  x->sign = y->sign = FP_ZPOS;
 80196c8:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 80196cc:	66e1      	str	r1, [r4, #108]	; 0x6c
  norm = fp_count_bits(y) % DIGIT_BIT;
 80196ce:	4648      	mov	r0, r9
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 80196d0:	930a      	str	r3, [sp, #40]	; 0x28
  norm = fp_count_bits(y) % DIGIT_BIT;
 80196d2:	f7ff fc63 	bl	8018f9c <fp_count_bits>
 80196d6:	1a0b      	subs	r3, r1, r0
 80196d8:	f003 031f 	and.w	r3, r3, #31
 80196dc:	f000 001f 	and.w	r0, r0, #31
 80196e0:	bf58      	it	pl
 80196e2:	4258      	negpl	r0, r3
  if (norm < (int)(DIGIT_BIT-1)) {
 80196e4:	281f      	cmp	r0, #31
 80196e6:	d06d      	beq.n	80197c4 <fp_div+0x19c>
    norm = (DIGIT_BIT-1) - norm;
 80196e8:	f1c0 031f 	rsb	r3, r0, #31
    ret = fp_mul_2d (x, norm, x);
 80196ec:	463a      	mov	r2, r7
 80196ee:	4619      	mov	r1, r3
 80196f0:	4638      	mov	r0, r7
    norm = (DIGIT_BIT-1) - norm;
 80196f2:	9303      	str	r3, [sp, #12]
    ret = fp_mul_2d (x, norm, x);
 80196f4:	f7ff fe0c 	bl	8019310 <fp_mul_2d>
    if (ret != FP_OKAY) {
 80196f8:	4605      	mov	r5, r0
 80196fa:	b118      	cbz	r0, 8019704 <fp_div+0xdc>
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 80196fc:	4620      	mov	r0, r4
 80196fe:	f001 fc57 	bl	801afb0 <free>
  return FP_OKAY;
 8019702:	e7ac      	b.n	801965e <fp_div+0x36>
    ret = fp_mul_2d (y, norm, y);
 8019704:	9903      	ldr	r1, [sp, #12]
 8019706:	464a      	mov	r2, r9
 8019708:	4648      	mov	r0, r9
 801970a:	f7ff fe01 	bl	8019310 <fp_mul_2d>
    if (ret != FP_OKAY) {
 801970e:	4605      	mov	r5, r0
 8019710:	2800      	cmp	r0, #0
 8019712:	d1f3      	bne.n	80196fc <fp_div+0xd4>
  t = y->used - 1;
 8019714:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
  n = x->used - 1;
 8019718:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  t = y->used - 1;
 801971c:	9301      	str	r3, [sp, #4]
  ret = fp_lshd (y, n - t); /* y = y*b**{n-t} */
 801971e:	eba8 0603 	sub.w	r6, r8, r3
 8019722:	4631      	mov	r1, r6
 8019724:	4648      	mov	r0, r9
 8019726:	f7ff fc64 	bl	8018ff2 <fp_lshd>
  if (ret != FP_OKAY) {
 801972a:	4605      	mov	r5, r0
 801972c:	2800      	cmp	r0, #0
 801972e:	d1e5      	bne.n	80196fc <fp_div+0xd4>
 8019730:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
  while (fp_cmp (x, y) != FP_LT) {
 8019734:	4649      	mov	r1, r9
 8019736:	4638      	mov	r0, r7
 8019738:	f7ff fb20 	bl	8018d7c <fp_cmp>
 801973c:	3001      	adds	r0, #1
 801973e:	d143      	bne.n	80197c8 <fp_div+0x1a0>
  t = y->used - 1;
 8019740:	9b01      	ldr	r3, [sp, #4]
  fp_rshd (y, n - t);
 8019742:	4631      	mov	r1, r6
  t = y->used - 1;
 8019744:	3b01      	subs	r3, #1
  fp_rshd (y, n - t);
 8019746:	4648      	mov	r0, r9
  t = y->used - 1;
 8019748:	9307      	str	r3, [sp, #28]
  fp_rshd (y, n - t);
 801974a:	f7ff fd08 	bl	801915e <fp_rshd>
  for (i = n; i >= (t + 1); i--) {
 801974e:	9b01      	ldr	r3, [sp, #4]
 8019750:	f108 0601 	add.w	r6, r8, #1
 8019754:	1af6      	subs	r6, r6, r3
 8019756:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  n = x->used - 1;
 801975a:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 801975e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8019762:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8019766:	9306      	str	r3, [sp, #24]
  for (i = n; i >= (t + 1); i--) {
 8019768:	9a07      	ldr	r2, [sp, #28]
    if (i > x->used) {
 801976a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  for (i = n; i >= (t + 1); i--) {
 801976c:	4593      	cmp	fp, r2
 801976e:	dc3f      	bgt.n	80197f0 <fp_div+0x1c8>
  x->sign = x->used == 0 ? FP_ZPOS : a->sign;
 8019770:	b10b      	cbz	r3, 8019776 <fp_div+0x14e>
 8019772:	9b02      	ldr	r3, [sp, #8]
 8019774:	685b      	ldr	r3, [r3, #4]
 8019776:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (c != NULL) {
 8019778:	9b00      	ldr	r3, [sp, #0]
 801977a:	2b00      	cmp	r3, #0
 801977c:	f040 80c6 	bne.w	801990c <fp_div+0x2e4>
  if (d != NULL) {
 8019780:	9b05      	ldr	r3, [sp, #20]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d0ba      	beq.n	80196fc <fp_div+0xd4>
    fp_div_2d (x, norm, x, NULL);
 8019786:	9903      	ldr	r1, [sp, #12]
 8019788:	2300      	movs	r3, #0
 801978a:	463a      	mov	r2, r7
 801978c:	4638      	mov	r0, r7
 801978e:	f7ff ff12 	bl	80195b6 <fp_div_2d>
    for (i = b->used; i < x->used; i++) {
 8019792:	9b04      	ldr	r3, [sp, #16]
 8019794:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8019796:	681b      	ldr	r3, [r3, #0]
        x->dp[i] = 0;
 8019798:	f104 0170 	add.w	r1, r4, #112	; 0x70
 801979c:	2000      	movs	r0, #0
    for (i = b->used; i < x->used; i++) {
 801979e:	429a      	cmp	r2, r3
 80197a0:	f300 80ca 	bgt.w	8019938 <fp_div+0x310>
    fp_clamp(x);
 80197a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80197a6:	b13b      	cbz	r3, 80197b8 <fp_div+0x190>
 80197a8:	1e5a      	subs	r2, r3, #1
 80197aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80197ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	f000 80c5 	beq.w	8019940 <fp_div+0x318>
 80197b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    fp_copy (x, d);
 80197b8:	9905      	ldr	r1, [sp, #20]
    fp_clamp(x);
 80197ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    fp_copy (x, d);
 80197bc:	4638      	mov	r0, r7
 80197be:	f7ff fd98 	bl	80192f2 <fp_copy>
 80197c2:	e79b      	b.n	80196fc <fp_div+0xd4>
    norm = 0;
 80197c4:	9103      	str	r1, [sp, #12]
 80197c6:	e7a5      	b.n	8019714 <fp_div+0xec>
    ++(q->dp[n - t]);
 80197c8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80197cc:	3301      	adds	r3, #1
 80197ce:	f8cb 3008 	str.w	r3, [fp, #8]
    ret = fp_sub (x, y, x);
 80197d2:	463a      	mov	r2, r7
 80197d4:	4649      	mov	r1, r9
 80197d6:	4638      	mov	r0, r7
 80197d8:	f7ff faaf 	bl	8018d3a <fp_sub>
    if (ret != FP_OKAY) {
 80197dc:	4603      	mov	r3, r0
 80197de:	2800      	cmp	r0, #0
 80197e0:	d0a8      	beq.n	8019734 <fp_div+0x10c>
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 80197e2:	4620      	mov	r0, r4
 80197e4:	9300      	str	r3, [sp, #0]
 80197e6:	f001 fbe3 	bl	801afb0 <free>
      ret = fp_add (x, t1, x);
 80197ea:	9b00      	ldr	r3, [sp, #0]
 80197ec:	461d      	mov	r5, r3
        return ret;
 80197ee:	e736      	b.n	801965e <fp_div+0x36>
    if (i > x->used) {
 80197f0:	459b      	cmp	fp, r3
 80197f2:	dc7d      	bgt.n	80198f0 <fp_div+0x2c8>
    if (x->dp[i] == y->dp[t]) {
 80197f4:	9b06      	ldr	r3, [sp, #24]
 80197f6:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
 80197fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80197fe:	9b01      	ldr	r3, [sp, #4]
 8019800:	4291      	cmp	r1, r2
 8019802:	ebab 0303 	sub.w	r3, fp, r3
 8019806:	9308      	str	r3, [sp, #32]
 8019808:	d178      	bne.n	80198fc <fp_div+0x2d4>
      q->dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
 801980a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801980e:	6033      	str	r3, [r6, #0]
    q->dp[i - t - 1] = (q->dp[i - t - 1] + 1);
 8019810:	6833      	ldr	r3, [r6, #0]
 8019812:	3301      	adds	r3, #1
 8019814:	6033      	str	r3, [r6, #0]
      q->dp[i - t - 1] = (q->dp[i - t - 1] - 1);
 8019816:	6833      	ldr	r3, [r6, #0]
 8019818:	3b01      	subs	r3, #1
 801981a:	6033      	str	r3, [r6, #0]
      fp_zero (t1);
 801981c:	4650      	mov	r0, sl
 801981e:	f7ff fc1c 	bl	801905a <fp_zero>
      t1->dp[0] = (t - 1 < 0) ? 0 : y->dp[t - 1];
 8019822:	9b07      	ldr	r3, [sp, #28]
 8019824:	2b00      	cmp	r3, #0
 8019826:	bfca      	itet	gt
 8019828:	9b06      	ldrgt	r3, [sp, #24]
 801982a:	2300      	movle	r3, #0
 801982c:	f8d3 30d0 	ldrgt.w	r3, [r3, #208]	; 0xd0
 8019830:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
      t1->dp[1] = y->dp[t];
 8019834:	9b06      	ldr	r3, [sp, #24]
 8019836:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801983a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
      t1->used = 2;
 801983e:	2302      	movs	r3, #2
 8019840:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
      ret = fp_mul_d (t1, q->dp[i - t - 1], t1);
 8019844:	6831      	ldr	r1, [r6, #0]
 8019846:	4652      	mov	r2, sl
 8019848:	4650      	mov	r0, sl
 801984a:	f7ff f8b0 	bl	80189ae <fp_mul_d>
      if (ret != FP_OKAY) {
 801984e:	4603      	mov	r3, r0
 8019850:	2800      	cmp	r0, #0
 8019852:	d1c6      	bne.n	80197e2 <fp_div+0x1ba>
      t2->dp[0] = (i - 2 < 0) ? 0 : x->dp[i - 2];
 8019854:	f1bb 0f01 	cmp.w	fp, #1
 8019858:	bfc8      	it	gt
 801985a:	f8d8 3064 	ldrgt.w	r3, [r8, #100]	; 0x64
 801985e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 8019862:	f1bb 0f00 	cmp.w	fp, #0
 8019866:	bfc8      	it	gt
 8019868:	f8d8 3068 	ldrgt.w	r3, [r8, #104]	; 0x68
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 801986c:	990b      	ldr	r1, [sp, #44]	; 0x2c
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 801986e:	bfd8      	it	le
 8019870:	2300      	movle	r3, #0
 8019872:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
      t2->dp[2] = x->dp[i];
 8019876:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 801987a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      t2->used = 3;
 801987e:	2303      	movs	r3, #3
 8019880:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 8019884:	4650      	mov	r0, sl
 8019886:	f7ff fa1b 	bl	8018cc0 <fp_cmp_mag>
 801988a:	2801      	cmp	r0, #1
 801988c:	d0c3      	beq.n	8019816 <fp_div+0x1ee>
    ret = fp_mul_d (y, q->dp[i - t - 1], t1);
 801988e:	6831      	ldr	r1, [r6, #0]
 8019890:	4652      	mov	r2, sl
 8019892:	4648      	mov	r0, r9
 8019894:	f7ff f88b 	bl	80189ae <fp_mul_d>
    if (ret != FP_OKAY) {
 8019898:	4603      	mov	r3, r0
 801989a:	2800      	cmp	r0, #0
 801989c:	d1a1      	bne.n	80197e2 <fp_div+0x1ba>
    ret = fp_lshd  (t1, i - t - 1);
 801989e:	9908      	ldr	r1, [sp, #32]
 80198a0:	4650      	mov	r0, sl
 80198a2:	f7ff fba6 	bl	8018ff2 <fp_lshd>
    if (ret != FP_OKAY) {
 80198a6:	4603      	mov	r3, r0
 80198a8:	2800      	cmp	r0, #0
 80198aa:	d19a      	bne.n	80197e2 <fp_div+0x1ba>
    ret = fp_sub   (x, t1, x);
 80198ac:	463a      	mov	r2, r7
 80198ae:	4651      	mov	r1, sl
 80198b0:	4638      	mov	r0, r7
 80198b2:	f7ff fa42 	bl	8018d3a <fp_sub>
    if (ret != FP_OKAY) {
 80198b6:	4603      	mov	r3, r0
 80198b8:	2800      	cmp	r0, #0
 80198ba:	d192      	bne.n	80197e2 <fp_div+0x1ba>
    if (x->sign == FP_NEG) {
 80198bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80198be:	2b01      	cmp	r3, #1
 80198c0:	d116      	bne.n	80198f0 <fp_div+0x2c8>
      fp_copy (y, t1);
 80198c2:	4651      	mov	r1, sl
 80198c4:	4648      	mov	r0, r9
 80198c6:	f7ff fd14 	bl	80192f2 <fp_copy>
      ret = fp_lshd (t1, i - t - 1);
 80198ca:	9908      	ldr	r1, [sp, #32]
 80198cc:	4650      	mov	r0, sl
 80198ce:	f7ff fb90 	bl	8018ff2 <fp_lshd>
      if (ret != FP_OKAY) {
 80198d2:	4603      	mov	r3, r0
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d184      	bne.n	80197e2 <fp_div+0x1ba>
      ret = fp_add (x, t1, x);
 80198d8:	463a      	mov	r2, r7
 80198da:	4651      	mov	r1, sl
 80198dc:	4638      	mov	r0, r7
 80198de:	f7ff fa0a 	bl	8018cf6 <fp_add>
      if (ret != FP_OKAY) {
 80198e2:	4603      	mov	r3, r0
 80198e4:	2800      	cmp	r0, #0
 80198e6:	f47f af7c 	bne.w	80197e2 <fp_div+0x1ba>
      q->dp[i - t - 1] = q->dp[i - t - 1] - 1;
 80198ea:	6833      	ldr	r3, [r6, #0]
 80198ec:	3b01      	subs	r3, #1
 80198ee:	6033      	str	r3, [r6, #0]
  for (i = n; i >= (t + 1); i--) {
 80198f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80198f4:	3e04      	subs	r6, #4
 80198f6:	f1a8 0804 	sub.w	r8, r8, #4
 80198fa:	e735      	b.n	8019768 <fp_div+0x140>
      tmp /= ((fp_word)y->dp[t]);
 80198fc:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 8019900:	2300      	movs	r3, #0
 8019902:	f001 f803 	bl	801a90c <__aeabi_uldivmod>
      q->dp[i - t - 1] = (fp_digit) (tmp);
 8019906:	6030      	str	r0, [r6, #0]
 8019908:	e782      	b.n	8019810 <fp_div+0x1e8>
    fp_clamp (q);
 801990a:	6022      	str	r2, [r4, #0]
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	b133      	cbz	r3, 801991e <fp_div+0x2f6>
 8019910:	1e5a      	subs	r2, r3, #1
 8019912:	3301      	adds	r3, #1
 8019914:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d0f6      	beq.n	801990a <fp_div+0x2e2>
 801991c:	6863      	ldr	r3, [r4, #4]
 801991e:	6063      	str	r3, [r4, #4]
    fp_copy (q, c);
 8019920:	9900      	ldr	r1, [sp, #0]
 8019922:	4620      	mov	r0, r4
 8019924:	f7ff fce5 	bl	80192f2 <fp_copy>
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 8019928:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801992c:	1a9b      	subs	r3, r3, r2
    c->sign = neg;
 801992e:	9a00      	ldr	r2, [sp, #0]
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 8019930:	bf18      	it	ne
 8019932:	2301      	movne	r3, #1
    c->sign = neg;
 8019934:	6053      	str	r3, [r2, #4]
 8019936:	e723      	b.n	8019780 <fp_div+0x158>
        x->dp[i] = 0;
 8019938:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for (i = b->used; i < x->used; i++) {
 801993c:	3301      	adds	r3, #1
 801993e:	e72e      	b.n	801979e <fp_div+0x176>
    fp_clamp(x);
 8019940:	66a2      	str	r2, [r4, #104]	; 0x68
 8019942:	e72f      	b.n	80197a4 <fp_div+0x17c>
    return FP_VAL;
 8019944:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019948:	e689      	b.n	801965e <fp_div+0x36>
      return FP_MEM;
 801994a:	f06f 0501 	mvn.w	r5, #1
 801994e:	e686      	b.n	801965e <fp_div+0x36>

08019950 <fp_mod>:
{
 8019950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019952:	4605      	mov	r5, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8019954:	2068      	movs	r0, #104	; 0x68
{
 8019956:	460e      	mov	r6, r1
 8019958:	4617      	mov	r7, r2
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801995a:	f001 fb21 	bl	801afa0 <malloc>
   if (t == NULL)
 801995e:	4604      	mov	r4, r0
 8019960:	b1f8      	cbz	r0, 80199a2 <fp_mod+0x52>
    fp_zero(a);
 8019962:	f7ff fb7a 	bl	801905a <fp_zero>
   err = fp_div(a, b, NULL, t);
 8019966:	4628      	mov	r0, r5
 8019968:	4623      	mov	r3, r4
 801996a:	2200      	movs	r2, #0
 801996c:	4631      	mov	r1, r6
 801996e:	f7ff fe5b 	bl	8019628 <fp_div>
   if (err == FP_OKAY) {
 8019972:	4605      	mov	r5, r0
 8019974:	b958      	cbnz	r0, 801998e <fp_mod+0x3e>
      if (!fp_iszero(t) && (t->sign != b->sign)) {
 8019976:	6823      	ldr	r3, [r4, #0]
 8019978:	b173      	cbz	r3, 8019998 <fp_mod+0x48>
 801997a:	6862      	ldr	r2, [r4, #4]
 801997c:	6873      	ldr	r3, [r6, #4]
 801997e:	429a      	cmp	r2, r3
 8019980:	d00a      	beq.n	8019998 <fp_mod+0x48>
         err = fp_add(t, b, c);
 8019982:	463a      	mov	r2, r7
 8019984:	4631      	mov	r1, r6
 8019986:	4620      	mov	r0, r4
 8019988:	f7ff f9b5 	bl	8018cf6 <fp_add>
 801998c:	4605      	mov	r5, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801998e:	4620      	mov	r0, r4
 8019990:	f001 fb0e 	bl	801afb0 <free>
}
 8019994:	4628      	mov	r0, r5
 8019996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         fp_copy(t, c);
 8019998:	4639      	mov	r1, r7
 801999a:	4620      	mov	r0, r4
 801999c:	f7ff fca9 	bl	80192f2 <fp_copy>
 80199a0:	e7f5      	b.n	801998e <fp_mod+0x3e>
       return FP_MEM;
 80199a2:	f06f 0501 	mvn.w	r5, #1
 80199a6:	e7f5      	b.n	8019994 <fp_mod+0x44>

080199a8 <fp_mulmod>:
{
 80199a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199ac:	4604      	mov	r4, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80199ae:	2068      	movs	r0, #104	; 0x68
{
 80199b0:	4688      	mov	r8, r1
 80199b2:	4616      	mov	r6, r2
 80199b4:	461f      	mov	r7, r3
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80199b6:	f001 faf3 	bl	801afa0 <malloc>
 80199ba:	4605      	mov	r5, r0
   if (t == NULL)
 80199bc:	b1a0      	cbz	r0, 80199e8 <fp_mulmod+0x40>
    fp_zero(a);
 80199be:	f7ff fb4c 	bl	801905a <fp_zero>
  err = fp_mul(a, b, t);
 80199c2:	4620      	mov	r0, r4
 80199c4:	462a      	mov	r2, r5
 80199c6:	4641      	mov	r1, r8
 80199c8:	f7ff fd67 	bl	801949a <fp_mul>
  if (err == FP_OKAY) {
 80199cc:	4604      	mov	r4, r0
 80199ce:	b928      	cbnz	r0, 80199dc <fp_mulmod+0x34>
      err = fp_mod(t, c, d);
 80199d0:	463a      	mov	r2, r7
 80199d2:	4631      	mov	r1, r6
 80199d4:	4628      	mov	r0, r5
 80199d6:	f7ff ffbb 	bl	8019950 <fp_mod>
 80199da:	4604      	mov	r4, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 80199dc:	4628      	mov	r0, r5
 80199de:	f001 fae7 	bl	801afb0 <free>
}
 80199e2:	4620      	mov	r0, r4
 80199e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return FP_MEM;
 80199e8:	f06f 0401 	mvn.w	r4, #1
 80199ec:	e7f9      	b.n	80199e2 <fp_mulmod+0x3a>

080199ee <mp_mulmod>:
   ret = fp_mulmod(a, b, c, d);
 80199ee:	f7ff bfdb 	b.w	80199a8 <fp_mulmod>

080199f2 <fp_submod>:
{
 80199f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f6:	4604      	mov	r4, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80199f8:	2068      	movs	r0, #104	; 0x68
{
 80199fa:	4688      	mov	r8, r1
 80199fc:	4616      	mov	r6, r2
 80199fe:	461f      	mov	r7, r3
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8019a00:	f001 face 	bl	801afa0 <malloc>
 8019a04:	4605      	mov	r5, r0
   if (t == NULL)
 8019a06:	b1a0      	cbz	r0, 8019a32 <fp_submod+0x40>
    fp_zero(a);
 8019a08:	f7ff fb27 	bl	801905a <fp_zero>
  err = fp_sub(a, b, t);
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	462a      	mov	r2, r5
 8019a10:	4641      	mov	r1, r8
 8019a12:	f7ff f992 	bl	8018d3a <fp_sub>
  if (err == FP_OKAY) {
 8019a16:	4604      	mov	r4, r0
 8019a18:	b928      	cbnz	r0, 8019a26 <fp_submod+0x34>
      err = fp_mod(t, c, d);
 8019a1a:	463a      	mov	r2, r7
 8019a1c:	4631      	mov	r1, r6
 8019a1e:	4628      	mov	r0, r5
 8019a20:	f7ff ff96 	bl	8019950 <fp_mod>
 8019a24:	4604      	mov	r4, r0
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 8019a26:	4628      	mov	r0, r5
 8019a28:	f001 fac2 	bl	801afb0 <free>
}
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return FP_MEM;
 8019a32:	f06f 0401 	mvn.w	r4, #1
 8019a36:	e7f9      	b.n	8019a2c <fp_submod+0x3a>

08019a38 <mp_submod>:
  return fp_submod(a, b, c, d);
 8019a38:	f7ff bfdb 	b.w	80199f2 <fp_submod>

08019a3c <mp_mod>:
  return fp_mod (a, b, c);
 8019a3c:	f7ff bf88 	b.w	8019950 <fp_mod>

08019a40 <fp_invmod>:
{
 8019a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 8019a44:	684b      	ldr	r3, [r1, #4]
{
 8019a46:	b085      	sub	sp, #20
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 8019a48:	2b01      	cmp	r3, #1
{
 8019a4a:	4683      	mov	fp, r0
 8019a4c:	460c      	mov	r4, r1
 8019a4e:	9203      	str	r2, [sp, #12]
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 8019a50:	d057      	beq.n	8019b02 <fp_invmod+0xc2>
 8019a52:	680b      	ldr	r3, [r1, #0]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d054      	beq.n	8019b02 <fp_invmod+0xc2>
  if (fp_iszero(a) == FP_YES) {
 8019a58:	6802      	ldr	r2, [r0, #0]
 8019a5a:	2a00      	cmp	r2, #0
 8019a5c:	d051      	beq.n	8019b02 <fp_invmod+0xc2>
  if (fp_iseven(b) == FP_YES) {
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	f340 814b 	ble.w	8019cfa <fp_invmod+0x2ba>
 8019a64:	688b      	ldr	r3, [r1, #8]
 8019a66:	07dd      	lsls	r5, r3, #31
 8019a68:	f100 8147 	bmi.w	8019cfa <fp_invmod+0x2ba>
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 8, NULL, DYNAMIC_TYPE_BIGINT);
 8019a6c:	f44f 7050 	mov.w	r0, #832	; 0x340
 8019a70:	f001 fa96 	bl	801afa0 <malloc>
  if (x == NULL) {
 8019a74:	4606      	mov	r6, r0
 8019a76:	b928      	cbnz	r0, 8019a84 <fp_invmod+0x44>
      return FP_MEM;
 8019a78:	f06f 0b01 	mvn.w	fp, #1
}
 8019a7c:	4658      	mov	r0, fp
 8019a7e:	b005      	add	sp, #20
 8019a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  y = &x[1]; u = &x[2]; v = &x[3]; A = &x[4]; B = &x[5]; C = &x[6]; D = &x[7];
 8019a84:	f100 0368 	add.w	r3, r0, #104	; 0x68
 8019a88:	9302      	str	r3, [sp, #8]
 8019a8a:	f100 03d0 	add.w	r3, r0, #208	; 0xd0
 8019a8e:	9301      	str	r3, [sp, #4]
 8019a90:	f500 799c 	add.w	r9, r0, #312	; 0x138
 8019a94:	f500 77d0 	add.w	r7, r0, #416	; 0x1a0
 8019a98:	f500 7a02 	add.w	sl, r0, #520	; 0x208
 8019a9c:	f500 751c 	add.w	r5, r0, #624	; 0x270
 8019aa0:	f500 7836 	add.w	r8, r0, #728	; 0x2d8
    fp_zero(a);
 8019aa4:	f7ff fad9 	bl	801905a <fp_zero>
 8019aa8:	f106 0068 	add.w	r0, r6, #104	; 0x68
 8019aac:	f7ff fad5 	bl	801905a <fp_zero>
 8019ab0:	f106 00d0 	add.w	r0, r6, #208	; 0xd0
 8019ab4:	f7ff fad1 	bl	801905a <fp_zero>
 8019ab8:	4648      	mov	r0, r9
 8019aba:	f7ff face 	bl	801905a <fp_zero>
 8019abe:	4638      	mov	r0, r7
 8019ac0:	f7ff facb 	bl	801905a <fp_zero>
 8019ac4:	4650      	mov	r0, sl
 8019ac6:	f7ff fac8 	bl	801905a <fp_zero>
 8019aca:	4628      	mov	r0, r5
 8019acc:	f7ff fac5 	bl	801905a <fp_zero>
 8019ad0:	4640      	mov	r0, r8
 8019ad2:	f7ff fac2 	bl	801905a <fp_zero>
  if ((err = fp_mod(a, b, x)) != FP_OKAY) {
 8019ad6:	4658      	mov	r0, fp
 8019ad8:	4632      	mov	r2, r6
 8019ada:	4621      	mov	r1, r4
 8019adc:	f7ff ff38 	bl	8019950 <fp_mod>
 8019ae0:	4683      	mov	fp, r0
 8019ae2:	b118      	cbz	r0, 8019aec <fp_invmod+0xac>
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019ae4:	4630      	mov	r0, r6
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019ae6:	f001 fa63 	bl	801afb0 <free>
  return FP_OKAY;
 8019aea:	e7c7      	b.n	8019a7c <fp_invmod+0x3c>
  fp_copy(b, y);
 8019aec:	f106 0168 	add.w	r1, r6, #104	; 0x68
 8019af0:	4620      	mov	r0, r4
 8019af2:	f7ff fbfe 	bl	80192f2 <fp_copy>
  if (fp_iszero(x) == FP_YES) {
 8019af6:	6832      	ldr	r2, [r6, #0]
 8019af8:	2a00      	cmp	r2, #0
 8019afa:	d105      	bne.n	8019b08 <fp_invmod+0xc8>
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019afc:	4630      	mov	r0, r6
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019afe:	f001 fa57 	bl	801afb0 <free>
    return FP_VAL;
 8019b02:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8019b06:	e7b9      	b.n	8019a7c <fp_invmod+0x3c>
  if (fp_iseven(x) == FP_YES && fp_iseven(y) == FP_YES) {
 8019b08:	dd08      	ble.n	8019b1c <fp_invmod+0xdc>
 8019b0a:	68b2      	ldr	r2, [r6, #8]
 8019b0c:	07d0      	lsls	r0, r2, #31
 8019b0e:	d405      	bmi.n	8019b1c <fp_invmod+0xdc>
 8019b10:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8019b12:	2a00      	cmp	r2, #0
 8019b14:	dd02      	ble.n	8019b1c <fp_invmod+0xdc>
 8019b16:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8019b18:	07d1      	lsls	r1, r2, #31
 8019b1a:	d5ef      	bpl.n	8019afc <fp_invmod+0xbc>
  fp_copy (x, u);
 8019b1c:	f106 01d0 	add.w	r1, r6, #208	; 0xd0
 8019b20:	4630      	mov	r0, r6
 8019b22:	f7ff fbe6 	bl	80192f2 <fp_copy>
  fp_copy (y, v);
 8019b26:	4649      	mov	r1, r9
 8019b28:	f106 0068 	add.w	r0, r6, #104	; 0x68
   a->dp[0] = b;
 8019b2c:	f04f 0b01 	mov.w	fp, #1
  fp_copy (y, v);
 8019b30:	f7ff fbdf 	bl	80192f2 <fp_copy>
   fp_zero(a);
 8019b34:	4638      	mov	r0, r7
 8019b36:	f7ff fa90 	bl	801905a <fp_zero>
   a->dp[0] = b;
 8019b3a:	f8c6 b1a8 	str.w	fp, [r6, #424]	; 0x1a8
   a->used  = a->dp[0] ? 1 : 0;
 8019b3e:	f8c6 b1a0 	str.w	fp, [r6, #416]	; 0x1a0
   fp_zero(a);
 8019b42:	4640      	mov	r0, r8
 8019b44:	f7ff fa89 	bl	801905a <fp_zero>
   a->dp[0] = b;
 8019b48:	f8c6 b2e0 	str.w	fp, [r6, #736]	; 0x2e0
   a->used  = a->dp[0] ? 1 : 0;
 8019b4c:	f8c6 b2d8 	str.w	fp, [r6, #728]	; 0x2d8
  while (fp_iseven (u) == FP_YES) {
 8019b50:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
 8019b54:	2a00      	cmp	r2, #0
 8019b56:	dd5d      	ble.n	8019c14 <fp_invmod+0x1d4>
 8019b58:	f8d6 20d8 	ldr.w	r2, [r6, #216]	; 0xd8
 8019b5c:	07d0      	lsls	r0, r2, #31
 8019b5e:	d459      	bmi.n	8019c14 <fp_invmod+0x1d4>
    fp_div_2 (u, u);
 8019b60:	9901      	ldr	r1, [sp, #4]
 8019b62:	4608      	mov	r0, r1
 8019b64:	f7fe ff62 	bl	8018a2c <fp_div_2>
    if (fp_isodd (A) == FP_YES || fp_isodd (B) == FP_YES) {
 8019b68:	f8d6 21a0 	ldr.w	r2, [r6, #416]	; 0x1a0
 8019b6c:	2a00      	cmp	r2, #0
 8019b6e:	dd03      	ble.n	8019b78 <fp_invmod+0x138>
 8019b70:	f8d6 21a8 	ldr.w	r2, [r6, #424]	; 0x1a8
 8019b74:	07d2      	lsls	r2, r2, #31
 8019b76:	d407      	bmi.n	8019b88 <fp_invmod+0x148>
 8019b78:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
 8019b7c:	2a00      	cmp	r2, #0
 8019b7e:	dd13      	ble.n	8019ba8 <fp_invmod+0x168>
 8019b80:	f8d6 2210 	ldr.w	r2, [r6, #528]	; 0x210
 8019b84:	07d3      	lsls	r3, r2, #31
 8019b86:	d50f      	bpl.n	8019ba8 <fp_invmod+0x168>
      err = fp_add (A, y, A);
 8019b88:	9902      	ldr	r1, [sp, #8]
 8019b8a:	463a      	mov	r2, r7
 8019b8c:	4638      	mov	r0, r7
 8019b8e:	f7ff f8b2 	bl	8018cf6 <fp_add>
      if (err != FP_OKAY) {
 8019b92:	4683      	mov	fp, r0
 8019b94:	2800      	cmp	r0, #0
 8019b96:	d1a5      	bne.n	8019ae4 <fp_invmod+0xa4>
      err = fp_sub (B, x, B);
 8019b98:	4652      	mov	r2, sl
 8019b9a:	4631      	mov	r1, r6
 8019b9c:	4650      	mov	r0, sl
 8019b9e:	f7ff f8cc 	bl	8018d3a <fp_sub>
      if (err != FP_OKAY) {
 8019ba2:	4683      	mov	fp, r0
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	d19d      	bne.n	8019ae4 <fp_invmod+0xa4>
    fp_div_2 (A, A);
 8019ba8:	4639      	mov	r1, r7
 8019baa:	4638      	mov	r0, r7
 8019bac:	f7fe ff3e 	bl	8018a2c <fp_div_2>
    fp_div_2 (B, B);
 8019bb0:	4651      	mov	r1, sl
 8019bb2:	4650      	mov	r0, sl
 8019bb4:	f7fe ff3a 	bl	8018a2c <fp_div_2>
 8019bb8:	e7ca      	b.n	8019b50 <fp_invmod+0x110>
    fp_div_2 (v, v);
 8019bba:	4648      	mov	r0, r9
 8019bbc:	f7fe ff36 	bl	8018a2c <fp_div_2>
    if (fp_isodd (C) == FP_YES || fp_isodd (D) == FP_YES) {
 8019bc0:	f8d6 2270 	ldr.w	r2, [r6, #624]	; 0x270
 8019bc4:	2a00      	cmp	r2, #0
 8019bc6:	dd03      	ble.n	8019bd0 <fp_invmod+0x190>
 8019bc8:	f8d6 2278 	ldr.w	r2, [r6, #632]	; 0x278
 8019bcc:	07d1      	lsls	r1, r2, #31
 8019bce:	d407      	bmi.n	8019be0 <fp_invmod+0x1a0>
 8019bd0:	f8d6 22d8 	ldr.w	r2, [r6, #728]	; 0x2d8
 8019bd4:	2a00      	cmp	r2, #0
 8019bd6:	dd15      	ble.n	8019c04 <fp_invmod+0x1c4>
 8019bd8:	f8d6 22e0 	ldr.w	r2, [r6, #736]	; 0x2e0
 8019bdc:	07d2      	lsls	r2, r2, #31
 8019bde:	d511      	bpl.n	8019c04 <fp_invmod+0x1c4>
      err = fp_add (C, y, C);
 8019be0:	9902      	ldr	r1, [sp, #8]
 8019be2:	462a      	mov	r2, r5
 8019be4:	4628      	mov	r0, r5
 8019be6:	f7ff f886 	bl	8018cf6 <fp_add>
      if (err != FP_OKAY) {
 8019bea:	4683      	mov	fp, r0
 8019bec:	2800      	cmp	r0, #0
 8019bee:	f47f af79 	bne.w	8019ae4 <fp_invmod+0xa4>
      err = fp_sub (D, x, D);
 8019bf2:	4642      	mov	r2, r8
 8019bf4:	4631      	mov	r1, r6
 8019bf6:	4640      	mov	r0, r8
 8019bf8:	f7ff f89f 	bl	8018d3a <fp_sub>
      if (err != FP_OKAY) {
 8019bfc:	4683      	mov	fp, r0
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	f47f af70 	bne.w	8019ae4 <fp_invmod+0xa4>
    fp_div_2 (C, C);
 8019c04:	4629      	mov	r1, r5
 8019c06:	4628      	mov	r0, r5
 8019c08:	f7fe ff10 	bl	8018a2c <fp_div_2>
    fp_div_2 (D, D);
 8019c0c:	4641      	mov	r1, r8
 8019c0e:	4640      	mov	r0, r8
 8019c10:	f7fe ff0c 	bl	8018a2c <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 8019c14:	f8d6 2138 	ldr.w	r2, [r6, #312]	; 0x138
 8019c18:	2a00      	cmp	r2, #0
    fp_div_2 (v, v);
 8019c1a:	4649      	mov	r1, r9
  while (fp_iseven (v) == FP_YES) {
 8019c1c:	dd03      	ble.n	8019c26 <fp_invmod+0x1e6>
 8019c1e:	f8d6 2140 	ldr.w	r2, [r6, #320]	; 0x140
 8019c22:	07d3      	lsls	r3, r2, #31
 8019c24:	d5c9      	bpl.n	8019bba <fp_invmod+0x17a>
  if (fp_cmp (u, v) != FP_LT) {
 8019c26:	9801      	ldr	r0, [sp, #4]
 8019c28:	f7ff f8a8 	bl	8018d7c <fp_cmp>
 8019c2c:	3001      	adds	r0, #1
 8019c2e:	d115      	bne.n	8019c5c <fp_invmod+0x21c>
    err = fp_sub (v, u, v);
 8019c30:	9901      	ldr	r1, [sp, #4]
 8019c32:	464a      	mov	r2, r9
 8019c34:	4648      	mov	r0, r9
 8019c36:	f7ff f880 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019c3a:	4683      	mov	fp, r0
 8019c3c:	2800      	cmp	r0, #0
 8019c3e:	f47f af51 	bne.w	8019ae4 <fp_invmod+0xa4>
    err = fp_sub (C, A, C);
 8019c42:	462a      	mov	r2, r5
 8019c44:	4639      	mov	r1, r7
 8019c46:	4628      	mov	r0, r5
 8019c48:	f7ff f877 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019c4c:	4683      	mov	fp, r0
 8019c4e:	2800      	cmp	r0, #0
 8019c50:	f47f af48 	bne.w	8019ae4 <fp_invmod+0xa4>
    err = fp_sub (D, B, D);
 8019c54:	4642      	mov	r2, r8
 8019c56:	4651      	mov	r1, sl
 8019c58:	4640      	mov	r0, r8
 8019c5a:	e014      	b.n	8019c86 <fp_invmod+0x246>
    err = fp_sub (u, v, u);
 8019c5c:	9a01      	ldr	r2, [sp, #4]
 8019c5e:	4649      	mov	r1, r9
 8019c60:	4610      	mov	r0, r2
 8019c62:	f7ff f86a 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019c66:	4683      	mov	fp, r0
 8019c68:	2800      	cmp	r0, #0
 8019c6a:	f47f af3b 	bne.w	8019ae4 <fp_invmod+0xa4>
    err = fp_sub (A, C, A);
 8019c6e:	463a      	mov	r2, r7
 8019c70:	4629      	mov	r1, r5
 8019c72:	4638      	mov	r0, r7
 8019c74:	f7ff f861 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019c78:	4683      	mov	fp, r0
 8019c7a:	2800      	cmp	r0, #0
 8019c7c:	f47f af32 	bne.w	8019ae4 <fp_invmod+0xa4>
    err = fp_sub (B, D, B);
 8019c80:	4652      	mov	r2, sl
 8019c82:	4641      	mov	r1, r8
 8019c84:	4650      	mov	r0, sl
    err = fp_sub (D, B, D);
 8019c86:	f7ff f858 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019c8a:	4683      	mov	fp, r0
 8019c8c:	2800      	cmp	r0, #0
 8019c8e:	f47f af29 	bne.w	8019ae4 <fp_invmod+0xa4>
  if (fp_iszero (u) == FP_NO)
 8019c92:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
 8019c96:	2a00      	cmp	r2, #0
 8019c98:	f47f af5a 	bne.w	8019b50 <fp_invmod+0x110>
  if (fp_cmp_d (v, 1) != FP_EQ) {
 8019c9c:	2101      	movs	r1, #1
 8019c9e:	4648      	mov	r0, r9
 8019ca0:	f7fe fff5 	bl	8018c8e <fp_cmp_d>
 8019ca4:	2800      	cmp	r0, #0
 8019ca6:	f47f af29 	bne.w	8019afc <fp_invmod+0xbc>
  while (fp_cmp_d(C, 0) == FP_LT) {
 8019caa:	2100      	movs	r1, #0
 8019cac:	4628      	mov	r0, r5
 8019cae:	f7fe ffee 	bl	8018c8e <fp_cmp_d>
 8019cb2:	3001      	adds	r0, #1
 8019cb4:	d00f      	beq.n	8019cd6 <fp_invmod+0x296>
  while (fp_cmp_mag(C, b) != FP_LT) {
 8019cb6:	4621      	mov	r1, r4
 8019cb8:	4628      	mov	r0, r5
 8019cba:	f7ff f801 	bl	8018cc0 <fp_cmp_mag>
 8019cbe:	3001      	adds	r0, #1
 8019cc0:	d112      	bne.n	8019ce8 <fp_invmod+0x2a8>
  fp_copy(C, c);
 8019cc2:	9903      	ldr	r1, [sp, #12]
 8019cc4:	4628      	mov	r0, r5
 8019cc6:	f7ff fb14 	bl	80192f2 <fp_copy>
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019cca:	4630      	mov	r0, r6
 8019ccc:	f001 f970 	bl	801afb0 <free>
  return FP_OKAY;
 8019cd0:	f04f 0b00 	mov.w	fp, #0
 8019cd4:	e6d2      	b.n	8019a7c <fp_invmod+0x3c>
    err = fp_add(C, b, C);
 8019cd6:	462a      	mov	r2, r5
 8019cd8:	4621      	mov	r1, r4
 8019cda:	4628      	mov	r0, r5
 8019cdc:	f7ff f80b 	bl	8018cf6 <fp_add>
    if (err != FP_OKAY) {
 8019ce0:	4683      	mov	fp, r0
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	d0e1      	beq.n	8019caa <fp_invmod+0x26a>
 8019ce6:	e6fd      	b.n	8019ae4 <fp_invmod+0xa4>
    err = fp_sub(C, b, C);
 8019ce8:	462a      	mov	r2, r5
 8019cea:	4621      	mov	r1, r4
 8019cec:	4628      	mov	r0, r5
 8019cee:	f7ff f824 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019cf2:	4683      	mov	fp, r0
 8019cf4:	2800      	cmp	r0, #0
 8019cf6:	d0de      	beq.n	8019cb6 <fp_invmod+0x276>
 8019cf8:	e6f4      	b.n	8019ae4 <fp_invmod+0xa4>
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 6, NULL, DYNAMIC_TYPE_BIGINT);
 8019cfa:	f44f 701c 	mov.w	r0, #624	; 0x270
 8019cfe:	f001 f94f 	bl	801afa0 <malloc>
  if (x == NULL) {
 8019d02:	4682      	mov	sl, r0
 8019d04:	2800      	cmp	r0, #0
 8019d06:	f43f aeb7 	beq.w	8019a78 <fp_invmod+0x38>
  y = &x[1]; u = &x[2]; v = &x[3]; B = &x[4]; D = &x[5];
 8019d0a:	f100 0968 	add.w	r9, r0, #104	; 0x68
 8019d0e:	f100 07d0 	add.w	r7, r0, #208	; 0xd0
 8019d12:	f500 769c 	add.w	r6, r0, #312	; 0x138
 8019d16:	f500 78d0 	add.w	r8, r0, #416	; 0x1a0
 8019d1a:	f500 7502 	add.w	r5, r0, #520	; 0x208
    fp_zero(a);
 8019d1e:	f7ff f99c 	bl	801905a <fp_zero>
 8019d22:	4648      	mov	r0, r9
 8019d24:	f7ff f999 	bl	801905a <fp_zero>
 8019d28:	4638      	mov	r0, r7
 8019d2a:	f7ff f996 	bl	801905a <fp_zero>
 8019d2e:	4630      	mov	r0, r6
 8019d30:	f7ff f993 	bl	801905a <fp_zero>
 8019d34:	4640      	mov	r0, r8
 8019d36:	f7ff f990 	bl	801905a <fp_zero>
 8019d3a:	4628      	mov	r0, r5
 8019d3c:	f7ff f98d 	bl	801905a <fp_zero>
  if (fp_iszero(a) == FP_YES) {
 8019d40:	f8db 3000 	ldr.w	r3, [fp]
 8019d44:	b90b      	cbnz	r3, 8019d4a <fp_invmod+0x30a>
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019d46:	4650      	mov	r0, sl
 8019d48:	e6d9      	b.n	8019afe <fp_invmod+0xbe>
  fp_copy(b, x);
 8019d4a:	4651      	mov	r1, sl
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	f7ff fad0 	bl	80192f2 <fp_copy>
  return fp_mod (a, b, c);
 8019d52:	4658      	mov	r0, fp
 8019d54:	464a      	mov	r2, r9
 8019d56:	4621      	mov	r1, r4
 8019d58:	f7ff fdfa 	bl	8019950 <fp_mod>
  if ((err = mp_mod(a, b, y)) != FP_OKAY) {
 8019d5c:	4683      	mov	fp, r0
 8019d5e:	b108      	cbz	r0, 8019d64 <fp_invmod+0x324>
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019d60:	4650      	mov	r0, sl
 8019d62:	e6c0      	b.n	8019ae6 <fp_invmod+0xa6>
  if (fp_iszero(y) == FP_YES) {
 8019d64:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d0ec      	beq.n	8019d46 <fp_invmod+0x306>
  fp_copy(x, u);
 8019d6c:	4639      	mov	r1, r7
 8019d6e:	4650      	mov	r0, sl
 8019d70:	f7ff fabf 	bl	80192f2 <fp_copy>
  fp_copy(y, v);
 8019d74:	4631      	mov	r1, r6
 8019d76:	4648      	mov	r0, r9
 8019d78:	f7ff fabb 	bl	80192f2 <fp_copy>
   fp_zero(a);
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	f7ff f96c 	bl	801905a <fp_zero>
   a->dp[0] = b;
 8019d82:	2301      	movs	r3, #1
 8019d84:	f8ca 3210 	str.w	r3, [sl, #528]	; 0x210
   a->used  = a->dp[0] ? 1 : 0;
 8019d88:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
  while (fp_iseven (u) == FP_YES) {
 8019d8c:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	dd33      	ble.n	8019dfc <fp_invmod+0x3bc>
 8019d94:	f8da 30d8 	ldr.w	r3, [sl, #216]	; 0xd8
 8019d98:	07d9      	lsls	r1, r3, #31
 8019d9a:	d42f      	bmi.n	8019dfc <fp_invmod+0x3bc>
    fp_div_2 (u, u);
 8019d9c:	4639      	mov	r1, r7
 8019d9e:	4638      	mov	r0, r7
 8019da0:	f7fe fe44 	bl	8018a2c <fp_div_2>
    if (fp_isodd (B) == FP_YES) {
 8019da4:	f8da 31a0 	ldr.w	r3, [sl, #416]	; 0x1a0
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	dd0b      	ble.n	8019dc4 <fp_invmod+0x384>
 8019dac:	f8da 31a8 	ldr.w	r3, [sl, #424]	; 0x1a8
 8019db0:	07d8      	lsls	r0, r3, #31
 8019db2:	d507      	bpl.n	8019dc4 <fp_invmod+0x384>
      err = fp_sub (B, x, B);
 8019db4:	4642      	mov	r2, r8
 8019db6:	4651      	mov	r1, sl
 8019db8:	4640      	mov	r0, r8
 8019dba:	f7fe ffbe 	bl	8018d3a <fp_sub>
      if (err != FP_OKAY) {
 8019dbe:	4683      	mov	fp, r0
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	d1cd      	bne.n	8019d60 <fp_invmod+0x320>
    fp_div_2 (B, B);
 8019dc4:	4641      	mov	r1, r8
 8019dc6:	4640      	mov	r0, r8
 8019dc8:	f7fe fe30 	bl	8018a2c <fp_div_2>
 8019dcc:	e7de      	b.n	8019d8c <fp_invmod+0x34c>
    fp_div_2 (v, v);
 8019dce:	4630      	mov	r0, r6
 8019dd0:	f7fe fe2c 	bl	8018a2c <fp_div_2>
    if (fp_isodd (D) == FP_YES) {
 8019dd4:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	dd0b      	ble.n	8019df4 <fp_invmod+0x3b4>
 8019ddc:	f8da 3210 	ldr.w	r3, [sl, #528]	; 0x210
 8019de0:	07da      	lsls	r2, r3, #31
 8019de2:	d507      	bpl.n	8019df4 <fp_invmod+0x3b4>
      err = fp_sub (D, x, D);
 8019de4:	462a      	mov	r2, r5
 8019de6:	4651      	mov	r1, sl
 8019de8:	4628      	mov	r0, r5
 8019dea:	f7fe ffa6 	bl	8018d3a <fp_sub>
      if (err != FP_OKAY) {
 8019dee:	4683      	mov	fp, r0
 8019df0:	2800      	cmp	r0, #0
 8019df2:	d1b5      	bne.n	8019d60 <fp_invmod+0x320>
    fp_div_2 (D, D);
 8019df4:	4629      	mov	r1, r5
 8019df6:	4628      	mov	r0, r5
 8019df8:	f7fe fe18 	bl	8018a2c <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 8019dfc:	f8da 3138 	ldr.w	r3, [sl, #312]	; 0x138
 8019e00:	2b00      	cmp	r3, #0
    fp_div_2 (v, v);
 8019e02:	4631      	mov	r1, r6
  while (fp_iseven (v) == FP_YES) {
 8019e04:	dd03      	ble.n	8019e0e <fp_invmod+0x3ce>
 8019e06:	f8da 3140 	ldr.w	r3, [sl, #320]	; 0x140
 8019e0a:	07db      	lsls	r3, r3, #31
 8019e0c:	d5df      	bpl.n	8019dce <fp_invmod+0x38e>
  if (fp_cmp (u, v) != FP_LT) {
 8019e0e:	4638      	mov	r0, r7
 8019e10:	f7fe ffb4 	bl	8018d7c <fp_cmp>
 8019e14:	3001      	adds	r0, #1
 8019e16:	d10b      	bne.n	8019e30 <fp_invmod+0x3f0>
    err = fp_sub (v, u, v);
 8019e18:	4632      	mov	r2, r6
 8019e1a:	4639      	mov	r1, r7
 8019e1c:	4630      	mov	r0, r6
 8019e1e:	f7fe ff8c 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019e22:	4683      	mov	fp, r0
 8019e24:	2800      	cmp	r0, #0
 8019e26:	d19b      	bne.n	8019d60 <fp_invmod+0x320>
    err = fp_sub (D, B, D);
 8019e28:	462a      	mov	r2, r5
 8019e2a:	4641      	mov	r1, r8
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	e00a      	b.n	8019e46 <fp_invmod+0x406>
    err = fp_sub (u, v, u);
 8019e30:	463a      	mov	r2, r7
 8019e32:	4631      	mov	r1, r6
 8019e34:	4638      	mov	r0, r7
 8019e36:	f7fe ff80 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019e3a:	4683      	mov	fp, r0
 8019e3c:	2800      	cmp	r0, #0
 8019e3e:	d18f      	bne.n	8019d60 <fp_invmod+0x320>
    err = fp_sub (B, D, B);
 8019e40:	4642      	mov	r2, r8
 8019e42:	4629      	mov	r1, r5
 8019e44:	4640      	mov	r0, r8
    err = fp_sub (D, B, D);
 8019e46:	f7fe ff78 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019e4a:	4683      	mov	fp, r0
 8019e4c:	2800      	cmp	r0, #0
 8019e4e:	d187      	bne.n	8019d60 <fp_invmod+0x320>
  if (fp_iszero (u) == FP_NO) {
 8019e50:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d199      	bne.n	8019d8c <fp_invmod+0x34c>
  if (fp_cmp_d (v, 1) != FP_EQ) {
 8019e58:	2101      	movs	r1, #1
 8019e5a:	4630      	mov	r0, r6
 8019e5c:	f7fe ff17 	bl	8018c8e <fp_cmp_d>
 8019e60:	4683      	mov	fp, r0
 8019e62:	2800      	cmp	r0, #0
 8019e64:	f47f af6f 	bne.w	8019d46 <fp_invmod+0x306>
  while (D->sign == FP_NEG) {
 8019e68:	f8da 320c 	ldr.w	r3, [sl, #524]	; 0x20c
 8019e6c:	2b01      	cmp	r3, #1
 8019e6e:	d00a      	beq.n	8019e86 <fp_invmod+0x446>
  while (fp_cmp_mag(D, b) != FP_LT) {
 8019e70:	4621      	mov	r1, r4
 8019e72:	4628      	mov	r0, r5
 8019e74:	f7fe ff24 	bl	8018cc0 <fp_cmp_mag>
 8019e78:	3001      	adds	r0, #1
 8019e7a:	d10c      	bne.n	8019e96 <fp_invmod+0x456>
  fp_copy (D, c);
 8019e7c:	9903      	ldr	r1, [sp, #12]
 8019e7e:	4628      	mov	r0, r5
 8019e80:	f7ff fa37 	bl	80192f2 <fp_copy>
 8019e84:	e76c      	b.n	8019d60 <fp_invmod+0x320>
    err = fp_add (D, b, D);
 8019e86:	462a      	mov	r2, r5
 8019e88:	4621      	mov	r1, r4
 8019e8a:	4628      	mov	r0, r5
 8019e8c:	f7fe ff33 	bl	8018cf6 <fp_add>
    if (err != FP_OKAY) {
 8019e90:	2800      	cmp	r0, #0
 8019e92:	d0e9      	beq.n	8019e68 <fp_invmod+0x428>
 8019e94:	e764      	b.n	8019d60 <fp_invmod+0x320>
    err = fp_sub(D, b, D);
 8019e96:	462a      	mov	r2, r5
 8019e98:	4621      	mov	r1, r4
 8019e9a:	4628      	mov	r0, r5
 8019e9c:	f7fe ff4d 	bl	8018d3a <fp_sub>
    if (err != FP_OKAY) {
 8019ea0:	4606      	mov	r6, r0
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	d0e4      	beq.n	8019e70 <fp_invmod+0x430>
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8019ea6:	4650      	mov	r0, sl
 8019ea8:	f001 f882 	bl	801afb0 <free>
    err = fp_sub(D, b, D);
 8019eac:	46b3      	mov	fp, r6
      return err;
 8019eae:	e5e5      	b.n	8019a7c <fp_invmod+0x3c>

08019eb0 <mp_invmod>:
  return fp_invmod(a, b, c);
 8019eb0:	f7ff bdc6 	b.w	8019a40 <fp_invmod>

08019eb4 <fp_sqr_comba>:
{
 8019eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eb8:	4681      	mov	r9, r0
 8019eba:	b087      	sub	sp, #28
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8019ebc:	2068      	movs	r0, #104	; 0x68
{
 8019ebe:	460f      	mov	r7, r1
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8019ec0:	f001 f86e 	bl	801afa0 <malloc>
   if (tmp == NULL)
 8019ec4:	4680      	mov	r8, r0
 8019ec6:	2800      	cmp	r0, #0
 8019ec8:	f000 8087 	beq.w	8019fda <fp_sqr_comba+0x126>
  pa = A->used + A->used;
 8019ecc:	f8d9 3000 	ldr.w	r3, [r9]
 8019ed0:	005b      	lsls	r3, r3, #1
  if (pa >= FP_SIZE) {
 8019ed2:	2b17      	cmp	r3, #23
 8019ed4:	bfa8      	it	ge
 8019ed6:	2317      	movge	r3, #23
  if (A == B) {
 8019ed8:	45b9      	cmp	r9, r7
 8019eda:	9302      	str	r3, [sp, #8]
 8019edc:	d126      	bne.n	8019f2c <fp_sqr_comba+0x78>
    fp_zero(a);
 8019ede:	f7ff f8bc 	bl	801905a <fp_zero>
     dst = tmp;
 8019ee2:	4640      	mov	r0, r8
  for (ix = 0; ix < pa; ix++) {
 8019ee4:	f100 0308 	add.w	r3, r0, #8
  COMBA_CLEAR;
 8019ee8:	2500      	movs	r5, #0
 8019eea:	9303      	str	r3, [sp, #12]
      tmpx = A->dp + tx;
 8019eec:	f109 0308 	add.w	r3, r9, #8
  COMBA_CLEAR;
 8019ef0:	462c      	mov	r4, r5
  for (ix = 0; ix < pa; ix++) {
 8019ef2:	462e      	mov	r6, r5
      tmpx = A->dp + tx;
 8019ef4:	9304      	str	r3, [sp, #16]
          SQRADD2(*tmpx++, *tmpy--);
 8019ef6:	46ab      	mov	fp, r5
  for (ix = 0; ix < pa; ix++) {
 8019ef8:	9b02      	ldr	r3, [sp, #8]
 8019efa:	429e      	cmp	r6, r3
 8019efc:	db1b      	blt.n	8019f36 <fp_sqr_comba+0x82>
  dst->used = pa;
 8019efe:	6003      	str	r3, [r0, #0]
  fp_clamp (dst);
 8019f00:	6803      	ldr	r3, [r0, #0]
 8019f02:	b133      	cbz	r3, 8019f12 <fp_sqr_comba+0x5e>
 8019f04:	1e5a      	subs	r2, r3, #1
 8019f06:	3301      	adds	r3, #1
 8019f08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d062      	beq.n	8019fd6 <fp_sqr_comba+0x122>
 8019f10:	6843      	ldr	r3, [r0, #4]
 8019f12:	6043      	str	r3, [r0, #4]
  if (dst != B) {
 8019f14:	42b8      	cmp	r0, r7
 8019f16:	d002      	beq.n	8019f1e <fp_sqr_comba+0x6a>
     fp_copy(dst, B);
 8019f18:	4639      	mov	r1, r7
 8019f1a:	f7ff f9ea 	bl	80192f2 <fp_copy>
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8019f1e:	4640      	mov	r0, r8
 8019f20:	f001 f846 	bl	801afb0 <free>
  return FP_OKAY;
 8019f24:	2000      	movs	r0, #0
}
 8019f26:	b007      	add	sp, #28
 8019f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fp_zero(B);
 8019f2c:	4638      	mov	r0, r7
 8019f2e:	f7ff f894 	bl	801905a <fp_zero>
 8019f32:	4638      	mov	r0, r7
 8019f34:	e7d6      	b.n	8019ee4 <fp_sqr_comba+0x30>
      ty = MIN(A->used-1, ix);
 8019f36:	f8d9 2000 	ldr.w	r2, [r9]
      tmpx = A->dp + tx;
 8019f3a:	f8dd c010 	ldr.w	ip, [sp, #16]
      ty = MIN(A->used-1, ix);
 8019f3e:	42b2      	cmp	r2, r6
 8019f40:	bfd4      	ite	le
 8019f42:	f102 33ff 	addle.w	r3, r2, #4294967295	; 0xffffffff
 8019f46:	4633      	movgt	r3, r6
      tx = ix - ty;
 8019f48:	1af1      	subs	r1, r6, r3
      iy = MIN(A->used-tx, ty+1);
 8019f4a:	1a52      	subs	r2, r2, r1
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	bfc8      	it	gt
 8019f50:	1c5a      	addgt	r2, r3, #1
      tmpx = A->dp + tx;
 8019f52:	eb0c 0e81 	add.w	lr, ip, r1, lsl #2
      tmpy = A->dp + ty;
 8019f56:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
      iy = MIN(iy, (ty-tx+1)>>1);
 8019f5a:	1a5b      	subs	r3, r3, r1
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	105b      	asrs	r3, r3, #1
 8019f60:	4293      	cmp	r3, r2
 8019f62:	bfa8      	it	ge
 8019f64:	4613      	movge	r3, r2
 8019f66:	9305      	str	r3, [sp, #20]
      COMBA_FORWARD;
 8019f68:	4623      	mov	r3, r4
 8019f6a:	462c      	mov	r4, r5
 8019f6c:	2500      	movs	r5, #0
      tmpy = A->dp + ty;
 8019f6e:	f8cd c004 	str.w	ip, [sp, #4]
      for (iz = 0; iz < iy; iz++) {
 8019f72:	4629      	mov	r1, r5
 8019f74:	9a05      	ldr	r2, [sp, #20]
 8019f76:	4291      	cmp	r1, r2
 8019f78:	db12      	blt.n	8019fa0 <fp_sqr_comba+0xec>
      if ((ix&1) == 0) {
 8019f7a:	f016 0c01 	ands.w	ip, r6, #1
 8019f7e:	d109      	bne.n	8019f94 <fp_sqr_comba+0xe0>
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
 8019f80:	1072      	asrs	r2, r6, #1
 8019f82:	3202      	adds	r2, #2
 8019f84:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 8019f88:	4662      	mov	r2, ip
 8019f8a:	fbe1 3201 	umlal	r3, r2, r1, r1
 8019f8e:	18a4      	adds	r4, r4, r2
 8019f90:	eb45 054c 	adc.w	r5, r5, ip, lsl #1
      COMBA_STORE(dst->dp[ix]);
 8019f94:	9a03      	ldr	r2, [sp, #12]
 8019f96:	f842 3b04 	str.w	r3, [r2], #4
  for (ix = 0; ix < pa; ix++) {
 8019f9a:	3601      	adds	r6, #1
      COMBA_STORE(dst->dp[ix]);
 8019f9c:	9203      	str	r2, [sp, #12]
  for (ix = 0; ix < pa; ix++) {
 8019f9e:	e7ab      	b.n	8019ef8 <fp_sqr_comba+0x44>
          SQRADD2(*tmpx++, *tmpy--);
 8019fa0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019fa4:	f85c 2904 	ldr.w	r2, [ip], #-4
 8019fa8:	f8cd c004 	str.w	ip, [sp, #4]
 8019fac:	f85e c021 	ldr.w	ip, [lr, r1, lsl #2]
 8019fb0:	fbac c202 	umull	ip, r2, ip, r2
 8019fb4:	eb13 030c 	adds.w	r3, r3, ip
 8019fb8:	f142 0a00 	adc.w	sl, r2, #0
 8019fbc:	eb14 040a 	adds.w	r4, r4, sl
 8019fc0:	eb4b 0a0b 	adc.w	sl, fp, fp
 8019fc4:	eb13 030c 	adds.w	r3, r3, ip
 8019fc8:	f142 0200 	adc.w	r2, r2, #0
 8019fcc:	1914      	adds	r4, r2, r4
 8019fce:	eb45 050a 	adc.w	r5, r5, sl
      for (iz = 0; iz < iy; iz++) {
 8019fd2:	3101      	adds	r1, #1
 8019fd4:	e7ce      	b.n	8019f74 <fp_sqr_comba+0xc0>
  fp_clamp (dst);
 8019fd6:	6002      	str	r2, [r0, #0]
 8019fd8:	e792      	b.n	8019f00 <fp_sqr_comba+0x4c>
       return FP_MEM;
 8019fda:	f06f 0001 	mvn.w	r0, #1
 8019fde:	e7a2      	b.n	8019f26 <fp_sqr_comba+0x72>

08019fe0 <fp_sqr>:
{
 8019fe0:	b538      	push	{r3, r4, r5, lr}
    y = A->used;
 8019fe2:	6803      	ldr	r3, [r0, #0]
    oldused = B->used;
 8019fe4:	680d      	ldr	r5, [r1, #0]
    if (y + y >= FP_SIZE) {
 8019fe6:	005a      	lsls	r2, r3, #1
 8019fe8:	2a17      	cmp	r2, #23
{
 8019fea:	460c      	mov	r4, r1
    if (y + y >= FP_SIZE) {
 8019fec:	dc0f      	bgt.n	801a00e <fp_sqr+0x2e>
        if (y == 8) {
 8019fee:	2b08      	cmp	r3, #8
 8019ff0:	d10a      	bne.n	801a008 <fp_sqr+0x28>
           err = fp_sqr_comba8(A,B);
 8019ff2:	f7fd ff88 	bl	8017f06 <fp_sqr_comba8>
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8019ff6:	4621      	mov	r1, r4
    B->dp[y] = 0;
 8019ff8:	2200      	movs	r2, #0
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8019ffa:	f851 3b08 	ldr.w	r3, [r1], #8
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	db01      	blt.n	801a006 <fp_sqr+0x26>
 801a002:	42ab      	cmp	r3, r5
 801a004:	db06      	blt.n	801a014 <fp_sqr+0x34>
}
 801a006:	bd38      	pop	{r3, r4, r5, pc}
       err = fp_sqr_comba(A, B);
 801a008:	f7ff ff54 	bl	8019eb4 <fp_sqr_comba>
 801a00c:	e7f3      	b.n	8019ff6 <fp_sqr+0x16>
       err = FP_VAL;
 801a00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a012:	e7f0      	b.n	8019ff6 <fp_sqr+0x16>
    B->dp[y] = 0;
 801a014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (y = B->used; y >= 0 && y < oldused; y++) {
 801a018:	3301      	adds	r3, #1
 801a01a:	e7f0      	b.n	8019ffe <fp_sqr+0x1e>

0801a01c <fp_invmod_mont_ct>:
{
 801a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a020:	461f      	mov	r7, r3
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801a022:	6803      	ldr	r3, [r0, #0]
{
 801a024:	b085      	sub	sp, #20
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801a026:	005b      	lsls	r3, r3, #1
 801a028:	2b18      	cmp	r3, #24
{
 801a02a:	4683      	mov	fp, r0
 801a02c:	460e      	mov	r6, r1
 801a02e:	9201      	str	r2, [sp, #4]
  if ((a->used * 2 > FP_SIZE) || (b->used * 2 > FP_SIZE)) {
 801a030:	f300 80c7 	bgt.w	801a1c2 <fp_invmod_mont_ct+0x1a6>
 801a034:	680b      	ldr	r3, [r1, #0]
 801a036:	005b      	lsls	r3, r3, #1
 801a038:	2b18      	cmp	r3, #24
 801a03a:	f300 80c2 	bgt.w	801a1c2 <fp_invmod_mont_ct+0x1a6>
  t = (fp_int*)XMALLOC(sizeof(fp_int) * (2 + CT_INV_MOD_PRE_CNT), NULL,
 801a03e:	f44f 6082 	mov.w	r0, #1040	; 0x410
 801a042:	f000 ffad 	bl	801afa0 <malloc>
  if (t == NULL)
 801a046:	4604      	mov	r4, r0
 801a048:	2800      	cmp	r0, #0
 801a04a:	f000 80bd 	beq.w	801a1c8 <fp_invmod_mont_ct+0x1ac>
  e = t + 1;
 801a04e:	f100 0968 	add.w	r9, r0, #104	; 0x68
  pre = t + 2;
 801a052:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
    fp_zero(a);
 801a056:	f7ff f800 	bl	801905a <fp_zero>
 801a05a:	4648      	mov	r0, r9
 801a05c:	f7fe fffd 	bl	801905a <fp_zero>
 801a060:	4640      	mov	r0, r8
 801a062:	f7fe fffa 	bl	801905a <fp_zero>
  fp_copy(a, &pre[0]);
 801a066:	4641      	mov	r1, r8
 801a068:	4658      	mov	r0, fp
 801a06a:	f7ff f942 	bl	80192f2 <fp_copy>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801a06e:	f504 6382 	add.w	r3, r4, #1040	; 0x410
 801a072:	9302      	str	r3, [sp, #8]
 801a074:	f504 759c 	add.w	r5, r4, #312	; 0x138
  int i, j, err = FP_OKAY;
 801a078:	2300      	movs	r3, #0
    fp_zero(a);
 801a07a:	4628      	mov	r0, r5
 801a07c:	9303      	str	r3, [sp, #12]
 801a07e:	f7fe ffec 	bl	801905a <fp_zero>
    err |= fp_sqr(&pre[i-1], &pre[i]);
 801a082:	4629      	mov	r1, r5
 801a084:	f1a5 0068 	sub.w	r0, r5, #104	; 0x68
 801a088:	f7ff ffaa 	bl	8019fe0 <fp_sqr>
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801a08c:	463a      	mov	r2, r7
    err |= fp_sqr(&pre[i-1], &pre[i]);
 801a08e:	4682      	mov	sl, r0
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801a090:	4631      	mov	r1, r6
 801a092:	4628      	mov	r0, r5
 801a094:	f7fe ff47 	bl	8018f26 <fp_montgomery_reduce>
    err |= fp_mul(&pre[i], a, &pre[i]);
 801a098:	462a      	mov	r2, r5
 801a09a:	ea4a 0a00 	orr.w	sl, sl, r0
 801a09e:	4659      	mov	r1, fp
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	f7ff f9fa 	bl	801949a <fp_mul>
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801a0a6:	463a      	mov	r2, r7
 801a0a8:	ea4a 0a00 	orr.w	sl, sl, r0
 801a0ac:	4631      	mov	r1, r6
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	f7fe ff39 	bl	8018f26 <fp_montgomery_reduce>
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801a0b4:	9a02      	ldr	r2, [sp, #8]
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801a0b6:	9b03      	ldr	r3, [sp, #12]
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801a0b8:	3568      	adds	r5, #104	; 0x68
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801a0ba:	ea4a 0a00 	orr.w	sl, sl, r0
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801a0be:	42aa      	cmp	r2, r5
    err |= fp_montgomery_reduce(&pre[i], b, mp);
 801a0c0:	ea43 030a 	orr.w	r3, r3, sl
  for (i = 1; i < CT_INV_MOD_PRE_CNT; i++) {
 801a0c4:	d1d9      	bne.n	801a07a <fp_invmod_mont_ct+0x5e>
  err |= fp_sub_d(b, 2, e);
 801a0c6:	464a      	mov	r2, r9
 801a0c8:	2102      	movs	r1, #2
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	9302      	str	r3, [sp, #8]
 801a0ce:	f7ff f8a4 	bl	801921a <fp_sub_d>
 801a0d2:	9b02      	ldr	r3, [sp, #8]
 801a0d4:	ea40 0503 	orr.w	r5, r0, r3
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801a0d8:	4648      	mov	r0, r9
 801a0da:	f7fe ff5f 	bl	8018f9c <fp_count_bits>
  j = 1;
 801a0de:	f04f 0a01 	mov.w	sl, #1
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801a0e2:	f1a0 0b02 	sub.w	fp, r0, #2
 801a0e6:	f1bb 0f00 	cmp.w	fp, #0
 801a0ea:	da27      	bge.n	801a13c <fp_invmod_mont_ct+0x120>
  fp_copy(&pre[j-1], t);
 801a0ec:	2368      	movs	r3, #104	; 0x68
 801a0ee:	fb03 800a 	mla	r0, r3, sl, r8
 801a0f2:	4621      	mov	r1, r4
 801a0f4:	3868      	subs	r0, #104	; 0x68
 801a0f6:	f7ff f8fc 	bl	80192f2 <fp_copy>
  j = 0;
 801a0fa:	f04f 0a00 	mov.w	sl, #0
  for (; i >= 0; i--) {
 801a0fe:	f1bb 0f00 	cmp.w	fp, #0
 801a102:	da29      	bge.n	801a158 <fp_invmod_mont_ct+0x13c>
  if (j > 0) {
 801a104:	f1ba 0f00 	cmp.w	sl, #0
 801a108:	dd56      	ble.n	801a1b8 <fp_invmod_mont_ct+0x19c>
    err |= fp_mul(t, &pre[j-1], c);
 801a10a:	2168      	movs	r1, #104	; 0x68
 801a10c:	fb01 810a 	mla	r1, r1, sl, r8
 801a110:	9a01      	ldr	r2, [sp, #4]
 801a112:	3968      	subs	r1, #104	; 0x68
 801a114:	4620      	mov	r0, r4
 801a116:	f7ff f9c0 	bl	801949a <fp_mul>
    err |= fp_montgomery_reduce(c, b, mp);
 801a11a:	463a      	mov	r2, r7
    err |= fp_mul(t, &pre[j-1], c);
 801a11c:	4680      	mov	r8, r0
    err |= fp_montgomery_reduce(c, b, mp);
 801a11e:	4631      	mov	r1, r6
 801a120:	9801      	ldr	r0, [sp, #4]
 801a122:	f7fe ff00 	bl	8018f26 <fp_montgomery_reduce>
 801a126:	ea48 0800 	orr.w	r8, r8, r0
 801a12a:	ea45 0508 	orr.w	r5, r5, r8
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801a12e:	4620      	mov	r0, r4
 801a130:	f000 ff3e 	bl	801afb0 <free>
}
 801a134:	4628      	mov	r0, r5
 801a136:	b005      	add	sp, #20
 801a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!fp_is_bit_set(e, i) || j == CT_INV_MOD_PRE_CNT)
 801a13c:	4659      	mov	r1, fp
 801a13e:	4648      	mov	r0, r9
 801a140:	f7fe ff14 	bl	8018f6c <fp_is_bit_set>
 801a144:	2800      	cmp	r0, #0
 801a146:	d0d1      	beq.n	801a0ec <fp_invmod_mont_ct+0xd0>
 801a148:	f1ba 0f08 	cmp.w	sl, #8
 801a14c:	d0ce      	beq.n	801a0ec <fp_invmod_mont_ct+0xd0>
      j++;
 801a14e:	f10a 0a01 	add.w	sl, sl, #1
  for (i = fp_count_bits(e)-2; i >= 0; i--) {
 801a152:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a156:	e7c6      	b.n	801a0e6 <fp_invmod_mont_ct+0xca>
    int set = fp_is_bit_set(e, i);
 801a158:	4659      	mov	r1, fp
 801a15a:	4648      	mov	r0, r9
 801a15c:	f7fe ff06 	bl	8018f6c <fp_is_bit_set>
    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 801a160:	f1ba 0f08 	cmp.w	sl, #8
    int set = fp_is_bit_set(e, i);
 801a164:	9002      	str	r0, [sp, #8]
    if ((j == CT_INV_MOD_PRE_CNT) || (!set && j > 0)) {
 801a166:	d003      	beq.n	801a170 <fp_invmod_mont_ct+0x154>
 801a168:	b9b0      	cbnz	r0, 801a198 <fp_invmod_mont_ct+0x17c>
 801a16a:	f1ba 0f00 	cmp.w	sl, #0
 801a16e:	dd13      	ble.n	801a198 <fp_invmod_mont_ct+0x17c>
      err |= fp_mul(t, &pre[j-1], t);
 801a170:	2368      	movs	r3, #104	; 0x68
 801a172:	fb03 810a 	mla	r1, r3, sl, r8
 801a176:	4622      	mov	r2, r4
 801a178:	3968      	subs	r1, #104	; 0x68
 801a17a:	4620      	mov	r0, r4
 801a17c:	f7ff f98d 	bl	801949a <fp_mul>
      err |= fp_montgomery_reduce(t, b, mp);
 801a180:	463a      	mov	r2, r7
      err |= fp_mul(t, &pre[j-1], t);
 801a182:	4682      	mov	sl, r0
      err |= fp_montgomery_reduce(t, b, mp);
 801a184:	4631      	mov	r1, r6
 801a186:	4620      	mov	r0, r4
 801a188:	f7fe fecd 	bl	8018f26 <fp_montgomery_reduce>
 801a18c:	ea4a 0a00 	orr.w	sl, sl, r0
 801a190:	ea45 050a 	orr.w	r5, r5, sl
      j = 0;
 801a194:	f04f 0a00 	mov.w	sl, #0
    err |= fp_sqr(t, t);
 801a198:	4621      	mov	r1, r4
 801a19a:	4620      	mov	r0, r4
 801a19c:	f7ff ff20 	bl	8019fe0 <fp_sqr>
    err |= fp_montgomery_reduce(t, b, mp);
 801a1a0:	463a      	mov	r2, r7
    err |= fp_sqr(t, t);
 801a1a2:	4305      	orrs	r5, r0
    err |= fp_montgomery_reduce(t, b, mp);
 801a1a4:	4631      	mov	r1, r6
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f7fe febd 	bl	8018f26 <fp_montgomery_reduce>
    j += set;
 801a1ac:	9b02      	ldr	r3, [sp, #8]
    err |= fp_montgomery_reduce(t, b, mp);
 801a1ae:	4305      	orrs	r5, r0
    j += set;
 801a1b0:	449a      	add	sl, r3
  for (; i >= 0; i--) {
 801a1b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a1b6:	e7a2      	b.n	801a0fe <fp_invmod_mont_ct+0xe2>
    fp_copy(t, c);
 801a1b8:	9901      	ldr	r1, [sp, #4]
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	f7ff f899 	bl	80192f2 <fp_copy>
 801a1c0:	e7b5      	b.n	801a12e <fp_invmod_mont_ct+0x112>
    return FP_VAL;
 801a1c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a1c6:	e7b5      	b.n	801a134 <fp_invmod_mont_ct+0x118>
    return FP_MEM;
 801a1c8:	f06f 0501 	mvn.w	r5, #1
 801a1cc:	e7b2      	b.n	801a134 <fp_invmod_mont_ct+0x118>

0801a1ce <mp_invmod_mont_ct>:
  return fp_invmod_mont_ct(a, b, c, mp);
 801a1ce:	f7ff bf25 	b.w	801a01c <fp_invmod_mont_ct>

0801a1d2 <fp_div_d>:
   return FP_NO;
}

/* a/b => cb + d == a */
static int fp_div_d(fp_int *a, fp_digit b, fp_int *c, fp_digit *d)
{
 801a1d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d6:	4606      	mov	r6, r0
 801a1d8:	4617      	mov	r7, r2
 801a1da:	4698      	mov	r8, r3
  fp_word  w;
  fp_digit t;
  int      ix;

  /* cannot divide by zero */
  if (b == 0) {
 801a1dc:	460d      	mov	r5, r1
 801a1de:	2900      	cmp	r1, #0
 801a1e0:	d07a      	beq.n	801a2d8 <fp_div_d+0x106>
     return FP_VAL;
  }

  /* quick outs */
  if (b == 1 || fp_iszero(a) == FP_YES) {
 801a1e2:	2901      	cmp	r1, #1
 801a1e4:	d001      	beq.n	801a1ea <fp_div_d+0x18>
 801a1e6:	6803      	ldr	r3, [r0, #0]
 801a1e8:	b973      	cbnz	r3, 801a208 <fp_div_d+0x36>
     if (d != NULL) {
 801a1ea:	f1b8 0f00 	cmp.w	r8, #0
 801a1ee:	d002      	beq.n	801a1f6 <fp_div_d+0x24>
        *d = 0;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	f8c8 3000 	str.w	r3, [r8]
     }
     if (c != NULL) {
 801a1f6:	b917      	cbnz	r7, 801a1fe <fp_div_d+0x2c>
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
#endif
  return FP_OKAY;
 801a1f8:	2000      	movs	r0, #0
}
 801a1fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fp_copy(a, c);
 801a1fe:	4639      	mov	r1, r7
 801a200:	4630      	mov	r0, r6
 801a202:	f7ff f876 	bl	80192f2 <fp_copy>
 801a206:	e7f7      	b.n	801a1f8 <fp_div_d+0x26>
   if ((b==0) || (b & (b-1))) {
 801a208:	3901      	subs	r1, #1
 801a20a:	4029      	ands	r1, r5
 801a20c:	d103      	bne.n	801a216 <fp_div_d+0x44>
      if (b == (((fp_digit)1)<<x)) {
 801a20e:	2301      	movs	r3, #1
   for (x = 0; x < DIGIT_BIT; x++) {
 801a210:	3101      	adds	r1, #1
 801a212:	2920      	cmp	r1, #32
 801a214:	d120      	bne.n	801a258 <fp_div_d+0x86>
  q = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a216:	2068      	movs	r0, #104	; 0x68
 801a218:	f000 fec2 	bl	801afa0 <malloc>
  if (q == NULL)
 801a21c:	4604      	mov	r4, r0
 801a21e:	2800      	cmp	r0, #0
 801a220:	d05d      	beq.n	801a2de <fp_div_d+0x10c>
    fp_zero(a);
 801a222:	f7fe ff1a 	bl	801905a <fp_zero>
  if (c != NULL) {
 801a226:	6833      	ldr	r3, [r6, #0]
 801a228:	b117      	cbz	r7, 801a230 <fp_div_d+0x5e>
    q->sign = a->sign;
 801a22a:	6872      	ldr	r2, [r6, #4]
    q->used = a->used;
 801a22c:	6023      	str	r3, [r4, #0]
    q->sign = a->sign;
 801a22e:	6062      	str	r2, [r4, #4]
  for (ix = a->used - 1; ix >= 0; ix--) {
 801a230:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
  w = 0;
 801a234:	f04f 0900 	mov.w	r9, #0
     w = (w << ((fp_word)DIGIT_BIT)) | ((fp_word)a->dp[ix]);
 801a238:	3608      	adds	r6, #8
        q->dp[ix] = (fp_digit)t;
 801a23a:	f104 0b08 	add.w	fp, r4, #8
  for (ix = a->used - 1; ix >= 0; ix--) {
 801a23e:	f1ba 0f00 	cmp.w	sl, #0
 801a242:	da21      	bge.n	801a288 <fp_div_d+0xb6>
  if (d != NULL) {
 801a244:	f1b8 0f00 	cmp.w	r8, #0
 801a248:	d001      	beq.n	801a24e <fp_div_d+0x7c>
     *d = (fp_digit)w;
 801a24a:	f8c8 9000 	str.w	r9, [r8]
  if (c != NULL) {
 801a24e:	bba7      	cbnz	r7, 801a2ba <fp_div_d+0xe8>
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 801a250:	4620      	mov	r0, r4
 801a252:	f000 fead 	bl	801afb0 <free>
 801a256:	e7cf      	b.n	801a1f8 <fp_div_d+0x26>
      if (b == (((fp_digit)1)<<x)) {
 801a258:	fa03 f201 	lsl.w	r2, r3, r1
 801a25c:	4295      	cmp	r5, r2
 801a25e:	d1d7      	bne.n	801a210 <fp_div_d+0x3e>
     if (d != NULL) {
 801a260:	f1b8 0f00 	cmp.w	r8, #0
 801a264:	d008      	beq.n	801a278 <fp_div_d+0xa6>
        *d = a->dp[0] & ((((fp_digit)1)<<ix) - 1);
 801a266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a26a:	fa03 f201 	lsl.w	r2, r3, r1
 801a26e:	68b3      	ldr	r3, [r6, #8]
 801a270:	ea23 0302 	bic.w	r3, r3, r2
 801a274:	f8c8 3000 	str.w	r3, [r8]
     if (c != NULL) {
 801a278:	2f00      	cmp	r7, #0
 801a27a:	d0bd      	beq.n	801a1f8 <fp_div_d+0x26>
        fp_div_2d(a, ix, c, NULL);
 801a27c:	2300      	movs	r3, #0
 801a27e:	463a      	mov	r2, r7
 801a280:	4630      	mov	r0, r6
 801a282:	f7ff f998 	bl	80195b6 <fp_div_2d>
 801a286:	e7b7      	b.n	801a1f8 <fp_div_d+0x26>
     w = (w << ((fp_word)DIGIT_BIT)) | ((fp_word)a->dp[ix]);
 801a288:	4649      	mov	r1, r9
 801a28a:	f856 902a 	ldr.w	r9, [r6, sl, lsl #2]
     if (w >= b) {
 801a28e:	45a9      	cmp	r9, r5
 801a290:	f171 0300 	sbcs.w	r3, r1, #0
 801a294:	d30e      	bcc.n	801a2b4 <fp_div_d+0xe2>
        t = (fp_digit)(w / b);
 801a296:	462a      	mov	r2, r5
 801a298:	2300      	movs	r3, #0
 801a29a:	4648      	mov	r0, r9
 801a29c:	f000 fb36 	bl	801a90c <__aeabi_uldivmod>
        w -= ((fp_word)t) * ((fp_word)b);
 801a2a0:	fba0 3205 	umull	r3, r2, r0, r5
 801a2a4:	ebb9 0903 	subs.w	r9, r9, r3
      if (c != NULL)
 801a2a8:	b10f      	cbz	r7, 801a2ae <fp_div_d+0xdc>
        q->dp[ix] = (fp_digit)t;
 801a2aa:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
  for (ix = a->used - 1; ix >= 0; ix--) {
 801a2ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a2b2:	e7c4      	b.n	801a23e <fp_div_d+0x6c>
        t = 0;
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	e7f7      	b.n	801a2a8 <fp_div_d+0xd6>
     fp_clamp(q);
 801a2b8:	6022      	str	r2, [r4, #0]
 801a2ba:	6823      	ldr	r3, [r4, #0]
 801a2bc:	b133      	cbz	r3, 801a2cc <fp_div_d+0xfa>
 801a2be:	1e5a      	subs	r2, r3, #1
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d0f6      	beq.n	801a2b8 <fp_div_d+0xe6>
 801a2ca:	6863      	ldr	r3, [r4, #4]
 801a2cc:	6063      	str	r3, [r4, #4]
     fp_copy(q, c);
 801a2ce:	4639      	mov	r1, r7
 801a2d0:	4620      	mov	r0, r4
 801a2d2:	f7ff f80e 	bl	80192f2 <fp_copy>
 801a2d6:	e7bb      	b.n	801a250 <fp_div_d+0x7e>
     return FP_VAL;
 801a2d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2dc:	e78d      	b.n	801a1fa <fp_div_d+0x28>
      return FP_MEM;
 801a2de:	f06f 0001 	mvn.w	r0, #1
 801a2e2:	e78a      	b.n	801a1fa <fp_div_d+0x28>

0801a2e4 <fp_init_copy>:
    if (a != b) {
 801a2e4:	4288      	cmp	r0, r1
{
 801a2e6:	b538      	push	{r3, r4, r5, lr}
 801a2e8:	4605      	mov	r5, r0
 801a2ea:	460c      	mov	r4, r1
    if (a != b) {
 801a2ec:	d007      	beq.n	801a2fe <fp_init_copy+0x1a>
    fp_zero(a);
 801a2ee:	f7fe feb4 	bl	801905a <fp_zero>
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 801a2f2:	4629      	mov	r1, r5
 801a2f4:	4620      	mov	r0, r4
}
 801a2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 801a2fa:	f7fe bffa 	b.w	80192f2 <fp_copy>
}
 801a2fe:	bd38      	pop	{r3, r4, r5, pc}

0801a300 <fp_to_unsigned_bin>:
{
 801a300:	b570      	push	{r4, r5, r6, lr}
 801a302:	4606      	mov	r6, r0
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a304:	2068      	movs	r0, #104	; 0x68
{
 801a306:	460d      	mov	r5, r1
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a308:	f000 fe4a 	bl	801afa0 <malloc>
   if (t == NULL)
 801a30c:	4604      	mov	r4, r0
 801a30e:	b180      	cbz	r0, 801a332 <fp_to_unsigned_bin+0x32>
  fp_init_copy(t, a);
 801a310:	4631      	mov	r1, r6
 801a312:	f7ff ffe7 	bl	801a2e4 <fp_init_copy>
  x = fp_to_unsigned_bin_at_pos(0, t, b);
 801a316:	462a      	mov	r2, r5
 801a318:	4621      	mov	r1, r4
 801a31a:	2000      	movs	r0, #0
 801a31c:	f7fe fe06 	bl	8018f2c <fp_to_unsigned_bin_at_pos>
 801a320:	4601      	mov	r1, r0
  mp_reverse (b, x);
 801a322:	4628      	mov	r0, r5
 801a324:	f000 fa47 	bl	801a7b6 <mp_reverse>
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801a328:	4620      	mov	r0, r4
 801a32a:	f000 fe41 	bl	801afb0 <free>
  return FP_OKAY;
 801a32e:	2000      	movs	r0, #0
}
 801a330:	bd70      	pop	{r4, r5, r6, pc}
       return FP_MEM;
 801a332:	f06f 0001 	mvn.w	r0, #1
 801a336:	e7fb      	b.n	801a330 <fp_to_unsigned_bin+0x30>

0801a338 <mp_to_unsigned_bin>:
  return fp_to_unsigned_bin(a,b);
 801a338:	f7ff bfe2 	b.w	801a300 <fp_to_unsigned_bin>

0801a33c <mp_copy>:
{
 801a33c:	b508      	push	{r3, lr}
    fp_copy(a, b);
 801a33e:	f7fe ffd8 	bl	80192f2 <fp_copy>
}
 801a342:	2000      	movs	r0, #0
 801a344:	bd08      	pop	{r3, pc}

0801a346 <mp_iszero>:
    return fp_iszero(a);
 801a346:	6800      	ldr	r0, [r0, #0]
}
 801a348:	fab0 f080 	clz	r0, r0
 801a34c:	0940      	lsrs	r0, r0, #5
 801a34e:	4770      	bx	lr

0801a350 <mp_count_bits>:
    return fp_count_bits(a);
 801a350:	f7fe be24 	b.w	8018f9c <fp_count_bits>

0801a354 <mp_leading_bit>:
    return fp_leading_bit(a);
 801a354:	f7fe be3c 	b.w	8018fd0 <fp_leading_bit>

0801a358 <mp_rshb>:
    fp_rshb(a, x);
 801a358:	f7fe bf2c 	b.w	80191b4 <fp_rshb>

0801a35c <mp_montgomery_calc_normalization>:
    return fp_montgomery_calc_normalization(a, b);
 801a35c:	f7fe bec8 	b.w	80190f0 <fp_montgomery_calc_normalization>

0801a360 <mp_cond_swap_ct_ex>:
#endif /* !NO_RSA || !NO_DSA || !NO_DH || WOLFSSL_KEY_GEN */


int mp_cond_swap_ct_ex(mp_int* a, mp_int* b, int c, int m, mp_int* t)
{
    return fp_cond_swap_ct_ex(a, b, c, m, t);
 801a360:	f7fd bd95 	b.w	8017e8e <fp_cond_swap_ct_ex>

0801a364 <fp_add_d>:
#if defined(HAVE_ECC) || !defined(NO_PWDBASED) || defined(OPENSSL_EXTRA) || \
    defined(WC_RSA_BLINDING) || !defined(NO_DSA) || \
    (!defined(NO_RSA) && !defined(NO_RSA_BOUNDS_CHECK))
/* c = a + b */
int fp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 801a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a366:	4605      	mov	r5, r0
   fp_int* tmp;
#endif
   int     err;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a368:	2068      	movs	r0, #104	; 0x68
{
 801a36a:	460f      	mov	r7, r1
 801a36c:	4616      	mov	r6, r2
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a36e:	f000 fe17 	bl	801afa0 <malloc>
 801a372:	4604      	mov	r4, r0
   if (tmp == NULL)
 801a374:	b180      	cbz	r0, 801a398 <fp_add_d+0x34>
    fp_zero(a);
 801a376:	f7fe fe70 	bl	801905a <fp_zero>
       return FP_MEM;
#endif

   fp_init(tmp);
   fp_set(tmp, b);
 801a37a:	4639      	mov	r1, r7
 801a37c:	4620      	mov	r0, r4
 801a37e:	f7fe feac 	bl	80190da <fp_set>
   err = fp_add(a, tmp, c);
 801a382:	4628      	mov	r0, r5
 801a384:	4632      	mov	r2, r6
 801a386:	4621      	mov	r1, r4
 801a388:	f7fe fcb5 	bl	8018cf6 <fp_add>
 801a38c:	4605      	mov	r5, r0

#ifdef WOLFSSL_SMALL_STACK
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 801a38e:	4620      	mov	r0, r4
 801a390:	f000 fe0e 	bl	801afb0 <free>
#endif
   return err;
}
 801a394:	4628      	mov	r0, r5
 801a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       return FP_MEM;
 801a398:	f06f 0501 	mvn.w	r5, #1
 801a39c:	e7fa      	b.n	801a394 <fp_add_d+0x30>
	...

0801a3a0 <mp_read_radix>:
  return FP_OKAY;
}

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
 801a3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3a4:	4690      	mov	r8, r2
 801a3a6:	4604      	mov	r4, r0
 801a3a8:	460d      	mov	r5, r1
  fp_zero (a);
 801a3aa:	f7fe fe56 	bl	801905a <fp_zero>
  if (radix == 16)
 801a3ae:	f1b8 0f10 	cmp.w	r8, #16
 801a3b2:	d146      	bne.n	801a442 <mp_read_radix+0xa2>
  if (*str == '-') {
 801a3b4:	782b      	ldrb	r3, [r5, #0]
 801a3b6:	2b2d      	cmp	r3, #45	; 0x2d
    ++str;
 801a3b8:	bf08      	it	eq
 801a3ba:	3501      	addeq	r5, #1
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801a3bc:	4628      	mov	r0, r5
    neg = FP_NEG;
 801a3be:	bf0c      	ite	eq
 801a3c0:	2601      	moveq	r6, #1
    neg = FP_ZPOS;
 801a3c2:	2600      	movne	r6, #0
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801a3c4:	f000 ff8f 	bl	801b2e6 <strlen>
  k = 0;
 801a3c8:	2200      	movs	r2, #0
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801a3ca:	3801      	subs	r0, #1
  j = 0;
 801a3cc:	4611      	mov	r1, r2
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	da0d      	bge.n	801a3ee <mp_read_radix+0x4e>
  a->used = k + 1;
 801a3d2:	3201      	adds	r2, #1
  fp_clamp(a);
 801a3d4:	6022      	str	r2, [r4, #0]
 801a3d6:	6823      	ldr	r3, [r4, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d06f      	beq.n	801a4bc <mp_read_radix+0x11c>
 801a3dc:	1e5a      	subs	r2, r3, #1
 801a3de:	3301      	adds	r3, #1
 801a3e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d0f5      	beq.n	801a3d4 <mp_read_radix+0x34>
     a->sign = neg;
 801a3e8:	6066      	str	r6, [r4, #4]
  return FP_OKAY;
 801a3ea:	2000      	movs	r0, #0
 801a3ec:	e025      	b.n	801a43a <mp_read_radix+0x9a>
      ch = (int)HexCharToByte(str[i]);
 801a3ee:	5c2b      	ldrb	r3, [r5, r0]
#endif

WC_MISC_STATIC WC_INLINE signed char HexCharToByte(char ch)
{
    signed char ret = (signed char)ch;
    if (ret >= '0' && ret <= '9')
 801a3f0:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801a3f4:	b2ff      	uxtb	r7, r7
 801a3f6:	2f09      	cmp	r7, #9
 801a3f8:	d812      	bhi.n	801a420 <mp_read_radix+0x80>
        ret -= '0';
 801a3fa:	b27b      	sxtb	r3, r7
      k += j == DIGIT_BIT;
 801a3fc:	2920      	cmp	r1, #32
 801a3fe:	bf08      	it	eq
 801a400:	3201      	addeq	r2, #1
      if (k >= FP_SIZE)
 801a402:	2a17      	cmp	r2, #23
      j &= DIGIT_BIT - 1;
 801a404:	f001 011f 	and.w	r1, r1, #31
      if (k >= FP_SIZE)
 801a408:	dc15      	bgt.n	801a436 <mp_read_radix+0x96>
      a->dp[k] |= ((fp_digit)ch) << j;
 801a40a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801a40e:	408b      	lsls	r3, r1
 801a410:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801a414:	433b      	orrs	r3, r7
 801a416:	f8cc 3008 	str.w	r3, [ip, #8]
      j += 4;
 801a41a:	3104      	adds	r1, #4
  for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
 801a41c:	3801      	subs	r0, #1
 801a41e:	e7d6      	b.n	801a3ce <mp_read_radix+0x2e>
    else if (ret >= 'A' && ret <= 'F')
 801a420:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 801a424:	2f05      	cmp	r7, #5
 801a426:	d802      	bhi.n	801a42e <mp_read_radix+0x8e>
        ret -= 'A' - 10;
 801a428:	3b37      	subs	r3, #55	; 0x37
    else if (ret >= 'a' && ret <= 'f')
        ret -= 'a' - 10;
 801a42a:	b25b      	sxtb	r3, r3
 801a42c:	e7e6      	b.n	801a3fc <mp_read_radix+0x5c>
    else if (ret >= 'a' && ret <= 'f')
 801a42e:	f1a3 0761 	sub.w	r7, r3, #97	; 0x61
 801a432:	2f05      	cmp	r7, #5
 801a434:	d903      	bls.n	801a43e <mp_read_radix+0x9e>
        return FP_VAL;
 801a436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return fp_read_radix(a, str, radix);
}
 801a43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret -= 'a' - 10;
 801a43e:	3b57      	subs	r3, #87	; 0x57
 801a440:	e7f3      	b.n	801a42a <mp_read_radix+0x8a>
  if (radix < 2 || radix > 64) {
 801a442:	f1a8 0302 	sub.w	r3, r8, #2
 801a446:	2b3e      	cmp	r3, #62	; 0x3e
 801a448:	d8f5      	bhi.n	801a436 <mp_read_radix+0x96>
  if (*str == '-') {
 801a44a:	782b      	ldrb	r3, [r5, #0]
 801a44c:	2b2d      	cmp	r3, #45	; 0x2d
 801a44e:	d133      	bne.n	801a4b8 <mp_read_radix+0x118>
    ++str;
 801a450:	3501      	adds	r5, #1
    neg = FP_NEG;
 801a452:	2601      	movs	r6, #1
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
 801a454:	4f1a      	ldr	r7, [pc, #104]	; (801a4c0 <mp_read_radix+0x120>)
 801a456:	3d01      	subs	r5, #1
 801a458:	e025      	b.n	801a4a6 <mp_read_radix+0x106>
 801a45a:	f1b8 0f24 	cmp.w	r8, #36	; 0x24
 801a45e:	dc06      	bgt.n	801a46e <mp_read_radix+0xce>
 801a460:	5c3b      	ldrb	r3, [r7, r0]
 801a462:	f003 0303 	and.w	r3, r3, #3
 801a466:	2b02      	cmp	r3, #2
 801a468:	bf08      	it	eq
 801a46a:	3820      	subeq	r0, #32
 801a46c:	b2c0      	uxtb	r0, r0
    for (y = 0; y < 64; y++) {
 801a46e:	4b15      	ldr	r3, [pc, #84]	; (801a4c4 <mp_read_radix+0x124>)
 801a470:	f04f 0900 	mov.w	r9, #0
      if (ch == fp_s_rmap[y]) {
 801a474:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a478:	4282      	cmp	r2, r0
 801a47a:	d005      	beq.n	801a488 <mp_read_radix+0xe8>
    for (y = 0; y < 64; y++) {
 801a47c:	f109 0901 	add.w	r9, r9, #1
 801a480:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 801a484:	d1f6      	bne.n	801a474 <mp_read_radix+0xd4>
 801a486:	e7d6      	b.n	801a436 <mp_read_radix+0x96>
    if (y >= radix) {
 801a488:	45c8      	cmp	r8, r9
 801a48a:	ddd4      	ble.n	801a436 <mp_read_radix+0x96>
      int ret = fp_mul_d (a, (fp_digit) radix, a);
 801a48c:	4622      	mov	r2, r4
 801a48e:	4641      	mov	r1, r8
 801a490:	4620      	mov	r0, r4
 801a492:	f7fe fa8c 	bl	80189ae <fp_mul_d>
      if (ret != FP_OKAY)
 801a496:	2800      	cmp	r0, #0
 801a498:	d1cf      	bne.n	801a43a <mp_read_radix+0x9a>
      ret = fp_add_d (a, (fp_digit) y, a);
 801a49a:	4649      	mov	r1, r9
 801a49c:	4620      	mov	r0, r4
 801a49e:	f7ff ff61 	bl	801a364 <fp_add_d>
      if (ret != FP_OKAY)
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d1c9      	bne.n	801a43a <mp_read_radix+0x9a>
  while (*str) {
 801a4a6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801a4aa:	2800      	cmp	r0, #0
 801a4ac:	d1d5      	bne.n	801a45a <mp_read_radix+0xba>
  if (fp_iszero(a) != FP_YES) {
 801a4ae:	6823      	ldr	r3, [r4, #0]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d09a      	beq.n	801a3ea <mp_read_radix+0x4a>
     a->sign = neg;
 801a4b4:	6066      	str	r6, [r4, #4]
    return fp_read_radix(a, str, radix);
 801a4b6:	e7c0      	b.n	801a43a <mp_read_radix+0x9a>
    neg = FP_ZPOS;
 801a4b8:	2600      	movs	r6, #0
 801a4ba:	e7cb      	b.n	801a454 <mp_read_radix+0xb4>
  fp_clamp(a);
 801a4bc:	6063      	str	r3, [r4, #4]
 801a4be:	e794      	b.n	801a3ea <mp_read_radix+0x4a>
 801a4c0:	0802ad55 	.word	0x0802ad55
 801a4c4:	0802ad08 	.word	0x0802ad08

0801a4c8 <mp_sqr>:
#ifdef HAVE_ECC

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
    return fp_sqr(A, B);
 801a4c8:	f7ff bd8a 	b.w	8019fe0 <fp_sqr>

0801a4cc <mp_montgomery_reduce>:
}

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
    return fp_montgomery_reduce(a, m, mp);
 801a4cc:	f7fe bd2b 	b.w	8018f26 <fp_montgomery_reduce>

0801a4d0 <mp_montgomery_setup>:


/* fast math conversion */
int mp_montgomery_setup(fp_int *a, fp_digit *rho)
{
    return fp_montgomery_setup(a, rho);
 801a4d0:	f7fe bc69 	b.w	8018da6 <fp_montgomery_setup>

0801a4d4 <mp_div_2_mod_ct>:
}

/* c = a / 2 (mod b) - constant time (a < b and positive) */
int mp_div_2_mod_ct(mp_int *a, mp_int *b, mp_int *c)
{
  return fp_div_2_mod_ct(a, b, c);
 801a4d4:	f7fe badf 	b.w	8018a96 <fp_div_2_mod_ct>

0801a4d8 <mp_set>:

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA) || \
    defined(WOLFSSL_KEY_GEN)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
 801a4d8:	b508      	push	{r3, lr}
    fp_set(a,b);
 801a4da:	f7fe fdfe 	bl	80190da <fp_set>
    return MP_OKAY;
}
 801a4de:	2000      	movs	r0, #0
 801a4e0:	bd08      	pop	{r3, pc}

0801a4e2 <mp_radix_size>:

#ifdef WC_MP_TO_RADIX

/* returns size of ASCII representation */
int mp_radix_size (mp_int *a, int radix, int *size)
{
 801a4e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#endif

    *size = 0;

    /* special case for binary */
    if (radix == 2) {
 801a4e6:	2902      	cmp	r1, #2
    *size = 0;
 801a4e8:	f04f 0400 	mov.w	r4, #0
{
 801a4ec:	4681      	mov	r9, r0
 801a4ee:	460f      	mov	r7, r1
 801a4f0:	4690      	mov	r8, r2
    *size = 0;
 801a4f2:	6014      	str	r4, [r2, #0]
    if (radix == 2) {
 801a4f4:	d113      	bne.n	801a51e <mp_radix_size+0x3c>
        *size = fp_count_bits(a);
 801a4f6:	f7fe fd51 	bl	8018f9c <fp_count_bits>
        if (*size == 0)
          *size = 1;
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	bf08      	it	eq
 801a4fe:	2001      	moveq	r0, #1
 801a500:	f8c8 0000 	str.w	r0, [r8]
        *size += (a->sign == FP_NEG ? 1 : 0) + 1; /* "-" sign + null term */
 801a504:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a508:	2b01      	cmp	r3, #1
 801a50a:	bf18      	it	ne
 801a50c:	2701      	movne	r7, #1
 801a50e:	4438      	add	r0, r7
 801a510:	f8c8 0000 	str.w	r0, [r8]
        return FP_OKAY;
 801a514:	4626      	mov	r6, r4
    *size = digs + 1;
#ifdef WOLFSSL_SMALL_STACK
    XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
#endif
    return FP_OKAY;
}
 801a516:	4630      	mov	r0, r6
 801a518:	b003      	add	sp, #12
 801a51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (radix < 2 || radix > 64) {
 801a51e:	1e8b      	subs	r3, r1, #2
 801a520:	2b3e      	cmp	r3, #62	; 0x3e
 801a522:	d837      	bhi.n	801a594 <mp_radix_size+0xb2>
    if (fp_iszero(a) == MP_YES) {
 801a524:	6806      	ldr	r6, [r0, #0]
 801a526:	b92e      	cbnz	r6, 801a534 <mp_radix_size+0x52>
        if (radix == 16)
 801a528:	2910      	cmp	r1, #16
            *size = 3;
 801a52a:	bf0c      	ite	eq
 801a52c:	2303      	moveq	r3, #3
            *size = 2;
 801a52e:	2302      	movne	r3, #2
 801a530:	6013      	str	r3, [r2, #0]
 801a532:	e7f0      	b.n	801a516 <mp_radix_size+0x34>
    t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a534:	2068      	movs	r0, #104	; 0x68
 801a536:	f000 fd33 	bl	801afa0 <malloc>
    if (t == NULL)
 801a53a:	4605      	mov	r5, r0
 801a53c:	b368      	cbz	r0, 801a59a <mp_radix_size+0xb8>
    fp_zero(a);
 801a53e:	f7fe fd8c 	bl	801905a <fp_zero>
    fp_copy(a, t); /* copy (src = a) to (dst = t)*/
 801a542:	4629      	mov	r1, r5
 801a544:	4648      	mov	r0, r9
 801a546:	f7fe fed4 	bl	80192f2 <fp_copy>
    t->sign = FP_ZPOS;
 801a54a:	606c      	str	r4, [r5, #4]
    while (fp_iszero (t) == FP_NO) {
 801a54c:	682e      	ldr	r6, [r5, #0]
 801a54e:	b986      	cbnz	r6, 801a572 <mp_radix_size+0x90>
    fp_zero (t);
 801a550:	4628      	mov	r0, r5
 801a552:	f7fe fd82 	bl	801905a <fp_zero>
    if ((digs & 1) && (radix == 16)) {
 801a556:	07e3      	lsls	r3, r4, #31
 801a558:	d502      	bpl.n	801a560 <mp_radix_size+0x7e>
 801a55a:	2f10      	cmp	r7, #16
        ++digs;
 801a55c:	bf08      	it	eq
 801a55e:	3401      	addeq	r4, #1
    if (a->sign == FP_NEG) {
 801a560:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a564:	2b01      	cmp	r3, #1
        ++digs;
 801a566:	bf08      	it	eq
 801a568:	3401      	addeq	r4, #1
    *size = digs + 1;
 801a56a:	3401      	adds	r4, #1
 801a56c:	f8c8 4000 	str.w	r4, [r8]
 801a570:	e00a      	b.n	801a588 <mp_radix_size+0xa6>
        if ((res = fp_div_d (t, (mp_digit) radix, t, &d)) != FP_OKAY) {
 801a572:	ab01      	add	r3, sp, #4
 801a574:	462a      	mov	r2, r5
 801a576:	4639      	mov	r1, r7
 801a578:	4628      	mov	r0, r5
 801a57a:	f7ff fe2a 	bl	801a1d2 <fp_div_d>
 801a57e:	4606      	mov	r6, r0
 801a580:	b130      	cbz	r0, 801a590 <mp_radix_size+0xae>
            fp_zero (t);
 801a582:	4628      	mov	r0, r5
 801a584:	f7fe fd69 	bl	801905a <fp_zero>
    XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801a588:	4628      	mov	r0, r5
 801a58a:	f000 fd11 	bl	801afb0 <free>
    return FP_OKAY;
 801a58e:	e7c2      	b.n	801a516 <mp_radix_size+0x34>
        ++digs;
 801a590:	3401      	adds	r4, #1
 801a592:	e7db      	b.n	801a54c <mp_radix_size+0x6a>
        return FP_VAL;
 801a594:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801a598:	e7bd      	b.n	801a516 <mp_radix_size+0x34>
        return FP_MEM;
 801a59a:	f06f 0601 	mvn.w	r6, #1
 801a59e:	e7ba      	b.n	801a516 <mp_radix_size+0x34>

0801a5a0 <mp_toradix>:
#else
    fp_int   *t;
#endif

    /* check range of the radix */
    if (radix < 2 || radix > 64) {
 801a5a0:	1e93      	subs	r3, r2, #2
 801a5a2:	2b3e      	cmp	r3, #62	; 0x3e
{
 801a5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a5a8:	4606      	mov	r6, r0
 801a5aa:	460c      	mov	r4, r1
 801a5ac:	4617      	mov	r7, r2
    if (radix < 2 || radix > 64) {
 801a5ae:	d84e      	bhi.n	801a64e <mp_toradix+0xae>
        return FP_VAL;
    }

    /* quick out if its zero */
    if (fp_iszero(a) == FP_YES) {
 801a5b0:	6805      	ldr	r5, [r0, #0]
 801a5b2:	b965      	cbnz	r5, 801a5ce <mp_toradix+0x2e>
#ifndef WC_DISABLE_RADIX_ZERO_PAD
        if (radix == 16)
 801a5b4:	2a10      	cmp	r2, #16
            *str++ = '0';
 801a5b6:	bf04      	itt	eq
 801a5b8:	2330      	moveq	r3, #48	; 0x30
 801a5ba:	f804 3b01 	strbeq.w	r3, [r4], #1
#endif
        *str++ = '0';
 801a5be:	2330      	movs	r3, #48	; 0x30
 801a5c0:	7023      	strb	r3, [r4, #0]
        *str = '\0';
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	7063      	strb	r3, [r4, #1]
    fp_zero (t);
#ifdef WOLFSSL_SMALL_STACK
    XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
#endif
    return FP_OKAY;
}
 801a5c6:	4628      	mov	r0, r5
 801a5c8:	b003      	add	sp, #12
 801a5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 801a5ce:	2068      	movs	r0, #104	; 0x68
 801a5d0:	f000 fce6 	bl	801afa0 <malloc>
    if (t == NULL)
 801a5d4:	4680      	mov	r8, r0
 801a5d6:	2800      	cmp	r0, #0
 801a5d8:	d03c      	beq.n	801a654 <mp_toradix+0xb4>
    fp_zero(a);
 801a5da:	f7fe fd3e 	bl	801905a <fp_zero>
    fp_copy(a, t); /* copy (src = a) to (dst = t) */
 801a5de:	4630      	mov	r0, r6
 801a5e0:	4641      	mov	r1, r8
 801a5e2:	f7fe fe86 	bl	80192f2 <fp_copy>
    if (t->sign == FP_NEG) {
 801a5e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
        *str++ = fp_s_rmap[d];
 801a5ea:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801a65c <mp_toradix+0xbc>
    if (t->sign == FP_NEG) {
 801a5ee:	2b01      	cmp	r3, #1
        *str++ = '-';
 801a5f0:	bf01      	itttt	eq
 801a5f2:	232d      	moveq	r3, #45	; 0x2d
 801a5f4:	f804 3b01 	strbeq.w	r3, [r4], #1
        t->sign = FP_ZPOS;
 801a5f8:	2300      	moveq	r3, #0
 801a5fa:	f8c8 3004 	streq.w	r3, [r8, #4]
    while (fp_iszero (t) == FP_NO) {
 801a5fe:	4626      	mov	r6, r4
 801a600:	f8d8 5000 	ldr.w	r5, [r8]
 801a604:	1b31      	subs	r1, r6, r4
 801a606:	b96d      	cbnz	r5, 801a624 <mp_toradix+0x84>
    if ((digs & 1) && (radix == 16)) {
 801a608:	07cb      	lsls	r3, r1, #31
 801a60a:	d505      	bpl.n	801a618 <mp_toradix+0x78>
 801a60c:	2f10      	cmp	r7, #16
        *str++ = fp_s_rmap[0];
 801a60e:	bf02      	ittt	eq
 801a610:	2330      	moveq	r3, #48	; 0x30
 801a612:	f806 3b01 	strbeq.w	r3, [r6], #1
        ++digs;
 801a616:	3101      	addeq	r1, #1
    mp_reverse ((unsigned char *)_s, digs);
 801a618:	4620      	mov	r0, r4
 801a61a:	f000 f8cc 	bl	801a7b6 <mp_reverse>
    *str = '\0';
 801a61e:	2300      	movs	r3, #0
 801a620:	7033      	strb	r3, [r6, #0]
 801a622:	e007      	b.n	801a634 <mp_toradix+0x94>
        if ((res = fp_div_d (t, (fp_digit) radix, t, &d)) != FP_OKAY) {
 801a624:	ab01      	add	r3, sp, #4
 801a626:	4642      	mov	r2, r8
 801a628:	4639      	mov	r1, r7
 801a62a:	4640      	mov	r0, r8
 801a62c:	f7ff fdd1 	bl	801a1d2 <fp_div_d>
 801a630:	4605      	mov	r5, r0
 801a632:	b130      	cbz	r0, 801a642 <mp_toradix+0xa2>
    fp_zero (t);
 801a634:	4640      	mov	r0, r8
 801a636:	f7fe fd10 	bl	801905a <fp_zero>
    XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 801a63a:	4640      	mov	r0, r8
 801a63c:	f000 fcb8 	bl	801afb0 <free>
    return FP_OKAY;
 801a640:	e7c1      	b.n	801a5c6 <mp_toradix+0x26>
        *str++ = fp_s_rmap[d];
 801a642:	9b01      	ldr	r3, [sp, #4]
 801a644:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a648:	f806 3b01 	strb.w	r3, [r6], #1
        ++digs;
 801a64c:	e7d8      	b.n	801a600 <mp_toradix+0x60>
        return FP_VAL;
 801a64e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a652:	e7b8      	b.n	801a5c6 <mp_toradix+0x26>
        return FP_MEM;
 801a654:	f06f 0501 	mvn.w	r5, #1
 801a658:	e7b5      	b.n	801a5c6 <mp_toradix+0x26>
 801a65a:	bf00      	nop
 801a65c:	0802ad08 	.word	0x0802ad08

0801a660 <wc_AesCbcDecryptWithKey>:

#if !defined(NO_AES) && defined(HAVE_AES_CBC)
#ifdef HAVE_AES_DECRYPT
int wc_AesCbcDecryptWithKey(byte* out, const byte* in, word32 inSz,
                                  const byte* key, word32 keySz, const byte* iv)
{
 801a660:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a664:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801a668:	460f      	mov	r7, r1
 801a66a:	4691      	mov	r9, r2
 801a66c:	4698      	mov	r8, r3
    Aes* aes = NULL;
#else
    Aes  aes[1];
#endif

    if (out == NULL || in == NULL || key == NULL || iv == NULL) {
 801a66e:	4606      	mov	r6, r0
 801a670:	b360      	cbz	r0, 801a6cc <wc_AesCbcDecryptWithKey+0x6c>
 801a672:	b359      	cbz	r1, 801a6cc <wc_AesCbcDecryptWithKey+0x6c>
 801a674:	b353      	cbz	r3, 801a6cc <wc_AesCbcDecryptWithKey+0x6c>
 801a676:	f1ba 0f00 	cmp.w	sl, #0
 801a67a:	d027      	beq.n	801a6cc <wc_AesCbcDecryptWithKey+0x6c>
        return BAD_FUNC_ARG;
    }

#ifdef WOLFSSL_SMALL_STACK
    aes = (Aes*)XMALLOC(sizeof(Aes), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a67c:	f44f 709c 	mov.w	r0, #312	; 0x138
 801a680:	f000 fc8e 	bl	801afa0 <malloc>
    if (aes == NULL)
 801a684:	4605      	mov	r5, r0
 801a686:	b320      	cbz	r0, 801a6d2 <wc_AesCbcDecryptWithKey+0x72>
        return MEMORY_E;
#endif

    ret = wc_AesInit(aes, NULL, INVALID_DEVID);
 801a688:	f06f 0201 	mvn.w	r2, #1
 801a68c:	2100      	movs	r1, #0
 801a68e:	f7ee f9d8 	bl	8008a42 <wc_AesInit>
    if (ret == 0) {
 801a692:	4604      	mov	r4, r0
 801a694:	b998      	cbnz	r0, 801a6be <wc_AesCbcDecryptWithKey+0x5e>
        ret = wc_AesSetKey(aes, key, keySz, iv, AES_DECRYPTION);
 801a696:	2301      	movs	r3, #1
 801a698:	9300      	str	r3, [sp, #0]
 801a69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a69c:	4653      	mov	r3, sl
 801a69e:	4641      	mov	r1, r8
 801a6a0:	4628      	mov	r0, r5
 801a6a2:	f7ec fcff 	bl	80070a4 <wc_AesSetKey>
        if (ret == 0)
 801a6a6:	4604      	mov	r4, r0
 801a6a8:	b930      	cbnz	r0, 801a6b8 <wc_AesCbcDecryptWithKey+0x58>
            ret = wc_AesCbcDecrypt(aes, out, in, inSz);
 801a6aa:	464b      	mov	r3, r9
 801a6ac:	463a      	mov	r2, r7
 801a6ae:	4631      	mov	r1, r6
 801a6b0:	4628      	mov	r0, r5
 801a6b2:	f7ec ff51 	bl	8007558 <wc_AesCbcDecrypt>
 801a6b6:	4604      	mov	r4, r0

        wc_AesFree(aes);
 801a6b8:	4628      	mov	r0, r5
 801a6ba:	f7ee f9ca 	bl	8008a52 <wc_AesFree>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(aes, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a6be:	4628      	mov	r0, r5
 801a6c0:	f000 fc76 	bl	801afb0 <free>
#endif

    return ret;
}
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	b002      	add	sp, #8
 801a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BAD_FUNC_ARG;
 801a6cc:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 801a6d0:	e7f8      	b.n	801a6c4 <wc_AesCbcDecryptWithKey+0x64>
        return MEMORY_E;
 801a6d2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801a6d6:	e7f5      	b.n	801a6c4 <wc_AesCbcDecryptWithKey+0x64>

0801a6d8 <wc_AesCbcEncryptWithKey>:
#endif /* HAVE_AES_DECRYPT */

int wc_AesCbcEncryptWithKey(byte* out, const byte* in, word32 inSz,
                            const byte* key, word32 keySz, const byte* iv)
{
 801a6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a6dc:	4606      	mov	r6, r0
#else
    Aes  aes[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
    aes = (Aes*)XMALLOC(sizeof(Aes), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a6de:	f44f 709c 	mov.w	r0, #312	; 0x138
{
 801a6e2:	460f      	mov	r7, r1
 801a6e4:	4690      	mov	r8, r2
 801a6e6:	4699      	mov	r9, r3
    aes = (Aes*)XMALLOC(sizeof(Aes), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a6e8:	f000 fc5a 	bl	801afa0 <malloc>
    if (aes == NULL)
 801a6ec:	4605      	mov	r5, r0
 801a6ee:	b300      	cbz	r0, 801a732 <wc_AesCbcEncryptWithKey+0x5a>
        return MEMORY_E;
#endif

    ret = wc_AesInit(aes, NULL, INVALID_DEVID);
 801a6f0:	f06f 0201 	mvn.w	r2, #1
 801a6f4:	2100      	movs	r1, #0
 801a6f6:	f7ee f9a4 	bl	8008a42 <wc_AesInit>
    if (ret == 0) {
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	b990      	cbnz	r0, 801a724 <wc_AesCbcEncryptWithKey+0x4c>
        ret = wc_AesSetKey(aes, key, keySz, iv, AES_ENCRYPTION);
 801a6fe:	9000      	str	r0, [sp, #0]
 801a700:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a704:	4649      	mov	r1, r9
 801a706:	4628      	mov	r0, r5
 801a708:	f7ec fccc 	bl	80070a4 <wc_AesSetKey>
        if (ret == 0)
 801a70c:	4604      	mov	r4, r0
 801a70e:	b930      	cbnz	r0, 801a71e <wc_AesCbcEncryptWithKey+0x46>
            ret = wc_AesCbcEncrypt(aes, out, in, inSz);
 801a710:	4643      	mov	r3, r8
 801a712:	463a      	mov	r2, r7
 801a714:	4631      	mov	r1, r6
 801a716:	4628      	mov	r0, r5
 801a718:	f7ec fef4 	bl	8007504 <wc_AesCbcEncrypt>
 801a71c:	4604      	mov	r4, r0

        wc_AesFree(aes);
 801a71e:	4628      	mov	r0, r5
 801a720:	f7ee f997 	bl	8008a52 <wc_AesFree>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(aes, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a724:	4628      	mov	r0, r5
 801a726:	f000 fc43 	bl	801afb0 <free>
#endif

    return ret;
}
 801a72a:	4620      	mov	r0, r4
 801a72c:	b003      	add	sp, #12
 801a72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return MEMORY_E;
 801a732:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801a736:	e7f8      	b.n	801a72a <wc_AesCbcEncryptWithKey+0x52>

0801a738 <wc_Des_CbcEncryptWithKey>:


#if !defined(NO_DES3) && !defined(WOLFSSL_TI_CRYPT)
int wc_Des_CbcEncryptWithKey(byte* out, const byte* in, word32 sz,
                             const byte* key, const byte* iv)
{
 801a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a73c:	4606      	mov	r6, r0
#else
    Des  des[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
    des = (Des*)XMALLOC(sizeof(Des), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a73e:	2090      	movs	r0, #144	; 0x90
{
 801a740:	460f      	mov	r7, r1
 801a742:	4690      	mov	r8, r2
 801a744:	461c      	mov	r4, r3
    des = (Des*)XMALLOC(sizeof(Des), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a746:	f000 fc2b 	bl	801afa0 <malloc>
    if (des == NULL)
 801a74a:	4605      	mov	r5, r0
 801a74c:	b198      	cbz	r0, 801a776 <wc_Des_CbcEncryptWithKey+0x3e>
        return MEMORY_E;
#endif

    ret = wc_Des_SetKey(des, key, iv, DES_ENCRYPTION);
 801a74e:	4621      	mov	r1, r4
 801a750:	9a06      	ldr	r2, [sp, #24]
 801a752:	2300      	movs	r3, #0
 801a754:	f7ee fc99 	bl	800908a <wc_Des_SetKey>
    if (ret == 0)
 801a758:	4604      	mov	r4, r0
 801a75a:	b930      	cbnz	r0, 801a76a <wc_Des_CbcEncryptWithKey+0x32>
        ret = wc_Des_CbcEncrypt(des, out, in, sz);
 801a75c:	4643      	mov	r3, r8
 801a75e:	463a      	mov	r2, r7
 801a760:	4631      	mov	r1, r6
 801a762:	4628      	mov	r0, r5
 801a764:	f7ee fbf5 	bl	8008f52 <wc_Des_CbcEncrypt>
 801a768:	4604      	mov	r4, r0

#ifdef WOLFSSL_SMALL_STACK
    XFREE(des, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801a76a:	4628      	mov	r0, r5
 801a76c:	f000 fc20 	bl	801afb0 <free>
#endif

    return ret;
}
 801a770:	4620      	mov	r0, r4
 801a772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return MEMORY_E;
 801a776:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801a77a:	e7f9      	b.n	801a770 <wc_Des_CbcEncryptWithKey+0x38>

0801a77c <wolfCrypt_Init>:
 */
WOLFSSL_ABI
int wolfCrypt_Init(void)
{
    int ret = 0;
    if (initRefCount == 0) {
 801a77c:	4b03      	ldr	r3, [pc, #12]	; (801a78c <wolfCrypt_Init+0x10>)
 801a77e:	681a      	ldr	r2, [r3, #0]
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 801a780:	681a      	ldr	r2, [r3, #0]
 801a782:	3201      	adds	r2, #1
 801a784:	601a      	str	r2, [r3, #0]

    return ret;
}
 801a786:	2000      	movs	r0, #0
 801a788:	4770      	bx	lr
 801a78a:	bf00      	nop
 801a78c:	20000204 	.word	0x20000204

0801a790 <wolfCrypt_Cleanup>:
WOLFSSL_ABI
int wolfCrypt_Cleanup(void)
{
    int ret = 0;

    initRefCount--;
 801a790:	4b05      	ldr	r3, [pc, #20]	; (801a7a8 <wolfCrypt_Cleanup+0x18>)
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	3a01      	subs	r2, #1
 801a796:	601a      	str	r2, [r3, #0]
    if (initRefCount < 0)
 801a798:	681a      	ldr	r2, [r3, #0]
 801a79a:	2a00      	cmp	r2, #0
        initRefCount = 0;
 801a79c:	bfbc      	itt	lt
 801a79e:	2200      	movlt	r2, #0
 801a7a0:	601a      	strlt	r2, [r3, #0]

    if (initRefCount == 0) {
 801a7a2:	681b      	ldr	r3, [r3, #0]
        wc_MemZero_Free();
    #endif
    }

    return ret;
}
 801a7a4:	2000      	movs	r0, #0
 801a7a6:	4770      	bx	lr
 801a7a8:	20000204 	.word	0x20000204

0801a7ac <wc_InitAndAllocMutex>:
#endif /* !NO_FILESYSTEM && !WOLFSSL_ZEPHYR */

#if !defined(WOLFSSL_USER_MUTEX)
wolfSSL_Mutex* wc_InitAndAllocMutex(void)
{
    wolfSSL_Mutex* m = (wolfSSL_Mutex*) XMALLOC(sizeof(wolfSSL_Mutex), NULL,
 801a7ac:	2004      	movs	r0, #4
 801a7ae:	f000 bbf7 	b.w	801afa0 <malloc>

0801a7b2 <wc_FreeMutex>:
 801a7b2:	2000      	movs	r0, #0
 801a7b4:	4770      	bx	lr

0801a7b6 <mp_reverse>:
#endif


/* reverse an array, used for radix code */
void mp_reverse(unsigned char *s, int len)
{
 801a7b6:	b530      	push	{r4, r5, lr}
    int ix, iy;

    if (s == NULL)
 801a7b8:	b130      	cbz	r0, 801a7c8 <mp_reverse+0x12>
        return;

    ix = 0;
    iy = len - 1;
    while (ix < iy) {
 801a7ba:	1e42      	subs	r2, r0, #1
    ix = 0;
 801a7bc:	2300      	movs	r3, #0
 801a7be:	4408      	add	r0, r1
    while (ix < iy) {
 801a7c0:	3901      	subs	r1, #1
 801a7c2:	1acc      	subs	r4, r1, r3
 801a7c4:	42a3      	cmp	r3, r4
 801a7c6:	db00      	blt.n	801a7ca <mp_reverse+0x14>
        s[ix] = s[iy];
        s[iy] = t;
        ++ix;
        --iy;
    }
}
 801a7c8:	bd30      	pop	{r4, r5, pc}
        unsigned char t = s[ix];
 801a7ca:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        s[ix] = s[iy];
 801a7ce:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 801a7d2:	7015      	strb	r5, [r2, #0]
        ++ix;
 801a7d4:	3301      	adds	r3, #1
        s[iy] = t;
 801a7d6:	7004      	strb	r4, [r0, #0]
        --iy;
 801a7d8:	e7f3      	b.n	801a7c2 <mp_reverse+0xc>

0801a7da <get_digit_count>:

int get_digit_count(const mp_int* a)
{
    if (a == NULL)
 801a7da:	b100      	cbz	r0, 801a7de <get_digit_count+0x4>
        return 0;

    return (int)a->used;
 801a7dc:	6800      	ldr	r0, [r0, #0]
}
 801a7de:	4770      	bx	lr

0801a7e0 <get_digit>:

mp_digit get_digit(const mp_int* a, int n)
{
    if (a == NULL)
 801a7e0:	b148      	cbz	r0, 801a7f6 <get_digit+0x16>
        return 0;

    return (n < 0 || (unsigned int)n >= (unsigned int)a->used) ? 0 : a->dp[n];
 801a7e2:	2900      	cmp	r1, #0
 801a7e4:	db06      	blt.n	801a7f4 <get_digit+0x14>
 801a7e6:	6803      	ldr	r3, [r0, #0]
 801a7e8:	428b      	cmp	r3, r1
 801a7ea:	d903      	bls.n	801a7f4 <get_digit+0x14>
 801a7ec:	3102      	adds	r1, #2
 801a7ee:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801a7f2:	4770      	bx	lr
        return 0;
 801a7f4:	2000      	movs	r0, #0
}
 801a7f6:	4770      	bx	lr

0801a7f8 <mp_cond_copy>:
 * b     MP integer to copy into.
 * returns BAD_FUNC_ARG when a or b is NULL, MEMORY_E when growing b fails and
 *         MP_OKAY otherwise.
 */
int mp_cond_copy(mp_int* a, int copy, mp_int* b)
{
 801a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int err = MP_OKAY;
#if defined(SP_WORD_SIZE) && SP_WORD_SIZE == 8
    unsigned int mask = (unsigned int)0 - copy;
#else
    mp_digit mask = (mp_digit)0 - (mp_digit)copy;
 801a7fc:	424f      	negs	r7, r1
#endif

    if (a == NULL || b == NULL)
 801a7fe:	4606      	mov	r6, r0
 801a800:	2800      	cmp	r0, #0
 801a802:	d047      	beq.n	801a894 <mp_cond_copy+0x9c>
 801a804:	2a00      	cmp	r2, #0
 801a806:	d045      	beq.n	801a894 <mp_cond_copy+0x9c>
         * When mask all set, b ^ b ^ a = a
         */
        /* Conditionally copy all digits and then number of used digits.
         * get_digit() returns 0 when index greater than available digit.
         */
        for (i = 0; i < a->used; i++) {
 801a808:	6804      	ldr	r4, [r0, #0]
 801a80a:	f102 0808 	add.w	r8, r2, #8
 801a80e:	f04f 0900 	mov.w	r9, #0
 801a812:	454c      	cmp	r4, r9
 801a814:	dc18      	bgt.n	801a848 <mp_cond_copy+0x50>
 801a816:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 801a81a:	f10a 0902 	add.w	r9, sl, #2
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
        }
        for (; i < b->used; i++) {
 801a81e:	f8d2 8000 	ldr.w	r8, [r2]
 801a822:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 801a826:	45d0      	cmp	r8, sl
 801a828:	dc21      	bgt.n	801a86e <mp_cond_copy+0x76>
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
        }
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
#if (!defined(WOLFSSL_SP_MATH) && !defined(WOLFSSL_SP_MATH_ALL)) || \
    defined(WOLFSSL_SP_INT_NEGATIVE)
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801a82a:	6853      	ldr	r3, [r2, #4]
 801a82c:	6871      	ldr	r1, [r6, #4]
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801a82e:	ea84 0408 	eor.w	r4, r4, r8
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801a832:	4059      	eors	r1, r3
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801a834:	403c      	ands	r4, r7
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801a836:	400f      	ands	r7, r1
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801a838:	ea84 0408 	eor.w	r4, r4, r8
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801a83c:	405f      	eors	r7, r3
        b->used ^= (a->used ^ b->used) & (unsigned int)mask;
 801a83e:	6014      	str	r4, [r2, #0]
        b->sign ^= (a->sign ^ b->sign) & (unsigned int)mask;
 801a840:	6057      	str	r7, [r2, #4]
 801a842:	2000      	movs	r0, #0
#endif
    }

    return err;
}
 801a844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
 801a848:	4649      	mov	r1, r9
 801a84a:	4630      	mov	r0, r6
 801a84c:	f7ff ffc8 	bl	801a7e0 <get_digit>
 801a850:	4649      	mov	r1, r9
 801a852:	4605      	mov	r5, r0
 801a854:	4610      	mov	r0, r2
 801a856:	f7ff ffc3 	bl	801a7e0 <get_digit>
 801a85a:	f8d8 3000 	ldr.w	r3, [r8]
 801a85e:	4045      	eors	r5, r0
 801a860:	403d      	ands	r5, r7
 801a862:	405d      	eors	r5, r3
 801a864:	f848 5b04 	str.w	r5, [r8], #4
        for (i = 0; i < a->used; i++) {
 801a868:	f109 0901 	add.w	r9, r9, #1
 801a86c:	e7d1      	b.n	801a812 <mp_cond_copy+0x1a>
            b->dp[i] ^= (get_digit(a, (int)i) ^ get_digit(b, (int)i)) & mask;
 801a86e:	4651      	mov	r1, sl
 801a870:	4630      	mov	r0, r6
 801a872:	f7ff ffb5 	bl	801a7e0 <get_digit>
 801a876:	4651      	mov	r1, sl
 801a878:	4605      	mov	r5, r0
 801a87a:	4610      	mov	r0, r2
 801a87c:	f7ff ffb0 	bl	801a7e0 <get_digit>
 801a880:	f8d9 3000 	ldr.w	r3, [r9]
 801a884:	4045      	eors	r5, r0
 801a886:	403d      	ands	r5, r7
 801a888:	405d      	eors	r5, r3
 801a88a:	f849 5b04 	str.w	r5, [r9], #4
        for (; i < b->used; i++) {
 801a88e:	f10a 0a01 	add.w	sl, sl, #1
 801a892:	e7c8      	b.n	801a826 <mp_cond_copy+0x2e>
        err = BAD_FUNC_ARG;
 801a894:	f06f 00ac 	mvn.w	r0, #172	; 0xac
    return err;
 801a898:	e7d4      	b.n	801a844 <mp_cond_copy+0x4c>

0801a89a <wc_export_int>:
/* export an mp_int as unsigned char or hex string
 * encType is WC_TYPE_UNSIGNED_BIN or WC_TYPE_HEX_STR
 * return MP_OKAY on success */
int wc_export_int(mp_int* mp, byte* buf, word32* len, word32 keySz,
    int encType)
{
 801a89a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a89c:	461c      	mov	r4, r3
 801a89e:	460f      	mov	r7, r1
 801a8a0:	9b08      	ldr	r3, [sp, #32]
 801a8a2:	4615      	mov	r5, r2
    int err;

    if (mp == NULL || buf == NULL || len == NULL)
 801a8a4:	4606      	mov	r6, r0
 801a8a6:	b368      	cbz	r0, 801a904 <wc_export_int+0x6a>
 801a8a8:	b361      	cbz	r1, 801a904 <wc_export_int+0x6a>
 801a8aa:	b35a      	cbz	r2, 801a904 <wc_export_int+0x6a>
        return BAD_FUNC_ARG;

    if (encType == WC_TYPE_HEX_STR) {
 801a8ac:	2b01      	cmp	r3, #1
 801a8ae:	d115      	bne.n	801a8dc <wc_export_int+0x42>
        /* for WC_TYPE_HEX_STR the keySz is not used.
         * The size is computed via mp_radix_size and checked with len input */
    #ifdef WC_MP_TO_RADIX
        int size = 0;
 801a8b0:	2300      	movs	r3, #0
        err = mp_radix_size(mp, MP_RADIX_HEX, &size);
 801a8b2:	aa01      	add	r2, sp, #4
 801a8b4:	2110      	movs	r1, #16
        int size = 0;
 801a8b6:	9301      	str	r3, [sp, #4]
        err = mp_radix_size(mp, MP_RADIX_HEX, &size);
 801a8b8:	f7ff fe13 	bl	801a4e2 <mp_radix_size>
        if (err == MP_OKAY) {
 801a8bc:	b960      	cbnz	r0, 801a8d8 <wc_export_int+0x3e>
            /* make sure we can fit result */
            if (*len < (word32)size) {
 801a8be:	9b01      	ldr	r3, [sp, #4]
 801a8c0:	682a      	ldr	r2, [r5, #0]
                *len = (word32)size;
 801a8c2:	602b      	str	r3, [r5, #0]
            if (*len < (word32)size) {
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d202      	bcs.n	801a8ce <wc_export_int+0x34>
    else {
        /* for WC_TYPE_UNSIGNED_BIN keySz is used to zero pad.
         * The key size is always returned as the size */
        if (*len < keySz) {
            *len = keySz;
            return BUFFER_E;
 801a8c8:	f06f 0083 	mvn.w	r0, #131	; 0x83
 801a8cc:	e004      	b.n	801a8d8 <wc_export_int+0x3e>
            err = mp_tohex(mp, (char*)buf);
 801a8ce:	2210      	movs	r2, #16
 801a8d0:	4639      	mov	r1, r7
 801a8d2:	4630      	mov	r0, r6
 801a8d4:	f7ff fe64 	bl	801a5a0 <mp_toradix>
        err = mp_to_unsigned_bin(mp, buf +
            (keySz - (word32)mp_unsigned_bin_size(mp)));
    }

    return err;
}
 801a8d8:	b003      	add	sp, #12
 801a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (*len < keySz) {
 801a8dc:	6813      	ldr	r3, [r2, #0]
            *len = keySz;
 801a8de:	6014      	str	r4, [r2, #0]
        if (*len < keySz) {
 801a8e0:	42a3      	cmp	r3, r4
 801a8e2:	d3f1      	bcc.n	801a8c8 <wc_export_int+0x2e>
        XMEMSET(buf, 0, *len);
 801a8e4:	4622      	mov	r2, r4
 801a8e6:	2100      	movs	r1, #0
 801a8e8:	4638      	mov	r0, r7
 801a8ea:	f000 fba1 	bl	801b030 <memset>
            (keySz - (word32)mp_unsigned_bin_size(mp)));
 801a8ee:	4630      	mov	r0, r6
 801a8f0:	f7fe fcf9 	bl	80192e6 <mp_unsigned_bin_size>
 801a8f4:	1a24      	subs	r4, r4, r0
        err = mp_to_unsigned_bin(mp, buf +
 801a8f6:	1939      	adds	r1, r7, r4
 801a8f8:	4630      	mov	r0, r6
}
 801a8fa:	b003      	add	sp, #12
 801a8fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        err = mp_to_unsigned_bin(mp, buf +
 801a900:	f7ff bd1a 	b.w	801a338 <mp_to_unsigned_bin>
        return BAD_FUNC_ARG;
 801a904:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 801a908:	e7e6      	b.n	801a8d8 <wc_export_int+0x3e>
	...

0801a90c <__aeabi_uldivmod>:
 801a90c:	b953      	cbnz	r3, 801a924 <__aeabi_uldivmod+0x18>
 801a90e:	b94a      	cbnz	r2, 801a924 <__aeabi_uldivmod+0x18>
 801a910:	2900      	cmp	r1, #0
 801a912:	bf08      	it	eq
 801a914:	2800      	cmpeq	r0, #0
 801a916:	bf1c      	itt	ne
 801a918:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 801a91c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801a920:	f000 b974 	b.w	801ac0c <__aeabi_idiv0>
 801a924:	f1ad 0c08 	sub.w	ip, sp, #8
 801a928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801a92c:	f000 f806 	bl	801a93c <__udivmoddi4>
 801a930:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a938:	b004      	add	sp, #16
 801a93a:	4770      	bx	lr

0801a93c <__udivmoddi4>:
 801a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a940:	9e08      	ldr	r6, [sp, #32]
 801a942:	460d      	mov	r5, r1
 801a944:	4604      	mov	r4, r0
 801a946:	4688      	mov	r8, r1
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d14d      	bne.n	801a9e8 <__udivmoddi4+0xac>
 801a94c:	428a      	cmp	r2, r1
 801a94e:	4694      	mov	ip, r2
 801a950:	d968      	bls.n	801aa24 <__udivmoddi4+0xe8>
 801a952:	fab2 f282 	clz	r2, r2
 801a956:	b152      	cbz	r2, 801a96e <__udivmoddi4+0x32>
 801a958:	fa01 f302 	lsl.w	r3, r1, r2
 801a95c:	f1c2 0120 	rsb	r1, r2, #32
 801a960:	fa20 f101 	lsr.w	r1, r0, r1
 801a964:	fa0c fc02 	lsl.w	ip, ip, r2
 801a968:	ea41 0803 	orr.w	r8, r1, r3
 801a96c:	4094      	lsls	r4, r2
 801a96e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 801a972:	0c21      	lsrs	r1, r4, #16
 801a974:	fbb8 fef5 	udiv	lr, r8, r5
 801a978:	fa1f f78c 	uxth.w	r7, ip
 801a97c:	fb05 831e 	mls	r3, r5, lr, r8
 801a980:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a984:	fb0e f107 	mul.w	r1, lr, r7
 801a988:	4299      	cmp	r1, r3
 801a98a:	d90b      	bls.n	801a9a4 <__udivmoddi4+0x68>
 801a98c:	eb1c 0303 	adds.w	r3, ip, r3
 801a990:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 801a994:	f080 811e 	bcs.w	801abd4 <__udivmoddi4+0x298>
 801a998:	4299      	cmp	r1, r3
 801a99a:	f240 811b 	bls.w	801abd4 <__udivmoddi4+0x298>
 801a99e:	f1ae 0e02 	sub.w	lr, lr, #2
 801a9a2:	4463      	add	r3, ip
 801a9a4:	1a5b      	subs	r3, r3, r1
 801a9a6:	b2a4      	uxth	r4, r4
 801a9a8:	fbb3 f0f5 	udiv	r0, r3, r5
 801a9ac:	fb05 3310 	mls	r3, r5, r0, r3
 801a9b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801a9b4:	fb00 f707 	mul.w	r7, r0, r7
 801a9b8:	42a7      	cmp	r7, r4
 801a9ba:	d90a      	bls.n	801a9d2 <__udivmoddi4+0x96>
 801a9bc:	eb1c 0404 	adds.w	r4, ip, r4
 801a9c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a9c4:	f080 8108 	bcs.w	801abd8 <__udivmoddi4+0x29c>
 801a9c8:	42a7      	cmp	r7, r4
 801a9ca:	f240 8105 	bls.w	801abd8 <__udivmoddi4+0x29c>
 801a9ce:	4464      	add	r4, ip
 801a9d0:	3802      	subs	r0, #2
 801a9d2:	1be4      	subs	r4, r4, r7
 801a9d4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801a9d8:	2100      	movs	r1, #0
 801a9da:	b11e      	cbz	r6, 801a9e4 <__udivmoddi4+0xa8>
 801a9dc:	40d4      	lsrs	r4, r2
 801a9de:	2300      	movs	r3, #0
 801a9e0:	e9c6 4300 	strd	r4, r3, [r6]
 801a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9e8:	428b      	cmp	r3, r1
 801a9ea:	d908      	bls.n	801a9fe <__udivmoddi4+0xc2>
 801a9ec:	2e00      	cmp	r6, #0
 801a9ee:	f000 80ee 	beq.w	801abce <__udivmoddi4+0x292>
 801a9f2:	2100      	movs	r1, #0
 801a9f4:	e9c6 0500 	strd	r0, r5, [r6]
 801a9f8:	4608      	mov	r0, r1
 801a9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9fe:	fab3 f183 	clz	r1, r3
 801aa02:	2900      	cmp	r1, #0
 801aa04:	d14a      	bne.n	801aa9c <__udivmoddi4+0x160>
 801aa06:	42ab      	cmp	r3, r5
 801aa08:	d302      	bcc.n	801aa10 <__udivmoddi4+0xd4>
 801aa0a:	4282      	cmp	r2, r0
 801aa0c:	f200 80f9 	bhi.w	801ac02 <__udivmoddi4+0x2c6>
 801aa10:	1a84      	subs	r4, r0, r2
 801aa12:	eb65 0303 	sbc.w	r3, r5, r3
 801aa16:	2001      	movs	r0, #1
 801aa18:	4698      	mov	r8, r3
 801aa1a:	2e00      	cmp	r6, #0
 801aa1c:	d0e2      	beq.n	801a9e4 <__udivmoddi4+0xa8>
 801aa1e:	e9c6 4800 	strd	r4, r8, [r6]
 801aa22:	e7df      	b.n	801a9e4 <__udivmoddi4+0xa8>
 801aa24:	b902      	cbnz	r2, 801aa28 <__udivmoddi4+0xec>
 801aa26:	deff      	udf	#255	; 0xff
 801aa28:	fab2 f282 	clz	r2, r2
 801aa2c:	2a00      	cmp	r2, #0
 801aa2e:	f040 8091 	bne.w	801ab54 <__udivmoddi4+0x218>
 801aa32:	eba1 050c 	sub.w	r5, r1, ip
 801aa36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801aa3a:	fa1f fe8c 	uxth.w	lr, ip
 801aa3e:	2101      	movs	r1, #1
 801aa40:	fbb5 f3f7 	udiv	r3, r5, r7
 801aa44:	fb07 5013 	mls	r0, r7, r3, r5
 801aa48:	0c25      	lsrs	r5, r4, #16
 801aa4a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 801aa4e:	fb0e f003 	mul.w	r0, lr, r3
 801aa52:	42a8      	cmp	r0, r5
 801aa54:	d908      	bls.n	801aa68 <__udivmoddi4+0x12c>
 801aa56:	eb1c 0505 	adds.w	r5, ip, r5
 801aa5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 801aa5e:	d202      	bcs.n	801aa66 <__udivmoddi4+0x12a>
 801aa60:	42a8      	cmp	r0, r5
 801aa62:	f200 80cb 	bhi.w	801abfc <__udivmoddi4+0x2c0>
 801aa66:	4643      	mov	r3, r8
 801aa68:	1a2d      	subs	r5, r5, r0
 801aa6a:	b2a4      	uxth	r4, r4
 801aa6c:	fbb5 f0f7 	udiv	r0, r5, r7
 801aa70:	fb07 5510 	mls	r5, r7, r0, r5
 801aa74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801aa78:	fb0e fe00 	mul.w	lr, lr, r0
 801aa7c:	45a6      	cmp	lr, r4
 801aa7e:	d908      	bls.n	801aa92 <__udivmoddi4+0x156>
 801aa80:	eb1c 0404 	adds.w	r4, ip, r4
 801aa84:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 801aa88:	d202      	bcs.n	801aa90 <__udivmoddi4+0x154>
 801aa8a:	45a6      	cmp	lr, r4
 801aa8c:	f200 80bb 	bhi.w	801ac06 <__udivmoddi4+0x2ca>
 801aa90:	4628      	mov	r0, r5
 801aa92:	eba4 040e 	sub.w	r4, r4, lr
 801aa96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801aa9a:	e79e      	b.n	801a9da <__udivmoddi4+0x9e>
 801aa9c:	f1c1 0720 	rsb	r7, r1, #32
 801aaa0:	408b      	lsls	r3, r1
 801aaa2:	fa22 fc07 	lsr.w	ip, r2, r7
 801aaa6:	ea4c 0c03 	orr.w	ip, ip, r3
 801aaaa:	fa20 f407 	lsr.w	r4, r0, r7
 801aaae:	fa05 f301 	lsl.w	r3, r5, r1
 801aab2:	431c      	orrs	r4, r3
 801aab4:	40fd      	lsrs	r5, r7
 801aab6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801aaba:	fa00 f301 	lsl.w	r3, r0, r1
 801aabe:	fbb5 f8f9 	udiv	r8, r5, r9
 801aac2:	0c20      	lsrs	r0, r4, #16
 801aac4:	fa1f fe8c 	uxth.w	lr, ip
 801aac8:	fb09 5518 	mls	r5, r9, r8, r5
 801aacc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 801aad0:	fb08 f00e 	mul.w	r0, r8, lr
 801aad4:	42a8      	cmp	r0, r5
 801aad6:	fa02 f201 	lsl.w	r2, r2, r1
 801aada:	d90b      	bls.n	801aaf4 <__udivmoddi4+0x1b8>
 801aadc:	eb1c 0505 	adds.w	r5, ip, r5
 801aae0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 801aae4:	f080 8088 	bcs.w	801abf8 <__udivmoddi4+0x2bc>
 801aae8:	42a8      	cmp	r0, r5
 801aaea:	f240 8085 	bls.w	801abf8 <__udivmoddi4+0x2bc>
 801aaee:	f1a8 0802 	sub.w	r8, r8, #2
 801aaf2:	4465      	add	r5, ip
 801aaf4:	1a2d      	subs	r5, r5, r0
 801aaf6:	b2a4      	uxth	r4, r4
 801aaf8:	fbb5 f0f9 	udiv	r0, r5, r9
 801aafc:	fb09 5510 	mls	r5, r9, r0, r5
 801ab00:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 801ab04:	fb00 fe0e 	mul.w	lr, r0, lr
 801ab08:	45ae      	cmp	lr, r5
 801ab0a:	d908      	bls.n	801ab1e <__udivmoddi4+0x1e2>
 801ab0c:	eb1c 0505 	adds.w	r5, ip, r5
 801ab10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 801ab14:	d26c      	bcs.n	801abf0 <__udivmoddi4+0x2b4>
 801ab16:	45ae      	cmp	lr, r5
 801ab18:	d96a      	bls.n	801abf0 <__udivmoddi4+0x2b4>
 801ab1a:	3802      	subs	r0, #2
 801ab1c:	4465      	add	r5, ip
 801ab1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801ab22:	fba0 9402 	umull	r9, r4, r0, r2
 801ab26:	eba5 050e 	sub.w	r5, r5, lr
 801ab2a:	42a5      	cmp	r5, r4
 801ab2c:	46c8      	mov	r8, r9
 801ab2e:	46a6      	mov	lr, r4
 801ab30:	d356      	bcc.n	801abe0 <__udivmoddi4+0x2a4>
 801ab32:	d053      	beq.n	801abdc <__udivmoddi4+0x2a0>
 801ab34:	b15e      	cbz	r6, 801ab4e <__udivmoddi4+0x212>
 801ab36:	ebb3 0208 	subs.w	r2, r3, r8
 801ab3a:	eb65 050e 	sbc.w	r5, r5, lr
 801ab3e:	fa05 f707 	lsl.w	r7, r5, r7
 801ab42:	fa22 f301 	lsr.w	r3, r2, r1
 801ab46:	40cd      	lsrs	r5, r1
 801ab48:	431f      	orrs	r7, r3
 801ab4a:	e9c6 7500 	strd	r7, r5, [r6]
 801ab4e:	2100      	movs	r1, #0
 801ab50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab54:	f1c2 0320 	rsb	r3, r2, #32
 801ab58:	fa20 f103 	lsr.w	r1, r0, r3
 801ab5c:	fa0c fc02 	lsl.w	ip, ip, r2
 801ab60:	fa25 f303 	lsr.w	r3, r5, r3
 801ab64:	4095      	lsls	r5, r2
 801ab66:	430d      	orrs	r5, r1
 801ab68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801ab6c:	fa1f fe8c 	uxth.w	lr, ip
 801ab70:	fbb3 f1f7 	udiv	r1, r3, r7
 801ab74:	fb07 3011 	mls	r0, r7, r1, r3
 801ab78:	0c2b      	lsrs	r3, r5, #16
 801ab7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ab7e:	fb01 f00e 	mul.w	r0, r1, lr
 801ab82:	4298      	cmp	r0, r3
 801ab84:	fa04 f402 	lsl.w	r4, r4, r2
 801ab88:	d908      	bls.n	801ab9c <__udivmoddi4+0x260>
 801ab8a:	eb1c 0303 	adds.w	r3, ip, r3
 801ab8e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 801ab92:	d22f      	bcs.n	801abf4 <__udivmoddi4+0x2b8>
 801ab94:	4298      	cmp	r0, r3
 801ab96:	d92d      	bls.n	801abf4 <__udivmoddi4+0x2b8>
 801ab98:	3902      	subs	r1, #2
 801ab9a:	4463      	add	r3, ip
 801ab9c:	1a1b      	subs	r3, r3, r0
 801ab9e:	b2ad      	uxth	r5, r5
 801aba0:	fbb3 f0f7 	udiv	r0, r3, r7
 801aba4:	fb07 3310 	mls	r3, r7, r0, r3
 801aba8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801abac:	fb00 f30e 	mul.w	r3, r0, lr
 801abb0:	42ab      	cmp	r3, r5
 801abb2:	d908      	bls.n	801abc6 <__udivmoddi4+0x28a>
 801abb4:	eb1c 0505 	adds.w	r5, ip, r5
 801abb8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801abbc:	d216      	bcs.n	801abec <__udivmoddi4+0x2b0>
 801abbe:	42ab      	cmp	r3, r5
 801abc0:	d914      	bls.n	801abec <__udivmoddi4+0x2b0>
 801abc2:	3802      	subs	r0, #2
 801abc4:	4465      	add	r5, ip
 801abc6:	1aed      	subs	r5, r5, r3
 801abc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801abcc:	e738      	b.n	801aa40 <__udivmoddi4+0x104>
 801abce:	4631      	mov	r1, r6
 801abd0:	4630      	mov	r0, r6
 801abd2:	e707      	b.n	801a9e4 <__udivmoddi4+0xa8>
 801abd4:	4686      	mov	lr, r0
 801abd6:	e6e5      	b.n	801a9a4 <__udivmoddi4+0x68>
 801abd8:	4618      	mov	r0, r3
 801abda:	e6fa      	b.n	801a9d2 <__udivmoddi4+0x96>
 801abdc:	454b      	cmp	r3, r9
 801abde:	d2a9      	bcs.n	801ab34 <__udivmoddi4+0x1f8>
 801abe0:	ebb9 0802 	subs.w	r8, r9, r2
 801abe4:	eb64 0e0c 	sbc.w	lr, r4, ip
 801abe8:	3801      	subs	r0, #1
 801abea:	e7a3      	b.n	801ab34 <__udivmoddi4+0x1f8>
 801abec:	4640      	mov	r0, r8
 801abee:	e7ea      	b.n	801abc6 <__udivmoddi4+0x28a>
 801abf0:	4620      	mov	r0, r4
 801abf2:	e794      	b.n	801ab1e <__udivmoddi4+0x1e2>
 801abf4:	4641      	mov	r1, r8
 801abf6:	e7d1      	b.n	801ab9c <__udivmoddi4+0x260>
 801abf8:	46d0      	mov	r8, sl
 801abfa:	e77b      	b.n	801aaf4 <__udivmoddi4+0x1b8>
 801abfc:	3b02      	subs	r3, #2
 801abfe:	4465      	add	r5, ip
 801ac00:	e732      	b.n	801aa68 <__udivmoddi4+0x12c>
 801ac02:	4608      	mov	r0, r1
 801ac04:	e709      	b.n	801aa1a <__udivmoddi4+0xde>
 801ac06:	4464      	add	r4, ip
 801ac08:	3802      	subs	r0, #2
 801ac0a:	e742      	b.n	801aa92 <__udivmoddi4+0x156>

0801ac0c <__aeabi_idiv0>:
 801ac0c:	4770      	bx	lr
 801ac0e:	bf00      	nop

0801ac10 <__sflush_r>:
 801ac10:	898a      	ldrh	r2, [r1, #12]
 801ac12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac14:	4605      	mov	r5, r0
 801ac16:	0710      	lsls	r0, r2, #28
 801ac18:	460c      	mov	r4, r1
 801ac1a:	d457      	bmi.n	801accc <__sflush_r+0xbc>
 801ac1c:	684b      	ldr	r3, [r1, #4]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	dc04      	bgt.n	801ac2c <__sflush_r+0x1c>
 801ac22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	dc01      	bgt.n	801ac2c <__sflush_r+0x1c>
 801ac28:	2000      	movs	r0, #0
 801ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac2e:	2e00      	cmp	r6, #0
 801ac30:	d0fa      	beq.n	801ac28 <__sflush_r+0x18>
 801ac32:	2300      	movs	r3, #0
 801ac34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ac38:	682f      	ldr	r7, [r5, #0]
 801ac3a:	602b      	str	r3, [r5, #0]
 801ac3c:	d032      	beq.n	801aca4 <__sflush_r+0x94>
 801ac3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ac40:	89a3      	ldrh	r3, [r4, #12]
 801ac42:	075a      	lsls	r2, r3, #29
 801ac44:	d505      	bpl.n	801ac52 <__sflush_r+0x42>
 801ac46:	6863      	ldr	r3, [r4, #4]
 801ac48:	1ac0      	subs	r0, r0, r3
 801ac4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac4c:	b10b      	cbz	r3, 801ac52 <__sflush_r+0x42>
 801ac4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac50:	1ac0      	subs	r0, r0, r3
 801ac52:	2300      	movs	r3, #0
 801ac54:	4602      	mov	r2, r0
 801ac56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac58:	6a21      	ldr	r1, [r4, #32]
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	47b0      	blx	r6
 801ac5e:	1c43      	adds	r3, r0, #1
 801ac60:	89a3      	ldrh	r3, [r4, #12]
 801ac62:	d106      	bne.n	801ac72 <__sflush_r+0x62>
 801ac64:	6829      	ldr	r1, [r5, #0]
 801ac66:	291d      	cmp	r1, #29
 801ac68:	d82c      	bhi.n	801acc4 <__sflush_r+0xb4>
 801ac6a:	4a29      	ldr	r2, [pc, #164]	; (801ad10 <__sflush_r+0x100>)
 801ac6c:	40ca      	lsrs	r2, r1
 801ac6e:	07d6      	lsls	r6, r2, #31
 801ac70:	d528      	bpl.n	801acc4 <__sflush_r+0xb4>
 801ac72:	2200      	movs	r2, #0
 801ac74:	6062      	str	r2, [r4, #4]
 801ac76:	04d9      	lsls	r1, r3, #19
 801ac78:	6922      	ldr	r2, [r4, #16]
 801ac7a:	6022      	str	r2, [r4, #0]
 801ac7c:	d504      	bpl.n	801ac88 <__sflush_r+0x78>
 801ac7e:	1c42      	adds	r2, r0, #1
 801ac80:	d101      	bne.n	801ac86 <__sflush_r+0x76>
 801ac82:	682b      	ldr	r3, [r5, #0]
 801ac84:	b903      	cbnz	r3, 801ac88 <__sflush_r+0x78>
 801ac86:	6560      	str	r0, [r4, #84]	; 0x54
 801ac88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac8a:	602f      	str	r7, [r5, #0]
 801ac8c:	2900      	cmp	r1, #0
 801ac8e:	d0cb      	beq.n	801ac28 <__sflush_r+0x18>
 801ac90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac94:	4299      	cmp	r1, r3
 801ac96:	d002      	beq.n	801ac9e <__sflush_r+0x8e>
 801ac98:	4628      	mov	r0, r5
 801ac9a:	f000 f9d1 	bl	801b040 <_free_r>
 801ac9e:	2000      	movs	r0, #0
 801aca0:	6360      	str	r0, [r4, #52]	; 0x34
 801aca2:	e7c2      	b.n	801ac2a <__sflush_r+0x1a>
 801aca4:	6a21      	ldr	r1, [r4, #32]
 801aca6:	2301      	movs	r3, #1
 801aca8:	4628      	mov	r0, r5
 801acaa:	47b0      	blx	r6
 801acac:	1c41      	adds	r1, r0, #1
 801acae:	d1c7      	bne.n	801ac40 <__sflush_r+0x30>
 801acb0:	682b      	ldr	r3, [r5, #0]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d0c4      	beq.n	801ac40 <__sflush_r+0x30>
 801acb6:	2b1d      	cmp	r3, #29
 801acb8:	d001      	beq.n	801acbe <__sflush_r+0xae>
 801acba:	2b16      	cmp	r3, #22
 801acbc:	d101      	bne.n	801acc2 <__sflush_r+0xb2>
 801acbe:	602f      	str	r7, [r5, #0]
 801acc0:	e7b2      	b.n	801ac28 <__sflush_r+0x18>
 801acc2:	89a3      	ldrh	r3, [r4, #12]
 801acc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acc8:	81a3      	strh	r3, [r4, #12]
 801acca:	e7ae      	b.n	801ac2a <__sflush_r+0x1a>
 801accc:	690f      	ldr	r7, [r1, #16]
 801acce:	2f00      	cmp	r7, #0
 801acd0:	d0aa      	beq.n	801ac28 <__sflush_r+0x18>
 801acd2:	0793      	lsls	r3, r2, #30
 801acd4:	680e      	ldr	r6, [r1, #0]
 801acd6:	bf08      	it	eq
 801acd8:	694b      	ldreq	r3, [r1, #20]
 801acda:	600f      	str	r7, [r1, #0]
 801acdc:	bf18      	it	ne
 801acde:	2300      	movne	r3, #0
 801ace0:	1bf6      	subs	r6, r6, r7
 801ace2:	608b      	str	r3, [r1, #8]
 801ace4:	2e00      	cmp	r6, #0
 801ace6:	dd9f      	ble.n	801ac28 <__sflush_r+0x18>
 801ace8:	6a21      	ldr	r1, [r4, #32]
 801acea:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801acee:	4633      	mov	r3, r6
 801acf0:	463a      	mov	r2, r7
 801acf2:	4628      	mov	r0, r5
 801acf4:	47e0      	blx	ip
 801acf6:	2800      	cmp	r0, #0
 801acf8:	dc06      	bgt.n	801ad08 <__sflush_r+0xf8>
 801acfa:	89a3      	ldrh	r3, [r4, #12]
 801acfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad00:	81a3      	strh	r3, [r4, #12]
 801ad02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad06:	e790      	b.n	801ac2a <__sflush_r+0x1a>
 801ad08:	4407      	add	r7, r0
 801ad0a:	1a36      	subs	r6, r6, r0
 801ad0c:	e7ea      	b.n	801ace4 <__sflush_r+0xd4>
 801ad0e:	bf00      	nop
 801ad10:	20400001 	.word	0x20400001

0801ad14 <_fflush_r>:
 801ad14:	b538      	push	{r3, r4, r5, lr}
 801ad16:	690b      	ldr	r3, [r1, #16]
 801ad18:	4605      	mov	r5, r0
 801ad1a:	460c      	mov	r4, r1
 801ad1c:	b913      	cbnz	r3, 801ad24 <_fflush_r+0x10>
 801ad1e:	2500      	movs	r5, #0
 801ad20:	4628      	mov	r0, r5
 801ad22:	bd38      	pop	{r3, r4, r5, pc}
 801ad24:	b118      	cbz	r0, 801ad2e <_fflush_r+0x1a>
 801ad26:	6983      	ldr	r3, [r0, #24]
 801ad28:	b90b      	cbnz	r3, 801ad2e <_fflush_r+0x1a>
 801ad2a:	f000 f899 	bl	801ae60 <__sinit>
 801ad2e:	4b14      	ldr	r3, [pc, #80]	; (801ad80 <_fflush_r+0x6c>)
 801ad30:	429c      	cmp	r4, r3
 801ad32:	d11b      	bne.n	801ad6c <_fflush_r+0x58>
 801ad34:	686c      	ldr	r4, [r5, #4]
 801ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d0ef      	beq.n	801ad1e <_fflush_r+0xa>
 801ad3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ad40:	07d0      	lsls	r0, r2, #31
 801ad42:	d404      	bmi.n	801ad4e <_fflush_r+0x3a>
 801ad44:	0599      	lsls	r1, r3, #22
 801ad46:	d402      	bmi.n	801ad4e <_fflush_r+0x3a>
 801ad48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad4a:	f000 f927 	bl	801af9c <__retarget_lock_acquire_recursive>
 801ad4e:	4628      	mov	r0, r5
 801ad50:	4621      	mov	r1, r4
 801ad52:	f7ff ff5d 	bl	801ac10 <__sflush_r>
 801ad56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad58:	07da      	lsls	r2, r3, #31
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	d4e0      	bmi.n	801ad20 <_fflush_r+0xc>
 801ad5e:	89a3      	ldrh	r3, [r4, #12]
 801ad60:	059b      	lsls	r3, r3, #22
 801ad62:	d4dd      	bmi.n	801ad20 <_fflush_r+0xc>
 801ad64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad66:	f000 f91a 	bl	801af9e <__retarget_lock_release_recursive>
 801ad6a:	e7d9      	b.n	801ad20 <_fflush_r+0xc>
 801ad6c:	4b05      	ldr	r3, [pc, #20]	; (801ad84 <_fflush_r+0x70>)
 801ad6e:	429c      	cmp	r4, r3
 801ad70:	d101      	bne.n	801ad76 <_fflush_r+0x62>
 801ad72:	68ac      	ldr	r4, [r5, #8]
 801ad74:	e7df      	b.n	801ad36 <_fflush_r+0x22>
 801ad76:	4b04      	ldr	r3, [pc, #16]	; (801ad88 <_fflush_r+0x74>)
 801ad78:	429c      	cmp	r4, r3
 801ad7a:	bf08      	it	eq
 801ad7c:	68ec      	ldreq	r4, [r5, #12]
 801ad7e:	e7da      	b.n	801ad36 <_fflush_r+0x22>
 801ad80:	0802ae78 	.word	0x0802ae78
 801ad84:	0802ae98 	.word	0x0802ae98
 801ad88:	0802ae58 	.word	0x0802ae58

0801ad8c <fflush>:
 801ad8c:	4601      	mov	r1, r0
 801ad8e:	b920      	cbnz	r0, 801ad9a <fflush+0xe>
 801ad90:	4b04      	ldr	r3, [pc, #16]	; (801ada4 <fflush+0x18>)
 801ad92:	4905      	ldr	r1, [pc, #20]	; (801ada8 <fflush+0x1c>)
 801ad94:	6818      	ldr	r0, [r3, #0]
 801ad96:	f000 b8e1 	b.w	801af5c <_fwalk_reent>
 801ad9a:	4b04      	ldr	r3, [pc, #16]	; (801adac <fflush+0x20>)
 801ad9c:	6818      	ldr	r0, [r3, #0]
 801ad9e:	f7ff bfb9 	b.w	801ad14 <_fflush_r>
 801ada2:	bf00      	nop
 801ada4:	0802aeb8 	.word	0x0802aeb8
 801ada8:	0801ad15 	.word	0x0801ad15
 801adac:	20000188 	.word	0x20000188

0801adb0 <std>:
 801adb0:	2300      	movs	r3, #0
 801adb2:	b510      	push	{r4, lr}
 801adb4:	4604      	mov	r4, r0
 801adb6:	e9c0 3300 	strd	r3, r3, [r0]
 801adba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801adbe:	6083      	str	r3, [r0, #8]
 801adc0:	8181      	strh	r1, [r0, #12]
 801adc2:	6643      	str	r3, [r0, #100]	; 0x64
 801adc4:	81c2      	strh	r2, [r0, #14]
 801adc6:	6183      	str	r3, [r0, #24]
 801adc8:	4619      	mov	r1, r3
 801adca:	2208      	movs	r2, #8
 801adcc:	305c      	adds	r0, #92	; 0x5c
 801adce:	f000 f92f 	bl	801b030 <memset>
 801add2:	4b05      	ldr	r3, [pc, #20]	; (801ade8 <std+0x38>)
 801add4:	6263      	str	r3, [r4, #36]	; 0x24
 801add6:	4b05      	ldr	r3, [pc, #20]	; (801adec <std+0x3c>)
 801add8:	62a3      	str	r3, [r4, #40]	; 0x28
 801adda:	4b05      	ldr	r3, [pc, #20]	; (801adf0 <std+0x40>)
 801addc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801adde:	4b05      	ldr	r3, [pc, #20]	; (801adf4 <std+0x44>)
 801ade0:	6224      	str	r4, [r4, #32]
 801ade2:	6323      	str	r3, [r4, #48]	; 0x30
 801ade4:	bd10      	pop	{r4, pc}
 801ade6:	bf00      	nop
 801ade8:	0801b24d 	.word	0x0801b24d
 801adec:	0801b26f 	.word	0x0801b26f
 801adf0:	0801b2a7 	.word	0x0801b2a7
 801adf4:	0801b2cb 	.word	0x0801b2cb

0801adf8 <_cleanup_r>:
 801adf8:	4901      	ldr	r1, [pc, #4]	; (801ae00 <_cleanup_r+0x8>)
 801adfa:	f000 b8af 	b.w	801af5c <_fwalk_reent>
 801adfe:	bf00      	nop
 801ae00:	0801ad15 	.word	0x0801ad15

0801ae04 <__sfmoreglue>:
 801ae04:	b570      	push	{r4, r5, r6, lr}
 801ae06:	2268      	movs	r2, #104	; 0x68
 801ae08:	1e4d      	subs	r5, r1, #1
 801ae0a:	4355      	muls	r5, r2
 801ae0c:	460e      	mov	r6, r1
 801ae0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ae12:	f000 f97f 	bl	801b114 <_malloc_r>
 801ae16:	4604      	mov	r4, r0
 801ae18:	b140      	cbz	r0, 801ae2c <__sfmoreglue+0x28>
 801ae1a:	2100      	movs	r1, #0
 801ae1c:	e9c0 1600 	strd	r1, r6, [r0]
 801ae20:	300c      	adds	r0, #12
 801ae22:	60a0      	str	r0, [r4, #8]
 801ae24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ae28:	f000 f902 	bl	801b030 <memset>
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	bd70      	pop	{r4, r5, r6, pc}

0801ae30 <__sfp_lock_acquire>:
 801ae30:	4801      	ldr	r0, [pc, #4]	; (801ae38 <__sfp_lock_acquire+0x8>)
 801ae32:	f000 b8b3 	b.w	801af9c <__retarget_lock_acquire_recursive>
 801ae36:	bf00      	nop
 801ae38:	20000209 	.word	0x20000209

0801ae3c <__sfp_lock_release>:
 801ae3c:	4801      	ldr	r0, [pc, #4]	; (801ae44 <__sfp_lock_release+0x8>)
 801ae3e:	f000 b8ae 	b.w	801af9e <__retarget_lock_release_recursive>
 801ae42:	bf00      	nop
 801ae44:	20000209 	.word	0x20000209

0801ae48 <__sinit_lock_acquire>:
 801ae48:	4801      	ldr	r0, [pc, #4]	; (801ae50 <__sinit_lock_acquire+0x8>)
 801ae4a:	f000 b8a7 	b.w	801af9c <__retarget_lock_acquire_recursive>
 801ae4e:	bf00      	nop
 801ae50:	2000020a 	.word	0x2000020a

0801ae54 <__sinit_lock_release>:
 801ae54:	4801      	ldr	r0, [pc, #4]	; (801ae5c <__sinit_lock_release+0x8>)
 801ae56:	f000 b8a2 	b.w	801af9e <__retarget_lock_release_recursive>
 801ae5a:	bf00      	nop
 801ae5c:	2000020a 	.word	0x2000020a

0801ae60 <__sinit>:
 801ae60:	b510      	push	{r4, lr}
 801ae62:	4604      	mov	r4, r0
 801ae64:	f7ff fff0 	bl	801ae48 <__sinit_lock_acquire>
 801ae68:	69a3      	ldr	r3, [r4, #24]
 801ae6a:	b11b      	cbz	r3, 801ae74 <__sinit+0x14>
 801ae6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae70:	f7ff bff0 	b.w	801ae54 <__sinit_lock_release>
 801ae74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ae78:	6523      	str	r3, [r4, #80]	; 0x50
 801ae7a:	4b13      	ldr	r3, [pc, #76]	; (801aec8 <__sinit+0x68>)
 801ae7c:	4a13      	ldr	r2, [pc, #76]	; (801aecc <__sinit+0x6c>)
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	62a2      	str	r2, [r4, #40]	; 0x28
 801ae82:	42a3      	cmp	r3, r4
 801ae84:	bf04      	itt	eq
 801ae86:	2301      	moveq	r3, #1
 801ae88:	61a3      	streq	r3, [r4, #24]
 801ae8a:	4620      	mov	r0, r4
 801ae8c:	f000 f820 	bl	801aed0 <__sfp>
 801ae90:	6060      	str	r0, [r4, #4]
 801ae92:	4620      	mov	r0, r4
 801ae94:	f000 f81c 	bl	801aed0 <__sfp>
 801ae98:	60a0      	str	r0, [r4, #8]
 801ae9a:	4620      	mov	r0, r4
 801ae9c:	f000 f818 	bl	801aed0 <__sfp>
 801aea0:	2200      	movs	r2, #0
 801aea2:	60e0      	str	r0, [r4, #12]
 801aea4:	2104      	movs	r1, #4
 801aea6:	6860      	ldr	r0, [r4, #4]
 801aea8:	f7ff ff82 	bl	801adb0 <std>
 801aeac:	68a0      	ldr	r0, [r4, #8]
 801aeae:	2201      	movs	r2, #1
 801aeb0:	2109      	movs	r1, #9
 801aeb2:	f7ff ff7d 	bl	801adb0 <std>
 801aeb6:	68e0      	ldr	r0, [r4, #12]
 801aeb8:	2202      	movs	r2, #2
 801aeba:	2112      	movs	r1, #18
 801aebc:	f7ff ff78 	bl	801adb0 <std>
 801aec0:	2301      	movs	r3, #1
 801aec2:	61a3      	str	r3, [r4, #24]
 801aec4:	e7d2      	b.n	801ae6c <__sinit+0xc>
 801aec6:	bf00      	nop
 801aec8:	0802aeb8 	.word	0x0802aeb8
 801aecc:	0801adf9 	.word	0x0801adf9

0801aed0 <__sfp>:
 801aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aed2:	4607      	mov	r7, r0
 801aed4:	f7ff ffac 	bl	801ae30 <__sfp_lock_acquire>
 801aed8:	4b1e      	ldr	r3, [pc, #120]	; (801af54 <__sfp+0x84>)
 801aeda:	681e      	ldr	r6, [r3, #0]
 801aedc:	69b3      	ldr	r3, [r6, #24]
 801aede:	b913      	cbnz	r3, 801aee6 <__sfp+0x16>
 801aee0:	4630      	mov	r0, r6
 801aee2:	f7ff ffbd 	bl	801ae60 <__sinit>
 801aee6:	3648      	adds	r6, #72	; 0x48
 801aee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aeec:	3b01      	subs	r3, #1
 801aeee:	d503      	bpl.n	801aef8 <__sfp+0x28>
 801aef0:	6833      	ldr	r3, [r6, #0]
 801aef2:	b30b      	cbz	r3, 801af38 <__sfp+0x68>
 801aef4:	6836      	ldr	r6, [r6, #0]
 801aef6:	e7f7      	b.n	801aee8 <__sfp+0x18>
 801aef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aefc:	b9d5      	cbnz	r5, 801af34 <__sfp+0x64>
 801aefe:	4b16      	ldr	r3, [pc, #88]	; (801af58 <__sfp+0x88>)
 801af00:	60e3      	str	r3, [r4, #12]
 801af02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801af06:	6665      	str	r5, [r4, #100]	; 0x64
 801af08:	f000 f847 	bl	801af9a <__retarget_lock_init_recursive>
 801af0c:	f7ff ff96 	bl	801ae3c <__sfp_lock_release>
 801af10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801af14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801af18:	6025      	str	r5, [r4, #0]
 801af1a:	61a5      	str	r5, [r4, #24]
 801af1c:	2208      	movs	r2, #8
 801af1e:	4629      	mov	r1, r5
 801af20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801af24:	f000 f884 	bl	801b030 <memset>
 801af28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801af2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801af30:	4620      	mov	r0, r4
 801af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af34:	3468      	adds	r4, #104	; 0x68
 801af36:	e7d9      	b.n	801aeec <__sfp+0x1c>
 801af38:	2104      	movs	r1, #4
 801af3a:	4638      	mov	r0, r7
 801af3c:	f7ff ff62 	bl	801ae04 <__sfmoreglue>
 801af40:	4604      	mov	r4, r0
 801af42:	6030      	str	r0, [r6, #0]
 801af44:	2800      	cmp	r0, #0
 801af46:	d1d5      	bne.n	801aef4 <__sfp+0x24>
 801af48:	f7ff ff78 	bl	801ae3c <__sfp_lock_release>
 801af4c:	230c      	movs	r3, #12
 801af4e:	603b      	str	r3, [r7, #0]
 801af50:	e7ee      	b.n	801af30 <__sfp+0x60>
 801af52:	bf00      	nop
 801af54:	0802aeb8 	.word	0x0802aeb8
 801af58:	ffff0001 	.word	0xffff0001

0801af5c <_fwalk_reent>:
 801af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af60:	4606      	mov	r6, r0
 801af62:	4688      	mov	r8, r1
 801af64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801af68:	2700      	movs	r7, #0
 801af6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af6e:	f1b9 0901 	subs.w	r9, r9, #1
 801af72:	d505      	bpl.n	801af80 <_fwalk_reent+0x24>
 801af74:	6824      	ldr	r4, [r4, #0]
 801af76:	2c00      	cmp	r4, #0
 801af78:	d1f7      	bne.n	801af6a <_fwalk_reent+0xe>
 801af7a:	4638      	mov	r0, r7
 801af7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af80:	89ab      	ldrh	r3, [r5, #12]
 801af82:	2b01      	cmp	r3, #1
 801af84:	d907      	bls.n	801af96 <_fwalk_reent+0x3a>
 801af86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af8a:	3301      	adds	r3, #1
 801af8c:	d003      	beq.n	801af96 <_fwalk_reent+0x3a>
 801af8e:	4629      	mov	r1, r5
 801af90:	4630      	mov	r0, r6
 801af92:	47c0      	blx	r8
 801af94:	4307      	orrs	r7, r0
 801af96:	3568      	adds	r5, #104	; 0x68
 801af98:	e7e9      	b.n	801af6e <_fwalk_reent+0x12>

0801af9a <__retarget_lock_init_recursive>:
 801af9a:	4770      	bx	lr

0801af9c <__retarget_lock_acquire_recursive>:
 801af9c:	4770      	bx	lr

0801af9e <__retarget_lock_release_recursive>:
 801af9e:	4770      	bx	lr

0801afa0 <malloc>:
 801afa0:	4b02      	ldr	r3, [pc, #8]	; (801afac <malloc+0xc>)
 801afa2:	4601      	mov	r1, r0
 801afa4:	6818      	ldr	r0, [r3, #0]
 801afa6:	f000 b8b5 	b.w	801b114 <_malloc_r>
 801afaa:	bf00      	nop
 801afac:	20000188 	.word	0x20000188

0801afb0 <free>:
 801afb0:	4b02      	ldr	r3, [pc, #8]	; (801afbc <free+0xc>)
 801afb2:	4601      	mov	r1, r0
 801afb4:	6818      	ldr	r0, [r3, #0]
 801afb6:	f000 b843 	b.w	801b040 <_free_r>
 801afba:	bf00      	nop
 801afbc:	20000188 	.word	0x20000188

0801afc0 <memcmp>:
 801afc0:	b510      	push	{r4, lr}
 801afc2:	3901      	subs	r1, #1
 801afc4:	4402      	add	r2, r0
 801afc6:	4290      	cmp	r0, r2
 801afc8:	d101      	bne.n	801afce <memcmp+0xe>
 801afca:	2000      	movs	r0, #0
 801afcc:	e005      	b.n	801afda <memcmp+0x1a>
 801afce:	7803      	ldrb	r3, [r0, #0]
 801afd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801afd4:	42a3      	cmp	r3, r4
 801afd6:	d001      	beq.n	801afdc <memcmp+0x1c>
 801afd8:	1b18      	subs	r0, r3, r4
 801afda:	bd10      	pop	{r4, pc}
 801afdc:	3001      	adds	r0, #1
 801afde:	e7f2      	b.n	801afc6 <memcmp+0x6>

0801afe0 <memcpy>:
 801afe0:	440a      	add	r2, r1
 801afe2:	4291      	cmp	r1, r2
 801afe4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801afe8:	d100      	bne.n	801afec <memcpy+0xc>
 801afea:	4770      	bx	lr
 801afec:	b510      	push	{r4, lr}
 801afee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aff6:	4291      	cmp	r1, r2
 801aff8:	d1f9      	bne.n	801afee <memcpy+0xe>
 801affa:	bd10      	pop	{r4, pc}

0801affc <memmove>:
 801affc:	4288      	cmp	r0, r1
 801affe:	b510      	push	{r4, lr}
 801b000:	eb01 0402 	add.w	r4, r1, r2
 801b004:	d902      	bls.n	801b00c <memmove+0x10>
 801b006:	4284      	cmp	r4, r0
 801b008:	4623      	mov	r3, r4
 801b00a:	d807      	bhi.n	801b01c <memmove+0x20>
 801b00c:	1e43      	subs	r3, r0, #1
 801b00e:	42a1      	cmp	r1, r4
 801b010:	d008      	beq.n	801b024 <memmove+0x28>
 801b012:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b016:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b01a:	e7f8      	b.n	801b00e <memmove+0x12>
 801b01c:	4402      	add	r2, r0
 801b01e:	4601      	mov	r1, r0
 801b020:	428a      	cmp	r2, r1
 801b022:	d100      	bne.n	801b026 <memmove+0x2a>
 801b024:	bd10      	pop	{r4, pc}
 801b026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b02a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b02e:	e7f7      	b.n	801b020 <memmove+0x24>

0801b030 <memset>:
 801b030:	4402      	add	r2, r0
 801b032:	4603      	mov	r3, r0
 801b034:	4293      	cmp	r3, r2
 801b036:	d100      	bne.n	801b03a <memset+0xa>
 801b038:	4770      	bx	lr
 801b03a:	f803 1b01 	strb.w	r1, [r3], #1
 801b03e:	e7f9      	b.n	801b034 <memset+0x4>

0801b040 <_free_r>:
 801b040:	b538      	push	{r3, r4, r5, lr}
 801b042:	4605      	mov	r5, r0
 801b044:	2900      	cmp	r1, #0
 801b046:	d041      	beq.n	801b0cc <_free_r+0x8c>
 801b048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b04c:	1f0c      	subs	r4, r1, #4
 801b04e:	2b00      	cmp	r3, #0
 801b050:	bfb8      	it	lt
 801b052:	18e4      	addlt	r4, r4, r3
 801b054:	f000 f9aa 	bl	801b3ac <__malloc_lock>
 801b058:	4a1d      	ldr	r2, [pc, #116]	; (801b0d0 <_free_r+0x90>)
 801b05a:	6813      	ldr	r3, [r2, #0]
 801b05c:	b933      	cbnz	r3, 801b06c <_free_r+0x2c>
 801b05e:	6063      	str	r3, [r4, #4]
 801b060:	6014      	str	r4, [r2, #0]
 801b062:	4628      	mov	r0, r5
 801b064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b068:	f000 b9a6 	b.w	801b3b8 <__malloc_unlock>
 801b06c:	42a3      	cmp	r3, r4
 801b06e:	d908      	bls.n	801b082 <_free_r+0x42>
 801b070:	6820      	ldr	r0, [r4, #0]
 801b072:	1821      	adds	r1, r4, r0
 801b074:	428b      	cmp	r3, r1
 801b076:	bf01      	itttt	eq
 801b078:	6819      	ldreq	r1, [r3, #0]
 801b07a:	685b      	ldreq	r3, [r3, #4]
 801b07c:	1809      	addeq	r1, r1, r0
 801b07e:	6021      	streq	r1, [r4, #0]
 801b080:	e7ed      	b.n	801b05e <_free_r+0x1e>
 801b082:	461a      	mov	r2, r3
 801b084:	685b      	ldr	r3, [r3, #4]
 801b086:	b10b      	cbz	r3, 801b08c <_free_r+0x4c>
 801b088:	42a3      	cmp	r3, r4
 801b08a:	d9fa      	bls.n	801b082 <_free_r+0x42>
 801b08c:	6811      	ldr	r1, [r2, #0]
 801b08e:	1850      	adds	r0, r2, r1
 801b090:	42a0      	cmp	r0, r4
 801b092:	d10b      	bne.n	801b0ac <_free_r+0x6c>
 801b094:	6820      	ldr	r0, [r4, #0]
 801b096:	4401      	add	r1, r0
 801b098:	1850      	adds	r0, r2, r1
 801b09a:	4283      	cmp	r3, r0
 801b09c:	6011      	str	r1, [r2, #0]
 801b09e:	d1e0      	bne.n	801b062 <_free_r+0x22>
 801b0a0:	6818      	ldr	r0, [r3, #0]
 801b0a2:	685b      	ldr	r3, [r3, #4]
 801b0a4:	6053      	str	r3, [r2, #4]
 801b0a6:	4401      	add	r1, r0
 801b0a8:	6011      	str	r1, [r2, #0]
 801b0aa:	e7da      	b.n	801b062 <_free_r+0x22>
 801b0ac:	d902      	bls.n	801b0b4 <_free_r+0x74>
 801b0ae:	230c      	movs	r3, #12
 801b0b0:	602b      	str	r3, [r5, #0]
 801b0b2:	e7d6      	b.n	801b062 <_free_r+0x22>
 801b0b4:	6820      	ldr	r0, [r4, #0]
 801b0b6:	1821      	adds	r1, r4, r0
 801b0b8:	428b      	cmp	r3, r1
 801b0ba:	bf04      	itt	eq
 801b0bc:	6819      	ldreq	r1, [r3, #0]
 801b0be:	685b      	ldreq	r3, [r3, #4]
 801b0c0:	6063      	str	r3, [r4, #4]
 801b0c2:	bf04      	itt	eq
 801b0c4:	1809      	addeq	r1, r1, r0
 801b0c6:	6021      	streq	r1, [r4, #0]
 801b0c8:	6054      	str	r4, [r2, #4]
 801b0ca:	e7ca      	b.n	801b062 <_free_r+0x22>
 801b0cc:	bd38      	pop	{r3, r4, r5, pc}
 801b0ce:	bf00      	nop
 801b0d0:	2000020c 	.word	0x2000020c

0801b0d4 <sbrk_aligned>:
 801b0d4:	b570      	push	{r4, r5, r6, lr}
 801b0d6:	4e0e      	ldr	r6, [pc, #56]	; (801b110 <sbrk_aligned+0x3c>)
 801b0d8:	460c      	mov	r4, r1
 801b0da:	6831      	ldr	r1, [r6, #0]
 801b0dc:	4605      	mov	r5, r0
 801b0de:	b911      	cbnz	r1, 801b0e6 <sbrk_aligned+0x12>
 801b0e0:	f000 f8a4 	bl	801b22c <_sbrk_r>
 801b0e4:	6030      	str	r0, [r6, #0]
 801b0e6:	4621      	mov	r1, r4
 801b0e8:	4628      	mov	r0, r5
 801b0ea:	f000 f89f 	bl	801b22c <_sbrk_r>
 801b0ee:	1c43      	adds	r3, r0, #1
 801b0f0:	d00a      	beq.n	801b108 <sbrk_aligned+0x34>
 801b0f2:	1cc4      	adds	r4, r0, #3
 801b0f4:	f024 0403 	bic.w	r4, r4, #3
 801b0f8:	42a0      	cmp	r0, r4
 801b0fa:	d007      	beq.n	801b10c <sbrk_aligned+0x38>
 801b0fc:	1a21      	subs	r1, r4, r0
 801b0fe:	4628      	mov	r0, r5
 801b100:	f000 f894 	bl	801b22c <_sbrk_r>
 801b104:	3001      	adds	r0, #1
 801b106:	d101      	bne.n	801b10c <sbrk_aligned+0x38>
 801b108:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b10c:	4620      	mov	r0, r4
 801b10e:	bd70      	pop	{r4, r5, r6, pc}
 801b110:	20000210 	.word	0x20000210

0801b114 <_malloc_r>:
 801b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b118:	1ccd      	adds	r5, r1, #3
 801b11a:	f025 0503 	bic.w	r5, r5, #3
 801b11e:	3508      	adds	r5, #8
 801b120:	2d0c      	cmp	r5, #12
 801b122:	bf38      	it	cc
 801b124:	250c      	movcc	r5, #12
 801b126:	2d00      	cmp	r5, #0
 801b128:	4607      	mov	r7, r0
 801b12a:	db01      	blt.n	801b130 <_malloc_r+0x1c>
 801b12c:	42a9      	cmp	r1, r5
 801b12e:	d905      	bls.n	801b13c <_malloc_r+0x28>
 801b130:	230c      	movs	r3, #12
 801b132:	603b      	str	r3, [r7, #0]
 801b134:	2600      	movs	r6, #0
 801b136:	4630      	mov	r0, r6
 801b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b13c:	4e2e      	ldr	r6, [pc, #184]	; (801b1f8 <_malloc_r+0xe4>)
 801b13e:	f000 f935 	bl	801b3ac <__malloc_lock>
 801b142:	6833      	ldr	r3, [r6, #0]
 801b144:	461c      	mov	r4, r3
 801b146:	bb34      	cbnz	r4, 801b196 <_malloc_r+0x82>
 801b148:	4629      	mov	r1, r5
 801b14a:	4638      	mov	r0, r7
 801b14c:	f7ff ffc2 	bl	801b0d4 <sbrk_aligned>
 801b150:	1c43      	adds	r3, r0, #1
 801b152:	4604      	mov	r4, r0
 801b154:	d14d      	bne.n	801b1f2 <_malloc_r+0xde>
 801b156:	6834      	ldr	r4, [r6, #0]
 801b158:	4626      	mov	r6, r4
 801b15a:	2e00      	cmp	r6, #0
 801b15c:	d140      	bne.n	801b1e0 <_malloc_r+0xcc>
 801b15e:	6823      	ldr	r3, [r4, #0]
 801b160:	4631      	mov	r1, r6
 801b162:	4638      	mov	r0, r7
 801b164:	eb04 0803 	add.w	r8, r4, r3
 801b168:	f000 f860 	bl	801b22c <_sbrk_r>
 801b16c:	4580      	cmp	r8, r0
 801b16e:	d13a      	bne.n	801b1e6 <_malloc_r+0xd2>
 801b170:	6821      	ldr	r1, [r4, #0]
 801b172:	3503      	adds	r5, #3
 801b174:	1a6d      	subs	r5, r5, r1
 801b176:	f025 0503 	bic.w	r5, r5, #3
 801b17a:	3508      	adds	r5, #8
 801b17c:	2d0c      	cmp	r5, #12
 801b17e:	bf38      	it	cc
 801b180:	250c      	movcc	r5, #12
 801b182:	4629      	mov	r1, r5
 801b184:	4638      	mov	r0, r7
 801b186:	f7ff ffa5 	bl	801b0d4 <sbrk_aligned>
 801b18a:	3001      	adds	r0, #1
 801b18c:	d02b      	beq.n	801b1e6 <_malloc_r+0xd2>
 801b18e:	6823      	ldr	r3, [r4, #0]
 801b190:	442b      	add	r3, r5
 801b192:	6023      	str	r3, [r4, #0]
 801b194:	e00e      	b.n	801b1b4 <_malloc_r+0xa0>
 801b196:	6822      	ldr	r2, [r4, #0]
 801b198:	1b52      	subs	r2, r2, r5
 801b19a:	d41e      	bmi.n	801b1da <_malloc_r+0xc6>
 801b19c:	2a0b      	cmp	r2, #11
 801b19e:	d916      	bls.n	801b1ce <_malloc_r+0xba>
 801b1a0:	1961      	adds	r1, r4, r5
 801b1a2:	42a3      	cmp	r3, r4
 801b1a4:	6025      	str	r5, [r4, #0]
 801b1a6:	bf18      	it	ne
 801b1a8:	6059      	strne	r1, [r3, #4]
 801b1aa:	6863      	ldr	r3, [r4, #4]
 801b1ac:	bf08      	it	eq
 801b1ae:	6031      	streq	r1, [r6, #0]
 801b1b0:	5162      	str	r2, [r4, r5]
 801b1b2:	604b      	str	r3, [r1, #4]
 801b1b4:	4638      	mov	r0, r7
 801b1b6:	f104 060b 	add.w	r6, r4, #11
 801b1ba:	f000 f8fd 	bl	801b3b8 <__malloc_unlock>
 801b1be:	f026 0607 	bic.w	r6, r6, #7
 801b1c2:	1d23      	adds	r3, r4, #4
 801b1c4:	1af2      	subs	r2, r6, r3
 801b1c6:	d0b6      	beq.n	801b136 <_malloc_r+0x22>
 801b1c8:	1b9b      	subs	r3, r3, r6
 801b1ca:	50a3      	str	r3, [r4, r2]
 801b1cc:	e7b3      	b.n	801b136 <_malloc_r+0x22>
 801b1ce:	6862      	ldr	r2, [r4, #4]
 801b1d0:	42a3      	cmp	r3, r4
 801b1d2:	bf0c      	ite	eq
 801b1d4:	6032      	streq	r2, [r6, #0]
 801b1d6:	605a      	strne	r2, [r3, #4]
 801b1d8:	e7ec      	b.n	801b1b4 <_malloc_r+0xa0>
 801b1da:	4623      	mov	r3, r4
 801b1dc:	6864      	ldr	r4, [r4, #4]
 801b1de:	e7b2      	b.n	801b146 <_malloc_r+0x32>
 801b1e0:	4634      	mov	r4, r6
 801b1e2:	6876      	ldr	r6, [r6, #4]
 801b1e4:	e7b9      	b.n	801b15a <_malloc_r+0x46>
 801b1e6:	230c      	movs	r3, #12
 801b1e8:	603b      	str	r3, [r7, #0]
 801b1ea:	4638      	mov	r0, r7
 801b1ec:	f000 f8e4 	bl	801b3b8 <__malloc_unlock>
 801b1f0:	e7a1      	b.n	801b136 <_malloc_r+0x22>
 801b1f2:	6025      	str	r5, [r4, #0]
 801b1f4:	e7de      	b.n	801b1b4 <_malloc_r+0xa0>
 801b1f6:	bf00      	nop
 801b1f8:	2000020c 	.word	0x2000020c

0801b1fc <iprintf>:
 801b1fc:	b40f      	push	{r0, r1, r2, r3}
 801b1fe:	4b0a      	ldr	r3, [pc, #40]	; (801b228 <iprintf+0x2c>)
 801b200:	b513      	push	{r0, r1, r4, lr}
 801b202:	681c      	ldr	r4, [r3, #0]
 801b204:	b124      	cbz	r4, 801b210 <iprintf+0x14>
 801b206:	69a3      	ldr	r3, [r4, #24]
 801b208:	b913      	cbnz	r3, 801b210 <iprintf+0x14>
 801b20a:	4620      	mov	r0, r4
 801b20c:	f7ff fe28 	bl	801ae60 <__sinit>
 801b210:	ab05      	add	r3, sp, #20
 801b212:	9a04      	ldr	r2, [sp, #16]
 801b214:	68a1      	ldr	r1, [r4, #8]
 801b216:	9301      	str	r3, [sp, #4]
 801b218:	4620      	mov	r0, r4
 801b21a:	f000 f8fb 	bl	801b414 <_vfiprintf_r>
 801b21e:	b002      	add	sp, #8
 801b220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b224:	b004      	add	sp, #16
 801b226:	4770      	bx	lr
 801b228:	20000188 	.word	0x20000188

0801b22c <_sbrk_r>:
 801b22c:	b538      	push	{r3, r4, r5, lr}
 801b22e:	4d06      	ldr	r5, [pc, #24]	; (801b248 <_sbrk_r+0x1c>)
 801b230:	2300      	movs	r3, #0
 801b232:	4604      	mov	r4, r0
 801b234:	4608      	mov	r0, r1
 801b236:	602b      	str	r3, [r5, #0]
 801b238:	f000 fd84 	bl	801bd44 <_sbrk>
 801b23c:	1c43      	adds	r3, r0, #1
 801b23e:	d102      	bne.n	801b246 <_sbrk_r+0x1a>
 801b240:	682b      	ldr	r3, [r5, #0]
 801b242:	b103      	cbz	r3, 801b246 <_sbrk_r+0x1a>
 801b244:	6023      	str	r3, [r4, #0]
 801b246:	bd38      	pop	{r3, r4, r5, pc}
 801b248:	20000214 	.word	0x20000214

0801b24c <__sread>:
 801b24c:	b510      	push	{r4, lr}
 801b24e:	460c      	mov	r4, r1
 801b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b254:	f000 fba2 	bl	801b99c <_read_r>
 801b258:	2800      	cmp	r0, #0
 801b25a:	bfab      	itete	ge
 801b25c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b25e:	89a3      	ldrhlt	r3, [r4, #12]
 801b260:	181b      	addge	r3, r3, r0
 801b262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b266:	bfac      	ite	ge
 801b268:	6563      	strge	r3, [r4, #84]	; 0x54
 801b26a:	81a3      	strhlt	r3, [r4, #12]
 801b26c:	bd10      	pop	{r4, pc}

0801b26e <__swrite>:
 801b26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b272:	461f      	mov	r7, r3
 801b274:	898b      	ldrh	r3, [r1, #12]
 801b276:	05db      	lsls	r3, r3, #23
 801b278:	4605      	mov	r5, r0
 801b27a:	460c      	mov	r4, r1
 801b27c:	4616      	mov	r6, r2
 801b27e:	d505      	bpl.n	801b28c <__swrite+0x1e>
 801b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b284:	2302      	movs	r3, #2
 801b286:	2200      	movs	r2, #0
 801b288:	f000 f87e 	bl	801b388 <_lseek_r>
 801b28c:	89a3      	ldrh	r3, [r4, #12]
 801b28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b296:	81a3      	strh	r3, [r4, #12]
 801b298:	4632      	mov	r2, r6
 801b29a:	463b      	mov	r3, r7
 801b29c:	4628      	mov	r0, r5
 801b29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2a2:	f000 b84f 	b.w	801b344 <_write_r>

0801b2a6 <__sseek>:
 801b2a6:	b510      	push	{r4, lr}
 801b2a8:	460c      	mov	r4, r1
 801b2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ae:	f000 f86b 	bl	801b388 <_lseek_r>
 801b2b2:	1c43      	adds	r3, r0, #1
 801b2b4:	89a3      	ldrh	r3, [r4, #12]
 801b2b6:	bf15      	itete	ne
 801b2b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b2ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b2be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b2c2:	81a3      	strheq	r3, [r4, #12]
 801b2c4:	bf18      	it	ne
 801b2c6:	81a3      	strhne	r3, [r4, #12]
 801b2c8:	bd10      	pop	{r4, pc}

0801b2ca <__sclose>:
 801b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ce:	f000 b84b 	b.w	801b368 <_close_r>

0801b2d2 <strcmp>:
 801b2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b2da:	2a01      	cmp	r2, #1
 801b2dc:	bf28      	it	cs
 801b2de:	429a      	cmpcs	r2, r3
 801b2e0:	d0f7      	beq.n	801b2d2 <strcmp>
 801b2e2:	1ad0      	subs	r0, r2, r3
 801b2e4:	4770      	bx	lr

0801b2e6 <strlen>:
 801b2e6:	4603      	mov	r3, r0
 801b2e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2ec:	2a00      	cmp	r2, #0
 801b2ee:	d1fb      	bne.n	801b2e8 <strlen+0x2>
 801b2f0:	1a18      	subs	r0, r3, r0
 801b2f2:	3801      	subs	r0, #1
 801b2f4:	4770      	bx	lr

0801b2f6 <strncmp>:
 801b2f6:	b510      	push	{r4, lr}
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	b172      	cbz	r2, 801b31a <strncmp+0x24>
 801b2fc:	3901      	subs	r1, #1
 801b2fe:	1884      	adds	r4, r0, r2
 801b300:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b304:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b308:	4290      	cmp	r0, r2
 801b30a:	d101      	bne.n	801b310 <strncmp+0x1a>
 801b30c:	42a3      	cmp	r3, r4
 801b30e:	d101      	bne.n	801b314 <strncmp+0x1e>
 801b310:	1a80      	subs	r0, r0, r2
 801b312:	bd10      	pop	{r4, pc}
 801b314:	2800      	cmp	r0, #0
 801b316:	d1f3      	bne.n	801b300 <strncmp+0xa>
 801b318:	e7fa      	b.n	801b310 <strncmp+0x1a>
 801b31a:	4610      	mov	r0, r2
 801b31c:	e7f9      	b.n	801b312 <strncmp+0x1c>

0801b31e <strncpy>:
 801b31e:	b510      	push	{r4, lr}
 801b320:	3901      	subs	r1, #1
 801b322:	4603      	mov	r3, r0
 801b324:	b132      	cbz	r2, 801b334 <strncpy+0x16>
 801b326:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b32a:	f803 4b01 	strb.w	r4, [r3], #1
 801b32e:	3a01      	subs	r2, #1
 801b330:	2c00      	cmp	r4, #0
 801b332:	d1f7      	bne.n	801b324 <strncpy+0x6>
 801b334:	441a      	add	r2, r3
 801b336:	2100      	movs	r1, #0
 801b338:	4293      	cmp	r3, r2
 801b33a:	d100      	bne.n	801b33e <strncpy+0x20>
 801b33c:	bd10      	pop	{r4, pc}
 801b33e:	f803 1b01 	strb.w	r1, [r3], #1
 801b342:	e7f9      	b.n	801b338 <strncpy+0x1a>

0801b344 <_write_r>:
 801b344:	b538      	push	{r3, r4, r5, lr}
 801b346:	4d07      	ldr	r5, [pc, #28]	; (801b364 <_write_r+0x20>)
 801b348:	4604      	mov	r4, r0
 801b34a:	4608      	mov	r0, r1
 801b34c:	4611      	mov	r1, r2
 801b34e:	2200      	movs	r2, #0
 801b350:	602a      	str	r2, [r5, #0]
 801b352:	461a      	mov	r2, r3
 801b354:	f000 fd04 	bl	801bd60 <_write>
 801b358:	1c43      	adds	r3, r0, #1
 801b35a:	d102      	bne.n	801b362 <_write_r+0x1e>
 801b35c:	682b      	ldr	r3, [r5, #0]
 801b35e:	b103      	cbz	r3, 801b362 <_write_r+0x1e>
 801b360:	6023      	str	r3, [r4, #0]
 801b362:	bd38      	pop	{r3, r4, r5, pc}
 801b364:	20000214 	.word	0x20000214

0801b368 <_close_r>:
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4d06      	ldr	r5, [pc, #24]	; (801b384 <_close_r+0x1c>)
 801b36c:	2300      	movs	r3, #0
 801b36e:	4604      	mov	r4, r0
 801b370:	4608      	mov	r0, r1
 801b372:	602b      	str	r3, [r5, #0]
 801b374:	f000 fcbe 	bl	801bcf4 <_close>
 801b378:	1c43      	adds	r3, r0, #1
 801b37a:	d102      	bne.n	801b382 <_close_r+0x1a>
 801b37c:	682b      	ldr	r3, [r5, #0]
 801b37e:	b103      	cbz	r3, 801b382 <_close_r+0x1a>
 801b380:	6023      	str	r3, [r4, #0]
 801b382:	bd38      	pop	{r3, r4, r5, pc}
 801b384:	20000214 	.word	0x20000214

0801b388 <_lseek_r>:
 801b388:	b538      	push	{r3, r4, r5, lr}
 801b38a:	4d07      	ldr	r5, [pc, #28]	; (801b3a8 <_lseek_r+0x20>)
 801b38c:	4604      	mov	r4, r0
 801b38e:	4608      	mov	r0, r1
 801b390:	4611      	mov	r1, r2
 801b392:	2200      	movs	r2, #0
 801b394:	602a      	str	r2, [r5, #0]
 801b396:	461a      	mov	r2, r3
 801b398:	f000 fcc4 	bl	801bd24 <_lseek>
 801b39c:	1c43      	adds	r3, r0, #1
 801b39e:	d102      	bne.n	801b3a6 <_lseek_r+0x1e>
 801b3a0:	682b      	ldr	r3, [r5, #0]
 801b3a2:	b103      	cbz	r3, 801b3a6 <_lseek_r+0x1e>
 801b3a4:	6023      	str	r3, [r4, #0]
 801b3a6:	bd38      	pop	{r3, r4, r5, pc}
 801b3a8:	20000214 	.word	0x20000214

0801b3ac <__malloc_lock>:
 801b3ac:	4801      	ldr	r0, [pc, #4]	; (801b3b4 <__malloc_lock+0x8>)
 801b3ae:	f7ff bdf5 	b.w	801af9c <__retarget_lock_acquire_recursive>
 801b3b2:	bf00      	nop
 801b3b4:	20000208 	.word	0x20000208

0801b3b8 <__malloc_unlock>:
 801b3b8:	4801      	ldr	r0, [pc, #4]	; (801b3c0 <__malloc_unlock+0x8>)
 801b3ba:	f7ff bdf0 	b.w	801af9e <__retarget_lock_release_recursive>
 801b3be:	bf00      	nop
 801b3c0:	20000208 	.word	0x20000208

0801b3c4 <__sfputc_r>:
 801b3c4:	6893      	ldr	r3, [r2, #8]
 801b3c6:	3b01      	subs	r3, #1
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	b410      	push	{r4}
 801b3cc:	6093      	str	r3, [r2, #8]
 801b3ce:	da07      	bge.n	801b3e0 <__sfputc_r+0x1c>
 801b3d0:	6994      	ldr	r4, [r2, #24]
 801b3d2:	42a3      	cmp	r3, r4
 801b3d4:	db01      	blt.n	801b3da <__sfputc_r+0x16>
 801b3d6:	290a      	cmp	r1, #10
 801b3d8:	d102      	bne.n	801b3e0 <__sfputc_r+0x1c>
 801b3da:	bc10      	pop	{r4}
 801b3dc:	f000 baf0 	b.w	801b9c0 <__swbuf_r>
 801b3e0:	6813      	ldr	r3, [r2, #0]
 801b3e2:	1c58      	adds	r0, r3, #1
 801b3e4:	6010      	str	r0, [r2, #0]
 801b3e6:	7019      	strb	r1, [r3, #0]
 801b3e8:	4608      	mov	r0, r1
 801b3ea:	bc10      	pop	{r4}
 801b3ec:	4770      	bx	lr

0801b3ee <__sfputs_r>:
 801b3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3f0:	4606      	mov	r6, r0
 801b3f2:	460f      	mov	r7, r1
 801b3f4:	4614      	mov	r4, r2
 801b3f6:	18d5      	adds	r5, r2, r3
 801b3f8:	42ac      	cmp	r4, r5
 801b3fa:	d101      	bne.n	801b400 <__sfputs_r+0x12>
 801b3fc:	2000      	movs	r0, #0
 801b3fe:	e007      	b.n	801b410 <__sfputs_r+0x22>
 801b400:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b404:	463a      	mov	r2, r7
 801b406:	4630      	mov	r0, r6
 801b408:	f7ff ffdc 	bl	801b3c4 <__sfputc_r>
 801b40c:	1c43      	adds	r3, r0, #1
 801b40e:	d1f3      	bne.n	801b3f8 <__sfputs_r+0xa>
 801b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b414 <_vfiprintf_r>:
 801b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b418:	460d      	mov	r5, r1
 801b41a:	b09d      	sub	sp, #116	; 0x74
 801b41c:	4614      	mov	r4, r2
 801b41e:	4698      	mov	r8, r3
 801b420:	4606      	mov	r6, r0
 801b422:	b118      	cbz	r0, 801b42c <_vfiprintf_r+0x18>
 801b424:	6983      	ldr	r3, [r0, #24]
 801b426:	b90b      	cbnz	r3, 801b42c <_vfiprintf_r+0x18>
 801b428:	f7ff fd1a 	bl	801ae60 <__sinit>
 801b42c:	4b89      	ldr	r3, [pc, #548]	; (801b654 <_vfiprintf_r+0x240>)
 801b42e:	429d      	cmp	r5, r3
 801b430:	d11b      	bne.n	801b46a <_vfiprintf_r+0x56>
 801b432:	6875      	ldr	r5, [r6, #4]
 801b434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b436:	07d9      	lsls	r1, r3, #31
 801b438:	d405      	bmi.n	801b446 <_vfiprintf_r+0x32>
 801b43a:	89ab      	ldrh	r3, [r5, #12]
 801b43c:	059a      	lsls	r2, r3, #22
 801b43e:	d402      	bmi.n	801b446 <_vfiprintf_r+0x32>
 801b440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b442:	f7ff fdab 	bl	801af9c <__retarget_lock_acquire_recursive>
 801b446:	89ab      	ldrh	r3, [r5, #12]
 801b448:	071b      	lsls	r3, r3, #28
 801b44a:	d501      	bpl.n	801b450 <_vfiprintf_r+0x3c>
 801b44c:	692b      	ldr	r3, [r5, #16]
 801b44e:	b9eb      	cbnz	r3, 801b48c <_vfiprintf_r+0x78>
 801b450:	4629      	mov	r1, r5
 801b452:	4630      	mov	r0, r6
 801b454:	f000 fb06 	bl	801ba64 <__swsetup_r>
 801b458:	b1c0      	cbz	r0, 801b48c <_vfiprintf_r+0x78>
 801b45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b45c:	07dc      	lsls	r4, r3, #31
 801b45e:	d50e      	bpl.n	801b47e <_vfiprintf_r+0x6a>
 801b460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b464:	b01d      	add	sp, #116	; 0x74
 801b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46a:	4b7b      	ldr	r3, [pc, #492]	; (801b658 <_vfiprintf_r+0x244>)
 801b46c:	429d      	cmp	r5, r3
 801b46e:	d101      	bne.n	801b474 <_vfiprintf_r+0x60>
 801b470:	68b5      	ldr	r5, [r6, #8]
 801b472:	e7df      	b.n	801b434 <_vfiprintf_r+0x20>
 801b474:	4b79      	ldr	r3, [pc, #484]	; (801b65c <_vfiprintf_r+0x248>)
 801b476:	429d      	cmp	r5, r3
 801b478:	bf08      	it	eq
 801b47a:	68f5      	ldreq	r5, [r6, #12]
 801b47c:	e7da      	b.n	801b434 <_vfiprintf_r+0x20>
 801b47e:	89ab      	ldrh	r3, [r5, #12]
 801b480:	0598      	lsls	r0, r3, #22
 801b482:	d4ed      	bmi.n	801b460 <_vfiprintf_r+0x4c>
 801b484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b486:	f7ff fd8a 	bl	801af9e <__retarget_lock_release_recursive>
 801b48a:	e7e9      	b.n	801b460 <_vfiprintf_r+0x4c>
 801b48c:	2300      	movs	r3, #0
 801b48e:	9309      	str	r3, [sp, #36]	; 0x24
 801b490:	2320      	movs	r3, #32
 801b492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b496:	f8cd 800c 	str.w	r8, [sp, #12]
 801b49a:	2330      	movs	r3, #48	; 0x30
 801b49c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b660 <_vfiprintf_r+0x24c>
 801b4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4a4:	f04f 0901 	mov.w	r9, #1
 801b4a8:	4623      	mov	r3, r4
 801b4aa:	469a      	mov	sl, r3
 801b4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4b0:	b10a      	cbz	r2, 801b4b6 <_vfiprintf_r+0xa2>
 801b4b2:	2a25      	cmp	r2, #37	; 0x25
 801b4b4:	d1f9      	bne.n	801b4aa <_vfiprintf_r+0x96>
 801b4b6:	ebba 0b04 	subs.w	fp, sl, r4
 801b4ba:	d00b      	beq.n	801b4d4 <_vfiprintf_r+0xc0>
 801b4bc:	465b      	mov	r3, fp
 801b4be:	4622      	mov	r2, r4
 801b4c0:	4629      	mov	r1, r5
 801b4c2:	4630      	mov	r0, r6
 801b4c4:	f7ff ff93 	bl	801b3ee <__sfputs_r>
 801b4c8:	3001      	adds	r0, #1
 801b4ca:	f000 80aa 	beq.w	801b622 <_vfiprintf_r+0x20e>
 801b4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4d0:	445a      	add	r2, fp
 801b4d2:	9209      	str	r2, [sp, #36]	; 0x24
 801b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	f000 80a2 	beq.w	801b622 <_vfiprintf_r+0x20e>
 801b4de:	2300      	movs	r3, #0
 801b4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b4e8:	f10a 0a01 	add.w	sl, sl, #1
 801b4ec:	9304      	str	r3, [sp, #16]
 801b4ee:	9307      	str	r3, [sp, #28]
 801b4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b4f4:	931a      	str	r3, [sp, #104]	; 0x68
 801b4f6:	4654      	mov	r4, sl
 801b4f8:	2205      	movs	r2, #5
 801b4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4fe:	4858      	ldr	r0, [pc, #352]	; (801b660 <_vfiprintf_r+0x24c>)
 801b500:	f000 fb86 	bl	801bc10 <memchr>
 801b504:	9a04      	ldr	r2, [sp, #16]
 801b506:	b9d8      	cbnz	r0, 801b540 <_vfiprintf_r+0x12c>
 801b508:	06d1      	lsls	r1, r2, #27
 801b50a:	bf44      	itt	mi
 801b50c:	2320      	movmi	r3, #32
 801b50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b512:	0713      	lsls	r3, r2, #28
 801b514:	bf44      	itt	mi
 801b516:	232b      	movmi	r3, #43	; 0x2b
 801b518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b51c:	f89a 3000 	ldrb.w	r3, [sl]
 801b520:	2b2a      	cmp	r3, #42	; 0x2a
 801b522:	d015      	beq.n	801b550 <_vfiprintf_r+0x13c>
 801b524:	9a07      	ldr	r2, [sp, #28]
 801b526:	4654      	mov	r4, sl
 801b528:	2000      	movs	r0, #0
 801b52a:	f04f 0c0a 	mov.w	ip, #10
 801b52e:	4621      	mov	r1, r4
 801b530:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b534:	3b30      	subs	r3, #48	; 0x30
 801b536:	2b09      	cmp	r3, #9
 801b538:	d94e      	bls.n	801b5d8 <_vfiprintf_r+0x1c4>
 801b53a:	b1b0      	cbz	r0, 801b56a <_vfiprintf_r+0x156>
 801b53c:	9207      	str	r2, [sp, #28]
 801b53e:	e014      	b.n	801b56a <_vfiprintf_r+0x156>
 801b540:	eba0 0308 	sub.w	r3, r0, r8
 801b544:	fa09 f303 	lsl.w	r3, r9, r3
 801b548:	4313      	orrs	r3, r2
 801b54a:	9304      	str	r3, [sp, #16]
 801b54c:	46a2      	mov	sl, r4
 801b54e:	e7d2      	b.n	801b4f6 <_vfiprintf_r+0xe2>
 801b550:	9b03      	ldr	r3, [sp, #12]
 801b552:	1d19      	adds	r1, r3, #4
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	9103      	str	r1, [sp, #12]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	bfbb      	ittet	lt
 801b55c:	425b      	neglt	r3, r3
 801b55e:	f042 0202 	orrlt.w	r2, r2, #2
 801b562:	9307      	strge	r3, [sp, #28]
 801b564:	9307      	strlt	r3, [sp, #28]
 801b566:	bfb8      	it	lt
 801b568:	9204      	strlt	r2, [sp, #16]
 801b56a:	7823      	ldrb	r3, [r4, #0]
 801b56c:	2b2e      	cmp	r3, #46	; 0x2e
 801b56e:	d10c      	bne.n	801b58a <_vfiprintf_r+0x176>
 801b570:	7863      	ldrb	r3, [r4, #1]
 801b572:	2b2a      	cmp	r3, #42	; 0x2a
 801b574:	d135      	bne.n	801b5e2 <_vfiprintf_r+0x1ce>
 801b576:	9b03      	ldr	r3, [sp, #12]
 801b578:	1d1a      	adds	r2, r3, #4
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	9203      	str	r2, [sp, #12]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	bfb8      	it	lt
 801b582:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b586:	3402      	adds	r4, #2
 801b588:	9305      	str	r3, [sp, #20]
 801b58a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801b664 <_vfiprintf_r+0x250>
 801b58e:	7821      	ldrb	r1, [r4, #0]
 801b590:	2203      	movs	r2, #3
 801b592:	4650      	mov	r0, sl
 801b594:	f000 fb3c 	bl	801bc10 <memchr>
 801b598:	b140      	cbz	r0, 801b5ac <_vfiprintf_r+0x198>
 801b59a:	2340      	movs	r3, #64	; 0x40
 801b59c:	eba0 000a 	sub.w	r0, r0, sl
 801b5a0:	fa03 f000 	lsl.w	r0, r3, r0
 801b5a4:	9b04      	ldr	r3, [sp, #16]
 801b5a6:	4303      	orrs	r3, r0
 801b5a8:	3401      	adds	r4, #1
 801b5aa:	9304      	str	r3, [sp, #16]
 801b5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5b0:	482d      	ldr	r0, [pc, #180]	; (801b668 <_vfiprintf_r+0x254>)
 801b5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5b6:	2206      	movs	r2, #6
 801b5b8:	f000 fb2a 	bl	801bc10 <memchr>
 801b5bc:	2800      	cmp	r0, #0
 801b5be:	d03f      	beq.n	801b640 <_vfiprintf_r+0x22c>
 801b5c0:	4b2a      	ldr	r3, [pc, #168]	; (801b66c <_vfiprintf_r+0x258>)
 801b5c2:	bb1b      	cbnz	r3, 801b60c <_vfiprintf_r+0x1f8>
 801b5c4:	9b03      	ldr	r3, [sp, #12]
 801b5c6:	3307      	adds	r3, #7
 801b5c8:	f023 0307 	bic.w	r3, r3, #7
 801b5cc:	3308      	adds	r3, #8
 801b5ce:	9303      	str	r3, [sp, #12]
 801b5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5d2:	443b      	add	r3, r7
 801b5d4:	9309      	str	r3, [sp, #36]	; 0x24
 801b5d6:	e767      	b.n	801b4a8 <_vfiprintf_r+0x94>
 801b5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b5dc:	460c      	mov	r4, r1
 801b5de:	2001      	movs	r0, #1
 801b5e0:	e7a5      	b.n	801b52e <_vfiprintf_r+0x11a>
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	3401      	adds	r4, #1
 801b5e6:	9305      	str	r3, [sp, #20]
 801b5e8:	4619      	mov	r1, r3
 801b5ea:	f04f 0c0a 	mov.w	ip, #10
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5f4:	3a30      	subs	r2, #48	; 0x30
 801b5f6:	2a09      	cmp	r2, #9
 801b5f8:	d903      	bls.n	801b602 <_vfiprintf_r+0x1ee>
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d0c5      	beq.n	801b58a <_vfiprintf_r+0x176>
 801b5fe:	9105      	str	r1, [sp, #20]
 801b600:	e7c3      	b.n	801b58a <_vfiprintf_r+0x176>
 801b602:	fb0c 2101 	mla	r1, ip, r1, r2
 801b606:	4604      	mov	r4, r0
 801b608:	2301      	movs	r3, #1
 801b60a:	e7f0      	b.n	801b5ee <_vfiprintf_r+0x1da>
 801b60c:	ab03      	add	r3, sp, #12
 801b60e:	9300      	str	r3, [sp, #0]
 801b610:	462a      	mov	r2, r5
 801b612:	4b17      	ldr	r3, [pc, #92]	; (801b670 <_vfiprintf_r+0x25c>)
 801b614:	a904      	add	r1, sp, #16
 801b616:	4630      	mov	r0, r6
 801b618:	f3af 8000 	nop.w
 801b61c:	4607      	mov	r7, r0
 801b61e:	1c78      	adds	r0, r7, #1
 801b620:	d1d6      	bne.n	801b5d0 <_vfiprintf_r+0x1bc>
 801b622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b624:	07d9      	lsls	r1, r3, #31
 801b626:	d405      	bmi.n	801b634 <_vfiprintf_r+0x220>
 801b628:	89ab      	ldrh	r3, [r5, #12]
 801b62a:	059a      	lsls	r2, r3, #22
 801b62c:	d402      	bmi.n	801b634 <_vfiprintf_r+0x220>
 801b62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b630:	f7ff fcb5 	bl	801af9e <__retarget_lock_release_recursive>
 801b634:	89ab      	ldrh	r3, [r5, #12]
 801b636:	065b      	lsls	r3, r3, #25
 801b638:	f53f af12 	bmi.w	801b460 <_vfiprintf_r+0x4c>
 801b63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b63e:	e711      	b.n	801b464 <_vfiprintf_r+0x50>
 801b640:	ab03      	add	r3, sp, #12
 801b642:	9300      	str	r3, [sp, #0]
 801b644:	462a      	mov	r2, r5
 801b646:	4b0a      	ldr	r3, [pc, #40]	; (801b670 <_vfiprintf_r+0x25c>)
 801b648:	a904      	add	r1, sp, #16
 801b64a:	4630      	mov	r0, r6
 801b64c:	f000 f880 	bl	801b750 <_printf_i>
 801b650:	e7e4      	b.n	801b61c <_vfiprintf_r+0x208>
 801b652:	bf00      	nop
 801b654:	0802ae78 	.word	0x0802ae78
 801b658:	0802ae98 	.word	0x0802ae98
 801b65c:	0802ae58 	.word	0x0802ae58
 801b660:	0802aebc 	.word	0x0802aebc
 801b664:	0802aec2 	.word	0x0802aec2
 801b668:	0802aec6 	.word	0x0802aec6
 801b66c:	00000000 	.word	0x00000000
 801b670:	0801b3ef 	.word	0x0801b3ef

0801b674 <_printf_common>:
 801b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b678:	4616      	mov	r6, r2
 801b67a:	4699      	mov	r9, r3
 801b67c:	688a      	ldr	r2, [r1, #8]
 801b67e:	690b      	ldr	r3, [r1, #16]
 801b680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b684:	4293      	cmp	r3, r2
 801b686:	bfb8      	it	lt
 801b688:	4613      	movlt	r3, r2
 801b68a:	6033      	str	r3, [r6, #0]
 801b68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b690:	4607      	mov	r7, r0
 801b692:	460c      	mov	r4, r1
 801b694:	b10a      	cbz	r2, 801b69a <_printf_common+0x26>
 801b696:	3301      	adds	r3, #1
 801b698:	6033      	str	r3, [r6, #0]
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	0699      	lsls	r1, r3, #26
 801b69e:	bf42      	ittt	mi
 801b6a0:	6833      	ldrmi	r3, [r6, #0]
 801b6a2:	3302      	addmi	r3, #2
 801b6a4:	6033      	strmi	r3, [r6, #0]
 801b6a6:	6825      	ldr	r5, [r4, #0]
 801b6a8:	f015 0506 	ands.w	r5, r5, #6
 801b6ac:	d106      	bne.n	801b6bc <_printf_common+0x48>
 801b6ae:	f104 0a19 	add.w	sl, r4, #25
 801b6b2:	68e3      	ldr	r3, [r4, #12]
 801b6b4:	6832      	ldr	r2, [r6, #0]
 801b6b6:	1a9b      	subs	r3, r3, r2
 801b6b8:	42ab      	cmp	r3, r5
 801b6ba:	dc26      	bgt.n	801b70a <_printf_common+0x96>
 801b6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b6c0:	1e13      	subs	r3, r2, #0
 801b6c2:	6822      	ldr	r2, [r4, #0]
 801b6c4:	bf18      	it	ne
 801b6c6:	2301      	movne	r3, #1
 801b6c8:	0692      	lsls	r2, r2, #26
 801b6ca:	d42b      	bmi.n	801b724 <_printf_common+0xb0>
 801b6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6d0:	4649      	mov	r1, r9
 801b6d2:	4638      	mov	r0, r7
 801b6d4:	47c0      	blx	r8
 801b6d6:	3001      	adds	r0, #1
 801b6d8:	d01e      	beq.n	801b718 <_printf_common+0xa4>
 801b6da:	6823      	ldr	r3, [r4, #0]
 801b6dc:	68e5      	ldr	r5, [r4, #12]
 801b6de:	6832      	ldr	r2, [r6, #0]
 801b6e0:	f003 0306 	and.w	r3, r3, #6
 801b6e4:	2b04      	cmp	r3, #4
 801b6e6:	bf08      	it	eq
 801b6e8:	1aad      	subeq	r5, r5, r2
 801b6ea:	68a3      	ldr	r3, [r4, #8]
 801b6ec:	6922      	ldr	r2, [r4, #16]
 801b6ee:	bf0c      	ite	eq
 801b6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b6f4:	2500      	movne	r5, #0
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	bfc4      	itt	gt
 801b6fa:	1a9b      	subgt	r3, r3, r2
 801b6fc:	18ed      	addgt	r5, r5, r3
 801b6fe:	2600      	movs	r6, #0
 801b700:	341a      	adds	r4, #26
 801b702:	42b5      	cmp	r5, r6
 801b704:	d11a      	bne.n	801b73c <_printf_common+0xc8>
 801b706:	2000      	movs	r0, #0
 801b708:	e008      	b.n	801b71c <_printf_common+0xa8>
 801b70a:	2301      	movs	r3, #1
 801b70c:	4652      	mov	r2, sl
 801b70e:	4649      	mov	r1, r9
 801b710:	4638      	mov	r0, r7
 801b712:	47c0      	blx	r8
 801b714:	3001      	adds	r0, #1
 801b716:	d103      	bne.n	801b720 <_printf_common+0xac>
 801b718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b720:	3501      	adds	r5, #1
 801b722:	e7c6      	b.n	801b6b2 <_printf_common+0x3e>
 801b724:	18e1      	adds	r1, r4, r3
 801b726:	1c5a      	adds	r2, r3, #1
 801b728:	2030      	movs	r0, #48	; 0x30
 801b72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b72e:	4422      	add	r2, r4
 801b730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b738:	3302      	adds	r3, #2
 801b73a:	e7c7      	b.n	801b6cc <_printf_common+0x58>
 801b73c:	2301      	movs	r3, #1
 801b73e:	4622      	mov	r2, r4
 801b740:	4649      	mov	r1, r9
 801b742:	4638      	mov	r0, r7
 801b744:	47c0      	blx	r8
 801b746:	3001      	adds	r0, #1
 801b748:	d0e6      	beq.n	801b718 <_printf_common+0xa4>
 801b74a:	3601      	adds	r6, #1
 801b74c:	e7d9      	b.n	801b702 <_printf_common+0x8e>
	...

0801b750 <_printf_i>:
 801b750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b754:	7e0f      	ldrb	r7, [r1, #24]
 801b756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b758:	2f78      	cmp	r7, #120	; 0x78
 801b75a:	4691      	mov	r9, r2
 801b75c:	4680      	mov	r8, r0
 801b75e:	460c      	mov	r4, r1
 801b760:	469a      	mov	sl, r3
 801b762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b766:	d807      	bhi.n	801b778 <_printf_i+0x28>
 801b768:	2f62      	cmp	r7, #98	; 0x62
 801b76a:	d80a      	bhi.n	801b782 <_printf_i+0x32>
 801b76c:	2f00      	cmp	r7, #0
 801b76e:	f000 80d8 	beq.w	801b922 <_printf_i+0x1d2>
 801b772:	2f58      	cmp	r7, #88	; 0x58
 801b774:	f000 80a3 	beq.w	801b8be <_printf_i+0x16e>
 801b778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b780:	e03a      	b.n	801b7f8 <_printf_i+0xa8>
 801b782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b786:	2b15      	cmp	r3, #21
 801b788:	d8f6      	bhi.n	801b778 <_printf_i+0x28>
 801b78a:	a101      	add	r1, pc, #4	; (adr r1, 801b790 <_printf_i+0x40>)
 801b78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b790:	0801b7e9 	.word	0x0801b7e9
 801b794:	0801b7fd 	.word	0x0801b7fd
 801b798:	0801b779 	.word	0x0801b779
 801b79c:	0801b779 	.word	0x0801b779
 801b7a0:	0801b779 	.word	0x0801b779
 801b7a4:	0801b779 	.word	0x0801b779
 801b7a8:	0801b7fd 	.word	0x0801b7fd
 801b7ac:	0801b779 	.word	0x0801b779
 801b7b0:	0801b779 	.word	0x0801b779
 801b7b4:	0801b779 	.word	0x0801b779
 801b7b8:	0801b779 	.word	0x0801b779
 801b7bc:	0801b909 	.word	0x0801b909
 801b7c0:	0801b82d 	.word	0x0801b82d
 801b7c4:	0801b8eb 	.word	0x0801b8eb
 801b7c8:	0801b779 	.word	0x0801b779
 801b7cc:	0801b779 	.word	0x0801b779
 801b7d0:	0801b92b 	.word	0x0801b92b
 801b7d4:	0801b779 	.word	0x0801b779
 801b7d8:	0801b82d 	.word	0x0801b82d
 801b7dc:	0801b779 	.word	0x0801b779
 801b7e0:	0801b779 	.word	0x0801b779
 801b7e4:	0801b8f3 	.word	0x0801b8f3
 801b7e8:	682b      	ldr	r3, [r5, #0]
 801b7ea:	1d1a      	adds	r2, r3, #4
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	602a      	str	r2, [r5, #0]
 801b7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b7f8:	2301      	movs	r3, #1
 801b7fa:	e0a3      	b.n	801b944 <_printf_i+0x1f4>
 801b7fc:	6820      	ldr	r0, [r4, #0]
 801b7fe:	6829      	ldr	r1, [r5, #0]
 801b800:	0606      	lsls	r6, r0, #24
 801b802:	f101 0304 	add.w	r3, r1, #4
 801b806:	d50a      	bpl.n	801b81e <_printf_i+0xce>
 801b808:	680e      	ldr	r6, [r1, #0]
 801b80a:	602b      	str	r3, [r5, #0]
 801b80c:	2e00      	cmp	r6, #0
 801b80e:	da03      	bge.n	801b818 <_printf_i+0xc8>
 801b810:	232d      	movs	r3, #45	; 0x2d
 801b812:	4276      	negs	r6, r6
 801b814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b818:	485e      	ldr	r0, [pc, #376]	; (801b994 <_printf_i+0x244>)
 801b81a:	230a      	movs	r3, #10
 801b81c:	e019      	b.n	801b852 <_printf_i+0x102>
 801b81e:	680e      	ldr	r6, [r1, #0]
 801b820:	602b      	str	r3, [r5, #0]
 801b822:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b826:	bf18      	it	ne
 801b828:	b236      	sxthne	r6, r6
 801b82a:	e7ef      	b.n	801b80c <_printf_i+0xbc>
 801b82c:	682b      	ldr	r3, [r5, #0]
 801b82e:	6820      	ldr	r0, [r4, #0]
 801b830:	1d19      	adds	r1, r3, #4
 801b832:	6029      	str	r1, [r5, #0]
 801b834:	0601      	lsls	r1, r0, #24
 801b836:	d501      	bpl.n	801b83c <_printf_i+0xec>
 801b838:	681e      	ldr	r6, [r3, #0]
 801b83a:	e002      	b.n	801b842 <_printf_i+0xf2>
 801b83c:	0646      	lsls	r6, r0, #25
 801b83e:	d5fb      	bpl.n	801b838 <_printf_i+0xe8>
 801b840:	881e      	ldrh	r6, [r3, #0]
 801b842:	4854      	ldr	r0, [pc, #336]	; (801b994 <_printf_i+0x244>)
 801b844:	2f6f      	cmp	r7, #111	; 0x6f
 801b846:	bf0c      	ite	eq
 801b848:	2308      	moveq	r3, #8
 801b84a:	230a      	movne	r3, #10
 801b84c:	2100      	movs	r1, #0
 801b84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b852:	6865      	ldr	r5, [r4, #4]
 801b854:	60a5      	str	r5, [r4, #8]
 801b856:	2d00      	cmp	r5, #0
 801b858:	bfa2      	ittt	ge
 801b85a:	6821      	ldrge	r1, [r4, #0]
 801b85c:	f021 0104 	bicge.w	r1, r1, #4
 801b860:	6021      	strge	r1, [r4, #0]
 801b862:	b90e      	cbnz	r6, 801b868 <_printf_i+0x118>
 801b864:	2d00      	cmp	r5, #0
 801b866:	d04d      	beq.n	801b904 <_printf_i+0x1b4>
 801b868:	4615      	mov	r5, r2
 801b86a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b86e:	fb03 6711 	mls	r7, r3, r1, r6
 801b872:	5dc7      	ldrb	r7, [r0, r7]
 801b874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b878:	4637      	mov	r7, r6
 801b87a:	42bb      	cmp	r3, r7
 801b87c:	460e      	mov	r6, r1
 801b87e:	d9f4      	bls.n	801b86a <_printf_i+0x11a>
 801b880:	2b08      	cmp	r3, #8
 801b882:	d10b      	bne.n	801b89c <_printf_i+0x14c>
 801b884:	6823      	ldr	r3, [r4, #0]
 801b886:	07de      	lsls	r6, r3, #31
 801b888:	d508      	bpl.n	801b89c <_printf_i+0x14c>
 801b88a:	6923      	ldr	r3, [r4, #16]
 801b88c:	6861      	ldr	r1, [r4, #4]
 801b88e:	4299      	cmp	r1, r3
 801b890:	bfde      	ittt	le
 801b892:	2330      	movle	r3, #48	; 0x30
 801b894:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b898:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b89c:	1b52      	subs	r2, r2, r5
 801b89e:	6122      	str	r2, [r4, #16]
 801b8a0:	f8cd a000 	str.w	sl, [sp]
 801b8a4:	464b      	mov	r3, r9
 801b8a6:	aa03      	add	r2, sp, #12
 801b8a8:	4621      	mov	r1, r4
 801b8aa:	4640      	mov	r0, r8
 801b8ac:	f7ff fee2 	bl	801b674 <_printf_common>
 801b8b0:	3001      	adds	r0, #1
 801b8b2:	d14c      	bne.n	801b94e <_printf_i+0x1fe>
 801b8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b8b8:	b004      	add	sp, #16
 801b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8be:	4835      	ldr	r0, [pc, #212]	; (801b994 <_printf_i+0x244>)
 801b8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b8c4:	6829      	ldr	r1, [r5, #0]
 801b8c6:	6823      	ldr	r3, [r4, #0]
 801b8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b8cc:	6029      	str	r1, [r5, #0]
 801b8ce:	061d      	lsls	r5, r3, #24
 801b8d0:	d514      	bpl.n	801b8fc <_printf_i+0x1ac>
 801b8d2:	07df      	lsls	r7, r3, #31
 801b8d4:	bf44      	itt	mi
 801b8d6:	f043 0320 	orrmi.w	r3, r3, #32
 801b8da:	6023      	strmi	r3, [r4, #0]
 801b8dc:	b91e      	cbnz	r6, 801b8e6 <_printf_i+0x196>
 801b8de:	6823      	ldr	r3, [r4, #0]
 801b8e0:	f023 0320 	bic.w	r3, r3, #32
 801b8e4:	6023      	str	r3, [r4, #0]
 801b8e6:	2310      	movs	r3, #16
 801b8e8:	e7b0      	b.n	801b84c <_printf_i+0xfc>
 801b8ea:	6823      	ldr	r3, [r4, #0]
 801b8ec:	f043 0320 	orr.w	r3, r3, #32
 801b8f0:	6023      	str	r3, [r4, #0]
 801b8f2:	2378      	movs	r3, #120	; 0x78
 801b8f4:	4828      	ldr	r0, [pc, #160]	; (801b998 <_printf_i+0x248>)
 801b8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b8fa:	e7e3      	b.n	801b8c4 <_printf_i+0x174>
 801b8fc:	0659      	lsls	r1, r3, #25
 801b8fe:	bf48      	it	mi
 801b900:	b2b6      	uxthmi	r6, r6
 801b902:	e7e6      	b.n	801b8d2 <_printf_i+0x182>
 801b904:	4615      	mov	r5, r2
 801b906:	e7bb      	b.n	801b880 <_printf_i+0x130>
 801b908:	682b      	ldr	r3, [r5, #0]
 801b90a:	6826      	ldr	r6, [r4, #0]
 801b90c:	6961      	ldr	r1, [r4, #20]
 801b90e:	1d18      	adds	r0, r3, #4
 801b910:	6028      	str	r0, [r5, #0]
 801b912:	0635      	lsls	r5, r6, #24
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	d501      	bpl.n	801b91c <_printf_i+0x1cc>
 801b918:	6019      	str	r1, [r3, #0]
 801b91a:	e002      	b.n	801b922 <_printf_i+0x1d2>
 801b91c:	0670      	lsls	r0, r6, #25
 801b91e:	d5fb      	bpl.n	801b918 <_printf_i+0x1c8>
 801b920:	8019      	strh	r1, [r3, #0]
 801b922:	2300      	movs	r3, #0
 801b924:	6123      	str	r3, [r4, #16]
 801b926:	4615      	mov	r5, r2
 801b928:	e7ba      	b.n	801b8a0 <_printf_i+0x150>
 801b92a:	682b      	ldr	r3, [r5, #0]
 801b92c:	1d1a      	adds	r2, r3, #4
 801b92e:	602a      	str	r2, [r5, #0]
 801b930:	681d      	ldr	r5, [r3, #0]
 801b932:	6862      	ldr	r2, [r4, #4]
 801b934:	2100      	movs	r1, #0
 801b936:	4628      	mov	r0, r5
 801b938:	f000 f96a 	bl	801bc10 <memchr>
 801b93c:	b108      	cbz	r0, 801b942 <_printf_i+0x1f2>
 801b93e:	1b40      	subs	r0, r0, r5
 801b940:	6060      	str	r0, [r4, #4]
 801b942:	6863      	ldr	r3, [r4, #4]
 801b944:	6123      	str	r3, [r4, #16]
 801b946:	2300      	movs	r3, #0
 801b948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b94c:	e7a8      	b.n	801b8a0 <_printf_i+0x150>
 801b94e:	6923      	ldr	r3, [r4, #16]
 801b950:	462a      	mov	r2, r5
 801b952:	4649      	mov	r1, r9
 801b954:	4640      	mov	r0, r8
 801b956:	47d0      	blx	sl
 801b958:	3001      	adds	r0, #1
 801b95a:	d0ab      	beq.n	801b8b4 <_printf_i+0x164>
 801b95c:	6823      	ldr	r3, [r4, #0]
 801b95e:	079b      	lsls	r3, r3, #30
 801b960:	d413      	bmi.n	801b98a <_printf_i+0x23a>
 801b962:	68e0      	ldr	r0, [r4, #12]
 801b964:	9b03      	ldr	r3, [sp, #12]
 801b966:	4298      	cmp	r0, r3
 801b968:	bfb8      	it	lt
 801b96a:	4618      	movlt	r0, r3
 801b96c:	e7a4      	b.n	801b8b8 <_printf_i+0x168>
 801b96e:	2301      	movs	r3, #1
 801b970:	4632      	mov	r2, r6
 801b972:	4649      	mov	r1, r9
 801b974:	4640      	mov	r0, r8
 801b976:	47d0      	blx	sl
 801b978:	3001      	adds	r0, #1
 801b97a:	d09b      	beq.n	801b8b4 <_printf_i+0x164>
 801b97c:	3501      	adds	r5, #1
 801b97e:	68e3      	ldr	r3, [r4, #12]
 801b980:	9903      	ldr	r1, [sp, #12]
 801b982:	1a5b      	subs	r3, r3, r1
 801b984:	42ab      	cmp	r3, r5
 801b986:	dcf2      	bgt.n	801b96e <_printf_i+0x21e>
 801b988:	e7eb      	b.n	801b962 <_printf_i+0x212>
 801b98a:	2500      	movs	r5, #0
 801b98c:	f104 0619 	add.w	r6, r4, #25
 801b990:	e7f5      	b.n	801b97e <_printf_i+0x22e>
 801b992:	bf00      	nop
 801b994:	0802aecd 	.word	0x0802aecd
 801b998:	0802aede 	.word	0x0802aede

0801b99c <_read_r>:
 801b99c:	b538      	push	{r3, r4, r5, lr}
 801b99e:	4d07      	ldr	r5, [pc, #28]	; (801b9bc <_read_r+0x20>)
 801b9a0:	4604      	mov	r4, r0
 801b9a2:	4608      	mov	r0, r1
 801b9a4:	4611      	mov	r1, r2
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	602a      	str	r2, [r5, #0]
 801b9aa:	461a      	mov	r2, r3
 801b9ac:	f000 f9c2 	bl	801bd34 <_read>
 801b9b0:	1c43      	adds	r3, r0, #1
 801b9b2:	d102      	bne.n	801b9ba <_read_r+0x1e>
 801b9b4:	682b      	ldr	r3, [r5, #0]
 801b9b6:	b103      	cbz	r3, 801b9ba <_read_r+0x1e>
 801b9b8:	6023      	str	r3, [r4, #0]
 801b9ba:	bd38      	pop	{r3, r4, r5, pc}
 801b9bc:	20000214 	.word	0x20000214

0801b9c0 <__swbuf_r>:
 801b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9c2:	460e      	mov	r6, r1
 801b9c4:	4614      	mov	r4, r2
 801b9c6:	4605      	mov	r5, r0
 801b9c8:	b118      	cbz	r0, 801b9d2 <__swbuf_r+0x12>
 801b9ca:	6983      	ldr	r3, [r0, #24]
 801b9cc:	b90b      	cbnz	r3, 801b9d2 <__swbuf_r+0x12>
 801b9ce:	f7ff fa47 	bl	801ae60 <__sinit>
 801b9d2:	4b21      	ldr	r3, [pc, #132]	; (801ba58 <__swbuf_r+0x98>)
 801b9d4:	429c      	cmp	r4, r3
 801b9d6:	d12b      	bne.n	801ba30 <__swbuf_r+0x70>
 801b9d8:	686c      	ldr	r4, [r5, #4]
 801b9da:	69a3      	ldr	r3, [r4, #24]
 801b9dc:	60a3      	str	r3, [r4, #8]
 801b9de:	89a3      	ldrh	r3, [r4, #12]
 801b9e0:	071a      	lsls	r2, r3, #28
 801b9e2:	d52f      	bpl.n	801ba44 <__swbuf_r+0x84>
 801b9e4:	6923      	ldr	r3, [r4, #16]
 801b9e6:	b36b      	cbz	r3, 801ba44 <__swbuf_r+0x84>
 801b9e8:	6923      	ldr	r3, [r4, #16]
 801b9ea:	6820      	ldr	r0, [r4, #0]
 801b9ec:	1ac0      	subs	r0, r0, r3
 801b9ee:	6963      	ldr	r3, [r4, #20]
 801b9f0:	b2f6      	uxtb	r6, r6
 801b9f2:	4283      	cmp	r3, r0
 801b9f4:	4637      	mov	r7, r6
 801b9f6:	dc04      	bgt.n	801ba02 <__swbuf_r+0x42>
 801b9f8:	4621      	mov	r1, r4
 801b9fa:	4628      	mov	r0, r5
 801b9fc:	f7ff f98a 	bl	801ad14 <_fflush_r>
 801ba00:	bb30      	cbnz	r0, 801ba50 <__swbuf_r+0x90>
 801ba02:	68a3      	ldr	r3, [r4, #8]
 801ba04:	3b01      	subs	r3, #1
 801ba06:	60a3      	str	r3, [r4, #8]
 801ba08:	6823      	ldr	r3, [r4, #0]
 801ba0a:	1c5a      	adds	r2, r3, #1
 801ba0c:	6022      	str	r2, [r4, #0]
 801ba0e:	701e      	strb	r6, [r3, #0]
 801ba10:	6963      	ldr	r3, [r4, #20]
 801ba12:	3001      	adds	r0, #1
 801ba14:	4283      	cmp	r3, r0
 801ba16:	d004      	beq.n	801ba22 <__swbuf_r+0x62>
 801ba18:	89a3      	ldrh	r3, [r4, #12]
 801ba1a:	07db      	lsls	r3, r3, #31
 801ba1c:	d506      	bpl.n	801ba2c <__swbuf_r+0x6c>
 801ba1e:	2e0a      	cmp	r6, #10
 801ba20:	d104      	bne.n	801ba2c <__swbuf_r+0x6c>
 801ba22:	4621      	mov	r1, r4
 801ba24:	4628      	mov	r0, r5
 801ba26:	f7ff f975 	bl	801ad14 <_fflush_r>
 801ba2a:	b988      	cbnz	r0, 801ba50 <__swbuf_r+0x90>
 801ba2c:	4638      	mov	r0, r7
 801ba2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba30:	4b0a      	ldr	r3, [pc, #40]	; (801ba5c <__swbuf_r+0x9c>)
 801ba32:	429c      	cmp	r4, r3
 801ba34:	d101      	bne.n	801ba3a <__swbuf_r+0x7a>
 801ba36:	68ac      	ldr	r4, [r5, #8]
 801ba38:	e7cf      	b.n	801b9da <__swbuf_r+0x1a>
 801ba3a:	4b09      	ldr	r3, [pc, #36]	; (801ba60 <__swbuf_r+0xa0>)
 801ba3c:	429c      	cmp	r4, r3
 801ba3e:	bf08      	it	eq
 801ba40:	68ec      	ldreq	r4, [r5, #12]
 801ba42:	e7ca      	b.n	801b9da <__swbuf_r+0x1a>
 801ba44:	4621      	mov	r1, r4
 801ba46:	4628      	mov	r0, r5
 801ba48:	f000 f80c 	bl	801ba64 <__swsetup_r>
 801ba4c:	2800      	cmp	r0, #0
 801ba4e:	d0cb      	beq.n	801b9e8 <__swbuf_r+0x28>
 801ba50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ba54:	e7ea      	b.n	801ba2c <__swbuf_r+0x6c>
 801ba56:	bf00      	nop
 801ba58:	0802ae78 	.word	0x0802ae78
 801ba5c:	0802ae98 	.word	0x0802ae98
 801ba60:	0802ae58 	.word	0x0802ae58

0801ba64 <__swsetup_r>:
 801ba64:	4b32      	ldr	r3, [pc, #200]	; (801bb30 <__swsetup_r+0xcc>)
 801ba66:	b570      	push	{r4, r5, r6, lr}
 801ba68:	681d      	ldr	r5, [r3, #0]
 801ba6a:	4606      	mov	r6, r0
 801ba6c:	460c      	mov	r4, r1
 801ba6e:	b125      	cbz	r5, 801ba7a <__swsetup_r+0x16>
 801ba70:	69ab      	ldr	r3, [r5, #24]
 801ba72:	b913      	cbnz	r3, 801ba7a <__swsetup_r+0x16>
 801ba74:	4628      	mov	r0, r5
 801ba76:	f7ff f9f3 	bl	801ae60 <__sinit>
 801ba7a:	4b2e      	ldr	r3, [pc, #184]	; (801bb34 <__swsetup_r+0xd0>)
 801ba7c:	429c      	cmp	r4, r3
 801ba7e:	d10f      	bne.n	801baa0 <__swsetup_r+0x3c>
 801ba80:	686c      	ldr	r4, [r5, #4]
 801ba82:	89a3      	ldrh	r3, [r4, #12]
 801ba84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba88:	0719      	lsls	r1, r3, #28
 801ba8a:	d42c      	bmi.n	801bae6 <__swsetup_r+0x82>
 801ba8c:	06dd      	lsls	r5, r3, #27
 801ba8e:	d411      	bmi.n	801bab4 <__swsetup_r+0x50>
 801ba90:	2309      	movs	r3, #9
 801ba92:	6033      	str	r3, [r6, #0]
 801ba94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ba98:	81a3      	strh	r3, [r4, #12]
 801ba9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba9e:	e03e      	b.n	801bb1e <__swsetup_r+0xba>
 801baa0:	4b25      	ldr	r3, [pc, #148]	; (801bb38 <__swsetup_r+0xd4>)
 801baa2:	429c      	cmp	r4, r3
 801baa4:	d101      	bne.n	801baaa <__swsetup_r+0x46>
 801baa6:	68ac      	ldr	r4, [r5, #8]
 801baa8:	e7eb      	b.n	801ba82 <__swsetup_r+0x1e>
 801baaa:	4b24      	ldr	r3, [pc, #144]	; (801bb3c <__swsetup_r+0xd8>)
 801baac:	429c      	cmp	r4, r3
 801baae:	bf08      	it	eq
 801bab0:	68ec      	ldreq	r4, [r5, #12]
 801bab2:	e7e6      	b.n	801ba82 <__swsetup_r+0x1e>
 801bab4:	0758      	lsls	r0, r3, #29
 801bab6:	d512      	bpl.n	801bade <__swsetup_r+0x7a>
 801bab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801baba:	b141      	cbz	r1, 801bace <__swsetup_r+0x6a>
 801babc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bac0:	4299      	cmp	r1, r3
 801bac2:	d002      	beq.n	801baca <__swsetup_r+0x66>
 801bac4:	4630      	mov	r0, r6
 801bac6:	f7ff fabb 	bl	801b040 <_free_r>
 801baca:	2300      	movs	r3, #0
 801bacc:	6363      	str	r3, [r4, #52]	; 0x34
 801bace:	89a3      	ldrh	r3, [r4, #12]
 801bad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bad4:	81a3      	strh	r3, [r4, #12]
 801bad6:	2300      	movs	r3, #0
 801bad8:	6063      	str	r3, [r4, #4]
 801bada:	6923      	ldr	r3, [r4, #16]
 801badc:	6023      	str	r3, [r4, #0]
 801bade:	89a3      	ldrh	r3, [r4, #12]
 801bae0:	f043 0308 	orr.w	r3, r3, #8
 801bae4:	81a3      	strh	r3, [r4, #12]
 801bae6:	6923      	ldr	r3, [r4, #16]
 801bae8:	b94b      	cbnz	r3, 801bafe <__swsetup_r+0x9a>
 801baea:	89a3      	ldrh	r3, [r4, #12]
 801baec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801baf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801baf4:	d003      	beq.n	801bafe <__swsetup_r+0x9a>
 801baf6:	4621      	mov	r1, r4
 801baf8:	4630      	mov	r0, r6
 801bafa:	f000 f847 	bl	801bb8c <__smakebuf_r>
 801bafe:	89a0      	ldrh	r0, [r4, #12]
 801bb00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb04:	f010 0301 	ands.w	r3, r0, #1
 801bb08:	d00a      	beq.n	801bb20 <__swsetup_r+0xbc>
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	60a3      	str	r3, [r4, #8]
 801bb0e:	6963      	ldr	r3, [r4, #20]
 801bb10:	425b      	negs	r3, r3
 801bb12:	61a3      	str	r3, [r4, #24]
 801bb14:	6923      	ldr	r3, [r4, #16]
 801bb16:	b943      	cbnz	r3, 801bb2a <__swsetup_r+0xc6>
 801bb18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bb1c:	d1ba      	bne.n	801ba94 <__swsetup_r+0x30>
 801bb1e:	bd70      	pop	{r4, r5, r6, pc}
 801bb20:	0781      	lsls	r1, r0, #30
 801bb22:	bf58      	it	pl
 801bb24:	6963      	ldrpl	r3, [r4, #20]
 801bb26:	60a3      	str	r3, [r4, #8]
 801bb28:	e7f4      	b.n	801bb14 <__swsetup_r+0xb0>
 801bb2a:	2000      	movs	r0, #0
 801bb2c:	e7f7      	b.n	801bb1e <__swsetup_r+0xba>
 801bb2e:	bf00      	nop
 801bb30:	20000188 	.word	0x20000188
 801bb34:	0802ae78 	.word	0x0802ae78
 801bb38:	0802ae98 	.word	0x0802ae98
 801bb3c:	0802ae58 	.word	0x0802ae58

0801bb40 <__swhatbuf_r>:
 801bb40:	b570      	push	{r4, r5, r6, lr}
 801bb42:	460e      	mov	r6, r1
 801bb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb48:	2900      	cmp	r1, #0
 801bb4a:	b096      	sub	sp, #88	; 0x58
 801bb4c:	4614      	mov	r4, r2
 801bb4e:	461d      	mov	r5, r3
 801bb50:	da08      	bge.n	801bb64 <__swhatbuf_r+0x24>
 801bb52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bb56:	2200      	movs	r2, #0
 801bb58:	602a      	str	r2, [r5, #0]
 801bb5a:	061a      	lsls	r2, r3, #24
 801bb5c:	d410      	bmi.n	801bb80 <__swhatbuf_r+0x40>
 801bb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bb62:	e00e      	b.n	801bb82 <__swhatbuf_r+0x42>
 801bb64:	466a      	mov	r2, sp
 801bb66:	f000 f8a3 	bl	801bcb0 <_fstat_r>
 801bb6a:	2800      	cmp	r0, #0
 801bb6c:	dbf1      	blt.n	801bb52 <__swhatbuf_r+0x12>
 801bb6e:	9a01      	ldr	r2, [sp, #4]
 801bb70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bb74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bb78:	425a      	negs	r2, r3
 801bb7a:	415a      	adcs	r2, r3
 801bb7c:	602a      	str	r2, [r5, #0]
 801bb7e:	e7ee      	b.n	801bb5e <__swhatbuf_r+0x1e>
 801bb80:	2340      	movs	r3, #64	; 0x40
 801bb82:	2000      	movs	r0, #0
 801bb84:	6023      	str	r3, [r4, #0]
 801bb86:	b016      	add	sp, #88	; 0x58
 801bb88:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bb8c <__smakebuf_r>:
 801bb8c:	898b      	ldrh	r3, [r1, #12]
 801bb8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bb90:	079d      	lsls	r5, r3, #30
 801bb92:	4606      	mov	r6, r0
 801bb94:	460c      	mov	r4, r1
 801bb96:	d507      	bpl.n	801bba8 <__smakebuf_r+0x1c>
 801bb98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bb9c:	6023      	str	r3, [r4, #0]
 801bb9e:	6123      	str	r3, [r4, #16]
 801bba0:	2301      	movs	r3, #1
 801bba2:	6163      	str	r3, [r4, #20]
 801bba4:	b002      	add	sp, #8
 801bba6:	bd70      	pop	{r4, r5, r6, pc}
 801bba8:	ab01      	add	r3, sp, #4
 801bbaa:	466a      	mov	r2, sp
 801bbac:	f7ff ffc8 	bl	801bb40 <__swhatbuf_r>
 801bbb0:	9900      	ldr	r1, [sp, #0]
 801bbb2:	4605      	mov	r5, r0
 801bbb4:	4630      	mov	r0, r6
 801bbb6:	f7ff faad 	bl	801b114 <_malloc_r>
 801bbba:	b948      	cbnz	r0, 801bbd0 <__smakebuf_r+0x44>
 801bbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbc0:	059a      	lsls	r2, r3, #22
 801bbc2:	d4ef      	bmi.n	801bba4 <__smakebuf_r+0x18>
 801bbc4:	f023 0303 	bic.w	r3, r3, #3
 801bbc8:	f043 0302 	orr.w	r3, r3, #2
 801bbcc:	81a3      	strh	r3, [r4, #12]
 801bbce:	e7e3      	b.n	801bb98 <__smakebuf_r+0xc>
 801bbd0:	4b0d      	ldr	r3, [pc, #52]	; (801bc08 <__smakebuf_r+0x7c>)
 801bbd2:	62b3      	str	r3, [r6, #40]	; 0x28
 801bbd4:	89a3      	ldrh	r3, [r4, #12]
 801bbd6:	6020      	str	r0, [r4, #0]
 801bbd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bbdc:	81a3      	strh	r3, [r4, #12]
 801bbde:	9b00      	ldr	r3, [sp, #0]
 801bbe0:	6163      	str	r3, [r4, #20]
 801bbe2:	9b01      	ldr	r3, [sp, #4]
 801bbe4:	6120      	str	r0, [r4, #16]
 801bbe6:	b15b      	cbz	r3, 801bc00 <__smakebuf_r+0x74>
 801bbe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bbec:	4630      	mov	r0, r6
 801bbee:	f000 f871 	bl	801bcd4 <_isatty_r>
 801bbf2:	b128      	cbz	r0, 801bc00 <__smakebuf_r+0x74>
 801bbf4:	89a3      	ldrh	r3, [r4, #12]
 801bbf6:	f023 0303 	bic.w	r3, r3, #3
 801bbfa:	f043 0301 	orr.w	r3, r3, #1
 801bbfe:	81a3      	strh	r3, [r4, #12]
 801bc00:	89a0      	ldrh	r0, [r4, #12]
 801bc02:	4305      	orrs	r5, r0
 801bc04:	81a5      	strh	r5, [r4, #12]
 801bc06:	e7cd      	b.n	801bba4 <__smakebuf_r+0x18>
 801bc08:	0801adf9 	.word	0x0801adf9
 801bc0c:	00000000 	.word	0x00000000

0801bc10 <memchr>:
 801bc10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801bc14:	2a10      	cmp	r2, #16
 801bc16:	db2b      	blt.n	801bc70 <memchr+0x60>
 801bc18:	f010 0f07 	tst.w	r0, #7
 801bc1c:	d008      	beq.n	801bc30 <memchr+0x20>
 801bc1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bc22:	3a01      	subs	r2, #1
 801bc24:	428b      	cmp	r3, r1
 801bc26:	d02d      	beq.n	801bc84 <memchr+0x74>
 801bc28:	f010 0f07 	tst.w	r0, #7
 801bc2c:	b342      	cbz	r2, 801bc80 <memchr+0x70>
 801bc2e:	d1f6      	bne.n	801bc1e <memchr+0xe>
 801bc30:	b4f0      	push	{r4, r5, r6, r7}
 801bc32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 801bc36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801bc3a:	f022 0407 	bic.w	r4, r2, #7
 801bc3e:	f07f 0700 	mvns.w	r7, #0
 801bc42:	2300      	movs	r3, #0
 801bc44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 801bc48:	3c08      	subs	r4, #8
 801bc4a:	ea85 0501 	eor.w	r5, r5, r1
 801bc4e:	ea86 0601 	eor.w	r6, r6, r1
 801bc52:	fa85 f547 	uadd8	r5, r5, r7
 801bc56:	faa3 f587 	sel	r5, r3, r7
 801bc5a:	fa86 f647 	uadd8	r6, r6, r7
 801bc5e:	faa5 f687 	sel	r6, r5, r7
 801bc62:	b98e      	cbnz	r6, 801bc88 <memchr+0x78>
 801bc64:	d1ee      	bne.n	801bc44 <memchr+0x34>
 801bc66:	bcf0      	pop	{r4, r5, r6, r7}
 801bc68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801bc6c:	f002 0207 	and.w	r2, r2, #7
 801bc70:	b132      	cbz	r2, 801bc80 <memchr+0x70>
 801bc72:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bc76:	3a01      	subs	r2, #1
 801bc78:	ea83 0301 	eor.w	r3, r3, r1
 801bc7c:	b113      	cbz	r3, 801bc84 <memchr+0x74>
 801bc7e:	d1f8      	bne.n	801bc72 <memchr+0x62>
 801bc80:	2000      	movs	r0, #0
 801bc82:	4770      	bx	lr
 801bc84:	3801      	subs	r0, #1
 801bc86:	4770      	bx	lr
 801bc88:	2d00      	cmp	r5, #0
 801bc8a:	bf06      	itte	eq
 801bc8c:	4635      	moveq	r5, r6
 801bc8e:	3803      	subeq	r0, #3
 801bc90:	3807      	subne	r0, #7
 801bc92:	f015 0f01 	tst.w	r5, #1
 801bc96:	d107      	bne.n	801bca8 <memchr+0x98>
 801bc98:	3001      	adds	r0, #1
 801bc9a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801bc9e:	bf02      	ittt	eq
 801bca0:	3001      	addeq	r0, #1
 801bca2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 801bca6:	3001      	addeq	r0, #1
 801bca8:	bcf0      	pop	{r4, r5, r6, r7}
 801bcaa:	3801      	subs	r0, #1
 801bcac:	4770      	bx	lr
 801bcae:	bf00      	nop

0801bcb0 <_fstat_r>:
 801bcb0:	b538      	push	{r3, r4, r5, lr}
 801bcb2:	4d07      	ldr	r5, [pc, #28]	; (801bcd0 <_fstat_r+0x20>)
 801bcb4:	2300      	movs	r3, #0
 801bcb6:	4604      	mov	r4, r0
 801bcb8:	4608      	mov	r0, r1
 801bcba:	4611      	mov	r1, r2
 801bcbc:	602b      	str	r3, [r5, #0]
 801bcbe:	f000 f821 	bl	801bd04 <_fstat>
 801bcc2:	1c43      	adds	r3, r0, #1
 801bcc4:	d102      	bne.n	801bccc <_fstat_r+0x1c>
 801bcc6:	682b      	ldr	r3, [r5, #0]
 801bcc8:	b103      	cbz	r3, 801bccc <_fstat_r+0x1c>
 801bcca:	6023      	str	r3, [r4, #0]
 801bccc:	bd38      	pop	{r3, r4, r5, pc}
 801bcce:	bf00      	nop
 801bcd0:	20000214 	.word	0x20000214

0801bcd4 <_isatty_r>:
 801bcd4:	b538      	push	{r3, r4, r5, lr}
 801bcd6:	4d06      	ldr	r5, [pc, #24]	; (801bcf0 <_isatty_r+0x1c>)
 801bcd8:	2300      	movs	r3, #0
 801bcda:	4604      	mov	r4, r0
 801bcdc:	4608      	mov	r0, r1
 801bcde:	602b      	str	r3, [r5, #0]
 801bce0:	f000 f818 	bl	801bd14 <_isatty>
 801bce4:	1c43      	adds	r3, r0, #1
 801bce6:	d102      	bne.n	801bcee <_isatty_r+0x1a>
 801bce8:	682b      	ldr	r3, [r5, #0]
 801bcea:	b103      	cbz	r3, 801bcee <_isatty_r+0x1a>
 801bcec:	6023      	str	r3, [r4, #0]
 801bcee:	bd38      	pop	{r3, r4, r5, pc}
 801bcf0:	20000214 	.word	0x20000214

0801bcf4 <_close>:
 801bcf4:	4b02      	ldr	r3, [pc, #8]	; (801bd00 <_close+0xc>)
 801bcf6:	2258      	movs	r2, #88	; 0x58
 801bcf8:	601a      	str	r2, [r3, #0]
 801bcfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcfe:	4770      	bx	lr
 801bd00:	20000214 	.word	0x20000214

0801bd04 <_fstat>:
 801bd04:	4b02      	ldr	r3, [pc, #8]	; (801bd10 <_fstat+0xc>)
 801bd06:	2258      	movs	r2, #88	; 0x58
 801bd08:	601a      	str	r2, [r3, #0]
 801bd0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd0e:	4770      	bx	lr
 801bd10:	20000214 	.word	0x20000214

0801bd14 <_isatty>:
 801bd14:	4b02      	ldr	r3, [pc, #8]	; (801bd20 <_isatty+0xc>)
 801bd16:	2258      	movs	r2, #88	; 0x58
 801bd18:	601a      	str	r2, [r3, #0]
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	4770      	bx	lr
 801bd1e:	bf00      	nop
 801bd20:	20000214 	.word	0x20000214

0801bd24 <_lseek>:
 801bd24:	4b02      	ldr	r3, [pc, #8]	; (801bd30 <_lseek+0xc>)
 801bd26:	2258      	movs	r2, #88	; 0x58
 801bd28:	601a      	str	r2, [r3, #0]
 801bd2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd2e:	4770      	bx	lr
 801bd30:	20000214 	.word	0x20000214

0801bd34 <_read>:
 801bd34:	4b02      	ldr	r3, [pc, #8]	; (801bd40 <_read+0xc>)
 801bd36:	2258      	movs	r2, #88	; 0x58
 801bd38:	601a      	str	r2, [r3, #0]
 801bd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd3e:	4770      	bx	lr
 801bd40:	20000214 	.word	0x20000214

0801bd44 <_sbrk>:
 801bd44:	4a04      	ldr	r2, [pc, #16]	; (801bd58 <_sbrk+0x14>)
 801bd46:	4905      	ldr	r1, [pc, #20]	; (801bd5c <_sbrk+0x18>)
 801bd48:	6813      	ldr	r3, [r2, #0]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	bf08      	it	eq
 801bd4e:	460b      	moveq	r3, r1
 801bd50:	4418      	add	r0, r3
 801bd52:	6010      	str	r0, [r2, #0]
 801bd54:	4618      	mov	r0, r3
 801bd56:	4770      	bx	lr
 801bd58:	20000218 	.word	0x20000218
 801bd5c:	2000021c 	.word	0x2000021c

0801bd60 <_write>:
 801bd60:	4b02      	ldr	r3, [pc, #8]	; (801bd6c <_write+0xc>)
 801bd62:	2258      	movs	r2, #88	; 0x58
 801bd64:	601a      	str	r2, [r3, #0]
 801bd66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd6a:	4770      	bx	lr
 801bd6c:	20000214 	.word	0x20000214

Disassembly of section .init:

0801bd70 <_init>:
 801bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd72:	bf00      	nop

Disassembly of section .fini:

0801bd74 <_fini>:
 801bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd76:	bf00      	nop
